

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Sat Sep 30 06:56:09 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F1829
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	stringtext,global,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text6,local,class=CODE,merge=1,delta=2,group=4
    26                           	psect	text7,local,class=CODE,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2,group=4
    29                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,delta=2,group=4
    34                           	psect	text15,local,class=CODE,merge=1,delta=2,group=4
    35                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,delta=2,group=4
    41                           	psect	text22,local,class=CODE,merge=1,delta=2,group=4
    42                           	psect	text23,local,class=CODE,merge=1,delta=2,group=4
    43                           	psect	text24,local,class=CODE,merge=1,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,delta=2,group=1
    45                           	psect	text26,local,class=CODE,merge=1,delta=2,group=1
    46                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    47                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    48                           	psect	text29,local,class=CODE,merge=1,delta=2,group=1
    49                           	psect	text30,local,class=CODE,merge=1,delta=2
    50                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    51                           	psect	text32,local,class=CODE,merge=1,delta=2
    52                           	psect	text33,local,class=CODE,merge=1,delta=2,group=1
    53                           	psect	text34,local,class=CODE,merge=1,delta=2
    54                           	psect	text35,local,class=CODE,merge=1,delta=2
    55                           	psect	text36,local,class=CODE,merge=1,delta=2
    56                           	psect	text37,local,class=CODE,merge=1,delta=2
    57                           	psect	text38,local,class=CODE,merge=1,delta=2
    58                           	psect	text39,local,class=CODE,merge=1,delta=2,group=1
    59                           	psect	text40,local,class=CODE,merge=1,delta=2
    60                           	psect	text41,local,class=CODE,merge=1,delta=2
    61                           	psect	intentry,global,class=CODE,delta=2
    62                           	psect	text43,local,class=CODE,merge=1,delta=2
    63                           	psect	text44,local,class=CODE,merge=1,delta=2
    64                           	psect	swtext1,local,class=CONST,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,delta=2,group=1
    73                           	psect	text53,local,class=CODE,merge=1,delta=2,group=1
    74                           	psect	text54,local,class=CODE,merge=1,delta=2,group=1
    75                           	psect	text55,local,class=CODE,merge=1,delta=2,group=1
    76                           	psect	text56,local,class=CODE,merge=1,delta=2,group=1
    77                           	psect	text57,local,class=CODE,merge=1,delta=2,group=1
    78                           	psect	text58,local,class=CODE,merge=1,delta=2,group=1
    79                           	psect	text59,local,class=CODE,merge=1,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	dabs	1,0x7E,2
    82  0000                     
    83                           ; Version 1.41 (B)
    84                           ; Generated 21/02/2017 GMT
    85                           ; 
    86                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    87                           ; All rights reserved.
    88                           ; 
    89                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    90                           ; 
    91                           ; Redistribution and use in source and binary forms, with or without modification, are
    92                           ; permitted provided that the following conditions are met:
    93                           ; 
    94                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    95                           ;        conditions and the following disclaimer.
    96                           ; 
    97                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    98                           ;        of conditions and the following disclaimer in the documentation and/or other
    99                           ;        materials provided with the distribution.
   100                           ; 
   101                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   102                           ;        software without specific prior written permission.
   103                           ; 
   104                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   105                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   106                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   107                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   108                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   109                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   110                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   111                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   112                           ; 
   113                           ; 
   114                           ; Code-generator required, PIC16F1829 Definitions
   115                           ; 
   116                           ; SFR Addresses
   117  0000                     	;# 
   118  0001                     	;# 
   119  0002                     	;# 
   120  0003                     	;# 
   121  0004                     	;# 
   122  0005                     	;# 
   123  0006                     	;# 
   124  0007                     	;# 
   125  0008                     	;# 
   126  0009                     	;# 
   127  000A                     	;# 
   128  000B                     	;# 
   129  000C                     	;# 
   130  000D                     	;# 
   131  000E                     	;# 
   132  0011                     	;# 
   133  0012                     	;# 
   134  0013                     	;# 
   135  0014                     	;# 
   136  0015                     	;# 
   137  0016                     	;# 
   138  0016                     	;# 
   139  0017                     	;# 
   140  0018                     	;# 
   141  0019                     	;# 
   142  001A                     	;# 
   143  001B                     	;# 
   144  001C                     	;# 
   145  001E                     	;# 
   146  001F                     	;# 
   147  008C                     	;# 
   148  008D                     	;# 
   149  008E                     	;# 
   150  0091                     	;# 
   151  0092                     	;# 
   152  0093                     	;# 
   153  0094                     	;# 
   154  0095                     	;# 
   155  0096                     	;# 
   156  0097                     	;# 
   157  0098                     	;# 
   158  0099                     	;# 
   159  009A                     	;# 
   160  009B                     	;# 
   161  009B                     	;# 
   162  009C                     	;# 
   163  009D                     	;# 
   164  009E                     	;# 
   165  010C                     	;# 
   166  010D                     	;# 
   167  010E                     	;# 
   168  0111                     	;# 
   169  0112                     	;# 
   170  0113                     	;# 
   171  0114                     	;# 
   172  0115                     	;# 
   173  0116                     	;# 
   174  0117                     	;# 
   175  0118                     	;# 
   176  0119                     	;# 
   177  011A                     	;# 
   178  011B                     	;# 
   179  011D                     	;# 
   180  011E                     	;# 
   181  018C                     	;# 
   182  018D                     	;# 
   183  018E                     	;# 
   184  0191                     	;# 
   185  0191                     	;# 
   186  0192                     	;# 
   187  0193                     	;# 
   188  0193                     	;# 
   189  0193                     	;# 
   190  0194                     	;# 
   191  0195                     	;# 
   192  0196                     	;# 
   193  0199                     	;# 
   194  019A                     	;# 
   195  019B                     	;# 
   196  019B                     	;# 
   197  019C                     	;# 
   198  019D                     	;# 
   199  019E                     	;# 
   200  019F                     	;# 
   201  020C                     	;# 
   202  020D                     	;# 
   203  020E                     	;# 
   204  0211                     	;# 
   205  0211                     	;# 
   206  0212                     	;# 
   207  0212                     	;# 
   208  0213                     	;# 
   209  0213                     	;# 
   210  0214                     	;# 
   211  0214                     	;# 
   212  0215                     	;# 
   213  0215                     	;# 
   214  0215                     	;# 
   215  0216                     	;# 
   216  0216                     	;# 
   217  0217                     	;# 
   218  0217                     	;# 
   219  0219                     	;# 
   220  021A                     	;# 
   221  021B                     	;# 
   222  021C                     	;# 
   223  021D                     	;# 
   224  021E                     	;# 
   225  021F                     	;# 
   226  0291                     	;# 
   227  0291                     	;# 
   228  0292                     	;# 
   229  0293                     	;# 
   230  0294                     	;# 
   231  0295                     	;# 
   232  0295                     	;# 
   233  0296                     	;# 
   234  0298                     	;# 
   235  0298                     	;# 
   236  0299                     	;# 
   237  029A                     	;# 
   238  029B                     	;# 
   239  029C                     	;# 
   240  029D                     	;# 
   241  029E                     	;# 
   242  0311                     	;# 
   243  0311                     	;# 
   244  0312                     	;# 
   245  0313                     	;# 
   246  0318                     	;# 
   247  0318                     	;# 
   248  0319                     	;# 
   249  031A                     	;# 
   250  038C                     	;# 
   251  038D                     	;# 
   252  038E                     	;# 
   253  0391                     	;# 
   254  0392                     	;# 
   255  0393                     	;# 
   256  0394                     	;# 
   257  0395                     	;# 
   258  0396                     	;# 
   259  039A                     	;# 
   260  039C                     	;# 
   261  039D                     	;# 
   262  039E                     	;# 
   263  039F                     	;# 
   264  0415                     	;# 
   265  0416                     	;# 
   266  0417                     	;# 
   267  041C                     	;# 
   268  041D                     	;# 
   269  041E                     	;# 
   270  0FE4                     	;# 
   271  0FE5                     	;# 
   272  0FE6                     	;# 
   273  0FE7                     	;# 
   274  0FE8                     	;# 
   275  0FE9                     	;# 
   276  0FEA                     	;# 
   277  0FEB                     	;# 
   278  0FED                     	;# 
   279  0FEE                     	;# 
   280  0FEF                     	;# 
   281  0000                     	;# 
   282  0001                     	;# 
   283  0002                     	;# 
   284  0003                     	;# 
   285  0004                     	;# 
   286  0005                     	;# 
   287  0006                     	;# 
   288  0007                     	;# 
   289  0008                     	;# 
   290  0009                     	;# 
   291  000A                     	;# 
   292  000B                     	;# 
   293  000C                     	;# 
   294  000D                     	;# 
   295  000E                     	;# 
   296  0011                     	;# 
   297  0012                     	;# 
   298  0013                     	;# 
   299  0014                     	;# 
   300  0015                     	;# 
   301  0016                     	;# 
   302  0016                     	;# 
   303  0017                     	;# 
   304  0018                     	;# 
   305  0019                     	;# 
   306  001A                     	;# 
   307  001B                     	;# 
   308  001C                     	;# 
   309  001E                     	;# 
   310  001F                     	;# 
   311  008C                     	;# 
   312  008D                     	;# 
   313  008E                     	;# 
   314  0091                     	;# 
   315  0092                     	;# 
   316  0093                     	;# 
   317  0094                     	;# 
   318  0095                     	;# 
   319  0096                     	;# 
   320  0097                     	;# 
   321  0098                     	;# 
   322  0099                     	;# 
   323  009A                     	;# 
   324  009B                     	;# 
   325  009B                     	;# 
   326  009C                     	;# 
   327  009D                     	;# 
   328  009E                     	;# 
   329  010C                     	;# 
   330  010D                     	;# 
   331  010E                     	;# 
   332  0111                     	;# 
   333  0112                     	;# 
   334  0113                     	;# 
   335  0114                     	;# 
   336  0115                     	;# 
   337  0116                     	;# 
   338  0117                     	;# 
   339  0118                     	;# 
   340  0119                     	;# 
   341  011A                     	;# 
   342  011B                     	;# 
   343  011D                     	;# 
   344  011E                     	;# 
   345  018C                     	;# 
   346  018D                     	;# 
   347  018E                     	;# 
   348  0191                     	;# 
   349  0191                     	;# 
   350  0192                     	;# 
   351  0193                     	;# 
   352  0193                     	;# 
   353  0193                     	;# 
   354  0194                     	;# 
   355  0195                     	;# 
   356  0196                     	;# 
   357  0199                     	;# 
   358  019A                     	;# 
   359  019B                     	;# 
   360  019B                     	;# 
   361  019C                     	;# 
   362  019D                     	;# 
   363  019E                     	;# 
   364  019F                     	;# 
   365  020C                     	;# 
   366  020D                     	;# 
   367  020E                     	;# 
   368  0211                     	;# 
   369  0211                     	;# 
   370  0212                     	;# 
   371  0212                     	;# 
   372  0213                     	;# 
   373  0213                     	;# 
   374  0214                     	;# 
   375  0214                     	;# 
   376  0215                     	;# 
   377  0215                     	;# 
   378  0215                     	;# 
   379  0216                     	;# 
   380  0216                     	;# 
   381  0217                     	;# 
   382  0217                     	;# 
   383  0219                     	;# 
   384  021A                     	;# 
   385  021B                     	;# 
   386  021C                     	;# 
   387  021D                     	;# 
   388  021E                     	;# 
   389  021F                     	;# 
   390  0291                     	;# 
   391  0291                     	;# 
   392  0292                     	;# 
   393  0293                     	;# 
   394  0294                     	;# 
   395  0295                     	;# 
   396  0295                     	;# 
   397  0296                     	;# 
   398  0298                     	;# 
   399  0298                     	;# 
   400  0299                     	;# 
   401  029A                     	;# 
   402  029B                     	;# 
   403  029C                     	;# 
   404  029D                     	;# 
   405  029E                     	;# 
   406  0311                     	;# 
   407  0311                     	;# 
   408  0312                     	;# 
   409  0313                     	;# 
   410  0318                     	;# 
   411  0318                     	;# 
   412  0319                     	;# 
   413  031A                     	;# 
   414  038C                     	;# 
   415  038D                     	;# 
   416  038E                     	;# 
   417  0391                     	;# 
   418  0392                     	;# 
   419  0393                     	;# 
   420  0394                     	;# 
   421  0395                     	;# 
   422  0396                     	;# 
   423  039A                     	;# 
   424  039C                     	;# 
   425  039D                     	;# 
   426  039E                     	;# 
   427  039F                     	;# 
   428  0415                     	;# 
   429  0416                     	;# 
   430  0417                     	;# 
   431  041C                     	;# 
   432  041D                     	;# 
   433  041E                     	;# 
   434  0FE4                     	;# 
   435  0FE5                     	;# 
   436  0FE6                     	;# 
   437  0FE7                     	;# 
   438  0FE8                     	;# 
   439  0FE9                     	;# 
   440  0FEA                     	;# 
   441  0FEB                     	;# 
   442  0FED                     	;# 
   443  0FEE                     	;# 
   444  0FEF                     	;# 
   445  0000                     	;# 
   446  0001                     	;# 
   447  0002                     	;# 
   448  0003                     	;# 
   449  0004                     	;# 
   450  0005                     	;# 
   451  0006                     	;# 
   452  0007                     	;# 
   453  0008                     	;# 
   454  0009                     	;# 
   455  000A                     	;# 
   456  000B                     	;# 
   457  000C                     	;# 
   458  000D                     	;# 
   459  000E                     	;# 
   460  0011                     	;# 
   461  0012                     	;# 
   462  0013                     	;# 
   463  0014                     	;# 
   464  0015                     	;# 
   465  0016                     	;# 
   466  0016                     	;# 
   467  0017                     	;# 
   468  0018                     	;# 
   469  0019                     	;# 
   470  001A                     	;# 
   471  001B                     	;# 
   472  001C                     	;# 
   473  001E                     	;# 
   474  001F                     	;# 
   475  008C                     	;# 
   476  008D                     	;# 
   477  008E                     	;# 
   478  0091                     	;# 
   479  0092                     	;# 
   480  0093                     	;# 
   481  0094                     	;# 
   482  0095                     	;# 
   483  0096                     	;# 
   484  0097                     	;# 
   485  0098                     	;# 
   486  0099                     	;# 
   487  009A                     	;# 
   488  009B                     	;# 
   489  009B                     	;# 
   490  009C                     	;# 
   491  009D                     	;# 
   492  009E                     	;# 
   493  010C                     	;# 
   494  010D                     	;# 
   495  010E                     	;# 
   496  0111                     	;# 
   497  0112                     	;# 
   498  0113                     	;# 
   499  0114                     	;# 
   500  0115                     	;# 
   501  0116                     	;# 
   502  0117                     	;# 
   503  0118                     	;# 
   504  0119                     	;# 
   505  011A                     	;# 
   506  011B                     	;# 
   507  011D                     	;# 
   508  011E                     	;# 
   509  018C                     	;# 
   510  018D                     	;# 
   511  018E                     	;# 
   512  0191                     	;# 
   513  0191                     	;# 
   514  0192                     	;# 
   515  0193                     	;# 
   516  0193                     	;# 
   517  0193                     	;# 
   518  0194                     	;# 
   519  0195                     	;# 
   520  0196                     	;# 
   521  0199                     	;# 
   522  019A                     	;# 
   523  019B                     	;# 
   524  019B                     	;# 
   525  019C                     	;# 
   526  019D                     	;# 
   527  019E                     	;# 
   528  019F                     	;# 
   529  020C                     	;# 
   530  020D                     	;# 
   531  020E                     	;# 
   532  0211                     	;# 
   533  0211                     	;# 
   534  0212                     	;# 
   535  0212                     	;# 
   536  0213                     	;# 
   537  0213                     	;# 
   538  0214                     	;# 
   539  0214                     	;# 
   540  0215                     	;# 
   541  0215                     	;# 
   542  0215                     	;# 
   543  0216                     	;# 
   544  0216                     	;# 
   545  0217                     	;# 
   546  0217                     	;# 
   547  0219                     	;# 
   548  021A                     	;# 
   549  021B                     	;# 
   550  021C                     	;# 
   551  021D                     	;# 
   552  021E                     	;# 
   553  021F                     	;# 
   554  0291                     	;# 
   555  0291                     	;# 
   556  0292                     	;# 
   557  0293                     	;# 
   558  0294                     	;# 
   559  0295                     	;# 
   560  0295                     	;# 
   561  0296                     	;# 
   562  0298                     	;# 
   563  0298                     	;# 
   564  0299                     	;# 
   565  029A                     	;# 
   566  029B                     	;# 
   567  029C                     	;# 
   568  029D                     	;# 
   569  029E                     	;# 
   570  0311                     	;# 
   571  0311                     	;# 
   572  0312                     	;# 
   573  0313                     	;# 
   574  0318                     	;# 
   575  0318                     	;# 
   576  0319                     	;# 
   577  031A                     	;# 
   578  038C                     	;# 
   579  038D                     	;# 
   580  038E                     	;# 
   581  0391                     	;# 
   582  0392                     	;# 
   583  0393                     	;# 
   584  0394                     	;# 
   585  0395                     	;# 
   586  0396                     	;# 
   587  039A                     	;# 
   588  039C                     	;# 
   589  039D                     	;# 
   590  039E                     	;# 
   591  039F                     	;# 
   592  0415                     	;# 
   593  0416                     	;# 
   594  0417                     	;# 
   595  041C                     	;# 
   596  041D                     	;# 
   597  041E                     	;# 
   598  0FE4                     	;# 
   599  0FE5                     	;# 
   600  0FE6                     	;# 
   601  0FE7                     	;# 
   602  0FE8                     	;# 
   603  0FE9                     	;# 
   604  0FEA                     	;# 
   605  0FEB                     	;# 
   606  0FED                     	;# 
   607  0FEE                     	;# 
   608  0FEF                     	;# 
   609  0000                     	;# 
   610  0001                     	;# 
   611  0002                     	;# 
   612  0003                     	;# 
   613  0004                     	;# 
   614  0005                     	;# 
   615  0006                     	;# 
   616  0007                     	;# 
   617  0008                     	;# 
   618  0009                     	;# 
   619  000A                     	;# 
   620  000B                     	;# 
   621  000C                     	;# 
   622  000D                     	;# 
   623  000E                     	;# 
   624  0011                     	;# 
   625  0012                     	;# 
   626  0013                     	;# 
   627  0014                     	;# 
   628  0015                     	;# 
   629  0016                     	;# 
   630  0016                     	;# 
   631  0017                     	;# 
   632  0018                     	;# 
   633  0019                     	;# 
   634  001A                     	;# 
   635  001B                     	;# 
   636  001C                     	;# 
   637  001E                     	;# 
   638  001F                     	;# 
   639  008C                     	;# 
   640  008D                     	;# 
   641  008E                     	;# 
   642  0091                     	;# 
   643  0092                     	;# 
   644  0093                     	;# 
   645  0094                     	;# 
   646  0095                     	;# 
   647  0096                     	;# 
   648  0097                     	;# 
   649  0098                     	;# 
   650  0099                     	;# 
   651  009A                     	;# 
   652  009B                     	;# 
   653  009B                     	;# 
   654  009C                     	;# 
   655  009D                     	;# 
   656  009E                     	;# 
   657  010C                     	;# 
   658  010D                     	;# 
   659  010E                     	;# 
   660  0111                     	;# 
   661  0112                     	;# 
   662  0113                     	;# 
   663  0114                     	;# 
   664  0115                     	;# 
   665  0116                     	;# 
   666  0117                     	;# 
   667  0118                     	;# 
   668  0119                     	;# 
   669  011A                     	;# 
   670  011B                     	;# 
   671  011D                     	;# 
   672  011E                     	;# 
   673  018C                     	;# 
   674  018D                     	;# 
   675  018E                     	;# 
   676  0191                     	;# 
   677  0191                     	;# 
   678  0192                     	;# 
   679  0193                     	;# 
   680  0193                     	;# 
   681  0193                     	;# 
   682  0194                     	;# 
   683  0195                     	;# 
   684  0196                     	;# 
   685  0199                     	;# 
   686  019A                     	;# 
   687  019B                     	;# 
   688  019B                     	;# 
   689  019C                     	;# 
   690  019D                     	;# 
   691  019E                     	;# 
   692  019F                     	;# 
   693  020C                     	;# 
   694  020D                     	;# 
   695  020E                     	;# 
   696  0211                     	;# 
   697  0211                     	;# 
   698  0212                     	;# 
   699  0212                     	;# 
   700  0213                     	;# 
   701  0213                     	;# 
   702  0214                     	;# 
   703  0214                     	;# 
   704  0215                     	;# 
   705  0215                     	;# 
   706  0215                     	;# 
   707  0216                     	;# 
   708  0216                     	;# 
   709  0217                     	;# 
   710  0217                     	;# 
   711  0219                     	;# 
   712  021A                     	;# 
   713  021B                     	;# 
   714  021C                     	;# 
   715  021D                     	;# 
   716  021E                     	;# 
   717  021F                     	;# 
   718  0291                     	;# 
   719  0291                     	;# 
   720  0292                     	;# 
   721  0293                     	;# 
   722  0294                     	;# 
   723  0295                     	;# 
   724  0295                     	;# 
   725  0296                     	;# 
   726  0298                     	;# 
   727  0298                     	;# 
   728  0299                     	;# 
   729  029A                     	;# 
   730  029B                     	;# 
   731  029C                     	;# 
   732  029D                     	;# 
   733  029E                     	;# 
   734  0311                     	;# 
   735  0311                     	;# 
   736  0312                     	;# 
   737  0313                     	;# 
   738  0318                     	;# 
   739  0318                     	;# 
   740  0319                     	;# 
   741  031A                     	;# 
   742  038C                     	;# 
   743  038D                     	;# 
   744  038E                     	;# 
   745  0391                     	;# 
   746  0392                     	;# 
   747  0393                     	;# 
   748  0394                     	;# 
   749  0395                     	;# 
   750  0396                     	;# 
   751  039A                     	;# 
   752  039C                     	;# 
   753  039D                     	;# 
   754  039E                     	;# 
   755  039F                     	;# 
   756  0415                     	;# 
   757  0416                     	;# 
   758  0417                     	;# 
   759  041C                     	;# 
   760  041D                     	;# 
   761  041E                     	;# 
   762  0FE4                     	;# 
   763  0FE5                     	;# 
   764  0FE6                     	;# 
   765  0FE7                     	;# 
   766  0FE8                     	;# 
   767  0FE9                     	;# 
   768  0FEA                     	;# 
   769  0FEB                     	;# 
   770  0FED                     	;# 
   771  0FEE                     	;# 
   772  0FEF                     	;# 
   773  0000                     	;# 
   774  0001                     	;# 
   775  0002                     	;# 
   776  0003                     	;# 
   777  0004                     	;# 
   778  0005                     	;# 
   779  0006                     	;# 
   780  0007                     	;# 
   781  0008                     	;# 
   782  0009                     	;# 
   783  000A                     	;# 
   784  000B                     	;# 
   785  000C                     	;# 
   786  000D                     	;# 
   787  000E                     	;# 
   788  0011                     	;# 
   789  0012                     	;# 
   790  0013                     	;# 
   791  0014                     	;# 
   792  0015                     	;# 
   793  0016                     	;# 
   794  0016                     	;# 
   795  0017                     	;# 
   796  0018                     	;# 
   797  0019                     	;# 
   798  001A                     	;# 
   799  001B                     	;# 
   800  001C                     	;# 
   801  001E                     	;# 
   802  001F                     	;# 
   803  008C                     	;# 
   804  008D                     	;# 
   805  008E                     	;# 
   806  0091                     	;# 
   807  0092                     	;# 
   808  0093                     	;# 
   809  0094                     	;# 
   810  0095                     	;# 
   811  0096                     	;# 
   812  0097                     	;# 
   813  0098                     	;# 
   814  0099                     	;# 
   815  009A                     	;# 
   816  009B                     	;# 
   817  009B                     	;# 
   818  009C                     	;# 
   819  009D                     	;# 
   820  009E                     	;# 
   821  010C                     	;# 
   822  010D                     	;# 
   823  010E                     	;# 
   824  0111                     	;# 
   825  0112                     	;# 
   826  0113                     	;# 
   827  0114                     	;# 
   828  0115                     	;# 
   829  0116                     	;# 
   830  0117                     	;# 
   831  0118                     	;# 
   832  0119                     	;# 
   833  011A                     	;# 
   834  011B                     	;# 
   835  011D                     	;# 
   836  011E                     	;# 
   837  018C                     	;# 
   838  018D                     	;# 
   839  018E                     	;# 
   840  0191                     	;# 
   841  0191                     	;# 
   842  0192                     	;# 
   843  0193                     	;# 
   844  0193                     	;# 
   845  0193                     	;# 
   846  0194                     	;# 
   847  0195                     	;# 
   848  0196                     	;# 
   849  0199                     	;# 
   850  019A                     	;# 
   851  019B                     	;# 
   852  019B                     	;# 
   853  019C                     	;# 
   854  019D                     	;# 
   855  019E                     	;# 
   856  019F                     	;# 
   857  020C                     	;# 
   858  020D                     	;# 
   859  020E                     	;# 
   860  0211                     	;# 
   861  0211                     	;# 
   862  0212                     	;# 
   863  0212                     	;# 
   864  0213                     	;# 
   865  0213                     	;# 
   866  0214                     	;# 
   867  0214                     	;# 
   868  0215                     	;# 
   869  0215                     	;# 
   870  0215                     	;# 
   871  0216                     	;# 
   872  0216                     	;# 
   873  0217                     	;# 
   874  0217                     	;# 
   875  0219                     	;# 
   876  021A                     	;# 
   877  021B                     	;# 
   878  021C                     	;# 
   879  021D                     	;# 
   880  021E                     	;# 
   881  021F                     	;# 
   882  0291                     	;# 
   883  0291                     	;# 
   884  0292                     	;# 
   885  0293                     	;# 
   886  0294                     	;# 
   887  0295                     	;# 
   888  0295                     	;# 
   889  0296                     	;# 
   890  0298                     	;# 
   891  0298                     	;# 
   892  0299                     	;# 
   893  029A                     	;# 
   894  029B                     	;# 
   895  029C                     	;# 
   896  029D                     	;# 
   897  029E                     	;# 
   898  0311                     	;# 
   899  0311                     	;# 
   900  0312                     	;# 
   901  0313                     	;# 
   902  0318                     	;# 
   903  0318                     	;# 
   904  0319                     	;# 
   905  031A                     	;# 
   906  038C                     	;# 
   907  038D                     	;# 
   908  038E                     	;# 
   909  0391                     	;# 
   910  0392                     	;# 
   911  0393                     	;# 
   912  0394                     	;# 
   913  0395                     	;# 
   914  0396                     	;# 
   915  039A                     	;# 
   916  039C                     	;# 
   917  039D                     	;# 
   918  039E                     	;# 
   919  039F                     	;# 
   920  0415                     	;# 
   921  0416                     	;# 
   922  0417                     	;# 
   923  041C                     	;# 
   924  041D                     	;# 
   925  041E                     	;# 
   926  0FE4                     	;# 
   927  0FE5                     	;# 
   928  0FE6                     	;# 
   929  0FE7                     	;# 
   930  0FE8                     	;# 
   931  0FE9                     	;# 
   932  0FEA                     	;# 
   933  0FEB                     	;# 
   934  0FED                     	;# 
   935  0FEE                     	;# 
   936  0FEF                     	;# 
   937  0000                     	;# 
   938  0001                     	;# 
   939  0002                     	;# 
   940  0003                     	;# 
   941  0004                     	;# 
   942  0005                     	;# 
   943  0006                     	;# 
   944  0007                     	;# 
   945  0008                     	;# 
   946  0009                     	;# 
   947  000A                     	;# 
   948  000B                     	;# 
   949  000C                     	;# 
   950  000D                     	;# 
   951  000E                     	;# 
   952  0011                     	;# 
   953  0012                     	;# 
   954  0013                     	;# 
   955  0014                     	;# 
   956  0015                     	;# 
   957  0016                     	;# 
   958  0016                     	;# 
   959  0017                     	;# 
   960  0018                     	;# 
   961  0019                     	;# 
   962  001A                     	;# 
   963  001B                     	;# 
   964  001C                     	;# 
   965  001E                     	;# 
   966  001F                     	;# 
   967  008C                     	;# 
   968  008D                     	;# 
   969  008E                     	;# 
   970  0091                     	;# 
   971  0092                     	;# 
   972  0093                     	;# 
   973  0094                     	;# 
   974  0095                     	;# 
   975  0096                     	;# 
   976  0097                     	;# 
   977  0098                     	;# 
   978  0099                     	;# 
   979  009A                     	;# 
   980  009B                     	;# 
   981  009B                     	;# 
   982  009C                     	;# 
   983  009D                     	;# 
   984  009E                     	;# 
   985  010C                     	;# 
   986  010D                     	;# 
   987  010E                     	;# 
   988  0111                     	;# 
   989  0112                     	;# 
   990  0113                     	;# 
   991  0114                     	;# 
   992  0115                     	;# 
   993  0116                     	;# 
   994  0117                     	;# 
   995  0118                     	;# 
   996  0119                     	;# 
   997  011A                     	;# 
   998  011B                     	;# 
   999  011D                     	;# 
  1000  011E                     	;# 
  1001  018C                     	;# 
  1002  018D                     	;# 
  1003  018E                     	;# 
  1004  0191                     	;# 
  1005  0191                     	;# 
  1006  0192                     	;# 
  1007  0193                     	;# 
  1008  0193                     	;# 
  1009  0193                     	;# 
  1010  0194                     	;# 
  1011  0195                     	;# 
  1012  0196                     	;# 
  1013  0199                     	;# 
  1014  019A                     	;# 
  1015  019B                     	;# 
  1016  019B                     	;# 
  1017  019C                     	;# 
  1018  019D                     	;# 
  1019  019E                     	;# 
  1020  019F                     	;# 
  1021  020C                     	;# 
  1022  020D                     	;# 
  1023  020E                     	;# 
  1024  0211                     	;# 
  1025  0211                     	;# 
  1026  0212                     	;# 
  1027  0212                     	;# 
  1028  0213                     	;# 
  1029  0213                     	;# 
  1030  0214                     	;# 
  1031  0214                     	;# 
  1032  0215                     	;# 
  1033  0215                     	;# 
  1034  0215                     	;# 
  1035  0216                     	;# 
  1036  0216                     	;# 
  1037  0217                     	;# 
  1038  0217                     	;# 
  1039  0219                     	;# 
  1040  021A                     	;# 
  1041  021B                     	;# 
  1042  021C                     	;# 
  1043  021D                     	;# 
  1044  021E                     	;# 
  1045  021F                     	;# 
  1046  0291                     	;# 
  1047  0291                     	;# 
  1048  0292                     	;# 
  1049  0293                     	;# 
  1050  0294                     	;# 
  1051  0295                     	;# 
  1052  0295                     	;# 
  1053  0296                     	;# 
  1054  0298                     	;# 
  1055  0298                     	;# 
  1056  0299                     	;# 
  1057  029A                     	;# 
  1058  029B                     	;# 
  1059  029C                     	;# 
  1060  029D                     	;# 
  1061  029E                     	;# 
  1062  0311                     	;# 
  1063  0311                     	;# 
  1064  0312                     	;# 
  1065  0313                     	;# 
  1066  0318                     	;# 
  1067  0318                     	;# 
  1068  0319                     	;# 
  1069  031A                     	;# 
  1070  038C                     	;# 
  1071  038D                     	;# 
  1072  038E                     	;# 
  1073  0391                     	;# 
  1074  0392                     	;# 
  1075  0393                     	;# 
  1076  0394                     	;# 
  1077  0395                     	;# 
  1078  0396                     	;# 
  1079  039A                     	;# 
  1080  039C                     	;# 
  1081  039D                     	;# 
  1082  039E                     	;# 
  1083  039F                     	;# 
  1084  0415                     	;# 
  1085  0416                     	;# 
  1086  0417                     	;# 
  1087  041C                     	;# 
  1088  041D                     	;# 
  1089  041E                     	;# 
  1090  0FE4                     	;# 
  1091  0FE5                     	;# 
  1092  0FE6                     	;# 
  1093  0FE7                     	;# 
  1094  0FE8                     	;# 
  1095  0FE9                     	;# 
  1096  0FEA                     	;# 
  1097  0FEB                     	;# 
  1098  0FED                     	;# 
  1099  0FEE                     	;# 
  1100  0FEF                     	;# 
  1101  0000                     	;# 
  1102  0001                     	;# 
  1103  0002                     	;# 
  1104  0003                     	;# 
  1105  0004                     	;# 
  1106  0005                     	;# 
  1107  0006                     	;# 
  1108  0007                     	;# 
  1109  0008                     	;# 
  1110  0009                     	;# 
  1111  000A                     	;# 
  1112  000B                     	;# 
  1113  000C                     	;# 
  1114  000D                     	;# 
  1115  000E                     	;# 
  1116  0011                     	;# 
  1117  0012                     	;# 
  1118  0013                     	;# 
  1119  0014                     	;# 
  1120  0015                     	;# 
  1121  0016                     	;# 
  1122  0016                     	;# 
  1123  0017                     	;# 
  1124  0018                     	;# 
  1125  0019                     	;# 
  1126  001A                     	;# 
  1127  001B                     	;# 
  1128  001C                     	;# 
  1129  001E                     	;# 
  1130  001F                     	;# 
  1131  008C                     	;# 
  1132  008D                     	;# 
  1133  008E                     	;# 
  1134  0091                     	;# 
  1135  0092                     	;# 
  1136  0093                     	;# 
  1137  0094                     	;# 
  1138  0095                     	;# 
  1139  0096                     	;# 
  1140  0097                     	;# 
  1141  0098                     	;# 
  1142  0099                     	;# 
  1143  009A                     	;# 
  1144  009B                     	;# 
  1145  009B                     	;# 
  1146  009C                     	;# 
  1147  009D                     	;# 
  1148  009E                     	;# 
  1149  010C                     	;# 
  1150  010D                     	;# 
  1151  010E                     	;# 
  1152  0111                     	;# 
  1153  0112                     	;# 
  1154  0113                     	;# 
  1155  0114                     	;# 
  1156  0115                     	;# 
  1157  0116                     	;# 
  1158  0117                     	;# 
  1159  0118                     	;# 
  1160  0119                     	;# 
  1161  011A                     	;# 
  1162  011B                     	;# 
  1163  011D                     	;# 
  1164  011E                     	;# 
  1165  018C                     	;# 
  1166  018D                     	;# 
  1167  018E                     	;# 
  1168  0191                     	;# 
  1169  0191                     	;# 
  1170  0192                     	;# 
  1171  0193                     	;# 
  1172  0193                     	;# 
  1173  0193                     	;# 
  1174  0194                     	;# 
  1175  0195                     	;# 
  1176  0196                     	;# 
  1177  0199                     	;# 
  1178  019A                     	;# 
  1179  019B                     	;# 
  1180  019B                     	;# 
  1181  019C                     	;# 
  1182  019D                     	;# 
  1183  019E                     	;# 
  1184  019F                     	;# 
  1185  020C                     	;# 
  1186  020D                     	;# 
  1187  020E                     	;# 
  1188  0211                     	;# 
  1189  0211                     	;# 
  1190  0212                     	;# 
  1191  0212                     	;# 
  1192  0213                     	;# 
  1193  0213                     	;# 
  1194  0214                     	;# 
  1195  0214                     	;# 
  1196  0215                     	;# 
  1197  0215                     	;# 
  1198  0215                     	;# 
  1199  0216                     	;# 
  1200  0216                     	;# 
  1201  0217                     	;# 
  1202  0217                     	;# 
  1203  0219                     	;# 
  1204  021A                     	;# 
  1205  021B                     	;# 
  1206  021C                     	;# 
  1207  021D                     	;# 
  1208  021E                     	;# 
  1209  021F                     	;# 
  1210  0291                     	;# 
  1211  0291                     	;# 
  1212  0292                     	;# 
  1213  0293                     	;# 
  1214  0294                     	;# 
  1215  0295                     	;# 
  1216  0295                     	;# 
  1217  0296                     	;# 
  1218  0298                     	;# 
  1219  0298                     	;# 
  1220  0299                     	;# 
  1221  029A                     	;# 
  1222  029B                     	;# 
  1223  029C                     	;# 
  1224  029D                     	;# 
  1225  029E                     	;# 
  1226  0311                     	;# 
  1227  0311                     	;# 
  1228  0312                     	;# 
  1229  0313                     	;# 
  1230  0318                     	;# 
  1231  0318                     	;# 
  1232  0319                     	;# 
  1233  031A                     	;# 
  1234  038C                     	;# 
  1235  038D                     	;# 
  1236  038E                     	;# 
  1237  0391                     	;# 
  1238  0392                     	;# 
  1239  0393                     	;# 
  1240  0394                     	;# 
  1241  0395                     	;# 
  1242  0396                     	;# 
  1243  039A                     	;# 
  1244  039C                     	;# 
  1245  039D                     	;# 
  1246  039E                     	;# 
  1247  039F                     	;# 
  1248  0415                     	;# 
  1249  0416                     	;# 
  1250  0417                     	;# 
  1251  041C                     	;# 
  1252  041D                     	;# 
  1253  041E                     	;# 
  1254  0FE4                     	;# 
  1255  0FE5                     	;# 
  1256  0FE6                     	;# 
  1257  0FE7                     	;# 
  1258  0FE8                     	;# 
  1259  0FE9                     	;# 
  1260  0FEA                     	;# 
  1261  0FEB                     	;# 
  1262  0FED                     	;# 
  1263  0FEE                     	;# 
  1264  0FEF                     	;# 
  1265  0000                     	;# 
  1266  0001                     	;# 
  1267  0002                     	;# 
  1268  0003                     	;# 
  1269  0004                     	;# 
  1270  0005                     	;# 
  1271  0006                     	;# 
  1272  0007                     	;# 
  1273  0008                     	;# 
  1274  0009                     	;# 
  1275  000A                     	;# 
  1276  000B                     	;# 
  1277  000C                     	;# 
  1278  000D                     	;# 
  1279  000E                     	;# 
  1280  0011                     	;# 
  1281  0012                     	;# 
  1282  0013                     	;# 
  1283  0014                     	;# 
  1284  0015                     	;# 
  1285  0016                     	;# 
  1286  0016                     	;# 
  1287  0017                     	;# 
  1288  0018                     	;# 
  1289  0019                     	;# 
  1290  001A                     	;# 
  1291  001B                     	;# 
  1292  001C                     	;# 
  1293  001E                     	;# 
  1294  001F                     	;# 
  1295  008C                     	;# 
  1296  008D                     	;# 
  1297  008E                     	;# 
  1298  0091                     	;# 
  1299  0092                     	;# 
  1300  0093                     	;# 
  1301  0094                     	;# 
  1302  0095                     	;# 
  1303  0096                     	;# 
  1304  0097                     	;# 
  1305  0098                     	;# 
  1306  0099                     	;# 
  1307  009A                     	;# 
  1308  009B                     	;# 
  1309  009B                     	;# 
  1310  009C                     	;# 
  1311  009D                     	;# 
  1312  009E                     	;# 
  1313  010C                     	;# 
  1314  010D                     	;# 
  1315  010E                     	;# 
  1316  0111                     	;# 
  1317  0112                     	;# 
  1318  0113                     	;# 
  1319  0114                     	;# 
  1320  0115                     	;# 
  1321  0116                     	;# 
  1322  0117                     	;# 
  1323  0118                     	;# 
  1324  0119                     	;# 
  1325  011A                     	;# 
  1326  011B                     	;# 
  1327  011D                     	;# 
  1328  011E                     	;# 
  1329  018C                     	;# 
  1330  018D                     	;# 
  1331  018E                     	;# 
  1332  0191                     	;# 
  1333  0191                     	;# 
  1334  0192                     	;# 
  1335  0193                     	;# 
  1336  0193                     	;# 
  1337  0193                     	;# 
  1338  0194                     	;# 
  1339  0195                     	;# 
  1340  0196                     	;# 
  1341  0199                     	;# 
  1342  019A                     	;# 
  1343  019B                     	;# 
  1344  019B                     	;# 
  1345  019C                     	;# 
  1346  019D                     	;# 
  1347  019E                     	;# 
  1348  019F                     	;# 
  1349  020C                     	;# 
  1350  020D                     	;# 
  1351  020E                     	;# 
  1352  0211                     	;# 
  1353  0211                     	;# 
  1354  0212                     	;# 
  1355  0212                     	;# 
  1356  0213                     	;# 
  1357  0213                     	;# 
  1358  0214                     	;# 
  1359  0214                     	;# 
  1360  0215                     	;# 
  1361  0215                     	;# 
  1362  0215                     	;# 
  1363  0216                     	;# 
  1364  0216                     	;# 
  1365  0217                     	;# 
  1366  0217                     	;# 
  1367  0219                     	;# 
  1368  021A                     	;# 
  1369  021B                     	;# 
  1370  021C                     	;# 
  1371  021D                     	;# 
  1372  021E                     	;# 
  1373  021F                     	;# 
  1374  0291                     	;# 
  1375  0291                     	;# 
  1376  0292                     	;# 
  1377  0293                     	;# 
  1378  0294                     	;# 
  1379  0295                     	;# 
  1380  0295                     	;# 
  1381  0296                     	;# 
  1382  0298                     	;# 
  1383  0298                     	;# 
  1384  0299                     	;# 
  1385  029A                     	;# 
  1386  029B                     	;# 
  1387  029C                     	;# 
  1388  029D                     	;# 
  1389  029E                     	;# 
  1390  0311                     	;# 
  1391  0311                     	;# 
  1392  0312                     	;# 
  1393  0313                     	;# 
  1394  0318                     	;# 
  1395  0318                     	;# 
  1396  0319                     	;# 
  1397  031A                     	;# 
  1398  038C                     	;# 
  1399  038D                     	;# 
  1400  038E                     	;# 
  1401  0391                     	;# 
  1402  0392                     	;# 
  1403  0393                     	;# 
  1404  0394                     	;# 
  1405  0395                     	;# 
  1406  0396                     	;# 
  1407  039A                     	;# 
  1408  039C                     	;# 
  1409  039D                     	;# 
  1410  039E                     	;# 
  1411  039F                     	;# 
  1412  0415                     	;# 
  1413  0416                     	;# 
  1414  0417                     	;# 
  1415  041C                     	;# 
  1416  041D                     	;# 
  1417  041E                     	;# 
  1418  0FE4                     	;# 
  1419  0FE5                     	;# 
  1420  0FE6                     	;# 
  1421  0FE7                     	;# 
  1422  0FE8                     	;# 
  1423  0FE9                     	;# 
  1424  0FEA                     	;# 
  1425  0FEB                     	;# 
  1426  0FED                     	;# 
  1427  0FEE                     	;# 
  1428  0FEF                     	;# 
  1429  0000                     	;# 
  1430  0001                     	;# 
  1431  0002                     	;# 
  1432  0003                     	;# 
  1433  0004                     	;# 
  1434  0005                     	;# 
  1435  0006                     	;# 
  1436  0007                     	;# 
  1437  0008                     	;# 
  1438  0009                     	;# 
  1439  000A                     	;# 
  1440  000B                     	;# 
  1441  000C                     	;# 
  1442  000D                     	;# 
  1443  000E                     	;# 
  1444  0011                     	;# 
  1445  0012                     	;# 
  1446  0013                     	;# 
  1447  0014                     	;# 
  1448  0015                     	;# 
  1449  0016                     	;# 
  1450  0016                     	;# 
  1451  0017                     	;# 
  1452  0018                     	;# 
  1453  0019                     	;# 
  1454  001A                     	;# 
  1455  001B                     	;# 
  1456  001C                     	;# 
  1457  001E                     	;# 
  1458  001F                     	;# 
  1459  008C                     	;# 
  1460  008D                     	;# 
  1461  008E                     	;# 
  1462  0091                     	;# 
  1463  0092                     	;# 
  1464  0093                     	;# 
  1465  0094                     	;# 
  1466  0095                     	;# 
  1467  0096                     	;# 
  1468  0097                     	;# 
  1469  0098                     	;# 
  1470  0099                     	;# 
  1471  009A                     	;# 
  1472  009B                     	;# 
  1473  009B                     	;# 
  1474  009C                     	;# 
  1475  009D                     	;# 
  1476  009E                     	;# 
  1477  010C                     	;# 
  1478  010D                     	;# 
  1479  010E                     	;# 
  1480  0111                     	;# 
  1481  0112                     	;# 
  1482  0113                     	;# 
  1483  0114                     	;# 
  1484  0115                     	;# 
  1485  0116                     	;# 
  1486  0117                     	;# 
  1487  0118                     	;# 
  1488  0119                     	;# 
  1489  011A                     	;# 
  1490  011B                     	;# 
  1491  011D                     	;# 
  1492  011E                     	;# 
  1493  018C                     	;# 
  1494  018D                     	;# 
  1495  018E                     	;# 
  1496  0191                     	;# 
  1497  0191                     	;# 
  1498  0192                     	;# 
  1499  0193                     	;# 
  1500  0193                     	;# 
  1501  0193                     	;# 
  1502  0194                     	;# 
  1503  0195                     	;# 
  1504  0196                     	;# 
  1505  0199                     	;# 
  1506  019A                     	;# 
  1507  019B                     	;# 
  1508  019B                     	;# 
  1509  019C                     	;# 
  1510  019D                     	;# 
  1511  019E                     	;# 
  1512  019F                     	;# 
  1513  020C                     	;# 
  1514  020D                     	;# 
  1515  020E                     	;# 
  1516  0211                     	;# 
  1517  0211                     	;# 
  1518  0212                     	;# 
  1519  0212                     	;# 
  1520  0213                     	;# 
  1521  0213                     	;# 
  1522  0214                     	;# 
  1523  0214                     	;# 
  1524  0215                     	;# 
  1525  0215                     	;# 
  1526  0215                     	;# 
  1527  0216                     	;# 
  1528  0216                     	;# 
  1529  0217                     	;# 
  1530  0217                     	;# 
  1531  0219                     	;# 
  1532  021A                     	;# 
  1533  021B                     	;# 
  1534  021C                     	;# 
  1535  021D                     	;# 
  1536  021E                     	;# 
  1537  021F                     	;# 
  1538  0291                     	;# 
  1539  0291                     	;# 
  1540  0292                     	;# 
  1541  0293                     	;# 
  1542  0294                     	;# 
  1543  0295                     	;# 
  1544  0295                     	;# 
  1545  0296                     	;# 
  1546  0298                     	;# 
  1547  0298                     	;# 
  1548  0299                     	;# 
  1549  029A                     	;# 
  1550  029B                     	;# 
  1551  029C                     	;# 
  1552  029D                     	;# 
  1553  029E                     	;# 
  1554  0311                     	;# 
  1555  0311                     	;# 
  1556  0312                     	;# 
  1557  0313                     	;# 
  1558  0318                     	;# 
  1559  0318                     	;# 
  1560  0319                     	;# 
  1561  031A                     	;# 
  1562  038C                     	;# 
  1563  038D                     	;# 
  1564  038E                     	;# 
  1565  0391                     	;# 
  1566  0392                     	;# 
  1567  0393                     	;# 
  1568  0394                     	;# 
  1569  0395                     	;# 
  1570  0396                     	;# 
  1571  039A                     	;# 
  1572  039C                     	;# 
  1573  039D                     	;# 
  1574  039E                     	;# 
  1575  039F                     	;# 
  1576  0415                     	;# 
  1577  0416                     	;# 
  1578  0417                     	;# 
  1579  041C                     	;# 
  1580  041D                     	;# 
  1581  041E                     	;# 
  1582  0FE4                     	;# 
  1583  0FE5                     	;# 
  1584  0FE6                     	;# 
  1585  0FE7                     	;# 
  1586  0FE8                     	;# 
  1587  0FE9                     	;# 
  1588  0FEA                     	;# 
  1589  0FEB                     	;# 
  1590  0FED                     	;# 
  1591  0FEE                     	;# 
  1592  0FEF                     	;# 
  1593  0000                     	;# 
  1594  0001                     	;# 
  1595  0002                     	;# 
  1596  0003                     	;# 
  1597  0004                     	;# 
  1598  0005                     	;# 
  1599  0006                     	;# 
  1600  0007                     	;# 
  1601  0008                     	;# 
  1602  0009                     	;# 
  1603  000A                     	;# 
  1604  000B                     	;# 
  1605  000C                     	;# 
  1606  000D                     	;# 
  1607  000E                     	;# 
  1608  0011                     	;# 
  1609  0012                     	;# 
  1610  0013                     	;# 
  1611  0014                     	;# 
  1612  0015                     	;# 
  1613  0016                     	;# 
  1614  0016                     	;# 
  1615  0017                     	;# 
  1616  0018                     	;# 
  1617  0019                     	;# 
  1618  001A                     	;# 
  1619  001B                     	;# 
  1620  001C                     	;# 
  1621  001E                     	;# 
  1622  001F                     	;# 
  1623  008C                     	;# 
  1624  008D                     	;# 
  1625  008E                     	;# 
  1626  0091                     	;# 
  1627  0092                     	;# 
  1628  0093                     	;# 
  1629  0094                     	;# 
  1630  0095                     	;# 
  1631  0096                     	;# 
  1632  0097                     	;# 
  1633  0098                     	;# 
  1634  0099                     	;# 
  1635  009A                     	;# 
  1636  009B                     	;# 
  1637  009B                     	;# 
  1638  009C                     	;# 
  1639  009D                     	;# 
  1640  009E                     	;# 
  1641  010C                     	;# 
  1642  010D                     	;# 
  1643  010E                     	;# 
  1644  0111                     	;# 
  1645  0112                     	;# 
  1646  0113                     	;# 
  1647  0114                     	;# 
  1648  0115                     	;# 
  1649  0116                     	;# 
  1650  0117                     	;# 
  1651  0118                     	;# 
  1652  0119                     	;# 
  1653  011A                     	;# 
  1654  011B                     	;# 
  1655  011D                     	;# 
  1656  011E                     	;# 
  1657  018C                     	;# 
  1658  018D                     	;# 
  1659  018E                     	;# 
  1660  0191                     	;# 
  1661  0191                     	;# 
  1662  0192                     	;# 
  1663  0193                     	;# 
  1664  0193                     	;# 
  1665  0193                     	;# 
  1666  0194                     	;# 
  1667  0195                     	;# 
  1668  0196                     	;# 
  1669  0199                     	;# 
  1670  019A                     	;# 
  1671  019B                     	;# 
  1672  019B                     	;# 
  1673  019C                     	;# 
  1674  019D                     	;# 
  1675  019E                     	;# 
  1676  019F                     	;# 
  1677  020C                     	;# 
  1678  020D                     	;# 
  1679  020E                     	;# 
  1680  0211                     	;# 
  1681  0211                     	;# 
  1682  0212                     	;# 
  1683  0212                     	;# 
  1684  0213                     	;# 
  1685  0213                     	;# 
  1686  0214                     	;# 
  1687  0214                     	;# 
  1688  0215                     	;# 
  1689  0215                     	;# 
  1690  0215                     	;# 
  1691  0216                     	;# 
  1692  0216                     	;# 
  1693  0217                     	;# 
  1694  0217                     	;# 
  1695  0219                     	;# 
  1696  021A                     	;# 
  1697  021B                     	;# 
  1698  021C                     	;# 
  1699  021D                     	;# 
  1700  021E                     	;# 
  1701  021F                     	;# 
  1702  0291                     	;# 
  1703  0291                     	;# 
  1704  0292                     	;# 
  1705  0293                     	;# 
  1706  0294                     	;# 
  1707  0295                     	;# 
  1708  0295                     	;# 
  1709  0296                     	;# 
  1710  0298                     	;# 
  1711  0298                     	;# 
  1712  0299                     	;# 
  1713  029A                     	;# 
  1714  029B                     	;# 
  1715  029C                     	;# 
  1716  029D                     	;# 
  1717  029E                     	;# 
  1718  0311                     	;# 
  1719  0311                     	;# 
  1720  0312                     	;# 
  1721  0313                     	;# 
  1722  0318                     	;# 
  1723  0318                     	;# 
  1724  0319                     	;# 
  1725  031A                     	;# 
  1726  038C                     	;# 
  1727  038D                     	;# 
  1728  038E                     	;# 
  1729  0391                     	;# 
  1730  0392                     	;# 
  1731  0393                     	;# 
  1732  0394                     	;# 
  1733  0395                     	;# 
  1734  0396                     	;# 
  1735  039A                     	;# 
  1736  039C                     	;# 
  1737  039D                     	;# 
  1738  039E                     	;# 
  1739  039F                     	;# 
  1740  0415                     	;# 
  1741  0416                     	;# 
  1742  0417                     	;# 
  1743  041C                     	;# 
  1744  041D                     	;# 
  1745  041E                     	;# 
  1746  0FE4                     	;# 
  1747  0FE5                     	;# 
  1748  0FE6                     	;# 
  1749  0FE7                     	;# 
  1750  0FE8                     	;# 
  1751  0FE9                     	;# 
  1752  0FEA                     	;# 
  1753  0FEB                     	;# 
  1754  0FED                     	;# 
  1755  0FEE                     	;# 
  1756  0FEF                     	;# 
  1757                           
  1758                           	psect	idataCOMMON
  1759  0003                     __pidataCOMMON:	
  1760                           
  1761                           ;initializer for _I2C_slaveWriteData
  1762  0003  3455               	retlw	85
  1763                           
  1764                           	psect	idataBANK0
  1765  0CF0                     __pidataBANK0:	
  1766                           
  1767                           ;initializer for _tmr_scaler
  1768  0CF0  3401               	retlw	1
  1769                           
  1770                           ;initializer for _continuity
  1771  0CF1  34FA               	retlw	250
  1772                           
  1773                           ;initializer for _threshold
  1774  0CF2  3432               	retlw	50
  1775                           
  1776                           ;initializer for _BACKPLANE_SLAVE_ADDRESS
  1777  0CF3  3401               	retlw	1
  1778                           
  1779                           ;initializer for _type_no_data
  1780  0CF4  3406               	retlw	6
  1781                           
  1782                           	psect	stringtext
  1783  03CE                     __pstringtext:	
  1784  03CE                     _dpowers:	
  1785  03CE  3401               	retlw	1
  1786  03CF  3400               	retlw	0
  1787  03D0  340A               	retlw	10
  1788  03D1  3400               	retlw	0
  1789  03D2  3464               	retlw	100
  1790  03D3  3400               	retlw	0
  1791  03D4  34E8               	retlw	232
  1792  03D5  3403               	retlw	3
  1793  03D6  3410               	retlw	16
  1794  03D7  3427               	retlw	39
  1795  03D8                     __end_of_dpowers:	
  1796  03D8                     _ANALOG_IN:	
  1797  03D8  3404               	retlw	4
  1798  03D9  3405               	retlw	5
  1799  03DA  3406               	retlw	6
  1800  03DB  3407               	retlw	7
  1801  03DC  3408               	retlw	8
  1802  03DD  340B               	retlw	11
  1803  03DE                     __end_of_ANALOG_IN:	
  1804  0015                     _TMR0	set	21
  1805  000B                     _INTCONbits	set	11
  1806  0011                     _PIR1bits	set	17
  1807  005A                     _TMR0IF	set	90
  1808  0095                     _OPTION_REG	set	149
  1809  009D                     _ADCON0bits	set	157
  1810  009C                     _ADRESH	set	156
  1811  009B                     _ADRESL	set	155
  1812  009E                     _ADCON1	set	158
  1813  009D                     _ADCON0	set	157
  1814  0095                     _OPTION_REGbits	set	149
  1815  008E                     _TRISC	set	142
  1816  008D                     _TRISB	set	141
  1817  008C                     _TRISA	set	140
  1818  0097                     _WDTCON	set	151
  1819  0098                     _OSCTUNE	set	152
  1820  0099                     _OSCCON	set	153
  1821  0091                     _PIE1bits	set	145
  1822  010E                     _LATCbits	set	270
  1823  011D                     _APFCON0	set	285
  1824  011E                     _APFCON1	set	286
  1825  010E                     _LATC	set	270
  1826  010D                     _LATB	set	269
  1827  010C                     _LATA	set	268
  1828  0196                     _EECON2	set	406
  1829  0193                     _EEDATL	set	403
  1830  0194                     _EEDATH	set	404
  1831  0195                     _EECON1bits	set	405
  1832  0192                     _EEADRH	set	402
  1833  0191                     _EEADRL	set	401
  1834  018C                     _ANSELA	set	396
  1835  018D                     _ANSELB	set	397
  1836  018E                     _ANSELC	set	398
  1837  0199                     _RCREG	set	409
  1838  019D                     _RCSTAbits	set	413
  1839  019A                     _TXREG	set	410
  1840  019C                     _SPBRGH	set	412
  1841  019B                     _SPBRGL	set	411
  1842  019E                     _TXSTA	set	414
  1843  019D                     _RCSTA	set	413
  1844  019F                     _BAUDCON	set	415
  1845  020E                     _WPUC	set	526
  1846  020C                     _WPUA	set	524
  1847  020D                     _WPUB	set	525
  1848  0215                     _SSP1CON1bits	set	533
  1849  0216                     _SSP1CON2bits	set	534
  1850  0214                     _SSP1STATbits	set	532
  1851  0211                     _SSP1BUF	set	529
  1852  0212                     _SSP1ADD	set	530
  1853  0213                     _SSP1MSK	set	531
  1854  0217                     _SSP1CON3	set	535
  1855  0216                     _SSP1CON2	set	534
  1856  0215                     _SSP1CON1	set	533
  1857  0214                     _SSP1STAT	set	532
  1858  03DE                     STR_1:	
  1859  03DE  344D               	retlw	77	;'M'
  1860  03DF  3455               	retlw	85	;'U'
  1861  03E0  344C               	retlw	76	;'L'
  1862  03E1  3454               	retlw	84	;'T'
  1863  03E2  3449               	retlw	73	;'I'
  1864  03E3  345F               	retlw	95	;'_'
  1865  03E4  3441               	retlw	65	;'A'
  1866  03E5  3431               	retlw	49	;'1'
  1867  03E6  3433               	retlw	51	;'3'
  1868  03E7  3432               	retlw	50	;'2'
  1869  03E8  3434               	retlw	52	;'4'
  1870  03E9  344C               	retlw	76	;'L'
  1871  03EA  3455               	retlw	85	;'U'
  1872  03EB  3441               	retlw	65	;'A'
  1873  03EC  345F               	retlw	95	;'_'
  1874  03ED  3454               	retlw	84	;'T'
  1875  03EE  3400               	retlw	0
  1876  03EF                     STR_36:	
  1877  03EF  3449               	retlw	73	;'I'
  1878  03F0  344C               	retlw	76	;'L'
  1879  03F1  344C               	retlw	76	;'L'
  1880  03F2  3445               	retlw	69	;'E'
  1881  03F3  3447               	retlw	71	;'G'
  1882  03F4  3441               	retlw	65	;'A'
  1883  03F5  344C               	retlw	76	;'L'
  1884  03F6  345F               	retlw	95	;'_'
  1885  03F7  3454               	retlw	84	;'T'
  1886  03F8  3459               	retlw	89	;'Y'
  1887  03F9  3450               	retlw	80	;'P'
  1888  03FA  3445               	retlw	69	;'E'
  1889  03FB  340A               	retlw	10
  1890  03FC  3400               	retlw	0
  1891  03FD                     STR_16:	
  1892  03FD  3424               	retlw	36	;'$'
  1893  03FE  343A               	retlw	58	;':'
  1894  03FF  3452               	retlw	82	;'R'
  1895  0400  3444               	retlw	68	;'D'
  1896  0401  3441               	retlw	65	;'A'
  1897  0402  343A               	retlw	58	;':'
  1898  0403  3425               	retlw	37	;'%'
  1899  0404  3464               	retlw	100	;'d'
  1900  0405  340A               	retlw	10
  1901  0406  3400               	retlw	0
  1902  0407                     STR_13:	
  1903  0407  3424               	retlw	36	;'$'
  1904  0408  343A               	retlw	58	;':'
  1905  0409  3447               	retlw	71	;'G'
  1906  040A  3445               	retlw	69	;'E'
  1907  040B  3454               	retlw	84	;'T'
  1908  040C  343A               	retlw	58	;':'
  1909  040D  3425               	retlw	37	;'%'
  1910  040E  3464               	retlw	100	;'d'
  1911  040F  340A               	retlw	10
  1912  0410  3400               	retlw	0
  1913  0411                     STR_34:	
  1914  0411  342D               	retlw	45	;'-'
  1915  0412  3425               	retlw	37	;'%'
  1916  0413  3464               	retlw	100	;'d'
  1917  0414  342E               	retlw	46	;'.'
  1918  0415  3425               	retlw	37	;'%'
  1919  0416  3430               	retlw	48	;'0'
  1920  0417  3432               	retlw	50	;'2'
  1921  0418  3464               	retlw	100	;'d'
  1922  0419  340A               	retlw	10
  1923  041A  3400               	retlw	0
  1924  041B                     STR_5:	
  1925  041B  3424               	retlw	36	;'$'
  1926  041C  343A               	retlw	58	;':'
  1927  041D  3457               	retlw	87	;'W'
  1928  041E  3448               	retlw	72	;'H'
  1929  041F  344F               	retlw	79	;'O'
  1930  0420  343A               	retlw	58	;':'
  1931  0421  3425               	retlw	37	;'%'
  1932  0422  3473               	retlw	115	;'s'
  1933  0423  340A               	retlw	10
  1934  0424  3400               	retlw	0
  1935  0425                     STR_9:	
  1936  0425  342A               	retlw	42	;'*'
  1937  0426  343A               	retlw	58	;':'
  1938  0427  3453               	retlw	83	;'S'
  1939  0428  3454               	retlw	84	;'T'
  1940  0429  3450               	retlw	80	;'P'
  1941  042A  343A               	retlw	58	;':'
  1942  042B  3425               	retlw	37	;'%'
  1943  042C  3473               	retlw	115	;'s'
  1944  042D  340A               	retlw	10
  1945  042E  3400               	retlw	0
  1946  042F                     STR_32:	
  1947  042F  342D               	retlw	45	;'-'
  1948  0430  3425               	retlw	37	;'%'
  1949  0431  3464               	retlw	100	;'d'
  1950  0432  342E               	retlw	46	;'.'
  1951  0433  3425               	retlw	37	;'%'
  1952  0434  3430               	retlw	48	;'0'
  1953  0435  3432               	retlw	50	;'2'
  1954  0436  3464               	retlw	100	;'d'
  1955  0437  342C               	retlw	44	;','
  1956  0438  3400               	retlw	0
  1957  0439                     STR_24:	
  1958  0439  3455               	retlw	85	;'U'
  1959  043A  3449               	retlw	73	;'I'
  1960  043B  344E               	retlw	78	;'N'
  1961  043C  3454               	retlw	84	;'T'
  1962  043D  3431               	retlw	49	;'1'
  1963  043E  3436               	retlw	54	;'6'
  1964  043F  345F               	retlw	95	;'_'
  1965  0440  3454               	retlw	84	;'T'
  1966  0441  343A               	retlw	58	;':'
  1967  0442  3400               	retlw	0
  1968  0443                     STR_35:	
  1969  0443  344E               	retlw	78	;'N'
  1970  0444  344F               	retlw	79	;'O'
  1971  0445  345F               	retlw	95	;'_'
  1972  0446  3444               	retlw	68	;'D'
  1973  0447  3441               	retlw	65	;'A'
  1974  0448  3454               	retlw	84	;'T'
  1975  0449  3441               	retlw	65	;'A'
  1976  044A  340A               	retlw	10
  1977  044B  3400               	retlw	0
  1978  044C                     STR_18:	
  1979  044C  3455               	retlw	85	;'U'
  1980  044D  3449               	retlw	73	;'I'
  1981  044E  344E               	retlw	78	;'N'
  1982  044F  3454               	retlw	84	;'T'
  1983  0450  3438               	retlw	56	;'8'
  1984  0451  345F               	retlw	95	;'_'
  1985  0452  3454               	retlw	84	;'T'
  1986  0453  343A               	retlw	58	;':'
  1987  0454  3400               	retlw	0
  1988  0455                     STR_30:	
  1989  0455  3446               	retlw	70	;'F'
  1990  0456  344C               	retlw	76	;'L'
  1991  0457  344F               	retlw	79	;'O'
  1992  0458  3441               	retlw	65	;'A'
  1993  0459  3454               	retlw	84	;'T'
  1994  045A  343A               	retlw	58	;':'
  1995  045B  3400               	retlw	0
  1996  045C                     STR_2:	
  1997  045C  3428               	retlw	40	;'('
  1998  045D  346E               	retlw	110	;'n'
  1999  045E  3475               	retlw	117	;'u'
  2000  045F  346C               	retlw	108	;'l'
  2001  0460  346C               	retlw	108	;'l'
  2002  0461  3429               	retlw	41	;')'
  2003  0462  3400               	retlw	0
  2004  0463                     STR_17:	
  2005  0463  3425               	retlw	37	;'%'
  2006  0464  3425               	retlw	37	;'%'
  2007  0465  3425               	retlw	37	;'%'
  2008  0466  3464               	retlw	100	;'d'
  2009  0467  343A               	retlw	58	;':'
  2010  0468  3400               	retlw	0
  2011  0469                     STR_3:	
  2012  0469  3423               	retlw	35	;'#'
  2013  046A  3425               	retlw	37	;'%'
  2014  046B  3473               	retlw	115	;'s'
  2015  046C  340A               	retlw	10
  2016  046D  3400               	retlw	0
  2017  046E                     STR_20:	
  2018  046E  3425               	retlw	37	;'%'
  2019  046F  3475               	retlw	117	;'u'
  2020  0470  340A               	retlw	10
  2021  0471  3400               	retlw	0
  2022  0472                     STR_22:	
  2023  0472  3425               	retlw	37	;'%'
  2024  0473  3464               	retlw	100	;'d'
  2025  0474  342C               	retlw	44	;','
  2026  0475  3400               	retlw	0
  2027  0476                     STR_19:	
  2028  0476  3425               	retlw	37	;'%'
  2029  0477  3475               	retlw	117	;'u'
  2030  0478  342C               	retlw	44	;','
  2031  0479  3400               	retlw	0
  2032  047A                     STR_15:	
  2033  047A  3452               	retlw	82	;'R'
  2034  047B  3444               	retlw	68	;'D'
  2035  047C  3441               	retlw	65	;'A'
  2036  047D  3400               	retlw	0
  2037  047E                     STR_14:	
  2038  047E  3457               	retlw	87	;'W'
  2039  047F  3444               	retlw	68	;'D'
  2040  0480  3441               	retlw	65	;'A'
  2041  0481  3400               	retlw	0
  2042  0482                     STR_7:	
  2043  0482  3453               	retlw	83	;'S'
  2044  0483  3454               	retlw	84	;'T'
  2045  0484  3441               	retlw	65	;'A'
  2046  0485  3400               	retlw	0
  2047  0486                     STR_10:	
  2048  0486  3441               	retlw	65	;'A'
  2049  0487  3443               	retlw	67	;'C'
  2050  0488  344B               	retlw	75	;'K'
  2051  0489  3400               	retlw	0
  2052  048A                     STR_4:	
  2053  048A  3457               	retlw	87	;'W'
  2054  048B  3448               	retlw	72	;'H'
  2055  048C  344F               	retlw	79	;'O'
  2056  048D  3400               	retlw	0
  2057  048E                     STR_8:	
  2058  048E  3453               	retlw	83	;'S'
  2059  048F  3454               	retlw	84	;'T'
  2060  0490  3450               	retlw	80	;'P'
  2061  0491  3400               	retlw	0
  2062  0492                     STR_12:	
  2063  0492  3447               	retlw	71	;'G'
  2064  0493  3445               	retlw	69	;'E'
  2065  0494  3454               	retlw	84	;'T'
  2066  0495  3400               	retlw	0
  2067  0496                     STR_11:	
  2068  0496  3453               	retlw	83	;'S'
  2069  0497  3445               	retlw	69	;'E'
  2070  0498  3454               	retlw	84	;'T'
  2071  0499  3400               	retlw	0
  2072  049A                     STR_6:	
  2073  049A  3453               	retlw	83	;'S'
  2074  049B  3441               	retlw	65	;'A'
  2075  049C  3456               	retlw	86	;'V'
  2076  049D  3400               	retlw	0
  2077  0403                     
  2078                           ; #config settings
  2079  0000                     
  2080                           	psect	cinit
  2081  0032                     start_initialization:	
  2082  0032                     __initialization:	
  2083                           
  2084                           ; Initialize objects allocated to COMMON
  2085  0032  3180  2003  3180   	fcall	__pidataCOMMON	;fetch initializer
  2086  0035  00FD               	movwf	__pdataCOMMON& (0+127)
  2087                           
  2088                           ; Initialize objects allocated to BANK0
  2089  0036  30F0               	movlw	low __pidataBANK0
  2090  0037  0084               	movwf	4
  2091  0038  308C               	movlw	(high __pidataBANK0)| (0+128)
  2092  0039  0085               	movwf	5
  2093  003A  0012               	moviw fsr0++
  2094  003B  00EA               	movwf	__pdataBANK0& (0+127)
  2095  003C  0012               	moviw fsr0++
  2096  003D  00EB               	movwf	(__pdataBANK0+1)& (0+127)
  2097  003E  0012               	moviw fsr0++
  2098  003F  00EC               	movwf	(__pdataBANK0+2)& (0+127)
  2099  0040  0012               	moviw fsr0++
  2100  0041  00ED               	movwf	(__pdataBANK0+3)& (0+127)
  2101  0042  0012               	moviw fsr0++
  2102  0043  00EE               	movwf	(__pdataBANK0+4)& (0+127)
  2103                           
  2104                           ; Clear objects allocated to COMMON
  2105  0044  01FC               	clrf	__pbssCOMMON& (0+127)
  2106                           
  2107                           ; Clear objects allocated to BANK0
  2108  0045  3051               	movlw	low __pbssBANK0
  2109  0046  0084               	movwf	4
  2110  0047  3000               	movlw	high __pbssBANK0
  2111  0048  0085               	movwf	5
  2112  0049  3019               	movlw	25
  2113  004A  318C  24FB  3180   	fcall	clear_ram0
  2114                           
  2115                           ; Clear objects allocated to BANK1
  2116  004D  30A0               	movlw	low __pbssBANK1
  2117  004E  0084               	movwf	4
  2118  004F  3000               	movlw	high __pbssBANK1
  2119  0050  0085               	movwf	5
  2120  0051  3042               	movlw	66
  2121  0052  318C  24FB  3180   	fcall	clear_ram0
  2122                           
  2123                           ; Clear objects allocated to BANK2
  2124  0055  3020               	movlw	low __pbssBANK2
  2125  0056  0084               	movwf	4
  2126  0057  3001               	movlw	high __pbssBANK2
  2127  0058  0085               	movwf	5
  2128  0059  3040               	movlw	64
  2129  005A  318C  24FB  3180   	fcall	clear_ram0
  2130                           
  2131                           ; Clear objects allocated to BANK3
  2132  005D  30A0               	movlw	low __pbssBANK3
  2133  005E  0084               	movwf	4
  2134  005F  3001               	movlw	high __pbssBANK3
  2135  0060  0085               	movwf	5
  2136  0061  3030               	movlw	48
  2137  0062  318C  24FB         	fcall	clear_ram0
  2138  0064                     end_of_initialization:	
  2139                           ;End of C runtime variable initialization code
  2140                           
  2141  0064                     __end_of__initialization:	
  2142  0064  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2143  0065  0020               	movlb	0
  2144  0066  3187  2FA6         	ljmp	_main	;jump to C main() function
  2145                           
  2146                           	psect	bssCOMMON
  2147  007C                     __pbssCOMMON:	
  2148  007C                     _eusartTxHead:	
  2149  007C                     	ds	1
  2150                           
  2151                           	psect	dataCOMMON
  2152  007D                     __pdataCOMMON:	
  2153  007D                     _I2C_slaveWriteData:	
  2154  007D                     	ds	1
  2155                           
  2156                           	psect	bssBANK0
  2157  0051                     __pbssBANK0:	
  2158  0051                     _PROTOCOL_Set_Handler:	
  2159  0051                     	ds	2
  2160  0053                     _PROTOCOL_Stop_Handler:	
  2161  0053                     	ds	2
  2162  0055                     _i:	
  2163  0055                     	ds	1
  2164  0056                     _backplane_slave_enabled:	
  2165  0056                     	ds	1
  2166  0057                     _tmr_overflow:	
  2167  0057                     	ds	1
  2168  0058                     _tmr_cnt:	
  2169  0058                     	ds	1
  2170  0059                     _sec_cnt:	
  2171  0059                     	ds	1
  2172  005A                     _invoked:	
  2173  005A                     	ds	1
  2174  005B                     _running:	
  2175  005B                     	ds	1
  2176  005C                     _locked:	
  2177  005C                     	ds	1
  2178  005D                     _value:	
  2179  005D                     	ds	1
  2180  005E                     _cnt:	
  2181  005E                     	ds	1
  2182  005F                     _slave_address:	
  2183  005F                     	ds	1
  2184  0060                     _timer0ReloadVal:	
  2185  0060                     	ds	1
  2186  0061                     _eusartRxCount:	
  2187  0061                     	ds	1
  2188  0062                     _eusartRxTail:	
  2189  0062                     	ds	1
  2190  0063                     _eusartRxHead:	
  2191  0063                     	ds	1
  2192  0064                     _eusartTxBufferRemaining:	
  2193  0064                     	ds	1
  2194  0065                     _eusartTxTail:	
  2195  0065                     	ds	1
  2196  0066                     I2C1_StatusCallback@ext_cnt:	
  2197  0066                     	ds	1
  2198  0067                     I2C1_StatusCallback@ext_len:	
  2199  0067                     	ds	1
  2200  0068                     I2C1_StatusCallback@next:	
  2201  0068                     	ds	1
  2202  0069                     I2C1_StatusCallback@slaveWriteType:	
  2203  0069                     	ds	1
  2204                           
  2205                           	psect	dataBANK0
  2206  006A                     __pdataBANK0:	
  2207  006A                     _tmr_scaler:	
  2208  006A                     	ds	1
  2209  006B                     _continuity:	
  2210  006B                     	ds	1
  2211  006C                     _threshold:	
  2212  006C                     	ds	1
  2213  006D                     _BACKPLANE_SLAVE_ADDRESS:	
  2214  006D                     	ds	1
  2215  006E                     _type_no_data:	
  2216  006E                     	ds	1
  2217                           
  2218                           	psect	bssBANK1
  2219  00A0                     __pbssBANK1:	
  2220  00A0                     _eusartRxBuffer:	
  2221  00A0                     	ds	8
  2222  00A8                     _eusartTxBuffer:	
  2223  00A8                     	ds	8
  2224  00B0                     _count:	
  2225  00B0                     	ds	6
  2226  00B6                     _analog_in:	
  2227  00B6                     	ds	6
  2228  00BC                     _float100:	
  2229  00BC                     	ds	2
  2230  00BE                     _device_id_:	
  2231  00BE                     	ds	2
  2232  00C0                     _PROTOCOL_Tick_Handler:	
  2233  00C0                     	ds	2
  2234  00C2                     _PROTOCOL_Inv_Handler:	
  2235  00C2                     	ds	2
  2236  00C4                     _PROTOCOL_Extension_Handler:	
  2237  00C4                     	ds	2
  2238  00C6                     _PROTOCOL_Loop_Func:	
  2239  00C6                     	ds	2
  2240  00C8                     _PROTOCOL_Start_Handler:	
  2241  00C8                     	ds	2
  2242  00CA                     _data:	
  2243  00CA                     	ds	1
  2244  00CB                     _j:	
  2245  00CB                     	ds	1
  2246  00CC                     _readbuf_status:	
  2247  00CC                     	ds	1
  2248  00CD                     _readbuf:	
  2249  00CD                     	ds	6
  2250  00D3                     _position:	
  2251  00D3                     	ds	6
  2252  00D9                     PROTOCOL_Send_float@pbuf:	
  2253  00D9                     	ds	3
  2254  00DC                     PROTOCOL_Send_int16_t@pbuf:	
  2255  00DC                     	ds	2
  2256  00DE                     PROTOCOL_Send_uint16_t@pbuf:	
  2257  00DE                     	ds	2
  2258  00E0                     PROTOCOL_Send_int8_t@pbuf:	
  2259  00E0                     	ds	1
  2260  00E1                     PROTOCOL_Send_uint8_t@pbuf:	
  2261  00E1                     	ds	1
  2262                           
  2263                           	psect	bssBANK2
  2264  0120                     __pbssBANK2:	
  2265  0120                     _buf:	
  2266  0120                     	ds	48
  2267  0150                     _sendbuf:	
  2268  0150                     	ds	16
  2269                           
  2270                           	psect	bssBANK3
  2271  01A0                     __pbssBANK3:	
  2272  01A0                     I2C1_StatusCallback@ext_buf:	
  2273  01A0                     	ds	48
  2274                           
  2275                           	psect	clrtext
  2276  0CFB                     clear_ram0:	
  2277                           ;	Called with FSR0 containing the base address, and
  2278                           ;	WREG with the size to clear
  2279                           
  2280  0CFB  0064               	clrwdt	;clear the watchdog before getting into this loop
  2281  0CFC                     clrloop0:	
  2282  0CFC  0180               	clrf	0	;clear RAM location pointed to by FSR
  2283  0CFD  3101               	addfsr 0,1
  2284  0CFE  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2285  0CFF  2CFC               	goto	clrloop0	;have we reached the end yet?
  2286  0D00  3400               	retlw	0	;all done for this memory range, return
  2287                           
  2288                           	psect	cstackBANK1
  2289  00E2                     __pcstackBANK1:	
  2290  00E2                     PROTOCOL_Loop@c:	
  2291                           
  2292                           ; 1 bytes @ 0x0
  2293  00E2                     	ds	1
  2294  00E3                     PROTOCOL_Loop@device_address:	
  2295                           
  2296                           ; 1 bytes @ 0x1
  2297  00E3                     	ds	1
  2298                           
  2299                           	psect	cstackCOMMON
  2300  0070                     __pcstackCOMMON:	
  2301  0070                     ?_isdigit:	
  2302  0070                     ?_PROTOCOL_Read_Device_Address:	
  2303                           ; 1 bit 
  2304                           
  2305  0070                     ?_I2C1_StatusCallback:	
  2306                           ; 1 bytes @ 0x0
  2307                           
  2308  0070                     ?_PROTOCOL_SET:	
  2309                           ; 1 bytes @ 0x0
  2310                           
  2311  0070                     ?_PROTOCOL_STA:	
  2312                           ; 1 bytes @ 0x0
  2313                           
  2314  0070                     ?_PROTOCOL_STP:	
  2315                           ; 1 bytes @ 0x0
  2316                           
  2317  0070                     ?_PROTOCOL_SAV:	
  2318                           ; 1 bytes @ 0x0
  2319                           
  2320  0070                     ?_PROTOCOL_INV:	
  2321                           ; 1 bytes @ 0x0
  2322                           
  2323  0070                     ??_PROTOCOL_INV:	
  2324                           ; 1 bytes @ 0x0
  2325                           
  2326  0070                     ?_PROTOCOL_RST:	
  2327                           ; 1 bytes @ 0x0
  2328                           
  2329  0070                     ??_PROTOCOL_RST:	
  2330                           ; 1 bytes @ 0x0
  2331                           
  2332  0070                     ?_PROTOCOL_Backplane_Slave_Enabled:	
  2333                           ; 1 bytes @ 0x0
  2334                           
  2335  0070                     ??_PROTOCOL_Backplane_Slave_Enabled:	
  2336                           ; 1 bytes @ 0x0
  2337                           
  2338  0070                     ?_PROTOCOL_Read_Lock:	
  2339                           ; 1 bytes @ 0x0
  2340                           
  2341  0070                     ??_PROTOCOL_Read_Lock:	
  2342                           ; 1 bytes @ 0x0
  2343                           
  2344  0070                     ?_PROTOCOL_EXT:	
  2345                           ; 1 bytes @ 0x0
  2346                           
  2347  0070                     ?_PROTOCOL_I2C_WHO:	
  2348                           ; 1 bytes @ 0x0
  2349                           
  2350  0070                     ??_PROTOCOL_I2C_WHO:	
  2351                           ; 1 bytes @ 0x0
  2352                           
  2353  0070                     ??_PROTOCOL_I2C_SEN:	
  2354                           ; 1 bytes @ 0x0
  2355                           
  2356  0070                     ?_PROTOCOL_I2C_GET:	
  2357                           ; 1 bytes @ 0x0
  2358                           
  2359  0070                     ??_PROTOCOL_I2C_GET:	
  2360                           ; 1 bytes @ 0x0
  2361                           
  2362  0070                     ?_PIN_MANAGER_Initialize:	
  2363                           ; 1 bytes @ 0x0
  2364                           
  2365  0070                     ?_OSCILLATOR_Initialize:	
  2366                           ; 1 bytes @ 0x0
  2367                           
  2368  0070                     ?_WDT_Initialize:	
  2369                           ; 1 bytes @ 0x0
  2370                           
  2371  0070                     ?_ADC_Initialize:	
  2372                           ; 1 bytes @ 0x0
  2373                           
  2374  0070                     ?_TMR0_Initialize:	
  2375                           ; 1 bytes @ 0x0
  2376                           
  2377  0070                     ?_EUSART_Initialize:	
  2378                           ; 1 bytes @ 0x0
  2379                           
  2380  0070                     ?_EUSART_Transmit_ISR:	
  2381                           ; 1 bytes @ 0x0
  2382                           
  2383  0070                     ??_EUSART_Transmit_ISR:	
  2384                           ; 1 bytes @ 0x0
  2385                           
  2386  0070                     ?_EUSART_Receive_ISR:	
  2387                           ; 1 bytes @ 0x0
  2388                           
  2389  0070                     ??_EUSART_Receive_ISR:	
  2390                           ; 1 bytes @ 0x0
  2391                           
  2392  0070                     ?_PROTOCOL_Loop:	
  2393                           ; 1 bytes @ 0x0
  2394                           
  2395  0070                     ?_I2C1_Initialize:	
  2396                           ; 1 bytes @ 0x0
  2397                           
  2398  0070                     ?_I2C1_ISR:	
  2399                           ; 1 bytes @ 0x0
  2400                           
  2401  0070                     ?_INTERRUPT_InterruptManager:	
  2402                           ; 1 bytes @ 0x0
  2403                           
  2404  0070                     ?_EUSART_Read:	
  2405                           ; 1 bytes @ 0x0
  2406                           
  2407  0070                     ?_EUSART_Write:	
  2408                           ; 1 bytes @ 0x0
  2409                           
  2410  0070                     ?_putch:	
  2411                           ; 1 bytes @ 0x0
  2412                           
  2413  0070                     ?_DATAEE_ReadByte:	
  2414                           ; 1 bytes @ 0x0
  2415                           
  2416  0070                     ?_ADC_SelectChannel:	
  2417                           ; 1 bytes @ 0x0
  2418                           
  2419  0070                     ?_ADC_StartConversion:	
  2420                           ; 1 bytes @ 0x0
  2421                           
  2422  0070                     ?_ADC_IsConversionDone:	
  2423                           ; 1 bytes @ 0x0
  2424                           
  2425  0070                     ?_TMR0_HasOverflowOccured:	
  2426                           ; 1 bytes @ 0x0
  2427                           
  2428  0070                     ?_led_blink:	
  2429                           ; 1 bytes @ 0x0
  2430                           
  2431  0070                     ?_init:	
  2432                           ; 1 bytes @ 0x0
  2433                           
  2434  0070                     ?_loop_func:	
  2435                           ; 1 bytes @ 0x0
  2436                           
  2437  0070                     ?_main:	
  2438                           ; 1 bytes @ 0x0
  2439                           
  2440  0070                     ?_PROTOCOL_Write_Device_Address:	
  2441                           ; 1 bytes @ 0x0
  2442                           
  2443  0070                     ?i1_DATAEE_WriteByte:	
  2444                           ; 1 bytes @ 0x0
  2445                           
  2446  0070                     ?i1_set_handler:	
  2447                           ; 1 bytes @ 0x0
  2448                           
  2449  0070                     ?i1_PROTOCOL_STA:	
  2450                           ; 1 bytes @ 0x0
  2451                           
  2452  0070                     ??i1_PROTOCOL_STA:	
  2453                           ; 1 bytes @ 0x0
  2454                           
  2455  0070                     ?i1_PROTOCOL_STP:	
  2456                           ; 1 bytes @ 0x0
  2457                           
  2458  0070                     ??i1_PROTOCOL_STP:	
  2459                           ; 1 bytes @ 0x0
  2460                           
  2461  0070                     ?i1_PROTOCOL_SAV:	
  2462                           ; 1 bytes @ 0x0
  2463                           
  2464  0070                     ?i1_PROTOCOL_SET:	
  2465                           ; 1 bytes @ 0x0
  2466                           
  2467  0070                     ?i1_PROTOCOL_EXT:	
  2468                           ; 1 bytes @ 0x0
  2469                           
  2470  0070                     ??i1_PROTOCOL_EXT:	
  2471                           ; 1 bytes @ 0x0
  2472                           
  2473  0070                     ?_PROTOCOL_I2C_SEN:	
  2474                           ; 1 bytes @ 0x0
  2475                           
  2476  0070                     i1DATAEE_WriteByte@bData:	
  2477                           ; 2 bytes @ 0x0
  2478                           
  2479  0070                     i1set_handler@value:	
  2480                           ; 1 bytes @ 0x0
  2481                           
  2482                           
  2483                           ; 1 bytes @ 0x0
  2484  0070                     	ds	1
  2485  0071                     ??i1_DATAEE_WriteByte:	
  2486  0071                     ??i1_set_handler:	
  2487                           ; 1 bytes @ 0x1
  2488                           
  2489  0071                     i1DATAEE_WriteByte@bAdd:	
  2490                           ; 1 bytes @ 0x1
  2491                           
  2492                           
  2493                           ; 1 bytes @ 0x1
  2494  0071                     	ds	1
  2495  0072                     i1DATAEE_WriteByte@GIEBitValue:	
  2496  0072                     i1set_handler@mask:	
  2497                           ; 1 bytes @ 0x2
  2498                           
  2499  0072                     PROTOCOL_I2C_SEN@pdata:	
  2500                           ; 1 bytes @ 0x2
  2501                           
  2502                           
  2503                           ; 2 bytes @ 0x2
  2504  0072                     	ds	1
  2505  0073                     ??i1_PROTOCOL_SAV:	
  2506  0073                     i1set_handler@i:	
  2507                           ; 1 bytes @ 0x3
  2508                           
  2509                           
  2510                           ; 1 bytes @ 0x3
  2511  0073                     	ds	1
  2512  0074                     ??i1_PROTOCOL_SET:	
  2513                           
  2514                           ; 1 bytes @ 0x4
  2515  0074                     	ds	1
  2516  0075                     i1PROTOCOL_SET@value_:	
  2517                           
  2518                           ; 1 bytes @ 0x5
  2519  0075                     	ds	1
  2520  0076                     ??_I2C1_StatusCallback:	
  2521                           
  2522                           ; 1 bytes @ 0x6
  2523  0076                     	ds	1
  2524  0077                     I2C1_StatusCallback@i2c_bus_state:	
  2525                           
  2526                           ; 1 bytes @ 0x7
  2527  0077                     	ds	1
  2528  0078                     I2C1_StatusCallback@pdata:	
  2529                           
  2530                           ; 2 bytes @ 0x8
  2531  0078                     	ds	2
  2532  007A                     ??_I2C1_ISR:	
  2533                           
  2534                           ; 1 bytes @ 0xA
  2535  007A                     	ds	1
  2536  007B                     I2C1_ISR@i2c_data:	
  2537                           
  2538                           ; 1 bytes @ 0xB
  2539  007B                     	ds	1
  2540                           
  2541                           	psect	cstackBANK0
  2542  0020                     __pcstackBANK0:	
  2543  0020                     ??_INTERRUPT_InterruptManager:	
  2544                           
  2545                           ; 1 bytes @ 0x0
  2546  0020                     	ds	1
  2547  0021                     ??_PROTOCOL_Read_Device_Address:	
  2548  0021                     ??_PROTOCOL_STA:	
  2549                           ; 1 bytes @ 0x1
  2550                           
  2551  0021                     ??_PROTOCOL_STP:	
  2552                           ; 1 bytes @ 0x1
  2553                           
  2554  0021                     ??_PROTOCOL_EXT:	
  2555                           ; 1 bytes @ 0x1
  2556                           
  2557  0021                     ??_PIN_MANAGER_Initialize:	
  2558                           ; 1 bytes @ 0x1
  2559                           
  2560  0021                     ??_OSCILLATOR_Initialize:	
  2561                           ; 1 bytes @ 0x1
  2562                           
  2563  0021                     ??_WDT_Initialize:	
  2564                           ; 1 bytes @ 0x1
  2565                           
  2566  0021                     ??_ADC_Initialize:	
  2567                           ; 1 bytes @ 0x1
  2568                           
  2569  0021                     ??_TMR0_Initialize:	
  2570                           ; 1 bytes @ 0x1
  2571                           
  2572  0021                     ??_EUSART_Initialize:	
  2573                           ; 1 bytes @ 0x1
  2574                           
  2575  0021                     ?_PROTOCOL_Set_Func:	
  2576                           ; 1 bytes @ 0x1
  2577                           
  2578  0021                     ??_isdigit:	
  2579                           ; 1 bytes @ 0x1
  2580                           
  2581  0021                     ??_I2C1_Initialize:	
  2582                           ; 1 bytes @ 0x1
  2583                           
  2584  0021                     ??_EUSART_Read:	
  2585                           ; 1 bytes @ 0x1
  2586                           
  2587  0021                     ??_EUSART_Write:	
  2588                           ; 1 bytes @ 0x1
  2589                           
  2590  0021                     ?_DATAEE_WriteByte:	
  2591                           ; 1 bytes @ 0x1
  2592                           
  2593  0021                     ??_DATAEE_ReadByte:	
  2594                           ; 1 bytes @ 0x1
  2595                           
  2596  0021                     ??_ADC_SelectChannel:	
  2597                           ; 1 bytes @ 0x1
  2598                           
  2599  0021                     ??_ADC_StartConversion:	
  2600                           ; 1 bytes @ 0x1
  2601                           
  2602  0021                     ??_ADC_IsConversionDone:	
  2603                           ; 1 bytes @ 0x1
  2604                           
  2605  0021                     ??_TMR0_HasOverflowOccured:	
  2606                           ; 1 bytes @ 0x1
  2607                           
  2608  0021                     ??_led_blink:	
  2609                           ; 1 bytes @ 0x1
  2610                           
  2611  0021                     ??_init:	
  2612                           ; 1 bytes @ 0x1
  2613                           
  2614  0021                     ?_set_handler:	
  2615                           ; 1 bytes @ 0x1
  2616                           
  2617  0021                     ?_PROTOCOL_I2C_Set_TLV:	
  2618                           ; 1 bytes @ 0x1
  2619                           
  2620  0021                     ?_abs:	
  2621                           ; 1 bytes @ 0x1
  2622                           
  2623  0021                     ?_strncmp:	
  2624                           ; 2 bytes @ 0x1
  2625                           
  2626  0021                     ?_ADC_GetConversionResult:	
  2627                           ; 2 bytes @ 0x1
  2628                           
  2629  0021                     ?___wmul:	
  2630                           ; 2 bytes @ 0x1
  2631                           
  2632  0021                     ?___lwdiv:	
  2633                           ; 2 bytes @ 0x1
  2634                           
  2635  0021                     DATAEE_WriteByte@bData:	
  2636                           ; 2 bytes @ 0x1
  2637                           
  2638  0021                     DATAEE_ReadByte@bAdd:	
  2639                           ; 1 bytes @ 0x1
  2640                           
  2641  0021                     set_handler@value:	
  2642                           ; 1 bytes @ 0x1
  2643                           
  2644  0021                     PROTOCOL_EXT@char_buf:	
  2645                           ; 1 bytes @ 0x1
  2646                           
  2647  0021                     PROTOCOL_I2C_Set_TLV@length:	
  2648                           ; 1 bytes @ 0x1
  2649                           
  2650  0021                     _isdigit$1271:	
  2651                           ; 1 bytes @ 0x1
  2652                           
  2653  0021                     PROTOCOL_Set_Func@loop_func:	
  2654                           ; 1 bytes @ 0x1
  2655                           
  2656  0021                     ___wmul@multiplier:	
  2657                           ; 2 bytes @ 0x1
  2658                           
  2659  0021                     abs@a:	
  2660                           ; 2 bytes @ 0x1
  2661                           
  2662  0021                     ___lwdiv@divisor:	
  2663                           ; 2 bytes @ 0x1
  2664                           
  2665  0021                     strncmp@s1:	
  2666                           ; 2 bytes @ 0x1
  2667                           
  2668                           
  2669                           ; 2 bytes @ 0x1
  2670  0021                     	ds	1
  2671  0022                     ??_DATAEE_WriteByte:	
  2672  0022                     ??_set_handler:	
  2673                           ; 1 bytes @ 0x2
  2674                           
  2675  0022                     EUSART_Read@readValue:	
  2676                           ; 1 bytes @ 0x2
  2677                           
  2678  0022                     EUSART_Write@txData:	
  2679                           ; 1 bytes @ 0x2
  2680                           
  2681  0022                     DATAEE_WriteByte@bAdd:	
  2682                           ; 1 bytes @ 0x2
  2683                           
  2684  0022                     ADC_SelectChannel@channel:	
  2685                           ; 1 bytes @ 0x2
  2686                           
  2687  0022                     init@i:	
  2688                           ; 1 bytes @ 0x2
  2689                           
  2690  0022                     isdigit@c:	
  2691                           ; 1 bytes @ 0x2
  2692                           
  2693  0022                     PROTOCOL_I2C_Set_TLV@pbuffer:	
  2694                           ; 1 bytes @ 0x2
  2695                           
  2696                           
  2697                           ; 2 bytes @ 0x2
  2698  0022                     	ds	1
  2699  0023                     ??_abs:	
  2700  0023                     ??_PROTOCOL_Set_Func:	
  2701                           ; 1 bytes @ 0x3
  2702                           
  2703  0023                     ??_putch:	
  2704                           ; 1 bytes @ 0x3
  2705                           
  2706  0023                     ??_ADC_GetConversionResult:	
  2707                           ; 1 bytes @ 0x3
  2708                           
  2709  0023                     putch@txData:	
  2710                           ; 1 bytes @ 0x3
  2711                           
  2712  0023                     DATAEE_WriteByte@GIEBitValue:	
  2713                           ; 1 bytes @ 0x3
  2714                           
  2715  0023                     set_handler@mask:	
  2716                           ; 1 bytes @ 0x3
  2717                           
  2718  0023                     strncmp@s2:	
  2719                           ; 1 bytes @ 0x3
  2720                           
  2721  0023                     ___wmul@multiplicand:	
  2722                           ; 1 bytes @ 0x3
  2723                           
  2724  0023                     ___lwdiv@dividend:	
  2725                           ; 2 bytes @ 0x3
  2726                           
  2727                           
  2728                           ; 2 bytes @ 0x3
  2729  0023                     	ds	1
  2730  0024                     ??_PROTOCOL_SAV:	
  2731  0024                     ??_PROTOCOL_Write_Device_Address:	
  2732                           ; 1 bytes @ 0x4
  2733                           
  2734  0024                     ??_PROTOCOL_I2C_Set_TLV:	
  2735                           ; 1 bytes @ 0x4
  2736                           
  2737  0024                     set_handler@i:	
  2738                           ; 1 bytes @ 0x4
  2739                           
  2740  0024                     strncmp@len:	
  2741                           ; 1 bytes @ 0x4
  2742                           
  2743                           
  2744                           ; 2 bytes @ 0x4
  2745  0024                     	ds	1
  2746  0025                     ??_PROTOCOL_SET:	
  2747  0025                     ?_PROTOCOL_Initialize:	
  2748                           ; 1 bytes @ 0x5
  2749                           
  2750  0025                     ??___wmul:	
  2751                           ; 1 bytes @ 0x5
  2752                           
  2753  0025                     ??___lwdiv:	
  2754                           ; 1 bytes @ 0x5
  2755                           
  2756  0025                     PROTOCOL_Write_Device_Address@device_id_i2c:	
  2757                           ; 1 bytes @ 0x5
  2758                           
  2759  0025                     PROTOCOL_I2C_Set_TLV@type:	
  2760                           ; 1 bytes @ 0x5
  2761                           
  2762  0025                     PROTOCOL_Initialize@device_id:	
  2763                           ; 1 bytes @ 0x5
  2764                           
  2765  0025                     ___wmul@product:	
  2766                           ; 2 bytes @ 0x5
  2767                           
  2768                           
  2769                           ; 2 bytes @ 0x5
  2770  0025                     	ds	1
  2771  0026                     ??_strncmp:	
  2772  0026                     PROTOCOL_SET@value_:	
  2773                           ; 1 bytes @ 0x6
  2774                           
  2775  0026                     PROTOCOL_I2C_Set_TLV@status:	
  2776                           ; 1 bytes @ 0x6
  2777                           
  2778  0026                     ___lwdiv@counter:	
  2779                           ; 1 bytes @ 0x6
  2780                           
  2781                           
  2782                           ; 1 bytes @ 0x6
  2783  0026                     	ds	1
  2784  0027                     ?_atoi:	
  2785  0027                     PROTOCOL_Initialize@start_handler:	
  2786                           ; 2 bytes @ 0x7
  2787                           
  2788  0027                     ___lwdiv@quotient:	
  2789                           ; 1 bytes @ 0x7
  2790                           
  2791                           
  2792                           ; 2 bytes @ 0x7
  2793  0027                     	ds	1
  2794  0028                     PROTOCOL_Initialize@stop_handler:	
  2795                           
  2796                           ; 1 bytes @ 0x8
  2797  0028                     	ds	1
  2798  0029                     ??_atoi:	
  2799  0029                     ?___lwmod:	
  2800                           ; 1 bytes @ 0x9
  2801                           
  2802  0029                     PROTOCOL_Initialize@set_handler:	
  2803                           ; 2 bytes @ 0x9
  2804                           
  2805  0029                     ___lwmod@divisor:	
  2806                           ; 2 bytes @ 0x9
  2807                           
  2808                           
  2809                           ; 2 bytes @ 0x9
  2810  0029                     	ds	2
  2811  002B                     PROTOCOL_Initialize@inv_handler:	
  2812  002B                     atoi@sign:	
  2813                           ; 1 bytes @ 0xB
  2814                           
  2815  002B                     ___lwmod@dividend:	
  2816                           ; 1 bytes @ 0xB
  2817                           
  2818                           
  2819                           ; 2 bytes @ 0xB
  2820  002B                     	ds	1
  2821  002C                     PROTOCOL_Initialize@scaler:	
  2822  002C                     atoi@a:	
  2823                           ; 1 bytes @ 0xC
  2824                           
  2825                           
  2826                           ; 2 bytes @ 0xC
  2827  002C                     	ds	1
  2828  002D                     ??_PROTOCOL_Initialize:	
  2829  002D                     ??___lwmod:	
  2830                           ; 1 bytes @ 0xD
  2831                           
  2832                           
  2833                           ; 1 bytes @ 0xD
  2834  002D                     	ds	1
  2835  002E                     atoi@s:	
  2836  002E                     ___lwmod@counter:	
  2837                           ; 1 bytes @ 0xE
  2838                           
  2839                           
  2840                           ; 1 bytes @ 0xE
  2841  002E                     	ds	1
  2842  002F                     ?_printf:	
  2843  002F                     printf@f:	
  2844                           ; 2 bytes @ 0xF
  2845                           
  2846                           
  2847                           ; 2 bytes @ 0xF
  2848  002F                     	ds	4
  2849  0033                     ??_printf:	
  2850                           
  2851                           ; 1 bytes @ 0x13
  2852  0033                     	ds	4
  2853  0037                     printf@prec:	
  2854                           
  2855                           ; 1 bytes @ 0x17
  2856  0037                     	ds	1
  2857  0038                     printf@cp:	
  2858                           
  2859                           ; 2 bytes @ 0x18
  2860  0038                     	ds	2
  2861  003A                     printf@ap:	
  2862                           
  2863                           ; 1 bytes @ 0x1A
  2864  003A                     	ds	1
  2865  003B                     printf@val:	
  2866                           
  2867                           ; 2 bytes @ 0x1B
  2868  003B                     	ds	2
  2869  003D                     printf@len:	
  2870                           
  2871                           ; 2 bytes @ 0x1D
  2872  003D                     	ds	2
  2873  003F                     printf@flag:	
  2874                           
  2875                           ; 1 bytes @ 0x1F
  2876  003F                     	ds	1
  2877  0040                     printf@width:	
  2878                           
  2879                           ; 2 bytes @ 0x20
  2880  0040                     	ds	2
  2881  0042                     printf@c:	
  2882                           
  2883                           ; 1 bytes @ 0x22
  2884  0042                     	ds	1
  2885  0043                     ?_PROTOCOL_I2C_Send_uint8_t:	
  2886  0043                     PROTOCOL_I2C_Send_uint8_t@pbuffer:	
  2887                           ; 1 bytes @ 0x23
  2888                           
  2889                           
  2890                           ; 1 bytes @ 0x23
  2891  0043                     	ds	1
  2892  0044                     ??_PROTOCOL_I2C_Send_uint8_t:	
  2893                           
  2894                           ; 1 bytes @ 0x24
  2895  0044                     	ds	3
  2896  0047                     PROTOCOL_I2C_Send_uint8_t@length:	
  2897                           
  2898                           ; 1 bytes @ 0x27
  2899  0047                     	ds	1
  2900  0048                     ??_loop_func:	
  2901                           
  2902                           ; 1 bytes @ 0x28
  2903  0048                     	ds	1
  2904  0049                     loop_func@out:	
  2905                           
  2906                           ; 2 bytes @ 0x29
  2907  0049                     	ds	2
  2908  004B                     loop_func@transition_detected:	
  2909                           
  2910                           ; 1 bytes @ 0x2B
  2911  004B                     	ds	1
  2912  004C                     loop_func@v:	
  2913                           
  2914                           ; 2 bytes @ 0x2C
  2915  004C                     	ds	2
  2916  004E                     loop_func@i:	
  2917                           
  2918                           ; 1 bytes @ 0x2E
  2919  004E                     	ds	1
  2920  004F                     ??_PROTOCOL_Loop:	
  2921                           
  2922                           ; 1 bytes @ 0x2F
  2923  004F                     	ds	2
  2924  0051                     ??_main:	
  2925                           
  2926                           	psect	maintext
  2927  07A6                     __pmaintext:	
  2928                           ; 1 bytes @ 0x31
  2929 ;;
  2930 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2931 ;;
  2932 ;; *************** function _main *****************
  2933 ;; Defined at:
  2934 ;;		line 140 in file "main.c"
  2935 ;; Parameters:    Size  Location     Type
  2936 ;;		None
  2937 ;; Auto vars:     Size  Location     Type
  2938 ;;		None
  2939 ;; Return value:  Size  Location     Type
  2940 ;;                  1    wreg      void 
  2941 ;; Registers used:
  2942 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2943 ;; Tracked objects:
  2944 ;;		On entry : B1F/0
  2945 ;;		On exit  : 0/0
  2946 ;;		Unchanged: 0/0
  2947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2949 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2951 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2952 ;;Total ram usage:        0 bytes
  2953 ;; Hardware stack levels required when called:   11
  2954 ;; This function calls:
  2955 ;;		_ADC_Initialize
  2956 ;;		_EUSART_Initialize
  2957 ;;		_I2C1_Initialize
  2958 ;;		_OSCILLATOR_Initialize
  2959 ;;		_PIN_MANAGER_Initialize
  2960 ;;		_PROTOCOL_Initialize
  2961 ;;		_PROTOCOL_Loop
  2962 ;;		_PROTOCOL_Set_Func
  2963 ;;		_TMR0_Initialize
  2964 ;;		_WDT_Initialize
  2965 ;;		_init
  2966 ;; This function is called by:
  2967 ;;		Startup code after reset
  2968 ;; This function uses a non-reentrant model
  2969 ;;
  2970                           
  2971                           
  2972                           ;psect for function _main
  2973  07A6                     _main:	
  2974                           
  2975                           ;main.c: 142: init();
  2976                           
  2977                           ;incstack = 0
  2978                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2979  07A6  318D  25E6  3187   	fcall	_init
  2980                           
  2981                           ;main.c: 145: PROTOCOL_Initialize("MULTI_A1324LUA_T", (0), (0), set_handler, (0), 1);
  2982  07A9  30DE               	movlw	low (STR_1| (0+32768))
  2983  07AA  0020               	movlb	0	; select bank0
  2984  07AB  00A5               	movwf	PROTOCOL_Initialize@device_id
  2985  07AC  3083               	movlw	high (STR_1| (0+32768))
  2986  07AD  00A6               	movwf	PROTOCOL_Initialize@device_id+1
  2987  07AE  01A7               	clrf	PROTOCOL_Initialize@start_handler
  2988  07AF  01A8               	clrf	PROTOCOL_Initialize@stop_handler
  2989  07B0  3098               	movlw	low _set_handler
  2990  07B1  00A9               	movwf	PROTOCOL_Initialize@set_handler
  2991  07B2  300F               	movlw	high _set_handler
  2992  07B3  00AA               	movwf	PROTOCOL_Initialize@set_handler+1
  2993  07B4  01AB               	clrf	PROTOCOL_Initialize@inv_handler
  2994  07B5  01AC               	clrf	PROTOCOL_Initialize@scaler
  2995  07B6  0AAC               	incf	PROTOCOL_Initialize@scaler,f
  2996  07B7  3186  2686  3187   	fcall	_PROTOCOL_Initialize
  2997                           
  2998                           ;main.c: 146: PROTOCOL_Set_Func(loop_func);
  2999  07BA  3064               	movlw	low _loop_func
  3000  07BB  0020               	movlb	0	; select bank0
  3001  07BC  00A1               	movwf	PROTOCOL_Set_Func@loop_func
  3002  07BD  3005               	movlw	high _loop_func
  3003  07BE  00A2               	movwf	PROTOCOL_Set_Func@loop_func+1
  3004  07BF  318D  252B  3187   	fcall	_PROTOCOL_Set_Func
  3005                           
  3006                           ;main.c: 149: PIN_MANAGER_Initialize();
  3007  07C2  318E  2671  3187   	fcall	_PIN_MANAGER_Initialize
  3008                           
  3009                           ;main.c: 150: OSCILLATOR_Initialize();
  3010  07C5  318C  24EB  3187   	fcall	_OSCILLATOR_Initialize
  3011                           
  3012                           ;main.c: 151: WDT_Initialize();
  3013  07C8  318C  24E7  3187   	fcall	_WDT_Initialize
  3014                           
  3015                           ;main.c: 152: ADC_Initialize();
  3016  07CB  318D  2508  3187   	fcall	_ADC_Initialize
  3017                           
  3018                           ;main.c: 153: TMR0_Initialize();
  3019  07CE  318D  2559  3187   	fcall	_TMR0_Initialize
  3020                           
  3021                           ;main.c: 156: (INTCONbits.GIE = 1);
  3022  07D1  178B               	bsf	11,7	;volatile
  3023                           
  3024                           ;main.c: 157: (INTCONbits.PEIE = 1);
  3025  07D2  170B               	bsf	11,6	;volatile
  3026                           
  3027                           ;main.c: 160: EUSART_Initialize();
  3028  07D3  318D  25CC  3187   	fcall	_EUSART_Initialize
  3029                           
  3030                           ;main.c: 163: I2C1_Initialize();
  3031  07D6  318E  26AF  3187   	fcall	_I2C1_Initialize
  3032                           
  3033                           ;main.c: 166: PROTOCOL_Loop();
  3034  07D9  3182  223D         	fcall	_PROTOCOL_Loop
  3035  07DB  3180  2830         	ljmp	start
  3036  07DD                     __end_of_main:	
  3037                           
  3038                           	psect	text1
  3039  0DE6                     __ptext1:	
  3040 ;; *************** function _init *****************
  3041 ;; Defined at:
  3042 ;;		line 58 in file "main.c"
  3043 ;; Parameters:    Size  Location     Type
  3044 ;;		None
  3045 ;; Auto vars:     Size  Location     Type
  3046 ;;  i               1    2[BANK0 ] unsigned char 
  3047 ;; Return value:  Size  Location     Type
  3048 ;;                  1    wreg      void 
  3049 ;; Registers used:
  3050 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3051 ;; Tracked objects:
  3052 ;;		On entry : 0/0
  3053 ;;		On exit  : 0/0
  3054 ;;		Unchanged: 0/0
  3055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3057 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3058 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3059 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3060 ;;Total ram usage:        2 bytes
  3061 ;; Hardware stack levels used:    1
  3062 ;; Hardware stack levels required when called:    5
  3063 ;; This function calls:
  3064 ;;		Nothing
  3065 ;; This function is called by:
  3066 ;;		_main
  3067 ;; This function uses a non-reentrant model
  3068 ;;
  3069                           
  3070                           
  3071                           ;psect for function _init
  3072  0DE6                     _init:	
  3073                           
  3074                           ;main.c: 59: uint8_t i;
  3075                           ;main.c: 60: for(i=0; i<6; i++) {
  3076                           
  3077                           ;incstack = 0
  3078                           ; Regs used in _init: [wreg+fsr1l+fsr1h+status,2+status,0]
  3079  0DE6  0020               	movlb	0	; select bank0
  3080  0DE7  01A2               	clrf	init@i
  3081  0DE8                     L1:	
  3082  0DE8  3006               	movlw	6
  3083  0DE9  0222               	subwf	init@i,w
  3084  0DEA  1803               	btfsc	3,0
  3085  0DEB  0008               	return
  3086                           
  3087                           ;main.c: 61: position[i] = 0;
  3088  0DEC  0822               	movf	init@i,w
  3089  0DED  3ED3               	addlw	(low (_position| 0))& (0+255)
  3090  0DEE  0086               	movwf	6
  3091  0DEF  0187               	clrf	7
  3092  0DF0  0181               	clrf	1
  3093                           
  3094                           ;main.c: 62: count[i] = 0;
  3095  0DF1  0822               	movf	init@i,w
  3096  0DF2  3EB0               	addlw	(low (_count| 0))& (0+255)
  3097  0DF3  0086               	movwf	6
  3098  0DF4  0187               	clrf	7
  3099  0DF5  0181               	clrf	1
  3100                           
  3101                           ;main.c: 63: analog_in[i] = 0;
  3102  0DF6  0822               	movf	init@i,w
  3103  0DF7  3EB6               	addlw	(low (_analog_in| 0))& (0+255)
  3104  0DF8  0086               	movwf	6
  3105  0DF9  0187               	clrf	7
  3106  0DFA  0181               	clrf	1
  3107  0DFB  3001               	movlw	1
  3108  0DFC  00A1               	movwf	??_init
  3109  0DFD  0821               	movf	??_init,w
  3110  0DFE  07A2               	addwf	init@i,f
  3111  0DFF  2DE8               	goto	L1
  3112  0E00                     __end_of_init:	
  3113                           
  3114                           	psect	text2
  3115  0CE7                     __ptext2:	
  3116 ;; *************** function _WDT_Initialize *****************
  3117 ;; Defined at:
  3118 ;;		line 89 in file "mcc_generated_files/mcc.c"
  3119 ;; Parameters:    Size  Location     Type
  3120 ;;		None
  3121 ;; Auto vars:     Size  Location     Type
  3122 ;;		None
  3123 ;; Return value:  Size  Location     Type
  3124 ;;                  1    wreg      void 
  3125 ;; Registers used:
  3126 ;;		wreg
  3127 ;; Tracked objects:
  3128 ;;		On entry : 0/0
  3129 ;;		On exit  : 0/0
  3130 ;;		Unchanged: 0/0
  3131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3133 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3135 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3136 ;;Total ram usage:        0 bytes
  3137 ;; Hardware stack levels used:    1
  3138 ;; Hardware stack levels required when called:    5
  3139 ;; This function calls:
  3140 ;;		Nothing
  3141 ;; This function is called by:
  3142 ;;		_main
  3143 ;;		_SYSTEM_Initialize
  3144 ;; This function uses a non-reentrant model
  3145 ;;
  3146                           
  3147                           
  3148                           ;psect for function _WDT_Initialize
  3149  0CE7                     _WDT_Initialize:	
  3150                           
  3151                           ;mcc.c: 92: WDTCON = 0x16;
  3152                           
  3153                           ;incstack = 0
  3154                           ; Regs used in _WDT_Initialize: [wreg]
  3155  0CE7  3016               	movlw	22
  3156  0CE8  0021               	movlb	1	; select bank1
  3157  0CE9  0097               	movwf	23	;volatile
  3158  0CEA  0008               	return
  3159  0CEB                     __end_of_WDT_Initialize:	
  3160                           
  3161                           	psect	text3
  3162  0D59                     __ptext3:	
  3163 ;; *************** function _TMR0_Initialize *****************
  3164 ;; Defined at:
  3165 ;;		line 62 in file "mcc_generated_files/tmr0.c"
  3166 ;; Parameters:    Size  Location     Type
  3167 ;;		None
  3168 ;; Auto vars:     Size  Location     Type
  3169 ;;		None
  3170 ;; Return value:  Size  Location     Type
  3171 ;;                  1    wreg      void 
  3172 ;; Registers used:
  3173 ;;		wreg, status,2
  3174 ;; Tracked objects:
  3175 ;;		On entry : 0/0
  3176 ;;		On exit  : 0/0
  3177 ;;		Unchanged: 0/0
  3178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3180 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3181 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3182 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3183 ;;Total ram usage:        1 bytes
  3184 ;; Hardware stack levels used:    1
  3185 ;; Hardware stack levels required when called:    5
  3186 ;; This function calls:
  3187 ;;		Nothing
  3188 ;; This function is called by:
  3189 ;;		_main
  3190 ;;		_SYSTEM_Initialize
  3191 ;; This function uses a non-reentrant model
  3192 ;;
  3193                           
  3194                           
  3195                           ;psect for function _TMR0_Initialize
  3196  0D59                     _TMR0_Initialize:	
  3197                           
  3198                           ;tmr0.c: 67: OPTION_REG = (OPTION_REG & 0xC0) | 0xD4 & 0x3F;
  3199                           
  3200                           ;incstack = 0
  3201                           ; Regs used in _TMR0_Initialize: [wreg+status,2]
  3202  0D59  0021               	movlb	1	; select bank1
  3203  0D5A  0815               	movf	21,w	;volatile
  3204  0D5B  39C0               	andlw	192
  3205  0D5C  3814               	iorlw	20
  3206  0D5D  0095               	movwf	21	;volatile
  3207                           
  3208                           ;tmr0.c: 70: TMR0 = 0x06;
  3209  0D5E  3006               	movlw	6
  3210  0D5F  0020               	movlb	0	; select bank0
  3211  0D60  0095               	movwf	21	;volatile
  3212                           
  3213                           ;tmr0.c: 73: timer0ReloadVal= 6;
  3214  0D61  3006               	movlw	6
  3215  0D62  00A1               	movwf	??_TMR0_Initialize
  3216  0D63  0821               	movf	??_TMR0_Initialize,w
  3217  0D64  00E0               	movwf	_timer0ReloadVal	;volatile
  3218                           
  3219                           ;tmr0.c: 76: INTCONbits.TMR0IF = 0;
  3220  0D65  110B               	bcf	11,2	;volatile
  3221  0D66  0008               	return
  3222  0D67                     __end_of_TMR0_Initialize:	
  3223                           
  3224                           	psect	text4
  3225  0D2B                     __ptext4:	
  3226 ;; *************** function _PROTOCOL_Set_Func *****************
  3227 ;; Defined at:
  3228 ;;		line 77 in file "protocol.c"
  3229 ;; Parameters:    Size  Location     Type
  3230 ;;  loop_func       2    1[BANK0 ] PTR void 
  3231 ;;		 -> loop_func(1), 
  3232 ;; Auto vars:     Size  Location     Type
  3233 ;;		None
  3234 ;; Return value:  Size  Location     Type
  3235 ;;                  1    wreg      void 
  3236 ;; Registers used:
  3237 ;;		wreg
  3238 ;; Tracked objects:
  3239 ;;		On entry : 0/0
  3240 ;;		On exit  : 0/0
  3241 ;;		Unchanged: 0/0
  3242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3243 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3246 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3247 ;;Total ram usage:        2 bytes
  3248 ;; Hardware stack levels used:    1
  3249 ;; Hardware stack levels required when called:    5
  3250 ;; This function calls:
  3251 ;;		Nothing
  3252 ;; This function is called by:
  3253 ;;		_main
  3254 ;; This function uses a non-reentrant model
  3255 ;;
  3256                           
  3257                           
  3258                           ;psect for function _PROTOCOL_Set_Func
  3259  0D2B                     _PROTOCOL_Set_Func:	
  3260                           
  3261                           ;protocol.c: 78: PROTOCOL_Loop_Func = loop_func;
  3262                           
  3263                           ;incstack = 0
  3264                           ; Regs used in _PROTOCOL_Set_Func: [wreg]
  3265  0D2B  0020               	movlb	0	; select bank0
  3266  0D2C  0822               	movf	PROTOCOL_Set_Func@loop_func+1,w
  3267  0D2D  0021               	movlb	1	; select bank1
  3268  0D2E  00C7               	movwf	(_PROTOCOL_Loop_Func+1)^(0+128)
  3269  0D2F  0020               	movlb	0	; select bank0
  3270  0D30  0821               	movf	PROTOCOL_Set_Func@loop_func,w
  3271  0D31  0021               	movlb	1	; select bank1
  3272  0D32  00C6               	movwf	_PROTOCOL_Loop_Func^(0+128)
  3273  0D33  0008               	return
  3274  0D34                     __end_of_PROTOCOL_Set_Func:	
  3275                           
  3276                           	psect	text5
  3277  023D                     __ptext5:	
  3278 ;; *************** function _PROTOCOL_Loop *****************
  3279 ;; Defined at:
  3280 ;;		line 136 in file "protocol.c"
  3281 ;; Parameters:    Size  Location     Type
  3282 ;;		None
  3283 ;; Auto vars:     Size  Location     Type
  3284 ;;  device_addre    1    1[BANK1 ] unsigned char 
  3285 ;;  c               1    0[BANK1 ] unsigned char 
  3286 ;; Return value:  Size  Location     Type
  3287 ;;                  1    wreg      void 
  3288 ;; Registers used:
  3289 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3290 ;; Tracked objects:
  3291 ;;		On entry : 0/0
  3292 ;;		On exit  : 0/0
  3293 ;;		Unchanged: 0/0
  3294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3295 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3296 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  3297 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3298 ;;      Totals:         0       2       2       0       0       0       0       0       0       0       0       0       
      +0       0
  3299 ;;Total ram usage:        4 bytes
  3300 ;; Hardware stack levels used:    1
  3301 ;; Hardware stack levels required when called:   10
  3302 ;; This function calls:
  3303 ;;		Absolute function
  3304 ;;		_EUSART_Read
  3305 ;;		_PROTOCOL_EXT
  3306 ;;		_PROTOCOL_Read_Device_Address
  3307 ;;		_PROTOCOL_SAV
  3308 ;;		_PROTOCOL_SET
  3309 ;;		_PROTOCOL_STA
  3310 ;;		_PROTOCOL_STP
  3311 ;;		_PROTOCOL_Write_Device_Address
  3312 ;;		_TMR0_HasOverflowOccured
  3313 ;;		_atoi
  3314 ;;		_loop_func
  3315 ;;		_printf
  3316 ;;		_strncmp
  3317 ;; This function is called by:
  3318 ;;		_main
  3319 ;; This function uses a non-reentrant model
  3320 ;;
  3321                           
  3322                           
  3323                           ;psect for function _PROTOCOL_Loop
  3324  023D                     _PROTOCOL_Loop:	
  3325  023D                     l673:	
  3326                           ;incstack = 0
  3327                           ; Regs used in _PROTOCOL_Loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3328                           ;protocol.c: 137: uint8_t device_address;
  3329                           ;protocol.c: 138: uint8_t c;
  3330                           ;protocol.c: 139: while (1) {
  3331                           
  3332                           
  3333                           ;protocol.c: 140: tmr_overflow = TMR0_HasOverflowOccured();
  3334  023D  318C  24E3  3182   	fcall	_TMR0_HasOverflowOccured
  3335  0240  0020               	movlb	0	; select bank0
  3336  0241  00CF               	movwf	??_PROTOCOL_Loop
  3337  0242  084F               	movf	??_PROTOCOL_Loop,w
  3338  0243  00D7               	movwf	_tmr_overflow
  3339                           
  3340                           ;protocol.c: 141: if (tmr_overflow) {
  3341  0244  0857               	movf	_tmr_overflow,w
  3342  0245  1903               	btfsc	3,2
  3343  0246  2A65               	goto	l5085
  3344                           
  3345                           ;protocol.c: 142: TMR0IF = 0;
  3346  0247  110B               	bcf	11,2	;volatile
  3347                           
  3348                           ;protocol.c: 144: if (PROTOCOL_Inv_Handler && (++tmr_cnt >= value)) {
  3349  0248  0021               	movlb	1	; select bank1
  3350  0249  0842               	movf	_PROTOCOL_Inv_Handler^(0+128),w
  3351  024A  0443               	iorwf	(_PROTOCOL_Inv_Handler+1)^(0+128),w
  3352  024B  1903               	btfsc	3,2
  3353  024C  2A65               	goto	l5085
  3354  024D  3001               	movlw	1
  3355  024E  0020               	movlb	0	; select bank0
  3356  024F  00CF               	movwf	??_PROTOCOL_Loop
  3357  0250  084F               	movf	??_PROTOCOL_Loop,w
  3358  0251  07D8               	addwf	_tmr_cnt,f
  3359  0252  085D               	movf	_value,w
  3360  0253  0258               	subwf	_tmr_cnt,w
  3361  0254  1C03               	skipc
  3362  0255  2A65               	goto	l5085
  3363                           
  3364                           ;protocol.c: 145: tmr_cnt = 0;
  3365  0256  01D8               	clrf	_tmr_cnt
  3366                           
  3367                           ;protocol.c: 146: if (++sec_cnt >= tmr_scaler) {
  3368  0257  3001               	movlw	1
  3369  0258  00CF               	movwf	??_PROTOCOL_Loop
  3370  0259  084F               	movf	??_PROTOCOL_Loop,w
  3371  025A  07D9               	addwf	_sec_cnt,f
  3372  025B  086A               	movf	_tmr_scaler,w
  3373  025C  0259               	subwf	_sec_cnt,w
  3374  025D  1C03               	skipc
  3375  025E  2A65               	goto	l5085
  3376                           
  3377                           ;protocol.c: 147: if (running) invoked = 1;
  3378  025F  085B               	movf	_running,w
  3379  0260  1903               	btfsc	3,2
  3380  0261  2A64               	goto	l5083
  3381  0262  01DA               	clrf	_invoked
  3382  0263  0ADA               	incf	_invoked,f
  3383  0264                     l5083:	
  3384                           
  3385                           ;protocol.c: 148: sec_cnt = 0;
  3386  0264  01D9               	clrf	_sec_cnt
  3387  0265                     l5085:	
  3388                           
  3389                           ;protocol.c: 149: }
  3390                           ;protocol.c: 150: }
  3391                           ;protocol.c: 151: }
  3392                           ;protocol.c: 152: if (invoked && PROTOCOL_Inv_Handler) {
  3393  0265  0020               	movlb	0	; select bank0
  3394  0266  085A               	movf	_invoked,w
  3395  0267  1903               	btfsc	3,2
  3396  0268  2A70               	goto	l5091
  3397                           
  3398                           ;protocol.c: 153: PROTOCOL_Inv_Handler();
  3399  0269  0021               	movlb	1	; select bank1
  3400  026A  0842               	movf	_PROTOCOL_Inv_Handler^(0+128),w
  3401  026B  0443               	iorwf	(_PROTOCOL_Inv_Handler+1)^(0+128),w
  3402  026C  1903               	btfsc	3,2
  3403  026D  2A70               	goto	l5091
  3404                           
  3405                           ;protocol.c: 154: invoked = 0;
  3406  026E  0020               	movlb	0	; select bank0
  3407  026F  01DA               	clrf	_invoked
  3408  0270                     l5091:	
  3409                           
  3410                           ;protocol.c: 155: }
  3411                           ;protocol.c: 156: if (PROTOCOL_Loop_Func) PROTOCOL_Loop_Func();
  3412  0270  0021               	movlb	1	; select bank1
  3413  0271  0846               	movf	_PROTOCOL_Loop_Func^(0+128),w
  3414  0272  0447               	iorwf	(_PROTOCOL_Loop_Func+1)^(0+128),w
  3415  0273  1903               	btfsc	3,2
  3416  0274  2A7A               	goto	l5095
  3417  0275  0847               	movf	(_PROTOCOL_Loop_Func+1)^(0+128),w
  3418  0276  008A               	movwf	10
  3419  0277  0846               	movf	_PROTOCOL_Loop_Func^(0+128),w
  3420  0278  000A               	callw
  3421  0279  3182               	pagesel	$
  3422  027A                     l5095:	
  3423                           
  3424                           ;protocol.c: 157: if ((eusartRxCount)) {
  3425  027A  0020               	movlb	0	; select bank0
  3426  027B  0861               	movf	_eusartRxCount,w	;volatile
  3427  027C  1903               	btfsc	3,2
  3428  027D  2A3D               	goto	l673
  3429                           
  3430                           ;protocol.c: 158: c = EUSART_Read();
  3431  027E  318E  2690  3182   	fcall	_EUSART_Read
  3432  0281  0020               	movlb	0	; select bank0
  3433  0282  00CF               	movwf	??_PROTOCOL_Loop
  3434  0283  084F               	movf	??_PROTOCOL_Loop,w
  3435  0284  0021               	movlb	1	; select bank1
  3436  0285  00E2               	movwf	PROTOCOL_Loop@c^(0+128)
  3437                           
  3438                           ;protocol.c: 159: buf[cnt++] = c;
  3439  0286  0862               	movf	PROTOCOL_Loop@c^(0+128),w
  3440  0287  0020               	movlb	0	; select bank0
  3441  0288  00CF               	movwf	??_PROTOCOL_Loop
  3442  0289  085E               	movf	_cnt,w
  3443  028A  3E20               	addlw	(low (_buf| (0+256)))& (0+255)
  3444  028B  0086               	movwf	6
  3445  028C  3001               	movlw	1	; select bank2/3
  3446  028D  0087               	movwf	7
  3447  028E  084F               	movf	??_PROTOCOL_Loop,w
  3448  028F  0081               	movwf	1
  3449  0290  3001               	movlw	1
  3450  0291  00CF               	movwf	??_PROTOCOL_Loop
  3451  0292  084F               	movf	??_PROTOCOL_Loop,w
  3452  0293  07DE               	addwf	_cnt,f
  3453                           
  3454                           ;protocol.c: 160: if (c == '\n') {
  3455  0294  300A               	movlw	10
  3456  0295  0021               	movlb	1	; select bank1
  3457  0296  0662               	xorwf	PROTOCOL_Loop@c^(0+128),w
  3458  0297  1D03               	btfss	3,2
  3459  0298  2A3D               	goto	l673
  3460                           
  3461                           ;protocol.c: 161: buf[--cnt] = '\0';
  3462  0299  3001               	movlw	1
  3463  029A  0020               	movlb	0	; select bank0
  3464  029B  02DE               	subwf	_cnt,f
  3465  029C  085E               	movf	_cnt,w
  3466  029D  3E20               	addlw	(low (_buf| (0+256)))& (0+255)
  3467  029E  0086               	movwf	6
  3468  029F  3001               	movlw	1	; select bank2/3
  3469  02A0  0087               	movwf	7
  3470  02A1  0181               	clrf	1
  3471                           
  3472                           ;protocol.c: 162: cnt = 0;
  3473  02A2  01DE               	clrf	_cnt
  3474                           
  3475                           ;protocol.c: 163: printf("#%s\n", buf);
  3476  02A3  3069               	movlw	low (STR_3| (0+32768))
  3477  02A4  00AF               	movwf	printf@f
  3478  02A5  3084               	movlw	high (STR_3| (0+32768))
  3479  02A6  00B0               	movwf	printf@f+1
  3480  02A7  3020               	movlw	low _buf
  3481  02A8  00B1               	movwf	low ((?_printf| 0+2))
  3482  02A9  3001               	movlw	high _buf
  3483  02AA  00B2               	movwf	(low ((?_printf| 0+2))+1)
  3484  02AB  3180  2068  3182   	fcall	_printf
  3485                           
  3486                           ;protocol.c: 164: if (BACKPLANE_SLAVE_ADDRESS != 0x01) {
  3487  02AE  0020               	movlb	0	; select bank0
  3488  02AF  036D               	decf	_BACKPLANE_SLAVE_ADDRESS,w
  3489  02B0  1903               	btfsc	3,2
  3490  02B1  2AB7               	goto	l5115
  3491                           
  3492                           ;protocol.c: 165: PROTOCOL_EXT(buf);
  3493  02B2  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3494  02B3  3180  2002  3182   	fcall	_PROTOCOL_EXT
  3495                           
  3496                           ;protocol.c: 166: } else if (!strncmp(("WHO"), (buf), 3)) {
  3497  02B6  2A3D               	goto	l673
  3498  02B7                     l5115:	
  3499  02B7  308A               	movlw	low (STR_4| (0+32768))
  3500  02B8  0020               	movlb	0	; select bank0
  3501  02B9  00A1               	movwf	strncmp@s1
  3502  02BA  3084               	movlw	high (STR_4| (0+32768))
  3503  02BB  00A2               	movwf	strncmp@s1+1
  3504  02BC  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3505  02BD  00CF               	movwf	??_PROTOCOL_Loop
  3506  02BE  084F               	movf	??_PROTOCOL_Loop,w
  3507  02BF  00A3               	movwf	strncmp@s2
  3508  02C0  3003               	movlw	3
  3509  02C1  00A4               	movwf	strncmp@len
  3510  02C2  3000               	movlw	0
  3511  02C3  00A5               	movwf	strncmp@len+1
  3512  02C4  3187  2764  3182   	fcall	_strncmp
  3513  02C7  0020               	movlb	0	; select bank0
  3514  02C8  0821               	movf	?_strncmp,w
  3515  02C9  0422               	iorwf	?_strncmp+1,w
  3516  02CA  1D03               	btfss	3,2
  3517  02CB  2ADC               	goto	l5119
  3518                           
  3519                           ;protocol.c: 167: printf("$:WHO:%s\n", device_id_);
  3520  02CC  301B               	movlw	low (STR_5| (0+32768))
  3521  02CD  00AF               	movwf	printf@f
  3522  02CE  3084               	movlw	high (STR_5| (0+32768))
  3523  02CF  00B0               	movwf	printf@f+1
  3524  02D0  0021               	movlb	1	; select bank1
  3525  02D1  083F               	movf	(_device_id_+1)^(0+128),w
  3526  02D2  0020               	movlb	0	; select bank0
  3527  02D3  00B2               	movwf	(low ((?_printf| 0+2))+1)
  3528  02D4  0021               	movlb	1	; select bank1
  3529  02D5  083E               	movf	_device_id_^(0+128),w
  3530  02D6  0020               	movlb	0	; select bank0
  3531  02D7  00B1               	movwf	low ((?_printf| 0+2))
  3532  02D8  3180  2068  3182   	fcall	_printf
  3533                           
  3534                           ;protocol.c: 168: } else if (!strncmp(("SAV"), (buf), 3)) {
  3535  02DB  2A3D               	goto	l673
  3536  02DC                     l5119:	
  3537  02DC  309A               	movlw	low (STR_6| (0+32768))
  3538  02DD  0020               	movlb	0	; select bank0
  3539  02DE  00A1               	movwf	strncmp@s1
  3540  02DF  3084               	movlw	high (STR_6| (0+32768))
  3541  02E0  00A2               	movwf	strncmp@s1+1
  3542  02E1  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3543  02E2  00CF               	movwf	??_PROTOCOL_Loop
  3544  02E3  084F               	movf	??_PROTOCOL_Loop,w
  3545  02E4  00A3               	movwf	strncmp@s2
  3546  02E5  3003               	movlw	3
  3547  02E6  00A4               	movwf	strncmp@len
  3548  02E7  3000               	movlw	0
  3549  02E8  00A5               	movwf	strncmp@len+1
  3550  02E9  3187  2764  3182   	fcall	_strncmp
  3551  02EC  0020               	movlb	0	; select bank0
  3552  02ED  0821               	movf	?_strncmp,w
  3553  02EE  0422               	iorwf	?_strncmp+1,w
  3554  02EF  1D03               	btfss	3,2
  3555  02F0  2AF5               	goto	l5123
  3556                           
  3557                           ;protocol.c: 169: PROTOCOL_SAV();
  3558  02F1  318D  2519  3182   	fcall	_PROTOCOL_SAV
  3559                           
  3560                           ;protocol.c: 170: } else if (!strncmp(("STA"), (buf), 3)) {
  3561  02F4  2A3D               	goto	l673
  3562  02F5                     l5123:	
  3563  02F5  3082               	movlw	low (STR_7| (0+32768))
  3564  02F6  0020               	movlb	0	; select bank0
  3565  02F7  00A1               	movwf	strncmp@s1
  3566  02F8  3084               	movlw	high (STR_7| (0+32768))
  3567  02F9  00A2               	movwf	strncmp@s1+1
  3568  02FA  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3569  02FB  00CF               	movwf	??_PROTOCOL_Loop
  3570  02FC  084F               	movf	??_PROTOCOL_Loop,w
  3571  02FD  00A3               	movwf	strncmp@s2
  3572  02FE  3003               	movlw	3
  3573  02FF  00A4               	movwf	strncmp@len
  3574  0300  3000               	movlw	0
  3575  0301  00A5               	movwf	strncmp@len+1
  3576  0302  3187  2764  3182   	fcall	_strncmp
  3577  0305  0020               	movlb	0	; select bank0
  3578  0306  0821               	movf	?_strncmp,w
  3579  0307  0422               	iorwf	?_strncmp+1,w
  3580  0308  1D03               	btfss	3,2
  3581  0309  2B0E               	goto	l5127
  3582                           
  3583                           ;protocol.c: 171: PROTOCOL_STA();
  3584  030A  318C  24DF  3182   	fcall	_PROTOCOL_STA
  3585                           
  3586                           ;protocol.c: 172: } else if (!strncmp(("STP"), (buf), 3)) {
  3587  030D  2A3D               	goto	l673
  3588  030E                     l5127:	
  3589  030E  308E               	movlw	low (STR_8| (0+32768))
  3590  030F  0020               	movlb	0	; select bank0
  3591  0310  00A1               	movwf	strncmp@s1
  3592  0311  3084               	movlw	high (STR_8| (0+32768))
  3593  0312  00A2               	movwf	strncmp@s1+1
  3594  0313  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3595  0314  00CF               	movwf	??_PROTOCOL_Loop
  3596  0315  084F               	movf	??_PROTOCOL_Loop,w
  3597  0316  00A3               	movwf	strncmp@s2
  3598  0317  3003               	movlw	3
  3599  0318  00A4               	movwf	strncmp@len
  3600  0319  3000               	movlw	0
  3601  031A  00A5               	movwf	strncmp@len+1
  3602  031B  3187  2764  3182   	fcall	_strncmp
  3603  031E  0020               	movlb	0	; select bank0
  3604  031F  0821               	movf	?_strncmp,w
  3605  0320  0422               	iorwf	?_strncmp+1,w
  3606  0321  1D03               	btfss	3,2
  3607  0322  2B33               	goto	l5133
  3608                           
  3609                           ;protocol.c: 173: PROTOCOL_STP();
  3610  0323  318C  24CD  3182   	fcall	_PROTOCOL_STP
  3611                           
  3612                           ;protocol.c: 174: printf("*:STP:%s\n", "ACK");
  3613  0326  3025               	movlw	low (STR_9| (0+32768))
  3614  0327  0020               	movlb	0	; select bank0
  3615  0328  00AF               	movwf	printf@f
  3616  0329  3084               	movlw	high (STR_9| (0+32768))
  3617  032A  00B0               	movwf	printf@f+1
  3618  032B  3086               	movlw	low (STR_10| (0+32768))
  3619  032C  00B1               	movwf	low ((?_printf| 0+2))
  3620  032D  3084               	movlw	high (STR_10| (0+32768))
  3621  032E  00B2               	movwf	(low ((?_printf| 0+2))+1)
  3622  032F  3180  2068  3182   	fcall	_printf
  3623                           
  3624                           ;protocol.c: 175: } else if (!strncmp(("SET"), (buf), 3)) {
  3625  0332  2A3D               	goto	l673
  3626  0333                     l5133:	
  3627  0333  3096               	movlw	low (STR_11| (0+32768))
  3628  0334  0020               	movlb	0	; select bank0
  3629  0335  00A1               	movwf	strncmp@s1
  3630  0336  3084               	movlw	high (STR_11| (0+32768))
  3631  0337  00A2               	movwf	strncmp@s1+1
  3632  0338  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3633  0339  00CF               	movwf	??_PROTOCOL_Loop
  3634  033A  084F               	movf	??_PROTOCOL_Loop,w
  3635  033B  00A3               	movwf	strncmp@s2
  3636  033C  3003               	movlw	3
  3637  033D  00A4               	movwf	strncmp@len
  3638  033E  3000               	movlw	0
  3639  033F  00A5               	movwf	strncmp@len+1
  3640  0340  3187  2764  3182   	fcall	_strncmp
  3641  0343  0020               	movlb	0	; select bank0
  3642  0344  0821               	movf	?_strncmp,w
  3643  0345  0422               	iorwf	?_strncmp+1,w
  3644  0346  1D03               	btfss	3,2
  3645  0347  2B52               	goto	l5137
  3646                           
  3647                           ;protocol.c: 176: PROTOCOL_SET(atoi(&buf[4]));
  3648  0348  3024               	movlw	(low ((_buf| (0+256)+4)))& (0+255)
  3649  0349  3186  2615  3182   	fcall	_atoi
  3650  034C  0020               	movlb	0	; select bank0
  3651  034D  0827               	movf	?_atoi,w
  3652  034E  318D  25B8  3182   	fcall	_PROTOCOL_SET
  3653                           
  3654                           ;protocol.c: 177: } else if (!strncmp(("GET"), (buf), 3)) {
  3655  0351  2A3D               	goto	l673
  3656  0352                     l5137:	
  3657  0352  3092               	movlw	low (STR_12| (0+32768))
  3658  0353  0020               	movlb	0	; select bank0
  3659  0354  00A1               	movwf	strncmp@s1
  3660  0355  3084               	movlw	high (STR_12| (0+32768))
  3661  0356  00A2               	movwf	strncmp@s1+1
  3662  0357  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3663  0358  00CF               	movwf	??_PROTOCOL_Loop
  3664  0359  084F               	movf	??_PROTOCOL_Loop,w
  3665  035A  00A3               	movwf	strncmp@s2
  3666  035B  3003               	movlw	3
  3667  035C  00A4               	movwf	strncmp@len
  3668  035D  3000               	movlw	0
  3669  035E  00A5               	movwf	strncmp@len+1
  3670  035F  3187  2764  3182   	fcall	_strncmp
  3671  0362  0020               	movlb	0	; select bank0
  3672  0363  0821               	movf	?_strncmp,w
  3673  0364  0422               	iorwf	?_strncmp+1,w
  3674  0365  1D03               	btfss	3,2
  3675  0366  2B76               	goto	l5141
  3676                           
  3677                           ;protocol.c: 178: printf("$:GET:%d\n", value);
  3678  0367  3007               	movlw	low (STR_13| (0+32768))
  3679  0368  00AF               	movwf	printf@f
  3680  0369  3084               	movlw	high (STR_13| (0+32768))
  3681  036A  00B0               	movwf	printf@f+1
  3682  036B  085D               	movf	_value,w
  3683  036C  00CF               	movwf	??_PROTOCOL_Loop
  3684  036D  01D0               	clrf	??_PROTOCOL_Loop+1
  3685  036E  084F               	movf	??_PROTOCOL_Loop,w
  3686  036F  00B1               	movwf	?_printf+2
  3687  0370  0850               	movf	??_PROTOCOL_Loop+1,w
  3688  0371  00B2               	movwf	?_printf+3
  3689  0372  3180  2068  3182   	fcall	_printf
  3690                           
  3691                           ;protocol.c: 179: } else if (!strncmp(("WDA"), (buf), 3)) {
  3692  0375  2A3D               	goto	l673
  3693  0376                     l5141:	
  3694  0376  307E               	movlw	low (STR_14| (0+32768))
  3695  0377  0020               	movlb	0	; select bank0
  3696  0378  00A1               	movwf	strncmp@s1
  3697  0379  3084               	movlw	high (STR_14| (0+32768))
  3698  037A  00A2               	movwf	strncmp@s1+1
  3699  037B  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3700  037C  00CF               	movwf	??_PROTOCOL_Loop
  3701  037D  084F               	movf	??_PROTOCOL_Loop,w
  3702  037E  00A3               	movwf	strncmp@s2
  3703  037F  3003               	movlw	3
  3704  0380  00A4               	movwf	strncmp@len
  3705  0381  3000               	movlw	0
  3706  0382  00A5               	movwf	strncmp@len+1
  3707  0383  3187  2764  3182   	fcall	_strncmp
  3708  0386  0020               	movlb	0	; select bank0
  3709  0387  0821               	movf	?_strncmp,w
  3710  0388  0422               	iorwf	?_strncmp+1,w
  3711  0389  1D03               	btfss	3,2
  3712  038A  2B9A               	goto	l5147
  3713                           
  3714                           ;protocol.c: 180: device_address = atoi(&buf[4]);
  3715  038B  3024               	movlw	(low ((_buf| (0+256)+4)))& (0+255)
  3716  038C  3186  2615  3182   	fcall	_atoi
  3717  038F  0020               	movlb	0	; select bank0
  3718  0390  0827               	movf	?_atoi,w
  3719  0391  00CF               	movwf	??_PROTOCOL_Loop
  3720  0392  084F               	movf	??_PROTOCOL_Loop,w
  3721  0393  0021               	movlb	1	; select bank1
  3722  0394  00E3               	movwf	PROTOCOL_Loop@device_address^(0+128)
  3723                           
  3724                           ;protocol.c: 181: PROTOCOL_Write_Device_Address(device_address);
  3725  0395  0863               	movf	PROTOCOL_Loop@device_address^(0+128),w
  3726  0396  318D  2567  3182   	fcall	_PROTOCOL_Write_Device_Address
  3727                           
  3728                           ;protocol.c: 182: } else if (!strncmp(("RDA"), (buf), 3)) {
  3729  0399  2A3D               	goto	l673
  3730  039A                     l5147:	
  3731  039A  307A               	movlw	low (STR_15| (0+32768))
  3732  039B  0020               	movlb	0	; select bank0
  3733  039C  00A1               	movwf	strncmp@s1
  3734  039D  3084               	movlw	high (STR_15| (0+32768))
  3735  039E  00A2               	movwf	strncmp@s1+1
  3736  039F  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3737  03A0  00CF               	movwf	??_PROTOCOL_Loop
  3738  03A1  084F               	movf	??_PROTOCOL_Loop,w
  3739  03A2  00A3               	movwf	strncmp@s2
  3740  03A3  3003               	movlw	3
  3741  03A4  00A4               	movwf	strncmp@len
  3742  03A5  3000               	movlw	0
  3743  03A6  00A5               	movwf	strncmp@len+1
  3744  03A7  3187  2764  3182   	fcall	_strncmp
  3745  03AA  0020               	movlb	0	; select bank0
  3746  03AB  0821               	movf	?_strncmp,w
  3747  03AC  0422               	iorwf	?_strncmp+1,w
  3748  03AD  1D03               	btfss	3,2
  3749  03AE  2BC9               	goto	l5153
  3750                           
  3751                           ;protocol.c: 183: device_address = PROTOCOL_Read_Device_Address();
  3752  03AF  318C  24CA  3182   	fcall	_PROTOCOL_Read_Device_Address
  3753  03B2  0020               	movlb	0	; select bank0
  3754  03B3  00CF               	movwf	??_PROTOCOL_Loop
  3755  03B4  084F               	movf	??_PROTOCOL_Loop,w
  3756  03B5  0021               	movlb	1	; select bank1
  3757  03B6  00E3               	movwf	PROTOCOL_Loop@device_address^(0+128)
  3758                           
  3759                           ;protocol.c: 184: printf("$:RDA:%d\n", device_address);
  3760  03B7  30FD               	movlw	low (STR_16| (0+32768))
  3761  03B8  0020               	movlb	0	; select bank0
  3762  03B9  00AF               	movwf	printf@f
  3763  03BA  3083               	movlw	high (STR_16| (0+32768))
  3764  03BB  00B0               	movwf	printf@f+1
  3765  03BC  0021               	movlb	1	; select bank1
  3766  03BD  0863               	movf	PROTOCOL_Loop@device_address^(0+128),w
  3767  03BE  0020               	movlb	0	; select bank0
  3768  03BF  00CF               	movwf	??_PROTOCOL_Loop
  3769  03C0  01D0               	clrf	??_PROTOCOL_Loop+1
  3770  03C1  084F               	movf	??_PROTOCOL_Loop,w
  3771  03C2  00B1               	movwf	?_printf+2
  3772  03C3  0850               	movf	??_PROTOCOL_Loop+1,w
  3773  03C4  00B2               	movwf	?_printf+3
  3774  03C5  3180  2068  3182   	fcall	_printf
  3775                           
  3776                           ;protocol.c: 185: } else {
  3777  03C8  2A3D               	goto	l673
  3778  03C9                     l5153:	
  3779                           
  3780                           ;protocol.c: 186: PROTOCOL_EXT(buf);
  3781  03C9  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3782  03CA  3180  2002  3182   	fcall	_PROTOCOL_EXT
  3783  03CD  2A3D               	goto	l673
  3784  03CE                     __end_of_PROTOCOL_Loop:	
  3785                           
  3786                           	psect	text6
  3787  0764                     __ptext6:	
  3788 ;; *************** function _strncmp *****************
  3789 ;; Defined at:
  3790 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strncmp.c"
  3791 ;; Parameters:    Size  Location     Type
  3792 ;;  s1              2    1[BANK0 ] PTR const unsigned char 
  3793 ;;		 -> STR_15(4), STR_14(4), STR_12(4), STR_11(4), 
  3794 ;;		 -> STR_8(4), STR_7(4), STR_6(4), STR_4(4), 
  3795 ;;  s2              1    3[BANK0 ] PTR const unsigned char 
  3796 ;;		 -> buf(48), 
  3797 ;;  len             2    4[BANK0 ] unsigned int 
  3798 ;; Auto vars:     Size  Location     Type
  3799 ;;		None
  3800 ;; Return value:  Size  Location     Type
  3801 ;;                  2    1[BANK0 ] int 
  3802 ;; Registers used:
  3803 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  3804 ;; Tracked objects:
  3805 ;;		On entry : 0/0
  3806 ;;		On exit  : 0/0
  3807 ;;		Unchanged: 0/0
  3808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3809 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3811 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3812 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3813 ;;Total ram usage:        7 bytes
  3814 ;; Hardware stack levels used:    1
  3815 ;; Hardware stack levels required when called:    5
  3816 ;; This function calls:
  3817 ;;		Nothing
  3818 ;; This function is called by:
  3819 ;;		_PROTOCOL_Loop
  3820 ;; This function uses a non-reentrant model
  3821 ;;
  3822                           
  3823                           
  3824                           ;psect for function _strncmp
  3825  0764                     _strncmp:	
  3826  0764                     l4037:	
  3827                           ;incstack = 0
  3828                           ; Regs used in _strncmp: [wreg-fsr1h+status,2+status,0+pclath]
  3829                           
  3830  0764  3001               	movlw	1
  3831  0765  0020               	movlb	0	; select bank0
  3832  0766  02A4               	subwf	strncmp@len,f
  3833  0767  3000               	movlw	0
  3834  0768  3BA5               	subwfb	strncmp@len+1,f
  3835  0769  0A24               	incf	strncmp@len,w
  3836  076A  1903               	btfsc	3,2
  3837  076B  0A25               	incf	strncmp@len+1,w
  3838  076C  1903               	btfsc	3,2
  3839  076D  2FA3               	goto	l4039
  3840  076E  0020               	movlb	0	; select bank0
  3841  076F  0821               	movf	strncmp@s1,w
  3842  0770  0084               	movwf	4
  3843  0771  0822               	movf	strncmp@s1+1,w
  3844  0772  0085               	movwf	5
  3845  0773  0012               	moviw fsr0++
  3846  0774  1903               	btfsc	3,2
  3847  0775  2F82               	goto	l4029
  3848  0776  0823               	movf	strncmp@s2,w
  3849  0777  0086               	movwf	6
  3850  0778  3001               	movlw	1	; select bank2/3
  3851  0779  0087               	movwf	7
  3852  077A  0821               	movf	strncmp@s1,w
  3853  077B  0084               	movwf	4
  3854  077C  0822               	movf	strncmp@s1+1,w
  3855  077D  0085               	movwf	5
  3856  077E  0800               	movf	0,w	;code access
  3857  077F  0601               	xorwf	1,w
  3858  0780  1903               	skipnz
  3859  0781  2F9A               	goto	l4033
  3860  0782                     l4029:	
  3861  0782  0823               	movf	strncmp@s2,w
  3862  0783  0086               	movwf	6
  3863  0784  3001               	movlw	1	; select bank2/3
  3864  0785  0087               	movwf	7
  3865  0786  0801               	movf	1,w
  3866  0787  00A6               	movwf	??_strncmp
  3867  0788  01A7               	clrf	??_strncmp+1
  3868  0789  09A6               	comf	??_strncmp,f
  3869  078A  09A7               	comf	??_strncmp+1,f
  3870  078B  0AA6               	incf	??_strncmp,f
  3871  078C  1903               	skipnz
  3872  078D  0AA7               	incf	??_strncmp+1,f
  3873  078E  0821               	movf	strncmp@s1,w
  3874  078F  0084               	movwf	4
  3875  0790  0822               	movf	strncmp@s1+1,w
  3876  0791  0085               	movwf	5
  3877  0792  0800               	movf	0,w	;code access
  3878  0793  0726               	addwf	??_strncmp,w
  3879  0794  00A1               	movwf	?_strncmp
  3880  0795  0827               	movf	??_strncmp+1,w
  3881  0796  1803               	skipnc
  3882  0797  0A27               	incf	??_strncmp+1,w
  3883  0798  00A2               	movwf	?_strncmp+1
  3884  0799  0008               	return
  3885  079A                     l4033:	
  3886  079A  3001               	movlw	1
  3887  079B  07A1               	addwf	strncmp@s1,f
  3888  079C  3000               	movlw	0
  3889  079D  3DA2               	addwfc	strncmp@s1+1,f
  3890  079E  3001               	movlw	1
  3891  079F  00A6               	movwf	??_strncmp
  3892  07A0  0826               	movf	??_strncmp,w
  3893  07A1  07A3               	addwf	strncmp@s2,f
  3894  07A2  2F64               	goto	l4037
  3895  07A3                     l4039:	
  3896  07A3  01A1               	clrf	?_strncmp
  3897  07A4  01A2               	clrf	?_strncmp+1
  3898  07A5  0008               	return
  3899  07A6                     __end_of_strncmp:	
  3900                           
  3901                           	psect	text7
  3902  0564                     __ptext7:	
  3903 ;; *************** function _loop_func *****************
  3904 ;; Defined at:
  3905 ;;		line 81 in file "main.c"
  3906 ;; Parameters:    Size  Location     Type
  3907 ;;		None
  3908 ;; Auto vars:     Size  Location     Type
  3909 ;;  v               2   44[BANK0 ] unsigned int 
  3910 ;;  out             2   41[BANK0 ] unsigned int 
  3911 ;;  i               1   46[BANK0 ] unsigned char 
  3912 ;;  transition_d    1   43[BANK0 ] unsigned char 
  3913 ;; Return value:  Size  Location     Type
  3914 ;;                  1    wreg      void 
  3915 ;; Registers used:
  3916 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3917 ;; Tracked objects:
  3918 ;;		On entry : 0/0
  3919 ;;		On exit  : 0/0
  3920 ;;		Unchanged: 0/0
  3921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3923 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3924 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3925 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3926 ;;Total ram usage:        7 bytes
  3927 ;; Hardware stack levels used:    1
  3928 ;; Hardware stack levels required when called:    9
  3929 ;; This function calls:
  3930 ;;		_ADC_GetConversionResult
  3931 ;;		_ADC_IsConversionDone
  3932 ;;		_ADC_SelectChannel
  3933 ;;		_ADC_StartConversion
  3934 ;;		_PROTOCOL_I2C_Send_uint8_t
  3935 ;;		_abs
  3936 ;;		_led_blink
  3937 ;; This function is called by:
  3938 ;;		_main
  3939 ;;		_PROTOCOL_Loop
  3940 ;; This function uses a non-reentrant model
  3941 ;;
  3942                           
  3943                           
  3944                           ;psect for function _loop_func
  3945  0564                     _loop_func:	
  3946                           
  3947                           ;main.c: 82: uint8_t i;
  3948                           ;main.c: 83: bool transition_detected = 0;
  3949                           
  3950                           ;incstack = 0
  3951                           ; Regs used in _loop_func: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3952  0564  0020               	movlb	0	; select bank0
  3953  0565  01CB               	clrf	loop_func@transition_detected
  3954                           
  3955                           ;main.c: 84: for (i=0; i < 6; i++) {
  3956  0566  01CE               	clrf	loop_func@i
  3957  0567  3006               	movlw	6
  3958  0568  024E               	subwf	loop_func@i,w
  3959  0569  1803               	btfsc	3,0
  3960  056A  2E05               	goto	l4013
  3961  056B                     l3967:	
  3962                           
  3963                           ;main.c: 85: if (analog_in[i] == 0) continue;
  3964  056B  084E               	movf	loop_func@i,w
  3965  056C  3EB6               	addlw	(low (_analog_in| 0))& (0+255)
  3966  056D  0086               	movwf	6
  3967  056E  0187               	clrf	7
  3968  056F  0801               	movf	1,w
  3969  0570  1903               	btfsc	3,2
  3970  0571  2DFD               	goto	l4009
  3971                           
  3972                           ;main.c: 87: ADC_SelectChannel(analog_in[i]);
  3973  0572  084E               	movf	loop_func@i,w
  3974  0573  3EB6               	addlw	(low (_analog_in| 0))& (0+255)
  3975  0574  0086               	movwf	6
  3976  0575  0187               	clrf	7
  3977  0576  0801               	movf	1,w
  3978  0577  318D  2594  3185   	fcall	_ADC_SelectChannel
  3979                           
  3980                           ;main.c: 89: ADC_StartConversion();
  3981  057A  318C  24D0  3185   	fcall	_ADC_StartConversion
  3982  057D                     l3975:	
  3983                           ;main.c: 90: while(!ADC_IsConversionDone());
  3984                           
  3985  057D  318D  2501  3185   	fcall	_ADC_IsConversionDone
  3986  0580  3A00               	xorlw	0
  3987  0581  1903               	skipnz
  3988  0582  2D7D               	goto	l3975
  3989                           
  3990                           ;main.c: 91: adc_result_t out = ADC_GetConversionResult();
  3991  0583  318D  2522  3185   	fcall	_ADC_GetConversionResult
  3992  0586  0020               	movlb	0	; select bank0
  3993  0587  0822               	movf	?_ADC_GetConversionResult+1,w
  3994  0588  00CA               	movwf	loop_func@out+1
  3995  0589  0821               	movf	?_ADC_GetConversionResult,w
  3996  058A  00C9               	movwf	loop_func@out
  3997                           
  3998                           ;main.c: 92: uint16_t v = abs(out - 511);
  3999  058B  0849               	movf	loop_func@out,w
  4000  058C  3E01               	addlw	1
  4001  058D  00A1               	movwf	abs@a
  4002  058E  30FE               	movlw	254
  4003  058F  3D4A               	addwfc	loop_func@out+1,w
  4004  0590  00A2               	movwf	abs@a+1
  4005  0591  318D  2585  3185   	fcall	_abs
  4006  0594  0020               	movlb	0	; select bank0
  4007  0595  0822               	movf	?_abs+1,w
  4008  0596  00CD               	movwf	loop_func@v+1
  4009  0597  0821               	movf	?_abs,w
  4010  0598  00CC               	movwf	loop_func@v
  4011                           
  4012                           ;main.c: 108: switch (position[i]) {
  4013  0599  2DF1               	goto	l4007
  4014  059A                     l3981:	
  4015                           ;main.c: 109: case 0:
  4016                           
  4017                           
  4018                           ;main.c: 110: if (v >= 50) count[i]++;
  4019  059A  3000               	movlw	0
  4020  059B  024D               	subwf	loop_func@v+1,w
  4021  059C  3032               	movlw	50
  4022  059D  1903               	skipnz
  4023  059E  024C               	subwf	loop_func@v,w
  4024  059F  1C03               	skipc
  4025  05A0  2DAA               	goto	l3985
  4026  05A1  3001               	movlw	1
  4027  05A2  00C8               	movwf	??_loop_func
  4028  05A3  084E               	movf	loop_func@i,w
  4029  05A4  3EB0               	addlw	(low (_count| 0))& (0+255)
  4030  05A5  0086               	movwf	6
  4031  05A6  0187               	clrf	7
  4032  05A7  0848               	movf	??_loop_func,w
  4033  05A8  0781               	addwf	1,f
  4034  05A9  2DAF               	goto	l463
  4035  05AA                     l3985:	
  4036                           
  4037                           ;main.c: 111: else count[i] = 0;
  4038  05AA  084E               	movf	loop_func@i,w
  4039  05AB  3EB0               	addlw	(low (_count| 0))& (0+255)
  4040  05AC  0086               	movwf	6
  4041  05AD  0187               	clrf	7
  4042  05AE  0181               	clrf	1
  4043  05AF                     l463:	
  4044                           
  4045                           ;main.c: 113: if (count[i] >= 250) {
  4046  05AF  084E               	movf	loop_func@i,w
  4047  05B0  3EB0               	addlw	(low (_count| 0))& (0+255)
  4048  05B1  0086               	movwf	6
  4049  05B2  0187               	clrf	7
  4050  05B3  30FA               	movlw	250
  4051  05B4  0201               	subwf	1,w
  4052  05B5  1C03               	skipc
  4053  05B6  2DFD               	goto	l4009
  4054                           
  4055                           ;main.c: 114: count[i] = 0;
  4056  05B7  084E               	movf	loop_func@i,w
  4057  05B8  3EB0               	addlw	(low (_count| 0))& (0+255)
  4058  05B9  0086               	movwf	6
  4059  05BA  0187               	clrf	7
  4060  05BB  0181               	clrf	1
  4061                           
  4062                           ;main.c: 115: position[i] = 1;
  4063  05BC  084E               	movf	loop_func@i,w
  4064  05BD  3ED3               	addlw	(low (_position| 0))& (0+255)
  4065  05BE  0086               	movwf	6
  4066  05BF  0187               	clrf	7
  4067  05C0  0181               	clrf	1
  4068  05C1  0A81               	incf	1,f
  4069  05C2  2DEA               	goto	L2
  4070  05C3                     l3993:	
  4071                           ;main.c: 121: case 1:
  4072                           
  4073                           ;main.c: 118: }
  4074                           ;main.c: 119: break;
  4075                           
  4076                           ;main.c: 117: transition_detected = 1;
  4077                           
  4078                           ;main.c: 116: led_blink();
  4079                           
  4080                           
  4081                           ;main.c: 122: if (v < 50) count[i]++;
  4082  05C3  3000               	movlw	0
  4083  05C4  024D               	subwf	loop_func@v+1,w
  4084  05C5  3032               	movlw	50
  4085  05C6  1903               	skipnz
  4086  05C7  024C               	subwf	loop_func@v,w
  4087  05C8  1803               	skipnc
  4088  05C9  2DD3               	goto	l3997
  4089  05CA  3001               	movlw	1
  4090  05CB  00C8               	movwf	??_loop_func
  4091  05CC  084E               	movf	loop_func@i,w
  4092  05CD  3EB0               	addlw	(low (_count| 0))& (0+255)
  4093  05CE  0086               	movwf	6
  4094  05CF  0187               	clrf	7
  4095  05D0  0848               	movf	??_loop_func,w
  4096  05D1  0781               	addwf	1,f
  4097  05D2  2DD8               	goto	l468
  4098  05D3                     l3997:	
  4099                           
  4100                           ;main.c: 123: else count[i] = 0;
  4101  05D3  084E               	movf	loop_func@i,w
  4102  05D4  3EB0               	addlw	(low (_count| 0))& (0+255)
  4103  05D5  0086               	movwf	6
  4104  05D6  0187               	clrf	7
  4105  05D7  0181               	clrf	1
  4106  05D8                     l468:	
  4107                           
  4108                           ;main.c: 125: if (count[i] >= 250) {
  4109  05D8  084E               	movf	loop_func@i,w
  4110  05D9  3EB0               	addlw	(low (_count| 0))& (0+255)
  4111  05DA  0086               	movwf	6
  4112  05DB  0187               	clrf	7
  4113  05DC  30FA               	movlw	250
  4114  05DD  0201               	subwf	1,w
  4115  05DE  1C03               	skipc
  4116  05DF  2DFD               	goto	l4009
  4117                           
  4118                           ;main.c: 126: count[i] = 0;
  4119  05E0  084E               	movf	loop_func@i,w
  4120  05E1  3EB0               	addlw	(low (_count| 0))& (0+255)
  4121  05E2  0086               	movwf	6
  4122  05E3  0187               	clrf	7
  4123  05E4  0181               	clrf	1
  4124                           
  4125                           ;main.c: 127: position[i] = 0;
  4126  05E5  084E               	movf	loop_func@i,w
  4127  05E6  3ED3               	addlw	(low (_position| 0))& (0+255)
  4128  05E7  0086               	movwf	6
  4129  05E8  0187               	clrf	7
  4130  05E9  0181               	clrf	1
  4131  05EA                     L2:	
  4132                           
  4133                           ;main.c: 128: led_blink();
  4134  05EA  318D  254B  3185   	fcall	_led_blink
  4135                           
  4136                           ;main.c: 129: transition_detected = 1;
  4137  05ED  0020               	movlb	0	; select bank0
  4138  05EE  01CB               	clrf	loop_func@transition_detected
  4139  05EF  0ACB               	incf	loop_func@transition_detected,f
  4140                           
  4141                           ;main.c: 132: }
  4142                           
  4143                           ;main.c: 130: }
  4144                           ;main.c: 131: break;
  4145  05F0  2DFD               	goto	l4009
  4146  05F1                     l4007:	
  4147  05F1  084E               	movf	loop_func@i,w
  4148  05F2  3ED3               	addlw	(low (_position| 0))& (0+255)
  4149  05F3  0086               	movwf	6
  4150  05F4  0187               	clrf	7
  4151  05F5  0801               	movf	1,w
  4152                           
  4153                           ; Switch size 1, requested type "space"
  4154                           ; Number of cases is 2, Range of values is 0 to 1
  4155                           ; switch strategies available:
  4156                           ; Name         Instructions Cycles
  4157                           ; simple_byte            7     4 (average)
  4158                           ; direct_byte           10     6 (fixed)
  4159                           ; jumptable            260     6 (fixed)
  4160                           ;	Chosen strategy is simple_byte
  4161  05F6  3A00               	xorlw	0	; case 0
  4162  05F7  1903               	skipnz
  4163  05F8  2D9A               	goto	l3981
  4164  05F9  3A01               	xorlw	1	; case 1
  4165  05FA  1903               	skipnz
  4166  05FB  2DC3               	goto	l3993
  4167  05FC  2DFD               	goto	l4009
  4168  05FD                     l4009:	
  4169  05FD  3001               	movlw	1
  4170  05FE  00C8               	movwf	??_loop_func
  4171  05FF  0848               	movf	??_loop_func,w
  4172  0600  07CE               	addwf	loop_func@i,f
  4173  0601  3006               	movlw	6
  4174  0602  024E               	subwf	loop_func@i,w
  4175  0603  1C03               	skipc
  4176  0604  2D6B               	goto	l3967
  4177  0605                     l4013:	
  4178                           
  4179                           ;main.c: 133: }
  4180                           ;main.c: 134: if (transition_detected) {
  4181  0605  084B               	movf	loop_func@transition_detected,w
  4182  0606  1903               	btfsc	3,2
  4183  0607  2E10               	goto	l4017
  4184                           
  4185                           ;main.c: 135: PROTOCOL_I2C_Send_uint8_t(6, position);
  4186  0608  30D3               	movlw	(low (_position| 0))& (0+255)
  4187  0609  00C8               	movwf	??_loop_func
  4188  060A  0848               	movf	??_loop_func,w
  4189  060B  00C3               	movwf	PROTOCOL_I2C_Send_uint8_t@pbuffer
  4190  060C  3006               	movlw	6
  4191  060D  3186  26DA  3185   	fcall	_PROTOCOL_I2C_Send_uint8_t
  4192  0610                     l4017:	
  4193                           
  4194                           ;main.c: 136: }
  4195                           ;main.c: 137: _delay((unsigned long)((1000)*(4000000/4000000.0)));
  4196  0610  30C8               	movlw	200
  4197  0611                     u4937:	
  4198  0611  3200               	nop2
  4199  0612  0B89               	decfsz	9,f
  4200  0613  2E11               	goto	u4937
  4201  0614  0008               	return
  4202  0615                     __end_of_loop_func:	
  4203                           
  4204                           	psect	text8
  4205  0D4B                     __ptext8:	
  4206 ;; *************** function _led_blink *****************
  4207 ;; Defined at:
  4208 ;;		line 52 in file "main.c"
  4209 ;; Parameters:    Size  Location     Type
  4210 ;;		None
  4211 ;; Auto vars:     Size  Location     Type
  4212 ;;		None
  4213 ;; Return value:  Size  Location     Type
  4214 ;;                  1    wreg      void 
  4215 ;; Registers used:
  4216 ;;		wreg
  4217 ;; Tracked objects:
  4218 ;;		On entry : 0/0
  4219 ;;		On exit  : 0/0
  4220 ;;		Unchanged: 0/0
  4221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4222 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4223 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4224 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4225 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4226 ;;Total ram usage:        1 bytes
  4227 ;; Hardware stack levels used:    1
  4228 ;; Hardware stack levels required when called:    5
  4229 ;; This function calls:
  4230 ;;		Nothing
  4231 ;; This function is called by:
  4232 ;;		_loop_func
  4233 ;; This function uses a non-reentrant model
  4234 ;;
  4235                           
  4236                           
  4237                           ;psect for function _led_blink
  4238  0D4B                     _led_blink:	
  4239                           
  4240                           ;main.c: 53: LATCbits.LATC7 = 0;
  4241                           
  4242                           ;incstack = 0
  4243                           ; Regs used in _led_blink: [wreg]
  4244  0D4B  0022               	movlb	2	; select bank2
  4245  0D4C  138E               	bcf	14,7	;volatile
  4246                           
  4247                           ;main.c: 54: _delay((unsigned long)((3)*(4000000/4000.0)));
  4248  0D4D  3004               	movlw	4
  4249  0D4E  0020               	movlb	0	; select bank0
  4250  0D4F  00A1               	movwf	??_led_blink
  4251  0D50  30E4               	movlw	228
  4252  0D51                     u4947:	
  4253  0D51  0B89               	decfsz	9,f
  4254  0D52  2D51               	goto	u4947
  4255  0D53  0BA1               	decfsz	??_led_blink,f
  4256  0D54  2D51               	goto	u4947
  4257  0D55  0000               	nop
  4258                           
  4259                           ;main.c: 55: LATCbits.LATC7 = 1;
  4260  0D56  0022               	movlb	2	; select bank2
  4261  0D57  178E               	bsf	14,7	;volatile
  4262  0D58  0008               	return
  4263  0D59                     __end_of_led_blink:	
  4264                           
  4265                           	psect	text9
  4266  0D85                     __ptext9:	
  4267 ;; *************** function _abs *****************
  4268 ;; Defined at:
  4269 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\abs.c"
  4270 ;; Parameters:    Size  Location     Type
  4271 ;;  a               2    1[BANK0 ] int 
  4272 ;; Auto vars:     Size  Location     Type
  4273 ;;		None
  4274 ;; Return value:  Size  Location     Type
  4275 ;;                  2    1[BANK0 ] int 
  4276 ;; Registers used:
  4277 ;;		wreg, status,2, status,0
  4278 ;; Tracked objects:
  4279 ;;		On entry : 0/0
  4280 ;;		On exit  : 0/0
  4281 ;;		Unchanged: 0/0
  4282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4283 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4284 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4285 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4286 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4287 ;;Total ram usage:        4 bytes
  4288 ;; Hardware stack levels used:    1
  4289 ;; Hardware stack levels required when called:    5
  4290 ;; This function calls:
  4291 ;;		Nothing
  4292 ;; This function is called by:
  4293 ;;		_loop_func
  4294 ;; This function uses a non-reentrant model
  4295 ;;
  4296                           
  4297                           
  4298                           ;psect for function _abs
  4299  0D85                     _abs:	
  4300                           
  4301                           ;incstack = 0
  4302                           ; Regs used in _abs: [wreg+status,2+status,0]
  4303  0D85  0020               	movlb	0	; select bank0
  4304  0D86  1FA2               	btfss	abs@a+1,7
  4305  0D87  0008               	return
  4306  0D88  0921               	comf	abs@a,w
  4307  0D89  00A3               	movwf	??_abs
  4308  0D8A  0922               	comf	abs@a+1,w
  4309  0D8B  00A4               	movwf	??_abs+1
  4310  0D8C  0AA3               	incf	??_abs,f
  4311  0D8D  1903               	skipnz
  4312  0D8E  0AA4               	incf	??_abs+1,f
  4313  0D8F  0823               	movf	??_abs,w
  4314  0D90  00A1               	movwf	?_abs
  4315  0D91  0824               	movf	??_abs+1,w
  4316  0D92  00A2               	movwf	?_abs+1
  4317  0D93  0008               	return
  4318  0D94                     __end_of_abs:	
  4319                           
  4320                           	psect	text10
  4321  06DA                     __ptext10:	
  4322 ;; *************** function _PROTOCOL_I2C_Send_uint8_t *****************
  4323 ;; Defined at:
  4324 ;;		line 292 in file "protocol.c"
  4325 ;; Parameters:    Size  Location     Type
  4326 ;;  length          1    wreg     unsigned char 
  4327 ;;  pbuffer         1   35[BANK0 ] PTR unsigned char 
  4328 ;;		 -> PROTOCOL_Send_uint8_t@pbuf(1), position(6), 
  4329 ;; Auto vars:     Size  Location     Type
  4330 ;;  length          1   39[BANK0 ] unsigned char 
  4331 ;; Return value:  Size  Location     Type
  4332 ;;                  1    wreg      void 
  4333 ;; Registers used:
  4334 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4335 ;; Tracked objects:
  4336 ;;		On entry : 0/0
  4337 ;;		On exit  : 0/0
  4338 ;;		Unchanged: 0/0
  4339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4340 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4341 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4342 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4343 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4344 ;;Total ram usage:        5 bytes
  4345 ;; Hardware stack levels used:    1
  4346 ;; Hardware stack levels required when called:    8
  4347 ;; This function calls:
  4348 ;;		_PROTOCOL_I2C_Set_TLV
  4349 ;;		_printf
  4350 ;; This function is called by:
  4351 ;;		_loop_func
  4352 ;; This function uses a non-reentrant model
  4353 ;;
  4354                           
  4355                           
  4356                           ;psect for function _PROTOCOL_I2C_Send_uint8_t
  4357  06DA                     _PROTOCOL_I2C_Send_uint8_t:	
  4358                           
  4359                           ;incstack = 0
  4360                           ; Regs used in _PROTOCOL_I2C_Send_uint8_t: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4361                           ;PROTOCOL_I2C_Send_uint8_t@length stored from wreg
  4362  06DA  0020               	movlb	0	; select bank0
  4363  06DB  00C7               	movwf	PROTOCOL_I2C_Send_uint8_t@length
  4364                           
  4365                           ;protocol.c: 293: if (backplane_slave_enabled) {
  4366  06DC  0856               	movf	_backplane_slave_enabled,w
  4367  06DD  1903               	btfsc	3,2
  4368  06DE  2EEB               	goto	l3813
  4369                           
  4370                           ;protocol.c: 294: PROTOCOL_I2C_Set_TLV(0x01, length, &pbuffer[0]);
  4371  06DF  0847               	movf	PROTOCOL_I2C_Send_uint8_t@length,w
  4372  06E0  00C4               	movwf	??_PROTOCOL_I2C_Send_uint8_t
  4373  06E1  0844               	movf	??_PROTOCOL_I2C_Send_uint8_t,w
  4374  06E2  00A1               	movwf	PROTOCOL_I2C_Set_TLV@length
  4375  06E3  0843               	movf	PROTOCOL_I2C_Send_uint8_t@pbuffer,w
  4376  06E4  00A2               	movwf	PROTOCOL_I2C_Set_TLV@pbuffer
  4377  06E5  3000               	movlw	0
  4378  06E6  00A3               	movwf	PROTOCOL_I2C_Set_TLV@pbuffer+1
  4379  06E7  3001               	movlw	1
  4380  06E8  318E  26D0         	fcall	_PROTOCOL_I2C_Set_TLV
  4381                           
  4382                           ;protocol.c: 295: } else {
  4383  06EA  0008               	return
  4384  06EB                     l3813:	
  4385                           
  4386                           ;protocol.c: 296: length--;
  4387  06EB  3001               	movlw	1
  4388  06EC  0020               	movlb	0	; select bank0
  4389  06ED  02C7               	subwf	PROTOCOL_I2C_Send_uint8_t@length,f
  4390                           
  4391                           ;protocol.c: 297: for(i=0; i<length; i++) printf("%d,", pbuffer[i]);
  4392  06EE  01D5               	clrf	_i
  4393  06EF                     l3821:	
  4394  06EF  0847               	movf	PROTOCOL_I2C_Send_uint8_t@length,w
  4395  06F0  0255               	subwf	_i,w
  4396  06F1  1803               	btfsc	3,0
  4397  06F2  2F0D               	goto	l3823
  4398  06F3  3072               	movlw	low (STR_22| (0+32768))
  4399  06F4  00AF               	movwf	printf@f
  4400  06F5  3084               	movlw	high (STR_22| (0+32768))
  4401  06F6  00B0               	movwf	printf@f+1
  4402  06F7  0855               	movf	_i,w
  4403  06F8  0743               	addwf	PROTOCOL_I2C_Send_uint8_t@pbuffer,w
  4404  06F9  00C4               	movwf	??_PROTOCOL_I2C_Send_uint8_t
  4405  06FA  0844               	movf	??_PROTOCOL_I2C_Send_uint8_t,w
  4406  06FB  0086               	movwf	6
  4407  06FC  0187               	clrf	7
  4408  06FD  0801               	movf	1,w
  4409  06FE  00C5               	movwf	??_PROTOCOL_I2C_Send_uint8_t+1
  4410  06FF  01C6               	clrf	??_PROTOCOL_I2C_Send_uint8_t+2
  4411  0700  0845               	movf	??_PROTOCOL_I2C_Send_uint8_t+1,w
  4412  0701  00B1               	movwf	?_printf+2
  4413  0702  0846               	movf	??_PROTOCOL_I2C_Send_uint8_t+2,w
  4414  0703  00B2               	movwf	?_printf+3
  4415  0704  3180  2068  3186   	fcall	_printf
  4416  0707  3001               	movlw	1
  4417  0708  0020               	movlb	0	; select bank0
  4418  0709  00C4               	movwf	??_PROTOCOL_I2C_Send_uint8_t
  4419  070A  0844               	movf	??_PROTOCOL_I2C_Send_uint8_t,w
  4420  070B  07D5               	addwf	_i,f
  4421  070C  2EEF               	goto	l3821
  4422  070D                     l3823:	
  4423                           
  4424                           ;protocol.c: 298: printf("%d\n", pbuffer[i]);
  4425  070D  3003               	movlw	low ((STR_16+6)| (0+32768))
  4426  070E  00AF               	movwf	printf@f
  4427  070F  3084               	movlw	high ((STR_16+6)| (0+32768))
  4428  0710  00B0               	movwf	printf@f+1
  4429  0711  0855               	movf	_i,w
  4430  0712  0743               	addwf	PROTOCOL_I2C_Send_uint8_t@pbuffer,w
  4431  0713  00C4               	movwf	??_PROTOCOL_I2C_Send_uint8_t
  4432  0714  0844               	movf	??_PROTOCOL_I2C_Send_uint8_t,w
  4433  0715  0086               	movwf	6
  4434  0716  0187               	clrf	7
  4435  0717  0801               	movf	1,w
  4436  0718  00C5               	movwf	??_PROTOCOL_I2C_Send_uint8_t+1
  4437  0719  01C6               	clrf	??_PROTOCOL_I2C_Send_uint8_t+2
  4438  071A  0845               	movf	??_PROTOCOL_I2C_Send_uint8_t+1,w
  4439  071B  00B1               	movwf	?_printf+2
  4440  071C  0846               	movf	??_PROTOCOL_I2C_Send_uint8_t+2,w
  4441  071D  00B2               	movwf	?_printf+3
  4442  071E  3180  2068         	fcall	_printf
  4443  0720  0008               	return
  4444  0721                     __end_of_PROTOCOL_I2C_Send_uint8_t:	
  4445                           
  4446                           	psect	text11
  4447  0068                     __ptext11:	
  4448 ;; *************** function _printf *****************
  4449 ;; Defined at:
  4450 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  4451 ;; Parameters:    Size  Location     Type
  4452 ;;  f               2   15[BANK0 ] PTR const unsigned char 
  4453 ;;		 -> STR_48(10), STR_47(9), STR_46(10), STR_45(9), 
  4454 ;;		 -> STR_44(4), STR_43(4), STR_42(4), STR_41(4), 
  4455 ;;		 -> STR_40(4), STR_39(4), STR_38(4), STR_37(4), 
  4456 ;;		 -> STR_36(14), STR_35(9), STR_34(10), STR_33(9), 
  4457 ;;		 -> STR_32(10), STR_31(9), STR_30(7), STR_29(4), 
  4458 ;;		 -> STR_28(4), STR_27(9), STR_26(4), STR_25(4), 
  4459 ;;		 -> STR_24(10), STR_23(4), STR_22(4), STR_21(8), 
  4460 ;;		 -> STR_20(4), STR_19(4), STR_18(9), STR_17(6), 
  4461 ;;		 -> STR_16(10), STR_13(10), STR_9(10), STR_5(10), 
  4462 ;;		 -> STR_3(5), 
  4463 ;; Auto vars:     Size  Location     Type
  4464 ;;  tmpval          4    0        struct .
  4465 ;;  width           2   32[BANK0 ] int 
  4466 ;;  len             2   29[BANK0 ] unsigned int 
  4467 ;;  val             2   27[BANK0 ] unsigned int 
  4468 ;;  cp              2   24[BANK0 ] PTR const unsigned char 
  4469 ;;		 -> STR_10(4), buf(48), STR_2(7), ROM(8192), 
  4470 ;;		 -> printf@c(1), STR_1(17), 
  4471 ;;  c               1   34[BANK0 ] char 
  4472 ;;  flag            1   31[BANK0 ] unsigned char 
  4473 ;;  ap              1   26[BANK0 ] PTR void [1]
  4474 ;;		 -> ?_printf(2), 
  4475 ;;  prec            1   23[BANK0 ] char 
  4476 ;; Return value:  Size  Location     Type
  4477 ;;                  2   15[BANK0 ] int 
  4478 ;; Registers used:
  4479 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4480 ;; Tracked objects:
  4481 ;;		On entry : 0/0
  4482 ;;		On exit  : 0/0
  4483 ;;		Unchanged: 0/0
  4484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4485 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4486 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4487 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4488 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4489 ;;Total ram usage:       20 bytes
  4490 ;; Hardware stack levels used:    1
  4491 ;; Hardware stack levels required when called:    7
  4492 ;; This function calls:
  4493 ;;		___lwdiv
  4494 ;;		___lwmod
  4495 ;;		___wmul
  4496 ;;		_isdigit
  4497 ;;		_putch
  4498 ;; This function is called by:
  4499 ;;		_PROTOCOL_Loop
  4500 ;;		_PROTOCOL_I2C_Send_uint8_t
  4501 ;; This function uses a non-reentrant model
  4502 ;;
  4503                           
  4504                           
  4505                           ;psect for function _printf
  4506  0068                     _printf:	
  4507                           
  4508                           ;doprnt.c: 466: va_list ap;
  4509                           ;doprnt.c: 499: signed char c;
  4510                           ;doprnt.c: 501: int width;
  4511                           ;doprnt.c: 506: signed char prec;
  4512                           ;doprnt.c: 508: unsigned char flag;
  4513                           ;doprnt.c: 523: union {
  4514                           ;doprnt.c: 524: unsigned long vd;
  4515                           ;doprnt.c: 525: double integ;
  4516                           ;doprnt.c: 526: } tmpval;
  4517                           ;doprnt.c: 528: unsigned int val;
  4518                           ;doprnt.c: 529: unsigned len;
  4519                           ;doprnt.c: 530: const char * cp;
  4520                           ;doprnt.c: 533: *ap = __va_start();
  4521                           
  4522                           ;incstack = 0
  4523                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4524  0068  3031               	movlw	(low ((?_printf| 0+2)))& (0+255)
  4525  0069  0020               	movlb	0	; select bank0
  4526  006A  00B3               	movwf	??_printf
  4527  006B  0833               	movf	??_printf,w
  4528  006C  00BA               	movwf	printf@ap
  4529  006D                     l3731:	
  4530                           ;doprnt.c: 536: while(c = *f++) {
  4531                           
  4532  006D  0020               	movlb	0	; select bank0
  4533  006E  0830               	movf	printf@f+1,w
  4534  006F  00B4               	movwf	??_printf+1
  4535  0070  082F               	movf	printf@f,w
  4536  0071  00B3               	movwf	??_printf
  4537  0072  0AAF               	incf	printf@f,f
  4538  0073  1903               	skipnz
  4539  0074  0AB0               	incf	printf@f+1,f
  4540  0075  0833               	movf	??_printf,w
  4541  0076  0084               	movwf	4
  4542  0077  0834               	movf	??_printf+1,w
  4543  0078  0085               	movwf	5
  4544  0079  0800               	movf	0,w	;code access
  4545  007A  00B5               	movwf	??_printf+2
  4546  007B  0835               	movf	??_printf+2,w
  4547  007C  00C2               	movwf	printf@c
  4548  007D  0842               	movf	printf@c,w
  4549  007E  1903               	btfsc	3,2
  4550  007F  0008               	return
  4551                           
  4552                           ;doprnt.c: 538: if(c != '%')
  4553  0080  3025               	movlw	37
  4554  0081  0642               	xorwf	printf@c,w
  4555  0082  1903               	btfsc	3,2
  4556  0083  2889               	goto	l3607
  4557                           
  4558                           ;doprnt.c: 540: {
  4559                           ;doprnt.c: 541: (putch(c) );
  4560  0084  0842               	movf	printf@c,w
  4561  0085  318C  24F5  3180   	fcall	_putch
  4562                           
  4563                           ;doprnt.c: 542: continue;
  4564  0088  286D               	goto	l3731
  4565  0089                     l3607:	
  4566                           
  4567                           ;doprnt.c: 543: }
  4568                           ;doprnt.c: 546: width = 0;
  4569  0089  0020               	movlb	0	; select bank0
  4570  008A  01C0               	clrf	printf@width
  4571  008B  01C1               	clrf	printf@width+1
  4572                           
  4573                           ;doprnt.c: 548: flag = 0;
  4574  008C  01BF               	clrf	printf@flag
  4575                           
  4576                           ;doprnt.c: 551: switch(*f) {
  4577                           
  4578                           ;doprnt.c: 550: for(;;) {
  4579  008D  2893               	goto	l3613
  4580  008E                     l492:	
  4581                           ;doprnt.c: 579: case '0':
  4582                           
  4583                           
  4584                           ;doprnt.c: 580: flag |= 0x04;
  4585  008E  153F               	bsf	printf@flag,2
  4586                           
  4587                           ;doprnt.c: 581: f++;
  4588  008F  3001               	movlw	1
  4589  0090  07AF               	addwf	printf@f,f
  4590  0091  3000               	movlw	0
  4591  0092  3DB0               	addwfc	printf@f+1,f
  4592  0093                     l3613:	
  4593                           ;doprnt.c: 584: }
  4594                           
  4595                           ;doprnt.c: 582: continue;
  4596                           
  4597  0093  082F               	movf	printf@f,w
  4598  0094  0084               	movwf	4
  4599  0095  0830               	movf	printf@f+1,w
  4600  0096  0085               	movwf	5
  4601  0097  0800               	movf	0,w	;code access
  4602                           
  4603                           ; Switch size 1, requested type "space"
  4604                           ; Number of cases is 1, Range of values is 48 to 48
  4605                           ; switch strategies available:
  4606                           ; Name         Instructions Cycles
  4607                           ; simple_byte            4     3 (average)
  4608                           ; direct_byte           11     9 (fixed)
  4609                           ; jumptable            263     9 (fixed)
  4610                           ;	Chosen strategy is simple_byte
  4611  0098  3A30               	xorlw	48	; case 48
  4612  0099  1903               	skipnz
  4613  009A  288E               	goto	l492
  4614  009B  289C               	goto	l3615
  4615  009C                     l3615:	
  4616                           ;doprnt.c: 586: }
  4617                           
  4618                           ;doprnt.c: 585: break;
  4619                           
  4620                           
  4621                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4622  009C  082F               	movf	printf@f,w
  4623  009D  0084               	movwf	4
  4624  009E  0830               	movf	printf@f+1,w
  4625  009F  0085               	movwf	5
  4626  00A0  0800               	movf	0,w	;code access
  4627  00A1  318D  2576  3180   	fcall	_isdigit
  4628  00A4  1C03               	btfss	3,0
  4629  00A5  293D               	goto	l3663
  4630                           
  4631                           ;doprnt.c: 598: width = 0;
  4632  00A6  0020               	movlb	0	; select bank0
  4633  00A7  01C0               	clrf	printf@width
  4634  00A8  01C1               	clrf	printf@width+1
  4635  00A9                     l3619:	
  4636                           ;doprnt.c: 599: do {
  4637                           
  4638                           
  4639                           ;doprnt.c: 600: width *= 10;
  4640  00A9  300A               	movlw	10
  4641  00AA  0020               	movlb	0	; select bank0
  4642  00AB  00A1               	movwf	___wmul@multiplier
  4643  00AC  3000               	movlw	0
  4644  00AD  00A2               	movwf	___wmul@multiplier+1
  4645  00AE  0841               	movf	printf@width+1,w
  4646  00AF  00A4               	movwf	___wmul@multiplicand+1
  4647  00B0  0840               	movf	printf@width,w
  4648  00B1  00A3               	movwf	___wmul@multiplicand
  4649  00B2  318E  261B  3180   	fcall	___wmul
  4650  00B5  0020               	movlb	0	; select bank0
  4651  00B6  0822               	movf	?___wmul+1,w
  4652  00B7  00C1               	movwf	printf@width+1
  4653  00B8  0821               	movf	?___wmul,w
  4654  00B9  00C0               	movwf	printf@width
  4655                           
  4656                           ;doprnt.c: 601: width += *f++ - '0';
  4657  00BA  082F               	movf	printf@f,w
  4658  00BB  0084               	movwf	4
  4659  00BC  0830               	movf	printf@f+1,w
  4660  00BD  0085               	movwf	5
  4661  00BE  0800               	movf	0,w	;code access
  4662  00BF  3ED0               	addlw	208
  4663  00C0  00B3               	movwf	??_printf
  4664  00C1  30FF               	movlw	255
  4665  00C2  1803               	skipnc
  4666  00C3  3000               	movlw	0
  4667  00C4  00B4               	movwf	??_printf+1
  4668  00C5  0833               	movf	??_printf,w
  4669  00C6  07C0               	addwf	printf@width,f
  4670  00C7  0834               	movf	??_printf+1,w
  4671  00C8  3DC1               	addwfc	printf@width+1,f
  4672  00C9  3001               	movlw	1
  4673  00CA  07AF               	addwf	printf@f,f
  4674  00CB  3000               	movlw	0
  4675  00CC  3DB0               	addwfc	printf@f+1,f
  4676                           
  4677                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4678  00CD  082F               	movf	printf@f,w
  4679  00CE  0084               	movwf	4
  4680  00CF  0830               	movf	printf@f+1,w
  4681  00D0  0085               	movwf	5
  4682  00D1  0800               	movf	0,w	;code access
  4683  00D2  318D  2576  3180   	fcall	_isdigit
  4684  00D5  1C03               	btfss	3,0
  4685  00D6  293D               	goto	l3663
  4686  00D7  28A9               	goto	l3619
  4687  00D8                     l3627:	
  4688                           ;doprnt.c: 728: case 's':
  4689                           
  4690                           ;doprnt.c: 698: case 'i':
  4691                           ;doprnt.c: 699: break;
  4692                           
  4693                           ;doprnt.c: 697: case 'd':
  4694                           
  4695                           ;doprnt.c: 638: goto alldone;
  4696                           
  4697                           ;doprnt.c: 637: case 0:
  4698                           
  4699                           ;doprnt.c: 608: }
  4700                           ;doprnt.c: 635: switch(c = *f++) {
  4701                           
  4702                           
  4703                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  4704  00D8  0020               	movlb	0	; select bank0
  4705  00D9  083A               	movf	printf@ap,w
  4706  00DA  0086               	movwf	6
  4707  00DB  0187               	clrf	7
  4708  00DC  3F40               	moviw [0]fsr1
  4709  00DD  00B8               	movwf	printf@cp
  4710  00DE  3F41               	moviw [1]fsr1
  4711  00DF  00B9               	movwf	printf@cp+1
  4712  00E0  3002               	movlw	2
  4713  00E1  00B3               	movwf	??_printf
  4714  00E2  0833               	movf	??_printf,w
  4715  00E3  07BA               	addwf	printf@ap,f
  4716                           
  4717                           ;doprnt.c: 740: if(!cp)
  4718  00E4  0838               	movf	printf@cp,w
  4719  00E5  0439               	iorwf	printf@cp+1,w
  4720  00E6  1D03               	btfss	3,2
  4721  00E7  28EC               	goto	l3635
  4722                           
  4723                           ;doprnt.c: 741: cp = "(null)";
  4724  00E8  305C               	movlw	low (STR_2| (0+32768))
  4725  00E9  00B8               	movwf	printf@cp
  4726  00EA  3084               	movlw	high (STR_2| (0+32768))
  4727  00EB  00B9               	movwf	printf@cp+1
  4728  00EC                     l3635:	
  4729                           
  4730                           ;doprnt.c: 745: len = 0;
  4731  00EC  01BD               	clrf	printf@len
  4732  00ED  01BE               	clrf	printf@len+1
  4733  00EE                     l3639:	
  4734                           ;doprnt.c: 746: while(cp[len])
  4735                           
  4736  00EE  0838               	movf	printf@cp,w
  4737  00EF  073D               	addwf	printf@len,w
  4738  00F0  0084               	movwf	4
  4739  00F1  0839               	movf	printf@cp+1,w
  4740  00F2  3D3E               	addwfc	printf@len+1,w
  4741  00F3  0085               	movwf	5
  4742  00F4  0012               	moviw fsr0++
  4743  00F5  1903               	btfsc	3,2
  4744  00F6  28FC               	goto	l3641
  4745                           
  4746                           ;doprnt.c: 747: len++;
  4747  00F7  3001               	movlw	1
  4748  00F8  07BD               	addwf	printf@len,f
  4749  00F9  3000               	movlw	0
  4750  00FA  3DBE               	addwfc	printf@len+1,f
  4751  00FB  28EE               	goto	l3639
  4752  00FC                     l3641:	
  4753                           ;doprnt.c: 750: dostring:
  4754                           
  4755                           
  4756                           ;doprnt.c: 757: if(width > len)
  4757  00FC  0841               	movf	printf@width+1,w
  4758  00FD  023E               	subwf	printf@len+1,w
  4759  00FE  1D03               	skipz
  4760  00FF  2902               	goto	u2895
  4761  0100  0840               	movf	printf@width,w
  4762  0101  023D               	subwf	printf@len,w
  4763  0102                     u2895:	
  4764  0102  1803               	skipnc
  4765  0103  2909               	goto	l3645
  4766                           
  4767                           ;doprnt.c: 758: width -= len;
  4768  0104  083D               	movf	printf@len,w
  4769  0105  02C0               	subwf	printf@width,f
  4770  0106  083E               	movf	printf@len+1,w
  4771  0107  3BC1               	subwfb	printf@width+1,f
  4772  0108  290B               	goto	l3649
  4773  0109                     l3645:	
  4774                           
  4775                           ;doprnt.c: 759: else
  4776                           ;doprnt.c: 760: width = 0;
  4777  0109  01C0               	clrf	printf@width
  4778  010A  01C1               	clrf	printf@width+1
  4779  010B                     l3649:	
  4780                           ;doprnt.c: 764: while(width--)
  4781                           
  4782  010B  30FF               	movlw	255
  4783  010C  0020               	movlb	0	; select bank0
  4784  010D  07C0               	addwf	printf@width,f
  4785  010E  30FF               	movlw	255
  4786  010F  3DC1               	addwfc	printf@width+1,f
  4787  0110  0A40               	incf	printf@width,w
  4788  0111  1903               	btfsc	3,2
  4789  0112  0A41               	incf	printf@width+1,w
  4790  0113  1903               	btfsc	3,2
  4791  0114  2927               	goto	l3655
  4792                           
  4793                           ;doprnt.c: 765: (putch(' ') );
  4794  0115  3020               	movlw	32
  4795  0116  318C  24F5  3180   	fcall	_putch
  4796  0119  290B               	goto	l3649
  4797  011A                     l3651:	
  4798                           ;doprnt.c: 767: while(len--)
  4799                           
  4800                           
  4801                           ;doprnt.c: 768: (putch(*cp++) );
  4802  011A  0838               	movf	printf@cp,w
  4803  011B  0084               	movwf	4
  4804  011C  0839               	movf	printf@cp+1,w
  4805  011D  0085               	movwf	5
  4806  011E  0800               	movf	0,w	;code access
  4807  011F  318C  24F5  3180   	fcall	_putch
  4808  0122  3001               	movlw	1
  4809  0123  0020               	movlb	0	; select bank0
  4810  0124  07B8               	addwf	printf@cp,f
  4811  0125  3000               	movlw	0
  4812  0126  3DB9               	addwfc	printf@cp+1,f
  4813  0127                     l3655:	
  4814  0127  3001               	movlw	1
  4815  0128  02BD               	subwf	printf@len,f
  4816  0129  3000               	movlw	0
  4817  012A  3BBE               	subwfb	printf@len+1,f
  4818  012B  0A3D               	incf	printf@len,w
  4819  012C  1D03               	skipz
  4820  012D  291A               	goto	l3651
  4821  012E  0A3E               	incf	printf@len+1,w
  4822  012F  1903               	btfsc	3,2
  4823  0130  286D               	goto	l3731
  4824  0131  291A               	goto	l3651
  4825  0132                     l3657:	
  4826                           ;doprnt.c: 802: default:
  4827                           
  4828                           ;doprnt.c: 774: continue;
  4829                           
  4830                           
  4831                           ;doprnt.c: 805: cp = (char *)&c;
  4832  0132  3042               	movlw	low printf@c
  4833  0133  00B8               	movwf	printf@cp
  4834  0134  3000               	movlw	high printf@c
  4835  0135  00B9               	movwf	printf@cp+1
  4836                           
  4837                           ;doprnt.c: 806: len = 1;
  4838  0136  3001               	movlw	1
  4839  0137  00BD               	movwf	printf@len
  4840  0138  3000               	movlw	0
  4841  0139  00BE               	movwf	printf@len+1
  4842                           
  4843                           ;doprnt.c: 807: goto dostring;
  4844  013A  28FC               	goto	l3641
  4845  013B                     l520:	
  4846                           ;doprnt.c: 817: case 'u':
  4847                           
  4848                           
  4849                           ;doprnt.c: 818: flag |= 0x40;
  4850  013B  173F               	bsf	printf@flag,6
  4851                           
  4852                           ;doprnt.c: 822: }
  4853                           
  4854                           ;doprnt.c: 819: break;
  4855  013C  295B               	goto	l504
  4856  013D                     l3663:	
  4857  013D  0020               	movlb	0	; select bank0
  4858  013E  0830               	movf	printf@f+1,w
  4859  013F  00B4               	movwf	??_printf+1
  4860  0140  082F               	movf	printf@f,w
  4861  0141  00B3               	movwf	??_printf
  4862  0142  0AAF               	incf	printf@f,f
  4863  0143  1903               	skipnz
  4864  0144  0AB0               	incf	printf@f+1,f
  4865  0145  0833               	movf	??_printf,w
  4866  0146  0084               	movwf	4
  4867  0147  0834               	movf	??_printf+1,w
  4868  0148  0085               	movwf	5
  4869  0149  0800               	movf	0,w	;code access
  4870  014A  00C2               	movwf	printf@c
  4871                           
  4872                           ; Switch size 1, requested type "space"
  4873                           ; Number of cases is 5, Range of values is 0 to 117
  4874                           ; switch strategies available:
  4875                           ; Name         Instructions Cycles
  4876                           ; simple_byte           16     9 (average)
  4877                           ; direct_byte          242     6 (fixed)
  4878                           ; jumptable            260     6 (fixed)
  4879                           ;	Chosen strategy is simple_byte
  4880  014B  3A00               	xorlw	0	; case 0
  4881  014C  1903               	skipnz
  4882  014D  2A3C               	goto	l544
  4883  014E  3A64               	xorlw	100	; case 100
  4884  014F  1903               	skipnz
  4885  0150  295B               	goto	l504
  4886  0151  3A0D               	xorlw	13	; case 105
  4887  0152  1903               	skipnz
  4888  0153  295B               	goto	l504
  4889  0154  3A1A               	xorlw	26	; case 115
  4890  0155  1903               	skipnz
  4891  0156  28D8               	goto	l3627
  4892  0157  3A06               	xorlw	6	; case 117
  4893  0158  1903               	skipnz
  4894  0159  293B               	goto	l520
  4895  015A  2932               	goto	l3657
  4896  015B                     l504:	
  4897                           
  4898                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  4899  015B  0020               	movlb	0	; select bank0
  4900  015C  1B3F               	btfsc	printf@flag,6
  4901  015D  2975               	goto	l3675
  4902                           
  4903                           ;doprnt.c: 1253: {
  4904                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4905  015E  083A               	movf	printf@ap,w
  4906  015F  0086               	movwf	6
  4907  0160  0187               	clrf	7
  4908  0161  3F40               	moviw [0]fsr1
  4909  0162  00BB               	movwf	printf@val
  4910  0163  3F41               	moviw [1]fsr1
  4911  0164  00BC               	movwf	printf@val+1
  4912  0165  3002               	movlw	2
  4913  0166  00B3               	movwf	??_printf
  4914  0167  0833               	movf	??_printf,w
  4915  0168  07BA               	addwf	printf@ap,f
  4916                           
  4917                           ;doprnt.c: 1261: if((int)val < 0) {
  4918  0169  1FBC               	btfss	printf@val+1,7
  4919  016A  2980               	goto	l3679
  4920                           
  4921                           ;doprnt.c: 1262: flag |= 0x03;
  4922  016B  3003               	movlw	3
  4923  016C  00B3               	movwf	??_printf
  4924  016D  0833               	movf	??_printf,w
  4925  016E  04BF               	iorwf	printf@flag,f
  4926                           
  4927                           ;doprnt.c: 1263: val = -val;
  4928  016F  09BB               	comf	printf@val,f
  4929  0170  09BC               	comf	printf@val+1,f
  4930  0171  0ABB               	incf	printf@val,f
  4931  0172  1903               	skipnz
  4932  0173  0ABC               	incf	printf@val+1,f
  4933                           
  4934                           ;doprnt.c: 1264: }
  4935                           ;doprnt.c: 1266: }
  4936  0174  2980               	goto	l3679
  4937  0175                     l3675:	
  4938                           
  4939                           ;doprnt.c: 1268: else
  4940                           ;doprnt.c: 1273: {
  4941                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4942  0175  083A               	movf	printf@ap,w
  4943  0176  0086               	movwf	6
  4944  0177  0187               	clrf	7
  4945  0178  3F40               	moviw [0]fsr1
  4946  0179  00BB               	movwf	printf@val
  4947  017A  3F41               	moviw [1]fsr1
  4948  017B  00BC               	movwf	printf@val+1
  4949  017C  3002               	movlw	2
  4950  017D  00B3               	movwf	??_printf
  4951  017E  0833               	movf	??_printf,w
  4952  017F  07BA               	addwf	printf@ap,f
  4953  0180                     l3679:	
  4954                           
  4955                           ;doprnt.c: 1287: }
  4956                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4957  0180  01C2               	clrf	printf@c
  4958  0181  0AC2               	incf	printf@c,f
  4959  0182  3005               	movlw	5
  4960  0183  0642               	xorwf	printf@c,w
  4961  0184  1903               	btfsc	3,2
  4962  0185  29A5               	goto	l3691
  4963  0186                     l3685:	
  4964                           
  4965                           ;doprnt.c: 1306: if(val < dpowers[c])
  4966  0186  0842               	movf	printf@c,w
  4967  0187  00B3               	movwf	??_printf
  4968  0188  01B4               	clrf	??_printf+1
  4969  0189  35B3               	lslf	??_printf,f
  4970  018A  0DB4               	rlf	??_printf+1,f
  4971  018B  30CE               	movlw	low (_dpowers| (0+32768))
  4972  018C  0733               	addwf	??_printf,w
  4973  018D  0084               	movwf	4
  4974  018E  3083               	movlw	high (_dpowers| (0+32768))
  4975  018F  3D34               	addwfc	??_printf+1,w
  4976  0190  0085               	movwf	5
  4977  0191  3F00               	moviw [0]fsr0
  4978  0192  00B5               	movwf	??_printf+2
  4979  0193  3F01               	moviw [1]fsr0
  4980  0194  00B6               	movwf	??_printf+3
  4981  0195  0836               	movf	??_printf+3,w
  4982  0196  023C               	subwf	printf@val+1,w
  4983  0197  1D03               	skipz
  4984  0198  299B               	goto	u2955
  4985  0199  0835               	movf	??_printf+2,w
  4986  019A  023B               	subwf	printf@val,w
  4987  019B                     u2955:	
  4988  019B  1C03               	btfss	3,0
  4989  019C  29A5               	goto	l3691
  4990                           
  4991                           ;doprnt.c: 1307: break;
  4992  019D  3001               	movlw	1
  4993  019E  00B3               	movwf	??_printf
  4994  019F  0833               	movf	??_printf,w
  4995  01A0  07C2               	addwf	printf@c,f
  4996  01A1  3005               	movlw	5
  4997  01A2  0642               	xorwf	printf@c,w
  4998  01A3  1D03               	btfss	3,2
  4999  01A4  2986               	goto	l3685
  5000  01A5                     l3691:	
  5001                           
  5002                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5003  01A5  0840               	movf	printf@width,w
  5004  01A6  0441               	iorwf	printf@width+1,w
  5005  01A7  1903               	btfsc	3,2
  5006  01A8  29B1               	goto	l527
  5007  01A9  083F               	movf	printf@flag,w
  5008  01AA  3903               	andlw	3
  5009  01AB  1903               	btfsc	3,2
  5010  01AC  29B1               	goto	l527
  5011                           
  5012                           ;doprnt.c: 1346: width--;
  5013  01AD  30FF               	movlw	255
  5014  01AE  07C0               	addwf	printf@width,f
  5015  01AF  30FF               	movlw	255
  5016  01B0  3DC1               	addwfc	printf@width+1,f
  5017  01B1                     l527:	
  5018                           
  5019                           ;doprnt.c: 1381: if(width > c)
  5020  01B1  0842               	movf	printf@c,w
  5021  01B2  00B3               	movwf	??_printf
  5022  01B3  01B4               	clrf	??_printf+1
  5023  01B4  1BB3               	btfsc	??_printf,7
  5024  01B5  03B4               	decf	??_printf+1,f
  5025  01B6  0834               	movf	??_printf+1,w
  5026  01B7  3A80               	xorlw	128
  5027  01B8  00B5               	movwf	??_printf+2
  5028  01B9  0841               	movf	printf@width+1,w
  5029  01BA  3A80               	xorlw	128
  5030  01BB  0235               	subwf	??_printf+2,w
  5031  01BC  1D03               	skipz
  5032  01BD  29C0               	goto	u2995
  5033  01BE  0840               	movf	printf@width,w
  5034  01BF  0233               	subwf	??_printf,w
  5035  01C0                     u2995:	
  5036  01C0  1803               	skipnc
  5037  01C1  29CD               	goto	l3699
  5038                           
  5039                           ;doprnt.c: 1382: width -= c;
  5040  01C2  0020               	movlb	0	; select bank0
  5041  01C3  0842               	movf	printf@c,w
  5042  01C4  00B3               	movwf	??_printf
  5043  01C5  01B4               	clrf	??_printf+1
  5044  01C6  1BB3               	btfsc	??_printf,7
  5045  01C7  03B4               	decf	??_printf+1,f
  5046  01C8  0833               	movf	??_printf,w
  5047  01C9  02C0               	subwf	printf@width,f
  5048  01CA  0834               	movf	??_printf+1,w
  5049  01CB  3BC1               	subwfb	printf@width+1,f
  5050  01CC  29D0               	goto	l3701
  5051  01CD                     l3699:	
  5052                           
  5053                           ;doprnt.c: 1383: else
  5054                           ;doprnt.c: 1384: width = 0;
  5055  01CD  0020               	movlb	0	; select bank0
  5056  01CE  01C0               	clrf	printf@width
  5057  01CF  01C1               	clrf	printf@width+1
  5058  01D0                     l3701:	
  5059                           
  5060                           ;doprnt.c: 1387: if(flag & 0x04) {
  5061  01D0  1D3F               	btfss	printf@flag,2
  5062  01D1  29E9               	goto	l3713
  5063                           
  5064                           ;doprnt.c: 1392: if(flag & 0x03)
  5065  01D2  083F               	movf	printf@flag,w
  5066  01D3  3903               	andlw	3
  5067  01D4  1903               	btfsc	3,2
  5068  01D5  29DA               	goto	l3707
  5069                           
  5070                           ;doprnt.c: 1393: (putch('-') );
  5071  01D6  302D               	movlw	45
  5072  01D7  318C  24F5  3180   	fcall	_putch
  5073  01DA                     l3707:	
  5074                           
  5075                           ;doprnt.c: 1415: if(width)
  5076  01DA  0020               	movlb	0	; select bank0
  5077  01DB                     L4:	
  5078  01DB  0840               	movf	printf@width,w
  5079  01DC  0441               	iorwf	printf@width+1,w
  5080  01DD  1903               	btfsc	3,2
  5081  01DE  2A02               	goto	l3723
  5082                           
  5083                           ;doprnt.c: 1417: (putch('0') );
  5084                           
  5085                           ;doprnt.c: 1416: do
  5086  01DF  3030               	movlw	48
  5087  01E0  318C  24F5  3180   	fcall	_putch
  5088                           
  5089                           ;doprnt.c: 1418: while(--width);
  5090  01E3  30FF               	movlw	255
  5091  01E4  0020               	movlb	0	; select bank0
  5092  01E5  07C0               	addwf	printf@width,f
  5093  01E6  30FF               	movlw	255
  5094  01E7  3DC1               	addwfc	printf@width+1,f
  5095  01E8  29DB               	goto	L4
  5096  01E9                     l3713:	
  5097                           ;doprnt.c: 1420: } else
  5098                           
  5099                           
  5100                           ;doprnt.c: 1422: {
  5101                           ;doprnt.c: 1424: if(width
  5102                           ;doprnt.c: 1428: )
  5103  01E9  0840               	movf	printf@width,w
  5104  01EA  0441               	iorwf	printf@width+1,w
  5105  01EB  1903               	btfsc	3,2
  5106  01EC  29FA               	goto	l3719
  5107  01ED                     l3715:	
  5108                           ;doprnt.c: 1429: do
  5109                           
  5110                           
  5111                           ;doprnt.c: 1430: (putch(' ') );
  5112  01ED  3020               	movlw	32
  5113  01EE  318C  24F5  3180   	fcall	_putch
  5114                           
  5115                           ;doprnt.c: 1431: while(--width);
  5116  01F1  30FF               	movlw	255
  5117  01F2  0020               	movlb	0	; select bank0
  5118  01F3  07C0               	addwf	printf@width,f
  5119  01F4  30FF               	movlw	255
  5120  01F5  3DC1               	addwfc	printf@width+1,f
  5121  01F6  0840               	movf	printf@width,w
  5122  01F7  0441               	iorwf	printf@width+1,w
  5123  01F8  1D03               	btfss	3,2
  5124  01F9  29ED               	goto	l3715
  5125  01FA                     l3719:	
  5126                           
  5127                           ;doprnt.c: 1438: if(flag & 0x03)
  5128  01FA  083F               	movf	printf@flag,w
  5129  01FB  3903               	andlw	3
  5130  01FC  1903               	btfsc	3,2
  5131  01FD  2A02               	goto	l3723
  5132                           
  5133                           ;doprnt.c: 1439: (putch('-') );
  5134  01FE  302D               	movlw	45
  5135  01FF  318C  24F5  3180   	fcall	_putch
  5136  0202                     l3723:	
  5137                           
  5138                           ;doprnt.c: 1469: }
  5139                           ;doprnt.c: 1472: prec = c;
  5140  0202  0020               	movlb	0	; select bank0
  5141  0203  0842               	movf	printf@c,w
  5142  0204  00B3               	movwf	??_printf
  5143  0205  0833               	movf	??_printf,w
  5144  0206  00B7               	movwf	printf@prec
  5145  0207                     l3729:	
  5146                           ;doprnt.c: 1474: while(prec--) {
  5147                           
  5148  0207  30FF               	movlw	255
  5149  0208  0020               	movlb	0	; select bank0
  5150  0209  00B3               	movwf	??_printf
  5151  020A  0833               	movf	??_printf,w
  5152  020B  07B7               	addwf	printf@prec,f
  5153  020C  0A37               	incf	printf@prec,w
  5154  020D  1903               	btfsc	3,2
  5155  020E  286D               	goto	l3731
  5156                           
  5157                           ;doprnt.c: 1478: {
  5158                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5159  020F  300A               	movlw	10
  5160  0210  00A9               	movwf	___lwmod@divisor
  5161  0211  3000               	movlw	0
  5162  0212  00AA               	movwf	___lwmod@divisor+1
  5163  0213  0837               	movf	printf@prec,w
  5164  0214  00B3               	movwf	??_printf
  5165  0215  01B4               	clrf	??_printf+1
  5166  0216  35B3               	lslf	??_printf,f
  5167  0217  0DB4               	rlf	??_printf+1,f
  5168  0218  30CE               	movlw	low (_dpowers| (0+32768))
  5169  0219  0733               	addwf	??_printf,w
  5170  021A  0084               	movwf	4
  5171  021B  3083               	movlw	high (_dpowers| (0+32768))
  5172  021C  3D34               	addwfc	??_printf+1,w
  5173  021D  0085               	movwf	5
  5174  021E  3F00               	moviw [0]fsr0
  5175  021F  00A1               	movwf	___lwdiv@divisor
  5176  0220  3F01               	moviw [1]fsr0
  5177  0221  00A2               	movwf	___lwdiv@divisor+1
  5178  0222  083C               	movf	printf@val+1,w
  5179  0223  00A4               	movwf	___lwdiv@dividend+1
  5180  0224  083B               	movf	printf@val,w
  5181  0225  00A3               	movwf	___lwdiv@dividend
  5182  0226  318F  27CB  3180   	fcall	___lwdiv
  5183  0229  0020               	movlb	0	; select bank0
  5184  022A  0822               	movf	?___lwdiv+1,w
  5185  022B  00AC               	movwf	___lwmod@dividend+1
  5186  022C  0821               	movf	?___lwdiv,w
  5187  022D  00AB               	movwf	___lwmod@dividend
  5188  022E  318F  273D  3180   	fcall	___lwmod
  5189  0231  0020               	movlb	0	; select bank0
  5190  0232  0829               	movf	?___lwmod,w
  5191  0233  3E30               	addlw	48
  5192  0234  00B5               	movwf	??_printf+2
  5193  0235  0835               	movf	??_printf+2,w
  5194  0236  00C2               	movwf	printf@c
  5195                           
  5196                           ;doprnt.c: 1523: }
  5197                           ;doprnt.c: 1524: (putch(c) );
  5198  0237  0842               	movf	printf@c,w
  5199  0238  318C  24F5  3180   	fcall	_putch
  5200  023B  2A07               	goto	l3729
  5201  023C                     l544:	
  5202                           ;doprnt.c: 1540: return 0;
  5203                           ;	Return value of _printf is never used
  5204                           
  5205                           ;doprnt.c: 1525: }
  5206                           ;doprnt.c: 1533: }
  5207                           ;doprnt.c: 1535: alldone:
  5208                           
  5209  023C  0008               	return
  5210  023D                     __end_of_printf:	
  5211                           
  5212                           	psect	text12
  5213  0CF5                     __ptext12:	
  5214 ;; *************** function _putch *****************
  5215 ;; Defined at:
  5216 ;;		line 160 in file "mcc_generated_files/eusart.c"
  5217 ;; Parameters:    Size  Location     Type
  5218 ;;  txData          1    wreg     unsigned char 
  5219 ;; Auto vars:     Size  Location     Type
  5220 ;;  txData          1    3[BANK0 ] unsigned char 
  5221 ;; Return value:  Size  Location     Type
  5222 ;;                  1    wreg      void 
  5223 ;; Registers used:
  5224 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5225 ;; Tracked objects:
  5226 ;;		On entry : 0/0
  5227 ;;		On exit  : 0/0
  5228 ;;		Unchanged: 0/0
  5229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5231 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5233 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5234 ;;Total ram usage:        1 bytes
  5235 ;; Hardware stack levels used:    1
  5236 ;; Hardware stack levels required when called:    6
  5237 ;; This function calls:
  5238 ;;		_EUSART_Write
  5239 ;; This function is called by:
  5240 ;;		_printf
  5241 ;; This function uses a non-reentrant model
  5242 ;;
  5243                           
  5244                           
  5245                           ;psect for function _putch
  5246  0CF5                     _putch:	
  5247                           
  5248                           ;incstack = 0
  5249                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5250                           ;putch@txData stored from wreg
  5251  0CF5  0020               	movlb	0	; select bank0
  5252  0CF6  00A3               	movwf	putch@txData
  5253                           
  5254                           ;eusart.c: 162: EUSART_Write(txData);
  5255  0CF7  0823               	movf	putch@txData,w
  5256  0CF8  318E  26F2         	fcall	_EUSART_Write
  5257  0CFA  0008               	return
  5258  0CFB                     __end_of_putch:	
  5259                           
  5260                           	psect	text13
  5261  0EF2                     __ptext13:	
  5262 ;; *************** function _EUSART_Write *****************
  5263 ;; Defined at:
  5264 ;;		line 132 in file "mcc_generated_files/eusart.c"
  5265 ;; Parameters:    Size  Location     Type
  5266 ;;  txData          1    wreg     unsigned char 
  5267 ;; Auto vars:     Size  Location     Type
  5268 ;;  txData          1    2[BANK0 ] unsigned char 
  5269 ;; Return value:  Size  Location     Type
  5270 ;;                  1    wreg      void 
  5271 ;; Registers used:
  5272 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5273 ;; Tracked objects:
  5274 ;;		On entry : 0/0
  5275 ;;		On exit  : 0/0
  5276 ;;		Unchanged: 0/0
  5277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5279 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5280 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5281 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5282 ;;Total ram usage:        2 bytes
  5283 ;; Hardware stack levels used:    1
  5284 ;; Hardware stack levels required when called:    5
  5285 ;; This function calls:
  5286 ;;		Nothing
  5287 ;; This function is called by:
  5288 ;;		_putch
  5289 ;; This function uses a non-reentrant model
  5290 ;;
  5291                           
  5292                           
  5293                           ;psect for function _EUSART_Write
  5294  0EF2                     _EUSART_Write:	
  5295                           
  5296                           ;incstack = 0
  5297                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  5298                           ;EUSART_Write@txData stored from wreg
  5299  0EF2  0020               	movlb	0	; select bank0
  5300  0EF3  00A2               	movwf	EUSART_Write@txData
  5301  0EF4                     l3509:	
  5302                           ;eusart.c: 135: {
  5303                           
  5304                           ;eusart.c: 134: while(0 == eusartTxBufferRemaining)
  5305                           
  5306  0EF4  0864               	movf	_eusartTxBufferRemaining,w	;volatile
  5307  0EF5  1903               	btfsc	3,2
  5308  0EF6  2EF4               	goto	l3509
  5309                           
  5310                           ;eusart.c: 136: }
  5311                           ;eusart.c: 138: if(0 == PIE1bits.TXIE)
  5312  0EF7  0021               	movlb	1	; select bank1
  5313  0EF8  1A11               	btfsc	17,4	;volatile
  5314  0EF9  2EFF               	goto	l224
  5315                           
  5316                           ;eusart.c: 139: {
  5317                           ;eusart.c: 140: TXREG = txData;
  5318  0EFA  0020               	movlb	0	; select bank0
  5319  0EFB  0822               	movf	EUSART_Write@txData,w
  5320  0EFC  0023               	movlb	3	; select bank3
  5321  0EFD  009A               	movwf	26	;volatile
  5322                           
  5323                           ;eusart.c: 141: }
  5324  0EFE  2F13               	goto	l3523
  5325  0EFF                     l224:	
  5326                           
  5327                           ;eusart.c: 142: else
  5328                           ;eusart.c: 143: {
  5329                           ;eusart.c: 144: PIE1bits.TXIE = 0;
  5330  0EFF  1211               	bcf	17,4	;volatile
  5331                           
  5332                           ;eusart.c: 145: eusartTxBuffer[eusartTxHead++] = txData;
  5333  0F00  0020               	movlb	0	; select bank0
  5334  0F01  0822               	movf	EUSART_Write@txData,w
  5335  0F02  00A1               	movwf	??_EUSART_Write
  5336  0F03  087C               	movf	_eusartTxHead,w
  5337  0F04  3EA8               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  5338  0F05  0086               	movwf	6
  5339  0F06  0187               	clrf	7
  5340  0F07  0821               	movf	??_EUSART_Write,w
  5341  0F08  0081               	movwf	1
  5342  0F09  3001               	movlw	1
  5343  0F0A  00A1               	movwf	??_EUSART_Write
  5344  0F0B  0821               	movf	??_EUSART_Write,w
  5345  0F0C  07FC               	addwf	_eusartTxHead,f	;volatile
  5346                           
  5347                           ;eusart.c: 146: if(sizeof(eusartTxBuffer) <= eusartTxHead)
  5348  0F0D  3008               	movlw	8
  5349  0F0E  027C               	subwf	_eusartTxHead,w	;volatile
  5350  0F0F  1803               	btfsc	3,0
  5351                           
  5352                           ;eusart.c: 147: {
  5353                           ;eusart.c: 148: eusartTxHead = 0;
  5354  0F10  01FC               	clrf	_eusartTxHead	;volatile
  5355                           
  5356                           ;eusart.c: 149: }
  5357                           ;eusart.c: 150: eusartTxBufferRemaining--;
  5358  0F11  3001               	movlw	1
  5359  0F12  02E4               	subwf	_eusartTxBufferRemaining,f	;volatile
  5360  0F13                     l3523:	
  5361                           
  5362                           ;eusart.c: 151: }
  5363                           ;eusart.c: 152: PIE1bits.TXIE = 1;
  5364  0F13  0021               	movlb	1	; select bank1
  5365  0F14  1611               	bsf	17,4	;volatile
  5366  0F15  0008               	return
  5367  0F16                     __end_of_EUSART_Write:	
  5368                           
  5369                           	psect	text14
  5370  0F3D                     __ptext14:	
  5371 ;; *************** function ___lwmod *****************
  5372 ;; Defined at:
  5373 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  5374 ;; Parameters:    Size  Location     Type
  5375 ;;  divisor         2    9[BANK0 ] unsigned int 
  5376 ;;  dividend        2   11[BANK0 ] unsigned int 
  5377 ;; Auto vars:     Size  Location     Type
  5378 ;;  counter         1   14[BANK0 ] unsigned char 
  5379 ;; Return value:  Size  Location     Type
  5380 ;;                  2    9[BANK0 ] unsigned int 
  5381 ;; Registers used:
  5382 ;;		wreg, status,2, status,0
  5383 ;; Tracked objects:
  5384 ;;		On entry : 0/0
  5385 ;;		On exit  : 0/0
  5386 ;;		Unchanged: 0/0
  5387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5388 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5389 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5390 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5391 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5392 ;;Total ram usage:        6 bytes
  5393 ;; Hardware stack levels used:    1
  5394 ;; Hardware stack levels required when called:    5
  5395 ;; This function calls:
  5396 ;;		Nothing
  5397 ;; This function is called by:
  5398 ;;		_printf
  5399 ;; This function uses a non-reentrant model
  5400 ;;
  5401                           
  5402                           
  5403                           ;psect for function ___lwmod
  5404  0F3D                     ___lwmod:	
  5405                           
  5406                           ;incstack = 0
  5407                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  5408  0F3D  0020               	movlb	0	; select bank0
  5409  0F3E  0829               	movf	___lwmod@divisor,w
  5410  0F3F  042A               	iorwf	___lwmod@divisor+1,w
  5411  0F40  1903               	btfsc	3,2
  5412  0F41  2F65               	goto	l3597
  5413  0F42  01AE               	clrf	___lwmod@counter
  5414  0F43  0AAE               	incf	___lwmod@counter,f
  5415  0F44                     l3587:	
  5416  0F44  1BAA               	btfsc	___lwmod@divisor+1,7
  5417  0F45  2F50               	goto	l3589
  5418  0F46  3001               	movlw	1
  5419  0F47                     u2795:	
  5420  0F47  35A9               	lslf	___lwmod@divisor,f
  5421  0F48  0DAA               	rlf	___lwmod@divisor+1,f
  5422  0F49  0B89               	decfsz	9,f
  5423  0F4A  2F47               	goto	u2795
  5424  0F4B  3001               	movlw	1
  5425  0F4C  00AD               	movwf	??___lwmod
  5426  0F4D  082D               	movf	??___lwmod,w
  5427  0F4E  07AE               	addwf	___lwmod@counter,f
  5428  0F4F  2F44               	goto	l3587
  5429  0F50                     l3589:	
  5430  0F50  082A               	movf	___lwmod@divisor+1,w
  5431  0F51  022C               	subwf	___lwmod@dividend+1,w
  5432  0F52  1D03               	skipz
  5433  0F53  2F56               	goto	u2815
  5434  0F54  0829               	movf	___lwmod@divisor,w
  5435  0F55  022B               	subwf	___lwmod@dividend,w
  5436  0F56                     u2815:	
  5437  0F56  1C03               	skipc
  5438  0F57  2F5C               	goto	l3593
  5439  0F58  0829               	movf	___lwmod@divisor,w
  5440  0F59  02AB               	subwf	___lwmod@dividend,f
  5441  0F5A  082A               	movf	___lwmod@divisor+1,w
  5442  0F5B  3BAC               	subwfb	___lwmod@dividend+1,f
  5443  0F5C                     l3593:	
  5444  0F5C  3001               	movlw	1
  5445  0F5D                     u2825:	
  5446  0F5D  36AA               	lsrf	___lwmod@divisor+1,f
  5447  0F5E  0CA9               	rrf	___lwmod@divisor,f
  5448  0F5F  0B89               	decfsz	9,f
  5449  0F60  2F5D               	goto	u2825
  5450  0F61  3001               	movlw	1
  5451  0F62  02AE               	subwf	___lwmod@counter,f
  5452  0F63  1D03               	btfss	3,2
  5453  0F64  2F50               	goto	l3589
  5454  0F65                     l3597:	
  5455  0F65  082C               	movf	___lwmod@dividend+1,w
  5456  0F66  00AA               	movwf	?___lwmod+1
  5457  0F67  082B               	movf	___lwmod@dividend,w
  5458  0F68  00A9               	movwf	?___lwmod
  5459  0F69  0008               	return
  5460  0F6A                     __end_of___lwmod:	
  5461                           
  5462                           	psect	text15
  5463  0FCB                     __ptext15:	
  5464 ;; *************** function ___lwdiv *****************
  5465 ;; Defined at:
  5466 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  5467 ;; Parameters:    Size  Location     Type
  5468 ;;  divisor         2    1[BANK0 ] unsigned int 
  5469 ;;  dividend        2    3[BANK0 ] unsigned int 
  5470 ;; Auto vars:     Size  Location     Type
  5471 ;;  quotient        2    7[BANK0 ] unsigned int 
  5472 ;;  counter         1    6[BANK0 ] unsigned char 
  5473 ;; Return value:  Size  Location     Type
  5474 ;;                  2    1[BANK0 ] unsigned int 
  5475 ;; Registers used:
  5476 ;;		wreg, status,2, status,0
  5477 ;; Tracked objects:
  5478 ;;		On entry : 0/0
  5479 ;;		On exit  : 0/0
  5480 ;;		Unchanged: 0/0
  5481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5482 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5483 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5484 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5485 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5486 ;;Total ram usage:        8 bytes
  5487 ;; Hardware stack levels used:    1
  5488 ;; Hardware stack levels required when called:    5
  5489 ;; This function calls:
  5490 ;;		Nothing
  5491 ;; This function is called by:
  5492 ;;		_printf
  5493 ;; This function uses a non-reentrant model
  5494 ;;
  5495                           
  5496                           
  5497                           ;psect for function ___lwdiv
  5498  0FCB                     ___lwdiv:	
  5499                           
  5500                           ;incstack = 0
  5501                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  5502  0FCB  0020               	movlb	0	; select bank0
  5503  0FCC  01A7               	clrf	___lwdiv@quotient
  5504  0FCD  01A8               	clrf	___lwdiv@quotient+1
  5505  0FCE  0821               	movf	___lwdiv@divisor,w
  5506  0FCF  0422               	iorwf	___lwdiv@divisor+1,w
  5507  0FD0  1903               	btfsc	3,2
  5508  0FD1  2FFB               	goto	l3575
  5509  0FD2  01A6               	clrf	___lwdiv@counter
  5510  0FD3  0AA6               	incf	___lwdiv@counter,f
  5511  0FD4                     l3563:	
  5512  0FD4  1BA2               	btfsc	___lwdiv@divisor+1,7
  5513  0FD5  2FE0               	goto	l3565
  5514  0FD6  3001               	movlw	1
  5515  0FD7                     u2725:	
  5516  0FD7  35A1               	lslf	___lwdiv@divisor,f
  5517  0FD8  0DA2               	rlf	___lwdiv@divisor+1,f
  5518  0FD9  0B89               	decfsz	9,f
  5519  0FDA  2FD7               	goto	u2725
  5520  0FDB  3001               	movlw	1
  5521  0FDC  00A5               	movwf	??___lwdiv
  5522  0FDD  0825               	movf	??___lwdiv,w
  5523  0FDE  07A6               	addwf	___lwdiv@counter,f
  5524  0FDF  2FD4               	goto	l3563
  5525  0FE0                     l3565:	
  5526  0FE0  3001               	movlw	1
  5527  0FE1                     u2745:	
  5528  0FE1  35A7               	lslf	___lwdiv@quotient,f
  5529  0FE2  0DA8               	rlf	___lwdiv@quotient+1,f
  5530  0FE3  0B89               	decfsz	9,f
  5531  0FE4  2FE1               	goto	u2745
  5532  0FE5  0822               	movf	___lwdiv@divisor+1,w
  5533  0FE6  0224               	subwf	___lwdiv@dividend+1,w
  5534  0FE7  1D03               	skipz
  5535  0FE8  2FEB               	goto	u2755
  5536  0FE9  0821               	movf	___lwdiv@divisor,w
  5537  0FEA  0223               	subwf	___lwdiv@dividend,w
  5538  0FEB                     u2755:	
  5539  0FEB  1C03               	skipc
  5540  0FEC  2FF2               	goto	l3571
  5541  0FED  0821               	movf	___lwdiv@divisor,w
  5542  0FEE  02A3               	subwf	___lwdiv@dividend,f
  5543  0FEF  0822               	movf	___lwdiv@divisor+1,w
  5544  0FF0  3BA4               	subwfb	___lwdiv@dividend+1,f
  5545  0FF1  1427               	bsf	___lwdiv@quotient,0
  5546  0FF2                     l3571:	
  5547  0FF2  3001               	movlw	1
  5548  0FF3                     u2765:	
  5549  0FF3  36A2               	lsrf	___lwdiv@divisor+1,f
  5550  0FF4  0CA1               	rrf	___lwdiv@divisor,f
  5551  0FF5  0B89               	decfsz	9,f
  5552  0FF6  2FF3               	goto	u2765
  5553  0FF7  3001               	movlw	1
  5554  0FF8  02A6               	subwf	___lwdiv@counter,f
  5555  0FF9  1D03               	btfss	3,2
  5556  0FFA  2FE0               	goto	l3565
  5557  0FFB                     l3575:	
  5558  0FFB  0828               	movf	___lwdiv@quotient+1,w
  5559  0FFC  00A2               	movwf	?___lwdiv+1
  5560  0FFD  0827               	movf	___lwdiv@quotient,w
  5561  0FFE  00A1               	movwf	?___lwdiv
  5562  0FFF  0008               	return
  5563  1000                     __end_of___lwdiv:	
  5564                           
  5565                           	psect	text16
  5566  0ED0                     __ptext16:	
  5567 ;; *************** function _PROTOCOL_I2C_Set_TLV *****************
  5568 ;; Defined at:
  5569 ;;		line 213 in file "protocol.c"
  5570 ;; Parameters:    Size  Location     Type
  5571 ;;  type            1    wreg     unsigned char 
  5572 ;;  length          1    1[BANK0 ] unsigned char 
  5573 ;;  pbuffer         2    2[BANK0 ] PTR unsigned char 
  5574 ;;		 -> PROTOCOL_Send_uint8_t@pbuf(1), sendbuf(16), position(6), 
  5575 ;; Auto vars:     Size  Location     Type
  5576 ;;  type            1    5[BANK0 ] unsigned char 
  5577 ;;  status          1    6[BANK0 ] enum E3411
  5578 ;; Return value:  Size  Location     Type
  5579 ;;                  1    wreg      void 
  5580 ;; Registers used:
  5581 ;;		wreg, status,2, status,0
  5582 ;; Tracked objects:
  5583 ;;		On entry : 0/0
  5584 ;;		On exit  : 0/0
  5585 ;;		Unchanged: 0/0
  5586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5587 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5588 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5589 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5590 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5591 ;;Total ram usage:        6 bytes
  5592 ;; Hardware stack levels used:    1
  5593 ;; Hardware stack levels required when called:    5
  5594 ;; This function calls:
  5595 ;;		Nothing
  5596 ;; This function is called by:
  5597 ;;		_PROTOCOL_I2C_Send_uint8_t
  5598 ;; This function uses a non-reentrant model
  5599 ;;
  5600                           
  5601                           
  5602                           ;psect for function _PROTOCOL_I2C_Set_TLV
  5603  0ED0                     _PROTOCOL_I2C_Set_TLV:	
  5604                           
  5605                           ;incstack = 0
  5606                           ; Regs used in _PROTOCOL_I2C_Set_TLV: [wreg+status,2+status,0]
  5607                           ;PROTOCOL_I2C_Set_TLV@type stored from wreg
  5608  0ED0  0020               	movlb	0	; select bank0
  5609  0ED1  00A5               	movwf	PROTOCOL_I2C_Set_TLV@type
  5610                           
  5611                           ;protocol.c: 214: READBUF_STATUS status = readbuf.status;
  5612  0ED2  0021               	movlb	1	; select bank1
  5613  0ED3  0851               	movf	(_readbuf^(0+128)+4),w
  5614  0ED4  0020               	movlb	0	; select bank0
  5615  0ED5  00A4               	movwf	??_PROTOCOL_I2C_Set_TLV
  5616  0ED6  0824               	movf	??_PROTOCOL_I2C_Set_TLV,w
  5617  0ED7  00A6               	movwf	PROTOCOL_I2C_Set_TLV@status
  5618                           
  5619                           ;protocol.c: 215: if (status == COMPLETE) {
  5620  0ED8  3003               	movlw	3
  5621  0ED9  0626               	xorwf	PROTOCOL_I2C_Set_TLV@status,w
  5622  0EDA  1D03               	btfss	3,2
  5623  0EDB  0008               	return
  5624                           
  5625                           ;protocol.c: 216: readbuf.type = type;
  5626  0EDC  0825               	movf	PROTOCOL_I2C_Set_TLV@type,w
  5627  0EDD  00A4               	movwf	??_PROTOCOL_I2C_Set_TLV
  5628  0EDE  0824               	movf	??_PROTOCOL_I2C_Set_TLV,w
  5629  0EDF  0021               	movlb	1	; select bank1
  5630  0EE0  00CD               	movwf	_readbuf^(0+128)
  5631                           
  5632                           ;protocol.c: 217: readbuf.length = length;
  5633  0EE1  0020               	movlb	0	; select bank0
  5634  0EE2  0821               	movf	PROTOCOL_I2C_Set_TLV@length,w
  5635  0EE3  00A4               	movwf	??_PROTOCOL_I2C_Set_TLV
  5636  0EE4  0824               	movf	??_PROTOCOL_I2C_Set_TLV,w
  5637  0EE5  0021               	movlb	1	; select bank1
  5638  0EE6  00CE               	movwf	(_readbuf^(0+128)+1)
  5639                           
  5640                           ;protocol.c: 218: readbuf.pbuffer = pbuffer;
  5641  0EE7  0020               	movlb	0	; select bank0
  5642  0EE8  0823               	movf	PROTOCOL_I2C_Set_TLV@pbuffer+1,w
  5643  0EE9  0021               	movlb	1	; select bank1
  5644  0EEA  00D0               	movwf	((low ((_readbuf| 0+2))+1))^(0+128)
  5645  0EEB  0020               	movlb	0	; select bank0
  5646  0EEC  0822               	movf	PROTOCOL_I2C_Set_TLV@pbuffer,w
  5647  0EED  0021               	movlb	1	; select bank1
  5648  0EEE  00CF               	movwf	(low ((_readbuf| 0+2)))^(0+128)
  5649                           
  5650                           ;protocol.c: 219: readbuf.buf_cnt = 0;
  5651  0EEF  01D2               	clrf	(_readbuf^(0+128)+5)
  5652                           
  5653                           ;protocol.c: 220: readbuf.status = TLV_SET;
  5654  0EF0  01D1               	clrf	(_readbuf^(0+128)+4)
  5655  0EF1  0008               	return
  5656  0EF2                     __end_of_PROTOCOL_I2C_Set_TLV:	
  5657                           
  5658                           	psect	text17
  5659  0CD0                     __ptext17:	
  5660 ;; *************** function _ADC_StartConversion *****************
  5661 ;; Defined at:
  5662 ;;		line 90 in file "mcc_generated_files/adc.c"
  5663 ;; Parameters:    Size  Location     Type
  5664 ;;		None
  5665 ;; Auto vars:     Size  Location     Type
  5666 ;;		None
  5667 ;; Return value:  Size  Location     Type
  5668 ;;                  1    wreg      void 
  5669 ;; Registers used:
  5670 ;;		None
  5671 ;; Tracked objects:
  5672 ;;		On entry : 0/0
  5673 ;;		On exit  : 0/0
  5674 ;;		Unchanged: 0/0
  5675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5677 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5679 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5680 ;;Total ram usage:        0 bytes
  5681 ;; Hardware stack levels used:    1
  5682 ;; Hardware stack levels required when called:    5
  5683 ;; This function calls:
  5684 ;;		Nothing
  5685 ;; This function is called by:
  5686 ;;		_loop_func
  5687 ;; This function uses a non-reentrant model
  5688 ;;
  5689                           
  5690                           
  5691                           ;psect for function _ADC_StartConversion
  5692  0CD0                     _ADC_StartConversion:	
  5693                           
  5694                           ;adc.c: 93: ADCON0bits.GO_nDONE = 1;
  5695                           
  5696                           ;incstack = 0
  5697                           ; Regs used in _ADC_StartConversion: []
  5698  0CD0  0021               	movlb	1	; select bank1
  5699  0CD1  149D               	bsf	29,1	;volatile
  5700  0CD2  0008               	return
  5701  0CD3                     __end_of_ADC_StartConversion:	
  5702                           
  5703                           	psect	text18
  5704  0D94                     __ptext18:	
  5705 ;; *************** function _ADC_SelectChannel *****************
  5706 ;; Defined at:
  5707 ;;		line 82 in file "mcc_generated_files/adc.c"
  5708 ;; Parameters:    Size  Location     Type
  5709 ;;  channel         1    wreg     enum E2975
  5710 ;; Auto vars:     Size  Location     Type
  5711 ;;  channel         1    2[BANK0 ] enum E2975
  5712 ;; Return value:  Size  Location     Type
  5713 ;;                  1    wreg      void 
  5714 ;; Registers used:
  5715 ;;		wreg, status,2, status,0
  5716 ;; Tracked objects:
  5717 ;;		On entry : 0/0
  5718 ;;		On exit  : 0/0
  5719 ;;		Unchanged: 0/0
  5720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5722 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5723 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5724 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5725 ;;Total ram usage:        2 bytes
  5726 ;; Hardware stack levels used:    1
  5727 ;; Hardware stack levels required when called:    5
  5728 ;; This function calls:
  5729 ;;		Nothing
  5730 ;; This function is called by:
  5731 ;;		_loop_func
  5732 ;; This function uses a non-reentrant model
  5733 ;;
  5734                           
  5735                           
  5736                           ;psect for function _ADC_SelectChannel
  5737  0D94                     _ADC_SelectChannel:	
  5738                           
  5739                           ;incstack = 0
  5740                           ; Regs used in _ADC_SelectChannel: [wreg+status,2+status,0]
  5741                           ;ADC_SelectChannel@channel stored from wreg
  5742  0D94  0020               	movlb	0	; select bank0
  5743  0D95  00A2               	movwf	ADC_SelectChannel@channel
  5744                           
  5745                           ;adc.c: 85: ADCON0bits.CHS = channel;
  5746  0D96  0822               	movf	ADC_SelectChannel@channel,w
  5747  0D97  00A1               	movwf	??_ADC_SelectChannel
  5748  0D98  0DA1               	rlf	??_ADC_SelectChannel,f
  5749  0D99  0DA1               	rlf	??_ADC_SelectChannel,f
  5750  0D9A  0021               	movlb	1	; select bank1
  5751  0D9B  081D               	movf	29,w	;volatile
  5752  0D9C  0020               	movlb	0	; select bank0
  5753  0D9D  0621               	xorwf	??_ADC_SelectChannel,w
  5754  0D9E  3983               	andlw	-125
  5755  0D9F  0621               	xorwf	??_ADC_SelectChannel,w
  5756  0DA0  0021               	movlb	1	; select bank1
  5757  0DA1  009D               	movwf	29	;volatile
  5758                           
  5759                           ;adc.c: 87: ADCON0bits.ADON = 1;
  5760  0DA2  141D               	bsf	29,0	;volatile
  5761  0DA3  0008               	return
  5762  0DA4                     __end_of_ADC_SelectChannel:	
  5763                           
  5764                           	psect	text19
  5765  0D01                     __ptext19:	
  5766 ;; *************** function _ADC_IsConversionDone *****************
  5767 ;; Defined at:
  5768 ;;		line 97 in file "mcc_generated_files/adc.c"
  5769 ;; Parameters:    Size  Location     Type
  5770 ;;		None
  5771 ;; Auto vars:     Size  Location     Type
  5772 ;;		None
  5773 ;; Return value:  Size  Location     Type
  5774 ;;                  1    wreg      unsigned char 
  5775 ;; Registers used:
  5776 ;;		wreg, status,0
  5777 ;; Tracked objects:
  5778 ;;		On entry : 0/0
  5779 ;;		On exit  : 0/0
  5780 ;;		Unchanged: 0/0
  5781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5783 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5785 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5786 ;;Total ram usage:        0 bytes
  5787 ;; Hardware stack levels used:    1
  5788 ;; Hardware stack levels required when called:    5
  5789 ;; This function calls:
  5790 ;;		Nothing
  5791 ;; This function is called by:
  5792 ;;		_loop_func
  5793 ;; This function uses a non-reentrant model
  5794 ;;
  5795                           
  5796                           
  5797                           ;psect for function _ADC_IsConversionDone
  5798  0D01                     _ADC_IsConversionDone:	
  5799                           
  5800                           ;adc.c: 100: return (!ADCON0bits.GO_nDONE);
  5801                           
  5802                           ;incstack = 0
  5803                           ; Regs used in _ADC_IsConversionDone: [wreg+status,0]
  5804  0D01  1003               	clrc
  5805  0D02  0021               	movlb	1	; select bank1
  5806  0D03  1C9D               	btfss	29,1	;volatile
  5807  0D04  1403               	setc
  5808  0D05  3000               	movlw	0
  5809  0D06  3D09               	addwfc	9,w
  5810  0D07  0008               	return
  5811  0D08                     __end_of_ADC_IsConversionDone:	
  5812                           
  5813                           	psect	text20
  5814  0D22                     __ptext20:	
  5815 ;; *************** function _ADC_GetConversionResult *****************
  5816 ;; Defined at:
  5817 ;;		line 103 in file "mcc_generated_files/adc.c"
  5818 ;; Parameters:    Size  Location     Type
  5819 ;;		None
  5820 ;; Auto vars:     Size  Location     Type
  5821 ;;		None
  5822 ;; Return value:  Size  Location     Type
  5823 ;;                  2    1[BANK0 ] unsigned int 
  5824 ;; Registers used:
  5825 ;;		wreg
  5826 ;; Tracked objects:
  5827 ;;		On entry : 0/0
  5828 ;;		On exit  : 0/0
  5829 ;;		Unchanged: 0/0
  5830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5831 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5832 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5834 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5835 ;;Total ram usage:        2 bytes
  5836 ;; Hardware stack levels used:    1
  5837 ;; Hardware stack levels required when called:    5
  5838 ;; This function calls:
  5839 ;;		Nothing
  5840 ;; This function is called by:
  5841 ;;		_loop_func
  5842 ;; This function uses a non-reentrant model
  5843 ;;
  5844                           
  5845                           
  5846                           ;psect for function _ADC_GetConversionResult
  5847  0D22                     _ADC_GetConversionResult:	
  5848                           
  5849                           ;adc.c: 106: return ((ADRESH << 8) + ADRESL);
  5850                           
  5851                           ;incstack = 0
  5852                           ; Regs used in _ADC_GetConversionResult: [wreg]
  5853  0D22  0021               	movlb	1	; select bank1
  5854  0D23  081C               	movf	28,w	;volatile
  5855  0D24  0020               	movlb	0	; select bank0
  5856  0D25  00A2               	movwf	?_ADC_GetConversionResult+1
  5857  0D26  0021               	movlb	1	; select bank1
  5858  0D27  081B               	movf	27,w	;volatile
  5859  0D28  0020               	movlb	0	; select bank0
  5860  0D29  00A1               	movwf	?_ADC_GetConversionResult
  5861  0D2A  0008               	return
  5862  0D2B                     __end_of_ADC_GetConversionResult:	
  5863                           
  5864                           	psect	text21
  5865  0615                     __ptext21:	
  5866 ;; *************** function _atoi *****************
  5867 ;; Defined at:
  5868 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\atoi.c"
  5869 ;; Parameters:    Size  Location     Type
  5870 ;;  s               1    wreg     PTR const unsigned char 
  5871 ;;		 -> buf(48), 
  5872 ;; Auto vars:     Size  Location     Type
  5873 ;;  s               1   14[BANK0 ] PTR const unsigned char 
  5874 ;;		 -> buf(48), 
  5875 ;;  a               2   12[BANK0 ] int 
  5876 ;;  sign            1   11[BANK0 ] unsigned char 
  5877 ;; Return value:  Size  Location     Type
  5878 ;;                  2    7[BANK0 ] int 
  5879 ;; Registers used:
  5880 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5881 ;; Tracked objects:
  5882 ;;		On entry : 0/0
  5883 ;;		On exit  : 0/0
  5884 ;;		Unchanged: 0/0
  5885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5886 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5887 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5888 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5889 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5890 ;;Total ram usage:        8 bytes
  5891 ;; Hardware stack levels used:    1
  5892 ;; Hardware stack levels required when called:    6
  5893 ;; This function calls:
  5894 ;;		___wmul
  5895 ;;		_isdigit
  5896 ;; This function is called by:
  5897 ;;		_PROTOCOL_Loop
  5898 ;; This function uses a non-reentrant model
  5899 ;;
  5900                           
  5901                           
  5902                           ;psect for function _atoi
  5903  0615                     _atoi:	
  5904                           
  5905                           ;incstack = 0
  5906                           ; Regs used in _atoi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5907                           ;atoi@s stored from wreg
  5908  0615  0020               	movlb	0	; select bank0
  5909  0616  00AE               	movwf	atoi@s
  5910  0617                     l4047:	
  5911  0617  082E               	movf	atoi@s,w
  5912  0618  0086               	movwf	6
  5913  0619  3001               	movlw	1	; select bank2/3
  5914  061A  0087               	movwf	7
  5915  061B  3020               	movlw	32
  5916  061C  0601               	xorwf	1,w
  5917  061D  1D03               	btfss	3,2
  5918  061E  2E24               	goto	l4049
  5919  061F                     l4045:	
  5920  061F  3001               	movlw	1
  5921  0620  00A9               	movwf	??_atoi
  5922  0621  0829               	movf	??_atoi,w
  5923  0622  07AE               	addwf	atoi@s,f
  5924  0623  2E17               	goto	l4047
  5925  0624                     l4049:	
  5926  0624  082E               	movf	atoi@s,w
  5927  0625  0086               	movwf	6
  5928  0626  3001               	movlw	1	; select bank2/3
  5929  0627  0087               	movwf	7
  5930  0628  3009               	movlw	9
  5931  0629  0601               	xorwf	1,w
  5932  062A  1903               	btfsc	3,2
  5933  062B  2E1F               	goto	l4045
  5934  062C  01AC               	clrf	atoi@a
  5935  062D  01AD               	clrf	atoi@a+1
  5936  062E  01AB               	clrf	atoi@sign
  5937  062F  082E               	movf	atoi@s,w
  5938  0630  0086               	movwf	6
  5939  0631  3001               	movlw	1	; select bank2/3
  5940  0632  0087               	movwf	7
  5941  0633  302D               	movlw	45
  5942  0634  0601               	xorwf	1,w
  5943  0635  1D03               	btfss	3,2
  5944  0636  2E3C               	goto	l4057
  5945  0637  3001               	movlw	1
  5946  0638  00A9               	movwf	??_atoi
  5947  0639  0829               	movf	??_atoi,w
  5948  063A  07AB               	addwf	atoi@sign,f
  5949  063B  2E44               	goto	l4063
  5950  063C                     l4057:	
  5951  063C  082E               	movf	atoi@s,w
  5952  063D  0086               	movwf	6
  5953  063E  3001               	movlw	1	; select bank2/3
  5954  063F  0087               	movwf	7
  5955  0640  302B               	movlw	43
  5956  0641  0601               	xorwf	1,w
  5957  0642  1D03               	btfss	3,2
  5958  0643  2E48               	goto	l4065
  5959  0644                     l4063:	
  5960  0644  3001               	movlw	1
  5961  0645  00A9               	movwf	??_atoi
  5962  0646  0829               	movf	??_atoi,w
  5963  0647  07AE               	addwf	atoi@s,f
  5964  0648                     l4065:	
  5965  0648  082E               	movf	atoi@s,w
  5966  0649  0086               	movwf	6
  5967  064A  3001               	movlw	1	; select bank2/3
  5968  064B  0087               	movwf	7
  5969  064C  0801               	movf	1,w
  5970  064D  318D  2576  3186   	fcall	_isdigit
  5971  0650  1C03               	btfss	3,0
  5972  0651  2E71               	goto	l4067
  5973  0652  0020               	movlb	0	; select bank0
  5974  0653  082D               	movf	atoi@a+1,w
  5975  0654  00A2               	movwf	___wmul@multiplier+1
  5976  0655  082C               	movf	atoi@a,w
  5977  0656  00A1               	movwf	___wmul@multiplier
  5978  0657  300A               	movlw	10
  5979  0658  00A3               	movwf	___wmul@multiplicand
  5980  0659  3000               	movlw	0
  5981  065A  00A4               	movwf	___wmul@multiplicand+1
  5982  065B  318E  261B  3186   	fcall	___wmul
  5983  065E  0020               	movlb	0	; select bank0
  5984  065F  082E               	movf	atoi@s,w
  5985  0660  0086               	movwf	6
  5986  0661  3001               	movlw	1	; select bank2/3
  5987  0662  0087               	movwf	7
  5988  0663  0801               	movf	1,w
  5989  0664  0721               	addwf	?___wmul,w
  5990  0665  00A9               	movwf	??_atoi
  5991  0666  0822               	movf	?___wmul+1,w
  5992  0667  1803               	skipnc
  5993  0668  0A22               	incf	?___wmul+1,w
  5994  0669  00AA               	movwf	??_atoi+1
  5995  066A  0829               	movf	??_atoi,w
  5996  066B  3ED0               	addlw	208
  5997  066C  00AC               	movwf	atoi@a
  5998  066D  30FF               	movlw	255
  5999  066E  3D2A               	addwfc	??_atoi+1,w
  6000  066F  00AD               	movwf	atoi@a+1
  6001  0670  2E44               	goto	l4063
  6002  0671                     l4067:	
  6003  0671  0020               	movlb	0	; select bank0
  6004  0672  082B               	movf	atoi@sign,w
  6005  0673  1903               	btfsc	3,2
  6006  0674  2E81               	goto	l4073
  6007  0675  092C               	comf	atoi@a,w
  6008  0676  00A9               	movwf	??_atoi
  6009  0677  092D               	comf	atoi@a+1,w
  6010  0678  00AA               	movwf	??_atoi+1
  6011  0679  0AA9               	incf	??_atoi,f
  6012  067A  1903               	skipnz
  6013  067B  0AAA               	incf	??_atoi+1,f
  6014  067C  0829               	movf	??_atoi,w
  6015  067D  00A7               	movwf	?_atoi
  6016  067E  082A               	movf	??_atoi+1,w
  6017  067F  00A8               	movwf	?_atoi+1
  6018  0680  0008               	return
  6019  0681                     l4073:	
  6020  0681  082D               	movf	atoi@a+1,w
  6021  0682  00A8               	movwf	?_atoi+1
  6022  0683  082C               	movf	atoi@a,w
  6023  0684  00A7               	movwf	?_atoi
  6024  0685  0008               	return
  6025  0686                     __end_of_atoi:	
  6026                           
  6027                           	psect	text22
  6028  0D76                     __ptext22:	
  6029 ;; *************** function _isdigit *****************
  6030 ;; Defined at:
  6031 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  6032 ;; Parameters:    Size  Location     Type
  6033 ;;  c               1    wreg     unsigned char 
  6034 ;; Auto vars:     Size  Location     Type
  6035 ;;  c               1    2[BANK0 ] unsigned char 
  6036 ;; Return value:  Size  Location     Type
  6037 ;;		None               void
  6038 ;; Registers used:
  6039 ;;		wreg, status,2, status,0
  6040 ;; Tracked objects:
  6041 ;;		On entry : 0/0
  6042 ;;		On exit  : 0/0
  6043 ;;		Unchanged: 0/0
  6044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6046 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6048 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6049 ;;Total ram usage:        2 bytes
  6050 ;; Hardware stack levels used:    1
  6051 ;; Hardware stack levels required when called:    5
  6052 ;; This function calls:
  6053 ;;		Nothing
  6054 ;; This function is called by:
  6055 ;;		_printf
  6056 ;;		_atoi
  6057 ;; This function uses a non-reentrant model
  6058 ;;
  6059                           
  6060                           
  6061                           ;psect for function _isdigit
  6062  0D76                     _isdigit:	
  6063                           
  6064                           ;incstack = 0
  6065                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  6066                           ;isdigit@c stored from wreg
  6067  0D76  0020               	movlb	0	; select bank0
  6068  0D77  00A2               	movwf	isdigit@c
  6069  0D78  01A1               	clrf	_isdigit$1271
  6070  0D79  303A               	movlw	58
  6071  0D7A  0222               	subwf	isdigit@c,w
  6072  0D7B  1803               	skipnc
  6073  0D7C  2D83               	goto	l3535
  6074  0D7D  3030               	movlw	48
  6075  0D7E  0222               	subwf	isdigit@c,w
  6076  0D7F  1C03               	skipc
  6077  0D80  2D83               	goto	l3535
  6078  0D81  01A1               	clrf	_isdigit$1271
  6079  0D82  0AA1               	incf	_isdigit$1271,f
  6080  0D83                     l3535:	
  6081  0D83  0C21               	rrf	_isdigit$1271,w
  6082  0D84  0008               	return
  6083  0D85                     __end_of_isdigit:	
  6084                           
  6085                           	psect	text23
  6086  0E1B                     __ptext23:	
  6087 ;; *************** function ___wmul *****************
  6088 ;; Defined at:
  6089 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  6090 ;; Parameters:    Size  Location     Type
  6091 ;;  multiplier      2    1[BANK0 ] unsigned int 
  6092 ;;  multiplicand    2    3[BANK0 ] unsigned int 
  6093 ;; Auto vars:     Size  Location     Type
  6094 ;;  product         2    5[BANK0 ] unsigned int 
  6095 ;; Return value:  Size  Location     Type
  6096 ;;                  2    1[BANK0 ] unsigned int 
  6097 ;; Registers used:
  6098 ;;		wreg, status,2, status,0
  6099 ;; Tracked objects:
  6100 ;;		On entry : 0/0
  6101 ;;		On exit  : 0/0
  6102 ;;		Unchanged: 0/0
  6103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6104 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6105 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6107 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6108 ;;Total ram usage:        6 bytes
  6109 ;; Hardware stack levels used:    1
  6110 ;; Hardware stack levels required when called:    5
  6111 ;; This function calls:
  6112 ;;		Nothing
  6113 ;; This function is called by:
  6114 ;;		_printf
  6115 ;;		_atoi
  6116 ;; This function uses a non-reentrant model
  6117 ;;
  6118                           
  6119                           
  6120                           ;psect for function ___wmul
  6121  0E1B                     ___wmul:	
  6122                           
  6123                           ;incstack = 0
  6124                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6125  0E1B  0020               	movlb	0	; select bank0
  6126  0E1C  01A5               	clrf	___wmul@product
  6127  0E1D  01A6               	clrf	___wmul@product+1
  6128  0E1E                     l3541:	
  6129  0E1E  1C21               	btfss	___wmul@multiplier,0
  6130  0E1F  2E24               	goto	l944
  6131  0E20  0823               	movf	___wmul@multiplicand,w
  6132  0E21  07A5               	addwf	___wmul@product,f
  6133  0E22  0824               	movf	___wmul@multiplicand+1,w
  6134  0E23  3DA6               	addwfc	___wmul@product+1,f
  6135  0E24                     l944:	
  6136  0E24  3001               	movlw	1
  6137  0E25                     u2685:	
  6138  0E25  35A3               	lslf	___wmul@multiplicand,f
  6139  0E26  0DA4               	rlf	___wmul@multiplicand+1,f
  6140  0E27  0B89               	decfsz	9,f
  6141  0E28  2E25               	goto	u2685
  6142  0E29  3001               	movlw	1
  6143  0E2A                     u2695:	
  6144  0E2A  36A2               	lsrf	___wmul@multiplier+1,f
  6145  0E2B  0CA1               	rrf	___wmul@multiplier,f
  6146  0E2C  0B89               	decfsz	9,f
  6147  0E2D  2E2A               	goto	u2695
  6148  0E2E  0821               	movf	___wmul@multiplier,w
  6149  0E2F  0422               	iorwf	___wmul@multiplier+1,w
  6150  0E30  1D03               	btfss	3,2
  6151  0E31  2E1E               	goto	l3541
  6152  0E32  0826               	movf	___wmul@product+1,w
  6153  0E33  00A2               	movwf	?___wmul+1
  6154  0E34  0825               	movf	___wmul@product,w
  6155  0E35  00A1               	movwf	?___wmul
  6156  0E36  0008               	return
  6157  0E37                     __end_of___wmul:	
  6158                           
  6159                           	psect	text24
  6160  0CE3                     __ptext24:	
  6161 ;; *************** function _TMR0_HasOverflowOccured *****************
  6162 ;; Defined at:
  6163 ;;		line 101 in file "mcc_generated_files/tmr0.c"
  6164 ;; Parameters:    Size  Location     Type
  6165 ;;		None
  6166 ;; Auto vars:     Size  Location     Type
  6167 ;;		None
  6168 ;; Return value:  Size  Location     Type
  6169 ;;                  1    wreg      unsigned char 
  6170 ;; Registers used:
  6171 ;;		wreg, status,2, status,0
  6172 ;; Tracked objects:
  6173 ;;		On entry : 0/0
  6174 ;;		On exit  : 0/0
  6175 ;;		Unchanged: 0/0
  6176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6180 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6181 ;;Total ram usage:        0 bytes
  6182 ;; Hardware stack levels used:    1
  6183 ;; Hardware stack levels required when called:    5
  6184 ;; This function calls:
  6185 ;;		Nothing
  6186 ;; This function is called by:
  6187 ;;		_PROTOCOL_Loop
  6188 ;; This function uses a non-reentrant model
  6189 ;;
  6190                           
  6191                           
  6192                           ;psect for function _TMR0_HasOverflowOccured
  6193  0CE3                     _TMR0_HasOverflowOccured:	
  6194                           
  6195                           ;tmr0.c: 104: return(INTCONbits.TMR0IF);
  6196                           
  6197                           ;incstack = 0
  6198                           ; Regs used in _TMR0_HasOverflowOccured: [wreg+status,2+status,0]
  6199  0CE3  0C0B               	rrf	11,w	;volatile
  6200  0CE4  0C89               	rrf	9,f
  6201  0CE5  3901               	andlw	1
  6202  0CE6  0008               	return
  6203  0CE7                     __end_of_TMR0_HasOverflowOccured:	
  6204                           
  6205                           	psect	text25
  6206  0D67                     __ptext25:	
  6207 ;; *************** function _PROTOCOL_Write_Device_Address *****************
  6208 ;; Defined at:
  6209 ;;		line 89 in file "protocol.c"
  6210 ;; Parameters:    Size  Location     Type
  6211 ;;  device_id_i2    1    wreg     unsigned char 
  6212 ;; Auto vars:     Size  Location     Type
  6213 ;;  device_id_i2    1    5[BANK0 ] unsigned char 
  6214 ;; Return value:  Size  Location     Type
  6215 ;;                  1    wreg      void 
  6216 ;; Registers used:
  6217 ;;		wreg, status,2, status,0, pclath, cstack
  6218 ;; Tracked objects:
  6219 ;;		On entry : 0/0
  6220 ;;		On exit  : 0/0
  6221 ;;		Unchanged: 0/0
  6222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6224 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6225 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6226 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6227 ;;Total ram usage:        2 bytes
  6228 ;; Hardware stack levels used:    1
  6229 ;; Hardware stack levels required when called:    6
  6230 ;; This function calls:
  6231 ;;		_DATAEE_WriteByte
  6232 ;; This function is called by:
  6233 ;;		_PROTOCOL_Loop
  6234 ;; This function uses a non-reentrant model
  6235 ;;
  6236                           
  6237                           
  6238                           ;psect for function _PROTOCOL_Write_Device_Address
  6239  0D67                     _PROTOCOL_Write_Device_Address:	
  6240                           
  6241                           ;incstack = 0
  6242                           ; Regs used in _PROTOCOL_Write_Device_Address: [wreg+status,2+status,0+pclath+cstack]
  6243                           ;PROTOCOL_Write_Device_Address@device_id_i2c stored from wreg
  6244  0D67  0020               	movlb	0	; select bank0
  6245  0D68  00A5               	movwf	PROTOCOL_Write_Device_Address@device_id_i2c
  6246                           
  6247                           ;protocol.c: 90: DATAEE_WriteByte(0, device_id_i2c);
  6248  0D69  0825               	movf	PROTOCOL_Write_Device_Address@device_id_i2c,w
  6249  0D6A  00A4               	movwf	??_PROTOCOL_Write_Device_Address
  6250  0D6B  0824               	movf	??_PROTOCOL_Write_Device_Address,w
  6251  0D6C  00A1               	movwf	DATAEE_WriteByte@bData
  6252  0D6D  3000               	movlw	0
  6253  0D6E  3187  27DD         	fcall	_DATAEE_WriteByte
  6254                           
  6255                           ;protocol.c: 91: slave_address = device_id_i2c;
  6256  0D70  0020               	movlb	0	; select bank0
  6257  0D71  0825               	movf	PROTOCOL_Write_Device_Address@device_id_i2c,w
  6258  0D72  00A4               	movwf	??_PROTOCOL_Write_Device_Address
  6259  0D73  0824               	movf	??_PROTOCOL_Write_Device_Address,w
  6260  0D74  00DF               	movwf	_slave_address
  6261  0D75  0008               	return
  6262  0D76                     __end_of_PROTOCOL_Write_Device_Address:	
  6263                           
  6264                           	psect	text26
  6265  0CCD                     __ptext26:	
  6266 ;; *************** function _PROTOCOL_STP *****************
  6267 ;; Defined at:
  6268 ;;		line 103 in file "protocol.c"
  6269 ;; Parameters:    Size  Location     Type
  6270 ;;		None
  6271 ;; Auto vars:     Size  Location     Type
  6272 ;;		None
  6273 ;; Return value:  Size  Location     Type
  6274 ;;                  1    wreg      void 
  6275 ;; Registers used:
  6276 ;;		wreg, status,2, status,0
  6277 ;; Tracked objects:
  6278 ;;		On entry : 0/0
  6279 ;;		On exit  : 0/0
  6280 ;;		Unchanged: 0/0
  6281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6283 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6285 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6286 ;;Total ram usage:        0 bytes
  6287 ;; Hardware stack levels used:    1
  6288 ;; Hardware stack levels required when called:    5
  6289 ;; This function calls:
  6290 ;;		Nothing
  6291 ;; This function is called by:
  6292 ;;		_PROTOCOL_Loop
  6293 ;; This function uses a non-reentrant model
  6294 ;;
  6295                           
  6296                           
  6297                           ;psect for function _PROTOCOL_STP
  6298  0CCD                     _PROTOCOL_STP:	
  6299                           
  6300                           ;protocol.c: 105: running = 0;
  6301                           
  6302                           ;incstack = 0
  6303                           ; Regs used in _PROTOCOL_STP: [wreg+status,2+status,0]
  6304  0CCD  0020               	movlb	0	; select bank0
  6305  0CCE  01DB               	clrf	_running
  6306  0CCF  0008               	return
  6307  0CD0                     __end_of_PROTOCOL_STP:	
  6308                           
  6309                           	psect	text27
  6310  0CDF                     __ptext27:	
  6311 ;; *************** function _PROTOCOL_STA *****************
  6312 ;; Defined at:
  6313 ;;		line 98 in file "protocol.c"
  6314 ;; Parameters:    Size  Location     Type
  6315 ;;		None
  6316 ;; Auto vars:     Size  Location     Type
  6317 ;;		None
  6318 ;; Return value:  Size  Location     Type
  6319 ;;                  1    wreg      void 
  6320 ;; Registers used:
  6321 ;;		wreg, status,2, status,0
  6322 ;; Tracked objects:
  6323 ;;		On entry : 0/0
  6324 ;;		On exit  : 0/0
  6325 ;;		Unchanged: 0/0
  6326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6328 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6330 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6331 ;;Total ram usage:        0 bytes
  6332 ;; Hardware stack levels used:    1
  6333 ;; Hardware stack levels required when called:    5
  6334 ;; This function calls:
  6335 ;;		Nothing
  6336 ;; This function is called by:
  6337 ;;		_PROTOCOL_Loop
  6338 ;; This function uses a non-reentrant model
  6339 ;;
  6340                           
  6341                           
  6342                           ;psect for function _PROTOCOL_STA
  6343  0CDF                     _PROTOCOL_STA:	
  6344                           
  6345                           ;protocol.c: 100: running = 1;
  6346                           
  6347                           ;incstack = 0
  6348                           ; Regs used in _PROTOCOL_STA: [wreg+status,2+status,0]
  6349  0CDF  0020               	movlb	0	; select bank0
  6350  0CE0  01DB               	clrf	_running
  6351  0CE1  0ADB               	incf	_running,f
  6352  0CE2  0008               	return
  6353  0CE3                     __end_of_PROTOCOL_STA:	
  6354                           
  6355                           	psect	text28
  6356  0DB8                     __ptext28:	
  6357 ;; *************** function _PROTOCOL_SET *****************
  6358 ;; Defined at:
  6359 ;;		line 116 in file "protocol.c"
  6360 ;; Parameters:    Size  Location     Type
  6361 ;;  value_          1    wreg     unsigned char 
  6362 ;; Auto vars:     Size  Location     Type
  6363 ;;  value_          1    6[BANK0 ] unsigned char 
  6364 ;; Return value:  Size  Location     Type
  6365 ;;                  1    wreg      void 
  6366 ;; Registers used:
  6367 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6368 ;; Tracked objects:
  6369 ;;		On entry : 0/0
  6370 ;;		On exit  : 0/0
  6371 ;;		Unchanged: 0/0
  6372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6374 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6375 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6376 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6377 ;;Total ram usage:        2 bytes
  6378 ;; Hardware stack levels used:    1
  6379 ;; Hardware stack levels required when called:    6
  6380 ;; This function calls:
  6381 ;;		Absolute function
  6382 ;;		_set_handler
  6383 ;; This function is called by:
  6384 ;;		_PROTOCOL_Loop
  6385 ;; This function uses a non-reentrant model
  6386 ;;
  6387                           
  6388                           
  6389                           ;psect for function _PROTOCOL_SET
  6390  0DB8                     _PROTOCOL_SET:	
  6391                           
  6392                           ;incstack = 0
  6393                           ; Regs used in _PROTOCOL_SET: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6394                           ;PROTOCOL_SET@value_ stored from wreg
  6395  0DB8  0020               	movlb	0	; select bank0
  6396  0DB9  00A6               	movwf	PROTOCOL_SET@value_
  6397                           
  6398                           ;protocol.c: 117: value = value_;
  6399  0DBA  0826               	movf	PROTOCOL_SET@value_,w
  6400  0DBB  00A5               	movwf	??_PROTOCOL_SET
  6401  0DBC  0825               	movf	??_PROTOCOL_SET,w
  6402  0DBD  00DD               	movwf	_value
  6403                           
  6404                           ;protocol.c: 118: if (PROTOCOL_Set_Handler) PROTOCOL_Set_Handler(value);
  6405  0DBE  0851               	movf	_PROTOCOL_Set_Handler,w
  6406  0DBF  0452               	iorwf	_PROTOCOL_Set_Handler+1,w
  6407  0DC0  1903               	btfsc	3,2
  6408  0DC1  0008               	return
  6409  0DC2  085D               	movf	_value,w
  6410  0DC3  00A5               	movwf	??_PROTOCOL_SET
  6411  0DC4  0825               	movf	??_PROTOCOL_SET,w
  6412  0DC5  00A1               	movwf	set_handler@value
  6413  0DC6  0852               	movf	_PROTOCOL_Set_Handler+1,w
  6414  0DC7  008A               	movwf	10
  6415  0DC8  0851               	movf	_PROTOCOL_Set_Handler,w
  6416  0DC9  000A               	callw
  6417  0DCA  318D               	pagesel	$
  6418  0DCB  0008               	return
  6419  0DCC                     __end_of_PROTOCOL_SET:	
  6420                           
  6421                           	psect	text29
  6422  0D19                     __ptext29:	
  6423 ;; *************** function _PROTOCOL_SAV *****************
  6424 ;; Defined at:
  6425 ;;		line 112 in file "protocol.c"
  6426 ;; Parameters:    Size  Location     Type
  6427 ;;		None
  6428 ;; Auto vars:     Size  Location     Type
  6429 ;;		None
  6430 ;; Return value:  Size  Location     Type
  6431 ;;                  1    wreg      void 
  6432 ;; Registers used:
  6433 ;;		wreg, status,2, status,0, pclath, cstack
  6434 ;; Tracked objects:
  6435 ;;		On entry : 0/0
  6436 ;;		On exit  : 0/0
  6437 ;;		Unchanged: 0/0
  6438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6440 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6441 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6442 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6443 ;;Total ram usage:        1 bytes
  6444 ;; Hardware stack levels used:    1
  6445 ;; Hardware stack levels required when called:    6
  6446 ;; This function calls:
  6447 ;;		_DATAEE_WriteByte
  6448 ;; This function is called by:
  6449 ;;		_PROTOCOL_Loop
  6450 ;; This function uses a non-reentrant model
  6451 ;;
  6452                           
  6453                           
  6454                           ;psect for function _PROTOCOL_SAV
  6455  0D19                     _PROTOCOL_SAV:	
  6456                           
  6457                           ;protocol.c: 113: DATAEE_WriteByte(1, value);
  6458                           
  6459                           ;incstack = 0
  6460                           ; Regs used in _PROTOCOL_SAV: [wreg+status,2+status,0+pclath+cstack]
  6461  0D19  0020               	movlb	0	; select bank0
  6462  0D1A  085D               	movf	_value,w
  6463  0D1B  00A4               	movwf	??_PROTOCOL_SAV
  6464  0D1C  0824               	movf	??_PROTOCOL_SAV,w
  6465  0D1D  00A1               	movwf	DATAEE_WriteByte@bData
  6466  0D1E  3001               	movlw	1
  6467  0D1F  3187  27DD         	fcall	_DATAEE_WriteByte
  6468  0D21  0008               	return
  6469  0D22                     __end_of_PROTOCOL_SAV:	
  6470                           
  6471                           	psect	text30
  6472  07DD                     __ptext30:	
  6473 ;; *************** function _DATAEE_WriteByte *****************
  6474 ;; Defined at:
  6475 ;;		line 180 in file "mcc_generated_files/memory.c"
  6476 ;; Parameters:    Size  Location     Type
  6477 ;;  bAdd            1    wreg     unsigned char 
  6478 ;;  bData           1    1[BANK0 ] unsigned char 
  6479 ;; Auto vars:     Size  Location     Type
  6480 ;;  bAdd            1    2[BANK0 ] unsigned char 
  6481 ;;  GIEBitValue     1    3[BANK0 ] unsigned char 
  6482 ;; Return value:  Size  Location     Type
  6483 ;;                  1    wreg      void 
  6484 ;; Registers used:
  6485 ;;		wreg, status,2, status,0
  6486 ;; Tracked objects:
  6487 ;;		On entry : 0/0
  6488 ;;		On exit  : 0/0
  6489 ;;		Unchanged: 0/0
  6490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6491 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6492 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6494 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6495 ;;Total ram usage:        3 bytes
  6496 ;; Hardware stack levels used:    1
  6497 ;; Hardware stack levels required when called:    5
  6498 ;; This function calls:
  6499 ;;		Nothing
  6500 ;; This function is called by:
  6501 ;;		_PROTOCOL_Write_Device_Address
  6502 ;;		_PROTOCOL_SAV
  6503 ;; This function uses a non-reentrant model
  6504 ;;
  6505                           
  6506                           
  6507                           ;psect for function _DATAEE_WriteByte
  6508  07DD                     _DATAEE_WriteByte:	
  6509                           
  6510                           ;incstack = 0
  6511                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
  6512                           ;DATAEE_WriteByte@bAdd stored from wreg
  6513  07DD  0020               	movlb	0	; select bank0
  6514  07DE  00A2               	movwf	DATAEE_WriteByte@bAdd
  6515                           
  6516                           ;memory.c: 182: uint8_t GIEBitValue = 0;
  6517  07DF  01A3               	clrf	DATAEE_WriteByte@GIEBitValue
  6518                           
  6519                           ;memory.c: 184: EEADRL = (bAdd & 0x0ff);
  6520  07E0  0822               	movf	DATAEE_WriteByte@bAdd,w
  6521  07E1  0023               	movlb	3	; select bank3
  6522  07E2  0091               	movwf	17	;volatile
  6523                           
  6524                           ;memory.c: 185: EEDATL = bData;
  6525  07E3  0020               	movlb	0	; select bank0
  6526  07E4  0821               	movf	DATAEE_WriteByte@bData,w
  6527  07E5  0023               	movlb	3	; select bank3
  6528  07E6  0093               	movwf	19	;volatile
  6529                           
  6530                           ;memory.c: 186: EECON1bits.EEPGD = 0;
  6531  07E7  1395               	bcf	21,7	;volsfr
  6532                           
  6533                           ;memory.c: 187: EECON1bits.CFGS = 0;
  6534  07E8  1315               	bcf	21,6	;volsfr
  6535                           
  6536                           ;memory.c: 188: EECON1bits.WREN = 1;
  6537  07E9  1515               	bsf	21,2	;volsfr
  6538                           
  6539                           ;memory.c: 190: GIEBitValue = INTCONbits.GIE;
  6540  07EA  3000               	movlw	0
  6541  07EB  1B8B               	btfsc	11,7	;volatile
  6542  07EC  3001               	movlw	1
  6543  07ED  0020               	movlb	0	; select bank0
  6544  07EE  00A3               	movwf	DATAEE_WriteByte@GIEBitValue
  6545                           
  6546                           ;memory.c: 191: INTCONbits.GIE = 0;
  6547  07EF  138B               	bcf	11,7	;volatile
  6548                           
  6549                           ;memory.c: 192: EECON2 = 0x55;
  6550  07F0  3055               	movlw	85
  6551  07F1  0023               	movlb	3	; select bank3
  6552  07F2  0096               	movwf	22	;volsfr
  6553                           
  6554                           ;memory.c: 193: EECON2 = 0xAA;
  6555  07F3  30AA               	movlw	170
  6556  07F4  0096               	movwf	22	;volsfr
  6557                           
  6558                           ;memory.c: 194: EECON1bits.WR = 1;
  6559  07F5  1495               	bsf	21,1	;volsfr
  6560  07F6                     l321:	
  6561                           ;memory.c: 197: {
  6562                           
  6563                           ;memory.c: 196: while (EECON1bits.WR)
  6564                           
  6565  07F6  1895               	btfsc	21,1	;volsfr
  6566  07F7  2FF6               	goto	l321
  6567                           
  6568                           ;memory.c: 198: }
  6569                           ;memory.c: 200: EECON1bits.WREN = 0;
  6570  07F8  1115               	bcf	21,2	;volsfr
  6571                           
  6572                           ;memory.c: 201: INTCONbits.GIE = GIEBitValue;
  6573  07F9  0020               	movlb	0	; select bank0
  6574  07FA  0C23               	rrf	DATAEE_WriteByte@GIEBitValue,w
  6575  07FB  1C03               	skipc
  6576  07FC  138B               	bcf	11,7	;volatile
  6577  07FD  1803               	skipnc
  6578  07FE  178B               	bsf	11,7	;volatile
  6579  07FF  0008               	return
  6580  0800                     __end_of_DATAEE_WriteByte:	
  6581                           
  6582                           	psect	text31
  6583  0002                     __ptext31:	
  6584 ;; *************** function _PROTOCOL_EXT *****************
  6585 ;; Defined at:
  6586 ;;		line 121 in file "protocol.c"
  6587 ;; Parameters:    Size  Location     Type
  6588 ;;  char_buf        1    wreg     PTR unsigned char 
  6589 ;;		 -> buf(48), I2C1_StatusCallback@ext_buf(48), 
  6590 ;; Auto vars:     Size  Location     Type
  6591 ;;  char_buf        1    1[BANK0 ] PTR unsigned char 
  6592 ;;		 -> buf(48), I2C1_StatusCallback@ext_buf(48), 
  6593 ;; Return value:  Size  Location     Type
  6594 ;;                  1    wreg      void 
  6595 ;; Registers used:
  6596 ;;		wreg, status,2, status,0
  6597 ;; Tracked objects:
  6598 ;;		On entry : 0/0
  6599 ;;		On exit  : 0/0
  6600 ;;		Unchanged: 0/0
  6601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6603 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6605 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6606 ;;Total ram usage:        1 bytes
  6607 ;; Hardware stack levels used:    1
  6608 ;; Hardware stack levels required when called:    5
  6609 ;; This function calls:
  6610 ;;		Nothing
  6611 ;; This function is called by:
  6612 ;;		_PROTOCOL_Loop
  6613 ;; This function uses a non-reentrant model
  6614 ;;
  6615                           
  6616                           
  6617                           ;psect for function _PROTOCOL_EXT
  6618  0002                     _PROTOCOL_EXT:	
  6619                           
  6620                           ;incstack = 0
  6621                           ; Regs used in _PROTOCOL_EXT: [wreg+status,2+status,0]
  6622  0002  0008               	return
  6623  0003                     __end_of_PROTOCOL_EXT:	
  6624                           
  6625                           	psect	text32
  6626  0E90                     __ptext32:	
  6627 ;; *************** function _EUSART_Read *****************
  6628 ;; Defined at:
  6629 ;;		line 112 in file "mcc_generated_files/eusart.c"
  6630 ;; Parameters:    Size  Location     Type
  6631 ;;		None
  6632 ;; Auto vars:     Size  Location     Type
  6633 ;;  readValue       1    2[BANK0 ] unsigned char 
  6634 ;; Return value:  Size  Location     Type
  6635 ;;                  1    wreg      unsigned char 
  6636 ;; Registers used:
  6637 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6638 ;; Tracked objects:
  6639 ;;		On entry : 0/0
  6640 ;;		On exit  : 0/0
  6641 ;;		Unchanged: 0/0
  6642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6644 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6645 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6646 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6647 ;;Total ram usage:        2 bytes
  6648 ;; Hardware stack levels used:    1
  6649 ;; Hardware stack levels required when called:    5
  6650 ;; This function calls:
  6651 ;;		Nothing
  6652 ;; This function is called by:
  6653 ;;		_PROTOCOL_Loop
  6654 ;;		_getch
  6655 ;; This function uses a non-reentrant model
  6656 ;;
  6657                           
  6658                           
  6659                           ;psect for function _EUSART_Read
  6660  0E90                     _EUSART_Read:	
  6661                           
  6662                           ;eusart.c: 114: uint8_t readValue = 0;
  6663                           
  6664                           ;incstack = 0
  6665                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  6666  0E90  0020               	movlb	0	; select bank0
  6667  0E91  01A2               	clrf	EUSART_Read@readValue
  6668  0E92                     l3937:	
  6669                           ;eusart.c: 117: {
  6670                           
  6671                           ;eusart.c: 116: while(0 == eusartRxCount)
  6672                           
  6673  0E92  0861               	movf	_eusartRxCount,w	;volatile
  6674  0E93  1903               	btfsc	3,2
  6675  0E94  2E92               	goto	l3937
  6676                           
  6677                           ;eusart.c: 118: }
  6678                           ;eusart.c: 120: readValue = eusartRxBuffer[eusartRxTail++];
  6679  0E95  0862               	movf	_eusartRxTail,w
  6680  0E96  3EA0               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  6681  0E97  0086               	movwf	6
  6682  0E98  0187               	clrf	7
  6683  0E99  0801               	movf	1,w
  6684  0E9A  00A1               	movwf	??_EUSART_Read
  6685  0E9B  0821               	movf	??_EUSART_Read,w
  6686  0E9C  00A2               	movwf	EUSART_Read@readValue
  6687  0E9D  3001               	movlw	1
  6688  0E9E  00A1               	movwf	??_EUSART_Read
  6689  0E9F  0821               	movf	??_EUSART_Read,w
  6690  0EA0  07E2               	addwf	_eusartRxTail,f	;volatile
  6691                           
  6692                           ;eusart.c: 121: if(sizeof(eusartRxBuffer) <= eusartRxTail)
  6693  0EA1  3008               	movlw	8
  6694  0EA2  0262               	subwf	_eusartRxTail,w	;volatile
  6695  0EA3  1803               	btfsc	3,0
  6696                           
  6697                           ;eusart.c: 122: {
  6698                           ;eusart.c: 123: eusartRxTail = 0;
  6699  0EA4  01E2               	clrf	_eusartRxTail	;volatile
  6700                           
  6701                           ;eusart.c: 124: }
  6702                           ;eusart.c: 125: PIE1bits.RCIE = 0;
  6703  0EA5  0021               	movlb	1	; select bank1
  6704  0EA6  1291               	bcf	17,5	;volatile
  6705                           
  6706                           ;eusart.c: 126: eusartRxCount--;
  6707  0EA7  3001               	movlw	1
  6708  0EA8  0020               	movlb	0	; select bank0
  6709  0EA9  02E1               	subwf	_eusartRxCount,f	;volatile
  6710                           
  6711                           ;eusart.c: 127: PIE1bits.RCIE = 1;
  6712  0EAA  0021               	movlb	1	; select bank1
  6713  0EAB  1691               	bsf	17,5	;volatile
  6714                           
  6715                           ;eusart.c: 129: return readValue;
  6716  0EAC  0020               	movlb	0	; select bank0
  6717  0EAD  0822               	movf	EUSART_Read@readValue,w
  6718  0EAE  0008               	return
  6719  0EAF                     __end_of_EUSART_Read:	
  6720                           
  6721                           	psect	text33
  6722  0686                     __ptext33:	
  6723 ;; *************** function _PROTOCOL_Initialize *****************
  6724 ;; Defined at:
  6725 ;;		line 60 in file "protocol.c"
  6726 ;; Parameters:    Size  Location     Type
  6727 ;;  device_id       2    5[BANK0 ] PTR const unsigned char 
  6728 ;;		 -> STR_1(17), 
  6729 ;;  start_handle    1    7[BANK0 ] PTR void 
  6730 ;;		 -> NULL(0), 
  6731 ;;  stop_handler    1    8[BANK0 ] PTR void 
  6732 ;;		 -> NULL(0), 
  6733 ;;  set_handler     2    9[BANK0 ] PTR void 
  6734 ;;		 -> set_handler(1), 
  6735 ;;  inv_handler     1   11[BANK0 ] PTR void 
  6736 ;;		 -> NULL(0), 
  6737 ;;  scaler          1   12[BANK0 ] unsigned char 
  6738 ;; Auto vars:     Size  Location     Type
  6739 ;;		None
  6740 ;; Return value:  Size  Location     Type
  6741 ;;                  1    wreg      void 
  6742 ;; Registers used:
  6743 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6744 ;; Tracked objects:
  6745 ;;		On entry : 0/0
  6746 ;;		On exit  : 0/0
  6747 ;;		Unchanged: 0/0
  6748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6749 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6750 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6751 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6752 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6753 ;;Total ram usage:       10 bytes
  6754 ;; Hardware stack levels used:    1
  6755 ;; Hardware stack levels required when called:    6
  6756 ;; This function calls:
  6757 ;;		Absolute function
  6758 ;;		_DATAEE_ReadByte
  6759 ;;		_set_handler
  6760 ;; This function is called by:
  6761 ;;		_main
  6762 ;; This function uses a non-reentrant model
  6763 ;;
  6764                           
  6765                           
  6766                           ;psect for function _PROTOCOL_Initialize
  6767  0686                     _PROTOCOL_Initialize:	
  6768                           
  6769                           ;protocol.c: 61: device_id_ = device_id;
  6770                           
  6771                           ;incstack = 0
  6772                           ; Regs used in _PROTOCOL_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6773  0686  0020               	movlb	0	; select bank0
  6774  0687  0826               	movf	PROTOCOL_Initialize@device_id+1,w
  6775  0688  0021               	movlb	1	; select bank1
  6776  0689  00BF               	movwf	(_device_id_+1)^(0+128)
  6777  068A  0020               	movlb	0	; select bank0
  6778  068B  0825               	movf	PROTOCOL_Initialize@device_id,w
  6779  068C  0021               	movlb	1	; select bank1
  6780  068D  00BE               	movwf	_device_id_^(0+128)
  6781                           
  6782                           ;protocol.c: 62: PROTOCOL_Start_Handler = start_handler;
  6783  068E  0020               	movlb	0	; select bank0
  6784  068F  0827               	movf	PROTOCOL_Initialize@start_handler,w
  6785  0690  00AD               	movwf	??_PROTOCOL_Initialize
  6786  0691  3000               	movlw	0
  6787  0692  00AE               	movwf	??_PROTOCOL_Initialize+1
  6788  0693  082D               	movf	??_PROTOCOL_Initialize,w
  6789  0694  0021               	movlb	1	; select bank1
  6790  0695  00C8               	movwf	_PROTOCOL_Start_Handler^(0+128)
  6791  0696  0020               	movlb	0	; select bank0
  6792  0697  082E               	movf	??_PROTOCOL_Initialize+1,w
  6793  0698  0021               	movlb	1	; select bank1
  6794  0699  00C9               	movwf	(_PROTOCOL_Start_Handler+1)^(0+128)
  6795                           
  6796                           ;protocol.c: 63: PROTOCOL_Stop_Handler = stop_handler;
  6797  069A  0020               	movlb	0	; select bank0
  6798  069B  0828               	movf	PROTOCOL_Initialize@stop_handler,w
  6799  069C  00AD               	movwf	??_PROTOCOL_Initialize
  6800  069D  3000               	movlw	0
  6801  069E  00AE               	movwf	??_PROTOCOL_Initialize+1
  6802  069F  082D               	movf	??_PROTOCOL_Initialize,w
  6803  06A0  00D3               	movwf	_PROTOCOL_Stop_Handler
  6804  06A1  082E               	movf	??_PROTOCOL_Initialize+1,w
  6805  06A2  00D4               	movwf	_PROTOCOL_Stop_Handler+1
  6806                           
  6807                           ;protocol.c: 64: PROTOCOL_Set_Handler = set_handler;
  6808  06A3  082A               	movf	PROTOCOL_Initialize@set_handler+1,w
  6809  06A4  00D2               	movwf	_PROTOCOL_Set_Handler+1
  6810  06A5  0829               	movf	PROTOCOL_Initialize@set_handler,w
  6811  06A6  00D1               	movwf	_PROTOCOL_Set_Handler
  6812                           
  6813                           ;protocol.c: 67: value = DATAEE_ReadByte(1);
  6814  06A7  3001               	movlw	1
  6815  06A8  318D  253E  3186   	fcall	_DATAEE_ReadByte
  6816  06AB  0020               	movlb	0	; select bank0
  6817  06AC  00AD               	movwf	??_PROTOCOL_Initialize
  6818  06AD  082D               	movf	??_PROTOCOL_Initialize,w
  6819  06AE  00DD               	movwf	_value
  6820                           
  6821                           ;protocol.c: 68: if (PROTOCOL_Set_Handler) PROTOCOL_Set_Handler(value);
  6822  06AF  0851               	movf	_PROTOCOL_Set_Handler,w
  6823  06B0  0452               	iorwf	_PROTOCOL_Set_Handler+1,w
  6824  06B1  1903               	btfsc	3,2
  6825  06B2  2EBC               	goto	l5055
  6826  06B3  085D               	movf	_value,w
  6827  06B4  00AD               	movwf	??_PROTOCOL_Initialize
  6828  06B5  082D               	movf	??_PROTOCOL_Initialize,w
  6829  06B6  00A1               	movwf	set_handler@value
  6830  06B7  0852               	movf	_PROTOCOL_Set_Handler+1,w
  6831  06B8  008A               	movwf	10
  6832  06B9  0851               	movf	_PROTOCOL_Set_Handler,w
  6833  06BA  000A               	callw
  6834  06BB  3186               	pagesel	$
  6835  06BC                     l5055:	
  6836                           
  6837                           ;protocol.c: 69: slave_address = DATAEE_ReadByte(0);
  6838  06BC  3000               	movlw	0
  6839  06BD  318D  253E         	fcall	_DATAEE_ReadByte
  6840  06BF  0020               	movlb	0	; select bank0
  6841  06C0  00AD               	movwf	??_PROTOCOL_Initialize
  6842  06C1  082D               	movf	??_PROTOCOL_Initialize,w
  6843  06C2  00DF               	movwf	_slave_address
  6844                           
  6845                           ;protocol.c: 72: readbuf.status = COMPLETE;
  6846  06C3  3003               	movlw	3
  6847  06C4  00AD               	movwf	??_PROTOCOL_Initialize
  6848  06C5  082D               	movf	??_PROTOCOL_Initialize,w
  6849  06C6  0021               	movlb	1	; select bank1
  6850  06C7  00D1               	movwf	(_readbuf^(0+128)+4)
  6851                           
  6852                           ;protocol.c: 73: PROTOCOL_Inv_Handler = inv_handler;
  6853  06C8  0020               	movlb	0	; select bank0
  6854  06C9  082B               	movf	PROTOCOL_Initialize@inv_handler,w
  6855  06CA  00AD               	movwf	??_PROTOCOL_Initialize
  6856  06CB  3000               	movlw	0
  6857  06CC  00AE               	movwf	??_PROTOCOL_Initialize+1
  6858  06CD  082D               	movf	??_PROTOCOL_Initialize,w
  6859  06CE  0021               	movlb	1	; select bank1
  6860  06CF  00C2               	movwf	_PROTOCOL_Inv_Handler^(0+128)
  6861  06D0  0020               	movlb	0	; select bank0
  6862  06D1  082E               	movf	??_PROTOCOL_Initialize+1,w
  6863  06D2  0021               	movlb	1	; select bank1
  6864  06D3  00C3               	movwf	(_PROTOCOL_Inv_Handler+1)^(0+128)
  6865                           
  6866                           ;protocol.c: 74: tmr_scaler = scaler;
  6867  06D4  0020               	movlb	0	; select bank0
  6868  06D5  082C               	movf	PROTOCOL_Initialize@scaler,w
  6869  06D6  00AD               	movwf	??_PROTOCOL_Initialize
  6870  06D7  082D               	movf	??_PROTOCOL_Initialize,w
  6871  06D8  00EA               	movwf	_tmr_scaler
  6872  06D9  0008               	return
  6873  06DA                     __end_of_PROTOCOL_Initialize:	
  6874                           
  6875                           	psect	text34
  6876  0F98                     __ptext34:	
  6877 ;; *************** function _set_handler *****************
  6878 ;; Defined at:
  6879 ;;		line 67 in file "main.c"
  6880 ;; Parameters:    Size  Location     Type
  6881 ;;  value           1    1[BANK0 ] unsigned char 
  6882 ;; Auto vars:     Size  Location     Type
  6883 ;;  i               1    4[BANK0 ] unsigned char 
  6884 ;;  mask            1    3[BANK0 ] unsigned char 
  6885 ;; Return value:  Size  Location     Type
  6886 ;;                  1    wreg      void 
  6887 ;; Registers used:
  6888 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  6889 ;; Tracked objects:
  6890 ;;		On entry : 0/0
  6891 ;;		On exit  : 0/0
  6892 ;;		Unchanged: 0/0
  6893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6894 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6895 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6896 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6897 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6898 ;;Total ram usage:        4 bytes
  6899 ;; Hardware stack levels used:    1
  6900 ;; Hardware stack levels required when called:    5
  6901 ;; This function calls:
  6902 ;;		Nothing
  6903 ;; This function is called by:
  6904 ;;		_main
  6905 ;;		i1_PROTOCOL_SET
  6906 ;;		_PROTOCOL_SET
  6907 ;;		_PROTOCOL_Initialize
  6908 ;; This function uses a non-reentrant model
  6909 ;;
  6910                           
  6911                           
  6912                           ;psect for function _set_handler
  6913  0F98                     _set_handler:	
  6914                           
  6915                           ;Skip over the trampoline to the duplicate function for level 1
  6916  0F98  1C7E               	btfss	126,0
  6917  0F99  2F9C               	goto	l3783
  6918  0F9A  318F  2F6A         	ljmp	i1l2749
  6919  0F9C                     _set_handler$intlevel0:	
  6920  0F9C                     l3783:	
  6921                           ;incstack = 0
  6922                           ; Regs used in _set_handler: [wreg-fsr1h+status,2+status,0+pclath]
  6923                           
  6924                           
  6925                           ;main.c: 68: uint8_t i;
  6926                           ;main.c: 69: uint8_t mask = 0b00000001;
  6927  0F9C  0020               	movlb	0	; select bank0
  6928  0F9D  01A3               	clrf	set_handler@mask
  6929  0F9E  0AA3               	incf	set_handler@mask,f
  6930                           
  6931                           ;main.c: 70: for(i=0; i<6; i++) {
  6932  0F9F  01A4               	clrf	set_handler@i
  6933  0FA0                     L5:	
  6934  0FA0  3006               	movlw	6
  6935  0FA1  0224               	subwf	set_handler@i,w
  6936  0FA2  1803               	btfsc	3,0
  6937  0FA3  0008               	return
  6938                           
  6939                           ;main.c: 71: if ((value & mask) == 0) {
  6940  0FA4  0821               	movf	set_handler@value,w
  6941  0FA5  0523               	andwf	set_handler@mask,w
  6942  0FA6  1D03               	btfss	3,2
  6943  0FA7  2FB3               	goto	l3795
  6944                           
  6945                           ;main.c: 72: analog_in[i] = 0;
  6946  0FA8  0824               	movf	set_handler@i,w
  6947  0FA9  3EB6               	addlw	(low (_analog_in| 0))& (0+255)
  6948  0FAA  0086               	movwf	6
  6949  0FAB  0187               	clrf	7
  6950  0FAC  0181               	clrf	1
  6951                           
  6952                           ;main.c: 73: position[i] = 0;
  6953  0FAD  0824               	movf	set_handler@i,w
  6954  0FAE  3ED3               	addlw	(low (_position| 0))& (0+255)
  6955  0FAF  0086               	movwf	6
  6956  0FB0  0187               	clrf	7
  6957  0FB1  0181               	clrf	1
  6958                           
  6959                           ;main.c: 74: } else {
  6960  0FB2  2FC2               	goto	l3797
  6961  0FB3                     l3795:	
  6962                           
  6963                           ;main.c: 75: analog_in[i] = ANALOG_IN[i];
  6964  0FB3  0824               	movf	set_handler@i,w
  6965  0FB4  3ED8               	addlw	low (_ANALOG_IN| (0+32768))
  6966  0FB5  0084               	movwf	4
  6967  0FB6  3083               	movlw	high (_ANALOG_IN| (0+32768))
  6968  0FB7  1803               	skipnc
  6969  0FB8  3E01               	addlw	1
  6970  0FB9  0085               	movwf	5
  6971  0FBA  0800               	movf	0,w	;code access
  6972  0FBB  00A2               	movwf	??_set_handler
  6973  0FBC  0824               	movf	set_handler@i,w
  6974  0FBD  3EB6               	addlw	(low (_analog_in| 0))& (0+255)
  6975  0FBE  0086               	movwf	6
  6976  0FBF  0187               	clrf	7
  6977  0FC0  0822               	movf	??_set_handler,w
  6978  0FC1  0081               	movwf	1
  6979  0FC2                     l3797:	
  6980                           
  6981                           ;main.c: 76: }
  6982                           ;main.c: 77: mask = mask << 1;
  6983  0FC2  3523               	lslf	set_handler@mask,w
  6984  0FC3  00A2               	movwf	??_set_handler
  6985  0FC4  0822               	movf	??_set_handler,w
  6986  0FC5  00A3               	movwf	set_handler@mask
  6987  0FC6  3001               	movlw	1
  6988  0FC7  00A2               	movwf	??_set_handler
  6989  0FC8  0822               	movf	??_set_handler,w
  6990  0FC9  07A4               	addwf	set_handler@i,f
  6991  0FCA  2FA0               	goto	L5
  6992  0FCB                     __end_of_set_handler:	
  6993                           
  6994                           	psect	text35
  6995  0D3E                     __ptext35:	
  6996 ;; *************** function _DATAEE_ReadByte *****************
  6997 ;; Defined at:
  6998 ;;		line 204 in file "mcc_generated_files/memory.c"
  6999 ;; Parameters:    Size  Location     Type
  7000 ;;  bAdd            1    wreg     unsigned char 
  7001 ;; Auto vars:     Size  Location     Type
  7002 ;;  bAdd            1    1[BANK0 ] unsigned char 
  7003 ;; Return value:  Size  Location     Type
  7004 ;;                  1    wreg      unsigned char 
  7005 ;; Registers used:
  7006 ;;		wreg
  7007 ;; Tracked objects:
  7008 ;;		On entry : 0/0
  7009 ;;		On exit  : 0/0
  7010 ;;		Unchanged: 0/0
  7011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7013 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7015 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7016 ;;Total ram usage:        1 bytes
  7017 ;; Hardware stack levels used:    1
  7018 ;; Hardware stack levels required when called:    5
  7019 ;; This function calls:
  7020 ;;		Nothing
  7021 ;; This function is called by:
  7022 ;;		_PROTOCOL_Initialize
  7023 ;; This function uses a non-reentrant model
  7024 ;;
  7025                           
  7026                           
  7027                           ;psect for function _DATAEE_ReadByte
  7028  0D3E                     _DATAEE_ReadByte:	
  7029                           
  7030                           ;incstack = 0
  7031                           ; Regs used in _DATAEE_ReadByte: [wreg]
  7032                           ;DATAEE_ReadByte@bAdd stored from wreg
  7033  0D3E  0020               	movlb	0	; select bank0
  7034  0D3F  00A1               	movwf	DATAEE_ReadByte@bAdd
  7035                           
  7036                           ;memory.c: 206: EEADRL = (bAdd & 0x0ff);
  7037  0D40  0821               	movf	DATAEE_ReadByte@bAdd,w
  7038  0D41  0023               	movlb	3	; select bank3
  7039  0D42  0091               	movwf	17	;volatile
  7040                           
  7041                           ;memory.c: 207: EECON1bits.CFGS = 0;
  7042  0D43  1315               	bcf	21,6	;volsfr
  7043                           
  7044                           ;memory.c: 208: EECON1bits.EEPGD = 0;
  7045  0D44  1395               	bcf	21,7	;volsfr
  7046                           
  7047                           ;memory.c: 209: EECON1bits.RD = 1;
  7048  0D45  1415               	bsf	21,0	;volsfr
  7049                           
  7050                           ;memory.c: 210: __nop();
  7051  0D46  0000               	nop
  7052                           
  7053                           ;memory.c: 211: __nop();
  7054  0D47  0000               	nop
  7055                           
  7056                           ;memory.c: 213: return (EEDATL);
  7057  0D48  0023               	movlb	3	; select bank3
  7058  0D49  0813               	movf	19,w	;volatile
  7059  0D4A  0008               	return
  7060  0D4B                     __end_of_DATAEE_ReadByte:	
  7061                           
  7062                           	psect	text36
  7063  0E71                     __ptext36:	
  7064 ;; *************** function _PIN_MANAGER_Initialize *****************
  7065 ;; Defined at:
  7066 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
  7067 ;; Parameters:    Size  Location     Type
  7068 ;;		None
  7069 ;; Auto vars:     Size  Location     Type
  7070 ;;		None
  7071 ;; Return value:  Size  Location     Type
  7072 ;;                  1    wreg      void 
  7073 ;; Registers used:
  7074 ;;		wreg, status,2
  7075 ;; Tracked objects:
  7076 ;;		On entry : 0/0
  7077 ;;		On exit  : 0/0
  7078 ;;		Unchanged: 0/0
  7079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7081 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7083 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7084 ;;Total ram usage:        0 bytes
  7085 ;; Hardware stack levels used:    1
  7086 ;; Hardware stack levels required when called:    5
  7087 ;; This function calls:
  7088 ;;		Nothing
  7089 ;; This function is called by:
  7090 ;;		_main
  7091 ;;		_SYSTEM_Initialize
  7092 ;; This function uses a non-reentrant model
  7093 ;;
  7094                           
  7095                           
  7096                           ;psect for function _PIN_MANAGER_Initialize
  7097  0E71                     _PIN_MANAGER_Initialize:	
  7098                           
  7099                           ;pin_manager.c: 56: LATA = 0x00;
  7100                           
  7101                           ;incstack = 0
  7102                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  7103  0E71  0022               	movlb	2	; select bank2
  7104  0E72  018C               	clrf	12	;volatile
  7105                           
  7106                           ;pin_manager.c: 57: LATB = 0x00;
  7107  0E73  018D               	clrf	13	;volatile
  7108                           
  7109                           ;pin_manager.c: 58: LATC = 0x00;
  7110  0E74  018E               	clrf	14	;volatile
  7111                           
  7112                           ;pin_manager.c: 63: TRISA = 0x3F;
  7113  0E75  303F               	movlw	63
  7114  0E76  0021               	movlb	1	; select bank1
  7115  0E77  008C               	movwf	12	;volatile
  7116                           
  7117                           ;pin_manager.c: 64: TRISB = 0xF0;
  7118  0E78  30F0               	movlw	240
  7119  0E79  008D               	movwf	13	;volatile
  7120                           
  7121                           ;pin_manager.c: 65: TRISC = 0x7F;
  7122  0E7A  307F               	movlw	127
  7123  0E7B  008E               	movwf	14	;volatile
  7124                           
  7125                           ;pin_manager.c: 70: ANSELC = 0x4F;
  7126  0E7C  304F               	movlw	79
  7127  0E7D  0023               	movlb	3	; select bank3
  7128  0E7E  008E               	movwf	14	;volatile
  7129                           
  7130                           ;pin_manager.c: 71: ANSELB = 0x20;
  7131  0E7F  3020               	movlw	32
  7132  0E80  008D               	movwf	13	;volatile
  7133                           
  7134                           ;pin_manager.c: 72: ANSELA = 0x17;
  7135  0E81  3017               	movlw	23
  7136  0E82  008C               	movwf	12	;volatile
  7137                           
  7138                           ;pin_manager.c: 77: WPUB = 0x00;
  7139  0E83  0024               	movlb	4	; select bank4
  7140  0E84  018D               	clrf	13	;volatile
  7141                           
  7142                           ;pin_manager.c: 78: WPUA = 0x3F;
  7143  0E85  303F               	movlw	63
  7144  0E86  008C               	movwf	12	;volatile
  7145                           
  7146                           ;pin_manager.c: 79: WPUC = 0x30;
  7147  0E87  3030               	movlw	48
  7148  0E88  008E               	movwf	14	;volatile
  7149                           
  7150                           ;pin_manager.c: 80: OPTION_REGbits.nWPUEN = 0;
  7151  0E89  0021               	movlb	1	; select bank1
  7152  0E8A  1395               	bcf	21,7	;volatile
  7153                           
  7154                           ;pin_manager.c: 86: APFCON1 = 0x00;
  7155  0E8B  0022               	movlb	2	; select bank2
  7156  0E8C  019E               	clrf	30	;volatile
  7157                           
  7158                           ;pin_manager.c: 87: APFCON0 = 0x84;
  7159  0E8D  3084               	movlw	132
  7160  0E8E  009D               	movwf	29	;volatile
  7161  0E8F  0008               	return
  7162  0E90                     __end_of_PIN_MANAGER_Initialize:	
  7163                           
  7164                           	psect	text37
  7165  0CEB                     __ptext37:	
  7166 ;; *************** function _OSCILLATOR_Initialize *****************
  7167 ;; Defined at:
  7168 ;;		line 81 in file "mcc_generated_files/mcc.c"
  7169 ;; Parameters:    Size  Location     Type
  7170 ;;		None
  7171 ;; Auto vars:     Size  Location     Type
  7172 ;;		None
  7173 ;; Return value:  Size  Location     Type
  7174 ;;                  1    wreg      void 
  7175 ;; Registers used:
  7176 ;;		wreg, status,2
  7177 ;; Tracked objects:
  7178 ;;		On entry : 0/0
  7179 ;;		On exit  : 0/0
  7180 ;;		Unchanged: 0/0
  7181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7182 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7183 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7184 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7185 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7186 ;;Total ram usage:        0 bytes
  7187 ;; Hardware stack levels used:    1
  7188 ;; Hardware stack levels required when called:    5
  7189 ;; This function calls:
  7190 ;;		Nothing
  7191 ;; This function is called by:
  7192 ;;		_main
  7193 ;;		_SYSTEM_Initialize
  7194 ;; This function uses a non-reentrant model
  7195 ;;
  7196                           
  7197                           
  7198                           ;psect for function _OSCILLATOR_Initialize
  7199  0CEB                     _OSCILLATOR_Initialize:	
  7200                           
  7201                           ;mcc.c: 84: OSCCON = 0x68;
  7202                           
  7203                           ;incstack = 0
  7204                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  7205  0CEB  3068               	movlw	104
  7206  0CEC  0021               	movlb	1	; select bank1
  7207  0CED  0099               	movwf	25	;volatile
  7208                           
  7209                           ;mcc.c: 86: OSCTUNE = 0x00;
  7210  0CEE  0198               	clrf	24	;volatile
  7211  0CEF  0008               	return
  7212  0CF0                     __end_of_OSCILLATOR_Initialize:	
  7213                           
  7214                           	psect	text38
  7215  0EAF                     __ptext38:	
  7216 ;; *************** function _I2C1_Initialize *****************
  7217 ;; Defined at:
  7218 ;;		line 30 in file "mcc_generated_files/i2c1.c"
  7219 ;; Parameters:    Size  Location     Type
  7220 ;;		None
  7221 ;; Auto vars:     Size  Location     Type
  7222 ;;		None
  7223 ;; Return value:  Size  Location     Type
  7224 ;;                  1    wreg      void 
  7225 ;; Registers used:
  7226 ;;		wreg, status,2, status,0, pclath, cstack
  7227 ;; Tracked objects:
  7228 ;;		On entry : 0/0
  7229 ;;		On exit  : 0/0
  7230 ;;		Unchanged: 0/0
  7231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7233 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7234 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7235 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7236 ;;Total ram usage:        2 bytes
  7237 ;; Hardware stack levels used:    1
  7238 ;; Hardware stack levels required when called:    6
  7239 ;; This function calls:
  7240 ;;		_PROTOCOL_Read_Device_Address
  7241 ;; This function is called by:
  7242 ;;		_main
  7243 ;;		_SYSTEM_Initialize
  7244 ;; This function uses a non-reentrant model
  7245 ;;
  7246                           
  7247                           
  7248                           ;psect for function _I2C1_Initialize
  7249  0EAF                     _I2C1_Initialize:	
  7250                           
  7251                           ;i2c1.c: 34: _delay((unsigned long)((2000)*(4000000/4000.0)));
  7252                           
  7253                           ;incstack = 0
  7254                           ; Regs used in _I2C1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7255  0EAF  300B               	movlw	11
  7256  0EB0  0020               	movlb	0	; select bank0
  7257  0EB1  00A2               	movwf	??_I2C1_Initialize+1
  7258  0EB2  3026               	movlw	38
  7259  0EB3  00A1               	movwf	??_I2C1_Initialize
  7260  0EB4  305D               	movlw	93
  7261  0EB5                     u4957:	
  7262  0EB5  0B89               	decfsz	9,f
  7263  0EB6  2EB5               	goto	u4957
  7264  0EB7  0BA1               	decfsz	??_I2C1_Initialize,f
  7265  0EB8  2EB5               	goto	u4957
  7266  0EB9  0BA2               	decfsz	??_I2C1_Initialize+1,f
  7267  0EBA  2EB5               	goto	u4957
  7268  0EBB  3200               	nop2
  7269                           
  7270                           ;i2c1.c: 38: SSP1STAT = 0x80;
  7271  0EBC  3080               	movlw	128
  7272  0EBD  0024               	movlb	4	; select bank4
  7273  0EBE  0094               	movwf	20	;volatile
  7274                           
  7275                           ;i2c1.c: 40: SSP1CON1 = 0x26;
  7276  0EBF  3026               	movlw	38
  7277  0EC0  0095               	movwf	21	;volatile
  7278                           
  7279                           ;i2c1.c: 42: SSP1CON2 = 0x81;
  7280  0EC1  3081               	movlw	129
  7281  0EC2  0096               	movwf	22	;volatile
  7282                           
  7283                           ;i2c1.c: 44: SSP1CON3 = 0x00;
  7284  0EC3  0197               	clrf	23	;volatile
  7285                           
  7286                           ;i2c1.c: 46: SSP1MSK = (0x7F << 1);
  7287  0EC4  30FE               	movlw	254
  7288  0EC5  0093               	movwf	19	;volatile
  7289                           
  7290                           ;i2c1.c: 48: SSP1ADD = (PROTOCOL_Read_Device_Address() << 1);
  7291  0EC6  318C  24CA         	fcall	_PROTOCOL_Read_Device_Address
  7292  0EC8  0709               	addwf	9,w
  7293  0EC9  0024               	movlb	4	; select bank4
  7294  0ECA  0092               	movwf	18	;volatile
  7295                           
  7296                           ;i2c1.c: 51: PIR1bits.SSP1IF = 0;
  7297  0ECB  0020               	movlb	0	; select bank0
  7298  0ECC  1191               	bcf	17,3	;volatile
  7299                           
  7300                           ;i2c1.c: 53: PIE1bits.SSP1IE = 1;
  7301  0ECD  0021               	movlb	1	; select bank1
  7302  0ECE  1591               	bsf	17,3	;volatile
  7303  0ECF  0008               	return
  7304  0ED0                     __end_of_I2C1_Initialize:	
  7305                           
  7306                           	psect	text39
  7307  0CCA                     __ptext39:	
  7308 ;; *************** function _PROTOCOL_Read_Device_Address *****************
  7309 ;; Defined at:
  7310 ;;		line 94 in file "protocol.c"
  7311 ;; Parameters:    Size  Location     Type
  7312 ;;		None
  7313 ;; Auto vars:     Size  Location     Type
  7314 ;;		None
  7315 ;; Return value:  Size  Location     Type
  7316 ;;                  1    wreg      unsigned char 
  7317 ;; Registers used:
  7318 ;;		wreg
  7319 ;; Tracked objects:
  7320 ;;		On entry : 0/0
  7321 ;;		On exit  : 0/0
  7322 ;;		Unchanged: 0/0
  7323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7325 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7327 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7328 ;;Total ram usage:        0 bytes
  7329 ;; Hardware stack levels used:    1
  7330 ;; Hardware stack levels required when called:    5
  7331 ;; This function calls:
  7332 ;;		Nothing
  7333 ;; This function is called by:
  7334 ;;		_I2C1_Initialize
  7335 ;;		_PROTOCOL_Loop
  7336 ;; This function uses a non-reentrant model
  7337 ;;
  7338                           
  7339                           
  7340                           ;psect for function _PROTOCOL_Read_Device_Address
  7341  0CCA                     _PROTOCOL_Read_Device_Address:	
  7342                           
  7343                           ;protocol.c: 95: return slave_address;
  7344                           
  7345                           ;incstack = 0
  7346                           ; Regs used in _PROTOCOL_Read_Device_Address: [wreg]
  7347  0CCA  0020               	movlb	0	; select bank0
  7348  0CCB  085F               	movf	_slave_address,w
  7349  0CCC  0008               	return
  7350  0CCD                     __end_of_PROTOCOL_Read_Device_Address:	
  7351                           
  7352                           	psect	text40
  7353  0DCC                     __ptext40:	
  7354 ;; *************** function _EUSART_Initialize *****************
  7355 ;; Defined at:
  7356 ;;		line 75 in file "mcc_generated_files/eusart.c"
  7357 ;; Parameters:    Size  Location     Type
  7358 ;;		None
  7359 ;; Auto vars:     Size  Location     Type
  7360 ;;		None
  7361 ;; Return value:  Size  Location     Type
  7362 ;;                  1    wreg      void 
  7363 ;; Registers used:
  7364 ;;		wreg, status,2
  7365 ;; Tracked objects:
  7366 ;;		On entry : 0/0
  7367 ;;		On exit  : 0/0
  7368 ;;		Unchanged: 0/0
  7369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7371 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7372 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7373 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7374 ;;Total ram usage:        1 bytes
  7375 ;; Hardware stack levels used:    1
  7376 ;; Hardware stack levels required when called:    5
  7377 ;; This function calls:
  7378 ;;		Nothing
  7379 ;; This function is called by:
  7380 ;;		_main
  7381 ;;		_SYSTEM_Initialize
  7382 ;; This function uses a non-reentrant model
  7383 ;;
  7384                           
  7385                           
  7386                           ;psect for function _EUSART_Initialize
  7387  0DCC                     _EUSART_Initialize:	
  7388                           
  7389                           ;eusart.c: 78: PIE1bits.RCIE = 0;
  7390                           
  7391                           ;incstack = 0
  7392                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  7393  0DCC  0021               	movlb	1	; select bank1
  7394  0DCD  1291               	bcf	17,5	;volatile
  7395                           
  7396                           ;eusart.c: 79: PIE1bits.TXIE = 0;
  7397  0DCE  1211               	bcf	17,4	;volatile
  7398                           
  7399                           ;eusart.c: 84: BAUDCON = 0x08;
  7400  0DCF  3008               	movlw	8
  7401  0DD0  0023               	movlb	3	; select bank3
  7402  0DD1  009F               	movwf	31	;volatile
  7403                           
  7404                           ;eusart.c: 87: RCSTA = 0x90;
  7405  0DD2  3090               	movlw	144
  7406  0DD3  009D               	movwf	29	;volatile
  7407                           
  7408                           ;eusart.c: 90: TXSTA = 0x24;
  7409  0DD4  3024               	movlw	36
  7410  0DD5  009E               	movwf	30	;volatile
  7411                           
  7412                           ;eusart.c: 93: SPBRGL = 0x67;
  7413  0DD6  3067               	movlw	103
  7414  0DD7  009B               	movwf	27	;volatile
  7415                           
  7416                           ;eusart.c: 96: SPBRGH = 0x00;
  7417  0DD8  019C               	clrf	28	;volatile
  7418                           
  7419                           ;eusart.c: 100: eusartTxHead = 0;
  7420  0DD9  01FC               	clrf	_eusartTxHead	;volatile
  7421                           
  7422                           ;eusart.c: 101: eusartTxTail = 0;
  7423  0DDA  0020               	movlb	0	; select bank0
  7424  0DDB  01E5               	clrf	_eusartTxTail	;volatile
  7425                           
  7426                           ;eusart.c: 102: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
  7427  0DDC  3008               	movlw	8
  7428  0DDD  00A1               	movwf	??_EUSART_Initialize
  7429  0DDE  0821               	movf	??_EUSART_Initialize,w
  7430  0DDF  00E4               	movwf	_eusartTxBufferRemaining	;volatile
  7431                           
  7432                           ;eusart.c: 104: eusartRxHead = 0;
  7433  0DE0  01E3               	clrf	_eusartRxHead	;volatile
  7434                           
  7435                           ;eusart.c: 105: eusartRxTail = 0;
  7436  0DE1  01E2               	clrf	_eusartRxTail	;volatile
  7437                           
  7438                           ;eusart.c: 106: eusartRxCount = 0;
  7439  0DE2  01E1               	clrf	_eusartRxCount	;volatile
  7440                           
  7441                           ;eusart.c: 109: PIE1bits.RCIE = 1;
  7442  0DE3  0021               	movlb	1	; select bank1
  7443  0DE4  1691               	bsf	17,5	;volatile
  7444  0DE5  0008               	return
  7445  0DE6                     __end_of_EUSART_Initialize:	
  7446                           
  7447                           	psect	text41
  7448  0D08                     __ptext41:	
  7449 ;; *************** function _ADC_Initialize *****************
  7450 ;; Defined at:
  7451 ;;		line 64 in file "mcc_generated_files/adc.c"
  7452 ;; Parameters:    Size  Location     Type
  7453 ;;		None
  7454 ;; Auto vars:     Size  Location     Type
  7455 ;;		None
  7456 ;; Return value:  Size  Location     Type
  7457 ;;                  1    wreg      void 
  7458 ;; Registers used:
  7459 ;;		wreg, status,2
  7460 ;; Tracked objects:
  7461 ;;		On entry : 0/0
  7462 ;;		On exit  : 0/0
  7463 ;;		Unchanged: 0/0
  7464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7468 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7469 ;;Total ram usage:        0 bytes
  7470 ;; Hardware stack levels used:    1
  7471 ;; Hardware stack levels required when called:    5
  7472 ;; This function calls:
  7473 ;;		Nothing
  7474 ;; This function is called by:
  7475 ;;		_main
  7476 ;;		_SYSTEM_Initialize
  7477 ;; This function uses a non-reentrant model
  7478 ;;
  7479                           
  7480                           
  7481                           ;psect for function _ADC_Initialize
  7482  0D08                     _ADC_Initialize:	
  7483                           
  7484                           ;adc.c: 69: ADCON0 = 0x01;
  7485                           
  7486                           ;incstack = 0
  7487                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  7488  0D08  3001               	movlw	1
  7489  0D09  0021               	movlb	1	; select bank1
  7490  0D0A  009D               	movwf	29	;volatile
  7491                           
  7492                           ;adc.c: 72: ADCON1 = 0xF0;
  7493  0D0B  30F0               	movlw	240
  7494  0D0C  009E               	movwf	30	;volatile
  7495                           
  7496                           ;adc.c: 75: ADRESL = 0x00;
  7497  0D0D  019B               	clrf	27	;volatile
  7498                           
  7499                           ;adc.c: 78: ADRESH = 0x00;
  7500  0D0E  019C               	clrf	28	;volatile
  7501  0D0F  0008               	return
  7502  0D10                     __end_of_ADC_Initialize:	
  7503                           
  7504                           	psect	intentry
  7505  0004                     __pintentry:	
  7506 ;; *************** function _INTERRUPT_InterruptManager *****************
  7507 ;; Defined at:
  7508 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  7509 ;; Parameters:    Size  Location     Type
  7510 ;;		None
  7511 ;; Auto vars:     Size  Location     Type
  7512 ;;		None
  7513 ;; Return value:  Size  Location     Type
  7514 ;;                  1    wreg      void 
  7515 ;; Registers used:
  7516 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7517 ;; Tracked objects:
  7518 ;;		On entry : 0/0
  7519 ;;		On exit  : 0/0
  7520 ;;		Unchanged: 0/0
  7521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7523 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7524 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7525 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7526 ;;Total ram usage:        1 bytes
  7527 ;; Hardware stack levels used:    1
  7528 ;; Hardware stack levels required when called:    4
  7529 ;; This function calls:
  7530 ;;		_EUSART_Receive_ISR
  7531 ;;		_EUSART_Transmit_ISR
  7532 ;;		_I2C1_ISR
  7533 ;; This function is called by:
  7534 ;;		Interrupt level 1
  7535 ;; This function uses a non-reentrant model
  7536 ;;
  7537                           
  7538  0004                     _INTERRUPT_InterruptManager:	
  7539                           
  7540                           ;incstack = 0
  7541  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  7542                           
  7543                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7544  0005  3180               	pagesel	$
  7545  0006  0020               	movlb	0	; select bank0
  7546  0007  087F               	movf	127,w
  7547  0008  00A0               	movwf	??_INTERRUPT_InterruptManager
  7548                           
  7549                           ;interrupt_manager.c: 54: if(INTCONbits.PEIE == 1 && PIE1bits.TXIE == 1 && PIR1bits.TXIF
      +                           == 1)
  7550  0009  1F0B               	btfss	11,6	;volatile
  7551  000A  2815               	goto	i1l168
  7552  000B  0021               	movlb	1	; select bank1
  7553  000C  1E11               	btfss	17,4	;volatile
  7554  000D  2815               	goto	i1l168
  7555  000E  0020               	movlb	0	; select bank0
  7556  000F  1E11               	btfss	17,4	;volatile
  7557  0010  2815               	goto	i1l168
  7558                           
  7559                           ;interrupt_manager.c: 55: {
  7560                           ;interrupt_manager.c: 56: EUSART_Transmit_ISR();
  7561  0011  318E  2637  3180   	fcall	_EUSART_Transmit_ISR
  7562                           
  7563                           ;interrupt_manager.c: 57: }
  7564  0014  282B               	goto	i1l174
  7565  0015                     i1l168:	
  7566                           
  7567                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits
      +                          .RCIF == 1)
  7568  0015  1F0B               	btfss	11,6	;volatile
  7569  0016  2821               	goto	i1l170
  7570  0017  0021               	movlb	1	; select bank1
  7571  0018  1E91               	btfss	17,5	;volatile
  7572  0019  2821               	goto	i1l170
  7573  001A  0020               	movlb	0	; select bank0
  7574  001B  1E91               	btfss	17,5	;volatile
  7575  001C  2821               	goto	i1l170
  7576                           
  7577                           ;interrupt_manager.c: 59: {
  7578                           ;interrupt_manager.c: 60: EUSART_Receive_ISR();
  7579  001D  318E  2600  3180   	fcall	_EUSART_Receive_ISR
  7580                           
  7581                           ;interrupt_manager.c: 61: }
  7582  0020  282B               	goto	i1l174
  7583  0021                     i1l170:	
  7584                           
  7585                           ;interrupt_manager.c: 62: else if(INTCONbits.PEIE == 1 && PIE1bits.SSP1IE == 1 && PIR1bi
      +                          ts.SSP1IF == 1)
  7586  0021  1F0B               	btfss	11,6	;volatile
  7587  0022  282B               	goto	i1l174
  7588  0023  0021               	movlb	1	; select bank1
  7589  0024  1D91               	btfss	17,3	;volatile
  7590  0025  282B               	goto	i1l174
  7591  0026  0020               	movlb	0	; select bank0
  7592  0027  1D91               	btfss	17,3	;volatile
  7593  0028  282B               	goto	i1l174
  7594                           
  7595                           ;interrupt_manager.c: 63: {
  7596                           ;interrupt_manager.c: 64: I2C1_ISR();
  7597  0029  318F  2716         	fcall	_I2C1_ISR
  7598  002B                     i1l174:	
  7599                           ;interrupt_manager.c: 66: else
  7600                           ;interrupt_manager.c: 67: {
  7601                           
  7602                           ;interrupt_manager.c: 65: }
  7603                           
  7604  002B  0020               	movlb	0	; select bank0
  7605  002C  0820               	movf	??_INTERRUPT_InterruptManager,w
  7606  002D  00FF               	movwf	127
  7607  002E  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  7608  002F  0009               	retfie
  7609  0030                     __end_of_INTERRUPT_InterruptManager:	
  7610                           
  7611                           	psect	text43
  7612  0F16                     __ptext43:	
  7613 ;; *************** function _I2C1_ISR *****************
  7614 ;; Defined at:
  7615 ;;		line 57 in file "mcc_generated_files/i2c1.c"
  7616 ;; Parameters:    Size  Location     Type
  7617 ;;		None
  7618 ;; Auto vars:     Size  Location     Type
  7619 ;;  i2c_data        1   11[COMMON] unsigned char 
  7620 ;; Return value:  Size  Location     Type
  7621 ;;                  1    wreg      void 
  7622 ;; Registers used:
  7623 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7624 ;; Tracked objects:
  7625 ;;		On entry : 0/0
  7626 ;;		On exit  : 0/0
  7627 ;;		Unchanged: 0/0
  7628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7630 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7631 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7632 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7633 ;;Total ram usage:        2 bytes
  7634 ;; Hardware stack levels used:    1
  7635 ;; Hardware stack levels required when called:    3
  7636 ;; This function calls:
  7637 ;;		_I2C1_StatusCallback
  7638 ;; This function is called by:
  7639 ;;		_INTERRUPT_InterruptManager
  7640 ;; This function uses a non-reentrant model
  7641 ;;
  7642                           
  7643                           
  7644                           ;psect for function _I2C1_ISR
  7645  0F16                     _I2C1_ISR:	
  7646                           
  7647                           ;i2c1.c: 59: uint8_t i2c_data = 0x55;
  7648                           
  7649                           ;incstack = 0
  7650                           ; Regs used in _I2C1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7651  0F16  3055               	movlw	85
  7652  0F17  00FA               	movwf	??_I2C1_ISR
  7653  0F18  087A               	movf	??_I2C1_ISR,w
  7654  0F19  00FB               	movwf	I2C1_ISR@i2c_data
  7655                           
  7656                           ;i2c1.c: 64: PIR1bits.SSP1IF = 0;
  7657  0F1A  0020               	movlb	0	; select bank0
  7658  0F1B  1191               	bcf	17,3	;volatile
  7659                           
  7660                           ;i2c1.c: 65: i2c_data = SSP1BUF;
  7661  0F1C  0024               	movlb	4	; select bank4
  7662  0F1D  0811               	movf	17,w	;volatile
  7663  0F1E  00FA               	movwf	??_I2C1_ISR
  7664  0F1F  087A               	movf	??_I2C1_ISR,w
  7665  0F20  00FB               	movwf	I2C1_ISR@i2c_data
  7666                           
  7667                           ;i2c1.c: 66: if(1 == SSP1STATbits.R_nW)
  7668  0F21  1D14               	btfss	20,2	;volatile
  7669  0F22  2F2A               	goto	i1l64
  7670                           
  7671                           ;i2c1.c: 67: {
  7672                           ;i2c1.c: 68: if((1 == SSP1STATbits.D_nA) && (1 == SSP1CON2bits.ACKSTAT))
  7673  0F23  1A94               	btfsc	20,5	;volatile
  7674  0F24  1F16               	btfss	22,6	;volatile
  7675  0F25  2F28               	goto	i1l5031
  7676                           
  7677                           ;i2c1.c: 69: {
  7678                           ;i2c1.c: 71: I2C1_StatusCallback(I2C1_SLAVE_READ_COMPLETED);
  7679  0F26  3003               	movlw	3
  7680  0F27  2F38               	goto	L6
  7681  0F28                     i1l5031:	
  7682                           ;i2c1.c: 72: }
  7683                           
  7684                           
  7685                           ;i2c1.c: 73: else
  7686                           ;i2c1.c: 74: {
  7687                           ;i2c1.c: 76: I2C1_StatusCallback(I2C1_SLAVE_READ_REQUEST);
  7688  0F28  3001               	movlw	1
  7689  0F29  2F38               	goto	L6
  7690  0F2A                     i1l64:	
  7691                           ;i2c1.c: 77: }
  7692                           ;i2c1.c: 78: }
  7693                           
  7694                           
  7695                           ;i2c1.c: 79: else if(0 == SSP1STATbits.D_nA)
  7696  0F2A  1A94               	btfsc	20,5	;volatile
  7697  0F2B  2F33               	goto	i1l5039
  7698                           
  7699                           ;i2c1.c: 80: {
  7700                           ;i2c1.c: 83: if(0x00 == i2c_data)
  7701  0F2C  087B               	movf	I2C1_ISR@i2c_data,w
  7702  0F2D  1D03               	btfss	3,2
  7703  0F2E  2F31               	goto	i1l5037
  7704                           
  7705                           ;i2c1.c: 84: {
  7706                           ;i2c1.c: 86: I2C1_StatusCallback(I2C1_SLAVE_GENERAL_CALL_REQUEST);
  7707  0F2F  3004               	movlw	4
  7708  0F30  2F38               	goto	L6
  7709  0F31                     i1l5037:	
  7710                           ;i2c1.c: 87: }
  7711                           
  7712                           
  7713                           ;i2c1.c: 88: else
  7714                           ;i2c1.c: 89: {
  7715                           ;i2c1.c: 91: I2C1_StatusCallback(I2C1_SLAVE_WRITE_REQUEST);
  7716  0F31  3000               	movlw	0
  7717  0F32  2F38               	goto	L6
  7718  0F33                     i1l5039:	
  7719                           ;i2c1.c: 92: }
  7720                           ;i2c1.c: 93: }
  7721                           
  7722                           
  7723                           ;i2c1.c: 94: else
  7724                           ;i2c1.c: 95: {
  7725                           ;i2c1.c: 96: I2C_slaveWriteData = i2c_data;
  7726  0F33  087B               	movf	I2C1_ISR@i2c_data,w
  7727  0F34  00FA               	movwf	??_I2C1_ISR
  7728  0F35  087A               	movf	??_I2C1_ISR,w
  7729  0F36  00FD               	movwf	_I2C_slaveWriteData	;volatile
  7730                           
  7731                           ;i2c1.c: 99: I2C1_StatusCallback(I2C1_SLAVE_WRITE_COMPLETED);
  7732  0F37  3002               	movlw	2
  7733  0F38                     L6:	
  7734  0F38  3184  249E         	fcall	_I2C1_StatusCallback
  7735                           
  7736                           ;i2c1.c: 100: }
  7737                           ;i2c1.c: 102: SSP1CON1bits.CKP = 1;
  7738  0F3A  0024               	movlb	4	; select bank4
  7739  0F3B  1615               	bsf	21,4	;volatile
  7740  0F3C  0008               	return
  7741  0F3D                     __end_of_I2C1_ISR:	
  7742                           
  7743                           	psect	text44
  7744  049E                     __ptext44:	
  7745 ;; *************** function _I2C1_StatusCallback *****************
  7746 ;; Defined at:
  7747 ;;		line 106 in file "mcc_generated_files/i2c1.c"
  7748 ;; Parameters:    Size  Location     Type
  7749 ;;  i2c_bus_stat    1    wreg     enum E3104
  7750 ;; Auto vars:     Size  Location     Type
  7751 ;;  i2c_bus_stat    1    7[COMMON] enum E3104
  7752 ;;  pdata           2    8[COMMON] PTR unsigned char 
  7753 ;;		 -> type_no_data(1), PROTOCOL_Send_uint8_t@pbuf(1), sendbuf(16), readbuf.length(1), 
  7754 ;;		 -> readbuf.type(1), readbuf(6), position(6), 
  7755 ;; Return value:  Size  Location     Type
  7756 ;;                  1    wreg      void 
  7757 ;; Registers used:
  7758 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7759 ;; Tracked objects:
  7760 ;;		On entry : 0/0
  7761 ;;		On exit  : 0/0
  7762 ;;		Unchanged: 0/0
  7763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7765 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7766 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7767 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7768 ;;Total ram usage:        4 bytes
  7769 ;; Hardware stack levels used:    1
  7770 ;; Hardware stack levels required when called:    2
  7771 ;; This function calls:
  7772 ;;		_PROTOCOL_Backplane_Slave_Enabled
  7773 ;;		_PROTOCOL_I2C_GET
  7774 ;;		_PROTOCOL_I2C_SEN
  7775 ;;		_PROTOCOL_I2C_WHO
  7776 ;;		_PROTOCOL_INV
  7777 ;;		_PROTOCOL_RST
  7778 ;;		_PROTOCOL_Read_Lock
  7779 ;;		i1_PROTOCOL_EXT
  7780 ;;		i1_PROTOCOL_SAV
  7781 ;;		i1_PROTOCOL_SET
  7782 ;;		i1_PROTOCOL_STA
  7783 ;;		i1_PROTOCOL_STP
  7784 ;; This function is called by:
  7785 ;;		_I2C1_ISR
  7786 ;; This function uses a non-reentrant model
  7787 ;;
  7788                           
  7789                           
  7790                           ;psect for function _I2C1_StatusCallback
  7791  049E                     _I2C1_StatusCallback:	
  7792                           
  7793                           ;incstack = 0
  7794                           ; Regs used in _I2C1_StatusCallback: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7795                           ;I2C1_StatusCallback@i2c_bus_state stored from wreg
  7796  049E  00F7               	movwf	I2C1_StatusCallback@i2c_bus_state
  7797                           
  7798                           ;i2c1.c: 109: static uint8_t slaveWriteType = SLAVE_NORMAL_DATA;
  7799                           ;i2c1.c: 110: static uint8_t next = 0x00;
  7800                           ;i2c1.c: 111: static uint8_t ext_len = 0;
  7801                           ;i2c1.c: 112: static uint8_t ext_cnt = 0;
  7802                           ;i2c1.c: 113: static char ext_buf[48];
  7803                           ;i2c1.c: 114: uint8_t *pdata;
  7804                           ;i2c1.c: 115: switch (i2c_bus_state)
  7805  049F  2D59               	goto	i1l5005
  7806  04A0                     i1l86:	
  7807                           ;i2c1.c: 116: {
  7808                           ;i2c1.c: 117: case I2C1_SLAVE_WRITE_REQUEST:
  7809                           
  7810                           
  7811                           ;i2c1.c: 118: slaveWriteType = SLAVE_DATA_ADDRESS;
  7812  04A0  0020               	movlb	0	; select bank0
  7813  04A1  01E9               	clrf	I2C1_StatusCallback@slaveWriteType
  7814  04A2  0AE9               	incf	I2C1_StatusCallback@slaveWriteType,f
  7815                           
  7816                           ;i2c1.c: 119: break;
  7817  04A3  0008               	return
  7818  04A4                     i1l4931:	
  7819                           ;i2c1.c: 121: case I2C1_SLAVE_GENERAL_CALL_REQUEST:
  7820                           
  7821                           
  7822                           ;i2c1.c: 123: slaveWriteType = SLAVE_GENERAL_CALL;
  7823  04A4  3002               	movlw	2
  7824  04A5  00F6               	movwf	??_I2C1_StatusCallback
  7825  04A6  0876               	movf	??_I2C1_StatusCallback,w
  7826  04A7  0020               	movlb	0	; select bank0
  7827  04A8  00E9               	movwf	I2C1_StatusCallback@slaveWriteType
  7828                           
  7829                           ;i2c1.c: 124: break;
  7830  04A9  0008               	return
  7831  04AA                     i1l4933:	
  7832                           ;i2c1.c: 132: case 0x01:
  7833                           
  7834                           ;i2c1.c: 131: switch(next) {
  7835                           
  7836                           ;i2c1.c: 129: {
  7837                           ;i2c1.c: 130: case SLAVE_DATA_ADDRESS:
  7838                           
  7839                           ;i2c1.c: 128: switch(slaveWriteType)
  7840                           
  7841                           ;i2c1.c: 126: case I2C1_SLAVE_WRITE_COMPLETED:
  7842                           
  7843                           
  7844                           ;i2c1.c: 133: PROTOCOL_SET(I2C_slaveWriteData);
  7845  04AA  087D               	movf	_I2C_slaveWriteData,w	;volatile
  7846  04AB  318D  25A4  3184   	fcall	i1_PROTOCOL_SET
  7847  04AE  2D19               	goto	i1l4979
  7848  04AF                     i1l4937:	
  7849                           ;i2c1.c: 138: case 0x04:
  7850                           
  7851                           ;i2c1.c: 137: switch(I2C_slaveWriteData) {
  7852                           
  7853                           ;i2c1.c: 136: case 0x00:
  7854                           
  7855                           ;i2c1.c: 135: break;
  7856                           
  7857                           ;i2c1.c: 134: next = 0x00;
  7858                           
  7859                           
  7860                           ;i2c1.c: 139: PROTOCOL_STA();
  7861  04AF  318C  24DB  3184   	fcall	i1_PROTOCOL_STA
  7862                           
  7863                           ;i2c1.c: 140: break;
  7864  04B2  2D32               	goto	i1l4989
  7865  04B3                     i1l4939:	
  7866                           ;i2c1.c: 141: case 0x05:
  7867                           
  7868                           
  7869                           ;i2c1.c: 142: PROTOCOL_STP();
  7870  04B3  318C  24C7  3184   	fcall	i1_PROTOCOL_STP
  7871                           
  7872                           ;i2c1.c: 143: break;
  7873  04B6  2D32               	goto	i1l4989
  7874  04B7                     i1l4941:	
  7875                           ;i2c1.c: 144: case 0x03:
  7876                           
  7877                           
  7878                           ;i2c1.c: 145: PROTOCOL_SAV();
  7879  04B7  318D  2510  3184   	fcall	i1_PROTOCOL_SAV
  7880                           
  7881                           ;i2c1.c: 146: break;
  7882  04BA  2D32               	goto	i1l4989
  7883  04BB                     i1l4943:	
  7884                           ;i2c1.c: 147: case 0x06:
  7885                           
  7886                           
  7887                           ;i2c1.c: 148: PROTOCOL_INV();
  7888  04BB  318C  24D7  3184   	fcall	_PROTOCOL_INV
  7889                           
  7890                           ;i2c1.c: 149: break;
  7891  04BE  2D32               	goto	i1l4989
  7892  04BF                     i1l4945:	
  7893                           ;i2c1.c: 150: case 0x0c:
  7894                           
  7895                           
  7896                           ;i2c1.c: 151: PROTOCOL_RST();
  7897  04BF  318D  2534  3184   	fcall	_PROTOCOL_RST
  7898                           
  7899                           ;i2c1.c: 152: break;
  7900  04C2  2D32               	goto	i1l4989
  7901  04C3                     i1l103:	
  7902                           ;i2c1.c: 153: case 0x08:
  7903                           
  7904                           
  7905                           ;i2c1.c: 154: next = 0x01;
  7906  04C3  01E8               	clrf	I2C1_StatusCallback@next
  7907  04C4  0AE8               	incf	I2C1_StatusCallback@next,f
  7908                           
  7909                           ;i2c1.c: 155: break;
  7910  04C5  2D32               	goto	i1l4989
  7911  04C6                     i1l4947:	
  7912                           ;i2c1.c: 156: case 0x0a:
  7913                           
  7914                           
  7915                           ;i2c1.c: 157: next = 0x02;
  7916  04C6  3002               	movlw	2
  7917  04C7  2CFA               	goto	L7
  7918  04C8                     i1l4951:	
  7919                           ;i2c1.c: 159: }
  7920                           
  7921                           ;i2c1.c: 158: break;
  7922                           
  7923  04C8  087D               	movf	_I2C_slaveWriteData,w	;volatile
  7924                           
  7925                           ; Switch size 1, requested type "space"
  7926                           ; Number of cases is 7, Range of values is 3 to 12
  7927                           ; switch strategies available:
  7928                           ; Name         Instructions Cycles
  7929                           ; simple_byte           22    12 (average)
  7930                           ; direct_byte           29     9 (fixed)
  7931                           ; jumptable            263     9 (fixed)
  7932                           ;	Chosen strategy is simple_byte
  7933  04C9  3A03               	xorlw	3	; case 3
  7934  04CA  1903               	skipnz
  7935  04CB  2CB7               	goto	i1l4941
  7936  04CC  3A07               	xorlw	7	; case 4
  7937  04CD  1903               	skipnz
  7938  04CE  2CAF               	goto	i1l4937
  7939  04CF  3A01               	xorlw	1	; case 5
  7940  04D0  1903               	skipnz
  7941  04D1  2CB3               	goto	i1l4939
  7942  04D2  3A03               	xorlw	3	; case 6
  7943  04D3  1903               	skipnz
  7944  04D4  2CBB               	goto	i1l4943
  7945  04D5  3A0E               	xorlw	14	; case 8
  7946  04D6  1903               	skipnz
  7947  04D7  2CC3               	goto	i1l103
  7948  04D8  3A02               	xorlw	2	; case 10
  7949  04D9  1903               	skipnz
  7950  04DA  2CC6               	goto	i1l4947
  7951  04DB  3A06               	xorlw	6	; case 12
  7952  04DC  1903               	skipnz
  7953  04DD  2CBF               	goto	i1l4945
  7954  04DE  2D32               	goto	i1l4989
  7955                           
  7956                           ;i2c1.c: 161: }
  7957                           
  7958                           ;i2c1.c: 160: break;
  7959  04DF  2D32               	goto	i1l4989
  7960  04E0                     i1l4955:	
  7961  04E0  0868               	movf	I2C1_StatusCallback@next,w
  7962                           
  7963                           ; Switch size 1, requested type "space"
  7964                           ; Number of cases is 2, Range of values is 0 to 1
  7965                           ; switch strategies available:
  7966                           ; Name         Instructions Cycles
  7967                           ; simple_byte            7     4 (average)
  7968                           ; direct_byte           10     6 (fixed)
  7969                           ; jumptable            260     6 (fixed)
  7970                           ;	Chosen strategy is simple_byte
  7971  04E1  3A00               	xorlw	0	; case 0
  7972  04E2  1903               	skipnz
  7973  04E3  2CC8               	goto	i1l4951
  7974  04E4  3A01               	xorlw	1	; case 1
  7975  04E5  1903               	skipnz
  7976  04E6  2CAA               	goto	i1l4933
  7977  04E7  2D32               	goto	i1l4989
  7978                           
  7979                           ;i2c1.c: 162: break;
  7980  04E8  2D32               	goto	i1l4989
  7981  04E9                     i1l4957:	
  7982                           ;i2c1.c: 164: case SLAVE_GENERAL_CALL:
  7983                           
  7984                           
  7985                           ;i2c1.c: 165: if (I2C_slaveWriteData == 0x02) {
  7986  04E9  3002               	movlw	2
  7987  04EA  067D               	xorwf	_I2C_slaveWriteData,w	;volatile
  7988  04EB  1D03               	btfss	3,2
  7989  04EC  2D32               	goto	i1l4989
  7990                           
  7991                           ;i2c1.c: 166: SSP1CON2bits.GCEN = 0;
  7992  04ED  0024               	movlb	4	; select bank4
  7993  04EE  1396               	bcf	22,7	;volatile
  7994                           
  7995                           ;i2c1.c: 167: PROTOCOL_Backplane_Slave_Enabled();
  7996  04EF  318C  24D3  3184   	fcall	_PROTOCOL_Backplane_Slave_Enabled
  7997                           
  7998                           ;i2c1.c: 168: }
  7999                           ;i2c1.c: 169: break;
  8000  04F2  2D32               	goto	i1l4989
  8001  04F3                     i1l4963:	
  8002                           ;i2c1.c: 173: case 0x02:
  8003                           
  8004                           ;i2c1.c: 172: switch(next) {
  8005                           
  8006                           ;i2c1.c: 171: case SLAVE_NORMAL_DATA:
  8007                           
  8008                           
  8009                           ;i2c1.c: 174: ext_len = I2C_slaveWriteData;
  8010  04F3  087D               	movf	_I2C_slaveWriteData,w	;volatile
  8011  04F4  00F6               	movwf	??_I2C1_StatusCallback
  8012  04F5  0876               	movf	??_I2C1_StatusCallback,w
  8013  04F6  0020               	movlb	0	; select bank0
  8014  04F7  00E7               	movwf	I2C1_StatusCallback@ext_len
  8015                           
  8016                           ;i2c1.c: 175: ext_cnt = 0;
  8017  04F8  01E6               	clrf	I2C1_StatusCallback@ext_cnt
  8018                           
  8019                           ;i2c1.c: 176: next = 0x03;
  8020  04F9  3003               	movlw	3
  8021  04FA                     L7:	
  8022  04FA  00F6               	movwf	??_I2C1_StatusCallback
  8023  04FB  0876               	movf	??_I2C1_StatusCallback,w
  8024  04FC  00E8               	movwf	I2C1_StatusCallback@next
  8025                           
  8026                           ;i2c1.c: 177: break;
  8027  04FD  2D32               	goto	i1l4989
  8028  04FE                     i1l4969:	
  8029                           ;i2c1.c: 178: case 0x03:
  8030                           
  8031                           
  8032                           ;i2c1.c: 179: ext_buf[ext_cnt++] = (char)I2C_slaveWriteData;
  8033  04FE  087D               	movf	_I2C_slaveWriteData,w	;volatile
  8034  04FF  00F6               	movwf	??_I2C1_StatusCallback
  8035  0500  0866               	movf	I2C1_StatusCallback@ext_cnt,w
  8036  0501  3EA0               	addlw	(low (I2C1_StatusCallback@ext_buf| (0+256)))& (0+255)
  8037  0502  0086               	movwf	6
  8038  0503  3001               	movlw	1	; select bank3/4
  8039  0504  0087               	movwf	7
  8040  0505  0876               	movf	??_I2C1_StatusCallback,w
  8041  0506  0081               	movwf	1
  8042  0507  3001               	movlw	1
  8043  0508  00F6               	movwf	??_I2C1_StatusCallback
  8044  0509  0876               	movf	??_I2C1_StatusCallback,w
  8045  050A  07E6               	addwf	I2C1_StatusCallback@ext_cnt,f
  8046                           
  8047                           ;i2c1.c: 180: if (ext_cnt >= ext_len) {
  8048  050B  0867               	movf	I2C1_StatusCallback@ext_len,w
  8049  050C  0266               	subwf	I2C1_StatusCallback@ext_cnt,w
  8050  050D  1C03               	skipc
  8051  050E  2D32               	goto	i1l4989
  8052                           
  8053                           ;i2c1.c: 181: if (!PROTOCOL_Read_Lock()) PROTOCOL_EXT(&ext_buf[0]);
  8054  050F  318C  24C4  3184   	fcall	_PROTOCOL_Read_Lock
  8055  0512  3A00               	xorlw	0
  8056  0513  1D03               	skipz
  8057  0514  2D19               	goto	i1l4979
  8058  0515  30A0               	movlw	(low (I2C1_StatusCallback@ext_buf| (0+256)))& (0+255)
  8059  0516  318C  24BD  3184   	fcall	i1_PROTOCOL_EXT
  8060  0519                     i1l4979:	
  8061                           
  8062                           ;i2c1.c: 182: next = 0x00;
  8063  0519  0020               	movlb	0	; select bank0
  8064  051A  01E8               	clrf	I2C1_StatusCallback@next
  8065                           
  8066                           ;i2c1.c: 185: }
  8067                           
  8068                           ;i2c1.c: 183: }
  8069                           ;i2c1.c: 184: break;
  8070  051B  2D32               	goto	i1l4989
  8071  051C                     i1l4983:	
  8072  051C  0020               	movlb	0	; select bank0
  8073  051D  0868               	movf	I2C1_StatusCallback@next,w
  8074                           
  8075                           ; Switch size 1, requested type "space"
  8076                           ; Number of cases is 2, Range of values is 2 to 3
  8077                           ; switch strategies available:
  8078                           ; Name         Instructions Cycles
  8079                           ; simple_byte            7     4 (average)
  8080                           ; direct_byte           13     9 (fixed)
  8081                           ; jumptable            263     9 (fixed)
  8082                           ;	Chosen strategy is simple_byte
  8083  051E  3A02               	xorlw	2	; case 2
  8084  051F  1903               	skipnz
  8085  0520  2CF3               	goto	i1l4963
  8086  0521  3A01               	xorlw	1	; case 3
  8087  0522  1903               	skipnz
  8088  0523  2CFE               	goto	i1l4969
  8089  0524  2D32               	goto	i1l4989
  8090                           
  8091                           ;i2c1.c: 190: }
  8092                           
  8093                           ;i2c1.c: 188: break;
  8094                           
  8095                           ;i2c1.c: 187: default:
  8096                           
  8097                           ;i2c1.c: 186: break;
  8098  0525  2D32               	goto	i1l4989
  8099  0526                     i1l4987:	
  8100  0526  0020               	movlb	0	; select bank0
  8101  0527  0869               	movf	I2C1_StatusCallback@slaveWriteType,w
  8102                           
  8103                           ; Switch size 1, requested type "space"
  8104                           ; Number of cases is 3, Range of values is 0 to 2
  8105                           ; switch strategies available:
  8106                           ; Name         Instructions Cycles
  8107                           ; simple_byte           10     6 (average)
  8108                           ; direct_byte           12     6 (fixed)
  8109                           ; jumptable            260     6 (fixed)
  8110                           ;	Chosen strategy is simple_byte
  8111  0528  3A00               	xorlw	0	; case 0
  8112  0529  1903               	skipnz
  8113  052A  2D1C               	goto	i1l4983
  8114  052B  3A01               	xorlw	1	; case 1
  8115  052C  1903               	skipnz
  8116  052D  2CE0               	goto	i1l4955
  8117  052E  3A03               	xorlw	3	; case 2
  8118  052F  1903               	skipnz
  8119  0530  2CE9               	goto	i1l4957
  8120  0531  2D32               	goto	i1l4989
  8121  0532                     i1l4989:	
  8122                           
  8123                           ;i2c1.c: 192: slaveWriteType = SLAVE_NORMAL_DATA;
  8124  0532  0020               	movlb	0	; select bank0
  8125  0533  01E9               	clrf	I2C1_StatusCallback@slaveWriteType
  8126                           
  8127                           ;i2c1.c: 193: break;
  8128  0534  0008               	return
  8129  0535                     i1l4991:	
  8130                           ;i2c1.c: 197: {
  8131                           ;i2c1.c: 198: case 0x01:
  8132                           
  8133                           ;i2c1.c: 196: switch (I2C_slaveWriteData)
  8134                           
  8135                           ;i2c1.c: 195: case I2C1_SLAVE_READ_REQUEST:
  8136                           
  8137                           
  8138                           ;i2c1.c: 199: SSP1BUF = PROTOCOL_I2C_WHO();
  8139  0535  318C  24C1         	fcall	_PROTOCOL_I2C_WHO
  8140  0537  0024               	movlb	4	; select bank4
  8141  0538  0091               	movwf	17	;volatile
  8142                           
  8143                           ;i2c1.c: 200: break;
  8144  0539  0008               	return
  8145  053A                     i1l4993:	
  8146                           ;i2c1.c: 201: case 0x07:
  8147                           
  8148                           
  8149                           ;i2c1.c: 202: pdata = PROTOCOL_I2C_SEN();
  8150  053A  3187  2721         	fcall	_PROTOCOL_I2C_SEN
  8151  053C  0871               	movf	?_PROTOCOL_I2C_SEN+1,w
  8152  053D  00F9               	movwf	I2C1_StatusCallback@pdata+1
  8153  053E  0870               	movf	?_PROTOCOL_I2C_SEN,w
  8154  053F  00F8               	movwf	I2C1_StatusCallback@pdata
  8155                           
  8156                           ;i2c1.c: 203: SSP1BUF = *pdata;
  8157  0540  0878               	movf	I2C1_StatusCallback@pdata,w
  8158  0541  0086               	movwf	6
  8159  0542  0879               	movf	I2C1_StatusCallback@pdata+1,w
  8160  0543  0087               	movwf	7
  8161  0544  0801               	movf	1,w
  8162  0545  0024               	movlb	4	; select bank4
  8163  0546  0091               	movwf	17	;volatile
  8164                           
  8165                           ;i2c1.c: 204: break;
  8166  0547  0008               	return
  8167  0548                     i1l4997:	
  8168                           ;i2c1.c: 205: case 0x09:
  8169                           
  8170                           
  8171                           ;i2c1.c: 206: SSP1BUF = PROTOCOL_I2C_GET();
  8172  0548  318C  24BE         	fcall	_PROTOCOL_I2C_GET
  8173  054A  0024               	movlb	4	; select bank4
  8174  054B  0091               	movwf	17	;volatile
  8175                           
  8176                           ;i2c1.c: 208: }
  8177                           
  8178                           ;i2c1.c: 207: break;
  8179  054C  0008               	return
  8180  054D                     i1l5001:	
  8181  054D  087D               	movf	_I2C_slaveWriteData,w	;volatile
  8182                           
  8183                           ; Switch size 1, requested type "space"
  8184                           ; Number of cases is 3, Range of values is 1 to 9
  8185                           ; switch strategies available:
  8186                           ; Name         Instructions Cycles
  8187                           ; simple_byte           10     6 (average)
  8188                           ; direct_byte           27     9 (fixed)
  8189                           ; jumptable            263     9 (fixed)
  8190                           ;	Chosen strategy is simple_byte
  8191  054E  3A01               	xorlw	1	; case 1
  8192  054F  1903               	skipnz
  8193  0550  2D35               	goto	i1l4991
  8194  0551  3A06               	xorlw	6	; case 7
  8195  0552  1903               	skipnz
  8196  0553  2D3A               	goto	i1l4993
  8197  0554  3A0E               	xorlw	14	; case 9
  8198  0555  1903               	skipnz
  8199  0556  2D48               	goto	i1l4997
  8200  0557  2D63               	goto	i1l124
  8201                           
  8202                           ;i2c1.c: 216: }
  8203                           
  8204                           ;i2c1.c: 214: break;
  8205                           
  8206                           ;i2c1.c: 213: default:
  8207                           
  8208                           ;i2c1.c: 212: break;
  8209                           
  8210                           ;i2c1.c: 211: case I2C1_SLAVE_READ_COMPLETED:
  8211                           
  8212                           ;i2c1.c: 209: break;
  8213  0558  0008               	return
  8214  0559                     i1l5005:	
  8215  0559  0877               	movf	I2C1_StatusCallback@i2c_bus_state,w
  8216                           
  8217                           ; Switch size 1, requested type "space"
  8218                           ; Number of cases is 5, Range of values is 0 to 4
  8219                           ; switch strategies available:
  8220                           ; Name         Instructions Cycles
  8221                           ; direct_byte           16     6 (fixed)
  8222                           ; simple_byte           16     9 (average)
  8223                           ; jumptable            260     6 (fixed)
  8224                           ;	Chosen strategy is direct_byte
  8225  055A  0084               	movwf	4
  8226  055B  3005               	movlw	5
  8227  055C  0204               	subwf	4,w
  8228  055D  1803               	skipnc
  8229  055E  0008               	return
  8230  055F  3188               	movlp	high i1S5231
  8231  0560  3504               	lslf	4,w
  8232  0561  3E00               	addlw	low i1S5231
  8233  0562  0082               	movwf	2
  8234  0563                     i1l124:	
  8235  0563  0008               	return
  8236  0564                     __end_of_I2C1_StatusCallback:	
  8237                           
  8238                           	psect	swtext1
  8239  0800                     __pswtext1:	
  8240  0800                     i1S5231:	
  8241  0800  3184  2CA0         	ljmp	i1l86
  8242  0802  3185  2D4D         	ljmp	i1l5001
  8243  0804  3185  2D26         	ljmp	i1l4987
  8244  0806  3185  2D63         	ljmp	i1l124
  8245  0808  3184  2CA4         	ljmp	i1l4931
  8246                           
  8247                           	psect	text45
  8248  0CC7                     __ptext45:	
  8249 ;; *************** function i1_PROTOCOL_STP *****************
  8250 ;; Defined at:
  8251 ;;		line 103 in file "protocol.c"
  8252 ;; Parameters:    Size  Location     Type
  8253 ;;		None
  8254 ;; Auto vars:     Size  Location     Type
  8255 ;;		None
  8256 ;; Return value:  Size  Location     Type
  8257 ;;                  1    wreg      void 
  8258 ;; Registers used:
  8259 ;;		wreg, status,2, status,0
  8260 ;; Tracked objects:
  8261 ;;		On entry : 0/0
  8262 ;;		On exit  : 0/0
  8263 ;;		Unchanged: 0/0
  8264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8266 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8268 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8269 ;;Total ram usage:        0 bytes
  8270 ;; Hardware stack levels used:    1
  8271 ;; This function calls:
  8272 ;;		Nothing
  8273 ;; This function is called by:
  8274 ;;		_I2C1_StatusCallback
  8275 ;; This function uses a non-reentrant model
  8276 ;;
  8277                           
  8278                           
  8279                           ;psect for function i1_PROTOCOL_STP
  8280  0CC7                     i1_PROTOCOL_STP:	
  8281                           
  8282                           ;protocol.c: 105: running = 0;
  8283                           
  8284                           ;incstack = 0
  8285                           ; Regs used in i1_PROTOCOL_STP: [wreg+status,2+status,0]
  8286  0CC7  0020               	movlb	0	; select bank0
  8287  0CC8  01DB               	clrf	_running
  8288  0CC9  0008               	return
  8289  0CCA                     __end_ofi1_PROTOCOL_STP:	
  8290                           
  8291                           	psect	text46
  8292  0CDB                     __ptext46:	
  8293 ;; *************** function i1_PROTOCOL_STA *****************
  8294 ;; Defined at:
  8295 ;;		line 98 in file "protocol.c"
  8296 ;; Parameters:    Size  Location     Type
  8297 ;;		None
  8298 ;; Auto vars:     Size  Location     Type
  8299 ;;		None
  8300 ;; Return value:  Size  Location     Type
  8301 ;;                  1    wreg      void 
  8302 ;; Registers used:
  8303 ;;		wreg, status,2, status,0
  8304 ;; Tracked objects:
  8305 ;;		On entry : 0/0
  8306 ;;		On exit  : 0/0
  8307 ;;		Unchanged: 0/0
  8308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8312 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8313 ;;Total ram usage:        0 bytes
  8314 ;; Hardware stack levels used:    1
  8315 ;; This function calls:
  8316 ;;		Nothing
  8317 ;; This function is called by:
  8318 ;;		_I2C1_StatusCallback
  8319 ;; This function uses a non-reentrant model
  8320 ;;
  8321                           
  8322                           
  8323                           ;psect for function i1_PROTOCOL_STA
  8324  0CDB                     i1_PROTOCOL_STA:	
  8325                           
  8326                           ;protocol.c: 100: running = 1;
  8327                           
  8328                           ;incstack = 0
  8329                           ; Regs used in i1_PROTOCOL_STA: [wreg+status,2+status,0]
  8330  0CDB  0020               	movlb	0	; select bank0
  8331  0CDC  01DB               	clrf	_running
  8332  0CDD  0ADB               	incf	_running,f
  8333  0CDE  0008               	return
  8334  0CDF                     __end_ofi1_PROTOCOL_STA:	
  8335                           
  8336                           	psect	text47
  8337  0DA4                     __ptext47:	
  8338 ;; *************** function i1_PROTOCOL_SET *****************
  8339 ;; Defined at:
  8340 ;;		line 116 in file "protocol.c"
  8341 ;; Parameters:    Size  Location     Type
  8342 ;;  value_          1    wreg     unsigned char 
  8343 ;; Auto vars:     Size  Location     Type
  8344 ;;  value_          1    5[COMMON] unsigned char 
  8345 ;; Return value:  Size  Location     Type
  8346 ;;                  1    wreg      void 
  8347 ;; Registers used:
  8348 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8349 ;; Tracked objects:
  8350 ;;		On entry : 0/0
  8351 ;;		On exit  : 0/0
  8352 ;;		Unchanged: 0/0
  8353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8355 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8356 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8357 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8358 ;;Total ram usage:        2 bytes
  8359 ;; Hardware stack levels used:    1
  8360 ;; Hardware stack levels required when called:    1
  8361 ;; This function calls:
  8362 ;;		Absolute function
  8363 ;;		i1_set_handler
  8364 ;; This function is called by:
  8365 ;;		_I2C1_StatusCallback
  8366 ;; This function uses a non-reentrant model
  8367 ;;
  8368                           
  8369                           
  8370                           ;psect for function i1_PROTOCOL_SET
  8371  0DA4                     i1_PROTOCOL_SET:	
  8372                           
  8373                           ;incstack = 0
  8374                           ; Regs used in i1_PROTOCOL_SET: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8375                           ;i1PROTOCOL_SET@value_ stored from wreg
  8376  0DA4  00F5               	movwf	i1PROTOCOL_SET@value_
  8377                           
  8378                           ;protocol.c: 117: value = value_;
  8379  0DA5  0875               	movf	i1PROTOCOL_SET@value_,w
  8380  0DA6  00F4               	movwf	??i1_PROTOCOL_SET
  8381  0DA7  0874               	movf	??i1_PROTOCOL_SET,w
  8382  0DA8  0020               	movlb	0	; select bank0
  8383  0DA9  00DD               	movwf	_value
  8384                           
  8385                           ;protocol.c: 118: if (PROTOCOL_Set_Handler) PROTOCOL_Set_Handler(value);
  8386  0DAA  0851               	movf	_PROTOCOL_Set_Handler,w
  8387  0DAB  0452               	iorwf	_PROTOCOL_Set_Handler+1,w
  8388  0DAC  1903               	btfsc	3,2
  8389  0DAD  0008               	return
  8390  0DAE  085D               	movf	_value,w
  8391  0DAF  00F4               	movwf	??i1_PROTOCOL_SET
  8392  0DB0  0874               	movf	??i1_PROTOCOL_SET,w
  8393  0DB1  00F0               	movwf	i1set_handler@value
  8394  0DB2  0852               	movf	_PROTOCOL_Set_Handler+1,w
  8395  0DB3  008A               	movwf	10
  8396  0DB4  0851               	movf	_PROTOCOL_Set_Handler,w
  8397  0DB5  000A               	callw
  8398  0DB6  318D               	pagesel	$
  8399  0DB7  0008               	return
  8400  0DB8                     __end_ofi1_PROTOCOL_SET:	
  8401                           
  8402                           	psect	text48
  8403  0F6A                     __ptext48:	
  8404 ;; *************** function i1_set_handler *****************
  8405 ;; Defined at:
  8406 ;;		line 67 in file "main.c"
  8407 ;; Parameters:    Size  Location     Type
  8408 ;;  value           1    0[COMMON] unsigned char 
  8409 ;; Auto vars:     Size  Location     Type
  8410 ;;  set_handler     1    3[COMMON] unsigned char 
  8411 ;;  set_handler     1    2[COMMON] unsigned char 
  8412 ;; Return value:  Size  Location     Type
  8413 ;;                  1    wreg      void 
  8414 ;; Registers used:
  8415 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  8416 ;; Tracked objects:
  8417 ;;		On entry : 0/0
  8418 ;;		On exit  : 0/0
  8419 ;;		Unchanged: 0/0
  8420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8421 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8422 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8423 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8424 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8425 ;;Total ram usage:        4 bytes
  8426 ;; Hardware stack levels used:    1
  8427 ;; This function calls:
  8428 ;;		Nothing
  8429 ;; This function is called by:
  8430 ;; This function uses a non-reentrant model
  8431 ;;
  8432                           
  8433                           
  8434                           ;psect for function i1_set_handler
  8435  0F6A                     i1_set_handler:	
  8436  0F6A                     i1l2749:	
  8437                           ;incstack = 0
  8438                           ; Regs used in i1_set_handler: [wreg-fsr1h+status,2+status,0+pclath]
  8439                           
  8440                           
  8441                           ;main.c: 68: uint8_t i;
  8442                           ;main.c: 69: uint8_t mask = 0b00000001;
  8443  0F6A  01F2               	clrf	i1set_handler@mask
  8444  0F6B  0AF2               	incf	i1set_handler@mask,f
  8445                           
  8446                           ;main.c: 70: for(i=0; i<6; i++) {
  8447  0F6C  01F3               	clrf	i1set_handler@i
  8448  0F6D                     L8:	
  8449  0F6D  3006               	movlw	6
  8450  0F6E  0273               	subwf	i1set_handler@i,w
  8451  0F6F  1803               	btfsc	3,0
  8452  0F70  0008               	return
  8453                           
  8454                           ;main.c: 71: if ((value & mask) == 0) {
  8455  0F71  0870               	movf	i1set_handler@value,w
  8456  0F72  0572               	andwf	i1set_handler@mask,w
  8457  0F73  1D03               	btfss	3,2
  8458  0F74  2F80               	goto	i1l2761
  8459                           
  8460                           ;main.c: 72: analog_in[i] = 0;
  8461  0F75  0873               	movf	i1set_handler@i,w
  8462  0F76  3EB6               	addlw	(low (_analog_in| 0))& (0+255)
  8463  0F77  0086               	movwf	6
  8464  0F78  0187               	clrf	7
  8465  0F79  0181               	clrf	1
  8466                           
  8467                           ;main.c: 73: position[i] = 0;
  8468  0F7A  0873               	movf	i1set_handler@i,w
  8469  0F7B  3ED3               	addlw	(low (_position| 0))& (0+255)
  8470  0F7C  0086               	movwf	6
  8471  0F7D  0187               	clrf	7
  8472  0F7E  0181               	clrf	1
  8473                           
  8474                           ;main.c: 74: } else {
  8475  0F7F  2F8F               	goto	i1l2763
  8476  0F80                     i1l2761:	
  8477                           
  8478                           ;main.c: 75: analog_in[i] = ANALOG_IN[i];
  8479  0F80  0873               	movf	i1set_handler@i,w
  8480  0F81  3ED8               	addlw	low (_ANALOG_IN| (0+32768))
  8481  0F82  0084               	movwf	4
  8482  0F83  3083               	movlw	high (_ANALOG_IN| (0+32768))
  8483  0F84  1803               	skipnc
  8484  0F85  3E01               	addlw	1
  8485  0F86  0085               	movwf	5
  8486  0F87  0800               	movf	0,w	;code access
  8487  0F88  00F1               	movwf	??i1_set_handler
  8488  0F89  0873               	movf	i1set_handler@i,w
  8489  0F8A  3EB6               	addlw	(low (_analog_in| 0))& (0+255)
  8490  0F8B  0086               	movwf	6
  8491  0F8C  0187               	clrf	7
  8492  0F8D  0871               	movf	??i1_set_handler,w
  8493  0F8E  0081               	movwf	1
  8494  0F8F                     i1l2763:	
  8495                           
  8496                           ;main.c: 76: }
  8497                           ;main.c: 77: mask = mask << 1;
  8498  0F8F  3572               	lslf	i1set_handler@mask,w
  8499  0F90  00F1               	movwf	??i1_set_handler
  8500  0F91  0871               	movf	??i1_set_handler,w
  8501  0F92  00F2               	movwf	i1set_handler@mask
  8502  0F93  3001               	movlw	1
  8503  0F94  00F1               	movwf	??i1_set_handler
  8504  0F95  0871               	movf	??i1_set_handler,w
  8505  0F96  07F3               	addwf	i1set_handler@i,f
  8506  0F97  2F6D               	goto	L8
  8507  0F98                     __end_ofi1_set_handler:	
  8508                           
  8509                           	psect	text49
  8510  0D10                     __ptext49:	
  8511 ;; *************** function i1_PROTOCOL_SAV *****************
  8512 ;; Defined at:
  8513 ;;		line 112 in file "protocol.c"
  8514 ;; Parameters:    Size  Location     Type
  8515 ;;		None
  8516 ;; Auto vars:     Size  Location     Type
  8517 ;;		None
  8518 ;; Return value:  Size  Location     Type
  8519 ;;                  1    wreg      void 
  8520 ;; Registers used:
  8521 ;;		wreg, status,2, status,0, pclath, cstack
  8522 ;; Tracked objects:
  8523 ;;		On entry : 0/0
  8524 ;;		On exit  : 0/0
  8525 ;;		Unchanged: 0/0
  8526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8528 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8529 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8530 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8531 ;;Total ram usage:        1 bytes
  8532 ;; Hardware stack levels used:    1
  8533 ;; Hardware stack levels required when called:    1
  8534 ;; This function calls:
  8535 ;;		i1_DATAEE_WriteByte
  8536 ;; This function is called by:
  8537 ;;		_I2C1_StatusCallback
  8538 ;; This function uses a non-reentrant model
  8539 ;;
  8540                           
  8541                           
  8542                           ;psect for function i1_PROTOCOL_SAV
  8543  0D10                     i1_PROTOCOL_SAV:	
  8544                           
  8545                           ;protocol.c: 113: DATAEE_WriteByte(1, value);
  8546                           
  8547                           ;incstack = 0
  8548                           ; Regs used in i1_PROTOCOL_SAV: [wreg+status,2+status,0+pclath+cstack]
  8549  0D10  0020               	movlb	0	; select bank0
  8550  0D11  085D               	movf	_value,w
  8551  0D12  00F3               	movwf	??i1_PROTOCOL_SAV
  8552  0D13  0873               	movf	??i1_PROTOCOL_SAV,w
  8553  0D14  00F0               	movwf	i1DATAEE_WriteByte@bData
  8554  0D15  3001               	movlw	1
  8555  0D16  318E  2654         	fcall	i1_DATAEE_WriteByte
  8556  0D18  0008               	return
  8557  0D19                     __end_ofi1_PROTOCOL_SAV:	
  8558                           
  8559                           	psect	text50
  8560  0E54                     __ptext50:	
  8561 ;; *************** function i1_DATAEE_WriteByte *****************
  8562 ;; Defined at:
  8563 ;;		line 180 in file "mcc_generated_files/memory.c"
  8564 ;; Parameters:    Size  Location     Type
  8565 ;;  bAdd            1    wreg     unsigned char 
  8566 ;;  bData           1    0[COMMON] unsigned char 
  8567 ;; Auto vars:     Size  Location     Type
  8568 ;;  bAdd            1    1[COMMON] unsigned char 
  8569 ;;  DATAEE_Write    1    2[COMMON] unsigned char 
  8570 ;; Return value:  Size  Location     Type
  8571 ;;                  1    wreg      void 
  8572 ;; Registers used:
  8573 ;;		wreg, status,2, status,0
  8574 ;; Tracked objects:
  8575 ;;		On entry : 0/0
  8576 ;;		On exit  : 0/0
  8577 ;;		Unchanged: 0/0
  8578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8579 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8580 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8581 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8582 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8583 ;;Total ram usage:        3 bytes
  8584 ;; Hardware stack levels used:    1
  8585 ;; This function calls:
  8586 ;;		Nothing
  8587 ;; This function is called by:
  8588 ;;		i1_PROTOCOL_SAV
  8589 ;; This function uses a non-reentrant model
  8590 ;;
  8591                           
  8592                           
  8593                           ;psect for function i1_DATAEE_WriteByte
  8594  0E54                     i1_DATAEE_WriteByte:	
  8595                           
  8596                           ;incstack = 0
  8597                           ; Regs used in i1_DATAEE_WriteByte: [wreg+status,2+status,0]
  8598                           ;i1DATAEE_WriteByte@bAdd stored from wreg
  8599  0E54  00F1               	movwf	i1DATAEE_WriteByte@bAdd
  8600                           
  8601                           ;memory.c: 182: uint8_t GIEBitValue = 0;
  8602  0E55  01F2               	clrf	i1DATAEE_WriteByte@GIEBitValue
  8603                           
  8604                           ;memory.c: 184: EEADRL = (bAdd & 0x0ff);
  8605  0E56  0871               	movf	i1DATAEE_WriteByte@bAdd,w
  8606  0E57  0023               	movlb	3	; select bank3
  8607  0E58  0091               	movwf	17	;volatile
  8608                           
  8609                           ;memory.c: 185: EEDATL = bData;
  8610  0E59  0870               	movf	i1DATAEE_WriteByte@bData,w
  8611  0E5A  0093               	movwf	19	;volatile
  8612                           
  8613                           ;memory.c: 186: EECON1bits.EEPGD = 0;
  8614  0E5B  1395               	bcf	21,7	;volsfr
  8615                           
  8616                           ;memory.c: 187: EECON1bits.CFGS = 0;
  8617  0E5C  1315               	bcf	21,6	;volsfr
  8618                           
  8619                           ;memory.c: 188: EECON1bits.WREN = 1;
  8620  0E5D  1515               	bsf	21,2	;volsfr
  8621                           
  8622                           ;memory.c: 190: GIEBitValue = INTCONbits.GIE;
  8623  0E5E  3000               	movlw	0
  8624  0E5F  1B8B               	btfsc	11,7	;volatile
  8625  0E60  3001               	movlw	1
  8626  0E61  00F2               	movwf	i1DATAEE_WriteByte@GIEBitValue
  8627                           
  8628                           ;memory.c: 191: INTCONbits.GIE = 0;
  8629  0E62  138B               	bcf	11,7	;volatile
  8630                           
  8631                           ;memory.c: 192: EECON2 = 0x55;
  8632  0E63  3055               	movlw	85
  8633  0E64  0096               	movwf	22	;volsfr
  8634                           
  8635                           ;memory.c: 193: EECON2 = 0xAA;
  8636  0E65  30AA               	movlw	170
  8637  0E66  0096               	movwf	22	;volsfr
  8638                           
  8639                           ;memory.c: 194: EECON1bits.WR = 1;
  8640  0E67  1495               	bsf	21,1	;volsfr
  8641  0E68                     i1l321:	
  8642                           ;memory.c: 197: {
  8643                           
  8644                           ;memory.c: 196: while (EECON1bits.WR)
  8645                           
  8646  0E68  1895               	btfsc	21,1	;volsfr
  8647  0E69  2E68               	goto	i1l321
  8648                           
  8649                           ;memory.c: 198: }
  8650                           ;memory.c: 200: EECON1bits.WREN = 0;
  8651  0E6A  1115               	bcf	21,2	;volsfr
  8652                           
  8653                           ;memory.c: 201: INTCONbits.GIE = GIEBitValue;
  8654  0E6B  0C72               	rrf	i1DATAEE_WriteByte@GIEBitValue,w
  8655  0E6C  1C03               	skipc
  8656  0E6D  138B               	bcf	11,7	;volatile
  8657  0E6E  1803               	skipnc
  8658  0E6F  178B               	bsf	11,7	;volatile
  8659  0E70  0008               	return
  8660  0E71                     __end_ofi1_DATAEE_WriteByte:	
  8661                           
  8662                           	psect	text51
  8663  0CBD                     __ptext51:	
  8664 ;; *************** function i1_PROTOCOL_EXT *****************
  8665 ;; Defined at:
  8666 ;;		line 121 in file "protocol.c"
  8667 ;; Parameters:    Size  Location     Type
  8668 ;;  char_buf        1    wreg     PTR unsigned char 
  8669 ;;		 -> buf(48), I2C1_StatusCallback@ext_buf(48), 
  8670 ;; Auto vars:     Size  Location     Type
  8671 ;;  char_buf        1  (no storage) PTR unsigned char 
  8672 ;;		 -> buf(48), I2C1_StatusCallback@ext_buf(48), 
  8673 ;; Return value:  Size  Location     Type
  8674 ;;                  1    wreg      void 
  8675 ;; Registers used:
  8676 ;;		wreg, status,2, status,0
  8677 ;; Tracked objects:
  8678 ;;		On entry : 0/0
  8679 ;;		On exit  : 0/0
  8680 ;;		Unchanged: 0/0
  8681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8685 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8686 ;;Total ram usage:        0 bytes
  8687 ;; Hardware stack levels used:    1
  8688 ;; This function calls:
  8689 ;;		Nothing
  8690 ;; This function is called by:
  8691 ;;		_I2C1_StatusCallback
  8692 ;; This function uses a non-reentrant model
  8693 ;;
  8694                           
  8695                           
  8696                           ;psect for function i1_PROTOCOL_EXT
  8697  0CBD                     i1_PROTOCOL_EXT:	
  8698                           
  8699                           ;incstack = 0
  8700                           ; Regs used in i1_PROTOCOL_EXT: [wreg+status,2+status,0]
  8701  0CBD  0008               	return
  8702  0CBE                     __end_ofi1_PROTOCOL_EXT:	
  8703                           
  8704                           	psect	text52
  8705  0CC4                     __ptext52:	
  8706 ;; *************** function _PROTOCOL_Read_Lock *****************
  8707 ;; Defined at:
  8708 ;;		line 129 in file "protocol.c"
  8709 ;; Parameters:    Size  Location     Type
  8710 ;;		None
  8711 ;; Auto vars:     Size  Location     Type
  8712 ;;		None
  8713 ;; Return value:  Size  Location     Type
  8714 ;;                  1    wreg      unsigned char 
  8715 ;; Registers used:
  8716 ;;		wreg
  8717 ;; Tracked objects:
  8718 ;;		On entry : 0/0
  8719 ;;		On exit  : 0/0
  8720 ;;		Unchanged: 0/0
  8721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8723 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8725 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8726 ;;Total ram usage:        0 bytes
  8727 ;; Hardware stack levels used:    1
  8728 ;; This function calls:
  8729 ;;		Nothing
  8730 ;; This function is called by:
  8731 ;;		_I2C1_StatusCallback
  8732 ;; This function uses a non-reentrant model
  8733 ;;
  8734                           
  8735                           
  8736                           ;psect for function _PROTOCOL_Read_Lock
  8737  0CC4                     _PROTOCOL_Read_Lock:	
  8738                           
  8739                           ;protocol.c: 130: return locked;
  8740                           
  8741                           ;incstack = 0
  8742                           ; Regs used in _PROTOCOL_Read_Lock: [wreg]
  8743  0CC4  0020               	movlb	0	; select bank0
  8744  0CC5  085C               	movf	_locked,w
  8745  0CC6  0008               	return
  8746  0CC7                     __end_of_PROTOCOL_Read_Lock:	
  8747                           
  8748                           	psect	text53
  8749  0D34                     __ptext53:	
  8750 ;; *************** function _PROTOCOL_RST *****************
  8751 ;; Defined at:
  8752 ;;		line 285 in file "protocol.c"
  8753 ;; Parameters:    Size  Location     Type
  8754 ;;		None
  8755 ;; Auto vars:     Size  Location     Type
  8756 ;;		None
  8757 ;; Return value:  Size  Location     Type
  8758 ;;                  1    wreg      void 
  8759 ;; Registers used:
  8760 ;;		wreg, status,2, status,0
  8761 ;; Tracked objects:
  8762 ;;		On entry : 0/0
  8763 ;;		On exit  : 0/0
  8764 ;;		Unchanged: 0/0
  8765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8767 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8768 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8769 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8770 ;;Total ram usage:        1 bytes
  8771 ;; Hardware stack levels used:    1
  8772 ;; This function calls:
  8773 ;;		Nothing
  8774 ;; This function is called by:
  8775 ;;		_I2C1_StatusCallback
  8776 ;; This function uses a non-reentrant model
  8777 ;;
  8778                           
  8779                           
  8780                           ;psect for function _PROTOCOL_RST
  8781  0D34                     _PROTOCOL_RST:	
  8782                           
  8783                           ;protocol.c: 286: if (readbuf.status != TLV_SET) {
  8784                           
  8785                           ;incstack = 0
  8786                           ; Regs used in _PROTOCOL_RST: [wreg+status,2+status,0]
  8787  0D34  0021               	movlb	1	; select bank1
  8788  0D35  0851               	movf	(_readbuf^(0+128)+4),w
  8789  0D36  1903               	btfsc	3,2
  8790  0D37  0008               	return
  8791                           
  8792                           ;protocol.c: 287: readbuf.buf_cnt = 0;
  8793  0D38  01D2               	clrf	(_readbuf^(0+128)+5)
  8794                           
  8795                           ;protocol.c: 288: readbuf.status = COMPLETE;
  8796  0D39  3003               	movlw	3
  8797  0D3A  00F0               	movwf	??_PROTOCOL_RST
  8798  0D3B  0870               	movf	??_PROTOCOL_RST,w
  8799  0D3C  00D1               	movwf	(_readbuf^(0+128)+4)
  8800  0D3D  0008               	return
  8801  0D3E                     __end_of_PROTOCOL_RST:	
  8802                           
  8803                           	psect	text54
  8804  0CD7                     __ptext54:	
  8805 ;; *************** function _PROTOCOL_INV *****************
  8806 ;; Defined at:
  8807 ;;		line 108 in file "protocol.c"
  8808 ;; Parameters:    Size  Location     Type
  8809 ;;		None
  8810 ;; Auto vars:     Size  Location     Type
  8811 ;;		None
  8812 ;; Return value:  Size  Location     Type
  8813 ;;                  1    wreg      void 
  8814 ;; Registers used:
  8815 ;;		None
  8816 ;; Tracked objects:
  8817 ;;		On entry : 0/0
  8818 ;;		On exit  : 0/0
  8819 ;;		Unchanged: 0/0
  8820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8822 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8823 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8824 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8825 ;;Total ram usage:        0 bytes
  8826 ;; Hardware stack levels used:    1
  8827 ;; This function calls:
  8828 ;;		Nothing
  8829 ;; This function is called by:
  8830 ;;		_I2C1_StatusCallback
  8831 ;; This function uses a non-reentrant model
  8832 ;;
  8833                           
  8834                           
  8835                           ;psect for function _PROTOCOL_INV
  8836  0CD7                     _PROTOCOL_INV:	
  8837                           
  8838                           ;protocol.c: 109: invoked = 1;
  8839                           
  8840                           ;incstack = 0
  8841                           ; Regs used in _PROTOCOL_INV: []
  8842  0CD7  0020               	movlb	0	; select bank0
  8843  0CD8  01DA               	clrf	_invoked
  8844  0CD9  0ADA               	incf	_invoked,f
  8845  0CDA  0008               	return
  8846  0CDB                     __end_of_PROTOCOL_INV:	
  8847                           
  8848                           	psect	text55
  8849  0CC1                     __ptext55:	
  8850 ;; *************** function _PROTOCOL_I2C_WHO *****************
  8851 ;; Defined at:
  8852 ;;		line 205 in file "protocol.c"
  8853 ;; Parameters:    Size  Location     Type
  8854 ;;		None
  8855 ;; Auto vars:     Size  Location     Type
  8856 ;;		None
  8857 ;; Return value:  Size  Location     Type
  8858 ;;                  1    wreg      unsigned char 
  8859 ;; Registers used:
  8860 ;;		wreg
  8861 ;; Tracked objects:
  8862 ;;		On entry : 0/0
  8863 ;;		On exit  : 0/0
  8864 ;;		Unchanged: 0/0
  8865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8869 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8870 ;;Total ram usage:        0 bytes
  8871 ;; Hardware stack levels used:    1
  8872 ;; This function calls:
  8873 ;;		Nothing
  8874 ;; This function is called by:
  8875 ;;		_I2C1_StatusCallback
  8876 ;; This function uses a non-reentrant model
  8877 ;;
  8878                           
  8879                           
  8880                           ;psect for function _PROTOCOL_I2C_WHO
  8881  0CC1                     _PROTOCOL_I2C_WHO:	
  8882                           
  8883                           ;protocol.c: 206: return slave_address;
  8884                           
  8885                           ;incstack = 0
  8886                           ; Regs used in _PROTOCOL_I2C_WHO: [wreg]
  8887  0CC1  0020               	movlb	0	; select bank0
  8888  0CC2  085F               	movf	_slave_address,w
  8889  0CC3  0008               	return
  8890  0CC4                     __end_of_PROTOCOL_I2C_WHO:	
  8891                           
  8892                           	psect	text56
  8893  0721                     __ptext56:	
  8894 ;; *************** function _PROTOCOL_I2C_SEN *****************
  8895 ;; Defined at:
  8896 ;;		line 404 in file "protocol.c"
  8897 ;; Parameters:    Size  Location     Type
  8898 ;;		None
  8899 ;; Auto vars:     Size  Location     Type
  8900 ;;  pdata           2    2[COMMON] PTR unsigned char 
  8901 ;;		 -> type_no_data(1), PROTOCOL_Send_uint8_t@pbuf(1), sendbuf(16), readbuf.length(1), 
  8902 ;;		 -> readbuf.type(1), readbuf(6), position(6), 
  8903 ;; Return value:  Size  Location     Type
  8904 ;;                  2   52[None  ] PTR unsigned char 
  8905 ;; Registers used:
  8906 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8907 ;; Tracked objects:
  8908 ;;		On entry : 0/0
  8909 ;;		On exit  : 0/0
  8910 ;;		Unchanged: 0/0
  8911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8913 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8914 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8915 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8916 ;;Total ram usage:        4 bytes
  8917 ;; Hardware stack levels used:    1
  8918 ;; This function calls:
  8919 ;;		Nothing
  8920 ;; This function is called by:
  8921 ;;		_I2C1_StatusCallback
  8922 ;; This function uses a non-reentrant model
  8923 ;;
  8924                           
  8925                           
  8926                           ;psect for function _PROTOCOL_I2C_SEN
  8927  0721                     _PROTOCOL_I2C_SEN:	
  8928                           
  8929                           ;protocol.c: 405: uint8_t *pdata;
  8930                           ;protocol.c: 406: switch(readbuf.status) {
  8931                           
  8932                           ;incstack = 0
  8933                           ; Regs used in _PROTOCOL_I2C_SEN: [wreg-fsr0h+status,2+status,0]
  8934  0721  2F50               	goto	i1l2811
  8935  0722                     i1l2789:	
  8936                           ;protocol.c: 407: case TLV_SET:
  8937                           
  8938                           
  8939                           ;protocol.c: 408: pdata = &readbuf.type;
  8940  0722  30CD               	movlw	low _readbuf
  8941  0723  00F2               	movwf	PROTOCOL_I2C_SEN@pdata
  8942  0724  3000               	movlw	high _readbuf
  8943  0725  00F3               	movwf	PROTOCOL_I2C_SEN@pdata+1
  8944                           
  8945                           ;protocol.c: 409: readbuf.status = TYPE_SENT;
  8946  0726  0021               	movlb	1	; select bank1
  8947  0727  01D1               	clrf	(_readbuf^(0+128)+4)
  8948  0728  0AD1               	incf	(_readbuf^(0+128)+4),f
  8949                           
  8950                           ;protocol.c: 410: break;
  8951  0729  2F5F               	goto	i1l2813
  8952  072A                     i1l2793:	
  8953                           ;protocol.c: 411: case TYPE_SENT:
  8954                           
  8955                           
  8956                           ;protocol.c: 412: pdata = &readbuf.length;
  8957  072A  30CE               	movlw	low (_readbuf+1)
  8958  072B  00F2               	movwf	PROTOCOL_I2C_SEN@pdata
  8959  072C  3000               	movlw	high (_readbuf+1)
  8960  072D  00F3               	movwf	PROTOCOL_I2C_SEN@pdata+1
  8961                           
  8962                           ;protocol.c: 413: readbuf.status = LENGTH_SENT;
  8963  072E  3002               	movlw	2
  8964  072F  2F47               	goto	L9
  8965  0730                     i1l2797:	
  8966                           ;protocol.c: 415: case LENGTH_SENT:
  8967                           
  8968                           ;protocol.c: 414: break;
  8969                           
  8970                           
  8971                           ;protocol.c: 416: if (readbuf.buf_cnt < readbuf.length) {
  8972  0730  084E               	movf	(_readbuf^(0+128)+1),w
  8973  0731  0252               	subwf	(_readbuf^(0+128)+5),w
  8974  0732  1803               	skipnc
  8975  0733  2F41               	goto	i1l2801
  8976                           
  8977                           ;protocol.c: 417: pdata = &readbuf.pbuffer[readbuf.buf_cnt++];
  8978  0734  0852               	movf	(_readbuf^(0+128)+5),w
  8979  0735  00F0               	movwf	??_PROTOCOL_I2C_SEN
  8980  0736  01F1               	clrf	??_PROTOCOL_I2C_SEN+1
  8981  0737  0870               	movf	??_PROTOCOL_I2C_SEN,w
  8982  0738  074F               	addwf	(low ((_readbuf| 0+2)))^(0+128),w
  8983  0739  00F2               	movwf	PROTOCOL_I2C_SEN@pdata
  8984  073A  0871               	movf	??_PROTOCOL_I2C_SEN+1,w
  8985  073B  3D50               	addwfc	((low ((_readbuf| 0+2))+1))^(0+128),w
  8986  073C  00F3               	movwf	PROTOCOL_I2C_SEN@pdata+1
  8987  073D  3001               	movlw	1
  8988  073E  00F0               	movwf	??_PROTOCOL_I2C_SEN
  8989  073F  0870               	movf	??_PROTOCOL_I2C_SEN,w
  8990  0740  07D2               	addwf	(_readbuf^(0+128)+5),f
  8991  0741                     i1l2801:	
  8992                           
  8993                           ;protocol.c: 418: }
  8994                           ;protocol.c: 419: if (readbuf.buf_cnt == readbuf.length) {
  8995  0741  0852               	movf	(_readbuf^(0+128)+5),w
  8996  0742  064E               	xorwf	(_readbuf^(0+128)+1),w
  8997  0743  1D03               	skipz
  8998  0744  2F5F               	goto	i1l2813
  8999                           
  9000                           ;protocol.c: 420: readbuf.buf_cnt = 0;
  9001  0745  01D2               	clrf	(_readbuf^(0+128)+5)
  9002                           
  9003                           ;protocol.c: 421: readbuf.status = COMPLETE;
  9004  0746  3003               	movlw	3
  9005  0747                     L9:	
  9006  0747  00F0               	movwf	??_PROTOCOL_I2C_SEN
  9007  0748  0870               	movf	??_PROTOCOL_I2C_SEN,w
  9008  0749  00D1               	movwf	(_readbuf^(0+128)+4)
  9009                           
  9010                           ;protocol.c: 422: }
  9011                           ;protocol.c: 423: break;
  9012  074A  2F5F               	goto	i1l2813
  9013  074B                     i1l2807:	
  9014                           ;protocol.c: 424: case COMPLETE:
  9015                           
  9016                           
  9017                           ;protocol.c: 425: pdata = &type_no_data;
  9018  074B  306E               	movlw	low _type_no_data
  9019  074C  00F2               	movwf	PROTOCOL_I2C_SEN@pdata
  9020  074D  3000               	movlw	high _type_no_data
  9021  074E  00F3               	movwf	PROTOCOL_I2C_SEN@pdata+1
  9022                           
  9023                           ;protocol.c: 427: }
  9024                           
  9025                           ;protocol.c: 426: break;
  9026  074F  2F5F               	goto	i1l2813
  9027  0750                     i1l2811:	
  9028  0750  0021               	movlb	1	; select bank1
  9029  0751  0851               	movf	(_readbuf^(0+128)+4),w
  9030                           
  9031                           ; Switch size 1, requested type "space"
  9032                           ; Number of cases is 4, Range of values is 0 to 3
  9033                           ; switch strategies available:
  9034                           ; Name         Instructions Cycles
  9035                           ; simple_byte           13     7 (average)
  9036                           ; direct_byte           14     6 (fixed)
  9037                           ; jumptable            260     6 (fixed)
  9038                           ;	Chosen strategy is simple_byte
  9039  0752  3A00               	xorlw	0	; case 0
  9040  0753  1903               	skipnz
  9041  0754  2F22               	goto	i1l2789
  9042  0755  3A01               	xorlw	1	; case 1
  9043  0756  1903               	skipnz
  9044  0757  2F2A               	goto	i1l2793
  9045  0758  3A03               	xorlw	3	; case 2
  9046  0759  1903               	skipnz
  9047  075A  2F30               	goto	i1l2797
  9048  075B  3A01               	xorlw	1	; case 3
  9049  075C  1903               	skipnz
  9050  075D  2F4B               	goto	i1l2807
  9051  075E  2F5F               	goto	i1l2813
  9052  075F                     i1l2813:	
  9053                           
  9054                           ;protocol.c: 428: return pdata;
  9055  075F  0873               	movf	PROTOCOL_I2C_SEN@pdata+1,w
  9056  0760  00F1               	movwf	?_PROTOCOL_I2C_SEN+1
  9057  0761  0872               	movf	PROTOCOL_I2C_SEN@pdata,w
  9058  0762  00F0               	movwf	?_PROTOCOL_I2C_SEN
  9059  0763  0008               	return
  9060  0764                     __end_of_PROTOCOL_I2C_SEN:	
  9061                           
  9062                           	psect	text57
  9063  0CBE                     __ptext57:	
  9064 ;; *************** function _PROTOCOL_I2C_GET *****************
  9065 ;; Defined at:
  9066 ;;		line 209 in file "protocol.c"
  9067 ;; Parameters:    Size  Location     Type
  9068 ;;		None
  9069 ;; Auto vars:     Size  Location     Type
  9070 ;;		None
  9071 ;; Return value:  Size  Location     Type
  9072 ;;                  1    wreg      unsigned char 
  9073 ;; Registers used:
  9074 ;;		wreg
  9075 ;; Tracked objects:
  9076 ;;		On entry : 0/0
  9077 ;;		On exit  : 0/0
  9078 ;;		Unchanged: 0/0
  9079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9081 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9083 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9084 ;;Total ram usage:        0 bytes
  9085 ;; Hardware stack levels used:    1
  9086 ;; This function calls:
  9087 ;;		Nothing
  9088 ;; This function is called by:
  9089 ;;		_I2C1_StatusCallback
  9090 ;; This function uses a non-reentrant model
  9091 ;;
  9092                           
  9093                           
  9094                           ;psect for function _PROTOCOL_I2C_GET
  9095  0CBE                     _PROTOCOL_I2C_GET:	
  9096                           
  9097                           ;protocol.c: 210: return value;
  9098                           
  9099                           ;incstack = 0
  9100                           ; Regs used in _PROTOCOL_I2C_GET: [wreg]
  9101  0CBE  0020               	movlb	0	; select bank0
  9102  0CBF  085D               	movf	_value,w
  9103  0CC0  0008               	return
  9104  0CC1                     __end_of_PROTOCOL_I2C_GET:	
  9105                           
  9106                           	psect	text58
  9107  0CD3                     __ptext58:	
  9108 ;; *************** function _PROTOCOL_Backplane_Slave_Enabled *****************
  9109 ;; Defined at:
  9110 ;;		line 201 in file "protocol.c"
  9111 ;; Parameters:    Size  Location     Type
  9112 ;;		None
  9113 ;; Auto vars:     Size  Location     Type
  9114 ;;		None
  9115 ;; Return value:  Size  Location     Type
  9116 ;;                  1    wreg      void 
  9117 ;; Registers used:
  9118 ;;		None
  9119 ;; Tracked objects:
  9120 ;;		On entry : 0/0
  9121 ;;		On exit  : 0/0
  9122 ;;		Unchanged: 0/0
  9123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9125 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9127 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9128 ;;Total ram usage:        0 bytes
  9129 ;; Hardware stack levels used:    1
  9130 ;; This function calls:
  9131 ;;		Nothing
  9132 ;; This function is called by:
  9133 ;;		_I2C1_StatusCallback
  9134 ;; This function uses a non-reentrant model
  9135 ;;
  9136                           
  9137                           
  9138                           ;psect for function _PROTOCOL_Backplane_Slave_Enabled
  9139  0CD3                     _PROTOCOL_Backplane_Slave_Enabled:	
  9140                           
  9141                           ;protocol.c: 202: backplane_slave_enabled = 1;
  9142                           
  9143                           ;incstack = 0
  9144                           ; Regs used in _PROTOCOL_Backplane_Slave_Enabled: []
  9145  0CD3  0020               	movlb	0	; select bank0
  9146  0CD4  01D6               	clrf	_backplane_slave_enabled
  9147  0CD5  0AD6               	incf	_backplane_slave_enabled,f
  9148  0CD6  0008               	return
  9149  0CD7                     __end_of_PROTOCOL_Backplane_Slave_Enabled:	
  9150                           
  9151                           	psect	text59
  9152  0E37                     __ptext59:	
  9153 ;; *************** function _EUSART_Transmit_ISR *****************
  9154 ;; Defined at:
  9155 ;;		line 165 in file "mcc_generated_files/eusart.c"
  9156 ;; Parameters:    Size  Location     Type
  9157 ;;		None
  9158 ;; Auto vars:     Size  Location     Type
  9159 ;;		None
  9160 ;; Return value:  Size  Location     Type
  9161 ;;                  1    wreg      void 
  9162 ;; Registers used:
  9163 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9164 ;; Tracked objects:
  9165 ;;		On entry : 0/0
  9166 ;;		On exit  : 0/0
  9167 ;;		Unchanged: 0/0
  9168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9170 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9171 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9172 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9173 ;;Total ram usage:        1 bytes
  9174 ;; Hardware stack levels used:    1
  9175 ;; This function calls:
  9176 ;;		Nothing
  9177 ;; This function is called by:
  9178 ;;		_INTERRUPT_InterruptManager
  9179 ;; This function uses a non-reentrant model
  9180 ;;
  9181                           
  9182                           
  9183                           ;psect for function _EUSART_Transmit_ISR
  9184  0E37                     _EUSART_Transmit_ISR:	
  9185                           
  9186                           ;eusart.c: 169: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
  9187                           
  9188                           ;incstack = 0
  9189                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  9190  0E37  3008               	movlw	8
  9191  0E38  0020               	movlb	0	; select bank0
  9192  0E39  0264               	subwf	_eusartTxBufferRemaining,w	;volatile
  9193  0E3A  1803               	skipnc
  9194  0E3B  2E51               	goto	i1l236
  9195                           
  9196                           ;eusart.c: 170: {
  9197                           ;eusart.c: 171: TXREG = eusartTxBuffer[eusartTxTail++];
  9198  0E3C  0865               	movf	_eusartTxTail,w
  9199  0E3D  3EA8               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  9200  0E3E  0086               	movwf	6
  9201  0E3F  0187               	clrf	7
  9202  0E40  0801               	movf	1,w
  9203  0E41  0023               	movlb	3	; select bank3
  9204  0E42  009A               	movwf	26	;volatile
  9205  0E43  3001               	movlw	1
  9206  0E44  00F0               	movwf	??_EUSART_Transmit_ISR
  9207  0E45  0870               	movf	??_EUSART_Transmit_ISR,w
  9208  0E46  0020               	movlb	0	; select bank0
  9209  0E47  07E5               	addwf	_eusartTxTail,f	;volatile
  9210                           
  9211                           ;eusart.c: 172: if(sizeof(eusartTxBuffer) <= eusartTxTail)
  9212  0E48  3008               	movlw	8
  9213  0E49  0265               	subwf	_eusartTxTail,w	;volatile
  9214  0E4A  1803               	btfsc	3,0
  9215                           
  9216                           ;eusart.c: 173: {
  9217                           ;eusart.c: 174: eusartTxTail = 0;
  9218  0E4B  01E5               	clrf	_eusartTxTail	;volatile
  9219                           
  9220                           ;eusart.c: 175: }
  9221                           ;eusart.c: 176: eusartTxBufferRemaining++;
  9222  0E4C  3001               	movlw	1
  9223  0E4D  00F0               	movwf	??_EUSART_Transmit_ISR
  9224  0E4E  0870               	movf	??_EUSART_Transmit_ISR,w
  9225  0E4F  07E4               	addwf	_eusartTxBufferRemaining,f	;volatile
  9226                           
  9227                           ;eusart.c: 177: }
  9228  0E50  0008               	return
  9229  0E51                     i1l236:	
  9230                           
  9231                           ;eusart.c: 178: else
  9232                           ;eusart.c: 179: {
  9233                           ;eusart.c: 180: PIE1bits.TXIE = 0;
  9234  0E51  0021               	movlb	1	; select bank1
  9235  0E52  1211               	bcf	17,4	;volatile
  9236  0E53  0008               	return
  9237  0E54                     __end_of_EUSART_Transmit_ISR:	
  9238                           
  9239                           	psect	text60
  9240  0E00                     __ptext60:	
  9241 ;; *************** function _EUSART_Receive_ISR *****************
  9242 ;; Defined at:
  9243 ;;		line 184 in file "mcc_generated_files/eusart.c"
  9244 ;; Parameters:    Size  Location     Type
  9245 ;;		None
  9246 ;; Auto vars:     Size  Location     Type
  9247 ;;		None
  9248 ;; Return value:  Size  Location     Type
  9249 ;;                  1    wreg      void 
  9250 ;; Registers used:
  9251 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9252 ;; Tracked objects:
  9253 ;;		On entry : 0/0
  9254 ;;		On exit  : 0/0
  9255 ;;		Unchanged: 0/0
  9256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9259 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9260 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9261 ;;Total ram usage:        1 bytes
  9262 ;; Hardware stack levels used:    1
  9263 ;; This function calls:
  9264 ;;		Nothing
  9265 ;; This function is called by:
  9266 ;;		_INTERRUPT_InterruptManager
  9267 ;; This function uses a non-reentrant model
  9268 ;;
  9269                           
  9270                           
  9271                           ;psect for function _EUSART_Receive_ISR
  9272  0E00                     _EUSART_Receive_ISR:	
  9273                           
  9274                           ;eusart.c: 187: if(1 == RCSTAbits.OERR)
  9275                           
  9276                           ;incstack = 0
  9277                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  9278  0E00  0023               	movlb	3	; select bank3
  9279  0E01  1C9D               	btfss	29,1	;volatile
  9280  0E02  2E05               	goto	i1l3289
  9281                           
  9282                           ;eusart.c: 188: {
  9283                           ;eusart.c: 191: RCSTAbits.CREN = 0;
  9284  0E03  121D               	bcf	29,4	;volatile
  9285                           
  9286                           ;eusart.c: 192: RCSTAbits.CREN = 1;
  9287  0E04  161D               	bsf	29,4	;volatile
  9288  0E05                     i1l3289:	
  9289                           
  9290                           ;eusart.c: 193: }
  9291                           ;eusart.c: 196: eusartRxBuffer[eusartRxHead++] = RCREG;
  9292  0E05  0819               	movf	25,w	;volatile
  9293  0E06  00F0               	movwf	??_EUSART_Receive_ISR
  9294  0E07  0020               	movlb	0	; select bank0
  9295  0E08  0863               	movf	_eusartRxHead,w
  9296  0E09  3EA0               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  9297  0E0A  0086               	movwf	6
  9298  0E0B  0187               	clrf	7
  9299  0E0C  0870               	movf	??_EUSART_Receive_ISR,w
  9300  0E0D  0081               	movwf	1
  9301  0E0E  3001               	movlw	1
  9302  0E0F  00F0               	movwf	??_EUSART_Receive_ISR
  9303  0E10  0870               	movf	??_EUSART_Receive_ISR,w
  9304  0E11  07E3               	addwf	_eusartRxHead,f	;volatile
  9305                           
  9306                           ;eusart.c: 197: if(sizeof(eusartRxBuffer) <= eusartRxHead)
  9307  0E12  3008               	movlw	8
  9308  0E13  0263               	subwf	_eusartRxHead,w	;volatile
  9309  0E14  1803               	btfsc	3,0
  9310                           
  9311                           ;eusart.c: 198: {
  9312                           ;eusart.c: 199: eusartRxHead = 0;
  9313  0E15  01E3               	clrf	_eusartRxHead	;volatile
  9314                           
  9315                           ;eusart.c: 200: }
  9316                           ;eusart.c: 201: eusartRxCount++;
  9317  0E16  3001               	movlw	1
  9318  0E17  00F0               	movwf	??_EUSART_Receive_ISR
  9319  0E18  0870               	movf	??_EUSART_Receive_ISR,w
  9320  0E19  07E1               	addwf	_eusartRxCount,f	;volatile
  9321  0E1A  0008               	return
  9322  0E1B                     __end_of_EUSART_Receive_ISR:	
  9323  007E                     btemp	set	126	;btemp
  9324  007E                     int$flags	set	126
  9325  007E                     wtemp0	set	126


Data Sizes:
    Strings     192
    Constant    16
    Data        6
    BSS         204
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     49      79
    BANK1            80      2      68
    BANK2            80      0      64
    BANK3            80      0      48
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    PROTOCOL_Extension_Handler$0	PTR unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), I2C1_StatusCallback@ext_buf(BANK3[48]), 

    data	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    strncmp@s2	PTR const unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_15(CODE[4]), STR_14(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), 
		 -> STR_8(CODE[4]), STR_7(CODE[4]), STR_6(CODE[4]), STR_4(CODE[4]), 

    atoi@s	PTR const unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), 

    PROTOCOL_I2C_SEN@pdata	PTR unsigned char  size(2) Largest target is 16
		 -> type_no_data(BANK0[1]), PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK2[16]), readbuf.length(BANK1[1]), 
		 -> readbuf.type(BANK1[1]), readbuf(BANK1[6]), position(BANK1[6]), 

    PROTOCOL_I2C_Send_uint8_t@pbuffer	PTR unsigned char  size(1) Largest target is 6
		 -> PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), position(BANK1[6]), 

    PROTOCOL_I2C_Set_TLV@pbuffer	PTR unsigned char  size(2) Largest target is 16
		 -> PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK2[16]), position(BANK1[6]), 

    PROTOCOL_EXT@char_buf	PTR unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), I2C1_StatusCallback@ext_buf(BANK3[48]), 

    PROTOCOL_Tick_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    PROTOCOL_Extension_Handler	PTR FTN(PTR unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    PROTOCOL_Set_Func@loop_func	PTR void  size(2) Largest target is 1
		 -> loop_func(), 

    PROTOCOL_Loop_Func	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), loop_func(), 

    PROTOCOL_Initialize@inv_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Inv_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@set_handler	PTR void  size(2) Largest target is 1
		 -> set_handler(), 

    PROTOCOL_Set_Handler	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), set_handler(), 

    PROTOCOL_Initialize@stop_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Stop_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@start_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Start_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@device_id	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_1(CODE[17]), 

    device_id_	PTR const unsigned char  size(2) Largest target is 8192
		 -> ROM(CODE[8192]), STR_1(CODE[17]), 

    S864$pbuffer	PTR unsigned char  size(2) Largest target is 16
		 -> PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK2[16]), position(BANK1[6]), 

    readbuf.pbuffer	PTR unsigned char  size(2) Largest target is 16
		 -> PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK2[16]), position(BANK1[6]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 8192
		 -> STR_10(CODE[4]), buf(BANK2[48]), STR_2(CODE[7]), ROM(CODE[8192]), 
		 -> printf@c(BANK0[1]), STR_1(CODE[17]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_48(CODE[10]), STR_47(CODE[9]), STR_46(CODE[10]), STR_45(CODE[9]), 
		 -> STR_44(CODE[4]), STR_43(CODE[4]), STR_42(CODE[4]), STR_41(CODE[4]), 
		 -> STR_40(CODE[4]), STR_39(CODE[4]), STR_38(CODE[4]), STR_37(CODE[4]), 
		 -> STR_36(CODE[14]), STR_35(CODE[9]), STR_34(CODE[10]), STR_33(CODE[9]), 
		 -> STR_32(CODE[10]), STR_31(CODE[9]), STR_30(CODE[7]), STR_29(CODE[4]), 
		 -> STR_28(CODE[4]), STR_27(CODE[9]), STR_26(CODE[4]), STR_25(CODE[4]), 
		 -> STR_24(CODE[10]), STR_23(CODE[4]), STR_22(CODE[4]), STR_21(CODE[8]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[9]), STR_17(CODE[6]), 
		 -> STR_16(CODE[10]), STR_13(CODE[10]), STR_9(CODE[10]), STR_5(CODE[10]), 
		 -> STR_3(CODE[5]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    sp__PROTOCOL_I2C_SEN	PTR unsigned char  size(2) Largest target is 16
		 -> type_no_data(BANK0[1]), PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK2[16]), readbuf.length(BANK1[1]), 
		 -> readbuf.type(BANK1[1]), readbuf(BANK1[6]), position(BANK1[6]), 

    I2C1_StatusCallback@pdata	PTR unsigned char  size(2) Largest target is 16
		 -> type_no_data(BANK0[1]), PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK2[16]), readbuf.length(BANK1[1]), 
		 -> readbuf.type(BANK1[1]), readbuf(BANK1[6]), position(BANK1[6]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_I2C1_ISR
    _I2C1_ISR->_I2C1_StatusCallback
    _I2C1_StatusCallback->i1_PROTOCOL_SET
    i1_PROTOCOL_SET->i1_set_handler
    i1_PROTOCOL_SAV->i1_DATAEE_WriteByte

Critical Paths under _main in BANK0

    _main->_PROTOCOL_Loop
    _PROTOCOL_Loop->_loop_func
    _loop_func->_PROTOCOL_I2C_Send_uint8_t
    _PROTOCOL_I2C_Send_uint8_t->_printf
    _printf->___lwmod
    _putch->_EUSART_Write
    ___lwmod->___lwdiv
    _atoi->___wmul
    _PROTOCOL_Write_Device_Address->_DATAEE_WriteByte
    _PROTOCOL_SET->_set_handler
    _PROTOCOL_SAV->_DATAEE_WriteByte
    _PROTOCOL_Initialize->_set_handler

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_PROTOCOL_Loop

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   19404
                     _ADC_Initialize
                  _EUSART_Initialize
                    _I2C1_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                _PROTOCOL_Initialize
                      _PROTOCOL_Loop
                  _PROTOCOL_Set_Func
                    _TMR0_Initialize
                     _WDT_Initialize
                               _init
 ---------------------------------------------------------------------------------
 (1) _init                                                 2     2      0     112
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_Initialize                                      1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Set_Func                                    2     0      2      86
                                              1 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Loop                                        4     4      0   17597
                                             47 BANK0      2     2      0
                                              0 BANK1      2     2      0
                   Absolute function *
                        _EUSART_Read
                       _PROTOCOL_EXT
       _PROTOCOL_Read_Device_Address
                       _PROTOCOL_SAV
                       _PROTOCOL_SET
                       _PROTOCOL_STA
                       _PROTOCOL_STP
      _PROTOCOL_Write_Device_Address
            _TMR0_HasOverflowOccured
                               _atoi
                          _loop_func *
                             _printf
                            _strncmp
 ---------------------------------------------------------------------------------
 (2) _strncmp                                              7     2      5    2040
                                              1 BANK0      7     2      5
 ---------------------------------------------------------------------------------
 (2) _loop_func                                            7     7      0    7637
                                             40 BANK0      7     7      0
            _ADC_GetConversionResult
               _ADC_IsConversionDone
                  _ADC_SelectChannel
                _ADC_StartConversion
          _PROTOCOL_I2C_Send_uint8_t
                                _abs
                          _led_blink
 ---------------------------------------------------------------------------------
 (3) _led_blink                                            1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _abs                                                  4     2      2     626
                                              1 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _PROTOCOL_I2C_Send_uint8_t                            5     4      1    6370
                                             35 BANK0      5     4      1
               _PROTOCOL_I2C_Set_TLV
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              24    20      4    5341
                                             15 BANK0     20    16      4
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      93
                                              3 BANK0      1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (4) _EUSART_Write                                         2     2      0      62
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     386
                                              9 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     395
                                              1 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (4) _PROTOCOL_I2C_Set_TLV                                 6     3      3     737
                                              1 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (3) _ADC_StartConversion                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_SelectChannel                                    2     2      0      31
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _ADC_IsConversionDone                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_GetConversionResult                              2     0      2       0
                                              1 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 8     6      2    1081
                                              7 BANK0      8     6      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      99
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     582
                                              1 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _TMR0_HasOverflowOccured                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_Write_Device_Address                        2     2      0     315
                                              4 BANK0      2     2      0
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_STP                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_STA                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_SET                                         2     2      0     469
                                              5 BANK0      2     2      0
                   Absolute function *
                        _set_handler *
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_SAV                                         1     1      0     253
                                              4 BANK0      1     1      0
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (3) _DATAEE_WriteByte                                     3     2      1     253
                                              1 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_EXT                                         1     1      0      99
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Read                                          2     2      0      37
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Initialize                                 10     2      8    1609
                                              5 BANK0     10     2      8
                   Absolute function *
                    _DATAEE_ReadByte
                        _set_handler *
 ---------------------------------------------------------------------------------
 (3) _set_handler                                          4     3      1     399
                                              1 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _DATAEE_ReadByte                                      1     1      0      22
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (11) Absolute function(Fake)                              1     0      1       0
 ---------------------------------------------------------------------------------
 (1) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2C1_Initialize                                      2     2      0       0
                                              1 BANK0      2     2      0
       _PROTOCOL_Read_Device_Address
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_Read_Device_Address                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Initialize                                    1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                           1     1      0     743
                                              0 BANK0      1     1      0
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
                           _I2C1_ISR
 ---------------------------------------------------------------------------------
 (8) _I2C1_ISR                                             2     2      0     743
                                             10 COMMON     2     2      0
                _I2C1_StatusCallback
 ---------------------------------------------------------------------------------
 (9) _I2C1_StatusCallback                                  4     4      0     573
                                              6 COMMON     4     4      0
   _PROTOCOL_Backplane_Slave_Enabled
                   _PROTOCOL_I2C_GET
                   _PROTOCOL_I2C_SEN
                   _PROTOCOL_I2C_WHO
                       _PROTOCOL_INV
                       _PROTOCOL_RST
                 _PROTOCOL_Read_Lock
                     i1_PROTOCOL_EXT
                     i1_PROTOCOL_SAV
                     i1_PROTOCOL_SET
                     i1_PROTOCOL_STA
                     i1_PROTOCOL_STP
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_STP                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_STA                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_SET                                      2     2      0     298
                                              4 COMMON     2     2      0
                   Absolute function *
                      i1_set_handler *
 ---------------------------------------------------------------------------------
 (11) i1_set_handler                                       4     3      1     228
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (11) Absolute function(Fake)                              1     0      1       0
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_SAV                                      1     1      0      94
                                              3 COMMON     1     1      0
                 i1_DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (11) i1_DATAEE_WriteByte                                  3     2      1      94
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_EXT                                      1     1      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_Read_Lock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_RST                                        1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_INV                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_I2C_WHO                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_I2C_SEN                                    4     4      0      26
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_I2C_GET                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_Backplane_Slave_Enabled                    0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _EUSART_Receive_ISR                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Initialize
   _EUSART_Initialize
   _I2C1_Initialize
     _PROTOCOL_Read_Device_Address
   _OSCILLATOR_Initialize
   _PIN_MANAGER_Initialize
   _PROTOCOL_Initialize
     Absolute function(Fake) *
     _DATAEE_ReadByte *
     _set_handler *
   _PROTOCOL_Loop
     Absolute function(Fake) *
     _EUSART_Read *
     _PROTOCOL_EXT *
     _PROTOCOL_Read_Device_Address *
     _PROTOCOL_SAV *
       _DATAEE_WriteByte
     _PROTOCOL_SET *
       Absolute function(Fake) *
       _set_handler *
     _PROTOCOL_STA *
     _PROTOCOL_STP *
     _PROTOCOL_Write_Device_Address *
       _DATAEE_WriteByte
     _TMR0_HasOverflowOccured *
     _atoi *
       ___wmul
       _isdigit
     _loop_func *
       _ADC_GetConversionResult
       _ADC_IsConversionDone
       _ADC_SelectChannel
       _ADC_StartConversion
       _PROTOCOL_I2C_Send_uint8_t
         _PROTOCOL_I2C_Set_TLV
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
           _putch
             _EUSART_Write
       _abs
       _led_blink
     _printf *
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
     _strncmp *
   _PROTOCOL_Set_Func
   _TMR0_Initialize
   _WDT_Initialize
   _init

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR
   _I2C1_ISR
     _I2C1_StatusCallback
       _PROTOCOL_Backplane_Slave_Enabled
       _PROTOCOL_I2C_GET
       _PROTOCOL_I2C_SEN
       _PROTOCOL_I2C_WHO
       _PROTOCOL_INV
       _PROTOCOL_RST
       _PROTOCOL_Read_Lock
       i1_PROTOCOL_EXT
       i1_PROTOCOL_SAV
         i1_DATAEE_WriteByte
       i1_PROTOCOL_SET
         Absolute function(Fake) *
         i1_set_handler *
       i1_PROTOCOL_STA
       i1_PROTOCOL_STP

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     31      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      2      44       7       85.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      40       9       80.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      30      11       60.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     111      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     111      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Sat Sep 30 06:56:09 2017

                                         _i 0055                                           _j 00CB  
                                         pc 0002                      __end_ofi1_PROTOCOL_EXT 0CBE  
                    __end_ofi1_PROTOCOL_SAV 0D19                      __end_ofi1_PROTOCOL_SET 0DB8  
                    __end_ofi1_PROTOCOL_STA 0CDF                      __end_ofi1_PROTOCOL_STP 0CCA  
           __end_of_TMR0_HasOverflowOccured 0CE7                                 __CFG_CP$OFF 0000  
                       ___wmul@multiplicand 0023                             _timer0ReloadVal 0060  
                               __CFG_LVP$ON 0000                                         l224 0EFF  
                                       l321 07F6                                         l520 013B  
                                       l504 015B                                         l527 01B1  
                                       l463 05AF                                         l544 023C  
                                       l492 008E                                         l468 05D8  
                                       l673 023D                                         l944 0E24  
                              __CFG_CPD$OFF 0000                loop_func@transition_detected 004B  
                                       _abs 0D85                                         _buf 0120  
                                       _cnt 005E                                __CFG_BORV$LO 0000  
                                       wreg 0009                                __CFG_IESO$ON 0000  
                              ?_EUSART_Read 0070                            __end_of_I2C1_ISR 0F3D  
                                      ?_abs 0021                                        l4013 0605  
                                      l4007 05F1                                        l4017 0610  
                                      l4009 05FD                                        l4033 079A  
                                      l4045 061F                                        l4029 0782  
                                      l4037 0764                                        l4063 0644  
                                      l4047 0617                                        l4039 07A3  
                              _tmr_overflow 0057                                        l4073 0681  
                                      l4065 0648                                        l4057 063C  
                                      l4049 0624                                        l4067 0671  
                                      l3523 0F13                                        l5123 02F5  
                                      l5115 02B7                                        l3541 0E1E  
                                      l3509 0EF4                                        l3701 01D0  
                                      l3613 0093                                        l5141 0376  
                                      l5133 0333                                        l5055 06BC  
                                      l3535 0D83                                        l3615 009C  
                                      l3607 0089                                        l5127 030E  
                                      l5119 02DC                                        l3713 01E9  
                                      l3641 00FC                                        l5153 03C9  
                                      l5137 0352                                        l3571 0FF2  
                                      l3563 0FD4                                        l3715 01ED  
                                      l3723 0202                                        l3707 01DA  
                                      l3651 011A                                        l3635 00EC  
                                      l3627 00D8                                        l3619 00A9  
                                      l3731 006D                                        l5147 039A  
                                      l5091 0270                                        l5083 0264  
                                      l3565 0FE0                                        l3645 0109  
                                      l3821 06EF                                        l3813 06EB  
                                      l5085 0265                                        l3575 0FFB  
                                      l3719 01FA                                        l3655 0127  
                                      l3639 00EE                                        l3663 013D  
                                      l3823 070D                                        l5095 027A  
                                      l3593 0F5C                                        l3729 0207  
                                      l3657 0132                                        l3649 010B  
                                      l3587 0F44                                        l3691 01A5  
                                      l3675 0175                                        l3589 0F50  
                                      l3597 0F65                                        l3685 0186  
                                      l3783 0F9C                                        l3679 0180  
                                      l3937 0E92                                        l3795 0FB3  
                                      l3699 01CD                                        l3797 0FC2  
                                      l3981 059A                                        l3975 057D  
                                      l3967 056B                                        l3993 05C3  
                                      l3985 05AA                                        l3997 05D3  
                                      STR_1 03DE                                        STR_2 045C  
                                      STR_3 0469                                        STR_4 048A  
                                      STR_5 041B                                        STR_6 049A  
                                      STR_7 0482                                        STR_8 048E  
                                      STR_9 0425                                        _LATA 010C  
                                      _LATB 010D                                        _LATC 010E  
                                      u2725 0FD7                                        u2815 0F56  
                                      u2745 0FE1                                        u2825 0F5D  
                                      u2755 0FEB                                        u2685 0E25  
                                      u2765 0FF3                                        u2695 0E2A  
                                      u2795 0F47                                        u2955 019B  
                                      u2895 0102                                        i1l64 0F2A  
                                      u2995 01C0                                        i1l86 04A0  
                                      u4937 0611                                        u4947 0D51  
                                      u4957 0EB5                                        _TMR0 0015  
                                      _WPUA 020C                                        _WPUB 020D  
                                      _WPUC 020E                                __CFG_WRT$OFF 0000  
                             __CFG_FCMEN$ON 0000                                        abs@a 0021  
                                      _data 00CA                                        _atoi 0615  
                                      _main 07A6                                        _init 0DE6  
                                      fsr0h 0005                                        fsr1h 0007  
                                      indf0 0000                                        fsr0l 0004  
                                      indf1 0001                                        fsr1l 0006  
                                      btemp 007E                               __CFG_BOREN$ON 0000  
                                      start 0030                               __CFG_MCLRE$ON 0000  
                       _I2C1_StatusCallback 049E                                       ??_abs 0023  
                           ?i1_PROTOCOL_EXT 0070                             ?i1_PROTOCOL_SAV 0070  
                           ?i1_PROTOCOL_SET 0070                   __size_of_DATAEE_WriteByte 0023  
                           ?i1_PROTOCOL_STA 0070                             ?i1_PROTOCOL_STP 0070  
                   __end_of_TMR0_Initialize 0D67                               __CFG_PLLEN$ON 0000  
                             ?_EUSART_Write 0070              __size_of_OSCILLATOR_Initialize 0005  
             __end_of_OSCILLATOR_Initialize 0CF0                                       ?_atoi 0027  
                                     ?_main 0070                                       ?_init 0070  
                                     STR_10 0486                                       STR_11 0496  
                                     STR_12 0492                                       STR_20 046E  
                                     STR_13 0407                                       STR_14 047E  
                                     STR_22 0472                                       STR_30 0455  
                                     STR_15 047A                                       STR_24 0439  
                                     STR_32 042F                                       STR_16 03FD  
                                     STR_17 0463                               __CFG_WDTE$OFF 0000  
                                     STR_18 044C                                       STR_34 0411  
                                     STR_19 0476                                       STR_35 0443  
                                     STR_36 03EF                                       STR_37 0472  
                                     STR_38 0403                             __end_of___lwdiv 1000  
                                     i1l103 04C3                                       i1l124 0563  
                                     i1l321 0E68                                       i1l170 0021  
                                     i1l236 0E51                                       i1l174 002B  
                                     i1l168 0015                             __end_of___lwmod 0F6A  
                         _PROTOCOL_Set_Func 0D2B                  PROTOCOL_I2C_Set_TLV@length 0021  
                                     _RCREG 0199                                       _RCSTA 019D  
                                     _TRISA 008C                                       _TRISB 008D  
                                     _TRISC 008E                                       _TXREG 019A  
                                     _TXSTA 019E            __size_of_ADC_GetConversionResult 0009  
              __size_of_PROTOCOL_Initialize 0054                  PROTOCOL_I2C_Set_TLV@status 0026  
                        ?_PROTOCOL_Set_Func 0021                           ??_I2C1_Initialize 0021  
                      ?_I2C1_StatusCallback 0070                             _DATAEE_ReadByte 0D3E  
           ??_PROTOCOL_Write_Device_Address 0024                             __end_of_dpowers 03D8  
                            _WDT_Initialize 0CE7                                       _count 00B0  
            PROTOCOL_Initialize@inv_handler 002B                             __end_of_isdigit 0D85  
                                     _value 005D                                       atoi@a 002C  
                                     atoi@s 002E                                       _putch 0CF5  
                                     init@i 0022                                       pclath 000A  
                       ??_PROTOCOL_Set_Func 0023                           __end_of_ANALOG_IN 03DE  
                    ??_PROTOCOL_I2C_Set_TLV 0024                                       status 0003  
                                     wtemp0 007E                             __end_of_strncmp 07A6  
                     _set_handler$intlevel0 0F9C                             __initialization 0032  
                              __end_of_atoi 0686                                __end_of_main 07DD  
                              __end_of_init 0E00                              ??_EUSART_Write 0021  
               ?_INTERRUPT_InterruptManager 0070                   __end_of_PROTOCOL_Set_Func 0D34  
          PROTOCOL_Initialize@start_handler 0027                 ??_PROTOCOL_I2C_Send_uint8_t 0044  
                                    ??_atoi 0029                                      ??_main 0051  
                                    ??_init 0021                          _PROTOCOL_Read_Lock 0CC4  
                    __end_of_WDT_Initialize 0CEB                       ??_I2C1_StatusCallback 0076  
                __end_ofi1_DATAEE_WriteByte 0E71               __size_of_ADC_IsConversionDone 0007  
                                    _ADCON0 009D                                      _ADCON1 009E  
                                    i1S5231 0800                                      _ADRESH 009C  
                                    _EEADRH 0192                                      _ADRESL 009B  
                                    _EEADRL 0191                                      _EEDATH 0194  
                                    _EEDATL 0193                                      _EECON2 0196  
                                    _ANSELA 018C                                      ?_putch 0070  
                                    _ANSELB 018D                                      _ANSELC 018E  
                       ?_PROTOCOL_Read_Lock 0070                          _PROTOCOL_Loop_Func 00C6  
                                    i1l5001 054D                                      i1l5005 0559  
                                    i1l5031 0F28                                      i1l2801 0741  
                                    i1l2811 0750                                      i1l2813 075F  
                                    i1l5037 0F31                                      i1l2807 074B  
                                    i1l5039 0F33                                      i1l3289 0E05  
                                    i1l2761 0F80                                      i1l2763 0F8F  
                                    i1l2749 0F6A                                      i1l2793 072A  
                                    i1l2797 0730                                      i1l2789 0722  
                                    i1l4931 04A4                                      i1l4941 04B7  
                                    i1l4933 04AA                                      i1l4943 04BB  
                                    i1l4951 04C8                                      i1l4945 04BF  
                                    i1l4937 04AF                                      i1l4963 04F3  
                                    i1l4947 04C6                                      i1l4939 04B3  
                                    i1l4955 04E0                                      i1l4957 04E9  
                                    i1l4991 0535                                      i1l4983 051C  
                                    i1l4993 053A                                      i1l4969 04FE  
                                    i1l4979 0519                                      i1l4987 0526  
                                    i1l4997 0548                                      i1l4989 0532  
                                    _OSCCON 0099            __size_of_TMR0_HasOverflowOccured 0004  
                                    _TMR0IF 005A                                      _SPBRGH 019C  
                                    _SPBRGL 019B                                      _WDTCON 0097  
            PROTOCOL_Initialize@set_handler 0029                                ?_set_handler 0021  
                            __CFG_PWRTE$OFF 0000                   PROTOCOL_Initialize@scaler 002C  
                                    ___wmul 0E1B                              __CFG_STVREN$ON 0000  
                                 ??___lwdiv 0025                        ??_PROTOCOL_Read_Lock 0070  
                                 ??___lwmod 002D                                _type_no_data 006E  
                       _EUSART_Transmit_ISR 0E37                            ?_TMR0_Initialize 0070  
                                    _locked 005C                                   ?_I2C1_ISR 0070  
                                    _printf 0068                     __end_of_DATAEE_ReadByte 0D4B  
                              __pdataCOMMON 007D                                   ??_isdigit 0021  
                  __end_of_PROTOCOL_I2C_GET 0CC1                    __end_of_PROTOCOL_I2C_SEN 0764  
                  __end_of_PROTOCOL_I2C_WHO 0CC4                             ?_WDT_Initialize 0070  
             i1DATAEE_WriteByte@GIEBitValue 0072            PROTOCOL_I2C_Send_uint8_t@pbuffer 0043  
                                 ??_strncmp 0026                   PROTOCOL_Send_uint8_t@pbuf 00E1  
                      ?_EUSART_Transmit_ISR 0070                        __size_of_EUSART_Read 001F  
                 _PROTOCOL_I2C_Send_uint8_t 06DA                     __end_of__initialization 0064  
              __size_of_ADC_StartConversion 0003                              __pcstackCOMMON 0070  
                              __pidataBANK0 0CF0                            _DATAEE_WriteByte 07DD  
                             __end_of_putch 0CFB                                  ??_I2C1_ISR 007A  
                __size_of_PROTOCOL_Set_Func 0009                       __end_of_PROTOCOL_Loop 03CE  
                   _ADC_GetConversionResult 0D22                              _OPTION_REGbits 0095  
                        __size_of_led_blink 000E                     PROTOCOL_Send_float@pbuf 00D9  
                     ??_EUSART_Transmit_ISR 0070                                     ??_putch 0023  
                                __pbssBANK0 0051                                  __pbssBANK1 00A0  
                                __pbssBANK2 0120                                  __pbssBANK3 01A0  
                    i1DATAEE_WriteByte@bAdd 0071                        __end_of_EUSART_Write 0F16  
               __size_of_EUSART_Receive_ISR 001B                            ??i1_PROTOCOL_EXT 0070  
                          ??i1_PROTOCOL_SAV 0073                            ??i1_PROTOCOL_SET 0074  
                          ??i1_PROTOCOL_STA 0070                            ??i1_PROTOCOL_STP 0070  
                       _PROTOCOL_Initialize 0686                                  __pmaintext 07A6  
                         i1set_handler@mask 0072                                     ?___wmul 0021  
                                __pintentry 0004                             _I2C1_Initialize 0EAF  
                        __size_of_loop_func 00B1                                     _BAUDCON 019F  
                                _device_id_ 00BE                                     _APFCON0 011D  
                                   _APFCON1 011E                                     ?_printf 002F  
                   __size_of_ADC_Initialize 0008                  I2C1_StatusCallback@ext_buf 01A0  
                I2C1_StatusCallback@ext_cnt 0066                  I2C1_StatusCallback@ext_len 0067  
                          ?_DATAEE_ReadByte 0070                               _eusartRxCount 0061  
         I2C1_StatusCallback@slaveWriteType 0069                  PROTOCOL_Send_uint16_t@pbuf 00DE  
                      ?_PROTOCOL_Initialize 0025                      __size_ofi1_set_handler 002E  
                                   _OSCTUNE 0098                                     _SSP1ADD 0212  
                                   _SSP1BUF 0211                                     _SSP1MSK 0213  
                    _PROTOCOL_Start_Handler 00C8                     _TMR0_HasOverflowOccured 0CE3  
                      DATAEE_WriteByte@bAdd 0022                                  _continuity 006B  
                                 _ANALOG_IN 03D8                        __size_of_set_handler 0033  
                         __end_of_led_blink 0D59                               ?_PROTOCOL_INV 0070  
                             ?_PROTOCOL_EXT 0070                               ?_PROTOCOL_SAV 0070  
                             ?_PROTOCOL_SET 0070                               ?_PROTOCOL_STA 0070  
                             ?_PROTOCOL_RST 0070                               ?_PROTOCOL_STP 0070  
                           __size_of___wmul 001C                                     ___lwdiv 0FCB  
                                   ___lwmod 0F3D                   ??_ADC_GetConversionResult 0023  
                                   __ptext1 0DE6                                     __ptext2 0CE7  
                                   __ptext3 0D59                                     __ptext4 0D2B  
                                   __ptext5 023D                                     __ptext6 0764  
                                   __ptext7 0564                                     __ptext8 0D4B  
                                   __ptext9 0D85                             __size_of_printf 01D5  
                                   _dpowers 03CE                       _OSCILLATOR_Initialize 0CEB  
                              __size_of_abs 000F  PROTOCOL_Write_Device_Address@device_id_i2c 0025  
                     ??_PROTOCOL_Initialize 002D                                     _isdigit 0D76  
                                   _readbuf 00CD                                     _sec_cnt 0059  
                                   _invoked 005A                    ??_PIN_MANAGER_Initialize 0021  
                                   _sendbuf 0150                                     _tmr_cnt 0058  
                                   clrloop0 0CFC                                     _running 005B  
                                   _strncmp 0764                        end_of_initialization 0064  
                         __end_of_loop_func 0615                  _PROTOCOL_Extension_Handler 00C4  
             __size_of_PROTOCOL_I2C_Set_TLV 0022                          i1_DATAEE_WriteByte 0E54  
                         _EUSART_Initialize 0DCC                     __end_of_I2C1_Initialize 0ED0  
              __end_of_ADC_IsConversionDone 0D08                               i1_set_handler 0F6A  
                        ?_EUSART_Initialize 0070                       _PROTOCOL_Tick_Handler 00C0  
                                 _RCSTAbits 019D                                     printf@c 0042  
                                   printf@f 002F                              ??_PROTOCOL_INV 0070  
                            ??_PROTOCOL_EXT 0021                              ??_PROTOCOL_SAV 0024  
                            ??_PROTOCOL_SET 0025                              ??_PROTOCOL_STA 0021  
                            ??_PROTOCOL_RST 0070                              ??_PROTOCOL_STP 0021  
                       ?i1_DATAEE_WriteByte 0070                                __pstringtext 03CE  
                       ??_EUSART_Initialize 0021                 __end_of_I2C1_StatusCallback 0564  
                          ??_WDT_Initialize 0021                           __size_of_I2C1_ISR 0027  
                          __CFG_FOSC$INTOSC 0000                           ?_PROTOCOL_I2C_GET 0070  
                          set_handler@value 0021                           ?_PROTOCOL_I2C_SEN 0070  
                         ?_PROTOCOL_I2C_WHO 0070                       __size_of_EUSART_Write 0024  
                       _ADC_StartConversion 0CD0                   ??_TMR0_HasOverflowOccured 0021  
                        ??_PROTOCOL_I2C_GET 0070                          ??_PROTOCOL_I2C_SEN 0070  
                        ??_PROTOCOL_I2C_WHO 0070                        ??i1_DATAEE_WriteByte 0071  
                                _tmr_scaler 006A                    __end_of_DATAEE_WriteByte 0800  
                 __end_of_EUSART_Initialize 0DE6                                 printf@width 0040  
                      i1PROTOCOL_SET@value_ 0075                              ?i1_set_handler 0070  
                      ?_ADC_StartConversion 0070                    I2C1_StatusCallback@pdata 0078  
               __size_of_PROTOCOL_Read_Lock 0003                              __end_of___wmul 0E37  
                             __pidataCOMMON 0003                                _EUSART_Write 0EF2  
                            _ADC_Initialize 0D08                      ?_OSCILLATOR_Initialize 0070  
                            __end_of_printf 023D                              PROTOCOL_Loop@c 00E2  
                       start_initialization 0032                    __size_of_TMR0_Initialize 000E  
           __size_of_PIN_MANAGER_Initialize 001F                                 __end_of_abs 0D94  
                             ??_EUSART_Read 0021                                 putch@txData 0023  
                       DATAEE_ReadByte@bAdd 0021                            ?_I2C1_Initialize 0070  
                     ??_ADC_StartConversion 0021                            I2C1_ISR@i2c_data 007B  
                                  ??___wmul 0025                    PROTOCOL_Send_int8_t@pbuf 00E0  
      __end_of_PROTOCOL_Read_Device_Address 0CCD       __size_of_PROTOCOL_Read_Device_Address 0003  
              _PROTOCOL_Read_Device_Address 0CCA                      __end_of_ADC_Initialize 0D10  
                               __pdataBANK0 006A             PROTOCOL_I2C_Send_uint8_t@length 0047  
                                  ??_printf 0033                     i1DATAEE_WriteByte@bData 0070  
               __end_of_EUSART_Transmit_ISR 0E54                                 __pbssCOMMON 007C  
                                 ___latbits 0002                               __pcstackBANK0 0020  
                             __pcstackBANK1 00E2            I2C1_StatusCallback@i2c_bus_state 0077  
                      _ADC_IsConversionDone 0D01                        _PROTOCOL_Inv_Handler 00C2  
                              _isdigit$1271 0021                        __end_of_PROTOCOL_INV 0CDB  
                      __end_of_PROTOCOL_EXT 0003                        __end_of_PROTOCOL_SAV 0D22  
                      __end_of_PROTOCOL_SET 0DCC                        __end_of_PROTOCOL_STA 0CE3  
                      __end_of_PROTOCOL_RST 0D3E                        __end_of_PROTOCOL_STP 0CD0  
                __end_of_EUSART_Receive_ISR 0E1B             PROTOCOL_Initialize@stop_handler 0028  
                __size_of_EUSART_Initialize 001A                             ??i1_set_handler 0071  
                       __end_of_EUSART_Read 0EAF                      __size_of_PROTOCOL_Loop 0191  
     __end_of_PROTOCOL_Write_Device_Address 0D76      __size_of_PROTOCOL_Write_Device_Address 000F  
             _PROTOCOL_Write_Device_Address 0D67                                   _analog_in 00B6  
                          ___lwdiv@dividend 0023                      _PIN_MANAGER_Initialize 0E71  
                      EUSART_Read@readValue 0022                           _ADC_SelectChannel 0D94  
                                  ?___lwdiv 0021                                    ?___lwmod 0029  
                           ?_ADC_Initialize 0070                                _eusartRxHead 0063  
                        ?_ADC_SelectChannel 0070                                _eusartTxHead 007C  
                              _eusartRxTail 0062                          i1set_handler@value 0070  
                              _eusartTxTail 0065                                    _I2C1_ISR 0F16  
             ?_PROTOCOL_Read_Device_Address 0070                ??_INTERRUPT_InterruptManager 0020  
                 PROTOCOL_Send_int16_t@pbuf 00DC                                   _led_blink 0D4B  
                                 __pswtext1 0800                                  loop_func@i 004E  
                                loop_func@v 004C                     _eusartTxBufferRemaining 0064  
                                  ?_isdigit 0070                         ??_ADC_SelectChannel 0021  
                     ?_ADC_IsConversionDone 0070                            ___lwdiv@quotient 0027  
                  __size_of_DATAEE_ReadByte 000D                                    ?_strncmp 0021  
                            __size_of_putch 0006                              _eusartRxBuffer 00A0  
                         ??_TMR0_Initialize 0021                              _eusartTxBuffer 00A8  
                            ___wmul@product 0025                                    _LATCbits 010E  
                      _PROTOCOL_Set_Handler 0051                                   clear_ram0 0CFB  
                             ??_set_handler 0022                                    _PIE1bits 0091  
                                 _loop_func 0564                   __end_of_ADC_SelectChannel 0DA4  
                     PROTOCOL_I2C_SEN@pdata 0072                    PROTOCOL_I2C_Set_TLV@type 0025  
       __size_of_INTERRUPT_InterruptManager 002C                                    _PIR1bits 0011  
                                  _SSP1CON1 0215                                    _SSP1CON2 0216  
                                  _SSP1CON3 0217                PROTOCOL_Initialize@device_id 0025  
                                  _SSP1STAT 0214                              _readbuf_status 00CC  
                     _PROTOCOL_Stop_Handler 0053                 __end_of_PROTOCOL_Initialize 06DA  
                              loop_func@out 0049                                   _threshold 006C  
                           set_handler@mask 0023                                  ?_led_blink 0070  
                                _ADCON0bits 009D                     __size_ofi1_PROTOCOL_EXT 0001  
                   __size_ofi1_PROTOCOL_SAV 0009                     __size_ofi1_PROTOCOL_SET 0014  
                   __size_ofi1_PROTOCOL_STA 0004                     __size_ofi1_PROTOCOL_STP 0003  
                         ___wmul@multiplier 0021                __end_of_PROTOCOL_I2C_Set_TLV 0EF2  
                             _PROTOCOL_Loop 023D                    ADC_SelectChannel@channel 0022  
                                printf@flag 003F                                  printf@prec 0037  
                     DATAEE_WriteByte@bData 0021                     I2C1_StatusCallback@next 0068  
                               _EUSART_Read 0E90                 PROTOCOL_I2C_Set_TLV@pbuffer 0022  
                         ?_DATAEE_WriteByte 0021    __end_of_PROTOCOL_Backplane_Slave_Enabled 0CD7  
 __size_of_PROTOCOL_Backplane_Slave_Enabled 0004          ??_PROTOCOL_Backplane_Slave_Enabled 0070  
         ?_PROTOCOL_Backplane_Slave_Enabled 0070            _PROTOCOL_Backplane_Slave_Enabled 0CD3  
                        ??_DATAEE_WriteByte 0022                               _slave_address 005F  
                                _EECON1bits 0195                          PROTOCOL_SET@value_ 0026  
                                ?_loop_func 0070                   __size_of_PROTOCOL_I2C_GET 0003  
                 __size_of_PROTOCOL_I2C_SEN 0043                   __size_of_PROTOCOL_I2C_WHO 0003  
                  ?_ADC_GetConversionResult 0021                     ??_OSCILLATOR_Initialize 0021  
                PROTOCOL_Set_Func@loop_func 0021                         __end_of_set_handler 0FCB  
            ?_PROTOCOL_Write_Device_Address 0070                            __size_of___lwdiv 0035  
                          __size_of___lwmod 002D                              ?_PROTOCOL_Loop 0070  
                    ??_ADC_IsConversionDone 0021                       __size_of_PROTOCOL_INV 0004  
                     __size_of_PROTOCOL_EXT 0001                       __size_of_PROTOCOL_SAV 0009  
                     __size_of_PROTOCOL_SET 0014                       __size_of_PROTOCOL_STA 0004  
                     __size_of_PROTOCOL_RST 000A                       __size_of_PROTOCOL_STP 0003  
            ??_PROTOCOL_Read_Device_Address 0021                            __size_of_isdigit 000F  
                           ___lwdiv@divisor 0021                __size_of_I2C1_StatusCallback 00C6  
                           ___lwdiv@counter 0026                                    __ptext10 06DA  
                                  __ptext11 0068                                    __ptext20 0D22  
                                  __ptext12 0CF5                                    __ptext21 0615  
                                  __ptext13 0EF2                                    __ptext30 07DD  
                                  __ptext22 0D76                                    __ptext14 0F3D  
                                  __ptext31 0002                                    __ptext23 0E1B  
                                  __ptext15 0FCB                                    __ptext40 0DCC  
                                  __ptext32 0E90                                    __ptext24 0CE3  
                                  __ptext16 0ED0                                    __ptext41 0D08  
                                  __ptext33 0686                                    __ptext25 0D67  
                                  __ptext17 0CD0                                    __ptext50 0E54  
                                  __ptext34 0F98                                    __ptext26 0CCD  
                                  __ptext18 0D94                                    __ptext51 0CBD  
                                  __ptext43 0F16                                    __ptext35 0D3E  
                                  __ptext27 0CDF                                    __ptext19 0D01  
                                  __ptext60 0E00                                    __ptext52 0CC4  
                                  __ptext44 049E                                    __ptext36 0E71  
                                  __ptext28 0DB8                                    __ptext53 0D34  
                                  __ptext45 0CC7                                    __ptext37 0CEB  
                                  __ptext29 0D19                                    __ptext54 0CD7  
                                  __ptext46 0CDB                                    __ptext38 0EAF  
                                  __ptext55 0CC1                                    __ptext47 0DA4  
                                  __ptext39 0CCA                                    __ptext56 0721  
                                  __ptext48 0F6A                                    __ptext57 0CBE  
                                  __ptext49 0D10                                    __ptext58 0CD3  
                                  __ptext59 0E37                                _SSP1CON1bits 0215  
                              _SSP1CON2bits 0216                                    _float100 00BC  
               __size_ofi1_DATAEE_WriteByte 001D                                set_handler@i 0024  
               DATAEE_WriteByte@GIEBitValue 0023                            __size_of_strncmp 0042  
                             __size_of_atoi 0071                               __size_of_main 0037  
                             __size_of_init 001A                                  strncmp@len 0024  
                         ??_DATAEE_ReadByte 0021                  __size_of_ADC_SelectChannel 0010  
                   _BACKPLANE_SLAVE_ADDRESS 006D                  __end_of_PROTOCOL_Read_Lock 0CC7  
                                  int$flags 007E                                    _position 00D3  
                                  atoi@sign 002B                                _PROTOCOL_INV 0CD7  
                              _PROTOCOL_EXT 0002                                _PROTOCOL_SAV 0D19  
                              _PROTOCOL_SET 0DB8                                _PROTOCOL_STA 0CDF  
                              _PROTOCOL_RST 0D34                                _PROTOCOL_STP 0CCD  
        __end_of_INTERRUPT_InterruptManager 0030                  _INTERRUPT_InterruptManager 0004  
                                 printf@len 003D                                   printf@val 003B  
                              _SSP1STATbits 0214          __size_of_PROTOCOL_I2C_Send_uint8_t 0047  
                ?_PROTOCOL_I2C_Send_uint8_t 0043                                 ??_led_blink 0021  
                  ?_TMR0_HasOverflowOccured 0070                          _I2C_slaveWriteData 007D  
                                _INTCONbits 000B                                    isdigit@c 0022  
                   __size_of_WDT_Initialize 0004                                    intlevel1 0000  
               __end_of_ADC_StartConversion 0CD3                              i1set_handler@i 0073  
                          ___lwmod@dividend 002B                     ?_PIN_MANAGER_Initialize 0070  
           __end_of_ADC_GetConversionResult 0D2B                           __CFG_CLKOUTEN$OFF 0000  
                               ??_loop_func 0048                        _PROTOCOL_I2C_Set_TLV 0ED0  
                               _set_handler 0F98                                   strncmp@s1 0021  
                                 strncmp@s2 0023                            ??_ADC_Initialize 0021  
                   _backplane_slave_enabled 0056                                    printf@ap 003A  
                                  printf@cp 0038                          _EUSART_Receive_ISR 0E00  
                           ??_PROTOCOL_Loop 004F                    __size_of_I2C1_Initialize 0021  
                            i1_PROTOCOL_EXT 0CBD                              i1_PROTOCOL_SAV 0D10  
                            i1_PROTOCOL_SET 0DA4                              i1_PROTOCOL_STA 0CDB  
                            i1_PROTOCOL_STP 0CC7           __end_of_PROTOCOL_I2C_Send_uint8_t 0721  
                                _OPTION_REG 0095                         ?_EUSART_Receive_ISR 0070  
                           ___lwmod@divisor 0029                             _TMR0_Initialize 0D59  
                           ___lwmod@counter 002E                 PROTOCOL_Loop@device_address 00E3  
                      PROTOCOL_EXT@char_buf 0021                          EUSART_Write@txData 0022  
              __size_of_EUSART_Transmit_ISR 001D              __end_of_PIN_MANAGER_Initialize 0E90  
                      ??_EUSART_Receive_ISR 0070                       ?_PROTOCOL_I2C_Set_TLV 0021  
                          _PROTOCOL_I2C_GET 0CBE                       __end_ofi1_set_handler 0F98  
                          _PROTOCOL_I2C_SEN 0721                            _PROTOCOL_I2C_WHO 0CC1  
