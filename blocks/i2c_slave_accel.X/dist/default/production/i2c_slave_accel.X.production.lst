

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Thu Jul 13 07:39:55 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F1829
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	idataBANK1,global,class=CODE,delta=2
     7                           	psect	stringtext,global,class=STRCODE,delta=2
     8                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text4,local,class=CODE,merge=1,delta=2,group=4
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2,group=4
    29                           	psect	text8,local,class=CODE,merge=1,delta=2,group=4
    30                           	psect	text9,local,class=CODE,merge=1,delta=2,group=4
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2,group=4
    40                           	psect	text19,local,class=CODE,merge=1,delta=2,group=4
    41                           	psect	text20,local,class=CODE,merge=1,delta=2,group=4
    42                           	psect	text21,local,class=CODE,merge=1,delta=2,group=4
    43                           	psect	text22,local,class=CODE,merge=1,delta=2,group=4
    44                           	psect	text23,local,class=CODE,merge=1,delta=2,group=4
    45                           	psect	text24,local,class=CODE,merge=1,delta=2,group=4
    46                           	psect	text25,local,class=CODE,merge=1,delta=2,group=4
    47                           	psect	text26,local,class=CODE,merge=1,delta=2,group=4
    48                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    49                           	psect	text28,local,class=CODE,merge=1,delta=2,group=4
    50                           	psect	text29,local,class=CODE,merge=1,delta=2,group=4
    51                           	psect	text30,local,class=CODE,merge=1,delta=2,group=4
    52                           	psect	text31,local,class=CODE,merge=1,delta=2
    53                           	psect	text32,local,class=CODE,merge=1,delta=2,group=1
    54                           	psect	text33,local,class=CODE,merge=1,delta=2,group=1
    55                           	psect	text34,local,class=CODE,merge=1,delta=2,group=1
    56                           	psect	text35,local,class=CODE,merge=1,delta=2,group=1
    57                           	psect	text36,local,class=CODE,merge=1,delta=2,group=1
    58                           	psect	text37,local,class=CODE,merge=1,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2,group=1
    60                           	psect	text39,local,class=CODE,merge=1,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,delta=2,group=1
    62                           	psect	text41,local,class=CODE,merge=1,delta=2
    63                           	psect	text42,local,class=CODE,merge=1,delta=2
    64                           	psect	text43,local,class=CODE,merge=1,delta=2
    65                           	psect	text44,local,class=CODE,merge=1,delta=2
    66                           	psect	text45,local,class=CODE,merge=1,delta=2,group=1
    67                           	psect	text46,local,class=CODE,merge=1,delta=2
    68                           	psect	text47,local,class=CODE,merge=1,delta=2
    69                           	psect	intentry,global,class=CODE,delta=2
    70                           	psect	text49,local,class=CODE,merge=1,delta=2
    71                           	psect	text50,local,class=CODE,merge=1,delta=2
    72                           	psect	swtext1,local,class=CONST,delta=2
    73                           	psect	text51,local,class=CODE,merge=1,delta=2
    74                           	psect	text52,local,class=CODE,merge=1,delta=2
    75                           	psect	text53,local,class=CODE,merge=1,delta=2
    76                           	psect	text54,local,class=CODE,merge=1,delta=2
    77                           	psect	text55,local,class=CODE,merge=1,delta=2
    78                           	psect	text56,local,class=CODE,merge=1,delta=2
    79                           	psect	text57,local,class=CODE,merge=1,delta=2,group=1
    80                           	psect	text58,local,class=CODE,merge=1,delta=2,group=1
    81                           	psect	text59,local,class=CODE,merge=1,delta=2,group=1
    82                           	psect	text60,local,class=CODE,merge=1,delta=2,group=1
    83                           	psect	text61,local,class=CODE,merge=1,delta=2,group=1
    84                           	psect	text62,local,class=CODE,merge=1,delta=2,group=1
    85                           	psect	text63,local,class=CODE,merge=1,delta=2,group=1
    86                           	psect	text64,local,class=CODE,merge=1,delta=2
    87                           	psect	text65,local,class=CODE,merge=1,delta=2
    88                           	dabs	1,0x7E,2
    89  0000                     
    90                           ; Version 1.41 (B)
    91                           ; Generated 21/02/2017 GMT
    92                           ; 
    93                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    94                           ; All rights reserved.
    95                           ; 
    96                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    97                           ; 
    98                           ; Redistribution and use in source and binary forms, with or without modification, are
    99                           ; permitted provided that the following conditions are met:
   100                           ; 
   101                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   102                           ;        conditions and the following disclaimer.
   103                           ; 
   104                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   105                           ;        of conditions and the following disclaimer in the documentation and/or other
   106                           ;        materials provided with the distribution.
   107                           ; 
   108                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   109                           ;        software without specific prior written permission.
   110                           ; 
   111                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   112                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   113                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   114                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   115                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   116                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   117                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   118                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   119                           ; 
   120                           ; 
   121                           ; Code-generator required, PIC16F1829 Definitions
   122                           ; 
   123                           ; SFR Addresses
   124  0000                     	;# 
   125  0001                     	;# 
   126  0002                     	;# 
   127  0003                     	;# 
   128  0004                     	;# 
   129  0005                     	;# 
   130  0006                     	;# 
   131  0007                     	;# 
   132  0008                     	;# 
   133  0009                     	;# 
   134  000A                     	;# 
   135  000B                     	;# 
   136  000C                     	;# 
   137  000D                     	;# 
   138  000E                     	;# 
   139  0011                     	;# 
   140  0012                     	;# 
   141  0013                     	;# 
   142  0014                     	;# 
   143  0015                     	;# 
   144  0016                     	;# 
   145  0016                     	;# 
   146  0017                     	;# 
   147  0018                     	;# 
   148  0019                     	;# 
   149  001A                     	;# 
   150  001B                     	;# 
   151  001C                     	;# 
   152  001E                     	;# 
   153  001F                     	;# 
   154  008C                     	;# 
   155  008D                     	;# 
   156  008E                     	;# 
   157  0091                     	;# 
   158  0092                     	;# 
   159  0093                     	;# 
   160  0094                     	;# 
   161  0095                     	;# 
   162  0096                     	;# 
   163  0097                     	;# 
   164  0098                     	;# 
   165  0099                     	;# 
   166  009A                     	;# 
   167  009B                     	;# 
   168  009B                     	;# 
   169  009C                     	;# 
   170  009D                     	;# 
   171  009E                     	;# 
   172  010C                     	;# 
   173  010D                     	;# 
   174  010E                     	;# 
   175  0111                     	;# 
   176  0112                     	;# 
   177  0113                     	;# 
   178  0114                     	;# 
   179  0115                     	;# 
   180  0116                     	;# 
   181  0117                     	;# 
   182  0118                     	;# 
   183  0119                     	;# 
   184  011A                     	;# 
   185  011B                     	;# 
   186  011D                     	;# 
   187  011E                     	;# 
   188  018C                     	;# 
   189  018D                     	;# 
   190  018E                     	;# 
   191  0191                     	;# 
   192  0191                     	;# 
   193  0192                     	;# 
   194  0193                     	;# 
   195  0193                     	;# 
   196  0193                     	;# 
   197  0194                     	;# 
   198  0195                     	;# 
   199  0196                     	;# 
   200  0199                     	;# 
   201  019A                     	;# 
   202  019B                     	;# 
   203  019B                     	;# 
   204  019C                     	;# 
   205  019D                     	;# 
   206  019E                     	;# 
   207  019F                     	;# 
   208  020C                     	;# 
   209  020D                     	;# 
   210  020E                     	;# 
   211  0211                     	;# 
   212  0211                     	;# 
   213  0212                     	;# 
   214  0212                     	;# 
   215  0213                     	;# 
   216  0213                     	;# 
   217  0214                     	;# 
   218  0214                     	;# 
   219  0215                     	;# 
   220  0215                     	;# 
   221  0215                     	;# 
   222  0216                     	;# 
   223  0216                     	;# 
   224  0217                     	;# 
   225  0217                     	;# 
   226  0219                     	;# 
   227  021A                     	;# 
   228  021B                     	;# 
   229  021C                     	;# 
   230  021D                     	;# 
   231  021E                     	;# 
   232  021F                     	;# 
   233  0291                     	;# 
   234  0291                     	;# 
   235  0292                     	;# 
   236  0293                     	;# 
   237  0294                     	;# 
   238  0295                     	;# 
   239  0295                     	;# 
   240  0296                     	;# 
   241  0298                     	;# 
   242  0298                     	;# 
   243  0299                     	;# 
   244  029A                     	;# 
   245  029B                     	;# 
   246  029C                     	;# 
   247  029D                     	;# 
   248  029E                     	;# 
   249  0311                     	;# 
   250  0311                     	;# 
   251  0312                     	;# 
   252  0313                     	;# 
   253  0318                     	;# 
   254  0318                     	;# 
   255  0319                     	;# 
   256  031A                     	;# 
   257  038C                     	;# 
   258  038D                     	;# 
   259  038E                     	;# 
   260  0391                     	;# 
   261  0392                     	;# 
   262  0393                     	;# 
   263  0394                     	;# 
   264  0395                     	;# 
   265  0396                     	;# 
   266  039A                     	;# 
   267  039C                     	;# 
   268  039D                     	;# 
   269  039E                     	;# 
   270  039F                     	;# 
   271  0415                     	;# 
   272  0416                     	;# 
   273  0417                     	;# 
   274  041C                     	;# 
   275  041D                     	;# 
   276  041E                     	;# 
   277  0FE4                     	;# 
   278  0FE5                     	;# 
   279  0FE6                     	;# 
   280  0FE7                     	;# 
   281  0FE8                     	;# 
   282  0FE9                     	;# 
   283  0FEA                     	;# 
   284  0FEB                     	;# 
   285  0FED                     	;# 
   286  0FEE                     	;# 
   287  0FEF                     	;# 
   288  0000                     	;# 
   289  0001                     	;# 
   290  0002                     	;# 
   291  0003                     	;# 
   292  0004                     	;# 
   293  0005                     	;# 
   294  0006                     	;# 
   295  0007                     	;# 
   296  0008                     	;# 
   297  0009                     	;# 
   298  000A                     	;# 
   299  000B                     	;# 
   300  000C                     	;# 
   301  000D                     	;# 
   302  000E                     	;# 
   303  0011                     	;# 
   304  0012                     	;# 
   305  0013                     	;# 
   306  0014                     	;# 
   307  0015                     	;# 
   308  0016                     	;# 
   309  0016                     	;# 
   310  0017                     	;# 
   311  0018                     	;# 
   312  0019                     	;# 
   313  001A                     	;# 
   314  001B                     	;# 
   315  001C                     	;# 
   316  001E                     	;# 
   317  001F                     	;# 
   318  008C                     	;# 
   319  008D                     	;# 
   320  008E                     	;# 
   321  0091                     	;# 
   322  0092                     	;# 
   323  0093                     	;# 
   324  0094                     	;# 
   325  0095                     	;# 
   326  0096                     	;# 
   327  0097                     	;# 
   328  0098                     	;# 
   329  0099                     	;# 
   330  009A                     	;# 
   331  009B                     	;# 
   332  009B                     	;# 
   333  009C                     	;# 
   334  009D                     	;# 
   335  009E                     	;# 
   336  010C                     	;# 
   337  010D                     	;# 
   338  010E                     	;# 
   339  0111                     	;# 
   340  0112                     	;# 
   341  0113                     	;# 
   342  0114                     	;# 
   343  0115                     	;# 
   344  0116                     	;# 
   345  0117                     	;# 
   346  0118                     	;# 
   347  0119                     	;# 
   348  011A                     	;# 
   349  011B                     	;# 
   350  011D                     	;# 
   351  011E                     	;# 
   352  018C                     	;# 
   353  018D                     	;# 
   354  018E                     	;# 
   355  0191                     	;# 
   356  0191                     	;# 
   357  0192                     	;# 
   358  0193                     	;# 
   359  0193                     	;# 
   360  0193                     	;# 
   361  0194                     	;# 
   362  0195                     	;# 
   363  0196                     	;# 
   364  0199                     	;# 
   365  019A                     	;# 
   366  019B                     	;# 
   367  019B                     	;# 
   368  019C                     	;# 
   369  019D                     	;# 
   370  019E                     	;# 
   371  019F                     	;# 
   372  020C                     	;# 
   373  020D                     	;# 
   374  020E                     	;# 
   375  0211                     	;# 
   376  0211                     	;# 
   377  0212                     	;# 
   378  0212                     	;# 
   379  0213                     	;# 
   380  0213                     	;# 
   381  0214                     	;# 
   382  0214                     	;# 
   383  0215                     	;# 
   384  0215                     	;# 
   385  0215                     	;# 
   386  0216                     	;# 
   387  0216                     	;# 
   388  0217                     	;# 
   389  0217                     	;# 
   390  0219                     	;# 
   391  021A                     	;# 
   392  021B                     	;# 
   393  021C                     	;# 
   394  021D                     	;# 
   395  021E                     	;# 
   396  021F                     	;# 
   397  0291                     	;# 
   398  0291                     	;# 
   399  0292                     	;# 
   400  0293                     	;# 
   401  0294                     	;# 
   402  0295                     	;# 
   403  0295                     	;# 
   404  0296                     	;# 
   405  0298                     	;# 
   406  0298                     	;# 
   407  0299                     	;# 
   408  029A                     	;# 
   409  029B                     	;# 
   410  029C                     	;# 
   411  029D                     	;# 
   412  029E                     	;# 
   413  0311                     	;# 
   414  0311                     	;# 
   415  0312                     	;# 
   416  0313                     	;# 
   417  0318                     	;# 
   418  0318                     	;# 
   419  0319                     	;# 
   420  031A                     	;# 
   421  038C                     	;# 
   422  038D                     	;# 
   423  038E                     	;# 
   424  0391                     	;# 
   425  0392                     	;# 
   426  0393                     	;# 
   427  0394                     	;# 
   428  0395                     	;# 
   429  0396                     	;# 
   430  039A                     	;# 
   431  039C                     	;# 
   432  039D                     	;# 
   433  039E                     	;# 
   434  039F                     	;# 
   435  0415                     	;# 
   436  0416                     	;# 
   437  0417                     	;# 
   438  041C                     	;# 
   439  041D                     	;# 
   440  041E                     	;# 
   441  0FE4                     	;# 
   442  0FE5                     	;# 
   443  0FE6                     	;# 
   444  0FE7                     	;# 
   445  0FE8                     	;# 
   446  0FE9                     	;# 
   447  0FEA                     	;# 
   448  0FEB                     	;# 
   449  0FED                     	;# 
   450  0FEE                     	;# 
   451  0FEF                     	;# 
   452  0000                     	;# 
   453  0001                     	;# 
   454  0002                     	;# 
   455  0003                     	;# 
   456  0004                     	;# 
   457  0005                     	;# 
   458  0006                     	;# 
   459  0007                     	;# 
   460  0008                     	;# 
   461  0009                     	;# 
   462  000A                     	;# 
   463  000B                     	;# 
   464  000C                     	;# 
   465  000D                     	;# 
   466  000E                     	;# 
   467  0011                     	;# 
   468  0012                     	;# 
   469  0013                     	;# 
   470  0014                     	;# 
   471  0015                     	;# 
   472  0016                     	;# 
   473  0016                     	;# 
   474  0017                     	;# 
   475  0018                     	;# 
   476  0019                     	;# 
   477  001A                     	;# 
   478  001B                     	;# 
   479  001C                     	;# 
   480  001E                     	;# 
   481  001F                     	;# 
   482  008C                     	;# 
   483  008D                     	;# 
   484  008E                     	;# 
   485  0091                     	;# 
   486  0092                     	;# 
   487  0093                     	;# 
   488  0094                     	;# 
   489  0095                     	;# 
   490  0096                     	;# 
   491  0097                     	;# 
   492  0098                     	;# 
   493  0099                     	;# 
   494  009A                     	;# 
   495  009B                     	;# 
   496  009B                     	;# 
   497  009C                     	;# 
   498  009D                     	;# 
   499  009E                     	;# 
   500  010C                     	;# 
   501  010D                     	;# 
   502  010E                     	;# 
   503  0111                     	;# 
   504  0112                     	;# 
   505  0113                     	;# 
   506  0114                     	;# 
   507  0115                     	;# 
   508  0116                     	;# 
   509  0117                     	;# 
   510  0118                     	;# 
   511  0119                     	;# 
   512  011A                     	;# 
   513  011B                     	;# 
   514  011D                     	;# 
   515  011E                     	;# 
   516  018C                     	;# 
   517  018D                     	;# 
   518  018E                     	;# 
   519  0191                     	;# 
   520  0191                     	;# 
   521  0192                     	;# 
   522  0193                     	;# 
   523  0193                     	;# 
   524  0193                     	;# 
   525  0194                     	;# 
   526  0195                     	;# 
   527  0196                     	;# 
   528  0199                     	;# 
   529  019A                     	;# 
   530  019B                     	;# 
   531  019B                     	;# 
   532  019C                     	;# 
   533  019D                     	;# 
   534  019E                     	;# 
   535  019F                     	;# 
   536  020C                     	;# 
   537  020D                     	;# 
   538  020E                     	;# 
   539  0211                     	;# 
   540  0211                     	;# 
   541  0212                     	;# 
   542  0212                     	;# 
   543  0213                     	;# 
   544  0213                     	;# 
   545  0214                     	;# 
   546  0214                     	;# 
   547  0215                     	;# 
   548  0215                     	;# 
   549  0215                     	;# 
   550  0216                     	;# 
   551  0216                     	;# 
   552  0217                     	;# 
   553  0217                     	;# 
   554  0219                     	;# 
   555  021A                     	;# 
   556  021B                     	;# 
   557  021C                     	;# 
   558  021D                     	;# 
   559  021E                     	;# 
   560  021F                     	;# 
   561  0291                     	;# 
   562  0291                     	;# 
   563  0292                     	;# 
   564  0293                     	;# 
   565  0294                     	;# 
   566  0295                     	;# 
   567  0295                     	;# 
   568  0296                     	;# 
   569  0298                     	;# 
   570  0298                     	;# 
   571  0299                     	;# 
   572  029A                     	;# 
   573  029B                     	;# 
   574  029C                     	;# 
   575  029D                     	;# 
   576  029E                     	;# 
   577  0311                     	;# 
   578  0311                     	;# 
   579  0312                     	;# 
   580  0313                     	;# 
   581  0318                     	;# 
   582  0318                     	;# 
   583  0319                     	;# 
   584  031A                     	;# 
   585  038C                     	;# 
   586  038D                     	;# 
   587  038E                     	;# 
   588  0391                     	;# 
   589  0392                     	;# 
   590  0393                     	;# 
   591  0394                     	;# 
   592  0395                     	;# 
   593  0396                     	;# 
   594  039A                     	;# 
   595  039C                     	;# 
   596  039D                     	;# 
   597  039E                     	;# 
   598  039F                     	;# 
   599  0415                     	;# 
   600  0416                     	;# 
   601  0417                     	;# 
   602  041C                     	;# 
   603  041D                     	;# 
   604  041E                     	;# 
   605  0FE4                     	;# 
   606  0FE5                     	;# 
   607  0FE6                     	;# 
   608  0FE7                     	;# 
   609  0FE8                     	;# 
   610  0FE9                     	;# 
   611  0FEA                     	;# 
   612  0FEB                     	;# 
   613  0FED                     	;# 
   614  0FEE                     	;# 
   615  0FEF                     	;# 
   616  0000                     	;# 
   617  0001                     	;# 
   618  0002                     	;# 
   619  0003                     	;# 
   620  0004                     	;# 
   621  0005                     	;# 
   622  0006                     	;# 
   623  0007                     	;# 
   624  0008                     	;# 
   625  0009                     	;# 
   626  000A                     	;# 
   627  000B                     	;# 
   628  000C                     	;# 
   629  000D                     	;# 
   630  000E                     	;# 
   631  0011                     	;# 
   632  0012                     	;# 
   633  0013                     	;# 
   634  0014                     	;# 
   635  0015                     	;# 
   636  0016                     	;# 
   637  0016                     	;# 
   638  0017                     	;# 
   639  0018                     	;# 
   640  0019                     	;# 
   641  001A                     	;# 
   642  001B                     	;# 
   643  001C                     	;# 
   644  001E                     	;# 
   645  001F                     	;# 
   646  008C                     	;# 
   647  008D                     	;# 
   648  008E                     	;# 
   649  0091                     	;# 
   650  0092                     	;# 
   651  0093                     	;# 
   652  0094                     	;# 
   653  0095                     	;# 
   654  0096                     	;# 
   655  0097                     	;# 
   656  0098                     	;# 
   657  0099                     	;# 
   658  009A                     	;# 
   659  009B                     	;# 
   660  009B                     	;# 
   661  009C                     	;# 
   662  009D                     	;# 
   663  009E                     	;# 
   664  010C                     	;# 
   665  010D                     	;# 
   666  010E                     	;# 
   667  0111                     	;# 
   668  0112                     	;# 
   669  0113                     	;# 
   670  0114                     	;# 
   671  0115                     	;# 
   672  0116                     	;# 
   673  0117                     	;# 
   674  0118                     	;# 
   675  0119                     	;# 
   676  011A                     	;# 
   677  011B                     	;# 
   678  011D                     	;# 
   679  011E                     	;# 
   680  018C                     	;# 
   681  018D                     	;# 
   682  018E                     	;# 
   683  0191                     	;# 
   684  0191                     	;# 
   685  0192                     	;# 
   686  0193                     	;# 
   687  0193                     	;# 
   688  0193                     	;# 
   689  0194                     	;# 
   690  0195                     	;# 
   691  0196                     	;# 
   692  0199                     	;# 
   693  019A                     	;# 
   694  019B                     	;# 
   695  019B                     	;# 
   696  019C                     	;# 
   697  019D                     	;# 
   698  019E                     	;# 
   699  019F                     	;# 
   700  020C                     	;# 
   701  020D                     	;# 
   702  020E                     	;# 
   703  0211                     	;# 
   704  0211                     	;# 
   705  0212                     	;# 
   706  0212                     	;# 
   707  0213                     	;# 
   708  0213                     	;# 
   709  0214                     	;# 
   710  0214                     	;# 
   711  0215                     	;# 
   712  0215                     	;# 
   713  0215                     	;# 
   714  0216                     	;# 
   715  0216                     	;# 
   716  0217                     	;# 
   717  0217                     	;# 
   718  0219                     	;# 
   719  021A                     	;# 
   720  021B                     	;# 
   721  021C                     	;# 
   722  021D                     	;# 
   723  021E                     	;# 
   724  021F                     	;# 
   725  0291                     	;# 
   726  0291                     	;# 
   727  0292                     	;# 
   728  0293                     	;# 
   729  0294                     	;# 
   730  0295                     	;# 
   731  0295                     	;# 
   732  0296                     	;# 
   733  0298                     	;# 
   734  0298                     	;# 
   735  0299                     	;# 
   736  029A                     	;# 
   737  029B                     	;# 
   738  029C                     	;# 
   739  029D                     	;# 
   740  029E                     	;# 
   741  0311                     	;# 
   742  0311                     	;# 
   743  0312                     	;# 
   744  0313                     	;# 
   745  0318                     	;# 
   746  0318                     	;# 
   747  0319                     	;# 
   748  031A                     	;# 
   749  038C                     	;# 
   750  038D                     	;# 
   751  038E                     	;# 
   752  0391                     	;# 
   753  0392                     	;# 
   754  0393                     	;# 
   755  0394                     	;# 
   756  0395                     	;# 
   757  0396                     	;# 
   758  039A                     	;# 
   759  039C                     	;# 
   760  039D                     	;# 
   761  039E                     	;# 
   762  039F                     	;# 
   763  0415                     	;# 
   764  0416                     	;# 
   765  0417                     	;# 
   766  041C                     	;# 
   767  041D                     	;# 
   768  041E                     	;# 
   769  0FE4                     	;# 
   770  0FE5                     	;# 
   771  0FE6                     	;# 
   772  0FE7                     	;# 
   773  0FE8                     	;# 
   774  0FE9                     	;# 
   775  0FEA                     	;# 
   776  0FEB                     	;# 
   777  0FED                     	;# 
   778  0FEE                     	;# 
   779  0FEF                     	;# 
   780  0000                     	;# 
   781  0001                     	;# 
   782  0002                     	;# 
   783  0003                     	;# 
   784  0004                     	;# 
   785  0005                     	;# 
   786  0006                     	;# 
   787  0007                     	;# 
   788  0008                     	;# 
   789  0009                     	;# 
   790  000A                     	;# 
   791  000B                     	;# 
   792  000C                     	;# 
   793  000D                     	;# 
   794  000E                     	;# 
   795  0011                     	;# 
   796  0012                     	;# 
   797  0013                     	;# 
   798  0014                     	;# 
   799  0015                     	;# 
   800  0016                     	;# 
   801  0016                     	;# 
   802  0017                     	;# 
   803  0018                     	;# 
   804  0019                     	;# 
   805  001A                     	;# 
   806  001B                     	;# 
   807  001C                     	;# 
   808  001E                     	;# 
   809  001F                     	;# 
   810  008C                     	;# 
   811  008D                     	;# 
   812  008E                     	;# 
   813  0091                     	;# 
   814  0092                     	;# 
   815  0093                     	;# 
   816  0094                     	;# 
   817  0095                     	;# 
   818  0096                     	;# 
   819  0097                     	;# 
   820  0098                     	;# 
   821  0099                     	;# 
   822  009A                     	;# 
   823  009B                     	;# 
   824  009B                     	;# 
   825  009C                     	;# 
   826  009D                     	;# 
   827  009E                     	;# 
   828  010C                     	;# 
   829  010D                     	;# 
   830  010E                     	;# 
   831  0111                     	;# 
   832  0112                     	;# 
   833  0113                     	;# 
   834  0114                     	;# 
   835  0115                     	;# 
   836  0116                     	;# 
   837  0117                     	;# 
   838  0118                     	;# 
   839  0119                     	;# 
   840  011A                     	;# 
   841  011B                     	;# 
   842  011D                     	;# 
   843  011E                     	;# 
   844  018C                     	;# 
   845  018D                     	;# 
   846  018E                     	;# 
   847  0191                     	;# 
   848  0191                     	;# 
   849  0192                     	;# 
   850  0193                     	;# 
   851  0193                     	;# 
   852  0193                     	;# 
   853  0194                     	;# 
   854  0195                     	;# 
   855  0196                     	;# 
   856  0199                     	;# 
   857  019A                     	;# 
   858  019B                     	;# 
   859  019B                     	;# 
   860  019C                     	;# 
   861  019D                     	;# 
   862  019E                     	;# 
   863  019F                     	;# 
   864  020C                     	;# 
   865  020D                     	;# 
   866  020E                     	;# 
   867  0211                     	;# 
   868  0211                     	;# 
   869  0212                     	;# 
   870  0212                     	;# 
   871  0213                     	;# 
   872  0213                     	;# 
   873  0214                     	;# 
   874  0214                     	;# 
   875  0215                     	;# 
   876  0215                     	;# 
   877  0215                     	;# 
   878  0216                     	;# 
   879  0216                     	;# 
   880  0217                     	;# 
   881  0217                     	;# 
   882  0219                     	;# 
   883  021A                     	;# 
   884  021B                     	;# 
   885  021C                     	;# 
   886  021D                     	;# 
   887  021E                     	;# 
   888  021F                     	;# 
   889  0291                     	;# 
   890  0291                     	;# 
   891  0292                     	;# 
   892  0293                     	;# 
   893  0294                     	;# 
   894  0295                     	;# 
   895  0295                     	;# 
   896  0296                     	;# 
   897  0298                     	;# 
   898  0298                     	;# 
   899  0299                     	;# 
   900  029A                     	;# 
   901  029B                     	;# 
   902  029C                     	;# 
   903  029D                     	;# 
   904  029E                     	;# 
   905  0311                     	;# 
   906  0311                     	;# 
   907  0312                     	;# 
   908  0313                     	;# 
   909  0318                     	;# 
   910  0318                     	;# 
   911  0319                     	;# 
   912  031A                     	;# 
   913  038C                     	;# 
   914  038D                     	;# 
   915  038E                     	;# 
   916  0391                     	;# 
   917  0392                     	;# 
   918  0393                     	;# 
   919  0394                     	;# 
   920  0395                     	;# 
   921  0396                     	;# 
   922  039A                     	;# 
   923  039C                     	;# 
   924  039D                     	;# 
   925  039E                     	;# 
   926  039F                     	;# 
   927  0415                     	;# 
   928  0416                     	;# 
   929  0417                     	;# 
   930  041C                     	;# 
   931  041D                     	;# 
   932  041E                     	;# 
   933  0FE4                     	;# 
   934  0FE5                     	;# 
   935  0FE6                     	;# 
   936  0FE7                     	;# 
   937  0FE8                     	;# 
   938  0FE9                     	;# 
   939  0FEA                     	;# 
   940  0FEB                     	;# 
   941  0FED                     	;# 
   942  0FEE                     	;# 
   943  0FEF                     	;# 
   944  0000                     	;# 
   945  0001                     	;# 
   946  0002                     	;# 
   947  0003                     	;# 
   948  0004                     	;# 
   949  0005                     	;# 
   950  0006                     	;# 
   951  0007                     	;# 
   952  0008                     	;# 
   953  0009                     	;# 
   954  000A                     	;# 
   955  000B                     	;# 
   956  000C                     	;# 
   957  000D                     	;# 
   958  000E                     	;# 
   959  0011                     	;# 
   960  0012                     	;# 
   961  0013                     	;# 
   962  0014                     	;# 
   963  0015                     	;# 
   964  0016                     	;# 
   965  0016                     	;# 
   966  0017                     	;# 
   967  0018                     	;# 
   968  0019                     	;# 
   969  001A                     	;# 
   970  001B                     	;# 
   971  001C                     	;# 
   972  001E                     	;# 
   973  001F                     	;# 
   974  008C                     	;# 
   975  008D                     	;# 
   976  008E                     	;# 
   977  0091                     	;# 
   978  0092                     	;# 
   979  0093                     	;# 
   980  0094                     	;# 
   981  0095                     	;# 
   982  0096                     	;# 
   983  0097                     	;# 
   984  0098                     	;# 
   985  0099                     	;# 
   986  009A                     	;# 
   987  009B                     	;# 
   988  009B                     	;# 
   989  009C                     	;# 
   990  009D                     	;# 
   991  009E                     	;# 
   992  010C                     	;# 
   993  010D                     	;# 
   994  010E                     	;# 
   995  0111                     	;# 
   996  0112                     	;# 
   997  0113                     	;# 
   998  0114                     	;# 
   999  0115                     	;# 
  1000  0116                     	;# 
  1001  0117                     	;# 
  1002  0118                     	;# 
  1003  0119                     	;# 
  1004  011A                     	;# 
  1005  011B                     	;# 
  1006  011D                     	;# 
  1007  011E                     	;# 
  1008  018C                     	;# 
  1009  018D                     	;# 
  1010  018E                     	;# 
  1011  0191                     	;# 
  1012  0191                     	;# 
  1013  0192                     	;# 
  1014  0193                     	;# 
  1015  0193                     	;# 
  1016  0193                     	;# 
  1017  0194                     	;# 
  1018  0195                     	;# 
  1019  0196                     	;# 
  1020  0199                     	;# 
  1021  019A                     	;# 
  1022  019B                     	;# 
  1023  019B                     	;# 
  1024  019C                     	;# 
  1025  019D                     	;# 
  1026  019E                     	;# 
  1027  019F                     	;# 
  1028  020C                     	;# 
  1029  020D                     	;# 
  1030  020E                     	;# 
  1031  0211                     	;# 
  1032  0211                     	;# 
  1033  0212                     	;# 
  1034  0212                     	;# 
  1035  0213                     	;# 
  1036  0213                     	;# 
  1037  0214                     	;# 
  1038  0214                     	;# 
  1039  0215                     	;# 
  1040  0215                     	;# 
  1041  0215                     	;# 
  1042  0216                     	;# 
  1043  0216                     	;# 
  1044  0217                     	;# 
  1045  0217                     	;# 
  1046  0219                     	;# 
  1047  021A                     	;# 
  1048  021B                     	;# 
  1049  021C                     	;# 
  1050  021D                     	;# 
  1051  021E                     	;# 
  1052  021F                     	;# 
  1053  0291                     	;# 
  1054  0291                     	;# 
  1055  0292                     	;# 
  1056  0293                     	;# 
  1057  0294                     	;# 
  1058  0295                     	;# 
  1059  0295                     	;# 
  1060  0296                     	;# 
  1061  0298                     	;# 
  1062  0298                     	;# 
  1063  0299                     	;# 
  1064  029A                     	;# 
  1065  029B                     	;# 
  1066  029C                     	;# 
  1067  029D                     	;# 
  1068  029E                     	;# 
  1069  0311                     	;# 
  1070  0311                     	;# 
  1071  0312                     	;# 
  1072  0313                     	;# 
  1073  0318                     	;# 
  1074  0318                     	;# 
  1075  0319                     	;# 
  1076  031A                     	;# 
  1077  038C                     	;# 
  1078  038D                     	;# 
  1079  038E                     	;# 
  1080  0391                     	;# 
  1081  0392                     	;# 
  1082  0393                     	;# 
  1083  0394                     	;# 
  1084  0395                     	;# 
  1085  0396                     	;# 
  1086  039A                     	;# 
  1087  039C                     	;# 
  1088  039D                     	;# 
  1089  039E                     	;# 
  1090  039F                     	;# 
  1091  0415                     	;# 
  1092  0416                     	;# 
  1093  0417                     	;# 
  1094  041C                     	;# 
  1095  041D                     	;# 
  1096  041E                     	;# 
  1097  0FE4                     	;# 
  1098  0FE5                     	;# 
  1099  0FE6                     	;# 
  1100  0FE7                     	;# 
  1101  0FE8                     	;# 
  1102  0FE9                     	;# 
  1103  0FEA                     	;# 
  1104  0FEB                     	;# 
  1105  0FED                     	;# 
  1106  0FEE                     	;# 
  1107  0FEF                     	;# 
  1108  0000                     	;# 
  1109  0001                     	;# 
  1110  0002                     	;# 
  1111  0003                     	;# 
  1112  0004                     	;# 
  1113  0005                     	;# 
  1114  0006                     	;# 
  1115  0007                     	;# 
  1116  0008                     	;# 
  1117  0009                     	;# 
  1118  000A                     	;# 
  1119  000B                     	;# 
  1120  000C                     	;# 
  1121  000D                     	;# 
  1122  000E                     	;# 
  1123  0011                     	;# 
  1124  0012                     	;# 
  1125  0013                     	;# 
  1126  0014                     	;# 
  1127  0015                     	;# 
  1128  0016                     	;# 
  1129  0016                     	;# 
  1130  0017                     	;# 
  1131  0018                     	;# 
  1132  0019                     	;# 
  1133  001A                     	;# 
  1134  001B                     	;# 
  1135  001C                     	;# 
  1136  001E                     	;# 
  1137  001F                     	;# 
  1138  008C                     	;# 
  1139  008D                     	;# 
  1140  008E                     	;# 
  1141  0091                     	;# 
  1142  0092                     	;# 
  1143  0093                     	;# 
  1144  0094                     	;# 
  1145  0095                     	;# 
  1146  0096                     	;# 
  1147  0097                     	;# 
  1148  0098                     	;# 
  1149  0099                     	;# 
  1150  009A                     	;# 
  1151  009B                     	;# 
  1152  009B                     	;# 
  1153  009C                     	;# 
  1154  009D                     	;# 
  1155  009E                     	;# 
  1156  010C                     	;# 
  1157  010D                     	;# 
  1158  010E                     	;# 
  1159  0111                     	;# 
  1160  0112                     	;# 
  1161  0113                     	;# 
  1162  0114                     	;# 
  1163  0115                     	;# 
  1164  0116                     	;# 
  1165  0117                     	;# 
  1166  0118                     	;# 
  1167  0119                     	;# 
  1168  011A                     	;# 
  1169  011B                     	;# 
  1170  011D                     	;# 
  1171  011E                     	;# 
  1172  018C                     	;# 
  1173  018D                     	;# 
  1174  018E                     	;# 
  1175  0191                     	;# 
  1176  0191                     	;# 
  1177  0192                     	;# 
  1178  0193                     	;# 
  1179  0193                     	;# 
  1180  0193                     	;# 
  1181  0194                     	;# 
  1182  0195                     	;# 
  1183  0196                     	;# 
  1184  0199                     	;# 
  1185  019A                     	;# 
  1186  019B                     	;# 
  1187  019B                     	;# 
  1188  019C                     	;# 
  1189  019D                     	;# 
  1190  019E                     	;# 
  1191  019F                     	;# 
  1192  020C                     	;# 
  1193  020D                     	;# 
  1194  020E                     	;# 
  1195  0211                     	;# 
  1196  0211                     	;# 
  1197  0212                     	;# 
  1198  0212                     	;# 
  1199  0213                     	;# 
  1200  0213                     	;# 
  1201  0214                     	;# 
  1202  0214                     	;# 
  1203  0215                     	;# 
  1204  0215                     	;# 
  1205  0215                     	;# 
  1206  0216                     	;# 
  1207  0216                     	;# 
  1208  0217                     	;# 
  1209  0217                     	;# 
  1210  0219                     	;# 
  1211  021A                     	;# 
  1212  021B                     	;# 
  1213  021C                     	;# 
  1214  021D                     	;# 
  1215  021E                     	;# 
  1216  021F                     	;# 
  1217  0291                     	;# 
  1218  0291                     	;# 
  1219  0292                     	;# 
  1220  0293                     	;# 
  1221  0294                     	;# 
  1222  0295                     	;# 
  1223  0295                     	;# 
  1224  0296                     	;# 
  1225  0298                     	;# 
  1226  0298                     	;# 
  1227  0299                     	;# 
  1228  029A                     	;# 
  1229  029B                     	;# 
  1230  029C                     	;# 
  1231  029D                     	;# 
  1232  029E                     	;# 
  1233  0311                     	;# 
  1234  0311                     	;# 
  1235  0312                     	;# 
  1236  0313                     	;# 
  1237  0318                     	;# 
  1238  0318                     	;# 
  1239  0319                     	;# 
  1240  031A                     	;# 
  1241  038C                     	;# 
  1242  038D                     	;# 
  1243  038E                     	;# 
  1244  0391                     	;# 
  1245  0392                     	;# 
  1246  0393                     	;# 
  1247  0394                     	;# 
  1248  0395                     	;# 
  1249  0396                     	;# 
  1250  039A                     	;# 
  1251  039C                     	;# 
  1252  039D                     	;# 
  1253  039E                     	;# 
  1254  039F                     	;# 
  1255  0415                     	;# 
  1256  0416                     	;# 
  1257  0417                     	;# 
  1258  041C                     	;# 
  1259  041D                     	;# 
  1260  041E                     	;# 
  1261  0FE4                     	;# 
  1262  0FE5                     	;# 
  1263  0FE6                     	;# 
  1264  0FE7                     	;# 
  1265  0FE8                     	;# 
  1266  0FE9                     	;# 
  1267  0FEA                     	;# 
  1268  0FEB                     	;# 
  1269  0FED                     	;# 
  1270  0FEE                     	;# 
  1271  0FEF                     	;# 
  1272  0000                     	;# 
  1273  0001                     	;# 
  1274  0002                     	;# 
  1275  0003                     	;# 
  1276  0004                     	;# 
  1277  0005                     	;# 
  1278  0006                     	;# 
  1279  0007                     	;# 
  1280  0008                     	;# 
  1281  0009                     	;# 
  1282  000A                     	;# 
  1283  000B                     	;# 
  1284  000C                     	;# 
  1285  000D                     	;# 
  1286  000E                     	;# 
  1287  0011                     	;# 
  1288  0012                     	;# 
  1289  0013                     	;# 
  1290  0014                     	;# 
  1291  0015                     	;# 
  1292  0016                     	;# 
  1293  0016                     	;# 
  1294  0017                     	;# 
  1295  0018                     	;# 
  1296  0019                     	;# 
  1297  001A                     	;# 
  1298  001B                     	;# 
  1299  001C                     	;# 
  1300  001E                     	;# 
  1301  001F                     	;# 
  1302  008C                     	;# 
  1303  008D                     	;# 
  1304  008E                     	;# 
  1305  0091                     	;# 
  1306  0092                     	;# 
  1307  0093                     	;# 
  1308  0094                     	;# 
  1309  0095                     	;# 
  1310  0096                     	;# 
  1311  0097                     	;# 
  1312  0098                     	;# 
  1313  0099                     	;# 
  1314  009A                     	;# 
  1315  009B                     	;# 
  1316  009B                     	;# 
  1317  009C                     	;# 
  1318  009D                     	;# 
  1319  009E                     	;# 
  1320  010C                     	;# 
  1321  010D                     	;# 
  1322  010E                     	;# 
  1323  0111                     	;# 
  1324  0112                     	;# 
  1325  0113                     	;# 
  1326  0114                     	;# 
  1327  0115                     	;# 
  1328  0116                     	;# 
  1329  0117                     	;# 
  1330  0118                     	;# 
  1331  0119                     	;# 
  1332  011A                     	;# 
  1333  011B                     	;# 
  1334  011D                     	;# 
  1335  011E                     	;# 
  1336  018C                     	;# 
  1337  018D                     	;# 
  1338  018E                     	;# 
  1339  0191                     	;# 
  1340  0191                     	;# 
  1341  0192                     	;# 
  1342  0193                     	;# 
  1343  0193                     	;# 
  1344  0193                     	;# 
  1345  0194                     	;# 
  1346  0195                     	;# 
  1347  0196                     	;# 
  1348  0199                     	;# 
  1349  019A                     	;# 
  1350  019B                     	;# 
  1351  019B                     	;# 
  1352  019C                     	;# 
  1353  019D                     	;# 
  1354  019E                     	;# 
  1355  019F                     	;# 
  1356  020C                     	;# 
  1357  020D                     	;# 
  1358  020E                     	;# 
  1359  0211                     	;# 
  1360  0211                     	;# 
  1361  0212                     	;# 
  1362  0212                     	;# 
  1363  0213                     	;# 
  1364  0213                     	;# 
  1365  0214                     	;# 
  1366  0214                     	;# 
  1367  0215                     	;# 
  1368  0215                     	;# 
  1369  0215                     	;# 
  1370  0216                     	;# 
  1371  0216                     	;# 
  1372  0217                     	;# 
  1373  0217                     	;# 
  1374  0219                     	;# 
  1375  021A                     	;# 
  1376  021B                     	;# 
  1377  021C                     	;# 
  1378  021D                     	;# 
  1379  021E                     	;# 
  1380  021F                     	;# 
  1381  0291                     	;# 
  1382  0291                     	;# 
  1383  0292                     	;# 
  1384  0293                     	;# 
  1385  0294                     	;# 
  1386  0295                     	;# 
  1387  0295                     	;# 
  1388  0296                     	;# 
  1389  0298                     	;# 
  1390  0298                     	;# 
  1391  0299                     	;# 
  1392  029A                     	;# 
  1393  029B                     	;# 
  1394  029C                     	;# 
  1395  029D                     	;# 
  1396  029E                     	;# 
  1397  0311                     	;# 
  1398  0311                     	;# 
  1399  0312                     	;# 
  1400  0313                     	;# 
  1401  0318                     	;# 
  1402  0318                     	;# 
  1403  0319                     	;# 
  1404  031A                     	;# 
  1405  038C                     	;# 
  1406  038D                     	;# 
  1407  038E                     	;# 
  1408  0391                     	;# 
  1409  0392                     	;# 
  1410  0393                     	;# 
  1411  0394                     	;# 
  1412  0395                     	;# 
  1413  0396                     	;# 
  1414  039A                     	;# 
  1415  039C                     	;# 
  1416  039D                     	;# 
  1417  039E                     	;# 
  1418  039F                     	;# 
  1419  0415                     	;# 
  1420  0416                     	;# 
  1421  0417                     	;# 
  1422  041C                     	;# 
  1423  041D                     	;# 
  1424  041E                     	;# 
  1425  0FE4                     	;# 
  1426  0FE5                     	;# 
  1427  0FE6                     	;# 
  1428  0FE7                     	;# 
  1429  0FE8                     	;# 
  1430  0FE9                     	;# 
  1431  0FEA                     	;# 
  1432  0FEB                     	;# 
  1433  0FED                     	;# 
  1434  0FEE                     	;# 
  1435  0FEF                     	;# 
  1436  0000                     	;# 
  1437  0001                     	;# 
  1438  0002                     	;# 
  1439  0003                     	;# 
  1440  0004                     	;# 
  1441  0005                     	;# 
  1442  0006                     	;# 
  1443  0007                     	;# 
  1444  0008                     	;# 
  1445  0009                     	;# 
  1446  000A                     	;# 
  1447  000B                     	;# 
  1448  000C                     	;# 
  1449  000D                     	;# 
  1450  000E                     	;# 
  1451  0011                     	;# 
  1452  0012                     	;# 
  1453  0013                     	;# 
  1454  0014                     	;# 
  1455  0015                     	;# 
  1456  0016                     	;# 
  1457  0016                     	;# 
  1458  0017                     	;# 
  1459  0018                     	;# 
  1460  0019                     	;# 
  1461  001A                     	;# 
  1462  001B                     	;# 
  1463  001C                     	;# 
  1464  001E                     	;# 
  1465  001F                     	;# 
  1466  008C                     	;# 
  1467  008D                     	;# 
  1468  008E                     	;# 
  1469  0091                     	;# 
  1470  0092                     	;# 
  1471  0093                     	;# 
  1472  0094                     	;# 
  1473  0095                     	;# 
  1474  0096                     	;# 
  1475  0097                     	;# 
  1476  0098                     	;# 
  1477  0099                     	;# 
  1478  009A                     	;# 
  1479  009B                     	;# 
  1480  009B                     	;# 
  1481  009C                     	;# 
  1482  009D                     	;# 
  1483  009E                     	;# 
  1484  010C                     	;# 
  1485  010D                     	;# 
  1486  010E                     	;# 
  1487  0111                     	;# 
  1488  0112                     	;# 
  1489  0113                     	;# 
  1490  0114                     	;# 
  1491  0115                     	;# 
  1492  0116                     	;# 
  1493  0117                     	;# 
  1494  0118                     	;# 
  1495  0119                     	;# 
  1496  011A                     	;# 
  1497  011B                     	;# 
  1498  011D                     	;# 
  1499  011E                     	;# 
  1500  018C                     	;# 
  1501  018D                     	;# 
  1502  018E                     	;# 
  1503  0191                     	;# 
  1504  0191                     	;# 
  1505  0192                     	;# 
  1506  0193                     	;# 
  1507  0193                     	;# 
  1508  0193                     	;# 
  1509  0194                     	;# 
  1510  0195                     	;# 
  1511  0196                     	;# 
  1512  0199                     	;# 
  1513  019A                     	;# 
  1514  019B                     	;# 
  1515  019B                     	;# 
  1516  019C                     	;# 
  1517  019D                     	;# 
  1518  019E                     	;# 
  1519  019F                     	;# 
  1520  020C                     	;# 
  1521  020D                     	;# 
  1522  020E                     	;# 
  1523  0211                     	;# 
  1524  0211                     	;# 
  1525  0212                     	;# 
  1526  0212                     	;# 
  1527  0213                     	;# 
  1528  0213                     	;# 
  1529  0214                     	;# 
  1530  0214                     	;# 
  1531  0215                     	;# 
  1532  0215                     	;# 
  1533  0215                     	;# 
  1534  0216                     	;# 
  1535  0216                     	;# 
  1536  0217                     	;# 
  1537  0217                     	;# 
  1538  0219                     	;# 
  1539  021A                     	;# 
  1540  021B                     	;# 
  1541  021C                     	;# 
  1542  021D                     	;# 
  1543  021E                     	;# 
  1544  021F                     	;# 
  1545  0291                     	;# 
  1546  0291                     	;# 
  1547  0292                     	;# 
  1548  0293                     	;# 
  1549  0294                     	;# 
  1550  0295                     	;# 
  1551  0295                     	;# 
  1552  0296                     	;# 
  1553  0298                     	;# 
  1554  0298                     	;# 
  1555  0299                     	;# 
  1556  029A                     	;# 
  1557  029B                     	;# 
  1558  029C                     	;# 
  1559  029D                     	;# 
  1560  029E                     	;# 
  1561  0311                     	;# 
  1562  0311                     	;# 
  1563  0312                     	;# 
  1564  0313                     	;# 
  1565  0318                     	;# 
  1566  0318                     	;# 
  1567  0319                     	;# 
  1568  031A                     	;# 
  1569  038C                     	;# 
  1570  038D                     	;# 
  1571  038E                     	;# 
  1572  0391                     	;# 
  1573  0392                     	;# 
  1574  0393                     	;# 
  1575  0394                     	;# 
  1576  0395                     	;# 
  1577  0396                     	;# 
  1578  039A                     	;# 
  1579  039C                     	;# 
  1580  039D                     	;# 
  1581  039E                     	;# 
  1582  039F                     	;# 
  1583  0415                     	;# 
  1584  0416                     	;# 
  1585  0417                     	;# 
  1586  041C                     	;# 
  1587  041D                     	;# 
  1588  041E                     	;# 
  1589  0FE4                     	;# 
  1590  0FE5                     	;# 
  1591  0FE6                     	;# 
  1592  0FE7                     	;# 
  1593  0FE8                     	;# 
  1594  0FE9                     	;# 
  1595  0FEA                     	;# 
  1596  0FEB                     	;# 
  1597  0FED                     	;# 
  1598  0FEE                     	;# 
  1599  0FEF                     	;# 
  1600  0000                     	;# 
  1601  0001                     	;# 
  1602  0002                     	;# 
  1603  0003                     	;# 
  1604  0004                     	;# 
  1605  0005                     	;# 
  1606  0006                     	;# 
  1607  0007                     	;# 
  1608  0008                     	;# 
  1609  0009                     	;# 
  1610  000A                     	;# 
  1611  000B                     	;# 
  1612  000C                     	;# 
  1613  000D                     	;# 
  1614  000E                     	;# 
  1615  0011                     	;# 
  1616  0012                     	;# 
  1617  0013                     	;# 
  1618  0014                     	;# 
  1619  0015                     	;# 
  1620  0016                     	;# 
  1621  0016                     	;# 
  1622  0017                     	;# 
  1623  0018                     	;# 
  1624  0019                     	;# 
  1625  001A                     	;# 
  1626  001B                     	;# 
  1627  001C                     	;# 
  1628  001E                     	;# 
  1629  001F                     	;# 
  1630  008C                     	;# 
  1631  008D                     	;# 
  1632  008E                     	;# 
  1633  0091                     	;# 
  1634  0092                     	;# 
  1635  0093                     	;# 
  1636  0094                     	;# 
  1637  0095                     	;# 
  1638  0096                     	;# 
  1639  0097                     	;# 
  1640  0098                     	;# 
  1641  0099                     	;# 
  1642  009A                     	;# 
  1643  009B                     	;# 
  1644  009B                     	;# 
  1645  009C                     	;# 
  1646  009D                     	;# 
  1647  009E                     	;# 
  1648  010C                     	;# 
  1649  010D                     	;# 
  1650  010E                     	;# 
  1651  0111                     	;# 
  1652  0112                     	;# 
  1653  0113                     	;# 
  1654  0114                     	;# 
  1655  0115                     	;# 
  1656  0116                     	;# 
  1657  0117                     	;# 
  1658  0118                     	;# 
  1659  0119                     	;# 
  1660  011A                     	;# 
  1661  011B                     	;# 
  1662  011D                     	;# 
  1663  011E                     	;# 
  1664  018C                     	;# 
  1665  018D                     	;# 
  1666  018E                     	;# 
  1667  0191                     	;# 
  1668  0191                     	;# 
  1669  0192                     	;# 
  1670  0193                     	;# 
  1671  0193                     	;# 
  1672  0193                     	;# 
  1673  0194                     	;# 
  1674  0195                     	;# 
  1675  0196                     	;# 
  1676  0199                     	;# 
  1677  019A                     	;# 
  1678  019B                     	;# 
  1679  019B                     	;# 
  1680  019C                     	;# 
  1681  019D                     	;# 
  1682  019E                     	;# 
  1683  019F                     	;# 
  1684  020C                     	;# 
  1685  020D                     	;# 
  1686  020E                     	;# 
  1687  0211                     	;# 
  1688  0211                     	;# 
  1689  0212                     	;# 
  1690  0212                     	;# 
  1691  0213                     	;# 
  1692  0213                     	;# 
  1693  0214                     	;# 
  1694  0214                     	;# 
  1695  0215                     	;# 
  1696  0215                     	;# 
  1697  0215                     	;# 
  1698  0216                     	;# 
  1699  0216                     	;# 
  1700  0217                     	;# 
  1701  0217                     	;# 
  1702  0219                     	;# 
  1703  021A                     	;# 
  1704  021B                     	;# 
  1705  021C                     	;# 
  1706  021D                     	;# 
  1707  021E                     	;# 
  1708  021F                     	;# 
  1709  0291                     	;# 
  1710  0291                     	;# 
  1711  0292                     	;# 
  1712  0293                     	;# 
  1713  0294                     	;# 
  1714  0295                     	;# 
  1715  0295                     	;# 
  1716  0296                     	;# 
  1717  0298                     	;# 
  1718  0298                     	;# 
  1719  0299                     	;# 
  1720  029A                     	;# 
  1721  029B                     	;# 
  1722  029C                     	;# 
  1723  029D                     	;# 
  1724  029E                     	;# 
  1725  0311                     	;# 
  1726  0311                     	;# 
  1727  0312                     	;# 
  1728  0313                     	;# 
  1729  0318                     	;# 
  1730  0318                     	;# 
  1731  0319                     	;# 
  1732  031A                     	;# 
  1733  038C                     	;# 
  1734  038D                     	;# 
  1735  038E                     	;# 
  1736  0391                     	;# 
  1737  0392                     	;# 
  1738  0393                     	;# 
  1739  0394                     	;# 
  1740  0395                     	;# 
  1741  0396                     	;# 
  1742  039A                     	;# 
  1743  039C                     	;# 
  1744  039D                     	;# 
  1745  039E                     	;# 
  1746  039F                     	;# 
  1747  0415                     	;# 
  1748  0416                     	;# 
  1749  0417                     	;# 
  1750  041C                     	;# 
  1751  041D                     	;# 
  1752  041E                     	;# 
  1753  0FE4                     	;# 
  1754  0FE5                     	;# 
  1755  0FE6                     	;# 
  1756  0FE7                     	;# 
  1757  0FE8                     	;# 
  1758  0FE9                     	;# 
  1759  0FEA                     	;# 
  1760  0FEB                     	;# 
  1761  0FED                     	;# 
  1762  0FEE                     	;# 
  1763  0FEF                     	;# 
  1764                           
  1765                           	psect	idataCOMMON
  1766  07FF                     __pidataCOMMON:	
  1767                           
  1768                           ;initializer for _I2C_slaveWriteData
  1769  07FF  3455               	retlw	85
  1770                           
  1771                           	psect	idataBANK0
  1772  0002                     __pidataBANK0:	
  1773                           
  1774                           ;initializer for _tmr_scaler
  1775  0002  3401               	retlw	1
  1776                           
  1777                           ;initializer for _BACKPLANE_SLAVE_ADDRESS
  1778  0003  3401               	retlw	1
  1779                           
  1780                           	psect	idataBANK1
  1781  089E                     __pidataBANK1:	
  1782                           
  1783                           ;initializer for _type_no_data
  1784  089E  3406               	retlw	6
  1785                           
  1786                           	psect	stringtext
  1787  0630                     __pstringtext:	
  1788  0630                     _dpowers:	
  1789  0630  3401               	retlw	1
  1790  0631  3400               	retlw	0
  1791  0632  340A               	retlw	10
  1792  0633  3400               	retlw	0
  1793  0634  3464               	retlw	100
  1794  0635  3400               	retlw	0
  1795  0636  34E8               	retlw	232
  1796  0637  3403               	retlw	3
  1797  0638  3410               	retlw	16
  1798  0639  3427               	retlw	39
  1799  063A                     __end_of_dpowers:	
  1800  063A                     STR_36:	
  1801  063A  3449               	retlw	73	;'I'
  1802  063B  344C               	retlw	76	;'L'
  1803  063C  344C               	retlw	76	;'L'
  1804  063D  3445               	retlw	69	;'E'
  1805  063E  3447               	retlw	71	;'G'
  1806  063F  3441               	retlw	65	;'A'
  1807  0640  344C               	retlw	76	;'L'
  1808  0641  345F               	retlw	95	;'_'
  1809  0642  3454               	retlw	84	;'T'
  1810  0643  3459               	retlw	89	;'Y'
  1811  0644  3450               	retlw	80	;'P'
  1812  0645  3445               	retlw	69	;'E'
  1813  0646  340A               	retlw	10
  1814  0647  3400               	retlw	0
  1815  0648                     STR_1:	
  1816  0648  344B               	retlw	75	;'K'
  1817  0649  3458               	retlw	88	;'X'
  1818  064A  3452               	retlw	82	;'R'
  1819  064B  3439               	retlw	57	;'9'
  1820  064C  3434               	retlw	52	;'4'
  1821  064D  342D               	retlw	45	;'-'
  1822  064E  3432               	retlw	50	;'2'
  1823  064F  3430               	retlw	48	;'0'
  1824  0650  3435               	retlw	53	;'5'
  1825  0651  3430               	retlw	48	;'0'
  1826  0652  3400               	retlw	0
  1827  0653                     STR_16:	
  1828  0653  3424               	retlw	36	;'$'
  1829  0654  343A               	retlw	58	;':'
  1830  0655  3452               	retlw	82	;'R'
  1831  0656  3444               	retlw	68	;'D'
  1832  0657  3441               	retlw	65	;'A'
  1833  0658  343A               	retlw	58	;':'
  1834  0659  3425               	retlw	37	;'%'
  1835  065A  3464               	retlw	100	;'d'
  1836  065B  340A               	retlw	10
  1837  065C  3400               	retlw	0
  1838  065D                     STR_13:	
  1839  065D  3424               	retlw	36	;'$'
  1840  065E  343A               	retlw	58	;':'
  1841  065F  3447               	retlw	71	;'G'
  1842  0660  3445               	retlw	69	;'E'
  1843  0661  3454               	retlw	84	;'T'
  1844  0662  343A               	retlw	58	;':'
  1845  0663  3425               	retlw	37	;'%'
  1846  0664  3464               	retlw	100	;'d'
  1847  0665  340A               	retlw	10
  1848  0666  3400               	retlw	0
  1849  0667                     STR_34:	
  1850  0667  342D               	retlw	45	;'-'
  1851  0668  3425               	retlw	37	;'%'
  1852  0669  3464               	retlw	100	;'d'
  1853  066A  342E               	retlw	46	;'.'
  1854  066B  3425               	retlw	37	;'%'
  1855  066C  3430               	retlw	48	;'0'
  1856  066D  3432               	retlw	50	;'2'
  1857  066E  3464               	retlw	100	;'d'
  1858  066F  340A               	retlw	10
  1859  0670  3400               	retlw	0
  1860  0671                     STR_5:	
  1861  0671  3424               	retlw	36	;'$'
  1862  0672  343A               	retlw	58	;':'
  1863  0673  3457               	retlw	87	;'W'
  1864  0674  3448               	retlw	72	;'H'
  1865  0675  344F               	retlw	79	;'O'
  1866  0676  343A               	retlw	58	;':'
  1867  0677  3425               	retlw	37	;'%'
  1868  0678  3473               	retlw	115	;'s'
  1869  0679  340A               	retlw	10
  1870  067A  3400               	retlw	0
  1871  067B                     STR_9:	
  1872  067B  342A               	retlw	42	;'*'
  1873  067C  343A               	retlw	58	;':'
  1874  067D  3453               	retlw	83	;'S'
  1875  067E  3454               	retlw	84	;'T'
  1876  067F  3450               	retlw	80	;'P'
  1877  0680  343A               	retlw	58	;':'
  1878  0681  3425               	retlw	37	;'%'
  1879  0682  3473               	retlw	115	;'s'
  1880  0683  340A               	retlw	10
  1881  0684  3400               	retlw	0
  1882  0685                     STR_32:	
  1883  0685  342D               	retlw	45	;'-'
  1884  0686  3425               	retlw	37	;'%'
  1885  0687  3464               	retlw	100	;'d'
  1886  0688  342E               	retlw	46	;'.'
  1887  0689  3425               	retlw	37	;'%'
  1888  068A  3430               	retlw	48	;'0'
  1889  068B  3432               	retlw	50	;'2'
  1890  068C  3464               	retlw	100	;'d'
  1891  068D  342C               	retlw	44	;','
  1892  068E  3400               	retlw	0
  1893  068F                     STR_24:	
  1894  068F  3455               	retlw	85	;'U'
  1895  0690  3449               	retlw	73	;'I'
  1896  0691  344E               	retlw	78	;'N'
  1897  0692  3454               	retlw	84	;'T'
  1898  0693  3431               	retlw	49	;'1'
  1899  0694  3436               	retlw	54	;'6'
  1900  0695  345F               	retlw	95	;'_'
  1901  0696  3454               	retlw	84	;'T'
  1902  0697  343A               	retlw	58	;':'
  1903  0698  3400               	retlw	0
  1904  0699                     STR_35:	
  1905  0699  344E               	retlw	78	;'N'
  1906  069A  344F               	retlw	79	;'O'
  1907  069B  345F               	retlw	95	;'_'
  1908  069C  3444               	retlw	68	;'D'
  1909  069D  3441               	retlw	65	;'A'
  1910  069E  3454               	retlw	84	;'T'
  1911  069F  3441               	retlw	65	;'A'
  1912  06A0  340A               	retlw	10
  1913  06A1  3400               	retlw	0
  1914  06A2                     STR_18:	
  1915  06A2  3455               	retlw	85	;'U'
  1916  06A3  3449               	retlw	73	;'I'
  1917  06A4  344E               	retlw	78	;'N'
  1918  06A5  3454               	retlw	84	;'T'
  1919  06A6  3438               	retlw	56	;'8'
  1920  06A7  345F               	retlw	95	;'_'
  1921  06A8  3454               	retlw	84	;'T'
  1922  06A9  343A               	retlw	58	;':'
  1923  06AA  3400               	retlw	0
  1924  06AB                     STR_30:	
  1925  06AB  3446               	retlw	70	;'F'
  1926  06AC  344C               	retlw	76	;'L'
  1927  06AD  344F               	retlw	79	;'O'
  1928  06AE  3441               	retlw	65	;'A'
  1929  06AF  3454               	retlw	84	;'T'
  1930  06B0  343A               	retlw	58	;':'
  1931  06B1  3400               	retlw	0
  1932  06B2                     STR_2:	
  1933  06B2  3428               	retlw	40	;'('
  1934  06B3  346E               	retlw	110	;'n'
  1935  06B4  3475               	retlw	117	;'u'
  1936  06B5  346C               	retlw	108	;'l'
  1937  06B6  346C               	retlw	108	;'l'
  1938  06B7  3429               	retlw	41	;')'
  1939  06B8  3400               	retlw	0
  1940  06B9                     STR_17:	
  1941  06B9  3425               	retlw	37	;'%'
  1942  06BA  3425               	retlw	37	;'%'
  1943  06BB  3425               	retlw	37	;'%'
  1944  06BC  3464               	retlw	100	;'d'
  1945  06BD  343A               	retlw	58	;':'
  1946  06BE  3400               	retlw	0
  1947  06BF                     STR_3:	
  1948  06BF  3423               	retlw	35	;'#'
  1949  06C0  3425               	retlw	37	;'%'
  1950  06C1  3473               	retlw	115	;'s'
  1951  06C2  340A               	retlw	10
  1952  06C3  3400               	retlw	0
  1953  06C4                     STR_20:	
  1954  06C4  3425               	retlw	37	;'%'
  1955  06C5  3475               	retlw	117	;'u'
  1956  06C6  340A               	retlw	10
  1957  06C7  3400               	retlw	0
  1958  06C8                     STR_22:	
  1959  06C8  3425               	retlw	37	;'%'
  1960  06C9  3464               	retlw	100	;'d'
  1961  06CA  342C               	retlw	44	;','
  1962  06CB  3400               	retlw	0
  1963  06CC                     STR_19:	
  1964  06CC  3425               	retlw	37	;'%'
  1965  06CD  3475               	retlw	117	;'u'
  1966  06CE  342C               	retlw	44	;','
  1967  06CF  3400               	retlw	0
  1968  06D0                     STR_15:	
  1969  06D0  3452               	retlw	82	;'R'
  1970  06D1  3444               	retlw	68	;'D'
  1971  06D2  3441               	retlw	65	;'A'
  1972  06D3  3400               	retlw	0
  1973  06D4                     STR_14:	
  1974  06D4  3457               	retlw	87	;'W'
  1975  06D5  3444               	retlw	68	;'D'
  1976  06D6  3441               	retlw	65	;'A'
  1977  06D7  3400               	retlw	0
  1978  06D8                     STR_7:	
  1979  06D8  3453               	retlw	83	;'S'
  1980  06D9  3454               	retlw	84	;'T'
  1981  06DA  3441               	retlw	65	;'A'
  1982  06DB  3400               	retlw	0
  1983  06DC                     STR_10:	
  1984  06DC  3441               	retlw	65	;'A'
  1985  06DD  3443               	retlw	67	;'C'
  1986  06DE  344B               	retlw	75	;'K'
  1987  06DF  3400               	retlw	0
  1988  06E0                     STR_4:	
  1989  06E0  3457               	retlw	87	;'W'
  1990  06E1  3448               	retlw	72	;'H'
  1991  06E2  344F               	retlw	79	;'O'
  1992  06E3  3400               	retlw	0
  1993  06E4                     STR_8:	
  1994  06E4  3453               	retlw	83	;'S'
  1995  06E5  3454               	retlw	84	;'T'
  1996  06E6  3450               	retlw	80	;'P'
  1997  06E7  3400               	retlw	0
  1998  06E8                     STR_12:	
  1999  06E8  3447               	retlw	71	;'G'
  2000  06E9  3445               	retlw	69	;'E'
  2001  06EA  3454               	retlw	84	;'T'
  2002  06EB  3400               	retlw	0
  2003  06EC                     STR_11:	
  2004  06EC  3453               	retlw	83	;'S'
  2005  06ED  3445               	retlw	69	;'E'
  2006  06EE  3454               	retlw	84	;'T'
  2007  06EF  3400               	retlw	0
  2008  06F0                     STR_6:	
  2009  06F0  3453               	retlw	83	;'S'
  2010  06F1  3441               	retlw	65	;'A'
  2011  06F2  3456               	retlw	86	;'V'
  2012  06F3  3400               	retlw	0
  2013  0659                     
  2014                           ; #config settings
  2015  0000                     
  2016                           	psect	nvBANK1
  2017  00DA                     __pnvBANK1:	
  2018  00DA                     _device_id_:	
  2019  00DA                     	ds	2
  2020  00DC                     _PROTOCOL_Set_Handler:	
  2021  00DC                     	ds	2
  2022  00DE                     _PROTOCOL_Stop_Handler:	
  2023  00DE                     	ds	2
  2024  00E0                     _PROTOCOL_Start_Handler:	
  2025  00E0                     	ds	2
  2026  0015                     _TMR0	set	21
  2027  000B                     _INTCONbits	set	11
  2028  0011                     _PIR1bits	set	17
  2029  005A                     _TMR0IF	set	90
  2030  0095                     _OPTION_REG	set	149
  2031  009D                     _ADCON0bits	set	157
  2032  009C                     _ADRESH	set	156
  2033  009B                     _ADRESL	set	155
  2034  009E                     _ADCON1	set	158
  2035  009D                     _ADCON0	set	157
  2036  0095                     _OPTION_REGbits	set	149
  2037  008E                     _TRISC	set	142
  2038  008D                     _TRISB	set	141
  2039  008C                     _TRISA	set	140
  2040  0097                     _WDTCON	set	151
  2041  0098                     _OSCTUNE	set	152
  2042  0099                     _OSCCON	set	153
  2043  0091                     _PIE1bits	set	145
  2044  04D6                     _PLLR	set	1238
  2045  010E                     _LATCbits	set	270
  2046  011D                     _APFCON0	set	285
  2047  011E                     _APFCON1	set	286
  2048  010E                     _LATC	set	270
  2049  010D                     _LATB	set	269
  2050  010C                     _LATA	set	268
  2051  0196                     _EECON2	set	406
  2052  0193                     _EEDATL	set	403
  2053  0194                     _EEDATH	set	404
  2054  0195                     _EECON1bits	set	405
  2055  0192                     _EEADRH	set	402
  2056  0191                     _EEADRL	set	401
  2057  018C                     _ANSELA	set	396
  2058  018D                     _ANSELB	set	397
  2059  018E                     _ANSELC	set	398
  2060  0199                     _RCREG	set	409
  2061  019D                     _RCSTAbits	set	413
  2062  019A                     _TXREG	set	410
  2063  019C                     _SPBRGH	set	412
  2064  019B                     _SPBRGL	set	411
  2065  019E                     _TXSTA	set	414
  2066  019D                     _RCSTA	set	413
  2067  019F                     _BAUDCON	set	415
  2068  020E                     _WPUC	set	526
  2069  020C                     _WPUA	set	524
  2070  020D                     _WPUB	set	525
  2071  0215                     _SSP1CON1bits	set	533
  2072  0216                     _SSP1CON2bits	set	534
  2073  0214                     _SSP1STATbits	set	532
  2074  0211                     _SSP1BUF	set	529
  2075  0212                     _SSP1ADD	set	530
  2076  0213                     _SSP1MSK	set	531
  2077  0217                     _SSP1CON3	set	535
  2078  0216                     _SSP1CON2	set	534
  2079  0215                     _SSP1CON1	set	533
  2080  0214                     _SSP1STAT	set	532
  2081                           
  2082                           	psect	cinit
  2083  0032                     start_initialization:	
  2084  0032                     __initialization:	
  2085                           
  2086                           ; Initialize objects allocated to COMMON
  2087  0032  3187  27FF  3180   	fcall	__pidataCOMMON	;fetch initializer
  2088  0035  00FD               	movwf	__pdataCOMMON& (0+127)
  2089                           
  2090                           ; Initialize objects allocated to BANK0
  2091  0036  3180  2002  3180   	fcall	__pidataBANK0	;fetch initializer
  2092  0039  00EE               	movwf	__pdataBANK0& (0+127)
  2093  003A  3180  2003  3180   	fcall	__pidataBANK0+1	;fetch initializer
  2094  003D  00EF               	movwf	(__pdataBANK0+1)& (0+127)
  2095                           
  2096                           ; Initialize objects allocated to BANK1
  2097  003E  0021               	movlb	1	; select bank1
  2098  003F  3188  209E  3180   	fcall	__pidataBANK1	;fetch initializer
  2099  0042  00E2               	movwf	__pdataBANK1& (0+127)
  2100                           
  2101                           ; Clear objects allocated to COMMON
  2102  0043  01FA               	clrf	__pbssCOMMON& (0+127)
  2103  0044  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
  2104  0045  01FC               	clrf	(__pbssCOMMON+2)& (0+127)
  2105                           
  2106                           ; Clear objects allocated to BANK0
  2107  0046  305C               	movlw	low __pbssBANK0
  2108  0047  0084               	movwf	4
  2109  0048  3000               	movlw	high __pbssBANK0
  2110  0049  0085               	movwf	5
  2111  004A  3012               	movlw	18
  2112  004B  3188  20D2  3180   	fcall	clear_ram0
  2113                           
  2114                           ; Clear objects allocated to BANK1
  2115  004E  30A0               	movlw	low __pbssBANK1
  2116  004F  0084               	movwf	4
  2117  0050  3000               	movlw	high __pbssBANK1
  2118  0051  0085               	movwf	5
  2119  0052  303A               	movlw	58
  2120  0053  3188  20D2  3180   	fcall	clear_ram0
  2121                           
  2122                           ; Clear objects allocated to BANK2
  2123  0056  3020               	movlw	low __pbssBANK2
  2124  0057  0084               	movwf	4
  2125  0058  3001               	movlw	high __pbssBANK2
  2126  0059  0085               	movwf	5
  2127  005A  3030               	movlw	48
  2128  005B  3188  20D2  3180   	fcall	clear_ram0
  2129                           
  2130                           ; Clear objects allocated to BANK3
  2131  005E  30A0               	movlw	low __pbssBANK3
  2132  005F  0084               	movwf	4
  2133  0060  3001               	movlw	high __pbssBANK3
  2134  0061  0085               	movwf	5
  2135  0062  3030               	movlw	48
  2136  0063  3188  20D2         	fcall	clear_ram0
  2137  0065                     end_of_initialization:	
  2138                           ;End of C runtime variable initialization code
  2139                           
  2140  0065                     __end_of__initialization:	
  2141  0065  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2142  0066  0020               	movlb	0
  2143  0067  318B  2B44         	ljmp	_main	;jump to C main() function
  2144                           
  2145                           	psect	bssCOMMON
  2146  007A                     __pbssCOMMON:	
  2147  007A                     _eusartTxBufferRemaining:	
  2148  007A                     	ds	1
  2149  007B                     _eusartTxTail:	
  2150  007B                     	ds	1
  2151  007C                     _eusartTxHead:	
  2152  007C                     	ds	1
  2153                           
  2154                           	psect	dataCOMMON
  2155  007D                     __pdataCOMMON:	
  2156  007D                     _I2C_slaveWriteData:	
  2157  007D                     	ds	1
  2158                           
  2159                           	psect	bssBANK0
  2160  005C                     __pbssBANK0:	
  2161  005C                     _j:	
  2162  005C                     	ds	1
  2163  005D                     _i:	
  2164  005D                     	ds	1
  2165  005E                     _tmr_cnt:	
  2166  005E                     	ds	1
  2167  005F                     _sec_cnt:	
  2168  005F                     	ds	1
  2169  0060                     _invoked:	
  2170  0060                     	ds	1
  2171  0061                     _running:	
  2172  0061                     	ds	1
  2173  0062                     _locked:	
  2174  0062                     	ds	1
  2175  0063                     _value:	
  2176  0063                     	ds	1
  2177  0064                     _cnt:	
  2178  0064                     	ds	1
  2179  0065                     _slave_address:	
  2180  0065                     	ds	1
  2181  0066                     _timer0ReloadVal:	
  2182  0066                     	ds	1
  2183  0067                     _eusartRxCount:	
  2184  0067                     	ds	1
  2185  0068                     _eusartRxTail:	
  2186  0068                     	ds	1
  2187  0069                     _eusartRxHead:	
  2188  0069                     	ds	1
  2189  006A                     I2C1_StatusCallback@ext_cnt:	
  2190  006A                     	ds	1
  2191  006B                     I2C1_StatusCallback@ext_len:	
  2192  006B                     	ds	1
  2193  006C                     I2C1_StatusCallback@next:	
  2194  006C                     	ds	1
  2195  006D                     I2C1_StatusCallback@slaveWriteType:	
  2196  006D                     	ds	1
  2197                           
  2198                           	psect	dataBANK0
  2199  006E                     __pdataBANK0:	
  2200  006E                     _tmr_scaler:	
  2201  006E                     	ds	1
  2202  006F                     _BACKPLANE_SLAVE_ADDRESS:	
  2203  006F                     	ds	1
  2204                           
  2205                           	psect	bssBANK1
  2206  00A0                     __pbssBANK1:	
  2207  00A0                     _eusartRxBuffer:	
  2208  00A0                     	ds	8
  2209  00A8                     _eusartTxBuffer:	
  2210  00A8                     	ds	8
  2211  00B0                     _float100:	
  2212  00B0                     	ds	2
  2213  00B2                     _PROTOCOL_Inv_Handler:	
  2214  00B2                     	ds	2
  2215  00B4                     _PROTOCOL_Extension_Handler:	
  2216  00B4                     	ds	2
  2217  00B6                     _PROTOCOL_Loop_Func:	
  2218  00B6                     	ds	2
  2219  00B8                     _data:	
  2220  00B8                     	ds	1
  2221  00B9                     _backplane_slave_enabled:	
  2222  00B9                     	ds	1
  2223  00BA                     _readbuf_status:	
  2224  00BA                     	ds	1
  2225  00BB                     _tmr_overflow:	
  2226  00BB                     	ds	1
  2227  00BC                     _sendbuf:	
  2228  00BC                     	ds	16
  2229  00CC                     _readbuf:	
  2230  00CC                     	ds	5
  2231  00D1                     PROTOCOL_Send_float@pbuf:	
  2232  00D1                     	ds	3
  2233  00D4                     PROTOCOL_Send_int16_t@pbuf:	
  2234  00D4                     	ds	2
  2235  00D6                     PROTOCOL_Send_uint16_t@pbuf:	
  2236  00D6                     	ds	2
  2237  00D8                     PROTOCOL_Send_int8_t@pbuf:	
  2238  00D8                     	ds	1
  2239  00D9                     PROTOCOL_Send_uint8_t@pbuf:	
  2240  00D9                     	ds	1
  2241                           
  2242                           	psect	dataBANK1
  2243  00E2                     __pdataBANK1:	
  2244  00E2                     _type_no_data:	
  2245  00E2                     	ds	1
  2246                           
  2247                           	psect	bssBANK2
  2248  0120                     __pbssBANK2:	
  2249  0120                     _buf:	
  2250  0120                     	ds	48
  2251                           
  2252                           	psect	bssBANK3
  2253  01A0                     __pbssBANK3:	
  2254  01A0                     I2C1_StatusCallback@ext_buf:	
  2255  01A0                     	ds	48
  2256                           
  2257                           	psect	clrtext
  2258  08D2                     clear_ram0:	
  2259                           ;	Called with FSR0 containing the base address, and
  2260                           ;	WREG with the size to clear
  2261                           
  2262  08D2  0064               	clrwdt	;clear the watchdog before getting into this loop
  2263  08D3                     clrloop0:	
  2264  08D3  0180               	clrf	0	;clear RAM location pointed to by FSR
  2265  08D4  3101               	addfsr 0,1
  2266  08D5  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2267  08D6  28D3               	goto	clrloop0	;have we reached the end yet?
  2268  08D7  3400               	retlw	0	;all done for this memory range, return
  2269                           
  2270                           	psect	cstackCOMMON
  2271  0070                     __pcstackCOMMON:	
  2272  0070                     ?_isdigit:	
  2273  0070                     ?_PROTOCOL_Read_Device_Address:	
  2274                           ; 1 bit 
  2275                           
  2276  0070                     ?_I2C1_StatusCallback:	
  2277                           ; 1 bytes @ 0x0
  2278                           
  2279  0070                     ?_PROTOCOL_SET:	
  2280                           ; 1 bytes @ 0x0
  2281                           
  2282  0070                     ?_PROTOCOL_STA:	
  2283                           ; 1 bytes @ 0x0
  2284                           
  2285  0070                     ?_PROTOCOL_STP:	
  2286                           ; 1 bytes @ 0x0
  2287                           
  2288  0070                     ?_PROTOCOL_SAV:	
  2289                           ; 1 bytes @ 0x0
  2290                           
  2291  0070                     ?_PROTOCOL_INV:	
  2292                           ; 1 bytes @ 0x0
  2293                           
  2294  0070                     ??_PROTOCOL_INV:	
  2295                           ; 1 bytes @ 0x0
  2296                           
  2297  0070                     ?_PROTOCOL_RST:	
  2298                           ; 1 bytes @ 0x0
  2299                           
  2300  0070                     ??_PROTOCOL_RST:	
  2301                           ; 1 bytes @ 0x0
  2302                           
  2303  0070                     ?_PROTOCOL_Backplane_Slave_Enabled:	
  2304                           ; 1 bytes @ 0x0
  2305                           
  2306  0070                     ??_PROTOCOL_Backplane_Slave_Enabled:	
  2307                           ; 1 bytes @ 0x0
  2308                           
  2309  0070                     ?_PROTOCOL_Read_Lock:	
  2310                           ; 1 bytes @ 0x0
  2311                           
  2312  0070                     ??_PROTOCOL_Read_Lock:	
  2313                           ; 1 bytes @ 0x0
  2314                           
  2315  0070                     ?_PROTOCOL_EXT:	
  2316                           ; 1 bytes @ 0x0
  2317                           
  2318  0070                     ?_PROTOCOL_I2C_WHO:	
  2319                           ; 1 bytes @ 0x0
  2320                           
  2321  0070                     ??_PROTOCOL_I2C_WHO:	
  2322                           ; 1 bytes @ 0x0
  2323                           
  2324  0070                     ?_PROTOCOL_I2C_SEN:	
  2325                           ; 1 bytes @ 0x0
  2326                           
  2327  0070                     ??_PROTOCOL_I2C_SEN:	
  2328                           ; 1 bytes @ 0x0
  2329                           
  2330  0070                     ?_PROTOCOL_I2C_GET:	
  2331                           ; 1 bytes @ 0x0
  2332                           
  2333  0070                     ??_PROTOCOL_I2C_GET:	
  2334                           ; 1 bytes @ 0x0
  2335                           
  2336  0070                     ?_PIN_MANAGER_Initialize:	
  2337                           ; 1 bytes @ 0x0
  2338                           
  2339  0070                     ?_OSCILLATOR_Initialize:	
  2340                           ; 1 bytes @ 0x0
  2341                           
  2342  0070                     ?_WDT_Initialize:	
  2343                           ; 1 bytes @ 0x0
  2344                           
  2345  0070                     ?_ADC_Initialize:	
  2346                           ; 1 bytes @ 0x0
  2347                           
  2348  0070                     ?_TMR0_Initialize:	
  2349                           ; 1 bytes @ 0x0
  2350                           
  2351  0070                     ?_EUSART_Initialize:	
  2352                           ; 1 bytes @ 0x0
  2353                           
  2354  0070                     ?_EUSART_Transmit_ISR:	
  2355                           ; 1 bytes @ 0x0
  2356                           
  2357  0070                     ??_EUSART_Transmit_ISR:	
  2358                           ; 1 bytes @ 0x0
  2359                           
  2360  0070                     ?_EUSART_Receive_ISR:	
  2361                           ; 1 bytes @ 0x0
  2362                           
  2363  0070                     ??_EUSART_Receive_ISR:	
  2364                           ; 1 bytes @ 0x0
  2365                           
  2366  0070                     ?_PROTOCOL_Loop:	
  2367                           ; 1 bytes @ 0x0
  2368                           
  2369  0070                     ?_I2C1_Initialize:	
  2370                           ; 1 bytes @ 0x0
  2371                           
  2372  0070                     ?_I2C1_ISR:	
  2373                           ; 1 bytes @ 0x0
  2374                           
  2375  0070                     ?_INTERRUPT_InterruptManager:	
  2376                           ; 1 bytes @ 0x0
  2377                           
  2378  0070                     ?_EUSART_Read:	
  2379                           ; 1 bytes @ 0x0
  2380                           
  2381  0070                     ?_EUSART_Write:	
  2382                           ; 1 bytes @ 0x0
  2383                           
  2384  0070                     ?_putch:	
  2385                           ; 1 bytes @ 0x0
  2386                           
  2387  0070                     ?_DATAEE_ReadByte:	
  2388                           ; 1 bytes @ 0x0
  2389                           
  2390  0070                     ?_ADC_SelectChannel:	
  2391                           ; 1 bytes @ 0x0
  2392                           
  2393  0070                     ?_ADC_StartConversion:	
  2394                           ; 1 bytes @ 0x0
  2395                           
  2396  0070                     ?_ADC_IsConversionDone:	
  2397                           ; 1 bytes @ 0x0
  2398                           
  2399  0070                     ?_TMR0_HasOverflowOccured:	
  2400                           ; 1 bytes @ 0x0
  2401                           
  2402  0070                     ?_inv_handler:	
  2403                           ; 1 bytes @ 0x0
  2404                           
  2405  0070                     ?_main:	
  2406                           ; 1 bytes @ 0x0
  2407                           
  2408  0070                     ?_PROTOCOL_Write_Device_Address:	
  2409                           ; 1 bytes @ 0x0
  2410                           
  2411  0070                     ?i1_DATAEE_WriteByte:	
  2412                           ; 1 bytes @ 0x0
  2413                           
  2414  0070                     ?i1_PROTOCOL_STA:	
  2415                           ; 1 bytes @ 0x0
  2416                           
  2417  0070                     ??i1_PROTOCOL_STA:	
  2418                           ; 1 bytes @ 0x0
  2419                           
  2420  0070                     ?i1_PROTOCOL_STP:	
  2421                           ; 1 bytes @ 0x0
  2422                           
  2423  0070                     ??i1_PROTOCOL_STP:	
  2424                           ; 1 bytes @ 0x0
  2425                           
  2426  0070                     ?i1_PROTOCOL_SAV:	
  2427                           ; 1 bytes @ 0x0
  2428                           
  2429  0070                     ?i1_PROTOCOL_SET:	
  2430                           ; 1 bytes @ 0x0
  2431                           
  2432  0070                     ??i1_PROTOCOL_SET:	
  2433                           ; 1 bytes @ 0x0
  2434                           
  2435  0070                     ?i1_PROTOCOL_EXT:	
  2436                           ; 1 bytes @ 0x0
  2437                           
  2438  0070                     ??i1_PROTOCOL_EXT:	
  2439                           ; 1 bytes @ 0x0
  2440                           
  2441  0070                     i1DATAEE_WriteByte@bData:	
  2442                           ; 1 bytes @ 0x0
  2443                           
  2444                           
  2445                           ; 1 bytes @ 0x0
  2446  0070                     	ds	1
  2447  0071                     ??i1_DATAEE_WriteByte:	
  2448  0071                     PROTOCOL_I2C_SEN@pdata:	
  2449                           ; 1 bytes @ 0x1
  2450                           
  2451  0071                     i1DATAEE_WriteByte@bAdd:	
  2452                           ; 1 bytes @ 0x1
  2453                           
  2454  0071                     i1PROTOCOL_SET@value_:	
  2455                           ; 1 bytes @ 0x1
  2456                           
  2457                           
  2458                           ; 1 bytes @ 0x1
  2459  0071                     	ds	1
  2460  0072                     i1DATAEE_WriteByte@GIEBitValue:	
  2461                           
  2462                           ; 1 bytes @ 0x2
  2463  0072                     	ds	1
  2464  0073                     ??i1_PROTOCOL_SAV:	
  2465                           
  2466                           ; 1 bytes @ 0x3
  2467  0073                     	ds	1
  2468  0074                     ??_I2C1_StatusCallback:	
  2469                           
  2470                           ; 1 bytes @ 0x4
  2471  0074                     	ds	1
  2472  0075                     I2C1_StatusCallback@i2c_bus_state:	
  2473                           
  2474                           ; 1 bytes @ 0x5
  2475  0075                     	ds	1
  2476  0076                     I2C1_StatusCallback@pdata:	
  2477                           
  2478                           ; 1 bytes @ 0x6
  2479  0076                     	ds	1
  2480  0077                     ??_I2C1_ISR:	
  2481                           
  2482                           ; 1 bytes @ 0x7
  2483  0077                     	ds	1
  2484  0078                     I2C1_ISR@i2c_data:	
  2485                           
  2486                           ; 1 bytes @ 0x8
  2487  0078                     	ds	1
  2488  0079                     ??_INTERRUPT_InterruptManager:	
  2489                           
  2490                           ; 1 bytes @ 0x9
  2491  0079                     	ds	1
  2492                           
  2493                           	psect	cstackBANK0
  2494  0020                     __pcstackBANK0:	
  2495  0020                     ??_PROTOCOL_Read_Device_Address:	
  2496  0020                     ??_PROTOCOL_SET:	
  2497                           ; 1 bytes @ 0x0
  2498                           
  2499  0020                     ??_PROTOCOL_STA:	
  2500                           ; 1 bytes @ 0x0
  2501                           
  2502  0020                     ??_PROTOCOL_STP:	
  2503                           ; 1 bytes @ 0x0
  2504                           
  2505  0020                     ??_PROTOCOL_EXT:	
  2506                           ; 1 bytes @ 0x0
  2507                           
  2508  0020                     ??_PIN_MANAGER_Initialize:	
  2509                           ; 1 bytes @ 0x0
  2510                           
  2511  0020                     ??_OSCILLATOR_Initialize:	
  2512                           ; 1 bytes @ 0x0
  2513                           
  2514  0020                     ??_WDT_Initialize:	
  2515                           ; 1 bytes @ 0x0
  2516                           
  2517  0020                     ??_ADC_Initialize:	
  2518                           ; 1 bytes @ 0x0
  2519                           
  2520  0020                     ??_TMR0_Initialize:	
  2521                           ; 1 bytes @ 0x0
  2522                           
  2523  0020                     ??_EUSART_Initialize:	
  2524                           ; 1 bytes @ 0x0
  2525                           
  2526  0020                     ??_isdigit:	
  2527                           ; 1 bytes @ 0x0
  2528                           
  2529  0020                     ??_I2C1_Initialize:	
  2530                           ; 1 bytes @ 0x0
  2531                           
  2532  0020                     ??_EUSART_Read:	
  2533                           ; 1 bytes @ 0x0
  2534                           
  2535  0020                     ??_EUSART_Write:	
  2536                           ; 1 bytes @ 0x0
  2537                           
  2538  0020                     ?_DATAEE_WriteByte:	
  2539                           ; 1 bytes @ 0x0
  2540                           
  2541  0020                     ??_DATAEE_ReadByte:	
  2542                           ; 1 bytes @ 0x0
  2543                           
  2544  0020                     ??_ADC_SelectChannel:	
  2545                           ; 1 bytes @ 0x0
  2546                           
  2547  0020                     ??_ADC_StartConversion:	
  2548                           ; 1 bytes @ 0x0
  2549                           
  2550  0020                     ??_ADC_IsConversionDone:	
  2551                           ; 1 bytes @ 0x0
  2552                           
  2553  0020                     ??_TMR0_HasOverflowOccured:	
  2554                           ; 1 bytes @ 0x0
  2555                           
  2556  0020                     ?_PROTOCOL_I2C_Set_TLV:	
  2557                           ; 1 bytes @ 0x0
  2558                           
  2559  0020                     ?___bmul:	
  2560                           ; 1 bytes @ 0x0
  2561                           
  2562  0020                     ?_strncmp:	
  2563                           ; 1 bytes @ 0x0
  2564                           
  2565  0020                     ?_ADC_GetConversionResult:	
  2566                           ; 2 bytes @ 0x0
  2567                           
  2568  0020                     ?___wmul:	
  2569                           ; 2 bytes @ 0x0
  2570                           
  2571  0020                     ?___awdiv:	
  2572                           ; 2 bytes @ 0x0
  2573                           
  2574  0020                     ?___awmod:	
  2575                           ; 2 bytes @ 0x0
  2576                           
  2577  0020                     ?___lwdiv:	
  2578                           ; 2 bytes @ 0x0
  2579                           
  2580  0020                     ?___ftpack:	
  2581                           ; 2 bytes @ 0x0
  2582                           
  2583  0020                     DATAEE_WriteByte@bData:	
  2584                           ; 3 bytes @ 0x0
  2585                           
  2586  0020                     DATAEE_ReadByte@bAdd:	
  2587                           ; 1 bytes @ 0x0
  2588                           
  2589  0020                     PROTOCOL_EXT@char_buf:	
  2590                           ; 1 bytes @ 0x0
  2591                           
  2592  0020                     PROTOCOL_I2C_Set_TLV@length:	
  2593                           ; 1 bytes @ 0x0
  2594                           
  2595  0020                     ___bmul@multiplicand:	
  2596                           ; 1 bytes @ 0x0
  2597                           
  2598  0020                     _isdigit$1239:	
  2599                           ; 1 bytes @ 0x0
  2600                           
  2601  0020                     ___wmul@multiplier:	
  2602                           ; 1 bytes @ 0x0
  2603                           
  2604  0020                     ___awdiv@divisor:	
  2605                           ; 2 bytes @ 0x0
  2606                           
  2607  0020                     ___awmod@divisor:	
  2608                           ; 2 bytes @ 0x0
  2609                           
  2610  0020                     ___lwdiv@divisor:	
  2611                           ; 2 bytes @ 0x0
  2612                           
  2613  0020                     strncmp@s1:	
  2614                           ; 2 bytes @ 0x0
  2615                           
  2616  0020                     ___ftpack@arg:	
  2617                           ; 2 bytes @ 0x0
  2618                           
  2619                           
  2620                           ; 3 bytes @ 0x0
  2621  0020                     	ds	1
  2622  0021                     ?_PROTOCOL_Initialize:	
  2623  0021                     ??_DATAEE_WriteByte:	
  2624                           ; 1 bytes @ 0x1
  2625                           
  2626  0021                     ??___bmul:	
  2627                           ; 1 bytes @ 0x1
  2628                           
  2629  0021                     EUSART_Read@readValue:	
  2630                           ; 1 bytes @ 0x1
  2631                           
  2632  0021                     EUSART_Write@txData:	
  2633                           ; 1 bytes @ 0x1
  2634                           
  2635  0021                     DATAEE_WriteByte@bAdd:	
  2636                           ; 1 bytes @ 0x1
  2637                           
  2638  0021                     ADC_SelectChannel@channel:	
  2639                           ; 1 bytes @ 0x1
  2640                           
  2641  0021                     PROTOCOL_SET@value_:	
  2642                           ; 1 bytes @ 0x1
  2643                           
  2644  0021                     PROTOCOL_I2C_Set_TLV@pbuffer:	
  2645                           ; 1 bytes @ 0x1
  2646                           
  2647  0021                     isdigit@c:	
  2648                           ; 1 bytes @ 0x1
  2649                           
  2650  0021                     PROTOCOL_Initialize@device_id:	
  2651                           ; 1 bytes @ 0x1
  2652                           
  2653                           
  2654                           ; 2 bytes @ 0x1
  2655  0021                     	ds	1
  2656  0022                     ??_putch:	
  2657  0022                     ??_ADC_GetConversionResult:	
  2658                           ; 1 bytes @ 0x2
  2659                           
  2660  0022                     ??_PROTOCOL_I2C_Set_TLV:	
  2661                           ; 1 bytes @ 0x2
  2662                           
  2663  0022                     putch@txData:	
  2664                           ; 1 bytes @ 0x2
  2665                           
  2666  0022                     DATAEE_WriteByte@GIEBitValue:	
  2667                           ; 1 bytes @ 0x2
  2668                           
  2669  0022                     ___bmul@product:	
  2670                           ; 1 bytes @ 0x2
  2671                           
  2672  0022                     strncmp@s2:	
  2673                           ; 1 bytes @ 0x2
  2674                           
  2675  0022                     ___wmul@multiplicand:	
  2676                           ; 1 bytes @ 0x2
  2677                           
  2678  0022                     ___awdiv@dividend:	
  2679                           ; 2 bytes @ 0x2
  2680                           
  2681  0022                     ___awmod@dividend:	
  2682                           ; 2 bytes @ 0x2
  2683                           
  2684  0022                     ___lwdiv@dividend:	
  2685                           ; 2 bytes @ 0x2
  2686                           
  2687                           
  2688                           ; 2 bytes @ 0x2
  2689  0022                     	ds	1
  2690  0023                     ??_PROTOCOL_SAV:	
  2691  0023                     ??_PROTOCOL_Write_Device_Address:	
  2692                           ; 1 bytes @ 0x3
  2693                           
  2694  0023                     PROTOCOL_Initialize@start_handler:	
  2695                           ; 1 bytes @ 0x3
  2696                           
  2697  0023                     PROTOCOL_I2C_Set_TLV@type:	
  2698                           ; 1 bytes @ 0x3
  2699                           
  2700  0023                     ___bmul@multiplier:	
  2701                           ; 1 bytes @ 0x3
  2702                           
  2703  0023                     ___ftpack@exp:	
  2704                           ; 1 bytes @ 0x3
  2705                           
  2706  0023                     strncmp@len:	
  2707                           ; 1 bytes @ 0x3
  2708                           
  2709                           
  2710                           ; 2 bytes @ 0x3
  2711  0023                     	ds	1
  2712  0024                     ??___wmul:	
  2713  0024                     ??___awdiv:	
  2714                           ; 1 bytes @ 0x4
  2715                           
  2716  0024                     ??___awmod:	
  2717                           ; 1 bytes @ 0x4
  2718                           
  2719  0024                     ??___lwdiv:	
  2720                           ; 1 bytes @ 0x4
  2721                           
  2722  0024                     PROTOCOL_Initialize@stop_handler:	
  2723                           ; 1 bytes @ 0x4
  2724                           
  2725  0024                     PROTOCOL_Write_Device_Address@device_id_i2c:	
  2726                           ; 1 bytes @ 0x4
  2727                           
  2728  0024                     PROTOCOL_I2C_Set_TLV@status:	
  2729                           ; 1 bytes @ 0x4
  2730                           
  2731  0024                     ___ftpack@sign:	
  2732                           ; 1 bytes @ 0x4
  2733                           
  2734  0024                     ___wmul@product:	
  2735                           ; 1 bytes @ 0x4
  2736                           
  2737                           
  2738                           ; 2 bytes @ 0x4
  2739  0024                     	ds	1
  2740  0025                     ??_strncmp:	
  2741  0025                     ??___ftpack:	
  2742                           ; 1 bytes @ 0x5
  2743                           
  2744  0025                     PROTOCOL_Initialize@set_handler:	
  2745                           ; 1 bytes @ 0x5
  2746                           
  2747  0025                     ___awdiv@counter:	
  2748                           ; 1 bytes @ 0x5
  2749                           
  2750  0025                     ___awmod@counter:	
  2751                           ; 1 bytes @ 0x5
  2752                           
  2753  0025                     ___lwdiv@quotient:	
  2754                           ; 1 bytes @ 0x5
  2755                           
  2756                           
  2757                           ; 2 bytes @ 0x5
  2758  0025                     	ds	1
  2759  0026                     ?_atoi:	
  2760  0026                     ___awdiv@sign:	
  2761                           ; 2 bytes @ 0x6
  2762                           
  2763  0026                     ___awmod@sign:	
  2764                           ; 1 bytes @ 0x6
  2765                           
  2766  0026                     PROTOCOL_Initialize@inv_handler:	
  2767                           ; 1 bytes @ 0x6
  2768                           
  2769                           
  2770                           ; 2 bytes @ 0x6
  2771  0026                     	ds	1
  2772  0027                     ?_abs:	
  2773  0027                     ___lwdiv@counter:	
  2774                           ; 2 bytes @ 0x7
  2775                           
  2776  0027                     abs@a:	
  2777                           ; 1 bytes @ 0x7
  2778                           
  2779  0027                     ___awdiv@quotient:	
  2780                           ; 2 bytes @ 0x7
  2781                           
  2782                           
  2783                           ; 2 bytes @ 0x7
  2784  0027                     	ds	1
  2785  0028                     ??_atoi:	
  2786  0028                     ?___lwmod:	
  2787                           ; 1 bytes @ 0x8
  2788                           
  2789  0028                     ?___ftadd:	
  2790                           ; 2 bytes @ 0x8
  2791                           
  2792  0028                     ?___ftmul:	
  2793                           ; 3 bytes @ 0x8
  2794                           
  2795  0028                     ?___lwtoft:	
  2796                           ; 3 bytes @ 0x8
  2797                           
  2798  0028                     PROTOCOL_Initialize@scaler:	
  2799                           ; 3 bytes @ 0x8
  2800                           
  2801  0028                     ___lwmod@divisor:	
  2802                           ; 1 bytes @ 0x8
  2803                           
  2804  0028                     ___lwtoft@c:	
  2805                           ; 2 bytes @ 0x8
  2806                           
  2807  0028                     ___ftadd@f1:	
  2808                           ; 2 bytes @ 0x8
  2809                           
  2810  0028                     ___ftmul@f1:	
  2811                           ; 3 bytes @ 0x8
  2812                           
  2813                           
  2814                           ; 3 bytes @ 0x8
  2815  0028                     	ds	1
  2816  0029                     ??_PROTOCOL_Initialize:	
  2817  0029                     ??_abs:	
  2818                           ; 1 bytes @ 0x9
  2819                           
  2820                           
  2821                           ; 1 bytes @ 0x9
  2822  0029                     	ds	1
  2823  002A                     atoi@sign:	
  2824  002A                     ___lwmod@dividend:	
  2825                           ; 1 bytes @ 0xA
  2826                           
  2827                           
  2828                           ; 2 bytes @ 0xA
  2829  002A                     	ds	1
  2830  002B                     ??___lwtoft:	
  2831  002B                     atoi@a:	
  2832                           ; 1 bytes @ 0xB
  2833                           
  2834  002B                     ___ftadd@f2:	
  2835                           ; 2 bytes @ 0xB
  2836                           
  2837  002B                     ___ftmul@f2:	
  2838                           ; 3 bytes @ 0xB
  2839                           
  2840                           
  2841                           ; 3 bytes @ 0xB
  2842  002B                     	ds	1
  2843  002C                     ??___lwmod:	
  2844                           
  2845                           ; 1 bytes @ 0xC
  2846  002C                     	ds	1
  2847  002D                     atoi@s:	
  2848  002D                     ___lwmod@counter:	
  2849                           ; 1 bytes @ 0xD
  2850                           
  2851                           
  2852                           ; 1 bytes @ 0xD
  2853  002D                     	ds	1
  2854  002E                     ??___ftadd:	
  2855  002E                     ??___ftmul:	
  2856                           ; 1 bytes @ 0xE
  2857                           
  2858  002E                     ?_printf:	
  2859                           ; 1 bytes @ 0xE
  2860                           
  2861  002E                     printf@f:	
  2862                           ; 2 bytes @ 0xE
  2863                           
  2864                           
  2865                           ; 2 bytes @ 0xE
  2866  002E                     	ds	4
  2867  0032                     ___ftadd@sign:	
  2868  0032                     ___ftmul@exp:	
  2869                           ; 1 bytes @ 0x12
  2870                           
  2871                           
  2872                           ; 1 bytes @ 0x12
  2873  0032                     	ds	1
  2874  0033                     ___ftadd@exp2:	
  2875  0033                     ___ftmul@f3_as_product:	
  2876                           ; 1 bytes @ 0x13
  2877                           
  2878                           
  2879                           ; 3 bytes @ 0x13
  2880  0033                     	ds	1
  2881  0034                     ??_printf:	
  2882  0034                     ___ftadd@exp1:	
  2883                           ; 1 bytes @ 0x14
  2884                           
  2885                           
  2886                           ; 1 bytes @ 0x14
  2887  0034                     	ds	1
  2888  0035                     ?___ftdiv:	
  2889  0035                     ___ftdiv@f2:	
  2890                           ; 3 bytes @ 0x15
  2891                           
  2892                           
  2893                           ; 3 bytes @ 0x15
  2894  0035                     	ds	1
  2895  0036                     ___ftmul@cntr:	
  2896                           
  2897                           ; 1 bytes @ 0x16
  2898  0036                     	ds	1
  2899  0037                     ___ftmul@sign:	
  2900                           
  2901                           ; 1 bytes @ 0x17
  2902  0037                     	ds	1
  2903  0038                     ?___fttol:	
  2904  0038                     printf@prec:	
  2905                           ; 4 bytes @ 0x18
  2906                           
  2907  0038                     ___ftdiv@f1:	
  2908                           ; 1 bytes @ 0x18
  2909                           
  2910  0038                     ___fttol@f1:	
  2911                           ; 3 bytes @ 0x18
  2912                           
  2913                           
  2914                           ; 3 bytes @ 0x18
  2915  0038                     	ds	1
  2916  0039                     printf@cp:	
  2917                           
  2918                           ; 2 bytes @ 0x19
  2919  0039                     	ds	2
  2920  003B                     ??___ftdiv:	
  2921  003B                     printf@ap:	
  2922                           ; 1 bytes @ 0x1B
  2923                           
  2924                           
  2925                           ; 1 bytes @ 0x1B
  2926  003B                     	ds	1
  2927  003C                     ??___fttol:	
  2928  003C                     printf@val:	
  2929                           ; 1 bytes @ 0x1C
  2930                           
  2931                           
  2932                           ; 2 bytes @ 0x1C
  2933  003C                     	ds	2
  2934  003E                     printf@len:	
  2935                           
  2936                           ; 2 bytes @ 0x1E
  2937  003E                     	ds	1
  2938  003F                     ___ftdiv@cntr:	
  2939                           
  2940                           ; 1 bytes @ 0x1F
  2941  003F                     	ds	1
  2942  0040                     printf@flag:	
  2943  0040                     ___fttol@sign1:	
  2944                           ; 1 bytes @ 0x20
  2945                           
  2946  0040                     ___ftdiv@f3:	
  2947                           ; 1 bytes @ 0x20
  2948                           
  2949                           
  2950                           ; 3 bytes @ 0x20
  2951  0040                     	ds	1
  2952  0041                     printf@width:	
  2953  0041                     ___fttol@lval:	
  2954                           ; 2 bytes @ 0x21
  2955                           
  2956                           
  2957                           ; 4 bytes @ 0x21
  2958  0041                     	ds	2
  2959  0043                     printf@c:	
  2960  0043                     ___ftdiv@exp:	
  2961                           ; 1 bytes @ 0x23
  2962                           
  2963                           
  2964                           ; 1 bytes @ 0x23
  2965  0043                     	ds	1
  2966  0044                     ___ftdiv@sign:	
  2967                           
  2968                           ; 1 bytes @ 0x24
  2969  0044                     	ds	1
  2970  0045                     ?_get_accel:	
  2971  0045                     ___fttol@exp1:	
  2972                           ; 3 bytes @ 0x25
  2973                           
  2974                           
  2975                           ; 1 bytes @ 0x25
  2976  0045                     	ds	1
  2977  0046                     ?_PROTOCOL_I2C_Send_float:	
  2978  0046                     PROTOCOL_I2C_Send_float@pbuffer:	
  2979                           ; 1 bytes @ 0x26
  2980                           
  2981                           
  2982                           ; 1 bytes @ 0x26
  2983  0046                     	ds	1
  2984  0047                     ??_PROTOCOL_I2C_Send_float:	
  2985                           
  2986                           ; 1 bytes @ 0x27
  2987  0047                     	ds	2
  2988  0049                     ??_get_accel:	
  2989  0049                     PROTOCOL_I2C_Send_float@length:	
  2990                           ; 1 bytes @ 0x29
  2991                           
  2992  0049                     get_accel@steps:	
  2993                           ; 1 bytes @ 0x29
  2994                           
  2995                           
  2996                           ; 3 bytes @ 0x29
  2997  0049                     	ds	1
  2998  004A                     PROTOCOL_I2C_Send_float@v:	
  2999                           
  3000                           ; 2 bytes @ 0x2A
  3001  004A                     	ds	2
  3002  004C                     get_accel@ch:	
  3003                           
  3004                           ; 1 bytes @ 0x2C
  3005  004C                     	ds	1
  3006  004D                     ??_inv_handler:	
  3007                           
  3008                           ; 1 bytes @ 0x2D
  3009  004D                     	ds	1
  3010  004E                     inv_handler@values:	
  3011                           
  3012                           ; 9 bytes @ 0x2E
  3013  004E                     	ds	9
  3014  0057                     ??_PROTOCOL_Loop:	
  3015                           
  3016                           ; 1 bytes @ 0x37
  3017  0057                     	ds	2
  3018  0059                     PROTOCOL_Loop@c:	
  3019                           
  3020                           ; 1 bytes @ 0x39
  3021  0059                     	ds	1
  3022  005A                     PROTOCOL_Loop@device_address:	
  3023                           
  3024                           ; 1 bytes @ 0x3A
  3025  005A                     	ds	1
  3026  005B                     ??_main:	
  3027                           
  3028                           ; 1 bytes @ 0x3B
  3029  005B                     	ds	1
  3030                           
  3031                           	psect	maintext
  3032  0B44                     __pmaintext:	
  3033 ;;
  3034 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  3035 ;;
  3036 ;; *************** function _main *****************
  3037 ;; Defined at:
  3038 ;;		line 31 in file "main.c"
  3039 ;; Parameters:    Size  Location     Type
  3040 ;;		None
  3041 ;; Auto vars:     Size  Location     Type
  3042 ;;		None
  3043 ;; Return value:  Size  Location     Type
  3044 ;;                  1    wreg      void 
  3045 ;; Registers used:
  3046 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3047 ;; Tracked objects:
  3048 ;;		On entry : B1F/0
  3049 ;;		On exit  : 0/0
  3050 ;;		Unchanged: 0/0
  3051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3054 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3055 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3056 ;;Total ram usage:        1 bytes
  3057 ;; Hardware stack levels required when called:   11
  3058 ;; This function calls:
  3059 ;;		_ADC_Initialize
  3060 ;;		_EUSART_Initialize
  3061 ;;		_I2C1_Initialize
  3062 ;;		_OSCILLATOR_Initialize
  3063 ;;		_PIN_MANAGER_Initialize
  3064 ;;		_PROTOCOL_Initialize
  3065 ;;		_PROTOCOL_Loop
  3066 ;;		_TMR0_Initialize
  3067 ;;		_WDT_Initialize
  3068 ;; This function is called by:
  3069 ;;		Startup code after reset
  3070 ;; This function uses a non-reentrant model
  3071 ;;
  3072                           
  3073                           
  3074                           ;psect for function _main
  3075  0B44                     _main:	
  3076                           
  3077                           ;main.c: 34: PROTOCOL_Initialize("KXR94-2050", (0), (0), (0), inv_handler, 250);
  3078                           
  3079                           ;incstack = 0
  3080                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3081  0B44  3048               	movlw	low (STR_1| (0+32768))
  3082  0B45  0020               	movlb	0	; select bank0
  3083  0B46  00A1               	movwf	PROTOCOL_Initialize@device_id
  3084  0B47  3086               	movlw	high (STR_1| (0+32768))
  3085  0B48  00A2               	movwf	PROTOCOL_Initialize@device_id+1
  3086  0B49  01A3               	clrf	PROTOCOL_Initialize@start_handler
  3087  0B4A  01A4               	clrf	PROTOCOL_Initialize@stop_handler
  3088  0B4B  01A5               	clrf	PROTOCOL_Initialize@set_handler
  3089  0B4C  30A7               	movlw	low _inv_handler
  3090  0B4D  00A6               	movwf	PROTOCOL_Initialize@inv_handler
  3091  0B4E  300B               	movlw	high _inv_handler
  3092  0B4F  00A7               	movwf	PROTOCOL_Initialize@inv_handler+1
  3093  0B50  30FA               	movlw	250
  3094  0B51  00DB               	movwf	??_main
  3095  0B52  085B               	movf	??_main,w
  3096  0B53  00A8               	movwf	PROTOCOL_Initialize@scaler
  3097  0B54  318C  24A6  318B   	fcall	_PROTOCOL_Initialize
  3098                           
  3099                           ;main.c: 38: PIN_MANAGER_Initialize();
  3100  0B57  318A  222A  318B   	fcall	_PIN_MANAGER_Initialize
  3101                           
  3102                           ;main.c: 39: OSCILLATOR_Initialize();
  3103  0B5A  3188  20DF  318B   	fcall	_OSCILLATOR_Initialize
  3104                           
  3105                           ;main.c: 40: WDT_Initialize();
  3106  0B5D  3188  20C8  318B   	fcall	_WDT_Initialize
  3107                           
  3108                           ;main.c: 41: ADC_Initialize();
  3109  0B60  3188  20F4  318B   	fcall	_ADC_Initialize
  3110                           
  3111                           ;main.c: 42: TMR0_Initialize();
  3112  0B63  3189  212E  318B   	fcall	_TMR0_Initialize
  3113                           
  3114                           ;main.c: 43: EUSART_Initialize();
  3115  0B66  3189  21D6  318B   	fcall	_EUSART_Initialize
  3116                           
  3117                           ;main.c: 44: I2C1_Initialize();
  3118  0B69  318A  2288  318B   	fcall	_I2C1_Initialize
  3119                           
  3120                           ;main.c: 47: (INTCONbits.GIE = 1);
  3121  0B6C  178B               	bsf	11,7	;volatile
  3122                           
  3123                           ;main.c: 48: (INTCONbits.PEIE = 1);
  3124  0B6D  170B               	bsf	11,6	;volatile
  3125                           
  3126                           ;main.c: 51: PROTOCOL_Loop();
  3127  0B6E  3183  23BD         	fcall	_PROTOCOL_Loop
  3128  0B70  3180  2830         	ljmp	start
  3129  0B72                     __end_of_main:	
  3130                           
  3131                           	psect	text1
  3132  08C8                     __ptext1:	
  3133 ;; *************** function _WDT_Initialize *****************
  3134 ;; Defined at:
  3135 ;;		line 93 in file "mcc_generated_files/mcc.c"
  3136 ;; Parameters:    Size  Location     Type
  3137 ;;		None
  3138 ;; Auto vars:     Size  Location     Type
  3139 ;;		None
  3140 ;; Return value:  Size  Location     Type
  3141 ;;                  1    wreg      void 
  3142 ;; Registers used:
  3143 ;;		wreg
  3144 ;; Tracked objects:
  3145 ;;		On entry : 0/0
  3146 ;;		On exit  : 0/0
  3147 ;;		Unchanged: 0/0
  3148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3150 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3152 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3153 ;;Total ram usage:        0 bytes
  3154 ;; Hardware stack levels used:    1
  3155 ;; Hardware stack levels required when called:    5
  3156 ;; This function calls:
  3157 ;;		Nothing
  3158 ;; This function is called by:
  3159 ;;		_main
  3160 ;;		_SYSTEM_Initialize
  3161 ;; This function uses a non-reentrant model
  3162 ;;
  3163                           
  3164                           
  3165                           ;psect for function _WDT_Initialize
  3166  08C8                     _WDT_Initialize:	
  3167                           
  3168                           ;mcc.c: 96: WDTCON = 0x16;
  3169                           
  3170                           ;incstack = 0
  3171                           ; Regs used in _WDT_Initialize: [wreg]
  3172  08C8  3016               	movlw	22
  3173  08C9  0021               	movlb	1	; select bank1
  3174  08CA  0097               	movwf	23	;volatile
  3175  08CB  0008               	return
  3176  08CC                     __end_of_WDT_Initialize:	
  3177                           
  3178                           	psect	text2
  3179  092E                     __ptext2:	
  3180 ;; *************** function _TMR0_Initialize *****************
  3181 ;; Defined at:
  3182 ;;		line 62 in file "mcc_generated_files/tmr0.c"
  3183 ;; Parameters:    Size  Location     Type
  3184 ;;		None
  3185 ;; Auto vars:     Size  Location     Type
  3186 ;;		None
  3187 ;; Return value:  Size  Location     Type
  3188 ;;                  1    wreg      void 
  3189 ;; Registers used:
  3190 ;;		wreg, status,2
  3191 ;; Tracked objects:
  3192 ;;		On entry : 0/0
  3193 ;;		On exit  : 0/0
  3194 ;;		Unchanged: 0/0
  3195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3198 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3199 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3200 ;;Total ram usage:        1 bytes
  3201 ;; Hardware stack levels used:    1
  3202 ;; Hardware stack levels required when called:    5
  3203 ;; This function calls:
  3204 ;;		Nothing
  3205 ;; This function is called by:
  3206 ;;		_main
  3207 ;;		_SYSTEM_Initialize
  3208 ;; This function uses a non-reentrant model
  3209 ;;
  3210                           
  3211                           
  3212                           ;psect for function _TMR0_Initialize
  3213  092E                     _TMR0_Initialize:	
  3214                           
  3215                           ;tmr0.c: 67: OPTION_REG = (OPTION_REG & 0xC0) | 0xD7 & 0x3F;
  3216                           
  3217                           ;incstack = 0
  3218                           ; Regs used in _TMR0_Initialize: [wreg+status,2]
  3219  092E  0021               	movlb	1	; select bank1
  3220  092F  0815               	movf	21,w	;volatile
  3221  0930  39C0               	andlw	192
  3222  0931  3817               	iorlw	23
  3223  0932  0095               	movwf	21	;volatile
  3224                           
  3225                           ;tmr0.c: 70: TMR0 = 0x06;
  3226  0933  3006               	movlw	6
  3227  0934  0020               	movlb	0	; select bank0
  3228  0935  0095               	movwf	21	;volatile
  3229                           
  3230                           ;tmr0.c: 73: timer0ReloadVal= 6;
  3231  0936  3006               	movlw	6
  3232  0937  00A0               	movwf	??_TMR0_Initialize
  3233  0938  0820               	movf	??_TMR0_Initialize,w
  3234  0939  00E6               	movwf	_timer0ReloadVal	;volatile
  3235                           
  3236                           ;tmr0.c: 76: INTCONbits.TMR0IF = 0;
  3237  093A  110B               	bcf	11,2	;volatile
  3238  093B  0008               	return
  3239  093C                     __end_of_TMR0_Initialize:	
  3240                           
  3241                           	psect	text3
  3242  03BD                     __ptext3:	
  3243 ;; *************** function _PROTOCOL_Loop *****************
  3244 ;; Defined at:
  3245 ;;		line 131 in file "protocol.c"
  3246 ;; Parameters:    Size  Location     Type
  3247 ;;		None
  3248 ;; Auto vars:     Size  Location     Type
  3249 ;;  device_addre    1   58[BANK0 ] unsigned char 
  3250 ;;  c               1   57[BANK0 ] unsigned char 
  3251 ;; Return value:  Size  Location     Type
  3252 ;;                  1    wreg      void 
  3253 ;; Registers used:
  3254 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3255 ;; Tracked objects:
  3256 ;;		On entry : 0/0
  3257 ;;		On exit  : 0/0
  3258 ;;		Unchanged: 0/0
  3259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3261 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3262 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3263 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3264 ;;Total ram usage:        4 bytes
  3265 ;; Hardware stack levels used:    1
  3266 ;; Hardware stack levels required when called:   10
  3267 ;; This function calls:
  3268 ;;		Absolute function
  3269 ;;		_EUSART_Read
  3270 ;;		_PROTOCOL_EXT
  3271 ;;		_PROTOCOL_Read_Device_Address
  3272 ;;		_PROTOCOL_SAV
  3273 ;;		_PROTOCOL_SET
  3274 ;;		_PROTOCOL_STA
  3275 ;;		_PROTOCOL_STP
  3276 ;;		_PROTOCOL_Write_Device_Address
  3277 ;;		_TMR0_HasOverflowOccured
  3278 ;;		_atoi
  3279 ;;		_inv_handler
  3280 ;;		_printf
  3281 ;;		_strncmp
  3282 ;; This function is called by:
  3283 ;;		_main
  3284 ;; This function uses a non-reentrant model
  3285 ;;
  3286                           
  3287                           
  3288                           ;psect for function _PROTOCOL_Loop
  3289  03BD                     _PROTOCOL_Loop:	
  3290  03BD                     l628:	
  3291                           ;incstack = 0
  3292                           ; Regs used in _PROTOCOL_Loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3293                           ;protocol.c: 132: uint8_t device_address;
  3294                           ;protocol.c: 133: uint8_t c;
  3295                           ;protocol.c: 134: while (1) {
  3296                           
  3297                           
  3298                           ;protocol.c: 135: tmr_overflow = TMR0_HasOverflowOccured();
  3299  03BD  3188  20C4  3183   	fcall	_TMR0_HasOverflowOccured
  3300  03C0  0020               	movlb	0	; select bank0
  3301  03C1  00D7               	movwf	??_PROTOCOL_Loop
  3302  03C2  0857               	movf	??_PROTOCOL_Loop,w
  3303  03C3  0021               	movlb	1	; select bank1
  3304  03C4  00BB               	movwf	_tmr_overflow^(0+128)
  3305                           
  3306                           ;protocol.c: 136: if (tmr_overflow) {
  3307  03C5  083B               	movf	_tmr_overflow^(0+128),w
  3308  03C6  1903               	btfsc	3,2
  3309  03C7  2BE5               	goto	l3815
  3310                           
  3311                           ;protocol.c: 137: TMR0IF = 0;
  3312  03C8  110B               	bcf	11,2	;volatile
  3313                           
  3314                           ;protocol.c: 138: if (PROTOCOL_Inv_Handler && (++tmr_cnt >= value)) {
  3315  03C9  0832               	movf	_PROTOCOL_Inv_Handler^(0+128),w
  3316  03CA  0433               	iorwf	(_PROTOCOL_Inv_Handler+1)^(0+128),w
  3317  03CB  1903               	btfsc	3,2
  3318  03CC  2BE5               	goto	l3815
  3319  03CD  3001               	movlw	1
  3320  03CE  0020               	movlb	0	; select bank0
  3321  03CF  00D7               	movwf	??_PROTOCOL_Loop
  3322  03D0  0857               	movf	??_PROTOCOL_Loop,w
  3323  03D1  07DE               	addwf	_tmr_cnt,f
  3324  03D2  0863               	movf	_value,w
  3325  03D3  025E               	subwf	_tmr_cnt,w
  3326  03D4  1C03               	skipc
  3327  03D5  2BE5               	goto	l3815
  3328                           
  3329                           ;protocol.c: 139: tmr_cnt = 0;
  3330  03D6  01DE               	clrf	_tmr_cnt
  3331                           
  3332                           ;protocol.c: 140: if (++sec_cnt >= tmr_scaler) {
  3333  03D7  3001               	movlw	1
  3334  03D8  00D7               	movwf	??_PROTOCOL_Loop
  3335  03D9  0857               	movf	??_PROTOCOL_Loop,w
  3336  03DA  07DF               	addwf	_sec_cnt,f
  3337  03DB  086E               	movf	_tmr_scaler,w
  3338  03DC  025F               	subwf	_sec_cnt,w
  3339  03DD  1C03               	skipc
  3340  03DE  2BE5               	goto	l3815
  3341                           
  3342                           ;protocol.c: 141: if (running) invoked = 1;
  3343  03DF  0861               	movf	_running,w
  3344  03E0  1903               	btfsc	3,2
  3345  03E1  2BE4               	goto	l3813
  3346  03E2  01E0               	clrf	_invoked
  3347  03E3  0AE0               	incf	_invoked,f
  3348  03E4                     l3813:	
  3349                           
  3350                           ;protocol.c: 142: sec_cnt = 0;
  3351  03E4  01DF               	clrf	_sec_cnt
  3352  03E5                     l3815:	
  3353                           
  3354                           ;protocol.c: 143: }
  3355                           ;protocol.c: 144: }
  3356                           ;protocol.c: 145: }
  3357                           ;protocol.c: 146: if (invoked && PROTOCOL_Inv_Handler) {
  3358  03E5  0020               	movlb	0	; select bank0
  3359  03E6  0860               	movf	_invoked,w
  3360  03E7  1903               	btfsc	3,2
  3361  03E8  2BF5               	goto	l3825
  3362  03E9  0021               	movlb	1	; select bank1
  3363  03EA  0832               	movf	_PROTOCOL_Inv_Handler^(0+128),w
  3364  03EB  0433               	iorwf	(_PROTOCOL_Inv_Handler+1)^(0+128),w
  3365  03EC  1903               	btfsc	3,2
  3366  03ED  2BF5               	goto	l3825
  3367                           
  3368                           ;protocol.c: 147: PROTOCOL_Inv_Handler();
  3369  03EE  0833               	movf	(_PROTOCOL_Inv_Handler+1)^(0+128),w
  3370  03EF  008A               	movwf	10
  3371  03F0  0832               	movf	_PROTOCOL_Inv_Handler^(0+128),w
  3372  03F1  000A               	callw
  3373  03F2  3183               	pagesel	$
  3374                           
  3375                           ;protocol.c: 148: invoked = 0;
  3376  03F3  0020               	movlb	0	; select bank0
  3377  03F4  01E0               	clrf	_invoked
  3378  03F5                     l3825:	
  3379                           
  3380                           ;protocol.c: 151: if ((eusartRxCount)) {
  3381  03F5  0020               	movlb	0	; select bank0
  3382  03F6  0867               	movf	_eusartRxCount,w	;volatile
  3383  03F7  1903               	btfsc	3,2
  3384  03F8  2BBD               	goto	l628
  3385                           
  3386                           ;protocol.c: 152: c = EUSART_Read();
  3387  03F9  318A  2249  3183   	fcall	_EUSART_Read
  3388  03FC  0020               	movlb	0	; select bank0
  3389  03FD  00D7               	movwf	??_PROTOCOL_Loop
  3390  03FE  0857               	movf	??_PROTOCOL_Loop,w
  3391  03FF  00D9               	movwf	PROTOCOL_Loop@c
  3392                           
  3393                           ;protocol.c: 153: buf[cnt++] = c;
  3394  0400  0859               	movf	PROTOCOL_Loop@c,w
  3395  0401  00D7               	movwf	??_PROTOCOL_Loop
  3396  0402  0864               	movf	_cnt,w
  3397  0403  3E20               	addlw	(low (_buf| (0+256)))& (0+255)
  3398  0404  0086               	movwf	6
  3399  0405  3001               	movlw	1	; select bank2/3
  3400  0406  0087               	movwf	7
  3401  0407  0857               	movf	??_PROTOCOL_Loop,w
  3402  0408  0081               	movwf	1
  3403  0409  3001               	movlw	1
  3404  040A  00D7               	movwf	??_PROTOCOL_Loop
  3405  040B  0857               	movf	??_PROTOCOL_Loop,w
  3406  040C  07E4               	addwf	_cnt,f
  3407                           
  3408                           ;protocol.c: 154: if (c == '\n') {
  3409  040D  300A               	movlw	10
  3410  040E  0659               	xorwf	PROTOCOL_Loop@c,w
  3411  040F  1D03               	btfss	3,2
  3412  0410  2BBD               	goto	l628
  3413                           
  3414                           ;protocol.c: 155: buf[--cnt] = '\0';
  3415  0411  3001               	movlw	1
  3416  0412  02E4               	subwf	_cnt,f
  3417  0413  0864               	movf	_cnt,w
  3418  0414  3E20               	addlw	(low (_buf| (0+256)))& (0+255)
  3419  0415  0086               	movwf	6
  3420  0416  3001               	movlw	1	; select bank2/3
  3421  0417  0087               	movwf	7
  3422  0418  0181               	clrf	1
  3423                           
  3424                           ;protocol.c: 156: cnt = 0;
  3425  0419  01E4               	clrf	_cnt
  3426                           
  3427                           ;protocol.c: 157: printf("#%s\n", buf);
  3428  041A  30BF               	movlw	low (STR_3| (0+32768))
  3429  041B  00AE               	movwf	printf@f
  3430  041C  3086               	movlw	high (STR_3| (0+32768))
  3431  041D  00AF               	movwf	printf@f+1
  3432  041E  3020               	movlw	low _buf
  3433  041F  00B0               	movwf	low ((?_printf| 0+2))
  3434  0420  3001               	movlw	high _buf
  3435  0421  00B1               	movwf	(low ((?_printf| 0+2))+1)
  3436  0422  3180  2069  3183   	fcall	_printf
  3437                           
  3438                           ;protocol.c: 159: PROTOCOL_Extension_Handler(buf);
  3439  0425  0020               	movlb	0	; select bank0
  3440  0426  036F               	decf	_BACKPLANE_SLAVE_ADDRESS,w
  3441  0427  1D03               	btfss	3,2
  3442  0428  2BBD               	goto	l628
  3443                           
  3444                           ;protocol.c: 160: } else if (!strncmp(("WHO"), (buf), 3)) {
  3445  0429  30E0               	movlw	low (STR_4| (0+32768))
  3446  042A  00A0               	movwf	strncmp@s1
  3447  042B  3086               	movlw	high (STR_4| (0+32768))
  3448  042C  00A1               	movwf	strncmp@s1+1
  3449  042D  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3450  042E  00D7               	movwf	??_PROTOCOL_Loop
  3451  042F  0857               	movf	??_PROTOCOL_Loop,w
  3452  0430  00A2               	movwf	strncmp@s2
  3453  0431  3003               	movlw	3
  3454  0432  00A3               	movwf	strncmp@len
  3455  0433  3000               	movlw	0
  3456  0434  00A4               	movwf	strncmp@len+1
  3457  0435  318C  241E  3183   	fcall	_strncmp
  3458  0438  0020               	movlb	0	; select bank0
  3459  0439  0820               	movf	?_strncmp,w
  3460  043A  0421               	iorwf	?_strncmp+1,w
  3461  043B  1D03               	btfss	3,2
  3462  043C  2C4D               	goto	l3849
  3463                           
  3464                           ;protocol.c: 161: printf("$:WHO:%s\n", device_id_);
  3465  043D  3071               	movlw	low (STR_5| (0+32768))
  3466  043E  00AE               	movwf	printf@f
  3467  043F  3086               	movlw	high (STR_5| (0+32768))
  3468  0440  00AF               	movwf	printf@f+1
  3469  0441  0021               	movlb	1	; select bank1
  3470  0442  085B               	movf	(_device_id_+1)^(0+128),w
  3471  0443  0020               	movlb	0	; select bank0
  3472  0444  00B1               	movwf	(low ((?_printf| 0+2))+1)
  3473  0445  0021               	movlb	1	; select bank1
  3474  0446  085A               	movf	_device_id_^(0+128),w
  3475  0447  0020               	movlb	0	; select bank0
  3476  0448  00B0               	movwf	low ((?_printf| 0+2))
  3477  0449  3180  2069  3183   	fcall	_printf
  3478                           
  3479                           ;protocol.c: 162: } else if (!strncmp(("SAV"), (buf), 3)) {
  3480  044C  2BBD               	goto	l628
  3481  044D                     l3849:	
  3482  044D  30F0               	movlw	low (STR_6| (0+32768))
  3483  044E  0020               	movlb	0	; select bank0
  3484  044F  00A0               	movwf	strncmp@s1
  3485  0450  3086               	movlw	high (STR_6| (0+32768))
  3486  0451  00A1               	movwf	strncmp@s1+1
  3487  0452  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3488  0453  00D7               	movwf	??_PROTOCOL_Loop
  3489  0454  0857               	movf	??_PROTOCOL_Loop,w
  3490  0455  00A2               	movwf	strncmp@s2
  3491  0456  3003               	movlw	3
  3492  0457  00A3               	movwf	strncmp@len
  3493  0458  3000               	movlw	0
  3494  0459  00A4               	movwf	strncmp@len+1
  3495  045A  318C  241E  3183   	fcall	_strncmp
  3496  045D  0020               	movlb	0	; select bank0
  3497  045E  0820               	movf	?_strncmp,w
  3498  045F  0421               	iorwf	?_strncmp+1,w
  3499  0460  1D03               	btfss	3,2
  3500  0461  2C66               	goto	l3853
  3501                           
  3502                           ;protocol.c: 163: PROTOCOL_SAV();
  3503  0462  3189  2105  3183   	fcall	_PROTOCOL_SAV
  3504                           
  3505                           ;protocol.c: 164: } else if (!strncmp(("STA"), (buf), 3)) {
  3506  0465  2BBD               	goto	l628
  3507  0466                     l3853:	
  3508  0466  30D8               	movlw	low (STR_7| (0+32768))
  3509  0467  0020               	movlb	0	; select bank0
  3510  0468  00A0               	movwf	strncmp@s1
  3511  0469  3086               	movlw	high (STR_7| (0+32768))
  3512  046A  00A1               	movwf	strncmp@s1+1
  3513  046B  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3514  046C  00D7               	movwf	??_PROTOCOL_Loop
  3515  046D  0857               	movf	??_PROTOCOL_Loop,w
  3516  046E  00A2               	movwf	strncmp@s2
  3517  046F  3003               	movlw	3
  3518  0470  00A3               	movwf	strncmp@len
  3519  0471  3000               	movlw	0
  3520  0472  00A4               	movwf	strncmp@len+1
  3521  0473  318C  241E  3183   	fcall	_strncmp
  3522  0476  0020               	movlb	0	; select bank0
  3523  0477  0820               	movf	?_strncmp,w
  3524  0478  0421               	iorwf	?_strncmp+1,w
  3525  0479  1D03               	btfss	3,2
  3526  047A  2C7F               	goto	l3857
  3527                           
  3528                           ;protocol.c: 165: PROTOCOL_STA();
  3529  047B  3188  20C0  3183   	fcall	_PROTOCOL_STA
  3530                           
  3531                           ;protocol.c: 166: } else if (!strncmp(("STP"), (buf), 3)) {
  3532  047E  2BBD               	goto	l628
  3533  047F                     l3857:	
  3534  047F  30E4               	movlw	low (STR_8| (0+32768))
  3535  0480  0020               	movlb	0	; select bank0
  3536  0481  00A0               	movwf	strncmp@s1
  3537  0482  3086               	movlw	high (STR_8| (0+32768))
  3538  0483  00A1               	movwf	strncmp@s1+1
  3539  0484  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3540  0485  00D7               	movwf	??_PROTOCOL_Loop
  3541  0486  0857               	movf	??_PROTOCOL_Loop,w
  3542  0487  00A2               	movwf	strncmp@s2
  3543  0488  3003               	movlw	3
  3544  0489  00A3               	movwf	strncmp@len
  3545  048A  3000               	movlw	0
  3546  048B  00A4               	movwf	strncmp@len+1
  3547  048C  318C  241E  3183   	fcall	_strncmp
  3548  048F  0020               	movlb	0	; select bank0
  3549  0490  0820               	movf	?_strncmp,w
  3550  0491  0421               	iorwf	?_strncmp+1,w
  3551  0492  1D03               	btfss	3,2
  3552  0493  2CA4               	goto	l3863
  3553                           
  3554                           ;protocol.c: 167: PROTOCOL_STP();
  3555  0494  3188  20AE  3183   	fcall	_PROTOCOL_STP
  3556                           
  3557                           ;protocol.c: 168: printf("*:STP:%s\n", "ACK");
  3558  0497  307B               	movlw	low (STR_9| (0+32768))
  3559  0498  0020               	movlb	0	; select bank0
  3560  0499  00AE               	movwf	printf@f
  3561  049A  3086               	movlw	high (STR_9| (0+32768))
  3562  049B  00AF               	movwf	printf@f+1
  3563  049C  30DC               	movlw	low (STR_10| (0+32768))
  3564  049D  00B0               	movwf	low ((?_printf| 0+2))
  3565  049E  3086               	movlw	high (STR_10| (0+32768))
  3566  049F  00B1               	movwf	(low ((?_printf| 0+2))+1)
  3567  04A0  3180  2069  3183   	fcall	_printf
  3568                           
  3569                           ;protocol.c: 169: } else if (!strncmp(("SET"), (buf), 3)) {
  3570  04A3  2BBD               	goto	l628
  3571  04A4                     l3863:	
  3572  04A4  30EC               	movlw	low (STR_11| (0+32768))
  3573  04A5  0020               	movlb	0	; select bank0
  3574  04A6  00A0               	movwf	strncmp@s1
  3575  04A7  3086               	movlw	high (STR_11| (0+32768))
  3576  04A8  00A1               	movwf	strncmp@s1+1
  3577  04A9  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3578  04AA  00D7               	movwf	??_PROTOCOL_Loop
  3579  04AB  0857               	movf	??_PROTOCOL_Loop,w
  3580  04AC  00A2               	movwf	strncmp@s2
  3581  04AD  3003               	movlw	3
  3582  04AE  00A3               	movwf	strncmp@len
  3583  04AF  3000               	movlw	0
  3584  04B0  00A4               	movwf	strncmp@len+1
  3585  04B1  318C  241E  3183   	fcall	_strncmp
  3586  04B4  0020               	movlb	0	; select bank0
  3587  04B5  0820               	movf	?_strncmp,w
  3588  04B6  0421               	iorwf	?_strncmp+1,w
  3589  04B7  1D03               	btfss	3,2
  3590  04B8  2CC3               	goto	l3867
  3591                           
  3592                           ;protocol.c: 170: PROTOCOL_SET(atoi(&buf[4]));
  3593  04B9  3024               	movlw	(low ((_buf| (0+256)+4)))& (0+255)
  3594  04BA  318D  25AB  3183   	fcall	_atoi
  3595  04BD  0020               	movlb	0	; select bank0
  3596  04BE  0826               	movf	?_atoi,w
  3597  04BF  3188  20E6  3183   	fcall	_PROTOCOL_SET
  3598                           
  3599                           ;protocol.c: 171: } else if (!strncmp(("GET"), (buf), 3)) {
  3600  04C2  2BBD               	goto	l628
  3601  04C3                     l3867:	
  3602  04C3  30E8               	movlw	low (STR_12| (0+32768))
  3603  04C4  0020               	movlb	0	; select bank0
  3604  04C5  00A0               	movwf	strncmp@s1
  3605  04C6  3086               	movlw	high (STR_12| (0+32768))
  3606  04C7  00A1               	movwf	strncmp@s1+1
  3607  04C8  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3608  04C9  00D7               	movwf	??_PROTOCOL_Loop
  3609  04CA  0857               	movf	??_PROTOCOL_Loop,w
  3610  04CB  00A2               	movwf	strncmp@s2
  3611  04CC  3003               	movlw	3
  3612  04CD  00A3               	movwf	strncmp@len
  3613  04CE  3000               	movlw	0
  3614  04CF  00A4               	movwf	strncmp@len+1
  3615  04D0  318C  241E  3183   	fcall	_strncmp
  3616  04D3  0020               	movlb	0	; select bank0
  3617  04D4  0820               	movf	?_strncmp,w
  3618  04D5  0421               	iorwf	?_strncmp+1,w
  3619  04D6  1D03               	btfss	3,2
  3620  04D7  2CE7               	goto	l3871
  3621                           
  3622                           ;protocol.c: 172: printf("$:GET:%d\n", value);
  3623  04D8  305D               	movlw	low (STR_13| (0+32768))
  3624  04D9  00AE               	movwf	printf@f
  3625  04DA  3086               	movlw	high (STR_13| (0+32768))
  3626  04DB  00AF               	movwf	printf@f+1
  3627  04DC  0863               	movf	_value,w
  3628  04DD  00D7               	movwf	??_PROTOCOL_Loop
  3629  04DE  01D8               	clrf	??_PROTOCOL_Loop+1
  3630  04DF  0857               	movf	??_PROTOCOL_Loop,w
  3631  04E0  00B0               	movwf	?_printf+2
  3632  04E1  0858               	movf	??_PROTOCOL_Loop+1,w
  3633  04E2  00B1               	movwf	?_printf+3
  3634  04E3  3180  2069  3183   	fcall	_printf
  3635                           
  3636                           ;protocol.c: 173: } else if (!strncmp(("WDA"), (buf), 3)) {
  3637  04E6  2BBD               	goto	l628
  3638  04E7                     l3871:	
  3639  04E7  30D4               	movlw	low (STR_14| (0+32768))
  3640  04E8  0020               	movlb	0	; select bank0
  3641  04E9  00A0               	movwf	strncmp@s1
  3642  04EA  3086               	movlw	high (STR_14| (0+32768))
  3643  04EB  00A1               	movwf	strncmp@s1+1
  3644  04EC  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3645  04ED  00D7               	movwf	??_PROTOCOL_Loop
  3646  04EE  0857               	movf	??_PROTOCOL_Loop,w
  3647  04EF  00A2               	movwf	strncmp@s2
  3648  04F0  3003               	movlw	3
  3649  04F1  00A3               	movwf	strncmp@len
  3650  04F2  3000               	movlw	0
  3651  04F3  00A4               	movwf	strncmp@len+1
  3652  04F4  318C  241E  3183   	fcall	_strncmp
  3653  04F7  0020               	movlb	0	; select bank0
  3654  04F8  0820               	movf	?_strncmp,w
  3655  04F9  0421               	iorwf	?_strncmp+1,w
  3656  04FA  1D03               	btfss	3,2
  3657  04FB  2D0A               	goto	l3877
  3658                           
  3659                           ;protocol.c: 174: device_address = atoi(&buf[4]);
  3660  04FC  3024               	movlw	(low ((_buf| (0+256)+4)))& (0+255)
  3661  04FD  318D  25AB  3183   	fcall	_atoi
  3662  0500  0020               	movlb	0	; select bank0
  3663  0501  0826               	movf	?_atoi,w
  3664  0502  00D7               	movwf	??_PROTOCOL_Loop
  3665  0503  0857               	movf	??_PROTOCOL_Loop,w
  3666  0504  00DA               	movwf	PROTOCOL_Loop@device_address
  3667                           
  3668                           ;protocol.c: 175: PROTOCOL_Write_Device_Address(device_address);
  3669  0505  085A               	movf	PROTOCOL_Loop@device_address,w
  3670  0506  3189  213C  3183   	fcall	_PROTOCOL_Write_Device_Address
  3671                           
  3672                           ;protocol.c: 176: } else if (!strncmp(("RDA"), (buf), 3)) {
  3673  0509  2BBD               	goto	l628
  3674  050A                     l3877:	
  3675  050A  30D0               	movlw	low (STR_15| (0+32768))
  3676  050B  0020               	movlb	0	; select bank0
  3677  050C  00A0               	movwf	strncmp@s1
  3678  050D  3086               	movlw	high (STR_15| (0+32768))
  3679  050E  00A1               	movwf	strncmp@s1+1
  3680  050F  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3681  0510  00D7               	movwf	??_PROTOCOL_Loop
  3682  0511  0857               	movf	??_PROTOCOL_Loop,w
  3683  0512  00A2               	movwf	strncmp@s2
  3684  0513  3003               	movlw	3
  3685  0514  00A3               	movwf	strncmp@len
  3686  0515  3000               	movlw	0
  3687  0516  00A4               	movwf	strncmp@len+1
  3688  0517  318C  241E  3183   	fcall	_strncmp
  3689  051A  0020               	movlb	0	; select bank0
  3690  051B  0820               	movf	?_strncmp,w
  3691  051C  0421               	iorwf	?_strncmp+1,w
  3692  051D  1D03               	btfss	3,2
  3693  051E  2D35               	goto	l3883
  3694                           
  3695                           ;protocol.c: 177: device_address = PROTOCOL_Read_Device_Address();
  3696  051F  3188  20AB  3183   	fcall	_PROTOCOL_Read_Device_Address
  3697  0522  0020               	movlb	0	; select bank0
  3698  0523  00D7               	movwf	??_PROTOCOL_Loop
  3699  0524  0857               	movf	??_PROTOCOL_Loop,w
  3700  0525  00DA               	movwf	PROTOCOL_Loop@device_address
  3701                           
  3702                           ;protocol.c: 178: printf("$:RDA:%d\n", device_address);
  3703  0526  3053               	movlw	low (STR_16| (0+32768))
  3704  0527  00AE               	movwf	printf@f
  3705  0528  3086               	movlw	high (STR_16| (0+32768))
  3706  0529  00AF               	movwf	printf@f+1
  3707  052A  085A               	movf	PROTOCOL_Loop@device_address,w
  3708  052B  00D7               	movwf	??_PROTOCOL_Loop
  3709  052C  01D8               	clrf	??_PROTOCOL_Loop+1
  3710  052D  0857               	movf	??_PROTOCOL_Loop,w
  3711  052E  00B0               	movwf	?_printf+2
  3712  052F  0858               	movf	??_PROTOCOL_Loop+1,w
  3713  0530  00B1               	movwf	?_printf+3
  3714  0531  3180  2069  3183   	fcall	_printf
  3715                           
  3716                           ;protocol.c: 179: }
  3717  0534  2BBD               	goto	l628
  3718  0535                     l3883:	
  3719                           
  3720                           ;protocol.c: 180: else {
  3721                           ;protocol.c: 181: PROTOCOL_EXT(buf);
  3722  0535  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3723  0536  3188  209D  3183   	fcall	_PROTOCOL_EXT
  3724  0539  2BBD               	goto	l628
  3725  053A                     __end_of_PROTOCOL_Loop:	
  3726                           
  3727                           	psect	text4
  3728  0C1E                     __ptext4:	
  3729 ;; *************** function _strncmp *****************
  3730 ;; Defined at:
  3731 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strncmp.c"
  3732 ;; Parameters:    Size  Location     Type
  3733 ;;  s1              2    0[BANK0 ] PTR const unsigned char 
  3734 ;;		 -> STR_15(4), STR_14(4), STR_12(4), STR_11(4), 
  3735 ;;		 -> STR_8(4), STR_7(4), STR_6(4), STR_4(4), 
  3736 ;;  s2              1    2[BANK0 ] PTR const unsigned char 
  3737 ;;		 -> buf(48), 
  3738 ;;  len             2    3[BANK0 ] unsigned int 
  3739 ;; Auto vars:     Size  Location     Type
  3740 ;;		None
  3741 ;; Return value:  Size  Location     Type
  3742 ;;                  2    0[BANK0 ] int 
  3743 ;; Registers used:
  3744 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  3745 ;; Tracked objects:
  3746 ;;		On entry : 0/0
  3747 ;;		On exit  : 0/0
  3748 ;;		Unchanged: 0/0
  3749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3750 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3751 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3752 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3753 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3754 ;;Total ram usage:        7 bytes
  3755 ;; Hardware stack levels used:    1
  3756 ;; Hardware stack levels required when called:    5
  3757 ;; This function calls:
  3758 ;;		Nothing
  3759 ;; This function is called by:
  3760 ;;		_PROTOCOL_Loop
  3761 ;; This function uses a non-reentrant model
  3762 ;;
  3763                           
  3764                           
  3765                           ;psect for function _strncmp
  3766  0C1E                     _strncmp:	
  3767  0C1E                     l3617:	
  3768                           ;incstack = 0
  3769                           ; Regs used in _strncmp: [wreg-fsr1h+status,2+status,0+pclath]
  3770                           
  3771  0C1E  3001               	movlw	1
  3772  0C1F  0020               	movlb	0	; select bank0
  3773  0C20  02A3               	subwf	strncmp@len,f
  3774  0C21  3000               	movlw	0
  3775  0C22  3BA4               	subwfb	strncmp@len+1,f
  3776  0C23  0A23               	incf	strncmp@len,w
  3777  0C24  1903               	btfsc	3,2
  3778  0C25  0A24               	incf	strncmp@len+1,w
  3779  0C26  1903               	btfsc	3,2
  3780  0C27  2C5D               	goto	l3619
  3781  0C28  0020               	movlb	0	; select bank0
  3782  0C29  0820               	movf	strncmp@s1,w
  3783  0C2A  0084               	movwf	4
  3784  0C2B  0821               	movf	strncmp@s1+1,w
  3785  0C2C  0085               	movwf	5
  3786  0C2D  0012               	moviw fsr0++
  3787  0C2E  1903               	btfsc	3,2
  3788  0C2F  2C3C               	goto	l3609
  3789  0C30  0822               	movf	strncmp@s2,w
  3790  0C31  0086               	movwf	6
  3791  0C32  3001               	movlw	1	; select bank2/3
  3792  0C33  0087               	movwf	7
  3793  0C34  0820               	movf	strncmp@s1,w
  3794  0C35  0084               	movwf	4
  3795  0C36  0821               	movf	strncmp@s1+1,w
  3796  0C37  0085               	movwf	5
  3797  0C38  0800               	movf	0,w	;code access
  3798  0C39  0601               	xorwf	1,w
  3799  0C3A  1903               	skipnz
  3800  0C3B  2C54               	goto	l3613
  3801  0C3C                     l3609:	
  3802  0C3C  0822               	movf	strncmp@s2,w
  3803  0C3D  0086               	movwf	6
  3804  0C3E  3001               	movlw	1	; select bank2/3
  3805  0C3F  0087               	movwf	7
  3806  0C40  0801               	movf	1,w
  3807  0C41  00A5               	movwf	??_strncmp
  3808  0C42  01A6               	clrf	??_strncmp+1
  3809  0C43  09A5               	comf	??_strncmp,f
  3810  0C44  09A6               	comf	??_strncmp+1,f
  3811  0C45  0AA5               	incf	??_strncmp,f
  3812  0C46  1903               	skipnz
  3813  0C47  0AA6               	incf	??_strncmp+1,f
  3814  0C48  0820               	movf	strncmp@s1,w
  3815  0C49  0084               	movwf	4
  3816  0C4A  0821               	movf	strncmp@s1+1,w
  3817  0C4B  0085               	movwf	5
  3818  0C4C  0800               	movf	0,w	;code access
  3819  0C4D  0725               	addwf	??_strncmp,w
  3820  0C4E  00A0               	movwf	?_strncmp
  3821  0C4F  0826               	movf	??_strncmp+1,w
  3822  0C50  1803               	skipnc
  3823  0C51  0A26               	incf	??_strncmp+1,w
  3824  0C52  00A1               	movwf	?_strncmp+1
  3825  0C53  0008               	return
  3826  0C54                     l3613:	
  3827  0C54  3001               	movlw	1
  3828  0C55  07A0               	addwf	strncmp@s1,f
  3829  0C56  3000               	movlw	0
  3830  0C57  3DA1               	addwfc	strncmp@s1+1,f
  3831  0C58  3001               	movlw	1
  3832  0C59  00A5               	movwf	??_strncmp
  3833  0C5A  0825               	movf	??_strncmp,w
  3834  0C5B  07A2               	addwf	strncmp@s2,f
  3835  0C5C  2C1E               	goto	l3617
  3836  0C5D                     l3619:	
  3837  0C5D  01A0               	clrf	?_strncmp
  3838  0C5E  01A1               	clrf	?_strncmp+1
  3839  0C5F  0008               	return
  3840  0C60                     __end_of_strncmp:	
  3841                           
  3842                           	psect	text5
  3843  0BA7                     __ptext5:	
  3844 ;; *************** function _inv_handler *****************
  3845 ;; Defined at:
  3846 ;;		line 22 in file "main.c"
  3847 ;; Parameters:    Size  Location     Type
  3848 ;;		None
  3849 ;; Auto vars:     Size  Location     Type
  3850 ;;  values          9   46[BANK0 ] float [3]
  3851 ;; Return value:  Size  Location     Type
  3852 ;;                  1    wreg      void 
  3853 ;; Registers used:
  3854 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3855 ;; Tracked objects:
  3856 ;;		On entry : 0/0
  3857 ;;		On exit  : 0/0
  3858 ;;		Unchanged: 0/0
  3859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3861 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3862 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3863 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3864 ;;Total ram usage:       10 bytes
  3865 ;; Hardware stack levels used:    1
  3866 ;; Hardware stack levels required when called:    9
  3867 ;; This function calls:
  3868 ;;		_PROTOCOL_I2C_Send_float
  3869 ;;		_get_accel
  3870 ;; This function is called by:
  3871 ;;		_main
  3872 ;;		_PROTOCOL_Loop
  3873 ;; This function uses a non-reentrant model
  3874 ;;
  3875                           
  3876                           
  3877                           ;psect for function _inv_handler
  3878  0BA7                     _inv_handler:	
  3879                           
  3880                           ;main.c: 23: float values[3];
  3881                           ;main.c: 24: LATCbits.LATC7 ^= 1;
  3882                           
  3883                           ;incstack = 0
  3884                           ; Regs used in _inv_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3885  0BA7  0022               	movlb	2	; select bank2
  3886  0BA8  0D0E               	rlf	14,w	;volatile
  3887  0BA9  0D0E               	rlf	14,w	;volatile
  3888  0BAA  3901               	andlw	1
  3889  0BAB  0020               	movlb	0	; select bank0
  3890  0BAC  00CD               	movwf	??_inv_handler
  3891  0BAD  3001               	movlw	1
  3892  0BAE  06CD               	xorwf	??_inv_handler,f
  3893  0BAF  0CCD               	rrf	??_inv_handler,f
  3894  0BB0  0CCD               	rrf	??_inv_handler,f
  3895  0BB1  0022               	movlb	2	; select bank2
  3896  0BB2  080E               	movf	14,w	;volatile
  3897  0BB3  0020               	movlb	0	; select bank0
  3898  0BB4  064D               	xorwf	??_inv_handler,w
  3899  0BB5  397F               	andlw	-129
  3900  0BB6  064D               	xorwf	??_inv_handler,w
  3901  0BB7  0022               	movlb	2	; select bank2
  3902  0BB8  008E               	movwf	14	;volatile
  3903                           
  3904                           ;main.c: 25: values[0] = get_accel(channel_AN3);
  3905  0BB9  3003               	movlw	3
  3906  0BBA  3187  27B8  318B   	fcall	_get_accel
  3907  0BBD  0020               	movlb	0	; select bank0
  3908  0BBE  0845               	movf	?_get_accel,w
  3909  0BBF  00CE               	movwf	inv_handler@values
  3910  0BC0  0846               	movf	?_get_accel+1,w
  3911  0BC1  00CF               	movwf	inv_handler@values+1
  3912  0BC2  0847               	movf	?_get_accel+2,w
  3913  0BC3  00D0               	movwf	inv_handler@values+2
  3914                           
  3915                           ;main.c: 26: values[1] = get_accel(channel_AN7);
  3916  0BC4  3007               	movlw	7
  3917  0BC5  3187  27B8  318B   	fcall	_get_accel
  3918  0BC8  0020               	movlb	0	; select bank0
  3919  0BC9  0845               	movf	?_get_accel,w
  3920  0BCA  00D1               	movwf	inv_handler@values+3
  3921  0BCB  0846               	movf	?_get_accel+1,w
  3922  0BCC  00D2               	movwf	inv_handler@values+4
  3923  0BCD  0847               	movf	?_get_accel+2,w
  3924  0BCE  00D3               	movwf	inv_handler@values+5
  3925                           
  3926                           ;main.c: 27: values[2] = get_accel(channel_AN8);
  3927  0BCF  3008               	movlw	8
  3928  0BD0  3187  27B8  318B   	fcall	_get_accel
  3929  0BD3  0020               	movlb	0	; select bank0
  3930  0BD4  0845               	movf	?_get_accel,w
  3931  0BD5  00D4               	movwf	inv_handler@values+6
  3932  0BD6  0846               	movf	?_get_accel+1,w
  3933  0BD7  00D5               	movwf	inv_handler@values+7
  3934  0BD8  0847               	movf	?_get_accel+2,w
  3935  0BD9  00D6               	movwf	inv_handler@values+8
  3936                           
  3937                           ;main.c: 28: PROTOCOL_I2C_Send_float(3, values);
  3938  0BDA  304E               	movlw	(low (inv_handler@values| 0))& (0+255)
  3939  0BDB  00CD               	movwf	??_inv_handler
  3940  0BDC  084D               	movf	??_inv_handler,w
  3941  0BDD  00C6               	movwf	PROTOCOL_I2C_Send_float@pbuffer
  3942  0BDE  3003               	movlw	3
  3943  0BDF  3182  223E         	fcall	_PROTOCOL_I2C_Send_float
  3944  0BE1  0008               	return
  3945  0BE2                     __end_of_inv_handler:	
  3946                           
  3947                           	psect	text6
  3948  07B8                     __ptext6:	
  3949 ;; *************** function _get_accel *****************
  3950 ;; Defined at:
  3951 ;;		line 13 in file "main.c"
  3952 ;; Parameters:    Size  Location     Type
  3953 ;;  ch              1    wreg     enum E2982
  3954 ;; Auto vars:     Size  Location     Type
  3955 ;;  ch              1   44[BANK0 ] enum E2982
  3956 ;;  steps           3   41[BANK0 ] float 
  3957 ;; Return value:  Size  Location     Type
  3958 ;;                  3   37[BANK0 ] float 
  3959 ;; Registers used:
  3960 ;;		wreg, status,2, status,0, pclath, cstack
  3961 ;; Tracked objects:
  3962 ;;		On entry : 0/0
  3963 ;;		On exit  : 0/0
  3964 ;;		Unchanged: 0/0
  3965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3966 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3967 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3968 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3969 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3970 ;;Total ram usage:        8 bytes
  3971 ;; Hardware stack levels used:    1
  3972 ;; Hardware stack levels required when called:    7
  3973 ;; This function calls:
  3974 ;;		_ADC_GetConversionResult
  3975 ;;		_ADC_IsConversionDone
  3976 ;;		_ADC_SelectChannel
  3977 ;;		_ADC_StartConversion
  3978 ;;		___ftadd
  3979 ;;		___ftdiv
  3980 ;;		___lwtoft
  3981 ;; This function is called by:
  3982 ;;		_inv_handler
  3983 ;; This function uses a non-reentrant model
  3984 ;;
  3985                           
  3986                           
  3987                           ;psect for function _get_accel
  3988  07B8                     _get_accel:	
  3989                           
  3990                           ;incstack = 0
  3991                           ; Regs used in _get_accel: [wreg+status,2+status,0+pclath+cstack]
  3992                           ;get_accel@ch stored from wreg
  3993  07B8  0020               	movlb	0	; select bank0
  3994  07B9  00CC               	movwf	get_accel@ch
  3995                           
  3996                           ;main.c: 14: float steps;
  3997                           ;main.c: 15: ADC_SelectChannel(ch);
  3998  07BA  084C               	movf	get_accel@ch,w
  3999  07BB  3189  2169  3187   	fcall	_ADC_SelectChannel
  4000                           
  4001                           ;main.c: 16: ADC_StartConversion();
  4002  07BE  3188  20B1  3187   	fcall	_ADC_StartConversion
  4003  07C1                     l3379:	
  4004                           ;main.c: 17: while(!ADC_IsConversionDone());
  4005                           
  4006  07C1  3188  20ED  3187   	fcall	_ADC_IsConversionDone
  4007  07C4  3A00               	xorlw	0
  4008  07C5  1903               	skipnz
  4009  07C6  2FC1               	goto	l3379
  4010                           
  4011                           ;main.c: 18: steps = (float)ADC_GetConversionResult();
  4012  07C7  3189  210E  3187   	fcall	_ADC_GetConversionResult
  4013  07CA  0020               	movlb	0	; select bank0
  4014  07CB  0821               	movf	?_ADC_GetConversionResult+1,w
  4015  07CC  00A9               	movwf	___lwtoft@c+1
  4016  07CD  0820               	movf	?_ADC_GetConversionResult,w
  4017  07CE  00A8               	movwf	___lwtoft@c
  4018  07CF  3189  218B  3187   	fcall	___lwtoft
  4019  07D2  0020               	movlb	0	; select bank0
  4020  07D3  0828               	movf	?___lwtoft,w
  4021  07D4  00C9               	movwf	get_accel@steps
  4022  07D5  0829               	movf	?___lwtoft+1,w
  4023  07D6  00CA               	movwf	get_accel@steps+1
  4024  07D7  082A               	movf	?___lwtoft+2,w
  4025  07D8  00CB               	movwf	get_accel@steps+2
  4026                           
  4027                           ;main.c: 19: return (steps - 512.0)/204.8;
  4028  07D9  30CD               	movlw	205
  4029  07DA  00B5               	movwf	___ftdiv@f2
  4030  07DB  304C               	movlw	76
  4031  07DC  00B6               	movwf	___ftdiv@f2+1
  4032  07DD  3043               	movlw	67
  4033  07DE  00B7               	movwf	___ftdiv@f2+2
  4034  07DF  3000               	movlw	0
  4035  07E0  00A8               	movwf	___ftadd@f1
  4036  07E1  3000               	movlw	0
  4037  07E2  00A9               	movwf	___ftadd@f1+1
  4038  07E3  30C4               	movlw	196
  4039  07E4  00AA               	movwf	___ftadd@f1+2
  4040  07E5  0849               	movf	get_accel@steps,w
  4041  07E6  00AB               	movwf	___ftadd@f2
  4042  07E7  084A               	movf	get_accel@steps+1,w
  4043  07E8  00AC               	movwf	___ftadd@f2+1
  4044  07E9  084B               	movf	get_accel@steps+2,w
  4045  07EA  00AD               	movwf	___ftadd@f2+2
  4046  07EB  3185  253A  3187   	fcall	___ftadd
  4047  07EE  0020               	movlb	0	; select bank0
  4048  07EF  0828               	movf	?___ftadd,w
  4049  07F0  00B8               	movwf	___ftdiv@f1
  4050  07F1  0829               	movf	?___ftadd+1,w
  4051  07F2  00B9               	movwf	___ftdiv@f1+1
  4052  07F3  082A               	movf	?___ftadd+2,w
  4053  07F4  00BA               	movwf	___ftdiv@f1+2
  4054  07F5  318E  26A3         	fcall	___ftdiv
  4055  07F7  0020               	movlb	0	; select bank0
  4056  07F8  0835               	movf	?___ftdiv,w
  4057  07F9  00C5               	movwf	?_get_accel
  4058  07FA  0836               	movf	?___ftdiv+1,w
  4059  07FB  00C6               	movwf	?_get_accel+1
  4060  07FC  0837               	movf	?___ftdiv+2,w
  4061  07FD  00C7               	movwf	?_get_accel+2
  4062  07FE  0008               	return
  4063  07FF                     __end_of_get_accel:	
  4064                           
  4065                           	psect	text7
  4066  098B                     __ptext7:	
  4067 ;; *************** function ___lwtoft *****************
  4068 ;; Defined at:
  4069 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwtoft.c"
  4070 ;; Parameters:    Size  Location     Type
  4071 ;;  c               2    8[BANK0 ] unsigned int 
  4072 ;; Auto vars:     Size  Location     Type
  4073 ;;		None
  4074 ;; Return value:  Size  Location     Type
  4075 ;;                  3    8[BANK0 ] float 
  4076 ;; Registers used:
  4077 ;;		wreg, status,2, status,0, pclath, cstack
  4078 ;; Tracked objects:
  4079 ;;		On entry : 0/0
  4080 ;;		On exit  : 0/0
  4081 ;;		Unchanged: 0/0
  4082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4083 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4084 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4085 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4086 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4087 ;;Total ram usage:        4 bytes
  4088 ;; Hardware stack levels used:    1
  4089 ;; Hardware stack levels required when called:    6
  4090 ;; This function calls:
  4091 ;;		___ftpack
  4092 ;; This function is called by:
  4093 ;;		_get_accel
  4094 ;; This function uses a non-reentrant model
  4095 ;;
  4096                           
  4097                           
  4098                           ;psect for function ___lwtoft
  4099  098B                     ___lwtoft:	
  4100                           
  4101                           ;incstack = 0
  4102                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  4103  098B  0020               	movlb	0	; select bank0
  4104  098C  0828               	movf	___lwtoft@c,w
  4105  098D  00A0               	movwf	___ftpack@arg
  4106  098E  0829               	movf	___lwtoft@c+1,w
  4107  098F  00A1               	movwf	___ftpack@arg+1
  4108  0990  01A2               	clrf	___ftpack@arg+2
  4109  0991  308E               	movlw	142
  4110  0992  00AB               	movwf	??___lwtoft
  4111  0993  082B               	movf	??___lwtoft,w
  4112  0994  00A3               	movwf	___ftpack@exp
  4113  0995  01A4               	clrf	___ftpack@sign
  4114  0996  318D  2546         	fcall	___ftpack
  4115  0998  0020               	movlb	0	; select bank0
  4116  0999  0820               	movf	?___ftpack,w
  4117  099A  00A8               	movwf	?___lwtoft
  4118  099B  0821               	movf	?___ftpack+1,w
  4119  099C  00A9               	movwf	?___lwtoft+1
  4120  099D  0822               	movf	?___ftpack+2,w
  4121  099E  00AA               	movwf	?___lwtoft+2
  4122  099F  0008               	return
  4123  09A0                     __end_of___lwtoft:	
  4124                           
  4125                           	psect	text8
  4126  0EA3                     __ptext8:	
  4127 ;; *************** function ___ftdiv *****************
  4128 ;; Defined at:
  4129 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftdiv.c"
  4130 ;; Parameters:    Size  Location     Type
  4131 ;;  f2              3   21[BANK0 ] float 
  4132 ;;  f1              3   24[BANK0 ] float 
  4133 ;; Auto vars:     Size  Location     Type
  4134 ;;  f3              3   32[BANK0 ] float 
  4135 ;;  sign            1   36[BANK0 ] unsigned char 
  4136 ;;  exp             1   35[BANK0 ] unsigned char 
  4137 ;;  cntr            1   31[BANK0 ] unsigned char 
  4138 ;; Return value:  Size  Location     Type
  4139 ;;                  3   21[BANK0 ] float 
  4140 ;; Registers used:
  4141 ;;		wreg, status,2, status,0, pclath, cstack
  4142 ;; Tracked objects:
  4143 ;;		On entry : 0/0
  4144 ;;		On exit  : 0/0
  4145 ;;		Unchanged: 0/0
  4146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4147 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4148 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4149 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4150 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4151 ;;Total ram usage:       16 bytes
  4152 ;; Hardware stack levels used:    1
  4153 ;; Hardware stack levels required when called:    6
  4154 ;; This function calls:
  4155 ;;		___ftpack
  4156 ;; This function is called by:
  4157 ;;		_get_accel
  4158 ;; This function uses a non-reentrant model
  4159 ;;
  4160                           
  4161                           
  4162                           ;psect for function ___ftdiv
  4163  0EA3                     ___ftdiv:	
  4164                           
  4165                           ;incstack = 0
  4166                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  4167  0EA3  0020               	movlb	0	; select bank0
  4168  0EA4  0838               	movf	___ftdiv@f1,w
  4169  0EA5  00BB               	movwf	??___ftdiv
  4170  0EA6  0839               	movf	___ftdiv@f1+1,w
  4171  0EA7  00BC               	movwf	??___ftdiv+1
  4172  0EA8  083A               	movf	___ftdiv@f1+2,w
  4173  0EA9  00BD               	movwf	??___ftdiv+2
  4174  0EAA  1003               	clrc
  4175  0EAB  0D3C               	rlf	??___ftdiv+1,w
  4176  0EAC  0D3D               	rlf	??___ftdiv+2,w
  4177  0EAD  00BE               	movwf	??___ftdiv+3
  4178  0EAE  083E               	movf	??___ftdiv+3,w
  4179  0EAF  00C3               	movwf	___ftdiv@exp
  4180  0EB0  0843               	movf	___ftdiv@exp,w
  4181  0EB1  1D03               	btfss	3,2
  4182  0EB2  2EBA               	goto	l3153
  4183  0EB3  3000               	movlw	0
  4184  0EB4  00B5               	movwf	?___ftdiv
  4185  0EB5  3000               	movlw	0
  4186  0EB6  00B6               	movwf	?___ftdiv+1
  4187  0EB7  3000               	movlw	0
  4188  0EB8  00B7               	movwf	?___ftdiv+2
  4189  0EB9  0008               	return
  4190  0EBA                     l3153:	
  4191  0EBA  0835               	movf	___ftdiv@f2,w
  4192  0EBB  00BB               	movwf	??___ftdiv
  4193  0EBC  0836               	movf	___ftdiv@f2+1,w
  4194  0EBD  00BC               	movwf	??___ftdiv+1
  4195  0EBE  0837               	movf	___ftdiv@f2+2,w
  4196  0EBF  00BD               	movwf	??___ftdiv+2
  4197  0EC0  1003               	clrc
  4198  0EC1  0D3C               	rlf	??___ftdiv+1,w
  4199  0EC2  0D3D               	rlf	??___ftdiv+2,w
  4200  0EC3  00BE               	movwf	??___ftdiv+3
  4201  0EC4  083E               	movf	??___ftdiv+3,w
  4202  0EC5  00C4               	movwf	___ftdiv@sign
  4203  0EC6  0844               	movf	___ftdiv@sign,w
  4204  0EC7  1D03               	btfss	3,2
  4205  0EC8  2ED0               	goto	l3159
  4206  0EC9  3000               	movlw	0
  4207  0ECA  00B5               	movwf	?___ftdiv
  4208  0ECB  3000               	movlw	0
  4209  0ECC  00B6               	movwf	?___ftdiv+1
  4210  0ECD  3000               	movlw	0
  4211  0ECE  00B7               	movwf	?___ftdiv+2
  4212  0ECF  0008               	return
  4213  0ED0                     l3159:	
  4214  0ED0  3000               	movlw	0
  4215  0ED1  00C0               	movwf	___ftdiv@f3
  4216  0ED2  3000               	movlw	0
  4217  0ED3  00C1               	movwf	___ftdiv@f3+1
  4218  0ED4  3000               	movlw	0
  4219  0ED5  00C2               	movwf	___ftdiv@f3+2
  4220  0ED6  3089               	movlw	137
  4221  0ED7  0744               	addwf	___ftdiv@sign,w
  4222  0ED8  00BB               	movwf	??___ftdiv
  4223  0ED9  083B               	movf	??___ftdiv,w
  4224  0EDA  02C3               	subwf	___ftdiv@exp,f
  4225  0EDB  0838               	movf	___ftdiv@f1,w
  4226  0EDC  00BB               	movwf	??___ftdiv
  4227  0EDD  0839               	movf	___ftdiv@f1+1,w
  4228  0EDE  00BC               	movwf	??___ftdiv+1
  4229  0EDF  083A               	movf	___ftdiv@f1+2,w
  4230  0EE0  00BD               	movwf	??___ftdiv+2
  4231  0EE1  3010               	movlw	16
  4232  0EE2                     u3145:	
  4233  0EE2  36BD               	lsrf	??___ftdiv+2,f
  4234  0EE3  0CBC               	rrf	??___ftdiv+1,f
  4235  0EE4  0CBB               	rrf	??___ftdiv,f
  4236  0EE5  0B89               	decfsz	9,f
  4237  0EE6  2EE2               	goto	u3145
  4238  0EE7  083B               	movf	??___ftdiv,w
  4239  0EE8  00BE               	movwf	??___ftdiv+3
  4240  0EE9  083E               	movf	??___ftdiv+3,w
  4241  0EEA  00C4               	movwf	___ftdiv@sign
  4242  0EEB  0835               	movf	___ftdiv@f2,w
  4243  0EEC  00BB               	movwf	??___ftdiv
  4244  0EED  0836               	movf	___ftdiv@f2+1,w
  4245  0EEE  00BC               	movwf	??___ftdiv+1
  4246  0EEF  0837               	movf	___ftdiv@f2+2,w
  4247  0EF0  00BD               	movwf	??___ftdiv+2
  4248  0EF1  3010               	movlw	16
  4249  0EF2                     u3155:	
  4250  0EF2  36BD               	lsrf	??___ftdiv+2,f
  4251  0EF3  0CBC               	rrf	??___ftdiv+1,f
  4252  0EF4  0CBB               	rrf	??___ftdiv,f
  4253  0EF5  0B89               	decfsz	9,f
  4254  0EF6  2EF2               	goto	u3155
  4255  0EF7  083B               	movf	??___ftdiv,w
  4256  0EF8  00BE               	movwf	??___ftdiv+3
  4257  0EF9  083E               	movf	??___ftdiv+3,w
  4258  0EFA  06C4               	xorwf	___ftdiv@sign,f
  4259  0EFB  3080               	movlw	128
  4260  0EFC  00BB               	movwf	??___ftdiv
  4261  0EFD  083B               	movf	??___ftdiv,w
  4262  0EFE  05C4               	andwf	___ftdiv@sign,f
  4263  0EFF  17B9               	bsf	___ftdiv@f1+1,7
  4264  0F00  30FF               	movlw	255
  4265  0F01  05B8               	andwf	___ftdiv@f1,f
  4266  0F02  30FF               	movlw	255
  4267  0F03  05B9               	andwf	___ftdiv@f1+1,f
  4268  0F04  3000               	movlw	0
  4269  0F05  05BA               	andwf	___ftdiv@f1+2,f
  4270  0F06  17B6               	bsf	___ftdiv@f2+1,7
  4271  0F07  30FF               	movlw	255
  4272  0F08  05B5               	andwf	___ftdiv@f2,f
  4273  0F09  30FF               	movlw	255
  4274  0F0A  05B6               	andwf	___ftdiv@f2+1,f
  4275  0F0B  3000               	movlw	0
  4276  0F0C  05B7               	andwf	___ftdiv@f2+2,f
  4277  0F0D  3018               	movlw	24
  4278  0F0E  00BB               	movwf	??___ftdiv
  4279  0F0F  083B               	movf	??___ftdiv,w
  4280  0F10  00BF               	movwf	___ftdiv@cntr
  4281  0F11                     l3173:	
  4282  0F11  3001               	movlw	1
  4283  0F12                     u3165:	
  4284  0F12  35C0               	lslf	___ftdiv@f3,f
  4285  0F13  0DC1               	rlf	___ftdiv@f3+1,f
  4286  0F14  0DC2               	rlf	___ftdiv@f3+2,f
  4287  0F15  0B89               	decfsz	9,f
  4288  0F16  2F12               	goto	u3165
  4289  0F17  0837               	movf	___ftdiv@f2+2,w
  4290  0F18  023A               	subwf	___ftdiv@f1+2,w
  4291  0F19  1D03               	skipz
  4292  0F1A  2F21               	goto	u3175
  4293  0F1B  0836               	movf	___ftdiv@f2+1,w
  4294  0F1C  0239               	subwf	___ftdiv@f1+1,w
  4295  0F1D  1D03               	skipz
  4296  0F1E  2F21               	goto	u3175
  4297  0F1F  0835               	movf	___ftdiv@f2,w
  4298  0F20  0238               	subwf	___ftdiv@f1,w
  4299  0F21                     u3175:	
  4300  0F21  1C03               	skipc
  4301  0F22  2F2A               	goto	l3181
  4302  0F23  0835               	movf	___ftdiv@f2,w
  4303  0F24  02B8               	subwf	___ftdiv@f1,f
  4304  0F25  0836               	movf	___ftdiv@f2+1,w
  4305  0F26  3BB9               	subwfb	___ftdiv@f1+1,f
  4306  0F27  0837               	movf	___ftdiv@f2+2,w
  4307  0F28  3BBA               	subwfb	___ftdiv@f1+2,f
  4308  0F29  1440               	bsf	___ftdiv@f3,0
  4309  0F2A                     l3181:	
  4310  0F2A  3001               	movlw	1
  4311  0F2B                     u3185:	
  4312  0F2B  35B8               	lslf	___ftdiv@f1,f
  4313  0F2C  0DB9               	rlf	___ftdiv@f1+1,f
  4314  0F2D  0DBA               	rlf	___ftdiv@f1+2,f
  4315  0F2E  0B89               	decfsz	9,f
  4316  0F2F  2F2B               	goto	u3185
  4317  0F30  3001               	movlw	1
  4318  0F31  02BF               	subwf	___ftdiv@cntr,f
  4319  0F32  1D03               	btfss	3,2
  4320  0F33  2F11               	goto	l3173
  4321  0F34  0840               	movf	___ftdiv@f3,w
  4322  0F35  00A0               	movwf	___ftpack@arg
  4323  0F36  0841               	movf	___ftdiv@f3+1,w
  4324  0F37  00A1               	movwf	___ftpack@arg+1
  4325  0F38  0842               	movf	___ftdiv@f3+2,w
  4326  0F39  00A2               	movwf	___ftpack@arg+2
  4327  0F3A  0843               	movf	___ftdiv@exp,w
  4328  0F3B  00BB               	movwf	??___ftdiv
  4329  0F3C  083B               	movf	??___ftdiv,w
  4330  0F3D  00A3               	movwf	___ftpack@exp
  4331  0F3E  0844               	movf	___ftdiv@sign,w
  4332  0F3F  00BC               	movwf	??___ftdiv+1
  4333  0F40  083C               	movf	??___ftdiv+1,w
  4334  0F41  00A4               	movwf	___ftpack@sign
  4335  0F42  318D  2546         	fcall	___ftpack
  4336  0F44  0020               	movlb	0	; select bank0
  4337  0F45  0820               	movf	?___ftpack,w
  4338  0F46  00B5               	movwf	?___ftdiv
  4339  0F47  0821               	movf	?___ftpack+1,w
  4340  0F48  00B6               	movwf	?___ftdiv+1
  4341  0F49  0822               	movf	?___ftpack+2,w
  4342  0F4A  00B7               	movwf	?___ftdiv+2
  4343  0F4B  0008               	return
  4344  0F4C                     __end_of___ftdiv:	
  4345                           
  4346                           	psect	text9
  4347  053A                     __ptext9:	
  4348 ;; *************** function ___ftadd *****************
  4349 ;; Defined at:
  4350 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftadd.c"
  4351 ;; Parameters:    Size  Location     Type
  4352 ;;  f1              3    8[BANK0 ] float 
  4353 ;;  f2              3   11[BANK0 ] float 
  4354 ;; Auto vars:     Size  Location     Type
  4355 ;;  exp1            1   20[BANK0 ] unsigned char 
  4356 ;;  exp2            1   19[BANK0 ] unsigned char 
  4357 ;;  sign            1   18[BANK0 ] unsigned char 
  4358 ;; Return value:  Size  Location     Type
  4359 ;;                  3    8[BANK0 ] float 
  4360 ;; Registers used:
  4361 ;;		wreg, status,2, status,0, pclath, cstack
  4362 ;; Tracked objects:
  4363 ;;		On entry : 0/0
  4364 ;;		On exit  : 0/0
  4365 ;;		Unchanged: 0/0
  4366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4367 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4368 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4369 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4370 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4371 ;;Total ram usage:       13 bytes
  4372 ;; Hardware stack levels used:    1
  4373 ;; Hardware stack levels required when called:    6
  4374 ;; This function calls:
  4375 ;;		___ftpack
  4376 ;; This function is called by:
  4377 ;;		_get_accel
  4378 ;; This function uses a non-reentrant model
  4379 ;;
  4380                           
  4381                           
  4382                           ;psect for function ___ftadd
  4383  053A                     ___ftadd:	
  4384                           
  4385                           ;incstack = 0
  4386                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  4387  053A  0020               	movlb	0	; select bank0
  4388  053B  0828               	movf	___ftadd@f1,w
  4389  053C  00AE               	movwf	??___ftadd
  4390  053D  0829               	movf	___ftadd@f1+1,w
  4391  053E  00AF               	movwf	??___ftadd+1
  4392  053F  082A               	movf	___ftadd@f1+2,w
  4393  0540  00B0               	movwf	??___ftadd+2
  4394  0541  1003               	clrc
  4395  0542  0D2F               	rlf	??___ftadd+1,w
  4396  0543  0D30               	rlf	??___ftadd+2,w
  4397  0544  00B1               	movwf	??___ftadd+3
  4398  0545  0831               	movf	??___ftadd+3,w
  4399  0546  00B4               	movwf	___ftadd@exp1
  4400  0547  082B               	movf	___ftadd@f2,w
  4401  0548  00AE               	movwf	??___ftadd
  4402  0549  082C               	movf	___ftadd@f2+1,w
  4403  054A  00AF               	movwf	??___ftadd+1
  4404  054B  082D               	movf	___ftadd@f2+2,w
  4405  054C  00B0               	movwf	??___ftadd+2
  4406  054D  1003               	clrc
  4407  054E  0D2F               	rlf	??___ftadd+1,w
  4408  054F  0D30               	rlf	??___ftadd+2,w
  4409  0550  00B1               	movwf	??___ftadd+3
  4410  0551  0831               	movf	??___ftadd+3,w
  4411  0552  00B3               	movwf	___ftadd@exp2
  4412  0553  0834               	movf	___ftadd@exp1,w
  4413  0554  1903               	btfsc	3,2
  4414  0555  2D62               	goto	l3083
  4415  0556  0833               	movf	___ftadd@exp2,w
  4416  0557  0234               	subwf	___ftadd@exp1,w
  4417  0558  1803               	skipnc
  4418  0559  2D69               	goto	l3087
  4419  055A  0334               	decf	___ftadd@exp1,w
  4420  055B  3AFF               	xorlw	255
  4421  055C  0733               	addwf	___ftadd@exp2,w
  4422  055D  00AE               	movwf	??___ftadd
  4423  055E  3019               	movlw	25
  4424  055F  022E               	subwf	??___ftadd,w
  4425  0560  1C03               	skipc
  4426  0561  2D69               	goto	l3087
  4427  0562                     l3083:	
  4428  0562  082B               	movf	___ftadd@f2,w
  4429  0563  00A8               	movwf	?___ftadd
  4430  0564  082C               	movf	___ftadd@f2+1,w
  4431  0565  00A9               	movwf	?___ftadd+1
  4432  0566  082D               	movf	___ftadd@f2+2,w
  4433  0567  00AA               	movwf	?___ftadd+2
  4434  0568  0008               	return
  4435  0569                     l3087:	
  4436  0569  0833               	movf	___ftadd@exp2,w
  4437  056A  1903               	btfsc	3,2
  4438  056B  0008               	return
  4439  056C  0834               	movf	___ftadd@exp1,w
  4440  056D  0233               	subwf	___ftadd@exp2,w
  4441  056E  1803               	skipnc
  4442  056F  2D78               	goto	l3093
  4443  0570  0333               	decf	___ftadd@exp2,w
  4444  0571  3AFF               	xorlw	255
  4445  0572  0734               	addwf	___ftadd@exp1,w
  4446  0573  00AE               	movwf	??___ftadd
  4447  0574  3019               	movlw	25
  4448  0575  022E               	subwf	??___ftadd,w
  4449  0576  1803               	btfsc	3,0
  4450  0577  0008               	return
  4451  0578                     l3093:	
  4452  0578  3006               	movlw	6
  4453  0579  00AE               	movwf	??___ftadd
  4454  057A  082E               	movf	??___ftadd,w
  4455  057B  00B2               	movwf	___ftadd@sign
  4456  057C  1BAA               	btfsc	___ftadd@f1+2,7
  4457  057D  17B2               	bsf	___ftadd@sign,7
  4458  057E  1BAD               	btfsc	___ftadd@f2+2,7
  4459  057F  1732               	bsf	___ftadd@sign,6
  4460  0580  17A9               	bsf	___ftadd@f1+1,7
  4461  0581  30FF               	movlw	255
  4462  0582  05A8               	andwf	___ftadd@f1,f
  4463  0583  30FF               	movlw	255
  4464  0584  05A9               	andwf	___ftadd@f1+1,f
  4465  0585  3000               	movlw	0
  4466  0586  05AA               	andwf	___ftadd@f1+2,f
  4467  0587  17AC               	bsf	___ftadd@f2+1,7
  4468  0588  30FF               	movlw	255
  4469  0589  05AB               	andwf	___ftadd@f2,f
  4470  058A  30FF               	movlw	255
  4471  058B  05AC               	andwf	___ftadd@f2+1,f
  4472  058C  3000               	movlw	0
  4473  058D  05AD               	andwf	___ftadd@f2+2,f
  4474  058E  0833               	movf	___ftadd@exp2,w
  4475  058F  0234               	subwf	___ftadd@exp1,w
  4476  0590  1803               	skipnc
  4477  0591  2DB4               	goto	l3115
  4478  0592                     l3105:	
  4479  0592  3001               	movlw	1
  4480  0593                     u2985:	
  4481  0593  35AB               	lslf	___ftadd@f2,f
  4482  0594  0DAC               	rlf	___ftadd@f2+1,f
  4483  0595  0DAD               	rlf	___ftadd@f2+2,f
  4484  0596  0B89               	decfsz	9,f
  4485  0597  2D93               	goto	u2985
  4486  0598  3001               	movlw	1
  4487  0599  02B3               	subwf	___ftadd@exp2,f
  4488  059A  0833               	movf	___ftadd@exp2,w
  4489  059B  0634               	xorwf	___ftadd@exp1,w
  4490  059C  1903               	skipnz
  4491  059D  2DAF               	goto	l3113
  4492  059E  3001               	movlw	1
  4493  059F  02B2               	subwf	___ftadd@sign,f
  4494  05A0  0832               	movf	___ftadd@sign,w
  4495  05A1  3907               	andlw	7
  4496  05A2  1903               	btfsc	3,2
  4497  05A3  2DAF               	goto	l3113
  4498  05A4  2D92               	goto	l3105
  4499  05A5                     l3111:	
  4500  05A5  3001               	movlw	1
  4501  05A6                     u3015:	
  4502  05A6  36AA               	lsrf	___ftadd@f1+2,f
  4503  05A7  0CA9               	rrf	___ftadd@f1+1,f
  4504  05A8  0CA8               	rrf	___ftadd@f1,f
  4505  05A9  0B89               	decfsz	9,f
  4506  05AA  2DA6               	goto	u3015
  4507  05AB  3001               	movlw	1
  4508  05AC  00AE               	movwf	??___ftadd
  4509  05AD  082E               	movf	??___ftadd,w
  4510  05AE  07B4               	addwf	___ftadd@exp1,f
  4511  05AF                     l3113:	
  4512  05AF  0834               	movf	___ftadd@exp1,w
  4513  05B0  0633               	xorwf	___ftadd@exp2,w
  4514  05B1  1903               	btfsc	3,2
  4515  05B2  2DD9               	goto	l1109
  4516  05B3  2DA5               	goto	l3111
  4517  05B4                     l3115:	
  4518  05B4  0834               	movf	___ftadd@exp1,w
  4519  05B5  0233               	subwf	___ftadd@exp2,w
  4520  05B6  1803               	skipnc
  4521  05B7  2DD9               	goto	l1109
  4522  05B8                     l3117:	
  4523  05B8  3001               	movlw	1
  4524  05B9                     u3045:	
  4525  05B9  35A8               	lslf	___ftadd@f1,f
  4526  05BA  0DA9               	rlf	___ftadd@f1+1,f
  4527  05BB  0DAA               	rlf	___ftadd@f1+2,f
  4528  05BC  0B89               	decfsz	9,f
  4529  05BD  2DB9               	goto	u3045
  4530  05BE  3001               	movlw	1
  4531  05BF  02B4               	subwf	___ftadd@exp1,f
  4532  05C0  0833               	movf	___ftadd@exp2,w
  4533  05C1  0634               	xorwf	___ftadd@exp1,w
  4534  05C2  1903               	skipnz
  4535  05C3  2DD5               	goto	l3125
  4536  05C4  3001               	movlw	1
  4537  05C5  02B2               	subwf	___ftadd@sign,f
  4538  05C6  0832               	movf	___ftadd@sign,w
  4539  05C7  3907               	andlw	7
  4540  05C8  1903               	btfsc	3,2
  4541  05C9  2DD5               	goto	l3125
  4542  05CA  2DB8               	goto	l3117
  4543  05CB                     l3123:	
  4544  05CB  3001               	movlw	1
  4545  05CC                     u3075:	
  4546  05CC  36AD               	lsrf	___ftadd@f2+2,f
  4547  05CD  0CAC               	rrf	___ftadd@f2+1,f
  4548  05CE  0CAB               	rrf	___ftadd@f2,f
  4549  05CF  0B89               	decfsz	9,f
  4550  05D0  2DCC               	goto	u3075
  4551  05D1  3001               	movlw	1
  4552  05D2  00AE               	movwf	??___ftadd
  4553  05D3  082E               	movf	??___ftadd,w
  4554  05D4  07B3               	addwf	___ftadd@exp2,f
  4555  05D5                     l3125:	
  4556  05D5  0834               	movf	___ftadd@exp1,w
  4557  05D6  0633               	xorwf	___ftadd@exp2,w
  4558  05D7  1D03               	skipz
  4559  05D8  2DCB               	goto	l3123
  4560  05D9                     l1109:	
  4561  05D9  1FB2               	btfss	___ftadd@sign,7
  4562  05DA  2DEB               	goto	l3129
  4563  05DB  30FF               	movlw	255
  4564  05DC  06A8               	xorwf	___ftadd@f1,f
  4565  05DD  30FF               	movlw	255
  4566  05DE  06A9               	xorwf	___ftadd@f1+1,f
  4567  05DF  30FF               	movlw	255
  4568  05E0  06AA               	xorwf	___ftadd@f1+2,f
  4569  05E1  3001               	movlw	1
  4570  05E2  07A8               	addwf	___ftadd@f1,f
  4571  05E3  3000               	movlw	0
  4572  05E4  1803               	skipnc
  4573  05E5  3001               	movlw	1
  4574  05E6  07A9               	addwf	___ftadd@f1+1,f
  4575  05E7  3000               	movlw	0
  4576  05E8  1803               	skipnc
  4577  05E9  3001               	movlw	1
  4578  05EA  07AA               	addwf	___ftadd@f1+2,f
  4579  05EB                     l3129:	
  4580  05EB  1F32               	btfss	___ftadd@sign,6
  4581  05EC  2DFD               	goto	l3133
  4582  05ED  30FF               	movlw	255
  4583  05EE  06AB               	xorwf	___ftadd@f2,f
  4584  05EF  30FF               	movlw	255
  4585  05F0  06AC               	xorwf	___ftadd@f2+1,f
  4586  05F1  30FF               	movlw	255
  4587  05F2  06AD               	xorwf	___ftadd@f2+2,f
  4588  05F3  3001               	movlw	1
  4589  05F4  07AB               	addwf	___ftadd@f2,f
  4590  05F5  3000               	movlw	0
  4591  05F6  1803               	skipnc
  4592  05F7  3001               	movlw	1
  4593  05F8  07AC               	addwf	___ftadd@f2+1,f
  4594  05F9  3000               	movlw	0
  4595  05FA  1803               	skipnc
  4596  05FB  3001               	movlw	1
  4597  05FC  07AD               	addwf	___ftadd@f2+2,f
  4598  05FD                     l3133:	
  4599  05FD  01B2               	clrf	___ftadd@sign
  4600  05FE  0828               	movf	___ftadd@f1,w
  4601  05FF  07AB               	addwf	___ftadd@f2,f
  4602  0600  0829               	movf	___ftadd@f1+1,w
  4603  0601  3DAC               	addwfc	___ftadd@f2+1,f
  4604  0602  082A               	movf	___ftadd@f1+2,w
  4605  0603  3DAD               	addwfc	___ftadd@f2+2,f
  4606  0604  1FAD               	btfss	___ftadd@f2+2,7
  4607  0605  2E18               	goto	l3143
  4608  0606  30FF               	movlw	255
  4609  0607  06AB               	xorwf	___ftadd@f2,f
  4610  0608  30FF               	movlw	255
  4611  0609  06AC               	xorwf	___ftadd@f2+1,f
  4612  060A  30FF               	movlw	255
  4613  060B  06AD               	xorwf	___ftadd@f2+2,f
  4614  060C  3001               	movlw	1
  4615  060D  07AB               	addwf	___ftadd@f2,f
  4616  060E  3000               	movlw	0
  4617  060F  1803               	skipnc
  4618  0610  3001               	movlw	1
  4619  0611  07AC               	addwf	___ftadd@f2+1,f
  4620  0612  3000               	movlw	0
  4621  0613  1803               	skipnc
  4622  0614  3001               	movlw	1
  4623  0615  07AD               	addwf	___ftadd@f2+2,f
  4624  0616  01B2               	clrf	___ftadd@sign
  4625  0617  0AB2               	incf	___ftadd@sign,f
  4626  0618                     l3143:	
  4627  0618  082B               	movf	___ftadd@f2,w
  4628  0619  00A0               	movwf	___ftpack@arg
  4629  061A  082C               	movf	___ftadd@f2+1,w
  4630  061B  00A1               	movwf	___ftpack@arg+1
  4631  061C  082D               	movf	___ftadd@f2+2,w
  4632  061D  00A2               	movwf	___ftpack@arg+2
  4633  061E  0834               	movf	___ftadd@exp1,w
  4634  061F  00AE               	movwf	??___ftadd
  4635  0620  082E               	movf	??___ftadd,w
  4636  0621  00A3               	movwf	___ftpack@exp
  4637  0622  0832               	movf	___ftadd@sign,w
  4638  0623  00AF               	movwf	??___ftadd+1
  4639  0624  082F               	movf	??___ftadd+1,w
  4640  0625  00A4               	movwf	___ftpack@sign
  4641  0626  318D  2546         	fcall	___ftpack
  4642  0628  0020               	movlb	0	; select bank0
  4643  0629  0820               	movf	?___ftpack,w
  4644  062A  00A8               	movwf	?___ftadd
  4645  062B  0821               	movf	?___ftpack+1,w
  4646  062C  00A9               	movwf	?___ftadd+1
  4647  062D  0822               	movf	?___ftpack+2,w
  4648  062E  00AA               	movwf	?___ftadd+2
  4649  062F  0008               	return
  4650  0630                     __end_of___ftadd:	
  4651                           
  4652                           	psect	text10
  4653  08B1                     __ptext10:	
  4654 ;; *************** function _ADC_StartConversion *****************
  4655 ;; Defined at:
  4656 ;;		line 90 in file "mcc_generated_files/adc.c"
  4657 ;; Parameters:    Size  Location     Type
  4658 ;;		None
  4659 ;; Auto vars:     Size  Location     Type
  4660 ;;		None
  4661 ;; Return value:  Size  Location     Type
  4662 ;;                  1    wreg      void 
  4663 ;; Registers used:
  4664 ;;		None
  4665 ;; Tracked objects:
  4666 ;;		On entry : 0/0
  4667 ;;		On exit  : 0/0
  4668 ;;		Unchanged: 0/0
  4669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4671 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4673 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4674 ;;Total ram usage:        0 bytes
  4675 ;; Hardware stack levels used:    1
  4676 ;; Hardware stack levels required when called:    5
  4677 ;; This function calls:
  4678 ;;		Nothing
  4679 ;; This function is called by:
  4680 ;;		_get_accel
  4681 ;; This function uses a non-reentrant model
  4682 ;;
  4683                           
  4684                           
  4685                           ;psect for function _ADC_StartConversion
  4686  08B1                     _ADC_StartConversion:	
  4687                           
  4688                           ;adc.c: 93: ADCON0bits.GO_nDONE = 1;
  4689                           
  4690                           ;incstack = 0
  4691                           ; Regs used in _ADC_StartConversion: []
  4692  08B1  0021               	movlb	1	; select bank1
  4693  08B2  149D               	bsf	29,1	;volatile
  4694  08B3  0008               	return
  4695  08B4                     __end_of_ADC_StartConversion:	
  4696                           
  4697                           	psect	text11
  4698  0969                     __ptext11:	
  4699 ;; *************** function _ADC_SelectChannel *****************
  4700 ;; Defined at:
  4701 ;;		line 82 in file "mcc_generated_files/adc.c"
  4702 ;; Parameters:    Size  Location     Type
  4703 ;;  channel         1    wreg     enum E2975
  4704 ;; Auto vars:     Size  Location     Type
  4705 ;;  channel         1    1[BANK0 ] enum E2975
  4706 ;; Return value:  Size  Location     Type
  4707 ;;                  1    wreg      void 
  4708 ;; Registers used:
  4709 ;;		wreg, status,2, status,0
  4710 ;; Tracked objects:
  4711 ;;		On entry : 0/0
  4712 ;;		On exit  : 0/0
  4713 ;;		Unchanged: 0/0
  4714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4716 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4717 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4718 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4719 ;;Total ram usage:        2 bytes
  4720 ;; Hardware stack levels used:    1
  4721 ;; Hardware stack levels required when called:    5
  4722 ;; This function calls:
  4723 ;;		Nothing
  4724 ;; This function is called by:
  4725 ;;		_get_accel
  4726 ;; This function uses a non-reentrant model
  4727 ;;
  4728                           
  4729                           
  4730                           ;psect for function _ADC_SelectChannel
  4731  0969                     _ADC_SelectChannel:	
  4732                           
  4733                           ;incstack = 0
  4734                           ; Regs used in _ADC_SelectChannel: [wreg+status,2+status,0]
  4735                           ;ADC_SelectChannel@channel stored from wreg
  4736  0969  0020               	movlb	0	; select bank0
  4737  096A  00A1               	movwf	ADC_SelectChannel@channel
  4738                           
  4739                           ;adc.c: 85: ADCON0bits.CHS = channel;
  4740  096B  0821               	movf	ADC_SelectChannel@channel,w
  4741  096C  00A0               	movwf	??_ADC_SelectChannel
  4742  096D  0DA0               	rlf	??_ADC_SelectChannel,f
  4743  096E  0DA0               	rlf	??_ADC_SelectChannel,f
  4744  096F  0021               	movlb	1	; select bank1
  4745  0970  081D               	movf	29,w	;volatile
  4746  0971  0020               	movlb	0	; select bank0
  4747  0972  0620               	xorwf	??_ADC_SelectChannel,w
  4748  0973  3983               	andlw	-125
  4749  0974  0620               	xorwf	??_ADC_SelectChannel,w
  4750  0975  0021               	movlb	1	; select bank1
  4751  0976  009D               	movwf	29	;volatile
  4752                           
  4753                           ;adc.c: 87: ADCON0bits.ADON = 1;
  4754  0977  141D               	bsf	29,0	;volatile
  4755  0978  0008               	return
  4756  0979                     __end_of_ADC_SelectChannel:	
  4757                           
  4758                           	psect	text12
  4759  08ED                     __ptext12:	
  4760 ;; *************** function _ADC_IsConversionDone *****************
  4761 ;; Defined at:
  4762 ;;		line 97 in file "mcc_generated_files/adc.c"
  4763 ;; Parameters:    Size  Location     Type
  4764 ;;		None
  4765 ;; Auto vars:     Size  Location     Type
  4766 ;;		None
  4767 ;; Return value:  Size  Location     Type
  4768 ;;                  1    wreg      unsigned char 
  4769 ;; Registers used:
  4770 ;;		wreg, status,0
  4771 ;; Tracked objects:
  4772 ;;		On entry : 0/0
  4773 ;;		On exit  : 0/0
  4774 ;;		Unchanged: 0/0
  4775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4777 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4779 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4780 ;;Total ram usage:        0 bytes
  4781 ;; Hardware stack levels used:    1
  4782 ;; Hardware stack levels required when called:    5
  4783 ;; This function calls:
  4784 ;;		Nothing
  4785 ;; This function is called by:
  4786 ;;		_get_accel
  4787 ;; This function uses a non-reentrant model
  4788 ;;
  4789                           
  4790                           
  4791                           ;psect for function _ADC_IsConversionDone
  4792  08ED                     _ADC_IsConversionDone:	
  4793                           
  4794                           ;adc.c: 100: return (!ADCON0bits.GO_nDONE);
  4795                           
  4796                           ;incstack = 0
  4797                           ; Regs used in _ADC_IsConversionDone: [wreg+status,0]
  4798  08ED  1003               	clrc
  4799  08EE  0021               	movlb	1	; select bank1
  4800  08EF  1C9D               	btfss	29,1	;volatile
  4801  08F0  1403               	setc
  4802  08F1  3000               	movlw	0
  4803  08F2  3D09               	addwfc	9,w
  4804  08F3  0008               	return
  4805  08F4                     __end_of_ADC_IsConversionDone:	
  4806                           
  4807                           	psect	text13
  4808  090E                     __ptext13:	
  4809 ;; *************** function _ADC_GetConversionResult *****************
  4810 ;; Defined at:
  4811 ;;		line 103 in file "mcc_generated_files/adc.c"
  4812 ;; Parameters:    Size  Location     Type
  4813 ;;		None
  4814 ;; Auto vars:     Size  Location     Type
  4815 ;;		None
  4816 ;; Return value:  Size  Location     Type
  4817 ;;                  2    0[BANK0 ] unsigned int 
  4818 ;; Registers used:
  4819 ;;		wreg
  4820 ;; Tracked objects:
  4821 ;;		On entry : 0/0
  4822 ;;		On exit  : 0/0
  4823 ;;		Unchanged: 0/0
  4824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4825 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4826 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4827 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4828 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4829 ;;Total ram usage:        2 bytes
  4830 ;; Hardware stack levels used:    1
  4831 ;; Hardware stack levels required when called:    5
  4832 ;; This function calls:
  4833 ;;		Nothing
  4834 ;; This function is called by:
  4835 ;;		_get_accel
  4836 ;; This function uses a non-reentrant model
  4837 ;;
  4838                           
  4839                           
  4840                           ;psect for function _ADC_GetConversionResult
  4841  090E                     _ADC_GetConversionResult:	
  4842                           
  4843                           ;adc.c: 106: return ((ADRESH << 8) + ADRESL);
  4844                           
  4845                           ;incstack = 0
  4846                           ; Regs used in _ADC_GetConversionResult: [wreg]
  4847  090E  0021               	movlb	1	; select bank1
  4848  090F  081C               	movf	28,w	;volatile
  4849  0910  0020               	movlb	0	; select bank0
  4850  0911  00A1               	movwf	?_ADC_GetConversionResult+1
  4851  0912  0021               	movlb	1	; select bank1
  4852  0913  081B               	movf	27,w	;volatile
  4853  0914  0020               	movlb	0	; select bank0
  4854  0915  00A0               	movwf	?_ADC_GetConversionResult
  4855  0916  0008               	return
  4856  0917                     __end_of_ADC_GetConversionResult:	
  4857                           
  4858                           	psect	text14
  4859  023E                     __ptext14:	
  4860 ;; *************** function _PROTOCOL_I2C_Send_float *****************
  4861 ;; Defined at:
  4862 ;;		line 340 in file "protocol.c"
  4863 ;; Parameters:    Size  Location     Type
  4864 ;;  length          1    wreg     unsigned char 
  4865 ;;  pbuffer         1   38[BANK0 ] PTR float 
  4866 ;;		 -> PROTOCOL_Send_float@pbuf(3), inv_handler@values(9), 
  4867 ;; Auto vars:     Size  Location     Type
  4868 ;;  length          1   41[BANK0 ] unsigned char 
  4869 ;;  v               2   42[BANK0 ] int 
  4870 ;; Return value:  Size  Location     Type
  4871 ;;                  1    wreg      void 
  4872 ;; Registers used:
  4873 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4874 ;; Tracked objects:
  4875 ;;		On entry : 0/0
  4876 ;;		On exit  : 0/0
  4877 ;;		Unchanged: 0/0
  4878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4879 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4880 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4881 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4882 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4883 ;;Total ram usage:        6 bytes
  4884 ;; Hardware stack levels used:    1
  4885 ;; Hardware stack levels required when called:    8
  4886 ;; This function calls:
  4887 ;;		_PROTOCOL_I2C_Set_TLV
  4888 ;;		___awdiv
  4889 ;;		___awmod
  4890 ;;		___bmul
  4891 ;;		___ftmul
  4892 ;;		___fttol
  4893 ;;		_abs
  4894 ;;		_printf
  4895 ;; This function is called by:
  4896 ;;		_inv_handler
  4897 ;; This function uses a non-reentrant model
  4898 ;;
  4899                           
  4900                           
  4901                           ;psect for function _PROTOCOL_I2C_Send_float
  4902  023E                     _PROTOCOL_I2C_Send_float:	
  4903                           
  4904                           ;incstack = 0
  4905                           ; Regs used in _PROTOCOL_I2C_Send_float: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4906                           ;PROTOCOL_I2C_Send_float@length stored from wreg
  4907  023E  0020               	movlb	0	; select bank0
  4908  023F  00C9               	movwf	PROTOCOL_I2C_Send_float@length
  4909                           
  4910                           ;protocol.c: 341: int16_t v;
  4911                           ;protocol.c: 342: if (backplane_slave_enabled) {
  4912  0240  0021               	movlb	1	; select bank1
  4913  0241  0839               	movf	_backplane_slave_enabled^(0+128),w
  4914  0242  1903               	btfsc	3,2
  4915  0243  2AA6               	goto	l3405
  4916                           
  4917                           ;protocol.c: 343: j = 0;
  4918  0244  0020               	movlb	0	; select bank0
  4919  0245  01DC               	clrf	_j
  4920                           
  4921                           ;protocol.c: 344: for (i=0; i<length; i++) {
  4922  0246  01DD               	clrf	_i
  4923  0247                     l3401:	
  4924  0247  0849               	movf	PROTOCOL_I2C_Send_float@length,w
  4925  0248  025D               	subwf	_i,w
  4926  0249  1803               	btfsc	3,0
  4927  024A  2A9A               	goto	l3403
  4928                           
  4929                           ;protocol.c: 345: float100 = (int16_t)(pbuffer[i] * 100);
  4930  024B  3003               	movlw	3
  4931  024C  00C7               	movwf	??_PROTOCOL_I2C_Send_float
  4932  024D  0847               	movf	??_PROTOCOL_I2C_Send_float,w
  4933  024E  00A0               	movwf	___bmul@multiplicand
  4934  024F  085D               	movf	_i,w
  4935  0250  3189  2179  3182   	fcall	___bmul
  4936  0253  0020               	movlb	0	; select bank0
  4937  0254  0746               	addwf	PROTOCOL_I2C_Send_float@pbuffer,w
  4938  0255  00C8               	movwf	??_PROTOCOL_I2C_Send_float+1
  4939  0256  0848               	movf	??_PROTOCOL_I2C_Send_float+1,w
  4940  0257  0086               	movwf	6
  4941  0258  0187               	clrf	7
  4942  0259  3F40               	moviw [0]fsr1
  4943  025A  00AB               	movwf	___ftmul@f2
  4944  025B  3F41               	moviw [1]fsr1
  4945  025C  00AC               	movwf	___ftmul@f2+1
  4946  025D  3F42               	moviw [2]fsr1
  4947  025E  00AD               	movwf	___ftmul@f2+2
  4948  025F  3000               	movlw	0
  4949  0260  00A8               	movwf	___ftmul@f1
  4950  0261  30C8               	movlw	200
  4951  0262  00A9               	movwf	___ftmul@f1+1
  4952  0263  3042               	movlw	66
  4953  0264  00AA               	movwf	___ftmul@f1+2
  4954  0265  318F  274C  3182   	fcall	___ftmul
  4955  0268  0020               	movlb	0	; select bank0
  4956  0269  0828               	movf	?___ftmul,w
  4957  026A  00B8               	movwf	___fttol@f1
  4958  026B  0829               	movf	?___ftmul+1,w
  4959  026C  00B9               	movwf	___fttol@f1+1
  4960  026D  082A               	movf	?___ftmul+2,w
  4961  026E  00BA               	movwf	___fttol@f1+2
  4962  026F  318E  261C  3182   	fcall	___fttol
  4963  0272  0020               	movlb	0	; select bank0
  4964  0273  0839               	movf	?___fttol+1,w
  4965  0274  0021               	movlb	1	; select bank1
  4966  0275  00B1               	movwf	(_float100+1)^(0+128)
  4967  0276  0020               	movlb	0	; select bank0
  4968  0277  0838               	movf	?___fttol,w
  4969  0278  0021               	movlb	1	; select bank1
  4970  0279  00B0               	movwf	_float100^(0+128)
  4971                           
  4972                           ;protocol.c: 346: sendbuf[j++] = (uint8_t)((float100 >> 8) & 0x00ff);
  4973  027A  0831               	movf	(_float100+1)^(0+128),w
  4974  027B  0020               	movlb	0	; select bank0
  4975  027C  00C7               	movwf	??_PROTOCOL_I2C_Send_float
  4976  027D  085C               	movf	_j,w
  4977  027E  3EBC               	addlw	(low (_sendbuf| 0))& (0+255)
  4978  027F  0086               	movwf	6
  4979  0280  0187               	clrf	7
  4980  0281  0847               	movf	??_PROTOCOL_I2C_Send_float,w
  4981  0282  0081               	movwf	1
  4982  0283  3001               	movlw	1
  4983  0284  00C7               	movwf	??_PROTOCOL_I2C_Send_float
  4984  0285  0847               	movf	??_PROTOCOL_I2C_Send_float,w
  4985  0286  07DC               	addwf	_j,f
  4986                           
  4987                           ;protocol.c: 347: sendbuf[j++] = (uint8_t)(float100 & 0x00ff);
  4988  0287  0021               	movlb	1	; select bank1
  4989  0288  0830               	movf	_float100^(0+128),w
  4990  0289  0020               	movlb	0	; select bank0
  4991  028A  00C7               	movwf	??_PROTOCOL_I2C_Send_float
  4992  028B  085C               	movf	_j,w
  4993  028C  3EBC               	addlw	(low (_sendbuf| 0))& (0+255)
  4994  028D  0086               	movwf	6
  4995  028E  0187               	clrf	7
  4996  028F  0847               	movf	??_PROTOCOL_I2C_Send_float,w
  4997  0290  0081               	movwf	1
  4998  0291  3001               	movlw	1
  4999  0292  00C7               	movwf	??_PROTOCOL_I2C_Send_float
  5000  0293  0847               	movf	??_PROTOCOL_I2C_Send_float,w
  5001  0294  07DC               	addwf	_j,f
  5002  0295  3001               	movlw	1
  5003  0296  00C7               	movwf	??_PROTOCOL_I2C_Send_float
  5004  0297  0847               	movf	??_PROTOCOL_I2C_Send_float,w
  5005  0298  07DD               	addwf	_i,f
  5006  0299  2A47               	goto	l3401
  5007  029A                     l3403:	
  5008                           
  5009                           ;protocol.c: 348: }
  5010                           ;protocol.c: 349: PROTOCOL_I2C_Set_TLV(0x05, length*2, &sendbuf[0]);
  5011  029A  3549               	lslf	PROTOCOL_I2C_Send_float@length,w
  5012  029B  00C7               	movwf	??_PROTOCOL_I2C_Send_float
  5013  029C  0847               	movf	??_PROTOCOL_I2C_Send_float,w
  5014  029D  00A0               	movwf	PROTOCOL_I2C_Set_TLV@length
  5015  029E  30BC               	movlw	(low (_sendbuf| 0))& (0+255)
  5016  029F  00C8               	movwf	??_PROTOCOL_I2C_Send_float+1
  5017  02A0  0848               	movf	??_PROTOCOL_I2C_Send_float+1,w
  5018  02A1  00A1               	movwf	PROTOCOL_I2C_Set_TLV@pbuffer
  5019  02A2  3005               	movlw	5
  5020  02A3  318A  2268         	fcall	_PROTOCOL_I2C_Set_TLV
  5021                           
  5022                           ;protocol.c: 350: } else {
  5023  02A5  0008               	return
  5024  02A6                     l3405:	
  5025                           
  5026                           ;protocol.c: 351: length--;
  5027  02A6  3001               	movlw	1
  5028  02A7  0020               	movlb	0	; select bank0
  5029  02A8  02C9               	subwf	PROTOCOL_I2C_Send_float@length,f
  5030                           
  5031                           ;protocol.c: 352: for (i=0; i<length; i++) {
  5032  02A9  01DD               	clrf	_i
  5033  02AA                     l3421:	
  5034  02AA  0849               	movf	PROTOCOL_I2C_Send_float@length,w
  5035  02AB  025D               	subwf	_i,w
  5036  02AC  1803               	btfsc	3,0
  5037  02AD  2B23               	goto	l3423
  5038                           
  5039                           ;protocol.c: 353: v = (int16_t)(pbuffer[i] * 100);
  5040  02AE  3003               	movlw	3
  5041  02AF  00C7               	movwf	??_PROTOCOL_I2C_Send_float
  5042  02B0  0847               	movf	??_PROTOCOL_I2C_Send_float,w
  5043  02B1  00A0               	movwf	___bmul@multiplicand
  5044  02B2  085D               	movf	_i,w
  5045  02B3  3189  2179  3182   	fcall	___bmul
  5046  02B6  0020               	movlb	0	; select bank0
  5047  02B7  0746               	addwf	PROTOCOL_I2C_Send_float@pbuffer,w
  5048  02B8  00C8               	movwf	??_PROTOCOL_I2C_Send_float+1
  5049  02B9  0848               	movf	??_PROTOCOL_I2C_Send_float+1,w
  5050  02BA  0086               	movwf	6
  5051  02BB  0187               	clrf	7
  5052  02BC  3F40               	moviw [0]fsr1
  5053  02BD  00AB               	movwf	___ftmul@f2
  5054  02BE  3F41               	moviw [1]fsr1
  5055  02BF  00AC               	movwf	___ftmul@f2+1
  5056  02C0  3F42               	moviw [2]fsr1
  5057  02C1  00AD               	movwf	___ftmul@f2+2
  5058  02C2  3000               	movlw	0
  5059  02C3  00A8               	movwf	___ftmul@f1
  5060  02C4  30C8               	movlw	200
  5061  02C5  00A9               	movwf	___ftmul@f1+1
  5062  02C6  3042               	movlw	66
  5063  02C7  00AA               	movwf	___ftmul@f1+2
  5064  02C8  318F  274C  3182   	fcall	___ftmul
  5065  02CB  0020               	movlb	0	; select bank0
  5066  02CC  0828               	movf	?___ftmul,w
  5067  02CD  00B8               	movwf	___fttol@f1
  5068  02CE  0829               	movf	?___ftmul+1,w
  5069  02CF  00B9               	movwf	___fttol@f1+1
  5070  02D0  082A               	movf	?___ftmul+2,w
  5071  02D1  00BA               	movwf	___fttol@f1+2
  5072  02D2  318E  261C  3182   	fcall	___fttol
  5073  02D5  0020               	movlb	0	; select bank0
  5074  02D6  0839               	movf	?___fttol+1,w
  5075  02D7  00CB               	movwf	PROTOCOL_I2C_Send_float@v+1
  5076  02D8  0838               	movf	?___fttol,w
  5077  02D9  00CA               	movwf	PROTOCOL_I2C_Send_float@v
  5078                           
  5079                           ;protocol.c: 354: if (v <= -100 || v >= 0) {
  5080  02DA  084B               	movf	PROTOCOL_I2C_Send_float@v+1,w
  5081  02DB  3A80               	xorlw	128
  5082  02DC  00C7               	movwf	??_PROTOCOL_I2C_Send_float
  5083  02DD  307F               	movlw	127
  5084  02DE  0247               	subwf	??_PROTOCOL_I2C_Send_float,w
  5085  02DF  1D03               	skipz
  5086  02E0  2AE3               	goto	u3505
  5087  02E1  309D               	movlw	157
  5088  02E2  024A               	subwf	PROTOCOL_I2C_Send_float@v,w
  5089  02E3                     u3505:	
  5090  02E3  1C03               	skipc
  5091  02E4  2AE8               	goto	l3415
  5092  02E5  0020               	movlb	0	; select bank0
  5093  02E6  1BCB               	btfsc	PROTOCOL_I2C_Send_float@v+1,7
  5094  02E7  2AED               	goto	l3417
  5095  02E8                     l3415:	
  5096                           
  5097                           ;protocol.c: 355: printf("%d.%02d,", v/100, abs(v%100));
  5098  02E8  3086               	movlw	low ((STR_32+1)| (0+32768))
  5099  02E9  0020               	movlb	0	; select bank0
  5100  02EA  00AE               	movwf	printf@f
  5101  02EB  3086               	movlw	high ((STR_32+1)| (0+32768))
  5102  02EC  2AF1               	goto	L1
  5103  02ED                     l3417:	
  5104                           ;protocol.c: 356: } else {
  5105                           
  5106                           
  5107                           ;protocol.c: 357: printf("-%d.%02d,", v/100, abs(v%100));
  5108  02ED  3085               	movlw	low (STR_32| (0+32768))
  5109  02EE  0020               	movlb	0	; select bank0
  5110  02EF  00AE               	movwf	printf@f
  5111  02F0  3086               	movlw	high (STR_32| (0+32768))
  5112  02F1                     L1:	
  5113  02F1  00AF               	movwf	printf@f+1
  5114  02F2  3064               	movlw	100
  5115  02F3  00A0               	movwf	___awdiv@divisor
  5116  02F4  3000               	movlw	0
  5117  02F5  00A1               	movwf	___awdiv@divisor+1
  5118  02F6  084B               	movf	PROTOCOL_I2C_Send_float@v+1,w
  5119  02F7  00A3               	movwf	___awdiv@dividend+1
  5120  02F8  084A               	movf	PROTOCOL_I2C_Send_float@v,w
  5121  02F9  00A2               	movwf	___awdiv@dividend
  5122  02FA  318C  24F4  3182   	fcall	___awdiv
  5123  02FD  0020               	movlb	0	; select bank0
  5124  02FE  0821               	movf	?___awdiv+1,w
  5125  02FF  00B1               	movwf	?_printf+3
  5126  0300  0820               	movf	?___awdiv,w
  5127  0301  00B0               	movwf	?_printf+2
  5128  0302  3064               	movlw	100
  5129  0303  00A0               	movwf	___awmod@divisor
  5130  0304  3000               	movlw	0
  5131  0305  00A1               	movwf	___awmod@divisor+1
  5132  0306  084B               	movf	PROTOCOL_I2C_Send_float@v+1,w
  5133  0307  00A3               	movwf	___awmod@dividend+1
  5134  0308  084A               	movf	PROTOCOL_I2C_Send_float@v,w
  5135  0309  00A2               	movwf	___awmod@dividend
  5136  030A  318C  2460  3182   	fcall	___awmod
  5137  030D  0020               	movlb	0	; select bank0
  5138  030E  0821               	movf	?___awmod+1,w
  5139  030F  00A8               	movwf	abs@a+1
  5140  0310  0820               	movf	?___awmod,w
  5141  0311  00A7               	movwf	abs@a
  5142  0312  3189  215A  3182   	fcall	_abs
  5143  0315  0020               	movlb	0	; select bank0
  5144  0316  0828               	movf	?_abs+1,w
  5145  0317  00B3               	movwf	?_printf+5
  5146  0318  0827               	movf	?_abs,w
  5147  0319  00B2               	movwf	?_printf+4
  5148  031A  3180  2069  3182   	fcall	_printf
  5149  031D  3001               	movlw	1
  5150  031E  0020               	movlb	0	; select bank0
  5151  031F  00C7               	movwf	??_PROTOCOL_I2C_Send_float
  5152  0320  0847               	movf	??_PROTOCOL_I2C_Send_float,w
  5153  0321  07DD               	addwf	_i,f
  5154  0322  2AAA               	goto	l3421
  5155  0323                     l3423:	
  5156                           
  5157                           ;protocol.c: 358: }
  5158                           ;protocol.c: 359: }
  5159                           ;protocol.c: 360: v = (int16_t)(pbuffer[i] * 100);
  5160  0323  3003               	movlw	3
  5161  0324  00C7               	movwf	??_PROTOCOL_I2C_Send_float
  5162  0325  0847               	movf	??_PROTOCOL_I2C_Send_float,w
  5163  0326  00A0               	movwf	___bmul@multiplicand
  5164  0327  085D               	movf	_i,w
  5165  0328  3189  2179  3182   	fcall	___bmul
  5166  032B  0020               	movlb	0	; select bank0
  5167  032C  0746               	addwf	PROTOCOL_I2C_Send_float@pbuffer,w
  5168  032D  00C8               	movwf	??_PROTOCOL_I2C_Send_float+1
  5169  032E  0848               	movf	??_PROTOCOL_I2C_Send_float+1,w
  5170  032F  0086               	movwf	6
  5171  0330  0187               	clrf	7
  5172  0331  3F40               	moviw [0]fsr1
  5173  0332  00AB               	movwf	___ftmul@f2
  5174  0333  3F41               	moviw [1]fsr1
  5175  0334  00AC               	movwf	___ftmul@f2+1
  5176  0335  3F42               	moviw [2]fsr1
  5177  0336  00AD               	movwf	___ftmul@f2+2
  5178  0337  3000               	movlw	0
  5179  0338  00A8               	movwf	___ftmul@f1
  5180  0339  30C8               	movlw	200
  5181  033A  00A9               	movwf	___ftmul@f1+1
  5182  033B  3042               	movlw	66
  5183  033C  00AA               	movwf	___ftmul@f1+2
  5184  033D  318F  274C  3182   	fcall	___ftmul
  5185  0340  0020               	movlb	0	; select bank0
  5186  0341  0828               	movf	?___ftmul,w
  5187  0342  00B8               	movwf	___fttol@f1
  5188  0343  0829               	movf	?___ftmul+1,w
  5189  0344  00B9               	movwf	___fttol@f1+1
  5190  0345  082A               	movf	?___ftmul+2,w
  5191  0346  00BA               	movwf	___fttol@f1+2
  5192  0347  318E  261C  3182   	fcall	___fttol
  5193  034A  0020               	movlb	0	; select bank0
  5194  034B  0839               	movf	?___fttol+1,w
  5195  034C  00CB               	movwf	PROTOCOL_I2C_Send_float@v+1
  5196  034D  0838               	movf	?___fttol,w
  5197  034E  00CA               	movwf	PROTOCOL_I2C_Send_float@v
  5198                           
  5199                           ;protocol.c: 361: if (v <= -100 || v >= 0) {
  5200  034F  084B               	movf	PROTOCOL_I2C_Send_float@v+1,w
  5201  0350  3A80               	xorlw	128
  5202  0351  00C7               	movwf	??_PROTOCOL_I2C_Send_float
  5203  0352  307F               	movlw	127
  5204  0353  0247               	subwf	??_PROTOCOL_I2C_Send_float,w
  5205  0354  1D03               	skipz
  5206  0355  2B58               	goto	u3535
  5207  0356  309D               	movlw	157
  5208  0357  024A               	subwf	PROTOCOL_I2C_Send_float@v,w
  5209  0358                     u3535:	
  5210  0358  1C03               	skipc
  5211  0359  2B5D               	goto	l3429
  5212  035A  0020               	movlb	0	; select bank0
  5213  035B  1BCB               	btfsc	PROTOCOL_I2C_Send_float@v+1,7
  5214  035C  2B8D               	goto	l3431
  5215  035D                     l3429:	
  5216                           
  5217                           ;protocol.c: 362: printf("%d.%02d\n", v/100, abs(v%100));
  5218  035D  3068               	movlw	low ((STR_34+1)| (0+32768))
  5219  035E  0020               	movlb	0	; select bank0
  5220  035F  00AE               	movwf	printf@f
  5221  0360  3086               	movlw	high ((STR_34+1)| (0+32768))
  5222  0361  00AF               	movwf	printf@f+1
  5223  0362  3064               	movlw	100
  5224  0363  00A0               	movwf	___awdiv@divisor
  5225  0364  3000               	movlw	0
  5226  0365  00A1               	movwf	___awdiv@divisor+1
  5227  0366  084B               	movf	PROTOCOL_I2C_Send_float@v+1,w
  5228  0367  00A3               	movwf	___awdiv@dividend+1
  5229  0368  084A               	movf	PROTOCOL_I2C_Send_float@v,w
  5230  0369  00A2               	movwf	___awdiv@dividend
  5231  036A  318C  24F4  3182   	fcall	___awdiv
  5232  036D  0020               	movlb	0	; select bank0
  5233  036E  0821               	movf	?___awdiv+1,w
  5234  036F  00B1               	movwf	?_printf+3
  5235  0370  0820               	movf	?___awdiv,w
  5236  0371  00B0               	movwf	?_printf+2
  5237  0372  3064               	movlw	100
  5238  0373  00A0               	movwf	___awmod@divisor
  5239  0374  3000               	movlw	0
  5240  0375  00A1               	movwf	___awmod@divisor+1
  5241  0376  084B               	movf	PROTOCOL_I2C_Send_float@v+1,w
  5242  0377  00A3               	movwf	___awmod@dividend+1
  5243  0378  084A               	movf	PROTOCOL_I2C_Send_float@v,w
  5244  0379  00A2               	movwf	___awmod@dividend
  5245  037A  318C  2460  3182   	fcall	___awmod
  5246  037D  0020               	movlb	0	; select bank0
  5247  037E  0821               	movf	?___awmod+1,w
  5248  037F  00A8               	movwf	abs@a+1
  5249  0380  0820               	movf	?___awmod,w
  5250  0381  00A7               	movwf	abs@a
  5251  0382  3189  215A  3182   	fcall	_abs
  5252  0385  0020               	movlb	0	; select bank0
  5253  0386  0828               	movf	?_abs+1,w
  5254  0387  00B3               	movwf	?_printf+5
  5255  0388  0827               	movf	?_abs,w
  5256  0389  00B2               	movwf	?_printf+4
  5257  038A  3180  2069         	fcall	_printf
  5258                           
  5259                           ;protocol.c: 363: } else {
  5260  038C  0008               	return
  5261  038D                     l3431:	
  5262                           
  5263                           ;protocol.c: 364: printf("-%d.%02d\n", v/100, abs(v%100));
  5264  038D  3067               	movlw	low (STR_34| (0+32768))
  5265  038E  0020               	movlb	0	; select bank0
  5266  038F  00AE               	movwf	printf@f
  5267  0390  3086               	movlw	high (STR_34| (0+32768))
  5268  0391  00AF               	movwf	printf@f+1
  5269  0392  3064               	movlw	100
  5270  0393  00A0               	movwf	___awdiv@divisor
  5271  0394  3000               	movlw	0
  5272  0395  00A1               	movwf	___awdiv@divisor+1
  5273  0396  084B               	movf	PROTOCOL_I2C_Send_float@v+1,w
  5274  0397  00A3               	movwf	___awdiv@dividend+1
  5275  0398  084A               	movf	PROTOCOL_I2C_Send_float@v,w
  5276  0399  00A2               	movwf	___awdiv@dividend
  5277  039A  318C  24F4  3182   	fcall	___awdiv
  5278  039D  0020               	movlb	0	; select bank0
  5279  039E  0821               	movf	?___awdiv+1,w
  5280  039F  00B1               	movwf	?_printf+3
  5281  03A0  0820               	movf	?___awdiv,w
  5282  03A1  00B0               	movwf	?_printf+2
  5283  03A2  3064               	movlw	100
  5284  03A3  00A0               	movwf	___awmod@divisor
  5285  03A4  3000               	movlw	0
  5286  03A5  00A1               	movwf	___awmod@divisor+1
  5287  03A6  084B               	movf	PROTOCOL_I2C_Send_float@v+1,w
  5288  03A7  00A3               	movwf	___awmod@dividend+1
  5289  03A8  084A               	movf	PROTOCOL_I2C_Send_float@v,w
  5290  03A9  00A2               	movwf	___awmod@dividend
  5291  03AA  318C  2460  3182   	fcall	___awmod
  5292  03AD  0020               	movlb	0	; select bank0
  5293  03AE  0821               	movf	?___awmod+1,w
  5294  03AF  00A8               	movwf	abs@a+1
  5295  03B0  0820               	movf	?___awmod,w
  5296  03B1  00A7               	movwf	abs@a
  5297  03B2  3189  215A  3182   	fcall	_abs
  5298  03B5  0020               	movlb	0	; select bank0
  5299  03B6  0828               	movf	?_abs+1,w
  5300  03B7  00B3               	movwf	?_printf+5
  5301  03B8  0827               	movf	?_abs,w
  5302  03B9  00B2               	movwf	?_printf+4
  5303  03BA  3180  2069         	fcall	_printf
  5304  03BC  0008               	return
  5305  03BD                     __end_of_PROTOCOL_I2C_Send_float:	
  5306                           
  5307                           	psect	text15
  5308  0069                     __ptext15:	
  5309 ;; *************** function _printf *****************
  5310 ;; Defined at:
  5311 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  5312 ;; Parameters:    Size  Location     Type
  5313 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  5314 ;;		 -> STR_48(10), STR_47(9), STR_46(10), STR_45(9), 
  5315 ;;		 -> STR_44(4), STR_43(4), STR_42(4), STR_41(4), 
  5316 ;;		 -> STR_40(4), STR_39(4), STR_38(4), STR_37(4), 
  5317 ;;		 -> STR_36(14), STR_35(9), STR_34(10), STR_33(9), 
  5318 ;;		 -> STR_32(10), STR_31(9), STR_30(7), STR_29(4), 
  5319 ;;		 -> STR_28(4), STR_27(9), STR_26(4), STR_25(4), 
  5320 ;;		 -> STR_24(10), STR_23(4), STR_22(4), STR_21(8), 
  5321 ;;		 -> STR_20(4), STR_19(4), STR_18(9), STR_17(6), 
  5322 ;;		 -> STR_16(10), STR_13(10), STR_9(10), STR_5(10), 
  5323 ;;		 -> STR_3(5), 
  5324 ;; Auto vars:     Size  Location     Type
  5325 ;;  tmpval          4    0        struct .
  5326 ;;  width           2   33[BANK0 ] int 
  5327 ;;  len             2   30[BANK0 ] unsigned int 
  5328 ;;  val             2   28[BANK0 ] unsigned int 
  5329 ;;  cp              2   25[BANK0 ] PTR const unsigned char 
  5330 ;;		 -> STR_10(4), buf(48), STR_2(7), ROM(8192), 
  5331 ;;		 -> printf@c(1), STR_1(11), 
  5332 ;;  c               1   35[BANK0 ] char 
  5333 ;;  flag            1   32[BANK0 ] unsigned char 
  5334 ;;  ap              1   27[BANK0 ] PTR void [1]
  5335 ;;		 -> ?_printf(2), 
  5336 ;;  prec            1   24[BANK0 ] char 
  5337 ;; Return value:  Size  Location     Type
  5338 ;;                  2   14[BANK0 ] int 
  5339 ;; Registers used:
  5340 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5341 ;; Tracked objects:
  5342 ;;		On entry : 0/0
  5343 ;;		On exit  : 0/0
  5344 ;;		Unchanged: 0/0
  5345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5346 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5347 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5348 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5349 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5350 ;;Total ram usage:       22 bytes
  5351 ;; Hardware stack levels used:    1
  5352 ;; Hardware stack levels required when called:    7
  5353 ;; This function calls:
  5354 ;;		___lwdiv
  5355 ;;		___lwmod
  5356 ;;		___wmul
  5357 ;;		_isdigit
  5358 ;;		_putch
  5359 ;; This function is called by:
  5360 ;;		_PROTOCOL_Loop
  5361 ;;		_PROTOCOL_I2C_Send_float
  5362 ;; This function uses a non-reentrant model
  5363 ;;
  5364                           
  5365                           
  5366                           ;psect for function _printf
  5367  0069                     _printf:	
  5368                           
  5369                           ;doprnt.c: 466: va_list ap;
  5370                           ;doprnt.c: 499: signed char c;
  5371                           ;doprnt.c: 501: int width;
  5372                           ;doprnt.c: 506: signed char prec;
  5373                           ;doprnt.c: 508: unsigned char flag;
  5374                           ;doprnt.c: 523: union {
  5375                           ;doprnt.c: 524: unsigned long vd;
  5376                           ;doprnt.c: 525: double integ;
  5377                           ;doprnt.c: 526: } tmpval;
  5378                           ;doprnt.c: 528: unsigned int val;
  5379                           ;doprnt.c: 529: unsigned len;
  5380                           ;doprnt.c: 530: const char * cp;
  5381                           ;doprnt.c: 533: *ap = __va_start();
  5382                           
  5383                           ;incstack = 0
  5384                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5385  0069  3030               	movlw	(low ((?_printf| 0+2)))& (0+255)
  5386  006A  0020               	movlb	0	; select bank0
  5387  006B  00B4               	movwf	??_printf
  5388  006C  0834               	movf	??_printf,w
  5389  006D  00BB               	movwf	printf@ap
  5390  006E                     l2963:	
  5391                           ;doprnt.c: 536: while(c = *f++) {
  5392                           
  5393  006E  0020               	movlb	0	; select bank0
  5394  006F  082F               	movf	printf@f+1,w
  5395  0070  00B5               	movwf	??_printf+1
  5396  0071  082E               	movf	printf@f,w
  5397  0072  00B4               	movwf	??_printf
  5398  0073  0AAE               	incf	printf@f,f
  5399  0074  1903               	skipnz
  5400  0075  0AAF               	incf	printf@f+1,f
  5401  0076  0834               	movf	??_printf,w
  5402  0077  0084               	movwf	4
  5403  0078  0835               	movf	??_printf+1,w
  5404  0079  0085               	movwf	5
  5405  007A  0800               	movf	0,w	;code access
  5406  007B  00B6               	movwf	??_printf+2
  5407  007C  0836               	movf	??_printf+2,w
  5408  007D  00C3               	movwf	printf@c
  5409  007E  0843               	movf	printf@c,w
  5410  007F  1903               	btfsc	3,2
  5411  0080  0008               	return
  5412                           
  5413                           ;doprnt.c: 538: if(c != '%')
  5414  0081  3025               	movlw	37
  5415  0082  0643               	xorwf	printf@c,w
  5416  0083  1903               	btfsc	3,2
  5417  0084  288A               	goto	l2839
  5418                           
  5419                           ;doprnt.c: 540: {
  5420                           ;doprnt.c: 541: (putch(c) );
  5421  0085  0843               	movf	printf@c,w
  5422  0086  3188  20CC  3180   	fcall	_putch
  5423                           
  5424                           ;doprnt.c: 542: continue;
  5425  0089  286E               	goto	l2963
  5426  008A                     l2839:	
  5427                           
  5428                           ;doprnt.c: 543: }
  5429                           ;doprnt.c: 546: width = 0;
  5430  008A  0020               	movlb	0	; select bank0
  5431  008B  01C1               	clrf	printf@width
  5432  008C  01C2               	clrf	printf@width+1
  5433                           
  5434                           ;doprnt.c: 548: flag = 0;
  5435  008D  01C0               	clrf	printf@flag
  5436                           
  5437                           ;doprnt.c: 551: switch(*f) {
  5438                           
  5439                           ;doprnt.c: 550: for(;;) {
  5440  008E  2894               	goto	l2845
  5441  008F                     l452:	
  5442                           ;doprnt.c: 579: case '0':
  5443                           
  5444                           
  5445                           ;doprnt.c: 580: flag |= 0x04;
  5446  008F  1540               	bsf	printf@flag,2
  5447                           
  5448                           ;doprnt.c: 581: f++;
  5449  0090  3001               	movlw	1
  5450  0091  07AE               	addwf	printf@f,f
  5451  0092  3000               	movlw	0
  5452  0093  3DAF               	addwfc	printf@f+1,f
  5453  0094                     l2845:	
  5454                           ;doprnt.c: 584: }
  5455                           
  5456                           ;doprnt.c: 582: continue;
  5457                           
  5458  0094  082E               	movf	printf@f,w
  5459  0095  0084               	movwf	4
  5460  0096  082F               	movf	printf@f+1,w
  5461  0097  0085               	movwf	5
  5462  0098  0800               	movf	0,w	;code access
  5463                           
  5464                           ; Switch size 1, requested type "space"
  5465                           ; Number of cases is 1, Range of values is 48 to 48
  5466                           ; switch strategies available:
  5467                           ; Name         Instructions Cycles
  5468                           ; simple_byte            4     3 (average)
  5469                           ; direct_byte           11     9 (fixed)
  5470                           ; jumptable            263     9 (fixed)
  5471                           ;	Chosen strategy is simple_byte
  5472  0099  3A30               	xorlw	48	; case 48
  5473  009A  1903               	skipnz
  5474  009B  288F               	goto	l452
  5475  009C  289D               	goto	l2847
  5476  009D                     l2847:	
  5477                           ;doprnt.c: 586: }
  5478                           
  5479                           ;doprnt.c: 585: break;
  5480                           
  5481                           
  5482                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5483  009D  082E               	movf	printf@f,w
  5484  009E  0084               	movwf	4
  5485  009F  082F               	movf	printf@f+1,w
  5486  00A0  0085               	movwf	5
  5487  00A1  0800               	movf	0,w	;code access
  5488  00A2  3189  214B  3180   	fcall	_isdigit
  5489  00A5  1C03               	btfss	3,0
  5490  00A6  293E               	goto	l2895
  5491                           
  5492                           ;doprnt.c: 598: width = 0;
  5493  00A7  0020               	movlb	0	; select bank0
  5494  00A8  01C1               	clrf	printf@width
  5495  00A9  01C2               	clrf	printf@width+1
  5496  00AA                     l2851:	
  5497                           ;doprnt.c: 599: do {
  5498                           
  5499                           
  5500                           ;doprnt.c: 600: width *= 10;
  5501  00AA  300A               	movlw	10
  5502  00AB  0020               	movlb	0	; select bank0
  5503  00AC  00A0               	movwf	___wmul@multiplier
  5504  00AD  3000               	movlw	0
  5505  00AE  00A1               	movwf	___wmul@multiplier+1
  5506  00AF  0842               	movf	printf@width+1,w
  5507  00B0  00A3               	movwf	___wmul@multiplicand+1
  5508  00B1  0841               	movf	printf@width,w
  5509  00B2  00A2               	movwf	___wmul@multiplicand
  5510  00B3  3189  21F1  3180   	fcall	___wmul
  5511  00B6  0020               	movlb	0	; select bank0
  5512  00B7  0821               	movf	?___wmul+1,w
  5513  00B8  00C2               	movwf	printf@width+1
  5514  00B9  0820               	movf	?___wmul,w
  5515  00BA  00C1               	movwf	printf@width
  5516                           
  5517                           ;doprnt.c: 601: width += *f++ - '0';
  5518  00BB  082E               	movf	printf@f,w
  5519  00BC  0084               	movwf	4
  5520  00BD  082F               	movf	printf@f+1,w
  5521  00BE  0085               	movwf	5
  5522  00BF  0800               	movf	0,w	;code access
  5523  00C0  3ED0               	addlw	208
  5524  00C1  00B4               	movwf	??_printf
  5525  00C2  30FF               	movlw	255
  5526  00C3  1803               	skipnc
  5527  00C4  3000               	movlw	0
  5528  00C5  00B5               	movwf	??_printf+1
  5529  00C6  0834               	movf	??_printf,w
  5530  00C7  07C1               	addwf	printf@width,f
  5531  00C8  0835               	movf	??_printf+1,w
  5532  00C9  3DC2               	addwfc	printf@width+1,f
  5533  00CA  3001               	movlw	1
  5534  00CB  07AE               	addwf	printf@f,f
  5535  00CC  3000               	movlw	0
  5536  00CD  3DAF               	addwfc	printf@f+1,f
  5537                           
  5538                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5539  00CE  082E               	movf	printf@f,w
  5540  00CF  0084               	movwf	4
  5541  00D0  082F               	movf	printf@f+1,w
  5542  00D1  0085               	movwf	5
  5543  00D2  0800               	movf	0,w	;code access
  5544  00D3  3189  214B  3180   	fcall	_isdigit
  5545  00D6  1C03               	btfss	3,0
  5546  00D7  293E               	goto	l2895
  5547  00D8  28AA               	goto	l2851
  5548  00D9                     l2859:	
  5549                           ;doprnt.c: 728: case 's':
  5550                           
  5551                           ;doprnt.c: 698: case 'i':
  5552                           ;doprnt.c: 699: break;
  5553                           
  5554                           ;doprnt.c: 697: case 'd':
  5555                           
  5556                           ;doprnt.c: 638: goto alldone;
  5557                           
  5558                           ;doprnt.c: 637: case 0:
  5559                           
  5560                           ;doprnt.c: 608: }
  5561                           ;doprnt.c: 635: switch(c = *f++) {
  5562                           
  5563                           
  5564                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  5565  00D9  0020               	movlb	0	; select bank0
  5566  00DA  083B               	movf	printf@ap,w
  5567  00DB  0086               	movwf	6
  5568  00DC  0187               	clrf	7
  5569  00DD  3F40               	moviw [0]fsr1
  5570  00DE  00B9               	movwf	printf@cp
  5571  00DF  3F41               	moviw [1]fsr1
  5572  00E0  00BA               	movwf	printf@cp+1
  5573  00E1  3002               	movlw	2
  5574  00E2  00B4               	movwf	??_printf
  5575  00E3  0834               	movf	??_printf,w
  5576  00E4  07BB               	addwf	printf@ap,f
  5577                           
  5578                           ;doprnt.c: 740: if(!cp)
  5579  00E5  0839               	movf	printf@cp,w
  5580  00E6  043A               	iorwf	printf@cp+1,w
  5581  00E7  1D03               	btfss	3,2
  5582  00E8  28ED               	goto	l2867
  5583                           
  5584                           ;doprnt.c: 741: cp = "(null)";
  5585  00E9  30B2               	movlw	low (STR_2| (0+32768))
  5586  00EA  00B9               	movwf	printf@cp
  5587  00EB  3086               	movlw	high (STR_2| (0+32768))
  5588  00EC  00BA               	movwf	printf@cp+1
  5589  00ED                     l2867:	
  5590                           
  5591                           ;doprnt.c: 745: len = 0;
  5592  00ED  01BE               	clrf	printf@len
  5593  00EE  01BF               	clrf	printf@len+1
  5594  00EF                     l2871:	
  5595                           ;doprnt.c: 746: while(cp[len])
  5596                           
  5597  00EF  0839               	movf	printf@cp,w
  5598  00F0  073E               	addwf	printf@len,w
  5599  00F1  0084               	movwf	4
  5600  00F2  083A               	movf	printf@cp+1,w
  5601  00F3  3D3F               	addwfc	printf@len+1,w
  5602  00F4  0085               	movwf	5
  5603  00F5  0012               	moviw fsr0++
  5604  00F6  1903               	btfsc	3,2
  5605  00F7  28FD               	goto	l2873
  5606                           
  5607                           ;doprnt.c: 747: len++;
  5608  00F8  3001               	movlw	1
  5609  00F9  07BE               	addwf	printf@len,f
  5610  00FA  3000               	movlw	0
  5611  00FB  3DBF               	addwfc	printf@len+1,f
  5612  00FC  28EF               	goto	l2871
  5613  00FD                     l2873:	
  5614                           ;doprnt.c: 750: dostring:
  5615                           
  5616                           
  5617                           ;doprnt.c: 757: if(width > len)
  5618  00FD  0842               	movf	printf@width+1,w
  5619  00FE  023F               	subwf	printf@len+1,w
  5620  00FF  1D03               	skipz
  5621  0100  2903               	goto	u2465
  5622  0101  0841               	movf	printf@width,w
  5623  0102  023E               	subwf	printf@len,w
  5624  0103                     u2465:	
  5625  0103  1803               	skipnc
  5626  0104  290A               	goto	l2877
  5627                           
  5628                           ;doprnt.c: 758: width -= len;
  5629  0105  083E               	movf	printf@len,w
  5630  0106  02C1               	subwf	printf@width,f
  5631  0107  083F               	movf	printf@len+1,w
  5632  0108  3BC2               	subwfb	printf@width+1,f
  5633  0109  290C               	goto	l2881
  5634  010A                     l2877:	
  5635                           
  5636                           ;doprnt.c: 759: else
  5637                           ;doprnt.c: 760: width = 0;
  5638  010A  01C1               	clrf	printf@width
  5639  010B  01C2               	clrf	printf@width+1
  5640  010C                     l2881:	
  5641                           ;doprnt.c: 764: while(width--)
  5642                           
  5643  010C  30FF               	movlw	255
  5644  010D  0020               	movlb	0	; select bank0
  5645  010E  07C1               	addwf	printf@width,f
  5646  010F  30FF               	movlw	255
  5647  0110  3DC2               	addwfc	printf@width+1,f
  5648  0111  0A41               	incf	printf@width,w
  5649  0112  1903               	btfsc	3,2
  5650  0113  0A42               	incf	printf@width+1,w
  5651  0114  1903               	btfsc	3,2
  5652  0115  2928               	goto	l2887
  5653                           
  5654                           ;doprnt.c: 765: (putch(' ') );
  5655  0116  3020               	movlw	32
  5656  0117  3188  20CC  3180   	fcall	_putch
  5657  011A  290C               	goto	l2881
  5658  011B                     l2883:	
  5659                           ;doprnt.c: 767: while(len--)
  5660                           
  5661                           
  5662                           ;doprnt.c: 768: (putch(*cp++) );
  5663  011B  0839               	movf	printf@cp,w
  5664  011C  0084               	movwf	4
  5665  011D  083A               	movf	printf@cp+1,w
  5666  011E  0085               	movwf	5
  5667  011F  0800               	movf	0,w	;code access
  5668  0120  3188  20CC  3180   	fcall	_putch
  5669  0123  3001               	movlw	1
  5670  0124  0020               	movlb	0	; select bank0
  5671  0125  07B9               	addwf	printf@cp,f
  5672  0126  3000               	movlw	0
  5673  0127  3DBA               	addwfc	printf@cp+1,f
  5674  0128                     l2887:	
  5675  0128  3001               	movlw	1
  5676  0129  02BE               	subwf	printf@len,f
  5677  012A  3000               	movlw	0
  5678  012B  3BBF               	subwfb	printf@len+1,f
  5679  012C  0A3E               	incf	printf@len,w
  5680  012D  1D03               	skipz
  5681  012E  291B               	goto	l2883
  5682  012F  0A3F               	incf	printf@len+1,w
  5683  0130  1903               	btfsc	3,2
  5684  0131  286E               	goto	l2963
  5685  0132  291B               	goto	l2883
  5686  0133                     l2889:	
  5687                           ;doprnt.c: 802: default:
  5688                           
  5689                           ;doprnt.c: 774: continue;
  5690                           
  5691                           
  5692                           ;doprnt.c: 805: cp = (char *)&c;
  5693  0133  3043               	movlw	low printf@c
  5694  0134  00B9               	movwf	printf@cp
  5695  0135  3000               	movlw	high printf@c
  5696  0136  00BA               	movwf	printf@cp+1
  5697                           
  5698                           ;doprnt.c: 806: len = 1;
  5699  0137  3001               	movlw	1
  5700  0138  00BE               	movwf	printf@len
  5701  0139  3000               	movlw	0
  5702  013A  00BF               	movwf	printf@len+1
  5703                           
  5704                           ;doprnt.c: 807: goto dostring;
  5705  013B  28FD               	goto	l2873
  5706  013C                     l480:	
  5707                           ;doprnt.c: 817: case 'u':
  5708                           
  5709                           
  5710                           ;doprnt.c: 818: flag |= 0x40;
  5711  013C  1740               	bsf	printf@flag,6
  5712                           
  5713                           ;doprnt.c: 822: }
  5714                           
  5715                           ;doprnt.c: 819: break;
  5716  013D  295C               	goto	l464
  5717  013E                     l2895:	
  5718  013E  0020               	movlb	0	; select bank0
  5719  013F  082F               	movf	printf@f+1,w
  5720  0140  00B5               	movwf	??_printf+1
  5721  0141  082E               	movf	printf@f,w
  5722  0142  00B4               	movwf	??_printf
  5723  0143  0AAE               	incf	printf@f,f
  5724  0144  1903               	skipnz
  5725  0145  0AAF               	incf	printf@f+1,f
  5726  0146  0834               	movf	??_printf,w
  5727  0147  0084               	movwf	4
  5728  0148  0835               	movf	??_printf+1,w
  5729  0149  0085               	movwf	5
  5730  014A  0800               	movf	0,w	;code access
  5731  014B  00C3               	movwf	printf@c
  5732                           
  5733                           ; Switch size 1, requested type "space"
  5734                           ; Number of cases is 5, Range of values is 0 to 117
  5735                           ; switch strategies available:
  5736                           ; Name         Instructions Cycles
  5737                           ; simple_byte           16     9 (average)
  5738                           ; direct_byte          242     6 (fixed)
  5739                           ; jumptable            260     6 (fixed)
  5740                           ;	Chosen strategy is simple_byte
  5741  014C  3A00               	xorlw	0	; case 0
  5742  014D  1903               	skipnz
  5743  014E  2A3D               	goto	l504
  5744  014F  3A64               	xorlw	100	; case 100
  5745  0150  1903               	skipnz
  5746  0151  295C               	goto	l464
  5747  0152  3A0D               	xorlw	13	; case 105
  5748  0153  1903               	skipnz
  5749  0154  295C               	goto	l464
  5750  0155  3A1A               	xorlw	26	; case 115
  5751  0156  1903               	skipnz
  5752  0157  28D9               	goto	l2859
  5753  0158  3A06               	xorlw	6	; case 117
  5754  0159  1903               	skipnz
  5755  015A  293C               	goto	l480
  5756  015B  2933               	goto	l2889
  5757  015C                     l464:	
  5758                           
  5759                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  5760  015C  0020               	movlb	0	; select bank0
  5761  015D  1B40               	btfsc	printf@flag,6
  5762  015E  2976               	goto	l2907
  5763                           
  5764                           ;doprnt.c: 1253: {
  5765                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5766  015F  083B               	movf	printf@ap,w
  5767  0160  0086               	movwf	6
  5768  0161  0187               	clrf	7
  5769  0162  3F40               	moviw [0]fsr1
  5770  0163  00BC               	movwf	printf@val
  5771  0164  3F41               	moviw [1]fsr1
  5772  0165  00BD               	movwf	printf@val+1
  5773  0166  3002               	movlw	2
  5774  0167  00B4               	movwf	??_printf
  5775  0168  0834               	movf	??_printf,w
  5776  0169  07BB               	addwf	printf@ap,f
  5777                           
  5778                           ;doprnt.c: 1261: if((int)val < 0) {
  5779  016A  1FBD               	btfss	printf@val+1,7
  5780  016B  2981               	goto	l2911
  5781                           
  5782                           ;doprnt.c: 1262: flag |= 0x03;
  5783  016C  3003               	movlw	3
  5784  016D  00B4               	movwf	??_printf
  5785  016E  0834               	movf	??_printf,w
  5786  016F  04C0               	iorwf	printf@flag,f
  5787                           
  5788                           ;doprnt.c: 1263: val = -val;
  5789  0170  09BC               	comf	printf@val,f
  5790  0171  09BD               	comf	printf@val+1,f
  5791  0172  0ABC               	incf	printf@val,f
  5792  0173  1903               	skipnz
  5793  0174  0ABD               	incf	printf@val+1,f
  5794                           
  5795                           ;doprnt.c: 1264: }
  5796                           ;doprnt.c: 1266: }
  5797  0175  2981               	goto	l2911
  5798  0176                     l2907:	
  5799                           
  5800                           ;doprnt.c: 1268: else
  5801                           ;doprnt.c: 1273: {
  5802                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5803  0176  083B               	movf	printf@ap,w
  5804  0177  0086               	movwf	6
  5805  0178  0187               	clrf	7
  5806  0179  3F40               	moviw [0]fsr1
  5807  017A  00BC               	movwf	printf@val
  5808  017B  3F41               	moviw [1]fsr1
  5809  017C  00BD               	movwf	printf@val+1
  5810  017D  3002               	movlw	2
  5811  017E  00B4               	movwf	??_printf
  5812  017F  0834               	movf	??_printf,w
  5813  0180  07BB               	addwf	printf@ap,f
  5814  0181                     l2911:	
  5815                           
  5816                           ;doprnt.c: 1287: }
  5817                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5818  0181  01C3               	clrf	printf@c
  5819  0182  0AC3               	incf	printf@c,f
  5820  0183  3005               	movlw	5
  5821  0184  0643               	xorwf	printf@c,w
  5822  0185  1903               	btfsc	3,2
  5823  0186  29A6               	goto	l2923
  5824  0187                     l2917:	
  5825                           
  5826                           ;doprnt.c: 1306: if(val < dpowers[c])
  5827  0187  0843               	movf	printf@c,w
  5828  0188  00B4               	movwf	??_printf
  5829  0189  01B5               	clrf	??_printf+1
  5830  018A  35B4               	lslf	??_printf,f
  5831  018B  0DB5               	rlf	??_printf+1,f
  5832  018C  3030               	movlw	low (_dpowers| (0+32768))
  5833  018D  0734               	addwf	??_printf,w
  5834  018E  0084               	movwf	4
  5835  018F  3086               	movlw	high (_dpowers| (0+32768))
  5836  0190  3D35               	addwfc	??_printf+1,w
  5837  0191  0085               	movwf	5
  5838  0192  3F00               	moviw [0]fsr0
  5839  0193  00B6               	movwf	??_printf+2
  5840  0194  3F01               	moviw [1]fsr0
  5841  0195  00B7               	movwf	??_printf+3
  5842  0196  0837               	movf	??_printf+3,w
  5843  0197  023D               	subwf	printf@val+1,w
  5844  0198  1D03               	skipz
  5845  0199  299C               	goto	u2525
  5846  019A  0836               	movf	??_printf+2,w
  5847  019B  023C               	subwf	printf@val,w
  5848  019C                     u2525:	
  5849  019C  1C03               	btfss	3,0
  5850  019D  29A6               	goto	l2923
  5851                           
  5852                           ;doprnt.c: 1307: break;
  5853  019E  3001               	movlw	1
  5854  019F  00B4               	movwf	??_printf
  5855  01A0  0834               	movf	??_printf,w
  5856  01A1  07C3               	addwf	printf@c,f
  5857  01A2  3005               	movlw	5
  5858  01A3  0643               	xorwf	printf@c,w
  5859  01A4  1D03               	btfss	3,2
  5860  01A5  2987               	goto	l2917
  5861  01A6                     l2923:	
  5862                           
  5863                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5864  01A6  0841               	movf	printf@width,w
  5865  01A7  0442               	iorwf	printf@width+1,w
  5866  01A8  1903               	btfsc	3,2
  5867  01A9  29B2               	goto	l487
  5868  01AA  0840               	movf	printf@flag,w
  5869  01AB  3903               	andlw	3
  5870  01AC  1903               	btfsc	3,2
  5871  01AD  29B2               	goto	l487
  5872                           
  5873                           ;doprnt.c: 1346: width--;
  5874  01AE  30FF               	movlw	255
  5875  01AF  07C1               	addwf	printf@width,f
  5876  01B0  30FF               	movlw	255
  5877  01B1  3DC2               	addwfc	printf@width+1,f
  5878  01B2                     l487:	
  5879                           
  5880                           ;doprnt.c: 1381: if(width > c)
  5881  01B2  0843               	movf	printf@c,w
  5882  01B3  00B4               	movwf	??_printf
  5883  01B4  01B5               	clrf	??_printf+1
  5884  01B5  1BB4               	btfsc	??_printf,7
  5885  01B6  03B5               	decf	??_printf+1,f
  5886  01B7  0835               	movf	??_printf+1,w
  5887  01B8  3A80               	xorlw	128
  5888  01B9  00B6               	movwf	??_printf+2
  5889  01BA  0842               	movf	printf@width+1,w
  5890  01BB  3A80               	xorlw	128
  5891  01BC  0236               	subwf	??_printf+2,w
  5892  01BD  1D03               	skipz
  5893  01BE  29C1               	goto	u2565
  5894  01BF  0841               	movf	printf@width,w
  5895  01C0  0234               	subwf	??_printf,w
  5896  01C1                     u2565:	
  5897  01C1  1803               	skipnc
  5898  01C2  29CE               	goto	l2931
  5899                           
  5900                           ;doprnt.c: 1382: width -= c;
  5901  01C3  0020               	movlb	0	; select bank0
  5902  01C4  0843               	movf	printf@c,w
  5903  01C5  00B4               	movwf	??_printf
  5904  01C6  01B5               	clrf	??_printf+1
  5905  01C7  1BB4               	btfsc	??_printf,7
  5906  01C8  03B5               	decf	??_printf+1,f
  5907  01C9  0834               	movf	??_printf,w
  5908  01CA  02C1               	subwf	printf@width,f
  5909  01CB  0835               	movf	??_printf+1,w
  5910  01CC  3BC2               	subwfb	printf@width+1,f
  5911  01CD  29D1               	goto	l2933
  5912  01CE                     l2931:	
  5913                           
  5914                           ;doprnt.c: 1383: else
  5915                           ;doprnt.c: 1384: width = 0;
  5916  01CE  0020               	movlb	0	; select bank0
  5917  01CF  01C1               	clrf	printf@width
  5918  01D0  01C2               	clrf	printf@width+1
  5919  01D1                     l2933:	
  5920                           
  5921                           ;doprnt.c: 1387: if(flag & 0x04) {
  5922  01D1  1D40               	btfss	printf@flag,2
  5923  01D2  29EA               	goto	l2945
  5924                           
  5925                           ;doprnt.c: 1392: if(flag & 0x03)
  5926  01D3  0840               	movf	printf@flag,w
  5927  01D4  3903               	andlw	3
  5928  01D5  1903               	btfsc	3,2
  5929  01D6  29DB               	goto	l2939
  5930                           
  5931                           ;doprnt.c: 1393: (putch('-') );
  5932  01D7  302D               	movlw	45
  5933  01D8  3188  20CC  3180   	fcall	_putch
  5934  01DB                     l2939:	
  5935                           
  5936                           ;doprnt.c: 1415: if(width)
  5937  01DB  0020               	movlb	0	; select bank0
  5938  01DC                     L3:	
  5939  01DC  0841               	movf	printf@width,w
  5940  01DD  0442               	iorwf	printf@width+1,w
  5941  01DE  1903               	btfsc	3,2
  5942  01DF  2A03               	goto	l2955
  5943                           
  5944                           ;doprnt.c: 1417: (putch('0') );
  5945                           
  5946                           ;doprnt.c: 1416: do
  5947  01E0  3030               	movlw	48
  5948  01E1  3188  20CC  3180   	fcall	_putch
  5949                           
  5950                           ;doprnt.c: 1418: while(--width);
  5951  01E4  30FF               	movlw	255
  5952  01E5  0020               	movlb	0	; select bank0
  5953  01E6  07C1               	addwf	printf@width,f
  5954  01E7  30FF               	movlw	255
  5955  01E8  3DC2               	addwfc	printf@width+1,f
  5956  01E9  29DC               	goto	L3
  5957  01EA                     l2945:	
  5958                           ;doprnt.c: 1420: } else
  5959                           
  5960                           
  5961                           ;doprnt.c: 1422: {
  5962                           ;doprnt.c: 1424: if(width
  5963                           ;doprnt.c: 1428: )
  5964  01EA  0841               	movf	printf@width,w
  5965  01EB  0442               	iorwf	printf@width+1,w
  5966  01EC  1903               	btfsc	3,2
  5967  01ED  29FB               	goto	l2951
  5968  01EE                     l2947:	
  5969                           ;doprnt.c: 1429: do
  5970                           
  5971                           
  5972                           ;doprnt.c: 1430: (putch(' ') );
  5973  01EE  3020               	movlw	32
  5974  01EF  3188  20CC  3180   	fcall	_putch
  5975                           
  5976                           ;doprnt.c: 1431: while(--width);
  5977  01F2  30FF               	movlw	255
  5978  01F3  0020               	movlb	0	; select bank0
  5979  01F4  07C1               	addwf	printf@width,f
  5980  01F5  30FF               	movlw	255
  5981  01F6  3DC2               	addwfc	printf@width+1,f
  5982  01F7  0841               	movf	printf@width,w
  5983  01F8  0442               	iorwf	printf@width+1,w
  5984  01F9  1D03               	btfss	3,2
  5985  01FA  29EE               	goto	l2947
  5986  01FB                     l2951:	
  5987                           
  5988                           ;doprnt.c: 1438: if(flag & 0x03)
  5989  01FB  0840               	movf	printf@flag,w
  5990  01FC  3903               	andlw	3
  5991  01FD  1903               	btfsc	3,2
  5992  01FE  2A03               	goto	l2955
  5993                           
  5994                           ;doprnt.c: 1439: (putch('-') );
  5995  01FF  302D               	movlw	45
  5996  0200  3188  20CC  3180   	fcall	_putch
  5997  0203                     l2955:	
  5998                           
  5999                           ;doprnt.c: 1469: }
  6000                           ;doprnt.c: 1472: prec = c;
  6001  0203  0020               	movlb	0	; select bank0
  6002  0204  0843               	movf	printf@c,w
  6003  0205  00B4               	movwf	??_printf
  6004  0206  0834               	movf	??_printf,w
  6005  0207  00B8               	movwf	printf@prec
  6006  0208                     l2961:	
  6007                           ;doprnt.c: 1474: while(prec--) {
  6008                           
  6009  0208  30FF               	movlw	255
  6010  0209  0020               	movlb	0	; select bank0
  6011  020A  00B4               	movwf	??_printf
  6012  020B  0834               	movf	??_printf,w
  6013  020C  07B8               	addwf	printf@prec,f
  6014  020D  0A38               	incf	printf@prec,w
  6015  020E  1903               	btfsc	3,2
  6016  020F  286E               	goto	l2963
  6017                           
  6018                           ;doprnt.c: 1478: {
  6019                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6020  0210  300A               	movlw	10
  6021  0211  00A8               	movwf	___lwmod@divisor
  6022  0212  3000               	movlw	0
  6023  0213  00A9               	movwf	___lwmod@divisor+1
  6024  0214  0838               	movf	printf@prec,w
  6025  0215  00B4               	movwf	??_printf
  6026  0216  01B5               	clrf	??_printf+1
  6027  0217  35B4               	lslf	??_printf,f
  6028  0218  0DB5               	rlf	??_printf+1,f
  6029  0219  3030               	movlw	low (_dpowers| (0+32768))
  6030  021A  0734               	addwf	??_printf,w
  6031  021B  0084               	movwf	4
  6032  021C  3086               	movlw	high (_dpowers| (0+32768))
  6033  021D  3D35               	addwfc	??_printf+1,w
  6034  021E  0085               	movwf	5
  6035  021F  3F00               	moviw [0]fsr0
  6036  0220  00A0               	movwf	___lwdiv@divisor
  6037  0221  3F01               	moviw [1]fsr0
  6038  0222  00A1               	movwf	___lwdiv@divisor+1
  6039  0223  083D               	movf	printf@val+1,w
  6040  0224  00A3               	movwf	___lwdiv@dividend+1
  6041  0225  083C               	movf	printf@val,w
  6042  0226  00A2               	movwf	___lwdiv@dividend
  6043  0227  318B  2372  3180   	fcall	___lwdiv
  6044  022A  0020               	movlb	0	; select bank0
  6045  022B  0821               	movf	?___lwdiv+1,w
  6046  022C  00AB               	movwf	___lwmod@dividend+1
  6047  022D  0820               	movf	?___lwdiv,w
  6048  022E  00AA               	movwf	___lwmod@dividend
  6049  022F  318B  2317  3180   	fcall	___lwmod
  6050  0232  0020               	movlb	0	; select bank0
  6051  0233  0828               	movf	?___lwmod,w
  6052  0234  3E30               	addlw	48
  6053  0235  00B6               	movwf	??_printf+2
  6054  0236  0836               	movf	??_printf+2,w
  6055  0237  00C3               	movwf	printf@c
  6056                           
  6057                           ;doprnt.c: 1523: }
  6058                           ;doprnt.c: 1524: (putch(c) );
  6059  0238  0843               	movf	printf@c,w
  6060  0239  3188  20CC  3180   	fcall	_putch
  6061  023C  2A08               	goto	l2961
  6062  023D                     l504:	
  6063                           ;doprnt.c: 1540: return 0;
  6064                           ;	Return value of _printf is never used
  6065                           
  6066                           ;doprnt.c: 1525: }
  6067                           ;doprnt.c: 1533: }
  6068                           ;doprnt.c: 1535: alldone:
  6069                           
  6070  023D  0008               	return
  6071  023E                     __end_of_printf:	
  6072                           
  6073                           	psect	text16
  6074  08CC                     __ptext16:	
  6075 ;; *************** function _putch *****************
  6076 ;; Defined at:
  6077 ;;		line 160 in file "mcc_generated_files/eusart.c"
  6078 ;; Parameters:    Size  Location     Type
  6079 ;;  txData          1    wreg     unsigned char 
  6080 ;; Auto vars:     Size  Location     Type
  6081 ;;  txData          1    2[BANK0 ] unsigned char 
  6082 ;; Return value:  Size  Location     Type
  6083 ;;                  1    wreg      void 
  6084 ;; Registers used:
  6085 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6086 ;; Tracked objects:
  6087 ;;		On entry : 0/0
  6088 ;;		On exit  : 0/0
  6089 ;;		Unchanged: 0/0
  6090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6092 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6094 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6095 ;;Total ram usage:        1 bytes
  6096 ;; Hardware stack levels used:    1
  6097 ;; Hardware stack levels required when called:    6
  6098 ;; This function calls:
  6099 ;;		_EUSART_Write
  6100 ;; This function is called by:
  6101 ;;		_printf
  6102 ;; This function uses a non-reentrant model
  6103 ;;
  6104                           
  6105                           
  6106                           ;psect for function _putch
  6107  08CC                     _putch:	
  6108                           
  6109                           ;incstack = 0
  6110                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6111                           ;putch@txData stored from wreg
  6112  08CC  0020               	movlb	0	; select bank0
  6113  08CD  00A2               	movwf	putch@txData
  6114                           
  6115                           ;eusart.c: 162: EUSART_Write(txData);
  6116  08CE  0822               	movf	putch@txData,w
  6117  08CF  318A  22CC         	fcall	_EUSART_Write
  6118  08D1  0008               	return
  6119  08D2                     __end_of_putch:	
  6120                           
  6121                           	psect	text17
  6122  0ACC                     __ptext17:	
  6123 ;; *************** function _EUSART_Write *****************
  6124 ;; Defined at:
  6125 ;;		line 132 in file "mcc_generated_files/eusart.c"
  6126 ;; Parameters:    Size  Location     Type
  6127 ;;  txData          1    wreg     unsigned char 
  6128 ;; Auto vars:     Size  Location     Type
  6129 ;;  txData          1    1[BANK0 ] unsigned char 
  6130 ;; Return value:  Size  Location     Type
  6131 ;;                  1    wreg      void 
  6132 ;; Registers used:
  6133 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6134 ;; Tracked objects:
  6135 ;;		On entry : 0/0
  6136 ;;		On exit  : 0/0
  6137 ;;		Unchanged: 0/0
  6138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6140 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6141 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6142 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6143 ;;Total ram usage:        2 bytes
  6144 ;; Hardware stack levels used:    1
  6145 ;; Hardware stack levels required when called:    5
  6146 ;; This function calls:
  6147 ;;		Nothing
  6148 ;; This function is called by:
  6149 ;;		_putch
  6150 ;; This function uses a non-reentrant model
  6151 ;;
  6152                           
  6153                           
  6154                           ;psect for function _EUSART_Write
  6155  0ACC                     _EUSART_Write:	
  6156                           
  6157                           ;incstack = 0
  6158                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  6159                           ;EUSART_Write@txData stored from wreg
  6160  0ACC  0020               	movlb	0	; select bank0
  6161  0ACD  00A1               	movwf	EUSART_Write@txData
  6162  0ACE                     l2695:	
  6163                           ;eusart.c: 135: {
  6164                           
  6165                           ;eusart.c: 134: while(0 == eusartTxBufferRemaining)
  6166                           
  6167  0ACE  087A               	movf	_eusartTxBufferRemaining,w	;volatile
  6168  0ACF  1903               	btfsc	3,2
  6169  0AD0  2ACE               	goto	l2695
  6170                           
  6171                           ;eusart.c: 136: }
  6172                           ;eusart.c: 138: if(0 == PIE1bits.TXIE)
  6173  0AD1  0021               	movlb	1	; select bank1
  6174  0AD2  1A11               	btfsc	17,4	;volatile
  6175  0AD3  2AD9               	goto	l229
  6176                           
  6177                           ;eusart.c: 139: {
  6178                           ;eusart.c: 140: TXREG = txData;
  6179  0AD4  0020               	movlb	0	; select bank0
  6180  0AD5  0821               	movf	EUSART_Write@txData,w
  6181  0AD6  0023               	movlb	3	; select bank3
  6182  0AD7  009A               	movwf	26	;volatile
  6183                           
  6184                           ;eusart.c: 141: }
  6185  0AD8  2AED               	goto	l2709
  6186  0AD9                     l229:	
  6187                           
  6188                           ;eusart.c: 142: else
  6189                           ;eusart.c: 143: {
  6190                           ;eusart.c: 144: PIE1bits.TXIE = 0;
  6191  0AD9  1211               	bcf	17,4	;volatile
  6192                           
  6193                           ;eusart.c: 145: eusartTxBuffer[eusartTxHead++] = txData;
  6194  0ADA  0020               	movlb	0	; select bank0
  6195  0ADB  0821               	movf	EUSART_Write@txData,w
  6196  0ADC  00A0               	movwf	??_EUSART_Write
  6197  0ADD  087C               	movf	_eusartTxHead,w
  6198  0ADE  3EA8               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  6199  0ADF  0086               	movwf	6
  6200  0AE0  0187               	clrf	7
  6201  0AE1  0820               	movf	??_EUSART_Write,w
  6202  0AE2  0081               	movwf	1
  6203  0AE3  3001               	movlw	1
  6204  0AE4  00A0               	movwf	??_EUSART_Write
  6205  0AE5  0820               	movf	??_EUSART_Write,w
  6206  0AE6  07FC               	addwf	_eusartTxHead,f	;volatile
  6207                           
  6208                           ;eusart.c: 146: if(sizeof(eusartTxBuffer) <= eusartTxHead)
  6209  0AE7  3008               	movlw	8
  6210  0AE8  027C               	subwf	_eusartTxHead,w	;volatile
  6211  0AE9  1803               	btfsc	3,0
  6212                           
  6213                           ;eusart.c: 147: {
  6214                           ;eusart.c: 148: eusartTxHead = 0;
  6215  0AEA  01FC               	clrf	_eusartTxHead	;volatile
  6216                           
  6217                           ;eusart.c: 149: }
  6218                           ;eusart.c: 150: eusartTxBufferRemaining--;
  6219  0AEB  3001               	movlw	1
  6220  0AEC  02FA               	subwf	_eusartTxBufferRemaining,f	;volatile
  6221  0AED                     l2709:	
  6222                           
  6223                           ;eusart.c: 151: }
  6224                           ;eusart.c: 152: PIE1bits.TXIE = 1;
  6225  0AED  0021               	movlb	1	; select bank1
  6226  0AEE  1611               	bsf	17,4	;volatile
  6227  0AEF  0008               	return
  6228  0AF0                     __end_of_EUSART_Write:	
  6229                           
  6230                           	psect	text18
  6231  0B17                     __ptext18:	
  6232 ;; *************** function ___lwmod *****************
  6233 ;; Defined at:
  6234 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  6235 ;; Parameters:    Size  Location     Type
  6236 ;;  divisor         2    8[BANK0 ] unsigned int 
  6237 ;;  dividend        2   10[BANK0 ] unsigned int 
  6238 ;; Auto vars:     Size  Location     Type
  6239 ;;  counter         1   13[BANK0 ] unsigned char 
  6240 ;; Return value:  Size  Location     Type
  6241 ;;                  2    8[BANK0 ] unsigned int 
  6242 ;; Registers used:
  6243 ;;		wreg, status,2, status,0
  6244 ;; Tracked objects:
  6245 ;;		On entry : 0/0
  6246 ;;		On exit  : 0/0
  6247 ;;		Unchanged: 0/0
  6248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6249 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6250 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6251 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6252 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6253 ;;Total ram usage:        6 bytes
  6254 ;; Hardware stack levels used:    1
  6255 ;; Hardware stack levels required when called:    5
  6256 ;; This function calls:
  6257 ;;		Nothing
  6258 ;; This function is called by:
  6259 ;;		_printf
  6260 ;; This function uses a non-reentrant model
  6261 ;;
  6262                           
  6263                           
  6264                           ;psect for function ___lwmod
  6265  0B17                     ___lwmod:	
  6266                           
  6267                           ;incstack = 0
  6268                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  6269  0B17  0020               	movlb	0	; select bank0
  6270  0B18  0828               	movf	___lwmod@divisor,w
  6271  0B19  0429               	iorwf	___lwmod@divisor+1,w
  6272  0B1A  1903               	btfsc	3,2
  6273  0B1B  2B3F               	goto	l2815
  6274  0B1C  01AD               	clrf	___lwmod@counter
  6275  0B1D  0AAD               	incf	___lwmod@counter,f
  6276  0B1E                     l2805:	
  6277  0B1E  1BA9               	btfsc	___lwmod@divisor+1,7
  6278  0B1F  2B2A               	goto	l2807
  6279  0B20  3001               	movlw	1
  6280  0B21                     u2365:	
  6281  0B21  35A8               	lslf	___lwmod@divisor,f
  6282  0B22  0DA9               	rlf	___lwmod@divisor+1,f
  6283  0B23  0B89               	decfsz	9,f
  6284  0B24  2B21               	goto	u2365
  6285  0B25  3001               	movlw	1
  6286  0B26  00AC               	movwf	??___lwmod
  6287  0B27  082C               	movf	??___lwmod,w
  6288  0B28  07AD               	addwf	___lwmod@counter,f
  6289  0B29  2B1E               	goto	l2805
  6290  0B2A                     l2807:	
  6291  0B2A  0829               	movf	___lwmod@divisor+1,w
  6292  0B2B  022B               	subwf	___lwmod@dividend+1,w
  6293  0B2C  1D03               	skipz
  6294  0B2D  2B30               	goto	u2385
  6295  0B2E  0828               	movf	___lwmod@divisor,w
  6296  0B2F  022A               	subwf	___lwmod@dividend,w
  6297  0B30                     u2385:	
  6298  0B30  1C03               	skipc
  6299  0B31  2B36               	goto	l2811
  6300  0B32  0828               	movf	___lwmod@divisor,w
  6301  0B33  02AA               	subwf	___lwmod@dividend,f
  6302  0B34  0829               	movf	___lwmod@divisor+1,w
  6303  0B35  3BAB               	subwfb	___lwmod@dividend+1,f
  6304  0B36                     l2811:	
  6305  0B36  3001               	movlw	1
  6306  0B37                     u2395:	
  6307  0B37  36A9               	lsrf	___lwmod@divisor+1,f
  6308  0B38  0CA8               	rrf	___lwmod@divisor,f
  6309  0B39  0B89               	decfsz	9,f
  6310  0B3A  2B37               	goto	u2395
  6311  0B3B  3001               	movlw	1
  6312  0B3C  02AD               	subwf	___lwmod@counter,f
  6313  0B3D  1D03               	btfss	3,2
  6314  0B3E  2B2A               	goto	l2807
  6315  0B3F                     l2815:	
  6316  0B3F  082B               	movf	___lwmod@dividend+1,w
  6317  0B40  00A9               	movwf	?___lwmod+1
  6318  0B41  082A               	movf	___lwmod@dividend,w
  6319  0B42  00A8               	movwf	?___lwmod
  6320  0B43  0008               	return
  6321  0B44                     __end_of___lwmod:	
  6322                           
  6323                           	psect	text19
  6324  0B72                     __ptext19:	
  6325 ;; *************** function ___lwdiv *****************
  6326 ;; Defined at:
  6327 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  6328 ;; Parameters:    Size  Location     Type
  6329 ;;  divisor         2    0[BANK0 ] unsigned int 
  6330 ;;  dividend        2    2[BANK0 ] unsigned int 
  6331 ;; Auto vars:     Size  Location     Type
  6332 ;;  quotient        2    5[BANK0 ] unsigned int 
  6333 ;;  counter         1    7[BANK0 ] unsigned char 
  6334 ;; Return value:  Size  Location     Type
  6335 ;;                  2    0[BANK0 ] unsigned int 
  6336 ;; Registers used:
  6337 ;;		wreg, status,2, status,0
  6338 ;; Tracked objects:
  6339 ;;		On entry : 0/0
  6340 ;;		On exit  : 0/0
  6341 ;;		Unchanged: 0/0
  6342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6343 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6344 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6345 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6346 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6347 ;;Total ram usage:        8 bytes
  6348 ;; Hardware stack levels used:    1
  6349 ;; Hardware stack levels required when called:    5
  6350 ;; This function calls:
  6351 ;;		Nothing
  6352 ;; This function is called by:
  6353 ;;		_printf
  6354 ;; This function uses a non-reentrant model
  6355 ;;
  6356                           
  6357                           
  6358                           ;psect for function ___lwdiv
  6359  0B72                     ___lwdiv:	
  6360                           
  6361                           ;incstack = 0
  6362                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6363  0B72  0020               	movlb	0	; select bank0
  6364  0B73  01A5               	clrf	___lwdiv@quotient
  6365  0B74  01A6               	clrf	___lwdiv@quotient+1
  6366  0B75  0820               	movf	___lwdiv@divisor,w
  6367  0B76  0421               	iorwf	___lwdiv@divisor+1,w
  6368  0B77  1903               	btfsc	3,2
  6369  0B78  2BA2               	goto	l2793
  6370  0B79  01A7               	clrf	___lwdiv@counter
  6371  0B7A  0AA7               	incf	___lwdiv@counter,f
  6372  0B7B                     l2781:	
  6373  0B7B  1BA1               	btfsc	___lwdiv@divisor+1,7
  6374  0B7C  2B87               	goto	l2783
  6375  0B7D  3001               	movlw	1
  6376  0B7E                     u2295:	
  6377  0B7E  35A0               	lslf	___lwdiv@divisor,f
  6378  0B7F  0DA1               	rlf	___lwdiv@divisor+1,f
  6379  0B80  0B89               	decfsz	9,f
  6380  0B81  2B7E               	goto	u2295
  6381  0B82  3001               	movlw	1
  6382  0B83  00A4               	movwf	??___lwdiv
  6383  0B84  0824               	movf	??___lwdiv,w
  6384  0B85  07A7               	addwf	___lwdiv@counter,f
  6385  0B86  2B7B               	goto	l2781
  6386  0B87                     l2783:	
  6387  0B87  3001               	movlw	1
  6388  0B88                     u2315:	
  6389  0B88  35A5               	lslf	___lwdiv@quotient,f
  6390  0B89  0DA6               	rlf	___lwdiv@quotient+1,f
  6391  0B8A  0B89               	decfsz	9,f
  6392  0B8B  2B88               	goto	u2315
  6393  0B8C  0821               	movf	___lwdiv@divisor+1,w
  6394  0B8D  0223               	subwf	___lwdiv@dividend+1,w
  6395  0B8E  1D03               	skipz
  6396  0B8F  2B92               	goto	u2325
  6397  0B90  0820               	movf	___lwdiv@divisor,w
  6398  0B91  0222               	subwf	___lwdiv@dividend,w
  6399  0B92                     u2325:	
  6400  0B92  1C03               	skipc
  6401  0B93  2B99               	goto	l2789
  6402  0B94  0820               	movf	___lwdiv@divisor,w
  6403  0B95  02A2               	subwf	___lwdiv@dividend,f
  6404  0B96  0821               	movf	___lwdiv@divisor+1,w
  6405  0B97  3BA3               	subwfb	___lwdiv@dividend+1,f
  6406  0B98  1425               	bsf	___lwdiv@quotient,0
  6407  0B99                     l2789:	
  6408  0B99  3001               	movlw	1
  6409  0B9A                     u2335:	
  6410  0B9A  36A1               	lsrf	___lwdiv@divisor+1,f
  6411  0B9B  0CA0               	rrf	___lwdiv@divisor,f
  6412  0B9C  0B89               	decfsz	9,f
  6413  0B9D  2B9A               	goto	u2335
  6414  0B9E  3001               	movlw	1
  6415  0B9F  02A7               	subwf	___lwdiv@counter,f
  6416  0BA0  1D03               	btfss	3,2
  6417  0BA1  2B87               	goto	l2783
  6418  0BA2                     l2793:	
  6419  0BA2  0826               	movf	___lwdiv@quotient+1,w
  6420  0BA3  00A1               	movwf	?___lwdiv+1
  6421  0BA4  0825               	movf	___lwdiv@quotient,w
  6422  0BA5  00A0               	movwf	?___lwdiv
  6423  0BA6  0008               	return
  6424  0BA7                     __end_of___lwdiv:	
  6425                           
  6426                           	psect	text20
  6427  095A                     __ptext20:	
  6428 ;; *************** function _abs *****************
  6429 ;; Defined at:
  6430 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\abs.c"
  6431 ;; Parameters:    Size  Location     Type
  6432 ;;  a               2    7[BANK0 ] int 
  6433 ;; Auto vars:     Size  Location     Type
  6434 ;;		None
  6435 ;; Return value:  Size  Location     Type
  6436 ;;                  2    7[BANK0 ] int 
  6437 ;; Registers used:
  6438 ;;		wreg, status,2, status,0
  6439 ;; Tracked objects:
  6440 ;;		On entry : 0/0
  6441 ;;		On exit  : 0/0
  6442 ;;		Unchanged: 0/0
  6443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6444 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6445 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6446 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6447 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6448 ;;Total ram usage:        4 bytes
  6449 ;; Hardware stack levels used:    1
  6450 ;; Hardware stack levels required when called:    5
  6451 ;; This function calls:
  6452 ;;		Nothing
  6453 ;; This function is called by:
  6454 ;;		_PROTOCOL_I2C_Send_float
  6455 ;; This function uses a non-reentrant model
  6456 ;;
  6457                           
  6458                           
  6459                           ;psect for function _abs
  6460  095A                     _abs:	
  6461                           
  6462                           ;incstack = 0
  6463                           ; Regs used in _abs: [wreg+status,2+status,0]
  6464  095A  0020               	movlb	0	; select bank0
  6465  095B  1FA8               	btfss	abs@a+1,7
  6466  095C  0008               	return
  6467  095D  0927               	comf	abs@a,w
  6468  095E  00A9               	movwf	??_abs
  6469  095F  0928               	comf	abs@a+1,w
  6470  0960  00AA               	movwf	??_abs+1
  6471  0961  0AA9               	incf	??_abs,f
  6472  0962  1903               	skipnz
  6473  0963  0AAA               	incf	??_abs+1,f
  6474  0964  0829               	movf	??_abs,w
  6475  0965  00A7               	movwf	?_abs
  6476  0966  082A               	movf	??_abs+1,w
  6477  0967  00A8               	movwf	?_abs+1
  6478  0968  0008               	return
  6479  0969                     __end_of_abs:	
  6480                           
  6481                           	psect	text21
  6482  0E1C                     __ptext21:	
  6483 ;; *************** function ___fttol *****************
  6484 ;; Defined at:
  6485 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\fttol.c"
  6486 ;; Parameters:    Size  Location     Type
  6487 ;;  f1              3   24[BANK0 ] float 
  6488 ;; Auto vars:     Size  Location     Type
  6489 ;;  lval            4   33[BANK0 ] unsigned long 
  6490 ;;  exp1            1   37[BANK0 ] unsigned char 
  6491 ;;  sign1           1   32[BANK0 ] unsigned char 
  6492 ;; Return value:  Size  Location     Type
  6493 ;;                  4   24[BANK0 ] long 
  6494 ;; Registers used:
  6495 ;;		wreg, status,2, status,0
  6496 ;; Tracked objects:
  6497 ;;		On entry : 0/0
  6498 ;;		On exit  : 0/0
  6499 ;;		Unchanged: 0/0
  6500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6501 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6502 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6503 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6504 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6505 ;;Total ram usage:       14 bytes
  6506 ;; Hardware stack levels used:    1
  6507 ;; Hardware stack levels required when called:    5
  6508 ;; This function calls:
  6509 ;;		Nothing
  6510 ;; This function is called by:
  6511 ;;		_PROTOCOL_I2C_Send_float
  6512 ;; This function uses a non-reentrant model
  6513 ;;
  6514                           
  6515                           
  6516                           ;psect for function ___fttol
  6517  0E1C                     ___fttol:	
  6518                           
  6519                           ;incstack = 0
  6520                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  6521  0E1C  0020               	movlb	0	; select bank0
  6522  0E1D  0838               	movf	___fttol@f1,w
  6523  0E1E  00BC               	movwf	??___fttol
  6524  0E1F  0839               	movf	___fttol@f1+1,w
  6525  0E20  00BD               	movwf	??___fttol+1
  6526  0E21  083A               	movf	___fttol@f1+2,w
  6527  0E22  00BE               	movwf	??___fttol+2
  6528  0E23  1003               	clrc
  6529  0E24  0D3D               	rlf	??___fttol+1,w
  6530  0E25  0D3E               	rlf	??___fttol+2,w
  6531  0E26  00BF               	movwf	??___fttol+3
  6532  0E27  083F               	movf	??___fttol+3,w
  6533  0E28  00C5               	movwf	___fttol@exp1
  6534  0E29  0845               	movf	___fttol@exp1,w
  6535  0E2A  1D03               	btfss	3,2
  6536  0E2B  2E35               	goto	l3245
  6537  0E2C  3000               	movlw	0
  6538  0E2D  00BB               	movwf	?___fttol+3
  6539  0E2E  3000               	movlw	0
  6540  0E2F  00BA               	movwf	?___fttol+2
  6541  0E30  3000               	movlw	0
  6542  0E31  00B9               	movwf	?___fttol+1
  6543  0E32  3000               	movlw	0
  6544  0E33  00B8               	movwf	?___fttol
  6545  0E34  0008               	return
  6546  0E35                     l3245:	
  6547  0E35  0838               	movf	___fttol@f1,w
  6548  0E36  00BC               	movwf	??___fttol
  6549  0E37  0839               	movf	___fttol@f1+1,w
  6550  0E38  00BD               	movwf	??___fttol+1
  6551  0E39  083A               	movf	___fttol@f1+2,w
  6552  0E3A  00BE               	movwf	??___fttol+2
  6553  0E3B  3017               	movlw	23
  6554  0E3C                     u3335:	
  6555  0E3C  36BE               	lsrf	??___fttol+2,f
  6556  0E3D  0CBD               	rrf	??___fttol+1,f
  6557  0E3E  0CBC               	rrf	??___fttol,f
  6558  0E3F  0B89               	decfsz	9,f
  6559  0E40  2E3C               	goto	u3335
  6560  0E41  083C               	movf	??___fttol,w
  6561  0E42  00BF               	movwf	??___fttol+3
  6562  0E43  083F               	movf	??___fttol+3,w
  6563  0E44  00C0               	movwf	___fttol@sign1
  6564  0E45  17B9               	bsf	___fttol@f1+1,7
  6565  0E46  30FF               	movlw	255
  6566  0E47  05B8               	andwf	___fttol@f1,f
  6567  0E48  30FF               	movlw	255
  6568  0E49  05B9               	andwf	___fttol@f1+1,f
  6569  0E4A  3000               	movlw	0
  6570  0E4B  05BA               	andwf	___fttol@f1+2,f
  6571  0E4C  0838               	movf	___fttol@f1,w
  6572  0E4D  00C1               	movwf	___fttol@lval
  6573  0E4E  0839               	movf	___fttol@f1+1,w
  6574  0E4F  00C2               	movwf	___fttol@lval+1
  6575  0E50  083A               	movf	___fttol@f1+2,w
  6576  0E51  00C3               	movwf	___fttol@lval+2
  6577  0E52  01C4               	clrf	___fttol@lval+3
  6578  0E53  308E               	movlw	142
  6579  0E54  02C5               	subwf	___fttol@exp1,f
  6580  0E55  1FC5               	btfss	___fttol@exp1,7
  6581  0E56  2E73               	goto	l3265
  6582  0E57  0845               	movf	___fttol@exp1,w
  6583  0E58  3A80               	xorlw	128
  6584  0E59  3E8F               	addlw	143
  6585  0E5A  1803               	skipnc
  6586  0E5B  2E65               	goto	l3263
  6587  0E5C  3000               	movlw	0
  6588  0E5D  00BB               	movwf	?___fttol+3
  6589  0E5E  3000               	movlw	0
  6590  0E5F  00BA               	movwf	?___fttol+2
  6591  0E60  3000               	movlw	0
  6592  0E61  00B9               	movwf	?___fttol+1
  6593  0E62  3000               	movlw	0
  6594  0E63  00B8               	movwf	?___fttol
  6595  0E64  0008               	return
  6596  0E65                     l3263:	
  6597  0E65  3001               	movlw	1
  6598  0E66                     u3365:	
  6599  0E66  36C4               	lsrf	___fttol@lval+3,f
  6600  0E67  0CC3               	rrf	___fttol@lval+2,f
  6601  0E68  0CC2               	rrf	___fttol@lval+1,f
  6602  0E69  0CC1               	rrf	___fttol@lval,f
  6603  0E6A  0B89               	decfsz	9,f
  6604  0E6B  2E66               	goto	u3365
  6605  0E6C  3001               	movlw	1
  6606  0E6D  00BC               	movwf	??___fttol
  6607  0E6E  083C               	movf	??___fttol,w
  6608  0E6F  07C5               	addwf	___fttol@exp1,f
  6609  0E70  1903               	btfsc	3,2
  6610  0E71  2E8C               	goto	l3273
  6611  0E72  2E65               	goto	l3263
  6612  0E73                     l3265:	
  6613  0E73  3018               	movlw	24
  6614  0E74  0245               	subwf	___fttol@exp1,w
  6615  0E75  1C03               	skipc
  6616  0E76  2E89               	goto	l1169
  6617  0E77  3000               	movlw	0
  6618  0E78  00BB               	movwf	?___fttol+3
  6619  0E79  3000               	movlw	0
  6620  0E7A  00BA               	movwf	?___fttol+2
  6621  0E7B  3000               	movlw	0
  6622  0E7C  00B9               	movwf	?___fttol+1
  6623  0E7D  3000               	movlw	0
  6624  0E7E  00B8               	movwf	?___fttol
  6625  0E7F  0008               	return
  6626  0E80                     l3271:	
  6627  0E80  3001               	movlw	1
  6628  0E81                     u3395:	
  6629  0E81  35C1               	lslf	___fttol@lval,f
  6630  0E82  0DC2               	rlf	___fttol@lval+1,f
  6631  0E83  0DC3               	rlf	___fttol@lval+2,f
  6632  0E84  0DC4               	rlf	___fttol@lval+3,f
  6633  0E85  0B89               	decfsz	9,f
  6634  0E86  2E81               	goto	u3395
  6635  0E87  3001               	movlw	1
  6636  0E88  02C5               	subwf	___fttol@exp1,f
  6637  0E89                     l1169:	
  6638  0E89  0845               	movf	___fttol@exp1,w
  6639  0E8A  1D03               	btfss	3,2
  6640  0E8B  2E80               	goto	l3271
  6641  0E8C                     l3273:	
  6642  0E8C  0840               	movf	___fttol@sign1,w
  6643  0E8D  1903               	btfsc	3,2
  6644  0E8E  2E9A               	goto	l3277
  6645  0E8F  09C1               	comf	___fttol@lval,f
  6646  0E90  09C2               	comf	___fttol@lval+1,f
  6647  0E91  09C3               	comf	___fttol@lval+2,f
  6648  0E92  09C4               	comf	___fttol@lval+3,f
  6649  0E93  0AC1               	incf	___fttol@lval,f
  6650  0E94  1903               	skipnz
  6651  0E95  0AC2               	incf	___fttol@lval+1,f
  6652  0E96  1903               	skipnz
  6653  0E97  0AC3               	incf	___fttol@lval+2,f
  6654  0E98  1903               	skipnz
  6655  0E99  0AC4               	incf	___fttol@lval+3,f
  6656  0E9A                     l3277:	
  6657  0E9A  0844               	movf	___fttol@lval+3,w
  6658  0E9B  00BB               	movwf	?___fttol+3
  6659  0E9C  0843               	movf	___fttol@lval+2,w
  6660  0E9D  00BA               	movwf	?___fttol+2
  6661  0E9E  0842               	movf	___fttol@lval+1,w
  6662  0E9F  00B9               	movwf	?___fttol+1
  6663  0EA0  0841               	movf	___fttol@lval,w
  6664  0EA1  00B8               	movwf	?___fttol
  6665  0EA2  0008               	return
  6666  0EA3                     __end_of___fttol:	
  6667                           
  6668                           	psect	text22
  6669  0F4C                     __ptext22:	
  6670 ;; *************** function ___ftmul *****************
  6671 ;; Defined at:
  6672 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftmul.c"
  6673 ;; Parameters:    Size  Location     Type
  6674 ;;  f1              3    8[BANK0 ] float 
  6675 ;;  f2              3   11[BANK0 ] float 
  6676 ;; Auto vars:     Size  Location     Type
  6677 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
  6678 ;;  sign            1   23[BANK0 ] unsigned char 
  6679 ;;  cntr            1   22[BANK0 ] unsigned char 
  6680 ;;  exp             1   18[BANK0 ] unsigned char 
  6681 ;; Return value:  Size  Location     Type
  6682 ;;                  3    8[BANK0 ] float 
  6683 ;; Registers used:
  6684 ;;		wreg, status,2, status,0, pclath, cstack
  6685 ;; Tracked objects:
  6686 ;;		On entry : 0/0
  6687 ;;		On exit  : 0/0
  6688 ;;		Unchanged: 0/0
  6689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6690 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6691 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6692 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6693 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6694 ;;Total ram usage:       16 bytes
  6695 ;; Hardware stack levels used:    1
  6696 ;; Hardware stack levels required when called:    6
  6697 ;; This function calls:
  6698 ;;		___ftpack
  6699 ;; This function is called by:
  6700 ;;		_PROTOCOL_I2C_Send_float
  6701 ;; This function uses a non-reentrant model
  6702 ;;
  6703                           
  6704                           
  6705                           ;psect for function ___ftmul
  6706  0F4C                     ___ftmul:	
  6707                           
  6708                           ;incstack = 0
  6709                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  6710  0F4C  0020               	movlb	0	; select bank0
  6711  0F4D  0828               	movf	___ftmul@f1,w
  6712  0F4E  00AE               	movwf	??___ftmul
  6713  0F4F  0829               	movf	___ftmul@f1+1,w
  6714  0F50  00AF               	movwf	??___ftmul+1
  6715  0F51  082A               	movf	___ftmul@f1+2,w
  6716  0F52  00B0               	movwf	??___ftmul+2
  6717  0F53  1003               	clrc
  6718  0F54  0D2F               	rlf	??___ftmul+1,w
  6719  0F55  0D30               	rlf	??___ftmul+2,w
  6720  0F56  00B1               	movwf	??___ftmul+3
  6721  0F57  0831               	movf	??___ftmul+3,w
  6722  0F58  00B2               	movwf	___ftmul@exp
  6723  0F59  0832               	movf	___ftmul@exp,w
  6724  0F5A  1D03               	btfss	3,2
  6725  0F5B  2F63               	goto	l3195
  6726  0F5C  3000               	movlw	0
  6727  0F5D  00A8               	movwf	?___ftmul
  6728  0F5E  3000               	movlw	0
  6729  0F5F  00A9               	movwf	?___ftmul+1
  6730  0F60  3000               	movlw	0
  6731  0F61  00AA               	movwf	?___ftmul+2
  6732  0F62  0008               	return
  6733  0F63                     l3195:	
  6734  0F63  082B               	movf	___ftmul@f2,w
  6735  0F64  00AE               	movwf	??___ftmul
  6736  0F65  082C               	movf	___ftmul@f2+1,w
  6737  0F66  00AF               	movwf	??___ftmul+1
  6738  0F67  082D               	movf	___ftmul@f2+2,w
  6739  0F68  00B0               	movwf	??___ftmul+2
  6740  0F69  1003               	clrc
  6741  0F6A  0D2F               	rlf	??___ftmul+1,w
  6742  0F6B  0D30               	rlf	??___ftmul+2,w
  6743  0F6C  00B1               	movwf	??___ftmul+3
  6744  0F6D  0831               	movf	??___ftmul+3,w
  6745  0F6E  00B7               	movwf	___ftmul@sign
  6746  0F6F  0837               	movf	___ftmul@sign,w
  6747  0F70  1D03               	btfss	3,2
  6748  0F71  2F79               	goto	l3201
  6749  0F72  3000               	movlw	0
  6750  0F73  00A8               	movwf	?___ftmul
  6751  0F74  3000               	movlw	0
  6752  0F75  00A9               	movwf	?___ftmul+1
  6753  0F76  3000               	movlw	0
  6754  0F77  00AA               	movwf	?___ftmul+2
  6755  0F78  0008               	return
  6756  0F79                     l3201:	
  6757  0F79  0837               	movf	___ftmul@sign,w
  6758  0F7A  3E7B               	addlw	123
  6759  0F7B  00AE               	movwf	??___ftmul
  6760  0F7C  082E               	movf	??___ftmul,w
  6761  0F7D  07B2               	addwf	___ftmul@exp,f
  6762  0F7E  0828               	movf	___ftmul@f1,w
  6763  0F7F  00AE               	movwf	??___ftmul
  6764  0F80  0829               	movf	___ftmul@f1+1,w
  6765  0F81  00AF               	movwf	??___ftmul+1
  6766  0F82  082A               	movf	___ftmul@f1+2,w
  6767  0F83  00B0               	movwf	??___ftmul+2
  6768  0F84  3010               	movlw	16
  6769  0F85                     u3225:	
  6770  0F85  36B0               	lsrf	??___ftmul+2,f
  6771  0F86  0CAF               	rrf	??___ftmul+1,f
  6772  0F87  0CAE               	rrf	??___ftmul,f
  6773  0F88  0B89               	decfsz	9,f
  6774  0F89  2F85               	goto	u3225
  6775  0F8A  082E               	movf	??___ftmul,w
  6776  0F8B  00B1               	movwf	??___ftmul+3
  6777  0F8C  0831               	movf	??___ftmul+3,w
  6778  0F8D  00B7               	movwf	___ftmul@sign
  6779  0F8E  082B               	movf	___ftmul@f2,w
  6780  0F8F  00AE               	movwf	??___ftmul
  6781  0F90  082C               	movf	___ftmul@f2+1,w
  6782  0F91  00AF               	movwf	??___ftmul+1
  6783  0F92  082D               	movf	___ftmul@f2+2,w
  6784  0F93  00B0               	movwf	??___ftmul+2
  6785  0F94  3010               	movlw	16
  6786  0F95                     u3235:	
  6787  0F95  36B0               	lsrf	??___ftmul+2,f
  6788  0F96  0CAF               	rrf	??___ftmul+1,f
  6789  0F97  0CAE               	rrf	??___ftmul,f
  6790  0F98  0B89               	decfsz	9,f
  6791  0F99  2F95               	goto	u3235
  6792  0F9A  082E               	movf	??___ftmul,w
  6793  0F9B  00B1               	movwf	??___ftmul+3
  6794  0F9C  0831               	movf	??___ftmul+3,w
  6795  0F9D  06B7               	xorwf	___ftmul@sign,f
  6796  0F9E  3080               	movlw	128
  6797  0F9F  00AE               	movwf	??___ftmul
  6798  0FA0  082E               	movf	??___ftmul,w
  6799  0FA1  05B7               	andwf	___ftmul@sign,f
  6800  0FA2  17A9               	bsf	___ftmul@f1+1,7
  6801  0FA3  17AC               	bsf	___ftmul@f2+1,7
  6802  0FA4  30FF               	movlw	255
  6803  0FA5  05AB               	andwf	___ftmul@f2,f
  6804  0FA6  30FF               	movlw	255
  6805  0FA7  05AC               	andwf	___ftmul@f2+1,f
  6806  0FA8  3000               	movlw	0
  6807  0FA9  05AD               	andwf	___ftmul@f2+2,f
  6808  0FAA  3000               	movlw	0
  6809  0FAB  00B3               	movwf	___ftmul@f3_as_product
  6810  0FAC  3000               	movlw	0
  6811  0FAD  00B4               	movwf	___ftmul@f3_as_product+1
  6812  0FAE  3000               	movlw	0
  6813  0FAF  00B5               	movwf	___ftmul@f3_as_product+2
  6814  0FB0  3007               	movlw	7
  6815  0FB1  00AE               	movwf	??___ftmul
  6816  0FB2  082E               	movf	??___ftmul,w
  6817  0FB3  00B6               	movwf	___ftmul@cntr
  6818  0FB4                     l3213:	
  6819  0FB4  1C28               	btfss	___ftmul@f1,0
  6820  0FB5  2FBC               	goto	l3217
  6821  0FB6  082B               	movf	___ftmul@f2,w
  6822  0FB7  07B3               	addwf	___ftmul@f3_as_product,f
  6823  0FB8  082C               	movf	___ftmul@f2+1,w
  6824  0FB9  3DB4               	addwfc	___ftmul@f3_as_product+1,f
  6825  0FBA  082D               	movf	___ftmul@f2+2,w
  6826  0FBB  3DB5               	addwfc	___ftmul@f3_as_product+2,f
  6827  0FBC                     l3217:	
  6828  0FBC  3001               	movlw	1
  6829  0FBD                     u3255:	
  6830  0FBD  36AA               	lsrf	___ftmul@f1+2,f
  6831  0FBE  0CA9               	rrf	___ftmul@f1+1,f
  6832  0FBF  0CA8               	rrf	___ftmul@f1,f
  6833  0FC0  0B89               	decfsz	9,f
  6834  0FC1  2FBD               	goto	u3255
  6835  0FC2  3001               	movlw	1
  6836  0FC3                     u3265:	
  6837  0FC3  35AB               	lslf	___ftmul@f2,f
  6838  0FC4  0DAC               	rlf	___ftmul@f2+1,f
  6839  0FC5  0DAD               	rlf	___ftmul@f2+2,f
  6840  0FC6  0B89               	decfsz	9,f
  6841  0FC7  2FC3               	goto	u3265
  6842  0FC8  3001               	movlw	1
  6843  0FC9  02B6               	subwf	___ftmul@cntr,f
  6844  0FCA  1D03               	btfss	3,2
  6845  0FCB  2FB4               	goto	l3213
  6846  0FCC  3009               	movlw	9
  6847  0FCD  00AE               	movwf	??___ftmul
  6848  0FCE  082E               	movf	??___ftmul,w
  6849  0FCF  00B6               	movwf	___ftmul@cntr
  6850  0FD0                     l3225:	
  6851  0FD0  1C28               	btfss	___ftmul@f1,0
  6852  0FD1  2FD8               	goto	l3229
  6853  0FD2  082B               	movf	___ftmul@f2,w
  6854  0FD3  07B3               	addwf	___ftmul@f3_as_product,f
  6855  0FD4  082C               	movf	___ftmul@f2+1,w
  6856  0FD5  3DB4               	addwfc	___ftmul@f3_as_product+1,f
  6857  0FD6  082D               	movf	___ftmul@f2+2,w
  6858  0FD7  3DB5               	addwfc	___ftmul@f3_as_product+2,f
  6859  0FD8                     l3229:	
  6860  0FD8  3001               	movlw	1
  6861  0FD9                     u3295:	
  6862  0FD9  36AA               	lsrf	___ftmul@f1+2,f
  6863  0FDA  0CA9               	rrf	___ftmul@f1+1,f
  6864  0FDB  0CA8               	rrf	___ftmul@f1,f
  6865  0FDC  0B89               	decfsz	9,f
  6866  0FDD  2FD9               	goto	u3295
  6867  0FDE  3001               	movlw	1
  6868  0FDF                     u3305:	
  6869  0FDF  36B5               	lsrf	___ftmul@f3_as_product+2,f
  6870  0FE0  0CB4               	rrf	___ftmul@f3_as_product+1,f
  6871  0FE1  0CB3               	rrf	___ftmul@f3_as_product,f
  6872  0FE2  0B89               	decfsz	9,f
  6873  0FE3  2FDF               	goto	u3305
  6874  0FE4  3001               	movlw	1
  6875  0FE5  02B6               	subwf	___ftmul@cntr,f
  6876  0FE6  1D03               	btfss	3,2
  6877  0FE7  2FD0               	goto	l3225
  6878  0FE8  0833               	movf	___ftmul@f3_as_product,w
  6879  0FE9  00A0               	movwf	___ftpack@arg
  6880  0FEA  0834               	movf	___ftmul@f3_as_product+1,w
  6881  0FEB  00A1               	movwf	___ftpack@arg+1
  6882  0FEC  0835               	movf	___ftmul@f3_as_product+2,w
  6883  0FED  00A2               	movwf	___ftpack@arg+2
  6884  0FEE  0832               	movf	___ftmul@exp,w
  6885  0FEF  00AE               	movwf	??___ftmul
  6886  0FF0  082E               	movf	??___ftmul,w
  6887  0FF1  00A3               	movwf	___ftpack@exp
  6888  0FF2  0837               	movf	___ftmul@sign,w
  6889  0FF3  00AF               	movwf	??___ftmul+1
  6890  0FF4  082F               	movf	??___ftmul+1,w
  6891  0FF5  00A4               	movwf	___ftpack@sign
  6892  0FF6  318D  2546         	fcall	___ftpack
  6893  0FF8  0020               	movlb	0	; select bank0
  6894  0FF9  0820               	movf	?___ftpack,w
  6895  0FFA  00A8               	movwf	?___ftmul
  6896  0FFB  0821               	movf	?___ftpack+1,w
  6897  0FFC  00A9               	movwf	?___ftmul+1
  6898  0FFD  0822               	movf	?___ftpack+2,w
  6899  0FFE  00AA               	movwf	?___ftmul+2
  6900  0FFF  0008               	return
  6901  1000                     __end_of___ftmul:	
  6902                           
  6903                           	psect	text23
  6904  0D46                     __ptext23:	
  6905 ;; *************** function ___ftpack *****************
  6906 ;; Defined at:
  6907 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\float.c"
  6908 ;; Parameters:    Size  Location     Type
  6909 ;;  arg             3    0[BANK0 ] unsigned um
  6910 ;;  exp             1    3[BANK0 ] unsigned char 
  6911 ;;  sign            1    4[BANK0 ] unsigned char 
  6912 ;; Auto vars:     Size  Location     Type
  6913 ;;		None
  6914 ;; Return value:  Size  Location     Type
  6915 ;;                  3    0[BANK0 ] float 
  6916 ;; Registers used:
  6917 ;;		wreg, status,2, status,0
  6918 ;; Tracked objects:
  6919 ;;		On entry : 0/0
  6920 ;;		On exit  : 0/0
  6921 ;;		Unchanged: 0/0
  6922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6923 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6924 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6925 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6926 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6927 ;;Total ram usage:        8 bytes
  6928 ;; Hardware stack levels used:    1
  6929 ;; Hardware stack levels required when called:    5
  6930 ;; This function calls:
  6931 ;;		Nothing
  6932 ;; This function is called by:
  6933 ;;		___ftadd
  6934 ;;		___ftdiv
  6935 ;;		___ftmul
  6936 ;;		___lwtoft
  6937 ;; This function uses a non-reentrant model
  6938 ;;
  6939                           
  6940                           
  6941                           ;psect for function ___ftpack
  6942  0D46                     ___ftpack:	
  6943                           
  6944                           ;incstack = 0
  6945                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  6946  0D46  0020               	movlb	0	; select bank0
  6947  0D47  0823               	movf	___ftpack@exp,w
  6948  0D48  1903               	btfsc	3,2
  6949  0D49  2D4F               	goto	l2743
  6950  0D4A  0822               	movf	___ftpack@arg+2,w
  6951  0D4B  0421               	iorwf	___ftpack@arg+1,w
  6952  0D4C  0420               	iorwf	___ftpack@arg,w
  6953  0D4D  1D03               	skipz
  6954  0D4E  2D60               	goto	l2749
  6955  0D4F                     l2743:	
  6956  0D4F  3000               	movlw	0
  6957  0D50  00A0               	movwf	?___ftpack
  6958  0D51  3000               	movlw	0
  6959  0D52  00A1               	movwf	?___ftpack+1
  6960  0D53  3000               	movlw	0
  6961  0D54  00A2               	movwf	?___ftpack+2
  6962  0D55  0008               	return
  6963  0D56                     l2747:	
  6964  0D56  3001               	movlw	1
  6965  0D57  00A5               	movwf	??___ftpack
  6966  0D58  0825               	movf	??___ftpack,w
  6967  0D59  07A3               	addwf	___ftpack@exp,f
  6968  0D5A  3001               	movlw	1
  6969  0D5B                     u2185:	
  6970  0D5B  36A2               	lsrf	___ftpack@arg+2,f
  6971  0D5C  0CA1               	rrf	___ftpack@arg+1,f
  6972  0D5D  0CA0               	rrf	___ftpack@arg,f
  6973  0D5E  0B89               	decfsz	9,f
  6974  0D5F  2D5B               	goto	u2185
  6975  0D60                     l2749:	
  6976  0D60  30FE               	movlw	254
  6977  0D61  0522               	andwf	___ftpack@arg+2,w
  6978  0D62  1903               	btfsc	3,2
  6979  0D63  2D79               	goto	l1078
  6980  0D64  2D56               	goto	l2747
  6981  0D65                     l2751:	
  6982  0D65  3001               	movlw	1
  6983  0D66  00A5               	movwf	??___ftpack
  6984  0D67  0825               	movf	??___ftpack,w
  6985  0D68  07A3               	addwf	___ftpack@exp,f
  6986  0D69  3001               	movlw	1
  6987  0D6A  07A0               	addwf	___ftpack@arg,f
  6988  0D6B  3000               	movlw	0
  6989  0D6C  1803               	skipnc
  6990  0D6D  3001               	movlw	1
  6991  0D6E  07A1               	addwf	___ftpack@arg+1,f
  6992  0D6F  3000               	movlw	0
  6993  0D70  1803               	skipnc
  6994  0D71  3001               	movlw	1
  6995  0D72  07A2               	addwf	___ftpack@arg+2,f
  6996  0D73  3001               	movlw	1
  6997  0D74                     u2205:	
  6998  0D74  36A2               	lsrf	___ftpack@arg+2,f
  6999  0D75  0CA1               	rrf	___ftpack@arg+1,f
  7000  0D76  0CA0               	rrf	___ftpack@arg,f
  7001  0D77  0B89               	decfsz	9,f
  7002  0D78  2D74               	goto	u2205
  7003  0D79                     l1078:	
  7004  0D79  30FF               	movlw	255
  7005  0D7A  0522               	andwf	___ftpack@arg+2,w
  7006  0D7B  1903               	btfsc	3,2
  7007  0D7C  2D86               	goto	l2759
  7008  0D7D  2D65               	goto	l2751
  7009  0D7E                     l2757:	
  7010  0D7E  3001               	movlw	1
  7011  0D7F  02A3               	subwf	___ftpack@exp,f
  7012  0D80  3001               	movlw	1
  7013  0D81                     u2225:	
  7014  0D81  35A0               	lslf	___ftpack@arg,f
  7015  0D82  0DA1               	rlf	___ftpack@arg+1,f
  7016  0D83  0DA2               	rlf	___ftpack@arg+2,f
  7017  0D84  0B89               	decfsz	9,f
  7018  0D85  2D81               	goto	u2225
  7019  0D86                     l2759:	
  7020  0D86  1BA1               	btfsc	___ftpack@arg+1,7
  7021  0D87  2D8C               	goto	l1085
  7022  0D88  3002               	movlw	2
  7023  0D89  0223               	subwf	___ftpack@exp,w
  7024  0D8A  1803               	skipnc
  7025  0D8B  2D7E               	goto	l2757
  7026  0D8C                     l1085:	
  7027  0D8C  1823               	btfsc	___ftpack@exp,0
  7028  0D8D  2D94               	goto	l1086
  7029  0D8E  30FF               	movlw	255
  7030  0D8F  05A0               	andwf	___ftpack@arg,f
  7031  0D90  307F               	movlw	127
  7032  0D91  05A1               	andwf	___ftpack@arg+1,f
  7033  0D92  30FF               	movlw	255
  7034  0D93  05A2               	andwf	___ftpack@arg+2,f
  7035  0D94                     l1086:	
  7036  0D94  1003               	clrc
  7037  0D95  0CA3               	rrf	___ftpack@exp,f
  7038  0D96  0823               	movf	___ftpack@exp,w
  7039  0D97  00A5               	movwf	??___ftpack
  7040  0D98  01A6               	clrf	??___ftpack+1
  7041  0D99  01A7               	clrf	??___ftpack+2
  7042  0D9A  3010               	movlw	16
  7043  0D9B                     u2265:	
  7044  0D9B  35A5               	lslf	??___ftpack,f
  7045  0D9C  0DA6               	rlf	??___ftpack+1,f
  7046  0D9D  0DA7               	rlf	??___ftpack+2,f
  7047  0D9E  0B89               	decfsz	9,f
  7048  0D9F  2D9B               	goto	u2265
  7049  0DA0  0825               	movf	??___ftpack,w
  7050  0DA1  04A0               	iorwf	___ftpack@arg,f
  7051  0DA2  0826               	movf	??___ftpack+1,w
  7052  0DA3  04A1               	iorwf	___ftpack@arg+1,f
  7053  0DA4  0827               	movf	??___ftpack+2,w
  7054  0DA5  04A2               	iorwf	___ftpack@arg+2,f
  7055  0DA6  0824               	movf	___ftpack@sign,w
  7056  0DA7  1903               	btfsc	3,2
  7057  0DA8  0008               	return
  7058  0DA9  17A2               	bsf	___ftpack@arg+2,7
  7059  0DAA  0008               	return
  7060  0DAB                     __end_of___ftpack:	
  7061                           
  7062                           	psect	text24
  7063  0979                     __ptext24:	
  7064 ;; *************** function ___bmul *****************
  7065 ;; Defined at:
  7066 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul8.c"
  7067 ;; Parameters:    Size  Location     Type
  7068 ;;  multiplier      1    wreg     unsigned char 
  7069 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  7070 ;; Auto vars:     Size  Location     Type
  7071 ;;  multiplier      1    3[BANK0 ] unsigned char 
  7072 ;;  product         1    2[BANK0 ] unsigned char 
  7073 ;; Return value:  Size  Location     Type
  7074 ;;                  1    wreg      unsigned char 
  7075 ;; Registers used:
  7076 ;;		wreg, status,2, status,0
  7077 ;; Tracked objects:
  7078 ;;		On entry : 0/0
  7079 ;;		On exit  : 0/0
  7080 ;;		Unchanged: 0/0
  7081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7082 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7083 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7084 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7085 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7086 ;;Total ram usage:        4 bytes
  7087 ;; Hardware stack levels used:    1
  7088 ;; Hardware stack levels required when called:    5
  7089 ;; This function calls:
  7090 ;;		Nothing
  7091 ;; This function is called by:
  7092 ;;		_PROTOCOL_I2C_Send_float
  7093 ;; This function uses a non-reentrant model
  7094 ;;
  7095                           
  7096                           
  7097                           ;psect for function ___bmul
  7098  0979                     ___bmul:	
  7099                           
  7100                           ;incstack = 0
  7101                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  7102                           ;___bmul@multiplier stored from wreg
  7103  0979  0020               	movlb	0	; select bank0
  7104  097A  00A3               	movwf	___bmul@multiplier
  7105  097B  01A2               	clrf	___bmul@product
  7106  097C                     l2983:	
  7107  097C  1C23               	btfss	___bmul@multiplier,0
  7108  097D  2982               	goto	l2987
  7109  097E  0820               	movf	___bmul@multiplicand,w
  7110  097F  00A1               	movwf	??___bmul
  7111  0980  0821               	movf	??___bmul,w
  7112  0981  07A2               	addwf	___bmul@product,f
  7113  0982                     l2987:	
  7114  0982  1003               	clrc
  7115  0983  0DA0               	rlf	___bmul@multiplicand,f
  7116  0984  1003               	clrc
  7117  0985  0CA3               	rrf	___bmul@multiplier,f
  7118  0986  0823               	movf	___bmul@multiplier,w
  7119  0987  1D03               	btfss	3,2
  7120  0988  297C               	goto	l2983
  7121  0989  0822               	movf	___bmul@product,w
  7122  098A  0008               	return
  7123  098B                     __end_of___bmul:	
  7124                           
  7125                           	psect	text25
  7126  0C60                     __ptext25:	
  7127 ;; *************** function ___awmod *****************
  7128 ;; Defined at:
  7129 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awmod.c"
  7130 ;; Parameters:    Size  Location     Type
  7131 ;;  divisor         2    0[BANK0 ] int 
  7132 ;;  dividend        2    2[BANK0 ] int 
  7133 ;; Auto vars:     Size  Location     Type
  7134 ;;  sign            1    6[BANK0 ] unsigned char 
  7135 ;;  counter         1    5[BANK0 ] unsigned char 
  7136 ;; Return value:  Size  Location     Type
  7137 ;;                  2    0[BANK0 ] int 
  7138 ;; Registers used:
  7139 ;;		wreg, status,2, status,0
  7140 ;; Tracked objects:
  7141 ;;		On entry : 0/0
  7142 ;;		On exit  : 0/0
  7143 ;;		Unchanged: 0/0
  7144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7145 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7146 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7147 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7148 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7149 ;;Total ram usage:        7 bytes
  7150 ;; Hardware stack levels used:    1
  7151 ;; Hardware stack levels required when called:    5
  7152 ;; This function calls:
  7153 ;;		Nothing
  7154 ;; This function is called by:
  7155 ;;		_PROTOCOL_I2C_Send_float
  7156 ;; This function uses a non-reentrant model
  7157 ;;
  7158                           
  7159                           
  7160                           ;psect for function ___awmod
  7161  0C60                     ___awmod:	
  7162                           
  7163                           ;incstack = 0
  7164                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  7165  0C60  0020               	movlb	0	; select bank0
  7166  0C61  01A6               	clrf	___awmod@sign
  7167  0C62  1FA3               	btfss	___awmod@dividend+1,7
  7168  0C63  2C6B               	goto	l3047
  7169  0C64  09A2               	comf	___awmod@dividend,f
  7170  0C65  09A3               	comf	___awmod@dividend+1,f
  7171  0C66  0AA2               	incf	___awmod@dividend,f
  7172  0C67  1903               	skipnz
  7173  0C68  0AA3               	incf	___awmod@dividend+1,f
  7174  0C69  01A6               	clrf	___awmod@sign
  7175  0C6A  0AA6               	incf	___awmod@sign,f
  7176  0C6B                     l3047:	
  7177  0C6B  1FA1               	btfss	___awmod@divisor+1,7
  7178  0C6C  2C72               	goto	l3051
  7179  0C6D  09A0               	comf	___awmod@divisor,f
  7180  0C6E  09A1               	comf	___awmod@divisor+1,f
  7181  0C6F  0AA0               	incf	___awmod@divisor,f
  7182  0C70  1903               	skipnz
  7183  0C71  0AA1               	incf	___awmod@divisor+1,f
  7184  0C72                     l3051:	
  7185  0C72  0820               	movf	___awmod@divisor,w
  7186  0C73  0421               	iorwf	___awmod@divisor+1,w
  7187  0C74  1903               	btfsc	3,2
  7188  0C75  2C99               	goto	l3069
  7189  0C76  01A5               	clrf	___awmod@counter
  7190  0C77  0AA5               	incf	___awmod@counter,f
  7191  0C78                     l3059:	
  7192  0C78  1BA1               	btfsc	___awmod@divisor+1,7
  7193  0C79  2C84               	goto	l3061
  7194  0C7A  3001               	movlw	1
  7195  0C7B                     u2835:	
  7196  0C7B  35A0               	lslf	___awmod@divisor,f
  7197  0C7C  0DA1               	rlf	___awmod@divisor+1,f
  7198  0C7D  0B89               	decfsz	9,f
  7199  0C7E  2C7B               	goto	u2835
  7200  0C7F  3001               	movlw	1
  7201  0C80  00A4               	movwf	??___awmod
  7202  0C81  0824               	movf	??___awmod,w
  7203  0C82  07A5               	addwf	___awmod@counter,f
  7204  0C83  2C78               	goto	l3059
  7205  0C84                     l3061:	
  7206  0C84  0821               	movf	___awmod@divisor+1,w
  7207  0C85  0223               	subwf	___awmod@dividend+1,w
  7208  0C86  1D03               	skipz
  7209  0C87  2C8A               	goto	u2855
  7210  0C88  0820               	movf	___awmod@divisor,w
  7211  0C89  0222               	subwf	___awmod@dividend,w
  7212  0C8A                     u2855:	
  7213  0C8A  1C03               	skipc
  7214  0C8B  2C90               	goto	l3065
  7215  0C8C  0820               	movf	___awmod@divisor,w
  7216  0C8D  02A2               	subwf	___awmod@dividend,f
  7217  0C8E  0821               	movf	___awmod@divisor+1,w
  7218  0C8F  3BA3               	subwfb	___awmod@dividend+1,f
  7219  0C90                     l3065:	
  7220  0C90  3001               	movlw	1
  7221  0C91                     u2865:	
  7222  0C91  36A1               	lsrf	___awmod@divisor+1,f
  7223  0C92  0CA0               	rrf	___awmod@divisor,f
  7224  0C93  0B89               	decfsz	9,f
  7225  0C94  2C91               	goto	u2865
  7226  0C95  3001               	movlw	1
  7227  0C96  02A5               	subwf	___awmod@counter,f
  7228  0C97  1D03               	btfss	3,2
  7229  0C98  2C84               	goto	l3061
  7230  0C99                     l3069:	
  7231  0C99  0826               	movf	___awmod@sign,w
  7232  0C9A  1903               	btfsc	3,2
  7233  0C9B  2CA1               	goto	l3073
  7234  0C9C  09A2               	comf	___awmod@dividend,f
  7235  0C9D  09A3               	comf	___awmod@dividend+1,f
  7236  0C9E  0AA2               	incf	___awmod@dividend,f
  7237  0C9F  1903               	skipnz
  7238  0CA0  0AA3               	incf	___awmod@dividend+1,f
  7239  0CA1                     l3073:	
  7240  0CA1  0823               	movf	___awmod@dividend+1,w
  7241  0CA2  00A1               	movwf	?___awmod+1
  7242  0CA3  0822               	movf	___awmod@dividend,w
  7243  0CA4  00A0               	movwf	?___awmod
  7244  0CA5  0008               	return
  7245  0CA6                     __end_of___awmod:	
  7246                           
  7247                           	psect	text26
  7248  0CF4                     __ptext26:	
  7249 ;; *************** function ___awdiv *****************
  7250 ;; Defined at:
  7251 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
  7252 ;; Parameters:    Size  Location     Type
  7253 ;;  divisor         2    0[BANK0 ] int 
  7254 ;;  dividend        2    2[BANK0 ] int 
  7255 ;; Auto vars:     Size  Location     Type
  7256 ;;  quotient        2    7[BANK0 ] int 
  7257 ;;  sign            1    6[BANK0 ] unsigned char 
  7258 ;;  counter         1    5[BANK0 ] unsigned char 
  7259 ;; Return value:  Size  Location     Type
  7260 ;;                  2    0[BANK0 ] int 
  7261 ;; Registers used:
  7262 ;;		wreg, status,2, status,0
  7263 ;; Tracked objects:
  7264 ;;		On entry : 0/0
  7265 ;;		On exit  : 0/0
  7266 ;;		Unchanged: 0/0
  7267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7268 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7269 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7270 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7271 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7272 ;;Total ram usage:        9 bytes
  7273 ;; Hardware stack levels used:    1
  7274 ;; Hardware stack levels required when called:    5
  7275 ;; This function calls:
  7276 ;;		Nothing
  7277 ;; This function is called by:
  7278 ;;		_PROTOCOL_I2C_Send_float
  7279 ;; This function uses a non-reentrant model
  7280 ;;
  7281                           
  7282                           
  7283                           ;psect for function ___awdiv
  7284  0CF4                     ___awdiv:	
  7285                           
  7286                           ;incstack = 0
  7287                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7288  0CF4  0020               	movlb	0	; select bank0
  7289  0CF5  01A6               	clrf	___awdiv@sign
  7290  0CF6  1FA1               	btfss	___awdiv@divisor+1,7
  7291  0CF7  2CFF               	goto	l3003
  7292  0CF8  09A0               	comf	___awdiv@divisor,f
  7293  0CF9  09A1               	comf	___awdiv@divisor+1,f
  7294  0CFA  0AA0               	incf	___awdiv@divisor,f
  7295  0CFB  1903               	skipnz
  7296  0CFC  0AA1               	incf	___awdiv@divisor+1,f
  7297  0CFD  01A6               	clrf	___awdiv@sign
  7298  0CFE  0AA6               	incf	___awdiv@sign,f
  7299  0CFF                     l3003:	
  7300  0CFF  1FA3               	btfss	___awdiv@dividend+1,7
  7301  0D00  2D0A               	goto	l3009
  7302  0D01  09A2               	comf	___awdiv@dividend,f
  7303  0D02  09A3               	comf	___awdiv@dividend+1,f
  7304  0D03  0AA2               	incf	___awdiv@dividend,f
  7305  0D04  1903               	skipnz
  7306  0D05  0AA3               	incf	___awdiv@dividend+1,f
  7307  0D06  3001               	movlw	1
  7308  0D07  00A4               	movwf	??___awdiv
  7309  0D08  0824               	movf	??___awdiv,w
  7310  0D09  06A6               	xorwf	___awdiv@sign,f
  7311  0D0A                     l3009:	
  7312  0D0A  01A7               	clrf	___awdiv@quotient
  7313  0D0B  01A8               	clrf	___awdiv@quotient+1
  7314  0D0C  0820               	movf	___awdiv@divisor,w
  7315  0D0D  0421               	iorwf	___awdiv@divisor+1,w
  7316  0D0E  1903               	btfsc	3,2
  7317  0D0F  2D39               	goto	l3031
  7318  0D10  01A5               	clrf	___awdiv@counter
  7319  0D11  0AA5               	incf	___awdiv@counter,f
  7320  0D12                     l3019:	
  7321  0D12  1BA1               	btfsc	___awdiv@divisor+1,7
  7322  0D13  2D1E               	goto	l3021
  7323  0D14  3001               	movlw	1
  7324  0D15                     u2735:	
  7325  0D15  35A0               	lslf	___awdiv@divisor,f
  7326  0D16  0DA1               	rlf	___awdiv@divisor+1,f
  7327  0D17  0B89               	decfsz	9,f
  7328  0D18  2D15               	goto	u2735
  7329  0D19  3001               	movlw	1
  7330  0D1A  00A4               	movwf	??___awdiv
  7331  0D1B  0824               	movf	??___awdiv,w
  7332  0D1C  07A5               	addwf	___awdiv@counter,f
  7333  0D1D  2D12               	goto	l3019
  7334  0D1E                     l3021:	
  7335  0D1E  3001               	movlw	1
  7336  0D1F                     u2755:	
  7337  0D1F  35A7               	lslf	___awdiv@quotient,f
  7338  0D20  0DA8               	rlf	___awdiv@quotient+1,f
  7339  0D21  0B89               	decfsz	9,f
  7340  0D22  2D1F               	goto	u2755
  7341  0D23  0821               	movf	___awdiv@divisor+1,w
  7342  0D24  0223               	subwf	___awdiv@dividend+1,w
  7343  0D25  1D03               	skipz
  7344  0D26  2D29               	goto	u2765
  7345  0D27  0820               	movf	___awdiv@divisor,w
  7346  0D28  0222               	subwf	___awdiv@dividend,w
  7347  0D29                     u2765:	
  7348  0D29  1C03               	skipc
  7349  0D2A  2D30               	goto	l3027
  7350  0D2B  0820               	movf	___awdiv@divisor,w
  7351  0D2C  02A2               	subwf	___awdiv@dividend,f
  7352  0D2D  0821               	movf	___awdiv@divisor+1,w
  7353  0D2E  3BA3               	subwfb	___awdiv@dividend+1,f
  7354  0D2F  1427               	bsf	___awdiv@quotient,0
  7355  0D30                     l3027:	
  7356  0D30  3001               	movlw	1
  7357  0D31                     u2775:	
  7358  0D31  36A1               	lsrf	___awdiv@divisor+1,f
  7359  0D32  0CA0               	rrf	___awdiv@divisor,f
  7360  0D33  0B89               	decfsz	9,f
  7361  0D34  2D31               	goto	u2775
  7362  0D35  3001               	movlw	1
  7363  0D36  02A5               	subwf	___awdiv@counter,f
  7364  0D37  1D03               	btfss	3,2
  7365  0D38  2D1E               	goto	l3021
  7366  0D39                     l3031:	
  7367  0D39  0826               	movf	___awdiv@sign,w
  7368  0D3A  1903               	btfsc	3,2
  7369  0D3B  2D41               	goto	l3035
  7370  0D3C  09A7               	comf	___awdiv@quotient,f
  7371  0D3D  09A8               	comf	___awdiv@quotient+1,f
  7372  0D3E  0AA7               	incf	___awdiv@quotient,f
  7373  0D3F  1903               	skipnz
  7374  0D40  0AA8               	incf	___awdiv@quotient+1,f
  7375  0D41                     l3035:	
  7376  0D41  0828               	movf	___awdiv@quotient+1,w
  7377  0D42  00A1               	movwf	?___awdiv+1
  7378  0D43  0827               	movf	___awdiv@quotient,w
  7379  0D44  00A0               	movwf	?___awdiv
  7380  0D45  0008               	return
  7381  0D46                     __end_of___awdiv:	
  7382                           
  7383                           	psect	text27
  7384  0A68                     __ptext27:	
  7385 ;; *************** function _PROTOCOL_I2C_Set_TLV *****************
  7386 ;; Defined at:
  7387 ;;		line 208 in file "protocol.c"
  7388 ;; Parameters:    Size  Location     Type
  7389 ;;  type            1    wreg     unsigned char 
  7390 ;;  length          1    0[BANK0 ] unsigned char 
  7391 ;;  pbuffer         1    1[BANK0 ] PTR unsigned char 
  7392 ;;		 -> PROTOCOL_Send_uint8_t@pbuf(1), sendbuf(16), 
  7393 ;; Auto vars:     Size  Location     Type
  7394 ;;  type            1    3[BANK0 ] unsigned char 
  7395 ;;  status          1    4[BANK0 ] enum E3406
  7396 ;; Return value:  Size  Location     Type
  7397 ;;                  1    wreg      void 
  7398 ;; Registers used:
  7399 ;;		wreg, status,2, status,0
  7400 ;; Tracked objects:
  7401 ;;		On entry : 0/0
  7402 ;;		On exit  : 0/0
  7403 ;;		Unchanged: 0/0
  7404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7405 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7406 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7407 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7408 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7409 ;;Total ram usage:        5 bytes
  7410 ;; Hardware stack levels used:    1
  7411 ;; Hardware stack levels required when called:    5
  7412 ;; This function calls:
  7413 ;;		Nothing
  7414 ;; This function is called by:
  7415 ;;		_PROTOCOL_I2C_Send_float
  7416 ;; This function uses a non-reentrant model
  7417 ;;
  7418                           
  7419                           
  7420                           ;psect for function _PROTOCOL_I2C_Set_TLV
  7421  0A68                     _PROTOCOL_I2C_Set_TLV:	
  7422                           
  7423                           ;incstack = 0
  7424                           ; Regs used in _PROTOCOL_I2C_Set_TLV: [wreg+status,2+status,0]
  7425                           ;PROTOCOL_I2C_Set_TLV@type stored from wreg
  7426  0A68  0020               	movlb	0	; select bank0
  7427  0A69  00A3               	movwf	PROTOCOL_I2C_Set_TLV@type
  7428                           
  7429                           ;protocol.c: 209: READBUF_STATUS status = readbuf.status;
  7430  0A6A  0021               	movlb	1	; select bank1
  7431  0A6B  084F               	movf	(_readbuf^(0+128)+3),w
  7432  0A6C  0020               	movlb	0	; select bank0
  7433  0A6D  00A2               	movwf	??_PROTOCOL_I2C_Set_TLV
  7434  0A6E  0822               	movf	??_PROTOCOL_I2C_Set_TLV,w
  7435  0A6F  00A4               	movwf	PROTOCOL_I2C_Set_TLV@status
  7436                           
  7437                           ;protocol.c: 210: if (status == COMPLETE) {
  7438  0A70  3003               	movlw	3
  7439  0A71  0624               	xorwf	PROTOCOL_I2C_Set_TLV@status,w
  7440  0A72  1D03               	btfss	3,2
  7441  0A73  0008               	return
  7442                           
  7443                           ;protocol.c: 211: readbuf.type = type;
  7444  0A74  0823               	movf	PROTOCOL_I2C_Set_TLV@type,w
  7445  0A75  00A2               	movwf	??_PROTOCOL_I2C_Set_TLV
  7446  0A76  0822               	movf	??_PROTOCOL_I2C_Set_TLV,w
  7447  0A77  0021               	movlb	1	; select bank1
  7448  0A78  00CC               	movwf	_readbuf^(0+128)
  7449                           
  7450                           ;protocol.c: 212: readbuf.length = length;
  7451  0A79  0020               	movlb	0	; select bank0
  7452  0A7A  0820               	movf	PROTOCOL_I2C_Set_TLV@length,w
  7453  0A7B  00A2               	movwf	??_PROTOCOL_I2C_Set_TLV
  7454  0A7C  0822               	movf	??_PROTOCOL_I2C_Set_TLV,w
  7455  0A7D  0021               	movlb	1	; select bank1
  7456  0A7E  00CD               	movwf	(_readbuf^(0+128)+1)
  7457                           
  7458                           ;protocol.c: 213: readbuf.pbuffer = pbuffer;
  7459  0A7F  0020               	movlb	0	; select bank0
  7460  0A80  0821               	movf	PROTOCOL_I2C_Set_TLV@pbuffer,w
  7461  0A81  00A2               	movwf	??_PROTOCOL_I2C_Set_TLV
  7462  0A82  0822               	movf	??_PROTOCOL_I2C_Set_TLV,w
  7463  0A83  0021               	movlb	1	; select bank1
  7464  0A84  00CE               	movwf	(low ((_readbuf| 0+2)))^(0+128)
  7465                           
  7466                           ;protocol.c: 214: readbuf.buf_cnt = 0;
  7467  0A85  01D0               	clrf	(_readbuf^(0+128)+4)
  7468                           
  7469                           ;protocol.c: 215: readbuf.status = TLV_SET;
  7470  0A86  01CF               	clrf	(_readbuf^(0+128)+3)
  7471  0A87  0008               	return
  7472  0A88                     __end_of_PROTOCOL_I2C_Set_TLV:	
  7473                           
  7474                           	psect	text28
  7475  0DAB                     __ptext28:	
  7476 ;; *************** function _atoi *****************
  7477 ;; Defined at:
  7478 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\atoi.c"
  7479 ;; Parameters:    Size  Location     Type
  7480 ;;  s               1    wreg     PTR const unsigned char 
  7481 ;;		 -> buf(48), 
  7482 ;; Auto vars:     Size  Location     Type
  7483 ;;  s               1   13[BANK0 ] PTR const unsigned char 
  7484 ;;		 -> buf(48), 
  7485 ;;  a               2   11[BANK0 ] int 
  7486 ;;  sign            1   10[BANK0 ] unsigned char 
  7487 ;; Return value:  Size  Location     Type
  7488 ;;                  2    6[BANK0 ] int 
  7489 ;; Registers used:
  7490 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7491 ;; Tracked objects:
  7492 ;;		On entry : 0/0
  7493 ;;		On exit  : 0/0
  7494 ;;		Unchanged: 0/0
  7495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7496 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7497 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7498 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7499 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7500 ;;Total ram usage:        8 bytes
  7501 ;; Hardware stack levels used:    1
  7502 ;; Hardware stack levels required when called:    6
  7503 ;; This function calls:
  7504 ;;		___wmul
  7505 ;;		_isdigit
  7506 ;; This function is called by:
  7507 ;;		_PROTOCOL_Loop
  7508 ;; This function uses a non-reentrant model
  7509 ;;
  7510                           
  7511                           
  7512                           ;psect for function _atoi
  7513  0DAB                     _atoi:	
  7514                           
  7515                           ;incstack = 0
  7516                           ; Regs used in _atoi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7517                           ;atoi@s stored from wreg
  7518  0DAB  0020               	movlb	0	; select bank0
  7519  0DAC  00AD               	movwf	atoi@s
  7520  0DAD                     l3627:	
  7521  0DAD  082D               	movf	atoi@s,w
  7522  0DAE  0086               	movwf	6
  7523  0DAF  3001               	movlw	1	; select bank2/3
  7524  0DB0  0087               	movwf	7
  7525  0DB1  3020               	movlw	32
  7526  0DB2  0601               	xorwf	1,w
  7527  0DB3  1D03               	btfss	3,2
  7528  0DB4  2DBA               	goto	l3629
  7529  0DB5                     l3625:	
  7530  0DB5  3001               	movlw	1
  7531  0DB6  00A8               	movwf	??_atoi
  7532  0DB7  0828               	movf	??_atoi,w
  7533  0DB8  07AD               	addwf	atoi@s,f
  7534  0DB9  2DAD               	goto	l3627
  7535  0DBA                     l3629:	
  7536  0DBA  082D               	movf	atoi@s,w
  7537  0DBB  0086               	movwf	6
  7538  0DBC  3001               	movlw	1	; select bank2/3
  7539  0DBD  0087               	movwf	7
  7540  0DBE  3009               	movlw	9
  7541  0DBF  0601               	xorwf	1,w
  7542  0DC0  1903               	btfsc	3,2
  7543  0DC1  2DB5               	goto	l3625
  7544  0DC2  01AB               	clrf	atoi@a
  7545  0DC3  01AC               	clrf	atoi@a+1
  7546  0DC4  01AA               	clrf	atoi@sign
  7547  0DC5  082D               	movf	atoi@s,w
  7548  0DC6  0086               	movwf	6
  7549  0DC7  3001               	movlw	1	; select bank2/3
  7550  0DC8  0087               	movwf	7
  7551  0DC9  302D               	movlw	45
  7552  0DCA  0601               	xorwf	1,w
  7553  0DCB  1D03               	btfss	3,2
  7554  0DCC  2DD2               	goto	l3637
  7555  0DCD  3001               	movlw	1
  7556  0DCE  00A8               	movwf	??_atoi
  7557  0DCF  0828               	movf	??_atoi,w
  7558  0DD0  07AA               	addwf	atoi@sign,f
  7559  0DD1  2DDA               	goto	l3643
  7560  0DD2                     l3637:	
  7561  0DD2  082D               	movf	atoi@s,w
  7562  0DD3  0086               	movwf	6
  7563  0DD4  3001               	movlw	1	; select bank2/3
  7564  0DD5  0087               	movwf	7
  7565  0DD6  302B               	movlw	43
  7566  0DD7  0601               	xorwf	1,w
  7567  0DD8  1D03               	btfss	3,2
  7568  0DD9  2DDE               	goto	l3645
  7569  0DDA                     l3643:	
  7570  0DDA  3001               	movlw	1
  7571  0DDB  00A8               	movwf	??_atoi
  7572  0DDC  0828               	movf	??_atoi,w
  7573  0DDD  07AD               	addwf	atoi@s,f
  7574  0DDE                     l3645:	
  7575  0DDE  082D               	movf	atoi@s,w
  7576  0DDF  0086               	movwf	6
  7577  0DE0  3001               	movlw	1	; select bank2/3
  7578  0DE1  0087               	movwf	7
  7579  0DE2  0801               	movf	1,w
  7580  0DE3  3189  214B  318D   	fcall	_isdigit
  7581  0DE6  1C03               	btfss	3,0
  7582  0DE7  2E07               	goto	l3647
  7583  0DE8  0020               	movlb	0	; select bank0
  7584  0DE9  082C               	movf	atoi@a+1,w
  7585  0DEA  00A1               	movwf	___wmul@multiplier+1
  7586  0DEB  082B               	movf	atoi@a,w
  7587  0DEC  00A0               	movwf	___wmul@multiplier
  7588  0DED  300A               	movlw	10
  7589  0DEE  00A2               	movwf	___wmul@multiplicand
  7590  0DEF  3000               	movlw	0
  7591  0DF0  00A3               	movwf	___wmul@multiplicand+1
  7592  0DF1  3189  21F1  318D   	fcall	___wmul
  7593  0DF4  0020               	movlb	0	; select bank0
  7594  0DF5  082D               	movf	atoi@s,w
  7595  0DF6  0086               	movwf	6
  7596  0DF7  3001               	movlw	1	; select bank2/3
  7597  0DF8  0087               	movwf	7
  7598  0DF9  0801               	movf	1,w
  7599  0DFA  0720               	addwf	?___wmul,w
  7600  0DFB  00A8               	movwf	??_atoi
  7601  0DFC  0821               	movf	?___wmul+1,w
  7602  0DFD  1803               	skipnc
  7603  0DFE  0A21               	incf	?___wmul+1,w
  7604  0DFF  00A9               	movwf	??_atoi+1
  7605  0E00  0828               	movf	??_atoi,w
  7606  0E01  3ED0               	addlw	208
  7607  0E02  00AB               	movwf	atoi@a
  7608  0E03  30FF               	movlw	255
  7609  0E04  3D29               	addwfc	??_atoi+1,w
  7610  0E05  00AC               	movwf	atoi@a+1
  7611  0E06  2DDA               	goto	l3643
  7612  0E07                     l3647:	
  7613  0E07  0020               	movlb	0	; select bank0
  7614  0E08  082A               	movf	atoi@sign,w
  7615  0E09  1903               	btfsc	3,2
  7616  0E0A  2E17               	goto	l3653
  7617  0E0B  092B               	comf	atoi@a,w
  7618  0E0C  00A8               	movwf	??_atoi
  7619  0E0D  092C               	comf	atoi@a+1,w
  7620  0E0E  00A9               	movwf	??_atoi+1
  7621  0E0F  0AA8               	incf	??_atoi,f
  7622  0E10  1903               	skipnz
  7623  0E11  0AA9               	incf	??_atoi+1,f
  7624  0E12  0828               	movf	??_atoi,w
  7625  0E13  00A6               	movwf	?_atoi
  7626  0E14  0829               	movf	??_atoi+1,w
  7627  0E15  00A7               	movwf	?_atoi+1
  7628  0E16  0008               	return
  7629  0E17                     l3653:	
  7630  0E17  082C               	movf	atoi@a+1,w
  7631  0E18  00A7               	movwf	?_atoi+1
  7632  0E19  082B               	movf	atoi@a,w
  7633  0E1A  00A6               	movwf	?_atoi
  7634  0E1B  0008               	return
  7635  0E1C                     __end_of_atoi:	
  7636                           
  7637                           	psect	text29
  7638  094B                     __ptext29:	
  7639 ;; *************** function _isdigit *****************
  7640 ;; Defined at:
  7641 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  7642 ;; Parameters:    Size  Location     Type
  7643 ;;  c               1    wreg     unsigned char 
  7644 ;; Auto vars:     Size  Location     Type
  7645 ;;  c               1    1[BANK0 ] unsigned char 
  7646 ;; Return value:  Size  Location     Type
  7647 ;;		None               void
  7648 ;; Registers used:
  7649 ;;		wreg, status,2, status,0
  7650 ;; Tracked objects:
  7651 ;;		On entry : 0/0
  7652 ;;		On exit  : 0/0
  7653 ;;		Unchanged: 0/0
  7654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7656 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7658 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7659 ;;Total ram usage:        2 bytes
  7660 ;; Hardware stack levels used:    1
  7661 ;; Hardware stack levels required when called:    5
  7662 ;; This function calls:
  7663 ;;		Nothing
  7664 ;; This function is called by:
  7665 ;;		_printf
  7666 ;;		_atoi
  7667 ;; This function uses a non-reentrant model
  7668 ;;
  7669                           
  7670                           
  7671                           ;psect for function _isdigit
  7672  094B                     _isdigit:	
  7673                           
  7674                           ;incstack = 0
  7675                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  7676                           ;isdigit@c stored from wreg
  7677  094B  0020               	movlb	0	; select bank0
  7678  094C  00A1               	movwf	isdigit@c
  7679  094D  01A0               	clrf	_isdigit$1239
  7680  094E  303A               	movlw	58
  7681  094F  0221               	subwf	isdigit@c,w
  7682  0950  1803               	skipnc
  7683  0951  2958               	goto	l2721
  7684  0952  3030               	movlw	48
  7685  0953  0221               	subwf	isdigit@c,w
  7686  0954  1C03               	skipc
  7687  0955  2958               	goto	l2721
  7688  0956  01A0               	clrf	_isdigit$1239
  7689  0957  0AA0               	incf	_isdigit$1239,f
  7690  0958                     l2721:	
  7691  0958  0C20               	rrf	_isdigit$1239,w
  7692  0959  0008               	return
  7693  095A                     __end_of_isdigit:	
  7694                           
  7695                           	psect	text30
  7696  09F1                     __ptext30:	
  7697 ;; *************** function ___wmul *****************
  7698 ;; Defined at:
  7699 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  7700 ;; Parameters:    Size  Location     Type
  7701 ;;  multiplier      2    0[BANK0 ] unsigned int 
  7702 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  7703 ;; Auto vars:     Size  Location     Type
  7704 ;;  product         2    4[BANK0 ] unsigned int 
  7705 ;; Return value:  Size  Location     Type
  7706 ;;                  2    0[BANK0 ] unsigned int 
  7707 ;; Registers used:
  7708 ;;		wreg, status,2, status,0
  7709 ;; Tracked objects:
  7710 ;;		On entry : 0/0
  7711 ;;		On exit  : 0/0
  7712 ;;		Unchanged: 0/0
  7713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7714 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7715 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7717 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7718 ;;Total ram usage:        6 bytes
  7719 ;; Hardware stack levels used:    1
  7720 ;; Hardware stack levels required when called:    5
  7721 ;; This function calls:
  7722 ;;		Nothing
  7723 ;; This function is called by:
  7724 ;;		_printf
  7725 ;;		_atoi
  7726 ;; This function uses a non-reentrant model
  7727 ;;
  7728                           
  7729                           
  7730                           ;psect for function ___wmul
  7731  09F1                     ___wmul:	
  7732                           
  7733                           ;incstack = 0
  7734                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7735  09F1  0020               	movlb	0	; select bank0
  7736  09F2  01A4               	clrf	___wmul@product
  7737  09F3  01A5               	clrf	___wmul@product+1
  7738  09F4                     l2727:	
  7739  09F4  1C20               	btfss	___wmul@multiplier,0
  7740  09F5  29FA               	goto	l898
  7741  09F6  0822               	movf	___wmul@multiplicand,w
  7742  09F7  07A4               	addwf	___wmul@product,f
  7743  09F8  0823               	movf	___wmul@multiplicand+1,w
  7744  09F9  3DA5               	addwfc	___wmul@product+1,f
  7745  09FA                     l898:	
  7746  09FA  3001               	movlw	1
  7747  09FB                     u2135:	
  7748  09FB  35A2               	lslf	___wmul@multiplicand,f
  7749  09FC  0DA3               	rlf	___wmul@multiplicand+1,f
  7750  09FD  0B89               	decfsz	9,f
  7751  09FE  29FB               	goto	u2135
  7752  09FF  3001               	movlw	1
  7753  0A00                     u2145:	
  7754  0A00  36A1               	lsrf	___wmul@multiplier+1,f
  7755  0A01  0CA0               	rrf	___wmul@multiplier,f
  7756  0A02  0B89               	decfsz	9,f
  7757  0A03  2A00               	goto	u2145
  7758  0A04  0820               	movf	___wmul@multiplier,w
  7759  0A05  0421               	iorwf	___wmul@multiplier+1,w
  7760  0A06  1D03               	btfss	3,2
  7761  0A07  29F4               	goto	l2727
  7762  0A08  0825               	movf	___wmul@product+1,w
  7763  0A09  00A1               	movwf	?___wmul+1
  7764  0A0A  0824               	movf	___wmul@product,w
  7765  0A0B  00A0               	movwf	?___wmul
  7766  0A0C  0008               	return
  7767  0A0D                     __end_of___wmul:	
  7768                           
  7769                           	psect	text31
  7770  08C4                     __ptext31:	
  7771 ;; *************** function _TMR0_HasOverflowOccured *****************
  7772 ;; Defined at:
  7773 ;;		line 101 in file "mcc_generated_files/tmr0.c"
  7774 ;; Parameters:    Size  Location     Type
  7775 ;;		None
  7776 ;; Auto vars:     Size  Location     Type
  7777 ;;		None
  7778 ;; Return value:  Size  Location     Type
  7779 ;;                  1    wreg      unsigned char 
  7780 ;; Registers used:
  7781 ;;		wreg, status,2, status,0
  7782 ;; Tracked objects:
  7783 ;;		On entry : 0/0
  7784 ;;		On exit  : 0/0
  7785 ;;		Unchanged: 0/0
  7786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7788 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7790 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7791 ;;Total ram usage:        0 bytes
  7792 ;; Hardware stack levels used:    1
  7793 ;; Hardware stack levels required when called:    5
  7794 ;; This function calls:
  7795 ;;		Nothing
  7796 ;; This function is called by:
  7797 ;;		_PROTOCOL_Loop
  7798 ;; This function uses a non-reentrant model
  7799 ;;
  7800                           
  7801                           
  7802                           ;psect for function _TMR0_HasOverflowOccured
  7803  08C4                     _TMR0_HasOverflowOccured:	
  7804                           
  7805                           ;tmr0.c: 104: return(INTCONbits.TMR0IF);
  7806                           
  7807                           ;incstack = 0
  7808                           ; Regs used in _TMR0_HasOverflowOccured: [wreg+status,2+status,0]
  7809  08C4  0C0B               	rrf	11,w	;volatile
  7810  08C5  0C89               	rrf	9,f
  7811  08C6  3901               	andlw	1
  7812  08C7  0008               	return
  7813  08C8                     __end_of_TMR0_HasOverflowOccured:	
  7814                           
  7815                           	psect	text32
  7816  093C                     __ptext32:	
  7817 ;; *************** function _PROTOCOL_Write_Device_Address *****************
  7818 ;; Defined at:
  7819 ;;		line 84 in file "protocol.c"
  7820 ;; Parameters:    Size  Location     Type
  7821 ;;  device_id_i2    1    wreg     unsigned char 
  7822 ;; Auto vars:     Size  Location     Type
  7823 ;;  device_id_i2    1    4[BANK0 ] unsigned char 
  7824 ;; Return value:  Size  Location     Type
  7825 ;;                  1    wreg      void 
  7826 ;; Registers used:
  7827 ;;		wreg, status,2, status,0, pclath, cstack
  7828 ;; Tracked objects:
  7829 ;;		On entry : 0/0
  7830 ;;		On exit  : 0/0
  7831 ;;		Unchanged: 0/0
  7832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7834 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7835 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7836 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7837 ;;Total ram usage:        2 bytes
  7838 ;; Hardware stack levels used:    1
  7839 ;; Hardware stack levels required when called:    6
  7840 ;; This function calls:
  7841 ;;		_DATAEE_WriteByte
  7842 ;; This function is called by:
  7843 ;;		_PROTOCOL_Loop
  7844 ;; This function uses a non-reentrant model
  7845 ;;
  7846                           
  7847                           
  7848                           ;psect for function _PROTOCOL_Write_Device_Address
  7849  093C                     _PROTOCOL_Write_Device_Address:	
  7850                           
  7851                           ;incstack = 0
  7852                           ; Regs used in _PROTOCOL_Write_Device_Address: [wreg+status,2+status,0+pclath+cstack]
  7853                           ;PROTOCOL_Write_Device_Address@device_id_i2c stored from wreg
  7854  093C  0020               	movlb	0	; select bank0
  7855  093D  00A4               	movwf	PROTOCOL_Write_Device_Address@device_id_i2c
  7856                           
  7857                           ;protocol.c: 85: DATAEE_WriteByte(0, device_id_i2c);
  7858  093E  0824               	movf	PROTOCOL_Write_Device_Address@device_id_i2c,w
  7859  093F  00A3               	movwf	??_PROTOCOL_Write_Device_Address
  7860  0940  0823               	movf	??_PROTOCOL_Write_Device_Address,w
  7861  0941  00A0               	movwf	DATAEE_WriteByte@bData
  7862  0942  3000               	movlw	0
  7863  0943  318A  22A9         	fcall	_DATAEE_WriteByte
  7864                           
  7865                           ;protocol.c: 86: slave_address = device_id_i2c;
  7866  0945  0020               	movlb	0	; select bank0
  7867  0946  0824               	movf	PROTOCOL_Write_Device_Address@device_id_i2c,w
  7868  0947  00A3               	movwf	??_PROTOCOL_Write_Device_Address
  7869  0948  0823               	movf	??_PROTOCOL_Write_Device_Address,w
  7870  0949  00E5               	movwf	_slave_address
  7871  094A  0008               	return
  7872  094B                     __end_of_PROTOCOL_Write_Device_Address:	
  7873                           
  7874                           	psect	text33
  7875  08AE                     __ptext33:	
  7876 ;; *************** function _PROTOCOL_STP *****************
  7877 ;; Defined at:
  7878 ;;		line 98 in file "protocol.c"
  7879 ;; Parameters:    Size  Location     Type
  7880 ;;		None
  7881 ;; Auto vars:     Size  Location     Type
  7882 ;;		None
  7883 ;; Return value:  Size  Location     Type
  7884 ;;                  1    wreg      void 
  7885 ;; Registers used:
  7886 ;;		wreg, status,2, status,0
  7887 ;; Tracked objects:
  7888 ;;		On entry : 0/0
  7889 ;;		On exit  : 0/0
  7890 ;;		Unchanged: 0/0
  7891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7893 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7894 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7895 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7896 ;;Total ram usage:        0 bytes
  7897 ;; Hardware stack levels used:    1
  7898 ;; Hardware stack levels required when called:    5
  7899 ;; This function calls:
  7900 ;;		Nothing
  7901 ;; This function is called by:
  7902 ;;		_PROTOCOL_Loop
  7903 ;; This function uses a non-reentrant model
  7904 ;;
  7905                           
  7906                           
  7907                           ;psect for function _PROTOCOL_STP
  7908  08AE                     _PROTOCOL_STP:	
  7909                           
  7910                           ;protocol.c: 100: running = 0;
  7911                           
  7912                           ;incstack = 0
  7913                           ; Regs used in _PROTOCOL_STP: [wreg+status,2+status,0]
  7914  08AE  0020               	movlb	0	; select bank0
  7915  08AF  01E1               	clrf	_running
  7916  08B0  0008               	return
  7917  08B1                     __end_of_PROTOCOL_STP:	
  7918                           
  7919                           	psect	text34
  7920  08C0                     __ptext34:	
  7921 ;; *************** function _PROTOCOL_STA *****************
  7922 ;; Defined at:
  7923 ;;		line 93 in file "protocol.c"
  7924 ;; Parameters:    Size  Location     Type
  7925 ;;		None
  7926 ;; Auto vars:     Size  Location     Type
  7927 ;;		None
  7928 ;; Return value:  Size  Location     Type
  7929 ;;                  1    wreg      void 
  7930 ;; Registers used:
  7931 ;;		wreg, status,2, status,0
  7932 ;; Tracked objects:
  7933 ;;		On entry : 0/0
  7934 ;;		On exit  : 0/0
  7935 ;;		Unchanged: 0/0
  7936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7937 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7938 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7939 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7940 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7941 ;;Total ram usage:        0 bytes
  7942 ;; Hardware stack levels used:    1
  7943 ;; Hardware stack levels required when called:    5
  7944 ;; This function calls:
  7945 ;;		Nothing
  7946 ;; This function is called by:
  7947 ;;		_PROTOCOL_Loop
  7948 ;; This function uses a non-reentrant model
  7949 ;;
  7950                           
  7951                           
  7952                           ;psect for function _PROTOCOL_STA
  7953  08C0                     _PROTOCOL_STA:	
  7954                           
  7955                           ;protocol.c: 95: running = 1;
  7956                           
  7957                           ;incstack = 0
  7958                           ; Regs used in _PROTOCOL_STA: [wreg+status,2+status,0]
  7959  08C0  0020               	movlb	0	; select bank0
  7960  08C1  01E1               	clrf	_running
  7961  08C2  0AE1               	incf	_running,f
  7962  08C3  0008               	return
  7963  08C4                     __end_of_PROTOCOL_STA:	
  7964                           
  7965                           	psect	text35
  7966  08E6                     __ptext35:	
  7967 ;; *************** function _PROTOCOL_SET *****************
  7968 ;; Defined at:
  7969 ;;		line 111 in file "protocol.c"
  7970 ;; Parameters:    Size  Location     Type
  7971 ;;  value_          1    wreg     unsigned char 
  7972 ;; Auto vars:     Size  Location     Type
  7973 ;;  value_          1    1[BANK0 ] unsigned char 
  7974 ;; Return value:  Size  Location     Type
  7975 ;;                  1    wreg      void 
  7976 ;; Registers used:
  7977 ;;		wreg, status,2, status,0
  7978 ;; Tracked objects:
  7979 ;;		On entry : 0/0
  7980 ;;		On exit  : 0/0
  7981 ;;		Unchanged: 0/0
  7982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7984 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7985 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7986 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7987 ;;Total ram usage:        2 bytes
  7988 ;; Hardware stack levels used:    1
  7989 ;; Hardware stack levels required when called:    5
  7990 ;; This function calls:
  7991 ;;		Nothing
  7992 ;; This function is called by:
  7993 ;;		_PROTOCOL_Loop
  7994 ;; This function uses a non-reentrant model
  7995 ;;
  7996                           
  7997                           
  7998                           ;psect for function _PROTOCOL_SET
  7999  08E6                     _PROTOCOL_SET:	
  8000                           
  8001                           ;incstack = 0
  8002                           ; Regs used in _PROTOCOL_SET: [wreg+status,2+status,0]
  8003                           ;PROTOCOL_SET@value_ stored from wreg
  8004  08E6  0020               	movlb	0	; select bank0
  8005  08E7  00A1               	movwf	PROTOCOL_SET@value_
  8006                           
  8007                           ;protocol.c: 112: value = value_;
  8008  08E8  0821               	movf	PROTOCOL_SET@value_,w
  8009  08E9  00A0               	movwf	??_PROTOCOL_SET
  8010  08EA  0820               	movf	??_PROTOCOL_SET,w
  8011  08EB  00E3               	movwf	_value
  8012  08EC  0008               	return
  8013  08ED                     __end_of_PROTOCOL_SET:	
  8014                           
  8015                           	psect	text36
  8016  0905                     __ptext36:	
  8017 ;; *************** function _PROTOCOL_SAV *****************
  8018 ;; Defined at:
  8019 ;;		line 107 in file "protocol.c"
  8020 ;; Parameters:    Size  Location     Type
  8021 ;;		None
  8022 ;; Auto vars:     Size  Location     Type
  8023 ;;		None
  8024 ;; Return value:  Size  Location     Type
  8025 ;;                  1    wreg      void 
  8026 ;; Registers used:
  8027 ;;		wreg, status,2, status,0, pclath, cstack
  8028 ;; Tracked objects:
  8029 ;;		On entry : 0/0
  8030 ;;		On exit  : 0/0
  8031 ;;		Unchanged: 0/0
  8032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8034 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8035 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8036 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8037 ;;Total ram usage:        1 bytes
  8038 ;; Hardware stack levels used:    1
  8039 ;; Hardware stack levels required when called:    6
  8040 ;; This function calls:
  8041 ;;		_DATAEE_WriteByte
  8042 ;; This function is called by:
  8043 ;;		_PROTOCOL_Loop
  8044 ;; This function uses a non-reentrant model
  8045 ;;
  8046                           
  8047                           
  8048                           ;psect for function _PROTOCOL_SAV
  8049  0905                     _PROTOCOL_SAV:	
  8050                           
  8051                           ;protocol.c: 108: DATAEE_WriteByte(1, value);
  8052                           
  8053                           ;incstack = 0
  8054                           ; Regs used in _PROTOCOL_SAV: [wreg+status,2+status,0+pclath+cstack]
  8055  0905  0020               	movlb	0	; select bank0
  8056  0906  0863               	movf	_value,w
  8057  0907  00A3               	movwf	??_PROTOCOL_SAV
  8058  0908  0823               	movf	??_PROTOCOL_SAV,w
  8059  0909  00A0               	movwf	DATAEE_WriteByte@bData
  8060  090A  3001               	movlw	1
  8061  090B  318A  22A9         	fcall	_DATAEE_WriteByte
  8062  090D  0008               	return
  8063  090E                     __end_of_PROTOCOL_SAV:	
  8064                           
  8065                           	psect	text37
  8066  0AA9                     __ptext37:	
  8067 ;; *************** function _DATAEE_WriteByte *****************
  8068 ;; Defined at:
  8069 ;;		line 180 in file "mcc_generated_files/memory.c"
  8070 ;; Parameters:    Size  Location     Type
  8071 ;;  bAdd            1    wreg     unsigned char 
  8072 ;;  bData           1    0[BANK0 ] unsigned char 
  8073 ;; Auto vars:     Size  Location     Type
  8074 ;;  bAdd            1    1[BANK0 ] unsigned char 
  8075 ;;  GIEBitValue     1    2[BANK0 ] unsigned char 
  8076 ;; Return value:  Size  Location     Type
  8077 ;;                  1    wreg      void 
  8078 ;; Registers used:
  8079 ;;		wreg, status,2, status,0
  8080 ;; Tracked objects:
  8081 ;;		On entry : 0/0
  8082 ;;		On exit  : 0/0
  8083 ;;		Unchanged: 0/0
  8084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8085 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8086 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8088 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8089 ;;Total ram usage:        3 bytes
  8090 ;; Hardware stack levels used:    1
  8091 ;; Hardware stack levels required when called:    5
  8092 ;; This function calls:
  8093 ;;		Nothing
  8094 ;; This function is called by:
  8095 ;;		_PROTOCOL_Write_Device_Address
  8096 ;;		_PROTOCOL_SAV
  8097 ;; This function uses a non-reentrant model
  8098 ;;
  8099                           
  8100                           
  8101                           ;psect for function _DATAEE_WriteByte
  8102  0AA9                     _DATAEE_WriteByte:	
  8103                           
  8104                           ;incstack = 0
  8105                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
  8106                           ;DATAEE_WriteByte@bAdd stored from wreg
  8107  0AA9  0020               	movlb	0	; select bank0
  8108  0AAA  00A1               	movwf	DATAEE_WriteByte@bAdd
  8109                           
  8110                           ;memory.c: 182: uint8_t GIEBitValue = 0;
  8111  0AAB  01A2               	clrf	DATAEE_WriteByte@GIEBitValue
  8112                           
  8113                           ;memory.c: 184: EEADRL = (bAdd & 0x0ff);
  8114  0AAC  0821               	movf	DATAEE_WriteByte@bAdd,w
  8115  0AAD  0023               	movlb	3	; select bank3
  8116  0AAE  0091               	movwf	17	;volatile
  8117                           
  8118                           ;memory.c: 185: EEDATL = bData;
  8119  0AAF  0020               	movlb	0	; select bank0
  8120  0AB0  0820               	movf	DATAEE_WriteByte@bData,w
  8121  0AB1  0023               	movlb	3	; select bank3
  8122  0AB2  0093               	movwf	19	;volatile
  8123                           
  8124                           ;memory.c: 186: EECON1bits.EEPGD = 0;
  8125  0AB3  1395               	bcf	21,7	;volsfr
  8126                           
  8127                           ;memory.c: 187: EECON1bits.CFGS = 0;
  8128  0AB4  1315               	bcf	21,6	;volsfr
  8129                           
  8130                           ;memory.c: 188: EECON1bits.WREN = 1;
  8131  0AB5  1515               	bsf	21,2	;volsfr
  8132                           
  8133                           ;memory.c: 190: GIEBitValue = INTCONbits.GIE;
  8134  0AB6  3000               	movlw	0
  8135  0AB7  1B8B               	btfsc	11,7	;volatile
  8136  0AB8  3001               	movlw	1
  8137  0AB9  0020               	movlb	0	; select bank0
  8138  0ABA  00A2               	movwf	DATAEE_WriteByte@GIEBitValue
  8139                           
  8140                           ;memory.c: 191: INTCONbits.GIE = 0;
  8141  0ABB  138B               	bcf	11,7	;volatile
  8142                           
  8143                           ;memory.c: 192: EECON2 = 0x55;
  8144  0ABC  3055               	movlw	85
  8145  0ABD  0023               	movlb	3	; select bank3
  8146  0ABE  0096               	movwf	22	;volsfr
  8147                           
  8148                           ;memory.c: 193: EECON2 = 0xAA;
  8149  0ABF  30AA               	movlw	170
  8150  0AC0  0096               	movwf	22	;volsfr
  8151                           
  8152                           ;memory.c: 194: EECON1bits.WR = 1;
  8153  0AC1  1495               	bsf	21,1	;volsfr
  8154  0AC2                     l326:	
  8155                           ;memory.c: 197: {
  8156                           
  8157                           ;memory.c: 196: while (EECON1bits.WR)
  8158                           
  8159  0AC2  1895               	btfsc	21,1	;volsfr
  8160  0AC3  2AC2               	goto	l326
  8161                           
  8162                           ;memory.c: 198: }
  8163                           ;memory.c: 200: EECON1bits.WREN = 0;
  8164  0AC4  1115               	bcf	21,2	;volsfr
  8165                           
  8166                           ;memory.c: 201: INTCONbits.GIE = GIEBitValue;
  8167  0AC5  0020               	movlb	0	; select bank0
  8168  0AC6  0C22               	rrf	DATAEE_WriteByte@GIEBitValue,w
  8169  0AC7  1C03               	skipc
  8170  0AC8  138B               	bcf	11,7	;volatile
  8171  0AC9  1803               	skipnc
  8172  0ACA  178B               	bsf	11,7	;volatile
  8173  0ACB  0008               	return
  8174  0ACC                     __end_of_DATAEE_WriteByte:	
  8175                           
  8176                           	psect	text38
  8177  089D                     __ptext38:	
  8178 ;; *************** function _PROTOCOL_EXT *****************
  8179 ;; Defined at:
  8180 ;;		line 116 in file "protocol.c"
  8181 ;; Parameters:    Size  Location     Type
  8182 ;;  char_buf        1    wreg     PTR unsigned char 
  8183 ;;		 -> buf(48), I2C1_StatusCallback@ext_buf(48), 
  8184 ;; Auto vars:     Size  Location     Type
  8185 ;;  char_buf        1    0[BANK0 ] PTR unsigned char 
  8186 ;;		 -> buf(48), I2C1_StatusCallback@ext_buf(48), 
  8187 ;; Return value:  Size  Location     Type
  8188 ;;                  1    wreg      void 
  8189 ;; Registers used:
  8190 ;;		wreg, status,2, status,0
  8191 ;; Tracked objects:
  8192 ;;		On entry : 0/0
  8193 ;;		On exit  : 0/0
  8194 ;;		Unchanged: 0/0
  8195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8197 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8199 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8200 ;;Total ram usage:        1 bytes
  8201 ;; Hardware stack levels used:    1
  8202 ;; Hardware stack levels required when called:    5
  8203 ;; This function calls:
  8204 ;;		Nothing
  8205 ;; This function is called by:
  8206 ;;		_PROTOCOL_Loop
  8207 ;; This function uses a non-reentrant model
  8208 ;;
  8209                           
  8210                           
  8211                           ;psect for function _PROTOCOL_EXT
  8212  089D                     _PROTOCOL_EXT:	
  8213                           
  8214                           ;incstack = 0
  8215                           ; Regs used in _PROTOCOL_EXT: [wreg+status,2+status,0]
  8216  089D  0008               	return
  8217  089E                     __end_of_PROTOCOL_EXT:	
  8218                           
  8219                           	psect	text39
  8220  0A49                     __ptext39:	
  8221 ;; *************** function _EUSART_Read *****************
  8222 ;; Defined at:
  8223 ;;		line 112 in file "mcc_generated_files/eusart.c"
  8224 ;; Parameters:    Size  Location     Type
  8225 ;;		None
  8226 ;; Auto vars:     Size  Location     Type
  8227 ;;  readValue       1    1[BANK0 ] unsigned char 
  8228 ;; Return value:  Size  Location     Type
  8229 ;;                  1    wreg      unsigned char 
  8230 ;; Registers used:
  8231 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8232 ;; Tracked objects:
  8233 ;;		On entry : 0/0
  8234 ;;		On exit  : 0/0
  8235 ;;		Unchanged: 0/0
  8236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8238 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8239 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8240 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8241 ;;Total ram usage:        2 bytes
  8242 ;; Hardware stack levels used:    1
  8243 ;; Hardware stack levels required when called:    5
  8244 ;; This function calls:
  8245 ;;		Nothing
  8246 ;; This function is called by:
  8247 ;;		_PROTOCOL_Loop
  8248 ;;		_getch
  8249 ;; This function uses a non-reentrant model
  8250 ;;
  8251                           
  8252                           
  8253                           ;psect for function _EUSART_Read
  8254  0A49                     _EUSART_Read:	
  8255                           
  8256                           ;eusart.c: 114: uint8_t readValue = 0;
  8257                           
  8258                           ;incstack = 0
  8259                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  8260  0A49  0020               	movlb	0	; select bank0
  8261  0A4A  01A1               	clrf	EUSART_Read@readValue
  8262  0A4B                     l3551:	
  8263                           ;eusart.c: 117: {
  8264                           
  8265                           ;eusart.c: 116: while(0 == eusartRxCount)
  8266                           
  8267  0A4B  0867               	movf	_eusartRxCount,w	;volatile
  8268  0A4C  1903               	btfsc	3,2
  8269  0A4D  2A4B               	goto	l3551
  8270                           
  8271                           ;eusart.c: 118: }
  8272                           ;eusart.c: 120: readValue = eusartRxBuffer[eusartRxTail++];
  8273  0A4E  0868               	movf	_eusartRxTail,w
  8274  0A4F  3EA0               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  8275  0A50  0086               	movwf	6
  8276  0A51  0187               	clrf	7
  8277  0A52  0801               	movf	1,w
  8278  0A53  00A0               	movwf	??_EUSART_Read
  8279  0A54  0820               	movf	??_EUSART_Read,w
  8280  0A55  00A1               	movwf	EUSART_Read@readValue
  8281  0A56  3001               	movlw	1
  8282  0A57  00A0               	movwf	??_EUSART_Read
  8283  0A58  0820               	movf	??_EUSART_Read,w
  8284  0A59  07E8               	addwf	_eusartRxTail,f	;volatile
  8285                           
  8286                           ;eusart.c: 121: if(sizeof(eusartRxBuffer) <= eusartRxTail)
  8287  0A5A  3008               	movlw	8
  8288  0A5B  0268               	subwf	_eusartRxTail,w	;volatile
  8289  0A5C  1803               	btfsc	3,0
  8290                           
  8291                           ;eusart.c: 122: {
  8292                           ;eusart.c: 123: eusartRxTail = 0;
  8293  0A5D  01E8               	clrf	_eusartRxTail	;volatile
  8294                           
  8295                           ;eusart.c: 124: }
  8296                           ;eusart.c: 125: PIE1bits.RCIE = 0;
  8297  0A5E  0021               	movlb	1	; select bank1
  8298  0A5F  1291               	bcf	17,5	;volatile
  8299                           
  8300                           ;eusart.c: 126: eusartRxCount--;
  8301  0A60  3001               	movlw	1
  8302  0A61  0020               	movlb	0	; select bank0
  8303  0A62  02E7               	subwf	_eusartRxCount,f	;volatile
  8304                           
  8305                           ;eusart.c: 127: PIE1bits.RCIE = 1;
  8306  0A63  0021               	movlb	1	; select bank1
  8307  0A64  1691               	bsf	17,5	;volatile
  8308                           
  8309                           ;eusart.c: 129: return readValue;
  8310  0A65  0020               	movlb	0	; select bank0
  8311  0A66  0821               	movf	EUSART_Read@readValue,w
  8312  0A67  0008               	return
  8313  0A68                     __end_of_EUSART_Read:	
  8314                           
  8315                           	psect	text40
  8316  0CA6                     __ptext40:	
  8317 ;; *************** function _PROTOCOL_Initialize *****************
  8318 ;; Defined at:
  8319 ;;		line 59 in file "protocol.c"
  8320 ;; Parameters:    Size  Location     Type
  8321 ;;  device_id       2    1[BANK0 ] PTR const unsigned char 
  8322 ;;		 -> STR_1(11), 
  8323 ;;  start_handle    1    3[BANK0 ] PTR void 
  8324 ;;		 -> NULL(0), 
  8325 ;;  stop_handler    1    4[BANK0 ] PTR void 
  8326 ;;		 -> NULL(0), 
  8327 ;;  set_handler     1    5[BANK0 ] PTR void 
  8328 ;;		 -> NULL(0), 
  8329 ;;  inv_handler     2    6[BANK0 ] PTR void 
  8330 ;;		 -> inv_handler(1), 
  8331 ;;  scaler          1    8[BANK0 ] unsigned char 
  8332 ;; Auto vars:     Size  Location     Type
  8333 ;;		None
  8334 ;; Return value:  Size  Location     Type
  8335 ;;                  1    wreg      void 
  8336 ;; Registers used:
  8337 ;;		wreg, status,2, status,0, pclath, cstack
  8338 ;; Tracked objects:
  8339 ;;		On entry : 0/0
  8340 ;;		On exit  : 0/0
  8341 ;;		Unchanged: 0/0
  8342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8343 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8344 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8345 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8346 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8347 ;;Total ram usage:       10 bytes
  8348 ;; Hardware stack levels used:    1
  8349 ;; Hardware stack levels required when called:    6
  8350 ;; This function calls:
  8351 ;;		_DATAEE_ReadByte
  8352 ;; This function is called by:
  8353 ;;		_main
  8354 ;; This function uses a non-reentrant model
  8355 ;;
  8356                           
  8357                           
  8358                           ;psect for function _PROTOCOL_Initialize
  8359  0CA6                     _PROTOCOL_Initialize:	
  8360                           
  8361                           ;protocol.c: 60: device_id_ = device_id;
  8362                           
  8363                           ;incstack = 0
  8364                           ; Regs used in _PROTOCOL_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8365  0CA6  0020               	movlb	0	; select bank0
  8366  0CA7  0822               	movf	PROTOCOL_Initialize@device_id+1,w
  8367  0CA8  0021               	movlb	1	; select bank1
  8368  0CA9  00DB               	movwf	(_device_id_+1)^(0+128)
  8369  0CAA  0020               	movlb	0	; select bank0
  8370  0CAB  0821               	movf	PROTOCOL_Initialize@device_id,w
  8371  0CAC  0021               	movlb	1	; select bank1
  8372  0CAD  00DA               	movwf	_device_id_^(0+128)
  8373                           
  8374                           ;protocol.c: 61: PROTOCOL_Start_Handler = start_handler;
  8375  0CAE  0020               	movlb	0	; select bank0
  8376  0CAF  0823               	movf	PROTOCOL_Initialize@start_handler,w
  8377  0CB0  00A9               	movwf	??_PROTOCOL_Initialize
  8378  0CB1  3000               	movlw	0
  8379  0CB2  00AA               	movwf	??_PROTOCOL_Initialize+1
  8380  0CB3  0829               	movf	??_PROTOCOL_Initialize,w
  8381  0CB4  0021               	movlb	1	; select bank1
  8382  0CB5  00E0               	movwf	_PROTOCOL_Start_Handler^(0+128)
  8383  0CB6  0020               	movlb	0	; select bank0
  8384  0CB7  082A               	movf	??_PROTOCOL_Initialize+1,w
  8385  0CB8  0021               	movlb	1	; select bank1
  8386  0CB9  00E1               	movwf	(_PROTOCOL_Start_Handler+1)^(0+128)
  8387                           
  8388                           ;protocol.c: 62: PROTOCOL_Stop_Handler = stop_handler;
  8389  0CBA  0020               	movlb	0	; select bank0
  8390  0CBB  0824               	movf	PROTOCOL_Initialize@stop_handler,w
  8391  0CBC  00A9               	movwf	??_PROTOCOL_Initialize
  8392  0CBD  3000               	movlw	0
  8393  0CBE  00AA               	movwf	??_PROTOCOL_Initialize+1
  8394  0CBF  0829               	movf	??_PROTOCOL_Initialize,w
  8395  0CC0  0021               	movlb	1	; select bank1
  8396  0CC1  00DE               	movwf	_PROTOCOL_Stop_Handler^(0+128)
  8397  0CC2  0020               	movlb	0	; select bank0
  8398  0CC3  082A               	movf	??_PROTOCOL_Initialize+1,w
  8399  0CC4  0021               	movlb	1	; select bank1
  8400  0CC5  00DF               	movwf	(_PROTOCOL_Stop_Handler+1)^(0+128)
  8401                           
  8402                           ;protocol.c: 63: PROTOCOL_Set_Handler = set_handler;
  8403  0CC6  0020               	movlb	0	; select bank0
  8404  0CC7  0825               	movf	PROTOCOL_Initialize@set_handler,w
  8405  0CC8  00A9               	movwf	??_PROTOCOL_Initialize
  8406  0CC9  3000               	movlw	0
  8407  0CCA  00AA               	movwf	??_PROTOCOL_Initialize+1
  8408  0CCB  0829               	movf	??_PROTOCOL_Initialize,w
  8409  0CCC  0021               	movlb	1	; select bank1
  8410  0CCD  00DC               	movwf	_PROTOCOL_Set_Handler^(0+128)
  8411  0CCE  0020               	movlb	0	; select bank0
  8412  0CCF  082A               	movf	??_PROTOCOL_Initialize+1,w
  8413  0CD0  0021               	movlb	1	; select bank1
  8414  0CD1  00DD               	movwf	(_PROTOCOL_Set_Handler+1)^(0+128)
  8415                           
  8416                           ;protocol.c: 66: value = DATAEE_ReadByte(1);
  8417  0CD2  3001               	movlw	1
  8418  0CD3  3189  2121  318C   	fcall	_DATAEE_ReadByte
  8419  0CD6  0020               	movlb	0	; select bank0
  8420  0CD7  00A9               	movwf	??_PROTOCOL_Initialize
  8421  0CD8  0829               	movf	??_PROTOCOL_Initialize,w
  8422  0CD9  00E3               	movwf	_value
  8423                           
  8424                           ;protocol.c: 68: slave_address = DATAEE_ReadByte(0);
  8425  0CDA  3000               	movlw	0
  8426  0CDB  3189  2121         	fcall	_DATAEE_ReadByte
  8427  0CDD  0020               	movlb	0	; select bank0
  8428  0CDE  00A9               	movwf	??_PROTOCOL_Initialize
  8429  0CDF  0829               	movf	??_PROTOCOL_Initialize,w
  8430  0CE0  00E5               	movwf	_slave_address
  8431                           
  8432                           ;protocol.c: 71: readbuf.status = COMPLETE;
  8433  0CE1  3003               	movlw	3
  8434  0CE2  00A9               	movwf	??_PROTOCOL_Initialize
  8435  0CE3  0829               	movf	??_PROTOCOL_Initialize,w
  8436  0CE4  0021               	movlb	1	; select bank1
  8437  0CE5  00CF               	movwf	(_readbuf^(0+128)+3)
  8438                           
  8439                           ;protocol.c: 72: PROTOCOL_Inv_Handler = inv_handler;
  8440  0CE6  0020               	movlb	0	; select bank0
  8441  0CE7  0827               	movf	PROTOCOL_Initialize@inv_handler+1,w
  8442  0CE8  0021               	movlb	1	; select bank1
  8443  0CE9  00B3               	movwf	(_PROTOCOL_Inv_Handler+1)^(0+128)
  8444  0CEA  0020               	movlb	0	; select bank0
  8445  0CEB  0826               	movf	PROTOCOL_Initialize@inv_handler,w
  8446  0CEC  0021               	movlb	1	; select bank1
  8447  0CED  00B2               	movwf	_PROTOCOL_Inv_Handler^(0+128)
  8448                           
  8449                           ;protocol.c: 73: tmr_scaler = scaler;
  8450  0CEE  0020               	movlb	0	; select bank0
  8451  0CEF  0828               	movf	PROTOCOL_Initialize@scaler,w
  8452  0CF0  00A9               	movwf	??_PROTOCOL_Initialize
  8453  0CF1  0829               	movf	??_PROTOCOL_Initialize,w
  8454  0CF2  00EE               	movwf	_tmr_scaler
  8455  0CF3  0008               	return
  8456  0CF4                     __end_of_PROTOCOL_Initialize:	
  8457                           
  8458                           	psect	text41
  8459  0921                     __ptext41:	
  8460 ;; *************** function _DATAEE_ReadByte *****************
  8461 ;; Defined at:
  8462 ;;		line 204 in file "mcc_generated_files/memory.c"
  8463 ;; Parameters:    Size  Location     Type
  8464 ;;  bAdd            1    wreg     unsigned char 
  8465 ;; Auto vars:     Size  Location     Type
  8466 ;;  bAdd            1    0[BANK0 ] unsigned char 
  8467 ;; Return value:  Size  Location     Type
  8468 ;;                  1    wreg      unsigned char 
  8469 ;; Registers used:
  8470 ;;		wreg
  8471 ;; Tracked objects:
  8472 ;;		On entry : 0/0
  8473 ;;		On exit  : 0/0
  8474 ;;		Unchanged: 0/0
  8475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8477 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8479 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8480 ;;Total ram usage:        1 bytes
  8481 ;; Hardware stack levels used:    1
  8482 ;; Hardware stack levels required when called:    5
  8483 ;; This function calls:
  8484 ;;		Nothing
  8485 ;; This function is called by:
  8486 ;;		_PROTOCOL_Initialize
  8487 ;; This function uses a non-reentrant model
  8488 ;;
  8489                           
  8490                           
  8491                           ;psect for function _DATAEE_ReadByte
  8492  0921                     _DATAEE_ReadByte:	
  8493                           
  8494                           ;incstack = 0
  8495                           ; Regs used in _DATAEE_ReadByte: [wreg]
  8496                           ;DATAEE_ReadByte@bAdd stored from wreg
  8497  0921  0020               	movlb	0	; select bank0
  8498  0922  00A0               	movwf	DATAEE_ReadByte@bAdd
  8499                           
  8500                           ;memory.c: 206: EEADRL = (bAdd & 0x0ff);
  8501  0923  0820               	movf	DATAEE_ReadByte@bAdd,w
  8502  0924  0023               	movlb	3	; select bank3
  8503  0925  0091               	movwf	17	;volatile
  8504                           
  8505                           ;memory.c: 207: EECON1bits.CFGS = 0;
  8506  0926  1315               	bcf	21,6	;volsfr
  8507                           
  8508                           ;memory.c: 208: EECON1bits.EEPGD = 0;
  8509  0927  1395               	bcf	21,7	;volsfr
  8510                           
  8511                           ;memory.c: 209: EECON1bits.RD = 1;
  8512  0928  1415               	bsf	21,0	;volsfr
  8513                           
  8514                           ;memory.c: 210: __nop();
  8515  0929  0000               	nop
  8516                           
  8517                           ;memory.c: 211: __nop();
  8518  092A  0000               	nop
  8519                           
  8520                           ;memory.c: 213: return (EEDATL);
  8521  092B  0023               	movlb	3	; select bank3
  8522  092C  0813               	movf	19,w	;volatile
  8523  092D  0008               	return
  8524  092E                     __end_of_DATAEE_ReadByte:	
  8525                           
  8526                           	psect	text42
  8527  0A2A                     __ptext42:	
  8528 ;; *************** function _PIN_MANAGER_Initialize *****************
  8529 ;; Defined at:
  8530 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
  8531 ;; Parameters:    Size  Location     Type
  8532 ;;		None
  8533 ;; Auto vars:     Size  Location     Type
  8534 ;;		None
  8535 ;; Return value:  Size  Location     Type
  8536 ;;                  1    wreg      void 
  8537 ;; Registers used:
  8538 ;;		wreg, status,2
  8539 ;; Tracked objects:
  8540 ;;		On entry : 0/0
  8541 ;;		On exit  : 0/0
  8542 ;;		Unchanged: 0/0
  8543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8545 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8547 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8548 ;;Total ram usage:        0 bytes
  8549 ;; Hardware stack levels used:    1
  8550 ;; Hardware stack levels required when called:    5
  8551 ;; This function calls:
  8552 ;;		Nothing
  8553 ;; This function is called by:
  8554 ;;		_main
  8555 ;;		_SYSTEM_Initialize
  8556 ;; This function uses a non-reentrant model
  8557 ;;
  8558                           
  8559                           
  8560                           ;psect for function _PIN_MANAGER_Initialize
  8561  0A2A                     _PIN_MANAGER_Initialize:	
  8562                           
  8563                           ;pin_manager.c: 56: LATA = 0x00;
  8564                           
  8565                           ;incstack = 0
  8566                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  8567  0A2A  0022               	movlb	2	; select bank2
  8568  0A2B  018C               	clrf	12	;volatile
  8569                           
  8570                           ;pin_manager.c: 57: LATB = 0x00;
  8571  0A2C  018D               	clrf	13	;volatile
  8572                           
  8573                           ;pin_manager.c: 58: LATC = 0x00;
  8574  0A2D  018E               	clrf	14	;volatile
  8575                           
  8576                           ;pin_manager.c: 63: TRISA = 0x3F;
  8577  0A2E  303F               	movlw	63
  8578  0A2F  0021               	movlb	1	; select bank1
  8579  0A30  008C               	movwf	12	;volatile
  8580                           
  8581                           ;pin_manager.c: 64: TRISB = 0xF0;
  8582  0A31  30F0               	movlw	240
  8583  0A32  008D               	movwf	13	;volatile
  8584                           
  8585                           ;pin_manager.c: 65: TRISC = 0x7F;
  8586  0A33  307F               	movlw	127
  8587  0A34  008E               	movwf	14	;volatile
  8588                           
  8589                           ;pin_manager.c: 70: ANSELC = 0x4F;
  8590  0A35  304F               	movlw	79
  8591  0A36  0023               	movlb	3	; select bank3
  8592  0A37  008E               	movwf	14	;volatile
  8593                           
  8594                           ;pin_manager.c: 71: ANSELB = 0x20;
  8595  0A38  3020               	movlw	32
  8596  0A39  008D               	movwf	13	;volatile
  8597                           
  8598                           ;pin_manager.c: 72: ANSELA = 0x17;
  8599  0A3A  3017               	movlw	23
  8600  0A3B  008C               	movwf	12	;volatile
  8601                           
  8602                           ;pin_manager.c: 77: WPUB = 0x00;
  8603  0A3C  0024               	movlb	4	; select bank4
  8604  0A3D  018D               	clrf	13	;volatile
  8605                           
  8606                           ;pin_manager.c: 78: WPUA = 0x2F;
  8607  0A3E  302F               	movlw	47
  8608  0A3F  008C               	movwf	12	;volatile
  8609                           
  8610                           ;pin_manager.c: 79: WPUC = 0x37;
  8611  0A40  3037               	movlw	55
  8612  0A41  008E               	movwf	14	;volatile
  8613                           
  8614                           ;pin_manager.c: 80: OPTION_REGbits.nWPUEN = 0;
  8615  0A42  0021               	movlb	1	; select bank1
  8616  0A43  1395               	bcf	21,7	;volatile
  8617                           
  8618                           ;pin_manager.c: 86: APFCON1 = 0x00;
  8619  0A44  0022               	movlb	2	; select bank2
  8620  0A45  019E               	clrf	30	;volatile
  8621                           
  8622                           ;pin_manager.c: 87: APFCON0 = 0x84;
  8623  0A46  3084               	movlw	132
  8624  0A47  009D               	movwf	29	;volatile
  8625  0A48  0008               	return
  8626  0A49                     __end_of_PIN_MANAGER_Initialize:	
  8627                           
  8628                           	psect	text43
  8629  08DF                     __ptext43:	
  8630 ;; *************** function _OSCILLATOR_Initialize *****************
  8631 ;; Defined at:
  8632 ;;		line 81 in file "mcc_generated_files/mcc.c"
  8633 ;; Parameters:    Size  Location     Type
  8634 ;;		None
  8635 ;; Auto vars:     Size  Location     Type
  8636 ;;		None
  8637 ;; Return value:  Size  Location     Type
  8638 ;;                  1    wreg      void 
  8639 ;; Registers used:
  8640 ;;		wreg, status,2
  8641 ;; Tracked objects:
  8642 ;;		On entry : 0/0
  8643 ;;		On exit  : 0/0
  8644 ;;		Unchanged: 0/0
  8645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8649 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8650 ;;Total ram usage:        0 bytes
  8651 ;; Hardware stack levels used:    1
  8652 ;; Hardware stack levels required when called:    5
  8653 ;; This function calls:
  8654 ;;		Nothing
  8655 ;; This function is called by:
  8656 ;;		_main
  8657 ;;		_SYSTEM_Initialize
  8658 ;; This function uses a non-reentrant model
  8659 ;;
  8660                           
  8661                           
  8662                           ;psect for function _OSCILLATOR_Initialize
  8663  08DF                     _OSCILLATOR_Initialize:	
  8664                           
  8665                           ;mcc.c: 84: OSCCON = 0x70;
  8666                           
  8667                           ;incstack = 0
  8668                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  8669  08DF  3070               	movlw	112
  8670  08E0  0021               	movlb	1	; select bank1
  8671  08E1  0099               	movwf	25	;volatile
  8672                           
  8673                           ;mcc.c: 86: OSCTUNE = 0x00;
  8674  08E2  0198               	clrf	24	;volatile
  8675  08E3                     l152:	
  8676                           ;mcc.c: 89: {
  8677                           
  8678                           ;mcc.c: 88: while(PLLR == 0)
  8679                           
  8680  08E3  1B1A               	btfsc	26,6	;volatile
  8681  08E4  0008               	return
  8682  08E5  28E3               	goto	l152
  8683  08E6                     __end_of_OSCILLATOR_Initialize:	
  8684                           
  8685                           	psect	text44
  8686  0A88                     __ptext44:	
  8687 ;; *************** function _I2C1_Initialize *****************
  8688 ;; Defined at:
  8689 ;;		line 30 in file "mcc_generated_files/i2c1.c"
  8690 ;; Parameters:    Size  Location     Type
  8691 ;;		None
  8692 ;; Auto vars:     Size  Location     Type
  8693 ;;		None
  8694 ;; Return value:  Size  Location     Type
  8695 ;;                  1    wreg      void 
  8696 ;; Registers used:
  8697 ;;		wreg, status,2, status,0, pclath, cstack
  8698 ;; Tracked objects:
  8699 ;;		On entry : 0/0
  8700 ;;		On exit  : 0/0
  8701 ;;		Unchanged: 0/0
  8702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8705 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8706 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8707 ;;Total ram usage:        2 bytes
  8708 ;; Hardware stack levels used:    1
  8709 ;; Hardware stack levels required when called:    6
  8710 ;; This function calls:
  8711 ;;		_PROTOCOL_Read_Device_Address
  8712 ;; This function is called by:
  8713 ;;		_main
  8714 ;;		_SYSTEM_Initialize
  8715 ;; This function uses a non-reentrant model
  8716 ;;
  8717                           
  8718                           
  8719                           ;psect for function _I2C1_Initialize
  8720  0A88                     _I2C1_Initialize:	
  8721                           
  8722                           ;i2c1.c: 34: _delay((unsigned long)((2000)*(32000000/4000.0)));
  8723                           
  8724                           ;incstack = 0
  8725                           ; Regs used in _I2C1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8726  0A88  3052               	movlw	82
  8727  0A89  0020               	movlb	0	; select bank0
  8728  0A8A  00A1               	movwf	??_I2C1_Initialize+1
  8729  0A8B  302B               	movlw	43
  8730  0A8C  00A0               	movwf	??_I2C1_Initialize
  8731  0A8D  3000               	movlw	0
  8732  0A8E                     u4067:	
  8733  0A8E  0B89               	decfsz	9,f
  8734  0A8F  2A8E               	goto	u4067
  8735  0A90  0BA0               	decfsz	??_I2C1_Initialize,f
  8736  0A91  2A8E               	goto	u4067
  8737  0A92  0BA1               	decfsz	??_I2C1_Initialize+1,f
  8738  0A93  2A8E               	goto	u4067
  8739  0A94  0000               	nop
  8740                           
  8741                           ;i2c1.c: 38: SSP1STAT = 0x80;
  8742  0A95  3080               	movlw	128
  8743  0A96  0024               	movlb	4	; select bank4
  8744  0A97  0094               	movwf	20	;volatile
  8745                           
  8746                           ;i2c1.c: 40: SSP1CON1 = 0x26;
  8747  0A98  3026               	movlw	38
  8748  0A99  0095               	movwf	21	;volatile
  8749                           
  8750                           ;i2c1.c: 42: SSP1CON2 = 0x81;
  8751  0A9A  3081               	movlw	129
  8752  0A9B  0096               	movwf	22	;volatile
  8753                           
  8754                           ;i2c1.c: 44: SSP1CON3 = 0x00;
  8755  0A9C  0197               	clrf	23	;volatile
  8756                           
  8757                           ;i2c1.c: 46: SSP1MSK = (0x7F << 1);
  8758  0A9D  30FE               	movlw	254
  8759  0A9E  0093               	movwf	19	;volatile
  8760                           
  8761                           ;i2c1.c: 48: SSP1ADD = (PROTOCOL_Read_Device_Address() << 1);
  8762  0A9F  3188  20AB         	fcall	_PROTOCOL_Read_Device_Address
  8763  0AA1  0709               	addwf	9,w
  8764  0AA2  0024               	movlb	4	; select bank4
  8765  0AA3  0092               	movwf	18	;volatile
  8766                           
  8767                           ;i2c1.c: 51: PIR1bits.SSP1IF = 0;
  8768  0AA4  0020               	movlb	0	; select bank0
  8769  0AA5  1191               	bcf	17,3	;volatile
  8770                           
  8771                           ;i2c1.c: 53: PIE1bits.SSP1IE = 1;
  8772  0AA6  0021               	movlb	1	; select bank1
  8773  0AA7  1591               	bsf	17,3	;volatile
  8774  0AA8  0008               	return
  8775  0AA9                     __end_of_I2C1_Initialize:	
  8776                           
  8777                           	psect	text45
  8778  08AB                     __ptext45:	
  8779 ;; *************** function _PROTOCOL_Read_Device_Address *****************
  8780 ;; Defined at:
  8781 ;;		line 89 in file "protocol.c"
  8782 ;; Parameters:    Size  Location     Type
  8783 ;;		None
  8784 ;; Auto vars:     Size  Location     Type
  8785 ;;		None
  8786 ;; Return value:  Size  Location     Type
  8787 ;;                  1    wreg      unsigned char 
  8788 ;; Registers used:
  8789 ;;		wreg
  8790 ;; Tracked objects:
  8791 ;;		On entry : 0/0
  8792 ;;		On exit  : 0/0
  8793 ;;		Unchanged: 0/0
  8794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8796 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8797 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8798 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8799 ;;Total ram usage:        0 bytes
  8800 ;; Hardware stack levels used:    1
  8801 ;; Hardware stack levels required when called:    5
  8802 ;; This function calls:
  8803 ;;		Nothing
  8804 ;; This function is called by:
  8805 ;;		_I2C1_Initialize
  8806 ;;		_PROTOCOL_Loop
  8807 ;; This function uses a non-reentrant model
  8808 ;;
  8809                           
  8810                           
  8811                           ;psect for function _PROTOCOL_Read_Device_Address
  8812  08AB                     _PROTOCOL_Read_Device_Address:	
  8813                           
  8814                           ;protocol.c: 90: return slave_address;
  8815                           
  8816                           ;incstack = 0
  8817                           ; Regs used in _PROTOCOL_Read_Device_Address: [wreg]
  8818  08AB  0020               	movlb	0	; select bank0
  8819  08AC  0865               	movf	_slave_address,w
  8820  08AD  0008               	return
  8821  08AE                     __end_of_PROTOCOL_Read_Device_Address:	
  8822                           
  8823                           	psect	text46
  8824  09D6                     __ptext46:	
  8825 ;; *************** function _EUSART_Initialize *****************
  8826 ;; Defined at:
  8827 ;;		line 75 in file "mcc_generated_files/eusart.c"
  8828 ;; Parameters:    Size  Location     Type
  8829 ;;		None
  8830 ;; Auto vars:     Size  Location     Type
  8831 ;;		None
  8832 ;; Return value:  Size  Location     Type
  8833 ;;                  1    wreg      void 
  8834 ;; Registers used:
  8835 ;;		wreg, status,2
  8836 ;; Tracked objects:
  8837 ;;		On entry : 0/0
  8838 ;;		On exit  : 0/0
  8839 ;;		Unchanged: 0/0
  8840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8842 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8843 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8844 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8845 ;;Total ram usage:        1 bytes
  8846 ;; Hardware stack levels used:    1
  8847 ;; Hardware stack levels required when called:    5
  8848 ;; This function calls:
  8849 ;;		Nothing
  8850 ;; This function is called by:
  8851 ;;		_main
  8852 ;;		_SYSTEM_Initialize
  8853 ;; This function uses a non-reentrant model
  8854 ;;
  8855                           
  8856                           
  8857                           ;psect for function _EUSART_Initialize
  8858  09D6                     _EUSART_Initialize:	
  8859                           
  8860                           ;eusart.c: 78: PIE1bits.RCIE = 0;
  8861                           
  8862                           ;incstack = 0
  8863                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  8864  09D6  0021               	movlb	1	; select bank1
  8865  09D7  1291               	bcf	17,5	;volatile
  8866                           
  8867                           ;eusart.c: 79: PIE1bits.TXIE = 0;
  8868  09D8  1211               	bcf	17,4	;volatile
  8869                           
  8870                           ;eusart.c: 84: BAUDCON = 0x08;
  8871  09D9  3008               	movlw	8
  8872  09DA  0023               	movlb	3	; select bank3
  8873  09DB  009F               	movwf	31	;volatile
  8874                           
  8875                           ;eusart.c: 87: RCSTA = 0x90;
  8876  09DC  3090               	movlw	144
  8877  09DD  009D               	movwf	29	;volatile
  8878                           
  8879                           ;eusart.c: 90: TXSTA = 0x24;
  8880  09DE  3024               	movlw	36
  8881  09DF  009E               	movwf	30	;volatile
  8882                           
  8883                           ;eusart.c: 93: SPBRGL = 0x40;
  8884  09E0  3040               	movlw	64
  8885  09E1  009B               	movwf	27	;volatile
  8886                           
  8887                           ;eusart.c: 96: SPBRGH = 0x03;
  8888  09E2  3003               	movlw	3
  8889  09E3  009C               	movwf	28	;volatile
  8890                           
  8891                           ;eusart.c: 100: eusartTxHead = 0;
  8892  09E4  01FC               	clrf	_eusartTxHead	;volatile
  8893                           
  8894                           ;eusart.c: 101: eusartTxTail = 0;
  8895  09E5  01FB               	clrf	_eusartTxTail	;volatile
  8896                           
  8897                           ;eusart.c: 102: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
  8898  09E6  3008               	movlw	8
  8899  09E7  0020               	movlb	0	; select bank0
  8900  09E8  00A0               	movwf	??_EUSART_Initialize
  8901  09E9  0820               	movf	??_EUSART_Initialize,w
  8902  09EA  00FA               	movwf	_eusartTxBufferRemaining	;volatile
  8903                           
  8904                           ;eusart.c: 104: eusartRxHead = 0;
  8905  09EB  01E9               	clrf	_eusartRxHead	;volatile
  8906                           
  8907                           ;eusart.c: 105: eusartRxTail = 0;
  8908  09EC  01E8               	clrf	_eusartRxTail	;volatile
  8909                           
  8910                           ;eusart.c: 106: eusartRxCount = 0;
  8911  09ED  01E7               	clrf	_eusartRxCount	;volatile
  8912                           
  8913                           ;eusart.c: 109: PIE1bits.RCIE = 1;
  8914  09EE  0021               	movlb	1	; select bank1
  8915  09EF  1691               	bsf	17,5	;volatile
  8916  09F0  0008               	return
  8917  09F1                     __end_of_EUSART_Initialize:	
  8918                           
  8919                           	psect	text47
  8920  08F4                     __ptext47:	
  8921 ;; *************** function _ADC_Initialize *****************
  8922 ;; Defined at:
  8923 ;;		line 64 in file "mcc_generated_files/adc.c"
  8924 ;; Parameters:    Size  Location     Type
  8925 ;;		None
  8926 ;; Auto vars:     Size  Location     Type
  8927 ;;		None
  8928 ;; Return value:  Size  Location     Type
  8929 ;;                  1    wreg      void 
  8930 ;; Registers used:
  8931 ;;		wreg, status,2
  8932 ;; Tracked objects:
  8933 ;;		On entry : 0/0
  8934 ;;		On exit  : 0/0
  8935 ;;		Unchanged: 0/0
  8936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8937 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8938 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8939 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8940 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8941 ;;Total ram usage:        0 bytes
  8942 ;; Hardware stack levels used:    1
  8943 ;; Hardware stack levels required when called:    5
  8944 ;; This function calls:
  8945 ;;		Nothing
  8946 ;; This function is called by:
  8947 ;;		_main
  8948 ;;		_SYSTEM_Initialize
  8949 ;; This function uses a non-reentrant model
  8950 ;;
  8951                           
  8952                           
  8953                           ;psect for function _ADC_Initialize
  8954  08F4                     _ADC_Initialize:	
  8955                           
  8956                           ;adc.c: 69: ADCON0 = 0x01;
  8957                           
  8958                           ;incstack = 0
  8959                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  8960  08F4  3001               	movlw	1
  8961  08F5  0021               	movlb	1	; select bank1
  8962  08F6  009D               	movwf	29	;volatile
  8963                           
  8964                           ;adc.c: 72: ADCON1 = 0xF0;
  8965  08F7  30F0               	movlw	240
  8966  08F8  009E               	movwf	30	;volatile
  8967                           
  8968                           ;adc.c: 75: ADRESL = 0x00;
  8969  08F9  019B               	clrf	27	;volatile
  8970                           
  8971                           ;adc.c: 78: ADRESH = 0x00;
  8972  08FA  019C               	clrf	28	;volatile
  8973  08FB  0008               	return
  8974  08FC                     __end_of_ADC_Initialize:	
  8975                           
  8976                           	psect	intentry
  8977  0004                     __pintentry:	
  8978 ;; *************** function _INTERRUPT_InterruptManager *****************
  8979 ;; Defined at:
  8980 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  8981 ;; Parameters:    Size  Location     Type
  8982 ;;		None
  8983 ;; Auto vars:     Size  Location     Type
  8984 ;;		None
  8985 ;; Return value:  Size  Location     Type
  8986 ;;                  1    wreg      void 
  8987 ;; Registers used:
  8988 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8989 ;; Tracked objects:
  8990 ;;		On entry : 0/0
  8991 ;;		On exit  : 0/0
  8992 ;;		Unchanged: 0/0
  8993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8995 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8996 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8997 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8998 ;;Total ram usage:        1 bytes
  8999 ;; Hardware stack levels used:    1
  9000 ;; Hardware stack levels required when called:    4
  9001 ;; This function calls:
  9002 ;;		_EUSART_Receive_ISR
  9003 ;;		_EUSART_Transmit_ISR
  9004 ;;		_I2C1_ISR
  9005 ;; This function is called by:
  9006 ;;		Interrupt level 1
  9007 ;; This function uses a non-reentrant model
  9008 ;;
  9009                           
  9010  0004                     _INTERRUPT_InterruptManager:	
  9011                           
  9012                           ;incstack = 0
  9013  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  9014                           
  9015                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9016  0005  3180               	pagesel	$
  9017  0006  0020               	movlb	0	; select bank0
  9018  0007  087F               	movf	127,w
  9019  0008  00F9               	movwf	??_INTERRUPT_InterruptManager
  9020                           
  9021                           ;interrupt_manager.c: 54: if(INTCONbits.PEIE == 1 && PIE1bits.TXIE == 1 && PIR1bits.TXIF
      +                           == 1)
  9022  0009  1F0B               	btfss	11,6	;volatile
  9023  000A  2815               	goto	i1l173
  9024  000B  0021               	movlb	1	; select bank1
  9025  000C  1E11               	btfss	17,4	;volatile
  9026  000D  2815               	goto	i1l173
  9027  000E  0020               	movlb	0	; select bank0
  9028  000F  1E11               	btfss	17,4	;volatile
  9029  0010  2815               	goto	i1l173
  9030                           
  9031                           ;interrupt_manager.c: 55: {
  9032                           ;interrupt_manager.c: 56: EUSART_Transmit_ISR();
  9033  0011  3189  21BB  3180   	fcall	_EUSART_Transmit_ISR
  9034                           
  9035                           ;interrupt_manager.c: 57: }
  9036  0014  282B               	goto	i1l179
  9037  0015                     i1l173:	
  9038                           
  9039                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits
      +                          .RCIF == 1)
  9040  0015  1F0B               	btfss	11,6	;volatile
  9041  0016  2821               	goto	i1l175
  9042  0017  0021               	movlb	1	; select bank1
  9043  0018  1E91               	btfss	17,5	;volatile
  9044  0019  2821               	goto	i1l175
  9045  001A  0020               	movlb	0	; select bank0
  9046  001B  1E91               	btfss	17,5	;volatile
  9047  001C  2821               	goto	i1l175
  9048                           
  9049                           ;interrupt_manager.c: 59: {
  9050                           ;interrupt_manager.c: 60: EUSART_Receive_ISR();
  9051  001D  3189  21A0  3180   	fcall	_EUSART_Receive_ISR
  9052                           
  9053                           ;interrupt_manager.c: 61: }
  9054  0020  282B               	goto	i1l179
  9055  0021                     i1l175:	
  9056                           
  9057                           ;interrupt_manager.c: 62: else if(INTCONbits.PEIE == 1 && PIE1bits.SSP1IE == 1 && PIR1bi
      +                          ts.SSP1IF == 1)
  9058  0021  1F0B               	btfss	11,6	;volatile
  9059  0022  282B               	goto	i1l179
  9060  0023  0021               	movlb	1	; select bank1
  9061  0024  1D91               	btfss	17,3	;volatile
  9062  0025  282B               	goto	i1l179
  9063  0026  0020               	movlb	0	; select bank0
  9064  0027  1D91               	btfss	17,3	;volatile
  9065  0028  282B               	goto	i1l179
  9066                           
  9067                           ;interrupt_manager.c: 63: {
  9068                           ;interrupt_manager.c: 64: I2C1_ISR();
  9069  0029  318A  22F0         	fcall	_I2C1_ISR
  9070  002B                     i1l179:	
  9071                           ;interrupt_manager.c: 66: else
  9072                           ;interrupt_manager.c: 67: {
  9073                           
  9074                           ;interrupt_manager.c: 65: }
  9075                           
  9076  002B  0879               	movf	??_INTERRUPT_InterruptManager,w
  9077  002C  0020               	movlb	0	; select bank0
  9078  002D  00FF               	movwf	127
  9079  002E  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  9080  002F  0009               	retfie
  9081  0030                     __end_of_INTERRUPT_InterruptManager:	
  9082                           
  9083                           	psect	text49
  9084  0AF0                     __ptext49:	
  9085 ;; *************** function _I2C1_ISR *****************
  9086 ;; Defined at:
  9087 ;;		line 57 in file "mcc_generated_files/i2c1.c"
  9088 ;; Parameters:    Size  Location     Type
  9089 ;;		None
  9090 ;; Auto vars:     Size  Location     Type
  9091 ;;  i2c_data        1    8[COMMON] unsigned char 
  9092 ;; Return value:  Size  Location     Type
  9093 ;;                  1    wreg      void 
  9094 ;; Registers used:
  9095 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9096 ;; Tracked objects:
  9097 ;;		On entry : 0/0
  9098 ;;		On exit  : 0/0
  9099 ;;		Unchanged: 0/0
  9100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9102 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9103 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9104 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9105 ;;Total ram usage:        2 bytes
  9106 ;; Hardware stack levels used:    1
  9107 ;; Hardware stack levels required when called:    3
  9108 ;; This function calls:
  9109 ;;		_I2C1_StatusCallback
  9110 ;; This function is called by:
  9111 ;;		_INTERRUPT_InterruptManager
  9112 ;; This function uses a non-reentrant model
  9113 ;;
  9114                           
  9115                           
  9116                           ;psect for function _I2C1_ISR
  9117  0AF0                     _I2C1_ISR:	
  9118                           
  9119                           ;i2c1.c: 59: uint8_t i2c_data = 0x55;
  9120                           
  9121                           ;incstack = 0
  9122                           ; Regs used in _I2C1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9123  0AF0  3055               	movlw	85
  9124  0AF1  00F7               	movwf	??_I2C1_ISR
  9125  0AF2  0877               	movf	??_I2C1_ISR,w
  9126  0AF3  00F8               	movwf	I2C1_ISR@i2c_data
  9127                           
  9128                           ;i2c1.c: 64: PIR1bits.SSP1IF = 0;
  9129  0AF4  0020               	movlb	0	; select bank0
  9130  0AF5  1191               	bcf	17,3	;volatile
  9131                           
  9132                           ;i2c1.c: 65: i2c_data = SSP1BUF;
  9133  0AF6  0024               	movlb	4	; select bank4
  9134  0AF7  0811               	movf	17,w	;volatile
  9135  0AF8  00F7               	movwf	??_I2C1_ISR
  9136  0AF9  0877               	movf	??_I2C1_ISR,w
  9137  0AFA  00F8               	movwf	I2C1_ISR@i2c_data
  9138                           
  9139                           ;i2c1.c: 66: if(1 == SSP1STATbits.R_nW)
  9140  0AFB  1D14               	btfss	20,2	;volatile
  9141  0AFC  2B04               	goto	i1l64
  9142                           
  9143                           ;i2c1.c: 67: {
  9144                           ;i2c1.c: 68: if((1 == SSP1STATbits.D_nA) && (1 == SSP1CON2bits.ACKSTAT))
  9145  0AFD  1A94               	btfsc	20,5	;volatile
  9146  0AFE  1F16               	btfss	22,6	;volatile
  9147  0AFF  2B02               	goto	i1l3681
  9148                           
  9149                           ;i2c1.c: 69: {
  9150                           ;i2c1.c: 71: I2C1_StatusCallback(I2C1_SLAVE_READ_COMPLETED);
  9151  0B00  3003               	movlw	3
  9152  0B01  2B12               	goto	L4
  9153  0B02                     i1l3681:	
  9154                           ;i2c1.c: 72: }
  9155                           
  9156                           
  9157                           ;i2c1.c: 73: else
  9158                           ;i2c1.c: 74: {
  9159                           ;i2c1.c: 76: I2C1_StatusCallback(I2C1_SLAVE_READ_REQUEST);
  9160  0B02  3001               	movlw	1
  9161  0B03  2B12               	goto	L4
  9162  0B04                     i1l64:	
  9163                           ;i2c1.c: 77: }
  9164                           ;i2c1.c: 78: }
  9165                           
  9166                           
  9167                           ;i2c1.c: 79: else if(0 == SSP1STATbits.D_nA)
  9168  0B04  1A94               	btfsc	20,5	;volatile
  9169  0B05  2B0D               	goto	i1l3689
  9170                           
  9171                           ;i2c1.c: 80: {
  9172                           ;i2c1.c: 83: if(0x00 == i2c_data)
  9173  0B06  0878               	movf	I2C1_ISR@i2c_data,w
  9174  0B07  1D03               	btfss	3,2
  9175  0B08  2B0B               	goto	i1l3687
  9176                           
  9177                           ;i2c1.c: 84: {
  9178                           ;i2c1.c: 86: I2C1_StatusCallback(I2C1_SLAVE_GENERAL_CALL_REQUEST);
  9179  0B09  3004               	movlw	4
  9180  0B0A  2B12               	goto	L4
  9181  0B0B                     i1l3687:	
  9182                           ;i2c1.c: 87: }
  9183                           
  9184                           
  9185                           ;i2c1.c: 88: else
  9186                           ;i2c1.c: 89: {
  9187                           ;i2c1.c: 91: I2C1_StatusCallback(I2C1_SLAVE_WRITE_REQUEST);
  9188  0B0B  3000               	movlw	0
  9189  0B0C  2B12               	goto	L4
  9190  0B0D                     i1l3689:	
  9191                           ;i2c1.c: 92: }
  9192                           ;i2c1.c: 93: }
  9193                           
  9194                           
  9195                           ;i2c1.c: 94: else
  9196                           ;i2c1.c: 95: {
  9197                           ;i2c1.c: 96: I2C_slaveWriteData = i2c_data;
  9198  0B0D  0878               	movf	I2C1_ISR@i2c_data,w
  9199  0B0E  00F7               	movwf	??_I2C1_ISR
  9200  0B0F  0877               	movf	??_I2C1_ISR,w
  9201  0B10  00FD               	movwf	_I2C_slaveWriteData	;volatile
  9202                           
  9203                           ;i2c1.c: 99: I2C1_StatusCallback(I2C1_SLAVE_WRITE_COMPLETED);
  9204  0B11  3002               	movlw	2
  9205  0B12                     L4:	
  9206  0B12  3186  26F4         	fcall	_I2C1_StatusCallback
  9207                           
  9208                           ;i2c1.c: 100: }
  9209                           ;i2c1.c: 102: SSP1CON1bits.CKP = 1;
  9210  0B14  0024               	movlb	4	; select bank4
  9211  0B15  1615               	bsf	21,4	;volatile
  9212  0B16  0008               	return
  9213  0B17                     __end_of_I2C1_ISR:	
  9214                           
  9215                           	psect	text50
  9216  06F4                     __ptext50:	
  9217 ;; *************** function _I2C1_StatusCallback *****************
  9218 ;; Defined at:
  9219 ;;		line 106 in file "mcc_generated_files/i2c1.c"
  9220 ;; Parameters:    Size  Location     Type
  9221 ;;  i2c_bus_stat    1    wreg     enum E3101
  9222 ;; Auto vars:     Size  Location     Type
  9223 ;;  i2c_bus_stat    1    5[COMMON] enum E3101
  9224 ;;  pdata           1    6[COMMON] PTR unsigned char 
  9225 ;;		 -> type_no_data(1), PROTOCOL_Send_uint8_t@pbuf(1), sendbuf(16), readbuf.length(1), 
  9226 ;;		 -> readbuf.type(1), readbuf(5), 
  9227 ;; Return value:  Size  Location     Type
  9228 ;;                  1    wreg      void 
  9229 ;; Registers used:
  9230 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9231 ;; Tracked objects:
  9232 ;;		On entry : 0/0
  9233 ;;		On exit  : 0/0
  9234 ;;		Unchanged: 0/0
  9235 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9237 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9238 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9239 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9240 ;;Total ram usage:        3 bytes
  9241 ;; Hardware stack levels used:    1
  9242 ;; Hardware stack levels required when called:    2
  9243 ;; This function calls:
  9244 ;;		_PROTOCOL_Backplane_Slave_Enabled
  9245 ;;		_PROTOCOL_I2C_GET
  9246 ;;		_PROTOCOL_I2C_SEN
  9247 ;;		_PROTOCOL_I2C_WHO
  9248 ;;		_PROTOCOL_INV
  9249 ;;		_PROTOCOL_RST
  9250 ;;		_PROTOCOL_Read_Lock
  9251 ;;		i1_PROTOCOL_EXT
  9252 ;;		i1_PROTOCOL_SAV
  9253 ;;		i1_PROTOCOL_SET
  9254 ;;		i1_PROTOCOL_STA
  9255 ;;		i1_PROTOCOL_STP
  9256 ;; This function is called by:
  9257 ;;		_I2C1_ISR
  9258 ;; This function uses a non-reentrant model
  9259 ;;
  9260                           
  9261                           
  9262                           ;psect for function _I2C1_StatusCallback
  9263  06F4                     _I2C1_StatusCallback:	
  9264                           
  9265                           ;incstack = 0
  9266                           ; Regs used in _I2C1_StatusCallback: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9267                           ;I2C1_StatusCallback@i2c_bus_state stored from wreg
  9268  06F4  00F5               	movwf	I2C1_StatusCallback@i2c_bus_state
  9269                           
  9270                           ;i2c1.c: 109: static uint8_t slaveWriteType = SLAVE_NORMAL_DATA;
  9271                           ;i2c1.c: 110: static uint8_t next = 0x00;
  9272                           ;i2c1.c: 111: static uint8_t ext_len = 0;
  9273                           ;i2c1.c: 112: static uint8_t ext_cnt = 0;
  9274                           ;i2c1.c: 113: static char ext_buf[48];
  9275                           ;i2c1.c: 114: uint8_t *pdata;
  9276                           ;i2c1.c: 115: switch (i2c_bus_state)
  9277  06F5  2FAD               	goto	i1l3527
  9278  06F6                     i1l86:	
  9279                           ;i2c1.c: 116: {
  9280                           ;i2c1.c: 117: case I2C1_SLAVE_WRITE_REQUEST:
  9281                           
  9282                           
  9283                           ;i2c1.c: 118: slaveWriteType = SLAVE_DATA_ADDRESS;
  9284  06F6  0020               	movlb	0	; select bank0
  9285  06F7  01ED               	clrf	I2C1_StatusCallback@slaveWriteType
  9286  06F8  0AED               	incf	I2C1_StatusCallback@slaveWriteType,f
  9287                           
  9288                           ;i2c1.c: 119: break;
  9289  06F9  0008               	return
  9290  06FA                     i1l3453:	
  9291                           ;i2c1.c: 121: case I2C1_SLAVE_GENERAL_CALL_REQUEST:
  9292                           
  9293                           
  9294                           ;i2c1.c: 123: slaveWriteType = SLAVE_GENERAL_CALL;
  9295  06FA  3002               	movlw	2
  9296  06FB  00F4               	movwf	??_I2C1_StatusCallback
  9297  06FC  0874               	movf	??_I2C1_StatusCallback,w
  9298  06FD  0020               	movlb	0	; select bank0
  9299  06FE  00ED               	movwf	I2C1_StatusCallback@slaveWriteType
  9300                           
  9301                           ;i2c1.c: 124: break;
  9302  06FF  0008               	return
  9303  0700                     i1l3455:	
  9304                           ;i2c1.c: 132: case 0x01:
  9305                           
  9306                           ;i2c1.c: 131: switch(next) {
  9307                           
  9308                           ;i2c1.c: 129: {
  9309                           ;i2c1.c: 130: case SLAVE_DATA_ADDRESS:
  9310                           
  9311                           ;i2c1.c: 128: switch(slaveWriteType)
  9312                           
  9313                           ;i2c1.c: 126: case I2C1_SLAVE_WRITE_COMPLETED:
  9314                           
  9315                           
  9316                           ;i2c1.c: 133: PROTOCOL_SET(I2C_slaveWriteData);
  9317  0700  087D               	movf	_I2C_slaveWriteData,w	;volatile
  9318  0701  3188  20D8  3186   	fcall	i1_PROTOCOL_SET
  9319  0704  2F6F               	goto	i1l3501
  9320  0705                     i1l3459:	
  9321                           ;i2c1.c: 138: case 0x04:
  9322                           
  9323                           ;i2c1.c: 137: switch(I2C_slaveWriteData) {
  9324                           
  9325                           ;i2c1.c: 136: case 0x00:
  9326                           
  9327                           ;i2c1.c: 135: break;
  9328                           
  9329                           ;i2c1.c: 134: next = 0x00;
  9330                           
  9331                           
  9332                           ;i2c1.c: 139: PROTOCOL_STA();
  9333  0705  3188  20BC  3186   	fcall	i1_PROTOCOL_STA
  9334                           
  9335                           ;i2c1.c: 140: break;
  9336  0708  2F88               	goto	i1l3511
  9337  0709                     i1l3461:	
  9338                           ;i2c1.c: 141: case 0x05:
  9339                           
  9340                           
  9341                           ;i2c1.c: 142: PROTOCOL_STP();
  9342  0709  3188  20A8  3186   	fcall	i1_PROTOCOL_STP
  9343                           
  9344                           ;i2c1.c: 143: break;
  9345  070C  2F88               	goto	i1l3511
  9346  070D                     i1l3463:	
  9347                           ;i2c1.c: 144: case 0x03:
  9348                           
  9349                           
  9350                           ;i2c1.c: 145: PROTOCOL_SAV();
  9351  070D  3188  20FC  3186   	fcall	i1_PROTOCOL_SAV
  9352                           
  9353                           ;i2c1.c: 146: break;
  9354  0710  2F88               	goto	i1l3511
  9355  0711                     i1l3465:	
  9356                           ;i2c1.c: 147: case 0x06:
  9357                           
  9358                           
  9359                           ;i2c1.c: 148: PROTOCOL_INV();
  9360  0711  3188  20B8  3186   	fcall	_PROTOCOL_INV
  9361                           
  9362                           ;i2c1.c: 149: break;
  9363  0714  2F88               	goto	i1l3511
  9364  0715                     i1l3467:	
  9365                           ;i2c1.c: 150: case 0x0c:
  9366                           
  9367                           
  9368                           ;i2c1.c: 151: PROTOCOL_RST();
  9369  0715  3189  2117  3186   	fcall	_PROTOCOL_RST
  9370                           
  9371                           ;i2c1.c: 152: break;
  9372  0718  2F88               	goto	i1l3511
  9373  0719                     i1l103:	
  9374                           ;i2c1.c: 153: case 0x08:
  9375                           
  9376                           
  9377                           ;i2c1.c: 154: next = 0x01;
  9378  0719  01EC               	clrf	I2C1_StatusCallback@next
  9379  071A  0AEC               	incf	I2C1_StatusCallback@next,f
  9380                           
  9381                           ;i2c1.c: 155: break;
  9382  071B  2F88               	goto	i1l3511
  9383  071C                     i1l3469:	
  9384                           ;i2c1.c: 156: case 0x0a:
  9385                           
  9386                           
  9387                           ;i2c1.c: 157: next = 0x02;
  9388  071C  3002               	movlw	2
  9389  071D  2F50               	goto	L5
  9390  071E                     i1l3473:	
  9391                           ;i2c1.c: 159: }
  9392                           
  9393                           ;i2c1.c: 158: break;
  9394                           
  9395  071E  087D               	movf	_I2C_slaveWriteData,w	;volatile
  9396                           
  9397                           ; Switch size 1, requested type "space"
  9398                           ; Number of cases is 7, Range of values is 3 to 12
  9399                           ; switch strategies available:
  9400                           ; Name         Instructions Cycles
  9401                           ; simple_byte           22    12 (average)
  9402                           ; direct_byte           29     9 (fixed)
  9403                           ; jumptable            263     9 (fixed)
  9404                           ;	Chosen strategy is simple_byte
  9405  071F  3A03               	xorlw	3	; case 3
  9406  0720  1903               	skipnz
  9407  0721  2F0D               	goto	i1l3463
  9408  0722  3A07               	xorlw	7	; case 4
  9409  0723  1903               	skipnz
  9410  0724  2F05               	goto	i1l3459
  9411  0725  3A01               	xorlw	1	; case 5
  9412  0726  1903               	skipnz
  9413  0727  2F09               	goto	i1l3461
  9414  0728  3A03               	xorlw	3	; case 6
  9415  0729  1903               	skipnz
  9416  072A  2F11               	goto	i1l3465
  9417  072B  3A0E               	xorlw	14	; case 8
  9418  072C  1903               	skipnz
  9419  072D  2F19               	goto	i1l103
  9420  072E  3A02               	xorlw	2	; case 10
  9421  072F  1903               	skipnz
  9422  0730  2F1C               	goto	i1l3469
  9423  0731  3A06               	xorlw	6	; case 12
  9424  0732  1903               	skipnz
  9425  0733  2F15               	goto	i1l3467
  9426  0734  2F88               	goto	i1l3511
  9427                           
  9428                           ;i2c1.c: 161: }
  9429                           
  9430                           ;i2c1.c: 160: break;
  9431  0735  2F88               	goto	i1l3511
  9432  0736                     i1l3477:	
  9433  0736  086C               	movf	I2C1_StatusCallback@next,w
  9434                           
  9435                           ; Switch size 1, requested type "space"
  9436                           ; Number of cases is 2, Range of values is 0 to 1
  9437                           ; switch strategies available:
  9438                           ; Name         Instructions Cycles
  9439                           ; simple_byte            7     4 (average)
  9440                           ; direct_byte           10     6 (fixed)
  9441                           ; jumptable            260     6 (fixed)
  9442                           ;	Chosen strategy is simple_byte
  9443  0737  3A00               	xorlw	0	; case 0
  9444  0738  1903               	skipnz
  9445  0739  2F1E               	goto	i1l3473
  9446  073A  3A01               	xorlw	1	; case 1
  9447  073B  1903               	skipnz
  9448  073C  2F00               	goto	i1l3455
  9449  073D  2F88               	goto	i1l3511
  9450                           
  9451                           ;i2c1.c: 162: break;
  9452  073E  2F88               	goto	i1l3511
  9453  073F                     i1l3479:	
  9454                           ;i2c1.c: 164: case SLAVE_GENERAL_CALL:
  9455                           
  9456                           
  9457                           ;i2c1.c: 165: if (I2C_slaveWriteData == 0x02) {
  9458  073F  3002               	movlw	2
  9459  0740  067D               	xorwf	_I2C_slaveWriteData,w	;volatile
  9460  0741  1D03               	btfss	3,2
  9461  0742  2F88               	goto	i1l3511
  9462                           
  9463                           ;i2c1.c: 166: SSP1CON2bits.GCEN = 0;
  9464  0743  0024               	movlb	4	; select bank4
  9465  0744  1396               	bcf	22,7	;volatile
  9466                           
  9467                           ;i2c1.c: 167: PROTOCOL_Backplane_Slave_Enabled();
  9468  0745  3188  20B4  3186   	fcall	_PROTOCOL_Backplane_Slave_Enabled
  9469                           
  9470                           ;i2c1.c: 168: }
  9471                           ;i2c1.c: 169: break;
  9472  0748  2F88               	goto	i1l3511
  9473  0749                     i1l3485:	
  9474                           ;i2c1.c: 173: case 0x02:
  9475                           
  9476                           ;i2c1.c: 172: switch(next) {
  9477                           
  9478                           ;i2c1.c: 171: case SLAVE_NORMAL_DATA:
  9479                           
  9480                           
  9481                           ;i2c1.c: 174: ext_len = I2C_slaveWriteData;
  9482  0749  087D               	movf	_I2C_slaveWriteData,w	;volatile
  9483  074A  00F4               	movwf	??_I2C1_StatusCallback
  9484  074B  0874               	movf	??_I2C1_StatusCallback,w
  9485  074C  0020               	movlb	0	; select bank0
  9486  074D  00EB               	movwf	I2C1_StatusCallback@ext_len
  9487                           
  9488                           ;i2c1.c: 175: ext_cnt = 0;
  9489  074E  01EA               	clrf	I2C1_StatusCallback@ext_cnt
  9490                           
  9491                           ;i2c1.c: 176: next = 0x03;
  9492  074F  3003               	movlw	3
  9493  0750                     L5:	
  9494  0750  00F4               	movwf	??_I2C1_StatusCallback
  9495  0751  0874               	movf	??_I2C1_StatusCallback,w
  9496  0752  00EC               	movwf	I2C1_StatusCallback@next
  9497                           
  9498                           ;i2c1.c: 177: break;
  9499  0753  2F88               	goto	i1l3511
  9500  0754                     i1l3491:	
  9501                           ;i2c1.c: 178: case 0x03:
  9502                           
  9503                           
  9504                           ;i2c1.c: 179: ext_buf[ext_cnt++] = (char)I2C_slaveWriteData;
  9505  0754  087D               	movf	_I2C_slaveWriteData,w	;volatile
  9506  0755  00F4               	movwf	??_I2C1_StatusCallback
  9507  0756  086A               	movf	I2C1_StatusCallback@ext_cnt,w
  9508  0757  3EA0               	addlw	(low (I2C1_StatusCallback@ext_buf| (0+256)))& (0+255)
  9509  0758  0086               	movwf	6
  9510  0759  3001               	movlw	1	; select bank3/4
  9511  075A  0087               	movwf	7
  9512  075B  0874               	movf	??_I2C1_StatusCallback,w
  9513  075C  0081               	movwf	1
  9514  075D  3001               	movlw	1
  9515  075E  00F4               	movwf	??_I2C1_StatusCallback
  9516  075F  0874               	movf	??_I2C1_StatusCallback,w
  9517  0760  07EA               	addwf	I2C1_StatusCallback@ext_cnt,f
  9518                           
  9519                           ;i2c1.c: 180: if (ext_cnt >= ext_len) {
  9520  0761  086B               	movf	I2C1_StatusCallback@ext_len,w
  9521  0762  026A               	subwf	I2C1_StatusCallback@ext_cnt,w
  9522  0763  1C03               	skipc
  9523  0764  2F88               	goto	i1l3511
  9524                           
  9525                           ;i2c1.c: 181: if (!PROTOCOL_Read_Lock()) PROTOCOL_EXT(&ext_buf[0]);
  9526  0765  3188  20A5  3186   	fcall	_PROTOCOL_Read_Lock
  9527  0768  3A00               	xorlw	0
  9528  0769  1D03               	skipz
  9529  076A  2F6F               	goto	i1l3501
  9530  076B  30A0               	movlw	(low (I2C1_StatusCallback@ext_buf| (0+256)))& (0+255)
  9531  076C  3188  209C  3186   	fcall	i1_PROTOCOL_EXT
  9532  076F                     i1l3501:	
  9533                           
  9534                           ;i2c1.c: 182: next = 0x00;
  9535  076F  0020               	movlb	0	; select bank0
  9536  0770  01EC               	clrf	I2C1_StatusCallback@next
  9537                           
  9538                           ;i2c1.c: 185: }
  9539                           
  9540                           ;i2c1.c: 183: }
  9541                           ;i2c1.c: 184: break;
  9542  0771  2F88               	goto	i1l3511
  9543  0772                     i1l3505:	
  9544  0772  0020               	movlb	0	; select bank0
  9545  0773  086C               	movf	I2C1_StatusCallback@next,w
  9546                           
  9547                           ; Switch size 1, requested type "space"
  9548                           ; Number of cases is 2, Range of values is 2 to 3
  9549                           ; switch strategies available:
  9550                           ; Name         Instructions Cycles
  9551                           ; simple_byte            7     4 (average)
  9552                           ; direct_byte           13     9 (fixed)
  9553                           ; jumptable            263     9 (fixed)
  9554                           ;	Chosen strategy is simple_byte
  9555  0774  3A02               	xorlw	2	; case 2
  9556  0775  1903               	skipnz
  9557  0776  2F49               	goto	i1l3485
  9558  0777  3A01               	xorlw	1	; case 3
  9559  0778  1903               	skipnz
  9560  0779  2F54               	goto	i1l3491
  9561  077A  2F88               	goto	i1l3511
  9562                           
  9563                           ;i2c1.c: 190: }
  9564                           
  9565                           ;i2c1.c: 188: break;
  9566                           
  9567                           ;i2c1.c: 187: default:
  9568                           
  9569                           ;i2c1.c: 186: break;
  9570  077B  2F88               	goto	i1l3511
  9571  077C                     i1l3509:	
  9572  077C  0020               	movlb	0	; select bank0
  9573  077D  086D               	movf	I2C1_StatusCallback@slaveWriteType,w
  9574                           
  9575                           ; Switch size 1, requested type "space"
  9576                           ; Number of cases is 3, Range of values is 0 to 2
  9577                           ; switch strategies available:
  9578                           ; Name         Instructions Cycles
  9579                           ; simple_byte           10     6 (average)
  9580                           ; direct_byte           12     6 (fixed)
  9581                           ; jumptable            260     6 (fixed)
  9582                           ;	Chosen strategy is simple_byte
  9583  077E  3A00               	xorlw	0	; case 0
  9584  077F  1903               	skipnz
  9585  0780  2F72               	goto	i1l3505
  9586  0781  3A01               	xorlw	1	; case 1
  9587  0782  1903               	skipnz
  9588  0783  2F36               	goto	i1l3477
  9589  0784  3A03               	xorlw	3	; case 2
  9590  0785  1903               	skipnz
  9591  0786  2F3F               	goto	i1l3479
  9592  0787  2F88               	goto	i1l3511
  9593  0788                     i1l3511:	
  9594                           
  9595                           ;i2c1.c: 192: slaveWriteType = SLAVE_NORMAL_DATA;
  9596  0788  0020               	movlb	0	; select bank0
  9597  0789  01ED               	clrf	I2C1_StatusCallback@slaveWriteType
  9598                           
  9599                           ;i2c1.c: 193: break;
  9600  078A  0008               	return
  9601  078B                     i1l3513:	
  9602                           ;i2c1.c: 197: {
  9603                           ;i2c1.c: 198: case 0x01:
  9604                           
  9605                           ;i2c1.c: 196: switch (I2C_slaveWriteData)
  9606                           
  9607                           ;i2c1.c: 195: case I2C1_SLAVE_READ_REQUEST:
  9608                           
  9609                           
  9610                           ;i2c1.c: 199: SSP1BUF = PROTOCOL_I2C_WHO();
  9611  078B  3188  20A2         	fcall	_PROTOCOL_I2C_WHO
  9612  078D  0024               	movlb	4	; select bank4
  9613  078E  0091               	movwf	17	;volatile
  9614                           
  9615                           ;i2c1.c: 200: break;
  9616  078F  0008               	return
  9617  0790                     i1l3515:	
  9618                           ;i2c1.c: 201: case 0x07:
  9619                           
  9620                           
  9621                           ;i2c1.c: 202: pdata = PROTOCOL_I2C_SEN();
  9622  0790  318B  23E2         	fcall	_PROTOCOL_I2C_SEN
  9623  0792  00F4               	movwf	??_I2C1_StatusCallback
  9624  0793  0874               	movf	??_I2C1_StatusCallback,w
  9625  0794  00F6               	movwf	I2C1_StatusCallback@pdata
  9626                           
  9627                           ;i2c1.c: 203: SSP1BUF = *pdata;
  9628  0795  0876               	movf	I2C1_StatusCallback@pdata,w
  9629  0796  0086               	movwf	6
  9630  0797  0187               	clrf	7
  9631  0798  0801               	movf	1,w
  9632  0799  0024               	movlb	4	; select bank4
  9633  079A  0091               	movwf	17	;volatile
  9634                           
  9635                           ;i2c1.c: 204: break;
  9636  079B  0008               	return
  9637  079C                     i1l3519:	
  9638                           ;i2c1.c: 205: case 0x09:
  9639                           
  9640                           
  9641                           ;i2c1.c: 206: SSP1BUF = PROTOCOL_I2C_GET();
  9642  079C  3188  209F         	fcall	_PROTOCOL_I2C_GET
  9643  079E  0024               	movlb	4	; select bank4
  9644  079F  0091               	movwf	17	;volatile
  9645                           
  9646                           ;i2c1.c: 208: }
  9647                           
  9648                           ;i2c1.c: 207: break;
  9649  07A0  0008               	return
  9650  07A1                     i1l3523:	
  9651  07A1  087D               	movf	_I2C_slaveWriteData,w	;volatile
  9652                           
  9653                           ; Switch size 1, requested type "space"
  9654                           ; Number of cases is 3, Range of values is 1 to 9
  9655                           ; switch strategies available:
  9656                           ; Name         Instructions Cycles
  9657                           ; simple_byte           10     6 (average)
  9658                           ; direct_byte           27     9 (fixed)
  9659                           ; jumptable            263     9 (fixed)
  9660                           ;	Chosen strategy is simple_byte
  9661  07A2  3A01               	xorlw	1	; case 1
  9662  07A3  1903               	skipnz
  9663  07A4  2F8B               	goto	i1l3513
  9664  07A5  3A06               	xorlw	6	; case 7
  9665  07A6  1903               	skipnz
  9666  07A7  2F90               	goto	i1l3515
  9667  07A8  3A0E               	xorlw	14	; case 9
  9668  07A9  1903               	skipnz
  9669  07AA  2F9C               	goto	i1l3519
  9670  07AB  2FB7               	goto	i1l124
  9671                           
  9672                           ;i2c1.c: 216: }
  9673                           
  9674                           ;i2c1.c: 214: break;
  9675                           
  9676                           ;i2c1.c: 213: default:
  9677                           
  9678                           ;i2c1.c: 212: break;
  9679                           
  9680                           ;i2c1.c: 211: case I2C1_SLAVE_READ_COMPLETED:
  9681                           
  9682                           ;i2c1.c: 209: break;
  9683  07AC  0008               	return
  9684  07AD                     i1l3527:	
  9685  07AD  0875               	movf	I2C1_StatusCallback@i2c_bus_state,w
  9686                           
  9687                           ; Switch size 1, requested type "space"
  9688                           ; Number of cases is 5, Range of values is 0 to 4
  9689                           ; switch strategies available:
  9690                           ; Name         Instructions Cycles
  9691                           ; direct_byte           16     6 (fixed)
  9692                           ; simple_byte           16     9 (average)
  9693                           ; jumptable            260     6 (fixed)
  9694                           ;	Chosen strategy is direct_byte
  9695  07AE  0084               	movwf	4
  9696  07AF  3005               	movlw	5
  9697  07B0  0204               	subwf	4,w
  9698  07B1  1803               	skipnc
  9699  07B2  0008               	return
  9700  07B3  3188               	movlp	high i1S3951
  9701  07B4  3504               	lslf	4,w
  9702  07B5  3E00               	addlw	low i1S3951
  9703  07B6  0082               	movwf	2
  9704  07B7                     i1l124:	
  9705  07B7  0008               	return
  9706  07B8                     __end_of_I2C1_StatusCallback:	
  9707                           
  9708                           	psect	swtext1
  9709  0800                     __pswtext1:	
  9710  0800                     i1S3951:	
  9711  0800  3186  2EF6         	ljmp	i1l86
  9712  0802  3187  2FA1         	ljmp	i1l3523
  9713  0804  3187  2F7C         	ljmp	i1l3509
  9714  0806  3187  2FB7         	ljmp	i1l124
  9715  0808  3186  2EFA         	ljmp	i1l3453
  9716                           
  9717                           	psect	text51
  9718  08A8                     __ptext51:	
  9719 ;; *************** function i1_PROTOCOL_STP *****************
  9720 ;; Defined at:
  9721 ;;		line 98 in file "protocol.c"
  9722 ;; Parameters:    Size  Location     Type
  9723 ;;		None
  9724 ;; Auto vars:     Size  Location     Type
  9725 ;;		None
  9726 ;; Return value:  Size  Location     Type
  9727 ;;                  1    wreg      void 
  9728 ;; Registers used:
  9729 ;;		wreg, status,2, status,0
  9730 ;; Tracked objects:
  9731 ;;		On entry : 0/0
  9732 ;;		On exit  : 0/0
  9733 ;;		Unchanged: 0/0
  9734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9735 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9736 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9738 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9739 ;;Total ram usage:        0 bytes
  9740 ;; Hardware stack levels used:    1
  9741 ;; This function calls:
  9742 ;;		Nothing
  9743 ;; This function is called by:
  9744 ;;		_I2C1_StatusCallback
  9745 ;; This function uses a non-reentrant model
  9746 ;;
  9747                           
  9748                           
  9749                           ;psect for function i1_PROTOCOL_STP
  9750  08A8                     i1_PROTOCOL_STP:	
  9751                           
  9752                           ;protocol.c: 100: running = 0;
  9753                           
  9754                           ;incstack = 0
  9755                           ; Regs used in i1_PROTOCOL_STP: [wreg+status,2+status,0]
  9756  08A8  0020               	movlb	0	; select bank0
  9757  08A9  01E1               	clrf	_running
  9758  08AA  0008               	return
  9759  08AB                     __end_ofi1_PROTOCOL_STP:	
  9760                           
  9761                           	psect	text52
  9762  08BC                     __ptext52:	
  9763 ;; *************** function i1_PROTOCOL_STA *****************
  9764 ;; Defined at:
  9765 ;;		line 93 in file "protocol.c"
  9766 ;; Parameters:    Size  Location     Type
  9767 ;;		None
  9768 ;; Auto vars:     Size  Location     Type
  9769 ;;		None
  9770 ;; Return value:  Size  Location     Type
  9771 ;;                  1    wreg      void 
  9772 ;; Registers used:
  9773 ;;		wreg, status,2, status,0
  9774 ;; Tracked objects:
  9775 ;;		On entry : 0/0
  9776 ;;		On exit  : 0/0
  9777 ;;		Unchanged: 0/0
  9778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9780 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9782 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9783 ;;Total ram usage:        0 bytes
  9784 ;; Hardware stack levels used:    1
  9785 ;; This function calls:
  9786 ;;		Nothing
  9787 ;; This function is called by:
  9788 ;;		_I2C1_StatusCallback
  9789 ;; This function uses a non-reentrant model
  9790 ;;
  9791                           
  9792                           
  9793                           ;psect for function i1_PROTOCOL_STA
  9794  08BC                     i1_PROTOCOL_STA:	
  9795                           
  9796                           ;protocol.c: 95: running = 1;
  9797                           
  9798                           ;incstack = 0
  9799                           ; Regs used in i1_PROTOCOL_STA: [wreg+status,2+status,0]
  9800  08BC  0020               	movlb	0	; select bank0
  9801  08BD  01E1               	clrf	_running
  9802  08BE  0AE1               	incf	_running,f
  9803  08BF  0008               	return
  9804  08C0                     __end_ofi1_PROTOCOL_STA:	
  9805                           
  9806                           	psect	text53
  9807  08D8                     __ptext53:	
  9808 ;; *************** function i1_PROTOCOL_SET *****************
  9809 ;; Defined at:
  9810 ;;		line 111 in file "protocol.c"
  9811 ;; Parameters:    Size  Location     Type
  9812 ;;  value_          1    wreg     unsigned char 
  9813 ;; Auto vars:     Size  Location     Type
  9814 ;;  value_          1    1[COMMON] unsigned char 
  9815 ;; Return value:  Size  Location     Type
  9816 ;;                  1    wreg      void 
  9817 ;; Registers used:
  9818 ;;		wreg, status,2, status,0
  9819 ;; Tracked objects:
  9820 ;;		On entry : 0/0
  9821 ;;		On exit  : 0/0
  9822 ;;		Unchanged: 0/0
  9823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9825 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9826 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9827 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9828 ;;Total ram usage:        2 bytes
  9829 ;; Hardware stack levels used:    1
  9830 ;; This function calls:
  9831 ;;		Nothing
  9832 ;; This function is called by:
  9833 ;;		_I2C1_StatusCallback
  9834 ;; This function uses a non-reentrant model
  9835 ;;
  9836                           
  9837                           
  9838                           ;psect for function i1_PROTOCOL_SET
  9839  08D8                     i1_PROTOCOL_SET:	
  9840                           
  9841                           ;incstack = 0
  9842                           ; Regs used in i1_PROTOCOL_SET: [wreg+status,2+status,0]
  9843                           ;i1PROTOCOL_SET@value_ stored from wreg
  9844  08D8  00F1               	movwf	i1PROTOCOL_SET@value_
  9845                           
  9846                           ;protocol.c: 112: value = value_;
  9847  08D9  0871               	movf	i1PROTOCOL_SET@value_,w
  9848  08DA  00F0               	movwf	??i1_PROTOCOL_SET
  9849  08DB  0870               	movf	??i1_PROTOCOL_SET,w
  9850  08DC  0020               	movlb	0	; select bank0
  9851  08DD  00E3               	movwf	_value
  9852  08DE  0008               	return
  9853  08DF                     __end_ofi1_PROTOCOL_SET:	
  9854                           
  9855                           	psect	text54
  9856  08FC                     __ptext54:	
  9857 ;; *************** function i1_PROTOCOL_SAV *****************
  9858 ;; Defined at:
  9859 ;;		line 107 in file "protocol.c"
  9860 ;; Parameters:    Size  Location     Type
  9861 ;;		None
  9862 ;; Auto vars:     Size  Location     Type
  9863 ;;		None
  9864 ;; Return value:  Size  Location     Type
  9865 ;;                  1    wreg      void 
  9866 ;; Registers used:
  9867 ;;		wreg, status,2, status,0, pclath, cstack
  9868 ;; Tracked objects:
  9869 ;;		On entry : 0/0
  9870 ;;		On exit  : 0/0
  9871 ;;		Unchanged: 0/0
  9872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9875 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9876 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9877 ;;Total ram usage:        1 bytes
  9878 ;; Hardware stack levels used:    1
  9879 ;; Hardware stack levels required when called:    1
  9880 ;; This function calls:
  9881 ;;		i1_DATAEE_WriteByte
  9882 ;; This function is called by:
  9883 ;;		_I2C1_StatusCallback
  9884 ;; This function uses a non-reentrant model
  9885 ;;
  9886                           
  9887                           
  9888                           ;psect for function i1_PROTOCOL_SAV
  9889  08FC                     i1_PROTOCOL_SAV:	
  9890                           
  9891                           ;protocol.c: 108: DATAEE_WriteByte(1, value);
  9892                           
  9893                           ;incstack = 0
  9894                           ; Regs used in i1_PROTOCOL_SAV: [wreg+status,2+status,0+pclath+cstack]
  9895  08FC  0020               	movlb	0	; select bank0
  9896  08FD  0863               	movf	_value,w
  9897  08FE  00F3               	movwf	??i1_PROTOCOL_SAV
  9898  08FF  0873               	movf	??i1_PROTOCOL_SAV,w
  9899  0900  00F0               	movwf	i1DATAEE_WriteByte@bData
  9900  0901  3001               	movlw	1
  9901  0902  318A  220D         	fcall	i1_DATAEE_WriteByte
  9902  0904  0008               	return
  9903  0905                     __end_ofi1_PROTOCOL_SAV:	
  9904                           
  9905                           	psect	text55
  9906  0A0D                     __ptext55:	
  9907 ;; *************** function i1_DATAEE_WriteByte *****************
  9908 ;; Defined at:
  9909 ;;		line 180 in file "mcc_generated_files/memory.c"
  9910 ;; Parameters:    Size  Location     Type
  9911 ;;  bAdd            1    wreg     unsigned char 
  9912 ;;  bData           1    0[COMMON] unsigned char 
  9913 ;; Auto vars:     Size  Location     Type
  9914 ;;  bAdd            1    1[COMMON] unsigned char 
  9915 ;;  DATAEE_Write    1    2[COMMON] unsigned char 
  9916 ;; Return value:  Size  Location     Type
  9917 ;;                  1    wreg      void 
  9918 ;; Registers used:
  9919 ;;		wreg, status,2, status,0
  9920 ;; Tracked objects:
  9921 ;;		On entry : 0/0
  9922 ;;		On exit  : 0/0
  9923 ;;		Unchanged: 0/0
  9924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9925 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9926 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9928 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9929 ;;Total ram usage:        3 bytes
  9930 ;; Hardware stack levels used:    1
  9931 ;; This function calls:
  9932 ;;		Nothing
  9933 ;; This function is called by:
  9934 ;;		i1_PROTOCOL_SAV
  9935 ;; This function uses a non-reentrant model
  9936 ;;
  9937                           
  9938                           
  9939                           ;psect for function i1_DATAEE_WriteByte
  9940  0A0D                     i1_DATAEE_WriteByte:	
  9941                           
  9942                           ;incstack = 0
  9943                           ; Regs used in i1_DATAEE_WriteByte: [wreg+status,2+status,0]
  9944                           ;i1DATAEE_WriteByte@bAdd stored from wreg
  9945  0A0D  00F1               	movwf	i1DATAEE_WriteByte@bAdd
  9946                           
  9947                           ;memory.c: 182: uint8_t GIEBitValue = 0;
  9948  0A0E  01F2               	clrf	i1DATAEE_WriteByte@GIEBitValue
  9949                           
  9950                           ;memory.c: 184: EEADRL = (bAdd & 0x0ff);
  9951  0A0F  0871               	movf	i1DATAEE_WriteByte@bAdd,w
  9952  0A10  0023               	movlb	3	; select bank3
  9953  0A11  0091               	movwf	17	;volatile
  9954                           
  9955                           ;memory.c: 185: EEDATL = bData;
  9956  0A12  0870               	movf	i1DATAEE_WriteByte@bData,w
  9957  0A13  0093               	movwf	19	;volatile
  9958                           
  9959                           ;memory.c: 186: EECON1bits.EEPGD = 0;
  9960  0A14  1395               	bcf	21,7	;volsfr
  9961                           
  9962                           ;memory.c: 187: EECON1bits.CFGS = 0;
  9963  0A15  1315               	bcf	21,6	;volsfr
  9964                           
  9965                           ;memory.c: 188: EECON1bits.WREN = 1;
  9966  0A16  1515               	bsf	21,2	;volsfr
  9967                           
  9968                           ;memory.c: 190: GIEBitValue = INTCONbits.GIE;
  9969  0A17  3000               	movlw	0
  9970  0A18  1B8B               	btfsc	11,7	;volatile
  9971  0A19  3001               	movlw	1
  9972  0A1A  00F2               	movwf	i1DATAEE_WriteByte@GIEBitValue
  9973                           
  9974                           ;memory.c: 191: INTCONbits.GIE = 0;
  9975  0A1B  138B               	bcf	11,7	;volatile
  9976                           
  9977                           ;memory.c: 192: EECON2 = 0x55;
  9978  0A1C  3055               	movlw	85
  9979  0A1D  0096               	movwf	22	;volsfr
  9980                           
  9981                           ;memory.c: 193: EECON2 = 0xAA;
  9982  0A1E  30AA               	movlw	170
  9983  0A1F  0096               	movwf	22	;volsfr
  9984                           
  9985                           ;memory.c: 194: EECON1bits.WR = 1;
  9986  0A20  1495               	bsf	21,1	;volsfr
  9987  0A21                     i1l326:	
  9988                           ;memory.c: 197: {
  9989                           
  9990                           ;memory.c: 196: while (EECON1bits.WR)
  9991                           
  9992  0A21  1895               	btfsc	21,1	;volsfr
  9993  0A22  2A21               	goto	i1l326
  9994                           
  9995                           ;memory.c: 198: }
  9996                           ;memory.c: 200: EECON1bits.WREN = 0;
  9997  0A23  1115               	bcf	21,2	;volsfr
  9998                           
  9999                           ;memory.c: 201: INTCONbits.GIE = GIEBitValue;
 10000  0A24  0C72               	rrf	i1DATAEE_WriteByte@GIEBitValue,w
 10001  0A25  1C03               	skipc
 10002  0A26  138B               	bcf	11,7	;volatile
 10003  0A27  1803               	skipnc
 10004  0A28  178B               	bsf	11,7	;volatile
 10005  0A29  0008               	return
 10006  0A2A                     __end_ofi1_DATAEE_WriteByte:	
 10007                           
 10008                           	psect	text56
 10009  089C                     __ptext56:	
 10010 ;; *************** function i1_PROTOCOL_EXT *****************
 10011 ;; Defined at:
 10012 ;;		line 116 in file "protocol.c"
 10013 ;; Parameters:    Size  Location     Type
 10014 ;;  char_buf        1    wreg     PTR unsigned char 
 10015 ;;		 -> buf(48), I2C1_StatusCallback@ext_buf(48), 
 10016 ;; Auto vars:     Size  Location     Type
 10017 ;;  char_buf        1  (no storage) PTR unsigned char 
 10018 ;;		 -> buf(48), I2C1_StatusCallback@ext_buf(48), 
 10019 ;; Return value:  Size  Location     Type
 10020 ;;                  1    wreg      void 
 10021 ;; Registers used:
 10022 ;;		wreg, status,2, status,0
 10023 ;; Tracked objects:
 10024 ;;		On entry : 0/0
 10025 ;;		On exit  : 0/0
 10026 ;;		Unchanged: 0/0
 10027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10029 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10031 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10032 ;;Total ram usage:        0 bytes
 10033 ;; Hardware stack levels used:    1
 10034 ;; This function calls:
 10035 ;;		Nothing
 10036 ;; This function is called by:
 10037 ;;		_I2C1_StatusCallback
 10038 ;; This function uses a non-reentrant model
 10039 ;;
 10040                           
 10041                           
 10042                           ;psect for function i1_PROTOCOL_EXT
 10043  089C                     i1_PROTOCOL_EXT:	
 10044                           
 10045                           ;incstack = 0
 10046                           ; Regs used in i1_PROTOCOL_EXT: [wreg+status,2+status,0]
 10047  089C  0008               	return
 10048  089D                     __end_ofi1_PROTOCOL_EXT:	
 10049                           
 10050                           	psect	text57
 10051  08A5                     __ptext57:	
 10052 ;; *************** function _PROTOCOL_Read_Lock *****************
 10053 ;; Defined at:
 10054 ;;		line 124 in file "protocol.c"
 10055 ;; Parameters:    Size  Location     Type
 10056 ;;		None
 10057 ;; Auto vars:     Size  Location     Type
 10058 ;;		None
 10059 ;; Return value:  Size  Location     Type
 10060 ;;                  1    wreg      unsigned char 
 10061 ;; Registers used:
 10062 ;;		wreg
 10063 ;; Tracked objects:
 10064 ;;		On entry : 0/0
 10065 ;;		On exit  : 0/0
 10066 ;;		Unchanged: 0/0
 10067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10069 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10071 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10072 ;;Total ram usage:        0 bytes
 10073 ;; Hardware stack levels used:    1
 10074 ;; This function calls:
 10075 ;;		Nothing
 10076 ;; This function is called by:
 10077 ;;		_I2C1_StatusCallback
 10078 ;; This function uses a non-reentrant model
 10079 ;;
 10080                           
 10081                           
 10082                           ;psect for function _PROTOCOL_Read_Lock
 10083  08A5                     _PROTOCOL_Read_Lock:	
 10084                           
 10085                           ;protocol.c: 125: return locked;
 10086                           
 10087                           ;incstack = 0
 10088                           ; Regs used in _PROTOCOL_Read_Lock: [wreg]
 10089  08A5  0020               	movlb	0	; select bank0
 10090  08A6  0862               	movf	_locked,w
 10091  08A7  0008               	return
 10092  08A8                     __end_of_PROTOCOL_Read_Lock:	
 10093                           
 10094                           	psect	text58
 10095  0917                     __ptext58:	
 10096 ;; *************** function _PROTOCOL_RST *****************
 10097 ;; Defined at:
 10098 ;;		line 280 in file "protocol.c"
 10099 ;; Parameters:    Size  Location     Type
 10100 ;;		None
 10101 ;; Auto vars:     Size  Location     Type
 10102 ;;		None
 10103 ;; Return value:  Size  Location     Type
 10104 ;;                  1    wreg      void 
 10105 ;; Registers used:
 10106 ;;		wreg, status,2, status,0
 10107 ;; Tracked objects:
 10108 ;;		On entry : 0/0
 10109 ;;		On exit  : 0/0
 10110 ;;		Unchanged: 0/0
 10111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10113 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10114 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10115 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10116 ;;Total ram usage:        1 bytes
 10117 ;; Hardware stack levels used:    1
 10118 ;; This function calls:
 10119 ;;		Nothing
 10120 ;; This function is called by:
 10121 ;;		_I2C1_StatusCallback
 10122 ;; This function uses a non-reentrant model
 10123 ;;
 10124                           
 10125                           
 10126                           ;psect for function _PROTOCOL_RST
 10127  0917                     _PROTOCOL_RST:	
 10128                           
 10129                           ;protocol.c: 281: if (readbuf.status != TLV_SET) {
 10130                           
 10131                           ;incstack = 0
 10132                           ; Regs used in _PROTOCOL_RST: [wreg+status,2+status,0]
 10133  0917  0021               	movlb	1	; select bank1
 10134  0918  084F               	movf	(_readbuf^(0+128)+3),w
 10135  0919  1903               	btfsc	3,2
 10136  091A  0008               	return
 10137                           
 10138                           ;protocol.c: 282: readbuf.buf_cnt = 0;
 10139  091B  01D0               	clrf	(_readbuf^(0+128)+4)
 10140                           
 10141                           ;protocol.c: 283: readbuf.status = COMPLETE;
 10142  091C  3003               	movlw	3
 10143  091D  00F0               	movwf	??_PROTOCOL_RST
 10144  091E  0870               	movf	??_PROTOCOL_RST,w
 10145  091F  00CF               	movwf	(_readbuf^(0+128)+3)
 10146  0920  0008               	return
 10147  0921                     __end_of_PROTOCOL_RST:	
 10148                           
 10149                           	psect	text59
 10150  08B8                     __ptext59:	
 10151 ;; *************** function _PROTOCOL_INV *****************
 10152 ;; Defined at:
 10153 ;;		line 103 in file "protocol.c"
 10154 ;; Parameters:    Size  Location     Type
 10155 ;;		None
 10156 ;; Auto vars:     Size  Location     Type
 10157 ;;		None
 10158 ;; Return value:  Size  Location     Type
 10159 ;;                  1    wreg      void 
 10160 ;; Registers used:
 10161 ;;		None
 10162 ;; Tracked objects:
 10163 ;;		On entry : 0/0
 10164 ;;		On exit  : 0/0
 10165 ;;		Unchanged: 0/0
 10166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10170 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10171 ;;Total ram usage:        0 bytes
 10172 ;; Hardware stack levels used:    1
 10173 ;; This function calls:
 10174 ;;		Nothing
 10175 ;; This function is called by:
 10176 ;;		_I2C1_StatusCallback
 10177 ;; This function uses a non-reentrant model
 10178 ;;
 10179                           
 10180                           
 10181                           ;psect for function _PROTOCOL_INV
 10182  08B8                     _PROTOCOL_INV:	
 10183                           
 10184                           ;protocol.c: 104: invoked = 1;
 10185                           
 10186                           ;incstack = 0
 10187                           ; Regs used in _PROTOCOL_INV: []
 10188  08B8  0020               	movlb	0	; select bank0
 10189  08B9  01E0               	clrf	_invoked
 10190  08BA  0AE0               	incf	_invoked,f
 10191  08BB  0008               	return
 10192  08BC                     __end_of_PROTOCOL_INV:	
 10193                           
 10194                           	psect	text60
 10195  08A2                     __ptext60:	
 10196 ;; *************** function _PROTOCOL_I2C_WHO *****************
 10197 ;; Defined at:
 10198 ;;		line 200 in file "protocol.c"
 10199 ;; Parameters:    Size  Location     Type
 10200 ;;		None
 10201 ;; Auto vars:     Size  Location     Type
 10202 ;;		None
 10203 ;; Return value:  Size  Location     Type
 10204 ;;                  1    wreg      unsigned char 
 10205 ;; Registers used:
 10206 ;;		wreg
 10207 ;; Tracked objects:
 10208 ;;		On entry : 0/0
 10209 ;;		On exit  : 0/0
 10210 ;;		Unchanged: 0/0
 10211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10213 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10215 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10216 ;;Total ram usage:        0 bytes
 10217 ;; Hardware stack levels used:    1
 10218 ;; This function calls:
 10219 ;;		Nothing
 10220 ;; This function is called by:
 10221 ;;		_I2C1_StatusCallback
 10222 ;; This function uses a non-reentrant model
 10223 ;;
 10224                           
 10225                           
 10226                           ;psect for function _PROTOCOL_I2C_WHO
 10227  08A2                     _PROTOCOL_I2C_WHO:	
 10228                           
 10229                           ;protocol.c: 201: return slave_address;
 10230                           
 10231                           ;incstack = 0
 10232                           ; Regs used in _PROTOCOL_I2C_WHO: [wreg]
 10233  08A2  0020               	movlb	0	; select bank0
 10234  08A3  0865               	movf	_slave_address,w
 10235  08A4  0008               	return
 10236  08A5                     __end_of_PROTOCOL_I2C_WHO:	
 10237                           
 10238                           	psect	text61
 10239  0BE2                     __ptext61:	
 10240 ;; *************** function _PROTOCOL_I2C_SEN *****************
 10241 ;; Defined at:
 10242 ;;		line 399 in file "protocol.c"
 10243 ;; Parameters:    Size  Location     Type
 10244 ;;		None
 10245 ;; Auto vars:     Size  Location     Type
 10246 ;;  pdata           1    1[COMMON] PTR unsigned char 
 10247 ;;		 -> type_no_data(1), PROTOCOL_Send_uint8_t@pbuf(1), sendbuf(16), readbuf.length(1), 
 10248 ;;		 -> readbuf.type(1), readbuf(5), 
 10249 ;; Return value:  Size  Location     Type
 10250 ;;                  1    wreg      PTR unsigned char 
 10251 ;; Registers used:
 10252 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 10253 ;; Tracked objects:
 10254 ;;		On entry : 0/0
 10255 ;;		On exit  : 0/0
 10256 ;;		Unchanged: 0/0
 10257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10259 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10260 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10261 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10262 ;;Total ram usage:        2 bytes
 10263 ;; Hardware stack levels used:    1
 10264 ;; This function calls:
 10265 ;;		Nothing
 10266 ;; This function is called by:
 10267 ;;		_I2C1_StatusCallback
 10268 ;; This function uses a non-reentrant model
 10269 ;;
 10270                           
 10271                           
 10272                           ;psect for function _PROTOCOL_I2C_SEN
 10273  0BE2                     _PROTOCOL_I2C_SEN:	
 10274                           
 10275                           ;protocol.c: 400: uint8_t *pdata;
 10276                           ;protocol.c: 401: switch(readbuf.status) {
 10277                           
 10278                           ;incstack = 0
 10279                           ; Regs used in _PROTOCOL_I2C_SEN: [wreg-fsr0h+status,2+status,0]
 10280  0BE2  2C0D               	goto	i1l3345
 10281  0BE3                     i1l3325:	
 10282                           ;protocol.c: 402: case TLV_SET:
 10283                           
 10284                           
 10285                           ;protocol.c: 403: pdata = &readbuf.type;
 10286  0BE3  30CC               	movlw	(low (_readbuf| 0))& (0+255)
 10287  0BE4  00F0               	movwf	??_PROTOCOL_I2C_SEN
 10288  0BE5  0870               	movf	??_PROTOCOL_I2C_SEN,w
 10289  0BE6  00F1               	movwf	PROTOCOL_I2C_SEN@pdata
 10290                           
 10291                           ;protocol.c: 404: readbuf.status = TYPE_SENT;
 10292  0BE7  0021               	movlb	1	; select bank1
 10293  0BE8  01CF               	clrf	(_readbuf^(0+128)+3)
 10294  0BE9  0ACF               	incf	(_readbuf^(0+128)+3),f
 10295                           
 10296                           ;protocol.c: 405: break;
 10297  0BEA  2C1C               	goto	i1l3347
 10298  0BEB                     i1l3329:	
 10299                           ;protocol.c: 406: case TYPE_SENT:
 10300                           
 10301                           
 10302                           ;protocol.c: 407: pdata = &readbuf.length;
 10303  0BEB  30CD               	movlw	(low ((_readbuf| 0+1)))& (0+255)
 10304  0BEC  00F0               	movwf	??_PROTOCOL_I2C_SEN
 10305  0BED  0870               	movf	??_PROTOCOL_I2C_SEN,w
 10306  0BEE  00F1               	movwf	PROTOCOL_I2C_SEN@pdata
 10307                           
 10308                           ;protocol.c: 408: readbuf.status = LENGTH_SENT;
 10309  0BEF  3002               	movlw	2
 10310  0BF0  2C04               	goto	L6
 10311  0BF1                     i1l3331:	
 10312                           ;protocol.c: 410: case LENGTH_SENT:
 10313                           
 10314                           ;protocol.c: 409: break;
 10315                           
 10316                           
 10317                           ;protocol.c: 411: if (readbuf.buf_cnt < readbuf.length) {
 10318  0BF1  084D               	movf	(_readbuf^(0+128)+1),w
 10319  0BF2  0250               	subwf	(_readbuf^(0+128)+4),w
 10320  0BF3  1803               	skipnc
 10321  0BF4  2BFE               	goto	i1l3335
 10322                           
 10323                           ;protocol.c: 412: pdata = &readbuf.pbuffer[readbuf.buf_cnt++];
 10324  0BF5  084E               	movf	(low ((_readbuf| 0+2)))^(0+128),w
 10325  0BF6  0750               	addwf	(_readbuf^(0+128)+4),w
 10326  0BF7  00F0               	movwf	??_PROTOCOL_I2C_SEN
 10327  0BF8  0870               	movf	??_PROTOCOL_I2C_SEN,w
 10328  0BF9  00F1               	movwf	PROTOCOL_I2C_SEN@pdata
 10329  0BFA  3001               	movlw	1
 10330  0BFB  00F0               	movwf	??_PROTOCOL_I2C_SEN
 10331  0BFC  0870               	movf	??_PROTOCOL_I2C_SEN,w
 10332  0BFD  07D0               	addwf	(_readbuf^(0+128)+4),f
 10333  0BFE                     i1l3335:	
 10334                           
 10335                           ;protocol.c: 413: }
 10336                           ;protocol.c: 414: if (readbuf.buf_cnt == readbuf.length) {
 10337  0BFE  0850               	movf	(_readbuf^(0+128)+4),w
 10338  0BFF  064D               	xorwf	(_readbuf^(0+128)+1),w
 10339  0C00  1D03               	skipz
 10340  0C01  2C1C               	goto	i1l3347
 10341                           
 10342                           ;protocol.c: 415: readbuf.buf_cnt = 0;
 10343  0C02  01D0               	clrf	(_readbuf^(0+128)+4)
 10344                           
 10345                           ;protocol.c: 416: readbuf.status = COMPLETE;
 10346  0C03  3003               	movlw	3
 10347  0C04                     L6:	
 10348  0C04  00F0               	movwf	??_PROTOCOL_I2C_SEN
 10349  0C05  0870               	movf	??_PROTOCOL_I2C_SEN,w
 10350  0C06  00CF               	movwf	(_readbuf^(0+128)+3)
 10351                           
 10352                           ;protocol.c: 417: }
 10353                           ;protocol.c: 418: break;
 10354  0C07  2C1C               	goto	i1l3347
 10355  0C08                     i1l3341:	
 10356                           ;protocol.c: 419: case COMPLETE:
 10357                           
 10358                           
 10359                           ;protocol.c: 420: pdata = &type_no_data;
 10360  0C08  30E2               	movlw	(low (_type_no_data| 0))& (0+255)
 10361  0C09  00F0               	movwf	??_PROTOCOL_I2C_SEN
 10362  0C0A  0870               	movf	??_PROTOCOL_I2C_SEN,w
 10363  0C0B  00F1               	movwf	PROTOCOL_I2C_SEN@pdata
 10364                           
 10365                           ;protocol.c: 422: }
 10366                           
 10367                           ;protocol.c: 421: break;
 10368  0C0C  2C1C               	goto	i1l3347
 10369  0C0D                     i1l3345:	
 10370  0C0D  0021               	movlb	1	; select bank1
 10371  0C0E  084F               	movf	(_readbuf^(0+128)+3),w
 10372                           
 10373                           ; Switch size 1, requested type "space"
 10374                           ; Number of cases is 4, Range of values is 0 to 3
 10375                           ; switch strategies available:
 10376                           ; Name         Instructions Cycles
 10377                           ; simple_byte           13     7 (average)
 10378                           ; direct_byte           14     6 (fixed)
 10379                           ; jumptable            260     6 (fixed)
 10380                           ;	Chosen strategy is simple_byte
 10381  0C0F  3A00               	xorlw	0	; case 0
 10382  0C10  1903               	skipnz
 10383  0C11  2BE3               	goto	i1l3325
 10384  0C12  3A01               	xorlw	1	; case 1
 10385  0C13  1903               	skipnz
 10386  0C14  2BEB               	goto	i1l3329
 10387  0C15  3A03               	xorlw	3	; case 2
 10388  0C16  1903               	skipnz
 10389  0C17  2BF1               	goto	i1l3331
 10390  0C18  3A01               	xorlw	1	; case 3
 10391  0C19  1903               	skipnz
 10392  0C1A  2C08               	goto	i1l3341
 10393  0C1B  2C1C               	goto	i1l3347
 10394  0C1C                     i1l3347:	
 10395                           
 10396                           ;protocol.c: 423: return pdata;
 10397  0C1C  0871               	movf	PROTOCOL_I2C_SEN@pdata,w
 10398  0C1D  0008               	return
 10399  0C1E                     __end_of_PROTOCOL_I2C_SEN:	
 10400                           
 10401                           	psect	text62
 10402  089F                     __ptext62:	
 10403 ;; *************** function _PROTOCOL_I2C_GET *****************
 10404 ;; Defined at:
 10405 ;;		line 204 in file "protocol.c"
 10406 ;; Parameters:    Size  Location     Type
 10407 ;;		None
 10408 ;; Auto vars:     Size  Location     Type
 10409 ;;		None
 10410 ;; Return value:  Size  Location     Type
 10411 ;;                  1    wreg      unsigned char 
 10412 ;; Registers used:
 10413 ;;		wreg
 10414 ;; Tracked objects:
 10415 ;;		On entry : 0/0
 10416 ;;		On exit  : 0/0
 10417 ;;		Unchanged: 0/0
 10418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10420 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10421 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10422 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10423 ;;Total ram usage:        0 bytes
 10424 ;; Hardware stack levels used:    1
 10425 ;; This function calls:
 10426 ;;		Nothing
 10427 ;; This function is called by:
 10428 ;;		_I2C1_StatusCallback
 10429 ;; This function uses a non-reentrant model
 10430 ;;
 10431                           
 10432                           
 10433                           ;psect for function _PROTOCOL_I2C_GET
 10434  089F                     _PROTOCOL_I2C_GET:	
 10435                           
 10436                           ;protocol.c: 205: return value;
 10437                           
 10438                           ;incstack = 0
 10439                           ; Regs used in _PROTOCOL_I2C_GET: [wreg]
 10440  089F  0020               	movlb	0	; select bank0
 10441  08A0  0863               	movf	_value,w
 10442  08A1  0008               	return
 10443  08A2                     __end_of_PROTOCOL_I2C_GET:	
 10444                           
 10445                           	psect	text63
 10446  08B4                     __ptext63:	
 10447 ;; *************** function _PROTOCOL_Backplane_Slave_Enabled *****************
 10448 ;; Defined at:
 10449 ;;		line 196 in file "protocol.c"
 10450 ;; Parameters:    Size  Location     Type
 10451 ;;		None
 10452 ;; Auto vars:     Size  Location     Type
 10453 ;;		None
 10454 ;; Return value:  Size  Location     Type
 10455 ;;                  1    wreg      void 
 10456 ;; Registers used:
 10457 ;;		None
 10458 ;; Tracked objects:
 10459 ;;		On entry : 0/0
 10460 ;;		On exit  : 0/0
 10461 ;;		Unchanged: 0/0
 10462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10464 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10466 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10467 ;;Total ram usage:        0 bytes
 10468 ;; Hardware stack levels used:    1
 10469 ;; This function calls:
 10470 ;;		Nothing
 10471 ;; This function is called by:
 10472 ;;		_I2C1_StatusCallback
 10473 ;; This function uses a non-reentrant model
 10474 ;;
 10475                           
 10476                           
 10477                           ;psect for function _PROTOCOL_Backplane_Slave_Enabled
 10478  08B4                     _PROTOCOL_Backplane_Slave_Enabled:	
 10479                           
 10480                           ;protocol.c: 197: backplane_slave_enabled = 1;
 10481                           
 10482                           ;incstack = 0
 10483                           ; Regs used in _PROTOCOL_Backplane_Slave_Enabled: []
 10484  08B4  0021               	movlb	1	; select bank1
 10485  08B5  01B9               	clrf	_backplane_slave_enabled^(0+128)
 10486  08B6  0AB9               	incf	_backplane_slave_enabled^(0+128),f
 10487  08B7  0008               	return
 10488  08B8                     __end_of_PROTOCOL_Backplane_Slave_Enabled:	
 10489                           
 10490                           	psect	text64
 10491  09BB                     __ptext64:	
 10492 ;; *************** function _EUSART_Transmit_ISR *****************
 10493 ;; Defined at:
 10494 ;;		line 165 in file "mcc_generated_files/eusart.c"
 10495 ;; Parameters:    Size  Location     Type
 10496 ;;		None
 10497 ;; Auto vars:     Size  Location     Type
 10498 ;;		None
 10499 ;; Return value:  Size  Location     Type
 10500 ;;                  1    wreg      void 
 10501 ;; Registers used:
 10502 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10503 ;; Tracked objects:
 10504 ;;		On entry : 0/0
 10505 ;;		On exit  : 0/0
 10506 ;;		Unchanged: 0/0
 10507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10509 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10510 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10511 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10512 ;;Total ram usage:        1 bytes
 10513 ;; Hardware stack levels used:    1
 10514 ;; This function calls:
 10515 ;;		Nothing
 10516 ;; This function is called by:
 10517 ;;		_INTERRUPT_InterruptManager
 10518 ;; This function uses a non-reentrant model
 10519 ;;
 10520                           
 10521                           
 10522                           ;psect for function _EUSART_Transmit_ISR
 10523  09BB                     _EUSART_Transmit_ISR:	
 10524                           
 10525                           ;eusart.c: 169: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
 10526                           
 10527                           ;incstack = 0
 10528                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 10529  09BB  3008               	movlw	8
 10530  09BC  027A               	subwf	_eusartTxBufferRemaining,w	;volatile
 10531  09BD  1803               	skipnc
 10532  09BE  29D3               	goto	i1l241
 10533                           
 10534                           ;eusart.c: 170: {
 10535                           ;eusart.c: 171: TXREG = eusartTxBuffer[eusartTxTail++];
 10536  09BF  087B               	movf	_eusartTxTail,w
 10537  09C0  3EA8               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
 10538  09C1  0086               	movwf	6
 10539  09C2  0187               	clrf	7
 10540  09C3  0801               	movf	1,w
 10541  09C4  0023               	movlb	3	; select bank3
 10542  09C5  009A               	movwf	26	;volatile
 10543  09C6  3001               	movlw	1
 10544  09C7  00F0               	movwf	??_EUSART_Transmit_ISR
 10545  09C8  0870               	movf	??_EUSART_Transmit_ISR,w
 10546  09C9  07FB               	addwf	_eusartTxTail,f	;volatile
 10547                           
 10548                           ;eusart.c: 172: if(sizeof(eusartTxBuffer) <= eusartTxTail)
 10549  09CA  3008               	movlw	8
 10550  09CB  027B               	subwf	_eusartTxTail,w	;volatile
 10551  09CC  1803               	btfsc	3,0
 10552                           
 10553                           ;eusart.c: 173: {
 10554                           ;eusart.c: 174: eusartTxTail = 0;
 10555  09CD  01FB               	clrf	_eusartTxTail	;volatile
 10556                           
 10557                           ;eusart.c: 175: }
 10558                           ;eusart.c: 176: eusartTxBufferRemaining++;
 10559  09CE  3001               	movlw	1
 10560  09CF  00F0               	movwf	??_EUSART_Transmit_ISR
 10561  09D0  0870               	movf	??_EUSART_Transmit_ISR,w
 10562  09D1  07FA               	addwf	_eusartTxBufferRemaining,f	;volatile
 10563                           
 10564                           ;eusart.c: 177: }
 10565  09D2  0008               	return
 10566  09D3                     i1l241:	
 10567                           
 10568                           ;eusart.c: 178: else
 10569                           ;eusart.c: 179: {
 10570                           ;eusart.c: 180: PIE1bits.TXIE = 0;
 10571  09D3  0021               	movlb	1	; select bank1
 10572  09D4  1211               	bcf	17,4	;volatile
 10573  09D5  0008               	return
 10574  09D6                     __end_of_EUSART_Transmit_ISR:	
 10575                           
 10576                           	psect	text65
 10577  09A0                     __ptext65:	
 10578 ;; *************** function _EUSART_Receive_ISR *****************
 10579 ;; Defined at:
 10580 ;;		line 184 in file "mcc_generated_files/eusart.c"
 10581 ;; Parameters:    Size  Location     Type
 10582 ;;		None
 10583 ;; Auto vars:     Size  Location     Type
 10584 ;;		None
 10585 ;; Return value:  Size  Location     Type
 10586 ;;                  1    wreg      void 
 10587 ;; Registers used:
 10588 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10589 ;; Tracked objects:
 10590 ;;		On entry : 0/0
 10591 ;;		On exit  : 0/0
 10592 ;;		Unchanged: 0/0
 10593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10595 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10596 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10597 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10598 ;;Total ram usage:        1 bytes
 10599 ;; Hardware stack levels used:    1
 10600 ;; This function calls:
 10601 ;;		Nothing
 10602 ;; This function is called by:
 10603 ;;		_INTERRUPT_InterruptManager
 10604 ;; This function uses a non-reentrant model
 10605 ;;
 10606                           
 10607                           
 10608                           ;psect for function _EUSART_Receive_ISR
 10609  09A0                     _EUSART_Receive_ISR:	
 10610                           
 10611                           ;eusart.c: 187: if(1 == RCSTAbits.OERR)
 10612                           
 10613                           ;incstack = 0
 10614                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 10615  09A0  0023               	movlb	3	; select bank3
 10616  09A1  1C9D               	btfss	29,1	;volatile
 10617  09A2  29A5               	goto	i1l3769
 10618                           
 10619                           ;eusart.c: 188: {
 10620                           ;eusart.c: 191: RCSTAbits.CREN = 0;
 10621  09A3  121D               	bcf	29,4	;volatile
 10622                           
 10623                           ;eusart.c: 192: RCSTAbits.CREN = 1;
 10624  09A4  161D               	bsf	29,4	;volatile
 10625  09A5                     i1l3769:	
 10626                           
 10627                           ;eusart.c: 193: }
 10628                           ;eusart.c: 196: eusartRxBuffer[eusartRxHead++] = RCREG;
 10629  09A5  0819               	movf	25,w	;volatile
 10630  09A6  00F0               	movwf	??_EUSART_Receive_ISR
 10631  09A7  0020               	movlb	0	; select bank0
 10632  09A8  0869               	movf	_eusartRxHead,w
 10633  09A9  3EA0               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
 10634  09AA  0086               	movwf	6
 10635  09AB  0187               	clrf	7
 10636  09AC  0870               	movf	??_EUSART_Receive_ISR,w
 10637  09AD  0081               	movwf	1
 10638  09AE  3001               	movlw	1
 10639  09AF  00F0               	movwf	??_EUSART_Receive_ISR
 10640  09B0  0870               	movf	??_EUSART_Receive_ISR,w
 10641  09B1  07E9               	addwf	_eusartRxHead,f	;volatile
 10642                           
 10643                           ;eusart.c: 197: if(sizeof(eusartRxBuffer) <= eusartRxHead)
 10644  09B2  3008               	movlw	8
 10645  09B3  0269               	subwf	_eusartRxHead,w	;volatile
 10646  09B4  1803               	btfsc	3,0
 10647                           
 10648                           ;eusart.c: 198: {
 10649                           ;eusart.c: 199: eusartRxHead = 0;
 10650  09B5  01E9               	clrf	_eusartRxHead	;volatile
 10651                           
 10652                           ;eusart.c: 200: }
 10653                           ;eusart.c: 201: eusartRxCount++;
 10654  09B6  3001               	movlw	1
 10655  09B7  00F0               	movwf	??_EUSART_Receive_ISR
 10656  09B8  0870               	movf	??_EUSART_Receive_ISR,w
 10657  09B9  07E7               	addwf	_eusartRxCount,f	;volatile
 10658  09BA  0008               	return
 10659  09BB                     __end_of_EUSART_Receive_ISR:	
 10660  007E                     btemp	set	126	;btemp
 10661  007E                     int$flags	set	126
 10662  007E                     wtemp0	set	126


Data Sizes:
    Strings     186
    Constant    10
    Data        4
    BSS         175
    Persistent  8
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      14
    BANK0            80     60      80
    BANK1            80      0      67
    BANK2            80      0      48
    BANK3            80      0      48
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    PROTOCOL_Extension_Handler$0	PTR unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), I2C1_StatusCallback@ext_buf(BANK3[48]), 

    data	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    strncmp@s2	PTR const unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_15(CODE[4]), STR_14(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), 
		 -> STR_8(CODE[4]), STR_7(CODE[4]), STR_6(CODE[4]), STR_4(CODE[4]), 

    atoi@s	PTR const unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), 

    PROTOCOL_I2C_SEN@pdata	PTR unsigned char  size(1) Largest target is 16
		 -> type_no_data(BANK1[1]), PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK1[16]), readbuf.length(BANK1[1]), 
		 -> readbuf.type(BANK1[1]), readbuf(BANK1[5]), 

    PROTOCOL_I2C_Send_float@pbuffer	PTR float  size(1) Largest target is 9
		 -> PROTOCOL_Send_float@pbuf(BANK1[3]), inv_handler@values(BANK0[9]), 

    PROTOCOL_I2C_Set_TLV@pbuffer	PTR unsigned char  size(1) Largest target is 16
		 -> PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK1[16]), 

    PROTOCOL_EXT@char_buf	PTR unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), I2C1_StatusCallback@ext_buf(BANK3[48]), 

    PROTOCOL_Extension_Handler	PTR FTN(PTR unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    PROTOCOL_Loop_Func	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    PROTOCOL_Initialize@inv_handler	PTR void  size(2) Largest target is 1
		 -> inv_handler(), 

    PROTOCOL_Inv_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), inv_handler(), 

    PROTOCOL_Initialize@set_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Set_Handler	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@stop_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Stop_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@start_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Start_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@device_id	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_1(CODE[11]), 

    device_id_	PTR const unsigned char  size(2) Largest target is 8192
		 -> ROM(CODE[8192]), STR_1(CODE[11]), 

    S832$pbuffer	PTR unsigned char  size(1) Largest target is 16
		 -> PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK1[16]), 

    readbuf.pbuffer	PTR unsigned char  size(1) Largest target is 16
		 -> PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK1[16]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 8192
		 -> STR_10(CODE[4]), buf(BANK2[48]), STR_2(CODE[7]), ROM(CODE[8192]), 
		 -> printf@c(BANK0[1]), STR_1(CODE[11]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_48(CODE[10]), STR_47(CODE[9]), STR_46(CODE[10]), STR_45(CODE[9]), 
		 -> STR_44(CODE[4]), STR_43(CODE[4]), STR_42(CODE[4]), STR_41(CODE[4]), 
		 -> STR_40(CODE[4]), STR_39(CODE[4]), STR_38(CODE[4]), STR_37(CODE[4]), 
		 -> STR_36(CODE[14]), STR_35(CODE[9]), STR_34(CODE[10]), STR_33(CODE[9]), 
		 -> STR_32(CODE[10]), STR_31(CODE[9]), STR_30(CODE[7]), STR_29(CODE[4]), 
		 -> STR_28(CODE[4]), STR_27(CODE[9]), STR_26(CODE[4]), STR_25(CODE[4]), 
		 -> STR_24(CODE[10]), STR_23(CODE[4]), STR_22(CODE[4]), STR_21(CODE[8]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[9]), STR_17(CODE[6]), 
		 -> STR_16(CODE[10]), STR_13(CODE[10]), STR_9(CODE[10]), STR_5(CODE[10]), 
		 -> STR_3(CODE[5]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    sp__PROTOCOL_I2C_SEN	PTR unsigned char  size(1) Largest target is 16
		 -> type_no_data(BANK1[1]), PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK1[16]), readbuf.length(BANK1[1]), 
		 -> readbuf.type(BANK1[1]), readbuf(BANK1[5]), 

    I2C1_StatusCallback@pdata	PTR unsigned char  size(1) Largest target is 16
		 -> type_no_data(BANK1[1]), PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK1[16]), readbuf.length(BANK1[1]), 
		 -> readbuf.type(BANK1[1]), readbuf(BANK1[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_I2C1_ISR
    _I2C1_ISR->_I2C1_StatusCallback
    _I2C1_StatusCallback->i1_PROTOCOL_SAV
    i1_PROTOCOL_SAV->i1_DATAEE_WriteByte

Critical Paths under _main in BANK0

    _main->_PROTOCOL_Loop
    _PROTOCOL_Loop->_inv_handler
    _inv_handler->_get_accel
    _get_accel->___ftdiv
    ___lwtoft->___ftpack
    ___ftdiv->___ftadd
    ___ftadd->___ftpack
    _PROTOCOL_I2C_Send_float->___fttol
    _printf->___lwmod
    _putch->_EUSART_Write
    ___lwmod->___lwdiv
    _abs->___awmod
    ___fttol->___ftmul
    ___ftmul->___ftpack
    _atoi->___wmul
    _PROTOCOL_Write_Device_Address->_DATAEE_WriteByte
    _PROTOCOL_SAV->_DATAEE_WriteByte
    _PROTOCOL_Initialize->_DATAEE_ReadByte

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   27608
                                             59 BANK0      1     1      0
                     _ADC_Initialize
                  _EUSART_Initialize
                    _I2C1_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                _PROTOCOL_Initialize
                      _PROTOCOL_Loop
                    _TMR0_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (1) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_Initialize                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Loop                                        4     4      0   27070
                                             55 BANK0      4     4      0
                   Absolute function *
                        _EUSART_Read
                       _PROTOCOL_EXT
       _PROTOCOL_Read_Device_Address
                       _PROTOCOL_SAV
                       _PROTOCOL_SET
                       _PROTOCOL_STA
                       _PROTOCOL_STP
      _PROTOCOL_Write_Device_Address
            _TMR0_HasOverflowOccured
                               _atoi
                        _inv_handler *
                             _printf
                            _strncmp
 ---------------------------------------------------------------------------------
 (2) _strncmp                                              7     2      5    1670
                                              0 BANK0      7     2      5
 ---------------------------------------------------------------------------------
 (2) _inv_handler                                         10    10      0   19699
                                             45 BANK0     10    10      0
            _PROTOCOL_I2C_Send_float
                          _get_accel
 ---------------------------------------------------------------------------------
 (3) _get_accel                                            8     4      4    7841
                                             37 BANK0      8     4      4
            _ADC_GetConversionResult
               _ADC_IsConversionDone
                  _ADC_SelectChannel
                _ADC_StartConversion
                            ___ftadd
                            ___ftdiv
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (4) ___lwtoft                                             4     1      3    2156
                                              8 BANK0      4     1      3
            _ADC_GetConversionResult (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             16    10      6    2478
                                             21 BANK0     16    10      6
                            ___ftadd (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    3140
                                              8 BANK0     13     7      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) _ADC_StartConversion                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _ADC_SelectChannel                                    2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _ADC_IsConversionDone                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _ADC_GetConversionResult                              2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _PROTOCOL_I2C_Send_float                              6     5      1   11784
                                             38 BANK0      6     5      1
               _PROTOCOL_I2C_Set_TLV
                            ___awdiv
                            ___awmod
                             ___bmul
                            ___ftmul
                            ___fttol
                                _abs
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              26    20      6    4238
                                             14 BANK0     22    16      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                                _abs (ARG)
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      66
                                              2 BANK0      1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (4) _EUSART_Write                                         2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     287
                                              8 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     290
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (4) _abs                                                  4     2      2     526
                                              7 BANK0      4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             14    10      4     444
                                             24 BANK0     14    10      4
                             ___bmul (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             16    10      6    2780
                                              8 BANK0     16    10      6
                             ___bmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2070
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) ___bmul                                               4     3      1     221
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              7     3      4    1216
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4    1220
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (4) _PROTOCOL_I2C_Set_TLV                                 5     3      2     625
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 8     6      2     830
                                              6 BANK0      8     6      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     474
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _TMR0_HasOverflowOccured                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_Write_Device_Address                        2     2      0     240
                                              3 BANK0      2     2      0
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_STP                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_STA                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_SET                                         2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_SAV                                         1     1      0     196
                                              3 BANK0      1     1      0
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (3) _DATAEE_WriteByte                                     3     2      1     196
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_EXT                                         1     1      0      60
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Read                                          2     2      0      24
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Initialize                                 10     2      8     538
                                              1 BANK0     10     2      8
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (2) _DATAEE_ReadByte                                      1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2C1_Initialize                                      2     2      0       0
                                              0 BANK0      2     2      0
       _PROTOCOL_Read_Device_Address
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_Read_Device_Address                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Initialize                                    1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                           1     1      0     233
                                              9 COMMON     1     1      0
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
                           _I2C1_ISR
 ---------------------------------------------------------------------------------
 (8) _I2C1_ISR                                             2     2      0     233
                                              7 COMMON     2     2      0
                _I2C1_StatusCallback
 ---------------------------------------------------------------------------------
 (9) _I2C1_StatusCallback                                  3     3      0     187
                                              4 COMMON     3     3      0
   _PROTOCOL_Backplane_Slave_Enabled
                   _PROTOCOL_I2C_GET
                   _PROTOCOL_I2C_SEN
                   _PROTOCOL_I2C_WHO
                       _PROTOCOL_INV
                       _PROTOCOL_RST
                 _PROTOCOL_Read_Lock
                     i1_PROTOCOL_EXT
                     i1_PROTOCOL_SAV
                     i1_PROTOCOL_SET
                     i1_PROTOCOL_STA
                     i1_PROTOCOL_STP
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_STP                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_STA                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_SET                                      2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_SAV                                      1     1      0      94
                                              3 COMMON     1     1      0
                 i1_DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (11) i1_DATAEE_WriteByte                                  3     2      1      94
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_EXT                                      1     1      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_Read_Lock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_RST                                        1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_INV                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_I2C_WHO                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_I2C_SEN                                    2     2      0      26
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_I2C_GET                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_Backplane_Slave_Enabled                    0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _EUSART_Receive_ISR                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Initialize
   _EUSART_Initialize
   _I2C1_Initialize
     _PROTOCOL_Read_Device_Address
   _OSCILLATOR_Initialize
   _PIN_MANAGER_Initialize
   _PROTOCOL_Initialize
     _DATAEE_ReadByte
   _PROTOCOL_Loop
     Absolute function(Fake) *
     _EUSART_Read *
     _PROTOCOL_EXT *
     _PROTOCOL_Read_Device_Address *
     _PROTOCOL_SAV *
       _DATAEE_WriteByte
     _PROTOCOL_SET *
     _PROTOCOL_STA *
     _PROTOCOL_STP *
     _PROTOCOL_Write_Device_Address *
       _DATAEE_WriteByte
     _TMR0_HasOverflowOccured *
     _atoi *
       ___wmul
       _isdigit
     _inv_handler *
       _PROTOCOL_I2C_Send_float
         _PROTOCOL_I2C_Set_TLV
         ___awdiv
         ___awmod
         ___bmul
         ___ftmul
           ___bmul (ARG)
           ___ftpack (ARG)
         ___fttol
           ___bmul (ARG)
           ___ftmul (ARG)
             ___bmul (ARG)
             ___ftpack (ARG)
         _abs
           ___awmod (ARG)
         _printf
           ___awdiv (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _abs (ARG)
             ___awmod (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _EUSART_Write
       _get_accel
         _ADC_GetConversionResult
         _ADC_IsConversionDone
         _ADC_SelectChannel
         _ADC_StartConversion
         ___ftadd
           ___ftpack
         ___ftdiv
           ___ftadd (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___lwtoft
           _ADC_GetConversionResult (ARG)
           ___ftpack (ARG)
     _printf *
       ___awdiv (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _abs (ARG)
         ___awmod (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _EUSART_Write
     _strncmp *
   _TMR0_Initialize
   _WDT_Initialize

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR
   _I2C1_ISR
     _I2C1_StatusCallback
       _PROTOCOL_Backplane_Slave_Enabled
       _PROTOCOL_I2C_GET
       _PROTOCOL_I2C_SEN
       _PROTOCOL_I2C_WHO
       _PROTOCOL_INV
       _PROTOCOL_RST
       _PROTOCOL_Read_Lock
       i1_PROTOCOL_EXT
       i1_PROTOCOL_SAV
         i1_DATAEE_WriteByte
       i1_PROTOCOL_SET
       i1_PROTOCOL_STA
       i1_PROTOCOL_STP

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     3C      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      43       7       83.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      30       9       60.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      30      11       60.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     101      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     101      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Thu Jul 13 07:39:55 2017

                                         _i 005D                                           _j 005C  
                                         pc 0002                      __end_ofi1_PROTOCOL_EXT 089D  
                    __end_ofi1_PROTOCOL_SAV 0905                      __end_ofi1_PROTOCOL_SET 08DF  
                            ___bmul@product 0022                      __end_ofi1_PROTOCOL_STA 08C0  
                    __end_ofi1_PROTOCOL_STP 08AB             __end_of_TMR0_HasOverflowOccured 08C8  
                               __CFG_CP$OFF 0000                                ___awdiv@sign 0026  
                       ___wmul@multiplicand 0022                             _timer0ReloadVal 0066  
                              ___ftadd@exp1 0034                                ___ftadd@exp2 0033  
                               __CFG_LVP$ON 0000                                ___ftadd@sign 0032  
                                       l152 08E3                                         l229 0AD9  
                                       l326 0AC2                                         l504 023D  
                                       l452 008F                                         l480 013C  
                                       l464 015C                                         l628 03BD  
                                       l487 01B2                                         l898 09FA  
                              __CFG_CPD$OFF 0000                                         _abs 095A  
                                       _buf 0120                                         _cnt 0064  
                              ___awmod@sign 0026                                __CFG_BORV$LO 0000  
                                       wreg 0009                                __CFG_IESO$ON 0000  
                              ?_EUSART_Read 0070                                ___ftdiv@cntr 003F  
                          __end_of_I2C1_ISR 0B17                                ___ftdiv@sign 0044  
                                      ?_abs 0027                                        l1109 05D9  
                                      l3003 0CFF                                        l3021 0D1E  
                                      l1085 0D8C                                        l1086 0D94  
                                      l1078 0D79                                        l3031 0D39  
                                      l3111 05A5                                        l3009 0D0A  
                                      l3201 0F79                                        l1169 0E89  
                                      l3113 05AF                                        l3105 0592  
                                      l3035 0D41                                        l3027 0D30  
                                      l3019 0D12                                        l3051 0C72  
                                      l3123 05CB                                        l3115 05B4  
           __end_of_PROTOCOL_I2C_Send_float 03BD                                        l3061 0C84  
                                      l3213 0FB4                                        l3133 05FD  
                                      l3125 05D5                                        l3117 05B8  
                                      l3047 0C6B                                        l3143 0618  
                                      l3073 0CA1                                        l3065 0C90  
                                      l3225 0FD0                                        l3217 0FBC  
                                      l3401 0247                                        l3129 05EB  
                                      l3153 0EBA                                        l3059 0C78  
                                      l3403 029A                                        l3083 0562  
                                      l3069 0C99                                        l3229 0FD8  
                                      l3245 0E35                                        l3421 02AA  
                                      l3405 02A6                                        l3093 0578  
                                      l3181 0F2A                                        l3173 0F11  
                                      l3271 0E80                                        l3263 0E65  
                                      l3431 038D                                        l3423 0323  
                                      l3415 02E8                                        l3087 0569  
                                      l3159 0ED0                                _tmr_overflow 00BB  
                                      l2721 0958                                        l3273 0E8C  
                                      l3265 0E73                                        l3417 02ED  
                                      l3195 0F63                                        l2811 0B36  
                                      l3277 0E9A                                        l2805 0B1E  
                                      l2709 0AED                                        l3429 035D  
                                      l3613 0C54                                        l3551 0A4B  
                                      l2727 09F4                                        l2751 0D65  
                                      l2743 0D4F                                        l2807 0B2A  
                                      l2815 0B3F                                        l2911 0181  
                                      l3625 0DB5                                        l3609 0C3C  
                                      l3617 0C1E                                        l3643 0DDA  
                                      l3627 0DAD                                        l2747 0D56  
                                      l2931 01CE                                        l2923 01A6  
                                      l2907 0176                                        l2851 00AA  
                                      l3379 07C1                                        l3619 0C5D  
                                      l3653 0E17                                        l3645 0DDE  
                                      l3637 0DD2                                        l3629 0DBA  
                                      l2757 0D7E                                        l2749 0D60  
                                      l2781 0B7B                                        l2933 01D1  
                                      l2917 0187                                        l2845 0094  
                                      l3813 03E4                                        l3647 0E07  
                                      l2759 0D86                                        l2783 0B87  
                                      l2695 0ACE                                        l2951 01FB  
                                      l2871 00EF                                        l2847 009D  
                                      l2839 008A                                        l3815 03E5  
                                      l2793 0BA2                                        l2961 0208  
                                      l2945 01EA                                        l2881 010C  
                                      l2873 00FD                                        l3825 03F5  
                                      l2947 01EE                                        l2955 0203  
                                      l2939 01DB                                        l2883 011B  
                                      l2867 00ED                                        l2859 00D9  
                                      l2963 006E                                        l2789 0B99  
                                      l2877 010A                                        l3853 0466  
                                      l2983 097C                                        l2887 0128  
                                      l2895 013E                                        l3871 04E7  
                                      l3863 04A4                                        l2889 0133  
                                      l3857 047F                                        l3849 044D  
                                      l2987 0982                                        l3883 0535  
                                      l3867 04C3                                        l3877 050A  
                                      STR_1 0648                                        STR_2 06B2  
                                      STR_3 06BF                                        STR_4 06E0  
                                      STR_5 0671                                        STR_6 06F0  
                                      STR_7 06D8                                        STR_8 06E4  
                                      STR_9 067B                                        u2205 0D74  
                                      _LATA 010C                                        _LATB 010D  
                                      u2135 09FB                                        u3015 05A6  
                                      _LATC 010E                                        u2145 0A00  
                                      u2225 0D81                                        u2315 0B88  
                                      u2325 0B92                                        u3045 05B9  
                                      u2335 0B9A                                        u2265 0D9B  
                                      u2185 0D5B                                        u3305 0FDF  
                                      u3225 0F85                                        u3145 0EE2  
                                      u3235 0F95                                        u3075 05CC  
                                      u3155 0EF2                                        u2365 0B21  
                                      u2525 019C                                        u3165 0F12  
                                      u3255 0FBD                                        u3335 0E3C  
                                      u2295 0B7E                                        u3175 0F21  
                                      u3265 0FC3                                        u2385 0B30  
                                      u2465 0103                                        u3505 02E3  
                                      u3185 0F2B                                        u4067 0A8E  
                                      u2395 0B37                                        u3365 0E66  
                                      u2565 01C1                                        u2735 0D15  
                                      u3295 0FD9                                        u3535 0358  
                                      u2755 0D1F                                        u2835 0C7B  
                                      u3395 0E81                                        u2765 0D29  
                                      u2775 0D31                                        u2855 0C8A  
                                      u2865 0C91                                        i1l64 0B04  
                                      u2985 0593                                        i1l86 06F6  
                                      _PLLR 04D6                                        _TMR0 0015  
                                      _WPUA 020C                                        _WPUB 020D  
                                      _WPUC 020E                                __CFG_WRT$OFF 0000  
                             __CFG_FCMEN$ON 0000                                        abs@a 0027  
                                      _data 00B8                                        _atoi 0DAB  
                                      _main 0B44                                ___ftpack@arg 0020  
                              ___ftpack@exp 0023                                        fsr0h 0005  
                                      fsr1h 0007                                        indf0 0000  
                                      fsr0l 0004                                        indf1 0001  
                                      fsr1l 0006                                        btemp 007E  
                             __CFG_BOREN$ON 0000                                        start 0030  
                         ___bmul@multiplier 0023                               __CFG_MCLRE$ON 0000  
                              ___ftmul@cntr 0036                                ___ftmul@sign 0037  
                       _I2C1_StatusCallback 06F4                                ___fttol@exp1 0045  
                                     ??_abs 0029                             ?i1_PROTOCOL_EXT 0070  
                           ?i1_PROTOCOL_SAV 0070                             ?i1_PROTOCOL_SET 0070  
                 __size_of_DATAEE_WriteByte 0023                             ?i1_PROTOCOL_STA 0070  
                              ___fttol@lval 0041                             ?i1_PROTOCOL_STP 0070  
                   __end_of_TMR0_Initialize 093C                               __CFG_PLLEN$ON 0000  
                             ?_EUSART_Write 0070              __size_of_OSCILLATOR_Initialize 0007  
             __end_of_OSCILLATOR_Initialize 08E6                                       ?_atoi 0026  
                                     ?_main 0070                             __end_of___awdiv 0D46  
                           __end_of___ftadd 0630                                       STR_10 06DC  
                                     STR_11 06EC                                       STR_12 06E8  
                                     STR_20 06C4                                       STR_13 065D  
                                     STR_14 06D4                                       STR_22 06C8  
                                     STR_30 06AB                                       STR_15 06D0  
                                     STR_24 068F                                       STR_32 0685  
                                     STR_16 0653                                       STR_17 06B9  
                             __CFG_WDTE$OFF 0000                                       STR_18 06A2  
                                     STR_34 0667                                       STR_19 06CC  
                                     STR_35 0699                                       STR_36 063A  
                           __end_of___awmod 0CA6                                       STR_45 0686  
                                     STR_46 0685                                       STR_47 0668  
                                     STR_48 0667                             __end_of___ftdiv 0F4C  
                           __end_of___ftmul 1000                             ___awdiv@divisor 0020  
                           __end_of___fttol 0EA3                             __end_of___lwdiv 0BA7  
                                     i1l103 0719                                       i1l124 07B7  
                                     i1l241 09D3                                       i1l173 0015  
                                     i1l326 0A21                                       i1l175 0021  
                           __end_of___lwmod 0B44                                       i1l179 002B  
                           ___awdiv@counter 0025                  PROTOCOL_I2C_Set_TLV@length 0020  
                                     _RCREG 0199                                       _RCSTA 019D  
                                     _TRISA 008C                                       _TRISB 008D  
                                     _TRISC 008E                                       _TXREG 019A  
                                     _TXSTA 019E            __size_of_ADC_GetConversionResult 0009  
              __size_of_PROTOCOL_Initialize 004E                  PROTOCOL_I2C_Set_TLV@status 0024  
                         ??_I2C1_Initialize 0020                        ?_I2C1_StatusCallback 0070  
                           _DATAEE_ReadByte 0921             ??_PROTOCOL_Write_Device_Address 0023  
                           __end_of_dpowers 063A                              _WDT_Initialize 08C8  
            PROTOCOL_Initialize@inv_handler 0026                             __end_of_isdigit 095A  
                              ?_inv_handler 0070                               ___ftpack@sign 0024  
                                     _value 0063                                       atoi@a 002B  
                                     atoi@s 002D                                       _putch 08CC  
                                     pclath 000A                      ??_PROTOCOL_I2C_Set_TLV 0022  
                                     status 0003                                       wtemp0 007E  
                           __end_of_strncmp 0C60                             __initialization 0032  
                              __end_of_atoi 0E1C                                __end_of_main 0B72  
                            ??_EUSART_Write 0020                 ?_INTERRUPT_InterruptManager 0070  
          PROTOCOL_Initialize@start_handler 0023                                      ??_atoi 0028  
                                    ??_main 005B                               ___fttol@sign1 0040  
                         inv_handler@values 004E                          _PROTOCOL_Read_Lock 08A5  
                    __end_of_WDT_Initialize 08CC                       ??_I2C1_StatusCallback 0074  
                __end_ofi1_DATAEE_WriteByte 0A2A               __size_of_ADC_IsConversionDone 0007  
                                    _ADCON0 009D                                      _ADCON1 009E  
                                    i1S3951 0800                                      _ADRESH 009C  
                                    _EEADRH 0192                                      _ADRESL 009B  
                                    _EEADRL 0191                                      _EEDATH 0194  
                                    _EEDATL 0193                                      _EECON2 0196  
                          ___awdiv@dividend 0022                                      _ANSELA 018C  
                                    ?_putch 0070                                      _ANSELB 018D  
                                    _ANSELC 018E                            __end_of___ftpack 0DAB  
                       ?_PROTOCOL_Read_Lock 0070                          _PROTOCOL_Loop_Func 00B6  
                                    i1l3331 0BF1                                      i1l3341 0C08  
                                    i1l3325 0BE3                                      i1l3501 076F  
                                    i1l3335 0BFE                                      i1l3511 0788  
                                    i1l3329 0BEB                                      i1l3345 0C0D  
                                    i1l3513 078B                                      i1l3505 0772  
                                    i1l3347 0C1C                                      i1l3515 0790  
                                    i1l3523 07A1                                      i1l3461 0709  
                                    i1l3509 077C                                      i1l3453 06FA  
                                    i1l3519 079C                                      i1l3463 070D  
                                    i1l3455 0700                                      i1l3527 07AD  
                                    i1l3465 0711                                      i1l3473 071E  
                                    i1l3491 0754                                      i1l3467 0715  
                                    i1l3459 0705                                      i1l3485 0749  
                                    i1l3469 071C                                      i1l3477 0736  
                                    i1l3479 073F                                      i1l3681 0B02  
                                    i1l3687 0B0B                                      i1l3769 09A5  
                                    i1l3689 0B0D                            __end_of___lwtoft 09A0  
                                    _OSCCON 0099            __size_of_TMR0_HasOverflowOccured 0004  
                                    _TMR0IF 005A                                      _SPBRGH 019C  
                                    _SPBRGL 019B                                      _WDTCON 0097  
            PROTOCOL_Initialize@set_handler 0025                              __CFG_PWRTE$OFF 0000  
                 PROTOCOL_Initialize@scaler 0028                                      ___bmul 0979  
                                    ___wmul 09F1                                   ??___awdiv 0024  
                                 ??___ftadd 002E                              __CFG_STVREN$ON 0000  
                                 ??___awmod 0024                                   ??___ftdiv 003B  
                                 ??___ftmul 002E                                   ??___fttol 003C  
                                 ??___lwdiv 0024                        ??_PROTOCOL_Read_Lock 0070  
                                 ??___lwmod 002C                                _type_no_data 00E2  
                       _EUSART_Transmit_ISR 09BB                            ?_TMR0_Initialize 0070  
                                    _locked 0062                                   ?_I2C1_ISR 0070  
                          ___awdiv@quotient 0027                             ___awmod@divisor 0020  
          __size_of_PROTOCOL_I2C_Send_float 017F                             ___awmod@counter 0025  
                                    _printf 0069                     __end_of_DATAEE_ReadByte 092E  
                     ___ftmul@f3_as_product 0033                                __pdataCOMMON 007D  
                                 ??_isdigit 0020                    __end_of_PROTOCOL_I2C_GET 08A2  
                  __end_of_PROTOCOL_I2C_SEN 0C1E                    __end_of_PROTOCOL_I2C_WHO 08A5  
                           ?_WDT_Initialize 0070               i1DATAEE_WriteByte@GIEBitValue 0072  
                                 ??_strncmp 0025                   PROTOCOL_Send_uint8_t@pbuf 00D9  
                      ?_EUSART_Transmit_ISR 0070                        __size_of_EUSART_Read 001F  
                   __end_of__initialization 0065                                  ___ftadd@f1 0028  
                                ___ftadd@f2 002B                                  ___ftdiv@f1 0038  
                                ___ftdiv@f2 0035                                  ___ftdiv@f3 0040  
                       ___bmul@multiplicand 0020                                  ___ftmul@f1 0028  
                                ___ftmul@f2 002B                                  ___fttol@f1 0038  
              __size_of_ADC_StartConversion 0003                              __pcstackCOMMON 0070  
                              __pidataBANK0 0002                                __pidataBANK1 089E  
                          _DATAEE_WriteByte 0AA9                               __end_of_putch 08D2  
                                ??_I2C1_ISR 0077                       __end_of_PROTOCOL_Loop 053A  
                                ___lwtoft@c 0028                     _ADC_GetConversionResult 090E  
                            _OPTION_REGbits 0095                          __size_of_get_accel 0047  
                   PROTOCOL_Send_float@pbuf 00D1                       ??_EUSART_Transmit_ISR 0070  
                                   ??_putch 0022                                  __pbssBANK0 005C  
                                __pbssBANK1 00A0                                  __pbssBANK2 0120  
                                __pbssBANK3 01A0                      i1DATAEE_WriteByte@bAdd 0071  
                      __end_of_EUSART_Write 0AF0                        __size_of_inv_handler 003B  
               __size_of_EUSART_Receive_ISR 001B                            ??i1_PROTOCOL_EXT 0070  
                          ??i1_PROTOCOL_SAV 0073                            ??i1_PROTOCOL_SET 0070  
                          ??i1_PROTOCOL_STA 0070                            ??i1_PROTOCOL_STP 0070  
                       _PROTOCOL_Initialize 0CA6                                  __pmaintext 0B44  
                                   ?___bmul 0020                                     ?___wmul 0020  
                                __pintentry 0004                             _I2C1_Initialize 0A88  
                                   _BAUDCON 019F                                  _device_id_ 00DA  
                                 ?___ftpack 0020                                     _APFCON0 011D  
                                   _APFCON1 011E                                     ?_printf 002E  
                   __size_of_ADC_Initialize 0008                  I2C1_StatusCallback@ext_buf 01A0  
                I2C1_StatusCallback@ext_cnt 006A                  I2C1_StatusCallback@ext_len 006B  
                                 ?___lwtoft 0028                            ?_DATAEE_ReadByte 0070  
                             _eusartRxCount 0067           I2C1_StatusCallback@slaveWriteType 006D  
                PROTOCOL_Send_uint16_t@pbuf 00D6                        ?_PROTOCOL_Initialize 0021  
                                   _OSCTUNE 0098                                     _SSP1ADD 0212  
                                   _SSP1BUF 0211                                     _SSP1MSK 0213  
                    _PROTOCOL_Start_Handler 00E0                     _TMR0_HasOverflowOccured 08C4  
                      DATAEE_WriteByte@bAdd 0021                           __end_of_get_accel 07FF  
                           __size_of___bmul 0012                                     ___awdiv 0CF4  
                                   ___ftadd 053A                                     ___awmod 0C60  
                             ?_PROTOCOL_INV 0070                               ?_PROTOCOL_EXT 0070  
                             ?_PROTOCOL_SAV 0070                                     ___ftdiv 0EA3  
                             ?_PROTOCOL_SET 0070                               ?_PROTOCOL_STA 0070  
                             ?_PROTOCOL_RST 0070                               ?_PROTOCOL_STP 0070  
                           __size_of___wmul 001C                                     ___ftmul 0F4C  
                                   ___fttol 0E1C                                     ___lwdiv 0B72  
                                   ___lwmod 0B17                     _PROTOCOL_I2C_Send_float 023E  
                 ??_ADC_GetConversionResult 0022                                  ??___ftpack 0025  
                                   __ptext1 08C8                                     __ptext2 092E  
                                   __ptext3 03BD                                     __ptext4 0C1E  
                                   __ptext5 0BA7                                     __ptext6 07B8  
                                   __ptext7 098B                                     __ptext8 0EA3  
                                   __ptext9 053A                             __size_of_printf 01D5  
                                ??___lwtoft 002B                                     _dpowers 0630  
                     _OSCILLATOR_Initialize 08DF                                __size_of_abs 000F  
PROTOCOL_Write_Device_Address@device_id_i2c 0024                       ??_PROTOCOL_Initialize 0029  
                                   _isdigit 094B                                     _readbuf 00CC  
                                   _sec_cnt 005F                            ___awmod@dividend 0022  
                                   _invoked 0060                    ??_PIN_MANAGER_Initialize 0020  
                                   _sendbuf 00BC                                     _tmr_cnt 005E  
                                   clrloop0 08D3                                     _running 0061  
                                   _strncmp 0C1E                        end_of_initialization 0065  
                _PROTOCOL_Extension_Handler 00B4               __size_of_PROTOCOL_I2C_Set_TLV 0020  
                        i1_DATAEE_WriteByte 0A0D                           _EUSART_Initialize 09D6  
                   __end_of_I2C1_Initialize 0AA9                __end_of_ADC_IsConversionDone 08F4  
                        ?_EUSART_Initialize 0070                                   _RCSTAbits 019D  
                                   printf@c 0043                                     printf@f 002E  
                            ??_PROTOCOL_INV 0070                              ??_PROTOCOL_EXT 0020  
                            ??_PROTOCOL_SAV 0023                              ??_PROTOCOL_SET 0020  
                            ??_PROTOCOL_STA 0020                              ??_PROTOCOL_RST 0070  
                            ??_PROTOCOL_STP 0020                         ?i1_DATAEE_WriteByte 0070  
             PROTOCOL_I2C_Send_float@length 0049                                __pstringtext 0630  
                       ??_EUSART_Initialize 0020                 __end_of_I2C1_StatusCallback 07B8  
                          ??_WDT_Initialize 0020                           __size_of_I2C1_ISR 0027  
                          __CFG_FOSC$INTOSC 0000                           ?_PROTOCOL_I2C_GET 0070  
                         ?_PROTOCOL_I2C_SEN 0070                           ?_PROTOCOL_I2C_WHO 0070  
                     __size_of_EUSART_Write 0024                         _ADC_StartConversion 08B1  
                 ??_TMR0_HasOverflowOccured 0020                          ??_PROTOCOL_I2C_GET 0070  
                        ??_PROTOCOL_I2C_SEN 0070                          ??_PROTOCOL_I2C_WHO 0070  
                      ??i1_DATAEE_WriteByte 0071                                  _tmr_scaler 006E  
                  __end_of_DATAEE_WriteByte 0ACC                   __end_of_EUSART_Initialize 09F1  
                               ___ftdiv@exp 0043                                 printf@width 0041  
                      i1PROTOCOL_SET@value_ 0071                                 ___ftmul@exp 0032  
                      ?_ADC_StartConversion 0070                   ??_PROTOCOL_I2C_Send_float 0047  
                  I2C1_StatusCallback@pdata 0076                              __end_of___bmul 098B  
               __size_of_PROTOCOL_Read_Lock 0003                              __end_of___wmul 0A0D  
                             __pidataCOMMON 07FF                                _EUSART_Write 0ACC  
                            _ADC_Initialize 08F4                      ?_OSCILLATOR_Initialize 0070  
                            __end_of_printf 023E                              PROTOCOL_Loop@c 0059  
                       start_initialization 0032                    __size_of_TMR0_Initialize 000E  
           __size_of_PIN_MANAGER_Initialize 001F                                 __end_of_abs 0969  
                             ??_EUSART_Read 0020                                 putch@txData 0022  
                       DATAEE_ReadByte@bAdd 0020                            ?_I2C1_Initialize 0070  
                     ??_ADC_StartConversion 0020                                    ??___bmul 0021  
                          I2C1_ISR@i2c_data 0078                                    ??___wmul 0024  
                  PROTOCOL_Send_int8_t@pbuf 00D8        __end_of_PROTOCOL_Read_Device_Address 08AE  
     __size_of_PROTOCOL_Read_Device_Address 0003                _PROTOCOL_Read_Device_Address 08AB  
                    __end_of_ADC_Initialize 08FC                                 __pdataBANK0 006E  
                               __pdataBANK1 00E2                                    ??_printf 0034  
                         __size_of___ftpack 0065                     i1DATAEE_WriteByte@bData 0070  
               __end_of_EUSART_Transmit_ISR 09D6                                 __pbssCOMMON 007A  
                                 ___latbits 0002                           __size_of___lwtoft 0015  
                             __pcstackBANK0 0020            I2C1_StatusCallback@i2c_bus_state 0075  
                      _ADC_IsConversionDone 08ED                        _PROTOCOL_Inv_Handler 00B2  
                              _isdigit$1239 0020                               ??_inv_handler 004D  
                      __end_of_PROTOCOL_INV 08BC                        __end_of_PROTOCOL_EXT 089E  
                      __end_of_PROTOCOL_SAV 090E                        __end_of_PROTOCOL_SET 08ED  
                      __end_of_PROTOCOL_STA 08C4                        __end_of_PROTOCOL_RST 0921  
                      __end_of_PROTOCOL_STP 08B1                  __end_of_EUSART_Receive_ISR 09BB  
           PROTOCOL_Initialize@stop_handler 0024                  __size_of_EUSART_Initialize 001B  
                       __end_of_EUSART_Read 0A68                      __size_of_PROTOCOL_Loop 017D  
                                 __pnvBANK1 00DA       __end_of_PROTOCOL_Write_Device_Address 094B  
    __size_of_PROTOCOL_Write_Device_Address 000F               _PROTOCOL_Write_Device_Address 093C  
                          ___lwdiv@dividend 0022                      _PIN_MANAGER_Initialize 0A2A  
                      EUSART_Read@readValue 0021                           _ADC_SelectChannel 0969  
                                  ?___awdiv 0020                                    ?___ftadd 0028  
                                  ?___awmod 0020                                    ?___ftdiv 0035  
                                  ?___ftmul 0028                                    ?___fttol 0038  
                                  ?___lwdiv 0020                                    ?___lwmod 0028  
                           ?_ADC_Initialize 0070                                _eusartRxHead 0069  
                        ?_ADC_SelectChannel 0070                                   _get_accel 07B8  
                              _eusartTxHead 007C                                _eusartRxTail 0068  
                              _eusartTxTail 007B                                    _I2C1_ISR 0AF0  
             ?_PROTOCOL_Read_Device_Address 0070                ??_INTERRUPT_InterruptManager 0079  
                 PROTOCOL_Send_int16_t@pbuf 00D4                                   __pswtext1 0800  
                   _eusartTxBufferRemaining 007A                                    ?_isdigit 0070  
                       ??_ADC_SelectChannel 0020                       ?_ADC_IsConversionDone 0070  
                          ___lwdiv@quotient 0025                    __size_of_DATAEE_ReadByte 000D  
                                  ?_strncmp 0020                              __size_of_putch 0006  
                            _eusartRxBuffer 00A0                           ??_TMR0_Initialize 0020  
                            _eusartTxBuffer 00A8                              ___wmul@product 0024  
                                  _LATCbits 010E                        _PROTOCOL_Set_Handler 00DC  
                                 clear_ram0 08D2                         __end_of_inv_handler 0BE2  
                                  _PIE1bits 0091                   __end_of_ADC_SelectChannel 0979  
                     PROTOCOL_I2C_SEN@pdata 0071                    PROTOCOL_I2C_Set_TLV@type 0023  
       __size_of_INTERRUPT_InterruptManager 002C                                    _PIR1bits 0011  
                                  _SSP1CON1 0215                                    _SSP1CON2 0216  
                                  _SSP1CON3 0217                PROTOCOL_Initialize@device_id 0021  
                                  _SSP1STAT 0214                              _readbuf_status 00BA  
                     _PROTOCOL_Stop_Handler 00DE                                  ?_get_accel 0045  
               __end_of_PROTOCOL_Initialize 0CF4                                  _ADCON0bits 009D  
                   __size_ofi1_PROTOCOL_EXT 0001                     __size_ofi1_PROTOCOL_SAV 0009  
                   __size_ofi1_PROTOCOL_SET 0007                     __size_ofi1_PROTOCOL_STA 0004  
                   __size_ofi1_PROTOCOL_STP 0003                           ___wmul@multiplier 0020  
              __end_of_PROTOCOL_I2C_Set_TLV 0A88                               _PROTOCOL_Loop 03BD  
                  ADC_SelectChannel@channel 0021                                  printf@flag 0040  
                                printf@prec 0038                       DATAEE_WriteByte@bData 0020  
                  PROTOCOL_I2C_Send_float@v 004A                     I2C1_StatusCallback@next 006C  
                               _EUSART_Read 0A49                 PROTOCOL_I2C_Set_TLV@pbuffer 0021  
                         ?_DATAEE_WriteByte 0020    __end_of_PROTOCOL_Backplane_Slave_Enabled 08B8  
 __size_of_PROTOCOL_Backplane_Slave_Enabled 0004          ??_PROTOCOL_Backplane_Slave_Enabled 0070  
         ?_PROTOCOL_Backplane_Slave_Enabled 0070            _PROTOCOL_Backplane_Slave_Enabled 08B4  
                        ??_DATAEE_WriteByte 0021                               _slave_address 0065  
                                _EECON1bits 0195                          PROTOCOL_SET@value_ 0021  
                 __size_of_PROTOCOL_I2C_GET 0003                   __size_of_PROTOCOL_I2C_SEN 003C  
                 __size_of_PROTOCOL_I2C_WHO 0003                    ?_ADC_GetConversionResult 0020  
                   ??_OSCILLATOR_Initialize 0020              ?_PROTOCOL_Write_Device_Address 0070  
                          __size_of___awdiv 0052                            __size_of___ftadd 00F6  
                          __size_of___awmod 0046                            __size_of___ftdiv 00A9  
                          __size_of___ftmul 00B4                            __size_of___fttol 0087  
                          __size_of___lwdiv 0035                            __size_of___lwmod 002D  
                                  ___ftpack 0D46                              ?_PROTOCOL_Loop 0070  
                                  ___lwtoft 098B                      ??_ADC_IsConversionDone 0020  
                     __size_of_PROTOCOL_INV 0004                       __size_of_PROTOCOL_EXT 0001  
                     __size_of_PROTOCOL_SAV 0009                       __size_of_PROTOCOL_SET 0007  
                     __size_of_PROTOCOL_STA 0004                       __size_of_PROTOCOL_RST 000A  
                     __size_of_PROTOCOL_STP 0003              ??_PROTOCOL_Read_Device_Address 0020  
                          __size_of_isdigit 000F                             ___lwdiv@divisor 0020  
              __size_of_I2C1_StatusCallback 00C4                             ___lwdiv@counter 0027  
                                  __ptext10 08B1                                    __ptext11 0969  
                                  __ptext20 095A                                    __ptext12 08ED  
                                  __ptext21 0E1C                                    __ptext13 090E  
                                  __ptext30 09F1                                    __ptext22 0F4C  
                                  __ptext14 023E                                    __ptext31 08C4  
                                  __ptext23 0D46                                    __ptext15 0069  
                                  __ptext40 0CA6                                    __ptext32 093C  
                                  __ptext24 0979                                    __ptext16 08CC  
                                  __ptext41 0921                                    __ptext33 08AE  
                                  __ptext25 0C60                                    __ptext17 0ACC  
                                  __ptext50 06F4                                    __ptext42 0A2A  
                                  __ptext34 08C0                                    __ptext26 0CF4  
                                  __ptext18 0B17                                    __ptext51 08A8  
                                  __ptext43 08DF                                    __ptext35 08E6  
                                  __ptext27 0A68                                    __ptext19 0B72  
                                  __ptext60 08A2                                    __ptext52 08BC  
                                  __ptext44 0A88                                    __ptext36 0905  
                                  __ptext28 0DAB                                    __ptext61 0BE2  
                                  __ptext53 08D8                                    __ptext45 08AB  
                                  __ptext37 0AA9                                    __ptext29 094B  
                                  __ptext62 089F                                    __ptext54 08FC  
                                  __ptext46 09D6                                    __ptext38 089D  
                                  __ptext63 08B4                                    __ptext55 0A0D  
                                  __ptext47 08F4                                    __ptext39 0A49  
                                  __ptext64 09BB                                    __ptext56 089C  
                                  __ptext65 09A0                                    __ptext57 08A5  
                                  __ptext49 0AF0                                    __ptext58 0917  
                                  __ptext59 08B8                                _SSP1CON1bits 0215  
                              _SSP1CON2bits 0216                                    _float100 00B0  
               __size_ofi1_DATAEE_WriteByte 001D                                 _inv_handler 0BA7  
               DATAEE_WriteByte@GIEBitValue 0022                            __size_of_strncmp 0042  
                             __size_of_atoi 0071                               __size_of_main 002E  
                                strncmp@len 0023                           ??_DATAEE_ReadByte 0020  
                __size_of_ADC_SelectChannel 0010                     _BACKPLANE_SLAVE_ADDRESS 006F  
                __end_of_PROTOCOL_Read_Lock 08A8                                    int$flags 007E  
                                  atoi@sign 002A                                _PROTOCOL_INV 08B8  
                              _PROTOCOL_EXT 089D                                _PROTOCOL_SAV 0905  
                              _PROTOCOL_SET 08E6                                _PROTOCOL_STA 08C0  
                              _PROTOCOL_RST 0917                                _PROTOCOL_STP 08AE  
                               ??_get_accel 0049          __end_of_INTERRUPT_InterruptManager 0030  
                _INTERRUPT_InterruptManager 0004                                   printf@len 003E  
                                 printf@val 003C                                _SSP1STATbits 0214  
                  ?_TMR0_HasOverflowOccured 0070                          _I2C_slaveWriteData 007D  
                                _INTCONbits 000B                                    isdigit@c 0021  
                   __size_of_WDT_Initialize 0004                                    intlevel1 0000  
               __end_of_ADC_StartConversion 08B4                            ___lwmod@dividend 002A  
                   ?_PIN_MANAGER_Initialize 0070             __end_of_ADC_GetConversionResult 0917  
                  ?_PROTOCOL_I2C_Send_float 0046                           __CFG_CLKOUTEN$OFF 0000  
                      _PROTOCOL_I2C_Set_TLV 0A68                                   strncmp@s1 0020  
                                 strncmp@s2 0022                            ??_ADC_Initialize 0020  
                   _backplane_slave_enabled 00B9                                    printf@ap 003B  
                                  printf@cp 0039                          _EUSART_Receive_ISR 09A0  
                           ??_PROTOCOL_Loop 0057                    __size_of_I2C1_Initialize 0021  
                            i1_PROTOCOL_EXT 089C                              i1_PROTOCOL_SAV 08FC  
                            i1_PROTOCOL_SET 08D8                              i1_PROTOCOL_STA 08BC  
                            i1_PROTOCOL_STP 08A8              PROTOCOL_I2C_Send_float@pbuffer 0046  
                                _OPTION_REG 0095                         ?_EUSART_Receive_ISR 0070  
                           ___lwmod@divisor 0028                             _TMR0_Initialize 092E  
                           ___lwmod@counter 002D                              get_accel@steps 0049  
               PROTOCOL_Loop@device_address 005A                        PROTOCOL_EXT@char_buf 0020  
                        EUSART_Write@txData 0021                __size_of_EUSART_Transmit_ISR 001B  
            __end_of_PIN_MANAGER_Initialize 0A49                        ??_EUSART_Receive_ISR 0070  
                     ?_PROTOCOL_I2C_Set_TLV 0020                            _PROTOCOL_I2C_GET 089F  
                          _PROTOCOL_I2C_SEN 0BE2                            _PROTOCOL_I2C_WHO 08A2  
                               get_accel@ch 004C  
