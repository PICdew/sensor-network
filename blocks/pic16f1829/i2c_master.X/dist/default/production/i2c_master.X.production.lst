

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Tue Sep 26 20:18:41 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F1829
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	stringtext,global,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    17                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text12,local,class=CODE,merge=1,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    45                           	psect	text23,local,class=CODE,merge=1,delta=2,group=1
    46                           	psect	text24,local,class=CODE,merge=1,delta=2,group=1
    47                           	psect	text25,local,class=CODE,merge=1,delta=2,group=1
    48                           	psect	text26,local,class=CODE,merge=1,delta=2,group=1
    49                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    50                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    51                           	psect	text29,local,class=CODE,merge=1,delta=2
    52                           	psect	text30,local,class=CODE,merge=1,delta=2,group=3
    53                           	psect	text31,local,class=CODE,merge=1,delta=2
    54                           	psect	text32,local,class=CODE,merge=1,delta=2,group=3
    55                           	psect	text33,local,class=CODE,merge=1,delta=2
    56                           	psect	text34,local,class=CODE,merge=1,delta=2
    57                           	psect	text35,local,class=CODE,merge=1,delta=2
    58                           	psect	text36,local,class=CODE,merge=1,delta=2
    59                           	psect	text37,local,class=CODE,merge=1,delta=2
    60                           	psect	text38,local,class=CODE,merge=1,delta=2
    61                           	psect	text39,local,class=CODE,merge=1,delta=2
    62                           	psect	text40,local,class=CODE,merge=1,delta=2
    63                           	psect	text41,local,class=CODE,merge=1,delta=2
    64                           	psect	text42,local,class=CODE,merge=1,delta=2
    65                           	psect	text43,local,class=CODE,merge=1,delta=2
    66                           	psect	text44,local,class=CODE,merge=1,delta=2,group=1
    67                           	psect	text45,local,class=CODE,merge=1,delta=2
    68                           	psect	text46,local,class=CODE,merge=1,delta=2
    69                           	psect	text47,local,class=CODE,merge=1,delta=2
    70                           	psect	text48,local,class=CODE,merge=1,delta=2,group=3
    71                           	psect	text49,local,class=CODE,merge=1,delta=2,group=3
    72                           	psect	text50,local,class=CODE,merge=1,delta=2,group=1
    73                           	psect	text51,local,class=CODE,merge=1,delta=2,group=3
    74                           	psect	text52,local,class=CODE,merge=1,delta=2,group=3
    75                           	psect	text53,local,class=CODE,merge=1,delta=2
    76                           	psect	text54,local,class=CODE,merge=1,delta=2,group=3
    77                           	psect	text55,local,class=CODE,merge=1,delta=2,group=3
    78                           	psect	text56,local,class=CODE,merge=1,delta=2,group=3
    79                           	psect	text57,local,class=CODE,merge=1,delta=2,group=3
    80                           	psect	text58,local,class=CODE,merge=1,delta=2
    81                           	psect	text59,local,class=CODE,merge=1,delta=2
    82                           	psect	text60,local,class=CODE,merge=1,delta=2,group=1
    83                           	psect	text61,local,class=CODE,merge=1,delta=2
    84                           	psect	intentry,global,class=CODE,delta=2
    85                           	psect	text63,local,class=CODE,merge=1,delta=2
    86                           	psect	swtext1,local,class=CONST,delta=2
    87                           	psect	text64,local,class=CODE,merge=1,delta=2
    88                           	psect	text65,local,class=CODE,merge=1,delta=2
    89                           	psect	text66,local,class=CODE,merge=1,delta=2
    90                           	psect	text67,local,class=CODE,merge=1,delta=2
    91                           	psect	text68,local,class=CODE,merge=1,delta=2
    92                           	dabs	1,0x620,48
    93                           	dabs	1,0x5A0,80
    94                           	dabs	1,0x530,64
    95                           	dabs	1,0x2330,0,_cmd_buf
    96                           	dabs	1,0x7E,2
    97  0000                     
    98                           ; Version 1.41 (B)
    99                           ; Generated 21/02/2017 GMT
   100                           ; 
   101                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   102                           ; All rights reserved.
   103                           ; 
   104                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   105                           ; 
   106                           ; Redistribution and use in source and binary forms, with or without modification, are
   107                           ; permitted provided that the following conditions are met:
   108                           ; 
   109                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   110                           ;        conditions and the following disclaimer.
   111                           ; 
   112                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   113                           ;        of conditions and the following disclaimer in the documentation and/or other
   114                           ;        materials provided with the distribution.
   115                           ; 
   116                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   117                           ;        software without specific prior written permission.
   118                           ; 
   119                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   120                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   121                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   122                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   123                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   124                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   125                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   126                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   127                           ; 
   128                           ; 
   129                           ; Code-generator required, PIC16F1829 Definitions
   130                           ; 
   131                           ; SFR Addresses
   132  0000                     	;# 
   133  0001                     	;# 
   134  0002                     	;# 
   135  0003                     	;# 
   136  0004                     	;# 
   137  0005                     	;# 
   138  0006                     	;# 
   139  0007                     	;# 
   140  0008                     	;# 
   141  0009                     	;# 
   142  000A                     	;# 
   143  000B                     	;# 
   144  000C                     	;# 
   145  000D                     	;# 
   146  000E                     	;# 
   147  0011                     	;# 
   148  0012                     	;# 
   149  0013                     	;# 
   150  0014                     	;# 
   151  0015                     	;# 
   152  0016                     	;# 
   153  0016                     	;# 
   154  0017                     	;# 
   155  0018                     	;# 
   156  0019                     	;# 
   157  001A                     	;# 
   158  001B                     	;# 
   159  001C                     	;# 
   160  001E                     	;# 
   161  001F                     	;# 
   162  008C                     	;# 
   163  008D                     	;# 
   164  008E                     	;# 
   165  0091                     	;# 
   166  0092                     	;# 
   167  0093                     	;# 
   168  0094                     	;# 
   169  0095                     	;# 
   170  0096                     	;# 
   171  0097                     	;# 
   172  0098                     	;# 
   173  0099                     	;# 
   174  009A                     	;# 
   175  009B                     	;# 
   176  009B                     	;# 
   177  009C                     	;# 
   178  009D                     	;# 
   179  009E                     	;# 
   180  010C                     	;# 
   181  010D                     	;# 
   182  010E                     	;# 
   183  0111                     	;# 
   184  0112                     	;# 
   185  0113                     	;# 
   186  0114                     	;# 
   187  0115                     	;# 
   188  0116                     	;# 
   189  0117                     	;# 
   190  0118                     	;# 
   191  0119                     	;# 
   192  011A                     	;# 
   193  011B                     	;# 
   194  011D                     	;# 
   195  011E                     	;# 
   196  018C                     	;# 
   197  018D                     	;# 
   198  018E                     	;# 
   199  0191                     	;# 
   200  0191                     	;# 
   201  0192                     	;# 
   202  0193                     	;# 
   203  0193                     	;# 
   204  0193                     	;# 
   205  0194                     	;# 
   206  0195                     	;# 
   207  0196                     	;# 
   208  0199                     	;# 
   209  019A                     	;# 
   210  019B                     	;# 
   211  019B                     	;# 
   212  019C                     	;# 
   213  019D                     	;# 
   214  019E                     	;# 
   215  019F                     	;# 
   216  020C                     	;# 
   217  020D                     	;# 
   218  020E                     	;# 
   219  0211                     	;# 
   220  0211                     	;# 
   221  0212                     	;# 
   222  0212                     	;# 
   223  0213                     	;# 
   224  0213                     	;# 
   225  0214                     	;# 
   226  0214                     	;# 
   227  0215                     	;# 
   228  0215                     	;# 
   229  0215                     	;# 
   230  0216                     	;# 
   231  0216                     	;# 
   232  0217                     	;# 
   233  0217                     	;# 
   234  0219                     	;# 
   235  021A                     	;# 
   236  021B                     	;# 
   237  021C                     	;# 
   238  021D                     	;# 
   239  021E                     	;# 
   240  021F                     	;# 
   241  0291                     	;# 
   242  0291                     	;# 
   243  0292                     	;# 
   244  0293                     	;# 
   245  0294                     	;# 
   246  0295                     	;# 
   247  0295                     	;# 
   248  0296                     	;# 
   249  0298                     	;# 
   250  0298                     	;# 
   251  0299                     	;# 
   252  029A                     	;# 
   253  029B                     	;# 
   254  029C                     	;# 
   255  029D                     	;# 
   256  029E                     	;# 
   257  0311                     	;# 
   258  0311                     	;# 
   259  0312                     	;# 
   260  0313                     	;# 
   261  0318                     	;# 
   262  0318                     	;# 
   263  0319                     	;# 
   264  031A                     	;# 
   265  038C                     	;# 
   266  038D                     	;# 
   267  038E                     	;# 
   268  0391                     	;# 
   269  0392                     	;# 
   270  0393                     	;# 
   271  0394                     	;# 
   272  0395                     	;# 
   273  0396                     	;# 
   274  039A                     	;# 
   275  039C                     	;# 
   276  039D                     	;# 
   277  039E                     	;# 
   278  039F                     	;# 
   279  0415                     	;# 
   280  0416                     	;# 
   281  0417                     	;# 
   282  041C                     	;# 
   283  041D                     	;# 
   284  041E                     	;# 
   285  0FE4                     	;# 
   286  0FE5                     	;# 
   287  0FE6                     	;# 
   288  0FE7                     	;# 
   289  0FE8                     	;# 
   290  0FE9                     	;# 
   291  0FEA                     	;# 
   292  0FEB                     	;# 
   293  0FED                     	;# 
   294  0FEE                     	;# 
   295  0FEF                     	;# 
   296  0000                     	;# 
   297  0001                     	;# 
   298  0002                     	;# 
   299  0003                     	;# 
   300  0004                     	;# 
   301  0005                     	;# 
   302  0006                     	;# 
   303  0007                     	;# 
   304  0008                     	;# 
   305  0009                     	;# 
   306  000A                     	;# 
   307  000B                     	;# 
   308  000C                     	;# 
   309  000D                     	;# 
   310  000E                     	;# 
   311  0011                     	;# 
   312  0012                     	;# 
   313  0013                     	;# 
   314  0014                     	;# 
   315  0015                     	;# 
   316  0016                     	;# 
   317  0016                     	;# 
   318  0017                     	;# 
   319  0018                     	;# 
   320  0019                     	;# 
   321  001A                     	;# 
   322  001B                     	;# 
   323  001C                     	;# 
   324  001E                     	;# 
   325  001F                     	;# 
   326  008C                     	;# 
   327  008D                     	;# 
   328  008E                     	;# 
   329  0091                     	;# 
   330  0092                     	;# 
   331  0093                     	;# 
   332  0094                     	;# 
   333  0095                     	;# 
   334  0096                     	;# 
   335  0097                     	;# 
   336  0098                     	;# 
   337  0099                     	;# 
   338  009A                     	;# 
   339  009B                     	;# 
   340  009B                     	;# 
   341  009C                     	;# 
   342  009D                     	;# 
   343  009E                     	;# 
   344  010C                     	;# 
   345  010D                     	;# 
   346  010E                     	;# 
   347  0111                     	;# 
   348  0112                     	;# 
   349  0113                     	;# 
   350  0114                     	;# 
   351  0115                     	;# 
   352  0116                     	;# 
   353  0117                     	;# 
   354  0118                     	;# 
   355  0119                     	;# 
   356  011A                     	;# 
   357  011B                     	;# 
   358  011D                     	;# 
   359  011E                     	;# 
   360  018C                     	;# 
   361  018D                     	;# 
   362  018E                     	;# 
   363  0191                     	;# 
   364  0191                     	;# 
   365  0192                     	;# 
   366  0193                     	;# 
   367  0193                     	;# 
   368  0193                     	;# 
   369  0194                     	;# 
   370  0195                     	;# 
   371  0196                     	;# 
   372  0199                     	;# 
   373  019A                     	;# 
   374  019B                     	;# 
   375  019B                     	;# 
   376  019C                     	;# 
   377  019D                     	;# 
   378  019E                     	;# 
   379  019F                     	;# 
   380  020C                     	;# 
   381  020D                     	;# 
   382  020E                     	;# 
   383  0211                     	;# 
   384  0211                     	;# 
   385  0212                     	;# 
   386  0212                     	;# 
   387  0213                     	;# 
   388  0213                     	;# 
   389  0214                     	;# 
   390  0214                     	;# 
   391  0215                     	;# 
   392  0215                     	;# 
   393  0215                     	;# 
   394  0216                     	;# 
   395  0216                     	;# 
   396  0217                     	;# 
   397  0217                     	;# 
   398  0219                     	;# 
   399  021A                     	;# 
   400  021B                     	;# 
   401  021C                     	;# 
   402  021D                     	;# 
   403  021E                     	;# 
   404  021F                     	;# 
   405  0291                     	;# 
   406  0291                     	;# 
   407  0292                     	;# 
   408  0293                     	;# 
   409  0294                     	;# 
   410  0295                     	;# 
   411  0295                     	;# 
   412  0296                     	;# 
   413  0298                     	;# 
   414  0298                     	;# 
   415  0299                     	;# 
   416  029A                     	;# 
   417  029B                     	;# 
   418  029C                     	;# 
   419  029D                     	;# 
   420  029E                     	;# 
   421  0311                     	;# 
   422  0311                     	;# 
   423  0312                     	;# 
   424  0313                     	;# 
   425  0318                     	;# 
   426  0318                     	;# 
   427  0319                     	;# 
   428  031A                     	;# 
   429  038C                     	;# 
   430  038D                     	;# 
   431  038E                     	;# 
   432  0391                     	;# 
   433  0392                     	;# 
   434  0393                     	;# 
   435  0394                     	;# 
   436  0395                     	;# 
   437  0396                     	;# 
   438  039A                     	;# 
   439  039C                     	;# 
   440  039D                     	;# 
   441  039E                     	;# 
   442  039F                     	;# 
   443  0415                     	;# 
   444  0416                     	;# 
   445  0417                     	;# 
   446  041C                     	;# 
   447  041D                     	;# 
   448  041E                     	;# 
   449  0FE4                     	;# 
   450  0FE5                     	;# 
   451  0FE6                     	;# 
   452  0FE7                     	;# 
   453  0FE8                     	;# 
   454  0FE9                     	;# 
   455  0FEA                     	;# 
   456  0FEB                     	;# 
   457  0FED                     	;# 
   458  0FEE                     	;# 
   459  0FEF                     	;# 
   460  0000                     	;# 
   461  0001                     	;# 
   462  0002                     	;# 
   463  0003                     	;# 
   464  0004                     	;# 
   465  0005                     	;# 
   466  0006                     	;# 
   467  0007                     	;# 
   468  0008                     	;# 
   469  0009                     	;# 
   470  000A                     	;# 
   471  000B                     	;# 
   472  000C                     	;# 
   473  000D                     	;# 
   474  000E                     	;# 
   475  0011                     	;# 
   476  0012                     	;# 
   477  0013                     	;# 
   478  0014                     	;# 
   479  0015                     	;# 
   480  0016                     	;# 
   481  0016                     	;# 
   482  0017                     	;# 
   483  0018                     	;# 
   484  0019                     	;# 
   485  001A                     	;# 
   486  001B                     	;# 
   487  001C                     	;# 
   488  001E                     	;# 
   489  001F                     	;# 
   490  008C                     	;# 
   491  008D                     	;# 
   492  008E                     	;# 
   493  0091                     	;# 
   494  0092                     	;# 
   495  0093                     	;# 
   496  0094                     	;# 
   497  0095                     	;# 
   498  0096                     	;# 
   499  0097                     	;# 
   500  0098                     	;# 
   501  0099                     	;# 
   502  009A                     	;# 
   503  009B                     	;# 
   504  009B                     	;# 
   505  009C                     	;# 
   506  009D                     	;# 
   507  009E                     	;# 
   508  010C                     	;# 
   509  010D                     	;# 
   510  010E                     	;# 
   511  0111                     	;# 
   512  0112                     	;# 
   513  0113                     	;# 
   514  0114                     	;# 
   515  0115                     	;# 
   516  0116                     	;# 
   517  0117                     	;# 
   518  0118                     	;# 
   519  0119                     	;# 
   520  011A                     	;# 
   521  011B                     	;# 
   522  011D                     	;# 
   523  011E                     	;# 
   524  018C                     	;# 
   525  018D                     	;# 
   526  018E                     	;# 
   527  0191                     	;# 
   528  0191                     	;# 
   529  0192                     	;# 
   530  0193                     	;# 
   531  0193                     	;# 
   532  0193                     	;# 
   533  0194                     	;# 
   534  0195                     	;# 
   535  0196                     	;# 
   536  0199                     	;# 
   537  019A                     	;# 
   538  019B                     	;# 
   539  019B                     	;# 
   540  019C                     	;# 
   541  019D                     	;# 
   542  019E                     	;# 
   543  019F                     	;# 
   544  020C                     	;# 
   545  020D                     	;# 
   546  020E                     	;# 
   547  0211                     	;# 
   548  0211                     	;# 
   549  0212                     	;# 
   550  0212                     	;# 
   551  0213                     	;# 
   552  0213                     	;# 
   553  0214                     	;# 
   554  0214                     	;# 
   555  0215                     	;# 
   556  0215                     	;# 
   557  0215                     	;# 
   558  0216                     	;# 
   559  0216                     	;# 
   560  0217                     	;# 
   561  0217                     	;# 
   562  0219                     	;# 
   563  021A                     	;# 
   564  021B                     	;# 
   565  021C                     	;# 
   566  021D                     	;# 
   567  021E                     	;# 
   568  021F                     	;# 
   569  0291                     	;# 
   570  0291                     	;# 
   571  0292                     	;# 
   572  0293                     	;# 
   573  0294                     	;# 
   574  0295                     	;# 
   575  0295                     	;# 
   576  0296                     	;# 
   577  0298                     	;# 
   578  0298                     	;# 
   579  0299                     	;# 
   580  029A                     	;# 
   581  029B                     	;# 
   582  029C                     	;# 
   583  029D                     	;# 
   584  029E                     	;# 
   585  0311                     	;# 
   586  0311                     	;# 
   587  0312                     	;# 
   588  0313                     	;# 
   589  0318                     	;# 
   590  0318                     	;# 
   591  0319                     	;# 
   592  031A                     	;# 
   593  038C                     	;# 
   594  038D                     	;# 
   595  038E                     	;# 
   596  0391                     	;# 
   597  0392                     	;# 
   598  0393                     	;# 
   599  0394                     	;# 
   600  0395                     	;# 
   601  0396                     	;# 
   602  039A                     	;# 
   603  039C                     	;# 
   604  039D                     	;# 
   605  039E                     	;# 
   606  039F                     	;# 
   607  0415                     	;# 
   608  0416                     	;# 
   609  0417                     	;# 
   610  041C                     	;# 
   611  041D                     	;# 
   612  041E                     	;# 
   613  0FE4                     	;# 
   614  0FE5                     	;# 
   615  0FE6                     	;# 
   616  0FE7                     	;# 
   617  0FE8                     	;# 
   618  0FE9                     	;# 
   619  0FEA                     	;# 
   620  0FEB                     	;# 
   621  0FED                     	;# 
   622  0FEE                     	;# 
   623  0FEF                     	;# 
   624  0000                     	;# 
   625  0001                     	;# 
   626  0002                     	;# 
   627  0003                     	;# 
   628  0004                     	;# 
   629  0005                     	;# 
   630  0006                     	;# 
   631  0007                     	;# 
   632  0008                     	;# 
   633  0009                     	;# 
   634  000A                     	;# 
   635  000B                     	;# 
   636  000C                     	;# 
   637  000D                     	;# 
   638  000E                     	;# 
   639  0011                     	;# 
   640  0012                     	;# 
   641  0013                     	;# 
   642  0014                     	;# 
   643  0015                     	;# 
   644  0016                     	;# 
   645  0016                     	;# 
   646  0017                     	;# 
   647  0018                     	;# 
   648  0019                     	;# 
   649  001A                     	;# 
   650  001B                     	;# 
   651  001C                     	;# 
   652  001E                     	;# 
   653  001F                     	;# 
   654  008C                     	;# 
   655  008D                     	;# 
   656  008E                     	;# 
   657  0091                     	;# 
   658  0092                     	;# 
   659  0093                     	;# 
   660  0094                     	;# 
   661  0095                     	;# 
   662  0096                     	;# 
   663  0097                     	;# 
   664  0098                     	;# 
   665  0099                     	;# 
   666  009A                     	;# 
   667  009B                     	;# 
   668  009B                     	;# 
   669  009C                     	;# 
   670  009D                     	;# 
   671  009E                     	;# 
   672  010C                     	;# 
   673  010D                     	;# 
   674  010E                     	;# 
   675  0111                     	;# 
   676  0112                     	;# 
   677  0113                     	;# 
   678  0114                     	;# 
   679  0115                     	;# 
   680  0116                     	;# 
   681  0117                     	;# 
   682  0118                     	;# 
   683  0119                     	;# 
   684  011A                     	;# 
   685  011B                     	;# 
   686  011D                     	;# 
   687  011E                     	;# 
   688  018C                     	;# 
   689  018D                     	;# 
   690  018E                     	;# 
   691  0191                     	;# 
   692  0191                     	;# 
   693  0192                     	;# 
   694  0193                     	;# 
   695  0193                     	;# 
   696  0193                     	;# 
   697  0194                     	;# 
   698  0195                     	;# 
   699  0196                     	;# 
   700  0199                     	;# 
   701  019A                     	;# 
   702  019B                     	;# 
   703  019B                     	;# 
   704  019C                     	;# 
   705  019D                     	;# 
   706  019E                     	;# 
   707  019F                     	;# 
   708  020C                     	;# 
   709  020D                     	;# 
   710  020E                     	;# 
   711  0211                     	;# 
   712  0211                     	;# 
   713  0212                     	;# 
   714  0212                     	;# 
   715  0213                     	;# 
   716  0213                     	;# 
   717  0214                     	;# 
   718  0214                     	;# 
   719  0215                     	;# 
   720  0215                     	;# 
   721  0215                     	;# 
   722  0216                     	;# 
   723  0216                     	;# 
   724  0217                     	;# 
   725  0217                     	;# 
   726  0219                     	;# 
   727  021A                     	;# 
   728  021B                     	;# 
   729  021C                     	;# 
   730  021D                     	;# 
   731  021E                     	;# 
   732  021F                     	;# 
   733  0291                     	;# 
   734  0291                     	;# 
   735  0292                     	;# 
   736  0293                     	;# 
   737  0294                     	;# 
   738  0295                     	;# 
   739  0295                     	;# 
   740  0296                     	;# 
   741  0298                     	;# 
   742  0298                     	;# 
   743  0299                     	;# 
   744  029A                     	;# 
   745  029B                     	;# 
   746  029C                     	;# 
   747  029D                     	;# 
   748  029E                     	;# 
   749  0311                     	;# 
   750  0311                     	;# 
   751  0312                     	;# 
   752  0313                     	;# 
   753  0318                     	;# 
   754  0318                     	;# 
   755  0319                     	;# 
   756  031A                     	;# 
   757  038C                     	;# 
   758  038D                     	;# 
   759  038E                     	;# 
   760  0391                     	;# 
   761  0392                     	;# 
   762  0393                     	;# 
   763  0394                     	;# 
   764  0395                     	;# 
   765  0396                     	;# 
   766  039A                     	;# 
   767  039C                     	;# 
   768  039D                     	;# 
   769  039E                     	;# 
   770  039F                     	;# 
   771  0415                     	;# 
   772  0416                     	;# 
   773  0417                     	;# 
   774  041C                     	;# 
   775  041D                     	;# 
   776  041E                     	;# 
   777  0FE4                     	;# 
   778  0FE5                     	;# 
   779  0FE6                     	;# 
   780  0FE7                     	;# 
   781  0FE8                     	;# 
   782  0FE9                     	;# 
   783  0FEA                     	;# 
   784  0FEB                     	;# 
   785  0FED                     	;# 
   786  0FEE                     	;# 
   787  0FEF                     	;# 
   788  0000                     	;# 
   789  0001                     	;# 
   790  0002                     	;# 
   791  0003                     	;# 
   792  0004                     	;# 
   793  0005                     	;# 
   794  0006                     	;# 
   795  0007                     	;# 
   796  0008                     	;# 
   797  0009                     	;# 
   798  000A                     	;# 
   799  000B                     	;# 
   800  000C                     	;# 
   801  000D                     	;# 
   802  000E                     	;# 
   803  0011                     	;# 
   804  0012                     	;# 
   805  0013                     	;# 
   806  0014                     	;# 
   807  0015                     	;# 
   808  0016                     	;# 
   809  0016                     	;# 
   810  0017                     	;# 
   811  0018                     	;# 
   812  0019                     	;# 
   813  001A                     	;# 
   814  001B                     	;# 
   815  001C                     	;# 
   816  001E                     	;# 
   817  001F                     	;# 
   818  008C                     	;# 
   819  008D                     	;# 
   820  008E                     	;# 
   821  0091                     	;# 
   822  0092                     	;# 
   823  0093                     	;# 
   824  0094                     	;# 
   825  0095                     	;# 
   826  0096                     	;# 
   827  0097                     	;# 
   828  0098                     	;# 
   829  0099                     	;# 
   830  009A                     	;# 
   831  009B                     	;# 
   832  009B                     	;# 
   833  009C                     	;# 
   834  009D                     	;# 
   835  009E                     	;# 
   836  010C                     	;# 
   837  010D                     	;# 
   838  010E                     	;# 
   839  0111                     	;# 
   840  0112                     	;# 
   841  0113                     	;# 
   842  0114                     	;# 
   843  0115                     	;# 
   844  0116                     	;# 
   845  0117                     	;# 
   846  0118                     	;# 
   847  0119                     	;# 
   848  011A                     	;# 
   849  011B                     	;# 
   850  011D                     	;# 
   851  011E                     	;# 
   852  018C                     	;# 
   853  018D                     	;# 
   854  018E                     	;# 
   855  0191                     	;# 
   856  0191                     	;# 
   857  0192                     	;# 
   858  0193                     	;# 
   859  0193                     	;# 
   860  0193                     	;# 
   861  0194                     	;# 
   862  0195                     	;# 
   863  0196                     	;# 
   864  0199                     	;# 
   865  019A                     	;# 
   866  019B                     	;# 
   867  019B                     	;# 
   868  019C                     	;# 
   869  019D                     	;# 
   870  019E                     	;# 
   871  019F                     	;# 
   872  020C                     	;# 
   873  020D                     	;# 
   874  020E                     	;# 
   875  0211                     	;# 
   876  0211                     	;# 
   877  0212                     	;# 
   878  0212                     	;# 
   879  0213                     	;# 
   880  0213                     	;# 
   881  0214                     	;# 
   882  0214                     	;# 
   883  0215                     	;# 
   884  0215                     	;# 
   885  0215                     	;# 
   886  0216                     	;# 
   887  0216                     	;# 
   888  0217                     	;# 
   889  0217                     	;# 
   890  0219                     	;# 
   891  021A                     	;# 
   892  021B                     	;# 
   893  021C                     	;# 
   894  021D                     	;# 
   895  021E                     	;# 
   896  021F                     	;# 
   897  0291                     	;# 
   898  0291                     	;# 
   899  0292                     	;# 
   900  0293                     	;# 
   901  0294                     	;# 
   902  0295                     	;# 
   903  0295                     	;# 
   904  0296                     	;# 
   905  0298                     	;# 
   906  0298                     	;# 
   907  0299                     	;# 
   908  029A                     	;# 
   909  029B                     	;# 
   910  029C                     	;# 
   911  029D                     	;# 
   912  029E                     	;# 
   913  0311                     	;# 
   914  0311                     	;# 
   915  0312                     	;# 
   916  0313                     	;# 
   917  0318                     	;# 
   918  0318                     	;# 
   919  0319                     	;# 
   920  031A                     	;# 
   921  038C                     	;# 
   922  038D                     	;# 
   923  038E                     	;# 
   924  0391                     	;# 
   925  0392                     	;# 
   926  0393                     	;# 
   927  0394                     	;# 
   928  0395                     	;# 
   929  0396                     	;# 
   930  039A                     	;# 
   931  039C                     	;# 
   932  039D                     	;# 
   933  039E                     	;# 
   934  039F                     	;# 
   935  0415                     	;# 
   936  0416                     	;# 
   937  0417                     	;# 
   938  041C                     	;# 
   939  041D                     	;# 
   940  041E                     	;# 
   941  0FE4                     	;# 
   942  0FE5                     	;# 
   943  0FE6                     	;# 
   944  0FE7                     	;# 
   945  0FE8                     	;# 
   946  0FE9                     	;# 
   947  0FEA                     	;# 
   948  0FEB                     	;# 
   949  0FED                     	;# 
   950  0FEE                     	;# 
   951  0FEF                     	;# 
   952  0000                     	;# 
   953  0001                     	;# 
   954  0002                     	;# 
   955  0003                     	;# 
   956  0004                     	;# 
   957  0005                     	;# 
   958  0006                     	;# 
   959  0007                     	;# 
   960  0008                     	;# 
   961  0009                     	;# 
   962  000A                     	;# 
   963  000B                     	;# 
   964  000C                     	;# 
   965  000D                     	;# 
   966  000E                     	;# 
   967  0011                     	;# 
   968  0012                     	;# 
   969  0013                     	;# 
   970  0014                     	;# 
   971  0015                     	;# 
   972  0016                     	;# 
   973  0016                     	;# 
   974  0017                     	;# 
   975  0018                     	;# 
   976  0019                     	;# 
   977  001A                     	;# 
   978  001B                     	;# 
   979  001C                     	;# 
   980  001E                     	;# 
   981  001F                     	;# 
   982  008C                     	;# 
   983  008D                     	;# 
   984  008E                     	;# 
   985  0091                     	;# 
   986  0092                     	;# 
   987  0093                     	;# 
   988  0094                     	;# 
   989  0095                     	;# 
   990  0096                     	;# 
   991  0097                     	;# 
   992  0098                     	;# 
   993  0099                     	;# 
   994  009A                     	;# 
   995  009B                     	;# 
   996  009B                     	;# 
   997  009C                     	;# 
   998  009D                     	;# 
   999  009E                     	;# 
  1000  010C                     	;# 
  1001  010D                     	;# 
  1002  010E                     	;# 
  1003  0111                     	;# 
  1004  0112                     	;# 
  1005  0113                     	;# 
  1006  0114                     	;# 
  1007  0115                     	;# 
  1008  0116                     	;# 
  1009  0117                     	;# 
  1010  0118                     	;# 
  1011  0119                     	;# 
  1012  011A                     	;# 
  1013  011B                     	;# 
  1014  011D                     	;# 
  1015  011E                     	;# 
  1016  018C                     	;# 
  1017  018D                     	;# 
  1018  018E                     	;# 
  1019  0191                     	;# 
  1020  0191                     	;# 
  1021  0192                     	;# 
  1022  0193                     	;# 
  1023  0193                     	;# 
  1024  0193                     	;# 
  1025  0194                     	;# 
  1026  0195                     	;# 
  1027  0196                     	;# 
  1028  0199                     	;# 
  1029  019A                     	;# 
  1030  019B                     	;# 
  1031  019B                     	;# 
  1032  019C                     	;# 
  1033  019D                     	;# 
  1034  019E                     	;# 
  1035  019F                     	;# 
  1036  020C                     	;# 
  1037  020D                     	;# 
  1038  020E                     	;# 
  1039  0211                     	;# 
  1040  0211                     	;# 
  1041  0212                     	;# 
  1042  0212                     	;# 
  1043  0213                     	;# 
  1044  0213                     	;# 
  1045  0214                     	;# 
  1046  0214                     	;# 
  1047  0215                     	;# 
  1048  0215                     	;# 
  1049  0215                     	;# 
  1050  0216                     	;# 
  1051  0216                     	;# 
  1052  0217                     	;# 
  1053  0217                     	;# 
  1054  0219                     	;# 
  1055  021A                     	;# 
  1056  021B                     	;# 
  1057  021C                     	;# 
  1058  021D                     	;# 
  1059  021E                     	;# 
  1060  021F                     	;# 
  1061  0291                     	;# 
  1062  0291                     	;# 
  1063  0292                     	;# 
  1064  0293                     	;# 
  1065  0294                     	;# 
  1066  0295                     	;# 
  1067  0295                     	;# 
  1068  0296                     	;# 
  1069  0298                     	;# 
  1070  0298                     	;# 
  1071  0299                     	;# 
  1072  029A                     	;# 
  1073  029B                     	;# 
  1074  029C                     	;# 
  1075  029D                     	;# 
  1076  029E                     	;# 
  1077  0311                     	;# 
  1078  0311                     	;# 
  1079  0312                     	;# 
  1080  0313                     	;# 
  1081  0318                     	;# 
  1082  0318                     	;# 
  1083  0319                     	;# 
  1084  031A                     	;# 
  1085  038C                     	;# 
  1086  038D                     	;# 
  1087  038E                     	;# 
  1088  0391                     	;# 
  1089  0392                     	;# 
  1090  0393                     	;# 
  1091  0394                     	;# 
  1092  0395                     	;# 
  1093  0396                     	;# 
  1094  039A                     	;# 
  1095  039C                     	;# 
  1096  039D                     	;# 
  1097  039E                     	;# 
  1098  039F                     	;# 
  1099  0415                     	;# 
  1100  0416                     	;# 
  1101  0417                     	;# 
  1102  041C                     	;# 
  1103  041D                     	;# 
  1104  041E                     	;# 
  1105  0FE4                     	;# 
  1106  0FE5                     	;# 
  1107  0FE6                     	;# 
  1108  0FE7                     	;# 
  1109  0FE8                     	;# 
  1110  0FE9                     	;# 
  1111  0FEA                     	;# 
  1112  0FEB                     	;# 
  1113  0FED                     	;# 
  1114  0FEE                     	;# 
  1115  0FEF                     	;# 
  1116  0000                     	;# 
  1117  0001                     	;# 
  1118  0002                     	;# 
  1119  0003                     	;# 
  1120  0004                     	;# 
  1121  0005                     	;# 
  1122  0006                     	;# 
  1123  0007                     	;# 
  1124  0008                     	;# 
  1125  0009                     	;# 
  1126  000A                     	;# 
  1127  000B                     	;# 
  1128  000C                     	;# 
  1129  000D                     	;# 
  1130  000E                     	;# 
  1131  0011                     	;# 
  1132  0012                     	;# 
  1133  0013                     	;# 
  1134  0014                     	;# 
  1135  0015                     	;# 
  1136  0016                     	;# 
  1137  0016                     	;# 
  1138  0017                     	;# 
  1139  0018                     	;# 
  1140  0019                     	;# 
  1141  001A                     	;# 
  1142  001B                     	;# 
  1143  001C                     	;# 
  1144  001E                     	;# 
  1145  001F                     	;# 
  1146  008C                     	;# 
  1147  008D                     	;# 
  1148  008E                     	;# 
  1149  0091                     	;# 
  1150  0092                     	;# 
  1151  0093                     	;# 
  1152  0094                     	;# 
  1153  0095                     	;# 
  1154  0096                     	;# 
  1155  0097                     	;# 
  1156  0098                     	;# 
  1157  0099                     	;# 
  1158  009A                     	;# 
  1159  009B                     	;# 
  1160  009B                     	;# 
  1161  009C                     	;# 
  1162  009D                     	;# 
  1163  009E                     	;# 
  1164  010C                     	;# 
  1165  010D                     	;# 
  1166  010E                     	;# 
  1167  0111                     	;# 
  1168  0112                     	;# 
  1169  0113                     	;# 
  1170  0114                     	;# 
  1171  0115                     	;# 
  1172  0116                     	;# 
  1173  0117                     	;# 
  1174  0118                     	;# 
  1175  0119                     	;# 
  1176  011A                     	;# 
  1177  011B                     	;# 
  1178  011D                     	;# 
  1179  011E                     	;# 
  1180  018C                     	;# 
  1181  018D                     	;# 
  1182  018E                     	;# 
  1183  0191                     	;# 
  1184  0191                     	;# 
  1185  0192                     	;# 
  1186  0193                     	;# 
  1187  0193                     	;# 
  1188  0193                     	;# 
  1189  0194                     	;# 
  1190  0195                     	;# 
  1191  0196                     	;# 
  1192  0199                     	;# 
  1193  019A                     	;# 
  1194  019B                     	;# 
  1195  019B                     	;# 
  1196  019C                     	;# 
  1197  019D                     	;# 
  1198  019E                     	;# 
  1199  019F                     	;# 
  1200  020C                     	;# 
  1201  020D                     	;# 
  1202  020E                     	;# 
  1203  0211                     	;# 
  1204  0211                     	;# 
  1205  0212                     	;# 
  1206  0212                     	;# 
  1207  0213                     	;# 
  1208  0213                     	;# 
  1209  0214                     	;# 
  1210  0214                     	;# 
  1211  0215                     	;# 
  1212  0215                     	;# 
  1213  0215                     	;# 
  1214  0216                     	;# 
  1215  0216                     	;# 
  1216  0217                     	;# 
  1217  0217                     	;# 
  1218  0219                     	;# 
  1219  021A                     	;# 
  1220  021B                     	;# 
  1221  021C                     	;# 
  1222  021D                     	;# 
  1223  021E                     	;# 
  1224  021F                     	;# 
  1225  0291                     	;# 
  1226  0291                     	;# 
  1227  0292                     	;# 
  1228  0293                     	;# 
  1229  0294                     	;# 
  1230  0295                     	;# 
  1231  0295                     	;# 
  1232  0296                     	;# 
  1233  0298                     	;# 
  1234  0298                     	;# 
  1235  0299                     	;# 
  1236  029A                     	;# 
  1237  029B                     	;# 
  1238  029C                     	;# 
  1239  029D                     	;# 
  1240  029E                     	;# 
  1241  0311                     	;# 
  1242  0311                     	;# 
  1243  0312                     	;# 
  1244  0313                     	;# 
  1245  0318                     	;# 
  1246  0318                     	;# 
  1247  0319                     	;# 
  1248  031A                     	;# 
  1249  038C                     	;# 
  1250  038D                     	;# 
  1251  038E                     	;# 
  1252  0391                     	;# 
  1253  0392                     	;# 
  1254  0393                     	;# 
  1255  0394                     	;# 
  1256  0395                     	;# 
  1257  0396                     	;# 
  1258  039A                     	;# 
  1259  039C                     	;# 
  1260  039D                     	;# 
  1261  039E                     	;# 
  1262  039F                     	;# 
  1263  0415                     	;# 
  1264  0416                     	;# 
  1265  0417                     	;# 
  1266  041C                     	;# 
  1267  041D                     	;# 
  1268  041E                     	;# 
  1269  0FE4                     	;# 
  1270  0FE5                     	;# 
  1271  0FE6                     	;# 
  1272  0FE7                     	;# 
  1273  0FE8                     	;# 
  1274  0FE9                     	;# 
  1275  0FEA                     	;# 
  1276  0FEB                     	;# 
  1277  0FED                     	;# 
  1278  0FEE                     	;# 
  1279  0FEF                     	;# 
  1280  0000                     	;# 
  1281  0001                     	;# 
  1282  0002                     	;# 
  1283  0003                     	;# 
  1284  0004                     	;# 
  1285  0005                     	;# 
  1286  0006                     	;# 
  1287  0007                     	;# 
  1288  0008                     	;# 
  1289  0009                     	;# 
  1290  000A                     	;# 
  1291  000B                     	;# 
  1292  000C                     	;# 
  1293  000D                     	;# 
  1294  000E                     	;# 
  1295  0011                     	;# 
  1296  0012                     	;# 
  1297  0013                     	;# 
  1298  0014                     	;# 
  1299  0015                     	;# 
  1300  0016                     	;# 
  1301  0016                     	;# 
  1302  0017                     	;# 
  1303  0018                     	;# 
  1304  0019                     	;# 
  1305  001A                     	;# 
  1306  001B                     	;# 
  1307  001C                     	;# 
  1308  001E                     	;# 
  1309  001F                     	;# 
  1310  008C                     	;# 
  1311  008D                     	;# 
  1312  008E                     	;# 
  1313  0091                     	;# 
  1314  0092                     	;# 
  1315  0093                     	;# 
  1316  0094                     	;# 
  1317  0095                     	;# 
  1318  0096                     	;# 
  1319  0097                     	;# 
  1320  0098                     	;# 
  1321  0099                     	;# 
  1322  009A                     	;# 
  1323  009B                     	;# 
  1324  009B                     	;# 
  1325  009C                     	;# 
  1326  009D                     	;# 
  1327  009E                     	;# 
  1328  010C                     	;# 
  1329  010D                     	;# 
  1330  010E                     	;# 
  1331  0111                     	;# 
  1332  0112                     	;# 
  1333  0113                     	;# 
  1334  0114                     	;# 
  1335  0115                     	;# 
  1336  0116                     	;# 
  1337  0117                     	;# 
  1338  0118                     	;# 
  1339  0119                     	;# 
  1340  011A                     	;# 
  1341  011B                     	;# 
  1342  011D                     	;# 
  1343  011E                     	;# 
  1344  018C                     	;# 
  1345  018D                     	;# 
  1346  018E                     	;# 
  1347  0191                     	;# 
  1348  0191                     	;# 
  1349  0192                     	;# 
  1350  0193                     	;# 
  1351  0193                     	;# 
  1352  0193                     	;# 
  1353  0194                     	;# 
  1354  0195                     	;# 
  1355  0196                     	;# 
  1356  0199                     	;# 
  1357  019A                     	;# 
  1358  019B                     	;# 
  1359  019B                     	;# 
  1360  019C                     	;# 
  1361  019D                     	;# 
  1362  019E                     	;# 
  1363  019F                     	;# 
  1364  020C                     	;# 
  1365  020D                     	;# 
  1366  020E                     	;# 
  1367  0211                     	;# 
  1368  0211                     	;# 
  1369  0212                     	;# 
  1370  0212                     	;# 
  1371  0213                     	;# 
  1372  0213                     	;# 
  1373  0214                     	;# 
  1374  0214                     	;# 
  1375  0215                     	;# 
  1376  0215                     	;# 
  1377  0215                     	;# 
  1378  0216                     	;# 
  1379  0216                     	;# 
  1380  0217                     	;# 
  1381  0217                     	;# 
  1382  0219                     	;# 
  1383  021A                     	;# 
  1384  021B                     	;# 
  1385  021C                     	;# 
  1386  021D                     	;# 
  1387  021E                     	;# 
  1388  021F                     	;# 
  1389  0291                     	;# 
  1390  0291                     	;# 
  1391  0292                     	;# 
  1392  0293                     	;# 
  1393  0294                     	;# 
  1394  0295                     	;# 
  1395  0295                     	;# 
  1396  0296                     	;# 
  1397  0298                     	;# 
  1398  0298                     	;# 
  1399  0299                     	;# 
  1400  029A                     	;# 
  1401  029B                     	;# 
  1402  029C                     	;# 
  1403  029D                     	;# 
  1404  029E                     	;# 
  1405  0311                     	;# 
  1406  0311                     	;# 
  1407  0312                     	;# 
  1408  0313                     	;# 
  1409  0318                     	;# 
  1410  0318                     	;# 
  1411  0319                     	;# 
  1412  031A                     	;# 
  1413  038C                     	;# 
  1414  038D                     	;# 
  1415  038E                     	;# 
  1416  0391                     	;# 
  1417  0392                     	;# 
  1418  0393                     	;# 
  1419  0394                     	;# 
  1420  0395                     	;# 
  1421  0396                     	;# 
  1422  039A                     	;# 
  1423  039C                     	;# 
  1424  039D                     	;# 
  1425  039E                     	;# 
  1426  039F                     	;# 
  1427  0415                     	;# 
  1428  0416                     	;# 
  1429  0417                     	;# 
  1430  041C                     	;# 
  1431  041D                     	;# 
  1432  041E                     	;# 
  1433  0FE4                     	;# 
  1434  0FE5                     	;# 
  1435  0FE6                     	;# 
  1436  0FE7                     	;# 
  1437  0FE8                     	;# 
  1438  0FE9                     	;# 
  1439  0FEA                     	;# 
  1440  0FEB                     	;# 
  1441  0FED                     	;# 
  1442  0FEE                     	;# 
  1443  0FEF                     	;# 
  1444  0000                     	;# 
  1445  0001                     	;# 
  1446  0002                     	;# 
  1447  0003                     	;# 
  1448  0004                     	;# 
  1449  0005                     	;# 
  1450  0006                     	;# 
  1451  0007                     	;# 
  1452  0008                     	;# 
  1453  0009                     	;# 
  1454  000A                     	;# 
  1455  000B                     	;# 
  1456  000C                     	;# 
  1457  000D                     	;# 
  1458  000E                     	;# 
  1459  0011                     	;# 
  1460  0012                     	;# 
  1461  0013                     	;# 
  1462  0014                     	;# 
  1463  0015                     	;# 
  1464  0016                     	;# 
  1465  0016                     	;# 
  1466  0017                     	;# 
  1467  0018                     	;# 
  1468  0019                     	;# 
  1469  001A                     	;# 
  1470  001B                     	;# 
  1471  001C                     	;# 
  1472  001E                     	;# 
  1473  001F                     	;# 
  1474  008C                     	;# 
  1475  008D                     	;# 
  1476  008E                     	;# 
  1477  0091                     	;# 
  1478  0092                     	;# 
  1479  0093                     	;# 
  1480  0094                     	;# 
  1481  0095                     	;# 
  1482  0096                     	;# 
  1483  0097                     	;# 
  1484  0098                     	;# 
  1485  0099                     	;# 
  1486  009A                     	;# 
  1487  009B                     	;# 
  1488  009B                     	;# 
  1489  009C                     	;# 
  1490  009D                     	;# 
  1491  009E                     	;# 
  1492  010C                     	;# 
  1493  010D                     	;# 
  1494  010E                     	;# 
  1495  0111                     	;# 
  1496  0112                     	;# 
  1497  0113                     	;# 
  1498  0114                     	;# 
  1499  0115                     	;# 
  1500  0116                     	;# 
  1501  0117                     	;# 
  1502  0118                     	;# 
  1503  0119                     	;# 
  1504  011A                     	;# 
  1505  011B                     	;# 
  1506  011D                     	;# 
  1507  011E                     	;# 
  1508  018C                     	;# 
  1509  018D                     	;# 
  1510  018E                     	;# 
  1511  0191                     	;# 
  1512  0191                     	;# 
  1513  0192                     	;# 
  1514  0193                     	;# 
  1515  0193                     	;# 
  1516  0193                     	;# 
  1517  0194                     	;# 
  1518  0195                     	;# 
  1519  0196                     	;# 
  1520  0199                     	;# 
  1521  019A                     	;# 
  1522  019B                     	;# 
  1523  019B                     	;# 
  1524  019C                     	;# 
  1525  019D                     	;# 
  1526  019E                     	;# 
  1527  019F                     	;# 
  1528  020C                     	;# 
  1529  020D                     	;# 
  1530  020E                     	;# 
  1531  0211                     	;# 
  1532  0211                     	;# 
  1533  0212                     	;# 
  1534  0212                     	;# 
  1535  0213                     	;# 
  1536  0213                     	;# 
  1537  0214                     	;# 
  1538  0214                     	;# 
  1539  0215                     	;# 
  1540  0215                     	;# 
  1541  0215                     	;# 
  1542  0216                     	;# 
  1543  0216                     	;# 
  1544  0217                     	;# 
  1545  0217                     	;# 
  1546  0219                     	;# 
  1547  021A                     	;# 
  1548  021B                     	;# 
  1549  021C                     	;# 
  1550  021D                     	;# 
  1551  021E                     	;# 
  1552  021F                     	;# 
  1553  0291                     	;# 
  1554  0291                     	;# 
  1555  0292                     	;# 
  1556  0293                     	;# 
  1557  0294                     	;# 
  1558  0295                     	;# 
  1559  0295                     	;# 
  1560  0296                     	;# 
  1561  0298                     	;# 
  1562  0298                     	;# 
  1563  0299                     	;# 
  1564  029A                     	;# 
  1565  029B                     	;# 
  1566  029C                     	;# 
  1567  029D                     	;# 
  1568  029E                     	;# 
  1569  0311                     	;# 
  1570  0311                     	;# 
  1571  0312                     	;# 
  1572  0313                     	;# 
  1573  0318                     	;# 
  1574  0318                     	;# 
  1575  0319                     	;# 
  1576  031A                     	;# 
  1577  038C                     	;# 
  1578  038D                     	;# 
  1579  038E                     	;# 
  1580  0391                     	;# 
  1581  0392                     	;# 
  1582  0393                     	;# 
  1583  0394                     	;# 
  1584  0395                     	;# 
  1585  0396                     	;# 
  1586  039A                     	;# 
  1587  039C                     	;# 
  1588  039D                     	;# 
  1589  039E                     	;# 
  1590  039F                     	;# 
  1591  0415                     	;# 
  1592  0416                     	;# 
  1593  0417                     	;# 
  1594  041C                     	;# 
  1595  041D                     	;# 
  1596  041E                     	;# 
  1597  0FE4                     	;# 
  1598  0FE5                     	;# 
  1599  0FE6                     	;# 
  1600  0FE7                     	;# 
  1601  0FE8                     	;# 
  1602  0FE9                     	;# 
  1603  0FEA                     	;# 
  1604  0FEB                     	;# 
  1605  0FED                     	;# 
  1606  0FEE                     	;# 
  1607  0FEF                     	;# 
  1608  0000                     	;# 
  1609  0001                     	;# 
  1610  0002                     	;# 
  1611  0003                     	;# 
  1612  0004                     	;# 
  1613  0005                     	;# 
  1614  0006                     	;# 
  1615  0007                     	;# 
  1616  0008                     	;# 
  1617  0009                     	;# 
  1618  000A                     	;# 
  1619  000B                     	;# 
  1620  000C                     	;# 
  1621  000D                     	;# 
  1622  000E                     	;# 
  1623  0011                     	;# 
  1624  0012                     	;# 
  1625  0013                     	;# 
  1626  0014                     	;# 
  1627  0015                     	;# 
  1628  0016                     	;# 
  1629  0016                     	;# 
  1630  0017                     	;# 
  1631  0018                     	;# 
  1632  0019                     	;# 
  1633  001A                     	;# 
  1634  001B                     	;# 
  1635  001C                     	;# 
  1636  001E                     	;# 
  1637  001F                     	;# 
  1638  008C                     	;# 
  1639  008D                     	;# 
  1640  008E                     	;# 
  1641  0091                     	;# 
  1642  0092                     	;# 
  1643  0093                     	;# 
  1644  0094                     	;# 
  1645  0095                     	;# 
  1646  0096                     	;# 
  1647  0097                     	;# 
  1648  0098                     	;# 
  1649  0099                     	;# 
  1650  009A                     	;# 
  1651  009B                     	;# 
  1652  009B                     	;# 
  1653  009C                     	;# 
  1654  009D                     	;# 
  1655  009E                     	;# 
  1656  010C                     	;# 
  1657  010D                     	;# 
  1658  010E                     	;# 
  1659  0111                     	;# 
  1660  0112                     	;# 
  1661  0113                     	;# 
  1662  0114                     	;# 
  1663  0115                     	;# 
  1664  0116                     	;# 
  1665  0117                     	;# 
  1666  0118                     	;# 
  1667  0119                     	;# 
  1668  011A                     	;# 
  1669  011B                     	;# 
  1670  011D                     	;# 
  1671  011E                     	;# 
  1672  018C                     	;# 
  1673  018D                     	;# 
  1674  018E                     	;# 
  1675  0191                     	;# 
  1676  0191                     	;# 
  1677  0192                     	;# 
  1678  0193                     	;# 
  1679  0193                     	;# 
  1680  0193                     	;# 
  1681  0194                     	;# 
  1682  0195                     	;# 
  1683  0196                     	;# 
  1684  0199                     	;# 
  1685  019A                     	;# 
  1686  019B                     	;# 
  1687  019B                     	;# 
  1688  019C                     	;# 
  1689  019D                     	;# 
  1690  019E                     	;# 
  1691  019F                     	;# 
  1692  020C                     	;# 
  1693  020D                     	;# 
  1694  020E                     	;# 
  1695  0211                     	;# 
  1696  0211                     	;# 
  1697  0212                     	;# 
  1698  0212                     	;# 
  1699  0213                     	;# 
  1700  0213                     	;# 
  1701  0214                     	;# 
  1702  0214                     	;# 
  1703  0215                     	;# 
  1704  0215                     	;# 
  1705  0215                     	;# 
  1706  0216                     	;# 
  1707  0216                     	;# 
  1708  0217                     	;# 
  1709  0217                     	;# 
  1710  0219                     	;# 
  1711  021A                     	;# 
  1712  021B                     	;# 
  1713  021C                     	;# 
  1714  021D                     	;# 
  1715  021E                     	;# 
  1716  021F                     	;# 
  1717  0291                     	;# 
  1718  0291                     	;# 
  1719  0292                     	;# 
  1720  0293                     	;# 
  1721  0294                     	;# 
  1722  0295                     	;# 
  1723  0295                     	;# 
  1724  0296                     	;# 
  1725  0298                     	;# 
  1726  0298                     	;# 
  1727  0299                     	;# 
  1728  029A                     	;# 
  1729  029B                     	;# 
  1730  029C                     	;# 
  1731  029D                     	;# 
  1732  029E                     	;# 
  1733  0311                     	;# 
  1734  0311                     	;# 
  1735  0312                     	;# 
  1736  0313                     	;# 
  1737  0318                     	;# 
  1738  0318                     	;# 
  1739  0319                     	;# 
  1740  031A                     	;# 
  1741  038C                     	;# 
  1742  038D                     	;# 
  1743  038E                     	;# 
  1744  0391                     	;# 
  1745  0392                     	;# 
  1746  0393                     	;# 
  1747  0394                     	;# 
  1748  0395                     	;# 
  1749  0396                     	;# 
  1750  039A                     	;# 
  1751  039C                     	;# 
  1752  039D                     	;# 
  1753  039E                     	;# 
  1754  039F                     	;# 
  1755  0415                     	;# 
  1756  0416                     	;# 
  1757  0417                     	;# 
  1758  041C                     	;# 
  1759  041D                     	;# 
  1760  041E                     	;# 
  1761  0FE4                     	;# 
  1762  0FE5                     	;# 
  1763  0FE6                     	;# 
  1764  0FE7                     	;# 
  1765  0FE8                     	;# 
  1766  0FE9                     	;# 
  1767  0FEA                     	;# 
  1768  0FEB                     	;# 
  1769  0FED                     	;# 
  1770  0FEE                     	;# 
  1771  0FEF                     	;_cmd_buf
  1772                           
  1773                           	psect	idataBANK1
  1774  0002                     __pidataBANK1:	
  1775                           
  1776                           ;initializer for put_cmd@idx
  1777  0002  34FF               	retlw	-1
  1778                           
  1779                           ;initializer for _BACKPLANE_SLAVE_ADDRESS
  1780  0003  3401               	retlw	1
  1781                           
  1782                           	psect	idataBANK2
  1783  1FD2                     __pidataBANK2:	
  1784                           
  1785                           ;initializer for _tmr_scaler
  1786  1FD2  3401               	retlw	1
  1787                           
  1788                           ;initializer for dev_map_iterator@start
  1789  1FD3  3401               	retlw	1
  1790                           
  1791                           ;initializer for _type_no_data
  1792  1FD4  3406               	retlw	6
  1793                           
  1794                           	psect	stringtext
  1795  1000                     __pstringtext:	
  1796  1000                     _dpowers:	
  1797  1000  3401               	retlw	1
  1798  1001  3400               	retlw	0
  1799  1002  340A               	retlw	10
  1800  1003  3400               	retlw	0
  1801  1004  3464               	retlw	100
  1802  1005  3400               	retlw	0
  1803  1006  34E8               	retlw	232
  1804  1007  3403               	retlw	3
  1805  1008  3410               	retlw	16
  1806  1009  3427               	retlw	39
  1807  100A                     __end_of_dpowers:	
  1808  100A                     _MAX_Y:	
  1809  100A  3404               	retlw	4
  1810  100B                     __end_of_MAX_Y:	
  1811  0015                     _TMR0	set	21
  1812  0012                     _PIR2bits	set	18
  1813  000B                     _INTCONbits	set	11
  1814  0011                     _PIR1bits	set	17
  1815  005A                     _TMR0IF	set	90
  1816  0095                     _OPTION_REG	set	149
  1817  0097                     _WDTCON	set	151
  1818  0098                     _OSCTUNE	set	152
  1819  0099                     _OSCCON	set	153
  1820  0092                     _PIE2bits	set	146
  1821  0095                     _OPTION_REGbits	set	149
  1822  008E                     _TRISC	set	142
  1823  008D                     _TRISB	set	141
  1824  008C                     _TRISA	set	140
  1825  0091                     _PIE1bits	set	145
  1826  04D6                     _PLLR	set	1238
  1827  010E                     _LATCbits	set	270
  1828  011D                     _APFCON0	set	285
  1829  011E                     _APFCON1	set	286
  1830  010E                     _LATC	set	270
  1831  010D                     _LATB	set	269
  1832  010C                     _LATA	set	268
  1833  018C                     _ANSELA	set	396
  1834  018D                     _ANSELB	set	397
  1835  018E                     _ANSELC	set	398
  1836  0199                     _RCREG	set	409
  1837  019D                     _RCSTAbits	set	413
  1838  019A                     _TXREG	set	410
  1839  019C                     _SPBRGH	set	412
  1840  019B                     _SPBRGL	set	411
  1841  019E                     _TXSTA	set	414
  1842  019D                     _RCSTA	set	413
  1843  019F                     _BAUDCON	set	415
  1844  0196                     _EECON2	set	406
  1845  0193                     _EEDATL	set	403
  1846  0194                     _EEDATH	set	404
  1847  0195                     _EECON1bits	set	405
  1848  0192                     _EEADRH	set	402
  1849  0191                     _EEADRL	set	401
  1850  020E                     _WPUC	set	526
  1851  020C                     _WPUA	set	524
  1852  020D                     _WPUB	set	525
  1853  0211                     _SSP1BUF	set	529
  1854  0216                     _SSP1CON2bits	set	534
  1855  0215                     _SSP1CON1bits	set	533
  1856  0212                     _SSP1ADD	set	530
  1857  0217                     _SSP1CON3	set	535
  1858  0215                     _SSP1CON1	set	533
  1859  0214                     _SSP1STAT	set	532
  1860  100B                     STR_25:	
  1861  100B  3421               	retlw	33	;'!'
  1862  100C  343A               	retlw	58	;':'
  1863  100D  3457               	retlw	87	;'W'
  1864  100E  3453               	retlw	83	;'S'
  1865  100F  3443               	retlw	67	;'C'
  1866  1010  343A               	retlw	58	;':'
  1867  1011  3450               	retlw	80	;'P'
  1868  1012  344F               	retlw	79	;'O'
  1869  1013  3453               	retlw	83	;'S'
  1870  1014  3420               	retlw	32	;' '
  1871  1015  344C               	retlw	76	;'L'
  1872  1016  3441               	retlw	65	;'A'
  1873  1017  3452               	retlw	82	;'R'
  1874  1018  3447               	retlw	71	;'G'
  1875  1019  3445               	retlw	69	;'E'
  1876  101A  3452               	retlw	82	;'R'
  1877  101B  3420               	retlw	32	;' '
  1878  101C  3454               	retlw	84	;'T'
  1879  101D  3448               	retlw	72	;'H'
  1880  101E  3441               	retlw	65	;'A'
  1881  101F  344E               	retlw	78	;'N'
  1882  1020  3420               	retlw	32	;' '
  1883  1021  3432               	retlw	50	;'2'
  1884  1022  3437               	retlw	55	;'7'
  1885  1023  340A               	retlw	10
  1886  1024  3400               	retlw	0
  1887  1025                     STR_23:	
  1888  1025  3421               	retlw	33	;'!'
  1889  1026  343A               	retlw	58	;':'
  1890  1027  3450               	retlw	80	;'P'
  1891  1028  344F               	retlw	79	;'O'
  1892  1029  3453               	retlw	83	;'S'
  1893  102A  343A               	retlw	58	;':'
  1894  102B  3450               	retlw	80	;'P'
  1895  102C  344F               	retlw	79	;'O'
  1896  102D  3453               	retlw	83	;'S'
  1897  102E  3420               	retlw	32	;' '
  1898  102F  344C               	retlw	76	;'L'
  1899  1030  3441               	retlw	65	;'A'
  1900  1031  3452               	retlw	82	;'R'
  1901  1032  3447               	retlw	71	;'G'
  1902  1033  3445               	retlw	69	;'E'
  1903  1034  3452               	retlw	82	;'R'
  1904  1035  3420               	retlw	32	;' '
  1905  1036  3454               	retlw	84	;'T'
  1906  1037  3448               	retlw	72	;'H'
  1907  1038  3441               	retlw	65	;'A'
  1908  1039  344E               	retlw	78	;'N'
  1909  103A  3420               	retlw	32	;' '
  1910  103B  3432               	retlw	50	;'2'
  1911  103C  3437               	retlw	55	;'7'
  1912  103D  340A               	retlw	10
  1913  103E  3400               	retlw	0
  1914  103F                     STR_17:	
  1915  103F  3421               	retlw	33	;'!'
  1916  1040  343A               	retlw	58	;':'
  1917  1041  3425               	retlw	37	;'%'
  1918  1042  3425               	retlw	37	;'%'
  1919  1043  3425               	retlw	37	;'%'
  1920  1044  3464               	retlw	100	;'d'
  1921  1045  343A               	retlw	58	;':'
  1922  1046  3455               	retlw	85	;'U'
  1923  1047  344E               	retlw	78	;'N'
  1924  1048  3444               	retlw	68	;'D'
  1925  1049  3445               	retlw	69	;'E'
  1926  104A  3454               	retlw	84	;'T'
  1927  104B  3445               	retlw	69	;'E'
  1928  104C  3443               	retlw	67	;'C'
  1929  104D  3454               	retlw	84	;'T'
  1930  104E  3445               	retlw	69	;'E'
  1931  104F  3444               	retlw	68	;'D'
  1932  1050  3420               	retlw	32	;' '
  1933  1051  3444               	retlw	68	;'D'
  1934  1052  3445               	retlw	69	;'E'
  1935  1053  3456               	retlw	86	;'V'
  1936  1054  3449               	retlw	73	;'I'
  1937  1055  3443               	retlw	67	;'C'
  1938  1056  3445               	retlw	69	;'E'
  1939  1057  340A               	retlw	10
  1940  1058  3400               	retlw	0
  1941  1059                     STR_12:	
  1942  1059  3421               	retlw	33	;'!'
  1943  105A  343A               	retlw	58	;':'
  1944  105B  344E               	retlw	78	;'N'
  1945  105C  344F               	retlw	79	;'O'
  1946  105D  3420               	retlw	32	;' '
  1947  105E  3441               	retlw	65	;'A'
  1948  105F  3443               	retlw	67	;'C'
  1949  1060  344B               	retlw	75	;'K'
  1950  1061  3420               	retlw	32	;' '
  1951  1062  3446               	retlw	70	;'F'
  1952  1063  3452               	retlw	82	;'R'
  1953  1064  344F               	retlw	79	;'O'
  1954  1065  344D               	retlw	77	;'M'
  1955  1066  3420               	retlw	32	;' '
  1956  1067  3449               	retlw	73	;'I'
  1957  1068  3432               	retlw	50	;'2'
  1958  1069  3443               	retlw	67	;'C'
  1959  106A  3420               	retlw	32	;' '
  1960  106B  3453               	retlw	83	;'S'
  1961  106C  344C               	retlw	76	;'L'
  1962  106D  3441               	retlw	65	;'A'
  1963  106E  3456               	retlw	86	;'V'
  1964  106F  3445               	retlw	69	;'E'
  1965  1070  340A               	retlw	10
  1966  1071  3400               	retlw	0
  1967  1072                     STR_16:	
  1968  1072  3421               	retlw	33	;'!'
  1969  1073  343A               	retlw	58	;':'
  1970  1074  344D               	retlw	77	;'M'
  1971  1075  3441               	retlw	65	;'A'
  1972  1076  3450               	retlw	80	;'P'
  1973  1077  343A               	retlw	58	;':'
  1974  1078  344E               	retlw	78	;'N'
  1975  1079  344F               	retlw	79	;'O'
  1976  107A  3420               	retlw	32	;' '
  1977  107B  3453               	retlw	83	;'S'
  1978  107C  344C               	retlw	76	;'L'
  1979  107D  3441               	retlw	65	;'A'
  1980  107E  3456               	retlw	86	;'V'
  1981  107F  3445               	retlw	69	;'E'
  1982  1080  3420               	retlw	32	;' '
  1983  1081  3446               	retlw	70	;'F'
  1984  1082  344F               	retlw	79	;'O'
  1985  1083  3455               	retlw	85	;'U'
  1986  1084  344E               	retlw	78	;'N'
  1987  1085  3444               	retlw	68	;'D'
  1988  1086  340A               	retlw	10
  1989  1087  3400               	retlw	0
  1990  1088                     STR_18:	
  1991  1088  3421               	retlw	33	;'!'
  1992  1089  343A               	retlw	58	;':'
  1993  108A  3425               	retlw	37	;'%'
  1994  108B  3425               	retlw	37	;'%'
  1995  108C  3425               	retlw	37	;'%'
  1996  108D  3464               	retlw	100	;'d'
  1997  108E  343A               	retlw	58	;':'
  1998  108F  344E               	retlw	78	;'N'
  1999  1090  3445               	retlw	69	;'E'
  2000  1091  3454               	retlw	84	;'T'
  2001  1092  3457               	retlw	87	;'W'
  2002  1093  344F               	retlw	79	;'O'
  2003  1094  3452               	retlw	82	;'R'
  2004  1095  344B               	retlw	75	;'K'
  2005  1096  3420               	retlw	32	;' '
  2006  1097  3445               	retlw	69	;'E'
  2007  1098  3452               	retlw	82	;'R'
  2008  1099  3452               	retlw	82	;'R'
  2009  109A  344F               	retlw	79	;'O'
  2010  109B  3452               	retlw	82	;'R'
  2011  109C  340A               	retlw	10
  2012  109D  3400               	retlw	0
  2013  109E                     STR_34:	
  2014  109E  3442               	retlw	66	;'B'
  2015  109F  3441               	retlw	65	;'A'
  2016  10A0  3443               	retlw	67	;'C'
  2017  10A1  344B               	retlw	75	;'K'
  2018  10A2  3450               	retlw	80	;'P'
  2019  10A3  344C               	retlw	76	;'L'
  2020  10A4  3441               	retlw	65	;'A'
  2021  10A5  344E               	retlw	78	;'N'
  2022  10A6  3445               	retlw	69	;'E'
  2023  10A7  342D               	retlw	45	;'-'
  2024  10A8  344D               	retlw	77	;'M'
  2025  10A9  3441               	retlw	65	;'A'
  2026  10AA  3453               	retlw	83	;'S'
  2027  10AB  3454               	retlw	84	;'T'
  2028  10AC  3445               	retlw	69	;'E'
  2029  10AD  3452               	retlw	82	;'R'
  2030  10AE  3400               	retlw	0
  2031  10AF                     STR_69:	
  2032  10AF  3449               	retlw	73	;'I'
  2033  10B0  344C               	retlw	76	;'L'
  2034  10B1  344C               	retlw	76	;'L'
  2035  10B2  3445               	retlw	69	;'E'
  2036  10B3  3447               	retlw	71	;'G'
  2037  10B4  3441               	retlw	65	;'A'
  2038  10B5  344C               	retlw	76	;'L'
  2039  10B6  345F               	retlw	95	;'_'
  2040  10B7  3454               	retlw	84	;'T'
  2041  10B8  3459               	retlw	89	;'Y'
  2042  10B9  3450               	retlw	80	;'P'
  2043  10BA  3445               	retlw	69	;'E'
  2044  10BB  340A               	retlw	10
  2045  10BC  3400               	retlw	0
  2046  10BD                     STR_3:	
  2047  10BD  3421               	retlw	33	;'!'
  2048  10BE  343A               	retlw	58	;':'
  2049  10BF  3457               	retlw	87	;'W'
  2050  10C0  3448               	retlw	72	;'H'
  2051  10C1  344F               	retlw	79	;'O'
  2052  10C2  343A               	retlw	58	;':'
  2053  10C3  344E               	retlw	78	;'N'
  2054  10C4  3441               	retlw	65	;'A'
  2055  10C5  3443               	retlw	67	;'C'
  2056  10C6  344B               	retlw	75	;'K'
  2057  10C7  340A               	retlw	10
  2058  10C8  3400               	retlw	0
  2059  10C9                     STR_8:	
  2060  10C9  3421               	retlw	33	;'!'
  2061  10CA  343A               	retlw	58	;':'
  2062  10CB  3453               	retlw	83	;'S'
  2063  10CC  3454               	retlw	84	;'T'
  2064  10CD  3450               	retlw	80	;'P'
  2065  10CE  343A               	retlw	58	;':'
  2066  10CF  344E               	retlw	78	;'N'
  2067  10D0  3441               	retlw	65	;'A'
  2068  10D1  3443               	retlw	67	;'C'
  2069  10D2  344B               	retlw	75	;'K'
  2070  10D3  340A               	retlw	10
  2071  10D4  3400               	retlw	0
  2072  10D5                     STR_7:	
  2073  10D5  342A               	retlw	42	;'*'
  2074  10D6  343A               	retlw	58	;':'
  2075  10D7  3453               	retlw	83	;'S'
  2076  10D8  3454               	retlw	84	;'T'
  2077  10D9  3450               	retlw	80	;'P'
  2078  10DA  343A               	retlw	58	;':'
  2079  10DB  3441               	retlw	65	;'A'
  2080  10DC  3443               	retlw	67	;'C'
  2081  10DD  344B               	retlw	75	;'K'
  2082  10DE  340A               	retlw	10
  2083  10DF  3400               	retlw	0
  2084  10E0                     STR_49:	
  2085  10E0  3424               	retlw	36	;'$'
  2086  10E1  343A               	retlw	58	;':'
  2087  10E2  3452               	retlw	82	;'R'
  2088  10E3  3444               	retlw	68	;'D'
  2089  10E4  3441               	retlw	65	;'A'
  2090  10E5  343A               	retlw	58	;':'
  2091  10E6  3425               	retlw	37	;'%'
  2092  10E7  3464               	retlw	100	;'d'
  2093  10E8  340A               	retlw	10
  2094  10E9  3400               	retlw	0
  2095  10EA                     STR_67:	
  2096  10EA  342D               	retlw	45	;'-'
  2097  10EB  3425               	retlw	37	;'%'
  2098  10EC  3464               	retlw	100	;'d'
  2099  10ED  342E               	retlw	46	;'.'
  2100  10EE  3425               	retlw	37	;'%'
  2101  10EF  3430               	retlw	48	;'0'
  2102  10F0  3432               	retlw	50	;'2'
  2103  10F1  3464               	retlw	100	;'d'
  2104  10F2  340A               	retlw	10
  2105  10F3  3400               	retlw	0
  2106  10F4                     STR_38:	
  2107  10F4  3424               	retlw	36	;'$'
  2108  10F5  343A               	retlw	58	;':'
  2109  10F6  3457               	retlw	87	;'W'
  2110  10F7  3448               	retlw	72	;'H'
  2111  10F8  344F               	retlw	79	;'O'
  2112  10F9  343A               	retlw	58	;':'
  2113  10FA  3425               	retlw	37	;'%'
  2114  10FB  3473               	retlw	115	;'s'
  2115  10FC  340A               	retlw	10
  2116  10FD  3400               	retlw	0
  2117  10FE                     STR_42:	
  2118  10FE  342A               	retlw	42	;'*'
  2119  10FF  343A               	retlw	58	;':'
  2120  1100  3453               	retlw	83	;'S'
  2121  1101  3454               	retlw	84	;'T'
  2122  1102  3450               	retlw	80	;'P'
  2123  1103  343A               	retlw	58	;':'
  2124  1104  3425               	retlw	37	;'%'
  2125  1105  3473               	retlw	115	;'s'
  2126  1106  340A               	retlw	10
  2127  1107  3400               	retlw	0
  2128  1108                     STR_65:	
  2129  1108  342D               	retlw	45	;'-'
  2130  1109  3425               	retlw	37	;'%'
  2131  110A  3464               	retlw	100	;'d'
  2132  110B  342E               	retlw	46	;'.'
  2133  110C  3425               	retlw	37	;'%'
  2134  110D  3430               	retlw	48	;'0'
  2135  110E  3432               	retlw	50	;'2'
  2136  110F  3464               	retlw	100	;'d'
  2137  1110  342C               	retlw	44	;','
  2138  1111  3400               	retlw	0
  2139  1112                     STR_57:	
  2140  1112  3455               	retlw	85	;'U'
  2141  1113  3449               	retlw	73	;'I'
  2142  1114  344E               	retlw	78	;'N'
  2143  1115  3454               	retlw	84	;'T'
  2144  1116  3431               	retlw	49	;'1'
  2145  1117  3436               	retlw	54	;'6'
  2146  1118  345F               	retlw	95	;'_'
  2147  1119  3454               	retlw	84	;'T'
  2148  111A  343A               	retlw	58	;':'
  2149  111B  3400               	retlw	0
  2150  111C                     STR_2:	
  2151  111C  3424               	retlw	36	;'$'
  2152  111D  343A               	retlw	58	;':'
  2153  111E  3457               	retlw	87	;'W'
  2154  111F  3448               	retlw	72	;'H'
  2155  1120  344F               	retlw	79	;'O'
  2156  1121  343A               	retlw	58	;':'
  2157  1122  3425               	retlw	37	;'%'
  2158  1123  3464               	retlw	100	;'d'
  2159  1124  340A               	retlw	10
  2160  1125  3400               	retlw	0
  2161  1126                     STR_11:	
  2162  1126  3424               	retlw	36	;'$'
  2163  1127  343A               	retlw	58	;':'
  2164  1128  3447               	retlw	71	;'G'
  2165  1129  3445               	retlw	69	;'E'
  2166  112A  3454               	retlw	84	;'T'
  2167  112B  343A               	retlw	58	;':'
  2168  112C  3425               	retlw	37	;'%'
  2169  112D  3464               	retlw	100	;'d'
  2170  112E  340A               	retlw	10
  2171  112F  3400               	retlw	0
  2172  1130                     STR_68:	
  2173  1130  344E               	retlw	78	;'N'
  2174  1131  344F               	retlw	79	;'O'
  2175  1132  345F               	retlw	95	;'_'
  2176  1133  3444               	retlw	68	;'D'
  2177  1134  3441               	retlw	65	;'A'
  2178  1135  3454               	retlw	84	;'T'
  2179  1136  3441               	retlw	65	;'A'
  2180  1137  340A               	retlw	10
  2181  1138  3400               	retlw	0
  2182  1139                     STR_51:	
  2183  1139  3455               	retlw	85	;'U'
  2184  113A  3449               	retlw	73	;'I'
  2185  113B  344E               	retlw	78	;'N'
  2186  113C  3454               	retlw	84	;'T'
  2187  113D  3438               	retlw	56	;'8'
  2188  113E  345F               	retlw	95	;'_'
  2189  113F  3454               	retlw	84	;'T'
  2190  1140  343A               	retlw	58	;':'
  2191  1141  3400               	retlw	0
  2192  1142                     STR_63:	
  2193  1142  3446               	retlw	70	;'F'
  2194  1143  344C               	retlw	76	;'L'
  2195  1144  344F               	retlw	79	;'O'
  2196  1145  3441               	retlw	65	;'A'
  2197  1146  3454               	retlw	84	;'T'
  2198  1147  343A               	retlw	58	;':'
  2199  1148  3400               	retlw	0
  2200  1149                     STR_35:	
  2201  1149  3428               	retlw	40	;'('
  2202  114A  346E               	retlw	110	;'n'
  2203  114B  3475               	retlw	117	;'u'
  2204  114C  346C               	retlw	108	;'l'
  2205  114D  346C               	retlw	108	;'l'
  2206  114E  3429               	retlw	41	;')'
  2207  114F  3400               	retlw	0
  2208  1150                     STR_28:	
  2209  1150  3424               	retlw	36	;'$'
  2210  1151  343A               	retlw	58	;':'
  2211  1152  3452               	retlw	82	;'R'
  2212  1153  3453               	retlw	83	;'S'
  2213  1154  3443               	retlw	67	;'C'
  2214  1155  343A               	retlw	58	;':'
  2215  1156  3400               	retlw	0
  2216  1157                     STR_13:	
  2217  1157  3424               	retlw	36	;'$'
  2218  1158  343A               	retlw	58	;':'
  2219  1159  344D               	retlw	77	;'M'
  2220  115A  3441               	retlw	65	;'A'
  2221  115B  3450               	retlw	80	;'P'
  2222  115C  343A               	retlw	58	;':'
  2223  115D  3400               	retlw	0
  2224  115E                     STR_50:	
  2225  115E  3425               	retlw	37	;'%'
  2226  115F  3425               	retlw	37	;'%'
  2227  1160  3425               	retlw	37	;'%'
  2228  1161  3464               	retlw	100	;'d'
  2229  1162  343A               	retlw	58	;':'
  2230  1163  3400               	retlw	0
  2231  1164                     STR_36:	
  2232  1164  3423               	retlw	35	;'#'
  2233  1165  3425               	retlw	37	;'%'
  2234  1166  3473               	retlw	115	;'s'
  2235  1167  340A               	retlw	10
  2236  1168  3400               	retlw	0
  2237  1169                     STR_53:	
  2238  1169  3425               	retlw	37	;'%'
  2239  116A  3475               	retlw	117	;'u'
  2240  116B  340A               	retlw	10
  2241  116C  3400               	retlw	0
  2242  116D                     STR_52:	
  2243  116D  3425               	retlw	37	;'%'
  2244  116E  3475               	retlw	117	;'u'
  2245  116F  342C               	retlw	44	;','
  2246  1170  3400               	retlw	0
  2247  1171                     STR_48:	
  2248  1171  3452               	retlw	82	;'R'
  2249  1172  3444               	retlw	68	;'D'
  2250  1173  3441               	retlw	65	;'A'
  2251  1174  3400               	retlw	0
  2252  1175                     STR_47:	
  2253  1175  3457               	retlw	87	;'W'
  2254  1176  3444               	retlw	68	;'D'
  2255  1177  3441               	retlw	65	;'A'
  2256  1178  3400               	retlw	0
  2257  1179                     STR_43:	
  2258  1179  3441               	retlw	65	;'A'
  2259  117A  3443               	retlw	67	;'C'
  2260  117B  344B               	retlw	75	;'K'
  2261  117C  3400               	retlw	0
  2262  117D                     STR_14:	
  2263  117D  3425               	retlw	37	;'%'
  2264  117E  3464               	retlw	100	;'d'
  2265  117F  342C               	retlw	44	;','
  2266  1180  3400               	retlw	0
  2267  1181                     STR_5:	
  2268  1181  3453               	retlw	83	;'S'
  2269  1182  3454               	retlw	84	;'T'
  2270  1183  3441               	retlw	65	;'A'
  2271  1184  3400               	retlw	0
  2272  1185                     STR_20:	
  2273  1185  3449               	retlw	73	;'I'
  2274  1186  3432               	retlw	50	;'2'
  2275  1187  3443               	retlw	67	;'C'
  2276  1188  3400               	retlw	0
  2277  1189                     STR_32:	
  2278  1189  3443               	retlw	67	;'C'
  2279  118A  3453               	retlw	83	;'S'
  2280  118B  3443               	retlw	67	;'C'
  2281  118C  3400               	retlw	0
  2282  118D                     STR_27:	
  2283  118D  3452               	retlw	82	;'R'
  2284  118E  3453               	retlw	83	;'S'
  2285  118F  3443               	retlw	67	;'C'
  2286  1190  3400               	retlw	0
  2287  1191                     STR_26:	
  2288  1191  3453               	retlw	83	;'S'
  2289  1192  3453               	retlw	83	;'S'
  2290  1193  3443               	retlw	67	;'C'
  2291  1194  3400               	retlw	0
  2292  1195                     STR_24:	
  2293  1195  3457               	retlw	87	;'W'
  2294  1196  3453               	retlw	83	;'S'
  2295  1197  3443               	retlw	67	;'C'
  2296  1198  3400               	retlw	0
  2297  1199                     STR_33:	
  2298  1199  3453               	retlw	83	;'S'
  2299  119A  3445               	retlw	69	;'E'
  2300  119B  344E               	retlw	78	;'N'
  2301  119C  3400               	retlw	0
  2302  119D                     STR_1:	
  2303  119D  3457               	retlw	87	;'W'
  2304  119E  3448               	retlw	72	;'H'
  2305  119F  344F               	retlw	79	;'O'
  2306  11A0  3400               	retlw	0
  2307  11A1                     STR_21:	
  2308  11A1  344D               	retlw	77	;'M'
  2309  11A2  3441               	retlw	65	;'A'
  2310  11A3  3450               	retlw	80	;'P'
  2311  11A4  3400               	retlw	0
  2312  11A5                     STR_6:	
  2313  11A5  3453               	retlw	83	;'S'
  2314  11A6  3454               	retlw	84	;'T'
  2315  11A7  3450               	retlw	80	;'P'
  2316  11A8  3400               	retlw	0
  2317  11A9                     STR_22:	
  2318  11A9  3450               	retlw	80	;'P'
  2319  11AA  344F               	retlw	79	;'O'
  2320  11AB  3453               	retlw	83	;'S'
  2321  11AC  3400               	retlw	0
  2322  11AD                     STR_10:	
  2323  11AD  3447               	retlw	71	;'G'
  2324  11AE  3445               	retlw	69	;'E'
  2325  11AF  3454               	retlw	84	;'T'
  2326  11B0  3400               	retlw	0
  2327  11B1                     STR_9:	
  2328  11B1  3453               	retlw	83	;'S'
  2329  11B2  3445               	retlw	69	;'E'
  2330  11B3  3454               	retlw	84	;'T'
  2331  11B4  3400               	retlw	0
  2332  11B5                     STR_4:	
  2333  11B5  3453               	retlw	83	;'S'
  2334  11B6  3441               	retlw	65	;'A'
  2335  11B7  3456               	retlw	86	;'V'
  2336  11B8  3400               	retlw	0
  2337  11B9                     STR_29:	
  2338  11B9  3425               	retlw	37	;'%'
  2339  11BA  3464               	retlw	100	;'d'
  2340  11BB  347C               	retlw	124	;'|'
  2341  11BC  3400               	retlw	0
  2342  1088                     
  2343                           ; #config settings
  2344  0000                     
  2345                           	psect	cinit
  2346  003E                     start_initialization:	
  2347  003E                     __initialization:		;BIGRAM
  2348                           
  2349                           ; Initialize objects allocated to BANK1
  2350  003E  0021               	movlb	1	; select bank1
  2351  003F  3180  2002  3180   	fcall	__pidataBANK1	;fetch initializer
  2352  0042  00ED               	movwf	__pdataBANK1& (0+127)
  2353  0043  3180  2003  3180   	fcall	__pidataBANK1+1	;fetch initializer
  2354  0046  00EE               	movwf	(__pdataBANK1+1)& (0+127)
  2355                           
  2356                           ; Initialize objects allocated to BANK2
  2357  0047  0022               	movlb	2	; select bank2
  2358  0048  319F  27D2  3180   	fcall	__pidataBANK2	;fetch initializer
  2359  004B  00E2               	movwf	__pdataBANK2& (0+127)
  2360  004C  319F  27D3  3180   	fcall	__pidataBANK2+1	;fetch initializer
  2361  004F  00E3               	movwf	(__pdataBANK2+1)& (0+127)
  2362  0050  319F  27D4  3180   	fcall	__pidataBANK2+2	;fetch initializer
  2363  0053  00E4               	movwf	(__pdataBANK2+2)& (0+127)
  2364                           
  2365                           ; Clear objects allocated to BIGRAM
  2366  0054  3030               	movlw	low (0+9008)
  2367  0055  0084               	movwf	4
  2368  0056  3023               	movlw	high (0+9008)
  2369  0057  0085               	movwf	5
  2370  0058  30C0               	movlw	192
  2371  0059  00FE               	movwf	btemp
  2372  005A  3000               	movlw	0
  2373  005B  00FF               	movwf	btemp+1
  2374  005C  3191  21EF  3180   	fcall	clear_ram0
  2375                           
  2376                           ; Clear objects allocated to COMMON
  2377  005F  01F0               	clrf	__pbssCOMMON& (0+127)
  2378  0060  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  2379  0061  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  2380  0062  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  2381  0063  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  2382  0064  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
  2383  0065  01F6               	clrf	(__pbssCOMMON+6)& (0+127)
  2384                           
  2385                           ; Clear objects allocated to BANK0
  2386  0066  0020               	movlb	0	; select bank0
  2387  0067  01EB               	clrf	__pbssBANK0& (0+127)
  2388  0068  01EC               	clrf	(__pbssBANK0+1)& (0+127)
  2389  0069  01ED               	clrf	(__pbssBANK0+2)& (0+127)
  2390  006A  01EE               	clrf	(__pbssBANK0+3)& (0+127)
  2391                           
  2392                           ; Clear objects allocated to BANK1
  2393  006B  30D9               	movlw	low __pbssBANK1
  2394  006C  0084               	movwf	4
  2395  006D  3000               	movlw	high __pbssBANK1
  2396  006E  0085               	movwf	5
  2397  006F  3014               	movlw	20
  2398  0070  00FE               	movwf	btemp
  2399  0071  3000               	movlw	0
  2400  0072  00FF               	movwf	btemp+1
  2401  0073  3191  21EF  3180   	fcall	clear_ram0
  2402                           
  2403                           ; Clear objects allocated to BANK2
  2404  0076  3020               	movlw	low __pbssBANK2
  2405  0077  0084               	movwf	4
  2406  0078  3001               	movlw	high __pbssBANK2
  2407  0079  0085               	movwf	5
  2408  007A  3042               	movlw	66
  2409  007B  00FE               	movwf	btemp
  2410  007C  3000               	movlw	0
  2411  007D  00FF               	movwf	btemp+1
  2412  007E  3191  21EF  3180   	fcall	clear_ram0
  2413                           
  2414                           ; Clear objects allocated to BANK3
  2415  0081  30A0               	movlw	low __pbssBANK3
  2416  0082  0084               	movwf	4
  2417  0083  3001               	movlw	high __pbssBANK3
  2418  0084  0085               	movwf	5
  2419  0085  302C               	movlw	44
  2420  0086  00FE               	movwf	btemp
  2421  0087  3000               	movlw	0
  2422  0088  00FF               	movwf	btemp+1
  2423  0089  3191  21EF  3180   	fcall	clear_ram0
  2424                           
  2425                           ; Clear objects allocated to BANK4
  2426  008C  3020               	movlw	low __pbssBANK4
  2427  008D  0084               	movwf	4
  2428  008E  3002               	movlw	high __pbssBANK4
  2429  008F  0085               	movwf	5
  2430  0090  3040               	movlw	64
  2431  0091  00FE               	movwf	btemp
  2432  0092  3000               	movlw	0
  2433  0093  00FF               	movwf	btemp+1
  2434  0094  3191  21EF  3180   	fcall	clear_ram0
  2435                           
  2436                           ; Clear objects allocated to BANK5
  2437  0097  30A0               	movlw	low __pbssBANK5
  2438  0098  0084               	movwf	4
  2439  0099  3002               	movlw	high __pbssBANK5
  2440  009A  0085               	movwf	5
  2441  009B  3040               	movlw	64
  2442  009C  00FE               	movwf	btemp
  2443  009D  3000               	movlw	0
  2444  009E  00FF               	movwf	btemp+1
  2445  009F  3191  21EF  3180   	fcall	clear_ram0
  2446                           
  2447                           ; Clear objects allocated to BANK6
  2448  00A2  3020               	movlw	low __pbssBANK6
  2449  00A3  0084               	movwf	4
  2450  00A4  3003               	movlw	high __pbssBANK6
  2451  00A5  0085               	movwf	5
  2452  00A6  3040               	movlw	64
  2453  00A7  00FE               	movwf	btemp
  2454  00A8  3000               	movlw	0
  2455  00A9  00FF               	movwf	btemp+1
  2456  00AA  3191  21EF         	fcall	clear_ram0
  2457  00AC                     end_of_initialization:	
  2458                           ;End of C runtime variable initialization code
  2459                           
  2460  00AC                     __end_of__initialization:	
  2461  00AC  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2462  00AD  0020               	movlb	0
  2463  00AE  3194  2CD5         	ljmp	_main	;jump to C main() function
  2464                           
  2465                           	psect	bssCOMMON
  2466  0070                     __pbssCOMMON:	
  2467  0070                     inv_handler@t:	
  2468  0070                     	ds	2
  2469  0072                     command_handler@pos:	
  2470  0072                     	ds	1
  2471  0073                     _eusartRxHead:	
  2472  0073                     	ds	1
  2473  0074                     _eusartTxBufferRemaining:	
  2474  0074                     	ds	1
  2475  0075                     _eusartTxTail:	
  2476  0075                     	ds	1
  2477  0076                     _eusartTxHead:	
  2478  0076                     	ds	1
  2479                           
  2480                           	psect	bssBANK0
  2481  006B                     __pbssBANK0:	
  2482  006B                     _i:	
  2483  006B                     	ds	1
  2484  006C                     _eusartRxTail:	
  2485  006C                     	ds	1
  2486  006D                     I2C1_ISR@i2c_address:	
  2487  006D                     	ds	2
  2488                           
  2489                           	psect	bssBANK1
  2490  00D9                     __pbssBANK1:	
  2491  00D9                     _i2c1_object:	
  2492  00D9                     	ds	5
  2493  00DE                     _value:	
  2494  00DE                     	ds	1
  2495  00DF                     _cnt:	
  2496  00DF                     	ds	1
  2497  00E0                     _slave_address:	
  2498  00E0                     	ds	1
  2499  00E1                     tick_handler@cmd_next:	
  2500  00E1                     	ds	1
  2501  00E2                     dev_map_iterator@yy:	
  2502  00E2                     	ds	1
  2503  00E3                     dev_map_iterator@xx:	
  2504  00E3                     	ds	1
  2505  00E4                     _devs:	
  2506  00E4                     	ds	1
  2507  00E5                     _timer0ReloadVal:	
  2508  00E5                     	ds	1
  2509  00E6                     _eusartRxCount:	
  2510  00E6                     	ds	1
  2511  00E7                     I2C1_ISR@i2c_10bit_address_restart:	
  2512  00E7                     	ds	1
  2513  00E8                     I2C1_ISR@i2c_bytes_left:	
  2514  00E8                     	ds	1
  2515  00E9                     _p_i2c1_current:	
  2516  00E9                     	ds	1
  2517  00EA                     _p_i2c1_trb_current:	
  2518  00EA                     	ds	1
  2519  00EB                     _i2c1_trb_count:	
  2520  00EB                     	ds	1
  2521  00EC                     _i2c1_state:	
  2522  00EC                     	ds	1
  2523                           
  2524                           	psect	dataBANK1
  2525  00ED                     __pdataBANK1:	
  2526  00ED                     put_cmd@idx:	
  2527  00ED                     	ds	1
  2528  00EE                     _BACKPLANE_SLAVE_ADDRESS:	
  2529  00EE                     	ds	1
  2530                           
  2531                           	psect	bssBANK2
  2532  0120                     __pbssBANK2:	
  2533  0120                     _dev_map:	
  2534  0120                     	ds	4
  2535  0124                     _float100:	
  2536  0124                     	ds	2
  2537  0126                     _device_id_:	
  2538  0126                     	ds	2
  2539  0128                     _PROTOCOL_Tick_Handler:	
  2540  0128                     	ds	2
  2541  012A                     _PROTOCOL_Inv_Handler:	
  2542  012A                     	ds	2
  2543  012C                     _PROTOCOL_Extension_Handler:	
  2544  012C                     	ds	2
  2545  012E                     _PROTOCOL_Loop_Func:	
  2546  012E                     	ds	2
  2547  0130                     _PROTOCOL_Set_Handler:	
  2548  0130                     	ds	2
  2549  0132                     _PROTOCOL_Stop_Handler:	
  2550  0132                     	ds	2
  2551  0134                     _PROTOCOL_Start_Handler:	
  2552  0134                     	ds	2
  2553  0136                     tick_handler@t:	
  2554  0136                     	ds	2
  2555  0138                     I2C1_ISR@pi2c_buf_ptr:	
  2556  0138                     	ds	2
  2557  013A                     _data:	
  2558  013A                     	ds	1
  2559  013B                     _j:	
  2560  013B                     	ds	1
  2561  013C                     _backplane_slave_enabled:	
  2562  013C                     	ds	1
  2563  013D                     _readbuf_status:	
  2564  013D                     	ds	1
  2565  013E                     _tmr_overflow:	
  2566  013E                     	ds	1
  2567  013F                     _tmr_cnt:	
  2568  013F                     	ds	1
  2569  0140                     _sec_cnt:	
  2570  0140                     	ds	1
  2571  0141                     _invoked:	
  2572  0141                     	ds	1
  2573  0142                     _running:	
  2574  0142                     	ds	1
  2575  0143                     _locked:	
  2576  0143                     	ds	1
  2577  0144                     _do_func:	
  2578  0144                     	ds	1
  2579  0145                     _timer_cnt:	
  2580  0145                     	ds	1
  2581  0146                     _readbuf:	
  2582  0146                     	ds	6
  2583  014C                     I2C1_MasterRead@trBlock:	
  2584  014C                     	ds	5
  2585  0151                     I2C1_MasterWrite@trBlock:	
  2586  0151                     	ds	5
  2587  0156                     PROTOCOL_Send_float@pbuf:	
  2588  0156                     	ds	3
  2589  0159                     _i2c1_tr_queue:	
  2590  0159                     	ds	3
  2591  015C                     PROTOCOL_Send_int16_t@pbuf:	
  2592  015C                     	ds	2
  2593  015E                     PROTOCOL_Send_uint16_t@pbuf:	
  2594  015E                     	ds	2
  2595  0160                     PROTOCOL_Send_int8_t@pbuf:	
  2596  0160                     	ds	1
  2597  0161                     PROTOCOL_Send_uint8_t@pbuf:	
  2598  0161                     	ds	1
  2599                           
  2600                           	psect	dataBANK2
  2601  0162                     __pdataBANK2:	
  2602  0162                     _tmr_scaler:	
  2603  0162                     	ds	1
  2604  0163                     dev_map_iterator@start:	
  2605  0163                     	ds	1
  2606  0164                     _type_no_data:	
  2607  0164                     	ds	1
  2608                           
  2609                           	psect	bssBANK3
  2610  01A0                     __pbssBANK3:	
  2611  01A0                     _schedule:	
  2612  01A0                     	ds	28
  2613  01BC                     _read_buf:	
  2614  01BC                     	ds	16
  2615                           
  2616                           	psect	bssBANK4
  2617  0220                     __pbssBANK4:	
  2618  0220                     _buf:	
  2619  0220                     	ds	48
  2620  0250                     _sendbuf:	
  2621  0250                     	ds	16
  2622                           
  2623                           	psect	bssBANK5
  2624  02A0                     __pbssBANK5:	
  2625  02A0                     _eusartTxBuffer:	
  2626  02A0                     	ds	64
  2627                           
  2628                           	psect	bssBANK6
  2629  0320                     __pbssBANK6:	
  2630  0320                     _eusartRxBuffer:	
  2631  0320                     	ds	64
  2632                           
  2633                           	psect	clrtext
  2634  11EF                     clear_ram0:	
  2635                           ;	Called with FSR0 containing the base address, and
  2636                           ;	btemp/btemp+1 has the size to clear
  2637                           
  2638  11EF  0064               	clrwdt	;clear the watchdog before getting into this loop
  2639  11F0                     clrloop0:	
  2640  11F0  0180               	clrf	0	;clear RAM location pointed to by FSR
  2641  11F1  3101               	addfsr 0,1
  2642  11F2  3001               	movlw	1
  2643  11F3  02FE               	subwf	126,f
  2644  11F4  3000               	movlw	0
  2645  11F5  3BFF               	subwfb	127,f
  2646  11F6  087F               	movf	127,w
  2647  11F7  047E               	iorwf	126,w
  2648  11F8  1903               	btfsc	3,2
  2649  11F9  3400               	retlw	0	;all done for this memory range, return
  2650  11FA  29F0               	goto	clrloop0	;have we reached the end yet?
  2651                           
  2652                           	psect	cstackBANK1
  2653  00A0                     __pcstackBANK1:	
  2654  00A0                     exec_remote_cmd@send_buf:	
  2655                           
  2656                           ; 50 bytes @ 0x0
  2657  00A0                     	ds	50
  2658  00D2                     exec_remote_cmd@idx:	
  2659                           
  2660                           ; 1 bytes @ 0x32
  2661  00D2                     	ds	1
  2662  00D3                     exec_remote_cmd@j:	
  2663                           
  2664                           ; 1 bytes @ 0x33
  2665  00D3                     	ds	1
  2666  00D4                     exec_remote_cmd@i:	
  2667                           
  2668                           ; 1 bytes @ 0x34
  2669  00D4                     	ds	1
  2670  00D5                     exec_remote_cmd@status:	
  2671                           
  2672                           ; 1 bytes @ 0x35
  2673  00D5                     	ds	1
  2674  00D6                     exec_remote_cmd@data:	
  2675                           
  2676                           ; 1 bytes @ 0x36
  2677  00D6                     	ds	1
  2678  00D7                     exec_remote_cmd@buf:	
  2679                           
  2680                           ; 2 bytes @ 0x37
  2681  00D7                     	ds	2
  2682                           
  2683                           	psect	cstackCOMMON
  2684  0077                     __pcstackCOMMON:	
  2685  0077                     ?_isdigit:	
  2686  0077                     ?_I2C1_Stop:	
  2687                           ; 1 bit 
  2688                           
  2689  0077                     ??_I2C1_Stop:	
  2690                           ; 1 bytes @ 0x0
  2691                           
  2692  0077                     ?_I2C1_FunctionComplete:	
  2693                           ; 1 bytes @ 0x0
  2694                           
  2695  0077                     ??_I2C1_FunctionComplete:	
  2696                           ; 1 bytes @ 0x0
  2697                           
  2698  0077                     ?_OSCILLATOR_Initialize:	
  2699                           ; 1 bytes @ 0x0
  2700                           
  2701  0077                     ?_WDT_Initialize:	
  2702                           ; 1 bytes @ 0x0
  2703                           
  2704  0077                     ?_TMR0_Initialize:	
  2705                           ; 1 bytes @ 0x0
  2706                           
  2707  0077                     ?_PROTOCOL_Loop:	
  2708                           ; 1 bytes @ 0x0
  2709                           
  2710  0077                     ?_I2C1_Initialize:	
  2711                           ; 1 bytes @ 0x0
  2712                           
  2713  0077                     ?_I2C1_ISR:	
  2714                           ; 1 bytes @ 0x0
  2715                           
  2716  0077                     ?_I2C1_BusCollisionISR:	
  2717                           ; 1 bytes @ 0x0
  2718                           
  2719  0077                     ??_I2C1_BusCollisionISR:	
  2720                           ; 1 bytes @ 0x0
  2721                           
  2722  0077                     ?_DATAEE_ReadByte:	
  2723                           ; 1 bytes @ 0x0
  2724                           
  2725  0077                     ?_EUSART_Initialize:	
  2726                           ; 1 bytes @ 0x0
  2727                           
  2728  0077                     ?_EUSART_Read:	
  2729                           ; 1 bytes @ 0x0
  2730                           
  2731  0077                     ?_EUSART_Write:	
  2732                           ; 1 bytes @ 0x0
  2733                           
  2734  0077                     ?_putch:	
  2735                           ; 1 bytes @ 0x0
  2736                           
  2737  0077                     ?_EUSART_Transmit_ISR:	
  2738                           ; 1 bytes @ 0x0
  2739                           
  2740  0077                     ??_EUSART_Transmit_ISR:	
  2741                           ; 1 bytes @ 0x0
  2742                           
  2743  0077                     ?_EUSART_Receive_ISR:	
  2744                           ; 1 bytes @ 0x0
  2745                           
  2746  0077                     ??_EUSART_Receive_ISR:	
  2747                           ; 1 bytes @ 0x0
  2748                           
  2749  0077                     ?_PIN_MANAGER_Initialize:	
  2750                           ; 1 bytes @ 0x0
  2751                           
  2752  0077                     ?_INTERRUPT_InterruptManager:	
  2753                           ; 1 bytes @ 0x0
  2754                           
  2755  0077                     ?_SYSTEM_Initialize:	
  2756                           ; 1 bytes @ 0x0
  2757                           
  2758  0077                     ?_TMR0_HasOverflowOccured:	
  2759                           ; 1 bytes @ 0x0
  2760                           
  2761  0077                     ?_exec_remote_cmd:	
  2762                           ; 1 bytes @ 0x0
  2763                           
  2764  0077                     ?_init:	
  2765                           ; 1 bytes @ 0x0
  2766                           
  2767  0077                     ?_add_dev:	
  2768                           ; 1 bytes @ 0x0
  2769                           
  2770  0077                     ?_del_dev:	
  2771                           ; 1 bytes @ 0x0
  2772                           
  2773  0077                     ?_dev_map_iterator:	
  2774                           ; 1 bytes @ 0x0
  2775                           
  2776  0077                     ?_scan_dev:	
  2777                           ; 1 bytes @ 0x0
  2778                           
  2779  0077                     ?_check_plg:	
  2780                           ; 1 bytes @ 0x0
  2781                           
  2782  0077                     ?_detected:	
  2783                           ; 1 bytes @ 0x0
  2784                           
  2785  0077                     ?_print_dev_map:	
  2786                           ; 1 bytes @ 0x0
  2787                           
  2788  0077                     ?_sen:	
  2789                           ; 1 bytes @ 0x0
  2790                           
  2791  0077                     ?_one_shot_sen:	
  2792                           ; 1 bytes @ 0x0
  2793                           
  2794  0077                     ?_fetch:	
  2795                           ; 1 bytes @ 0x0
  2796                           
  2797  0077                     ?_tick_handler:	
  2798                           ; 1 bytes @ 0x0
  2799                           
  2800  0077                     ?_inv_handler:	
  2801                           ; 1 bytes @ 0x0
  2802                           
  2803  0077                     ?_put_cmd:	
  2804                           ; 1 bytes @ 0x0
  2805                           
  2806  0077                     ?_main:	
  2807                           ; 1 bytes @ 0x0
  2808                           
  2809  0077                     ?_PROTOCOL_Write_Device_Address:	
  2810                           ; 1 bytes @ 0x0
  2811                           
  2812  0077                     ?_PROTOCOL_Read_Device_Address:	
  2813                           ; 1 bytes @ 0x0
  2814                           
  2815  0077                     ?_PROTOCOL_STA:	
  2816                           ; 1 bytes @ 0x0
  2817                           
  2818  0077                     ?_PROTOCOL_STP:	
  2819                           ; 1 bytes @ 0x0
  2820                           
  2821  0077                     ?_PROTOCOL_SAV:	
  2822                           ; 1 bytes @ 0x0
  2823                           
  2824  0077                     ?_PROTOCOL_SET:	
  2825                           ; 1 bytes @ 0x0
  2826                           
  2827  0077                     ?_PROTOCOL_EXT:	
  2828                           ; 1 bytes @ 0x0
  2829                           
  2830                           
  2831                           ; 1 bytes @ 0x0
  2832  0077                     	ds	1
  2833  0078                     I2C1_Stop@completion_code:	
  2834                           
  2835                           ; 1 bytes @ 0x1
  2836  0078                     	ds	1
  2837  0079                     ??_I2C1_ISR:	
  2838                           
  2839                           ; 1 bytes @ 0x2
  2840  0079                     	ds	4
  2841  007D                     ??_INTERRUPT_InterruptManager:	
  2842                           
  2843                           ; 1 bytes @ 0x6
  2844  007D                     	ds	1
  2845                           
  2846                           	psect	cstackBANK0
  2847  0020                     __pcstackBANK0:	
  2848  0020                     ?_I2C1_MasterWriteTRBBuild:	
  2849  0020                     ?_I2C1_MasterTRBInsert:	
  2850                           ; 1 bytes @ 0x0
  2851                           
  2852  0020                     ?_I2C1_MasterReadTRBBuild:	
  2853                           ; 1 bytes @ 0x0
  2854                           
  2855  0020                     ??_OSCILLATOR_Initialize:	
  2856                           ; 1 bytes @ 0x0
  2857                           
  2858  0020                     ??_WDT_Initialize:	
  2859                           ; 1 bytes @ 0x0
  2860                           
  2861  0020                     ??_TMR0_Initialize:	
  2862                           ; 1 bytes @ 0x0
  2863                           
  2864  0020                     ?_PROTOCOL_Set_Extension_Handler:	
  2865                           ; 1 bytes @ 0x0
  2866                           
  2867  0020                     ?_PROTOCOL_Set_Tick_Handler:	
  2868                           ; 1 bytes @ 0x0
  2869                           
  2870  0020                     ??_isdigit:	
  2871                           ; 1 bytes @ 0x0
  2872                           
  2873  0020                     ??_I2C1_Initialize:	
  2874                           ; 1 bytes @ 0x0
  2875                           
  2876  0020                     ?_DATAEE_WriteByte:	
  2877                           ; 1 bytes @ 0x0
  2878                           
  2879  0020                     ??_DATAEE_ReadByte:	
  2880                           ; 1 bytes @ 0x0
  2881                           
  2882  0020                     ??_EUSART_Initialize:	
  2883                           ; 1 bytes @ 0x0
  2884                           
  2885  0020                     ??_EUSART_Read:	
  2886                           ; 1 bytes @ 0x0
  2887                           
  2888  0020                     ??_EUSART_Write:	
  2889                           ; 1 bytes @ 0x0
  2890                           
  2891  0020                     ??_PIN_MANAGER_Initialize:	
  2892                           ; 1 bytes @ 0x0
  2893                           
  2894  0020                     ??_TMR0_HasOverflowOccured:	
  2895                           ; 1 bytes @ 0x0
  2896                           
  2897  0020                     ??_dev_map_iterator:	
  2898                           ; 1 bytes @ 0x0
  2899                           
  2900  0020                     ??_PROTOCOL_Read_Device_Address:	
  2901                           ; 1 bytes @ 0x0
  2902                           
  2903  0020                     ??_PROTOCOL_STA:	
  2904                           ; 1 bytes @ 0x0
  2905                           
  2906  0020                     ??_PROTOCOL_STP:	
  2907                           ; 1 bytes @ 0x0
  2908                           
  2909  0020                     ??_PROTOCOL_SET:	
  2910                           ; 1 bytes @ 0x0
  2911                           
  2912  0020                     ?_strncmp:	
  2913                           ; 1 bytes @ 0x0
  2914                           
  2915  0020                     ?_concat:	
  2916                           ; 2 bytes @ 0x0
  2917                           
  2918  0020                     ?___wmul:	
  2919                           ; 2 bytes @ 0x0
  2920                           
  2921  0020                     ?___awdiv:	
  2922                           ; 2 bytes @ 0x0
  2923                           
  2924  0020                     ?___awmod:	
  2925                           ; 2 bytes @ 0x0
  2926                           
  2927  0020                     ?___lwdiv:	
  2928                           ; 2 bytes @ 0x0
  2929                           
  2930  0020                     I2C1_MasterTRBInsert@ptrb_list:	
  2931                           ; 2 bytes @ 0x0
  2932                           
  2933  0020                     I2C1_MasterWriteTRBBuild@pdata:	
  2934                           ; 1 bytes @ 0x0
  2935                           
  2936  0020                     DATAEE_WriteByte@bData:	
  2937                           ; 1 bytes @ 0x0
  2938                           
  2939  0020                     DATAEE_ReadByte@bAdd:	
  2940                           ; 1 bytes @ 0x0
  2941                           
  2942  0020                     concat@lsb:	
  2943                           ; 1 bytes @ 0x0
  2944                           
  2945  0020                     _isdigit$1460:	
  2946                           ; 1 bytes @ 0x0
  2947                           
  2948  0020                     I2C1_MasterReadTRBBuild@pdata:	
  2949                           ; 1 bytes @ 0x0
  2950                           
  2951  0020                     PROTOCOL_Set_Extension_Handler@extension_handler:	
  2952                           ; 2 bytes @ 0x0
  2953                           
  2954  0020                     PROTOCOL_Set_Tick_Handler@tick_handler:	
  2955                           ; 2 bytes @ 0x0
  2956                           
  2957  0020                     ___wmul@multiplier:	
  2958                           ; 2 bytes @ 0x0
  2959                           
  2960  0020                     ___awdiv@divisor:	
  2961                           ; 2 bytes @ 0x0
  2962                           
  2963  0020                     ___awmod@divisor:	
  2964                           ; 2 bytes @ 0x0
  2965                           
  2966  0020                     ___lwdiv@divisor:	
  2967                           ; 2 bytes @ 0x0
  2968                           
  2969  0020                     strncmp@s1:	
  2970                           ; 2 bytes @ 0x0
  2971                           
  2972                           
  2973                           ; 2 bytes @ 0x0
  2974  0020                     	ds	1
  2975  0021                     ?_PROTOCOL_Initialize:	
  2976  0021                     ??_DATAEE_WriteByte:	
  2977                           ; 1 bytes @ 0x1
  2978                           
  2979  0021                     ??_SYSTEM_Initialize:	
  2980                           ; 1 bytes @ 0x1
  2981                           
  2982  0021                     I2C1_MasterTRBInsert@pflag:	
  2983                           ; 1 bytes @ 0x1
  2984                           
  2985  0021                     I2C1_MasterWriteTRBBuild@length:	
  2986                           ; 1 bytes @ 0x1
  2987                           
  2988  0021                     DATAEE_WriteByte@bAdd:	
  2989                           ; 1 bytes @ 0x1
  2990                           
  2991  0021                     EUSART_Read@readValue:	
  2992                           ; 1 bytes @ 0x1
  2993                           
  2994  0021                     EUSART_Write@txData:	
  2995                           ; 1 bytes @ 0x1
  2996                           
  2997  0021                     PROTOCOL_SET@value_:	
  2998                           ; 1 bytes @ 0x1
  2999                           
  3000  0021                     isdigit@c:	
  3001                           ; 1 bytes @ 0x1
  3002                           
  3003  0021                     PROTOCOL_Initialize@device_id:	
  3004                           ; 1 bytes @ 0x1
  3005                           
  3006                           
  3007                           ; 2 bytes @ 0x1
  3008  0021                     	ds	1
  3009  0022                     ??_I2C1_MasterTRBInsert:	
  3010  0022                     ??_PROTOCOL_Set_Extension_Handler:	
  3011                           ; 1 bytes @ 0x2
  3012                           
  3013  0022                     ??_PROTOCOL_Set_Tick_Handler:	
  3014                           ; 1 bytes @ 0x2
  3015                           
  3016  0022                     ??_putch:	
  3017                           ; 1 bytes @ 0x2
  3018                           
  3019  0022                     ??_concat:	
  3020                           ; 1 bytes @ 0x2
  3021                           
  3022  0022                     I2C1_MasterReadTRBBuild@length:	
  3023                           ; 1 bytes @ 0x2
  3024                           
  3025  0022                     DATAEE_WriteByte@GIEBitValue:	
  3026                           ; 1 bytes @ 0x2
  3027                           
  3028  0022                     putch@txData:	
  3029                           ; 1 bytes @ 0x2
  3030                           
  3031  0022                     I2C1_MasterWriteTRBBuild@address:	
  3032                           ; 1 bytes @ 0x2
  3033                           
  3034  0022                     ___wmul@multiplicand:	
  3035                           ; 2 bytes @ 0x2
  3036                           
  3037  0022                     ___awdiv@dividend:	
  3038                           ; 2 bytes @ 0x2
  3039                           
  3040  0022                     ___awmod@dividend:	
  3041                           ; 2 bytes @ 0x2
  3042                           
  3043  0022                     ___lwdiv@dividend:	
  3044                           ; 2 bytes @ 0x2
  3045                           
  3046  0022                     strncmp@s2:	
  3047                           ; 2 bytes @ 0x2
  3048                           
  3049                           
  3050                           ; 2 bytes @ 0x2
  3051  0022                     	ds	1
  3052  0023                     ??_PROTOCOL_Write_Device_Address:	
  3053  0023                     ??_PROTOCOL_SAV:	
  3054                           ; 1 bytes @ 0x3
  3055                           
  3056  0023                     I2C1_MasterTRBInsert@count:	
  3057                           ; 1 bytes @ 0x3
  3058                           
  3059  0023                     PROTOCOL_Initialize@start_handler:	
  3060                           ; 1 bytes @ 0x3
  3061                           
  3062  0023                     I2C1_MasterReadTRBBuild@address:	
  3063                           ; 1 bytes @ 0x3
  3064                           
  3065                           
  3066                           ; 2 bytes @ 0x3
  3067  0023                     	ds	1
  3068  0024                     ??_I2C1_MasterWriteTRBBuild:	
  3069  0024                     ??___wmul:	
  3070                           ; 1 bytes @ 0x4
  3071                           
  3072  0024                     ??___awdiv:	
  3073                           ; 1 bytes @ 0x4
  3074                           
  3075  0024                     ??___awmod:	
  3076                           ; 1 bytes @ 0x4
  3077                           
  3078  0024                     ??___lwdiv:	
  3079                           ; 1 bytes @ 0x4
  3080                           
  3081  0024                     PROTOCOL_Initialize@stop_handler:	
  3082                           ; 1 bytes @ 0x4
  3083                           
  3084  0024                     PROTOCOL_Write_Device_Address@device_id_i2c:	
  3085                           ; 1 bytes @ 0x4
  3086                           
  3087  0024                     ___wmul@product:	
  3088                           ; 1 bytes @ 0x4
  3089                           
  3090  0024                     strncmp@len:	
  3091                           ; 2 bytes @ 0x4
  3092                           
  3093                           
  3094                           ; 2 bytes @ 0x4
  3095  0024                     	ds	1
  3096  0025                     ??_I2C1_MasterReadTRBBuild:	
  3097  0025                     PROTOCOL_Initialize@set_handler:	
  3098                           ; 1 bytes @ 0x5
  3099                           
  3100  0025                     ___awdiv@counter:	
  3101                           ; 1 bytes @ 0x5
  3102                           
  3103  0025                     ___awmod@counter:	
  3104                           ; 1 bytes @ 0x5
  3105                           
  3106  0025                     ___lwdiv@counter:	
  3107                           ; 1 bytes @ 0x5
  3108                           
  3109                           
  3110                           ; 1 bytes @ 0x5
  3111  0025                     	ds	1
  3112  0026                     ??_strncmp:	
  3113  0026                     ?_atoi:	
  3114                           ; 1 bytes @ 0x6
  3115                           
  3116  0026                     ?_strcpy:	
  3117                           ; 2 bytes @ 0x6
  3118                           
  3119  0026                     I2C1_MasterWriteTRBBuild@ptrb:	
  3120                           ; 2 bytes @ 0x6
  3121                           
  3122  0026                     dev_map_iterator@exist:	
  3123                           ; 1 bytes @ 0x6
  3124                           
  3125  0026                     ___awdiv@sign:	
  3126                           ; 1 bytes @ 0x6
  3127                           
  3128  0026                     ___awmod@sign:	
  3129                           ; 1 bytes @ 0x6
  3130                           
  3131  0026                     PROTOCOL_Initialize@inv_handler:	
  3132                           ; 1 bytes @ 0x6
  3133                           
  3134  0026                     atoi@s:	
  3135                           ; 2 bytes @ 0x6
  3136                           
  3137  0026                     ___lwdiv@quotient:	
  3138                           ; 2 bytes @ 0x6
  3139                           
  3140  0026                     strcpy@to:	
  3141                           ; 2 bytes @ 0x6
  3142                           
  3143                           
  3144                           ; 2 bytes @ 0x6
  3145  0026                     	ds	1
  3146  0027                     ?_I2C1_MasterWrite:	
  3147  0027                     ?_abs:	
  3148                           ; 1 bytes @ 0x7
  3149                           
  3150  0027                     I2C1_MasterWrite@length:	
  3151                           ; 2 bytes @ 0x7
  3152                           
  3153  0027                     I2C1_MasterReadTRBBuild@ptrb:	
  3154                           ; 1 bytes @ 0x7
  3155                           
  3156  0027                     dev_map_iterator@dev_addr:	
  3157                           ; 1 bytes @ 0x7
  3158                           
  3159  0027                     concat@msb:	
  3160                           ; 1 bytes @ 0x7
  3161                           
  3162  0027                     abs@a:	
  3163                           ; 1 bytes @ 0x7
  3164                           
  3165  0027                     ___awdiv@quotient:	
  3166                           ; 2 bytes @ 0x7
  3167                           
  3168                           
  3169                           ; 2 bytes @ 0x7
  3170  0027                     	ds	1
  3171  0028                     ??_atoi:	
  3172  0028                     ?_I2C1_MasterRead:	
  3173                           ; 1 bytes @ 0x8
  3174                           
  3175  0028                     ?___lwmod:	
  3176                           ; 1 bytes @ 0x8
  3177                           
  3178  0028                     PROTOCOL_Initialize@scaler:	
  3179                           ; 2 bytes @ 0x8
  3180                           
  3181  0028                     strcpy@from:	
  3182                           ; 1 bytes @ 0x8
  3183                           
  3184  0028                     I2C1_MasterWrite@address:	
  3185                           ; 1 bytes @ 0x8
  3186                           
  3187  0028                     I2C1_MasterRead@pdata:	
  3188                           ; 2 bytes @ 0x8
  3189                           
  3190  0028                     ___lwmod@divisor:	
  3191                           ; 2 bytes @ 0x8
  3192                           
  3193                           
  3194                           ; 2 bytes @ 0x8
  3195  0028                     	ds	1
  3196  0029                     ??_strcpy:	
  3197  0029                     ??_PROTOCOL_Initialize:	
  3198                           ; 1 bytes @ 0x9
  3199                           
  3200  0029                     ??_abs:	
  3201                           ; 1 bytes @ 0x9
  3202                           
  3203  0029                     ??_init:	
  3204                           ; 1 bytes @ 0x9
  3205                           
  3206  0029                     ??_add_dev:	
  3207                           ; 1 bytes @ 0x9
  3208                           
  3209  0029                     ??_del_dev:	
  3210                           ; 1 bytes @ 0x9
  3211                           
  3212  0029                     ??_detected:	
  3213                           ; 1 bytes @ 0x9
  3214                           
  3215                           
  3216                           ; 1 bytes @ 0x9
  3217  0029                     	ds	1
  3218  002A                     I2C1_MasterWrite@pflag:	
  3219  002A                     I2C1_MasterRead@length:	
  3220                           ; 1 bytes @ 0xA
  3221                           
  3222  002A                     atoi@sign:	
  3223                           ; 1 bytes @ 0xA
  3224                           
  3225  002A                     ___lwmod@dividend:	
  3226                           ; 1 bytes @ 0xA
  3227                           
  3228  002A                     strcpy@cp:	
  3229                           ; 2 bytes @ 0xA
  3230                           
  3231                           
  3232                           ; 2 bytes @ 0xA
  3233  002A                     	ds	1
  3234  002B                     ??_I2C1_MasterWrite:	
  3235  002B                     I2C1_MasterRead@address:	
  3236                           ; 1 bytes @ 0xB
  3237                           
  3238  002B                     atoi@a:	
  3239                           ; 2 bytes @ 0xB
  3240                           
  3241                           
  3242                           ; 2 bytes @ 0xB
  3243  002B                     	ds	1
  3244  002C                     ??_put_cmd:	
  3245  002C                     ??___lwmod:	
  3246                           ; 1 bytes @ 0xC
  3247                           
  3248  002C                     add_dev@x:	
  3249                           ; 1 bytes @ 0xC
  3250                           
  3251  002C                     del_dev@x:	
  3252                           ; 1 bytes @ 0xC
  3253                           
  3254  002C                     detected@y:	
  3255                           ; 1 bytes @ 0xC
  3256                           
  3257                           
  3258                           ; 1 bytes @ 0xC
  3259  002C                     	ds	1
  3260  002D                     I2C1_MasterWrite@pdata:	
  3261  002D                     I2C1_MasterRead@pflag:	
  3262                           ; 1 bytes @ 0xD
  3263                           
  3264  002D                     add_dev@old_map:	
  3265                           ; 1 bytes @ 0xD
  3266                           
  3267  002D                     del_dev@old_map:	
  3268                           ; 1 bytes @ 0xD
  3269                           
  3270  002D                     detected@x:	
  3271                           ; 1 bytes @ 0xD
  3272                           
  3273  002D                     ___lwmod@counter:	
  3274                           ; 1 bytes @ 0xD
  3275                           
  3276                           
  3277                           ; 1 bytes @ 0xD
  3278  002D                     	ds	1
  3279  002E                     ?_i2c1_write_no_data:	
  3280  002E                     ?_i2c1_write:	
  3281                           ; 1 bytes @ 0xE
  3282                           
  3283  002E                     ??_I2C1_MasterRead:	
  3284                           ; 1 bytes @ 0xE
  3285                           
  3286  002E                     ?_printf:	
  3287                           ; 1 bytes @ 0xE
  3288                           
  3289  002E                     add_dev@new_map:	
  3290                           ; 2 bytes @ 0xE
  3291                           
  3292  002E                     del_dev@new_map:	
  3293                           ; 1 bytes @ 0xE
  3294                           
  3295  002E                     detected@exist:	
  3296                           ; 1 bytes @ 0xE
  3297                           
  3298  002E                     i2c1_write@dev_addr:	
  3299                           ; 1 bytes @ 0xE
  3300                           
  3301  002E                     i2c1_write_no_data@dev_addr:	
  3302                           ; 2 bytes @ 0xE
  3303                           
  3304  002E                     printf@f:	
  3305                           ; 2 bytes @ 0xE
  3306                           
  3307                           
  3308                           ; 2 bytes @ 0xE
  3309  002E                     	ds	1
  3310  002F                     init@dev_addr:	
  3311  002F                     add_dev@y:	
  3312                           ; 1 bytes @ 0xF
  3313                           
  3314  002F                     del_dev@y:	
  3315                           ; 1 bytes @ 0xF
  3316                           
  3317  002F                     detected@dev_addr:	
  3318                           ; 1 bytes @ 0xF
  3319                           
  3320                           
  3321                           ; 1 bytes @ 0xF
  3322  002F                     	ds	1
  3323  0030                     ?_i2c1_read:	
  3324  0030                     init@y:	
  3325                           ; 1 bytes @ 0x10
  3326                           
  3327  0030                     add_dev@dev_addr:	
  3328                           ; 1 bytes @ 0x10
  3329                           
  3330  0030                     del_dev@dev_addr:	
  3331                           ; 1 bytes @ 0x10
  3332                           
  3333  0030                     i2c1_write@pbuf:	
  3334                           ; 1 bytes @ 0x10
  3335                           
  3336  0030                     i2c1_write_no_data@reg_addr:	
  3337                           ; 1 bytes @ 0x10
  3338                           
  3339  0030                     i2c1_read@dev_addr:	
  3340                           ; 1 bytes @ 0x10
  3341                           
  3342                           
  3343                           ; 2 bytes @ 0x10
  3344  0030                     	ds	1
  3345  0031                     ??_i2c1_write_no_data:	
  3346  0031                     init@i:	
  3347                           ; 1 bytes @ 0x11
  3348                           
  3349  0031                     put_cmd@buf:	
  3350                           ; 1 bytes @ 0x11
  3351                           
  3352  0031                     i2c1_write@len:	
  3353                           ; 1 bytes @ 0x11
  3354                           
  3355                           
  3356                           ; 1 bytes @ 0x11
  3357  0031                     	ds	1
  3358  0032                     ??_i2c1_write:	
  3359  0032                     i2c1_read@reg_addr:	
  3360                           ; 1 bytes @ 0x12
  3361                           
  3362  0032                     i2c1_write_no_data@write_status:	
  3363                           ; 1 bytes @ 0x12
  3364                           
  3365                           
  3366                           ; 1 bytes @ 0x12
  3367  0032                     	ds	1
  3368  0033                     i2c1_write_no_data@buf:	
  3369  0033                     i2c1_read@pbuf:	
  3370                           ; 1 bytes @ 0x13
  3371                           
  3372                           
  3373                           ; 2 bytes @ 0x13
  3374  0033                     	ds	1
  3375  0034                     ??_printf:	
  3376  0034                     i2c1_write@write_status:	
  3377                           ; 1 bytes @ 0x14
  3378                           
  3379  0034                     i2c1_write_no_data@status:	
  3380                           ; 1 bytes @ 0x14
  3381                           
  3382                           
  3383                           ; 1 bytes @ 0x14
  3384  0034                     	ds	1
  3385  0035                     i2c1_write@status:	
  3386  0035                     i2c1_read@len:	
  3387                           ; 1 bytes @ 0x15
  3388                           
  3389                           
  3390                           ; 1 bytes @ 0x15
  3391  0035                     	ds	1
  3392  0036                     ??_i2c1_read:	
  3393                           
  3394                           ; 1 bytes @ 0x16
  3395  0036                     	ds	2
  3396  0038                     i2c1_read@read_status:	
  3397  0038                     printf@prec:	
  3398                           ; 1 bytes @ 0x18
  3399                           
  3400                           
  3401                           ; 1 bytes @ 0x18
  3402  0038                     	ds	1
  3403  0039                     i2c1_read@reg:	
  3404  0039                     printf@cp:	
  3405                           ; 1 bytes @ 0x19
  3406                           
  3407                           
  3408                           ; 2 bytes @ 0x19
  3409  0039                     	ds	1
  3410  003A                     i2c1_read@status:	
  3411                           
  3412                           ; 1 bytes @ 0x1A
  3413  003A                     	ds	1
  3414  003B                     ??_scan_dev:	
  3415  003B                     printf@ap:	
  3416                           ; 1 bytes @ 0x1B
  3417                           
  3418                           
  3419                           ; 1 bytes @ 0x1B
  3420  003B                     	ds	1
  3421  003C                     printf@val:	
  3422                           
  3423                           ; 2 bytes @ 0x1C
  3424  003C                     	ds	2
  3425  003E                     scan_dev@status:	
  3426  003E                     printf@len:	
  3427                           ; 1 bytes @ 0x1E
  3428                           
  3429                           
  3430                           ; 2 bytes @ 0x1E
  3431  003E                     	ds	1
  3432  003F                     scan_dev@dev_addr:	
  3433                           
  3434                           ; 1 bytes @ 0x1F
  3435  003F                     	ds	1
  3436  0040                     ??_check_plg:	
  3437  0040                     printf@flag:	
  3438                           ; 1 bytes @ 0x20
  3439                           
  3440                           
  3441                           ; 1 bytes @ 0x20
  3442  0040                     	ds	1
  3443  0041                     printf@width:	
  3444                           
  3445                           ; 2 bytes @ 0x21
  3446  0041                     	ds	1
  3447  0042                     check_plg@status:	
  3448                           
  3449                           ; 1 bytes @ 0x22
  3450  0042                     	ds	1
  3451  0043                     printf@c:	
  3452                           
  3453                           ; 1 bytes @ 0x23
  3454  0043                     	ds	1
  3455  0044                     ?_PROTOCOL_Print_TLV:	
  3456  0044                     ??_exec_remote_cmd:	
  3457                           ; 1 bytes @ 0x24
  3458                           
  3459  0044                     ??_print_dev_map:	
  3460                           ; 1 bytes @ 0x24
  3461                           
  3462  0044                     PROTOCOL_Print_TLV@type:	
  3463                           ; 1 bytes @ 0x24
  3464                           
  3465                           
  3466                           ; 1 bytes @ 0x24
  3467  0044                     	ds	1
  3468  0045                     PROTOCOL_Print_TLV@length:	
  3469                           
  3470                           ; 1 bytes @ 0x25
  3471  0045                     	ds	1
  3472  0046                     print_dev_map@i:	
  3473  0046                     PROTOCOL_Print_TLV@pbuffer:	
  3474                           ; 1 bytes @ 0x26
  3475                           
  3476                           
  3477                           ; 1 bytes @ 0x26
  3478  0046                     	ds	1
  3479  0047                     ??_PROTOCOL_Print_TLV:	
  3480  0047                     print_dev_map@len:	
  3481                           ; 1 bytes @ 0x27
  3482                           
  3483                           
  3484                           ; 1 bytes @ 0x27
  3485  0047                     	ds	2
  3486  0049                     ??_tick_handler:	
  3487                           
  3488                           ; 1 bytes @ 0x29
  3489  0049                     	ds	1
  3490  004A                     PROTOCOL_Print_TLV@dev_addr:	
  3491                           
  3492                           ; 1 bytes @ 0x2A
  3493  004A                     	ds	1
  3494  004B                     PROTOCOL_Print_TLV@v:	
  3495                           
  3496                           ; 2 bytes @ 0x2B
  3497  004B                     	ds	2
  3498  004D                     ??_sen:	
  3499                           
  3500                           ; 1 bytes @ 0x2D
  3501  004D                     	ds	5
  3502  0052                     sen@type:	
  3503                           
  3504                           ; 1 bytes @ 0x32
  3505  0052                     	ds	1
  3506  0053                     sen@length:	
  3507                           
  3508                           ; 1 bytes @ 0x33
  3509  0053                     	ds	1
  3510  0054                     sen@status:	
  3511                           
  3512                           ; 1 bytes @ 0x34
  3513  0054                     	ds	1
  3514  0055                     sen@dev_addr:	
  3515                           
  3516                           ; 1 bytes @ 0x35
  3517  0055                     	ds	1
  3518  0056                     ??_one_shot_sen:	
  3519  0056                     ??_fetch:	
  3520                           ; 1 bytes @ 0x36
  3521                           
  3522                           
  3523                           ; 1 bytes @ 0x36
  3524  0056                     	ds	3
  3525  0059                     one_shot_sen@status:	
  3526  0059                     fetch@status:	
  3527                           ; 1 bytes @ 0x39
  3528                           
  3529                           
  3530                           ; 1 bytes @ 0x39
  3531  0059                     	ds	1
  3532  005A                     one_shot_sen@dev_addr:	
  3533  005A                     fetch@sch:	
  3534                           ; 1 bytes @ 0x3A
  3535                           
  3536                           
  3537                           ; 1 bytes @ 0x3A
  3538  005A                     	ds	1
  3539  005B                     ?_command_handler:	
  3540  005B                     fetch@pos:	
  3541                           ; 1 bytes @ 0x3B
  3542                           
  3543  005B                     command_handler@buf:	
  3544                           ; 1 bytes @ 0x3B
  3545                           
  3546                           
  3547                           ; 1 bytes @ 0x3B
  3548  005B                     	ds	1
  3549  005C                     ??_command_handler:	
  3550  005C                     fetch@dev_addr:	
  3551                           ; 1 bytes @ 0x3C
  3552                           
  3553                           
  3554                           ; 1 bytes @ 0x3C
  3555  005C                     	ds	1
  3556  005D                     ??_inv_handler:	
  3557                           
  3558                           ; 1 bytes @ 0x3D
  3559  005D                     	ds	6
  3560  0063                     command_handler@dev_addr:	
  3561                           
  3562                           ; 1 bytes @ 0x43
  3563  0063                     	ds	1
  3564  0064                     command_handler@i:	
  3565                           
  3566                           ; 1 bytes @ 0x44
  3567  0064                     	ds	1
  3568  0065                     ??_PROTOCOL_EXT:	
  3569                           
  3570                           ; 1 bytes @ 0x45
  3571  0065                     	ds	1
  3572  0066                     PROTOCOL_EXT@char_buf:	
  3573                           
  3574                           ; 1 bytes @ 0x46
  3575  0066                     	ds	1
  3576  0067                     ??_PROTOCOL_Loop:	
  3577                           
  3578                           ; 1 bytes @ 0x47
  3579  0067                     	ds	2
  3580  0069                     PROTOCOL_Loop@c:	
  3581                           
  3582                           ; 1 bytes @ 0x49
  3583  0069                     	ds	1
  3584  006A                     PROTOCOL_Loop@device_address:	
  3585                           
  3586                           ; 1 bytes @ 0x4A
  3587  006A                     	ds	1
  3588  006B                     ??_main:	
  3589                           
  3590                           	psect	maintext
  3591  14D5                     __pmaintext:	
  3592                           ; 1 bytes @ 0x4B
  3593 ;;
  3594 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3595 ;;
  3596 ;; *************** function _main *****************
  3597 ;; Defined at:
  3598 ;;		line 411 in file "main.c"
  3599 ;; Parameters:    Size  Location     Type
  3600 ;;		None
  3601 ;; Auto vars:     Size  Location     Type
  3602 ;;		None
  3603 ;; Return value:  Size  Location     Type
  3604 ;;                  1    wreg      void 
  3605 ;; Registers used:
  3606 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3607 ;; Tracked objects:
  3608 ;;		On entry : B1F/0
  3609 ;;		On exit  : 0/0
  3610 ;;		Unchanged: 0/0
  3611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3613 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3615 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3616 ;;Total ram usage:        0 bytes
  3617 ;; Hardware stack levels required when called:   12
  3618 ;; This function calls:
  3619 ;;		_PROTOCOL_Initialize
  3620 ;;		_PROTOCOL_Loop
  3621 ;;		_PROTOCOL_Set_Extension_Handler
  3622 ;;		_PROTOCOL_Set_Tick_Handler
  3623 ;;		_SYSTEM_Initialize
  3624 ;;		_init
  3625 ;; This function is called by:
  3626 ;;		Startup code after reset
  3627 ;; This function uses a non-reentrant model
  3628 ;;
  3629                           
  3630                           
  3631                           ;psect for function _main
  3632  14D5                     _main:	
  3633                           
  3634                           ;main.c: 413: init();
  3635                           
  3636                           ;incstack = 0
  3637                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3638  14D5  318A  2241  3194   	fcall	_init
  3639                           
  3640                           ;main.c: 415: SYSTEM_Initialize();
  3641  14D8  3192  2259  3194   	fcall	_SYSTEM_Initialize
  3642                           
  3643                           ;main.c: 416: (INTCONbits.GIE = 1);
  3644  14DB  178B               	bsf	11,7	;volatile
  3645                           
  3646                           ;main.c: 417: (INTCONbits.PEIE = 1);
  3647  14DC  170B               	bsf	11,6	;volatile
  3648                           
  3649                           ;main.c: 419: PROTOCOL_Initialize("BACKPLANE-MASTER", (0), (0), (0), inv_handler, 1);
  3650  14DD  309E               	movlw	low (STR_34| (0+32768))
  3651  14DE  0020               	movlb	0	; select bank0
  3652  14DF  00A1               	movwf	PROTOCOL_Initialize@device_id
  3653  14E0  3090               	movlw	high (STR_34| (0+32768))
  3654  14E1  00A2               	movwf	PROTOCOL_Initialize@device_id+1
  3655  14E2  01A3               	clrf	PROTOCOL_Initialize@start_handler
  3656  14E3  01A4               	clrf	PROTOCOL_Initialize@stop_handler
  3657  14E4  01A5               	clrf	PROTOCOL_Initialize@set_handler
  3658  14E5  30BB               	movlw	low _inv_handler
  3659  14E6  00A6               	movwf	PROTOCOL_Initialize@inv_handler
  3660  14E7  300A               	movlw	high _inv_handler
  3661  14E8  00A7               	movwf	PROTOCOL_Initialize@inv_handler+1
  3662  14E9  01A8               	clrf	PROTOCOL_Initialize@scaler
  3663  14EA  0AA8               	incf	PROTOCOL_Initialize@scaler,f
  3664  14EB  3188  2026  3194   	fcall	_PROTOCOL_Initialize
  3665                           
  3666                           ;main.c: 420: PROTOCOL_Set_Extension_Handler(command_handler);
  3667  14EE  3029               	movlw	low _command_handler
  3668  14EF  0020               	movlb	0	; select bank0
  3669  14F0  00A0               	movwf	PROTOCOL_Set_Extension_Handler@extension_handler
  3670  14F1  3003               	movlw	high _command_handler
  3671  14F2  00A1               	movwf	PROTOCOL_Set_Extension_Handler@extension_handler+1
  3672  14F3  319F  27EE  3194   	fcall	_PROTOCOL_Set_Extension_Handler
  3673                           
  3674                           ;main.c: 421: PROTOCOL_Set_Tick_Handler(tick_handler);
  3675  14F6  30CB               	movlw	low _tick_handler
  3676  14F7  0020               	movlb	0	; select bank0
  3677  14F8  00A0               	movwf	PROTOCOL_Set_Tick_Handler@tick_handler
  3678  14F9  3016               	movlw	high _tick_handler
  3679  14FA  00A1               	movwf	PROTOCOL_Set_Tick_Handler@tick_handler+1
  3680  14FB  319F  27F7  3194   	fcall	_PROTOCOL_Set_Tick_Handler
  3681                           
  3682                           ;main.c: 422: PROTOCOL_Loop();
  3683  14FE  318C  248D         	fcall	_PROTOCOL_Loop
  3684  1500  3180  283C         	ljmp	start
  3685  1502                     __end_of_main:	
  3686                           
  3687                           	psect	text1
  3688  0A41                     __ptext1:	
  3689 ;; *************** function _init *****************
  3690 ;; Defined at:
  3691 ;;		line 100 in file "main.c"
  3692 ;; Parameters:    Size  Location     Type
  3693 ;;		None
  3694 ;; Auto vars:     Size  Location     Type
  3695 ;;  i               1   17[BANK0 ] unsigned char 
  3696 ;;  y               1   16[BANK0 ] unsigned char 
  3697 ;;  dev_addr        1   15[BANK0 ] unsigned char 
  3698 ;;  k               1    0        unsigned char 
  3699 ;;  j               1    0        unsigned char 
  3700 ;; Return value:  Size  Location     Type
  3701 ;;                  1    wreg      void 
  3702 ;; Registers used:
  3703 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3704 ;; Tracked objects:
  3705 ;;		On entry : 0/0
  3706 ;;		On exit  : 0/0
  3707 ;;		Unchanged: 0/0
  3708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3710 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3711 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3712 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3713 ;;Total ram usage:        9 bytes
  3714 ;; Hardware stack levels used:    1
  3715 ;; Hardware stack levels required when called:    4
  3716 ;; This function calls:
  3717 ;;		_DATAEE_ReadByte
  3718 ;;		___awdiv
  3719 ;;		___wmul
  3720 ;; This function is called by:
  3721 ;;		_main
  3722 ;; This function uses a non-reentrant model
  3723 ;;
  3724                           
  3725                           
  3726                           ;psect for function _init
  3727  0A41                     _init:	
  3728                           
  3729                           ;main.c: 101: uint8_t y, i, j, k, dev_addr;
  3730                           ;main.c: 104: for (y=0; y<MAX_Y; y++) {
  3731                           
  3732                           ;incstack = 0
  3733                           ; Regs used in _init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3734  0A41  0020               	movlb	0	; select bank0
  3735  0A42  01B0               	clrf	init@y
  3736  0A43  300A               	movlw	low (_MAX_Y| (0+32768))
  3737  0A44  0084               	movwf	4
  3738  0A45  3090               	movlw	high (_MAX_Y| (0+32768))
  3739  0A46  0085               	movwf	5
  3740  0A47  0800               	movf	0,w	;code access
  3741  0A48  0230               	subwf	init@y,w
  3742  0A49  1803               	btfsc	3,0
  3743  0A4A  2A5D               	goto	l6032
  3744  0A4B                     l6026:	
  3745                           
  3746                           ;main.c: 105: dev_map[y] = 0;
  3747  0A4B  0830               	movf	init@y,w
  3748  0A4C  3E20               	addlw	(low (_dev_map| (0+256)))& (0+255)
  3749  0A4D  0086               	movwf	6
  3750  0A4E  3001               	movlw	1	; select bank2/3
  3751  0A4F  0087               	movwf	7
  3752  0A50  0181               	clrf	1
  3753  0A51  3001               	movlw	1
  3754  0A52  00A9               	movwf	??_init
  3755  0A53  0829               	movf	??_init,w
  3756  0A54  07B0               	addwf	init@y,f
  3757  0A55  300A               	movlw	low (_MAX_Y| (0+32768))
  3758  0A56  0084               	movwf	4
  3759  0A57  3090               	movlw	high (_MAX_Y| (0+32768))
  3760  0A58  0085               	movwf	5
  3761  0A59  0800               	movf	0,w	;code access
  3762  0A5A  0230               	subwf	init@y,w
  3763  0A5B  1C03               	skipc
  3764  0A5C  2A4B               	goto	l6026
  3765  0A5D                     l6032:	
  3766                           
  3767                           ;main.c: 106: }
  3768                           ;main.c: 109: for (i=0; i<4; i++) cmd_buf[i][0] = '\0';
  3769  0A5D  01B1               	clrf	init@i
  3770  0A5E  3004               	movlw	4
  3771  0A5F  0231               	subwf	init@i,w
  3772  0A60  1803               	btfsc	3,0
  3773  0A61  2A84               	goto	l6044
  3774  0A62                     l6038:	
  3775  0A62  0831               	movf	init@i,w
  3776  0A63  00A9               	movwf	??_init
  3777  0A64  01AA               	clrf	??_init+1
  3778  0A65  0829               	movf	??_init,w
  3779  0A66  00A0               	movwf	___wmul@multiplier
  3780  0A67  082A               	movf	??_init+1,w
  3781  0A68  00A1               	movwf	___wmul@multiplier+1
  3782  0A69  3030               	movlw	48
  3783  0A6A  00A2               	movwf	___wmul@multiplicand
  3784  0A6B  3000               	movlw	0
  3785  0A6C  00A3               	movwf	___wmul@multiplicand+1
  3786  0A6D  3193  231A  318A   	fcall	___wmul
  3787  0A70  3030               	movlw	48
  3788  0A71  0020               	movlb	0	; select bank0
  3789  0A72  00AB               	movwf	??_init+2
  3790  0A73  3023               	movlw	35
  3791  0A74  00AC               	movwf	??_init+3
  3792  0A75  0820               	movf	?___wmul,w
  3793  0A76  072B               	addwf	??_init+2,w
  3794  0A77  0086               	movwf	6
  3795  0A78  0821               	movf	?___wmul+1,w
  3796  0A79  3D2C               	addwfc	??_init+3,w
  3797  0A7A  0087               	movwf	7
  3798  0A7B  0181               	clrf	1
  3799  0A7C  3001               	movlw	1
  3800  0A7D  00A9               	movwf	??_init
  3801  0A7E  0829               	movf	??_init,w
  3802  0A7F  07B1               	addwf	init@i,f
  3803  0A80  3004               	movlw	4
  3804  0A81  0231               	subwf	init@i,w
  3805  0A82  1C03               	skipc
  3806  0A83  2A62               	goto	l6038
  3807  0A84                     l6044:	
  3808                           
  3809                           ;main.c: 112: for (i=0; i<28; i++) {
  3810  0A84  01B1               	clrf	init@i
  3811  0A85                     L1:	
  3812  0A85  301C               	movlw	28
  3813  0A86  0231               	subwf	init@i,w
  3814  0A87  1803               	btfsc	3,0
  3815  0A88  0008               	return
  3816                           
  3817                           ;main.c: 113: dev_addr = DATAEE_ReadByte(2+i);
  3818  0A89  0831               	movf	init@i,w
  3819  0A8A  3E02               	addlw	2
  3820  0A8B  3191  21FB  318A   	fcall	_DATAEE_ReadByte
  3821  0A8E  0020               	movlb	0	; select bank0
  3822  0A8F  00A9               	movwf	??_init
  3823  0A90  0829               	movf	??_init,w
  3824  0A91  00AF               	movwf	init@dev_addr
  3825                           
  3826                           ;main.c: 114: schedule[i/4][i%4] = dev_addr;
  3827  0A92  082F               	movf	init@dev_addr,w
  3828  0A93  00A9               	movwf	??_init
  3829  0A94  3004               	movlw	4
  3830  0A95  00A0               	movwf	___awdiv@divisor
  3831  0A96  3000               	movlw	0
  3832  0A97  00A1               	movwf	___awdiv@divisor+1
  3833  0A98  0831               	movf	init@i,w
  3834  0A99  00AA               	movwf	??_init+1
  3835  0A9A  01AB               	clrf	??_init+2
  3836  0A9B  082A               	movf	??_init+1,w
  3837  0A9C  00A2               	movwf	___awdiv@dividend
  3838  0A9D  082B               	movf	??_init+2,w
  3839  0A9E  00A3               	movwf	___awdiv@dividend+1
  3840  0A9F  3188  2078  318A   	fcall	___awdiv
  3841  0AA2  0020               	movlb	0	; select bank0
  3842  0AA3  0820               	movf	?___awdiv,w
  3843  0AA4  00AC               	movwf	??_init+3
  3844  0AA5  3002               	movlw	2
  3845  0AA6                     u7185:	
  3846  0AA6  35AC               	lslf	??_init+3,f
  3847  0AA7  0B89               	decfsz	9,f
  3848  0AA8  2AA6               	goto	u7185
  3849  0AA9  30A0               	movlw	(low (_schedule| (0+256)))& (0+255)
  3850  0AAA  072C               	addwf	??_init+3,w
  3851  0AAB  00AD               	movwf	??_init+4
  3852  0AAC  0831               	movf	init@i,w
  3853  0AAD  3903               	andlw	3
  3854  0AAE  072D               	addwf	??_init+4,w
  3855  0AAF  00AE               	movwf	??_init+5
  3856  0AB0  082E               	movf	??_init+5,w
  3857  0AB1  0086               	movwf	6
  3858  0AB2  3001               	movlw	1	; select bank3/4
  3859  0AB3  0087               	movwf	7
  3860  0AB4  0829               	movf	??_init,w
  3861  0AB5  0081               	movwf	1
  3862  0AB6  3001               	movlw	1
  3863  0AB7  00A9               	movwf	??_init
  3864  0AB8  0829               	movf	??_init,w
  3865  0AB9  07B1               	addwf	init@i,f
  3866  0ABA  2A85               	goto	L1
  3867  0ABB                     __end_of_init:	
  3868                           
  3869                           	psect	text2
  3870  1259                     __ptext2:	
  3871 ;; *************** function _SYSTEM_Initialize *****************
  3872 ;; Defined at:
  3873 ;;		line 69 in file "mcc_generated_files/mcc.c"
  3874 ;; Parameters:    Size  Location     Type
  3875 ;;		None
  3876 ;; Auto vars:     Size  Location     Type
  3877 ;;		None
  3878 ;; Return value:  Size  Location     Type
  3879 ;;                  1    wreg      void 
  3880 ;; Registers used:
  3881 ;;		wreg, status,2, status,0, pclath, cstack
  3882 ;; Tracked objects:
  3883 ;;		On entry : 0/0
  3884 ;;		On exit  : 0/0
  3885 ;;		Unchanged: 0/0
  3886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3888 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3890 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3891 ;;Total ram usage:        0 bytes
  3892 ;; Hardware stack levels used:    1
  3893 ;; Hardware stack levels required when called:    4
  3894 ;; This function calls:
  3895 ;;		_EUSART_Initialize
  3896 ;;		_I2C1_Initialize
  3897 ;;		_OSCILLATOR_Initialize
  3898 ;;		_PIN_MANAGER_Initialize
  3899 ;;		_TMR0_Initialize
  3900 ;;		_WDT_Initialize
  3901 ;; This function is called by:
  3902 ;;		_main
  3903 ;; This function uses a non-reentrant model
  3904 ;;
  3905                           
  3906                           
  3907                           ;psect for function _SYSTEM_Initialize
  3908  1259                     _SYSTEM_Initialize:	
  3909                           
  3910                           ;mcc.c: 72: PIN_MANAGER_Initialize();
  3911                           
  3912                           ;incstack = 0
  3913                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3914  1259  3193  2352  3192   	fcall	_PIN_MANAGER_Initialize
  3915                           
  3916                           ;mcc.c: 73: OSCILLATOR_Initialize();
  3917  125C  319F  27DF  3192   	fcall	_OSCILLATOR_Initialize
  3918                           
  3919                           ;mcc.c: 74: WDT_Initialize();
  3920  125F  3187  27FC  3192   	fcall	_WDT_Initialize
  3921                           
  3922                           ;mcc.c: 75: I2C1_Initialize();
  3923  1262  3193  2336  3192   	fcall	_I2C1_Initialize
  3924                           
  3925                           ;mcc.c: 76: TMR0_Initialize();
  3926  1265  3191  21E4  3192   	fcall	_TMR0_Initialize
  3927                           
  3928                           ;mcc.c: 77: EUSART_Initialize();
  3929  1268  3192  22AD         	fcall	_EUSART_Initialize
  3930  126A  0008               	return
  3931  126B                     __end_of_SYSTEM_Initialize:	
  3932                           
  3933                           	psect	text3
  3934  07FC                     __ptext3:	
  3935 ;; *************** function _WDT_Initialize *****************
  3936 ;; Defined at:
  3937 ;;		line 92 in file "mcc_generated_files/mcc.c"
  3938 ;; Parameters:    Size  Location     Type
  3939 ;;		None
  3940 ;; Auto vars:     Size  Location     Type
  3941 ;;		None
  3942 ;; Return value:  Size  Location     Type
  3943 ;;                  1    wreg      void 
  3944 ;; Registers used:
  3945 ;;		wreg
  3946 ;; Tracked objects:
  3947 ;;		On entry : 0/0
  3948 ;;		On exit  : 0/0
  3949 ;;		Unchanged: 0/0
  3950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3952 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3954 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3955 ;;Total ram usage:        0 bytes
  3956 ;; Hardware stack levels used:    1
  3957 ;; Hardware stack levels required when called:    3
  3958 ;; This function calls:
  3959 ;;		Nothing
  3960 ;; This function is called by:
  3961 ;;		_SYSTEM_Initialize
  3962 ;; This function uses a non-reentrant model
  3963 ;;
  3964                           
  3965                           
  3966                           ;psect for function _WDT_Initialize
  3967  07FC                     _WDT_Initialize:	
  3968                           
  3969                           ;mcc.c: 95: WDTCON = 0x16;
  3970                           
  3971                           ;incstack = 0
  3972                           ; Regs used in _WDT_Initialize: [wreg]
  3973  07FC  3016               	movlw	22
  3974  07FD  0021               	movlb	1	; select bank1
  3975  07FE  0097               	movwf	23	;volatile
  3976  07FF  0008               	return
  3977  0800                     __end_of_WDT_Initialize:	
  3978                           
  3979                           	psect	text4
  3980  11E4                     __ptext4:	
  3981 ;; *************** function _TMR0_Initialize *****************
  3982 ;; Defined at:
  3983 ;;		line 62 in file "mcc_generated_files/tmr0.c"
  3984 ;; Parameters:    Size  Location     Type
  3985 ;;		None
  3986 ;; Auto vars:     Size  Location     Type
  3987 ;;		None
  3988 ;; Return value:  Size  Location     Type
  3989 ;;                  1    wreg      void 
  3990 ;; Registers used:
  3991 ;;		wreg, status,2
  3992 ;; Tracked objects:
  3993 ;;		On entry : 0/0
  3994 ;;		On exit  : 0/0
  3995 ;;		Unchanged: 0/0
  3996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3998 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3999 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4000 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4001 ;;Total ram usage:        0 bytes
  4002 ;; Hardware stack levels used:    1
  4003 ;; Hardware stack levels required when called:    3
  4004 ;; This function calls:
  4005 ;;		Nothing
  4006 ;; This function is called by:
  4007 ;;		_SYSTEM_Initialize
  4008 ;; This function uses a non-reentrant model
  4009 ;;
  4010                           
  4011                           
  4012                           ;psect for function _TMR0_Initialize
  4013  11E4                     _TMR0_Initialize:	
  4014                           
  4015                           ;tmr0.c: 67: OPTION_REG = (OPTION_REG & 0xC0) | 0xD7 & 0x3F;
  4016                           
  4017                           ;incstack = 0
  4018                           ; Regs used in _TMR0_Initialize: [wreg+status,2]
  4019  11E4  0021               	movlb	1	; select bank1
  4020  11E5  0815               	movf	21,w	;volatile
  4021  11E6  39C0               	andlw	192
  4022  11E7  3817               	iorlw	23
  4023  11E8  0095               	movwf	21	;volatile
  4024                           
  4025                           ;tmr0.c: 70: TMR0 = 0x00;
  4026  11E9  0020               	movlb	0	; select bank0
  4027  11EA  0195               	clrf	21	;volatile
  4028                           
  4029                           ;tmr0.c: 73: timer0ReloadVal= 0;
  4030  11EB  0021               	movlb	1	; select bank1
  4031  11EC  01E5               	clrf	_timer0ReloadVal^(0+128)	;volatile
  4032                           
  4033                           ;tmr0.c: 76: INTCONbits.TMR0IF = 0;
  4034  11ED  110B               	bcf	11,2	;volatile
  4035  11EE  0008               	return
  4036  11EF                     __end_of_TMR0_Initialize:	
  4037                           
  4038                           	psect	text5
  4039  1352                     __ptext5:	
  4040 ;; *************** function _PIN_MANAGER_Initialize *****************
  4041 ;; Defined at:
  4042 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
  4043 ;; Parameters:    Size  Location     Type
  4044 ;;		None
  4045 ;; Auto vars:     Size  Location     Type
  4046 ;;		None
  4047 ;; Return value:  Size  Location     Type
  4048 ;;                  1    wreg      void 
  4049 ;; Registers used:
  4050 ;;		wreg, status,2
  4051 ;; Tracked objects:
  4052 ;;		On entry : 0/0
  4053 ;;		On exit  : 0/0
  4054 ;;		Unchanged: 0/0
  4055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4057 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4058 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4059 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4060 ;;Total ram usage:        0 bytes
  4061 ;; Hardware stack levels used:    1
  4062 ;; Hardware stack levels required when called:    3
  4063 ;; This function calls:
  4064 ;;		Nothing
  4065 ;; This function is called by:
  4066 ;;		_SYSTEM_Initialize
  4067 ;; This function uses a non-reentrant model
  4068 ;;
  4069                           
  4070                           
  4071                           ;psect for function _PIN_MANAGER_Initialize
  4072  1352                     _PIN_MANAGER_Initialize:	
  4073                           
  4074                           ;pin_manager.c: 56: LATA = 0x00;
  4075                           
  4076                           ;incstack = 0
  4077                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  4078  1352  0022               	movlb	2	; select bank2
  4079  1353  018C               	clrf	12	;volatile
  4080                           
  4081                           ;pin_manager.c: 57: LATB = 0x00;
  4082  1354  018D               	clrf	13	;volatile
  4083                           
  4084                           ;pin_manager.c: 58: LATC = 0x00;
  4085  1355  018E               	clrf	14	;volatile
  4086                           
  4087                           ;pin_manager.c: 63: TRISA = 0x3F;
  4088  1356  303F               	movlw	63
  4089  1357  0021               	movlb	1	; select bank1
  4090  1358  008C               	movwf	12	;volatile
  4091                           
  4092                           ;pin_manager.c: 64: TRISB = 0xF0;
  4093  1359  30F0               	movlw	240
  4094  135A  008D               	movwf	13	;volatile
  4095                           
  4096                           ;pin_manager.c: 65: TRISC = 0x7F;
  4097  135B  307F               	movlw	127
  4098  135C  008E               	movwf	14	;volatile
  4099                           
  4100                           ;pin_manager.c: 70: ANSELC = 0x4F;
  4101  135D  304F               	movlw	79
  4102  135E  0023               	movlb	3	; select bank3
  4103  135F  008E               	movwf	14	;volatile
  4104                           
  4105                           ;pin_manager.c: 71: ANSELB = 0x20;
  4106  1360  3020               	movlw	32
  4107  1361  008D               	movwf	13	;volatile
  4108                           
  4109                           ;pin_manager.c: 72: ANSELA = 0x17;
  4110  1362  3017               	movlw	23
  4111  1363  008C               	movwf	12	;volatile
  4112                           
  4113                           ;pin_manager.c: 77: WPUB = 0x00;
  4114  1364  0024               	movlb	4	; select bank4
  4115  1365  018D               	clrf	13	;volatile
  4116                           
  4117                           ;pin_manager.c: 78: WPUA = 0x3F;
  4118  1366  303F               	movlw	63
  4119  1367  008C               	movwf	12	;volatile
  4120                           
  4121                           ;pin_manager.c: 79: WPUC = 0xBF;
  4122  1368  30BF               	movlw	191
  4123  1369  008E               	movwf	14	;volatile
  4124                           
  4125                           ;pin_manager.c: 80: OPTION_REGbits.nWPUEN = 0;
  4126  136A  0021               	movlb	1	; select bank1
  4127  136B  1395               	bcf	21,7	;volatile
  4128                           
  4129                           ;pin_manager.c: 86: APFCON1 = 0x00;
  4130  136C  0022               	movlb	2	; select bank2
  4131  136D  019E               	clrf	30	;volatile
  4132                           
  4133                           ;pin_manager.c: 87: APFCON0 = 0x84;
  4134  136E  3084               	movlw	132
  4135  136F  009D               	movwf	29	;volatile
  4136  1370  0008               	return
  4137  1371                     __end_of_PIN_MANAGER_Initialize:	
  4138                           
  4139                           	psect	text6
  4140  1FDF                     __ptext6:	
  4141 ;; *************** function _OSCILLATOR_Initialize *****************
  4142 ;; Defined at:
  4143 ;;		line 80 in file "mcc_generated_files/mcc.c"
  4144 ;; Parameters:    Size  Location     Type
  4145 ;;		None
  4146 ;; Auto vars:     Size  Location     Type
  4147 ;;		None
  4148 ;; Return value:  Size  Location     Type
  4149 ;;                  1    wreg      void 
  4150 ;; Registers used:
  4151 ;;		wreg, status,2
  4152 ;; Tracked objects:
  4153 ;;		On entry : 0/0
  4154 ;;		On exit  : 0/0
  4155 ;;		Unchanged: 0/0
  4156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4158 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4159 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4160 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4161 ;;Total ram usage:        0 bytes
  4162 ;; Hardware stack levels used:    1
  4163 ;; Hardware stack levels required when called:    3
  4164 ;; This function calls:
  4165 ;;		Nothing
  4166 ;; This function is called by:
  4167 ;;		_SYSTEM_Initialize
  4168 ;; This function uses a non-reentrant model
  4169 ;;
  4170                           
  4171                           
  4172                           ;psect for function _OSCILLATOR_Initialize
  4173  1FDF                     _OSCILLATOR_Initialize:	
  4174                           
  4175                           ;mcc.c: 83: OSCCON = 0x70;
  4176                           
  4177                           ;incstack = 0
  4178                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  4179  1FDF  3070               	movlw	112
  4180  1FE0  0021               	movlb	1	; select bank1
  4181  1FE1  0099               	movwf	25	;volatile
  4182                           
  4183                           ;mcc.c: 85: OSCTUNE = 0x00;
  4184  1FE2  0198               	clrf	24	;volatile
  4185  1FE3                     l355:	
  4186                           ;mcc.c: 88: {
  4187                           
  4188                           ;mcc.c: 87: while(PLLR == 0)
  4189                           
  4190  1FE3  1B1A               	btfsc	26,6	;volatile
  4191  1FE4  0008               	return
  4192  1FE5  2FE3               	goto	l355
  4193  1FE6                     __end_of_OSCILLATOR_Initialize:	
  4194                           
  4195                           	psect	text7
  4196  1336                     __ptext7:	
  4197 ;; *************** function _I2C1_Initialize *****************
  4198 ;; Defined at:
  4199 ;;		line 198 in file "mcc_generated_files/i2c1.c"
  4200 ;; Parameters:    Size  Location     Type
  4201 ;;		None
  4202 ;; Auto vars:     Size  Location     Type
  4203 ;;		None
  4204 ;; Return value:  Size  Location     Type
  4205 ;;                  1    wreg      void 
  4206 ;; Registers used:
  4207 ;;		wreg, status,2
  4208 ;; Tracked objects:
  4209 ;;		On entry : 0/0
  4210 ;;		On exit  : 0/0
  4211 ;;		Unchanged: 0/0
  4212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4214 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4215 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4216 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4217 ;;Total ram usage:        1 bytes
  4218 ;; Hardware stack levels used:    1
  4219 ;; Hardware stack levels required when called:    3
  4220 ;; This function calls:
  4221 ;;		Nothing
  4222 ;; This function is called by:
  4223 ;;		_SYSTEM_Initialize
  4224 ;; This function uses a non-reentrant model
  4225 ;;
  4226                           
  4227                           
  4228                           ;psect for function _I2C1_Initialize
  4229  1336                     _I2C1_Initialize:	
  4230                           
  4231                           ;i2c1.c: 200: i2c1_object.pTrHead = i2c1_tr_queue;
  4232                           
  4233                           ;incstack = 0
  4234                           ; Regs used in _I2C1_Initialize: [wreg+status,2]
  4235  1336  3059               	movlw	(low (_i2c1_tr_queue| (0+256)))& (0+255)
  4236  1337  0020               	movlb	0	; select bank0
  4237  1338  00A0               	movwf	??_I2C1_Initialize
  4238  1339  0820               	movf	??_I2C1_Initialize,w
  4239  133A  0021               	movlb	1	; select bank1
  4240  133B  00DA               	movwf	(low ((_i2c1_object| 0+1)))^(0+128)
  4241                           
  4242                           ;i2c1.c: 201: i2c1_object.pTrTail = i2c1_tr_queue;
  4243  133C  3059               	movlw	(low (_i2c1_tr_queue| (0+256)))& (0+255)
  4244  133D  0020               	movlb	0	; select bank0
  4245  133E  00A0               	movwf	??_I2C1_Initialize
  4246  133F  0820               	movf	??_I2C1_Initialize,w
  4247  1340  0021               	movlb	1	; select bank1
  4248  1341  00D9               	movwf	_i2c1_object^(0+128)
  4249                           
  4250                           ;i2c1.c: 202: i2c1_object.trStatus.s.empty = 1;
  4251  1342  14DB               	bsf	(_i2c1_object^(0+128)+2),1
  4252                           
  4253                           ;i2c1.c: 203: i2c1_object.trStatus.s.full = 0;
  4254  1343  105B               	bcf	(_i2c1_object^(0+128)+2),0
  4255                           
  4256                           ;i2c1.c: 205: i2c1_object.i2cErrors = 0;
  4257  1344  01DD               	clrf	(_i2c1_object^(0+128)+4)
  4258                           
  4259                           ;i2c1.c: 208: SSP1STAT = 0x80;
  4260  1345  3080               	movlw	128
  4261  1346  0024               	movlb	4	; select bank4
  4262  1347  0094               	movwf	20	;volatile
  4263                           
  4264                           ;i2c1.c: 210: SSP1CON1 = 0x28;
  4265  1348  3028               	movlw	40
  4266  1349  0095               	movwf	21	;volatile
  4267                           
  4268                           ;i2c1.c: 212: SSP1CON3 = 0x00;
  4269  134A  0197               	clrf	23	;volatile
  4270                           
  4271                           ;i2c1.c: 214: SSP1ADD = 0x4F;
  4272  134B  304F               	movlw	79
  4273  134C  0092               	movwf	18	;volatile
  4274                           
  4275                           ;i2c1.c: 218: PIR1bits.SSP1IF = 0;
  4276  134D  0020               	movlb	0	; select bank0
  4277  134E  1191               	bcf	17,3	;volatile
  4278                           
  4279                           ;i2c1.c: 220: PIE1bits.SSP1IE = 1;
  4280  134F  0021               	movlb	1	; select bank1
  4281  1350  1591               	bsf	17,3	;volatile
  4282  1351  0008               	return
  4283  1352                     __end_of_I2C1_Initialize:	
  4284                           
  4285                           	psect	text8
  4286  12AD                     __ptext8:	
  4287 ;; *************** function _EUSART_Initialize *****************
  4288 ;; Defined at:
  4289 ;;		line 75 in file "mcc_generated_files/eusart.c"
  4290 ;; Parameters:    Size  Location     Type
  4291 ;;		None
  4292 ;; Auto vars:     Size  Location     Type
  4293 ;;		None
  4294 ;; Return value:  Size  Location     Type
  4295 ;;                  1    wreg      void 
  4296 ;; Registers used:
  4297 ;;		wreg, status,2
  4298 ;; Tracked objects:
  4299 ;;		On entry : 0/0
  4300 ;;		On exit  : 0/0
  4301 ;;		Unchanged: 0/0
  4302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4304 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4305 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4306 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4307 ;;Total ram usage:        1 bytes
  4308 ;; Hardware stack levels used:    1
  4309 ;; Hardware stack levels required when called:    3
  4310 ;; This function calls:
  4311 ;;		Nothing
  4312 ;; This function is called by:
  4313 ;;		_SYSTEM_Initialize
  4314 ;; This function uses a non-reentrant model
  4315 ;;
  4316                           
  4317                           
  4318                           ;psect for function _EUSART_Initialize
  4319  12AD                     _EUSART_Initialize:	
  4320                           
  4321                           ;eusart.c: 78: PIE1bits.RCIE = 0;
  4322                           
  4323                           ;incstack = 0
  4324                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  4325  12AD  0021               	movlb	1	; select bank1
  4326  12AE  1291               	bcf	17,5	;volatile
  4327                           
  4328                           ;eusart.c: 79: PIE1bits.TXIE = 0;
  4329  12AF  1211               	bcf	17,4	;volatile
  4330                           
  4331                           ;eusart.c: 84: BAUDCON = 0x08;
  4332  12B0  3008               	movlw	8
  4333  12B1  0023               	movlb	3	; select bank3
  4334  12B2  009F               	movwf	31	;volatile
  4335                           
  4336                           ;eusart.c: 87: RCSTA = 0x90;
  4337  12B3  3090               	movlw	144
  4338  12B4  009D               	movwf	29	;volatile
  4339                           
  4340                           ;eusart.c: 90: TXSTA = 0x24;
  4341  12B5  3024               	movlw	36
  4342  12B6  009E               	movwf	30	;volatile
  4343                           
  4344                           ;eusart.c: 93: SPBRGL = 0x44;
  4345  12B7  3044               	movlw	68
  4346  12B8  009B               	movwf	27	;volatile
  4347                           
  4348                           ;eusart.c: 96: SPBRGH = 0x00;
  4349  12B9  019C               	clrf	28	;volatile
  4350                           
  4351                           ;eusart.c: 100: eusartTxHead = 0;
  4352  12BA  01F6               	clrf	_eusartTxHead	;volatile
  4353                           
  4354                           ;eusart.c: 101: eusartTxTail = 0;
  4355  12BB  01F5               	clrf	_eusartTxTail	;volatile
  4356                           
  4357                           ;eusart.c: 102: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
  4358  12BC  3040               	movlw	64
  4359  12BD  0020               	movlb	0	; select bank0
  4360  12BE  00A0               	movwf	??_EUSART_Initialize
  4361  12BF  0820               	movf	??_EUSART_Initialize,w
  4362  12C0  00F4               	movwf	_eusartTxBufferRemaining	;volatile
  4363                           
  4364                           ;eusart.c: 104: eusartRxHead = 0;
  4365  12C1  01F3               	clrf	_eusartRxHead	;volatile
  4366                           
  4367                           ;eusart.c: 105: eusartRxTail = 0;
  4368  12C2  01EC               	clrf	_eusartRxTail	;volatile
  4369                           
  4370                           ;eusart.c: 106: eusartRxCount = 0;
  4371  12C3  0021               	movlb	1	; select bank1
  4372  12C4  01E6               	clrf	_eusartRxCount^(0+128)	;volatile
  4373                           
  4374                           ;eusart.c: 109: PIE1bits.RCIE = 1;
  4375  12C5  1691               	bsf	17,5	;volatile
  4376  12C6  0008               	return
  4377  12C7                     __end_of_EUSART_Initialize:	
  4378                           
  4379                           	psect	text9
  4380  1FF7                     __ptext9:	
  4381 ;; *************** function _PROTOCOL_Set_Tick_Handler *****************
  4382 ;; Defined at:
  4383 ;;		line 85 in file "protocol.c"
  4384 ;; Parameters:    Size  Location     Type
  4385 ;;  tick_handler    2    0[BANK0 ] PTR void 
  4386 ;;		 -> tick_handler(1), 
  4387 ;; Auto vars:     Size  Location     Type
  4388 ;;		None
  4389 ;; Return value:  Size  Location     Type
  4390 ;;                  1    wreg      void 
  4391 ;; Registers used:
  4392 ;;		wreg
  4393 ;; Tracked objects:
  4394 ;;		On entry : 0/0
  4395 ;;		On exit  : 0/0
  4396 ;;		Unchanged: 0/0
  4397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4398 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4401 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4402 ;;Total ram usage:        2 bytes
  4403 ;; Hardware stack levels used:    1
  4404 ;; Hardware stack levels required when called:    3
  4405 ;; This function calls:
  4406 ;;		Nothing
  4407 ;; This function is called by:
  4408 ;;		_main
  4409 ;; This function uses a non-reentrant model
  4410 ;;
  4411                           
  4412                           
  4413                           ;psect for function _PROTOCOL_Set_Tick_Handler
  4414  1FF7                     _PROTOCOL_Set_Tick_Handler:	
  4415                           
  4416                           ;protocol.c: 86: PROTOCOL_Tick_Handler = tick_handler;
  4417                           
  4418                           ;incstack = 0
  4419                           ; Regs used in _PROTOCOL_Set_Tick_Handler: [wreg]
  4420  1FF7  0020               	movlb	0	; select bank0
  4421  1FF8  0821               	movf	PROTOCOL_Set_Tick_Handler@tick_handler+1,w
  4422  1FF9  0022               	movlb	2	; select bank2
  4423  1FFA  00A9               	movwf	(_PROTOCOL_Tick_Handler+1)^(0+256)
  4424  1FFB  0020               	movlb	0	; select bank0
  4425  1FFC  0820               	movf	PROTOCOL_Set_Tick_Handler@tick_handler,w
  4426  1FFD  0022               	movlb	2	; select bank2
  4427  1FFE  00A8               	movwf	_PROTOCOL_Tick_Handler^(0+256)
  4428  1FFF  0008               	return
  4429  2000                     __end_of_PROTOCOL_Set_Tick_Handler:	
  4430                           
  4431                           	psect	text10
  4432  1FEE                     __ptext10:	
  4433 ;; *************** function _PROTOCOL_Set_Extension_Handler *****************
  4434 ;; Defined at:
  4435 ;;		line 81 in file "protocol.c"
  4436 ;; Parameters:    Size  Location     Type
  4437 ;;  extension_ha    2    0[BANK0 ] PTR void 
  4438 ;;		 -> command_handler(1), 
  4439 ;; Auto vars:     Size  Location     Type
  4440 ;;		None
  4441 ;; Return value:  Size  Location     Type
  4442 ;;                  1    wreg      void 
  4443 ;; Registers used:
  4444 ;;		wreg
  4445 ;; Tracked objects:
  4446 ;;		On entry : 0/0
  4447 ;;		On exit  : 0/0
  4448 ;;		Unchanged: 0/0
  4449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4450 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4451 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4452 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4453 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4454 ;;Total ram usage:        2 bytes
  4455 ;; Hardware stack levels used:    1
  4456 ;; Hardware stack levels required when called:    3
  4457 ;; This function calls:
  4458 ;;		Nothing
  4459 ;; This function is called by:
  4460 ;;		_main
  4461 ;; This function uses a non-reentrant model
  4462 ;;
  4463                           
  4464                           
  4465                           ;psect for function _PROTOCOL_Set_Extension_Handler
  4466  1FEE                     _PROTOCOL_Set_Extension_Handler:	
  4467                           
  4468                           ;protocol.c: 82: PROTOCOL_Extension_Handler = extension_handler;
  4469                           
  4470                           ;incstack = 0
  4471                           ; Regs used in _PROTOCOL_Set_Extension_Handler: [wreg]
  4472  1FEE  0020               	movlb	0	; select bank0
  4473  1FEF  0821               	movf	PROTOCOL_Set_Extension_Handler@extension_handler+1,w
  4474  1FF0  0022               	movlb	2	; select bank2
  4475  1FF1  00AD               	movwf	(_PROTOCOL_Extension_Handler+1)^(0+256)
  4476  1FF2  0020               	movlb	0	; select bank0
  4477  1FF3  0820               	movf	PROTOCOL_Set_Extension_Handler@extension_handler,w
  4478  1FF4  0022               	movlb	2	; select bank2
  4479  1FF5  00AC               	movwf	_PROTOCOL_Extension_Handler^(0+256)
  4480  1FF6  0008               	return
  4481  1FF7                     __end_of_PROTOCOL_Set_Extension_Handler:	
  4482                           
  4483                           	psect	text11
  4484  0C8D                     __ptext11:	
  4485 ;; *************** function _PROTOCOL_Loop *****************
  4486 ;; Defined at:
  4487 ;;		line 136 in file "protocol.c"
  4488 ;; Parameters:    Size  Location     Type
  4489 ;;		None
  4490 ;; Auto vars:     Size  Location     Type
  4491 ;;  device_addre    1   74[BANK0 ] unsigned char 
  4492 ;;  c               1   73[BANK0 ] unsigned char 
  4493 ;; Return value:  Size  Location     Type
  4494 ;;                  1    wreg      void 
  4495 ;; Registers used:
  4496 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4497 ;; Tracked objects:
  4498 ;;		On entry : 0/0
  4499 ;;		On exit  : 0/0
  4500 ;;		Unchanged: 0/0
  4501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4503 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4504 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4505 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4506 ;;Total ram usage:        4 bytes
  4507 ;; Hardware stack levels used:    1
  4508 ;; Hardware stack levels required when called:   11
  4509 ;; This function calls:
  4510 ;;		Absolute function
  4511 ;;		_EUSART_Read
  4512 ;;		_PROTOCOL_EXT
  4513 ;;		_PROTOCOL_Read_Device_Address
  4514 ;;		_PROTOCOL_SAV
  4515 ;;		_PROTOCOL_SET
  4516 ;;		_PROTOCOL_STA
  4517 ;;		_PROTOCOL_STP
  4518 ;;		_PROTOCOL_Write_Device_Address
  4519 ;;		_TMR0_HasOverflowOccured
  4520 ;;		_atoi
  4521 ;;		_inv_handler
  4522 ;;		_printf
  4523 ;;		_strncmp
  4524 ;;		_tick_handler
  4525 ;; This function is called by:
  4526 ;;		_main
  4527 ;; This function uses a non-reentrant model
  4528 ;;
  4529                           
  4530                           
  4531                           ;psect for function _PROTOCOL_Loop
  4532  0C8D                     _PROTOCOL_Loop:	
  4533  0C8D                     l846:	
  4534                           ;incstack = 0
  4535                           ; Regs used in _PROTOCOL_Loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4536                           ;protocol.c: 137: uint8_t device_address;
  4537                           ;protocol.c: 138: uint8_t c;
  4538                           ;protocol.c: 139: while (1) {
  4539                           
  4540                           
  4541                           ;protocol.c: 140: tmr_overflow = TMR0_HasOverflowOccured();
  4542  0C8D  3191  21D6  318C   	fcall	_TMR0_HasOverflowOccured
  4543  0C90  0020               	movlb	0	; select bank0
  4544  0C91  00E7               	movwf	??_PROTOCOL_Loop
  4545  0C92  0867               	movf	??_PROTOCOL_Loop,w
  4546  0C93  0022               	movlb	2	; select bank2
  4547  0C94  00BE               	movwf	_tmr_overflow^(0+256)
  4548                           
  4549                           ;protocol.c: 141: if (tmr_overflow) {
  4550  0C95  083E               	movf	_tmr_overflow^(0+256),w
  4551  0C96  1903               	btfsc	3,2
  4552  0C97  2CC4               	goto	l6102
  4553                           
  4554                           ;protocol.c: 142: TMR0IF = 0;
  4555  0C98  110B               	bcf	11,2	;volatile
  4556                           
  4557                           ;protocol.c: 143: if (PROTOCOL_Tick_Handler) PROTOCOL_Tick_Handler();
  4558  0C99  0828               	movf	_PROTOCOL_Tick_Handler^(0+256),w
  4559  0C9A  0429               	iorwf	(_PROTOCOL_Tick_Handler+1)^(0+256),w
  4560  0C9B  1903               	btfsc	3,2
  4561  0C9C  2CA2               	goto	l6088
  4562  0C9D  0829               	movf	(_PROTOCOL_Tick_Handler+1)^(0+256),w
  4563  0C9E  008A               	movwf	10
  4564  0C9F  0828               	movf	_PROTOCOL_Tick_Handler^(0+256),w
  4565  0CA0  000A               	callw
  4566  0CA1  318C               	pagesel	$
  4567  0CA2                     l6088:	
  4568                           
  4569                           ;protocol.c: 144: if (PROTOCOL_Inv_Handler && (++tmr_cnt >= value)) {
  4570  0CA2  0022               	movlb	2	; select bank2
  4571  0CA3  082A               	movf	_PROTOCOL_Inv_Handler^(0+256),w
  4572  0CA4  042B               	iorwf	(_PROTOCOL_Inv_Handler+1)^(0+256),w
  4573  0CA5  1903               	btfsc	3,2
  4574  0CA6  2CC4               	goto	l6102
  4575  0CA7  3001               	movlw	1
  4576  0CA8  0020               	movlb	0	; select bank0
  4577  0CA9  00E7               	movwf	??_PROTOCOL_Loop
  4578  0CAA  0867               	movf	??_PROTOCOL_Loop,w
  4579  0CAB  0022               	movlb	2	; select bank2
  4580  0CAC  07BF               	addwf	_tmr_cnt^(0+256),f
  4581  0CAD  0021               	movlb	1	; select bank1
  4582  0CAE  085E               	movf	_value^(0+128),w
  4583  0CAF  0022               	movlb	2	; select bank2
  4584  0CB0  023F               	subwf	_tmr_cnt^(0+256),w
  4585  0CB1  1C03               	skipc
  4586  0CB2  2CC4               	goto	l6102
  4587                           
  4588                           ;protocol.c: 145: tmr_cnt = 0;
  4589  0CB3  01BF               	clrf	_tmr_cnt^(0+256)
  4590                           
  4591                           ;protocol.c: 146: if (++sec_cnt >= tmr_scaler) {
  4592  0CB4  3001               	movlw	1
  4593  0CB5  0020               	movlb	0	; select bank0
  4594  0CB6  00E7               	movwf	??_PROTOCOL_Loop
  4595  0CB7  0867               	movf	??_PROTOCOL_Loop,w
  4596  0CB8  0022               	movlb	2	; select bank2
  4597  0CB9  07C0               	addwf	_sec_cnt^(0+256),f
  4598  0CBA  0862               	movf	_tmr_scaler^(0+256),w
  4599  0CBB  0240               	subwf	_sec_cnt^(0+256),w
  4600  0CBC  1C03               	skipc
  4601  0CBD  2CC4               	goto	l6102
  4602                           
  4603                           ;protocol.c: 147: if (running) invoked = 1;
  4604  0CBE  0842               	movf	_running^(0+256),w
  4605  0CBF  1903               	btfsc	3,2
  4606  0CC0  2CC3               	goto	l6100
  4607  0CC1  01C1               	clrf	_invoked^(0+256)
  4608  0CC2  0AC1               	incf	_invoked^(0+256),f
  4609  0CC3                     l6100:	
  4610                           
  4611                           ;protocol.c: 148: sec_cnt = 0;
  4612  0CC3  01C0               	clrf	_sec_cnt^(0+256)
  4613  0CC4                     l6102:	
  4614                           
  4615                           ;protocol.c: 149: }
  4616                           ;protocol.c: 150: }
  4617                           ;protocol.c: 151: }
  4618                           ;protocol.c: 152: if (invoked && PROTOCOL_Inv_Handler) {
  4619  0CC4  0841               	movf	_invoked^(0+256),w
  4620  0CC5  1903               	btfsc	3,2
  4621  0CC6  2CD2               	goto	l6112
  4622  0CC7  082A               	movf	_PROTOCOL_Inv_Handler^(0+256),w
  4623  0CC8  042B               	iorwf	(_PROTOCOL_Inv_Handler+1)^(0+256),w
  4624  0CC9  1903               	btfsc	3,2
  4625  0CCA  2CD2               	goto	l6112
  4626                           
  4627                           ;protocol.c: 153: PROTOCOL_Inv_Handler();
  4628  0CCB  082B               	movf	(_PROTOCOL_Inv_Handler+1)^(0+256),w
  4629  0CCC  008A               	movwf	10
  4630  0CCD  082A               	movf	_PROTOCOL_Inv_Handler^(0+256),w
  4631  0CCE  000A               	callw
  4632  0CCF  318C               	pagesel	$
  4633                           
  4634                           ;protocol.c: 154: invoked = 0;
  4635  0CD0  0022               	movlb	2	; select bank2
  4636  0CD1  01C1               	clrf	_invoked^(0+256)
  4637  0CD2                     l6112:	
  4638                           
  4639                           ;protocol.c: 157: if ((eusartRxCount)) {
  4640  0CD2  0021               	movlb	1	; select bank1
  4641  0CD3  0866               	movf	_eusartRxCount^(0+128),w	;volatile
  4642  0CD4  1903               	btfsc	3,2
  4643  0CD5  2C8D               	goto	l846
  4644                           
  4645                           ;protocol.c: 158: c = EUSART_Read();
  4646  0CD6  3193  2371  318C   	fcall	_EUSART_Read
  4647  0CD9  0020               	movlb	0	; select bank0
  4648  0CDA  00E7               	movwf	??_PROTOCOL_Loop
  4649  0CDB  0867               	movf	??_PROTOCOL_Loop,w
  4650  0CDC  00E9               	movwf	PROTOCOL_Loop@c
  4651                           
  4652                           ;protocol.c: 159: buf[cnt++] = c;
  4653  0CDD  0869               	movf	PROTOCOL_Loop@c,w
  4654  0CDE  00E7               	movwf	??_PROTOCOL_Loop
  4655  0CDF  0021               	movlb	1	; select bank1
  4656  0CE0  085F               	movf	_cnt^(0+128),w
  4657  0CE1  3E20               	addlw	(low (_buf| (0+512)))& (0+255)
  4658  0CE2  0086               	movwf	6
  4659  0CE3  3002               	movlw	2	; select bank4/5
  4660  0CE4  0087               	movwf	7
  4661  0CE5  0020               	movlb	0	; select bank0
  4662  0CE6  0867               	movf	??_PROTOCOL_Loop,w
  4663  0CE7  0081               	movwf	1
  4664  0CE8  3001               	movlw	1
  4665  0CE9  00E7               	movwf	??_PROTOCOL_Loop
  4666  0CEA  0867               	movf	??_PROTOCOL_Loop,w
  4667  0CEB  0021               	movlb	1	; select bank1
  4668  0CEC  07DF               	addwf	_cnt^(0+128),f
  4669                           
  4670                           ;protocol.c: 160: if (c == '\n') {
  4671  0CED  300A               	movlw	10
  4672  0CEE  0020               	movlb	0	; select bank0
  4673  0CEF  0669               	xorwf	PROTOCOL_Loop@c,w
  4674  0CF0  1D03               	btfss	3,2
  4675  0CF1  2C8D               	goto	l846
  4676                           
  4677                           ;protocol.c: 161: buf[--cnt] = '\0';
  4678  0CF2  3001               	movlw	1
  4679  0CF3  0021               	movlb	1	; select bank1
  4680  0CF4  02DF               	subwf	_cnt^(0+128),f
  4681  0CF5  085F               	movf	_cnt^(0+128),w
  4682  0CF6  3E20               	addlw	(low (_buf| (0+512)))& (0+255)
  4683  0CF7  0086               	movwf	6
  4684  0CF8  3002               	movlw	2	; select bank4/5
  4685  0CF9  0087               	movwf	7
  4686  0CFA  0181               	clrf	1
  4687                           
  4688                           ;protocol.c: 162: cnt = 0;
  4689  0CFB  01DF               	clrf	_cnt^(0+128)
  4690                           
  4691                           ;protocol.c: 163: printf("#%s\n", buf);
  4692  0CFC  3064               	movlw	low (STR_36| (0+32768))
  4693  0CFD  0020               	movlb	0	; select bank0
  4694  0CFE  00AE               	movwf	printf@f
  4695  0CFF  3091               	movlw	high (STR_36| (0+32768))
  4696  0D00  00AF               	movwf	printf@f+1
  4697  0D01  3020               	movlw	low _buf
  4698  0D02  00B0               	movwf	low ((?_printf| 0+2))
  4699  0D03  3002               	movlw	high _buf
  4700  0D04  00B1               	movwf	(low ((?_printf| 0+2))+1)
  4701  0D05  318E  262B  318C   	fcall	_printf
  4702                           
  4703                           ;protocol.c: 164: if (BACKPLANE_SLAVE_ADDRESS != 0x01) {
  4704  0D08  0021               	movlb	1	; select bank1
  4705  0D09  036E               	decf	_BACKPLANE_SLAVE_ADDRESS^(0+128),w
  4706  0D0A  1903               	btfsc	3,2
  4707  0D0B  2D11               	goto	l6132
  4708                           
  4709                           ;protocol.c: 165: PROTOCOL_EXT(buf);
  4710  0D0C  3020               	movlw	(low (_buf| (0+512)))& (0+255)
  4711  0D0D  3192  226B  318C   	fcall	_PROTOCOL_EXT
  4712                           
  4713                           ;protocol.c: 166: } else if (!strncmp(("WHO"), (buf), 3)) {
  4714  0D10  2C8D               	goto	l846
  4715  0D11                     l6132:	
  4716  0D11  309D               	movlw	low (STR_1| (0+32768))
  4717  0D12  0020               	movlb	0	; select bank0
  4718  0D13  00A0               	movwf	strncmp@s1
  4719  0D14  3091               	movlw	high (STR_1| (0+32768))
  4720  0D15  00A1               	movwf	strncmp@s1+1
  4721  0D16  3020               	movlw	low _buf
  4722  0D17  00A2               	movwf	strncmp@s2
  4723  0D18  3002               	movlw	high _buf
  4724  0D19  00A3               	movwf	strncmp@s2+1
  4725  0D1A  3003               	movlw	3
  4726  0D1B  00A4               	movwf	strncmp@len
  4727  0D1C  3000               	movlw	0
  4728  0D1D  00A5               	movwf	strncmp@len+1
  4729  0D1E  3195  25B0  318C   	fcall	_strncmp
  4730  0D21  0020               	movlb	0	; select bank0
  4731  0D22  0820               	movf	?_strncmp,w
  4732  0D23  0421               	iorwf	?_strncmp+1,w
  4733  0D24  1D03               	btfss	3,2
  4734  0D25  2D36               	goto	l6136
  4735                           
  4736                           ;protocol.c: 167: printf("$:WHO:%s\n", device_id_);
  4737  0D26  30F4               	movlw	low (STR_38| (0+32768))
  4738  0D27  00AE               	movwf	printf@f
  4739  0D28  3090               	movlw	high (STR_38| (0+32768))
  4740  0D29  00AF               	movwf	printf@f+1
  4741  0D2A  0022               	movlb	2	; select bank2
  4742  0D2B  0827               	movf	(_device_id_+1)^(0+256),w
  4743  0D2C  0020               	movlb	0	; select bank0
  4744  0D2D  00B1               	movwf	(low ((?_printf| 0+2))+1)
  4745  0D2E  0022               	movlb	2	; select bank2
  4746  0D2F  0826               	movf	_device_id_^(0+256),w
  4747  0D30  0020               	movlb	0	; select bank0
  4748  0D31  00B0               	movwf	low ((?_printf| 0+2))
  4749  0D32  318E  262B  318C   	fcall	_printf
  4750                           
  4751                           ;protocol.c: 168: } else if (!strncmp(("SAV"), (buf), 3)) {
  4752  0D35  2C8D               	goto	l846
  4753  0D36                     l6136:	
  4754  0D36  30B5               	movlw	low (STR_4| (0+32768))
  4755  0D37  0020               	movlb	0	; select bank0
  4756  0D38  00A0               	movwf	strncmp@s1
  4757  0D39  3091               	movlw	high (STR_4| (0+32768))
  4758  0D3A  00A1               	movwf	strncmp@s1+1
  4759  0D3B  3020               	movlw	low _buf
  4760  0D3C  00A2               	movwf	strncmp@s2
  4761  0D3D  3002               	movlw	high _buf
  4762  0D3E  00A3               	movwf	strncmp@s2+1
  4763  0D3F  3003               	movlw	3
  4764  0D40  00A4               	movwf	strncmp@len
  4765  0D41  3000               	movlw	0
  4766  0D42  00A5               	movwf	strncmp@len+1
  4767  0D43  3195  25B0  318C   	fcall	_strncmp
  4768  0D46  0020               	movlb	0	; select bank0
  4769  0D47  0820               	movf	?_strncmp,w
  4770  0D48  0421               	iorwf	?_strncmp+1,w
  4771  0D49  1D03               	btfss	3,2
  4772  0D4A  2D4F               	goto	l6140
  4773                           
  4774                           ;protocol.c: 169: PROTOCOL_SAV();
  4775  0D4B  3191  21DA  318C   	fcall	_PROTOCOL_SAV
  4776                           
  4777                           ;protocol.c: 170: } else if (!strncmp(("STA"), (buf), 3)) {
  4778  0D4E  2C8D               	goto	l846
  4779  0D4F                     l6140:	
  4780  0D4F  3081               	movlw	low (STR_5| (0+32768))
  4781  0D50  0020               	movlb	0	; select bank0
  4782  0D51  00A0               	movwf	strncmp@s1
  4783  0D52  3091               	movlw	high (STR_5| (0+32768))
  4784  0D53  00A1               	movwf	strncmp@s1+1
  4785  0D54  3020               	movlw	low _buf
  4786  0D55  00A2               	movwf	strncmp@s2
  4787  0D56  3002               	movlw	high _buf
  4788  0D57  00A3               	movwf	strncmp@s2+1
  4789  0D58  3003               	movlw	3
  4790  0D59  00A4               	movwf	strncmp@len
  4791  0D5A  3000               	movlw	0
  4792  0D5B  00A5               	movwf	strncmp@len+1
  4793  0D5C  3195  25B0  318C   	fcall	_strncmp
  4794  0D5F  0020               	movlb	0	; select bank0
  4795  0D60  0820               	movf	?_strncmp,w
  4796  0D61  0421               	iorwf	?_strncmp+1,w
  4797  0D62  1D03               	btfss	3,2
  4798  0D63  2D68               	goto	l6144
  4799                           
  4800                           ;protocol.c: 171: PROTOCOL_STA();
  4801  0D64  319F  27D5  318C   	fcall	_PROTOCOL_STA
  4802                           
  4803                           ;protocol.c: 172: } else if (!strncmp(("STP"), (buf), 3)) {
  4804  0D67  2C8D               	goto	l846
  4805  0D68                     l6144:	
  4806  0D68  30A5               	movlw	low (STR_6| (0+32768))
  4807  0D69  0020               	movlb	0	; select bank0
  4808  0D6A  00A0               	movwf	strncmp@s1
  4809  0D6B  3091               	movlw	high (STR_6| (0+32768))
  4810  0D6C  00A1               	movwf	strncmp@s1+1
  4811  0D6D  3020               	movlw	low _buf
  4812  0D6E  00A2               	movwf	strncmp@s2
  4813  0D6F  3002               	movlw	high _buf
  4814  0D70  00A3               	movwf	strncmp@s2+1
  4815  0D71  3003               	movlw	3
  4816  0D72  00A4               	movwf	strncmp@len
  4817  0D73  3000               	movlw	0
  4818  0D74  00A5               	movwf	strncmp@len+1
  4819  0D75  3195  25B0  318C   	fcall	_strncmp
  4820  0D78  0020               	movlb	0	; select bank0
  4821  0D79  0820               	movf	?_strncmp,w
  4822  0D7A  0421               	iorwf	?_strncmp+1,w
  4823  0D7B  1D03               	btfss	3,2
  4824  0D7C  2D8D               	goto	l6150
  4825                           
  4826                           ;protocol.c: 173: PROTOCOL_STP();
  4827  0D7D  319F  27CF  318C   	fcall	_PROTOCOL_STP
  4828                           
  4829                           ;protocol.c: 174: printf("*:STP:%s\n", "ACK");
  4830  0D80  30FE               	movlw	low (STR_42| (0+32768))
  4831  0D81  0020               	movlb	0	; select bank0
  4832  0D82  00AE               	movwf	printf@f
  4833  0D83  3090               	movlw	high (STR_42| (0+32768))
  4834  0D84  00AF               	movwf	printf@f+1
  4835  0D85  3079               	movlw	low (STR_43| (0+32768))
  4836  0D86  00B0               	movwf	low ((?_printf| 0+2))
  4837  0D87  3091               	movlw	high (STR_43| (0+32768))
  4838  0D88  00B1               	movwf	(low ((?_printf| 0+2))+1)
  4839  0D89  318E  262B  318C   	fcall	_printf
  4840                           
  4841                           ;protocol.c: 175: } else if (!strncmp(("SET"), (buf), 3)) {
  4842  0D8C  2C8D               	goto	l846
  4843  0D8D                     l6150:	
  4844  0D8D  30B1               	movlw	low (STR_9| (0+32768))
  4845  0D8E  0020               	movlb	0	; select bank0
  4846  0D8F  00A0               	movwf	strncmp@s1
  4847  0D90  3091               	movlw	high (STR_9| (0+32768))
  4848  0D91  00A1               	movwf	strncmp@s1+1
  4849  0D92  3020               	movlw	low _buf
  4850  0D93  00A2               	movwf	strncmp@s2
  4851  0D94  3002               	movlw	high _buf
  4852  0D95  00A3               	movwf	strncmp@s2+1
  4853  0D96  3003               	movlw	3
  4854  0D97  00A4               	movwf	strncmp@len
  4855  0D98  3000               	movlw	0
  4856  0D99  00A5               	movwf	strncmp@len+1
  4857  0D9A  3195  25B0  318C   	fcall	_strncmp
  4858  0D9D  0020               	movlb	0	; select bank0
  4859  0D9E  0820               	movf	?_strncmp,w
  4860  0D9F  0421               	iorwf	?_strncmp+1,w
  4861  0DA0  1D03               	btfss	3,2
  4862  0DA1  2DAF               	goto	l6154
  4863                           
  4864                           ;protocol.c: 176: PROTOCOL_SET(atoi(&buf[4]));
  4865  0DA2  3024               	movlw	low (_buf+4)
  4866  0DA3  00A6               	movwf	atoi@s
  4867  0DA4  3002               	movlw	high (_buf+4)
  4868  0DA5  00A7               	movwf	atoi@s+1
  4869  0DA6  3189  21D0  318C   	fcall	_atoi
  4870  0DA9  0020               	movlb	0	; select bank0
  4871  0DAA  0826               	movf	?_atoi,w
  4872  0DAB  319F  27E6  318C   	fcall	_PROTOCOL_SET
  4873                           
  4874                           ;protocol.c: 177: } else if (!strncmp(("GET"), (buf), 3)) {
  4875  0DAE  2C8D               	goto	l846
  4876  0DAF                     l6154:	
  4877  0DAF  30AD               	movlw	low (STR_10| (0+32768))
  4878  0DB0  0020               	movlb	0	; select bank0
  4879  0DB1  00A0               	movwf	strncmp@s1
  4880  0DB2  3091               	movlw	high (STR_10| (0+32768))
  4881  0DB3  00A1               	movwf	strncmp@s1+1
  4882  0DB4  3020               	movlw	low _buf
  4883  0DB5  00A2               	movwf	strncmp@s2
  4884  0DB6  3002               	movlw	high _buf
  4885  0DB7  00A3               	movwf	strncmp@s2+1
  4886  0DB8  3003               	movlw	3
  4887  0DB9  00A4               	movwf	strncmp@len
  4888  0DBA  3000               	movlw	0
  4889  0DBB  00A5               	movwf	strncmp@len+1
  4890  0DBC  3195  25B0  318C   	fcall	_strncmp
  4891  0DBF  0020               	movlb	0	; select bank0
  4892  0DC0  0820               	movf	?_strncmp,w
  4893  0DC1  0421               	iorwf	?_strncmp+1,w
  4894  0DC2  1D03               	btfss	3,2
  4895  0DC3  2DD5               	goto	l6158
  4896                           
  4897                           ;protocol.c: 178: printf("$:GET:%d\n", value);
  4898  0DC4  3026               	movlw	low (STR_11| (0+32768))
  4899  0DC5  00AE               	movwf	printf@f
  4900  0DC6  3091               	movlw	high (STR_11| (0+32768))
  4901  0DC7  00AF               	movwf	printf@f+1
  4902  0DC8  0021               	movlb	1	; select bank1
  4903  0DC9  085E               	movf	_value^(0+128),w
  4904  0DCA  0020               	movlb	0	; select bank0
  4905  0DCB  00E7               	movwf	??_PROTOCOL_Loop
  4906  0DCC  01E8               	clrf	??_PROTOCOL_Loop+1
  4907  0DCD  0867               	movf	??_PROTOCOL_Loop,w
  4908  0DCE  00B0               	movwf	?_printf+2
  4909  0DCF  0868               	movf	??_PROTOCOL_Loop+1,w
  4910  0DD0  00B1               	movwf	?_printf+3
  4911  0DD1  318E  262B  318C   	fcall	_printf
  4912                           
  4913                           ;protocol.c: 179: } else if (!strncmp(("WDA"), (buf), 3)) {
  4914  0DD4  2C8D               	goto	l846
  4915  0DD5                     l6158:	
  4916  0DD5  3075               	movlw	low (STR_47| (0+32768))
  4917  0DD6  0020               	movlb	0	; select bank0
  4918  0DD7  00A0               	movwf	strncmp@s1
  4919  0DD8  3091               	movlw	high (STR_47| (0+32768))
  4920  0DD9  00A1               	movwf	strncmp@s1+1
  4921  0DDA  3020               	movlw	low _buf
  4922  0DDB  00A2               	movwf	strncmp@s2
  4923  0DDC  3002               	movlw	high _buf
  4924  0DDD  00A3               	movwf	strncmp@s2+1
  4925  0DDE  3003               	movlw	3
  4926  0DDF  00A4               	movwf	strncmp@len
  4927  0DE0  3000               	movlw	0
  4928  0DE1  00A5               	movwf	strncmp@len+1
  4929  0DE2  3195  25B0  318C   	fcall	_strncmp
  4930  0DE5  0020               	movlb	0	; select bank0
  4931  0DE6  0820               	movf	?_strncmp,w
  4932  0DE7  0421               	iorwf	?_strncmp+1,w
  4933  0DE8  1D03               	btfss	3,2
  4934  0DE9  2DFB               	goto	l6164
  4935                           
  4936                           ;protocol.c: 180: device_address = atoi(&buf[4]);
  4937  0DEA  3024               	movlw	low (_buf+4)
  4938  0DEB  00A6               	movwf	atoi@s
  4939  0DEC  3002               	movlw	high (_buf+4)
  4940  0DED  00A7               	movwf	atoi@s+1
  4941  0DEE  3189  21D0  318C   	fcall	_atoi
  4942  0DF1  0020               	movlb	0	; select bank0
  4943  0DF2  0826               	movf	?_atoi,w
  4944  0DF3  00E7               	movwf	??_PROTOCOL_Loop
  4945  0DF4  0867               	movf	??_PROTOCOL_Loop,w
  4946  0DF5  00EA               	movwf	PROTOCOL_Loop@device_address
  4947                           
  4948                           ;protocol.c: 181: PROTOCOL_Write_Device_Address(device_address);
  4949  0DF6  086A               	movf	PROTOCOL_Loop@device_address,w
  4950  0DF7  3192  2226  318C   	fcall	_PROTOCOL_Write_Device_Address
  4951                           
  4952                           ;protocol.c: 182: } else if (!strncmp(("RDA"), (buf), 3)) {
  4953  0DFA  2C8D               	goto	l846
  4954  0DFB                     l6164:	
  4955  0DFB  3071               	movlw	low (STR_48| (0+32768))
  4956  0DFC  0020               	movlb	0	; select bank0
  4957  0DFD  00A0               	movwf	strncmp@s1
  4958  0DFE  3091               	movlw	high (STR_48| (0+32768))
  4959  0DFF  00A1               	movwf	strncmp@s1+1
  4960  0E00  3020               	movlw	low _buf
  4961  0E01  00A2               	movwf	strncmp@s2
  4962  0E02  3002               	movlw	high _buf
  4963  0E03  00A3               	movwf	strncmp@s2+1
  4964  0E04  3003               	movlw	3
  4965  0E05  00A4               	movwf	strncmp@len
  4966  0E06  3000               	movlw	0
  4967  0E07  00A5               	movwf	strncmp@len+1
  4968  0E08  3195  25B0  318C   	fcall	_strncmp
  4969  0E0B  0020               	movlb	0	; select bank0
  4970  0E0C  0820               	movf	?_strncmp,w
  4971  0E0D  0421               	iorwf	?_strncmp+1,w
  4972  0E0E  1D03               	btfss	3,2
  4973  0E0F  2E26               	goto	l6170
  4974                           
  4975                           ;protocol.c: 183: device_address = PROTOCOL_Read_Device_Address();
  4976  0E10  319F  27CC  318C   	fcall	_PROTOCOL_Read_Device_Address
  4977  0E13  0020               	movlb	0	; select bank0
  4978  0E14  00E7               	movwf	??_PROTOCOL_Loop
  4979  0E15  0867               	movf	??_PROTOCOL_Loop,w
  4980  0E16  00EA               	movwf	PROTOCOL_Loop@device_address
  4981                           
  4982                           ;protocol.c: 184: printf("$:RDA:%d\n", device_address);
  4983  0E17  30E0               	movlw	low (STR_49| (0+32768))
  4984  0E18  00AE               	movwf	printf@f
  4985  0E19  3090               	movlw	high (STR_49| (0+32768))
  4986  0E1A  00AF               	movwf	printf@f+1
  4987  0E1B  086A               	movf	PROTOCOL_Loop@device_address,w
  4988  0E1C  00E7               	movwf	??_PROTOCOL_Loop
  4989  0E1D  01E8               	clrf	??_PROTOCOL_Loop+1
  4990  0E1E  0867               	movf	??_PROTOCOL_Loop,w
  4991  0E1F  00B0               	movwf	?_printf+2
  4992  0E20  0868               	movf	??_PROTOCOL_Loop+1,w
  4993  0E21  00B1               	movwf	?_printf+3
  4994  0E22  318E  262B  318C   	fcall	_printf
  4995                           
  4996                           ;protocol.c: 185: } else {
  4997  0E25  2C8D               	goto	l846
  4998  0E26                     l6170:	
  4999                           
  5000                           ;protocol.c: 186: PROTOCOL_EXT(buf);
  5001  0E26  3020               	movlw	(low (_buf| (0+512)))& (0+255)
  5002  0E27  3192  226B  318C   	fcall	_PROTOCOL_EXT
  5003  0E2A  2C8D               	goto	l846
  5004  0E2B                     __end_of_PROTOCOL_Loop:	
  5005                           
  5006                           	psect	text12
  5007  16CB                     __ptext12:	
  5008 ;; *************** function _tick_handler *****************
  5009 ;; Defined at:
  5010 ;;		line 308 in file "main.c"
  5011 ;; Parameters:    Size  Location     Type
  5012 ;;		None
  5013 ;; Auto vars:     Size  Location     Type
  5014 ;;		None
  5015 ;; Return value:  Size  Location     Type
  5016 ;;                  1    wreg      void 
  5017 ;; Registers used:
  5018 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5019 ;; Tracked objects:
  5020 ;;		On entry : 0/0
  5021 ;;		On exit  : 0/0
  5022 ;;		Unchanged: 0/0
  5023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5025 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5026 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5027 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5028 ;;Total ram usage:        1 bytes
  5029 ;; Hardware stack levels used:    1
  5030 ;; Hardware stack levels required when called:    8
  5031 ;; This function calls:
  5032 ;;		___lwmod
  5033 ;;		_check_plg
  5034 ;;		_exec_remote_cmd
  5035 ;;		_scan_dev
  5036 ;; This function is called by:
  5037 ;;		_main
  5038 ;;		_PROTOCOL_Loop
  5039 ;; This function uses a non-reentrant model
  5040 ;;
  5041                           
  5042                           
  5043                           ;psect for function _tick_handler
  5044  16CB                     _tick_handler:	
  5045                           
  5046                           ;main.c: 309: static uint16_t t = 0;
  5047                           ;main.c: 310: static int8_t cmd_next = 0;
  5048                           ;main.c: 311: t++;
  5049                           
  5050                           ;incstack = 0
  5051                           ; Regs used in _tick_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5052  16CB  3001               	movlw	1
  5053  16CC  0022               	movlb	2	; select bank2
  5054  16CD  07B6               	addwf	tick_handler@t^(0+256),f
  5055  16CE  3000               	movlw	0
  5056  16CF  3DB7               	addwfc	(tick_handler@t+1)^(0+256),f
  5057                           
  5058                           ;main.c: 313: if (exec_remote_cmd(cmd_next)) {
  5059  16D0  0021               	movlb	1	; select bank1
  5060  16D1  0861               	movf	tick_handler@cmd_next^(0+128),w
  5061  16D2  3185  2526  3196   	fcall	_exec_remote_cmd
  5062  16D5  3A00               	xorlw	0
  5063  16D6  1903               	skipnz
  5064  16D7  2EE3               	goto	l5788
  5065                           
  5066                           ;main.c: 314: cmd_next++;
  5067  16D8  3001               	movlw	1
  5068  16D9  0020               	movlb	0	; select bank0
  5069  16DA  00C9               	movwf	??_tick_handler
  5070  16DB  0849               	movf	??_tick_handler,w
  5071  16DC  0021               	movlb	1	; select bank1
  5072  16DD  07E1               	addwf	tick_handler@cmd_next^(0+128),f
  5073                           
  5074                           ;main.c: 315: if (cmd_next > 3) cmd_next = 0;
  5075  16DE  0861               	movf	tick_handler@cmd_next^(0+128),w
  5076  16DF  3A80               	xorlw	128
  5077  16E0  3E7C               	addlw	-132
  5078  16E1  1803               	btfsc	3,0
  5079  16E2  01E1               	clrf	tick_handler@cmd_next^(0+128)
  5080  16E3                     l5788:	
  5081                           
  5082                           ;main.c: 316: }
  5083                           ;main.c: 318: if (t % 60 == 0) {
  5084  16E3  303C               	movlw	60
  5085  16E4  0020               	movlb	0	; select bank0
  5086  16E5  00A8               	movwf	___lwmod@divisor
  5087  16E6  3000               	movlw	0
  5088  16E7  00A9               	movwf	___lwmod@divisor+1
  5089  16E8  0022               	movlb	2	; select bank2
  5090  16E9  0837               	movf	(tick_handler@t+1)^(0+256),w
  5091  16EA  0020               	movlb	0	; select bank0
  5092  16EB  00AB               	movwf	___lwmod@dividend+1
  5093  16EC  0022               	movlb	2	; select bank2
  5094  16ED  0836               	movf	tick_handler@t^(0+256),w
  5095  16EE  0020               	movlb	0	; select bank0
  5096  16EF  00AA               	movwf	___lwmod@dividend
  5097  16F0  3194  24A8  3196   	fcall	___lwmod
  5098  16F3  0020               	movlb	0	; select bank0
  5099  16F4  0828               	movf	?___lwmod,w
  5100  16F5  0429               	iorwf	?___lwmod+1,w
  5101  16F6  1D03               	btfss	3,2
  5102  16F7  2EFB               	goto	l5792
  5103                           
  5104                           ;main.c: 319: check_plg();
  5105  16F8  3192  227E         	fcall	_check_plg
  5106                           
  5107                           ;main.c: 320: } else if (t % 600 == 0) {
  5108  16FA  0008               	return
  5109  16FB                     l5792:	
  5110  16FB  3058               	movlw	88
  5111  16FC  0020               	movlb	0	; select bank0
  5112  16FD  00A8               	movwf	___lwmod@divisor
  5113  16FE  3002               	movlw	2
  5114  16FF  00A9               	movwf	___lwmod@divisor+1
  5115  1700  0022               	movlb	2	; select bank2
  5116  1701  0837               	movf	(tick_handler@t+1)^(0+256),w
  5117  1702  0020               	movlb	0	; select bank0
  5118  1703  00AB               	movwf	___lwmod@dividend+1
  5119  1704  0022               	movlb	2	; select bank2
  5120  1705  0836               	movf	tick_handler@t^(0+256),w
  5121  1706  0020               	movlb	0	; select bank0
  5122  1707  00AA               	movwf	___lwmod@dividend
  5123  1708  3194  24A8  3196   	fcall	___lwmod
  5124  170B  0020               	movlb	0	; select bank0
  5125  170C  0828               	movf	?___lwmod,w
  5126  170D  0429               	iorwf	?___lwmod+1,w
  5127  170E  1D03               	btfss	3,2
  5128  170F  0008               	return
  5129                           
  5130                           ;main.c: 321: scan_dev();
  5131  1710  3195  2537         	fcall	_scan_dev
  5132                           
  5133                           ;main.c: 322: t = 0;
  5134  1712  0022               	movlb	2	; select bank2
  5135  1713  01B6               	clrf	tick_handler@t^(0+256)
  5136  1714  01B7               	clrf	(tick_handler@t+1)^(0+256)
  5137  1715  0008               	return
  5138  1716                     __end_of_tick_handler:	
  5139                           
  5140                           	psect	text13
  5141  0526                     __ptext13:	
  5142 ;; *************** function _exec_remote_cmd *****************
  5143 ;; Defined at:
  5144 ;;		line 54 in file "main.c"
  5145 ;; Parameters:    Size  Location     Type
  5146 ;;  idx             1    wreg     unsigned char 
  5147 ;; Auto vars:     Size  Location     Type
  5148 ;;  idx             1   50[BANK1 ] unsigned char 
  5149 ;;  send_buf       50    0[BANK1 ] unsigned char [50]
  5150 ;;  buf             2   55[BANK1 ] PTR unsigned char 
  5151 ;;		 -> cmd_buf(192), 
  5152 ;;  data            1   54[BANK1 ] unsigned char 
  5153 ;;  status          1   53[BANK1 ] unsigned char 
  5154 ;;  i               1   52[BANK1 ] unsigned char 
  5155 ;;  j               1   51[BANK1 ] unsigned char 
  5156 ;; Return value:  Size  Location     Type
  5157 ;;                  1    wreg      unsigned char 
  5158 ;; Registers used:
  5159 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5160 ;; Tracked objects:
  5161 ;;		On entry : 0/0
  5162 ;;		On exit  : 0/0
  5163 ;;		Unchanged: 0/0
  5164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5166 ;;      Locals:         0       0      57       0       0       0       0       0       0       0       0       0       
      +0       0
  5167 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5168 ;;      Totals:         0       5      57       0       0       0       0       0       0       0       0       0       
      +0       0
  5169 ;;Total ram usage:       62 bytes
  5170 ;; Hardware stack levels used:    1
  5171 ;; Hardware stack levels required when called:    6
  5172 ;; This function calls:
  5173 ;;		___wmul
  5174 ;;		_atoi
  5175 ;;		_i2c1_read
  5176 ;;		_i2c1_write
  5177 ;;		_i2c1_write_no_data
  5178 ;;		_printf
  5179 ;;		_strncmp
  5180 ;; This function is called by:
  5181 ;;		_tick_handler
  5182 ;; This function uses a non-reentrant model
  5183 ;;
  5184                           
  5185                           
  5186                           ;psect for function _exec_remote_cmd
  5187  0526                     _exec_remote_cmd:	
  5188                           
  5189                           ;incstack = 0
  5190                           ; Regs used in _exec_remote_cmd: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5191                           ;exec_remote_cmd@idx stored from wreg
  5192  0526  0021               	movlb	1	; select bank1
  5193  0527  00D2               	movwf	exec_remote_cmd@idx^(0+128)
  5194                           
  5195                           ;main.c: 55: uint8_t data;
  5196                           ;main.c: 56: uint8_t i, j;
  5197                           ;main.c: 57: uint8_t status;
  5198                           ;main.c: 59: uint8_t send_buf[48 + 2];
  5199                           ;main.c: 61: char *buf = cmd_buf[idx];
  5200  0528  0852               	movf	exec_remote_cmd@idx^(0+128),w
  5201  0529  0020               	movlb	0	; select bank0
  5202  052A  00C4               	movwf	??_exec_remote_cmd
  5203  052B  01C5               	clrf	??_exec_remote_cmd+1
  5204  052C  0844               	movf	??_exec_remote_cmd,w
  5205  052D  00A0               	movwf	___wmul@multiplier
  5206  052E  0845               	movf	??_exec_remote_cmd+1,w
  5207  052F  00A1               	movwf	___wmul@multiplier+1
  5208  0530  3030               	movlw	48
  5209  0531  00A2               	movwf	___wmul@multiplicand
  5210  0532  3000               	movlw	0
  5211  0533  00A3               	movwf	___wmul@multiplicand+1
  5212  0534  3193  231A  3185   	fcall	___wmul
  5213  0537  3030               	movlw	48
  5214  0538  0020               	movlb	0	; select bank0
  5215  0539  00C6               	movwf	??_exec_remote_cmd+2
  5216  053A  3023               	movlw	35
  5217  053B  00C7               	movwf	??_exec_remote_cmd+3
  5218  053C  0820               	movf	?___wmul,w
  5219  053D  0746               	addwf	??_exec_remote_cmd+2,w
  5220  053E  0021               	movlb	1	; select bank1
  5221  053F  00D7               	movwf	exec_remote_cmd@buf^(0+128)
  5222  0540  0020               	movlb	0	; select bank0
  5223  0541  0821               	movf	?___wmul+1,w
  5224  0542  3D47               	addwfc	??_exec_remote_cmd+3,w
  5225  0543  0021               	movlb	1	; select bank1
  5226  0544  00D8               	movwf	(exec_remote_cmd@buf+1)^(0+128)
  5227                           
  5228                           ;main.c: 62: if (buf[0] == '\0') return 0;
  5229  0545  0857               	movf	exec_remote_cmd@buf^(0+128),w
  5230  0546  0086               	movwf	6
  5231  0547  0858               	movf	(exec_remote_cmd@buf+1)^(0+128),w
  5232  0548  0087               	movwf	7
  5233  0549  0801               	movf	1,w
  5234  054A  1D03               	btfss	3,2
  5235  054B  2D4E               	goto	l5508
  5236  054C  3000               	movlw	0
  5237  054D  0008               	return
  5238  054E                     l5508:	
  5239                           
  5240                           ;main.c: 64: if (!strncmp(("WHO"), (buf), 3)) {
  5241  054E  309D               	movlw	low (STR_1| (0+32768))
  5242  054F  0020               	movlb	0	; select bank0
  5243  0550  00A0               	movwf	strncmp@s1
  5244  0551  3091               	movlw	high (STR_1| (0+32768))
  5245  0552  00A1               	movwf	strncmp@s1+1
  5246  0553  0021               	movlb	1	; select bank1
  5247  0554  0858               	movf	(exec_remote_cmd@buf+1)^(0+128),w
  5248  0555  0020               	movlb	0	; select bank0
  5249  0556  00A3               	movwf	strncmp@s2+1
  5250  0557  0021               	movlb	1	; select bank1
  5251  0558  0857               	movf	exec_remote_cmd@buf^(0+128),w
  5252  0559  0020               	movlb	0	; select bank0
  5253  055A  00A2               	movwf	strncmp@s2
  5254  055B  3003               	movlw	3
  5255  055C  00A4               	movwf	strncmp@len
  5256  055D  3000               	movlw	0
  5257  055E  00A5               	movwf	strncmp@len+1
  5258  055F  3195  25B0  3185   	fcall	_strncmp
  5259  0562  0020               	movlb	0	; select bank0
  5260  0563  0820               	movf	?_strncmp,w
  5261  0564  0421               	iorwf	?_strncmp+1,w
  5262  0565  1D03               	btfss	3,2
  5263  0566  2D8D               	goto	l5518
  5264                           
  5265                           ;main.c: 65: status = i2c1_read(BACKPLANE_SLAVE_ADDRESS, 0x01, &data, 1);
  5266  0567  0021               	movlb	1	; select bank1
  5267  0568  086E               	movf	_BACKPLANE_SLAVE_ADDRESS^(0+128),w
  5268  0569  0020               	movlb	0	; select bank0
  5269  056A  00C4               	movwf	??_exec_remote_cmd
  5270  056B  01C5               	clrf	??_exec_remote_cmd+1
  5271  056C  0844               	movf	??_exec_remote_cmd,w
  5272  056D  00B0               	movwf	i2c1_read@dev_addr
  5273  056E  0845               	movf	??_exec_remote_cmd+1,w
  5274  056F  00B1               	movwf	i2c1_read@dev_addr+1
  5275  0570  01B2               	clrf	i2c1_read@reg_addr
  5276  0571  0AB2               	incf	i2c1_read@reg_addr,f
  5277  0572  30D6               	movlw	low exec_remote_cmd@data
  5278  0573  00B3               	movwf	i2c1_read@pbuf
  5279  0574  3000               	movlw	high exec_remote_cmd@data
  5280  0575  00B4               	movwf	i2c1_read@pbuf+1
  5281  0576  01B5               	clrf	i2c1_read@len
  5282  0577  0AB5               	incf	i2c1_read@len,f
  5283  0578  3188  20CA  3185   	fcall	_i2c1_read
  5284  057B  0020               	movlb	0	; select bank0
  5285  057C  00C6               	movwf	??_exec_remote_cmd+2
  5286  057D  0846               	movf	??_exec_remote_cmd+2,w
  5287  057E  0021               	movlb	1	; select bank1
  5288  057F  00D5               	movwf	exec_remote_cmd@status^(0+128)
  5289                           
  5290                           ;main.c: 66: if (status == 0) printf("$:WHO:%d\n", data);
  5291  0580  0855               	movf	exec_remote_cmd@status^(0+128),w
  5292  0581  1D03               	btfss	3,2
  5293  0582  2D88               	goto	l5516
  5294  0583  301C               	movlw	low (STR_2| (0+32768))
  5295  0584  0020               	movlb	0	; select bank0
  5296  0585  00AE               	movwf	printf@f
  5297  0586  3091               	movlw	high (STR_2| (0+32768))
  5298  0587  2EA0               	goto	L5
  5299  0588                     l5516:	
  5300                           
  5301                           ;main.c: 67: else printf("!:WHO:NACK\n");
  5302  0588  30BD               	movlw	low (STR_3| (0+32768))
  5303  0589  0020               	movlb	0	; select bank0
  5304  058A  00AE               	movwf	printf@f
  5305  058B  3090               	movlw	high (STR_3| (0+32768))
  5306  058C  2F0E               	goto	L6
  5307  058D                     l5518:	
  5308                           ;main.c: 68: } else if (!strncmp(("SAV"), (buf), 3)) {
  5309                           
  5310  058D  30B5               	movlw	low (STR_4| (0+32768))
  5311  058E  0020               	movlb	0	; select bank0
  5312  058F  00A0               	movwf	strncmp@s1
  5313  0590  3091               	movlw	high (STR_4| (0+32768))
  5314  0591  00A1               	movwf	strncmp@s1+1
  5315  0592  0021               	movlb	1	; select bank1
  5316  0593  0858               	movf	(exec_remote_cmd@buf+1)^(0+128),w
  5317  0594  0020               	movlb	0	; select bank0
  5318  0595  00A3               	movwf	strncmp@s2+1
  5319  0596  0021               	movlb	1	; select bank1
  5320  0597  0857               	movf	exec_remote_cmd@buf^(0+128),w
  5321  0598  0020               	movlb	0	; select bank0
  5322  0599  00A2               	movwf	strncmp@s2
  5323  059A  3003               	movlw	3
  5324  059B  00A4               	movwf	strncmp@len
  5325  059C  3000               	movlw	0
  5326  059D  00A5               	movwf	strncmp@len+1
  5327  059E  3195  25B0  3185   	fcall	_strncmp
  5328  05A1  0020               	movlb	0	; select bank0
  5329  05A2  0820               	movf	?_strncmp,w
  5330  05A3  0421               	iorwf	?_strncmp+1,w
  5331  05A4  1D03               	btfss	3,2
  5332  05A5  2DB1               	goto	l5522
  5333                           
  5334                           ;main.c: 69: status = i2c1_write_no_data(BACKPLANE_SLAVE_ADDRESS, 0x03);
  5335  05A6  0021               	movlb	1	; select bank1
  5336  05A7  086E               	movf	_BACKPLANE_SLAVE_ADDRESS^(0+128),w
  5337  05A8  0020               	movlb	0	; select bank0
  5338  05A9  00C4               	movwf	??_exec_remote_cmd
  5339  05AA  01C5               	clrf	??_exec_remote_cmd+1
  5340  05AB  0844               	movf	??_exec_remote_cmd,w
  5341  05AC  00AE               	movwf	i2c1_write_no_data@dev_addr
  5342  05AD  0845               	movf	??_exec_remote_cmd+1,w
  5343  05AE  00AF               	movwf	i2c1_write_no_data@dev_addr+1
  5344  05AF  3003               	movlw	3
  5345  05B0  2DD4               	goto	L4
  5346  05B1                     l5522:	
  5347                           ;main.c: 70: } else if (!strncmp(("STA"), (buf), 3)) {
  5348                           
  5349  05B1  3081               	movlw	low (STR_5| (0+32768))
  5350  05B2  0020               	movlb	0	; select bank0
  5351  05B3  00A0               	movwf	strncmp@s1
  5352  05B4  3091               	movlw	high (STR_5| (0+32768))
  5353  05B5  00A1               	movwf	strncmp@s1+1
  5354  05B6  0021               	movlb	1	; select bank1
  5355  05B7  0858               	movf	(exec_remote_cmd@buf+1)^(0+128),w
  5356  05B8  0020               	movlb	0	; select bank0
  5357  05B9  00A3               	movwf	strncmp@s2+1
  5358  05BA  0021               	movlb	1	; select bank1
  5359  05BB  0857               	movf	exec_remote_cmd@buf^(0+128),w
  5360  05BC  0020               	movlb	0	; select bank0
  5361  05BD  00A2               	movwf	strncmp@s2
  5362  05BE  3003               	movlw	3
  5363  05BF  00A4               	movwf	strncmp@len
  5364  05C0  3000               	movlw	0
  5365  05C1  00A5               	movwf	strncmp@len+1
  5366  05C2  3195  25B0  3185   	fcall	_strncmp
  5367  05C5  0020               	movlb	0	; select bank0
  5368  05C6  0820               	movf	?_strncmp,w
  5369  05C7  0421               	iorwf	?_strncmp+1,w
  5370  05C8  1D03               	btfss	3,2
  5371  05C9  2DE0               	goto	l5526
  5372                           
  5373                           ;main.c: 71: status = i2c1_write_no_data(BACKPLANE_SLAVE_ADDRESS, 0x04);
  5374  05CA  0021               	movlb	1	; select bank1
  5375  05CB  086E               	movf	_BACKPLANE_SLAVE_ADDRESS^(0+128),w
  5376  05CC  0020               	movlb	0	; select bank0
  5377  05CD  00C4               	movwf	??_exec_remote_cmd
  5378  05CE  01C5               	clrf	??_exec_remote_cmd+1
  5379  05CF  0844               	movf	??_exec_remote_cmd,w
  5380  05D0  00AE               	movwf	i2c1_write_no_data@dev_addr
  5381  05D1  0845               	movf	??_exec_remote_cmd+1,w
  5382  05D2  00AF               	movwf	i2c1_write_no_data@dev_addr+1
  5383  05D3  3004               	movlw	4
  5384  05D4                     L4:	
  5385  05D4  00C6               	movwf	??_exec_remote_cmd+2
  5386  05D5  0846               	movf	??_exec_remote_cmd+2,w
  5387  05D6  00B0               	movwf	i2c1_write_no_data@reg_addr
  5388  05D7  3194  2451  3185   	fcall	_i2c1_write_no_data
  5389  05DA  0020               	movlb	0	; select bank0
  5390  05DB  00C7               	movwf	??_exec_remote_cmd+3
  5391  05DC  0847               	movf	??_exec_remote_cmd+3,w
  5392  05DD  0021               	movlb	1	; select bank1
  5393  05DE  00D5               	movwf	exec_remote_cmd@status^(0+128)
  5394                           
  5395                           ;main.c: 72: } else if (!strncmp(("STP"), (buf), 3)) {
  5396  05DF  2F11               	goto	l5564
  5397  05E0                     l5526:	
  5398  05E0  30A5               	movlw	low (STR_6| (0+32768))
  5399  05E1  0020               	movlb	0	; select bank0
  5400  05E2  00A0               	movwf	strncmp@s1
  5401  05E3  3091               	movlw	high (STR_6| (0+32768))
  5402  05E4  00A1               	movwf	strncmp@s1+1
  5403  05E5  0021               	movlb	1	; select bank1
  5404  05E6  0858               	movf	(exec_remote_cmd@buf+1)^(0+128),w
  5405  05E7  0020               	movlb	0	; select bank0
  5406  05E8  00A3               	movwf	strncmp@s2+1
  5407  05E9  0021               	movlb	1	; select bank1
  5408  05EA  0857               	movf	exec_remote_cmd@buf^(0+128),w
  5409  05EB  0020               	movlb	0	; select bank0
  5410  05EC  00A2               	movwf	strncmp@s2
  5411  05ED  3003               	movlw	3
  5412  05EE  00A4               	movwf	strncmp@len
  5413  05EF  3000               	movlw	0
  5414  05F0  00A5               	movwf	strncmp@len+1
  5415  05F1  3195  25B0  3185   	fcall	_strncmp
  5416  05F4  0020               	movlb	0	; select bank0
  5417  05F5  0820               	movf	?_strncmp,w
  5418  05F6  0421               	iorwf	?_strncmp+1,w
  5419  05F7  1D03               	btfss	3,2
  5420  05F8  2E1B               	goto	l5536
  5421                           
  5422                           ;main.c: 73: status = i2c1_write_no_data(BACKPLANE_SLAVE_ADDRESS, 0x05);
  5423  05F9  0021               	movlb	1	; select bank1
  5424  05FA  086E               	movf	_BACKPLANE_SLAVE_ADDRESS^(0+128),w
  5425  05FB  0020               	movlb	0	; select bank0
  5426  05FC  00C4               	movwf	??_exec_remote_cmd
  5427  05FD  01C5               	clrf	??_exec_remote_cmd+1
  5428  05FE  0844               	movf	??_exec_remote_cmd,w
  5429  05FF  00AE               	movwf	i2c1_write_no_data@dev_addr
  5430  0600  0845               	movf	??_exec_remote_cmd+1,w
  5431  0601  00AF               	movwf	i2c1_write_no_data@dev_addr+1
  5432  0602  3005               	movlw	5
  5433  0603  00C6               	movwf	??_exec_remote_cmd+2
  5434  0604  0846               	movf	??_exec_remote_cmd+2,w
  5435  0605  00B0               	movwf	i2c1_write_no_data@reg_addr
  5436  0606  3194  2451  3185   	fcall	_i2c1_write_no_data
  5437  0609  0020               	movlb	0	; select bank0
  5438  060A  00C7               	movwf	??_exec_remote_cmd+3
  5439  060B  0847               	movf	??_exec_remote_cmd+3,w
  5440  060C  0021               	movlb	1	; select bank1
  5441  060D  00D5               	movwf	exec_remote_cmd@status^(0+128)
  5442                           
  5443                           ;main.c: 74: if (status == 0) printf("*:STP:ACK\n");
  5444  060E  0855               	movf	exec_remote_cmd@status^(0+128),w
  5445  060F  1D03               	btfss	3,2
  5446  0610  2E16               	goto	l5534
  5447  0611  30D5               	movlw	low (STR_7| (0+32768))
  5448  0612  0020               	movlb	0	; select bank0
  5449  0613  00AE               	movwf	printf@f
  5450  0614  3090               	movlw	high (STR_7| (0+32768))
  5451  0615  2F0E               	goto	L6
  5452  0616                     l5534:	
  5453                           
  5454                           ;main.c: 75: else printf("!:STP:NACK\n");
  5455  0616  30C9               	movlw	low (STR_8| (0+32768))
  5456  0617  0020               	movlb	0	; select bank0
  5457  0618  00AE               	movwf	printf@f
  5458  0619  3090               	movlw	high (STR_8| (0+32768))
  5459  061A  2F0E               	goto	L6
  5460  061B                     l5536:	
  5461                           ;main.c: 76: } else if (!strncmp(("SET"), (buf), 3)) {
  5462                           
  5463  061B  30B1               	movlw	low (STR_9| (0+32768))
  5464  061C  0020               	movlb	0	; select bank0
  5465  061D  00A0               	movwf	strncmp@s1
  5466  061E  3091               	movlw	high (STR_9| (0+32768))
  5467  061F  00A1               	movwf	strncmp@s1+1
  5468  0620  0021               	movlb	1	; select bank1
  5469  0621  0858               	movf	(exec_remote_cmd@buf+1)^(0+128),w
  5470  0622  0020               	movlb	0	; select bank0
  5471  0623  00A3               	movwf	strncmp@s2+1
  5472  0624  0021               	movlb	1	; select bank1
  5473  0625  0857               	movf	exec_remote_cmd@buf^(0+128),w
  5474  0626  0020               	movlb	0	; select bank0
  5475  0627  00A2               	movwf	strncmp@s2
  5476  0628  3003               	movlw	3
  5477  0629  00A4               	movwf	strncmp@len
  5478  062A  3000               	movlw	0
  5479  062B  00A5               	movwf	strncmp@len+1
  5480  062C  3195  25B0  3185   	fcall	_strncmp
  5481  062F  0020               	movlb	0	; select bank0
  5482  0630  0820               	movf	?_strncmp,w
  5483  0631  0421               	iorwf	?_strncmp+1,w
  5484  0632  1D03               	btfss	3,2
  5485  0633  2E6D               	goto	l5540
  5486                           
  5487                           ;main.c: 77: data = atoi(&buf[4]);
  5488  0634  0021               	movlb	1	; select bank1
  5489  0635  0857               	movf	exec_remote_cmd@buf^(0+128),w
  5490  0636  3E04               	addlw	4
  5491  0637  0020               	movlb	0	; select bank0
  5492  0638  00C4               	movwf	??_exec_remote_cmd
  5493  0639  3000               	movlw	0
  5494  063A  0021               	movlb	1	; select bank1
  5495  063B  3D58               	addwfc	(exec_remote_cmd@buf+1)^(0+128),w
  5496  063C  0020               	movlb	0	; select bank0
  5497  063D  00C5               	movwf	??_exec_remote_cmd+1
  5498  063E  0844               	movf	??_exec_remote_cmd,w
  5499  063F  00A6               	movwf	atoi@s
  5500  0640  0845               	movf	??_exec_remote_cmd+1,w
  5501  0641  00A7               	movwf	atoi@s+1
  5502  0642  3189  21D0  3185   	fcall	_atoi
  5503  0645  0020               	movlb	0	; select bank0
  5504  0646  0826               	movf	?_atoi,w
  5505  0647  00C6               	movwf	??_exec_remote_cmd+2
  5506  0648  0846               	movf	??_exec_remote_cmd+2,w
  5507  0649  0021               	movlb	1	; select bank1
  5508  064A  00D6               	movwf	exec_remote_cmd@data^(0+128)
  5509                           
  5510                           ;main.c: 78: i2c1_write_no_data(BACKPLANE_SLAVE_ADDRESS, 0x08);
  5511  064B  086E               	movf	_BACKPLANE_SLAVE_ADDRESS^(0+128),w
  5512  064C  0020               	movlb	0	; select bank0
  5513  064D  00C4               	movwf	??_exec_remote_cmd
  5514  064E  01C5               	clrf	??_exec_remote_cmd+1
  5515  064F  0844               	movf	??_exec_remote_cmd,w
  5516  0650  00AE               	movwf	i2c1_write_no_data@dev_addr
  5517  0651  0845               	movf	??_exec_remote_cmd+1,w
  5518  0652  00AF               	movwf	i2c1_write_no_data@dev_addr+1
  5519  0653  3008               	movlw	8
  5520  0654  00C6               	movwf	??_exec_remote_cmd+2
  5521  0655  0846               	movf	??_exec_remote_cmd+2,w
  5522  0656  00B0               	movwf	i2c1_write_no_data@reg_addr
  5523  0657  3194  2451  3185   	fcall	_i2c1_write_no_data
  5524                           
  5525                           ;main.c: 79: i2c1_write_no_data(BACKPLANE_SLAVE_ADDRESS, data);
  5526  065A  0021               	movlb	1	; select bank1
  5527  065B  086E               	movf	_BACKPLANE_SLAVE_ADDRESS^(0+128),w
  5528  065C  0020               	movlb	0	; select bank0
  5529  065D  00C4               	movwf	??_exec_remote_cmd
  5530  065E  01C5               	clrf	??_exec_remote_cmd+1
  5531  065F  0844               	movf	??_exec_remote_cmd,w
  5532  0660  00AE               	movwf	i2c1_write_no_data@dev_addr
  5533  0661  0845               	movf	??_exec_remote_cmd+1,w
  5534  0662  00AF               	movwf	i2c1_write_no_data@dev_addr+1
  5535  0663  0021               	movlb	1	; select bank1
  5536  0664  0856               	movf	exec_remote_cmd@data^(0+128),w
  5537  0665  0020               	movlb	0	; select bank0
  5538  0666  00C6               	movwf	??_exec_remote_cmd+2
  5539  0667  0846               	movf	??_exec_remote_cmd+2,w
  5540  0668  00B0               	movwf	i2c1_write_no_data@reg_addr
  5541  0669  3194  2451  3185   	fcall	_i2c1_write_no_data
  5542                           
  5543                           ;main.c: 80: } else if (!strncmp(("GET"), (buf), 3)) {
  5544  066C  2F11               	goto	l5564
  5545  066D                     l5540:	
  5546  066D  30AD               	movlw	low (STR_10| (0+32768))
  5547  066E  0020               	movlb	0	; select bank0
  5548  066F  00A0               	movwf	strncmp@s1
  5549  0670  3091               	movlw	high (STR_10| (0+32768))
  5550  0671  00A1               	movwf	strncmp@s1+1
  5551  0672  0021               	movlb	1	; select bank1
  5552  0673  0858               	movf	(exec_remote_cmd@buf+1)^(0+128),w
  5553  0674  0020               	movlb	0	; select bank0
  5554  0675  00A3               	movwf	strncmp@s2+1
  5555  0676  0021               	movlb	1	; select bank1
  5556  0677  0857               	movf	exec_remote_cmd@buf^(0+128),w
  5557  0678  0020               	movlb	0	; select bank0
  5558  0679  00A2               	movwf	strncmp@s2
  5559  067A  3003               	movlw	3
  5560  067B  00A4               	movwf	strncmp@len
  5561  067C  3000               	movlw	0
  5562  067D  00A5               	movwf	strncmp@len+1
  5563  067E  3195  25B0  3185   	fcall	_strncmp
  5564  0681  0020               	movlb	0	; select bank0
  5565  0682  0820               	movf	?_strncmp,w
  5566  0683  0421               	iorwf	?_strncmp+1,w
  5567  0684  1D03               	btfss	3,2
  5568  0685  2EAB               	goto	l5546
  5569                           
  5570                           ;main.c: 81: i2c1_read(BACKPLANE_SLAVE_ADDRESS, 0x09, &data, 1);
  5571  0686  0021               	movlb	1	; select bank1
  5572  0687  086E               	movf	_BACKPLANE_SLAVE_ADDRESS^(0+128),w
  5573  0688  0020               	movlb	0	; select bank0
  5574  0689  00C4               	movwf	??_exec_remote_cmd
  5575  068A  01C5               	clrf	??_exec_remote_cmd+1
  5576  068B  0844               	movf	??_exec_remote_cmd,w
  5577  068C  00B0               	movwf	i2c1_read@dev_addr
  5578  068D  0845               	movf	??_exec_remote_cmd+1,w
  5579  068E  00B1               	movwf	i2c1_read@dev_addr+1
  5580  068F  3009               	movlw	9
  5581  0690  00C6               	movwf	??_exec_remote_cmd+2
  5582  0691  0846               	movf	??_exec_remote_cmd+2,w
  5583  0692  00B2               	movwf	i2c1_read@reg_addr
  5584  0693  30D6               	movlw	low exec_remote_cmd@data
  5585  0694  00B3               	movwf	i2c1_read@pbuf
  5586  0695  3000               	movlw	high exec_remote_cmd@data
  5587  0696  00B4               	movwf	i2c1_read@pbuf+1
  5588  0697  01B5               	clrf	i2c1_read@len
  5589  0698  0AB5               	incf	i2c1_read@len,f
  5590  0699  3188  20CA  3185   	fcall	_i2c1_read
  5591                           
  5592                           ;main.c: 82: printf("$:GET:%d\n", data);
  5593  069C  3026               	movlw	low (STR_11| (0+32768))
  5594  069D  0020               	movlb	0	; select bank0
  5595  069E  00AE               	movwf	printf@f
  5596  069F  3091               	movlw	high (STR_11| (0+32768))
  5597  06A0                     L5:	
  5598  06A0  00AF               	movwf	printf@f+1
  5599  06A1  0021               	movlb	1	; select bank1
  5600  06A2  0856               	movf	exec_remote_cmd@data^(0+128),w
  5601  06A3  0020               	movlb	0	; select bank0
  5602  06A4  00C4               	movwf	??_exec_remote_cmd
  5603  06A5  01C5               	clrf	??_exec_remote_cmd+1
  5604  06A6  0844               	movf	??_exec_remote_cmd,w
  5605  06A7  00B0               	movwf	?_printf+2
  5606  06A8  0845               	movf	??_exec_remote_cmd+1,w
  5607  06A9  00B1               	movwf	?_printf+3
  5608  06AA  2F0F               	goto	L3
  5609  06AB                     l5546:	
  5610                           ;main.c: 84: } else {
  5611                           
  5612                           
  5613                           ;main.c: 85: i = 0;
  5614  06AB  0021               	movlb	1	; select bank1
  5615  06AC  01D4               	clrf	exec_remote_cmd@i^(0+128)
  5616                           
  5617                           ;main.c: 86: j = 2;
  5618  06AD  3002               	movlw	2
  5619  06AE  0020               	movlb	0	; select bank0
  5620  06AF  00C4               	movwf	??_exec_remote_cmd
  5621  06B0  0844               	movf	??_exec_remote_cmd,w
  5622  06B1  0021               	movlb	1	; select bank1
  5623  06B2  00D3               	movwf	exec_remote_cmd@j^(0+128)
  5624  06B3                     l5550:	
  5625                           ;main.c: 87: do {
  5626                           
  5627                           
  5628                           ;main.c: 88: send_buf[j++] = (uint8_t)buf[i];
  5629  06B3  0854               	movf	exec_remote_cmd@i^(0+128),w
  5630  06B4  0020               	movlb	0	; select bank0
  5631  06B5  00C4               	movwf	??_exec_remote_cmd
  5632  06B6  01C5               	clrf	??_exec_remote_cmd+1
  5633  06B7  0844               	movf	??_exec_remote_cmd,w
  5634  06B8  0021               	movlb	1	; select bank1
  5635  06B9  0757               	addwf	exec_remote_cmd@buf^(0+128),w
  5636  06BA  0086               	movwf	6
  5637  06BB  0020               	movlb	0	; select bank0
  5638  06BC  0845               	movf	??_exec_remote_cmd+1,w
  5639  06BD  0021               	movlb	1	; select bank1
  5640  06BE  3D58               	addwfc	(exec_remote_cmd@buf+1)^(0+128),w
  5641  06BF  0087               	movwf	7
  5642  06C0  0801               	movf	1,w
  5643  06C1  0020               	movlb	0	; select bank0
  5644  06C2  00C6               	movwf	??_exec_remote_cmd+2
  5645  06C3  0021               	movlb	1	; select bank1
  5646  06C4  0853               	movf	exec_remote_cmd@j^(0+128),w
  5647  06C5  3EA0               	addlw	(low (exec_remote_cmd@send_buf| 0))& (0+255)
  5648  06C6  0086               	movwf	6
  5649  06C7  0187               	clrf	7
  5650  06C8  0020               	movlb	0	; select bank0
  5651  06C9  0846               	movf	??_exec_remote_cmd+2,w
  5652  06CA  0081               	movwf	1
  5653  06CB  3001               	movlw	1
  5654  06CC  00C4               	movwf	??_exec_remote_cmd
  5655  06CD  0844               	movf	??_exec_remote_cmd,w
  5656  06CE  0021               	movlb	1	; select bank1
  5657  06CF  07D3               	addwf	exec_remote_cmd@j^(0+128),f
  5658                           
  5659                           ;main.c: 89: } while (buf[i++] != '\0');
  5660  06D0  0854               	movf	exec_remote_cmd@i^(0+128),w
  5661  06D1  0AD4               	incf	exec_remote_cmd@i^(0+128),f
  5662  06D2  0020               	movlb	0	; select bank0
  5663  06D3  00C4               	movwf	??_exec_remote_cmd
  5664  06D4  01C5               	clrf	??_exec_remote_cmd+1
  5665  06D5  0844               	movf	??_exec_remote_cmd,w
  5666  06D6  0021               	movlb	1	; select bank1
  5667  06D7  0757               	addwf	exec_remote_cmd@buf^(0+128),w
  5668  06D8  0086               	movwf	6
  5669  06D9  0020               	movlb	0	; select bank0
  5670  06DA  0845               	movf	??_exec_remote_cmd+1,w
  5671  06DB  0021               	movlb	1	; select bank1
  5672  06DC  3D58               	addwfc	(exec_remote_cmd@buf+1)^(0+128),w
  5673  06DD  0087               	movwf	7
  5674  06DE  0801               	movf	1,w
  5675  06DF  1D03               	btfss	3,2
  5676  06E0  2EB3               	goto	l5550
  5677                           
  5678                           ;main.c: 90: send_buf[0] = 0x0a;
  5679  06E1  300A               	movlw	10
  5680  06E2  0020               	movlb	0	; select bank0
  5681  06E3  00C4               	movwf	??_exec_remote_cmd
  5682  06E4  0844               	movf	??_exec_remote_cmd,w
  5683  06E5  0021               	movlb	1	; select bank1
  5684  06E6  00A0               	movwf	exec_remote_cmd@send_buf^(0+128)
  5685                           
  5686                           ;main.c: 91: send_buf[1] = i;
  5687  06E7  0854               	movf	exec_remote_cmd@i^(0+128),w
  5688  06E8  0020               	movlb	0	; select bank0
  5689  06E9  00C4               	movwf	??_exec_remote_cmd
  5690  06EA  0844               	movf	??_exec_remote_cmd,w
  5691  06EB  0021               	movlb	1	; select bank1
  5692  06EC  00A1               	movwf	(exec_remote_cmd@send_buf^(0+128)+1)
  5693                           
  5694                           ;main.c: 92: status = i2c1_write(BACKPLANE_SLAVE_ADDRESS, send_buf, j);
  5695  06ED  086E               	movf	_BACKPLANE_SLAVE_ADDRESS^(0+128),w
  5696  06EE  0020               	movlb	0	; select bank0
  5697  06EF  00C4               	movwf	??_exec_remote_cmd
  5698  06F0  01C5               	clrf	??_exec_remote_cmd+1
  5699  06F1  0844               	movf	??_exec_remote_cmd,w
  5700  06F2  00AE               	movwf	i2c1_write@dev_addr
  5701  06F3  0845               	movf	??_exec_remote_cmd+1,w
  5702  06F4  00AF               	movwf	i2c1_write@dev_addr+1
  5703  06F5  30A0               	movlw	(low (exec_remote_cmd@send_buf| 0))& (0+255)
  5704  06F6  00C6               	movwf	??_exec_remote_cmd+2
  5705  06F7  0846               	movf	??_exec_remote_cmd+2,w
  5706  06F8  00B0               	movwf	i2c1_write@pbuf
  5707  06F9  0021               	movlb	1	; select bank1
  5708  06FA  0853               	movf	exec_remote_cmd@j^(0+128),w
  5709  06FB  0020               	movlb	0	; select bank0
  5710  06FC  00C7               	movwf	??_exec_remote_cmd+3
  5711  06FD  0847               	movf	??_exec_remote_cmd+3,w
  5712  06FE  00B1               	movwf	i2c1_write@len
  5713  06FF  3193  23FF  3185   	fcall	_i2c1_write
  5714  0702  0020               	movlb	0	; select bank0
  5715  0703  00C8               	movwf	??_exec_remote_cmd+4
  5716  0704  0848               	movf	??_exec_remote_cmd+4,w
  5717  0705  0021               	movlb	1	; select bank1
  5718  0706  00D5               	movwf	exec_remote_cmd@status^(0+128)
  5719                           
  5720                           ;main.c: 93: if (status != 0) printf("!:NO ACK FROM I2C SLAVE\n");
  5721  0707  0855               	movf	exec_remote_cmd@status^(0+128),w
  5722  0708  1903               	btfsc	3,2
  5723  0709  2F11               	goto	l5564
  5724  070A  3059               	movlw	low (STR_12| (0+32768))
  5725  070B  0020               	movlb	0	; select bank0
  5726  070C  00AE               	movwf	printf@f
  5727  070D  3090               	movlw	high (STR_12| (0+32768))
  5728  070E                     L6:	
  5729  070E  00AF               	movwf	printf@f+1
  5730  070F                     L3:	
  5731  070F  318E  262B         	fcall	_printf
  5732  0711                     l5564:	
  5733                           
  5734                           ;main.c: 95: }
  5735                           ;main.c: 96: buf[0] = '\0';
  5736  0711  0021               	movlb	1	; select bank1
  5737  0712  0857               	movf	exec_remote_cmd@buf^(0+128),w
  5738  0713  0086               	movwf	6
  5739  0714  0858               	movf	(exec_remote_cmd@buf+1)^(0+128),w
  5740  0715  0087               	movwf	7
  5741  0716  0181               	clrf	1
  5742                           
  5743                           ;main.c: 97: return 1;
  5744  0717  3001               	movlw	1
  5745  0718  0008               	return
  5746  0719                     __end_of_exec_remote_cmd:	
  5747                           
  5748                           	psect	text14
  5749  13FF                     __ptext14:	
  5750 ;; *************** function _i2c1_write *****************
  5751 ;; Defined at:
  5752 ;;		line 8 in file "i2c1_util.c"
  5753 ;; Parameters:    Size  Location     Type
  5754 ;;  dev_addr        2   14[BANK0 ] unsigned int 
  5755 ;;  pbuf            1   16[BANK0 ] PTR unsigned char 
  5756 ;;		 -> exec_remote_cmd@send_buf(50), 
  5757 ;;  len             1   17[BANK0 ] unsigned char 
  5758 ;; Auto vars:     Size  Location     Type
  5759 ;;  status          1   21[BANK0 ] enum E3078
  5760 ;;  write_status    1   20[BANK0 ] unsigned char 
  5761 ;; Return value:  Size  Location     Type
  5762 ;;                  1    wreg      unsigned char 
  5763 ;; Registers used:
  5764 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5765 ;; Tracked objects:
  5766 ;;		On entry : 0/0
  5767 ;;		On exit  : 0/0
  5768 ;;		Unchanged: 0/0
  5769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5770 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5771 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5772 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5773 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5774 ;;Total ram usage:        8 bytes
  5775 ;; Hardware stack levels used:    1
  5776 ;; Hardware stack levels required when called:    5
  5777 ;; This function calls:
  5778 ;;		_I2C1_MasterWrite
  5779 ;; This function is called by:
  5780 ;;		_exec_remote_cmd
  5781 ;; This function uses a non-reentrant model
  5782 ;;
  5783                           
  5784                           
  5785                           ;psect for function _i2c1_write
  5786  13FF                     _i2c1_write:	
  5787                           
  5788                           ;i2c1_util.c: 10: I2C1_MESSAGE_STATUS status;
  5789                           ;i2c1_util.c: 11: uint8_t write_status;
  5790                           ;i2c1_util.c: 12: _delay((unsigned long)((100)*(32000000/4000000.0)));
  5791                           
  5792                           ;incstack = 0
  5793                           ; Regs used in _i2c1_write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5794  13FF  30A0               	movlw	160
  5795  1400                     u7517:	
  5796  1400  3200               	nop2
  5797  1401  0B89               	decfsz	9,f
  5798  1402  2C00               	goto	u7517
  5799                           
  5800                           ;i2c1_util.c: 13: I2C1_MasterWrite(pbuf, len, dev_addr, &status);
  5801  1403  0020               	movlb	0	; select bank0
  5802  1404  0831               	movf	i2c1_write@len,w
  5803  1405  00B2               	movwf	??_i2c1_write
  5804  1406  0832               	movf	??_i2c1_write,w
  5805  1407  00A7               	movwf	I2C1_MasterWrite@length
  5806  1408  082F               	movf	i2c1_write@dev_addr+1,w
  5807  1409  00A9               	movwf	I2C1_MasterWrite@address+1
  5808  140A  082E               	movf	i2c1_write@dev_addr,w
  5809  140B  00A8               	movwf	I2C1_MasterWrite@address
  5810  140C  3035               	movlw	(low (i2c1_write@status| 0))& (0+255)
  5811  140D  00B3               	movwf	??_i2c1_write+1
  5812  140E  0833               	movf	??_i2c1_write+1,w
  5813  140F  00AA               	movwf	I2C1_MasterWrite@pflag
  5814  1410  0830               	movf	i2c1_write@pbuf,w
  5815  1411  3194  2427  3193   	fcall	_I2C1_MasterWrite
  5816  1414                     l5432:	
  5817                           ;i2c1_util.c: 14: while (status == I2C1_MESSAGE_PENDING) {_delay((unsigned long)((100)*(
      +                          32000000/4000000.0)));};
  5818                           
  5819  1414  3002               	movlw	2
  5820  1415  0020               	movlb	0	; select bank0
  5821  1416  0635               	xorwf	i2c1_write@status,w
  5822  1417  1D03               	btfss	3,2
  5823  1418  2C1E               	goto	l5434
  5824  1419  30A0               	movlw	160
  5825  141A                     u7527:	
  5826  141A  3200               	nop2
  5827  141B  0B89               	decfsz	9,f
  5828  141C  2C1A               	goto	u7527
  5829  141D  2C14               	goto	l5432
  5830  141E                     l5434:	
  5831                           
  5832                           ;i2c1_util.c: 15: if (status == I2C1_MESSAGE_COMPLETE) {
  5833  141E  0835               	movf	i2c1_write@status,w
  5834  141F  1D03               	btfss	3,2
  5835  1420  2C23               	goto	l624
  5836                           
  5837                           ;i2c1_util.c: 16: write_status = 0;
  5838  1421  01B4               	clrf	i2c1_write@write_status
  5839                           
  5840                           ;i2c1_util.c: 17: } else {
  5841  1422  2C25               	goto	l5438
  5842  1423                     l624:	
  5843                           
  5844                           ;i2c1_util.c: 18: write_status = 1;
  5845  1423  01B4               	clrf	i2c1_write@write_status
  5846  1424  0AB4               	incf	i2c1_write@write_status,f
  5847  1425                     l5438:	
  5848                           
  5849                           ;i2c1_util.c: 19: }
  5850                           ;i2c1_util.c: 20: return write_status;
  5851  1425  0834               	movf	i2c1_write@write_status,w
  5852  1426  0008               	return
  5853  1427                     __end_of_i2c1_write:	
  5854                           
  5855                           	psect	text15
  5856  127E                     __ptext15:	
  5857 ;; *************** function _check_plg *****************
  5858 ;; Defined at:
  5859 ;;		line 199 in file "main.c"
  5860 ;; Parameters:    Size  Location     Type
  5861 ;;		None
  5862 ;; Auto vars:     Size  Location     Type
  5863 ;;  status          1   34[BANK0 ] unsigned char 
  5864 ;; Return value:  Size  Location     Type
  5865 ;;                  1    wreg      void 
  5866 ;; Registers used:
  5867 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5868 ;; Tracked objects:
  5869 ;;		On entry : 0/0
  5870 ;;		On exit  : 0/0
  5871 ;;		Unchanged: 0/0
  5872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5874 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5875 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5876 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5877 ;;Total ram usage:        3 bytes
  5878 ;; Hardware stack levels used:    1
  5879 ;; Hardware stack levels required when called:    7
  5880 ;; This function calls:
  5881 ;;		_i2c1_write_no_data
  5882 ;;		_scan_dev
  5883 ;; This function is called by:
  5884 ;;		_tick_handler
  5885 ;; This function uses a non-reentrant model
  5886 ;;
  5887                           
  5888                           
  5889                           ;psect for function _check_plg
  5890  127E                     _check_plg:	
  5891                           
  5892                           ;main.c: 200: uint8_t status = i2c1_write_no_data(0x00, 0x02);
  5893                           
  5894                           ;incstack = 0
  5895                           ; Regs used in _check_plg: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5896  127E  3000               	movlw	0
  5897  127F  0020               	movlb	0	; select bank0
  5898  1280  00AE               	movwf	i2c1_write_no_data@dev_addr
  5899  1281  00AF               	movwf	i2c1_write_no_data@dev_addr+1
  5900  1282  3002               	movlw	2
  5901  1283  00C0               	movwf	??_check_plg
  5902  1284  0840               	movf	??_check_plg,w
  5903  1285  00B0               	movwf	i2c1_write_no_data@reg_addr
  5904  1286  3194  2451  3192   	fcall	_i2c1_write_no_data
  5905  1289  0020               	movlb	0	; select bank0
  5906  128A  00C1               	movwf	??_check_plg+1
  5907  128B  0841               	movf	??_check_plg+1,w
  5908  128C  00C2               	movwf	check_plg@status
  5909                           
  5910                           ;main.c: 201: if (status == 0) scan_dev();
  5911  128D  0842               	movf	check_plg@status,w
  5912  128E  1D03               	btfss	3,2
  5913  128F  0008               	return
  5914  1290  3195  2537         	fcall	_scan_dev
  5915  1292  0008               	return
  5916  1293                     __end_of_check_plg:	
  5917                           
  5918                           	psect	text16
  5919  1537                     __ptext16:	
  5920 ;; *************** function _scan_dev *****************
  5921 ;; Defined at:
  5922 ;;		line 183 in file "main.c"
  5923 ;; Parameters:    Size  Location     Type
  5924 ;;		None
  5925 ;; Auto vars:     Size  Location     Type
  5926 ;;  dev_addr        1   31[BANK0 ] unsigned char 
  5927 ;;  status          1   30[BANK0 ] unsigned char 
  5928 ;; Return value:  Size  Location     Type
  5929 ;;                  1    wreg      void 
  5930 ;; Registers used:
  5931 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5932 ;; Tracked objects:
  5933 ;;		On entry : 0/0
  5934 ;;		On exit  : 0/0
  5935 ;;		Unchanged: 0/0
  5936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5937 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5938 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5939 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5940 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5941 ;;Total ram usage:        5 bytes
  5942 ;; Hardware stack levels used:    1
  5943 ;; Hardware stack levels required when called:    6
  5944 ;; This function calls:
  5945 ;;		_add_dev
  5946 ;;		_del_dev
  5947 ;;		_i2c1_read
  5948 ;; This function is called by:
  5949 ;;		_check_plg
  5950 ;;		_tick_handler
  5951 ;; This function uses a non-reentrant model
  5952 ;;
  5953                           
  5954                           
  5955                           ;psect for function _scan_dev
  5956  1537                     _scan_dev:	
  5957                           
  5958                           ;main.c: 184: uint8_t dev_addr, status;
  5959                           ;main.c: 185: for (dev_addr=0x10; dev_addr<=0x20; dev_addr++) {
  5960                           
  5961                           ;incstack = 0
  5962                           ; Regs used in _scan_dev: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5963  1537  3010               	movlw	16
  5964  1538  0020               	movlb	0	; select bank0
  5965  1539  00BB               	movwf	??_scan_dev
  5966  153A  083B               	movf	??_scan_dev,w
  5967  153B  00BF               	movwf	scan_dev@dev_addr
  5968  153C                     L7:	
  5969  153C  3021               	movlw	33
  5970  153D  023F               	subwf	scan_dev@dev_addr,w
  5971  153E  1803               	btfsc	3,0
  5972  153F  0008               	return
  5973                           
  5974                           ;main.c: 186: status = i2c1_read(dev_addr, 0x01, &read_buf[0], 1);
  5975  1540  083F               	movf	scan_dev@dev_addr,w
  5976  1541  00BB               	movwf	??_scan_dev
  5977  1542  01BC               	clrf	??_scan_dev+1
  5978  1543  083B               	movf	??_scan_dev,w
  5979  1544  00B0               	movwf	i2c1_read@dev_addr
  5980  1545  083C               	movf	??_scan_dev+1,w
  5981  1546  00B1               	movwf	i2c1_read@dev_addr+1
  5982  1547  01B2               	clrf	i2c1_read@reg_addr
  5983  1548  0AB2               	incf	i2c1_read@reg_addr,f
  5984  1549  30BC               	movlw	low _read_buf
  5985  154A  00B3               	movwf	i2c1_read@pbuf
  5986  154B  3001               	movlw	high _read_buf
  5987  154C  00B4               	movwf	i2c1_read@pbuf+1
  5988  154D  01B5               	clrf	i2c1_read@len
  5989  154E  0AB5               	incf	i2c1_read@len,f
  5990  154F  3188  20CA  3195   	fcall	_i2c1_read
  5991  1552  0020               	movlb	0	; select bank0
  5992  1553  00BD               	movwf	??_scan_dev+2
  5993  1554  083D               	movf	??_scan_dev+2,w
  5994  1555  00BE               	movwf	scan_dev@status
  5995                           
  5996                           ;main.c: 188: if (status == 0 && dev_addr == read_buf[0]) {
  5997  1556  083E               	movf	scan_dev@status,w
  5998  1557  1D03               	btfss	3,2
  5999  1558  2D64               	goto	l5454
  6000  1559  0023               	movlb	3	; select bank3
  6001  155A  083C               	movf	_read_buf^(0+384),w
  6002  155B  0020               	movlb	0	; select bank0
  6003  155C  063F               	xorwf	scan_dev@dev_addr,w
  6004  155D  1D03               	skipz
  6005  155E  2D64               	goto	l5454
  6006                           
  6007                           ;main.c: 189: add_dev(dev_addr);
  6008  155F  083F               	movf	scan_dev@dev_addr,w
  6009  1560  3197  2763  3195   	fcall	_add_dev
  6010                           
  6011                           ;main.c: 190: } else {
  6012  1563  2D69               	goto	l5456
  6013  1564                     l5454:	
  6014                           
  6015                           ;main.c: 191: del_dev(dev_addr);
  6016  1564  0020               	movlb	0	; select bank0
  6017  1565  083F               	movf	scan_dev@dev_addr,w
  6018  1566  3197  2716  3195   	fcall	_del_dev
  6019  1569                     l5456:	
  6020  1569  3001               	movlw	1
  6021  156A  0020               	movlb	0	; select bank0
  6022  156B  00BB               	movwf	??_scan_dev
  6023  156C  083B               	movf	??_scan_dev,w
  6024  156D  07BF               	addwf	scan_dev@dev_addr,f
  6025  156E  2D3C               	goto	L7
  6026  156F                     __end_of_scan_dev:	
  6027                           
  6028                           	psect	text17
  6029  1716                     __ptext17:	
  6030 ;; *************** function _del_dev *****************
  6031 ;; Defined at:
  6032 ;;		line 135 in file "main.c"
  6033 ;; Parameters:    Size  Location     Type
  6034 ;;  dev_addr        1    wreg     unsigned char 
  6035 ;; Auto vars:     Size  Location     Type
  6036 ;;  dev_addr        1   16[BANK0 ] unsigned char 
  6037 ;;  y               1   15[BANK0 ] unsigned char 
  6038 ;;  new_map         1   14[BANK0 ] unsigned char 
  6039 ;;  old_map         1   13[BANK0 ] unsigned char 
  6040 ;;  x               1   12[BANK0 ] unsigned char 
  6041 ;; Return value:  Size  Location     Type
  6042 ;;                  1    wreg      void 
  6043 ;; Registers used:
  6044 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6045 ;; Tracked objects:
  6046 ;;		On entry : 0/0
  6047 ;;		On exit  : 0/0
  6048 ;;		Unchanged: 0/0
  6049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6051 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6052 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6053 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6054 ;;Total ram usage:        8 bytes
  6055 ;; Hardware stack levels used:    1
  6056 ;; Hardware stack levels required when called:    4
  6057 ;; This function calls:
  6058 ;;		___awdiv
  6059 ;; This function is called by:
  6060 ;;		_scan_dev
  6061 ;; This function uses a non-reentrant model
  6062 ;;
  6063                           
  6064                           
  6065                           ;psect for function _del_dev
  6066  1716                     _del_dev:	
  6067                           
  6068                           ;incstack = 0
  6069                           ; Regs used in _del_dev: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6070                           ;del_dev@dev_addr stored from wreg
  6071  1716  0020               	movlb	0	; select bank0
  6072  1717  00B0               	movwf	del_dev@dev_addr
  6073                           
  6074                           ;main.c: 136: uint8_t x, y;
  6075                           ;main.c: 137: uint8_t new_map, old_map;
  6076                           ;main.c: 138: if (dev_addr >= 1 && dev_addr <= 0x20) {
  6077  1718  0830               	movf	del_dev@dev_addr,w
  6078  1719  1903               	btfsc	3,2
  6079  171A  0008               	return
  6080  171B  3021               	movlw	33
  6081  171C  0230               	subwf	del_dev@dev_addr,w
  6082  171D  1803               	skipnc
  6083  171E  0008               	return
  6084                           
  6085                           ;main.c: 139: y = dev_addr / 8;
  6086  171F  3008               	movlw	8
  6087  1720  00A0               	movwf	___awdiv@divisor
  6088  1721  3000               	movlw	0
  6089  1722  00A1               	movwf	___awdiv@divisor+1
  6090  1723  0830               	movf	del_dev@dev_addr,w
  6091  1724  00A9               	movwf	??_del_dev
  6092  1725  01AA               	clrf	??_del_dev+1
  6093  1726  0829               	movf	??_del_dev,w
  6094  1727  00A2               	movwf	___awdiv@dividend
  6095  1728  082A               	movf	??_del_dev+1,w
  6096  1729  00A3               	movwf	___awdiv@dividend+1
  6097  172A  3188  2078  3197   	fcall	___awdiv
  6098  172D  0020               	movlb	0	; select bank0
  6099  172E  0820               	movf	?___awdiv,w
  6100  172F  00AB               	movwf	??_del_dev+2
  6101  1730  082B               	movf	??_del_dev+2,w
  6102  1731  00AF               	movwf	del_dev@y
  6103                           
  6104                           ;main.c: 140: x = dev_addr % 8;
  6105  1732  0830               	movf	del_dev@dev_addr,w
  6106  1733  3907               	andlw	7
  6107  1734  00A9               	movwf	??_del_dev
  6108  1735  0829               	movf	??_del_dev,w
  6109  1736  00AC               	movwf	del_dev@x
  6110                           
  6111                           ;main.c: 141: old_map = dev_map[y];
  6112  1737  082F               	movf	del_dev@y,w
  6113  1738  3E20               	addlw	(low (_dev_map| (0+256)))& (0+255)
  6114  1739  0086               	movwf	6
  6115  173A  3001               	movlw	1	; select bank2/3
  6116  173B  0087               	movwf	7
  6117  173C  0801               	movf	1,w
  6118  173D  00A9               	movwf	??_del_dev
  6119  173E  0829               	movf	??_del_dev,w
  6120  173F  00AD               	movwf	del_dev@old_map
  6121                           
  6122                           ;main.c: 142: new_map = dev_map[y] & ~(0x01 << x);
  6123  1740  082F               	movf	del_dev@y,w
  6124  1741  3E20               	addlw	(low (_dev_map| (0+256)))& (0+255)
  6125  1742  0086               	movwf	6
  6126  1743  3001               	movlw	1	; select bank2/3
  6127  1744  0087               	movwf	7
  6128  1745  3001               	movlw	1
  6129  1746  00A9               	movwf	??_del_dev
  6130  1747  0A2C               	incf	del_dev@x,w
  6131  1748  2F4A               	goto	u5994
  6132  1749                     u5995:	
  6133  1749  35A9               	lslf	??_del_dev,f
  6134  174A                     u5994:	
  6135  174A  0B89               	decfsz	9,f
  6136  174B  2F49               	goto	u5995
  6137  174C  0829               	movf	??_del_dev,w
  6138  174D  3AFF               	xorlw	255
  6139  174E  0501               	andwf	1,w
  6140  174F  00AA               	movwf	??_del_dev+1
  6141  1750  082A               	movf	??_del_dev+1,w
  6142  1751  00AE               	movwf	del_dev@new_map
  6143                           
  6144                           ;main.c: 143: if (old_map != new_map) {
  6145  1752  082D               	movf	del_dev@old_map,w
  6146  1753  062E               	xorwf	del_dev@new_map,w
  6147  1754  1903               	skipnz
  6148  1755  0008               	return
  6149                           
  6150                           ;main.c: 144: dev_map[y] = new_map;
  6151  1756  082E               	movf	del_dev@new_map,w
  6152  1757  00A9               	movwf	??_del_dev
  6153  1758  082F               	movf	del_dev@y,w
  6154  1759  3E20               	addlw	(low (_dev_map| (0+256)))& (0+255)
  6155  175A  0086               	movwf	6
  6156  175B  3001               	movlw	1	; select bank2/3
  6157  175C  0087               	movwf	7
  6158  175D  0829               	movf	??_del_dev,w
  6159  175E  0081               	movwf	1
  6160                           
  6161                           ;main.c: 145: devs--;
  6162  175F  3001               	movlw	1
  6163  1760  0021               	movlb	1	; select bank1
  6164  1761  02E4               	subwf	_devs^(0+128),f
  6165  1762  0008               	return
  6166  1763                     __end_of_del_dev:	
  6167                           
  6168                           	psect	text18
  6169  1763                     __ptext18:	
  6170 ;; *************** function _add_dev *****************
  6171 ;; Defined at:
  6172 ;;		line 120 in file "main.c"
  6173 ;; Parameters:    Size  Location     Type
  6174 ;;  dev_addr        1    wreg     unsigned char 
  6175 ;; Auto vars:     Size  Location     Type
  6176 ;;  dev_addr        1   16[BANK0 ] unsigned char 
  6177 ;;  y               1   15[BANK0 ] unsigned char 
  6178 ;;  new_map         1   14[BANK0 ] unsigned char 
  6179 ;;  old_map         1   13[BANK0 ] unsigned char 
  6180 ;;  x               1   12[BANK0 ] unsigned char 
  6181 ;; Return value:  Size  Location     Type
  6182 ;;                  1    wreg      void 
  6183 ;; Registers used:
  6184 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6185 ;; Tracked objects:
  6186 ;;		On entry : 0/0
  6187 ;;		On exit  : 0/0
  6188 ;;		Unchanged: 0/0
  6189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6191 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6192 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6193 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6194 ;;Total ram usage:        8 bytes
  6195 ;; Hardware stack levels used:    1
  6196 ;; Hardware stack levels required when called:    4
  6197 ;; This function calls:
  6198 ;;		___awdiv
  6199 ;; This function is called by:
  6200 ;;		_scan_dev
  6201 ;; This function uses a non-reentrant model
  6202 ;;
  6203                           
  6204                           
  6205                           ;psect for function _add_dev
  6206  1763                     _add_dev:	
  6207                           
  6208                           ;incstack = 0
  6209                           ; Regs used in _add_dev: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6210                           ;add_dev@dev_addr stored from wreg
  6211  1763  0020               	movlb	0	; select bank0
  6212  1764  00B0               	movwf	add_dev@dev_addr
  6213                           
  6214                           ;main.c: 121: uint8_t x, y;
  6215                           ;main.c: 122: uint8_t new_map, old_map;
  6216                           ;main.c: 123: if (dev_addr >= 1 && dev_addr <= 0x20) {
  6217  1765  0830               	movf	add_dev@dev_addr,w
  6218  1766  1903               	btfsc	3,2
  6219  1767  0008               	return
  6220  1768  3021               	movlw	33
  6221  1769  0230               	subwf	add_dev@dev_addr,w
  6222  176A  1803               	skipnc
  6223  176B  0008               	return
  6224                           
  6225                           ;main.c: 124: y = dev_addr / 8;
  6226  176C  3008               	movlw	8
  6227  176D  00A0               	movwf	___awdiv@divisor
  6228  176E  3000               	movlw	0
  6229  176F  00A1               	movwf	___awdiv@divisor+1
  6230  1770  0830               	movf	add_dev@dev_addr,w
  6231  1771  00A9               	movwf	??_add_dev
  6232  1772  01AA               	clrf	??_add_dev+1
  6233  1773  0829               	movf	??_add_dev,w
  6234  1774  00A2               	movwf	___awdiv@dividend
  6235  1775  082A               	movf	??_add_dev+1,w
  6236  1776  00A3               	movwf	___awdiv@dividend+1
  6237  1777  3188  2078  3197   	fcall	___awdiv
  6238  177A  0020               	movlb	0	; select bank0
  6239  177B  0820               	movf	?___awdiv,w
  6240  177C  00AB               	movwf	??_add_dev+2
  6241  177D  082B               	movf	??_add_dev+2,w
  6242  177E  00AF               	movwf	add_dev@y
  6243                           
  6244                           ;main.c: 125: x = dev_addr % 8;
  6245  177F  0830               	movf	add_dev@dev_addr,w
  6246  1780  3907               	andlw	7
  6247  1781  00A9               	movwf	??_add_dev
  6248  1782  0829               	movf	??_add_dev,w
  6249  1783  00AC               	movwf	add_dev@x
  6250                           
  6251                           ;main.c: 126: old_map = dev_map[y];
  6252  1784  082F               	movf	add_dev@y,w
  6253  1785  3E20               	addlw	(low (_dev_map| (0+256)))& (0+255)
  6254  1786  0086               	movwf	6
  6255  1787  3001               	movlw	1	; select bank2/3
  6256  1788  0087               	movwf	7
  6257  1789  0801               	movf	1,w
  6258  178A  00A9               	movwf	??_add_dev
  6259  178B  0829               	movf	??_add_dev,w
  6260  178C  00AD               	movwf	add_dev@old_map
  6261                           
  6262                           ;main.c: 127: new_map = dev_map[y] | (0x01 << x);
  6263  178D  082F               	movf	add_dev@y,w
  6264  178E  3E20               	addlw	(low (_dev_map| (0+256)))& (0+255)
  6265  178F  0086               	movwf	6
  6266  1790  3001               	movlw	1	; select bank2/3
  6267  1791  0087               	movwf	7
  6268  1792  3001               	movlw	1
  6269  1793  00A9               	movwf	??_add_dev
  6270  1794  0A2C               	incf	add_dev@x,w
  6271  1795  2F97               	goto	u5954
  6272  1796                     u5955:	
  6273  1796  35A9               	lslf	??_add_dev,f
  6274  1797                     u5954:	
  6275  1797  0B89               	decfsz	9,f
  6276  1798  2F96               	goto	u5955
  6277  1799  0829               	movf	??_add_dev,w
  6278  179A  0401               	iorwf	1,w
  6279  179B  00AA               	movwf	??_add_dev+1
  6280  179C  082A               	movf	??_add_dev+1,w
  6281  179D  00AE               	movwf	add_dev@new_map
  6282                           
  6283                           ;main.c: 128: if (old_map != new_map) {
  6284  179E  082D               	movf	add_dev@old_map,w
  6285  179F  062E               	xorwf	add_dev@new_map,w
  6286  17A0  1903               	skipnz
  6287  17A1  0008               	return
  6288                           
  6289                           ;main.c: 129: dev_map[y] = new_map;
  6290  17A2  082E               	movf	add_dev@new_map,w
  6291  17A3  00A9               	movwf	??_add_dev
  6292  17A4  082F               	movf	add_dev@y,w
  6293  17A5  3E20               	addlw	(low (_dev_map| (0+256)))& (0+255)
  6294  17A6  0086               	movwf	6
  6295  17A7  3001               	movlw	1	; select bank2/3
  6296  17A8  0087               	movwf	7
  6297  17A9  0829               	movf	??_add_dev,w
  6298  17AA  0081               	movwf	1
  6299                           
  6300                           ;main.c: 130: devs++;
  6301  17AB  3001               	movlw	1
  6302  17AC  00A9               	movwf	??_add_dev
  6303  17AD  0829               	movf	??_add_dev,w
  6304  17AE  0021               	movlb	1	; select bank1
  6305  17AF  07E4               	addwf	_devs^(0+128),f
  6306  17B0  0008               	return
  6307  17B1                     __end_of_add_dev:	
  6308                           
  6309                           	psect	text19
  6310  0ABB                     __ptext19:	
  6311 ;; *************** function _inv_handler *****************
  6312 ;; Defined at:
  6313 ;;		line 329 in file "main.c"
  6314 ;; Parameters:    Size  Location     Type
  6315 ;;		None
  6316 ;; Auto vars:     Size  Location     Type
  6317 ;;  status          1    0        unsigned char 
  6318 ;;  dev_addr        1    0        unsigned char 
  6319 ;; Return value:  Size  Location     Type
  6320 ;;                  1    wreg      void 
  6321 ;; Registers used:
  6322 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6323 ;; Tracked objects:
  6324 ;;		On entry : 0/0
  6325 ;;		On exit  : 0/0
  6326 ;;		Unchanged: 0/0
  6327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6329 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6331 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6332 ;;Total ram usage:        0 bytes
  6333 ;; Hardware stack levels used:    1
  6334 ;; Hardware stack levels required when called:    9
  6335 ;; This function calls:
  6336 ;;		___lwmod
  6337 ;;		_fetch
  6338 ;; This function is called by:
  6339 ;;		_main
  6340 ;;		_PROTOCOL_Loop
  6341 ;; This function uses a non-reentrant model
  6342 ;;
  6343                           
  6344                           
  6345                           ;psect for function _inv_handler
  6346  0ABB                     _inv_handler:	
  6347                           
  6348                           ;main.c: 330: uint8_t dev_addr, status;
  6349                           ;main.c: 331: static uint16_t t = 0;
  6350                           ;main.c: 334: fetch(schedule[0]);
  6351                           
  6352                           ;incstack = 0
  6353                           ; Regs used in _inv_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6354  0ABB  30A0               	movlw	(low (_schedule| (0+256)))& (0+255)
  6355  0ABC  3197  27B1  318A   	fcall	_fetch
  6356                           
  6357                           ;main.c: 336: if (t % 2 == 0) fetch(schedule[1]);
  6358  0ABF  1870               	btfsc	inv_handler@t,0
  6359  0AC0  2AC5               	goto	l5804
  6360  0AC1  30A4               	movlw	(low ((_schedule| (0+256)+4)))& (0+255)
  6361  0AC2  3197  27B1  318A   	fcall	_fetch
  6362  0AC5                     l5804:	
  6363                           
  6364                           ;main.c: 338: if (t % 6 == 0) fetch(schedule[2]);
  6365  0AC5  3006               	movlw	6
  6366  0AC6  0020               	movlb	0	; select bank0
  6367  0AC7  00A8               	movwf	___lwmod@divisor
  6368  0AC8  3000               	movlw	0
  6369  0AC9  00A9               	movwf	___lwmod@divisor+1
  6370  0ACA  0871               	movf	inv_handler@t+1,w
  6371  0ACB  00AB               	movwf	___lwmod@dividend+1
  6372  0ACC  0870               	movf	inv_handler@t,w
  6373  0ACD  00AA               	movwf	___lwmod@dividend
  6374  0ACE  3194  24A8  318A   	fcall	___lwmod
  6375  0AD1  0020               	movlb	0	; select bank0
  6376  0AD2  0828               	movf	?___lwmod,w
  6377  0AD3  0429               	iorwf	?___lwmod+1,w
  6378  0AD4  1D03               	btfss	3,2
  6379  0AD5  2ADA               	goto	l5808
  6380  0AD6  30A8               	movlw	(low ((_schedule| (0+256)+8)))& (0+255)
  6381  0AD7  3197  27B1  318A   	fcall	_fetch
  6382  0ADA                     l5808:	
  6383                           
  6384                           ;main.c: 340: if (t % 12 == 0) fetch(schedule[3]);
  6385  0ADA  300C               	movlw	12
  6386  0ADB  0020               	movlb	0	; select bank0
  6387  0ADC  00A8               	movwf	___lwmod@divisor
  6388  0ADD  3000               	movlw	0
  6389  0ADE  00A9               	movwf	___lwmod@divisor+1
  6390  0ADF  0871               	movf	inv_handler@t+1,w
  6391  0AE0  00AB               	movwf	___lwmod@dividend+1
  6392  0AE1  0870               	movf	inv_handler@t,w
  6393  0AE2  00AA               	movwf	___lwmod@dividend
  6394  0AE3  3194  24A8  318A   	fcall	___lwmod
  6395  0AE6  0020               	movlb	0	; select bank0
  6396  0AE7  0828               	movf	?___lwmod,w
  6397  0AE8  0429               	iorwf	?___lwmod+1,w
  6398  0AE9  1D03               	btfss	3,2
  6399  0AEA  2AEF               	goto	l5812
  6400  0AEB  30AC               	movlw	(low ((_schedule| (0+256)+12)))& (0+255)
  6401  0AEC  3197  27B1  318A   	fcall	_fetch
  6402  0AEF                     l5812:	
  6403                           
  6404                           ;main.c: 342: if (t % 60 == 0) fetch(schedule[4]);
  6405  0AEF  303C               	movlw	60
  6406  0AF0  0020               	movlb	0	; select bank0
  6407  0AF1  00A8               	movwf	___lwmod@divisor
  6408  0AF2  3000               	movlw	0
  6409  0AF3  00A9               	movwf	___lwmod@divisor+1
  6410  0AF4  0871               	movf	inv_handler@t+1,w
  6411  0AF5  00AB               	movwf	___lwmod@dividend+1
  6412  0AF6  0870               	movf	inv_handler@t,w
  6413  0AF7  00AA               	movwf	___lwmod@dividend
  6414  0AF8  3194  24A8  318A   	fcall	___lwmod
  6415  0AFB  0020               	movlb	0	; select bank0
  6416  0AFC  0828               	movf	?___lwmod,w
  6417  0AFD  0429               	iorwf	?___lwmod+1,w
  6418  0AFE  1D03               	btfss	3,2
  6419  0AFF  2B04               	goto	l5816
  6420  0B00  30B0               	movlw	(low ((_schedule| (0+256)+16)))& (0+255)
  6421  0B01  3197  27B1  318A   	fcall	_fetch
  6422  0B04                     l5816:	
  6423                           
  6424                           ;main.c: 344: if (t % 120 == 0) fetch(schedule[5]);
  6425  0B04  3078               	movlw	120
  6426  0B05  0020               	movlb	0	; select bank0
  6427  0B06  00A8               	movwf	___lwmod@divisor
  6428  0B07  3000               	movlw	0
  6429  0B08  00A9               	movwf	___lwmod@divisor+1
  6430  0B09  0871               	movf	inv_handler@t+1,w
  6431  0B0A  00AB               	movwf	___lwmod@dividend+1
  6432  0B0B  0870               	movf	inv_handler@t,w
  6433  0B0C  00AA               	movwf	___lwmod@dividend
  6434  0B0D  3194  24A8  318A   	fcall	___lwmod
  6435  0B10  0020               	movlb	0	; select bank0
  6436  0B11  0828               	movf	?___lwmod,w
  6437  0B12  0429               	iorwf	?___lwmod+1,w
  6438  0B13  1D03               	btfss	3,2
  6439  0B14  2B19               	goto	l5820
  6440  0B15  30B4               	movlw	(low ((_schedule| (0+256)+20)))& (0+255)
  6441  0B16  3197  27B1  318A   	fcall	_fetch
  6442  0B19                     l5820:	
  6443                           
  6444                           ;main.c: 346: if (t % 600 == 0) {
  6445  0B19  3058               	movlw	88
  6446  0B1A  0020               	movlb	0	; select bank0
  6447  0B1B  00A8               	movwf	___lwmod@divisor
  6448  0B1C  3002               	movlw	2
  6449  0B1D  00A9               	movwf	___lwmod@divisor+1
  6450  0B1E  0871               	movf	inv_handler@t+1,w
  6451  0B1F  00AB               	movwf	___lwmod@dividend+1
  6452  0B20  0870               	movf	inv_handler@t,w
  6453  0B21  00AA               	movwf	___lwmod@dividend
  6454  0B22  3194  24A8  318A   	fcall	___lwmod
  6455  0B25  0020               	movlb	0	; select bank0
  6456  0B26  0828               	movf	?___lwmod,w
  6457  0B27  0429               	iorwf	?___lwmod+1,w
  6458  0B28  1D03               	btfss	3,2
  6459  0B29  2B31               	goto	l5826
  6460                           
  6461                           ;main.c: 347: fetch(schedule[6]);
  6462  0B2A  30B8               	movlw	(low ((_schedule| (0+256)+24)))& (0+255)
  6463  0B2B  3197  27B1         	fcall	_fetch
  6464                           
  6465                           ;main.c: 348: t = 1;
  6466  0B2D  3001               	movlw	1
  6467  0B2E  00F0               	movwf	inv_handler@t
  6468  0B2F  3000               	movlw	0
  6469  0B30  00F1               	movwf	inv_handler@t+1
  6470  0B31                     l5826:	
  6471                           
  6472                           ;main.c: 349: }
  6473                           ;main.c: 351: t++;
  6474  0B31  3001               	movlw	1
  6475  0B32  07F0               	addwf	inv_handler@t,f
  6476  0B33  3000               	movlw	0
  6477  0B34  3DF1               	addwfc	inv_handler@t+1,f
  6478  0B35  0008               	return
  6479  0B36                     __end_of_inv_handler:	
  6480                           
  6481                           	psect	text20
  6482  17B1                     __ptext20:	
  6483 ;; *************** function _fetch *****************
  6484 ;; Defined at:
  6485 ;;		line 282 in file "main.c"
  6486 ;; Parameters:    Size  Location     Type
  6487 ;;  sch             1    wreg     PTR unsigned char 
  6488 ;;		 -> schedule(28), 
  6489 ;; Auto vars:     Size  Location     Type
  6490 ;;  sch             1   58[BANK0 ] PTR unsigned char 
  6491 ;;		 -> schedule(28), 
  6492 ;;  dev_addr        1   60[BANK0 ] unsigned char 
  6493 ;;  pos             1   59[BANK0 ] unsigned char 
  6494 ;;  status          1   57[BANK0 ] unsigned char 
  6495 ;; Return value:  Size  Location     Type
  6496 ;;                  1    wreg      void 
  6497 ;; Registers used:
  6498 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6499 ;; Tracked objects:
  6500 ;;		On entry : 0/0
  6501 ;;		On exit  : 0/0
  6502 ;;		Unchanged: 0/0
  6503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6505 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6506 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6507 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6508 ;;Total ram usage:        7 bytes
  6509 ;; Hardware stack levels used:    1
  6510 ;; Hardware stack levels required when called:    8
  6511 ;; This function calls:
  6512 ;;		_detected
  6513 ;;		_i2c1_write_no_data
  6514 ;;		_printf
  6515 ;;		_sen
  6516 ;; This function is called by:
  6517 ;;		_inv_handler
  6518 ;; This function uses a non-reentrant model
  6519 ;;
  6520                           
  6521                           
  6522                           ;psect for function _fetch
  6523  17B1                     _fetch:	
  6524                           
  6525                           ;incstack = 0
  6526                           ; Regs used in _fetch: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6527                           ;fetch@sch stored from wreg
  6528  17B1  0020               	movlb	0	; select bank0
  6529  17B2  00DA               	movwf	fetch@sch
  6530                           
  6531                           ;main.c: 283: uint8_t pos;
  6532                           ;main.c: 284: uint8_t dev_addr;
  6533                           ;main.c: 285: uint8_t status;
  6534                           ;main.c: 286: for (pos=0; pos<4; pos++) {
  6535  17B3  01DB               	clrf	fetch@pos
  6536  17B4                     L8:	
  6537  17B4  3004               	movlw	4
  6538  17B5  025B               	subwf	fetch@pos,w
  6539  17B6  1803               	btfsc	3,0
  6540  17B7  0008               	return
  6541                           
  6542                           ;main.c: 287: dev_addr = sch[pos];
  6543  17B8  085B               	movf	fetch@pos,w
  6544  17B9  075A               	addwf	fetch@sch,w
  6545  17BA  00D6               	movwf	??_fetch
  6546  17BB  0856               	movf	??_fetch,w
  6547  17BC  0086               	movwf	6
  6548  17BD  3001               	movlw	1	; select bank2/3
  6549  17BE  0087               	movwf	7
  6550  17BF  0801               	movf	1,w
  6551  17C0  00D7               	movwf	??_fetch+1
  6552  17C1  0857               	movf	??_fetch+1,w
  6553  17C2  00DC               	movwf	fetch@dev_addr
  6554                           
  6555                           ;main.c: 288: if (dev_addr == 0 || dev_addr > 0x20) {
  6556  17C3  085C               	movf	fetch@dev_addr,w
  6557  17C4  1903               	btfsc	3,2
  6558  17C5  0008               	return
  6559  17C6  3021               	movlw	33
  6560  17C7  025C               	subwf	fetch@dev_addr,w
  6561  17C8  1803               	btfsc	3,0
  6562  17C9  0008               	return
  6563                           
  6564                           ;main.c: 290: } else if (detected(dev_addr)) {
  6565                           
  6566                           ;main.c: 289: break;
  6567  17CA  085C               	movf	fetch@dev_addr,w
  6568  17CB  3187  27CD  3197   	fcall	_detected
  6569  17CE  3A00               	xorlw	0
  6570  17CF  1903               	skipnz
  6571  17D0  2FFA               	goto	l5600
  6572                           
  6573                           ;main.c: 291: status = sen(dev_addr);
  6574  17D1  0020               	movlb	0	; select bank0
  6575  17D2  085C               	movf	fetch@dev_addr,w
  6576  17D3  3187  2719  3197   	fcall	_sen
  6577  17D6  0020               	movlb	0	; select bank0
  6578  17D7  00D6               	movwf	??_fetch
  6579  17D8  0856               	movf	??_fetch,w
  6580  17D9  00D9               	movwf	fetch@status
  6581                           
  6582                           ;main.c: 292: if (status > 0) {
  6583  17DA  0859               	movf	fetch@status,w
  6584  17DB  1903               	btfsc	3,2
  6585  17DC  2FFA               	goto	l5600
  6586                           
  6587                           ;main.c: 293: printf("!:%%%d:NETWORK ERROR\n", dev_addr);
  6588  17DD  3088               	movlw	low (STR_18| (0+32768))
  6589  17DE  00AE               	movwf	printf@f
  6590  17DF  3090               	movlw	high (STR_18| (0+32768))
  6591  17E0  00AF               	movwf	printf@f+1
  6592  17E1  085C               	movf	fetch@dev_addr,w
  6593  17E2  00D6               	movwf	??_fetch
  6594  17E3  01D7               	clrf	??_fetch+1
  6595  17E4  0856               	movf	??_fetch,w
  6596  17E5  00B0               	movwf	?_printf+2
  6597  17E6  0857               	movf	??_fetch+1,w
  6598  17E7  00B1               	movwf	?_printf+3
  6599  17E8  318E  262B  3197   	fcall	_printf
  6600                           
  6601                           ;main.c: 294: i2c1_write_no_data(dev_addr, 0x0c);
  6602  17EB  0020               	movlb	0	; select bank0
  6603  17EC  085C               	movf	fetch@dev_addr,w
  6604  17ED  00D6               	movwf	??_fetch
  6605  17EE  01D7               	clrf	??_fetch+1
  6606  17EF  0856               	movf	??_fetch,w
  6607  17F0  00AE               	movwf	i2c1_write_no_data@dev_addr
  6608  17F1  0857               	movf	??_fetch+1,w
  6609  17F2  00AF               	movwf	i2c1_write_no_data@dev_addr+1
  6610  17F3  300C               	movlw	12
  6611  17F4  00D8               	movwf	??_fetch+2
  6612  17F5  0858               	movf	??_fetch+2,w
  6613  17F6  00B0               	movwf	i2c1_write_no_data@reg_addr
  6614  17F7  3194  2451  3197   	fcall	_i2c1_write_no_data
  6615  17FA                     l5600:	
  6616  17FA  3001               	movlw	1
  6617  17FB  0020               	movlb	0	; select bank0
  6618  17FC  00D6               	movwf	??_fetch
  6619  17FD  0856               	movf	??_fetch,w
  6620  17FE  07DB               	addwf	fetch@pos,f
  6621  17FF  2FB4               	goto	L8
  6622  1800                     __end_of_fetch:	
  6623                           
  6624                           	psect	text21
  6625  11D6                     __ptext21:	
  6626 ;; *************** function _TMR0_HasOverflowOccured *****************
  6627 ;; Defined at:
  6628 ;;		line 101 in file "mcc_generated_files/tmr0.c"
  6629 ;; Parameters:    Size  Location     Type
  6630 ;;		None
  6631 ;; Auto vars:     Size  Location     Type
  6632 ;;		None
  6633 ;; Return value:  Size  Location     Type
  6634 ;;                  1    wreg      unsigned char 
  6635 ;; Registers used:
  6636 ;;		wreg, status,2, status,0
  6637 ;; Tracked objects:
  6638 ;;		On entry : 0/0
  6639 ;;		On exit  : 0/0
  6640 ;;		Unchanged: 0/0
  6641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6643 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6645 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6646 ;;Total ram usage:        0 bytes
  6647 ;; Hardware stack levels used:    1
  6648 ;; Hardware stack levels required when called:    3
  6649 ;; This function calls:
  6650 ;;		Nothing
  6651 ;; This function is called by:
  6652 ;;		_PROTOCOL_Loop
  6653 ;; This function uses a non-reentrant model
  6654 ;;
  6655                           
  6656                           
  6657                           ;psect for function _TMR0_HasOverflowOccured
  6658  11D6                     _TMR0_HasOverflowOccured:	
  6659                           
  6660                           ;tmr0.c: 104: return(INTCONbits.TMR0IF);
  6661                           
  6662                           ;incstack = 0
  6663                           ; Regs used in _TMR0_HasOverflowOccured: [wreg+status,2+status,0]
  6664  11D6  0C0B               	rrf	11,w	;volatile
  6665  11D7  0C89               	rrf	9,f
  6666  11D8  3901               	andlw	1
  6667  11D9  0008               	return
  6668  11DA                     __end_of_TMR0_HasOverflowOccured:	
  6669                           
  6670                           	psect	text22
  6671  1226                     __ptext22:	
  6672 ;; *************** function _PROTOCOL_Write_Device_Address *****************
  6673 ;; Defined at:
  6674 ;;		line 89 in file "protocol.c"
  6675 ;; Parameters:    Size  Location     Type
  6676 ;;  device_id_i2    1    wreg     unsigned char 
  6677 ;; Auto vars:     Size  Location     Type
  6678 ;;  device_id_i2    1    4[BANK0 ] unsigned char 
  6679 ;; Return value:  Size  Location     Type
  6680 ;;                  1    wreg      void 
  6681 ;; Registers used:
  6682 ;;		wreg, status,2, status,0, pclath, cstack
  6683 ;; Tracked objects:
  6684 ;;		On entry : 0/0
  6685 ;;		On exit  : 0/0
  6686 ;;		Unchanged: 0/0
  6687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6689 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6690 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6691 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6692 ;;Total ram usage:        2 bytes
  6693 ;; Hardware stack levels used:    1
  6694 ;; Hardware stack levels required when called:    4
  6695 ;; This function calls:
  6696 ;;		_DATAEE_WriteByte
  6697 ;; This function is called by:
  6698 ;;		_PROTOCOL_Loop
  6699 ;; This function uses a non-reentrant model
  6700 ;;
  6701                           
  6702                           
  6703                           ;psect for function _PROTOCOL_Write_Device_Address
  6704  1226                     _PROTOCOL_Write_Device_Address:	
  6705                           
  6706                           ;incstack = 0
  6707                           ; Regs used in _PROTOCOL_Write_Device_Address: [wreg+status,2+status,0+pclath+cstack]
  6708                           ;PROTOCOL_Write_Device_Address@device_id_i2c stored from wreg
  6709  1226  0020               	movlb	0	; select bank0
  6710  1227  00A4               	movwf	PROTOCOL_Write_Device_Address@device_id_i2c
  6711                           
  6712                           ;protocol.c: 90: DATAEE_WriteByte(0, device_id_i2c);
  6713  1228  0824               	movf	PROTOCOL_Write_Device_Address@device_id_i2c,w
  6714  1229  00A3               	movwf	??_PROTOCOL_Write_Device_Address
  6715  122A  0823               	movf	??_PROTOCOL_Write_Device_Address,w
  6716  122B  00A0               	movwf	DATAEE_WriteByte@bData
  6717  122C  3000               	movlw	0
  6718  122D  3193  2391         	fcall	_DATAEE_WriteByte
  6719                           
  6720                           ;protocol.c: 91: slave_address = device_id_i2c;
  6721  122F  0020               	movlb	0	; select bank0
  6722  1230  0824               	movf	PROTOCOL_Write_Device_Address@device_id_i2c,w
  6723  1231  00A3               	movwf	??_PROTOCOL_Write_Device_Address
  6724  1232  0823               	movf	??_PROTOCOL_Write_Device_Address,w
  6725  1233  0021               	movlb	1	; select bank1
  6726  1234  00E0               	movwf	_slave_address^(0+128)
  6727  1235  0008               	return
  6728  1236                     __end_of_PROTOCOL_Write_Device_Address:	
  6729                           
  6730                           	psect	text23
  6731  1FCF                     __ptext23:	
  6732 ;; *************** function _PROTOCOL_STP *****************
  6733 ;; Defined at:
  6734 ;;		line 103 in file "protocol.c"
  6735 ;; Parameters:    Size  Location     Type
  6736 ;;		None
  6737 ;; Auto vars:     Size  Location     Type
  6738 ;;		None
  6739 ;; Return value:  Size  Location     Type
  6740 ;;                  1    wreg      void 
  6741 ;; Registers used:
  6742 ;;		wreg, status,2, status,0
  6743 ;; Tracked objects:
  6744 ;;		On entry : 0/0
  6745 ;;		On exit  : 0/0
  6746 ;;		Unchanged: 0/0
  6747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6749 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6750 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6751 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6752 ;;Total ram usage:        0 bytes
  6753 ;; Hardware stack levels used:    1
  6754 ;; Hardware stack levels required when called:    3
  6755 ;; This function calls:
  6756 ;;		Nothing
  6757 ;; This function is called by:
  6758 ;;		_PROTOCOL_Loop
  6759 ;; This function uses a non-reentrant model
  6760 ;;
  6761                           
  6762                           
  6763                           ;psect for function _PROTOCOL_STP
  6764  1FCF                     _PROTOCOL_STP:	
  6765                           
  6766                           ;protocol.c: 105: running = 0;
  6767                           
  6768                           ;incstack = 0
  6769                           ; Regs used in _PROTOCOL_STP: [wreg+status,2+status,0]
  6770  1FCF  0022               	movlb	2	; select bank2
  6771  1FD0  01C2               	clrf	_running^(0+256)
  6772  1FD1  0008               	return
  6773  1FD2                     __end_of_PROTOCOL_STP:	
  6774                           
  6775                           	psect	text24
  6776  1FD5                     __ptext24:	
  6777 ;; *************** function _PROTOCOL_STA *****************
  6778 ;; Defined at:
  6779 ;;		line 98 in file "protocol.c"
  6780 ;; Parameters:    Size  Location     Type
  6781 ;;		None
  6782 ;; Auto vars:     Size  Location     Type
  6783 ;;		None
  6784 ;; Return value:  Size  Location     Type
  6785 ;;                  1    wreg      void 
  6786 ;; Registers used:
  6787 ;;		wreg, status,2, status,0
  6788 ;; Tracked objects:
  6789 ;;		On entry : 0/0
  6790 ;;		On exit  : 0/0
  6791 ;;		Unchanged: 0/0
  6792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6794 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6796 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6797 ;;Total ram usage:        0 bytes
  6798 ;; Hardware stack levels used:    1
  6799 ;; Hardware stack levels required when called:    3
  6800 ;; This function calls:
  6801 ;;		Nothing
  6802 ;; This function is called by:
  6803 ;;		_PROTOCOL_Loop
  6804 ;; This function uses a non-reentrant model
  6805 ;;
  6806                           
  6807                           
  6808                           ;psect for function _PROTOCOL_STA
  6809  1FD5                     _PROTOCOL_STA:	
  6810                           
  6811                           ;protocol.c: 100: running = 1;
  6812                           
  6813                           ;incstack = 0
  6814                           ; Regs used in _PROTOCOL_STA: [wreg+status,2+status,0]
  6815  1FD5  0022               	movlb	2	; select bank2
  6816  1FD6  01C2               	clrf	_running^(0+256)
  6817  1FD7  0AC2               	incf	_running^(0+256),f
  6818  1FD8  0008               	return
  6819  1FD9                     __end_of_PROTOCOL_STA:	
  6820                           
  6821                           	psect	text25
  6822  1FE6                     __ptext25:	
  6823 ;; *************** function _PROTOCOL_SET *****************
  6824 ;; Defined at:
  6825 ;;		line 116 in file "protocol.c"
  6826 ;; Parameters:    Size  Location     Type
  6827 ;;  value_          1    wreg     unsigned char 
  6828 ;; Auto vars:     Size  Location     Type
  6829 ;;  value_          1    1[BANK0 ] unsigned char 
  6830 ;; Return value:  Size  Location     Type
  6831 ;;                  1    wreg      void 
  6832 ;; Registers used:
  6833 ;;		wreg, status,2, status,0
  6834 ;; Tracked objects:
  6835 ;;		On entry : 0/0
  6836 ;;		On exit  : 0/0
  6837 ;;		Unchanged: 0/0
  6838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6840 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6841 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6842 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6843 ;;Total ram usage:        2 bytes
  6844 ;; Hardware stack levels used:    1
  6845 ;; Hardware stack levels required when called:    3
  6846 ;; This function calls:
  6847 ;;		Nothing
  6848 ;; This function is called by:
  6849 ;;		_PROTOCOL_Loop
  6850 ;; This function uses a non-reentrant model
  6851 ;;
  6852                           
  6853                           
  6854                           ;psect for function _PROTOCOL_SET
  6855  1FE6                     _PROTOCOL_SET:	
  6856                           
  6857                           ;incstack = 0
  6858                           ; Regs used in _PROTOCOL_SET: [wreg+status,2+status,0]
  6859                           ;PROTOCOL_SET@value_ stored from wreg
  6860  1FE6  0020               	movlb	0	; select bank0
  6861  1FE7  00A1               	movwf	PROTOCOL_SET@value_
  6862                           
  6863                           ;protocol.c: 117: value = value_;
  6864  1FE8  0821               	movf	PROTOCOL_SET@value_,w
  6865  1FE9  00A0               	movwf	??_PROTOCOL_SET
  6866  1FEA  0820               	movf	??_PROTOCOL_SET,w
  6867  1FEB  0021               	movlb	1	; select bank1
  6868  1FEC  00DE               	movwf	_value^(0+128)
  6869  1FED  0008               	return
  6870  1FEE                     __end_of_PROTOCOL_SET:	
  6871                           
  6872                           	psect	text26
  6873  11DA                     __ptext26:	
  6874 ;; *************** function _PROTOCOL_SAV *****************
  6875 ;; Defined at:
  6876 ;;		line 112 in file "protocol.c"
  6877 ;; Parameters:    Size  Location     Type
  6878 ;;		None
  6879 ;; Auto vars:     Size  Location     Type
  6880 ;;		None
  6881 ;; Return value:  Size  Location     Type
  6882 ;;                  1    wreg      void 
  6883 ;; Registers used:
  6884 ;;		wreg, status,2, status,0, pclath, cstack
  6885 ;; Tracked objects:
  6886 ;;		On entry : 0/0
  6887 ;;		On exit  : 0/0
  6888 ;;		Unchanged: 0/0
  6889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6891 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6892 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6893 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6894 ;;Total ram usage:        1 bytes
  6895 ;; Hardware stack levels used:    1
  6896 ;; Hardware stack levels required when called:    4
  6897 ;; This function calls:
  6898 ;;		_DATAEE_WriteByte
  6899 ;; This function is called by:
  6900 ;;		_PROTOCOL_Loop
  6901 ;; This function uses a non-reentrant model
  6902 ;;
  6903                           
  6904                           
  6905                           ;psect for function _PROTOCOL_SAV
  6906  11DA                     _PROTOCOL_SAV:	
  6907                           
  6908                           ;protocol.c: 113: DATAEE_WriteByte(1, value);
  6909                           
  6910                           ;incstack = 0
  6911                           ; Regs used in _PROTOCOL_SAV: [wreg+status,2+status,0+pclath+cstack]
  6912  11DA  0021               	movlb	1	; select bank1
  6913  11DB  085E               	movf	_value^(0+128),w
  6914  11DC  0020               	movlb	0	; select bank0
  6915  11DD  00A3               	movwf	??_PROTOCOL_SAV
  6916  11DE  0823               	movf	??_PROTOCOL_SAV,w
  6917  11DF  00A0               	movwf	DATAEE_WriteByte@bData
  6918  11E0  3001               	movlw	1
  6919  11E1  3193  2391         	fcall	_DATAEE_WriteByte
  6920  11E3  0008               	return
  6921  11E4                     __end_of_PROTOCOL_SAV:	
  6922                           
  6923                           	psect	text27
  6924  1FCC                     __ptext27:	
  6925 ;; *************** function _PROTOCOL_Read_Device_Address *****************
  6926 ;; Defined at:
  6927 ;;		line 94 in file "protocol.c"
  6928 ;; Parameters:    Size  Location     Type
  6929 ;;		None
  6930 ;; Auto vars:     Size  Location     Type
  6931 ;;		None
  6932 ;; Return value:  Size  Location     Type
  6933 ;;                  1    wreg      unsigned char 
  6934 ;; Registers used:
  6935 ;;		wreg
  6936 ;; Tracked objects:
  6937 ;;		On entry : 0/0
  6938 ;;		On exit  : 0/0
  6939 ;;		Unchanged: 0/0
  6940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6942 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6943 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6944 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6945 ;;Total ram usage:        0 bytes
  6946 ;; Hardware stack levels used:    1
  6947 ;; Hardware stack levels required when called:    3
  6948 ;; This function calls:
  6949 ;;		Nothing
  6950 ;; This function is called by:
  6951 ;;		_PROTOCOL_Loop
  6952 ;; This function uses a non-reentrant model
  6953 ;;
  6954                           
  6955                           
  6956                           ;psect for function _PROTOCOL_Read_Device_Address
  6957  1FCC                     _PROTOCOL_Read_Device_Address:	
  6958                           
  6959                           ;protocol.c: 95: return slave_address;
  6960                           
  6961                           ;incstack = 0
  6962                           ; Regs used in _PROTOCOL_Read_Device_Address: [wreg]
  6963  1FCC  0021               	movlb	1	; select bank1
  6964  1FCD  0860               	movf	_slave_address^(0+128),w
  6965  1FCE  0008               	return
  6966  1FCF                     __end_of_PROTOCOL_Read_Device_Address:	
  6967                           
  6968                           	psect	text28
  6969  126B                     __ptext28:	
  6970 ;; *************** function _PROTOCOL_EXT *****************
  6971 ;; Defined at:
  6972 ;;		line 121 in file "protocol.c"
  6973 ;; Parameters:    Size  Location     Type
  6974 ;;  char_buf        1    wreg     PTR unsigned char 
  6975 ;;		 -> buf(48), 
  6976 ;; Auto vars:     Size  Location     Type
  6977 ;;  char_buf        1   70[BANK0 ] PTR unsigned char 
  6978 ;;		 -> buf(48), 
  6979 ;; Return value:  Size  Location     Type
  6980 ;;                  1    wreg      void 
  6981 ;; Registers used:
  6982 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6983 ;; Tracked objects:
  6984 ;;		On entry : 0/0
  6985 ;;		On exit  : 0/0
  6986 ;;		Unchanged: 0/0
  6987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6989 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6990 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6991 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6992 ;;Total ram usage:        2 bytes
  6993 ;; Hardware stack levels used:    1
  6994 ;; Hardware stack levels required when called:   10
  6995 ;; This function calls:
  6996 ;;		Absolute function
  6997 ;;		_command_handler
  6998 ;; This function is called by:
  6999 ;;		_PROTOCOL_Loop
  7000 ;; This function uses a non-reentrant model
  7001 ;;
  7002                           
  7003                           
  7004                           ;psect for function _PROTOCOL_EXT
  7005  126B                     _PROTOCOL_EXT:	
  7006                           
  7007                           ;incstack = 0
  7008                           ; Regs used in _PROTOCOL_EXT: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7009                           ;PROTOCOL_EXT@char_buf stored from wreg
  7010  126B  0020               	movlb	0	; select bank0
  7011  126C  00E6               	movwf	PROTOCOL_EXT@char_buf
  7012                           
  7013                           ;protocol.c: 122: if (PROTOCOL_Extension_Handler) PROTOCOL_Extension_Handler(char_buf);
  7014  126D  0022               	movlb	2	; select bank2
  7015  126E  082C               	movf	_PROTOCOL_Extension_Handler^(0+256),w
  7016  126F  042D               	iorwf	(_PROTOCOL_Extension_Handler+1)^(0+256),w
  7017  1270  1903               	btfsc	3,2
  7018  1271  0008               	return
  7019  1272  0020               	movlb	0	; select bank0
  7020  1273  0866               	movf	PROTOCOL_EXT@char_buf,w
  7021  1274  00E5               	movwf	??_PROTOCOL_EXT
  7022  1275  0865               	movf	??_PROTOCOL_EXT,w
  7023  1276  00DB               	movwf	command_handler@buf
  7024  1277  0022               	movlb	2	; select bank2
  7025  1278  082D               	movf	(_PROTOCOL_Extension_Handler+1)^(0+256),w
  7026  1279  008A               	movwf	10
  7027  127A  082C               	movf	_PROTOCOL_Extension_Handler^(0+256),w
  7028  127B  000A               	callw
  7029  127C  3192               	pagesel	$
  7030  127D  0008               	return
  7031  127E                     __end_of_PROTOCOL_EXT:	
  7032                           
  7033                           	psect	text29
  7034  0329                     __ptext29:	
  7035 ;; *************** function _command_handler *****************
  7036 ;; Defined at:
  7037 ;;		line 366 in file "main.c"
  7038 ;; Parameters:    Size  Location     Type
  7039 ;;  buf             1   59[BANK0 ] PTR unsigned char 
  7040 ;;		 -> buf(48), 
  7041 ;; Auto vars:     Size  Location     Type
  7042 ;;  i               1   68[BANK0 ] unsigned char 
  7043 ;;  dev_addr        1   67[BANK0 ] unsigned char 
  7044 ;; Return value:  Size  Location     Type
  7045 ;;                  1    wreg      void 
  7046 ;; Registers used:
  7047 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7048 ;; Tracked objects:
  7049 ;;		On entry : 0/0
  7050 ;;		On exit  : 0/0
  7051 ;;		Unchanged: 0/0
  7052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7053 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7054 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7055 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7056 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7057 ;;Total ram usage:       10 bytes
  7058 ;; Hardware stack levels used:    1
  7059 ;; Hardware stack levels required when called:    9
  7060 ;; This function calls:
  7061 ;;		_DATAEE_WriteByte
  7062 ;;		___awdiv
  7063 ;;		_atoi
  7064 ;;		_one_shot_sen
  7065 ;;		_print_dev_map
  7066 ;;		_printf
  7067 ;;		_put_cmd
  7068 ;;		_strncmp
  7069 ;; This function is called by:
  7070 ;;		_main
  7071 ;;		_PROTOCOL_EXT
  7072 ;; This function uses a non-reentrant model
  7073 ;;
  7074                           
  7075                           
  7076                           ;psect for function _command_handler
  7077  0329                     _command_handler:	
  7078                           
  7079                           ;main.c: 367: static uint8_t pos = 0;
  7080                           ;main.c: 368: uint8_t i;
  7081                           ;main.c: 369: uint8_t dev_addr;
  7082                           ;main.c: 370: if (!strncmp(("I2C"), (buf), 3)) {
  7083                           
  7084                           ;incstack = 0
  7085                           ; Regs used in _command_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7086  0329  3085               	movlw	low (STR_20| (0+32768))
  7087  032A  0020               	movlb	0	; select bank0
  7088  032B  00A0               	movwf	strncmp@s1
  7089  032C  3091               	movlw	high (STR_20| (0+32768))
  7090  032D  00A1               	movwf	strncmp@s1+1
  7091  032E  085B               	movf	command_handler@buf,w
  7092  032F  00A2               	movwf	strncmp@s2
  7093  0330  3002               	movlw	2
  7094  0331  00A3               	movwf	strncmp@s2+1
  7095  0332  3003               	movlw	3
  7096  0333  00A4               	movwf	strncmp@len
  7097  0334  3000               	movlw	0
  7098  0335  00A5               	movwf	strncmp@len+1
  7099  0336  3195  25B0  3183   	fcall	_strncmp
  7100  0339  0020               	movlb	0	; select bank0
  7101  033A  0820               	movf	?_strncmp,w
  7102  033B  0421               	iorwf	?_strncmp+1,w
  7103  033C  1D03               	btfss	3,2
  7104  033D  2B4C               	goto	l5608
  7105                           
  7106                           ;main.c: 371: BACKPLANE_SLAVE_ADDRESS = atoi(&buf[4]);
  7107  033E  085B               	movf	command_handler@buf,w
  7108  033F  3E04               	addlw	4
  7109  0340  00A6               	movwf	atoi@s
  7110  0341  3002               	movlw	2
  7111  0342  00A7               	movwf	atoi@s+1
  7112  0343  3189  21D0         	fcall	_atoi
  7113  0345  0020               	movlb	0	; select bank0
  7114  0346  0826               	movf	?_atoi,w
  7115  0347  00DC               	movwf	??_command_handler
  7116  0348  085C               	movf	??_command_handler,w
  7117  0349  0021               	movlb	1	; select bank1
  7118  034A  00EE               	movwf	_BACKPLANE_SLAVE_ADDRESS^(0+128)
  7119                           
  7120                           ;main.c: 372: } else if (!strncmp(("MAP"), (buf), 3)) {
  7121  034B  0008               	return
  7122  034C                     l5608:	
  7123  034C  30A1               	movlw	low (STR_21| (0+32768))
  7124  034D  0020               	movlb	0	; select bank0
  7125  034E  00A0               	movwf	strncmp@s1
  7126  034F  3091               	movlw	high (STR_21| (0+32768))
  7127  0350  00A1               	movwf	strncmp@s1+1
  7128  0351  085B               	movf	command_handler@buf,w
  7129  0352  00A2               	movwf	strncmp@s2
  7130  0353  3002               	movlw	2
  7131  0354  00A3               	movwf	strncmp@s2+1
  7132  0355  3003               	movlw	3
  7133  0356  00A4               	movwf	strncmp@len
  7134  0357  3000               	movlw	0
  7135  0358  00A5               	movwf	strncmp@len+1
  7136  0359  3195  25B0  3183   	fcall	_strncmp
  7137  035C  0020               	movlb	0	; select bank0
  7138  035D  0820               	movf	?_strncmp,w
  7139  035E  0421               	iorwf	?_strncmp+1,w
  7140  035F  1D03               	btfss	3,2
  7141  0360  2B64               	goto	l5612
  7142                           
  7143                           ;main.c: 373: print_dev_map();
  7144  0361  3196  2638         	fcall	_print_dev_map
  7145                           
  7146                           ;main.c: 374: } else if (!strncmp(("POS"), (buf), 3)) {
  7147  0363  0008               	return
  7148  0364                     l5612:	
  7149  0364  30A9               	movlw	low (STR_22| (0+32768))
  7150  0365  0020               	movlb	0	; select bank0
  7151  0366  00A0               	movwf	strncmp@s1
  7152  0367  3091               	movlw	high (STR_22| (0+32768))
  7153  0368  00A1               	movwf	strncmp@s1+1
  7154  0369  085B               	movf	command_handler@buf,w
  7155  036A  00A2               	movwf	strncmp@s2
  7156  036B  3002               	movlw	2
  7157  036C  00A3               	movwf	strncmp@s2+1
  7158  036D  3003               	movlw	3
  7159  036E  00A4               	movwf	strncmp@len
  7160  036F  3000               	movlw	0
  7161  0370  00A5               	movwf	strncmp@len+1
  7162  0371  3195  25B0  3183   	fcall	_strncmp
  7163  0374  0020               	movlb	0	; select bank0
  7164  0375  0820               	movf	?_strncmp,w
  7165  0376  0421               	iorwf	?_strncmp+1,w
  7166  0377  1D03               	btfss	3,2
  7167  0378  2B91               	goto	l5620
  7168                           
  7169                           ;main.c: 375: pos = atoi(&buf[4]);
  7170  0379  085B               	movf	command_handler@buf,w
  7171  037A  3E04               	addlw	4
  7172  037B  00A6               	movwf	atoi@s
  7173  037C  3002               	movlw	2
  7174  037D  00A7               	movwf	atoi@s+1
  7175  037E  3189  21D0  3183   	fcall	_atoi
  7176  0381  0020               	movlb	0	; select bank0
  7177  0382  0826               	movf	?_atoi,w
  7178  0383  00DC               	movwf	??_command_handler
  7179  0384  085C               	movf	??_command_handler,w
  7180  0385  00F2               	movwf	command_handler@pos
  7181                           
  7182                           ;main.c: 376: if (pos > 27) printf("!:POS:POS LARGER THAN 27\n");
  7183  0386  301C               	movlw	28
  7184  0387  0272               	subwf	command_handler@pos,w
  7185  0388  1C03               	skipc
  7186  0389  0008               	return
  7187  038A  3025               	movlw	low (STR_23| (0+32768))
  7188  038B  00AE               	movwf	printf@f
  7189  038C  3090               	movlw	high (STR_23| (0+32768))
  7190  038D  00AF               	movwf	printf@f+1
  7191  038E  318E  262B         	fcall	_printf
  7192                           
  7193                           ;main.c: 377: } else if (!strncmp(("WSC"), (buf), 3)) {
  7194  0390  0008               	return
  7195  0391                     l5620:	
  7196  0391  3095               	movlw	low (STR_24| (0+32768))
  7197  0392  0020               	movlb	0	; select bank0
  7198  0393  00A0               	movwf	strncmp@s1
  7199  0394  3091               	movlw	high (STR_24| (0+32768))
  7200  0395  00A1               	movwf	strncmp@s1+1
  7201  0396  085B               	movf	command_handler@buf,w
  7202  0397  00A2               	movwf	strncmp@s2
  7203  0398  3002               	movlw	2
  7204  0399  00A3               	movwf	strncmp@s2+1
  7205  039A  3003               	movlw	3
  7206  039B  00A4               	movwf	strncmp@len
  7207  039C  3000               	movlw	0
  7208  039D  00A5               	movwf	strncmp@len+1
  7209  039E  3195  25B0  3183   	fcall	_strncmp
  7210  03A1  0020               	movlb	0	; select bank0
  7211  03A2  0820               	movf	?_strncmp,w
  7212  03A3  0421               	iorwf	?_strncmp+1,w
  7213  03A4  1D03               	btfss	3,2
  7214  03A5  2BE3               	goto	l5628
  7215                           
  7216                           ;main.c: 378: if (pos <= 27) {
  7217  03A6  301C               	movlw	28
  7218  03A7  0272               	subwf	command_handler@pos,w
  7219  03A8  1803               	skipnc
  7220  03A9  2BDC               	goto	l5626
  7221                           
  7222                           ;main.c: 379: dev_addr = atoi(&buf[4]);
  7223  03AA  085B               	movf	command_handler@buf,w
  7224  03AB  3E04               	addlw	4
  7225  03AC  00A6               	movwf	atoi@s
  7226  03AD  3002               	movlw	2
  7227  03AE  00A7               	movwf	atoi@s+1
  7228  03AF  3189  21D0  3183   	fcall	_atoi
  7229  03B2  0020               	movlb	0	; select bank0
  7230  03B3  0826               	movf	?_atoi,w
  7231  03B4  00DC               	movwf	??_command_handler
  7232  03B5  085C               	movf	??_command_handler,w
  7233  03B6  00E3               	movwf	command_handler@dev_addr
  7234                           
  7235                           ;main.c: 380: schedule[pos/4][pos%4] = dev_addr;
  7236  03B7  0863               	movf	command_handler@dev_addr,w
  7237  03B8  00DC               	movwf	??_command_handler
  7238  03B9  3004               	movlw	4
  7239  03BA  00A0               	movwf	___awdiv@divisor
  7240  03BB  3000               	movlw	0
  7241  03BC  00A1               	movwf	___awdiv@divisor+1
  7242  03BD  0872               	movf	command_handler@pos,w
  7243  03BE  00DD               	movwf	??_command_handler+1
  7244  03BF  01DE               	clrf	??_command_handler+2
  7245  03C0  085D               	movf	??_command_handler+1,w
  7246  03C1  00A2               	movwf	___awdiv@dividend
  7247  03C2  085E               	movf	??_command_handler+2,w
  7248  03C3  00A3               	movwf	___awdiv@dividend+1
  7249  03C4  3188  2078  3183   	fcall	___awdiv
  7250  03C7  0020               	movlb	0	; select bank0
  7251  03C8  0820               	movf	?___awdiv,w
  7252  03C9  00DF               	movwf	??_command_handler+3
  7253  03CA  3002               	movlw	2
  7254  03CB                     u6605:	
  7255  03CB  35DF               	lslf	??_command_handler+3,f
  7256  03CC  0B89               	decfsz	9,f
  7257  03CD  2BCB               	goto	u6605
  7258  03CE  30A0               	movlw	(low (_schedule| (0+256)))& (0+255)
  7259  03CF  075F               	addwf	??_command_handler+3,w
  7260  03D0  00E0               	movwf	??_command_handler+4
  7261  03D1  0872               	movf	command_handler@pos,w
  7262  03D2  3903               	andlw	3
  7263  03D3  0760               	addwf	??_command_handler+4,w
  7264  03D4  00E1               	movwf	??_command_handler+5
  7265  03D5  0861               	movf	??_command_handler+5,w
  7266  03D6  0086               	movwf	6
  7267  03D7  3001               	movlw	1	; select bank3/4
  7268  03D8  0087               	movwf	7
  7269  03D9  085C               	movf	??_command_handler,w
  7270  03DA  0081               	movwf	1
  7271                           
  7272                           ;main.c: 381: } else {
  7273  03DB  0008               	return
  7274  03DC                     l5626:	
  7275                           
  7276                           ;main.c: 382: printf("!:WSC:POS LARGER THAN 27\n");
  7277  03DC  300B               	movlw	low (STR_25| (0+32768))
  7278  03DD  00AE               	movwf	printf@f
  7279  03DE  3090               	movlw	high (STR_25| (0+32768))
  7280  03DF  00AF               	movwf	printf@f+1
  7281  03E0  318E  262B         	fcall	_printf
  7282                           
  7283                           ;main.c: 383: }
  7284                           ;main.c: 384: } else if (!strncmp(("SSC"), (buf), 3)) {
  7285  03E2  0008               	return
  7286  03E3                     l5628:	
  7287  03E3  3091               	movlw	low (STR_26| (0+32768))
  7288  03E4  0020               	movlb	0	; select bank0
  7289  03E5  00A0               	movwf	strncmp@s1
  7290  03E6  3091               	movlw	high (STR_26| (0+32768))
  7291  03E7  00A1               	movwf	strncmp@s1+1
  7292  03E8  085B               	movf	command_handler@buf,w
  7293  03E9  00A2               	movwf	strncmp@s2
  7294  03EA  3002               	movlw	2
  7295  03EB  00A3               	movwf	strncmp@s2+1
  7296  03EC  3003               	movlw	3
  7297  03ED  00A4               	movwf	strncmp@len
  7298  03EE  3000               	movlw	0
  7299  03EF  00A5               	movwf	strncmp@len+1
  7300  03F0  3195  25B0  3183   	fcall	_strncmp
  7301  03F3  0020               	movlb	0	; select bank0
  7302  03F4  0820               	movf	?_strncmp,w
  7303  03F5  0421               	iorwf	?_strncmp+1,w
  7304  03F6  1D03               	btfss	3,2
  7305  03F7  2C30               	goto	l5644
  7306                           
  7307                           ;main.c: 385: for(i=0; i<28; i++) {
  7308  03F8  01E4               	clrf	command_handler@i
  7309  03F9                     L9:	
  7310  03F9  301C               	movlw	28
  7311  03FA  0264               	subwf	command_handler@i,w
  7312  03FB  1803               	btfsc	3,0
  7313  03FC  0008               	return
  7314                           
  7315                           ;main.c: 386: dev_addr = schedule[i/4][i%4];
  7316  03FD  3004               	movlw	4
  7317  03FE  00A0               	movwf	___awdiv@divisor
  7318  03FF  3000               	movlw	0
  7319  0400  00A1               	movwf	___awdiv@divisor+1
  7320  0401  0864               	movf	command_handler@i,w
  7321  0402  00DC               	movwf	??_command_handler
  7322  0403  01DD               	clrf	??_command_handler+1
  7323  0404  085C               	movf	??_command_handler,w
  7324  0405  00A2               	movwf	___awdiv@dividend
  7325  0406  085D               	movf	??_command_handler+1,w
  7326  0407  00A3               	movwf	___awdiv@dividend+1
  7327  0408  3188  2078  3183   	fcall	___awdiv
  7328  040B  0020               	movlb	0	; select bank0
  7329  040C  0820               	movf	?___awdiv,w
  7330  040D  00DE               	movwf	??_command_handler+2
  7331  040E  3002               	movlw	2
  7332  040F                     u6635:	
  7333  040F  35DE               	lslf	??_command_handler+2,f
  7334  0410  0B89               	decfsz	9,f
  7335  0411  2C0F               	goto	u6635
  7336  0412  30A0               	movlw	(low (_schedule| (0+256)))& (0+255)
  7337  0413  075E               	addwf	??_command_handler+2,w
  7338  0414  00DF               	movwf	??_command_handler+3
  7339  0415  0864               	movf	command_handler@i,w
  7340  0416  3903               	andlw	3
  7341  0417  075F               	addwf	??_command_handler+3,w
  7342  0418  00E0               	movwf	??_command_handler+4
  7343  0419  0860               	movf	??_command_handler+4,w
  7344  041A  0086               	movwf	6
  7345  041B  3001               	movlw	1	; select bank3/4
  7346  041C  0087               	movwf	7
  7347  041D  0801               	movf	1,w
  7348  041E  00E1               	movwf	??_command_handler+5
  7349  041F  0861               	movf	??_command_handler+5,w
  7350  0420  00E3               	movwf	command_handler@dev_addr
  7351                           
  7352                           ;main.c: 387: DATAEE_WriteByte(2 + i, dev_addr);
  7353  0421  0863               	movf	command_handler@dev_addr,w
  7354  0422  00DC               	movwf	??_command_handler
  7355  0423  085C               	movf	??_command_handler,w
  7356  0424  00A0               	movwf	DATAEE_WriteByte@bData
  7357  0425  0864               	movf	command_handler@i,w
  7358  0426  3E02               	addlw	2
  7359  0427  3193  2391  3183   	fcall	_DATAEE_WriteByte
  7360  042A  3001               	movlw	1
  7361  042B  0020               	movlb	0	; select bank0
  7362  042C  00DC               	movwf	??_command_handler
  7363  042D  085C               	movf	??_command_handler,w
  7364  042E  07E4               	addwf	command_handler@i,f
  7365  042F  2BF9               	goto	L9
  7366  0430                     l5644:	
  7367                           ;main.c: 388: }
  7368                           ;main.c: 389: } else if (!strncmp(("RSC"), (buf), 3)) {
  7369                           
  7370  0430  308D               	movlw	low (STR_27| (0+32768))
  7371  0431  00A0               	movwf	strncmp@s1
  7372  0432  3091               	movlw	high (STR_27| (0+32768))
  7373  0433  00A1               	movwf	strncmp@s1+1
  7374  0434  085B               	movf	command_handler@buf,w
  7375  0435  00A2               	movwf	strncmp@s2
  7376  0436  3002               	movlw	2
  7377  0437  00A3               	movwf	strncmp@s2+1
  7378  0438  3003               	movlw	3
  7379  0439  00A4               	movwf	strncmp@len
  7380  043A  3000               	movlw	0
  7381  043B  00A5               	movwf	strncmp@len+1
  7382  043C  3195  25B0  3183   	fcall	_strncmp
  7383  043F  0020               	movlb	0	; select bank0
  7384  0440  0820               	movf	?_strncmp,w
  7385  0441  0421               	iorwf	?_strncmp+1,w
  7386  0442  1D03               	btfss	3,2
  7387  0443  2CB8               	goto	l5666
  7388                           
  7389                           ;main.c: 390: printf("$:RSC:");
  7390  0444  3050               	movlw	low (STR_28| (0+32768))
  7391  0445  00AE               	movwf	printf@f
  7392  0446  3091               	movlw	high (STR_28| (0+32768))
  7393  0447  00AF               	movwf	printf@f+1
  7394  0448  318E  262B  3183   	fcall	_printf
  7395                           
  7396                           ;main.c: 391: for (i=0; i<27; i++) {
  7397  044B  0020               	movlb	0	; select bank0
  7398  044C  01E4               	clrf	command_handler@i
  7399  044D  301B               	movlw	27
  7400  044E  0264               	subwf	command_handler@i,w
  7401  044F  1803               	btfsc	3,0
  7402  0450  2CA8               	goto	l5664
  7403  0451                     l5654:	
  7404                           
  7405                           ;main.c: 392: if ((i+1) % 4 == 0) {
  7406  0451  0864               	movf	command_handler@i,w
  7407  0452  3E01               	addlw	1
  7408  0453  3903               	andlw	3
  7409  0454  1D03               	btfss	3,2
  7410  0455  2C70               	goto	l5658
  7411                           
  7412                           ;main.c: 393: printf("%d|", schedule[i/4][i%4]);
  7413  0456  30B9               	movlw	low (STR_29| (0+32768))
  7414  0457  00AE               	movwf	printf@f
  7415  0458  3091               	movlw	high (STR_29| (0+32768))
  7416  0459  00AF               	movwf	printf@f+1
  7417  045A  3004               	movlw	4
  7418  045B  00A0               	movwf	___awdiv@divisor
  7419  045C  3000               	movlw	0
  7420  045D  00A1               	movwf	___awdiv@divisor+1
  7421  045E  0864               	movf	command_handler@i,w
  7422  045F  00DC               	movwf	??_command_handler
  7423  0460  01DD               	clrf	??_command_handler+1
  7424  0461  085C               	movf	??_command_handler,w
  7425  0462  00A2               	movwf	___awdiv@dividend
  7426  0463  085D               	movf	??_command_handler+1,w
  7427  0464  00A3               	movwf	___awdiv@dividend+1
  7428  0465  3188  2078  3183   	fcall	___awdiv
  7429  0468  0020               	movlb	0	; select bank0
  7430  0469  0820               	movf	?___awdiv,w
  7431  046A  00DE               	movwf	??_command_handler+2
  7432  046B  3002               	movlw	2
  7433  046C                     u6685:	
  7434  046C  35DE               	lslf	??_command_handler+2,f
  7435  046D  0B89               	decfsz	9,f
  7436  046E  2C6C               	goto	u6685
  7437  046F  2C8A               	goto	L10
  7438  0470                     l5658:	
  7439                           ;main.c: 394: } else {
  7440                           
  7441                           
  7442                           ;main.c: 395: printf("%d,", schedule[i/4][i%4]);
  7443  0470  307D               	movlw	low (STR_14| (0+32768))
  7444  0471  0020               	movlb	0	; select bank0
  7445  0472  00AE               	movwf	printf@f
  7446  0473  3091               	movlw	high (STR_14| (0+32768))
  7447  0474  00AF               	movwf	printf@f+1
  7448  0475  3004               	movlw	4
  7449  0476  00A0               	movwf	___awdiv@divisor
  7450  0477  3000               	movlw	0
  7451  0478  00A1               	movwf	___awdiv@divisor+1
  7452  0479  0864               	movf	command_handler@i,w
  7453  047A  00DC               	movwf	??_command_handler
  7454  047B  01DD               	clrf	??_command_handler+1
  7455  047C  085C               	movf	??_command_handler,w
  7456  047D  00A2               	movwf	___awdiv@dividend
  7457  047E  085D               	movf	??_command_handler+1,w
  7458  047F  00A3               	movwf	___awdiv@dividend+1
  7459  0480  3188  2078  3183   	fcall	___awdiv
  7460  0483  0020               	movlb	0	; select bank0
  7461  0484  0820               	movf	?___awdiv,w
  7462  0485  00DE               	movwf	??_command_handler+2
  7463  0486  3002               	movlw	2
  7464  0487                     u6695:	
  7465  0487  35DE               	lslf	??_command_handler+2,f
  7466  0488  0B89               	decfsz	9,f
  7467  0489  2C87               	goto	u6695
  7468  048A                     L10:	
  7469  048A  30A0               	movlw	(low (_schedule| (0+256)))& (0+255)
  7470  048B  075E               	addwf	??_command_handler+2,w
  7471  048C  00DF               	movwf	??_command_handler+3
  7472  048D  0864               	movf	command_handler@i,w
  7473  048E  3903               	andlw	3
  7474  048F  075F               	addwf	??_command_handler+3,w
  7475  0490  00E0               	movwf	??_command_handler+4
  7476  0491  0860               	movf	??_command_handler+4,w
  7477  0492  0086               	movwf	6
  7478  0493  3001               	movlw	1	; select bank3/4
  7479  0494  0087               	movwf	7
  7480  0495  0801               	movf	1,w
  7481  0496  00E1               	movwf	??_command_handler+5
  7482  0497  01E2               	clrf	??_command_handler+6
  7483  0498  0861               	movf	??_command_handler+5,w
  7484  0499  00B0               	movwf	?_printf+2
  7485  049A  0862               	movf	??_command_handler+6,w
  7486  049B  00B1               	movwf	?_printf+3
  7487  049C  318E  262B  3183   	fcall	_printf
  7488  049F  3001               	movlw	1
  7489  04A0  0020               	movlb	0	; select bank0
  7490  04A1  00DC               	movwf	??_command_handler
  7491  04A2  085C               	movf	??_command_handler,w
  7492  04A3  07E4               	addwf	command_handler@i,f
  7493  04A4  301B               	movlw	27
  7494  04A5  0264               	subwf	command_handler@i,w
  7495  04A6  1C03               	skipc
  7496  04A7  2C51               	goto	l5654
  7497  04A8                     l5664:	
  7498                           
  7499                           ;main.c: 396: }
  7500                           ;main.c: 397: }
  7501                           ;main.c: 398: printf("%d\n", schedule[6][3]);
  7502  04A8  30E6               	movlw	low ((STR_49+6)| (0+32768))
  7503  04A9  00AE               	movwf	printf@f
  7504  04AA  3090               	movlw	high ((STR_49+6)| (0+32768))
  7505  04AB  00AF               	movwf	printf@f+1
  7506  04AC  0023               	movlb	3	; select bank3
  7507  04AD  083B               	movf	(_schedule^(0+384)+27),w
  7508  04AE  0020               	movlb	0	; select bank0
  7509  04AF  00DC               	movwf	??_command_handler
  7510  04B0  01DD               	clrf	??_command_handler+1
  7511  04B1  085C               	movf	??_command_handler,w
  7512  04B2  00B0               	movwf	?_printf+2
  7513  04B3  085D               	movf	??_command_handler+1,w
  7514  04B4  00B1               	movwf	?_printf+3
  7515  04B5  318E  262B         	fcall	_printf
  7516                           
  7517                           ;main.c: 399: } else if (!strncmp(("CSC"), (buf), 3)) {
  7518  04B7  0008               	return
  7519  04B8                     l5666:	
  7520  04B8  3089               	movlw	low (STR_32| (0+32768))
  7521  04B9  0020               	movlb	0	; select bank0
  7522  04BA  00A0               	movwf	strncmp@s1
  7523  04BB  3091               	movlw	high (STR_32| (0+32768))
  7524  04BC  00A1               	movwf	strncmp@s1+1
  7525  04BD  085B               	movf	command_handler@buf,w
  7526  04BE  00A2               	movwf	strncmp@s2
  7527  04BF  3002               	movlw	2
  7528  04C0  00A3               	movwf	strncmp@s2+1
  7529  04C1  3003               	movlw	3
  7530  04C2  00A4               	movwf	strncmp@len
  7531  04C3  3000               	movlw	0
  7532  04C4  00A5               	movwf	strncmp@len+1
  7533  04C5  3195  25B0  3183   	fcall	_strncmp
  7534  04C8  0020               	movlb	0	; select bank0
  7535  04C9  0820               	movf	?_strncmp,w
  7536  04CA  0421               	iorwf	?_strncmp+1,w
  7537  04CB  1D03               	btfss	3,2
  7538  04CC  2CF8               	goto	l5680
  7539                           
  7540                           ;main.c: 400: for (i=0; i<28; i++) {
  7541  04CD  01E4               	clrf	command_handler@i
  7542  04CE                     L11:	
  7543  04CE  301C               	movlw	28
  7544  04CF  0264               	subwf	command_handler@i,w
  7545  04D0  1803               	btfsc	3,0
  7546  04D1  0008               	return
  7547                           
  7548                           ;main.c: 401: schedule[i/4][i%4] = 0;
  7549  04D2  3004               	movlw	4
  7550  04D3  00A0               	movwf	___awdiv@divisor
  7551  04D4  3000               	movlw	0
  7552  04D5  00A1               	movwf	___awdiv@divisor+1
  7553  04D6  0864               	movf	command_handler@i,w
  7554  04D7  00DC               	movwf	??_command_handler
  7555  04D8  01DD               	clrf	??_command_handler+1
  7556  04D9  085C               	movf	??_command_handler,w
  7557  04DA  00A2               	movwf	___awdiv@dividend
  7558  04DB  085D               	movf	??_command_handler+1,w
  7559  04DC  00A3               	movwf	___awdiv@dividend+1
  7560  04DD  3188  2078  3183   	fcall	___awdiv
  7561  04E0  0020               	movlb	0	; select bank0
  7562  04E1  0820               	movf	?___awdiv,w
  7563  04E2  00DE               	movwf	??_command_handler+2
  7564  04E3  3002               	movlw	2
  7565  04E4                     u6735:	
  7566  04E4  35DE               	lslf	??_command_handler+2,f
  7567  04E5  0B89               	decfsz	9,f
  7568  04E6  2CE4               	goto	u6735
  7569  04E7  30A0               	movlw	(low (_schedule| (0+256)))& (0+255)
  7570  04E8  075E               	addwf	??_command_handler+2,w
  7571  04E9  00DF               	movwf	??_command_handler+3
  7572  04EA  0864               	movf	command_handler@i,w
  7573  04EB  3903               	andlw	3
  7574  04EC  075F               	addwf	??_command_handler+3,w
  7575  04ED  00E0               	movwf	??_command_handler+4
  7576  04EE  0860               	movf	??_command_handler+4,w
  7577  04EF  0086               	movwf	6
  7578  04F0  3001               	movlw	1	; select bank3/4
  7579  04F1  0087               	movwf	7
  7580  04F2  0181               	clrf	1
  7581  04F3  3001               	movlw	1
  7582  04F4  00DC               	movwf	??_command_handler
  7583  04F5  085C               	movf	??_command_handler,w
  7584  04F6  07E4               	addwf	command_handler@i,f
  7585  04F7  2CCE               	goto	L11
  7586  04F8                     l5680:	
  7587                           ;main.c: 402: }
  7588                           ;main.c: 403: } else if (!strncmp(("SEN"), (buf), 3)) {
  7589                           
  7590  04F8  3099               	movlw	low (STR_33| (0+32768))
  7591  04F9  00A0               	movwf	strncmp@s1
  7592  04FA  3091               	movlw	high (STR_33| (0+32768))
  7593  04FB  00A1               	movwf	strncmp@s1+1
  7594  04FC  085B               	movf	command_handler@buf,w
  7595  04FD  00A2               	movwf	strncmp@s2
  7596  04FE  3002               	movlw	2
  7597  04FF  00A3               	movwf	strncmp@s2+1
  7598  0500  3003               	movlw	3
  7599  0501  00A4               	movwf	strncmp@len
  7600  0502  3000               	movlw	0
  7601  0503  00A5               	movwf	strncmp@len+1
  7602  0504  3195  25B0  3183   	fcall	_strncmp
  7603  0507  0020               	movlb	0	; select bank0
  7604  0508  0820               	movf	?_strncmp,w
  7605  0509  0421               	iorwf	?_strncmp+1,w
  7606  050A  1D03               	btfss	3,2
  7607  050B  2D1D               	goto	l5686
  7608                           
  7609                           ;main.c: 404: dev_addr = atoi(&buf[4]);
  7610  050C  085B               	movf	command_handler@buf,w
  7611  050D  3E04               	addlw	4
  7612  050E  00A6               	movwf	atoi@s
  7613  050F  3002               	movlw	2
  7614  0510  00A7               	movwf	atoi@s+1
  7615  0511  3189  21D0  3183   	fcall	_atoi
  7616  0514  0020               	movlb	0	; select bank0
  7617  0515  0826               	movf	?_atoi,w
  7618  0516  00DC               	movwf	??_command_handler
  7619  0517  085C               	movf	??_command_handler,w
  7620  0518  00E3               	movwf	command_handler@dev_addr
  7621                           
  7622                           ;main.c: 405: one_shot_sen(dev_addr);
  7623  0519  0863               	movf	command_handler@dev_addr,w
  7624  051A  3195  256F         	fcall	_one_shot_sen
  7625                           
  7626                           ;main.c: 406: } else if (BACKPLANE_SLAVE_ADDRESS != 0x01) {
  7627  051C  0008               	return
  7628  051D                     l5686:	
  7629  051D  0021               	movlb	1	; select bank1
  7630  051E  036E               	decf	_BACKPLANE_SLAVE_ADDRESS^(0+128),w
  7631  051F  1903               	btfsc	3,2
  7632  0520  0008               	return
  7633                           
  7634                           ;main.c: 407: put_cmd(buf);
  7635  0521  0020               	movlb	0	; select bank0
  7636  0522  085B               	movf	command_handler@buf,w
  7637  0523  3196  2680         	fcall	_put_cmd
  7638  0525  0008               	return
  7639  0526                     __end_of_command_handler:	
  7640                           
  7641                           	psect	text30
  7642  15B0                     __ptext30:	
  7643 ;; *************** function _strncmp *****************
  7644 ;; Defined at:
  7645 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strncmp.c"
  7646 ;; Parameters:    Size  Location     Type
  7647 ;;  s1              2    0[BANK0 ] PTR const unsigned char 
  7648 ;;		 -> STR_48(4), STR_47(4), STR_45(4), STR_44(4), 
  7649 ;;		 -> STR_41(4), STR_40(4), STR_39(4), STR_37(4), 
  7650 ;;		 -> STR_33(4), STR_32(4), STR_27(4), STR_26(4), 
  7651 ;;		 -> STR_24(4), STR_22(4), STR_21(4), STR_20(4), 
  7652 ;;		 -> STR_10(4), STR_9(4), STR_6(4), STR_5(4), 
  7653 ;;		 -> STR_4(4), STR_1(4), 
  7654 ;;  s2              2    2[BANK0 ] PTR const unsigned char 
  7655 ;;		 -> buf(48), cmd_buf(192), 
  7656 ;;  len             2    4[BANK0 ] unsigned int 
  7657 ;; Auto vars:     Size  Location     Type
  7658 ;;		None
  7659 ;; Return value:  Size  Location     Type
  7660 ;;                  2    0[BANK0 ] int 
  7661 ;; Registers used:
  7662 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  7663 ;; Tracked objects:
  7664 ;;		On entry : 0/0
  7665 ;;		On exit  : 0/0
  7666 ;;		Unchanged: 0/0
  7667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7668 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7670 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7671 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7672 ;;Total ram usage:        8 bytes
  7673 ;; Hardware stack levels used:    1
  7674 ;; Hardware stack levels required when called:    3
  7675 ;; This function calls:
  7676 ;;		Nothing
  7677 ;; This function is called by:
  7678 ;;		_exec_remote_cmd
  7679 ;;		_command_handler
  7680 ;;		_PROTOCOL_Loop
  7681 ;; This function uses a non-reentrant model
  7682 ;;
  7683                           
  7684                           
  7685                           ;psect for function _strncmp
  7686  15B0                     _strncmp:	
  7687  15B0                     l5384:	
  7688                           ;incstack = 0
  7689                           ; Regs used in _strncmp: [wreg-fsr1h+status,2+status,0+pclath]
  7690                           
  7691  15B0  3001               	movlw	1
  7692  15B1  0020               	movlb	0	; select bank0
  7693  15B2  02A4               	subwf	strncmp@len,f
  7694  15B3  3000               	movlw	0
  7695  15B4  3BA5               	subwfb	strncmp@len+1,f
  7696  15B5  0A24               	incf	strncmp@len,w
  7697  15B6  1903               	btfsc	3,2
  7698  15B7  0A25               	incf	strncmp@len+1,w
  7699  15B8  1903               	btfsc	3,2
  7700  15B9  2DEF               	goto	l5386
  7701  15BA  0020               	movlb	0	; select bank0
  7702  15BB  0820               	movf	strncmp@s1,w
  7703  15BC  0084               	movwf	4
  7704  15BD  0821               	movf	strncmp@s1+1,w
  7705  15BE  0085               	movwf	5
  7706  15BF  0012               	moviw fsr0++
  7707  15C0  1903               	btfsc	3,2
  7708  15C1  2DCE               	goto	l5378
  7709  15C2  0822               	movf	strncmp@s2,w
  7710  15C3  0086               	movwf	6
  7711  15C4  0823               	movf	strncmp@s2+1,w
  7712  15C5  0087               	movwf	7
  7713  15C6  0820               	movf	strncmp@s1,w
  7714  15C7  0084               	movwf	4
  7715  15C8  0821               	movf	strncmp@s1+1,w
  7716  15C9  0085               	movwf	5
  7717  15CA  0800               	movf	0,w	;code access
  7718  15CB  0601               	xorwf	1,w
  7719  15CC  1903               	skipnz
  7720  15CD  2DE6               	goto	l5382
  7721  15CE                     l5378:	
  7722  15CE  0822               	movf	strncmp@s2,w
  7723  15CF  0086               	movwf	6
  7724  15D0  0823               	movf	strncmp@s2+1,w
  7725  15D1  0087               	movwf	7
  7726  15D2  0801               	movf	1,w
  7727  15D3  00A6               	movwf	??_strncmp
  7728  15D4  01A7               	clrf	??_strncmp+1
  7729  15D5  09A6               	comf	??_strncmp,f
  7730  15D6  09A7               	comf	??_strncmp+1,f
  7731  15D7  0AA6               	incf	??_strncmp,f
  7732  15D8  1903               	skipnz
  7733  15D9  0AA7               	incf	??_strncmp+1,f
  7734  15DA  0820               	movf	strncmp@s1,w
  7735  15DB  0084               	movwf	4
  7736  15DC  0821               	movf	strncmp@s1+1,w
  7737  15DD  0085               	movwf	5
  7738  15DE  0800               	movf	0,w	;code access
  7739  15DF  0726               	addwf	??_strncmp,w
  7740  15E0  00A0               	movwf	?_strncmp
  7741  15E1  0827               	movf	??_strncmp+1,w
  7742  15E2  1803               	skipnc
  7743  15E3  0A27               	incf	??_strncmp+1,w
  7744  15E4  00A1               	movwf	?_strncmp+1
  7745  15E5  0008               	return
  7746  15E6                     l5382:	
  7747  15E6  3001               	movlw	1
  7748  15E7  07A0               	addwf	strncmp@s1,f
  7749  15E8  3000               	movlw	0
  7750  15E9  3DA1               	addwfc	strncmp@s1+1,f
  7751  15EA  3001               	movlw	1
  7752  15EB  07A2               	addwf	strncmp@s2,f
  7753  15EC  3000               	movlw	0
  7754  15ED  3DA3               	addwfc	strncmp@s2+1,f
  7755  15EE  2DB0               	goto	l5384
  7756  15EF                     l5386:	
  7757  15EF  01A0               	clrf	?_strncmp
  7758  15F0  01A1               	clrf	?_strncmp+1
  7759  15F1  0008               	return
  7760  15F2                     __end_of_strncmp:	
  7761                           
  7762                           	psect	text31
  7763  1680                     __ptext31:	
  7764 ;; *************** function _put_cmd *****************
  7765 ;; Defined at:
  7766 ;;		line 357 in file "main.c"
  7767 ;; Parameters:    Size  Location     Type
  7768 ;;  buf             1    wreg     PTR unsigned char 
  7769 ;;		 -> buf(48), 
  7770 ;; Auto vars:     Size  Location     Type
  7771 ;;  buf             1   17[BANK0 ] PTR unsigned char 
  7772 ;;		 -> buf(48), 
  7773 ;; Return value:  Size  Location     Type
  7774 ;;                  1    wreg      void 
  7775 ;; Registers used:
  7776 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7777 ;; Tracked objects:
  7778 ;;		On entry : 0/0
  7779 ;;		On exit  : 0/0
  7780 ;;		Unchanged: 0/0
  7781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7783 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7784 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7785 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7786 ;;Total ram usage:        6 bytes
  7787 ;; Hardware stack levels used:    1
  7788 ;; Hardware stack levels required when called:    4
  7789 ;; This function calls:
  7790 ;;		___wmul
  7791 ;;		_strcpy
  7792 ;; This function is called by:
  7793 ;;		_command_handler
  7794 ;; This function uses a non-reentrant model
  7795 ;;
  7796                           
  7797                           
  7798                           ;psect for function _put_cmd
  7799  1680                     _put_cmd:	
  7800                           
  7801                           ;incstack = 0
  7802                           ; Regs used in _put_cmd: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7803                           ;put_cmd@buf stored from wreg
  7804  1680  0020               	movlb	0	; select bank0
  7805  1681  00B1               	movwf	put_cmd@buf
  7806                           
  7807                           ;main.c: 358: static int8_t idx = -1;
  7808                           ;main.c: 359: if (++idx > 3) idx = 0;
  7809  1682  3001               	movlw	1
  7810  1683  00AC               	movwf	??_put_cmd
  7811  1684  082C               	movf	??_put_cmd,w
  7812  1685  0021               	movlb	1	; select bank1
  7813  1686  07ED               	addwf	put_cmd@idx^(0+128),f
  7814  1687  086D               	movf	put_cmd@idx^(0+128),w
  7815  1688  3A80               	xorlw	128
  7816  1689  3E7C               	addlw	-132
  7817  168A  1803               	btfsc	3,0
  7818  168B  01ED               	clrf	put_cmd@idx^(0+128)
  7819                           
  7820                           ;main.c: 360: if (cmd_buf[idx][0] == '\0') strcpy(cmd_buf[idx], buf);
  7821  168C  086D               	movf	put_cmd@idx^(0+128),w
  7822  168D  0020               	movlb	0	; select bank0
  7823  168E  00AC               	movwf	??_put_cmd
  7824  168F  01AD               	clrf	??_put_cmd+1
  7825  1690  082C               	movf	??_put_cmd,w
  7826  1691  00A0               	movwf	___wmul@multiplier
  7827  1692  082D               	movf	??_put_cmd+1,w
  7828  1693  00A1               	movwf	___wmul@multiplier+1
  7829  1694  3030               	movlw	48
  7830  1695  00A2               	movwf	___wmul@multiplicand
  7831  1696  3000               	movlw	0
  7832  1697  00A3               	movwf	___wmul@multiplicand+1
  7833  1698  3193  231A  3196   	fcall	___wmul
  7834  169B  3030               	movlw	48
  7835  169C  0020               	movlb	0	; select bank0
  7836  169D  00AE               	movwf	??_put_cmd+2
  7837  169E  3023               	movlw	35
  7838  169F  00AF               	movwf	??_put_cmd+3
  7839  16A0  0820               	movf	?___wmul,w
  7840  16A1  072E               	addwf	??_put_cmd+2,w
  7841  16A2  0086               	movwf	6
  7842  16A3  0821               	movf	?___wmul+1,w
  7843  16A4  3D2F               	addwfc	??_put_cmd+3,w
  7844  16A5  0087               	movwf	7
  7845  16A6  0801               	movf	1,w
  7846  16A7  1D03               	btfss	3,2
  7847  16A8  0008               	return
  7848  16A9  0021               	movlb	1	; select bank1
  7849  16AA  086D               	movf	put_cmd@idx^(0+128),w
  7850  16AB  0020               	movlb	0	; select bank0
  7851  16AC  00AC               	movwf	??_put_cmd
  7852  16AD  01AD               	clrf	??_put_cmd+1
  7853  16AE  082C               	movf	??_put_cmd,w
  7854  16AF  00A0               	movwf	___wmul@multiplier
  7855  16B0  082D               	movf	??_put_cmd+1,w
  7856  16B1  00A1               	movwf	___wmul@multiplier+1
  7857  16B2  3030               	movlw	48
  7858  16B3  00A2               	movwf	___wmul@multiplicand
  7859  16B4  3000               	movlw	0
  7860  16B5  00A3               	movwf	___wmul@multiplicand+1
  7861  16B6  3193  231A  3196   	fcall	___wmul
  7862  16B9  3030               	movlw	48
  7863  16BA  0020               	movlb	0	; select bank0
  7864  16BB  00AE               	movwf	??_put_cmd+2
  7865  16BC  3023               	movlw	35
  7866  16BD  00AF               	movwf	??_put_cmd+3
  7867  16BE  0820               	movf	?___wmul,w
  7868  16BF  072E               	addwf	??_put_cmd+2,w
  7869  16C0  00A6               	movwf	strcpy@to
  7870  16C1  0821               	movf	?___wmul+1,w
  7871  16C2  3D2F               	addwfc	??_put_cmd+3,w
  7872  16C3  00A7               	movwf	strcpy@to+1
  7873  16C4  0831               	movf	put_cmd@buf,w
  7874  16C5  00B0               	movwf	??_put_cmd+4
  7875  16C6  0830               	movf	??_put_cmd+4,w
  7876  16C7  00A8               	movwf	strcpy@from
  7877  16C8  3192  22C7         	fcall	_strcpy
  7878  16CA  0008               	return
  7879  16CB                     __end_of_put_cmd:	
  7880                           
  7881                           	psect	text32
  7882  12C7                     __ptext32:	
  7883 ;; *************** function _strcpy *****************
  7884 ;; Defined at:
  7885 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strcpy.c"
  7886 ;; Parameters:    Size  Location     Type
  7887 ;;  to              2    6[BANK0 ] PTR unsigned char 
  7888 ;;		 -> cmd_buf(192), 
  7889 ;;  from            1    8[BANK0 ] PTR const unsigned char 
  7890 ;;		 -> buf(48), 
  7891 ;; Auto vars:     Size  Location     Type
  7892 ;;  cp              2   10[BANK0 ] PTR unsigned char 
  7893 ;;		 -> cmd_buf(192), 
  7894 ;; Return value:  Size  Location     Type
  7895 ;;                  2    6[BANK0 ] PTR unsigned char 
  7896 ;; Registers used:
  7897 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  7898 ;; Tracked objects:
  7899 ;;		On entry : 0/0
  7900 ;;		On exit  : 0/0
  7901 ;;		Unchanged: 0/0
  7902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7903 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7904 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7905 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7906 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7907 ;;Total ram usage:        6 bytes
  7908 ;; Hardware stack levels used:    1
  7909 ;; Hardware stack levels required when called:    3
  7910 ;; This function calls:
  7911 ;;		Nothing
  7912 ;; This function is called by:
  7913 ;;		_put_cmd
  7914 ;; This function uses a non-reentrant model
  7915 ;;
  7916                           
  7917                           
  7918                           ;psect for function _strcpy
  7919  12C7                     _strcpy:	
  7920                           
  7921                           ;incstack = 0
  7922                           ; Regs used in _strcpy: [wreg-fsr1h+status,2+status,0]
  7923  12C7  0020               	movlb	0	; select bank0
  7924  12C8  0827               	movf	strcpy@to+1,w
  7925  12C9  00AB               	movwf	strcpy@cp+1
  7926  12CA  0826               	movf	strcpy@to,w
  7927  12CB  00AA               	movwf	strcpy@cp
  7928  12CC                     l5350:	
  7929  12CC  082A               	movf	strcpy@cp,w
  7930  12CD  0086               	movwf	6
  7931  12CE  082B               	movf	strcpy@cp+1,w
  7932  12CF  0087               	movwf	7
  7933  12D0  0828               	movf	strcpy@from,w
  7934  12D1  0084               	movwf	4
  7935  12D2  3002               	movlw	2	; select bank4/5
  7936  12D3  0085               	movwf	5
  7937  12D4  0800               	movf	0,w
  7938  12D5  3FC0               	movwi [0]fsr1
  7939  12D6  0889               	movf	9,f
  7940  12D7  1903               	btfsc	3,2
  7941  12D8  0008               	return
  7942  12D9  3001               	movlw	1
  7943  12DA  07AA               	addwf	strcpy@cp,f
  7944  12DB  3000               	movlw	0
  7945  12DC  3DAB               	addwfc	strcpy@cp+1,f
  7946  12DD  3001               	movlw	1
  7947  12DE  00A9               	movwf	??_strcpy
  7948  12DF  0829               	movf	??_strcpy,w
  7949  12E0  07A8               	addwf	strcpy@from,f
  7950  12E1  2ACC               	goto	l5350
  7951  12E2                     __end_of_strcpy:	
  7952                           ;	Return value of _strcpy is never used
  7953                           
  7954                           
  7955                           	psect	text33
  7956  1638                     __ptext33:	
  7957 ;; *************** function _print_dev_map *****************
  7958 ;; Defined at:
  7959 ;;		line 217 in file "main.c"
  7960 ;; Parameters:    Size  Location     Type
  7961 ;;		None
  7962 ;; Auto vars:     Size  Location     Type
  7963 ;;  len             1   39[BANK0 ] unsigned char 
  7964 ;;  i               1   38[BANK0 ] unsigned char 
  7965 ;; Return value:  Size  Location     Type
  7966 ;;                  1    wreg      void 
  7967 ;; Registers used:
  7968 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7969 ;; Tracked objects:
  7970 ;;		On entry : 0/0
  7971 ;;		On exit  : 0/0
  7972 ;;		Unchanged: 0/0
  7973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7975 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7976 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7977 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7978 ;;Total ram usage:        4 bytes
  7979 ;; Hardware stack levels used:    1
  7980 ;; Hardware stack levels required when called:    6
  7981 ;; This function calls:
  7982 ;;		_dev_map_iterator
  7983 ;;		_printf
  7984 ;; This function is called by:
  7985 ;;		_command_handler
  7986 ;; This function uses a non-reentrant model
  7987 ;;
  7988                           
  7989                           
  7990                           ;psect for function _print_dev_map
  7991  1638                     _print_dev_map:	
  7992                           
  7993                           ;main.c: 218: uint8_t i;
  7994                           ;main.c: 219: uint8_t len = devs;
  7995                           
  7996                           ;incstack = 0
  7997                           ; Regs used in _print_dev_map: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7998  1638  0021               	movlb	1	; select bank1
  7999  1639  0864               	movf	_devs^(0+128),w
  8000  163A  0020               	movlb	0	; select bank0
  8001  163B  00C4               	movwf	??_print_dev_map
  8002  163C  0844               	movf	??_print_dev_map,w
  8003  163D  00C7               	movwf	print_dev_map@len
  8004                           
  8005                           ;main.c: 220: if (len > 0) {
  8006  163E  0847               	movf	print_dev_map@len,w
  8007  163F  1903               	btfsc	3,2
  8008  1640  2E78               	goto	l5478
  8009                           
  8010                           ;main.c: 221: len--;
  8011  1641  3001               	movlw	1
  8012  1642  02C7               	subwf	print_dev_map@len,f
  8013                           
  8014                           ;main.c: 222: printf("$:MAP:");
  8015  1643  3057               	movlw	low (STR_13| (0+32768))
  8016  1644  00AE               	movwf	printf@f
  8017  1645  3091               	movlw	high (STR_13| (0+32768))
  8018  1646  00AF               	movwf	printf@f+1
  8019  1647  318E  262B  3196   	fcall	_printf
  8020                           
  8021                           ;main.c: 223: for (i=0; i<len; i++) printf("%d,", dev_map_iterator());
  8022  164A  0020               	movlb	0	; select bank0
  8023  164B  01C6               	clrf	print_dev_map@i
  8024  164C                     l5474:	
  8025  164C  0847               	movf	print_dev_map@len,w
  8026  164D  0246               	subwf	print_dev_map@i,w
  8027  164E  1803               	btfsc	3,0
  8028  164F  2E67               	goto	l5476
  8029  1650  307D               	movlw	low (STR_14| (0+32768))
  8030  1651  00AE               	movwf	printf@f
  8031  1652  3091               	movlw	high (STR_14| (0+32768))
  8032  1653  00AF               	movwf	printf@f+1
  8033  1654  3189  2176  3196   	fcall	_dev_map_iterator
  8034  1657  0020               	movlb	0	; select bank0
  8035  1658  00C4               	movwf	??_print_dev_map
  8036  1659  01C5               	clrf	??_print_dev_map+1
  8037  165A  0844               	movf	??_print_dev_map,w
  8038  165B  00B0               	movwf	?_printf+2
  8039  165C  0845               	movf	??_print_dev_map+1,w
  8040  165D  00B1               	movwf	?_printf+3
  8041  165E  318E  262B  3196   	fcall	_printf
  8042  1661  3001               	movlw	1
  8043  1662  0020               	movlb	0	; select bank0
  8044  1663  00C4               	movwf	??_print_dev_map
  8045  1664  0844               	movf	??_print_dev_map,w
  8046  1665  07C6               	addwf	print_dev_map@i,f
  8047  1666  2E4C               	goto	l5474
  8048  1667                     l5476:	
  8049                           
  8050                           ;main.c: 224: printf("%d\n", dev_map_iterator());
  8051  1667  30E6               	movlw	low ((STR_49+6)| (0+32768))
  8052  1668  00AE               	movwf	printf@f
  8053  1669  3090               	movlw	high ((STR_49+6)| (0+32768))
  8054  166A  00AF               	movwf	printf@f+1
  8055  166B  3189  2176  3196   	fcall	_dev_map_iterator
  8056  166E  0020               	movlb	0	; select bank0
  8057  166F  00C4               	movwf	??_print_dev_map
  8058  1670  01C5               	clrf	??_print_dev_map+1
  8059  1671  0844               	movf	??_print_dev_map,w
  8060  1672  00B0               	movwf	?_printf+2
  8061  1673  0845               	movf	??_print_dev_map+1,w
  8062  1674  00B1               	movwf	?_printf+3
  8063  1675  318E  262B         	fcall	_printf
  8064                           
  8065                           ;main.c: 225: } else {
  8066  1677  0008               	return
  8067  1678                     l5478:	
  8068                           
  8069                           ;main.c: 226: printf("!:MAP:NO SLAVE FOUND\n");
  8070  1678  3072               	movlw	low (STR_16| (0+32768))
  8071  1679  0020               	movlb	0	; select bank0
  8072  167A  00AE               	movwf	printf@f
  8073  167B  3090               	movlw	high (STR_16| (0+32768))
  8074  167C  00AF               	movwf	printf@f+1
  8075  167D  318E  262B         	fcall	_printf
  8076  167F  0008               	return
  8077  1680                     __end_of_print_dev_map:	
  8078                           
  8079                           	psect	text34
  8080  0976                     __ptext34:	
  8081 ;; *************** function _dev_map_iterator *****************
  8082 ;; Defined at:
  8083 ;;		line 153 in file "main.c"
  8084 ;; Parameters:    Size  Location     Type
  8085 ;;		None
  8086 ;; Auto vars:     Size  Location     Type
  8087 ;;  dev_addr        1    7[BANK0 ] unsigned char 
  8088 ;;  exist           1    6[BANK0 ] unsigned char 
  8089 ;; Return value:  Size  Location     Type
  8090 ;;                  1    wreg      unsigned char 
  8091 ;; Registers used:
  8092 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  8093 ;; Tracked objects:
  8094 ;;		On entry : 0/0
  8095 ;;		On exit  : 0/0
  8096 ;;		Unchanged: 0/0
  8097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8099 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8100 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8101 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8102 ;;Total ram usage:        8 bytes
  8103 ;; Hardware stack levels used:    1
  8104 ;; Hardware stack levels required when called:    3
  8105 ;; This function calls:
  8106 ;;		Nothing
  8107 ;; This function is called by:
  8108 ;;		_print_dev_map
  8109 ;; This function uses a non-reentrant model
  8110 ;;
  8111                           
  8112                           
  8113                           ;psect for function _dev_map_iterator
  8114  0976                     _dev_map_iterator:	
  8115                           
  8116                           ;main.c: 154: static uint8_t xx = 0;
  8117                           ;main.c: 155: static uint8_t yy = 0;
  8118                           ;main.c: 156: static bool start = 1;
  8119                           ;main.c: 157: bool exist = 0;
  8120                           
  8121                           ;incstack = 0
  8122                           ; Regs used in _dev_map_iterator: [wreg-fsr1h+status,2+status,0+pclath]
  8123  0976  0020               	movlb	0	; select bank0
  8124  0977  01A6               	clrf	dev_map_iterator@exist
  8125                           
  8126                           ;main.c: 158: uint8_t dev_addr;
  8127                           ;main.c: 160: if (devs) {
  8128  0978  0021               	movlb	1	; select bank1
  8129  0979  0864               	movf	_devs^(0+128),w
  8130  097A  1903               	btfsc	3,2
  8131  097B  29CD               	goto	l5290
  8132  097C                     l5274:	
  8133                           ;main.c: 161: while(1) {
  8134                           
  8135                           
  8136                           ;main.c: 162: if (xx > 7) {
  8137  097C  3008               	movlw	8
  8138  097D  0263               	subwf	dev_map_iterator@xx^(0+128),w
  8139  097E  1C03               	skipc
  8140  097F  2987               	goto	l5280
  8141                           
  8142                           ;main.c: 163: xx = 0;
  8143  0980  01E3               	clrf	dev_map_iterator@xx^(0+128)
  8144                           
  8145                           ;main.c: 164: yy++;
  8146  0981  3001               	movlw	1
  8147  0982  0020               	movlb	0	; select bank0
  8148  0983  00A0               	movwf	??_dev_map_iterator
  8149  0984  0820               	movf	??_dev_map_iterator,w
  8150  0985  0021               	movlb	1	; select bank1
  8151  0986  07E2               	addwf	dev_map_iterator@yy^(0+128),f
  8152  0987                     l5280:	
  8153                           
  8154                           ;main.c: 165: }
  8155                           ;main.c: 166: if (yy >= MAX_Y) {
  8156  0987  300A               	movlw	low (_MAX_Y| (0+32768))
  8157  0988  0084               	movwf	4
  8158  0989  3090               	movlw	high (_MAX_Y| (0+32768))
  8159  098A  0085               	movwf	5
  8160  098B  0800               	movf	0,w	;code access
  8161  098C  0262               	subwf	dev_map_iterator@yy^(0+128),w
  8162  098D  1C03               	skipc
  8163  098E  2991               	goto	l5284
  8164                           
  8165                           ;main.c: 167: xx = 0;
  8166  098F  01E3               	clrf	dev_map_iterator@xx^(0+128)
  8167                           
  8168                           ;main.c: 168: yy = 0;
  8169  0990  01E2               	clrf	dev_map_iterator@yy^(0+128)
  8170  0991                     l5284:	
  8171                           
  8172                           ;main.c: 169: }
  8173                           ;main.c: 170: if ((0x01 << xx) & dev_map[yy]) {
  8174  0991  0862               	movf	dev_map_iterator@yy^(0+128),w
  8175  0992  3E20               	addlw	(low (_dev_map| (0+256)))& (0+255)
  8176  0993  0086               	movwf	6
  8177  0994  3001               	movlw	1	; select bank2/3
  8178  0995  0087               	movwf	7
  8179  0996  0801               	movf	1,w
  8180  0997  0020               	movlb	0	; select bank0
  8181  0998  00A0               	movwf	??_dev_map_iterator
  8182  0999  01A1               	clrf	??_dev_map_iterator+1
  8183  099A  3001               	movlw	1
  8184  099B  00A2               	movwf	??_dev_map_iterator+2
  8185  099C  3000               	movlw	0
  8186  099D  00A3               	movwf	??_dev_map_iterator+3
  8187  099E  0021               	movlb	1	; select bank1
  8188  099F  0A63               	incf	dev_map_iterator@xx^(0+128),w
  8189  09A0  0020               	movlb	0	; select bank0
  8190  09A1  29A4               	goto	u6044
  8191  09A2                     u6045:	
  8192  09A2  35A2               	lslf	??_dev_map_iterator+2,f
  8193  09A3  0DA3               	rlf	??_dev_map_iterator+3,f
  8194  09A4                     u6044:	
  8195  09A4  0B89               	decfsz	9,f
  8196  09A5  29A2               	goto	u6045
  8197  09A6  0820               	movf	??_dev_map_iterator,w
  8198  09A7  0522               	andwf	??_dev_map_iterator+2,w
  8199  09A8  00A4               	movwf	??_dev_map_iterator+4
  8200  09A9  0821               	movf	??_dev_map_iterator+1,w
  8201  09AA  0523               	andwf	??_dev_map_iterator+3,w
  8202  09AB  00A5               	movwf	??_dev_map_iterator+5
  8203  09AC  0824               	movf	??_dev_map_iterator+4,w
  8204  09AD  0425               	iorwf	??_dev_map_iterator+5,w
  8205  09AE  1903               	btfsc	3,2
  8206  09AF  29C6               	goto	l5288
  8207                           
  8208                           ;main.c: 171: dev_addr = yy * 8 + xx++;
  8209  09B0  0021               	movlb	1	; select bank1
  8210  09B1  0862               	movf	dev_map_iterator@yy^(0+128),w
  8211  09B2  0020               	movlb	0	; select bank0
  8212  09B3  00A0               	movwf	??_dev_map_iterator
  8213  09B4  3002               	movlw	2
  8214  09B5                     u6065:	
  8215  09B5  35A0               	lslf	??_dev_map_iterator,f
  8216  09B6  3EFF               	addlw	-1
  8217  09B7  1D03               	skipz
  8218  09B8  29B5               	goto	u6065
  8219  09B9  3520               	lslf	??_dev_map_iterator,w
  8220  09BA  0021               	movlb	1	; select bank1
  8221  09BB  0763               	addwf	dev_map_iterator@xx^(0+128),w
  8222  09BC  0020               	movlb	0	; select bank0
  8223  09BD  00A1               	movwf	??_dev_map_iterator+1
  8224  09BE  0821               	movf	??_dev_map_iterator+1,w
  8225  09BF  00A7               	movwf	dev_map_iterator@dev_addr
  8226  09C0  3001               	movlw	1
  8227  09C1  00A0               	movwf	??_dev_map_iterator
  8228  09C2  0820               	movf	??_dev_map_iterator,w
  8229  09C3  0021               	movlb	1	; select bank1
  8230  09C4  07E3               	addwf	dev_map_iterator@xx^(0+128),f
  8231                           
  8232                           ;main.c: 172: break;
  8233  09C5  29CD               	goto	l5290
  8234  09C6                     l5288:	
  8235                           
  8236                           ;main.c: 173: }
  8237                           ;main.c: 174: xx++;
  8238  09C6  3001               	movlw	1
  8239  09C7  0020               	movlb	0	; select bank0
  8240  09C8  00A0               	movwf	??_dev_map_iterator
  8241  09C9  0820               	movf	??_dev_map_iterator,w
  8242  09CA  0021               	movlb	1	; select bank1
  8243  09CB  07E3               	addwf	dev_map_iterator@xx^(0+128),f
  8244  09CC  297C               	goto	l5274
  8245  09CD                     l5290:	
  8246                           
  8247                           ;main.c: 175: }
  8248                           ;main.c: 176: }
  8249                           ;main.c: 177: return dev_addr;
  8250  09CD  0020               	movlb	0	; select bank0
  8251  09CE  0827               	movf	dev_map_iterator@dev_addr,w
  8252  09CF  0008               	return
  8253  09D0                     __end_of_dev_map_iterator:	
  8254                           
  8255                           	psect	text35
  8256  156F                     __ptext35:	
  8257 ;; *************** function _one_shot_sen *****************
  8258 ;; Defined at:
  8259 ;;		line 267 in file "main.c"
  8260 ;; Parameters:    Size  Location     Type
  8261 ;;  dev_addr        1    wreg     unsigned char 
  8262 ;; Auto vars:     Size  Location     Type
  8263 ;;  dev_addr        1   58[BANK0 ] unsigned char 
  8264 ;;  status          1   57[BANK0 ] unsigned char 
  8265 ;; Return value:  Size  Location     Type
  8266 ;;                  1    wreg      void 
  8267 ;; Registers used:
  8268 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8269 ;; Tracked objects:
  8270 ;;		On entry : 0/0
  8271 ;;		On exit  : 0/0
  8272 ;;		Unchanged: 0/0
  8273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8274 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8275 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8276 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8277 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8278 ;;Total ram usage:        5 bytes
  8279 ;; Hardware stack levels used:    1
  8280 ;; Hardware stack levels required when called:    8
  8281 ;; This function calls:
  8282 ;;		_detected
  8283 ;;		_i2c1_write_no_data
  8284 ;;		_printf
  8285 ;;		_sen
  8286 ;; This function is called by:
  8287 ;;		_command_handler
  8288 ;; This function uses a non-reentrant model
  8289 ;;
  8290                           
  8291                           
  8292                           ;psect for function _one_shot_sen
  8293  156F                     _one_shot_sen:	
  8294                           
  8295                           ;incstack = 0
  8296                           ; Regs used in _one_shot_sen: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8297                           ;one_shot_sen@dev_addr stored from wreg
  8298  156F  0020               	movlb	0	; select bank0
  8299  1570  00DA               	movwf	one_shot_sen@dev_addr
  8300                           
  8301                           ;main.c: 268: if (!detected(dev_addr)) {
  8302  1571  085A               	movf	one_shot_sen@dev_addr,w
  8303  1572  3187  27CD  3195   	fcall	_detected
  8304  1575  3A00               	xorlw	0
  8305  1576  1D03               	skipz
  8306  1577  2D87               	goto	l5484
  8307                           
  8308                           ;main.c: 269: printf("!:%%%d:UNDETECTED DEVICE\n", dev_addr);
  8309  1578  303F               	movlw	low (STR_17| (0+32768))
  8310  1579  0020               	movlb	0	; select bank0
  8311  157A  00AE               	movwf	printf@f
  8312  157B  3090               	movlw	high (STR_17| (0+32768))
  8313  157C  00AF               	movwf	printf@f+1
  8314  157D  085A               	movf	one_shot_sen@dev_addr,w
  8315  157E  00D6               	movwf	??_one_shot_sen
  8316  157F  01D7               	clrf	??_one_shot_sen+1
  8317  1580  0856               	movf	??_one_shot_sen,w
  8318  1581  00B0               	movwf	?_printf+2
  8319  1582  0857               	movf	??_one_shot_sen+1,w
  8320  1583  00B1               	movwf	?_printf+3
  8321  1584  318E  262B         	fcall	_printf
  8322                           
  8323                           ;main.c: 270: } else {
  8324  1586  0008               	return
  8325  1587                     l5484:	
  8326                           
  8327                           ;main.c: 271: uint8_t status = sen(dev_addr);
  8328  1587  0020               	movlb	0	; select bank0
  8329  1588  085A               	movf	one_shot_sen@dev_addr,w
  8330  1589  3187  2719  3195   	fcall	_sen
  8331  158C  0020               	movlb	0	; select bank0
  8332  158D  00D6               	movwf	??_one_shot_sen
  8333  158E  0856               	movf	??_one_shot_sen,w
  8334  158F  00D9               	movwf	one_shot_sen@status
  8335                           
  8336                           ;main.c: 272: if (status > 0) {
  8337  1590  0859               	movf	one_shot_sen@status,w
  8338  1591  1903               	btfsc	3,2
  8339  1592  0008               	return
  8340                           
  8341                           ;main.c: 273: printf("!:%%%d:NETWORK ERROR\n", dev_addr);
  8342  1593  3088               	movlw	low (STR_18| (0+32768))
  8343  1594  00AE               	movwf	printf@f
  8344  1595  3090               	movlw	high (STR_18| (0+32768))
  8345  1596  00AF               	movwf	printf@f+1
  8346  1597  085A               	movf	one_shot_sen@dev_addr,w
  8347  1598  00D6               	movwf	??_one_shot_sen
  8348  1599  01D7               	clrf	??_one_shot_sen+1
  8349  159A  0856               	movf	??_one_shot_sen,w
  8350  159B  00B0               	movwf	?_printf+2
  8351  159C  0857               	movf	??_one_shot_sen+1,w
  8352  159D  00B1               	movwf	?_printf+3
  8353  159E  318E  262B  3195   	fcall	_printf
  8354                           
  8355                           ;main.c: 274: i2c1_write_no_data(dev_addr, 0x0c);
  8356  15A1  0020               	movlb	0	; select bank0
  8357  15A2  085A               	movf	one_shot_sen@dev_addr,w
  8358  15A3  00D6               	movwf	??_one_shot_sen
  8359  15A4  01D7               	clrf	??_one_shot_sen+1
  8360  15A5  0856               	movf	??_one_shot_sen,w
  8361  15A6  00AE               	movwf	i2c1_write_no_data@dev_addr
  8362  15A7  0857               	movf	??_one_shot_sen+1,w
  8363  15A8  00AF               	movwf	i2c1_write_no_data@dev_addr+1
  8364  15A9  300C               	movlw	12
  8365  15AA  00D8               	movwf	??_one_shot_sen+2
  8366  15AB  0858               	movf	??_one_shot_sen+2,w
  8367  15AC  00B0               	movwf	i2c1_write_no_data@reg_addr
  8368  15AD  3194  2451         	fcall	_i2c1_write_no_data
  8369  15AF  0008               	return
  8370  15B0                     __end_of_one_shot_sen:	
  8371                           
  8372                           	psect	text36
  8373  0719                     __ptext36:	
  8374 ;; *************** function _sen *****************
  8375 ;; Defined at:
  8376 ;;		line 234 in file "main.c"
  8377 ;; Parameters:    Size  Location     Type
  8378 ;;  dev_addr        1    wreg     unsigned char 
  8379 ;; Auto vars:     Size  Location     Type
  8380 ;;  dev_addr        1   53[BANK0 ] unsigned char 
  8381 ;;  status          1   52[BANK0 ] unsigned char 
  8382 ;;  length          1   51[BANK0 ] unsigned char 
  8383 ;;  type            1   50[BANK0 ] unsigned char 
  8384 ;;  i               1    0        unsigned char 
  8385 ;;  data            1    0        unsigned char 
  8386 ;; Return value:  Size  Location     Type
  8387 ;;                  1    wreg      unsigned char 
  8388 ;; Registers used:
  8389 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8390 ;; Tracked objects:
  8391 ;;		On entry : 0/0
  8392 ;;		On exit  : 0/0
  8393 ;;		Unchanged: 0/0
  8394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8396 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8397 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8398 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8399 ;;Total ram usage:        9 bytes
  8400 ;; Hardware stack levels used:    1
  8401 ;; Hardware stack levels required when called:    7
  8402 ;; This function calls:
  8403 ;;		_PROTOCOL_Print_TLV
  8404 ;;		_i2c1_read
  8405 ;;		_i2c1_write_no_data
  8406 ;; This function is called by:
  8407 ;;		_one_shot_sen
  8408 ;;		_fetch
  8409 ;; This function uses a non-reentrant model
  8410 ;;
  8411                           
  8412                           
  8413                           ;psect for function _sen
  8414  0719                     _sen:	
  8415                           
  8416                           ;incstack = 0
  8417                           ; Regs used in _sen: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8418                           ;sen@dev_addr stored from wreg
  8419  0719  0020               	movlb	0	; select bank0
  8420  071A  00D5               	movwf	sen@dev_addr
  8421                           
  8422                           ;main.c: 235: uint8_t status;
  8423                           ;main.c: 236: uint8_t type;
  8424                           ;main.c: 237: uint8_t length ,data, i;
  8425                           ;main.c: 238: LATCbits.LATC7 ^= 1;
  8426  071B  0022               	movlb	2	; select bank2
  8427  071C  0D0E               	rlf	14,w	;volatile
  8428  071D  0D0E               	rlf	14,w	;volatile
  8429  071E  3901               	andlw	1
  8430  071F  0020               	movlb	0	; select bank0
  8431  0720  00CD               	movwf	??_sen
  8432  0721  3001               	movlw	1
  8433  0722  06CD               	xorwf	??_sen,f
  8434  0723  0CCD               	rrf	??_sen,f
  8435  0724  0CCD               	rrf	??_sen,f
  8436  0725  0022               	movlb	2	; select bank2
  8437  0726  080E               	movf	14,w	;volatile
  8438  0727  0020               	movlb	0	; select bank0
  8439  0728  064D               	xorwf	??_sen,w
  8440  0729  397F               	andlw	-129
  8441  072A  064D               	xorwf	??_sen,w
  8442  072B  0022               	movlb	2	; select bank2
  8443  072C  008E               	movwf	14	;volatile
  8444                           
  8445                           ;main.c: 240: _delay((unsigned long)((200)*(32000000/4000000.0)));
  8446  072D  30E4               	movlw	228
  8447  072E                     u7537:	
  8448  072E  3200               	nop2
  8449  072F  3200               	nop2
  8450  0730  0B89               	decfsz	9,f
  8451  0731  2F2E               	goto	u7537
  8452  0732  3200               	nop2
  8453  0733  3200               	nop2
  8454                           
  8455                           ;main.c: 241: i2c1_write_no_data(dev_addr, 0x06);
  8456  0734  0020               	movlb	0	; select bank0
  8457  0735  0855               	movf	sen@dev_addr,w
  8458  0736  00CD               	movwf	??_sen
  8459  0737  01CE               	clrf	??_sen+1
  8460  0738  084D               	movf	??_sen,w
  8461  0739  00AE               	movwf	i2c1_write_no_data@dev_addr
  8462  073A  084E               	movf	??_sen+1,w
  8463  073B  00AF               	movwf	i2c1_write_no_data@dev_addr+1
  8464  073C  3006               	movlw	6
  8465  073D  00CF               	movwf	??_sen+2
  8466  073E  084F               	movf	??_sen+2,w
  8467  073F  00B0               	movwf	i2c1_write_no_data@reg_addr
  8468  0740  3194  2451  3187   	fcall	_i2c1_write_no_data
  8469                           
  8470                           ;main.c: 243: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  8471  0743  300B               	movlw	11
  8472  0744  0020               	movlb	0	; select bank0
  8473  0745  00CD               	movwf	??_sen
  8474  0746  3062               	movlw	98
  8475  0747                     u7547:	
  8476  0747  0B89               	decfsz	9,f
  8477  0748  2F47               	goto	u7547
  8478  0749  0BCD               	decfsz	??_sen,f
  8479  074A  2F47               	goto	u7547
  8480  074B  0000               	nop
  8481                           
  8482                           ;main.c: 244: status = i2c1_read(dev_addr, 0x07, &type, 1);
  8483  074C  0020               	movlb	0	; select bank0
  8484  074D  0855               	movf	sen@dev_addr,w
  8485  074E  00CD               	movwf	??_sen
  8486  074F  01CE               	clrf	??_sen+1
  8487  0750  084D               	movf	??_sen,w
  8488  0751  00B0               	movwf	i2c1_read@dev_addr
  8489  0752  084E               	movf	??_sen+1,w
  8490  0753  00B1               	movwf	i2c1_read@dev_addr+1
  8491  0754  3007               	movlw	7
  8492  0755  00CF               	movwf	??_sen+2
  8493  0756  084F               	movf	??_sen+2,w
  8494  0757  00B2               	movwf	i2c1_read@reg_addr
  8495  0758  3052               	movlw	low sen@type
  8496  0759  00B3               	movwf	i2c1_read@pbuf
  8497  075A  3000               	movlw	high sen@type
  8498  075B  00B4               	movwf	i2c1_read@pbuf+1
  8499  075C  01B5               	clrf	i2c1_read@len
  8500  075D  0AB5               	incf	i2c1_read@len,f
  8501  075E  3188  20CA  3187   	fcall	_i2c1_read
  8502  0761  0020               	movlb	0	; select bank0
  8503  0762  00D0               	movwf	??_sen+3
  8504  0763  0850               	movf	??_sen+3,w
  8505  0764  00D4               	movwf	sen@status
  8506                           
  8507                           ;main.c: 245: _delay((unsigned long)((100)*(32000000/4000000.0)));
  8508  0765  30A0               	movlw	160
  8509  0766                     u7557:	
  8510  0766  3200               	nop2
  8511  0767  0B89               	decfsz	9,f
  8512  0768  2F66               	goto	u7557
  8513                           
  8514                           ;main.c: 246: if (status == 0) {
  8515  0769  0020               	movlb	0	; select bank0
  8516  076A  0854               	movf	sen@status,w
  8517  076B  1D03               	btfss	3,2
  8518  076C  2FCA               	goto	l5340
  8519                           
  8520                           ;main.c: 247: if (type == 0x06) {
  8521  076D  3006               	movlw	6
  8522  076E  0652               	xorwf	sen@type,w
  8523  076F  1D03               	btfss	3,2
  8524  0770  2F78               	goto	l5326
  8525                           
  8526                           ;main.c: 248: PROTOCOL_Print_TLV(dev_addr, 0x06, 0, (0));
  8527  0771  3006               	movlw	6
  8528  0772  00CD               	movwf	??_sen
  8529  0773  084D               	movf	??_sen,w
  8530  0774  00C4               	movwf	PROTOCOL_Print_TLV@type
  8531  0775  01C5               	clrf	PROTOCOL_Print_TLV@length
  8532  0776  01C6               	clrf	PROTOCOL_Print_TLV@pbuffer
  8533  0777  2FC7               	goto	L12
  8534  0778                     l5326:	
  8535                           ;main.c: 249: } else {
  8536                           
  8537                           
  8538                           ;main.c: 250: status = i2c1_read(dev_addr, 0x07, &length, 1);
  8539  0778  0020               	movlb	0	; select bank0
  8540  0779  0855               	movf	sen@dev_addr,w
  8541  077A  00CD               	movwf	??_sen
  8542  077B  01CE               	clrf	??_sen+1
  8543  077C  084D               	movf	??_sen,w
  8544  077D  00B0               	movwf	i2c1_read@dev_addr
  8545  077E  084E               	movf	??_sen+1,w
  8546  077F  00B1               	movwf	i2c1_read@dev_addr+1
  8547  0780  3007               	movlw	7
  8548  0781  00CF               	movwf	??_sen+2
  8549  0782  084F               	movf	??_sen+2,w
  8550  0783  00B2               	movwf	i2c1_read@reg_addr
  8551  0784  3053               	movlw	low sen@length
  8552  0785  00B3               	movwf	i2c1_read@pbuf
  8553  0786  3000               	movlw	high sen@length
  8554  0787  00B4               	movwf	i2c1_read@pbuf+1
  8555  0788  01B5               	clrf	i2c1_read@len
  8556  0789  0AB5               	incf	i2c1_read@len,f
  8557  078A  3188  20CA  3187   	fcall	_i2c1_read
  8558  078D  0020               	movlb	0	; select bank0
  8559  078E  00D0               	movwf	??_sen+3
  8560  078F  0850               	movf	??_sen+3,w
  8561  0790  00D4               	movwf	sen@status
  8562                           
  8563                           ;main.c: 251: _delay((unsigned long)((100)*(32000000/4000000.0)));
  8564  0791  30A0               	movlw	160
  8565  0792                     u7567:	
  8566  0792  3200               	nop2
  8567  0793  0B89               	decfsz	9,f
  8568  0794  2F92               	goto	u7567
  8569                           
  8570                           ;main.c: 252: if (status == 0) {
  8571  0795  0020               	movlb	0	; select bank0
  8572  0796  0854               	movf	sen@status,w
  8573  0797  1D03               	btfss	3,2
  8574  0798  2FCA               	goto	l5340
  8575                           
  8576                           ;main.c: 253: status = i2c1_read(dev_addr, 0x07, read_buf, length);
  8577  0799  0855               	movf	sen@dev_addr,w
  8578  079A  00CD               	movwf	??_sen
  8579  079B  01CE               	clrf	??_sen+1
  8580  079C  084D               	movf	??_sen,w
  8581  079D  00B0               	movwf	i2c1_read@dev_addr
  8582  079E  084E               	movf	??_sen+1,w
  8583  079F  00B1               	movwf	i2c1_read@dev_addr+1
  8584  07A0  3007               	movlw	7
  8585  07A1  00CF               	movwf	??_sen+2
  8586  07A2  084F               	movf	??_sen+2,w
  8587  07A3  00B2               	movwf	i2c1_read@reg_addr
  8588  07A4  30BC               	movlw	low _read_buf
  8589  07A5  00B3               	movwf	i2c1_read@pbuf
  8590  07A6  3001               	movlw	high _read_buf
  8591  07A7  00B4               	movwf	i2c1_read@pbuf+1
  8592  07A8  0853               	movf	sen@length,w
  8593  07A9  00D0               	movwf	??_sen+3
  8594  07AA  0850               	movf	??_sen+3,w
  8595  07AB  00B5               	movwf	i2c1_read@len
  8596  07AC  3188  20CA  3187   	fcall	_i2c1_read
  8597  07AF  0020               	movlb	0	; select bank0
  8598  07B0  00D1               	movwf	??_sen+4
  8599  07B1  0851               	movf	??_sen+4,w
  8600  07B2  00D4               	movwf	sen@status
  8601                           
  8602                           ;main.c: 254: _delay((unsigned long)((100)*(32000000/4000000.0)));
  8603  07B3  30A0               	movlw	160
  8604  07B4                     u7577:	
  8605  07B4  3200               	nop2
  8606  07B5  0B89               	decfsz	9,f
  8607  07B6  2FB4               	goto	u7577
  8608                           
  8609                           ;main.c: 255: if (status == 0) {
  8610  07B7  0020               	movlb	0	; select bank0
  8611  07B8  0854               	movf	sen@status,w
  8612  07B9  1D03               	btfss	3,2
  8613  07BA  2FCA               	goto	l5340
  8614                           
  8615                           ;main.c: 256: PROTOCOL_Print_TLV(dev_addr, type, length, read_buf);
  8616  07BB  0852               	movf	sen@type,w
  8617  07BC  00CD               	movwf	??_sen
  8618  07BD  084D               	movf	??_sen,w
  8619  07BE  00C4               	movwf	PROTOCOL_Print_TLV@type
  8620  07BF  0853               	movf	sen@length,w
  8621  07C0  00CE               	movwf	??_sen+1
  8622  07C1  084E               	movf	??_sen+1,w
  8623  07C2  00C5               	movwf	PROTOCOL_Print_TLV@length
  8624  07C3  30BC               	movlw	(low (_read_buf| (0+256)))& (0+255)
  8625  07C4  00CF               	movwf	??_sen+2
  8626  07C5  084F               	movf	??_sen+2,w
  8627  07C6  00C6               	movwf	PROTOCOL_Print_TLV@pbuffer
  8628  07C7                     L12:	
  8629  07C7  0855               	movf	sen@dev_addr,w
  8630  07C8  3180  20B0         	fcall	_PROTOCOL_Print_TLV
  8631  07CA                     l5340:	
  8632                           
  8633                           ;main.c: 257: }
  8634                           ;main.c: 258: }
  8635                           ;main.c: 259: }
  8636                           ;main.c: 260: }
  8637                           ;main.c: 261: return status;
  8638  07CA  0020               	movlb	0	; select bank0
  8639  07CB  0854               	movf	sen@status,w
  8640  07CC  0008               	return
  8641  07CD                     __end_of_sen:	
  8642                           
  8643                           	psect	text37
  8644  1451                     __ptext37:	
  8645 ;; *************** function _i2c1_write_no_data *****************
  8646 ;; Defined at:
  8647 ;;		line 49 in file "i2c1_util.c"
  8648 ;; Parameters:    Size  Location     Type
  8649 ;;  dev_addr        2   14[BANK0 ] unsigned int 
  8650 ;;  reg_addr        1   16[BANK0 ] unsigned char 
  8651 ;; Auto vars:     Size  Location     Type
  8652 ;;  status          1   20[BANK0 ] enum E3078
  8653 ;;  buf             1   19[BANK0 ] unsigned char [1]
  8654 ;;  write_status    1   18[BANK0 ] unsigned char 
  8655 ;; Return value:  Size  Location     Type
  8656 ;;                  1    wreg      unsigned char 
  8657 ;; Registers used:
  8658 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8659 ;; Tracked objects:
  8660 ;;		On entry : 0/0
  8661 ;;		On exit  : 0/0
  8662 ;;		Unchanged: 0/0
  8663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8664 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8665 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8666 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8667 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8668 ;;Total ram usage:        7 bytes
  8669 ;; Hardware stack levels used:    1
  8670 ;; Hardware stack levels required when called:    5
  8671 ;; This function calls:
  8672 ;;		_I2C1_MasterWrite
  8673 ;; This function is called by:
  8674 ;;		_exec_remote_cmd
  8675 ;;		_check_plg
  8676 ;;		_sen
  8677 ;;		_one_shot_sen
  8678 ;;		_fetch
  8679 ;; This function uses a non-reentrant model
  8680 ;;
  8681                           
  8682                           
  8683                           ;psect for function _i2c1_write_no_data
  8684  1451                     _i2c1_write_no_data:	
  8685                           
  8686                           ;i2c1_util.c: 51: uint8_t buf[1];
  8687                           ;i2c1_util.c: 52: I2C1_MESSAGE_STATUS status;
  8688                           ;i2c1_util.c: 53: uint8_t write_status;
  8689                           ;i2c1_util.c: 54: buf[0] = reg_addr;
  8690                           
  8691                           ;incstack = 0
  8692                           ; Regs used in _i2c1_write_no_data: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8693  1451  0020               	movlb	0	; select bank0
  8694  1452  0830               	movf	i2c1_write_no_data@reg_addr,w
  8695  1453  00B1               	movwf	??_i2c1_write_no_data
  8696  1454  0831               	movf	??_i2c1_write_no_data,w
  8697  1455  00B3               	movwf	i2c1_write_no_data@buf
  8698                           
  8699                           ;i2c1_util.c: 55: _delay((unsigned long)((100)*(32000000/4000000.0)));
  8700  1456  30A0               	movlw	160
  8701  1457                     u7587:	
  8702  1457  3200               	nop2
  8703  1458  0B89               	decfsz	9,f
  8704  1459  2C57               	goto	u7587
  8705                           
  8706                           ;i2c1_util.c: 56: I2C1_MasterWrite(buf, 1, dev_addr, &status);
  8707  145A  0020               	movlb	0	; select bank0
  8708  145B  01A7               	clrf	I2C1_MasterWrite@length
  8709  145C  0AA7               	incf	I2C1_MasterWrite@length,f
  8710  145D  082F               	movf	i2c1_write_no_data@dev_addr+1,w
  8711  145E  00A9               	movwf	I2C1_MasterWrite@address+1
  8712  145F  082E               	movf	i2c1_write_no_data@dev_addr,w
  8713  1460  00A8               	movwf	I2C1_MasterWrite@address
  8714  1461  3034               	movlw	(low (i2c1_write_no_data@status| 0))& (0+255)
  8715  1462  00B1               	movwf	??_i2c1_write_no_data
  8716  1463  0831               	movf	??_i2c1_write_no_data,w
  8717  1464  00AA               	movwf	I2C1_MasterWrite@pflag
  8718  1465  3033               	movlw	(low (i2c1_write_no_data@buf| 0))& (0+255)
  8719  1466  3194  2427  3194   	fcall	_I2C1_MasterWrite
  8720  1469                     l5126:	
  8721                           ;i2c1_util.c: 57: while (status == I2C1_MESSAGE_PENDING) {_delay((unsigned long)((100)*(
      +                          32000000/4000000.0)));};
  8722                           
  8723  1469  3002               	movlw	2
  8724  146A  0020               	movlb	0	; select bank0
  8725  146B  0634               	xorwf	i2c1_write_no_data@status,w
  8726  146C  1D03               	btfss	3,2
  8727  146D  2C73               	goto	l5128
  8728  146E  30A0               	movlw	160
  8729  146F                     u7597:	
  8730  146F  3200               	nop2
  8731  1470  0B89               	decfsz	9,f
  8732  1471  2C6F               	goto	u7597
  8733  1472  2C69               	goto	l5126
  8734  1473                     l5128:	
  8735                           
  8736                           ;i2c1_util.c: 58: if (status == I2C1_MESSAGE_COMPLETE) {
  8737  1473  0834               	movf	i2c1_write_no_data@status,w
  8738  1474  1D03               	btfss	3,2
  8739  1475  2C78               	goto	l645
  8740                           
  8741                           ;i2c1_util.c: 59: write_status = 0;
  8742  1476  01B2               	clrf	i2c1_write_no_data@write_status
  8743                           
  8744                           ;i2c1_util.c: 60: } else {
  8745  1477  2C7A               	goto	l5132
  8746  1478                     l645:	
  8747                           
  8748                           ;i2c1_util.c: 61: write_status = 1;
  8749  1478  01B2               	clrf	i2c1_write_no_data@write_status
  8750  1479  0AB2               	incf	i2c1_write_no_data@write_status,f
  8751  147A                     l5132:	
  8752                           
  8753                           ;i2c1_util.c: 62: }
  8754                           ;i2c1_util.c: 63: return write_status;
  8755  147A  0832               	movf	i2c1_write_no_data@write_status,w
  8756  147B  0008               	return
  8757  147C                     __end_of_i2c1_write_no_data:	
  8758                           
  8759                           	psect	text38
  8760  08CA                     __ptext38:	
  8761 ;; *************** function _i2c1_read *****************
  8762 ;; Defined at:
  8763 ;;		line 24 in file "i2c1_util.c"
  8764 ;; Parameters:    Size  Location     Type
  8765 ;;  dev_addr        2   16[BANK0 ] unsigned int 
  8766 ;;  reg_addr        1   18[BANK0 ] unsigned char 
  8767 ;;  pbuf            2   19[BANK0 ] PTR unsigned char 
  8768 ;;		 -> sen@length(1), sen@type(1), read_buf(16), exec_remote_cmd@data(1), 
  8769 ;;  len             1   21[BANK0 ] unsigned char 
  8770 ;; Auto vars:     Size  Location     Type
  8771 ;;  status          1   26[BANK0 ] enum E3078
  8772 ;;  reg             1   25[BANK0 ] unsigned char [1]
  8773 ;;  read_status     1   24[BANK0 ] unsigned char 
  8774 ;; Return value:  Size  Location     Type
  8775 ;;                  1    wreg      unsigned char 
  8776 ;; Registers used:
  8777 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8778 ;; Tracked objects:
  8779 ;;		On entry : 0/0
  8780 ;;		On exit  : 0/0
  8781 ;;		Unchanged: 0/0
  8782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8783 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8784 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8785 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8786 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8787 ;;Total ram usage:       11 bytes
  8788 ;; Hardware stack levels used:    1
  8789 ;; Hardware stack levels required when called:    5
  8790 ;; This function calls:
  8791 ;;		_I2C1_MasterRead
  8792 ;;		_I2C1_MasterWrite
  8793 ;; This function is called by:
  8794 ;;		_exec_remote_cmd
  8795 ;;		_scan_dev
  8796 ;;		_sen
  8797 ;; This function uses a non-reentrant model
  8798 ;;
  8799                           
  8800                           
  8801                           ;psect for function _i2c1_read
  8802  08CA                     _i2c1_read:	
  8803                           
  8804                           ;i2c1_util.c: 26: uint8_t reg[1];
  8805                           ;i2c1_util.c: 27: I2C1_MESSAGE_STATUS status;
  8806                           ;i2c1_util.c: 28: uint8_t read_status;
  8807                           ;i2c1_util.c: 29: reg[0] = reg_addr;
  8808                           
  8809                           ;incstack = 0
  8810                           ; Regs used in _i2c1_read: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8811  08CA  0020               	movlb	0	; select bank0
  8812  08CB  0832               	movf	i2c1_read@reg_addr,w
  8813  08CC  00B6               	movwf	??_i2c1_read
  8814  08CD  0836               	movf	??_i2c1_read,w
  8815  08CE  00B9               	movwf	i2c1_read@reg
  8816                           
  8817                           ;i2c1_util.c: 30: _delay((unsigned long)((100)*(32000000/4000000.0)));
  8818  08CF  30A0               	movlw	160
  8819  08D0                     u7607:	
  8820  08D0  3200               	nop2
  8821  08D1  0B89               	decfsz	9,f
  8822  08D2  28D0               	goto	u7607
  8823                           
  8824                           ;i2c1_util.c: 31: I2C1_MasterWrite(reg, 1, dev_addr, &status);
  8825  08D3  0020               	movlb	0	; select bank0
  8826  08D4  01A7               	clrf	I2C1_MasterWrite@length
  8827  08D5  0AA7               	incf	I2C1_MasterWrite@length,f
  8828  08D6  0831               	movf	i2c1_read@dev_addr+1,w
  8829  08D7  00A9               	movwf	I2C1_MasterWrite@address+1
  8830  08D8  0830               	movf	i2c1_read@dev_addr,w
  8831  08D9  00A8               	movwf	I2C1_MasterWrite@address
  8832  08DA  303A               	movlw	(low (i2c1_read@status| 0))& (0+255)
  8833  08DB  00B6               	movwf	??_i2c1_read
  8834  08DC  0836               	movf	??_i2c1_read,w
  8835  08DD  00AA               	movwf	I2C1_MasterWrite@pflag
  8836  08DE  3039               	movlw	(low (i2c1_read@reg| 0))& (0+255)
  8837  08DF  3194  2427  3188   	fcall	_I2C1_MasterWrite
  8838  08E2                     l5098:	
  8839                           ;i2c1_util.c: 32: while (status == I2C1_MESSAGE_PENDING) {_delay((unsigned long)((100)*(
      +                          32000000/4000000.0)));};
  8840                           
  8841  08E2  3002               	movlw	2
  8842  08E3  0020               	movlb	0	; select bank0
  8843  08E4  063A               	xorwf	i2c1_read@status,w
  8844  08E5  1D03               	btfss	3,2
  8845  08E6  28EC               	goto	l5100
  8846  08E7  30A0               	movlw	160
  8847  08E8                     u7617:	
  8848  08E8  3200               	nop2
  8849  08E9  0B89               	decfsz	9,f
  8850  08EA  28E8               	goto	u7617
  8851  08EB  28E2               	goto	l5098
  8852  08EC                     l5100:	
  8853                           
  8854                           ;i2c1_util.c: 33: if (status == I2C1_MESSAGE_COMPLETE) {
  8855  08EC  083A               	movf	i2c1_read@status,w
  8856  08ED  1D03               	btfss	3,2
  8857  08EE  291B               	goto	l632
  8858                           
  8859                           ;i2c1_util.c: 34: _delay((unsigned long)((100)*(32000000/4000000.0)));
  8860  08EF  30A0               	movlw	160
  8861  08F0                     u7627:	
  8862  08F0  3200               	nop2
  8863  08F1  0B89               	decfsz	9,f
  8864  08F2  28F0               	goto	u7627
  8865                           
  8866                           ;i2c1_util.c: 35: I2C1_MasterRead(pbuf, len, dev_addr, &status);
  8867  08F3  0020               	movlb	0	; select bank0
  8868  08F4  0834               	movf	i2c1_read@pbuf+1,w
  8869  08F5  00A9               	movwf	I2C1_MasterRead@pdata+1
  8870  08F6  0833               	movf	i2c1_read@pbuf,w
  8871  08F7  00A8               	movwf	I2C1_MasterRead@pdata
  8872  08F8  0835               	movf	i2c1_read@len,w
  8873  08F9  00B6               	movwf	??_i2c1_read
  8874  08FA  0836               	movf	??_i2c1_read,w
  8875  08FB  00AA               	movwf	I2C1_MasterRead@length
  8876  08FC  0831               	movf	i2c1_read@dev_addr+1,w
  8877  08FD  00AC               	movwf	I2C1_MasterRead@address+1
  8878  08FE  0830               	movf	i2c1_read@dev_addr,w
  8879  08FF  00AB               	movwf	I2C1_MasterRead@address
  8880  0900  303A               	movlw	(low (i2c1_read@status| 0))& (0+255)
  8881  0901  00B7               	movwf	??_i2c1_read+1
  8882  0902  0837               	movf	??_i2c1_read+1,w
  8883  0903  00AD               	movwf	I2C1_MasterRead@pflag
  8884  0904  3193  23D7  3188   	fcall	_I2C1_MasterRead
  8885  0907                     l5108:	
  8886                           ;i2c1_util.c: 36: while (status == I2C1_MESSAGE_PENDING) {_delay((unsigned long)((100)*(
      +                          32000000/4000000.0)));};
  8887                           
  8888  0907  3002               	movlw	2
  8889  0908  0020               	movlb	0	; select bank0
  8890  0909  063A               	xorwf	i2c1_read@status,w
  8891  090A  1D03               	btfss	3,2
  8892  090B  2911               	goto	l5110
  8893  090C  30A0               	movlw	160
  8894  090D                     u7637:	
  8895  090D  3200               	nop2
  8896  090E  0B89               	decfsz	9,f
  8897  090F  290D               	goto	u7637
  8898  0910  2907               	goto	l5108
  8899  0911                     l5110:	
  8900                           
  8901                           ;i2c1_util.c: 37: if (status == I2C1_MESSAGE_COMPLETE) {
  8902  0911  083A               	movf	i2c1_read@status,w
  8903  0912  1D03               	btfss	3,2
  8904  0913  2916               	goto	l5114
  8905                           
  8906                           ;i2c1_util.c: 38: read_status = 0;
  8907  0914  01B8               	clrf	i2c1_read@read_status
  8908                           
  8909                           ;i2c1_util.c: 39: } else {
  8910  0915  291D               	goto	l5116
  8911  0916                     l5114:	
  8912                           
  8913                           ;i2c1_util.c: 40: read_status = 2;
  8914  0916  3002               	movlw	2
  8915  0917  00B6               	movwf	??_i2c1_read
  8916  0918  0836               	movf	??_i2c1_read,w
  8917  0919  00B8               	movwf	i2c1_read@read_status
  8918                           
  8919                           ;i2c1_util.c: 41: }
  8920                           ;i2c1_util.c: 42: } else {
  8921  091A  291D               	goto	l5116
  8922  091B                     l632:	
  8923                           
  8924                           ;i2c1_util.c: 43: read_status = 1;
  8925  091B  01B8               	clrf	i2c1_read@read_status
  8926  091C  0AB8               	incf	i2c1_read@read_status,f
  8927  091D                     l5116:	
  8928                           
  8929                           ;i2c1_util.c: 44: }
  8930                           ;i2c1_util.c: 45: return read_status;
  8931  091D  0838               	movf	i2c1_read@read_status,w
  8932  091E  0008               	return
  8933  091F                     __end_of_i2c1_read:	
  8934                           
  8935                           	psect	text39
  8936  1427                     __ptext39:	
  8937 ;; *************** function _I2C1_MasterWrite *****************
  8938 ;; Defined at:
  8939 ;;		line 598 in file "mcc_generated_files/i2c1.c"
  8940 ;; Parameters:    Size  Location     Type
  8941 ;;  pdata           1    wreg     PTR unsigned char 
  8942 ;;		 -> i2c1_write_no_data@buf(1), i2c1_read@reg(1), exec_remote_cmd@send_buf(50), 
  8943 ;;  length          1    7[BANK0 ] unsigned char 
  8944 ;;  address         2    8[BANK0 ] unsigned int 
  8945 ;;  pflag           1   10[BANK0 ] PTR enum E2972
  8946 ;;		 -> i2c1_write_no_data@status(1), i2c1_read@status(1), i2c1_write@status(1), 
  8947 ;; Auto vars:     Size  Location     Type
  8948 ;;  pdata           1   13[BANK0 ] PTR unsigned char 
  8949 ;;		 -> i2c1_write_no_data@buf(1), i2c1_read@reg(1), exec_remote_cmd@send_buf(50), 
  8950 ;; Return value:  Size  Location     Type
  8951 ;;                  1    wreg      void 
  8952 ;; Registers used:
  8953 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8954 ;; Tracked objects:
  8955 ;;		On entry : 0/0
  8956 ;;		On exit  : 0/0
  8957 ;;		Unchanged: 0/0
  8958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8959 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8960 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8961 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8962 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8963 ;;Total ram usage:        7 bytes
  8964 ;; Hardware stack levels used:    1
  8965 ;; Hardware stack levels required when called:    4
  8966 ;; This function calls:
  8967 ;;		_I2C1_MasterTRBInsert
  8968 ;;		_I2C1_MasterWriteTRBBuild
  8969 ;; This function is called by:
  8970 ;;		_i2c1_write
  8971 ;;		_i2c1_read
  8972 ;;		_i2c1_write_no_data
  8973 ;; This function uses a non-reentrant model
  8974 ;;
  8975                           
  8976                           
  8977                           ;psect for function _I2C1_MasterWrite
  8978  1427                     _I2C1_MasterWrite:	
  8979                           
  8980                           ;incstack = 0
  8981                           ; Regs used in _I2C1_MasterWrite: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8982                           ;I2C1_MasterWrite@pdata stored from wreg
  8983  1427  0020               	movlb	0	; select bank0
  8984  1428  00AD               	movwf	I2C1_MasterWrite@pdata
  8985                           
  8986                           ;i2c1.c: 604: static I2C1_TRANSACTION_REQUEST_BLOCK trBlock;
  8987                           ;i2c1.c: 607: if (i2c1_object.trStatus.s.full != 1)
  8988  1429  0021               	movlb	1	; select bank1
  8989  142A  185B               	btfsc	(_i2c1_object^(0+128)+2),0
  8990  142B  2C4A               	goto	l4860
  8991                           
  8992                           ;i2c1.c: 608: {
  8993                           ;i2c1.c: 609: I2C1_MasterWriteTRBBuild(&trBlock, pdata, length, address);
  8994  142C  0020               	movlb	0	; select bank0
  8995  142D  082D               	movf	I2C1_MasterWrite@pdata,w
  8996  142E  00AB               	movwf	??_I2C1_MasterWrite
  8997  142F  082B               	movf	??_I2C1_MasterWrite,w
  8998  1430  00A0               	movwf	I2C1_MasterWriteTRBBuild@pdata
  8999  1431  0827               	movf	I2C1_MasterWrite@length,w
  9000  1432  00AC               	movwf	??_I2C1_MasterWrite+1
  9001  1433  082C               	movf	??_I2C1_MasterWrite+1,w
  9002  1434  00A1               	movwf	I2C1_MasterWriteTRBBuild@length
  9003  1435  0829               	movf	I2C1_MasterWrite@address+1,w
  9004  1436  00A3               	movwf	I2C1_MasterWriteTRBBuild@address+1
  9005  1437  0828               	movf	I2C1_MasterWrite@address,w
  9006  1438  00A2               	movwf	I2C1_MasterWriteTRBBuild@address
  9007  1439  3051               	movlw	(low (I2C1_MasterWrite@trBlock| (0+256)))& (0+255)
  9008  143A  3193  23B4  3194   	fcall	_I2C1_MasterWriteTRBBuild
  9009                           
  9010                           ;i2c1.c: 610: I2C1_MasterTRBInsert(1, &trBlock, pflag);
  9011  143D  3051               	movlw	(low (I2C1_MasterWrite@trBlock| (0+256)))& (0+255)
  9012  143E  0020               	movlb	0	; select bank0
  9013  143F  00AB               	movwf	??_I2C1_MasterWrite
  9014  1440  082B               	movf	??_I2C1_MasterWrite,w
  9015  1441  00A0               	movwf	I2C1_MasterTRBInsert@ptrb_list
  9016  1442  082A               	movf	I2C1_MasterWrite@pflag,w
  9017  1443  00AC               	movwf	??_I2C1_MasterWrite+1
  9018  1444  082C               	movf	??_I2C1_MasterWrite+1,w
  9019  1445  00A1               	movwf	I2C1_MasterTRBInsert@pflag
  9020  1446  3001               	movlw	1
  9021  1447  3189  211F         	fcall	_I2C1_MasterTRBInsert
  9022                           
  9023                           ;i2c1.c: 611: }
  9024  1449  0008               	return
  9025  144A                     l4860:	
  9026                           
  9027                           ;i2c1.c: 612: else
  9028                           ;i2c1.c: 613: {
  9029                           ;i2c1.c: 614: *pflag = I2C1_MESSAGE_FAIL;
  9030  144A  0020               	movlb	0	; select bank0
  9031  144B  082A               	movf	I2C1_MasterWrite@pflag,w
  9032  144C  0086               	movwf	6
  9033  144D  0187               	clrf	7
  9034  144E  0181               	clrf	1
  9035  144F  0A81               	incf	1,f
  9036  1450  0008               	return
  9037  1451                     __end_of_I2C1_MasterWrite:	
  9038                           
  9039                           	psect	text40
  9040  13B4                     __ptext40:	
  9041 ;; *************** function _I2C1_MasterWriteTRBBuild *****************
  9042 ;; Defined at:
  9043 ;;		line 707 in file "mcc_generated_files/i2c1.c"
  9044 ;; Parameters:    Size  Location     Type
  9045 ;;  ptrb            1    wreg     PTR struct .
  9046 ;;		 -> I2C1_MasterWrite@trBlock(5), 
  9047 ;;  pdata           1    0[BANK0 ] PTR unsigned char 
  9048 ;;		 -> i2c1_write_no_data@buf(1), i2c1_read@reg(1), exec_remote_cmd@send_buf(50), 
  9049 ;;  length          1    1[BANK0 ] unsigned char 
  9050 ;;  address         2    2[BANK0 ] unsigned int 
  9051 ;; Auto vars:     Size  Location     Type
  9052 ;;  ptrb            1    6[BANK0 ] PTR struct .
  9053 ;;		 -> I2C1_MasterWrite@trBlock(5), 
  9054 ;; Return value:  Size  Location     Type
  9055 ;;                  1    wreg      void 
  9056 ;; Registers used:
  9057 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9058 ;; Tracked objects:
  9059 ;;		On entry : 0/0
  9060 ;;		On exit  : 0/0
  9061 ;;		Unchanged: 0/0
  9062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9063 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9064 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9065 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9066 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9067 ;;Total ram usage:        7 bytes
  9068 ;; Hardware stack levels used:    1
  9069 ;; Hardware stack levels required when called:    3
  9070 ;; This function calls:
  9071 ;;		Nothing
  9072 ;; This function is called by:
  9073 ;;		_I2C1_MasterWrite
  9074 ;; This function uses a non-reentrant model
  9075 ;;
  9076                           
  9077                           
  9078                           ;psect for function _I2C1_MasterWriteTRBBuild
  9079  13B4                     _I2C1_MasterWriteTRBBuild:	
  9080                           
  9081                           ;incstack = 0
  9082                           ; Regs used in _I2C1_MasterWriteTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
  9083                           ;I2C1_MasterWriteTRBBuild@ptrb stored from wreg
  9084  13B4  0020               	movlb	0	; select bank0
  9085  13B5  00A6               	movwf	I2C1_MasterWriteTRBBuild@ptrb
  9086                           
  9087                           ;i2c1.c: 713: ptrb->address = address << 1;
  9088  13B6  0823               	movf	I2C1_MasterWriteTRBBuild@address+1,w
  9089  13B7  00A5               	movwf	??_I2C1_MasterWriteTRBBuild+1
  9090  13B8  0822               	movf	I2C1_MasterWriteTRBBuild@address,w
  9091  13B9  00A4               	movwf	??_I2C1_MasterWriteTRBBuild
  9092  13BA  35A4               	lslf	??_I2C1_MasterWriteTRBBuild,f
  9093  13BB  0DA5               	rlf	??_I2C1_MasterWriteTRBBuild+1,f
  9094  13BC  0826               	movf	I2C1_MasterWriteTRBBuild@ptrb,w
  9095  13BD  0086               	movwf	6
  9096  13BE  3001               	movlw	1	; select bank2/3
  9097  13BF  0087               	movwf	7
  9098  13C0  0824               	movf	??_I2C1_MasterWriteTRBBuild,w
  9099  13C1  3FC0               	movwi [0]fsr1
  9100  13C2  0825               	movf	??_I2C1_MasterWriteTRBBuild+1,w
  9101  13C3  3FC1               	movwi [1]fsr1
  9102                           
  9103                           ;i2c1.c: 714: ptrb->length = length;
  9104  13C4  0821               	movf	I2C1_MasterWriteTRBBuild@length,w
  9105  13C5  00A4               	movwf	??_I2C1_MasterWriteTRBBuild
  9106  13C6  0826               	movf	I2C1_MasterWriteTRBBuild@ptrb,w
  9107  13C7  3E02               	addlw	2
  9108  13C8  0086               	movwf	6
  9109  13C9  3001               	movlw	1	; select bank2/3
  9110  13CA  0087               	movwf	7
  9111  13CB  0824               	movf	??_I2C1_MasterWriteTRBBuild,w
  9112  13CC  0081               	movwf	1
  9113                           
  9114                           ;i2c1.c: 715: ptrb->pbuffer = pdata;
  9115  13CD  0826               	movf	I2C1_MasterWriteTRBBuild@ptrb,w
  9116  13CE  3E03               	addlw	3
  9117  13CF  0086               	movwf	6
  9118  13D0  3001               	movlw	1	; select bank2/3
  9119  13D1  0087               	movwf	7
  9120  13D2  0820               	movf	I2C1_MasterWriteTRBBuild@pdata,w
  9121  13D3  3FC0               	movwi [0]fsr1
  9122  13D4  3000               	movlw	0
  9123  13D5  3FC1               	movwi [1]fsr1
  9124  13D6  0008               	return
  9125  13D7                     __end_of_I2C1_MasterWriteTRBBuild:	
  9126                           
  9127                           	psect	text41
  9128  13D7                     __ptext41:	
  9129 ;; *************** function _I2C1_MasterRead *****************
  9130 ;; Defined at:
  9131 ;;		line 619 in file "mcc_generated_files/i2c1.c"
  9132 ;; Parameters:    Size  Location     Type
  9133 ;;  pdata           2    8[BANK0 ] PTR unsigned char 
  9134 ;;		 -> sen@length(1), sen@type(1), read_buf(16), exec_remote_cmd@data(1), 
  9135 ;;  length          1   10[BANK0 ] unsigned char 
  9136 ;;  address         2   11[BANK0 ] unsigned int 
  9137 ;;  pflag           1   13[BANK0 ] PTR enum E2972
  9138 ;;		 -> i2c1_read@status(1), 
  9139 ;; Auto vars:     Size  Location     Type
  9140 ;;		None
  9141 ;; Return value:  Size  Location     Type
  9142 ;;                  1    wreg      void 
  9143 ;; Registers used:
  9144 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9145 ;; Tracked objects:
  9146 ;;		On entry : 0/0
  9147 ;;		On exit  : 0/0
  9148 ;;		Unchanged: 0/0
  9149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9150 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9152 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9153 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9154 ;;Total ram usage:        8 bytes
  9155 ;; Hardware stack levels used:    1
  9156 ;; Hardware stack levels required when called:    4
  9157 ;; This function calls:
  9158 ;;		_I2C1_MasterReadTRBBuild
  9159 ;;		_I2C1_MasterTRBInsert
  9160 ;; This function is called by:
  9161 ;;		_i2c1_read
  9162 ;; This function uses a non-reentrant model
  9163 ;;
  9164                           
  9165                           
  9166                           ;psect for function _I2C1_MasterRead
  9167  13D7                     _I2C1_MasterRead:	
  9168                           
  9169                           ;i2c1.c: 625: static I2C1_TRANSACTION_REQUEST_BLOCK trBlock;
  9170                           ;i2c1.c: 629: if (i2c1_object.trStatus.s.full != 1)
  9171                           
  9172                           ;incstack = 0
  9173                           ; Regs used in _I2C1_MasterRead: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9174  13D7  0021               	movlb	1	; select bank1
  9175  13D8  185B               	btfsc	(_i2c1_object^(0+128)+2),0
  9176  13D9  2BF8               	goto	l4866
  9177                           
  9178                           ;i2c1.c: 630: {
  9179                           ;i2c1.c: 631: I2C1_MasterReadTRBBuild(&trBlock, pdata, length, address);
  9180  13DA  0020               	movlb	0	; select bank0
  9181  13DB  0829               	movf	I2C1_MasterRead@pdata+1,w
  9182  13DC  00A1               	movwf	I2C1_MasterReadTRBBuild@pdata+1
  9183  13DD  0828               	movf	I2C1_MasterRead@pdata,w
  9184  13DE  00A0               	movwf	I2C1_MasterReadTRBBuild@pdata
  9185  13DF  082A               	movf	I2C1_MasterRead@length,w
  9186  13E0  00AE               	movwf	??_I2C1_MasterRead
  9187  13E1  082E               	movf	??_I2C1_MasterRead,w
  9188  13E2  00A2               	movwf	I2C1_MasterReadTRBBuild@length
  9189  13E3  082C               	movf	I2C1_MasterRead@address+1,w
  9190  13E4  00A4               	movwf	I2C1_MasterReadTRBBuild@address+1
  9191  13E5  082B               	movf	I2C1_MasterRead@address,w
  9192  13E6  00A3               	movwf	I2C1_MasterReadTRBBuild@address
  9193  13E7  304C               	movlw	(low (I2C1_MasterRead@trBlock| (0+256)))& (0+255)
  9194  13E8  3194  247C  3193   	fcall	_I2C1_MasterReadTRBBuild
  9195                           
  9196                           ;i2c1.c: 632: I2C1_MasterTRBInsert(1, &trBlock, pflag);
  9197  13EB  304C               	movlw	(low (I2C1_MasterRead@trBlock| (0+256)))& (0+255)
  9198  13EC  0020               	movlb	0	; select bank0
  9199  13ED  00AE               	movwf	??_I2C1_MasterRead
  9200  13EE  082E               	movf	??_I2C1_MasterRead,w
  9201  13EF  00A0               	movwf	I2C1_MasterTRBInsert@ptrb_list
  9202  13F0  082D               	movf	I2C1_MasterRead@pflag,w
  9203  13F1  00AF               	movwf	??_I2C1_MasterRead+1
  9204  13F2  082F               	movf	??_I2C1_MasterRead+1,w
  9205  13F3  00A1               	movwf	I2C1_MasterTRBInsert@pflag
  9206  13F4  3001               	movlw	1
  9207  13F5  3189  211F         	fcall	_I2C1_MasterTRBInsert
  9208                           
  9209                           ;i2c1.c: 633: }
  9210  13F7  0008               	return
  9211  13F8                     l4866:	
  9212                           
  9213                           ;i2c1.c: 634: else
  9214                           ;i2c1.c: 635: {
  9215                           ;i2c1.c: 636: *pflag = I2C1_MESSAGE_FAIL;
  9216  13F8  0020               	movlb	0	; select bank0
  9217  13F9  082D               	movf	I2C1_MasterRead@pflag,w
  9218  13FA  0086               	movwf	6
  9219  13FB  0187               	clrf	7
  9220  13FC  0181               	clrf	1
  9221  13FD  0A81               	incf	1,f
  9222  13FE  0008               	return
  9223  13FF                     __end_of_I2C1_MasterRead:	
  9224                           
  9225                           	psect	text42
  9226  091F                     __ptext42:	
  9227 ;; *************** function _I2C1_MasterTRBInsert *****************
  9228 ;; Defined at:
  9229 ;;		line 641 in file "mcc_generated_files/i2c1.c"
  9230 ;; Parameters:    Size  Location     Type
  9231 ;;  count           1    wreg     unsigned char 
  9232 ;;  ptrb_list       1    0[BANK0 ] PTR struct .
  9233 ;;		 -> I2C1_MasterRead@trBlock(5), I2C1_MasterWrite@trBlock(5), 
  9234 ;;  pflag           1    1[BANK0 ] PTR enum E2972
  9235 ;;		 -> i2c1_write_no_data@status(1), i2c1_read@status(1), i2c1_write@status(1), 
  9236 ;; Auto vars:     Size  Location     Type
  9237 ;;  count           1    3[BANK0 ] unsigned char 
  9238 ;; Return value:  Size  Location     Type
  9239 ;;                  1    wreg      void 
  9240 ;; Registers used:
  9241 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9242 ;; Tracked objects:
  9243 ;;		On entry : 0/0
  9244 ;;		On exit  : 0/0
  9245 ;;		Unchanged: 0/0
  9246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9247 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9248 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9249 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9250 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9251 ;;Total ram usage:        4 bytes
  9252 ;; Hardware stack levels used:    1
  9253 ;; Hardware stack levels required when called:    3
  9254 ;; This function calls:
  9255 ;;		Nothing
  9256 ;; This function is called by:
  9257 ;;		_I2C1_MasterWrite
  9258 ;;		_I2C1_MasterRead
  9259 ;; This function uses a non-reentrant model
  9260 ;;
  9261                           
  9262                           
  9263                           ;psect for function _I2C1_MasterTRBInsert
  9264  091F                     _I2C1_MasterTRBInsert:	
  9265                           
  9266                           ;incstack = 0
  9267                           ; Regs used in _I2C1_MasterTRBInsert: [wreg+fsr1l+fsr1h+status,2+status,0]
  9268                           ;I2C1_MasterTRBInsert@count stored from wreg
  9269  091F  0020               	movlb	0	; select bank0
  9270  0920  00A3               	movwf	I2C1_MasterTRBInsert@count
  9271                           
  9272                           ;i2c1.c: 648: if (i2c1_object.trStatus.s.full != 1)
  9273  0921  0021               	movlb	1	; select bank1
  9274  0922  185B               	btfsc	(_i2c1_object^(0+128)+2),0
  9275  0923  2961               	goto	l4770
  9276                           
  9277                           ;i2c1.c: 649: {
  9278                           ;i2c1.c: 650: *pflag = I2C1_MESSAGE_PENDING;
  9279  0924  3002               	movlw	2
  9280  0925  0020               	movlb	0	; select bank0
  9281  0926  00A2               	movwf	??_I2C1_MasterTRBInsert
  9282  0927  0821               	movf	I2C1_MasterTRBInsert@pflag,w
  9283  0928  0086               	movwf	6
  9284  0929  0187               	clrf	7
  9285  092A  0822               	movf	??_I2C1_MasterTRBInsert,w
  9286  092B  0081               	movwf	1
  9287                           
  9288                           ;i2c1.c: 652: i2c1_object.pTrTail->ptrb_list = ptrb_list;
  9289  092C  0820               	movf	I2C1_MasterTRBInsert@ptrb_list,w
  9290  092D  00A2               	movwf	??_I2C1_MasterTRBInsert
  9291  092E  0021               	movlb	1	; select bank1
  9292  092F  0A59               	incf	_i2c1_object^(0+128),w
  9293  0930  0086               	movwf	6
  9294  0931  3001               	movlw	1	; select bank2/3
  9295  0932  0087               	movwf	7
  9296  0933  0020               	movlb	0	; select bank0
  9297  0934  0822               	movf	??_I2C1_MasterTRBInsert,w
  9298  0935  0081               	movwf	1
  9299                           
  9300                           ;i2c1.c: 653: i2c1_object.pTrTail->count = count;
  9301  0936  0823               	movf	I2C1_MasterTRBInsert@count,w
  9302  0937  00A2               	movwf	??_I2C1_MasterTRBInsert
  9303  0938  0021               	movlb	1	; select bank1
  9304  0939  0859               	movf	_i2c1_object^(0+128),w
  9305  093A  0086               	movwf	6
  9306  093B  3001               	movlw	1	; select bank2/3
  9307  093C  0087               	movwf	7
  9308  093D  0020               	movlb	0	; select bank0
  9309  093E  0822               	movf	??_I2C1_MasterTRBInsert,w
  9310  093F  0081               	movwf	1
  9311                           
  9312                           ;i2c1.c: 654: i2c1_object.pTrTail->pTrFlag = pflag;
  9313  0940  0821               	movf	I2C1_MasterTRBInsert@pflag,w
  9314  0941  00A2               	movwf	??_I2C1_MasterTRBInsert
  9315  0942  0021               	movlb	1	; select bank1
  9316  0943  0859               	movf	_i2c1_object^(0+128),w
  9317  0944  3E02               	addlw	2
  9318  0945  0086               	movwf	6
  9319  0946  3001               	movlw	1	; select bank2/3
  9320  0947  0087               	movwf	7
  9321  0948  0020               	movlb	0	; select bank0
  9322  0949  0822               	movf	??_I2C1_MasterTRBInsert,w
  9323  094A  0081               	movwf	1
  9324                           
  9325                           ;i2c1.c: 655: i2c1_object.pTrTail++;
  9326  094B  3003               	movlw	3
  9327  094C  00A2               	movwf	??_I2C1_MasterTRBInsert
  9328  094D  0822               	movf	??_I2C1_MasterTRBInsert,w
  9329  094E  0021               	movlb	1	; select bank1
  9330  094F  07D9               	addwf	_i2c1_object^(0+128),f
  9331                           
  9332                           ;i2c1.c: 658: if (i2c1_object.pTrTail == (i2c1_tr_queue + 1))
  9333  0950  0859               	movf	_i2c1_object^(0+128),w
  9334  0951  3A5C               	xorlw	(low ((_i2c1_tr_queue| (0+256)+3)))& (0+255)
  9335  0952  1D03               	skipz
  9336  0953  295A               	goto	l4766
  9337                           
  9338                           ;i2c1.c: 659: {
  9339                           ;i2c1.c: 661: i2c1_object.pTrTail = i2c1_tr_queue;
  9340  0954  3059               	movlw	(low (_i2c1_tr_queue| (0+256)))& (0+255)
  9341  0955  0020               	movlb	0	; select bank0
  9342  0956  00A2               	movwf	??_I2C1_MasterTRBInsert
  9343  0957  0822               	movf	??_I2C1_MasterTRBInsert,w
  9344  0958  0021               	movlb	1	; select bank1
  9345  0959  00D9               	movwf	_i2c1_object^(0+128)
  9346  095A                     l4766:	
  9347                           
  9348                           ;i2c1.c: 662: }
  9349                           ;i2c1.c: 666: i2c1_object.trStatus.s.empty = 0;
  9350  095A  10DB               	bcf	(_i2c1_object^(0+128)+2),1
  9351                           
  9352                           ;i2c1.c: 669: if (i2c1_object.pTrHead == i2c1_object.pTrTail)
  9353  095B  085A               	movf	(low ((_i2c1_object| 0+1)))^(0+128),w
  9354  095C  0659               	xorwf	_i2c1_object^(0+128),w
  9355  095D  1D03               	skipz
  9356  095E  2967               	goto	l4772
  9357                           
  9358                           ;i2c1.c: 670: {
  9359                           ;i2c1.c: 672: i2c1_object.trStatus.s.full = 1;
  9360  095F  145B               	bsf	(_i2c1_object^(0+128)+2),0
  9361                           
  9362                           ;i2c1.c: 673: }
  9363                           ;i2c1.c: 675: }
  9364  0960  2967               	goto	l4772
  9365  0961                     l4770:	
  9366                           
  9367                           ;i2c1.c: 676: else
  9368                           ;i2c1.c: 677: {
  9369                           ;i2c1.c: 678: *pflag = I2C1_MESSAGE_FAIL;
  9370  0961  0020               	movlb	0	; select bank0
  9371  0962  0821               	movf	I2C1_MasterTRBInsert@pflag,w
  9372  0963  0086               	movwf	6
  9373  0964  0187               	clrf	7
  9374  0965  0181               	clrf	1
  9375  0966  0A81               	incf	1,f
  9376  0967                     l4772:	
  9377                           
  9378                           ;i2c1.c: 679: }
  9379                           ;i2c1.c: 682: if (*pflag == I2C1_MESSAGE_PENDING)
  9380  0967  0020               	movlb	0	; select bank0
  9381  0968  0821               	movf	I2C1_MasterTRBInsert@pflag,w
  9382  0969  0086               	movwf	6
  9383  096A  0187               	clrf	7
  9384  096B  3002               	movlw	2
  9385  096C  0601               	xorwf	1,w
  9386  096D  1D03               	btfss	3,2
  9387  096E  0008               	return
  9388  096F                     l4776:	
  9389                           ;i2c1.c: 683: {
  9390                           ;i2c1.c: 684: while(i2c1_state != S_MASTER_IDLE);
  9391                           
  9392  096F  0021               	movlb	1	; select bank1
  9393  0970  086C               	movf	_i2c1_state^(0+128),w
  9394  0971  1D03               	btfss	3,2
  9395  0972  296F               	goto	l4776
  9396                           
  9397                           ;i2c1.c: 685: {
  9398                           ;i2c1.c: 688: PIR1bits.SSP1IF = 1;
  9399  0973  0020               	movlb	0	; select bank0
  9400  0974  1591               	bsf	17,3	;volatile
  9401  0975  0008               	return
  9402  0976                     __end_of_I2C1_MasterTRBInsert:	
  9403                           
  9404                           	psect	text43
  9405  147C                     __ptext43:	
  9406 ;; *************** function _I2C1_MasterReadTRBBuild *****************
  9407 ;; Defined at:
  9408 ;;		line 694 in file "mcc_generated_files/i2c1.c"
  9409 ;; Parameters:    Size  Location     Type
  9410 ;;  ptrb            1    wreg     PTR struct .
  9411 ;;		 -> I2C1_MasterRead@trBlock(5), 
  9412 ;;  pdata           2    0[BANK0 ] PTR unsigned char 
  9413 ;;		 -> sen@length(1), sen@type(1), read_buf(16), exec_remote_cmd@data(1), 
  9414 ;;  length          1    2[BANK0 ] unsigned char 
  9415 ;;  address         2    3[BANK0 ] unsigned int 
  9416 ;; Auto vars:     Size  Location     Type
  9417 ;;  ptrb            1    7[BANK0 ] PTR struct .
  9418 ;;		 -> I2C1_MasterRead@trBlock(5), 
  9419 ;; Return value:  Size  Location     Type
  9420 ;;                  1    wreg      void 
  9421 ;; Registers used:
  9422 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9423 ;; Tracked objects:
  9424 ;;		On entry : 0/0
  9425 ;;		On exit  : 0/0
  9426 ;;		Unchanged: 0/0
  9427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9428 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9429 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9430 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9431 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9432 ;;Total ram usage:        8 bytes
  9433 ;; Hardware stack levels used:    1
  9434 ;; Hardware stack levels required when called:    3
  9435 ;; This function calls:
  9436 ;;		Nothing
  9437 ;; This function is called by:
  9438 ;;		_I2C1_MasterRead
  9439 ;; This function uses a non-reentrant model
  9440 ;;
  9441                           
  9442                           
  9443                           ;psect for function _I2C1_MasterReadTRBBuild
  9444  147C                     _I2C1_MasterReadTRBBuild:	
  9445                           
  9446                           ;incstack = 0
  9447                           ; Regs used in _I2C1_MasterReadTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
  9448                           ;I2C1_MasterReadTRBBuild@ptrb stored from wreg
  9449  147C  0020               	movlb	0	; select bank0
  9450  147D  00A7               	movwf	I2C1_MasterReadTRBBuild@ptrb
  9451                           
  9452                           ;i2c1.c: 700: ptrb->address = address << 1;
  9453  147E  0824               	movf	I2C1_MasterReadTRBBuild@address+1,w
  9454  147F  00A6               	movwf	??_I2C1_MasterReadTRBBuild+1
  9455  1480  0823               	movf	I2C1_MasterReadTRBBuild@address,w
  9456  1481  00A5               	movwf	??_I2C1_MasterReadTRBBuild
  9457  1482  35A5               	lslf	??_I2C1_MasterReadTRBBuild,f
  9458  1483  0DA6               	rlf	??_I2C1_MasterReadTRBBuild+1,f
  9459  1484  0827               	movf	I2C1_MasterReadTRBBuild@ptrb,w
  9460  1485  0086               	movwf	6
  9461  1486  3001               	movlw	1	; select bank2/3
  9462  1487  0087               	movwf	7
  9463  1488  0825               	movf	??_I2C1_MasterReadTRBBuild,w
  9464  1489  3FC0               	movwi [0]fsr1
  9465  148A  0826               	movf	??_I2C1_MasterReadTRBBuild+1,w
  9466  148B  3FC1               	movwi [1]fsr1
  9467                           
  9468                           ;i2c1.c: 702: ptrb->address |= 0x01;
  9469  148C  0827               	movf	I2C1_MasterReadTRBBuild@ptrb,w
  9470  148D  0086               	movwf	6
  9471  148E  3001               	movlw	1	; select bank2/3
  9472  148F  0087               	movwf	7
  9473  1490  3001               	movlw	1
  9474  1491  0481               	iorwf	1,f
  9475  1492  3141               	addfsr 1,1
  9476  1493  3000               	movlw	0
  9477  1494  0481               	iorwf	1,f
  9478                           
  9479                           ;i2c1.c: 703: ptrb->length = length;
  9480  1495  0822               	movf	I2C1_MasterReadTRBBuild@length,w
  9481  1496  00A5               	movwf	??_I2C1_MasterReadTRBBuild
  9482  1497  0827               	movf	I2C1_MasterReadTRBBuild@ptrb,w
  9483  1498  3E02               	addlw	2
  9484  1499  0086               	movwf	6
  9485  149A  3001               	movlw	1	; select bank2/3
  9486  149B  0087               	movwf	7
  9487  149C  0825               	movf	??_I2C1_MasterReadTRBBuild,w
  9488  149D  0081               	movwf	1
  9489                           
  9490                           ;i2c1.c: 704: ptrb->pbuffer = pdata;
  9491  149E  0827               	movf	I2C1_MasterReadTRBBuild@ptrb,w
  9492  149F  3E03               	addlw	3
  9493  14A0  0086               	movwf	6
  9494  14A1  3001               	movlw	1	; select bank2/3
  9495  14A2  0087               	movwf	7
  9496  14A3  0820               	movf	I2C1_MasterReadTRBBuild@pdata,w
  9497  14A4  3FC0               	movwi [0]fsr1
  9498  14A5  0821               	movf	I2C1_MasterReadTRBBuild@pdata+1,w
  9499  14A6  3FC1               	movwi [1]fsr1
  9500  14A7  0008               	return
  9501  14A8                     __end_of_I2C1_MasterReadTRBBuild:	
  9502                           
  9503                           	psect	text44
  9504  00B0                     __ptext44:	
  9505 ;; *************** function _PROTOCOL_Print_TLV *****************
  9506 ;; Defined at:
  9507 ;;		line 224 in file "protocol.c"
  9508 ;; Parameters:    Size  Location     Type
  9509 ;;  dev_addr        1    wreg     unsigned char 
  9510 ;;  type            1   36[BANK0 ] unsigned char 
  9511 ;;  length          1   37[BANK0 ] unsigned char 
  9512 ;;  pbuffer         1   38[BANK0 ] PTR unsigned char 
  9513 ;;		 -> read_buf(16), NULL(0), 
  9514 ;; Auto vars:     Size  Location     Type
  9515 ;;  dev_addr        1   42[BANK0 ] unsigned char 
  9516 ;;  v               2   43[BANK0 ] int 
  9517 ;; Return value:  Size  Location     Type
  9518 ;;                  1    wreg      void 
  9519 ;; Registers used:
  9520 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9521 ;; Tracked objects:
  9522 ;;		On entry : 0/0
  9523 ;;		On exit  : 0/0
  9524 ;;		Unchanged: 0/0
  9525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9526 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9527 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9528 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9529 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9530 ;;Total ram usage:        9 bytes
  9531 ;; Hardware stack levels used:    1
  9532 ;; Hardware stack levels required when called:    6
  9533 ;; This function calls:
  9534 ;;		___awdiv
  9535 ;;		___awmod
  9536 ;;		_abs
  9537 ;;		_concat
  9538 ;;		_printf
  9539 ;; This function is called by:
  9540 ;;		_sen
  9541 ;; This function uses a non-reentrant model
  9542 ;;
  9543                           
  9544                           
  9545                           ;psect for function _PROTOCOL_Print_TLV
  9546  00B0                     _PROTOCOL_Print_TLV:	
  9547                           
  9548                           ;incstack = 0
  9549                           ; Regs used in _PROTOCOL_Print_TLV: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9550                           ;PROTOCOL_Print_TLV@dev_addr stored from wreg
  9551  00B0  0020               	movlb	0	; select bank0
  9552  00B1  00CA               	movwf	PROTOCOL_Print_TLV@dev_addr
  9553                           
  9554                           ;protocol.c: 225: int16_t v;
  9555                           ;protocol.c: 226: if (dev_addr != 0) printf("%%%d:", dev_addr);
  9556  00B2  084A               	movf	PROTOCOL_Print_TLV@dev_addr,w
  9557  00B3  1903               	btfsc	3,2
  9558  00B4  2B13               	goto	l5232
  9559  00B5  305E               	movlw	low (STR_50| (0+32768))
  9560  00B6  00AE               	movwf	printf@f
  9561  00B7  3091               	movlw	high (STR_50| (0+32768))
  9562  00B8  00AF               	movwf	printf@f+1
  9563  00B9  084A               	movf	PROTOCOL_Print_TLV@dev_addr,w
  9564  00BA  00C7               	movwf	??_PROTOCOL_Print_TLV
  9565  00BB  01C8               	clrf	??_PROTOCOL_Print_TLV+1
  9566  00BC  0847               	movf	??_PROTOCOL_Print_TLV,w
  9567  00BD  00B0               	movwf	?_printf+2
  9568  00BE  0848               	movf	??_PROTOCOL_Print_TLV+1,w
  9569  00BF  00B1               	movwf	?_printf+3
  9570  00C0  318E  262B  3180   	fcall	_printf
  9571                           
  9572                           ;protocol.c: 227: switch(type) {
  9573  00C3  2B13               	goto	l5232
  9574  00C4                     l5140:	
  9575                           ;protocol.c: 228: case 0x01:
  9576                           
  9577                           
  9578                           ;protocol.c: 229: length--;
  9579  00C4  3001               	movlw	1
  9580  00C5  0020               	movlb	0	; select bank0
  9581  00C6  02C5               	subwf	PROTOCOL_Print_TLV@length,f
  9582                           
  9583                           ;protocol.c: 230: printf("UINT8_T:");
  9584  00C7  3039               	movlw	low (STR_51| (0+32768))
  9585  00C8  00AE               	movwf	printf@f
  9586  00C9  3091               	movlw	high (STR_51| (0+32768))
  9587  00CA  00AF               	movwf	printf@f+1
  9588  00CB  318E  262B  3180   	fcall	_printf
  9589                           
  9590                           ;protocol.c: 231: for (i=0; i<length; i++) printf("%u,", pbuffer[i]);
  9591  00CE  0020               	movlb	0	; select bank0
  9592  00CF  01EB               	clrf	_i
  9593  00D0                     l5150:	
  9594  00D0  0845               	movf	PROTOCOL_Print_TLV@length,w
  9595  00D1  026B               	subwf	_i,w
  9596  00D2  1803               	btfsc	3,0
  9597  00D3  28EF               	goto	l5152
  9598  00D4  306D               	movlw	low (STR_52| (0+32768))
  9599  00D5  00AE               	movwf	printf@f
  9600  00D6  3091               	movlw	high (STR_52| (0+32768))
  9601  00D7  00AF               	movwf	printf@f+1
  9602  00D8  086B               	movf	_i,w
  9603  00D9  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  9604  00DA  00C7               	movwf	??_PROTOCOL_Print_TLV
  9605  00DB  0847               	movf	??_PROTOCOL_Print_TLV,w
  9606  00DC  0086               	movwf	6
  9607  00DD  3001               	movlw	1	; select bank2/3
  9608  00DE  0087               	movwf	7
  9609  00DF  0801               	movf	1,w
  9610  00E0  00C8               	movwf	??_PROTOCOL_Print_TLV+1
  9611  00E1  01C9               	clrf	??_PROTOCOL_Print_TLV+2
  9612  00E2  0848               	movf	??_PROTOCOL_Print_TLV+1,w
  9613  00E3  00B0               	movwf	?_printf+2
  9614  00E4  0849               	movf	??_PROTOCOL_Print_TLV+2,w
  9615  00E5  00B1               	movwf	?_printf+3
  9616  00E6  318E  262B  3180   	fcall	_printf
  9617  00E9  3001               	movlw	1
  9618  00EA  0020               	movlb	0	; select bank0
  9619  00EB  00C7               	movwf	??_PROTOCOL_Print_TLV
  9620  00EC  0847               	movf	??_PROTOCOL_Print_TLV,w
  9621  00ED  07EB               	addwf	_i,f
  9622  00EE  28D0               	goto	l5150
  9623  00EF                     l5152:	
  9624                           
  9625                           ;protocol.c: 232: printf("%u\n", pbuffer[i]);
  9626  00EF  3069               	movlw	low (STR_53| (0+32768))
  9627  00F0  00AE               	movwf	printf@f
  9628  00F1  3091               	movlw	high (STR_53| (0+32768))
  9629  00F2  00AF               	movwf	printf@f+1
  9630  00F3  086B               	movf	_i,w
  9631  00F4  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  9632  00F5  00C7               	movwf	??_PROTOCOL_Print_TLV
  9633  00F6  0847               	movf	??_PROTOCOL_Print_TLV,w
  9634  00F7  0086               	movwf	6
  9635  00F8  3001               	movlw	1	; select bank2/3
  9636  00F9  0087               	movwf	7
  9637  00FA  0801               	movf	1,w
  9638  00FB  00C8               	movwf	??_PROTOCOL_Print_TLV+1
  9639  00FC  01C9               	clrf	??_PROTOCOL_Print_TLV+2
  9640  00FD  0848               	movf	??_PROTOCOL_Print_TLV+1,w
  9641  00FE  00B0               	movwf	?_printf+2
  9642  00FF  0849               	movf	??_PROTOCOL_Print_TLV+2,w
  9643  0100  00B1               	movwf	?_printf+3
  9644  0101  318E  262B         	fcall	_printf
  9645                           
  9646                           ;protocol.c: 233: break;
  9647  0103  0008               	return
  9648  0104                     l5154:	
  9649                           ;protocol.c: 234: case 0x02:
  9650                           
  9651                           
  9652                           ;protocol.c: 235: length--;
  9653  0104  3001               	movlw	1
  9654  0105  0020               	movlb	0	; select bank0
  9655  0106  02C5               	subwf	PROTOCOL_Print_TLV@length,f
  9656                           
  9657                           ;protocol.c: 236: printf("INT8_T:");
  9658  0107  303A               	movlw	low ((STR_51+1)| (0+32768))
  9659  0108  00AE               	movwf	printf@f
  9660  0109  3091               	movlw	high ((STR_51+1)| (0+32768))
  9661  010A  00AF               	movwf	printf@f+1
  9662  010B  318E  262B  3180   	fcall	_printf
  9663                           
  9664                           ;protocol.c: 237: for (i=0; i<length; i++) printf("%d,", (int8_t)pbuffer[i]);
  9665  010E  0020               	movlb	0	; select bank0
  9666  010F  01EB               	clrf	_i
  9667  0110                     l5164:	
  9668  0110  0845               	movf	PROTOCOL_Print_TLV@length,w
  9669  0111  026B               	subwf	_i,w
  9670  0112  1803               	btfsc	3,0
  9671  0113  292D               	goto	l5166
  9672  0114  307D               	movlw	low (STR_14| (0+32768))
  9673  0115  00AE               	movwf	printf@f
  9674  0116  3091               	movlw	high (STR_14| (0+32768))
  9675  0117  00AF               	movwf	printf@f+1
  9676  0118  086B               	movf	_i,w
  9677  0119  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  9678  011A  00C7               	movwf	??_PROTOCOL_Print_TLV
  9679  011B  0847               	movf	??_PROTOCOL_Print_TLV,w
  9680  011C  0086               	movwf	6
  9681  011D  3001               	movlw	1	; select bank2/3
  9682  011E  0087               	movwf	7
  9683  011F  0801               	movf	1,w
  9684  0120  00B0               	movwf	?_printf+2
  9685  0121  01B1               	clrf	?_printf+3
  9686  0122  1BB0               	btfsc	?_printf+2,7
  9687  0123  03B1               	decf	?_printf+3,f
  9688  0124  318E  262B  3180   	fcall	_printf
  9689  0127  3001               	movlw	1
  9690  0128  0020               	movlb	0	; select bank0
  9691  0129  00C7               	movwf	??_PROTOCOL_Print_TLV
  9692  012A  0847               	movf	??_PROTOCOL_Print_TLV,w
  9693  012B  07EB               	addwf	_i,f
  9694  012C  2910               	goto	l5164
  9695  012D                     l5166:	
  9696                           
  9697                           ;protocol.c: 238: printf("%d\n", (int8_t)pbuffer[i]);
  9698  012D  30E6               	movlw	low ((STR_49+6)| (0+32768))
  9699  012E  00AE               	movwf	printf@f
  9700  012F  3090               	movlw	high ((STR_49+6)| (0+32768))
  9701  0130  00AF               	movwf	printf@f+1
  9702  0131  086B               	movf	_i,w
  9703  0132  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  9704  0133  00C7               	movwf	??_PROTOCOL_Print_TLV
  9705  0134  0847               	movf	??_PROTOCOL_Print_TLV,w
  9706  0135  0086               	movwf	6
  9707  0136  3001               	movlw	1	; select bank2/3
  9708  0137  0087               	movwf	7
  9709  0138  0801               	movf	1,w
  9710  0139  00B0               	movwf	?_printf+2
  9711  013A  01B1               	clrf	?_printf+3
  9712  013B  1BB0               	btfsc	?_printf+2,7
  9713  013C  03B1               	decf	?_printf+3,f
  9714  013D  318E  262B         	fcall	_printf
  9715                           
  9716                           ;protocol.c: 239: break;
  9717  013F  0008               	return
  9718  0140                     l5168:	
  9719                           ;protocol.c: 240: case 0x03:
  9720                           
  9721                           
  9722                           ;protocol.c: 241: printf("UINT16_T:");
  9723  0140  3012               	movlw	low (STR_57| (0+32768))
  9724  0141  0020               	movlb	0	; select bank0
  9725  0142  00AE               	movwf	printf@f
  9726  0143  3091               	movlw	high (STR_57| (0+32768))
  9727  0144  00AF               	movwf	printf@f+1
  9728  0145  318E  262B  3180   	fcall	_printf
  9729                           
  9730                           ;protocol.c: 242: length = length - 2;
  9731  0148  0020               	movlb	0	; select bank0
  9732  0149  0845               	movf	PROTOCOL_Print_TLV@length,w
  9733  014A  3EFE               	addlw	254
  9734  014B  00C7               	movwf	??_PROTOCOL_Print_TLV
  9735  014C  0847               	movf	??_PROTOCOL_Print_TLV,w
  9736  014D  00C5               	movwf	PROTOCOL_Print_TLV@length
  9737                           
  9738                           ;protocol.c: 243: for(i=0; i<length; i=i+2) printf("%u,", concat(pbuffer[i], pbuffer[i+1
      +                          ]));
  9739  014E  01EB               	clrf	_i
  9740  014F                     l5178:	
  9741  014F  0845               	movf	PROTOCOL_Print_TLV@length,w
  9742  0150  026B               	subwf	_i,w
  9743  0151  1803               	btfsc	3,0
  9744  0152  297D               	goto	l5180
  9745  0153  306D               	movlw	low (STR_52| (0+32768))
  9746  0154  00AE               	movwf	printf@f
  9747  0155  3091               	movlw	high (STR_52| (0+32768))
  9748  0156  00AF               	movwf	printf@f+1
  9749  0157  086B               	movf	_i,w
  9750  0158  3E01               	addlw	1
  9751  0159  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  9752  015A  00C7               	movwf	??_PROTOCOL_Print_TLV
  9753  015B  0847               	movf	??_PROTOCOL_Print_TLV,w
  9754  015C  0086               	movwf	6
  9755  015D  3001               	movlw	1	; select bank2/3
  9756  015E  0087               	movwf	7
  9757  015F  0801               	movf	1,w
  9758  0160  00C8               	movwf	??_PROTOCOL_Print_TLV+1
  9759  0161  0848               	movf	??_PROTOCOL_Print_TLV+1,w
  9760  0162  00A0               	movwf	concat@lsb
  9761  0163  086B               	movf	_i,w
  9762  0164  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  9763  0165  00C9               	movwf	??_PROTOCOL_Print_TLV+2
  9764  0166  0849               	movf	??_PROTOCOL_Print_TLV+2,w
  9765  0167  0086               	movwf	6
  9766  0168  3001               	movlw	1	; select bank2/3
  9767  0169  0087               	movwf	7
  9768  016A  0801               	movf	1,w
  9769  016B  3192  2247  3180   	fcall	_concat
  9770  016E  0020               	movlb	0	; select bank0
  9771  016F  0821               	movf	?_concat+1,w
  9772  0170  00B1               	movwf	?_printf+3
  9773  0171  0820               	movf	?_concat,w
  9774  0172  00B0               	movwf	?_printf+2
  9775  0173  318E  262B  3180   	fcall	_printf
  9776  0176  0020               	movlb	0	; select bank0
  9777  0177  086B               	movf	_i,w
  9778  0178  3E02               	addlw	2
  9779  0179  00C7               	movwf	??_PROTOCOL_Print_TLV
  9780  017A  0847               	movf	??_PROTOCOL_Print_TLV,w
  9781  017B  00EB               	movwf	_i
  9782  017C  294F               	goto	l5178
  9783  017D                     l5180:	
  9784                           
  9785                           ;protocol.c: 244: printf("%u\n", concat(pbuffer[i], pbuffer[i+1]));
  9786  017D  3069               	movlw	low (STR_53| (0+32768))
  9787  017E  00AE               	movwf	printf@f
  9788  017F  3091               	movlw	high (STR_53| (0+32768))
  9789  0180  00AF               	movwf	printf@f+1
  9790  0181  086B               	movf	_i,w
  9791  0182  3E01               	addlw	1
  9792  0183  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  9793  0184  00C7               	movwf	??_PROTOCOL_Print_TLV
  9794  0185  0847               	movf	??_PROTOCOL_Print_TLV,w
  9795  0186  0086               	movwf	6
  9796  0187  3001               	movlw	1	; select bank2/3
  9797  0188  0087               	movwf	7
  9798  0189  0801               	movf	1,w
  9799  018A  00C8               	movwf	??_PROTOCOL_Print_TLV+1
  9800  018B  0848               	movf	??_PROTOCOL_Print_TLV+1,w
  9801  018C  00A0               	movwf	concat@lsb
  9802  018D  086B               	movf	_i,w
  9803  018E  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  9804  018F  00C9               	movwf	??_PROTOCOL_Print_TLV+2
  9805  0190  0849               	movf	??_PROTOCOL_Print_TLV+2,w
  9806  0191  0086               	movwf	6
  9807  0192  3001               	movlw	1	; select bank2/3
  9808  0193  0087               	movwf	7
  9809  0194  0801               	movf	1,w
  9810  0195  3192  2247  3180   	fcall	_concat
  9811  0198  0020               	movlb	0	; select bank0
  9812  0199  0821               	movf	?_concat+1,w
  9813  019A  00B1               	movwf	?_printf+3
  9814  019B  0820               	movf	?_concat,w
  9815  019C  00B0               	movwf	?_printf+2
  9816  019D  318E  262B         	fcall	_printf
  9817                           
  9818                           ;protocol.c: 245: break;
  9819  019F  0008               	return
  9820  01A0                     l5182:	
  9821                           ;protocol.c: 246: case 0x04:
  9822                           
  9823                           
  9824                           ;protocol.c: 247: printf("INT16_T:");
  9825  01A0  3013               	movlw	low ((STR_57+1)| (0+32768))
  9826  01A1  0020               	movlb	0	; select bank0
  9827  01A2  00AE               	movwf	printf@f
  9828  01A3  3091               	movlw	high ((STR_57+1)| (0+32768))
  9829  01A4  00AF               	movwf	printf@f+1
  9830  01A5  318E  262B  3180   	fcall	_printf
  9831                           
  9832                           ;protocol.c: 248: length = length - 2;
  9833  01A8  0020               	movlb	0	; select bank0
  9834  01A9  0845               	movf	PROTOCOL_Print_TLV@length,w
  9835  01AA  3EFE               	addlw	254
  9836  01AB  00C7               	movwf	??_PROTOCOL_Print_TLV
  9837  01AC  0847               	movf	??_PROTOCOL_Print_TLV,w
  9838  01AD  00C5               	movwf	PROTOCOL_Print_TLV@length
  9839                           
  9840                           ;protocol.c: 249: for(i=0; i<length; i=i+2) printf("%d,", (int16_t)(concat(pbuffer[i], p
      +                          buffer[i+1])));
  9841  01AE  01EB               	clrf	_i
  9842  01AF                     l5192:	
  9843  01AF  0845               	movf	PROTOCOL_Print_TLV@length,w
  9844  01B0  026B               	subwf	_i,w
  9845  01B1  1803               	btfsc	3,0
  9846  01B2  29DD               	goto	l5194
  9847  01B3  307D               	movlw	low (STR_14| (0+32768))
  9848  01B4  00AE               	movwf	printf@f
  9849  01B5  3091               	movlw	high (STR_14| (0+32768))
  9850  01B6  00AF               	movwf	printf@f+1
  9851  01B7  086B               	movf	_i,w
  9852  01B8  3E01               	addlw	1
  9853  01B9  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  9854  01BA  00C7               	movwf	??_PROTOCOL_Print_TLV
  9855  01BB  0847               	movf	??_PROTOCOL_Print_TLV,w
  9856  01BC  0086               	movwf	6
  9857  01BD  3001               	movlw	1	; select bank2/3
  9858  01BE  0087               	movwf	7
  9859  01BF  0801               	movf	1,w
  9860  01C0  00C8               	movwf	??_PROTOCOL_Print_TLV+1
  9861  01C1  0848               	movf	??_PROTOCOL_Print_TLV+1,w
  9862  01C2  00A0               	movwf	concat@lsb
  9863  01C3  086B               	movf	_i,w
  9864  01C4  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  9865  01C5  00C9               	movwf	??_PROTOCOL_Print_TLV+2
  9866  01C6  0849               	movf	??_PROTOCOL_Print_TLV+2,w
  9867  01C7  0086               	movwf	6
  9868  01C8  3001               	movlw	1	; select bank2/3
  9869  01C9  0087               	movwf	7
  9870  01CA  0801               	movf	1,w
  9871  01CB  3192  2247  3180   	fcall	_concat
  9872  01CE  0020               	movlb	0	; select bank0
  9873  01CF  0821               	movf	?_concat+1,w
  9874  01D0  00B1               	movwf	?_printf+3
  9875  01D1  0820               	movf	?_concat,w
  9876  01D2  00B0               	movwf	?_printf+2
  9877  01D3  318E  262B  3180   	fcall	_printf
  9878  01D6  0020               	movlb	0	; select bank0
  9879  01D7  086B               	movf	_i,w
  9880  01D8  3E02               	addlw	2
  9881  01D9  00C7               	movwf	??_PROTOCOL_Print_TLV
  9882  01DA  0847               	movf	??_PROTOCOL_Print_TLV,w
  9883  01DB  00EB               	movwf	_i
  9884  01DC  29AF               	goto	l5192
  9885  01DD                     l5194:	
  9886                           
  9887                           ;protocol.c: 250: printf("%d\n", (int16_t)(concat(pbuffer[i], pbuffer[i+1])));
  9888  01DD  30E6               	movlw	low ((STR_49+6)| (0+32768))
  9889  01DE  00AE               	movwf	printf@f
  9890  01DF  3090               	movlw	high ((STR_49+6)| (0+32768))
  9891  01E0  00AF               	movwf	printf@f+1
  9892  01E1  086B               	movf	_i,w
  9893  01E2  3E01               	addlw	1
  9894  01E3  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  9895  01E4  00C7               	movwf	??_PROTOCOL_Print_TLV
  9896  01E5  0847               	movf	??_PROTOCOL_Print_TLV,w
  9897  01E6  0086               	movwf	6
  9898  01E7  3001               	movlw	1	; select bank2/3
  9899  01E8  0087               	movwf	7
  9900  01E9  0801               	movf	1,w
  9901  01EA  00C8               	movwf	??_PROTOCOL_Print_TLV+1
  9902  01EB  0848               	movf	??_PROTOCOL_Print_TLV+1,w
  9903  01EC  00A0               	movwf	concat@lsb
  9904  01ED  086B               	movf	_i,w
  9905  01EE  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  9906  01EF  00C9               	movwf	??_PROTOCOL_Print_TLV+2
  9907  01F0  0849               	movf	??_PROTOCOL_Print_TLV+2,w
  9908  01F1  0086               	movwf	6
  9909  01F2  3001               	movlw	1	; select bank2/3
  9910  01F3  0087               	movwf	7
  9911  01F4  0801               	movf	1,w
  9912  01F5  3192  2247  3180   	fcall	_concat
  9913  01F8  0020               	movlb	0	; select bank0
  9914  01F9  0821               	movf	?_concat+1,w
  9915  01FA  00B1               	movwf	?_printf+3
  9916  01FB  0820               	movf	?_concat,w
  9917  01FC  00B0               	movwf	?_printf+2
  9918  01FD  318E  262B         	fcall	_printf
  9919                           
  9920                           ;protocol.c: 251: break;
  9921  01FF  0008               	return
  9922  0200                     l5196:	
  9923                           ;protocol.c: 252: case 0x05:
  9924                           
  9925                           
  9926                           ;protocol.c: 253: printf("FLOAT:");
  9927  0200  3042               	movlw	low (STR_63| (0+32768))
  9928  0201  0020               	movlb	0	; select bank0
  9929  0202  00AE               	movwf	printf@f
  9930  0203  3091               	movlw	high (STR_63| (0+32768))
  9931  0204  00AF               	movwf	printf@f+1
  9932  0205  318E  262B  3180   	fcall	_printf
  9933                           
  9934                           ;protocol.c: 254: length = length - 2;
  9935  0208  0020               	movlb	0	; select bank0
  9936  0209  0845               	movf	PROTOCOL_Print_TLV@length,w
  9937  020A  3EFE               	addlw	254
  9938  020B  00C7               	movwf	??_PROTOCOL_Print_TLV
  9939  020C  0847               	movf	??_PROTOCOL_Print_TLV,w
  9940  020D  00C5               	movwf	PROTOCOL_Print_TLV@length
  9941                           
  9942                           ;protocol.c: 255: for (i=0; i<length; i=i+2) {
  9943  020E  01EB               	clrf	_i
  9944  020F                     l5214:	
  9945  020F  0845               	movf	PROTOCOL_Print_TLV@length,w
  9946  0210  026B               	subwf	_i,w
  9947  0211  1803               	btfsc	3,0
  9948  0212  2A79               	goto	l5216
  9949                           
  9950                           ;protocol.c: 256: v = (int16_t)(concat(pbuffer[i], pbuffer[i+1]));
  9951  0213  086B               	movf	_i,w
  9952  0214  3E01               	addlw	1
  9953  0215  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  9954  0216  00C7               	movwf	??_PROTOCOL_Print_TLV
  9955  0217  0847               	movf	??_PROTOCOL_Print_TLV,w
  9956  0218  0086               	movwf	6
  9957  0219  3001               	movlw	1	; select bank2/3
  9958  021A  0087               	movwf	7
  9959  021B  0801               	movf	1,w
  9960  021C  00C8               	movwf	??_PROTOCOL_Print_TLV+1
  9961  021D  0848               	movf	??_PROTOCOL_Print_TLV+1,w
  9962  021E  00A0               	movwf	concat@lsb
  9963  021F  086B               	movf	_i,w
  9964  0220  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  9965  0221  00C9               	movwf	??_PROTOCOL_Print_TLV+2
  9966  0222  0849               	movf	??_PROTOCOL_Print_TLV+2,w
  9967  0223  0086               	movwf	6
  9968  0224  3001               	movlw	1	; select bank2/3
  9969  0225  0087               	movwf	7
  9970  0226  0801               	movf	1,w
  9971  0227  3192  2247  3180   	fcall	_concat
  9972  022A  0020               	movlb	0	; select bank0
  9973  022B  0821               	movf	?_concat+1,w
  9974  022C  00CC               	movwf	PROTOCOL_Print_TLV@v+1
  9975  022D  0820               	movf	?_concat,w
  9976  022E  00CB               	movwf	PROTOCOL_Print_TLV@v
  9977                           
  9978                           ;protocol.c: 257: if (v <= -100 || v >= 0) {
  9979  022F  084C               	movf	PROTOCOL_Print_TLV@v+1,w
  9980  0230  3A80               	xorlw	128
  9981  0231  00C7               	movwf	??_PROTOCOL_Print_TLV
  9982  0232  307F               	movlw	127
  9983  0233  0247               	subwf	??_PROTOCOL_Print_TLV,w
  9984  0234  1D03               	skipz
  9985  0235  2A38               	goto	u5885
  9986  0236  309D               	movlw	157
  9987  0237  024B               	subwf	PROTOCOL_Print_TLV@v,w
  9988  0238                     u5885:	
  9989  0238  1C03               	skipc
  9990  0239  2A3D               	goto	l5208
  9991  023A  0020               	movlb	0	; select bank0
  9992  023B  1BCC               	btfsc	PROTOCOL_Print_TLV@v+1,7
  9993  023C  2A42               	goto	l5210
  9994  023D                     l5208:	
  9995                           
  9996                           ;protocol.c: 258: printf("%d.%02d,", v/100, abs(v%100));
  9997  023D  3009               	movlw	low ((STR_65+1)| (0+32768))
  9998  023E  0020               	movlb	0	; select bank0
  9999  023F  00AE               	movwf	printf@f
 10000  0240  3091               	movlw	high ((STR_65+1)| (0+32768))
 10001  0241  2A46               	goto	L13
 10002  0242                     l5210:	
 10003                           ;protocol.c: 259: } else {
 10004                           
 10005                           
 10006                           ;protocol.c: 260: printf("-%d.%02d,", v/100, abs(v%100));
 10007  0242  3008               	movlw	low (STR_65| (0+32768))
 10008  0243  0020               	movlb	0	; select bank0
 10009  0244  00AE               	movwf	printf@f
 10010  0245  3091               	movlw	high (STR_65| (0+32768))
 10011  0246                     L13:	
 10012  0246  00AF               	movwf	printf@f+1
 10013  0247  3064               	movlw	100
 10014  0248  00A0               	movwf	___awdiv@divisor
 10015  0249  3000               	movlw	0
 10016  024A  00A1               	movwf	___awdiv@divisor+1
 10017  024B  084C               	movf	PROTOCOL_Print_TLV@v+1,w
 10018  024C  00A3               	movwf	___awdiv@dividend+1
 10019  024D  084B               	movf	PROTOCOL_Print_TLV@v,w
 10020  024E  00A2               	movwf	___awdiv@dividend
 10021  024F  3188  2078  3180   	fcall	___awdiv
 10022  0252  0020               	movlb	0	; select bank0
 10023  0253  0821               	movf	?___awdiv+1,w
 10024  0254  00B1               	movwf	?_printf+3
 10025  0255  0820               	movf	?___awdiv,w
 10026  0256  00B0               	movwf	?_printf+2
 10027  0257  3064               	movlw	100
 10028  0258  00A0               	movwf	___awmod@divisor
 10029  0259  3000               	movlw	0
 10030  025A  00A1               	movwf	___awmod@divisor+1
 10031  025B  084C               	movf	PROTOCOL_Print_TLV@v+1,w
 10032  025C  00A3               	movwf	___awmod@dividend+1
 10033  025D  084B               	movf	PROTOCOL_Print_TLV@v,w
 10034  025E  00A2               	movwf	___awmod@dividend
 10035  025F  3195  25F2  3180   	fcall	___awmod
 10036  0262  0020               	movlb	0	; select bank0
 10037  0263  0821               	movf	?___awmod+1,w
 10038  0264  00A8               	movwf	abs@a+1
 10039  0265  0820               	movf	?___awmod,w
 10040  0266  00A7               	movwf	abs@a
 10041  0267  3192  2217  3180   	fcall	_abs
 10042  026A  0020               	movlb	0	; select bank0
 10043  026B  0828               	movf	?_abs+1,w
 10044  026C  00B3               	movwf	?_printf+5
 10045  026D  0827               	movf	?_abs,w
 10046  026E  00B2               	movwf	?_printf+4
 10047  026F  318E  262B  3180   	fcall	_printf
 10048  0272  0020               	movlb	0	; select bank0
 10049  0273  086B               	movf	_i,w
 10050  0274  3E02               	addlw	2
 10051  0275  00C7               	movwf	??_PROTOCOL_Print_TLV
 10052  0276  0847               	movf	??_PROTOCOL_Print_TLV,w
 10053  0277  00EB               	movwf	_i
 10054  0278  2A0F               	goto	l5214
 10055  0279                     l5216:	
 10056                           
 10057                           ;protocol.c: 261: }
 10058                           ;protocol.c: 262: }
 10059                           ;protocol.c: 263: v = (int16_t)(concat(pbuffer[i], pbuffer[i+1]));
 10060  0279  086B               	movf	_i,w
 10061  027A  3E01               	addlw	1
 10062  027B  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
 10063  027C  00C7               	movwf	??_PROTOCOL_Print_TLV
 10064  027D  0847               	movf	??_PROTOCOL_Print_TLV,w
 10065  027E  0086               	movwf	6
 10066  027F  3001               	movlw	1	; select bank2/3
 10067  0280  0087               	movwf	7
 10068  0281  0801               	movf	1,w
 10069  0282  00C8               	movwf	??_PROTOCOL_Print_TLV+1
 10070  0283  0848               	movf	??_PROTOCOL_Print_TLV+1,w
 10071  0284  00A0               	movwf	concat@lsb
 10072  0285  086B               	movf	_i,w
 10073  0286  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
 10074  0287  00C9               	movwf	??_PROTOCOL_Print_TLV+2
 10075  0288  0849               	movf	??_PROTOCOL_Print_TLV+2,w
 10076  0289  0086               	movwf	6
 10077  028A  3001               	movlw	1	; select bank2/3
 10078  028B  0087               	movwf	7
 10079  028C  0801               	movf	1,w
 10080  028D  3192  2247  3180   	fcall	_concat
 10081  0290  0020               	movlb	0	; select bank0
 10082  0291  0821               	movf	?_concat+1,w
 10083  0292  00CC               	movwf	PROTOCOL_Print_TLV@v+1
 10084  0293  0820               	movf	?_concat,w
 10085  0294  00CB               	movwf	PROTOCOL_Print_TLV@v
 10086                           
 10087                           ;protocol.c: 264: if (v <= -100 || v >= 0) {
 10088  0295  084C               	movf	PROTOCOL_Print_TLV@v+1,w
 10089  0296  3A80               	xorlw	128
 10090  0297  00C7               	movwf	??_PROTOCOL_Print_TLV
 10091  0298  307F               	movlw	127
 10092  0299  0247               	subwf	??_PROTOCOL_Print_TLV,w
 10093  029A  1D03               	skipz
 10094  029B  2A9E               	goto	u5915
 10095  029C  309D               	movlw	157
 10096  029D  024B               	subwf	PROTOCOL_Print_TLV@v,w
 10097  029E                     u5915:	
 10098  029E  1C03               	skipc
 10099  029F  2AA3               	goto	l5222
 10100  02A0  0020               	movlb	0	; select bank0
 10101  02A1  1BCC               	btfsc	PROTOCOL_Print_TLV@v+1,7
 10102  02A2  2AD3               	goto	l5224
 10103  02A3                     l5222:	
 10104                           
 10105                           ;protocol.c: 265: printf("%d.%02d\n", v/100, abs(v%100));
 10106  02A3  30EB               	movlw	low ((STR_67+1)| (0+32768))
 10107  02A4  0020               	movlb	0	; select bank0
 10108  02A5  00AE               	movwf	printf@f
 10109  02A6  3090               	movlw	high ((STR_67+1)| (0+32768))
 10110  02A7  00AF               	movwf	printf@f+1
 10111  02A8  3064               	movlw	100
 10112  02A9  00A0               	movwf	___awdiv@divisor
 10113  02AA  3000               	movlw	0
 10114  02AB  00A1               	movwf	___awdiv@divisor+1
 10115  02AC  084C               	movf	PROTOCOL_Print_TLV@v+1,w
 10116  02AD  00A3               	movwf	___awdiv@dividend+1
 10117  02AE  084B               	movf	PROTOCOL_Print_TLV@v,w
 10118  02AF  00A2               	movwf	___awdiv@dividend
 10119  02B0  3188  2078  3180   	fcall	___awdiv
 10120  02B3  0020               	movlb	0	; select bank0
 10121  02B4  0821               	movf	?___awdiv+1,w
 10122  02B5  00B1               	movwf	?_printf+3
 10123  02B6  0820               	movf	?___awdiv,w
 10124  02B7  00B0               	movwf	?_printf+2
 10125  02B8  3064               	movlw	100
 10126  02B9  00A0               	movwf	___awmod@divisor
 10127  02BA  3000               	movlw	0
 10128  02BB  00A1               	movwf	___awmod@divisor+1
 10129  02BC  084C               	movf	PROTOCOL_Print_TLV@v+1,w
 10130  02BD  00A3               	movwf	___awmod@dividend+1
 10131  02BE  084B               	movf	PROTOCOL_Print_TLV@v,w
 10132  02BF  00A2               	movwf	___awmod@dividend
 10133  02C0  3195  25F2  3180   	fcall	___awmod
 10134  02C3  0020               	movlb	0	; select bank0
 10135  02C4  0821               	movf	?___awmod+1,w
 10136  02C5  00A8               	movwf	abs@a+1
 10137  02C6  0820               	movf	?___awmod,w
 10138  02C7  00A7               	movwf	abs@a
 10139  02C8  3192  2217  3180   	fcall	_abs
 10140  02CB  0020               	movlb	0	; select bank0
 10141  02CC  0828               	movf	?_abs+1,w
 10142  02CD  00B3               	movwf	?_printf+5
 10143  02CE  0827               	movf	?_abs,w
 10144  02CF  00B2               	movwf	?_printf+4
 10145  02D0  318E  262B         	fcall	_printf
 10146                           
 10147                           ;protocol.c: 266: } else {
 10148  02D2  0008               	return
 10149  02D3                     l5224:	
 10150                           
 10151                           ;protocol.c: 267: printf("-%d.%02d\n", v/100, abs(v%100));
 10152  02D3  30EA               	movlw	low (STR_67| (0+32768))
 10153  02D4  0020               	movlb	0	; select bank0
 10154  02D5  00AE               	movwf	printf@f
 10155  02D6  3090               	movlw	high (STR_67| (0+32768))
 10156  02D7  00AF               	movwf	printf@f+1
 10157  02D8  3064               	movlw	100
 10158  02D9  00A0               	movwf	___awdiv@divisor
 10159  02DA  3000               	movlw	0
 10160  02DB  00A1               	movwf	___awdiv@divisor+1
 10161  02DC  084C               	movf	PROTOCOL_Print_TLV@v+1,w
 10162  02DD  00A3               	movwf	___awdiv@dividend+1
 10163  02DE  084B               	movf	PROTOCOL_Print_TLV@v,w
 10164  02DF  00A2               	movwf	___awdiv@dividend
 10165  02E0  3188  2078  3180   	fcall	___awdiv
 10166  02E3  0020               	movlb	0	; select bank0
 10167  02E4  0821               	movf	?___awdiv+1,w
 10168  02E5  00B1               	movwf	?_printf+3
 10169  02E6  0820               	movf	?___awdiv,w
 10170  02E7  00B0               	movwf	?_printf+2
 10171  02E8  3064               	movlw	100
 10172  02E9  00A0               	movwf	___awmod@divisor
 10173  02EA  3000               	movlw	0
 10174  02EB  00A1               	movwf	___awmod@divisor+1
 10175  02EC  084C               	movf	PROTOCOL_Print_TLV@v+1,w
 10176  02ED  00A3               	movwf	___awmod@dividend+1
 10177  02EE  084B               	movf	PROTOCOL_Print_TLV@v,w
 10178  02EF  00A2               	movwf	___awmod@dividend
 10179  02F0  3195  25F2  3180   	fcall	___awmod
 10180  02F3  0020               	movlb	0	; select bank0
 10181  02F4  0821               	movf	?___awmod+1,w
 10182  02F5  00A8               	movwf	abs@a+1
 10183  02F6  0820               	movf	?___awmod,w
 10184  02F7  00A7               	movwf	abs@a
 10185  02F8  3192  2217  3180   	fcall	_abs
 10186  02FB  0020               	movlb	0	; select bank0
 10187  02FC  0828               	movf	?_abs+1,w
 10188  02FD  00B3               	movwf	?_printf+5
 10189  02FE  0827               	movf	?_abs,w
 10190  02FF  00B2               	movwf	?_printf+4
 10191  0300  318E  262B         	fcall	_printf
 10192                           
 10193                           ;protocol.c: 268: }
 10194                           ;protocol.c: 269: break;
 10195  0302  0008               	return
 10196  0303                     l5226:	
 10197                           ;protocol.c: 270: case 0x06:
 10198                           
 10199                           
 10200                           ;protocol.c: 271: printf("NO_DATA\n");
 10201  0303  3030               	movlw	low (STR_68| (0+32768))
 10202  0304  0020               	movlb	0	; select bank0
 10203  0305  00AE               	movwf	printf@f
 10204  0306  3091               	movlw	high (STR_68| (0+32768))
 10205  0307  00AF               	movwf	printf@f+1
 10206  0308  318E  262B         	fcall	_printf
 10207                           
 10208                           ;protocol.c: 272: break;
 10209  030A  0008               	return
 10210  030B                     l5228:	
 10211                           ;protocol.c: 273: default:
 10212                           
 10213                           
 10214                           ;protocol.c: 274: printf("ILLEGAL_TYPE\n");
 10215  030B  30AF               	movlw	low (STR_69| (0+32768))
 10216  030C  0020               	movlb	0	; select bank0
 10217  030D  00AE               	movwf	printf@f
 10218  030E  3090               	movlw	high (STR_69| (0+32768))
 10219  030F  00AF               	movwf	printf@f+1
 10220  0310  318E  262B         	fcall	_printf
 10221                           
 10222                           ;protocol.c: 276: }
 10223                           
 10224                           ;protocol.c: 275: break;
 10225  0312  0008               	return
 10226  0313                     l5232:	
 10227  0313  0020               	movlb	0	; select bank0
 10228  0314  0844               	movf	PROTOCOL_Print_TLV@type,w
 10229                           
 10230                           ; Switch size 1, requested type "space"
 10231                           ; Number of cases is 6, Range of values is 1 to 6
 10232                           ; switch strategies available:
 10233                           ; Name         Instructions Cycles
 10234                           ; simple_byte           19    10 (average)
 10235                           ; direct_byte           21     9 (fixed)
 10236                           ; jumptable            263     9 (fixed)
 10237                           ;	Chosen strategy is simple_byte
 10238  0315  3A01               	xorlw	1	; case 1
 10239  0316  1903               	skipnz
 10240  0317  28C4               	goto	l5140
 10241  0318  3A03               	xorlw	3	; case 2
 10242  0319  1903               	skipnz
 10243  031A  2904               	goto	l5154
 10244  031B  3A01               	xorlw	1	; case 3
 10245  031C  1903               	skipnz
 10246  031D  2940               	goto	l5168
 10247  031E  3A07               	xorlw	7	; case 4
 10248  031F  1903               	skipnz
 10249  0320  29A0               	goto	l5182
 10250  0321  3A01               	xorlw	1	; case 5
 10251  0322  1903               	skipnz
 10252  0323  2A00               	goto	l5196
 10253  0324  3A03               	xorlw	3	; case 6
 10254  0325  1903               	skipnz
 10255  0326  2B03               	goto	l5226
 10256  0327  2B0B               	goto	l5228
 10257  0328  0008               	return
 10258  0329                     __end_of_PROTOCOL_Print_TLV:	
 10259                           
 10260                           	psect	text45
 10261  0E2B                     __ptext45:	
 10262 ;; *************** function _printf *****************
 10263 ;; Defined at:
 10264 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
 10265 ;; Parameters:    Size  Location     Type
 10266 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 10267 ;;		 -> STR_81(10), STR_80(9), STR_79(10), STR_78(9), 
 10268 ;;		 -> STR_77(4), STR_76(4), STR_75(4), STR_74(4), 
 10269 ;;		 -> STR_73(4), STR_72(4), STR_71(4), STR_70(4), 
 10270 ;;		 -> STR_69(14), STR_68(9), STR_67(10), STR_66(9), 
 10271 ;;		 -> STR_65(10), STR_64(9), STR_63(7), STR_62(4), 
 10272 ;;		 -> STR_61(4), STR_60(9), STR_59(4), STR_58(4), 
 10273 ;;		 -> STR_57(10), STR_56(4), STR_55(4), STR_54(8), 
 10274 ;;		 -> STR_53(4), STR_52(4), STR_51(9), STR_50(6), 
 10275 ;;		 -> STR_49(10), STR_46(10), STR_42(10), STR_38(10), 
 10276 ;;		 -> STR_36(5), STR_31(4), STR_30(4), STR_29(4), 
 10277 ;;		 -> STR_28(7), STR_25(26), STR_23(26), STR_19(22), 
 10278 ;;		 -> STR_18(22), STR_17(26), STR_16(22), STR_15(4), 
 10279 ;;		 -> STR_14(4), STR_13(7), STR_12(25), STR_11(10), 
 10280 ;;		 -> STR_8(12), STR_7(11), STR_3(12), STR_2(10), 
 10281 ;; Auto vars:     Size  Location     Type
 10282 ;;  tmpval          4    0        struct .
 10283 ;;  width           2   33[BANK0 ] int 
 10284 ;;  len             2   30[BANK0 ] unsigned int 
 10285 ;;  val             2   28[BANK0 ] unsigned int 
 10286 ;;  cp              2   25[BANK0 ] PTR const unsigned char 
 10287 ;;		 -> STR_43(4), buf(48), STR_35(7), ROM(8192), 
 10288 ;;		 -> printf@c(1), STR_34(17), I2C1_ISR@i2c_address(2), 
 10289 ;;  c               1   35[BANK0 ] char 
 10290 ;;  flag            1   32[BANK0 ] unsigned char 
 10291 ;;  ap              1   27[BANK0 ] PTR void [1]
 10292 ;;		 -> ?_printf(2), 
 10293 ;;  prec            1   24[BANK0 ] char 
 10294 ;; Return value:  Size  Location     Type
 10295 ;;                  2   14[BANK0 ] int 
 10296 ;; Registers used:
 10297 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10298 ;; Tracked objects:
 10299 ;;		On entry : 0/0
 10300 ;;		On exit  : 0/0
 10301 ;;		Unchanged: 0/0
 10302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10303 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10304 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10305 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10306 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10307 ;;Total ram usage:       22 bytes
 10308 ;; Hardware stack levels used:    1
 10309 ;; Hardware stack levels required when called:    5
 10310 ;; This function calls:
 10311 ;;		___lwdiv
 10312 ;;		___lwmod
 10313 ;;		___wmul
 10314 ;;		_isdigit
 10315 ;;		_putch
 10316 ;; This function is called by:
 10317 ;;		_exec_remote_cmd
 10318 ;;		_print_dev_map
 10319 ;;		_one_shot_sen
 10320 ;;		_fetch
 10321 ;;		_command_handler
 10322 ;;		_PROTOCOL_Loop
 10323 ;;		_PROTOCOL_Print_TLV
 10324 ;; This function uses a non-reentrant model
 10325 ;;
 10326                           
 10327                           
 10328                           ;psect for function _printf
 10329  0E2B                     _printf:	
 10330                           
 10331                           ;doprnt.c: 466: va_list ap;
 10332                           ;doprnt.c: 499: signed char c;
 10333                           ;doprnt.c: 501: int width;
 10334                           ;doprnt.c: 506: signed char prec;
 10335                           ;doprnt.c: 508: unsigned char flag;
 10336                           ;doprnt.c: 523: union {
 10337                           ;doprnt.c: 524: unsigned long vd;
 10338                           ;doprnt.c: 525: double integ;
 10339                           ;doprnt.c: 526: } tmpval;
 10340                           ;doprnt.c: 528: unsigned int val;
 10341                           ;doprnt.c: 529: unsigned len;
 10342                           ;doprnt.c: 530: const char * cp;
 10343                           ;doprnt.c: 533: *ap = __va_start();
 10344                           
 10345                           ;incstack = 0
 10346                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10347  0E2B  3030               	movlw	(low ((?_printf| 0+2)))& (0+255)
 10348  0E2C  0020               	movlb	0	; select bank0
 10349  0E2D  00B4               	movwf	??_printf
 10350  0E2E  0834               	movf	??_printf,w
 10351  0E2F  00BB               	movwf	printf@ap
 10352  0E30                     l4998:	
 10353                           ;doprnt.c: 536: while(c = *f++) {
 10354                           
 10355  0E30  0020               	movlb	0	; select bank0
 10356  0E31  082F               	movf	printf@f+1,w
 10357  0E32  00B5               	movwf	??_printf+1
 10358  0E33  082E               	movf	printf@f,w
 10359  0E34  00B4               	movwf	??_printf
 10360  0E35  0AAE               	incf	printf@f,f
 10361  0E36  1903               	skipnz
 10362  0E37  0AAF               	incf	printf@f+1,f
 10363  0E38  0834               	movf	??_printf,w
 10364  0E39  0084               	movwf	4
 10365  0E3A  0835               	movf	??_printf+1,w
 10366  0E3B  0085               	movwf	5
 10367  0E3C  0800               	movf	0,w	;code access
 10368  0E3D  00B6               	movwf	??_printf+2
 10369  0E3E  0836               	movf	??_printf+2,w
 10370  0E3F  00C3               	movwf	printf@c
 10371  0E40  0843               	movf	printf@c,w
 10372  0E41  1903               	btfsc	3,2
 10373  0E42  0008               	return
 10374                           
 10375                           ;doprnt.c: 538: if(c != '%')
 10376  0E43  3025               	movlw	37
 10377  0E44  0643               	xorwf	printf@c,w
 10378  0E45  1903               	btfsc	3,2
 10379  0E46  2E4C               	goto	l4874
 10380                           
 10381                           ;doprnt.c: 540: {
 10382                           ;doprnt.c: 541: (putch(c) );
 10383  0E47  0843               	movf	printf@c,w
 10384  0E48  319F  27D9  318E   	fcall	_putch
 10385                           
 10386                           ;doprnt.c: 542: continue;
 10387  0E4B  2E30               	goto	l4998
 10388  0E4C                     l4874:	
 10389                           
 10390                           ;doprnt.c: 543: }
 10391                           ;doprnt.c: 546: width = 0;
 10392  0E4C  0020               	movlb	0	; select bank0
 10393  0E4D  01C1               	clrf	printf@width
 10394  0E4E  01C2               	clrf	printf@width+1
 10395                           
 10396                           ;doprnt.c: 548: flag = 0;
 10397  0E4F  01C0               	clrf	printf@flag
 10398                           
 10399                           ;doprnt.c: 551: switch(*f) {
 10400                           
 10401                           ;doprnt.c: 550: for(;;) {
 10402  0E50  2E56               	goto	l4880
 10403  0E51                     l665:	
 10404                           ;doprnt.c: 579: case '0':
 10405                           
 10406                           
 10407                           ;doprnt.c: 580: flag |= 0x04;
 10408  0E51  1540               	bsf	printf@flag,2
 10409                           
 10410                           ;doprnt.c: 581: f++;
 10411  0E52  3001               	movlw	1
 10412  0E53  07AE               	addwf	printf@f,f
 10413  0E54  3000               	movlw	0
 10414  0E55  3DAF               	addwfc	printf@f+1,f
 10415  0E56                     l4880:	
 10416                           ;doprnt.c: 584: }
 10417                           
 10418                           ;doprnt.c: 582: continue;
 10419                           
 10420  0E56  082E               	movf	printf@f,w
 10421  0E57  0084               	movwf	4
 10422  0E58  082F               	movf	printf@f+1,w
 10423  0E59  0085               	movwf	5
 10424  0E5A  0800               	movf	0,w	;code access
 10425                           
 10426                           ; Switch size 1, requested type "space"
 10427                           ; Number of cases is 1, Range of values is 48 to 48
 10428                           ; switch strategies available:
 10429                           ; Name         Instructions Cycles
 10430                           ; simple_byte            4     3 (average)
 10431                           ; direct_byte           11     9 (fixed)
 10432                           ; jumptable            263     9 (fixed)
 10433                           ;	Chosen strategy is simple_byte
 10434  0E5B  3A30               	xorlw	48	; case 48
 10435  0E5C  1903               	skipnz
 10436  0E5D  2E51               	goto	l665
 10437  0E5E  2E5F               	goto	l4882
 10438  0E5F                     l4882:	
 10439                           ;doprnt.c: 586: }
 10440                           
 10441                           ;doprnt.c: 585: break;
 10442                           
 10443                           
 10444                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 10445  0E5F  082E               	movf	printf@f,w
 10446  0E60  0084               	movwf	4
 10447  0E61  082F               	movf	printf@f+1,w
 10448  0E62  0085               	movwf	5
 10449  0E63  0800               	movf	0,w	;code access
 10450  0E64  3192  2208  318E   	fcall	_isdigit
 10451  0E67  1C03               	btfss	3,0
 10452  0E68  2F00               	goto	l4930
 10453                           
 10454                           ;doprnt.c: 598: width = 0;
 10455  0E69  0020               	movlb	0	; select bank0
 10456  0E6A  01C1               	clrf	printf@width
 10457  0E6B  01C2               	clrf	printf@width+1
 10458  0E6C                     l4886:	
 10459                           ;doprnt.c: 599: do {
 10460                           
 10461                           
 10462                           ;doprnt.c: 600: width *= 10;
 10463  0E6C  300A               	movlw	10
 10464  0E6D  0020               	movlb	0	; select bank0
 10465  0E6E  00A0               	movwf	___wmul@multiplier
 10466  0E6F  3000               	movlw	0
 10467  0E70  00A1               	movwf	___wmul@multiplier+1
 10468  0E71  0842               	movf	printf@width+1,w
 10469  0E72  00A3               	movwf	___wmul@multiplicand+1
 10470  0E73  0841               	movf	printf@width,w
 10471  0E74  00A2               	movwf	___wmul@multiplicand
 10472  0E75  3193  231A  318E   	fcall	___wmul
 10473  0E78  0020               	movlb	0	; select bank0
 10474  0E79  0821               	movf	?___wmul+1,w
 10475  0E7A  00C2               	movwf	printf@width+1
 10476  0E7B  0820               	movf	?___wmul,w
 10477  0E7C  00C1               	movwf	printf@width
 10478                           
 10479                           ;doprnt.c: 601: width += *f++ - '0';
 10480  0E7D  082E               	movf	printf@f,w
 10481  0E7E  0084               	movwf	4
 10482  0E7F  082F               	movf	printf@f+1,w
 10483  0E80  0085               	movwf	5
 10484  0E81  0800               	movf	0,w	;code access
 10485  0E82  3ED0               	addlw	208
 10486  0E83  00B4               	movwf	??_printf
 10487  0E84  30FF               	movlw	255
 10488  0E85  1803               	skipnc
 10489  0E86  3000               	movlw	0
 10490  0E87  00B5               	movwf	??_printf+1
 10491  0E88  0834               	movf	??_printf,w
 10492  0E89  07C1               	addwf	printf@width,f
 10493  0E8A  0835               	movf	??_printf+1,w
 10494  0E8B  3DC2               	addwfc	printf@width+1,f
 10495  0E8C  3001               	movlw	1
 10496  0E8D  07AE               	addwf	printf@f,f
 10497  0E8E  3000               	movlw	0
 10498  0E8F  3DAF               	addwfc	printf@f+1,f
 10499                           
 10500                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 10501  0E90  082E               	movf	printf@f,w
 10502  0E91  0084               	movwf	4
 10503  0E92  082F               	movf	printf@f+1,w
 10504  0E93  0085               	movwf	5
 10505  0E94  0800               	movf	0,w	;code access
 10506  0E95  3192  2208  318E   	fcall	_isdigit
 10507  0E98  1C03               	btfss	3,0
 10508  0E99  2F00               	goto	l4930
 10509  0E9A  2E6C               	goto	l4886
 10510  0E9B                     l4894:	
 10511                           ;doprnt.c: 728: case 's':
 10512                           
 10513                           ;doprnt.c: 698: case 'i':
 10514                           ;doprnt.c: 699: break;
 10515                           
 10516                           ;doprnt.c: 697: case 'd':
 10517                           
 10518                           ;doprnt.c: 638: goto alldone;
 10519                           
 10520                           ;doprnt.c: 637: case 0:
 10521                           
 10522                           ;doprnt.c: 608: }
 10523                           ;doprnt.c: 635: switch(c = *f++) {
 10524                           
 10525                           
 10526                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 10527  0E9B  0020               	movlb	0	; select bank0
 10528  0E9C  083B               	movf	printf@ap,w
 10529  0E9D  0086               	movwf	6
 10530  0E9E  0187               	clrf	7
 10531  0E9F  3F40               	moviw [0]fsr1
 10532  0EA0  00B9               	movwf	printf@cp
 10533  0EA1  3F41               	moviw [1]fsr1
 10534  0EA2  00BA               	movwf	printf@cp+1
 10535  0EA3  3002               	movlw	2
 10536  0EA4  00B4               	movwf	??_printf
 10537  0EA5  0834               	movf	??_printf,w
 10538  0EA6  07BB               	addwf	printf@ap,f
 10539                           
 10540                           ;doprnt.c: 740: if(!cp)
 10541  0EA7  0839               	movf	printf@cp,w
 10542  0EA8  043A               	iorwf	printf@cp+1,w
 10543  0EA9  1D03               	btfss	3,2
 10544  0EAA  2EAF               	goto	l4902
 10545                           
 10546                           ;doprnt.c: 741: cp = "(null)";
 10547  0EAB  3049               	movlw	low (STR_35| (0+32768))
 10548  0EAC  00B9               	movwf	printf@cp
 10549  0EAD  3091               	movlw	high (STR_35| (0+32768))
 10550  0EAE  00BA               	movwf	printf@cp+1
 10551  0EAF                     l4902:	
 10552                           
 10553                           ;doprnt.c: 745: len = 0;
 10554  0EAF  01BE               	clrf	printf@len
 10555  0EB0  01BF               	clrf	printf@len+1
 10556  0EB1                     l4906:	
 10557                           ;doprnt.c: 746: while(cp[len])
 10558                           
 10559  0EB1  0839               	movf	printf@cp,w
 10560  0EB2  073E               	addwf	printf@len,w
 10561  0EB3  0084               	movwf	4
 10562  0EB4  083A               	movf	printf@cp+1,w
 10563  0EB5  3D3F               	addwfc	printf@len+1,w
 10564  0EB6  0085               	movwf	5
 10565  0EB7  0012               	moviw fsr0++
 10566  0EB8  1903               	btfsc	3,2
 10567  0EB9  2EBF               	goto	l4908
 10568                           
 10569                           ;doprnt.c: 747: len++;
 10570  0EBA  3001               	movlw	1
 10571  0EBB  07BE               	addwf	printf@len,f
 10572  0EBC  3000               	movlw	0
 10573  0EBD  3DBF               	addwfc	printf@len+1,f
 10574  0EBE  2EB1               	goto	l4906
 10575  0EBF                     l4908:	
 10576                           ;doprnt.c: 750: dostring:
 10577                           
 10578                           
 10579                           ;doprnt.c: 757: if(width > len)
 10580  0EBF  0842               	movf	printf@width+1,w
 10581  0EC0  023F               	subwf	printf@len+1,w
 10582  0EC1  1D03               	skipz
 10583  0EC2  2EC5               	goto	u5375
 10584  0EC3  0841               	movf	printf@width,w
 10585  0EC4  023E               	subwf	printf@len,w
 10586  0EC5                     u5375:	
 10587  0EC5  1803               	skipnc
 10588  0EC6  2ECC               	goto	l4912
 10589                           
 10590                           ;doprnt.c: 758: width -= len;
 10591  0EC7  083E               	movf	printf@len,w
 10592  0EC8  02C1               	subwf	printf@width,f
 10593  0EC9  083F               	movf	printf@len+1,w
 10594  0ECA  3BC2               	subwfb	printf@width+1,f
 10595  0ECB  2ECE               	goto	l4916
 10596  0ECC                     l4912:	
 10597                           
 10598                           ;doprnt.c: 759: else
 10599                           ;doprnt.c: 760: width = 0;
 10600  0ECC  01C1               	clrf	printf@width
 10601  0ECD  01C2               	clrf	printf@width+1
 10602  0ECE                     l4916:	
 10603                           ;doprnt.c: 764: while(width--)
 10604                           
 10605  0ECE  30FF               	movlw	255
 10606  0ECF  0020               	movlb	0	; select bank0
 10607  0ED0  07C1               	addwf	printf@width,f
 10608  0ED1  30FF               	movlw	255
 10609  0ED2  3DC2               	addwfc	printf@width+1,f
 10610  0ED3  0A41               	incf	printf@width,w
 10611  0ED4  1903               	btfsc	3,2
 10612  0ED5  0A42               	incf	printf@width+1,w
 10613  0ED6  1903               	btfsc	3,2
 10614  0ED7  2EEA               	goto	l4922
 10615                           
 10616                           ;doprnt.c: 765: (putch(' ') );
 10617  0ED8  3020               	movlw	32
 10618  0ED9  319F  27D9  318E   	fcall	_putch
 10619  0EDC  2ECE               	goto	l4916
 10620  0EDD                     l4918:	
 10621                           ;doprnt.c: 767: while(len--)
 10622                           
 10623                           
 10624                           ;doprnt.c: 768: (putch(*cp++) );
 10625  0EDD  0839               	movf	printf@cp,w
 10626  0EDE  0084               	movwf	4
 10627  0EDF  083A               	movf	printf@cp+1,w
 10628  0EE0  0085               	movwf	5
 10629  0EE1  0800               	movf	0,w	;code access
 10630  0EE2  319F  27D9  318E   	fcall	_putch
 10631  0EE5  3001               	movlw	1
 10632  0EE6  0020               	movlb	0	; select bank0
 10633  0EE7  07B9               	addwf	printf@cp,f
 10634  0EE8  3000               	movlw	0
 10635  0EE9  3DBA               	addwfc	printf@cp+1,f
 10636  0EEA                     l4922:	
 10637  0EEA  3001               	movlw	1
 10638  0EEB  02BE               	subwf	printf@len,f
 10639  0EEC  3000               	movlw	0
 10640  0EED  3BBF               	subwfb	printf@len+1,f
 10641  0EEE  0A3E               	incf	printf@len,w
 10642  0EEF  1D03               	skipz
 10643  0EF0  2EDD               	goto	l4918
 10644  0EF1  0A3F               	incf	printf@len+1,w
 10645  0EF2  1903               	btfsc	3,2
 10646  0EF3  2E30               	goto	l4998
 10647  0EF4  2EDD               	goto	l4918
 10648  0EF5                     l4924:	
 10649                           ;doprnt.c: 802: default:
 10650                           
 10651                           ;doprnt.c: 774: continue;
 10652                           
 10653                           
 10654                           ;doprnt.c: 805: cp = (char *)&c;
 10655  0EF5  3043               	movlw	low printf@c
 10656  0EF6  00B9               	movwf	printf@cp
 10657  0EF7  3000               	movlw	high printf@c
 10658  0EF8  00BA               	movwf	printf@cp+1
 10659                           
 10660                           ;doprnt.c: 806: len = 1;
 10661  0EF9  3001               	movlw	1
 10662  0EFA  00BE               	movwf	printf@len
 10663  0EFB  3000               	movlw	0
 10664  0EFC  00BF               	movwf	printf@len+1
 10665                           
 10666                           ;doprnt.c: 807: goto dostring;
 10667  0EFD  2EBF               	goto	l4908
 10668  0EFE                     l693:	
 10669                           ;doprnt.c: 817: case 'u':
 10670                           
 10671                           
 10672                           ;doprnt.c: 818: flag |= 0x40;
 10673  0EFE  1740               	bsf	printf@flag,6
 10674                           
 10675                           ;doprnt.c: 822: }
 10676                           
 10677                           ;doprnt.c: 819: break;
 10678  0EFF  2F1E               	goto	l677
 10679  0F00                     l4930:	
 10680  0F00  0020               	movlb	0	; select bank0
 10681  0F01  082F               	movf	printf@f+1,w
 10682  0F02  00B5               	movwf	??_printf+1
 10683  0F03  082E               	movf	printf@f,w
 10684  0F04  00B4               	movwf	??_printf
 10685  0F05  0AAE               	incf	printf@f,f
 10686  0F06  1903               	skipnz
 10687  0F07  0AAF               	incf	printf@f+1,f
 10688  0F08  0834               	movf	??_printf,w
 10689  0F09  0084               	movwf	4
 10690  0F0A  0835               	movf	??_printf+1,w
 10691  0F0B  0085               	movwf	5
 10692  0F0C  0800               	movf	0,w	;code access
 10693  0F0D  00C3               	movwf	printf@c
 10694                           
 10695                           ; Switch size 1, requested type "space"
 10696                           ; Number of cases is 5, Range of values is 0 to 117
 10697                           ; switch strategies available:
 10698                           ; Name         Instructions Cycles
 10699                           ; simple_byte           16     9 (average)
 10700                           ; direct_byte          242     6 (fixed)
 10701                           ; jumptable            260     6 (fixed)
 10702                           ;	Chosen strategy is simple_byte
 10703  0F0E  3A00               	xorlw	0	; case 0
 10704  0F0F  1903               	skipnz
 10705  0F10  2FFF               	goto	l717
 10706  0F11  3A64               	xorlw	100	; case 100
 10707  0F12  1903               	skipnz
 10708  0F13  2F1E               	goto	l677
 10709  0F14  3A0D               	xorlw	13	; case 105
 10710  0F15  1903               	skipnz
 10711  0F16  2F1E               	goto	l677
 10712  0F17  3A1A               	xorlw	26	; case 115
 10713  0F18  1903               	skipnz
 10714  0F19  2E9B               	goto	l4894
 10715  0F1A  3A06               	xorlw	6	; case 117
 10716  0F1B  1903               	skipnz
 10717  0F1C  2EFE               	goto	l693
 10718  0F1D  2EF5               	goto	l4924
 10719  0F1E                     l677:	
 10720                           
 10721                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 10722  0F1E  0020               	movlb	0	; select bank0
 10723  0F1F  1B40               	btfsc	printf@flag,6
 10724  0F20  2F38               	goto	l4942
 10725                           
 10726                           ;doprnt.c: 1253: {
 10727                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 10728  0F21  083B               	movf	printf@ap,w
 10729  0F22  0086               	movwf	6
 10730  0F23  0187               	clrf	7
 10731  0F24  3F40               	moviw [0]fsr1
 10732  0F25  00BC               	movwf	printf@val
 10733  0F26  3F41               	moviw [1]fsr1
 10734  0F27  00BD               	movwf	printf@val+1
 10735  0F28  3002               	movlw	2
 10736  0F29  00B4               	movwf	??_printf
 10737  0F2A  0834               	movf	??_printf,w
 10738  0F2B  07BB               	addwf	printf@ap,f
 10739                           
 10740                           ;doprnt.c: 1261: if((int)val < 0) {
 10741  0F2C  1FBD               	btfss	printf@val+1,7
 10742  0F2D  2F43               	goto	l4946
 10743                           
 10744                           ;doprnt.c: 1262: flag |= 0x03;
 10745  0F2E  3003               	movlw	3
 10746  0F2F  00B4               	movwf	??_printf
 10747  0F30  0834               	movf	??_printf,w
 10748  0F31  04C0               	iorwf	printf@flag,f
 10749                           
 10750                           ;doprnt.c: 1263: val = -val;
 10751  0F32  09BC               	comf	printf@val,f
 10752  0F33  09BD               	comf	printf@val+1,f
 10753  0F34  0ABC               	incf	printf@val,f
 10754  0F35  1903               	skipnz
 10755  0F36  0ABD               	incf	printf@val+1,f
 10756                           
 10757                           ;doprnt.c: 1264: }
 10758                           ;doprnt.c: 1266: }
 10759  0F37  2F43               	goto	l4946
 10760  0F38                     l4942:	
 10761                           
 10762                           ;doprnt.c: 1268: else
 10763                           ;doprnt.c: 1273: {
 10764                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 10765  0F38  083B               	movf	printf@ap,w
 10766  0F39  0086               	movwf	6
 10767  0F3A  0187               	clrf	7
 10768  0F3B  3F40               	moviw [0]fsr1
 10769  0F3C  00BC               	movwf	printf@val
 10770  0F3D  3F41               	moviw [1]fsr1
 10771  0F3E  00BD               	movwf	printf@val+1
 10772  0F3F  3002               	movlw	2
 10773  0F40  00B4               	movwf	??_printf
 10774  0F41  0834               	movf	??_printf,w
 10775  0F42  07BB               	addwf	printf@ap,f
 10776  0F43                     l4946:	
 10777                           
 10778                           ;doprnt.c: 1287: }
 10779                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 10780  0F43  01C3               	clrf	printf@c
 10781  0F44  0AC3               	incf	printf@c,f
 10782  0F45  3005               	movlw	5
 10783  0F46  0643               	xorwf	printf@c,w
 10784  0F47  1903               	btfsc	3,2
 10785  0F48  2F68               	goto	l4958
 10786  0F49                     l4952:	
 10787                           
 10788                           ;doprnt.c: 1306: if(val < dpowers[c])
 10789  0F49  0843               	movf	printf@c,w
 10790  0F4A  00B4               	movwf	??_printf
 10791  0F4B  01B5               	clrf	??_printf+1
 10792  0F4C  35B4               	lslf	??_printf,f
 10793  0F4D  0DB5               	rlf	??_printf+1,f
 10794  0F4E  3000               	movlw	low (_dpowers| (0+32768))
 10795  0F4F  0734               	addwf	??_printf,w
 10796  0F50  0084               	movwf	4
 10797  0F51  3090               	movlw	high (_dpowers| (0+32768))
 10798  0F52  3D35               	addwfc	??_printf+1,w
 10799  0F53  0085               	movwf	5
 10800  0F54  3F00               	moviw [0]fsr0
 10801  0F55  00B6               	movwf	??_printf+2
 10802  0F56  3F01               	moviw [1]fsr0
 10803  0F57  00B7               	movwf	??_printf+3
 10804  0F58  0837               	movf	??_printf+3,w
 10805  0F59  023D               	subwf	printf@val+1,w
 10806  0F5A  1D03               	skipz
 10807  0F5B  2F5E               	goto	u5435
 10808  0F5C  0836               	movf	??_printf+2,w
 10809  0F5D  023C               	subwf	printf@val,w
 10810  0F5E                     u5435:	
 10811  0F5E  1C03               	btfss	3,0
 10812  0F5F  2F68               	goto	l4958
 10813                           
 10814                           ;doprnt.c: 1307: break;
 10815  0F60  3001               	movlw	1
 10816  0F61  00B4               	movwf	??_printf
 10817  0F62  0834               	movf	??_printf,w
 10818  0F63  07C3               	addwf	printf@c,f
 10819  0F64  3005               	movlw	5
 10820  0F65  0643               	xorwf	printf@c,w
 10821  0F66  1D03               	btfss	3,2
 10822  0F67  2F49               	goto	l4952
 10823  0F68                     l4958:	
 10824                           
 10825                           ;doprnt.c: 1345: if(width && flag & 0x03)
 10826  0F68  0841               	movf	printf@width,w
 10827  0F69  0442               	iorwf	printf@width+1,w
 10828  0F6A  1903               	btfsc	3,2
 10829  0F6B  2F74               	goto	l700
 10830  0F6C  0840               	movf	printf@flag,w
 10831  0F6D  3903               	andlw	3
 10832  0F6E  1903               	btfsc	3,2
 10833  0F6F  2F74               	goto	l700
 10834                           
 10835                           ;doprnt.c: 1346: width--;
 10836  0F70  30FF               	movlw	255
 10837  0F71  07C1               	addwf	printf@width,f
 10838  0F72  30FF               	movlw	255
 10839  0F73  3DC2               	addwfc	printf@width+1,f
 10840  0F74                     l700:	
 10841                           
 10842                           ;doprnt.c: 1381: if(width > c)
 10843  0F74  0843               	movf	printf@c,w
 10844  0F75  00B4               	movwf	??_printf
 10845  0F76  01B5               	clrf	??_printf+1
 10846  0F77  1BB4               	btfsc	??_printf,7
 10847  0F78  03B5               	decf	??_printf+1,f
 10848  0F79  0835               	movf	??_printf+1,w
 10849  0F7A  3A80               	xorlw	128
 10850  0F7B  00B6               	movwf	??_printf+2
 10851  0F7C  0842               	movf	printf@width+1,w
 10852  0F7D  3A80               	xorlw	128
 10853  0F7E  0236               	subwf	??_printf+2,w
 10854  0F7F  1D03               	skipz
 10855  0F80  2F83               	goto	u5475
 10856  0F81  0841               	movf	printf@width,w
 10857  0F82  0234               	subwf	??_printf,w
 10858  0F83                     u5475:	
 10859  0F83  1803               	skipnc
 10860  0F84  2F90               	goto	l4966
 10861                           
 10862                           ;doprnt.c: 1382: width -= c;
 10863  0F85  0020               	movlb	0	; select bank0
 10864  0F86  0843               	movf	printf@c,w
 10865  0F87  00B4               	movwf	??_printf
 10866  0F88  01B5               	clrf	??_printf+1
 10867  0F89  1BB4               	btfsc	??_printf,7
 10868  0F8A  03B5               	decf	??_printf+1,f
 10869  0F8B  0834               	movf	??_printf,w
 10870  0F8C  02C1               	subwf	printf@width,f
 10871  0F8D  0835               	movf	??_printf+1,w
 10872  0F8E  3BC2               	subwfb	printf@width+1,f
 10873  0F8F  2F93               	goto	l4968
 10874  0F90                     l4966:	
 10875                           
 10876                           ;doprnt.c: 1383: else
 10877                           ;doprnt.c: 1384: width = 0;
 10878  0F90  0020               	movlb	0	; select bank0
 10879  0F91  01C1               	clrf	printf@width
 10880  0F92  01C2               	clrf	printf@width+1
 10881  0F93                     l4968:	
 10882                           
 10883                           ;doprnt.c: 1387: if(flag & 0x04) {
 10884  0F93  1D40               	btfss	printf@flag,2
 10885  0F94  2FAC               	goto	l4980
 10886                           
 10887                           ;doprnt.c: 1392: if(flag & 0x03)
 10888  0F95  0840               	movf	printf@flag,w
 10889  0F96  3903               	andlw	3
 10890  0F97  1903               	btfsc	3,2
 10891  0F98  2F9D               	goto	l4974
 10892                           
 10893                           ;doprnt.c: 1393: (putch('-') );
 10894  0F99  302D               	movlw	45
 10895  0F9A  319F  27D9  318E   	fcall	_putch
 10896  0F9D                     l4974:	
 10897                           
 10898                           ;doprnt.c: 1415: if(width)
 10899  0F9D  0020               	movlb	0	; select bank0
 10900  0F9E                     L15:	
 10901  0F9E  0841               	movf	printf@width,w
 10902  0F9F  0442               	iorwf	printf@width+1,w
 10903  0FA0  1903               	btfsc	3,2
 10904  0FA1  2FC5               	goto	l4990
 10905                           
 10906                           ;doprnt.c: 1417: (putch('0') );
 10907                           
 10908                           ;doprnt.c: 1416: do
 10909  0FA2  3030               	movlw	48
 10910  0FA3  319F  27D9  318E   	fcall	_putch
 10911                           
 10912                           ;doprnt.c: 1418: while(--width);
 10913  0FA6  30FF               	movlw	255
 10914  0FA7  0020               	movlb	0	; select bank0
 10915  0FA8  07C1               	addwf	printf@width,f
 10916  0FA9  30FF               	movlw	255
 10917  0FAA  3DC2               	addwfc	printf@width+1,f
 10918  0FAB  2F9E               	goto	L15
 10919  0FAC                     l4980:	
 10920                           ;doprnt.c: 1420: } else
 10921                           
 10922                           
 10923                           ;doprnt.c: 1422: {
 10924                           ;doprnt.c: 1424: if(width
 10925                           ;doprnt.c: 1428: )
 10926  0FAC  0841               	movf	printf@width,w
 10927  0FAD  0442               	iorwf	printf@width+1,w
 10928  0FAE  1903               	btfsc	3,2
 10929  0FAF  2FBD               	goto	l4986
 10930  0FB0                     l4982:	
 10931                           ;doprnt.c: 1429: do
 10932                           
 10933                           
 10934                           ;doprnt.c: 1430: (putch(' ') );
 10935  0FB0  3020               	movlw	32
 10936  0FB1  319F  27D9  318E   	fcall	_putch
 10937                           
 10938                           ;doprnt.c: 1431: while(--width);
 10939  0FB4  30FF               	movlw	255
 10940  0FB5  0020               	movlb	0	; select bank0
 10941  0FB6  07C1               	addwf	printf@width,f
 10942  0FB7  30FF               	movlw	255
 10943  0FB8  3DC2               	addwfc	printf@width+1,f
 10944  0FB9  0841               	movf	printf@width,w
 10945  0FBA  0442               	iorwf	printf@width+1,w
 10946  0FBB  1D03               	btfss	3,2
 10947  0FBC  2FB0               	goto	l4982
 10948  0FBD                     l4986:	
 10949                           
 10950                           ;doprnt.c: 1438: if(flag & 0x03)
 10951  0FBD  0840               	movf	printf@flag,w
 10952  0FBE  3903               	andlw	3
 10953  0FBF  1903               	btfsc	3,2
 10954  0FC0  2FC5               	goto	l4990
 10955                           
 10956                           ;doprnt.c: 1439: (putch('-') );
 10957  0FC1  302D               	movlw	45
 10958  0FC2  319F  27D9  318E   	fcall	_putch
 10959  0FC5                     l4990:	
 10960                           
 10961                           ;doprnt.c: 1469: }
 10962                           ;doprnt.c: 1472: prec = c;
 10963  0FC5  0020               	movlb	0	; select bank0
 10964  0FC6  0843               	movf	printf@c,w
 10965  0FC7  00B4               	movwf	??_printf
 10966  0FC8  0834               	movf	??_printf,w
 10967  0FC9  00B8               	movwf	printf@prec
 10968  0FCA                     l4996:	
 10969                           ;doprnt.c: 1474: while(prec--) {
 10970                           
 10971  0FCA  30FF               	movlw	255
 10972  0FCB  0020               	movlb	0	; select bank0
 10973  0FCC  00B4               	movwf	??_printf
 10974  0FCD  0834               	movf	??_printf,w
 10975  0FCE  07B8               	addwf	printf@prec,f
 10976  0FCF  0A38               	incf	printf@prec,w
 10977  0FD0  1903               	btfsc	3,2
 10978  0FD1  2E30               	goto	l4998
 10979                           
 10980                           ;doprnt.c: 1478: {
 10981                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 10982  0FD2  300A               	movlw	10
 10983  0FD3  00A8               	movwf	___lwmod@divisor
 10984  0FD4  3000               	movlw	0
 10985  0FD5  00A9               	movwf	___lwmod@divisor+1
 10986  0FD6  0838               	movf	printf@prec,w
 10987  0FD7  00B4               	movwf	??_printf
 10988  0FD8  01B5               	clrf	??_printf+1
 10989  0FD9  35B4               	lslf	??_printf,f
 10990  0FDA  0DB5               	rlf	??_printf+1,f
 10991  0FDB  3000               	movlw	low (_dpowers| (0+32768))
 10992  0FDC  0734               	addwf	??_printf,w
 10993  0FDD  0084               	movwf	4
 10994  0FDE  3090               	movlw	high (_dpowers| (0+32768))
 10995  0FDF  3D35               	addwfc	??_printf+1,w
 10996  0FE0  0085               	movwf	5
 10997  0FE1  3F00               	moviw [0]fsr0
 10998  0FE2  00A0               	movwf	___lwdiv@divisor
 10999  0FE3  3F01               	moviw [1]fsr0
 11000  0FE4  00A1               	movwf	___lwdiv@divisor+1
 11001  0FE5  083D               	movf	printf@val+1,w
 11002  0FE6  00A3               	movwf	___lwdiv@dividend+1
 11003  0FE7  083C               	movf	printf@val,w
 11004  0FE8  00A2               	movwf	___lwdiv@dividend
 11005  0FE9  3195  2502  318E   	fcall	___lwdiv
 11006  0FEC  0020               	movlb	0	; select bank0
 11007  0FED  0821               	movf	?___lwdiv+1,w
 11008  0FEE  00AB               	movwf	___lwmod@dividend+1
 11009  0FEF  0820               	movf	?___lwdiv,w
 11010  0FF0  00AA               	movwf	___lwmod@dividend
 11011  0FF1  3194  24A8  318E   	fcall	___lwmod
 11012  0FF4  0020               	movlb	0	; select bank0
 11013  0FF5  0828               	movf	?___lwmod,w
 11014  0FF6  3E30               	addlw	48
 11015  0FF7  00B6               	movwf	??_printf+2
 11016  0FF8  0836               	movf	??_printf+2,w
 11017  0FF9  00C3               	movwf	printf@c
 11018                           
 11019                           ;doprnt.c: 1523: }
 11020                           ;doprnt.c: 1524: (putch(c) );
 11021  0FFA  0843               	movf	printf@c,w
 11022  0FFB  319F  27D9  318E   	fcall	_putch
 11023  0FFE  2FCA               	goto	l4996
 11024  0FFF                     l717:	
 11025                           ;doprnt.c: 1540: return 0;
 11026                           ;	Return value of _printf is never used
 11027                           
 11028                           ;doprnt.c: 1525: }
 11029                           ;doprnt.c: 1533: }
 11030                           ;doprnt.c: 1535: alldone:
 11031                           
 11032  0FFF  0008               	return
 11033  1000                     __end_of_printf:	
 11034                           
 11035                           	psect	text46
 11036  1FD9                     __ptext46:	
 11037 ;; *************** function _putch *****************
 11038 ;; Defined at:
 11039 ;;		line 160 in file "mcc_generated_files/eusart.c"
 11040 ;; Parameters:    Size  Location     Type
 11041 ;;  txData          1    wreg     unsigned char 
 11042 ;; Auto vars:     Size  Location     Type
 11043 ;;  txData          1    2[BANK0 ] unsigned char 
 11044 ;; Return value:  Size  Location     Type
 11045 ;;                  1    wreg      void 
 11046 ;; Registers used:
 11047 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11048 ;; Tracked objects:
 11049 ;;		On entry : 0/0
 11050 ;;		On exit  : 0/0
 11051 ;;		Unchanged: 0/0
 11052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11054 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11056 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11057 ;;Total ram usage:        1 bytes
 11058 ;; Hardware stack levels used:    1
 11059 ;; Hardware stack levels required when called:    4
 11060 ;; This function calls:
 11061 ;;		_EUSART_Write
 11062 ;; This function is called by:
 11063 ;;		_printf
 11064 ;; This function uses a non-reentrant model
 11065 ;;
 11066                           
 11067                           
 11068                           ;psect for function _putch
 11069  1FD9                     _putch:	
 11070                           
 11071                           ;incstack = 0
 11072                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11073                           ;putch@txData stored from wreg
 11074  1FD9  0020               	movlb	0	; select bank0
 11075  1FDA  00A2               	movwf	putch@txData
 11076                           
 11077                           ;eusart.c: 162: EUSART_Write(txData);
 11078  1FDB  0822               	movf	putch@txData,w
 11079  1FDC  3188  2001         	fcall	_EUSART_Write
 11080  1FDE  0008               	return
 11081  1FDF                     __end_of_putch:	
 11082                           
 11083                           	psect	text47
 11084  0801                     __ptext47:	
 11085 ;; *************** function _EUSART_Write *****************
 11086 ;; Defined at:
 11087 ;;		line 132 in file "mcc_generated_files/eusart.c"
 11088 ;; Parameters:    Size  Location     Type
 11089 ;;  txData          1    wreg     unsigned char 
 11090 ;; Auto vars:     Size  Location     Type
 11091 ;;  txData          1    1[BANK0 ] unsigned char 
 11092 ;; Return value:  Size  Location     Type
 11093 ;;                  1    wreg      void 
 11094 ;; Registers used:
 11095 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11096 ;; Tracked objects:
 11097 ;;		On entry : 0/0
 11098 ;;		On exit  : 0/0
 11099 ;;		Unchanged: 0/0
 11100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11102 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11103 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11104 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11105 ;;Total ram usage:        2 bytes
 11106 ;; Hardware stack levels used:    1
 11107 ;; Hardware stack levels required when called:    3
 11108 ;; This function calls:
 11109 ;;		Nothing
 11110 ;; This function is called by:
 11111 ;;		_putch
 11112 ;; This function uses a non-reentrant model
 11113 ;;
 11114                           
 11115                           
 11116                           ;psect for function _EUSART_Write
 11117  0801                     _EUSART_Write:	
 11118                           
 11119                           ;incstack = 0
 11120                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
 11121                           ;EUSART_Write@txData stored from wreg
 11122  0801  0020               	movlb	0	; select bank0
 11123  0802  00A1               	movwf	EUSART_Write@txData
 11124  0803                     l4738:	
 11125                           ;eusart.c: 135: {
 11126                           
 11127                           ;eusart.c: 134: while(0 == eusartTxBufferRemaining)
 11128                           
 11129  0803  0874               	movf	_eusartTxBufferRemaining,w	;volatile
 11130  0804  1903               	btfsc	3,2
 11131  0805  2803               	goto	l4738
 11132                           
 11133                           ;eusart.c: 136: }
 11134                           ;eusart.c: 138: if(0 == PIE1bits.TXIE)
 11135  0806  0021               	movlb	1	; select bank1
 11136  0807  1A11               	btfsc	17,4	;volatile
 11137  0808  280E               	goto	l244
 11138                           
 11139                           ;eusart.c: 139: {
 11140                           ;eusart.c: 140: TXREG = txData;
 11141  0809  0020               	movlb	0	; select bank0
 11142  080A  0821               	movf	EUSART_Write@txData,w
 11143  080B  0023               	movlb	3	; select bank3
 11144  080C  009A               	movwf	26	;volatile
 11145                           
 11146                           ;eusart.c: 141: }
 11147  080D  2823               	goto	l4752
 11148  080E                     l244:	
 11149                           
 11150                           ;eusart.c: 142: else
 11151                           ;eusart.c: 143: {
 11152                           ;eusart.c: 144: PIE1bits.TXIE = 0;
 11153  080E  1211               	bcf	17,4	;volatile
 11154                           
 11155                           ;eusart.c: 145: eusartTxBuffer[eusartTxHead++] = txData;
 11156  080F  0020               	movlb	0	; select bank0
 11157  0810  0821               	movf	EUSART_Write@txData,w
 11158  0811  00A0               	movwf	??_EUSART_Write
 11159  0812  0876               	movf	_eusartTxHead,w
 11160  0813  3EA0               	addlw	(low (_eusartTxBuffer| (0+512)))& (0+255)
 11161  0814  0086               	movwf	6
 11162  0815  3002               	movlw	2	; select bank5/6
 11163  0816  0087               	movwf	7
 11164  0817  0820               	movf	??_EUSART_Write,w
 11165  0818  0081               	movwf	1
 11166  0819  3001               	movlw	1
 11167  081A  00A0               	movwf	??_EUSART_Write
 11168  081B  0820               	movf	??_EUSART_Write,w
 11169  081C  07F6               	addwf	_eusartTxHead,f	;volatile
 11170                           
 11171                           ;eusart.c: 146: if(sizeof(eusartTxBuffer) <= eusartTxHead)
 11172  081D  3040               	movlw	64
 11173  081E  0276               	subwf	_eusartTxHead,w	;volatile
 11174  081F  1803               	btfsc	3,0
 11175                           
 11176                           ;eusart.c: 147: {
 11177                           ;eusart.c: 148: eusartTxHead = 0;
 11178  0820  01F6               	clrf	_eusartTxHead	;volatile
 11179                           
 11180                           ;eusart.c: 149: }
 11181                           ;eusart.c: 150: eusartTxBufferRemaining--;
 11182  0821  3001               	movlw	1
 11183  0822  02F4               	subwf	_eusartTxBufferRemaining,f	;volatile
 11184  0823                     l4752:	
 11185                           
 11186                           ;eusart.c: 151: }
 11187                           ;eusart.c: 152: PIE1bits.TXIE = 1;
 11188  0823  0021               	movlb	1	; select bank1
 11189  0824  1611               	bsf	17,4	;volatile
 11190  0825  0008               	return
 11191  0826                     __end_of_EUSART_Write:	
 11192                           
 11193                           	psect	text48
 11194  14A8                     __ptext48:	
 11195 ;; *************** function ___lwmod *****************
 11196 ;; Defined at:
 11197 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
 11198 ;; Parameters:    Size  Location     Type
 11199 ;;  divisor         2    8[BANK0 ] unsigned int 
 11200 ;;  dividend        2   10[BANK0 ] unsigned int 
 11201 ;; Auto vars:     Size  Location     Type
 11202 ;;  counter         1   13[BANK0 ] unsigned char 
 11203 ;; Return value:  Size  Location     Type
 11204 ;;                  2    8[BANK0 ] unsigned int 
 11205 ;; Registers used:
 11206 ;;		wreg, status,2, status,0
 11207 ;; Tracked objects:
 11208 ;;		On entry : 0/0
 11209 ;;		On exit  : 0/0
 11210 ;;		Unchanged: 0/0
 11211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11212 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11213 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11214 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11215 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11216 ;;Total ram usage:        6 bytes
 11217 ;; Hardware stack levels used:    1
 11218 ;; Hardware stack levels required when called:    3
 11219 ;; This function calls:
 11220 ;;		Nothing
 11221 ;; This function is called by:
 11222 ;;		_tick_handler
 11223 ;;		_inv_handler
 11224 ;;		_printf
 11225 ;; This function uses a non-reentrant model
 11226 ;;
 11227                           
 11228                           
 11229                           ;psect for function ___lwmod
 11230  14A8                     ___lwmod:	
 11231                           
 11232                           ;incstack = 0
 11233                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 11234  14A8  0020               	movlb	0	; select bank0
 11235  14A9  0828               	movf	___lwmod@divisor,w
 11236  14AA  0429               	iorwf	___lwmod@divisor+1,w
 11237  14AB  1903               	btfsc	3,2
 11238  14AC  2CD0               	goto	l4852
 11239  14AD  01AD               	clrf	___lwmod@counter
 11240  14AE  0AAD               	incf	___lwmod@counter,f
 11241  14AF                     l4842:	
 11242  14AF  1BA9               	btfsc	___lwmod@divisor+1,7
 11243  14B0  2CBB               	goto	l4844
 11244  14B1  3001               	movlw	1
 11245  14B2                     u5255:	
 11246  14B2  35A8               	lslf	___lwmod@divisor,f
 11247  14B3  0DA9               	rlf	___lwmod@divisor+1,f
 11248  14B4  0B89               	decfsz	9,f
 11249  14B5  2CB2               	goto	u5255
 11250  14B6  3001               	movlw	1
 11251  14B7  00AC               	movwf	??___lwmod
 11252  14B8  082C               	movf	??___lwmod,w
 11253  14B9  07AD               	addwf	___lwmod@counter,f
 11254  14BA  2CAF               	goto	l4842
 11255  14BB                     l4844:	
 11256  14BB  0829               	movf	___lwmod@divisor+1,w
 11257  14BC  022B               	subwf	___lwmod@dividend+1,w
 11258  14BD  1D03               	skipz
 11259  14BE  2CC1               	goto	u5275
 11260  14BF  0828               	movf	___lwmod@divisor,w
 11261  14C0  022A               	subwf	___lwmod@dividend,w
 11262  14C1                     u5275:	
 11263  14C1  1C03               	skipc
 11264  14C2  2CC7               	goto	l4848
 11265  14C3  0828               	movf	___lwmod@divisor,w
 11266  14C4  02AA               	subwf	___lwmod@dividend,f
 11267  14C5  0829               	movf	___lwmod@divisor+1,w
 11268  14C6  3BAB               	subwfb	___lwmod@dividend+1,f
 11269  14C7                     l4848:	
 11270  14C7  3001               	movlw	1
 11271  14C8                     u5285:	
 11272  14C8  36A9               	lsrf	___lwmod@divisor+1,f
 11273  14C9  0CA8               	rrf	___lwmod@divisor,f
 11274  14CA  0B89               	decfsz	9,f
 11275  14CB  2CC8               	goto	u5285
 11276  14CC  3001               	movlw	1
 11277  14CD  02AD               	subwf	___lwmod@counter,f
 11278  14CE  1D03               	btfss	3,2
 11279  14CF  2CBB               	goto	l4844
 11280  14D0                     l4852:	
 11281  14D0  082B               	movf	___lwmod@dividend+1,w
 11282  14D1  00A9               	movwf	?___lwmod+1
 11283  14D2  082A               	movf	___lwmod@dividend,w
 11284  14D3  00A8               	movwf	?___lwmod
 11285  14D4  0008               	return
 11286  14D5                     __end_of___lwmod:	
 11287                           
 11288                           	psect	text49
 11289  1502                     __ptext49:	
 11290 ;; *************** function ___lwdiv *****************
 11291 ;; Defined at:
 11292 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
 11293 ;; Parameters:    Size  Location     Type
 11294 ;;  divisor         2    0[BANK0 ] unsigned int 
 11295 ;;  dividend        2    2[BANK0 ] unsigned int 
 11296 ;; Auto vars:     Size  Location     Type
 11297 ;;  quotient        2    6[BANK0 ] unsigned int 
 11298 ;;  counter         1    5[BANK0 ] unsigned char 
 11299 ;; Return value:  Size  Location     Type
 11300 ;;                  2    0[BANK0 ] unsigned int 
 11301 ;; Registers used:
 11302 ;;		wreg, status,2, status,0
 11303 ;; Tracked objects:
 11304 ;;		On entry : 0/0
 11305 ;;		On exit  : 0/0
 11306 ;;		Unchanged: 0/0
 11307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11308 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11309 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11310 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11311 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11312 ;;Total ram usage:        8 bytes
 11313 ;; Hardware stack levels used:    1
 11314 ;; Hardware stack levels required when called:    3
 11315 ;; This function calls:
 11316 ;;		Nothing
 11317 ;; This function is called by:
 11318 ;;		_printf
 11319 ;; This function uses a non-reentrant model
 11320 ;;
 11321                           
 11322                           
 11323                           ;psect for function ___lwdiv
 11324  1502                     ___lwdiv:	
 11325                           
 11326                           ;incstack = 0
 11327                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11328  1502  0020               	movlb	0	; select bank0
 11329  1503  01A6               	clrf	___lwdiv@quotient
 11330  1504  01A7               	clrf	___lwdiv@quotient+1
 11331  1505  0820               	movf	___lwdiv@divisor,w
 11332  1506  0421               	iorwf	___lwdiv@divisor+1,w
 11333  1507  1903               	btfsc	3,2
 11334  1508  2D32               	goto	l4830
 11335  1509  01A5               	clrf	___lwdiv@counter
 11336  150A  0AA5               	incf	___lwdiv@counter,f
 11337  150B                     l4818:	
 11338  150B  1BA1               	btfsc	___lwdiv@divisor+1,7
 11339  150C  2D17               	goto	l4820
 11340  150D  3001               	movlw	1
 11341  150E                     u5185:	
 11342  150E  35A0               	lslf	___lwdiv@divisor,f
 11343  150F  0DA1               	rlf	___lwdiv@divisor+1,f
 11344  1510  0B89               	decfsz	9,f
 11345  1511  2D0E               	goto	u5185
 11346  1512  3001               	movlw	1
 11347  1513  00A4               	movwf	??___lwdiv
 11348  1514  0824               	movf	??___lwdiv,w
 11349  1515  07A5               	addwf	___lwdiv@counter,f
 11350  1516  2D0B               	goto	l4818
 11351  1517                     l4820:	
 11352  1517  3001               	movlw	1
 11353  1518                     u5205:	
 11354  1518  35A6               	lslf	___lwdiv@quotient,f
 11355  1519  0DA7               	rlf	___lwdiv@quotient+1,f
 11356  151A  0B89               	decfsz	9,f
 11357  151B  2D18               	goto	u5205
 11358  151C  0821               	movf	___lwdiv@divisor+1,w
 11359  151D  0223               	subwf	___lwdiv@dividend+1,w
 11360  151E  1D03               	skipz
 11361  151F  2D22               	goto	u5215
 11362  1520  0820               	movf	___lwdiv@divisor,w
 11363  1521  0222               	subwf	___lwdiv@dividend,w
 11364  1522                     u5215:	
 11365  1522  1C03               	skipc
 11366  1523  2D29               	goto	l4826
 11367  1524  0820               	movf	___lwdiv@divisor,w
 11368  1525  02A2               	subwf	___lwdiv@dividend,f
 11369  1526  0821               	movf	___lwdiv@divisor+1,w
 11370  1527  3BA3               	subwfb	___lwdiv@dividend+1,f
 11371  1528  1426               	bsf	___lwdiv@quotient,0
 11372  1529                     l4826:	
 11373  1529  3001               	movlw	1
 11374  152A                     u5225:	
 11375  152A  36A1               	lsrf	___lwdiv@divisor+1,f
 11376  152B  0CA0               	rrf	___lwdiv@divisor,f
 11377  152C  0B89               	decfsz	9,f
 11378  152D  2D2A               	goto	u5225
 11379  152E  3001               	movlw	1
 11380  152F  02A5               	subwf	___lwdiv@counter,f
 11381  1530  1D03               	btfss	3,2
 11382  1531  2D17               	goto	l4820
 11383  1532                     l4830:	
 11384  1532  0827               	movf	___lwdiv@quotient+1,w
 11385  1533  00A1               	movwf	?___lwdiv+1
 11386  1534  0826               	movf	___lwdiv@quotient,w
 11387  1535  00A0               	movwf	?___lwdiv
 11388  1536  0008               	return
 11389  1537                     __end_of___lwdiv:	
 11390                           
 11391                           	psect	text50
 11392  1247                     __ptext50:	
 11393 ;; *************** function _concat *****************
 11394 ;; Defined at:
 11395 ;;		line 197 in file "protocol.c"
 11396 ;; Parameters:    Size  Location     Type
 11397 ;;  msb             1    wreg     unsigned char 
 11398 ;;  lsb             1    0[BANK0 ] unsigned char 
 11399 ;; Auto vars:     Size  Location     Type
 11400 ;;  msb             1    7[BANK0 ] unsigned char 
 11401 ;; Return value:  Size  Location     Type
 11402 ;;                  2    0[BANK0 ] unsigned int 
 11403 ;; Registers used:
 11404 ;;		wreg, status,2, status,0
 11405 ;; Tracked objects:
 11406 ;;		On entry : 0/0
 11407 ;;		On exit  : 0/0
 11408 ;;		Unchanged: 0/0
 11409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11410 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11411 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11412 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11413 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11414 ;;Total ram usage:        8 bytes
 11415 ;; Hardware stack levels used:    1
 11416 ;; Hardware stack levels required when called:    3
 11417 ;; This function calls:
 11418 ;;		Nothing
 11419 ;; This function is called by:
 11420 ;;		_PROTOCOL_Print_TLV
 11421 ;; This function uses a non-reentrant model
 11422 ;;
 11423                           
 11424                           
 11425                           ;psect for function _concat
 11426  1247                     _concat:	
 11427                           
 11428                           ;incstack = 0
 11429                           ; Regs used in _concat: [wreg+status,2+status,0]
 11430                           ;concat@msb stored from wreg
 11431  1247  0020               	movlb	0	; select bank0
 11432  1248  00A7               	movwf	concat@msb
 11433                           
 11434                           ;protocol.c: 198: return (uint16_t)msb * 256 + (uint16_t)lsb;
 11435  1249  0820               	movf	concat@lsb,w
 11436  124A  00A2               	movwf	??_concat
 11437  124B  01A3               	clrf	??_concat+1
 11438  124C  0827               	movf	concat@msb,w
 11439  124D  00A4               	movwf	??_concat+2
 11440  124E  01A5               	clrf	??_concat+3
 11441  124F  0824               	movf	??_concat+2,w
 11442  1250  00A5               	movwf	??_concat+3
 11443  1251  01A4               	clrf	??_concat+2
 11444  1252  0822               	movf	??_concat,w
 11445  1253  0724               	addwf	??_concat+2,w
 11446  1254  00A0               	movwf	?_concat
 11447  1255  0823               	movf	??_concat+1,w
 11448  1256  3D25               	addwfc	??_concat+3,w
 11449  1257  00A1               	movwf	?_concat+1
 11450  1258  0008               	return
 11451  1259                     __end_of_concat:	
 11452                           
 11453                           	psect	text51
 11454  1217                     __ptext51:	
 11455 ;; *************** function _abs *****************
 11456 ;; Defined at:
 11457 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\abs.c"
 11458 ;; Parameters:    Size  Location     Type
 11459 ;;  a               2    7[BANK0 ] int 
 11460 ;; Auto vars:     Size  Location     Type
 11461 ;;		None
 11462 ;; Return value:  Size  Location     Type
 11463 ;;                  2    7[BANK0 ] int 
 11464 ;; Registers used:
 11465 ;;		wreg, status,2, status,0
 11466 ;; Tracked objects:
 11467 ;;		On entry : 0/0
 11468 ;;		On exit  : 0/0
 11469 ;;		Unchanged: 0/0
 11470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11471 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11473 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11474 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11475 ;;Total ram usage:        4 bytes
 11476 ;; Hardware stack levels used:    1
 11477 ;; Hardware stack levels required when called:    3
 11478 ;; This function calls:
 11479 ;;		Nothing
 11480 ;; This function is called by:
 11481 ;;		_PROTOCOL_Print_TLV
 11482 ;; This function uses a non-reentrant model
 11483 ;;
 11484                           
 11485                           
 11486                           ;psect for function _abs
 11487  1217                     _abs:	
 11488                           
 11489                           ;incstack = 0
 11490                           ; Regs used in _abs: [wreg+status,2+status,0]
 11491  1217  0020               	movlb	0	; select bank0
 11492  1218  1FA8               	btfss	abs@a+1,7
 11493  1219  0008               	return
 11494  121A  0927               	comf	abs@a,w
 11495  121B  00A9               	movwf	??_abs
 11496  121C  0928               	comf	abs@a+1,w
 11497  121D  00AA               	movwf	??_abs+1
 11498  121E  0AA9               	incf	??_abs,f
 11499  121F  1903               	skipnz
 11500  1220  0AAA               	incf	??_abs+1,f
 11501  1221  0829               	movf	??_abs,w
 11502  1222  00A7               	movwf	?_abs
 11503  1223  082A               	movf	??_abs+1,w
 11504  1224  00A8               	movwf	?_abs+1
 11505  1225  0008               	return
 11506  1226                     __end_of_abs:	
 11507                           
 11508                           	psect	text52
 11509  15F2                     __ptext52:	
 11510 ;; *************** function ___awmod *****************
 11511 ;; Defined at:
 11512 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awmod.c"
 11513 ;; Parameters:    Size  Location     Type
 11514 ;;  divisor         2    0[BANK0 ] int 
 11515 ;;  dividend        2    2[BANK0 ] int 
 11516 ;; Auto vars:     Size  Location     Type
 11517 ;;  sign            1    6[BANK0 ] unsigned char 
 11518 ;;  counter         1    5[BANK0 ] unsigned char 
 11519 ;; Return value:  Size  Location     Type
 11520 ;;                  2    0[BANK0 ] int 
 11521 ;; Registers used:
 11522 ;;		wreg, status,2, status,0
 11523 ;; Tracked objects:
 11524 ;;		On entry : 0/0
 11525 ;;		On exit  : 0/0
 11526 ;;		Unchanged: 0/0
 11527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11528 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11529 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11530 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11531 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11532 ;;Total ram usage:        7 bytes
 11533 ;; Hardware stack levels used:    1
 11534 ;; Hardware stack levels required when called:    3
 11535 ;; This function calls:
 11536 ;;		Nothing
 11537 ;; This function is called by:
 11538 ;;		_PROTOCOL_Print_TLV
 11539 ;; This function uses a non-reentrant model
 11540 ;;
 11541                           
 11542                           
 11543                           ;psect for function ___awmod
 11544  15F2                     ___awmod:	
 11545                           
 11546                           ;incstack = 0
 11547                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 11548  15F2  0020               	movlb	0	; select bank0
 11549  15F3  01A6               	clrf	___awmod@sign
 11550  15F4  1FA3               	btfss	___awmod@dividend+1,7
 11551  15F5  2DFD               	goto	l5062
 11552  15F6  09A2               	comf	___awmod@dividend,f
 11553  15F7  09A3               	comf	___awmod@dividend+1,f
 11554  15F8  0AA2               	incf	___awmod@dividend,f
 11555  15F9  1903               	skipnz
 11556  15FA  0AA3               	incf	___awmod@dividend+1,f
 11557  15FB  01A6               	clrf	___awmod@sign
 11558  15FC  0AA6               	incf	___awmod@sign,f
 11559  15FD                     l5062:	
 11560  15FD  1FA1               	btfss	___awmod@divisor+1,7
 11561  15FE  2E04               	goto	l5066
 11562  15FF  09A0               	comf	___awmod@divisor,f
 11563  1600  09A1               	comf	___awmod@divisor+1,f
 11564  1601  0AA0               	incf	___awmod@divisor,f
 11565  1602  1903               	skipnz
 11566  1603  0AA1               	incf	___awmod@divisor+1,f
 11567  1604                     l5066:	
 11568  1604  0820               	movf	___awmod@divisor,w
 11569  1605  0421               	iorwf	___awmod@divisor+1,w
 11570  1606  1903               	btfsc	3,2
 11571  1607  2E2B               	goto	l5084
 11572  1608  01A5               	clrf	___awmod@counter
 11573  1609  0AA5               	incf	___awmod@counter,f
 11574  160A                     l5074:	
 11575  160A  1BA1               	btfsc	___awmod@divisor+1,7
 11576  160B  2E16               	goto	l5076
 11577  160C  3001               	movlw	1
 11578  160D                     u5715:	
 11579  160D  35A0               	lslf	___awmod@divisor,f
 11580  160E  0DA1               	rlf	___awmod@divisor+1,f
 11581  160F  0B89               	decfsz	9,f
 11582  1610  2E0D               	goto	u5715
 11583  1611  3001               	movlw	1
 11584  1612  00A4               	movwf	??___awmod
 11585  1613  0824               	movf	??___awmod,w
 11586  1614  07A5               	addwf	___awmod@counter,f
 11587  1615  2E0A               	goto	l5074
 11588  1616                     l5076:	
 11589  1616  0821               	movf	___awmod@divisor+1,w
 11590  1617  0223               	subwf	___awmod@dividend+1,w
 11591  1618  1D03               	skipz
 11592  1619  2E1C               	goto	u5735
 11593  161A  0820               	movf	___awmod@divisor,w
 11594  161B  0222               	subwf	___awmod@dividend,w
 11595  161C                     u5735:	
 11596  161C  1C03               	skipc
 11597  161D  2E22               	goto	l5080
 11598  161E  0820               	movf	___awmod@divisor,w
 11599  161F  02A2               	subwf	___awmod@dividend,f
 11600  1620  0821               	movf	___awmod@divisor+1,w
 11601  1621  3BA3               	subwfb	___awmod@dividend+1,f
 11602  1622                     l5080:	
 11603  1622  3001               	movlw	1
 11604  1623                     u5745:	
 11605  1623  36A1               	lsrf	___awmod@divisor+1,f
 11606  1624  0CA0               	rrf	___awmod@divisor,f
 11607  1625  0B89               	decfsz	9,f
 11608  1626  2E23               	goto	u5745
 11609  1627  3001               	movlw	1
 11610  1628  02A5               	subwf	___awmod@counter,f
 11611  1629  1D03               	btfss	3,2
 11612  162A  2E16               	goto	l5076
 11613  162B                     l5084:	
 11614  162B  0826               	movf	___awmod@sign,w
 11615  162C  1903               	btfsc	3,2
 11616  162D  2E33               	goto	l5088
 11617  162E  09A2               	comf	___awmod@dividend,f
 11618  162F  09A3               	comf	___awmod@dividend+1,f
 11619  1630  0AA2               	incf	___awmod@dividend,f
 11620  1631  1903               	skipnz
 11621  1632  0AA3               	incf	___awmod@dividend+1,f
 11622  1633                     l5088:	
 11623  1633  0823               	movf	___awmod@dividend+1,w
 11624  1634  00A1               	movwf	?___awmod+1
 11625  1635  0822               	movf	___awmod@dividend,w
 11626  1636  00A0               	movwf	?___awmod
 11627  1637  0008               	return
 11628  1638                     __end_of___awmod:	
 11629                           
 11630                           	psect	text53
 11631  07CD                     __ptext53:	
 11632 ;; *************** function _detected *****************
 11633 ;; Defined at:
 11634 ;;		line 207 in file "main.c"
 11635 ;; Parameters:    Size  Location     Type
 11636 ;;  dev_addr        1    wreg     unsigned char 
 11637 ;; Auto vars:     Size  Location     Type
 11638 ;;  dev_addr        1   15[BANK0 ] unsigned char 
 11639 ;;  exist           1   14[BANK0 ] unsigned char 
 11640 ;;  x               1   13[BANK0 ] unsigned char 
 11641 ;;  y               1   12[BANK0 ] unsigned char 
 11642 ;; Return value:  Size  Location     Type
 11643 ;;                  1    wreg      unsigned char 
 11644 ;; Registers used:
 11645 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11646 ;; Tracked objects:
 11647 ;;		On entry : 0/0
 11648 ;;		On exit  : 0/0
 11649 ;;		Unchanged: 0/0
 11650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11652 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11653 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11654 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11655 ;;Total ram usage:        7 bytes
 11656 ;; Hardware stack levels used:    1
 11657 ;; Hardware stack levels required when called:    4
 11658 ;; This function calls:
 11659 ;;		___awdiv
 11660 ;; This function is called by:
 11661 ;;		_one_shot_sen
 11662 ;;		_fetch
 11663 ;; This function uses a non-reentrant model
 11664 ;;
 11665                           
 11666                           
 11667                           ;psect for function _detected
 11668  07CD                     _detected:	
 11669                           
 11670                           ;incstack = 0
 11671                           ; Regs used in _detected: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11672                           ;detected@dev_addr stored from wreg
 11673  07CD  0020               	movlb	0	; select bank0
 11674  07CE  00AF               	movwf	detected@dev_addr
 11675                           
 11676                           ;main.c: 208: uint8_t y = dev_addr / 8;
 11677  07CF  3008               	movlw	8
 11678  07D0  00A0               	movwf	___awdiv@divisor
 11679  07D1  3000               	movlw	0
 11680  07D2  00A1               	movwf	___awdiv@divisor+1
 11681  07D3  082F               	movf	detected@dev_addr,w
 11682  07D4  00A9               	movwf	??_detected
 11683  07D5  01AA               	clrf	??_detected+1
 11684  07D6  0829               	movf	??_detected,w
 11685  07D7  00A2               	movwf	___awdiv@dividend
 11686  07D8  082A               	movf	??_detected+1,w
 11687  07D9  00A3               	movwf	___awdiv@dividend+1
 11688  07DA  3188  2078  3187   	fcall	___awdiv
 11689  07DD  0020               	movlb	0	; select bank0
 11690  07DE  0820               	movf	?___awdiv,w
 11691  07DF  00AB               	movwf	??_detected+2
 11692  07E0  082B               	movf	??_detected+2,w
 11693  07E1  00AC               	movwf	detected@y
 11694                           
 11695                           ;main.c: 209: uint8_t x = dev_addr % 8;
 11696  07E2  082F               	movf	detected@dev_addr,w
 11697  07E3  3907               	andlw	7
 11698  07E4  00A9               	movwf	??_detected
 11699  07E5  0829               	movf	??_detected,w
 11700  07E6  00AD               	movwf	detected@x
 11701                           
 11702                           ;main.c: 210: bool exist = 0;
 11703  07E7  01AE               	clrf	detected@exist
 11704                           
 11705                           ;main.c: 211: if ((dev_map[y] & (0x01 << x)) > 0) {
 11706  07E8  082C               	movf	detected@y,w
 11707  07E9  3E20               	addlw	(low (_dev_map| (0+256)))& (0+255)
 11708  07EA  0086               	movwf	6
 11709  07EB  3001               	movlw	1	; select bank2/3
 11710  07EC  0087               	movwf	7
 11711  07ED  3001               	movlw	1
 11712  07EE  00A9               	movwf	??_detected
 11713  07EF  0A2D               	incf	detected@x,w
 11714  07F0  2FF2               	goto	u6074
 11715  07F1                     u6075:	
 11716  07F1  35A9               	lslf	??_detected,f
 11717  07F2                     u6074:	
 11718  07F2  0B89               	decfsz	9,f
 11719  07F3  2FF1               	goto	u6075
 11720  07F4  0829               	movf	??_detected,w
 11721  07F5  0501               	andwf	1,w
 11722  07F6  1903               	btfsc	3,2
 11723  07F7  2FFA               	goto	l5304
 11724                           
 11725                           ;main.c: 212: exist = 1;
 11726  07F8  01AE               	clrf	detected@exist
 11727  07F9  0AAE               	incf	detected@exist,f
 11728  07FA                     l5304:	
 11729                           
 11730                           ;main.c: 213: }
 11731                           ;main.c: 214: return exist;
 11732  07FA  082E               	movf	detected@exist,w
 11733  07FB  0008               	return
 11734  07FC                     __end_of_detected:	
 11735                           
 11736                           	psect	text54
 11737  0878                     __ptext54:	
 11738 ;; *************** function ___awdiv *****************
 11739 ;; Defined at:
 11740 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
 11741 ;; Parameters:    Size  Location     Type
 11742 ;;  divisor         2    0[BANK0 ] int 
 11743 ;;  dividend        2    2[BANK0 ] int 
 11744 ;; Auto vars:     Size  Location     Type
 11745 ;;  quotient        2    7[BANK0 ] int 
 11746 ;;  sign            1    6[BANK0 ] unsigned char 
 11747 ;;  counter         1    5[BANK0 ] unsigned char 
 11748 ;; Return value:  Size  Location     Type
 11749 ;;                  2    0[BANK0 ] int 
 11750 ;; Registers used:
 11751 ;;		wreg, status,2, status,0
 11752 ;; Tracked objects:
 11753 ;;		On entry : 0/0
 11754 ;;		On exit  : 0/0
 11755 ;;		Unchanged: 0/0
 11756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11757 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11758 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11759 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11760 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11761 ;;Total ram usage:        9 bytes
 11762 ;; Hardware stack levels used:    1
 11763 ;; Hardware stack levels required when called:    3
 11764 ;; This function calls:
 11765 ;;		Nothing
 11766 ;; This function is called by:
 11767 ;;		_init
 11768 ;;		_add_dev
 11769 ;;		_del_dev
 11770 ;;		_detected
 11771 ;;		_command_handler
 11772 ;;		_PROTOCOL_Print_TLV
 11773 ;; This function uses a non-reentrant model
 11774 ;;
 11775                           
 11776                           
 11777                           ;psect for function ___awdiv
 11778  0878                     ___awdiv:	
 11779                           
 11780                           ;incstack = 0
 11781                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 11782  0878  0020               	movlb	0	; select bank0
 11783  0879  01A6               	clrf	___awdiv@sign
 11784  087A  1FA1               	btfss	___awdiv@divisor+1,7
 11785  087B  2883               	goto	l5018
 11786  087C  09A0               	comf	___awdiv@divisor,f
 11787  087D  09A1               	comf	___awdiv@divisor+1,f
 11788  087E  0AA0               	incf	___awdiv@divisor,f
 11789  087F  1903               	skipnz
 11790  0880  0AA1               	incf	___awdiv@divisor+1,f
 11791  0881  01A6               	clrf	___awdiv@sign
 11792  0882  0AA6               	incf	___awdiv@sign,f
 11793  0883                     l5018:	
 11794  0883  1FA3               	btfss	___awdiv@dividend+1,7
 11795  0884  288E               	goto	l5024
 11796  0885  09A2               	comf	___awdiv@dividend,f
 11797  0886  09A3               	comf	___awdiv@dividend+1,f
 11798  0887  0AA2               	incf	___awdiv@dividend,f
 11799  0888  1903               	skipnz
 11800  0889  0AA3               	incf	___awdiv@dividend+1,f
 11801  088A  3001               	movlw	1
 11802  088B  00A4               	movwf	??___awdiv
 11803  088C  0824               	movf	??___awdiv,w
 11804  088D  06A6               	xorwf	___awdiv@sign,f
 11805  088E                     l5024:	
 11806  088E  01A7               	clrf	___awdiv@quotient
 11807  088F  01A8               	clrf	___awdiv@quotient+1
 11808  0890  0820               	movf	___awdiv@divisor,w
 11809  0891  0421               	iorwf	___awdiv@divisor+1,w
 11810  0892  1903               	btfsc	3,2
 11811  0893  28BD               	goto	l5046
 11812  0894  01A5               	clrf	___awdiv@counter
 11813  0895  0AA5               	incf	___awdiv@counter,f
 11814  0896                     l5034:	
 11815  0896  1BA1               	btfsc	___awdiv@divisor+1,7
 11816  0897  28A2               	goto	l5036
 11817  0898  3001               	movlw	1
 11818  0899                     u5615:	
 11819  0899  35A0               	lslf	___awdiv@divisor,f
 11820  089A  0DA1               	rlf	___awdiv@divisor+1,f
 11821  089B  0B89               	decfsz	9,f
 11822  089C  2899               	goto	u5615
 11823  089D  3001               	movlw	1
 11824  089E  00A4               	movwf	??___awdiv
 11825  089F  0824               	movf	??___awdiv,w
 11826  08A0  07A5               	addwf	___awdiv@counter,f
 11827  08A1  2896               	goto	l5034
 11828  08A2                     l5036:	
 11829  08A2  3001               	movlw	1
 11830  08A3                     u5635:	
 11831  08A3  35A7               	lslf	___awdiv@quotient,f
 11832  08A4  0DA8               	rlf	___awdiv@quotient+1,f
 11833  08A5  0B89               	decfsz	9,f
 11834  08A6  28A3               	goto	u5635
 11835  08A7  0821               	movf	___awdiv@divisor+1,w
 11836  08A8  0223               	subwf	___awdiv@dividend+1,w
 11837  08A9  1D03               	skipz
 11838  08AA  28AD               	goto	u5645
 11839  08AB  0820               	movf	___awdiv@divisor,w
 11840  08AC  0222               	subwf	___awdiv@dividend,w
 11841  08AD                     u5645:	
 11842  08AD  1C03               	skipc
 11843  08AE  28B4               	goto	l5042
 11844  08AF  0820               	movf	___awdiv@divisor,w
 11845  08B0  02A2               	subwf	___awdiv@dividend,f
 11846  08B1  0821               	movf	___awdiv@divisor+1,w
 11847  08B2  3BA3               	subwfb	___awdiv@dividend+1,f
 11848  08B3  1427               	bsf	___awdiv@quotient,0
 11849  08B4                     l5042:	
 11850  08B4  3001               	movlw	1
 11851  08B5                     u5655:	
 11852  08B5  36A1               	lsrf	___awdiv@divisor+1,f
 11853  08B6  0CA0               	rrf	___awdiv@divisor,f
 11854  08B7  0B89               	decfsz	9,f
 11855  08B8  28B5               	goto	u5655
 11856  08B9  3001               	movlw	1
 11857  08BA  02A5               	subwf	___awdiv@counter,f
 11858  08BB  1D03               	btfss	3,2
 11859  08BC  28A2               	goto	l5036
 11860  08BD                     l5046:	
 11861  08BD  0826               	movf	___awdiv@sign,w
 11862  08BE  1903               	btfsc	3,2
 11863  08BF  28C5               	goto	l5050
 11864  08C0  09A7               	comf	___awdiv@quotient,f
 11865  08C1  09A8               	comf	___awdiv@quotient+1,f
 11866  08C2  0AA7               	incf	___awdiv@quotient,f
 11867  08C3  1903               	skipnz
 11868  08C4  0AA8               	incf	___awdiv@quotient+1,f
 11869  08C5                     l5050:	
 11870  08C5  0828               	movf	___awdiv@quotient+1,w
 11871  08C6  00A1               	movwf	?___awdiv+1
 11872  08C7  0827               	movf	___awdiv@quotient,w
 11873  08C8  00A0               	movwf	?___awdiv
 11874  08C9  0008               	return
 11875  08CA                     __end_of___awdiv:	
 11876                           
 11877                           	psect	text55
 11878  09D0                     __ptext55:	
 11879 ;; *************** function _atoi *****************
 11880 ;; Defined at:
 11881 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\atoi.c"
 11882 ;; Parameters:    Size  Location     Type
 11883 ;;  s               2    6[BANK0 ] PTR const unsigned char 
 11884 ;;		 -> buf(48), cmd_buf(192), 
 11885 ;; Auto vars:     Size  Location     Type
 11886 ;;  a               2   11[BANK0 ] int 
 11887 ;;  sign            1   10[BANK0 ] unsigned char 
 11888 ;; Return value:  Size  Location     Type
 11889 ;;                  2    6[BANK0 ] int 
 11890 ;; Registers used:
 11891 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11892 ;; Tracked objects:
 11893 ;;		On entry : 0/0
 11894 ;;		On exit  : 0/0
 11895 ;;		Unchanged: 0/0
 11896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11897 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11898 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11899 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11900 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11901 ;;Total ram usage:        7 bytes
 11902 ;; Hardware stack levels used:    1
 11903 ;; Hardware stack levels required when called:    4
 11904 ;; This function calls:
 11905 ;;		___wmul
 11906 ;;		_isdigit
 11907 ;; This function is called by:
 11908 ;;		_exec_remote_cmd
 11909 ;;		_command_handler
 11910 ;;		_PROTOCOL_Loop
 11911 ;; This function uses a non-reentrant model
 11912 ;;
 11913                           
 11914                           
 11915                           ;psect for function _atoi
 11916  09D0                     _atoi:	
 11917  09D0                     l5394:	
 11918                           ;incstack = 0
 11919                           ; Regs used in _atoi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11920                           
 11921  09D0  0020               	movlb	0	; select bank0
 11922  09D1  0826               	movf	atoi@s,w
 11923  09D2  0086               	movwf	6
 11924  09D3  0827               	movf	atoi@s+1,w
 11925  09D4  0087               	movwf	7
 11926  09D5  3020               	movlw	32
 11927  09D6  0601               	xorwf	1,w
 11928  09D7  1D03               	btfss	3,2
 11929  09D8  29DF               	goto	l5396
 11930  09D9                     l5392:	
 11931  09D9  3001               	movlw	1
 11932  09DA  0020               	movlb	0	; select bank0
 11933  09DB  07A6               	addwf	atoi@s,f
 11934  09DC  3000               	movlw	0
 11935  09DD  3DA7               	addwfc	atoi@s+1,f
 11936  09DE  29D0               	goto	l5394
 11937  09DF                     l5396:	
 11938  09DF  0826               	movf	atoi@s,w
 11939  09E0  0086               	movwf	6
 11940  09E1  0827               	movf	atoi@s+1,w
 11941  09E2  0087               	movwf	7
 11942  09E3  3009               	movlw	9
 11943  09E4  0601               	xorwf	1,w
 11944  09E5  1903               	btfsc	3,2
 11945  09E6  29D9               	goto	l5392
 11946  09E7  01AB               	clrf	atoi@a
 11947  09E8  01AC               	clrf	atoi@a+1
 11948  09E9  01AA               	clrf	atoi@sign
 11949  09EA  0826               	movf	atoi@s,w
 11950  09EB  0086               	movwf	6
 11951  09EC  0827               	movf	atoi@s+1,w
 11952  09ED  0087               	movwf	7
 11953  09EE  302D               	movlw	45
 11954  09EF  0601               	xorwf	1,w
 11955  09F0  1D03               	btfss	3,2
 11956  09F1  29F7               	goto	l5406
 11957  09F2  3001               	movlw	1
 11958  09F3  00A8               	movwf	??_atoi
 11959  09F4  0828               	movf	??_atoi,w
 11960  09F5  07AA               	addwf	atoi@sign,f
 11961  09F6  29FF               	goto	l5412
 11962  09F7                     l5406:	
 11963  09F7  0826               	movf	atoi@s,w
 11964  09F8  0086               	movwf	6
 11965  09F9  0827               	movf	atoi@s+1,w
 11966  09FA  0087               	movwf	7
 11967  09FB  302B               	movlw	43
 11968  09FC  0601               	xorwf	1,w
 11969  09FD  1D03               	btfss	3,2
 11970  09FE  2A03               	goto	l5414
 11971  09FF                     l5412:	
 11972  09FF  3001               	movlw	1
 11973  0A00  07A6               	addwf	atoi@s,f
 11974  0A01  3000               	movlw	0
 11975  0A02  3DA7               	addwfc	atoi@s+1,f
 11976  0A03                     l5414:	
 11977  0A03  0826               	movf	atoi@s,w
 11978  0A04  0086               	movwf	6
 11979  0A05  0827               	movf	atoi@s+1,w
 11980  0A06  0087               	movwf	7
 11981  0A07  0801               	movf	1,w
 11982  0A08  3192  2208  3189   	fcall	_isdigit
 11983  0A0B  1C03               	btfss	3,0
 11984  0A0C  2A2C               	goto	l5416
 11985  0A0D  0020               	movlb	0	; select bank0
 11986  0A0E  082C               	movf	atoi@a+1,w
 11987  0A0F  00A1               	movwf	___wmul@multiplier+1
 11988  0A10  082B               	movf	atoi@a,w
 11989  0A11  00A0               	movwf	___wmul@multiplier
 11990  0A12  300A               	movlw	10
 11991  0A13  00A2               	movwf	___wmul@multiplicand
 11992  0A14  3000               	movlw	0
 11993  0A15  00A3               	movwf	___wmul@multiplicand+1
 11994  0A16  3193  231A  3189   	fcall	___wmul
 11995  0A19  0020               	movlb	0	; select bank0
 11996  0A1A  0826               	movf	atoi@s,w
 11997  0A1B  0086               	movwf	6
 11998  0A1C  0827               	movf	atoi@s+1,w
 11999  0A1D  0087               	movwf	7
 12000  0A1E  0801               	movf	1,w
 12001  0A1F  0720               	addwf	?___wmul,w
 12002  0A20  00A8               	movwf	??_atoi
 12003  0A21  0821               	movf	?___wmul+1,w
 12004  0A22  1803               	skipnc
 12005  0A23  0A21               	incf	?___wmul+1,w
 12006  0A24  00A9               	movwf	??_atoi+1
 12007  0A25  0828               	movf	??_atoi,w
 12008  0A26  3ED0               	addlw	208
 12009  0A27  00AB               	movwf	atoi@a
 12010  0A28  30FF               	movlw	255
 12011  0A29  3D29               	addwfc	??_atoi+1,w
 12012  0A2A  00AC               	movwf	atoi@a+1
 12013  0A2B  29FF               	goto	l5412
 12014  0A2C                     l5416:	
 12015  0A2C  0020               	movlb	0	; select bank0
 12016  0A2D  082A               	movf	atoi@sign,w
 12017  0A2E  1903               	btfsc	3,2
 12018  0A2F  2A3C               	goto	l5422
 12019  0A30  092B               	comf	atoi@a,w
 12020  0A31  00A8               	movwf	??_atoi
 12021  0A32  092C               	comf	atoi@a+1,w
 12022  0A33  00A9               	movwf	??_atoi+1
 12023  0A34  0AA8               	incf	??_atoi,f
 12024  0A35  1903               	skipnz
 12025  0A36  0AA9               	incf	??_atoi+1,f
 12026  0A37  0828               	movf	??_atoi,w
 12027  0A38  00A6               	movwf	?_atoi
 12028  0A39  0829               	movf	??_atoi+1,w
 12029  0A3A  00A7               	movwf	?_atoi+1
 12030  0A3B  0008               	return
 12031  0A3C                     l5422:	
 12032  0A3C  082C               	movf	atoi@a+1,w
 12033  0A3D  00A7               	movwf	?_atoi+1
 12034  0A3E  082B               	movf	atoi@a,w
 12035  0A3F  00A6               	movwf	?_atoi
 12036  0A40  0008               	return
 12037  0A41                     __end_of_atoi:	
 12038                           
 12039                           	psect	text56
 12040  1208                     __ptext56:	
 12041 ;; *************** function _isdigit *****************
 12042 ;; Defined at:
 12043 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
 12044 ;; Parameters:    Size  Location     Type
 12045 ;;  c               1    wreg     unsigned char 
 12046 ;; Auto vars:     Size  Location     Type
 12047 ;;  c               1    1[BANK0 ] unsigned char 
 12048 ;; Return value:  Size  Location     Type
 12049 ;;		None               void
 12050 ;; Registers used:
 12051 ;;		wreg, status,2, status,0
 12052 ;; Tracked objects:
 12053 ;;		On entry : 0/0
 12054 ;;		On exit  : 0/0
 12055 ;;		Unchanged: 0/0
 12056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12058 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12060 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12061 ;;Total ram usage:        2 bytes
 12062 ;; Hardware stack levels used:    1
 12063 ;; Hardware stack levels required when called:    3
 12064 ;; This function calls:
 12065 ;;		Nothing
 12066 ;; This function is called by:
 12067 ;;		_printf
 12068 ;;		_atoi
 12069 ;; This function uses a non-reentrant model
 12070 ;;
 12071                           
 12072                           
 12073                           ;psect for function _isdigit
 12074  1208                     _isdigit:	
 12075                           
 12076                           ;incstack = 0
 12077                           ; Regs used in _isdigit: [wreg+status,2+status,0]
 12078                           ;isdigit@c stored from wreg
 12079  1208  0020               	movlb	0	; select bank0
 12080  1209  00A1               	movwf	isdigit@c
 12081  120A  01A0               	clrf	_isdigit$1460
 12082  120B  303A               	movlw	58
 12083  120C  0221               	subwf	isdigit@c,w
 12084  120D  1803               	skipnc
 12085  120E  2A15               	goto	l4790
 12086  120F  3030               	movlw	48
 12087  1210  0221               	subwf	isdigit@c,w
 12088  1211  1C03               	skipc
 12089  1212  2A15               	goto	l4790
 12090  1213  01A0               	clrf	_isdigit$1460
 12091  1214  0AA0               	incf	_isdigit$1460,f
 12092  1215                     l4790:	
 12093  1215  0C20               	rrf	_isdigit$1460,w
 12094  1216  0008               	return
 12095  1217                     __end_of_isdigit:	
 12096                           
 12097                           	psect	text57
 12098  131A                     __ptext57:	
 12099 ;; *************** function ___wmul *****************
 12100 ;; Defined at:
 12101 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
 12102 ;; Parameters:    Size  Location     Type
 12103 ;;  multiplier      2    0[BANK0 ] unsigned int 
 12104 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 12105 ;; Auto vars:     Size  Location     Type
 12106 ;;  product         2    4[BANK0 ] unsigned int 
 12107 ;; Return value:  Size  Location     Type
 12108 ;;                  2    0[BANK0 ] unsigned int 
 12109 ;; Registers used:
 12110 ;;		wreg, status,2, status,0
 12111 ;; Tracked objects:
 12112 ;;		On entry : 0/0
 12113 ;;		On exit  : 0/0
 12114 ;;		Unchanged: 0/0
 12115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12116 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12117 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12119 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12120 ;;Total ram usage:        6 bytes
 12121 ;; Hardware stack levels used:    1
 12122 ;; Hardware stack levels required when called:    3
 12123 ;; This function calls:
 12124 ;;		Nothing
 12125 ;; This function is called by:
 12126 ;;		_exec_remote_cmd
 12127 ;;		_init
 12128 ;;		_put_cmd
 12129 ;;		_printf
 12130 ;;		_atoi
 12131 ;; This function uses a non-reentrant model
 12132 ;;
 12133                           
 12134                           
 12135                           ;psect for function ___wmul
 12136  131A                     ___wmul:	
 12137                           
 12138                           ;incstack = 0
 12139                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 12140  131A  0020               	movlb	0	; select bank0
 12141  131B  01A4               	clrf	___wmul@product
 12142  131C  01A5               	clrf	___wmul@product+1
 12143  131D                     l4796:	
 12144  131D  1C20               	btfss	___wmul@multiplier,0
 12145  131E  2B23               	goto	l1117
 12146  131F  0822               	movf	___wmul@multiplicand,w
 12147  1320  07A4               	addwf	___wmul@product,f
 12148  1321  0823               	movf	___wmul@multiplicand+1,w
 12149  1322  3DA5               	addwfc	___wmul@product+1,f
 12150  1323                     l1117:	
 12151  1323  3001               	movlw	1
 12152  1324                     u5145:	
 12153  1324  35A2               	lslf	___wmul@multiplicand,f
 12154  1325  0DA3               	rlf	___wmul@multiplicand+1,f
 12155  1326  0B89               	decfsz	9,f
 12156  1327  2B24               	goto	u5145
 12157  1328  3001               	movlw	1
 12158  1329                     u5155:	
 12159  1329  36A1               	lsrf	___wmul@multiplier+1,f
 12160  132A  0CA0               	rrf	___wmul@multiplier,f
 12161  132B  0B89               	decfsz	9,f
 12162  132C  2B29               	goto	u5155
 12163  132D  0820               	movf	___wmul@multiplier,w
 12164  132E  0421               	iorwf	___wmul@multiplier+1,w
 12165  132F  1D03               	btfss	3,2
 12166  1330  2B1D               	goto	l4796
 12167  1331  0825               	movf	___wmul@product+1,w
 12168  1332  00A1               	movwf	?___wmul+1
 12169  1333  0824               	movf	___wmul@product,w
 12170  1334  00A0               	movwf	?___wmul
 12171  1335  0008               	return
 12172  1336                     __end_of___wmul:	
 12173                           
 12174                           	psect	text58
 12175  1391                     __ptext58:	
 12176 ;; *************** function _DATAEE_WriteByte *****************
 12177 ;; Defined at:
 12178 ;;		line 180 in file "mcc_generated_files/memory.c"
 12179 ;; Parameters:    Size  Location     Type
 12180 ;;  bAdd            1    wreg     unsigned char 
 12181 ;;  bData           1    0[BANK0 ] unsigned char 
 12182 ;; Auto vars:     Size  Location     Type
 12183 ;;  bAdd            1    1[BANK0 ] unsigned char 
 12184 ;;  GIEBitValue     1    2[BANK0 ] unsigned char 
 12185 ;; Return value:  Size  Location     Type
 12186 ;;                  1    wreg      void 
 12187 ;; Registers used:
 12188 ;;		wreg, status,2, status,0
 12189 ;; Tracked objects:
 12190 ;;		On entry : 0/0
 12191 ;;		On exit  : 0/0
 12192 ;;		Unchanged: 0/0
 12193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12194 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12195 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12196 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12197 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12198 ;;Total ram usage:        3 bytes
 12199 ;; Hardware stack levels used:    1
 12200 ;; Hardware stack levels required when called:    3
 12201 ;; This function calls:
 12202 ;;		Nothing
 12203 ;; This function is called by:
 12204 ;;		_command_handler
 12205 ;;		_PROTOCOL_Write_Device_Address
 12206 ;;		_PROTOCOL_SAV
 12207 ;; This function uses a non-reentrant model
 12208 ;;
 12209                           
 12210                           
 12211                           ;psect for function _DATAEE_WriteByte
 12212  1391                     _DATAEE_WriteByte:	
 12213                           
 12214                           ;incstack = 0
 12215                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
 12216                           ;DATAEE_WriteByte@bAdd stored from wreg
 12217  1391  0020               	movlb	0	; select bank0
 12218  1392  00A1               	movwf	DATAEE_WriteByte@bAdd
 12219                           
 12220                           ;memory.c: 182: uint8_t GIEBitValue = 0;
 12221  1393  01A2               	clrf	DATAEE_WriteByte@GIEBitValue
 12222                           
 12223                           ;memory.c: 184: EEADRL = (bAdd & 0x0ff);
 12224  1394  0821               	movf	DATAEE_WriteByte@bAdd,w
 12225  1395  0023               	movlb	3	; select bank3
 12226  1396  0091               	movwf	17	;volatile
 12227                           
 12228                           ;memory.c: 185: EEDATL = bData;
 12229  1397  0020               	movlb	0	; select bank0
 12230  1398  0820               	movf	DATAEE_WriteByte@bData,w
 12231  1399  0023               	movlb	3	; select bank3
 12232  139A  0093               	movwf	19	;volatile
 12233                           
 12234                           ;memory.c: 186: EECON1bits.EEPGD = 0;
 12235  139B  1395               	bcf	21,7	;volsfr
 12236                           
 12237                           ;memory.c: 187: EECON1bits.CFGS = 0;
 12238  139C  1315               	bcf	21,6	;volsfr
 12239                           
 12240                           ;memory.c: 188: EECON1bits.WREN = 1;
 12241  139D  1515               	bsf	21,2	;volsfr
 12242                           
 12243                           ;memory.c: 190: GIEBitValue = INTCONbits.GIE;
 12244  139E  3000               	movlw	0
 12245  139F  1B8B               	btfsc	11,7	;volatile
 12246  13A0  3001               	movlw	1
 12247  13A1  0020               	movlb	0	; select bank0
 12248  13A2  00A2               	movwf	DATAEE_WriteByte@GIEBitValue
 12249                           
 12250                           ;memory.c: 191: INTCONbits.GIE = 0;
 12251  13A3  138B               	bcf	11,7	;volatile
 12252                           
 12253                           ;memory.c: 192: EECON2 = 0x55;
 12254  13A4  3055               	movlw	85
 12255  13A5  0023               	movlb	3	; select bank3
 12256  13A6  0096               	movwf	22	;volsfr
 12257                           
 12258                           ;memory.c: 193: EECON2 = 0xAA;
 12259  13A7  30AA               	movlw	170
 12260  13A8  0096               	movwf	22	;volsfr
 12261                           
 12262                           ;memory.c: 194: EECON1bits.WR = 1;
 12263  13A9  1495               	bsf	21,1	;volsfr
 12264  13AA                     l188:	
 12265                           ;memory.c: 197: {
 12266                           
 12267                           ;memory.c: 196: while (EECON1bits.WR)
 12268                           
 12269  13AA  1895               	btfsc	21,1	;volsfr
 12270  13AB  2BAA               	goto	l188
 12271                           
 12272                           ;memory.c: 198: }
 12273                           ;memory.c: 200: EECON1bits.WREN = 0;
 12274  13AC  1115               	bcf	21,2	;volsfr
 12275                           
 12276                           ;memory.c: 201: INTCONbits.GIE = GIEBitValue;
 12277  13AD  0020               	movlb	0	; select bank0
 12278  13AE  0C22               	rrf	DATAEE_WriteByte@GIEBitValue,w
 12279  13AF  1C03               	skipc
 12280  13B0  138B               	bcf	11,7	;volatile
 12281  13B1  1803               	skipnc
 12282  13B2  178B               	bsf	11,7	;volatile
 12283  13B3  0008               	return
 12284  13B4                     __end_of_DATAEE_WriteByte:	
 12285                           
 12286                           	psect	text59
 12287  1371                     __ptext59:	
 12288 ;; *************** function _EUSART_Read *****************
 12289 ;; Defined at:
 12290 ;;		line 112 in file "mcc_generated_files/eusart.c"
 12291 ;; Parameters:    Size  Location     Type
 12292 ;;		None
 12293 ;; Auto vars:     Size  Location     Type
 12294 ;;  readValue       1    1[BANK0 ] unsigned char 
 12295 ;; Return value:  Size  Location     Type
 12296 ;;                  1    wreg      unsigned char 
 12297 ;; Registers used:
 12298 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12299 ;; Tracked objects:
 12300 ;;		On entry : 0/0
 12301 ;;		On exit  : 0/0
 12302 ;;		Unchanged: 0/0
 12303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12305 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12306 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12307 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12308 ;;Total ram usage:        2 bytes
 12309 ;; Hardware stack levels used:    1
 12310 ;; Hardware stack levels required when called:    3
 12311 ;; This function calls:
 12312 ;;		Nothing
 12313 ;; This function is called by:
 12314 ;;		_PROTOCOL_Loop
 12315 ;;		_getch
 12316 ;; This function uses a non-reentrant model
 12317 ;;
 12318                           
 12319                           
 12320                           ;psect for function _EUSART_Read
 12321  1371                     _EUSART_Read:	
 12322                           
 12323                           ;eusart.c: 114: uint8_t readValue = 0;
 12324                           
 12325                           ;incstack = 0
 12326                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
 12327  1371  0020               	movlb	0	; select bank0
 12328  1372  01A1               	clrf	EUSART_Read@readValue
 12329  1373                     l5718:	
 12330                           ;eusart.c: 117: {
 12331                           
 12332                           ;eusart.c: 116: while(0 == eusartRxCount)
 12333                           
 12334  1373  0021               	movlb	1	; select bank1
 12335  1374  0866               	movf	_eusartRxCount^(0+128),w	;volatile
 12336  1375  1903               	btfsc	3,2
 12337  1376  2B73               	goto	l5718
 12338                           
 12339                           ;eusart.c: 118: }
 12340                           ;eusart.c: 120: readValue = eusartRxBuffer[eusartRxTail++];
 12341  1377  0020               	movlb	0	; select bank0
 12342  1378  086C               	movf	_eusartRxTail,w
 12343  1379  3E20               	addlw	(low (_eusartRxBuffer| (0+768)))& (0+255)
 12344  137A  0086               	movwf	6
 12345  137B  3003               	movlw	3	; select bank6/7
 12346  137C  0087               	movwf	7
 12347  137D  0801               	movf	1,w
 12348  137E  00A0               	movwf	??_EUSART_Read
 12349  137F  0820               	movf	??_EUSART_Read,w
 12350  1380  00A1               	movwf	EUSART_Read@readValue
 12351  1381  3001               	movlw	1
 12352  1382  00A0               	movwf	??_EUSART_Read
 12353  1383  0820               	movf	??_EUSART_Read,w
 12354  1384  07EC               	addwf	_eusartRxTail,f	;volatile
 12355                           
 12356                           ;eusart.c: 121: if(sizeof(eusartRxBuffer) <= eusartRxTail)
 12357  1385  3040               	movlw	64
 12358  1386  026C               	subwf	_eusartRxTail,w	;volatile
 12359  1387  1803               	btfsc	3,0
 12360                           
 12361                           ;eusart.c: 122: {
 12362                           ;eusart.c: 123: eusartRxTail = 0;
 12363  1388  01EC               	clrf	_eusartRxTail	;volatile
 12364                           
 12365                           ;eusart.c: 124: }
 12366                           ;eusart.c: 125: PIE1bits.RCIE = 0;
 12367  1389  0021               	movlb	1	; select bank1
 12368  138A  1291               	bcf	17,5	;volatile
 12369                           
 12370                           ;eusart.c: 126: eusartRxCount--;
 12371  138B  3001               	movlw	1
 12372  138C  02E6               	subwf	_eusartRxCount^(0+128),f	;volatile
 12373                           
 12374                           ;eusart.c: 127: PIE1bits.RCIE = 1;
 12375  138D  1691               	bsf	17,5	;volatile
 12376                           
 12377                           ;eusart.c: 129: return readValue;
 12378  138E  0020               	movlb	0	; select bank0
 12379  138F  0821               	movf	EUSART_Read@readValue,w
 12380  1390  0008               	return
 12381  1391                     __end_of_EUSART_Read:	
 12382                           
 12383                           	psect	text60
 12384  0826                     __ptext60:	
 12385 ;; *************** function _PROTOCOL_Initialize *****************
 12386 ;; Defined at:
 12387 ;;		line 60 in file "protocol.c"
 12388 ;; Parameters:    Size  Location     Type
 12389 ;;  device_id       2    1[BANK0 ] PTR const unsigned char 
 12390 ;;		 -> STR_34(17), 
 12391 ;;  start_handle    1    3[BANK0 ] PTR void 
 12392 ;;		 -> NULL(0), 
 12393 ;;  stop_handler    1    4[BANK0 ] PTR void 
 12394 ;;		 -> NULL(0), 
 12395 ;;  set_handler     1    5[BANK0 ] PTR void 
 12396 ;;		 -> NULL(0), 
 12397 ;;  inv_handler     2    6[BANK0 ] PTR void 
 12398 ;;		 -> inv_handler(1), 
 12399 ;;  scaler          1    8[BANK0 ] unsigned char 
 12400 ;; Auto vars:     Size  Location     Type
 12401 ;;		None
 12402 ;; Return value:  Size  Location     Type
 12403 ;;                  1    wreg      void 
 12404 ;; Registers used:
 12405 ;;		wreg, status,2, status,0, pclath, cstack
 12406 ;; Tracked objects:
 12407 ;;		On entry : 0/0
 12408 ;;		On exit  : 0/0
 12409 ;;		Unchanged: 0/0
 12410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12411 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12413 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12414 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12415 ;;Total ram usage:       10 bytes
 12416 ;; Hardware stack levels used:    1
 12417 ;; Hardware stack levels required when called:    4
 12418 ;; This function calls:
 12419 ;;		_DATAEE_ReadByte
 12420 ;; This function is called by:
 12421 ;;		_main
 12422 ;; This function uses a non-reentrant model
 12423 ;;
 12424                           
 12425                           
 12426                           ;psect for function _PROTOCOL_Initialize
 12427  0826                     _PROTOCOL_Initialize:	
 12428                           
 12429                           ;protocol.c: 61: device_id_ = device_id;
 12430                           
 12431                           ;incstack = 0
 12432                           ; Regs used in _PROTOCOL_Initialize: [wreg+status,2+status,0+pclath+cstack]
 12433  0826  0020               	movlb	0	; select bank0
 12434  0827  0822               	movf	PROTOCOL_Initialize@device_id+1,w
 12435  0828  0022               	movlb	2	; select bank2
 12436  0829  00A7               	movwf	(_device_id_+1)^(0+256)
 12437  082A  0020               	movlb	0	; select bank0
 12438  082B  0821               	movf	PROTOCOL_Initialize@device_id,w
 12439  082C  0022               	movlb	2	; select bank2
 12440  082D  00A6               	movwf	_device_id_^(0+256)
 12441                           
 12442                           ;protocol.c: 62: PROTOCOL_Start_Handler = start_handler;
 12443  082E  0020               	movlb	0	; select bank0
 12444  082F  0823               	movf	PROTOCOL_Initialize@start_handler,w
 12445  0830  00A9               	movwf	??_PROTOCOL_Initialize
 12446  0831  3000               	movlw	0
 12447  0832  00AA               	movwf	??_PROTOCOL_Initialize+1
 12448  0833  0829               	movf	??_PROTOCOL_Initialize,w
 12449  0834  0022               	movlb	2	; select bank2
 12450  0835  00B4               	movwf	_PROTOCOL_Start_Handler^(0+256)
 12451  0836  0020               	movlb	0	; select bank0
 12452  0837  082A               	movf	??_PROTOCOL_Initialize+1,w
 12453  0838  0022               	movlb	2	; select bank2
 12454  0839  00B5               	movwf	(_PROTOCOL_Start_Handler+1)^(0+256)
 12455                           
 12456                           ;protocol.c: 63: PROTOCOL_Stop_Handler = stop_handler;
 12457  083A  0020               	movlb	0	; select bank0
 12458  083B  0824               	movf	PROTOCOL_Initialize@stop_handler,w
 12459  083C  00A9               	movwf	??_PROTOCOL_Initialize
 12460  083D  3000               	movlw	0
 12461  083E  00AA               	movwf	??_PROTOCOL_Initialize+1
 12462  083F  0829               	movf	??_PROTOCOL_Initialize,w
 12463  0840  0022               	movlb	2	; select bank2
 12464  0841  00B2               	movwf	_PROTOCOL_Stop_Handler^(0+256)
 12465  0842  0020               	movlb	0	; select bank0
 12466  0843  082A               	movf	??_PROTOCOL_Initialize+1,w
 12467  0844  0022               	movlb	2	; select bank2
 12468  0845  00B3               	movwf	(_PROTOCOL_Stop_Handler+1)^(0+256)
 12469                           
 12470                           ;protocol.c: 64: PROTOCOL_Set_Handler = set_handler;
 12471  0846  0020               	movlb	0	; select bank0
 12472  0847  0825               	movf	PROTOCOL_Initialize@set_handler,w
 12473  0848  00A9               	movwf	??_PROTOCOL_Initialize
 12474  0849  3000               	movlw	0
 12475  084A  00AA               	movwf	??_PROTOCOL_Initialize+1
 12476  084B  0829               	movf	??_PROTOCOL_Initialize,w
 12477  084C  0022               	movlb	2	; select bank2
 12478  084D  00B0               	movwf	_PROTOCOL_Set_Handler^(0+256)
 12479  084E  0020               	movlb	0	; select bank0
 12480  084F  082A               	movf	??_PROTOCOL_Initialize+1,w
 12481  0850  0022               	movlb	2	; select bank2
 12482  0851  00B1               	movwf	(_PROTOCOL_Set_Handler+1)^(0+256)
 12483                           
 12484                           ;protocol.c: 67: value = DATAEE_ReadByte(1);
 12485  0852  3001               	movlw	1
 12486  0853  3191  21FB  3188   	fcall	_DATAEE_ReadByte
 12487  0856  0020               	movlb	0	; select bank0
 12488  0857  00A9               	movwf	??_PROTOCOL_Initialize
 12489  0858  0829               	movf	??_PROTOCOL_Initialize,w
 12490  0859  0021               	movlb	1	; select bank1
 12491  085A  00DE               	movwf	_value^(0+128)
 12492                           
 12493                           ;protocol.c: 69: slave_address = DATAEE_ReadByte(0);
 12494  085B  3000               	movlw	0
 12495  085C  3191  21FB         	fcall	_DATAEE_ReadByte
 12496  085E  0020               	movlb	0	; select bank0
 12497  085F  00A9               	movwf	??_PROTOCOL_Initialize
 12498  0860  0829               	movf	??_PROTOCOL_Initialize,w
 12499  0861  0021               	movlb	1	; select bank1
 12500  0862  00E0               	movwf	_slave_address^(0+128)
 12501                           
 12502                           ;protocol.c: 72: readbuf.status = COMPLETE;
 12503  0863  3003               	movlw	3
 12504  0864  0020               	movlb	0	; select bank0
 12505  0865  00A9               	movwf	??_PROTOCOL_Initialize
 12506  0866  0829               	movf	??_PROTOCOL_Initialize,w
 12507  0867  0022               	movlb	2	; select bank2
 12508  0868  00CA               	movwf	(_readbuf^(0+256)+4)
 12509                           
 12510                           ;protocol.c: 73: PROTOCOL_Inv_Handler = inv_handler;
 12511  0869  0020               	movlb	0	; select bank0
 12512  086A  0827               	movf	PROTOCOL_Initialize@inv_handler+1,w
 12513  086B  0022               	movlb	2	; select bank2
 12514  086C  00AB               	movwf	(_PROTOCOL_Inv_Handler+1)^(0+256)
 12515  086D  0020               	movlb	0	; select bank0
 12516  086E  0826               	movf	PROTOCOL_Initialize@inv_handler,w
 12517  086F  0022               	movlb	2	; select bank2
 12518  0870  00AA               	movwf	_PROTOCOL_Inv_Handler^(0+256)
 12519                           
 12520                           ;protocol.c: 74: tmr_scaler = scaler;
 12521  0871  0020               	movlb	0	; select bank0
 12522  0872  0828               	movf	PROTOCOL_Initialize@scaler,w
 12523  0873  00A9               	movwf	??_PROTOCOL_Initialize
 12524  0874  0829               	movf	??_PROTOCOL_Initialize,w
 12525  0875  0022               	movlb	2	; select bank2
 12526  0876  00E2               	movwf	_tmr_scaler^(0+256)
 12527  0877  0008               	return
 12528  0878                     __end_of_PROTOCOL_Initialize:	
 12529                           
 12530                           	psect	text61
 12531  11FB                     __ptext61:	
 12532 ;; *************** function _DATAEE_ReadByte *****************
 12533 ;; Defined at:
 12534 ;;		line 204 in file "mcc_generated_files/memory.c"
 12535 ;; Parameters:    Size  Location     Type
 12536 ;;  bAdd            1    wreg     unsigned char 
 12537 ;; Auto vars:     Size  Location     Type
 12538 ;;  bAdd            1    0[BANK0 ] unsigned char 
 12539 ;; Return value:  Size  Location     Type
 12540 ;;                  1    wreg      unsigned char 
 12541 ;; Registers used:
 12542 ;;		wreg
 12543 ;; Tracked objects:
 12544 ;;		On entry : 0/0
 12545 ;;		On exit  : 0/0
 12546 ;;		Unchanged: 0/0
 12547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12549 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12551 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12552 ;;Total ram usage:        1 bytes
 12553 ;; Hardware stack levels used:    1
 12554 ;; Hardware stack levels required when called:    3
 12555 ;; This function calls:
 12556 ;;		Nothing
 12557 ;; This function is called by:
 12558 ;;		_init
 12559 ;;		_PROTOCOL_Initialize
 12560 ;; This function uses a non-reentrant model
 12561 ;;
 12562                           
 12563                           
 12564                           ;psect for function _DATAEE_ReadByte
 12565  11FB                     _DATAEE_ReadByte:	
 12566                           
 12567                           ;incstack = 0
 12568                           ; Regs used in _DATAEE_ReadByte: [wreg]
 12569                           ;DATAEE_ReadByte@bAdd stored from wreg
 12570  11FB  0020               	movlb	0	; select bank0
 12571  11FC  00A0               	movwf	DATAEE_ReadByte@bAdd
 12572                           
 12573                           ;memory.c: 206: EEADRL = (bAdd & 0x0ff);
 12574  11FD  0820               	movf	DATAEE_ReadByte@bAdd,w
 12575  11FE  0023               	movlb	3	; select bank3
 12576  11FF  0091               	movwf	17	;volatile
 12577                           
 12578                           ;memory.c: 207: EECON1bits.CFGS = 0;
 12579  1200  1315               	bcf	21,6	;volsfr
 12580                           
 12581                           ;memory.c: 208: EECON1bits.EEPGD = 0;
 12582  1201  1395               	bcf	21,7	;volsfr
 12583                           
 12584                           ;memory.c: 209: EECON1bits.RD = 1;
 12585  1202  1415               	bsf	21,0	;volsfr
 12586                           
 12587                           ;memory.c: 210: __nop();
 12588  1203  0000               	nop
 12589                           
 12590                           ;memory.c: 211: __nop();
 12591  1204  0000               	nop
 12592                           
 12593                           ;memory.c: 213: return (EEDATL);
 12594  1205  0023               	movlb	3	; select bank3
 12595  1206  0813               	movf	19,w	;volatile
 12596  1207  0008               	return
 12597  1208                     __end_of_DATAEE_ReadByte:	
 12598                           
 12599                           	psect	intentry
 12600  0004                     __pintentry:	
 12601 ;; *************** function _INTERRUPT_InterruptManager *****************
 12602 ;; Defined at:
 12603 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
 12604 ;; Parameters:    Size  Location     Type
 12605 ;;		None
 12606 ;; Auto vars:     Size  Location     Type
 12607 ;;		None
 12608 ;; Return value:  Size  Location     Type
 12609 ;;                  1    wreg      void 
 12610 ;; Registers used:
 12611 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12612 ;; Tracked objects:
 12613 ;;		On entry : 0/0
 12614 ;;		On exit  : 0/0
 12615 ;;		Unchanged: 0/0
 12616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12618 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12619 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12620 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12621 ;;Total ram usage:        1 bytes
 12622 ;; Hardware stack levels used:    1
 12623 ;; Hardware stack levels required when called:    2
 12624 ;; This function calls:
 12625 ;;		_EUSART_Receive_ISR
 12626 ;;		_EUSART_Transmit_ISR
 12627 ;;		_I2C1_BusCollisionISR
 12628 ;;		_I2C1_ISR
 12629 ;; This function is called by:
 12630 ;;		Interrupt level 1
 12631 ;; This function uses a non-reentrant model
 12632 ;;
 12633                           
 12634  0004                     _INTERRUPT_InterruptManager:	
 12635                           
 12636                           ;incstack = 0
 12637  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 12638                           
 12639                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12640  0005  3180               	pagesel	$
 12641  0006  0020               	movlb	0	; select bank0
 12642  0007  087F               	movf	127,w
 12643  0008  00FD               	movwf	??_INTERRUPT_InterruptManager
 12644                           
 12645                           ;interrupt_manager.c: 54: if(INTCONbits.PEIE == 1 && PIE1bits.TXIE == 1 && PIR1bits.TXIF
      +                           == 1)
 12646  0009  1F0B               	btfss	11,6	;volatile
 12647  000A  2815               	goto	i1l321
 12648  000B  0021               	movlb	1	; select bank1
 12649  000C  1E11               	btfss	17,4	;volatile
 12650  000D  2815               	goto	i1l321
 12651  000E  0020               	movlb	0	; select bank0
 12652  000F  1E11               	btfss	17,4	;volatile
 12653  0010  2815               	goto	i1l321
 12654                           
 12655                           ;interrupt_manager.c: 55: {
 12656                           ;interrupt_manager.c: 56: EUSART_Transmit_ISR();
 12657  0011  3192  22FE  3180   	fcall	_EUSART_Transmit_ISR
 12658                           
 12659                           ;interrupt_manager.c: 57: }
 12660  0014  2837               	goto	i1l329
 12661  0015                     i1l321:	
 12662                           
 12663                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits
      +                          .RCIF == 1)
 12664  0015  1F0B               	btfss	11,6	;volatile
 12665  0016  2821               	goto	i1l323
 12666  0017  0021               	movlb	1	; select bank1
 12667  0018  1E91               	btfss	17,5	;volatile
 12668  0019  2821               	goto	i1l323
 12669  001A  0020               	movlb	0	; select bank0
 12670  001B  1E91               	btfss	17,5	;volatile
 12671  001C  2821               	goto	i1l323
 12672                           
 12673                           ;interrupt_manager.c: 59: {
 12674                           ;interrupt_manager.c: 60: EUSART_Receive_ISR();
 12675  001D  3192  22E2  3180   	fcall	_EUSART_Receive_ISR
 12676                           
 12677                           ;interrupt_manager.c: 61: }
 12678  0020  2837               	goto	i1l329
 12679  0021                     i1l323:	
 12680                           
 12681                           ;interrupt_manager.c: 62: else if(INTCONbits.PEIE == 1 && PIE2bits.BCL1IE == 1 && PIR2bi
      +                          ts.BCL1IF == 1)
 12682  0021  1F0B               	btfss	11,6	;volatile
 12683  0022  282D               	goto	i1l325
 12684  0023  0021               	movlb	1	; select bank1
 12685  0024  1D92               	btfss	18,3	;volatile
 12686  0025  282D               	goto	i1l325
 12687  0026  0020               	movlb	0	; select bank0
 12688  0027  1D92               	btfss	18,3	;volatile
 12689  0028  282D               	goto	i1l325
 12690                           
 12691                           ;interrupt_manager.c: 63: {
 12692                           ;interrupt_manager.c: 64: I2C1_BusCollisionISR();
 12693  0029  3188  2000  3180   	fcall	_I2C1_BusCollisionISR
 12694                           
 12695                           ;interrupt_manager.c: 65: }
 12696  002C  2837               	goto	i1l329
 12697  002D                     i1l325:	
 12698                           
 12699                           ;interrupt_manager.c: 66: else if(INTCONbits.PEIE == 1 && PIE1bits.SSP1IE == 1 && PIR1bi
      +                          ts.SSP1IF == 1)
 12700  002D  1F0B               	btfss	11,6	;volatile
 12701  002E  2837               	goto	i1l329
 12702  002F  0021               	movlb	1	; select bank1
 12703  0030  1D91               	btfss	17,3	;volatile
 12704  0031  2837               	goto	i1l329
 12705  0032  0020               	movlb	0	; select bank0
 12706  0033  1D91               	btfss	17,3	;volatile
 12707  0034  2837               	goto	i1l329
 12708                           
 12709                           ;interrupt_manager.c: 67: {
 12710                           ;interrupt_manager.c: 68: I2C1_ISR();
 12711  0035  318B  2336         	fcall	_I2C1_ISR
 12712  0037                     i1l329:	
 12713                           ;interrupt_manager.c: 70: else
 12714                           ;interrupt_manager.c: 71: {
 12715                           
 12716                           ;interrupt_manager.c: 69: }
 12717                           
 12718  0037  087D               	movf	??_INTERRUPT_InterruptManager,w
 12719  0038  0020               	movlb	0	; select bank0
 12720  0039  00FF               	movwf	127
 12721  003A  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 12722  003B  0009               	retfie
 12723  003C                     __end_of_INTERRUPT_InterruptManager:	
 12724                           
 12725                           	psect	text63
 12726  0B36                     __ptext63:	
 12727 ;; *************** function _I2C1_ISR *****************
 12728 ;; Defined at:
 12729 ;;		line 233 in file "mcc_generated_files/i2c1.c"
 12730 ;; Parameters:    Size  Location     Type
 12731 ;;		None
 12732 ;; Auto vars:     Size  Location     Type
 12733 ;;		None
 12734 ;; Return value:  Size  Location     Type
 12735 ;;                  1    wreg      void 
 12736 ;; Registers used:
 12737 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12738 ;; Tracked objects:
 12739 ;;		On entry : 0/0
 12740 ;;		On exit  : 0/0
 12741 ;;		Unchanged: 0/0
 12742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12744 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12745 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12746 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12747 ;;Total ram usage:        4 bytes
 12748 ;; Hardware stack levels used:    1
 12749 ;; Hardware stack levels required when called:    1
 12750 ;; This function calls:
 12751 ;;		_I2C1_FunctionComplete
 12752 ;;		_I2C1_Stop
 12753 ;; This function is called by:
 12754 ;;		_INTERRUPT_InterruptManager
 12755 ;; This function uses a non-reentrant model
 12756 ;;
 12757                           
 12758                           
 12759                           ;psect for function _I2C1_ISR
 12760  0B36                     _I2C1_ISR:	
 12761                           
 12762                           ;i2c1.c: 236: static uint8_t *pi2c_buf_ptr;
 12763                           ;i2c1.c: 237: static uint16_t i2c_address = 0;
 12764                           ;i2c1.c: 238: static uint8_t i2c_bytes_left = 0;
 12765                           ;i2c1.c: 239: static uint8_t i2c_10bit_address_restart = 0;
 12766                           ;i2c1.c: 241: PIR1bits.SSP1IF = 0;
 12767                           
 12768                           ;incstack = 0
 12769                           ; Regs used in _I2C1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12770  0B36  0020               	movlb	0	; select bank0
 12771  0B37  1191               	bcf	17,3	;volatile
 12772                           
 12773                           ;i2c1.c: 245: if(SSP1CON1bits.WCOL)
 12774  0B38  0024               	movlb	4	; select bank4
 12775  0B39  1F95               	btfss	21,7	;volatile
 12776  0B3A  2C81               	goto	i1l5986
 12777                           
 12778                           ;i2c1.c: 246: {
 12779                           ;i2c1.c: 248: SSP1CON1bits.WCOL = 0;
 12780  0B3B  1395               	bcf	21,7	;volatile
 12781                           
 12782                           ;i2c1.c: 249: i2c1_state = S_MASTER_IDLE;
 12783  0B3C  0021               	movlb	1	; select bank1
 12784  0B3D  01EC               	clrf	_i2c1_state^(0+128)
 12785                           
 12786                           ;i2c1.c: 250: *(p_i2c1_current->pTrFlag) = I2C1_MESSAGE_FAIL;
 12787  0B3E  0869               	movf	_p_i2c1_current^(0+128),w
 12788  0B3F  3E02               	addlw	2
 12789  0B40  0086               	movwf	6
 12790  0B41  3001               	movlw	1	; select bank2/3
 12791  0B42  0087               	movwf	7
 12792  0B43  0801               	movf	1,w
 12793  0B44  0086               	movwf	6
 12794  0B45  0187               	clrf	7
 12795  0B46  0181               	clrf	1
 12796  0B47  0A81               	incf	1,f
 12797                           
 12798                           ;i2c1.c: 253: p_i2c1_current = (0);
 12799  0B48  01E9               	clrf	_p_i2c1_current^(0+128)
 12800                           
 12801                           ;i2c1.c: 255: return;
 12802  0B49  0008               	return
 12803  0B4A                     i1l60:	
 12804                           ;i2c1.c: 260: {
 12805                           ;i2c1.c: 261: case S_MASTER_IDLE:
 12806                           
 12807                           ;i2c1.c: 256: }
 12808                           ;i2c1.c: 259: switch(i2c1_state)
 12809                           
 12810                           
 12811                           ;i2c1.c: 263: if(i2c1_object.trStatus.s.empty != 1)
 12812  0B4A  18DB               	btfsc	(_i2c1_object^(0+128)+2),1
 12813  0B4B  0008               	return
 12814                           
 12815                           ;i2c1.c: 264: {
 12816                           ;i2c1.c: 266: p_i2c1_current = i2c1_object.pTrHead;
 12817  0B4C  085A               	movf	(low ((_i2c1_object| 0+1)))^(0+128),w
 12818  0B4D  00F9               	movwf	??_I2C1_ISR
 12819  0B4E  0879               	movf	??_I2C1_ISR,w
 12820  0B4F  00E9               	movwf	_p_i2c1_current^(0+128)
 12821                           
 12822                           ;i2c1.c: 267: i2c1_trb_count = i2c1_object.pTrHead->count;
 12823  0B50  085A               	movf	(low ((_i2c1_object| 0+1)))^(0+128),w
 12824  0B51  0086               	movwf	6
 12825  0B52  3001               	movlw	1	; select bank2/3
 12826  0B53  0087               	movwf	7
 12827  0B54  0801               	movf	1,w
 12828  0B55  00F9               	movwf	??_I2C1_ISR
 12829  0B56  0879               	movf	??_I2C1_ISR,w
 12830  0B57  00EB               	movwf	_i2c1_trb_count^(0+128)
 12831                           
 12832                           ;i2c1.c: 268: p_i2c1_trb_current = i2c1_object.pTrHead->ptrb_list;
 12833  0B58  085A               	movf	(low ((_i2c1_object| 0+1)))^(0+128),w
 12834  0B59  0086               	movwf	6
 12835  0B5A  3001               	movlw	1	; select bank2/3
 12836  0B5B  0087               	movwf	7
 12837  0B5C  3001               	movlw	1	; select bank2/3
 12838  0B5D  3F41               	moviw [1]fsr1
 12839  0B5E  00EA               	movwf	_p_i2c1_trb_current^(0+128)
 12840                           
 12841                           ;i2c1.c: 270: i2c1_object.pTrHead++;
 12842  0B5F  3003               	movlw	3
 12843  0B60  00F9               	movwf	??_I2C1_ISR
 12844  0B61  0879               	movf	??_I2C1_ISR,w
 12845  0B62  07DA               	addwf	(low ((_i2c1_object| 0+1)))^(0+128),f
 12846                           
 12847                           ;i2c1.c: 273: if(i2c1_object.pTrHead == (i2c1_tr_queue + 1))
 12848  0B63  085A               	movf	(low ((_i2c1_object| 0+1)))^(0+128),w
 12849  0B64  3A5C               	xorlw	(low ((_i2c1_tr_queue| (0+256)+3)))& (0+255)
 12850  0B65  1D03               	skipz
 12851  0B66  2B6B               	goto	i1l5876
 12852                           
 12853                           ;i2c1.c: 274: {
 12854                           ;i2c1.c: 276: i2c1_object.pTrHead = i2c1_tr_queue;
 12855  0B67  3059               	movlw	(low (_i2c1_tr_queue| (0+256)))& (0+255)
 12856  0B68  00F9               	movwf	??_I2C1_ISR
 12857  0B69  0879               	movf	??_I2C1_ISR,w
 12858  0B6A  00DA               	movwf	(low ((_i2c1_object| 0+1)))^(0+128)
 12859  0B6B                     i1l5876:	
 12860                           
 12861                           ;i2c1.c: 277: }
 12862                           ;i2c1.c: 281: i2c1_object.trStatus.s.full = 0;
 12863  0B6B  105B               	bcf	(_i2c1_object^(0+128)+2),0
 12864                           
 12865                           ;i2c1.c: 284: if(i2c1_object.pTrHead == i2c1_object.pTrTail)
 12866  0B6C  085A               	movf	(low ((_i2c1_object| 0+1)))^(0+128),w
 12867  0B6D  0659               	xorwf	_i2c1_object^(0+128),w
 12868  0B6E  1903               	btfsc	3,2
 12869                           
 12870                           ;i2c1.c: 285: {
 12871                           ;i2c1.c: 287: i2c1_object.trStatus.s.empty = 1;
 12872  0B6F  14DB               	bsf	(_i2c1_object^(0+128)+2),1
 12873                           
 12874                           ;i2c1.c: 288: }
 12875                           ;i2c1.c: 291: SSP1CON2bits.SEN = 1;
 12876  0B70  0024               	movlb	4	; select bank4
 12877  0B71  1416               	bsf	22,0	;volatile
 12878                           
 12879                           ;i2c1.c: 294: i2c1_state = S_MASTER_SEND_ADDR;
 12880  0B72  3002               	movlw	2
 12881  0B73  00F9               	movwf	??_I2C1_ISR
 12882  0B74  0879               	movf	??_I2C1_ISR,w
 12883  0B75  0021               	movlb	1	; select bank1
 12884  0B76  00EC               	movwf	_i2c1_state^(0+128)
 12885                           
 12886                           ;i2c1.c: 295: }
 12887                           ;i2c1.c: 297: break;
 12888  0B77  0008               	return
 12889  0B78                     i1l65:	
 12890                           ;i2c1.c: 299: case S_MASTER_RESTART:
 12891                           
 12892                           
 12893                           ;i2c1.c: 304: SSP1CON2bits.RSEN = 1;
 12894  0B78  0024               	movlb	4	; select bank4
 12895  0B79  1496               	bsf	22,1	;volatile
 12896                           
 12897                           ;i2c1.c: 307: i2c1_state = S_MASTER_SEND_ADDR;
 12898  0B7A  3002               	movlw	2
 12899  0B7B  00F9               	movwf	??_I2C1_ISR
 12900  0B7C  0879               	movf	??_I2C1_ISR,w
 12901  0B7D  0021               	movlb	1	; select bank1
 12902  0B7E  00EC               	movwf	_i2c1_state^(0+128)
 12903                           
 12904                           ;i2c1.c: 309: break;
 12905  0B7F  0008               	return
 12906  0B80                     i1l66:	
 12907                           ;i2c1.c: 311: case S_MASTER_SEND_ADDR_10BIT_LSB:
 12908                           
 12909                           
 12910                           ;i2c1.c: 313: if(SSP1CON2bits.ACKSTAT)
 12911  0B80  0024               	movlb	4	; select bank4
 12912  0B81  1F16               	btfss	22,6	;volatile
 12913  0B82  2B8C               	goto	i1l5888
 12914                           
 12915                           ;i2c1.c: 314: {
 12916                           ;i2c1.c: 315: i2c1_object.i2cErrors++;
 12917  0B83  3001               	movlw	1
 12918  0B84  00F9               	movwf	??_I2C1_ISR
 12919  0B85  0879               	movf	??_I2C1_ISR,w
 12920  0B86  0021               	movlb	1	; select bank1
 12921  0B87  07DD               	addwf	(_i2c1_object^(0+128)+4),f
 12922                           
 12923                           ;i2c1.c: 316: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
 12924  0B88  3004               	movlw	4
 12925  0B89  3192  2293         	fcall	_I2C1_Stop
 12926                           
 12927                           ;i2c1.c: 317: }
 12928  0B8B  0008               	return
 12929  0B8C                     i1l5888:	
 12930                           
 12931                           ;i2c1.c: 318: else
 12932                           ;i2c1.c: 319: {
 12933                           ;i2c1.c: 321: SSP1BUF = (i2c_address >> 1) & 0x00FF;
 12934  0B8C  0020               	movlb	0	; select bank0
 12935  0B8D  086E               	movf	I2C1_ISR@i2c_address+1,w
 12936  0B8E  00FA               	movwf	??_I2C1_ISR+1
 12937  0B8F  086D               	movf	I2C1_ISR@i2c_address,w
 12938  0B90  00F9               	movwf	??_I2C1_ISR
 12939  0B91  36FA               	lsrf	??_I2C1_ISR+1,f
 12940  0B92  0CF9               	rrf	??_I2C1_ISR,f
 12941  0B93  0879               	movf	??_I2C1_ISR,w
 12942  0B94  0024               	movlb	4	; select bank4
 12943  0B95  0091               	movwf	17	;volatile
 12944                           
 12945                           ;i2c1.c: 324: if(i2c_address & 0x01)
 12946  0B96  0020               	movlb	0	; select bank0
 12947  0B97  1C6D               	btfss	I2C1_ISR@i2c_address,0
 12948  0B98  2B9F               	goto	i1l5894
 12949                           
 12950                           ;i2c1.c: 325: {
 12951                           ;i2c1.c: 328: i2c1_state = S_MASTER_10BIT_RESTART;
 12952  0B99  300B               	movlw	11
 12953  0B9A  00F9               	movwf	??_I2C1_ISR
 12954  0B9B  0879               	movf	??_I2C1_ISR,w
 12955  0B9C  0021               	movlb	1	; select bank1
 12956  0B9D  00EC               	movwf	_i2c1_state^(0+128)
 12957                           
 12958                           ;i2c1.c: 329: }
 12959  0B9E  0008               	return
 12960  0B9F                     i1l5894:	
 12961                           
 12962                           ;i2c1.c: 330: else
 12963                           ;i2c1.c: 331: {
 12964                           ;i2c1.c: 333: i2c1_state = S_MASTER_SEND_DATA;
 12965  0B9F  3003               	movlw	3
 12966  0BA0  00F9               	movwf	??_I2C1_ISR
 12967  0BA1  0879               	movf	??_I2C1_ISR,w
 12968  0BA2  0021               	movlb	1	; select bank1
 12969  0BA3  00EC               	movwf	_i2c1_state^(0+128)
 12970                           
 12971                           ;i2c1.c: 334: }
 12972                           ;i2c1.c: 335: }
 12973                           ;i2c1.c: 337: break;
 12974  0BA4  0008               	return
 12975  0BA5                     i1l71:	
 12976                           ;i2c1.c: 339: case S_MASTER_10BIT_RESTART:
 12977                           
 12978                           
 12979                           ;i2c1.c: 341: if(SSP1CON2bits.ACKSTAT)
 12980  0BA5  0024               	movlb	4	; select bank4
 12981  0BA6  1F16               	btfss	22,6	;volatile
 12982  0BA7  2BB1               	goto	i1l72
 12983                           
 12984                           ;i2c1.c: 342: {
 12985                           ;i2c1.c: 343: i2c1_object.i2cErrors++;
 12986  0BA8  3001               	movlw	1
 12987  0BA9  00F9               	movwf	??_I2C1_ISR
 12988  0BAA  0879               	movf	??_I2C1_ISR,w
 12989  0BAB  0021               	movlb	1	; select bank1
 12990  0BAC  07DD               	addwf	(_i2c1_object^(0+128)+4),f
 12991                           
 12992                           ;i2c1.c: 344: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
 12993  0BAD  3004               	movlw	4
 12994  0BAE  3192  2293         	fcall	_I2C1_Stop
 12995                           
 12996                           ;i2c1.c: 345: }
 12997  0BB0  0008               	return
 12998  0BB1                     i1l72:	
 12999                           
 13000                           ;i2c1.c: 346: else
 13001                           ;i2c1.c: 347: {
 13002                           ;i2c1.c: 350: SSP1CON2bits.RSEN = 1;
 13003  0BB1  1496               	bsf	22,1	;volatile
 13004                           
 13005                           ;i2c1.c: 354: i2c_address = 0x00F0 | ((i2c_address >> 8) & 0x0006);
 13006  0BB2  0020               	movlb	0	; select bank0
 13007  0BB3  086E               	movf	I2C1_ISR@i2c_address+1,w
 13008  0BB4  00FA               	movwf	??_I2C1_ISR+1
 13009  0BB5  086D               	movf	I2C1_ISR@i2c_address,w
 13010  0BB6  00F9               	movwf	??_I2C1_ISR
 13011  0BB7  087A               	movf	??_I2C1_ISR+1,w
 13012  0BB8  00F9               	movwf	??_I2C1_ISR
 13013  0BB9  01FA               	clrf	??_I2C1_ISR+1
 13014  0BBA  3006               	movlw	6
 13015  0BBB  0579               	andwf	??_I2C1_ISR,w
 13016  0BBC  00FB               	movwf	??_I2C1_ISR+2
 13017  0BBD  3000               	movlw	0
 13018  0BBE  057A               	andwf	??_I2C1_ISR+1,w
 13019  0BBF  00FC               	movwf	??_I2C1_ISR+3
 13020  0BC0  30F0               	movlw	240
 13021  0BC1  047B               	iorwf	??_I2C1_ISR+2,w
 13022  0BC2  00ED               	movwf	I2C1_ISR@i2c_address
 13023  0BC3  3000               	movlw	0
 13024  0BC4  047C               	iorwf	??_I2C1_ISR+3,w
 13025  0BC5  00EE               	movwf	I2C1_ISR@i2c_address+1
 13026                           
 13027                           ;i2c1.c: 357: i2c_address |= 0x0001;
 13028  0BC6  146D               	bsf	I2C1_ISR@i2c_address,0
 13029                           
 13030                           ;i2c1.c: 360: i2c_10bit_address_restart = 1;
 13031  0BC7  0021               	movlb	1	; select bank1
 13032  0BC8  01E7               	clrf	I2C1_ISR@i2c_10bit_address_restart^(0+128)
 13033  0BC9  0AE7               	incf	I2C1_ISR@i2c_10bit_address_restart^(0+128),f
 13034                           
 13035                           ;i2c1.c: 363: i2c1_state = S_MASTER_SEND_ADDR;
 13036  0BCA  3002               	movlw	2
 13037  0BCB  00F9               	movwf	??_I2C1_ISR
 13038  0BCC  0879               	movf	??_I2C1_ISR,w
 13039  0BCD  00EC               	movwf	_i2c1_state^(0+128)
 13040                           
 13041                           ;i2c1.c: 364: }
 13042                           ;i2c1.c: 366: break;
 13043  0BCE  0008               	return
 13044  0BCF                     i1l5908:	
 13045                           ;i2c1.c: 368: case S_MASTER_SEND_ADDR:
 13046                           
 13047                           
 13048                           ;i2c1.c: 381: if(i2c_10bit_address_restart != 1)
 13049  0BCF  0367               	decf	I2C1_ISR@i2c_10bit_address_restart^(0+128),w
 13050  0BD0  1903               	btfsc	3,2
 13051  0BD1  2BEE               	goto	i1l5926
 13052                           
 13053                           ;i2c1.c: 382: {
 13054                           ;i2c1.c: 384: i2c_address = p_i2c1_trb_current->address;
 13055  0BD2  086A               	movf	_p_i2c1_trb_current^(0+128),w
 13056  0BD3  0086               	movwf	6
 13057  0BD4  3001               	movlw	1	; select bank2/3
 13058  0BD5  0087               	movwf	7
 13059  0BD6  3F40               	moviw [0]fsr1
 13060  0BD7  0020               	movlb	0	; select bank0
 13061  0BD8  00ED               	movwf	I2C1_ISR@i2c_address
 13062  0BD9  3F41               	moviw [1]fsr1
 13063  0BDA  00EE               	movwf	I2C1_ISR@i2c_address+1
 13064                           
 13065                           ;i2c1.c: 385: pi2c_buf_ptr = p_i2c1_trb_current->pbuffer;
 13066  0BDB  0021               	movlb	1	; select bank1
 13067  0BDC  086A               	movf	_p_i2c1_trb_current^(0+128),w
 13068  0BDD  3E03               	addlw	3
 13069  0BDE  0086               	movwf	6
 13070  0BDF  3001               	movlw	1	; select bank2/3
 13071  0BE0  0087               	movwf	7
 13072  0BE1  3F40               	moviw [0]fsr1
 13073  0BE2  0022               	movlb	2	; select bank2
 13074  0BE3  00B8               	movwf	I2C1_ISR@pi2c_buf_ptr^(0+256)
 13075  0BE4  3F41               	moviw [1]fsr1
 13076  0BE5  00B9               	movwf	(I2C1_ISR@pi2c_buf_ptr+1)^(0+256)
 13077                           
 13078                           ;i2c1.c: 386: i2c_bytes_left = p_i2c1_trb_current->length;
 13079  0BE6  0021               	movlb	1	; select bank1
 13080  0BE7  086A               	movf	_p_i2c1_trb_current^(0+128),w
 13081  0BE8  0086               	movwf	6
 13082  0BE9  3001               	movlw	1	; select bank2/3
 13083  0BEA  0087               	movwf	7
 13084  0BEB  3001               	movlw	1	; select bank2/3
 13085  0BEC  3F42               	moviw [2]fsr1
 13086  0BED  00E8               	movwf	I2C1_ISR@i2c_bytes_left^(0+128)
 13087  0BEE                     i1l5926:	
 13088                           ;i2c1.c: 407: }
 13089                           ;i2c1.c: 408: }
 13090                           
 13091                           ;i2c1.c: 406: i2c_10bit_address_restart = 0;
 13092                           
 13093                           ;i2c1.c: 404: i2c1_state = S_MASTER_ACK_ADDR;
 13094                           
 13095                           ;i2c1.c: 400: else
 13096                           ;i2c1.c: 401: {
 13097                           ;i2c1.c: 403: SSP1BUF = i2c_address;
 13098                           
 13099                           ;i2c1.c: 399: }
 13100                           
 13101                           ;i2c1.c: 398: i2c1_state = S_MASTER_SEND_ADDR_10BIT_LSB;
 13102                           
 13103                           ;i2c1.c: 393: {
 13104                           ;i2c1.c: 397: SSP1BUF = 0xF0 | ((i2c_address >> 8) & 0x0006);
 13105                           
 13106                           ;i2c1.c: 391: {
 13107                           ;i2c1.c: 392: if (0 == i2c_10bit_address_restart)
 13108                           
 13109                           ;i2c1.c: 387: }
 13110                           ;i2c1.c: 390: if(!1 && (0x0 != i2c_address))
 13111                           
 13112                           
 13113                           ;i2c1.c: 409: else
 13114                           ;i2c1.c: 410: {
 13115                           ;i2c1.c: 412: SSP1BUF = i2c_address;
 13116  0BEE  0020               	movlb	0	; select bank0
 13117  0BEF  086D               	movf	I2C1_ISR@i2c_address,w
 13118  0BF0  0024               	movlb	4	; select bank4
 13119  0BF1  0091               	movwf	17	;volatile
 13120                           
 13121                           ;i2c1.c: 413: if(i2c_address & 0x01)
 13122  0BF2  0020               	movlb	0	; select bank0
 13123  0BF3  1C6D               	btfss	I2C1_ISR@i2c_address,0
 13124  0BF4  2BFB               	goto	i1l5932
 13125                           
 13126                           ;i2c1.c: 414: {
 13127                           ;i2c1.c: 416: i2c1_state = S_MASTER_ACK_ADDR;
 13128  0BF5  3005               	movlw	5
 13129  0BF6  00F9               	movwf	??_I2C1_ISR
 13130  0BF7  0879               	movf	??_I2C1_ISR,w
 13131  0BF8  0021               	movlb	1	; select bank1
 13132  0BF9  00EC               	movwf	_i2c1_state^(0+128)
 13133                           
 13134                           ;i2c1.c: 417: }
 13135  0BFA  0008               	return
 13136  0BFB                     i1l5932:	
 13137                           
 13138                           ;i2c1.c: 418: else
 13139                           ;i2c1.c: 419: {
 13140                           ;i2c1.c: 421: i2c1_state = S_MASTER_SEND_DATA;
 13141  0BFB  3003               	movlw	3
 13142  0BFC  00F9               	movwf	??_I2C1_ISR
 13143  0BFD  0879               	movf	??_I2C1_ISR,w
 13144  0BFE  0021               	movlb	1	; select bank1
 13145  0BFF  00EC               	movwf	_i2c1_state^(0+128)
 13146                           
 13147                           ;i2c1.c: 422: }
 13148                           ;i2c1.c: 423: }
 13149                           ;i2c1.c: 424: break;
 13150  0C00  0008               	return
 13151  0C01                     i1l82:	
 13152                           ;i2c1.c: 426: case S_MASTER_SEND_DATA:
 13153                           
 13154                           
 13155                           ;i2c1.c: 429: if(SSP1CON2bits.ACKSTAT)
 13156  0C01  0024               	movlb	4	; select bank4
 13157  0C02  1F16               	btfss	22,6	;volatile
 13158  0C03  2C0F               	goto	i1l5940
 13159                           
 13160                           ;i2c1.c: 430: {
 13161                           ;i2c1.c: 432: i2c1_object.i2cErrors++;
 13162  0C04  3001               	movlw	1
 13163  0C05  00F9               	movwf	??_I2C1_ISR
 13164  0C06  0879               	movf	??_I2C1_ISR,w
 13165  0C07  0021               	movlb	1	; select bank1
 13166  0C08  07DD               	addwf	(_i2c1_object^(0+128)+4),f
 13167                           
 13168                           ;i2c1.c: 435: SSP1CON2bits.ACKSTAT = 0;
 13169  0C09  0024               	movlb	4	; select bank4
 13170  0C0A  1316               	bcf	22,6	;volatile
 13171                           
 13172                           ;i2c1.c: 438: I2C1_Stop(I2C1_DATA_NO_ACK);
 13173  0C0B  3005               	movlw	5
 13174  0C0C  3192  2293         	fcall	_I2C1_Stop
 13175                           
 13176                           ;i2c1.c: 440: }
 13177  0C0E  0008               	return
 13178  0C0F                     i1l5940:	
 13179                           
 13180                           ;i2c1.c: 441: else
 13181                           ;i2c1.c: 442: {
 13182                           ;i2c1.c: 444: if(i2c_bytes_left-- == 0U)
 13183  0C0F  3001               	movlw	1
 13184  0C10  0021               	movlb	1	; select bank1
 13185  0C11  02E8               	subwf	I2C1_ISR@i2c_bytes_left^(0+128),f
 13186  0C12  0A68               	incf	I2C1_ISR@i2c_bytes_left^(0+128),w
 13187  0C13  1D03               	btfss	3,2
 13188  0C14  2C29               	goto	i1l5948
 13189                           
 13190                           ;i2c1.c: 445: {
 13191                           ;i2c1.c: 449: p_i2c1_trb_current++;
 13192  0C15  3005               	movlw	5
 13193  0C16  00F9               	movwf	??_I2C1_ISR
 13194  0C17  0879               	movf	??_I2C1_ISR,w
 13195  0C18  07EA               	addwf	_p_i2c1_trb_current^(0+128),f
 13196                           
 13197                           ;i2c1.c: 452: if(--i2c1_trb_count == 0)
 13198  0C19  3001               	movlw	1
 13199  0C1A  02EB               	subwf	_i2c1_trb_count^(0+128),f
 13200  0C1B  1D03               	btfss	3,2
 13201  0C1C  2C21               	goto	i1l86
 13202                           
 13203                           ;i2c1.c: 453: {
 13204                           ;i2c1.c: 454: I2C1_Stop(I2C1_MESSAGE_COMPLETE);
 13205  0C1D  3000               	movlw	0
 13206  0C1E  3192  2293         	fcall	_I2C1_Stop
 13207                           
 13208                           ;i2c1.c: 455: }
 13209  0C20  0008               	return
 13210  0C21                     i1l86:	
 13211                           
 13212                           ;i2c1.c: 456: else
 13213                           ;i2c1.c: 457: {
 13214                           ;i2c1.c: 464: SSP1CON2bits.RSEN = 1;
 13215  0C21  0024               	movlb	4	; select bank4
 13216  0C22  1496               	bsf	22,1	;volatile
 13217                           
 13218                           ;i2c1.c: 467: i2c1_state = S_MASTER_SEND_ADDR;
 13219  0C23  3002               	movlw	2
 13220  0C24  00F9               	movwf	??_I2C1_ISR
 13221  0C25  0879               	movf	??_I2C1_ISR,w
 13222  0C26  0021               	movlb	1	; select bank1
 13223  0C27  00EC               	movwf	_i2c1_state^(0+128)
 13224                           
 13225                           ;i2c1.c: 469: }
 13226                           ;i2c1.c: 470: }
 13227  0C28  0008               	return
 13228  0C29                     i1l5948:	
 13229                           
 13230                           ;i2c1.c: 471: else
 13231                           ;i2c1.c: 472: {
 13232                           ;i2c1.c: 474: SSP1BUF = *pi2c_buf_ptr++;
 13233  0C29  0022               	movlb	2	; select bank2
 13234  0C2A  0838               	movf	I2C1_ISR@pi2c_buf_ptr^(0+256),w
 13235  0C2B  0086               	movwf	6
 13236  0C2C  0839               	movf	(I2C1_ISR@pi2c_buf_ptr+1)^(0+256),w
 13237  0C2D  0087               	movwf	7
 13238  0C2E  0801               	movf	1,w
 13239  0C2F  0024               	movlb	4	; select bank4
 13240  0C30  0091               	movwf	17	;volatile
 13241  0C31  3001               	movlw	1
 13242  0C32  0022               	movlb	2	; select bank2
 13243  0C33  07B8               	addwf	I2C1_ISR@pi2c_buf_ptr^(0+256),f
 13244  0C34  3000               	movlw	0
 13245  0C35  3DB9               	addwfc	(I2C1_ISR@pi2c_buf_ptr+1)^(0+256),f
 13246                           
 13247                           ;i2c1.c: 475: }
 13248                           ;i2c1.c: 476: }
 13249                           ;i2c1.c: 477: break;
 13250  0C36  0008               	return
 13251  0C37                     i1l89:	
 13252                           ;i2c1.c: 479: case S_MASTER_ACK_ADDR:
 13253                           
 13254                           
 13255                           ;i2c1.c: 482: if(SSP1CON2bits.ACKSTAT)
 13256  0C37  0024               	movlb	4	; select bank4
 13257  0C38  1F16               	btfss	22,6	;volatile
 13258  0C39  2C45               	goto	i1l90
 13259                           
 13260                           ;i2c1.c: 483: {
 13261                           ;i2c1.c: 486: i2c1_object.i2cErrors++;
 13262  0C3A  3001               	movlw	1
 13263  0C3B  00F9               	movwf	??_I2C1_ISR
 13264  0C3C  0879               	movf	??_I2C1_ISR,w
 13265  0C3D  0021               	movlb	1	; select bank1
 13266  0C3E  07DD               	addwf	(_i2c1_object^(0+128)+4),f
 13267                           
 13268                           ;i2c1.c: 489: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
 13269  0C3F  3004               	movlw	4
 13270  0C40  3192  2293         	fcall	_I2C1_Stop
 13271                           
 13272                           ;i2c1.c: 492: SSP1CON2bits.ACKSTAT = 0;
 13273  0C42  0024               	movlb	4	; select bank4
 13274  0C43  1316               	bcf	22,6	;volatile
 13275                           
 13276                           ;i2c1.c: 493: }
 13277  0C44  0008               	return
 13278  0C45                     i1l90:	
 13279                           
 13280                           ;i2c1.c: 494: else
 13281                           ;i2c1.c: 495: {
 13282                           ;i2c1.c: 496: SSP1CON2bits.RCEN = 1;
 13283  0C45  1596               	bsf	22,3	;volatile
 13284                           
 13285                           ;i2c1.c: 497: i2c1_state = S_MASTER_ACK_RCV_DATA;
 13286  0C46  3008               	movlw	8
 13287  0C47  00F9               	movwf	??_I2C1_ISR
 13288  0C48  0879               	movf	??_I2C1_ISR,w
 13289  0C49  0021               	movlb	1	; select bank1
 13290  0C4A  00EC               	movwf	_i2c1_state^(0+128)
 13291                           
 13292                           ;i2c1.c: 498: }
 13293                           ;i2c1.c: 499: break;
 13294  0C4B  0008               	return
 13295  0C4C                     i1l5960:	
 13296                           ;i2c1.c: 501: case S_MASTER_RCV_DATA:
 13297                           
 13298                           
 13299                           ;i2c1.c: 506: i2c1_state = S_MASTER_ACK_RCV_DATA;
 13300  0C4C  3008               	movlw	8
 13301  0C4D  00F9               	movwf	??_I2C1_ISR
 13302  0C4E  0879               	movf	??_I2C1_ISR,w
 13303  0C4F  00EC               	movwf	_i2c1_state^(0+128)
 13304                           
 13305                           ;i2c1.c: 509: SSP1CON2bits.RCEN = 1;
 13306  0C50  0024               	movlb	4	; select bank4
 13307  0C51  1596               	bsf	22,3	;volatile
 13308                           
 13309                           ;i2c1.c: 511: break;
 13310  0C52  0008               	return
 13311  0C53                     i1l5964:	
 13312                           ;i2c1.c: 513: case S_MASTER_ACK_RCV_DATA:
 13313                           
 13314                           
 13315                           ;i2c1.c: 516: *pi2c_buf_ptr++ = SSP1BUF;
 13316  0C53  0022               	movlb	2	; select bank2
 13317  0C54  0838               	movf	I2C1_ISR@pi2c_buf_ptr^(0+256),w
 13318  0C55  0086               	movwf	6
 13319  0C56  0839               	movf	(I2C1_ISR@pi2c_buf_ptr+1)^(0+256),w
 13320  0C57  0087               	movwf	7
 13321  0C58  0024               	movlb	4	; select bank4
 13322  0C59  0811               	movf	17,w	;volatile
 13323  0C5A  0081               	movwf	1
 13324  0C5B  3001               	movlw	1
 13325  0C5C  0022               	movlb	2	; select bank2
 13326  0C5D  07B8               	addwf	I2C1_ISR@pi2c_buf_ptr^(0+256),f
 13327  0C5E  3000               	movlw	0
 13328  0C5F  3DB9               	addwfc	(I2C1_ISR@pi2c_buf_ptr+1)^(0+256),f
 13329                           
 13330                           ;i2c1.c: 519: if(--i2c_bytes_left)
 13331  0C60  3001               	movlw	1
 13332  0C61  0021               	movlb	1	; select bank1
 13333  0C62  02E8               	subwf	I2C1_ISR@i2c_bytes_left^(0+128),f
 13334  0C63  1903               	btfsc	3,2
 13335  0C64  2C6D               	goto	i1l94
 13336                           
 13337                           ;i2c1.c: 520: {
 13338                           ;i2c1.c: 526: SSP1CON2bits.ACKDT = 0;
 13339  0C65  0024               	movlb	4	; select bank4
 13340  0C66  1296               	bcf	22,5	;volatile
 13341                           
 13342                           ;i2c1.c: 529: i2c1_state = S_MASTER_RCV_DATA;
 13343  0C67  3006               	movlw	6
 13344  0C68  00F9               	movwf	??_I2C1_ISR
 13345  0C69  0879               	movf	??_I2C1_ISR,w
 13346  0C6A  0021               	movlb	1	; select bank1
 13347  0C6B  00EC               	movwf	_i2c1_state^(0+128)
 13348                           
 13349                           ;i2c1.c: 530: }
 13350  0C6C  2C71               	goto	i1l5976
 13351  0C6D                     i1l94:	
 13352                           
 13353                           ;i2c1.c: 531: else
 13354                           ;i2c1.c: 532: {
 13355                           ;i2c1.c: 536: SSP1CON2bits.ACKDT = 1;
 13356  0C6D  0024               	movlb	4	; select bank4
 13357  0C6E  1696               	bsf	22,5	;volatile
 13358                           
 13359                           ;i2c1.c: 538: I2C1_FunctionComplete();
 13360  0C6F  3192  2236         	fcall	_I2C1_FunctionComplete
 13361  0C71                     i1l5976:	
 13362                           
 13363                           ;i2c1.c: 539: }
 13364                           ;i2c1.c: 542: SSP1CON2bits.ACKEN = 1;
 13365  0C71  0024               	movlb	4	; select bank4
 13366  0C72  1616               	bsf	22,4	;volatile
 13367                           
 13368                           ;i2c1.c: 543: break;
 13369  0C73  0008               	return
 13370  0C74                     i1l5978:	
 13371                           ;i2c1.c: 545: case S_MASTER_RCV_STOP:
 13372                           
 13373                           
 13374                           ;i2c1.c: 546: case S_MASTER_SEND_STOP:
 13375                           ;i2c1.c: 549: I2C1_Stop(I2C1_MESSAGE_COMPLETE);
 13376  0C74  3000               	movlw	0
 13377  0C75  3192  2293         	fcall	_I2C1_Stop
 13378                           
 13379                           ;i2c1.c: 550: break;
 13380  0C77  0008               	return
 13381  0C78                     i1l5980:	
 13382                           ;i2c1.c: 552: default:
 13383                           
 13384                           
 13385                           ;i2c1.c: 556: i2c1_object.i2cErrors++;
 13386  0C78  3001               	movlw	1
 13387  0C79  00F9               	movwf	??_I2C1_ISR
 13388  0C7A  0879               	movf	??_I2C1_ISR,w
 13389  0C7B  0021               	movlb	1	; select bank1
 13390  0C7C  07DD               	addwf	(_i2c1_object^(0+128)+4),f
 13391                           
 13392                           ;i2c1.c: 557: I2C1_Stop(I2C1_LOST_STATE);
 13393  0C7D  3006               	movlw	6
 13394  0C7E  3192  2293         	fcall	_I2C1_Stop
 13395                           
 13396                           ;i2c1.c: 560: }
 13397                           
 13398                           ;i2c1.c: 558: break;
 13399  0C80  0008               	return
 13400  0C81                     i1l5986:	
 13401  0C81  0021               	movlb	1	; select bank1
 13402  0C82  086C               	movf	_i2c1_state^(0+128),w
 13403                           
 13404                           ; Switch size 1, requested type "space"
 13405                           ; Number of cases is 11, Range of values is 0 to 11
 13406                           ; switch strategies available:
 13407                           ; Name         Instructions Cycles
 13408                           ; direct_byte           30     6 (fixed)
 13409                           ; simple_byte           34    18 (average)
 13410                           ; jumptable            260     6 (fixed)
 13411                           ;	Chosen strategy is direct_byte
 13412  0C83  0084               	movwf	4
 13413  0C84  300C               	movlw	12
 13414  0C85  0204               	subwf	4,w
 13415  0C86  1803               	skipnc
 13416  0C87  2C78               	goto	i1l5980
 13417  0C88  3191               	movlp	high i1S6236
 13418  0C89  3504               	lslf	4,w
 13419  0C8A  3EBD               	addlw	low i1S6236
 13420  0C8B  0082               	movwf	2
 13421  0C8C  0008               	return
 13422  0C8D                     __end_of_I2C1_ISR:	
 13423                           
 13424                           	psect	swtext1
 13425  11BD                     __pswtext1:	
 13426  11BD                     i1S6236:	
 13427  11BD  318B  2B4A         	ljmp	i1l60
 13428  11BF  318B  2B78         	ljmp	i1l65
 13429  11C1  318B  2BCF         	ljmp	i1l5908
 13430  11C3  318C  2C01         	ljmp	i1l82
 13431  11C5  318C  2C74         	ljmp	i1l5978
 13432  11C7  318C  2C37         	ljmp	i1l89
 13433  11C9  318C  2C4C         	ljmp	i1l5960
 13434  11CB  318C  2C74         	ljmp	i1l5978
 13435  11CD  318C  2C53         	ljmp	i1l5964
 13436  11CF  318C  2C78         	ljmp	i1l5980
 13437  11D1  318B  2B80         	ljmp	i1l66
 13438  11D3  318B  2BA5         	ljmp	i1l71
 13439                           
 13440                           	psect	text64
 13441  1293                     __ptext64:	
 13442 ;; *************** function _I2C1_Stop *****************
 13443 ;; Defined at:
 13444 ;;		line 581 in file "mcc_generated_files/i2c1.c"
 13445 ;; Parameters:    Size  Location     Type
 13446 ;;  completion_c    1    wreg     enum E2972
 13447 ;; Auto vars:     Size  Location     Type
 13448 ;;  completion_c    1    1[COMMON] enum E2972
 13449 ;; Return value:  Size  Location     Type
 13450 ;;                  1    wreg      void 
 13451 ;; Registers used:
 13452 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13453 ;; Tracked objects:
 13454 ;;		On entry : 0/0
 13455 ;;		On exit  : 0/0
 13456 ;;		Unchanged: 0/0
 13457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13459 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13460 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13461 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13462 ;;Total ram usage:        2 bytes
 13463 ;; Hardware stack levels used:    1
 13464 ;; This function calls:
 13465 ;;		Nothing
 13466 ;; This function is called by:
 13467 ;;		_I2C1_ISR
 13468 ;; This function uses a non-reentrant model
 13469 ;;
 13470                           
 13471                           
 13472                           ;psect for function _I2C1_Stop
 13473  1293                     _I2C1_Stop:	
 13474                           
 13475                           ;incstack = 0
 13476                           ; Regs used in _I2C1_Stop: [wreg+fsr1l+fsr1h+status,2+status,0]
 13477                           ;I2C1_Stop@completion_code stored from wreg
 13478  1293  00F8               	movwf	I2C1_Stop@completion_code
 13479                           
 13480                           ;i2c1.c: 584: SSP1CON2bits.PEN = 1;
 13481  1294  0024               	movlb	4	; select bank4
 13482  1295  1516               	bsf	22,2	;volatile
 13483                           
 13484                           ;i2c1.c: 587: if (p_i2c1_current->pTrFlag != (0))
 13485  1296  0021               	movlb	1	; select bank1
 13486  1297  0869               	movf	_p_i2c1_current^(0+128),w
 13487  1298  3E02               	addlw	2
 13488  1299  0086               	movwf	6
 13489  129A  3001               	movlw	1	; select bank2/3
 13490  129B  0087               	movwf	7
 13491  129C  0801               	movf	1,w
 13492  129D  1903               	btfsc	3,2
 13493  129E  2AAB               	goto	i1l5696
 13494                           
 13495                           ;i2c1.c: 588: {
 13496                           ;i2c1.c: 590: *(p_i2c1_current->pTrFlag) = completion_code;
 13497  129F  0878               	movf	I2C1_Stop@completion_code,w
 13498  12A0  00F7               	movwf	??_I2C1_Stop
 13499  12A1  0869               	movf	_p_i2c1_current^(0+128),w
 13500  12A2  3E02               	addlw	2
 13501  12A3  0086               	movwf	6
 13502  12A4  3001               	movlw	1	; select bank2/3
 13503  12A5  0087               	movwf	7
 13504  12A6  0801               	movf	1,w
 13505  12A7  0086               	movwf	6
 13506  12A8  0187               	clrf	7
 13507  12A9  0877               	movf	??_I2C1_Stop,w
 13508  12AA  0081               	movwf	1
 13509  12AB                     i1l5696:	
 13510                           
 13511                           ;i2c1.c: 591: }
 13512                           ;i2c1.c: 594: i2c1_state = S_MASTER_IDLE;
 13513  12AB  01EC               	clrf	_i2c1_state^(0+128)
 13514  12AC  0008               	return
 13515  12AD                     __end_of_I2C1_Stop:	
 13516                           
 13517                           	psect	text65
 13518  1236                     __ptext65:	
 13519 ;; *************** function _I2C1_FunctionComplete *****************
 13520 ;; Defined at:
 13521 ;;		line 563 in file "mcc_generated_files/i2c1.c"
 13522 ;; Parameters:    Size  Location     Type
 13523 ;;		None
 13524 ;; Auto vars:     Size  Location     Type
 13525 ;;		None
 13526 ;; Return value:  Size  Location     Type
 13527 ;;                  1    wreg      void 
 13528 ;; Registers used:
 13529 ;;		wreg, status,2, status,0
 13530 ;; Tracked objects:
 13531 ;;		On entry : 0/0
 13532 ;;		On exit  : 0/0
 13533 ;;		Unchanged: 0/0
 13534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13536 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13537 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13538 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13539 ;;Total ram usage:        1 bytes
 13540 ;; Hardware stack levels used:    1
 13541 ;; This function calls:
 13542 ;;		Nothing
 13543 ;; This function is called by:
 13544 ;;		_I2C1_ISR
 13545 ;; This function uses a non-reentrant model
 13546 ;;
 13547                           
 13548                           
 13549                           ;psect for function _I2C1_FunctionComplete
 13550  1236                     _I2C1_FunctionComplete:	
 13551                           
 13552                           ;i2c1.c: 567: p_i2c1_trb_current++;
 13553                           
 13554                           ;incstack = 0
 13555                           ; Regs used in _I2C1_FunctionComplete: [wreg+status,2+status,0]
 13556  1236  3005               	movlw	5
 13557  1237  00F7               	movwf	??_I2C1_FunctionComplete
 13558  1238  0877               	movf	??_I2C1_FunctionComplete,w
 13559  1239  0021               	movlb	1	; select bank1
 13560  123A  07EA               	addwf	_p_i2c1_trb_current^(0+128),f
 13561                           
 13562                           ;i2c1.c: 570: if(--i2c1_trb_count == 0)
 13563  123B  3001               	movlw	1
 13564  123C  02EB               	subwf	_i2c1_trb_count^(0+128),f
 13565  123D  1D03               	btfss	3,2
 13566  123E  2A44               	goto	i1l101
 13567                           
 13568                           ;i2c1.c: 571: {
 13569                           ;i2c1.c: 572: i2c1_state = S_MASTER_SEND_STOP;
 13570  123F  3004               	movlw	4
 13571  1240  00F7               	movwf	??_I2C1_FunctionComplete
 13572  1241  0877               	movf	??_I2C1_FunctionComplete,w
 13573  1242  00EC               	movwf	_i2c1_state^(0+128)
 13574                           
 13575                           ;i2c1.c: 573: }
 13576  1243  0008               	return
 13577  1244                     i1l101:	
 13578                           
 13579                           ;i2c1.c: 574: else
 13580                           ;i2c1.c: 575: {
 13581                           ;i2c1.c: 576: i2c1_state = S_MASTER_RESTART;
 13582  1244  01EC               	clrf	_i2c1_state^(0+128)
 13583  1245  0AEC               	incf	_i2c1_state^(0+128),f
 13584  1246  0008               	return
 13585  1247                     __end_of_I2C1_FunctionComplete:	
 13586                           
 13587                           	psect	text66
 13588  0800                     __ptext66:	
 13589 ;; *************** function _I2C1_BusCollisionISR *****************
 13590 ;; Defined at:
 13591 ;;		line 728 in file "mcc_generated_files/i2c1.c"
 13592 ;; Parameters:    Size  Location     Type
 13593 ;;		None
 13594 ;; Auto vars:     Size  Location     Type
 13595 ;;		None
 13596 ;; Return value:  Size  Location     Type
 13597 ;;                  1    wreg      void 
 13598 ;; Registers used:
 13599 ;;		None
 13600 ;; Tracked objects:
 13601 ;;		On entry : 0/0
 13602 ;;		On exit  : 0/0
 13603 ;;		Unchanged: 0/0
 13604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13606 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13608 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13609 ;;Total ram usage:        0 bytes
 13610 ;; Hardware stack levels used:    1
 13611 ;; This function calls:
 13612 ;;		Nothing
 13613 ;; This function is called by:
 13614 ;;		_INTERRUPT_InterruptManager
 13615 ;; This function uses a non-reentrant model
 13616 ;;
 13617                           
 13618                           
 13619                           ;psect for function _I2C1_BusCollisionISR
 13620  0800                     _I2C1_BusCollisionISR:	
 13621                           
 13622                           ;incstack = 0
 13623                           ; Regs used in _I2C1_BusCollisionISR: []
 13624  0800  0008               	return
 13625  0801                     __end_of_I2C1_BusCollisionISR:	
 13626                           
 13627                           	psect	text67
 13628  12FE                     __ptext67:	
 13629 ;; *************** function _EUSART_Transmit_ISR *****************
 13630 ;; Defined at:
 13631 ;;		line 165 in file "mcc_generated_files/eusart.c"
 13632 ;; Parameters:    Size  Location     Type
 13633 ;;		None
 13634 ;; Auto vars:     Size  Location     Type
 13635 ;;		None
 13636 ;; Return value:  Size  Location     Type
 13637 ;;                  1    wreg      void 
 13638 ;; Registers used:
 13639 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13640 ;; Tracked objects:
 13641 ;;		On entry : 0/0
 13642 ;;		On exit  : 0/0
 13643 ;;		Unchanged: 0/0
 13644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13646 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13647 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13648 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13649 ;;Total ram usage:        1 bytes
 13650 ;; Hardware stack levels used:    1
 13651 ;; This function calls:
 13652 ;;		Nothing
 13653 ;; This function is called by:
 13654 ;;		_INTERRUPT_InterruptManager
 13655 ;; This function uses a non-reentrant model
 13656 ;;
 13657                           
 13658                           
 13659                           ;psect for function _EUSART_Transmit_ISR
 13660  12FE                     _EUSART_Transmit_ISR:	
 13661                           
 13662                           ;eusart.c: 169: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
 13663                           
 13664                           ;incstack = 0
 13665                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 13666  12FE  3040               	movlw	64
 13667  12FF  0274               	subwf	_eusartTxBufferRemaining,w	;volatile
 13668  1300  1803               	skipnc
 13669  1301  2B17               	goto	i1l256
 13670                           
 13671                           ;eusart.c: 170: {
 13672                           ;eusart.c: 171: TXREG = eusartTxBuffer[eusartTxTail++];
 13673  1302  0875               	movf	_eusartTxTail,w
 13674  1303  3EA0               	addlw	(low (_eusartTxBuffer| (0+512)))& (0+255)
 13675  1304  0086               	movwf	6
 13676  1305  3002               	movlw	2	; select bank5/6
 13677  1306  0087               	movwf	7
 13678  1307  0801               	movf	1,w
 13679  1308  0023               	movlb	3	; select bank3
 13680  1309  009A               	movwf	26	;volatile
 13681  130A  3001               	movlw	1
 13682  130B  00F7               	movwf	??_EUSART_Transmit_ISR
 13683  130C  0877               	movf	??_EUSART_Transmit_ISR,w
 13684  130D  07F5               	addwf	_eusartTxTail,f	;volatile
 13685                           
 13686                           ;eusart.c: 172: if(sizeof(eusartTxBuffer) <= eusartTxTail)
 13687  130E  3040               	movlw	64
 13688  130F  0275               	subwf	_eusartTxTail,w	;volatile
 13689  1310  1803               	btfsc	3,0
 13690                           
 13691                           ;eusart.c: 173: {
 13692                           ;eusart.c: 174: eusartTxTail = 0;
 13693  1311  01F5               	clrf	_eusartTxTail	;volatile
 13694                           
 13695                           ;eusart.c: 175: }
 13696                           ;eusart.c: 176: eusartTxBufferRemaining++;
 13697  1312  3001               	movlw	1
 13698  1313  00F7               	movwf	??_EUSART_Transmit_ISR
 13699  1314  0877               	movf	??_EUSART_Transmit_ISR,w
 13700  1315  07F4               	addwf	_eusartTxBufferRemaining,f	;volatile
 13701                           
 13702                           ;eusart.c: 177: }
 13703  1316  0008               	return
 13704  1317                     i1l256:	
 13705                           
 13706                           ;eusart.c: 178: else
 13707                           ;eusart.c: 179: {
 13708                           ;eusart.c: 180: PIE1bits.TXIE = 0;
 13709  1317  0021               	movlb	1	; select bank1
 13710  1318  1211               	bcf	17,4	;volatile
 13711  1319  0008               	return
 13712  131A                     __end_of_EUSART_Transmit_ISR:	
 13713                           
 13714                           	psect	text68
 13715  12E2                     __ptext68:	
 13716 ;; *************** function _EUSART_Receive_ISR *****************
 13717 ;; Defined at:
 13718 ;;		line 184 in file "mcc_generated_files/eusart.c"
 13719 ;; Parameters:    Size  Location     Type
 13720 ;;		None
 13721 ;; Auto vars:     Size  Location     Type
 13722 ;;		None
 13723 ;; Return value:  Size  Location     Type
 13724 ;;                  1    wreg      void 
 13725 ;; Registers used:
 13726 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13727 ;; Tracked objects:
 13728 ;;		On entry : 0/0
 13729 ;;		On exit  : 0/0
 13730 ;;		Unchanged: 0/0
 13731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13733 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13734 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13735 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13736 ;;Total ram usage:        1 bytes
 13737 ;; Hardware stack levels used:    1
 13738 ;; This function calls:
 13739 ;;		Nothing
 13740 ;; This function is called by:
 13741 ;;		_INTERRUPT_InterruptManager
 13742 ;; This function uses a non-reentrant model
 13743 ;;
 13744                           
 13745                           
 13746                           ;psect for function _EUSART_Receive_ISR
 13747  12E2                     _EUSART_Receive_ISR:	
 13748                           
 13749                           ;eusart.c: 187: if(1 == RCSTAbits.OERR)
 13750                           
 13751                           ;incstack = 0
 13752                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 13753  12E2  0023               	movlb	3	; select bank3
 13754  12E3  1C9D               	btfss	29,1	;volatile
 13755  12E4  2AE7               	goto	i1l6008
 13756                           
 13757                           ;eusart.c: 188: {
 13758                           ;eusart.c: 191: RCSTAbits.CREN = 0;
 13759  12E5  121D               	bcf	29,4	;volatile
 13760                           
 13761                           ;eusart.c: 192: RCSTAbits.CREN = 1;
 13762  12E6  161D               	bsf	29,4	;volatile
 13763  12E7                     i1l6008:	
 13764                           
 13765                           ;eusart.c: 193: }
 13766                           ;eusart.c: 196: eusartRxBuffer[eusartRxHead++] = RCREG;
 13767  12E7  0819               	movf	25,w	;volatile
 13768  12E8  00F7               	movwf	??_EUSART_Receive_ISR
 13769  12E9  0873               	movf	_eusartRxHead,w
 13770  12EA  3E20               	addlw	(low (_eusartRxBuffer| (0+768)))& (0+255)
 13771  12EB  0086               	movwf	6
 13772  12EC  3003               	movlw	3	; select bank6/7
 13773  12ED  0087               	movwf	7
 13774  12EE  0877               	movf	??_EUSART_Receive_ISR,w
 13775  12EF  0081               	movwf	1
 13776  12F0  3001               	movlw	1
 13777  12F1  00F7               	movwf	??_EUSART_Receive_ISR
 13778  12F2  0877               	movf	??_EUSART_Receive_ISR,w
 13779  12F3  07F3               	addwf	_eusartRxHead,f	;volatile
 13780                           
 13781                           ;eusart.c: 197: if(sizeof(eusartRxBuffer) <= eusartRxHead)
 13782  12F4  3040               	movlw	64
 13783  12F5  0273               	subwf	_eusartRxHead,w	;volatile
 13784  12F6  1803               	btfsc	3,0
 13785                           
 13786                           ;eusart.c: 198: {
 13787                           ;eusart.c: 199: eusartRxHead = 0;
 13788  12F7  01F3               	clrf	_eusartRxHead	;volatile
 13789                           
 13790                           ;eusart.c: 200: }
 13791                           ;eusart.c: 201: eusartRxCount++;
 13792  12F8  3001               	movlw	1
 13793  12F9  00F7               	movwf	??_EUSART_Receive_ISR
 13794  12FA  0877               	movf	??_EUSART_Receive_ISR,w
 13795  12FB  0021               	movlb	1	; select bank1
 13796  12FC  07E6               	addwf	_eusartRxCount^(0+128),f	;volatile
 13797  12FD  0008               	return
 13798  12FE                     __end_of_EUSART_Receive_ISR:	
 13799  007E                     btemp	set	126	;btemp
 13800  007E                     int$flags	set	126
 13801  007E                     wtemp0	set	126


Data Sizes:
    Strings     434
    Constant    11
    Data        5
    BSS         333
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      14
    BANK0            80     75      79
    BANK1            80     57      79
    BANK2            80      0      69
    BANK3            80      0      44
    BANK4            80      0      64
    BANK5            80      0      64
    BANK6            80      0      64
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           16      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    i2c1_tr_queue.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 50
		 -> i2c1_write_no_data@buf(BANK0[1]), i2c1_read@reg(BANK0[1]), sen@length(BANK0[1]), sen@type(BANK0[1]), 
		 -> read_buf(BANK3[16]), exec_remote_cmd@send_buf(BANK1[50]), exec_remote_cmd@data(BANK1[1]), 

    i2c1_tr_queue.pTrFlag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c1_write_no_data@status(BANK0[1]), i2c1_read@status(BANK0[1]), i2c1_write@status(BANK0[1]), 

    i2c1_tr_queue.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C1_MasterRead@trBlock(BANK2[5]), I2C1_MasterWrite@trBlock(BANK2[5]), 

    PROTOCOL_Extension_Handler$0	PTR unsigned char  size(1) Largest target is 48
		 -> buf(BANK4[48]), 

    data	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    strncmp@s2	PTR const unsigned char  size(2) Largest target is 192
		 -> buf(BANK4[48]), cmd_buf(BIGRAM[192]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_48(CODE[4]), STR_47(CODE[4]), STR_45(CODE[4]), STR_44(CODE[4]), 
		 -> STR_41(CODE[4]), STR_40(CODE[4]), STR_39(CODE[4]), STR_37(CODE[4]), 
		 -> STR_33(CODE[4]), STR_32(CODE[4]), STR_27(CODE[4]), STR_26(CODE[4]), 
		 -> STR_24(CODE[4]), STR_22(CODE[4]), STR_21(CODE[4]), STR_20(CODE[4]), 
		 -> STR_10(CODE[4]), STR_9(CODE[4]), STR_6(CODE[4]), STR_5(CODE[4]), 
		 -> STR_4(CODE[4]), STR_1(CODE[4]), 

    strcpy@from	PTR const unsigned char  size(1) Largest target is 48
		 -> buf(BANK4[48]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 192
		 -> cmd_buf(BIGRAM[192]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 192
		 -> cmd_buf(BIGRAM[192]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 192
		 -> buf(BANK4[48]), cmd_buf(BIGRAM[192]), 

    sp__PROTOCOL_I2C_SEN	PTR unsigned char  size(2) Largest target is 16
		 -> type_no_data(BANK2[1]), PROTOCOL_Send_uint8_t@pbuf(BANK2[1]), sendbuf(BANK4[16]), readbuf.length(BANK2[1]), 
		 -> readbuf.type(BANK2[1]), readbuf(BANK2[6]), 

    PROTOCOL_Print_TLV@pbuffer	PTR unsigned char  size(1) Largest target is 16
		 -> read_buf(BANK3[16]), NULL(NULL[0]), 

    PROTOCOL_EXT@char_buf	PTR unsigned char  size(1) Largest target is 48
		 -> buf(BANK4[48]), 

    PROTOCOL_Set_Tick_Handler@tick_handler	PTR void  size(2) Largest target is 1
		 -> tick_handler(), 

    PROTOCOL_Tick_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), tick_handler(), 

    PROTOCOL_Set_Extension_Handler@extension_handler	PTR void  size(2) Largest target is 1
		 -> command_handler(), 

    PROTOCOL_Extension_Handler	PTR FTN(PTR unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), command_handler(), 

    PROTOCOL_Loop_Func	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    PROTOCOL_Initialize@inv_handler	PTR void  size(2) Largest target is 1
		 -> inv_handler(), 

    PROTOCOL_Inv_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), inv_handler(), 

    PROTOCOL_Initialize@set_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Set_Handler	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@stop_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Stop_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@start_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Start_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@device_id	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_34(CODE[17]), 

    device_id_	PTR const unsigned char  size(2) Largest target is 8192
		 -> ROM(CODE[8192]), STR_34(CODE[17]), 

    S1053$pbuffer	PTR unsigned char  size(2) Largest target is 16
		 -> PROTOCOL_Send_uint8_t@pbuf(BANK2[1]), sendbuf(BANK4[16]), 

    readbuf.pbuffer	PTR unsigned char  size(2) Largest target is 16
		 -> PROTOCOL_Send_uint8_t@pbuf(BANK2[1]), sendbuf(BANK4[16]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 8192
		 -> STR_43(CODE[4]), buf(BANK4[48]), STR_35(CODE[7]), ROM(CODE[8192]), 
		 -> printf@c(BANK0[1]), STR_34(CODE[17]), I2C1_ISR@i2c_address(BANK0[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 26
		 -> STR_81(CODE[10]), STR_80(CODE[9]), STR_79(CODE[10]), STR_78(CODE[9]), 
		 -> STR_77(CODE[4]), STR_76(CODE[4]), STR_75(CODE[4]), STR_74(CODE[4]), 
		 -> STR_73(CODE[4]), STR_72(CODE[4]), STR_71(CODE[4]), STR_70(CODE[4]), 
		 -> STR_69(CODE[14]), STR_68(CODE[9]), STR_67(CODE[10]), STR_66(CODE[9]), 
		 -> STR_65(CODE[10]), STR_64(CODE[9]), STR_63(CODE[7]), STR_62(CODE[4]), 
		 -> STR_61(CODE[4]), STR_60(CODE[9]), STR_59(CODE[4]), STR_58(CODE[4]), 
		 -> STR_57(CODE[10]), STR_56(CODE[4]), STR_55(CODE[4]), STR_54(CODE[8]), 
		 -> STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[9]), STR_50(CODE[6]), 
		 -> STR_49(CODE[10]), STR_46(CODE[10]), STR_42(CODE[10]), STR_38(CODE[10]), 
		 -> STR_36(CODE[5]), STR_31(CODE[4]), STR_30(CODE[4]), STR_29(CODE[4]), 
		 -> STR_28(CODE[7]), STR_25(CODE[26]), STR_23(CODE[26]), STR_19(CODE[22]), 
		 -> STR_18(CODE[22]), STR_17(CODE[26]), STR_16(CODE[22]), STR_15(CODE[4]), 
		 -> STR_14(CODE[4]), STR_13(CODE[7]), STR_12(CODE[25]), STR_11(CODE[10]), 
		 -> STR_8(CODE[12]), STR_7(CODE[11]), STR_3(CODE[12]), STR_2(CODE[10]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    i2c1_read@pbuf	PTR unsigned char  size(2) Largest target is 16
		 -> sen@length(BANK0[1]), sen@type(BANK0[1]), read_buf(BANK3[16]), exec_remote_cmd@data(BANK1[1]), 

    i2c1_write@pbuf	PTR unsigned char  size(1) Largest target is 50
		 -> exec_remote_cmd@send_buf(BANK1[50]), 

    command_handler@buf	PTR unsigned char  size(1) Largest target is 48
		 -> buf(BANK4[48]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 192
		 -> cmd_buf(BIGRAM[192]), 

    put_cmd@buf	PTR unsigned char  size(1) Largest target is 48
		 -> buf(BANK4[48]), 

    fetch@sch	PTR unsigned char  size(1) Largest target is 28
		 -> schedule(BANK3[28]), 

    exec_remote_cmd@buf	PTR unsigned char  size(2) Largest target is 192
		 -> cmd_buf(BIGRAM[192]), 

    I2C1_MasterWriteTRBBuild@pdata	PTR unsigned char  size(1) Largest target is 50
		 -> i2c1_write_no_data@buf(BANK0[1]), i2c1_read@reg(BANK0[1]), exec_remote_cmd@send_buf(BANK1[50]), 

    I2C1_MasterWriteTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 50
		 -> i2c1_write_no_data@buf(BANK0[1]), i2c1_read@reg(BANK0[1]), sen@length(BANK0[1]), sen@type(BANK0[1]), 
		 -> read_buf(BANK3[16]), exec_remote_cmd@send_buf(BANK1[50]), exec_remote_cmd@data(BANK1[1]), 

    I2C1_MasterWriteTRBBuild@ptrb	PTR struct . size(1) Largest target is 5
		 -> I2C1_MasterWrite@trBlock(BANK2[5]), 

    I2C1_MasterReadTRBBuild@pdata	PTR unsigned char  size(2) Largest target is 16
		 -> sen@length(BANK0[1]), sen@type(BANK0[1]), read_buf(BANK3[16]), exec_remote_cmd@data(BANK1[1]), 

    I2C1_MasterReadTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 50
		 -> i2c1_write_no_data@buf(BANK0[1]), i2c1_read@reg(BANK0[1]), sen@length(BANK0[1]), sen@type(BANK0[1]), 
		 -> read_buf(BANK3[16]), exec_remote_cmd@send_buf(BANK1[50]), exec_remote_cmd@data(BANK1[1]), 

    I2C1_MasterReadTRBBuild@ptrb	PTR struct . size(1) Largest target is 5
		 -> I2C1_MasterRead@trBlock(BANK2[5]), 

    i2c1_object.pTrTail.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 50
		 -> i2c1_write_no_data@buf(BANK0[1]), i2c1_read@reg(BANK0[1]), sen@length(BANK0[1]), sen@type(BANK0[1]), 
		 -> read_buf(BANK3[16]), exec_remote_cmd@send_buf(BANK1[50]), exec_remote_cmd@data(BANK1[1]), 

    i2c1_object.pTrTail.pTrFlag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c1_write_no_data@status(BANK0[1]), i2c1_read@status(BANK0[1]), i2c1_write@status(BANK0[1]), 

    i2c1_object.pTrTail.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C1_MasterRead@trBlock(BANK2[5]), I2C1_MasterWrite@trBlock(BANK2[5]), 

    I2C1_MasterTRBInsert@ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C1_MasterRead@trBlock(BANK2[5]), I2C1_MasterWrite@trBlock(BANK2[5]), 

    I2C1_MasterTRBInsert@pflag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c1_write_no_data@status(BANK0[1]), i2c1_read@status(BANK0[1]), i2c1_write@status(BANK0[1]), 

    I2C1_MasterRead@pflag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c1_read@status(BANK0[1]), 

    I2C1_MasterRead@pdata	PTR unsigned char  size(2) Largest target is 16
		 -> sen@length(BANK0[1]), sen@type(BANK0[1]), read_buf(BANK3[16]), exec_remote_cmd@data(BANK1[1]), 

    F3084.pbuffer	PTR unsigned char  size(2) Largest target is 50
		 -> i2c1_write_no_data@buf(BANK0[1]), i2c1_read@reg(BANK0[1]), sen@length(BANK0[1]), sen@type(BANK0[1]), 
		 -> read_buf(BANK3[16]), exec_remote_cmd@send_buf(BANK1[50]), exec_remote_cmd@data(BANK1[1]), 

    I2C1_MasterWrite@pflag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c1_write_no_data@status(BANK0[1]), i2c1_read@status(BANK0[1]), i2c1_write@status(BANK0[1]), 

    I2C1_MasterWrite@pdata	PTR unsigned char  size(1) Largest target is 50
		 -> i2c1_write_no_data@buf(BANK0[1]), i2c1_read@reg(BANK0[1]), exec_remote_cmd@send_buf(BANK1[50]), 

    F3079.pbuffer	PTR unsigned char  size(2) Largest target is 50
		 -> i2c1_write_no_data@buf(BANK0[1]), i2c1_read@reg(BANK0[1]), sen@length(BANK0[1]), sen@type(BANK0[1]), 
		 -> read_buf(BANK3[16]), exec_remote_cmd@send_buf(BANK1[50]), exec_remote_cmd@data(BANK1[1]), 

    I2C1_ISR@pi2c_buf_ptr	PTR unsigned char  size(2) Largest target is 50
		 -> i2c1_write_no_data@buf(BANK0[1]), i2c1_read@reg(BANK0[1]), sen@length(BANK0[1]), sen@type(BANK0[1]), 
		 -> read_buf(BANK3[16]), exec_remote_cmd@send_buf(BANK1[50]), exec_remote_cmd@data(BANK1[1]), I2C1_ISR@i2c_address(BANK0[2]), 
		 -> NULL(NULL[0]), 

    S19$pbuffer	PTR unsigned char  size(2) Largest target is 50
		 -> i2c1_write_no_data@buf(BANK0[1]), i2c1_read@reg(BANK0[1]), sen@length(BANK0[1]), sen@type(BANK0[1]), 
		 -> read_buf(BANK3[16]), exec_remote_cmd@send_buf(BANK1[50]), exec_remote_cmd@data(BANK1[1]), 

    p_i2c1_trb_current.pbuffer	PTR unsigned char  size(2) Largest target is 50
		 -> i2c1_write_no_data@buf(BANK0[1]), i2c1_read@reg(BANK0[1]), sen@length(BANK0[1]), sen@type(BANK0[1]), 
		 -> read_buf(BANK3[16]), exec_remote_cmd@send_buf(BANK1[50]), exec_remote_cmd@data(BANK1[1]), 

    p_i2c1_trb_current	PTR struct . size(1) Largest target is 5
		 -> I2C1_MasterRead@trBlock(BANK2[5]), I2C1_MasterWrite@trBlock(BANK2[5]), NULL(NULL[0]), 

    i2c1_object.pTrHead.pTrFlag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c1_write_no_data@status(BANK0[1]), i2c1_read@status(BANK0[1]), i2c1_write@status(BANK0[1]), 

    i2c1_object.pTrHead.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C1_MasterRead@trBlock(BANK2[5]), I2C1_MasterWrite@trBlock(BANK2[5]), 

    S31$pTrFlag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c1_write_no_data@status(BANK0[1]), i2c1_read@status(BANK0[1]), i2c1_write@status(BANK0[1]), 

    p_i2c1_current.pTrFlag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c1_write_no_data@status(BANK0[1]), i2c1_read@status(BANK0[1]), i2c1_write@status(BANK0[1]), 

    S31$ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C1_MasterRead@trBlock(BANK2[5]), I2C1_MasterWrite@trBlock(BANK2[5]), 

    p_i2c1_current.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C1_MasterRead@trBlock(BANK2[5]), I2C1_MasterWrite@trBlock(BANK2[5]), 

    p_i2c1_current	PTR struct . size(1) Largest target is 5
		 -> i2c1_tr_queue(BANK2[3]), NULL(NULL[0]), 

    S42$pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c1_tr_queue(BANK2[3]), 

    i2c1_object.pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c1_tr_queue(BANK2[3]), 

    S42$pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c1_tr_queue(BANK2[3]), 

    i2c1_object.pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c1_tr_queue(BANK2[3]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_I2C1_ISR
    _I2C1_ISR->_I2C1_Stop

Critical Paths under _main in BANK0

    _main->_PROTOCOL_Loop
    _init->___awdiv
    _SYSTEM_Initialize->_EUSART_Initialize
    _SYSTEM_Initialize->_I2C1_Initialize
    _PROTOCOL_Loop->_PROTOCOL_EXT
    _tick_handler->_exec_remote_cmd
    _exec_remote_cmd->_printf
    _i2c1_write->_I2C1_MasterWrite
    _check_plg->_scan_dev
    _scan_dev->_i2c1_read
    _del_dev->___awdiv
    _add_dev->___awdiv
    _inv_handler->_fetch
    _fetch->_sen
    _PROTOCOL_Write_Device_Address->_DATAEE_WriteByte
    _PROTOCOL_SAV->_DATAEE_WriteByte
    _PROTOCOL_EXT->_command_handler
    _command_handler->_one_shot_sen
    _put_cmd->_strcpy
    _strcpy->___wmul
    _print_dev_map->_printf
    _one_shot_sen->_sen
    _sen->_PROTOCOL_Print_TLV
    _i2c1_write_no_data->_I2C1_MasterWrite
    _i2c1_read->_I2C1_MasterRead
    _I2C1_MasterWrite->_I2C1_MasterWriteTRBBuild
    _I2C1_MasterRead->_I2C1_MasterReadTRBBuild
    _PROTOCOL_Print_TLV->_printf
    _printf->___lwmod
    _putch->_EUSART_Write
    ___lwmod->___lwdiv
    _abs->___awmod
    _detected->___awdiv
    _atoi->___wmul
    _PROTOCOL_Initialize->_DATAEE_ReadByte

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _tick_handler->_exec_remote_cmd

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  198298
                _PROTOCOL_Initialize
                      _PROTOCOL_Loop
     _PROTOCOL_Set_Extension_Handler
          _PROTOCOL_Set_Tick_Handler
                  _SYSTEM_Initialize
                               _init
 ---------------------------------------------------------------------------------
 (1) _init                                                11    11      0    4525
                                              9 BANK0      9     9      0
                    _DATAEE_ReadByte
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                  _EUSART_Initialize
                    _I2C1_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C1_Initialize                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Set_Tick_Handler                            2     0      2     108
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Set_Extension_Handler                       2     0      2     108
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Loop                                        4     4      0  192878
                                             71 BANK0      4     4      0
                   Absolute function *
                        _EUSART_Read
                       _PROTOCOL_EXT
       _PROTOCOL_Read_Device_Address
                       _PROTOCOL_SAV
                       _PROTOCOL_SET
                       _PROTOCOL_STA
                       _PROTOCOL_STP
      _PROTOCOL_Write_Device_Address
            _TMR0_HasOverflowOccured
                               _atoi
                        _inv_handler *
                             _printf
                            _strncmp
                       _tick_handler *
 ---------------------------------------------------------------------------------
 (2) _tick_handler                                         1     1      0   59673
                                             41 BANK0      1     1      0
                            ___lwmod
                          _check_plg
                    _exec_remote_cmd
                           _scan_dev
 ---------------------------------------------------------------------------------
 (3) _exec_remote_cmd                                     62    62      0   29954
                                             36 BANK0      5     5      0
                                              0 BANK1     57    57      0
                             ___wmul
                               _atoi
                          _i2c1_read
                         _i2c1_write
                 _i2c1_write_no_data
                             _printf
                            _strncmp
 ---------------------------------------------------------------------------------
 (4) _i2c1_write                                           8     4      4    2378
                                             14 BANK0      8     4      4
                   _I2C1_MasterWrite
 ---------------------------------------------------------------------------------
 (3) _check_plg                                            3     3      0   15917
                                             32 BANK0      3     3      0
                 _i2c1_write_no_data
                           _scan_dev
 ---------------------------------------------------------------------------------
 (3) _scan_dev                                             5     5      0   12338
                                             27 BANK0      5     5      0
                            _add_dev
                            _del_dev
                          _i2c1_read
 ---------------------------------------------------------------------------------
 (4) _del_dev                                              8     8      0    3256
                                              9 BANK0      8     8      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) _add_dev                                              8     8      0    3256
                                              9 BANK0      8     8      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) _inv_handler                                          2     2      0   43300
                            ___lwmod
                              _fetch
 ---------------------------------------------------------------------------------
 (3) _fetch                                                7     7      0   41836
                                             54 BANK0      7     7      0
                           _detected
                 _i2c1_write_no_data
                             _printf
                                _sen
 ---------------------------------------------------------------------------------
 (2) _TMR0_HasOverflowOccured                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_Write_Device_Address                        2     2      0     392
                                              3 BANK0      2     2      0
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_STP                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_STA                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_SET                                         2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_SAV                                         1     1      0     330
                                              3 BANK0      1     1      0
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_Read_Device_Address                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_EXT                                         2     2      0   72680
                                             69 BANK0      2     2      0
                   Absolute function *
                    _command_handler *
 ---------------------------------------------------------------------------------
 (3) _command_handler                                     10     9      1   72583
                                             59 BANK0     10     9      1
                   _DATAEE_WriteByte
                            ___awdiv
                               _atoi
                       _one_shot_sen
                      _print_dev_map
                             _printf
                            _put_cmd
                            _strncmp
 ---------------------------------------------------------------------------------
 (4) _strncmp                                              8     2      6    5274
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (4) _put_cmd                                              6     6      0    1534
                                             12 BANK0      6     6      0
                             ___wmul
                             _strcpy
 ---------------------------------------------------------------------------------
 (5) _strcpy                                               6     3      3     263
                                              6 BANK0      6     3      3
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _print_dev_map                                        4     4      0    9000
                                             36 BANK0      4     4      0
                   _dev_map_iterator
                             _printf
 ---------------------------------------------------------------------------------
 (5) _dev_map_iterator                                     8     8      0      37
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (4) _one_shot_sen                                         5     5      0   41441
                                             54 BANK0      5     5      0
                           _detected
                 _i2c1_write_no_data
                             _printf
                                _sen
 ---------------------------------------------------------------------------------
 (4) _sen                                                 11    11      0   25779
                                             45 BANK0      9     9      0
                 _PROTOCOL_Print_TLV
                          _i2c1_read
                 _i2c1_write_no_data
 ---------------------------------------------------------------------------------
 (4) _i2c1_write_no_data                                   7     4      3    3545
                                             14 BANK0      7     4      3
                   _I2C1_MasterWrite
 ---------------------------------------------------------------------------------
 (4) _i2c1_read                                           11     5      6    5600
                                             16 BANK0     11     5      6
                    _I2C1_MasterRead
                   _I2C1_MasterWrite
 ---------------------------------------------------------------------------------
 (5) _I2C1_MasterWrite                                     7     3      4    1891
                                              7 BANK0      7     3      4
               _I2C1_MasterTRBInsert
           _I2C1_MasterWriteTRBBuild
 ---------------------------------------------------------------------------------
 (6) _I2C1_MasterWriteTRBBuild                             7     3      4     450
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (5) _I2C1_MasterRead                                      8     2      6    1398
                                              8 BANK0      8     2      6
            _I2C1_MasterReadTRBBuild
               _I2C1_MasterTRBInsert
 ---------------------------------------------------------------------------------
 (6) _I2C1_MasterTRBInsert                                 4     2      2     494
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (6) _I2C1_MasterReadTRBBuild                              8     3      5     481
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (5) _PROTOCOL_Print_TLV                                   9     6      3   16111
                                             36 BANK0      9     6      3
                            ___awdiv
                            ___awmod
                                _abs
                             _concat
                             _printf
 ---------------------------------------------------------------------------------
 (4) _printf                                              26    20      6    8858
                                             14 BANK0     22    16      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                                _abs (ARG)
                             _concat (ARG)
                   _dev_map_iterator (ARG)
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0      93
                                              2 BANK0      1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (6) _EUSART_Write                                         2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              6     2      4    1464
                                              8 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              8     4      4     395
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (6) _concat                                               8     6      2     524
                                              0 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     629
                                              7 BANK0      4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              7     3      4    1505
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) _detected                                             7     7      0    3070
                                              9 BANK0      7     7      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4    2903
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (4) _atoi                                                 7     5      2    2170
                                              6 BANK0      7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              2     2      0      99
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1198
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _DATAEE_WriteByte                                     3     2      1     330
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) Absolute function(Fake)                               1     0      1       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Read                                          2     2      0      37
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Initialize                                 10     2      8     679
                                              1 BANK0     10     2      8
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (2) _DATAEE_ReadByte                                      1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _INTERRUPT_InterruptManager                          1     1      0      31
                                              6 COMMON     1     1      0
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
               _I2C1_BusCollisionISR
                           _I2C1_ISR
 ---------------------------------------------------------------------------------
 (11) _I2C1_ISR                                            4     4      0      31
                                              2 COMMON     4     4      0
              _I2C1_FunctionComplete
                          _I2C1_Stop
 ---------------------------------------------------------------------------------
 (12) _I2C1_Stop                                           2     2      0      31
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _I2C1_FunctionComplete                               1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _I2C1_BusCollisionISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART_Transmit_ISR                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _EUSART_Receive_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PROTOCOL_Initialize
     _DATAEE_ReadByte
   _PROTOCOL_Loop
     Absolute function(Fake) *
     _EUSART_Read *
     _PROTOCOL_EXT *
       Absolute function(Fake) *
       _command_handler *
         _DATAEE_WriteByte
         ___awdiv
         _atoi
           ___wmul
           _isdigit
         _one_shot_sen
           _detected
             ___awdiv
           _i2c1_write_no_data
             _I2C1_MasterWrite
               _I2C1_MasterTRBInsert
               _I2C1_MasterWriteTRBBuild
           _printf
             ___awdiv (ARG)
             ___awmod (ARG)
             ___lwdiv (ARG)
             ___lwmod (ARG)
               ___lwdiv (ARG)
             ___wmul (ARG)
             _abs (ARG)
               ___awmod (ARG)
             _concat (ARG)
             _dev_map_iterator (ARG)
             _isdigit (ARG)
             _putch (ARG)
               _EUSART_Write
           _sen
             _PROTOCOL_Print_TLV
               ___awdiv
               ___awmod
               _abs
                 ___awmod (ARG)
               _concat
               _printf
                 ___awdiv (ARG)
                 ___awmod (ARG)
                 ___lwdiv (ARG)
                 ___lwmod (ARG)
                   ___lwdiv (ARG)
                 ___wmul (ARG)
                 _abs (ARG)
                   ___awmod (ARG)
                 _concat (ARG)
                 _dev_map_iterator (ARG)
                 _isdigit (ARG)
                 _putch (ARG)
                   _EUSART_Write
             _i2c1_read
               _I2C1_MasterRead
                 _I2C1_MasterReadTRBBuild
                 _I2C1_MasterTRBInsert
               _I2C1_MasterWrite
                 _I2C1_MasterTRBInsert
                 _I2C1_MasterWriteTRBBuild
             _i2c1_write_no_data
               _I2C1_MasterWrite
                 _I2C1_MasterTRBInsert
                 _I2C1_MasterWriteTRBBuild
         _print_dev_map
           _dev_map_iterator
           _printf
             ___awdiv (ARG)
             ___awmod (ARG)
             ___lwdiv (ARG)
             ___lwmod (ARG)
               ___lwdiv (ARG)
             ___wmul (ARG)
             _abs (ARG)
               ___awmod (ARG)
             _concat (ARG)
             _dev_map_iterator (ARG)
             _isdigit (ARG)
             _putch (ARG)
               _EUSART_Write
         _printf
           ___awdiv (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _abs (ARG)
             ___awmod (ARG)
           _concat (ARG)
           _dev_map_iterator (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _EUSART_Write
         _put_cmd
           ___wmul
           _strcpy
             ___wmul (ARG)
         _strncmp
     _PROTOCOL_Read_Device_Address *
     _PROTOCOL_SAV *
       _DATAEE_WriteByte
     _PROTOCOL_SET *
     _PROTOCOL_STA *
     _PROTOCOL_STP *
     _PROTOCOL_Write_Device_Address *
       _DATAEE_WriteByte
     _TMR0_HasOverflowOccured *
     _atoi *
       ___wmul
       _isdigit
     _inv_handler *
       ___lwmod
         ___lwdiv (ARG)
       _fetch
         _detected
           ___awdiv
         _i2c1_write_no_data
           _I2C1_MasterWrite
             _I2C1_MasterTRBInsert
             _I2C1_MasterWriteTRBBuild
         _printf
           ___awdiv (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _abs (ARG)
             ___awmod (ARG)
           _concat (ARG)
           _dev_map_iterator (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _EUSART_Write
         _sen
           _PROTOCOL_Print_TLV
             ___awdiv
             ___awmod
             _abs
               ___awmod (ARG)
             _concat
             _printf
               ___awdiv (ARG)
               ___awmod (ARG)
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _abs (ARG)
                 ___awmod (ARG)
               _concat (ARG)
               _dev_map_iterator (ARG)
               _isdigit (ARG)
               _putch (ARG)
                 _EUSART_Write
           _i2c1_read
             _I2C1_MasterRead
               _I2C1_MasterReadTRBBuild
               _I2C1_MasterTRBInsert
             _I2C1_MasterWrite
               _I2C1_MasterTRBInsert
               _I2C1_MasterWriteTRBBuild
           _i2c1_write_no_data
             _I2C1_MasterWrite
               _I2C1_MasterTRBInsert
               _I2C1_MasterWriteTRBBuild
     _printf *
       ___awdiv (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _abs (ARG)
         ___awmod (ARG)
       _concat (ARG)
       _dev_map_iterator (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _EUSART_Write
     _strncmp *
     _tick_handler *
       ___lwmod
         ___lwdiv (ARG)
       _check_plg
         _i2c1_write_no_data
           _I2C1_MasterWrite
             _I2C1_MasterTRBInsert
             _I2C1_MasterWriteTRBBuild
         _scan_dev
           _add_dev
             ___awdiv
           _del_dev
             ___awdiv
           _i2c1_read
             _I2C1_MasterRead
               _I2C1_MasterReadTRBBuild
               _I2C1_MasterTRBInsert
             _I2C1_MasterWrite
               _I2C1_MasterTRBInsert
               _I2C1_MasterWriteTRBBuild
       _exec_remote_cmd
         ___wmul
         _atoi
           ___wmul
           _isdigit
         _i2c1_read
           _I2C1_MasterRead
             _I2C1_MasterReadTRBBuild
             _I2C1_MasterTRBInsert
           _I2C1_MasterWrite
             _I2C1_MasterTRBInsert
             _I2C1_MasterWriteTRBBuild
         _i2c1_write
           _I2C1_MasterWrite
             _I2C1_MasterTRBInsert
             _I2C1_MasterWriteTRBBuild
         _i2c1_write_no_data
           _I2C1_MasterWrite
             _I2C1_MasterTRBInsert
             _I2C1_MasterWriteTRBBuild
         _printf
           ___awdiv (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _abs (ARG)
             ___awmod (ARG)
           _concat (ARG)
           _dev_map_iterator (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _EUSART_Write
         _strncmp
       _scan_dev
         _add_dev
           ___awdiv
         _del_dev
           ___awdiv
         _i2c1_read
           _I2C1_MasterRead
             _I2C1_MasterReadTRBBuild
             _I2C1_MasterTRBInsert
           _I2C1_MasterWrite
             _I2C1_MasterTRBInsert
             _I2C1_MasterWriteTRBBuild
   _PROTOCOL_Set_Extension_Handler
   _PROTOCOL_Set_Tick_Handler
   _SYSTEM_Initialize
     _EUSART_Initialize
     _I2C1_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
     _WDT_Initialize
   _init
     _DATAEE_ReadByte
     ___awdiv
     ___wmul

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR
   _I2C1_BusCollisionISR
   _I2C1_ISR
     _I2C1_FunctionComplete
     _I2C1_Stop

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4B      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     39      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      45       9       86.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      2C      11       55.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      40      13       80.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      40      15       80.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0      40      17       80.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     1DD      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              10      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     1DD      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Tue Sep 26 20:18:41 2017

                    ??_PROTOCOL_Set_Tick_Handler 0022                                                _i 006B  
                                              _j 013B                                                pc 0002  
                __end_of_TMR0_HasOverflowOccured 11DA                                      __CFG_CP$OFF 0000  
                                   ___awdiv@sign 0026                              ___wmul@multiplicand 0022  
                                _timer0ReloadVal 00E5                                      __CFG_LVP$ON 0000  
                                            l244 080E                                              l355 1FE3  
                                            l188 13AA                                              l700 0F74  
                                            l632 091B                                              l624 1423  
                                            l717 0FFF                                              l645 1478  
                                            l665 0E51                                              l693 0EFE  
                                            l677 0F1E                                              l846 0C8D  
                                   __CFG_CPD$OFF 0000                                              _abs 1217  
                                            _buf 0220                                              _cnt 00DF  
                                            _sen 0719           __end_of_PROTOCOL_Set_Extension_Handler 1FF7  
        __size_of_PROTOCOL_Set_Extension_Handler 0009                   _PROTOCOL_Set_Extension_Handler 1FEE  
                                   ___awmod@sign 0026                                     __CFG_BORV$LO 0000  
                                            wreg 0009                                     __CFG_IESO$ON 0000  
                    __size_of_i2c1_write_no_data 002B                                 detected@dev_addr 002F  
                               exec_remote_cmd@i 00D4                                 exec_remote_cmd@j 00D3  
                                   ?_EUSART_Read 0077                         i2c1_write_no_data@status 0034  
                               __end_of_I2C1_ISR 0C8D                                 ?_command_handler 005B  
                                           ?_abs 0027                                             l1117 1323  
                                           l5100 08EC                                             l5110 0911  
                                   _tmr_overflow 013E                                             l5024 088E  
                                           l5050 08C5                                             l5042 08B4  
                                           l5034 0896                                             l5018 0883  
                                           l5210 0242                                             l5114 0916  
                                           l5036 08A2                                             l5140 00C4  
                                           l5116 091D                                             l5108 0907  
                                           l5132 147A                                             l6100 0CC3  
                                           l5046 08BD                                             l5062 15FD  
                                           l5222 02A3                                             l5214 020F  
                                           l5150 00D0                                             l5126 1469  
                                           l6102 0CC4                                             l5304 07FA  
                                           l5080 1622                                             l5224 02D3  
                                           l5216 0279                                             l5208 023D  
                                           l5152 00EF                                             l5232 0313  
                                           l5128 1473                                             l6112 0CD2  
                                           l6032 0A5D                                             l5074 160A  
                                           l5066 1604                                             l5226 0303  
                                           l5154 0104                                             l6026 0A4B  
                                           l5412 09FF                                             l5076 1616  
                                           l5084 162B                                             l5228 030B  
                                           l5180 017D                                             l5164 0110  
                                           l5340 07CA                                             l6140 0D4F  
                                           l6132 0D11                                             l6044 0A84  
                                           l5422 0A3C                                             l5414 0A03  
                                           l5406 09F7                                             l5182 01A0  
                                           l5166 012D                                             l5326 0778  
                                           l5350 12CC                                             l6150 0D8D  
                                           l6038 0A62                                             l5416 0A2C  
                                           l5088 1633                                             l5192 01AF  
                                           l5168 0140                                             l5280 0987  
                                           l5600 17FA                                             l5432 1414  
                                           l6144 0D68                                             l6136 0D36  
                                           l5194 01DD                                             l5178 014F  
                                           l5098 08E2                                             l5274 097C  
                                           l5290 09CD                                             l5434 141E  
                                           l5522 05B1                                             l6170 0E26  
                                           l6154 0DAF                                             l4820 1517  
                                           l5196 0200                                             l5284 0991  
                                           l5620 0391                                             l5612 0364  
                                           l5540 066D                                             l5516 0588  
                                           l5508 054E                                             l6164 0DFB  
                                           l4830 1532                                             l4902 0EAF  
                                           l5382 15E6                                             l5454 1564  
                                           l5438 1425                                             l5550 06B3  
                                           l5534 0616                                             l5526 05E0  
                                           l5518 058D                                             l6158 0DD5  
                                           l5392 09D9                                             l4752 0823  
                                           l4912 0ECC                                             l5288 09C6  
                                           l5384 15B0                                             l5608 034C  
                                           l5456 1569                                             l5536 061B  
                                           l6088 0CA2                                             l5394 09D0  
                                           l4826 1529                                             l4818 150B  
                                           l4842 14AF                                             l4738 0803  
                                           l4922 0EEA                                             l4906 0EB1  
                                           l4930 0F00                                             l4770 0961  
                                           l5474 164C                                             l5386 15EF  
                                           l5378 15CE                                             l5626 03DC  
                                           l5546 06AB                                             l5396 09DF  
                                           l4844 14BB                                             l4852 14D0  
                                           l4924 0EF5                                             l4916 0ECE  
                                           l4908 0EBF                                             l4772 0967  
                                           l4860 144A                                             l5484 1587  
                                           l5476 1667                                             l5644 0430  
                                           l5628 03E3                                             l5820 0B19  
                                           l5812 0AEF                                             l5804 0AC5  
                                           l5564 0711                                             l5718 1373  
                                           l4790 1215                                             l4942 0F38  
                                           l4918 0EDD                                             l4766 095A  
                                           l5478 1678                                             l5654 0451  
                                           l4848 14C7                                             l4952 0F49  
                                           l4880 0E56                                             l4776 096F  
                                           l5680 04F8                                             l5664 04A8  
                                           l5816 0B04                                             l5808 0ADA  
                                           l4946 0F43                                             l4882 0E5F  
                                           l4874 0E4C                                             l4866 13F8  
                                           l5658 0470                                             l5666 04B8  
                                           l5826 0B31                                             l4796 131D  
                                           l4980 0FAC                                             l4982 0FB0  
                                           l4990 0FC5                                             l4974 0F9D  
                                           l4966 0F90                                             l4958 0F68  
                                           l4894 0E9B                                             l4886 0E6C  
                                           l5686 051D                                             l4968 0F93  
                                           l5792 16FB                                             l4986 0FBD  
                                           l4996 0FCA                                             l5788 16E3  
                                           ?_sen 0077                                             l4998 0E30  
                                           STR_1 119D                                             STR_2 111C  
                                           STR_3 10BD                                             STR_4 11B5  
                                           STR_5 1181                                             STR_6 11A5  
                                           STR_7 10D5                                             STR_8 10C9  
                                           STR_9 11B1                                             _LATA 010C  
                                           _LATB 010D                                             _LATC 010E  
                                           u5205 1518                                             u5215 1522  
                                           u5145 1324                                             u5225 152A  
                                           u5155 1329                                             u6044 09A4  
                                           u6045 09A2                                             u5255 14B2  
                                           u5185 150E                                             u6065 09B5  
                                           u6074 07F2                                             u6075 07F1  
                                           u5275 14C1                                             u5435 0F5E  
                                           i1l60 0B4A                                             u5285 14C8  
                                           i1l71 0BA5                                             u5615 0899  
                                           u5375 0EC5                                             i1l72 0BB1  
                                           i1l65 0B78                                             i1l90 0C45  
                                           i1l82 0C01                                             i1l66 0B80  
                                           u5635 08A3                                             u5715 160D  
                                           u5475 0F83                                             u5645 08AD  
                                           u6605 03CB                                             i1l94 0C6D  
                                           i1l86 0C21                                             u5655 08B5  
                                           u5735 161C                                             i1l89 0C37  
                                           u5745 1623                                             u7185 0AA6  
                                           u5915 029E                                             u6635 040F  
                                           u7517 1400                                             u7607 08D0  
                                           u6735 04E4                                             u7527 141A  
                                           u7617 08E8                                             u7537 072E  
                                           u5954 1797                                             u7627 08F0  
                                           u7547 0747                                             u5955 1796  
                                           u5885 0238                                             u7637 090D  
                                           u7557 0766                                             u6685 046C  
                                           u7567 0792                                             u6695 0487  
                                           u7577 07B4                                             u5994 174A  
                                           u7587 1457                                             u5995 1749  
                                           u7597 146F                                             _PLLR 04D6  
                                           _TMR0 0015                                             _WPUA 020C  
                                           _WPUB 020D                                             _WPUC 020E  
                __end_of_I2C1_MasterReadTRBBuild 14A8                                     __CFG_WRT$OFF 0000  
                                  __CFG_FCMEN$ON 0000                                             abs@a 0027  
                                           _data 013A                                             _devs 00E4  
                                           _atoi 09D0                                             _main 14D5  
                                           _init 0A41                            exec_remote_cmd@status 00D5  
                                           fsr0h 0005                                             fsr1h 0007  
                                           indf0 0000                                             fsr0l 0004  
                                           indf1 0001                                             fsr1l 0006  
                         ??_I2C1_MasterTRBInsert 0022                                             btemp 007E  
                                  __CFG_BOREN$ON 0000                                             start 003C  
                 i2c1_write_no_data@write_status 0032                          command_handler@dev_addr 0063  
                                  __CFG_MCLRE$ON 0000                   I2C1_MasterWriteTRBBuild@length 0021  
                                          ??_abs 0029                        __size_of_DATAEE_WriteByte 0023  
                                          ??_sen 004D                          __end_of_TMR0_Initialize 11EF  
                                     _i2c1_state 00EC                                    __CFG_PLLEN$ON 0000  
                                     _i2c1_write 13FF                                    ?_EUSART_Write 0077  
                 __size_of_OSCILLATOR_Initialize 0007                        I2C1_MasterTRBInsert@count 0023  
                  __end_of_OSCILLATOR_Initialize 1FE6                        I2C1_MasterTRBInsert@pflag 0021  
                            PROTOCOL_Print_TLV@v 004B                                            ?_atoi 0026  
                                          ?_main 0077                                            ?_init 0077  
                                __end_of___awdiv 08CA                                __end_of_I2C1_Stop 12AD  
                                          STR_10 11AD                                            STR_11 1126  
                                          STR_20 1185                                            STR_12 1059  
                                          STR_21 11A1                                            STR_13 1157  
                                          STR_30 117D                                            STR_22 11A9  
                                          STR_14 117D                                            STR_31 10E6  
                                          STR_15 10E6                                            STR_23 1025  
                                          STR_40 1181                                            STR_24 1195  
                                          STR_32 1189                                            STR_16 1072  
                                          STR_41 11A5                                            STR_33 1199  
                                          STR_17 103F                                            STR_25 100B  
                                  __CFG_WDTE$OFF 0000                                            STR_26 1191  
                                          STR_50 115E                                            STR_42 10FE  
                                          STR_34 109E                                            STR_18 1088  
                                          STR_19 1088                                            STR_27 118D  
                                          STR_43 1179                                            STR_35 1149  
                                          STR_51 1139                                            STR_60 1113  
                                          STR_44 11B1                                            STR_52 116D  
                                          STR_36 1164                                            STR_28 1150  
                                __end_of___awmod 1638                                            STR_61 117D  
                                          STR_37 119D                                            STR_45 11AD  
                                          STR_29 11B9                                            STR_53 1169  
                                          STR_62 10E6                                            STR_46 1126  
                                          STR_54 113A                                            STR_38 10F4  
                                          STR_55 117D                                            STR_39 11B5  
                                          STR_47 1175                                            STR_63 1142  
                                          STR_56 10E6                                            STR_64 1109  
                                          STR_48 1171                                            STR_57 1112  
                                          STR_65 1108                                            STR_49 10E0  
                                          STR_66 10EB                                            STR_58 116D  
                                          STR_59 1169                                            STR_67 10EA  
                                          STR_68 1130                                            STR_69 10AF  
                                ___awdiv@divisor 0020                                  __end_of_add_dev 17B1  
                                __end_of___lwdiv 1537                                            i1l101 1244  
                                          i1l321 0015                                            i1l323 0021  
                                          i1l325 002D                                            i1l256 1317  
                                          i1l329 0037                                  __end_of___lwmod 14D5  
                                ___awdiv@counter 0025                                            _MAX_Y 100A  
                                          _RCREG 0199                                            _RCSTA 019D  
                                          _TRISA 008C                                            _TRISB 008D  
                                          _TRISC 008E                                            _TXREG 019A  
                                __end_of_del_dev 1763                                            _TXSTA 019E  
                   __end_of_I2C1_BusCollisionISR 0801                     __size_of_PROTOCOL_Initialize 0052  
                              ??_I2C1_MasterRead 002E                                ??_I2C1_Initialize 0020  
                      _PROTOCOL_Set_Tick_Handler 1FF7                                  _DATAEE_ReadByte 11FB  
                                          _fetch 17B1                  ??_PROTOCOL_Write_Device_Address 0023  
                                __end_of_dpowers 100A                                   _WDT_Initialize 07FC  
                 PROTOCOL_Initialize@inv_handler 0026                                  __end_of_isdigit 1217  
                                   ?_inv_handler 0077                                            _value 00DE  
                                          atoi@a 002B                                            atoi@s 0026  
                                          _putch 1FD9                                            init@i 0031  
                                          init@y 0030                                   i2c1_write@pbuf 0030  
                                          pclath 000A                                  ??_print_dev_map 0044  
                                __end_of_put_cmd 16CB                                            status 0003  
                                          wtemp0 007E                                  __end_of_strncmp 15F2  
                I2C1_MasterWriteTRBBuild@address 0022                               exec_remote_cmd@buf 00D7  
                             exec_remote_cmd@idx 00D2                                  __initialization 003E  
                          I2C1_MasterWrite@pdata 002D                            I2C1_MasterWrite@pflag 002A  
                                   __end_of_atoi 0A41                                     __end_of_main 1502  
                                   __end_of_init 0ABB                                   ??_EUSART_Write 0020  
                    ?_INTERRUPT_InterruptManager 0077                 PROTOCOL_Initialize@start_handler 0023  
                                    _i2c1_object 00D9                                           ??_atoi 0028  
                                         ??_main 006B                                           ??_init 0029  
                             __size_of_i2c1_read 0055                                   scan_dev@status 003E  
                         __end_of_WDT_Initialize 0800                                           ?_fetch 0077  
                                         i1S6236 11BD                                           _EEADRH 0192  
                                         _EEADRL 0191                                           _EEDATH 0194  
                                         _EEDATL 0193                                           _EECON2 0196  
                               ___awdiv@dividend 0022                                           _ANSELA 018C  
                                         ?_putch 0077                                           _ANSELB 018D  
                                         _ANSELC 018E                               _PROTOCOL_Loop_Func 012E  
                                         i1l6008 12E7                                           i1l5940 0C0F  
                                         i1l5932 0BFB                                           i1l5908 0BCF  
                                         i1l5926 0BEE                                           i1l5696 12AB  
                                         i1l5960 0C4C                                           i1l5980 0C78  
                                         i1l5964 0C53                                           i1l5948 0C29  
                                         i1l5876 0B6B                                           i1l5894 0B9F  
                                         i1l5976 0C71                                           i1l5888 0B8C  
                                         i1l5978 0C74                                           i1l5986 0C81  
                                         _OSCCON 0099                 __size_of_TMR0_HasOverflowOccured 0004  
                                         _TMR0IF 005A                                           _SPBRGH 019C  
                                         _SPBRGL 019B                                           _WDTCON 0097  
                 PROTOCOL_Initialize@set_handler 0025                                ?_I2C1_MasterWrite 0027  
                                 __CFG_PWRTE$OFF 0000                                 __end_of_detected 07FC  
                             ??_I2C1_MasterWrite 002B                          exec_remote_cmd@send_buf 00A0  
                             _PROTOCOL_Print_TLV 00B0                        PROTOCOL_Initialize@scaler 0028  
                                 _p_i2c1_current 00E9                                           ___wmul 131A  
                                      ??___awdiv 0024                                   __CFG_STVREN$ON 0000  
                                      ??___awmod 0024                                        ??_add_dev 0029  
                                      ??___lwdiv 0024                                        ??___lwmod 002C  
                                         _concat 1247                                   add_dev@old_map 002D  
                                 add_dev@new_map 002E                                     _type_no_data 0164  
                            _EUSART_Transmit_ISR 12FE                       ??_I2C1_MasterWriteTRBBuild 0024  
                               ?_TMR0_Initialize 0077                                      ?_i2c1_write 002E  
                                         _locked 0143                                        ?_I2C1_ISR 0077  
                                      ??_del_dev 0029                                 ___awdiv@quotient 0027  
                                check_plg@status 0042                                  ___awmod@divisor 0020  
                            ?_PROTOCOL_Print_TLV 0044                                 __end_of_scan_dev 156F  
                                ___awmod@counter 0025                                           _printf 0E2B  
                        __end_of_DATAEE_ReadByte 1208                                           _strcpy 12C7  
               __size_of_I2C1_MasterReadTRBBuild 002C                                        ??_isdigit 0020  
                       __end_of_dev_map_iterator 09D0                                  ?_WDT_Initialize 0077  
                                    sen@dev_addr 0055                                        ??_put_cmd 002C  
                                 print_dev_map@i 0046                    I2C1_MasterWriteTRBBuild@pdata 0020  
                                      ??_strncmp 0026                        PROTOCOL_Send_uint8_t@pbuf 0161  
                           ?_EUSART_Transmit_ISR 0077                             ??_PROTOCOL_Print_TLV 0047  
                           __size_of_EUSART_Read 0020                                _SYSTEM_Initialize 1259  
                        __end_of__initialization 00AC  PROTOCOL_Set_Extension_Handler@extension_handler 0020  
                             ?_SYSTEM_Initialize 0077                                __end_of_i2c1_read 091F  
                            exec_remote_cmd@data 00D6                                    __end_of_MAX_Y 100B  
                                 _i2c1_trb_count 00EB                            _I2C1_FunctionComplete 1236  
                           _I2C1_BusCollisionISR 0800                                   __pcstackCOMMON 0077  
                         I2C1_MasterWrite@length 0027                                     __pidataBANK1 0002  
                                   __pidataBANK2 1FD2                              ??_SYSTEM_Initialize 0021  
                                  __end_of_fetch 1800                                 _DATAEE_WriteByte 1391  
                             __size_of_check_plg 0015                                    __end_of_putch 1FDF  
                                     ??_I2C1_ISR 0079                               command_handler@buf 005B  
                             command_handler@pos 0072                            __end_of_PROTOCOL_Loop 0E2B  
                 I2C1_MasterReadTRBBuild@address 0023                                   _OPTION_REGbits 0095  
                     i2c1_write_no_data@dev_addr 002E                                     init@dev_addr 002F  
                           one_shot_sen@dev_addr 005A                                          ??_fetch 0056  
                        PROTOCOL_Send_float@pbuf 0156                        __end_of_SYSTEM_Initialize 126B  
                          ??_EUSART_Transmit_ISR 0077                             i2c1_read@read_status 0038  
                                        ??_putch 0022                                    ?_one_shot_sen 0077  
                                     __pbssBANK0 006B                                       __pbssBANK1 00D9  
                                     __pbssBANK2 0120                                       __pbssBANK3 01A0  
                                     __pbssBANK4 0220                                       __pbssBANK5 02A0  
                                     __pbssBANK6 0320                             __end_of_EUSART_Write 0826  
                     i2c1_write_no_data@reg_addr 0030                             __size_of_inv_handler 007B  
                            __size_of_i2c1_write 0028                                 command_handler@i 0064  
               ??_PROTOCOL_Set_Extension_Handler 0022                  ?_PROTOCOL_Set_Extension_Handler 0020  
                       __size_of_exec_remote_cmd 01F3                      __size_of_EUSART_Receive_ISR 001C  
                            _PROTOCOL_Initialize 0826                            ?_I2C1_BusCollisionISR 0077  
                                     __pmaintext 14D5                               one_shot_sen@status 0059  
                                        ?___wmul 0020                                  _I2C1_MasterRead 13D7  
                                     __pintentry 0004                                          ?_concat 0020  
                                _I2C1_Initialize 1336                                          _BAUDCON 019F  
                                     _device_id_ 0126                                          _APFCON0 011D  
                                        _APFCON1 011E                                          ?_printf 002E  
                                        ?_strcpy 0026                       __end_of_i2c1_write_no_data 147C  
                               ?_DATAEE_ReadByte 0077                                    _eusartRxCount 00E6  
                     PROTOCOL_Send_uint16_t@pbuf 015E                             ?_PROTOCOL_Initialize 0021  
                                      _I2C1_Stop 1293                                          _OSCTUNE 0098  
                                      ?_detected 0077                                          _SSP1ADD 0212  
                                        _SSP1BUF 0211                                   ??_one_shot_sen 0056  
                         _PROTOCOL_Start_Handler 0134                                    ?_tick_handler 0077  
                              __end_of_check_plg 1293                                  del_dev@dev_addr 0030  
                        _TMR0_HasOverflowOccured 11D6                    I2C1_MasterTRBInsert@ptrb_list 0020  
                           DATAEE_WriteByte@bAdd 0021                                        ?_scan_dev 0077  
                         ?_I2C1_FunctionComplete 0077                         __size_of_command_handler 01FD  
                  __size_of_I2C1_MasterTRBInsert 0057                                  add_dev@dev_addr 0030  
                             _p_i2c1_trb_current 00EA                                          ___awdiv 0878  
                                        ___awmod 15F2                                    ?_PROTOCOL_EXT 0077  
                                  ?_PROTOCOL_SAV 0077                                    ?_PROTOCOL_SET 0077  
                                  ?_PROTOCOL_STA 0077                                    ?_PROTOCOL_STP 0077  
                                __size_of___wmul 001C                                          _add_dev 1763  
                                        ___lwdiv 1502                                          ___lwmod 14A8  
                                __size_of_concat 0012                                          _del_dev 1716  
                                        _cmd_buf 2330                          _I2C1_MasterReadTRBBuild 147C  
                                        _dev_map 0120                                          _do_func 0144  
                                        __ptext1 0A41                                          __ptext2 1259  
                                        __ptext3 07FC                                          __ptext4 11E4  
                                        __ptext5 1352                                          __ptext6 1FDF  
                                        __ptext7 1336                                          __ptext8 12AD  
                                        __ptext9 1FF7                                  __size_of_printf 01D5  
                                __size_of_strcpy 001B                                          _dpowers 1000  
                          _OSCILLATOR_Initialize 1FDF                                     __size_of_abs 000F  
                         i2c1_write@write_status 0034       PROTOCOL_Write_Device_Address@device_id_i2c 0024  
                          ??_PROTOCOL_Initialize 0029                                          _isdigit 1208  
                                   __size_of_sen 00B4                                          _readbuf 0146  
                   I2C1_MasterReadTRBBuild@pdata 0020                             I2C1_MasterRead@pdata 0028  
                                        _sec_cnt 0140                             I2C1_MasterRead@pflag 002D  
                               ___awmod@dividend 0022                                          _invoked 0141  
                       ??_PIN_MANAGER_Initialize 0020                                          _sendbuf 0250  
                                     ?_I2C1_Stop 0077                                       ??_detected 0029  
                                        _tmr_cnt 013F                                          _put_cmd 1680  
                     __size_of_SYSTEM_Initialize 0012                             I2C1_ISR@pi2c_buf_ptr 0138  
                                        clrloop0 11F0                                   ??_tick_handler 0049  
                                        _running 0142                                          _strncmp 15B0  
                           end_of_initialization 00AC            PROTOCOL_Set_Tick_Handler@tick_handler 0020  
                          __end_of_print_dev_map 1680                                          sen@type 0052  
                                     ??_scan_dev 003B                       _PROTOCOL_Extension_Handler 012C  
                               i2c1_write@status 0035                          __end_of_I2C1_MasterRead 13FF  
                         ??_I2C1_BusCollisionISR 0077                                _EUSART_Initialize 12AD  
                        __end_of_I2C1_Initialize 1352                               ?_EUSART_Initialize 0077  
                          _PROTOCOL_Tick_Handler 0128                                        _RCSTAbits 019D  
                                        printf@c 0043                                          printf@f 002E  
                                 ??_PROTOCOL_EXT 0065                                   ??_PROTOCOL_SAV 0023  
                                 ??_PROTOCOL_SET 0020                                   ??_PROTOCOL_STA 0020  
                                 ??_PROTOCOL_STP 0020                                ??_exec_remote_cmd 0044  
                                   __pstringtext 1000                                     ??_i2c1_write 0032  
                            ??_EUSART_Initialize 0020                                 ??_WDT_Initialize 0020  
                                  i2c1_read@pbuf 0033                        __size_of_I2C1_MasterWrite 002A  
                              __size_of_I2C1_ISR 0157                                 __CFG_FOSC$INTOSC 0000  
                              ?_dev_map_iterator 0077                            __size_of_EUSART_Write 0025  
                      ??_TMR0_HasOverflowOccured 0020                            i2c1_write_no_data@buf 0033  
                                   inv_handler@t 0070                               ??_dev_map_iterator 0020  
                                     _tmr_scaler 0162                         __end_of_DATAEE_WriteByte 13B4  
              I2C1_ISR@i2c_10bit_address_restart 00E7                        __end_of_EUSART_Initialize 12C7  
                             __end_of_i2c1_write 1427                                      printf@width 0041  
                        I2C1_MasterWrite@address 0028                                        _i2c1_read 08CA  
                      ??_I2C1_MasterReadTRBBuild 0025                             __end_of_one_shot_sen 15B0  
                                 __end_of___wmul 1336                                ??_command_handler 005C  
                        I2C1_MasterWrite@trBlock 0151                                     _EUSART_Write 0801  
                                 __end_of_concat 1259                         I2C1_Stop@completion_code 0078  
                         ?_OSCILLATOR_Initialize 0077                                    i2c1_write@len 0031  
                                 __end_of_printf 1000                                   __end_of_strcpy 12E2  
                                 PROTOCOL_Loop@c 0069                              start_initialization 003E  
                                    ??_I2C1_Stop 0077                         __size_of_TMR0_Initialize 000B  
                __size_of_PIN_MANAGER_Initialize 001F                                      __end_of_abs 1226  
                                    __end_of_sen 07CD                                    ??_EUSART_Read 0020  
              __size_of_I2C1_MasterWriteTRBBuild 0023                                      putch@txData 0022  
                      ?_I2C1_MasterWriteTRBBuild 0020                         dev_map_iterator@dev_addr 0027  
                    __size_of_PROTOCOL_Print_TLV 0279                               dev_map_iterator@xx 00E3  
                             dev_map_iterator@yy 00E2                              DATAEE_ReadByte@bAdd 0020  
                               ?_I2C1_MasterRead 0028                                 ?_I2C1_Initialize 0077  
                                     ?_i2c1_read 0030                                         ??___wmul 0024  
                       PROTOCOL_Send_int8_t@pbuf 0160             __end_of_PROTOCOL_Read_Device_Address 1FCF  
          __size_of_PROTOCOL_Read_Device_Address 0003                     _PROTOCOL_Read_Device_Address 1FCC  
                                       ??_concat 0022                                      __pdataBANK1 00ED  
                               scan_dev@dev_addr 003F                                      __pdataBANK2 0162  
                           __end_of_tick_handler 1716                                         ??_printf 0034  
                                       ??_strcpy 0029                     I2C1_MasterWriteTRBBuild@ptrb 0026  
                                    __pbssBIGRAM 2330                      __end_of_EUSART_Transmit_ISR 131A  
                                    __pbssCOMMON 0070                                        ___latbits 0002  
                                  __pcstackBANK0 0020                                    __pcstackBANK1 00A0  
                                  _i2c1_tr_queue 0159                             _PROTOCOL_Inv_Handler 012A  
                                   _isdigit$1460 0020                                    ??_inv_handler 005D  
                           __end_of_PROTOCOL_EXT 127E                             __end_of_PROTOCOL_SAV 11E4  
                           __end_of_PROTOCOL_SET 1FEE                             __end_of_PROTOCOL_STA 1FD9  
                           __end_of_PROTOCOL_STP 1FD2                                __size_of_detected 002F  
                             _i2c1_write_no_data 1451                       __end_of_EUSART_Receive_ISR 12FE  
                PROTOCOL_Initialize@stop_handler 0024                          ??_I2C1_FunctionComplete 0077  
                     __size_of_EUSART_Initialize 001A                              __end_of_EUSART_Read 1391  
                                  tick_handler@t 0136                           __size_of_PROTOCOL_Loop 019E  
                                      _check_plg 127E            __end_of_PROTOCOL_Write_Device_Address 1236  
         __size_of_PROTOCOL_Write_Device_Address 0010                    _PROTOCOL_Write_Device_Address 1226  
                            ?_i2c1_write_no_data 002E                                 ___lwdiv@dividend 0022  
                         _PIN_MANAGER_Initialize 1352                                __size_of_scan_dev 0038  
                           EUSART_Read@readValue 0021                                         ?___awdiv 0020  
                                       ?___awmod 0020                           PROTOCOL_Print_TLV@type 0044  
                                       ?_add_dev 0077                                         ?___lwdiv 0020  
                                       ?___lwmod 0028                                     _eusartRxHead 0073  
                                   _eusartTxHead 0076                                     _eusartRxTail 006C  
                                   _eusartTxTail 0075                                         _I2C1_ISR 0B36  
                                       ?_del_dev 0077                    ?_PROTOCOL_Read_Device_Address 0077  
                   ??_INTERRUPT_InterruptManager 007D                        PROTOCOL_Send_int16_t@pbuf 015C  
                                      __pswtext1 11BD                                 _I2C1_MasterWrite 1427  
                        _eusartTxBufferRemaining 0074                     __end_of_I2C1_MasterTRBInsert 0976  
                       PROTOCOL_Print_TLV@length 0045                                         ?_isdigit 0077  
                           ??_i2c1_write_no_data 0031                           I2C1_MasterRead@address 002B  
                          dev_map_iterator@exist 0026                                   del_dev@old_map 002D  
                                 del_dev@new_map 002E                            dev_map_iterator@start 0163  
                                       ?_put_cmd 0077                                 ___lwdiv@quotient 0026  
                                 __size_of_fetch 004F                         __size_of_DATAEE_ReadByte 000D  
                                       ?_strncmp 0020                                   __size_of_putch 0006  
                                 _eusartRxBuffer 0320                      I2C1_MasterReadTRBBuild@ptrb 0027  
                         I2C1_MasterRead@trBlock 014C                                ??_TMR0_Initialize 0020  
                                 _eusartTxBuffer 02A0                                  _exec_remote_cmd 0526  
                                 ___wmul@product 0024                                         _LATCbits 010E  
                           _PROTOCOL_Set_Handler 0130                                       ?_check_plg 0077  
                                      clear_ram0 11EF                              __end_of_inv_handler 0B36  
                                       _PIE1bits 0091                                         _PIE2bits 0092  
                          __size_of_one_shot_sen 0041              __size_of_INTERRUPT_InterruptManager 0038  
                                       _PIR1bits 0011                                         _PIR2bits 0012  
             __size_of_PROTOCOL_Set_Tick_Handler 0009                                        detected@x 002D  
                                      detected@y 002C                       ?_PROTOCOL_Set_Tick_Handler 0020  
                                    ??_i2c1_read 0036                                         _SSP1CON1 0215  
                                       _SSP1CON3 0217                     PROTOCOL_Initialize@device_id 0021  
                                      _timer_cnt 0145                                         _SSP1STAT 0214  
                                   i2c1_read@len 0035                                     i2c1_read@reg 0039  
                                 _readbuf_status 013D                            _PROTOCOL_Stop_Handler 0132  
                    __end_of_PROTOCOL_Initialize 0878                                        concat@lsb 0020  
                                      concat@msb 0027                                ___wmul@multiplier 0020  
                                  _PROTOCOL_Loop 0C8D                                    detected@exist 002E  
                                     printf@flag 0040                                       printf@prec 0038  
                          DATAEE_WriteByte@bData 0020                                i2c1_read@dev_addr 0030  
                                    _EUSART_Read 1371                                     _one_shot_sen 156F  
                              ?_DATAEE_WriteByte 0020                               i2c1_write@dev_addr 002E  
                             ??_DATAEE_WriteByte 0021                                    _slave_address 00E0  
                                     put_cmd@buf 0031                                i2c1_read@reg_addr 0032  
                                     put_cmd@idx 00ED                                  _command_handler 0329  
                                     _EECON1bits 0195                               PROTOCOL_SET@value_ 0021  
                      __size_of_dev_map_iterator 005A                            __size_of_tick_handler 004B  
                  __size_of_I2C1_BusCollisionISR 0001                           I2C1_ISR@i2c_bytes_left 00E8  
              __end_of_PROTOCOL_Set_Tick_Handler 2000                          ??_OSCILLATOR_Initialize 0020  
                 ?_PROTOCOL_Write_Device_Address 0077                                 __size_of___awdiv 0052  
                               __size_of___awmod 0046                                        sen@length 0053  
                               __size_of_add_dev 004E                                 __size_of___lwdiv 0035  
                               __size_of___lwmod 002D                 __end_of_I2C1_MasterWriteTRBBuild 13D7  
                                 ?_PROTOCOL_Loop 0077                                 __size_of_del_dev 004D  
                                      sen@status 0054                           __size_of_print_dev_map 0048  
                          __size_of_PROTOCOL_EXT 0013                            __size_of_PROTOCOL_SAV 000A  
                          __size_of_PROTOCOL_SET 0008                            __size_of_PROTOCOL_STA 0004  
                          __size_of_PROTOCOL_STP 0003                   ??_PROTOCOL_Read_Device_Address 0020  
                                       add_dev@x 002C                                         add_dev@y 002F  
                           tick_handler@cmd_next 00E1                                 __size_of_isdigit 000F  
                                ___lwdiv@divisor 0020                          __end_of_exec_remote_cmd 0719  
                            I2C1_ISR@i2c_address 006D                                  ___lwdiv@counter 0025  
                                       _detected 07CD                                         __ptext10 1FEE  
                                       __ptext11 0C8D                                         __ptext20 17B1  
                                       __ptext12 16CB                                         __ptext21 11D6  
                                       __ptext13 0526                                         __ptext30 15B0  
                                       __ptext22 1226                                         __ptext14 13FF  
                                       __ptext31 1680                                         __ptext23 1FCF  
                                       __ptext15 127E                                         __ptext40 13B4  
                                       __ptext32 12C7                                         __ptext24 1FD5  
                                       __ptext16 1537                                         __ptext41 13D7  
                                       __ptext33 1638                                         __ptext25 1FE6  
                                       __ptext17 1716                                         __ptext50 1247  
                                       __ptext42 091F                                         __ptext34 0976  
                                       __ptext26 11DA                                         __ptext18 1763  
                                       __ptext51 1217                                         __ptext43 147C  
                                       __ptext35 156F                                         __ptext27 1FCC  
                                       __ptext19 0ABB                                         __ptext60 0826  
                                       __ptext52 15F2                                         __ptext44 00B0  
                                       __ptext36 0719                                         __ptext28 126B  
                                       __ptext61 11FB                                         __ptext53 07CD  
                                       __ptext45 0E2B                                         __ptext37 1451  
                                       __ptext29 0329                                         __ptext54 0878  
                                       __ptext46 1FD9                                         __ptext38 08CA  
                                       __ptext63 0B36                                         __ptext55 09D0  
                                       __ptext47 0801                                         __ptext39 1427  
                                       __ptext64 1293                                         __ptext56 1208  
                                       __ptext48 14A8                                         __ptext65 1236  
                                       __ptext57 131A                                         __ptext49 1502  
                                       __ptext66 0800                                         __ptext58 1391  
                                       __ptext67 12FE                                         __ptext59 1371  
                                       __ptext68 12E2                                    fetch@dev_addr 005C  
                                   _SSP1CON1bits 0215                                     _SSP1CON2bits 0216  
                                       _float100 0124                                      _inv_handler 0ABB  
                               __size_of_put_cmd 004B                      DATAEE_WriteByte@GIEBitValue 0022  
                                   _tick_handler 16CB                                 __size_of_strncmp 0042  
                                     strcpy@from 0028                                    __size_of_atoi 0071  
                                  __size_of_main 002D                                    __size_of_init 007A  
                                       _read_buf 01BC                                         del_dev@x 002C  
                                       del_dev@y 002F                    I2C1_MasterReadTRBBuild@length 0022  
                          I2C1_MasterRead@length 002A                                         _scan_dev 1537  
                                    ??_check_plg 0040                                       strncmp@len 0024  
                              ??_DATAEE_ReadByte 0020                                         _schedule 01A0  
                           _I2C1_MasterTRBInsert 091F                          _BACKPLANE_SLAVE_ADDRESS 00EE  
                                       fetch@sch 005A                                         fetch@pos 005B  
                                       int$flags 007E                                         atoi@sign 002A  
                                   _PROTOCOL_EXT 126B                                     _PROTOCOL_SAV 11DA  
                                   _PROTOCOL_SET 1FE6                                     _PROTOCOL_STA 1FD5  
                                   _PROTOCOL_STP 1FCF               __end_of_INTERRUPT_InterruptManager 003C  
                     _INTERRUPT_InterruptManager 0004                                        printf@len 003E  
                                      printf@val 003C                         ?_TMR0_HasOverflowOccured 0077  
                                     _INTCONbits 000B                                         isdigit@c 0021  
                     __end_of_PROTOCOL_Print_TLV 0329                          __end_of_command_handler 0526  
                        __size_of_WDT_Initialize 0004                                         intlevel1 0000  
                               ___lwmod@dividend 002A                          ?_PIN_MANAGER_Initialize 0077  
                       __end_of_I2C1_MasterWrite 1451                                __CFG_CLKOUTEN$OFF 0000  
                 __size_of_I2C1_FunctionComplete 0011                    __end_of_I2C1_FunctionComplete 1247  
                                  _print_dev_map 1638                            ?_I2C1_MasterTRBInsert 0020  
                                      strncmp@s1 0020                                        strncmp@s2 0022  
                       ?_I2C1_MasterReadTRBBuild 0020                       PROTOCOL_Print_TLV@dev_addr 004A  
                        _backplane_slave_enabled 013C                                         printf@ap 003B  
                                       printf@cp 0039                               _EUSART_Receive_ISR 12E2  
                                ??_PROTOCOL_Loop 0067                         __size_of_I2C1_MasterRead 0028  
                       __size_of_I2C1_Initialize 001C                                  i2c1_read@status 003A  
                                     _OPTION_REG 0095                              ?_EUSART_Receive_ISR 0077  
                               print_dev_map@len 0047                                  ___lwmod@divisor 0028  
                                _TMR0_Initialize 11E4                                         strcpy@cp 002A  
                                       strcpy@to 0026                                  ___lwmod@counter 002D  
                       _I2C1_MasterWriteTRBBuild 13B4                      PROTOCOL_Loop@device_address 006A  
                               ?_exec_remote_cmd 0077                                      fetch@status 0059  
                           PROTOCOL_EXT@char_buf 0066                               EUSART_Write@txData 0021  
                   __size_of_EUSART_Transmit_ISR 001C                        PROTOCOL_Print_TLV@pbuffer 0046  
                 __end_of_PIN_MANAGER_Initialize 1371                               __size_of_I2C1_Stop 001A  
                                 ?_print_dev_map 0077                             ??_EUSART_Receive_ISR 0077  
                               _dev_map_iterator 0976  
