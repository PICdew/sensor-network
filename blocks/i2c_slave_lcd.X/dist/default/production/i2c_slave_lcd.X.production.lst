

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Thu Sep 21 20:04:59 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F1829
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	stringtext,global,class=STRCODE,delta=2
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text7,local,class=CODE,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,delta=2,group=4
    30                           	psect	text11,local,class=CODE,merge=1,delta=2,group=4
    31                           	psect	text12,local,class=CODE,merge=1,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2,group=4
    33                           	psect	text14,local,class=CODE,merge=1,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,delta=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,delta=2,group=4
    43                           	psect	text24,local,class=CODE,merge=1,delta=2,group=4
    44                           	psect	text25,local,class=CODE,merge=1,delta=2,group=4
    45                           	psect	text26,local,class=CODE,merge=1,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    47                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    48                           	psect	text29,local,class=CODE,merge=1,delta=2,group=1
    49                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
    50                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    51                           	psect	text32,local,class=CODE,merge=1,delta=2
    52                           	psect	text33,local,class=CODE,merge=1,delta=2,group=1
    53                           	psect	text34,local,class=CODE,merge=1,delta=2
    54                           	psect	text35,local,class=CODE,merge=1,delta=2,group=1
    55                           	psect	text36,local,class=CODE,merge=1,delta=2,group=1
    56                           	psect	text37,local,class=CODE,merge=1,delta=2
    57                           	psect	text38,local,class=CODE,merge=1,delta=2,group=1
    58                           	psect	text39,local,class=CODE,merge=1,delta=2
    59                           	psect	text40,local,class=CODE,merge=1,delta=2
    60                           	psect	text41,local,class=CODE,merge=1,delta=2
    61                           	psect	text42,local,class=CODE,merge=1,delta=2
    62                           	psect	text43,local,class=CODE,merge=1,delta=2
    63                           	psect	text44,local,class=CODE,merge=1,delta=2,group=1
    64                           	psect	text45,local,class=CODE,merge=1,delta=2
    65                           	psect	intentry,global,class=CODE,delta=2
    66                           	psect	text47,local,class=CODE,merge=1,delta=2
    67                           	psect	swtext1,local,class=CONST,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,delta=2
    73                           	psect	swtext2,local,class=CONST,delta=2
    74                           	psect	text53,local,class=CODE,merge=1,delta=2
    75                           	psect	text54,local,class=CODE,merge=1,delta=2
    76                           	psect	text55,local,class=CODE,merge=1,delta=2
    77                           	psect	text56,local,class=CODE,merge=1,delta=2
    78                           	psect	text57,local,class=CODE,merge=1,delta=2
    79                           	psect	text58,local,class=CODE,merge=1,delta=2
    80                           	psect	text59,local,class=CODE,merge=1,delta=2
    81                           	psect	text60,local,class=CODE,merge=1,delta=2
    82                           	psect	text61,local,class=CODE,merge=1,delta=2
    83                           	psect	text62,local,class=CODE,merge=1,delta=2,group=1
    84                           	psect	text63,local,class=CODE,merge=1,delta=2,group=1
    85                           	psect	text64,local,class=CODE,merge=1,delta=2,group=1
    86                           	psect	text65,local,class=CODE,merge=1,delta=2,group=1
    87                           	psect	text66,local,class=CODE,merge=1,delta=2,group=1
    88                           	psect	text67,local,class=CODE,merge=1,delta=2,group=1
    89                           	psect	text68,local,class=CODE,merge=1,delta=2
    90                           	psect	text69,local,class=CODE,merge=1,delta=2
    91                           	dabs	1,0x7E,2
    92  0000                     
    93                           ; Version 1.41 (B)
    94                           ; Generated 21/02/2017 GMT
    95                           ; 
    96                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    97                           ; All rights reserved.
    98                           ; 
    99                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   100                           ; 
   101                           ; Redistribution and use in source and binary forms, with or without modification, are
   102                           ; permitted provided that the following conditions are met:
   103                           ; 
   104                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   105                           ;        conditions and the following disclaimer.
   106                           ; 
   107                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   108                           ;        of conditions and the following disclaimer in the documentation and/or other
   109                           ;        materials provided with the distribution.
   110                           ; 
   111                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   112                           ;        software without specific prior written permission.
   113                           ; 
   114                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   115                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   116                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   117                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   118                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   119                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   120                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   121                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   122                           ; 
   123                           ; 
   124                           ; Code-generator required, PIC16F1829 Definitions
   125                           ; 
   126                           ; SFR Addresses
   127  0000                     	;# 
   128  0001                     	;# 
   129  0002                     	;# 
   130  0003                     	;# 
   131  0004                     	;# 
   132  0005                     	;# 
   133  0006                     	;# 
   134  0007                     	;# 
   135  0008                     	;# 
   136  0009                     	;# 
   137  000A                     	;# 
   138  000B                     	;# 
   139  000C                     	;# 
   140  000D                     	;# 
   141  000E                     	;# 
   142  0011                     	;# 
   143  0012                     	;# 
   144  0013                     	;# 
   145  0014                     	;# 
   146  0015                     	;# 
   147  0016                     	;# 
   148  0016                     	;# 
   149  0017                     	;# 
   150  0018                     	;# 
   151  0019                     	;# 
   152  001A                     	;# 
   153  001B                     	;# 
   154  001C                     	;# 
   155  001E                     	;# 
   156  001F                     	;# 
   157  008C                     	;# 
   158  008D                     	;# 
   159  008E                     	;# 
   160  0091                     	;# 
   161  0092                     	;# 
   162  0093                     	;# 
   163  0094                     	;# 
   164  0095                     	;# 
   165  0096                     	;# 
   166  0097                     	;# 
   167  0098                     	;# 
   168  0099                     	;# 
   169  009A                     	;# 
   170  009B                     	;# 
   171  009B                     	;# 
   172  009C                     	;# 
   173  009D                     	;# 
   174  009E                     	;# 
   175  010C                     	;# 
   176  010D                     	;# 
   177  010E                     	;# 
   178  0111                     	;# 
   179  0112                     	;# 
   180  0113                     	;# 
   181  0114                     	;# 
   182  0115                     	;# 
   183  0116                     	;# 
   184  0117                     	;# 
   185  0118                     	;# 
   186  0119                     	;# 
   187  011A                     	;# 
   188  011B                     	;# 
   189  011D                     	;# 
   190  011E                     	;# 
   191  018C                     	;# 
   192  018D                     	;# 
   193  018E                     	;# 
   194  0191                     	;# 
   195  0191                     	;# 
   196  0192                     	;# 
   197  0193                     	;# 
   198  0193                     	;# 
   199  0193                     	;# 
   200  0194                     	;# 
   201  0195                     	;# 
   202  0196                     	;# 
   203  0199                     	;# 
   204  019A                     	;# 
   205  019B                     	;# 
   206  019B                     	;# 
   207  019C                     	;# 
   208  019D                     	;# 
   209  019E                     	;# 
   210  019F                     	;# 
   211  020C                     	;# 
   212  020D                     	;# 
   213  020E                     	;# 
   214  0211                     	;# 
   215  0211                     	;# 
   216  0212                     	;# 
   217  0212                     	;# 
   218  0213                     	;# 
   219  0213                     	;# 
   220  0214                     	;# 
   221  0214                     	;# 
   222  0215                     	;# 
   223  0215                     	;# 
   224  0215                     	;# 
   225  0216                     	;# 
   226  0216                     	;# 
   227  0217                     	;# 
   228  0217                     	;# 
   229  0219                     	;# 
   230  021A                     	;# 
   231  021B                     	;# 
   232  021C                     	;# 
   233  021D                     	;# 
   234  021E                     	;# 
   235  021F                     	;# 
   236  0291                     	;# 
   237  0291                     	;# 
   238  0292                     	;# 
   239  0293                     	;# 
   240  0294                     	;# 
   241  0295                     	;# 
   242  0295                     	;# 
   243  0296                     	;# 
   244  0298                     	;# 
   245  0298                     	;# 
   246  0299                     	;# 
   247  029A                     	;# 
   248  029B                     	;# 
   249  029C                     	;# 
   250  029D                     	;# 
   251  029E                     	;# 
   252  0311                     	;# 
   253  0311                     	;# 
   254  0312                     	;# 
   255  0313                     	;# 
   256  0318                     	;# 
   257  0318                     	;# 
   258  0319                     	;# 
   259  031A                     	;# 
   260  038C                     	;# 
   261  038D                     	;# 
   262  038E                     	;# 
   263  0391                     	;# 
   264  0392                     	;# 
   265  0393                     	;# 
   266  0394                     	;# 
   267  0395                     	;# 
   268  0396                     	;# 
   269  039A                     	;# 
   270  039C                     	;# 
   271  039D                     	;# 
   272  039E                     	;# 
   273  039F                     	;# 
   274  0415                     	;# 
   275  0416                     	;# 
   276  0417                     	;# 
   277  041C                     	;# 
   278  041D                     	;# 
   279  041E                     	;# 
   280  0FE4                     	;# 
   281  0FE5                     	;# 
   282  0FE6                     	;# 
   283  0FE7                     	;# 
   284  0FE8                     	;# 
   285  0FE9                     	;# 
   286  0FEA                     	;# 
   287  0FEB                     	;# 
   288  0FED                     	;# 
   289  0FEE                     	;# 
   290  0FEF                     	;# 
   291  0000                     	;# 
   292  0001                     	;# 
   293  0002                     	;# 
   294  0003                     	;# 
   295  0004                     	;# 
   296  0005                     	;# 
   297  0006                     	;# 
   298  0007                     	;# 
   299  0008                     	;# 
   300  0009                     	;# 
   301  000A                     	;# 
   302  000B                     	;# 
   303  000C                     	;# 
   304  000D                     	;# 
   305  000E                     	;# 
   306  0011                     	;# 
   307  0012                     	;# 
   308  0013                     	;# 
   309  0014                     	;# 
   310  0015                     	;# 
   311  0016                     	;# 
   312  0016                     	;# 
   313  0017                     	;# 
   314  0018                     	;# 
   315  0019                     	;# 
   316  001A                     	;# 
   317  001B                     	;# 
   318  001C                     	;# 
   319  001E                     	;# 
   320  001F                     	;# 
   321  008C                     	;# 
   322  008D                     	;# 
   323  008E                     	;# 
   324  0091                     	;# 
   325  0092                     	;# 
   326  0093                     	;# 
   327  0094                     	;# 
   328  0095                     	;# 
   329  0096                     	;# 
   330  0097                     	;# 
   331  0098                     	;# 
   332  0099                     	;# 
   333  009A                     	;# 
   334  009B                     	;# 
   335  009B                     	;# 
   336  009C                     	;# 
   337  009D                     	;# 
   338  009E                     	;# 
   339  010C                     	;# 
   340  010D                     	;# 
   341  010E                     	;# 
   342  0111                     	;# 
   343  0112                     	;# 
   344  0113                     	;# 
   345  0114                     	;# 
   346  0115                     	;# 
   347  0116                     	;# 
   348  0117                     	;# 
   349  0118                     	;# 
   350  0119                     	;# 
   351  011A                     	;# 
   352  011B                     	;# 
   353  011D                     	;# 
   354  011E                     	;# 
   355  018C                     	;# 
   356  018D                     	;# 
   357  018E                     	;# 
   358  0191                     	;# 
   359  0191                     	;# 
   360  0192                     	;# 
   361  0193                     	;# 
   362  0193                     	;# 
   363  0193                     	;# 
   364  0194                     	;# 
   365  0195                     	;# 
   366  0196                     	;# 
   367  0199                     	;# 
   368  019A                     	;# 
   369  019B                     	;# 
   370  019B                     	;# 
   371  019C                     	;# 
   372  019D                     	;# 
   373  019E                     	;# 
   374  019F                     	;# 
   375  020C                     	;# 
   376  020D                     	;# 
   377  020E                     	;# 
   378  0211                     	;# 
   379  0211                     	;# 
   380  0212                     	;# 
   381  0212                     	;# 
   382  0213                     	;# 
   383  0213                     	;# 
   384  0214                     	;# 
   385  0214                     	;# 
   386  0215                     	;# 
   387  0215                     	;# 
   388  0215                     	;# 
   389  0216                     	;# 
   390  0216                     	;# 
   391  0217                     	;# 
   392  0217                     	;# 
   393  0219                     	;# 
   394  021A                     	;# 
   395  021B                     	;# 
   396  021C                     	;# 
   397  021D                     	;# 
   398  021E                     	;# 
   399  021F                     	;# 
   400  0291                     	;# 
   401  0291                     	;# 
   402  0292                     	;# 
   403  0293                     	;# 
   404  0294                     	;# 
   405  0295                     	;# 
   406  0295                     	;# 
   407  0296                     	;# 
   408  0298                     	;# 
   409  0298                     	;# 
   410  0299                     	;# 
   411  029A                     	;# 
   412  029B                     	;# 
   413  029C                     	;# 
   414  029D                     	;# 
   415  029E                     	;# 
   416  0311                     	;# 
   417  0311                     	;# 
   418  0312                     	;# 
   419  0313                     	;# 
   420  0318                     	;# 
   421  0318                     	;# 
   422  0319                     	;# 
   423  031A                     	;# 
   424  038C                     	;# 
   425  038D                     	;# 
   426  038E                     	;# 
   427  0391                     	;# 
   428  0392                     	;# 
   429  0393                     	;# 
   430  0394                     	;# 
   431  0395                     	;# 
   432  0396                     	;# 
   433  039A                     	;# 
   434  039C                     	;# 
   435  039D                     	;# 
   436  039E                     	;# 
   437  039F                     	;# 
   438  0415                     	;# 
   439  0416                     	;# 
   440  0417                     	;# 
   441  041C                     	;# 
   442  041D                     	;# 
   443  041E                     	;# 
   444  0FE4                     	;# 
   445  0FE5                     	;# 
   446  0FE6                     	;# 
   447  0FE7                     	;# 
   448  0FE8                     	;# 
   449  0FE9                     	;# 
   450  0FEA                     	;# 
   451  0FEB                     	;# 
   452  0FED                     	;# 
   453  0FEE                     	;# 
   454  0FEF                     	;# 
   455  0000                     	;# 
   456  0001                     	;# 
   457  0002                     	;# 
   458  0003                     	;# 
   459  0004                     	;# 
   460  0005                     	;# 
   461  0006                     	;# 
   462  0007                     	;# 
   463  0008                     	;# 
   464  0009                     	;# 
   465  000A                     	;# 
   466  000B                     	;# 
   467  000C                     	;# 
   468  000D                     	;# 
   469  000E                     	;# 
   470  0011                     	;# 
   471  0012                     	;# 
   472  0013                     	;# 
   473  0014                     	;# 
   474  0015                     	;# 
   475  0016                     	;# 
   476  0016                     	;# 
   477  0017                     	;# 
   478  0018                     	;# 
   479  0019                     	;# 
   480  001A                     	;# 
   481  001B                     	;# 
   482  001C                     	;# 
   483  001E                     	;# 
   484  001F                     	;# 
   485  008C                     	;# 
   486  008D                     	;# 
   487  008E                     	;# 
   488  0091                     	;# 
   489  0092                     	;# 
   490  0093                     	;# 
   491  0094                     	;# 
   492  0095                     	;# 
   493  0096                     	;# 
   494  0097                     	;# 
   495  0098                     	;# 
   496  0099                     	;# 
   497  009A                     	;# 
   498  009B                     	;# 
   499  009B                     	;# 
   500  009C                     	;# 
   501  009D                     	;# 
   502  009E                     	;# 
   503  010C                     	;# 
   504  010D                     	;# 
   505  010E                     	;# 
   506  0111                     	;# 
   507  0112                     	;# 
   508  0113                     	;# 
   509  0114                     	;# 
   510  0115                     	;# 
   511  0116                     	;# 
   512  0117                     	;# 
   513  0118                     	;# 
   514  0119                     	;# 
   515  011A                     	;# 
   516  011B                     	;# 
   517  011D                     	;# 
   518  011E                     	;# 
   519  018C                     	;# 
   520  018D                     	;# 
   521  018E                     	;# 
   522  0191                     	;# 
   523  0191                     	;# 
   524  0192                     	;# 
   525  0193                     	;# 
   526  0193                     	;# 
   527  0193                     	;# 
   528  0194                     	;# 
   529  0195                     	;# 
   530  0196                     	;# 
   531  0199                     	;# 
   532  019A                     	;# 
   533  019B                     	;# 
   534  019B                     	;# 
   535  019C                     	;# 
   536  019D                     	;# 
   537  019E                     	;# 
   538  019F                     	;# 
   539  020C                     	;# 
   540  020D                     	;# 
   541  020E                     	;# 
   542  0211                     	;# 
   543  0211                     	;# 
   544  0212                     	;# 
   545  0212                     	;# 
   546  0213                     	;# 
   547  0213                     	;# 
   548  0214                     	;# 
   549  0214                     	;# 
   550  0215                     	;# 
   551  0215                     	;# 
   552  0215                     	;# 
   553  0216                     	;# 
   554  0216                     	;# 
   555  0217                     	;# 
   556  0217                     	;# 
   557  0219                     	;# 
   558  021A                     	;# 
   559  021B                     	;# 
   560  021C                     	;# 
   561  021D                     	;# 
   562  021E                     	;# 
   563  021F                     	;# 
   564  0291                     	;# 
   565  0291                     	;# 
   566  0292                     	;# 
   567  0293                     	;# 
   568  0294                     	;# 
   569  0295                     	;# 
   570  0295                     	;# 
   571  0296                     	;# 
   572  0298                     	;# 
   573  0298                     	;# 
   574  0299                     	;# 
   575  029A                     	;# 
   576  029B                     	;# 
   577  029C                     	;# 
   578  029D                     	;# 
   579  029E                     	;# 
   580  0311                     	;# 
   581  0311                     	;# 
   582  0312                     	;# 
   583  0313                     	;# 
   584  0318                     	;# 
   585  0318                     	;# 
   586  0319                     	;# 
   587  031A                     	;# 
   588  038C                     	;# 
   589  038D                     	;# 
   590  038E                     	;# 
   591  0391                     	;# 
   592  0392                     	;# 
   593  0393                     	;# 
   594  0394                     	;# 
   595  0395                     	;# 
   596  0396                     	;# 
   597  039A                     	;# 
   598  039C                     	;# 
   599  039D                     	;# 
   600  039E                     	;# 
   601  039F                     	;# 
   602  0415                     	;# 
   603  0416                     	;# 
   604  0417                     	;# 
   605  041C                     	;# 
   606  041D                     	;# 
   607  041E                     	;# 
   608  0FE4                     	;# 
   609  0FE5                     	;# 
   610  0FE6                     	;# 
   611  0FE7                     	;# 
   612  0FE8                     	;# 
   613  0FE9                     	;# 
   614  0FEA                     	;# 
   615  0FEB                     	;# 
   616  0FED                     	;# 
   617  0FEE                     	;# 
   618  0FEF                     	;# 
   619  0000                     	;# 
   620  0001                     	;# 
   621  0002                     	;# 
   622  0003                     	;# 
   623  0004                     	;# 
   624  0005                     	;# 
   625  0006                     	;# 
   626  0007                     	;# 
   627  0008                     	;# 
   628  0009                     	;# 
   629  000A                     	;# 
   630  000B                     	;# 
   631  000C                     	;# 
   632  000D                     	;# 
   633  000E                     	;# 
   634  0011                     	;# 
   635  0012                     	;# 
   636  0013                     	;# 
   637  0014                     	;# 
   638  0015                     	;# 
   639  0016                     	;# 
   640  0016                     	;# 
   641  0017                     	;# 
   642  0018                     	;# 
   643  0019                     	;# 
   644  001A                     	;# 
   645  001B                     	;# 
   646  001C                     	;# 
   647  001E                     	;# 
   648  001F                     	;# 
   649  008C                     	;# 
   650  008D                     	;# 
   651  008E                     	;# 
   652  0091                     	;# 
   653  0092                     	;# 
   654  0093                     	;# 
   655  0094                     	;# 
   656  0095                     	;# 
   657  0096                     	;# 
   658  0097                     	;# 
   659  0098                     	;# 
   660  0099                     	;# 
   661  009A                     	;# 
   662  009B                     	;# 
   663  009B                     	;# 
   664  009C                     	;# 
   665  009D                     	;# 
   666  009E                     	;# 
   667  010C                     	;# 
   668  010D                     	;# 
   669  010E                     	;# 
   670  0111                     	;# 
   671  0112                     	;# 
   672  0113                     	;# 
   673  0114                     	;# 
   674  0115                     	;# 
   675  0116                     	;# 
   676  0117                     	;# 
   677  0118                     	;# 
   678  0119                     	;# 
   679  011A                     	;# 
   680  011B                     	;# 
   681  011D                     	;# 
   682  011E                     	;# 
   683  018C                     	;# 
   684  018D                     	;# 
   685  018E                     	;# 
   686  0191                     	;# 
   687  0191                     	;# 
   688  0192                     	;# 
   689  0193                     	;# 
   690  0193                     	;# 
   691  0193                     	;# 
   692  0194                     	;# 
   693  0195                     	;# 
   694  0196                     	;# 
   695  0199                     	;# 
   696  019A                     	;# 
   697  019B                     	;# 
   698  019B                     	;# 
   699  019C                     	;# 
   700  019D                     	;# 
   701  019E                     	;# 
   702  019F                     	;# 
   703  020C                     	;# 
   704  020D                     	;# 
   705  020E                     	;# 
   706  0211                     	;# 
   707  0211                     	;# 
   708  0212                     	;# 
   709  0212                     	;# 
   710  0213                     	;# 
   711  0213                     	;# 
   712  0214                     	;# 
   713  0214                     	;# 
   714  0215                     	;# 
   715  0215                     	;# 
   716  0215                     	;# 
   717  0216                     	;# 
   718  0216                     	;# 
   719  0217                     	;# 
   720  0217                     	;# 
   721  0219                     	;# 
   722  021A                     	;# 
   723  021B                     	;# 
   724  021C                     	;# 
   725  021D                     	;# 
   726  021E                     	;# 
   727  021F                     	;# 
   728  0291                     	;# 
   729  0291                     	;# 
   730  0292                     	;# 
   731  0293                     	;# 
   732  0294                     	;# 
   733  0295                     	;# 
   734  0295                     	;# 
   735  0296                     	;# 
   736  0298                     	;# 
   737  0298                     	;# 
   738  0299                     	;# 
   739  029A                     	;# 
   740  029B                     	;# 
   741  029C                     	;# 
   742  029D                     	;# 
   743  029E                     	;# 
   744  0311                     	;# 
   745  0311                     	;# 
   746  0312                     	;# 
   747  0313                     	;# 
   748  0318                     	;# 
   749  0318                     	;# 
   750  0319                     	;# 
   751  031A                     	;# 
   752  038C                     	;# 
   753  038D                     	;# 
   754  038E                     	;# 
   755  0391                     	;# 
   756  0392                     	;# 
   757  0393                     	;# 
   758  0394                     	;# 
   759  0395                     	;# 
   760  0396                     	;# 
   761  039A                     	;# 
   762  039C                     	;# 
   763  039D                     	;# 
   764  039E                     	;# 
   765  039F                     	;# 
   766  0415                     	;# 
   767  0416                     	;# 
   768  0417                     	;# 
   769  041C                     	;# 
   770  041D                     	;# 
   771  041E                     	;# 
   772  0FE4                     	;# 
   773  0FE5                     	;# 
   774  0FE6                     	;# 
   775  0FE7                     	;# 
   776  0FE8                     	;# 
   777  0FE9                     	;# 
   778  0FEA                     	;# 
   779  0FEB                     	;# 
   780  0FED                     	;# 
   781  0FEE                     	;# 
   782  0FEF                     	;# 
   783  0000                     	;# 
   784  0001                     	;# 
   785  0002                     	;# 
   786  0003                     	;# 
   787  0004                     	;# 
   788  0005                     	;# 
   789  0006                     	;# 
   790  0007                     	;# 
   791  0008                     	;# 
   792  0009                     	;# 
   793  000A                     	;# 
   794  000B                     	;# 
   795  000C                     	;# 
   796  000D                     	;# 
   797  000E                     	;# 
   798  0011                     	;# 
   799  0012                     	;# 
   800  0013                     	;# 
   801  0014                     	;# 
   802  0015                     	;# 
   803  0016                     	;# 
   804  0016                     	;# 
   805  0017                     	;# 
   806  0018                     	;# 
   807  0019                     	;# 
   808  001A                     	;# 
   809  001B                     	;# 
   810  001C                     	;# 
   811  001E                     	;# 
   812  001F                     	;# 
   813  008C                     	;# 
   814  008D                     	;# 
   815  008E                     	;# 
   816  0091                     	;# 
   817  0092                     	;# 
   818  0093                     	;# 
   819  0094                     	;# 
   820  0095                     	;# 
   821  0096                     	;# 
   822  0097                     	;# 
   823  0098                     	;# 
   824  0099                     	;# 
   825  009A                     	;# 
   826  009B                     	;# 
   827  009B                     	;# 
   828  009C                     	;# 
   829  009D                     	;# 
   830  009E                     	;# 
   831  010C                     	;# 
   832  010D                     	;# 
   833  010E                     	;# 
   834  0111                     	;# 
   835  0112                     	;# 
   836  0113                     	;# 
   837  0114                     	;# 
   838  0115                     	;# 
   839  0116                     	;# 
   840  0117                     	;# 
   841  0118                     	;# 
   842  0119                     	;# 
   843  011A                     	;# 
   844  011B                     	;# 
   845  011D                     	;# 
   846  011E                     	;# 
   847  018C                     	;# 
   848  018D                     	;# 
   849  018E                     	;# 
   850  0191                     	;# 
   851  0191                     	;# 
   852  0192                     	;# 
   853  0193                     	;# 
   854  0193                     	;# 
   855  0193                     	;# 
   856  0194                     	;# 
   857  0195                     	;# 
   858  0196                     	;# 
   859  0199                     	;# 
   860  019A                     	;# 
   861  019B                     	;# 
   862  019B                     	;# 
   863  019C                     	;# 
   864  019D                     	;# 
   865  019E                     	;# 
   866  019F                     	;# 
   867  020C                     	;# 
   868  020D                     	;# 
   869  020E                     	;# 
   870  0211                     	;# 
   871  0211                     	;# 
   872  0212                     	;# 
   873  0212                     	;# 
   874  0213                     	;# 
   875  0213                     	;# 
   876  0214                     	;# 
   877  0214                     	;# 
   878  0215                     	;# 
   879  0215                     	;# 
   880  0215                     	;# 
   881  0216                     	;# 
   882  0216                     	;# 
   883  0217                     	;# 
   884  0217                     	;# 
   885  0219                     	;# 
   886  021A                     	;# 
   887  021B                     	;# 
   888  021C                     	;# 
   889  021D                     	;# 
   890  021E                     	;# 
   891  021F                     	;# 
   892  0291                     	;# 
   893  0291                     	;# 
   894  0292                     	;# 
   895  0293                     	;# 
   896  0294                     	;# 
   897  0295                     	;# 
   898  0295                     	;# 
   899  0296                     	;# 
   900  0298                     	;# 
   901  0298                     	;# 
   902  0299                     	;# 
   903  029A                     	;# 
   904  029B                     	;# 
   905  029C                     	;# 
   906  029D                     	;# 
   907  029E                     	;# 
   908  0311                     	;# 
   909  0311                     	;# 
   910  0312                     	;# 
   911  0313                     	;# 
   912  0318                     	;# 
   913  0318                     	;# 
   914  0319                     	;# 
   915  031A                     	;# 
   916  038C                     	;# 
   917  038D                     	;# 
   918  038E                     	;# 
   919  0391                     	;# 
   920  0392                     	;# 
   921  0393                     	;# 
   922  0394                     	;# 
   923  0395                     	;# 
   924  0396                     	;# 
   925  039A                     	;# 
   926  039C                     	;# 
   927  039D                     	;# 
   928  039E                     	;# 
   929  039F                     	;# 
   930  0415                     	;# 
   931  0416                     	;# 
   932  0417                     	;# 
   933  041C                     	;# 
   934  041D                     	;# 
   935  041E                     	;# 
   936  0FE4                     	;# 
   937  0FE5                     	;# 
   938  0FE6                     	;# 
   939  0FE7                     	;# 
   940  0FE8                     	;# 
   941  0FE9                     	;# 
   942  0FEA                     	;# 
   943  0FEB                     	;# 
   944  0FED                     	;# 
   945  0FEE                     	;# 
   946  0FEF                     	;# 
   947  0000                     	;# 
   948  0001                     	;# 
   949  0002                     	;# 
   950  0003                     	;# 
   951  0004                     	;# 
   952  0005                     	;# 
   953  0006                     	;# 
   954  0007                     	;# 
   955  0008                     	;# 
   956  0009                     	;# 
   957  000A                     	;# 
   958  000B                     	;# 
   959  000C                     	;# 
   960  000D                     	;# 
   961  000E                     	;# 
   962  0011                     	;# 
   963  0012                     	;# 
   964  0013                     	;# 
   965  0014                     	;# 
   966  0015                     	;# 
   967  0016                     	;# 
   968  0016                     	;# 
   969  0017                     	;# 
   970  0018                     	;# 
   971  0019                     	;# 
   972  001A                     	;# 
   973  001B                     	;# 
   974  001C                     	;# 
   975  001E                     	;# 
   976  001F                     	;# 
   977  008C                     	;# 
   978  008D                     	;# 
   979  008E                     	;# 
   980  0091                     	;# 
   981  0092                     	;# 
   982  0093                     	;# 
   983  0094                     	;# 
   984  0095                     	;# 
   985  0096                     	;# 
   986  0097                     	;# 
   987  0098                     	;# 
   988  0099                     	;# 
   989  009A                     	;# 
   990  009B                     	;# 
   991  009B                     	;# 
   992  009C                     	;# 
   993  009D                     	;# 
   994  009E                     	;# 
   995  010C                     	;# 
   996  010D                     	;# 
   997  010E                     	;# 
   998  0111                     	;# 
   999  0112                     	;# 
  1000  0113                     	;# 
  1001  0114                     	;# 
  1002  0115                     	;# 
  1003  0116                     	;# 
  1004  0117                     	;# 
  1005  0118                     	;# 
  1006  0119                     	;# 
  1007  011A                     	;# 
  1008  011B                     	;# 
  1009  011D                     	;# 
  1010  011E                     	;# 
  1011  018C                     	;# 
  1012  018D                     	;# 
  1013  018E                     	;# 
  1014  0191                     	;# 
  1015  0191                     	;# 
  1016  0192                     	;# 
  1017  0193                     	;# 
  1018  0193                     	;# 
  1019  0193                     	;# 
  1020  0194                     	;# 
  1021  0195                     	;# 
  1022  0196                     	;# 
  1023  0199                     	;# 
  1024  019A                     	;# 
  1025  019B                     	;# 
  1026  019B                     	;# 
  1027  019C                     	;# 
  1028  019D                     	;# 
  1029  019E                     	;# 
  1030  019F                     	;# 
  1031  020C                     	;# 
  1032  020D                     	;# 
  1033  020E                     	;# 
  1034  0211                     	;# 
  1035  0211                     	;# 
  1036  0212                     	;# 
  1037  0212                     	;# 
  1038  0213                     	;# 
  1039  0213                     	;# 
  1040  0214                     	;# 
  1041  0214                     	;# 
  1042  0215                     	;# 
  1043  0215                     	;# 
  1044  0215                     	;# 
  1045  0216                     	;# 
  1046  0216                     	;# 
  1047  0217                     	;# 
  1048  0217                     	;# 
  1049  0219                     	;# 
  1050  021A                     	;# 
  1051  021B                     	;# 
  1052  021C                     	;# 
  1053  021D                     	;# 
  1054  021E                     	;# 
  1055  021F                     	;# 
  1056  0291                     	;# 
  1057  0291                     	;# 
  1058  0292                     	;# 
  1059  0293                     	;# 
  1060  0294                     	;# 
  1061  0295                     	;# 
  1062  0295                     	;# 
  1063  0296                     	;# 
  1064  0298                     	;# 
  1065  0298                     	;# 
  1066  0299                     	;# 
  1067  029A                     	;# 
  1068  029B                     	;# 
  1069  029C                     	;# 
  1070  029D                     	;# 
  1071  029E                     	;# 
  1072  0311                     	;# 
  1073  0311                     	;# 
  1074  0312                     	;# 
  1075  0313                     	;# 
  1076  0318                     	;# 
  1077  0318                     	;# 
  1078  0319                     	;# 
  1079  031A                     	;# 
  1080  038C                     	;# 
  1081  038D                     	;# 
  1082  038E                     	;# 
  1083  0391                     	;# 
  1084  0392                     	;# 
  1085  0393                     	;# 
  1086  0394                     	;# 
  1087  0395                     	;# 
  1088  0396                     	;# 
  1089  039A                     	;# 
  1090  039C                     	;# 
  1091  039D                     	;# 
  1092  039E                     	;# 
  1093  039F                     	;# 
  1094  0415                     	;# 
  1095  0416                     	;# 
  1096  0417                     	;# 
  1097  041C                     	;# 
  1098  041D                     	;# 
  1099  041E                     	;# 
  1100  0FE4                     	;# 
  1101  0FE5                     	;# 
  1102  0FE6                     	;# 
  1103  0FE7                     	;# 
  1104  0FE8                     	;# 
  1105  0FE9                     	;# 
  1106  0FEA                     	;# 
  1107  0FEB                     	;# 
  1108  0FED                     	;# 
  1109  0FEE                     	;# 
  1110  0FEF                     	;# 
  1111  0000                     	;# 
  1112  0001                     	;# 
  1113  0002                     	;# 
  1114  0003                     	;# 
  1115  0004                     	;# 
  1116  0005                     	;# 
  1117  0006                     	;# 
  1118  0007                     	;# 
  1119  0008                     	;# 
  1120  0009                     	;# 
  1121  000A                     	;# 
  1122  000B                     	;# 
  1123  000C                     	;# 
  1124  000D                     	;# 
  1125  000E                     	;# 
  1126  0011                     	;# 
  1127  0012                     	;# 
  1128  0013                     	;# 
  1129  0014                     	;# 
  1130  0015                     	;# 
  1131  0016                     	;# 
  1132  0016                     	;# 
  1133  0017                     	;# 
  1134  0018                     	;# 
  1135  0019                     	;# 
  1136  001A                     	;# 
  1137  001B                     	;# 
  1138  001C                     	;# 
  1139  001E                     	;# 
  1140  001F                     	;# 
  1141  008C                     	;# 
  1142  008D                     	;# 
  1143  008E                     	;# 
  1144  0091                     	;# 
  1145  0092                     	;# 
  1146  0093                     	;# 
  1147  0094                     	;# 
  1148  0095                     	;# 
  1149  0096                     	;# 
  1150  0097                     	;# 
  1151  0098                     	;# 
  1152  0099                     	;# 
  1153  009A                     	;# 
  1154  009B                     	;# 
  1155  009B                     	;# 
  1156  009C                     	;# 
  1157  009D                     	;# 
  1158  009E                     	;# 
  1159  010C                     	;# 
  1160  010D                     	;# 
  1161  010E                     	;# 
  1162  0111                     	;# 
  1163  0112                     	;# 
  1164  0113                     	;# 
  1165  0114                     	;# 
  1166  0115                     	;# 
  1167  0116                     	;# 
  1168  0117                     	;# 
  1169  0118                     	;# 
  1170  0119                     	;# 
  1171  011A                     	;# 
  1172  011B                     	;# 
  1173  011D                     	;# 
  1174  011E                     	;# 
  1175  018C                     	;# 
  1176  018D                     	;# 
  1177  018E                     	;# 
  1178  0191                     	;# 
  1179  0191                     	;# 
  1180  0192                     	;# 
  1181  0193                     	;# 
  1182  0193                     	;# 
  1183  0193                     	;# 
  1184  0194                     	;# 
  1185  0195                     	;# 
  1186  0196                     	;# 
  1187  0199                     	;# 
  1188  019A                     	;# 
  1189  019B                     	;# 
  1190  019B                     	;# 
  1191  019C                     	;# 
  1192  019D                     	;# 
  1193  019E                     	;# 
  1194  019F                     	;# 
  1195  020C                     	;# 
  1196  020D                     	;# 
  1197  020E                     	;# 
  1198  0211                     	;# 
  1199  0211                     	;# 
  1200  0212                     	;# 
  1201  0212                     	;# 
  1202  0213                     	;# 
  1203  0213                     	;# 
  1204  0214                     	;# 
  1205  0214                     	;# 
  1206  0215                     	;# 
  1207  0215                     	;# 
  1208  0215                     	;# 
  1209  0216                     	;# 
  1210  0216                     	;# 
  1211  0217                     	;# 
  1212  0217                     	;# 
  1213  0219                     	;# 
  1214  021A                     	;# 
  1215  021B                     	;# 
  1216  021C                     	;# 
  1217  021D                     	;# 
  1218  021E                     	;# 
  1219  021F                     	;# 
  1220  0291                     	;# 
  1221  0291                     	;# 
  1222  0292                     	;# 
  1223  0293                     	;# 
  1224  0294                     	;# 
  1225  0295                     	;# 
  1226  0295                     	;# 
  1227  0296                     	;# 
  1228  0298                     	;# 
  1229  0298                     	;# 
  1230  0299                     	;# 
  1231  029A                     	;# 
  1232  029B                     	;# 
  1233  029C                     	;# 
  1234  029D                     	;# 
  1235  029E                     	;# 
  1236  0311                     	;# 
  1237  0311                     	;# 
  1238  0312                     	;# 
  1239  0313                     	;# 
  1240  0318                     	;# 
  1241  0318                     	;# 
  1242  0319                     	;# 
  1243  031A                     	;# 
  1244  038C                     	;# 
  1245  038D                     	;# 
  1246  038E                     	;# 
  1247  0391                     	;# 
  1248  0392                     	;# 
  1249  0393                     	;# 
  1250  0394                     	;# 
  1251  0395                     	;# 
  1252  0396                     	;# 
  1253  039A                     	;# 
  1254  039C                     	;# 
  1255  039D                     	;# 
  1256  039E                     	;# 
  1257  039F                     	;# 
  1258  0415                     	;# 
  1259  0416                     	;# 
  1260  0417                     	;# 
  1261  041C                     	;# 
  1262  041D                     	;# 
  1263  041E                     	;# 
  1264  0FE4                     	;# 
  1265  0FE5                     	;# 
  1266  0FE6                     	;# 
  1267  0FE7                     	;# 
  1268  0FE8                     	;# 
  1269  0FE9                     	;# 
  1270  0FEA                     	;# 
  1271  0FEB                     	;# 
  1272  0FED                     	;# 
  1273  0FEE                     	;# 
  1274  0FEF                     	;# 
  1275  0000                     	;# 
  1276  0001                     	;# 
  1277  0002                     	;# 
  1278  0003                     	;# 
  1279  0004                     	;# 
  1280  0005                     	;# 
  1281  0006                     	;# 
  1282  0007                     	;# 
  1283  0008                     	;# 
  1284  0009                     	;# 
  1285  000A                     	;# 
  1286  000B                     	;# 
  1287  000C                     	;# 
  1288  000D                     	;# 
  1289  000E                     	;# 
  1290  0011                     	;# 
  1291  0012                     	;# 
  1292  0013                     	;# 
  1293  0014                     	;# 
  1294  0015                     	;# 
  1295  0016                     	;# 
  1296  0016                     	;# 
  1297  0017                     	;# 
  1298  0018                     	;# 
  1299  0019                     	;# 
  1300  001A                     	;# 
  1301  001B                     	;# 
  1302  001C                     	;# 
  1303  001E                     	;# 
  1304  001F                     	;# 
  1305  008C                     	;# 
  1306  008D                     	;# 
  1307  008E                     	;# 
  1308  0091                     	;# 
  1309  0092                     	;# 
  1310  0093                     	;# 
  1311  0094                     	;# 
  1312  0095                     	;# 
  1313  0096                     	;# 
  1314  0097                     	;# 
  1315  0098                     	;# 
  1316  0099                     	;# 
  1317  009A                     	;# 
  1318  009B                     	;# 
  1319  009B                     	;# 
  1320  009C                     	;# 
  1321  009D                     	;# 
  1322  009E                     	;# 
  1323  010C                     	;# 
  1324  010D                     	;# 
  1325  010E                     	;# 
  1326  0111                     	;# 
  1327  0112                     	;# 
  1328  0113                     	;# 
  1329  0114                     	;# 
  1330  0115                     	;# 
  1331  0116                     	;# 
  1332  0117                     	;# 
  1333  0118                     	;# 
  1334  0119                     	;# 
  1335  011A                     	;# 
  1336  011B                     	;# 
  1337  011D                     	;# 
  1338  011E                     	;# 
  1339  018C                     	;# 
  1340  018D                     	;# 
  1341  018E                     	;# 
  1342  0191                     	;# 
  1343  0191                     	;# 
  1344  0192                     	;# 
  1345  0193                     	;# 
  1346  0193                     	;# 
  1347  0193                     	;# 
  1348  0194                     	;# 
  1349  0195                     	;# 
  1350  0196                     	;# 
  1351  0199                     	;# 
  1352  019A                     	;# 
  1353  019B                     	;# 
  1354  019B                     	;# 
  1355  019C                     	;# 
  1356  019D                     	;# 
  1357  019E                     	;# 
  1358  019F                     	;# 
  1359  020C                     	;# 
  1360  020D                     	;# 
  1361  020E                     	;# 
  1362  0211                     	;# 
  1363  0211                     	;# 
  1364  0212                     	;# 
  1365  0212                     	;# 
  1366  0213                     	;# 
  1367  0213                     	;# 
  1368  0214                     	;# 
  1369  0214                     	;# 
  1370  0215                     	;# 
  1371  0215                     	;# 
  1372  0215                     	;# 
  1373  0216                     	;# 
  1374  0216                     	;# 
  1375  0217                     	;# 
  1376  0217                     	;# 
  1377  0219                     	;# 
  1378  021A                     	;# 
  1379  021B                     	;# 
  1380  021C                     	;# 
  1381  021D                     	;# 
  1382  021E                     	;# 
  1383  021F                     	;# 
  1384  0291                     	;# 
  1385  0291                     	;# 
  1386  0292                     	;# 
  1387  0293                     	;# 
  1388  0294                     	;# 
  1389  0295                     	;# 
  1390  0295                     	;# 
  1391  0296                     	;# 
  1392  0298                     	;# 
  1393  0298                     	;# 
  1394  0299                     	;# 
  1395  029A                     	;# 
  1396  029B                     	;# 
  1397  029C                     	;# 
  1398  029D                     	;# 
  1399  029E                     	;# 
  1400  0311                     	;# 
  1401  0311                     	;# 
  1402  0312                     	;# 
  1403  0313                     	;# 
  1404  0318                     	;# 
  1405  0318                     	;# 
  1406  0319                     	;# 
  1407  031A                     	;# 
  1408  038C                     	;# 
  1409  038D                     	;# 
  1410  038E                     	;# 
  1411  0391                     	;# 
  1412  0392                     	;# 
  1413  0393                     	;# 
  1414  0394                     	;# 
  1415  0395                     	;# 
  1416  0396                     	;# 
  1417  039A                     	;# 
  1418  039C                     	;# 
  1419  039D                     	;# 
  1420  039E                     	;# 
  1421  039F                     	;# 
  1422  0415                     	;# 
  1423  0416                     	;# 
  1424  0417                     	;# 
  1425  041C                     	;# 
  1426  041D                     	;# 
  1427  041E                     	;# 
  1428  0FE4                     	;# 
  1429  0FE5                     	;# 
  1430  0FE6                     	;# 
  1431  0FE7                     	;# 
  1432  0FE8                     	;# 
  1433  0FE9                     	;# 
  1434  0FEA                     	;# 
  1435  0FEB                     	;# 
  1436  0FED                     	;# 
  1437  0FEE                     	;# 
  1438  0FEF                     	;# 
  1439  0000                     	;# 
  1440  0001                     	;# 
  1441  0002                     	;# 
  1442  0003                     	;# 
  1443  0004                     	;# 
  1444  0005                     	;# 
  1445  0006                     	;# 
  1446  0007                     	;# 
  1447  0008                     	;# 
  1448  0009                     	;# 
  1449  000A                     	;# 
  1450  000B                     	;# 
  1451  000C                     	;# 
  1452  000D                     	;# 
  1453  000E                     	;# 
  1454  0011                     	;# 
  1455  0012                     	;# 
  1456  0013                     	;# 
  1457  0014                     	;# 
  1458  0015                     	;# 
  1459  0016                     	;# 
  1460  0016                     	;# 
  1461  0017                     	;# 
  1462  0018                     	;# 
  1463  0019                     	;# 
  1464  001A                     	;# 
  1465  001B                     	;# 
  1466  001C                     	;# 
  1467  001E                     	;# 
  1468  001F                     	;# 
  1469  008C                     	;# 
  1470  008D                     	;# 
  1471  008E                     	;# 
  1472  0091                     	;# 
  1473  0092                     	;# 
  1474  0093                     	;# 
  1475  0094                     	;# 
  1476  0095                     	;# 
  1477  0096                     	;# 
  1478  0097                     	;# 
  1479  0098                     	;# 
  1480  0099                     	;# 
  1481  009A                     	;# 
  1482  009B                     	;# 
  1483  009B                     	;# 
  1484  009C                     	;# 
  1485  009D                     	;# 
  1486  009E                     	;# 
  1487  010C                     	;# 
  1488  010D                     	;# 
  1489  010E                     	;# 
  1490  0111                     	;# 
  1491  0112                     	;# 
  1492  0113                     	;# 
  1493  0114                     	;# 
  1494  0115                     	;# 
  1495  0116                     	;# 
  1496  0117                     	;# 
  1497  0118                     	;# 
  1498  0119                     	;# 
  1499  011A                     	;# 
  1500  011B                     	;# 
  1501  011D                     	;# 
  1502  011E                     	;# 
  1503  018C                     	;# 
  1504  018D                     	;# 
  1505  018E                     	;# 
  1506  0191                     	;# 
  1507  0191                     	;# 
  1508  0192                     	;# 
  1509  0193                     	;# 
  1510  0193                     	;# 
  1511  0193                     	;# 
  1512  0194                     	;# 
  1513  0195                     	;# 
  1514  0196                     	;# 
  1515  0199                     	;# 
  1516  019A                     	;# 
  1517  019B                     	;# 
  1518  019B                     	;# 
  1519  019C                     	;# 
  1520  019D                     	;# 
  1521  019E                     	;# 
  1522  019F                     	;# 
  1523  020C                     	;# 
  1524  020D                     	;# 
  1525  020E                     	;# 
  1526  0211                     	;# 
  1527  0211                     	;# 
  1528  0212                     	;# 
  1529  0212                     	;# 
  1530  0213                     	;# 
  1531  0213                     	;# 
  1532  0214                     	;# 
  1533  0214                     	;# 
  1534  0215                     	;# 
  1535  0215                     	;# 
  1536  0215                     	;# 
  1537  0216                     	;# 
  1538  0216                     	;# 
  1539  0217                     	;# 
  1540  0217                     	;# 
  1541  0219                     	;# 
  1542  021A                     	;# 
  1543  021B                     	;# 
  1544  021C                     	;# 
  1545  021D                     	;# 
  1546  021E                     	;# 
  1547  021F                     	;# 
  1548  0291                     	;# 
  1549  0291                     	;# 
  1550  0292                     	;# 
  1551  0293                     	;# 
  1552  0294                     	;# 
  1553  0295                     	;# 
  1554  0295                     	;# 
  1555  0296                     	;# 
  1556  0298                     	;# 
  1557  0298                     	;# 
  1558  0299                     	;# 
  1559  029A                     	;# 
  1560  029B                     	;# 
  1561  029C                     	;# 
  1562  029D                     	;# 
  1563  029E                     	;# 
  1564  0311                     	;# 
  1565  0311                     	;# 
  1566  0312                     	;# 
  1567  0313                     	;# 
  1568  0318                     	;# 
  1569  0318                     	;# 
  1570  0319                     	;# 
  1571  031A                     	;# 
  1572  038C                     	;# 
  1573  038D                     	;# 
  1574  038E                     	;# 
  1575  0391                     	;# 
  1576  0392                     	;# 
  1577  0393                     	;# 
  1578  0394                     	;# 
  1579  0395                     	;# 
  1580  0396                     	;# 
  1581  039A                     	;# 
  1582  039C                     	;# 
  1583  039D                     	;# 
  1584  039E                     	;# 
  1585  039F                     	;# 
  1586  0415                     	;# 
  1587  0416                     	;# 
  1588  0417                     	;# 
  1589  041C                     	;# 
  1590  041D                     	;# 
  1591  041E                     	;# 
  1592  0FE4                     	;# 
  1593  0FE5                     	;# 
  1594  0FE6                     	;# 
  1595  0FE7                     	;# 
  1596  0FE8                     	;# 
  1597  0FE9                     	;# 
  1598  0FEA                     	;# 
  1599  0FEB                     	;# 
  1600  0FED                     	;# 
  1601  0FEE                     	;# 
  1602  0FEF                     	;# 
  1603  0000                     	;# 
  1604  0001                     	;# 
  1605  0002                     	;# 
  1606  0003                     	;# 
  1607  0004                     	;# 
  1608  0005                     	;# 
  1609  0006                     	;# 
  1610  0007                     	;# 
  1611  0008                     	;# 
  1612  0009                     	;# 
  1613  000A                     	;# 
  1614  000B                     	;# 
  1615  000C                     	;# 
  1616  000D                     	;# 
  1617  000E                     	;# 
  1618  0011                     	;# 
  1619  0012                     	;# 
  1620  0013                     	;# 
  1621  0014                     	;# 
  1622  0015                     	;# 
  1623  0016                     	;# 
  1624  0016                     	;# 
  1625  0017                     	;# 
  1626  0018                     	;# 
  1627  0019                     	;# 
  1628  001A                     	;# 
  1629  001B                     	;# 
  1630  001C                     	;# 
  1631  001E                     	;# 
  1632  001F                     	;# 
  1633  008C                     	;# 
  1634  008D                     	;# 
  1635  008E                     	;# 
  1636  0091                     	;# 
  1637  0092                     	;# 
  1638  0093                     	;# 
  1639  0094                     	;# 
  1640  0095                     	;# 
  1641  0096                     	;# 
  1642  0097                     	;# 
  1643  0098                     	;# 
  1644  0099                     	;# 
  1645  009A                     	;# 
  1646  009B                     	;# 
  1647  009B                     	;# 
  1648  009C                     	;# 
  1649  009D                     	;# 
  1650  009E                     	;# 
  1651  010C                     	;# 
  1652  010D                     	;# 
  1653  010E                     	;# 
  1654  0111                     	;# 
  1655  0112                     	;# 
  1656  0113                     	;# 
  1657  0114                     	;# 
  1658  0115                     	;# 
  1659  0116                     	;# 
  1660  0117                     	;# 
  1661  0118                     	;# 
  1662  0119                     	;# 
  1663  011A                     	;# 
  1664  011B                     	;# 
  1665  011D                     	;# 
  1666  011E                     	;# 
  1667  018C                     	;# 
  1668  018D                     	;# 
  1669  018E                     	;# 
  1670  0191                     	;# 
  1671  0191                     	;# 
  1672  0192                     	;# 
  1673  0193                     	;# 
  1674  0193                     	;# 
  1675  0193                     	;# 
  1676  0194                     	;# 
  1677  0195                     	;# 
  1678  0196                     	;# 
  1679  0199                     	;# 
  1680  019A                     	;# 
  1681  019B                     	;# 
  1682  019B                     	;# 
  1683  019C                     	;# 
  1684  019D                     	;# 
  1685  019E                     	;# 
  1686  019F                     	;# 
  1687  020C                     	;# 
  1688  020D                     	;# 
  1689  020E                     	;# 
  1690  0211                     	;# 
  1691  0211                     	;# 
  1692  0212                     	;# 
  1693  0212                     	;# 
  1694  0213                     	;# 
  1695  0213                     	;# 
  1696  0214                     	;# 
  1697  0214                     	;# 
  1698  0215                     	;# 
  1699  0215                     	;# 
  1700  0215                     	;# 
  1701  0216                     	;# 
  1702  0216                     	;# 
  1703  0217                     	;# 
  1704  0217                     	;# 
  1705  0219                     	;# 
  1706  021A                     	;# 
  1707  021B                     	;# 
  1708  021C                     	;# 
  1709  021D                     	;# 
  1710  021E                     	;# 
  1711  021F                     	;# 
  1712  0291                     	;# 
  1713  0291                     	;# 
  1714  0292                     	;# 
  1715  0293                     	;# 
  1716  0294                     	;# 
  1717  0295                     	;# 
  1718  0295                     	;# 
  1719  0296                     	;# 
  1720  0298                     	;# 
  1721  0298                     	;# 
  1722  0299                     	;# 
  1723  029A                     	;# 
  1724  029B                     	;# 
  1725  029C                     	;# 
  1726  029D                     	;# 
  1727  029E                     	;# 
  1728  0311                     	;# 
  1729  0311                     	;# 
  1730  0312                     	;# 
  1731  0313                     	;# 
  1732  0318                     	;# 
  1733  0318                     	;# 
  1734  0319                     	;# 
  1735  031A                     	;# 
  1736  038C                     	;# 
  1737  038D                     	;# 
  1738  038E                     	;# 
  1739  0391                     	;# 
  1740  0392                     	;# 
  1741  0393                     	;# 
  1742  0394                     	;# 
  1743  0395                     	;# 
  1744  0396                     	;# 
  1745  039A                     	;# 
  1746  039C                     	;# 
  1747  039D                     	;# 
  1748  039E                     	;# 
  1749  039F                     	;# 
  1750  0415                     	;# 
  1751  0416                     	;# 
  1752  0417                     	;# 
  1753  041C                     	;# 
  1754  041D                     	;# 
  1755  041E                     	;# 
  1756  0FE4                     	;# 
  1757  0FE5                     	;# 
  1758  0FE6                     	;# 
  1759  0FE7                     	;# 
  1760  0FE8                     	;# 
  1761  0FE9                     	;# 
  1762  0FEA                     	;# 
  1763  0FEB                     	;# 
  1764  0FED                     	;# 
  1765  0FEE                     	;# 
  1766  0FEF                     	;# 
  1767  0000                     	;# 
  1768  0001                     	;# 
  1769  0002                     	;# 
  1770  0003                     	;# 
  1771  0004                     	;# 
  1772  0005                     	;# 
  1773  0006                     	;# 
  1774  0007                     	;# 
  1775  0008                     	;# 
  1776  0009                     	;# 
  1777  000A                     	;# 
  1778  000B                     	;# 
  1779  000C                     	;# 
  1780  000D                     	;# 
  1781  000E                     	;# 
  1782  0011                     	;# 
  1783  0012                     	;# 
  1784  0013                     	;# 
  1785  0014                     	;# 
  1786  0015                     	;# 
  1787  0016                     	;# 
  1788  0016                     	;# 
  1789  0017                     	;# 
  1790  0018                     	;# 
  1791  0019                     	;# 
  1792  001A                     	;# 
  1793  001B                     	;# 
  1794  001C                     	;# 
  1795  001E                     	;# 
  1796  001F                     	;# 
  1797  008C                     	;# 
  1798  008D                     	;# 
  1799  008E                     	;# 
  1800  0091                     	;# 
  1801  0092                     	;# 
  1802  0093                     	;# 
  1803  0094                     	;# 
  1804  0095                     	;# 
  1805  0096                     	;# 
  1806  0097                     	;# 
  1807  0098                     	;# 
  1808  0099                     	;# 
  1809  009A                     	;# 
  1810  009B                     	;# 
  1811  009B                     	;# 
  1812  009C                     	;# 
  1813  009D                     	;# 
  1814  009E                     	;# 
  1815  010C                     	;# 
  1816  010D                     	;# 
  1817  010E                     	;# 
  1818  0111                     	;# 
  1819  0112                     	;# 
  1820  0113                     	;# 
  1821  0114                     	;# 
  1822  0115                     	;# 
  1823  0116                     	;# 
  1824  0117                     	;# 
  1825  0118                     	;# 
  1826  0119                     	;# 
  1827  011A                     	;# 
  1828  011B                     	;# 
  1829  011D                     	;# 
  1830  011E                     	;# 
  1831  018C                     	;# 
  1832  018D                     	;# 
  1833  018E                     	;# 
  1834  0191                     	;# 
  1835  0191                     	;# 
  1836  0192                     	;# 
  1837  0193                     	;# 
  1838  0193                     	;# 
  1839  0193                     	;# 
  1840  0194                     	;# 
  1841  0195                     	;# 
  1842  0196                     	;# 
  1843  0199                     	;# 
  1844  019A                     	;# 
  1845  019B                     	;# 
  1846  019B                     	;# 
  1847  019C                     	;# 
  1848  019D                     	;# 
  1849  019E                     	;# 
  1850  019F                     	;# 
  1851  020C                     	;# 
  1852  020D                     	;# 
  1853  020E                     	;# 
  1854  0211                     	;# 
  1855  0211                     	;# 
  1856  0212                     	;# 
  1857  0212                     	;# 
  1858  0213                     	;# 
  1859  0213                     	;# 
  1860  0214                     	;# 
  1861  0214                     	;# 
  1862  0215                     	;# 
  1863  0215                     	;# 
  1864  0215                     	;# 
  1865  0216                     	;# 
  1866  0216                     	;# 
  1867  0217                     	;# 
  1868  0217                     	;# 
  1869  0219                     	;# 
  1870  021A                     	;# 
  1871  021B                     	;# 
  1872  021C                     	;# 
  1873  021D                     	;# 
  1874  021E                     	;# 
  1875  021F                     	;# 
  1876  0291                     	;# 
  1877  0291                     	;# 
  1878  0292                     	;# 
  1879  0293                     	;# 
  1880  0294                     	;# 
  1881  0295                     	;# 
  1882  0295                     	;# 
  1883  0296                     	;# 
  1884  0298                     	;# 
  1885  0298                     	;# 
  1886  0299                     	;# 
  1887  029A                     	;# 
  1888  029B                     	;# 
  1889  029C                     	;# 
  1890  029D                     	;# 
  1891  029E                     	;# 
  1892  0311                     	;# 
  1893  0311                     	;# 
  1894  0312                     	;# 
  1895  0313                     	;# 
  1896  0318                     	;# 
  1897  0318                     	;# 
  1898  0319                     	;# 
  1899  031A                     	;# 
  1900  038C                     	;# 
  1901  038D                     	;# 
  1902  038E                     	;# 
  1903  0391                     	;# 
  1904  0392                     	;# 
  1905  0393                     	;# 
  1906  0394                     	;# 
  1907  0395                     	;# 
  1908  0396                     	;# 
  1909  039A                     	;# 
  1910  039C                     	;# 
  1911  039D                     	;# 
  1912  039E                     	;# 
  1913  039F                     	;# 
  1914  0415                     	;# 
  1915  0416                     	;# 
  1916  0417                     	;# 
  1917  041C                     	;# 
  1918  041D                     	;# 
  1919  041E                     	;# 
  1920  0FE4                     	;# 
  1921  0FE5                     	;# 
  1922  0FE6                     	;# 
  1923  0FE7                     	;# 
  1924  0FE8                     	;# 
  1925  0FE9                     	;# 
  1926  0FEA                     	;# 
  1927  0FEB                     	;# 
  1928  0FED                     	;# 
  1929  0FEE                     	;# 
  1930  0FEF                     	;# 
  1931                           
  1932                           	psect	idataCOMMON
  1933  0003                     __pidataCOMMON:	
  1934                           
  1935                           ;initializer for _I2C_slaveWriteData
  1936  0003  3455               	retlw	85
  1937                           
  1938                           	psect	idataBANK0
  1939  1754                     __pidataBANK0:	
  1940                           
  1941                           ;initializer for _tmr_scaler
  1942  1754  3401               	retlw	1
  1943                           
  1944                           ;initializer for _BACKPLANE_SLAVE_ADDRESS
  1945  1755  3401               	retlw	1
  1946                           
  1947                           ;initializer for _type_no_data
  1948  1756  3406               	retlw	6
  1949                           
  1950                           	psect	stringtext
  1951  0727                     __pstringtext:	
  1952  0727                     _dpowers:	
  1953  0727  3401               	retlw	1
  1954  0728  3400               	retlw	0
  1955  0729  340A               	retlw	10
  1956  072A  3400               	retlw	0
  1957  072B  3464               	retlw	100
  1958  072C  3400               	retlw	0
  1959  072D  34E8               	retlw	232
  1960  072E  3403               	retlw	3
  1961  072F  3410               	retlw	16
  1962  0730  3427               	retlw	39
  1963  0731                     __end_of_dpowers:	
  1964  0731                     STR_16:	
  1965  0731  3441               	retlw	65	;'A'
  1966  0732  3451               	retlw	81	;'Q'
  1967  0733  344D               	retlw	77	;'M'
  1968  0734  3431               	retlw	49	;'1'
  1969  0735  3436               	retlw	54	;'6'
  1970  0736  3430               	retlw	48	;'0'
  1971  0737  3432               	retlw	50	;'2'
  1972  0738  3458               	retlw	88	;'X'
  1973  0739  3441               	retlw	65	;'A'
  1974  073A  342D               	retlw	45	;'-'
  1975  073B  3452               	retlw	82	;'R'
  1976  073C  344E               	retlw	78	;'N'
  1977  073D  342D               	retlw	45	;'-'
  1978  073E  3447               	retlw	71	;'G'
  1979  073F  3442               	retlw	66	;'B'
  1980  0740  3457               	retlw	87	;'W'
  1981  0741  3400               	retlw	0
  1982  0742                     STR_51:	
  1983  0742  3449               	retlw	73	;'I'
  1984  0743  344C               	retlw	76	;'L'
  1985  0744  344C               	retlw	76	;'L'
  1986  0745  3445               	retlw	69	;'E'
  1987  0746  3447               	retlw	71	;'G'
  1988  0747  3441               	retlw	65	;'A'
  1989  0748  344C               	retlw	76	;'L'
  1990  0749  345F               	retlw	95	;'_'
  1991  074A  3454               	retlw	84	;'T'
  1992  074B  3459               	retlw	89	;'Y'
  1993  074C  3450               	retlw	80	;'P'
  1994  074D  3445               	retlw	69	;'E'
  1995  074E  340A               	retlw	10
  1996  074F  3400               	retlw	0
  1997  0750                     STR_31:	
  1998  0750  3424               	retlw	36	;'$'
  1999  0751  343A               	retlw	58	;':'
  2000  0752  3452               	retlw	82	;'R'
  2001  0753  3444               	retlw	68	;'D'
  2002  0754  3441               	retlw	65	;'A'
  2003  0755  343A               	retlw	58	;':'
  2004  0756  3425               	retlw	37	;'%'
  2005  0757  3464               	retlw	100	;'d'
  2006  0758  340A               	retlw	10
  2007  0759  3400               	retlw	0
  2008  075A                     STR_28:	
  2009  075A  3424               	retlw	36	;'$'
  2010  075B  343A               	retlw	58	;':'
  2011  075C  3447               	retlw	71	;'G'
  2012  075D  3445               	retlw	69	;'E'
  2013  075E  3454               	retlw	84	;'T'
  2014  075F  343A               	retlw	58	;':'
  2015  0760  3425               	retlw	37	;'%'
  2016  0761  3464               	retlw	100	;'d'
  2017  0762  340A               	retlw	10
  2018  0763  3400               	retlw	0
  2019  0764                     STR_49:	
  2020  0764  342D               	retlw	45	;'-'
  2021  0765  3425               	retlw	37	;'%'
  2022  0766  3464               	retlw	100	;'d'
  2023  0767  342E               	retlw	46	;'.'
  2024  0768  3425               	retlw	37	;'%'
  2025  0769  3430               	retlw	48	;'0'
  2026  076A  3432               	retlw	50	;'2'
  2027  076B  3464               	retlw	100	;'d'
  2028  076C  340A               	retlw	10
  2029  076D  3400               	retlw	0
  2030  076E                     STR_20:	
  2031  076E  3424               	retlw	36	;'$'
  2032  076F  343A               	retlw	58	;':'
  2033  0770  3457               	retlw	87	;'W'
  2034  0771  3448               	retlw	72	;'H'
  2035  0772  344F               	retlw	79	;'O'
  2036  0773  343A               	retlw	58	;':'
  2037  0774  3425               	retlw	37	;'%'
  2038  0775  3473               	retlw	115	;'s'
  2039  0776  340A               	retlw	10
  2040  0777  3400               	retlw	0
  2041  0778                     STR_24:	
  2042  0778  342A               	retlw	42	;'*'
  2043  0779  343A               	retlw	58	;':'
  2044  077A  3453               	retlw	83	;'S'
  2045  077B  3454               	retlw	84	;'T'
  2046  077C  3450               	retlw	80	;'P'
  2047  077D  343A               	retlw	58	;':'
  2048  077E  3425               	retlw	37	;'%'
  2049  077F  3473               	retlw	115	;'s'
  2050  0780  340A               	retlw	10
  2051  0781  3400               	retlw	0
  2052  0782                     STR_47:	
  2053  0782  342D               	retlw	45	;'-'
  2054  0783  3425               	retlw	37	;'%'
  2055  0784  3464               	retlw	100	;'d'
  2056  0785  342E               	retlw	46	;'.'
  2057  0786  3425               	retlw	37	;'%'
  2058  0787  3430               	retlw	48	;'0'
  2059  0788  3432               	retlw	50	;'2'
  2060  0789  3464               	retlw	100	;'d'
  2061  078A  342C               	retlw	44	;','
  2062  078B  3400               	retlw	0
  2063  078C                     STR_39:	
  2064  078C  3455               	retlw	85	;'U'
  2065  078D  3449               	retlw	73	;'I'
  2066  078E  344E               	retlw	78	;'N'
  2067  078F  3454               	retlw	84	;'T'
  2068  0790  3431               	retlw	49	;'1'
  2069  0791  3436               	retlw	54	;'6'
  2070  0792  345F               	retlw	95	;'_'
  2071  0793  3454               	retlw	84	;'T'
  2072  0794  343A               	retlw	58	;':'
  2073  0795  3400               	retlw	0
  2074  0796                     STR_50:	
  2075  0796  344E               	retlw	78	;'N'
  2076  0797  344F               	retlw	79	;'O'
  2077  0798  345F               	retlw	95	;'_'
  2078  0799  3444               	retlw	68	;'D'
  2079  079A  3441               	retlw	65	;'A'
  2080  079B  3454               	retlw	84	;'T'
  2081  079C  3441               	retlw	65	;'A'
  2082  079D  340A               	retlw	10
  2083  079E  3400               	retlw	0
  2084  079F                     STR_33:	
  2085  079F  3455               	retlw	85	;'U'
  2086  07A0  3449               	retlw	73	;'I'
  2087  07A1  344E               	retlw	78	;'N'
  2088  07A2  3454               	retlw	84	;'T'
  2089  07A3  3438               	retlw	56	;'8'
  2090  07A4  345F               	retlw	95	;'_'
  2091  07A5  3454               	retlw	84	;'T'
  2092  07A6  343A               	retlw	58	;':'
  2093  07A7  3400               	retlw	0
  2094  07A8                     STR_45:	
  2095  07A8  3446               	retlw	70	;'F'
  2096  07A9  344C               	retlw	76	;'L'
  2097  07AA  344F               	retlw	79	;'O'
  2098  07AB  3441               	retlw	65	;'A'
  2099  07AC  3454               	retlw	84	;'T'
  2100  07AD  343A               	retlw	58	;':'
  2101  07AE  3400               	retlw	0
  2102  07AF                     STR_17:	
  2103  07AF  3428               	retlw	40	;'('
  2104  07B0  346E               	retlw	110	;'n'
  2105  07B1  3475               	retlw	117	;'u'
  2106  07B2  346C               	retlw	108	;'l'
  2107  07B3  346C               	retlw	108	;'l'
  2108  07B4  3429               	retlw	41	;')'
  2109  07B5  3400               	retlw	0
  2110  07B6                     STR_32:	
  2111  07B6  3425               	retlw	37	;'%'
  2112  07B7  3425               	retlw	37	;'%'
  2113  07B8  3425               	retlw	37	;'%'
  2114  07B9  3464               	retlw	100	;'d'
  2115  07BA  343A               	retlw	58	;':'
  2116  07BB  3400               	retlw	0
  2117  07BC                     STR_18:	
  2118  07BC  3423               	retlw	35	;'#'
  2119  07BD  3425               	retlw	37	;'%'
  2120  07BE  3473               	retlw	115	;'s'
  2121  07BF  340A               	retlw	10
  2122  07C0  3400               	retlw	0
  2123  07C1                     STR_35:	
  2124  07C1  3425               	retlw	37	;'%'
  2125  07C2  3475               	retlw	117	;'u'
  2126  07C3  340A               	retlw	10
  2127  07C4  3400               	retlw	0
  2128  07C5                     STR_37:	
  2129  07C5  3425               	retlw	37	;'%'
  2130  07C6  3464               	retlw	100	;'d'
  2131  07C7  342C               	retlw	44	;','
  2132  07C8  3400               	retlw	0
  2133  07C9                     STR_34:	
  2134  07C9  3425               	retlw	37	;'%'
  2135  07CA  3475               	retlw	117	;'u'
  2136  07CB  342C               	retlw	44	;','
  2137  07CC  3400               	retlw	0
  2138  07CD                     STR_30:	
  2139  07CD  3452               	retlw	82	;'R'
  2140  07CE  3444               	retlw	68	;'D'
  2141  07CF  3441               	retlw	65	;'A'
  2142  07D0  3400               	retlw	0
  2143  07D1                     STR_29:	
  2144  07D1  3457               	retlw	87	;'W'
  2145  07D2  3444               	retlw	68	;'D'
  2146  07D3  3441               	retlw	65	;'A'
  2147  07D4  3400               	retlw	0
  2148  07D5                     STR_22:	
  2149  07D5  3453               	retlw	83	;'S'
  2150  07D6  3454               	retlw	84	;'T'
  2151  07D7  3441               	retlw	65	;'A'
  2152  07D8  3400               	retlw	0
  2153  07D9                     STR_25:	
  2154  07D9  3441               	retlw	65	;'A'
  2155  07DA  3443               	retlw	67	;'C'
  2156  07DB  344B               	retlw	75	;'K'
  2157  07DC  3400               	retlw	0
  2158  07DD                     STR_19:	
  2159  07DD  3457               	retlw	87	;'W'
  2160  07DE  3448               	retlw	72	;'H'
  2161  07DF  344F               	retlw	79	;'O'
  2162  07E0  3400               	retlw	0
  2163  07E1                     STR_23:	
  2164  07E1  3453               	retlw	83	;'S'
  2165  07E2  3454               	retlw	84	;'T'
  2166  07E3  3450               	retlw	80	;'P'
  2167  07E4  3400               	retlw	0
  2168  07E5                     STR_27:	
  2169  07E5  3447               	retlw	71	;'G'
  2170  07E6  3445               	retlw	69	;'E'
  2171  07E7  3454               	retlw	84	;'T'
  2172  07E8  3400               	retlw	0
  2173  07E9                     STR_26:	
  2174  07E9  3453               	retlw	83	;'S'
  2175  07EA  3445               	retlw	69	;'E'
  2176  07EB  3454               	retlw	84	;'T'
  2177  07EC  3400               	retlw	0
  2178  07ED                     STR_21:	
  2179  07ED  3453               	retlw	83	;'S'
  2180  07EE  3441               	retlw	65	;'A'
  2181  07EF  3456               	retlw	86	;'V'
  2182  07F0  3400               	retlw	0
  2183  07F1                     STR_13:	
  2184  07F1  344C               	retlw	76	;'L'
  2185  07F2  3445               	retlw	69	;'E'
  2186  07F3  3444               	retlw	68	;'D'
  2187  07F4  3400               	retlw	0
  2188  07F5                     STR_2:	
  2189  07F5  3443               	retlw	67	;'C'
  2190  07F6  344D               	retlw	77	;'M'
  2191  07F7  3444               	retlw	68	;'D'
  2192  07F8  3400               	retlw	0
  2193  07F9                     STR_15:	
  2194  07F9  344F               	retlw	79	;'O'
  2195  07FA  3446               	retlw	70	;'F'
  2196  07FB  3446               	retlw	70	;'F'
  2197  07FC  3400               	retlw	0
  2198  07FD                     STR_1:	
  2199  07FD  3449               	retlw	73	;'I'
  2200  07FE  344E               	retlw	78	;'N'
  2201  07FF  3449               	retlw	73	;'I'
  2202  0800  3400               	retlw	0
  2203  0801                     STR_8:	
  2204  0801  3443               	retlw	67	;'C'
  2205  0802  3455               	retlw	85	;'U'
  2206  0803  344C               	retlw	76	;'L'
  2207  0804  3400               	retlw	0
  2208  0805                     STR_10:	
  2209  0805  344E               	retlw	78	;'N'
  2210  0806  3457               	retlw	87	;'W'
  2211  0807  344C               	retlw	76	;'L'
  2212  0808  3400               	retlw	0
  2213  0809                     STR_11:	
  2214  0809  3448               	retlw	72	;'H'
  2215  080A  344F               	retlw	79	;'O'
  2216  080B  344D               	retlw	77	;'M'
  2217  080C  3400               	retlw	0
  2218  080D                     STR_7:	
  2219  080D  3444               	retlw	68	;'D'
  2220  080E  3453               	retlw	83	;'S'
  2221  080F  3450               	retlw	80	;'P'
  2222  0810  3400               	retlw	0
  2223  0811                     STR_4:	
  2224  0811  3443               	retlw	67	;'C'
  2225  0812  344C               	retlw	76	;'L'
  2226  0813  3452               	retlw	82	;'R'
  2227  0814  3400               	retlw	0
  2228  0815                     STR_5:	
  2229  0815  3453               	retlw	83	;'S'
  2230  0816  3454               	retlw	84	;'T'
  2231  0817  3452               	retlw	82	;'R'
  2232  0818  3400               	retlw	0
  2233  0819                     STR_9:	
  2234  0819  3443               	retlw	67	;'C'
  2235  081A  3455               	retlw	85	;'U'
  2236  081B  3452               	retlw	82	;'R'
  2237  081C  3400               	retlw	0
  2238  081D                     STR_3:	
  2239  081D  3444               	retlw	68	;'D'
  2240  081E  3441               	retlw	65	;'A'
  2241  081F  3454               	retlw	84	;'T'
  2242  0820  3400               	retlw	0
  2243  0821                     STR_12:	
  2244  0821  3443               	retlw	67	;'C'
  2245  0822  344E               	retlw	78	;'N'
  2246  0823  3454               	retlw	84	;'T'
  2247  0824  3400               	retlw	0
  2248  0825                     STR_6:	
  2249  0825  3448               	retlw	72	;'H'
  2250  0826  3453               	retlw	83	;'S'
  2251  0827  3454               	retlw	84	;'T'
  2252  0828  3400               	retlw	0
  2253  0829                     STR_14:	
  2254  0829  344F               	retlw	79	;'O'
  2255  082A  344E               	retlw	78	;'N'
  2256  082B  3400               	retlw	0
  2257  0756                     
  2258                           ; #config settings
  2259  0000                     
  2260                           	psect	nvBANK1
  2261  00E4                     __pnvBANK1:	
  2262  00E4                     _device_id_:	
  2263  00E4                     	ds	2
  2264  00E6                     _PROTOCOL_Set_Handler:	
  2265  00E6                     	ds	2
  2266  00E8                     _PROTOCOL_Stop_Handler:	
  2267  00E8                     	ds	2
  2268  00EA                     _PROTOCOL_Start_Handler:	
  2269  00EA                     	ds	2
  2270  0015                     _TMR0	set	21
  2271  000B                     _INTCONbits	set	11
  2272  0014                     _PIR4bits	set	20
  2273  0011                     _PIR1bits	set	17
  2274  005A                     _TMR0IF	set	90
  2275  0095                     _OPTION_REG	set	149
  2276  0095                     _OPTION_REGbits	set	149
  2277  008E                     _TRISC	set	142
  2278  008D                     _TRISB	set	141
  2279  008C                     _TRISA	set	140
  2280  0097                     _WDTCON	set	151
  2281  0098                     _OSCTUNE	set	152
  2282  0099                     _OSCCON	set	153
  2283  0094                     _PIE4bits	set	148
  2284  0091                     _PIE1bits	set	145
  2285  010E                     _LATCbits	set	270
  2286  011D                     _APFCON0	set	285
  2287  011E                     _APFCON1	set	286
  2288  010E                     _LATC	set	270
  2289  010D                     _LATB	set	269
  2290  010C                     _LATA	set	268
  2291  0196                     _EECON2	set	406
  2292  0193                     _EEDATL	set	403
  2293  0194                     _EEDATH	set	404
  2294  0195                     _EECON1bits	set	405
  2295  0192                     _EEADRH	set	402
  2296  0191                     _EEADRL	set	401
  2297  018C                     _ANSELA	set	396
  2298  018D                     _ANSELB	set	397
  2299  018E                     _ANSELC	set	398
  2300  0199                     _RCREG	set	409
  2301  019D                     _RCSTAbits	set	413
  2302  019A                     _TXREG	set	410
  2303  019C                     _SPBRGH	set	412
  2304  019B                     _SPBRGL	set	411
  2305  019E                     _TXSTA	set	414
  2306  019D                     _RCSTA	set	413
  2307  019F                     _BAUDCON	set	415
  2308  020E                     _WPUC	set	526
  2309  020C                     _WPUA	set	524
  2310  020D                     _WPUB	set	525
  2311  0219                     _SSP2BUF	set	537
  2312  021E                     _SSP2CON2bits	set	542
  2313  021D                     _SSP2CON1bits	set	541
  2314  021A                     _SSP2ADD	set	538
  2315  021F                     _SSP2CON3	set	543
  2316  021D                     _SSP2CON1	set	541
  2317  021C                     _SSP2STAT	set	540
  2318  0215                     _SSP1CON1bits	set	533
  2319  0216                     _SSP1CON2bits	set	534
  2320  0214                     _SSP1STATbits	set	532
  2321  0211                     _SSP1BUF	set	529
  2322  0212                     _SSP1ADD	set	530
  2323  0213                     _SSP1MSK	set	531
  2324  0217                     _SSP1CON3	set	535
  2325  0216                     _SSP1CON2	set	534
  2326  0215                     _SSP1CON1	set	533
  2327  0214                     _SSP1STAT	set	532
  2328                           
  2329                           	psect	cinit
  2330  004A                     start_initialization:	
  2331  004A                     __initialization:	
  2332                           
  2333                           ; Initialize objects allocated to COMMON
  2334  004A  3180  2003  3180   	fcall	__pidataCOMMON	;fetch initializer
  2335  004D  00FD               	movwf	__pdataCOMMON& (0+127)
  2336                           
  2337                           ; Initialize objects allocated to BANK0
  2338  004E  3197  2754  3180   	fcall	__pidataBANK0	;fetch initializer
  2339  0051  00ED               	movwf	__pdataBANK0& (0+127)
  2340  0052  3197  2755  3180   	fcall	__pidataBANK0+1	;fetch initializer
  2341  0055  00EE               	movwf	(__pdataBANK0+1)& (0+127)
  2342  0056  3197  2756  3180   	fcall	__pidataBANK0+2	;fetch initializer
  2343  0059  00EF               	movwf	(__pdataBANK0+2)& (0+127)
  2344                           
  2345                           ; Clear objects allocated to COMMON
  2346  005A  01FC               	clrf	__pbssCOMMON& (0+127)
  2347                           
  2348                           ; Clear objects allocated to BANK0
  2349  005B  3047               	movlw	low __pbssBANK0
  2350  005C  0084               	movwf	4
  2351  005D  3000               	movlw	high __pbssBANK0
  2352  005E  0085               	movwf	5
  2353  005F  3026               	movlw	38
  2354  0060  3197  2780  3180   	fcall	clear_ram0
  2355                           
  2356                           ; Clear objects allocated to BANK1
  2357  0063  30A0               	movlw	low __pbssBANK1
  2358  0064  0084               	movwf	4
  2359  0065  3000               	movlw	high __pbssBANK1
  2360  0066  0085               	movwf	5
  2361  0067  3044               	movlw	68
  2362  0068  3197  2780  3180   	fcall	clear_ram0
  2363                           
  2364                           ; Clear objects allocated to BANK2
  2365  006B  3020               	movlw	low __pbssBANK2
  2366  006C  0084               	movwf	4
  2367  006D  3001               	movlw	high __pbssBANK2
  2368  006E  0085               	movwf	5
  2369  006F  3030               	movlw	48
  2370  0070  3197  2780  3180   	fcall	clear_ram0
  2371                           
  2372                           ; Clear objects allocated to BANK3
  2373  0073  30A0               	movlw	low __pbssBANK3
  2374  0074  0084               	movwf	4
  2375  0075  3001               	movlw	high __pbssBANK3
  2376  0076  0085               	movwf	5
  2377  0077  3030               	movlw	48
  2378  0078  3197  2780         	fcall	clear_ram0
  2379  007A                     end_of_initialization:	
  2380                           ;End of C runtime variable initialization code
  2381                           
  2382  007A                     __end_of__initialization:	
  2383  007A  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2384  007B  0020               	movlb	0
  2385  007C  318B  2BB7         	ljmp	_main	;jump to C main() function
  2386                           
  2387                           	psect	bssCOMMON
  2388  007C                     __pbssCOMMON:	
  2389  007C                     _eusartTxHead:	
  2390  007C                     	ds	1
  2391                           
  2392                           	psect	dataCOMMON
  2393  007D                     __pdataCOMMON:	
  2394  007D                     _I2C_slaveWriteData:	
  2395  007D                     	ds	1
  2396                           
  2397                           	psect	bssBANK0
  2398  0047                     __pbssBANK0:	
  2399  0047                     _i2c2_object:	
  2400  0047                     	ds	5
  2401  004C                     _PROTOCOL_Extension_Handler:	
  2402  004C                     	ds	2
  2403  004E                     _backplane_slave_enabled:	
  2404  004E                     	ds	1
  2405  004F                     _readbuf_status:	
  2406  004F                     	ds	1
  2407  0050                     _tmr_overflow:	
  2408  0050                     	ds	1
  2409  0051                     _tmr_cnt:	
  2410  0051                     	ds	1
  2411  0052                     _sec_cnt:	
  2412  0052                     	ds	1
  2413  0053                     _invoked:	
  2414  0053                     	ds	1
  2415  0054                     _running:	
  2416  0054                     	ds	1
  2417  0055                     _locked:	
  2418  0055                     	ds	1
  2419  0056                     _value:	
  2420  0056                     	ds	1
  2421  0057                     _cnt:	
  2422  0057                     	ds	1
  2423  0058                     _slave_address:	
  2424  0058                     	ds	1
  2425  0059                     _pbuf:	
  2426  0059                     	ds	1
  2427  005A                     _timer0ReloadVal:	
  2428  005A                     	ds	1
  2429  005B                     _eusartRxCount:	
  2430  005B                     	ds	1
  2431  005C                     _eusartRxTail:	
  2432  005C                     	ds	1
  2433  005D                     _eusartRxHead:	
  2434  005D                     	ds	1
  2435  005E                     _eusartTxBufferRemaining:	
  2436  005E                     	ds	1
  2437  005F                     _eusartTxTail:	
  2438  005F                     	ds	1
  2439  0060                     I2C2_ISR@i2c_10bit_address_restart:	
  2440  0060                     	ds	1
  2441  0061                     I2C2_ISR@i2c_bytes_left:	
  2442  0061                     	ds	1
  2443  0062                     I2C2_ISR@pi2c_buf_ptr:	
  2444  0062                     	ds	1
  2445  0063                     _p_i2c2_current:	
  2446  0063                     	ds	1
  2447  0064                     _p_i2c2_trb_current:	
  2448  0064                     	ds	1
  2449  0065                     _i2c2_trb_count:	
  2450  0065                     	ds	1
  2451  0066                     _i2c2_state:	
  2452  0066                     	ds	1
  2453  0067                     I2C1_StatusCallback@ext_cnt:	
  2454  0067                     	ds	1
  2455  0068                     I2C1_StatusCallback@ext_len:	
  2456  0068                     	ds	1
  2457  0069                     I2C1_StatusCallback@next:	
  2458  0069                     	ds	1
  2459  006A                     I2C1_StatusCallback@slaveWriteType:	
  2460  006A                     	ds	1
  2461  006B                     I2C2_ISR@i2c_address:	
  2462  006B                     	ds	2
  2463                           
  2464                           	psect	dataBANK0
  2465  006D                     __pdataBANK0:	
  2466  006D                     _tmr_scaler:	
  2467  006D                     	ds	1
  2468  006E                     _BACKPLANE_SLAVE_ADDRESS:	
  2469  006E                     	ds	1
  2470  006F                     _type_no_data:	
  2471  006F                     	ds	1
  2472                           
  2473                           	psect	bssBANK1
  2474  00A0                     __pbssBANK1:	
  2475  00A0                     _eusartRxBuffer:	
  2476  00A0                     	ds	8
  2477  00A8                     _eusartTxBuffer:	
  2478  00A8                     	ds	8
  2479  00B0                     _float100:	
  2480  00B0                     	ds	2
  2481  00B2                     _PROTOCOL_Tick_Handler:	
  2482  00B2                     	ds	2
  2483  00B4                     _PROTOCOL_Inv_Handler:	
  2484  00B4                     	ds	2
  2485  00B6                     _PROTOCOL_Loop_Func:	
  2486  00B6                     	ds	2
  2487  00B8                     _data:	
  2488  00B8                     	ds	1
  2489  00B9                     _j:	
  2490  00B9                     	ds	1
  2491  00BA                     _i:	
  2492  00BA                     	ds	1
  2493  00BB                     _sendbuf:	
  2494  00BB                     	ds	16
  2495  00CB                     _readbuf:	
  2496  00CB                     	ds	5
  2497  00D0                     I2C2_MasterRead@trBlock:	
  2498  00D0                     	ds	4
  2499  00D4                     I2C2_MasterWrite@trBlock:	
  2500  00D4                     	ds	4
  2501  00D8                     PROTOCOL_Send_float@pbuf:	
  2502  00D8                     	ds	3
  2503  00DB                     _i2c2_tr_queue:	
  2504  00DB                     	ds	3
  2505  00DE                     PROTOCOL_Send_int16_t@pbuf:	
  2506  00DE                     	ds	2
  2507  00E0                     PROTOCOL_Send_uint16_t@pbuf:	
  2508  00E0                     	ds	2
  2509  00E2                     PROTOCOL_Send_int8_t@pbuf:	
  2510  00E2                     	ds	1
  2511  00E3                     PROTOCOL_Send_uint8_t@pbuf:	
  2512  00E3                     	ds	1
  2513                           
  2514                           	psect	bssBANK2
  2515  0120                     __pbssBANK2:	
  2516  0120                     _buf:	
  2517  0120                     	ds	48
  2518                           
  2519                           	psect	bssBANK3
  2520  01A0                     __pbssBANK3:	
  2521  01A0                     I2C1_StatusCallback@ext_buf:	
  2522  01A0                     	ds	48
  2523                           
  2524                           	psect	clrtext
  2525  1780                     clear_ram0:	
  2526                           ;	Called with FSR0 containing the base address, and
  2527                           ;	WREG with the size to clear
  2528                           
  2529  1780  0064               	clrwdt	;clear the watchdog before getting into this loop
  2530  1781                     clrloop0:	
  2531  1781  0180               	clrf	0	;clear RAM location pointed to by FSR
  2532  1782  3101               	addfsr 0,1
  2533  1783  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2534  1784  2F81               	goto	clrloop0	;have we reached the end yet?
  2535  1785  3400               	retlw	0	;all done for this memory range, return
  2536                           
  2537                           	psect	cstackCOMMON
  2538  0070                     __pcstackCOMMON:	
  2539  0070                     ?_isdigit:	
  2540  0070                     ?_PROTOCOL_Read_Device_Address:	
  2541                           ; 1 bit 
  2542                           
  2543  0070                     ?_I2C1_StatusCallback:	
  2544                           ; 1 bytes @ 0x0
  2545                           
  2546  0070                     ?_PROTOCOL_SET:	
  2547                           ; 1 bytes @ 0x0
  2548                           
  2549  0070                     ?_PROTOCOL_STA:	
  2550                           ; 1 bytes @ 0x0
  2551                           
  2552  0070                     ?_PROTOCOL_STP:	
  2553                           ; 1 bytes @ 0x0
  2554                           
  2555  0070                     ?_PROTOCOL_SAV:	
  2556                           ; 1 bytes @ 0x0
  2557                           
  2558  0070                     ?_PROTOCOL_INV:	
  2559                           ; 1 bytes @ 0x0
  2560                           
  2561  0070                     ??_PROTOCOL_INV:	
  2562                           ; 1 bytes @ 0x0
  2563                           
  2564  0070                     ?_PROTOCOL_RST:	
  2565                           ; 1 bytes @ 0x0
  2566                           
  2567  0070                     ??_PROTOCOL_RST:	
  2568                           ; 1 bytes @ 0x0
  2569                           
  2570  0070                     ?_PROTOCOL_Backplane_Slave_Enabled:	
  2571                           ; 1 bytes @ 0x0
  2572                           
  2573  0070                     ??_PROTOCOL_Backplane_Slave_Enabled:	
  2574                           ; 1 bytes @ 0x0
  2575                           
  2576  0070                     ?_PROTOCOL_Read_Lock:	
  2577                           ; 1 bytes @ 0x0
  2578                           
  2579  0070                     ?_PROTOCOL_EXT:	
  2580                           ; 1 bytes @ 0x0
  2581                           
  2582  0070                     ?_PROTOCOL_I2C_WHO:	
  2583                           ; 1 bytes @ 0x0
  2584                           
  2585  0070                     ??_PROTOCOL_I2C_WHO:	
  2586                           ; 1 bytes @ 0x0
  2587                           
  2588  0070                     ?_PROTOCOL_I2C_SEN:	
  2589                           ; 1 bytes @ 0x0
  2590                           
  2591  0070                     ??_PROTOCOL_I2C_SEN:	
  2592                           ; 1 bytes @ 0x0
  2593                           
  2594  0070                     ?_PROTOCOL_I2C_GET:	
  2595                           ; 1 bytes @ 0x0
  2596                           
  2597  0070                     ??_PROTOCOL_I2C_GET:	
  2598                           ; 1 bytes @ 0x0
  2599                           
  2600  0070                     ?_I2C2_Stop:	
  2601                           ; 1 bytes @ 0x0
  2602                           
  2603  0070                     ??_I2C2_Stop:	
  2604                           ; 1 bytes @ 0x0
  2605                           
  2606  0070                     ?_I2C2_FunctionComplete:	
  2607                           ; 1 bytes @ 0x0
  2608                           
  2609  0070                     ??_I2C2_FunctionComplete:	
  2610                           ; 1 bytes @ 0x0
  2611                           
  2612  0070                     ?_PIN_MANAGER_Initialize:	
  2613                           ; 1 bytes @ 0x0
  2614                           
  2615  0070                     ?_OSCILLATOR_Initialize:	
  2616                           ; 1 bytes @ 0x0
  2617                           
  2618  0070                     ?_WDT_Initialize:	
  2619                           ; 1 bytes @ 0x0
  2620                           
  2621  0070                     ?_TMR0_Initialize:	
  2622                           ; 1 bytes @ 0x0
  2623                           
  2624  0070                     ?_EUSART_Initialize:	
  2625                           ; 1 bytes @ 0x0
  2626                           
  2627  0070                     ?_EUSART_Transmit_ISR:	
  2628                           ; 1 bytes @ 0x0
  2629                           
  2630  0070                     ??_EUSART_Transmit_ISR:	
  2631                           ; 1 bytes @ 0x0
  2632                           
  2633  0070                     ?_EUSART_Receive_ISR:	
  2634                           ; 1 bytes @ 0x0
  2635                           
  2636  0070                     ??_EUSART_Receive_ISR:	
  2637                           ; 1 bytes @ 0x0
  2638                           
  2639  0070                     ?_PROTOCOL_Set_Lock:	
  2640                           ; 1 bytes @ 0x0
  2641                           
  2642  0070                     ?_PROTOCOL_Loop:	
  2643                           ; 1 bytes @ 0x0
  2644                           
  2645  0070                     ?_I2C1_Initialize:	
  2646                           ; 1 bytes @ 0x0
  2647                           
  2648  0070                     ?_I2C1_ISR:	
  2649                           ; 1 bytes @ 0x0
  2650                           
  2651  0070                     ?_I2C2_Initialize:	
  2652                           ; 1 bytes @ 0x0
  2653                           
  2654  0070                     ?_I2C2_ISR:	
  2655                           ; 1 bytes @ 0x0
  2656                           
  2657  0070                     ?_I2C2_BusCollisionISR:	
  2658                           ; 1 bytes @ 0x0
  2659                           
  2660  0070                     ??_I2C2_BusCollisionISR:	
  2661                           ; 1 bytes @ 0x0
  2662                           
  2663  0070                     ?_INTERRUPT_InterruptManager:	
  2664                           ; 1 bytes @ 0x0
  2665                           
  2666  0070                     ?_EUSART_Read:	
  2667                           ; 1 bytes @ 0x0
  2668                           
  2669  0070                     ?_EUSART_Write:	
  2670                           ; 1 bytes @ 0x0
  2671                           
  2672  0070                     ?_putch:	
  2673                           ; 1 bytes @ 0x0
  2674                           
  2675  0070                     ?_DATAEE_ReadByte:	
  2676                           ; 1 bytes @ 0x0
  2677                           
  2678  0070                     ?_TMR0_HasOverflowOccured:	
  2679                           ; 1 bytes @ 0x0
  2680                           
  2681  0070                     ?_lcd_init:	
  2682                           ; 1 bytes @ 0x0
  2683                           
  2684  0070                     ?_lcd_clear:	
  2685                           ; 1 bytes @ 0x0
  2686                           
  2687  0070                     ?_lcd_string:	
  2688                           ; 1 bytes @ 0x0
  2689                           
  2690  0070                     ?_lcd_string_2lines:	
  2691                           ; 1 bytes @ 0x0
  2692                           
  2693  0070                     ?_lcd_contrast:	
  2694                           ; 1 bytes @ 0x0
  2695                           
  2696  0070                     ?_lcd_test:	
  2697                           ; 1 bytes @ 0x0
  2698                           
  2699  0070                     ?_loop_func:	
  2700                           ; 1 bytes @ 0x0
  2701                           
  2702  0070                     ?_main:	
  2703                           ; 1 bytes @ 0x0
  2704                           
  2705  0070                     ?_PROTOCOL_Write_Device_Address:	
  2706                           ; 1 bytes @ 0x0
  2707                           
  2708  0070                     ?i1_DATAEE_WriteByte:	
  2709                           ; 1 bytes @ 0x0
  2710                           
  2711  0070                     ?i1_PROTOCOL_STA:	
  2712                           ; 1 bytes @ 0x0
  2713                           
  2714  0070                     ??i1_PROTOCOL_STA:	
  2715                           ; 1 bytes @ 0x0
  2716                           
  2717  0070                     ?i1_PROTOCOL_STP:	
  2718                           ; 1 bytes @ 0x0
  2719                           
  2720  0070                     ??i1_PROTOCOL_STP:	
  2721                           ; 1 bytes @ 0x0
  2722                           
  2723  0070                     ?i1_PROTOCOL_SAV:	
  2724                           ; 1 bytes @ 0x0
  2725                           
  2726  0070                     ?i1_PROTOCOL_SET:	
  2727                           ; 1 bytes @ 0x0
  2728                           
  2729  0070                     ??i1_PROTOCOL_SET:	
  2730                           ; 1 bytes @ 0x0
  2731                           
  2732  0070                     ?i1_PROTOCOL_EXT:	
  2733                           ; 1 bytes @ 0x0
  2734                           
  2735  0070                     ?i1_PROTOCOL_Set_Lock:	
  2736                           ; 1 bytes @ 0x0
  2737                           
  2738  0070                     ??i1_PROTOCOL_Set_Lock:	
  2739                           ; 1 bytes @ 0x0
  2740                           
  2741  0070                     ?i1_PROTOCOL_Read_Lock:	
  2742                           ; 1 bytes @ 0x0
  2743                           
  2744  0070                     ??i1_PROTOCOL_Read_Lock:	
  2745                           ; 1 bytes @ 0x0
  2746                           
  2747  0070                     i1DATAEE_WriteByte@bData:	
  2748                           ; 1 bytes @ 0x0
  2749                           
  2750                           
  2751                           ; 1 bytes @ 0x0
  2752  0070                     	ds	1
  2753  0071                     ??i1_DATAEE_WriteByte:	
  2754  0071                     I2C2_Stop@completion_code:	
  2755                           ; 1 bytes @ 0x1
  2756                           
  2757  0071                     PROTOCOL_I2C_SEN@pdata:	
  2758                           ; 1 bytes @ 0x1
  2759                           
  2760  0071                     i1DATAEE_WriteByte@bAdd:	
  2761                           ; 1 bytes @ 0x1
  2762                           
  2763  0071                     i1PROTOCOL_SET@value_:	
  2764                           ; 1 bytes @ 0x1
  2765                           
  2766  0071                     i1PROTOCOL_Set_Lock@lock:	
  2767                           ; 1 bytes @ 0x1
  2768                           
  2769                           
  2770                           ; 1 bytes @ 0x1
  2771  0071                     	ds	1
  2772  0072                     ??_I2C2_ISR:	
  2773  0072                     ?i1_extension_handler:	
  2774                           ; 1 bytes @ 0x2
  2775                           
  2776  0072                     i1DATAEE_WriteByte@GIEBitValue:	
  2777                           ; 1 bytes @ 0x2
  2778                           
  2779  0072                     i1extension_handler@buf:	
  2780                           ; 1 bytes @ 0x2
  2781                           
  2782                           
  2783                           ; 1 bytes @ 0x2
  2784  0072                     	ds	1
  2785  0073                     ??i1_extension_handler:	
  2786  0073                     ??i1_PROTOCOL_SAV:	
  2787                           ; 1 bytes @ 0x3
  2788                           
  2789                           
  2790                           ; 1 bytes @ 0x3
  2791  0073                     	ds	1
  2792  0074                     ??i1_PROTOCOL_EXT:	
  2793                           
  2794                           ; 1 bytes @ 0x4
  2795  0074                     	ds	1
  2796  0075                     i1PROTOCOL_EXT@char_buf:	
  2797                           
  2798                           ; 1 bytes @ 0x5
  2799  0075                     	ds	1
  2800  0076                     ??_I2C1_StatusCallback:	
  2801                           
  2802                           ; 1 bytes @ 0x6
  2803  0076                     	ds	1
  2804  0077                     I2C1_StatusCallback@i2c_bus_state:	
  2805                           
  2806                           ; 1 bytes @ 0x7
  2807  0077                     	ds	1
  2808  0078                     I2C1_StatusCallback@pdata:	
  2809                           
  2810                           ; 1 bytes @ 0x8
  2811  0078                     	ds	1
  2812  0079                     ??_I2C1_ISR:	
  2813                           
  2814                           ; 1 bytes @ 0x9
  2815  0079                     	ds	1
  2816  007A                     I2C1_ISR@i2c_data:	
  2817                           
  2818                           ; 1 bytes @ 0xA
  2819  007A                     	ds	1
  2820  007B                     ??_INTERRUPT_InterruptManager:	
  2821                           
  2822                           ; 1 bytes @ 0xB
  2823  007B                     	ds	1
  2824                           
  2825                           	psect	cstackBANK0
  2826  0020                     __pcstackBANK0:	
  2827  0020                     ??_PROTOCOL_Read_Device_Address:	
  2828  0020                     ??_PROTOCOL_SET:	
  2829                           ; 1 bytes @ 0x0
  2830                           
  2831  0020                     ??_PROTOCOL_STA:	
  2832                           ; 1 bytes @ 0x0
  2833                           
  2834  0020                     ??_PROTOCOL_STP:	
  2835                           ; 1 bytes @ 0x0
  2836                           
  2837  0020                     ??_PROTOCOL_Read_Lock:	
  2838                           ; 1 bytes @ 0x0
  2839                           
  2840  0020                     ?_I2C2_MasterWriteTRBBuild:	
  2841                           ; 1 bytes @ 0x0
  2842                           
  2843  0020                     ?_I2C2_MasterTRBInsert:	
  2844                           ; 1 bytes @ 0x0
  2845                           
  2846  0020                     ??_PIN_MANAGER_Initialize:	
  2847                           ; 1 bytes @ 0x0
  2848                           
  2849  0020                     ??_OSCILLATOR_Initialize:	
  2850                           ; 1 bytes @ 0x0
  2851                           
  2852  0020                     ??_WDT_Initialize:	
  2853                           ; 1 bytes @ 0x0
  2854                           
  2855  0020                     ??_TMR0_Initialize:	
  2856                           ; 1 bytes @ 0x0
  2857                           
  2858  0020                     ??_EUSART_Initialize:	
  2859                           ; 1 bytes @ 0x0
  2860                           
  2861  0020                     ??_PROTOCOL_Set_Lock:	
  2862                           ; 1 bytes @ 0x0
  2863                           
  2864  0020                     ?_PROTOCOL_Set_Extension_Handler:	
  2865                           ; 1 bytes @ 0x0
  2866                           
  2867  0020                     ?_PROTOCOL_Set_Func:	
  2868                           ; 1 bytes @ 0x0
  2869                           
  2870  0020                     ??_isdigit:	
  2871                           ; 1 bytes @ 0x0
  2872                           
  2873  0020                     ??_I2C1_Initialize:	
  2874                           ; 1 bytes @ 0x0
  2875                           
  2876  0020                     ??_I2C2_Initialize:	
  2877                           ; 1 bytes @ 0x0
  2878                           
  2879  0020                     ??_EUSART_Read:	
  2880                           ; 1 bytes @ 0x0
  2881                           
  2882  0020                     ??_EUSART_Write:	
  2883                           ; 1 bytes @ 0x0
  2884                           
  2885  0020                     ?_DATAEE_WriteByte:	
  2886                           ; 1 bytes @ 0x0
  2887                           
  2888  0020                     ??_DATAEE_ReadByte:	
  2889                           ; 1 bytes @ 0x0
  2890                           
  2891  0020                     ??_TMR0_HasOverflowOccured:	
  2892                           ; 1 bytes @ 0x0
  2893                           
  2894  0020                     ?_strncmp:	
  2895                           ; 1 bytes @ 0x0
  2896                           
  2897  0020                     ?___wmul:	
  2898                           ; 2 bytes @ 0x0
  2899                           
  2900  0020                     ?___lwdiv:	
  2901                           ; 2 bytes @ 0x0
  2902                           
  2903  0020                     I2C2_MasterTRBInsert@ptrb_list:	
  2904                           ; 2 bytes @ 0x0
  2905                           
  2906  0020                     I2C2_MasterWriteTRBBuild@pdata:	
  2907                           ; 1 bytes @ 0x0
  2908                           
  2909  0020                     DATAEE_WriteByte@bData:	
  2910                           ; 1 bytes @ 0x0
  2911                           
  2912  0020                     DATAEE_ReadByte@bAdd:	
  2913                           ; 1 bytes @ 0x0
  2914                           
  2915  0020                     _isdigit$1520:	
  2916                           ; 1 bytes @ 0x0
  2917                           
  2918  0020                     PROTOCOL_Set_Func@loop_func:	
  2919                           ; 1 bytes @ 0x0
  2920                           
  2921  0020                     PROTOCOL_Set_Extension_Handler@extension_handler:	
  2922                           ; 2 bytes @ 0x0
  2923                           
  2924  0020                     ___wmul@multiplier:	
  2925                           ; 2 bytes @ 0x0
  2926                           
  2927  0020                     ___lwdiv@divisor:	
  2928                           ; 2 bytes @ 0x0
  2929                           
  2930  0020                     strncmp@s1:	
  2931                           ; 2 bytes @ 0x0
  2932                           
  2933                           
  2934                           ; 2 bytes @ 0x0
  2935  0020                     	ds	1
  2936  0021                     ?_PROTOCOL_Initialize:	
  2937  0021                     ??_DATAEE_WriteByte:	
  2938                           ; 1 bytes @ 0x1
  2939                           
  2940  0021                     I2C2_MasterTRBInsert@pflag:	
  2941                           ; 1 bytes @ 0x1
  2942                           
  2943  0021                     I2C2_MasterWriteTRBBuild@length:	
  2944                           ; 1 bytes @ 0x1
  2945                           
  2946  0021                     EUSART_Read@readValue:	
  2947                           ; 1 bytes @ 0x1
  2948                           
  2949  0021                     EUSART_Write@txData:	
  2950                           ; 1 bytes @ 0x1
  2951                           
  2952  0021                     DATAEE_WriteByte@bAdd:	
  2953                           ; 1 bytes @ 0x1
  2954                           
  2955  0021                     PROTOCOL_SET@value_:	
  2956                           ; 1 bytes @ 0x1
  2957                           
  2958  0021                     PROTOCOL_Set_Lock@lock:	
  2959                           ; 1 bytes @ 0x1
  2960                           
  2961  0021                     isdigit@c:	
  2962                           ; 1 bytes @ 0x1
  2963                           
  2964  0021                     PROTOCOL_Initialize@device_id:	
  2965                           ; 1 bytes @ 0x1
  2966                           
  2967                           
  2968                           ; 2 bytes @ 0x1
  2969  0021                     	ds	1
  2970  0022                     ??_I2C2_MasterTRBInsert:	
  2971  0022                     ??_PROTOCOL_Set_Extension_Handler:	
  2972                           ; 1 bytes @ 0x2
  2973                           
  2974  0022                     ??_PROTOCOL_Set_Func:	
  2975                           ; 1 bytes @ 0x2
  2976                           
  2977  0022                     ??_putch:	
  2978                           ; 1 bytes @ 0x2
  2979                           
  2980  0022                     ?_extension_handler:	
  2981                           ; 1 bytes @ 0x2
  2982                           
  2983  0022                     putch@txData:	
  2984                           ; 1 bytes @ 0x2
  2985                           
  2986  0022                     DATAEE_WriteByte@GIEBitValue:	
  2987                           ; 1 bytes @ 0x2
  2988                           
  2989  0022                     extension_handler@buf:	
  2990                           ; 1 bytes @ 0x2
  2991                           
  2992  0022                     strncmp@s2:	
  2993                           ; 1 bytes @ 0x2
  2994                           
  2995  0022                     I2C2_MasterWriteTRBBuild@address:	
  2996                           ; 1 bytes @ 0x2
  2997                           
  2998  0022                     ___wmul@multiplicand:	
  2999                           ; 2 bytes @ 0x2
  3000                           
  3001  0022                     ___lwdiv@dividend:	
  3002                           ; 2 bytes @ 0x2
  3003                           
  3004                           
  3005                           ; 2 bytes @ 0x2
  3006  0022                     	ds	1
  3007  0023                     ??_PROTOCOL_SAV:	
  3008  0023                     ??_extension_handler:	
  3009                           ; 1 bytes @ 0x3
  3010                           
  3011  0023                     ??_PROTOCOL_Write_Device_Address:	
  3012                           ; 1 bytes @ 0x3
  3013                           
  3014  0023                     I2C2_MasterTRBInsert@count:	
  3015                           ; 1 bytes @ 0x3
  3016                           
  3017  0023                     PROTOCOL_Initialize@start_handler:	
  3018                           ; 1 bytes @ 0x3
  3019                           
  3020  0023                     strncmp@len:	
  3021                           ; 1 bytes @ 0x3
  3022                           
  3023                           
  3024                           ; 2 bytes @ 0x3
  3025  0023                     	ds	1
  3026  0024                     ??_PROTOCOL_EXT:	
  3027  0024                     ??_I2C2_MasterWriteTRBBuild:	
  3028                           ; 1 bytes @ 0x4
  3029                           
  3030  0024                     ??___wmul:	
  3031                           ; 1 bytes @ 0x4
  3032                           
  3033  0024                     ??___lwdiv:	
  3034                           ; 1 bytes @ 0x4
  3035                           
  3036  0024                     PROTOCOL_Initialize@stop_handler:	
  3037                           ; 1 bytes @ 0x4
  3038                           
  3039  0024                     PROTOCOL_Write_Device_Address@device_id_i2c:	
  3040                           ; 1 bytes @ 0x4
  3041                           
  3042  0024                     ___wmul@product:	
  3043                           ; 1 bytes @ 0x4
  3044                           
  3045                           
  3046                           ; 2 bytes @ 0x4
  3047  0024                     	ds	1
  3048  0025                     ??_strncmp:	
  3049  0025                     PROTOCOL_Initialize@set_handler:	
  3050                           ; 1 bytes @ 0x5
  3051                           
  3052  0025                     PROTOCOL_EXT@char_buf:	
  3053                           ; 1 bytes @ 0x5
  3054                           
  3055  0025                     ___lwdiv@quotient:	
  3056                           ; 1 bytes @ 0x5
  3057                           
  3058                           
  3059                           ; 2 bytes @ 0x5
  3060  0025                     	ds	1
  3061  0026                     ?_atoi:	
  3062  0026                     I2C2_MasterWriteTRBBuild@ptrb:	
  3063                           ; 2 bytes @ 0x6
  3064                           
  3065  0026                     PROTOCOL_Initialize@inv_handler:	
  3066                           ; 1 bytes @ 0x6
  3067                           
  3068                           
  3069                           ; 1 bytes @ 0x6
  3070  0026                     	ds	1
  3071  0027                     ?_I2C2_MasterWrite:	
  3072  0027                     I2C2_MasterWrite@length:	
  3073                           ; 1 bytes @ 0x7
  3074                           
  3075  0027                     PROTOCOL_Initialize@scaler:	
  3076                           ; 1 bytes @ 0x7
  3077                           
  3078  0027                     ___lwdiv@counter:	
  3079                           ; 1 bytes @ 0x7
  3080                           
  3081                           
  3082                           ; 1 bytes @ 0x7
  3083  0027                     	ds	1
  3084  0028                     ??_atoi:	
  3085  0028                     ??_PROTOCOL_Initialize:	
  3086                           ; 1 bytes @ 0x8
  3087                           
  3088  0028                     ?___lwmod:	
  3089                           ; 1 bytes @ 0x8
  3090                           
  3091  0028                     I2C2_MasterWrite@address:	
  3092                           ; 2 bytes @ 0x8
  3093                           
  3094  0028                     ___lwmod@divisor:	
  3095                           ; 2 bytes @ 0x8
  3096                           
  3097                           
  3098                           ; 2 bytes @ 0x8
  3099  0028                     	ds	2
  3100  002A                     I2C2_MasterWrite@pflag:	
  3101  002A                     atoi@sign:	
  3102                           ; 1 bytes @ 0xA
  3103                           
  3104  002A                     ___lwmod@dividend:	
  3105                           ; 1 bytes @ 0xA
  3106                           
  3107                           
  3108                           ; 2 bytes @ 0xA
  3109  002A                     	ds	1
  3110  002B                     ??_I2C2_MasterWrite:	
  3111  002B                     atoi@a:	
  3112                           ; 1 bytes @ 0xB
  3113                           
  3114                           
  3115                           ; 2 bytes @ 0xB
  3116  002B                     	ds	1
  3117  002C                     ??___lwmod:	
  3118                           
  3119                           ; 1 bytes @ 0xC
  3120  002C                     	ds	1
  3121  002D                     I2C2_MasterWrite@pdata:	
  3122  002D                     atoi@s:	
  3123                           ; 1 bytes @ 0xD
  3124                           
  3125  002D                     ___lwmod@counter:	
  3126                           ; 1 bytes @ 0xD
  3127                           
  3128                           
  3129                           ; 1 bytes @ 0xD
  3130  002D                     	ds	1
  3131  002E                     ?_i2c2_write:	
  3132  002E                     ?_printf:	
  3133                           ; 1 bytes @ 0xE
  3134                           
  3135  002E                     printf@f:	
  3136                           ; 2 bytes @ 0xE
  3137                           
  3138  002E                     i2c2_write@dev_addr:	
  3139                           ; 2 bytes @ 0xE
  3140                           
  3141                           
  3142                           ; 2 bytes @ 0xE
  3143  002E                     	ds	2
  3144  0030                     i2c2_write@reg_addr:	
  3145                           
  3146                           ; 1 bytes @ 0x10
  3147  0030                     	ds	1
  3148  0031                     i2c2_write@data:	
  3149                           
  3150                           ; 1 bytes @ 0x11
  3151  0031                     	ds	1
  3152  0032                     ??_i2c2_write:	
  3153  0032                     ??_printf:	
  3154                           ; 1 bytes @ 0x12
  3155                           
  3156                           
  3157                           ; 1 bytes @ 0x12
  3158  0032                     	ds	2
  3159  0034                     i2c2_write@write_status:	
  3160                           
  3161                           ; 1 bytes @ 0x14
  3162  0034                     	ds	1
  3163  0035                     i2c2_write@buf:	
  3164                           
  3165                           ; 2 bytes @ 0x15
  3166  0035                     	ds	1
  3167  0036                     printf@prec:	
  3168                           
  3169                           ; 1 bytes @ 0x16
  3170  0036                     	ds	1
  3171  0037                     i2c2_write@status:	
  3172  0037                     printf@cp:	
  3173                           ; 1 bytes @ 0x17
  3174                           
  3175                           
  3176                           ; 2 bytes @ 0x17
  3177  0037                     	ds	1
  3178  0038                     ??_lcd_init:	
  3179  0038                     ??_lcd_clear:	
  3180                           ; 1 bytes @ 0x18
  3181                           
  3182  0038                     ??_lcd_string:	
  3183                           ; 1 bytes @ 0x18
  3184                           
  3185  0038                     ??_lcd_string_2lines:	
  3186                           ; 1 bytes @ 0x18
  3187                           
  3188  0038                     ??_lcd_contrast:	
  3189                           ; 1 bytes @ 0x18
  3190                           
  3191  0038                     ??_lcd_test:	
  3192                           ; 1 bytes @ 0x18
  3193                           
  3194                           
  3195                           ; 1 bytes @ 0x18
  3196  0038                     	ds	1
  3197  0039                     printf@ap:	
  3198                           
  3199                           ; 1 bytes @ 0x19
  3200  0039                     	ds	1
  3201  003A                     lcd_contrast@contrast:	
  3202  003A                     printf@val:	
  3203                           ; 1 bytes @ 0x1A
  3204                           
  3205                           
  3206                           ; 2 bytes @ 0x1A
  3207  003A                     	ds	1
  3208  003B                     lcd_string@i:	
  3209  003B                     lcd_string_2lines@i:	
  3210                           ; 1 bytes @ 0x1B
  3211                           
  3212                           
  3213                           ; 1 bytes @ 0x1B
  3214  003B                     	ds	1
  3215  003C                     ??_loop_func:	
  3216  003C                     printf@len:	
  3217                           ; 1 bytes @ 0x1C
  3218                           
  3219                           
  3220                           ; 2 bytes @ 0x1C
  3221  003C                     	ds	2
  3222  003E                     loop_func@value:	
  3223  003E                     printf@flag:	
  3224                           ; 1 bytes @ 0x1E
  3225                           
  3226                           
  3227                           ; 1 bytes @ 0x1E
  3228  003E                     	ds	1
  3229  003F                     printf@width:	
  3230                           
  3231                           ; 2 bytes @ 0x1F
  3232  003F                     	ds	2
  3233  0041                     printf@c:	
  3234                           
  3235                           ; 1 bytes @ 0x21
  3236  0041                     	ds	1
  3237  0042                     ??_PROTOCOL_Loop:	
  3238                           
  3239                           ; 1 bytes @ 0x22
  3240  0042                     	ds	2
  3241  0044                     PROTOCOL_Loop@c:	
  3242                           
  3243                           ; 1 bytes @ 0x24
  3244  0044                     	ds	1
  3245  0045                     PROTOCOL_Loop@device_address:	
  3246                           
  3247                           ; 1 bytes @ 0x25
  3248  0045                     	ds	1
  3249  0046                     ??_main:	
  3250                           
  3251                           ; 1 bytes @ 0x26
  3252  0046                     	ds	1
  3253                           
  3254                           	psect	maintext
  3255  0BB7                     __pmaintext:	
  3256 ;;
  3257 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  3258 ;;
  3259 ;; *************** function _main *****************
  3260 ;; Defined at:
  3261 ;;		line 166 in file "main.c"
  3262 ;; Parameters:    Size  Location     Type
  3263 ;;		None
  3264 ;; Auto vars:     Size  Location     Type
  3265 ;;		None
  3266 ;; Return value:  Size  Location     Type
  3267 ;;                  1    wreg      void 
  3268 ;; Registers used:
  3269 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3270 ;; Tracked objects:
  3271 ;;		On entry : B1F/0
  3272 ;;		On exit  : 0/0
  3273 ;;		Unchanged: 0/0
  3274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3276 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3277 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3278 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3279 ;;Total ram usage:        1 bytes
  3280 ;; Hardware stack levels required when called:   12
  3281 ;; This function calls:
  3282 ;;		_EUSART_Initialize
  3283 ;;		_I2C1_Initialize
  3284 ;;		_I2C2_Initialize
  3285 ;;		_OSCILLATOR_Initialize
  3286 ;;		_PIN_MANAGER_Initialize
  3287 ;;		_PROTOCOL_Initialize
  3288 ;;		_PROTOCOL_Loop
  3289 ;;		_PROTOCOL_Set_Extension_Handler
  3290 ;;		_PROTOCOL_Set_Func
  3291 ;;		_TMR0_Initialize
  3292 ;;		_WDT_Initialize
  3293 ;;		_lcd_init
  3294 ;;		_lcd_test
  3295 ;; This function is called by:
  3296 ;;		Startup code after reset
  3297 ;; This function uses a non-reentrant model
  3298 ;;
  3299                           
  3300                           
  3301                           ;psect for function _main
  3302  0BB7                     _main:	
  3303                           
  3304                           ;main.c: 169: PROTOCOL_Initialize("AQM1602XA-RN-GBW", (0), (0), (0), (0), 250);
  3305                           
  3306                           ;incstack = 0
  3307                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3308  0BB7  3031               	movlw	low (STR_16| (0+32768))
  3309  0BB8  0020               	movlb	0	; select bank0
  3310  0BB9  00A1               	movwf	PROTOCOL_Initialize@device_id
  3311  0BBA  3087               	movlw	high (STR_16| (0+32768))
  3312  0BBB  00A2               	movwf	PROTOCOL_Initialize@device_id+1
  3313  0BBC  01A3               	clrf	PROTOCOL_Initialize@start_handler
  3314  0BBD  01A4               	clrf	PROTOCOL_Initialize@stop_handler
  3315  0BBE  01A5               	clrf	PROTOCOL_Initialize@set_handler
  3316  0BBF  01A6               	clrf	PROTOCOL_Initialize@inv_handler
  3317  0BC0  30FA               	movlw	250
  3318  0BC1  00C6               	movwf	??_main
  3319  0BC2  0846               	movf	??_main,w
  3320  0BC3  00A7               	movwf	PROTOCOL_Initialize@scaler
  3321  0BC4  318C  24D4  318B   	fcall	_PROTOCOL_Initialize
  3322                           
  3323                           ;main.c: 170: PROTOCOL_Set_Extension_Handler(extension_handler);
  3324  0BC7  309F               	movlw	low _extension_handler
  3325  0BC8  0020               	movlb	0	; select bank0
  3326  0BC9  00A0               	movwf	PROTOCOL_Set_Extension_Handler@extension_handler
  3327  0BCA  3008               	movlw	high _extension_handler
  3328  0BCB  00A1               	movwf	PROTOCOL_Set_Extension_Handler@extension_handler+1
  3329  0BCC  3197  277A  318B   	fcall	_PROTOCOL_Set_Extension_Handler
  3330                           
  3331                           ;main.c: 171: PROTOCOL_Set_Func(loop_func);
  3332  0BCF  307E               	movlw	low _loop_func
  3333  0BD0  0020               	movlb	0	; select bank0
  3334  0BD1  00A0               	movwf	PROTOCOL_Set_Func@loop_func
  3335  0BD2  3000               	movlw	high _loop_func
  3336  0BD3  00A1               	movwf	PROTOCOL_Set_Func@loop_func+1
  3337  0BD4  3197  27B4  318B   	fcall	_PROTOCOL_Set_Func
  3338                           
  3339                           ;main.c: 174: PIN_MANAGER_Initialize();
  3340  0BD7  3189  216D  318B   	fcall	_PIN_MANAGER_Initialize
  3341                           
  3342                           ;main.c: 175: OSCILLATOR_Initialize();
  3343  0BDA  3197  276F  318B   	fcall	_OSCILLATOR_Initialize
  3344                           
  3345                           ;main.c: 176: WDT_Initialize();
  3346  0BDD  3197  276B  318B   	fcall	_WDT_Initialize
  3347                           
  3348                           ;main.c: 177: TMR0_Initialize();
  3349  0BE0  3197  27D4  318B   	fcall	_TMR0_Initialize
  3350                           
  3351                           ;main.c: 180: (INTCONbits.GIE = 1);
  3352  0BE3  178B               	bsf	11,7	;volatile
  3353                           
  3354                           ;main.c: 181: (INTCONbits.PEIE = 1);
  3355  0BE4  170B               	bsf	11,6	;volatile
  3356                           
  3357                           ;main.c: 184: I2C2_Initialize();
  3358  0BE5  3188  20CA  318B   	fcall	_I2C2_Initialize
  3359                           
  3360                           ;main.c: 185: lcd_init();
  3361  0BE8  318D  2597  318B   	fcall	_lcd_init
  3362                           
  3363                           ;main.c: 187: lcd_test();
  3364  0BEB  318F  2712  318B   	fcall	_lcd_test
  3365                           
  3366                           ;main.c: 190: LATCbits.LATC7 = 1;
  3367  0BEE  0022               	movlb	2	; select bank2
  3368  0BEF  178E               	bsf	14,7	;volatile
  3369                           
  3370                           ;main.c: 193: EUSART_Initialize();
  3371  0BF0  3188  20E2  318B   	fcall	_EUSART_Initialize
  3372                           
  3373                           ;main.c: 196: I2C1_Initialize();
  3374  0BF3  3189  21CA  318B   	fcall	_I2C1_Initialize
  3375                           
  3376                           ;main.c: 199: PROTOCOL_Loop();
  3377  0BF6  3184  2460         	fcall	_PROTOCOL_Loop
  3378  0BF8  3180  2848         	ljmp	start
  3379  0BFA                     __end_of_main:	
  3380                           
  3381                           	psect	text1
  3382  0F12                     __ptext1:	
  3383 ;; *************** function _lcd_test *****************
  3384 ;; Defined at:
  3385 ;;		line 98 in file "main.c"
  3386 ;; Parameters:    Size  Location     Type
  3387 ;;		None
  3388 ;; Auto vars:     Size  Location     Type
  3389 ;;		None
  3390 ;; Return value:  Size  Location     Type
  3391 ;;                  1    wreg      void 
  3392 ;; Registers used:
  3393 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3394 ;; Tracked objects:
  3395 ;;		On entry : 0/0
  3396 ;;		On exit  : 0/0
  3397 ;;		Unchanged: 0/0
  3398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3401 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3402 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3403 ;;Total ram usage:        2 bytes
  3404 ;; Hardware stack levels used:    1
  3405 ;; Hardware stack levels required when called:    9
  3406 ;; This function calls:
  3407 ;;		_i2c2_write
  3408 ;; This function is called by:
  3409 ;;		_main
  3410 ;; This function uses a non-reentrant model
  3411 ;;
  3412                           
  3413                           
  3414                           ;psect for function _lcd_test
  3415  0F12                     _lcd_test:	
  3416                           
  3417                           ;main.c: 99: i2c2_write(0x3e, 0x40, 0x33); _delay((unsigned long)((1)*(4000000/4000.0)))
      +                          ;;
  3418                           
  3419                           ;incstack = 0
  3420                           ; Regs used in _lcd_test: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3421  0F12  303E               	movlw	62
  3422  0F13  0020               	movlb	0	; select bank0
  3423  0F14  00AE               	movwf	i2c2_write@dev_addr
  3424  0F15  3000               	movlw	0
  3425  0F16  00AF               	movwf	i2c2_write@dev_addr+1
  3426  0F17  3040               	movlw	64
  3427  0F18  00B8               	movwf	??_lcd_test
  3428  0F19  0838               	movf	??_lcd_test,w
  3429  0F1A  00B0               	movwf	i2c2_write@reg_addr
  3430  0F1B  3033               	movlw	51
  3431  0F1C  00B9               	movwf	??_lcd_test+1
  3432  0F1D  0839               	movf	??_lcd_test+1,w
  3433  0F1E  00B1               	movwf	i2c2_write@data
  3434  0F1F  318A  2232  318F   	fcall	_i2c2_write
  3435  0F22  30C8               	movlw	200
  3436  0F23                     u5037:	
  3437  0F23  3200               	nop2
  3438  0F24  0B89               	decfsz	9,f
  3439  0F25  2F23               	goto	u5037
  3440                           
  3441                           ;main.c: 100: i2c2_write(0x3e, 0x40, 0x37); _delay((unsigned long)((1)*(4000000/4000.0))
      +                          );;
  3442  0F26  303E               	movlw	62
  3443  0F27  0020               	movlb	0	; select bank0
  3444  0F28  00AE               	movwf	i2c2_write@dev_addr
  3445  0F29  3000               	movlw	0
  3446  0F2A  00AF               	movwf	i2c2_write@dev_addr+1
  3447  0F2B  3040               	movlw	64
  3448  0F2C  00B8               	movwf	??_lcd_test
  3449  0F2D  0838               	movf	??_lcd_test,w
  3450  0F2E  00B0               	movwf	i2c2_write@reg_addr
  3451  0F2F  3037               	movlw	55
  3452  0F30  00B9               	movwf	??_lcd_test+1
  3453  0F31  0839               	movf	??_lcd_test+1,w
  3454  0F32  00B1               	movwf	i2c2_write@data
  3455  0F33  318A  2232  318F   	fcall	_i2c2_write
  3456  0F36  30C8               	movlw	200
  3457  0F37                     u5047:	
  3458  0F37  3200               	nop2
  3459  0F38  0B89               	decfsz	9,f
  3460  0F39  2F37               	goto	u5047
  3461                           
  3462                           ;main.c: 101: i2c2_write(0x3e, 0x40, 0x2e); _delay((unsigned long)((1)*(4000000/4000.0))
      +                          );;
  3463  0F3A  303E               	movlw	62
  3464  0F3B  0020               	movlb	0	; select bank0
  3465  0F3C  00AE               	movwf	i2c2_write@dev_addr
  3466  0F3D  3000               	movlw	0
  3467  0F3E  00AF               	movwf	i2c2_write@dev_addr+1
  3468  0F3F  3040               	movlw	64
  3469  0F40  00B8               	movwf	??_lcd_test
  3470  0F41  0838               	movf	??_lcd_test,w
  3471  0F42  00B0               	movwf	i2c2_write@reg_addr
  3472  0F43  302E               	movlw	46
  3473  0F44  00B9               	movwf	??_lcd_test+1
  3474  0F45  0839               	movf	??_lcd_test+1,w
  3475  0F46  00B1               	movwf	i2c2_write@data
  3476  0F47  318A  2232  318F   	fcall	_i2c2_write
  3477  0F4A  30C8               	movlw	200
  3478  0F4B                     u5057:	
  3479  0F4B  3200               	nop2
  3480  0F4C  0B89               	decfsz	9,f
  3481  0F4D  2F4B               	goto	u5057
  3482                           
  3483                           ;main.c: 102: i2c2_write(0x3e, 0x40, 0x30); _delay((unsigned long)((1)*(4000000/4000.0))
      +                          );;
  3484  0F4E  303E               	movlw	62
  3485  0F4F  0020               	movlb	0	; select bank0
  3486  0F50  00AE               	movwf	i2c2_write@dev_addr
  3487  0F51  3000               	movlw	0
  3488  0F52  00AF               	movwf	i2c2_write@dev_addr+1
  3489  0F53  3040               	movlw	64
  3490  0F54  00B8               	movwf	??_lcd_test
  3491  0F55  0838               	movf	??_lcd_test,w
  3492  0F56  00B0               	movwf	i2c2_write@reg_addr
  3493  0F57  3030               	movlw	48
  3494  0F58  00B9               	movwf	??_lcd_test+1
  3495  0F59  0839               	movf	??_lcd_test+1,w
  3496  0F5A  00B1               	movwf	i2c2_write@data
  3497  0F5B  318A  2232  318F   	fcall	_i2c2_write
  3498  0F5E  30C8               	movlw	200
  3499  0F5F                     u5067:	
  3500  0F5F  3200               	nop2
  3501  0F60  0B89               	decfsz	9,f
  3502  0F61  2F5F               	goto	u5067
  3503                           
  3504                           ;main.c: 103: i2c2_write(0x3e, 0x40, 0xf2); _delay((unsigned long)((1)*(4000000/4000.0))
      +                          );;
  3505  0F62  303E               	movlw	62
  3506  0F63  0020               	movlb	0	; select bank0
  3507  0F64  00AE               	movwf	i2c2_write@dev_addr
  3508  0F65  3000               	movlw	0
  3509  0F66  00AF               	movwf	i2c2_write@dev_addr+1
  3510  0F67  3040               	movlw	64
  3511  0F68  00B8               	movwf	??_lcd_test
  3512  0F69  0838               	movf	??_lcd_test,w
  3513  0F6A  00B0               	movwf	i2c2_write@reg_addr
  3514  0F6B  30F2               	movlw	242
  3515  0F6C  00B9               	movwf	??_lcd_test+1
  3516  0F6D  0839               	movf	??_lcd_test+1,w
  3517  0F6E  00B1               	movwf	i2c2_write@data
  3518  0F6F  318A  2232  318F   	fcall	_i2c2_write
  3519  0F72  30C8               	movlw	200
  3520  0F73                     u5077:	
  3521  0F73  3200               	nop2
  3522  0F74  0B89               	decfsz	9,f
  3523  0F75  2F73               	goto	u5077
  3524                           
  3525                           ;main.c: 104: i2c2_write(0x3e, 0x40, 0x43); _delay((unsigned long)((1)*(4000000/4000.0))
      +                          );;
  3526  0F76  303E               	movlw	62
  3527  0F77  0020               	movlb	0	; select bank0
  3528  0F78  00AE               	movwf	i2c2_write@dev_addr
  3529  0F79  3000               	movlw	0
  3530  0F7A  00AF               	movwf	i2c2_write@dev_addr+1
  3531  0F7B  3040               	movlw	64
  3532  0F7C  00B8               	movwf	??_lcd_test
  3533  0F7D  0838               	movf	??_lcd_test,w
  3534  0F7E  00B0               	movwf	i2c2_write@reg_addr
  3535  0F7F  3043               	movlw	67
  3536  0F80  00B9               	movwf	??_lcd_test+1
  3537  0F81  0839               	movf	??_lcd_test+1,w
  3538  0F82  00B1               	movwf	i2c2_write@data
  3539  0F83  318A  2232  318F   	fcall	_i2c2_write
  3540  0F86  30C8               	movlw	200
  3541  0F87                     u5087:	
  3542  0F87  3200               	nop2
  3543  0F88  0B89               	decfsz	9,f
  3544  0F89  2F87               	goto	u5087
  3545                           
  3546                           ;main.c: 105: i2c2_write(0x3e, 0x00, 0xc0); _delay((unsigned long)((1)*(4000000/4000.0))
      +                          );;
  3547  0F8A  303E               	movlw	62
  3548  0F8B  0020               	movlb	0	; select bank0
  3549  0F8C  00AE               	movwf	i2c2_write@dev_addr
  3550  0F8D  3000               	movlw	0
  3551  0F8E  00AF               	movwf	i2c2_write@dev_addr+1
  3552  0F8F  01B0               	clrf	i2c2_write@reg_addr
  3553  0F90  30C0               	movlw	192
  3554  0F91  00B8               	movwf	??_lcd_test
  3555  0F92  0838               	movf	??_lcd_test,w
  3556  0F93  00B1               	movwf	i2c2_write@data
  3557  0F94  318A  2232  318F   	fcall	_i2c2_write
  3558  0F97  30C8               	movlw	200
  3559  0F98                     u5097:	
  3560  0F98  3200               	nop2
  3561  0F99  0B89               	decfsz	9,f
  3562  0F9A  2F98               	goto	u5097
  3563                           
  3564                           ;main.c: 106: i2c2_write(0x3e, 0x40, 0x28); _delay((unsigned long)((1)*(4000000/4000.0))
      +                          );;
  3565  0F9B  303E               	movlw	62
  3566  0F9C  0020               	movlb	0	; select bank0
  3567  0F9D  00AE               	movwf	i2c2_write@dev_addr
  3568  0F9E  3000               	movlw	0
  3569  0F9F  00AF               	movwf	i2c2_write@dev_addr+1
  3570  0FA0  3040               	movlw	64
  3571  0FA1  00B8               	movwf	??_lcd_test
  3572  0FA2  0838               	movf	??_lcd_test,w
  3573  0FA3  00B0               	movwf	i2c2_write@reg_addr
  3574  0FA4  3028               	movlw	40
  3575  0FA5  00B9               	movwf	??_lcd_test+1
  3576  0FA6  0839               	movf	??_lcd_test+1,w
  3577  0FA7  00B1               	movwf	i2c2_write@data
  3578  0FA8  318A  2232  318F   	fcall	_i2c2_write
  3579  0FAB  30C8               	movlw	200
  3580  0FAC                     u5107:	
  3581  0FAC  3200               	nop2
  3582  0FAD  0B89               	decfsz	9,f
  3583  0FAE  2FAC               	goto	u5107
  3584                           
  3585                           ;main.c: 107: i2c2_write(0x3e, 0x40, 0x5e); _delay((unsigned long)((1)*(4000000/4000.0))
      +                          );;
  3586  0FAF  303E               	movlw	62
  3587  0FB0  0020               	movlb	0	; select bank0
  3588  0FB1  00AE               	movwf	i2c2_write@dev_addr
  3589  0FB2  3000               	movlw	0
  3590  0FB3  00AF               	movwf	i2c2_write@dev_addr+1
  3591  0FB4  3040               	movlw	64
  3592  0FB5  00B8               	movwf	??_lcd_test
  3593  0FB6  0838               	movf	??_lcd_test,w
  3594  0FB7  00B0               	movwf	i2c2_write@reg_addr
  3595  0FB8  305E               	movlw	94
  3596  0FB9  00B9               	movwf	??_lcd_test+1
  3597  0FBA  0839               	movf	??_lcd_test+1,w
  3598  0FBB  00B1               	movwf	i2c2_write@data
  3599  0FBC  318A  2232  318F   	fcall	_i2c2_write
  3600  0FBF  30C8               	movlw	200
  3601  0FC0                     u5117:	
  3602  0FC0  3200               	nop2
  3603  0FC1  0B89               	decfsz	9,f
  3604  0FC2  2FC0               	goto	u5117
  3605                           
  3606                           ;main.c: 108: i2c2_write(0x3e, 0x40, 0x2d); _delay((unsigned long)((1)*(4000000/4000.0))
      +                          );;
  3607  0FC3  303E               	movlw	62
  3608  0FC4  0020               	movlb	0	; select bank0
  3609  0FC5  00AE               	movwf	i2c2_write@dev_addr
  3610  0FC6  3000               	movlw	0
  3611  0FC7  00AF               	movwf	i2c2_write@dev_addr+1
  3612  0FC8  3040               	movlw	64
  3613  0FC9  00B8               	movwf	??_lcd_test
  3614  0FCA  0838               	movf	??_lcd_test,w
  3615  0FCB  00B0               	movwf	i2c2_write@reg_addr
  3616  0FCC  302D               	movlw	45
  3617  0FCD  00B9               	movwf	??_lcd_test+1
  3618  0FCE  0839               	movf	??_lcd_test+1,w
  3619  0FCF  00B1               	movwf	i2c2_write@data
  3620  0FD0  318A  2232  318F   	fcall	_i2c2_write
  3621  0FD3  30C8               	movlw	200
  3622  0FD4                     u5127:	
  3623  0FD4  3200               	nop2
  3624  0FD5  0B89               	decfsz	9,f
  3625  0FD6  2FD4               	goto	u5127
  3626                           
  3627                           ;main.c: 109: i2c2_write(0x3e, 0x40, 0x5e); _delay((unsigned long)((1)*(4000000/4000.0))
      +                          );;
  3628  0FD7  303E               	movlw	62
  3629  0FD8  0020               	movlb	0	; select bank0
  3630  0FD9  00AE               	movwf	i2c2_write@dev_addr
  3631  0FDA  3000               	movlw	0
  3632  0FDB  00AF               	movwf	i2c2_write@dev_addr+1
  3633  0FDC  3040               	movlw	64
  3634  0FDD  00B8               	movwf	??_lcd_test
  3635  0FDE  0838               	movf	??_lcd_test,w
  3636  0FDF  00B0               	movwf	i2c2_write@reg_addr
  3637  0FE0  305E               	movlw	94
  3638  0FE1  00B9               	movwf	??_lcd_test+1
  3639  0FE2  0839               	movf	??_lcd_test+1,w
  3640  0FE3  00B1               	movwf	i2c2_write@data
  3641  0FE4  318A  2232  318F   	fcall	_i2c2_write
  3642  0FE7  30C8               	movlw	200
  3643  0FE8                     u5137:	
  3644  0FE8  3200               	nop2
  3645  0FE9  0B89               	decfsz	9,f
  3646  0FEA  2FE8               	goto	u5137
  3647                           
  3648                           ;main.c: 110: i2c2_write(0x3e, 0x40, 0x29); _delay((unsigned long)((1)*(4000000/4000.0))
      +                          );;
  3649  0FEB  303E               	movlw	62
  3650  0FEC  0020               	movlb	0	; select bank0
  3651  0FED  00AE               	movwf	i2c2_write@dev_addr
  3652  0FEE  3000               	movlw	0
  3653  0FEF  00AF               	movwf	i2c2_write@dev_addr+1
  3654  0FF0  3040               	movlw	64
  3655  0FF1  00B8               	movwf	??_lcd_test
  3656  0FF2  0838               	movf	??_lcd_test,w
  3657  0FF3  00B0               	movwf	i2c2_write@reg_addr
  3658  0FF4  3029               	movlw	41
  3659  0FF5  00B9               	movwf	??_lcd_test+1
  3660  0FF6  0839               	movf	??_lcd_test+1,w
  3661  0FF7  00B1               	movwf	i2c2_write@data
  3662  0FF8  318A  2232  318F   	fcall	_i2c2_write
  3663  0FFB  30C8               	movlw	200
  3664  0FFC                     u5147:	
  3665  0FFC  3200               	nop2
  3666  0FFD  0B89               	decfsz	9,f
  3667  0FFE  2FFC               	goto	u5147
  3668  0FFF  0008               	return
  3669  1000                     __end_of_lcd_test:	
  3670                           
  3671                           	psect	text2
  3672  176B                     __ptext2:	
  3673 ;; *************** function _WDT_Initialize *****************
  3674 ;; Defined at:
  3675 ;;		line 89 in file "mcc_generated_files/mcc.c"
  3676 ;; Parameters:    Size  Location     Type
  3677 ;;		None
  3678 ;; Auto vars:     Size  Location     Type
  3679 ;;		None
  3680 ;; Return value:  Size  Location     Type
  3681 ;;                  1    wreg      void 
  3682 ;; Registers used:
  3683 ;;		wreg
  3684 ;; Tracked objects:
  3685 ;;		On entry : 0/0
  3686 ;;		On exit  : 0/0
  3687 ;;		Unchanged: 0/0
  3688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3689 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3690 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3691 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3692 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3693 ;;Total ram usage:        0 bytes
  3694 ;; Hardware stack levels used:    1
  3695 ;; Hardware stack levels required when called:    6
  3696 ;; This function calls:
  3697 ;;		Nothing
  3698 ;; This function is called by:
  3699 ;;		_main
  3700 ;;		_SYSTEM_Initialize
  3701 ;; This function uses a non-reentrant model
  3702 ;;
  3703                           
  3704                           
  3705                           ;psect for function _WDT_Initialize
  3706  176B                     _WDT_Initialize:	
  3707                           
  3708                           ;mcc.c: 92: WDTCON = 0x16;
  3709                           
  3710                           ;incstack = 0
  3711                           ; Regs used in _WDT_Initialize: [wreg]
  3712  176B  3016               	movlw	22
  3713  176C  0021               	movlb	1	; select bank1
  3714  176D  0097               	movwf	23	;volatile
  3715  176E  0008               	return
  3716  176F                     __end_of_WDT_Initialize:	
  3717                           
  3718                           	psect	text3
  3719  17D4                     __ptext3:	
  3720 ;; *************** function _TMR0_Initialize *****************
  3721 ;; Defined at:
  3722 ;;		line 62 in file "mcc_generated_files/tmr0.c"
  3723 ;; Parameters:    Size  Location     Type
  3724 ;;		None
  3725 ;; Auto vars:     Size  Location     Type
  3726 ;;		None
  3727 ;; Return value:  Size  Location     Type
  3728 ;;                  1    wreg      void 
  3729 ;; Registers used:
  3730 ;;		wreg, status,2
  3731 ;; Tracked objects:
  3732 ;;		On entry : 0/0
  3733 ;;		On exit  : 0/0
  3734 ;;		Unchanged: 0/0
  3735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3738 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3739 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3740 ;;Total ram usage:        1 bytes
  3741 ;; Hardware stack levels used:    1
  3742 ;; Hardware stack levels required when called:    6
  3743 ;; This function calls:
  3744 ;;		Nothing
  3745 ;; This function is called by:
  3746 ;;		_main
  3747 ;;		_SYSTEM_Initialize
  3748 ;; This function uses a non-reentrant model
  3749 ;;
  3750                           
  3751                           
  3752                           ;psect for function _TMR0_Initialize
  3753  17D4                     _TMR0_Initialize:	
  3754                           
  3755                           ;tmr0.c: 67: OPTION_REG = (OPTION_REG & 0xC0) | 0xD5 & 0x3F;
  3756                           
  3757                           ;incstack = 0
  3758                           ; Regs used in _TMR0_Initialize: [wreg+status,2]
  3759  17D4  0021               	movlb	1	; select bank1
  3760  17D5  0815               	movf	21,w	;volatile
  3761  17D6  39C0               	andlw	192
  3762  17D7  3815               	iorlw	21
  3763  17D8  0095               	movwf	21	;volatile
  3764                           
  3765                           ;tmr0.c: 70: TMR0 = 0x83;
  3766  17D9  3083               	movlw	131
  3767  17DA  0020               	movlb	0	; select bank0
  3768  17DB  0095               	movwf	21	;volatile
  3769                           
  3770                           ;tmr0.c: 73: timer0ReloadVal= 131;
  3771  17DC  3083               	movlw	131
  3772  17DD  00A0               	movwf	??_TMR0_Initialize
  3773  17DE  0820               	movf	??_TMR0_Initialize,w
  3774  17DF  00DA               	movwf	_timer0ReloadVal	;volatile
  3775                           
  3776                           ;tmr0.c: 76: INTCONbits.TMR0IF = 0;
  3777  17E0  110B               	bcf	11,2	;volatile
  3778  17E1  0008               	return
  3779  17E2                     __end_of_TMR0_Initialize:	
  3780                           
  3781                           	psect	text4
  3782  17B4                     __ptext4:	
  3783 ;; *************** function _PROTOCOL_Set_Func *****************
  3784 ;; Defined at:
  3785 ;;		line 77 in file "protocol.c"
  3786 ;; Parameters:    Size  Location     Type
  3787 ;;  loop_func       2    0[BANK0 ] PTR void 
  3788 ;;		 -> loop_func(1), 
  3789 ;; Auto vars:     Size  Location     Type
  3790 ;;		None
  3791 ;; Return value:  Size  Location     Type
  3792 ;;                  1    wreg      void 
  3793 ;; Registers used:
  3794 ;;		wreg
  3795 ;; Tracked objects:
  3796 ;;		On entry : 0/0
  3797 ;;		On exit  : 0/0
  3798 ;;		Unchanged: 0/0
  3799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3800 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3801 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3802 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3803 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3804 ;;Total ram usage:        2 bytes
  3805 ;; Hardware stack levels used:    1
  3806 ;; Hardware stack levels required when called:    6
  3807 ;; This function calls:
  3808 ;;		Nothing
  3809 ;; This function is called by:
  3810 ;;		_main
  3811 ;; This function uses a non-reentrant model
  3812 ;;
  3813                           
  3814                           
  3815                           ;psect for function _PROTOCOL_Set_Func
  3816  17B4                     _PROTOCOL_Set_Func:	
  3817                           
  3818                           ;protocol.c: 78: PROTOCOL_Loop_Func = loop_func;
  3819                           
  3820                           ;incstack = 0
  3821                           ; Regs used in _PROTOCOL_Set_Func: [wreg]
  3822  17B4  0020               	movlb	0	; select bank0
  3823  17B5  0821               	movf	PROTOCOL_Set_Func@loop_func+1,w
  3824  17B6  0021               	movlb	1	; select bank1
  3825  17B7  00B7               	movwf	(_PROTOCOL_Loop_Func+1)^(0+128)
  3826  17B8  0020               	movlb	0	; select bank0
  3827  17B9  0820               	movf	PROTOCOL_Set_Func@loop_func,w
  3828  17BA  0021               	movlb	1	; select bank1
  3829  17BB  00B6               	movwf	_PROTOCOL_Loop_Func^(0+128)
  3830  17BC  0008               	return
  3831  17BD                     __end_of_PROTOCOL_Set_Func:	
  3832                           
  3833                           	psect	text5
  3834  177A                     __ptext5:	
  3835 ;; *************** function _PROTOCOL_Set_Extension_Handler *****************
  3836 ;; Defined at:
  3837 ;;		line 81 in file "protocol.c"
  3838 ;; Parameters:    Size  Location     Type
  3839 ;;  extension_ha    2    0[BANK0 ] PTR void 
  3840 ;;		 -> extension_handler(1), 
  3841 ;; Auto vars:     Size  Location     Type
  3842 ;;		None
  3843 ;; Return value:  Size  Location     Type
  3844 ;;                  1    wreg      void 
  3845 ;; Registers used:
  3846 ;;		wreg
  3847 ;; Tracked objects:
  3848 ;;		On entry : 0/0
  3849 ;;		On exit  : 0/0
  3850 ;;		Unchanged: 0/0
  3851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3852 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3855 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3856 ;;Total ram usage:        2 bytes
  3857 ;; Hardware stack levels used:    1
  3858 ;; Hardware stack levels required when called:    6
  3859 ;; This function calls:
  3860 ;;		Nothing
  3861 ;; This function is called by:
  3862 ;;		_main
  3863 ;; This function uses a non-reentrant model
  3864 ;;
  3865                           
  3866                           
  3867                           ;psect for function _PROTOCOL_Set_Extension_Handler
  3868  177A                     _PROTOCOL_Set_Extension_Handler:	
  3869                           
  3870                           ;protocol.c: 82: PROTOCOL_Extension_Handler = extension_handler;
  3871                           
  3872                           ;incstack = 0
  3873                           ; Regs used in _PROTOCOL_Set_Extension_Handler: [wreg]
  3874  177A  0020               	movlb	0	; select bank0
  3875  177B  0821               	movf	PROTOCOL_Set_Extension_Handler@extension_handler+1,w
  3876  177C  00CD               	movwf	_PROTOCOL_Extension_Handler+1
  3877  177D  0820               	movf	PROTOCOL_Set_Extension_Handler@extension_handler,w
  3878  177E  00CC               	movwf	_PROTOCOL_Extension_Handler
  3879  177F  0008               	return
  3880  1780                     __end_of_PROTOCOL_Set_Extension_Handler:	
  3881                           
  3882                           	psect	text6
  3883  0460                     __ptext6:	
  3884 ;; *************** function _PROTOCOL_Loop *****************
  3885 ;; Defined at:
  3886 ;;		line 136 in file "protocol.c"
  3887 ;; Parameters:    Size  Location     Type
  3888 ;;		None
  3889 ;; Auto vars:     Size  Location     Type
  3890 ;;  device_addre    1   37[BANK0 ] unsigned char 
  3891 ;;  c               1   36[BANK0 ] unsigned char 
  3892 ;; Return value:  Size  Location     Type
  3893 ;;                  1    wreg      void 
  3894 ;; Registers used:
  3895 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3896 ;; Tracked objects:
  3897 ;;		On entry : 0/0
  3898 ;;		On exit  : 0/0
  3899 ;;		Unchanged: 0/0
  3900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3902 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3903 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3904 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3905 ;;Total ram usage:        4 bytes
  3906 ;; Hardware stack levels used:    1
  3907 ;; Hardware stack levels required when called:   11
  3908 ;; This function calls:
  3909 ;;		Absolute function
  3910 ;;		_EUSART_Read
  3911 ;;		_PROTOCOL_EXT
  3912 ;;		_PROTOCOL_Read_Device_Address
  3913 ;;		_PROTOCOL_SAV
  3914 ;;		_PROTOCOL_SET
  3915 ;;		_PROTOCOL_STA
  3916 ;;		_PROTOCOL_STP
  3917 ;;		_PROTOCOL_Write_Device_Address
  3918 ;;		_TMR0_HasOverflowOccured
  3919 ;;		_atoi
  3920 ;;		_loop_func
  3921 ;;		_printf
  3922 ;;		_strncmp
  3923 ;; This function is called by:
  3924 ;;		_main
  3925 ;; This function uses a non-reentrant model
  3926 ;;
  3927                           
  3928                           
  3929                           ;psect for function _PROTOCOL_Loop
  3930  0460                     _PROTOCOL_Loop:	
  3931  0460                     l817:	
  3932                           ;incstack = 0
  3933                           ; Regs used in _PROTOCOL_Loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3934                           ;protocol.c: 137: uint8_t device_address;
  3935                           ;protocol.c: 138: uint8_t c;
  3936                           ;protocol.c: 139: while (1) {
  3937                           
  3938                           
  3939                           ;protocol.c: 140: tmr_overflow = TMR0_HasOverflowOccured();
  3940  0460  3197  2767  3184   	fcall	_TMR0_HasOverflowOccured
  3941  0463  0020               	movlb	0	; select bank0
  3942  0464  00C2               	movwf	??_PROTOCOL_Loop
  3943  0465  0842               	movf	??_PROTOCOL_Loop,w
  3944  0466  00D0               	movwf	_tmr_overflow
  3945                           
  3946                           ;protocol.c: 141: if (tmr_overflow) {
  3947  0467  0850               	movf	_tmr_overflow,w
  3948  0468  1903               	btfsc	3,2
  3949  0469  2C88               	goto	l5338
  3950                           
  3951                           ;protocol.c: 142: TMR0IF = 0;
  3952  046A  110B               	bcf	11,2	;volatile
  3953                           
  3954                           ;protocol.c: 144: if (PROTOCOL_Inv_Handler && (++tmr_cnt >= value)) {
  3955  046B  0021               	movlb	1	; select bank1
  3956  046C  0834               	movf	_PROTOCOL_Inv_Handler^(0+128),w
  3957  046D  0435               	iorwf	(_PROTOCOL_Inv_Handler+1)^(0+128),w
  3958  046E  1903               	btfsc	3,2
  3959  046F  2C88               	goto	l5338
  3960  0470  3001               	movlw	1
  3961  0471  0020               	movlb	0	; select bank0
  3962  0472  00C2               	movwf	??_PROTOCOL_Loop
  3963  0473  0842               	movf	??_PROTOCOL_Loop,w
  3964  0474  07D1               	addwf	_tmr_cnt,f
  3965  0475  0856               	movf	_value,w
  3966  0476  0251               	subwf	_tmr_cnt,w
  3967  0477  1C03               	skipc
  3968  0478  2C88               	goto	l5338
  3969                           
  3970                           ;protocol.c: 145: tmr_cnt = 0;
  3971  0479  01D1               	clrf	_tmr_cnt
  3972                           
  3973                           ;protocol.c: 146: if (++sec_cnt >= tmr_scaler) {
  3974  047A  3001               	movlw	1
  3975  047B  00C2               	movwf	??_PROTOCOL_Loop
  3976  047C  0842               	movf	??_PROTOCOL_Loop,w
  3977  047D  07D2               	addwf	_sec_cnt,f
  3978  047E  086D               	movf	_tmr_scaler,w
  3979  047F  0252               	subwf	_sec_cnt,w
  3980  0480  1C03               	skipc
  3981  0481  2C88               	goto	l5338
  3982                           
  3983                           ;protocol.c: 147: if (running) invoked = 1;
  3984  0482  0854               	movf	_running,w
  3985  0483  1903               	btfsc	3,2
  3986  0484  2C87               	goto	l5336
  3987  0485  01D3               	clrf	_invoked
  3988  0486  0AD3               	incf	_invoked,f
  3989  0487                     l5336:	
  3990                           
  3991                           ;protocol.c: 148: sec_cnt = 0;
  3992  0487  01D2               	clrf	_sec_cnt
  3993  0488                     l5338:	
  3994                           
  3995                           ;protocol.c: 149: }
  3996                           ;protocol.c: 150: }
  3997                           ;protocol.c: 151: }
  3998                           ;protocol.c: 152: if (invoked && PROTOCOL_Inv_Handler) {
  3999  0488  0020               	movlb	0	; select bank0
  4000  0489  0853               	movf	_invoked,w
  4001  048A  1903               	btfsc	3,2
  4002  048B  2C93               	goto	l5344
  4003                           
  4004                           ;protocol.c: 153: PROTOCOL_Inv_Handler();
  4005  048C  0021               	movlb	1	; select bank1
  4006  048D  0834               	movf	_PROTOCOL_Inv_Handler^(0+128),w
  4007  048E  0435               	iorwf	(_PROTOCOL_Inv_Handler+1)^(0+128),w
  4008  048F  1903               	btfsc	3,2
  4009  0490  2C93               	goto	l5344
  4010                           
  4011                           ;protocol.c: 154: invoked = 0;
  4012  0491  0020               	movlb	0	; select bank0
  4013  0492  01D3               	clrf	_invoked
  4014  0493                     l5344:	
  4015                           
  4016                           ;protocol.c: 155: }
  4017                           ;protocol.c: 156: if (PROTOCOL_Loop_Func) PROTOCOL_Loop_Func();
  4018  0493  0021               	movlb	1	; select bank1
  4019  0494  0836               	movf	_PROTOCOL_Loop_Func^(0+128),w
  4020  0495  0437               	iorwf	(_PROTOCOL_Loop_Func+1)^(0+128),w
  4021  0496  1903               	btfsc	3,2
  4022  0497  2C9D               	goto	l5348
  4023  0498  0837               	movf	(_PROTOCOL_Loop_Func+1)^(0+128),w
  4024  0499  008A               	movwf	10
  4025  049A  0836               	movf	_PROTOCOL_Loop_Func^(0+128),w
  4026  049B  000A               	callw
  4027  049C  3184               	pagesel	$
  4028  049D                     l5348:	
  4029                           
  4030                           ;protocol.c: 157: if ((eusartRxCount)) {
  4031  049D  0020               	movlb	0	; select bank0
  4032  049E  085B               	movf	_eusartRxCount,w	;volatile
  4033  049F  1903               	btfsc	3,2
  4034  04A0  2C60               	goto	l817
  4035                           
  4036                           ;protocol.c: 158: c = EUSART_Read();
  4037  04A1  3189  218B  3184   	fcall	_EUSART_Read
  4038  04A4  0020               	movlb	0	; select bank0
  4039  04A5  00C2               	movwf	??_PROTOCOL_Loop
  4040  04A6  0842               	movf	??_PROTOCOL_Loop,w
  4041  04A7  00C4               	movwf	PROTOCOL_Loop@c
  4042                           
  4043                           ;protocol.c: 159: buf[cnt++] = c;
  4044  04A8  0844               	movf	PROTOCOL_Loop@c,w
  4045  04A9  00C2               	movwf	??_PROTOCOL_Loop
  4046  04AA  0857               	movf	_cnt,w
  4047  04AB  3E20               	addlw	(low (_buf| (0+256)))& (0+255)
  4048  04AC  0086               	movwf	6
  4049  04AD  3001               	movlw	1	; select bank2/3
  4050  04AE  0087               	movwf	7
  4051  04AF  0842               	movf	??_PROTOCOL_Loop,w
  4052  04B0  0081               	movwf	1
  4053  04B1  3001               	movlw	1
  4054  04B2  00C2               	movwf	??_PROTOCOL_Loop
  4055  04B3  0842               	movf	??_PROTOCOL_Loop,w
  4056  04B4  07D7               	addwf	_cnt,f
  4057                           
  4058                           ;protocol.c: 160: if (c == '\n') {
  4059  04B5  300A               	movlw	10
  4060  04B6  0644               	xorwf	PROTOCOL_Loop@c,w
  4061  04B7  1D03               	btfss	3,2
  4062  04B8  2C60               	goto	l817
  4063                           
  4064                           ;protocol.c: 161: buf[--cnt] = '\0';
  4065  04B9  3001               	movlw	1
  4066  04BA  02D7               	subwf	_cnt,f
  4067  04BB  0857               	movf	_cnt,w
  4068  04BC  3E20               	addlw	(low (_buf| (0+256)))& (0+255)
  4069  04BD  0086               	movwf	6
  4070  04BE  3001               	movlw	1	; select bank2/3
  4071  04BF  0087               	movwf	7
  4072  04C0  0181               	clrf	1
  4073                           
  4074                           ;protocol.c: 162: cnt = 0;
  4075  04C1  01D7               	clrf	_cnt
  4076                           
  4077                           ;protocol.c: 163: printf("#%s\n", buf);
  4078  04C2  30BC               	movlw	low (STR_18| (0+32768))
  4079  04C3  00AE               	movwf	printf@f
  4080  04C4  3087               	movlw	high (STR_18| (0+32768))
  4081  04C5  00AF               	movwf	printf@f+1
  4082  04C6  3020               	movlw	low _buf
  4083  04C7  00B0               	movwf	low ((?_printf| 0+2))
  4084  04C8  3001               	movlw	high _buf
  4085  04C9  00B1               	movwf	(low ((?_printf| 0+2))+1)
  4086  04CA  3182  228B  3184   	fcall	_printf
  4087                           
  4088                           ;protocol.c: 164: if (BACKPLANE_SLAVE_ADDRESS != 0x01) {
  4089  04CD  0020               	movlb	0	; select bank0
  4090  04CE  036E               	decf	_BACKPLANE_SLAVE_ADDRESS,w
  4091  04CF  1903               	btfsc	3,2
  4092  04D0  2CD6               	goto	l5368
  4093                           
  4094                           ;protocol.c: 165: PROTOCOL_EXT(buf);
  4095  04D1  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  4096  04D2  3188  206E  3184   	fcall	_PROTOCOL_EXT
  4097                           
  4098                           ;protocol.c: 166: } else if (!strncmp(("WHO"), (buf), 3)) {
  4099  04D5  2C60               	goto	l817
  4100  04D6                     l5368:	
  4101  04D6  30DD               	movlw	low (STR_19| (0+32768))
  4102  04D7  0020               	movlb	0	; select bank0
  4103  04D8  00A0               	movwf	strncmp@s1
  4104  04D9  3087               	movlw	high (STR_19| (0+32768))
  4105  04DA  00A1               	movwf	strncmp@s1+1
  4106  04DB  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  4107  04DC  00C2               	movwf	??_PROTOCOL_Loop
  4108  04DD  0842               	movf	??_PROTOCOL_Loop,w
  4109  04DE  00A2               	movwf	strncmp@s2
  4110  04DF  3003               	movlw	3
  4111  04E0  00A3               	movwf	strncmp@len
  4112  04E1  3000               	movlw	0
  4113  04E2  00A4               	movwf	strncmp@len+1
  4114  04E3  318B  2375  3184   	fcall	_strncmp
  4115  04E6  0020               	movlb	0	; select bank0
  4116  04E7  0820               	movf	?_strncmp,w
  4117  04E8  0421               	iorwf	?_strncmp+1,w
  4118  04E9  1D03               	btfss	3,2
  4119  04EA  2CFB               	goto	l5372
  4120                           
  4121                           ;protocol.c: 167: printf("$:WHO:%s\n", device_id_);
  4122  04EB  306E               	movlw	low (STR_20| (0+32768))
  4123  04EC  00AE               	movwf	printf@f
  4124  04ED  3087               	movlw	high (STR_20| (0+32768))
  4125  04EE  00AF               	movwf	printf@f+1
  4126  04EF  0021               	movlb	1	; select bank1
  4127  04F0  0865               	movf	(_device_id_+1)^(0+128),w
  4128  04F1  0020               	movlb	0	; select bank0
  4129  04F2  00B1               	movwf	(low ((?_printf| 0+2))+1)
  4130  04F3  0021               	movlb	1	; select bank1
  4131  04F4  0864               	movf	_device_id_^(0+128),w
  4132  04F5  0020               	movlb	0	; select bank0
  4133  04F6  00B0               	movwf	low ((?_printf| 0+2))
  4134  04F7  3182  228B  3184   	fcall	_printf
  4135                           
  4136                           ;protocol.c: 168: } else if (!strncmp(("SAV"), (buf), 3)) {
  4137  04FA  2C60               	goto	l817
  4138  04FB                     l5372:	
  4139  04FB  30ED               	movlw	low (STR_21| (0+32768))
  4140  04FC  0020               	movlb	0	; select bank0
  4141  04FD  00A0               	movwf	strncmp@s1
  4142  04FE  3087               	movlw	high (STR_21| (0+32768))
  4143  04FF  00A1               	movwf	strncmp@s1+1
  4144  0500  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  4145  0501  00C2               	movwf	??_PROTOCOL_Loop
  4146  0502  0842               	movf	??_PROTOCOL_Loop,w
  4147  0503  00A2               	movwf	strncmp@s2
  4148  0504  3003               	movlw	3
  4149  0505  00A3               	movwf	strncmp@len
  4150  0506  3000               	movlw	0
  4151  0507  00A4               	movwf	strncmp@len+1
  4152  0508  318B  2375  3184   	fcall	_strncmp
  4153  050B  0020               	movlb	0	; select bank0
  4154  050C  0820               	movf	?_strncmp,w
  4155  050D  0421               	iorwf	?_strncmp+1,w
  4156  050E  1D03               	btfss	3,2
  4157  050F  2D14               	goto	l5376
  4158                           
  4159                           ;protocol.c: 169: PROTOCOL_SAV();
  4160  0510  3197  27AB  3184   	fcall	_PROTOCOL_SAV
  4161                           
  4162                           ;protocol.c: 170: } else if (!strncmp(("STA"), (buf), 3)) {
  4163  0513  2C60               	goto	l817
  4164  0514                     l5376:	
  4165  0514  30D5               	movlw	low (STR_22| (0+32768))
  4166  0515  0020               	movlb	0	; select bank0
  4167  0516  00A0               	movwf	strncmp@s1
  4168  0517  3087               	movlw	high (STR_22| (0+32768))
  4169  0518  00A1               	movwf	strncmp@s1+1
  4170  0519  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  4171  051A  00C2               	movwf	??_PROTOCOL_Loop
  4172  051B  0842               	movf	??_PROTOCOL_Loop,w
  4173  051C  00A2               	movwf	strncmp@s2
  4174  051D  3003               	movlw	3
  4175  051E  00A3               	movwf	strncmp@len
  4176  051F  3000               	movlw	0
  4177  0520  00A4               	movwf	strncmp@len+1
  4178  0521  318B  2375  3184   	fcall	_strncmp
  4179  0524  0020               	movlb	0	; select bank0
  4180  0525  0820               	movf	?_strncmp,w
  4181  0526  0421               	iorwf	?_strncmp+1,w
  4182  0527  1D03               	btfss	3,2
  4183  0528  2D2D               	goto	l5380
  4184                           
  4185                           ;protocol.c: 171: PROTOCOL_STA();
  4186  0529  3197  2763  3184   	fcall	_PROTOCOL_STA
  4187                           
  4188                           ;protocol.c: 172: } else if (!strncmp(("STP"), (buf), 3)) {
  4189  052C  2C60               	goto	l817
  4190  052D                     l5380:	
  4191  052D  30E1               	movlw	low (STR_23| (0+32768))
  4192  052E  0020               	movlb	0	; select bank0
  4193  052F  00A0               	movwf	strncmp@s1
  4194  0530  3087               	movlw	high (STR_23| (0+32768))
  4195  0531  00A1               	movwf	strncmp@s1+1
  4196  0532  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  4197  0533  00C2               	movwf	??_PROTOCOL_Loop
  4198  0534  0842               	movf	??_PROTOCOL_Loop,w
  4199  0535  00A2               	movwf	strncmp@s2
  4200  0536  3003               	movlw	3
  4201  0537  00A3               	movwf	strncmp@len
  4202  0538  3000               	movlw	0
  4203  0539  00A4               	movwf	strncmp@len+1
  4204  053A  318B  2375  3184   	fcall	_strncmp
  4205  053D  0020               	movlb	0	; select bank0
  4206  053E  0820               	movf	?_strncmp,w
  4207  053F  0421               	iorwf	?_strncmp+1,w
  4208  0540  1D03               	btfss	3,2
  4209  0541  2D52               	goto	l5386
  4210                           
  4211                           ;protocol.c: 173: PROTOCOL_STP();
  4212  0542  3197  2751  3184   	fcall	_PROTOCOL_STP
  4213                           
  4214                           ;protocol.c: 174: printf("*:STP:%s\n", "ACK");
  4215  0545  3078               	movlw	low (STR_24| (0+32768))
  4216  0546  0020               	movlb	0	; select bank0
  4217  0547  00AE               	movwf	printf@f
  4218  0548  3087               	movlw	high (STR_24| (0+32768))
  4219  0549  00AF               	movwf	printf@f+1
  4220  054A  30D9               	movlw	low (STR_25| (0+32768))
  4221  054B  00B0               	movwf	low ((?_printf| 0+2))
  4222  054C  3087               	movlw	high (STR_25| (0+32768))
  4223  054D  00B1               	movwf	(low ((?_printf| 0+2))+1)
  4224  054E  3182  228B  3184   	fcall	_printf
  4225                           
  4226                           ;protocol.c: 175: } else if (!strncmp(("SET"), (buf), 3)) {
  4227  0551  2C60               	goto	l817
  4228  0552                     l5386:	
  4229  0552  30E9               	movlw	low (STR_26| (0+32768))
  4230  0553  0020               	movlb	0	; select bank0
  4231  0554  00A0               	movwf	strncmp@s1
  4232  0555  3087               	movlw	high (STR_26| (0+32768))
  4233  0556  00A1               	movwf	strncmp@s1+1
  4234  0557  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  4235  0558  00C2               	movwf	??_PROTOCOL_Loop
  4236  0559  0842               	movf	??_PROTOCOL_Loop,w
  4237  055A  00A2               	movwf	strncmp@s2
  4238  055B  3003               	movlw	3
  4239  055C  00A3               	movwf	strncmp@len
  4240  055D  3000               	movlw	0
  4241  055E  00A4               	movwf	strncmp@len+1
  4242  055F  318B  2375  3184   	fcall	_strncmp
  4243  0562  0020               	movlb	0	; select bank0
  4244  0563  0820               	movf	?_strncmp,w
  4245  0564  0421               	iorwf	?_strncmp+1,w
  4246  0565  1D03               	btfss	3,2
  4247  0566  2D71               	goto	l5390
  4248                           
  4249                           ;protocol.c: 176: PROTOCOL_SET(atoi(&buf[4]));
  4250  0567  3024               	movlw	(low ((_buf| (0+256)+4)))& (0+255)
  4251  0568  318D  2526  3184   	fcall	_atoi
  4252  056B  0020               	movlb	0	; select bank0
  4253  056C  0826               	movf	?_atoi,w
  4254  056D  3197  279B  3184   	fcall	_PROTOCOL_SET
  4255                           
  4256                           ;protocol.c: 177: } else if (!strncmp(("GET"), (buf), 3)) {
  4257  0570  2C60               	goto	l817
  4258  0571                     l5390:	
  4259  0571  30E5               	movlw	low (STR_27| (0+32768))
  4260  0572  0020               	movlb	0	; select bank0
  4261  0573  00A0               	movwf	strncmp@s1
  4262  0574  3087               	movlw	high (STR_27| (0+32768))
  4263  0575  00A1               	movwf	strncmp@s1+1
  4264  0576  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  4265  0577  00C2               	movwf	??_PROTOCOL_Loop
  4266  0578  0842               	movf	??_PROTOCOL_Loop,w
  4267  0579  00A2               	movwf	strncmp@s2
  4268  057A  3003               	movlw	3
  4269  057B  00A3               	movwf	strncmp@len
  4270  057C  3000               	movlw	0
  4271  057D  00A4               	movwf	strncmp@len+1
  4272  057E  318B  2375  3184   	fcall	_strncmp
  4273  0581  0020               	movlb	0	; select bank0
  4274  0582  0820               	movf	?_strncmp,w
  4275  0583  0421               	iorwf	?_strncmp+1,w
  4276  0584  1D03               	btfss	3,2
  4277  0585  2D95               	goto	l5394
  4278                           
  4279                           ;protocol.c: 178: printf("$:GET:%d\n", value);
  4280  0586  305A               	movlw	low (STR_28| (0+32768))
  4281  0587  00AE               	movwf	printf@f
  4282  0588  3087               	movlw	high (STR_28| (0+32768))
  4283  0589  00AF               	movwf	printf@f+1
  4284  058A  0856               	movf	_value,w
  4285  058B  00C2               	movwf	??_PROTOCOL_Loop
  4286  058C  01C3               	clrf	??_PROTOCOL_Loop+1
  4287  058D  0842               	movf	??_PROTOCOL_Loop,w
  4288  058E  00B0               	movwf	?_printf+2
  4289  058F  0843               	movf	??_PROTOCOL_Loop+1,w
  4290  0590  00B1               	movwf	?_printf+3
  4291  0591  3182  228B  3184   	fcall	_printf
  4292                           
  4293                           ;protocol.c: 179: } else if (!strncmp(("WDA"), (buf), 3)) {
  4294  0594  2C60               	goto	l817
  4295  0595                     l5394:	
  4296  0595  30D1               	movlw	low (STR_29| (0+32768))
  4297  0596  0020               	movlb	0	; select bank0
  4298  0597  00A0               	movwf	strncmp@s1
  4299  0598  3087               	movlw	high (STR_29| (0+32768))
  4300  0599  00A1               	movwf	strncmp@s1+1
  4301  059A  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  4302  059B  00C2               	movwf	??_PROTOCOL_Loop
  4303  059C  0842               	movf	??_PROTOCOL_Loop,w
  4304  059D  00A2               	movwf	strncmp@s2
  4305  059E  3003               	movlw	3
  4306  059F  00A3               	movwf	strncmp@len
  4307  05A0  3000               	movlw	0
  4308  05A1  00A4               	movwf	strncmp@len+1
  4309  05A2  318B  2375  3184   	fcall	_strncmp
  4310  05A5  0020               	movlb	0	; select bank0
  4311  05A6  0820               	movf	?_strncmp,w
  4312  05A7  0421               	iorwf	?_strncmp+1,w
  4313  05A8  1D03               	btfss	3,2
  4314  05A9  2DB8               	goto	l5400
  4315                           
  4316                           ;protocol.c: 180: device_address = atoi(&buf[4]);
  4317  05AA  3024               	movlw	(low ((_buf| (0+256)+4)))& (0+255)
  4318  05AB  318D  2526  3184   	fcall	_atoi
  4319  05AE  0020               	movlb	0	; select bank0
  4320  05AF  0826               	movf	?_atoi,w
  4321  05B0  00C2               	movwf	??_PROTOCOL_Loop
  4322  05B1  0842               	movf	??_PROTOCOL_Loop,w
  4323  05B2  00C5               	movwf	PROTOCOL_Loop@device_address
  4324                           
  4325                           ;protocol.c: 181: PROTOCOL_Write_Device_Address(device_address);
  4326  05B3  0845               	movf	PROTOCOL_Loop@device_address,w
  4327  05B4  3197  27F1  3184   	fcall	_PROTOCOL_Write_Device_Address
  4328                           
  4329                           ;protocol.c: 182: } else if (!strncmp(("RDA"), (buf), 3)) {
  4330  05B7  2C60               	goto	l817
  4331  05B8                     l5400:	
  4332  05B8  30CD               	movlw	low (STR_30| (0+32768))
  4333  05B9  0020               	movlb	0	; select bank0
  4334  05BA  00A0               	movwf	strncmp@s1
  4335  05BB  3087               	movlw	high (STR_30| (0+32768))
  4336  05BC  00A1               	movwf	strncmp@s1+1
  4337  05BD  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  4338  05BE  00C2               	movwf	??_PROTOCOL_Loop
  4339  05BF  0842               	movf	??_PROTOCOL_Loop,w
  4340  05C0  00A2               	movwf	strncmp@s2
  4341  05C1  3003               	movlw	3
  4342  05C2  00A3               	movwf	strncmp@len
  4343  05C3  3000               	movlw	0
  4344  05C4  00A4               	movwf	strncmp@len+1
  4345  05C5  318B  2375  3184   	fcall	_strncmp
  4346  05C8  0020               	movlb	0	; select bank0
  4347  05C9  0820               	movf	?_strncmp,w
  4348  05CA  0421               	iorwf	?_strncmp+1,w
  4349  05CB  1D03               	btfss	3,2
  4350  05CC  2DE3               	goto	l5406
  4351                           
  4352                           ;protocol.c: 183: device_address = PROTOCOL_Read_Device_Address();
  4353  05CD  3197  274B  3184   	fcall	_PROTOCOL_Read_Device_Address
  4354  05D0  0020               	movlb	0	; select bank0
  4355  05D1  00C2               	movwf	??_PROTOCOL_Loop
  4356  05D2  0842               	movf	??_PROTOCOL_Loop,w
  4357  05D3  00C5               	movwf	PROTOCOL_Loop@device_address
  4358                           
  4359                           ;protocol.c: 184: printf("$:RDA:%d\n", device_address);
  4360  05D4  3050               	movlw	low (STR_31| (0+32768))
  4361  05D5  00AE               	movwf	printf@f
  4362  05D6  3087               	movlw	high (STR_31| (0+32768))
  4363  05D7  00AF               	movwf	printf@f+1
  4364  05D8  0845               	movf	PROTOCOL_Loop@device_address,w
  4365  05D9  00C2               	movwf	??_PROTOCOL_Loop
  4366  05DA  01C3               	clrf	??_PROTOCOL_Loop+1
  4367  05DB  0842               	movf	??_PROTOCOL_Loop,w
  4368  05DC  00B0               	movwf	?_printf+2
  4369  05DD  0843               	movf	??_PROTOCOL_Loop+1,w
  4370  05DE  00B1               	movwf	?_printf+3
  4371  05DF  3182  228B  3184   	fcall	_printf
  4372                           
  4373                           ;protocol.c: 185: } else {
  4374  05E2  2C60               	goto	l817
  4375  05E3                     l5406:	
  4376                           
  4377                           ;protocol.c: 186: PROTOCOL_EXT(buf);
  4378  05E3  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  4379  05E4  3188  206E  3184   	fcall	_PROTOCOL_EXT
  4380  05E7  2C60               	goto	l817
  4381  05E8                     __end_of_PROTOCOL_Loop:	
  4382                           
  4383                           	psect	text7
  4384  028B                     __ptext7:	
  4385 ;; *************** function _printf *****************
  4386 ;; Defined at:
  4387 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  4388 ;; Parameters:    Size  Location     Type
  4389 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  4390 ;;		 -> STR_63(10), STR_62(9), STR_61(10), STR_60(9), 
  4391 ;;		 -> STR_59(4), STR_58(4), STR_57(4), STR_56(4), 
  4392 ;;		 -> STR_55(4), STR_54(4), STR_53(4), STR_52(4), 
  4393 ;;		 -> STR_51(14), STR_50(9), STR_49(10), STR_48(9), 
  4394 ;;		 -> STR_47(10), STR_46(9), STR_45(7), STR_44(4), 
  4395 ;;		 -> STR_43(4), STR_42(9), STR_41(4), STR_40(4), 
  4396 ;;		 -> STR_39(10), STR_38(4), STR_37(4), STR_36(8), 
  4397 ;;		 -> STR_35(4), STR_34(4), STR_33(9), STR_32(6), 
  4398 ;;		 -> STR_31(10), STR_28(10), STR_24(10), STR_20(10), 
  4399 ;;		 -> STR_18(5), 
  4400 ;; Auto vars:     Size  Location     Type
  4401 ;;  tmpval          4    0        struct .
  4402 ;;  width           2   31[BANK0 ] int 
  4403 ;;  len             2   28[BANK0 ] unsigned int 
  4404 ;;  val             2   26[BANK0 ] unsigned int 
  4405 ;;  cp              2   23[BANK0 ] PTR const unsigned char 
  4406 ;;		 -> STR_25(4), buf(48), STR_17(7), ROM(8192), 
  4407 ;;		 -> printf@c(1), STR_16(17), 
  4408 ;;  c               1   33[BANK0 ] char 
  4409 ;;  flag            1   30[BANK0 ] unsigned char 
  4410 ;;  ap              1   25[BANK0 ] PTR void [1]
  4411 ;;		 -> ?_printf(2), 
  4412 ;;  prec            1   22[BANK0 ] char 
  4413 ;; Return value:  Size  Location     Type
  4414 ;;                  2   14[BANK0 ] int 
  4415 ;; Registers used:
  4416 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4417 ;; Tracked objects:
  4418 ;;		On entry : 0/0
  4419 ;;		On exit  : 0/0
  4420 ;;		Unchanged: 0/0
  4421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4422 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4423 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4424 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4425 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4426 ;;Total ram usage:       20 bytes
  4427 ;; Hardware stack levels used:    1
  4428 ;; Hardware stack levels required when called:    8
  4429 ;; This function calls:
  4430 ;;		___lwdiv
  4431 ;;		___lwmod
  4432 ;;		___wmul
  4433 ;;		_isdigit
  4434 ;;		_putch
  4435 ;; This function is called by:
  4436 ;;		_PROTOCOL_Loop
  4437 ;; This function uses a non-reentrant model
  4438 ;;
  4439                           
  4440                           
  4441                           ;psect for function _printf
  4442  028B                     _printf:	
  4443                           
  4444                           ;doprnt.c: 466: va_list ap;
  4445                           ;doprnt.c: 499: signed char c;
  4446                           ;doprnt.c: 501: int width;
  4447                           ;doprnt.c: 506: signed char prec;
  4448                           ;doprnt.c: 508: unsigned char flag;
  4449                           ;doprnt.c: 523: union {
  4450                           ;doprnt.c: 524: unsigned long vd;
  4451                           ;doprnt.c: 525: double integ;
  4452                           ;doprnt.c: 526: } tmpval;
  4453                           ;doprnt.c: 528: unsigned int val;
  4454                           ;doprnt.c: 529: unsigned len;
  4455                           ;doprnt.c: 530: const char * cp;
  4456                           ;doprnt.c: 533: *ap = __va_start();
  4457                           
  4458                           ;incstack = 0
  4459                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4460  028B  3030               	movlw	(low ((?_printf| 0+2)))& (0+255)
  4461  028C  0020               	movlb	0	; select bank0
  4462  028D  00B2               	movwf	??_printf
  4463  028E  0832               	movf	??_printf,w
  4464  028F  00B9               	movwf	printf@ap
  4465  0290                     l3732:	
  4466                           ;doprnt.c: 536: while(c = *f++) {
  4467                           
  4468  0290  0020               	movlb	0	; select bank0
  4469  0291  082F               	movf	printf@f+1,w
  4470  0292  00B3               	movwf	??_printf+1
  4471  0293  082E               	movf	printf@f,w
  4472  0294  00B2               	movwf	??_printf
  4473  0295  0AAE               	incf	printf@f,f
  4474  0296  1903               	skipnz
  4475  0297  0AAF               	incf	printf@f+1,f
  4476  0298  0832               	movf	??_printf,w
  4477  0299  0084               	movwf	4
  4478  029A  0833               	movf	??_printf+1,w
  4479  029B  0085               	movwf	5
  4480  029C  0800               	movf	0,w	;code access
  4481  029D  00B4               	movwf	??_printf+2
  4482  029E  0834               	movf	??_printf+2,w
  4483  029F  00C1               	movwf	printf@c
  4484  02A0  0841               	movf	printf@c,w
  4485  02A1  1903               	btfsc	3,2
  4486  02A2  0008               	return
  4487                           
  4488                           ;doprnt.c: 538: if(c != '%')
  4489  02A3  3025               	movlw	37
  4490  02A4  0641               	xorwf	printf@c,w
  4491  02A5  1903               	btfsc	3,2
  4492  02A6  2AAC               	goto	l3608
  4493                           
  4494                           ;doprnt.c: 540: {
  4495                           ;doprnt.c: 541: (putch(c) );
  4496  02A7  0841               	movf	printf@c,w
  4497  02A8  3197  2774  3182   	fcall	_putch
  4498                           
  4499                           ;doprnt.c: 542: continue;
  4500  02AB  2A90               	goto	l3732
  4501  02AC                     l3608:	
  4502                           
  4503                           ;doprnt.c: 543: }
  4504                           ;doprnt.c: 546: width = 0;
  4505  02AC  0020               	movlb	0	; select bank0
  4506  02AD  01BF               	clrf	printf@width
  4507  02AE  01C0               	clrf	printf@width+1
  4508                           
  4509                           ;doprnt.c: 548: flag = 0;
  4510  02AF  01BE               	clrf	printf@flag
  4511                           
  4512                           ;doprnt.c: 551: switch(*f) {
  4513                           
  4514                           ;doprnt.c: 550: for(;;) {
  4515  02B0  2AB6               	goto	l3614
  4516  02B1                     l636:	
  4517                           ;doprnt.c: 579: case '0':
  4518                           
  4519                           
  4520                           ;doprnt.c: 580: flag |= 0x04;
  4521  02B1  153E               	bsf	printf@flag,2
  4522                           
  4523                           ;doprnt.c: 581: f++;
  4524  02B2  3001               	movlw	1
  4525  02B3  07AE               	addwf	printf@f,f
  4526  02B4  3000               	movlw	0
  4527  02B5  3DAF               	addwfc	printf@f+1,f
  4528  02B6                     l3614:	
  4529                           ;doprnt.c: 584: }
  4530                           
  4531                           ;doprnt.c: 582: continue;
  4532                           
  4533  02B6  082E               	movf	printf@f,w
  4534  02B7  0084               	movwf	4
  4535  02B8  082F               	movf	printf@f+1,w
  4536  02B9  0085               	movwf	5
  4537  02BA  0800               	movf	0,w	;code access
  4538                           
  4539                           ; Switch size 1, requested type "space"
  4540                           ; Number of cases is 1, Range of values is 48 to 48
  4541                           ; switch strategies available:
  4542                           ; Name         Instructions Cycles
  4543                           ; simple_byte            4     3 (average)
  4544                           ; direct_byte           11     9 (fixed)
  4545                           ; jumptable            263     9 (fixed)
  4546                           ;	Chosen strategy is simple_byte
  4547  02BB  3A30               	xorlw	48	; case 48
  4548  02BC  1903               	skipnz
  4549  02BD  2AB1               	goto	l636
  4550  02BE  2ABF               	goto	l3616
  4551  02BF                     l3616:	
  4552                           ;doprnt.c: 586: }
  4553                           
  4554                           ;doprnt.c: 585: break;
  4555                           
  4556                           
  4557                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4558  02BF  082E               	movf	printf@f,w
  4559  02C0  0084               	movwf	4
  4560  02C1  082F               	movf	printf@f+1,w
  4561  02C2  0085               	movwf	5
  4562  02C3  0800               	movf	0,w	;code access
  4563  02C4  3188  204F  3182   	fcall	_isdigit
  4564  02C7  1C03               	btfss	3,0
  4565  02C8  2B60               	goto	l3664
  4566                           
  4567                           ;doprnt.c: 598: width = 0;
  4568  02C9  0020               	movlb	0	; select bank0
  4569  02CA  01BF               	clrf	printf@width
  4570  02CB  01C0               	clrf	printf@width+1
  4571  02CC                     l3620:	
  4572                           ;doprnt.c: 599: do {
  4573                           
  4574                           
  4575                           ;doprnt.c: 600: width *= 10;
  4576  02CC  300A               	movlw	10
  4577  02CD  0020               	movlb	0	; select bank0
  4578  02CE  00A0               	movwf	___wmul@multiplier
  4579  02CF  3000               	movlw	0
  4580  02D0  00A1               	movwf	___wmul@multiplier+1
  4581  02D1  0840               	movf	printf@width+1,w
  4582  02D2  00A3               	movwf	___wmul@multiplicand+1
  4583  02D3  083F               	movf	printf@width,w
  4584  02D4  00A2               	movwf	___wmul@multiplicand
  4585  02D5  3189  2117  3182   	fcall	___wmul
  4586  02D8  0020               	movlb	0	; select bank0
  4587  02D9  0821               	movf	?___wmul+1,w
  4588  02DA  00C0               	movwf	printf@width+1
  4589  02DB  0820               	movf	?___wmul,w
  4590  02DC  00BF               	movwf	printf@width
  4591                           
  4592                           ;doprnt.c: 601: width += *f++ - '0';
  4593  02DD  082E               	movf	printf@f,w
  4594  02DE  0084               	movwf	4
  4595  02DF  082F               	movf	printf@f+1,w
  4596  02E0  0085               	movwf	5
  4597  02E1  0800               	movf	0,w	;code access
  4598  02E2  3ED0               	addlw	208
  4599  02E3  00B2               	movwf	??_printf
  4600  02E4  30FF               	movlw	255
  4601  02E5  1803               	skipnc
  4602  02E6  3000               	movlw	0
  4603  02E7  00B3               	movwf	??_printf+1
  4604  02E8  0832               	movf	??_printf,w
  4605  02E9  07BF               	addwf	printf@width,f
  4606  02EA  0833               	movf	??_printf+1,w
  4607  02EB  3DC0               	addwfc	printf@width+1,f
  4608  02EC  3001               	movlw	1
  4609  02ED  07AE               	addwf	printf@f,f
  4610  02EE  3000               	movlw	0
  4611  02EF  3DAF               	addwfc	printf@f+1,f
  4612                           
  4613                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4614  02F0  082E               	movf	printf@f,w
  4615  02F1  0084               	movwf	4
  4616  02F2  082F               	movf	printf@f+1,w
  4617  02F3  0085               	movwf	5
  4618  02F4  0800               	movf	0,w	;code access
  4619  02F5  3188  204F  3182   	fcall	_isdigit
  4620  02F8  1C03               	btfss	3,0
  4621  02F9  2B60               	goto	l3664
  4622  02FA  2ACC               	goto	l3620
  4623  02FB                     l3628:	
  4624                           ;doprnt.c: 728: case 's':
  4625                           
  4626                           ;doprnt.c: 698: case 'i':
  4627                           ;doprnt.c: 699: break;
  4628                           
  4629                           ;doprnt.c: 697: case 'd':
  4630                           
  4631                           ;doprnt.c: 638: goto alldone;
  4632                           
  4633                           ;doprnt.c: 637: case 0:
  4634                           
  4635                           ;doprnt.c: 608: }
  4636                           ;doprnt.c: 635: switch(c = *f++) {
  4637                           
  4638                           
  4639                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  4640  02FB  0020               	movlb	0	; select bank0
  4641  02FC  0839               	movf	printf@ap,w
  4642  02FD  0086               	movwf	6
  4643  02FE  0187               	clrf	7
  4644  02FF  3F40               	moviw [0]fsr1
  4645  0300  00B7               	movwf	printf@cp
  4646  0301  3F41               	moviw [1]fsr1
  4647  0302  00B8               	movwf	printf@cp+1
  4648  0303  3002               	movlw	2
  4649  0304  00B2               	movwf	??_printf
  4650  0305  0832               	movf	??_printf,w
  4651  0306  07B9               	addwf	printf@ap,f
  4652                           
  4653                           ;doprnt.c: 740: if(!cp)
  4654  0307  0837               	movf	printf@cp,w
  4655  0308  0438               	iorwf	printf@cp+1,w
  4656  0309  1D03               	btfss	3,2
  4657  030A  2B0F               	goto	l3636
  4658                           
  4659                           ;doprnt.c: 741: cp = "(null)";
  4660  030B  30AF               	movlw	low (STR_17| (0+32768))
  4661  030C  00B7               	movwf	printf@cp
  4662  030D  3087               	movlw	high (STR_17| (0+32768))
  4663  030E  00B8               	movwf	printf@cp+1
  4664  030F                     l3636:	
  4665                           
  4666                           ;doprnt.c: 745: len = 0;
  4667  030F  01BC               	clrf	printf@len
  4668  0310  01BD               	clrf	printf@len+1
  4669  0311                     l3640:	
  4670                           ;doprnt.c: 746: while(cp[len])
  4671                           
  4672  0311  0837               	movf	printf@cp,w
  4673  0312  073C               	addwf	printf@len,w
  4674  0313  0084               	movwf	4
  4675  0314  0838               	movf	printf@cp+1,w
  4676  0315  3D3D               	addwfc	printf@len+1,w
  4677  0316  0085               	movwf	5
  4678  0317  0012               	moviw fsr0++
  4679  0318  1903               	btfsc	3,2
  4680  0319  2B1F               	goto	l3642
  4681                           
  4682                           ;doprnt.c: 747: len++;
  4683  031A  3001               	movlw	1
  4684  031B  07BC               	addwf	printf@len,f
  4685  031C  3000               	movlw	0
  4686  031D  3DBD               	addwfc	printf@len+1,f
  4687  031E  2B11               	goto	l3640
  4688  031F                     l3642:	
  4689                           ;doprnt.c: 750: dostring:
  4690                           
  4691                           
  4692                           ;doprnt.c: 757: if(width > len)
  4693  031F  0840               	movf	printf@width+1,w
  4694  0320  023D               	subwf	printf@len+1,w
  4695  0321  1D03               	skipz
  4696  0322  2B25               	goto	u2475
  4697  0323  083F               	movf	printf@width,w
  4698  0324  023C               	subwf	printf@len,w
  4699  0325                     u2475:	
  4700  0325  1803               	skipnc
  4701  0326  2B2C               	goto	l3646
  4702                           
  4703                           ;doprnt.c: 758: width -= len;
  4704  0327  083C               	movf	printf@len,w
  4705  0328  02BF               	subwf	printf@width,f
  4706  0329  083D               	movf	printf@len+1,w
  4707  032A  3BC0               	subwfb	printf@width+1,f
  4708  032B  2B2E               	goto	l3650
  4709  032C                     l3646:	
  4710                           
  4711                           ;doprnt.c: 759: else
  4712                           ;doprnt.c: 760: width = 0;
  4713  032C  01BF               	clrf	printf@width
  4714  032D  01C0               	clrf	printf@width+1
  4715  032E                     l3650:	
  4716                           ;doprnt.c: 764: while(width--)
  4717                           
  4718  032E  30FF               	movlw	255
  4719  032F  0020               	movlb	0	; select bank0
  4720  0330  07BF               	addwf	printf@width,f
  4721  0331  30FF               	movlw	255
  4722  0332  3DC0               	addwfc	printf@width+1,f
  4723  0333  0A3F               	incf	printf@width,w
  4724  0334  1903               	btfsc	3,2
  4725  0335  0A40               	incf	printf@width+1,w
  4726  0336  1903               	btfsc	3,2
  4727  0337  2B4A               	goto	l3656
  4728                           
  4729                           ;doprnt.c: 765: (putch(' ') );
  4730  0338  3020               	movlw	32
  4731  0339  3197  2774  3182   	fcall	_putch
  4732  033C  2B2E               	goto	l3650
  4733  033D                     l3652:	
  4734                           ;doprnt.c: 767: while(len--)
  4735                           
  4736                           
  4737                           ;doprnt.c: 768: (putch(*cp++) );
  4738  033D  0837               	movf	printf@cp,w
  4739  033E  0084               	movwf	4
  4740  033F  0838               	movf	printf@cp+1,w
  4741  0340  0085               	movwf	5
  4742  0341  0800               	movf	0,w	;code access
  4743  0342  3197  2774  3182   	fcall	_putch
  4744  0345  3001               	movlw	1
  4745  0346  0020               	movlb	0	; select bank0
  4746  0347  07B7               	addwf	printf@cp,f
  4747  0348  3000               	movlw	0
  4748  0349  3DB8               	addwfc	printf@cp+1,f
  4749  034A                     l3656:	
  4750  034A  3001               	movlw	1
  4751  034B  02BC               	subwf	printf@len,f
  4752  034C  3000               	movlw	0
  4753  034D  3BBD               	subwfb	printf@len+1,f
  4754  034E  0A3C               	incf	printf@len,w
  4755  034F  1D03               	skipz
  4756  0350  2B3D               	goto	l3652
  4757  0351  0A3D               	incf	printf@len+1,w
  4758  0352  1903               	btfsc	3,2
  4759  0353  2A90               	goto	l3732
  4760  0354  2B3D               	goto	l3652
  4761  0355                     l3658:	
  4762                           ;doprnt.c: 802: default:
  4763                           
  4764                           ;doprnt.c: 774: continue;
  4765                           
  4766                           
  4767                           ;doprnt.c: 805: cp = (char *)&c;
  4768  0355  3041               	movlw	low printf@c
  4769  0356  00B7               	movwf	printf@cp
  4770  0357  3000               	movlw	high printf@c
  4771  0358  00B8               	movwf	printf@cp+1
  4772                           
  4773                           ;doprnt.c: 806: len = 1;
  4774  0359  3001               	movlw	1
  4775  035A  00BC               	movwf	printf@len
  4776  035B  3000               	movlw	0
  4777  035C  00BD               	movwf	printf@len+1
  4778                           
  4779                           ;doprnt.c: 807: goto dostring;
  4780  035D  2B1F               	goto	l3642
  4781  035E                     l664:	
  4782                           ;doprnt.c: 817: case 'u':
  4783                           
  4784                           
  4785                           ;doprnt.c: 818: flag |= 0x40;
  4786  035E  173E               	bsf	printf@flag,6
  4787                           
  4788                           ;doprnt.c: 822: }
  4789                           
  4790                           ;doprnt.c: 819: break;
  4791  035F  2B7E               	goto	l648
  4792  0360                     l3664:	
  4793  0360  0020               	movlb	0	; select bank0
  4794  0361  082F               	movf	printf@f+1,w
  4795  0362  00B3               	movwf	??_printf+1
  4796  0363  082E               	movf	printf@f,w
  4797  0364  00B2               	movwf	??_printf
  4798  0365  0AAE               	incf	printf@f,f
  4799  0366  1903               	skipnz
  4800  0367  0AAF               	incf	printf@f+1,f
  4801  0368  0832               	movf	??_printf,w
  4802  0369  0084               	movwf	4
  4803  036A  0833               	movf	??_printf+1,w
  4804  036B  0085               	movwf	5
  4805  036C  0800               	movf	0,w	;code access
  4806  036D  00C1               	movwf	printf@c
  4807                           
  4808                           ; Switch size 1, requested type "space"
  4809                           ; Number of cases is 5, Range of values is 0 to 117
  4810                           ; switch strategies available:
  4811                           ; Name         Instructions Cycles
  4812                           ; simple_byte           16     9 (average)
  4813                           ; direct_byte          242     6 (fixed)
  4814                           ; jumptable            260     6 (fixed)
  4815                           ;	Chosen strategy is simple_byte
  4816  036E  3A00               	xorlw	0	; case 0
  4817  036F  1903               	skipnz
  4818  0370  2C5F               	goto	l688
  4819  0371  3A64               	xorlw	100	; case 100
  4820  0372  1903               	skipnz
  4821  0373  2B7E               	goto	l648
  4822  0374  3A0D               	xorlw	13	; case 105
  4823  0375  1903               	skipnz
  4824  0376  2B7E               	goto	l648
  4825  0377  3A1A               	xorlw	26	; case 115
  4826  0378  1903               	skipnz
  4827  0379  2AFB               	goto	l3628
  4828  037A  3A06               	xorlw	6	; case 117
  4829  037B  1903               	skipnz
  4830  037C  2B5E               	goto	l664
  4831  037D  2B55               	goto	l3658
  4832  037E                     l648:	
  4833                           
  4834                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  4835  037E  0020               	movlb	0	; select bank0
  4836  037F  1B3E               	btfsc	printf@flag,6
  4837  0380  2B98               	goto	l3676
  4838                           
  4839                           ;doprnt.c: 1253: {
  4840                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4841  0381  0839               	movf	printf@ap,w
  4842  0382  0086               	movwf	6
  4843  0383  0187               	clrf	7
  4844  0384  3F40               	moviw [0]fsr1
  4845  0385  00BA               	movwf	printf@val
  4846  0386  3F41               	moviw [1]fsr1
  4847  0387  00BB               	movwf	printf@val+1
  4848  0388  3002               	movlw	2
  4849  0389  00B2               	movwf	??_printf
  4850  038A  0832               	movf	??_printf,w
  4851  038B  07B9               	addwf	printf@ap,f
  4852                           
  4853                           ;doprnt.c: 1261: if((int)val < 0) {
  4854  038C  1FBB               	btfss	printf@val+1,7
  4855  038D  2BA3               	goto	l3680
  4856                           
  4857                           ;doprnt.c: 1262: flag |= 0x03;
  4858  038E  3003               	movlw	3
  4859  038F  00B2               	movwf	??_printf
  4860  0390  0832               	movf	??_printf,w
  4861  0391  04BE               	iorwf	printf@flag,f
  4862                           
  4863                           ;doprnt.c: 1263: val = -val;
  4864  0392  09BA               	comf	printf@val,f
  4865  0393  09BB               	comf	printf@val+1,f
  4866  0394  0ABA               	incf	printf@val,f
  4867  0395  1903               	skipnz
  4868  0396  0ABB               	incf	printf@val+1,f
  4869                           
  4870                           ;doprnt.c: 1264: }
  4871                           ;doprnt.c: 1266: }
  4872  0397  2BA3               	goto	l3680
  4873  0398                     l3676:	
  4874                           
  4875                           ;doprnt.c: 1268: else
  4876                           ;doprnt.c: 1273: {
  4877                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4878  0398  0839               	movf	printf@ap,w
  4879  0399  0086               	movwf	6
  4880  039A  0187               	clrf	7
  4881  039B  3F40               	moviw [0]fsr1
  4882  039C  00BA               	movwf	printf@val
  4883  039D  3F41               	moviw [1]fsr1
  4884  039E  00BB               	movwf	printf@val+1
  4885  039F  3002               	movlw	2
  4886  03A0  00B2               	movwf	??_printf
  4887  03A1  0832               	movf	??_printf,w
  4888  03A2  07B9               	addwf	printf@ap,f
  4889  03A3                     l3680:	
  4890                           
  4891                           ;doprnt.c: 1287: }
  4892                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4893  03A3  01C1               	clrf	printf@c
  4894  03A4  0AC1               	incf	printf@c,f
  4895  03A5  3005               	movlw	5
  4896  03A6  0641               	xorwf	printf@c,w
  4897  03A7  1903               	btfsc	3,2
  4898  03A8  2BC8               	goto	l3692
  4899  03A9                     l3686:	
  4900                           
  4901                           ;doprnt.c: 1306: if(val < dpowers[c])
  4902  03A9  0841               	movf	printf@c,w
  4903  03AA  00B2               	movwf	??_printf
  4904  03AB  01B3               	clrf	??_printf+1
  4905  03AC  35B2               	lslf	??_printf,f
  4906  03AD  0DB3               	rlf	??_printf+1,f
  4907  03AE  3027               	movlw	low (_dpowers| (0+32768))
  4908  03AF  0732               	addwf	??_printf,w
  4909  03B0  0084               	movwf	4
  4910  03B1  3087               	movlw	high (_dpowers| (0+32768))
  4911  03B2  3D33               	addwfc	??_printf+1,w
  4912  03B3  0085               	movwf	5
  4913  03B4  3F00               	moviw [0]fsr0
  4914  03B5  00B4               	movwf	??_printf+2
  4915  03B6  3F01               	moviw [1]fsr0
  4916  03B7  00B5               	movwf	??_printf+3
  4917  03B8  0835               	movf	??_printf+3,w
  4918  03B9  023B               	subwf	printf@val+1,w
  4919  03BA  1D03               	skipz
  4920  03BB  2BBE               	goto	u2535
  4921  03BC  0834               	movf	??_printf+2,w
  4922  03BD  023A               	subwf	printf@val,w
  4923  03BE                     u2535:	
  4924  03BE  1C03               	btfss	3,0
  4925  03BF  2BC8               	goto	l3692
  4926                           
  4927                           ;doprnt.c: 1307: break;
  4928  03C0  3001               	movlw	1
  4929  03C1  00B2               	movwf	??_printf
  4930  03C2  0832               	movf	??_printf,w
  4931  03C3  07C1               	addwf	printf@c,f
  4932  03C4  3005               	movlw	5
  4933  03C5  0641               	xorwf	printf@c,w
  4934  03C6  1D03               	btfss	3,2
  4935  03C7  2BA9               	goto	l3686
  4936  03C8                     l3692:	
  4937                           
  4938                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4939  03C8  083F               	movf	printf@width,w
  4940  03C9  0440               	iorwf	printf@width+1,w
  4941  03CA  1903               	btfsc	3,2
  4942  03CB  2BD4               	goto	l671
  4943  03CC  083E               	movf	printf@flag,w
  4944  03CD  3903               	andlw	3
  4945  03CE  1903               	btfsc	3,2
  4946  03CF  2BD4               	goto	l671
  4947                           
  4948                           ;doprnt.c: 1346: width--;
  4949  03D0  30FF               	movlw	255
  4950  03D1  07BF               	addwf	printf@width,f
  4951  03D2  30FF               	movlw	255
  4952  03D3  3DC0               	addwfc	printf@width+1,f
  4953  03D4                     l671:	
  4954                           
  4955                           ;doprnt.c: 1381: if(width > c)
  4956  03D4  0841               	movf	printf@c,w
  4957  03D5  00B2               	movwf	??_printf
  4958  03D6  01B3               	clrf	??_printf+1
  4959  03D7  1BB2               	btfsc	??_printf,7
  4960  03D8  03B3               	decf	??_printf+1,f
  4961  03D9  0833               	movf	??_printf+1,w
  4962  03DA  3A80               	xorlw	128
  4963  03DB  00B4               	movwf	??_printf+2
  4964  03DC  0840               	movf	printf@width+1,w
  4965  03DD  3A80               	xorlw	128
  4966  03DE  0234               	subwf	??_printf+2,w
  4967  03DF  1D03               	skipz
  4968  03E0  2BE3               	goto	u2575
  4969  03E1  083F               	movf	printf@width,w
  4970  03E2  0232               	subwf	??_printf,w
  4971  03E3                     u2575:	
  4972  03E3  1803               	skipnc
  4973  03E4  2BF0               	goto	l3700
  4974                           
  4975                           ;doprnt.c: 1382: width -= c;
  4976  03E5  0020               	movlb	0	; select bank0
  4977  03E6  0841               	movf	printf@c,w
  4978  03E7  00B2               	movwf	??_printf
  4979  03E8  01B3               	clrf	??_printf+1
  4980  03E9  1BB2               	btfsc	??_printf,7
  4981  03EA  03B3               	decf	??_printf+1,f
  4982  03EB  0832               	movf	??_printf,w
  4983  03EC  02BF               	subwf	printf@width,f
  4984  03ED  0833               	movf	??_printf+1,w
  4985  03EE  3BC0               	subwfb	printf@width+1,f
  4986  03EF  2BF3               	goto	l3702
  4987  03F0                     l3700:	
  4988                           
  4989                           ;doprnt.c: 1383: else
  4990                           ;doprnt.c: 1384: width = 0;
  4991  03F0  0020               	movlb	0	; select bank0
  4992  03F1  01BF               	clrf	printf@width
  4993  03F2  01C0               	clrf	printf@width+1
  4994  03F3                     l3702:	
  4995                           
  4996                           ;doprnt.c: 1387: if(flag & 0x04) {
  4997  03F3  1D3E               	btfss	printf@flag,2
  4998  03F4  2C0C               	goto	l3714
  4999                           
  5000                           ;doprnt.c: 1392: if(flag & 0x03)
  5001  03F5  083E               	movf	printf@flag,w
  5002  03F6  3903               	andlw	3
  5003  03F7  1903               	btfsc	3,2
  5004  03F8  2BFD               	goto	l3708
  5005                           
  5006                           ;doprnt.c: 1393: (putch('-') );
  5007  03F9  302D               	movlw	45
  5008  03FA  3197  2774  3182   	fcall	_putch
  5009  03FD                     l3708:	
  5010                           
  5011                           ;doprnt.c: 1415: if(width)
  5012  03FD  0020               	movlb	0	; select bank0
  5013  03FE                     L2:	
  5014  03FE  083F               	movf	printf@width,w
  5015  03FF  0440               	iorwf	printf@width+1,w
  5016  0400  1903               	btfsc	3,2
  5017  0401  2C25               	goto	l3724
  5018                           
  5019                           ;doprnt.c: 1417: (putch('0') );
  5020                           
  5021                           ;doprnt.c: 1416: do
  5022  0402  3030               	movlw	48
  5023  0403  3197  2774  3182   	fcall	_putch
  5024                           
  5025                           ;doprnt.c: 1418: while(--width);
  5026  0406  30FF               	movlw	255
  5027  0407  0020               	movlb	0	; select bank0
  5028  0408  07BF               	addwf	printf@width,f
  5029  0409  30FF               	movlw	255
  5030  040A  3DC0               	addwfc	printf@width+1,f
  5031  040B  2BFE               	goto	L2
  5032  040C                     l3714:	
  5033                           ;doprnt.c: 1420: } else
  5034                           
  5035                           
  5036                           ;doprnt.c: 1422: {
  5037                           ;doprnt.c: 1424: if(width
  5038                           ;doprnt.c: 1428: )
  5039  040C  083F               	movf	printf@width,w
  5040  040D  0440               	iorwf	printf@width+1,w
  5041  040E  1903               	btfsc	3,2
  5042  040F  2C1D               	goto	l3720
  5043  0410                     l3716:	
  5044                           ;doprnt.c: 1429: do
  5045                           
  5046                           
  5047                           ;doprnt.c: 1430: (putch(' ') );
  5048  0410  3020               	movlw	32
  5049  0411  3197  2774  3182   	fcall	_putch
  5050                           
  5051                           ;doprnt.c: 1431: while(--width);
  5052  0414  30FF               	movlw	255
  5053  0415  0020               	movlb	0	; select bank0
  5054  0416  07BF               	addwf	printf@width,f
  5055  0417  30FF               	movlw	255
  5056  0418  3DC0               	addwfc	printf@width+1,f
  5057  0419  083F               	movf	printf@width,w
  5058  041A  0440               	iorwf	printf@width+1,w
  5059  041B  1D03               	btfss	3,2
  5060  041C  2C10               	goto	l3716
  5061  041D                     l3720:	
  5062                           
  5063                           ;doprnt.c: 1438: if(flag & 0x03)
  5064  041D  083E               	movf	printf@flag,w
  5065  041E  3903               	andlw	3
  5066  041F  1903               	btfsc	3,2
  5067  0420  2C25               	goto	l3724
  5068                           
  5069                           ;doprnt.c: 1439: (putch('-') );
  5070  0421  302D               	movlw	45
  5071  0422  3197  2774  3182   	fcall	_putch
  5072  0425                     l3724:	
  5073                           
  5074                           ;doprnt.c: 1469: }
  5075                           ;doprnt.c: 1472: prec = c;
  5076  0425  0020               	movlb	0	; select bank0
  5077  0426  0841               	movf	printf@c,w
  5078  0427  00B2               	movwf	??_printf
  5079  0428  0832               	movf	??_printf,w
  5080  0429  00B6               	movwf	printf@prec
  5081  042A                     l3730:	
  5082                           ;doprnt.c: 1474: while(prec--) {
  5083                           
  5084  042A  30FF               	movlw	255
  5085  042B  0020               	movlb	0	; select bank0
  5086  042C  00B2               	movwf	??_printf
  5087  042D  0832               	movf	??_printf,w
  5088  042E  07B6               	addwf	printf@prec,f
  5089  042F  0A36               	incf	printf@prec,w
  5090  0430  1903               	btfsc	3,2
  5091  0431  2A90               	goto	l3732
  5092                           
  5093                           ;doprnt.c: 1478: {
  5094                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5095  0432  300A               	movlw	10
  5096  0433  00A8               	movwf	___lwmod@divisor
  5097  0434  3000               	movlw	0
  5098  0435  00A9               	movwf	___lwmod@divisor+1
  5099  0436  0836               	movf	printf@prec,w
  5100  0437  00B2               	movwf	??_printf
  5101  0438  01B3               	clrf	??_printf+1
  5102  0439  35B2               	lslf	??_printf,f
  5103  043A  0DB3               	rlf	??_printf+1,f
  5104  043B  3027               	movlw	low (_dpowers| (0+32768))
  5105  043C  0732               	addwf	??_printf,w
  5106  043D  0084               	movwf	4
  5107  043E  3087               	movlw	high (_dpowers| (0+32768))
  5108  043F  3D33               	addwfc	??_printf+1,w
  5109  0440  0085               	movwf	5
  5110  0441  3F00               	moviw [0]fsr0
  5111  0442  00A0               	movwf	___lwdiv@divisor
  5112  0443  3F01               	moviw [1]fsr0
  5113  0444  00A1               	movwf	___lwdiv@divisor+1
  5114  0445  083B               	movf	printf@val+1,w
  5115  0446  00A3               	movwf	___lwdiv@dividend+1
  5116  0447  083A               	movf	printf@val,w
  5117  0448  00A2               	movwf	___lwdiv@dividend
  5118  0449  318B  2304  3182   	fcall	___lwdiv
  5119  044C  0020               	movlb	0	; select bank0
  5120  044D  0821               	movf	?___lwdiv+1,w
  5121  044E  00AB               	movwf	___lwmod@dividend+1
  5122  044F  0820               	movf	?___lwdiv,w
  5123  0450  00AA               	movwf	___lwmod@dividend
  5124  0451  318A  22A7  3182   	fcall	___lwmod
  5125  0454  0020               	movlb	0	; select bank0
  5126  0455  0828               	movf	?___lwmod,w
  5127  0456  3E30               	addlw	48
  5128  0457  00B4               	movwf	??_printf+2
  5129  0458  0834               	movf	??_printf+2,w
  5130  0459  00C1               	movwf	printf@c
  5131                           
  5132                           ;doprnt.c: 1523: }
  5133                           ;doprnt.c: 1524: (putch(c) );
  5134  045A  0841               	movf	printf@c,w
  5135  045B  3197  2774  3182   	fcall	_putch
  5136  045E  2C2A               	goto	l3730
  5137  045F                     l688:	
  5138                           ;doprnt.c: 1540: return 0;
  5139                           ;	Return value of _printf is never used
  5140                           
  5141                           ;doprnt.c: 1525: }
  5142                           ;doprnt.c: 1533: }
  5143                           ;doprnt.c: 1535: alldone:
  5144                           
  5145  045F  0008               	return
  5146  0460                     __end_of_printf:	
  5147                           
  5148                           	psect	text8
  5149  1774                     __ptext8:	
  5150 ;; *************** function _putch *****************
  5151 ;; Defined at:
  5152 ;;		line 160 in file "mcc_generated_files/eusart.c"
  5153 ;; Parameters:    Size  Location     Type
  5154 ;;  txData          1    wreg     unsigned char 
  5155 ;; Auto vars:     Size  Location     Type
  5156 ;;  txData          1    2[BANK0 ] unsigned char 
  5157 ;; Return value:  Size  Location     Type
  5158 ;;                  1    wreg      void 
  5159 ;; Registers used:
  5160 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5161 ;; Tracked objects:
  5162 ;;		On entry : 0/0
  5163 ;;		On exit  : 0/0
  5164 ;;		Unchanged: 0/0
  5165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5166 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5167 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5168 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5169 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5170 ;;Total ram usage:        1 bytes
  5171 ;; Hardware stack levels used:    1
  5172 ;; Hardware stack levels required when called:    7
  5173 ;; This function calls:
  5174 ;;		_EUSART_Write
  5175 ;; This function is called by:
  5176 ;;		_printf
  5177 ;; This function uses a non-reentrant model
  5178 ;;
  5179                           
  5180                           
  5181                           ;psect for function _putch
  5182  1774                     _putch:	
  5183                           
  5184                           ;incstack = 0
  5185                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5186                           ;putch@txData stored from wreg
  5187  1774  0020               	movlb	0	; select bank0
  5188  1775  00A2               	movwf	putch@txData
  5189                           
  5190                           ;eusart.c: 162: EUSART_Write(txData);
  5191  1776  0822               	movf	putch@txData,w
  5192  1777  318A  220E         	fcall	_EUSART_Write
  5193  1779  0008               	return
  5194  177A                     __end_of_putch:	
  5195                           
  5196                           	psect	text9
  5197  0A0E                     __ptext9:	
  5198 ;; *************** function _EUSART_Write *****************
  5199 ;; Defined at:
  5200 ;;		line 132 in file "mcc_generated_files/eusart.c"
  5201 ;; Parameters:    Size  Location     Type
  5202 ;;  txData          1    wreg     unsigned char 
  5203 ;; Auto vars:     Size  Location     Type
  5204 ;;  txData          1    1[BANK0 ] unsigned char 
  5205 ;; Return value:  Size  Location     Type
  5206 ;;                  1    wreg      void 
  5207 ;; Registers used:
  5208 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5209 ;; Tracked objects:
  5210 ;;		On entry : 0/0
  5211 ;;		On exit  : 0/0
  5212 ;;		Unchanged: 0/0
  5213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5215 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5216 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5217 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5218 ;;Total ram usage:        2 bytes
  5219 ;; Hardware stack levels used:    1
  5220 ;; Hardware stack levels required when called:    6
  5221 ;; This function calls:
  5222 ;;		Nothing
  5223 ;; This function is called by:
  5224 ;;		_putch
  5225 ;; This function uses a non-reentrant model
  5226 ;;
  5227                           
  5228                           
  5229                           ;psect for function _EUSART_Write
  5230  0A0E                     _EUSART_Write:	
  5231                           
  5232                           ;incstack = 0
  5233                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  5234                           ;EUSART_Write@txData stored from wreg
  5235  0A0E  0020               	movlb	0	; select bank0
  5236  0A0F  00A1               	movwf	EUSART_Write@txData
  5237  0A10                     l3020:	
  5238                           ;eusart.c: 135: {
  5239                           
  5240                           ;eusart.c: 134: while(0 == eusartTxBufferRemaining)
  5241                           
  5242  0A10  085E               	movf	_eusartTxBufferRemaining,w	;volatile
  5243  0A11  1903               	btfsc	3,2
  5244  0A12  2A10               	goto	l3020
  5245                           
  5246                           ;eusart.c: 136: }
  5247                           ;eusart.c: 138: if(0 == PIE1bits.TXIE)
  5248  0A13  0021               	movlb	1	; select bank1
  5249  0A14  1A11               	btfsc	17,4	;volatile
  5250  0A15  2A1B               	goto	l383
  5251                           
  5252                           ;eusart.c: 139: {
  5253                           ;eusart.c: 140: TXREG = txData;
  5254  0A16  0020               	movlb	0	; select bank0
  5255  0A17  0821               	movf	EUSART_Write@txData,w
  5256  0A18  0023               	movlb	3	; select bank3
  5257  0A19  009A               	movwf	26	;volatile
  5258                           
  5259                           ;eusart.c: 141: }
  5260  0A1A  2A2F               	goto	l3034
  5261  0A1B                     l383:	
  5262                           
  5263                           ;eusart.c: 142: else
  5264                           ;eusart.c: 143: {
  5265                           ;eusart.c: 144: PIE1bits.TXIE = 0;
  5266  0A1B  1211               	bcf	17,4	;volatile
  5267                           
  5268                           ;eusart.c: 145: eusartTxBuffer[eusartTxHead++] = txData;
  5269  0A1C  0020               	movlb	0	; select bank0
  5270  0A1D  0821               	movf	EUSART_Write@txData,w
  5271  0A1E  00A0               	movwf	??_EUSART_Write
  5272  0A1F  087C               	movf	_eusartTxHead,w
  5273  0A20  3EA8               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  5274  0A21  0086               	movwf	6
  5275  0A22  0187               	clrf	7
  5276  0A23  0820               	movf	??_EUSART_Write,w
  5277  0A24  0081               	movwf	1
  5278  0A25  3001               	movlw	1
  5279  0A26  00A0               	movwf	??_EUSART_Write
  5280  0A27  0820               	movf	??_EUSART_Write,w
  5281  0A28  07FC               	addwf	_eusartTxHead,f	;volatile
  5282                           
  5283                           ;eusart.c: 146: if(sizeof(eusartTxBuffer) <= eusartTxHead)
  5284  0A29  3008               	movlw	8
  5285  0A2A  027C               	subwf	_eusartTxHead,w	;volatile
  5286  0A2B  1803               	btfsc	3,0
  5287                           
  5288                           ;eusart.c: 147: {
  5289                           ;eusart.c: 148: eusartTxHead = 0;
  5290  0A2C  01FC               	clrf	_eusartTxHead	;volatile
  5291                           
  5292                           ;eusart.c: 149: }
  5293                           ;eusart.c: 150: eusartTxBufferRemaining--;
  5294  0A2D  3001               	movlw	1
  5295  0A2E  02DE               	subwf	_eusartTxBufferRemaining,f	;volatile
  5296  0A2F                     l3034:	
  5297                           
  5298                           ;eusart.c: 151: }
  5299                           ;eusart.c: 152: PIE1bits.TXIE = 1;
  5300  0A2F  0021               	movlb	1	; select bank1
  5301  0A30  1611               	bsf	17,4	;volatile
  5302  0A31  0008               	return
  5303  0A32                     __end_of_EUSART_Write:	
  5304                           
  5305                           	psect	text10
  5306  0AA7                     __ptext10:	
  5307 ;; *************** function ___lwmod *****************
  5308 ;; Defined at:
  5309 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  5310 ;; Parameters:    Size  Location     Type
  5311 ;;  divisor         2    8[BANK0 ] unsigned int 
  5312 ;;  dividend        2   10[BANK0 ] unsigned int 
  5313 ;; Auto vars:     Size  Location     Type
  5314 ;;  counter         1   13[BANK0 ] unsigned char 
  5315 ;; Return value:  Size  Location     Type
  5316 ;;                  2    8[BANK0 ] unsigned int 
  5317 ;; Registers used:
  5318 ;;		wreg, status,2, status,0
  5319 ;; Tracked objects:
  5320 ;;		On entry : 0/0
  5321 ;;		On exit  : 0/0
  5322 ;;		Unchanged: 0/0
  5323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5324 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5325 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5326 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5327 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5328 ;;Total ram usage:        6 bytes
  5329 ;; Hardware stack levels used:    1
  5330 ;; Hardware stack levels required when called:    6
  5331 ;; This function calls:
  5332 ;;		Nothing
  5333 ;; This function is called by:
  5334 ;;		_printf
  5335 ;; This function uses a non-reentrant model
  5336 ;;
  5337                           
  5338                           
  5339                           ;psect for function ___lwmod
  5340  0AA7                     ___lwmod:	
  5341                           
  5342                           ;incstack = 0
  5343                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  5344  0AA7  0020               	movlb	0	; select bank0
  5345  0AA8  0828               	movf	___lwmod@divisor,w
  5346  0AA9  0429               	iorwf	___lwmod@divisor+1,w
  5347  0AAA  1903               	btfsc	3,2
  5348  0AAB  2ACF               	goto	l3340
  5349  0AAC  01AD               	clrf	___lwmod@counter
  5350  0AAD  0AAD               	incf	___lwmod@counter,f
  5351  0AAE                     l3330:	
  5352  0AAE  1BA9               	btfsc	___lwmod@divisor+1,7
  5353  0AAF  2ABA               	goto	l3332
  5354  0AB0  3001               	movlw	1
  5355  0AB1                     u2125:	
  5356  0AB1  35A8               	lslf	___lwmod@divisor,f
  5357  0AB2  0DA9               	rlf	___lwmod@divisor+1,f
  5358  0AB3  0B89               	decfsz	9,f
  5359  0AB4  2AB1               	goto	u2125
  5360  0AB5  3001               	movlw	1
  5361  0AB6  00AC               	movwf	??___lwmod
  5362  0AB7  082C               	movf	??___lwmod,w
  5363  0AB8  07AD               	addwf	___lwmod@counter,f
  5364  0AB9  2AAE               	goto	l3330
  5365  0ABA                     l3332:	
  5366  0ABA  0829               	movf	___lwmod@divisor+1,w
  5367  0ABB  022B               	subwf	___lwmod@dividend+1,w
  5368  0ABC  1D03               	skipz
  5369  0ABD  2AC0               	goto	u2145
  5370  0ABE  0828               	movf	___lwmod@divisor,w
  5371  0ABF  022A               	subwf	___lwmod@dividend,w
  5372  0AC0                     u2145:	
  5373  0AC0  1C03               	skipc
  5374  0AC1  2AC6               	goto	l3336
  5375  0AC2  0828               	movf	___lwmod@divisor,w
  5376  0AC3  02AA               	subwf	___lwmod@dividend,f
  5377  0AC4  0829               	movf	___lwmod@divisor+1,w
  5378  0AC5  3BAB               	subwfb	___lwmod@dividend+1,f
  5379  0AC6                     l3336:	
  5380  0AC6  3001               	movlw	1
  5381  0AC7                     u2155:	
  5382  0AC7  36A9               	lsrf	___lwmod@divisor+1,f
  5383  0AC8  0CA8               	rrf	___lwmod@divisor,f
  5384  0AC9  0B89               	decfsz	9,f
  5385  0ACA  2AC7               	goto	u2155
  5386  0ACB  3001               	movlw	1
  5387  0ACC  02AD               	subwf	___lwmod@counter,f
  5388  0ACD  1D03               	btfss	3,2
  5389  0ACE  2ABA               	goto	l3332
  5390  0ACF                     l3340:	
  5391  0ACF  082B               	movf	___lwmod@dividend+1,w
  5392  0AD0  00A9               	movwf	?___lwmod+1
  5393  0AD1  082A               	movf	___lwmod@dividend,w
  5394  0AD2  00A8               	movwf	?___lwmod
  5395  0AD3  0008               	return
  5396  0AD4                     __end_of___lwmod:	
  5397                           
  5398                           	psect	text11
  5399  0B04                     __ptext11:	
  5400 ;; *************** function ___lwdiv *****************
  5401 ;; Defined at:
  5402 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  5403 ;; Parameters:    Size  Location     Type
  5404 ;;  divisor         2    0[BANK0 ] unsigned int 
  5405 ;;  dividend        2    2[BANK0 ] unsigned int 
  5406 ;; Auto vars:     Size  Location     Type
  5407 ;;  quotient        2    5[BANK0 ] unsigned int 
  5408 ;;  counter         1    7[BANK0 ] unsigned char 
  5409 ;; Return value:  Size  Location     Type
  5410 ;;                  2    0[BANK0 ] unsigned int 
  5411 ;; Registers used:
  5412 ;;		wreg, status,2, status,0
  5413 ;; Tracked objects:
  5414 ;;		On entry : 0/0
  5415 ;;		On exit  : 0/0
  5416 ;;		Unchanged: 0/0
  5417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5418 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5419 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5420 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5421 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5422 ;;Total ram usage:        8 bytes
  5423 ;; Hardware stack levels used:    1
  5424 ;; Hardware stack levels required when called:    6
  5425 ;; This function calls:
  5426 ;;		Nothing
  5427 ;; This function is called by:
  5428 ;;		_printf
  5429 ;; This function uses a non-reentrant model
  5430 ;;
  5431                           
  5432                           
  5433                           ;psect for function ___lwdiv
  5434  0B04                     ___lwdiv:	
  5435                           
  5436                           ;incstack = 0
  5437                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  5438  0B04  0020               	movlb	0	; select bank0
  5439  0B05  01A5               	clrf	___lwdiv@quotient
  5440  0B06  01A6               	clrf	___lwdiv@quotient+1
  5441  0B07  0820               	movf	___lwdiv@divisor,w
  5442  0B08  0421               	iorwf	___lwdiv@divisor+1,w
  5443  0B09  1903               	btfsc	3,2
  5444  0B0A  2B34               	goto	l3318
  5445  0B0B  01A7               	clrf	___lwdiv@counter
  5446  0B0C  0AA7               	incf	___lwdiv@counter,f
  5447  0B0D                     l3306:	
  5448  0B0D  1BA1               	btfsc	___lwdiv@divisor+1,7
  5449  0B0E  2B19               	goto	l3308
  5450  0B0F  3001               	movlw	1
  5451  0B10                     u2055:	
  5452  0B10  35A0               	lslf	___lwdiv@divisor,f
  5453  0B11  0DA1               	rlf	___lwdiv@divisor+1,f
  5454  0B12  0B89               	decfsz	9,f
  5455  0B13  2B10               	goto	u2055
  5456  0B14  3001               	movlw	1
  5457  0B15  00A4               	movwf	??___lwdiv
  5458  0B16  0824               	movf	??___lwdiv,w
  5459  0B17  07A7               	addwf	___lwdiv@counter,f
  5460  0B18  2B0D               	goto	l3306
  5461  0B19                     l3308:	
  5462  0B19  3001               	movlw	1
  5463  0B1A                     u2075:	
  5464  0B1A  35A5               	lslf	___lwdiv@quotient,f
  5465  0B1B  0DA6               	rlf	___lwdiv@quotient+1,f
  5466  0B1C  0B89               	decfsz	9,f
  5467  0B1D  2B1A               	goto	u2075
  5468  0B1E  0821               	movf	___lwdiv@divisor+1,w
  5469  0B1F  0223               	subwf	___lwdiv@dividend+1,w
  5470  0B20  1D03               	skipz
  5471  0B21  2B24               	goto	u2085
  5472  0B22  0820               	movf	___lwdiv@divisor,w
  5473  0B23  0222               	subwf	___lwdiv@dividend,w
  5474  0B24                     u2085:	
  5475  0B24  1C03               	skipc
  5476  0B25  2B2B               	goto	l3314
  5477  0B26  0820               	movf	___lwdiv@divisor,w
  5478  0B27  02A2               	subwf	___lwdiv@dividend,f
  5479  0B28  0821               	movf	___lwdiv@divisor+1,w
  5480  0B29  3BA3               	subwfb	___lwdiv@dividend+1,f
  5481  0B2A  1425               	bsf	___lwdiv@quotient,0
  5482  0B2B                     l3314:	
  5483  0B2B  3001               	movlw	1
  5484  0B2C                     u2095:	
  5485  0B2C  36A1               	lsrf	___lwdiv@divisor+1,f
  5486  0B2D  0CA0               	rrf	___lwdiv@divisor,f
  5487  0B2E  0B89               	decfsz	9,f
  5488  0B2F  2B2C               	goto	u2095
  5489  0B30  3001               	movlw	1
  5490  0B31  02A7               	subwf	___lwdiv@counter,f
  5491  0B32  1D03               	btfss	3,2
  5492  0B33  2B19               	goto	l3308
  5493  0B34                     l3318:	
  5494  0B34  0826               	movf	___lwdiv@quotient+1,w
  5495  0B35  00A1               	movwf	?___lwdiv+1
  5496  0B36  0825               	movf	___lwdiv@quotient,w
  5497  0B37  00A0               	movwf	?___lwdiv
  5498  0B38  0008               	return
  5499  0B39                     __end_of___lwdiv:	
  5500                           
  5501                           	psect	text12
  5502  007E                     __ptext12:	
  5503 ;; *************** function _loop_func *****************
  5504 ;; Defined at:
  5505 ;;		line 121 in file "main.c"
  5506 ;; Parameters:    Size  Location     Type
  5507 ;;		None
  5508 ;; Auto vars:     Size  Location     Type
  5509 ;;  value           1   30[BANK0 ] unsigned char 
  5510 ;; Return value:  Size  Location     Type
  5511 ;;                  1    wreg      void 
  5512 ;; Registers used:
  5513 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5514 ;; Tracked objects:
  5515 ;;		On entry : 0/0
  5516 ;;		On exit  : 0/0
  5517 ;;		Unchanged: 0/0
  5518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5520 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5521 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5522 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5523 ;;Total ram usage:        3 bytes
  5524 ;; Hardware stack levels used:    1
  5525 ;; Hardware stack levels required when called:   10
  5526 ;; This function calls:
  5527 ;;		_PROTOCOL_Read_Lock
  5528 ;;		_PROTOCOL_Set_Lock
  5529 ;;		_atoi
  5530 ;;		_i2c2_write
  5531 ;;		_lcd_clear
  5532 ;;		_lcd_contrast
  5533 ;;		_lcd_init
  5534 ;;		_lcd_string
  5535 ;;		_lcd_string_2lines
  5536 ;;		_strncmp
  5537 ;; This function is called by:
  5538 ;;		_main
  5539 ;;		_PROTOCOL_Loop
  5540 ;; This function uses a non-reentrant model
  5541 ;;
  5542                           
  5543                           
  5544                           ;psect for function _loop_func
  5545  007E                     _loop_func:	
  5546                           
  5547                           ;main.c: 122: uint8_t value;
  5548                           ;main.c: 123: if(PROTOCOL_Read_Lock()) {
  5549                           
  5550                           ;incstack = 0
  5551                           ; Regs used in _loop_func: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5552  007E  3197  274E  3180   	fcall	_PROTOCOL_Read_Lock
  5553  0081  3A00               	xorlw	0
  5554  0082  1903               	skipnz
  5555  0083  0008               	return
  5556                           
  5557                           ;main.c: 125: if (!strncmp(("INI"), (pbuf), 3)) {
  5558  0084  30FD               	movlw	low (STR_1| (0+32768))
  5559  0085  0020               	movlb	0	; select bank0
  5560  0086  00A0               	movwf	strncmp@s1
  5561  0087  3087               	movlw	high (STR_1| (0+32768))
  5562  0088  00A1               	movwf	strncmp@s1+1
  5563  0089  0859               	movf	_pbuf,w
  5564  008A  00BC               	movwf	??_loop_func
  5565  008B  083C               	movf	??_loop_func,w
  5566  008C  00A2               	movwf	strncmp@s2
  5567  008D  3003               	movlw	3
  5568  008E  00A3               	movwf	strncmp@len
  5569  008F  3000               	movlw	0
  5570  0090  00A4               	movwf	strncmp@len+1
  5571  0091  318B  2375  3180   	fcall	_strncmp
  5572  0094  0020               	movlb	0	; select bank0
  5573  0095  0820               	movf	?_strncmp,w
  5574  0096  0421               	iorwf	?_strncmp+1,w
  5575  0097  1D03               	btfss	3,2
  5576  0098  289D               	goto	l3524
  5577                           
  5578                           ;main.c: 126: lcd_init();
  5579  0099  318D  2597  3180   	fcall	_lcd_init
  5580                           
  5581                           ;main.c: 127: } else if (!strncmp(("CMD"), (pbuf), 3)) {
  5582  009C  2A85               	goto	l3598
  5583  009D                     l3524:	
  5584  009D  30F5               	movlw	low (STR_2| (0+32768))
  5585  009E  0020               	movlb	0	; select bank0
  5586  009F  00A0               	movwf	strncmp@s1
  5587  00A0  3087               	movlw	high (STR_2| (0+32768))
  5588  00A1  00A1               	movwf	strncmp@s1+1
  5589  00A2  0859               	movf	_pbuf,w
  5590  00A3  00BC               	movwf	??_loop_func
  5591  00A4  083C               	movf	??_loop_func,w
  5592  00A5  00A2               	movwf	strncmp@s2
  5593  00A6  3003               	movlw	3
  5594  00A7  00A3               	movwf	strncmp@len
  5595  00A8  3000               	movlw	0
  5596  00A9  00A4               	movwf	strncmp@len+1
  5597  00AA  318B  2375  3180   	fcall	_strncmp
  5598  00AD  0020               	movlb	0	; select bank0
  5599  00AE  0820               	movf	?_strncmp,w
  5600  00AF  0421               	iorwf	?_strncmp+1,w
  5601  00B0  1D03               	btfss	3,2
  5602  00B1  28CD               	goto	l3530
  5603                           
  5604                           ;main.c: 128: value = atoi(&pbuf[4]);
  5605  00B2  0859               	movf	_pbuf,w
  5606  00B3  3E04               	addlw	4
  5607  00B4  318D  2526  3180   	fcall	_atoi
  5608  00B7  0020               	movlb	0	; select bank0
  5609  00B8  0826               	movf	?_atoi,w
  5610  00B9  00BC               	movwf	??_loop_func
  5611  00BA  083C               	movf	??_loop_func,w
  5612  00BB  00BE               	movwf	loop_func@value
  5613                           
  5614                           ;main.c: 129: i2c2_write(0x3e, 0x00, value); _delay((unsigned long)((1)*(4000000/4000.0)
      +                          ));;
  5615  00BC  303E               	movlw	62
  5616  00BD  00AE               	movwf	i2c2_write@dev_addr
  5617  00BE  3000               	movlw	0
  5618  00BF  00AF               	movwf	i2c2_write@dev_addr+1
  5619  00C0  01B0               	clrf	i2c2_write@reg_addr
  5620  00C1  083E               	movf	loop_func@value,w
  5621  00C2  00BC               	movwf	??_loop_func
  5622  00C3  083C               	movf	??_loop_func,w
  5623  00C4  00B1               	movwf	i2c2_write@data
  5624  00C5  318A  2232  3180   	fcall	_i2c2_write
  5625  00C8  30C8               	movlw	200
  5626  00C9                     u5157:	
  5627  00C9  3200               	nop2
  5628  00CA  0B89               	decfsz	9,f
  5629  00CB  28C9               	goto	u5157
  5630                           
  5631                           ;main.c: 130: } else if (!strncmp(("DAT"), (pbuf), 3)) {
  5632  00CC  2A85               	goto	l3598
  5633  00CD                     l3530:	
  5634  00CD  301D               	movlw	low (STR_3| (0+32768))
  5635  00CE  0020               	movlb	0	; select bank0
  5636  00CF  00A0               	movwf	strncmp@s1
  5637  00D0  3088               	movlw	high (STR_3| (0+32768))
  5638  00D1  00A1               	movwf	strncmp@s1+1
  5639  00D2  0859               	movf	_pbuf,w
  5640  00D3  00BC               	movwf	??_loop_func
  5641  00D4  083C               	movf	??_loop_func,w
  5642  00D5  00A2               	movwf	strncmp@s2
  5643  00D6  3003               	movlw	3
  5644  00D7  00A3               	movwf	strncmp@len
  5645  00D8  3000               	movlw	0
  5646  00D9  00A4               	movwf	strncmp@len+1
  5647  00DA  318B  2375  3180   	fcall	_strncmp
  5648  00DD  0020               	movlb	0	; select bank0
  5649  00DE  0820               	movf	?_strncmp,w
  5650  00DF  0421               	iorwf	?_strncmp+1,w
  5651  00E0  1D03               	btfss	3,2
  5652  00E1  2900               	goto	l3536
  5653                           
  5654                           ;main.c: 131: value = atoi(&pbuf[4]);
  5655  00E2  0859               	movf	_pbuf,w
  5656  00E3  3E04               	addlw	4
  5657  00E4  318D  2526  3180   	fcall	_atoi
  5658  00E7  0020               	movlb	0	; select bank0
  5659  00E8  0826               	movf	?_atoi,w
  5660  00E9  00BC               	movwf	??_loop_func
  5661  00EA  083C               	movf	??_loop_func,w
  5662  00EB  00BE               	movwf	loop_func@value
  5663                           
  5664                           ;main.c: 132: i2c2_write(0x3e, 0x40, value); _delay((unsigned long)((1)*(4000000/4000.0)
      +                          ));;
  5665  00EC  303E               	movlw	62
  5666  00ED  00AE               	movwf	i2c2_write@dev_addr
  5667  00EE  3000               	movlw	0
  5668  00EF  00AF               	movwf	i2c2_write@dev_addr+1
  5669  00F0  3040               	movlw	64
  5670  00F1  00BC               	movwf	??_loop_func
  5671  00F2  083C               	movf	??_loop_func,w
  5672  00F3  00B0               	movwf	i2c2_write@reg_addr
  5673  00F4  083E               	movf	loop_func@value,w
  5674  00F5  00BD               	movwf	??_loop_func+1
  5675  00F6  083D               	movf	??_loop_func+1,w
  5676  00F7  00B1               	movwf	i2c2_write@data
  5677  00F8  318A  2232  3180   	fcall	_i2c2_write
  5678  00FB  30C8               	movlw	200
  5679  00FC                     u5167:	
  5680  00FC  3200               	nop2
  5681  00FD  0B89               	decfsz	9,f
  5682  00FE  28FC               	goto	u5167
  5683                           
  5684                           ;main.c: 133: } else if (!strncmp(("CLR"), (pbuf), 3)) {
  5685  00FF  2A85               	goto	l3598
  5686  0100                     l3536:	
  5687  0100  3011               	movlw	low (STR_4| (0+32768))
  5688  0101  0020               	movlb	0	; select bank0
  5689  0102  00A0               	movwf	strncmp@s1
  5690  0103  3088               	movlw	high (STR_4| (0+32768))
  5691  0104  00A1               	movwf	strncmp@s1+1
  5692  0105  0859               	movf	_pbuf,w
  5693  0106  00BC               	movwf	??_loop_func
  5694  0107  083C               	movf	??_loop_func,w
  5695  0108  00A2               	movwf	strncmp@s2
  5696  0109  3003               	movlw	3
  5697  010A  00A3               	movwf	strncmp@len
  5698  010B  3000               	movlw	0
  5699  010C  00A4               	movwf	strncmp@len+1
  5700  010D  318B  2375  3180   	fcall	_strncmp
  5701  0110  0020               	movlb	0	; select bank0
  5702  0111  0820               	movf	?_strncmp,w
  5703  0112  0421               	iorwf	?_strncmp+1,w
  5704  0113  1D03               	btfss	3,2
  5705  0114  2919               	goto	l3540
  5706                           
  5707                           ;main.c: 134: lcd_clear();
  5708  0115  3188  207E  3180   	fcall	_lcd_clear
  5709                           
  5710                           ;main.c: 135: } else if (!strncmp(("STR"), (pbuf), 3)) {
  5711  0118  2A85               	goto	l3598
  5712  0119                     l3540:	
  5713  0119  3015               	movlw	low (STR_5| (0+32768))
  5714  011A  0020               	movlb	0	; select bank0
  5715  011B  00A0               	movwf	strncmp@s1
  5716  011C  3088               	movlw	high (STR_5| (0+32768))
  5717  011D  00A1               	movwf	strncmp@s1+1
  5718  011E  0859               	movf	_pbuf,w
  5719  011F  00BC               	movwf	??_loop_func
  5720  0120  083C               	movf	??_loop_func,w
  5721  0121  00A2               	movwf	strncmp@s2
  5722  0122  3003               	movlw	3
  5723  0123  00A3               	movwf	strncmp@len
  5724  0124  3000               	movlw	0
  5725  0125  00A4               	movwf	strncmp@len+1
  5726  0126  318B  2375  3180   	fcall	_strncmp
  5727  0129  0020               	movlb	0	; select bank0
  5728  012A  0820               	movf	?_strncmp,w
  5729  012B  0421               	iorwf	?_strncmp+1,w
  5730  012C  1D03               	btfss	3,2
  5731  012D  2932               	goto	l3544
  5732                           
  5733                           ;main.c: 136: lcd_string();
  5734  012E  318A  22D4  3180   	fcall	_lcd_string
  5735                           
  5736                           ;main.c: 137: } else if (!strncmp(("HST"), (pbuf), 3)) {
  5737  0131  2A85               	goto	l3598
  5738  0132                     l3544:	
  5739  0132  3025               	movlw	low (STR_6| (0+32768))
  5740  0133  0020               	movlb	0	; select bank0
  5741  0134  00A0               	movwf	strncmp@s1
  5742  0135  3088               	movlw	high (STR_6| (0+32768))
  5743  0136  00A1               	movwf	strncmp@s1+1
  5744  0137  0859               	movf	_pbuf,w
  5745  0138  00BC               	movwf	??_loop_func
  5746  0139  083C               	movf	??_loop_func,w
  5747  013A  00A2               	movwf	strncmp@s2
  5748  013B  3003               	movlw	3
  5749  013C  00A3               	movwf	strncmp@len
  5750  013D  3000               	movlw	0
  5751  013E  00A4               	movwf	strncmp@len+1
  5752  013F  318B  2375  3180   	fcall	_strncmp
  5753  0142  0020               	movlb	0	; select bank0
  5754  0143  0820               	movf	?_strncmp,w
  5755  0144  0421               	iorwf	?_strncmp+1,w
  5756  0145  1D03               	btfss	3,2
  5757  0146  295B               	goto	l3552
  5758                           
  5759                           ;main.c: 138: i2c2_write(0x3e, 0x00, 0x02); _delay((unsigned long)((1)*(4000000/4000.0))
      +                          );;
  5760  0147  303E               	movlw	62
  5761  0148  00AE               	movwf	i2c2_write@dev_addr
  5762  0149  3000               	movlw	0
  5763  014A  00AF               	movwf	i2c2_write@dev_addr+1
  5764  014B  01B0               	clrf	i2c2_write@reg_addr
  5765  014C  3002               	movlw	2
  5766  014D  00BC               	movwf	??_loop_func
  5767  014E  083C               	movf	??_loop_func,w
  5768  014F  00B1               	movwf	i2c2_write@data
  5769  0150  318A  2232  3180   	fcall	_i2c2_write
  5770  0153  30C8               	movlw	200
  5771  0154                     u5177:	
  5772  0154  3200               	nop2
  5773  0155  0B89               	decfsz	9,f
  5774  0156  2954               	goto	u5177
  5775                           
  5776                           ;main.c: 139: lcd_string();
  5777  0157  318A  22D4  3180   	fcall	_lcd_string
  5778                           
  5779                           ;main.c: 140: } else if (!strncmp(("DSP"), (pbuf), 3)) {
  5780  015A  2A85               	goto	l3598
  5781  015B                     l3552:	
  5782  015B  300D               	movlw	low (STR_7| (0+32768))
  5783  015C  0020               	movlb	0	; select bank0
  5784  015D  00A0               	movwf	strncmp@s1
  5785  015E  3088               	movlw	high (STR_7| (0+32768))
  5786  015F  00A1               	movwf	strncmp@s1+1
  5787  0160  0859               	movf	_pbuf,w
  5788  0161  00BC               	movwf	??_loop_func
  5789  0162  083C               	movf	??_loop_func,w
  5790  0163  00A2               	movwf	strncmp@s2
  5791  0164  3003               	movlw	3
  5792  0165  00A3               	movwf	strncmp@len
  5793  0166  3000               	movlw	0
  5794  0167  00A4               	movwf	strncmp@len+1
  5795  0168  318B  2375  3180   	fcall	_strncmp
  5796  016B  0020               	movlb	0	; select bank0
  5797  016C  0820               	movf	?_strncmp,w
  5798  016D  0421               	iorwf	?_strncmp+1,w
  5799  016E  1D03               	btfss	3,2
  5800  016F  2984               	goto	l3560
  5801                           
  5802                           ;main.c: 141: i2c2_write(0x3e, 0x00, 0x02); _delay((unsigned long)((1)*(4000000/4000.0))
      +                          );;
  5803  0170  303E               	movlw	62
  5804  0171  00AE               	movwf	i2c2_write@dev_addr
  5805  0172  3000               	movlw	0
  5806  0173  00AF               	movwf	i2c2_write@dev_addr+1
  5807  0174  01B0               	clrf	i2c2_write@reg_addr
  5808  0175  3002               	movlw	2
  5809  0176  00BC               	movwf	??_loop_func
  5810  0177  083C               	movf	??_loop_func,w
  5811  0178  00B1               	movwf	i2c2_write@data
  5812  0179  318A  2232  3180   	fcall	_i2c2_write
  5813  017C  30C8               	movlw	200
  5814  017D                     u5187:	
  5815  017D  3200               	nop2
  5816  017E  0B89               	decfsz	9,f
  5817  017F  297D               	goto	u5187
  5818                           
  5819                           ;main.c: 142: lcd_string_2lines();
  5820  0180  318C  243F  3180   	fcall	_lcd_string_2lines
  5821                           
  5822                           ;main.c: 143: } else if (!strncmp(("CUL"), (pbuf), 3)) {
  5823  0183  2A85               	goto	l3598
  5824  0184                     l3560:	
  5825  0184  3001               	movlw	low (STR_8| (0+32768))
  5826  0185  0020               	movlb	0	; select bank0
  5827  0186  00A0               	movwf	strncmp@s1
  5828  0187  3088               	movlw	high (STR_8| (0+32768))
  5829  0188  00A1               	movwf	strncmp@s1+1
  5830  0189  0859               	movf	_pbuf,w
  5831  018A  00BC               	movwf	??_loop_func
  5832  018B  083C               	movf	??_loop_func,w
  5833  018C  00A2               	movwf	strncmp@s2
  5834  018D  3003               	movlw	3
  5835  018E  00A3               	movwf	strncmp@len
  5836  018F  3000               	movlw	0
  5837  0190  00A4               	movwf	strncmp@len+1
  5838  0191  318B  2375  3180   	fcall	_strncmp
  5839  0194  0020               	movlb	0	; select bank0
  5840  0195  0820               	movf	?_strncmp,w
  5841  0196  0421               	iorwf	?_strncmp+1,w
  5842  0197  1D03               	btfss	3,2
  5843  0198  29AA               	goto	l3566
  5844                           
  5845                           ;main.c: 144: i2c2_write(0x3e, 0x00, 0x10); _delay((unsigned long)((1)*(4000000/4000.0))
      +                          );;
  5846  0199  303E               	movlw	62
  5847  019A  00AE               	movwf	i2c2_write@dev_addr
  5848  019B  3000               	movlw	0
  5849  019C  00AF               	movwf	i2c2_write@dev_addr+1
  5850  019D  01B0               	clrf	i2c2_write@reg_addr
  5851  019E  3010               	movlw	16
  5852  019F  00BC               	movwf	??_loop_func
  5853  01A0  083C               	movf	??_loop_func,w
  5854  01A1  00B1               	movwf	i2c2_write@data
  5855  01A2  318A  2232  3180   	fcall	_i2c2_write
  5856  01A5  30C8               	movlw	200
  5857  01A6                     u5197:	
  5858  01A6  3200               	nop2
  5859  01A7  0B89               	decfsz	9,f
  5860  01A8  29A6               	goto	u5197
  5861                           
  5862                           ;main.c: 145: } else if (!strncmp(("CUR"), (pbuf), 3)) {
  5863  01A9  2A85               	goto	l3598
  5864  01AA                     l3566:	
  5865  01AA  3019               	movlw	low (STR_9| (0+32768))
  5866  01AB  0020               	movlb	0	; select bank0
  5867  01AC  00A0               	movwf	strncmp@s1
  5868  01AD  3088               	movlw	high (STR_9| (0+32768))
  5869  01AE  00A1               	movwf	strncmp@s1+1
  5870  01AF  0859               	movf	_pbuf,w
  5871  01B0  00BC               	movwf	??_loop_func
  5872  01B1  083C               	movf	??_loop_func,w
  5873  01B2  00A2               	movwf	strncmp@s2
  5874  01B3  3003               	movlw	3
  5875  01B4  00A3               	movwf	strncmp@len
  5876  01B5  3000               	movlw	0
  5877  01B6  00A4               	movwf	strncmp@len+1
  5878  01B7  318B  2375  3180   	fcall	_strncmp
  5879  01BA  0020               	movlb	0	; select bank0
  5880  01BB  0820               	movf	?_strncmp,w
  5881  01BC  0421               	iorwf	?_strncmp+1,w
  5882  01BD  1D03               	btfss	3,2
  5883  01BE  29D0               	goto	l3572
  5884                           
  5885                           ;main.c: 146: i2c2_write(0x3e, 0x00, 0x14); _delay((unsigned long)((1)*(4000000/4000.0))
      +                          );;
  5886  01BF  303E               	movlw	62
  5887  01C0  00AE               	movwf	i2c2_write@dev_addr
  5888  01C1  3000               	movlw	0
  5889  01C2  00AF               	movwf	i2c2_write@dev_addr+1
  5890  01C3  01B0               	clrf	i2c2_write@reg_addr
  5891  01C4  3014               	movlw	20
  5892  01C5  00BC               	movwf	??_loop_func
  5893  01C6  083C               	movf	??_loop_func,w
  5894  01C7  00B1               	movwf	i2c2_write@data
  5895  01C8  318A  2232  3180   	fcall	_i2c2_write
  5896  01CB  30C8               	movlw	200
  5897  01CC                     u5207:	
  5898  01CC  3200               	nop2
  5899  01CD  0B89               	decfsz	9,f
  5900  01CE  29CC               	goto	u5207
  5901                           
  5902                           ;main.c: 147: } else if (!strncmp(("NWL"), (pbuf), 3)) {
  5903  01CF  2A85               	goto	l3598
  5904  01D0                     l3572:	
  5905  01D0  3005               	movlw	low (STR_10| (0+32768))
  5906  01D1  0020               	movlb	0	; select bank0
  5907  01D2  00A0               	movwf	strncmp@s1
  5908  01D3  3088               	movlw	high (STR_10| (0+32768))
  5909  01D4  00A1               	movwf	strncmp@s1+1
  5910  01D5  0859               	movf	_pbuf,w
  5911  01D6  00BC               	movwf	??_loop_func
  5912  01D7  083C               	movf	??_loop_func,w
  5913  01D8  00A2               	movwf	strncmp@s2
  5914  01D9  3003               	movlw	3
  5915  01DA  00A3               	movwf	strncmp@len
  5916  01DB  3000               	movlw	0
  5917  01DC  00A4               	movwf	strncmp@len+1
  5918  01DD  318B  2375  3180   	fcall	_strncmp
  5919  01E0  0020               	movlb	0	; select bank0
  5920  01E1  0820               	movf	?_strncmp,w
  5921  01E2  0421               	iorwf	?_strncmp+1,w
  5922  01E3  1D03               	btfss	3,2
  5923  01E4  29F6               	goto	l3578
  5924                           
  5925                           ;main.c: 148: i2c2_write(0x3e, 0x00, 0xc0); _delay((unsigned long)((1)*(4000000/4000.0))
      +                          );;
  5926  01E5  303E               	movlw	62
  5927  01E6  00AE               	movwf	i2c2_write@dev_addr
  5928  01E7  3000               	movlw	0
  5929  01E8  00AF               	movwf	i2c2_write@dev_addr+1
  5930  01E9  01B0               	clrf	i2c2_write@reg_addr
  5931  01EA  30C0               	movlw	192
  5932  01EB  00BC               	movwf	??_loop_func
  5933  01EC  083C               	movf	??_loop_func,w
  5934  01ED  00B1               	movwf	i2c2_write@data
  5935  01EE  318A  2232  3180   	fcall	_i2c2_write
  5936  01F1  30C8               	movlw	200
  5937  01F2                     u5217:	
  5938  01F2  3200               	nop2
  5939  01F3  0B89               	decfsz	9,f
  5940  01F4  29F2               	goto	u5217
  5941                           
  5942                           ;main.c: 149: } else if (!strncmp(("HOM"), (pbuf), 3)) {
  5943  01F5  2A85               	goto	l3598
  5944  01F6                     l3578:	
  5945  01F6  3009               	movlw	low (STR_11| (0+32768))
  5946  01F7  0020               	movlb	0	; select bank0
  5947  01F8  00A0               	movwf	strncmp@s1
  5948  01F9  3088               	movlw	high (STR_11| (0+32768))
  5949  01FA  00A1               	movwf	strncmp@s1+1
  5950  01FB  0859               	movf	_pbuf,w
  5951  01FC  00BC               	movwf	??_loop_func
  5952  01FD  083C               	movf	??_loop_func,w
  5953  01FE  00A2               	movwf	strncmp@s2
  5954  01FF  3003               	movlw	3
  5955  0200  00A3               	movwf	strncmp@len
  5956  0201  3000               	movlw	0
  5957  0202  00A4               	movwf	strncmp@len+1
  5958  0203  318B  2375  3180   	fcall	_strncmp
  5959  0206  0020               	movlb	0	; select bank0
  5960  0207  0820               	movf	?_strncmp,w
  5961  0208  0421               	iorwf	?_strncmp+1,w
  5962  0209  1D03               	btfss	3,2
  5963  020A  2A1C               	goto	l3584
  5964                           
  5965                           ;main.c: 150: i2c2_write(0x3e, 0x00, 0x02); _delay((unsigned long)((1)*(4000000/4000.0))
      +                          );;
  5966  020B  303E               	movlw	62
  5967  020C  00AE               	movwf	i2c2_write@dev_addr
  5968  020D  3000               	movlw	0
  5969  020E  00AF               	movwf	i2c2_write@dev_addr+1
  5970  020F  01B0               	clrf	i2c2_write@reg_addr
  5971  0210  3002               	movlw	2
  5972  0211  00BC               	movwf	??_loop_func
  5973  0212  083C               	movf	??_loop_func,w
  5974  0213  00B1               	movwf	i2c2_write@data
  5975  0214  318A  2232  3180   	fcall	_i2c2_write
  5976  0217  30C8               	movlw	200
  5977  0218                     u5227:	
  5978  0218  3200               	nop2
  5979  0219  0B89               	decfsz	9,f
  5980  021A  2A18               	goto	u5227
  5981                           
  5982                           ;main.c: 151: } else if (!strncmp(("CNT"), (pbuf), 3)) {
  5983  021B  2A85               	goto	l3598
  5984  021C                     l3584:	
  5985  021C  3021               	movlw	low (STR_12| (0+32768))
  5986  021D  0020               	movlb	0	; select bank0
  5987  021E  00A0               	movwf	strncmp@s1
  5988  021F  3088               	movlw	high (STR_12| (0+32768))
  5989  0220  00A1               	movwf	strncmp@s1+1
  5990  0221  0859               	movf	_pbuf,w
  5991  0222  00BC               	movwf	??_loop_func
  5992  0223  083C               	movf	??_loop_func,w
  5993  0224  00A2               	movwf	strncmp@s2
  5994  0225  3003               	movlw	3
  5995  0226  00A3               	movwf	strncmp@len
  5996  0227  3000               	movlw	0
  5997  0228  00A4               	movwf	strncmp@len+1
  5998  0229  318B  2375  3180   	fcall	_strncmp
  5999  022C  0020               	movlb	0	; select bank0
  6000  022D  0820               	movf	?_strncmp,w
  6001  022E  0421               	iorwf	?_strncmp+1,w
  6002  022F  1D03               	btfss	3,2
  6003  0230  2A40               	goto	l3588
  6004                           
  6005                           ;main.c: 152: value = atoi(&pbuf[4]);
  6006  0231  0859               	movf	_pbuf,w
  6007  0232  3E04               	addlw	4
  6008  0233  318D  2526  3180   	fcall	_atoi
  6009  0236  0020               	movlb	0	; select bank0
  6010  0237  0826               	movf	?_atoi,w
  6011  0238  00BC               	movwf	??_loop_func
  6012  0239  083C               	movf	??_loop_func,w
  6013  023A  00BE               	movwf	loop_func@value
  6014                           
  6015                           ;main.c: 153: lcd_contrast(value);
  6016  023B  083E               	movf	loop_func@value,w
  6017  023C  318C  2484  3180   	fcall	_lcd_contrast
  6018                           
  6019                           ;main.c: 154: } else if (!strncmp(("LED"), (pbuf), 3)) {
  6020  023F  2A85               	goto	l3598
  6021  0240                     l3588:	
  6022  0240  30F1               	movlw	low (STR_13| (0+32768))
  6023  0241  0020               	movlb	0	; select bank0
  6024  0242  00A0               	movwf	strncmp@s1
  6025  0243  3087               	movlw	high (STR_13| (0+32768))
  6026  0244  00A1               	movwf	strncmp@s1+1
  6027  0245  0859               	movf	_pbuf,w
  6028  0246  00BC               	movwf	??_loop_func
  6029  0247  083C               	movf	??_loop_func,w
  6030  0248  00A2               	movwf	strncmp@s2
  6031  0249  3003               	movlw	3
  6032  024A  00A3               	movwf	strncmp@len
  6033  024B  3000               	movlw	0
  6034  024C  00A4               	movwf	strncmp@len+1
  6035  024D  318B  2375  3180   	fcall	_strncmp
  6036  0250  0020               	movlb	0	; select bank0
  6037  0251  0820               	movf	?_strncmp,w
  6038  0252  0421               	iorwf	?_strncmp+1,w
  6039  0253  1D03               	btfss	3,2
  6040  0254  2A85               	goto	l3598
  6041                           
  6042                           ;main.c: 155: if (!strncmp("ON", &pbuf[4], 2)) {
  6043  0255  3029               	movlw	low (STR_14| (0+32768))
  6044  0256  00A0               	movwf	strncmp@s1
  6045  0257  3088               	movlw	high (STR_14| (0+32768))
  6046  0258  00A1               	movwf	strncmp@s1+1
  6047  0259  0859               	movf	_pbuf,w
  6048  025A  3E04               	addlw	4
  6049  025B  00BC               	movwf	??_loop_func
  6050  025C  083C               	movf	??_loop_func,w
  6051  025D  00A2               	movwf	strncmp@s2
  6052  025E  3002               	movlw	2
  6053  025F  00A3               	movwf	strncmp@len
  6054  0260  3000               	movlw	0
  6055  0261  00A4               	movwf	strncmp@len+1
  6056  0262  318B  2375  3180   	fcall	_strncmp
  6057  0265  0020               	movlb	0	; select bank0
  6058  0266  0820               	movf	?_strncmp,w
  6059  0267  0421               	iorwf	?_strncmp+1,w
  6060  0268  1D03               	btfss	3,2
  6061  0269  2A6D               	goto	l3594
  6062                           
  6063                           ;main.c: 156: LATCbits.LATC7 = 0;
  6064  026A  0022               	movlb	2	; select bank2
  6065  026B  138E               	bcf	14,7	;volatile
  6066                           
  6067                           ;main.c: 157: } else if (!strncmp("OFF", &pbuf[4], 3)) {
  6068  026C  2A85               	goto	l3598
  6069  026D                     l3594:	
  6070  026D  30F9               	movlw	low (STR_15| (0+32768))
  6071  026E  0020               	movlb	0	; select bank0
  6072  026F  00A0               	movwf	strncmp@s1
  6073  0270  3087               	movlw	high (STR_15| (0+32768))
  6074  0271  00A1               	movwf	strncmp@s1+1
  6075  0272  0859               	movf	_pbuf,w
  6076  0273  3E04               	addlw	4
  6077  0274  00BC               	movwf	??_loop_func
  6078  0275  083C               	movf	??_loop_func,w
  6079  0276  00A2               	movwf	strncmp@s2
  6080  0277  3003               	movlw	3
  6081  0278  00A3               	movwf	strncmp@len
  6082  0279  3000               	movlw	0
  6083  027A  00A4               	movwf	strncmp@len+1
  6084  027B  318B  2375  3180   	fcall	_strncmp
  6085  027E  0020               	movlb	0	; select bank0
  6086  027F  0820               	movf	?_strncmp,w
  6087  0280  0421               	iorwf	?_strncmp+1,w
  6088  0281  1D03               	btfss	3,2
  6089  0282  2A85               	goto	l3598
  6090                           
  6091                           ;main.c: 158: LATCbits.LATC7 = 1;
  6092  0283  0022               	movlb	2	; select bank2
  6093  0284  178E               	bsf	14,7	;volatile
  6094  0285                     l3598:	
  6095                           
  6096                           ;main.c: 159: }
  6097                           ;main.c: 160: }
  6098                           ;main.c: 161: pbuf = (0);
  6099  0285  0020               	movlb	0	; select bank0
  6100  0286  01D9               	clrf	_pbuf
  6101                           
  6102                           ;main.c: 162: PROTOCOL_Set_Lock(0);
  6103  0287  3000               	movlw	0
  6104  0288  3197  2794         	fcall	_PROTOCOL_Set_Lock
  6105  028A  0008               	return
  6106  028B                     __end_of_loop_func:	
  6107                           
  6108                           	psect	text13
  6109  0B75                     __ptext13:	
  6110 ;; *************** function _strncmp *****************
  6111 ;; Defined at:
  6112 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strncmp.c"
  6113 ;; Parameters:    Size  Location     Type
  6114 ;;  s1              2    0[BANK0 ] PTR const unsigned char 
  6115 ;;		 -> STR_30(4), STR_29(4), STR_27(4), STR_26(4), 
  6116 ;;		 -> STR_23(4), STR_22(4), STR_21(4), STR_19(4), 
  6117 ;;		 -> STR_15(4), STR_14(3), STR_13(4), STR_12(4), 
  6118 ;;		 -> STR_11(4), STR_10(4), STR_9(4), STR_8(4), 
  6119 ;;		 -> STR_7(4), STR_6(4), STR_5(4), STR_4(4), 
  6120 ;;		 -> STR_3(4), STR_2(4), STR_1(4), 
  6121 ;;  s2              1    2[BANK0 ] PTR const unsigned char 
  6122 ;;		 -> buf(48), NULL(0), I2C1_StatusCallback@ext_buf(48), 
  6123 ;;  len             2    3[BANK0 ] unsigned int 
  6124 ;; Auto vars:     Size  Location     Type
  6125 ;;		None
  6126 ;; Return value:  Size  Location     Type
  6127 ;;                  2    0[BANK0 ] int 
  6128 ;; Registers used:
  6129 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  6130 ;; Tracked objects:
  6131 ;;		On entry : 0/0
  6132 ;;		On exit  : 0/0
  6133 ;;		Unchanged: 0/0
  6134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6135 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6137 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6138 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6139 ;;Total ram usage:        7 bytes
  6140 ;; Hardware stack levels used:    1
  6141 ;; Hardware stack levels required when called:    6
  6142 ;; This function calls:
  6143 ;;		Nothing
  6144 ;; This function is called by:
  6145 ;;		_loop_func
  6146 ;;		_PROTOCOL_Loop
  6147 ;; This function uses a non-reentrant model
  6148 ;;
  6149                           
  6150                           
  6151                           ;psect for function _strncmp
  6152  0B75                     _strncmp:	
  6153  0B75                     l3256:	
  6154                           ;incstack = 0
  6155                           ; Regs used in _strncmp: [wreg-fsr1h+status,2+status,0+pclath]
  6156                           
  6157  0B75  3001               	movlw	1
  6158  0B76  0020               	movlb	0	; select bank0
  6159  0B77  02A3               	subwf	strncmp@len,f
  6160  0B78  3000               	movlw	0
  6161  0B79  3BA4               	subwfb	strncmp@len+1,f
  6162  0B7A  0A23               	incf	strncmp@len,w
  6163  0B7B  1903               	btfsc	3,2
  6164  0B7C  0A24               	incf	strncmp@len+1,w
  6165  0B7D  1903               	btfsc	3,2
  6166  0B7E  2BB4               	goto	l3258
  6167  0B7F  0020               	movlb	0	; select bank0
  6168  0B80  0820               	movf	strncmp@s1,w
  6169  0B81  0084               	movwf	4
  6170  0B82  0821               	movf	strncmp@s1+1,w
  6171  0B83  0085               	movwf	5
  6172  0B84  0012               	moviw fsr0++
  6173  0B85  1903               	btfsc	3,2
  6174  0B86  2B93               	goto	l3248
  6175  0B87  0822               	movf	strncmp@s2,w
  6176  0B88  0086               	movwf	6
  6177  0B89  3001               	movlw	1	; select bank2/3
  6178  0B8A  0087               	movwf	7
  6179  0B8B  0820               	movf	strncmp@s1,w
  6180  0B8C  0084               	movwf	4
  6181  0B8D  0821               	movf	strncmp@s1+1,w
  6182  0B8E  0085               	movwf	5
  6183  0B8F  0800               	movf	0,w	;code access
  6184  0B90  0601               	xorwf	1,w
  6185  0B91  1903               	skipnz
  6186  0B92  2BAB               	goto	l3252
  6187  0B93                     l3248:	
  6188  0B93  0822               	movf	strncmp@s2,w
  6189  0B94  0086               	movwf	6
  6190  0B95  3001               	movlw	1	; select bank2/3
  6191  0B96  0087               	movwf	7
  6192  0B97  0801               	movf	1,w
  6193  0B98  00A5               	movwf	??_strncmp
  6194  0B99  01A6               	clrf	??_strncmp+1
  6195  0B9A  09A5               	comf	??_strncmp,f
  6196  0B9B  09A6               	comf	??_strncmp+1,f
  6197  0B9C  0AA5               	incf	??_strncmp,f
  6198  0B9D  1903               	skipnz
  6199  0B9E  0AA6               	incf	??_strncmp+1,f
  6200  0B9F  0820               	movf	strncmp@s1,w
  6201  0BA0  0084               	movwf	4
  6202  0BA1  0821               	movf	strncmp@s1+1,w
  6203  0BA2  0085               	movwf	5
  6204  0BA3  0800               	movf	0,w	;code access
  6205  0BA4  0725               	addwf	??_strncmp,w
  6206  0BA5  00A0               	movwf	?_strncmp
  6207  0BA6  0826               	movf	??_strncmp+1,w
  6208  0BA7  1803               	skipnc
  6209  0BA8  0A26               	incf	??_strncmp+1,w
  6210  0BA9  00A1               	movwf	?_strncmp+1
  6211  0BAA  0008               	return
  6212  0BAB                     l3252:	
  6213  0BAB  3001               	movlw	1
  6214  0BAC  07A0               	addwf	strncmp@s1,f
  6215  0BAD  3000               	movlw	0
  6216  0BAE  3DA1               	addwfc	strncmp@s1+1,f
  6217  0BAF  3001               	movlw	1
  6218  0BB0  00A5               	movwf	??_strncmp
  6219  0BB1  0825               	movf	??_strncmp,w
  6220  0BB2  07A2               	addwf	strncmp@s2,f
  6221  0BB3  2B75               	goto	l3256
  6222  0BB4                     l3258:	
  6223  0BB4  01A0               	clrf	?_strncmp
  6224  0BB5  01A1               	clrf	?_strncmp+1
  6225  0BB6  0008               	return
  6226  0BB7                     __end_of_strncmp:	
  6227                           
  6228                           	psect	text14
  6229  0C3F                     __ptext14:	
  6230 ;; *************** function _lcd_string_2lines *****************
  6231 ;; Defined at:
  6232 ;;		line 70 in file "main.c"
  6233 ;; Parameters:    Size  Location     Type
  6234 ;;		None
  6235 ;; Auto vars:     Size  Location     Type
  6236 ;;  i               1   27[BANK0 ] unsigned char 
  6237 ;; Return value:  Size  Location     Type
  6238 ;;                  1    wreg      void 
  6239 ;; Registers used:
  6240 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6241 ;; Tracked objects:
  6242 ;;		On entry : 0/0
  6243 ;;		On exit  : 0/0
  6244 ;;		Unchanged: 0/0
  6245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6247 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6248 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6249 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6250 ;;Total ram usage:        4 bytes
  6251 ;; Hardware stack levels used:    1
  6252 ;; Hardware stack levels required when called:    9
  6253 ;; This function calls:
  6254 ;;		_i2c2_write
  6255 ;; This function is called by:
  6256 ;;		_loop_func
  6257 ;; This function uses a non-reentrant model
  6258 ;;
  6259                           
  6260                           
  6261                           ;psect for function _lcd_string_2lines
  6262  0C3F                     _lcd_string_2lines:	
  6263                           
  6264                           ;main.c: 71: uint8_t i = 4;
  6265                           
  6266                           ;incstack = 0
  6267                           ; Regs used in _lcd_string_2lines: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6268  0C3F  3004               	movlw	4
  6269  0C40  0020               	movlb	0	; select bank0
  6270  0C41  00B8               	movwf	??_lcd_string_2lines
  6271  0C42  0838               	movf	??_lcd_string_2lines,w
  6272  0C43  00BB               	movwf	lcd_string_2lines@i
  6273  0C44                     l3222:	
  6274                           ;main.c: 72: while (pbuf[i] != '\0') {
  6275                           
  6276  0C44  0020               	movlb	0	; select bank0
  6277  0C45  083B               	movf	lcd_string_2lines@i,w
  6278  0C46  0759               	addwf	_pbuf,w
  6279  0C47  00B8               	movwf	??_lcd_string_2lines
  6280  0C48  0838               	movf	??_lcd_string_2lines,w
  6281  0C49  0086               	movwf	6
  6282  0C4A  3001               	movlw	1	; select bank2/3
  6283  0C4B  0087               	movwf	7
  6284  0C4C  0801               	movf	1,w
  6285  0C4D  1903               	btfsc	3,2
  6286  0C4E  0008               	return
  6287                           
  6288                           ;main.c: 73: i2c2_write(0x3e, 0x40, pbuf[i++]); _delay((unsigned long)((1)*(4000000/4000
      +                          .0)));;
  6289  0C4F  303E               	movlw	62
  6290  0C50  00AE               	movwf	i2c2_write@dev_addr
  6291  0C51  3000               	movlw	0
  6292  0C52  00AF               	movwf	i2c2_write@dev_addr+1
  6293  0C53  3040               	movlw	64
  6294  0C54  00B8               	movwf	??_lcd_string_2lines
  6295  0C55  0838               	movf	??_lcd_string_2lines,w
  6296  0C56  00B0               	movwf	i2c2_write@reg_addr
  6297  0C57  083B               	movf	lcd_string_2lines@i,w
  6298  0C58  0759               	addwf	_pbuf,w
  6299  0C59  00B9               	movwf	??_lcd_string_2lines+1
  6300  0C5A  0839               	movf	??_lcd_string_2lines+1,w
  6301  0C5B  0086               	movwf	6
  6302  0C5C  3001               	movlw	1	; select bank2/3
  6303  0C5D  0087               	movwf	7
  6304  0C5E  0801               	movf	1,w
  6305  0C5F  00BA               	movwf	??_lcd_string_2lines+2
  6306  0C60  083A               	movf	??_lcd_string_2lines+2,w
  6307  0C61  00B1               	movwf	i2c2_write@data
  6308  0C62  318A  2232  318C   	fcall	_i2c2_write
  6309  0C65  3001               	movlw	1
  6310  0C66  0020               	movlb	0	; select bank0
  6311  0C67  00B8               	movwf	??_lcd_string_2lines
  6312  0C68  0838               	movf	??_lcd_string_2lines,w
  6313  0C69  07BB               	addwf	lcd_string_2lines@i,f
  6314  0C6A  30C8               	movlw	200
  6315  0C6B                     u5237:	
  6316  0C6B  3200               	nop2
  6317  0C6C  0B89               	decfsz	9,f
  6318  0C6D  2C6B               	goto	u5237
  6319                           
  6320                           ;main.c: 74: if (i == 20) i2c2_write(0x3e, 0x00, 0xc0); _delay((unsigned long)((1)*(4000
      +                          000/4000.0)));;
  6321  0C6E  3014               	movlw	20
  6322  0C6F  0020               	movlb	0	; select bank0
  6323  0C70  063B               	xorwf	lcd_string_2lines@i,w
  6324  0C71  1D03               	btfss	3,2
  6325  0C72  2C7F               	goto	l3220
  6326  0C73  303E               	movlw	62
  6327  0C74  00AE               	movwf	i2c2_write@dev_addr
  6328  0C75  3000               	movlw	0
  6329  0C76  00AF               	movwf	i2c2_write@dev_addr+1
  6330  0C77  01B0               	clrf	i2c2_write@reg_addr
  6331  0C78  30C0               	movlw	192
  6332  0C79  00B8               	movwf	??_lcd_string_2lines
  6333  0C7A  0838               	movf	??_lcd_string_2lines,w
  6334  0C7B  00B1               	movwf	i2c2_write@data
  6335  0C7C  318A  2232  318C   	fcall	_i2c2_write
  6336  0C7F                     l3220:	
  6337  0C7F  30C8               	movlw	200
  6338  0C80                     u5247:	
  6339  0C80  3200               	nop2
  6340  0C81  0B89               	decfsz	9,f
  6341  0C82  2C80               	goto	u5247
  6342  0C83  2C44               	goto	l3222
  6343  0C84                     __end_of_lcd_string_2lines:	
  6344                           
  6345                           	psect	text15
  6346  0AD4                     __ptext15:	
  6347 ;; *************** function _lcd_string *****************
  6348 ;; Defined at:
  6349 ;;		line 58 in file "main.c"
  6350 ;; Parameters:    Size  Location     Type
  6351 ;;		None
  6352 ;; Auto vars:     Size  Location     Type
  6353 ;;  i               1   27[BANK0 ] unsigned char 
  6354 ;; Return value:  Size  Location     Type
  6355 ;;                  1    wreg      void 
  6356 ;; Registers used:
  6357 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6358 ;; Tracked objects:
  6359 ;;		On entry : 0/0
  6360 ;;		On exit  : 0/0
  6361 ;;		Unchanged: 0/0
  6362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6364 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6365 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6366 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6367 ;;Total ram usage:        4 bytes
  6368 ;; Hardware stack levels used:    1
  6369 ;; Hardware stack levels required when called:    9
  6370 ;; This function calls:
  6371 ;;		_i2c2_write
  6372 ;; This function is called by:
  6373 ;;		_loop_func
  6374 ;; This function uses a non-reentrant model
  6375 ;;
  6376                           
  6377                           
  6378                           ;psect for function _lcd_string
  6379  0AD4                     _lcd_string:	
  6380                           
  6381                           ;main.c: 59: uint8_t i = 4;
  6382                           
  6383                           ;incstack = 0
  6384                           ; Regs used in _lcd_string: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6385  0AD4  3004               	movlw	4
  6386  0AD5  0020               	movlb	0	; select bank0
  6387  0AD6  00B8               	movwf	??_lcd_string
  6388  0AD7  0838               	movf	??_lcd_string,w
  6389  0AD8  00BB               	movwf	lcd_string@i
  6390  0AD9                     l3206:	
  6391                           ;main.c: 60: while (pbuf[i] != '\0') {
  6392                           
  6393  0AD9  0020               	movlb	0	; select bank0
  6394  0ADA  083B               	movf	lcd_string@i,w
  6395  0ADB  0759               	addwf	_pbuf,w
  6396  0ADC  00B8               	movwf	??_lcd_string
  6397  0ADD  0838               	movf	??_lcd_string,w
  6398  0ADE  0086               	movwf	6
  6399  0ADF  3001               	movlw	1	; select bank2/3
  6400  0AE0  0087               	movwf	7
  6401  0AE1  0801               	movf	1,w
  6402  0AE2  1903               	btfsc	3,2
  6403  0AE3  0008               	return
  6404                           
  6405                           ;main.c: 61: i2c2_write(0x3e, 0x40, pbuf[i++]); _delay((unsigned long)((1)*(4000000/4000
      +                          .0)));;
  6406  0AE4  303E               	movlw	62
  6407  0AE5  00AE               	movwf	i2c2_write@dev_addr
  6408  0AE6  3000               	movlw	0
  6409  0AE7  00AF               	movwf	i2c2_write@dev_addr+1
  6410  0AE8  3040               	movlw	64
  6411  0AE9  00B8               	movwf	??_lcd_string
  6412  0AEA  0838               	movf	??_lcd_string,w
  6413  0AEB  00B0               	movwf	i2c2_write@reg_addr
  6414  0AEC  083B               	movf	lcd_string@i,w
  6415  0AED  0759               	addwf	_pbuf,w
  6416  0AEE  00B9               	movwf	??_lcd_string+1
  6417  0AEF  0839               	movf	??_lcd_string+1,w
  6418  0AF0  0086               	movwf	6
  6419  0AF1  3001               	movlw	1	; select bank2/3
  6420  0AF2  0087               	movwf	7
  6421  0AF3  0801               	movf	1,w
  6422  0AF4  00BA               	movwf	??_lcd_string+2
  6423  0AF5  083A               	movf	??_lcd_string+2,w
  6424  0AF6  00B1               	movwf	i2c2_write@data
  6425  0AF7  318A  2232  318A   	fcall	_i2c2_write
  6426  0AFA  3001               	movlw	1
  6427  0AFB  0020               	movlb	0	; select bank0
  6428  0AFC  00B8               	movwf	??_lcd_string
  6429  0AFD  0838               	movf	??_lcd_string,w
  6430  0AFE  07BB               	addwf	lcd_string@i,f
  6431  0AFF  30C8               	movlw	200
  6432  0B00                     u5257:	
  6433  0B00  3200               	nop2
  6434  0B01  0B89               	decfsz	9,f
  6435  0B02  2B00               	goto	u5257
  6436  0B03  2AD9               	goto	l3206
  6437  0B04                     __end_of_lcd_string:	
  6438                           
  6439                           	psect	text16
  6440  0D97                     __ptext16:	
  6441 ;; *************** function _lcd_init *****************
  6442 ;; Defined at:
  6443 ;;		line 39 in file "main.c"
  6444 ;; Parameters:    Size  Location     Type
  6445 ;;		None
  6446 ;; Auto vars:     Size  Location     Type
  6447 ;;		None
  6448 ;; Return value:  Size  Location     Type
  6449 ;;                  1    wreg      void 
  6450 ;; Registers used:
  6451 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6452 ;; Tracked objects:
  6453 ;;		On entry : 0/0
  6454 ;;		On exit  : 0/0
  6455 ;;		Unchanged: 0/0
  6456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6458 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6459 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6460 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6461 ;;Total ram usage:        2 bytes
  6462 ;; Hardware stack levels used:    1
  6463 ;; Hardware stack levels required when called:    9
  6464 ;; This function calls:
  6465 ;;		_i2c2_write
  6466 ;; This function is called by:
  6467 ;;		_loop_func
  6468 ;;		_main
  6469 ;; This function uses a non-reentrant model
  6470 ;;
  6471                           
  6472                           
  6473                           ;psect for function _lcd_init
  6474  0D97                     _lcd_init:	
  6475                           
  6476                           ;main.c: 40: _delay((unsigned long)((50)*(4000000/4000.0)));
  6477                           
  6478                           ;incstack = 0
  6479                           ; Regs used in _lcd_init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6480  0D97  3041               	movlw	65
  6481  0D98  0020               	movlb	0	; select bank0
  6482  0D99  00B8               	movwf	??_lcd_init
  6483  0D9A  30EE               	movlw	238
  6484  0D9B                     u5267:	
  6485  0D9B  0B89               	decfsz	9,f
  6486  0D9C  2D9B               	goto	u5267
  6487  0D9D  0BB8               	decfsz	??_lcd_init,f
  6488  0D9E  2D9B               	goto	u5267
  6489  0D9F  0000               	nop
  6490                           
  6491                           ;main.c: 41: i2c2_write(0x3e, 0x00, 0x38); _delay((unsigned long)((1)*(4000000/4000.0)))
      +                          ;;
  6492  0DA0  303E               	movlw	62
  6493  0DA1  0020               	movlb	0	; select bank0
  6494  0DA2  00AE               	movwf	i2c2_write@dev_addr
  6495  0DA3  3000               	movlw	0
  6496  0DA4  00AF               	movwf	i2c2_write@dev_addr+1
  6497  0DA5  01B0               	clrf	i2c2_write@reg_addr
  6498  0DA6  3038               	movlw	56
  6499  0DA7  00B8               	movwf	??_lcd_init
  6500  0DA8  0838               	movf	??_lcd_init,w
  6501  0DA9  00B1               	movwf	i2c2_write@data
  6502  0DAA  318A  2232  318D   	fcall	_i2c2_write
  6503  0DAD  30C8               	movlw	200
  6504  0DAE                     u5277:	
  6505  0DAE  3200               	nop2
  6506  0DAF  0B89               	decfsz	9,f
  6507  0DB0  2DAE               	goto	u5277
  6508                           
  6509                           ;main.c: 42: i2c2_write(0x3e, 0x00, 0x39); _delay((unsigned long)((1)*(4000000/4000.0)))
      +                          ;;
  6510  0DB1  303E               	movlw	62
  6511  0DB2  0020               	movlb	0	; select bank0
  6512  0DB3  00AE               	movwf	i2c2_write@dev_addr
  6513  0DB4  3000               	movlw	0
  6514  0DB5  00AF               	movwf	i2c2_write@dev_addr+1
  6515  0DB6  01B0               	clrf	i2c2_write@reg_addr
  6516  0DB7  3039               	movlw	57
  6517  0DB8  00B8               	movwf	??_lcd_init
  6518  0DB9  0838               	movf	??_lcd_init,w
  6519  0DBA  00B1               	movwf	i2c2_write@data
  6520  0DBB  318A  2232  318D   	fcall	_i2c2_write
  6521  0DBE  30C8               	movlw	200
  6522  0DBF                     u5287:	
  6523  0DBF  3200               	nop2
  6524  0DC0  0B89               	decfsz	9,f
  6525  0DC1  2DBF               	goto	u5287
  6526                           
  6527                           ;main.c: 43: i2c2_write(0x3e, 0x00, 0x14); _delay((unsigned long)((1)*(4000000/4000.0)))
      +                          ;;
  6528  0DC2  303E               	movlw	62
  6529  0DC3  0020               	movlb	0	; select bank0
  6530  0DC4  00AE               	movwf	i2c2_write@dev_addr
  6531  0DC5  3000               	movlw	0
  6532  0DC6  00AF               	movwf	i2c2_write@dev_addr+1
  6533  0DC7  01B0               	clrf	i2c2_write@reg_addr
  6534  0DC8  3014               	movlw	20
  6535  0DC9  00B8               	movwf	??_lcd_init
  6536  0DCA  0838               	movf	??_lcd_init,w
  6537  0DCB  00B1               	movwf	i2c2_write@data
  6538  0DCC  318A  2232  318D   	fcall	_i2c2_write
  6539  0DCF  30C8               	movlw	200
  6540  0DD0                     u5297:	
  6541  0DD0  3200               	nop2
  6542  0DD1  0B89               	decfsz	9,f
  6543  0DD2  2DD0               	goto	u5297
  6544                           
  6545                           ;main.c: 44: i2c2_write(0x3e, 0x00, 0x73); _delay((unsigned long)((1)*(4000000/4000.0)))
      +                          ;;
  6546  0DD3  303E               	movlw	62
  6547  0DD4  0020               	movlb	0	; select bank0
  6548  0DD5  00AE               	movwf	i2c2_write@dev_addr
  6549  0DD6  3000               	movlw	0
  6550  0DD7  00AF               	movwf	i2c2_write@dev_addr+1
  6551  0DD8  01B0               	clrf	i2c2_write@reg_addr
  6552  0DD9  3073               	movlw	115
  6553  0DDA  00B8               	movwf	??_lcd_init
  6554  0DDB  0838               	movf	??_lcd_init,w
  6555  0DDC  00B1               	movwf	i2c2_write@data
  6556  0DDD  318A  2232  318D   	fcall	_i2c2_write
  6557  0DE0  30C8               	movlw	200
  6558  0DE1                     u5307:	
  6559  0DE1  3200               	nop2
  6560  0DE2  0B89               	decfsz	9,f
  6561  0DE3  2DE1               	goto	u5307
  6562                           
  6563                           ;main.c: 45: i2c2_write(0x3e, 0x00, 0x52); _delay((unsigned long)((1)*(4000000/4000.0)))
      +                          ;;
  6564  0DE4  303E               	movlw	62
  6565  0DE5  0020               	movlb	0	; select bank0
  6566  0DE6  00AE               	movwf	i2c2_write@dev_addr
  6567  0DE7  3000               	movlw	0
  6568  0DE8  00AF               	movwf	i2c2_write@dev_addr+1
  6569  0DE9  01B0               	clrf	i2c2_write@reg_addr
  6570  0DEA  3052               	movlw	82
  6571  0DEB  00B8               	movwf	??_lcd_init
  6572  0DEC  0838               	movf	??_lcd_init,w
  6573  0DED  00B1               	movwf	i2c2_write@data
  6574  0DEE  318A  2232  318D   	fcall	_i2c2_write
  6575  0DF1  30C8               	movlw	200
  6576  0DF2                     u5317:	
  6577  0DF2  3200               	nop2
  6578  0DF3  0B89               	decfsz	9,f
  6579  0DF4  2DF2               	goto	u5317
  6580                           
  6581                           ;main.c: 46: i2c2_write(0x3e, 0x00, 0x6c); _delay((unsigned long)((1)*(4000000/4000.0)))
      +                          ;;
  6582  0DF5  303E               	movlw	62
  6583  0DF6  0020               	movlb	0	; select bank0
  6584  0DF7  00AE               	movwf	i2c2_write@dev_addr
  6585  0DF8  3000               	movlw	0
  6586  0DF9  00AF               	movwf	i2c2_write@dev_addr+1
  6587  0DFA  01B0               	clrf	i2c2_write@reg_addr
  6588  0DFB  306C               	movlw	108
  6589  0DFC  00B8               	movwf	??_lcd_init
  6590  0DFD  0838               	movf	??_lcd_init,w
  6591  0DFE  00B1               	movwf	i2c2_write@data
  6592  0DFF  318A  2232  318D   	fcall	_i2c2_write
  6593  0E02  30C8               	movlw	200
  6594  0E03                     u5327:	
  6595  0E03  3200               	nop2
  6596  0E04  0B89               	decfsz	9,f
  6597  0E05  2E03               	goto	u5327
  6598                           
  6599                           ;main.c: 47: _delay((unsigned long)((250)*(4000000/4000.0)));
  6600  0E06  3002               	movlw	2
  6601  0E07  0020               	movlb	0	; select bank0
  6602  0E08  00B9               	movwf	??_lcd_init+1
  6603  0E09  3045               	movlw	69
  6604  0E0A  00B8               	movwf	??_lcd_init
  6605  0E0B  30A9               	movlw	169
  6606  0E0C                     u5337:	
  6607  0E0C  0B89               	decfsz	9,f
  6608  0E0D  2E0C               	goto	u5337
  6609  0E0E  0BB8               	decfsz	??_lcd_init,f
  6610  0E0F  2E0C               	goto	u5337
  6611  0E10  0BB9               	decfsz	??_lcd_init+1,f
  6612  0E11  2E0C               	goto	u5337
  6613  0E12  3200               	nop2
  6614                           
  6615                           ;main.c: 48: i2c2_write(0x3e, 0x00, 0x38); _delay((unsigned long)((1)*(4000000/4000.0)))
      +                          ;;
  6616  0E13  303E               	movlw	62
  6617  0E14  0020               	movlb	0	; select bank0
  6618  0E15  00AE               	movwf	i2c2_write@dev_addr
  6619  0E16  3000               	movlw	0
  6620  0E17  00AF               	movwf	i2c2_write@dev_addr+1
  6621  0E18  01B0               	clrf	i2c2_write@reg_addr
  6622  0E19  3038               	movlw	56
  6623  0E1A  00B8               	movwf	??_lcd_init
  6624  0E1B  0838               	movf	??_lcd_init,w
  6625  0E1C  00B1               	movwf	i2c2_write@data
  6626  0E1D  318A  2232  318D   	fcall	_i2c2_write
  6627  0E20  30C8               	movlw	200
  6628  0E21                     u5347:	
  6629  0E21  3200               	nop2
  6630  0E22  0B89               	decfsz	9,f
  6631  0E23  2E21               	goto	u5347
  6632                           
  6633                           ;main.c: 49: i2c2_write(0x3e, 0x00, 0x01); _delay((unsigned long)((1)*(4000000/4000.0)))
      +                          ;;
  6634  0E24  303E               	movlw	62
  6635  0E25  0020               	movlb	0	; select bank0
  6636  0E26  00AE               	movwf	i2c2_write@dev_addr
  6637  0E27  3000               	movlw	0
  6638  0E28  00AF               	movwf	i2c2_write@dev_addr+1
  6639  0E29  01B0               	clrf	i2c2_write@reg_addr
  6640  0E2A  01B1               	clrf	i2c2_write@data
  6641  0E2B  0AB1               	incf	i2c2_write@data,f
  6642  0E2C  318A  2232  318D   	fcall	_i2c2_write
  6643  0E2F  30C8               	movlw	200
  6644  0E30                     u5357:	
  6645  0E30  3200               	nop2
  6646  0E31  0B89               	decfsz	9,f
  6647  0E32  2E30               	goto	u5357
  6648                           
  6649                           ;main.c: 50: i2c2_write(0x3e, 0x00, 0x0c); _delay((unsigned long)((1)*(4000000/4000.0)))
      +                          ;;
  6650  0E33  303E               	movlw	62
  6651  0E34  0020               	movlb	0	; select bank0
  6652  0E35  00AE               	movwf	i2c2_write@dev_addr
  6653  0E36  3000               	movlw	0
  6654  0E37  00AF               	movwf	i2c2_write@dev_addr+1
  6655  0E38  01B0               	clrf	i2c2_write@reg_addr
  6656  0E39  300C               	movlw	12
  6657  0E3A  00B8               	movwf	??_lcd_init
  6658  0E3B  0838               	movf	??_lcd_init,w
  6659  0E3C  00B1               	movwf	i2c2_write@data
  6660  0E3D  318A  2232  318D   	fcall	_i2c2_write
  6661  0E40  30C8               	movlw	200
  6662  0E41                     u5367:	
  6663  0E41  3200               	nop2
  6664  0E42  0B89               	decfsz	9,f
  6665  0E43  2E41               	goto	u5367
  6666                           
  6667                           ;main.c: 51: _delay((unsigned long)((50)*(4000000/4000.0)));
  6668  0E44  3041               	movlw	65
  6669  0E45  0020               	movlb	0	; select bank0
  6670  0E46  00B8               	movwf	??_lcd_init
  6671  0E47  30EE               	movlw	238
  6672  0E48                     u5377:	
  6673  0E48  0B89               	decfsz	9,f
  6674  0E49  2E48               	goto	u5377
  6675  0E4A  0BB8               	decfsz	??_lcd_init,f
  6676  0E4B  2E48               	goto	u5377
  6677  0E4C  0000               	nop
  6678  0E4D  0008               	return
  6679  0E4E                     __end_of_lcd_init:	
  6680                           
  6681                           	psect	text17
  6682  0C84                     __ptext17:	
  6683 ;; *************** function _lcd_contrast *****************
  6684 ;; Defined at:
  6685 ;;		line 84 in file "main.c"
  6686 ;; Parameters:    Size  Location     Type
  6687 ;;  contrast        1    wreg     unsigned char 
  6688 ;; Auto vars:     Size  Location     Type
  6689 ;;  contrast        1   26[BANK0 ] unsigned char 
  6690 ;; Return value:  Size  Location     Type
  6691 ;;                  1    wreg      void 
  6692 ;; Registers used:
  6693 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6694 ;; Tracked objects:
  6695 ;;		On entry : 0/0
  6696 ;;		On exit  : 0/0
  6697 ;;		Unchanged: 0/0
  6698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6700 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6701 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6702 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6703 ;;Total ram usage:        3 bytes
  6704 ;; Hardware stack levels used:    1
  6705 ;; Hardware stack levels required when called:    9
  6706 ;; This function calls:
  6707 ;;		_i2c2_write
  6708 ;; This function is called by:
  6709 ;;		_loop_func
  6710 ;; This function uses a non-reentrant model
  6711 ;;
  6712                           
  6713                           
  6714                           ;psect for function _lcd_contrast
  6715  0C84                     _lcd_contrast:	
  6716                           
  6717                           ;incstack = 0
  6718                           ; Regs used in _lcd_contrast: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6719                           ;lcd_contrast@contrast stored from wreg
  6720  0C84  0020               	movlb	0	; select bank0
  6721  0C85  00BA               	movwf	lcd_contrast@contrast
  6722                           
  6723                           ;main.c: 85: i2c2_write(0x3e, 0x00, 0x39); _delay((unsigned long)((1)*(4000000/4000.0)))
      +                          ;;
  6724  0C86  303E               	movlw	62
  6725  0C87  00AE               	movwf	i2c2_write@dev_addr
  6726  0C88  3000               	movlw	0
  6727  0C89  00AF               	movwf	i2c2_write@dev_addr+1
  6728  0C8A  01B0               	clrf	i2c2_write@reg_addr
  6729  0C8B  3039               	movlw	57
  6730  0C8C  00B8               	movwf	??_lcd_contrast
  6731  0C8D  0838               	movf	??_lcd_contrast,w
  6732  0C8E  00B1               	movwf	i2c2_write@data
  6733  0C8F  318A  2232  318C   	fcall	_i2c2_write
  6734  0C92  30C8               	movlw	200
  6735  0C93                     u5387:	
  6736  0C93  3200               	nop2
  6737  0C94  0B89               	decfsz	9,f
  6738  0C95  2C93               	goto	u5387
  6739                           
  6740                           ;main.c: 86: i2c2_write(0x3e, 0x00, 0x70 | (contrast & 0b00001111)); _delay((unsigned lo
      +                          ng)((1)*(4000000/4000.0)));;
  6741  0C96  303E               	movlw	62
  6742  0C97  0020               	movlb	0	; select bank0
  6743  0C98  00AE               	movwf	i2c2_write@dev_addr
  6744  0C99  3000               	movlw	0
  6745  0C9A  00AF               	movwf	i2c2_write@dev_addr+1
  6746  0C9B  01B0               	clrf	i2c2_write@reg_addr
  6747  0C9C  083A               	movf	lcd_contrast@contrast,w
  6748  0C9D  390F               	andlw	15
  6749  0C9E  3870               	iorlw	112
  6750  0C9F  00B8               	movwf	??_lcd_contrast
  6751  0CA0  0838               	movf	??_lcd_contrast,w
  6752  0CA1  00B1               	movwf	i2c2_write@data
  6753  0CA2  318A  2232  318C   	fcall	_i2c2_write
  6754  0CA5  30C8               	movlw	200
  6755  0CA6                     u5397:	
  6756  0CA6  3200               	nop2
  6757  0CA7  0B89               	decfsz	9,f
  6758  0CA8  2CA6               	goto	u5397
  6759                           
  6760                           ;main.c: 87: i2c2_write(0x3e, 0x00, 0x50 | ((contrast >> 4) & 0b00000111)); _delay((unsi
      +                          gned long)((1)*(4000000/4000.0)));;
  6761  0CA9  303E               	movlw	62
  6762  0CAA  0020               	movlb	0	; select bank0
  6763  0CAB  00AE               	movwf	i2c2_write@dev_addr
  6764  0CAC  3000               	movlw	0
  6765  0CAD  00AF               	movwf	i2c2_write@dev_addr+1
  6766  0CAE  01B0               	clrf	i2c2_write@reg_addr
  6767  0CAF  083A               	movf	lcd_contrast@contrast,w
  6768  0CB0  00B8               	movwf	??_lcd_contrast
  6769  0CB1  3004               	movlw	4
  6770  0CB2                     u1935:	
  6771  0CB2  36B8               	lsrf	??_lcd_contrast,f
  6772  0CB3  0B89               	decfsz	9,f
  6773  0CB4  2CB2               	goto	u1935
  6774  0CB5  0838               	movf	??_lcd_contrast,w
  6775  0CB6  3907               	andlw	7
  6776  0CB7  3850               	iorlw	80
  6777  0CB8  00B9               	movwf	??_lcd_contrast+1
  6778  0CB9  0839               	movf	??_lcd_contrast+1,w
  6779  0CBA  00B1               	movwf	i2c2_write@data
  6780  0CBB  318A  2232  318C   	fcall	_i2c2_write
  6781  0CBE  30C8               	movlw	200
  6782  0CBF                     u5407:	
  6783  0CBF  3200               	nop2
  6784  0CC0  0B89               	decfsz	9,f
  6785  0CC1  2CBF               	goto	u5407
  6786                           
  6787                           ;main.c: 88: i2c2_write(0x3e, 0x00, 0x38); _delay((unsigned long)((1)*(4000000/4000.0)))
      +                          ;;
  6788  0CC2  303E               	movlw	62
  6789  0CC3  0020               	movlb	0	; select bank0
  6790  0CC4  00AE               	movwf	i2c2_write@dev_addr
  6791  0CC5  3000               	movlw	0
  6792  0CC6  00AF               	movwf	i2c2_write@dev_addr+1
  6793  0CC7  01B0               	clrf	i2c2_write@reg_addr
  6794  0CC8  3038               	movlw	56
  6795  0CC9  00B8               	movwf	??_lcd_contrast
  6796  0CCA  0838               	movf	??_lcd_contrast,w
  6797  0CCB  00B1               	movwf	i2c2_write@data
  6798  0CCC  318A  2232  318C   	fcall	_i2c2_write
  6799  0CCF  30C8               	movlw	200
  6800  0CD0                     u5417:	
  6801  0CD0  3200               	nop2
  6802  0CD1  0B89               	decfsz	9,f
  6803  0CD2  2CD0               	goto	u5417
  6804  0CD3  0008               	return
  6805  0CD4                     __end_of_lcd_contrast:	
  6806                           
  6807                           	psect	text18
  6808  087E                     __ptext18:	
  6809 ;; *************** function _lcd_clear *****************
  6810 ;; Defined at:
  6811 ;;		line 54 in file "main.c"
  6812 ;; Parameters:    Size  Location     Type
  6813 ;;		None
  6814 ;; Auto vars:     Size  Location     Type
  6815 ;;		None
  6816 ;; Return value:  Size  Location     Type
  6817 ;;                  1    wreg      void 
  6818 ;; Registers used:
  6819 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6820 ;; Tracked objects:
  6821 ;;		On entry : 0/0
  6822 ;;		On exit  : 0/0
  6823 ;;		Unchanged: 0/0
  6824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6825 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6826 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6827 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6828 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6829 ;;Total ram usage:        0 bytes
  6830 ;; Hardware stack levels used:    1
  6831 ;; Hardware stack levels required when called:    9
  6832 ;; This function calls:
  6833 ;;		_i2c2_write
  6834 ;; This function is called by:
  6835 ;;		_loop_func
  6836 ;; This function uses a non-reentrant model
  6837 ;;
  6838                           
  6839                           
  6840                           ;psect for function _lcd_clear
  6841  087E                     _lcd_clear:	
  6842                           
  6843                           ;main.c: 55: i2c2_write(0x3e, 0x00, 0x01); _delay((unsigned long)((1)*(4000000/4000.0)))
      +                          ;;
  6844                           
  6845                           ;incstack = 0
  6846                           ; Regs used in _lcd_clear: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6847  087E  303E               	movlw	62
  6848  087F  0020               	movlb	0	; select bank0
  6849  0880  00AE               	movwf	i2c2_write@dev_addr
  6850  0881  3000               	movlw	0
  6851  0882  00AF               	movwf	i2c2_write@dev_addr+1
  6852  0883  01B0               	clrf	i2c2_write@reg_addr
  6853  0884  01B1               	clrf	i2c2_write@data
  6854  0885  0AB1               	incf	i2c2_write@data,f
  6855  0886  318A  2232  3188   	fcall	_i2c2_write
  6856  0889  30C8               	movlw	200
  6857  088A                     u5427:	
  6858  088A  3200               	nop2
  6859  088B  0B89               	decfsz	9,f
  6860  088C  288A               	goto	u5427
  6861  088D  0008               	return
  6862  088E                     __end_of_lcd_clear:	
  6863                           
  6864                           	psect	text19
  6865  0A32                     __ptext19:	
  6866 ;; *************** function _i2c2_write *****************
  6867 ;; Defined at:
  6868 ;;		line 13 in file "i2c2_util.c"
  6869 ;; Parameters:    Size  Location     Type
  6870 ;;  dev_addr        2   14[BANK0 ] unsigned int 
  6871 ;;  reg_addr        1   16[BANK0 ] unsigned char 
  6872 ;;  data            1   17[BANK0 ] unsigned char 
  6873 ;; Auto vars:     Size  Location     Type
  6874 ;;  buf             2   21[BANK0 ] unsigned char [2]
  6875 ;;  status          1   23[BANK0 ] enum E2979
  6876 ;;  write_status    1   20[BANK0 ] unsigned char 
  6877 ;; Return value:  Size  Location     Type
  6878 ;;                  1    wreg      unsigned char 
  6879 ;; Registers used:
  6880 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6881 ;; Tracked objects:
  6882 ;;		On entry : 0/0
  6883 ;;		On exit  : 0/0
  6884 ;;		Unchanged: 0/0
  6885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6886 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6887 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6888 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6889 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6890 ;;Total ram usage:       10 bytes
  6891 ;; Hardware stack levels used:    1
  6892 ;; Hardware stack levels required when called:    8
  6893 ;; This function calls:
  6894 ;;		_I2C2_MasterWrite
  6895 ;; This function is called by:
  6896 ;;		_lcd_init
  6897 ;;		_lcd_clear
  6898 ;;		_lcd_string
  6899 ;;		_lcd_string_2lines
  6900 ;;		_lcd_contrast
  6901 ;;		_lcd_test
  6902 ;;		_loop_func
  6903 ;;		_lcd_arao
  6904 ;; This function uses a non-reentrant model
  6905 ;;
  6906                           
  6907                           
  6908                           ;psect for function _i2c2_write
  6909  0A32                     _i2c2_write:	
  6910                           
  6911                           ;i2c2_util.c: 15: uint8_t buf[2];
  6912                           ;i2c2_util.c: 16: I2C2_MESSAGE_STATUS status;
  6913                           ;i2c2_util.c: 17: uint8_t write_status;
  6914                           ;i2c2_util.c: 18: buf[0] = reg_addr;
  6915                           
  6916                           ;incstack = 0
  6917                           ; Regs used in _i2c2_write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6918  0A32  0020               	movlb	0	; select bank0
  6919  0A33  0830               	movf	i2c2_write@reg_addr,w
  6920  0A34  00B2               	movwf	??_i2c2_write
  6921  0A35  0832               	movf	??_i2c2_write,w
  6922  0A36  00B5               	movwf	i2c2_write@buf
  6923                           
  6924                           ;i2c2_util.c: 19: buf[1] = data;
  6925  0A37  0831               	movf	i2c2_write@data,w
  6926  0A38  00B2               	movwf	??_i2c2_write
  6927  0A39  0832               	movf	??_i2c2_write,w
  6928  0A3A  00B6               	movwf	i2c2_write@buf+1
  6929                           
  6930                           ;i2c2_util.c: 20: I2C2_MasterWrite(buf, 2, dev_addr, &status);
  6931  0A3B  3002               	movlw	2
  6932  0A3C  00B2               	movwf	??_i2c2_write
  6933  0A3D  0832               	movf	??_i2c2_write,w
  6934  0A3E  00A7               	movwf	I2C2_MasterWrite@length
  6935  0A3F  082F               	movf	i2c2_write@dev_addr+1,w
  6936  0A40  00A9               	movwf	I2C2_MasterWrite@address+1
  6937  0A41  082E               	movf	i2c2_write@dev_addr,w
  6938  0A42  00A8               	movwf	I2C2_MasterWrite@address
  6939  0A43  3037               	movlw	(low (i2c2_write@status| 0))& (0+255)
  6940  0A44  00B3               	movwf	??_i2c2_write+1
  6941  0A45  0833               	movf	??_i2c2_write+1,w
  6942  0A46  00AA               	movwf	I2C2_MasterWrite@pflag
  6943  0A47  3035               	movlw	(low (i2c2_write@buf| 0))& (0+255)
  6944  0A48  318A  227F  318A   	fcall	_I2C2_MasterWrite
  6945  0A4B                     l3040:	
  6946                           ;i2c2_util.c: 21: while (status == I2C2_MESSAGE_PENDING);
  6947                           
  6948  0A4B  3002               	movlw	2
  6949  0A4C  0020               	movlb	0	; select bank0
  6950  0A4D  0637               	xorwf	i2c2_write@status,w
  6951  0A4E  1903               	btfsc	3,2
  6952  0A4F  2A4B               	goto	l3040
  6953                           
  6954                           ;i2c2_util.c: 22: if (status == I2C2_MESSAGE_COMPLETE) {
  6955  0A50  0837               	movf	i2c2_write@status,w
  6956  0A51  1D03               	btfss	3,2
  6957  0A52  2A55               	goto	l1014
  6958                           
  6959                           ;i2c2_util.c: 23: write_status = 0;
  6960  0A53  01B4               	clrf	i2c2_write@write_status
  6961                           
  6962                           ;i2c2_util.c: 24: } else {
  6963  0A54  0008               	return
  6964  0A55                     l1014:	
  6965                           
  6966                           ;i2c2_util.c: 25: write_status = 1;
  6967  0A55  01B4               	clrf	i2c2_write@write_status
  6968  0A56  0AB4               	incf	i2c2_write@write_status,f
  6969  0A57  0008               	return
  6970  0A58                     __end_of_i2c2_write:	
  6971                           ;i2c2_util.c: 26: }
  6972                           ;i2c2_util.c: 27: return write_status;
  6973                           ;	Return value of _i2c2_write is never used
  6974                           
  6975                           
  6976                           	psect	text20
  6977  0A7F                     __ptext20:	
  6978 ;; *************** function _I2C2_MasterWrite *****************
  6979 ;; Defined at:
  6980 ;;		line 598 in file "mcc_generated_files/i2c2.c"
  6981 ;; Parameters:    Size  Location     Type
  6982 ;;  pdata           1    wreg     PTR unsigned char 
  6983 ;;		 -> i2c2_write_no_data@buf(1), i2c2_read@reg(1), i2c2_write@buf(2), 
  6984 ;;  length          1    7[BANK0 ] unsigned char 
  6985 ;;  address         2    8[BANK0 ] unsigned int 
  6986 ;;  pflag           1   10[BANK0 ] PTR enum E2972
  6987 ;;		 -> i2c2_write_no_data@status(1), i2c2_read@status(1), i2c2_write@status(1), 
  6988 ;; Auto vars:     Size  Location     Type
  6989 ;;  pdata           1   13[BANK0 ] PTR unsigned char 
  6990 ;;		 -> i2c2_write_no_data@buf(1), i2c2_read@reg(1), i2c2_write@buf(2), 
  6991 ;; Return value:  Size  Location     Type
  6992 ;;                  1    wreg      void 
  6993 ;; Registers used:
  6994 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6995 ;; Tracked objects:
  6996 ;;		On entry : 0/0
  6997 ;;		On exit  : 0/0
  6998 ;;		Unchanged: 0/0
  6999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7000 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7001 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7002 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7003 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7004 ;;Total ram usage:        7 bytes
  7005 ;; Hardware stack levels used:    1
  7006 ;; Hardware stack levels required when called:    7
  7007 ;; This function calls:
  7008 ;;		_I2C2_MasterTRBInsert
  7009 ;;		_I2C2_MasterWriteTRBBuild
  7010 ;; This function is called by:
  7011 ;;		_i2c2_write
  7012 ;; This function uses a non-reentrant model
  7013 ;;
  7014                           
  7015                           
  7016                           ;psect for function _I2C2_MasterWrite
  7017  0A7F                     _I2C2_MasterWrite:	
  7018                           
  7019                           ;incstack = 0
  7020                           ; Regs used in _I2C2_MasterWrite: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7021                           ;I2C2_MasterWrite@pdata stored from wreg
  7022  0A7F  0020               	movlb	0	; select bank0
  7023  0A80  00AD               	movwf	I2C2_MasterWrite@pdata
  7024                           
  7025                           ;i2c2.c: 604: static I2C2_TRANSACTION_REQUEST_BLOCK trBlock;
  7026                           ;i2c2.c: 607: if (i2c2_object.trStatus.s.full != 1)
  7027  0A81  1849               	btfsc	_i2c2_object+2,0
  7028  0A82  2AA0               	goto	l3006
  7029                           
  7030                           ;i2c2.c: 608: {
  7031                           ;i2c2.c: 609: I2C2_MasterWriteTRBBuild(&trBlock, pdata, length, address);
  7032  0A83  082D               	movf	I2C2_MasterWrite@pdata,w
  7033  0A84  00AB               	movwf	??_I2C2_MasterWrite
  7034  0A85  082B               	movf	??_I2C2_MasterWrite,w
  7035  0A86  00A0               	movwf	I2C2_MasterWriteTRBBuild@pdata
  7036  0A87  0827               	movf	I2C2_MasterWrite@length,w
  7037  0A88  00AC               	movwf	??_I2C2_MasterWrite+1
  7038  0A89  082C               	movf	??_I2C2_MasterWrite+1,w
  7039  0A8A  00A1               	movwf	I2C2_MasterWriteTRBBuild@length
  7040  0A8B  0829               	movf	I2C2_MasterWrite@address+1,w
  7041  0A8C  00A3               	movwf	I2C2_MasterWriteTRBBuild@address+1
  7042  0A8D  0828               	movf	I2C2_MasterWrite@address,w
  7043  0A8E  00A2               	movwf	I2C2_MasterWriteTRBBuild@address
  7044  0A8F  30D4               	movlw	(low (I2C2_MasterWrite@trBlock| 0))& (0+255)
  7045  0A90  3189  21AA  318A   	fcall	_I2C2_MasterWriteTRBBuild
  7046                           
  7047                           ;i2c2.c: 610: I2C2_MasterTRBInsert(1, &trBlock, pflag);
  7048  0A93  30D4               	movlw	(low (I2C2_MasterWrite@trBlock| 0))& (0+255)
  7049  0A94  0020               	movlb	0	; select bank0
  7050  0A95  00AB               	movwf	??_I2C2_MasterWrite
  7051  0A96  082B               	movf	??_I2C2_MasterWrite,w
  7052  0A97  00A0               	movwf	I2C2_MasterTRBInsert@ptrb_list
  7053  0A98  082A               	movf	I2C2_MasterWrite@pflag,w
  7054  0A99  00AC               	movwf	??_I2C2_MasterWrite+1
  7055  0A9A  082C               	movf	??_I2C2_MasterWrite+1,w
  7056  0A9B  00A1               	movwf	I2C2_MasterTRBInsert@pflag
  7057  0A9C  3001               	movlw	1
  7058  0A9D  318B  23FA         	fcall	_I2C2_MasterTRBInsert
  7059                           
  7060                           ;i2c2.c: 611: }
  7061  0A9F  0008               	return
  7062  0AA0                     l3006:	
  7063                           
  7064                           ;i2c2.c: 612: else
  7065                           ;i2c2.c: 613: {
  7066                           ;i2c2.c: 614: *pflag = I2C2_MESSAGE_FAIL;
  7067  0AA0  0020               	movlb	0	; select bank0
  7068  0AA1  082A               	movf	I2C2_MasterWrite@pflag,w
  7069  0AA2  0086               	movwf	6
  7070  0AA3  0187               	clrf	7
  7071  0AA4  0181               	clrf	1
  7072  0AA5  0A81               	incf	1,f
  7073  0AA6  0008               	return
  7074  0AA7                     __end_of_I2C2_MasterWrite:	
  7075                           
  7076                           	psect	text21
  7077  09AA                     __ptext21:	
  7078 ;; *************** function _I2C2_MasterWriteTRBBuild *****************
  7079 ;; Defined at:
  7080 ;;		line 707 in file "mcc_generated_files/i2c2.c"
  7081 ;; Parameters:    Size  Location     Type
  7082 ;;  ptrb            1    wreg     PTR struct .
  7083 ;;		 -> I2C2_MasterWrite@trBlock(4), 
  7084 ;;  pdata           1    0[BANK0 ] PTR unsigned char 
  7085 ;;		 -> i2c2_write_no_data@buf(1), i2c2_read@reg(1), i2c2_write@buf(2), 
  7086 ;;  length          1    1[BANK0 ] unsigned char 
  7087 ;;  address         2    2[BANK0 ] unsigned int 
  7088 ;; Auto vars:     Size  Location     Type
  7089 ;;  ptrb            1    6[BANK0 ] PTR struct .
  7090 ;;		 -> I2C2_MasterWrite@trBlock(4), 
  7091 ;; Return value:  Size  Location     Type
  7092 ;;                  1    wreg      void 
  7093 ;; Registers used:
  7094 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7095 ;; Tracked objects:
  7096 ;;		On entry : 0/0
  7097 ;;		On exit  : 0/0
  7098 ;;		Unchanged: 0/0
  7099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7100 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7101 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7102 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7103 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7104 ;;Total ram usage:        7 bytes
  7105 ;; Hardware stack levels used:    1
  7106 ;; Hardware stack levels required when called:    6
  7107 ;; This function calls:
  7108 ;;		Nothing
  7109 ;; This function is called by:
  7110 ;;		_I2C2_MasterWrite
  7111 ;; This function uses a non-reentrant model
  7112 ;;
  7113                           
  7114                           
  7115                           ;psect for function _I2C2_MasterWriteTRBBuild
  7116  09AA                     _I2C2_MasterWriteTRBBuild:	
  7117                           
  7118                           ;incstack = 0
  7119                           ; Regs used in _I2C2_MasterWriteTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
  7120                           ;I2C2_MasterWriteTRBBuild@ptrb stored from wreg
  7121  09AA  0020               	movlb	0	; select bank0
  7122  09AB  00A6               	movwf	I2C2_MasterWriteTRBBuild@ptrb
  7123                           
  7124                           ;i2c2.c: 713: ptrb->address = address << 1;
  7125  09AC  0823               	movf	I2C2_MasterWriteTRBBuild@address+1,w
  7126  09AD  00A5               	movwf	??_I2C2_MasterWriteTRBBuild+1
  7127  09AE  0822               	movf	I2C2_MasterWriteTRBBuild@address,w
  7128  09AF  00A4               	movwf	??_I2C2_MasterWriteTRBBuild
  7129  09B0  35A4               	lslf	??_I2C2_MasterWriteTRBBuild,f
  7130  09B1  0DA5               	rlf	??_I2C2_MasterWriteTRBBuild+1,f
  7131  09B2  0826               	movf	I2C2_MasterWriteTRBBuild@ptrb,w
  7132  09B3  0086               	movwf	6
  7133  09B4  0187               	clrf	7
  7134  09B5  0824               	movf	??_I2C2_MasterWriteTRBBuild,w
  7135  09B6  3FC0               	movwi [0]fsr1
  7136  09B7  0825               	movf	??_I2C2_MasterWriteTRBBuild+1,w
  7137  09B8  3FC1               	movwi [1]fsr1
  7138                           
  7139                           ;i2c2.c: 714: ptrb->length = length;
  7140  09B9  0821               	movf	I2C2_MasterWriteTRBBuild@length,w
  7141  09BA  00A4               	movwf	??_I2C2_MasterWriteTRBBuild
  7142  09BB  0826               	movf	I2C2_MasterWriteTRBBuild@ptrb,w
  7143  09BC  3E02               	addlw	2
  7144  09BD  0086               	movwf	6
  7145  09BE  0187               	clrf	7
  7146  09BF  0824               	movf	??_I2C2_MasterWriteTRBBuild,w
  7147  09C0  0081               	movwf	1
  7148                           
  7149                           ;i2c2.c: 715: ptrb->pbuffer = pdata;
  7150  09C1  0820               	movf	I2C2_MasterWriteTRBBuild@pdata,w
  7151  09C2  00A4               	movwf	??_I2C2_MasterWriteTRBBuild
  7152  09C3  0826               	movf	I2C2_MasterWriteTRBBuild@ptrb,w
  7153  09C4  3E03               	addlw	3
  7154  09C5  0086               	movwf	6
  7155  09C6  0187               	clrf	7
  7156  09C7  0824               	movf	??_I2C2_MasterWriteTRBBuild,w
  7157  09C8  0081               	movwf	1
  7158  09C9  0008               	return
  7159  09CA                     __end_of_I2C2_MasterWriteTRBBuild:	
  7160                           
  7161                           	psect	text22
  7162  0BFA                     __ptext22:	
  7163 ;; *************** function _I2C2_MasterTRBInsert *****************
  7164 ;; Defined at:
  7165 ;;		line 641 in file "mcc_generated_files/i2c2.c"
  7166 ;; Parameters:    Size  Location     Type
  7167 ;;  count           1    wreg     unsigned char 
  7168 ;;  ptrb_list       1    0[BANK0 ] PTR struct .
  7169 ;;		 -> I2C2_MasterRead@trBlock(4), I2C2_MasterWrite@trBlock(4), 
  7170 ;;  pflag           1    1[BANK0 ] PTR enum E2972
  7171 ;;		 -> i2c2_read_no_reg_addr@status(1), i2c2_write_no_data@status(1), i2c2_read@status(1), i2c2_write@status(1), 
  7172 ;; Auto vars:     Size  Location     Type
  7173 ;;  count           1    3[BANK0 ] unsigned char 
  7174 ;; Return value:  Size  Location     Type
  7175 ;;                  1    wreg      void 
  7176 ;; Registers used:
  7177 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7178 ;; Tracked objects:
  7179 ;;		On entry : 0/0
  7180 ;;		On exit  : 0/0
  7181 ;;		Unchanged: 0/0
  7182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7183 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7184 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7185 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7186 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7187 ;;Total ram usage:        4 bytes
  7188 ;; Hardware stack levels used:    1
  7189 ;; Hardware stack levels required when called:    6
  7190 ;; This function calls:
  7191 ;;		Nothing
  7192 ;; This function is called by:
  7193 ;;		_I2C2_MasterWrite
  7194 ;;		_I2C2_MasterRead
  7195 ;; This function uses a non-reentrant model
  7196 ;;
  7197                           
  7198                           
  7199                           ;psect for function _I2C2_MasterTRBInsert
  7200  0BFA                     _I2C2_MasterTRBInsert:	
  7201                           
  7202                           ;incstack = 0
  7203                           ; Regs used in _I2C2_MasterTRBInsert: [wreg+fsr1l+fsr1h+status,2+status,0]
  7204                           ;I2C2_MasterTRBInsert@count stored from wreg
  7205  0BFA  0020               	movlb	0	; select bank0
  7206  0BFB  00A3               	movwf	I2C2_MasterTRBInsert@count
  7207                           
  7208                           ;i2c2.c: 648: if (i2c2_object.trStatus.s.full != 1)
  7209  0BFC  1849               	btfsc	_i2c2_object+2,0
  7210  0BFD  2C2E               	goto	l2994
  7211                           
  7212                           ;i2c2.c: 649: {
  7213                           ;i2c2.c: 650: *pflag = I2C2_MESSAGE_PENDING;
  7214  0BFE  3002               	movlw	2
  7215  0BFF  00A2               	movwf	??_I2C2_MasterTRBInsert
  7216  0C00  0821               	movf	I2C2_MasterTRBInsert@pflag,w
  7217  0C01  0086               	movwf	6
  7218  0C02  0187               	clrf	7
  7219  0C03  0822               	movf	??_I2C2_MasterTRBInsert,w
  7220  0C04  0081               	movwf	1
  7221                           
  7222                           ;i2c2.c: 652: i2c2_object.pTrTail->ptrb_list = ptrb_list;
  7223  0C05  0820               	movf	I2C2_MasterTRBInsert@ptrb_list,w
  7224  0C06  00A2               	movwf	??_I2C2_MasterTRBInsert
  7225  0C07  0A47               	incf	_i2c2_object,w
  7226  0C08  0086               	movwf	6
  7227  0C09  0187               	clrf	7
  7228  0C0A  0822               	movf	??_I2C2_MasterTRBInsert,w
  7229  0C0B  0081               	movwf	1
  7230                           
  7231                           ;i2c2.c: 653: i2c2_object.pTrTail->count = count;
  7232  0C0C  0823               	movf	I2C2_MasterTRBInsert@count,w
  7233  0C0D  00A2               	movwf	??_I2C2_MasterTRBInsert
  7234  0C0E  0847               	movf	_i2c2_object,w
  7235  0C0F  0086               	movwf	6
  7236  0C10  0187               	clrf	7
  7237  0C11  0822               	movf	??_I2C2_MasterTRBInsert,w
  7238  0C12  0081               	movwf	1
  7239                           
  7240                           ;i2c2.c: 654: i2c2_object.pTrTail->pTrFlag = pflag;
  7241  0C13  0821               	movf	I2C2_MasterTRBInsert@pflag,w
  7242  0C14  00A2               	movwf	??_I2C2_MasterTRBInsert
  7243  0C15  0847               	movf	_i2c2_object,w
  7244  0C16  3E02               	addlw	2
  7245  0C17  0086               	movwf	6
  7246  0C18  0187               	clrf	7
  7247  0C19  0822               	movf	??_I2C2_MasterTRBInsert,w
  7248  0C1A  0081               	movwf	1
  7249                           
  7250                           ;i2c2.c: 655: i2c2_object.pTrTail++;
  7251  0C1B  3003               	movlw	3
  7252  0C1C  00A2               	movwf	??_I2C2_MasterTRBInsert
  7253  0C1D  0822               	movf	??_I2C2_MasterTRBInsert,w
  7254  0C1E  07C7               	addwf	_i2c2_object,f
  7255                           
  7256                           ;i2c2.c: 658: if (i2c2_object.pTrTail == (i2c2_tr_queue + 1))
  7257  0C1F  0847               	movf	_i2c2_object,w
  7258  0C20  3ADE               	xorlw	(low ((_i2c2_tr_queue| 0+3)))& (0+255)
  7259  0C21  1D03               	skipz
  7260  0C22  2C27               	goto	l2990
  7261                           
  7262                           ;i2c2.c: 659: {
  7263                           ;i2c2.c: 661: i2c2_object.pTrTail = i2c2_tr_queue;
  7264  0C23  30DB               	movlw	(low (_i2c2_tr_queue| 0))& (0+255)
  7265  0C24  00A2               	movwf	??_I2C2_MasterTRBInsert
  7266  0C25  0822               	movf	??_I2C2_MasterTRBInsert,w
  7267  0C26  00C7               	movwf	_i2c2_object
  7268  0C27                     l2990:	
  7269                           
  7270                           ;i2c2.c: 662: }
  7271                           ;i2c2.c: 666: i2c2_object.trStatus.s.empty = 0;
  7272  0C27  10C9               	bcf	_i2c2_object+2,1
  7273                           
  7274                           ;i2c2.c: 669: if (i2c2_object.pTrHead == i2c2_object.pTrTail)
  7275  0C28  0848               	movf	low ((_i2c2_object| 0+1)),w
  7276  0C29  0647               	xorwf	_i2c2_object,w
  7277  0C2A  1D03               	skipz
  7278  0C2B  2C33               	goto	l2996
  7279                           
  7280                           ;i2c2.c: 670: {
  7281                           ;i2c2.c: 672: i2c2_object.trStatus.s.full = 1;
  7282  0C2C  1449               	bsf	_i2c2_object+2,0
  7283                           
  7284                           ;i2c2.c: 673: }
  7285                           ;i2c2.c: 675: }
  7286  0C2D  2C33               	goto	l2996
  7287  0C2E                     l2994:	
  7288                           
  7289                           ;i2c2.c: 676: else
  7290                           ;i2c2.c: 677: {
  7291                           ;i2c2.c: 678: *pflag = I2C2_MESSAGE_FAIL;
  7292  0C2E  0821               	movf	I2C2_MasterTRBInsert@pflag,w
  7293  0C2F  0086               	movwf	6
  7294  0C30  0187               	clrf	7
  7295  0C31  0181               	clrf	1
  7296  0C32  0A81               	incf	1,f
  7297  0C33                     l2996:	
  7298                           
  7299                           ;i2c2.c: 679: }
  7300                           ;i2c2.c: 682: if (*pflag == I2C2_MESSAGE_PENDING)
  7301  0C33  0821               	movf	I2C2_MasterTRBInsert@pflag,w
  7302  0C34  0086               	movwf	6
  7303  0C35  0187               	clrf	7
  7304  0C36  3002               	movlw	2
  7305  0C37  0601               	xorwf	1,w
  7306  0C38  1D03               	btfss	3,2
  7307  0C39  0008               	return
  7308  0C3A                     l3000:	
  7309                           ;i2c2.c: 683: {
  7310                           ;i2c2.c: 684: while(i2c2_state != S_MASTER_IDLE);
  7311                           
  7312  0C3A  0866               	movf	_i2c2_state,w
  7313  0C3B  1D03               	btfss	3,2
  7314  0C3C  2C3A               	goto	l3000
  7315                           
  7316                           ;i2c2.c: 685: {
  7317                           ;i2c2.c: 688: PIR4bits.SSP2IF = 1;
  7318  0C3D  1414               	bsf	20,0	;volatile
  7319  0C3E  0008               	return
  7320  0C3F                     __end_of_I2C2_MasterTRBInsert:	
  7321                           
  7322                           	psect	text23
  7323  0D26                     __ptext23:	
  7324 ;; *************** function _atoi *****************
  7325 ;; Defined at:
  7326 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\atoi.c"
  7327 ;; Parameters:    Size  Location     Type
  7328 ;;  s               1    wreg     PTR const unsigned char 
  7329 ;;		 -> buf(48), NULL(0), I2C1_StatusCallback@ext_buf(48), 
  7330 ;; Auto vars:     Size  Location     Type
  7331 ;;  s               1   13[BANK0 ] PTR const unsigned char 
  7332 ;;		 -> buf(48), NULL(0), I2C1_StatusCallback@ext_buf(48), 
  7333 ;;  a               2   11[BANK0 ] int 
  7334 ;;  sign            1   10[BANK0 ] unsigned char 
  7335 ;; Return value:  Size  Location     Type
  7336 ;;                  2    6[BANK0 ] int 
  7337 ;; Registers used:
  7338 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7339 ;; Tracked objects:
  7340 ;;		On entry : 0/0
  7341 ;;		On exit  : 0/0
  7342 ;;		Unchanged: 0/0
  7343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7344 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7345 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7346 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7347 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7348 ;;Total ram usage:        8 bytes
  7349 ;; Hardware stack levels used:    1
  7350 ;; Hardware stack levels required when called:    7
  7351 ;; This function calls:
  7352 ;;		___wmul
  7353 ;;		_isdigit
  7354 ;; This function is called by:
  7355 ;;		_loop_func
  7356 ;;		_PROTOCOL_Loop
  7357 ;; This function uses a non-reentrant model
  7358 ;;
  7359                           
  7360                           
  7361                           ;psect for function _atoi
  7362  0D26                     _atoi:	
  7363                           
  7364                           ;incstack = 0
  7365                           ; Regs used in _atoi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7366                           ;atoi@s stored from wreg
  7367  0D26  0020               	movlb	0	; select bank0
  7368  0D27  00AD               	movwf	atoi@s
  7369  0D28                     l3266:	
  7370  0D28  082D               	movf	atoi@s,w
  7371  0D29  0086               	movwf	6
  7372  0D2A  3001               	movlw	1	; select bank2/3
  7373  0D2B  0087               	movwf	7
  7374  0D2C  3020               	movlw	32
  7375  0D2D  0601               	xorwf	1,w
  7376  0D2E  1D03               	btfss	3,2
  7377  0D2F  2D35               	goto	l3268
  7378  0D30                     l3264:	
  7379  0D30  3001               	movlw	1
  7380  0D31  00A8               	movwf	??_atoi
  7381  0D32  0828               	movf	??_atoi,w
  7382  0D33  07AD               	addwf	atoi@s,f
  7383  0D34  2D28               	goto	l3266
  7384  0D35                     l3268:	
  7385  0D35  082D               	movf	atoi@s,w
  7386  0D36  0086               	movwf	6
  7387  0D37  3001               	movlw	1	; select bank2/3
  7388  0D38  0087               	movwf	7
  7389  0D39  3009               	movlw	9
  7390  0D3A  0601               	xorwf	1,w
  7391  0D3B  1903               	btfsc	3,2
  7392  0D3C  2D30               	goto	l3264
  7393  0D3D  01AB               	clrf	atoi@a
  7394  0D3E  01AC               	clrf	atoi@a+1
  7395  0D3F  01AA               	clrf	atoi@sign
  7396  0D40  082D               	movf	atoi@s,w
  7397  0D41  0086               	movwf	6
  7398  0D42  3001               	movlw	1	; select bank2/3
  7399  0D43  0087               	movwf	7
  7400  0D44  302D               	movlw	45
  7401  0D45  0601               	xorwf	1,w
  7402  0D46  1D03               	btfss	3,2
  7403  0D47  2D4D               	goto	l3276
  7404  0D48  3001               	movlw	1
  7405  0D49  00A8               	movwf	??_atoi
  7406  0D4A  0828               	movf	??_atoi,w
  7407  0D4B  07AA               	addwf	atoi@sign,f
  7408  0D4C  2D55               	goto	l3282
  7409  0D4D                     l3276:	
  7410  0D4D  082D               	movf	atoi@s,w
  7411  0D4E  0086               	movwf	6
  7412  0D4F  3001               	movlw	1	; select bank2/3
  7413  0D50  0087               	movwf	7
  7414  0D51  302B               	movlw	43
  7415  0D52  0601               	xorwf	1,w
  7416  0D53  1D03               	btfss	3,2
  7417  0D54  2D59               	goto	l3284
  7418  0D55                     l3282:	
  7419  0D55  3001               	movlw	1
  7420  0D56  00A8               	movwf	??_atoi
  7421  0D57  0828               	movf	??_atoi,w
  7422  0D58  07AD               	addwf	atoi@s,f
  7423  0D59                     l3284:	
  7424  0D59  082D               	movf	atoi@s,w
  7425  0D5A  0086               	movwf	6
  7426  0D5B  3001               	movlw	1	; select bank2/3
  7427  0D5C  0087               	movwf	7
  7428  0D5D  0801               	movf	1,w
  7429  0D5E  3188  204F  318D   	fcall	_isdigit
  7430  0D61  1C03               	btfss	3,0
  7431  0D62  2D82               	goto	l3286
  7432  0D63  0020               	movlb	0	; select bank0
  7433  0D64  082C               	movf	atoi@a+1,w
  7434  0D65  00A1               	movwf	___wmul@multiplier+1
  7435  0D66  082B               	movf	atoi@a,w
  7436  0D67  00A0               	movwf	___wmul@multiplier
  7437  0D68  300A               	movlw	10
  7438  0D69  00A2               	movwf	___wmul@multiplicand
  7439  0D6A  3000               	movlw	0
  7440  0D6B  00A3               	movwf	___wmul@multiplicand+1
  7441  0D6C  3189  2117  318D   	fcall	___wmul
  7442  0D6F  0020               	movlb	0	; select bank0
  7443  0D70  082D               	movf	atoi@s,w
  7444  0D71  0086               	movwf	6
  7445  0D72  3001               	movlw	1	; select bank2/3
  7446  0D73  0087               	movwf	7
  7447  0D74  0801               	movf	1,w
  7448  0D75  0720               	addwf	?___wmul,w
  7449  0D76  00A8               	movwf	??_atoi
  7450  0D77  0821               	movf	?___wmul+1,w
  7451  0D78  1803               	skipnc
  7452  0D79  0A21               	incf	?___wmul+1,w
  7453  0D7A  00A9               	movwf	??_atoi+1
  7454  0D7B  0828               	movf	??_atoi,w
  7455  0D7C  3ED0               	addlw	208
  7456  0D7D  00AB               	movwf	atoi@a
  7457  0D7E  30FF               	movlw	255
  7458  0D7F  3D29               	addwfc	??_atoi+1,w
  7459  0D80  00AC               	movwf	atoi@a+1
  7460  0D81  2D55               	goto	l3282
  7461  0D82                     l3286:	
  7462  0D82  0020               	movlb	0	; select bank0
  7463  0D83  082A               	movf	atoi@sign,w
  7464  0D84  1903               	btfsc	3,2
  7465  0D85  2D92               	goto	l3292
  7466  0D86  092B               	comf	atoi@a,w
  7467  0D87  00A8               	movwf	??_atoi
  7468  0D88  092C               	comf	atoi@a+1,w
  7469  0D89  00A9               	movwf	??_atoi+1
  7470  0D8A  0AA8               	incf	??_atoi,f
  7471  0D8B  1903               	skipnz
  7472  0D8C  0AA9               	incf	??_atoi+1,f
  7473  0D8D  0828               	movf	??_atoi,w
  7474  0D8E  00A6               	movwf	?_atoi
  7475  0D8F  0829               	movf	??_atoi+1,w
  7476  0D90  00A7               	movwf	?_atoi+1
  7477  0D91  0008               	return
  7478  0D92                     l3292:	
  7479  0D92  082C               	movf	atoi@a+1,w
  7480  0D93  00A7               	movwf	?_atoi+1
  7481  0D94  082B               	movf	atoi@a,w
  7482  0D95  00A6               	movwf	?_atoi
  7483  0D96  0008               	return
  7484  0D97                     __end_of_atoi:	
  7485                           
  7486                           	psect	text24
  7487  084F                     __ptext24:	
  7488 ;; *************** function _isdigit *****************
  7489 ;; Defined at:
  7490 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  7491 ;; Parameters:    Size  Location     Type
  7492 ;;  c               1    wreg     unsigned char 
  7493 ;; Auto vars:     Size  Location     Type
  7494 ;;  c               1    1[BANK0 ] unsigned char 
  7495 ;; Return value:  Size  Location     Type
  7496 ;;		None               void
  7497 ;; Registers used:
  7498 ;;		wreg, status,2, status,0
  7499 ;; Tracked objects:
  7500 ;;		On entry : 0/0
  7501 ;;		On exit  : 0/0
  7502 ;;		Unchanged: 0/0
  7503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7505 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7507 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7508 ;;Total ram usage:        2 bytes
  7509 ;; Hardware stack levels used:    1
  7510 ;; Hardware stack levels required when called:    6
  7511 ;; This function calls:
  7512 ;;		Nothing
  7513 ;; This function is called by:
  7514 ;;		_printf
  7515 ;;		_atoi
  7516 ;; This function uses a non-reentrant model
  7517 ;;
  7518                           
  7519                           
  7520                           ;psect for function _isdigit
  7521  084F                     _isdigit:	
  7522                           
  7523                           ;incstack = 0
  7524                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  7525                           ;isdigit@c stored from wreg
  7526  084F  0020               	movlb	0	; select bank0
  7527  0850  00A1               	movwf	isdigit@c
  7528  0851  01A0               	clrf	_isdigit$1520
  7529  0852  303A               	movlw	58
  7530  0853  0221               	subwf	isdigit@c,w
  7531  0854  1803               	skipnc
  7532  0855  285C               	goto	l3056
  7533  0856  3030               	movlw	48
  7534  0857  0221               	subwf	isdigit@c,w
  7535  0858  1C03               	skipc
  7536  0859  285C               	goto	l3056
  7537  085A  01A0               	clrf	_isdigit$1520
  7538  085B  0AA0               	incf	_isdigit$1520,f
  7539  085C                     l3056:	
  7540  085C  0C20               	rrf	_isdigit$1520,w
  7541  085D  0008               	return
  7542  085E                     __end_of_isdigit:	
  7543                           
  7544                           	psect	text25
  7545  0917                     __ptext25:	
  7546 ;; *************** function ___wmul *****************
  7547 ;; Defined at:
  7548 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  7549 ;; Parameters:    Size  Location     Type
  7550 ;;  multiplier      2    0[BANK0 ] unsigned int 
  7551 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  7552 ;; Auto vars:     Size  Location     Type
  7553 ;;  product         2    4[BANK0 ] unsigned int 
  7554 ;; Return value:  Size  Location     Type
  7555 ;;                  2    0[BANK0 ] unsigned int 
  7556 ;; Registers used:
  7557 ;;		wreg, status,2, status,0
  7558 ;; Tracked objects:
  7559 ;;		On entry : 0/0
  7560 ;;		On exit  : 0/0
  7561 ;;		Unchanged: 0/0
  7562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7563 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7564 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7566 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7567 ;;Total ram usage:        6 bytes
  7568 ;; Hardware stack levels used:    1
  7569 ;; Hardware stack levels required when called:    6
  7570 ;; This function calls:
  7571 ;;		Nothing
  7572 ;; This function is called by:
  7573 ;;		_printf
  7574 ;;		_atoi
  7575 ;; This function uses a non-reentrant model
  7576 ;;
  7577                           
  7578                           
  7579                           ;psect for function ___wmul
  7580  0917                     ___wmul:	
  7581                           
  7582                           ;incstack = 0
  7583                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7584  0917  0020               	movlb	0	; select bank0
  7585  0918  01A4               	clrf	___wmul@product
  7586  0919  01A5               	clrf	___wmul@product+1
  7587  091A                     l3062:	
  7588  091A  1C20               	btfss	___wmul@multiplier,0
  7589  091B  2920               	goto	l1135
  7590  091C  0822               	movf	___wmul@multiplicand,w
  7591  091D  07A4               	addwf	___wmul@product,f
  7592  091E  0823               	movf	___wmul@multiplicand+1,w
  7593  091F  3DA5               	addwfc	___wmul@product+1,f
  7594  0920                     l1135:	
  7595  0920  3001               	movlw	1
  7596  0921                     u1815:	
  7597  0921  35A2               	lslf	___wmul@multiplicand,f
  7598  0922  0DA3               	rlf	___wmul@multiplicand+1,f
  7599  0923  0B89               	decfsz	9,f
  7600  0924  2921               	goto	u1815
  7601  0925  3001               	movlw	1
  7602  0926                     u1825:	
  7603  0926  36A1               	lsrf	___wmul@multiplier+1,f
  7604  0927  0CA0               	rrf	___wmul@multiplier,f
  7605  0928  0B89               	decfsz	9,f
  7606  0929  2926               	goto	u1825
  7607  092A  0820               	movf	___wmul@multiplier,w
  7608  092B  0421               	iorwf	___wmul@multiplier+1,w
  7609  092C  1D03               	btfss	3,2
  7610  092D  291A               	goto	l3062
  7611  092E  0825               	movf	___wmul@product+1,w
  7612  092F  00A1               	movwf	?___wmul+1
  7613  0930  0824               	movf	___wmul@product,w
  7614  0931  00A0               	movwf	?___wmul
  7615  0932  0008               	return
  7616  0933                     __end_of___wmul:	
  7617                           
  7618                           	psect	text26
  7619  1767                     __ptext26:	
  7620 ;; *************** function _TMR0_HasOverflowOccured *****************
  7621 ;; Defined at:
  7622 ;;		line 101 in file "mcc_generated_files/tmr0.c"
  7623 ;; Parameters:    Size  Location     Type
  7624 ;;		None
  7625 ;; Auto vars:     Size  Location     Type
  7626 ;;		None
  7627 ;; Return value:  Size  Location     Type
  7628 ;;                  1    wreg      unsigned char 
  7629 ;; Registers used:
  7630 ;;		wreg, status,2, status,0
  7631 ;; Tracked objects:
  7632 ;;		On entry : 0/0
  7633 ;;		On exit  : 0/0
  7634 ;;		Unchanged: 0/0
  7635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7637 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7638 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7639 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7640 ;;Total ram usage:        0 bytes
  7641 ;; Hardware stack levels used:    1
  7642 ;; Hardware stack levels required when called:    6
  7643 ;; This function calls:
  7644 ;;		Nothing
  7645 ;; This function is called by:
  7646 ;;		_PROTOCOL_Loop
  7647 ;; This function uses a non-reentrant model
  7648 ;;
  7649                           
  7650                           
  7651                           ;psect for function _TMR0_HasOverflowOccured
  7652  1767                     _TMR0_HasOverflowOccured:	
  7653                           
  7654                           ;tmr0.c: 104: return(INTCONbits.TMR0IF);
  7655                           
  7656                           ;incstack = 0
  7657                           ; Regs used in _TMR0_HasOverflowOccured: [wreg+status,2+status,0]
  7658  1767  0C0B               	rrf	11,w	;volatile
  7659  1768  0C89               	rrf	9,f
  7660  1769  3901               	andlw	1
  7661  176A  0008               	return
  7662  176B                     __end_of_TMR0_HasOverflowOccured:	
  7663                           
  7664                           	psect	text27
  7665  17F1                     __ptext27:	
  7666 ;; *************** function _PROTOCOL_Write_Device_Address *****************
  7667 ;; Defined at:
  7668 ;;		line 89 in file "protocol.c"
  7669 ;; Parameters:    Size  Location     Type
  7670 ;;  device_id_i2    1    wreg     unsigned char 
  7671 ;; Auto vars:     Size  Location     Type
  7672 ;;  device_id_i2    1    4[BANK0 ] unsigned char 
  7673 ;; Return value:  Size  Location     Type
  7674 ;;                  1    wreg      void 
  7675 ;; Registers used:
  7676 ;;		wreg, status,2, status,0, pclath, cstack
  7677 ;; Tracked objects:
  7678 ;;		On entry : 0/0
  7679 ;;		On exit  : 0/0
  7680 ;;		Unchanged: 0/0
  7681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7683 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7684 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7685 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7686 ;;Total ram usage:        2 bytes
  7687 ;; Hardware stack levels used:    1
  7688 ;; Hardware stack levels required when called:    7
  7689 ;; This function calls:
  7690 ;;		_DATAEE_WriteByte
  7691 ;; This function is called by:
  7692 ;;		_PROTOCOL_Loop
  7693 ;; This function uses a non-reentrant model
  7694 ;;
  7695                           
  7696                           
  7697                           ;psect for function _PROTOCOL_Write_Device_Address
  7698  17F1                     _PROTOCOL_Write_Device_Address:	
  7699                           
  7700                           ;incstack = 0
  7701                           ; Regs used in _PROTOCOL_Write_Device_Address: [wreg+status,2+status,0+pclath+cstack]
  7702                           ;PROTOCOL_Write_Device_Address@device_id_i2c stored from wreg
  7703  17F1  0020               	movlb	0	; select bank0
  7704  17F2  00A4               	movwf	PROTOCOL_Write_Device_Address@device_id_i2c
  7705                           
  7706                           ;protocol.c: 90: DATAEE_WriteByte(0, device_id_i2c);
  7707  17F3  0824               	movf	PROTOCOL_Write_Device_Address@device_id_i2c,w
  7708  17F4  00A3               	movwf	??_PROTOCOL_Write_Device_Address
  7709  17F5  0823               	movf	??_PROTOCOL_Write_Device_Address,w
  7710  17F6  00A0               	movwf	DATAEE_WriteByte@bData
  7711  17F7  3000               	movlw	0
  7712  17F8  3189  21EB         	fcall	_DATAEE_WriteByte
  7713                           
  7714                           ;protocol.c: 91: slave_address = device_id_i2c;
  7715  17FA  0020               	movlb	0	; select bank0
  7716  17FB  0824               	movf	PROTOCOL_Write_Device_Address@device_id_i2c,w
  7717  17FC  00A3               	movwf	??_PROTOCOL_Write_Device_Address
  7718  17FD  0823               	movf	??_PROTOCOL_Write_Device_Address,w
  7719  17FE  00D8               	movwf	_slave_address
  7720  17FF  0008               	return
  7721  1800                     __end_of_PROTOCOL_Write_Device_Address:	
  7722                           
  7723                           	psect	text28
  7724  1751                     __ptext28:	
  7725 ;; *************** function _PROTOCOL_STP *****************
  7726 ;; Defined at:
  7727 ;;		line 103 in file "protocol.c"
  7728 ;; Parameters:    Size  Location     Type
  7729 ;;		None
  7730 ;; Auto vars:     Size  Location     Type
  7731 ;;		None
  7732 ;; Return value:  Size  Location     Type
  7733 ;;                  1    wreg      void 
  7734 ;; Registers used:
  7735 ;;		wreg, status,2, status,0
  7736 ;; Tracked objects:
  7737 ;;		On entry : 0/0
  7738 ;;		On exit  : 0/0
  7739 ;;		Unchanged: 0/0
  7740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7744 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7745 ;;Total ram usage:        0 bytes
  7746 ;; Hardware stack levels used:    1
  7747 ;; Hardware stack levels required when called:    6
  7748 ;; This function calls:
  7749 ;;		Nothing
  7750 ;; This function is called by:
  7751 ;;		_PROTOCOL_Loop
  7752 ;; This function uses a non-reentrant model
  7753 ;;
  7754                           
  7755                           
  7756                           ;psect for function _PROTOCOL_STP
  7757  1751                     _PROTOCOL_STP:	
  7758                           
  7759                           ;protocol.c: 105: running = 0;
  7760                           
  7761                           ;incstack = 0
  7762                           ; Regs used in _PROTOCOL_STP: [wreg+status,2+status,0]
  7763  1751  0020               	movlb	0	; select bank0
  7764  1752  01D4               	clrf	_running
  7765  1753  0008               	return
  7766  1754                     __end_of_PROTOCOL_STP:	
  7767                           
  7768                           	psect	text29
  7769  1763                     __ptext29:	
  7770 ;; *************** function _PROTOCOL_STA *****************
  7771 ;; Defined at:
  7772 ;;		line 98 in file "protocol.c"
  7773 ;; Parameters:    Size  Location     Type
  7774 ;;		None
  7775 ;; Auto vars:     Size  Location     Type
  7776 ;;		None
  7777 ;; Return value:  Size  Location     Type
  7778 ;;                  1    wreg      void 
  7779 ;; Registers used:
  7780 ;;		wreg, status,2, status,0
  7781 ;; Tracked objects:
  7782 ;;		On entry : 0/0
  7783 ;;		On exit  : 0/0
  7784 ;;		Unchanged: 0/0
  7785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7786 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7787 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7789 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7790 ;;Total ram usage:        0 bytes
  7791 ;; Hardware stack levels used:    1
  7792 ;; Hardware stack levels required when called:    6
  7793 ;; This function calls:
  7794 ;;		Nothing
  7795 ;; This function is called by:
  7796 ;;		_PROTOCOL_Loop
  7797 ;; This function uses a non-reentrant model
  7798 ;;
  7799                           
  7800                           
  7801                           ;psect for function _PROTOCOL_STA
  7802  1763                     _PROTOCOL_STA:	
  7803                           
  7804                           ;protocol.c: 100: running = 1;
  7805                           
  7806                           ;incstack = 0
  7807                           ; Regs used in _PROTOCOL_STA: [wreg+status,2+status,0]
  7808  1763  0020               	movlb	0	; select bank0
  7809  1764  01D4               	clrf	_running
  7810  1765  0AD4               	incf	_running,f
  7811  1766  0008               	return
  7812  1767                     __end_of_PROTOCOL_STA:	
  7813                           
  7814                           	psect	text30
  7815  179B                     __ptext30:	
  7816 ;; *************** function _PROTOCOL_SET *****************
  7817 ;; Defined at:
  7818 ;;		line 116 in file "protocol.c"
  7819 ;; Parameters:    Size  Location     Type
  7820 ;;  value_          1    wreg     unsigned char 
  7821 ;; Auto vars:     Size  Location     Type
  7822 ;;  value_          1    1[BANK0 ] unsigned char 
  7823 ;; Return value:  Size  Location     Type
  7824 ;;                  1    wreg      void 
  7825 ;; Registers used:
  7826 ;;		wreg, status,2, status,0
  7827 ;; Tracked objects:
  7828 ;;		On entry : 0/0
  7829 ;;		On exit  : 0/0
  7830 ;;		Unchanged: 0/0
  7831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7833 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7834 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7835 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7836 ;;Total ram usage:        2 bytes
  7837 ;; Hardware stack levels used:    1
  7838 ;; Hardware stack levels required when called:    6
  7839 ;; This function calls:
  7840 ;;		Nothing
  7841 ;; This function is called by:
  7842 ;;		_PROTOCOL_Loop
  7843 ;; This function uses a non-reentrant model
  7844 ;;
  7845                           
  7846                           
  7847                           ;psect for function _PROTOCOL_SET
  7848  179B                     _PROTOCOL_SET:	
  7849                           
  7850                           ;incstack = 0
  7851                           ; Regs used in _PROTOCOL_SET: [wreg+status,2+status,0]
  7852                           ;PROTOCOL_SET@value_ stored from wreg
  7853  179B  0020               	movlb	0	; select bank0
  7854  179C  00A1               	movwf	PROTOCOL_SET@value_
  7855                           
  7856                           ;protocol.c: 117: value = value_;
  7857  179D  0821               	movf	PROTOCOL_SET@value_,w
  7858  179E  00A0               	movwf	??_PROTOCOL_SET
  7859  179F  0820               	movf	??_PROTOCOL_SET,w
  7860  17A0  00D6               	movwf	_value
  7861  17A1  0008               	return
  7862  17A2                     __end_of_PROTOCOL_SET:	
  7863                           
  7864                           	psect	text31
  7865  17AB                     __ptext31:	
  7866 ;; *************** function _PROTOCOL_SAV *****************
  7867 ;; Defined at:
  7868 ;;		line 112 in file "protocol.c"
  7869 ;; Parameters:    Size  Location     Type
  7870 ;;		None
  7871 ;; Auto vars:     Size  Location     Type
  7872 ;;		None
  7873 ;; Return value:  Size  Location     Type
  7874 ;;                  1    wreg      void 
  7875 ;; Registers used:
  7876 ;;		wreg, status,2, status,0, pclath, cstack
  7877 ;; Tracked objects:
  7878 ;;		On entry : 0/0
  7879 ;;		On exit  : 0/0
  7880 ;;		Unchanged: 0/0
  7881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7884 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7885 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7886 ;;Total ram usage:        1 bytes
  7887 ;; Hardware stack levels used:    1
  7888 ;; Hardware stack levels required when called:    7
  7889 ;; This function calls:
  7890 ;;		_DATAEE_WriteByte
  7891 ;; This function is called by:
  7892 ;;		_PROTOCOL_Loop
  7893 ;; This function uses a non-reentrant model
  7894 ;;
  7895                           
  7896                           
  7897                           ;psect for function _PROTOCOL_SAV
  7898  17AB                     _PROTOCOL_SAV:	
  7899                           
  7900                           ;protocol.c: 113: DATAEE_WriteByte(1, value);
  7901                           
  7902                           ;incstack = 0
  7903                           ; Regs used in _PROTOCOL_SAV: [wreg+status,2+status,0+pclath+cstack]
  7904  17AB  0020               	movlb	0	; select bank0
  7905  17AC  0856               	movf	_value,w
  7906  17AD  00A3               	movwf	??_PROTOCOL_SAV
  7907  17AE  0823               	movf	??_PROTOCOL_SAV,w
  7908  17AF  00A0               	movwf	DATAEE_WriteByte@bData
  7909  17B0  3001               	movlw	1
  7910  17B1  3189  21EB         	fcall	_DATAEE_WriteByte
  7911  17B3  0008               	return
  7912  17B4                     __end_of_PROTOCOL_SAV:	
  7913                           
  7914                           	psect	text32
  7915  09EB                     __ptext32:	
  7916 ;; *************** function _DATAEE_WriteByte *****************
  7917 ;; Defined at:
  7918 ;;		line 180 in file "mcc_generated_files/memory.c"
  7919 ;; Parameters:    Size  Location     Type
  7920 ;;  bAdd            1    wreg     unsigned char 
  7921 ;;  bData           1    0[BANK0 ] unsigned char 
  7922 ;; Auto vars:     Size  Location     Type
  7923 ;;  bAdd            1    1[BANK0 ] unsigned char 
  7924 ;;  GIEBitValue     1    2[BANK0 ] unsigned char 
  7925 ;; Return value:  Size  Location     Type
  7926 ;;                  1    wreg      void 
  7927 ;; Registers used:
  7928 ;;		wreg, status,2, status,0
  7929 ;; Tracked objects:
  7930 ;;		On entry : 0/0
  7931 ;;		On exit  : 0/0
  7932 ;;		Unchanged: 0/0
  7933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7934 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7935 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7936 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7937 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7938 ;;Total ram usage:        3 bytes
  7939 ;; Hardware stack levels used:    1
  7940 ;; Hardware stack levels required when called:    6
  7941 ;; This function calls:
  7942 ;;		Nothing
  7943 ;; This function is called by:
  7944 ;;		_PROTOCOL_Write_Device_Address
  7945 ;;		_PROTOCOL_SAV
  7946 ;; This function uses a non-reentrant model
  7947 ;;
  7948                           
  7949                           
  7950                           ;psect for function _DATAEE_WriteByte
  7951  09EB                     _DATAEE_WriteByte:	
  7952                           
  7953                           ;incstack = 0
  7954                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
  7955                           ;DATAEE_WriteByte@bAdd stored from wreg
  7956  09EB  0020               	movlb	0	; select bank0
  7957  09EC  00A1               	movwf	DATAEE_WriteByte@bAdd
  7958                           
  7959                           ;memory.c: 182: uint8_t GIEBitValue = 0;
  7960  09ED  01A2               	clrf	DATAEE_WriteByte@GIEBitValue
  7961                           
  7962                           ;memory.c: 184: EEADRL = (bAdd & 0x0ff);
  7963  09EE  0821               	movf	DATAEE_WriteByte@bAdd,w
  7964  09EF  0023               	movlb	3	; select bank3
  7965  09F0  0091               	movwf	17	;volatile
  7966                           
  7967                           ;memory.c: 185: EEDATL = bData;
  7968  09F1  0020               	movlb	0	; select bank0
  7969  09F2  0820               	movf	DATAEE_WriteByte@bData,w
  7970  09F3  0023               	movlb	3	; select bank3
  7971  09F4  0093               	movwf	19	;volatile
  7972                           
  7973                           ;memory.c: 186: EECON1bits.EEPGD = 0;
  7974  09F5  1395               	bcf	21,7	;volsfr
  7975                           
  7976                           ;memory.c: 187: EECON1bits.CFGS = 0;
  7977  09F6  1315               	bcf	21,6	;volsfr
  7978                           
  7979                           ;memory.c: 188: EECON1bits.WREN = 1;
  7980  09F7  1515               	bsf	21,2	;volsfr
  7981                           
  7982                           ;memory.c: 190: GIEBitValue = INTCONbits.GIE;
  7983  09F8  3000               	movlw	0
  7984  09F9  1B8B               	btfsc	11,7	;volatile
  7985  09FA  3001               	movlw	1
  7986  09FB  0020               	movlb	0	; select bank0
  7987  09FC  00A2               	movwf	DATAEE_WriteByte@GIEBitValue
  7988                           
  7989                           ;memory.c: 191: INTCONbits.GIE = 0;
  7990  09FD  138B               	bcf	11,7	;volatile
  7991                           
  7992                           ;memory.c: 192: EECON2 = 0x55;
  7993  09FE  3055               	movlw	85
  7994  09FF  0023               	movlb	3	; select bank3
  7995  0A00  0096               	movwf	22	;volsfr
  7996                           
  7997                           ;memory.c: 193: EECON2 = 0xAA;
  7998  0A01  30AA               	movlw	170
  7999  0A02  0096               	movwf	22	;volsfr
  8000                           
  8001                           ;memory.c: 194: EECON1bits.WR = 1;
  8002  0A03  1495               	bsf	21,1	;volsfr
  8003  0A04                     l480:	
  8004                           ;memory.c: 197: {
  8005                           
  8006                           ;memory.c: 196: while (EECON1bits.WR)
  8007                           
  8008  0A04  1895               	btfsc	21,1	;volsfr
  8009  0A05  2A04               	goto	l480
  8010                           
  8011                           ;memory.c: 198: }
  8012                           ;memory.c: 200: EECON1bits.WREN = 0;
  8013  0A06  1115               	bcf	21,2	;volsfr
  8014                           
  8015                           ;memory.c: 201: INTCONbits.GIE = GIEBitValue;
  8016  0A07  0020               	movlb	0	; select bank0
  8017  0A08  0C22               	rrf	DATAEE_WriteByte@GIEBitValue,w
  8018  0A09  1C03               	skipc
  8019  0A0A  138B               	bcf	11,7	;volatile
  8020  0A0B  1803               	skipnc
  8021  0A0C  178B               	bsf	11,7	;volatile
  8022  0A0D  0008               	return
  8023  0A0E                     __end_of_DATAEE_WriteByte:	
  8024                           
  8025                           	psect	text33
  8026  086E                     __ptext33:	
  8027 ;; *************** function _PROTOCOL_EXT *****************
  8028 ;; Defined at:
  8029 ;;		line 121 in file "protocol.c"
  8030 ;; Parameters:    Size  Location     Type
  8031 ;;  char_buf        1    wreg     PTR unsigned char 
  8032 ;;		 -> buf(48), I2C1_StatusCallback@ext_buf(48), 
  8033 ;; Auto vars:     Size  Location     Type
  8034 ;;  char_buf        1    5[BANK0 ] PTR unsigned char 
  8035 ;;		 -> buf(48), I2C1_StatusCallback@ext_buf(48), 
  8036 ;; Return value:  Size  Location     Type
  8037 ;;                  1    wreg      void 
  8038 ;; Registers used:
  8039 ;;		wreg, status,2, status,0, pclath, cstack
  8040 ;; Tracked objects:
  8041 ;;		On entry : 0/0
  8042 ;;		On exit  : 0/0
  8043 ;;		Unchanged: 0/0
  8044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8046 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8047 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8048 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8049 ;;Total ram usage:        2 bytes
  8050 ;; Hardware stack levels used:    1
  8051 ;; Hardware stack levels required when called:    8
  8052 ;; This function calls:
  8053 ;;		Absolute function
  8054 ;;		_extension_handler
  8055 ;; This function is called by:
  8056 ;;		_PROTOCOL_Loop
  8057 ;; This function uses a non-reentrant model
  8058 ;;
  8059                           
  8060                           
  8061                           ;psect for function _PROTOCOL_EXT
  8062  086E                     _PROTOCOL_EXT:	
  8063                           
  8064                           ;incstack = 0
  8065                           ; Regs used in _PROTOCOL_EXT: [wreg+status,2+status,0+pclath+cstack]
  8066                           ;PROTOCOL_EXT@char_buf stored from wreg
  8067  086E  0020               	movlb	0	; select bank0
  8068  086F  00A5               	movwf	PROTOCOL_EXT@char_buf
  8069                           
  8070                           ;protocol.c: 122: if (PROTOCOL_Extension_Handler) PROTOCOL_Extension_Handler(char_buf);
  8071  0870  084C               	movf	_PROTOCOL_Extension_Handler,w
  8072  0871  044D               	iorwf	_PROTOCOL_Extension_Handler+1,w
  8073  0872  1903               	btfsc	3,2
  8074  0873  0008               	return
  8075  0874  0825               	movf	PROTOCOL_EXT@char_buf,w
  8076  0875  00A4               	movwf	??_PROTOCOL_EXT
  8077  0876  0824               	movf	??_PROTOCOL_EXT,w
  8078  0877  00A2               	movwf	extension_handler@buf
  8079  0878  084D               	movf	_PROTOCOL_Extension_Handler+1,w
  8080  0879  008A               	movwf	10
  8081  087A  084C               	movf	_PROTOCOL_Extension_Handler,w
  8082  087B  000A               	callw
  8083  087C  3188               	pagesel	$
  8084  087D  0008               	return
  8085  087E                     __end_of_PROTOCOL_EXT:	
  8086                           
  8087                           	psect	text34
  8088  089F                     __ptext34:	
  8089 ;; *************** function _extension_handler *****************
  8090 ;; Defined at:
  8091 ;;		line 113 in file "main.c"
  8092 ;; Parameters:    Size  Location     Type
  8093 ;;  buf             1    2[BANK0 ] PTR unsigned char 
  8094 ;;		 -> buf(48), I2C1_StatusCallback@ext_buf(48), 
  8095 ;; Auto vars:     Size  Location     Type
  8096 ;;  value           1    0        unsigned char 
  8097 ;; Return value:  Size  Location     Type
  8098 ;;                  1    wreg      void 
  8099 ;; Registers used:
  8100 ;;		wreg, status,2, status,0, pclath, cstack
  8101 ;; Tracked objects:
  8102 ;;		On entry : 0/0
  8103 ;;		On exit  : 0/0
  8104 ;;		Unchanged: 0/0
  8105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8106 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8107 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8108 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8109 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8110 ;;Total ram usage:        2 bytes
  8111 ;; Hardware stack levels used:    1
  8112 ;; Hardware stack levels required when called:    7
  8113 ;; This function calls:
  8114 ;;		_PROTOCOL_Read_Lock
  8115 ;;		_PROTOCOL_Set_Lock
  8116 ;; This function is called by:
  8117 ;;		_main
  8118 ;;		i1_PROTOCOL_EXT
  8119 ;;		_PROTOCOL_EXT
  8120 ;; This function uses a non-reentrant model
  8121 ;;
  8122                           
  8123                           
  8124                           ;psect for function _extension_handler
  8125  089F                     _extension_handler:	
  8126                           
  8127                           ;Skip over the trampoline to the duplicate function for level 1
  8128  089F  1C7E               	btfss	126,0
  8129  08A0  28A3               	goto	l3236
  8130  08A1  3197  2FE2         	ljmp	i1l3094
  8131  08A3                     _extension_handler$intlevel0:	
  8132  08A3                     l3236:	
  8133                           ;incstack = 0
  8134                           ; Regs used in _extension_handler: [wreg+status,2+status,0+pclath+cstack]
  8135                           
  8136                           
  8137                           ;main.c: 114: uint8_t value;
  8138                           ;main.c: 115: if (!PROTOCOL_Read_Lock()) {
  8139  08A3  3197  274E  3188   	fcall	_PROTOCOL_Read_Lock
  8140  08A6  3A00               	xorlw	0
  8141  08A7  1D03               	skipz
  8142  08A8  0008               	return
  8143                           
  8144                           ;main.c: 116: pbuf = buf;
  8145  08A9  0020               	movlb	0	; select bank0
  8146  08AA  0822               	movf	extension_handler@buf,w
  8147  08AB  00A3               	movwf	??_extension_handler
  8148  08AC  0823               	movf	??_extension_handler,w
  8149  08AD  00D9               	movwf	_pbuf
  8150                           
  8151                           ;main.c: 117: PROTOCOL_Set_Lock(1);
  8152  08AE  3001               	movlw	1
  8153  08AF  3197  2794         	fcall	_PROTOCOL_Set_Lock
  8154  08B1  0008               	return
  8155  08B2                     __end_of_extension_handler:	
  8156                           
  8157                           	psect	text35
  8158  1794                     __ptext35:	
  8159 ;; *************** function _PROTOCOL_Set_Lock *****************
  8160 ;; Defined at:
  8161 ;;		line 125 in file "protocol.c"
  8162 ;; Parameters:    Size  Location     Type
  8163 ;;  lock            1    wreg     unsigned char 
  8164 ;; Auto vars:     Size  Location     Type
  8165 ;;  lock            1    1[BANK0 ] unsigned char 
  8166 ;; Return value:  Size  Location     Type
  8167 ;;                  1    wreg      void 
  8168 ;; Registers used:
  8169 ;;		wreg
  8170 ;; Tracked objects:
  8171 ;;		On entry : 0/0
  8172 ;;		On exit  : 0/0
  8173 ;;		Unchanged: 0/0
  8174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8176 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8177 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8178 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8179 ;;Total ram usage:        2 bytes
  8180 ;; Hardware stack levels used:    1
  8181 ;; Hardware stack levels required when called:    6
  8182 ;; This function calls:
  8183 ;;		Nothing
  8184 ;; This function is called by:
  8185 ;;		_extension_handler
  8186 ;;		_loop_func
  8187 ;; This function uses a non-reentrant model
  8188 ;;
  8189                           
  8190                           
  8191                           ;psect for function _PROTOCOL_Set_Lock
  8192  1794                     _PROTOCOL_Set_Lock:	
  8193                           
  8194                           ;incstack = 0
  8195                           ; Regs used in _PROTOCOL_Set_Lock: [wreg]
  8196                           ;PROTOCOL_Set_Lock@lock stored from wreg
  8197  1794  0020               	movlb	0	; select bank0
  8198  1795  00A1               	movwf	PROTOCOL_Set_Lock@lock
  8199                           
  8200                           ;protocol.c: 126: locked = lock;
  8201  1796  0821               	movf	PROTOCOL_Set_Lock@lock,w
  8202  1797  00A0               	movwf	??_PROTOCOL_Set_Lock
  8203  1798  0820               	movf	??_PROTOCOL_Set_Lock,w
  8204  1799  00D5               	movwf	_locked
  8205  179A  0008               	return
  8206  179B                     __end_of_PROTOCOL_Set_Lock:	
  8207                           
  8208                           	psect	text36
  8209  174E                     __ptext36:	
  8210 ;; *************** function _PROTOCOL_Read_Lock *****************
  8211 ;; Defined at:
  8212 ;;		line 129 in file "protocol.c"
  8213 ;; Parameters:    Size  Location     Type
  8214 ;;		None
  8215 ;; Auto vars:     Size  Location     Type
  8216 ;;		None
  8217 ;; Return value:  Size  Location     Type
  8218 ;;                  1    wreg      unsigned char 
  8219 ;; Registers used:
  8220 ;;		wreg
  8221 ;; Tracked objects:
  8222 ;;		On entry : 0/0
  8223 ;;		On exit  : 0/0
  8224 ;;		Unchanged: 0/0
  8225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8227 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8229 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8230 ;;Total ram usage:        0 bytes
  8231 ;; Hardware stack levels used:    1
  8232 ;; Hardware stack levels required when called:    6
  8233 ;; This function calls:
  8234 ;;		Nothing
  8235 ;; This function is called by:
  8236 ;;		_extension_handler
  8237 ;;		_loop_func
  8238 ;; This function uses a non-reentrant model
  8239 ;;
  8240                           
  8241                           
  8242                           ;psect for function _PROTOCOL_Read_Lock
  8243  174E                     _PROTOCOL_Read_Lock:	
  8244                           
  8245                           ;protocol.c: 130: return locked;
  8246                           
  8247                           ;incstack = 0
  8248                           ; Regs used in _PROTOCOL_Read_Lock: [wreg]
  8249  174E  0020               	movlb	0	; select bank0
  8250  174F  0855               	movf	_locked,w
  8251  1750  0008               	return
  8252  1751                     __end_of_PROTOCOL_Read_Lock:	
  8253                           
  8254                           	psect	text37
  8255  098B                     __ptext37:	
  8256 ;; *************** function _EUSART_Read *****************
  8257 ;; Defined at:
  8258 ;;		line 112 in file "mcc_generated_files/eusart.c"
  8259 ;; Parameters:    Size  Location     Type
  8260 ;;		None
  8261 ;; Auto vars:     Size  Location     Type
  8262 ;;  readValue       1    1[BANK0 ] unsigned char 
  8263 ;; Return value:  Size  Location     Type
  8264 ;;                  1    wreg      unsigned char 
  8265 ;; Registers used:
  8266 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8267 ;; Tracked objects:
  8268 ;;		On entry : 0/0
  8269 ;;		On exit  : 0/0
  8270 ;;		Unchanged: 0/0
  8271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8273 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8274 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8275 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8276 ;;Total ram usage:        2 bytes
  8277 ;; Hardware stack levels used:    1
  8278 ;; Hardware stack levels required when called:    6
  8279 ;; This function calls:
  8280 ;;		Nothing
  8281 ;; This function is called by:
  8282 ;;		_PROTOCOL_Loop
  8283 ;;		_getch
  8284 ;; This function uses a non-reentrant model
  8285 ;;
  8286                           
  8287                           
  8288                           ;psect for function _EUSART_Read
  8289  098B                     _EUSART_Read:	
  8290                           
  8291                           ;eusart.c: 114: uint8_t readValue = 0;
  8292                           
  8293                           ;incstack = 0
  8294                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  8295  098B  0020               	movlb	0	; select bank0
  8296  098C  01A1               	clrf	EUSART_Read@readValue
  8297  098D                     l3480:	
  8298                           ;eusart.c: 117: {
  8299                           
  8300                           ;eusart.c: 116: while(0 == eusartRxCount)
  8301                           
  8302  098D  085B               	movf	_eusartRxCount,w	;volatile
  8303  098E  1903               	btfsc	3,2
  8304  098F  298D               	goto	l3480
  8305                           
  8306                           ;eusart.c: 118: }
  8307                           ;eusart.c: 120: readValue = eusartRxBuffer[eusartRxTail++];
  8308  0990  085C               	movf	_eusartRxTail,w
  8309  0991  3EA0               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  8310  0992  0086               	movwf	6
  8311  0993  0187               	clrf	7
  8312  0994  0801               	movf	1,w
  8313  0995  00A0               	movwf	??_EUSART_Read
  8314  0996  0820               	movf	??_EUSART_Read,w
  8315  0997  00A1               	movwf	EUSART_Read@readValue
  8316  0998  3001               	movlw	1
  8317  0999  00A0               	movwf	??_EUSART_Read
  8318  099A  0820               	movf	??_EUSART_Read,w
  8319  099B  07DC               	addwf	_eusartRxTail,f	;volatile
  8320                           
  8321                           ;eusart.c: 121: if(sizeof(eusartRxBuffer) <= eusartRxTail)
  8322  099C  3008               	movlw	8
  8323  099D  025C               	subwf	_eusartRxTail,w	;volatile
  8324  099E  1803               	btfsc	3,0
  8325                           
  8326                           ;eusart.c: 122: {
  8327                           ;eusart.c: 123: eusartRxTail = 0;
  8328  099F  01DC               	clrf	_eusartRxTail	;volatile
  8329                           
  8330                           ;eusart.c: 124: }
  8331                           ;eusart.c: 125: PIE1bits.RCIE = 0;
  8332  09A0  0021               	movlb	1	; select bank1
  8333  09A1  1291               	bcf	17,5	;volatile
  8334                           
  8335                           ;eusart.c: 126: eusartRxCount--;
  8336  09A2  3001               	movlw	1
  8337  09A3  0020               	movlb	0	; select bank0
  8338  09A4  02DB               	subwf	_eusartRxCount,f	;volatile
  8339                           
  8340                           ;eusart.c: 127: PIE1bits.RCIE = 1;
  8341  09A5  0021               	movlb	1	; select bank1
  8342  09A6  1691               	bsf	17,5	;volatile
  8343                           
  8344                           ;eusart.c: 129: return readValue;
  8345  09A7  0020               	movlb	0	; select bank0
  8346  09A8  0821               	movf	EUSART_Read@readValue,w
  8347  09A9  0008               	return
  8348  09AA                     __end_of_EUSART_Read:	
  8349                           
  8350                           	psect	text38
  8351  0CD4                     __ptext38:	
  8352 ;; *************** function _PROTOCOL_Initialize *****************
  8353 ;; Defined at:
  8354 ;;		line 60 in file "protocol.c"
  8355 ;; Parameters:    Size  Location     Type
  8356 ;;  device_id       2    1[BANK0 ] PTR const unsigned char 
  8357 ;;		 -> STR_16(17), 
  8358 ;;  start_handle    1    3[BANK0 ] PTR void 
  8359 ;;		 -> NULL(0), 
  8360 ;;  stop_handler    1    4[BANK0 ] PTR void 
  8361 ;;		 -> NULL(0), 
  8362 ;;  set_handler     1    5[BANK0 ] PTR void 
  8363 ;;		 -> NULL(0), 
  8364 ;;  inv_handler     1    6[BANK0 ] PTR void 
  8365 ;;		 -> NULL(0), 
  8366 ;;  scaler          1    7[BANK0 ] unsigned char 
  8367 ;; Auto vars:     Size  Location     Type
  8368 ;;		None
  8369 ;; Return value:  Size  Location     Type
  8370 ;;                  1    wreg      void 
  8371 ;; Registers used:
  8372 ;;		wreg, status,2, status,0, pclath, cstack
  8373 ;; Tracked objects:
  8374 ;;		On entry : 0/0
  8375 ;;		On exit  : 0/0
  8376 ;;		Unchanged: 0/0
  8377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8378 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8379 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8380 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8381 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8382 ;;Total ram usage:        9 bytes
  8383 ;; Hardware stack levels used:    1
  8384 ;; Hardware stack levels required when called:    7
  8385 ;; This function calls:
  8386 ;;		_DATAEE_ReadByte
  8387 ;; This function is called by:
  8388 ;;		_main
  8389 ;; This function uses a non-reentrant model
  8390 ;;
  8391                           
  8392                           
  8393                           ;psect for function _PROTOCOL_Initialize
  8394  0CD4                     _PROTOCOL_Initialize:	
  8395                           
  8396                           ;protocol.c: 61: device_id_ = device_id;
  8397                           
  8398                           ;incstack = 0
  8399                           ; Regs used in _PROTOCOL_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8400  0CD4  0020               	movlb	0	; select bank0
  8401  0CD5  0822               	movf	PROTOCOL_Initialize@device_id+1,w
  8402  0CD6  0021               	movlb	1	; select bank1
  8403  0CD7  00E5               	movwf	(_device_id_+1)^(0+128)
  8404  0CD8  0020               	movlb	0	; select bank0
  8405  0CD9  0821               	movf	PROTOCOL_Initialize@device_id,w
  8406  0CDA  0021               	movlb	1	; select bank1
  8407  0CDB  00E4               	movwf	_device_id_^(0+128)
  8408                           
  8409                           ;protocol.c: 62: PROTOCOL_Start_Handler = start_handler;
  8410  0CDC  0020               	movlb	0	; select bank0
  8411  0CDD  0823               	movf	PROTOCOL_Initialize@start_handler,w
  8412  0CDE  00A8               	movwf	??_PROTOCOL_Initialize
  8413  0CDF  3000               	movlw	0
  8414  0CE0  00A9               	movwf	??_PROTOCOL_Initialize+1
  8415  0CE1  0828               	movf	??_PROTOCOL_Initialize,w
  8416  0CE2  0021               	movlb	1	; select bank1
  8417  0CE3  00EA               	movwf	_PROTOCOL_Start_Handler^(0+128)
  8418  0CE4  0020               	movlb	0	; select bank0
  8419  0CE5  0829               	movf	??_PROTOCOL_Initialize+1,w
  8420  0CE6  0021               	movlb	1	; select bank1
  8421  0CE7  00EB               	movwf	(_PROTOCOL_Start_Handler+1)^(0+128)
  8422                           
  8423                           ;protocol.c: 63: PROTOCOL_Stop_Handler = stop_handler;
  8424  0CE8  0020               	movlb	0	; select bank0
  8425  0CE9  0824               	movf	PROTOCOL_Initialize@stop_handler,w
  8426  0CEA  00A8               	movwf	??_PROTOCOL_Initialize
  8427  0CEB  3000               	movlw	0
  8428  0CEC  00A9               	movwf	??_PROTOCOL_Initialize+1
  8429  0CED  0828               	movf	??_PROTOCOL_Initialize,w
  8430  0CEE  0021               	movlb	1	; select bank1
  8431  0CEF  00E8               	movwf	_PROTOCOL_Stop_Handler^(0+128)
  8432  0CF0  0020               	movlb	0	; select bank0
  8433  0CF1  0829               	movf	??_PROTOCOL_Initialize+1,w
  8434  0CF2  0021               	movlb	1	; select bank1
  8435  0CF3  00E9               	movwf	(_PROTOCOL_Stop_Handler+1)^(0+128)
  8436                           
  8437                           ;protocol.c: 64: PROTOCOL_Set_Handler = set_handler;
  8438  0CF4  0020               	movlb	0	; select bank0
  8439  0CF5  0825               	movf	PROTOCOL_Initialize@set_handler,w
  8440  0CF6  00A8               	movwf	??_PROTOCOL_Initialize
  8441  0CF7  3000               	movlw	0
  8442  0CF8  00A9               	movwf	??_PROTOCOL_Initialize+1
  8443  0CF9  0828               	movf	??_PROTOCOL_Initialize,w
  8444  0CFA  0021               	movlb	1	; select bank1
  8445  0CFB  00E6               	movwf	_PROTOCOL_Set_Handler^(0+128)
  8446  0CFC  0020               	movlb	0	; select bank0
  8447  0CFD  0829               	movf	??_PROTOCOL_Initialize+1,w
  8448  0CFE  0021               	movlb	1	; select bank1
  8449  0CFF  00E7               	movwf	(_PROTOCOL_Set_Handler+1)^(0+128)
  8450                           
  8451                           ;protocol.c: 67: value = DATAEE_ReadByte(1);
  8452  0D00  3001               	movlw	1
  8453  0D01  3197  27C7  318C   	fcall	_DATAEE_ReadByte
  8454  0D04  0020               	movlb	0	; select bank0
  8455  0D05  00A8               	movwf	??_PROTOCOL_Initialize
  8456  0D06  0828               	movf	??_PROTOCOL_Initialize,w
  8457  0D07  00D6               	movwf	_value
  8458                           
  8459                           ;protocol.c: 69: slave_address = DATAEE_ReadByte(0);
  8460  0D08  3000               	movlw	0
  8461  0D09  3197  27C7         	fcall	_DATAEE_ReadByte
  8462  0D0B  0020               	movlb	0	; select bank0
  8463  0D0C  00A8               	movwf	??_PROTOCOL_Initialize
  8464  0D0D  0828               	movf	??_PROTOCOL_Initialize,w
  8465  0D0E  00D8               	movwf	_slave_address
  8466                           
  8467                           ;protocol.c: 72: readbuf.status = COMPLETE;
  8468  0D0F  3003               	movlw	3
  8469  0D10  00A8               	movwf	??_PROTOCOL_Initialize
  8470  0D11  0828               	movf	??_PROTOCOL_Initialize,w
  8471  0D12  0021               	movlb	1	; select bank1
  8472  0D13  00CE               	movwf	(_readbuf^(0+128)+3)
  8473                           
  8474                           ;protocol.c: 73: PROTOCOL_Inv_Handler = inv_handler;
  8475  0D14  0020               	movlb	0	; select bank0
  8476  0D15  0826               	movf	PROTOCOL_Initialize@inv_handler,w
  8477  0D16  00A8               	movwf	??_PROTOCOL_Initialize
  8478  0D17  3000               	movlw	0
  8479  0D18  00A9               	movwf	??_PROTOCOL_Initialize+1
  8480  0D19  0828               	movf	??_PROTOCOL_Initialize,w
  8481  0D1A  0021               	movlb	1	; select bank1
  8482  0D1B  00B4               	movwf	_PROTOCOL_Inv_Handler^(0+128)
  8483  0D1C  0020               	movlb	0	; select bank0
  8484  0D1D  0829               	movf	??_PROTOCOL_Initialize+1,w
  8485  0D1E  0021               	movlb	1	; select bank1
  8486  0D1F  00B5               	movwf	(_PROTOCOL_Inv_Handler+1)^(0+128)
  8487                           
  8488                           ;protocol.c: 74: tmr_scaler = scaler;
  8489  0D20  0020               	movlb	0	; select bank0
  8490  0D21  0827               	movf	PROTOCOL_Initialize@scaler,w
  8491  0D22  00A8               	movwf	??_PROTOCOL_Initialize
  8492  0D23  0828               	movf	??_PROTOCOL_Initialize,w
  8493  0D24  00ED               	movwf	_tmr_scaler
  8494  0D25  0008               	return
  8495  0D26                     __end_of_PROTOCOL_Initialize:	
  8496                           
  8497                           	psect	text39
  8498  17C7                     __ptext39:	
  8499 ;; *************** function _DATAEE_ReadByte *****************
  8500 ;; Defined at:
  8501 ;;		line 204 in file "mcc_generated_files/memory.c"
  8502 ;; Parameters:    Size  Location     Type
  8503 ;;  bAdd            1    wreg     unsigned char 
  8504 ;; Auto vars:     Size  Location     Type
  8505 ;;  bAdd            1    0[BANK0 ] unsigned char 
  8506 ;; Return value:  Size  Location     Type
  8507 ;;                  1    wreg      unsigned char 
  8508 ;; Registers used:
  8509 ;;		wreg
  8510 ;; Tracked objects:
  8511 ;;		On entry : 0/0
  8512 ;;		On exit  : 0/0
  8513 ;;		Unchanged: 0/0
  8514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8516 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8518 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8519 ;;Total ram usage:        1 bytes
  8520 ;; Hardware stack levels used:    1
  8521 ;; Hardware stack levels required when called:    6
  8522 ;; This function calls:
  8523 ;;		Nothing
  8524 ;; This function is called by:
  8525 ;;		_PROTOCOL_Initialize
  8526 ;; This function uses a non-reentrant model
  8527 ;;
  8528                           
  8529                           
  8530                           ;psect for function _DATAEE_ReadByte
  8531  17C7                     _DATAEE_ReadByte:	
  8532                           
  8533                           ;incstack = 0
  8534                           ; Regs used in _DATAEE_ReadByte: [wreg]
  8535                           ;DATAEE_ReadByte@bAdd stored from wreg
  8536  17C7  0020               	movlb	0	; select bank0
  8537  17C8  00A0               	movwf	DATAEE_ReadByte@bAdd
  8538                           
  8539                           ;memory.c: 206: EEADRL = (bAdd & 0x0ff);
  8540  17C9  0820               	movf	DATAEE_ReadByte@bAdd,w
  8541  17CA  0023               	movlb	3	; select bank3
  8542  17CB  0091               	movwf	17	;volatile
  8543                           
  8544                           ;memory.c: 207: EECON1bits.CFGS = 0;
  8545  17CC  1315               	bcf	21,6	;volsfr
  8546                           
  8547                           ;memory.c: 208: EECON1bits.EEPGD = 0;
  8548  17CD  1395               	bcf	21,7	;volsfr
  8549                           
  8550                           ;memory.c: 209: EECON1bits.RD = 1;
  8551  17CE  1415               	bsf	21,0	;volsfr
  8552                           
  8553                           ;memory.c: 210: __nop();
  8554  17CF  0000               	nop
  8555                           
  8556                           ;memory.c: 211: __nop();
  8557  17D0  0000               	nop
  8558                           
  8559                           ;memory.c: 213: return (EEDATL);
  8560  17D1  0023               	movlb	3	; select bank3
  8561  17D2  0813               	movf	19,w	;volatile
  8562  17D3  0008               	return
  8563  17D4                     __end_of_DATAEE_ReadByte:	
  8564                           
  8565                           	psect	text40
  8566  096D                     __ptext40:	
  8567 ;; *************** function _PIN_MANAGER_Initialize *****************
  8568 ;; Defined at:
  8569 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
  8570 ;; Parameters:    Size  Location     Type
  8571 ;;		None
  8572 ;; Auto vars:     Size  Location     Type
  8573 ;;		None
  8574 ;; Return value:  Size  Location     Type
  8575 ;;                  1    wreg      void 
  8576 ;; Registers used:
  8577 ;;		wreg, status,2
  8578 ;; Tracked objects:
  8579 ;;		On entry : 0/0
  8580 ;;		On exit  : 0/0
  8581 ;;		Unchanged: 0/0
  8582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8584 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8586 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8587 ;;Total ram usage:        0 bytes
  8588 ;; Hardware stack levels used:    1
  8589 ;; Hardware stack levels required when called:    6
  8590 ;; This function calls:
  8591 ;;		Nothing
  8592 ;; This function is called by:
  8593 ;;		_main
  8594 ;;		_SYSTEM_Initialize
  8595 ;; This function uses a non-reentrant model
  8596 ;;
  8597                           
  8598                           
  8599                           ;psect for function _PIN_MANAGER_Initialize
  8600  096D                     _PIN_MANAGER_Initialize:	
  8601                           
  8602                           ;pin_manager.c: 56: LATA = 0x00;
  8603                           
  8604                           ;incstack = 0
  8605                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  8606  096D  0022               	movlb	2	; select bank2
  8607  096E  018C               	clrf	12	;volatile
  8608                           
  8609                           ;pin_manager.c: 57: LATB = 0x00;
  8610  096F  018D               	clrf	13	;volatile
  8611                           
  8612                           ;pin_manager.c: 58: LATC = 0x00;
  8613  0970  018E               	clrf	14	;volatile
  8614                           
  8615                           ;pin_manager.c: 63: TRISA = 0x3F;
  8616  0971  303F               	movlw	63
  8617  0972  0021               	movlb	1	; select bank1
  8618  0973  008C               	movwf	12	;volatile
  8619                           
  8620                           ;pin_manager.c: 64: TRISB = 0xF0;
  8621  0974  30F0               	movlw	240
  8622  0975  008D               	movwf	13	;volatile
  8623                           
  8624                           ;pin_manager.c: 65: TRISC = 0x7F;
  8625  0976  307F               	movlw	127
  8626  0977  008E               	movwf	14	;volatile
  8627                           
  8628                           ;pin_manager.c: 70: ANSELC = 0x4F;
  8629  0978  304F               	movlw	79
  8630  0979  0023               	movlb	3	; select bank3
  8631  097A  008E               	movwf	14	;volatile
  8632                           
  8633                           ;pin_manager.c: 71: ANSELB = 0x00;
  8634  097B  018D               	clrf	13	;volatile
  8635                           
  8636                           ;pin_manager.c: 72: ANSELA = 0x17;
  8637  097C  3017               	movlw	23
  8638  097D  008C               	movwf	12	;volatile
  8639                           
  8640                           ;pin_manager.c: 77: WPUB = 0x00;
  8641  097E  0024               	movlb	4	; select bank4
  8642  097F  018D               	clrf	13	;volatile
  8643                           
  8644                           ;pin_manager.c: 78: WPUA = 0x3F;
  8645  0980  303F               	movlw	63
  8646  0981  008C               	movwf	12	;volatile
  8647                           
  8648                           ;pin_manager.c: 79: WPUC = 0x3F;
  8649  0982  303F               	movlw	63
  8650  0983  008E               	movwf	14	;volatile
  8651                           
  8652                           ;pin_manager.c: 80: OPTION_REGbits.nWPUEN = 0;
  8653  0984  0021               	movlb	1	; select bank1
  8654  0985  1395               	bcf	21,7	;volatile
  8655                           
  8656                           ;pin_manager.c: 86: APFCON1 = 0x00;
  8657  0986  0022               	movlb	2	; select bank2
  8658  0987  019E               	clrf	30	;volatile
  8659                           
  8660                           ;pin_manager.c: 87: APFCON0 = 0x84;
  8661  0988  3084               	movlw	132
  8662  0989  009D               	movwf	29	;volatile
  8663  098A  0008               	return
  8664  098B                     __end_of_PIN_MANAGER_Initialize:	
  8665                           
  8666                           	psect	text41
  8667  176F                     __ptext41:	
  8668 ;; *************** function _OSCILLATOR_Initialize *****************
  8669 ;; Defined at:
  8670 ;;		line 81 in file "mcc_generated_files/mcc.c"
  8671 ;; Parameters:    Size  Location     Type
  8672 ;;		None
  8673 ;; Auto vars:     Size  Location     Type
  8674 ;;		None
  8675 ;; Return value:  Size  Location     Type
  8676 ;;                  1    wreg      void 
  8677 ;; Registers used:
  8678 ;;		wreg, status,2
  8679 ;; Tracked objects:
  8680 ;;		On entry : 0/0
  8681 ;;		On exit  : 0/0
  8682 ;;		Unchanged: 0/0
  8683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8684 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8685 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8686 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8687 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8688 ;;Total ram usage:        0 bytes
  8689 ;; Hardware stack levels used:    1
  8690 ;; Hardware stack levels required when called:    6
  8691 ;; This function calls:
  8692 ;;		Nothing
  8693 ;; This function is called by:
  8694 ;;		_main
  8695 ;;		_SYSTEM_Initialize
  8696 ;; This function uses a non-reentrant model
  8697 ;;
  8698                           
  8699                           
  8700                           ;psect for function _OSCILLATOR_Initialize
  8701  176F                     _OSCILLATOR_Initialize:	
  8702                           
  8703                           ;mcc.c: 84: OSCCON = 0x68;
  8704                           
  8705                           ;incstack = 0
  8706                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  8707  176F  3068               	movlw	104
  8708  1770  0021               	movlb	1	; select bank1
  8709  1771  0099               	movwf	25	;volatile
  8710                           
  8711                           ;mcc.c: 86: OSCTUNE = 0x00;
  8712  1772  0198               	clrf	24	;volatile
  8713  1773  0008               	return
  8714  1774                     __end_of_OSCILLATOR_Initialize:	
  8715                           
  8716                           	psect	text42
  8717  08CA                     __ptext42:	
  8718 ;; *************** function _I2C2_Initialize *****************
  8719 ;; Defined at:
  8720 ;;		line 198 in file "mcc_generated_files/i2c2.c"
  8721 ;; Parameters:    Size  Location     Type
  8722 ;;		None
  8723 ;; Auto vars:     Size  Location     Type
  8724 ;;		None
  8725 ;; Return value:  Size  Location     Type
  8726 ;;                  1    wreg      void 
  8727 ;; Registers used:
  8728 ;;		wreg, status,2
  8729 ;; Tracked objects:
  8730 ;;		On entry : 0/0
  8731 ;;		On exit  : 0/0
  8732 ;;		Unchanged: 0/0
  8733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8736 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8737 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8738 ;;Total ram usage:        1 bytes
  8739 ;; Hardware stack levels used:    1
  8740 ;; Hardware stack levels required when called:    6
  8741 ;; This function calls:
  8742 ;;		Nothing
  8743 ;; This function is called by:
  8744 ;;		_main
  8745 ;;		_SYSTEM_Initialize
  8746 ;; This function uses a non-reentrant model
  8747 ;;
  8748                           
  8749                           
  8750                           ;psect for function _I2C2_Initialize
  8751  08CA                     _I2C2_Initialize:	
  8752                           
  8753                           ;i2c2.c: 200: i2c2_object.pTrHead = i2c2_tr_queue;
  8754                           
  8755                           ;incstack = 0
  8756                           ; Regs used in _I2C2_Initialize: [wreg+status,2]
  8757  08CA  30DB               	movlw	(low (_i2c2_tr_queue| 0))& (0+255)
  8758  08CB  0020               	movlb	0	; select bank0
  8759  08CC  00A0               	movwf	??_I2C2_Initialize
  8760  08CD  0820               	movf	??_I2C2_Initialize,w
  8761  08CE  00C8               	movwf	low ((_i2c2_object| 0+1))
  8762                           
  8763                           ;i2c2.c: 201: i2c2_object.pTrTail = i2c2_tr_queue;
  8764  08CF  30DB               	movlw	(low (_i2c2_tr_queue| 0))& (0+255)
  8765  08D0  00A0               	movwf	??_I2C2_Initialize
  8766  08D1  0820               	movf	??_I2C2_Initialize,w
  8767  08D2  00C7               	movwf	_i2c2_object
  8768                           
  8769                           ;i2c2.c: 202: i2c2_object.trStatus.s.empty = 1;
  8770  08D3  14C9               	bsf	_i2c2_object+2,1
  8771                           
  8772                           ;i2c2.c: 203: i2c2_object.trStatus.s.full = 0;
  8773  08D4  1049               	bcf	_i2c2_object+2,0
  8774                           
  8775                           ;i2c2.c: 205: i2c2_object.i2cErrors = 0;
  8776  08D5  01CB               	clrf	_i2c2_object+4
  8777                           
  8778                           ;i2c2.c: 208: SSP2STAT = 0x00;
  8779  08D6  0024               	movlb	4	; select bank4
  8780  08D7  019C               	clrf	28	;volatile
  8781                           
  8782                           ;i2c2.c: 210: SSP2CON1 = 0x28;
  8783  08D8  3028               	movlw	40
  8784  08D9  009D               	movwf	29	;volatile
  8785                           
  8786                           ;i2c2.c: 212: SSP2CON3 = 0x00;
  8787  08DA  019F               	clrf	31	;volatile
  8788                           
  8789                           ;i2c2.c: 214: SSP2ADD = 0x09;
  8790  08DB  3009               	movlw	9
  8791  08DC  009A               	movwf	26	;volatile
  8792                           
  8793                           ;i2c2.c: 218: PIR4bits.SSP2IF = 0;
  8794  08DD  0020               	movlb	0	; select bank0
  8795  08DE  1014               	bcf	20,0	;volatile
  8796                           
  8797                           ;i2c2.c: 220: PIE4bits.SSP2IE = 1;
  8798  08DF  0021               	movlb	1	; select bank1
  8799  08E0  1414               	bsf	20,0	;volatile
  8800  08E1  0008               	return
  8801  08E2                     __end_of_I2C2_Initialize:	
  8802                           
  8803                           	psect	text43
  8804  09CA                     __ptext43:	
  8805 ;; *************** function _I2C1_Initialize *****************
  8806 ;; Defined at:
  8807 ;;		line 30 in file "mcc_generated_files/i2c1.c"
  8808 ;; Parameters:    Size  Location     Type
  8809 ;;		None
  8810 ;; Auto vars:     Size  Location     Type
  8811 ;;		None
  8812 ;; Return value:  Size  Location     Type
  8813 ;;                  1    wreg      void 
  8814 ;; Registers used:
  8815 ;;		wreg, status,2, status,0, pclath, cstack
  8816 ;; Tracked objects:
  8817 ;;		On entry : 0/0
  8818 ;;		On exit  : 0/0
  8819 ;;		Unchanged: 0/0
  8820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8822 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8823 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8824 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8825 ;;Total ram usage:        2 bytes
  8826 ;; Hardware stack levels used:    1
  8827 ;; Hardware stack levels required when called:    7
  8828 ;; This function calls:
  8829 ;;		_PROTOCOL_Read_Device_Address
  8830 ;; This function is called by:
  8831 ;;		_main
  8832 ;;		_SYSTEM_Initialize
  8833 ;; This function uses a non-reentrant model
  8834 ;;
  8835                           
  8836                           
  8837                           ;psect for function _I2C1_Initialize
  8838  09CA                     _I2C1_Initialize:	
  8839                           
  8840                           ;i2c1.c: 34: _delay((unsigned long)((2000)*(4000000/4000.0)));
  8841                           
  8842                           ;incstack = 0
  8843                           ; Regs used in _I2C1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8844  09CA  300B               	movlw	11
  8845  09CB  0020               	movlb	0	; select bank0
  8846  09CC  00A1               	movwf	??_I2C1_Initialize+1
  8847  09CD  3026               	movlw	38
  8848  09CE  00A0               	movwf	??_I2C1_Initialize
  8849  09CF  305D               	movlw	93
  8850  09D0                     u5437:	
  8851  09D0  0B89               	decfsz	9,f
  8852  09D1  29D0               	goto	u5437
  8853  09D2  0BA0               	decfsz	??_I2C1_Initialize,f
  8854  09D3  29D0               	goto	u5437
  8855  09D4  0BA1               	decfsz	??_I2C1_Initialize+1,f
  8856  09D5  29D0               	goto	u5437
  8857  09D6  3200               	nop2
  8858                           
  8859                           ;i2c1.c: 38: SSP1STAT = 0x80;
  8860  09D7  3080               	movlw	128
  8861  09D8  0024               	movlb	4	; select bank4
  8862  09D9  0094               	movwf	20	;volatile
  8863                           
  8864                           ;i2c1.c: 40: SSP1CON1 = 0x26;
  8865  09DA  3026               	movlw	38
  8866  09DB  0095               	movwf	21	;volatile
  8867                           
  8868                           ;i2c1.c: 42: SSP1CON2 = 0x81;
  8869  09DC  3081               	movlw	129
  8870  09DD  0096               	movwf	22	;volatile
  8871                           
  8872                           ;i2c1.c: 44: SSP1CON3 = 0x00;
  8873  09DE  0197               	clrf	23	;volatile
  8874                           
  8875                           ;i2c1.c: 46: SSP1MSK = (0x7F << 1);
  8876  09DF  30FE               	movlw	254
  8877  09E0  0093               	movwf	19	;volatile
  8878                           
  8879                           ;i2c1.c: 48: SSP1ADD = (PROTOCOL_Read_Device_Address() << 1);
  8880  09E1  3197  274B         	fcall	_PROTOCOL_Read_Device_Address
  8881  09E3  0709               	addwf	9,w
  8882  09E4  0024               	movlb	4	; select bank4
  8883  09E5  0092               	movwf	18	;volatile
  8884                           
  8885                           ;i2c1.c: 51: PIR1bits.SSP1IF = 0;
  8886  09E6  0020               	movlb	0	; select bank0
  8887  09E7  1191               	bcf	17,3	;volatile
  8888                           
  8889                           ;i2c1.c: 53: PIE1bits.SSP1IE = 1;
  8890  09E8  0021               	movlb	1	; select bank1
  8891  09E9  1591               	bsf	17,3	;volatile
  8892  09EA  0008               	return
  8893  09EB                     __end_of_I2C1_Initialize:	
  8894                           
  8895                           	psect	text44
  8896  174B                     __ptext44:	
  8897 ;; *************** function _PROTOCOL_Read_Device_Address *****************
  8898 ;; Defined at:
  8899 ;;		line 94 in file "protocol.c"
  8900 ;; Parameters:    Size  Location     Type
  8901 ;;		None
  8902 ;; Auto vars:     Size  Location     Type
  8903 ;;		None
  8904 ;; Return value:  Size  Location     Type
  8905 ;;                  1    wreg      unsigned char 
  8906 ;; Registers used:
  8907 ;;		wreg
  8908 ;; Tracked objects:
  8909 ;;		On entry : 0/0
  8910 ;;		On exit  : 0/0
  8911 ;;		Unchanged: 0/0
  8912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8913 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8914 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8916 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8917 ;;Total ram usage:        0 bytes
  8918 ;; Hardware stack levels used:    1
  8919 ;; Hardware stack levels required when called:    6
  8920 ;; This function calls:
  8921 ;;		Nothing
  8922 ;; This function is called by:
  8923 ;;		_I2C1_Initialize
  8924 ;;		_PROTOCOL_Loop
  8925 ;; This function uses a non-reentrant model
  8926 ;;
  8927                           
  8928                           
  8929                           ;psect for function _PROTOCOL_Read_Device_Address
  8930  174B                     _PROTOCOL_Read_Device_Address:	
  8931                           
  8932                           ;protocol.c: 95: return slave_address;
  8933                           
  8934                           ;incstack = 0
  8935                           ; Regs used in _PROTOCOL_Read_Device_Address: [wreg]
  8936  174B  0020               	movlb	0	; select bank0
  8937  174C  0858               	movf	_slave_address,w
  8938  174D  0008               	return
  8939  174E                     __end_of_PROTOCOL_Read_Device_Address:	
  8940                           
  8941                           	psect	text45
  8942  08E2                     __ptext45:	
  8943 ;; *************** function _EUSART_Initialize *****************
  8944 ;; Defined at:
  8945 ;;		line 75 in file "mcc_generated_files/eusart.c"
  8946 ;; Parameters:    Size  Location     Type
  8947 ;;		None
  8948 ;; Auto vars:     Size  Location     Type
  8949 ;;		None
  8950 ;; Return value:  Size  Location     Type
  8951 ;;                  1    wreg      void 
  8952 ;; Registers used:
  8953 ;;		wreg, status,2
  8954 ;; Tracked objects:
  8955 ;;		On entry : 0/0
  8956 ;;		On exit  : 0/0
  8957 ;;		Unchanged: 0/0
  8958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8960 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8961 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8962 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8963 ;;Total ram usage:        1 bytes
  8964 ;; Hardware stack levels used:    1
  8965 ;; Hardware stack levels required when called:    6
  8966 ;; This function calls:
  8967 ;;		Nothing
  8968 ;; This function is called by:
  8969 ;;		_main
  8970 ;;		_SYSTEM_Initialize
  8971 ;; This function uses a non-reentrant model
  8972 ;;
  8973                           
  8974                           
  8975                           ;psect for function _EUSART_Initialize
  8976  08E2                     _EUSART_Initialize:	
  8977                           
  8978                           ;eusart.c: 78: PIE1bits.RCIE = 0;
  8979                           
  8980                           ;incstack = 0
  8981                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  8982  08E2  0021               	movlb	1	; select bank1
  8983  08E3  1291               	bcf	17,5	;volatile
  8984                           
  8985                           ;eusart.c: 79: PIE1bits.TXIE = 0;
  8986  08E4  1211               	bcf	17,4	;volatile
  8987                           
  8988                           ;eusart.c: 84: BAUDCON = 0x08;
  8989  08E5  3008               	movlw	8
  8990  08E6  0023               	movlb	3	; select bank3
  8991  08E7  009F               	movwf	31	;volatile
  8992                           
  8993                           ;eusart.c: 87: RCSTA = 0x90;
  8994  08E8  3090               	movlw	144
  8995  08E9  009D               	movwf	29	;volatile
  8996                           
  8997                           ;eusart.c: 90: TXSTA = 0x24;
  8998  08EA  3024               	movlw	36
  8999  08EB  009E               	movwf	30	;volatile
  9000                           
  9001                           ;eusart.c: 93: SPBRGL = 0x67;
  9002  08EC  3067               	movlw	103
  9003  08ED  009B               	movwf	27	;volatile
  9004                           
  9005                           ;eusart.c: 96: SPBRGH = 0x00;
  9006  08EE  019C               	clrf	28	;volatile
  9007                           
  9008                           ;eusart.c: 100: eusartTxHead = 0;
  9009  08EF  01FC               	clrf	_eusartTxHead	;volatile
  9010                           
  9011                           ;eusart.c: 101: eusartTxTail = 0;
  9012  08F0  0020               	movlb	0	; select bank0
  9013  08F1  01DF               	clrf	_eusartTxTail	;volatile
  9014                           
  9015                           ;eusart.c: 102: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
  9016  08F2  3008               	movlw	8
  9017  08F3  00A0               	movwf	??_EUSART_Initialize
  9018  08F4  0820               	movf	??_EUSART_Initialize,w
  9019  08F5  00DE               	movwf	_eusartTxBufferRemaining	;volatile
  9020                           
  9021                           ;eusart.c: 104: eusartRxHead = 0;
  9022  08F6  01DD               	clrf	_eusartRxHead	;volatile
  9023                           
  9024                           ;eusart.c: 105: eusartRxTail = 0;
  9025  08F7  01DC               	clrf	_eusartRxTail	;volatile
  9026                           
  9027                           ;eusart.c: 106: eusartRxCount = 0;
  9028  08F8  01DB               	clrf	_eusartRxCount	;volatile
  9029                           
  9030                           ;eusart.c: 109: PIE1bits.RCIE = 1;
  9031  08F9  0021               	movlb	1	; select bank1
  9032  08FA  1691               	bsf	17,5	;volatile
  9033  08FB  0008               	return
  9034  08FC                     __end_of_EUSART_Initialize:	
  9035                           
  9036                           	psect	intentry
  9037  0004                     __pintentry:	
  9038 ;; *************** function _INTERRUPT_InterruptManager *****************
  9039 ;; Defined at:
  9040 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  9041 ;; Parameters:    Size  Location     Type
  9042 ;;		None
  9043 ;; Auto vars:     Size  Location     Type
  9044 ;;		None
  9045 ;; Return value:  Size  Location     Type
  9046 ;;                  1    wreg      void 
  9047 ;; Registers used:
  9048 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9049 ;; Tracked objects:
  9050 ;;		On entry : 0/0
  9051 ;;		On exit  : 0/0
  9052 ;;		Unchanged: 0/0
  9053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9055 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9056 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9057 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9058 ;;Total ram usage:        1 bytes
  9059 ;; Hardware stack levels used:    1
  9060 ;; Hardware stack levels required when called:    5
  9061 ;; This function calls:
  9062 ;;		_EUSART_Receive_ISR
  9063 ;;		_EUSART_Transmit_ISR
  9064 ;;		_I2C1_ISR
  9065 ;;		_I2C2_BusCollisionISR
  9066 ;;		_I2C2_ISR
  9067 ;; This function is called by:
  9068 ;;		Interrupt level 1
  9069 ;; This function uses a non-reentrant model
  9070 ;;
  9071                           
  9072  0004                     _INTERRUPT_InterruptManager:	
  9073                           
  9074                           ;incstack = 0
  9075  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  9076                           
  9077                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9078  0005  3180               	pagesel	$
  9079  0006  0020               	movlb	0	; select bank0
  9080  0007  087F               	movf	127,w
  9081  0008  00FB               	movwf	??_INTERRUPT_InterruptManager
  9082                           
  9083                           ;interrupt_manager.c: 54: if(INTCONbits.PEIE == 1 && PIE1bits.TXIE == 1 && PIR1bits.TXIF
      +                           == 1)
  9084  0009  1F0B               	btfss	11,6	;volatile
  9085  000A  2815               	goto	i1l323
  9086  000B  0021               	movlb	1	; select bank1
  9087  000C  1E11               	btfss	17,4	;volatile
  9088  000D  2815               	goto	i1l323
  9089  000E  0020               	movlb	0	; select bank0
  9090  000F  1E11               	btfss	17,4	;volatile
  9091  0010  2815               	goto	i1l323
  9092                           
  9093                           ;interrupt_manager.c: 55: {
  9094                           ;interrupt_manager.c: 56: EUSART_Transmit_ISR();
  9095  0011  3189  2133  3180   	fcall	_EUSART_Transmit_ISR
  9096                           
  9097                           ;interrupt_manager.c: 57: }
  9098  0014  2843               	goto	i1l333
  9099  0015                     i1l323:	
  9100                           
  9101                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits
      +                          .RCIF == 1)
  9102  0015  1F0B               	btfss	11,6	;volatile
  9103  0016  2821               	goto	i1l325
  9104  0017  0021               	movlb	1	; select bank1
  9105  0018  1E91               	btfss	17,5	;volatile
  9106  0019  2821               	goto	i1l325
  9107  001A  0020               	movlb	0	; select bank0
  9108  001B  1E91               	btfss	17,5	;volatile
  9109  001C  2821               	goto	i1l325
  9110                           
  9111                           ;interrupt_manager.c: 59: {
  9112                           ;interrupt_manager.c: 60: EUSART_Receive_ISR();
  9113  001D  3188  20FC  3180   	fcall	_EUSART_Receive_ISR
  9114                           
  9115                           ;interrupt_manager.c: 61: }
  9116  0020  2843               	goto	i1l333
  9117  0021                     i1l325:	
  9118                           
  9119                           ;interrupt_manager.c: 62: else if(INTCONbits.PEIE == 1 && PIE1bits.SSP1IE == 1 && PIR1bi
      +                          ts.SSP1IF == 1)
  9120  0021  1F0B               	btfss	11,6	;volatile
  9121  0022  282D               	goto	i1l327
  9122  0023  0021               	movlb	1	; select bank1
  9123  0024  1D91               	btfss	17,3	;volatile
  9124  0025  282D               	goto	i1l327
  9125  0026  0020               	movlb	0	; select bank0
  9126  0027  1D91               	btfss	17,3	;volatile
  9127  0028  282D               	goto	i1l327
  9128                           
  9129                           ;interrupt_manager.c: 63: {
  9130                           ;interrupt_manager.c: 64: I2C1_ISR();
  9131  0029  318A  2258  3180   	fcall	_I2C1_ISR
  9132                           
  9133                           ;interrupt_manager.c: 65: }
  9134  002C  2843               	goto	i1l333
  9135  002D                     i1l327:	
  9136                           
  9137                           ;interrupt_manager.c: 66: else if(INTCONbits.PEIE == 1 && PIE4bits.BCL2IE == 1 && PIR4bi
      +                          ts.BCL2IF == 1)
  9138  002D  1F0B               	btfss	11,6	;volatile
  9139  002E  2839               	goto	i1l329
  9140  002F  0021               	movlb	1	; select bank1
  9141  0030  1C94               	btfss	20,1	;volatile
  9142  0031  2839               	goto	i1l329
  9143  0032  0020               	movlb	0	; select bank0
  9144  0033  1C94               	btfss	20,1	;volatile
  9145  0034  2839               	goto	i1l329
  9146                           
  9147                           ;interrupt_manager.c: 67: {
  9148                           ;interrupt_manager.c: 68: I2C2_BusCollisionISR();
  9149  0035  3180  2002  3180   	fcall	_I2C2_BusCollisionISR
  9150                           
  9151                           ;interrupt_manager.c: 69: }
  9152  0038  2843               	goto	i1l333
  9153  0039                     i1l329:	
  9154                           
  9155                           ;interrupt_manager.c: 70: else if(INTCONbits.PEIE == 1 && PIE4bits.SSP2IE == 1 && PIR4bi
      +                          ts.SSP2IF == 1)
  9156  0039  1F0B               	btfss	11,6	;volatile
  9157  003A  2843               	goto	i1l333
  9158  003B  0021               	movlb	1	; select bank1
  9159  003C  1C14               	btfss	20,0	;volatile
  9160  003D  2843               	goto	i1l333
  9161  003E  0020               	movlb	0	; select bank0
  9162  003F  1C14               	btfss	20,0	;volatile
  9163  0040  2843               	goto	i1l333
  9164                           
  9165                           ;interrupt_manager.c: 71: {
  9166                           ;interrupt_manager.c: 72: I2C2_ISR();
  9167  0041  3185  25E8         	fcall	_I2C2_ISR
  9168  0043                     i1l333:	
  9169                           ;interrupt_manager.c: 74: else
  9170                           ;interrupt_manager.c: 75: {
  9171                           
  9172                           ;interrupt_manager.c: 73: }
  9173                           
  9174  0043  087B               	movf	??_INTERRUPT_InterruptManager,w
  9175  0044  0020               	movlb	0	; select bank0
  9176  0045  00FF               	movwf	127
  9177  0046  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  9178  0047  0009               	retfie
  9179  0048                     __end_of_INTERRUPT_InterruptManager:	
  9180                           
  9181                           	psect	text47
  9182  05E8                     __ptext47:	
  9183 ;; *************** function _I2C2_ISR *****************
  9184 ;; Defined at:
  9185 ;;		line 233 in file "mcc_generated_files/i2c2.c"
  9186 ;; Parameters:    Size  Location     Type
  9187 ;;		None
  9188 ;; Auto vars:     Size  Location     Type
  9189 ;;		None
  9190 ;; Return value:  Size  Location     Type
  9191 ;;                  1    wreg      void 
  9192 ;; Registers used:
  9193 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9194 ;; Tracked objects:
  9195 ;;		On entry : 0/0
  9196 ;;		On exit  : 0/0
  9197 ;;		Unchanged: 0/0
  9198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9200 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9201 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9202 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9203 ;;Total ram usage:        4 bytes
  9204 ;; Hardware stack levels used:    1
  9205 ;; Hardware stack levels required when called:    1
  9206 ;; This function calls:
  9207 ;;		_I2C2_FunctionComplete
  9208 ;;		_I2C2_Stop
  9209 ;; This function is called by:
  9210 ;;		_INTERRUPT_InterruptManager
  9211 ;; This function uses a non-reentrant model
  9212 ;;
  9213                           
  9214                           
  9215                           ;psect for function _I2C2_ISR
  9216  05E8                     _I2C2_ISR:	
  9217                           
  9218                           ;i2c2.c: 236: static uint8_t *pi2c_buf_ptr;
  9219                           ;i2c2.c: 237: static uint16_t i2c_address = 0;
  9220                           ;i2c2.c: 238: static uint8_t i2c_bytes_left = 0;
  9221                           ;i2c2.c: 239: static uint8_t i2c_10bit_address_restart = 0;
  9222                           ;i2c2.c: 241: PIR4bits.SSP2IF = 0;
  9223                           
  9224                           ;incstack = 0
  9225                           ; Regs used in _I2C2_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9226  05E8  0020               	movlb	0	; select bank0
  9227  05E9  1014               	bcf	20,0	;volatile
  9228                           
  9229                           ;i2c2.c: 245: if(SSP2CON1bits.WCOL)
  9230  05EA  0024               	movlb	4	; select bank4
  9231  05EB  1F9D               	btfss	29,7	;volatile
  9232  05EC  2F1B               	goto	i1l3930
  9233                           
  9234                           ;i2c2.c: 246: {
  9235                           ;i2c2.c: 248: SSP2CON1bits.WCOL = 0;
  9236  05ED  139D               	bcf	29,7	;volatile
  9237                           
  9238                           ;i2c2.c: 249: i2c2_state = S_MASTER_IDLE;
  9239  05EE  0020               	movlb	0	; select bank0
  9240  05EF  01E6               	clrf	_i2c2_state
  9241                           
  9242                           ;i2c2.c: 250: *(p_i2c2_current->pTrFlag) = I2C2_MESSAGE_FAIL;
  9243  05F0  0863               	movf	_p_i2c2_current,w
  9244  05F1  3E02               	addlw	2
  9245  05F2  0086               	movwf	6
  9246  05F3  0187               	clrf	7
  9247  05F4  0801               	movf	1,w
  9248  05F5  0086               	movwf	6
  9249  05F6  0187               	clrf	7
  9250  05F7  0181               	clrf	1
  9251  05F8  0A81               	incf	1,f
  9252                           
  9253                           ;i2c2.c: 253: p_i2c2_current = (0);
  9254  05F9  01E3               	clrf	_p_i2c2_current
  9255                           
  9256                           ;i2c2.c: 255: return;
  9257  05FA  0008               	return
  9258  05FB                     i1l184:	
  9259                           ;i2c2.c: 260: {
  9260                           ;i2c2.c: 261: case S_MASTER_IDLE:
  9261                           
  9262                           ;i2c2.c: 256: }
  9263                           ;i2c2.c: 259: switch(i2c2_state)
  9264                           
  9265                           
  9266                           ;i2c2.c: 263: if(i2c2_object.trStatus.s.empty != 1)
  9267  05FB  18C9               	btfsc	_i2c2_object+2,1
  9268  05FC  0008               	return
  9269                           
  9270                           ;i2c2.c: 264: {
  9271                           ;i2c2.c: 266: p_i2c2_current = i2c2_object.pTrHead;
  9272  05FD  0848               	movf	low ((_i2c2_object| 0+1)),w
  9273  05FE  00F2               	movwf	??_I2C2_ISR
  9274  05FF  0872               	movf	??_I2C2_ISR,w
  9275  0600  00E3               	movwf	_p_i2c2_current
  9276                           
  9277                           ;i2c2.c: 267: i2c2_trb_count = i2c2_object.pTrHead->count;
  9278  0601  0848               	movf	low ((_i2c2_object| 0+1)),w
  9279  0602  0086               	movwf	6
  9280  0603  0187               	clrf	7
  9281  0604  0801               	movf	1,w
  9282  0605  00F2               	movwf	??_I2C2_ISR
  9283  0606  0872               	movf	??_I2C2_ISR,w
  9284  0607  00E5               	movwf	_i2c2_trb_count
  9285                           
  9286                           ;i2c2.c: 268: p_i2c2_trb_current = i2c2_object.pTrHead->ptrb_list;
  9287  0608  0848               	movf	low ((_i2c2_object| 0+1)),w
  9288  0609  0086               	movwf	6
  9289  060A  0187               	clrf	7
  9290  060B  3F41               	moviw [1]fsr1
  9291  060C  00E4               	movwf	_p_i2c2_trb_current
  9292                           
  9293                           ;i2c2.c: 270: i2c2_object.pTrHead++;
  9294  060D  3003               	movlw	3
  9295  060E  00F2               	movwf	??_I2C2_ISR
  9296  060F  0872               	movf	??_I2C2_ISR,w
  9297  0610  07C8               	addwf	low ((_i2c2_object| 0+1)),f
  9298                           
  9299                           ;i2c2.c: 273: if(i2c2_object.pTrHead == (i2c2_tr_queue + 1))
  9300  0611  0848               	movf	low ((_i2c2_object| 0+1)),w
  9301  0612  3ADE               	xorlw	(low ((_i2c2_tr_queue| 0+3)))& (0+255)
  9302  0613  1D03               	skipz
  9303  0614  2E19               	goto	i1l3818
  9304                           
  9305                           ;i2c2.c: 274: {
  9306                           ;i2c2.c: 276: i2c2_object.pTrHead = i2c2_tr_queue;
  9307  0615  30DB               	movlw	(low (_i2c2_tr_queue| 0))& (0+255)
  9308  0616  00F2               	movwf	??_I2C2_ISR
  9309  0617  0872               	movf	??_I2C2_ISR,w
  9310  0618  00C8               	movwf	low ((_i2c2_object| 0+1))
  9311  0619                     i1l3818:	
  9312                           
  9313                           ;i2c2.c: 277: }
  9314                           ;i2c2.c: 281: i2c2_object.trStatus.s.full = 0;
  9315  0619  1049               	bcf	_i2c2_object+2,0
  9316                           
  9317                           ;i2c2.c: 284: if(i2c2_object.pTrHead == i2c2_object.pTrTail)
  9318  061A  0848               	movf	low ((_i2c2_object| 0+1)),w
  9319  061B  0647               	xorwf	_i2c2_object,w
  9320  061C  1903               	btfsc	3,2
  9321                           
  9322                           ;i2c2.c: 285: {
  9323                           ;i2c2.c: 287: i2c2_object.trStatus.s.empty = 1;
  9324  061D  14C9               	bsf	_i2c2_object+2,1
  9325                           
  9326                           ;i2c2.c: 288: }
  9327                           ;i2c2.c: 291: SSP2CON2bits.SEN = 1;
  9328  061E  0024               	movlb	4	; select bank4
  9329  061F  141E               	bsf	30,0	;volatile
  9330                           
  9331                           ;i2c2.c: 294: i2c2_state = S_MASTER_SEND_ADDR;
  9332  0620  3002               	movlw	2
  9333  0621  00F2               	movwf	??_I2C2_ISR
  9334  0622  0872               	movf	??_I2C2_ISR,w
  9335  0623  0020               	movlb	0	; select bank0
  9336  0624  00E6               	movwf	_i2c2_state
  9337                           
  9338                           ;i2c2.c: 295: }
  9339                           ;i2c2.c: 297: break;
  9340  0625  0008               	return
  9341  0626                     i1l189:	
  9342                           ;i2c2.c: 299: case S_MASTER_RESTART:
  9343                           
  9344                           
  9345                           ;i2c2.c: 304: SSP2CON2bits.RSEN = 1;
  9346  0626  0024               	movlb	4	; select bank4
  9347  0627  149E               	bsf	30,1	;volatile
  9348                           
  9349                           ;i2c2.c: 307: i2c2_state = S_MASTER_SEND_ADDR;
  9350  0628  3002               	movlw	2
  9351  0629  00F2               	movwf	??_I2C2_ISR
  9352  062A  0872               	movf	??_I2C2_ISR,w
  9353  062B  0020               	movlb	0	; select bank0
  9354  062C  00E6               	movwf	_i2c2_state
  9355                           
  9356                           ;i2c2.c: 309: break;
  9357  062D  0008               	return
  9358  062E                     i1l190:	
  9359                           ;i2c2.c: 311: case S_MASTER_SEND_ADDR_10BIT_LSB:
  9360                           
  9361                           
  9362                           ;i2c2.c: 313: if(SSP2CON2bits.ACKSTAT)
  9363  062E  0024               	movlb	4	; select bank4
  9364  062F  1F1E               	btfss	30,6	;volatile
  9365  0630  2E3A               	goto	i1l3830
  9366                           
  9367                           ;i2c2.c: 314: {
  9368                           ;i2c2.c: 315: i2c2_object.i2cErrors++;
  9369  0631  3001               	movlw	1
  9370  0632  00F2               	movwf	??_I2C2_ISR
  9371  0633  0872               	movf	??_I2C2_ISR,w
  9372  0634  0020               	movlb	0	; select bank0
  9373  0635  07CB               	addwf	_i2c2_object+4,f
  9374                           
  9375                           ;i2c2.c: 316: I2C2_Stop(I2C2_MESSAGE_ADDRESS_NO_ACK);
  9376  0636  3004               	movlw	4
  9377  0637  3188  20B2         	fcall	_I2C2_Stop
  9378                           
  9379                           ;i2c2.c: 317: }
  9380  0639  0008               	return
  9381  063A                     i1l3830:	
  9382                           
  9383                           ;i2c2.c: 318: else
  9384                           ;i2c2.c: 319: {
  9385                           ;i2c2.c: 321: SSP2BUF = (i2c_address >> 1) & 0x00FF;
  9386  063A  0020               	movlb	0	; select bank0
  9387  063B  086C               	movf	I2C2_ISR@i2c_address+1,w
  9388  063C  00F3               	movwf	??_I2C2_ISR+1
  9389  063D  086B               	movf	I2C2_ISR@i2c_address,w
  9390  063E  00F2               	movwf	??_I2C2_ISR
  9391  063F  36F3               	lsrf	??_I2C2_ISR+1,f
  9392  0640  0CF2               	rrf	??_I2C2_ISR,f
  9393  0641  0872               	movf	??_I2C2_ISR,w
  9394  0642  0024               	movlb	4	; select bank4
  9395  0643  0099               	movwf	25	;volatile
  9396                           
  9397                           ;i2c2.c: 324: if(i2c_address & 0x01)
  9398  0644  0020               	movlb	0	; select bank0
  9399  0645  1C6B               	btfss	I2C2_ISR@i2c_address,0
  9400  0646  2E4C               	goto	i1l3836
  9401                           
  9402                           ;i2c2.c: 325: {
  9403                           ;i2c2.c: 328: i2c2_state = S_MASTER_10BIT_RESTART;
  9404  0647  300B               	movlw	11
  9405  0648  00F2               	movwf	??_I2C2_ISR
  9406  0649  0872               	movf	??_I2C2_ISR,w
  9407  064A  00E6               	movwf	_i2c2_state
  9408                           
  9409                           ;i2c2.c: 329: }
  9410  064B  0008               	return
  9411  064C                     i1l3836:	
  9412                           
  9413                           ;i2c2.c: 330: else
  9414                           ;i2c2.c: 331: {
  9415                           ;i2c2.c: 333: i2c2_state = S_MASTER_SEND_DATA;
  9416  064C  3003               	movlw	3
  9417  064D  00F2               	movwf	??_I2C2_ISR
  9418  064E  0872               	movf	??_I2C2_ISR,w
  9419  064F  00E6               	movwf	_i2c2_state
  9420                           
  9421                           ;i2c2.c: 334: }
  9422                           ;i2c2.c: 335: }
  9423                           ;i2c2.c: 337: break;
  9424  0650  0008               	return
  9425  0651                     i1l195:	
  9426                           ;i2c2.c: 339: case S_MASTER_10BIT_RESTART:
  9427                           
  9428                           
  9429                           ;i2c2.c: 341: if(SSP2CON2bits.ACKSTAT)
  9430  0651  0024               	movlb	4	; select bank4
  9431  0652  1F1E               	btfss	30,6	;volatile
  9432  0653  2E5D               	goto	i1l196
  9433                           
  9434                           ;i2c2.c: 342: {
  9435                           ;i2c2.c: 343: i2c2_object.i2cErrors++;
  9436  0654  3001               	movlw	1
  9437  0655  00F2               	movwf	??_I2C2_ISR
  9438  0656  0872               	movf	??_I2C2_ISR,w
  9439  0657  0020               	movlb	0	; select bank0
  9440  0658  07CB               	addwf	_i2c2_object+4,f
  9441                           
  9442                           ;i2c2.c: 344: I2C2_Stop(I2C2_MESSAGE_ADDRESS_NO_ACK);
  9443  0659  3004               	movlw	4
  9444  065A  3188  20B2         	fcall	_I2C2_Stop
  9445                           
  9446                           ;i2c2.c: 345: }
  9447  065C  0008               	return
  9448  065D                     i1l196:	
  9449                           
  9450                           ;i2c2.c: 346: else
  9451                           ;i2c2.c: 347: {
  9452                           ;i2c2.c: 350: SSP2CON2bits.RSEN = 1;
  9453  065D  149E               	bsf	30,1	;volatile
  9454                           
  9455                           ;i2c2.c: 354: i2c_address = 0x00F0 | ((i2c_address >> 8) & 0x0006);
  9456  065E  0020               	movlb	0	; select bank0
  9457  065F  086C               	movf	I2C2_ISR@i2c_address+1,w
  9458  0660  00F3               	movwf	??_I2C2_ISR+1
  9459  0661  086B               	movf	I2C2_ISR@i2c_address,w
  9460  0662  00F2               	movwf	??_I2C2_ISR
  9461  0663  0873               	movf	??_I2C2_ISR+1,w
  9462  0664  00F2               	movwf	??_I2C2_ISR
  9463  0665  01F3               	clrf	??_I2C2_ISR+1
  9464  0666  3006               	movlw	6
  9465  0667  0572               	andwf	??_I2C2_ISR,w
  9466  0668  00F4               	movwf	??_I2C2_ISR+2
  9467  0669  3000               	movlw	0
  9468  066A  0573               	andwf	??_I2C2_ISR+1,w
  9469  066B  00F5               	movwf	??_I2C2_ISR+3
  9470  066C  30F0               	movlw	240
  9471  066D  0474               	iorwf	??_I2C2_ISR+2,w
  9472  066E  00EB               	movwf	I2C2_ISR@i2c_address
  9473  066F  3000               	movlw	0
  9474  0670  0475               	iorwf	??_I2C2_ISR+3,w
  9475  0671  00EC               	movwf	I2C2_ISR@i2c_address+1
  9476                           
  9477                           ;i2c2.c: 357: i2c_address |= 0x0001;
  9478  0672  146B               	bsf	I2C2_ISR@i2c_address,0
  9479                           
  9480                           ;i2c2.c: 360: i2c_10bit_address_restart = 1;
  9481  0673  01E0               	clrf	I2C2_ISR@i2c_10bit_address_restart
  9482  0674  0AE0               	incf	I2C2_ISR@i2c_10bit_address_restart,f
  9483                           
  9484                           ;i2c2.c: 363: i2c2_state = S_MASTER_SEND_ADDR;
  9485  0675  3002               	movlw	2
  9486  0676  00F2               	movwf	??_I2C2_ISR
  9487  0677  0872               	movf	??_I2C2_ISR,w
  9488  0678  00E6               	movwf	_i2c2_state
  9489                           
  9490                           ;i2c2.c: 364: }
  9491                           ;i2c2.c: 366: break;
  9492  0679  0008               	return
  9493  067A                     i1l3850:	
  9494                           ;i2c2.c: 368: case S_MASTER_SEND_ADDR:
  9495                           
  9496                           
  9497                           ;i2c2.c: 381: if(i2c_10bit_address_restart != 1)
  9498  067A  0360               	decf	I2C2_ISR@i2c_10bit_address_restart,w
  9499  067B  1903               	btfsc	3,2
  9500  067C  2E8E               	goto	i1l3870
  9501                           
  9502                           ;i2c2.c: 382: {
  9503                           ;i2c2.c: 384: i2c_address = p_i2c2_trb_current->address;
  9504  067D  0864               	movf	_p_i2c2_trb_current,w
  9505  067E  0086               	movwf	6
  9506  067F  0187               	clrf	7
  9507  0680  3F40               	moviw [0]fsr1
  9508  0681  00EB               	movwf	I2C2_ISR@i2c_address
  9509  0682  3F41               	moviw [1]fsr1
  9510  0683  00EC               	movwf	I2C2_ISR@i2c_address+1
  9511                           
  9512                           ;i2c2.c: 385: pi2c_buf_ptr = p_i2c2_trb_current->pbuffer;
  9513  0684  0864               	movf	_p_i2c2_trb_current,w
  9514  0685  0086               	movwf	6
  9515  0686  0187               	clrf	7
  9516  0687  3F43               	moviw [3]fsr1
  9517  0688  00E2               	movwf	I2C2_ISR@pi2c_buf_ptr
  9518                           
  9519                           ;i2c2.c: 386: i2c_bytes_left = p_i2c2_trb_current->length;
  9520  0689  0864               	movf	_p_i2c2_trb_current,w
  9521  068A  0086               	movwf	6
  9522  068B  0187               	clrf	7
  9523  068C  3F42               	moviw [2]fsr1
  9524  068D  00E1               	movwf	I2C2_ISR@i2c_bytes_left
  9525  068E                     i1l3870:	
  9526                           ;i2c2.c: 407: }
  9527                           ;i2c2.c: 408: }
  9528                           
  9529                           ;i2c2.c: 406: i2c_10bit_address_restart = 0;
  9530                           
  9531                           ;i2c2.c: 404: i2c2_state = S_MASTER_ACK_ADDR;
  9532                           
  9533                           ;i2c2.c: 400: else
  9534                           ;i2c2.c: 401: {
  9535                           ;i2c2.c: 403: SSP2BUF = i2c_address;
  9536                           
  9537                           ;i2c2.c: 399: }
  9538                           
  9539                           ;i2c2.c: 398: i2c2_state = S_MASTER_SEND_ADDR_10BIT_LSB;
  9540                           
  9541                           ;i2c2.c: 393: {
  9542                           ;i2c2.c: 397: SSP2BUF = 0xF0 | ((i2c_address >> 8) & 0x0006);
  9543                           
  9544                           ;i2c2.c: 391: {
  9545                           ;i2c2.c: 392: if (0 == i2c_10bit_address_restart)
  9546                           
  9547                           ;i2c2.c: 387: }
  9548                           ;i2c2.c: 390: if(!1 && (0x0 != i2c_address))
  9549                           
  9550                           
  9551                           ;i2c2.c: 409: else
  9552                           ;i2c2.c: 410: {
  9553                           ;i2c2.c: 412: SSP2BUF = i2c_address;
  9554  068E  086B               	movf	I2C2_ISR@i2c_address,w
  9555  068F  0024               	movlb	4	; select bank4
  9556  0690  0099               	movwf	25	;volatile
  9557                           
  9558                           ;i2c2.c: 413: if(i2c_address & 0x01)
  9559  0691  0020               	movlb	0	; select bank0
  9560  0692  1C6B               	btfss	I2C2_ISR@i2c_address,0
  9561  0693  2E99               	goto	i1l3876
  9562                           
  9563                           ;i2c2.c: 414: {
  9564                           ;i2c2.c: 416: i2c2_state = S_MASTER_ACK_ADDR;
  9565  0694  3005               	movlw	5
  9566  0695  00F2               	movwf	??_I2C2_ISR
  9567  0696  0872               	movf	??_I2C2_ISR,w
  9568  0697  00E6               	movwf	_i2c2_state
  9569                           
  9570                           ;i2c2.c: 417: }
  9571  0698  0008               	return
  9572  0699                     i1l3876:	
  9573                           
  9574                           ;i2c2.c: 418: else
  9575                           ;i2c2.c: 419: {
  9576                           ;i2c2.c: 421: i2c2_state = S_MASTER_SEND_DATA;
  9577  0699  3003               	movlw	3
  9578  069A  00F2               	movwf	??_I2C2_ISR
  9579  069B  0872               	movf	??_I2C2_ISR,w
  9580  069C  00E6               	movwf	_i2c2_state
  9581                           
  9582                           ;i2c2.c: 422: }
  9583                           ;i2c2.c: 423: }
  9584                           ;i2c2.c: 424: break;
  9585  069D  0008               	return
  9586  069E                     i1l206:	
  9587                           ;i2c2.c: 426: case S_MASTER_SEND_DATA:
  9588                           
  9589                           
  9590                           ;i2c2.c: 429: if(SSP2CON2bits.ACKSTAT)
  9591  069E  0024               	movlb	4	; select bank4
  9592  069F  1F1E               	btfss	30,6	;volatile
  9593  06A0  2EAC               	goto	i1l3884
  9594                           
  9595                           ;i2c2.c: 430: {
  9596                           ;i2c2.c: 432: i2c2_object.i2cErrors++;
  9597  06A1  3001               	movlw	1
  9598  06A2  00F2               	movwf	??_I2C2_ISR
  9599  06A3  0872               	movf	??_I2C2_ISR,w
  9600  06A4  0020               	movlb	0	; select bank0
  9601  06A5  07CB               	addwf	_i2c2_object+4,f
  9602                           
  9603                           ;i2c2.c: 435: SSP2CON2bits.ACKSTAT = 0;
  9604  06A6  0024               	movlb	4	; select bank4
  9605  06A7  131E               	bcf	30,6	;volatile
  9606                           
  9607                           ;i2c2.c: 438: I2C2_Stop(I2C2_DATA_NO_ACK);
  9608  06A8  3005               	movlw	5
  9609  06A9  3188  20B2         	fcall	_I2C2_Stop
  9610                           
  9611                           ;i2c2.c: 440: }
  9612  06AB  0008               	return
  9613  06AC                     i1l3884:	
  9614                           
  9615                           ;i2c2.c: 441: else
  9616                           ;i2c2.c: 442: {
  9617                           ;i2c2.c: 444: if(i2c_bytes_left-- == 0U)
  9618  06AC  3001               	movlw	1
  9619  06AD  0020               	movlb	0	; select bank0
  9620  06AE  02E1               	subwf	I2C2_ISR@i2c_bytes_left,f
  9621  06AF  0A61               	incf	I2C2_ISR@i2c_bytes_left,w
  9622  06B0  1D03               	btfss	3,2
  9623  06B1  2EC6               	goto	i1l3892
  9624                           
  9625                           ;i2c2.c: 445: {
  9626                           ;i2c2.c: 449: p_i2c2_trb_current++;
  9627  06B2  3004               	movlw	4
  9628  06B3  00F2               	movwf	??_I2C2_ISR
  9629  06B4  0872               	movf	??_I2C2_ISR,w
  9630  06B5  07E4               	addwf	_p_i2c2_trb_current,f
  9631                           
  9632                           ;i2c2.c: 452: if(--i2c2_trb_count == 0)
  9633  06B6  3001               	movlw	1
  9634  06B7  02E5               	subwf	_i2c2_trb_count,f
  9635  06B8  1D03               	btfss	3,2
  9636  06B9  2EBE               	goto	i1l210
  9637                           
  9638                           ;i2c2.c: 453: {
  9639                           ;i2c2.c: 454: I2C2_Stop(I2C2_MESSAGE_COMPLETE);
  9640  06BA  3000               	movlw	0
  9641  06BB  3188  20B2         	fcall	_I2C2_Stop
  9642                           
  9643                           ;i2c2.c: 455: }
  9644  06BD  0008               	return
  9645  06BE                     i1l210:	
  9646                           
  9647                           ;i2c2.c: 456: else
  9648                           ;i2c2.c: 457: {
  9649                           ;i2c2.c: 464: SSP2CON2bits.RSEN = 1;
  9650  06BE  0024               	movlb	4	; select bank4
  9651  06BF  149E               	bsf	30,1	;volatile
  9652                           
  9653                           ;i2c2.c: 467: i2c2_state = S_MASTER_SEND_ADDR;
  9654  06C0  3002               	movlw	2
  9655  06C1  00F2               	movwf	??_I2C2_ISR
  9656  06C2  0872               	movf	??_I2C2_ISR,w
  9657  06C3  0020               	movlb	0	; select bank0
  9658  06C4  00E6               	movwf	_i2c2_state
  9659                           
  9660                           ;i2c2.c: 469: }
  9661                           ;i2c2.c: 470: }
  9662  06C5  0008               	return
  9663  06C6                     i1l3892:	
  9664                           
  9665                           ;i2c2.c: 471: else
  9666                           ;i2c2.c: 472: {
  9667                           ;i2c2.c: 474: SSP2BUF = *pi2c_buf_ptr++;
  9668  06C6  0862               	movf	I2C2_ISR@pi2c_buf_ptr,w
  9669  06C7  0086               	movwf	6
  9670  06C8  0187               	clrf	7
  9671  06C9  0801               	movf	1,w
  9672  06CA  0024               	movlb	4	; select bank4
  9673  06CB  0099               	movwf	25	;volatile
  9674  06CC  3001               	movlw	1
  9675  06CD  00F2               	movwf	??_I2C2_ISR
  9676  06CE  0872               	movf	??_I2C2_ISR,w
  9677  06CF  0020               	movlb	0	; select bank0
  9678  06D0  07E2               	addwf	I2C2_ISR@pi2c_buf_ptr,f
  9679                           
  9680                           ;i2c2.c: 475: }
  9681                           ;i2c2.c: 476: }
  9682                           ;i2c2.c: 477: break;
  9683  06D1  0008               	return
  9684  06D2                     i1l213:	
  9685                           ;i2c2.c: 479: case S_MASTER_ACK_ADDR:
  9686                           
  9687                           
  9688                           ;i2c2.c: 482: if(SSP2CON2bits.ACKSTAT)
  9689  06D2  0024               	movlb	4	; select bank4
  9690  06D3  1F1E               	btfss	30,6	;volatile
  9691  06D4  2EE0               	goto	i1l214
  9692                           
  9693                           ;i2c2.c: 483: {
  9694                           ;i2c2.c: 486: i2c2_object.i2cErrors++;
  9695  06D5  3001               	movlw	1
  9696  06D6  00F2               	movwf	??_I2C2_ISR
  9697  06D7  0872               	movf	??_I2C2_ISR,w
  9698  06D8  0020               	movlb	0	; select bank0
  9699  06D9  07CB               	addwf	_i2c2_object+4,f
  9700                           
  9701                           ;i2c2.c: 489: I2C2_Stop(I2C2_MESSAGE_ADDRESS_NO_ACK);
  9702  06DA  3004               	movlw	4
  9703  06DB  3188  20B2         	fcall	_I2C2_Stop
  9704                           
  9705                           ;i2c2.c: 492: SSP2CON2bits.ACKSTAT = 0;
  9706  06DD  0024               	movlb	4	; select bank4
  9707  06DE  131E               	bcf	30,6	;volatile
  9708                           
  9709                           ;i2c2.c: 493: }
  9710  06DF  0008               	return
  9711  06E0                     i1l214:	
  9712                           
  9713                           ;i2c2.c: 494: else
  9714                           ;i2c2.c: 495: {
  9715                           ;i2c2.c: 496: SSP2CON2bits.RCEN = 1;
  9716  06E0  159E               	bsf	30,3	;volatile
  9717                           
  9718                           ;i2c2.c: 497: i2c2_state = S_MASTER_ACK_RCV_DATA;
  9719  06E1  3008               	movlw	8
  9720  06E2  00F2               	movwf	??_I2C2_ISR
  9721  06E3  0872               	movf	??_I2C2_ISR,w
  9722  06E4  0020               	movlb	0	; select bank0
  9723  06E5  00E6               	movwf	_i2c2_state
  9724                           
  9725                           ;i2c2.c: 498: }
  9726                           ;i2c2.c: 499: break;
  9727  06E6  0008               	return
  9728  06E7                     i1l3904:	
  9729                           ;i2c2.c: 501: case S_MASTER_RCV_DATA:
  9730                           
  9731                           
  9732                           ;i2c2.c: 506: i2c2_state = S_MASTER_ACK_RCV_DATA;
  9733  06E7  3008               	movlw	8
  9734  06E8  00F2               	movwf	??_I2C2_ISR
  9735  06E9  0872               	movf	??_I2C2_ISR,w
  9736  06EA  00E6               	movwf	_i2c2_state
  9737                           
  9738                           ;i2c2.c: 509: SSP2CON2bits.RCEN = 1;
  9739  06EB  0024               	movlb	4	; select bank4
  9740  06EC  159E               	bsf	30,3	;volatile
  9741                           
  9742                           ;i2c2.c: 511: break;
  9743  06ED  0008               	return
  9744  06EE                     i1l3908:	
  9745                           ;i2c2.c: 513: case S_MASTER_ACK_RCV_DATA:
  9746                           
  9747                           
  9748                           ;i2c2.c: 516: *pi2c_buf_ptr++ = SSP2BUF;
  9749  06EE  0024               	movlb	4	; select bank4
  9750  06EF  0819               	movf	25,w	;volatile
  9751  06F0  00F2               	movwf	??_I2C2_ISR
  9752  06F1  0020               	movlb	0	; select bank0
  9753  06F2  0862               	movf	I2C2_ISR@pi2c_buf_ptr,w
  9754  06F3  0086               	movwf	6
  9755  06F4  0187               	clrf	7
  9756  06F5  0872               	movf	??_I2C2_ISR,w
  9757  06F6  0081               	movwf	1
  9758  06F7  3001               	movlw	1
  9759  06F8  00F2               	movwf	??_I2C2_ISR
  9760  06F9  0872               	movf	??_I2C2_ISR,w
  9761  06FA  07E2               	addwf	I2C2_ISR@pi2c_buf_ptr,f
  9762                           
  9763                           ;i2c2.c: 519: if(--i2c_bytes_left)
  9764  06FB  3001               	movlw	1
  9765  06FC  02E1               	subwf	I2C2_ISR@i2c_bytes_left,f
  9766  06FD  1903               	btfsc	3,2
  9767  06FE  2F07               	goto	i1l218
  9768                           
  9769                           ;i2c2.c: 520: {
  9770                           ;i2c2.c: 526: SSP2CON2bits.ACKDT = 0;
  9771  06FF  0024               	movlb	4	; select bank4
  9772  0700  129E               	bcf	30,5	;volatile
  9773                           
  9774                           ;i2c2.c: 529: i2c2_state = S_MASTER_RCV_DATA;
  9775  0701  3006               	movlw	6
  9776  0702  00F2               	movwf	??_I2C2_ISR
  9777  0703  0872               	movf	??_I2C2_ISR,w
  9778  0704  0020               	movlb	0	; select bank0
  9779  0705  00E6               	movwf	_i2c2_state
  9780                           
  9781                           ;i2c2.c: 530: }
  9782  0706  2F0B               	goto	i1l3920
  9783  0707                     i1l218:	
  9784                           
  9785                           ;i2c2.c: 531: else
  9786                           ;i2c2.c: 532: {
  9787                           ;i2c2.c: 536: SSP2CON2bits.ACKDT = 1;
  9788  0707  0024               	movlb	4	; select bank4
  9789  0708  169E               	bsf	30,5	;volatile
  9790                           
  9791                           ;i2c2.c: 538: I2C2_FunctionComplete();
  9792  0709  3188  208E         	fcall	_I2C2_FunctionComplete
  9793  070B                     i1l3920:	
  9794                           
  9795                           ;i2c2.c: 539: }
  9796                           ;i2c2.c: 542: SSP2CON2bits.ACKEN = 1;
  9797  070B  0024               	movlb	4	; select bank4
  9798  070C  161E               	bsf	30,4	;volatile
  9799                           
  9800                           ;i2c2.c: 543: break;
  9801  070D  0008               	return
  9802  070E                     i1l3922:	
  9803                           ;i2c2.c: 545: case S_MASTER_RCV_STOP:
  9804                           
  9805                           
  9806                           ;i2c2.c: 546: case S_MASTER_SEND_STOP:
  9807                           ;i2c2.c: 549: I2C2_Stop(I2C2_MESSAGE_COMPLETE);
  9808  070E  3000               	movlw	0
  9809  070F  3188  20B2         	fcall	_I2C2_Stop
  9810                           
  9811                           ;i2c2.c: 550: break;
  9812  0711  0008               	return
  9813  0712                     i1l3924:	
  9814                           ;i2c2.c: 552: default:
  9815                           
  9816                           
  9817                           ;i2c2.c: 556: i2c2_object.i2cErrors++;
  9818  0712  3001               	movlw	1
  9819  0713  00F2               	movwf	??_I2C2_ISR
  9820  0714  0872               	movf	??_I2C2_ISR,w
  9821  0715  0020               	movlb	0	; select bank0
  9822  0716  07CB               	addwf	_i2c2_object+4,f
  9823                           
  9824                           ;i2c2.c: 557: I2C2_Stop(I2C2_LOST_STATE);
  9825  0717  3006               	movlw	6
  9826  0718  3188  20B2         	fcall	_I2C2_Stop
  9827                           
  9828                           ;i2c2.c: 560: }
  9829                           
  9830                           ;i2c2.c: 558: break;
  9831  071A  0008               	return
  9832  071B                     i1l3930:	
  9833  071B  0020               	movlb	0	; select bank0
  9834  071C  0866               	movf	_i2c2_state,w
  9835                           
  9836                           ; Switch size 1, requested type "space"
  9837                           ; Number of cases is 11, Range of values is 0 to 11
  9838                           ; switch strategies available:
  9839                           ; Name         Instructions Cycles
  9840                           ; direct_byte           30     6 (fixed)
  9841                           ; simple_byte           34    18 (average)
  9842                           ; jumptable            260     6 (fixed)
  9843                           ;	Chosen strategy is direct_byte
  9844  071D  0084               	movwf	4
  9845  071E  300C               	movlw	12
  9846  071F  0204               	subwf	4,w
  9847  0720  1803               	skipnc
  9848  0721  2F12               	goto	i1l3924
  9849  0722  3188               	movlp	high i1S5504
  9850  0723  3504               	lslf	4,w
  9851  0724  3E2C               	addlw	low i1S5504
  9852  0725  0082               	movwf	2
  9853  0726  0008               	return
  9854  0727                     __end_of_I2C2_ISR:	
  9855                           
  9856                           	psect	swtext1
  9857  082C                     __pswtext1:	
  9858  082C                     i1S5504:	
  9859  082C  3185  2DFB         	ljmp	i1l184
  9860  082E  3186  2E26         	ljmp	i1l189
  9861  0830  3186  2E7A         	ljmp	i1l3850
  9862  0832  3186  2E9E         	ljmp	i1l206
  9863  0834  3187  2F0E         	ljmp	i1l3922
  9864  0836  3186  2ED2         	ljmp	i1l213
  9865  0838  3186  2EE7         	ljmp	i1l3904
  9866  083A  3187  2F0E         	ljmp	i1l3922
  9867  083C  3186  2EEE         	ljmp	i1l3908
  9868  083E  3187  2F12         	ljmp	i1l3924
  9869  0840  3186  2E2E         	ljmp	i1l190
  9870  0842  3186  2E51         	ljmp	i1l195
  9871                           
  9872                           	psect	text48
  9873  08B2                     __ptext48:	
  9874 ;; *************** function _I2C2_Stop *****************
  9875 ;; Defined at:
  9876 ;;		line 581 in file "mcc_generated_files/i2c2.c"
  9877 ;; Parameters:    Size  Location     Type
  9878 ;;  completion_c    1    wreg     enum E2972
  9879 ;; Auto vars:     Size  Location     Type
  9880 ;;  completion_c    1    1[COMMON] enum E2972
  9881 ;; Return value:  Size  Location     Type
  9882 ;;                  1    wreg      void 
  9883 ;; Registers used:
  9884 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9885 ;; Tracked objects:
  9886 ;;		On entry : 0/0
  9887 ;;		On exit  : 0/0
  9888 ;;		Unchanged: 0/0
  9889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9891 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9892 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9893 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9894 ;;Total ram usage:        2 bytes
  9895 ;; Hardware stack levels used:    1
  9896 ;; This function calls:
  9897 ;;		Nothing
  9898 ;; This function is called by:
  9899 ;;		_I2C2_ISR
  9900 ;; This function uses a non-reentrant model
  9901 ;;
  9902                           
  9903                           
  9904                           ;psect for function _I2C2_Stop
  9905  08B2                     _I2C2_Stop:	
  9906                           
  9907                           ;incstack = 0
  9908                           ; Regs used in _I2C2_Stop: [wreg+fsr1l+fsr1h+status,2+status,0]
  9909                           ;I2C2_Stop@completion_code stored from wreg
  9910  08B2  00F1               	movwf	I2C2_Stop@completion_code
  9911                           
  9912                           ;i2c2.c: 584: SSP2CON2bits.PEN = 1;
  9913  08B3  0024               	movlb	4	; select bank4
  9914  08B4  151E               	bsf	30,2	;volatile
  9915                           
  9916                           ;i2c2.c: 587: if (p_i2c2_current->pTrFlag != (0))
  9917  08B5  0020               	movlb	0	; select bank0
  9918  08B6  0863               	movf	_p_i2c2_current,w
  9919  08B7  3E02               	addlw	2
  9920  08B8  0086               	movwf	6
  9921  08B9  0187               	clrf	7
  9922  08BA  0801               	movf	1,w
  9923  08BB  1903               	btfsc	3,2
  9924  08BC  28C8               	goto	i1l3470
  9925                           
  9926                           ;i2c2.c: 588: {
  9927                           ;i2c2.c: 590: *(p_i2c2_current->pTrFlag) = completion_code;
  9928  08BD  0871               	movf	I2C2_Stop@completion_code,w
  9929  08BE  00F0               	movwf	??_I2C2_Stop
  9930  08BF  0863               	movf	_p_i2c2_current,w
  9931  08C0  3E02               	addlw	2
  9932  08C1  0086               	movwf	6
  9933  08C2  0187               	clrf	7
  9934  08C3  0801               	movf	1,w
  9935  08C4  0086               	movwf	6
  9936  08C5  0187               	clrf	7
  9937  08C6  0870               	movf	??_I2C2_Stop,w
  9938  08C7  0081               	movwf	1
  9939  08C8                     i1l3470:	
  9940                           
  9941                           ;i2c2.c: 591: }
  9942                           ;i2c2.c: 594: i2c2_state = S_MASTER_IDLE;
  9943  08C8  01E6               	clrf	_i2c2_state
  9944  08C9  0008               	return
  9945  08CA                     __end_of_I2C2_Stop:	
  9946                           
  9947                           	psect	text49
  9948  088E                     __ptext49:	
  9949 ;; *************** function _I2C2_FunctionComplete *****************
  9950 ;; Defined at:
  9951 ;;		line 563 in file "mcc_generated_files/i2c2.c"
  9952 ;; Parameters:    Size  Location     Type
  9953 ;;		None
  9954 ;; Auto vars:     Size  Location     Type
  9955 ;;		None
  9956 ;; Return value:  Size  Location     Type
  9957 ;;                  1    wreg      void 
  9958 ;; Registers used:
  9959 ;;		wreg, status,2, status,0
  9960 ;; Tracked objects:
  9961 ;;		On entry : 0/0
  9962 ;;		On exit  : 0/0
  9963 ;;		Unchanged: 0/0
  9964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9966 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9967 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9968 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9969 ;;Total ram usage:        1 bytes
  9970 ;; Hardware stack levels used:    1
  9971 ;; This function calls:
  9972 ;;		Nothing
  9973 ;; This function is called by:
  9974 ;;		_I2C2_ISR
  9975 ;; This function uses a non-reentrant model
  9976 ;;
  9977                           
  9978                           
  9979                           ;psect for function _I2C2_FunctionComplete
  9980  088E                     _I2C2_FunctionComplete:	
  9981                           
  9982                           ;i2c2.c: 567: p_i2c2_trb_current++;
  9983                           
  9984                           ;incstack = 0
  9985                           ; Regs used in _I2C2_FunctionComplete: [wreg+status,2+status,0]
  9986  088E  3004               	movlw	4
  9987  088F  00F0               	movwf	??_I2C2_FunctionComplete
  9988  0890  0870               	movf	??_I2C2_FunctionComplete,w
  9989  0891  0020               	movlb	0	; select bank0
  9990  0892  07E4               	addwf	_p_i2c2_trb_current,f
  9991                           
  9992                           ;i2c2.c: 570: if(--i2c2_trb_count == 0)
  9993  0893  3001               	movlw	1
  9994  0894  02E5               	subwf	_i2c2_trb_count,f
  9995  0895  1D03               	btfss	3,2
  9996  0896  289C               	goto	i1l225
  9997                           
  9998                           ;i2c2.c: 571: {
  9999                           ;i2c2.c: 572: i2c2_state = S_MASTER_SEND_STOP;
 10000  0897  3004               	movlw	4
 10001  0898  00F0               	movwf	??_I2C2_FunctionComplete
 10002  0899  0870               	movf	??_I2C2_FunctionComplete,w
 10003  089A  00E6               	movwf	_i2c2_state
 10004                           
 10005                           ;i2c2.c: 573: }
 10006  089B  0008               	return
 10007  089C                     i1l225:	
 10008                           
 10009                           ;i2c2.c: 574: else
 10010                           ;i2c2.c: 575: {
 10011                           ;i2c2.c: 576: i2c2_state = S_MASTER_RESTART;
 10012  089C  01E6               	clrf	_i2c2_state
 10013  089D  0AE6               	incf	_i2c2_state,f
 10014  089E  0008               	return
 10015  089F                     __end_of_I2C2_FunctionComplete:	
 10016                           
 10017                           	psect	text50
 10018  0002                     __ptext50:	
 10019 ;; *************** function _I2C2_BusCollisionISR *****************
 10020 ;; Defined at:
 10021 ;;		line 728 in file "mcc_generated_files/i2c2.c"
 10022 ;; Parameters:    Size  Location     Type
 10023 ;;		None
 10024 ;; Auto vars:     Size  Location     Type
 10025 ;;		None
 10026 ;; Return value:  Size  Location     Type
 10027 ;;                  1    wreg      void 
 10028 ;; Registers used:
 10029 ;;		None
 10030 ;; Tracked objects:
 10031 ;;		On entry : 0/0
 10032 ;;		On exit  : 0/0
 10033 ;;		Unchanged: 0/0
 10034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10036 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10038 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10039 ;;Total ram usage:        0 bytes
 10040 ;; Hardware stack levels used:    1
 10041 ;; This function calls:
 10042 ;;		Nothing
 10043 ;; This function is called by:
 10044 ;;		_INTERRUPT_InterruptManager
 10045 ;; This function uses a non-reentrant model
 10046 ;;
 10047                           
 10048                           
 10049                           ;psect for function _I2C2_BusCollisionISR
 10050  0002                     _I2C2_BusCollisionISR:	
 10051                           
 10052                           ;incstack = 0
 10053                           ; Regs used in _I2C2_BusCollisionISR: []
 10054  0002  0008               	return
 10055  0003                     __end_of_I2C2_BusCollisionISR:	
 10056                           
 10057                           	psect	text51
 10058  0A58                     __ptext51:	
 10059 ;; *************** function _I2C1_ISR *****************
 10060 ;; Defined at:
 10061 ;;		line 57 in file "mcc_generated_files/i2c1.c"
 10062 ;; Parameters:    Size  Location     Type
 10063 ;;		None
 10064 ;; Auto vars:     Size  Location     Type
 10065 ;;  i2c_data        1   10[COMMON] unsigned char 
 10066 ;; Return value:  Size  Location     Type
 10067 ;;                  1    wreg      void 
 10068 ;; Registers used:
 10069 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10070 ;; Tracked objects:
 10071 ;;		On entry : 0/0
 10072 ;;		On exit  : 0/0
 10073 ;;		Unchanged: 0/0
 10074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10076 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10077 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10078 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10079 ;;Total ram usage:        2 bytes
 10080 ;; Hardware stack levels used:    1
 10081 ;; Hardware stack levels required when called:    4
 10082 ;; This function calls:
 10083 ;;		_I2C1_StatusCallback
 10084 ;; This function is called by:
 10085 ;;		_INTERRUPT_InterruptManager
 10086 ;; This function uses a non-reentrant model
 10087 ;;
 10088                           
 10089                           
 10090                           ;psect for function _I2C1_ISR
 10091  0A58                     _I2C1_ISR:	
 10092                           
 10093                           ;i2c1.c: 59: uint8_t i2c_data = 0x55;
 10094                           
 10095                           ;incstack = 0
 10096                           ; Regs used in _I2C1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10097  0A58  3055               	movlw	85
 10098  0A59  00F9               	movwf	??_I2C1_ISR
 10099  0A5A  0879               	movf	??_I2C1_ISR,w
 10100  0A5B  00FA               	movwf	I2C1_ISR@i2c_data
 10101                           
 10102                           ;i2c1.c: 64: PIR1bits.SSP1IF = 0;
 10103  0A5C  0020               	movlb	0	; select bank0
 10104  0A5D  1191               	bcf	17,3	;volatile
 10105                           
 10106                           ;i2c1.c: 65: i2c_data = SSP1BUF;
 10107  0A5E  0024               	movlb	4	; select bank4
 10108  0A5F  0811               	movf	17,w	;volatile
 10109  0A60  00F9               	movwf	??_I2C1_ISR
 10110  0A61  0879               	movf	??_I2C1_ISR,w
 10111  0A62  00FA               	movwf	I2C1_ISR@i2c_data
 10112                           
 10113                           ;i2c1.c: 66: if(1 == SSP1STATbits.R_nW)
 10114  0A63  1D14               	btfss	20,2	;volatile
 10115  0A64  2A6C               	goto	i1l64
 10116                           
 10117                           ;i2c1.c: 67: {
 10118                           ;i2c1.c: 68: if((1 == SSP1STATbits.D_nA) && (1 == SSP1CON2bits.ACKSTAT))
 10119  0A65  1A94               	btfsc	20,5	;volatile
 10120  0A66  1F16               	btfss	22,6	;volatile
 10121  0A67  2A6A               	goto	i1l5302
 10122                           
 10123                           ;i2c1.c: 69: {
 10124                           ;i2c1.c: 71: I2C1_StatusCallback(I2C1_SLAVE_READ_COMPLETED);
 10125  0A68  3003               	movlw	3
 10126  0A69  2A7A               	goto	L3
 10127  0A6A                     i1l5302:	
 10128                           ;i2c1.c: 72: }
 10129                           
 10130                           
 10131                           ;i2c1.c: 73: else
 10132                           ;i2c1.c: 74: {
 10133                           ;i2c1.c: 76: I2C1_StatusCallback(I2C1_SLAVE_READ_REQUEST);
 10134  0A6A  3001               	movlw	1
 10135  0A6B  2A7A               	goto	L3
 10136  0A6C                     i1l64:	
 10137                           ;i2c1.c: 77: }
 10138                           ;i2c1.c: 78: }
 10139                           
 10140                           
 10141                           ;i2c1.c: 79: else if(0 == SSP1STATbits.D_nA)
 10142  0A6C  1A94               	btfsc	20,5	;volatile
 10143  0A6D  2A75               	goto	i1l5310
 10144                           
 10145                           ;i2c1.c: 80: {
 10146                           ;i2c1.c: 83: if(0x00 == i2c_data)
 10147  0A6E  087A               	movf	I2C1_ISR@i2c_data,w
 10148  0A6F  1D03               	btfss	3,2
 10149  0A70  2A73               	goto	i1l5308
 10150                           
 10151                           ;i2c1.c: 84: {
 10152                           ;i2c1.c: 86: I2C1_StatusCallback(I2C1_SLAVE_GENERAL_CALL_REQUEST);
 10153  0A71  3004               	movlw	4
 10154  0A72  2A7A               	goto	L3
 10155  0A73                     i1l5308:	
 10156                           ;i2c1.c: 87: }
 10157                           
 10158                           
 10159                           ;i2c1.c: 88: else
 10160                           ;i2c1.c: 89: {
 10161                           ;i2c1.c: 91: I2C1_StatusCallback(I2C1_SLAVE_WRITE_REQUEST);
 10162  0A73  3000               	movlw	0
 10163  0A74  2A7A               	goto	L3
 10164  0A75                     i1l5310:	
 10165                           ;i2c1.c: 92: }
 10166                           ;i2c1.c: 93: }
 10167                           
 10168                           
 10169                           ;i2c1.c: 94: else
 10170                           ;i2c1.c: 95: {
 10171                           ;i2c1.c: 96: I2C_slaveWriteData = i2c_data;
 10172  0A75  087A               	movf	I2C1_ISR@i2c_data,w
 10173  0A76  00F9               	movwf	??_I2C1_ISR
 10174  0A77  0879               	movf	??_I2C1_ISR,w
 10175  0A78  00FD               	movwf	_I2C_slaveWriteData	;volatile
 10176                           
 10177                           ;i2c1.c: 99: I2C1_StatusCallback(I2C1_SLAVE_WRITE_COMPLETED);
 10178  0A79  3002               	movlw	2
 10179  0A7A                     L3:	
 10180  0A7A  318E  264E         	fcall	_I2C1_StatusCallback
 10181                           
 10182                           ;i2c1.c: 100: }
 10183                           ;i2c1.c: 102: SSP1CON1bits.CKP = 1;
 10184  0A7C  0024               	movlb	4	; select bank4
 10185  0A7D  1615               	bsf	21,4	;volatile
 10186  0A7E  0008               	return
 10187  0A7F                     __end_of_I2C1_ISR:	
 10188                           
 10189                           	psect	text52
 10190  0E4E                     __ptext52:	
 10191 ;; *************** function _I2C1_StatusCallback *****************
 10192 ;; Defined at:
 10193 ;;		line 106 in file "mcc_generated_files/i2c1.c"
 10194 ;; Parameters:    Size  Location     Type
 10195 ;;  i2c_bus_stat    1    wreg     enum E2989
 10196 ;; Auto vars:     Size  Location     Type
 10197 ;;  i2c_bus_stat    1    7[COMMON] enum E2989
 10198 ;;  pdata           1    8[COMMON] PTR unsigned char 
 10199 ;;		 -> type_no_data(1), PROTOCOL_Send_uint8_t@pbuf(1), sendbuf(16), readbuf.length(1), 
 10200 ;;		 -> readbuf.type(1), readbuf(5), 
 10201 ;; Return value:  Size  Location     Type
 10202 ;;                  1    wreg      void 
 10203 ;; Registers used:
 10204 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10205 ;; Tracked objects:
 10206 ;;		On entry : 0/0
 10207 ;;		On exit  : 0/0
 10208 ;;		Unchanged: 0/0
 10209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10211 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10212 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10213 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10214 ;;Total ram usage:        3 bytes
 10215 ;; Hardware stack levels used:    1
 10216 ;; Hardware stack levels required when called:    3
 10217 ;; This function calls:
 10218 ;;		_PROTOCOL_Backplane_Slave_Enabled
 10219 ;;		_PROTOCOL_I2C_GET
 10220 ;;		_PROTOCOL_I2C_SEN
 10221 ;;		_PROTOCOL_I2C_WHO
 10222 ;;		_PROTOCOL_INV
 10223 ;;		_PROTOCOL_RST
 10224 ;;		i1_PROTOCOL_EXT
 10225 ;;		i1_PROTOCOL_Read_Lock
 10226 ;;		i1_PROTOCOL_SAV
 10227 ;;		i1_PROTOCOL_SET
 10228 ;;		i1_PROTOCOL_STA
 10229 ;;		i1_PROTOCOL_STP
 10230 ;; This function is called by:
 10231 ;;		_I2C1_ISR
 10232 ;; This function uses a non-reentrant model
 10233 ;;
 10234                           
 10235                           
 10236                           ;psect for function _I2C1_StatusCallback
 10237  0E4E                     _I2C1_StatusCallback:	
 10238                           
 10239                           ;incstack = 0
 10240                           ; Regs used in _I2C1_StatusCallback: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10241                           ;I2C1_StatusCallback@i2c_bus_state stored from wreg
 10242  0E4E  00F7               	movwf	I2C1_StatusCallback@i2c_bus_state
 10243                           
 10244                           ;i2c1.c: 109: static uint8_t slaveWriteType = SLAVE_NORMAL_DATA;
 10245                           ;i2c1.c: 110: static uint8_t next = 0x00;
 10246                           ;i2c1.c: 111: static uint8_t ext_len = 0;
 10247                           ;i2c1.c: 112: static uint8_t ext_cnt = 0;
 10248                           ;i2c1.c: 113: static char ext_buf[48];
 10249                           ;i2c1.c: 114: uint8_t *pdata;
 10250                           ;i2c1.c: 115: switch (i2c_bus_state)
 10251  0E4F  2F07               	goto	i1l5278
 10252  0E50                     i1l86:	
 10253                           ;i2c1.c: 116: {
 10254                           ;i2c1.c: 117: case I2C1_SLAVE_WRITE_REQUEST:
 10255                           
 10256                           
 10257                           ;i2c1.c: 118: slaveWriteType = SLAVE_DATA_ADDRESS;
 10258  0E50  0020               	movlb	0	; select bank0
 10259  0E51  01EA               	clrf	I2C1_StatusCallback@slaveWriteType
 10260  0E52  0AEA               	incf	I2C1_StatusCallback@slaveWriteType,f
 10261                           
 10262                           ;i2c1.c: 119: break;
 10263  0E53  0008               	return
 10264  0E54                     i1l5204:	
 10265                           ;i2c1.c: 121: case I2C1_SLAVE_GENERAL_CALL_REQUEST:
 10266                           
 10267                           
 10268                           ;i2c1.c: 123: slaveWriteType = SLAVE_GENERAL_CALL;
 10269  0E54  3002               	movlw	2
 10270  0E55  00F6               	movwf	??_I2C1_StatusCallback
 10271  0E56  0876               	movf	??_I2C1_StatusCallback,w
 10272  0E57  0020               	movlb	0	; select bank0
 10273  0E58  00EA               	movwf	I2C1_StatusCallback@slaveWriteType
 10274                           
 10275                           ;i2c1.c: 124: break;
 10276  0E59  0008               	return
 10277  0E5A                     i1l5206:	
 10278                           ;i2c1.c: 132: case 0x01:
 10279                           
 10280                           ;i2c1.c: 131: switch(next) {
 10281                           
 10282                           ;i2c1.c: 129: {
 10283                           ;i2c1.c: 130: case SLAVE_DATA_ADDRESS:
 10284                           
 10285                           ;i2c1.c: 128: switch(slaveWriteType)
 10286                           
 10287                           ;i2c1.c: 126: case I2C1_SLAVE_WRITE_COMPLETED:
 10288                           
 10289                           
 10290                           ;i2c1.c: 133: PROTOCOL_SET(I2C_slaveWriteData);
 10291  0E5A  087D               	movf	_I2C_slaveWriteData,w	;volatile
 10292  0E5B  3197  278D  318E   	fcall	i1_PROTOCOL_SET
 10293  0E5E  2EC9               	goto	i1l5252
 10294  0E5F                     i1l5210:	
 10295                           ;i2c1.c: 138: case 0x04:
 10296                           
 10297                           ;i2c1.c: 137: switch(I2C_slaveWriteData) {
 10298                           
 10299                           ;i2c1.c: 136: case 0x00:
 10300                           
 10301                           ;i2c1.c: 135: break;
 10302                           
 10303                           ;i2c1.c: 134: next = 0x00;
 10304                           
 10305                           
 10306                           ;i2c1.c: 139: PROTOCOL_STA();
 10307  0E5F  3197  275F  318E   	fcall	i1_PROTOCOL_STA
 10308                           
 10309                           ;i2c1.c: 140: break;
 10310  0E62  2EE2               	goto	i1l5262
 10311  0E63                     i1l5212:	
 10312                           ;i2c1.c: 141: case 0x05:
 10313                           
 10314                           
 10315                           ;i2c1.c: 142: PROTOCOL_STP();
 10316  0E63  3197  2748  318E   	fcall	i1_PROTOCOL_STP
 10317                           
 10318                           ;i2c1.c: 143: break;
 10319  0E66  2EE2               	goto	i1l5262
 10320  0E67                     i1l5214:	
 10321                           ;i2c1.c: 144: case 0x03:
 10322                           
 10323                           
 10324                           ;i2c1.c: 145: PROTOCOL_SAV();
 10325  0E67  3197  27A2  318E   	fcall	i1_PROTOCOL_SAV
 10326                           
 10327                           ;i2c1.c: 146: break;
 10328  0E6A  2EE2               	goto	i1l5262
 10329  0E6B                     i1l5216:	
 10330                           ;i2c1.c: 147: case 0x06:
 10331                           
 10332                           
 10333                           ;i2c1.c: 148: PROTOCOL_INV();
 10334  0E6B  3197  275B  318E   	fcall	_PROTOCOL_INV
 10335                           
 10336                           ;i2c1.c: 149: break;
 10337  0E6E  2EE2               	goto	i1l5262
 10338  0E6F                     i1l5218:	
 10339                           ;i2c1.c: 150: case 0x0c:
 10340                           
 10341                           
 10342                           ;i2c1.c: 151: PROTOCOL_RST();
 10343  0E6F  3197  27BD  318E   	fcall	_PROTOCOL_RST
 10344                           
 10345                           ;i2c1.c: 152: break;
 10346  0E72  2EE2               	goto	i1l5262
 10347  0E73                     i1l103:	
 10348                           ;i2c1.c: 153: case 0x08:
 10349                           
 10350                           
 10351                           ;i2c1.c: 154: next = 0x01;
 10352  0E73  01E9               	clrf	I2C1_StatusCallback@next
 10353  0E74  0AE9               	incf	I2C1_StatusCallback@next,f
 10354                           
 10355                           ;i2c1.c: 155: break;
 10356  0E75  2EE2               	goto	i1l5262
 10357  0E76                     i1l5220:	
 10358                           ;i2c1.c: 156: case 0x0a:
 10359                           
 10360                           
 10361                           ;i2c1.c: 157: next = 0x02;
 10362  0E76  3002               	movlw	2
 10363  0E77  2EAA               	goto	L4
 10364  0E78                     i1l5224:	
 10365                           ;i2c1.c: 159: }
 10366                           
 10367                           ;i2c1.c: 158: break;
 10368                           
 10369  0E78  087D               	movf	_I2C_slaveWriteData,w	;volatile
 10370                           
 10371                           ; Switch size 1, requested type "space"
 10372                           ; Number of cases is 7, Range of values is 3 to 12
 10373                           ; switch strategies available:
 10374                           ; Name         Instructions Cycles
 10375                           ; simple_byte           22    12 (average)
 10376                           ; direct_byte           29     9 (fixed)
 10377                           ; jumptable            263     9 (fixed)
 10378                           ;	Chosen strategy is simple_byte
 10379  0E79  3A03               	xorlw	3	; case 3
 10380  0E7A  1903               	skipnz
 10381  0E7B  2E67               	goto	i1l5214
 10382  0E7C  3A07               	xorlw	7	; case 4
 10383  0E7D  1903               	skipnz
 10384  0E7E  2E5F               	goto	i1l5210
 10385  0E7F  3A01               	xorlw	1	; case 5
 10386  0E80  1903               	skipnz
 10387  0E81  2E63               	goto	i1l5212
 10388  0E82  3A03               	xorlw	3	; case 6
 10389  0E83  1903               	skipnz
 10390  0E84  2E6B               	goto	i1l5216
 10391  0E85  3A0E               	xorlw	14	; case 8
 10392  0E86  1903               	skipnz
 10393  0E87  2E73               	goto	i1l103
 10394  0E88  3A02               	xorlw	2	; case 10
 10395  0E89  1903               	skipnz
 10396  0E8A  2E76               	goto	i1l5220
 10397  0E8B  3A06               	xorlw	6	; case 12
 10398  0E8C  1903               	skipnz
 10399  0E8D  2E6F               	goto	i1l5218
 10400  0E8E  2EE2               	goto	i1l5262
 10401                           
 10402                           ;i2c1.c: 161: }
 10403                           
 10404                           ;i2c1.c: 160: break;
 10405  0E8F  2EE2               	goto	i1l5262
 10406  0E90                     i1l5228:	
 10407  0E90  0869               	movf	I2C1_StatusCallback@next,w
 10408                           
 10409                           ; Switch size 1, requested type "space"
 10410                           ; Number of cases is 2, Range of values is 0 to 1
 10411                           ; switch strategies available:
 10412                           ; Name         Instructions Cycles
 10413                           ; simple_byte            7     4 (average)
 10414                           ; direct_byte           10     6 (fixed)
 10415                           ; jumptable            260     6 (fixed)
 10416                           ;	Chosen strategy is simple_byte
 10417  0E91  3A00               	xorlw	0	; case 0
 10418  0E92  1903               	skipnz
 10419  0E93  2E78               	goto	i1l5224
 10420  0E94  3A01               	xorlw	1	; case 1
 10421  0E95  1903               	skipnz
 10422  0E96  2E5A               	goto	i1l5206
 10423  0E97  2EE2               	goto	i1l5262
 10424                           
 10425                           ;i2c1.c: 162: break;
 10426  0E98  2EE2               	goto	i1l5262
 10427  0E99                     i1l5230:	
 10428                           ;i2c1.c: 164: case SLAVE_GENERAL_CALL:
 10429                           
 10430                           
 10431                           ;i2c1.c: 165: if (I2C_slaveWriteData == 0x02) {
 10432  0E99  3002               	movlw	2
 10433  0E9A  067D               	xorwf	_I2C_slaveWriteData,w	;volatile
 10434  0E9B  1D03               	btfss	3,2
 10435  0E9C  2EE2               	goto	i1l5262
 10436                           
 10437                           ;i2c1.c: 166: SSP1CON2bits.GCEN = 0;
 10438  0E9D  0024               	movlb	4	; select bank4
 10439  0E9E  1396               	bcf	22,7	;volatile
 10440                           
 10441                           ;i2c1.c: 167: PROTOCOL_Backplane_Slave_Enabled();
 10442  0E9F  3197  2757  318E   	fcall	_PROTOCOL_Backplane_Slave_Enabled
 10443                           
 10444                           ;i2c1.c: 168: }
 10445                           ;i2c1.c: 169: break;
 10446  0EA2  2EE2               	goto	i1l5262
 10447  0EA3                     i1l5236:	
 10448                           ;i2c1.c: 173: case 0x02:
 10449                           
 10450                           ;i2c1.c: 172: switch(next) {
 10451                           
 10452                           ;i2c1.c: 171: case SLAVE_NORMAL_DATA:
 10453                           
 10454                           
 10455                           ;i2c1.c: 174: ext_len = I2C_slaveWriteData;
 10456  0EA3  087D               	movf	_I2C_slaveWriteData,w	;volatile
 10457  0EA4  00F6               	movwf	??_I2C1_StatusCallback
 10458  0EA5  0876               	movf	??_I2C1_StatusCallback,w
 10459  0EA6  0020               	movlb	0	; select bank0
 10460  0EA7  00E8               	movwf	I2C1_StatusCallback@ext_len
 10461                           
 10462                           ;i2c1.c: 175: ext_cnt = 0;
 10463  0EA8  01E7               	clrf	I2C1_StatusCallback@ext_cnt
 10464                           
 10465                           ;i2c1.c: 176: next = 0x03;
 10466  0EA9  3003               	movlw	3
 10467  0EAA                     L4:	
 10468  0EAA  00F6               	movwf	??_I2C1_StatusCallback
 10469  0EAB  0876               	movf	??_I2C1_StatusCallback,w
 10470  0EAC  00E9               	movwf	I2C1_StatusCallback@next
 10471                           
 10472                           ;i2c1.c: 177: break;
 10473  0EAD  2EE2               	goto	i1l5262
 10474  0EAE                     i1l5242:	
 10475                           ;i2c1.c: 178: case 0x03:
 10476                           
 10477                           
 10478                           ;i2c1.c: 179: ext_buf[ext_cnt++] = (char)I2C_slaveWriteData;
 10479  0EAE  087D               	movf	_I2C_slaveWriteData,w	;volatile
 10480  0EAF  00F6               	movwf	??_I2C1_StatusCallback
 10481  0EB0  0867               	movf	I2C1_StatusCallback@ext_cnt,w
 10482  0EB1  3EA0               	addlw	(low (I2C1_StatusCallback@ext_buf| (0+256)))& (0+255)
 10483  0EB2  0086               	movwf	6
 10484  0EB3  3001               	movlw	1	; select bank3/4
 10485  0EB4  0087               	movwf	7
 10486  0EB5  0876               	movf	??_I2C1_StatusCallback,w
 10487  0EB6  0081               	movwf	1
 10488  0EB7  3001               	movlw	1
 10489  0EB8  00F6               	movwf	??_I2C1_StatusCallback
 10490  0EB9  0876               	movf	??_I2C1_StatusCallback,w
 10491  0EBA  07E7               	addwf	I2C1_StatusCallback@ext_cnt,f
 10492                           
 10493                           ;i2c1.c: 180: if (ext_cnt >= ext_len) {
 10494  0EBB  0868               	movf	I2C1_StatusCallback@ext_len,w
 10495  0EBC  0267               	subwf	I2C1_StatusCallback@ext_cnt,w
 10496  0EBD  1C03               	skipc
 10497  0EBE  2EE2               	goto	i1l5262
 10498                           
 10499                           ;i2c1.c: 181: if (!PROTOCOL_Read_Lock()) PROTOCOL_EXT(&ext_buf[0]);
 10500  0EBF  3197  2745  318E   	fcall	i1_PROTOCOL_Read_Lock
 10501  0EC2  3A00               	xorlw	0
 10502  0EC3  1D03               	skipz
 10503  0EC4  2EC9               	goto	i1l5252
 10504  0EC5  30A0               	movlw	(low (I2C1_StatusCallback@ext_buf| (0+256)))& (0+255)
 10505  0EC6  3188  205E  318E   	fcall	i1_PROTOCOL_EXT
 10506  0EC9                     i1l5252:	
 10507                           
 10508                           ;i2c1.c: 182: next = 0x00;
 10509  0EC9  0020               	movlb	0	; select bank0
 10510  0ECA  01E9               	clrf	I2C1_StatusCallback@next
 10511                           
 10512                           ;i2c1.c: 185: }
 10513                           
 10514                           ;i2c1.c: 183: }
 10515                           ;i2c1.c: 184: break;
 10516  0ECB  2EE2               	goto	i1l5262
 10517  0ECC                     i1l5256:	
 10518  0ECC  0020               	movlb	0	; select bank0
 10519  0ECD  0869               	movf	I2C1_StatusCallback@next,w
 10520                           
 10521                           ; Switch size 1, requested type "space"
 10522                           ; Number of cases is 2, Range of values is 2 to 3
 10523                           ; switch strategies available:
 10524                           ; Name         Instructions Cycles
 10525                           ; simple_byte            7     4 (average)
 10526                           ; direct_byte           13     9 (fixed)
 10527                           ; jumptable            263     9 (fixed)
 10528                           ;	Chosen strategy is simple_byte
 10529  0ECE  3A02               	xorlw	2	; case 2
 10530  0ECF  1903               	skipnz
 10531  0ED0  2EA3               	goto	i1l5236
 10532  0ED1  3A01               	xorlw	1	; case 3
 10533  0ED2  1903               	skipnz
 10534  0ED3  2EAE               	goto	i1l5242
 10535  0ED4  2EE2               	goto	i1l5262
 10536                           
 10537                           ;i2c1.c: 190: }
 10538                           
 10539                           ;i2c1.c: 188: break;
 10540                           
 10541                           ;i2c1.c: 187: default:
 10542                           
 10543                           ;i2c1.c: 186: break;
 10544  0ED5  2EE2               	goto	i1l5262
 10545  0ED6                     i1l5260:	
 10546  0ED6  0020               	movlb	0	; select bank0
 10547  0ED7  086A               	movf	I2C1_StatusCallback@slaveWriteType,w
 10548                           
 10549                           ; Switch size 1, requested type "space"
 10550                           ; Number of cases is 3, Range of values is 0 to 2
 10551                           ; switch strategies available:
 10552                           ; Name         Instructions Cycles
 10553                           ; simple_byte           10     6 (average)
 10554                           ; direct_byte           12     6 (fixed)
 10555                           ; jumptable            260     6 (fixed)
 10556                           ;	Chosen strategy is simple_byte
 10557  0ED8  3A00               	xorlw	0	; case 0
 10558  0ED9  1903               	skipnz
 10559  0EDA  2ECC               	goto	i1l5256
 10560  0EDB  3A01               	xorlw	1	; case 1
 10561  0EDC  1903               	skipnz
 10562  0EDD  2E90               	goto	i1l5228
 10563  0EDE  3A03               	xorlw	3	; case 2
 10564  0EDF  1903               	skipnz
 10565  0EE0  2E99               	goto	i1l5230
 10566  0EE1  2EE2               	goto	i1l5262
 10567  0EE2                     i1l5262:	
 10568                           
 10569                           ;i2c1.c: 192: slaveWriteType = SLAVE_NORMAL_DATA;
 10570  0EE2  0020               	movlb	0	; select bank0
 10571  0EE3  01EA               	clrf	I2C1_StatusCallback@slaveWriteType
 10572                           
 10573                           ;i2c1.c: 193: break;
 10574  0EE4  0008               	return
 10575  0EE5                     i1l5264:	
 10576                           ;i2c1.c: 197: {
 10577                           ;i2c1.c: 198: case 0x01:
 10578                           
 10579                           ;i2c1.c: 196: switch (I2C_slaveWriteData)
 10580                           
 10581                           ;i2c1.c: 195: case I2C1_SLAVE_READ_REQUEST:
 10582                           
 10583                           
 10584                           ;i2c1.c: 199: SSP1BUF = PROTOCOL_I2C_WHO();
 10585  0EE5  3197  2742         	fcall	_PROTOCOL_I2C_WHO
 10586  0EE7  0024               	movlb	4	; select bank4
 10587  0EE8  0091               	movwf	17	;volatile
 10588                           
 10589                           ;i2c1.c: 200: break;
 10590  0EE9  0008               	return
 10591  0EEA                     i1l5266:	
 10592                           ;i2c1.c: 201: case 0x07:
 10593                           
 10594                           
 10595                           ;i2c1.c: 202: pdata = PROTOCOL_I2C_SEN();
 10596  0EEA  318B  2339         	fcall	_PROTOCOL_I2C_SEN
 10597  0EEC  00F6               	movwf	??_I2C1_StatusCallback
 10598  0EED  0876               	movf	??_I2C1_StatusCallback,w
 10599  0EEE  00F8               	movwf	I2C1_StatusCallback@pdata
 10600                           
 10601                           ;i2c1.c: 203: SSP1BUF = *pdata;
 10602  0EEF  0878               	movf	I2C1_StatusCallback@pdata,w
 10603  0EF0  0086               	movwf	6
 10604  0EF1  0187               	clrf	7
 10605  0EF2  0801               	movf	1,w
 10606  0EF3  0024               	movlb	4	; select bank4
 10607  0EF4  0091               	movwf	17	;volatile
 10608                           
 10609                           ;i2c1.c: 204: break;
 10610  0EF5  0008               	return
 10611  0EF6                     i1l5270:	
 10612                           ;i2c1.c: 205: case 0x09:
 10613                           
 10614                           
 10615                           ;i2c1.c: 206: SSP1BUF = PROTOCOL_I2C_GET();
 10616  0EF6  3197  273F         	fcall	_PROTOCOL_I2C_GET
 10617  0EF8  0024               	movlb	4	; select bank4
 10618  0EF9  0091               	movwf	17	;volatile
 10619                           
 10620                           ;i2c1.c: 208: }
 10621                           
 10622                           ;i2c1.c: 207: break;
 10623  0EFA  0008               	return
 10624  0EFB                     i1l5274:	
 10625  0EFB  087D               	movf	_I2C_slaveWriteData,w	;volatile
 10626                           
 10627                           ; Switch size 1, requested type "space"
 10628                           ; Number of cases is 3, Range of values is 1 to 9
 10629                           ; switch strategies available:
 10630                           ; Name         Instructions Cycles
 10631                           ; simple_byte           10     6 (average)
 10632                           ; direct_byte           27     9 (fixed)
 10633                           ; jumptable            263     9 (fixed)
 10634                           ;	Chosen strategy is simple_byte
 10635  0EFC  3A01               	xorlw	1	; case 1
 10636  0EFD  1903               	skipnz
 10637  0EFE  2EE5               	goto	i1l5264
 10638  0EFF  3A06               	xorlw	6	; case 7
 10639  0F00  1903               	skipnz
 10640  0F01  2EEA               	goto	i1l5266
 10641  0F02  3A0E               	xorlw	14	; case 9
 10642  0F03  1903               	skipnz
 10643  0F04  2EF6               	goto	i1l5270
 10644  0F05  2F11               	goto	i1l124
 10645                           
 10646                           ;i2c1.c: 216: }
 10647                           
 10648                           ;i2c1.c: 214: break;
 10649                           
 10650                           ;i2c1.c: 213: default:
 10651                           
 10652                           ;i2c1.c: 212: break;
 10653                           
 10654                           ;i2c1.c: 211: case I2C1_SLAVE_READ_COMPLETED:
 10655                           
 10656                           ;i2c1.c: 209: break;
 10657  0F06  0008               	return
 10658  0F07                     i1l5278:	
 10659  0F07  0877               	movf	I2C1_StatusCallback@i2c_bus_state,w
 10660                           
 10661                           ; Switch size 1, requested type "space"
 10662                           ; Number of cases is 5, Range of values is 0 to 4
 10663                           ; switch strategies available:
 10664                           ; Name         Instructions Cycles
 10665                           ; direct_byte           16     6 (fixed)
 10666                           ; simple_byte           16     9 (average)
 10667                           ; jumptable            260     6 (fixed)
 10668                           ;	Chosen strategy is direct_byte
 10669  0F08  0084               	movwf	4
 10670  0F09  3005               	movlw	5
 10671  0F0A  0204               	subwf	4,w
 10672  0F0B  1803               	skipnc
 10673  0F0C  0008               	return
 10674  0F0D  3188               	movlp	high i1S5506
 10675  0F0E  3504               	lslf	4,w
 10676  0F0F  3E44               	addlw	low i1S5506
 10677  0F10  0082               	movwf	2
 10678  0F11                     i1l124:	
 10679  0F11  0008               	return
 10680  0F12                     __end_of_I2C1_StatusCallback:	
 10681                           
 10682                           	psect	swtext2
 10683  0844                     __pswtext2:	
 10684  0844                     i1S5506:	
 10685  0844  318E  2E50         	ljmp	i1l86
 10686  0846  318E  2EFB         	ljmp	i1l5274
 10687  0848  318E  2ED6         	ljmp	i1l5260
 10688  084A  318F  2F11         	ljmp	i1l124
 10689  084C  318E  2E54         	ljmp	i1l5204
 10690                           
 10691                           	psect	text53
 10692  1748                     __ptext53:	
 10693 ;; *************** function i1_PROTOCOL_STP *****************
 10694 ;; Defined at:
 10695 ;;		line 103 in file "protocol.c"
 10696 ;; Parameters:    Size  Location     Type
 10697 ;;		None
 10698 ;; Auto vars:     Size  Location     Type
 10699 ;;		None
 10700 ;; Return value:  Size  Location     Type
 10701 ;;                  1    wreg      void 
 10702 ;; Registers used:
 10703 ;;		wreg, status,2, status,0
 10704 ;; Tracked objects:
 10705 ;;		On entry : 0/0
 10706 ;;		On exit  : 0/0
 10707 ;;		Unchanged: 0/0
 10708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10710 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10712 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10713 ;;Total ram usage:        0 bytes
 10714 ;; Hardware stack levels used:    1
 10715 ;; This function calls:
 10716 ;;		Nothing
 10717 ;; This function is called by:
 10718 ;;		_I2C1_StatusCallback
 10719 ;; This function uses a non-reentrant model
 10720 ;;
 10721                           
 10722                           
 10723                           ;psect for function i1_PROTOCOL_STP
 10724  1748                     i1_PROTOCOL_STP:	
 10725                           
 10726                           ;protocol.c: 105: running = 0;
 10727                           
 10728                           ;incstack = 0
 10729                           ; Regs used in i1_PROTOCOL_STP: [wreg+status,2+status,0]
 10730  1748  0020               	movlb	0	; select bank0
 10731  1749  01D4               	clrf	_running
 10732  174A  0008               	return
 10733  174B                     __end_ofi1_PROTOCOL_STP:	
 10734                           
 10735                           	psect	text54
 10736  175F                     __ptext54:	
 10737 ;; *************** function i1_PROTOCOL_STA *****************
 10738 ;; Defined at:
 10739 ;;		line 98 in file "protocol.c"
 10740 ;; Parameters:    Size  Location     Type
 10741 ;;		None
 10742 ;; Auto vars:     Size  Location     Type
 10743 ;;		None
 10744 ;; Return value:  Size  Location     Type
 10745 ;;                  1    wreg      void 
 10746 ;; Registers used:
 10747 ;;		wreg, status,2, status,0
 10748 ;; Tracked objects:
 10749 ;;		On entry : 0/0
 10750 ;;		On exit  : 0/0
 10751 ;;		Unchanged: 0/0
 10752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10754 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10756 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10757 ;;Total ram usage:        0 bytes
 10758 ;; Hardware stack levels used:    1
 10759 ;; This function calls:
 10760 ;;		Nothing
 10761 ;; This function is called by:
 10762 ;;		_I2C1_StatusCallback
 10763 ;; This function uses a non-reentrant model
 10764 ;;
 10765                           
 10766                           
 10767                           ;psect for function i1_PROTOCOL_STA
 10768  175F                     i1_PROTOCOL_STA:	
 10769                           
 10770                           ;protocol.c: 100: running = 1;
 10771                           
 10772                           ;incstack = 0
 10773                           ; Regs used in i1_PROTOCOL_STA: [wreg+status,2+status,0]
 10774  175F  0020               	movlb	0	; select bank0
 10775  1760  01D4               	clrf	_running
 10776  1761  0AD4               	incf	_running,f
 10777  1762  0008               	return
 10778  1763                     __end_ofi1_PROTOCOL_STA:	
 10779                           
 10780                           	psect	text55
 10781  178D                     __ptext55:	
 10782 ;; *************** function i1_PROTOCOL_SET *****************
 10783 ;; Defined at:
 10784 ;;		line 116 in file "protocol.c"
 10785 ;; Parameters:    Size  Location     Type
 10786 ;;  value_          1    wreg     unsigned char 
 10787 ;; Auto vars:     Size  Location     Type
 10788 ;;  value_          1    1[COMMON] unsigned char 
 10789 ;; Return value:  Size  Location     Type
 10790 ;;                  1    wreg      void 
 10791 ;; Registers used:
 10792 ;;		wreg, status,2, status,0
 10793 ;; Tracked objects:
 10794 ;;		On entry : 0/0
 10795 ;;		On exit  : 0/0
 10796 ;;		Unchanged: 0/0
 10797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10799 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10800 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10801 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10802 ;;Total ram usage:        2 bytes
 10803 ;; Hardware stack levels used:    1
 10804 ;; This function calls:
 10805 ;;		Nothing
 10806 ;; This function is called by:
 10807 ;;		_I2C1_StatusCallback
 10808 ;; This function uses a non-reentrant model
 10809 ;;
 10810                           
 10811                           
 10812                           ;psect for function i1_PROTOCOL_SET
 10813  178D                     i1_PROTOCOL_SET:	
 10814                           
 10815                           ;incstack = 0
 10816                           ; Regs used in i1_PROTOCOL_SET: [wreg+status,2+status,0]
 10817                           ;i1PROTOCOL_SET@value_ stored from wreg
 10818  178D  00F1               	movwf	i1PROTOCOL_SET@value_
 10819                           
 10820                           ;protocol.c: 117: value = value_;
 10821  178E  0871               	movf	i1PROTOCOL_SET@value_,w
 10822  178F  00F0               	movwf	??i1_PROTOCOL_SET
 10823  1790  0870               	movf	??i1_PROTOCOL_SET,w
 10824  1791  0020               	movlb	0	; select bank0
 10825  1792  00D6               	movwf	_value
 10826  1793  0008               	return
 10827  1794                     __end_ofi1_PROTOCOL_SET:	
 10828                           
 10829                           	psect	text56
 10830  17A2                     __ptext56:	
 10831 ;; *************** function i1_PROTOCOL_SAV *****************
 10832 ;; Defined at:
 10833 ;;		line 112 in file "protocol.c"
 10834 ;; Parameters:    Size  Location     Type
 10835 ;;		None
 10836 ;; Auto vars:     Size  Location     Type
 10837 ;;		None
 10838 ;; Return value:  Size  Location     Type
 10839 ;;                  1    wreg      void 
 10840 ;; Registers used:
 10841 ;;		wreg, status,2, status,0, pclath, cstack
 10842 ;; Tracked objects:
 10843 ;;		On entry : 0/0
 10844 ;;		On exit  : 0/0
 10845 ;;		Unchanged: 0/0
 10846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10848 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10849 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10850 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10851 ;;Total ram usage:        1 bytes
 10852 ;; Hardware stack levels used:    1
 10853 ;; Hardware stack levels required when called:    1
 10854 ;; This function calls:
 10855 ;;		i1_DATAEE_WriteByte
 10856 ;; This function is called by:
 10857 ;;		_I2C1_StatusCallback
 10858 ;; This function uses a non-reentrant model
 10859 ;;
 10860                           
 10861                           
 10862                           ;psect for function i1_PROTOCOL_SAV
 10863  17A2                     i1_PROTOCOL_SAV:	
 10864                           
 10865                           ;protocol.c: 113: DATAEE_WriteByte(1, value);
 10866                           
 10867                           ;incstack = 0
 10868                           ; Regs used in i1_PROTOCOL_SAV: [wreg+status,2+status,0+pclath+cstack]
 10869  17A2  0020               	movlb	0	; select bank0
 10870  17A3  0856               	movf	_value,w
 10871  17A4  00F3               	movwf	??i1_PROTOCOL_SAV
 10872  17A5  0873               	movf	??i1_PROTOCOL_SAV,w
 10873  17A6  00F0               	movwf	i1DATAEE_WriteByte@bData
 10874  17A7  3001               	movlw	1
 10875  17A8  3189  2150         	fcall	i1_DATAEE_WriteByte
 10876  17AA  0008               	return
 10877  17AB                     __end_ofi1_PROTOCOL_SAV:	
 10878                           
 10879                           	psect	text57
 10880  0950                     __ptext57:	
 10881 ;; *************** function i1_DATAEE_WriteByte *****************
 10882 ;; Defined at:
 10883 ;;		line 180 in file "mcc_generated_files/memory.c"
 10884 ;; Parameters:    Size  Location     Type
 10885 ;;  bAdd            1    wreg     unsigned char 
 10886 ;;  bData           1    0[COMMON] unsigned char 
 10887 ;; Auto vars:     Size  Location     Type
 10888 ;;  bAdd            1    1[COMMON] unsigned char 
 10889 ;;  DATAEE_Write    1    2[COMMON] unsigned char 
 10890 ;; Return value:  Size  Location     Type
 10891 ;;                  1    wreg      void 
 10892 ;; Registers used:
 10893 ;;		wreg, status,2, status,0
 10894 ;; Tracked objects:
 10895 ;;		On entry : 0/0
 10896 ;;		On exit  : 0/0
 10897 ;;		Unchanged: 0/0
 10898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10899 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10900 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10902 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10903 ;;Total ram usage:        3 bytes
 10904 ;; Hardware stack levels used:    1
 10905 ;; This function calls:
 10906 ;;		Nothing
 10907 ;; This function is called by:
 10908 ;;		i1_PROTOCOL_SAV
 10909 ;; This function uses a non-reentrant model
 10910 ;;
 10911                           
 10912                           
 10913                           ;psect for function i1_DATAEE_WriteByte
 10914  0950                     i1_DATAEE_WriteByte:	
 10915                           
 10916                           ;incstack = 0
 10917                           ; Regs used in i1_DATAEE_WriteByte: [wreg+status,2+status,0]
 10918                           ;i1DATAEE_WriteByte@bAdd stored from wreg
 10919  0950  00F1               	movwf	i1DATAEE_WriteByte@bAdd
 10920                           
 10921                           ;memory.c: 182: uint8_t GIEBitValue = 0;
 10922  0951  01F2               	clrf	i1DATAEE_WriteByte@GIEBitValue
 10923                           
 10924                           ;memory.c: 184: EEADRL = (bAdd & 0x0ff);
 10925  0952  0871               	movf	i1DATAEE_WriteByte@bAdd,w
 10926  0953  0023               	movlb	3	; select bank3
 10927  0954  0091               	movwf	17	;volatile
 10928                           
 10929                           ;memory.c: 185: EEDATL = bData;
 10930  0955  0870               	movf	i1DATAEE_WriteByte@bData,w
 10931  0956  0093               	movwf	19	;volatile
 10932                           
 10933                           ;memory.c: 186: EECON1bits.EEPGD = 0;
 10934  0957  1395               	bcf	21,7	;volsfr
 10935                           
 10936                           ;memory.c: 187: EECON1bits.CFGS = 0;
 10937  0958  1315               	bcf	21,6	;volsfr
 10938                           
 10939                           ;memory.c: 188: EECON1bits.WREN = 1;
 10940  0959  1515               	bsf	21,2	;volsfr
 10941                           
 10942                           ;memory.c: 190: GIEBitValue = INTCONbits.GIE;
 10943  095A  3000               	movlw	0
 10944  095B  1B8B               	btfsc	11,7	;volatile
 10945  095C  3001               	movlw	1
 10946  095D  00F2               	movwf	i1DATAEE_WriteByte@GIEBitValue
 10947                           
 10948                           ;memory.c: 191: INTCONbits.GIE = 0;
 10949  095E  138B               	bcf	11,7	;volatile
 10950                           
 10951                           ;memory.c: 192: EECON2 = 0x55;
 10952  095F  3055               	movlw	85
 10953  0960  0096               	movwf	22	;volsfr
 10954                           
 10955                           ;memory.c: 193: EECON2 = 0xAA;
 10956  0961  30AA               	movlw	170
 10957  0962  0096               	movwf	22	;volsfr
 10958                           
 10959                           ;memory.c: 194: EECON1bits.WR = 1;
 10960  0963  1495               	bsf	21,1	;volsfr
 10961  0964                     i1l480:	
 10962                           ;memory.c: 197: {
 10963                           
 10964                           ;memory.c: 196: while (EECON1bits.WR)
 10965                           
 10966  0964  1895               	btfsc	21,1	;volsfr
 10967  0965  2964               	goto	i1l480
 10968                           
 10969                           ;memory.c: 198: }
 10970                           ;memory.c: 200: EECON1bits.WREN = 0;
 10971  0966  1115               	bcf	21,2	;volsfr
 10972                           
 10973                           ;memory.c: 201: INTCONbits.GIE = GIEBitValue;
 10974  0967  0C72               	rrf	i1DATAEE_WriteByte@GIEBitValue,w
 10975  0968  1C03               	skipc
 10976  0969  138B               	bcf	11,7	;volatile
 10977  096A  1803               	skipnc
 10978  096B  178B               	bsf	11,7	;volatile
 10979  096C  0008               	return
 10980  096D                     __end_ofi1_DATAEE_WriteByte:	
 10981                           
 10982                           	psect	text58
 10983  085E                     __ptext58:	
 10984 ;; *************** function i1_PROTOCOL_EXT *****************
 10985 ;; Defined at:
 10986 ;;		line 121 in file "protocol.c"
 10987 ;; Parameters:    Size  Location     Type
 10988 ;;  char_buf        1    wreg     PTR unsigned char 
 10989 ;;		 -> buf(48), I2C1_StatusCallback@ext_buf(48), 
 10990 ;; Auto vars:     Size  Location     Type
 10991 ;;  char_buf        1    5[COMMON] PTR unsigned char 
 10992 ;;		 -> buf(48), I2C1_StatusCallback@ext_buf(48), 
 10993 ;; Return value:  Size  Location     Type
 10994 ;;                  1    wreg      void 
 10995 ;; Registers used:
 10996 ;;		wreg, status,2, status,0, pclath, cstack
 10997 ;; Tracked objects:
 10998 ;;		On entry : 0/0
 10999 ;;		On exit  : 0/0
 11000 ;;		Unchanged: 0/0
 11001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11003 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11004 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11005 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11006 ;;Total ram usage:        2 bytes
 11007 ;; Hardware stack levels used:    1
 11008 ;; Hardware stack levels required when called:    2
 11009 ;; This function calls:
 11010 ;;		Absolute function
 11011 ;;		i1_extension_handler
 11012 ;; This function is called by:
 11013 ;;		_I2C1_StatusCallback
 11014 ;; This function uses a non-reentrant model
 11015 ;;
 11016                           
 11017                           
 11018                           ;psect for function i1_PROTOCOL_EXT
 11019  085E                     i1_PROTOCOL_EXT:	
 11020                           
 11021                           ;incstack = 0
 11022                           ; Regs used in i1_PROTOCOL_EXT: [wreg+status,2+status,0+pclath+cstack]
 11023                           ;i1PROTOCOL_EXT@char_buf stored from wreg
 11024  085E  00F5               	movwf	i1PROTOCOL_EXT@char_buf
 11025                           
 11026                           ;protocol.c: 122: if (PROTOCOL_Extension_Handler) PROTOCOL_Extension_Handler(char_buf);
 11027  085F  0020               	movlb	0	; select bank0
 11028  0860  084C               	movf	_PROTOCOL_Extension_Handler,w
 11029  0861  044D               	iorwf	_PROTOCOL_Extension_Handler+1,w
 11030  0862  1903               	btfsc	3,2
 11031  0863  0008               	return
 11032  0864  0875               	movf	i1PROTOCOL_EXT@char_buf,w
 11033  0865  00F4               	movwf	??i1_PROTOCOL_EXT
 11034  0866  0874               	movf	??i1_PROTOCOL_EXT,w
 11035  0867  00F2               	movwf	i1extension_handler@buf
 11036  0868  084D               	movf	_PROTOCOL_Extension_Handler+1,w
 11037  0869  008A               	movwf	10
 11038  086A  084C               	movf	_PROTOCOL_Extension_Handler,w
 11039  086B  000A               	callw
 11040  086C  3188               	pagesel	$
 11041  086D  0008               	return
 11042  086E                     __end_ofi1_PROTOCOL_EXT:	
 11043                           
 11044                           	psect	text59
 11045  17E2                     __ptext59:	
 11046 ;; *************** function i1_extension_handler *****************
 11047 ;; Defined at:
 11048 ;;		line 113 in file "main.c"
 11049 ;; Parameters:    Size  Location     Type
 11050 ;;  buf             1    2[COMMON] PTR unsigned char 
 11051 ;;		 -> buf(48), I2C1_StatusCallback@ext_buf(48), 
 11052 ;; Auto vars:     Size  Location     Type
 11053 ;;  extension_ha    1    0        unsigned char 
 11054 ;; Return value:  Size  Location     Type
 11055 ;;                  1    wreg      void 
 11056 ;; Registers used:
 11057 ;;		wreg, status,2, status,0, pclath, cstack
 11058 ;; Tracked objects:
 11059 ;;		On entry : 0/0
 11060 ;;		On exit  : 0/0
 11061 ;;		Unchanged: 0/0
 11062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11063 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11064 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11065 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11066 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11067 ;;Total ram usage:        2 bytes
 11068 ;; Hardware stack levels used:    1
 11069 ;; Hardware stack levels required when called:    1
 11070 ;; This function calls:
 11071 ;;		i1_PROTOCOL_Read_Lock
 11072 ;;		i1_PROTOCOL_Set_Lock
 11073 ;; This function is called by:
 11074 ;; This function uses a non-reentrant model
 11075 ;;
 11076                           
 11077                           
 11078                           ;psect for function i1_extension_handler
 11079  17E2                     i1_extension_handler:	
 11080  17E2                     i1l3094:	
 11081                           ;incstack = 0
 11082                           ; Regs used in i1_extension_handler: [wreg+status,2+status,0+pclath+cstack]
 11083                           
 11084                           
 11085                           ;main.c: 114: uint8_t value;
 11086                           ;main.c: 115: if (!PROTOCOL_Read_Lock()) {
 11087  17E2  3197  2745  3197   	fcall	i1_PROTOCOL_Read_Lock
 11088  17E5  3A00               	xorlw	0
 11089  17E6  1D03               	skipz
 11090  17E7  0008               	return
 11091                           
 11092                           ;main.c: 116: pbuf = buf;
 11093  17E8  0872               	movf	i1extension_handler@buf,w
 11094  17E9  00F3               	movwf	??i1_extension_handler
 11095  17EA  0873               	movf	??i1_extension_handler,w
 11096  17EB  0020               	movlb	0	; select bank0
 11097  17EC  00D9               	movwf	_pbuf
 11098                           
 11099                           ;main.c: 117: PROTOCOL_Set_Lock(1);
 11100  17ED  3001               	movlw	1
 11101  17EE  3197  2786         	fcall	i1_PROTOCOL_Set_Lock
 11102  17F0  0008               	return
 11103  17F1                     __end_ofi1_extension_handler:	
 11104                           
 11105                           	psect	text60
 11106  1786                     __ptext60:	
 11107 ;; *************** function i1_PROTOCOL_Set_Lock *****************
 11108 ;; Defined at:
 11109 ;;		line 125 in file "protocol.c"
 11110 ;; Parameters:    Size  Location     Type
 11111 ;;  lock            1    wreg     unsigned char 
 11112 ;; Auto vars:     Size  Location     Type
 11113 ;;  lock            1    1[COMMON] unsigned char 
 11114 ;; Return value:  Size  Location     Type
 11115 ;;                  1    wreg      void 
 11116 ;; Registers used:
 11117 ;;		wreg
 11118 ;; Tracked objects:
 11119 ;;		On entry : 0/0
 11120 ;;		On exit  : 0/0
 11121 ;;		Unchanged: 0/0
 11122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11124 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11125 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11126 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11127 ;;Total ram usage:        2 bytes
 11128 ;; Hardware stack levels used:    1
 11129 ;; This function calls:
 11130 ;;		Nothing
 11131 ;; This function is called by:
 11132 ;;		i1_extension_handler
 11133 ;; This function uses a non-reentrant model
 11134 ;;
 11135                           
 11136                           
 11137                           ;psect for function i1_PROTOCOL_Set_Lock
 11138  1786                     i1_PROTOCOL_Set_Lock:	
 11139                           
 11140                           ;incstack = 0
 11141                           ; Regs used in i1_PROTOCOL_Set_Lock: [wreg]
 11142                           ;i1PROTOCOL_Set_Lock@lock stored from wreg
 11143  1786  00F1               	movwf	i1PROTOCOL_Set_Lock@lock
 11144                           
 11145                           ;protocol.c: 126: locked = lock;
 11146  1787  0871               	movf	i1PROTOCOL_Set_Lock@lock,w
 11147  1788  00F0               	movwf	??i1_PROTOCOL_Set_Lock
 11148  1789  0870               	movf	??i1_PROTOCOL_Set_Lock,w
 11149  178A  0020               	movlb	0	; select bank0
 11150  178B  00D5               	movwf	_locked
 11151  178C  0008               	return
 11152  178D                     __end_ofi1_PROTOCOL_Set_Lock:	
 11153                           
 11154                           	psect	text61
 11155  1745                     __ptext61:	
 11156 ;; *************** function i1_PROTOCOL_Read_Lock *****************
 11157 ;; Defined at:
 11158 ;;		line 129 in file "protocol.c"
 11159 ;; Parameters:    Size  Location     Type
 11160 ;;		None
 11161 ;; Auto vars:     Size  Location     Type
 11162 ;;		None
 11163 ;; Return value:  Size  Location     Type
 11164 ;;                  1    wreg      unsigned char 
 11165 ;; Registers used:
 11166 ;;		wreg
 11167 ;; Tracked objects:
 11168 ;;		On entry : 0/0
 11169 ;;		On exit  : 0/0
 11170 ;;		Unchanged: 0/0
 11171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11173 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11175 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11176 ;;Total ram usage:        0 bytes
 11177 ;; Hardware stack levels used:    1
 11178 ;; This function calls:
 11179 ;;		Nothing
 11180 ;; This function is called by:
 11181 ;;		_I2C1_StatusCallback
 11182 ;;		i1_extension_handler
 11183 ;; This function uses a non-reentrant model
 11184 ;;
 11185                           
 11186                           
 11187                           ;psect for function i1_PROTOCOL_Read_Lock
 11188  1745                     i1_PROTOCOL_Read_Lock:	
 11189                           
 11190                           ;protocol.c: 130: return locked;
 11191                           
 11192                           ;incstack = 0
 11193                           ; Regs used in i1_PROTOCOL_Read_Lock: [wreg]
 11194  1745  0020               	movlb	0	; select bank0
 11195  1746  0855               	movf	_locked,w
 11196  1747  0008               	return
 11197  1748                     __end_ofi1_PROTOCOL_Read_Lock:	
 11198                           
 11199                           	psect	text62
 11200  17BD                     __ptext62:	
 11201 ;; *************** function _PROTOCOL_RST *****************
 11202 ;; Defined at:
 11203 ;;		line 285 in file "protocol.c"
 11204 ;; Parameters:    Size  Location     Type
 11205 ;;		None
 11206 ;; Auto vars:     Size  Location     Type
 11207 ;;		None
 11208 ;; Return value:  Size  Location     Type
 11209 ;;                  1    wreg      void 
 11210 ;; Registers used:
 11211 ;;		wreg, status,2, status,0
 11212 ;; Tracked objects:
 11213 ;;		On entry : 0/0
 11214 ;;		On exit  : 0/0
 11215 ;;		Unchanged: 0/0
 11216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11218 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11219 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11220 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11221 ;;Total ram usage:        1 bytes
 11222 ;; Hardware stack levels used:    1
 11223 ;; This function calls:
 11224 ;;		Nothing
 11225 ;; This function is called by:
 11226 ;;		_I2C1_StatusCallback
 11227 ;; This function uses a non-reentrant model
 11228 ;;
 11229                           
 11230                           
 11231                           ;psect for function _PROTOCOL_RST
 11232  17BD                     _PROTOCOL_RST:	
 11233                           
 11234                           ;protocol.c: 286: if (readbuf.status != TLV_SET) {
 11235                           
 11236                           ;incstack = 0
 11237                           ; Regs used in _PROTOCOL_RST: [wreg+status,2+status,0]
 11238  17BD  0021               	movlb	1	; select bank1
 11239  17BE  084E               	movf	(_readbuf^(0+128)+3),w
 11240  17BF  1903               	btfsc	3,2
 11241  17C0  0008               	return
 11242                           
 11243                           ;protocol.c: 287: readbuf.buf_cnt = 0;
 11244  17C1  01CF               	clrf	(_readbuf^(0+128)+4)
 11245                           
 11246                           ;protocol.c: 288: readbuf.status = COMPLETE;
 11247  17C2  3003               	movlw	3
 11248  17C3  00F0               	movwf	??_PROTOCOL_RST
 11249  17C4  0870               	movf	??_PROTOCOL_RST,w
 11250  17C5  00CE               	movwf	(_readbuf^(0+128)+3)
 11251  17C6  0008               	return
 11252  17C7                     __end_of_PROTOCOL_RST:	
 11253                           
 11254                           	psect	text63
 11255  175B                     __ptext63:	
 11256 ;; *************** function _PROTOCOL_INV *****************
 11257 ;; Defined at:
 11258 ;;		line 108 in file "protocol.c"
 11259 ;; Parameters:    Size  Location     Type
 11260 ;;		None
 11261 ;; Auto vars:     Size  Location     Type
 11262 ;;		None
 11263 ;; Return value:  Size  Location     Type
 11264 ;;                  1    wreg      void 
 11265 ;; Registers used:
 11266 ;;		None
 11267 ;; Tracked objects:
 11268 ;;		On entry : 0/0
 11269 ;;		On exit  : 0/0
 11270 ;;		Unchanged: 0/0
 11271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11273 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11274 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11275 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11276 ;;Total ram usage:        0 bytes
 11277 ;; Hardware stack levels used:    1
 11278 ;; This function calls:
 11279 ;;		Nothing
 11280 ;; This function is called by:
 11281 ;;		_I2C1_StatusCallback
 11282 ;; This function uses a non-reentrant model
 11283 ;;
 11284                           
 11285                           
 11286                           ;psect for function _PROTOCOL_INV
 11287  175B                     _PROTOCOL_INV:	
 11288                           
 11289                           ;protocol.c: 109: invoked = 1;
 11290                           
 11291                           ;incstack = 0
 11292                           ; Regs used in _PROTOCOL_INV: []
 11293  175B  0020               	movlb	0	; select bank0
 11294  175C  01D3               	clrf	_invoked
 11295  175D  0AD3               	incf	_invoked,f
 11296  175E  0008               	return
 11297  175F                     __end_of_PROTOCOL_INV:	
 11298                           
 11299                           	psect	text64
 11300  1742                     __ptext64:	
 11301 ;; *************** function _PROTOCOL_I2C_WHO *****************
 11302 ;; Defined at:
 11303 ;;		line 205 in file "protocol.c"
 11304 ;; Parameters:    Size  Location     Type
 11305 ;;		None
 11306 ;; Auto vars:     Size  Location     Type
 11307 ;;		None
 11308 ;; Return value:  Size  Location     Type
 11309 ;;                  1    wreg      unsigned char 
 11310 ;; Registers used:
 11311 ;;		wreg
 11312 ;; Tracked objects:
 11313 ;;		On entry : 0/0
 11314 ;;		On exit  : 0/0
 11315 ;;		Unchanged: 0/0
 11316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11318 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11320 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11321 ;;Total ram usage:        0 bytes
 11322 ;; Hardware stack levels used:    1
 11323 ;; This function calls:
 11324 ;;		Nothing
 11325 ;; This function is called by:
 11326 ;;		_I2C1_StatusCallback
 11327 ;; This function uses a non-reentrant model
 11328 ;;
 11329                           
 11330                           
 11331                           ;psect for function _PROTOCOL_I2C_WHO
 11332  1742                     _PROTOCOL_I2C_WHO:	
 11333                           
 11334                           ;protocol.c: 206: return slave_address;
 11335                           
 11336                           ;incstack = 0
 11337                           ; Regs used in _PROTOCOL_I2C_WHO: [wreg]
 11338  1742  0020               	movlb	0	; select bank0
 11339  1743  0858               	movf	_slave_address,w
 11340  1744  0008               	return
 11341  1745                     __end_of_PROTOCOL_I2C_WHO:	
 11342                           
 11343                           	psect	text65
 11344  0B39                     __ptext65:	
 11345 ;; *************** function _PROTOCOL_I2C_SEN *****************
 11346 ;; Defined at:
 11347 ;;		line 404 in file "protocol.c"
 11348 ;; Parameters:    Size  Location     Type
 11349 ;;		None
 11350 ;; Auto vars:     Size  Location     Type
 11351 ;;  pdata           1    1[COMMON] PTR unsigned char 
 11352 ;;		 -> type_no_data(1), PROTOCOL_Send_uint8_t@pbuf(1), sendbuf(16), readbuf.length(1), 
 11353 ;;		 -> readbuf.type(1), readbuf(5), 
 11354 ;; Return value:  Size  Location     Type
 11355 ;;                  1    wreg      PTR unsigned char 
 11356 ;; Registers used:
 11357 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11358 ;; Tracked objects:
 11359 ;;		On entry : 0/0
 11360 ;;		On exit  : 0/0
 11361 ;;		Unchanged: 0/0
 11362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11364 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11365 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11366 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11367 ;;Total ram usage:        2 bytes
 11368 ;; Hardware stack levels used:    1
 11369 ;; This function calls:
 11370 ;;		Nothing
 11371 ;; This function is called by:
 11372 ;;		_I2C1_StatusCallback
 11373 ;; This function uses a non-reentrant model
 11374 ;;
 11375                           
 11376                           
 11377                           ;psect for function _PROTOCOL_I2C_SEN
 11378  0B39                     _PROTOCOL_I2C_SEN:	
 11379                           
 11380                           ;protocol.c: 405: uint8_t *pdata;
 11381                           ;protocol.c: 406: switch(readbuf.status) {
 11382                           
 11383                           ;incstack = 0
 11384                           ; Regs used in _PROTOCOL_I2C_SEN: [wreg-fsr0h+status,2+status,0]
 11385  0B39  2B64               	goto	i1l3136
 11386  0B3A                     i1l3116:	
 11387                           ;protocol.c: 407: case TLV_SET:
 11388                           
 11389                           
 11390                           ;protocol.c: 408: pdata = &readbuf.type;
 11391  0B3A  30CB               	movlw	(low (_readbuf| 0))& (0+255)
 11392  0B3B  00F0               	movwf	??_PROTOCOL_I2C_SEN
 11393  0B3C  0870               	movf	??_PROTOCOL_I2C_SEN,w
 11394  0B3D  00F1               	movwf	PROTOCOL_I2C_SEN@pdata
 11395                           
 11396                           ;protocol.c: 409: readbuf.status = TYPE_SENT;
 11397  0B3E  0021               	movlb	1	; select bank1
 11398  0B3F  01CE               	clrf	(_readbuf^(0+128)+3)
 11399  0B40  0ACE               	incf	(_readbuf^(0+128)+3),f
 11400                           
 11401                           ;protocol.c: 410: break;
 11402  0B41  2B73               	goto	i1l3138
 11403  0B42                     i1l3120:	
 11404                           ;protocol.c: 411: case TYPE_SENT:
 11405                           
 11406                           
 11407                           ;protocol.c: 412: pdata = &readbuf.length;
 11408  0B42  30CC               	movlw	(low ((_readbuf| 0+1)))& (0+255)
 11409  0B43  00F0               	movwf	??_PROTOCOL_I2C_SEN
 11410  0B44  0870               	movf	??_PROTOCOL_I2C_SEN,w
 11411  0B45  00F1               	movwf	PROTOCOL_I2C_SEN@pdata
 11412                           
 11413                           ;protocol.c: 413: readbuf.status = LENGTH_SENT;
 11414  0B46  3002               	movlw	2
 11415  0B47  2B5B               	goto	L5
 11416  0B48                     i1l3122:	
 11417                           ;protocol.c: 415: case LENGTH_SENT:
 11418                           
 11419                           ;protocol.c: 414: break;
 11420                           
 11421                           
 11422                           ;protocol.c: 416: if (readbuf.buf_cnt < readbuf.length) {
 11423  0B48  084C               	movf	(_readbuf^(0+128)+1),w
 11424  0B49  024F               	subwf	(_readbuf^(0+128)+4),w
 11425  0B4A  1803               	skipnc
 11426  0B4B  2B55               	goto	i1l3126
 11427                           
 11428                           ;protocol.c: 417: pdata = &readbuf.pbuffer[readbuf.buf_cnt++];
 11429  0B4C  084D               	movf	(low ((_readbuf| 0+2)))^(0+128),w
 11430  0B4D  074F               	addwf	(_readbuf^(0+128)+4),w
 11431  0B4E  00F0               	movwf	??_PROTOCOL_I2C_SEN
 11432  0B4F  0870               	movf	??_PROTOCOL_I2C_SEN,w
 11433  0B50  00F1               	movwf	PROTOCOL_I2C_SEN@pdata
 11434  0B51  3001               	movlw	1
 11435  0B52  00F0               	movwf	??_PROTOCOL_I2C_SEN
 11436  0B53  0870               	movf	??_PROTOCOL_I2C_SEN,w
 11437  0B54  07CF               	addwf	(_readbuf^(0+128)+4),f
 11438  0B55                     i1l3126:	
 11439                           
 11440                           ;protocol.c: 418: }
 11441                           ;protocol.c: 419: if (readbuf.buf_cnt == readbuf.length) {
 11442  0B55  084F               	movf	(_readbuf^(0+128)+4),w
 11443  0B56  064C               	xorwf	(_readbuf^(0+128)+1),w
 11444  0B57  1D03               	skipz
 11445  0B58  2B73               	goto	i1l3138
 11446                           
 11447                           ;protocol.c: 420: readbuf.buf_cnt = 0;
 11448  0B59  01CF               	clrf	(_readbuf^(0+128)+4)
 11449                           
 11450                           ;protocol.c: 421: readbuf.status = COMPLETE;
 11451  0B5A  3003               	movlw	3
 11452  0B5B                     L5:	
 11453  0B5B  00F0               	movwf	??_PROTOCOL_I2C_SEN
 11454  0B5C  0870               	movf	??_PROTOCOL_I2C_SEN,w
 11455  0B5D  00CE               	movwf	(_readbuf^(0+128)+3)
 11456                           
 11457                           ;protocol.c: 422: }
 11458                           ;protocol.c: 423: break;
 11459  0B5E  2B73               	goto	i1l3138
 11460  0B5F                     i1l3132:	
 11461                           ;protocol.c: 424: case COMPLETE:
 11462                           
 11463                           
 11464                           ;protocol.c: 425: pdata = &type_no_data;
 11465  0B5F  306F               	movlw	(low (_type_no_data| 0))& (0+255)
 11466  0B60  00F0               	movwf	??_PROTOCOL_I2C_SEN
 11467  0B61  0870               	movf	??_PROTOCOL_I2C_SEN,w
 11468  0B62  00F1               	movwf	PROTOCOL_I2C_SEN@pdata
 11469                           
 11470                           ;protocol.c: 427: }
 11471                           
 11472                           ;protocol.c: 426: break;
 11473  0B63  2B73               	goto	i1l3138
 11474  0B64                     i1l3136:	
 11475  0B64  0021               	movlb	1	; select bank1
 11476  0B65  084E               	movf	(_readbuf^(0+128)+3),w
 11477                           
 11478                           ; Switch size 1, requested type "space"
 11479                           ; Number of cases is 4, Range of values is 0 to 3
 11480                           ; switch strategies available:
 11481                           ; Name         Instructions Cycles
 11482                           ; simple_byte           13     7 (average)
 11483                           ; direct_byte           14     6 (fixed)
 11484                           ; jumptable            260     6 (fixed)
 11485                           ;	Chosen strategy is simple_byte
 11486  0B66  3A00               	xorlw	0	; case 0
 11487  0B67  1903               	skipnz
 11488  0B68  2B3A               	goto	i1l3116
 11489  0B69  3A01               	xorlw	1	; case 1
 11490  0B6A  1903               	skipnz
 11491  0B6B  2B42               	goto	i1l3120
 11492  0B6C  3A03               	xorlw	3	; case 2
 11493  0B6D  1903               	skipnz
 11494  0B6E  2B48               	goto	i1l3122
 11495  0B6F  3A01               	xorlw	1	; case 3
 11496  0B70  1903               	skipnz
 11497  0B71  2B5F               	goto	i1l3132
 11498  0B72  2B73               	goto	i1l3138
 11499  0B73                     i1l3138:	
 11500                           
 11501                           ;protocol.c: 428: return pdata;
 11502  0B73  0871               	movf	PROTOCOL_I2C_SEN@pdata,w
 11503  0B74  0008               	return
 11504  0B75                     __end_of_PROTOCOL_I2C_SEN:	
 11505                           
 11506                           	psect	text66
 11507  173F                     __ptext66:	
 11508 ;; *************** function _PROTOCOL_I2C_GET *****************
 11509 ;; Defined at:
 11510 ;;		line 209 in file "protocol.c"
 11511 ;; Parameters:    Size  Location     Type
 11512 ;;		None
 11513 ;; Auto vars:     Size  Location     Type
 11514 ;;		None
 11515 ;; Return value:  Size  Location     Type
 11516 ;;                  1    wreg      unsigned char 
 11517 ;; Registers used:
 11518 ;;		wreg
 11519 ;; Tracked objects:
 11520 ;;		On entry : 0/0
 11521 ;;		On exit  : 0/0
 11522 ;;		Unchanged: 0/0
 11523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11525 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11527 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11528 ;;Total ram usage:        0 bytes
 11529 ;; Hardware stack levels used:    1
 11530 ;; This function calls:
 11531 ;;		Nothing
 11532 ;; This function is called by:
 11533 ;;		_I2C1_StatusCallback
 11534 ;; This function uses a non-reentrant model
 11535 ;;
 11536                           
 11537                           
 11538                           ;psect for function _PROTOCOL_I2C_GET
 11539  173F                     _PROTOCOL_I2C_GET:	
 11540                           
 11541                           ;protocol.c: 210: return value;
 11542                           
 11543                           ;incstack = 0
 11544                           ; Regs used in _PROTOCOL_I2C_GET: [wreg]
 11545  173F  0020               	movlb	0	; select bank0
 11546  1740  0856               	movf	_value,w
 11547  1741  0008               	return
 11548  1742                     __end_of_PROTOCOL_I2C_GET:	
 11549                           
 11550                           	psect	text67
 11551  1757                     __ptext67:	
 11552 ;; *************** function _PROTOCOL_Backplane_Slave_Enabled *****************
 11553 ;; Defined at:
 11554 ;;		line 201 in file "protocol.c"
 11555 ;; Parameters:    Size  Location     Type
 11556 ;;		None
 11557 ;; Auto vars:     Size  Location     Type
 11558 ;;		None
 11559 ;; Return value:  Size  Location     Type
 11560 ;;                  1    wreg      void 
 11561 ;; Registers used:
 11562 ;;		None
 11563 ;; Tracked objects:
 11564 ;;		On entry : 0/0
 11565 ;;		On exit  : 0/0
 11566 ;;		Unchanged: 0/0
 11567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11569 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11571 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11572 ;;Total ram usage:        0 bytes
 11573 ;; Hardware stack levels used:    1
 11574 ;; This function calls:
 11575 ;;		Nothing
 11576 ;; This function is called by:
 11577 ;;		_I2C1_StatusCallback
 11578 ;; This function uses a non-reentrant model
 11579 ;;
 11580                           
 11581                           
 11582                           ;psect for function _PROTOCOL_Backplane_Slave_Enabled
 11583  1757                     _PROTOCOL_Backplane_Slave_Enabled:	
 11584                           
 11585                           ;protocol.c: 202: backplane_slave_enabled = 1;
 11586                           
 11587                           ;incstack = 0
 11588                           ; Regs used in _PROTOCOL_Backplane_Slave_Enabled: []
 11589  1757  0020               	movlb	0	; select bank0
 11590  1758  01CE               	clrf	_backplane_slave_enabled
 11591  1759  0ACE               	incf	_backplane_slave_enabled,f
 11592  175A  0008               	return
 11593  175B                     __end_of_PROTOCOL_Backplane_Slave_Enabled:	
 11594                           
 11595                           	psect	text68
 11596  0933                     __ptext68:	
 11597 ;; *************** function _EUSART_Transmit_ISR *****************
 11598 ;; Defined at:
 11599 ;;		line 165 in file "mcc_generated_files/eusart.c"
 11600 ;; Parameters:    Size  Location     Type
 11601 ;;		None
 11602 ;; Auto vars:     Size  Location     Type
 11603 ;;		None
 11604 ;; Return value:  Size  Location     Type
 11605 ;;                  1    wreg      void 
 11606 ;; Registers used:
 11607 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11608 ;; Tracked objects:
 11609 ;;		On entry : 0/0
 11610 ;;		On exit  : 0/0
 11611 ;;		Unchanged: 0/0
 11612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11614 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11615 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11616 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11617 ;;Total ram usage:        1 bytes
 11618 ;; Hardware stack levels used:    1
 11619 ;; This function calls:
 11620 ;;		Nothing
 11621 ;; This function is called by:
 11622 ;;		_INTERRUPT_InterruptManager
 11623 ;; This function uses a non-reentrant model
 11624 ;;
 11625                           
 11626                           
 11627                           ;psect for function _EUSART_Transmit_ISR
 11628  0933                     _EUSART_Transmit_ISR:	
 11629                           
 11630                           ;eusart.c: 169: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
 11631                           
 11632                           ;incstack = 0
 11633                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 11634  0933  3008               	movlw	8
 11635  0934  0020               	movlb	0	; select bank0
 11636  0935  025E               	subwf	_eusartTxBufferRemaining,w	;volatile
 11637  0936  1803               	skipnc
 11638  0937  294D               	goto	i1l395
 11639                           
 11640                           ;eusart.c: 170: {
 11641                           ;eusart.c: 171: TXREG = eusartTxBuffer[eusartTxTail++];
 11642  0938  085F               	movf	_eusartTxTail,w
 11643  0939  3EA8               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
 11644  093A  0086               	movwf	6
 11645  093B  0187               	clrf	7
 11646  093C  0801               	movf	1,w
 11647  093D  0023               	movlb	3	; select bank3
 11648  093E  009A               	movwf	26	;volatile
 11649  093F  3001               	movlw	1
 11650  0940  00F0               	movwf	??_EUSART_Transmit_ISR
 11651  0941  0870               	movf	??_EUSART_Transmit_ISR,w
 11652  0942  0020               	movlb	0	; select bank0
 11653  0943  07DF               	addwf	_eusartTxTail,f	;volatile
 11654                           
 11655                           ;eusart.c: 172: if(sizeof(eusartTxBuffer) <= eusartTxTail)
 11656  0944  3008               	movlw	8
 11657  0945  025F               	subwf	_eusartTxTail,w	;volatile
 11658  0946  1803               	btfsc	3,0
 11659                           
 11660                           ;eusart.c: 173: {
 11661                           ;eusart.c: 174: eusartTxTail = 0;
 11662  0947  01DF               	clrf	_eusartTxTail	;volatile
 11663                           
 11664                           ;eusart.c: 175: }
 11665                           ;eusart.c: 176: eusartTxBufferRemaining++;
 11666  0948  3001               	movlw	1
 11667  0949  00F0               	movwf	??_EUSART_Transmit_ISR
 11668  094A  0870               	movf	??_EUSART_Transmit_ISR,w
 11669  094B  07DE               	addwf	_eusartTxBufferRemaining,f	;volatile
 11670                           
 11671                           ;eusart.c: 177: }
 11672  094C  0008               	return
 11673  094D                     i1l395:	
 11674                           
 11675                           ;eusart.c: 178: else
 11676                           ;eusart.c: 179: {
 11677                           ;eusart.c: 180: PIE1bits.TXIE = 0;
 11678  094D  0021               	movlb	1	; select bank1
 11679  094E  1211               	bcf	17,4	;volatile
 11680  094F  0008               	return
 11681  0950                     __end_of_EUSART_Transmit_ISR:	
 11682                           
 11683                           	psect	text69
 11684  08FC                     __ptext69:	
 11685 ;; *************** function _EUSART_Receive_ISR *****************
 11686 ;; Defined at:
 11687 ;;		line 184 in file "mcc_generated_files/eusart.c"
 11688 ;; Parameters:    Size  Location     Type
 11689 ;;		None
 11690 ;; Auto vars:     Size  Location     Type
 11691 ;;		None
 11692 ;; Return value:  Size  Location     Type
 11693 ;;                  1    wreg      void 
 11694 ;; Registers used:
 11695 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11696 ;; Tracked objects:
 11697 ;;		On entry : 0/0
 11698 ;;		On exit  : 0/0
 11699 ;;		Unchanged: 0/0
 11700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11703 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11704 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11705 ;;Total ram usage:        1 bytes
 11706 ;; Hardware stack levels used:    1
 11707 ;; This function calls:
 11708 ;;		Nothing
 11709 ;; This function is called by:
 11710 ;;		_INTERRUPT_InterruptManager
 11711 ;; This function uses a non-reentrant model
 11712 ;;
 11713                           
 11714                           
 11715                           ;psect for function _EUSART_Receive_ISR
 11716  08FC                     _EUSART_Receive_ISR:	
 11717                           
 11718                           ;eusart.c: 187: if(1 == RCSTAbits.OERR)
 11719                           
 11720                           ;incstack = 0
 11721                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 11722  08FC  0023               	movlb	3	; select bank3
 11723  08FD  1C9D               	btfss	29,1	;volatile
 11724  08FE  2901               	goto	i1l4006
 11725                           
 11726                           ;eusart.c: 188: {
 11727                           ;eusart.c: 191: RCSTAbits.CREN = 0;
 11728  08FF  121D               	bcf	29,4	;volatile
 11729                           
 11730                           ;eusart.c: 192: RCSTAbits.CREN = 1;
 11731  0900  161D               	bsf	29,4	;volatile
 11732  0901                     i1l4006:	
 11733                           
 11734                           ;eusart.c: 193: }
 11735                           ;eusart.c: 196: eusartRxBuffer[eusartRxHead++] = RCREG;
 11736  0901  0819               	movf	25,w	;volatile
 11737  0902  00F0               	movwf	??_EUSART_Receive_ISR
 11738  0903  0020               	movlb	0	; select bank0
 11739  0904  085D               	movf	_eusartRxHead,w
 11740  0905  3EA0               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
 11741  0906  0086               	movwf	6
 11742  0907  0187               	clrf	7
 11743  0908  0870               	movf	??_EUSART_Receive_ISR,w
 11744  0909  0081               	movwf	1
 11745  090A  3001               	movlw	1
 11746  090B  00F0               	movwf	??_EUSART_Receive_ISR
 11747  090C  0870               	movf	??_EUSART_Receive_ISR,w
 11748  090D  07DD               	addwf	_eusartRxHead,f	;volatile
 11749                           
 11750                           ;eusart.c: 197: if(sizeof(eusartRxBuffer) <= eusartRxHead)
 11751  090E  3008               	movlw	8
 11752  090F  025D               	subwf	_eusartRxHead,w	;volatile
 11753  0910  1803               	btfsc	3,0
 11754                           
 11755                           ;eusart.c: 198: {
 11756                           ;eusart.c: 199: eusartRxHead = 0;
 11757  0911  01DD               	clrf	_eusartRxHead	;volatile
 11758                           
 11759                           ;eusart.c: 200: }
 11760                           ;eusart.c: 201: eusartRxCount++;
 11761  0912  3001               	movlw	1
 11762  0913  00F0               	movwf	??_EUSART_Receive_ISR
 11763  0914  0870               	movf	??_EUSART_Receive_ISR,w
 11764  0915  07DB               	addwf	_eusartRxCount,f	;volatile
 11765  0916  0008               	return
 11766  0917                     __end_of_EUSART_Receive_ISR:	
 11767  007E                     btemp	set	126	;btemp
 11768  007E                     int$flags	set	126
 11769  007E                     wtemp0	set	126


Data Sizes:
    Strings     251
    Constant    10
    Data        4
    BSS         203
    Persistent  8
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     39      80
    BANK1            80      0      76
    BANK2            80      0      48
    BANK3            80      0      48
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    i2c2_tr_queue.ptrb_list.pbuffer	PTR unsigned char  size(1) Largest target is 2
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), 

    i2c2_tr_queue.pTrFlag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c2_read_no_reg_addr@status(COMMON[1]), i2c2_write_no_data@status(COMMON[1]), i2c2_read@status(COMMON[1]), i2c2_write@status(BANK0[1]), 

    i2c2_tr_queue.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK1[4]), I2C2_MasterWrite@trBlock(BANK1[4]), 

    PROTOCOL_Extension_Handler$0	PTR unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), I2C1_StatusCallback@ext_buf(BANK3[48]), 

    data	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    strncmp@s2	PTR const unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), NULL(NULL[0]), I2C1_StatusCallback@ext_buf(BANK3[48]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_30(CODE[4]), STR_29(CODE[4]), STR_27(CODE[4]), STR_26(CODE[4]), 
		 -> STR_23(CODE[4]), STR_22(CODE[4]), STR_21(CODE[4]), STR_19(CODE[4]), 
		 -> STR_15(CODE[4]), STR_14(CODE[3]), STR_13(CODE[4]), STR_12(CODE[4]), 
		 -> STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), STR_8(CODE[4]), 
		 -> STR_7(CODE[4]), STR_6(CODE[4]), STR_5(CODE[4]), STR_4(CODE[4]), 
		 -> STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[4]), 

    atoi@s	PTR const unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), NULL(NULL[0]), I2C1_StatusCallback@ext_buf(BANK3[48]), 

    PROTOCOL_I2C_SEN@pdata	PTR unsigned char  size(1) Largest target is 16
		 -> type_no_data(BANK0[1]), PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK1[16]), readbuf.length(BANK1[1]), 
		 -> readbuf.type(BANK1[1]), readbuf(BANK1[5]), 

    PROTOCOL_EXT@char_buf	PTR unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), I2C1_StatusCallback@ext_buf(BANK3[48]), 

    PROTOCOL_Tick_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    PROTOCOL_Set_Extension_Handler@extension_handler	PTR void  size(2) Largest target is 1
		 -> extension_handler(), 

    PROTOCOL_Extension_Handler	PTR FTN(PTR unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), extension_handler(), 

    PROTOCOL_Set_Func@loop_func	PTR void  size(2) Largest target is 1
		 -> loop_func(), 

    PROTOCOL_Loop_Func	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), loop_func(), 

    PROTOCOL_Initialize@inv_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Inv_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@set_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Set_Handler	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@stop_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Stop_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@start_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Start_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@device_id	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_16(CODE[17]), 

    device_id_	PTR const unsigned char  size(2) Largest target is 8192
		 -> ROM(CODE[8192]), STR_16(CODE[17]), 

    S1077$pbuffer	PTR unsigned char  size(1) Largest target is 16
		 -> PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK1[16]), 

    readbuf.pbuffer	PTR unsigned char  size(1) Largest target is 16
		 -> PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK1[16]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 8192
		 -> STR_25(CODE[4]), buf(BANK2[48]), STR_17(CODE[7]), ROM(CODE[8192]), 
		 -> printf@c(BANK0[1]), STR_16(CODE[17]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_63(CODE[10]), STR_62(CODE[9]), STR_61(CODE[10]), STR_60(CODE[9]), 
		 -> STR_59(CODE[4]), STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), 
		 -> STR_55(CODE[4]), STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), 
		 -> STR_51(CODE[14]), STR_50(CODE[9]), STR_49(CODE[10]), STR_48(CODE[9]), 
		 -> STR_47(CODE[10]), STR_46(CODE[9]), STR_45(CODE[7]), STR_44(CODE[4]), 
		 -> STR_43(CODE[4]), STR_42(CODE[9]), STR_41(CODE[4]), STR_40(CODE[4]), 
		 -> STR_39(CODE[10]), STR_38(CODE[4]), STR_37(CODE[4]), STR_36(CODE[8]), 
		 -> STR_35(CODE[4]), STR_34(CODE[4]), STR_33(CODE[9]), STR_32(CODE[6]), 
		 -> STR_31(CODE[10]), STR_28(CODE[10]), STR_24(CODE[10]), STR_20(CODE[10]), 
		 -> STR_18(CODE[5]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    extension_handler@buf	PTR unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), I2C1_StatusCallback@ext_buf(BANK3[48]), 

    pbuf	PTR unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), NULL(NULL[0]), I2C1_StatusCallback@ext_buf(BANK3[48]), 

    I2C2_MasterWriteTRBBuild@pdata	PTR unsigned char  size(1) Largest target is 2
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), 

    I2C2_MasterWriteTRBBuild@ptrb.pbuffer	PTR unsigned char  size(1) Largest target is 2
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), 

    I2C2_MasterWriteTRBBuild@ptrb	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterWrite@trBlock(BANK1[4]), 

    I2C2_MasterReadTRBBuild@ptrb.pbuffer	PTR unsigned char  size(1) Largest target is 2
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), 

    i2c2_object.pTrTail.ptrb_list.pbuffer	PTR unsigned char  size(1) Largest target is 2
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), 

    i2c2_object.pTrTail.pTrFlag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c2_read_no_reg_addr@status(COMMON[1]), i2c2_write_no_data@status(COMMON[1]), i2c2_read@status(COMMON[1]), i2c2_write@status(BANK0[1]), 

    i2c2_object.pTrTail.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK1[4]), I2C2_MasterWrite@trBlock(BANK1[4]), 

    I2C2_MasterTRBInsert@ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK1[4]), I2C2_MasterWrite@trBlock(BANK1[4]), 

    I2C2_MasterTRBInsert@pflag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c2_read_no_reg_addr@status(COMMON[1]), i2c2_write_no_data@status(COMMON[1]), i2c2_read@status(COMMON[1]), i2c2_write@status(BANK0[1]), 

    F3084.pbuffer	PTR unsigned char  size(1) Largest target is 2
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), 

    I2C2_MasterWrite@pflag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c2_write_no_data@status(COMMON[1]), i2c2_read@status(COMMON[1]), i2c2_write@status(BANK0[1]), 

    I2C2_MasterWrite@pdata	PTR unsigned char  size(1) Largest target is 2
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), 

    F3079.pbuffer	PTR unsigned char  size(1) Largest target is 2
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), 

    I2C2_ISR@pi2c_buf_ptr	PTR unsigned char  size(1) Largest target is 2
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), I2C2_ISR@i2c_address(BANK0[2]), 
		 -> NULL(NULL[0]), 

    S264$pbuffer	PTR unsigned char  size(1) Largest target is 2
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), 

    p_i2c2_trb_current.pbuffer	PTR unsigned char  size(1) Largest target is 2
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), 

    p_i2c2_trb_current	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK1[4]), I2C2_MasterWrite@trBlock(BANK1[4]), NULL(NULL[0]), 

    i2c2_object.pTrHead.pTrFlag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c2_read_no_reg_addr@status(COMMON[1]), i2c2_write_no_data@status(COMMON[1]), i2c2_read@status(COMMON[1]), i2c2_write@status(BANK0[1]), 

    i2c2_object.pTrHead.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK1[4]), I2C2_MasterWrite@trBlock(BANK1[4]), 

    S276$pTrFlag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c2_read_no_reg_addr@status(COMMON[1]), i2c2_write_no_data@status(COMMON[1]), i2c2_read@status(COMMON[1]), i2c2_write@status(BANK0[1]), 

    p_i2c2_current.pTrFlag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c2_read_no_reg_addr@status(COMMON[1]), i2c2_write_no_data@status(COMMON[1]), i2c2_read@status(COMMON[1]), i2c2_write@status(BANK0[1]), 

    S276$ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK1[4]), I2C2_MasterWrite@trBlock(BANK1[4]), 

    p_i2c2_current.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK1[4]), I2C2_MasterWrite@trBlock(BANK1[4]), 

    p_i2c2_current	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK1[3]), NULL(NULL[0]), 

    S287$pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK1[3]), 

    i2c2_object.pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK1[3]), 

    S287$pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK1[3]), 

    i2c2_object.pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK1[3]), 

    sp__PROTOCOL_I2C_SEN	PTR unsigned char  size(1) Largest target is 16
		 -> type_no_data(BANK0[1]), PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK1[16]), readbuf.length(BANK1[1]), 
		 -> readbuf.type(BANK1[1]), readbuf(BANK1[5]), 

    I2C1_StatusCallback@pdata	PTR unsigned char  size(1) Largest target is 16
		 -> type_no_data(BANK0[1]), PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK1[16]), readbuf.length(BANK1[1]), 
		 -> readbuf.type(BANK1[1]), readbuf(BANK1[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_I2C1_ISR
    _I2C2_ISR->_I2C2_Stop
    _I2C1_ISR->_I2C1_StatusCallback
    _I2C1_StatusCallback->i1_PROTOCOL_EXT
    i1_PROTOCOL_SAV->i1_DATAEE_WriteByte
    i1_PROTOCOL_EXT->i1_extension_handler
    i1_extension_handler->i1_PROTOCOL_Set_Lock

Critical Paths under _main in BANK0

    _main->_PROTOCOL_Loop
    _lcd_test->_i2c2_write
    _PROTOCOL_Loop->_printf
    _printf->___lwmod
    _putch->_EUSART_Write
    ___lwmod->___lwdiv
    _loop_func->_lcd_string
    _loop_func->_lcd_string_2lines
    _lcd_string_2lines->_i2c2_write
    _lcd_string->_i2c2_write
    _lcd_init->_i2c2_write
    _lcd_contrast->_i2c2_write
    _lcd_clear->_i2c2_write
    _i2c2_write->_I2C2_MasterWrite
    _I2C2_MasterWrite->_I2C2_MasterWriteTRBBuild
    _atoi->___wmul
    _PROTOCOL_Write_Device_Address->_DATAEE_WriteByte
    _PROTOCOL_SAV->_DATAEE_WriteByte
    _PROTOCOL_EXT->_extension_handler
    _extension_handler->_PROTOCOL_Set_Lock
    _PROTOCOL_Initialize->_DATAEE_ReadByte

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   91743
                                             38 BANK0      1     1      0
                  _EUSART_Initialize
                    _I2C1_Initialize
                    _I2C2_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                _PROTOCOL_Initialize
                      _PROTOCOL_Loop
     _PROTOCOL_Set_Extension_Handler
                  _PROTOCOL_Set_Func
                    _TMR0_Initialize
                     _WDT_Initialize
                           _lcd_init
                           _lcd_test
 ---------------------------------------------------------------------------------
 (1) _lcd_test                                             2     2      0    9321
                                             24 BANK0      2     2      0
                         _i2c2_write
 ---------------------------------------------------------------------------------
 (1) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_Initialize                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Set_Func                                    2     0      2      86
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Set_Extension_Handler                       2     0      2      86
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Loop                                        4     4      0   72391
                                             34 BANK0      4     4      0
                   Absolute function *
                        _EUSART_Read
                       _PROTOCOL_EXT
       _PROTOCOL_Read_Device_Address
                       _PROTOCOL_SAV
                       _PROTOCOL_SET
                       _PROTOCOL_STA
                       _PROTOCOL_STP
      _PROTOCOL_Write_Device_Address
            _TMR0_HasOverflowOccured
                               _atoi
                          _loop_func *
                             _printf
                            _strncmp
 ---------------------------------------------------------------------------------
 (2) _printf                                              24    20      4    4186
                                             14 BANK0     20    16      4
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      66
                                              2 BANK0      1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (4) _EUSART_Write                                         2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     287
                                              8 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     290
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _loop_func                                            3     3      0   61645
                                             28 BANK0      3     3      0
                 _PROTOCOL_Read_Lock
                  _PROTOCOL_Set_Lock
                               _atoi
                         _i2c2_write
                          _lcd_clear
                       _lcd_contrast
                           _lcd_init
                         _lcd_string
                  _lcd_string_2lines
                            _strncmp
 ---------------------------------------------------------------------------------
 (2) _strncmp                                              7     2      5    4550
                                              0 BANK0      7     2      5
 ---------------------------------------------------------------------------------
 (3) _lcd_string_2lines                                    4     4      0    9389
                                             24 BANK0      4     4      0
                         _i2c2_write
 ---------------------------------------------------------------------------------
 (3) _lcd_string                                           4     4      0    9367
                                             24 BANK0      4     4      0
                         _i2c2_write
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0    9321
                                             24 BANK0      2     2      0
                         _i2c2_write
 ---------------------------------------------------------------------------------
 (3) _lcd_contrast                                         3     3      0    9365
                                             24 BANK0      3     3      0
                         _i2c2_write
 ---------------------------------------------------------------------------------
 (3) _lcd_clear                                            0     0      0    9321
                         _i2c2_write
 ---------------------------------------------------------------------------------
 (2) _i2c2_write                                          10     6      4    9321
                                             14 BANK0     10     6      4
                   _I2C2_MasterWrite
 ---------------------------------------------------------------------------------
 (3) _I2C2_MasterWrite                                     7     3      4    1440
                                              7 BANK0      7     3      4
               _I2C2_MasterTRBInsert
           _I2C2_MasterWriteTRBBuild
 ---------------------------------------------------------------------------------
 (4) _I2C2_MasterWriteTRBBuild                             7     3      4     354
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) _I2C2_MasterTRBInsert                                 4     2      2     388
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _atoi                                                 8     6      2     920
                                              6 BANK0      8     6      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     474
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _TMR0_HasOverflowOccured                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_Write_Device_Address                        2     2      0     240
                                              3 BANK0      2     2      0
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_STP                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_STA                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_SET                                         2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_SAV                                         1     1      0     196
                                              3 BANK0      1     1      0
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (3) _DATAEE_WriteByte                                     3     2      1     196
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_EXT                                         2     2      0     283
                                              4 BANK0      2     2      0
                   Absolute function *
                  _extension_handler *
 ---------------------------------------------------------------------------------
 (3) _extension_handler                                    3     2      1      87
                                              2 BANK0      2     1      1
                 _PROTOCOL_Read_Lock
                  _PROTOCOL_Set_Lock
 ---------------------------------------------------------------------------------
 (3) _PROTOCOL_Set_Lock                                    2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _PROTOCOL_Read_Lock                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (11) Absolute function(Fake)                              1     0      1       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Read                                          2     2      0      24
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Initialize                                  9     2      7     538
                                              1 BANK0      9     2      7
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (2) _DATAEE_ReadByte                                      1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2C2_Initialize                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C1_Initialize                                      2     2      0       0
                                              0 BANK0      2     2      0
       _PROTOCOL_Read_Device_Address
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_Read_Device_Address                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Initialize                                    1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                           1     1      0     629
                                             11 COMMON     1     1      0
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
                           _I2C1_ISR
               _I2C2_BusCollisionISR
                           _I2C2_ISR
 ---------------------------------------------------------------------------------
 (8) _I2C2_ISR                                             4     4      0      22
                                              2 COMMON     4     4      0
              _I2C2_FunctionComplete
                          _I2C2_Stop
 ---------------------------------------------------------------------------------
 (9) _I2C2_Stop                                            2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (9) _I2C2_FunctionComplete                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _I2C2_BusCollisionISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _I2C1_ISR                                             2     2      0     607
                                              9 COMMON     2     2      0
                _I2C1_StatusCallback
 ---------------------------------------------------------------------------------
 (9) _I2C1_StatusCallback                                  3     3      0     437
                                              6 COMMON     3     3      0
   _PROTOCOL_Backplane_Slave_Enabled
                   _PROTOCOL_I2C_GET
                   _PROTOCOL_I2C_SEN
                   _PROTOCOL_I2C_WHO
                       _PROTOCOL_INV
                       _PROTOCOL_RST
                     i1_PROTOCOL_EXT
               i1_PROTOCOL_Read_Lock
                     i1_PROTOCOL_SAV
                     i1_PROTOCOL_SET
                     i1_PROTOCOL_STA
                     i1_PROTOCOL_STP
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_STP                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_STA                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_SET                                      2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_SAV                                      1     1      0      94
                                              3 COMMON     1     1      0
                 i1_DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (11) i1_DATAEE_WriteByte                                  3     2      1      94
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_EXT                                      2     2      0     140
                                              4 COMMON     2     2      0
                   Absolute function *
                i1_extension_handler *
 ---------------------------------------------------------------------------------
 (11) i1_extension_handler                                 3     2      1      70
                                              2 COMMON     2     1      1
               i1_PROTOCOL_Read_Lock
                i1_PROTOCOL_Set_Lock
 ---------------------------------------------------------------------------------
 (12) i1_PROTOCOL_Set_Lock                                 2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_Read_Lock                                0     0      0       0
 ---------------------------------------------------------------------------------
 (11) Absolute function(Fake)                              1     0      1       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_RST                                        1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_INV                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_I2C_WHO                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_I2C_SEN                                    2     2      0      26
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_I2C_GET                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_Backplane_Slave_Enabled                    0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _EUSART_Receive_ISR                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_Initialize
   _I2C1_Initialize
     _PROTOCOL_Read_Device_Address
   _I2C2_Initialize
   _OSCILLATOR_Initialize
   _PIN_MANAGER_Initialize
   _PROTOCOL_Initialize
     _DATAEE_ReadByte
   _PROTOCOL_Loop
     Absolute function(Fake) *
     _EUSART_Read *
     _PROTOCOL_EXT *
       Absolute function(Fake) *
       _extension_handler *
         _PROTOCOL_Read_Lock
         _PROTOCOL_Set_Lock
     _PROTOCOL_Read_Device_Address *
     _PROTOCOL_SAV *
       _DATAEE_WriteByte
     _PROTOCOL_SET *
     _PROTOCOL_STA *
     _PROTOCOL_STP *
     _PROTOCOL_Write_Device_Address *
       _DATAEE_WriteByte
     _TMR0_HasOverflowOccured *
     _atoi *
       ___wmul
       _isdigit
     _loop_func *
       _PROTOCOL_Read_Lock
       _PROTOCOL_Set_Lock
       _atoi
         ___wmul
         _isdigit
       _i2c2_write
         _I2C2_MasterWrite
           _I2C2_MasterTRBInsert
           _I2C2_MasterWriteTRBBuild
       _lcd_clear
         _i2c2_write
           _I2C2_MasterWrite
             _I2C2_MasterTRBInsert
             _I2C2_MasterWriteTRBBuild
       _lcd_contrast
         _i2c2_write
           _I2C2_MasterWrite
             _I2C2_MasterTRBInsert
             _I2C2_MasterWriteTRBBuild
       _lcd_init
         _i2c2_write
           _I2C2_MasterWrite
             _I2C2_MasterTRBInsert
             _I2C2_MasterWriteTRBBuild
       _lcd_string
         _i2c2_write
           _I2C2_MasterWrite
             _I2C2_MasterTRBInsert
             _I2C2_MasterWriteTRBBuild
       _lcd_string_2lines
         _i2c2_write
           _I2C2_MasterWrite
             _I2C2_MasterTRBInsert
             _I2C2_MasterWriteTRBBuild
       _strncmp
     _printf *
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
     _strncmp *
   _PROTOCOL_Set_Extension_Handler
   _PROTOCOL_Set_Func
   _TMR0_Initialize
   _WDT_Initialize
   _lcd_init
     _i2c2_write
       _I2C2_MasterWrite
         _I2C2_MasterTRBInsert
         _I2C2_MasterWriteTRBBuild
   _lcd_test
     _i2c2_write
       _I2C2_MasterWrite
         _I2C2_MasterTRBInsert
         _I2C2_MasterWriteTRBBuild

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR
   _I2C1_ISR
     _I2C1_StatusCallback
       _PROTOCOL_Backplane_Slave_Enabled
       _PROTOCOL_I2C_GET
       _PROTOCOL_I2C_SEN
       _PROTOCOL_I2C_WHO
       _PROTOCOL_INV
       _PROTOCOL_RST
       i1_PROTOCOL_EXT
         Absolute function(Fake) *
         i1_extension_handler *
           i1_PROTOCOL_Read_Lock
           i1_PROTOCOL_Set_Lock
       i1_PROTOCOL_Read_Lock
       i1_PROTOCOL_SAV
         i1_DATAEE_WriteByte
       i1_PROTOCOL_SET
       i1_PROTOCOL_STA
       i1_PROTOCOL_STP
   _I2C2_BusCollisionISR
   _I2C2_ISR
     _I2C2_FunctionComplete
     _I2C2_Stop

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     27      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4C       7       95.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      30       9       60.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      30      11       60.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     10A      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     10A      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Thu Sep 21 20:04:59 2017

                                              _i 00BA                                                _j 00B9  
                                              pc 0002                           __end_ofi1_PROTOCOL_EXT 086E  
                         __end_ofi1_PROTOCOL_SAV 17AB                           __end_ofi1_PROTOCOL_SET 1794  
                         __end_ofi1_PROTOCOL_STA 1763                           __end_ofi1_PROTOCOL_STP 174B  
                     __size_of_lcd_string_2lines 0045                  __end_of_TMR0_HasOverflowOccured 176B  
                                    __CFG_CP$OFF 0000                            ?_I2C2_MasterTRBInsert 0020  
                            ___wmul@multiplicand 0022                                  _timer0ReloadVal 005A  
                                    __CFG_LVP$ON 0000                                              l383 0A1B  
                                            l480 0A04                                              l636 02B1  
                                            l671 03D4                                              l664 035E  
                                            l648 037E                                              l817 0460  
                                            l688 045F                                     __CFG_CPD$OFF 0000  
                                            _buf 0120                                              _cnt 0057  
         __end_of_PROTOCOL_Set_Extension_Handler 1780          __size_of_PROTOCOL_Set_Extension_Handler 0006  
                 _PROTOCOL_Set_Extension_Handler 177A                                     __CFG_BORV$LO 0000  
                                            wreg 0009                                     __CFG_IESO$ON 0000  
                                   ?_EUSART_Read 0070                                 __end_of_I2C1_ISR 0A7F  
                               __end_of_I2C2_ISR 0727                                             l1014 0A55  
                                           l1135 0920                                             l3000 0C3A  
                                           l3020 0A10                                             l3006 0AA0  
                                           l3040 0A4B                                             l3034 0A2F  
                                           l3220 0C7F                                             l3062 091A  
                                           l3206 0AD9                                             l3222 0C44  
                                           l3056 085C                                             l3314 0B2B  
                                           l3306 0B0D                                             l3330 0AAE  
                                           l3236 08A3                                             l3252 0BAB  
                                           l3308 0B19                                             l3332 0ABA  
                                           l3340 0ACF                                             l3318 0B34  
                                   _tmr_overflow 0050                                             l3264 0D30  
                                           l3248 0B93                                             l3256 0B75  
                                           l3336 0AC6                                             l3282 0D55  
                                           l3266 0D28                                             l3258 0BB4  
                                           l3530 00CD                                             l3292 0D92  
                                           l3284 0D59                                             l3276 0D4D  
                                           l3268 0D35                                             l3540 0119  
                                           l3524 009D                                             l3700 03F0  
                                           l3620 02CC                                             l3286 0D82  
                                           l3702 03F3                                             l3614 02B6  
                                           l3480 098D                                             l3560 0184  
                                           l3552 015B                                             l3544 0132  
                                           l3536 0100                                             l3720 041D  
                                           l3640 0311                                             l3616 02BF  
                                           l3608 02AC                                             l5400 05B8  
                                           l3730 042A                                             l3714 040C  
                                           l3650 032E                                             l3642 031F  
                                           l3572 01D0                                             l3716 0410  
                                           l3724 0425                                             l3708 03FD  
                                           l3652 033D                                             l3636 030F  
                                           l3628 02FB                                             l3732 0290  
                                           l3566 01AA                                             l3646 032C  
                                           l5406 05E3                                             l3584 021C  
                                           l3680 03A3                                             l3656 034A  
                                           l3664 0360                                             l5344 0493  
                                           l5336 0487                                             l3594 026D  
                                           l3578 01F6                                             l3658 0355  
                                           l5338 0488                                             l3588 0240  
                                           l3692 03C8                                             l3676 0398  
                                           l5380 052D                                             l5372 04FB  
                                           l5348 049D                                             l2990 0C27  
                                           l3598 0285                                             l3686 03A9  
                                           l5390 0571                                             l5376 0514  
                                           l5368 04D6                                             l2994 0C2E  
                                           l5394 0595                                             l5386 0552  
                                           l2996 0C33                                             STR_1 07FD  
                                           STR_2 07F5                                             STR_3 081D  
                                           STR_4 0811                                             STR_5 0815  
                                           STR_6 0825                                             STR_7 080D  
                                           STR_8 0801                                             STR_9 0819  
                                           u2125 0AB1                                             _LATA 010C  
                                           _LATB 010D                                             u2055 0B10  
                                           _LATC 010E                                             u2145 0AC0  
                                           u2075 0B1A                                             u2155 0AC7  
                                           u2085 0B24                                             u2095 0B2C  
                                           u1815 0921                                             u2535 03BE  
                                           u1825 0926                                             u2475 0325  
                                           u5107 0FAC                                             u5117 0FC0  
                                           u5037 0F23                                             u1935 0CB2  
                                           u5207 01CC                                             u2575 03E3  
                                           u5127 0FD4                                             u5047 0F37  
                                           u5217 01F2                                             u5137 0FE8  
                                           u5057 0F4B                                             u5307 0DE1  
                                           u5227 0218                                             u5147 0FFC  
                                           u5067 0F5F                                             u5317 0DF2  
                                           u5237 0C6B                                             u5157 00C9  
                                           u5077 0F73                                             u5407 0CBF  
                                           u5327 0E03                                             u5247 0C80  
                                           u5167 00FC                                             u5087 0F87  
                                           u5417 0CD0                                             u5337 0E0C  
                                           u5257 0B00                                             u5177 0154  
                                           u5097 0F98                                             u5427 088A  
                                           u5347 0E21                                             u5267 0D9B  
                                           u5187 017D                                             u5437 09D0  
                                           u5357 0E30                                             u5277 0DAE  
                                           u5197 01A6                                             u5367 0E41  
                                           u5287 0DBF                                             i1l64 0A6C  
                                           u5377 0E48                                             u5297 0DD0  
                                           u5387 0C93                                             u5397 0CA6  
                                           i1l86 0E50                                             _TMR0 0015  
                                           _WPUA 020C                                             _WPUB 020D  
                                           _WPUC 020E                                     __CFG_WRT$OFF 0000  
                                  __CFG_FCMEN$ON 0000                                             _data 00B8  
                                 ??_lcd_contrast 0038                                             _atoi 0D26  
                                           _main 0BB7                                             _pbuf 0059  
                                           fsr0h 0005                                             fsr1h 0007  
                                           indf0 0000                                             fsr0l 0004  
                                           indf1 0001                                             fsr1l 0006  
                                           btemp 007E                            PROTOCOL_Set_Lock@lock 0021  
                                  __CFG_BOREN$ON 0000                                             start 0048  
                                    lcd_string@i 003B                                    __CFG_MCLRE$ON 0000  
                            _I2C1_StatusCallback 0E4E                                  ?i1_PROTOCOL_EXT 0070  
                                ?i1_PROTOCOL_SAV 0070                                  ?i1_PROTOCOL_SET 0070  
                      __size_of_DATAEE_WriteByte 0023                                  ?i1_PROTOCOL_STA 0070  
                                ?i1_PROTOCOL_STP 0070                          __end_of_TMR0_Initialize 17E2  
                    __end_ofi1_extension_handler 17F1                                    __CFG_PLLEN$ON 0000  
                                     _i2c2_state 0066                                    ?_EUSART_Write 0070  
                                     _i2c2_write 0A32                   __size_of_OSCILLATOR_Initialize 0005  
                  __end_of_OSCILLATOR_Initialize 1774                           ??i1_PROTOCOL_Read_Lock 0070  
                                          ?_atoi 0026                                            ?_main 0070  
                                          STR_10 0805                                            STR_11 0809  
                                          STR_12 0821                                            STR_20 076E  
                                          STR_13 07F1                                            STR_21 07ED  
                                          STR_14 0829                                            STR_22 07D5  
                                          STR_30 07CD                                            STR_15 07F9  
                                          STR_23 07E1                                            STR_31 0750  
                                          STR_32 07B6                                            STR_24 0778  
                                          STR_16 0731                                            STR_25 07D9  
                                          STR_17 07AF                                            STR_33 079F  
                                  __CFG_WDTE$OFF 0000                                            STR_26 07E9  
                                          STR_34 07C9                                            STR_18 07BC  
                                          STR_50 0796                                            STR_27 07E5  
                                          STR_19 07DD                                            STR_35 07C1  
                                          STR_51 0742                                            STR_28 075A  
                                          STR_29 07D1                                            STR_37 07C5  
                                          STR_45 07A8                                            STR_39 078C  
                                          STR_47 0782                                            STR_49 0764  
                              __end_of_I2C2_Stop 08CA                                  __end_of___lwdiv 0B39  
                                          i1l103 0E73                                            i1l210 06BE  
                                          i1l124 0F11                   __size_of_I2C2_FunctionComplete 0011  
                                          i1l213 06D2                                            i1l214 06E0  
                                          i1l206 069E                                            i1l225 089C  
                                          i1l218 0707                                            i1l323 0015  
                                          i1l325 0021                                            i1l333 0043  
                                          i1l190 062E                                            i1l327 002D  
                                          i1l184 05FB                                            i1l329 0039  
                                __end_of___lwmod 0AD4                                            i1l195 0651  
                                          i1l196 065D                                            i1l189 0626  
                                          i1l480 0964                                            i1l395 094D  
                              _PROTOCOL_Set_Func 17B4                                            _RCREG 0199  
                              _PROTOCOL_Set_Lock 1794                    __end_of_I2C2_FunctionComplete 089F  
                                          _RCSTA 019D                           i2c2_write@write_status 0034  
                                          _TRISA 008C                                            _TRISB 008D  
                                          _TRISC 008E                                            _TXREG 019A  
                                          _TXSTA 019E                     __size_of_PROTOCOL_Initialize 0052  
                             ?_PROTOCOL_Set_Func 0020                               ?_PROTOCOL_Set_Lock 0070  
                              ??_I2C1_Initialize 0020                             ?_I2C1_StatusCallback 0070  
                                _DATAEE_ReadByte 17C7                  ??_PROTOCOL_Write_Device_Address 0023  
                                __end_of_dpowers 0731                                   _WDT_Initialize 176B  
                 PROTOCOL_Initialize@inv_handler 0026                                  __end_of_isdigit 085E  
                                          _value 0056                                            atoi@a 002B  
                                          atoi@s 002D                                            _putch 1774  
                                          pclath 000A                              ??_PROTOCOL_Set_Func 0022  
                            ??_PROTOCOL_Set_Lock 0020                                            status 0003  
                                          wtemp0 007E                                  __end_of_strncmp 0BB7  
                              ??_I2C2_Initialize 0020                                  __initialization 004A  
                                   __end_of_atoi 0D97                                     __end_of_main 0BFA  
                         ??_I2C2_MasterTRBInsert 0022                                   ??_EUSART_Write 0020  
                                 i2c2_write@data 0031                      ?_INTERRUPT_InterruptManager 0070  
                      __end_of_PROTOCOL_Set_Func 17BD                        __end_of_PROTOCOL_Set_Lock 179B  
               __end_of_I2C2_MasterWriteTRBBuild 09CA                 PROTOCOL_Initialize@start_handler 0023  
                                         ??_atoi 0028                                           ??_main 0046  
                                    _i2c2_object 0047                               _PROTOCOL_Read_Lock 174E  
                         __end_of_WDT_Initialize 176F                            ??_I2C1_StatusCallback 0076  
                     __end_ofi1_DATAEE_WriteByte 096D                                           i1S5504 082C  
                                         i1S5506 0844                                           _EEADRH 0192  
                                         _EEADRL 0191                                           _EEDATH 0194  
                                         _EEDATL 0193                                           _EECON2 0196  
                                         _ANSELA 018C                                           ?_putch 0070  
                                         _ANSELB 018D                                           _ANSELC 018E  
                            ?_PROTOCOL_Read_Lock 0070                               _PROTOCOL_Loop_Func 00B6  
                   __end_of_I2C2_BusCollisionISR 0003                                           i1l3120 0B42  
                                         i1l3122 0B48                                           i1l3132 0B5F  
                                         i1l3116 0B3A                                           i1l4006 0901  
                                         i1l3126 0B55                                           i1l3136 0B64  
                                         i1l3138 0B73                                           i1l3094 17E2  
                                         i1l5210 0E5F                                           i1l5220 0E76  
                                         i1l5212 0E63                                           i1l5204 0E54  
                                         i1l5230 0E99                                           i1l5214 0E67  
                                         i1l5206 0E5A                                           i1l5310 0A75  
                                         i1l5302 0A6A                                           i1l3470 08C8  
                                         i1l5216 0E6B                                           i1l5224 0E78  
                                         i1l5242 0EAE                                           i1l5218 0E6F  
                                         i1l5252 0EC9                                           i1l5236 0EA3  
                                         i1l5228 0E90                                           i1l5260 0ED6  
                                         i1l5308 0A73                                           i1l5270 0EF6  
                                         i1l5262 0EE2                                           i1l3830 063A  
                                         i1l5264 0EE5                                           i1l5256 0ECC  
                                         i1l3920 070B                                           i1l3904 06E7  
                                         i1l5266 0EEA                                           i1l5274 0EFB  
                                         i1l3922 070E                                           i1l3850 067A  
                                         i1l3818 0619                                           i1l3930 071B  
                                         i1l3924 0712                                           i1l3908 06EE  
                                         i1l3836 064C                                           i1l5278 0F07  
                                         i1l3870 068E                                           i1l3892 06C6  
                                         i1l3884 06AC                                           i1l3876 0699  
                                         _OSCCON 0099                 __size_of_TMR0_HasOverflowOccured 0004  
                                         _TMR0IF 005A                                           _SPBRGH 019C  
                                         _SPBRGL 019B                                           _WDTCON 0097  
                 PROTOCOL_Initialize@set_handler 0025                                   __CFG_PWRTE$OFF 0000  
                      PROTOCOL_Initialize@scaler 0027                                 __end_of_lcd_init 0E4E  
                               __end_of_lcd_test 1000                                           ___wmul 0917  
                                 _p_i2c2_current 0063                                   __CFG_STVREN$ON 0000  
                                      ??___lwdiv 0024                             ??_PROTOCOL_Read_Lock 0020  
                                      ??___lwmod 002C                                     _type_no_data 006F  
                            _EUSART_Transmit_ISR 0933                                 ?_TMR0_Initialize 0070  
                                         _locked 0055                                        ?_I2C1_ISR 0070  
                                      ?_I2C2_ISR 0070                                      ?_i2c2_write 002E  
                       I2C2_Stop@completion_code 0071                                           _printf 028B  
                        __end_of_DATAEE_ReadByte 17D4                             __end_of_lcd_contrast 0CD4  
                   __size_ofi1_PROTOCOL_Set_Lock 0007                                     __pdataCOMMON 007D  
                                      ??_isdigit 0020                         __end_of_PROTOCOL_I2C_GET 1742  
                       __end_of_PROTOCOL_I2C_SEN 0B75                         __end_of_PROTOCOL_I2C_WHO 1745  
                                ?_WDT_Initialize 0070                    i1DATAEE_WriteByte@GIEBitValue 0072  
                                      ??_strncmp 0025                        PROTOCOL_Send_uint8_t@pbuf 00E3  
                           ?_EUSART_Transmit_ISR 0070                             __size_of_EUSART_Read 001F  
                        __end_of__initialization 007A  PROTOCOL_Set_Extension_Handler@extension_handler 0020  
                              ?_I2C2_MasterWrite 0027                               ??_I2C2_MasterWrite 002B  
                                 __pcstackCOMMON 0070                                     __pidataBANK0 1754  
                         i1extension_handler@buf 0072                                 _DATAEE_WriteByte 09EB  
                                 _i2c2_trb_count 0065                                    __end_of_putch 177A  
                                     ??_I2C1_ISR 0079                                       ??_I2C2_ISR 0072  
                     __size_of_PROTOCOL_Set_Func 0009                       __size_of_PROTOCOL_Set_Lock 0007  
                          __end_of_PROTOCOL_Loop 05E8                                   _OPTION_REGbits 0095  
                              _extension_handler 089F                               __size_of_lcd_clear 0010  
                       _I2C2_MasterWriteTRBBuild 09AA                     I2C2_MasterWriteTRBBuild@ptrb 0026  
                        PROTOCOL_Send_float@pbuf 00D8                               ?_extension_handler 0022  
                          ??_EUSART_Transmit_ISR 0070                                          ??_putch 0022  
                                     __pbssBANK0 0047                                       __pbssBANK1 00A0  
                                     __pbssBANK2 0120                                       __pbssBANK3 01A0  
                         i1DATAEE_WriteByte@bAdd 0071                             __end_of_EUSART_Write 0A32  
                            __size_of_i2c2_write 0026                              ??_extension_handler 0023  
               ??_PROTOCOL_Set_Extension_Handler 0022                  ?_PROTOCOL_Set_Extension_Handler 0020  
                    __size_of_EUSART_Receive_ISR 001B                               i2c2_write@dev_addr 002E  
                               ??i1_PROTOCOL_EXT 0074                                 ??i1_PROTOCOL_SAV 0073  
                               ??i1_PROTOCOL_SET 0070                                 ??i1_PROTOCOL_STA 0070  
                               ??i1_PROTOCOL_STP 0070                              _PROTOCOL_Initialize 0CD4  
                                     __pmaintext 0BB7                                          ?___wmul 0020  
                                     __pintentry 0004                                  _I2C1_Initialize 09CA  
                             __size_of_loop_func 020D                             extension_handler@buf 0022  
                                        _BAUDCON 019F                                       _device_id_ 00E4  
                             i2c2_write@reg_addr 0030                                          _APFCON0 011D  
                                        _APFCON1 011E                             _I2C2_BusCollisionISR 0002  
                                        ?_printf 002E                       I2C1_StatusCallback@ext_buf 01A0  
                     I2C1_StatusCallback@ext_cnt 0067                       I2C1_StatusCallback@ext_len 0068  
                               ?_DATAEE_ReadByte 0070                        __end_of_extension_handler 08B2  
                                  _eusartRxCount 005B                I2C1_StatusCallback@slaveWriteType 006A  
                     PROTOCOL_Send_uint16_t@pbuf 00E0                             ?_PROTOCOL_Initialize 0021  
              I2C2_ISR@i2c_10bit_address_restart 0060                                        _I2C2_Stop 08B2  
                                        _OSCTUNE 0098                                          _SSP1ADD 0212  
                                        _SSP2ADD 021A                                          _SSP1BUF 0211  
                                        _SSP2BUF 0219                                          _SSP1MSK 0213  
                                     _lcd_string 0AD4                           _PROTOCOL_Start_Handler 00EA  
                                      ?_lcd_init 0070                                        ?_lcd_test 0070  
                                _I2C2_Initialize 08CA                          _TMR0_HasOverflowOccured 1767  
                           DATAEE_WriteByte@bAdd 0021                           I2C2_MasterRead@trBlock 00D0  
                              __end_of_lcd_clear 088E                                    ?_PROTOCOL_INV 0070  
                                  ?_PROTOCOL_EXT 0070                                    ?_PROTOCOL_SAV 0070  
                                  ?_PROTOCOL_SET 0070                                    ?_PROTOCOL_STA 0070  
                                  ?_PROTOCOL_RST 0070                                    ?_PROTOCOL_STP 0070  
                          __size_of_lcd_contrast 0050                                  __size_of___wmul 001C  
                                        ___lwdiv 0B04                                          ___lwmod 0AA7  
                          ?_I2C2_BusCollisionISR 0070                        I2C2_MasterTRBInsert@count 0023  
                                        __ptext1 0F12                                          __ptext2 176B  
                                        __ptext3 17D4                                          __ptext4 17B4  
                                        __ptext5 177A                                          __ptext6 0460  
                                        __ptext7 028B                                          __ptext8 1774  
                                        __ptext9 0A0E                        I2C2_MasterTRBInsert@pflag 0021  
                                __size_of_printf 01D5                                          _dpowers 0727  
                          _OSCILLATOR_Initialize 176F       PROTOCOL_Write_Device_Address@device_id_i2c 0024  
                          ??_PROTOCOL_Initialize 0028                                          _isdigit 084F  
                  __size_ofi1_PROTOCOL_Read_Lock 0003                                          _readbuf 00CB  
                                        _sec_cnt 0052                                          _invoked 0053  
                       ??_PIN_MANAGER_Initialize 0020                     __size_ofi1_extension_handler 000F  
                                        _sendbuf 00BB                                       ?_I2C2_Stop 0070  
                          _I2C2_FunctionComplete 088E                                          _tmr_cnt 0051  
                                        clrloop0 1781                                          _running 0054  
                                     ??_lcd_init 0038                                       ??_lcd_test 0038  
                                        _strncmp 0B75                             end_of_initialization 007A  
                              __end_of_loop_func 028B                       _PROTOCOL_Extension_Handler 004C  
                            i1_PROTOCOL_Set_Lock 1786                                     _lcd_contrast 0C84  
                             i1_DATAEE_WriteByte 0950                                _EUSART_Initialize 08E2  
                        __end_of_I2C1_Initialize 09EB                               ?_EUSART_Initialize 0070  
                          I2C2_MasterWrite@pdata 002D                               _p_i2c2_trb_current 0064  
                          _PROTOCOL_Tick_Handler 00B2                                        _RCSTAbits 019D  
                          I2C2_MasterWrite@pflag 002A                                          printf@c 0041  
                                        printf@f 002E                                   ??_PROTOCOL_INV 0070  
                                 ??_PROTOCOL_EXT 0024                                   ??_PROTOCOL_SAV 0023  
                                 ??_PROTOCOL_SET 0020                                   ??_PROTOCOL_STA 0020  
                                 ??_PROTOCOL_RST 0070                                   ??_PROTOCOL_STP 0020  
                         I2C2_ISR@i2c_bytes_left 0061                              ?i1_DATAEE_WriteByte 0070  
                                   __pstringtext 0727                    __size_of_I2C2_MasterTRBInsert 0045  
                                   ??_i2c2_write 0032                              ??_EUSART_Initialize 0020  
                    __end_of_I2C1_StatusCallback 0F12                                 ??_WDT_Initialize 0020  
                           ?i1_PROTOCOL_Set_Lock 0070                                __size_of_I2C1_ISR 0027  
                     __size_of_extension_handler 0013                                __size_of_I2C2_ISR 013F  
                               __CFG_FOSC$INTOSC 0000                          __end_of_I2C2_Initialize 08E2  
                              ?_PROTOCOL_I2C_GET 0070                                ?_PROTOCOL_I2C_SEN 0070  
                              ?_PROTOCOL_I2C_WHO 0070                            __size_of_EUSART_Write 0024  
                      ??_TMR0_HasOverflowOccured 0020                               ??_PROTOCOL_I2C_GET 0070  
                             ??_PROTOCOL_I2C_SEN 0070                               ??_PROTOCOL_I2C_WHO 0070  
                                    ?_lcd_string 0070                             ??i1_DATAEE_WriteByte 0071  
                                     _tmr_scaler 006D                         __end_of_DATAEE_WriteByte 0A0E  
                      __end_of_EUSART_Initialize 08FC                                      printf@width 003F  
                             __end_of_i2c2_write 0A58                             i1PROTOCOL_SET@value_ 0071  
                         ??_I2C2_BusCollisionISR 0070                         I2C1_StatusCallback@pdata 0078  
                    __size_of_PROTOCOL_Read_Lock 0003                       ??_I2C2_MasterWriteTRBBuild 0024  
                                 __end_of___wmul 0933                                    __pidataCOMMON 0003  
                                   _EUSART_Write 0A0E                            ??i1_PROTOCOL_Set_Lock 0070  
                         ?_OSCILLATOR_Initialize 0070                        __size_of_I2C2_MasterWrite 0028  
                                 __end_of_printf 0460                           ?_I2C2_FunctionComplete 0070  
                                 PROTOCOL_Loop@c 0044                              start_initialization 004A  
                                    ??_I2C2_Stop 0070                         __size_of_TMR0_Initialize 000E  
                __size_of_PIN_MANAGER_Initialize 001E                                    ??_EUSART_Read 0020  
                                  i2c2_write@buf 0035                                      putch@txData 0022  
                            DATAEE_ReadByte@bAdd 0020                  I2C2_MasterWriteTRBBuild@address 0022  
                               i2c2_write@status 0037                                 ?_I2C1_Initialize 0070  
                               I2C1_ISR@i2c_data 007A                                         ??___wmul 0024  
                  I2C2_MasterWriteTRBBuild@pdata 0020                             I2C2_ISR@pi2c_buf_ptr 0062  
                       PROTOCOL_Send_int8_t@pbuf 00E2             __end_of_PROTOCOL_Read_Device_Address 174E  
          __size_of_PROTOCOL_Read_Device_Address 0003                     _PROTOCOL_Read_Device_Address 174B  
                                    __pdataBANK0 006D                              __size_of_lcd_string 0030  
                                       ??_printf 0032                          i1DATAEE_WriteByte@bData 0070  
                    __end_of_EUSART_Transmit_ISR 0950                                      __pbssCOMMON 007C  
                               ?_I2C2_Initialize 0070                                        ___latbits 0002  
                                  __pcstackBANK0 0020                 I2C1_StatusCallback@i2c_bus_state 0077  
                           _PROTOCOL_Inv_Handler 00B4                                     _isdigit$1520 0020  
                           __end_of_PROTOCOL_INV 175F                             __end_of_PROTOCOL_EXT 087E  
                           __end_of_PROTOCOL_SAV 17B4                             __end_of_PROTOCOL_SET 17A2  
                           __end_of_PROTOCOL_STA 1767                             __end_of_PROTOCOL_RST 17C7  
                           __end_of_PROTOCOL_STP 1754                                    _i2c2_tr_queue 00DB  
                     __end_of_EUSART_Receive_ISR 0917                  PROTOCOL_Initialize@stop_handler 0024  
                     __size_of_EUSART_Initialize 001A                                __size_of_lcd_init 00B7  
                              __size_of_lcd_test 00EE                              __end_of_EUSART_Read 09AA  
                         __size_of_PROTOCOL_Loop 0188                                        __pnvBANK1 00E4  
          __end_of_PROTOCOL_Write_Device_Address 1800           __size_of_PROTOCOL_Write_Device_Address 000F  
                  _PROTOCOL_Write_Device_Address 17F1                                 ___lwdiv@dividend 0022  
                         _PIN_MANAGER_Initialize 096D                              i1_extension_handler 17E2  
                           EUSART_Read@readValue 0021                                         ?___lwdiv 0020  
                                       ?___lwmod 0028                                     _eusartRxHead 005D  
                                   _eusartTxHead 007C                                     _eusartRxTail 005C  
                                      _lcd_clear 087E                                     _eusartTxTail 005F  
                                       _I2C1_ISR 0A58                                         _I2C2_ISR 05E8  
                  ?_PROTOCOL_Read_Device_Address 0070                     ??_INTERRUPT_InterruptManager 007B  
                      PROTOCOL_Send_int16_t@pbuf 00DE                                        __pswtext1 082C  
                                      __pswtext2 0844                          _eusartTxBufferRemaining 005E  
                                       ?_isdigit 0070                             ?i1_extension_handler 0072  
                               ___lwdiv@quotient 0025                         __size_of_DATAEE_ReadByte 000D  
                                       ?_strncmp 0020                                   __size_of_putch 0006  
                                 _eusartRxBuffer 00A0                                ??_TMR0_Initialize 0020  
                                 _eusartTxBuffer 00A8                                   ___wmul@product 0024  
                                       _LATCbits 010E                             _PROTOCOL_Set_Handler 00E6  
                   __end_ofi1_PROTOCOL_Read_Lock 1748                                        clear_ram0 1780  
                                       _PIE1bits 0091                                        _loop_func 007E  
                                       _PIE4bits 0094                            PROTOCOL_I2C_SEN@pdata 0071  
            __size_of_INTERRUPT_InterruptManager 0044                                         _PIR1bits 0011  
                                       _PIR4bits 0014                                         _SSP1CON1 0215  
                                       _SSP1CON2 0216                                         _SSP1CON3 0217  
                   PROTOCOL_Initialize@device_id 0021                                         _SSP2CON1 021D  
                                       _SSP2CON3 021F                                         _SSP1STAT 0214  
                                       _SSP2STAT 021C                                   _readbuf_status 004F  
                          _PROTOCOL_Stop_Handler 00E8                      __end_of_PROTOCOL_Initialize 0D26  
                                     ?_lcd_clear 0070                    I2C2_MasterTRBInsert@ptrb_list 0020  
                        __size_ofi1_PROTOCOL_EXT 0010                          __size_ofi1_PROTOCOL_SAV 0009  
                        __size_ofi1_PROTOCOL_SET 0007                          __size_ofi1_PROTOCOL_STA 0004  
                        __size_ofi1_PROTOCOL_STP 0003                                ___wmul@multiplier 0020  
                               _I2C2_MasterWrite 0A7F                                    _PROTOCOL_Loop 0460  
                                     printf@flag 003E                                       printf@prec 0036  
                          ??i1_extension_handler 0073                            DATAEE_WriteByte@bData 0020  
                        I2C1_StatusCallback@next 0069                                     ??_lcd_string 0038  
                                    _EUSART_Read 098B                     __end_of_I2C2_MasterTRBInsert 0C3F  
                              ?_DATAEE_WriteByte 0020         __end_of_PROTOCOL_Backplane_Slave_Enabled 175B  
      __size_of_PROTOCOL_Backplane_Slave_Enabled 0004               ??_PROTOCOL_Backplane_Slave_Enabled 0070  
              ?_PROTOCOL_Backplane_Slave_Enabled 0070                 _PROTOCOL_Backplane_Slave_Enabled 1757  
                             ??_DATAEE_WriteByte 0021                                    _slave_address 0058  
                                     _EECON1bits 0195                               PROTOCOL_SET@value_ 0021  
                                     ?_loop_func 0070                             lcd_contrast@contrast 003A  
                      __size_of_PROTOCOL_I2C_GET 0003                        __size_of_PROTOCOL_I2C_SEN 003C  
                      __size_of_PROTOCOL_I2C_WHO 0003                   I2C2_MasterWriteTRBBuild@length 0021  
                        ??_OSCILLATOR_Initialize 0020                       PROTOCOL_Set_Func@loop_func 0020  
                 ?_PROTOCOL_Write_Device_Address 0070                                 __size_of___lwdiv 0035  
                             __end_of_lcd_string 0B04                                 __size_of___lwmod 002D  
                        ??_I2C2_FunctionComplete 0070                                _lcd_string_2lines 0C3F  
                                 ?_PROTOCOL_Loop 0070                               ?_lcd_string_2lines 0070  
                          __size_of_PROTOCOL_INV 0004                            __size_of_PROTOCOL_EXT 0010  
                          __size_of_PROTOCOL_SAV 0009                            __size_of_PROTOCOL_SET 0007  
                          __size_of_PROTOCOL_STA 0004                            __size_of_PROTOCOL_RST 000A  
                          __size_of_PROTOCOL_STP 0003                   ??_PROTOCOL_Read_Device_Address 0020  
                               __size_of_isdigit 000F                                  ___lwdiv@divisor 0020  
                   __size_of_I2C1_StatusCallback 00C4                                  ___lwdiv@counter 0027  
                                       __ptext10 0AA7                                         __ptext11 0B04  
                                       __ptext20 0A7F                                         __ptext12 007E  
                                       __ptext21 09AA                                         __ptext13 0B75  
                                       __ptext30 179B                                         __ptext22 0BFA  
                                       __ptext14 0C3F                                         __ptext31 17AB  
                                       __ptext23 0D26                                         __ptext15 0AD4  
                                       __ptext40 096D                                         __ptext32 09EB  
                                       __ptext24 084F                                         __ptext16 0D97  
                                       __ptext41 176F                                         __ptext33 086E  
                                       __ptext25 0917                                         __ptext17 0C84  
                                       __ptext50 0002                                         __ptext42 08CA  
                                       __ptext34 089F                                         __ptext26 1767  
                                       __ptext18 087E                                         __ptext51 0A58  
                                       __ptext43 09CA                                         __ptext35 1794  
                                       __ptext27 17F1                                         __ptext19 0A32  
                                       __ptext60 1786                                         __ptext52 0E4E  
                                       __ptext44 174B                                         __ptext36 174E  
                                       __ptext28 1751                                         __ptext61 1745  
                                       __ptext53 1748                                         __ptext45 08E2  
                                       __ptext37 098B                                         __ptext29 1763  
                                       __ptext62 17BD                                         __ptext54 175F  
                                       __ptext38 0CD4                                         __ptext63 175B  
                                       __ptext55 178D                                         __ptext47 05E8  
                                       __ptext39 17C7                                         __ptext64 1742  
                                       __ptext56 17A2                                         __ptext48 08B2  
                                       __ptext65 0B39                                         __ptext57 0950  
                                       __ptext49 088E                                         __ptext66 173F  
                                       __ptext58 085E                                         __ptext67 1757  
                                       __ptext59 17E2                                         __ptext68 0933  
                                       __ptext69 08FC                                     _SSP1CON1bits 0215  
                                   _SSP1CON2bits 0216                                         _float100 00B0  
                                       _lcd_init 0D97                              ??_lcd_string_2lines 0038  
                    __size_ofi1_DATAEE_WriteByte 001D                                         _lcd_test 0F12  
                                   _SSP2CON1bits 021D                                     _SSP2CON2bits 021E  
                    DATAEE_WriteByte@GIEBitValue 0022                                 __size_of_strncmp 0042  
                                  __size_of_atoi 0071                                    __size_of_main 0043  
                                     strncmp@len 0023                                ??_DATAEE_ReadByte 0020  
                        I2C2_MasterWrite@address 0028                          _BACKPLANE_SLAVE_ADDRESS 006E  
                     __end_of_PROTOCOL_Read_Lock 1751                      __end_ofi1_PROTOCOL_Set_Lock 178D  
                                       int$flags 007E                                         atoi@sign 002A  
                                   _PROTOCOL_INV 175B                                     _PROTOCOL_EXT 086E  
                      __end_of_lcd_string_2lines 0C84                                     _PROTOCOL_SAV 17AB  
                                   _PROTOCOL_SET 179B                                     _PROTOCOL_STA 1763  
                                   _PROTOCOL_RST 17BD                                     _PROTOCOL_STP 1751  
             __end_of_INTERRUPT_InterruptManager 0048                       _INTERRUPT_InterruptManager 0004  
                                      printf@len 003C                                      ??_lcd_clear 0038  
                                      printf@val 003A                          I2C2_MasterWrite@trBlock 00D4  
                                   _SSP1STATbits 0214                    __size_of_I2C2_BusCollisionISR 0001  
                       ?_TMR0_HasOverflowOccured 0070                               _I2C_slaveWriteData 007D  
                           i1_PROTOCOL_Read_Lock 1745                                       _INTCONbits 000B  
                                       isdigit@c 0021                           i1PROTOCOL_EXT@char_buf 0075  
                        __size_of_WDT_Initialize 0004                __size_of_I2C2_MasterWriteTRBBuild 0020  
                      ?_I2C2_MasterWriteTRBBuild 0020                                         intlevel1 0000  
                             lcd_string_2lines@i 003B                          i1PROTOCOL_Set_Lock@lock 0071  
                               ___lwmod@dividend 002A                              I2C2_ISR@i2c_address 006B  
                        ?_PIN_MANAGER_Initialize 0070                                __CFG_CLKOUTEN$OFF 0000  
                                    ??_loop_func 003C                                        strncmp@s1 0020  
                                      strncmp@s2 0022                          _backplane_slave_enabled 004E  
                         I2C2_MasterWrite@length 0027                                         printf@ap 0039  
                                       printf@cp 0037                               _EUSART_Receive_ISR 08FC  
                                ??_PROTOCOL_Loop 0042                             _I2C2_MasterTRBInsert 0BFA  
                       __size_of_I2C1_Initialize 0021                                   i1_PROTOCOL_EXT 085E  
                                 i1_PROTOCOL_SAV 17A2                                   i1_PROTOCOL_SET 178D  
                                 i1_PROTOCOL_STA 175F                                   i1_PROTOCOL_STP 1748  
                                     _OPTION_REG 0095                              ?_EUSART_Receive_ISR 0070  
                          ?i1_PROTOCOL_Read_Lock 0070                                  ___lwmod@divisor 0028  
                                _TMR0_Initialize 17D4                                  ___lwmod@counter 002D  
                    PROTOCOL_Loop@device_address 0045                             PROTOCOL_EXT@char_buf 0025  
                             EUSART_Write@txData 0021                     __size_of_EUSART_Transmit_ISR 001D  
                 __end_of_PIN_MANAGER_Initialize 098B                      _extension_handler$intlevel0 08A3  
                       __size_of_I2C2_Initialize 0018                               __size_of_I2C2_Stop 0018  
                                 loop_func@value 003E                             ??_EUSART_Receive_ISR 0070  
                                  ?_lcd_contrast 0070                         __end_of_I2C2_MasterWrite 0AA7  
                               _PROTOCOL_I2C_GET 173F                                 _PROTOCOL_I2C_SEN 0B39  
                               _PROTOCOL_I2C_WHO 1742  
