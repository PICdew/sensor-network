

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Thu Sep 21 20:08:25 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F1829
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	idataBANK1,global,class=CODE,delta=2
     7                           	psect	stringtext,global,class=STRCODE,delta=2
     8                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text5,local,class=CODE,merge=1,delta=2,group=4
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2,group=4
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2,group=4
    40                           	psect	text19,local,class=CODE,merge=1,delta=2,group=4
    41                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    42                           	psect	text21,local,class=CODE,merge=1,delta=2,group=4
    43                           	psect	text22,local,class=CODE,merge=1,delta=2,group=4
    44                           	psect	text23,local,class=CODE,merge=1,delta=2,group=4
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2,group=1
    47                           	psect	text26,local,class=CODE,merge=1,delta=2,group=1
    48                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    49                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    50                           	psect	text29,local,class=CODE,merge=1,delta=2,group=1
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    53                           	psect	text32,local,class=CODE,merge=1,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2,group=1
    55                           	psect	text34,local,class=CODE,merge=1,delta=2
    56                           	psect	text35,local,class=CODE,merge=1,delta=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2,group=1
    60                           	psect	text39,local,class=CODE,merge=1,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,delta=2
    62                           	psect	intentry,global,class=CODE,delta=2
    63                           	psect	text42,local,class=CODE,merge=1,delta=2
    64                           	psect	text43,local,class=CODE,merge=1,delta=2
    65                           	psect	swtext1,local,class=CONST,delta=2
    66                           	psect	text44,local,class=CODE,merge=1,delta=2
    67                           	psect	text45,local,class=CODE,merge=1,delta=2
    68                           	psect	text46,local,class=CODE,merge=1,delta=2
    69                           	psect	text47,local,class=CODE,merge=1,delta=2
    70                           	psect	text48,local,class=CODE,merge=1,delta=2
    71                           	psect	text49,local,class=CODE,merge=1,delta=2
    72                           	psect	text50,local,class=CODE,merge=1,delta=2,group=1
    73                           	psect	text51,local,class=CODE,merge=1,delta=2,group=1
    74                           	psect	text52,local,class=CODE,merge=1,delta=2,group=1
    75                           	psect	text53,local,class=CODE,merge=1,delta=2,group=1
    76                           	psect	text54,local,class=CODE,merge=1,delta=2,group=1
    77                           	psect	text55,local,class=CODE,merge=1,delta=2,group=1
    78                           	psect	text56,local,class=CODE,merge=1,delta=2,group=1
    79                           	psect	text57,local,class=CODE,merge=1,delta=2
    80                           	psect	text58,local,class=CODE,merge=1,delta=2
    81                           	dabs	1,0x7E,2
    82  0000                     
    83                           ; Version 1.41 (B)
    84                           ; Generated 21/02/2017 GMT
    85                           ; 
    86                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    87                           ; All rights reserved.
    88                           ; 
    89                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    90                           ; 
    91                           ; Redistribution and use in source and binary forms, with or without modification, are
    92                           ; permitted provided that the following conditions are met:
    93                           ; 
    94                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    95                           ;        conditions and the following disclaimer.
    96                           ; 
    97                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    98                           ;        of conditions and the following disclaimer in the documentation and/or other
    99                           ;        materials provided with the distribution.
   100                           ; 
   101                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   102                           ;        software without specific prior written permission.
   103                           ; 
   104                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   105                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   106                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   107                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   108                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   109                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   110                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   111                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   112                           ; 
   113                           ; 
   114                           ; Code-generator required, PIC16F1829 Definitions
   115                           ; 
   116                           ; SFR Addresses
   117  0000                     	;# 
   118  0001                     	;# 
   119  0002                     	;# 
   120  0003                     	;# 
   121  0004                     	;# 
   122  0005                     	;# 
   123  0006                     	;# 
   124  0007                     	;# 
   125  0008                     	;# 
   126  0009                     	;# 
   127  000A                     	;# 
   128  000B                     	;# 
   129  000C                     	;# 
   130  000D                     	;# 
   131  000E                     	;# 
   132  0011                     	;# 
   133  0012                     	;# 
   134  0013                     	;# 
   135  0014                     	;# 
   136  0015                     	;# 
   137  0016                     	;# 
   138  0016                     	;# 
   139  0017                     	;# 
   140  0018                     	;# 
   141  0019                     	;# 
   142  001A                     	;# 
   143  001B                     	;# 
   144  001C                     	;# 
   145  001E                     	;# 
   146  001F                     	;# 
   147  008C                     	;# 
   148  008D                     	;# 
   149  008E                     	;# 
   150  0091                     	;# 
   151  0092                     	;# 
   152  0093                     	;# 
   153  0094                     	;# 
   154  0095                     	;# 
   155  0096                     	;# 
   156  0097                     	;# 
   157  0098                     	;# 
   158  0099                     	;# 
   159  009A                     	;# 
   160  009B                     	;# 
   161  009B                     	;# 
   162  009C                     	;# 
   163  009D                     	;# 
   164  009E                     	;# 
   165  010C                     	;# 
   166  010D                     	;# 
   167  010E                     	;# 
   168  0111                     	;# 
   169  0112                     	;# 
   170  0113                     	;# 
   171  0114                     	;# 
   172  0115                     	;# 
   173  0116                     	;# 
   174  0117                     	;# 
   175  0118                     	;# 
   176  0119                     	;# 
   177  011A                     	;# 
   178  011B                     	;# 
   179  011D                     	;# 
   180  011E                     	;# 
   181  018C                     	;# 
   182  018D                     	;# 
   183  018E                     	;# 
   184  0191                     	;# 
   185  0191                     	;# 
   186  0192                     	;# 
   187  0193                     	;# 
   188  0193                     	;# 
   189  0193                     	;# 
   190  0194                     	;# 
   191  0195                     	;# 
   192  0196                     	;# 
   193  0199                     	;# 
   194  019A                     	;# 
   195  019B                     	;# 
   196  019B                     	;# 
   197  019C                     	;# 
   198  019D                     	;# 
   199  019E                     	;# 
   200  019F                     	;# 
   201  020C                     	;# 
   202  020D                     	;# 
   203  020E                     	;# 
   204  0211                     	;# 
   205  0211                     	;# 
   206  0212                     	;# 
   207  0212                     	;# 
   208  0213                     	;# 
   209  0213                     	;# 
   210  0214                     	;# 
   211  0214                     	;# 
   212  0215                     	;# 
   213  0215                     	;# 
   214  0215                     	;# 
   215  0216                     	;# 
   216  0216                     	;# 
   217  0217                     	;# 
   218  0217                     	;# 
   219  0219                     	;# 
   220  021A                     	;# 
   221  021B                     	;# 
   222  021C                     	;# 
   223  021D                     	;# 
   224  021E                     	;# 
   225  021F                     	;# 
   226  0291                     	;# 
   227  0291                     	;# 
   228  0292                     	;# 
   229  0293                     	;# 
   230  0294                     	;# 
   231  0295                     	;# 
   232  0295                     	;# 
   233  0296                     	;# 
   234  0298                     	;# 
   235  0298                     	;# 
   236  0299                     	;# 
   237  029A                     	;# 
   238  029B                     	;# 
   239  029C                     	;# 
   240  029D                     	;# 
   241  029E                     	;# 
   242  0311                     	;# 
   243  0311                     	;# 
   244  0312                     	;# 
   245  0313                     	;# 
   246  0318                     	;# 
   247  0318                     	;# 
   248  0319                     	;# 
   249  031A                     	;# 
   250  038C                     	;# 
   251  038D                     	;# 
   252  038E                     	;# 
   253  0391                     	;# 
   254  0392                     	;# 
   255  0393                     	;# 
   256  0394                     	;# 
   257  0395                     	;# 
   258  0396                     	;# 
   259  039A                     	;# 
   260  039C                     	;# 
   261  039D                     	;# 
   262  039E                     	;# 
   263  039F                     	;# 
   264  0415                     	;# 
   265  0416                     	;# 
   266  0417                     	;# 
   267  041C                     	;# 
   268  041D                     	;# 
   269  041E                     	;# 
   270  0FE4                     	;# 
   271  0FE5                     	;# 
   272  0FE6                     	;# 
   273  0FE7                     	;# 
   274  0FE8                     	;# 
   275  0FE9                     	;# 
   276  0FEA                     	;# 
   277  0FEB                     	;# 
   278  0FED                     	;# 
   279  0FEE                     	;# 
   280  0FEF                     	;# 
   281  0000                     	;# 
   282  0001                     	;# 
   283  0002                     	;# 
   284  0003                     	;# 
   285  0004                     	;# 
   286  0005                     	;# 
   287  0006                     	;# 
   288  0007                     	;# 
   289  0008                     	;# 
   290  0009                     	;# 
   291  000A                     	;# 
   292  000B                     	;# 
   293  000C                     	;# 
   294  000D                     	;# 
   295  000E                     	;# 
   296  0011                     	;# 
   297  0012                     	;# 
   298  0013                     	;# 
   299  0014                     	;# 
   300  0015                     	;# 
   301  0016                     	;# 
   302  0016                     	;# 
   303  0017                     	;# 
   304  0018                     	;# 
   305  0019                     	;# 
   306  001A                     	;# 
   307  001B                     	;# 
   308  001C                     	;# 
   309  001E                     	;# 
   310  001F                     	;# 
   311  008C                     	;# 
   312  008D                     	;# 
   313  008E                     	;# 
   314  0091                     	;# 
   315  0092                     	;# 
   316  0093                     	;# 
   317  0094                     	;# 
   318  0095                     	;# 
   319  0096                     	;# 
   320  0097                     	;# 
   321  0098                     	;# 
   322  0099                     	;# 
   323  009A                     	;# 
   324  009B                     	;# 
   325  009B                     	;# 
   326  009C                     	;# 
   327  009D                     	;# 
   328  009E                     	;# 
   329  010C                     	;# 
   330  010D                     	;# 
   331  010E                     	;# 
   332  0111                     	;# 
   333  0112                     	;# 
   334  0113                     	;# 
   335  0114                     	;# 
   336  0115                     	;# 
   337  0116                     	;# 
   338  0117                     	;# 
   339  0118                     	;# 
   340  0119                     	;# 
   341  011A                     	;# 
   342  011B                     	;# 
   343  011D                     	;# 
   344  011E                     	;# 
   345  018C                     	;# 
   346  018D                     	;# 
   347  018E                     	;# 
   348  0191                     	;# 
   349  0191                     	;# 
   350  0192                     	;# 
   351  0193                     	;# 
   352  0193                     	;# 
   353  0193                     	;# 
   354  0194                     	;# 
   355  0195                     	;# 
   356  0196                     	;# 
   357  0199                     	;# 
   358  019A                     	;# 
   359  019B                     	;# 
   360  019B                     	;# 
   361  019C                     	;# 
   362  019D                     	;# 
   363  019E                     	;# 
   364  019F                     	;# 
   365  020C                     	;# 
   366  020D                     	;# 
   367  020E                     	;# 
   368  0211                     	;# 
   369  0211                     	;# 
   370  0212                     	;# 
   371  0212                     	;# 
   372  0213                     	;# 
   373  0213                     	;# 
   374  0214                     	;# 
   375  0214                     	;# 
   376  0215                     	;# 
   377  0215                     	;# 
   378  0215                     	;# 
   379  0216                     	;# 
   380  0216                     	;# 
   381  0217                     	;# 
   382  0217                     	;# 
   383  0219                     	;# 
   384  021A                     	;# 
   385  021B                     	;# 
   386  021C                     	;# 
   387  021D                     	;# 
   388  021E                     	;# 
   389  021F                     	;# 
   390  0291                     	;# 
   391  0291                     	;# 
   392  0292                     	;# 
   393  0293                     	;# 
   394  0294                     	;# 
   395  0295                     	;# 
   396  0295                     	;# 
   397  0296                     	;# 
   398  0298                     	;# 
   399  0298                     	;# 
   400  0299                     	;# 
   401  029A                     	;# 
   402  029B                     	;# 
   403  029C                     	;# 
   404  029D                     	;# 
   405  029E                     	;# 
   406  0311                     	;# 
   407  0311                     	;# 
   408  0312                     	;# 
   409  0313                     	;# 
   410  0318                     	;# 
   411  0318                     	;# 
   412  0319                     	;# 
   413  031A                     	;# 
   414  038C                     	;# 
   415  038D                     	;# 
   416  038E                     	;# 
   417  0391                     	;# 
   418  0392                     	;# 
   419  0393                     	;# 
   420  0394                     	;# 
   421  0395                     	;# 
   422  0396                     	;# 
   423  039A                     	;# 
   424  039C                     	;# 
   425  039D                     	;# 
   426  039E                     	;# 
   427  039F                     	;# 
   428  0415                     	;# 
   429  0416                     	;# 
   430  0417                     	;# 
   431  041C                     	;# 
   432  041D                     	;# 
   433  041E                     	;# 
   434  0FE4                     	;# 
   435  0FE5                     	;# 
   436  0FE6                     	;# 
   437  0FE7                     	;# 
   438  0FE8                     	;# 
   439  0FE9                     	;# 
   440  0FEA                     	;# 
   441  0FEB                     	;# 
   442  0FED                     	;# 
   443  0FEE                     	;# 
   444  0FEF                     	;# 
   445  0000                     	;# 
   446  0001                     	;# 
   447  0002                     	;# 
   448  0003                     	;# 
   449  0004                     	;# 
   450  0005                     	;# 
   451  0006                     	;# 
   452  0007                     	;# 
   453  0008                     	;# 
   454  0009                     	;# 
   455  000A                     	;# 
   456  000B                     	;# 
   457  000C                     	;# 
   458  000D                     	;# 
   459  000E                     	;# 
   460  0011                     	;# 
   461  0012                     	;# 
   462  0013                     	;# 
   463  0014                     	;# 
   464  0015                     	;# 
   465  0016                     	;# 
   466  0016                     	;# 
   467  0017                     	;# 
   468  0018                     	;# 
   469  0019                     	;# 
   470  001A                     	;# 
   471  001B                     	;# 
   472  001C                     	;# 
   473  001E                     	;# 
   474  001F                     	;# 
   475  008C                     	;# 
   476  008D                     	;# 
   477  008E                     	;# 
   478  0091                     	;# 
   479  0092                     	;# 
   480  0093                     	;# 
   481  0094                     	;# 
   482  0095                     	;# 
   483  0096                     	;# 
   484  0097                     	;# 
   485  0098                     	;# 
   486  0099                     	;# 
   487  009A                     	;# 
   488  009B                     	;# 
   489  009B                     	;# 
   490  009C                     	;# 
   491  009D                     	;# 
   492  009E                     	;# 
   493  010C                     	;# 
   494  010D                     	;# 
   495  010E                     	;# 
   496  0111                     	;# 
   497  0112                     	;# 
   498  0113                     	;# 
   499  0114                     	;# 
   500  0115                     	;# 
   501  0116                     	;# 
   502  0117                     	;# 
   503  0118                     	;# 
   504  0119                     	;# 
   505  011A                     	;# 
   506  011B                     	;# 
   507  011D                     	;# 
   508  011E                     	;# 
   509  018C                     	;# 
   510  018D                     	;# 
   511  018E                     	;# 
   512  0191                     	;# 
   513  0191                     	;# 
   514  0192                     	;# 
   515  0193                     	;# 
   516  0193                     	;# 
   517  0193                     	;# 
   518  0194                     	;# 
   519  0195                     	;# 
   520  0196                     	;# 
   521  0199                     	;# 
   522  019A                     	;# 
   523  019B                     	;# 
   524  019B                     	;# 
   525  019C                     	;# 
   526  019D                     	;# 
   527  019E                     	;# 
   528  019F                     	;# 
   529  020C                     	;# 
   530  020D                     	;# 
   531  020E                     	;# 
   532  0211                     	;# 
   533  0211                     	;# 
   534  0212                     	;# 
   535  0212                     	;# 
   536  0213                     	;# 
   537  0213                     	;# 
   538  0214                     	;# 
   539  0214                     	;# 
   540  0215                     	;# 
   541  0215                     	;# 
   542  0215                     	;# 
   543  0216                     	;# 
   544  0216                     	;# 
   545  0217                     	;# 
   546  0217                     	;# 
   547  0219                     	;# 
   548  021A                     	;# 
   549  021B                     	;# 
   550  021C                     	;# 
   551  021D                     	;# 
   552  021E                     	;# 
   553  021F                     	;# 
   554  0291                     	;# 
   555  0291                     	;# 
   556  0292                     	;# 
   557  0293                     	;# 
   558  0294                     	;# 
   559  0295                     	;# 
   560  0295                     	;# 
   561  0296                     	;# 
   562  0298                     	;# 
   563  0298                     	;# 
   564  0299                     	;# 
   565  029A                     	;# 
   566  029B                     	;# 
   567  029C                     	;# 
   568  029D                     	;# 
   569  029E                     	;# 
   570  0311                     	;# 
   571  0311                     	;# 
   572  0312                     	;# 
   573  0313                     	;# 
   574  0318                     	;# 
   575  0318                     	;# 
   576  0319                     	;# 
   577  031A                     	;# 
   578  038C                     	;# 
   579  038D                     	;# 
   580  038E                     	;# 
   581  0391                     	;# 
   582  0392                     	;# 
   583  0393                     	;# 
   584  0394                     	;# 
   585  0395                     	;# 
   586  0396                     	;# 
   587  039A                     	;# 
   588  039C                     	;# 
   589  039D                     	;# 
   590  039E                     	;# 
   591  039F                     	;# 
   592  0415                     	;# 
   593  0416                     	;# 
   594  0417                     	;# 
   595  041C                     	;# 
   596  041D                     	;# 
   597  041E                     	;# 
   598  0FE4                     	;# 
   599  0FE5                     	;# 
   600  0FE6                     	;# 
   601  0FE7                     	;# 
   602  0FE8                     	;# 
   603  0FE9                     	;# 
   604  0FEA                     	;# 
   605  0FEB                     	;# 
   606  0FED                     	;# 
   607  0FEE                     	;# 
   608  0FEF                     	;# 
   609  0000                     	;# 
   610  0001                     	;# 
   611  0002                     	;# 
   612  0003                     	;# 
   613  0004                     	;# 
   614  0005                     	;# 
   615  0006                     	;# 
   616  0007                     	;# 
   617  0008                     	;# 
   618  0009                     	;# 
   619  000A                     	;# 
   620  000B                     	;# 
   621  000C                     	;# 
   622  000D                     	;# 
   623  000E                     	;# 
   624  0011                     	;# 
   625  0012                     	;# 
   626  0013                     	;# 
   627  0014                     	;# 
   628  0015                     	;# 
   629  0016                     	;# 
   630  0016                     	;# 
   631  0017                     	;# 
   632  0018                     	;# 
   633  0019                     	;# 
   634  001A                     	;# 
   635  001B                     	;# 
   636  001C                     	;# 
   637  001E                     	;# 
   638  001F                     	;# 
   639  008C                     	;# 
   640  008D                     	;# 
   641  008E                     	;# 
   642  0091                     	;# 
   643  0092                     	;# 
   644  0093                     	;# 
   645  0094                     	;# 
   646  0095                     	;# 
   647  0096                     	;# 
   648  0097                     	;# 
   649  0098                     	;# 
   650  0099                     	;# 
   651  009A                     	;# 
   652  009B                     	;# 
   653  009B                     	;# 
   654  009C                     	;# 
   655  009D                     	;# 
   656  009E                     	;# 
   657  010C                     	;# 
   658  010D                     	;# 
   659  010E                     	;# 
   660  0111                     	;# 
   661  0112                     	;# 
   662  0113                     	;# 
   663  0114                     	;# 
   664  0115                     	;# 
   665  0116                     	;# 
   666  0117                     	;# 
   667  0118                     	;# 
   668  0119                     	;# 
   669  011A                     	;# 
   670  011B                     	;# 
   671  011D                     	;# 
   672  011E                     	;# 
   673  018C                     	;# 
   674  018D                     	;# 
   675  018E                     	;# 
   676  0191                     	;# 
   677  0191                     	;# 
   678  0192                     	;# 
   679  0193                     	;# 
   680  0193                     	;# 
   681  0193                     	;# 
   682  0194                     	;# 
   683  0195                     	;# 
   684  0196                     	;# 
   685  0199                     	;# 
   686  019A                     	;# 
   687  019B                     	;# 
   688  019B                     	;# 
   689  019C                     	;# 
   690  019D                     	;# 
   691  019E                     	;# 
   692  019F                     	;# 
   693  020C                     	;# 
   694  020D                     	;# 
   695  020E                     	;# 
   696  0211                     	;# 
   697  0211                     	;# 
   698  0212                     	;# 
   699  0212                     	;# 
   700  0213                     	;# 
   701  0213                     	;# 
   702  0214                     	;# 
   703  0214                     	;# 
   704  0215                     	;# 
   705  0215                     	;# 
   706  0215                     	;# 
   707  0216                     	;# 
   708  0216                     	;# 
   709  0217                     	;# 
   710  0217                     	;# 
   711  0219                     	;# 
   712  021A                     	;# 
   713  021B                     	;# 
   714  021C                     	;# 
   715  021D                     	;# 
   716  021E                     	;# 
   717  021F                     	;# 
   718  0291                     	;# 
   719  0291                     	;# 
   720  0292                     	;# 
   721  0293                     	;# 
   722  0294                     	;# 
   723  0295                     	;# 
   724  0295                     	;# 
   725  0296                     	;# 
   726  0298                     	;# 
   727  0298                     	;# 
   728  0299                     	;# 
   729  029A                     	;# 
   730  029B                     	;# 
   731  029C                     	;# 
   732  029D                     	;# 
   733  029E                     	;# 
   734  0311                     	;# 
   735  0311                     	;# 
   736  0312                     	;# 
   737  0313                     	;# 
   738  0318                     	;# 
   739  0318                     	;# 
   740  0319                     	;# 
   741  031A                     	;# 
   742  038C                     	;# 
   743  038D                     	;# 
   744  038E                     	;# 
   745  0391                     	;# 
   746  0392                     	;# 
   747  0393                     	;# 
   748  0394                     	;# 
   749  0395                     	;# 
   750  0396                     	;# 
   751  039A                     	;# 
   752  039C                     	;# 
   753  039D                     	;# 
   754  039E                     	;# 
   755  039F                     	;# 
   756  0415                     	;# 
   757  0416                     	;# 
   758  0417                     	;# 
   759  041C                     	;# 
   760  041D                     	;# 
   761  041E                     	;# 
   762  0FE4                     	;# 
   763  0FE5                     	;# 
   764  0FE6                     	;# 
   765  0FE7                     	;# 
   766  0FE8                     	;# 
   767  0FE9                     	;# 
   768  0FEA                     	;# 
   769  0FEB                     	;# 
   770  0FED                     	;# 
   771  0FEE                     	;# 
   772  0FEF                     	;# 
   773  0000                     	;# 
   774  0001                     	;# 
   775  0002                     	;# 
   776  0003                     	;# 
   777  0004                     	;# 
   778  0005                     	;# 
   779  0006                     	;# 
   780  0007                     	;# 
   781  0008                     	;# 
   782  0009                     	;# 
   783  000A                     	;# 
   784  000B                     	;# 
   785  000C                     	;# 
   786  000D                     	;# 
   787  000E                     	;# 
   788  0011                     	;# 
   789  0012                     	;# 
   790  0013                     	;# 
   791  0014                     	;# 
   792  0015                     	;# 
   793  0016                     	;# 
   794  0016                     	;# 
   795  0017                     	;# 
   796  0018                     	;# 
   797  0019                     	;# 
   798  001A                     	;# 
   799  001B                     	;# 
   800  001C                     	;# 
   801  001E                     	;# 
   802  001F                     	;# 
   803  008C                     	;# 
   804  008D                     	;# 
   805  008E                     	;# 
   806  0091                     	;# 
   807  0092                     	;# 
   808  0093                     	;# 
   809  0094                     	;# 
   810  0095                     	;# 
   811  0096                     	;# 
   812  0097                     	;# 
   813  0098                     	;# 
   814  0099                     	;# 
   815  009A                     	;# 
   816  009B                     	;# 
   817  009B                     	;# 
   818  009C                     	;# 
   819  009D                     	;# 
   820  009E                     	;# 
   821  010C                     	;# 
   822  010D                     	;# 
   823  010E                     	;# 
   824  0111                     	;# 
   825  0112                     	;# 
   826  0113                     	;# 
   827  0114                     	;# 
   828  0115                     	;# 
   829  0116                     	;# 
   830  0117                     	;# 
   831  0118                     	;# 
   832  0119                     	;# 
   833  011A                     	;# 
   834  011B                     	;# 
   835  011D                     	;# 
   836  011E                     	;# 
   837  018C                     	;# 
   838  018D                     	;# 
   839  018E                     	;# 
   840  0191                     	;# 
   841  0191                     	;# 
   842  0192                     	;# 
   843  0193                     	;# 
   844  0193                     	;# 
   845  0193                     	;# 
   846  0194                     	;# 
   847  0195                     	;# 
   848  0196                     	;# 
   849  0199                     	;# 
   850  019A                     	;# 
   851  019B                     	;# 
   852  019B                     	;# 
   853  019C                     	;# 
   854  019D                     	;# 
   855  019E                     	;# 
   856  019F                     	;# 
   857  020C                     	;# 
   858  020D                     	;# 
   859  020E                     	;# 
   860  0211                     	;# 
   861  0211                     	;# 
   862  0212                     	;# 
   863  0212                     	;# 
   864  0213                     	;# 
   865  0213                     	;# 
   866  0214                     	;# 
   867  0214                     	;# 
   868  0215                     	;# 
   869  0215                     	;# 
   870  0215                     	;# 
   871  0216                     	;# 
   872  0216                     	;# 
   873  0217                     	;# 
   874  0217                     	;# 
   875  0219                     	;# 
   876  021A                     	;# 
   877  021B                     	;# 
   878  021C                     	;# 
   879  021D                     	;# 
   880  021E                     	;# 
   881  021F                     	;# 
   882  0291                     	;# 
   883  0291                     	;# 
   884  0292                     	;# 
   885  0293                     	;# 
   886  0294                     	;# 
   887  0295                     	;# 
   888  0295                     	;# 
   889  0296                     	;# 
   890  0298                     	;# 
   891  0298                     	;# 
   892  0299                     	;# 
   893  029A                     	;# 
   894  029B                     	;# 
   895  029C                     	;# 
   896  029D                     	;# 
   897  029E                     	;# 
   898  0311                     	;# 
   899  0311                     	;# 
   900  0312                     	;# 
   901  0313                     	;# 
   902  0318                     	;# 
   903  0318                     	;# 
   904  0319                     	;# 
   905  031A                     	;# 
   906  038C                     	;# 
   907  038D                     	;# 
   908  038E                     	;# 
   909  0391                     	;# 
   910  0392                     	;# 
   911  0393                     	;# 
   912  0394                     	;# 
   913  0395                     	;# 
   914  0396                     	;# 
   915  039A                     	;# 
   916  039C                     	;# 
   917  039D                     	;# 
   918  039E                     	;# 
   919  039F                     	;# 
   920  0415                     	;# 
   921  0416                     	;# 
   922  0417                     	;# 
   923  041C                     	;# 
   924  041D                     	;# 
   925  041E                     	;# 
   926  0FE4                     	;# 
   927  0FE5                     	;# 
   928  0FE6                     	;# 
   929  0FE7                     	;# 
   930  0FE8                     	;# 
   931  0FE9                     	;# 
   932  0FEA                     	;# 
   933  0FEB                     	;# 
   934  0FED                     	;# 
   935  0FEE                     	;# 
   936  0FEF                     	;# 
   937  0000                     	;# 
   938  0001                     	;# 
   939  0002                     	;# 
   940  0003                     	;# 
   941  0004                     	;# 
   942  0005                     	;# 
   943  0006                     	;# 
   944  0007                     	;# 
   945  0008                     	;# 
   946  0009                     	;# 
   947  000A                     	;# 
   948  000B                     	;# 
   949  000C                     	;# 
   950  000D                     	;# 
   951  000E                     	;# 
   952  0011                     	;# 
   953  0012                     	;# 
   954  0013                     	;# 
   955  0014                     	;# 
   956  0015                     	;# 
   957  0016                     	;# 
   958  0016                     	;# 
   959  0017                     	;# 
   960  0018                     	;# 
   961  0019                     	;# 
   962  001A                     	;# 
   963  001B                     	;# 
   964  001C                     	;# 
   965  001E                     	;# 
   966  001F                     	;# 
   967  008C                     	;# 
   968  008D                     	;# 
   969  008E                     	;# 
   970  0091                     	;# 
   971  0092                     	;# 
   972  0093                     	;# 
   973  0094                     	;# 
   974  0095                     	;# 
   975  0096                     	;# 
   976  0097                     	;# 
   977  0098                     	;# 
   978  0099                     	;# 
   979  009A                     	;# 
   980  009B                     	;# 
   981  009B                     	;# 
   982  009C                     	;# 
   983  009D                     	;# 
   984  009E                     	;# 
   985  010C                     	;# 
   986  010D                     	;# 
   987  010E                     	;# 
   988  0111                     	;# 
   989  0112                     	;# 
   990  0113                     	;# 
   991  0114                     	;# 
   992  0115                     	;# 
   993  0116                     	;# 
   994  0117                     	;# 
   995  0118                     	;# 
   996  0119                     	;# 
   997  011A                     	;# 
   998  011B                     	;# 
   999  011D                     	;# 
  1000  011E                     	;# 
  1001  018C                     	;# 
  1002  018D                     	;# 
  1003  018E                     	;# 
  1004  0191                     	;# 
  1005  0191                     	;# 
  1006  0192                     	;# 
  1007  0193                     	;# 
  1008  0193                     	;# 
  1009  0193                     	;# 
  1010  0194                     	;# 
  1011  0195                     	;# 
  1012  0196                     	;# 
  1013  0199                     	;# 
  1014  019A                     	;# 
  1015  019B                     	;# 
  1016  019B                     	;# 
  1017  019C                     	;# 
  1018  019D                     	;# 
  1019  019E                     	;# 
  1020  019F                     	;# 
  1021  020C                     	;# 
  1022  020D                     	;# 
  1023  020E                     	;# 
  1024  0211                     	;# 
  1025  0211                     	;# 
  1026  0212                     	;# 
  1027  0212                     	;# 
  1028  0213                     	;# 
  1029  0213                     	;# 
  1030  0214                     	;# 
  1031  0214                     	;# 
  1032  0215                     	;# 
  1033  0215                     	;# 
  1034  0215                     	;# 
  1035  0216                     	;# 
  1036  0216                     	;# 
  1037  0217                     	;# 
  1038  0217                     	;# 
  1039  0219                     	;# 
  1040  021A                     	;# 
  1041  021B                     	;# 
  1042  021C                     	;# 
  1043  021D                     	;# 
  1044  021E                     	;# 
  1045  021F                     	;# 
  1046  0291                     	;# 
  1047  0291                     	;# 
  1048  0292                     	;# 
  1049  0293                     	;# 
  1050  0294                     	;# 
  1051  0295                     	;# 
  1052  0295                     	;# 
  1053  0296                     	;# 
  1054  0298                     	;# 
  1055  0298                     	;# 
  1056  0299                     	;# 
  1057  029A                     	;# 
  1058  029B                     	;# 
  1059  029C                     	;# 
  1060  029D                     	;# 
  1061  029E                     	;# 
  1062  0311                     	;# 
  1063  0311                     	;# 
  1064  0312                     	;# 
  1065  0313                     	;# 
  1066  0318                     	;# 
  1067  0318                     	;# 
  1068  0319                     	;# 
  1069  031A                     	;# 
  1070  038C                     	;# 
  1071  038D                     	;# 
  1072  038E                     	;# 
  1073  0391                     	;# 
  1074  0392                     	;# 
  1075  0393                     	;# 
  1076  0394                     	;# 
  1077  0395                     	;# 
  1078  0396                     	;# 
  1079  039A                     	;# 
  1080  039C                     	;# 
  1081  039D                     	;# 
  1082  039E                     	;# 
  1083  039F                     	;# 
  1084  0415                     	;# 
  1085  0416                     	;# 
  1086  0417                     	;# 
  1087  041C                     	;# 
  1088  041D                     	;# 
  1089  041E                     	;# 
  1090  0FE4                     	;# 
  1091  0FE5                     	;# 
  1092  0FE6                     	;# 
  1093  0FE7                     	;# 
  1094  0FE8                     	;# 
  1095  0FE9                     	;# 
  1096  0FEA                     	;# 
  1097  0FEB                     	;# 
  1098  0FED                     	;# 
  1099  0FEE                     	;# 
  1100  0FEF                     	;# 
  1101  0000                     	;# 
  1102  0001                     	;# 
  1103  0002                     	;# 
  1104  0003                     	;# 
  1105  0004                     	;# 
  1106  0005                     	;# 
  1107  0006                     	;# 
  1108  0007                     	;# 
  1109  0008                     	;# 
  1110  0009                     	;# 
  1111  000A                     	;# 
  1112  000B                     	;# 
  1113  000C                     	;# 
  1114  000D                     	;# 
  1115  000E                     	;# 
  1116  0011                     	;# 
  1117  0012                     	;# 
  1118  0013                     	;# 
  1119  0014                     	;# 
  1120  0015                     	;# 
  1121  0016                     	;# 
  1122  0016                     	;# 
  1123  0017                     	;# 
  1124  0018                     	;# 
  1125  0019                     	;# 
  1126  001A                     	;# 
  1127  001B                     	;# 
  1128  001C                     	;# 
  1129  001E                     	;# 
  1130  001F                     	;# 
  1131  008C                     	;# 
  1132  008D                     	;# 
  1133  008E                     	;# 
  1134  0091                     	;# 
  1135  0092                     	;# 
  1136  0093                     	;# 
  1137  0094                     	;# 
  1138  0095                     	;# 
  1139  0096                     	;# 
  1140  0097                     	;# 
  1141  0098                     	;# 
  1142  0099                     	;# 
  1143  009A                     	;# 
  1144  009B                     	;# 
  1145  009B                     	;# 
  1146  009C                     	;# 
  1147  009D                     	;# 
  1148  009E                     	;# 
  1149  010C                     	;# 
  1150  010D                     	;# 
  1151  010E                     	;# 
  1152  0111                     	;# 
  1153  0112                     	;# 
  1154  0113                     	;# 
  1155  0114                     	;# 
  1156  0115                     	;# 
  1157  0116                     	;# 
  1158  0117                     	;# 
  1159  0118                     	;# 
  1160  0119                     	;# 
  1161  011A                     	;# 
  1162  011B                     	;# 
  1163  011D                     	;# 
  1164  011E                     	;# 
  1165  018C                     	;# 
  1166  018D                     	;# 
  1167  018E                     	;# 
  1168  0191                     	;# 
  1169  0191                     	;# 
  1170  0192                     	;# 
  1171  0193                     	;# 
  1172  0193                     	;# 
  1173  0193                     	;# 
  1174  0194                     	;# 
  1175  0195                     	;# 
  1176  0196                     	;# 
  1177  0199                     	;# 
  1178  019A                     	;# 
  1179  019B                     	;# 
  1180  019B                     	;# 
  1181  019C                     	;# 
  1182  019D                     	;# 
  1183  019E                     	;# 
  1184  019F                     	;# 
  1185  020C                     	;# 
  1186  020D                     	;# 
  1187  020E                     	;# 
  1188  0211                     	;# 
  1189  0211                     	;# 
  1190  0212                     	;# 
  1191  0212                     	;# 
  1192  0213                     	;# 
  1193  0213                     	;# 
  1194  0214                     	;# 
  1195  0214                     	;# 
  1196  0215                     	;# 
  1197  0215                     	;# 
  1198  0215                     	;# 
  1199  0216                     	;# 
  1200  0216                     	;# 
  1201  0217                     	;# 
  1202  0217                     	;# 
  1203  0219                     	;# 
  1204  021A                     	;# 
  1205  021B                     	;# 
  1206  021C                     	;# 
  1207  021D                     	;# 
  1208  021E                     	;# 
  1209  021F                     	;# 
  1210  0291                     	;# 
  1211  0291                     	;# 
  1212  0292                     	;# 
  1213  0293                     	;# 
  1214  0294                     	;# 
  1215  0295                     	;# 
  1216  0295                     	;# 
  1217  0296                     	;# 
  1218  0298                     	;# 
  1219  0298                     	;# 
  1220  0299                     	;# 
  1221  029A                     	;# 
  1222  029B                     	;# 
  1223  029C                     	;# 
  1224  029D                     	;# 
  1225  029E                     	;# 
  1226  0311                     	;# 
  1227  0311                     	;# 
  1228  0312                     	;# 
  1229  0313                     	;# 
  1230  0318                     	;# 
  1231  0318                     	;# 
  1232  0319                     	;# 
  1233  031A                     	;# 
  1234  038C                     	;# 
  1235  038D                     	;# 
  1236  038E                     	;# 
  1237  0391                     	;# 
  1238  0392                     	;# 
  1239  0393                     	;# 
  1240  0394                     	;# 
  1241  0395                     	;# 
  1242  0396                     	;# 
  1243  039A                     	;# 
  1244  039C                     	;# 
  1245  039D                     	;# 
  1246  039E                     	;# 
  1247  039F                     	;# 
  1248  0415                     	;# 
  1249  0416                     	;# 
  1250  0417                     	;# 
  1251  041C                     	;# 
  1252  041D                     	;# 
  1253  041E                     	;# 
  1254  0FE4                     	;# 
  1255  0FE5                     	;# 
  1256  0FE6                     	;# 
  1257  0FE7                     	;# 
  1258  0FE8                     	;# 
  1259  0FE9                     	;# 
  1260  0FEA                     	;# 
  1261  0FEB                     	;# 
  1262  0FED                     	;# 
  1263  0FEE                     	;# 
  1264  0FEF                     	;# 
  1265  0000                     	;# 
  1266  0001                     	;# 
  1267  0002                     	;# 
  1268  0003                     	;# 
  1269  0004                     	;# 
  1270  0005                     	;# 
  1271  0006                     	;# 
  1272  0007                     	;# 
  1273  0008                     	;# 
  1274  0009                     	;# 
  1275  000A                     	;# 
  1276  000B                     	;# 
  1277  000C                     	;# 
  1278  000D                     	;# 
  1279  000E                     	;# 
  1280  0011                     	;# 
  1281  0012                     	;# 
  1282  0013                     	;# 
  1283  0014                     	;# 
  1284  0015                     	;# 
  1285  0016                     	;# 
  1286  0016                     	;# 
  1287  0017                     	;# 
  1288  0018                     	;# 
  1289  0019                     	;# 
  1290  001A                     	;# 
  1291  001B                     	;# 
  1292  001C                     	;# 
  1293  001E                     	;# 
  1294  001F                     	;# 
  1295  008C                     	;# 
  1296  008D                     	;# 
  1297  008E                     	;# 
  1298  0091                     	;# 
  1299  0092                     	;# 
  1300  0093                     	;# 
  1301  0094                     	;# 
  1302  0095                     	;# 
  1303  0096                     	;# 
  1304  0097                     	;# 
  1305  0098                     	;# 
  1306  0099                     	;# 
  1307  009A                     	;# 
  1308  009B                     	;# 
  1309  009B                     	;# 
  1310  009C                     	;# 
  1311  009D                     	;# 
  1312  009E                     	;# 
  1313  010C                     	;# 
  1314  010D                     	;# 
  1315  010E                     	;# 
  1316  0111                     	;# 
  1317  0112                     	;# 
  1318  0113                     	;# 
  1319  0114                     	;# 
  1320  0115                     	;# 
  1321  0116                     	;# 
  1322  0117                     	;# 
  1323  0118                     	;# 
  1324  0119                     	;# 
  1325  011A                     	;# 
  1326  011B                     	;# 
  1327  011D                     	;# 
  1328  011E                     	;# 
  1329  018C                     	;# 
  1330  018D                     	;# 
  1331  018E                     	;# 
  1332  0191                     	;# 
  1333  0191                     	;# 
  1334  0192                     	;# 
  1335  0193                     	;# 
  1336  0193                     	;# 
  1337  0193                     	;# 
  1338  0194                     	;# 
  1339  0195                     	;# 
  1340  0196                     	;# 
  1341  0199                     	;# 
  1342  019A                     	;# 
  1343  019B                     	;# 
  1344  019B                     	;# 
  1345  019C                     	;# 
  1346  019D                     	;# 
  1347  019E                     	;# 
  1348  019F                     	;# 
  1349  020C                     	;# 
  1350  020D                     	;# 
  1351  020E                     	;# 
  1352  0211                     	;# 
  1353  0211                     	;# 
  1354  0212                     	;# 
  1355  0212                     	;# 
  1356  0213                     	;# 
  1357  0213                     	;# 
  1358  0214                     	;# 
  1359  0214                     	;# 
  1360  0215                     	;# 
  1361  0215                     	;# 
  1362  0215                     	;# 
  1363  0216                     	;# 
  1364  0216                     	;# 
  1365  0217                     	;# 
  1366  0217                     	;# 
  1367  0219                     	;# 
  1368  021A                     	;# 
  1369  021B                     	;# 
  1370  021C                     	;# 
  1371  021D                     	;# 
  1372  021E                     	;# 
  1373  021F                     	;# 
  1374  0291                     	;# 
  1375  0291                     	;# 
  1376  0292                     	;# 
  1377  0293                     	;# 
  1378  0294                     	;# 
  1379  0295                     	;# 
  1380  0295                     	;# 
  1381  0296                     	;# 
  1382  0298                     	;# 
  1383  0298                     	;# 
  1384  0299                     	;# 
  1385  029A                     	;# 
  1386  029B                     	;# 
  1387  029C                     	;# 
  1388  029D                     	;# 
  1389  029E                     	;# 
  1390  0311                     	;# 
  1391  0311                     	;# 
  1392  0312                     	;# 
  1393  0313                     	;# 
  1394  0318                     	;# 
  1395  0318                     	;# 
  1396  0319                     	;# 
  1397  031A                     	;# 
  1398  038C                     	;# 
  1399  038D                     	;# 
  1400  038E                     	;# 
  1401  0391                     	;# 
  1402  0392                     	;# 
  1403  0393                     	;# 
  1404  0394                     	;# 
  1405  0395                     	;# 
  1406  0396                     	;# 
  1407  039A                     	;# 
  1408  039C                     	;# 
  1409  039D                     	;# 
  1410  039E                     	;# 
  1411  039F                     	;# 
  1412  0415                     	;# 
  1413  0416                     	;# 
  1414  0417                     	;# 
  1415  041C                     	;# 
  1416  041D                     	;# 
  1417  041E                     	;# 
  1418  0FE4                     	;# 
  1419  0FE5                     	;# 
  1420  0FE6                     	;# 
  1421  0FE7                     	;# 
  1422  0FE8                     	;# 
  1423  0FE9                     	;# 
  1424  0FEA                     	;# 
  1425  0FEB                     	;# 
  1426  0FED                     	;# 
  1427  0FEE                     	;# 
  1428  0FEF                     	;# 
  1429  0000                     	;# 
  1430  0001                     	;# 
  1431  0002                     	;# 
  1432  0003                     	;# 
  1433  0004                     	;# 
  1434  0005                     	;# 
  1435  0006                     	;# 
  1436  0007                     	;# 
  1437  0008                     	;# 
  1438  0009                     	;# 
  1439  000A                     	;# 
  1440  000B                     	;# 
  1441  000C                     	;# 
  1442  000D                     	;# 
  1443  000E                     	;# 
  1444  0011                     	;# 
  1445  0012                     	;# 
  1446  0013                     	;# 
  1447  0014                     	;# 
  1448  0015                     	;# 
  1449  0016                     	;# 
  1450  0016                     	;# 
  1451  0017                     	;# 
  1452  0018                     	;# 
  1453  0019                     	;# 
  1454  001A                     	;# 
  1455  001B                     	;# 
  1456  001C                     	;# 
  1457  001E                     	;# 
  1458  001F                     	;# 
  1459  008C                     	;# 
  1460  008D                     	;# 
  1461  008E                     	;# 
  1462  0091                     	;# 
  1463  0092                     	;# 
  1464  0093                     	;# 
  1465  0094                     	;# 
  1466  0095                     	;# 
  1467  0096                     	;# 
  1468  0097                     	;# 
  1469  0098                     	;# 
  1470  0099                     	;# 
  1471  009A                     	;# 
  1472  009B                     	;# 
  1473  009B                     	;# 
  1474  009C                     	;# 
  1475  009D                     	;# 
  1476  009E                     	;# 
  1477  010C                     	;# 
  1478  010D                     	;# 
  1479  010E                     	;# 
  1480  0111                     	;# 
  1481  0112                     	;# 
  1482  0113                     	;# 
  1483  0114                     	;# 
  1484  0115                     	;# 
  1485  0116                     	;# 
  1486  0117                     	;# 
  1487  0118                     	;# 
  1488  0119                     	;# 
  1489  011A                     	;# 
  1490  011B                     	;# 
  1491  011D                     	;# 
  1492  011E                     	;# 
  1493  018C                     	;# 
  1494  018D                     	;# 
  1495  018E                     	;# 
  1496  0191                     	;# 
  1497  0191                     	;# 
  1498  0192                     	;# 
  1499  0193                     	;# 
  1500  0193                     	;# 
  1501  0193                     	;# 
  1502  0194                     	;# 
  1503  0195                     	;# 
  1504  0196                     	;# 
  1505  0199                     	;# 
  1506  019A                     	;# 
  1507  019B                     	;# 
  1508  019B                     	;# 
  1509  019C                     	;# 
  1510  019D                     	;# 
  1511  019E                     	;# 
  1512  019F                     	;# 
  1513  020C                     	;# 
  1514  020D                     	;# 
  1515  020E                     	;# 
  1516  0211                     	;# 
  1517  0211                     	;# 
  1518  0212                     	;# 
  1519  0212                     	;# 
  1520  0213                     	;# 
  1521  0213                     	;# 
  1522  0214                     	;# 
  1523  0214                     	;# 
  1524  0215                     	;# 
  1525  0215                     	;# 
  1526  0215                     	;# 
  1527  0216                     	;# 
  1528  0216                     	;# 
  1529  0217                     	;# 
  1530  0217                     	;# 
  1531  0219                     	;# 
  1532  021A                     	;# 
  1533  021B                     	;# 
  1534  021C                     	;# 
  1535  021D                     	;# 
  1536  021E                     	;# 
  1537  021F                     	;# 
  1538  0291                     	;# 
  1539  0291                     	;# 
  1540  0292                     	;# 
  1541  0293                     	;# 
  1542  0294                     	;# 
  1543  0295                     	;# 
  1544  0295                     	;# 
  1545  0296                     	;# 
  1546  0298                     	;# 
  1547  0298                     	;# 
  1548  0299                     	;# 
  1549  029A                     	;# 
  1550  029B                     	;# 
  1551  029C                     	;# 
  1552  029D                     	;# 
  1553  029E                     	;# 
  1554  0311                     	;# 
  1555  0311                     	;# 
  1556  0312                     	;# 
  1557  0313                     	;# 
  1558  0318                     	;# 
  1559  0318                     	;# 
  1560  0319                     	;# 
  1561  031A                     	;# 
  1562  038C                     	;# 
  1563  038D                     	;# 
  1564  038E                     	;# 
  1565  0391                     	;# 
  1566  0392                     	;# 
  1567  0393                     	;# 
  1568  0394                     	;# 
  1569  0395                     	;# 
  1570  0396                     	;# 
  1571  039A                     	;# 
  1572  039C                     	;# 
  1573  039D                     	;# 
  1574  039E                     	;# 
  1575  039F                     	;# 
  1576  0415                     	;# 
  1577  0416                     	;# 
  1578  0417                     	;# 
  1579  041C                     	;# 
  1580  041D                     	;# 
  1581  041E                     	;# 
  1582  0FE4                     	;# 
  1583  0FE5                     	;# 
  1584  0FE6                     	;# 
  1585  0FE7                     	;# 
  1586  0FE8                     	;# 
  1587  0FE9                     	;# 
  1588  0FEA                     	;# 
  1589  0FEB                     	;# 
  1590  0FED                     	;# 
  1591  0FEE                     	;# 
  1592  0FEF                     	;# 
  1593  0000                     	;# 
  1594  0001                     	;# 
  1595  0002                     	;# 
  1596  0003                     	;# 
  1597  0004                     	;# 
  1598  0005                     	;# 
  1599  0006                     	;# 
  1600  0007                     	;# 
  1601  0008                     	;# 
  1602  0009                     	;# 
  1603  000A                     	;# 
  1604  000B                     	;# 
  1605  000C                     	;# 
  1606  000D                     	;# 
  1607  000E                     	;# 
  1608  0011                     	;# 
  1609  0012                     	;# 
  1610  0013                     	;# 
  1611  0014                     	;# 
  1612  0015                     	;# 
  1613  0016                     	;# 
  1614  0016                     	;# 
  1615  0017                     	;# 
  1616  0018                     	;# 
  1617  0019                     	;# 
  1618  001A                     	;# 
  1619  001B                     	;# 
  1620  001C                     	;# 
  1621  001E                     	;# 
  1622  001F                     	;# 
  1623  008C                     	;# 
  1624  008D                     	;# 
  1625  008E                     	;# 
  1626  0091                     	;# 
  1627  0092                     	;# 
  1628  0093                     	;# 
  1629  0094                     	;# 
  1630  0095                     	;# 
  1631  0096                     	;# 
  1632  0097                     	;# 
  1633  0098                     	;# 
  1634  0099                     	;# 
  1635  009A                     	;# 
  1636  009B                     	;# 
  1637  009B                     	;# 
  1638  009C                     	;# 
  1639  009D                     	;# 
  1640  009E                     	;# 
  1641  010C                     	;# 
  1642  010D                     	;# 
  1643  010E                     	;# 
  1644  0111                     	;# 
  1645  0112                     	;# 
  1646  0113                     	;# 
  1647  0114                     	;# 
  1648  0115                     	;# 
  1649  0116                     	;# 
  1650  0117                     	;# 
  1651  0118                     	;# 
  1652  0119                     	;# 
  1653  011A                     	;# 
  1654  011B                     	;# 
  1655  011D                     	;# 
  1656  011E                     	;# 
  1657  018C                     	;# 
  1658  018D                     	;# 
  1659  018E                     	;# 
  1660  0191                     	;# 
  1661  0191                     	;# 
  1662  0192                     	;# 
  1663  0193                     	;# 
  1664  0193                     	;# 
  1665  0193                     	;# 
  1666  0194                     	;# 
  1667  0195                     	;# 
  1668  0196                     	;# 
  1669  0199                     	;# 
  1670  019A                     	;# 
  1671  019B                     	;# 
  1672  019B                     	;# 
  1673  019C                     	;# 
  1674  019D                     	;# 
  1675  019E                     	;# 
  1676  019F                     	;# 
  1677  020C                     	;# 
  1678  020D                     	;# 
  1679  020E                     	;# 
  1680  0211                     	;# 
  1681  0211                     	;# 
  1682  0212                     	;# 
  1683  0212                     	;# 
  1684  0213                     	;# 
  1685  0213                     	;# 
  1686  0214                     	;# 
  1687  0214                     	;# 
  1688  0215                     	;# 
  1689  0215                     	;# 
  1690  0215                     	;# 
  1691  0216                     	;# 
  1692  0216                     	;# 
  1693  0217                     	;# 
  1694  0217                     	;# 
  1695  0219                     	;# 
  1696  021A                     	;# 
  1697  021B                     	;# 
  1698  021C                     	;# 
  1699  021D                     	;# 
  1700  021E                     	;# 
  1701  021F                     	;# 
  1702  0291                     	;# 
  1703  0291                     	;# 
  1704  0292                     	;# 
  1705  0293                     	;# 
  1706  0294                     	;# 
  1707  0295                     	;# 
  1708  0295                     	;# 
  1709  0296                     	;# 
  1710  0298                     	;# 
  1711  0298                     	;# 
  1712  0299                     	;# 
  1713  029A                     	;# 
  1714  029B                     	;# 
  1715  029C                     	;# 
  1716  029D                     	;# 
  1717  029E                     	;# 
  1718  0311                     	;# 
  1719  0311                     	;# 
  1720  0312                     	;# 
  1721  0313                     	;# 
  1722  0318                     	;# 
  1723  0318                     	;# 
  1724  0319                     	;# 
  1725  031A                     	;# 
  1726  038C                     	;# 
  1727  038D                     	;# 
  1728  038E                     	;# 
  1729  0391                     	;# 
  1730  0392                     	;# 
  1731  0393                     	;# 
  1732  0394                     	;# 
  1733  0395                     	;# 
  1734  0396                     	;# 
  1735  039A                     	;# 
  1736  039C                     	;# 
  1737  039D                     	;# 
  1738  039E                     	;# 
  1739  039F                     	;# 
  1740  0415                     	;# 
  1741  0416                     	;# 
  1742  0417                     	;# 
  1743  041C                     	;# 
  1744  041D                     	;# 
  1745  041E                     	;# 
  1746  0FE4                     	;# 
  1747  0FE5                     	;# 
  1748  0FE6                     	;# 
  1749  0FE7                     	;# 
  1750  0FE8                     	;# 
  1751  0FE9                     	;# 
  1752  0FEA                     	;# 
  1753  0FEB                     	;# 
  1754  0FED                     	;# 
  1755  0FEE                     	;# 
  1756  0FEF                     	;# 
  1757                           
  1758                           	psect	idataCOMMON
  1759  0003                     __pidataCOMMON:	
  1760                           
  1761                           ;initializer for _I2C_slaveWriteData
  1762  0003  3455               	retlw	85
  1763                           
  1764                           	psect	idataBANK0
  1765  0DA3                     __pidataBANK0:	
  1766                           
  1767                           ;initializer for _tmr_scaler
  1768  0DA3  3401               	retlw	1
  1769                           
  1770                           ;initializer for _threshold
  1771  0DA4  3432               	retlw	50
  1772                           
  1773                           ;initializer for _BACKPLANE_SLAVE_ADDRESS
  1774  0DA5  3401               	retlw	1
  1775                           
  1776                           ;initializer for _type_no_data
  1777  0DA6  3406               	retlw	6
  1778                           
  1779                           	psect	idataBANK1
  1780  0002                     __pidataBANK1:	
  1781                           
  1782                           ;initializer for _continuity
  1783  0002  3403               	retlw	3
  1784                           
  1785                           	psect	stringtext
  1786  03CF                     __pstringtext:	
  1787  03CF                     _dpowers:	
  1788  03CF  3401               	retlw	1
  1789  03D0  3400               	retlw	0
  1790  03D1  340A               	retlw	10
  1791  03D2  3400               	retlw	0
  1792  03D3  3464               	retlw	100
  1793  03D4  3400               	retlw	0
  1794  03D5  34E8               	retlw	232
  1795  03D6  3403               	retlw	3
  1796  03D7  3410               	retlw	16
  1797  03D8  3427               	retlw	39
  1798  03D9                     __end_of_dpowers:	
  1799  03D9                     STR_36:	
  1800  03D9  3449               	retlw	73	;'I'
  1801  03DA  344C               	retlw	76	;'L'
  1802  03DB  344C               	retlw	76	;'L'
  1803  03DC  3445               	retlw	69	;'E'
  1804  03DD  3447               	retlw	71	;'G'
  1805  03DE  3441               	retlw	65	;'A'
  1806  03DF  344C               	retlw	76	;'L'
  1807  03E0  345F               	retlw	95	;'_'
  1808  03E1  3454               	retlw	84	;'T'
  1809  03E2  3459               	retlw	89	;'Y'
  1810  03E3  3450               	retlw	80	;'P'
  1811  03E4  3445               	retlw	69	;'E'
  1812  03E5  340A               	retlw	10
  1813  03E6  3400               	retlw	0
  1814  03E7                     STR_1:	
  1815  03E7  3441               	retlw	65	;'A'
  1816  03E8  3431               	retlw	49	;'1'
  1817  03E9  3433               	retlw	51	;'3'
  1818  03EA  3432               	retlw	50	;'2'
  1819  03EB  3434               	retlw	52	;'4'
  1820  03EC  344C               	retlw	76	;'L'
  1821  03ED  3455               	retlw	85	;'U'
  1822  03EE  3441               	retlw	65	;'A'
  1823  03EF  345F               	retlw	95	;'_'
  1824  03F0  3454               	retlw	84	;'T'
  1825  03F1  3400               	retlw	0
  1826  03F2                     STR_16:	
  1827  03F2  3424               	retlw	36	;'$'
  1828  03F3  343A               	retlw	58	;':'
  1829  03F4  3452               	retlw	82	;'R'
  1830  03F5  3444               	retlw	68	;'D'
  1831  03F6  3441               	retlw	65	;'A'
  1832  03F7  343A               	retlw	58	;':'
  1833  03F8  3425               	retlw	37	;'%'
  1834  03F9  3464               	retlw	100	;'d'
  1835  03FA  340A               	retlw	10
  1836  03FB  3400               	retlw	0
  1837  03FC                     STR_13:	
  1838  03FC  3424               	retlw	36	;'$'
  1839  03FD  343A               	retlw	58	;':'
  1840  03FE  3447               	retlw	71	;'G'
  1841  03FF  3445               	retlw	69	;'E'
  1842  0400  3454               	retlw	84	;'T'
  1843  0401  343A               	retlw	58	;':'
  1844  0402  3425               	retlw	37	;'%'
  1845  0403  3464               	retlw	100	;'d'
  1846  0404  340A               	retlw	10
  1847  0405  3400               	retlw	0
  1848  0406                     STR_34:	
  1849  0406  342D               	retlw	45	;'-'
  1850  0407  3425               	retlw	37	;'%'
  1851  0408  3464               	retlw	100	;'d'
  1852  0409  342E               	retlw	46	;'.'
  1853  040A  3425               	retlw	37	;'%'
  1854  040B  3430               	retlw	48	;'0'
  1855  040C  3432               	retlw	50	;'2'
  1856  040D  3464               	retlw	100	;'d'
  1857  040E  340A               	retlw	10
  1858  040F  3400               	retlw	0
  1859  0410                     STR_5:	
  1860  0410  3424               	retlw	36	;'$'
  1861  0411  343A               	retlw	58	;':'
  1862  0412  3457               	retlw	87	;'W'
  1863  0413  3448               	retlw	72	;'H'
  1864  0414  344F               	retlw	79	;'O'
  1865  0415  343A               	retlw	58	;':'
  1866  0416  3425               	retlw	37	;'%'
  1867  0417  3473               	retlw	115	;'s'
  1868  0418  340A               	retlw	10
  1869  0419  3400               	retlw	0
  1870  041A                     STR_9:	
  1871  041A  342A               	retlw	42	;'*'
  1872  041B  343A               	retlw	58	;':'
  1873  041C  3453               	retlw	83	;'S'
  1874  041D  3454               	retlw	84	;'T'
  1875  041E  3450               	retlw	80	;'P'
  1876  041F  343A               	retlw	58	;':'
  1877  0420  3425               	retlw	37	;'%'
  1878  0421  3473               	retlw	115	;'s'
  1879  0422  340A               	retlw	10
  1880  0423  3400               	retlw	0
  1881  0424                     STR_32:	
  1882  0424  342D               	retlw	45	;'-'
  1883  0425  3425               	retlw	37	;'%'
  1884  0426  3464               	retlw	100	;'d'
  1885  0427  342E               	retlw	46	;'.'
  1886  0428  3425               	retlw	37	;'%'
  1887  0429  3430               	retlw	48	;'0'
  1888  042A  3432               	retlw	50	;'2'
  1889  042B  3464               	retlw	100	;'d'
  1890  042C  342C               	retlw	44	;','
  1891  042D  3400               	retlw	0
  1892  042E                     STR_24:	
  1893  042E  3455               	retlw	85	;'U'
  1894  042F  3449               	retlw	73	;'I'
  1895  0430  344E               	retlw	78	;'N'
  1896  0431  3454               	retlw	84	;'T'
  1897  0432  3431               	retlw	49	;'1'
  1898  0433  3436               	retlw	54	;'6'
  1899  0434  345F               	retlw	95	;'_'
  1900  0435  3454               	retlw	84	;'T'
  1901  0436  343A               	retlw	58	;':'
  1902  0437  3400               	retlw	0
  1903  0438                     STR_35:	
  1904  0438  344E               	retlw	78	;'N'
  1905  0439  344F               	retlw	79	;'O'
  1906  043A  345F               	retlw	95	;'_'
  1907  043B  3444               	retlw	68	;'D'
  1908  043C  3441               	retlw	65	;'A'
  1909  043D  3454               	retlw	84	;'T'
  1910  043E  3441               	retlw	65	;'A'
  1911  043F  340A               	retlw	10
  1912  0440  3400               	retlw	0
  1913  0441                     STR_18:	
  1914  0441  3455               	retlw	85	;'U'
  1915  0442  3449               	retlw	73	;'I'
  1916  0443  344E               	retlw	78	;'N'
  1917  0444  3454               	retlw	84	;'T'
  1918  0445  3438               	retlw	56	;'8'
  1919  0446  345F               	retlw	95	;'_'
  1920  0447  3454               	retlw	84	;'T'
  1921  0448  343A               	retlw	58	;':'
  1922  0449  3400               	retlw	0
  1923  044A                     STR_30:	
  1924  044A  3446               	retlw	70	;'F'
  1925  044B  344C               	retlw	76	;'L'
  1926  044C  344F               	retlw	79	;'O'
  1927  044D  3441               	retlw	65	;'A'
  1928  044E  3454               	retlw	84	;'T'
  1929  044F  343A               	retlw	58	;':'
  1930  0450  3400               	retlw	0
  1931  0451                     STR_2:	
  1932  0451  3428               	retlw	40	;'('
  1933  0452  346E               	retlw	110	;'n'
  1934  0453  3475               	retlw	117	;'u'
  1935  0454  346C               	retlw	108	;'l'
  1936  0455  346C               	retlw	108	;'l'
  1937  0456  3429               	retlw	41	;')'
  1938  0457  3400               	retlw	0
  1939  0458                     STR_17:	
  1940  0458  3425               	retlw	37	;'%'
  1941  0459  3425               	retlw	37	;'%'
  1942  045A  3425               	retlw	37	;'%'
  1943  045B  3464               	retlw	100	;'d'
  1944  045C  343A               	retlw	58	;':'
  1945  045D  3400               	retlw	0
  1946  045E                     STR_3:	
  1947  045E  3423               	retlw	35	;'#'
  1948  045F  3425               	retlw	37	;'%'
  1949  0460  3473               	retlw	115	;'s'
  1950  0461  340A               	retlw	10
  1951  0462  3400               	retlw	0
  1952  0463                     STR_20:	
  1953  0463  3425               	retlw	37	;'%'
  1954  0464  3475               	retlw	117	;'u'
  1955  0465  340A               	retlw	10
  1956  0466  3400               	retlw	0
  1957  0467                     STR_22:	
  1958  0467  3425               	retlw	37	;'%'
  1959  0468  3464               	retlw	100	;'d'
  1960  0469  342C               	retlw	44	;','
  1961  046A  3400               	retlw	0
  1962  046B                     STR_19:	
  1963  046B  3425               	retlw	37	;'%'
  1964  046C  3475               	retlw	117	;'u'
  1965  046D  342C               	retlw	44	;','
  1966  046E  3400               	retlw	0
  1967  046F                     STR_15:	
  1968  046F  3452               	retlw	82	;'R'
  1969  0470  3444               	retlw	68	;'D'
  1970  0471  3441               	retlw	65	;'A'
  1971  0472  3400               	retlw	0
  1972  0473                     STR_14:	
  1973  0473  3457               	retlw	87	;'W'
  1974  0474  3444               	retlw	68	;'D'
  1975  0475  3441               	retlw	65	;'A'
  1976  0476  3400               	retlw	0
  1977  0477                     STR_7:	
  1978  0477  3453               	retlw	83	;'S'
  1979  0478  3454               	retlw	84	;'T'
  1980  0479  3441               	retlw	65	;'A'
  1981  047A  3400               	retlw	0
  1982  047B                     STR_10:	
  1983  047B  3441               	retlw	65	;'A'
  1984  047C  3443               	retlw	67	;'C'
  1985  047D  344B               	retlw	75	;'K'
  1986  047E  3400               	retlw	0
  1987  047F                     STR_4:	
  1988  047F  3457               	retlw	87	;'W'
  1989  0480  3448               	retlw	72	;'H'
  1990  0481  344F               	retlw	79	;'O'
  1991  0482  3400               	retlw	0
  1992  0483                     STR_8:	
  1993  0483  3453               	retlw	83	;'S'
  1994  0484  3454               	retlw	84	;'T'
  1995  0485  3450               	retlw	80	;'P'
  1996  0486  3400               	retlw	0
  1997  0487                     STR_12:	
  1998  0487  3447               	retlw	71	;'G'
  1999  0488  3445               	retlw	69	;'E'
  2000  0489  3454               	retlw	84	;'T'
  2001  048A  3400               	retlw	0
  2002  048B                     STR_11:	
  2003  048B  3453               	retlw	83	;'S'
  2004  048C  3445               	retlw	69	;'E'
  2005  048D  3454               	retlw	84	;'T'
  2006  048E  3400               	retlw	0
  2007  048F                     STR_6:	
  2008  048F  3453               	retlw	83	;'S'
  2009  0490  3441               	retlw	65	;'A'
  2010  0491  3456               	retlw	86	;'V'
  2011  0492  3400               	retlw	0
  2012  03F8                     
  2013                           ; #config settings
  2014  0000                     
  2015                           	psect	nvBANK1
  2016  00D7                     __pnvBANK1:	
  2017  00D7                     _device_id_:	
  2018  00D7                     	ds	2
  2019  00D9                     _PROTOCOL_Set_Handler:	
  2020  00D9                     	ds	2
  2021  00DB                     _PROTOCOL_Stop_Handler:	
  2022  00DB                     	ds	2
  2023  00DD                     _PROTOCOL_Start_Handler:	
  2024  00DD                     	ds	2
  2025  0015                     _TMR0	set	21
  2026  000B                     _INTCONbits	set	11
  2027  0011                     _PIR1bits	set	17
  2028  005A                     _TMR0IF	set	90
  2029  0095                     _OPTION_REG	set	149
  2030  009D                     _ADCON0bits	set	157
  2031  009C                     _ADRESH	set	156
  2032  009B                     _ADRESL	set	155
  2033  009E                     _ADCON1	set	158
  2034  009D                     _ADCON0	set	157
  2035  0095                     _OPTION_REGbits	set	149
  2036  008E                     _TRISC	set	142
  2037  008D                     _TRISB	set	141
  2038  008C                     _TRISA	set	140
  2039  0097                     _WDTCON	set	151
  2040  0098                     _OSCTUNE	set	152
  2041  0099                     _OSCCON	set	153
  2042  0091                     _PIE1bits	set	145
  2043  010E                     _LATCbits	set	270
  2044  011D                     _APFCON0	set	285
  2045  011E                     _APFCON1	set	286
  2046  010E                     _LATC	set	270
  2047  010D                     _LATB	set	269
  2048  010C                     _LATA	set	268
  2049  0196                     _EECON2	set	406
  2050  0193                     _EEDATL	set	403
  2051  0194                     _EEDATH	set	404
  2052  0195                     _EECON1bits	set	405
  2053  0192                     _EEADRH	set	402
  2054  0191                     _EEADRL	set	401
  2055  018C                     _ANSELA	set	396
  2056  018D                     _ANSELB	set	397
  2057  018E                     _ANSELC	set	398
  2058  0199                     _RCREG	set	409
  2059  019D                     _RCSTAbits	set	413
  2060  019A                     _TXREG	set	410
  2061  019C                     _SPBRGH	set	412
  2062  019B                     _SPBRGL	set	411
  2063  019E                     _TXSTA	set	414
  2064  019D                     _RCSTA	set	413
  2065  019F                     _BAUDCON	set	415
  2066  020E                     _WPUC	set	526
  2067  020C                     _WPUA	set	524
  2068  020D                     _WPUB	set	525
  2069  0215                     _SSP1CON1bits	set	533
  2070  0216                     _SSP1CON2bits	set	534
  2071  0214                     _SSP1STATbits	set	532
  2072  0211                     _SSP1BUF	set	529
  2073  0212                     _SSP1ADD	set	530
  2074  0213                     _SSP1MSK	set	531
  2075  0217                     _SSP1CON3	set	535
  2076  0216                     _SSP1CON2	set	534
  2077  0215                     _SSP1CON1	set	533
  2078  0214                     _SSP1STAT	set	532
  2079                           
  2080                           	psect	cinit
  2081  0032                     start_initialization:	
  2082  0032                     __initialization:	
  2083                           
  2084                           ; Initialize objects allocated to COMMON
  2085  0032  3180  2003  3180   	fcall	__pidataCOMMON	;fetch initializer
  2086  0035  00FD               	movwf	__pdataCOMMON& (0+127)
  2087                           
  2088                           ; Initialize objects allocated to BANK0
  2089  0036  318D  25A3  3180   	fcall	__pidataBANK0	;fetch initializer
  2090  0039  00EC               	movwf	__pdataBANK0& (0+127)
  2091  003A  318D  25A4  3180   	fcall	__pidataBANK0+1	;fetch initializer
  2092  003D  00ED               	movwf	(__pdataBANK0+1)& (0+127)
  2093  003E  318D  25A5  3180   	fcall	__pidataBANK0+2	;fetch initializer
  2094  0041  00EE               	movwf	(__pdataBANK0+2)& (0+127)
  2095  0042  318D  25A6  3180   	fcall	__pidataBANK0+3	;fetch initializer
  2096  0045  00EF               	movwf	(__pdataBANK0+3)& (0+127)
  2097                           
  2098                           ; Initialize objects allocated to BANK1
  2099  0046  0021               	movlb	1	; select bank1
  2100  0047  3180  2002  3180   	fcall	__pidataBANK1	;fetch initializer
  2101  004A  00DF               	movwf	__pdataBANK1& (0+127)
  2102                           
  2103                           ; Clear objects allocated to COMMON
  2104  004B  01FA               	clrf	__pbssCOMMON& (0+127)
  2105  004C  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
  2106  004D  01FC               	clrf	(__pbssCOMMON+2)& (0+127)
  2107                           
  2108                           ; Clear objects allocated to BANK0
  2109  004E  3050               	movlw	low __pbssBANK0
  2110  004F  0084               	movwf	4
  2111  0050  3000               	movlw	high __pbssBANK0
  2112  0051  0085               	movwf	5
  2113  0052  301C               	movlw	28
  2114  0053  318D  25AD  3180   	fcall	clear_ram0
  2115                           
  2116                           ; Clear objects allocated to BANK1
  2117  0056  30A0               	movlw	low __pbssBANK1
  2118  0057  0084               	movwf	4
  2119  0058  3000               	movlw	high __pbssBANK1
  2120  0059  0085               	movwf	5
  2121  005A  3037               	movlw	55
  2122  005B  318D  25AD  3180   	fcall	clear_ram0
  2123                           
  2124                           ; Clear objects allocated to BANK2
  2125  005E  3020               	movlw	low __pbssBANK2
  2126  005F  0084               	movwf	4
  2127  0060  3001               	movlw	high __pbssBANK2
  2128  0061  0085               	movwf	5
  2129  0062  3030               	movlw	48
  2130  0063  318D  25AD  3180   	fcall	clear_ram0
  2131                           
  2132                           ; Clear objects allocated to BANK3
  2133  0066  30A0               	movlw	low __pbssBANK3
  2134  0067  0084               	movwf	4
  2135  0068  3001               	movlw	high __pbssBANK3
  2136  0069  0085               	movwf	5
  2137  006A  3030               	movlw	48
  2138  006B  318D  25AD         	fcall	clear_ram0
  2139  006D                     end_of_initialization:	
  2140                           ;End of C runtime variable initialization code
  2141                           
  2142  006D                     __end_of__initialization:	
  2143  006D  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2144  006E  0020               	movlb	0
  2145  006F  3187  2F7F         	ljmp	_main	;jump to C main() function
  2146                           
  2147                           	psect	bssCOMMON
  2148  007A                     __pbssCOMMON:	
  2149  007A                     _eusartTxBufferRemaining:	
  2150  007A                     	ds	1
  2151  007B                     _eusartTxTail:	
  2152  007B                     	ds	1
  2153  007C                     _eusartTxHead:	
  2154  007C                     	ds	1
  2155                           
  2156                           	psect	dataCOMMON
  2157  007D                     __pdataCOMMON:	
  2158  007D                     _I2C_slaveWriteData:	
  2159  007D                     	ds	1
  2160                           
  2161                           	psect	bssBANK0
  2162  0050                     __pbssBANK0:	
  2163  0050                     _PROTOCOL_Inv_Handler:	
  2164  0050                     	ds	2
  2165  0052                     _j:	
  2166  0052                     	ds	1
  2167  0053                     _i:	
  2168  0053                     	ds	1
  2169  0054                     _backplane_slave_enabled:	
  2170  0054                     	ds	1
  2171  0055                     _tmr_overflow:	
  2172  0055                     	ds	1
  2173  0056                     _tmr_cnt:	
  2174  0056                     	ds	1
  2175  0057                     _sec_cnt:	
  2176  0057                     	ds	1
  2177  0058                     _invoked:	
  2178  0058                     	ds	1
  2179  0059                     _running:	
  2180  0059                     	ds	1
  2181  005A                     _locked:	
  2182  005A                     	ds	1
  2183  005B                     _value:	
  2184  005B                     	ds	1
  2185  005C                     _cnt:	
  2186  005C                     	ds	1
  2187  005D                     _slave_address:	
  2188  005D                     	ds	1
  2189  005E                     _on:	
  2190  005E                     	ds	1
  2191  005F                     _timer0ReloadVal:	
  2192  005F                     	ds	1
  2193  0060                     _eusartRxCount:	
  2194  0060                     	ds	1
  2195  0061                     _eusartRxTail:	
  2196  0061                     	ds	1
  2197  0062                     _eusartRxHead:	
  2198  0062                     	ds	1
  2199  0063                     I2C1_StatusCallback@ext_cnt:	
  2200  0063                     	ds	1
  2201  0064                     I2C1_StatusCallback@ext_len:	
  2202  0064                     	ds	1
  2203  0065                     I2C1_StatusCallback@next:	
  2204  0065                     	ds	1
  2205  0066                     I2C1_StatusCallback@slaveWriteType:	
  2206  0066                     	ds	1
  2207  0067                     _readbuf:	
  2208  0067                     	ds	5
  2209                           
  2210                           	psect	dataBANK0
  2211  006C                     __pdataBANK0:	
  2212  006C                     _tmr_scaler:	
  2213  006C                     	ds	1
  2214  006D                     _threshold:	
  2215  006D                     	ds	1
  2216  006E                     _BACKPLANE_SLAVE_ADDRESS:	
  2217  006E                     	ds	1
  2218  006F                     _type_no_data:	
  2219  006F                     	ds	1
  2220                           
  2221                           	psect	bssBANK1
  2222  00A0                     __pbssBANK1:	
  2223  00A0                     _eusartRxBuffer:	
  2224  00A0                     	ds	8
  2225  00A8                     _eusartTxBuffer:	
  2226  00A8                     	ds	8
  2227  00B0                     _float100:	
  2228  00B0                     	ds	2
  2229  00B2                     _PROTOCOL_Tick_Handler:	
  2230  00B2                     	ds	2
  2231  00B4                     _PROTOCOL_Extension_Handler:	
  2232  00B4                     	ds	2
  2233  00B6                     _PROTOCOL_Loop_Func:	
  2234  00B6                     	ds	2
  2235  00B8                     _count:	
  2236  00B8                     	ds	2
  2237  00BA                     _sum:	
  2238  00BA                     	ds	2
  2239  00BC                     _data:	
  2240  00BC                     	ds	1
  2241  00BD                     _readbuf_status:	
  2242  00BD                     	ds	1
  2243  00BE                     _sendbuf:	
  2244  00BE                     	ds	16
  2245  00CE                     PROTOCOL_Send_float@pbuf:	
  2246  00CE                     	ds	3
  2247  00D1                     PROTOCOL_Send_int16_t@pbuf:	
  2248  00D1                     	ds	2
  2249  00D3                     PROTOCOL_Send_uint16_t@pbuf:	
  2250  00D3                     	ds	2
  2251  00D5                     PROTOCOL_Send_int8_t@pbuf:	
  2252  00D5                     	ds	1
  2253  00D6                     PROTOCOL_Send_uint8_t@pbuf:	
  2254  00D6                     	ds	1
  2255                           
  2256                           	psect	dataBANK1
  2257  00DF                     __pdataBANK1:	
  2258  00DF                     _continuity:	
  2259  00DF                     	ds	1
  2260                           
  2261                           	psect	bssBANK2
  2262  0120                     __pbssBANK2:	
  2263  0120                     _buf:	
  2264  0120                     	ds	48
  2265                           
  2266                           	psect	bssBANK3
  2267  01A0                     __pbssBANK3:	
  2268  01A0                     I2C1_StatusCallback@ext_buf:	
  2269  01A0                     	ds	48
  2270                           
  2271                           	psect	clrtext
  2272  0DAD                     clear_ram0:	
  2273                           ;	Called with FSR0 containing the base address, and
  2274                           ;	WREG with the size to clear
  2275                           
  2276  0DAD  0064               	clrwdt	;clear the watchdog before getting into this loop
  2277  0DAE                     clrloop0:	
  2278  0DAE  0180               	clrf	0	;clear RAM location pointed to by FSR
  2279  0DAF  3101               	addfsr 0,1
  2280  0DB0  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2281  0DB1  2DAE               	goto	clrloop0	;have we reached the end yet?
  2282  0DB2  3400               	retlw	0	;all done for this memory range, return
  2283                           
  2284                           	psect	cstackCOMMON
  2285  0070                     __pcstackCOMMON:	
  2286  0070                     ?_isdigit:	
  2287  0070                     ?_PROTOCOL_Read_Device_Address:	
  2288                           ; 1 bit 
  2289                           
  2290  0070                     ?_I2C1_StatusCallback:	
  2291                           ; 1 bytes @ 0x0
  2292                           
  2293  0070                     ?_PROTOCOL_SET:	
  2294                           ; 1 bytes @ 0x0
  2295                           
  2296  0070                     ?_PROTOCOL_STA:	
  2297                           ; 1 bytes @ 0x0
  2298                           
  2299  0070                     ?_PROTOCOL_STP:	
  2300                           ; 1 bytes @ 0x0
  2301                           
  2302  0070                     ?_PROTOCOL_SAV:	
  2303                           ; 1 bytes @ 0x0
  2304                           
  2305  0070                     ?_PROTOCOL_INV:	
  2306                           ; 1 bytes @ 0x0
  2307                           
  2308  0070                     ??_PROTOCOL_INV:	
  2309                           ; 1 bytes @ 0x0
  2310                           
  2311  0070                     ?_PROTOCOL_RST:	
  2312                           ; 1 bytes @ 0x0
  2313                           
  2314  0070                     ??_PROTOCOL_RST:	
  2315                           ; 1 bytes @ 0x0
  2316                           
  2317  0070                     ?_PROTOCOL_Backplane_Slave_Enabled:	
  2318                           ; 1 bytes @ 0x0
  2319                           
  2320  0070                     ??_PROTOCOL_Backplane_Slave_Enabled:	
  2321                           ; 1 bytes @ 0x0
  2322                           
  2323  0070                     ?_PROTOCOL_Read_Lock:	
  2324                           ; 1 bytes @ 0x0
  2325                           
  2326  0070                     ??_PROTOCOL_Read_Lock:	
  2327                           ; 1 bytes @ 0x0
  2328                           
  2329  0070                     ?_PROTOCOL_EXT:	
  2330                           ; 1 bytes @ 0x0
  2331                           
  2332  0070                     ?_PROTOCOL_I2C_WHO:	
  2333                           ; 1 bytes @ 0x0
  2334                           
  2335  0070                     ??_PROTOCOL_I2C_WHO:	
  2336                           ; 1 bytes @ 0x0
  2337                           
  2338  0070                     ?_PROTOCOL_I2C_SEN:	
  2339                           ; 1 bytes @ 0x0
  2340                           
  2341  0070                     ??_PROTOCOL_I2C_SEN:	
  2342                           ; 1 bytes @ 0x0
  2343                           
  2344  0070                     ?_PROTOCOL_I2C_GET:	
  2345                           ; 1 bytes @ 0x0
  2346                           
  2347  0070                     ??_PROTOCOL_I2C_GET:	
  2348                           ; 1 bytes @ 0x0
  2349                           
  2350  0070                     ?_PIN_MANAGER_Initialize:	
  2351                           ; 1 bytes @ 0x0
  2352                           
  2353  0070                     ?_OSCILLATOR_Initialize:	
  2354                           ; 1 bytes @ 0x0
  2355                           
  2356  0070                     ?_WDT_Initialize:	
  2357                           ; 1 bytes @ 0x0
  2358                           
  2359  0070                     ?_ADC_Initialize:	
  2360                           ; 1 bytes @ 0x0
  2361                           
  2362  0070                     ?_TMR0_Initialize:	
  2363                           ; 1 bytes @ 0x0
  2364                           
  2365  0070                     ?_EUSART_Initialize:	
  2366                           ; 1 bytes @ 0x0
  2367                           
  2368  0070                     ?_EUSART_Transmit_ISR:	
  2369                           ; 1 bytes @ 0x0
  2370                           
  2371  0070                     ??_EUSART_Transmit_ISR:	
  2372                           ; 1 bytes @ 0x0
  2373                           
  2374  0070                     ?_EUSART_Receive_ISR:	
  2375                           ; 1 bytes @ 0x0
  2376                           
  2377  0070                     ??_EUSART_Receive_ISR:	
  2378                           ; 1 bytes @ 0x0
  2379                           
  2380  0070                     ?_PROTOCOL_Loop:	
  2381                           ; 1 bytes @ 0x0
  2382                           
  2383  0070                     ?_I2C1_Initialize:	
  2384                           ; 1 bytes @ 0x0
  2385                           
  2386  0070                     ?_I2C1_ISR:	
  2387                           ; 1 bytes @ 0x0
  2388                           
  2389  0070                     ?_INTERRUPT_InterruptManager:	
  2390                           ; 1 bytes @ 0x0
  2391                           
  2392  0070                     ?_EUSART_Read:	
  2393                           ; 1 bytes @ 0x0
  2394                           
  2395  0070                     ?_EUSART_Write:	
  2396                           ; 1 bytes @ 0x0
  2397                           
  2398  0070                     ?_putch:	
  2399                           ; 1 bytes @ 0x0
  2400                           
  2401  0070                     ?_DATAEE_ReadByte:	
  2402                           ; 1 bytes @ 0x0
  2403                           
  2404  0070                     ?_ADC_SelectChannel:	
  2405                           ; 1 bytes @ 0x0
  2406                           
  2407  0070                     ?_ADC_StartConversion:	
  2408                           ; 1 bytes @ 0x0
  2409                           
  2410  0070                     ?_ADC_IsConversionDone:	
  2411                           ; 1 bytes @ 0x0
  2412                           
  2413  0070                     ?_TMR0_HasOverflowOccured:	
  2414                           ; 1 bytes @ 0x0
  2415                           
  2416  0070                     ?_inv_handler:	
  2417                           ; 1 bytes @ 0x0
  2418                           
  2419  0070                     ?_loop_func:	
  2420                           ; 1 bytes @ 0x0
  2421                           
  2422  0070                     ?_main:	
  2423                           ; 1 bytes @ 0x0
  2424                           
  2425  0070                     ?_PROTOCOL_Write_Device_Address:	
  2426                           ; 1 bytes @ 0x0
  2427                           
  2428  0070                     ?i1_DATAEE_WriteByte:	
  2429                           ; 1 bytes @ 0x0
  2430                           
  2431  0070                     ?i1_PROTOCOL_STA:	
  2432                           ; 1 bytes @ 0x0
  2433                           
  2434  0070                     ??i1_PROTOCOL_STA:	
  2435                           ; 1 bytes @ 0x0
  2436                           
  2437  0070                     ?i1_PROTOCOL_STP:	
  2438                           ; 1 bytes @ 0x0
  2439                           
  2440  0070                     ??i1_PROTOCOL_STP:	
  2441                           ; 1 bytes @ 0x0
  2442                           
  2443  0070                     ?i1_PROTOCOL_SAV:	
  2444                           ; 1 bytes @ 0x0
  2445                           
  2446  0070                     ?i1_PROTOCOL_SET:	
  2447                           ; 1 bytes @ 0x0
  2448                           
  2449  0070                     ??i1_PROTOCOL_SET:	
  2450                           ; 1 bytes @ 0x0
  2451                           
  2452  0070                     ?i1_PROTOCOL_EXT:	
  2453                           ; 1 bytes @ 0x0
  2454                           
  2455  0070                     ??i1_PROTOCOL_EXT:	
  2456                           ; 1 bytes @ 0x0
  2457                           
  2458  0070                     i1DATAEE_WriteByte@bData:	
  2459                           ; 1 bytes @ 0x0
  2460                           
  2461                           
  2462                           ; 1 bytes @ 0x0
  2463  0070                     	ds	1
  2464  0071                     ??i1_DATAEE_WriteByte:	
  2465  0071                     PROTOCOL_I2C_SEN@pdata:	
  2466                           ; 1 bytes @ 0x1
  2467                           
  2468  0071                     i1DATAEE_WriteByte@bAdd:	
  2469                           ; 1 bytes @ 0x1
  2470                           
  2471  0071                     i1PROTOCOL_SET@value_:	
  2472                           ; 1 bytes @ 0x1
  2473                           
  2474                           
  2475                           ; 1 bytes @ 0x1
  2476  0071                     	ds	1
  2477  0072                     i1DATAEE_WriteByte@GIEBitValue:	
  2478                           
  2479                           ; 1 bytes @ 0x2
  2480  0072                     	ds	1
  2481  0073                     ??i1_PROTOCOL_SAV:	
  2482                           
  2483                           ; 1 bytes @ 0x3
  2484  0073                     	ds	1
  2485  0074                     ??_I2C1_StatusCallback:	
  2486                           
  2487                           ; 1 bytes @ 0x4
  2488  0074                     	ds	1
  2489  0075                     I2C1_StatusCallback@i2c_bus_state:	
  2490                           
  2491                           ; 1 bytes @ 0x5
  2492  0075                     	ds	1
  2493  0076                     I2C1_StatusCallback@pdata:	
  2494                           
  2495                           ; 1 bytes @ 0x6
  2496  0076                     	ds	1
  2497  0077                     ??_I2C1_ISR:	
  2498                           
  2499                           ; 1 bytes @ 0x7
  2500  0077                     	ds	1
  2501  0078                     I2C1_ISR@i2c_data:	
  2502                           
  2503                           ; 1 bytes @ 0x8
  2504  0078                     	ds	1
  2505  0079                     ??_INTERRUPT_InterruptManager:	
  2506                           
  2507                           ; 1 bytes @ 0x9
  2508  0079                     	ds	1
  2509                           
  2510                           	psect	cstackBANK0
  2511  0020                     __pcstackBANK0:	
  2512  0020                     ??_PROTOCOL_Read_Device_Address:	
  2513  0020                     ??_PROTOCOL_SET:	
  2514                           ; 1 bytes @ 0x0
  2515                           
  2516  0020                     ??_PROTOCOL_STA:	
  2517                           ; 1 bytes @ 0x0
  2518                           
  2519  0020                     ??_PROTOCOL_STP:	
  2520                           ; 1 bytes @ 0x0
  2521                           
  2522  0020                     ??_PROTOCOL_EXT:	
  2523                           ; 1 bytes @ 0x0
  2524                           
  2525  0020                     ??_PIN_MANAGER_Initialize:	
  2526                           ; 1 bytes @ 0x0
  2527                           
  2528  0020                     ??_OSCILLATOR_Initialize:	
  2529                           ; 1 bytes @ 0x0
  2530                           
  2531  0020                     ??_WDT_Initialize:	
  2532                           ; 1 bytes @ 0x0
  2533                           
  2534  0020                     ??_ADC_Initialize:	
  2535                           ; 1 bytes @ 0x0
  2536                           
  2537  0020                     ??_TMR0_Initialize:	
  2538                           ; 1 bytes @ 0x0
  2539                           
  2540  0020                     ??_EUSART_Initialize:	
  2541                           ; 1 bytes @ 0x0
  2542                           
  2543  0020                     ?_PROTOCOL_Set_Func:	
  2544                           ; 1 bytes @ 0x0
  2545                           
  2546  0020                     ??_isdigit:	
  2547                           ; 1 bytes @ 0x0
  2548                           
  2549  0020                     ??_I2C1_Initialize:	
  2550                           ; 1 bytes @ 0x0
  2551                           
  2552  0020                     ??_EUSART_Read:	
  2553                           ; 1 bytes @ 0x0
  2554                           
  2555  0020                     ??_EUSART_Write:	
  2556                           ; 1 bytes @ 0x0
  2557                           
  2558  0020                     ?_DATAEE_WriteByte:	
  2559                           ; 1 bytes @ 0x0
  2560                           
  2561  0020                     ??_DATAEE_ReadByte:	
  2562                           ; 1 bytes @ 0x0
  2563                           
  2564  0020                     ??_ADC_SelectChannel:	
  2565                           ; 1 bytes @ 0x0
  2566                           
  2567  0020                     ??_ADC_StartConversion:	
  2568                           ; 1 bytes @ 0x0
  2569                           
  2570  0020                     ??_ADC_IsConversionDone:	
  2571                           ; 1 bytes @ 0x0
  2572                           
  2573  0020                     ??_TMR0_HasOverflowOccured:	
  2574                           ; 1 bytes @ 0x0
  2575                           
  2576  0020                     ?_PROTOCOL_I2C_Set_TLV:	
  2577                           ; 1 bytes @ 0x0
  2578                           
  2579  0020                     ?_abs:	
  2580                           ; 1 bytes @ 0x0
  2581                           
  2582  0020                     ?_strncmp:	
  2583                           ; 2 bytes @ 0x0
  2584                           
  2585  0020                     ?_ADC_GetConversionResult:	
  2586                           ; 2 bytes @ 0x0
  2587                           
  2588  0020                     ?___wmul:	
  2589                           ; 2 bytes @ 0x0
  2590                           
  2591  0020                     ?___lwdiv:	
  2592                           ; 2 bytes @ 0x0
  2593                           
  2594  0020                     DATAEE_WriteByte@bData:	
  2595                           ; 2 bytes @ 0x0
  2596                           
  2597  0020                     DATAEE_ReadByte@bAdd:	
  2598                           ; 1 bytes @ 0x0
  2599                           
  2600  0020                     PROTOCOL_EXT@char_buf:	
  2601                           ; 1 bytes @ 0x0
  2602                           
  2603  0020                     PROTOCOL_I2C_Set_TLV@length:	
  2604                           ; 1 bytes @ 0x0
  2605                           
  2606  0020                     _isdigit$1250:	
  2607                           ; 1 bytes @ 0x0
  2608                           
  2609  0020                     PROTOCOL_Set_Func@loop_func:	
  2610                           ; 1 bytes @ 0x0
  2611                           
  2612  0020                     ___wmul@multiplier:	
  2613                           ; 2 bytes @ 0x0
  2614                           
  2615  0020                     abs@a:	
  2616                           ; 2 bytes @ 0x0
  2617                           
  2618  0020                     ___lwdiv@divisor:	
  2619                           ; 2 bytes @ 0x0
  2620                           
  2621  0020                     strncmp@s1:	
  2622                           ; 2 bytes @ 0x0
  2623                           
  2624                           
  2625                           ; 2 bytes @ 0x0
  2626  0020                     	ds	1
  2627  0021                     ?_PROTOCOL_Initialize:	
  2628  0021                     ??_DATAEE_WriteByte:	
  2629                           ; 1 bytes @ 0x1
  2630                           
  2631  0021                     EUSART_Read@readValue:	
  2632                           ; 1 bytes @ 0x1
  2633                           
  2634  0021                     EUSART_Write@txData:	
  2635                           ; 1 bytes @ 0x1
  2636                           
  2637  0021                     DATAEE_WriteByte@bAdd:	
  2638                           ; 1 bytes @ 0x1
  2639                           
  2640  0021                     ADC_SelectChannel@channel:	
  2641                           ; 1 bytes @ 0x1
  2642                           
  2643  0021                     PROTOCOL_SET@value_:	
  2644                           ; 1 bytes @ 0x1
  2645                           
  2646  0021                     PROTOCOL_I2C_Set_TLV@pbuffer:	
  2647                           ; 1 bytes @ 0x1
  2648                           
  2649  0021                     isdigit@c:	
  2650                           ; 1 bytes @ 0x1
  2651                           
  2652  0021                     PROTOCOL_Initialize@device_id:	
  2653                           ; 1 bytes @ 0x1
  2654                           
  2655                           
  2656                           ; 2 bytes @ 0x1
  2657  0021                     	ds	1
  2658  0022                     ??_abs:	
  2659  0022                     ??_PROTOCOL_Set_Func:	
  2660                           ; 1 bytes @ 0x2
  2661                           
  2662  0022                     ??_putch:	
  2663                           ; 1 bytes @ 0x2
  2664                           
  2665  0022                     ??_ADC_GetConversionResult:	
  2666                           ; 1 bytes @ 0x2
  2667                           
  2668  0022                     ??_PROTOCOL_I2C_Set_TLV:	
  2669                           ; 1 bytes @ 0x2
  2670                           
  2671  0022                     putch@txData:	
  2672                           ; 1 bytes @ 0x2
  2673                           
  2674  0022                     DATAEE_WriteByte@GIEBitValue:	
  2675                           ; 1 bytes @ 0x2
  2676                           
  2677  0022                     strncmp@s2:	
  2678                           ; 1 bytes @ 0x2
  2679                           
  2680  0022                     ___wmul@multiplicand:	
  2681                           ; 1 bytes @ 0x2
  2682                           
  2683  0022                     ___lwdiv@dividend:	
  2684                           ; 2 bytes @ 0x2
  2685                           
  2686                           
  2687                           ; 2 bytes @ 0x2
  2688  0022                     	ds	1
  2689  0023                     ??_PROTOCOL_SAV:	
  2690  0023                     ??_PROTOCOL_Write_Device_Address:	
  2691                           ; 1 bytes @ 0x3
  2692                           
  2693  0023                     PROTOCOL_Initialize@start_handler:	
  2694                           ; 1 bytes @ 0x3
  2695                           
  2696  0023                     PROTOCOL_I2C_Set_TLV@type:	
  2697                           ; 1 bytes @ 0x3
  2698                           
  2699  0023                     strncmp@len:	
  2700                           ; 1 bytes @ 0x3
  2701                           
  2702                           
  2703                           ; 2 bytes @ 0x3
  2704  0023                     	ds	1
  2705  0024                     ??_loop_func:	
  2706  0024                     ??___wmul:	
  2707                           ; 1 bytes @ 0x4
  2708                           
  2709  0024                     ??___lwdiv:	
  2710                           ; 1 bytes @ 0x4
  2711                           
  2712  0024                     PROTOCOL_Initialize@stop_handler:	
  2713                           ; 1 bytes @ 0x4
  2714                           
  2715  0024                     PROTOCOL_Write_Device_Address@device_id_i2c:	
  2716                           ; 1 bytes @ 0x4
  2717                           
  2718  0024                     PROTOCOL_I2C_Set_TLV@status:	
  2719                           ; 1 bytes @ 0x4
  2720                           
  2721  0024                     ___wmul@product:	
  2722                           ; 1 bytes @ 0x4
  2723                           
  2724                           
  2725                           ; 2 bytes @ 0x4
  2726  0024                     	ds	1
  2727  0025                     ??_strncmp:	
  2728  0025                     PROTOCOL_Initialize@set_handler:	
  2729                           ; 1 bytes @ 0x5
  2730                           
  2731  0025                     loop_func@out:	
  2732                           ; 1 bytes @ 0x5
  2733                           
  2734  0025                     ___lwdiv@quotient:	
  2735                           ; 2 bytes @ 0x5
  2736                           
  2737                           
  2738                           ; 2 bytes @ 0x5
  2739  0025                     	ds	1
  2740  0026                     ?_atoi:	
  2741  0026                     PROTOCOL_Initialize@inv_handler:	
  2742                           ; 2 bytes @ 0x6
  2743                           
  2744                           
  2745                           ; 2 bytes @ 0x6
  2746  0026                     	ds	1
  2747  0027                     ___lwdiv@counter:	
  2748  0027                     loop_func@v:	
  2749                           ; 1 bytes @ 0x7
  2750                           
  2751                           
  2752                           ; 2 bytes @ 0x7
  2753  0027                     	ds	1
  2754  0028                     ??_atoi:	
  2755  0028                     ?___lwmod:	
  2756                           ; 1 bytes @ 0x8
  2757                           
  2758  0028                     PROTOCOL_Initialize@scaler:	
  2759                           ; 2 bytes @ 0x8
  2760                           
  2761  0028                     ___lwmod@divisor:	
  2762                           ; 1 bytes @ 0x8
  2763                           
  2764                           
  2765                           ; 2 bytes @ 0x8
  2766  0028                     	ds	1
  2767  0029                     ??_PROTOCOL_Initialize:	
  2768                           
  2769                           ; 1 bytes @ 0x9
  2770  0029                     	ds	1
  2771  002A                     atoi@sign:	
  2772  002A                     ___lwmod@dividend:	
  2773                           ; 1 bytes @ 0xA
  2774                           
  2775                           
  2776                           ; 2 bytes @ 0xA
  2777  002A                     	ds	1
  2778  002B                     atoi@a:	
  2779                           
  2780                           ; 2 bytes @ 0xB
  2781  002B                     	ds	1
  2782  002C                     ??___lwmod:	
  2783                           
  2784                           ; 1 bytes @ 0xC
  2785  002C                     	ds	1
  2786  002D                     atoi@s:	
  2787  002D                     ___lwmod@counter:	
  2788                           ; 1 bytes @ 0xD
  2789                           
  2790                           
  2791                           ; 1 bytes @ 0xD
  2792  002D                     	ds	1
  2793  002E                     ?_printf:	
  2794  002E                     printf@f:	
  2795                           ; 2 bytes @ 0xE
  2796                           
  2797                           
  2798                           ; 2 bytes @ 0xE
  2799  002E                     	ds	4
  2800  0032                     ??_printf:	
  2801                           
  2802                           ; 1 bytes @ 0x12
  2803  0032                     	ds	4
  2804  0036                     printf@prec:	
  2805                           
  2806                           ; 1 bytes @ 0x16
  2807  0036                     	ds	1
  2808  0037                     printf@cp:	
  2809                           
  2810                           ; 2 bytes @ 0x17
  2811  0037                     	ds	2
  2812  0039                     printf@ap:	
  2813                           
  2814                           ; 1 bytes @ 0x19
  2815  0039                     	ds	1
  2816  003A                     printf@val:	
  2817                           
  2818                           ; 2 bytes @ 0x1A
  2819  003A                     	ds	2
  2820  003C                     printf@len:	
  2821                           
  2822                           ; 2 bytes @ 0x1C
  2823  003C                     	ds	2
  2824  003E                     printf@flag:	
  2825                           
  2826                           ; 1 bytes @ 0x1E
  2827  003E                     	ds	1
  2828  003F                     printf@width:	
  2829                           
  2830                           ; 2 bytes @ 0x1F
  2831  003F                     	ds	2
  2832  0041                     printf@c:	
  2833                           
  2834                           ; 1 bytes @ 0x21
  2835  0041                     	ds	1
  2836  0042                     ?_PROTOCOL_I2C_Send_uint16_t:	
  2837  0042                     PROTOCOL_I2C_Send_uint16_t@pbuffer:	
  2838                           ; 1 bytes @ 0x22
  2839                           
  2840                           
  2841                           ; 1 bytes @ 0x22
  2842  0042                     	ds	1
  2843  0043                     ??_PROTOCOL_I2C_Send_uint16_t:	
  2844                           
  2845                           ; 1 bytes @ 0x23
  2846  0043                     	ds	4
  2847  0047                     PROTOCOL_I2C_Send_uint16_t@length:	
  2848                           
  2849                           ; 1 bytes @ 0x27
  2850  0047                     	ds	1
  2851  0048                     ?_PROTOCOL_Send_uint16_t:	
  2852  0048                     PROTOCOL_Send_uint16_t@value:	
  2853                           ; 1 bytes @ 0x28
  2854                           
  2855                           
  2856                           ; 2 bytes @ 0x28
  2857  0048                     	ds	2
  2858  004A                     ??_PROTOCOL_Send_uint16_t:	
  2859                           
  2860                           ; 1 bytes @ 0x2A
  2861  004A                     	ds	1
  2862  004B                     ??_PROTOCOL_Loop:	
  2863  004B                     ??_inv_handler:	
  2864                           ; 1 bytes @ 0x2B
  2865                           
  2866                           
  2867                           ; 1 bytes @ 0x2B
  2868  004B                     	ds	2
  2869  004D                     PROTOCOL_Loop@c:	
  2870                           
  2871                           ; 1 bytes @ 0x2D
  2872  004D                     	ds	1
  2873  004E                     PROTOCOL_Loop@device_address:	
  2874                           
  2875                           ; 1 bytes @ 0x2E
  2876  004E                     	ds	1
  2877  004F                     ??_main:	
  2878                           
  2879                           ; 1 bytes @ 0x2F
  2880  004F                     	ds	1
  2881                           
  2882                           	psect	maintext
  2883  077F                     __pmaintext:	
  2884 ;;
  2885 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2886 ;;
  2887 ;; *************** function _main *****************
  2888 ;; Defined at:
  2889 ;;		line 78 in file "main.c"
  2890 ;; Parameters:    Size  Location     Type
  2891 ;;		None
  2892 ;; Auto vars:     Size  Location     Type
  2893 ;;		None
  2894 ;; Return value:  Size  Location     Type
  2895 ;;                  1    wreg      void 
  2896 ;; Registers used:
  2897 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2898 ;; Tracked objects:
  2899 ;;		On entry : B1F/0
  2900 ;;		On exit  : 0/0
  2901 ;;		Unchanged: 0/0
  2902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2903 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2904 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2905 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2906 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2907 ;;Total ram usage:        1 bytes
  2908 ;; Hardware stack levels required when called:   12
  2909 ;; This function calls:
  2910 ;;		_ADC_Initialize
  2911 ;;		_EUSART_Initialize
  2912 ;;		_I2C1_Initialize
  2913 ;;		_OSCILLATOR_Initialize
  2914 ;;		_PIN_MANAGER_Initialize
  2915 ;;		_PROTOCOL_Initialize
  2916 ;;		_PROTOCOL_Loop
  2917 ;;		_PROTOCOL_Set_Func
  2918 ;;		_TMR0_Initialize
  2919 ;;		_WDT_Initialize
  2920 ;; This function is called by:
  2921 ;;		Startup code after reset
  2922 ;; This function uses a non-reentrant model
  2923 ;;
  2924                           
  2925                           
  2926                           ;psect for function _main
  2927  077F                     _main:	
  2928                           
  2929                           ;main.c: 81: PROTOCOL_Initialize("A1324LUA_T", (0), (0), (0), inv_handler, 125);
  2930                           
  2931                           ;incstack = 0
  2932                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2933  077F  30E7               	movlw	low (STR_1| (0+32768))
  2934  0780  0020               	movlb	0	; select bank0
  2935  0781  00A1               	movwf	PROTOCOL_Initialize@device_id
  2936  0782  3083               	movlw	high (STR_1| (0+32768))
  2937  0783  00A2               	movwf	PROTOCOL_Initialize@device_id+1
  2938  0784  01A3               	clrf	PROTOCOL_Initialize@start_handler
  2939  0785  01A4               	clrf	PROTOCOL_Initialize@stop_handler
  2940  0786  01A5               	clrf	PROTOCOL_Initialize@set_handler
  2941  0787  300B               	movlw	low _inv_handler
  2942  0788  00A6               	movwf	PROTOCOL_Initialize@inv_handler
  2943  0789  300E               	movlw	high _inv_handler
  2944  078A  00A7               	movwf	PROTOCOL_Initialize@inv_handler+1
  2945  078B  307D               	movlw	125
  2946  078C  00CF               	movwf	??_main
  2947  078D  084F               	movf	??_main,w
  2948  078E  00A8               	movwf	PROTOCOL_Initialize@scaler
  2949  078F  3186  26B9  3187   	fcall	_PROTOCOL_Initialize
  2950                           
  2951                           ;main.c: 82: PROTOCOL_Set_Func(loop_func);
  2952  0792  3057               	movlw	low _loop_func
  2953  0793  0020               	movlb	0	; select bank0
  2954  0794  00A0               	movwf	PROTOCOL_Set_Func@loop_func
  2955  0795  3005               	movlw	high _loop_func
  2956  0796  00A1               	movwf	PROTOCOL_Set_Func@loop_func+1
  2957  0797  318D  25EB  3187   	fcall	_PROTOCOL_Set_Func
  2958                           
  2959                           ;main.c: 85: PIN_MANAGER_Initialize();
  2960  079A  318F  2706  3187   	fcall	_PIN_MANAGER_Initialize
  2961                           
  2962                           ;main.c: 86: OSCILLATOR_Initialize();
  2963  079D  3187  27FB  3187   	fcall	_OSCILLATOR_Initialize
  2964                           
  2965                           ;main.c: 87: WDT_Initialize();
  2966  07A0  318D  259F  3187   	fcall	_WDT_Initialize
  2967                           
  2968                           ;main.c: 88: ADC_Initialize();
  2969  07A3  318D  25C8  3187   	fcall	_ADC_Initialize
  2970                           
  2971                           ;main.c: 89: TMR0_Initialize();
  2972  07A6  318E  2619  3187   	fcall	_TMR0_Initialize
  2973                           
  2974                           ;main.c: 92: (INTCONbits.GIE = 1);
  2975  07A9  178B               	bsf	11,7	;volatile
  2976                           
  2977                           ;main.c: 93: (INTCONbits.PEIE = 1);
  2978  07AA  170B               	bsf	11,6	;volatile
  2979                           
  2980                           ;main.c: 96: EUSART_Initialize();
  2981  07AB  318E  267D  3187   	fcall	_EUSART_Initialize
  2982                           
  2983                           ;main.c: 99: I2C1_Initialize();
  2984  07AE  318F  2744  3187   	fcall	_I2C1_Initialize
  2985                           
  2986                           ;main.c: 102: PROTOCOL_Loop();
  2987  07B1  3182  2246         	fcall	_PROTOCOL_Loop
  2988  07B3  3180  2830         	ljmp	start
  2989  07B5                     __end_of_main:	
  2990                           
  2991                           	psect	text1
  2992  0D9F                     __ptext1:	
  2993 ;; *************** function _WDT_Initialize *****************
  2994 ;; Defined at:
  2995 ;;		line 89 in file "mcc_generated_files/mcc.c"
  2996 ;; Parameters:    Size  Location     Type
  2997 ;;		None
  2998 ;; Auto vars:     Size  Location     Type
  2999 ;;		None
  3000 ;; Return value:  Size  Location     Type
  3001 ;;                  1    wreg      void 
  3002 ;; Registers used:
  3003 ;;		wreg
  3004 ;; Tracked objects:
  3005 ;;		On entry : 0/0
  3006 ;;		On exit  : 0/0
  3007 ;;		Unchanged: 0/0
  3008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3010 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3012 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3013 ;;Total ram usage:        0 bytes
  3014 ;; Hardware stack levels used:    1
  3015 ;; Hardware stack levels required when called:    5
  3016 ;; This function calls:
  3017 ;;		Nothing
  3018 ;; This function is called by:
  3019 ;;		_main
  3020 ;;		_SYSTEM_Initialize
  3021 ;; This function uses a non-reentrant model
  3022 ;;
  3023                           
  3024                           
  3025                           ;psect for function _WDT_Initialize
  3026  0D9F                     _WDT_Initialize:	
  3027                           
  3028                           ;mcc.c: 92: WDTCON = 0x16;
  3029                           
  3030                           ;incstack = 0
  3031                           ; Regs used in _WDT_Initialize: [wreg]
  3032  0D9F  3016               	movlw	22
  3033  0DA0  0021               	movlb	1	; select bank1
  3034  0DA1  0097               	movwf	23	;volatile
  3035  0DA2  0008               	return
  3036  0DA3                     __end_of_WDT_Initialize:	
  3037                           
  3038                           	psect	text2
  3039  0E19                     __ptext2:	
  3040 ;; *************** function _TMR0_Initialize *****************
  3041 ;; Defined at:
  3042 ;;		line 62 in file "mcc_generated_files/tmr0.c"
  3043 ;; Parameters:    Size  Location     Type
  3044 ;;		None
  3045 ;; Auto vars:     Size  Location     Type
  3046 ;;		None
  3047 ;; Return value:  Size  Location     Type
  3048 ;;                  1    wreg      void 
  3049 ;; Registers used:
  3050 ;;		wreg, status,2
  3051 ;; Tracked objects:
  3052 ;;		On entry : 0/0
  3053 ;;		On exit  : 0/0
  3054 ;;		Unchanged: 0/0
  3055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3057 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3058 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3059 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3060 ;;Total ram usage:        1 bytes
  3061 ;; Hardware stack levels used:    1
  3062 ;; Hardware stack levels required when called:    5
  3063 ;; This function calls:
  3064 ;;		Nothing
  3065 ;; This function is called by:
  3066 ;;		_main
  3067 ;;		_SYSTEM_Initialize
  3068 ;; This function uses a non-reentrant model
  3069 ;;
  3070                           
  3071                           
  3072                           ;psect for function _TMR0_Initialize
  3073  0E19                     _TMR0_Initialize:	
  3074                           
  3075                           ;tmr0.c: 67: OPTION_REG = (OPTION_REG & 0xC0) | 0xD4 & 0x3F;
  3076                           
  3077                           ;incstack = 0
  3078                           ; Regs used in _TMR0_Initialize: [wreg+status,2]
  3079  0E19  0021               	movlb	1	; select bank1
  3080  0E1A  0815               	movf	21,w	;volatile
  3081  0E1B  39C0               	andlw	192
  3082  0E1C  3814               	iorlw	20
  3083  0E1D  0095               	movwf	21	;volatile
  3084                           
  3085                           ;tmr0.c: 70: TMR0 = 0x06;
  3086  0E1E  3006               	movlw	6
  3087  0E1F  0020               	movlb	0	; select bank0
  3088  0E20  0095               	movwf	21	;volatile
  3089                           
  3090                           ;tmr0.c: 73: timer0ReloadVal= 6;
  3091  0E21  3006               	movlw	6
  3092  0E22  00A0               	movwf	??_TMR0_Initialize
  3093  0E23  0820               	movf	??_TMR0_Initialize,w
  3094  0E24  00DF               	movwf	_timer0ReloadVal	;volatile
  3095                           
  3096                           ;tmr0.c: 76: INTCONbits.TMR0IF = 0;
  3097  0E25  110B               	bcf	11,2	;volatile
  3098  0E26  0008               	return
  3099  0E27                     __end_of_TMR0_Initialize:	
  3100                           
  3101                           	psect	text3
  3102  0DEB                     __ptext3:	
  3103 ;; *************** function _PROTOCOL_Set_Func *****************
  3104 ;; Defined at:
  3105 ;;		line 77 in file "protocol.c"
  3106 ;; Parameters:    Size  Location     Type
  3107 ;;  loop_func       2    0[BANK0 ] PTR void 
  3108 ;;		 -> loop_func(1), 
  3109 ;; Auto vars:     Size  Location     Type
  3110 ;;		None
  3111 ;; Return value:  Size  Location     Type
  3112 ;;                  1    wreg      void 
  3113 ;; Registers used:
  3114 ;;		wreg
  3115 ;; Tracked objects:
  3116 ;;		On entry : 0/0
  3117 ;;		On exit  : 0/0
  3118 ;;		Unchanged: 0/0
  3119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3120 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3121 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3123 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3124 ;;Total ram usage:        2 bytes
  3125 ;; Hardware stack levels used:    1
  3126 ;; Hardware stack levels required when called:    5
  3127 ;; This function calls:
  3128 ;;		Nothing
  3129 ;; This function is called by:
  3130 ;;		_main
  3131 ;; This function uses a non-reentrant model
  3132 ;;
  3133                           
  3134                           
  3135                           ;psect for function _PROTOCOL_Set_Func
  3136  0DEB                     _PROTOCOL_Set_Func:	
  3137                           
  3138                           ;protocol.c: 78: PROTOCOL_Loop_Func = loop_func;
  3139                           
  3140                           ;incstack = 0
  3141                           ; Regs used in _PROTOCOL_Set_Func: [wreg]
  3142  0DEB  0020               	movlb	0	; select bank0
  3143  0DEC  0821               	movf	PROTOCOL_Set_Func@loop_func+1,w
  3144  0DED  0021               	movlb	1	; select bank1
  3145  0DEE  00B7               	movwf	(_PROTOCOL_Loop_Func+1)^(0+128)
  3146  0DEF  0020               	movlb	0	; select bank0
  3147  0DF0  0820               	movf	PROTOCOL_Set_Func@loop_func,w
  3148  0DF1  0021               	movlb	1	; select bank1
  3149  0DF2  00B6               	movwf	_PROTOCOL_Loop_Func^(0+128)
  3150  0DF3  0008               	return
  3151  0DF4                     __end_of_PROTOCOL_Set_Func:	
  3152                           
  3153                           	psect	text4
  3154  0246                     __ptext4:	
  3155 ;; *************** function _PROTOCOL_Loop *****************
  3156 ;; Defined at:
  3157 ;;		line 136 in file "protocol.c"
  3158 ;; Parameters:    Size  Location     Type
  3159 ;;		None
  3160 ;; Auto vars:     Size  Location     Type
  3161 ;;  device_addre    1   46[BANK0 ] unsigned char 
  3162 ;;  c               1   45[BANK0 ] unsigned char 
  3163 ;; Return value:  Size  Location     Type
  3164 ;;                  1    wreg      void 
  3165 ;; Registers used:
  3166 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3167 ;; Tracked objects:
  3168 ;;		On entry : 0/0
  3169 ;;		On exit  : 0/0
  3170 ;;		Unchanged: 0/0
  3171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3173 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3174 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3175 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3176 ;;Total ram usage:        4 bytes
  3177 ;; Hardware stack levels used:    1
  3178 ;; Hardware stack levels required when called:   11
  3179 ;; This function calls:
  3180 ;;		Absolute function
  3181 ;;		_EUSART_Read
  3182 ;;		_PROTOCOL_EXT
  3183 ;;		_PROTOCOL_Read_Device_Address
  3184 ;;		_PROTOCOL_SAV
  3185 ;;		_PROTOCOL_SET
  3186 ;;		_PROTOCOL_STA
  3187 ;;		_PROTOCOL_STP
  3188 ;;		_PROTOCOL_Write_Device_Address
  3189 ;;		_TMR0_HasOverflowOccured
  3190 ;;		_atoi
  3191 ;;		_inv_handler
  3192 ;;		_loop_func
  3193 ;;		_printf
  3194 ;;		_strncmp
  3195 ;; This function is called by:
  3196 ;;		_main
  3197 ;; This function uses a non-reentrant model
  3198 ;;
  3199                           
  3200                           
  3201                           ;psect for function _PROTOCOL_Loop
  3202  0246                     _PROTOCOL_Loop:	
  3203  0246                     l654:	
  3204                           ;incstack = 0
  3205                           ; Regs used in _PROTOCOL_Loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3206                           ;protocol.c: 137: uint8_t device_address;
  3207                           ;protocol.c: 138: uint8_t c;
  3208                           ;protocol.c: 139: while (1) {
  3209                           
  3210                           
  3211                           ;protocol.c: 140: tmr_overflow = TMR0_HasOverflowOccured();
  3212  0246  318D  259B  3182   	fcall	_TMR0_HasOverflowOccured
  3213  0249  0020               	movlb	0	; select bank0
  3214  024A  00CB               	movwf	??_PROTOCOL_Loop
  3215  024B  084B               	movf	??_PROTOCOL_Loop,w
  3216  024C  00D5               	movwf	_tmr_overflow
  3217                           
  3218                           ;protocol.c: 141: if (tmr_overflow) {
  3219  024D  0855               	movf	_tmr_overflow,w
  3220  024E  1903               	btfsc	3,2
  3221  024F  2A6C               	goto	l3200
  3222                           
  3223                           ;protocol.c: 142: TMR0IF = 0;
  3224  0250  110B               	bcf	11,2	;volatile
  3225                           
  3226                           ;protocol.c: 144: if (PROTOCOL_Inv_Handler && (++tmr_cnt >= value)) {
  3227  0251  0850               	movf	_PROTOCOL_Inv_Handler,w
  3228  0252  0451               	iorwf	_PROTOCOL_Inv_Handler+1,w
  3229  0253  1903               	btfsc	3,2
  3230  0254  2A6C               	goto	l3200
  3231  0255  3001               	movlw	1
  3232  0256  00CB               	movwf	??_PROTOCOL_Loop
  3233  0257  084B               	movf	??_PROTOCOL_Loop,w
  3234  0258  07D6               	addwf	_tmr_cnt,f
  3235  0259  085B               	movf	_value,w
  3236  025A  0256               	subwf	_tmr_cnt,w
  3237  025B  1C03               	skipc
  3238  025C  2A6C               	goto	l3200
  3239                           
  3240                           ;protocol.c: 145: tmr_cnt = 0;
  3241  025D  01D6               	clrf	_tmr_cnt
  3242                           
  3243                           ;protocol.c: 146: if (++sec_cnt >= tmr_scaler) {
  3244  025E  3001               	movlw	1
  3245  025F  00CB               	movwf	??_PROTOCOL_Loop
  3246  0260  084B               	movf	??_PROTOCOL_Loop,w
  3247  0261  07D7               	addwf	_sec_cnt,f
  3248  0262  086C               	movf	_tmr_scaler,w
  3249  0263  0257               	subwf	_sec_cnt,w
  3250  0264  1C03               	skipc
  3251  0265  2A6C               	goto	l3200
  3252                           
  3253                           ;protocol.c: 147: if (running) invoked = 1;
  3254  0266  0859               	movf	_running,w
  3255  0267  1903               	btfsc	3,2
  3256  0268  2A6B               	goto	l3198
  3257  0269  01D8               	clrf	_invoked
  3258  026A  0AD8               	incf	_invoked,f
  3259  026B                     l3198:	
  3260                           
  3261                           ;protocol.c: 148: sec_cnt = 0;
  3262  026B  01D7               	clrf	_sec_cnt
  3263  026C                     l3200:	
  3264                           
  3265                           ;protocol.c: 149: }
  3266                           ;protocol.c: 150: }
  3267                           ;protocol.c: 151: }
  3268                           ;protocol.c: 152: if (invoked && PROTOCOL_Inv_Handler) {
  3269  026C  0858               	movf	_invoked,w
  3270  026D  1903               	btfsc	3,2
  3271  026E  2A7A               	goto	l3208
  3272  026F  0850               	movf	_PROTOCOL_Inv_Handler,w
  3273  0270  0451               	iorwf	_PROTOCOL_Inv_Handler+1,w
  3274  0271  1903               	btfsc	3,2
  3275  0272  2A7A               	goto	l3208
  3276                           
  3277                           ;protocol.c: 153: PROTOCOL_Inv_Handler();
  3278  0273  0851               	movf	_PROTOCOL_Inv_Handler+1,w
  3279  0274  008A               	movwf	10
  3280  0275  0850               	movf	_PROTOCOL_Inv_Handler,w
  3281  0276  000A               	callw
  3282  0277  3182               	pagesel	$
  3283                           
  3284                           ;protocol.c: 154: invoked = 0;
  3285  0278  0020               	movlb	0	; select bank0
  3286  0279  01D8               	clrf	_invoked
  3287  027A                     l3208:	
  3288                           
  3289                           ;protocol.c: 155: }
  3290                           ;protocol.c: 156: if (PROTOCOL_Loop_Func) PROTOCOL_Loop_Func();
  3291  027A  0021               	movlb	1	; select bank1
  3292  027B  0836               	movf	_PROTOCOL_Loop_Func^(0+128),w
  3293  027C  0437               	iorwf	(_PROTOCOL_Loop_Func+1)^(0+128),w
  3294  027D  1903               	btfsc	3,2
  3295  027E  2A84               	goto	l3212
  3296  027F  0837               	movf	(_PROTOCOL_Loop_Func+1)^(0+128),w
  3297  0280  008A               	movwf	10
  3298  0281  0836               	movf	_PROTOCOL_Loop_Func^(0+128),w
  3299  0282  000A               	callw
  3300  0283  3182               	pagesel	$
  3301  0284                     l3212:	
  3302                           
  3303                           ;protocol.c: 157: if ((eusartRxCount)) {
  3304  0284  0020               	movlb	0	; select bank0
  3305  0285  0860               	movf	_eusartRxCount,w	;volatile
  3306  0286  1903               	btfsc	3,2
  3307  0287  2A46               	goto	l654
  3308                           
  3309                           ;protocol.c: 158: c = EUSART_Read();
  3310  0288  318F  2725  3182   	fcall	_EUSART_Read
  3311  028B  0020               	movlb	0	; select bank0
  3312  028C  00CB               	movwf	??_PROTOCOL_Loop
  3313  028D  084B               	movf	??_PROTOCOL_Loop,w
  3314  028E  00CD               	movwf	PROTOCOL_Loop@c
  3315                           
  3316                           ;protocol.c: 159: buf[cnt++] = c;
  3317  028F  084D               	movf	PROTOCOL_Loop@c,w
  3318  0290  00CB               	movwf	??_PROTOCOL_Loop
  3319  0291  085C               	movf	_cnt,w
  3320  0292  3E20               	addlw	(low (_buf| (0+256)))& (0+255)
  3321  0293  0086               	movwf	6
  3322  0294  3001               	movlw	1	; select bank2/3
  3323  0295  0087               	movwf	7
  3324  0296  084B               	movf	??_PROTOCOL_Loop,w
  3325  0297  0081               	movwf	1
  3326  0298  3001               	movlw	1
  3327  0299  00CB               	movwf	??_PROTOCOL_Loop
  3328  029A  084B               	movf	??_PROTOCOL_Loop,w
  3329  029B  07DC               	addwf	_cnt,f
  3330                           
  3331                           ;protocol.c: 160: if (c == '\n') {
  3332  029C  300A               	movlw	10
  3333  029D  064D               	xorwf	PROTOCOL_Loop@c,w
  3334  029E  1D03               	btfss	3,2
  3335  029F  2A46               	goto	l654
  3336                           
  3337                           ;protocol.c: 161: buf[--cnt] = '\0';
  3338  02A0  3001               	movlw	1
  3339  02A1  02DC               	subwf	_cnt,f
  3340  02A2  085C               	movf	_cnt,w
  3341  02A3  3E20               	addlw	(low (_buf| (0+256)))& (0+255)
  3342  02A4  0086               	movwf	6
  3343  02A5  3001               	movlw	1	; select bank2/3
  3344  02A6  0087               	movwf	7
  3345  02A7  0181               	clrf	1
  3346                           
  3347                           ;protocol.c: 162: cnt = 0;
  3348  02A8  01DC               	clrf	_cnt
  3349                           
  3350                           ;protocol.c: 163: printf("#%s\n", buf);
  3351  02A9  305E               	movlw	low (STR_3| (0+32768))
  3352  02AA  00AE               	movwf	printf@f
  3353  02AB  3084               	movlw	high (STR_3| (0+32768))
  3354  02AC  00AF               	movwf	printf@f+1
  3355  02AD  3020               	movlw	low _buf
  3356  02AE  00B0               	movwf	low ((?_printf| 0+2))
  3357  02AF  3001               	movlw	high _buf
  3358  02B0  00B1               	movwf	(low ((?_printf| 0+2))+1)
  3359  02B1  3180  2071  3182   	fcall	_printf
  3360                           
  3361                           ;protocol.c: 164: if (BACKPLANE_SLAVE_ADDRESS != 0x01) {
  3362  02B4  0020               	movlb	0	; select bank0
  3363  02B5  036E               	decf	_BACKPLANE_SLAVE_ADDRESS,w
  3364  02B6  1903               	btfsc	3,2
  3365  02B7  2ABD               	goto	l3232
  3366                           
  3367                           ;protocol.c: 165: PROTOCOL_EXT(buf);
  3368  02B8  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3369  02B9  318D  2575  3182   	fcall	_PROTOCOL_EXT
  3370                           
  3371                           ;protocol.c: 166: } else if (!strncmp(("WHO"), (buf), 3)) {
  3372  02BC  2A46               	goto	l654
  3373  02BD                     l3232:	
  3374  02BD  307F               	movlw	low (STR_4| (0+32768))
  3375  02BE  0020               	movlb	0	; select bank0
  3376  02BF  00A0               	movwf	strncmp@s1
  3377  02C0  3084               	movlw	high (STR_4| (0+32768))
  3378  02C1  00A1               	movwf	strncmp@s1+1
  3379  02C2  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3380  02C3  00CB               	movwf	??_PROTOCOL_Loop
  3381  02C4  084B               	movf	??_PROTOCOL_Loop,w
  3382  02C5  00A2               	movwf	strncmp@s2
  3383  02C6  3003               	movlw	3
  3384  02C7  00A3               	movwf	strncmp@len
  3385  02C8  3000               	movlw	0
  3386  02C9  00A4               	movwf	strncmp@len+1
  3387  02CA  3187  2701  3182   	fcall	_strncmp
  3388  02CD  0020               	movlb	0	; select bank0
  3389  02CE  0820               	movf	?_strncmp,w
  3390  02CF  0421               	iorwf	?_strncmp+1,w
  3391  02D0  1D03               	btfss	3,2
  3392  02D1  2AE2               	goto	l3236
  3393                           
  3394                           ;protocol.c: 167: printf("$:WHO:%s\n", device_id_);
  3395  02D2  3010               	movlw	low (STR_5| (0+32768))
  3396  02D3  00AE               	movwf	printf@f
  3397  02D4  3084               	movlw	high (STR_5| (0+32768))
  3398  02D5  00AF               	movwf	printf@f+1
  3399  02D6  0021               	movlb	1	; select bank1
  3400  02D7  0858               	movf	(_device_id_+1)^(0+128),w
  3401  02D8  0020               	movlb	0	; select bank0
  3402  02D9  00B1               	movwf	(low ((?_printf| 0+2))+1)
  3403  02DA  0021               	movlb	1	; select bank1
  3404  02DB  0857               	movf	_device_id_^(0+128),w
  3405  02DC  0020               	movlb	0	; select bank0
  3406  02DD  00B0               	movwf	low ((?_printf| 0+2))
  3407  02DE  3180  2071  3182   	fcall	_printf
  3408                           
  3409                           ;protocol.c: 168: } else if (!strncmp(("SAV"), (buf), 3)) {
  3410  02E1  2A46               	goto	l654
  3411  02E2                     l3236:	
  3412  02E2  308F               	movlw	low (STR_6| (0+32768))
  3413  02E3  0020               	movlb	0	; select bank0
  3414  02E4  00A0               	movwf	strncmp@s1
  3415  02E5  3084               	movlw	high (STR_6| (0+32768))
  3416  02E6  00A1               	movwf	strncmp@s1+1
  3417  02E7  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3418  02E8  00CB               	movwf	??_PROTOCOL_Loop
  3419  02E9  084B               	movf	??_PROTOCOL_Loop,w
  3420  02EA  00A2               	movwf	strncmp@s2
  3421  02EB  3003               	movlw	3
  3422  02EC  00A3               	movwf	strncmp@len
  3423  02ED  3000               	movlw	0
  3424  02EE  00A4               	movwf	strncmp@len+1
  3425  02EF  3187  2701  3182   	fcall	_strncmp
  3426  02F2  0020               	movlb	0	; select bank0
  3427  02F3  0820               	movf	?_strncmp,w
  3428  02F4  0421               	iorwf	?_strncmp+1,w
  3429  02F5  1D03               	btfss	3,2
  3430  02F6  2AFB               	goto	l3240
  3431                           
  3432                           ;protocol.c: 169: PROTOCOL_SAV();
  3433  02F7  318D  25D9  3182   	fcall	_PROTOCOL_SAV
  3434                           
  3435                           ;protocol.c: 170: } else if (!strncmp(("STA"), (buf), 3)) {
  3436  02FA  2A46               	goto	l654
  3437  02FB                     l3240:	
  3438  02FB  3077               	movlw	low (STR_7| (0+32768))
  3439  02FC  0020               	movlb	0	; select bank0
  3440  02FD  00A0               	movwf	strncmp@s1
  3441  02FE  3084               	movlw	high (STR_7| (0+32768))
  3442  02FF  00A1               	movwf	strncmp@s1+1
  3443  0300  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3444  0301  00CB               	movwf	??_PROTOCOL_Loop
  3445  0302  084B               	movf	??_PROTOCOL_Loop,w
  3446  0303  00A2               	movwf	strncmp@s2
  3447  0304  3003               	movlw	3
  3448  0305  00A3               	movwf	strncmp@len
  3449  0306  3000               	movlw	0
  3450  0307  00A4               	movwf	strncmp@len+1
  3451  0308  3187  2701  3182   	fcall	_strncmp
  3452  030B  0020               	movlb	0	; select bank0
  3453  030C  0820               	movf	?_strncmp,w
  3454  030D  0421               	iorwf	?_strncmp+1,w
  3455  030E  1D03               	btfss	3,2
  3456  030F  2B14               	goto	l3244
  3457                           
  3458                           ;protocol.c: 171: PROTOCOL_STA();
  3459  0310  318D  2597  3182   	fcall	_PROTOCOL_STA
  3460                           
  3461                           ;protocol.c: 172: } else if (!strncmp(("STP"), (buf), 3)) {
  3462  0313  2A46               	goto	l654
  3463  0314                     l3244:	
  3464  0314  3083               	movlw	low (STR_8| (0+32768))
  3465  0315  0020               	movlb	0	; select bank0
  3466  0316  00A0               	movwf	strncmp@s1
  3467  0317  3084               	movlw	high (STR_8| (0+32768))
  3468  0318  00A1               	movwf	strncmp@s1+1
  3469  0319  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3470  031A  00CB               	movwf	??_PROTOCOL_Loop
  3471  031B  084B               	movf	??_PROTOCOL_Loop,w
  3472  031C  00A2               	movwf	strncmp@s2
  3473  031D  3003               	movlw	3
  3474  031E  00A3               	movwf	strncmp@len
  3475  031F  3000               	movlw	0
  3476  0320  00A4               	movwf	strncmp@len+1
  3477  0321  3187  2701  3182   	fcall	_strncmp
  3478  0324  0020               	movlb	0	; select bank0
  3479  0325  0820               	movf	?_strncmp,w
  3480  0326  0421               	iorwf	?_strncmp+1,w
  3481  0327  1D03               	btfss	3,2
  3482  0328  2B39               	goto	l3250
  3483                           
  3484                           ;protocol.c: 173: PROTOCOL_STP();
  3485  0329  318D  2585  3182   	fcall	_PROTOCOL_STP
  3486                           
  3487                           ;protocol.c: 174: printf("*:STP:%s\n", "ACK");
  3488  032C  301A               	movlw	low (STR_9| (0+32768))
  3489  032D  0020               	movlb	0	; select bank0
  3490  032E  00AE               	movwf	printf@f
  3491  032F  3084               	movlw	high (STR_9| (0+32768))
  3492  0330  00AF               	movwf	printf@f+1
  3493  0331  307B               	movlw	low (STR_10| (0+32768))
  3494  0332  00B0               	movwf	low ((?_printf| 0+2))
  3495  0333  3084               	movlw	high (STR_10| (0+32768))
  3496  0334  00B1               	movwf	(low ((?_printf| 0+2))+1)
  3497  0335  3180  2071  3182   	fcall	_printf
  3498                           
  3499                           ;protocol.c: 175: } else if (!strncmp(("SET"), (buf), 3)) {
  3500  0338  2A46               	goto	l654
  3501  0339                     l3250:	
  3502  0339  308B               	movlw	low (STR_11| (0+32768))
  3503  033A  0020               	movlb	0	; select bank0
  3504  033B  00A0               	movwf	strncmp@s1
  3505  033C  3084               	movlw	high (STR_11| (0+32768))
  3506  033D  00A1               	movwf	strncmp@s1+1
  3507  033E  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3508  033F  00CB               	movwf	??_PROTOCOL_Loop
  3509  0340  084B               	movf	??_PROTOCOL_Loop,w
  3510  0341  00A2               	movwf	strncmp@s2
  3511  0342  3003               	movlw	3
  3512  0343  00A3               	movwf	strncmp@len
  3513  0344  3000               	movlw	0
  3514  0345  00A4               	movwf	strncmp@len+1
  3515  0346  3187  2701  3182   	fcall	_strncmp
  3516  0349  0020               	movlb	0	; select bank0
  3517  034A  0820               	movf	?_strncmp,w
  3518  034B  0421               	iorwf	?_strncmp+1,w
  3519  034C  1D03               	btfss	3,2
  3520  034D  2B58               	goto	l3254
  3521                           
  3522                           ;protocol.c: 176: PROTOCOL_SET(atoi(&buf[4]));
  3523  034E  3024               	movlw	(low ((_buf| (0+256)+4)))& (0+255)
  3524  034F  3186  2648  3182   	fcall	_atoi
  3525  0352  0020               	movlb	0	; select bank0
  3526  0353  0826               	movf	?_atoi,w
  3527  0354  318D  25BA  3182   	fcall	_PROTOCOL_SET
  3528                           
  3529                           ;protocol.c: 177: } else if (!strncmp(("GET"), (buf), 3)) {
  3530  0357  2A46               	goto	l654
  3531  0358                     l3254:	
  3532  0358  3087               	movlw	low (STR_12| (0+32768))
  3533  0359  0020               	movlb	0	; select bank0
  3534  035A  00A0               	movwf	strncmp@s1
  3535  035B  3084               	movlw	high (STR_12| (0+32768))
  3536  035C  00A1               	movwf	strncmp@s1+1
  3537  035D  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3538  035E  00CB               	movwf	??_PROTOCOL_Loop
  3539  035F  084B               	movf	??_PROTOCOL_Loop,w
  3540  0360  00A2               	movwf	strncmp@s2
  3541  0361  3003               	movlw	3
  3542  0362  00A3               	movwf	strncmp@len
  3543  0363  3000               	movlw	0
  3544  0364  00A4               	movwf	strncmp@len+1
  3545  0365  3187  2701  3182   	fcall	_strncmp
  3546  0368  0020               	movlb	0	; select bank0
  3547  0369  0820               	movf	?_strncmp,w
  3548  036A  0421               	iorwf	?_strncmp+1,w
  3549  036B  1D03               	btfss	3,2
  3550  036C  2B7C               	goto	l3258
  3551                           
  3552                           ;protocol.c: 178: printf("$:GET:%d\n", value);
  3553  036D  30FC               	movlw	low (STR_13| (0+32768))
  3554  036E  00AE               	movwf	printf@f
  3555  036F  3083               	movlw	high (STR_13| (0+32768))
  3556  0370  00AF               	movwf	printf@f+1
  3557  0371  085B               	movf	_value,w
  3558  0372  00CB               	movwf	??_PROTOCOL_Loop
  3559  0373  01CC               	clrf	??_PROTOCOL_Loop+1
  3560  0374  084B               	movf	??_PROTOCOL_Loop,w
  3561  0375  00B0               	movwf	?_printf+2
  3562  0376  084C               	movf	??_PROTOCOL_Loop+1,w
  3563  0377  00B1               	movwf	?_printf+3
  3564  0378  3180  2071  3182   	fcall	_printf
  3565                           
  3566                           ;protocol.c: 179: } else if (!strncmp(("WDA"), (buf), 3)) {
  3567  037B  2A46               	goto	l654
  3568  037C                     l3258:	
  3569  037C  3073               	movlw	low (STR_14| (0+32768))
  3570  037D  0020               	movlb	0	; select bank0
  3571  037E  00A0               	movwf	strncmp@s1
  3572  037F  3084               	movlw	high (STR_14| (0+32768))
  3573  0380  00A1               	movwf	strncmp@s1+1
  3574  0381  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3575  0382  00CB               	movwf	??_PROTOCOL_Loop
  3576  0383  084B               	movf	??_PROTOCOL_Loop,w
  3577  0384  00A2               	movwf	strncmp@s2
  3578  0385  3003               	movlw	3
  3579  0386  00A3               	movwf	strncmp@len
  3580  0387  3000               	movlw	0
  3581  0388  00A4               	movwf	strncmp@len+1
  3582  0389  3187  2701  3182   	fcall	_strncmp
  3583  038C  0020               	movlb	0	; select bank0
  3584  038D  0820               	movf	?_strncmp,w
  3585  038E  0421               	iorwf	?_strncmp+1,w
  3586  038F  1D03               	btfss	3,2
  3587  0390  2B9F               	goto	l3264
  3588                           
  3589                           ;protocol.c: 180: device_address = atoi(&buf[4]);
  3590  0391  3024               	movlw	(low ((_buf| (0+256)+4)))& (0+255)
  3591  0392  3186  2648  3182   	fcall	_atoi
  3592  0395  0020               	movlb	0	; select bank0
  3593  0396  0826               	movf	?_atoi,w
  3594  0397  00CB               	movwf	??_PROTOCOL_Loop
  3595  0398  084B               	movf	??_PROTOCOL_Loop,w
  3596  0399  00CE               	movwf	PROTOCOL_Loop@device_address
  3597                           
  3598                           ;protocol.c: 181: PROTOCOL_Write_Device_Address(device_address);
  3599  039A  084E               	movf	PROTOCOL_Loop@device_address,w
  3600  039B  318E  2627  3182   	fcall	_PROTOCOL_Write_Device_Address
  3601                           
  3602                           ;protocol.c: 182: } else if (!strncmp(("RDA"), (buf), 3)) {
  3603  039E  2A46               	goto	l654
  3604  039F                     l3264:	
  3605  039F  306F               	movlw	low (STR_15| (0+32768))
  3606  03A0  0020               	movlb	0	; select bank0
  3607  03A1  00A0               	movwf	strncmp@s1
  3608  03A2  3084               	movlw	high (STR_15| (0+32768))
  3609  03A3  00A1               	movwf	strncmp@s1+1
  3610  03A4  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3611  03A5  00CB               	movwf	??_PROTOCOL_Loop
  3612  03A6  084B               	movf	??_PROTOCOL_Loop,w
  3613  03A7  00A2               	movwf	strncmp@s2
  3614  03A8  3003               	movlw	3
  3615  03A9  00A3               	movwf	strncmp@len
  3616  03AA  3000               	movlw	0
  3617  03AB  00A4               	movwf	strncmp@len+1
  3618  03AC  3187  2701  3182   	fcall	_strncmp
  3619  03AF  0020               	movlb	0	; select bank0
  3620  03B0  0820               	movf	?_strncmp,w
  3621  03B1  0421               	iorwf	?_strncmp+1,w
  3622  03B2  1D03               	btfss	3,2
  3623  03B3  2BCA               	goto	l3270
  3624                           
  3625                           ;protocol.c: 183: device_address = PROTOCOL_Read_Device_Address();
  3626  03B4  318D  2582  3182   	fcall	_PROTOCOL_Read_Device_Address
  3627  03B7  0020               	movlb	0	; select bank0
  3628  03B8  00CB               	movwf	??_PROTOCOL_Loop
  3629  03B9  084B               	movf	??_PROTOCOL_Loop,w
  3630  03BA  00CE               	movwf	PROTOCOL_Loop@device_address
  3631                           
  3632                           ;protocol.c: 184: printf("$:RDA:%d\n", device_address);
  3633  03BB  30F2               	movlw	low (STR_16| (0+32768))
  3634  03BC  00AE               	movwf	printf@f
  3635  03BD  3083               	movlw	high (STR_16| (0+32768))
  3636  03BE  00AF               	movwf	printf@f+1
  3637  03BF  084E               	movf	PROTOCOL_Loop@device_address,w
  3638  03C0  00CB               	movwf	??_PROTOCOL_Loop
  3639  03C1  01CC               	clrf	??_PROTOCOL_Loop+1
  3640  03C2  084B               	movf	??_PROTOCOL_Loop,w
  3641  03C3  00B0               	movwf	?_printf+2
  3642  03C4  084C               	movf	??_PROTOCOL_Loop+1,w
  3643  03C5  00B1               	movwf	?_printf+3
  3644  03C6  3180  2071  3182   	fcall	_printf
  3645                           
  3646                           ;protocol.c: 185: } else {
  3647  03C9  2A46               	goto	l654
  3648  03CA                     l3270:	
  3649                           
  3650                           ;protocol.c: 186: PROTOCOL_EXT(buf);
  3651  03CA  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3652  03CB  318D  2575  3182   	fcall	_PROTOCOL_EXT
  3653  03CE  2A46               	goto	l654
  3654  03CF                     __end_of_PROTOCOL_Loop:	
  3655                           
  3656                           	psect	text5
  3657  0701                     __ptext5:	
  3658 ;; *************** function _strncmp *****************
  3659 ;; Defined at:
  3660 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strncmp.c"
  3661 ;; Parameters:    Size  Location     Type
  3662 ;;  s1              2    0[BANK0 ] PTR const unsigned char 
  3663 ;;		 -> STR_15(4), STR_14(4), STR_12(4), STR_11(4), 
  3664 ;;		 -> STR_8(4), STR_7(4), STR_6(4), STR_4(4), 
  3665 ;;  s2              1    2[BANK0 ] PTR const unsigned char 
  3666 ;;		 -> buf(48), 
  3667 ;;  len             2    3[BANK0 ] unsigned int 
  3668 ;; Auto vars:     Size  Location     Type
  3669 ;;		None
  3670 ;; Return value:  Size  Location     Type
  3671 ;;                  2    0[BANK0 ] int 
  3672 ;; Registers used:
  3673 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  3674 ;; Tracked objects:
  3675 ;;		On entry : 0/0
  3676 ;;		On exit  : 0/0
  3677 ;;		Unchanged: 0/0
  3678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3679 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3680 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3681 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3682 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3683 ;;Total ram usage:        7 bytes
  3684 ;; Hardware stack levels used:    1
  3685 ;; Hardware stack levels required when called:    5
  3686 ;; This function calls:
  3687 ;;		Nothing
  3688 ;; This function is called by:
  3689 ;;		_PROTOCOL_Loop
  3690 ;; This function uses a non-reentrant model
  3691 ;;
  3692                           
  3693                           
  3694                           ;psect for function _strncmp
  3695  0701                     _strncmp:	
  3696  0701                     l3000:	
  3697                           ;incstack = 0
  3698                           ; Regs used in _strncmp: [wreg-fsr1h+status,2+status,0+pclath]
  3699                           
  3700  0701  3001               	movlw	1
  3701  0702  0020               	movlb	0	; select bank0
  3702  0703  02A3               	subwf	strncmp@len,f
  3703  0704  3000               	movlw	0
  3704  0705  3BA4               	subwfb	strncmp@len+1,f
  3705  0706  0A23               	incf	strncmp@len,w
  3706  0707  1903               	btfsc	3,2
  3707  0708  0A24               	incf	strncmp@len+1,w
  3708  0709  1903               	btfsc	3,2
  3709  070A  2F40               	goto	l3002
  3710  070B  0020               	movlb	0	; select bank0
  3711  070C  0820               	movf	strncmp@s1,w
  3712  070D  0084               	movwf	4
  3713  070E  0821               	movf	strncmp@s1+1,w
  3714  070F  0085               	movwf	5
  3715  0710  0012               	moviw fsr0++
  3716  0711  1903               	btfsc	3,2
  3717  0712  2F1F               	goto	l2992
  3718  0713  0822               	movf	strncmp@s2,w
  3719  0714  0086               	movwf	6
  3720  0715  3001               	movlw	1	; select bank2/3
  3721  0716  0087               	movwf	7
  3722  0717  0820               	movf	strncmp@s1,w
  3723  0718  0084               	movwf	4
  3724  0719  0821               	movf	strncmp@s1+1,w
  3725  071A  0085               	movwf	5
  3726  071B  0800               	movf	0,w	;code access
  3727  071C  0601               	xorwf	1,w
  3728  071D  1903               	skipnz
  3729  071E  2F37               	goto	l2996
  3730  071F                     l2992:	
  3731  071F  0822               	movf	strncmp@s2,w
  3732  0720  0086               	movwf	6
  3733  0721  3001               	movlw	1	; select bank2/3
  3734  0722  0087               	movwf	7
  3735  0723  0801               	movf	1,w
  3736  0724  00A5               	movwf	??_strncmp
  3737  0725  01A6               	clrf	??_strncmp+1
  3738  0726  09A5               	comf	??_strncmp,f
  3739  0727  09A6               	comf	??_strncmp+1,f
  3740  0728  0AA5               	incf	??_strncmp,f
  3741  0729  1903               	skipnz
  3742  072A  0AA6               	incf	??_strncmp+1,f
  3743  072B  0820               	movf	strncmp@s1,w
  3744  072C  0084               	movwf	4
  3745  072D  0821               	movf	strncmp@s1+1,w
  3746  072E  0085               	movwf	5
  3747  072F  0800               	movf	0,w	;code access
  3748  0730  0725               	addwf	??_strncmp,w
  3749  0731  00A0               	movwf	?_strncmp
  3750  0732  0826               	movf	??_strncmp+1,w
  3751  0733  1803               	skipnc
  3752  0734  0A26               	incf	??_strncmp+1,w
  3753  0735  00A1               	movwf	?_strncmp+1
  3754  0736  0008               	return
  3755  0737                     l2996:	
  3756  0737  3001               	movlw	1
  3757  0738  07A0               	addwf	strncmp@s1,f
  3758  0739  3000               	movlw	0
  3759  073A  3DA1               	addwfc	strncmp@s1+1,f
  3760  073B  3001               	movlw	1
  3761  073C  00A5               	movwf	??_strncmp
  3762  073D  0825               	movf	??_strncmp,w
  3763  073E  07A2               	addwf	strncmp@s2,f
  3764  073F  2F01               	goto	l3000
  3765  0740                     l3002:	
  3766  0740  01A0               	clrf	?_strncmp
  3767  0741  01A1               	clrf	?_strncmp+1
  3768  0742  0008               	return
  3769  0743                     __end_of_strncmp:	
  3770                           
  3771                           	psect	text6
  3772  0557                     __ptext6:	
  3773 ;; *************** function _loop_func *****************
  3774 ;; Defined at:
  3775 ;;		line 24 in file "main.c"
  3776 ;; Parameters:    Size  Location     Type
  3777 ;;		None
  3778 ;; Auto vars:     Size  Location     Type
  3779 ;;  v               2    7[BANK0 ] unsigned int 
  3780 ;;  out             2    5[BANK0 ] unsigned int 
  3781 ;; Return value:  Size  Location     Type
  3782 ;;                  1    wreg      void 
  3783 ;; Registers used:
  3784 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3785 ;; Tracked objects:
  3786 ;;		On entry : 0/0
  3787 ;;		On exit  : 0/0
  3788 ;;		Unchanged: 0/0
  3789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3791 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3792 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3793 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3794 ;;Total ram usage:        5 bytes
  3795 ;; Hardware stack levels used:    1
  3796 ;; Hardware stack levels required when called:    6
  3797 ;; This function calls:
  3798 ;;		_ADC_GetConversionResult
  3799 ;;		_ADC_IsConversionDone
  3800 ;;		_ADC_SelectChannel
  3801 ;;		_ADC_StartConversion
  3802 ;;		_abs
  3803 ;; This function is called by:
  3804 ;;		_main
  3805 ;;		_PROTOCOL_Loop
  3806 ;; This function uses a non-reentrant model
  3807 ;;
  3808                           
  3809                           
  3810                           ;psect for function _loop_func
  3811  0557                     _loop_func:	
  3812                           
  3813                           ;main.c: 25: ADC_SelectChannel(channel_AN8);
  3814                           
  3815                           ;incstack = 0
  3816                           ; Regs used in _loop_func: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3817  0557  3008               	movlw	8
  3818  0558  318E  2654  3185   	fcall	_ADC_SelectChannel
  3819                           
  3820                           ;main.c: 26: ADC_StartConversion();
  3821  055B  318D  2588  3185   	fcall	_ADC_StartConversion
  3822  055E                     l2940:	
  3823                           ;main.c: 27: while(!ADC_IsConversionDone());
  3824                           
  3825  055E  318D  25C1  3185   	fcall	_ADC_IsConversionDone
  3826  0561  3A00               	xorlw	0
  3827  0562  1903               	skipnz
  3828  0563  2D5E               	goto	l2940
  3829                           
  3830                           ;main.c: 28: adc_result_t out = ADC_GetConversionResult();
  3831  0564  318D  25E2  3185   	fcall	_ADC_GetConversionResult
  3832  0567  0020               	movlb	0	; select bank0
  3833  0568  0821               	movf	?_ADC_GetConversionResult+1,w
  3834  0569  00A6               	movwf	loop_func@out+1
  3835  056A  0820               	movf	?_ADC_GetConversionResult,w
  3836  056B  00A5               	movwf	loop_func@out
  3837                           
  3838                           ;main.c: 29: uint16_t v = abs(out - 511);
  3839  056C  0825               	movf	loop_func@out,w
  3840  056D  3E01               	addlw	1
  3841  056E  00A0               	movwf	abs@a
  3842  056F  30FE               	movlw	254
  3843  0570  3D26               	addwfc	loop_func@out+1,w
  3844  0571  00A1               	movwf	abs@a+1
  3845  0572  318E  2645  3185   	fcall	_abs
  3846  0575  0020               	movlb	0	; select bank0
  3847  0576  0821               	movf	?_abs+1,w
  3848  0577  00A8               	movwf	loop_func@v+1
  3849  0578  0820               	movf	?_abs,w
  3850  0579  00A7               	movwf	loop_func@v
  3851                           
  3852                           ;main.c: 45: switch (on) {
  3853  057A  2DC6               	goto	l2978
  3854  057B                     l2946:	
  3855                           ;main.c: 46: case 0:
  3856                           
  3857                           
  3858                           ;main.c: 48: if (v >= 50) count++;
  3859  057B  3000               	movlw	0
  3860  057C  0228               	subwf	loop_func@v+1,w
  3861  057D  3032               	movlw	50
  3862  057E  1903               	skipnz
  3863  057F  0227               	subwf	loop_func@v,w
  3864  0580  1C03               	skipc
  3865  0581  2D88               	goto	l2950
  3866  0582  3001               	movlw	1
  3867  0583  0021               	movlb	1	; select bank1
  3868  0584  07B8               	addwf	_count^(0+128),f
  3869  0585  3000               	movlw	0
  3870  0586  3DB9               	addwfc	(_count+1)^(0+128),f
  3871  0587  2D8B               	goto	l2952
  3872  0588                     l2950:	
  3873                           
  3874                           ;main.c: 49: else count = 0;
  3875  0588  0021               	movlb	1	; select bank1
  3876  0589  01B8               	clrf	_count^(0+128)
  3877  058A  01B9               	clrf	(_count+1)^(0+128)
  3878  058B                     l2952:	
  3879                           
  3880                           ;main.c: 51: if (count >= 3) {
  3881  058B  3000               	movlw	0
  3882  058C  0239               	subwf	(_count+1)^(0+128),w
  3883  058D  3003               	movlw	3
  3884  058E  1903               	skipnz
  3885  058F  0238               	subwf	_count^(0+128),w
  3886  0590  1C03               	skipc
  3887  0591  2DCF               	goto	l2980
  3888                           
  3889                           ;main.c: 52: count = 0;
  3890  0592  01B8               	clrf	_count^(0+128)
  3891  0593  01B9               	clrf	(_count+1)^(0+128)
  3892                           
  3893                           ;main.c: 53: on = 1;
  3894  0594  0020               	movlb	0	; select bank0
  3895  0595  01DE               	clrf	_on
  3896  0596  0ADE               	incf	_on,f
  3897                           
  3898                           ;main.c: 54: }
  3899                           ;main.c: 56: break;
  3900  0597  2DCF               	goto	l2980
  3901  0598                     l2958:	
  3902                           ;main.c: 58: case 1:
  3903                           
  3904                           
  3905                           ;main.c: 60: if (v < 50) count++;
  3906  0598  3000               	movlw	0
  3907  0599  0228               	subwf	loop_func@v+1,w
  3908  059A  3032               	movlw	50
  3909  059B  1903               	skipnz
  3910  059C  0227               	subwf	loop_func@v,w
  3911  059D  1803               	skipnc
  3912  059E  2DA5               	goto	l2962
  3913  059F  3001               	movlw	1
  3914  05A0  0021               	movlb	1	; select bank1
  3915  05A1  07B8               	addwf	_count^(0+128),f
  3916  05A2  3000               	movlw	0
  3917  05A3  3DB9               	addwfc	(_count+1)^(0+128),f
  3918  05A4  2DA8               	goto	l2964
  3919  05A5                     l2962:	
  3920                           
  3921                           ;main.c: 61: else count = 0;
  3922  05A5  0021               	movlb	1	; select bank1
  3923  05A6  01B8               	clrf	_count^(0+128)
  3924  05A7  01B9               	clrf	(_count+1)^(0+128)
  3925  05A8                     l2964:	
  3926                           
  3927                           ;main.c: 63: if (count >= 3) {
  3928  05A8  3000               	movlw	0
  3929  05A9  0239               	subwf	(_count+1)^(0+128),w
  3930  05AA  3003               	movlw	3
  3931  05AB  1903               	skipnz
  3932  05AC  0238               	subwf	_count^(0+128),w
  3933  05AD  1C03               	skipc
  3934  05AE  2DCF               	goto	l2980
  3935                           
  3936                           ;main.c: 64: count = 0;
  3937  05AF  01B8               	clrf	_count^(0+128)
  3938  05B0  01B9               	clrf	(_count+1)^(0+128)
  3939                           
  3940                           ;main.c: 65: on = 0;
  3941  05B1  0020               	movlb	0	; select bank0
  3942  05B2  01DE               	clrf	_on
  3943                           
  3944                           ;main.c: 66: LATCbits.LATC7 = 0;
  3945  05B3  0022               	movlb	2	; select bank2
  3946  05B4  138E               	bcf	14,7	;volatile
  3947                           
  3948                           ;main.c: 67: _delay((unsigned long)((3)*(4000000/4000.0)));
  3949  05B5  3004               	movlw	4
  3950  05B6  0020               	movlb	0	; select bank0
  3951  05B7  00A4               	movwf	??_loop_func
  3952  05B8  30E4               	movlw	228
  3953  05B9                     u2347:	
  3954  05B9  0B89               	decfsz	9,f
  3955  05BA  2DB9               	goto	u2347
  3956  05BB  0BA4               	decfsz	??_loop_func,f
  3957  05BC  2DB9               	goto	u2347
  3958  05BD  0000               	nop
  3959                           
  3960                           ;main.c: 68: LATCbits.LATC7 = 1;
  3961  05BE  0022               	movlb	2	; select bank2
  3962  05BF  178E               	bsf	14,7	;volatile
  3963                           
  3964                           ;main.c: 69: sum++;
  3965  05C0  3001               	movlw	1
  3966  05C1  0021               	movlb	1	; select bank1
  3967  05C2  07BA               	addwf	_sum^(0+128),f
  3968  05C3  3000               	movlw	0
  3969  05C4  3DBB               	addwfc	(_sum+1)^(0+128),f
  3970                           
  3971                           ;main.c: 73: }
  3972                           
  3973                           ;main.c: 70: }
  3974                           ;main.c: 72: break;
  3975  05C5  2DCF               	goto	l2980
  3976  05C6                     l2978:	
  3977  05C6  0020               	movlb	0	; select bank0
  3978  05C7  085E               	movf	_on,w
  3979                           
  3980                           ; Switch size 1, requested type "space"
  3981                           ; Number of cases is 2, Range of values is 0 to 1
  3982                           ; switch strategies available:
  3983                           ; Name         Instructions Cycles
  3984                           ; simple_byte            7     4 (average)
  3985                           ; direct_byte           10     6 (fixed)
  3986                           ; jumptable            260     6 (fixed)
  3987                           ;	Chosen strategy is simple_byte
  3988  05C8  3A00               	xorlw	0	; case 0
  3989  05C9  1903               	skipnz
  3990  05CA  2D7B               	goto	l2946
  3991  05CB  3A01               	xorlw	1	; case 1
  3992  05CC  1903               	skipnz
  3993  05CD  2D98               	goto	l2958
  3994  05CE  2DCF               	goto	l2980
  3995  05CF                     l2980:	
  3996                           
  3997                           ;main.c: 75: _delay((unsigned long)((500)*(4000000/4000000.0)));
  3998  05CF  30A6               	movlw	166
  3999  05D0                     u2357:	
  4000  05D0  0B89               	decfsz	9,f
  4001  05D1  2DD0               	goto	u2357
  4002  05D2  3200               	nop2
  4003  05D3  0008               	return
  4004  05D4                     __end_of_loop_func:	
  4005                           
  4006                           	psect	text7
  4007  0E45                     __ptext7:	
  4008 ;; *************** function _abs *****************
  4009 ;; Defined at:
  4010 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\abs.c"
  4011 ;; Parameters:    Size  Location     Type
  4012 ;;  a               2    0[BANK0 ] int 
  4013 ;; Auto vars:     Size  Location     Type
  4014 ;;		None
  4015 ;; Return value:  Size  Location     Type
  4016 ;;                  2    0[BANK0 ] int 
  4017 ;; Registers used:
  4018 ;;		wreg, status,2, status,0
  4019 ;; Tracked objects:
  4020 ;;		On entry : 0/0
  4021 ;;		On exit  : 0/0
  4022 ;;		Unchanged: 0/0
  4023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4024 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4025 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4026 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4027 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4028 ;;Total ram usage:        4 bytes
  4029 ;; Hardware stack levels used:    1
  4030 ;; Hardware stack levels required when called:    5
  4031 ;; This function calls:
  4032 ;;		Nothing
  4033 ;; This function is called by:
  4034 ;;		_loop_func
  4035 ;; This function uses a non-reentrant model
  4036 ;;
  4037                           
  4038                           
  4039                           ;psect for function _abs
  4040  0E45                     _abs:	
  4041                           
  4042                           ;incstack = 0
  4043                           ; Regs used in _abs: [wreg+status,2+status,0]
  4044  0E45  0020               	movlb	0	; select bank0
  4045  0E46  1FA1               	btfss	abs@a+1,7
  4046  0E47  0008               	return
  4047  0E48  0920               	comf	abs@a,w
  4048  0E49  00A2               	movwf	??_abs
  4049  0E4A  0921               	comf	abs@a+1,w
  4050  0E4B  00A3               	movwf	??_abs+1
  4051  0E4C  0AA2               	incf	??_abs,f
  4052  0E4D  1903               	skipnz
  4053  0E4E  0AA3               	incf	??_abs+1,f
  4054  0E4F  0822               	movf	??_abs,w
  4055  0E50  00A0               	movwf	?_abs
  4056  0E51  0823               	movf	??_abs+1,w
  4057  0E52  00A1               	movwf	?_abs+1
  4058  0E53  0008               	return
  4059  0E54                     __end_of_abs:	
  4060                           
  4061                           	psect	text8
  4062  0D88                     __ptext8:	
  4063 ;; *************** function _ADC_StartConversion *****************
  4064 ;; Defined at:
  4065 ;;		line 90 in file "mcc_generated_files/adc.c"
  4066 ;; Parameters:    Size  Location     Type
  4067 ;;		None
  4068 ;; Auto vars:     Size  Location     Type
  4069 ;;		None
  4070 ;; Return value:  Size  Location     Type
  4071 ;;                  1    wreg      void 
  4072 ;; Registers used:
  4073 ;;		None
  4074 ;; Tracked objects:
  4075 ;;		On entry : 0/0
  4076 ;;		On exit  : 0/0
  4077 ;;		Unchanged: 0/0
  4078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4082 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4083 ;;Total ram usage:        0 bytes
  4084 ;; Hardware stack levels used:    1
  4085 ;; Hardware stack levels required when called:    5
  4086 ;; This function calls:
  4087 ;;		Nothing
  4088 ;; This function is called by:
  4089 ;;		_loop_func
  4090 ;; This function uses a non-reentrant model
  4091 ;;
  4092                           
  4093                           
  4094                           ;psect for function _ADC_StartConversion
  4095  0D88                     _ADC_StartConversion:	
  4096                           
  4097                           ;adc.c: 93: ADCON0bits.GO_nDONE = 1;
  4098                           
  4099                           ;incstack = 0
  4100                           ; Regs used in _ADC_StartConversion: []
  4101  0D88  0021               	movlb	1	; select bank1
  4102  0D89  149D               	bsf	29,1	;volatile
  4103  0D8A  0008               	return
  4104  0D8B                     __end_of_ADC_StartConversion:	
  4105                           
  4106                           	psect	text9
  4107  0E54                     __ptext9:	
  4108 ;; *************** function _ADC_SelectChannel *****************
  4109 ;; Defined at:
  4110 ;;		line 82 in file "mcc_generated_files/adc.c"
  4111 ;; Parameters:    Size  Location     Type
  4112 ;;  channel         1    wreg     enum E2975
  4113 ;; Auto vars:     Size  Location     Type
  4114 ;;  channel         1    1[BANK0 ] enum E2975
  4115 ;; Return value:  Size  Location     Type
  4116 ;;                  1    wreg      void 
  4117 ;; Registers used:
  4118 ;;		wreg, status,2, status,0
  4119 ;; Tracked objects:
  4120 ;;		On entry : 0/0
  4121 ;;		On exit  : 0/0
  4122 ;;		Unchanged: 0/0
  4123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4125 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4126 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4127 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4128 ;;Total ram usage:        2 bytes
  4129 ;; Hardware stack levels used:    1
  4130 ;; Hardware stack levels required when called:    5
  4131 ;; This function calls:
  4132 ;;		Nothing
  4133 ;; This function is called by:
  4134 ;;		_loop_func
  4135 ;; This function uses a non-reentrant model
  4136 ;;
  4137                           
  4138                           
  4139                           ;psect for function _ADC_SelectChannel
  4140  0E54                     _ADC_SelectChannel:	
  4141                           
  4142                           ;incstack = 0
  4143                           ; Regs used in _ADC_SelectChannel: [wreg+status,2+status,0]
  4144                           ;ADC_SelectChannel@channel stored from wreg
  4145  0E54  0020               	movlb	0	; select bank0
  4146  0E55  00A1               	movwf	ADC_SelectChannel@channel
  4147                           
  4148                           ;adc.c: 85: ADCON0bits.CHS = channel;
  4149  0E56  0821               	movf	ADC_SelectChannel@channel,w
  4150  0E57  00A0               	movwf	??_ADC_SelectChannel
  4151  0E58  0DA0               	rlf	??_ADC_SelectChannel,f
  4152  0E59  0DA0               	rlf	??_ADC_SelectChannel,f
  4153  0E5A  0021               	movlb	1	; select bank1
  4154  0E5B  081D               	movf	29,w	;volatile
  4155  0E5C  0020               	movlb	0	; select bank0
  4156  0E5D  0620               	xorwf	??_ADC_SelectChannel,w
  4157  0E5E  3983               	andlw	-125
  4158  0E5F  0620               	xorwf	??_ADC_SelectChannel,w
  4159  0E60  0021               	movlb	1	; select bank1
  4160  0E61  009D               	movwf	29	;volatile
  4161                           
  4162                           ;adc.c: 87: ADCON0bits.ADON = 1;
  4163  0E62  141D               	bsf	29,0	;volatile
  4164  0E63  0008               	return
  4165  0E64                     __end_of_ADC_SelectChannel:	
  4166                           
  4167                           	psect	text10
  4168  0DC1                     __ptext10:	
  4169 ;; *************** function _ADC_IsConversionDone *****************
  4170 ;; Defined at:
  4171 ;;		line 97 in file "mcc_generated_files/adc.c"
  4172 ;; Parameters:    Size  Location     Type
  4173 ;;		None
  4174 ;; Auto vars:     Size  Location     Type
  4175 ;;		None
  4176 ;; Return value:  Size  Location     Type
  4177 ;;                  1    wreg      unsigned char 
  4178 ;; Registers used:
  4179 ;;		wreg, status,0
  4180 ;; Tracked objects:
  4181 ;;		On entry : 0/0
  4182 ;;		On exit  : 0/0
  4183 ;;		Unchanged: 0/0
  4184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4186 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4188 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4189 ;;Total ram usage:        0 bytes
  4190 ;; Hardware stack levels used:    1
  4191 ;; Hardware stack levels required when called:    5
  4192 ;; This function calls:
  4193 ;;		Nothing
  4194 ;; This function is called by:
  4195 ;;		_loop_func
  4196 ;; This function uses a non-reentrant model
  4197 ;;
  4198                           
  4199                           
  4200                           ;psect for function _ADC_IsConversionDone
  4201  0DC1                     _ADC_IsConversionDone:	
  4202                           
  4203                           ;adc.c: 100: return (!ADCON0bits.GO_nDONE);
  4204                           
  4205                           ;incstack = 0
  4206                           ; Regs used in _ADC_IsConversionDone: [wreg+status,0]
  4207  0DC1  1003               	clrc
  4208  0DC2  0021               	movlb	1	; select bank1
  4209  0DC3  1C9D               	btfss	29,1	;volatile
  4210  0DC4  1403               	setc
  4211  0DC5  3000               	movlw	0
  4212  0DC6  3D09               	addwfc	9,w
  4213  0DC7  0008               	return
  4214  0DC8                     __end_of_ADC_IsConversionDone:	
  4215                           
  4216                           	psect	text11
  4217  0DE2                     __ptext11:	
  4218 ;; *************** function _ADC_GetConversionResult *****************
  4219 ;; Defined at:
  4220 ;;		line 103 in file "mcc_generated_files/adc.c"
  4221 ;; Parameters:    Size  Location     Type
  4222 ;;		None
  4223 ;; Auto vars:     Size  Location     Type
  4224 ;;		None
  4225 ;; Return value:  Size  Location     Type
  4226 ;;                  2    0[BANK0 ] unsigned int 
  4227 ;; Registers used:
  4228 ;;		wreg
  4229 ;; Tracked objects:
  4230 ;;		On entry : 0/0
  4231 ;;		On exit  : 0/0
  4232 ;;		Unchanged: 0/0
  4233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4234 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4235 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4237 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4238 ;;Total ram usage:        2 bytes
  4239 ;; Hardware stack levels used:    1
  4240 ;; Hardware stack levels required when called:    5
  4241 ;; This function calls:
  4242 ;;		Nothing
  4243 ;; This function is called by:
  4244 ;;		_loop_func
  4245 ;; This function uses a non-reentrant model
  4246 ;;
  4247                           
  4248                           
  4249                           ;psect for function _ADC_GetConversionResult
  4250  0DE2                     _ADC_GetConversionResult:	
  4251                           
  4252                           ;adc.c: 106: return ((ADRESH << 8) + ADRESL);
  4253                           
  4254                           ;incstack = 0
  4255                           ; Regs used in _ADC_GetConversionResult: [wreg]
  4256  0DE2  0021               	movlb	1	; select bank1
  4257  0DE3  081C               	movf	28,w	;volatile
  4258  0DE4  0020               	movlb	0	; select bank0
  4259  0DE5  00A1               	movwf	?_ADC_GetConversionResult+1
  4260  0DE6  0021               	movlb	1	; select bank1
  4261  0DE7  081B               	movf	27,w	;volatile
  4262  0DE8  0020               	movlb	0	; select bank0
  4263  0DE9  00A0               	movwf	?_ADC_GetConversionResult
  4264  0DEA  0008               	return
  4265  0DEB                     __end_of_ADC_GetConversionResult:	
  4266                           
  4267                           	psect	text12
  4268  0E0B                     __ptext12:	
  4269 ;; *************** function _inv_handler *****************
  4270 ;; Defined at:
  4271 ;;		line 19 in file "main.c"
  4272 ;; Parameters:    Size  Location     Type
  4273 ;;		None
  4274 ;; Auto vars:     Size  Location     Type
  4275 ;;		None
  4276 ;; Return value:  Size  Location     Type
  4277 ;;                  1    wreg      void 
  4278 ;; Registers used:
  4279 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4280 ;; Tracked objects:
  4281 ;;		On entry : 0/0
  4282 ;;		On exit  : 0/0
  4283 ;;		Unchanged: 0/0
  4284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4286 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4288 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4289 ;;Total ram usage:        0 bytes
  4290 ;; Hardware stack levels used:    1
  4291 ;; Hardware stack levels required when called:   10
  4292 ;; This function calls:
  4293 ;;		_PROTOCOL_Send_uint16_t
  4294 ;; This function is called by:
  4295 ;;		_main
  4296 ;;		_PROTOCOL_Loop
  4297 ;; This function uses a non-reentrant model
  4298 ;;
  4299                           
  4300                           
  4301                           ;psect for function _inv_handler
  4302  0E0B                     _inv_handler:	
  4303                           
  4304                           ;main.c: 20: PROTOCOL_Send_uint16_t(sum);
  4305                           
  4306                           ;incstack = 0
  4307                           ; Regs used in _inv_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4308  0E0B  0021               	movlb	1	; select bank1
  4309  0E0C  083B               	movf	(_sum+1)^(0+128),w
  4310  0E0D  0020               	movlb	0	; select bank0
  4311  0E0E  00C9               	movwf	PROTOCOL_Send_uint16_t@value+1
  4312  0E0F  0021               	movlb	1	; select bank1
  4313  0E10  083A               	movf	_sum^(0+128),w
  4314  0E11  0020               	movlb	0	; select bank0
  4315  0E12  00C8               	movwf	PROTOCOL_Send_uint16_t@value
  4316  0E13  3187  27EA         	fcall	_PROTOCOL_Send_uint16_t
  4317                           
  4318                           ;main.c: 21: sum = 0;
  4319  0E15  0021               	movlb	1	; select bank1
  4320  0E16  01BA               	clrf	_sum^(0+128)
  4321  0E17  01BB               	clrf	(_sum+1)^(0+128)
  4322  0E18  0008               	return
  4323  0E19                     __end_of_inv_handler:	
  4324                           
  4325                           	psect	text13
  4326  07EA                     __ptext13:	
  4327 ;; *************** function _PROTOCOL_Send_uint16_t *****************
  4328 ;; Defined at:
  4329 ;;		line 386 in file "protocol.c"
  4330 ;; Parameters:    Size  Location     Type
  4331 ;;  value           2   40[BANK0 ] unsigned int 
  4332 ;; Auto vars:     Size  Location     Type
  4333 ;;		None
  4334 ;; Return value:  Size  Location     Type
  4335 ;;                  1    wreg      void 
  4336 ;; Registers used:
  4337 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4338 ;; Tracked objects:
  4339 ;;		On entry : 0/0
  4340 ;;		On exit  : 0/0
  4341 ;;		Unchanged: 0/0
  4342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4343 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4344 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4345 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4346 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4347 ;;Total ram usage:        3 bytes
  4348 ;; Hardware stack levels used:    1
  4349 ;; Hardware stack levels required when called:    9
  4350 ;; This function calls:
  4351 ;;		_PROTOCOL_I2C_Send_uint16_t
  4352 ;; This function is called by:
  4353 ;;		_inv_handler
  4354 ;; This function uses a non-reentrant model
  4355 ;;
  4356                           
  4357                           
  4358                           ;psect for function _PROTOCOL_Send_uint16_t
  4359  07EA                     _PROTOCOL_Send_uint16_t:	
  4360                           
  4361                           ;protocol.c: 387: static uint16_t pbuf[1];
  4362                           ;protocol.c: 388: pbuf[0] = value;
  4363                           
  4364                           ;incstack = 0
  4365                           ; Regs used in _PROTOCOL_Send_uint16_t: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4366  07EA  0020               	movlb	0	; select bank0
  4367  07EB  0849               	movf	PROTOCOL_Send_uint16_t@value+1,w
  4368  07EC  0021               	movlb	1	; select bank1
  4369  07ED  00D4               	movwf	(PROTOCOL_Send_uint16_t@pbuf+1)^(0+128)
  4370  07EE  0020               	movlb	0	; select bank0
  4371  07EF  0848               	movf	PROTOCOL_Send_uint16_t@value,w
  4372  07F0  0021               	movlb	1	; select bank1
  4373  07F1  00D3               	movwf	PROTOCOL_Send_uint16_t@pbuf^(0+128)
  4374                           
  4375                           ;protocol.c: 389: PROTOCOL_I2C_Send_uint16_t(1, pbuf);
  4376  07F2  30D3               	movlw	(low (PROTOCOL_Send_uint16_t@pbuf| 0))& (0+255)
  4377  07F3  0020               	movlb	0	; select bank0
  4378  07F4  00CA               	movwf	??_PROTOCOL_Send_uint16_t
  4379  07F5  084A               	movf	??_PROTOCOL_Send_uint16_t,w
  4380  07F6  00C2               	movwf	PROTOCOL_I2C_Send_uint16_t@pbuffer
  4381  07F7  3001               	movlw	1
  4382  07F8  3185  25D4         	fcall	_PROTOCOL_I2C_Send_uint16_t
  4383  07FA  0008               	return
  4384  07FB                     __end_of_PROTOCOL_Send_uint16_t:	
  4385                           
  4386                           	psect	text14
  4387  05D4                     __ptext14:	
  4388 ;; *************** function _PROTOCOL_I2C_Send_uint16_t *****************
  4389 ;; Defined at:
  4390 ;;		line 315 in file "protocol.c"
  4391 ;; Parameters:    Size  Location     Type
  4392 ;;  length          1    wreg     unsigned char 
  4393 ;;  pbuffer         1   34[BANK0 ] PTR unsigned int 
  4394 ;;		 -> PROTOCOL_Send_uint16_t@pbuf(2), 
  4395 ;; Auto vars:     Size  Location     Type
  4396 ;;  length          1   39[BANK0 ] unsigned char 
  4397 ;; Return value:  Size  Location     Type
  4398 ;;                  1    wreg      void 
  4399 ;; Registers used:
  4400 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4401 ;; Tracked objects:
  4402 ;;		On entry : 0/0
  4403 ;;		On exit  : 0/0
  4404 ;;		Unchanged: 0/0
  4405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4406 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4407 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4408 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4409 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4410 ;;Total ram usage:        6 bytes
  4411 ;; Hardware stack levels used:    1
  4412 ;; Hardware stack levels required when called:    8
  4413 ;; This function calls:
  4414 ;;		_PROTOCOL_I2C_Set_TLV
  4415 ;;		_printf
  4416 ;; This function is called by:
  4417 ;;		_PROTOCOL_Send_uint16_t
  4418 ;; This function uses a non-reentrant model
  4419 ;;
  4420                           
  4421                           
  4422                           ;psect for function _PROTOCOL_I2C_Send_uint16_t
  4423  05D4                     _PROTOCOL_I2C_Send_uint16_t:	
  4424                           
  4425                           ;incstack = 0
  4426                           ; Regs used in _PROTOCOL_I2C_Send_uint16_t: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4427                           ;PROTOCOL_I2C_Send_uint16_t@length stored from wreg
  4428  05D4  0020               	movlb	0	; select bank0
  4429  05D5  00C7               	movwf	PROTOCOL_I2C_Send_uint16_t@length
  4430                           
  4431                           ;protocol.c: 316: if (backplane_slave_enabled) {
  4432  05D6  0854               	movf	_backplane_slave_enabled,w
  4433  05D7  1903               	btfsc	3,2
  4434  05D8  2E18               	goto	l2650
  4435                           
  4436                           ;protocol.c: 317: j = 0;
  4437  05D9  01D2               	clrf	_j
  4438                           
  4439                           ;protocol.c: 318: for(i=0; i<length; i++) {
  4440  05DA  01D3               	clrf	_i
  4441  05DB                     l2646:	
  4442  05DB  0847               	movf	PROTOCOL_I2C_Send_uint16_t@length,w
  4443  05DC  0253               	subwf	_i,w
  4444  05DD  1803               	btfsc	3,0
  4445  05DE  2E0C               	goto	l2648
  4446                           
  4447                           ;protocol.c: 319: sendbuf[j++] = (uint8_t)((pbuffer[i] >> 8) & 0x00ff);
  4448  05DF  3553               	lslf	_i,w
  4449  05E0  0742               	addwf	PROTOCOL_I2C_Send_uint16_t@pbuffer,w
  4450  05E1  00C3               	movwf	??_PROTOCOL_I2C_Send_uint16_t
  4451  05E2  0843               	movf	??_PROTOCOL_I2C_Send_uint16_t,w
  4452  05E3  0086               	movwf	6
  4453  05E4  0187               	clrf	7
  4454  05E5  3F40               	moviw [0]fsr1
  4455  05E6  00C4               	movwf	??_PROTOCOL_I2C_Send_uint16_t+1
  4456  05E7  3F41               	moviw [1]fsr1
  4457  05E8  00C5               	movwf	??_PROTOCOL_I2C_Send_uint16_t+2
  4458  05E9  0845               	movf	??_PROTOCOL_I2C_Send_uint16_t+2,w
  4459  05EA  00C6               	movwf	??_PROTOCOL_I2C_Send_uint16_t+3
  4460  05EB  0852               	movf	_j,w
  4461  05EC  3EBE               	addlw	(low (_sendbuf| 0))& (0+255)
  4462  05ED  0086               	movwf	6
  4463  05EE  0187               	clrf	7
  4464  05EF  0846               	movf	??_PROTOCOL_I2C_Send_uint16_t+3,w
  4465  05F0  0081               	movwf	1
  4466  05F1  3001               	movlw	1
  4467  05F2  00C3               	movwf	??_PROTOCOL_I2C_Send_uint16_t
  4468  05F3  0843               	movf	??_PROTOCOL_I2C_Send_uint16_t,w
  4469  05F4  07D2               	addwf	_j,f
  4470                           
  4471                           ;protocol.c: 320: sendbuf[j++] = (uint8_t)(pbuffer[i] & 0x00ff);
  4472  05F5  3553               	lslf	_i,w
  4473  05F6  0742               	addwf	PROTOCOL_I2C_Send_uint16_t@pbuffer,w
  4474  05F7  00C3               	movwf	??_PROTOCOL_I2C_Send_uint16_t
  4475  05F8  0843               	movf	??_PROTOCOL_I2C_Send_uint16_t,w
  4476  05F9  0086               	movwf	6
  4477  05FA  0187               	clrf	7
  4478  05FB  0801               	movf	1,w
  4479  05FC  00C4               	movwf	??_PROTOCOL_I2C_Send_uint16_t+1
  4480  05FD  0852               	movf	_j,w
  4481  05FE  3EBE               	addlw	(low (_sendbuf| 0))& (0+255)
  4482  05FF  0086               	movwf	6
  4483  0600  0187               	clrf	7
  4484  0601  0844               	movf	??_PROTOCOL_I2C_Send_uint16_t+1,w
  4485  0602  0081               	movwf	1
  4486  0603  3001               	movlw	1
  4487  0604  00C3               	movwf	??_PROTOCOL_I2C_Send_uint16_t
  4488  0605  0843               	movf	??_PROTOCOL_I2C_Send_uint16_t,w
  4489  0606  07D2               	addwf	_j,f
  4490  0607  3001               	movlw	1
  4491  0608  00C3               	movwf	??_PROTOCOL_I2C_Send_uint16_t
  4492  0609  0843               	movf	??_PROTOCOL_I2C_Send_uint16_t,w
  4493  060A  07D3               	addwf	_i,f
  4494  060B  2DDB               	goto	l2646
  4495  060C                     l2648:	
  4496                           
  4497                           ;protocol.c: 321: }
  4498                           ;protocol.c: 322: PROTOCOL_I2C_Set_TLV(0x03, length*2, &sendbuf[0]);
  4499  060C  3547               	lslf	PROTOCOL_I2C_Send_uint16_t@length,w
  4500  060D  00C3               	movwf	??_PROTOCOL_I2C_Send_uint16_t
  4501  060E  0843               	movf	??_PROTOCOL_I2C_Send_uint16_t,w
  4502  060F  00A0               	movwf	PROTOCOL_I2C_Set_TLV@length
  4503  0610  30BE               	movlw	(low (_sendbuf| 0))& (0+255)
  4504  0611  00C4               	movwf	??_PROTOCOL_I2C_Send_uint16_t+1
  4505  0612  0844               	movf	??_PROTOCOL_I2C_Send_uint16_t+1,w
  4506  0613  00A1               	movwf	PROTOCOL_I2C_Set_TLV@pbuffer
  4507  0614  3003               	movlw	3
  4508  0615  318E  2664         	fcall	_PROTOCOL_I2C_Set_TLV
  4509                           
  4510                           ;protocol.c: 323: } else {
  4511  0617  0008               	return
  4512  0618                     l2650:	
  4513                           
  4514                           ;protocol.c: 324: length--;
  4515  0618  3001               	movlw	1
  4516  0619  0020               	movlb	0	; select bank0
  4517  061A  02C7               	subwf	PROTOCOL_I2C_Send_uint16_t@length,f
  4518                           
  4519                           ;protocol.c: 325: for(i=0; i<length; i++) printf("%u,", pbuffer[i]);
  4520  061B  01D3               	clrf	_i
  4521  061C                     l2658:	
  4522  061C  0847               	movf	PROTOCOL_I2C_Send_uint16_t@length,w
  4523  061D  0253               	subwf	_i,w
  4524  061E  1803               	btfsc	3,0
  4525  061F  2E37               	goto	l2660
  4526  0620  306B               	movlw	low (STR_19| (0+32768))
  4527  0621  00AE               	movwf	printf@f
  4528  0622  3084               	movlw	high (STR_19| (0+32768))
  4529  0623  00AF               	movwf	printf@f+1
  4530  0624  3553               	lslf	_i,w
  4531  0625  0742               	addwf	PROTOCOL_I2C_Send_uint16_t@pbuffer,w
  4532  0626  00C3               	movwf	??_PROTOCOL_I2C_Send_uint16_t
  4533  0627  0843               	movf	??_PROTOCOL_I2C_Send_uint16_t,w
  4534  0628  0086               	movwf	6
  4535  0629  0187               	clrf	7
  4536  062A  3F40               	moviw [0]fsr1
  4537  062B  00B0               	movwf	?_printf+2
  4538  062C  3F41               	moviw [1]fsr1
  4539  062D  00B1               	movwf	?_printf+3
  4540  062E  3180  2071  3185   	fcall	_printf
  4541  0631  3001               	movlw	1
  4542  0632  0020               	movlb	0	; select bank0
  4543  0633  00C3               	movwf	??_PROTOCOL_I2C_Send_uint16_t
  4544  0634  0843               	movf	??_PROTOCOL_I2C_Send_uint16_t,w
  4545  0635  07D3               	addwf	_i,f
  4546  0636  2E1C               	goto	l2658
  4547  0637                     l2660:	
  4548                           
  4549                           ;protocol.c: 326: printf("%u\n", pbuffer[i]);
  4550  0637  3063               	movlw	low (STR_20| (0+32768))
  4551  0638  00AE               	movwf	printf@f
  4552  0639  3084               	movlw	high (STR_20| (0+32768))
  4553  063A  00AF               	movwf	printf@f+1
  4554  063B  3553               	lslf	_i,w
  4555  063C  0742               	addwf	PROTOCOL_I2C_Send_uint16_t@pbuffer,w
  4556  063D  00C3               	movwf	??_PROTOCOL_I2C_Send_uint16_t
  4557  063E  0843               	movf	??_PROTOCOL_I2C_Send_uint16_t,w
  4558  063F  0086               	movwf	6
  4559  0640  0187               	clrf	7
  4560  0641  3F40               	moviw [0]fsr1
  4561  0642  00B0               	movwf	?_printf+2
  4562  0643  3F41               	moviw [1]fsr1
  4563  0644  00B1               	movwf	?_printf+3
  4564  0645  3180  2071         	fcall	_printf
  4565  0647  0008               	return
  4566  0648                     __end_of_PROTOCOL_I2C_Send_uint16_t:	
  4567                           
  4568                           	psect	text15
  4569  0071                     __ptext15:	
  4570 ;; *************** function _printf *****************
  4571 ;; Defined at:
  4572 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  4573 ;; Parameters:    Size  Location     Type
  4574 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  4575 ;;		 -> STR_48(10), STR_47(9), STR_46(10), STR_45(9), 
  4576 ;;		 -> STR_44(4), STR_43(4), STR_42(4), STR_41(4), 
  4577 ;;		 -> STR_40(4), STR_39(4), STR_38(4), STR_37(4), 
  4578 ;;		 -> STR_36(14), STR_35(9), STR_34(10), STR_33(9), 
  4579 ;;		 -> STR_32(10), STR_31(9), STR_30(7), STR_29(4), 
  4580 ;;		 -> STR_28(4), STR_27(9), STR_26(4), STR_25(4), 
  4581 ;;		 -> STR_24(10), STR_23(4), STR_22(4), STR_21(8), 
  4582 ;;		 -> STR_20(4), STR_19(4), STR_18(9), STR_17(6), 
  4583 ;;		 -> STR_16(10), STR_13(10), STR_9(10), STR_5(10), 
  4584 ;;		 -> STR_3(5), 
  4585 ;; Auto vars:     Size  Location     Type
  4586 ;;  tmpval          4    0        struct .
  4587 ;;  width           2   31[BANK0 ] int 
  4588 ;;  len             2   28[BANK0 ] unsigned int 
  4589 ;;  val             2   26[BANK0 ] unsigned int 
  4590 ;;  cp              2   23[BANK0 ] PTR const unsigned char 
  4591 ;;		 -> STR_10(4), buf(48), STR_2(7), ROM(8192), 
  4592 ;;		 -> printf@c(1), STR_1(11), 
  4593 ;;  c               1   33[BANK0 ] char 
  4594 ;;  flag            1   30[BANK0 ] unsigned char 
  4595 ;;  ap              1   25[BANK0 ] PTR void [1]
  4596 ;;		 -> ?_printf(2), 
  4597 ;;  prec            1   22[BANK0 ] char 
  4598 ;; Return value:  Size  Location     Type
  4599 ;;                  2   14[BANK0 ] int 
  4600 ;; Registers used:
  4601 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4602 ;; Tracked objects:
  4603 ;;		On entry : 0/0
  4604 ;;		On exit  : 0/0
  4605 ;;		Unchanged: 0/0
  4606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4607 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4608 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4609 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4610 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4611 ;;Total ram usage:       20 bytes
  4612 ;; Hardware stack levels used:    1
  4613 ;; Hardware stack levels required when called:    7
  4614 ;; This function calls:
  4615 ;;		___lwdiv
  4616 ;;		___lwmod
  4617 ;;		___wmul
  4618 ;;		_isdigit
  4619 ;;		_putch
  4620 ;; This function is called by:
  4621 ;;		_PROTOCOL_Loop
  4622 ;;		_PROTOCOL_I2C_Send_uint16_t
  4623 ;; This function uses a non-reentrant model
  4624 ;;
  4625                           
  4626                           
  4627                           ;psect for function _printf
  4628  0071                     _printf:	
  4629                           
  4630                           ;doprnt.c: 466: va_list ap;
  4631                           ;doprnt.c: 499: signed char c;
  4632                           ;doprnt.c: 501: int width;
  4633                           ;doprnt.c: 506: signed char prec;
  4634                           ;doprnt.c: 508: unsigned char flag;
  4635                           ;doprnt.c: 523: union {
  4636                           ;doprnt.c: 524: unsigned long vd;
  4637                           ;doprnt.c: 525: double integ;
  4638                           ;doprnt.c: 526: } tmpval;
  4639                           ;doprnt.c: 528: unsigned int val;
  4640                           ;doprnt.c: 529: unsigned len;
  4641                           ;doprnt.c: 530: const char * cp;
  4642                           ;doprnt.c: 533: *ap = __va_start();
  4643                           
  4644                           ;incstack = 0
  4645                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4646  0071  3030               	movlw	(low ((?_printf| 0+2)))& (0+255)
  4647  0072  0020               	movlb	0	; select bank0
  4648  0073  00B2               	movwf	??_printf
  4649  0074  0832               	movf	??_printf,w
  4650  0075  00B9               	movwf	printf@ap
  4651  0076                     l2624:	
  4652                           ;doprnt.c: 536: while(c = *f++) {
  4653                           
  4654  0076  0020               	movlb	0	; select bank0
  4655  0077  082F               	movf	printf@f+1,w
  4656  0078  00B3               	movwf	??_printf+1
  4657  0079  082E               	movf	printf@f,w
  4658  007A  00B2               	movwf	??_printf
  4659  007B  0AAE               	incf	printf@f,f
  4660  007C  1903               	skipnz
  4661  007D  0AAF               	incf	printf@f+1,f
  4662  007E  0832               	movf	??_printf,w
  4663  007F  0084               	movwf	4
  4664  0080  0833               	movf	??_printf+1,w
  4665  0081  0085               	movwf	5
  4666  0082  0800               	movf	0,w	;code access
  4667  0083  00B4               	movwf	??_printf+2
  4668  0084  0834               	movf	??_printf+2,w
  4669  0085  00C1               	movwf	printf@c
  4670  0086  0841               	movf	printf@c,w
  4671  0087  1903               	btfsc	3,2
  4672  0088  0008               	return
  4673                           
  4674                           ;doprnt.c: 538: if(c != '%')
  4675  0089  3025               	movlw	37
  4676  008A  0641               	xorwf	printf@c,w
  4677  008B  1903               	btfsc	3,2
  4678  008C  2892               	goto	l2500
  4679                           
  4680                           ;doprnt.c: 540: {
  4681                           ;doprnt.c: 541: (putch(c) );
  4682  008D  0841               	movf	printf@c,w
  4683  008E  318D  25A7  3180   	fcall	_putch
  4684                           
  4685                           ;doprnt.c: 542: continue;
  4686  0091  2876               	goto	l2624
  4687  0092                     l2500:	
  4688                           
  4689                           ;doprnt.c: 543: }
  4690                           ;doprnt.c: 546: width = 0;
  4691  0092  0020               	movlb	0	; select bank0
  4692  0093  01BF               	clrf	printf@width
  4693  0094  01C0               	clrf	printf@width+1
  4694                           
  4695                           ;doprnt.c: 548: flag = 0;
  4696  0095  01BE               	clrf	printf@flag
  4697                           
  4698                           ;doprnt.c: 551: switch(*f) {
  4699                           
  4700                           ;doprnt.c: 550: for(;;) {
  4701  0096  289C               	goto	l2506
  4702  0097                     l473:	
  4703                           ;doprnt.c: 579: case '0':
  4704                           
  4705                           
  4706                           ;doprnt.c: 580: flag |= 0x04;
  4707  0097  153E               	bsf	printf@flag,2
  4708                           
  4709                           ;doprnt.c: 581: f++;
  4710  0098  3001               	movlw	1
  4711  0099  07AE               	addwf	printf@f,f
  4712  009A  3000               	movlw	0
  4713  009B  3DAF               	addwfc	printf@f+1,f
  4714  009C                     l2506:	
  4715                           ;doprnt.c: 584: }
  4716                           
  4717                           ;doprnt.c: 582: continue;
  4718                           
  4719  009C  082E               	movf	printf@f,w
  4720  009D  0084               	movwf	4
  4721  009E  082F               	movf	printf@f+1,w
  4722  009F  0085               	movwf	5
  4723  00A0  0800               	movf	0,w	;code access
  4724                           
  4725                           ; Switch size 1, requested type "space"
  4726                           ; Number of cases is 1, Range of values is 48 to 48
  4727                           ; switch strategies available:
  4728                           ; Name         Instructions Cycles
  4729                           ; simple_byte            4     3 (average)
  4730                           ; direct_byte           11     9 (fixed)
  4731                           ; jumptable            263     9 (fixed)
  4732                           ;	Chosen strategy is simple_byte
  4733  00A1  3A30               	xorlw	48	; case 48
  4734  00A2  1903               	skipnz
  4735  00A3  2897               	goto	l473
  4736  00A4  28A5               	goto	l2508
  4737  00A5                     l2508:	
  4738                           ;doprnt.c: 586: }
  4739                           
  4740                           ;doprnt.c: 585: break;
  4741                           
  4742                           
  4743                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4744  00A5  082E               	movf	printf@f,w
  4745  00A6  0084               	movwf	4
  4746  00A7  082F               	movf	printf@f+1,w
  4747  00A8  0085               	movwf	5
  4748  00A9  0800               	movf	0,w	;code access
  4749  00AA  318E  2636  3180   	fcall	_isdigit
  4750  00AD  1C03               	btfss	3,0
  4751  00AE  2946               	goto	l2556
  4752                           
  4753                           ;doprnt.c: 598: width = 0;
  4754  00AF  0020               	movlb	0	; select bank0
  4755  00B0  01BF               	clrf	printf@width
  4756  00B1  01C0               	clrf	printf@width+1
  4757  00B2                     l2512:	
  4758                           ;doprnt.c: 599: do {
  4759                           
  4760                           
  4761                           ;doprnt.c: 600: width *= 10;
  4762  00B2  300A               	movlw	10
  4763  00B3  0020               	movlb	0	; select bank0
  4764  00B4  00A0               	movwf	___wmul@multiplier
  4765  00B5  3000               	movlw	0
  4766  00B6  00A1               	movwf	___wmul@multiplier+1
  4767  00B7  0840               	movf	printf@width+1,w
  4768  00B8  00A3               	movwf	___wmul@multiplicand+1
  4769  00B9  083F               	movf	printf@width,w
  4770  00BA  00A2               	movwf	___wmul@multiplicand
  4771  00BB  318E  26CD  3180   	fcall	___wmul
  4772  00BE  0020               	movlb	0	; select bank0
  4773  00BF  0821               	movf	?___wmul+1,w
  4774  00C0  00C0               	movwf	printf@width+1
  4775  00C1  0820               	movf	?___wmul,w
  4776  00C2  00BF               	movwf	printf@width
  4777                           
  4778                           ;doprnt.c: 601: width += *f++ - '0';
  4779  00C3  082E               	movf	printf@f,w
  4780  00C4  0084               	movwf	4
  4781  00C5  082F               	movf	printf@f+1,w
  4782  00C6  0085               	movwf	5
  4783  00C7  0800               	movf	0,w	;code access
  4784  00C8  3ED0               	addlw	208
  4785  00C9  00B2               	movwf	??_printf
  4786  00CA  30FF               	movlw	255
  4787  00CB  1803               	skipnc
  4788  00CC  3000               	movlw	0
  4789  00CD  00B3               	movwf	??_printf+1
  4790  00CE  0832               	movf	??_printf,w
  4791  00CF  07BF               	addwf	printf@width,f
  4792  00D0  0833               	movf	??_printf+1,w
  4793  00D1  3DC0               	addwfc	printf@width+1,f
  4794  00D2  3001               	movlw	1
  4795  00D3  07AE               	addwf	printf@f,f
  4796  00D4  3000               	movlw	0
  4797  00D5  3DAF               	addwfc	printf@f+1,f
  4798                           
  4799                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4800  00D6  082E               	movf	printf@f,w
  4801  00D7  0084               	movwf	4
  4802  00D8  082F               	movf	printf@f+1,w
  4803  00D9  0085               	movwf	5
  4804  00DA  0800               	movf	0,w	;code access
  4805  00DB  318E  2636  3180   	fcall	_isdigit
  4806  00DE  1C03               	btfss	3,0
  4807  00DF  2946               	goto	l2556
  4808  00E0  28B2               	goto	l2512
  4809  00E1                     l2520:	
  4810                           ;doprnt.c: 728: case 's':
  4811                           
  4812                           ;doprnt.c: 698: case 'i':
  4813                           ;doprnt.c: 699: break;
  4814                           
  4815                           ;doprnt.c: 697: case 'd':
  4816                           
  4817                           ;doprnt.c: 638: goto alldone;
  4818                           
  4819                           ;doprnt.c: 637: case 0:
  4820                           
  4821                           ;doprnt.c: 608: }
  4822                           ;doprnt.c: 635: switch(c = *f++) {
  4823                           
  4824                           
  4825                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  4826  00E1  0020               	movlb	0	; select bank0
  4827  00E2  0839               	movf	printf@ap,w
  4828  00E3  0086               	movwf	6
  4829  00E4  0187               	clrf	7
  4830  00E5  3F40               	moviw [0]fsr1
  4831  00E6  00B7               	movwf	printf@cp
  4832  00E7  3F41               	moviw [1]fsr1
  4833  00E8  00B8               	movwf	printf@cp+1
  4834  00E9  3002               	movlw	2
  4835  00EA  00B2               	movwf	??_printf
  4836  00EB  0832               	movf	??_printf,w
  4837  00EC  07B9               	addwf	printf@ap,f
  4838                           
  4839                           ;doprnt.c: 740: if(!cp)
  4840  00ED  0837               	movf	printf@cp,w
  4841  00EE  0438               	iorwf	printf@cp+1,w
  4842  00EF  1D03               	btfss	3,2
  4843  00F0  28F5               	goto	l2528
  4844                           
  4845                           ;doprnt.c: 741: cp = "(null)";
  4846  00F1  3051               	movlw	low (STR_2| (0+32768))
  4847  00F2  00B7               	movwf	printf@cp
  4848  00F3  3084               	movlw	high (STR_2| (0+32768))
  4849  00F4  00B8               	movwf	printf@cp+1
  4850  00F5                     l2528:	
  4851                           
  4852                           ;doprnt.c: 745: len = 0;
  4853  00F5  01BC               	clrf	printf@len
  4854  00F6  01BD               	clrf	printf@len+1
  4855  00F7                     l2532:	
  4856                           ;doprnt.c: 746: while(cp[len])
  4857                           
  4858  00F7  0837               	movf	printf@cp,w
  4859  00F8  073C               	addwf	printf@len,w
  4860  00F9  0084               	movwf	4
  4861  00FA  0838               	movf	printf@cp+1,w
  4862  00FB  3D3D               	addwfc	printf@len+1,w
  4863  00FC  0085               	movwf	5
  4864  00FD  0012               	moviw fsr0++
  4865  00FE  1903               	btfsc	3,2
  4866  00FF  2905               	goto	l2534
  4867                           
  4868                           ;doprnt.c: 747: len++;
  4869  0100  3001               	movlw	1
  4870  0101  07BC               	addwf	printf@len,f
  4871  0102  3000               	movlw	0
  4872  0103  3DBD               	addwfc	printf@len+1,f
  4873  0104  28F7               	goto	l2532
  4874  0105                     l2534:	
  4875                           ;doprnt.c: 750: dostring:
  4876                           
  4877                           
  4878                           ;doprnt.c: 757: if(width > len)
  4879  0105  0840               	movf	printf@width+1,w
  4880  0106  023D               	subwf	printf@len+1,w
  4881  0107  1D03               	skipz
  4882  0108  290B               	goto	u1485
  4883  0109  083F               	movf	printf@width,w
  4884  010A  023C               	subwf	printf@len,w
  4885  010B                     u1485:	
  4886  010B  1803               	skipnc
  4887  010C  2912               	goto	l2538
  4888                           
  4889                           ;doprnt.c: 758: width -= len;
  4890  010D  083C               	movf	printf@len,w
  4891  010E  02BF               	subwf	printf@width,f
  4892  010F  083D               	movf	printf@len+1,w
  4893  0110  3BC0               	subwfb	printf@width+1,f
  4894  0111  2914               	goto	l2542
  4895  0112                     l2538:	
  4896                           
  4897                           ;doprnt.c: 759: else
  4898                           ;doprnt.c: 760: width = 0;
  4899  0112  01BF               	clrf	printf@width
  4900  0113  01C0               	clrf	printf@width+1
  4901  0114                     l2542:	
  4902                           ;doprnt.c: 764: while(width--)
  4903                           
  4904  0114  30FF               	movlw	255
  4905  0115  0020               	movlb	0	; select bank0
  4906  0116  07BF               	addwf	printf@width,f
  4907  0117  30FF               	movlw	255
  4908  0118  3DC0               	addwfc	printf@width+1,f
  4909  0119  0A3F               	incf	printf@width,w
  4910  011A  1903               	btfsc	3,2
  4911  011B  0A40               	incf	printf@width+1,w
  4912  011C  1903               	btfsc	3,2
  4913  011D  2930               	goto	l2548
  4914                           
  4915                           ;doprnt.c: 765: (putch(' ') );
  4916  011E  3020               	movlw	32
  4917  011F  318D  25A7  3180   	fcall	_putch
  4918  0122  2914               	goto	l2542
  4919  0123                     l2544:	
  4920                           ;doprnt.c: 767: while(len--)
  4921                           
  4922                           
  4923                           ;doprnt.c: 768: (putch(*cp++) );
  4924  0123  0837               	movf	printf@cp,w
  4925  0124  0084               	movwf	4
  4926  0125  0838               	movf	printf@cp+1,w
  4927  0126  0085               	movwf	5
  4928  0127  0800               	movf	0,w	;code access
  4929  0128  318D  25A7  3180   	fcall	_putch
  4930  012B  3001               	movlw	1
  4931  012C  0020               	movlb	0	; select bank0
  4932  012D  07B7               	addwf	printf@cp,f
  4933  012E  3000               	movlw	0
  4934  012F  3DB8               	addwfc	printf@cp+1,f
  4935  0130                     l2548:	
  4936  0130  3001               	movlw	1
  4937  0131  02BC               	subwf	printf@len,f
  4938  0132  3000               	movlw	0
  4939  0133  3BBD               	subwfb	printf@len+1,f
  4940  0134  0A3C               	incf	printf@len,w
  4941  0135  1D03               	skipz
  4942  0136  2923               	goto	l2544
  4943  0137  0A3D               	incf	printf@len+1,w
  4944  0138  1903               	btfsc	3,2
  4945  0139  2876               	goto	l2624
  4946  013A  2923               	goto	l2544
  4947  013B                     l2550:	
  4948                           ;doprnt.c: 802: default:
  4949                           
  4950                           ;doprnt.c: 774: continue;
  4951                           
  4952                           
  4953                           ;doprnt.c: 805: cp = (char *)&c;
  4954  013B  3041               	movlw	low printf@c
  4955  013C  00B7               	movwf	printf@cp
  4956  013D  3000               	movlw	high printf@c
  4957  013E  00B8               	movwf	printf@cp+1
  4958                           
  4959                           ;doprnt.c: 806: len = 1;
  4960  013F  3001               	movlw	1
  4961  0140  00BC               	movwf	printf@len
  4962  0141  3000               	movlw	0
  4963  0142  00BD               	movwf	printf@len+1
  4964                           
  4965                           ;doprnt.c: 807: goto dostring;
  4966  0143  2905               	goto	l2534
  4967  0144                     l501:	
  4968                           ;doprnt.c: 817: case 'u':
  4969                           
  4970                           
  4971                           ;doprnt.c: 818: flag |= 0x40;
  4972  0144  173E               	bsf	printf@flag,6
  4973                           
  4974                           ;doprnt.c: 822: }
  4975                           
  4976                           ;doprnt.c: 819: break;
  4977  0145  2964               	goto	l485
  4978  0146                     l2556:	
  4979  0146  0020               	movlb	0	; select bank0
  4980  0147  082F               	movf	printf@f+1,w
  4981  0148  00B3               	movwf	??_printf+1
  4982  0149  082E               	movf	printf@f,w
  4983  014A  00B2               	movwf	??_printf
  4984  014B  0AAE               	incf	printf@f,f
  4985  014C  1903               	skipnz
  4986  014D  0AAF               	incf	printf@f+1,f
  4987  014E  0832               	movf	??_printf,w
  4988  014F  0084               	movwf	4
  4989  0150  0833               	movf	??_printf+1,w
  4990  0151  0085               	movwf	5
  4991  0152  0800               	movf	0,w	;code access
  4992  0153  00C1               	movwf	printf@c
  4993                           
  4994                           ; Switch size 1, requested type "space"
  4995                           ; Number of cases is 5, Range of values is 0 to 117
  4996                           ; switch strategies available:
  4997                           ; Name         Instructions Cycles
  4998                           ; simple_byte           16     9 (average)
  4999                           ; direct_byte          242     6 (fixed)
  5000                           ; jumptable            260     6 (fixed)
  5001                           ;	Chosen strategy is simple_byte
  5002  0154  3A00               	xorlw	0	; case 0
  5003  0155  1903               	skipnz
  5004  0156  2A45               	goto	l525
  5005  0157  3A64               	xorlw	100	; case 100
  5006  0158  1903               	skipnz
  5007  0159  2964               	goto	l485
  5008  015A  3A0D               	xorlw	13	; case 105
  5009  015B  1903               	skipnz
  5010  015C  2964               	goto	l485
  5011  015D  3A1A               	xorlw	26	; case 115
  5012  015E  1903               	skipnz
  5013  015F  28E1               	goto	l2520
  5014  0160  3A06               	xorlw	6	; case 117
  5015  0161  1903               	skipnz
  5016  0162  2944               	goto	l501
  5017  0163  293B               	goto	l2550
  5018  0164                     l485:	
  5019                           
  5020                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  5021  0164  0020               	movlb	0	; select bank0
  5022  0165  1B3E               	btfsc	printf@flag,6
  5023  0166  297E               	goto	l2568
  5024                           
  5025                           ;doprnt.c: 1253: {
  5026                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5027  0167  0839               	movf	printf@ap,w
  5028  0168  0086               	movwf	6
  5029  0169  0187               	clrf	7
  5030  016A  3F40               	moviw [0]fsr1
  5031  016B  00BA               	movwf	printf@val
  5032  016C  3F41               	moviw [1]fsr1
  5033  016D  00BB               	movwf	printf@val+1
  5034  016E  3002               	movlw	2
  5035  016F  00B2               	movwf	??_printf
  5036  0170  0832               	movf	??_printf,w
  5037  0171  07B9               	addwf	printf@ap,f
  5038                           
  5039                           ;doprnt.c: 1261: if((int)val < 0) {
  5040  0172  1FBB               	btfss	printf@val+1,7
  5041  0173  2989               	goto	l2572
  5042                           
  5043                           ;doprnt.c: 1262: flag |= 0x03;
  5044  0174  3003               	movlw	3
  5045  0175  00B2               	movwf	??_printf
  5046  0176  0832               	movf	??_printf,w
  5047  0177  04BE               	iorwf	printf@flag,f
  5048                           
  5049                           ;doprnt.c: 1263: val = -val;
  5050  0178  09BA               	comf	printf@val,f
  5051  0179  09BB               	comf	printf@val+1,f
  5052  017A  0ABA               	incf	printf@val,f
  5053  017B  1903               	skipnz
  5054  017C  0ABB               	incf	printf@val+1,f
  5055                           
  5056                           ;doprnt.c: 1264: }
  5057                           ;doprnt.c: 1266: }
  5058  017D  2989               	goto	l2572
  5059  017E                     l2568:	
  5060                           
  5061                           ;doprnt.c: 1268: else
  5062                           ;doprnt.c: 1273: {
  5063                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5064  017E  0839               	movf	printf@ap,w
  5065  017F  0086               	movwf	6
  5066  0180  0187               	clrf	7
  5067  0181  3F40               	moviw [0]fsr1
  5068  0182  00BA               	movwf	printf@val
  5069  0183  3F41               	moviw [1]fsr1
  5070  0184  00BB               	movwf	printf@val+1
  5071  0185  3002               	movlw	2
  5072  0186  00B2               	movwf	??_printf
  5073  0187  0832               	movf	??_printf,w
  5074  0188  07B9               	addwf	printf@ap,f
  5075  0189                     l2572:	
  5076                           
  5077                           ;doprnt.c: 1287: }
  5078                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5079  0189  01C1               	clrf	printf@c
  5080  018A  0AC1               	incf	printf@c,f
  5081  018B  3005               	movlw	5
  5082  018C  0641               	xorwf	printf@c,w
  5083  018D  1903               	btfsc	3,2
  5084  018E  29AE               	goto	l2584
  5085  018F                     l2578:	
  5086                           
  5087                           ;doprnt.c: 1306: if(val < dpowers[c])
  5088  018F  0841               	movf	printf@c,w
  5089  0190  00B2               	movwf	??_printf
  5090  0191  01B3               	clrf	??_printf+1
  5091  0192  35B2               	lslf	??_printf,f
  5092  0193  0DB3               	rlf	??_printf+1,f
  5093  0194  30CF               	movlw	low (_dpowers| (0+32768))
  5094  0195  0732               	addwf	??_printf,w
  5095  0196  0084               	movwf	4
  5096  0197  3083               	movlw	high (_dpowers| (0+32768))
  5097  0198  3D33               	addwfc	??_printf+1,w
  5098  0199  0085               	movwf	5
  5099  019A  3F00               	moviw [0]fsr0
  5100  019B  00B4               	movwf	??_printf+2
  5101  019C  3F01               	moviw [1]fsr0
  5102  019D  00B5               	movwf	??_printf+3
  5103  019E  0835               	movf	??_printf+3,w
  5104  019F  023B               	subwf	printf@val+1,w
  5105  01A0  1D03               	skipz
  5106  01A1  29A4               	goto	u1545
  5107  01A2  0834               	movf	??_printf+2,w
  5108  01A3  023A               	subwf	printf@val,w
  5109  01A4                     u1545:	
  5110  01A4  1C03               	btfss	3,0
  5111  01A5  29AE               	goto	l2584
  5112                           
  5113                           ;doprnt.c: 1307: break;
  5114  01A6  3001               	movlw	1
  5115  01A7  00B2               	movwf	??_printf
  5116  01A8  0832               	movf	??_printf,w
  5117  01A9  07C1               	addwf	printf@c,f
  5118  01AA  3005               	movlw	5
  5119  01AB  0641               	xorwf	printf@c,w
  5120  01AC  1D03               	btfss	3,2
  5121  01AD  298F               	goto	l2578
  5122  01AE                     l2584:	
  5123                           
  5124                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5125  01AE  083F               	movf	printf@width,w
  5126  01AF  0440               	iorwf	printf@width+1,w
  5127  01B0  1903               	btfsc	3,2
  5128  01B1  29BA               	goto	l508
  5129  01B2  083E               	movf	printf@flag,w
  5130  01B3  3903               	andlw	3
  5131  01B4  1903               	btfsc	3,2
  5132  01B5  29BA               	goto	l508
  5133                           
  5134                           ;doprnt.c: 1346: width--;
  5135  01B6  30FF               	movlw	255
  5136  01B7  07BF               	addwf	printf@width,f
  5137  01B8  30FF               	movlw	255
  5138  01B9  3DC0               	addwfc	printf@width+1,f
  5139  01BA                     l508:	
  5140                           
  5141                           ;doprnt.c: 1381: if(width > c)
  5142  01BA  0841               	movf	printf@c,w
  5143  01BB  00B2               	movwf	??_printf
  5144  01BC  01B3               	clrf	??_printf+1
  5145  01BD  1BB2               	btfsc	??_printf,7
  5146  01BE  03B3               	decf	??_printf+1,f
  5147  01BF  0833               	movf	??_printf+1,w
  5148  01C0  3A80               	xorlw	128
  5149  01C1  00B4               	movwf	??_printf+2
  5150  01C2  0840               	movf	printf@width+1,w
  5151  01C3  3A80               	xorlw	128
  5152  01C4  0234               	subwf	??_printf+2,w
  5153  01C5  1D03               	skipz
  5154  01C6  29C9               	goto	u1585
  5155  01C7  083F               	movf	printf@width,w
  5156  01C8  0232               	subwf	??_printf,w
  5157  01C9                     u1585:	
  5158  01C9  1803               	skipnc
  5159  01CA  29D6               	goto	l2592
  5160                           
  5161                           ;doprnt.c: 1382: width -= c;
  5162  01CB  0020               	movlb	0	; select bank0
  5163  01CC  0841               	movf	printf@c,w
  5164  01CD  00B2               	movwf	??_printf
  5165  01CE  01B3               	clrf	??_printf+1
  5166  01CF  1BB2               	btfsc	??_printf,7
  5167  01D0  03B3               	decf	??_printf+1,f
  5168  01D1  0832               	movf	??_printf,w
  5169  01D2  02BF               	subwf	printf@width,f
  5170  01D3  0833               	movf	??_printf+1,w
  5171  01D4  3BC0               	subwfb	printf@width+1,f
  5172  01D5  29D9               	goto	l2594
  5173  01D6                     l2592:	
  5174                           
  5175                           ;doprnt.c: 1383: else
  5176                           ;doprnt.c: 1384: width = 0;
  5177  01D6  0020               	movlb	0	; select bank0
  5178  01D7  01BF               	clrf	printf@width
  5179  01D8  01C0               	clrf	printf@width+1
  5180  01D9                     l2594:	
  5181                           
  5182                           ;doprnt.c: 1387: if(flag & 0x04) {
  5183  01D9  1D3E               	btfss	printf@flag,2
  5184  01DA  29F2               	goto	l2606
  5185                           
  5186                           ;doprnt.c: 1392: if(flag & 0x03)
  5187  01DB  083E               	movf	printf@flag,w
  5188  01DC  3903               	andlw	3
  5189  01DD  1903               	btfsc	3,2
  5190  01DE  29E3               	goto	l2600
  5191                           
  5192                           ;doprnt.c: 1393: (putch('-') );
  5193  01DF  302D               	movlw	45
  5194  01E0  318D  25A7  3180   	fcall	_putch
  5195  01E3                     l2600:	
  5196                           
  5197                           ;doprnt.c: 1415: if(width)
  5198  01E3  0020               	movlb	0	; select bank0
  5199  01E4                     L2:	
  5200  01E4  083F               	movf	printf@width,w
  5201  01E5  0440               	iorwf	printf@width+1,w
  5202  01E6  1903               	btfsc	3,2
  5203  01E7  2A0B               	goto	l2616
  5204                           
  5205                           ;doprnt.c: 1417: (putch('0') );
  5206                           
  5207                           ;doprnt.c: 1416: do
  5208  01E8  3030               	movlw	48
  5209  01E9  318D  25A7  3180   	fcall	_putch
  5210                           
  5211                           ;doprnt.c: 1418: while(--width);
  5212  01EC  30FF               	movlw	255
  5213  01ED  0020               	movlb	0	; select bank0
  5214  01EE  07BF               	addwf	printf@width,f
  5215  01EF  30FF               	movlw	255
  5216  01F0  3DC0               	addwfc	printf@width+1,f
  5217  01F1  29E4               	goto	L2
  5218  01F2                     l2606:	
  5219                           ;doprnt.c: 1420: } else
  5220                           
  5221                           
  5222                           ;doprnt.c: 1422: {
  5223                           ;doprnt.c: 1424: if(width
  5224                           ;doprnt.c: 1428: )
  5225  01F2  083F               	movf	printf@width,w
  5226  01F3  0440               	iorwf	printf@width+1,w
  5227  01F4  1903               	btfsc	3,2
  5228  01F5  2A03               	goto	l2612
  5229  01F6                     l2608:	
  5230                           ;doprnt.c: 1429: do
  5231                           
  5232                           
  5233                           ;doprnt.c: 1430: (putch(' ') );
  5234  01F6  3020               	movlw	32
  5235  01F7  318D  25A7  3180   	fcall	_putch
  5236                           
  5237                           ;doprnt.c: 1431: while(--width);
  5238  01FA  30FF               	movlw	255
  5239  01FB  0020               	movlb	0	; select bank0
  5240  01FC  07BF               	addwf	printf@width,f
  5241  01FD  30FF               	movlw	255
  5242  01FE  3DC0               	addwfc	printf@width+1,f
  5243  01FF  083F               	movf	printf@width,w
  5244  0200  0440               	iorwf	printf@width+1,w
  5245  0201  1D03               	btfss	3,2
  5246  0202  29F6               	goto	l2608
  5247  0203                     l2612:	
  5248                           
  5249                           ;doprnt.c: 1438: if(flag & 0x03)
  5250  0203  083E               	movf	printf@flag,w
  5251  0204  3903               	andlw	3
  5252  0205  1903               	btfsc	3,2
  5253  0206  2A0B               	goto	l2616
  5254                           
  5255                           ;doprnt.c: 1439: (putch('-') );
  5256  0207  302D               	movlw	45
  5257  0208  318D  25A7  3180   	fcall	_putch
  5258  020B                     l2616:	
  5259                           
  5260                           ;doprnt.c: 1469: }
  5261                           ;doprnt.c: 1472: prec = c;
  5262  020B  0020               	movlb	0	; select bank0
  5263  020C  0841               	movf	printf@c,w
  5264  020D  00B2               	movwf	??_printf
  5265  020E  0832               	movf	??_printf,w
  5266  020F  00B6               	movwf	printf@prec
  5267  0210                     l2622:	
  5268                           ;doprnt.c: 1474: while(prec--) {
  5269                           
  5270  0210  30FF               	movlw	255
  5271  0211  0020               	movlb	0	; select bank0
  5272  0212  00B2               	movwf	??_printf
  5273  0213  0832               	movf	??_printf,w
  5274  0214  07B6               	addwf	printf@prec,f
  5275  0215  0A36               	incf	printf@prec,w
  5276  0216  1903               	btfsc	3,2
  5277  0217  2876               	goto	l2624
  5278                           
  5279                           ;doprnt.c: 1478: {
  5280                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5281  0218  300A               	movlw	10
  5282  0219  00A8               	movwf	___lwmod@divisor
  5283  021A  3000               	movlw	0
  5284  021B  00A9               	movwf	___lwmod@divisor+1
  5285  021C  0836               	movf	printf@prec,w
  5286  021D  00B2               	movwf	??_printf
  5287  021E  01B3               	clrf	??_printf+1
  5288  021F  35B2               	lslf	??_printf,f
  5289  0220  0DB3               	rlf	??_printf+1,f
  5290  0221  30CF               	movlw	low (_dpowers| (0+32768))
  5291  0222  0732               	addwf	??_printf,w
  5292  0223  0084               	movwf	4
  5293  0224  3083               	movlw	high (_dpowers| (0+32768))
  5294  0225  3D33               	addwfc	??_printf+1,w
  5295  0226  0085               	movwf	5
  5296  0227  3F00               	moviw [0]fsr0
  5297  0228  00A0               	movwf	___lwdiv@divisor
  5298  0229  3F01               	moviw [1]fsr0
  5299  022A  00A1               	movwf	___lwdiv@divisor+1
  5300  022B  083B               	movf	printf@val+1,w
  5301  022C  00A3               	movwf	___lwdiv@dividend+1
  5302  022D  083A               	movf	printf@val,w
  5303  022E  00A2               	movwf	___lwdiv@dividend
  5304  022F  3187  27B5  3180   	fcall	___lwdiv
  5305  0232  0020               	movlb	0	; select bank0
  5306  0233  0821               	movf	?___lwdiv+1,w
  5307  0234  00AB               	movwf	___lwmod@dividend+1
  5308  0235  0820               	movf	?___lwdiv,w
  5309  0236  00AA               	movwf	___lwmod@dividend
  5310  0237  318F  27D3  3180   	fcall	___lwmod
  5311  023A  0020               	movlb	0	; select bank0
  5312  023B  0828               	movf	?___lwmod,w
  5313  023C  3E30               	addlw	48
  5314  023D  00B4               	movwf	??_printf+2
  5315  023E  0834               	movf	??_printf+2,w
  5316  023F  00C1               	movwf	printf@c
  5317                           
  5318                           ;doprnt.c: 1523: }
  5319                           ;doprnt.c: 1524: (putch(c) );
  5320  0240  0841               	movf	printf@c,w
  5321  0241  318D  25A7  3180   	fcall	_putch
  5322  0244  2A10               	goto	l2622
  5323  0245                     l525:	
  5324                           ;doprnt.c: 1540: return 0;
  5325                           ;	Return value of _printf is never used
  5326                           
  5327                           ;doprnt.c: 1525: }
  5328                           ;doprnt.c: 1533: }
  5329                           ;doprnt.c: 1535: alldone:
  5330                           
  5331  0245  0008               	return
  5332  0246                     __end_of_printf:	
  5333                           
  5334                           	psect	text16
  5335  0DA7                     __ptext16:	
  5336 ;; *************** function _putch *****************
  5337 ;; Defined at:
  5338 ;;		line 160 in file "mcc_generated_files/eusart.c"
  5339 ;; Parameters:    Size  Location     Type
  5340 ;;  txData          1    wreg     unsigned char 
  5341 ;; Auto vars:     Size  Location     Type
  5342 ;;  txData          1    2[BANK0 ] unsigned char 
  5343 ;; Return value:  Size  Location     Type
  5344 ;;                  1    wreg      void 
  5345 ;; Registers used:
  5346 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5347 ;; Tracked objects:
  5348 ;;		On entry : 0/0
  5349 ;;		On exit  : 0/0
  5350 ;;		Unchanged: 0/0
  5351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5353 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5355 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5356 ;;Total ram usage:        1 bytes
  5357 ;; Hardware stack levels used:    1
  5358 ;; Hardware stack levels required when called:    6
  5359 ;; This function calls:
  5360 ;;		_EUSART_Write
  5361 ;; This function is called by:
  5362 ;;		_printf
  5363 ;; This function uses a non-reentrant model
  5364 ;;
  5365                           
  5366                           
  5367                           ;psect for function _putch
  5368  0DA7                     _putch:	
  5369                           
  5370                           ;incstack = 0
  5371                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5372                           ;putch@txData stored from wreg
  5373  0DA7  0020               	movlb	0	; select bank0
  5374  0DA8  00A2               	movwf	putch@txData
  5375                           
  5376                           ;eusart.c: 162: EUSART_Write(txData);
  5377  0DA9  0822               	movf	putch@txData,w
  5378  0DAA  318F  2788         	fcall	_EUSART_Write
  5379  0DAC  0008               	return
  5380  0DAD                     __end_of_putch:	
  5381                           
  5382                           	psect	text17
  5383  0F88                     __ptext17:	
  5384 ;; *************** function _EUSART_Write *****************
  5385 ;; Defined at:
  5386 ;;		line 132 in file "mcc_generated_files/eusart.c"
  5387 ;; Parameters:    Size  Location     Type
  5388 ;;  txData          1    wreg     unsigned char 
  5389 ;; Auto vars:     Size  Location     Type
  5390 ;;  txData          1    1[BANK0 ] unsigned char 
  5391 ;; Return value:  Size  Location     Type
  5392 ;;                  1    wreg      void 
  5393 ;; Registers used:
  5394 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5395 ;; Tracked objects:
  5396 ;;		On entry : 0/0
  5397 ;;		On exit  : 0/0
  5398 ;;		Unchanged: 0/0
  5399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5401 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5402 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5403 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5404 ;;Total ram usage:        2 bytes
  5405 ;; Hardware stack levels used:    1
  5406 ;; Hardware stack levels required when called:    5
  5407 ;; This function calls:
  5408 ;;		Nothing
  5409 ;; This function is called by:
  5410 ;;		_putch
  5411 ;; This function uses a non-reentrant model
  5412 ;;
  5413                           
  5414                           
  5415                           ;psect for function _EUSART_Write
  5416  0F88                     _EUSART_Write:	
  5417                           
  5418                           ;incstack = 0
  5419                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  5420                           ;EUSART_Write@txData stored from wreg
  5421  0F88  0020               	movlb	0	; select bank0
  5422  0F89  00A1               	movwf	EUSART_Write@txData
  5423  0F8A                     l2402:	
  5424                           ;eusart.c: 135: {
  5425                           
  5426                           ;eusart.c: 134: while(0 == eusartTxBufferRemaining)
  5427                           
  5428  0F8A  087A               	movf	_eusartTxBufferRemaining,w	;volatile
  5429  0F8B  1903               	btfsc	3,2
  5430  0F8C  2F8A               	goto	l2402
  5431                           
  5432                           ;eusart.c: 136: }
  5433                           ;eusart.c: 138: if(0 == PIE1bits.TXIE)
  5434  0F8D  0021               	movlb	1	; select bank1
  5435  0F8E  1A11               	btfsc	17,4	;volatile
  5436  0F8F  2F95               	goto	l224
  5437                           
  5438                           ;eusart.c: 139: {
  5439                           ;eusart.c: 140: TXREG = txData;
  5440  0F90  0020               	movlb	0	; select bank0
  5441  0F91  0821               	movf	EUSART_Write@txData,w
  5442  0F92  0023               	movlb	3	; select bank3
  5443  0F93  009A               	movwf	26	;volatile
  5444                           
  5445                           ;eusart.c: 141: }
  5446  0F94  2FA9               	goto	l2416
  5447  0F95                     l224:	
  5448                           
  5449                           ;eusart.c: 142: else
  5450                           ;eusart.c: 143: {
  5451                           ;eusart.c: 144: PIE1bits.TXIE = 0;
  5452  0F95  1211               	bcf	17,4	;volatile
  5453                           
  5454                           ;eusart.c: 145: eusartTxBuffer[eusartTxHead++] = txData;
  5455  0F96  0020               	movlb	0	; select bank0
  5456  0F97  0821               	movf	EUSART_Write@txData,w
  5457  0F98  00A0               	movwf	??_EUSART_Write
  5458  0F99  087C               	movf	_eusartTxHead,w
  5459  0F9A  3EA8               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  5460  0F9B  0086               	movwf	6
  5461  0F9C  0187               	clrf	7
  5462  0F9D  0820               	movf	??_EUSART_Write,w
  5463  0F9E  0081               	movwf	1
  5464  0F9F  3001               	movlw	1
  5465  0FA0  00A0               	movwf	??_EUSART_Write
  5466  0FA1  0820               	movf	??_EUSART_Write,w
  5467  0FA2  07FC               	addwf	_eusartTxHead,f	;volatile
  5468                           
  5469                           ;eusart.c: 146: if(sizeof(eusartTxBuffer) <= eusartTxHead)
  5470  0FA3  3008               	movlw	8
  5471  0FA4  027C               	subwf	_eusartTxHead,w	;volatile
  5472  0FA5  1803               	btfsc	3,0
  5473                           
  5474                           ;eusart.c: 147: {
  5475                           ;eusart.c: 148: eusartTxHead = 0;
  5476  0FA6  01FC               	clrf	_eusartTxHead	;volatile
  5477                           
  5478                           ;eusart.c: 149: }
  5479                           ;eusart.c: 150: eusartTxBufferRemaining--;
  5480  0FA7  3001               	movlw	1
  5481  0FA8  02FA               	subwf	_eusartTxBufferRemaining,f	;volatile
  5482  0FA9                     l2416:	
  5483                           
  5484                           ;eusart.c: 151: }
  5485                           ;eusart.c: 152: PIE1bits.TXIE = 1;
  5486  0FA9  0021               	movlb	1	; select bank1
  5487  0FAA  1611               	bsf	17,4	;volatile
  5488  0FAB  0008               	return
  5489  0FAC                     __end_of_EUSART_Write:	
  5490                           
  5491                           	psect	text18
  5492  0FD3                     __ptext18:	
  5493 ;; *************** function ___lwmod *****************
  5494 ;; Defined at:
  5495 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  5496 ;; Parameters:    Size  Location     Type
  5497 ;;  divisor         2    8[BANK0 ] unsigned int 
  5498 ;;  dividend        2   10[BANK0 ] unsigned int 
  5499 ;; Auto vars:     Size  Location     Type
  5500 ;;  counter         1   13[BANK0 ] unsigned char 
  5501 ;; Return value:  Size  Location     Type
  5502 ;;                  2    8[BANK0 ] unsigned int 
  5503 ;; Registers used:
  5504 ;;		wreg, status,2, status,0
  5505 ;; Tracked objects:
  5506 ;;		On entry : 0/0
  5507 ;;		On exit  : 0/0
  5508 ;;		Unchanged: 0/0
  5509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5510 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5511 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5512 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5513 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5514 ;;Total ram usage:        6 bytes
  5515 ;; Hardware stack levels used:    1
  5516 ;; Hardware stack levels required when called:    5
  5517 ;; This function calls:
  5518 ;;		Nothing
  5519 ;; This function is called by:
  5520 ;;		_printf
  5521 ;; This function uses a non-reentrant model
  5522 ;;
  5523                           
  5524                           
  5525                           ;psect for function ___lwmod
  5526  0FD3                     ___lwmod:	
  5527                           
  5528                           ;incstack = 0
  5529                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  5530  0FD3  0020               	movlb	0	; select bank0
  5531  0FD4  0828               	movf	___lwmod@divisor,w
  5532  0FD5  0429               	iorwf	___lwmod@divisor+1,w
  5533  0FD6  1903               	btfsc	3,2
  5534  0FD7  2FFB               	goto	l2490
  5535  0FD8  01AD               	clrf	___lwmod@counter
  5536  0FD9  0AAD               	incf	___lwmod@counter,f
  5537  0FDA                     l2480:	
  5538  0FDA  1BA9               	btfsc	___lwmod@divisor+1,7
  5539  0FDB  2FE6               	goto	l2482
  5540  0FDC  3001               	movlw	1
  5541  0FDD                     u1385:	
  5542  0FDD  35A8               	lslf	___lwmod@divisor,f
  5543  0FDE  0DA9               	rlf	___lwmod@divisor+1,f
  5544  0FDF  0B89               	decfsz	9,f
  5545  0FE0  2FDD               	goto	u1385
  5546  0FE1  3001               	movlw	1
  5547  0FE2  00AC               	movwf	??___lwmod
  5548  0FE3  082C               	movf	??___lwmod,w
  5549  0FE4  07AD               	addwf	___lwmod@counter,f
  5550  0FE5  2FDA               	goto	l2480
  5551  0FE6                     l2482:	
  5552  0FE6  0829               	movf	___lwmod@divisor+1,w
  5553  0FE7  022B               	subwf	___lwmod@dividend+1,w
  5554  0FE8  1D03               	skipz
  5555  0FE9  2FEC               	goto	u1405
  5556  0FEA  0828               	movf	___lwmod@divisor,w
  5557  0FEB  022A               	subwf	___lwmod@dividend,w
  5558  0FEC                     u1405:	
  5559  0FEC  1C03               	skipc
  5560  0FED  2FF2               	goto	l2486
  5561  0FEE  0828               	movf	___lwmod@divisor,w
  5562  0FEF  02AA               	subwf	___lwmod@dividend,f
  5563  0FF0  0829               	movf	___lwmod@divisor+1,w
  5564  0FF1  3BAB               	subwfb	___lwmod@dividend+1,f
  5565  0FF2                     l2486:	
  5566  0FF2  3001               	movlw	1
  5567  0FF3                     u1415:	
  5568  0FF3  36A9               	lsrf	___lwmod@divisor+1,f
  5569  0FF4  0CA8               	rrf	___lwmod@divisor,f
  5570  0FF5  0B89               	decfsz	9,f
  5571  0FF6  2FF3               	goto	u1415
  5572  0FF7  3001               	movlw	1
  5573  0FF8  02AD               	subwf	___lwmod@counter,f
  5574  0FF9  1D03               	btfss	3,2
  5575  0FFA  2FE6               	goto	l2482
  5576  0FFB                     l2490:	
  5577  0FFB  082B               	movf	___lwmod@dividend+1,w
  5578  0FFC  00A9               	movwf	?___lwmod+1
  5579  0FFD  082A               	movf	___lwmod@dividend,w
  5580  0FFE  00A8               	movwf	?___lwmod
  5581  0FFF  0008               	return
  5582  1000                     __end_of___lwmod:	
  5583                           
  5584                           	psect	text19
  5585  07B5                     __ptext19:	
  5586 ;; *************** function ___lwdiv *****************
  5587 ;; Defined at:
  5588 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  5589 ;; Parameters:    Size  Location     Type
  5590 ;;  divisor         2    0[BANK0 ] unsigned int 
  5591 ;;  dividend        2    2[BANK0 ] unsigned int 
  5592 ;; Auto vars:     Size  Location     Type
  5593 ;;  quotient        2    5[BANK0 ] unsigned int 
  5594 ;;  counter         1    7[BANK0 ] unsigned char 
  5595 ;; Return value:  Size  Location     Type
  5596 ;;                  2    0[BANK0 ] unsigned int 
  5597 ;; Registers used:
  5598 ;;		wreg, status,2, status,0
  5599 ;; Tracked objects:
  5600 ;;		On entry : 0/0
  5601 ;;		On exit  : 0/0
  5602 ;;		Unchanged: 0/0
  5603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5604 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5605 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5606 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5607 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5608 ;;Total ram usage:        8 bytes
  5609 ;; Hardware stack levels used:    1
  5610 ;; Hardware stack levels required when called:    5
  5611 ;; This function calls:
  5612 ;;		Nothing
  5613 ;; This function is called by:
  5614 ;;		_printf
  5615 ;; This function uses a non-reentrant model
  5616 ;;
  5617                           
  5618                           
  5619                           ;psect for function ___lwdiv
  5620  07B5                     ___lwdiv:	
  5621                           
  5622                           ;incstack = 0
  5623                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  5624  07B5  0020               	movlb	0	; select bank0
  5625  07B6  01A5               	clrf	___lwdiv@quotient
  5626  07B7  01A6               	clrf	___lwdiv@quotient+1
  5627  07B8  0820               	movf	___lwdiv@divisor,w
  5628  07B9  0421               	iorwf	___lwdiv@divisor+1,w
  5629  07BA  1903               	btfsc	3,2
  5630  07BB  2FE5               	goto	l2468
  5631  07BC  01A7               	clrf	___lwdiv@counter
  5632  07BD  0AA7               	incf	___lwdiv@counter,f
  5633  07BE                     l2456:	
  5634  07BE  1BA1               	btfsc	___lwdiv@divisor+1,7
  5635  07BF  2FCA               	goto	l2458
  5636  07C0  3001               	movlw	1
  5637  07C1                     u1315:	
  5638  07C1  35A0               	lslf	___lwdiv@divisor,f
  5639  07C2  0DA1               	rlf	___lwdiv@divisor+1,f
  5640  07C3  0B89               	decfsz	9,f
  5641  07C4  2FC1               	goto	u1315
  5642  07C5  3001               	movlw	1
  5643  07C6  00A4               	movwf	??___lwdiv
  5644  07C7  0824               	movf	??___lwdiv,w
  5645  07C8  07A7               	addwf	___lwdiv@counter,f
  5646  07C9  2FBE               	goto	l2456
  5647  07CA                     l2458:	
  5648  07CA  3001               	movlw	1
  5649  07CB                     u1335:	
  5650  07CB  35A5               	lslf	___lwdiv@quotient,f
  5651  07CC  0DA6               	rlf	___lwdiv@quotient+1,f
  5652  07CD  0B89               	decfsz	9,f
  5653  07CE  2FCB               	goto	u1335
  5654  07CF  0821               	movf	___lwdiv@divisor+1,w
  5655  07D0  0223               	subwf	___lwdiv@dividend+1,w
  5656  07D1  1D03               	skipz
  5657  07D2  2FD5               	goto	u1345
  5658  07D3  0820               	movf	___lwdiv@divisor,w
  5659  07D4  0222               	subwf	___lwdiv@dividend,w
  5660  07D5                     u1345:	
  5661  07D5  1C03               	skipc
  5662  07D6  2FDC               	goto	l2464
  5663  07D7  0820               	movf	___lwdiv@divisor,w
  5664  07D8  02A2               	subwf	___lwdiv@dividend,f
  5665  07D9  0821               	movf	___lwdiv@divisor+1,w
  5666  07DA  3BA3               	subwfb	___lwdiv@dividend+1,f
  5667  07DB  1425               	bsf	___lwdiv@quotient,0
  5668  07DC                     l2464:	
  5669  07DC  3001               	movlw	1
  5670  07DD                     u1355:	
  5671  07DD  36A1               	lsrf	___lwdiv@divisor+1,f
  5672  07DE  0CA0               	rrf	___lwdiv@divisor,f
  5673  07DF  0B89               	decfsz	9,f
  5674  07E0  2FDD               	goto	u1355
  5675  07E1  3001               	movlw	1
  5676  07E2  02A7               	subwf	___lwdiv@counter,f
  5677  07E3  1D03               	btfss	3,2
  5678  07E4  2FCA               	goto	l2458
  5679  07E5                     l2468:	
  5680  07E5  0826               	movf	___lwdiv@quotient+1,w
  5681  07E6  00A1               	movwf	?___lwdiv+1
  5682  07E7  0825               	movf	___lwdiv@quotient,w
  5683  07E8  00A0               	movwf	?___lwdiv
  5684  07E9  0008               	return
  5685  07EA                     __end_of___lwdiv:	
  5686                           
  5687                           	psect	text20
  5688  0E64                     __ptext20:	
  5689 ;; *************** function _PROTOCOL_I2C_Set_TLV *****************
  5690 ;; Defined at:
  5691 ;;		line 213 in file "protocol.c"
  5692 ;; Parameters:    Size  Location     Type
  5693 ;;  type            1    wreg     unsigned char 
  5694 ;;  length          1    0[BANK0 ] unsigned char 
  5695 ;;  pbuffer         1    1[BANK0 ] PTR unsigned char 
  5696 ;;		 -> PROTOCOL_Send_uint8_t@pbuf(1), sendbuf(16), 
  5697 ;; Auto vars:     Size  Location     Type
  5698 ;;  type            1    3[BANK0 ] unsigned char 
  5699 ;;  status          1    4[BANK0 ] enum E3411
  5700 ;; Return value:  Size  Location     Type
  5701 ;;                  1    wreg      void 
  5702 ;; Registers used:
  5703 ;;		wreg, status,2, status,0
  5704 ;; Tracked objects:
  5705 ;;		On entry : 0/0
  5706 ;;		On exit  : 0/0
  5707 ;;		Unchanged: 0/0
  5708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5709 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5710 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5711 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5712 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5713 ;;Total ram usage:        5 bytes
  5714 ;; Hardware stack levels used:    1
  5715 ;; Hardware stack levels required when called:    5
  5716 ;; This function calls:
  5717 ;;		Nothing
  5718 ;; This function is called by:
  5719 ;;		_PROTOCOL_I2C_Send_uint16_t
  5720 ;; This function uses a non-reentrant model
  5721 ;;
  5722                           
  5723                           
  5724                           ;psect for function _PROTOCOL_I2C_Set_TLV
  5725  0E64                     _PROTOCOL_I2C_Set_TLV:	
  5726                           
  5727                           ;incstack = 0
  5728                           ; Regs used in _PROTOCOL_I2C_Set_TLV: [wreg+status,2+status,0]
  5729                           ;PROTOCOL_I2C_Set_TLV@type stored from wreg
  5730  0E64  0020               	movlb	0	; select bank0
  5731  0E65  00A3               	movwf	PROTOCOL_I2C_Set_TLV@type
  5732                           
  5733                           ;protocol.c: 214: READBUF_STATUS status = readbuf.status;
  5734  0E66  086A               	movf	_readbuf+3,w
  5735  0E67  00A2               	movwf	??_PROTOCOL_I2C_Set_TLV
  5736  0E68  0822               	movf	??_PROTOCOL_I2C_Set_TLV,w
  5737  0E69  00A4               	movwf	PROTOCOL_I2C_Set_TLV@status
  5738                           
  5739                           ;protocol.c: 215: if (status == COMPLETE) {
  5740  0E6A  3003               	movlw	3
  5741  0E6B  0624               	xorwf	PROTOCOL_I2C_Set_TLV@status,w
  5742  0E6C  1D03               	btfss	3,2
  5743  0E6D  0008               	return
  5744                           
  5745                           ;protocol.c: 216: readbuf.type = type;
  5746  0E6E  0823               	movf	PROTOCOL_I2C_Set_TLV@type,w
  5747  0E6F  00A2               	movwf	??_PROTOCOL_I2C_Set_TLV
  5748  0E70  0822               	movf	??_PROTOCOL_I2C_Set_TLV,w
  5749  0E71  00E7               	movwf	_readbuf
  5750                           
  5751                           ;protocol.c: 217: readbuf.length = length;
  5752  0E72  0820               	movf	PROTOCOL_I2C_Set_TLV@length,w
  5753  0E73  00A2               	movwf	??_PROTOCOL_I2C_Set_TLV
  5754  0E74  0822               	movf	??_PROTOCOL_I2C_Set_TLV,w
  5755  0E75  00E8               	movwf	_readbuf+1
  5756                           
  5757                           ;protocol.c: 218: readbuf.pbuffer = pbuffer;
  5758  0E76  0821               	movf	PROTOCOL_I2C_Set_TLV@pbuffer,w
  5759  0E77  00A2               	movwf	??_PROTOCOL_I2C_Set_TLV
  5760  0E78  0822               	movf	??_PROTOCOL_I2C_Set_TLV,w
  5761  0E79  00E9               	movwf	low ((_readbuf| 0+2))
  5762                           
  5763                           ;protocol.c: 219: readbuf.buf_cnt = 0;
  5764  0E7A  01EB               	clrf	_readbuf+4
  5765                           
  5766                           ;protocol.c: 220: readbuf.status = TLV_SET;
  5767  0E7B  01EA               	clrf	_readbuf+3
  5768  0E7C  0008               	return
  5769  0E7D                     __end_of_PROTOCOL_I2C_Set_TLV:	
  5770                           
  5771                           	psect	text21
  5772  0648                     __ptext21:	
  5773 ;; *************** function _atoi *****************
  5774 ;; Defined at:
  5775 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\atoi.c"
  5776 ;; Parameters:    Size  Location     Type
  5777 ;;  s               1    wreg     PTR const unsigned char 
  5778 ;;		 -> buf(48), 
  5779 ;; Auto vars:     Size  Location     Type
  5780 ;;  s               1   13[BANK0 ] PTR const unsigned char 
  5781 ;;		 -> buf(48), 
  5782 ;;  a               2   11[BANK0 ] int 
  5783 ;;  sign            1   10[BANK0 ] unsigned char 
  5784 ;; Return value:  Size  Location     Type
  5785 ;;                  2    6[BANK0 ] int 
  5786 ;; Registers used:
  5787 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5788 ;; Tracked objects:
  5789 ;;		On entry : 0/0
  5790 ;;		On exit  : 0/0
  5791 ;;		Unchanged: 0/0
  5792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5793 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5794 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5795 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5796 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5797 ;;Total ram usage:        8 bytes
  5798 ;; Hardware stack levels used:    1
  5799 ;; Hardware stack levels required when called:    6
  5800 ;; This function calls:
  5801 ;;		___wmul
  5802 ;;		_isdigit
  5803 ;; This function is called by:
  5804 ;;		_PROTOCOL_Loop
  5805 ;; This function uses a non-reentrant model
  5806 ;;
  5807                           
  5808                           
  5809                           ;psect for function _atoi
  5810  0648                     _atoi:	
  5811                           
  5812                           ;incstack = 0
  5813                           ; Regs used in _atoi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5814                           ;atoi@s stored from wreg
  5815  0648  0020               	movlb	0	; select bank0
  5816  0649  00AD               	movwf	atoi@s
  5817  064A                     l3010:	
  5818  064A  082D               	movf	atoi@s,w
  5819  064B  0086               	movwf	6
  5820  064C  3001               	movlw	1	; select bank2/3
  5821  064D  0087               	movwf	7
  5822  064E  3020               	movlw	32
  5823  064F  0601               	xorwf	1,w
  5824  0650  1D03               	btfss	3,2
  5825  0651  2E57               	goto	l3012
  5826  0652                     l3008:	
  5827  0652  3001               	movlw	1
  5828  0653  00A8               	movwf	??_atoi
  5829  0654  0828               	movf	??_atoi,w
  5830  0655  07AD               	addwf	atoi@s,f
  5831  0656  2E4A               	goto	l3010
  5832  0657                     l3012:	
  5833  0657  082D               	movf	atoi@s,w
  5834  0658  0086               	movwf	6
  5835  0659  3001               	movlw	1	; select bank2/3
  5836  065A  0087               	movwf	7
  5837  065B  3009               	movlw	9
  5838  065C  0601               	xorwf	1,w
  5839  065D  1903               	btfsc	3,2
  5840  065E  2E52               	goto	l3008
  5841  065F  01AB               	clrf	atoi@a
  5842  0660  01AC               	clrf	atoi@a+1
  5843  0661  01AA               	clrf	atoi@sign
  5844  0662  082D               	movf	atoi@s,w
  5845  0663  0086               	movwf	6
  5846  0664  3001               	movlw	1	; select bank2/3
  5847  0665  0087               	movwf	7
  5848  0666  302D               	movlw	45
  5849  0667  0601               	xorwf	1,w
  5850  0668  1D03               	btfss	3,2
  5851  0669  2E6F               	goto	l3020
  5852  066A  3001               	movlw	1
  5853  066B  00A8               	movwf	??_atoi
  5854  066C  0828               	movf	??_atoi,w
  5855  066D  07AA               	addwf	atoi@sign,f
  5856  066E  2E77               	goto	l3026
  5857  066F                     l3020:	
  5858  066F  082D               	movf	atoi@s,w
  5859  0670  0086               	movwf	6
  5860  0671  3001               	movlw	1	; select bank2/3
  5861  0672  0087               	movwf	7
  5862  0673  302B               	movlw	43
  5863  0674  0601               	xorwf	1,w
  5864  0675  1D03               	btfss	3,2
  5865  0676  2E7B               	goto	l3028
  5866  0677                     l3026:	
  5867  0677  3001               	movlw	1
  5868  0678  00A8               	movwf	??_atoi
  5869  0679  0828               	movf	??_atoi,w
  5870  067A  07AD               	addwf	atoi@s,f
  5871  067B                     l3028:	
  5872  067B  082D               	movf	atoi@s,w
  5873  067C  0086               	movwf	6
  5874  067D  3001               	movlw	1	; select bank2/3
  5875  067E  0087               	movwf	7
  5876  067F  0801               	movf	1,w
  5877  0680  318E  2636  3186   	fcall	_isdigit
  5878  0683  1C03               	btfss	3,0
  5879  0684  2EA4               	goto	l3030
  5880  0685  0020               	movlb	0	; select bank0
  5881  0686  082C               	movf	atoi@a+1,w
  5882  0687  00A1               	movwf	___wmul@multiplier+1
  5883  0688  082B               	movf	atoi@a,w
  5884  0689  00A0               	movwf	___wmul@multiplier
  5885  068A  300A               	movlw	10
  5886  068B  00A2               	movwf	___wmul@multiplicand
  5887  068C  3000               	movlw	0
  5888  068D  00A3               	movwf	___wmul@multiplicand+1
  5889  068E  318E  26CD  3186   	fcall	___wmul
  5890  0691  0020               	movlb	0	; select bank0
  5891  0692  082D               	movf	atoi@s,w
  5892  0693  0086               	movwf	6
  5893  0694  3001               	movlw	1	; select bank2/3
  5894  0695  0087               	movwf	7
  5895  0696  0801               	movf	1,w
  5896  0697  0720               	addwf	?___wmul,w
  5897  0698  00A8               	movwf	??_atoi
  5898  0699  0821               	movf	?___wmul+1,w
  5899  069A  1803               	skipnc
  5900  069B  0A21               	incf	?___wmul+1,w
  5901  069C  00A9               	movwf	??_atoi+1
  5902  069D  0828               	movf	??_atoi,w
  5903  069E  3ED0               	addlw	208
  5904  069F  00AB               	movwf	atoi@a
  5905  06A0  30FF               	movlw	255
  5906  06A1  3D29               	addwfc	??_atoi+1,w
  5907  06A2  00AC               	movwf	atoi@a+1
  5908  06A3  2E77               	goto	l3026
  5909  06A4                     l3030:	
  5910  06A4  0020               	movlb	0	; select bank0
  5911  06A5  082A               	movf	atoi@sign,w
  5912  06A6  1903               	btfsc	3,2
  5913  06A7  2EB4               	goto	l3036
  5914  06A8  092B               	comf	atoi@a,w
  5915  06A9  00A8               	movwf	??_atoi
  5916  06AA  092C               	comf	atoi@a+1,w
  5917  06AB  00A9               	movwf	??_atoi+1
  5918  06AC  0AA8               	incf	??_atoi,f
  5919  06AD  1903               	skipnz
  5920  06AE  0AA9               	incf	??_atoi+1,f
  5921  06AF  0828               	movf	??_atoi,w
  5922  06B0  00A6               	movwf	?_atoi
  5923  06B1  0829               	movf	??_atoi+1,w
  5924  06B2  00A7               	movwf	?_atoi+1
  5925  06B3  0008               	return
  5926  06B4                     l3036:	
  5927  06B4  082C               	movf	atoi@a+1,w
  5928  06B5  00A7               	movwf	?_atoi+1
  5929  06B6  082B               	movf	atoi@a,w
  5930  06B7  00A6               	movwf	?_atoi
  5931  06B8  0008               	return
  5932  06B9                     __end_of_atoi:	
  5933                           
  5934                           	psect	text22
  5935  0E36                     __ptext22:	
  5936 ;; *************** function _isdigit *****************
  5937 ;; Defined at:
  5938 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  5939 ;; Parameters:    Size  Location     Type
  5940 ;;  c               1    wreg     unsigned char 
  5941 ;; Auto vars:     Size  Location     Type
  5942 ;;  c               1    1[BANK0 ] unsigned char 
  5943 ;; Return value:  Size  Location     Type
  5944 ;;		None               void
  5945 ;; Registers used:
  5946 ;;		wreg, status,2, status,0
  5947 ;; Tracked objects:
  5948 ;;		On entry : 0/0
  5949 ;;		On exit  : 0/0
  5950 ;;		Unchanged: 0/0
  5951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5953 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5955 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5956 ;;Total ram usage:        2 bytes
  5957 ;; Hardware stack levels used:    1
  5958 ;; Hardware stack levels required when called:    5
  5959 ;; This function calls:
  5960 ;;		Nothing
  5961 ;; This function is called by:
  5962 ;;		_printf
  5963 ;;		_atoi
  5964 ;; This function uses a non-reentrant model
  5965 ;;
  5966                           
  5967                           
  5968                           ;psect for function _isdigit
  5969  0E36                     _isdigit:	
  5970                           
  5971                           ;incstack = 0
  5972                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  5973                           ;isdigit@c stored from wreg
  5974  0E36  0020               	movlb	0	; select bank0
  5975  0E37  00A1               	movwf	isdigit@c
  5976  0E38  01A0               	clrf	_isdigit$1250
  5977  0E39  303A               	movlw	58
  5978  0E3A  0221               	subwf	isdigit@c,w
  5979  0E3B  1803               	skipnc
  5980  0E3C  2E43               	goto	l2428
  5981  0E3D  3030               	movlw	48
  5982  0E3E  0221               	subwf	isdigit@c,w
  5983  0E3F  1C03               	skipc
  5984  0E40  2E43               	goto	l2428
  5985  0E41  01A0               	clrf	_isdigit$1250
  5986  0E42  0AA0               	incf	_isdigit$1250,f
  5987  0E43                     l2428:	
  5988  0E43  0C20               	rrf	_isdigit$1250,w
  5989  0E44  0008               	return
  5990  0E45                     __end_of_isdigit:	
  5991                           
  5992                           	psect	text23
  5993  0ECD                     __ptext23:	
  5994 ;; *************** function ___wmul *****************
  5995 ;; Defined at:
  5996 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  5997 ;; Parameters:    Size  Location     Type
  5998 ;;  multiplier      2    0[BANK0 ] unsigned int 
  5999 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  6000 ;; Auto vars:     Size  Location     Type
  6001 ;;  product         2    4[BANK0 ] unsigned int 
  6002 ;; Return value:  Size  Location     Type
  6003 ;;                  2    0[BANK0 ] unsigned int 
  6004 ;; Registers used:
  6005 ;;		wreg, status,2, status,0
  6006 ;; Tracked objects:
  6007 ;;		On entry : 0/0
  6008 ;;		On exit  : 0/0
  6009 ;;		Unchanged: 0/0
  6010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6011 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6012 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6014 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6015 ;;Total ram usage:        6 bytes
  6016 ;; Hardware stack levels used:    1
  6017 ;; Hardware stack levels required when called:    5
  6018 ;; This function calls:
  6019 ;;		Nothing
  6020 ;; This function is called by:
  6021 ;;		_printf
  6022 ;;		_atoi
  6023 ;; This function uses a non-reentrant model
  6024 ;;
  6025                           
  6026                           
  6027                           ;psect for function ___wmul
  6028  0ECD                     ___wmul:	
  6029                           
  6030                           ;incstack = 0
  6031                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6032  0ECD  0020               	movlb	0	; select bank0
  6033  0ECE  01A4               	clrf	___wmul@product
  6034  0ECF  01A5               	clrf	___wmul@product+1
  6035  0ED0                     l2434:	
  6036  0ED0  1C20               	btfss	___wmul@multiplier,0
  6037  0ED1  2ED6               	goto	l925
  6038  0ED2  0822               	movf	___wmul@multiplicand,w
  6039  0ED3  07A4               	addwf	___wmul@product,f
  6040  0ED4  0823               	movf	___wmul@multiplicand+1,w
  6041  0ED5  3DA5               	addwfc	___wmul@product+1,f
  6042  0ED6                     l925:	
  6043  0ED6  3001               	movlw	1
  6044  0ED7                     u1275:	
  6045  0ED7  35A2               	lslf	___wmul@multiplicand,f
  6046  0ED8  0DA3               	rlf	___wmul@multiplicand+1,f
  6047  0ED9  0B89               	decfsz	9,f
  6048  0EDA  2ED7               	goto	u1275
  6049  0EDB  3001               	movlw	1
  6050  0EDC                     u1285:	
  6051  0EDC  36A1               	lsrf	___wmul@multiplier+1,f
  6052  0EDD  0CA0               	rrf	___wmul@multiplier,f
  6053  0EDE  0B89               	decfsz	9,f
  6054  0EDF  2EDC               	goto	u1285
  6055  0EE0  0820               	movf	___wmul@multiplier,w
  6056  0EE1  0421               	iorwf	___wmul@multiplier+1,w
  6057  0EE2  1D03               	btfss	3,2
  6058  0EE3  2ED0               	goto	l2434
  6059  0EE4  0825               	movf	___wmul@product+1,w
  6060  0EE5  00A1               	movwf	?___wmul+1
  6061  0EE6  0824               	movf	___wmul@product,w
  6062  0EE7  00A0               	movwf	?___wmul
  6063  0EE8  0008               	return
  6064  0EE9                     __end_of___wmul:	
  6065                           
  6066                           	psect	text24
  6067  0D9B                     __ptext24:	
  6068 ;; *************** function _TMR0_HasOverflowOccured *****************
  6069 ;; Defined at:
  6070 ;;		line 101 in file "mcc_generated_files/tmr0.c"
  6071 ;; Parameters:    Size  Location     Type
  6072 ;;		None
  6073 ;; Auto vars:     Size  Location     Type
  6074 ;;		None
  6075 ;; Return value:  Size  Location     Type
  6076 ;;                  1    wreg      unsigned char 
  6077 ;; Registers used:
  6078 ;;		wreg, status,2, status,0
  6079 ;; Tracked objects:
  6080 ;;		On entry : 0/0
  6081 ;;		On exit  : 0/0
  6082 ;;		Unchanged: 0/0
  6083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6085 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6086 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6087 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6088 ;;Total ram usage:        0 bytes
  6089 ;; Hardware stack levels used:    1
  6090 ;; Hardware stack levels required when called:    5
  6091 ;; This function calls:
  6092 ;;		Nothing
  6093 ;; This function is called by:
  6094 ;;		_PROTOCOL_Loop
  6095 ;; This function uses a non-reentrant model
  6096 ;;
  6097                           
  6098                           
  6099                           ;psect for function _TMR0_HasOverflowOccured
  6100  0D9B                     _TMR0_HasOverflowOccured:	
  6101                           
  6102                           ;tmr0.c: 104: return(INTCONbits.TMR0IF);
  6103                           
  6104                           ;incstack = 0
  6105                           ; Regs used in _TMR0_HasOverflowOccured: [wreg+status,2+status,0]
  6106  0D9B  0C0B               	rrf	11,w	;volatile
  6107  0D9C  0C89               	rrf	9,f
  6108  0D9D  3901               	andlw	1
  6109  0D9E  0008               	return
  6110  0D9F                     __end_of_TMR0_HasOverflowOccured:	
  6111                           
  6112                           	psect	text25
  6113  0E27                     __ptext25:	
  6114 ;; *************** function _PROTOCOL_Write_Device_Address *****************
  6115 ;; Defined at:
  6116 ;;		line 89 in file "protocol.c"
  6117 ;; Parameters:    Size  Location     Type
  6118 ;;  device_id_i2    1    wreg     unsigned char 
  6119 ;; Auto vars:     Size  Location     Type
  6120 ;;  device_id_i2    1    4[BANK0 ] unsigned char 
  6121 ;; Return value:  Size  Location     Type
  6122 ;;                  1    wreg      void 
  6123 ;; Registers used:
  6124 ;;		wreg, status,2, status,0, pclath, cstack
  6125 ;; Tracked objects:
  6126 ;;		On entry : 0/0
  6127 ;;		On exit  : 0/0
  6128 ;;		Unchanged: 0/0
  6129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6131 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6132 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6133 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6134 ;;Total ram usage:        2 bytes
  6135 ;; Hardware stack levels used:    1
  6136 ;; Hardware stack levels required when called:    6
  6137 ;; This function calls:
  6138 ;;		_DATAEE_WriteByte
  6139 ;; This function is called by:
  6140 ;;		_PROTOCOL_Loop
  6141 ;; This function uses a non-reentrant model
  6142 ;;
  6143                           
  6144                           
  6145                           ;psect for function _PROTOCOL_Write_Device_Address
  6146  0E27                     _PROTOCOL_Write_Device_Address:	
  6147                           
  6148                           ;incstack = 0
  6149                           ; Regs used in _PROTOCOL_Write_Device_Address: [wreg+status,2+status,0+pclath+cstack]
  6150                           ;PROTOCOL_Write_Device_Address@device_id_i2c stored from wreg
  6151  0E27  0020               	movlb	0	; select bank0
  6152  0E28  00A4               	movwf	PROTOCOL_Write_Device_Address@device_id_i2c
  6153                           
  6154                           ;protocol.c: 90: DATAEE_WriteByte(0, device_id_i2c);
  6155  0E29  0824               	movf	PROTOCOL_Write_Device_Address@device_id_i2c,w
  6156  0E2A  00A3               	movwf	??_PROTOCOL_Write_Device_Address
  6157  0E2B  0823               	movf	??_PROTOCOL_Write_Device_Address,w
  6158  0E2C  00A0               	movwf	DATAEE_WriteByte@bData
  6159  0E2D  3000               	movlw	0
  6160  0E2E  318F  2765         	fcall	_DATAEE_WriteByte
  6161                           
  6162                           ;protocol.c: 91: slave_address = device_id_i2c;
  6163  0E30  0020               	movlb	0	; select bank0
  6164  0E31  0824               	movf	PROTOCOL_Write_Device_Address@device_id_i2c,w
  6165  0E32  00A3               	movwf	??_PROTOCOL_Write_Device_Address
  6166  0E33  0823               	movf	??_PROTOCOL_Write_Device_Address,w
  6167  0E34  00DD               	movwf	_slave_address
  6168  0E35  0008               	return
  6169  0E36                     __end_of_PROTOCOL_Write_Device_Address:	
  6170                           
  6171                           	psect	text26
  6172  0D85                     __ptext26:	
  6173 ;; *************** function _PROTOCOL_STP *****************
  6174 ;; Defined at:
  6175 ;;		line 103 in file "protocol.c"
  6176 ;; Parameters:    Size  Location     Type
  6177 ;;		None
  6178 ;; Auto vars:     Size  Location     Type
  6179 ;;		None
  6180 ;; Return value:  Size  Location     Type
  6181 ;;                  1    wreg      void 
  6182 ;; Registers used:
  6183 ;;		wreg, status,2, status,0
  6184 ;; Tracked objects:
  6185 ;;		On entry : 0/0
  6186 ;;		On exit  : 0/0
  6187 ;;		Unchanged: 0/0
  6188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6189 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6190 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6191 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6192 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6193 ;;Total ram usage:        0 bytes
  6194 ;; Hardware stack levels used:    1
  6195 ;; Hardware stack levels required when called:    5
  6196 ;; This function calls:
  6197 ;;		Nothing
  6198 ;; This function is called by:
  6199 ;;		_PROTOCOL_Loop
  6200 ;; This function uses a non-reentrant model
  6201 ;;
  6202                           
  6203                           
  6204                           ;psect for function _PROTOCOL_STP
  6205  0D85                     _PROTOCOL_STP:	
  6206                           
  6207                           ;protocol.c: 105: running = 0;
  6208                           
  6209                           ;incstack = 0
  6210                           ; Regs used in _PROTOCOL_STP: [wreg+status,2+status,0]
  6211  0D85  0020               	movlb	0	; select bank0
  6212  0D86  01D9               	clrf	_running
  6213  0D87  0008               	return
  6214  0D88                     __end_of_PROTOCOL_STP:	
  6215                           
  6216                           	psect	text27
  6217  0D97                     __ptext27:	
  6218 ;; *************** function _PROTOCOL_STA *****************
  6219 ;; Defined at:
  6220 ;;		line 98 in file "protocol.c"
  6221 ;; Parameters:    Size  Location     Type
  6222 ;;		None
  6223 ;; Auto vars:     Size  Location     Type
  6224 ;;		None
  6225 ;; Return value:  Size  Location     Type
  6226 ;;                  1    wreg      void 
  6227 ;; Registers used:
  6228 ;;		wreg, status,2, status,0
  6229 ;; Tracked objects:
  6230 ;;		On entry : 0/0
  6231 ;;		On exit  : 0/0
  6232 ;;		Unchanged: 0/0
  6233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6235 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6237 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6238 ;;Total ram usage:        0 bytes
  6239 ;; Hardware stack levels used:    1
  6240 ;; Hardware stack levels required when called:    5
  6241 ;; This function calls:
  6242 ;;		Nothing
  6243 ;; This function is called by:
  6244 ;;		_PROTOCOL_Loop
  6245 ;; This function uses a non-reentrant model
  6246 ;;
  6247                           
  6248                           
  6249                           ;psect for function _PROTOCOL_STA
  6250  0D97                     _PROTOCOL_STA:	
  6251                           
  6252                           ;protocol.c: 100: running = 1;
  6253                           
  6254                           ;incstack = 0
  6255                           ; Regs used in _PROTOCOL_STA: [wreg+status,2+status,0]
  6256  0D97  0020               	movlb	0	; select bank0
  6257  0D98  01D9               	clrf	_running
  6258  0D99  0AD9               	incf	_running,f
  6259  0D9A  0008               	return
  6260  0D9B                     __end_of_PROTOCOL_STA:	
  6261                           
  6262                           	psect	text28
  6263  0DBA                     __ptext28:	
  6264 ;; *************** function _PROTOCOL_SET *****************
  6265 ;; Defined at:
  6266 ;;		line 116 in file "protocol.c"
  6267 ;; Parameters:    Size  Location     Type
  6268 ;;  value_          1    wreg     unsigned char 
  6269 ;; Auto vars:     Size  Location     Type
  6270 ;;  value_          1    1[BANK0 ] unsigned char 
  6271 ;; Return value:  Size  Location     Type
  6272 ;;                  1    wreg      void 
  6273 ;; Registers used:
  6274 ;;		wreg, status,2, status,0
  6275 ;; Tracked objects:
  6276 ;;		On entry : 0/0
  6277 ;;		On exit  : 0/0
  6278 ;;		Unchanged: 0/0
  6279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6281 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6282 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6283 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6284 ;;Total ram usage:        2 bytes
  6285 ;; Hardware stack levels used:    1
  6286 ;; Hardware stack levels required when called:    5
  6287 ;; This function calls:
  6288 ;;		Nothing
  6289 ;; This function is called by:
  6290 ;;		_PROTOCOL_Loop
  6291 ;; This function uses a non-reentrant model
  6292 ;;
  6293                           
  6294                           
  6295                           ;psect for function _PROTOCOL_SET
  6296  0DBA                     _PROTOCOL_SET:	
  6297                           
  6298                           ;incstack = 0
  6299                           ; Regs used in _PROTOCOL_SET: [wreg+status,2+status,0]
  6300                           ;PROTOCOL_SET@value_ stored from wreg
  6301  0DBA  0020               	movlb	0	; select bank0
  6302  0DBB  00A1               	movwf	PROTOCOL_SET@value_
  6303                           
  6304                           ;protocol.c: 117: value = value_;
  6305  0DBC  0821               	movf	PROTOCOL_SET@value_,w
  6306  0DBD  00A0               	movwf	??_PROTOCOL_SET
  6307  0DBE  0820               	movf	??_PROTOCOL_SET,w
  6308  0DBF  00DB               	movwf	_value
  6309  0DC0  0008               	return
  6310  0DC1                     __end_of_PROTOCOL_SET:	
  6311                           
  6312                           	psect	text29
  6313  0DD9                     __ptext29:	
  6314 ;; *************** function _PROTOCOL_SAV *****************
  6315 ;; Defined at:
  6316 ;;		line 112 in file "protocol.c"
  6317 ;; Parameters:    Size  Location     Type
  6318 ;;		None
  6319 ;; Auto vars:     Size  Location     Type
  6320 ;;		None
  6321 ;; Return value:  Size  Location     Type
  6322 ;;                  1    wreg      void 
  6323 ;; Registers used:
  6324 ;;		wreg, status,2, status,0, pclath, cstack
  6325 ;; Tracked objects:
  6326 ;;		On entry : 0/0
  6327 ;;		On exit  : 0/0
  6328 ;;		Unchanged: 0/0
  6329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6330 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6331 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6332 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6333 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6334 ;;Total ram usage:        1 bytes
  6335 ;; Hardware stack levels used:    1
  6336 ;; Hardware stack levels required when called:    6
  6337 ;; This function calls:
  6338 ;;		_DATAEE_WriteByte
  6339 ;; This function is called by:
  6340 ;;		_PROTOCOL_Loop
  6341 ;; This function uses a non-reentrant model
  6342 ;;
  6343                           
  6344                           
  6345                           ;psect for function _PROTOCOL_SAV
  6346  0DD9                     _PROTOCOL_SAV:	
  6347                           
  6348                           ;protocol.c: 113: DATAEE_WriteByte(1, value);
  6349                           
  6350                           ;incstack = 0
  6351                           ; Regs used in _PROTOCOL_SAV: [wreg+status,2+status,0+pclath+cstack]
  6352  0DD9  0020               	movlb	0	; select bank0
  6353  0DDA  085B               	movf	_value,w
  6354  0DDB  00A3               	movwf	??_PROTOCOL_SAV
  6355  0DDC  0823               	movf	??_PROTOCOL_SAV,w
  6356  0DDD  00A0               	movwf	DATAEE_WriteByte@bData
  6357  0DDE  3001               	movlw	1
  6358  0DDF  318F  2765         	fcall	_DATAEE_WriteByte
  6359  0DE1  0008               	return
  6360  0DE2                     __end_of_PROTOCOL_SAV:	
  6361                           
  6362                           	psect	text30
  6363  0F65                     __ptext30:	
  6364 ;; *************** function _DATAEE_WriteByte *****************
  6365 ;; Defined at:
  6366 ;;		line 180 in file "mcc_generated_files/memory.c"
  6367 ;; Parameters:    Size  Location     Type
  6368 ;;  bAdd            1    wreg     unsigned char 
  6369 ;;  bData           1    0[BANK0 ] unsigned char 
  6370 ;; Auto vars:     Size  Location     Type
  6371 ;;  bAdd            1    1[BANK0 ] unsigned char 
  6372 ;;  GIEBitValue     1    2[BANK0 ] unsigned char 
  6373 ;; Return value:  Size  Location     Type
  6374 ;;                  1    wreg      void 
  6375 ;; Registers used:
  6376 ;;		wreg, status,2, status,0
  6377 ;; Tracked objects:
  6378 ;;		On entry : 0/0
  6379 ;;		On exit  : 0/0
  6380 ;;		Unchanged: 0/0
  6381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6382 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6383 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6384 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6385 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6386 ;;Total ram usage:        3 bytes
  6387 ;; Hardware stack levels used:    1
  6388 ;; Hardware stack levels required when called:    5
  6389 ;; This function calls:
  6390 ;;		Nothing
  6391 ;; This function is called by:
  6392 ;;		_PROTOCOL_Write_Device_Address
  6393 ;;		_PROTOCOL_SAV
  6394 ;; This function uses a non-reentrant model
  6395 ;;
  6396                           
  6397                           
  6398                           ;psect for function _DATAEE_WriteByte
  6399  0F65                     _DATAEE_WriteByte:	
  6400                           
  6401                           ;incstack = 0
  6402                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
  6403                           ;DATAEE_WriteByte@bAdd stored from wreg
  6404  0F65  0020               	movlb	0	; select bank0
  6405  0F66  00A1               	movwf	DATAEE_WriteByte@bAdd
  6406                           
  6407                           ;memory.c: 182: uint8_t GIEBitValue = 0;
  6408  0F67  01A2               	clrf	DATAEE_WriteByte@GIEBitValue
  6409                           
  6410                           ;memory.c: 184: EEADRL = (bAdd & 0x0ff);
  6411  0F68  0821               	movf	DATAEE_WriteByte@bAdd,w
  6412  0F69  0023               	movlb	3	; select bank3
  6413  0F6A  0091               	movwf	17	;volatile
  6414                           
  6415                           ;memory.c: 185: EEDATL = bData;
  6416  0F6B  0020               	movlb	0	; select bank0
  6417  0F6C  0820               	movf	DATAEE_WriteByte@bData,w
  6418  0F6D  0023               	movlb	3	; select bank3
  6419  0F6E  0093               	movwf	19	;volatile
  6420                           
  6421                           ;memory.c: 186: EECON1bits.EEPGD = 0;
  6422  0F6F  1395               	bcf	21,7	;volsfr
  6423                           
  6424                           ;memory.c: 187: EECON1bits.CFGS = 0;
  6425  0F70  1315               	bcf	21,6	;volsfr
  6426                           
  6427                           ;memory.c: 188: EECON1bits.WREN = 1;
  6428  0F71  1515               	bsf	21,2	;volsfr
  6429                           
  6430                           ;memory.c: 190: GIEBitValue = INTCONbits.GIE;
  6431  0F72  3000               	movlw	0
  6432  0F73  1B8B               	btfsc	11,7	;volatile
  6433  0F74  3001               	movlw	1
  6434  0F75  0020               	movlb	0	; select bank0
  6435  0F76  00A2               	movwf	DATAEE_WriteByte@GIEBitValue
  6436                           
  6437                           ;memory.c: 191: INTCONbits.GIE = 0;
  6438  0F77  138B               	bcf	11,7	;volatile
  6439                           
  6440                           ;memory.c: 192: EECON2 = 0x55;
  6441  0F78  3055               	movlw	85
  6442  0F79  0023               	movlb	3	; select bank3
  6443  0F7A  0096               	movwf	22	;volsfr
  6444                           
  6445                           ;memory.c: 193: EECON2 = 0xAA;
  6446  0F7B  30AA               	movlw	170
  6447  0F7C  0096               	movwf	22	;volsfr
  6448                           
  6449                           ;memory.c: 194: EECON1bits.WR = 1;
  6450  0F7D  1495               	bsf	21,1	;volsfr
  6451  0F7E                     l321:	
  6452                           ;memory.c: 197: {
  6453                           
  6454                           ;memory.c: 196: while (EECON1bits.WR)
  6455                           
  6456  0F7E  1895               	btfsc	21,1	;volsfr
  6457  0F7F  2F7E               	goto	l321
  6458                           
  6459                           ;memory.c: 198: }
  6460                           ;memory.c: 200: EECON1bits.WREN = 0;
  6461  0F80  1115               	bcf	21,2	;volsfr
  6462                           
  6463                           ;memory.c: 201: INTCONbits.GIE = GIEBitValue;
  6464  0F81  0020               	movlb	0	; select bank0
  6465  0F82  0C22               	rrf	DATAEE_WriteByte@GIEBitValue,w
  6466  0F83  1C03               	skipc
  6467  0F84  138B               	bcf	11,7	;volatile
  6468  0F85  1803               	skipnc
  6469  0F86  178B               	bsf	11,7	;volatile
  6470  0F87  0008               	return
  6471  0F88                     __end_of_DATAEE_WriteByte:	
  6472                           
  6473                           	psect	text31
  6474  0D75                     __ptext31:	
  6475 ;; *************** function _PROTOCOL_EXT *****************
  6476 ;; Defined at:
  6477 ;;		line 121 in file "protocol.c"
  6478 ;; Parameters:    Size  Location     Type
  6479 ;;  char_buf        1    wreg     PTR unsigned char 
  6480 ;;		 -> buf(48), I2C1_StatusCallback@ext_buf(48), 
  6481 ;; Auto vars:     Size  Location     Type
  6482 ;;  char_buf        1    0[BANK0 ] PTR unsigned char 
  6483 ;;		 -> buf(48), I2C1_StatusCallback@ext_buf(48), 
  6484 ;; Return value:  Size  Location     Type
  6485 ;;                  1    wreg      void 
  6486 ;; Registers used:
  6487 ;;		wreg, status,2, status,0
  6488 ;; Tracked objects:
  6489 ;;		On entry : 0/0
  6490 ;;		On exit  : 0/0
  6491 ;;		Unchanged: 0/0
  6492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6494 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6496 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6497 ;;Total ram usage:        1 bytes
  6498 ;; Hardware stack levels used:    1
  6499 ;; Hardware stack levels required when called:    5
  6500 ;; This function calls:
  6501 ;;		Nothing
  6502 ;; This function is called by:
  6503 ;;		_PROTOCOL_Loop
  6504 ;; This function uses a non-reentrant model
  6505 ;;
  6506                           
  6507                           
  6508                           ;psect for function _PROTOCOL_EXT
  6509  0D75                     _PROTOCOL_EXT:	
  6510                           
  6511                           ;incstack = 0
  6512                           ; Regs used in _PROTOCOL_EXT: [wreg+status,2+status,0]
  6513  0D75  0008               	return
  6514  0D76                     __end_of_PROTOCOL_EXT:	
  6515                           
  6516                           	psect	text32
  6517  0F25                     __ptext32:	
  6518 ;; *************** function _EUSART_Read *****************
  6519 ;; Defined at:
  6520 ;;		line 112 in file "mcc_generated_files/eusart.c"
  6521 ;; Parameters:    Size  Location     Type
  6522 ;;		None
  6523 ;; Auto vars:     Size  Location     Type
  6524 ;;  readValue       1    1[BANK0 ] unsigned char 
  6525 ;; Return value:  Size  Location     Type
  6526 ;;                  1    wreg      unsigned char 
  6527 ;; Registers used:
  6528 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6529 ;; Tracked objects:
  6530 ;;		On entry : 0/0
  6531 ;;		On exit  : 0/0
  6532 ;;		Unchanged: 0/0
  6533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6535 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6536 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6537 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6538 ;;Total ram usage:        2 bytes
  6539 ;; Hardware stack levels used:    1
  6540 ;; Hardware stack levels required when called:    5
  6541 ;; This function calls:
  6542 ;;		Nothing
  6543 ;; This function is called by:
  6544 ;;		_PROTOCOL_Loop
  6545 ;;		_getch
  6546 ;; This function uses a non-reentrant model
  6547 ;;
  6548                           
  6549                           
  6550                           ;psect for function _EUSART_Read
  6551  0F25                     _EUSART_Read:	
  6552                           
  6553                           ;eusart.c: 114: uint8_t readValue = 0;
  6554                           
  6555                           ;incstack = 0
  6556                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  6557  0F25  0020               	movlb	0	; select bank0
  6558  0F26  01A1               	clrf	EUSART_Read@readValue
  6559  0F27                     l2894:	
  6560                           ;eusart.c: 117: {
  6561                           
  6562                           ;eusart.c: 116: while(0 == eusartRxCount)
  6563                           
  6564  0F27  0860               	movf	_eusartRxCount,w	;volatile
  6565  0F28  1903               	btfsc	3,2
  6566  0F29  2F27               	goto	l2894
  6567                           
  6568                           ;eusart.c: 118: }
  6569                           ;eusart.c: 120: readValue = eusartRxBuffer[eusartRxTail++];
  6570  0F2A  0861               	movf	_eusartRxTail,w
  6571  0F2B  3EA0               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  6572  0F2C  0086               	movwf	6
  6573  0F2D  0187               	clrf	7
  6574  0F2E  0801               	movf	1,w
  6575  0F2F  00A0               	movwf	??_EUSART_Read
  6576  0F30  0820               	movf	??_EUSART_Read,w
  6577  0F31  00A1               	movwf	EUSART_Read@readValue
  6578  0F32  3001               	movlw	1
  6579  0F33  00A0               	movwf	??_EUSART_Read
  6580  0F34  0820               	movf	??_EUSART_Read,w
  6581  0F35  07E1               	addwf	_eusartRxTail,f	;volatile
  6582                           
  6583                           ;eusart.c: 121: if(sizeof(eusartRxBuffer) <= eusartRxTail)
  6584  0F36  3008               	movlw	8
  6585  0F37  0261               	subwf	_eusartRxTail,w	;volatile
  6586  0F38  1803               	btfsc	3,0
  6587                           
  6588                           ;eusart.c: 122: {
  6589                           ;eusart.c: 123: eusartRxTail = 0;
  6590  0F39  01E1               	clrf	_eusartRxTail	;volatile
  6591                           
  6592                           ;eusart.c: 124: }
  6593                           ;eusart.c: 125: PIE1bits.RCIE = 0;
  6594  0F3A  0021               	movlb	1	; select bank1
  6595  0F3B  1291               	bcf	17,5	;volatile
  6596                           
  6597                           ;eusart.c: 126: eusartRxCount--;
  6598  0F3C  3001               	movlw	1
  6599  0F3D  0020               	movlb	0	; select bank0
  6600  0F3E  02E0               	subwf	_eusartRxCount,f	;volatile
  6601                           
  6602                           ;eusart.c: 127: PIE1bits.RCIE = 1;
  6603  0F3F  0021               	movlb	1	; select bank1
  6604  0F40  1691               	bsf	17,5	;volatile
  6605                           
  6606                           ;eusart.c: 129: return readValue;
  6607  0F41  0020               	movlb	0	; select bank0
  6608  0F42  0821               	movf	EUSART_Read@readValue,w
  6609  0F43  0008               	return
  6610  0F44                     __end_of_EUSART_Read:	
  6611                           
  6612                           	psect	text33
  6613  06B9                     __ptext33:	
  6614 ;; *************** function _PROTOCOL_Initialize *****************
  6615 ;; Defined at:
  6616 ;;		line 60 in file "protocol.c"
  6617 ;; Parameters:    Size  Location     Type
  6618 ;;  device_id       2    1[BANK0 ] PTR const unsigned char 
  6619 ;;		 -> STR_1(11), 
  6620 ;;  start_handle    1    3[BANK0 ] PTR void 
  6621 ;;		 -> NULL(0), 
  6622 ;;  stop_handler    1    4[BANK0 ] PTR void 
  6623 ;;		 -> NULL(0), 
  6624 ;;  set_handler     1    5[BANK0 ] PTR void 
  6625 ;;		 -> NULL(0), 
  6626 ;;  inv_handler     2    6[BANK0 ] PTR void 
  6627 ;;		 -> inv_handler(1), 
  6628 ;;  scaler          1    8[BANK0 ] unsigned char 
  6629 ;; Auto vars:     Size  Location     Type
  6630 ;;		None
  6631 ;; Return value:  Size  Location     Type
  6632 ;;                  1    wreg      void 
  6633 ;; Registers used:
  6634 ;;		wreg, status,2, status,0, pclath, cstack
  6635 ;; Tracked objects:
  6636 ;;		On entry : 0/0
  6637 ;;		On exit  : 0/0
  6638 ;;		Unchanged: 0/0
  6639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6640 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6641 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6642 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6643 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6644 ;;Total ram usage:       10 bytes
  6645 ;; Hardware stack levels used:    1
  6646 ;; Hardware stack levels required when called:    6
  6647 ;; This function calls:
  6648 ;;		_DATAEE_ReadByte
  6649 ;; This function is called by:
  6650 ;;		_main
  6651 ;; This function uses a non-reentrant model
  6652 ;;
  6653                           
  6654                           
  6655                           ;psect for function _PROTOCOL_Initialize
  6656  06B9                     _PROTOCOL_Initialize:	
  6657                           
  6658                           ;protocol.c: 61: device_id_ = device_id;
  6659                           
  6660                           ;incstack = 0
  6661                           ; Regs used in _PROTOCOL_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6662  06B9  0020               	movlb	0	; select bank0
  6663  06BA  0822               	movf	PROTOCOL_Initialize@device_id+1,w
  6664  06BB  0021               	movlb	1	; select bank1
  6665  06BC  00D8               	movwf	(_device_id_+1)^(0+128)
  6666  06BD  0020               	movlb	0	; select bank0
  6667  06BE  0821               	movf	PROTOCOL_Initialize@device_id,w
  6668  06BF  0021               	movlb	1	; select bank1
  6669  06C0  00D7               	movwf	_device_id_^(0+128)
  6670                           
  6671                           ;protocol.c: 62: PROTOCOL_Start_Handler = start_handler;
  6672  06C1  0020               	movlb	0	; select bank0
  6673  06C2  0823               	movf	PROTOCOL_Initialize@start_handler,w
  6674  06C3  00A9               	movwf	??_PROTOCOL_Initialize
  6675  06C4  3000               	movlw	0
  6676  06C5  00AA               	movwf	??_PROTOCOL_Initialize+1
  6677  06C6  0829               	movf	??_PROTOCOL_Initialize,w
  6678  06C7  0021               	movlb	1	; select bank1
  6679  06C8  00DD               	movwf	_PROTOCOL_Start_Handler^(0+128)
  6680  06C9  0020               	movlb	0	; select bank0
  6681  06CA  082A               	movf	??_PROTOCOL_Initialize+1,w
  6682  06CB  0021               	movlb	1	; select bank1
  6683  06CC  00DE               	movwf	(_PROTOCOL_Start_Handler+1)^(0+128)
  6684                           
  6685                           ;protocol.c: 63: PROTOCOL_Stop_Handler = stop_handler;
  6686  06CD  0020               	movlb	0	; select bank0
  6687  06CE  0824               	movf	PROTOCOL_Initialize@stop_handler,w
  6688  06CF  00A9               	movwf	??_PROTOCOL_Initialize
  6689  06D0  3000               	movlw	0
  6690  06D1  00AA               	movwf	??_PROTOCOL_Initialize+1
  6691  06D2  0829               	movf	??_PROTOCOL_Initialize,w
  6692  06D3  0021               	movlb	1	; select bank1
  6693  06D4  00DB               	movwf	_PROTOCOL_Stop_Handler^(0+128)
  6694  06D5  0020               	movlb	0	; select bank0
  6695  06D6  082A               	movf	??_PROTOCOL_Initialize+1,w
  6696  06D7  0021               	movlb	1	; select bank1
  6697  06D8  00DC               	movwf	(_PROTOCOL_Stop_Handler+1)^(0+128)
  6698                           
  6699                           ;protocol.c: 64: PROTOCOL_Set_Handler = set_handler;
  6700  06D9  0020               	movlb	0	; select bank0
  6701  06DA  0825               	movf	PROTOCOL_Initialize@set_handler,w
  6702  06DB  00A9               	movwf	??_PROTOCOL_Initialize
  6703  06DC  3000               	movlw	0
  6704  06DD  00AA               	movwf	??_PROTOCOL_Initialize+1
  6705  06DE  0829               	movf	??_PROTOCOL_Initialize,w
  6706  06DF  0021               	movlb	1	; select bank1
  6707  06E0  00D9               	movwf	_PROTOCOL_Set_Handler^(0+128)
  6708  06E1  0020               	movlb	0	; select bank0
  6709  06E2  082A               	movf	??_PROTOCOL_Initialize+1,w
  6710  06E3  0021               	movlb	1	; select bank1
  6711  06E4  00DA               	movwf	(_PROTOCOL_Set_Handler+1)^(0+128)
  6712                           
  6713                           ;protocol.c: 67: value = DATAEE_ReadByte(1);
  6714  06E5  3001               	movlw	1
  6715  06E6  318D  25FE  3186   	fcall	_DATAEE_ReadByte
  6716  06E9  0020               	movlb	0	; select bank0
  6717  06EA  00A9               	movwf	??_PROTOCOL_Initialize
  6718  06EB  0829               	movf	??_PROTOCOL_Initialize,w
  6719  06EC  00DB               	movwf	_value
  6720                           
  6721                           ;protocol.c: 69: slave_address = DATAEE_ReadByte(0);
  6722  06ED  3000               	movlw	0
  6723  06EE  318D  25FE         	fcall	_DATAEE_ReadByte
  6724  06F0  0020               	movlb	0	; select bank0
  6725  06F1  00A9               	movwf	??_PROTOCOL_Initialize
  6726  06F2  0829               	movf	??_PROTOCOL_Initialize,w
  6727  06F3  00DD               	movwf	_slave_address
  6728                           
  6729                           ;protocol.c: 72: readbuf.status = COMPLETE;
  6730  06F4  3003               	movlw	3
  6731  06F5  00A9               	movwf	??_PROTOCOL_Initialize
  6732  06F6  0829               	movf	??_PROTOCOL_Initialize,w
  6733  06F7  00EA               	movwf	_readbuf+3
  6734                           
  6735                           ;protocol.c: 73: PROTOCOL_Inv_Handler = inv_handler;
  6736  06F8  0827               	movf	PROTOCOL_Initialize@inv_handler+1,w
  6737  06F9  00D1               	movwf	_PROTOCOL_Inv_Handler+1
  6738  06FA  0826               	movf	PROTOCOL_Initialize@inv_handler,w
  6739  06FB  00D0               	movwf	_PROTOCOL_Inv_Handler
  6740                           
  6741                           ;protocol.c: 74: tmr_scaler = scaler;
  6742  06FC  0828               	movf	PROTOCOL_Initialize@scaler,w
  6743  06FD  00A9               	movwf	??_PROTOCOL_Initialize
  6744  06FE  0829               	movf	??_PROTOCOL_Initialize,w
  6745  06FF  00EC               	movwf	_tmr_scaler
  6746  0700  0008               	return
  6747  0701                     __end_of_PROTOCOL_Initialize:	
  6748                           
  6749                           	psect	text34
  6750  0DFE                     __ptext34:	
  6751 ;; *************** function _DATAEE_ReadByte *****************
  6752 ;; Defined at:
  6753 ;;		line 204 in file "mcc_generated_files/memory.c"
  6754 ;; Parameters:    Size  Location     Type
  6755 ;;  bAdd            1    wreg     unsigned char 
  6756 ;; Auto vars:     Size  Location     Type
  6757 ;;  bAdd            1    0[BANK0 ] unsigned char 
  6758 ;; Return value:  Size  Location     Type
  6759 ;;                  1    wreg      unsigned char 
  6760 ;; Registers used:
  6761 ;;		wreg
  6762 ;; Tracked objects:
  6763 ;;		On entry : 0/0
  6764 ;;		On exit  : 0/0
  6765 ;;		Unchanged: 0/0
  6766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6768 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6770 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6771 ;;Total ram usage:        1 bytes
  6772 ;; Hardware stack levels used:    1
  6773 ;; Hardware stack levels required when called:    5
  6774 ;; This function calls:
  6775 ;;		Nothing
  6776 ;; This function is called by:
  6777 ;;		_PROTOCOL_Initialize
  6778 ;; This function uses a non-reentrant model
  6779 ;;
  6780                           
  6781                           
  6782                           ;psect for function _DATAEE_ReadByte
  6783  0DFE                     _DATAEE_ReadByte:	
  6784                           
  6785                           ;incstack = 0
  6786                           ; Regs used in _DATAEE_ReadByte: [wreg]
  6787                           ;DATAEE_ReadByte@bAdd stored from wreg
  6788  0DFE  0020               	movlb	0	; select bank0
  6789  0DFF  00A0               	movwf	DATAEE_ReadByte@bAdd
  6790                           
  6791                           ;memory.c: 206: EEADRL = (bAdd & 0x0ff);
  6792  0E00  0820               	movf	DATAEE_ReadByte@bAdd,w
  6793  0E01  0023               	movlb	3	; select bank3
  6794  0E02  0091               	movwf	17	;volatile
  6795                           
  6796                           ;memory.c: 207: EECON1bits.CFGS = 0;
  6797  0E03  1315               	bcf	21,6	;volsfr
  6798                           
  6799                           ;memory.c: 208: EECON1bits.EEPGD = 0;
  6800  0E04  1395               	bcf	21,7	;volsfr
  6801                           
  6802                           ;memory.c: 209: EECON1bits.RD = 1;
  6803  0E05  1415               	bsf	21,0	;volsfr
  6804                           
  6805                           ;memory.c: 210: __nop();
  6806  0E06  0000               	nop
  6807                           
  6808                           ;memory.c: 211: __nop();
  6809  0E07  0000               	nop
  6810                           
  6811                           ;memory.c: 213: return (EEDATL);
  6812  0E08  0023               	movlb	3	; select bank3
  6813  0E09  0813               	movf	19,w	;volatile
  6814  0E0A  0008               	return
  6815  0E0B                     __end_of_DATAEE_ReadByte:	
  6816                           
  6817                           	psect	text35
  6818  0F06                     __ptext35:	
  6819 ;; *************** function _PIN_MANAGER_Initialize *****************
  6820 ;; Defined at:
  6821 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
  6822 ;; Parameters:    Size  Location     Type
  6823 ;;		None
  6824 ;; Auto vars:     Size  Location     Type
  6825 ;;		None
  6826 ;; Return value:  Size  Location     Type
  6827 ;;                  1    wreg      void 
  6828 ;; Registers used:
  6829 ;;		wreg, status,2
  6830 ;; Tracked objects:
  6831 ;;		On entry : 0/0
  6832 ;;		On exit  : 0/0
  6833 ;;		Unchanged: 0/0
  6834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6836 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6838 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6839 ;;Total ram usage:        0 bytes
  6840 ;; Hardware stack levels used:    1
  6841 ;; Hardware stack levels required when called:    5
  6842 ;; This function calls:
  6843 ;;		Nothing
  6844 ;; This function is called by:
  6845 ;;		_main
  6846 ;;		_SYSTEM_Initialize
  6847 ;; This function uses a non-reentrant model
  6848 ;;
  6849                           
  6850                           
  6851                           ;psect for function _PIN_MANAGER_Initialize
  6852  0F06                     _PIN_MANAGER_Initialize:	
  6853                           
  6854                           ;pin_manager.c: 56: LATA = 0x00;
  6855                           
  6856                           ;incstack = 0
  6857                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  6858  0F06  0022               	movlb	2	; select bank2
  6859  0F07  018C               	clrf	12	;volatile
  6860                           
  6861                           ;pin_manager.c: 57: LATB = 0x00;
  6862  0F08  018D               	clrf	13	;volatile
  6863                           
  6864                           ;pin_manager.c: 58: LATC = 0x00;
  6865  0F09  018E               	clrf	14	;volatile
  6866                           
  6867                           ;pin_manager.c: 63: TRISA = 0x3F;
  6868  0F0A  303F               	movlw	63
  6869  0F0B  0021               	movlb	1	; select bank1
  6870  0F0C  008C               	movwf	12	;volatile
  6871                           
  6872                           ;pin_manager.c: 64: TRISB = 0xF0;
  6873  0F0D  30F0               	movlw	240
  6874  0F0E  008D               	movwf	13	;volatile
  6875                           
  6876                           ;pin_manager.c: 65: TRISC = 0x7F;
  6877  0F0F  307F               	movlw	127
  6878  0F10  008E               	movwf	14	;volatile
  6879                           
  6880                           ;pin_manager.c: 70: ANSELC = 0x4F;
  6881  0F11  304F               	movlw	79
  6882  0F12  0023               	movlb	3	; select bank3
  6883  0F13  008E               	movwf	14	;volatile
  6884                           
  6885                           ;pin_manager.c: 71: ANSELB = 0x20;
  6886  0F14  3020               	movlw	32
  6887  0F15  008D               	movwf	13	;volatile
  6888                           
  6889                           ;pin_manager.c: 72: ANSELA = 0x17;
  6890  0F16  3017               	movlw	23
  6891  0F17  008C               	movwf	12	;volatile
  6892                           
  6893                           ;pin_manager.c: 77: WPUB = 0x00;
  6894  0F18  0024               	movlb	4	; select bank4
  6895  0F19  018D               	clrf	13	;volatile
  6896                           
  6897                           ;pin_manager.c: 78: WPUA = 0x3F;
  6898  0F1A  303F               	movlw	63
  6899  0F1B  008C               	movwf	12	;volatile
  6900                           
  6901                           ;pin_manager.c: 79: WPUC = 0x3F;
  6902  0F1C  303F               	movlw	63
  6903  0F1D  008E               	movwf	14	;volatile
  6904                           
  6905                           ;pin_manager.c: 80: OPTION_REGbits.nWPUEN = 0;
  6906  0F1E  0021               	movlb	1	; select bank1
  6907  0F1F  1395               	bcf	21,7	;volatile
  6908                           
  6909                           ;pin_manager.c: 86: APFCON1 = 0x00;
  6910  0F20  0022               	movlb	2	; select bank2
  6911  0F21  019E               	clrf	30	;volatile
  6912                           
  6913                           ;pin_manager.c: 87: APFCON0 = 0x84;
  6914  0F22  3084               	movlw	132
  6915  0F23  009D               	movwf	29	;volatile
  6916  0F24  0008               	return
  6917  0F25                     __end_of_PIN_MANAGER_Initialize:	
  6918                           
  6919                           	psect	text36
  6920  07FB                     __ptext36:	
  6921 ;; *************** function _OSCILLATOR_Initialize *****************
  6922 ;; Defined at:
  6923 ;;		line 81 in file "mcc_generated_files/mcc.c"
  6924 ;; Parameters:    Size  Location     Type
  6925 ;;		None
  6926 ;; Auto vars:     Size  Location     Type
  6927 ;;		None
  6928 ;; Return value:  Size  Location     Type
  6929 ;;                  1    wreg      void 
  6930 ;; Registers used:
  6931 ;;		wreg, status,2
  6932 ;; Tracked objects:
  6933 ;;		On entry : 0/0
  6934 ;;		On exit  : 0/0
  6935 ;;		Unchanged: 0/0
  6936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6937 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6938 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6939 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6940 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6941 ;;Total ram usage:        0 bytes
  6942 ;; Hardware stack levels used:    1
  6943 ;; Hardware stack levels required when called:    5
  6944 ;; This function calls:
  6945 ;;		Nothing
  6946 ;; This function is called by:
  6947 ;;		_main
  6948 ;;		_SYSTEM_Initialize
  6949 ;; This function uses a non-reentrant model
  6950 ;;
  6951                           
  6952                           
  6953                           ;psect for function _OSCILLATOR_Initialize
  6954  07FB                     _OSCILLATOR_Initialize:	
  6955                           
  6956                           ;mcc.c: 84: OSCCON = 0x68;
  6957                           
  6958                           ;incstack = 0
  6959                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  6960  07FB  3068               	movlw	104
  6961  07FC  0021               	movlb	1	; select bank1
  6962  07FD  0099               	movwf	25	;volatile
  6963                           
  6964                           ;mcc.c: 86: OSCTUNE = 0x00;
  6965  07FE  0198               	clrf	24	;volatile
  6966  07FF  0008               	return
  6967  0800                     __end_of_OSCILLATOR_Initialize:	
  6968                           
  6969                           	psect	text37
  6970  0F44                     __ptext37:	
  6971 ;; *************** function _I2C1_Initialize *****************
  6972 ;; Defined at:
  6973 ;;		line 30 in file "mcc_generated_files/i2c1.c"
  6974 ;; Parameters:    Size  Location     Type
  6975 ;;		None
  6976 ;; Auto vars:     Size  Location     Type
  6977 ;;		None
  6978 ;; Return value:  Size  Location     Type
  6979 ;;                  1    wreg      void 
  6980 ;; Registers used:
  6981 ;;		wreg, status,2, status,0, pclath, cstack
  6982 ;; Tracked objects:
  6983 ;;		On entry : 0/0
  6984 ;;		On exit  : 0/0
  6985 ;;		Unchanged: 0/0
  6986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6988 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6989 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6990 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6991 ;;Total ram usage:        2 bytes
  6992 ;; Hardware stack levels used:    1
  6993 ;; Hardware stack levels required when called:    6
  6994 ;; This function calls:
  6995 ;;		_PROTOCOL_Read_Device_Address
  6996 ;; This function is called by:
  6997 ;;		_main
  6998 ;;		_SYSTEM_Initialize
  6999 ;; This function uses a non-reentrant model
  7000 ;;
  7001                           
  7002                           
  7003                           ;psect for function _I2C1_Initialize
  7004  0F44                     _I2C1_Initialize:	
  7005                           
  7006                           ;i2c1.c: 34: _delay((unsigned long)((2000)*(4000000/4000.0)));
  7007                           
  7008                           ;incstack = 0
  7009                           ; Regs used in _I2C1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7010  0F44  300B               	movlw	11
  7011  0F45  0020               	movlb	0	; select bank0
  7012  0F46  00A1               	movwf	??_I2C1_Initialize+1
  7013  0F47  3026               	movlw	38
  7014  0F48  00A0               	movwf	??_I2C1_Initialize
  7015  0F49  305D               	movlw	93
  7016  0F4A                     u2367:	
  7017  0F4A  0B89               	decfsz	9,f
  7018  0F4B  2F4A               	goto	u2367
  7019  0F4C  0BA0               	decfsz	??_I2C1_Initialize,f
  7020  0F4D  2F4A               	goto	u2367
  7021  0F4E  0BA1               	decfsz	??_I2C1_Initialize+1,f
  7022  0F4F  2F4A               	goto	u2367
  7023  0F50  3200               	nop2
  7024                           
  7025                           ;i2c1.c: 38: SSP1STAT = 0x80;
  7026  0F51  3080               	movlw	128
  7027  0F52  0024               	movlb	4	; select bank4
  7028  0F53  0094               	movwf	20	;volatile
  7029                           
  7030                           ;i2c1.c: 40: SSP1CON1 = 0x26;
  7031  0F54  3026               	movlw	38
  7032  0F55  0095               	movwf	21	;volatile
  7033                           
  7034                           ;i2c1.c: 42: SSP1CON2 = 0x81;
  7035  0F56  3081               	movlw	129
  7036  0F57  0096               	movwf	22	;volatile
  7037                           
  7038                           ;i2c1.c: 44: SSP1CON3 = 0x00;
  7039  0F58  0197               	clrf	23	;volatile
  7040                           
  7041                           ;i2c1.c: 46: SSP1MSK = (0x7F << 1);
  7042  0F59  30FE               	movlw	254
  7043  0F5A  0093               	movwf	19	;volatile
  7044                           
  7045                           ;i2c1.c: 48: SSP1ADD = (PROTOCOL_Read_Device_Address() << 1);
  7046  0F5B  318D  2582         	fcall	_PROTOCOL_Read_Device_Address
  7047  0F5D  0709               	addwf	9,w
  7048  0F5E  0024               	movlb	4	; select bank4
  7049  0F5F  0092               	movwf	18	;volatile
  7050                           
  7051                           ;i2c1.c: 51: PIR1bits.SSP1IF = 0;
  7052  0F60  0020               	movlb	0	; select bank0
  7053  0F61  1191               	bcf	17,3	;volatile
  7054                           
  7055                           ;i2c1.c: 53: PIE1bits.SSP1IE = 1;
  7056  0F62  0021               	movlb	1	; select bank1
  7057  0F63  1591               	bsf	17,3	;volatile
  7058  0F64  0008               	return
  7059  0F65                     __end_of_I2C1_Initialize:	
  7060                           
  7061                           	psect	text38
  7062  0D82                     __ptext38:	
  7063 ;; *************** function _PROTOCOL_Read_Device_Address *****************
  7064 ;; Defined at:
  7065 ;;		line 94 in file "protocol.c"
  7066 ;; Parameters:    Size  Location     Type
  7067 ;;		None
  7068 ;; Auto vars:     Size  Location     Type
  7069 ;;		None
  7070 ;; Return value:  Size  Location     Type
  7071 ;;                  1    wreg      unsigned char 
  7072 ;; Registers used:
  7073 ;;		wreg
  7074 ;; Tracked objects:
  7075 ;;		On entry : 0/0
  7076 ;;		On exit  : 0/0
  7077 ;;		Unchanged: 0/0
  7078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7082 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7083 ;;Total ram usage:        0 bytes
  7084 ;; Hardware stack levels used:    1
  7085 ;; Hardware stack levels required when called:    5
  7086 ;; This function calls:
  7087 ;;		Nothing
  7088 ;; This function is called by:
  7089 ;;		_I2C1_Initialize
  7090 ;;		_PROTOCOL_Loop
  7091 ;; This function uses a non-reentrant model
  7092 ;;
  7093                           
  7094                           
  7095                           ;psect for function _PROTOCOL_Read_Device_Address
  7096  0D82                     _PROTOCOL_Read_Device_Address:	
  7097                           
  7098                           ;protocol.c: 95: return slave_address;
  7099                           
  7100                           ;incstack = 0
  7101                           ; Regs used in _PROTOCOL_Read_Device_Address: [wreg]
  7102  0D82  0020               	movlb	0	; select bank0
  7103  0D83  085D               	movf	_slave_address,w
  7104  0D84  0008               	return
  7105  0D85                     __end_of_PROTOCOL_Read_Device_Address:	
  7106                           
  7107                           	psect	text39
  7108  0E7D                     __ptext39:	
  7109 ;; *************** function _EUSART_Initialize *****************
  7110 ;; Defined at:
  7111 ;;		line 75 in file "mcc_generated_files/eusart.c"
  7112 ;; Parameters:    Size  Location     Type
  7113 ;;		None
  7114 ;; Auto vars:     Size  Location     Type
  7115 ;;		None
  7116 ;; Return value:  Size  Location     Type
  7117 ;;                  1    wreg      void 
  7118 ;; Registers used:
  7119 ;;		wreg, status,2
  7120 ;; Tracked objects:
  7121 ;;		On entry : 0/0
  7122 ;;		On exit  : 0/0
  7123 ;;		Unchanged: 0/0
  7124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7126 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7127 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7128 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7129 ;;Total ram usage:        1 bytes
  7130 ;; Hardware stack levels used:    1
  7131 ;; Hardware stack levels required when called:    5
  7132 ;; This function calls:
  7133 ;;		Nothing
  7134 ;; This function is called by:
  7135 ;;		_main
  7136 ;;		_SYSTEM_Initialize
  7137 ;; This function uses a non-reentrant model
  7138 ;;
  7139                           
  7140                           
  7141                           ;psect for function _EUSART_Initialize
  7142  0E7D                     _EUSART_Initialize:	
  7143                           
  7144                           ;eusart.c: 78: PIE1bits.RCIE = 0;
  7145                           
  7146                           ;incstack = 0
  7147                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  7148  0E7D  0021               	movlb	1	; select bank1
  7149  0E7E  1291               	bcf	17,5	;volatile
  7150                           
  7151                           ;eusart.c: 79: PIE1bits.TXIE = 0;
  7152  0E7F  1211               	bcf	17,4	;volatile
  7153                           
  7154                           ;eusart.c: 84: BAUDCON = 0x08;
  7155  0E80  3008               	movlw	8
  7156  0E81  0023               	movlb	3	; select bank3
  7157  0E82  009F               	movwf	31	;volatile
  7158                           
  7159                           ;eusart.c: 87: RCSTA = 0x90;
  7160  0E83  3090               	movlw	144
  7161  0E84  009D               	movwf	29	;volatile
  7162                           
  7163                           ;eusart.c: 90: TXSTA = 0x24;
  7164  0E85  3024               	movlw	36
  7165  0E86  009E               	movwf	30	;volatile
  7166                           
  7167                           ;eusart.c: 93: SPBRGL = 0x67;
  7168  0E87  3067               	movlw	103
  7169  0E88  009B               	movwf	27	;volatile
  7170                           
  7171                           ;eusart.c: 96: SPBRGH = 0x00;
  7172  0E89  019C               	clrf	28	;volatile
  7173                           
  7174                           ;eusart.c: 100: eusartTxHead = 0;
  7175  0E8A  01FC               	clrf	_eusartTxHead	;volatile
  7176                           
  7177                           ;eusart.c: 101: eusartTxTail = 0;
  7178  0E8B  01FB               	clrf	_eusartTxTail	;volatile
  7179                           
  7180                           ;eusart.c: 102: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
  7181  0E8C  3008               	movlw	8
  7182  0E8D  0020               	movlb	0	; select bank0
  7183  0E8E  00A0               	movwf	??_EUSART_Initialize
  7184  0E8F  0820               	movf	??_EUSART_Initialize,w
  7185  0E90  00FA               	movwf	_eusartTxBufferRemaining	;volatile
  7186                           
  7187                           ;eusart.c: 104: eusartRxHead = 0;
  7188  0E91  01E2               	clrf	_eusartRxHead	;volatile
  7189                           
  7190                           ;eusart.c: 105: eusartRxTail = 0;
  7191  0E92  01E1               	clrf	_eusartRxTail	;volatile
  7192                           
  7193                           ;eusart.c: 106: eusartRxCount = 0;
  7194  0E93  01E0               	clrf	_eusartRxCount	;volatile
  7195                           
  7196                           ;eusart.c: 109: PIE1bits.RCIE = 1;
  7197  0E94  0021               	movlb	1	; select bank1
  7198  0E95  1691               	bsf	17,5	;volatile
  7199  0E96  0008               	return
  7200  0E97                     __end_of_EUSART_Initialize:	
  7201                           
  7202                           	psect	text40
  7203  0DC8                     __ptext40:	
  7204 ;; *************** function _ADC_Initialize *****************
  7205 ;; Defined at:
  7206 ;;		line 64 in file "mcc_generated_files/adc.c"
  7207 ;; Parameters:    Size  Location     Type
  7208 ;;		None
  7209 ;; Auto vars:     Size  Location     Type
  7210 ;;		None
  7211 ;; Return value:  Size  Location     Type
  7212 ;;                  1    wreg      void 
  7213 ;; Registers used:
  7214 ;;		wreg, status,2
  7215 ;; Tracked objects:
  7216 ;;		On entry : 0/0
  7217 ;;		On exit  : 0/0
  7218 ;;		Unchanged: 0/0
  7219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7223 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7224 ;;Total ram usage:        0 bytes
  7225 ;; Hardware stack levels used:    1
  7226 ;; Hardware stack levels required when called:    5
  7227 ;; This function calls:
  7228 ;;		Nothing
  7229 ;; This function is called by:
  7230 ;;		_main
  7231 ;;		_SYSTEM_Initialize
  7232 ;; This function uses a non-reentrant model
  7233 ;;
  7234                           
  7235                           
  7236                           ;psect for function _ADC_Initialize
  7237  0DC8                     _ADC_Initialize:	
  7238                           
  7239                           ;adc.c: 69: ADCON0 = 0x01;
  7240                           
  7241                           ;incstack = 0
  7242                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  7243  0DC8  3001               	movlw	1
  7244  0DC9  0021               	movlb	1	; select bank1
  7245  0DCA  009D               	movwf	29	;volatile
  7246                           
  7247                           ;adc.c: 72: ADCON1 = 0xF0;
  7248  0DCB  30F0               	movlw	240
  7249  0DCC  009E               	movwf	30	;volatile
  7250                           
  7251                           ;adc.c: 75: ADRESL = 0x00;
  7252  0DCD  019B               	clrf	27	;volatile
  7253                           
  7254                           ;adc.c: 78: ADRESH = 0x00;
  7255  0DCE  019C               	clrf	28	;volatile
  7256  0DCF  0008               	return
  7257  0DD0                     __end_of_ADC_Initialize:	
  7258                           
  7259                           	psect	intentry
  7260  0004                     __pintentry:	
  7261 ;; *************** function _INTERRUPT_InterruptManager *****************
  7262 ;; Defined at:
  7263 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  7264 ;; Parameters:    Size  Location     Type
  7265 ;;		None
  7266 ;; Auto vars:     Size  Location     Type
  7267 ;;		None
  7268 ;; Return value:  Size  Location     Type
  7269 ;;                  1    wreg      void 
  7270 ;; Registers used:
  7271 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7272 ;; Tracked objects:
  7273 ;;		On entry : 0/0
  7274 ;;		On exit  : 0/0
  7275 ;;		Unchanged: 0/0
  7276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7278 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7279 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7280 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7281 ;;Total ram usage:        1 bytes
  7282 ;; Hardware stack levels used:    1
  7283 ;; Hardware stack levels required when called:    4
  7284 ;; This function calls:
  7285 ;;		_EUSART_Receive_ISR
  7286 ;;		_EUSART_Transmit_ISR
  7287 ;;		_I2C1_ISR
  7288 ;; This function is called by:
  7289 ;;		Interrupt level 1
  7290 ;; This function uses a non-reentrant model
  7291 ;;
  7292                           
  7293  0004                     _INTERRUPT_InterruptManager:	
  7294                           
  7295                           ;incstack = 0
  7296  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  7297                           
  7298                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7299  0005  3180               	pagesel	$
  7300  0006  0020               	movlb	0	; select bank0
  7301  0007  087F               	movf	127,w
  7302  0008  00F9               	movwf	??_INTERRUPT_InterruptManager
  7303                           
  7304                           ;interrupt_manager.c: 54: if(INTCONbits.PEIE == 1 && PIE1bits.TXIE == 1 && PIR1bits.TXIF
      +                           == 1)
  7305  0009  1F0B               	btfss	11,6	;volatile
  7306  000A  2815               	goto	i1l168
  7307  000B  0021               	movlb	1	; select bank1
  7308  000C  1E11               	btfss	17,4	;volatile
  7309  000D  2815               	goto	i1l168
  7310  000E  0020               	movlb	0	; select bank0
  7311  000F  1E11               	btfss	17,4	;volatile
  7312  0010  2815               	goto	i1l168
  7313                           
  7314                           ;interrupt_manager.c: 55: {
  7315                           ;interrupt_manager.c: 56: EUSART_Transmit_ISR();
  7316  0011  318E  26B2  3180   	fcall	_EUSART_Transmit_ISR
  7317                           
  7318                           ;interrupt_manager.c: 57: }
  7319  0014  282B               	goto	i1l174
  7320  0015                     i1l168:	
  7321                           
  7322                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits
      +                          .RCIF == 1)
  7323  0015  1F0B               	btfss	11,6	;volatile
  7324  0016  2821               	goto	i1l170
  7325  0017  0021               	movlb	1	; select bank1
  7326  0018  1E91               	btfss	17,5	;volatile
  7327  0019  2821               	goto	i1l170
  7328  001A  0020               	movlb	0	; select bank0
  7329  001B  1E91               	btfss	17,5	;volatile
  7330  001C  2821               	goto	i1l170
  7331                           
  7332                           ;interrupt_manager.c: 59: {
  7333                           ;interrupt_manager.c: 60: EUSART_Receive_ISR();
  7334  001D  318E  2697  3180   	fcall	_EUSART_Receive_ISR
  7335                           
  7336                           ;interrupt_manager.c: 61: }
  7337  0020  282B               	goto	i1l174
  7338  0021                     i1l170:	
  7339                           
  7340                           ;interrupt_manager.c: 62: else if(INTCONbits.PEIE == 1 && PIE1bits.SSP1IE == 1 && PIR1bi
      +                          ts.SSP1IF == 1)
  7341  0021  1F0B               	btfss	11,6	;volatile
  7342  0022  282B               	goto	i1l174
  7343  0023  0021               	movlb	1	; select bank1
  7344  0024  1D91               	btfss	17,3	;volatile
  7345  0025  282B               	goto	i1l174
  7346  0026  0020               	movlb	0	; select bank0
  7347  0027  1D91               	btfss	17,3	;volatile
  7348  0028  282B               	goto	i1l174
  7349                           
  7350                           ;interrupt_manager.c: 63: {
  7351                           ;interrupt_manager.c: 64: I2C1_ISR();
  7352  0029  318F  27AC         	fcall	_I2C1_ISR
  7353  002B                     i1l174:	
  7354                           ;interrupt_manager.c: 66: else
  7355                           ;interrupt_manager.c: 67: {
  7356                           
  7357                           ;interrupt_manager.c: 65: }
  7358                           
  7359  002B  0879               	movf	??_INTERRUPT_InterruptManager,w
  7360  002C  0020               	movlb	0	; select bank0
  7361  002D  00FF               	movwf	127
  7362  002E  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  7363  002F  0009               	retfie
  7364  0030                     __end_of_INTERRUPT_InterruptManager:	
  7365                           
  7366                           	psect	text42
  7367  0FAC                     __ptext42:	
  7368 ;; *************** function _I2C1_ISR *****************
  7369 ;; Defined at:
  7370 ;;		line 57 in file "mcc_generated_files/i2c1.c"
  7371 ;; Parameters:    Size  Location     Type
  7372 ;;		None
  7373 ;; Auto vars:     Size  Location     Type
  7374 ;;  i2c_data        1    8[COMMON] unsigned char 
  7375 ;; Return value:  Size  Location     Type
  7376 ;;                  1    wreg      void 
  7377 ;; Registers used:
  7378 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7379 ;; Tracked objects:
  7380 ;;		On entry : 0/0
  7381 ;;		On exit  : 0/0
  7382 ;;		Unchanged: 0/0
  7383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7384 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7385 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7386 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7387 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7388 ;;Total ram usage:        2 bytes
  7389 ;; Hardware stack levels used:    1
  7390 ;; Hardware stack levels required when called:    3
  7391 ;; This function calls:
  7392 ;;		_I2C1_StatusCallback
  7393 ;; This function is called by:
  7394 ;;		_INTERRUPT_InterruptManager
  7395 ;; This function uses a non-reentrant model
  7396 ;;
  7397                           
  7398                           
  7399                           ;psect for function _I2C1_ISR
  7400  0FAC                     _I2C1_ISR:	
  7401                           
  7402                           ;i2c1.c: 59: uint8_t i2c_data = 0x55;
  7403                           
  7404                           ;incstack = 0
  7405                           ; Regs used in _I2C1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7406  0FAC  3055               	movlw	85
  7407  0FAD  00F7               	movwf	??_I2C1_ISR
  7408  0FAE  0877               	movf	??_I2C1_ISR,w
  7409  0FAF  00F8               	movwf	I2C1_ISR@i2c_data
  7410                           
  7411                           ;i2c1.c: 64: PIR1bits.SSP1IF = 0;
  7412  0FB0  0020               	movlb	0	; select bank0
  7413  0FB1  1191               	bcf	17,3	;volatile
  7414                           
  7415                           ;i2c1.c: 65: i2c_data = SSP1BUF;
  7416  0FB2  0024               	movlb	4	; select bank4
  7417  0FB3  0811               	movf	17,w	;volatile
  7418  0FB4  00F7               	movwf	??_I2C1_ISR
  7419  0FB5  0877               	movf	??_I2C1_ISR,w
  7420  0FB6  00F8               	movwf	I2C1_ISR@i2c_data
  7421                           
  7422                           ;i2c1.c: 66: if(1 == SSP1STATbits.R_nW)
  7423  0FB7  1D14               	btfss	20,2	;volatile
  7424  0FB8  2FC0               	goto	i1l64
  7425                           
  7426                           ;i2c1.c: 67: {
  7427                           ;i2c1.c: 68: if((1 == SSP1STATbits.D_nA) && (1 == SSP1CON2bits.ACKSTAT))
  7428  0FB9  1A94               	btfsc	20,5	;volatile
  7429  0FBA  1F16               	btfss	22,6	;volatile
  7430  0FBB  2FBE               	goto	i1l3064
  7431                           
  7432                           ;i2c1.c: 69: {
  7433                           ;i2c1.c: 71: I2C1_StatusCallback(I2C1_SLAVE_READ_COMPLETED);
  7434  0FBC  3003               	movlw	3
  7435  0FBD  2FCE               	goto	L3
  7436  0FBE                     i1l3064:	
  7437                           ;i2c1.c: 72: }
  7438                           
  7439                           
  7440                           ;i2c1.c: 73: else
  7441                           ;i2c1.c: 74: {
  7442                           ;i2c1.c: 76: I2C1_StatusCallback(I2C1_SLAVE_READ_REQUEST);
  7443  0FBE  3001               	movlw	1
  7444  0FBF  2FCE               	goto	L3
  7445  0FC0                     i1l64:	
  7446                           ;i2c1.c: 77: }
  7447                           ;i2c1.c: 78: }
  7448                           
  7449                           
  7450                           ;i2c1.c: 79: else if(0 == SSP1STATbits.D_nA)
  7451  0FC0  1A94               	btfsc	20,5	;volatile
  7452  0FC1  2FC9               	goto	i1l3072
  7453                           
  7454                           ;i2c1.c: 80: {
  7455                           ;i2c1.c: 83: if(0x00 == i2c_data)
  7456  0FC2  0878               	movf	I2C1_ISR@i2c_data,w
  7457  0FC3  1D03               	btfss	3,2
  7458  0FC4  2FC7               	goto	i1l3070
  7459                           
  7460                           ;i2c1.c: 84: {
  7461                           ;i2c1.c: 86: I2C1_StatusCallback(I2C1_SLAVE_GENERAL_CALL_REQUEST);
  7462  0FC5  3004               	movlw	4
  7463  0FC6  2FCE               	goto	L3
  7464  0FC7                     i1l3070:	
  7465                           ;i2c1.c: 87: }
  7466                           
  7467                           
  7468                           ;i2c1.c: 88: else
  7469                           ;i2c1.c: 89: {
  7470                           ;i2c1.c: 91: I2C1_StatusCallback(I2C1_SLAVE_WRITE_REQUEST);
  7471  0FC7  3000               	movlw	0
  7472  0FC8  2FCE               	goto	L3
  7473  0FC9                     i1l3072:	
  7474                           ;i2c1.c: 92: }
  7475                           ;i2c1.c: 93: }
  7476                           
  7477                           
  7478                           ;i2c1.c: 94: else
  7479                           ;i2c1.c: 95: {
  7480                           ;i2c1.c: 96: I2C_slaveWriteData = i2c_data;
  7481  0FC9  0878               	movf	I2C1_ISR@i2c_data,w
  7482  0FCA  00F7               	movwf	??_I2C1_ISR
  7483  0FCB  0877               	movf	??_I2C1_ISR,w
  7484  0FCC  00FD               	movwf	_I2C_slaveWriteData	;volatile
  7485                           
  7486                           ;i2c1.c: 99: I2C1_StatusCallback(I2C1_SLAVE_WRITE_COMPLETED);
  7487  0FCD  3002               	movlw	2
  7488  0FCE                     L3:	
  7489  0FCE  3184  2493         	fcall	_I2C1_StatusCallback
  7490                           
  7491                           ;i2c1.c: 100: }
  7492                           ;i2c1.c: 102: SSP1CON1bits.CKP = 1;
  7493  0FD0  0024               	movlb	4	; select bank4
  7494  0FD1  1615               	bsf	21,4	;volatile
  7495  0FD2  0008               	return
  7496  0FD3                     __end_of_I2C1_ISR:	
  7497                           
  7498                           	psect	text43
  7499  0493                     __ptext43:	
  7500 ;; *************** function _I2C1_StatusCallback *****************
  7501 ;; Defined at:
  7502 ;;		line 106 in file "mcc_generated_files/i2c1.c"
  7503 ;; Parameters:    Size  Location     Type
  7504 ;;  i2c_bus_stat    1    wreg     enum E3099
  7505 ;; Auto vars:     Size  Location     Type
  7506 ;;  i2c_bus_stat    1    5[COMMON] enum E3099
  7507 ;;  pdata           1    6[COMMON] PTR unsigned char 
  7508 ;;		 -> type_no_data(1), PROTOCOL_Send_uint8_t@pbuf(1), sendbuf(16), readbuf.length(1), 
  7509 ;;		 -> readbuf.type(1), readbuf(5), 
  7510 ;; Return value:  Size  Location     Type
  7511 ;;                  1    wreg      void 
  7512 ;; Registers used:
  7513 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7514 ;; Tracked objects:
  7515 ;;		On entry : 0/0
  7516 ;;		On exit  : 0/0
  7517 ;;		Unchanged: 0/0
  7518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7520 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7521 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7522 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7523 ;;Total ram usage:        3 bytes
  7524 ;; Hardware stack levels used:    1
  7525 ;; Hardware stack levels required when called:    2
  7526 ;; This function calls:
  7527 ;;		_PROTOCOL_Backplane_Slave_Enabled
  7528 ;;		_PROTOCOL_I2C_GET
  7529 ;;		_PROTOCOL_I2C_SEN
  7530 ;;		_PROTOCOL_I2C_WHO
  7531 ;;		_PROTOCOL_INV
  7532 ;;		_PROTOCOL_RST
  7533 ;;		_PROTOCOL_Read_Lock
  7534 ;;		i1_PROTOCOL_EXT
  7535 ;;		i1_PROTOCOL_SAV
  7536 ;;		i1_PROTOCOL_SET
  7537 ;;		i1_PROTOCOL_STA
  7538 ;;		i1_PROTOCOL_STP
  7539 ;; This function is called by:
  7540 ;;		_I2C1_ISR
  7541 ;; This function uses a non-reentrant model
  7542 ;;
  7543                           
  7544                           
  7545                           ;psect for function _I2C1_StatusCallback
  7546  0493                     _I2C1_StatusCallback:	
  7547                           
  7548                           ;incstack = 0
  7549                           ; Regs used in _I2C1_StatusCallback: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7550                           ;I2C1_StatusCallback@i2c_bus_state stored from wreg
  7551  0493  00F5               	movwf	I2C1_StatusCallback@i2c_bus_state
  7552                           
  7553                           ;i2c1.c: 109: static uint8_t slaveWriteType = SLAVE_NORMAL_DATA;
  7554                           ;i2c1.c: 110: static uint8_t next = 0x00;
  7555                           ;i2c1.c: 111: static uint8_t ext_len = 0;
  7556                           ;i2c1.c: 112: static uint8_t ext_cnt = 0;
  7557                           ;i2c1.c: 113: static char ext_buf[48];
  7558                           ;i2c1.c: 114: uint8_t *pdata;
  7559                           ;i2c1.c: 115: switch (i2c_bus_state)
  7560  0494  2D4C               	goto	i1l2870
  7561  0495                     i1l86:	
  7562                           ;i2c1.c: 116: {
  7563                           ;i2c1.c: 117: case I2C1_SLAVE_WRITE_REQUEST:
  7564                           
  7565                           
  7566                           ;i2c1.c: 118: slaveWriteType = SLAVE_DATA_ADDRESS;
  7567  0495  0020               	movlb	0	; select bank0
  7568  0496  01E6               	clrf	I2C1_StatusCallback@slaveWriteType
  7569  0497  0AE6               	incf	I2C1_StatusCallback@slaveWriteType,f
  7570                           
  7571                           ;i2c1.c: 119: break;
  7572  0498  0008               	return
  7573  0499                     i1l2796:	
  7574                           ;i2c1.c: 121: case I2C1_SLAVE_GENERAL_CALL_REQUEST:
  7575                           
  7576                           
  7577                           ;i2c1.c: 123: slaveWriteType = SLAVE_GENERAL_CALL;
  7578  0499  3002               	movlw	2
  7579  049A  00F4               	movwf	??_I2C1_StatusCallback
  7580  049B  0874               	movf	??_I2C1_StatusCallback,w
  7581  049C  0020               	movlb	0	; select bank0
  7582  049D  00E6               	movwf	I2C1_StatusCallback@slaveWriteType
  7583                           
  7584                           ;i2c1.c: 124: break;
  7585  049E  0008               	return
  7586  049F                     i1l2798:	
  7587                           ;i2c1.c: 132: case 0x01:
  7588                           
  7589                           ;i2c1.c: 131: switch(next) {
  7590                           
  7591                           ;i2c1.c: 129: {
  7592                           ;i2c1.c: 130: case SLAVE_DATA_ADDRESS:
  7593                           
  7594                           ;i2c1.c: 128: switch(slaveWriteType)
  7595                           
  7596                           ;i2c1.c: 126: case I2C1_SLAVE_WRITE_COMPLETED:
  7597                           
  7598                           
  7599                           ;i2c1.c: 133: PROTOCOL_SET(I2C_slaveWriteData);
  7600  049F  087D               	movf	_I2C_slaveWriteData,w	;volatile
  7601  04A0  318D  25B3  3184   	fcall	i1_PROTOCOL_SET
  7602  04A3  2D0E               	goto	i1l2844
  7603  04A4                     i1l2802:	
  7604                           ;i2c1.c: 138: case 0x04:
  7605                           
  7606                           ;i2c1.c: 137: switch(I2C_slaveWriteData) {
  7607                           
  7608                           ;i2c1.c: 136: case 0x00:
  7609                           
  7610                           ;i2c1.c: 135: break;
  7611                           
  7612                           ;i2c1.c: 134: next = 0x00;
  7613                           
  7614                           
  7615                           ;i2c1.c: 139: PROTOCOL_STA();
  7616  04A4  318D  2593  3184   	fcall	i1_PROTOCOL_STA
  7617                           
  7618                           ;i2c1.c: 140: break;
  7619  04A7  2D27               	goto	i1l2854
  7620  04A8                     i1l2804:	
  7621                           ;i2c1.c: 141: case 0x05:
  7622                           
  7623                           
  7624                           ;i2c1.c: 142: PROTOCOL_STP();
  7625  04A8  318D  257F  3184   	fcall	i1_PROTOCOL_STP
  7626                           
  7627                           ;i2c1.c: 143: break;
  7628  04AB  2D27               	goto	i1l2854
  7629  04AC                     i1l2806:	
  7630                           ;i2c1.c: 144: case 0x03:
  7631                           
  7632                           
  7633                           ;i2c1.c: 145: PROTOCOL_SAV();
  7634  04AC  318D  25D0  3184   	fcall	i1_PROTOCOL_SAV
  7635                           
  7636                           ;i2c1.c: 146: break;
  7637  04AF  2D27               	goto	i1l2854
  7638  04B0                     i1l2808:	
  7639                           ;i2c1.c: 147: case 0x06:
  7640                           
  7641                           
  7642                           ;i2c1.c: 148: PROTOCOL_INV();
  7643  04B0  318D  258F  3184   	fcall	_PROTOCOL_INV
  7644                           
  7645                           ;i2c1.c: 149: break;
  7646  04B3  2D27               	goto	i1l2854
  7647  04B4                     i1l2810:	
  7648                           ;i2c1.c: 150: case 0x0c:
  7649                           
  7650                           
  7651                           ;i2c1.c: 151: PROTOCOL_RST();
  7652  04B4  318D  25F4  3184   	fcall	_PROTOCOL_RST
  7653                           
  7654                           ;i2c1.c: 152: break;
  7655  04B7  2D27               	goto	i1l2854
  7656  04B8                     i1l103:	
  7657                           ;i2c1.c: 153: case 0x08:
  7658                           
  7659                           
  7660                           ;i2c1.c: 154: next = 0x01;
  7661  04B8  01E5               	clrf	I2C1_StatusCallback@next
  7662  04B9  0AE5               	incf	I2C1_StatusCallback@next,f
  7663                           
  7664                           ;i2c1.c: 155: break;
  7665  04BA  2D27               	goto	i1l2854
  7666  04BB                     i1l2812:	
  7667                           ;i2c1.c: 156: case 0x0a:
  7668                           
  7669                           
  7670                           ;i2c1.c: 157: next = 0x02;
  7671  04BB  3002               	movlw	2
  7672  04BC  2CEF               	goto	L4
  7673  04BD                     i1l2816:	
  7674                           ;i2c1.c: 159: }
  7675                           
  7676                           ;i2c1.c: 158: break;
  7677                           
  7678  04BD  087D               	movf	_I2C_slaveWriteData,w	;volatile
  7679                           
  7680                           ; Switch size 1, requested type "space"
  7681                           ; Number of cases is 7, Range of values is 3 to 12
  7682                           ; switch strategies available:
  7683                           ; Name         Instructions Cycles
  7684                           ; simple_byte           22    12 (average)
  7685                           ; direct_byte           29     9 (fixed)
  7686                           ; jumptable            263     9 (fixed)
  7687                           ;	Chosen strategy is simple_byte
  7688  04BE  3A03               	xorlw	3	; case 3
  7689  04BF  1903               	skipnz
  7690  04C0  2CAC               	goto	i1l2806
  7691  04C1  3A07               	xorlw	7	; case 4
  7692  04C2  1903               	skipnz
  7693  04C3  2CA4               	goto	i1l2802
  7694  04C4  3A01               	xorlw	1	; case 5
  7695  04C5  1903               	skipnz
  7696  04C6  2CA8               	goto	i1l2804
  7697  04C7  3A03               	xorlw	3	; case 6
  7698  04C8  1903               	skipnz
  7699  04C9  2CB0               	goto	i1l2808
  7700  04CA  3A0E               	xorlw	14	; case 8
  7701  04CB  1903               	skipnz
  7702  04CC  2CB8               	goto	i1l103
  7703  04CD  3A02               	xorlw	2	; case 10
  7704  04CE  1903               	skipnz
  7705  04CF  2CBB               	goto	i1l2812
  7706  04D0  3A06               	xorlw	6	; case 12
  7707  04D1  1903               	skipnz
  7708  04D2  2CB4               	goto	i1l2810
  7709  04D3  2D27               	goto	i1l2854
  7710                           
  7711                           ;i2c1.c: 161: }
  7712                           
  7713                           ;i2c1.c: 160: break;
  7714  04D4  2D27               	goto	i1l2854
  7715  04D5                     i1l2820:	
  7716  04D5  0865               	movf	I2C1_StatusCallback@next,w
  7717                           
  7718                           ; Switch size 1, requested type "space"
  7719                           ; Number of cases is 2, Range of values is 0 to 1
  7720                           ; switch strategies available:
  7721                           ; Name         Instructions Cycles
  7722                           ; simple_byte            7     4 (average)
  7723                           ; direct_byte           10     6 (fixed)
  7724                           ; jumptable            260     6 (fixed)
  7725                           ;	Chosen strategy is simple_byte
  7726  04D6  3A00               	xorlw	0	; case 0
  7727  04D7  1903               	skipnz
  7728  04D8  2CBD               	goto	i1l2816
  7729  04D9  3A01               	xorlw	1	; case 1
  7730  04DA  1903               	skipnz
  7731  04DB  2C9F               	goto	i1l2798
  7732  04DC  2D27               	goto	i1l2854
  7733                           
  7734                           ;i2c1.c: 162: break;
  7735  04DD  2D27               	goto	i1l2854
  7736  04DE                     i1l2822:	
  7737                           ;i2c1.c: 164: case SLAVE_GENERAL_CALL:
  7738                           
  7739                           
  7740                           ;i2c1.c: 165: if (I2C_slaveWriteData == 0x02) {
  7741  04DE  3002               	movlw	2
  7742  04DF  067D               	xorwf	_I2C_slaveWriteData,w	;volatile
  7743  04E0  1D03               	btfss	3,2
  7744  04E1  2D27               	goto	i1l2854
  7745                           
  7746                           ;i2c1.c: 166: SSP1CON2bits.GCEN = 0;
  7747  04E2  0024               	movlb	4	; select bank4
  7748  04E3  1396               	bcf	22,7	;volatile
  7749                           
  7750                           ;i2c1.c: 167: PROTOCOL_Backplane_Slave_Enabled();
  7751  04E4  318D  258B  3184   	fcall	_PROTOCOL_Backplane_Slave_Enabled
  7752                           
  7753                           ;i2c1.c: 168: }
  7754                           ;i2c1.c: 169: break;
  7755  04E7  2D27               	goto	i1l2854
  7756  04E8                     i1l2828:	
  7757                           ;i2c1.c: 173: case 0x02:
  7758                           
  7759                           ;i2c1.c: 172: switch(next) {
  7760                           
  7761                           ;i2c1.c: 171: case SLAVE_NORMAL_DATA:
  7762                           
  7763                           
  7764                           ;i2c1.c: 174: ext_len = I2C_slaveWriteData;
  7765  04E8  087D               	movf	_I2C_slaveWriteData,w	;volatile
  7766  04E9  00F4               	movwf	??_I2C1_StatusCallback
  7767  04EA  0874               	movf	??_I2C1_StatusCallback,w
  7768  04EB  0020               	movlb	0	; select bank0
  7769  04EC  00E4               	movwf	I2C1_StatusCallback@ext_len
  7770                           
  7771                           ;i2c1.c: 175: ext_cnt = 0;
  7772  04ED  01E3               	clrf	I2C1_StatusCallback@ext_cnt
  7773                           
  7774                           ;i2c1.c: 176: next = 0x03;
  7775  04EE  3003               	movlw	3
  7776  04EF                     L4:	
  7777  04EF  00F4               	movwf	??_I2C1_StatusCallback
  7778  04F0  0874               	movf	??_I2C1_StatusCallback,w
  7779  04F1  00E5               	movwf	I2C1_StatusCallback@next
  7780                           
  7781                           ;i2c1.c: 177: break;
  7782  04F2  2D27               	goto	i1l2854
  7783  04F3                     i1l2834:	
  7784                           ;i2c1.c: 178: case 0x03:
  7785                           
  7786                           
  7787                           ;i2c1.c: 179: ext_buf[ext_cnt++] = (char)I2C_slaveWriteData;
  7788  04F3  087D               	movf	_I2C_slaveWriteData,w	;volatile
  7789  04F4  00F4               	movwf	??_I2C1_StatusCallback
  7790  04F5  0863               	movf	I2C1_StatusCallback@ext_cnt,w
  7791  04F6  3EA0               	addlw	(low (I2C1_StatusCallback@ext_buf| (0+256)))& (0+255)
  7792  04F7  0086               	movwf	6
  7793  04F8  3001               	movlw	1	; select bank3/4
  7794  04F9  0087               	movwf	7
  7795  04FA  0874               	movf	??_I2C1_StatusCallback,w
  7796  04FB  0081               	movwf	1
  7797  04FC  3001               	movlw	1
  7798  04FD  00F4               	movwf	??_I2C1_StatusCallback
  7799  04FE  0874               	movf	??_I2C1_StatusCallback,w
  7800  04FF  07E3               	addwf	I2C1_StatusCallback@ext_cnt,f
  7801                           
  7802                           ;i2c1.c: 180: if (ext_cnt >= ext_len) {
  7803  0500  0864               	movf	I2C1_StatusCallback@ext_len,w
  7804  0501  0263               	subwf	I2C1_StatusCallback@ext_cnt,w
  7805  0502  1C03               	skipc
  7806  0503  2D27               	goto	i1l2854
  7807                           
  7808                           ;i2c1.c: 181: if (!PROTOCOL_Read_Lock()) PROTOCOL_EXT(&ext_buf[0]);
  7809  0504  318D  257C  3184   	fcall	_PROTOCOL_Read_Lock
  7810  0507  3A00               	xorlw	0
  7811  0508  1D03               	skipz
  7812  0509  2D0E               	goto	i1l2844
  7813  050A  30A0               	movlw	(low (I2C1_StatusCallback@ext_buf| (0+256)))& (0+255)
  7814  050B  318D  2574  3184   	fcall	i1_PROTOCOL_EXT
  7815  050E                     i1l2844:	
  7816                           
  7817                           ;i2c1.c: 182: next = 0x00;
  7818  050E  0020               	movlb	0	; select bank0
  7819  050F  01E5               	clrf	I2C1_StatusCallback@next
  7820                           
  7821                           ;i2c1.c: 185: }
  7822                           
  7823                           ;i2c1.c: 183: }
  7824                           ;i2c1.c: 184: break;
  7825  0510  2D27               	goto	i1l2854
  7826  0511                     i1l2848:	
  7827  0511  0020               	movlb	0	; select bank0
  7828  0512  0865               	movf	I2C1_StatusCallback@next,w
  7829                           
  7830                           ; Switch size 1, requested type "space"
  7831                           ; Number of cases is 2, Range of values is 2 to 3
  7832                           ; switch strategies available:
  7833                           ; Name         Instructions Cycles
  7834                           ; simple_byte            7     4 (average)
  7835                           ; direct_byte           13     9 (fixed)
  7836                           ; jumptable            263     9 (fixed)
  7837                           ;	Chosen strategy is simple_byte
  7838  0513  3A02               	xorlw	2	; case 2
  7839  0514  1903               	skipnz
  7840  0515  2CE8               	goto	i1l2828
  7841  0516  3A01               	xorlw	1	; case 3
  7842  0517  1903               	skipnz
  7843  0518  2CF3               	goto	i1l2834
  7844  0519  2D27               	goto	i1l2854
  7845                           
  7846                           ;i2c1.c: 190: }
  7847                           
  7848                           ;i2c1.c: 188: break;
  7849                           
  7850                           ;i2c1.c: 187: default:
  7851                           
  7852                           ;i2c1.c: 186: break;
  7853  051A  2D27               	goto	i1l2854
  7854  051B                     i1l2852:	
  7855  051B  0020               	movlb	0	; select bank0
  7856  051C  0866               	movf	I2C1_StatusCallback@slaveWriteType,w
  7857                           
  7858                           ; Switch size 1, requested type "space"
  7859                           ; Number of cases is 3, Range of values is 0 to 2
  7860                           ; switch strategies available:
  7861                           ; Name         Instructions Cycles
  7862                           ; simple_byte           10     6 (average)
  7863                           ; direct_byte           12     6 (fixed)
  7864                           ; jumptable            260     6 (fixed)
  7865                           ;	Chosen strategy is simple_byte
  7866  051D  3A00               	xorlw	0	; case 0
  7867  051E  1903               	skipnz
  7868  051F  2D11               	goto	i1l2848
  7869  0520  3A01               	xorlw	1	; case 1
  7870  0521  1903               	skipnz
  7871  0522  2CD5               	goto	i1l2820
  7872  0523  3A03               	xorlw	3	; case 2
  7873  0524  1903               	skipnz
  7874  0525  2CDE               	goto	i1l2822
  7875  0526  2D27               	goto	i1l2854
  7876  0527                     i1l2854:	
  7877                           
  7878                           ;i2c1.c: 192: slaveWriteType = SLAVE_NORMAL_DATA;
  7879  0527  0020               	movlb	0	; select bank0
  7880  0528  01E6               	clrf	I2C1_StatusCallback@slaveWriteType
  7881                           
  7882                           ;i2c1.c: 193: break;
  7883  0529  0008               	return
  7884  052A                     i1l2856:	
  7885                           ;i2c1.c: 197: {
  7886                           ;i2c1.c: 198: case 0x01:
  7887                           
  7888                           ;i2c1.c: 196: switch (I2C_slaveWriteData)
  7889                           
  7890                           ;i2c1.c: 195: case I2C1_SLAVE_READ_REQUEST:
  7891                           
  7892                           
  7893                           ;i2c1.c: 199: SSP1BUF = PROTOCOL_I2C_WHO();
  7894  052A  318D  2579         	fcall	_PROTOCOL_I2C_WHO
  7895  052C  0024               	movlb	4	; select bank4
  7896  052D  0091               	movwf	17	;volatile
  7897                           
  7898                           ;i2c1.c: 200: break;
  7899  052E  0008               	return
  7900  052F                     i1l2858:	
  7901                           ;i2c1.c: 201: case 0x07:
  7902                           
  7903                           
  7904                           ;i2c1.c: 202: pdata = PROTOCOL_I2C_SEN();
  7905  052F  3187  2743         	fcall	_PROTOCOL_I2C_SEN
  7906  0531  00F4               	movwf	??_I2C1_StatusCallback
  7907  0532  0874               	movf	??_I2C1_StatusCallback,w
  7908  0533  00F6               	movwf	I2C1_StatusCallback@pdata
  7909                           
  7910                           ;i2c1.c: 203: SSP1BUF = *pdata;
  7911  0534  0876               	movf	I2C1_StatusCallback@pdata,w
  7912  0535  0086               	movwf	6
  7913  0536  0187               	clrf	7
  7914  0537  0801               	movf	1,w
  7915  0538  0024               	movlb	4	; select bank4
  7916  0539  0091               	movwf	17	;volatile
  7917                           
  7918                           ;i2c1.c: 204: break;
  7919  053A  0008               	return
  7920  053B                     i1l2862:	
  7921                           ;i2c1.c: 205: case 0x09:
  7922                           
  7923                           
  7924                           ;i2c1.c: 206: SSP1BUF = PROTOCOL_I2C_GET();
  7925  053B  318D  2576         	fcall	_PROTOCOL_I2C_GET
  7926  053D  0024               	movlb	4	; select bank4
  7927  053E  0091               	movwf	17	;volatile
  7928                           
  7929                           ;i2c1.c: 208: }
  7930                           
  7931                           ;i2c1.c: 207: break;
  7932  053F  0008               	return
  7933  0540                     i1l2866:	
  7934  0540  087D               	movf	_I2C_slaveWriteData,w	;volatile
  7935                           
  7936                           ; Switch size 1, requested type "space"
  7937                           ; Number of cases is 3, Range of values is 1 to 9
  7938                           ; switch strategies available:
  7939                           ; Name         Instructions Cycles
  7940                           ; simple_byte           10     6 (average)
  7941                           ; direct_byte           27     9 (fixed)
  7942                           ; jumptable            263     9 (fixed)
  7943                           ;	Chosen strategy is simple_byte
  7944  0541  3A01               	xorlw	1	; case 1
  7945  0542  1903               	skipnz
  7946  0543  2D2A               	goto	i1l2856
  7947  0544  3A06               	xorlw	6	; case 7
  7948  0545  1903               	skipnz
  7949  0546  2D2F               	goto	i1l2858
  7950  0547  3A0E               	xorlw	14	; case 9
  7951  0548  1903               	skipnz
  7952  0549  2D3B               	goto	i1l2862
  7953  054A  2D56               	goto	i1l124
  7954                           
  7955                           ;i2c1.c: 216: }
  7956                           
  7957                           ;i2c1.c: 214: break;
  7958                           
  7959                           ;i2c1.c: 213: default:
  7960                           
  7961                           ;i2c1.c: 212: break;
  7962                           
  7963                           ;i2c1.c: 211: case I2C1_SLAVE_READ_COMPLETED:
  7964                           
  7965                           ;i2c1.c: 209: break;
  7966  054B  0008               	return
  7967  054C                     i1l2870:	
  7968  054C  0875               	movf	I2C1_StatusCallback@i2c_bus_state,w
  7969                           
  7970                           ; Switch size 1, requested type "space"
  7971                           ; Number of cases is 5, Range of values is 0 to 4
  7972                           ; switch strategies available:
  7973                           ; Name         Instructions Cycles
  7974                           ; direct_byte           16     6 (fixed)
  7975                           ; simple_byte           16     9 (average)
  7976                           ; jumptable            260     6 (fixed)
  7977                           ;	Chosen strategy is direct_byte
  7978  054D  0084               	movwf	4
  7979  054E  3005               	movlw	5
  7980  054F  0204               	subwf	4,w
  7981  0550  1803               	skipnc
  7982  0551  0008               	return
  7983  0552  3188               	movlp	high i1S3338
  7984  0553  3504               	lslf	4,w
  7985  0554  3E00               	addlw	low i1S3338
  7986  0555  0082               	movwf	2
  7987  0556                     i1l124:	
  7988  0556  0008               	return
  7989  0557                     __end_of_I2C1_StatusCallback:	
  7990                           
  7991                           	psect	swtext1
  7992  0800                     __pswtext1:	
  7993  0800                     i1S3338:	
  7994  0800  3184  2C95         	ljmp	i1l86
  7995  0802  3185  2D40         	ljmp	i1l2866
  7996  0804  3185  2D1B         	ljmp	i1l2852
  7997  0806  3185  2D56         	ljmp	i1l124
  7998  0808  3184  2C99         	ljmp	i1l2796
  7999                           
  8000                           	psect	text44
  8001  0D7F                     __ptext44:	
  8002 ;; *************** function i1_PROTOCOL_STP *****************
  8003 ;; Defined at:
  8004 ;;		line 103 in file "protocol.c"
  8005 ;; Parameters:    Size  Location     Type
  8006 ;;		None
  8007 ;; Auto vars:     Size  Location     Type
  8008 ;;		None
  8009 ;; Return value:  Size  Location     Type
  8010 ;;                  1    wreg      void 
  8011 ;; Registers used:
  8012 ;;		wreg, status,2, status,0
  8013 ;; Tracked objects:
  8014 ;;		On entry : 0/0
  8015 ;;		On exit  : 0/0
  8016 ;;		Unchanged: 0/0
  8017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8019 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8021 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8022 ;;Total ram usage:        0 bytes
  8023 ;; Hardware stack levels used:    1
  8024 ;; This function calls:
  8025 ;;		Nothing
  8026 ;; This function is called by:
  8027 ;;		_I2C1_StatusCallback
  8028 ;; This function uses a non-reentrant model
  8029 ;;
  8030                           
  8031                           
  8032                           ;psect for function i1_PROTOCOL_STP
  8033  0D7F                     i1_PROTOCOL_STP:	
  8034                           
  8035                           ;protocol.c: 105: running = 0;
  8036                           
  8037                           ;incstack = 0
  8038                           ; Regs used in i1_PROTOCOL_STP: [wreg+status,2+status,0]
  8039  0D7F  0020               	movlb	0	; select bank0
  8040  0D80  01D9               	clrf	_running
  8041  0D81  0008               	return
  8042  0D82                     __end_ofi1_PROTOCOL_STP:	
  8043                           
  8044                           	psect	text45
  8045  0D93                     __ptext45:	
  8046 ;; *************** function i1_PROTOCOL_STA *****************
  8047 ;; Defined at:
  8048 ;;		line 98 in file "protocol.c"
  8049 ;; Parameters:    Size  Location     Type
  8050 ;;		None
  8051 ;; Auto vars:     Size  Location     Type
  8052 ;;		None
  8053 ;; Return value:  Size  Location     Type
  8054 ;;                  1    wreg      void 
  8055 ;; Registers used:
  8056 ;;		wreg, status,2, status,0
  8057 ;; Tracked objects:
  8058 ;;		On entry : 0/0
  8059 ;;		On exit  : 0/0
  8060 ;;		Unchanged: 0/0
  8061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8065 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8066 ;;Total ram usage:        0 bytes
  8067 ;; Hardware stack levels used:    1
  8068 ;; This function calls:
  8069 ;;		Nothing
  8070 ;; This function is called by:
  8071 ;;		_I2C1_StatusCallback
  8072 ;; This function uses a non-reentrant model
  8073 ;;
  8074                           
  8075                           
  8076                           ;psect for function i1_PROTOCOL_STA
  8077  0D93                     i1_PROTOCOL_STA:	
  8078                           
  8079                           ;protocol.c: 100: running = 1;
  8080                           
  8081                           ;incstack = 0
  8082                           ; Regs used in i1_PROTOCOL_STA: [wreg+status,2+status,0]
  8083  0D93  0020               	movlb	0	; select bank0
  8084  0D94  01D9               	clrf	_running
  8085  0D95  0AD9               	incf	_running,f
  8086  0D96  0008               	return
  8087  0D97                     __end_ofi1_PROTOCOL_STA:	
  8088                           
  8089                           	psect	text46
  8090  0DB3                     __ptext46:	
  8091 ;; *************** function i1_PROTOCOL_SET *****************
  8092 ;; Defined at:
  8093 ;;		line 116 in file "protocol.c"
  8094 ;; Parameters:    Size  Location     Type
  8095 ;;  value_          1    wreg     unsigned char 
  8096 ;; Auto vars:     Size  Location     Type
  8097 ;;  value_          1    1[COMMON] unsigned char 
  8098 ;; Return value:  Size  Location     Type
  8099 ;;                  1    wreg      void 
  8100 ;; Registers used:
  8101 ;;		wreg, status,2, status,0
  8102 ;; Tracked objects:
  8103 ;;		On entry : 0/0
  8104 ;;		On exit  : 0/0
  8105 ;;		Unchanged: 0/0
  8106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8108 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8109 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8110 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8111 ;;Total ram usage:        2 bytes
  8112 ;; Hardware stack levels used:    1
  8113 ;; This function calls:
  8114 ;;		Nothing
  8115 ;; This function is called by:
  8116 ;;		_I2C1_StatusCallback
  8117 ;; This function uses a non-reentrant model
  8118 ;;
  8119                           
  8120                           
  8121                           ;psect for function i1_PROTOCOL_SET
  8122  0DB3                     i1_PROTOCOL_SET:	
  8123                           
  8124                           ;incstack = 0
  8125                           ; Regs used in i1_PROTOCOL_SET: [wreg+status,2+status,0]
  8126                           ;i1PROTOCOL_SET@value_ stored from wreg
  8127  0DB3  00F1               	movwf	i1PROTOCOL_SET@value_
  8128                           
  8129                           ;protocol.c: 117: value = value_;
  8130  0DB4  0871               	movf	i1PROTOCOL_SET@value_,w
  8131  0DB5  00F0               	movwf	??i1_PROTOCOL_SET
  8132  0DB6  0870               	movf	??i1_PROTOCOL_SET,w
  8133  0DB7  0020               	movlb	0	; select bank0
  8134  0DB8  00DB               	movwf	_value
  8135  0DB9  0008               	return
  8136  0DBA                     __end_ofi1_PROTOCOL_SET:	
  8137                           
  8138                           	psect	text47
  8139  0DD0                     __ptext47:	
  8140 ;; *************** function i1_PROTOCOL_SAV *****************
  8141 ;; Defined at:
  8142 ;;		line 112 in file "protocol.c"
  8143 ;; Parameters:    Size  Location     Type
  8144 ;;		None
  8145 ;; Auto vars:     Size  Location     Type
  8146 ;;		None
  8147 ;; Return value:  Size  Location     Type
  8148 ;;                  1    wreg      void 
  8149 ;; Registers used:
  8150 ;;		wreg, status,2, status,0, pclath, cstack
  8151 ;; Tracked objects:
  8152 ;;		On entry : 0/0
  8153 ;;		On exit  : 0/0
  8154 ;;		Unchanged: 0/0
  8155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8157 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8158 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8159 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8160 ;;Total ram usage:        1 bytes
  8161 ;; Hardware stack levels used:    1
  8162 ;; Hardware stack levels required when called:    1
  8163 ;; This function calls:
  8164 ;;		i1_DATAEE_WriteByte
  8165 ;; This function is called by:
  8166 ;;		_I2C1_StatusCallback
  8167 ;; This function uses a non-reentrant model
  8168 ;;
  8169                           
  8170                           
  8171                           ;psect for function i1_PROTOCOL_SAV
  8172  0DD0                     i1_PROTOCOL_SAV:	
  8173                           
  8174                           ;protocol.c: 113: DATAEE_WriteByte(1, value);
  8175                           
  8176                           ;incstack = 0
  8177                           ; Regs used in i1_PROTOCOL_SAV: [wreg+status,2+status,0+pclath+cstack]
  8178  0DD0  0020               	movlb	0	; select bank0
  8179  0DD1  085B               	movf	_value,w
  8180  0DD2  00F3               	movwf	??i1_PROTOCOL_SAV
  8181  0DD3  0873               	movf	??i1_PROTOCOL_SAV,w
  8182  0DD4  00F0               	movwf	i1DATAEE_WriteByte@bData
  8183  0DD5  3001               	movlw	1
  8184  0DD6  318E  26E9         	fcall	i1_DATAEE_WriteByte
  8185  0DD8  0008               	return
  8186  0DD9                     __end_ofi1_PROTOCOL_SAV:	
  8187                           
  8188                           	psect	text48
  8189  0EE9                     __ptext48:	
  8190 ;; *************** function i1_DATAEE_WriteByte *****************
  8191 ;; Defined at:
  8192 ;;		line 180 in file "mcc_generated_files/memory.c"
  8193 ;; Parameters:    Size  Location     Type
  8194 ;;  bAdd            1    wreg     unsigned char 
  8195 ;;  bData           1    0[COMMON] unsigned char 
  8196 ;; Auto vars:     Size  Location     Type
  8197 ;;  bAdd            1    1[COMMON] unsigned char 
  8198 ;;  DATAEE_Write    1    2[COMMON] unsigned char 
  8199 ;; Return value:  Size  Location     Type
  8200 ;;                  1    wreg      void 
  8201 ;; Registers used:
  8202 ;;		wreg, status,2, status,0
  8203 ;; Tracked objects:
  8204 ;;		On entry : 0/0
  8205 ;;		On exit  : 0/0
  8206 ;;		Unchanged: 0/0
  8207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8208 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8209 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8211 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8212 ;;Total ram usage:        3 bytes
  8213 ;; Hardware stack levels used:    1
  8214 ;; This function calls:
  8215 ;;		Nothing
  8216 ;; This function is called by:
  8217 ;;		i1_PROTOCOL_SAV
  8218 ;; This function uses a non-reentrant model
  8219 ;;
  8220                           
  8221                           
  8222                           ;psect for function i1_DATAEE_WriteByte
  8223  0EE9                     i1_DATAEE_WriteByte:	
  8224                           
  8225                           ;incstack = 0
  8226                           ; Regs used in i1_DATAEE_WriteByte: [wreg+status,2+status,0]
  8227                           ;i1DATAEE_WriteByte@bAdd stored from wreg
  8228  0EE9  00F1               	movwf	i1DATAEE_WriteByte@bAdd
  8229                           
  8230                           ;memory.c: 182: uint8_t GIEBitValue = 0;
  8231  0EEA  01F2               	clrf	i1DATAEE_WriteByte@GIEBitValue
  8232                           
  8233                           ;memory.c: 184: EEADRL = (bAdd & 0x0ff);
  8234  0EEB  0871               	movf	i1DATAEE_WriteByte@bAdd,w
  8235  0EEC  0023               	movlb	3	; select bank3
  8236  0EED  0091               	movwf	17	;volatile
  8237                           
  8238                           ;memory.c: 185: EEDATL = bData;
  8239  0EEE  0870               	movf	i1DATAEE_WriteByte@bData,w
  8240  0EEF  0093               	movwf	19	;volatile
  8241                           
  8242                           ;memory.c: 186: EECON1bits.EEPGD = 0;
  8243  0EF0  1395               	bcf	21,7	;volsfr
  8244                           
  8245                           ;memory.c: 187: EECON1bits.CFGS = 0;
  8246  0EF1  1315               	bcf	21,6	;volsfr
  8247                           
  8248                           ;memory.c: 188: EECON1bits.WREN = 1;
  8249  0EF2  1515               	bsf	21,2	;volsfr
  8250                           
  8251                           ;memory.c: 190: GIEBitValue = INTCONbits.GIE;
  8252  0EF3  3000               	movlw	0
  8253  0EF4  1B8B               	btfsc	11,7	;volatile
  8254  0EF5  3001               	movlw	1
  8255  0EF6  00F2               	movwf	i1DATAEE_WriteByte@GIEBitValue
  8256                           
  8257                           ;memory.c: 191: INTCONbits.GIE = 0;
  8258  0EF7  138B               	bcf	11,7	;volatile
  8259                           
  8260                           ;memory.c: 192: EECON2 = 0x55;
  8261  0EF8  3055               	movlw	85
  8262  0EF9  0096               	movwf	22	;volsfr
  8263                           
  8264                           ;memory.c: 193: EECON2 = 0xAA;
  8265  0EFA  30AA               	movlw	170
  8266  0EFB  0096               	movwf	22	;volsfr
  8267                           
  8268                           ;memory.c: 194: EECON1bits.WR = 1;
  8269  0EFC  1495               	bsf	21,1	;volsfr
  8270  0EFD                     i1l321:	
  8271                           ;memory.c: 197: {
  8272                           
  8273                           ;memory.c: 196: while (EECON1bits.WR)
  8274                           
  8275  0EFD  1895               	btfsc	21,1	;volsfr
  8276  0EFE  2EFD               	goto	i1l321
  8277                           
  8278                           ;memory.c: 198: }
  8279                           ;memory.c: 200: EECON1bits.WREN = 0;
  8280  0EFF  1115               	bcf	21,2	;volsfr
  8281                           
  8282                           ;memory.c: 201: INTCONbits.GIE = GIEBitValue;
  8283  0F00  0C72               	rrf	i1DATAEE_WriteByte@GIEBitValue,w
  8284  0F01  1C03               	skipc
  8285  0F02  138B               	bcf	11,7	;volatile
  8286  0F03  1803               	skipnc
  8287  0F04  178B               	bsf	11,7	;volatile
  8288  0F05  0008               	return
  8289  0F06                     __end_ofi1_DATAEE_WriteByte:	
  8290                           
  8291                           	psect	text49
  8292  0D74                     __ptext49:	
  8293 ;; *************** function i1_PROTOCOL_EXT *****************
  8294 ;; Defined at:
  8295 ;;		line 121 in file "protocol.c"
  8296 ;; Parameters:    Size  Location     Type
  8297 ;;  char_buf        1    wreg     PTR unsigned char 
  8298 ;;		 -> buf(48), I2C1_StatusCallback@ext_buf(48), 
  8299 ;; Auto vars:     Size  Location     Type
  8300 ;;  char_buf        1  (no storage) PTR unsigned char 
  8301 ;;		 -> buf(48), I2C1_StatusCallback@ext_buf(48), 
  8302 ;; Return value:  Size  Location     Type
  8303 ;;                  1    wreg      void 
  8304 ;; Registers used:
  8305 ;;		wreg, status,2, status,0
  8306 ;; Tracked objects:
  8307 ;;		On entry : 0/0
  8308 ;;		On exit  : 0/0
  8309 ;;		Unchanged: 0/0
  8310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8312 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8314 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8315 ;;Total ram usage:        0 bytes
  8316 ;; Hardware stack levels used:    1
  8317 ;; This function calls:
  8318 ;;		Nothing
  8319 ;; This function is called by:
  8320 ;;		_I2C1_StatusCallback
  8321 ;; This function uses a non-reentrant model
  8322 ;;
  8323                           
  8324                           
  8325                           ;psect for function i1_PROTOCOL_EXT
  8326  0D74                     i1_PROTOCOL_EXT:	
  8327                           
  8328                           ;incstack = 0
  8329                           ; Regs used in i1_PROTOCOL_EXT: [wreg+status,2+status,0]
  8330  0D74  0008               	return
  8331  0D75                     __end_ofi1_PROTOCOL_EXT:	
  8332                           
  8333                           	psect	text50
  8334  0D7C                     __ptext50:	
  8335 ;; *************** function _PROTOCOL_Read_Lock *****************
  8336 ;; Defined at:
  8337 ;;		line 129 in file "protocol.c"
  8338 ;; Parameters:    Size  Location     Type
  8339 ;;		None
  8340 ;; Auto vars:     Size  Location     Type
  8341 ;;		None
  8342 ;; Return value:  Size  Location     Type
  8343 ;;                  1    wreg      unsigned char 
  8344 ;; Registers used:
  8345 ;;		wreg
  8346 ;; Tracked objects:
  8347 ;;		On entry : 0/0
  8348 ;;		On exit  : 0/0
  8349 ;;		Unchanged: 0/0
  8350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8352 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8354 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8355 ;;Total ram usage:        0 bytes
  8356 ;; Hardware stack levels used:    1
  8357 ;; This function calls:
  8358 ;;		Nothing
  8359 ;; This function is called by:
  8360 ;;		_I2C1_StatusCallback
  8361 ;; This function uses a non-reentrant model
  8362 ;;
  8363                           
  8364                           
  8365                           ;psect for function _PROTOCOL_Read_Lock
  8366  0D7C                     _PROTOCOL_Read_Lock:	
  8367                           
  8368                           ;protocol.c: 130: return locked;
  8369                           
  8370                           ;incstack = 0
  8371                           ; Regs used in _PROTOCOL_Read_Lock: [wreg]
  8372  0D7C  0020               	movlb	0	; select bank0
  8373  0D7D  085A               	movf	_locked,w
  8374  0D7E  0008               	return
  8375  0D7F                     __end_of_PROTOCOL_Read_Lock:	
  8376                           
  8377                           	psect	text51
  8378  0DF4                     __ptext51:	
  8379 ;; *************** function _PROTOCOL_RST *****************
  8380 ;; Defined at:
  8381 ;;		line 285 in file "protocol.c"
  8382 ;; Parameters:    Size  Location     Type
  8383 ;;		None
  8384 ;; Auto vars:     Size  Location     Type
  8385 ;;		None
  8386 ;; Return value:  Size  Location     Type
  8387 ;;                  1    wreg      void 
  8388 ;; Registers used:
  8389 ;;		wreg, status,2, status,0
  8390 ;; Tracked objects:
  8391 ;;		On entry : 0/0
  8392 ;;		On exit  : 0/0
  8393 ;;		Unchanged: 0/0
  8394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8396 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8397 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8398 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8399 ;;Total ram usage:        1 bytes
  8400 ;; Hardware stack levels used:    1
  8401 ;; This function calls:
  8402 ;;		Nothing
  8403 ;; This function is called by:
  8404 ;;		_I2C1_StatusCallback
  8405 ;; This function uses a non-reentrant model
  8406 ;;
  8407                           
  8408                           
  8409                           ;psect for function _PROTOCOL_RST
  8410  0DF4                     _PROTOCOL_RST:	
  8411                           
  8412                           ;protocol.c: 286: if (readbuf.status != TLV_SET) {
  8413                           
  8414                           ;incstack = 0
  8415                           ; Regs used in _PROTOCOL_RST: [wreg+status,2+status,0]
  8416  0DF4  0020               	movlb	0	; select bank0
  8417  0DF5  086A               	movf	_readbuf+3,w
  8418  0DF6  1903               	btfsc	3,2
  8419  0DF7  0008               	return
  8420                           
  8421                           ;protocol.c: 287: readbuf.buf_cnt = 0;
  8422  0DF8  01EB               	clrf	_readbuf+4
  8423                           
  8424                           ;protocol.c: 288: readbuf.status = COMPLETE;
  8425  0DF9  3003               	movlw	3
  8426  0DFA  00F0               	movwf	??_PROTOCOL_RST
  8427  0DFB  0870               	movf	??_PROTOCOL_RST,w
  8428  0DFC  00EA               	movwf	_readbuf+3
  8429  0DFD  0008               	return
  8430  0DFE                     __end_of_PROTOCOL_RST:	
  8431                           
  8432                           	psect	text52
  8433  0D8F                     __ptext52:	
  8434 ;; *************** function _PROTOCOL_INV *****************
  8435 ;; Defined at:
  8436 ;;		line 108 in file "protocol.c"
  8437 ;; Parameters:    Size  Location     Type
  8438 ;;		None
  8439 ;; Auto vars:     Size  Location     Type
  8440 ;;		None
  8441 ;; Return value:  Size  Location     Type
  8442 ;;                  1    wreg      void 
  8443 ;; Registers used:
  8444 ;;		None
  8445 ;; Tracked objects:
  8446 ;;		On entry : 0/0
  8447 ;;		On exit  : 0/0
  8448 ;;		Unchanged: 0/0
  8449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8451 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8452 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8453 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8454 ;;Total ram usage:        0 bytes
  8455 ;; Hardware stack levels used:    1
  8456 ;; This function calls:
  8457 ;;		Nothing
  8458 ;; This function is called by:
  8459 ;;		_I2C1_StatusCallback
  8460 ;; This function uses a non-reentrant model
  8461 ;;
  8462                           
  8463                           
  8464                           ;psect for function _PROTOCOL_INV
  8465  0D8F                     _PROTOCOL_INV:	
  8466                           
  8467                           ;protocol.c: 109: invoked = 1;
  8468                           
  8469                           ;incstack = 0
  8470                           ; Regs used in _PROTOCOL_INV: []
  8471  0D8F  0020               	movlb	0	; select bank0
  8472  0D90  01D8               	clrf	_invoked
  8473  0D91  0AD8               	incf	_invoked,f
  8474  0D92  0008               	return
  8475  0D93                     __end_of_PROTOCOL_INV:	
  8476                           
  8477                           	psect	text53
  8478  0D79                     __ptext53:	
  8479 ;; *************** function _PROTOCOL_I2C_WHO *****************
  8480 ;; Defined at:
  8481 ;;		line 205 in file "protocol.c"
  8482 ;; Parameters:    Size  Location     Type
  8483 ;;		None
  8484 ;; Auto vars:     Size  Location     Type
  8485 ;;		None
  8486 ;; Return value:  Size  Location     Type
  8487 ;;                  1    wreg      unsigned char 
  8488 ;; Registers used:
  8489 ;;		wreg
  8490 ;; Tracked objects:
  8491 ;;		On entry : 0/0
  8492 ;;		On exit  : 0/0
  8493 ;;		Unchanged: 0/0
  8494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8498 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8499 ;;Total ram usage:        0 bytes
  8500 ;; Hardware stack levels used:    1
  8501 ;; This function calls:
  8502 ;;		Nothing
  8503 ;; This function is called by:
  8504 ;;		_I2C1_StatusCallback
  8505 ;; This function uses a non-reentrant model
  8506 ;;
  8507                           
  8508                           
  8509                           ;psect for function _PROTOCOL_I2C_WHO
  8510  0D79                     _PROTOCOL_I2C_WHO:	
  8511                           
  8512                           ;protocol.c: 206: return slave_address;
  8513                           
  8514                           ;incstack = 0
  8515                           ; Regs used in _PROTOCOL_I2C_WHO: [wreg]
  8516  0D79  0020               	movlb	0	; select bank0
  8517  0D7A  085D               	movf	_slave_address,w
  8518  0D7B  0008               	return
  8519  0D7C                     __end_of_PROTOCOL_I2C_WHO:	
  8520                           
  8521                           	psect	text54
  8522  0743                     __ptext54:	
  8523 ;; *************** function _PROTOCOL_I2C_SEN *****************
  8524 ;; Defined at:
  8525 ;;		line 404 in file "protocol.c"
  8526 ;; Parameters:    Size  Location     Type
  8527 ;;		None
  8528 ;; Auto vars:     Size  Location     Type
  8529 ;;  pdata           1    1[COMMON] PTR unsigned char 
  8530 ;;		 -> type_no_data(1), PROTOCOL_Send_uint8_t@pbuf(1), sendbuf(16), readbuf.length(1), 
  8531 ;;		 -> readbuf.type(1), readbuf(5), 
  8532 ;; Return value:  Size  Location     Type
  8533 ;;                  1    wreg      PTR unsigned char 
  8534 ;; Registers used:
  8535 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8536 ;; Tracked objects:
  8537 ;;		On entry : 0/0
  8538 ;;		On exit  : 0/0
  8539 ;;		Unchanged: 0/0
  8540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8542 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8543 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8544 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8545 ;;Total ram usage:        2 bytes
  8546 ;; Hardware stack levels used:    1
  8547 ;; This function calls:
  8548 ;;		Nothing
  8549 ;; This function is called by:
  8550 ;;		_I2C1_StatusCallback
  8551 ;; This function uses a non-reentrant model
  8552 ;;
  8553                           
  8554                           
  8555                           ;psect for function _PROTOCOL_I2C_SEN
  8556  0743                     _PROTOCOL_I2C_SEN:	
  8557                           
  8558                           ;protocol.c: 405: uint8_t *pdata;
  8559                           ;protocol.c: 406: switch(readbuf.status) {
  8560                           
  8561                           ;incstack = 0
  8562                           ; Regs used in _PROTOCOL_I2C_SEN: [wreg-fsr0h+status,2+status,0]
  8563  0743  2F6E               	goto	i1l2722
  8564  0744                     i1l2702:	
  8565                           ;protocol.c: 407: case TLV_SET:
  8566                           
  8567                           
  8568                           ;protocol.c: 408: pdata = &readbuf.type;
  8569  0744  3067               	movlw	(low (_readbuf| 0))& (0+255)
  8570  0745  00F0               	movwf	??_PROTOCOL_I2C_SEN
  8571  0746  0870               	movf	??_PROTOCOL_I2C_SEN,w
  8572  0747  00F1               	movwf	PROTOCOL_I2C_SEN@pdata
  8573                           
  8574                           ;protocol.c: 409: readbuf.status = TYPE_SENT;
  8575  0748  0020               	movlb	0	; select bank0
  8576  0749  01EA               	clrf	_readbuf+3
  8577  074A  0AEA               	incf	_readbuf+3,f
  8578                           
  8579                           ;protocol.c: 410: break;
  8580  074B  2F7D               	goto	i1l2724
  8581  074C                     i1l2706:	
  8582                           ;protocol.c: 411: case TYPE_SENT:
  8583                           
  8584                           
  8585                           ;protocol.c: 412: pdata = &readbuf.length;
  8586  074C  3068               	movlw	(low ((_readbuf| 0+1)))& (0+255)
  8587  074D  00F0               	movwf	??_PROTOCOL_I2C_SEN
  8588  074E  0870               	movf	??_PROTOCOL_I2C_SEN,w
  8589  074F  00F1               	movwf	PROTOCOL_I2C_SEN@pdata
  8590                           
  8591                           ;protocol.c: 413: readbuf.status = LENGTH_SENT;
  8592  0750  3002               	movlw	2
  8593  0751  2F65               	goto	L5
  8594  0752                     i1l2708:	
  8595                           ;protocol.c: 415: case LENGTH_SENT:
  8596                           
  8597                           ;protocol.c: 414: break;
  8598                           
  8599                           
  8600                           ;protocol.c: 416: if (readbuf.buf_cnt < readbuf.length) {
  8601  0752  0868               	movf	_readbuf+1,w
  8602  0753  026B               	subwf	_readbuf+4,w
  8603  0754  1803               	skipnc
  8604  0755  2F5F               	goto	i1l2712
  8605                           
  8606                           ;protocol.c: 417: pdata = &readbuf.pbuffer[readbuf.buf_cnt++];
  8607  0756  0869               	movf	low ((_readbuf| 0+2)),w
  8608  0757  076B               	addwf	_readbuf+4,w
  8609  0758  00F0               	movwf	??_PROTOCOL_I2C_SEN
  8610  0759  0870               	movf	??_PROTOCOL_I2C_SEN,w
  8611  075A  00F1               	movwf	PROTOCOL_I2C_SEN@pdata
  8612  075B  3001               	movlw	1
  8613  075C  00F0               	movwf	??_PROTOCOL_I2C_SEN
  8614  075D  0870               	movf	??_PROTOCOL_I2C_SEN,w
  8615  075E  07EB               	addwf	_readbuf+4,f
  8616  075F                     i1l2712:	
  8617                           
  8618                           ;protocol.c: 418: }
  8619                           ;protocol.c: 419: if (readbuf.buf_cnt == readbuf.length) {
  8620  075F  086B               	movf	_readbuf+4,w
  8621  0760  0668               	xorwf	_readbuf+1,w
  8622  0761  1D03               	skipz
  8623  0762  2F7D               	goto	i1l2724
  8624                           
  8625                           ;protocol.c: 420: readbuf.buf_cnt = 0;
  8626  0763  01EB               	clrf	_readbuf+4
  8627                           
  8628                           ;protocol.c: 421: readbuf.status = COMPLETE;
  8629  0764  3003               	movlw	3
  8630  0765                     L5:	
  8631  0765  00F0               	movwf	??_PROTOCOL_I2C_SEN
  8632  0766  0870               	movf	??_PROTOCOL_I2C_SEN,w
  8633  0767  00EA               	movwf	_readbuf+3
  8634                           
  8635                           ;protocol.c: 422: }
  8636                           ;protocol.c: 423: break;
  8637  0768  2F7D               	goto	i1l2724
  8638  0769                     i1l2718:	
  8639                           ;protocol.c: 424: case COMPLETE:
  8640                           
  8641                           
  8642                           ;protocol.c: 425: pdata = &type_no_data;
  8643  0769  306F               	movlw	(low (_type_no_data| 0))& (0+255)
  8644  076A  00F0               	movwf	??_PROTOCOL_I2C_SEN
  8645  076B  0870               	movf	??_PROTOCOL_I2C_SEN,w
  8646  076C  00F1               	movwf	PROTOCOL_I2C_SEN@pdata
  8647                           
  8648                           ;protocol.c: 427: }
  8649                           
  8650                           ;protocol.c: 426: break;
  8651  076D  2F7D               	goto	i1l2724
  8652  076E                     i1l2722:	
  8653  076E  0020               	movlb	0	; select bank0
  8654  076F  086A               	movf	_readbuf+3,w
  8655                           
  8656                           ; Switch size 1, requested type "space"
  8657                           ; Number of cases is 4, Range of values is 0 to 3
  8658                           ; switch strategies available:
  8659                           ; Name         Instructions Cycles
  8660                           ; simple_byte           13     7 (average)
  8661                           ; direct_byte           14     6 (fixed)
  8662                           ; jumptable            260     6 (fixed)
  8663                           ;	Chosen strategy is simple_byte
  8664  0770  3A00               	xorlw	0	; case 0
  8665  0771  1903               	skipnz
  8666  0772  2F44               	goto	i1l2702
  8667  0773  3A01               	xorlw	1	; case 1
  8668  0774  1903               	skipnz
  8669  0775  2F4C               	goto	i1l2706
  8670  0776  3A03               	xorlw	3	; case 2
  8671  0777  1903               	skipnz
  8672  0778  2F52               	goto	i1l2708
  8673  0779  3A01               	xorlw	1	; case 3
  8674  077A  1903               	skipnz
  8675  077B  2F69               	goto	i1l2718
  8676  077C  2F7D               	goto	i1l2724
  8677  077D                     i1l2724:	
  8678                           
  8679                           ;protocol.c: 428: return pdata;
  8680  077D  0871               	movf	PROTOCOL_I2C_SEN@pdata,w
  8681  077E  0008               	return
  8682  077F                     __end_of_PROTOCOL_I2C_SEN:	
  8683                           
  8684                           	psect	text55
  8685  0D76                     __ptext55:	
  8686 ;; *************** function _PROTOCOL_I2C_GET *****************
  8687 ;; Defined at:
  8688 ;;		line 209 in file "protocol.c"
  8689 ;; Parameters:    Size  Location     Type
  8690 ;;		None
  8691 ;; Auto vars:     Size  Location     Type
  8692 ;;		None
  8693 ;; Return value:  Size  Location     Type
  8694 ;;                  1    wreg      unsigned char 
  8695 ;; Registers used:
  8696 ;;		wreg
  8697 ;; Tracked objects:
  8698 ;;		On entry : 0/0
  8699 ;;		On exit  : 0/0
  8700 ;;		Unchanged: 0/0
  8701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8705 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8706 ;;Total ram usage:        0 bytes
  8707 ;; Hardware stack levels used:    1
  8708 ;; This function calls:
  8709 ;;		Nothing
  8710 ;; This function is called by:
  8711 ;;		_I2C1_StatusCallback
  8712 ;; This function uses a non-reentrant model
  8713 ;;
  8714                           
  8715                           
  8716                           ;psect for function _PROTOCOL_I2C_GET
  8717  0D76                     _PROTOCOL_I2C_GET:	
  8718                           
  8719                           ;protocol.c: 210: return value;
  8720                           
  8721                           ;incstack = 0
  8722                           ; Regs used in _PROTOCOL_I2C_GET: [wreg]
  8723  0D76  0020               	movlb	0	; select bank0
  8724  0D77  085B               	movf	_value,w
  8725  0D78  0008               	return
  8726  0D79                     __end_of_PROTOCOL_I2C_GET:	
  8727                           
  8728                           	psect	text56
  8729  0D8B                     __ptext56:	
  8730 ;; *************** function _PROTOCOL_Backplane_Slave_Enabled *****************
  8731 ;; Defined at:
  8732 ;;		line 201 in file "protocol.c"
  8733 ;; Parameters:    Size  Location     Type
  8734 ;;		None
  8735 ;; Auto vars:     Size  Location     Type
  8736 ;;		None
  8737 ;; Return value:  Size  Location     Type
  8738 ;;                  1    wreg      void 
  8739 ;; Registers used:
  8740 ;;		None
  8741 ;; Tracked objects:
  8742 ;;		On entry : 0/0
  8743 ;;		On exit  : 0/0
  8744 ;;		Unchanged: 0/0
  8745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8747 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8749 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8750 ;;Total ram usage:        0 bytes
  8751 ;; Hardware stack levels used:    1
  8752 ;; This function calls:
  8753 ;;		Nothing
  8754 ;; This function is called by:
  8755 ;;		_I2C1_StatusCallback
  8756 ;; This function uses a non-reentrant model
  8757 ;;
  8758                           
  8759                           
  8760                           ;psect for function _PROTOCOL_Backplane_Slave_Enabled
  8761  0D8B                     _PROTOCOL_Backplane_Slave_Enabled:	
  8762                           
  8763                           ;protocol.c: 202: backplane_slave_enabled = 1;
  8764                           
  8765                           ;incstack = 0
  8766                           ; Regs used in _PROTOCOL_Backplane_Slave_Enabled: []
  8767  0D8B  0020               	movlb	0	; select bank0
  8768  0D8C  01D4               	clrf	_backplane_slave_enabled
  8769  0D8D  0AD4               	incf	_backplane_slave_enabled,f
  8770  0D8E  0008               	return
  8771  0D8F                     __end_of_PROTOCOL_Backplane_Slave_Enabled:	
  8772                           
  8773                           	psect	text57
  8774  0EB2                     __ptext57:	
  8775 ;; *************** function _EUSART_Transmit_ISR *****************
  8776 ;; Defined at:
  8777 ;;		line 165 in file "mcc_generated_files/eusart.c"
  8778 ;; Parameters:    Size  Location     Type
  8779 ;;		None
  8780 ;; Auto vars:     Size  Location     Type
  8781 ;;		None
  8782 ;; Return value:  Size  Location     Type
  8783 ;;                  1    wreg      void 
  8784 ;; Registers used:
  8785 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8786 ;; Tracked objects:
  8787 ;;		On entry : 0/0
  8788 ;;		On exit  : 0/0
  8789 ;;		Unchanged: 0/0
  8790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8792 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8793 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8794 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8795 ;;Total ram usage:        1 bytes
  8796 ;; Hardware stack levels used:    1
  8797 ;; This function calls:
  8798 ;;		Nothing
  8799 ;; This function is called by:
  8800 ;;		_INTERRUPT_InterruptManager
  8801 ;; This function uses a non-reentrant model
  8802 ;;
  8803                           
  8804                           
  8805                           ;psect for function _EUSART_Transmit_ISR
  8806  0EB2                     _EUSART_Transmit_ISR:	
  8807                           
  8808                           ;eusart.c: 169: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
  8809                           
  8810                           ;incstack = 0
  8811                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  8812  0EB2  3008               	movlw	8
  8813  0EB3  027A               	subwf	_eusartTxBufferRemaining,w	;volatile
  8814  0EB4  1803               	skipnc
  8815  0EB5  2ECA               	goto	i1l236
  8816                           
  8817                           ;eusart.c: 170: {
  8818                           ;eusart.c: 171: TXREG = eusartTxBuffer[eusartTxTail++];
  8819  0EB6  087B               	movf	_eusartTxTail,w
  8820  0EB7  3EA8               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  8821  0EB8  0086               	movwf	6
  8822  0EB9  0187               	clrf	7
  8823  0EBA  0801               	movf	1,w
  8824  0EBB  0023               	movlb	3	; select bank3
  8825  0EBC  009A               	movwf	26	;volatile
  8826  0EBD  3001               	movlw	1
  8827  0EBE  00F0               	movwf	??_EUSART_Transmit_ISR
  8828  0EBF  0870               	movf	??_EUSART_Transmit_ISR,w
  8829  0EC0  07FB               	addwf	_eusartTxTail,f	;volatile
  8830                           
  8831                           ;eusart.c: 172: if(sizeof(eusartTxBuffer) <= eusartTxTail)
  8832  0EC1  3008               	movlw	8
  8833  0EC2  027B               	subwf	_eusartTxTail,w	;volatile
  8834  0EC3  1803               	btfsc	3,0
  8835                           
  8836                           ;eusart.c: 173: {
  8837                           ;eusart.c: 174: eusartTxTail = 0;
  8838  0EC4  01FB               	clrf	_eusartTxTail	;volatile
  8839                           
  8840                           ;eusart.c: 175: }
  8841                           ;eusart.c: 176: eusartTxBufferRemaining++;
  8842  0EC5  3001               	movlw	1
  8843  0EC6  00F0               	movwf	??_EUSART_Transmit_ISR
  8844  0EC7  0870               	movf	??_EUSART_Transmit_ISR,w
  8845  0EC8  07FA               	addwf	_eusartTxBufferRemaining,f	;volatile
  8846                           
  8847                           ;eusart.c: 177: }
  8848  0EC9  0008               	return
  8849  0ECA                     i1l236:	
  8850                           
  8851                           ;eusart.c: 178: else
  8852                           ;eusart.c: 179: {
  8853                           ;eusart.c: 180: PIE1bits.TXIE = 0;
  8854  0ECA  0021               	movlb	1	; select bank1
  8855  0ECB  1211               	bcf	17,4	;volatile
  8856  0ECC  0008               	return
  8857  0ECD                     __end_of_EUSART_Transmit_ISR:	
  8858                           
  8859                           	psect	text58
  8860  0E97                     __ptext58:	
  8861 ;; *************** function _EUSART_Receive_ISR *****************
  8862 ;; Defined at:
  8863 ;;		line 184 in file "mcc_generated_files/eusart.c"
  8864 ;; Parameters:    Size  Location     Type
  8865 ;;		None
  8866 ;; Auto vars:     Size  Location     Type
  8867 ;;		None
  8868 ;; Return value:  Size  Location     Type
  8869 ;;                  1    wreg      void 
  8870 ;; Registers used:
  8871 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8872 ;; Tracked objects:
  8873 ;;		On entry : 0/0
  8874 ;;		On exit  : 0/0
  8875 ;;		Unchanged: 0/0
  8876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8877 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8878 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8879 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8880 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8881 ;;Total ram usage:        1 bytes
  8882 ;; Hardware stack levels used:    1
  8883 ;; This function calls:
  8884 ;;		Nothing
  8885 ;; This function is called by:
  8886 ;;		_INTERRUPT_InterruptManager
  8887 ;; This function uses a non-reentrant model
  8888 ;;
  8889                           
  8890                           
  8891                           ;psect for function _EUSART_Receive_ISR
  8892  0E97                     _EUSART_Receive_ISR:	
  8893                           
  8894                           ;eusart.c: 187: if(1 == RCSTAbits.OERR)
  8895                           
  8896                           ;incstack = 0
  8897                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  8898  0E97  0023               	movlb	3	; select bank3
  8899  0E98  1C9D               	btfss	29,1	;volatile
  8900  0E99  2E9C               	goto	i1l3150
  8901                           
  8902                           ;eusart.c: 188: {
  8903                           ;eusart.c: 191: RCSTAbits.CREN = 0;
  8904  0E9A  121D               	bcf	29,4	;volatile
  8905                           
  8906                           ;eusart.c: 192: RCSTAbits.CREN = 1;
  8907  0E9B  161D               	bsf	29,4	;volatile
  8908  0E9C                     i1l3150:	
  8909                           
  8910                           ;eusart.c: 193: }
  8911                           ;eusart.c: 196: eusartRxBuffer[eusartRxHead++] = RCREG;
  8912  0E9C  0819               	movf	25,w	;volatile
  8913  0E9D  00F0               	movwf	??_EUSART_Receive_ISR
  8914  0E9E  0020               	movlb	0	; select bank0
  8915  0E9F  0862               	movf	_eusartRxHead,w
  8916  0EA0  3EA0               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  8917  0EA1  0086               	movwf	6
  8918  0EA2  0187               	clrf	7
  8919  0EA3  0870               	movf	??_EUSART_Receive_ISR,w
  8920  0EA4  0081               	movwf	1
  8921  0EA5  3001               	movlw	1
  8922  0EA6  00F0               	movwf	??_EUSART_Receive_ISR
  8923  0EA7  0870               	movf	??_EUSART_Receive_ISR,w
  8924  0EA8  07E2               	addwf	_eusartRxHead,f	;volatile
  8925                           
  8926                           ;eusart.c: 197: if(sizeof(eusartRxBuffer) <= eusartRxHead)
  8927  0EA9  3008               	movlw	8
  8928  0EAA  0262               	subwf	_eusartRxHead,w	;volatile
  8929  0EAB  1803               	btfsc	3,0
  8930                           
  8931                           ;eusart.c: 198: {
  8932                           ;eusart.c: 199: eusartRxHead = 0;
  8933  0EAC  01E2               	clrf	_eusartRxHead	;volatile
  8934                           
  8935                           ;eusart.c: 200: }
  8936                           ;eusart.c: 201: eusartRxCount++;
  8937  0EAD  3001               	movlw	1
  8938  0EAE  00F0               	movwf	??_EUSART_Receive_ISR
  8939  0EAF  0870               	movf	??_EUSART_Receive_ISR,w
  8940  0EB0  07E0               	addwf	_eusartRxCount,f	;volatile
  8941  0EB1  0008               	return
  8942  0EB2                     __end_of_EUSART_Receive_ISR:	
  8943  007E                     btemp	set	126	;btemp
  8944  007E                     int$flags	set	126
  8945  007E                     wtemp0	set	126


Data Sizes:
    Strings     186
    Constant    10
    Data        6
    BSS         182
    Persistent  8
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      14
    BANK0            80     48      80
    BANK1            80      0      64
    BANK2            80      0      48
    BANK3            80      0      48
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    PROTOCOL_Extension_Handler$0	PTR unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), I2C1_StatusCallback@ext_buf(BANK3[48]), 

    data	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    strncmp@s2	PTR const unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_15(CODE[4]), STR_14(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), 
		 -> STR_8(CODE[4]), STR_7(CODE[4]), STR_6(CODE[4]), STR_4(CODE[4]), 

    atoi@s	PTR const unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), 

    PROTOCOL_I2C_SEN@pdata	PTR unsigned char  size(1) Largest target is 16
		 -> type_no_data(BANK0[1]), PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK1[16]), readbuf.length(BANK0[1]), 
		 -> readbuf.type(BANK0[1]), readbuf(BANK0[5]), 

    PROTOCOL_I2C_Send_uint16_t@pbuffer	PTR unsigned int  size(1) Largest target is 2
		 -> PROTOCOL_Send_uint16_t@pbuf(BANK1[2]), 

    PROTOCOL_I2C_Set_TLV@pbuffer	PTR unsigned char  size(1) Largest target is 16
		 -> PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK1[16]), 

    PROTOCOL_EXT@char_buf	PTR unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), I2C1_StatusCallback@ext_buf(BANK3[48]), 

    PROTOCOL_Tick_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    PROTOCOL_Extension_Handler	PTR FTN(PTR unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    PROTOCOL_Set_Func@loop_func	PTR void  size(2) Largest target is 1
		 -> loop_func(), 

    PROTOCOL_Loop_Func	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), loop_func(), 

    PROTOCOL_Initialize@inv_handler	PTR void  size(2) Largest target is 1
		 -> inv_handler(), 

    PROTOCOL_Inv_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), inv_handler(), 

    PROTOCOL_Initialize@set_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Set_Handler	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@stop_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Stop_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@start_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Start_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@device_id	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_1(CODE[11]), 

    device_id_	PTR const unsigned char  size(2) Largest target is 8192
		 -> ROM(CODE[8192]), STR_1(CODE[11]), 

    S842$pbuffer	PTR unsigned char  size(1) Largest target is 16
		 -> PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK1[16]), 

    readbuf.pbuffer	PTR unsigned char  size(1) Largest target is 16
		 -> PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK1[16]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 8192
		 -> STR_10(CODE[4]), buf(BANK2[48]), STR_2(CODE[7]), ROM(CODE[8192]), 
		 -> printf@c(BANK0[1]), STR_1(CODE[11]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_48(CODE[10]), STR_47(CODE[9]), STR_46(CODE[10]), STR_45(CODE[9]), 
		 -> STR_44(CODE[4]), STR_43(CODE[4]), STR_42(CODE[4]), STR_41(CODE[4]), 
		 -> STR_40(CODE[4]), STR_39(CODE[4]), STR_38(CODE[4]), STR_37(CODE[4]), 
		 -> STR_36(CODE[14]), STR_35(CODE[9]), STR_34(CODE[10]), STR_33(CODE[9]), 
		 -> STR_32(CODE[10]), STR_31(CODE[9]), STR_30(CODE[7]), STR_29(CODE[4]), 
		 -> STR_28(CODE[4]), STR_27(CODE[9]), STR_26(CODE[4]), STR_25(CODE[4]), 
		 -> STR_24(CODE[10]), STR_23(CODE[4]), STR_22(CODE[4]), STR_21(CODE[8]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[9]), STR_17(CODE[6]), 
		 -> STR_16(CODE[10]), STR_13(CODE[10]), STR_9(CODE[10]), STR_5(CODE[10]), 
		 -> STR_3(CODE[5]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    sp__PROTOCOL_I2C_SEN	PTR unsigned char  size(1) Largest target is 16
		 -> type_no_data(BANK0[1]), PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK1[16]), readbuf.length(BANK0[1]), 
		 -> readbuf.type(BANK0[1]), readbuf(BANK0[5]), 

    I2C1_StatusCallback@pdata	PTR unsigned char  size(1) Largest target is 16
		 -> type_no_data(BANK0[1]), PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK1[16]), readbuf.length(BANK0[1]), 
		 -> readbuf.type(BANK0[1]), readbuf(BANK0[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_I2C1_ISR
    _I2C1_ISR->_I2C1_StatusCallback
    _I2C1_StatusCallback->i1_PROTOCOL_SAV
    i1_PROTOCOL_SAV->i1_DATAEE_WriteByte

Critical Paths under _main in BANK0

    _main->_PROTOCOL_Loop
    _loop_func->_abs
    _inv_handler->_PROTOCOL_Send_uint16_t
    _PROTOCOL_Send_uint16_t->_PROTOCOL_I2C_Send_uint16_t
    _PROTOCOL_I2C_Send_uint16_t->_printf
    _printf->___lwmod
    _putch->_EUSART_Write
    ___lwmod->___lwdiv
    _atoi->___wmul
    _PROTOCOL_Write_Device_Address->_DATAEE_WriteByte
    _PROTOCOL_SAV->_DATAEE_WriteByte
    _PROTOCOL_Initialize->_DATAEE_ReadByte

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   13769
                                             47 BANK0      1     1      0
                     _ADC_Initialize
                  _EUSART_Initialize
                    _I2C1_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                _PROTOCOL_Initialize
                      _PROTOCOL_Loop
                  _PROTOCOL_Set_Func
                    _TMR0_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (1) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_Initialize                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Set_Func                                    2     0      2      86
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Loop                                        4     4      0   13145
                                             43 BANK0      4     4      0
                   Absolute function *
                        _EUSART_Read
                       _PROTOCOL_EXT
       _PROTOCOL_Read_Device_Address
                       _PROTOCOL_SAV
                       _PROTOCOL_SET
                       _PROTOCOL_STA
                       _PROTOCOL_STP
      _PROTOCOL_Write_Device_Address
            _TMR0_HasOverflowOccured
                               _atoi
                        _inv_handler *
                          _loop_func *
                             _printf
                            _strncmp
 ---------------------------------------------------------------------------------
 (2) _strncmp                                              7     2      5    1670
                                              0 BANK0      7     2      5
 ---------------------------------------------------------------------------------
 (2) _loop_func                                            5     5      0     628
                                              4 BANK0      5     5      0
            _ADC_GetConversionResult
               _ADC_IsConversionDone
                  _ADC_SelectChannel
                _ADC_StartConversion
                                _abs
 ---------------------------------------------------------------------------------
 (3) _abs                                                  4     2      2     538
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _ADC_StartConversion                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_SelectChannel                                    2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _ADC_IsConversionDone                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_GetConversionResult                              2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _inv_handler                                          0     0      0    5142
             _PROTOCOL_Send_uint16_t
 ---------------------------------------------------------------------------------
 (3) _PROTOCOL_Send_uint16_t                               3     1      2    5142
                                             40 BANK0      3     1      2
         _PROTOCOL_I2C_Send_uint16_t
 ---------------------------------------------------------------------------------
 (4) _PROTOCOL_I2C_Send_uint16_t                           6     5      1    5056
                                             34 BANK0      6     5      1
               _PROTOCOL_I2C_Set_TLV
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              24    20      4    4212
                                             14 BANK0     20    16      4
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      66
                                              2 BANK0      1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (4) _EUSART_Write                                         2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     287
                                              8 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     290
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (5) _PROTOCOL_I2C_Set_TLV                                 5     3      2     625
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 8     6      2     830
                                              6 BANK0      8     6      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     474
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _TMR0_HasOverflowOccured                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_Write_Device_Address                        2     2      0     240
                                              3 BANK0      2     2      0
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_STP                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_STA                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_SET                                         2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_SAV                                         1     1      0     196
                                              3 BANK0      1     1      0
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (3) _DATAEE_WriteByte                                     3     2      1     196
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_EXT                                         1     1      0      90
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Read                                          2     2      0      24
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Initialize                                 10     2      8     538
                                              1 BANK0     10     2      8
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (2) _DATAEE_ReadByte                                      1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2C1_Initialize                                      2     2      0       0
                                              0 BANK0      2     2      0
       _PROTOCOL_Read_Device_Address
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_Read_Device_Address                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Initialize                                    1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                           1     1      0     233
                                              9 COMMON     1     1      0
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
                           _I2C1_ISR
 ---------------------------------------------------------------------------------
 (9) _I2C1_ISR                                             2     2      0     233
                                              7 COMMON     2     2      0
                _I2C1_StatusCallback
 ---------------------------------------------------------------------------------
 (10) _I2C1_StatusCallback                                 3     3      0     187
                                              4 COMMON     3     3      0
   _PROTOCOL_Backplane_Slave_Enabled
                   _PROTOCOL_I2C_GET
                   _PROTOCOL_I2C_SEN
                   _PROTOCOL_I2C_WHO
                       _PROTOCOL_INV
                       _PROTOCOL_RST
                 _PROTOCOL_Read_Lock
                     i1_PROTOCOL_EXT
                     i1_PROTOCOL_SAV
                     i1_PROTOCOL_SET
                     i1_PROTOCOL_STA
                     i1_PROTOCOL_STP
 ---------------------------------------------------------------------------------
 (11) i1_PROTOCOL_STP                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (11) i1_PROTOCOL_STA                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (11) i1_PROTOCOL_SET                                      2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (11) i1_PROTOCOL_SAV                                      1     1      0      94
                                              3 COMMON     1     1      0
                 i1_DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (12) i1_DATAEE_WriteByte                                  3     2      1      94
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (11) i1_PROTOCOL_EXT                                      1     1      0       0
 ---------------------------------------------------------------------------------
 (11) _PROTOCOL_Read_Lock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _PROTOCOL_RST                                        1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _PROTOCOL_INV                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _PROTOCOL_I2C_WHO                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _PROTOCOL_I2C_SEN                                    2     2      0      26
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (11) _PROTOCOL_I2C_GET                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _PROTOCOL_Backplane_Slave_Enabled                    0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _EUSART_Receive_ISR                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Initialize
   _EUSART_Initialize
   _I2C1_Initialize
     _PROTOCOL_Read_Device_Address
   _OSCILLATOR_Initialize
   _PIN_MANAGER_Initialize
   _PROTOCOL_Initialize
     _DATAEE_ReadByte
   _PROTOCOL_Loop
     Absolute function(Fake) *
     _EUSART_Read *
     _PROTOCOL_EXT *
     _PROTOCOL_Read_Device_Address *
     _PROTOCOL_SAV *
       _DATAEE_WriteByte
     _PROTOCOL_SET *
     _PROTOCOL_STA *
     _PROTOCOL_STP *
     _PROTOCOL_Write_Device_Address *
       _DATAEE_WriteByte
     _TMR0_HasOverflowOccured *
     _atoi *
       ___wmul
       _isdigit
     _inv_handler *
       _PROTOCOL_Send_uint16_t
         _PROTOCOL_I2C_Send_uint16_t
           _PROTOCOL_I2C_Set_TLV
           _printf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
             _putch
               _EUSART_Write
     _loop_func *
       _ADC_GetConversionResult
       _ADC_IsConversionDone
       _ADC_SelectChannel
       _ADC_StartConversion
       _abs
     _printf *
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
     _strncmp *
   _PROTOCOL_Set_Func
   _TMR0_Initialize
   _WDT_Initialize

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR
   _I2C1_ISR
     _I2C1_StatusCallback
       _PROTOCOL_Backplane_Slave_Enabled
       _PROTOCOL_I2C_GET
       _PROTOCOL_I2C_SEN
       _PROTOCOL_I2C_WHO
       _PROTOCOL_INV
       _PROTOCOL_RST
       _PROTOCOL_Read_Lock
       i1_PROTOCOL_EXT
       i1_PROTOCOL_SAV
         i1_DATAEE_WriteByte
       i1_PROTOCOL_SET
       i1_PROTOCOL_STA
       i1_PROTOCOL_STP

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     30      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      40       7       80.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      30       9       60.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      30      11       60.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      FE      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      FE      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Thu Sep 21 20:08:25 2017

                                         _i 0053                                           _j 0052  
                                         pc 0002                      __end_ofi1_PROTOCOL_EXT 0D75  
                    __end_ofi1_PROTOCOL_SAV 0DD9                      __end_ofi1_PROTOCOL_SET 0DBA  
                    __end_ofi1_PROTOCOL_STA 0D97                      __end_ofi1_PROTOCOL_STP 0D82  
           __end_of_TMR0_HasOverflowOccured 0D9F                                 __CFG_CP$OFF 0000  
                                        _on 005E                         ___wmul@multiplicand 0022  
                           _timer0ReloadVal 005F                                 __CFG_LVP$ON 0000  
                                       l224 0F95                                         l321 0F7E  
                                       l501 0144                                         l508 01BA  
                                       l525 0245                                         l473 0097  
                                       l485 0164                                         l654 0246  
                                       l925 0ED6                                __CFG_CPD$OFF 0000  
                                       _abs 0E45                                         _buf 0120  
                                       _cnt 005C                                         _sum 00BA  
                              __CFG_BORV$LO 0000                                         wreg 0009  
                              __CFG_IESO$ON 0000                                ?_EUSART_Read 0070  
                          __end_of_I2C1_ISR 0FD3                                        ?_abs 0020  
                                      l3000 0701                                        l3010 064A  
                                      l3002 0740                                        l3020 066F  
                                      l3012 0657                                        l3030 06A4  
                                      l3008 0652                                        l3200 026C  
                                      l3026 0677                                        l2402 0F8A  
                                      l3036 06B4                                        l3028 067B  
                                      l2500 0092                                        l3212 0284  
                                      l2416 0FA9                                        l2600 01E3  
                                      l2520 00E1                                        l2512 00B2  
                                      l3240 02FB                                        l3232 02BD  
                                      l3208 027A                                        l2434 0ED0  
                                      l2506 009C                                        l3250 0339  
                                      l2428 0E43                                        l2612 0203  
                                      l2532 00F7                                        l2508 00A5  
                                      l3244 0314                                        l3236 02E2  
                                      l2622 0210                                        l2606 01F2  
                                      l2550 013B                                        l2542 0114  
                                      l2534 0105                                        l3270 03CA  
                                      l3254 0358                                _tmr_overflow 0055  
                                      l2464 07DC                                        l2456 07BE  
                                      l2480 0FDA                                        l2608 01F6  
                                      l2616 020B                                        l2544 0123  
                                      l2528 00F5                                        l2624 0076  
                                      l3264 039F                                        l2458 07CA  
                                      l2482 0FE6                                        l2490 0FFB  
                                      l2538 0112                                        l2650 0618  
                                      l3258 037C                                        l2468 07E5  
                                      l2572 0189                                        l2548 0130  
                                      l2556 0146                                        l2660 0637  
                                      l2486 0FF2                                        l2646 05DB  
                                      l3198 026B                                        l2592 01D6  
                                      l2584 01AE                                        l2568 017E  
                                      l2648 060C                                        l2594 01D9  
                                      l2578 018F                                        l2658 061C  
                                      l2940 055E                                        l2950 0588  
                                      l2952 058B                                        l2962 05A5  
                                      l2946 057B                                        l2964 05A8  
                                      l2980 05CF                                        l2894 0F27  
                                      l2958 0598                                        l2992 071F  
                                      l2978 05C6                                        l2996 0737  
                                      STR_1 03E7                                        STR_2 0451  
                                      STR_3 045E                                        STR_4 047F  
                                      STR_5 0410                                        STR_6 048F  
                                      STR_7 0477                                        STR_8 0483  
                                      STR_9 041A                                        u1315 07C1  
                                      u1405 0FEC                                        _LATA 010C  
                                      _LATB 010D                                        u1335 07CB  
                                      u1415 0FF3                                        _LATC 010E  
                                      u1345 07D5                                        u1275 0ED7  
                                      u1355 07DD                                        u1285 0EDC  
                                      u1385 0FDD                                        u1545 01A4  
                                      u2347 05B9                                        u1485 010B  
                                      u2357 05D0                                        u2367 0F4A  
                                      u1585 01C9                                        i1l64 0FC0  
                                      i1l86 0495                                        _TMR0 0015  
                                      _WPUA 020C                                        _WPUB 020D  
                                      _WPUC 020E                                __CFG_WRT$OFF 0000  
                             __CFG_FCMEN$ON 0000                                        abs@a 0020  
                                      _data 00BC                                        _atoi 0648  
                                      _main 077F                                        fsr0h 0005  
                                      fsr1h 0007                                        indf0 0000  
                                      fsr0l 0004                                        indf1 0001  
                                      fsr1l 0006                                        btemp 007E  
                             __CFG_BOREN$ON 0000                                        start 0030  
                             __CFG_MCLRE$ON 0000                         _I2C1_StatusCallback 0493  
                                     ??_abs 0022                             ?i1_PROTOCOL_EXT 0070  
                           ?i1_PROTOCOL_SAV 0070                             ?i1_PROTOCOL_SET 0070  
                 __size_of_DATAEE_WriteByte 0023                             ?i1_PROTOCOL_STA 0070  
                           ?i1_PROTOCOL_STP 0070                     __end_of_TMR0_Initialize 0E27  
                             __CFG_PLLEN$ON 0000                               ?_EUSART_Write 0070  
            __size_of_OSCILLATOR_Initialize 0005               __end_of_OSCILLATOR_Initialize 0800  
         PROTOCOL_I2C_Send_uint16_t@pbuffer 0042                                       ?_atoi 0026  
                                     ?_main 0070                                       STR_10 047B  
                                     STR_11 048B                                       STR_12 0487  
                                     STR_20 0463                                       STR_13 03FC  
                                     STR_14 0473                                       STR_22 0467  
                                     STR_30 044A                                       STR_15 046F  
                                     STR_24 042E                                       STR_32 0424  
                                     STR_16 03F2                                       STR_41 046B  
                                     STR_17 0458                               __CFG_WDTE$OFF 0000  
                                     STR_42 0463                                       STR_18 0441  
                                     STR_34 0406                                       STR_19 046B  
                                     STR_35 0438                                       STR_36 03D9  
                           __end_of___lwdiv 07EA                                       i1l103 04B8  
                                     i1l124 0556                                       i1l321 0EFD  
                                     i1l170 0021                                       i1l236 0ECA  
                                     i1l174 002B                                       i1l168 0015  
                           __end_of___lwmod 1000                           _PROTOCOL_Set_Func 0DEB  
                PROTOCOL_I2C_Set_TLV@length 0020                                       _RCREG 0199  
                                     _RCSTA 019D                                       _TRISA 008C  
                                     _TRISB 008D                                       _TRISC 008E  
                                     _TXREG 019A                                       _TXSTA 019E  
          __size_of_ADC_GetConversionResult 0009                __size_of_PROTOCOL_Initialize 0048  
                PROTOCOL_I2C_Set_TLV@status 0024                          ?_PROTOCOL_Set_Func 0020  
                         ??_I2C1_Initialize 0020                        ?_I2C1_StatusCallback 0070  
                           _DATAEE_ReadByte 0DFE             ??_PROTOCOL_Write_Device_Address 0023  
                           __end_of_dpowers 03D9                              _WDT_Initialize 0D9F  
                                     _count 00B8              PROTOCOL_Initialize@inv_handler 0026  
                           __end_of_isdigit 0E45                                ?_inv_handler 0070  
                                     _value 005B                                       atoi@a 002B  
                                     atoi@s 002D                                       _putch 0DA7  
                                     pclath 000A                         ??_PROTOCOL_Set_Func 0022  
                    ??_PROTOCOL_I2C_Set_TLV 0022                                       status 0003  
                                     wtemp0 007E                             __end_of_strncmp 0743  
                           __initialization 0032                                __end_of_atoi 06B9  
                              __end_of_main 07B5                              ??_EUSART_Write 0020  
               ?_INTERRUPT_InterruptManager 0070                   __end_of_PROTOCOL_Set_Func 0DF4  
          PROTOCOL_Initialize@start_handler 0023                                      ??_atoi 0028  
                                    ??_main 004F                          _PROTOCOL_Read_Lock 0D7C  
                    __end_of_WDT_Initialize 0DA3                       ??_I2C1_StatusCallback 0074  
                __end_ofi1_DATAEE_WriteByte 0F06               __size_of_ADC_IsConversionDone 0007  
                                    _ADCON0 009D                                      _ADCON1 009E  
                                    i1S3338 0800                                      _ADRESH 009C  
                                    _EEADRH 0192                                      _ADRESL 009B  
                                    _EEADRL 0191                                      _EEDATH 0194  
                                    _EEDATL 0193                                      _EECON2 0196  
                                    _ANSELA 018C                                      ?_putch 0070  
                                    _ANSELB 018D                                      _ANSELC 018E  
                       ?_PROTOCOL_Read_Lock 0070                          _PROTOCOL_Loop_Func 00B6  
                                    i1l3150 0E9C                                      i1l3070 0FC7  
                                    i1l3072 0FC9                                      i1l3064 0FBE  
                                    i1l2702 0744                                      i1l2712 075F  
                                    i1l2706 074C                                      i1l2722 076E  
                                    i1l2810 04B4                                      i1l2802 04A4  
                                    i1l2708 0752                                      i1l2724 077D  
                                    i1l2812 04BB                                      i1l2804 04A8  
                                    i1l2820 04D5                                      i1l2718 0769  
                                    i1l2822 04DE                                      i1l2806 04AC  
                                    i1l2808 04B0                                      i1l2816 04BD  
                                    i1l2834 04F3                                      i1l2844 050E  
                                    i1l2828 04E8                                      i1l2852 051B  
                                    i1l2862 053B                                      i1l2854 0527  
                                    i1l2870 054C                                      i1l2856 052A  
                                    i1l2848 0511                                      i1l2858 052F  
                                    i1l2866 0540                                      i1l2796 0499  
                                    i1l2798 049F                                      _OSCCON 0099  
          __size_of_TMR0_HasOverflowOccured 0004                                      _TMR0IF 005A  
                                    _SPBRGH 019C                                      _SPBRGL 019B  
                                    _WDTCON 0097              PROTOCOL_Initialize@set_handler 0025  
                            __CFG_PWRTE$OFF 0000                   PROTOCOL_Initialize@scaler 0028  
                                    ___wmul 0ECD                              __CFG_STVREN$ON 0000  
                                 ??___lwdiv 0024                        ??_PROTOCOL_Read_Lock 0070  
                                 ??___lwmod 002C                                _type_no_data 006F  
                       _EUSART_Transmit_ISR 0EB2                            ?_TMR0_Initialize 0070  
                                    _locked 005A                                   ?_I2C1_ISR 0070  
                   ?_PROTOCOL_Send_uint16_t 0048                                      _printf 0071  
                   __end_of_DATAEE_ReadByte 0E0B                                __pdataCOMMON 007D  
                                 ??_isdigit 0020                    __end_of_PROTOCOL_I2C_GET 0D79  
                  __end_of_PROTOCOL_I2C_SEN 077F                    __end_of_PROTOCOL_I2C_WHO 0D7C  
                           ?_WDT_Initialize 0070               i1DATAEE_WriteByte@GIEBitValue 0072  
                                 ??_strncmp 0025                   PROTOCOL_Send_uint8_t@pbuf 00D6  
                      ?_EUSART_Transmit_ISR 0070                        __size_of_EUSART_Read 001F  
                   __end_of__initialization 006D                __size_of_ADC_StartConversion 0003  
                            __pcstackCOMMON 0070                                __pidataBANK0 0DA3  
                              __pidataBANK1 0002              __end_of_PROTOCOL_Send_uint16_t 07FB  
                          _DATAEE_WriteByte 0F65                               __end_of_putch 0DAD  
                                ??_I2C1_ISR 0077                  __size_of_PROTOCOL_Set_Func 0009  
                     __end_of_PROTOCOL_Loop 03CF                     _ADC_GetConversionResult 0DE2  
                            _OPTION_REGbits 0095                ??_PROTOCOL_I2C_Send_uint16_t 0043  
                   PROTOCOL_Send_float@pbuf 00CE                       ??_EUSART_Transmit_ISR 0070  
                                   ??_putch 0022                                  __pbssBANK0 0050  
                                __pbssBANK1 00A0                                  __pbssBANK2 0120  
                                __pbssBANK3 01A0                      i1DATAEE_WriteByte@bAdd 0071  
                      __end_of_EUSART_Write 0FAC                 PROTOCOL_Send_uint16_t@value 0048  
                      __size_of_inv_handler 000E                 __size_of_EUSART_Receive_ISR 001B  
                          ??i1_PROTOCOL_EXT 0070                            ??i1_PROTOCOL_SAV 0073  
                          ??i1_PROTOCOL_SET 0070                            ??i1_PROTOCOL_STA 0070  
                          ??i1_PROTOCOL_STP 0070                         _PROTOCOL_Initialize 06B9  
                                __pmaintext 077F                                     ?___wmul 0020  
                                __pintentry 0004                             _I2C1_Initialize 0F44  
                        __size_of_loop_func 007D                                     _BAUDCON 019F  
       __size_of_PROTOCOL_I2C_Send_uint16_t 0074                                  _device_id_ 00D7  
                                   _APFCON0 011D                                     _APFCON1 011E  
                                   ?_printf 002E                     __size_of_ADC_Initialize 0008  
                I2C1_StatusCallback@ext_buf 01A0                  I2C1_StatusCallback@ext_cnt 0063  
                I2C1_StatusCallback@ext_len 0064                            ?_DATAEE_ReadByte 0070  
                             _eusartRxCount 0060           I2C1_StatusCallback@slaveWriteType 0066  
                PROTOCOL_Send_uint16_t@pbuf 00D3                        ?_PROTOCOL_Initialize 0021  
                                   _OSCTUNE 0098                                     _SSP1ADD 0212  
                                   _SSP1BUF 0211                                     _SSP1MSK 0213  
                    _PROTOCOL_Start_Handler 00DD                     _TMR0_HasOverflowOccured 0D9B  
                      DATAEE_WriteByte@bAdd 0021                                  _continuity 00DF  
                             ?_PROTOCOL_INV 0070                               ?_PROTOCOL_EXT 0070  
                             ?_PROTOCOL_SAV 0070                               ?_PROTOCOL_SET 0070  
                             ?_PROTOCOL_STA 0070                               ?_PROTOCOL_RST 0070  
                             ?_PROTOCOL_STP 0070                             __size_of___wmul 001C  
                                   ___lwdiv 07B5                                     ___lwmod 0FD3  
                 ??_ADC_GetConversionResult 0022                                     __ptext1 0D9F  
                                   __ptext2 0E19                                     __ptext3 0DEB  
                                   __ptext4 0246                                     __ptext5 0701  
                                   __ptext6 0557                                     __ptext7 0E45  
                                   __ptext8 0D88                                     __ptext9 0E54  
                           __size_of_printf 01D5                                     _dpowers 03CF  
                     _OSCILLATOR_Initialize 07FB                                __size_of_abs 000F  
PROTOCOL_Write_Device_Address@device_id_i2c 0024                       ??_PROTOCOL_Initialize 0029  
                                   _isdigit 0E36                                     _readbuf 0067  
                                   _sec_cnt 0057                                     _invoked 0058  
                  ??_PIN_MANAGER_Initialize 0020                                     _sendbuf 00BE  
                                   _tmr_cnt 0056                                     clrloop0 0DAE  
                                   _running 0059                                     _strncmp 0701  
                      end_of_initialization 006D                           __end_of_loop_func 05D4  
                _PROTOCOL_Extension_Handler 00B4               __size_of_PROTOCOL_I2C_Set_TLV 0019  
                        i1_DATAEE_WriteByte 0EE9                           _EUSART_Initialize 0E7D  
                   __end_of_I2C1_Initialize 0F65                __end_of_ADC_IsConversionDone 0DC8  
                        ?_EUSART_Initialize 0070                       _PROTOCOL_Tick_Handler 00B2  
                                 _RCSTAbits 019D                                     printf@c 0041  
                                   printf@f 002E                              ??_PROTOCOL_INV 0070  
                            ??_PROTOCOL_EXT 0020                              ??_PROTOCOL_SAV 0023  
                            ??_PROTOCOL_SET 0020                              ??_PROTOCOL_STA 0020  
                            ??_PROTOCOL_RST 0070                              ??_PROTOCOL_STP 0020  
                       ?i1_DATAEE_WriteByte 0070                                __pstringtext 03CF  
                       ??_EUSART_Initialize 0020                 __end_of_I2C1_StatusCallback 0557  
                          ??_WDT_Initialize 0020                           __size_of_I2C1_ISR 0027  
        __end_of_PROTOCOL_I2C_Send_uint16_t 0648                  _PROTOCOL_I2C_Send_uint16_t 05D4  
                          __CFG_FOSC$INTOSC 0000                           ?_PROTOCOL_I2C_GET 0070  
                         ?_PROTOCOL_I2C_SEN 0070                           ?_PROTOCOL_I2C_WHO 0070  
                     __size_of_EUSART_Write 0024                         _ADC_StartConversion 0D88  
                 ??_TMR0_HasOverflowOccured 0020                          ??_PROTOCOL_I2C_GET 0070  
                        ??_PROTOCOL_I2C_SEN 0070                          ??_PROTOCOL_I2C_WHO 0070  
                      ??i1_DATAEE_WriteByte 0071                                  _tmr_scaler 006C  
                  __end_of_DATAEE_WriteByte 0F88                   __end_of_EUSART_Initialize 0E97  
                               printf@width 003F                        i1PROTOCOL_SET@value_ 0071  
                      ?_ADC_StartConversion 0070                    I2C1_StatusCallback@pdata 0076  
               __size_of_PROTOCOL_Read_Lock 0003                              __end_of___wmul 0EE9  
                             __pidataCOMMON 0003                                _EUSART_Write 0F88  
                            _ADC_Initialize 0DC8                      ?_OSCILLATOR_Initialize 0070  
                            __end_of_printf 0246                              PROTOCOL_Loop@c 004D  
                       start_initialization 0032                    __size_of_TMR0_Initialize 000E  
           __size_of_PIN_MANAGER_Initialize 001F                                 __end_of_abs 0E54  
                             ??_EUSART_Read 0020                                 putch@txData 0022  
                       DATAEE_ReadByte@bAdd 0020                            ?_I2C1_Initialize 0070  
                     ??_ADC_StartConversion 0020                            I2C1_ISR@i2c_data 0078  
                                  ??___wmul 0024                    PROTOCOL_Send_int8_t@pbuf 00D5  
      __end_of_PROTOCOL_Read_Device_Address 0D85       __size_of_PROTOCOL_Read_Device_Address 0003  
              _PROTOCOL_Read_Device_Address 0D82                      __end_of_ADC_Initialize 0DD0  
                               __pdataBANK0 006C                                 __pdataBANK1 00DF  
                                  ??_printf 0032                     i1DATAEE_WriteByte@bData 0070  
               __end_of_EUSART_Transmit_ISR 0ECD                                 __pbssCOMMON 007A  
                                 ___latbits 0002                               __pcstackBANK0 0020  
          I2C1_StatusCallback@i2c_bus_state 0075                        _ADC_IsConversionDone 0DC1  
                      _PROTOCOL_Inv_Handler 0050                                _isdigit$1250 0020  
                             ??_inv_handler 004B                        __end_of_PROTOCOL_INV 0D93  
                      __end_of_PROTOCOL_EXT 0D76                        __end_of_PROTOCOL_SAV 0DE2  
                      __end_of_PROTOCOL_SET 0DC1                        __end_of_PROTOCOL_STA 0D9B  
                      __end_of_PROTOCOL_RST 0DFE                        __end_of_PROTOCOL_STP 0D88  
                __end_of_EUSART_Receive_ISR 0EB2             PROTOCOL_Initialize@stop_handler 0024  
                __size_of_EUSART_Initialize 001A                         __end_of_EUSART_Read 0F44  
                    __size_of_PROTOCOL_Loop 0189                                   __pnvBANK1 00D7  
     __end_of_PROTOCOL_Write_Device_Address 0E36      __size_of_PROTOCOL_Write_Device_Address 000F  
             _PROTOCOL_Write_Device_Address 0E27                            ___lwdiv@dividend 0022  
                    _PIN_MANAGER_Initialize 0F06                        EUSART_Read@readValue 0021  
                         _ADC_SelectChannel 0E54                                    ?___lwdiv 0020  
                                  ?___lwmod 0028                             ?_ADC_Initialize 0070  
                              _eusartRxHead 0062                          ?_ADC_SelectChannel 0070  
                              _eusartTxHead 007C                                _eusartRxTail 0061  
                              _eusartTxTail 007B                                    _I2C1_ISR 0FAC  
             ?_PROTOCOL_Read_Device_Address 0070                ??_INTERRUPT_InterruptManager 0079  
                 PROTOCOL_Send_int16_t@pbuf 00D1                                   __pswtext1 0800  
                                loop_func@v 0027                     _eusartTxBufferRemaining 007A  
                                  ?_isdigit 0070                         ??_ADC_SelectChannel 0020  
                     ?_ADC_IsConversionDone 0070                            ___lwdiv@quotient 0025  
                  __size_of_DATAEE_ReadByte 000D                                    ?_strncmp 0020  
                            __size_of_putch 0006                              _eusartRxBuffer 00A0  
                         ??_TMR0_Initialize 0020                              _eusartTxBuffer 00A8  
                            ___wmul@product 0024                                    _LATCbits 010E  
                      _PROTOCOL_Set_Handler 00D9                                   clear_ram0 0DAD  
                       __end_of_inv_handler 0E19                                    _PIE1bits 0091  
                  ??_PROTOCOL_Send_uint16_t 004A                                   _loop_func 0557  
                 __end_of_ADC_SelectChannel 0E64                       PROTOCOL_I2C_SEN@pdata 0071  
                  PROTOCOL_I2C_Set_TLV@type 0023         __size_of_INTERRUPT_InterruptManager 002C  
                                  _PIR1bits 0011                                    _SSP1CON1 0215  
                                  _SSP1CON2 0216                                    _SSP1CON3 0217  
              PROTOCOL_Initialize@device_id 0021                                    _SSP1STAT 0214  
                            _readbuf_status 00BD                       _PROTOCOL_Stop_Handler 00DB  
          PROTOCOL_I2C_Send_uint16_t@length 0047                 __end_of_PROTOCOL_Initialize 0701  
                              loop_func@out 0025                                   _threshold 006D  
                                _ADCON0bits 009D                     __size_ofi1_PROTOCOL_EXT 0001  
                   __size_ofi1_PROTOCOL_SAV 0009                     __size_ofi1_PROTOCOL_SET 0007  
                   __size_ofi1_PROTOCOL_STA 0004                     __size_ofi1_PROTOCOL_STP 0003  
                         ___wmul@multiplier 0020                __end_of_PROTOCOL_I2C_Set_TLV 0E7D  
                             _PROTOCOL_Loop 0246                    ADC_SelectChannel@channel 0021  
                                printf@flag 003E                                  printf@prec 0036  
               ?_PROTOCOL_I2C_Send_uint16_t 0042                       DATAEE_WriteByte@bData 0020  
                   I2C1_StatusCallback@next 0065                                 _EUSART_Read 0F25  
               PROTOCOL_I2C_Set_TLV@pbuffer 0021                           ?_DATAEE_WriteByte 0020  
  __end_of_PROTOCOL_Backplane_Slave_Enabled 0D8F   __size_of_PROTOCOL_Backplane_Slave_Enabled 0004  
        ??_PROTOCOL_Backplane_Slave_Enabled 0070           ?_PROTOCOL_Backplane_Slave_Enabled 0070  
          _PROTOCOL_Backplane_Slave_Enabled 0D8B                          ??_DATAEE_WriteByte 0021  
                             _slave_address 005D                                  _EECON1bits 0195  
                        PROTOCOL_SET@value_ 0021                                  ?_loop_func 0070  
                 __size_of_PROTOCOL_I2C_GET 0003                   __size_of_PROTOCOL_I2C_SEN 003C  
                 __size_of_PROTOCOL_I2C_WHO 0003                    ?_ADC_GetConversionResult 0020  
                   ??_OSCILLATOR_Initialize 0020                  PROTOCOL_Set_Func@loop_func 0020  
            ?_PROTOCOL_Write_Device_Address 0070                            __size_of___lwdiv 0035  
                          __size_of___lwmod 002D                              ?_PROTOCOL_Loop 0070  
                    ??_ADC_IsConversionDone 0020                       __size_of_PROTOCOL_INV 0004  
                     __size_of_PROTOCOL_EXT 0001                       __size_of_PROTOCOL_SAV 0009  
                     __size_of_PROTOCOL_SET 0007                       __size_of_PROTOCOL_STA 0004  
                     __size_of_PROTOCOL_RST 000A                       __size_of_PROTOCOL_STP 0003  
            ??_PROTOCOL_Read_Device_Address 0020                            __size_of_isdigit 000F  
                           ___lwdiv@divisor 0020                __size_of_I2C1_StatusCallback 00C4  
                           ___lwdiv@counter 0027                                    __ptext10 0DC1  
                                  __ptext11 0DE2                                    __ptext20 0E64  
                                  __ptext12 0E0B                                    __ptext21 0648  
                                  __ptext13 07EA                                    __ptext30 0F65  
                                  __ptext22 0E36                                    __ptext14 05D4  
                                  __ptext31 0D75                                    __ptext23 0ECD  
                                  __ptext15 0071                                    __ptext40 0DC8  
                                  __ptext32 0F25                                    __ptext24 0D9B  
                                  __ptext16 0DA7                                    __ptext33 06B9  
                                  __ptext25 0E27                                    __ptext17 0F88  
                                  __ptext50 0D7C                                    __ptext42 0FAC  
                                  __ptext34 0DFE                                    __ptext26 0D85  
                                  __ptext18 0FD3                                    __ptext51 0DF4  
                                  __ptext43 0493                                    __ptext35 0F06  
                                  __ptext27 0D97                                    __ptext19 07B5  
                                  __ptext52 0D8F                                    __ptext44 0D7F  
                                  __ptext36 07FB                                    __ptext28 0DBA  
                                  __ptext53 0D79                                    __ptext45 0D93  
                                  __ptext37 0F44                                    __ptext29 0DD9  
                                  __ptext54 0743                                    __ptext46 0DB3  
                                  __ptext38 0D82                                    __ptext55 0D76  
                                  __ptext47 0DD0                                    __ptext39 0E7D  
                                  __ptext56 0D8B                                    __ptext48 0EE9  
                                  __ptext57 0EB2                                    __ptext49 0D74  
                                  __ptext58 0E97                                _SSP1CON1bits 0215  
                              _SSP1CON2bits 0216                                    _float100 00B0  
               __size_ofi1_DATAEE_WriteByte 001D                                 _inv_handler 0E0B  
               DATAEE_WriteByte@GIEBitValue 0022                            __size_of_strncmp 0042  
                             __size_of_atoi 0071                               __size_of_main 0036  
                                strncmp@len 0023                           ??_DATAEE_ReadByte 0020  
           __size_of_PROTOCOL_Send_uint16_t 0011                  __size_of_ADC_SelectChannel 0010  
                   _BACKPLANE_SLAVE_ADDRESS 006E                  __end_of_PROTOCOL_Read_Lock 0D7F  
                                  int$flags 007E                                    atoi@sign 002A  
                              _PROTOCOL_INV 0D8F                                _PROTOCOL_EXT 0D75  
                              _PROTOCOL_SAV 0DD9                                _PROTOCOL_SET 0DBA  
                              _PROTOCOL_STA 0D97                                _PROTOCOL_RST 0DF4  
                              _PROTOCOL_STP 0D85          __end_of_INTERRUPT_InterruptManager 0030  
                _INTERRUPT_InterruptManager 0004                                   printf@len 003C  
                                 printf@val 003A                                _SSP1STATbits 0214  
                  ?_TMR0_HasOverflowOccured 0070                          _I2C_slaveWriteData 007D  
                                _INTCONbits 000B                                    isdigit@c 0021  
                   __size_of_WDT_Initialize 0004                                    intlevel1 0000  
               __end_of_ADC_StartConversion 0D8B                            ___lwmod@dividend 002A  
                   ?_PIN_MANAGER_Initialize 0070             __end_of_ADC_GetConversionResult 0DEB  
                         __CFG_CLKOUTEN$OFF 0000                                 ??_loop_func 0024  
                      _PROTOCOL_I2C_Set_TLV 0E64                                   strncmp@s1 0020  
                                 strncmp@s2 0022                            ??_ADC_Initialize 0020  
                   _backplane_slave_enabled 0054                                    printf@ap 0039  
                                  printf@cp 0037                          _EUSART_Receive_ISR 0E97  
                           ??_PROTOCOL_Loop 004B                    __size_of_I2C1_Initialize 0021  
                            i1_PROTOCOL_EXT 0D74                              i1_PROTOCOL_SAV 0DD0  
                            i1_PROTOCOL_SET 0DB3                              i1_PROTOCOL_STA 0D93  
                            i1_PROTOCOL_STP 0D7F                                  _OPTION_REG 0095  
                       ?_EUSART_Receive_ISR 0070                      _PROTOCOL_Send_uint16_t 07EA  
                           ___lwmod@divisor 0028                             _TMR0_Initialize 0E19  
                           ___lwmod@counter 002D                 PROTOCOL_Loop@device_address 004E  
                      PROTOCOL_EXT@char_buf 0020                          EUSART_Write@txData 0021  
              __size_of_EUSART_Transmit_ISR 001B              __end_of_PIN_MANAGER_Initialize 0F25  
                      ??_EUSART_Receive_ISR 0070                       ?_PROTOCOL_I2C_Set_TLV 0020  
                          _PROTOCOL_I2C_GET 0D76                            _PROTOCOL_I2C_SEN 0743  
                          _PROTOCOL_I2C_WHO 0D79  
