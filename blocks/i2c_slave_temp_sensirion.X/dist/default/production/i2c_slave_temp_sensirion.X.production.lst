

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Sat Aug 26 14:03:29 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F1829
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	stringtext,global,class=STRCODE,delta=2
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text4,local,class=CODE,merge=1,delta=2,group=4
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2,group=4
    35                           	psect	text14,local,class=CODE,merge=1,delta=2,group=4
    36                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2,group=4
    41                           	psect	text20,local,class=CODE,merge=1,delta=2,group=4
    42                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    43                           	psect	text22,local,class=CODE,merge=1,delta=2,group=4
    44                           	psect	text23,local,class=CODE,merge=1,delta=2,group=4
    45                           	psect	text24,local,class=CODE,merge=1,delta=2,group=4
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2,group=1
    48                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    49                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    50                           	psect	text29,local,class=CODE,merge=1,delta=2,group=1
    51                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
    52                           	psect	text31,local,class=CODE,merge=1,delta=2
    53                           	psect	text32,local,class=CODE,merge=1,delta=2,group=1
    54                           	psect	text33,local,class=CODE,merge=1,delta=2
    55                           	psect	text34,local,class=CODE,merge=1,delta=2,group=1
    56                           	psect	text35,local,class=CODE,merge=1,delta=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2
    60                           	psect	text39,local,class=CODE,merge=1,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,delta=2,group=1
    62                           	psect	text41,local,class=CODE,merge=1,delta=2
    63                           	psect	intentry,global,class=CODE,delta=2
    64                           	psect	text43,local,class=CODE,merge=1,delta=2
    65                           	psect	swtext1,local,class=CONST,delta=2
    66                           	psect	text44,local,class=CODE,merge=1,delta=2
    67                           	psect	text45,local,class=CODE,merge=1,delta=2
    68                           	psect	text46,local,class=CODE,merge=1,delta=2
    69                           	psect	text47,local,class=CODE,merge=1,delta=2
    70                           	psect	text48,local,class=CODE,merge=1,delta=2
    71                           	psect	swtext2,local,class=CONST,delta=2
    72                           	psect	text49,local,class=CODE,merge=1,delta=2
    73                           	psect	text50,local,class=CODE,merge=1,delta=2
    74                           	psect	text51,local,class=CODE,merge=1,delta=2
    75                           	psect	text52,local,class=CODE,merge=1,delta=2
    76                           	psect	text53,local,class=CODE,merge=1,delta=2
    77                           	psect	text54,local,class=CODE,merge=1,delta=2
    78                           	psect	text55,local,class=CODE,merge=1,delta=2,group=1
    79                           	psect	text56,local,class=CODE,merge=1,delta=2,group=1
    80                           	psect	text57,local,class=CODE,merge=1,delta=2,group=1
    81                           	psect	text58,local,class=CODE,merge=1,delta=2,group=1
    82                           	psect	text59,local,class=CODE,merge=1,delta=2,group=1
    83                           	psect	text60,local,class=CODE,merge=1,delta=2,group=1
    84                           	psect	text61,local,class=CODE,merge=1,delta=2,group=1
    85                           	psect	text62,local,class=CODE,merge=1,delta=2
    86                           	psect	text63,local,class=CODE,merge=1,delta=2
    87                           	dabs	1,0x7E,2
    88  0000                     
    89                           ; Version 1.41 (B)
    90                           ; Generated 21/02/2017 GMT
    91                           ; 
    92                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    93                           ; All rights reserved.
    94                           ; 
    95                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    96                           ; 
    97                           ; Redistribution and use in source and binary forms, with or without modification, are
    98                           ; permitted provided that the following conditions are met:
    99                           ; 
   100                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   101                           ;        conditions and the following disclaimer.
   102                           ; 
   103                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   104                           ;        of conditions and the following disclaimer in the documentation and/or other
   105                           ;        materials provided with the distribution.
   106                           ; 
   107                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   108                           ;        software without specific prior written permission.
   109                           ; 
   110                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   111                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   112                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   113                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   114                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   115                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   116                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   117                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   118                           ; 
   119                           ; 
   120                           ; Code-generator required, PIC16F1829 Definitions
   121                           ; 
   122                           ; SFR Addresses
   123  0000                     	;# 
   124  0001                     	;# 
   125  0002                     	;# 
   126  0003                     	;# 
   127  0004                     	;# 
   128  0005                     	;# 
   129  0006                     	;# 
   130  0007                     	;# 
   131  0008                     	;# 
   132  0009                     	;# 
   133  000A                     	;# 
   134  000B                     	;# 
   135  000C                     	;# 
   136  000D                     	;# 
   137  000E                     	;# 
   138  0011                     	;# 
   139  0012                     	;# 
   140  0013                     	;# 
   141  0014                     	;# 
   142  0015                     	;# 
   143  0016                     	;# 
   144  0016                     	;# 
   145  0017                     	;# 
   146  0018                     	;# 
   147  0019                     	;# 
   148  001A                     	;# 
   149  001B                     	;# 
   150  001C                     	;# 
   151  001E                     	;# 
   152  001F                     	;# 
   153  008C                     	;# 
   154  008D                     	;# 
   155  008E                     	;# 
   156  0091                     	;# 
   157  0092                     	;# 
   158  0093                     	;# 
   159  0094                     	;# 
   160  0095                     	;# 
   161  0096                     	;# 
   162  0097                     	;# 
   163  0098                     	;# 
   164  0099                     	;# 
   165  009A                     	;# 
   166  009B                     	;# 
   167  009B                     	;# 
   168  009C                     	;# 
   169  009D                     	;# 
   170  009E                     	;# 
   171  010C                     	;# 
   172  010D                     	;# 
   173  010E                     	;# 
   174  0111                     	;# 
   175  0112                     	;# 
   176  0113                     	;# 
   177  0114                     	;# 
   178  0115                     	;# 
   179  0116                     	;# 
   180  0117                     	;# 
   181  0118                     	;# 
   182  0119                     	;# 
   183  011A                     	;# 
   184  011B                     	;# 
   185  011D                     	;# 
   186  011E                     	;# 
   187  018C                     	;# 
   188  018D                     	;# 
   189  018E                     	;# 
   190  0191                     	;# 
   191  0191                     	;# 
   192  0192                     	;# 
   193  0193                     	;# 
   194  0193                     	;# 
   195  0193                     	;# 
   196  0194                     	;# 
   197  0195                     	;# 
   198  0196                     	;# 
   199  0199                     	;# 
   200  019A                     	;# 
   201  019B                     	;# 
   202  019B                     	;# 
   203  019C                     	;# 
   204  019D                     	;# 
   205  019E                     	;# 
   206  019F                     	;# 
   207  020C                     	;# 
   208  020D                     	;# 
   209  020E                     	;# 
   210  0211                     	;# 
   211  0211                     	;# 
   212  0212                     	;# 
   213  0212                     	;# 
   214  0213                     	;# 
   215  0213                     	;# 
   216  0214                     	;# 
   217  0214                     	;# 
   218  0215                     	;# 
   219  0215                     	;# 
   220  0215                     	;# 
   221  0216                     	;# 
   222  0216                     	;# 
   223  0217                     	;# 
   224  0217                     	;# 
   225  0219                     	;# 
   226  021A                     	;# 
   227  021B                     	;# 
   228  021C                     	;# 
   229  021D                     	;# 
   230  021E                     	;# 
   231  021F                     	;# 
   232  0291                     	;# 
   233  0291                     	;# 
   234  0292                     	;# 
   235  0293                     	;# 
   236  0294                     	;# 
   237  0295                     	;# 
   238  0295                     	;# 
   239  0296                     	;# 
   240  0298                     	;# 
   241  0298                     	;# 
   242  0299                     	;# 
   243  029A                     	;# 
   244  029B                     	;# 
   245  029C                     	;# 
   246  029D                     	;# 
   247  029E                     	;# 
   248  0311                     	;# 
   249  0311                     	;# 
   250  0312                     	;# 
   251  0313                     	;# 
   252  0318                     	;# 
   253  0318                     	;# 
   254  0319                     	;# 
   255  031A                     	;# 
   256  038C                     	;# 
   257  038D                     	;# 
   258  038E                     	;# 
   259  0391                     	;# 
   260  0392                     	;# 
   261  0393                     	;# 
   262  0394                     	;# 
   263  0395                     	;# 
   264  0396                     	;# 
   265  039A                     	;# 
   266  039C                     	;# 
   267  039D                     	;# 
   268  039E                     	;# 
   269  039F                     	;# 
   270  0415                     	;# 
   271  0416                     	;# 
   272  0417                     	;# 
   273  041C                     	;# 
   274  041D                     	;# 
   275  041E                     	;# 
   276  0FE4                     	;# 
   277  0FE5                     	;# 
   278  0FE6                     	;# 
   279  0FE7                     	;# 
   280  0FE8                     	;# 
   281  0FE9                     	;# 
   282  0FEA                     	;# 
   283  0FEB                     	;# 
   284  0FED                     	;# 
   285  0FEE                     	;# 
   286  0FEF                     	;# 
   287  0000                     	;# 
   288  0001                     	;# 
   289  0002                     	;# 
   290  0003                     	;# 
   291  0004                     	;# 
   292  0005                     	;# 
   293  0006                     	;# 
   294  0007                     	;# 
   295  0008                     	;# 
   296  0009                     	;# 
   297  000A                     	;# 
   298  000B                     	;# 
   299  000C                     	;# 
   300  000D                     	;# 
   301  000E                     	;# 
   302  0011                     	;# 
   303  0012                     	;# 
   304  0013                     	;# 
   305  0014                     	;# 
   306  0015                     	;# 
   307  0016                     	;# 
   308  0016                     	;# 
   309  0017                     	;# 
   310  0018                     	;# 
   311  0019                     	;# 
   312  001A                     	;# 
   313  001B                     	;# 
   314  001C                     	;# 
   315  001E                     	;# 
   316  001F                     	;# 
   317  008C                     	;# 
   318  008D                     	;# 
   319  008E                     	;# 
   320  0091                     	;# 
   321  0092                     	;# 
   322  0093                     	;# 
   323  0094                     	;# 
   324  0095                     	;# 
   325  0096                     	;# 
   326  0097                     	;# 
   327  0098                     	;# 
   328  0099                     	;# 
   329  009A                     	;# 
   330  009B                     	;# 
   331  009B                     	;# 
   332  009C                     	;# 
   333  009D                     	;# 
   334  009E                     	;# 
   335  010C                     	;# 
   336  010D                     	;# 
   337  010E                     	;# 
   338  0111                     	;# 
   339  0112                     	;# 
   340  0113                     	;# 
   341  0114                     	;# 
   342  0115                     	;# 
   343  0116                     	;# 
   344  0117                     	;# 
   345  0118                     	;# 
   346  0119                     	;# 
   347  011A                     	;# 
   348  011B                     	;# 
   349  011D                     	;# 
   350  011E                     	;# 
   351  018C                     	;# 
   352  018D                     	;# 
   353  018E                     	;# 
   354  0191                     	;# 
   355  0191                     	;# 
   356  0192                     	;# 
   357  0193                     	;# 
   358  0193                     	;# 
   359  0193                     	;# 
   360  0194                     	;# 
   361  0195                     	;# 
   362  0196                     	;# 
   363  0199                     	;# 
   364  019A                     	;# 
   365  019B                     	;# 
   366  019B                     	;# 
   367  019C                     	;# 
   368  019D                     	;# 
   369  019E                     	;# 
   370  019F                     	;# 
   371  020C                     	;# 
   372  020D                     	;# 
   373  020E                     	;# 
   374  0211                     	;# 
   375  0211                     	;# 
   376  0212                     	;# 
   377  0212                     	;# 
   378  0213                     	;# 
   379  0213                     	;# 
   380  0214                     	;# 
   381  0214                     	;# 
   382  0215                     	;# 
   383  0215                     	;# 
   384  0215                     	;# 
   385  0216                     	;# 
   386  0216                     	;# 
   387  0217                     	;# 
   388  0217                     	;# 
   389  0219                     	;# 
   390  021A                     	;# 
   391  021B                     	;# 
   392  021C                     	;# 
   393  021D                     	;# 
   394  021E                     	;# 
   395  021F                     	;# 
   396  0291                     	;# 
   397  0291                     	;# 
   398  0292                     	;# 
   399  0293                     	;# 
   400  0294                     	;# 
   401  0295                     	;# 
   402  0295                     	;# 
   403  0296                     	;# 
   404  0298                     	;# 
   405  0298                     	;# 
   406  0299                     	;# 
   407  029A                     	;# 
   408  029B                     	;# 
   409  029C                     	;# 
   410  029D                     	;# 
   411  029E                     	;# 
   412  0311                     	;# 
   413  0311                     	;# 
   414  0312                     	;# 
   415  0313                     	;# 
   416  0318                     	;# 
   417  0318                     	;# 
   418  0319                     	;# 
   419  031A                     	;# 
   420  038C                     	;# 
   421  038D                     	;# 
   422  038E                     	;# 
   423  0391                     	;# 
   424  0392                     	;# 
   425  0393                     	;# 
   426  0394                     	;# 
   427  0395                     	;# 
   428  0396                     	;# 
   429  039A                     	;# 
   430  039C                     	;# 
   431  039D                     	;# 
   432  039E                     	;# 
   433  039F                     	;# 
   434  0415                     	;# 
   435  0416                     	;# 
   436  0417                     	;# 
   437  041C                     	;# 
   438  041D                     	;# 
   439  041E                     	;# 
   440  0FE4                     	;# 
   441  0FE5                     	;# 
   442  0FE6                     	;# 
   443  0FE7                     	;# 
   444  0FE8                     	;# 
   445  0FE9                     	;# 
   446  0FEA                     	;# 
   447  0FEB                     	;# 
   448  0FED                     	;# 
   449  0FEE                     	;# 
   450  0FEF                     	;# 
   451  0000                     	;# 
   452  0001                     	;# 
   453  0002                     	;# 
   454  0003                     	;# 
   455  0004                     	;# 
   456  0005                     	;# 
   457  0006                     	;# 
   458  0007                     	;# 
   459  0008                     	;# 
   460  0009                     	;# 
   461  000A                     	;# 
   462  000B                     	;# 
   463  000C                     	;# 
   464  000D                     	;# 
   465  000E                     	;# 
   466  0011                     	;# 
   467  0012                     	;# 
   468  0013                     	;# 
   469  0014                     	;# 
   470  0015                     	;# 
   471  0016                     	;# 
   472  0016                     	;# 
   473  0017                     	;# 
   474  0018                     	;# 
   475  0019                     	;# 
   476  001A                     	;# 
   477  001B                     	;# 
   478  001C                     	;# 
   479  001E                     	;# 
   480  001F                     	;# 
   481  008C                     	;# 
   482  008D                     	;# 
   483  008E                     	;# 
   484  0091                     	;# 
   485  0092                     	;# 
   486  0093                     	;# 
   487  0094                     	;# 
   488  0095                     	;# 
   489  0096                     	;# 
   490  0097                     	;# 
   491  0098                     	;# 
   492  0099                     	;# 
   493  009A                     	;# 
   494  009B                     	;# 
   495  009B                     	;# 
   496  009C                     	;# 
   497  009D                     	;# 
   498  009E                     	;# 
   499  010C                     	;# 
   500  010D                     	;# 
   501  010E                     	;# 
   502  0111                     	;# 
   503  0112                     	;# 
   504  0113                     	;# 
   505  0114                     	;# 
   506  0115                     	;# 
   507  0116                     	;# 
   508  0117                     	;# 
   509  0118                     	;# 
   510  0119                     	;# 
   511  011A                     	;# 
   512  011B                     	;# 
   513  011D                     	;# 
   514  011E                     	;# 
   515  018C                     	;# 
   516  018D                     	;# 
   517  018E                     	;# 
   518  0191                     	;# 
   519  0191                     	;# 
   520  0192                     	;# 
   521  0193                     	;# 
   522  0193                     	;# 
   523  0193                     	;# 
   524  0194                     	;# 
   525  0195                     	;# 
   526  0196                     	;# 
   527  0199                     	;# 
   528  019A                     	;# 
   529  019B                     	;# 
   530  019B                     	;# 
   531  019C                     	;# 
   532  019D                     	;# 
   533  019E                     	;# 
   534  019F                     	;# 
   535  020C                     	;# 
   536  020D                     	;# 
   537  020E                     	;# 
   538  0211                     	;# 
   539  0211                     	;# 
   540  0212                     	;# 
   541  0212                     	;# 
   542  0213                     	;# 
   543  0213                     	;# 
   544  0214                     	;# 
   545  0214                     	;# 
   546  0215                     	;# 
   547  0215                     	;# 
   548  0215                     	;# 
   549  0216                     	;# 
   550  0216                     	;# 
   551  0217                     	;# 
   552  0217                     	;# 
   553  0219                     	;# 
   554  021A                     	;# 
   555  021B                     	;# 
   556  021C                     	;# 
   557  021D                     	;# 
   558  021E                     	;# 
   559  021F                     	;# 
   560  0291                     	;# 
   561  0291                     	;# 
   562  0292                     	;# 
   563  0293                     	;# 
   564  0294                     	;# 
   565  0295                     	;# 
   566  0295                     	;# 
   567  0296                     	;# 
   568  0298                     	;# 
   569  0298                     	;# 
   570  0299                     	;# 
   571  029A                     	;# 
   572  029B                     	;# 
   573  029C                     	;# 
   574  029D                     	;# 
   575  029E                     	;# 
   576  0311                     	;# 
   577  0311                     	;# 
   578  0312                     	;# 
   579  0313                     	;# 
   580  0318                     	;# 
   581  0318                     	;# 
   582  0319                     	;# 
   583  031A                     	;# 
   584  038C                     	;# 
   585  038D                     	;# 
   586  038E                     	;# 
   587  0391                     	;# 
   588  0392                     	;# 
   589  0393                     	;# 
   590  0394                     	;# 
   591  0395                     	;# 
   592  0396                     	;# 
   593  039A                     	;# 
   594  039C                     	;# 
   595  039D                     	;# 
   596  039E                     	;# 
   597  039F                     	;# 
   598  0415                     	;# 
   599  0416                     	;# 
   600  0417                     	;# 
   601  041C                     	;# 
   602  041D                     	;# 
   603  041E                     	;# 
   604  0FE4                     	;# 
   605  0FE5                     	;# 
   606  0FE6                     	;# 
   607  0FE7                     	;# 
   608  0FE8                     	;# 
   609  0FE9                     	;# 
   610  0FEA                     	;# 
   611  0FEB                     	;# 
   612  0FED                     	;# 
   613  0FEE                     	;# 
   614  0FEF                     	;# 
   615  0000                     	;# 
   616  0001                     	;# 
   617  0002                     	;# 
   618  0003                     	;# 
   619  0004                     	;# 
   620  0005                     	;# 
   621  0006                     	;# 
   622  0007                     	;# 
   623  0008                     	;# 
   624  0009                     	;# 
   625  000A                     	;# 
   626  000B                     	;# 
   627  000C                     	;# 
   628  000D                     	;# 
   629  000E                     	;# 
   630  0011                     	;# 
   631  0012                     	;# 
   632  0013                     	;# 
   633  0014                     	;# 
   634  0015                     	;# 
   635  0016                     	;# 
   636  0016                     	;# 
   637  0017                     	;# 
   638  0018                     	;# 
   639  0019                     	;# 
   640  001A                     	;# 
   641  001B                     	;# 
   642  001C                     	;# 
   643  001E                     	;# 
   644  001F                     	;# 
   645  008C                     	;# 
   646  008D                     	;# 
   647  008E                     	;# 
   648  0091                     	;# 
   649  0092                     	;# 
   650  0093                     	;# 
   651  0094                     	;# 
   652  0095                     	;# 
   653  0096                     	;# 
   654  0097                     	;# 
   655  0098                     	;# 
   656  0099                     	;# 
   657  009A                     	;# 
   658  009B                     	;# 
   659  009B                     	;# 
   660  009C                     	;# 
   661  009D                     	;# 
   662  009E                     	;# 
   663  010C                     	;# 
   664  010D                     	;# 
   665  010E                     	;# 
   666  0111                     	;# 
   667  0112                     	;# 
   668  0113                     	;# 
   669  0114                     	;# 
   670  0115                     	;# 
   671  0116                     	;# 
   672  0117                     	;# 
   673  0118                     	;# 
   674  0119                     	;# 
   675  011A                     	;# 
   676  011B                     	;# 
   677  011D                     	;# 
   678  011E                     	;# 
   679  018C                     	;# 
   680  018D                     	;# 
   681  018E                     	;# 
   682  0191                     	;# 
   683  0191                     	;# 
   684  0192                     	;# 
   685  0193                     	;# 
   686  0193                     	;# 
   687  0193                     	;# 
   688  0194                     	;# 
   689  0195                     	;# 
   690  0196                     	;# 
   691  0199                     	;# 
   692  019A                     	;# 
   693  019B                     	;# 
   694  019B                     	;# 
   695  019C                     	;# 
   696  019D                     	;# 
   697  019E                     	;# 
   698  019F                     	;# 
   699  020C                     	;# 
   700  020D                     	;# 
   701  020E                     	;# 
   702  0211                     	;# 
   703  0211                     	;# 
   704  0212                     	;# 
   705  0212                     	;# 
   706  0213                     	;# 
   707  0213                     	;# 
   708  0214                     	;# 
   709  0214                     	;# 
   710  0215                     	;# 
   711  0215                     	;# 
   712  0215                     	;# 
   713  0216                     	;# 
   714  0216                     	;# 
   715  0217                     	;# 
   716  0217                     	;# 
   717  0219                     	;# 
   718  021A                     	;# 
   719  021B                     	;# 
   720  021C                     	;# 
   721  021D                     	;# 
   722  021E                     	;# 
   723  021F                     	;# 
   724  0291                     	;# 
   725  0291                     	;# 
   726  0292                     	;# 
   727  0293                     	;# 
   728  0294                     	;# 
   729  0295                     	;# 
   730  0295                     	;# 
   731  0296                     	;# 
   732  0298                     	;# 
   733  0298                     	;# 
   734  0299                     	;# 
   735  029A                     	;# 
   736  029B                     	;# 
   737  029C                     	;# 
   738  029D                     	;# 
   739  029E                     	;# 
   740  0311                     	;# 
   741  0311                     	;# 
   742  0312                     	;# 
   743  0313                     	;# 
   744  0318                     	;# 
   745  0318                     	;# 
   746  0319                     	;# 
   747  031A                     	;# 
   748  038C                     	;# 
   749  038D                     	;# 
   750  038E                     	;# 
   751  0391                     	;# 
   752  0392                     	;# 
   753  0393                     	;# 
   754  0394                     	;# 
   755  0395                     	;# 
   756  0396                     	;# 
   757  039A                     	;# 
   758  039C                     	;# 
   759  039D                     	;# 
   760  039E                     	;# 
   761  039F                     	;# 
   762  0415                     	;# 
   763  0416                     	;# 
   764  0417                     	;# 
   765  041C                     	;# 
   766  041D                     	;# 
   767  041E                     	;# 
   768  0FE4                     	;# 
   769  0FE5                     	;# 
   770  0FE6                     	;# 
   771  0FE7                     	;# 
   772  0FE8                     	;# 
   773  0FE9                     	;# 
   774  0FEA                     	;# 
   775  0FEB                     	;# 
   776  0FED                     	;# 
   777  0FEE                     	;# 
   778  0FEF                     	;# 
   779  0000                     	;# 
   780  0001                     	;# 
   781  0002                     	;# 
   782  0003                     	;# 
   783  0004                     	;# 
   784  0005                     	;# 
   785  0006                     	;# 
   786  0007                     	;# 
   787  0008                     	;# 
   788  0009                     	;# 
   789  000A                     	;# 
   790  000B                     	;# 
   791  000C                     	;# 
   792  000D                     	;# 
   793  000E                     	;# 
   794  0011                     	;# 
   795  0012                     	;# 
   796  0013                     	;# 
   797  0014                     	;# 
   798  0015                     	;# 
   799  0016                     	;# 
   800  0016                     	;# 
   801  0017                     	;# 
   802  0018                     	;# 
   803  0019                     	;# 
   804  001A                     	;# 
   805  001B                     	;# 
   806  001C                     	;# 
   807  001E                     	;# 
   808  001F                     	;# 
   809  008C                     	;# 
   810  008D                     	;# 
   811  008E                     	;# 
   812  0091                     	;# 
   813  0092                     	;# 
   814  0093                     	;# 
   815  0094                     	;# 
   816  0095                     	;# 
   817  0096                     	;# 
   818  0097                     	;# 
   819  0098                     	;# 
   820  0099                     	;# 
   821  009A                     	;# 
   822  009B                     	;# 
   823  009B                     	;# 
   824  009C                     	;# 
   825  009D                     	;# 
   826  009E                     	;# 
   827  010C                     	;# 
   828  010D                     	;# 
   829  010E                     	;# 
   830  0111                     	;# 
   831  0112                     	;# 
   832  0113                     	;# 
   833  0114                     	;# 
   834  0115                     	;# 
   835  0116                     	;# 
   836  0117                     	;# 
   837  0118                     	;# 
   838  0119                     	;# 
   839  011A                     	;# 
   840  011B                     	;# 
   841  011D                     	;# 
   842  011E                     	;# 
   843  018C                     	;# 
   844  018D                     	;# 
   845  018E                     	;# 
   846  0191                     	;# 
   847  0191                     	;# 
   848  0192                     	;# 
   849  0193                     	;# 
   850  0193                     	;# 
   851  0193                     	;# 
   852  0194                     	;# 
   853  0195                     	;# 
   854  0196                     	;# 
   855  0199                     	;# 
   856  019A                     	;# 
   857  019B                     	;# 
   858  019B                     	;# 
   859  019C                     	;# 
   860  019D                     	;# 
   861  019E                     	;# 
   862  019F                     	;# 
   863  020C                     	;# 
   864  020D                     	;# 
   865  020E                     	;# 
   866  0211                     	;# 
   867  0211                     	;# 
   868  0212                     	;# 
   869  0212                     	;# 
   870  0213                     	;# 
   871  0213                     	;# 
   872  0214                     	;# 
   873  0214                     	;# 
   874  0215                     	;# 
   875  0215                     	;# 
   876  0215                     	;# 
   877  0216                     	;# 
   878  0216                     	;# 
   879  0217                     	;# 
   880  0217                     	;# 
   881  0219                     	;# 
   882  021A                     	;# 
   883  021B                     	;# 
   884  021C                     	;# 
   885  021D                     	;# 
   886  021E                     	;# 
   887  021F                     	;# 
   888  0291                     	;# 
   889  0291                     	;# 
   890  0292                     	;# 
   891  0293                     	;# 
   892  0294                     	;# 
   893  0295                     	;# 
   894  0295                     	;# 
   895  0296                     	;# 
   896  0298                     	;# 
   897  0298                     	;# 
   898  0299                     	;# 
   899  029A                     	;# 
   900  029B                     	;# 
   901  029C                     	;# 
   902  029D                     	;# 
   903  029E                     	;# 
   904  0311                     	;# 
   905  0311                     	;# 
   906  0312                     	;# 
   907  0313                     	;# 
   908  0318                     	;# 
   909  0318                     	;# 
   910  0319                     	;# 
   911  031A                     	;# 
   912  038C                     	;# 
   913  038D                     	;# 
   914  038E                     	;# 
   915  0391                     	;# 
   916  0392                     	;# 
   917  0393                     	;# 
   918  0394                     	;# 
   919  0395                     	;# 
   920  0396                     	;# 
   921  039A                     	;# 
   922  039C                     	;# 
   923  039D                     	;# 
   924  039E                     	;# 
   925  039F                     	;# 
   926  0415                     	;# 
   927  0416                     	;# 
   928  0417                     	;# 
   929  041C                     	;# 
   930  041D                     	;# 
   931  041E                     	;# 
   932  0FE4                     	;# 
   933  0FE5                     	;# 
   934  0FE6                     	;# 
   935  0FE7                     	;# 
   936  0FE8                     	;# 
   937  0FE9                     	;# 
   938  0FEA                     	;# 
   939  0FEB                     	;# 
   940  0FED                     	;# 
   941  0FEE                     	;# 
   942  0FEF                     	;# 
   943  0000                     	;# 
   944  0001                     	;# 
   945  0002                     	;# 
   946  0003                     	;# 
   947  0004                     	;# 
   948  0005                     	;# 
   949  0006                     	;# 
   950  0007                     	;# 
   951  0008                     	;# 
   952  0009                     	;# 
   953  000A                     	;# 
   954  000B                     	;# 
   955  000C                     	;# 
   956  000D                     	;# 
   957  000E                     	;# 
   958  0011                     	;# 
   959  0012                     	;# 
   960  0013                     	;# 
   961  0014                     	;# 
   962  0015                     	;# 
   963  0016                     	;# 
   964  0016                     	;# 
   965  0017                     	;# 
   966  0018                     	;# 
   967  0019                     	;# 
   968  001A                     	;# 
   969  001B                     	;# 
   970  001C                     	;# 
   971  001E                     	;# 
   972  001F                     	;# 
   973  008C                     	;# 
   974  008D                     	;# 
   975  008E                     	;# 
   976  0091                     	;# 
   977  0092                     	;# 
   978  0093                     	;# 
   979  0094                     	;# 
   980  0095                     	;# 
   981  0096                     	;# 
   982  0097                     	;# 
   983  0098                     	;# 
   984  0099                     	;# 
   985  009A                     	;# 
   986  009B                     	;# 
   987  009B                     	;# 
   988  009C                     	;# 
   989  009D                     	;# 
   990  009E                     	;# 
   991  010C                     	;# 
   992  010D                     	;# 
   993  010E                     	;# 
   994  0111                     	;# 
   995  0112                     	;# 
   996  0113                     	;# 
   997  0114                     	;# 
   998  0115                     	;# 
   999  0116                     	;# 
  1000  0117                     	;# 
  1001  0118                     	;# 
  1002  0119                     	;# 
  1003  011A                     	;# 
  1004  011B                     	;# 
  1005  011D                     	;# 
  1006  011E                     	;# 
  1007  018C                     	;# 
  1008  018D                     	;# 
  1009  018E                     	;# 
  1010  0191                     	;# 
  1011  0191                     	;# 
  1012  0192                     	;# 
  1013  0193                     	;# 
  1014  0193                     	;# 
  1015  0193                     	;# 
  1016  0194                     	;# 
  1017  0195                     	;# 
  1018  0196                     	;# 
  1019  0199                     	;# 
  1020  019A                     	;# 
  1021  019B                     	;# 
  1022  019B                     	;# 
  1023  019C                     	;# 
  1024  019D                     	;# 
  1025  019E                     	;# 
  1026  019F                     	;# 
  1027  020C                     	;# 
  1028  020D                     	;# 
  1029  020E                     	;# 
  1030  0211                     	;# 
  1031  0211                     	;# 
  1032  0212                     	;# 
  1033  0212                     	;# 
  1034  0213                     	;# 
  1035  0213                     	;# 
  1036  0214                     	;# 
  1037  0214                     	;# 
  1038  0215                     	;# 
  1039  0215                     	;# 
  1040  0215                     	;# 
  1041  0216                     	;# 
  1042  0216                     	;# 
  1043  0217                     	;# 
  1044  0217                     	;# 
  1045  0219                     	;# 
  1046  021A                     	;# 
  1047  021B                     	;# 
  1048  021C                     	;# 
  1049  021D                     	;# 
  1050  021E                     	;# 
  1051  021F                     	;# 
  1052  0291                     	;# 
  1053  0291                     	;# 
  1054  0292                     	;# 
  1055  0293                     	;# 
  1056  0294                     	;# 
  1057  0295                     	;# 
  1058  0295                     	;# 
  1059  0296                     	;# 
  1060  0298                     	;# 
  1061  0298                     	;# 
  1062  0299                     	;# 
  1063  029A                     	;# 
  1064  029B                     	;# 
  1065  029C                     	;# 
  1066  029D                     	;# 
  1067  029E                     	;# 
  1068  0311                     	;# 
  1069  0311                     	;# 
  1070  0312                     	;# 
  1071  0313                     	;# 
  1072  0318                     	;# 
  1073  0318                     	;# 
  1074  0319                     	;# 
  1075  031A                     	;# 
  1076  038C                     	;# 
  1077  038D                     	;# 
  1078  038E                     	;# 
  1079  0391                     	;# 
  1080  0392                     	;# 
  1081  0393                     	;# 
  1082  0394                     	;# 
  1083  0395                     	;# 
  1084  0396                     	;# 
  1085  039A                     	;# 
  1086  039C                     	;# 
  1087  039D                     	;# 
  1088  039E                     	;# 
  1089  039F                     	;# 
  1090  0415                     	;# 
  1091  0416                     	;# 
  1092  0417                     	;# 
  1093  041C                     	;# 
  1094  041D                     	;# 
  1095  041E                     	;# 
  1096  0FE4                     	;# 
  1097  0FE5                     	;# 
  1098  0FE6                     	;# 
  1099  0FE7                     	;# 
  1100  0FE8                     	;# 
  1101  0FE9                     	;# 
  1102  0FEA                     	;# 
  1103  0FEB                     	;# 
  1104  0FED                     	;# 
  1105  0FEE                     	;# 
  1106  0FEF                     	;# 
  1107  0000                     	;# 
  1108  0001                     	;# 
  1109  0002                     	;# 
  1110  0003                     	;# 
  1111  0004                     	;# 
  1112  0005                     	;# 
  1113  0006                     	;# 
  1114  0007                     	;# 
  1115  0008                     	;# 
  1116  0009                     	;# 
  1117  000A                     	;# 
  1118  000B                     	;# 
  1119  000C                     	;# 
  1120  000D                     	;# 
  1121  000E                     	;# 
  1122  0011                     	;# 
  1123  0012                     	;# 
  1124  0013                     	;# 
  1125  0014                     	;# 
  1126  0015                     	;# 
  1127  0016                     	;# 
  1128  0016                     	;# 
  1129  0017                     	;# 
  1130  0018                     	;# 
  1131  0019                     	;# 
  1132  001A                     	;# 
  1133  001B                     	;# 
  1134  001C                     	;# 
  1135  001E                     	;# 
  1136  001F                     	;# 
  1137  008C                     	;# 
  1138  008D                     	;# 
  1139  008E                     	;# 
  1140  0091                     	;# 
  1141  0092                     	;# 
  1142  0093                     	;# 
  1143  0094                     	;# 
  1144  0095                     	;# 
  1145  0096                     	;# 
  1146  0097                     	;# 
  1147  0098                     	;# 
  1148  0099                     	;# 
  1149  009A                     	;# 
  1150  009B                     	;# 
  1151  009B                     	;# 
  1152  009C                     	;# 
  1153  009D                     	;# 
  1154  009E                     	;# 
  1155  010C                     	;# 
  1156  010D                     	;# 
  1157  010E                     	;# 
  1158  0111                     	;# 
  1159  0112                     	;# 
  1160  0113                     	;# 
  1161  0114                     	;# 
  1162  0115                     	;# 
  1163  0116                     	;# 
  1164  0117                     	;# 
  1165  0118                     	;# 
  1166  0119                     	;# 
  1167  011A                     	;# 
  1168  011B                     	;# 
  1169  011D                     	;# 
  1170  011E                     	;# 
  1171  018C                     	;# 
  1172  018D                     	;# 
  1173  018E                     	;# 
  1174  0191                     	;# 
  1175  0191                     	;# 
  1176  0192                     	;# 
  1177  0193                     	;# 
  1178  0193                     	;# 
  1179  0193                     	;# 
  1180  0194                     	;# 
  1181  0195                     	;# 
  1182  0196                     	;# 
  1183  0199                     	;# 
  1184  019A                     	;# 
  1185  019B                     	;# 
  1186  019B                     	;# 
  1187  019C                     	;# 
  1188  019D                     	;# 
  1189  019E                     	;# 
  1190  019F                     	;# 
  1191  020C                     	;# 
  1192  020D                     	;# 
  1193  020E                     	;# 
  1194  0211                     	;# 
  1195  0211                     	;# 
  1196  0212                     	;# 
  1197  0212                     	;# 
  1198  0213                     	;# 
  1199  0213                     	;# 
  1200  0214                     	;# 
  1201  0214                     	;# 
  1202  0215                     	;# 
  1203  0215                     	;# 
  1204  0215                     	;# 
  1205  0216                     	;# 
  1206  0216                     	;# 
  1207  0217                     	;# 
  1208  0217                     	;# 
  1209  0219                     	;# 
  1210  021A                     	;# 
  1211  021B                     	;# 
  1212  021C                     	;# 
  1213  021D                     	;# 
  1214  021E                     	;# 
  1215  021F                     	;# 
  1216  0291                     	;# 
  1217  0291                     	;# 
  1218  0292                     	;# 
  1219  0293                     	;# 
  1220  0294                     	;# 
  1221  0295                     	;# 
  1222  0295                     	;# 
  1223  0296                     	;# 
  1224  0298                     	;# 
  1225  0298                     	;# 
  1226  0299                     	;# 
  1227  029A                     	;# 
  1228  029B                     	;# 
  1229  029C                     	;# 
  1230  029D                     	;# 
  1231  029E                     	;# 
  1232  0311                     	;# 
  1233  0311                     	;# 
  1234  0312                     	;# 
  1235  0313                     	;# 
  1236  0318                     	;# 
  1237  0318                     	;# 
  1238  0319                     	;# 
  1239  031A                     	;# 
  1240  038C                     	;# 
  1241  038D                     	;# 
  1242  038E                     	;# 
  1243  0391                     	;# 
  1244  0392                     	;# 
  1245  0393                     	;# 
  1246  0394                     	;# 
  1247  0395                     	;# 
  1248  0396                     	;# 
  1249  039A                     	;# 
  1250  039C                     	;# 
  1251  039D                     	;# 
  1252  039E                     	;# 
  1253  039F                     	;# 
  1254  0415                     	;# 
  1255  0416                     	;# 
  1256  0417                     	;# 
  1257  041C                     	;# 
  1258  041D                     	;# 
  1259  041E                     	;# 
  1260  0FE4                     	;# 
  1261  0FE5                     	;# 
  1262  0FE6                     	;# 
  1263  0FE7                     	;# 
  1264  0FE8                     	;# 
  1265  0FE9                     	;# 
  1266  0FEA                     	;# 
  1267  0FEB                     	;# 
  1268  0FED                     	;# 
  1269  0FEE                     	;# 
  1270  0FEF                     	;# 
  1271  0000                     	;# 
  1272  0001                     	;# 
  1273  0002                     	;# 
  1274  0003                     	;# 
  1275  0004                     	;# 
  1276  0005                     	;# 
  1277  0006                     	;# 
  1278  0007                     	;# 
  1279  0008                     	;# 
  1280  0009                     	;# 
  1281  000A                     	;# 
  1282  000B                     	;# 
  1283  000C                     	;# 
  1284  000D                     	;# 
  1285  000E                     	;# 
  1286  0011                     	;# 
  1287  0012                     	;# 
  1288  0013                     	;# 
  1289  0014                     	;# 
  1290  0015                     	;# 
  1291  0016                     	;# 
  1292  0016                     	;# 
  1293  0017                     	;# 
  1294  0018                     	;# 
  1295  0019                     	;# 
  1296  001A                     	;# 
  1297  001B                     	;# 
  1298  001C                     	;# 
  1299  001E                     	;# 
  1300  001F                     	;# 
  1301  008C                     	;# 
  1302  008D                     	;# 
  1303  008E                     	;# 
  1304  0091                     	;# 
  1305  0092                     	;# 
  1306  0093                     	;# 
  1307  0094                     	;# 
  1308  0095                     	;# 
  1309  0096                     	;# 
  1310  0097                     	;# 
  1311  0098                     	;# 
  1312  0099                     	;# 
  1313  009A                     	;# 
  1314  009B                     	;# 
  1315  009B                     	;# 
  1316  009C                     	;# 
  1317  009D                     	;# 
  1318  009E                     	;# 
  1319  010C                     	;# 
  1320  010D                     	;# 
  1321  010E                     	;# 
  1322  0111                     	;# 
  1323  0112                     	;# 
  1324  0113                     	;# 
  1325  0114                     	;# 
  1326  0115                     	;# 
  1327  0116                     	;# 
  1328  0117                     	;# 
  1329  0118                     	;# 
  1330  0119                     	;# 
  1331  011A                     	;# 
  1332  011B                     	;# 
  1333  011D                     	;# 
  1334  011E                     	;# 
  1335  018C                     	;# 
  1336  018D                     	;# 
  1337  018E                     	;# 
  1338  0191                     	;# 
  1339  0191                     	;# 
  1340  0192                     	;# 
  1341  0193                     	;# 
  1342  0193                     	;# 
  1343  0193                     	;# 
  1344  0194                     	;# 
  1345  0195                     	;# 
  1346  0196                     	;# 
  1347  0199                     	;# 
  1348  019A                     	;# 
  1349  019B                     	;# 
  1350  019B                     	;# 
  1351  019C                     	;# 
  1352  019D                     	;# 
  1353  019E                     	;# 
  1354  019F                     	;# 
  1355  020C                     	;# 
  1356  020D                     	;# 
  1357  020E                     	;# 
  1358  0211                     	;# 
  1359  0211                     	;# 
  1360  0212                     	;# 
  1361  0212                     	;# 
  1362  0213                     	;# 
  1363  0213                     	;# 
  1364  0214                     	;# 
  1365  0214                     	;# 
  1366  0215                     	;# 
  1367  0215                     	;# 
  1368  0215                     	;# 
  1369  0216                     	;# 
  1370  0216                     	;# 
  1371  0217                     	;# 
  1372  0217                     	;# 
  1373  0219                     	;# 
  1374  021A                     	;# 
  1375  021B                     	;# 
  1376  021C                     	;# 
  1377  021D                     	;# 
  1378  021E                     	;# 
  1379  021F                     	;# 
  1380  0291                     	;# 
  1381  0291                     	;# 
  1382  0292                     	;# 
  1383  0293                     	;# 
  1384  0294                     	;# 
  1385  0295                     	;# 
  1386  0295                     	;# 
  1387  0296                     	;# 
  1388  0298                     	;# 
  1389  0298                     	;# 
  1390  0299                     	;# 
  1391  029A                     	;# 
  1392  029B                     	;# 
  1393  029C                     	;# 
  1394  029D                     	;# 
  1395  029E                     	;# 
  1396  0311                     	;# 
  1397  0311                     	;# 
  1398  0312                     	;# 
  1399  0313                     	;# 
  1400  0318                     	;# 
  1401  0318                     	;# 
  1402  0319                     	;# 
  1403  031A                     	;# 
  1404  038C                     	;# 
  1405  038D                     	;# 
  1406  038E                     	;# 
  1407  0391                     	;# 
  1408  0392                     	;# 
  1409  0393                     	;# 
  1410  0394                     	;# 
  1411  0395                     	;# 
  1412  0396                     	;# 
  1413  039A                     	;# 
  1414  039C                     	;# 
  1415  039D                     	;# 
  1416  039E                     	;# 
  1417  039F                     	;# 
  1418  0415                     	;# 
  1419  0416                     	;# 
  1420  0417                     	;# 
  1421  041C                     	;# 
  1422  041D                     	;# 
  1423  041E                     	;# 
  1424  0FE4                     	;# 
  1425  0FE5                     	;# 
  1426  0FE6                     	;# 
  1427  0FE7                     	;# 
  1428  0FE8                     	;# 
  1429  0FE9                     	;# 
  1430  0FEA                     	;# 
  1431  0FEB                     	;# 
  1432  0FED                     	;# 
  1433  0FEE                     	;# 
  1434  0FEF                     	;# 
  1435  0000                     	;# 
  1436  0001                     	;# 
  1437  0002                     	;# 
  1438  0003                     	;# 
  1439  0004                     	;# 
  1440  0005                     	;# 
  1441  0006                     	;# 
  1442  0007                     	;# 
  1443  0008                     	;# 
  1444  0009                     	;# 
  1445  000A                     	;# 
  1446  000B                     	;# 
  1447  000C                     	;# 
  1448  000D                     	;# 
  1449  000E                     	;# 
  1450  0011                     	;# 
  1451  0012                     	;# 
  1452  0013                     	;# 
  1453  0014                     	;# 
  1454  0015                     	;# 
  1455  0016                     	;# 
  1456  0016                     	;# 
  1457  0017                     	;# 
  1458  0018                     	;# 
  1459  0019                     	;# 
  1460  001A                     	;# 
  1461  001B                     	;# 
  1462  001C                     	;# 
  1463  001E                     	;# 
  1464  001F                     	;# 
  1465  008C                     	;# 
  1466  008D                     	;# 
  1467  008E                     	;# 
  1468  0091                     	;# 
  1469  0092                     	;# 
  1470  0093                     	;# 
  1471  0094                     	;# 
  1472  0095                     	;# 
  1473  0096                     	;# 
  1474  0097                     	;# 
  1475  0098                     	;# 
  1476  0099                     	;# 
  1477  009A                     	;# 
  1478  009B                     	;# 
  1479  009B                     	;# 
  1480  009C                     	;# 
  1481  009D                     	;# 
  1482  009E                     	;# 
  1483  010C                     	;# 
  1484  010D                     	;# 
  1485  010E                     	;# 
  1486  0111                     	;# 
  1487  0112                     	;# 
  1488  0113                     	;# 
  1489  0114                     	;# 
  1490  0115                     	;# 
  1491  0116                     	;# 
  1492  0117                     	;# 
  1493  0118                     	;# 
  1494  0119                     	;# 
  1495  011A                     	;# 
  1496  011B                     	;# 
  1497  011D                     	;# 
  1498  011E                     	;# 
  1499  018C                     	;# 
  1500  018D                     	;# 
  1501  018E                     	;# 
  1502  0191                     	;# 
  1503  0191                     	;# 
  1504  0192                     	;# 
  1505  0193                     	;# 
  1506  0193                     	;# 
  1507  0193                     	;# 
  1508  0194                     	;# 
  1509  0195                     	;# 
  1510  0196                     	;# 
  1511  0199                     	;# 
  1512  019A                     	;# 
  1513  019B                     	;# 
  1514  019B                     	;# 
  1515  019C                     	;# 
  1516  019D                     	;# 
  1517  019E                     	;# 
  1518  019F                     	;# 
  1519  020C                     	;# 
  1520  020D                     	;# 
  1521  020E                     	;# 
  1522  0211                     	;# 
  1523  0211                     	;# 
  1524  0212                     	;# 
  1525  0212                     	;# 
  1526  0213                     	;# 
  1527  0213                     	;# 
  1528  0214                     	;# 
  1529  0214                     	;# 
  1530  0215                     	;# 
  1531  0215                     	;# 
  1532  0215                     	;# 
  1533  0216                     	;# 
  1534  0216                     	;# 
  1535  0217                     	;# 
  1536  0217                     	;# 
  1537  0219                     	;# 
  1538  021A                     	;# 
  1539  021B                     	;# 
  1540  021C                     	;# 
  1541  021D                     	;# 
  1542  021E                     	;# 
  1543  021F                     	;# 
  1544  0291                     	;# 
  1545  0291                     	;# 
  1546  0292                     	;# 
  1547  0293                     	;# 
  1548  0294                     	;# 
  1549  0295                     	;# 
  1550  0295                     	;# 
  1551  0296                     	;# 
  1552  0298                     	;# 
  1553  0298                     	;# 
  1554  0299                     	;# 
  1555  029A                     	;# 
  1556  029B                     	;# 
  1557  029C                     	;# 
  1558  029D                     	;# 
  1559  029E                     	;# 
  1560  0311                     	;# 
  1561  0311                     	;# 
  1562  0312                     	;# 
  1563  0313                     	;# 
  1564  0318                     	;# 
  1565  0318                     	;# 
  1566  0319                     	;# 
  1567  031A                     	;# 
  1568  038C                     	;# 
  1569  038D                     	;# 
  1570  038E                     	;# 
  1571  0391                     	;# 
  1572  0392                     	;# 
  1573  0393                     	;# 
  1574  0394                     	;# 
  1575  0395                     	;# 
  1576  0396                     	;# 
  1577  039A                     	;# 
  1578  039C                     	;# 
  1579  039D                     	;# 
  1580  039E                     	;# 
  1581  039F                     	;# 
  1582  0415                     	;# 
  1583  0416                     	;# 
  1584  0417                     	;# 
  1585  041C                     	;# 
  1586  041D                     	;# 
  1587  041E                     	;# 
  1588  0FE4                     	;# 
  1589  0FE5                     	;# 
  1590  0FE6                     	;# 
  1591  0FE7                     	;# 
  1592  0FE8                     	;# 
  1593  0FE9                     	;# 
  1594  0FEA                     	;# 
  1595  0FEB                     	;# 
  1596  0FED                     	;# 
  1597  0FEE                     	;# 
  1598  0FEF                     	;# 
  1599  0000                     	;# 
  1600  0001                     	;# 
  1601  0002                     	;# 
  1602  0003                     	;# 
  1603  0004                     	;# 
  1604  0005                     	;# 
  1605  0006                     	;# 
  1606  0007                     	;# 
  1607  0008                     	;# 
  1608  0009                     	;# 
  1609  000A                     	;# 
  1610  000B                     	;# 
  1611  000C                     	;# 
  1612  000D                     	;# 
  1613  000E                     	;# 
  1614  0011                     	;# 
  1615  0012                     	;# 
  1616  0013                     	;# 
  1617  0014                     	;# 
  1618  0015                     	;# 
  1619  0016                     	;# 
  1620  0016                     	;# 
  1621  0017                     	;# 
  1622  0018                     	;# 
  1623  0019                     	;# 
  1624  001A                     	;# 
  1625  001B                     	;# 
  1626  001C                     	;# 
  1627  001E                     	;# 
  1628  001F                     	;# 
  1629  008C                     	;# 
  1630  008D                     	;# 
  1631  008E                     	;# 
  1632  0091                     	;# 
  1633  0092                     	;# 
  1634  0093                     	;# 
  1635  0094                     	;# 
  1636  0095                     	;# 
  1637  0096                     	;# 
  1638  0097                     	;# 
  1639  0098                     	;# 
  1640  0099                     	;# 
  1641  009A                     	;# 
  1642  009B                     	;# 
  1643  009B                     	;# 
  1644  009C                     	;# 
  1645  009D                     	;# 
  1646  009E                     	;# 
  1647  010C                     	;# 
  1648  010D                     	;# 
  1649  010E                     	;# 
  1650  0111                     	;# 
  1651  0112                     	;# 
  1652  0113                     	;# 
  1653  0114                     	;# 
  1654  0115                     	;# 
  1655  0116                     	;# 
  1656  0117                     	;# 
  1657  0118                     	;# 
  1658  0119                     	;# 
  1659  011A                     	;# 
  1660  011B                     	;# 
  1661  011D                     	;# 
  1662  011E                     	;# 
  1663  018C                     	;# 
  1664  018D                     	;# 
  1665  018E                     	;# 
  1666  0191                     	;# 
  1667  0191                     	;# 
  1668  0192                     	;# 
  1669  0193                     	;# 
  1670  0193                     	;# 
  1671  0193                     	;# 
  1672  0194                     	;# 
  1673  0195                     	;# 
  1674  0196                     	;# 
  1675  0199                     	;# 
  1676  019A                     	;# 
  1677  019B                     	;# 
  1678  019B                     	;# 
  1679  019C                     	;# 
  1680  019D                     	;# 
  1681  019E                     	;# 
  1682  019F                     	;# 
  1683  020C                     	;# 
  1684  020D                     	;# 
  1685  020E                     	;# 
  1686  0211                     	;# 
  1687  0211                     	;# 
  1688  0212                     	;# 
  1689  0212                     	;# 
  1690  0213                     	;# 
  1691  0213                     	;# 
  1692  0214                     	;# 
  1693  0214                     	;# 
  1694  0215                     	;# 
  1695  0215                     	;# 
  1696  0215                     	;# 
  1697  0216                     	;# 
  1698  0216                     	;# 
  1699  0217                     	;# 
  1700  0217                     	;# 
  1701  0219                     	;# 
  1702  021A                     	;# 
  1703  021B                     	;# 
  1704  021C                     	;# 
  1705  021D                     	;# 
  1706  021E                     	;# 
  1707  021F                     	;# 
  1708  0291                     	;# 
  1709  0291                     	;# 
  1710  0292                     	;# 
  1711  0293                     	;# 
  1712  0294                     	;# 
  1713  0295                     	;# 
  1714  0295                     	;# 
  1715  0296                     	;# 
  1716  0298                     	;# 
  1717  0298                     	;# 
  1718  0299                     	;# 
  1719  029A                     	;# 
  1720  029B                     	;# 
  1721  029C                     	;# 
  1722  029D                     	;# 
  1723  029E                     	;# 
  1724  0311                     	;# 
  1725  0311                     	;# 
  1726  0312                     	;# 
  1727  0313                     	;# 
  1728  0318                     	;# 
  1729  0318                     	;# 
  1730  0319                     	;# 
  1731  031A                     	;# 
  1732  038C                     	;# 
  1733  038D                     	;# 
  1734  038E                     	;# 
  1735  0391                     	;# 
  1736  0392                     	;# 
  1737  0393                     	;# 
  1738  0394                     	;# 
  1739  0395                     	;# 
  1740  0396                     	;# 
  1741  039A                     	;# 
  1742  039C                     	;# 
  1743  039D                     	;# 
  1744  039E                     	;# 
  1745  039F                     	;# 
  1746  0415                     	;# 
  1747  0416                     	;# 
  1748  0417                     	;# 
  1749  041C                     	;# 
  1750  041D                     	;# 
  1751  041E                     	;# 
  1752  0FE4                     	;# 
  1753  0FE5                     	;# 
  1754  0FE6                     	;# 
  1755  0FE7                     	;# 
  1756  0FE8                     	;# 
  1757  0FE9                     	;# 
  1758  0FEA                     	;# 
  1759  0FEB                     	;# 
  1760  0FED                     	;# 
  1761  0FEE                     	;# 
  1762  0FEF                     	;# 
  1763  0000                     	;# 
  1764  0001                     	;# 
  1765  0002                     	;# 
  1766  0003                     	;# 
  1767  0004                     	;# 
  1768  0005                     	;# 
  1769  0006                     	;# 
  1770  0007                     	;# 
  1771  0008                     	;# 
  1772  0009                     	;# 
  1773  000A                     	;# 
  1774  000B                     	;# 
  1775  000C                     	;# 
  1776  000D                     	;# 
  1777  000E                     	;# 
  1778  0011                     	;# 
  1779  0012                     	;# 
  1780  0013                     	;# 
  1781  0014                     	;# 
  1782  0015                     	;# 
  1783  0016                     	;# 
  1784  0016                     	;# 
  1785  0017                     	;# 
  1786  0018                     	;# 
  1787  0019                     	;# 
  1788  001A                     	;# 
  1789  001B                     	;# 
  1790  001C                     	;# 
  1791  001E                     	;# 
  1792  001F                     	;# 
  1793  008C                     	;# 
  1794  008D                     	;# 
  1795  008E                     	;# 
  1796  0091                     	;# 
  1797  0092                     	;# 
  1798  0093                     	;# 
  1799  0094                     	;# 
  1800  0095                     	;# 
  1801  0096                     	;# 
  1802  0097                     	;# 
  1803  0098                     	;# 
  1804  0099                     	;# 
  1805  009A                     	;# 
  1806  009B                     	;# 
  1807  009B                     	;# 
  1808  009C                     	;# 
  1809  009D                     	;# 
  1810  009E                     	;# 
  1811  010C                     	;# 
  1812  010D                     	;# 
  1813  010E                     	;# 
  1814  0111                     	;# 
  1815  0112                     	;# 
  1816  0113                     	;# 
  1817  0114                     	;# 
  1818  0115                     	;# 
  1819  0116                     	;# 
  1820  0117                     	;# 
  1821  0118                     	;# 
  1822  0119                     	;# 
  1823  011A                     	;# 
  1824  011B                     	;# 
  1825  011D                     	;# 
  1826  011E                     	;# 
  1827  018C                     	;# 
  1828  018D                     	;# 
  1829  018E                     	;# 
  1830  0191                     	;# 
  1831  0191                     	;# 
  1832  0192                     	;# 
  1833  0193                     	;# 
  1834  0193                     	;# 
  1835  0193                     	;# 
  1836  0194                     	;# 
  1837  0195                     	;# 
  1838  0196                     	;# 
  1839  0199                     	;# 
  1840  019A                     	;# 
  1841  019B                     	;# 
  1842  019B                     	;# 
  1843  019C                     	;# 
  1844  019D                     	;# 
  1845  019E                     	;# 
  1846  019F                     	;# 
  1847  020C                     	;# 
  1848  020D                     	;# 
  1849  020E                     	;# 
  1850  0211                     	;# 
  1851  0211                     	;# 
  1852  0212                     	;# 
  1853  0212                     	;# 
  1854  0213                     	;# 
  1855  0213                     	;# 
  1856  0214                     	;# 
  1857  0214                     	;# 
  1858  0215                     	;# 
  1859  0215                     	;# 
  1860  0215                     	;# 
  1861  0216                     	;# 
  1862  0216                     	;# 
  1863  0217                     	;# 
  1864  0217                     	;# 
  1865  0219                     	;# 
  1866  021A                     	;# 
  1867  021B                     	;# 
  1868  021C                     	;# 
  1869  021D                     	;# 
  1870  021E                     	;# 
  1871  021F                     	;# 
  1872  0291                     	;# 
  1873  0291                     	;# 
  1874  0292                     	;# 
  1875  0293                     	;# 
  1876  0294                     	;# 
  1877  0295                     	;# 
  1878  0295                     	;# 
  1879  0296                     	;# 
  1880  0298                     	;# 
  1881  0298                     	;# 
  1882  0299                     	;# 
  1883  029A                     	;# 
  1884  029B                     	;# 
  1885  029C                     	;# 
  1886  029D                     	;# 
  1887  029E                     	;# 
  1888  0311                     	;# 
  1889  0311                     	;# 
  1890  0312                     	;# 
  1891  0313                     	;# 
  1892  0318                     	;# 
  1893  0318                     	;# 
  1894  0319                     	;# 
  1895  031A                     	;# 
  1896  038C                     	;# 
  1897  038D                     	;# 
  1898  038E                     	;# 
  1899  0391                     	;# 
  1900  0392                     	;# 
  1901  0393                     	;# 
  1902  0394                     	;# 
  1903  0395                     	;# 
  1904  0396                     	;# 
  1905  039A                     	;# 
  1906  039C                     	;# 
  1907  039D                     	;# 
  1908  039E                     	;# 
  1909  039F                     	;# 
  1910  0415                     	;# 
  1911  0416                     	;# 
  1912  0417                     	;# 
  1913  041C                     	;# 
  1914  041D                     	;# 
  1915  041E                     	;# 
  1916  0FE4                     	;# 
  1917  0FE5                     	;# 
  1918  0FE6                     	;# 
  1919  0FE7                     	;# 
  1920  0FE8                     	;# 
  1921  0FE9                     	;# 
  1922  0FEA                     	;# 
  1923  0FEB                     	;# 
  1924  0FED                     	;# 
  1925  0FEE                     	;# 
  1926  0FEF                     	;# 
  1927                           
  1928                           	psect	idataCOMMON
  1929  0003                     __pidataCOMMON:	
  1930                           
  1931                           ;initializer for _I2C_slaveWriteData
  1932  0003  3455               	retlw	85
  1933                           
  1934                           	psect	idataBANK1
  1935  0A11                     __pidataBANK1:	
  1936                           
  1937                           ;initializer for _tmr_scaler
  1938  0A11  3401               	retlw	1
  1939                           
  1940                           ;initializer for _BACKPLANE_SLAVE_ADDRESS
  1941  0A12  3401               	retlw	1
  1942                           
  1943                           ;initializer for _type_no_data
  1944  0A13  3406               	retlw	6
  1945                           
  1946                           	psect	stringtext
  1947  06C6                     __pstringtext:	
  1948  06C6                     _dpowers:	
  1949  06C6  3401               	retlw	1
  1950  06C7  3400               	retlw	0
  1951  06C8  340A               	retlw	10
  1952  06C9  3400               	retlw	0
  1953  06CA  3464               	retlw	100
  1954  06CB  3400               	retlw	0
  1955  06CC  34E8               	retlw	232
  1956  06CD  3403               	retlw	3
  1957  06CE  3410               	retlw	16
  1958  06CF  3427               	retlw	39
  1959  06D0                     __end_of_dpowers:	
  1960  06D0                     _RESOLUTION:	
  1961  06D0  34FF               	retlw	255
  1962  06D1  34FF               	retlw	255
  1963  06D2                     __end_of_RESOLUTION:	
  1964  06D2                     STR_36:	
  1965  06D2  3449               	retlw	73	;'I'
  1966  06D3  344C               	retlw	76	;'L'
  1967  06D4  344C               	retlw	76	;'L'
  1968  06D5  3445               	retlw	69	;'E'
  1969  06D6  3447               	retlw	71	;'G'
  1970  06D7  3441               	retlw	65	;'A'
  1971  06D8  344C               	retlw	76	;'L'
  1972  06D9  345F               	retlw	95	;'_'
  1973  06DA  3454               	retlw	84	;'T'
  1974  06DB  3459               	retlw	89	;'Y'
  1975  06DC  3450               	retlw	80	;'P'
  1976  06DD  3445               	retlw	69	;'E'
  1977  06DE  340A               	retlw	10
  1978  06DF  3400               	retlw	0
  1979  06E0                     STR_16:	
  1980  06E0  3424               	retlw	36	;'$'
  1981  06E1  343A               	retlw	58	;':'
  1982  06E2  3452               	retlw	82	;'R'
  1983  06E3  3444               	retlw	68	;'D'
  1984  06E4  3441               	retlw	65	;'A'
  1985  06E5  343A               	retlw	58	;':'
  1986  06E6  3425               	retlw	37	;'%'
  1987  06E7  3464               	retlw	100	;'d'
  1988  06E8  340A               	retlw	10
  1989  06E9  3400               	retlw	0
  1990  06EA                     STR_13:	
  1991  06EA  3424               	retlw	36	;'$'
  1992  06EB  343A               	retlw	58	;':'
  1993  06EC  3447               	retlw	71	;'G'
  1994  06ED  3445               	retlw	69	;'E'
  1995  06EE  3454               	retlw	84	;'T'
  1996  06EF  343A               	retlw	58	;':'
  1997  06F0  3425               	retlw	37	;'%'
  1998  06F1  3464               	retlw	100	;'d'
  1999  06F2  340A               	retlw	10
  2000  06F3  3400               	retlw	0
  2001  06F4                     STR_34:	
  2002  06F4  342D               	retlw	45	;'-'
  2003  06F5  3425               	retlw	37	;'%'
  2004  06F6  3464               	retlw	100	;'d'
  2005  06F7  342E               	retlw	46	;'.'
  2006  06F8  3425               	retlw	37	;'%'
  2007  06F9  3430               	retlw	48	;'0'
  2008  06FA  3432               	retlw	50	;'2'
  2009  06FB  3464               	retlw	100	;'d'
  2010  06FC  340A               	retlw	10
  2011  06FD  3400               	retlw	0
  2012  06FE                     STR_5:	
  2013  06FE  3424               	retlw	36	;'$'
  2014  06FF  343A               	retlw	58	;':'
  2015  0700  3457               	retlw	87	;'W'
  2016  0701  3448               	retlw	72	;'H'
  2017  0702  344F               	retlw	79	;'O'
  2018  0703  343A               	retlw	58	;':'
  2019  0704  3425               	retlw	37	;'%'
  2020  0705  3473               	retlw	115	;'s'
  2021  0706  340A               	retlw	10
  2022  0707  3400               	retlw	0
  2023  0708                     STR_9:	
  2024  0708  342A               	retlw	42	;'*'
  2025  0709  343A               	retlw	58	;':'
  2026  070A  3453               	retlw	83	;'S'
  2027  070B  3454               	retlw	84	;'T'
  2028  070C  3450               	retlw	80	;'P'
  2029  070D  343A               	retlw	58	;':'
  2030  070E  3425               	retlw	37	;'%'
  2031  070F  3473               	retlw	115	;'s'
  2032  0710  340A               	retlw	10
  2033  0711  3400               	retlw	0
  2034  0712                     STR_32:	
  2035  0712  342D               	retlw	45	;'-'
  2036  0713  3425               	retlw	37	;'%'
  2037  0714  3464               	retlw	100	;'d'
  2038  0715  342E               	retlw	46	;'.'
  2039  0716  3425               	retlw	37	;'%'
  2040  0717  3430               	retlw	48	;'0'
  2041  0718  3432               	retlw	50	;'2'
  2042  0719  3464               	retlw	100	;'d'
  2043  071A  342C               	retlw	44	;','
  2044  071B  3400               	retlw	0
  2045  071C                     STR_24:	
  2046  071C  3455               	retlw	85	;'U'
  2047  071D  3449               	retlw	73	;'I'
  2048  071E  344E               	retlw	78	;'N'
  2049  071F  3454               	retlw	84	;'T'
  2050  0720  3431               	retlw	49	;'1'
  2051  0721  3436               	retlw	54	;'6'
  2052  0722  345F               	retlw	95	;'_'
  2053  0723  3454               	retlw	84	;'T'
  2054  0724  343A               	retlw	58	;':'
  2055  0725  3400               	retlw	0
  2056  0726                     STR_1:	
  2057  0726  3453               	retlw	83	;'S'
  2058  0727  3448               	retlw	72	;'H'
  2059  0728  3454               	retlw	84	;'T'
  2060  0729  3433               	retlw	51	;'3'
  2061  072A  3431               	retlw	49	;'1'
  2062  072B  342D               	retlw	45	;'-'
  2063  072C  3444               	retlw	68	;'D'
  2064  072D  3449               	retlw	73	;'I'
  2065  072E  3453               	retlw	83	;'S'
  2066  072F  3400               	retlw	0
  2067  0730                     STR_35:	
  2068  0730  344E               	retlw	78	;'N'
  2069  0731  344F               	retlw	79	;'O'
  2070  0732  345F               	retlw	95	;'_'
  2071  0733  3444               	retlw	68	;'D'
  2072  0734  3441               	retlw	65	;'A'
  2073  0735  3454               	retlw	84	;'T'
  2074  0736  3441               	retlw	65	;'A'
  2075  0737  340A               	retlw	10
  2076  0738  3400               	retlw	0
  2077  0739                     STR_18:	
  2078  0739  3455               	retlw	85	;'U'
  2079  073A  3449               	retlw	73	;'I'
  2080  073B  344E               	retlw	78	;'N'
  2081  073C  3454               	retlw	84	;'T'
  2082  073D  3438               	retlw	56	;'8'
  2083  073E  345F               	retlw	95	;'_'
  2084  073F  3454               	retlw	84	;'T'
  2085  0740  343A               	retlw	58	;':'
  2086  0741  3400               	retlw	0
  2087  0742                     STR_30:	
  2088  0742  3446               	retlw	70	;'F'
  2089  0743  344C               	retlw	76	;'L'
  2090  0744  344F               	retlw	79	;'O'
  2091  0745  3441               	retlw	65	;'A'
  2092  0746  3454               	retlw	84	;'T'
  2093  0747  343A               	retlw	58	;':'
  2094  0748  3400               	retlw	0
  2095  0749                     STR_2:	
  2096  0749  3428               	retlw	40	;'('
  2097  074A  346E               	retlw	110	;'n'
  2098  074B  3475               	retlw	117	;'u'
  2099  074C  346C               	retlw	108	;'l'
  2100  074D  346C               	retlw	108	;'l'
  2101  074E  3429               	retlw	41	;')'
  2102  074F  3400               	retlw	0
  2103  0750                     STR_17:	
  2104  0750  3425               	retlw	37	;'%'
  2105  0751  3425               	retlw	37	;'%'
  2106  0752  3425               	retlw	37	;'%'
  2107  0753  3464               	retlw	100	;'d'
  2108  0754  343A               	retlw	58	;':'
  2109  0755  3400               	retlw	0
  2110  0756                     STR_3:	
  2111  0756  3423               	retlw	35	;'#'
  2112  0757  3425               	retlw	37	;'%'
  2113  0758  3473               	retlw	115	;'s'
  2114  0759  340A               	retlw	10
  2115  075A  3400               	retlw	0
  2116  075B                     STR_20:	
  2117  075B  3425               	retlw	37	;'%'
  2118  075C  3475               	retlw	117	;'u'
  2119  075D  340A               	retlw	10
  2120  075E  3400               	retlw	0
  2121  075F                     STR_22:	
  2122  075F  3425               	retlw	37	;'%'
  2123  0760  3464               	retlw	100	;'d'
  2124  0761  342C               	retlw	44	;','
  2125  0762  3400               	retlw	0
  2126  0763                     STR_19:	
  2127  0763  3425               	retlw	37	;'%'
  2128  0764  3475               	retlw	117	;'u'
  2129  0765  342C               	retlw	44	;','
  2130  0766  3400               	retlw	0
  2131  0767                     STR_15:	
  2132  0767  3452               	retlw	82	;'R'
  2133  0768  3444               	retlw	68	;'D'
  2134  0769  3441               	retlw	65	;'A'
  2135  076A  3400               	retlw	0
  2136  076B                     STR_14:	
  2137  076B  3457               	retlw	87	;'W'
  2138  076C  3444               	retlw	68	;'D'
  2139  076D  3441               	retlw	65	;'A'
  2140  076E  3400               	retlw	0
  2141  076F                     STR_7:	
  2142  076F  3453               	retlw	83	;'S'
  2143  0770  3454               	retlw	84	;'T'
  2144  0771  3441               	retlw	65	;'A'
  2145  0772  3400               	retlw	0
  2146  0773                     STR_10:	
  2147  0773  3441               	retlw	65	;'A'
  2148  0774  3443               	retlw	67	;'C'
  2149  0775  344B               	retlw	75	;'K'
  2150  0776  3400               	retlw	0
  2151  0777                     STR_4:	
  2152  0777  3457               	retlw	87	;'W'
  2153  0778  3448               	retlw	72	;'H'
  2154  0779  344F               	retlw	79	;'O'
  2155  077A  3400               	retlw	0
  2156  077B                     STR_8:	
  2157  077B  3453               	retlw	83	;'S'
  2158  077C  3454               	retlw	84	;'T'
  2159  077D  3450               	retlw	80	;'P'
  2160  077E  3400               	retlw	0
  2161  077F                     STR_12:	
  2162  077F  3447               	retlw	71	;'G'
  2163  0780  3445               	retlw	69	;'E'
  2164  0781  3454               	retlw	84	;'T'
  2165  0782  3400               	retlw	0
  2166  0783                     STR_11:	
  2167  0783  3453               	retlw	83	;'S'
  2168  0784  3445               	retlw	69	;'E'
  2169  0785  3454               	retlw	84	;'T'
  2170  0786  3400               	retlw	0
  2171  0787                     STR_6:	
  2172  0787  3453               	retlw	83	;'S'
  2173  0788  3441               	retlw	65	;'A'
  2174  0789  3456               	retlw	86	;'V'
  2175  078A  3400               	retlw	0
  2176  06E6                     
  2177                           ; #config settings
  2178  0000                     
  2179                           	psect	nvBANK1
  2180  00E7                     __pnvBANK1:	
  2181  00E7                     _PROTOCOL_Set_Handler:	
  2182  00E7                     	ds	2
  2183  00E9                     _PROTOCOL_Stop_Handler:	
  2184  00E9                     	ds	2
  2185  00EB                     _PROTOCOL_Start_Handler:	
  2186  00EB                     	ds	2
  2187                           
  2188                           	psect	nvBANK2
  2189  0160                     __pnvBANK2:	
  2190  0160                     _device_id_:	
  2191  0160                     	ds	2
  2192  0015                     _TMR0	set	21
  2193  000B                     _INTCONbits	set	11
  2194  0014                     _PIR4bits	set	20
  2195  0011                     _PIR1bits	set	17
  2196  005A                     _TMR0IF	set	90
  2197  0095                     _OPTION_REG	set	149
  2198  0095                     _OPTION_REGbits	set	149
  2199  008E                     _TRISC	set	142
  2200  008D                     _TRISB	set	141
  2201  008C                     _TRISA	set	140
  2202  0097                     _WDTCON	set	151
  2203  0098                     _OSCTUNE	set	152
  2204  0099                     _OSCCON	set	153
  2205  0094                     _PIE4bits	set	148
  2206  0091                     _PIE1bits	set	145
  2207  010E                     _LATCbits	set	270
  2208  011D                     _APFCON0	set	285
  2209  011E                     _APFCON1	set	286
  2210  010E                     _LATC	set	270
  2211  010D                     _LATB	set	269
  2212  010C                     _LATA	set	268
  2213  0196                     _EECON2	set	406
  2214  0193                     _EEDATL	set	403
  2215  0194                     _EEDATH	set	404
  2216  0195                     _EECON1bits	set	405
  2217  0192                     _EEADRH	set	402
  2218  0191                     _EEADRL	set	401
  2219  018C                     _ANSELA	set	396
  2220  018D                     _ANSELB	set	397
  2221  018E                     _ANSELC	set	398
  2222  0199                     _RCREG	set	409
  2223  019D                     _RCSTAbits	set	413
  2224  019A                     _TXREG	set	410
  2225  019C                     _SPBRGH	set	412
  2226  019B                     _SPBRGL	set	411
  2227  019E                     _TXSTA	set	414
  2228  019D                     _RCSTA	set	413
  2229  019F                     _BAUDCON	set	415
  2230  020E                     _WPUC	set	526
  2231  020C                     _WPUA	set	524
  2232  020D                     _WPUB	set	525
  2233  0219                     _SSP2BUF	set	537
  2234  021E                     _SSP2CON2bits	set	542
  2235  021D                     _SSP2CON1bits	set	541
  2236  021A                     _SSP2ADD	set	538
  2237  021F                     _SSP2CON3	set	543
  2238  021D                     _SSP2CON1	set	541
  2239  021C                     _SSP2STAT	set	540
  2240  0215                     _SSP1CON1bits	set	533
  2241  0216                     _SSP1CON2bits	set	534
  2242  0214                     _SSP1STATbits	set	532
  2243  0211                     _SSP1BUF	set	529
  2244  0212                     _SSP1ADD	set	530
  2245  0213                     _SSP1MSK	set	531
  2246  0217                     _SSP1CON3	set	535
  2247  0216                     _SSP1CON2	set	534
  2248  0215                     _SSP1CON1	set	533
  2249  0214                     _SSP1STAT	set	532
  2250                           
  2251                           	psect	cinit
  2252  004A                     start_initialization:	
  2253  004A                     __initialization:	
  2254                           
  2255                           ; Initialize objects allocated to COMMON
  2256  004A  3180  2003  3180   	fcall	__pidataCOMMON	;fetch initializer
  2257  004D  00FD               	movwf	__pdataCOMMON& (0+127)
  2258                           
  2259                           ; Initialize objects allocated to BANK1
  2260  004E  0021               	movlb	1	; select bank1
  2261  004F  318A  2211  3180   	fcall	__pidataBANK1	;fetch initializer
  2262  0052  00ED               	movwf	__pdataBANK1& (0+127)
  2263  0053  318A  2212  3180   	fcall	__pidataBANK1+1	;fetch initializer
  2264  0056  00EE               	movwf	(__pdataBANK1+1)& (0+127)
  2265  0057  318A  2213  3180   	fcall	__pidataBANK1+2	;fetch initializer
  2266  005A  00EF               	movwf	(__pdataBANK1+2)& (0+127)
  2267                           
  2268                           ; Clear objects allocated to COMMON
  2269  005B  01FA               	clrf	__pbssCOMMON& (0+127)
  2270  005C  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
  2271  005D  01FC               	clrf	(__pbssCOMMON+2)& (0+127)
  2272                           
  2273                           ; Clear objects allocated to BANK0
  2274  005E  3060               	movlw	low __pbssBANK0
  2275  005F  0084               	movwf	4
  2276  0060  3000               	movlw	high __pbssBANK0
  2277  0061  0085               	movwf	5
  2278  0062  300F               	movlw	15
  2279  0063  318A  2233  3180   	fcall	clear_ram0
  2280                           
  2281                           ; Clear objects allocated to BANK1
  2282  0066  30A0               	movlw	low __pbssBANK1
  2283  0067  0084               	movwf	4
  2284  0068  3000               	movlw	high __pbssBANK1
  2285  0069  0085               	movwf	5
  2286  006A  3047               	movlw	71
  2287  006B  318A  2233  3180   	fcall	clear_ram0
  2288                           
  2289                           ; Clear objects allocated to BANK2
  2290  006E  3020               	movlw	low __pbssBANK2
  2291  006F  0084               	movwf	4
  2292  0070  3001               	movlw	high __pbssBANK2
  2293  0071  0085               	movwf	5
  2294  0072  3040               	movlw	64
  2295  0073  318A  2233  3180   	fcall	clear_ram0
  2296                           
  2297                           ; Clear objects allocated to BANK3
  2298  0076  30A0               	movlw	low __pbssBANK3
  2299  0077  0084               	movwf	4
  2300  0078  3001               	movlw	high __pbssBANK3
  2301  0079  0085               	movwf	5
  2302  007A  3030               	movlw	48
  2303  007B  318A  2233         	fcall	clear_ram0
  2304  007D                     end_of_initialization:	
  2305                           ;End of C runtime variable initialization code
  2306                           
  2307  007D                     __end_of__initialization:	
  2308  007D  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2309  007E  0020               	movlb	0
  2310  007F  318D  2D70         	ljmp	_main	;jump to C main() function
  2311                           
  2312                           	psect	bssCOMMON
  2313  007A                     __pbssCOMMON:	
  2314  007A                     _eusartTxBufferRemaining:	
  2315  007A                     	ds	1
  2316  007B                     _eusartTxTail:	
  2317  007B                     	ds	1
  2318  007C                     _eusartTxHead:	
  2319  007C                     	ds	1
  2320                           
  2321                           	psect	dataCOMMON
  2322  007D                     __pdataCOMMON:	
  2323  007D                     _I2C_slaveWriteData:	
  2324  007D                     	ds	1
  2325                           
  2326                           	psect	bssBANK0
  2327  0060                     __pbssBANK0:	
  2328  0060                     _i2c2_object:	
  2329  0060                     	ds	5
  2330  0065                     _i:	
  2331  0065                     	ds	1
  2332  0066                     _value:	
  2333  0066                     	ds	1
  2334  0067                     _eusartRxCount:	
  2335  0067                     	ds	1
  2336  0068                     _eusartRxTail:	
  2337  0068                     	ds	1
  2338  0069                     _eusartRxHead:	
  2339  0069                     	ds	1
  2340  006A                     _p_i2c2_current:	
  2341  006A                     	ds	1
  2342  006B                     _p_i2c2_trb_current:	
  2343  006B                     	ds	1
  2344  006C                     I2C1_StatusCallback@next:	
  2345  006C                     	ds	1
  2346  006D                     I2C2_ISR@i2c_address:	
  2347  006D                     	ds	2
  2348                           
  2349                           	psect	bssBANK1
  2350  00A0                     __pbssBANK1:	
  2351  00A0                     _eusartRxBuffer:	
  2352  00A0                     	ds	8
  2353  00A8                     _eusartTxBuffer:	
  2354  00A8                     	ds	8
  2355  00B0                     _float100:	
  2356  00B0                     	ds	2
  2357  00B2                     _PROTOCOL_Inv_Handler:	
  2358  00B2                     	ds	2
  2359  00B4                     _PROTOCOL_Extension_Handler:	
  2360  00B4                     	ds	2
  2361  00B6                     _PROTOCOL_Loop_Func:	
  2362  00B6                     	ds	2
  2363  00B8                     _data:	
  2364  00B8                     	ds	1
  2365  00B9                     _j:	
  2366  00B9                     	ds	1
  2367  00BA                     _backplane_slave_enabled:	
  2368  00BA                     	ds	1
  2369  00BB                     _readbuf_status:	
  2370  00BB                     	ds	1
  2371  00BC                     _tmr_overflow:	
  2372  00BC                     	ds	1
  2373  00BD                     _tmr_cnt:	
  2374  00BD                     	ds	1
  2375  00BE                     _sec_cnt:	
  2376  00BE                     	ds	1
  2377  00BF                     _invoked:	
  2378  00BF                     	ds	1
  2379  00C0                     _running:	
  2380  00C0                     	ds	1
  2381  00C1                     _locked:	
  2382  00C1                     	ds	1
  2383  00C2                     _cnt:	
  2384  00C2                     	ds	1
  2385  00C3                     _slave_address:	
  2386  00C3                     	ds	1
  2387  00C4                     _timer0ReloadVal:	
  2388  00C4                     	ds	1
  2389  00C5                     I2C2_ISR@i2c_10bit_address_restart:	
  2390  00C5                     	ds	1
  2391  00C6                     I2C2_ISR@i2c_bytes_left:	
  2392  00C6                     	ds	1
  2393  00C7                     I2C2_ISR@pi2c_buf_ptr:	
  2394  00C7                     	ds	1
  2395  00C8                     _i2c2_trb_count:	
  2396  00C8                     	ds	1
  2397  00C9                     _i2c2_state:	
  2398  00C9                     	ds	1
  2399  00CA                     I2C1_StatusCallback@ext_cnt:	
  2400  00CA                     	ds	1
  2401  00CB                     I2C1_StatusCallback@ext_len:	
  2402  00CB                     	ds	1
  2403  00CC                     I2C1_StatusCallback@slaveWriteType:	
  2404  00CC                     	ds	1
  2405  00CD                     _readbuf:	
  2406  00CD                     	ds	6
  2407  00D3                     I2C2_MasterRead@trBlock:	
  2408  00D3                     	ds	4
  2409  00D7                     I2C2_MasterWrite@trBlock:	
  2410  00D7                     	ds	4
  2411  00DB                     PROTOCOL_Send_float@pbuf:	
  2412  00DB                     	ds	3
  2413  00DE                     _i2c2_tr_queue:	
  2414  00DE                     	ds	3
  2415  00E1                     PROTOCOL_Send_int16_t@pbuf:	
  2416  00E1                     	ds	2
  2417  00E3                     PROTOCOL_Send_uint16_t@pbuf:	
  2418  00E3                     	ds	2
  2419  00E5                     PROTOCOL_Send_int8_t@pbuf:	
  2420  00E5                     	ds	1
  2421  00E6                     PROTOCOL_Send_uint8_t@pbuf:	
  2422  00E6                     	ds	1
  2423                           
  2424                           	psect	dataBANK1
  2425  00ED                     __pdataBANK1:	
  2426  00ED                     _tmr_scaler:	
  2427  00ED                     	ds	1
  2428  00EE                     _BACKPLANE_SLAVE_ADDRESS:	
  2429  00EE                     	ds	1
  2430  00EF                     _type_no_data:	
  2431  00EF                     	ds	1
  2432                           
  2433                           	psect	bssBANK2
  2434  0120                     __pbssBANK2:	
  2435  0120                     _buf:	
  2436  0120                     	ds	48
  2437  0150                     _sendbuf:	
  2438  0150                     	ds	16
  2439                           
  2440                           	psect	bssBANK3
  2441  01A0                     __pbssBANK3:	
  2442  01A0                     I2C1_StatusCallback@ext_buf:	
  2443  01A0                     	ds	48
  2444                           
  2445                           	psect	clrtext
  2446  0A33                     clear_ram0:	
  2447                           ;	Called with FSR0 containing the base address, and
  2448                           ;	WREG with the size to clear
  2449                           
  2450  0A33  0064               	clrwdt	;clear the watchdog before getting into this loop
  2451  0A34                     clrloop0:	
  2452  0A34  0180               	clrf	0	;clear RAM location pointed to by FSR
  2453  0A35  3101               	addfsr 0,1
  2454  0A36  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2455  0A37  2A34               	goto	clrloop0	;have we reached the end yet?
  2456  0A38  3400               	retlw	0	;all done for this memory range, return
  2457                           
  2458                           	psect	cstackBANK2
  2459  0162                     __pcstackBANK2:	
  2460  0162                     PROTOCOL_Loop@c:	
  2461                           
  2462                           ; 1 bytes @ 0x0
  2463  0162                     	ds	1
  2464  0163                     PROTOCOL_Loop@device_address:	
  2465                           
  2466                           ; 1 bytes @ 0x1
  2467  0163                     	ds	1
  2468                           
  2469                           	psect	cstackCOMMON
  2470  0070                     __pcstackCOMMON:	
  2471  0070                     ?_isdigit:	
  2472  0070                     ?_PROTOCOL_Read_Device_Address:	
  2473                           ; 1 bit 
  2474                           
  2475  0070                     ?_I2C1_StatusCallback:	
  2476                           ; 1 bytes @ 0x0
  2477                           
  2478  0070                     ?_PROTOCOL_SET:	
  2479                           ; 1 bytes @ 0x0
  2480                           
  2481  0070                     ?_PROTOCOL_STA:	
  2482                           ; 1 bytes @ 0x0
  2483                           
  2484  0070                     ?_PROTOCOL_STP:	
  2485                           ; 1 bytes @ 0x0
  2486                           
  2487  0070                     ?_PROTOCOL_SAV:	
  2488                           ; 1 bytes @ 0x0
  2489                           
  2490  0070                     ?_PROTOCOL_INV:	
  2491                           ; 1 bytes @ 0x0
  2492                           
  2493  0070                     ??_PROTOCOL_INV:	
  2494                           ; 1 bytes @ 0x0
  2495                           
  2496  0070                     ?_PROTOCOL_RST:	
  2497                           ; 1 bytes @ 0x0
  2498                           
  2499  0070                     ??_PROTOCOL_RST:	
  2500                           ; 1 bytes @ 0x0
  2501                           
  2502  0070                     ?_PROTOCOL_Backplane_Slave_Enabled:	
  2503                           ; 1 bytes @ 0x0
  2504                           
  2505  0070                     ??_PROTOCOL_Backplane_Slave_Enabled:	
  2506                           ; 1 bytes @ 0x0
  2507                           
  2508  0070                     ?_PROTOCOL_Read_Lock:	
  2509                           ; 1 bytes @ 0x0
  2510                           
  2511  0070                     ??_PROTOCOL_Read_Lock:	
  2512                           ; 1 bytes @ 0x0
  2513                           
  2514  0070                     ?_PROTOCOL_EXT:	
  2515                           ; 1 bytes @ 0x0
  2516                           
  2517  0070                     ?_PROTOCOL_I2C_WHO:	
  2518                           ; 1 bytes @ 0x0
  2519                           
  2520  0070                     ??_PROTOCOL_I2C_WHO:	
  2521                           ; 1 bytes @ 0x0
  2522                           
  2523  0070                     ??_PROTOCOL_I2C_SEN:	
  2524                           ; 1 bytes @ 0x0
  2525                           
  2526  0070                     ?_PROTOCOL_I2C_GET:	
  2527                           ; 1 bytes @ 0x0
  2528                           
  2529  0070                     ??_PROTOCOL_I2C_GET:	
  2530                           ; 1 bytes @ 0x0
  2531                           
  2532  0070                     ?_I2C2_Stop:	
  2533                           ; 1 bytes @ 0x0
  2534                           
  2535  0070                     ??_I2C2_Stop:	
  2536                           ; 1 bytes @ 0x0
  2537                           
  2538  0070                     ?_I2C2_FunctionComplete:	
  2539                           ; 1 bytes @ 0x0
  2540                           
  2541  0070                     ??_I2C2_FunctionComplete:	
  2542                           ; 1 bytes @ 0x0
  2543                           
  2544  0070                     ?_PIN_MANAGER_Initialize:	
  2545                           ; 1 bytes @ 0x0
  2546                           
  2547  0070                     ?_OSCILLATOR_Initialize:	
  2548                           ; 1 bytes @ 0x0
  2549                           
  2550  0070                     ?_WDT_Initialize:	
  2551                           ; 1 bytes @ 0x0
  2552                           
  2553  0070                     ?_TMR0_Initialize:	
  2554                           ; 1 bytes @ 0x0
  2555                           
  2556  0070                     ?_EUSART_Initialize:	
  2557                           ; 1 bytes @ 0x0
  2558                           
  2559  0070                     ?_EUSART_Transmit_ISR:	
  2560                           ; 1 bytes @ 0x0
  2561                           
  2562  0070                     ??_EUSART_Transmit_ISR:	
  2563                           ; 1 bytes @ 0x0
  2564                           
  2565  0070                     ?_EUSART_Receive_ISR:	
  2566                           ; 1 bytes @ 0x0
  2567                           
  2568  0070                     ??_EUSART_Receive_ISR:	
  2569                           ; 1 bytes @ 0x0
  2570                           
  2571  0070                     ?_PROTOCOL_Loop:	
  2572                           ; 1 bytes @ 0x0
  2573                           
  2574  0070                     ?_I2C1_Initialize:	
  2575                           ; 1 bytes @ 0x0
  2576                           
  2577  0070                     ?_I2C1_ISR:	
  2578                           ; 1 bytes @ 0x0
  2579                           
  2580  0070                     ?_I2C2_Initialize:	
  2581                           ; 1 bytes @ 0x0
  2582                           
  2583  0070                     ?_I2C2_ISR:	
  2584                           ; 1 bytes @ 0x0
  2585                           
  2586  0070                     ?_I2C2_BusCollisionISR:	
  2587                           ; 1 bytes @ 0x0
  2588                           
  2589  0070                     ??_I2C2_BusCollisionISR:	
  2590                           ; 1 bytes @ 0x0
  2591                           
  2592  0070                     ?_INTERRUPT_InterruptManager:	
  2593                           ; 1 bytes @ 0x0
  2594                           
  2595  0070                     ?_EUSART_Read:	
  2596                           ; 1 bytes @ 0x0
  2597                           
  2598  0070                     ?_EUSART_Write:	
  2599                           ; 1 bytes @ 0x0
  2600                           
  2601  0070                     ?_putch:	
  2602                           ; 1 bytes @ 0x0
  2603                           
  2604  0070                     ?_DATAEE_ReadByte:	
  2605                           ; 1 bytes @ 0x0
  2606                           
  2607  0070                     ?_TMR0_HasOverflowOccured:	
  2608                           ; 1 bytes @ 0x0
  2609                           
  2610  0070                     ?_inv_handler:	
  2611                           ; 1 bytes @ 0x0
  2612                           
  2613  0070                     ?_main:	
  2614                           ; 1 bytes @ 0x0
  2615                           
  2616  0070                     ?_PROTOCOL_Write_Device_Address:	
  2617                           ; 1 bytes @ 0x0
  2618                           
  2619  0070                     ?i1_DATAEE_WriteByte:	
  2620                           ; 1 bytes @ 0x0
  2621                           
  2622  0070                     ?i1_PROTOCOL_STA:	
  2623                           ; 1 bytes @ 0x0
  2624                           
  2625  0070                     ??i1_PROTOCOL_STA:	
  2626                           ; 1 bytes @ 0x0
  2627                           
  2628  0070                     ?i1_PROTOCOL_STP:	
  2629                           ; 1 bytes @ 0x0
  2630                           
  2631  0070                     ??i1_PROTOCOL_STP:	
  2632                           ; 1 bytes @ 0x0
  2633                           
  2634  0070                     ?i1_PROTOCOL_SAV:	
  2635                           ; 1 bytes @ 0x0
  2636                           
  2637  0070                     ?i1_PROTOCOL_SET:	
  2638                           ; 1 bytes @ 0x0
  2639                           
  2640  0070                     ??i1_PROTOCOL_SET:	
  2641                           ; 1 bytes @ 0x0
  2642                           
  2643  0070                     ?i1_PROTOCOL_EXT:	
  2644                           ; 1 bytes @ 0x0
  2645                           
  2646  0070                     ??i1_PROTOCOL_EXT:	
  2647                           ; 1 bytes @ 0x0
  2648                           
  2649  0070                     ?_PROTOCOL_I2C_SEN:	
  2650                           ; 1 bytes @ 0x0
  2651                           
  2652  0070                     i1DATAEE_WriteByte@bData:	
  2653                           ; 2 bytes @ 0x0
  2654                           
  2655                           
  2656                           ; 1 bytes @ 0x0
  2657  0070                     	ds	1
  2658  0071                     ??i1_DATAEE_WriteByte:	
  2659  0071                     I2C2_Stop@completion_code:	
  2660                           ; 1 bytes @ 0x1
  2661                           
  2662  0071                     i1DATAEE_WriteByte@bAdd:	
  2663                           ; 1 bytes @ 0x1
  2664                           
  2665  0071                     i1PROTOCOL_SET@value_:	
  2666                           ; 1 bytes @ 0x1
  2667                           
  2668                           
  2669                           ; 1 bytes @ 0x1
  2670  0071                     	ds	1
  2671  0072                     ??_I2C2_ISR:	
  2672  0072                     i1DATAEE_WriteByte@GIEBitValue:	
  2673                           ; 1 bytes @ 0x2
  2674                           
  2675  0072                     PROTOCOL_I2C_SEN@pdata:	
  2676                           ; 1 bytes @ 0x2
  2677                           
  2678                           
  2679                           ; 2 bytes @ 0x2
  2680  0072                     	ds	1
  2681  0073                     ??i1_PROTOCOL_SAV:	
  2682                           
  2683                           ; 1 bytes @ 0x3
  2684  0073                     	ds	1
  2685  0074                     ??_I2C1_StatusCallback:	
  2686                           
  2687                           ; 1 bytes @ 0x4
  2688  0074                     	ds	1
  2689  0075                     I2C1_StatusCallback@pdata:	
  2690                           
  2691                           ; 2 bytes @ 0x5
  2692  0075                     	ds	2
  2693  0077                     I2C1_StatusCallback@i2c_bus_state:	
  2694                           
  2695                           ; 1 bytes @ 0x7
  2696  0077                     	ds	1
  2697  0078                     ??_I2C1_ISR:	
  2698                           
  2699                           ; 1 bytes @ 0x8
  2700  0078                     	ds	1
  2701  0079                     I2C1_ISR@i2c_data:	
  2702                           
  2703                           ; 1 bytes @ 0x9
  2704  0079                     	ds	1
  2705                           
  2706                           	psect	cstackBANK0
  2707  0020                     __pcstackBANK0:	
  2708  0020                     ??_INTERRUPT_InterruptManager:	
  2709                           
  2710                           ; 1 bytes @ 0x0
  2711  0020                     	ds	1
  2712  0021                     ??_PROTOCOL_Read_Device_Address:	
  2713  0021                     ??_PROTOCOL_SET:	
  2714                           ; 1 bytes @ 0x1
  2715                           
  2716  0021                     ??_PROTOCOL_STA:	
  2717                           ; 1 bytes @ 0x1
  2718                           
  2719  0021                     ??_PROTOCOL_STP:	
  2720                           ; 1 bytes @ 0x1
  2721                           
  2722  0021                     ??_PROTOCOL_EXT:	
  2723                           ; 1 bytes @ 0x1
  2724                           
  2725  0021                     ?_I2C2_MasterWriteTRBBuild:	
  2726                           ; 1 bytes @ 0x1
  2727                           
  2728  0021                     ?_I2C2_MasterTRBInsert:	
  2729                           ; 1 bytes @ 0x1
  2730                           
  2731  0021                     ?_I2C2_MasterReadTRBBuild:	
  2732                           ; 1 bytes @ 0x1
  2733                           
  2734  0021                     ??_PIN_MANAGER_Initialize:	
  2735                           ; 1 bytes @ 0x1
  2736                           
  2737  0021                     ??_OSCILLATOR_Initialize:	
  2738                           ; 1 bytes @ 0x1
  2739                           
  2740  0021                     ??_WDT_Initialize:	
  2741                           ; 1 bytes @ 0x1
  2742                           
  2743  0021                     ??_TMR0_Initialize:	
  2744                           ; 1 bytes @ 0x1
  2745                           
  2746  0021                     ??_EUSART_Initialize:	
  2747                           ; 1 bytes @ 0x1
  2748                           
  2749  0021                     ??_isdigit:	
  2750                           ; 1 bytes @ 0x1
  2751                           
  2752  0021                     ??_I2C1_Initialize:	
  2753                           ; 1 bytes @ 0x1
  2754                           
  2755  0021                     ??_I2C2_Initialize:	
  2756                           ; 1 bytes @ 0x1
  2757                           
  2758  0021                     ??_EUSART_Read:	
  2759                           ; 1 bytes @ 0x1
  2760                           
  2761  0021                     ??_EUSART_Write:	
  2762                           ; 1 bytes @ 0x1
  2763                           
  2764  0021                     ?_DATAEE_WriteByte:	
  2765                           ; 1 bytes @ 0x1
  2766                           
  2767  0021                     ??_DATAEE_ReadByte:	
  2768                           ; 1 bytes @ 0x1
  2769                           
  2770  0021                     ??_TMR0_HasOverflowOccured:	
  2771                           ; 1 bytes @ 0x1
  2772                           
  2773  0021                     ?_PROTOCOL_I2C_Set_TLV:	
  2774                           ; 1 bytes @ 0x1
  2775                           
  2776  0021                     ?_strncmp:	
  2777                           ; 1 bytes @ 0x1
  2778                           
  2779  0021                     ?___wmul:	
  2780                           ; 2 bytes @ 0x1
  2781                           
  2782  0021                     ?___lwdiv:	
  2783                           ; 2 bytes @ 0x1
  2784                           
  2785  0021                     ?___lmul:	
  2786                           ; 2 bytes @ 0x1
  2787                           
  2788  0021                     I2C2_MasterTRBInsert@ptrb_list:	
  2789                           ; 4 bytes @ 0x1
  2790                           
  2791  0021                     I2C2_MasterReadTRBBuild@pdata:	
  2792                           ; 1 bytes @ 0x1
  2793                           
  2794  0021                     I2C2_MasterWriteTRBBuild@pdata:	
  2795                           ; 1 bytes @ 0x1
  2796                           
  2797  0021                     DATAEE_WriteByte@bData:	
  2798                           ; 1 bytes @ 0x1
  2799                           
  2800  0021                     DATAEE_ReadByte@bAdd:	
  2801                           ; 1 bytes @ 0x1
  2802                           
  2803  0021                     PROTOCOL_EXT@char_buf:	
  2804                           ; 1 bytes @ 0x1
  2805                           
  2806  0021                     PROTOCOL_I2C_Set_TLV@length:	
  2807                           ; 1 bytes @ 0x1
  2808                           
  2809  0021                     _isdigit$1477:	
  2810                           ; 1 bytes @ 0x1
  2811                           
  2812  0021                     ___wmul@multiplier:	
  2813                           ; 1 bytes @ 0x1
  2814                           
  2815  0021                     ___lwdiv@divisor:	
  2816                           ; 2 bytes @ 0x1
  2817                           
  2818  0021                     strncmp@s1:	
  2819                           ; 2 bytes @ 0x1
  2820                           
  2821  0021                     ___lmul@multiplier:	
  2822                           ; 2 bytes @ 0x1
  2823                           
  2824                           
  2825                           ; 4 bytes @ 0x1
  2826  0021                     	ds	1
  2827  0022                     ?_PROTOCOL_Initialize:	
  2828  0022                     ??_DATAEE_WriteByte:	
  2829                           ; 1 bytes @ 0x2
  2830                           
  2831  0022                     I2C2_MasterTRBInsert@pflag:	
  2832                           ; 1 bytes @ 0x2
  2833                           
  2834  0022                     I2C2_MasterReadTRBBuild@length:	
  2835                           ; 1 bytes @ 0x2
  2836                           
  2837  0022                     I2C2_MasterWriteTRBBuild@length:	
  2838                           ; 1 bytes @ 0x2
  2839                           
  2840  0022                     EUSART_Read@readValue:	
  2841                           ; 1 bytes @ 0x2
  2842                           
  2843  0022                     EUSART_Write@txData:	
  2844                           ; 1 bytes @ 0x2
  2845                           
  2846  0022                     DATAEE_WriteByte@bAdd:	
  2847                           ; 1 bytes @ 0x2
  2848                           
  2849  0022                     PROTOCOL_SET@value_:	
  2850                           ; 1 bytes @ 0x2
  2851                           
  2852  0022                     isdigit@c:	
  2853                           ; 1 bytes @ 0x2
  2854                           
  2855  0022                     PROTOCOL_Initialize@device_id:	
  2856                           ; 1 bytes @ 0x2
  2857                           
  2858  0022                     PROTOCOL_I2C_Set_TLV@pbuffer:	
  2859                           ; 2 bytes @ 0x2
  2860                           
  2861                           
  2862                           ; 2 bytes @ 0x2
  2863  0022                     	ds	1
  2864  0023                     ??_I2C2_MasterTRBInsert:	
  2865  0023                     ??_putch:	
  2866                           ; 1 bytes @ 0x3
  2867                           
  2868  0023                     putch@txData:	
  2869                           ; 1 bytes @ 0x3
  2870                           
  2871  0023                     DATAEE_WriteByte@GIEBitValue:	
  2872                           ; 1 bytes @ 0x3
  2873                           
  2874  0023                     strncmp@s2:	
  2875                           ; 1 bytes @ 0x3
  2876                           
  2877  0023                     I2C2_MasterReadTRBBuild@address:	
  2878                           ; 1 bytes @ 0x3
  2879                           
  2880  0023                     I2C2_MasterWriteTRBBuild@address:	
  2881                           ; 2 bytes @ 0x3
  2882                           
  2883  0023                     ___wmul@multiplicand:	
  2884                           ; 2 bytes @ 0x3
  2885                           
  2886  0023                     ___lwdiv@dividend:	
  2887                           ; 2 bytes @ 0x3
  2888                           
  2889                           
  2890                           ; 2 bytes @ 0x3
  2891  0023                     	ds	1
  2892  0024                     ??_PROTOCOL_SAV:	
  2893  0024                     ??_PROTOCOL_Write_Device_Address:	
  2894                           ; 1 bytes @ 0x4
  2895                           
  2896  0024                     ??_PROTOCOL_I2C_Set_TLV:	
  2897                           ; 1 bytes @ 0x4
  2898                           
  2899  0024                     I2C2_MasterTRBInsert@count:	
  2900                           ; 1 bytes @ 0x4
  2901                           
  2902  0024                     PROTOCOL_Initialize@start_handler:	
  2903                           ; 1 bytes @ 0x4
  2904                           
  2905  0024                     strncmp@len:	
  2906                           ; 1 bytes @ 0x4
  2907                           
  2908                           
  2909                           ; 2 bytes @ 0x4
  2910  0024                     	ds	1
  2911  0025                     ??_I2C2_MasterWriteTRBBuild:	
  2912  0025                     ??_I2C2_MasterReadTRBBuild:	
  2913                           ; 1 bytes @ 0x5
  2914                           
  2915  0025                     ??___wmul:	
  2916                           ; 1 bytes @ 0x5
  2917                           
  2918  0025                     ??___lwdiv:	
  2919                           ; 1 bytes @ 0x5
  2920                           
  2921  0025                     PROTOCOL_Initialize@stop_handler:	
  2922                           ; 1 bytes @ 0x5
  2923                           
  2924  0025                     PROTOCOL_Write_Device_Address@device_id_i2c:	
  2925                           ; 1 bytes @ 0x5
  2926                           
  2927  0025                     PROTOCOL_I2C_Set_TLV@type:	
  2928                           ; 1 bytes @ 0x5
  2929                           
  2930  0025                     ___wmul@product:	
  2931                           ; 1 bytes @ 0x5
  2932                           
  2933  0025                     ___lmul@multiplicand:	
  2934                           ; 2 bytes @ 0x5
  2935                           
  2936                           
  2937                           ; 4 bytes @ 0x5
  2938  0025                     	ds	1
  2939  0026                     ??_strncmp:	
  2940  0026                     PROTOCOL_Initialize@set_handler:	
  2941                           ; 1 bytes @ 0x6
  2942                           
  2943  0026                     PROTOCOL_I2C_Set_TLV@status:	
  2944                           ; 1 bytes @ 0x6
  2945                           
  2946  0026                     ___lwdiv@counter:	
  2947                           ; 1 bytes @ 0x6
  2948                           
  2949                           
  2950                           ; 1 bytes @ 0x6
  2951  0026                     	ds	1
  2952  0027                     ?_atoi:	
  2953  0027                     I2C2_MasterReadTRBBuild@ptrb:	
  2954                           ; 2 bytes @ 0x7
  2955                           
  2956  0027                     I2C2_MasterWriteTRBBuild@ptrb:	
  2957                           ; 1 bytes @ 0x7
  2958                           
  2959  0027                     PROTOCOL_Initialize@inv_handler:	
  2960                           ; 1 bytes @ 0x7
  2961                           
  2962  0027                     ___lwdiv@quotient:	
  2963                           ; 2 bytes @ 0x7
  2964                           
  2965                           
  2966                           ; 2 bytes @ 0x7
  2967  0027                     	ds	1
  2968  0028                     ?_I2C2_MasterWrite:	
  2969  0028                     ?_I2C2_MasterRead:	
  2970                           ; 1 bytes @ 0x8
  2971                           
  2972  0028                     I2C2_MasterWrite@length:	
  2973                           ; 1 bytes @ 0x8
  2974                           
  2975  0028                     I2C2_MasterRead@length:	
  2976                           ; 1 bytes @ 0x8
  2977                           
  2978                           
  2979                           ; 1 bytes @ 0x8
  2980  0028                     	ds	1
  2981  0029                     ??_atoi:	
  2982  0029                     ??___lmul:	
  2983                           ; 1 bytes @ 0x9
  2984                           
  2985  0029                     ?___lwmod:	
  2986                           ; 1 bytes @ 0x9
  2987                           
  2988  0029                     PROTOCOL_Initialize@scaler:	
  2989                           ; 2 bytes @ 0x9
  2990                           
  2991  0029                     I2C2_MasterWrite@address:	
  2992                           ; 1 bytes @ 0x9
  2993                           
  2994  0029                     I2C2_MasterRead@address:	
  2995                           ; 2 bytes @ 0x9
  2996                           
  2997  0029                     ___lwmod@divisor:	
  2998                           ; 2 bytes @ 0x9
  2999                           
  3000  0029                     ___lmul@product:	
  3001                           ; 2 bytes @ 0x9
  3002                           
  3003                           
  3004                           ; 4 bytes @ 0x9
  3005  0029                     	ds	1
  3006  002A                     ??_PROTOCOL_Initialize:	
  3007                           
  3008                           ; 1 bytes @ 0xA
  3009  002A                     	ds	1
  3010  002B                     I2C2_MasterWrite@pflag:	
  3011  002B                     I2C2_MasterRead@pflag:	
  3012                           ; 1 bytes @ 0xB
  3013                           
  3014  002B                     atoi@sign:	
  3015                           ; 1 bytes @ 0xB
  3016                           
  3017  002B                     ___lwmod@dividend:	
  3018                           ; 1 bytes @ 0xB
  3019                           
  3020                           
  3021                           ; 2 bytes @ 0xB
  3022  002B                     	ds	1
  3023  002C                     ??_I2C2_MasterWrite:	
  3024  002C                     ??_I2C2_MasterRead:	
  3025                           ; 1 bytes @ 0xC
  3026                           
  3027  002C                     atoi@a:	
  3028                           ; 1 bytes @ 0xC
  3029                           
  3030                           
  3031                           ; 2 bytes @ 0xC
  3032  002C                     	ds	1
  3033  002D                     ??___lwmod:	
  3034  002D                     ?___aldiv:	
  3035                           ; 1 bytes @ 0xD
  3036                           
  3037  002D                     ___aldiv@divisor:	
  3038                           ; 4 bytes @ 0xD
  3039                           
  3040                           
  3041                           ; 4 bytes @ 0xD
  3042  002D                     	ds	1
  3043  002E                     I2C2_MasterWrite@pdata:	
  3044  002E                     I2C2_MasterRead@pdata:	
  3045                           ; 1 bytes @ 0xE
  3046                           
  3047  002E                     atoi@s:	
  3048                           ; 1 bytes @ 0xE
  3049                           
  3050  002E                     ___lwmod@counter:	
  3051                           ; 1 bytes @ 0xE
  3052                           
  3053                           
  3054                           ; 1 bytes @ 0xE
  3055  002E                     	ds	1
  3056  002F                     ?_i2c2_write:	
  3057  002F                     ?_i2c2_read_no_reg_addr:	
  3058                           ; 1 bytes @ 0xF
  3059                           
  3060  002F                     ?_printf:	
  3061                           ; 1 bytes @ 0xF
  3062                           
  3063  002F                     printf@f:	
  3064                           ; 2 bytes @ 0xF
  3065                           
  3066  002F                     i2c2_write@dev_addr:	
  3067                           ; 2 bytes @ 0xF
  3068                           
  3069  002F                     i2c2_read_no_reg_addr@dev_addr:	
  3070                           ; 2 bytes @ 0xF
  3071                           
  3072                           
  3073                           ; 2 bytes @ 0xF
  3074  002F                     	ds	2
  3075  0031                     i2c2_write@reg_addr:	
  3076  0031                     i2c2_read_no_reg_addr@pbuf:	
  3077                           ; 1 bytes @ 0x11
  3078                           
  3079  0031                     ___aldiv@dividend:	
  3080                           ; 1 bytes @ 0x11
  3081                           
  3082                           
  3083                           ; 4 bytes @ 0x11
  3084  0031                     	ds	1
  3085  0032                     i2c2_write@data:	
  3086  0032                     i2c2_read_no_reg_addr@len:	
  3087                           ; 1 bytes @ 0x12
  3088                           
  3089                           
  3090                           ; 1 bytes @ 0x12
  3091  0032                     	ds	1
  3092  0033                     ??_i2c2_write:	
  3093  0033                     ??_i2c2_read_no_reg_addr:	
  3094                           ; 1 bytes @ 0x13
  3095                           
  3096  0033                     ??_printf:	
  3097                           ; 1 bytes @ 0x13
  3098                           
  3099                           
  3100                           ; 1 bytes @ 0x13
  3101  0033                     	ds	2
  3102  0035                     ??___aldiv:	
  3103  0035                     i2c2_read_no_reg_addr@timeout:	
  3104                           ; 1 bytes @ 0x15
  3105                           
  3106  0035                     i2c2_write@buf:	
  3107                           ; 1 bytes @ 0x15
  3108                           
  3109                           
  3110                           ; 2 bytes @ 0x15
  3111  0035                     	ds	1
  3112  0036                     i2c2_read_no_reg_addr@read_status:	
  3113  0036                     ___aldiv@counter:	
  3114                           ; 1 bytes @ 0x16
  3115                           
  3116                           
  3117                           ; 1 bytes @ 0x16
  3118  0036                     	ds	1
  3119  0037                     printf@prec:	
  3120  0037                     i2c2_write@write_status:	
  3121                           ; 1 bytes @ 0x17
  3122                           
  3123  0037                     i2c2_read_no_reg_addr@status:	
  3124                           ; 1 bytes @ 0x17
  3125                           
  3126  0037                     ___aldiv@sign:	
  3127                           ; 1 bytes @ 0x17
  3128                           
  3129                           
  3130                           ; 1 bytes @ 0x17
  3131  0037                     	ds	1
  3132  0038                     i2c2_write@status:	
  3133  0038                     printf@cp:	
  3134                           ; 1 bytes @ 0x18
  3135                           
  3136  0038                     ___aldiv@quotient:	
  3137                           ; 2 bytes @ 0x18
  3138                           
  3139                           
  3140                           ; 4 bytes @ 0x18
  3141  0038                     	ds	2
  3142  003A                     printf@ap:	
  3143                           
  3144                           ; 1 bytes @ 0x1A
  3145  003A                     	ds	1
  3146  003B                     printf@val:	
  3147                           
  3148                           ; 2 bytes @ 0x1B
  3149  003B                     	ds	2
  3150  003D                     printf@len:	
  3151                           
  3152                           ; 2 bytes @ 0x1D
  3153  003D                     	ds	2
  3154  003F                     printf@flag:	
  3155                           
  3156                           ; 1 bytes @ 0x1F
  3157  003F                     	ds	1
  3158  0040                     printf@width:	
  3159                           
  3160                           ; 2 bytes @ 0x20
  3161  0040                     	ds	2
  3162  0042                     printf@c:	
  3163                           
  3164                           ; 1 bytes @ 0x22
  3165  0042                     	ds	1
  3166  0043                     ?_PROTOCOL_I2C_Send_int8_t:	
  3167  0043                     PROTOCOL_I2C_Send_int8_t@pbuffer:	
  3168                           ; 1 bytes @ 0x23
  3169                           
  3170                           
  3171                           ; 1 bytes @ 0x23
  3172  0043                     	ds	1
  3173  0044                     ??_PROTOCOL_I2C_Send_int8_t:	
  3174                           
  3175                           ; 1 bytes @ 0x24
  3176  0044                     	ds	2
  3177  0046                     PROTOCOL_I2C_Send_int8_t@length:	
  3178                           
  3179                           ; 1 bytes @ 0x26
  3180  0046                     	ds	1
  3181  0047                     ??_inv_handler:	
  3182                           
  3183                           ; 1 bytes @ 0x27
  3184  0047                     	ds	5
  3185  004C                     inv_handler@status:	
  3186                           
  3187                           ; 1 bytes @ 0x2C
  3188  004C                     	ds	1
  3189  004D                     inv_handler@measure:	
  3190                           
  3191                           ; 6 bytes @ 0x2D
  3192  004D                     	ds	6
  3193  0053                     inv_handler@s_t:	
  3194                           
  3195                           ; 4 bytes @ 0x33
  3196  0053                     	ds	4
  3197  0057                     inv_handler@s_rh:	
  3198                           
  3199                           ; 4 bytes @ 0x37
  3200  0057                     	ds	4
  3201  005B                     inv_handler@data:	
  3202                           
  3203                           ; 2 bytes @ 0x3B
  3204  005B                     	ds	2
  3205  005D                     ??_PROTOCOL_Loop:	
  3206                           
  3207                           ; 1 bytes @ 0x3D
  3208  005D                     	ds	2
  3209  005F                     ??_main:	
  3210                           
  3211                           ; 1 bytes @ 0x3F
  3212  005F                     	ds	1
  3213                           
  3214                           	psect	maintext
  3215  0D70                     __pmaintext:	
  3216 ;;
  3217 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  3218 ;;
  3219 ;; *************** function _main *****************
  3220 ;; Defined at:
  3221 ;;		line 37 in file "main.c"
  3222 ;; Parameters:    Size  Location     Type
  3223 ;;		None
  3224 ;; Auto vars:     Size  Location     Type
  3225 ;;		None
  3226 ;; Return value:  Size  Location     Type
  3227 ;;                  1    wreg      void 
  3228 ;; Registers used:
  3229 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3230 ;; Tracked objects:
  3231 ;;		On entry : B1F/0
  3232 ;;		On exit  : 0/0
  3233 ;;		Unchanged: 0/0
  3234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3236 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3237 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3238 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3239 ;;Total ram usage:        1 bytes
  3240 ;; Hardware stack levels required when called:   11
  3241 ;; This function calls:
  3242 ;;		_EUSART_Initialize
  3243 ;;		_I2C1_Initialize
  3244 ;;		_I2C2_Initialize
  3245 ;;		_OSCILLATOR_Initialize
  3246 ;;		_PIN_MANAGER_Initialize
  3247 ;;		_PROTOCOL_Initialize
  3248 ;;		_PROTOCOL_Loop
  3249 ;;		_TMR0_Initialize
  3250 ;;		_WDT_Initialize
  3251 ;; This function is called by:
  3252 ;;		Startup code after reset
  3253 ;; This function uses a non-reentrant model
  3254 ;;
  3255                           
  3256                           
  3257                           ;psect for function _main
  3258  0D70                     _main:	
  3259                           
  3260                           ;main.c: 40: PROTOCOL_Initialize("SHT31-DIS", (0), (0), (0), inv_handler, 125);
  3261                           
  3262                           ;incstack = 0
  3263                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3264  0D70  3026               	movlw	low (STR_1| (0+32768))
  3265  0D71  0020               	movlb	0	; select bank0
  3266  0D72  00A2               	movwf	PROTOCOL_Initialize@device_id
  3267  0D73  3087               	movlw	high (STR_1| (0+32768))
  3268  0D74  00A3               	movwf	PROTOCOL_Initialize@device_id+1
  3269  0D75  01A4               	clrf	PROTOCOL_Initialize@start_handler
  3270  0D76  01A5               	clrf	PROTOCOL_Initialize@stop_handler
  3271  0D77  01A6               	clrf	PROTOCOL_Initialize@set_handler
  3272  0D78  30FE               	movlw	low _inv_handler
  3273  0D79  00A7               	movwf	PROTOCOL_Initialize@inv_handler
  3274  0D7A  3005               	movlw	high _inv_handler
  3275  0D7B  00A8               	movwf	PROTOCOL_Initialize@inv_handler+1
  3276  0D7C  307D               	movlw	125
  3277  0D7D  00DF               	movwf	??_main
  3278  0D7E  085F               	movf	??_main,w
  3279  0D7F  00A9               	movwf	PROTOCOL_Initialize@scaler
  3280  0D80  318E  26CF  318D   	fcall	_PROTOCOL_Initialize
  3281                           
  3282                           ;main.c: 43: PIN_MANAGER_Initialize();
  3283  0D83  318B  236A  318D   	fcall	_PIN_MANAGER_Initialize
  3284                           
  3285                           ;main.c: 44: OSCILLATOR_Initialize();
  3286  0D86  318A  2228  318D   	fcall	_OSCILLATOR_Initialize
  3287                           
  3288                           ;main.c: 45: WDT_Initialize();
  3289  0D89  3187  27FC  318D   	fcall	_WDT_Initialize
  3290                           
  3291                           ;main.c: 46: TMR0_Initialize();
  3292  0D8C  318A  227F  318D   	fcall	_TMR0_Initialize
  3293                           
  3294                           ;main.c: 49: (INTCONbits.GIE = 1);
  3295  0D8F  178B               	bsf	11,7	;volatile
  3296                           
  3297                           ;main.c: 50: (INTCONbits.PEIE = 1);
  3298  0D90  170B               	bsf	11,6	;volatile
  3299                           
  3300                           ;main.c: 53: EUSART_Initialize();
  3301  0D91  318A  22E1  318D   	fcall	_EUSART_Initialize
  3302                           
  3303                           ;main.c: 56: I2C2_Initialize();
  3304  0D94  318A  22B0  318D   	fcall	_I2C2_Initialize
  3305                           
  3306                           ;main.c: 59: I2C1_Initialize();
  3307  0D97  318B  23C7  318D   	fcall	_I2C1_Initialize
  3308                           
  3309                           ;main.c: 62: PROTOCOL_Loop();
  3310  0D9A  3182  2256         	fcall	_PROTOCOL_Loop
  3311  0D9C  3180  2848         	ljmp	start
  3312  0D9E                     __end_of_main:	
  3313                           
  3314                           	psect	text1
  3315  07FC                     __ptext1:	
  3316 ;; *************** function _WDT_Initialize *****************
  3317 ;; Defined at:
  3318 ;;		line 89 in file "mcc_generated_files/mcc.c"
  3319 ;; Parameters:    Size  Location     Type
  3320 ;;		None
  3321 ;; Auto vars:     Size  Location     Type
  3322 ;;		None
  3323 ;; Return value:  Size  Location     Type
  3324 ;;                  1    wreg      void 
  3325 ;; Registers used:
  3326 ;;		wreg
  3327 ;; Tracked objects:
  3328 ;;		On entry : 0/0
  3329 ;;		On exit  : 0/0
  3330 ;;		Unchanged: 0/0
  3331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3333 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3335 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3336 ;;Total ram usage:        0 bytes
  3337 ;; Hardware stack levels used:    1
  3338 ;; Hardware stack levels required when called:    5
  3339 ;; This function calls:
  3340 ;;		Nothing
  3341 ;; This function is called by:
  3342 ;;		_main
  3343 ;;		_SYSTEM_Initialize
  3344 ;; This function uses a non-reentrant model
  3345 ;;
  3346                           
  3347                           
  3348                           ;psect for function _WDT_Initialize
  3349  07FC                     _WDT_Initialize:	
  3350                           
  3351                           ;mcc.c: 92: WDTCON = 0x16;
  3352                           
  3353                           ;incstack = 0
  3354                           ; Regs used in _WDT_Initialize: [wreg]
  3355  07FC  3016               	movlw	22
  3356  07FD  0021               	movlb	1	; select bank1
  3357  07FE  0097               	movwf	23	;volatile
  3358  07FF  0008               	return
  3359  0800                     __end_of_WDT_Initialize:	
  3360                           
  3361                           	psect	text2
  3362  0A7F                     __ptext2:	
  3363 ;; *************** function _TMR0_Initialize *****************
  3364 ;; Defined at:
  3365 ;;		line 62 in file "mcc_generated_files/tmr0.c"
  3366 ;; Parameters:    Size  Location     Type
  3367 ;;		None
  3368 ;; Auto vars:     Size  Location     Type
  3369 ;;		None
  3370 ;; Return value:  Size  Location     Type
  3371 ;;                  1    wreg      void 
  3372 ;; Registers used:
  3373 ;;		wreg, status,2
  3374 ;; Tracked objects:
  3375 ;;		On entry : 0/0
  3376 ;;		On exit  : 0/0
  3377 ;;		Unchanged: 0/0
  3378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3380 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3381 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3382 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3383 ;;Total ram usage:        1 bytes
  3384 ;; Hardware stack levels used:    1
  3385 ;; Hardware stack levels required when called:    5
  3386 ;; This function calls:
  3387 ;;		Nothing
  3388 ;; This function is called by:
  3389 ;;		_main
  3390 ;;		_SYSTEM_Initialize
  3391 ;; This function uses a non-reentrant model
  3392 ;;
  3393                           
  3394                           
  3395                           ;psect for function _TMR0_Initialize
  3396  0A7F                     _TMR0_Initialize:	
  3397                           
  3398                           ;tmr0.c: 67: OPTION_REG = (OPTION_REG & 0xC0) | 0xD4 & 0x3F;
  3399                           
  3400                           ;incstack = 0
  3401                           ; Regs used in _TMR0_Initialize: [wreg+status,2]
  3402  0A7F  0021               	movlb	1	; select bank1
  3403  0A80  0815               	movf	21,w	;volatile
  3404  0A81  39C0               	andlw	192
  3405  0A82  3814               	iorlw	20
  3406  0A83  0095               	movwf	21	;volatile
  3407                           
  3408                           ;tmr0.c: 70: TMR0 = 0x06;
  3409  0A84  3006               	movlw	6
  3410  0A85  0020               	movlb	0	; select bank0
  3411  0A86  0095               	movwf	21	;volatile
  3412                           
  3413                           ;tmr0.c: 73: timer0ReloadVal= 6;
  3414  0A87  3006               	movlw	6
  3415  0A88  00A1               	movwf	??_TMR0_Initialize
  3416  0A89  0821               	movf	??_TMR0_Initialize,w
  3417  0A8A  0021               	movlb	1	; select bank1
  3418  0A8B  00C4               	movwf	_timer0ReloadVal^(0+128)	;volatile
  3419                           
  3420                           ;tmr0.c: 76: INTCONbits.TMR0IF = 0;
  3421  0A8C  110B               	bcf	11,2	;volatile
  3422  0A8D  0008               	return
  3423  0A8E                     __end_of_TMR0_Initialize:	
  3424                           
  3425                           	psect	text3
  3426  0256                     __ptext3:	
  3427 ;; *************** function _PROTOCOL_Loop *****************
  3428 ;; Defined at:
  3429 ;;		line 131 in file "protocol.c"
  3430 ;; Parameters:    Size  Location     Type
  3431 ;;		None
  3432 ;; Auto vars:     Size  Location     Type
  3433 ;;  device_addre    1    1[BANK2 ] unsigned char 
  3434 ;;  c               1    0[BANK2 ] unsigned char 
  3435 ;; Return value:  Size  Location     Type
  3436 ;;                  1    wreg      void 
  3437 ;; Registers used:
  3438 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3439 ;; Tracked objects:
  3440 ;;		On entry : 0/0
  3441 ;;		On exit  : 0/0
  3442 ;;		Unchanged: 0/0
  3443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3445 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0
  3446 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3447 ;;      Totals:         0       2       0       2       0       0       0       0       0       0       0       0       
      +0       0
  3448 ;;Total ram usage:        4 bytes
  3449 ;; Hardware stack levels used:    1
  3450 ;; Hardware stack levels required when called:   10
  3451 ;; This function calls:
  3452 ;;		Absolute function
  3453 ;;		_EUSART_Read
  3454 ;;		_PROTOCOL_EXT
  3455 ;;		_PROTOCOL_Read_Device_Address
  3456 ;;		_PROTOCOL_SAV
  3457 ;;		_PROTOCOL_SET
  3458 ;;		_PROTOCOL_STA
  3459 ;;		_PROTOCOL_STP
  3460 ;;		_PROTOCOL_Write_Device_Address
  3461 ;;		_TMR0_HasOverflowOccured
  3462 ;;		_atoi
  3463 ;;		_inv_handler
  3464 ;;		_printf
  3465 ;;		_strncmp
  3466 ;; This function is called by:
  3467 ;;		_main
  3468 ;; This function uses a non-reentrant model
  3469 ;;
  3470                           
  3471                           
  3472                           ;psect for function _PROTOCOL_Loop
  3473  0256                     _PROTOCOL_Loop:	
  3474  0256                     l741:	
  3475                           ;incstack = 0
  3476                           ; Regs used in _PROTOCOL_Loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3477                           ;protocol.c: 132: uint8_t device_address;
  3478                           ;protocol.c: 133: uint8_t c;
  3479                           ;protocol.c: 134: while (1) {
  3480                           
  3481                           
  3482                           ;protocol.c: 135: tmr_overflow = TMR0_HasOverflowOccured();
  3483  0256  318A  2224  3182   	fcall	_TMR0_HasOverflowOccured
  3484  0259  0020               	movlb	0	; select bank0
  3485  025A  00DD               	movwf	??_PROTOCOL_Loop
  3486  025B  085D               	movf	??_PROTOCOL_Loop,w
  3487  025C  0021               	movlb	1	; select bank1
  3488  025D  00BC               	movwf	_tmr_overflow^(0+128)
  3489                           
  3490                           ;protocol.c: 136: if (tmr_overflow) {
  3491  025E  083C               	movf	_tmr_overflow^(0+128),w
  3492  025F  1903               	btfsc	3,2
  3493  0260  2A83               	goto	l4547
  3494                           
  3495                           ;protocol.c: 137: TMR0IF = 0;
  3496  0261  110B               	bcf	11,2	;volatile
  3497                           
  3498                           ;protocol.c: 138: if (PROTOCOL_Inv_Handler && (++tmr_cnt >= value)) {
  3499  0262  0832               	movf	_PROTOCOL_Inv_Handler^(0+128),w
  3500  0263  0433               	iorwf	(_PROTOCOL_Inv_Handler+1)^(0+128),w
  3501  0264  1903               	btfsc	3,2
  3502  0265  2A83               	goto	l4547
  3503  0266  3001               	movlw	1
  3504  0267  0020               	movlb	0	; select bank0
  3505  0268  00DD               	movwf	??_PROTOCOL_Loop
  3506  0269  085D               	movf	??_PROTOCOL_Loop,w
  3507  026A  0021               	movlb	1	; select bank1
  3508  026B  07BD               	addwf	_tmr_cnt^(0+128),f
  3509  026C  0020               	movlb	0	; select bank0
  3510  026D  0866               	movf	_value,w
  3511  026E  0021               	movlb	1	; select bank1
  3512  026F  023D               	subwf	_tmr_cnt^(0+128),w
  3513  0270  1C03               	skipc
  3514  0271  2A83               	goto	l4547
  3515                           
  3516                           ;protocol.c: 139: tmr_cnt = 0;
  3517  0272  01BD               	clrf	_tmr_cnt^(0+128)
  3518                           
  3519                           ;protocol.c: 140: if (++sec_cnt >= tmr_scaler) {
  3520  0273  3001               	movlw	1
  3521  0274  0020               	movlb	0	; select bank0
  3522  0275  00DD               	movwf	??_PROTOCOL_Loop
  3523  0276  085D               	movf	??_PROTOCOL_Loop,w
  3524  0277  0021               	movlb	1	; select bank1
  3525  0278  07BE               	addwf	_sec_cnt^(0+128),f
  3526  0279  086D               	movf	_tmr_scaler^(0+128),w
  3527  027A  023E               	subwf	_sec_cnt^(0+128),w
  3528  027B  1C03               	skipc
  3529  027C  2A83               	goto	l4547
  3530                           
  3531                           ;protocol.c: 141: if (running) invoked = 1;
  3532  027D  0840               	movf	_running^(0+128),w
  3533  027E  1903               	btfsc	3,2
  3534  027F  2A82               	goto	l4545
  3535  0280  01BF               	clrf	_invoked^(0+128)
  3536  0281  0ABF               	incf	_invoked^(0+128),f
  3537  0282                     l4545:	
  3538                           
  3539                           ;protocol.c: 142: sec_cnt = 0;
  3540  0282  01BE               	clrf	_sec_cnt^(0+128)
  3541  0283                     l4547:	
  3542                           
  3543                           ;protocol.c: 143: }
  3544                           ;protocol.c: 144: }
  3545                           ;protocol.c: 145: }
  3546                           ;protocol.c: 146: if (invoked && PROTOCOL_Inv_Handler) {
  3547  0283  083F               	movf	_invoked^(0+128),w
  3548  0284  1903               	btfsc	3,2
  3549  0285  2A91               	goto	l4557
  3550  0286  0832               	movf	_PROTOCOL_Inv_Handler^(0+128),w
  3551  0287  0433               	iorwf	(_PROTOCOL_Inv_Handler+1)^(0+128),w
  3552  0288  1903               	btfsc	3,2
  3553  0289  2A91               	goto	l4557
  3554                           
  3555                           ;protocol.c: 147: PROTOCOL_Inv_Handler();
  3556  028A  0833               	movf	(_PROTOCOL_Inv_Handler+1)^(0+128),w
  3557  028B  008A               	movwf	10
  3558  028C  0832               	movf	_PROTOCOL_Inv_Handler^(0+128),w
  3559  028D  000A               	callw
  3560  028E  3182               	pagesel	$
  3561                           
  3562                           ;protocol.c: 148: invoked = 0;
  3563  028F  0021               	movlb	1	; select bank1
  3564  0290  01BF               	clrf	_invoked^(0+128)
  3565  0291                     l4557:	
  3566                           
  3567                           ;protocol.c: 151: if ((eusartRxCount)) {
  3568  0291  0020               	movlb	0	; select bank0
  3569  0292  0867               	movf	_eusartRxCount,w	;volatile
  3570  0293  1903               	btfsc	3,2
  3571  0294  2A56               	goto	l741
  3572                           
  3573                           ;protocol.c: 152: c = EUSART_Read();
  3574  0295  318B  2388  3182   	fcall	_EUSART_Read
  3575  0298  0020               	movlb	0	; select bank0
  3576  0299  00DD               	movwf	??_PROTOCOL_Loop
  3577  029A  085D               	movf	??_PROTOCOL_Loop,w
  3578  029B  0022               	movlb	2	; select bank2
  3579  029C  00E2               	movwf	PROTOCOL_Loop@c^(0+256)
  3580                           
  3581                           ;protocol.c: 153: buf[cnt++] = c;
  3582  029D  0862               	movf	PROTOCOL_Loop@c^(0+256),w
  3583  029E  0020               	movlb	0	; select bank0
  3584  029F  00DD               	movwf	??_PROTOCOL_Loop
  3585  02A0  0021               	movlb	1	; select bank1
  3586  02A1  0842               	movf	_cnt^(0+128),w
  3587  02A2  3E20               	addlw	(low (_buf| (0+256)))& (0+255)
  3588  02A3  0086               	movwf	6
  3589  02A4  3001               	movlw	1	; select bank2/3
  3590  02A5  0087               	movwf	7
  3591  02A6  0020               	movlb	0	; select bank0
  3592  02A7  085D               	movf	??_PROTOCOL_Loop,w
  3593  02A8  0081               	movwf	1
  3594  02A9  3001               	movlw	1
  3595  02AA  00DD               	movwf	??_PROTOCOL_Loop
  3596  02AB  085D               	movf	??_PROTOCOL_Loop,w
  3597  02AC  0021               	movlb	1	; select bank1
  3598  02AD  07C2               	addwf	_cnt^(0+128),f
  3599                           
  3600                           ;protocol.c: 154: if (c == '\n') {
  3601  02AE  300A               	movlw	10
  3602  02AF  0022               	movlb	2	; select bank2
  3603  02B0  0662               	xorwf	PROTOCOL_Loop@c^(0+256),w
  3604  02B1  1D03               	btfss	3,2
  3605  02B2  2A56               	goto	l741
  3606                           
  3607                           ;protocol.c: 155: buf[--cnt] = '\0';
  3608  02B3  3001               	movlw	1
  3609  02B4  0021               	movlb	1	; select bank1
  3610  02B5  02C2               	subwf	_cnt^(0+128),f
  3611  02B6  0842               	movf	_cnt^(0+128),w
  3612  02B7  3E20               	addlw	(low (_buf| (0+256)))& (0+255)
  3613  02B8  0086               	movwf	6
  3614  02B9  3001               	movlw	1	; select bank2/3
  3615  02BA  0087               	movwf	7
  3616  02BB  0181               	clrf	1
  3617                           
  3618                           ;protocol.c: 156: cnt = 0;
  3619  02BC  01C2               	clrf	_cnt^(0+128)
  3620                           
  3621                           ;protocol.c: 157: printf("#%s\n", buf);
  3622  02BD  3056               	movlw	low (STR_3| (0+32768))
  3623  02BE  0020               	movlb	0	; select bank0
  3624  02BF  00AF               	movwf	printf@f
  3625  02C0  3087               	movlw	high (STR_3| (0+32768))
  3626  02C1  00B0               	movwf	printf@f+1
  3627  02C2  3020               	movlw	low _buf
  3628  02C3  00B1               	movwf	low ((?_printf| 0+2))
  3629  02C4  3001               	movlw	high _buf
  3630  02C5  00B2               	movwf	(low ((?_printf| 0+2))+1)
  3631  02C6  3180  2081  3182   	fcall	_printf
  3632                           
  3633                           ;protocol.c: 159: PROTOCOL_Extension_Handler(buf);
  3634  02C9  0021               	movlb	1	; select bank1
  3635  02CA  036E               	decf	_BACKPLANE_SLAVE_ADDRESS^(0+128),w
  3636  02CB  1D03               	btfss	3,2
  3637  02CC  2A56               	goto	l741
  3638                           
  3639                           ;protocol.c: 160: } else if (!strncmp(("WHO"), (buf), 3)) {
  3640  02CD  3077               	movlw	low (STR_4| (0+32768))
  3641  02CE  0020               	movlb	0	; select bank0
  3642  02CF  00A1               	movwf	strncmp@s1
  3643  02D0  3087               	movlw	high (STR_4| (0+32768))
  3644  02D1  00A2               	movwf	strncmp@s1+1
  3645  02D2  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3646  02D3  00DD               	movwf	??_PROTOCOL_Loop
  3647  02D4  085D               	movf	??_PROTOCOL_Loop,w
  3648  02D5  00A3               	movwf	strncmp@s2
  3649  02D6  3003               	movlw	3
  3650  02D7  00A4               	movwf	strncmp@len
  3651  02D8  3000               	movlw	0
  3652  02D9  00A5               	movwf	strncmp@len+1
  3653  02DA  318E  2603  3182   	fcall	_strncmp
  3654  02DD  0020               	movlb	0	; select bank0
  3655  02DE  0821               	movf	?_strncmp,w
  3656  02DF  0422               	iorwf	?_strncmp+1,w
  3657  02E0  1D03               	btfss	3,2
  3658  02E1  2AF2               	goto	l4581
  3659                           
  3660                           ;protocol.c: 161: printf("$:WHO:%s\n", device_id_);
  3661  02E2  30FE               	movlw	low (STR_5| (0+32768))
  3662  02E3  00AF               	movwf	printf@f
  3663  02E4  3086               	movlw	high (STR_5| (0+32768))
  3664  02E5  00B0               	movwf	printf@f+1
  3665  02E6  0022               	movlb	2	; select bank2
  3666  02E7  0861               	movf	(_device_id_+1)^(0+256),w
  3667  02E8  0020               	movlb	0	; select bank0
  3668  02E9  00B2               	movwf	(low ((?_printf| 0+2))+1)
  3669  02EA  0022               	movlb	2	; select bank2
  3670  02EB  0860               	movf	_device_id_^(0+256),w
  3671  02EC  0020               	movlb	0	; select bank0
  3672  02ED  00B1               	movwf	low ((?_printf| 0+2))
  3673  02EE  3180  2081  3182   	fcall	_printf
  3674                           
  3675                           ;protocol.c: 162: } else if (!strncmp(("SAV"), (buf), 3)) {
  3676  02F1  2A56               	goto	l741
  3677  02F2                     l4581:	
  3678  02F2  3087               	movlw	low (STR_6| (0+32768))
  3679  02F3  0020               	movlb	0	; select bank0
  3680  02F4  00A1               	movwf	strncmp@s1
  3681  02F5  3087               	movlw	high (STR_6| (0+32768))
  3682  02F6  00A2               	movwf	strncmp@s1+1
  3683  02F7  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3684  02F8  00DD               	movwf	??_PROTOCOL_Loop
  3685  02F9  085D               	movf	??_PROTOCOL_Loop,w
  3686  02FA  00A3               	movwf	strncmp@s2
  3687  02FB  3003               	movlw	3
  3688  02FC  00A4               	movwf	strncmp@len
  3689  02FD  3000               	movlw	0
  3690  02FE  00A5               	movwf	strncmp@len+1
  3691  02FF  318E  2603  3182   	fcall	_strncmp
  3692  0302  0020               	movlb	0	; select bank0
  3693  0303  0821               	movf	?_strncmp,w
  3694  0304  0422               	iorwf	?_strncmp+1,w
  3695  0305  1D03               	btfss	3,2
  3696  0306  2B0B               	goto	l4585
  3697                           
  3698                           ;protocol.c: 163: PROTOCOL_SAV();
  3699  0307  318A  2250  3182   	fcall	_PROTOCOL_SAV
  3700                           
  3701                           ;protocol.c: 164: } else if (!strncmp(("STA"), (buf), 3)) {
  3702  030A  2A56               	goto	l741
  3703  030B                     l4585:	
  3704  030B  306F               	movlw	low (STR_7| (0+32768))
  3705  030C  0020               	movlb	0	; select bank0
  3706  030D  00A1               	movwf	strncmp@s1
  3707  030E  3087               	movlw	high (STR_7| (0+32768))
  3708  030F  00A2               	movwf	strncmp@s1+1
  3709  0310  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3710  0311  00DD               	movwf	??_PROTOCOL_Loop
  3711  0312  085D               	movf	??_PROTOCOL_Loop,w
  3712  0313  00A3               	movwf	strncmp@s2
  3713  0314  3003               	movlw	3
  3714  0315  00A4               	movwf	strncmp@len
  3715  0316  3000               	movlw	0
  3716  0317  00A5               	movwf	strncmp@len+1
  3717  0318  318E  2603  3182   	fcall	_strncmp
  3718  031B  0020               	movlb	0	; select bank0
  3719  031C  0821               	movf	?_strncmp,w
  3720  031D  0422               	iorwf	?_strncmp+1,w
  3721  031E  1D03               	btfss	3,2
  3722  031F  2B24               	goto	l4589
  3723                           
  3724                           ;protocol.c: 165: PROTOCOL_STA();
  3725  0320  318A  2220  3182   	fcall	_PROTOCOL_STA
  3726                           
  3727                           ;protocol.c: 166: } else if (!strncmp(("STP"), (buf), 3)) {
  3728  0323  2A56               	goto	l741
  3729  0324                     l4589:	
  3730  0324  307B               	movlw	low (STR_8| (0+32768))
  3731  0325  0020               	movlb	0	; select bank0
  3732  0326  00A1               	movwf	strncmp@s1
  3733  0327  3087               	movlw	high (STR_8| (0+32768))
  3734  0328  00A2               	movwf	strncmp@s1+1
  3735  0329  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3736  032A  00DD               	movwf	??_PROTOCOL_Loop
  3737  032B  085D               	movf	??_PROTOCOL_Loop,w
  3738  032C  00A3               	movwf	strncmp@s2
  3739  032D  3003               	movlw	3
  3740  032E  00A4               	movwf	strncmp@len
  3741  032F  3000               	movlw	0
  3742  0330  00A5               	movwf	strncmp@len+1
  3743  0331  318E  2603  3182   	fcall	_strncmp
  3744  0334  0020               	movlb	0	; select bank0
  3745  0335  0821               	movf	?_strncmp,w
  3746  0336  0422               	iorwf	?_strncmp+1,w
  3747  0337  1D03               	btfss	3,2
  3748  0338  2B49               	goto	l4595
  3749                           
  3750                           ;protocol.c: 167: PROTOCOL_STP();
  3751  0339  318A  220E  3182   	fcall	_PROTOCOL_STP
  3752                           
  3753                           ;protocol.c: 168: printf("*:STP:%s\n", "ACK");
  3754  033C  3008               	movlw	low (STR_9| (0+32768))
  3755  033D  0020               	movlb	0	; select bank0
  3756  033E  00AF               	movwf	printf@f
  3757  033F  3087               	movlw	high (STR_9| (0+32768))
  3758  0340  00B0               	movwf	printf@f+1
  3759  0341  3073               	movlw	low (STR_10| (0+32768))
  3760  0342  00B1               	movwf	low ((?_printf| 0+2))
  3761  0343  3087               	movlw	high (STR_10| (0+32768))
  3762  0344  00B2               	movwf	(low ((?_printf| 0+2))+1)
  3763  0345  3180  2081  3182   	fcall	_printf
  3764                           
  3765                           ;protocol.c: 169: } else if (!strncmp(("SET"), (buf), 3)) {
  3766  0348  2A56               	goto	l741
  3767  0349                     l4595:	
  3768  0349  3083               	movlw	low (STR_11| (0+32768))
  3769  034A  0020               	movlb	0	; select bank0
  3770  034B  00A1               	movwf	strncmp@s1
  3771  034C  3087               	movlw	high (STR_11| (0+32768))
  3772  034D  00A2               	movwf	strncmp@s1+1
  3773  034E  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3774  034F  00DD               	movwf	??_PROTOCOL_Loop
  3775  0350  085D               	movf	??_PROTOCOL_Loop,w
  3776  0351  00A3               	movwf	strncmp@s2
  3777  0352  3003               	movlw	3
  3778  0353  00A4               	movwf	strncmp@len
  3779  0354  3000               	movlw	0
  3780  0355  00A5               	movwf	strncmp@len+1
  3781  0356  318E  2603  3182   	fcall	_strncmp
  3782  0359  0020               	movlb	0	; select bank0
  3783  035A  0821               	movf	?_strncmp,w
  3784  035B  0422               	iorwf	?_strncmp+1,w
  3785  035C  1D03               	btfss	3,2
  3786  035D  2B68               	goto	l4599
  3787                           
  3788                           ;protocol.c: 170: PROTOCOL_SET(atoi(&buf[4]));
  3789  035E  3024               	movlw	(low ((_buf| (0+256)+4)))& (0+255)
  3790  035F  3187  278B  3182   	fcall	_atoi
  3791  0362  0020               	movlb	0	; select bank0
  3792  0363  0827               	movf	?_atoi,w
  3793  0364  318A  2240  3182   	fcall	_PROTOCOL_SET
  3794                           
  3795                           ;protocol.c: 171: } else if (!strncmp(("GET"), (buf), 3)) {
  3796  0367  2A56               	goto	l741
  3797  0368                     l4599:	
  3798  0368  307F               	movlw	low (STR_12| (0+32768))
  3799  0369  0020               	movlb	0	; select bank0
  3800  036A  00A1               	movwf	strncmp@s1
  3801  036B  3087               	movlw	high (STR_12| (0+32768))
  3802  036C  00A2               	movwf	strncmp@s1+1
  3803  036D  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3804  036E  00DD               	movwf	??_PROTOCOL_Loop
  3805  036F  085D               	movf	??_PROTOCOL_Loop,w
  3806  0370  00A3               	movwf	strncmp@s2
  3807  0371  3003               	movlw	3
  3808  0372  00A4               	movwf	strncmp@len
  3809  0373  3000               	movlw	0
  3810  0374  00A5               	movwf	strncmp@len+1
  3811  0375  318E  2603  3182   	fcall	_strncmp
  3812  0378  0020               	movlb	0	; select bank0
  3813  0379  0821               	movf	?_strncmp,w
  3814  037A  0422               	iorwf	?_strncmp+1,w
  3815  037B  1D03               	btfss	3,2
  3816  037C  2B8C               	goto	l4603
  3817                           
  3818                           ;protocol.c: 172: printf("$:GET:%d\n", value);
  3819  037D  30EA               	movlw	low (STR_13| (0+32768))
  3820  037E  00AF               	movwf	printf@f
  3821  037F  3086               	movlw	high (STR_13| (0+32768))
  3822  0380  00B0               	movwf	printf@f+1
  3823  0381  0866               	movf	_value,w
  3824  0382  00DD               	movwf	??_PROTOCOL_Loop
  3825  0383  01DE               	clrf	??_PROTOCOL_Loop+1
  3826  0384  085D               	movf	??_PROTOCOL_Loop,w
  3827  0385  00B1               	movwf	?_printf+2
  3828  0386  085E               	movf	??_PROTOCOL_Loop+1,w
  3829  0387  00B2               	movwf	?_printf+3
  3830  0388  3180  2081  3182   	fcall	_printf
  3831                           
  3832                           ;protocol.c: 173: } else if (!strncmp(("WDA"), (buf), 3)) {
  3833  038B  2A56               	goto	l741
  3834  038C                     l4603:	
  3835  038C  306B               	movlw	low (STR_14| (0+32768))
  3836  038D  0020               	movlb	0	; select bank0
  3837  038E  00A1               	movwf	strncmp@s1
  3838  038F  3087               	movlw	high (STR_14| (0+32768))
  3839  0390  00A2               	movwf	strncmp@s1+1
  3840  0391  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3841  0392  00DD               	movwf	??_PROTOCOL_Loop
  3842  0393  085D               	movf	??_PROTOCOL_Loop,w
  3843  0394  00A3               	movwf	strncmp@s2
  3844  0395  3003               	movlw	3
  3845  0396  00A4               	movwf	strncmp@len
  3846  0397  3000               	movlw	0
  3847  0398  00A5               	movwf	strncmp@len+1
  3848  0399  318E  2603  3182   	fcall	_strncmp
  3849  039C  0020               	movlb	0	; select bank0
  3850  039D  0821               	movf	?_strncmp,w
  3851  039E  0422               	iorwf	?_strncmp+1,w
  3852  039F  1D03               	btfss	3,2
  3853  03A0  2BB0               	goto	l4609
  3854                           
  3855                           ;protocol.c: 174: device_address = atoi(&buf[4]);
  3856  03A1  3024               	movlw	(low ((_buf| (0+256)+4)))& (0+255)
  3857  03A2  3187  278B  3182   	fcall	_atoi
  3858  03A5  0020               	movlb	0	; select bank0
  3859  03A6  0827               	movf	?_atoi,w
  3860  03A7  00DD               	movwf	??_PROTOCOL_Loop
  3861  03A8  085D               	movf	??_PROTOCOL_Loop,w
  3862  03A9  0022               	movlb	2	; select bank2
  3863  03AA  00E3               	movwf	PROTOCOL_Loop@device_address^(0+256)
  3864                           
  3865                           ;protocol.c: 175: PROTOCOL_Write_Device_Address(device_address);
  3866  03AB  0863               	movf	PROTOCOL_Loop@device_address^(0+256),w
  3867  03AC  318A  228E  3182   	fcall	_PROTOCOL_Write_Device_Address
  3868                           
  3869                           ;protocol.c: 176: } else if (!strncmp(("RDA"), (buf), 3)) {
  3870  03AF  2A56               	goto	l741
  3871  03B0                     l4609:	
  3872  03B0  3067               	movlw	low (STR_15| (0+32768))
  3873  03B1  0020               	movlb	0	; select bank0
  3874  03B2  00A1               	movwf	strncmp@s1
  3875  03B3  3087               	movlw	high (STR_15| (0+32768))
  3876  03B4  00A2               	movwf	strncmp@s1+1
  3877  03B5  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3878  03B6  00DD               	movwf	??_PROTOCOL_Loop
  3879  03B7  085D               	movf	??_PROTOCOL_Loop,w
  3880  03B8  00A3               	movwf	strncmp@s2
  3881  03B9  3003               	movlw	3
  3882  03BA  00A4               	movwf	strncmp@len
  3883  03BB  3000               	movlw	0
  3884  03BC  00A5               	movwf	strncmp@len+1
  3885  03BD  318E  2603  3182   	fcall	_strncmp
  3886  03C0  0020               	movlb	0	; select bank0
  3887  03C1  0821               	movf	?_strncmp,w
  3888  03C2  0422               	iorwf	?_strncmp+1,w
  3889  03C3  1D03               	btfss	3,2
  3890  03C4  2BDF               	goto	l4615
  3891                           
  3892                           ;protocol.c: 177: device_address = PROTOCOL_Read_Device_Address();
  3893  03C5  318A  220B  3182   	fcall	_PROTOCOL_Read_Device_Address
  3894  03C8  0020               	movlb	0	; select bank0
  3895  03C9  00DD               	movwf	??_PROTOCOL_Loop
  3896  03CA  085D               	movf	??_PROTOCOL_Loop,w
  3897  03CB  0022               	movlb	2	; select bank2
  3898  03CC  00E3               	movwf	PROTOCOL_Loop@device_address^(0+256)
  3899                           
  3900                           ;protocol.c: 178: printf("$:RDA:%d\n", device_address);
  3901  03CD  30E0               	movlw	low (STR_16| (0+32768))
  3902  03CE  0020               	movlb	0	; select bank0
  3903  03CF  00AF               	movwf	printf@f
  3904  03D0  3086               	movlw	high (STR_16| (0+32768))
  3905  03D1  00B0               	movwf	printf@f+1
  3906  03D2  0022               	movlb	2	; select bank2
  3907  03D3  0863               	movf	PROTOCOL_Loop@device_address^(0+256),w
  3908  03D4  0020               	movlb	0	; select bank0
  3909  03D5  00DD               	movwf	??_PROTOCOL_Loop
  3910  03D6  01DE               	clrf	??_PROTOCOL_Loop+1
  3911  03D7  085D               	movf	??_PROTOCOL_Loop,w
  3912  03D8  00B1               	movwf	?_printf+2
  3913  03D9  085E               	movf	??_PROTOCOL_Loop+1,w
  3914  03DA  00B2               	movwf	?_printf+3
  3915  03DB  3180  2081  3182   	fcall	_printf
  3916                           
  3917                           ;protocol.c: 179: }
  3918  03DE  2A56               	goto	l741
  3919  03DF                     l4615:	
  3920                           
  3921                           ;protocol.c: 180: else {
  3922                           ;protocol.c: 181: PROTOCOL_EXT(buf);
  3923  03DF  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3924  03E0  3180  2002  3182   	fcall	_PROTOCOL_EXT
  3925  03E3  2A56               	goto	l741
  3926  03E4                     __end_of_PROTOCOL_Loop:	
  3927                           
  3928                           	psect	text4
  3929  0E03                     __ptext4:	
  3930 ;; *************** function _strncmp *****************
  3931 ;; Defined at:
  3932 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strncmp.c"
  3933 ;; Parameters:    Size  Location     Type
  3934 ;;  s1              2    1[BANK0 ] PTR const unsigned char 
  3935 ;;		 -> STR_15(4), STR_14(4), STR_12(4), STR_11(4), 
  3936 ;;		 -> STR_8(4), STR_7(4), STR_6(4), STR_4(4), 
  3937 ;;  s2              1    3[BANK0 ] PTR const unsigned char 
  3938 ;;		 -> buf(48), 
  3939 ;;  len             2    4[BANK0 ] unsigned int 
  3940 ;; Auto vars:     Size  Location     Type
  3941 ;;		None
  3942 ;; Return value:  Size  Location     Type
  3943 ;;                  2    1[BANK0 ] int 
  3944 ;; Registers used:
  3945 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  3946 ;; Tracked objects:
  3947 ;;		On entry : 0/0
  3948 ;;		On exit  : 0/0
  3949 ;;		Unchanged: 0/0
  3950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3951 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3952 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3953 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3954 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3955 ;;Total ram usage:        7 bytes
  3956 ;; Hardware stack levels used:    1
  3957 ;; Hardware stack levels required when called:    5
  3958 ;; This function calls:
  3959 ;;		Nothing
  3960 ;; This function is called by:
  3961 ;;		_PROTOCOL_Loop
  3962 ;; This function uses a non-reentrant model
  3963 ;;
  3964                           
  3965                           
  3966                           ;psect for function _strncmp
  3967  0E03                     _strncmp:	
  3968  0E03                     l4475:	
  3969                           ;incstack = 0
  3970                           ; Regs used in _strncmp: [wreg-fsr1h+status,2+status,0+pclath]
  3971                           
  3972  0E03  3001               	movlw	1
  3973  0E04  0020               	movlb	0	; select bank0
  3974  0E05  02A4               	subwf	strncmp@len,f
  3975  0E06  3000               	movlw	0
  3976  0E07  3BA5               	subwfb	strncmp@len+1,f
  3977  0E08  0A24               	incf	strncmp@len,w
  3978  0E09  1903               	btfsc	3,2
  3979  0E0A  0A25               	incf	strncmp@len+1,w
  3980  0E0B  1903               	btfsc	3,2
  3981  0E0C  2E42               	goto	l4477
  3982  0E0D  0020               	movlb	0	; select bank0
  3983  0E0E  0821               	movf	strncmp@s1,w
  3984  0E0F  0084               	movwf	4
  3985  0E10  0822               	movf	strncmp@s1+1,w
  3986  0E11  0085               	movwf	5
  3987  0E12  0012               	moviw fsr0++
  3988  0E13  1903               	btfsc	3,2
  3989  0E14  2E21               	goto	l4467
  3990  0E15  0823               	movf	strncmp@s2,w
  3991  0E16  0086               	movwf	6
  3992  0E17  3001               	movlw	1	; select bank2/3
  3993  0E18  0087               	movwf	7
  3994  0E19  0821               	movf	strncmp@s1,w
  3995  0E1A  0084               	movwf	4
  3996  0E1B  0822               	movf	strncmp@s1+1,w
  3997  0E1C  0085               	movwf	5
  3998  0E1D  0800               	movf	0,w	;code access
  3999  0E1E  0601               	xorwf	1,w
  4000  0E1F  1903               	skipnz
  4001  0E20  2E39               	goto	l4471
  4002  0E21                     l4467:	
  4003  0E21  0823               	movf	strncmp@s2,w
  4004  0E22  0086               	movwf	6
  4005  0E23  3001               	movlw	1	; select bank2/3
  4006  0E24  0087               	movwf	7
  4007  0E25  0801               	movf	1,w
  4008  0E26  00A6               	movwf	??_strncmp
  4009  0E27  01A7               	clrf	??_strncmp+1
  4010  0E28  09A6               	comf	??_strncmp,f
  4011  0E29  09A7               	comf	??_strncmp+1,f
  4012  0E2A  0AA6               	incf	??_strncmp,f
  4013  0E2B  1903               	skipnz
  4014  0E2C  0AA7               	incf	??_strncmp+1,f
  4015  0E2D  0821               	movf	strncmp@s1,w
  4016  0E2E  0084               	movwf	4
  4017  0E2F  0822               	movf	strncmp@s1+1,w
  4018  0E30  0085               	movwf	5
  4019  0E31  0800               	movf	0,w	;code access
  4020  0E32  0726               	addwf	??_strncmp,w
  4021  0E33  00A1               	movwf	?_strncmp
  4022  0E34  0827               	movf	??_strncmp+1,w
  4023  0E35  1803               	skipnc
  4024  0E36  0A27               	incf	??_strncmp+1,w
  4025  0E37  00A2               	movwf	?_strncmp+1
  4026  0E38  0008               	return
  4027  0E39                     l4471:	
  4028  0E39  3001               	movlw	1
  4029  0E3A  07A1               	addwf	strncmp@s1,f
  4030  0E3B  3000               	movlw	0
  4031  0E3C  3DA2               	addwfc	strncmp@s1+1,f
  4032  0E3D  3001               	movlw	1
  4033  0E3E  00A6               	movwf	??_strncmp
  4034  0E3F  0826               	movf	??_strncmp,w
  4035  0E40  07A3               	addwf	strncmp@s2,f
  4036  0E41  2E03               	goto	l4475
  4037  0E42                     l4477:	
  4038  0E42  01A1               	clrf	?_strncmp
  4039  0E43  01A2               	clrf	?_strncmp+1
  4040  0E44  0008               	return
  4041  0E45                     __end_of_strncmp:	
  4042                           
  4043                           	psect	text5
  4044  05FE                     __ptext5:	
  4045 ;; *************** function _inv_handler *****************
  4046 ;; Defined at:
  4047 ;;		line 15 in file "main.c"
  4048 ;; Parameters:    Size  Location     Type
  4049 ;;		None
  4050 ;; Auto vars:     Size  Location     Type
  4051 ;;  measure         6   45[BANK0 ] unsigned char [6]
  4052 ;;  s_rh            4   55[BANK0 ] long 
  4053 ;;  s_t             4   51[BANK0 ] long 
  4054 ;;  data            2   59[BANK0 ] char [2]
  4055 ;;  status          1   44[BANK0 ] unsigned char 
  4056 ;; Return value:  Size  Location     Type
  4057 ;;                  1    wreg      void 
  4058 ;; Registers used:
  4059 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4060 ;; Tracked objects:
  4061 ;;		On entry : 0/0
  4062 ;;		On exit  : 0/0
  4063 ;;		Unchanged: 0/0
  4064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4066 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4067 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4068 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4069 ;;Total ram usage:       22 bytes
  4070 ;; Hardware stack levels used:    1
  4071 ;; Hardware stack levels required when called:    9
  4072 ;; This function calls:
  4073 ;;		_PROTOCOL_I2C_Send_int8_t
  4074 ;;		___aldiv
  4075 ;;		___lmul
  4076 ;;		_i2c2_read_no_reg_addr
  4077 ;;		_i2c2_write
  4078 ;; This function is called by:
  4079 ;;		_main
  4080 ;;		_PROTOCOL_Loop
  4081 ;; This function uses a non-reentrant model
  4082 ;;
  4083                           
  4084                           
  4085                           ;psect for function _inv_handler
  4086  05FE                     _inv_handler:	
  4087                           
  4088                           ;main.c: 16: uint8_t measure[6];
  4089                           ;main.c: 17: int8_t data[2];
  4090                           ;main.c: 18: int32_t s_t;
  4091                           ;main.c: 19: int32_t s_rh;
  4092                           ;main.c: 20: uint8_t status;
  4093                           ;main.c: 22: LATCbits.LATC7 ^= 1;
  4094                           
  4095                           ;incstack = 0
  4096                           ; Regs used in _inv_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4097  05FE  0022               	movlb	2	; select bank2
  4098  05FF  0D0E               	rlf	14,w	;volatile
  4099  0600  0D0E               	rlf	14,w	;volatile
  4100  0601  3901               	andlw	1
  4101  0602  0020               	movlb	0	; select bank0
  4102  0603  00C7               	movwf	??_inv_handler
  4103  0604  3001               	movlw	1
  4104  0605  06C7               	xorwf	??_inv_handler,f
  4105  0606  0CC7               	rrf	??_inv_handler,f
  4106  0607  0CC7               	rrf	??_inv_handler,f
  4107  0608  0022               	movlb	2	; select bank2
  4108  0609  080E               	movf	14,w	;volatile
  4109  060A  0020               	movlb	0	; select bank0
  4110  060B  0647               	xorwf	??_inv_handler,w
  4111  060C  397F               	andlw	-129
  4112  060D  0647               	xorwf	??_inv_handler,w
  4113  060E  0022               	movlb	2	; select bank2
  4114  060F  008E               	movwf	14	;volatile
  4115                           
  4116                           ;main.c: 25: status = i2c2_write(0x0045, 0x2c, 0x06);
  4117  0610  3045               	movlw	69
  4118  0611  0020               	movlb	0	; select bank0
  4119  0612  00AF               	movwf	i2c2_write@dev_addr
  4120  0613  3000               	movlw	0
  4121  0614  00B0               	movwf	i2c2_write@dev_addr+1
  4122  0615  302C               	movlw	44
  4123  0616  00C7               	movwf	??_inv_handler
  4124  0617  0847               	movf	??_inv_handler,w
  4125  0618  00B1               	movwf	i2c2_write@reg_addr
  4126  0619  3006               	movlw	6
  4127  061A  00C8               	movwf	??_inv_handler+1
  4128  061B  0848               	movf	??_inv_handler+1,w
  4129  061C  00B2               	movwf	i2c2_write@data
  4130  061D  318C  2478  3185   	fcall	_i2c2_write
  4131  0620  0020               	movlb	0	; select bank0
  4132  0621  00C9               	movwf	??_inv_handler+2
  4133  0622  0849               	movf	??_inv_handler+2,w
  4134  0623  00CC               	movwf	inv_handler@status
  4135                           
  4136                           ;main.c: 26: status = i2c2_read_no_reg_addr(0x0045, measure, 6);
  4137  0624  3045               	movlw	69
  4138  0625  00AF               	movwf	i2c2_read_no_reg_addr@dev_addr
  4139  0626  3000               	movlw	0
  4140  0627  00B0               	movwf	i2c2_read_no_reg_addr@dev_addr+1
  4141  0628  304D               	movlw	(low (inv_handler@measure| 0))& (0+255)
  4142  0629  00C7               	movwf	??_inv_handler
  4143  062A  0847               	movf	??_inv_handler,w
  4144  062B  00B1               	movwf	i2c2_read_no_reg_addr@pbuf
  4145  062C  3006               	movlw	6
  4146  062D  00C8               	movwf	??_inv_handler+1
  4147  062E  0848               	movf	??_inv_handler+1,w
  4148  062F  00B2               	movwf	i2c2_read_no_reg_addr@len
  4149  0630  318D  2517  3185   	fcall	_i2c2_read_no_reg_addr
  4150  0633  0020               	movlb	0	; select bank0
  4151  0634  00C9               	movwf	??_inv_handler+2
  4152  0635  0849               	movf	??_inv_handler+2,w
  4153  0636  00CC               	movwf	inv_handler@status
  4154                           
  4155                           ;main.c: 27: s_t = (int32_t)((uint16_t)measure[0] * 256 + (uint16_t)measure[1]);
  4156  0637  084E               	movf	inv_handler@measure+1,w
  4157  0638  00C7               	movwf	??_inv_handler
  4158  0639  01C8               	clrf	??_inv_handler+1
  4159  063A  084D               	movf	inv_handler@measure,w
  4160  063B  00C9               	movwf	??_inv_handler+2
  4161  063C  01CA               	clrf	??_inv_handler+3
  4162  063D  0849               	movf	??_inv_handler+2,w
  4163  063E  00CA               	movwf	??_inv_handler+3
  4164  063F  01C9               	clrf	??_inv_handler+2
  4165  0640  0847               	movf	??_inv_handler,w
  4166  0641  0749               	addwf	??_inv_handler+2,w
  4167  0642  00D3               	movwf	inv_handler@s_t
  4168  0643  0848               	movf	??_inv_handler+1,w
  4169  0644  3D4A               	addwfc	??_inv_handler+3,w
  4170  0645  00D4               	movwf	inv_handler@s_t+1
  4171  0646  01D5               	clrf	inv_handler@s_t+2
  4172  0647  01D6               	clrf	inv_handler@s_t+3
  4173                           
  4174                           ;main.c: 28: s_rh = (int32_t)((uint16_t)measure[3] * 256 + (uint16_t)measure[4]);
  4175  0648  0851               	movf	inv_handler@measure+4,w
  4176  0649  00C7               	movwf	??_inv_handler
  4177  064A  01C8               	clrf	??_inv_handler+1
  4178  064B  0850               	movf	inv_handler@measure+3,w
  4179  064C  00C9               	movwf	??_inv_handler+2
  4180  064D  01CA               	clrf	??_inv_handler+3
  4181  064E  0849               	movf	??_inv_handler+2,w
  4182  064F  00CA               	movwf	??_inv_handler+3
  4183  0650  01C9               	clrf	??_inv_handler+2
  4184  0651  0847               	movf	??_inv_handler,w
  4185  0652  0749               	addwf	??_inv_handler+2,w
  4186  0653  00D7               	movwf	inv_handler@s_rh
  4187  0654  0848               	movf	??_inv_handler+1,w
  4188  0655  3D4A               	addwfc	??_inv_handler+3,w
  4189  0656  00D8               	movwf	inv_handler@s_rh+1
  4190  0657  01D9               	clrf	inv_handler@s_rh+2
  4191  0658  01DA               	clrf	inv_handler@s_rh+3
  4192                           
  4193                           ;main.c: 30: data[0] = (int8_t)(s_t * 175 / RESOLUTION - 45);
  4194  0659  30D0               	movlw	low (_RESOLUTION| (0+32768))
  4195  065A  0084               	movwf	4
  4196  065B  3086               	movlw	high (_RESOLUTION| (0+32768))
  4197  065C  0085               	movwf	5
  4198  065D  3F00               	moviw [0]fsr0
  4199  065E  00C7               	movwf	??_inv_handler
  4200  065F  3F01               	moviw [1]fsr0
  4201  0660  00C8               	movwf	??_inv_handler+1
  4202  0661  0847               	movf	??_inv_handler,w
  4203  0662  00AD               	movwf	___aldiv@divisor
  4204  0663  0848               	movf	??_inv_handler+1,w
  4205  0664  00AE               	movwf	___aldiv@divisor+1
  4206  0665  01AF               	clrf	___aldiv@divisor+2
  4207  0666  01B0               	clrf	___aldiv@divisor+3
  4208  0667  0856               	movf	inv_handler@s_t+3,w
  4209  0668  00A4               	movwf	___lmul@multiplier+3
  4210  0669  0855               	movf	inv_handler@s_t+2,w
  4211  066A  00A3               	movwf	___lmul@multiplier+2
  4212  066B  0854               	movf	inv_handler@s_t+1,w
  4213  066C  00A2               	movwf	___lmul@multiplier+1
  4214  066D  0853               	movf	inv_handler@s_t,w
  4215  066E  00A1               	movwf	___lmul@multiplier
  4216  066F  3000               	movlw	0
  4217  0670  00A8               	movwf	___lmul@multiplicand+3
  4218  0671  3000               	movlw	0
  4219  0672  00A7               	movwf	___lmul@multiplicand+2
  4220  0673  3000               	movlw	0
  4221  0674  00A6               	movwf	___lmul@multiplicand+1
  4222  0675  30AF               	movlw	175
  4223  0676  00A5               	movwf	___lmul@multiplicand
  4224  0677  318D  259E  3185   	fcall	___lmul
  4225  067A  0020               	movlb	0	; select bank0
  4226  067B  0824               	movf	?___lmul+3,w
  4227  067C  00B4               	movwf	___aldiv@dividend+3
  4228  067D  0823               	movf	?___lmul+2,w
  4229  067E  00B3               	movwf	___aldiv@dividend+2
  4230  067F  0822               	movf	?___lmul+1,w
  4231  0680  00B2               	movwf	___aldiv@dividend+1
  4232  0681  0821               	movf	?___lmul,w
  4233  0682  00B1               	movwf	___aldiv@dividend
  4234  0683  318F  277E  3185   	fcall	___aldiv
  4235  0686  0020               	movlb	0	; select bank0
  4236  0687  082D               	movf	?___aldiv,w
  4237  0688  3ED3               	addlw	-45
  4238  0689  00C9               	movwf	??_inv_handler+2
  4239  068A  0849               	movf	??_inv_handler+2,w
  4240  068B  00DB               	movwf	inv_handler@data
  4241                           
  4242                           ;main.c: 31: data[1] = (int8_t)(s_rh * 100 / RESOLUTION);
  4243  068C  30D0               	movlw	low (_RESOLUTION| (0+32768))
  4244  068D  0084               	movwf	4
  4245  068E  3086               	movlw	high (_RESOLUTION| (0+32768))
  4246  068F  0085               	movwf	5
  4247  0690  3F00               	moviw [0]fsr0
  4248  0691  00C7               	movwf	??_inv_handler
  4249  0692  3F01               	moviw [1]fsr0
  4250  0693  00C8               	movwf	??_inv_handler+1
  4251  0694  0847               	movf	??_inv_handler,w
  4252  0695  00AD               	movwf	___aldiv@divisor
  4253  0696  0848               	movf	??_inv_handler+1,w
  4254  0697  00AE               	movwf	___aldiv@divisor+1
  4255  0698  01AF               	clrf	___aldiv@divisor+2
  4256  0699  01B0               	clrf	___aldiv@divisor+3
  4257  069A  085A               	movf	inv_handler@s_rh+3,w
  4258  069B  00A4               	movwf	___lmul@multiplier+3
  4259  069C  0859               	movf	inv_handler@s_rh+2,w
  4260  069D  00A3               	movwf	___lmul@multiplier+2
  4261  069E  0858               	movf	inv_handler@s_rh+1,w
  4262  069F  00A2               	movwf	___lmul@multiplier+1
  4263  06A0  0857               	movf	inv_handler@s_rh,w
  4264  06A1  00A1               	movwf	___lmul@multiplier
  4265  06A2  3000               	movlw	0
  4266  06A3  00A8               	movwf	___lmul@multiplicand+3
  4267  06A4  3000               	movlw	0
  4268  06A5  00A7               	movwf	___lmul@multiplicand+2
  4269  06A6  3000               	movlw	0
  4270  06A7  00A6               	movwf	___lmul@multiplicand+1
  4271  06A8  3064               	movlw	100
  4272  06A9  00A5               	movwf	___lmul@multiplicand
  4273  06AA  318D  259E  3185   	fcall	___lmul
  4274  06AD  0020               	movlb	0	; select bank0
  4275  06AE  0824               	movf	?___lmul+3,w
  4276  06AF  00B4               	movwf	___aldiv@dividend+3
  4277  06B0  0823               	movf	?___lmul+2,w
  4278  06B1  00B3               	movwf	___aldiv@dividend+2
  4279  06B2  0822               	movf	?___lmul+1,w
  4280  06B3  00B2               	movwf	___aldiv@dividend+1
  4281  06B4  0821               	movf	?___lmul,w
  4282  06B5  00B1               	movwf	___aldiv@dividend
  4283  06B6  318F  277E  3185   	fcall	___aldiv
  4284  06B9  0020               	movlb	0	; select bank0
  4285  06BA  082D               	movf	?___aldiv,w
  4286  06BB  00C9               	movwf	??_inv_handler+2
  4287  06BC  0849               	movf	??_inv_handler+2,w
  4288  06BD  00DC               	movwf	inv_handler@data+1
  4289                           
  4290                           ;main.c: 34: PROTOCOL_I2C_Send_int8_t(2, data);
  4291  06BE  305B               	movlw	(low (inv_handler@data| 0))& (0+255)
  4292  06BF  00C7               	movwf	??_inv_handler
  4293  06C0  0847               	movf	??_inv_handler,w
  4294  06C1  00C3               	movwf	PROTOCOL_I2C_Send_int8_t@pbuffer
  4295  06C2  3002               	movlw	2
  4296  06C3  318F  2720         	fcall	_PROTOCOL_I2C_Send_int8_t
  4297  06C5  0008               	return
  4298  06C6                     __end_of_inv_handler:	
  4299                           
  4300                           	psect	text6
  4301  0C78                     __ptext6:	
  4302 ;; *************** function _i2c2_write *****************
  4303 ;; Defined at:
  4304 ;;		line 13 in file "i2c2_util.c"
  4305 ;; Parameters:    Size  Location     Type
  4306 ;;  dev_addr        2   15[BANK0 ] unsigned int 
  4307 ;;  reg_addr        1   17[BANK0 ] unsigned char 
  4308 ;;  data            1   18[BANK0 ] unsigned char 
  4309 ;; Auto vars:     Size  Location     Type
  4310 ;;  buf             2   21[BANK0 ] unsigned char [2]
  4311 ;;  status          1   24[BANK0 ] enum E2979
  4312 ;;  write_status    1   23[BANK0 ] unsigned char 
  4313 ;; Return value:  Size  Location     Type
  4314 ;;                  1    wreg      unsigned char 
  4315 ;; Registers used:
  4316 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4317 ;; Tracked objects:
  4318 ;;		On entry : 0/0
  4319 ;;		On exit  : 0/0
  4320 ;;		Unchanged: 0/0
  4321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4322 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4323 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4324 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4325 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4326 ;;Total ram usage:       10 bytes
  4327 ;; Hardware stack levels used:    1
  4328 ;; Hardware stack levels required when called:    7
  4329 ;; This function calls:
  4330 ;;		_I2C2_MasterWrite
  4331 ;; This function is called by:
  4332 ;;		_inv_handler
  4333 ;; This function uses a non-reentrant model
  4334 ;;
  4335                           
  4336                           
  4337                           ;psect for function _i2c2_write
  4338  0C78                     _i2c2_write:	
  4339                           
  4340                           ;i2c2_util.c: 15: uint8_t buf[2];
  4341                           ;i2c2_util.c: 16: I2C2_MESSAGE_STATUS status;
  4342                           ;i2c2_util.c: 17: uint8_t write_status;
  4343                           ;i2c2_util.c: 18: buf[0] = reg_addr;
  4344                           
  4345                           ;incstack = 0
  4346                           ; Regs used in _i2c2_write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4347  0C78  0020               	movlb	0	; select bank0
  4348  0C79  0831               	movf	i2c2_write@reg_addr,w
  4349  0C7A  00B3               	movwf	??_i2c2_write
  4350  0C7B  0833               	movf	??_i2c2_write,w
  4351  0C7C  00B5               	movwf	i2c2_write@buf
  4352                           
  4353                           ;i2c2_util.c: 19: buf[1] = data;
  4354  0C7D  0832               	movf	i2c2_write@data,w
  4355  0C7E  00B3               	movwf	??_i2c2_write
  4356  0C7F  0833               	movf	??_i2c2_write,w
  4357  0C80  00B6               	movwf	i2c2_write@buf+1
  4358                           
  4359                           ;i2c2_util.c: 20: I2C2_MasterWrite(buf, 2, dev_addr, &status);
  4360  0C81  3002               	movlw	2
  4361  0C82  00B3               	movwf	??_i2c2_write
  4362  0C83  0833               	movf	??_i2c2_write,w
  4363  0C84  00A8               	movwf	I2C2_MasterWrite@length
  4364  0C85  0830               	movf	i2c2_write@dev_addr+1,w
  4365  0C86  00AA               	movwf	I2C2_MasterWrite@address+1
  4366  0C87  082F               	movf	i2c2_write@dev_addr,w
  4367  0C88  00A9               	movwf	I2C2_MasterWrite@address
  4368  0C89  3038               	movlw	(low (i2c2_write@status| 0))& (0+255)
  4369  0C8A  00B4               	movwf	??_i2c2_write+1
  4370  0C8B  0834               	movf	??_i2c2_write+1,w
  4371  0C8C  00AB               	movwf	I2C2_MasterWrite@pflag
  4372  0C8D  3035               	movlw	(low (i2c2_write@buf| 0))& (0+255)
  4373  0C8E  318C  24EF  318C   	fcall	_I2C2_MasterWrite
  4374  0C91                     l4291:	
  4375                           ;i2c2_util.c: 21: while (status == I2C2_MESSAGE_PENDING);
  4376                           
  4377  0C91  3002               	movlw	2
  4378  0C92  0020               	movlb	0	; select bank0
  4379  0C93  0638               	xorwf	i2c2_write@status,w
  4380  0C94  1903               	btfsc	3,2
  4381  0C95  2C91               	goto	l4291
  4382                           
  4383                           ;i2c2_util.c: 22: if (status == I2C2_MESSAGE_COMPLETE) {
  4384  0C96  0838               	movf	i2c2_write@status,w
  4385  0C97  1D03               	btfss	3,2
  4386  0C98  2C9B               	goto	l937
  4387                           
  4388                           ;i2c2_util.c: 23: write_status = 0;
  4389  0C99  01B7               	clrf	i2c2_write@write_status
  4390                           
  4391                           ;i2c2_util.c: 24: } else {
  4392  0C9A  2C9D               	goto	l4297
  4393  0C9B                     l937:	
  4394                           
  4395                           ;i2c2_util.c: 25: write_status = 1;
  4396  0C9B  01B7               	clrf	i2c2_write@write_status
  4397  0C9C  0AB7               	incf	i2c2_write@write_status,f
  4398  0C9D                     l4297:	
  4399                           
  4400                           ;i2c2_util.c: 26: }
  4401                           ;i2c2_util.c: 27: return write_status;
  4402  0C9D  0837               	movf	i2c2_write@write_status,w
  4403  0C9E  0008               	return
  4404  0C9F                     __end_of_i2c2_write:	
  4405                           
  4406                           	psect	text7
  4407  0CEF                     __ptext7:	
  4408 ;; *************** function _I2C2_MasterWrite *****************
  4409 ;; Defined at:
  4410 ;;		line 598 in file "mcc_generated_files/i2c2.c"
  4411 ;; Parameters:    Size  Location     Type
  4412 ;;  pdata           1    wreg     PTR unsigned char 
  4413 ;;		 -> i2c2_write_no_data@buf(1), i2c2_read@reg(1), i2c2_write@buf(2), 
  4414 ;;  length          1    8[BANK0 ] unsigned char 
  4415 ;;  address         2    9[BANK0 ] unsigned int 
  4416 ;;  pflag           1   11[BANK0 ] PTR enum E2972
  4417 ;;		 -> i2c2_write_no_data@status(1), i2c2_read@status(1), i2c2_write@status(1), 
  4418 ;; Auto vars:     Size  Location     Type
  4419 ;;  pdata           1   14[BANK0 ] PTR unsigned char 
  4420 ;;		 -> i2c2_write_no_data@buf(1), i2c2_read@reg(1), i2c2_write@buf(2), 
  4421 ;; Return value:  Size  Location     Type
  4422 ;;                  1    wreg      void 
  4423 ;; Registers used:
  4424 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4425 ;; Tracked objects:
  4426 ;;		On entry : 0/0
  4427 ;;		On exit  : 0/0
  4428 ;;		Unchanged: 0/0
  4429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4430 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4431 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4432 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4433 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4434 ;;Total ram usage:        7 bytes
  4435 ;; Hardware stack levels used:    1
  4436 ;; Hardware stack levels required when called:    6
  4437 ;; This function calls:
  4438 ;;		_I2C2_MasterTRBInsert
  4439 ;;		_I2C2_MasterWriteTRBBuild
  4440 ;; This function is called by:
  4441 ;;		_i2c2_write
  4442 ;; This function uses a non-reentrant model
  4443 ;;
  4444                           
  4445                           
  4446                           ;psect for function _I2C2_MasterWrite
  4447  0CEF                     _I2C2_MasterWrite:	
  4448                           
  4449                           ;incstack = 0
  4450                           ; Regs used in _I2C2_MasterWrite: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4451                           ;I2C2_MasterWrite@pdata stored from wreg
  4452  0CEF  0020               	movlb	0	; select bank0
  4453  0CF0  00AE               	movwf	I2C2_MasterWrite@pdata
  4454                           
  4455                           ;i2c2.c: 604: static I2C2_TRANSACTION_REQUEST_BLOCK trBlock;
  4456                           ;i2c2.c: 607: if (i2c2_object.trStatus.s.full != 1)
  4457  0CF1  1862               	btfsc	_i2c2_object+2,0
  4458  0CF2  2D10               	goto	l4117
  4459                           
  4460                           ;i2c2.c: 608: {
  4461                           ;i2c2.c: 609: I2C2_MasterWriteTRBBuild(&trBlock, pdata, length, address);
  4462  0CF3  082E               	movf	I2C2_MasterWrite@pdata,w
  4463  0CF4  00AC               	movwf	??_I2C2_MasterWrite
  4464  0CF5  082C               	movf	??_I2C2_MasterWrite,w
  4465  0CF6  00A1               	movwf	I2C2_MasterWriteTRBBuild@pdata
  4466  0CF7  0828               	movf	I2C2_MasterWrite@length,w
  4467  0CF8  00AD               	movwf	??_I2C2_MasterWrite+1
  4468  0CF9  082D               	movf	??_I2C2_MasterWrite+1,w
  4469  0CFA  00A2               	movwf	I2C2_MasterWriteTRBBuild@length
  4470  0CFB  082A               	movf	I2C2_MasterWrite@address+1,w
  4471  0CFC  00A4               	movwf	I2C2_MasterWriteTRBBuild@address+1
  4472  0CFD  0829               	movf	I2C2_MasterWrite@address,w
  4473  0CFE  00A3               	movwf	I2C2_MasterWriteTRBBuild@address
  4474  0CFF  30D7               	movlw	(low (I2C2_MasterWrite@trBlock| 0))& (0+255)
  4475  0D00  318B  23A7  318C   	fcall	_I2C2_MasterWriteTRBBuild
  4476                           
  4477                           ;i2c2.c: 610: I2C2_MasterTRBInsert(1, &trBlock, pflag);
  4478  0D03  30D7               	movlw	(low (I2C2_MasterWrite@trBlock| 0))& (0+255)
  4479  0D04  0020               	movlb	0	; select bank0
  4480  0D05  00AC               	movwf	??_I2C2_MasterWrite
  4481  0D06  082C               	movf	??_I2C2_MasterWrite,w
  4482  0D07  00A1               	movwf	I2C2_MasterTRBInsert@ptrb_list
  4483  0D08  082B               	movf	I2C2_MasterWrite@pflag,w
  4484  0D09  00AD               	movwf	??_I2C2_MasterWrite+1
  4485  0D0A  082D               	movf	??_I2C2_MasterWrite+1,w
  4486  0D0B  00A2               	movwf	I2C2_MasterTRBInsert@pflag
  4487  0D0C  3001               	movlw	1
  4488  0D0D  318E  2688         	fcall	_I2C2_MasterTRBInsert
  4489                           
  4490                           ;i2c2.c: 611: }
  4491  0D0F  0008               	return
  4492  0D10                     l4117:	
  4493                           
  4494                           ;i2c2.c: 612: else
  4495                           ;i2c2.c: 613: {
  4496                           ;i2c2.c: 614: *pflag = I2C2_MESSAGE_FAIL;
  4497  0D10  0020               	movlb	0	; select bank0
  4498  0D11  082B               	movf	I2C2_MasterWrite@pflag,w
  4499  0D12  0086               	movwf	6
  4500  0D13  0187               	clrf	7
  4501  0D14  0181               	clrf	1
  4502  0D15  0A81               	incf	1,f
  4503  0D16  0008               	return
  4504  0D17                     __end_of_I2C2_MasterWrite:	
  4505                           
  4506                           	psect	text8
  4507  0BA7                     __ptext8:	
  4508 ;; *************** function _I2C2_MasterWriteTRBBuild *****************
  4509 ;; Defined at:
  4510 ;;		line 707 in file "mcc_generated_files/i2c2.c"
  4511 ;; Parameters:    Size  Location     Type
  4512 ;;  ptrb            1    wreg     PTR struct .
  4513 ;;		 -> I2C2_MasterWrite@trBlock(4), 
  4514 ;;  pdata           1    1[BANK0 ] PTR unsigned char 
  4515 ;;		 -> i2c2_write_no_data@buf(1), i2c2_read@reg(1), i2c2_write@buf(2), 
  4516 ;;  length          1    2[BANK0 ] unsigned char 
  4517 ;;  address         2    3[BANK0 ] unsigned int 
  4518 ;; Auto vars:     Size  Location     Type
  4519 ;;  ptrb            1    7[BANK0 ] PTR struct .
  4520 ;;		 -> I2C2_MasterWrite@trBlock(4), 
  4521 ;; Return value:  Size  Location     Type
  4522 ;;                  1    wreg      void 
  4523 ;; Registers used:
  4524 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4525 ;; Tracked objects:
  4526 ;;		On entry : 0/0
  4527 ;;		On exit  : 0/0
  4528 ;;		Unchanged: 0/0
  4529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4530 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4531 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4532 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4533 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4534 ;;Total ram usage:        7 bytes
  4535 ;; Hardware stack levels used:    1
  4536 ;; Hardware stack levels required when called:    5
  4537 ;; This function calls:
  4538 ;;		Nothing
  4539 ;; This function is called by:
  4540 ;;		_I2C2_MasterWrite
  4541 ;; This function uses a non-reentrant model
  4542 ;;
  4543                           
  4544                           
  4545                           ;psect for function _I2C2_MasterWriteTRBBuild
  4546  0BA7                     _I2C2_MasterWriteTRBBuild:	
  4547                           
  4548                           ;incstack = 0
  4549                           ; Regs used in _I2C2_MasterWriteTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
  4550                           ;I2C2_MasterWriteTRBBuild@ptrb stored from wreg
  4551  0BA7  0020               	movlb	0	; select bank0
  4552  0BA8  00A7               	movwf	I2C2_MasterWriteTRBBuild@ptrb
  4553                           
  4554                           ;i2c2.c: 713: ptrb->address = address << 1;
  4555  0BA9  0824               	movf	I2C2_MasterWriteTRBBuild@address+1,w
  4556  0BAA  00A6               	movwf	??_I2C2_MasterWriteTRBBuild+1
  4557  0BAB  0823               	movf	I2C2_MasterWriteTRBBuild@address,w
  4558  0BAC  00A5               	movwf	??_I2C2_MasterWriteTRBBuild
  4559  0BAD  35A5               	lslf	??_I2C2_MasterWriteTRBBuild,f
  4560  0BAE  0DA6               	rlf	??_I2C2_MasterWriteTRBBuild+1,f
  4561  0BAF  0827               	movf	I2C2_MasterWriteTRBBuild@ptrb,w
  4562  0BB0  0086               	movwf	6
  4563  0BB1  0187               	clrf	7
  4564  0BB2  0825               	movf	??_I2C2_MasterWriteTRBBuild,w
  4565  0BB3  3FC0               	movwi [0]fsr1
  4566  0BB4  0826               	movf	??_I2C2_MasterWriteTRBBuild+1,w
  4567  0BB5  3FC1               	movwi [1]fsr1
  4568                           
  4569                           ;i2c2.c: 714: ptrb->length = length;
  4570  0BB6  0822               	movf	I2C2_MasterWriteTRBBuild@length,w
  4571  0BB7  00A5               	movwf	??_I2C2_MasterWriteTRBBuild
  4572  0BB8  0827               	movf	I2C2_MasterWriteTRBBuild@ptrb,w
  4573  0BB9  3E02               	addlw	2
  4574  0BBA  0086               	movwf	6
  4575  0BBB  0187               	clrf	7
  4576  0BBC  0825               	movf	??_I2C2_MasterWriteTRBBuild,w
  4577  0BBD  0081               	movwf	1
  4578                           
  4579                           ;i2c2.c: 715: ptrb->pbuffer = pdata;
  4580  0BBE  0821               	movf	I2C2_MasterWriteTRBBuild@pdata,w
  4581  0BBF  00A5               	movwf	??_I2C2_MasterWriteTRBBuild
  4582  0BC0  0827               	movf	I2C2_MasterWriteTRBBuild@ptrb,w
  4583  0BC1  3E03               	addlw	3
  4584  0BC2  0086               	movwf	6
  4585  0BC3  0187               	clrf	7
  4586  0BC4  0825               	movf	??_I2C2_MasterWriteTRBBuild,w
  4587  0BC5  0081               	movwf	1
  4588  0BC6  0008               	return
  4589  0BC7                     __end_of_I2C2_MasterWriteTRBBuild:	
  4590                           
  4591                           	psect	text9
  4592  0D17                     __ptext9:	
  4593 ;; *************** function _i2c2_read_no_reg_addr *****************
  4594 ;; Defined at:
  4595 ;;		line 77 in file "i2c2_util.c"
  4596 ;; Parameters:    Size  Location     Type
  4597 ;;  dev_addr        2   15[BANK0 ] unsigned int 
  4598 ;;  pbuf            1   17[BANK0 ] PTR unsigned char 
  4599 ;;		 -> inv_handler@measure(6), 
  4600 ;;  len             1   18[BANK0 ] unsigned char 
  4601 ;; Auto vars:     Size  Location     Type
  4602 ;;  status          1   23[BANK0 ] enum E2979
  4603 ;;  read_status     1   22[BANK0 ] unsigned char 
  4604 ;;  timeout         1   21[BANK0 ] unsigned char 
  4605 ;; Return value:  Size  Location     Type
  4606 ;;                  1    wreg      unsigned char 
  4607 ;; Registers used:
  4608 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4609 ;; Tracked objects:
  4610 ;;		On entry : 0/0
  4611 ;;		On exit  : 0/0
  4612 ;;		Unchanged: 0/0
  4613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4614 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4615 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4616 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4617 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4618 ;;Total ram usage:        9 bytes
  4619 ;; Hardware stack levels used:    1
  4620 ;; Hardware stack levels required when called:    7
  4621 ;; This function calls:
  4622 ;;		_I2C2_MasterRead
  4623 ;; This function is called by:
  4624 ;;		_inv_handler
  4625 ;; This function uses a non-reentrant model
  4626 ;;
  4627                           
  4628                           
  4629                           ;psect for function _i2c2_read_no_reg_addr
  4630  0D17                     _i2c2_read_no_reg_addr:	
  4631                           
  4632                           ;i2c2_util.c: 79: I2C2_MESSAGE_STATUS status;
  4633                           ;i2c2_util.c: 80: uint8_t read_status = 2;
  4634                           
  4635                           ;incstack = 0
  4636                           ; Regs used in _i2c2_read_no_reg_addr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  4637  0D17  3002               	movlw	2
  4638  0D18  0020               	movlb	0	; select bank0
  4639  0D19  00B3               	movwf	??_i2c2_read_no_reg_addr
  4640  0D1A  0833               	movf	??_i2c2_read_no_reg_addr,w
  4641  0D1B  00B6               	movwf	i2c2_read_no_reg_addr@read_status
  4642                           
  4643                           ;i2c2_util.c: 81: uint8_t timeout = 1;
  4644  0D1C  01B5               	clrf	i2c2_read_no_reg_addr@timeout
  4645  0D1D  0AB5               	incf	i2c2_read_no_reg_addr@timeout,f
  4646  0D1E                     l4317:	
  4647                           ;i2c2_util.c: 82: while (status != I2C2_MESSAGE_FAIL) {
  4648                           
  4649  0D1E  0337               	decf	i2c2_read_no_reg_addr@status,w
  4650  0D1F  1903               	btfsc	3,2
  4651  0D20  2D41               	goto	l4319
  4652                           
  4653                           ;i2c2_util.c: 83: I2C2_MasterRead(pbuf, len, dev_addr, &status);
  4654  0D21  0832               	movf	i2c2_read_no_reg_addr@len,w
  4655  0D22  00B3               	movwf	??_i2c2_read_no_reg_addr
  4656  0D23  0833               	movf	??_i2c2_read_no_reg_addr,w
  4657  0D24  00A8               	movwf	I2C2_MasterRead@length
  4658  0D25  0830               	movf	i2c2_read_no_reg_addr@dev_addr+1,w
  4659  0D26  00AA               	movwf	I2C2_MasterRead@address+1
  4660  0D27  082F               	movf	i2c2_read_no_reg_addr@dev_addr,w
  4661  0D28  00A9               	movwf	I2C2_MasterRead@address
  4662  0D29  3037               	movlw	(low (i2c2_read_no_reg_addr@status| 0))& (0+255)
  4663  0D2A  00B4               	movwf	??_i2c2_read_no_reg_addr+1
  4664  0D2B  0834               	movf	??_i2c2_read_no_reg_addr+1,w
  4665  0D2C  00AB               	movwf	I2C2_MasterRead@pflag
  4666  0D2D  0831               	movf	i2c2_read_no_reg_addr@pbuf,w
  4667  0D2E  318C  24C7  318D   	fcall	_I2C2_MasterRead
  4668  0D31                     l4307:	
  4669                           ;i2c2_util.c: 84: while (status == I2C2_MESSAGE_PENDING);
  4670                           
  4671  0D31  3002               	movlw	2
  4672  0D32  0020               	movlb	0	; select bank0
  4673  0D33  0637               	xorwf	i2c2_read_no_reg_addr@status,w
  4674  0D34  1903               	btfsc	3,2
  4675  0D35  2D31               	goto	l4307
  4676                           
  4677                           ;i2c2_util.c: 85: if (status == I2C2_MESSAGE_COMPLETE) {
  4678  0D36  0837               	movf	i2c2_read_no_reg_addr@status,w
  4679  0D37  1D03               	btfss	3,2
  4680  0D38  2D3B               	goto	l4313
  4681                           
  4682                           ;i2c2_util.c: 86: read_status = 0;
  4683  0D39  01B6               	clrf	i2c2_read_no_reg_addr@read_status
  4684                           
  4685                           ;i2c2_util.c: 87: break;
  4686  0D3A  2D41               	goto	l4319
  4687  0D3B                     l4313:	
  4688                           
  4689                           ;i2c2_util.c: 88: }
  4690                           ;i2c2_util.c: 89: if (--timeout == 0) {
  4691  0D3B  3001               	movlw	1
  4692  0D3C  02B5               	subwf	i2c2_read_no_reg_addr@timeout,f
  4693  0D3D  1D03               	btfss	3,2
  4694  0D3E  2D1E               	goto	l4317
  4695                           
  4696                           ;i2c2_util.c: 90: read_status = 1;
  4697  0D3F  01B6               	clrf	i2c2_read_no_reg_addr@read_status
  4698  0D40  0AB6               	incf	i2c2_read_no_reg_addr@read_status,f
  4699  0D41                     l4319:	
  4700                           ;i2c2_util.c: 91: break;
  4701                           
  4702                           
  4703                           ;i2c2_util.c: 92: }
  4704                           ;i2c2_util.c: 93: }
  4705                           ;i2c2_util.c: 94: return read_status;
  4706  0D41  0836               	movf	i2c2_read_no_reg_addr@read_status,w
  4707  0D42  0008               	return
  4708  0D43                     __end_of_i2c2_read_no_reg_addr:	
  4709                           
  4710                           	psect	text10
  4711  0CC7                     __ptext10:	
  4712 ;; *************** function _I2C2_MasterRead *****************
  4713 ;; Defined at:
  4714 ;;		line 619 in file "mcc_generated_files/i2c2.c"
  4715 ;; Parameters:    Size  Location     Type
  4716 ;;  pdata           1    wreg     PTR unsigned char 
  4717 ;;		 -> inv_handler@measure(6), 
  4718 ;;  length          1    8[BANK0 ] unsigned char 
  4719 ;;  address         2    9[BANK0 ] unsigned int 
  4720 ;;  pflag           1   11[BANK0 ] PTR enum E2972
  4721 ;;		 -> i2c2_read_no_reg_addr@status(1), i2c2_read@status(1), 
  4722 ;; Auto vars:     Size  Location     Type
  4723 ;;  pdata           1   14[BANK0 ] PTR unsigned char 
  4724 ;;		 -> inv_handler@measure(6), 
  4725 ;; Return value:  Size  Location     Type
  4726 ;;                  1    wreg      void 
  4727 ;; Registers used:
  4728 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4729 ;; Tracked objects:
  4730 ;;		On entry : 0/0
  4731 ;;		On exit  : 0/0
  4732 ;;		Unchanged: 0/0
  4733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4734 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4735 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4736 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4737 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4738 ;;Total ram usage:        7 bytes
  4739 ;; Hardware stack levels used:    1
  4740 ;; Hardware stack levels required when called:    6
  4741 ;; This function calls:
  4742 ;;		_I2C2_MasterReadTRBBuild
  4743 ;;		_I2C2_MasterTRBInsert
  4744 ;; This function is called by:
  4745 ;;		_i2c2_read_no_reg_addr
  4746 ;; This function uses a non-reentrant model
  4747 ;;
  4748                           
  4749                           
  4750                           ;psect for function _I2C2_MasterRead
  4751  0CC7                     _I2C2_MasterRead:	
  4752                           
  4753                           ;incstack = 0
  4754                           ; Regs used in _I2C2_MasterRead: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4755                           ;I2C2_MasterRead@pdata stored from wreg
  4756  0CC7  0020               	movlb	0	; select bank0
  4757  0CC8  00AE               	movwf	I2C2_MasterRead@pdata
  4758                           
  4759                           ;i2c2.c: 625: static I2C2_TRANSACTION_REQUEST_BLOCK trBlock;
  4760                           ;i2c2.c: 629: if (i2c2_object.trStatus.s.full != 1)
  4761  0CC9  1862               	btfsc	_i2c2_object+2,0
  4762  0CCA  2CE8               	goto	l4123
  4763                           
  4764                           ;i2c2.c: 630: {
  4765                           ;i2c2.c: 631: I2C2_MasterReadTRBBuild(&trBlock, pdata, length, address);
  4766  0CCB  082E               	movf	I2C2_MasterRead@pdata,w
  4767  0CCC  00AC               	movwf	??_I2C2_MasterRead
  4768  0CCD  082C               	movf	??_I2C2_MasterRead,w
  4769  0CCE  00A1               	movwf	I2C2_MasterReadTRBBuild@pdata
  4770  0CCF  0828               	movf	I2C2_MasterRead@length,w
  4771  0CD0  00AD               	movwf	??_I2C2_MasterRead+1
  4772  0CD1  082D               	movf	??_I2C2_MasterRead+1,w
  4773  0CD2  00A2               	movwf	I2C2_MasterReadTRBBuild@length
  4774  0CD3  082A               	movf	I2C2_MasterRead@address+1,w
  4775  0CD4  00A4               	movwf	I2C2_MasterReadTRBBuild@address+1
  4776  0CD5  0829               	movf	I2C2_MasterRead@address,w
  4777  0CD6  00A3               	movwf	I2C2_MasterReadTRBBuild@address
  4778  0CD7  30D3               	movlw	(low (I2C2_MasterRead@trBlock| 0))& (0+255)
  4779  0CD8  318C  249F  318C   	fcall	_I2C2_MasterReadTRBBuild
  4780                           
  4781                           ;i2c2.c: 632: I2C2_MasterTRBInsert(1, &trBlock, pflag);
  4782  0CDB  30D3               	movlw	(low (I2C2_MasterRead@trBlock| 0))& (0+255)
  4783  0CDC  0020               	movlb	0	; select bank0
  4784  0CDD  00AC               	movwf	??_I2C2_MasterRead
  4785  0CDE  082C               	movf	??_I2C2_MasterRead,w
  4786  0CDF  00A1               	movwf	I2C2_MasterTRBInsert@ptrb_list
  4787  0CE0  082B               	movf	I2C2_MasterRead@pflag,w
  4788  0CE1  00AD               	movwf	??_I2C2_MasterRead+1
  4789  0CE2  082D               	movf	??_I2C2_MasterRead+1,w
  4790  0CE3  00A2               	movwf	I2C2_MasterTRBInsert@pflag
  4791  0CE4  3001               	movlw	1
  4792  0CE5  318E  2688         	fcall	_I2C2_MasterTRBInsert
  4793                           
  4794                           ;i2c2.c: 633: }
  4795  0CE7  0008               	return
  4796  0CE8                     l4123:	
  4797                           
  4798                           ;i2c2.c: 634: else
  4799                           ;i2c2.c: 635: {
  4800                           ;i2c2.c: 636: *pflag = I2C2_MESSAGE_FAIL;
  4801  0CE8  0020               	movlb	0	; select bank0
  4802  0CE9  082B               	movf	I2C2_MasterRead@pflag,w
  4803  0CEA  0086               	movwf	6
  4804  0CEB  0187               	clrf	7
  4805  0CEC  0181               	clrf	1
  4806  0CED  0A81               	incf	1,f
  4807  0CEE  0008               	return
  4808  0CEF                     __end_of_I2C2_MasterRead:	
  4809                           
  4810                           	psect	text11
  4811  0E88                     __ptext11:	
  4812 ;; *************** function _I2C2_MasterTRBInsert *****************
  4813 ;; Defined at:
  4814 ;;		line 641 in file "mcc_generated_files/i2c2.c"
  4815 ;; Parameters:    Size  Location     Type
  4816 ;;  count           1    wreg     unsigned char 
  4817 ;;  ptrb_list       1    1[BANK0 ] PTR struct .
  4818 ;;		 -> I2C2_MasterRead@trBlock(4), I2C2_MasterWrite@trBlock(4), 
  4819 ;;  pflag           1    2[BANK0 ] PTR enum E2972
  4820 ;;		 -> i2c2_read_no_reg_addr@status(1), i2c2_write_no_data@status(1), i2c2_read@status(1), i2c2_write@status(1), 
  4821 ;; Auto vars:     Size  Location     Type
  4822 ;;  count           1    4[BANK0 ] unsigned char 
  4823 ;; Return value:  Size  Location     Type
  4824 ;;                  1    wreg      void 
  4825 ;; Registers used:
  4826 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4827 ;; Tracked objects:
  4828 ;;		On entry : 0/0
  4829 ;;		On exit  : 0/0
  4830 ;;		Unchanged: 0/0
  4831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4832 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4833 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4834 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4835 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4836 ;;Total ram usage:        4 bytes
  4837 ;; Hardware stack levels used:    1
  4838 ;; Hardware stack levels required when called:    5
  4839 ;; This function calls:
  4840 ;;		Nothing
  4841 ;; This function is called by:
  4842 ;;		_I2C2_MasterWrite
  4843 ;;		_I2C2_MasterRead
  4844 ;; This function uses a non-reentrant model
  4845 ;;
  4846                           
  4847                           
  4848                           ;psect for function _I2C2_MasterTRBInsert
  4849  0E88                     _I2C2_MasterTRBInsert:	
  4850                           
  4851                           ;incstack = 0
  4852                           ; Regs used in _I2C2_MasterTRBInsert: [wreg+fsr1l+fsr1h+status,2+status,0]
  4853                           ;I2C2_MasterTRBInsert@count stored from wreg
  4854  0E88  0020               	movlb	0	; select bank0
  4855  0E89  00A4               	movwf	I2C2_MasterTRBInsert@count
  4856                           
  4857                           ;i2c2.c: 648: if (i2c2_object.trStatus.s.full != 1)
  4858  0E8A  1862               	btfsc	_i2c2_object+2,0
  4859  0E8B  2EBC               	goto	l4027
  4860                           
  4861                           ;i2c2.c: 649: {
  4862                           ;i2c2.c: 650: *pflag = I2C2_MESSAGE_PENDING;
  4863  0E8C  3002               	movlw	2
  4864  0E8D  00A3               	movwf	??_I2C2_MasterTRBInsert
  4865  0E8E  0822               	movf	I2C2_MasterTRBInsert@pflag,w
  4866  0E8F  0086               	movwf	6
  4867  0E90  0187               	clrf	7
  4868  0E91  0823               	movf	??_I2C2_MasterTRBInsert,w
  4869  0E92  0081               	movwf	1
  4870                           
  4871                           ;i2c2.c: 652: i2c2_object.pTrTail->ptrb_list = ptrb_list;
  4872  0E93  0821               	movf	I2C2_MasterTRBInsert@ptrb_list,w
  4873  0E94  00A3               	movwf	??_I2C2_MasterTRBInsert
  4874  0E95  0A60               	incf	_i2c2_object,w
  4875  0E96  0086               	movwf	6
  4876  0E97  0187               	clrf	7
  4877  0E98  0823               	movf	??_I2C2_MasterTRBInsert,w
  4878  0E99  0081               	movwf	1
  4879                           
  4880                           ;i2c2.c: 653: i2c2_object.pTrTail->count = count;
  4881  0E9A  0824               	movf	I2C2_MasterTRBInsert@count,w
  4882  0E9B  00A3               	movwf	??_I2C2_MasterTRBInsert
  4883  0E9C  0860               	movf	_i2c2_object,w
  4884  0E9D  0086               	movwf	6
  4885  0E9E  0187               	clrf	7
  4886  0E9F  0823               	movf	??_I2C2_MasterTRBInsert,w
  4887  0EA0  0081               	movwf	1
  4888                           
  4889                           ;i2c2.c: 654: i2c2_object.pTrTail->pTrFlag = pflag;
  4890  0EA1  0822               	movf	I2C2_MasterTRBInsert@pflag,w
  4891  0EA2  00A3               	movwf	??_I2C2_MasterTRBInsert
  4892  0EA3  0860               	movf	_i2c2_object,w
  4893  0EA4  3E02               	addlw	2
  4894  0EA5  0086               	movwf	6
  4895  0EA6  0187               	clrf	7
  4896  0EA7  0823               	movf	??_I2C2_MasterTRBInsert,w
  4897  0EA8  0081               	movwf	1
  4898                           
  4899                           ;i2c2.c: 655: i2c2_object.pTrTail++;
  4900  0EA9  3003               	movlw	3
  4901  0EAA  00A3               	movwf	??_I2C2_MasterTRBInsert
  4902  0EAB  0823               	movf	??_I2C2_MasterTRBInsert,w
  4903  0EAC  07E0               	addwf	_i2c2_object,f
  4904                           
  4905                           ;i2c2.c: 658: if (i2c2_object.pTrTail == (i2c2_tr_queue + 1))
  4906  0EAD  0860               	movf	_i2c2_object,w
  4907  0EAE  3AE1               	xorlw	(low ((_i2c2_tr_queue| 0+3)))& (0+255)
  4908  0EAF  1D03               	skipz
  4909  0EB0  2EB5               	goto	l4023
  4910                           
  4911                           ;i2c2.c: 659: {
  4912                           ;i2c2.c: 661: i2c2_object.pTrTail = i2c2_tr_queue;
  4913  0EB1  30DE               	movlw	(low (_i2c2_tr_queue| 0))& (0+255)
  4914  0EB2  00A3               	movwf	??_I2C2_MasterTRBInsert
  4915  0EB3  0823               	movf	??_I2C2_MasterTRBInsert,w
  4916  0EB4  00E0               	movwf	_i2c2_object
  4917  0EB5                     l4023:	
  4918                           
  4919                           ;i2c2.c: 662: }
  4920                           ;i2c2.c: 666: i2c2_object.trStatus.s.empty = 0;
  4921  0EB5  10E2               	bcf	_i2c2_object+2,1
  4922                           
  4923                           ;i2c2.c: 669: if (i2c2_object.pTrHead == i2c2_object.pTrTail)
  4924  0EB6  0861               	movf	low ((_i2c2_object| 0+1)),w
  4925  0EB7  0660               	xorwf	_i2c2_object,w
  4926  0EB8  1D03               	skipz
  4927  0EB9  2EC1               	goto	l4029
  4928                           
  4929                           ;i2c2.c: 670: {
  4930                           ;i2c2.c: 672: i2c2_object.trStatus.s.full = 1;
  4931  0EBA  1462               	bsf	_i2c2_object+2,0
  4932                           
  4933                           ;i2c2.c: 673: }
  4934                           ;i2c2.c: 675: }
  4935  0EBB  2EC1               	goto	l4029
  4936  0EBC                     l4027:	
  4937                           
  4938                           ;i2c2.c: 676: else
  4939                           ;i2c2.c: 677: {
  4940                           ;i2c2.c: 678: *pflag = I2C2_MESSAGE_FAIL;
  4941  0EBC  0822               	movf	I2C2_MasterTRBInsert@pflag,w
  4942  0EBD  0086               	movwf	6
  4943  0EBE  0187               	clrf	7
  4944  0EBF  0181               	clrf	1
  4945  0EC0  0A81               	incf	1,f
  4946  0EC1                     l4029:	
  4947                           
  4948                           ;i2c2.c: 679: }
  4949                           ;i2c2.c: 682: if (*pflag == I2C2_MESSAGE_PENDING)
  4950  0EC1  0822               	movf	I2C2_MasterTRBInsert@pflag,w
  4951  0EC2  0086               	movwf	6
  4952  0EC3  0187               	clrf	7
  4953  0EC4  3002               	movlw	2
  4954  0EC5  0601               	xorwf	1,w
  4955  0EC6  1D03               	btfss	3,2
  4956  0EC7  0008               	return
  4957  0EC8                     l4033:	
  4958                           ;i2c2.c: 683: {
  4959                           ;i2c2.c: 684: while(i2c2_state != S_MASTER_IDLE);
  4960                           
  4961  0EC8  0021               	movlb	1	; select bank1
  4962  0EC9  0849               	movf	_i2c2_state^(0+128),w
  4963  0ECA  1D03               	btfss	3,2
  4964  0ECB  2EC8               	goto	l4033
  4965                           
  4966                           ;i2c2.c: 685: {
  4967                           ;i2c2.c: 688: PIR4bits.SSP2IF = 1;
  4968  0ECC  0020               	movlb	0	; select bank0
  4969  0ECD  1414               	bsf	20,0	;volatile
  4970  0ECE  0008               	return
  4971  0ECF                     __end_of_I2C2_MasterTRBInsert:	
  4972                           
  4973                           	psect	text12
  4974  0C9F                     __ptext12:	
  4975 ;; *************** function _I2C2_MasterReadTRBBuild *****************
  4976 ;; Defined at:
  4977 ;;		line 694 in file "mcc_generated_files/i2c2.c"
  4978 ;; Parameters:    Size  Location     Type
  4979 ;;  ptrb            1    wreg     PTR struct .
  4980 ;;		 -> I2C2_MasterRead@trBlock(4), 
  4981 ;;  pdata           1    1[BANK0 ] PTR unsigned char 
  4982 ;;		 -> inv_handler@measure(6), 
  4983 ;;  length          1    2[BANK0 ] unsigned char 
  4984 ;;  address         2    3[BANK0 ] unsigned int 
  4985 ;; Auto vars:     Size  Location     Type
  4986 ;;  ptrb            1    7[BANK0 ] PTR struct .
  4987 ;;		 -> I2C2_MasterRead@trBlock(4), 
  4988 ;; Return value:  Size  Location     Type
  4989 ;;                  1    wreg      void 
  4990 ;; Registers used:
  4991 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4992 ;; Tracked objects:
  4993 ;;		On entry : 0/0
  4994 ;;		On exit  : 0/0
  4995 ;;		Unchanged: 0/0
  4996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4997 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4998 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4999 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5000 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5001 ;;Total ram usage:        7 bytes
  5002 ;; Hardware stack levels used:    1
  5003 ;; Hardware stack levels required when called:    5
  5004 ;; This function calls:
  5005 ;;		Nothing
  5006 ;; This function is called by:
  5007 ;;		_I2C2_MasterRead
  5008 ;; This function uses a non-reentrant model
  5009 ;;
  5010                           
  5011                           
  5012                           ;psect for function _I2C2_MasterReadTRBBuild
  5013  0C9F                     _I2C2_MasterReadTRBBuild:	
  5014                           
  5015                           ;incstack = 0
  5016                           ; Regs used in _I2C2_MasterReadTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
  5017                           ;I2C2_MasterReadTRBBuild@ptrb stored from wreg
  5018  0C9F  0020               	movlb	0	; select bank0
  5019  0CA0  00A7               	movwf	I2C2_MasterReadTRBBuild@ptrb
  5020                           
  5021                           ;i2c2.c: 700: ptrb->address = address << 1;
  5022  0CA1  0824               	movf	I2C2_MasterReadTRBBuild@address+1,w
  5023  0CA2  00A6               	movwf	??_I2C2_MasterReadTRBBuild+1
  5024  0CA3  0823               	movf	I2C2_MasterReadTRBBuild@address,w
  5025  0CA4  00A5               	movwf	??_I2C2_MasterReadTRBBuild
  5026  0CA5  35A5               	lslf	??_I2C2_MasterReadTRBBuild,f
  5027  0CA6  0DA6               	rlf	??_I2C2_MasterReadTRBBuild+1,f
  5028  0CA7  0827               	movf	I2C2_MasterReadTRBBuild@ptrb,w
  5029  0CA8  0086               	movwf	6
  5030  0CA9  0187               	clrf	7
  5031  0CAA  0825               	movf	??_I2C2_MasterReadTRBBuild,w
  5032  0CAB  3FC0               	movwi [0]fsr1
  5033  0CAC  0826               	movf	??_I2C2_MasterReadTRBBuild+1,w
  5034  0CAD  3FC1               	movwi [1]fsr1
  5035                           
  5036                           ;i2c2.c: 702: ptrb->address |= 0x01;
  5037  0CAE  0827               	movf	I2C2_MasterReadTRBBuild@ptrb,w
  5038  0CAF  0086               	movwf	6
  5039  0CB0  0187               	clrf	7
  5040  0CB1  3001               	movlw	1
  5041  0CB2  0481               	iorwf	1,f
  5042  0CB3  3141               	addfsr 1,1
  5043  0CB4  3000               	movlw	0
  5044  0CB5  0481               	iorwf	1,f
  5045                           
  5046                           ;i2c2.c: 703: ptrb->length = length;
  5047  0CB6  0822               	movf	I2C2_MasterReadTRBBuild@length,w
  5048  0CB7  00A5               	movwf	??_I2C2_MasterReadTRBBuild
  5049  0CB8  0827               	movf	I2C2_MasterReadTRBBuild@ptrb,w
  5050  0CB9  3E02               	addlw	2
  5051  0CBA  0086               	movwf	6
  5052  0CBB  0187               	clrf	7
  5053  0CBC  0825               	movf	??_I2C2_MasterReadTRBBuild,w
  5054  0CBD  0081               	movwf	1
  5055                           
  5056                           ;i2c2.c: 704: ptrb->pbuffer = pdata;
  5057  0CBE  0821               	movf	I2C2_MasterReadTRBBuild@pdata,w
  5058  0CBF  00A5               	movwf	??_I2C2_MasterReadTRBBuild
  5059  0CC0  0827               	movf	I2C2_MasterReadTRBBuild@ptrb,w
  5060  0CC1  3E03               	addlw	3
  5061  0CC2  0086               	movwf	6
  5062  0CC3  0187               	clrf	7
  5063  0CC4  0825               	movf	??_I2C2_MasterReadTRBBuild,w
  5064  0CC5  0081               	movwf	1
  5065  0CC6  0008               	return
  5066  0CC7                     __end_of_I2C2_MasterReadTRBBuild:	
  5067                           
  5068                           	psect	text13
  5069  0D9E                     __ptext13:	
  5070 ;; *************** function ___lmul *****************
  5071 ;; Defined at:
  5072 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul32.c"
  5073 ;; Parameters:    Size  Location     Type
  5074 ;;  multiplier      4    1[BANK0 ] unsigned long 
  5075 ;;  multiplicand    4    5[BANK0 ] unsigned long 
  5076 ;; Auto vars:     Size  Location     Type
  5077 ;;  product         4    9[BANK0 ] unsigned long 
  5078 ;; Return value:  Size  Location     Type
  5079 ;;                  4    1[BANK0 ] unsigned long 
  5080 ;; Registers used:
  5081 ;;		wreg, status,2, status,0
  5082 ;; Tracked objects:
  5083 ;;		On entry : 0/0
  5084 ;;		On exit  : 0/0
  5085 ;;		Unchanged: 0/0
  5086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5087 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5088 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5089 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5090 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5091 ;;Total ram usage:       12 bytes
  5092 ;; Hardware stack levels used:    1
  5093 ;; Hardware stack levels required when called:    5
  5094 ;; This function calls:
  5095 ;;		Nothing
  5096 ;; This function is called by:
  5097 ;;		_inv_handler
  5098 ;; This function uses a non-reentrant model
  5099 ;;
  5100                           
  5101                           
  5102                           ;psect for function ___lmul
  5103  0D9E                     ___lmul:	
  5104                           
  5105                           ;incstack = 0
  5106                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  5107  0D9E  3000               	movlw	0
  5108  0D9F  0020               	movlb	0	; select bank0
  5109  0DA0  00AC               	movwf	___lmul@product+3
  5110  0DA1  3000               	movlw	0
  5111  0DA2  00AB               	movwf	___lmul@product+2
  5112  0DA3  3000               	movlw	0
  5113  0DA4  00AA               	movwf	___lmul@product+1
  5114  0DA5  3000               	movlw	0
  5115  0DA6  00A9               	movwf	___lmul@product
  5116  0DA7                     l4349:	
  5117  0DA7  1C21               	btfss	___lmul@multiplier,0
  5118  0DA8  2DB1               	goto	l4353
  5119  0DA9  0825               	movf	___lmul@multiplicand,w
  5120  0DAA  07A9               	addwf	___lmul@product,f
  5121  0DAB  0826               	movf	___lmul@multiplicand+1,w
  5122  0DAC  3DAA               	addwfc	___lmul@product+1,f
  5123  0DAD  0827               	movf	___lmul@multiplicand+2,w
  5124  0DAE  3DAB               	addwfc	___lmul@product+2,f
  5125  0DAF  0828               	movf	___lmul@multiplicand+3,w
  5126  0DB0  3DAC               	addwfc	___lmul@product+3,f
  5127  0DB1                     l4353:	
  5128  0DB1  3001               	movlw	1
  5129  0DB2                     u3875:	
  5130  0DB2  35A5               	lslf	___lmul@multiplicand,f
  5131  0DB3  0DA6               	rlf	___lmul@multiplicand+1,f
  5132  0DB4  0DA7               	rlf	___lmul@multiplicand+2,f
  5133  0DB5  0DA8               	rlf	___lmul@multiplicand+3,f
  5134  0DB6  0B89               	decfsz	9,f
  5135  0DB7  2DB2               	goto	u3875
  5136  0DB8  3001               	movlw	1
  5137  0DB9                     u3885:	
  5138  0DB9  36A4               	lsrf	___lmul@multiplier+3,f
  5139  0DBA  0CA3               	rrf	___lmul@multiplier+2,f
  5140  0DBB  0CA2               	rrf	___lmul@multiplier+1,f
  5141  0DBC  0CA1               	rrf	___lmul@multiplier,f
  5142  0DBD  0B89               	decfsz	9,f
  5143  0DBE  2DB9               	goto	u3885
  5144  0DBF  0824               	movf	___lmul@multiplier+3,w
  5145  0DC0  0423               	iorwf	___lmul@multiplier+2,w
  5146  0DC1  0422               	iorwf	___lmul@multiplier+1,w
  5147  0DC2  0421               	iorwf	___lmul@multiplier,w
  5148  0DC3  1D03               	skipz
  5149  0DC4  2DA7               	goto	l4349
  5150  0DC5  082C               	movf	___lmul@product+3,w
  5151  0DC6  00A4               	movwf	?___lmul+3
  5152  0DC7  082B               	movf	___lmul@product+2,w
  5153  0DC8  00A3               	movwf	?___lmul+2
  5154  0DC9  082A               	movf	___lmul@product+1,w
  5155  0DCA  00A2               	movwf	?___lmul+1
  5156  0DCB  0829               	movf	___lmul@product,w
  5157  0DCC  00A1               	movwf	?___lmul
  5158  0DCD  0008               	return
  5159  0DCE                     __end_of___lmul:	
  5160                           
  5161                           	psect	text14
  5162  0F7E                     __ptext14:	
  5163 ;; *************** function ___aldiv *****************
  5164 ;; Defined at:
  5165 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\aldiv.c"
  5166 ;; Parameters:    Size  Location     Type
  5167 ;;  divisor         4   13[BANK0 ] long 
  5168 ;;  dividend        4   17[BANK0 ] long 
  5169 ;; Auto vars:     Size  Location     Type
  5170 ;;  quotient        4   24[BANK0 ] long 
  5171 ;;  sign            1   23[BANK0 ] unsigned char 
  5172 ;;  counter         1   22[BANK0 ] unsigned char 
  5173 ;; Return value:  Size  Location     Type
  5174 ;;                  4   13[BANK0 ] long 
  5175 ;; Registers used:
  5176 ;;		wreg, status,2, status,0
  5177 ;; Tracked objects:
  5178 ;;		On entry : 0/0
  5179 ;;		On exit  : 0/0
  5180 ;;		Unchanged: 0/0
  5181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5182 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5183 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5184 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5185 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5186 ;;Total ram usage:       15 bytes
  5187 ;; Hardware stack levels used:    1
  5188 ;; Hardware stack levels required when called:    5
  5189 ;; This function calls:
  5190 ;;		Nothing
  5191 ;; This function is called by:
  5192 ;;		_inv_handler
  5193 ;; This function uses a non-reentrant model
  5194 ;;
  5195                           
  5196                           
  5197                           ;psect for function ___aldiv
  5198  0F7E                     ___aldiv:	
  5199                           
  5200                           ;incstack = 0
  5201                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  5202  0F7E  0020               	movlb	0	; select bank0
  5203  0F7F  01B7               	clrf	___aldiv@sign
  5204  0F80  1FB0               	btfss	___aldiv@divisor+3,7
  5205  0F81  2F8F               	goto	l1117
  5206  0F82  09AD               	comf	___aldiv@divisor,f
  5207  0F83  09AE               	comf	___aldiv@divisor+1,f
  5208  0F84  09AF               	comf	___aldiv@divisor+2,f
  5209  0F85  09B0               	comf	___aldiv@divisor+3,f
  5210  0F86  0AAD               	incf	___aldiv@divisor,f
  5211  0F87  1903               	skipnz
  5212  0F88  0AAE               	incf	___aldiv@divisor+1,f
  5213  0F89  1903               	skipnz
  5214  0F8A  0AAF               	incf	___aldiv@divisor+2,f
  5215  0F8B  1903               	skipnz
  5216  0F8C  0AB0               	incf	___aldiv@divisor+3,f
  5217  0F8D  01B7               	clrf	___aldiv@sign
  5218  0F8E  0AB7               	incf	___aldiv@sign,f
  5219  0F8F                     l1117:	
  5220  0F8F  1FB4               	btfss	___aldiv@dividend+3,7
  5221  0F90  2FA0               	goto	l4371
  5222  0F91  09B1               	comf	___aldiv@dividend,f
  5223  0F92  09B2               	comf	___aldiv@dividend+1,f
  5224  0F93  09B3               	comf	___aldiv@dividend+2,f
  5225  0F94  09B4               	comf	___aldiv@dividend+3,f
  5226  0F95  0AB1               	incf	___aldiv@dividend,f
  5227  0F96  1903               	skipnz
  5228  0F97  0AB2               	incf	___aldiv@dividend+1,f
  5229  0F98  1903               	skipnz
  5230  0F99  0AB3               	incf	___aldiv@dividend+2,f
  5231  0F9A  1903               	skipnz
  5232  0F9B  0AB4               	incf	___aldiv@dividend+3,f
  5233  0F9C  3001               	movlw	1
  5234  0F9D  00B5               	movwf	??___aldiv
  5235  0F9E  0835               	movf	??___aldiv,w
  5236  0F9F  06B7               	xorwf	___aldiv@sign,f
  5237  0FA0                     l4371:	
  5238  0FA0  3000               	movlw	0
  5239  0FA1  00BB               	movwf	___aldiv@quotient+3
  5240  0FA2  3000               	movlw	0
  5241  0FA3  00BA               	movwf	___aldiv@quotient+2
  5242  0FA4  3000               	movlw	0
  5243  0FA5  00B9               	movwf	___aldiv@quotient+1
  5244  0FA6  3000               	movlw	0
  5245  0FA7  00B8               	movwf	___aldiv@quotient
  5246  0FA8  0830               	movf	___aldiv@divisor+3,w
  5247  0FA9  042F               	iorwf	___aldiv@divisor+2,w
  5248  0FAA  042E               	iorwf	___aldiv@divisor+1,w
  5249  0FAB  042D               	iorwf	___aldiv@divisor,w
  5250  0FAC  1903               	skipnz
  5251  0FAD  2FE9               	goto	l4393
  5252  0FAE  01B6               	clrf	___aldiv@counter
  5253  0FAF  0AB6               	incf	___aldiv@counter,f
  5254  0FB0                     l4379:	
  5255  0FB0  1BB0               	btfsc	___aldiv@divisor+3,7
  5256  0FB1  2FBE               	goto	l4381
  5257  0FB2  3001               	movlw	1
  5258  0FB3                     u3935:	
  5259  0FB3  35AD               	lslf	___aldiv@divisor,f
  5260  0FB4  0DAE               	rlf	___aldiv@divisor+1,f
  5261  0FB5  0DAF               	rlf	___aldiv@divisor+2,f
  5262  0FB6  0DB0               	rlf	___aldiv@divisor+3,f
  5263  0FB7  0B89               	decfsz	9,f
  5264  0FB8  2FB3               	goto	u3935
  5265  0FB9  3001               	movlw	1
  5266  0FBA  00B5               	movwf	??___aldiv
  5267  0FBB  0835               	movf	??___aldiv,w
  5268  0FBC  07B6               	addwf	___aldiv@counter,f
  5269  0FBD  2FB0               	goto	l4379
  5270  0FBE                     l4381:	
  5271  0FBE  3001               	movlw	1
  5272  0FBF                     u3955:	
  5273  0FBF  35B8               	lslf	___aldiv@quotient,f
  5274  0FC0  0DB9               	rlf	___aldiv@quotient+1,f
  5275  0FC1  0DBA               	rlf	___aldiv@quotient+2,f
  5276  0FC2  0DBB               	rlf	___aldiv@quotient+3,f
  5277  0FC3  0B89               	decfsz	9,f
  5278  0FC4  2FBF               	goto	u3955
  5279  0FC5  0830               	movf	___aldiv@divisor+3,w
  5280  0FC6  0234               	subwf	___aldiv@dividend+3,w
  5281  0FC7  1D03               	skipz
  5282  0FC8  2FD3               	goto	u3965
  5283  0FC9  082F               	movf	___aldiv@divisor+2,w
  5284  0FCA  0233               	subwf	___aldiv@dividend+2,w
  5285  0FCB  1D03               	skipz
  5286  0FCC  2FD3               	goto	u3965
  5287  0FCD  082E               	movf	___aldiv@divisor+1,w
  5288  0FCE  0232               	subwf	___aldiv@dividend+1,w
  5289  0FCF  1D03               	skipz
  5290  0FD0  2FD3               	goto	u3965
  5291  0FD1  082D               	movf	___aldiv@divisor,w
  5292  0FD2  0231               	subwf	___aldiv@dividend,w
  5293  0FD3                     u3965:	
  5294  0FD3  1C03               	skipc
  5295  0FD4  2FDE               	goto	l4389
  5296  0FD5  082D               	movf	___aldiv@divisor,w
  5297  0FD6  02B1               	subwf	___aldiv@dividend,f
  5298  0FD7  082E               	movf	___aldiv@divisor+1,w
  5299  0FD8  3BB2               	subwfb	___aldiv@dividend+1,f
  5300  0FD9  082F               	movf	___aldiv@divisor+2,w
  5301  0FDA  3BB3               	subwfb	___aldiv@dividend+2,f
  5302  0FDB  0830               	movf	___aldiv@divisor+3,w
  5303  0FDC  3BB4               	subwfb	___aldiv@dividend+3,f
  5304  0FDD  1438               	bsf	___aldiv@quotient,0
  5305  0FDE                     l4389:	
  5306  0FDE  3001               	movlw	1
  5307  0FDF                     u3975:	
  5308  0FDF  36B0               	lsrf	___aldiv@divisor+3,f
  5309  0FE0  0CAF               	rrf	___aldiv@divisor+2,f
  5310  0FE1  0CAE               	rrf	___aldiv@divisor+1,f
  5311  0FE2  0CAD               	rrf	___aldiv@divisor,f
  5312  0FE3  0B89               	decfsz	9,f
  5313  0FE4  2FDF               	goto	u3975
  5314  0FE5  3001               	movlw	1
  5315  0FE6  02B6               	subwf	___aldiv@counter,f
  5316  0FE7  1D03               	btfss	3,2
  5317  0FE8  2FBE               	goto	l4381
  5318  0FE9                     l4393:	
  5319  0FE9  0837               	movf	___aldiv@sign,w
  5320  0FEA  1903               	btfsc	3,2
  5321  0FEB  2FF7               	goto	l4397
  5322  0FEC  09B8               	comf	___aldiv@quotient,f
  5323  0FED  09B9               	comf	___aldiv@quotient+1,f
  5324  0FEE  09BA               	comf	___aldiv@quotient+2,f
  5325  0FEF  09BB               	comf	___aldiv@quotient+3,f
  5326  0FF0  0AB8               	incf	___aldiv@quotient,f
  5327  0FF1  1903               	skipnz
  5328  0FF2  0AB9               	incf	___aldiv@quotient+1,f
  5329  0FF3  1903               	skipnz
  5330  0FF4  0ABA               	incf	___aldiv@quotient+2,f
  5331  0FF5  1903               	skipnz
  5332  0FF6  0ABB               	incf	___aldiv@quotient+3,f
  5333  0FF7                     l4397:	
  5334  0FF7  083B               	movf	___aldiv@quotient+3,w
  5335  0FF8  00B0               	movwf	?___aldiv+3
  5336  0FF9  083A               	movf	___aldiv@quotient+2,w
  5337  0FFA  00AF               	movwf	?___aldiv+2
  5338  0FFB  0839               	movf	___aldiv@quotient+1,w
  5339  0FFC  00AE               	movwf	?___aldiv+1
  5340  0FFD  0838               	movf	___aldiv@quotient,w
  5341  0FFE  00AD               	movwf	?___aldiv
  5342  0FFF  0008               	return
  5343  1000                     __end_of___aldiv:	
  5344                           
  5345                           	psect	text15
  5346  0F20                     __ptext15:	
  5347 ;; *************** function _PROTOCOL_I2C_Send_int8_t *****************
  5348 ;; Defined at:
  5349 ;;		line 297 in file "protocol.c"
  5350 ;; Parameters:    Size  Location     Type
  5351 ;;  length          1    wreg     unsigned char 
  5352 ;;  pbuffer         1   35[BANK0 ] PTR char 
  5353 ;;		 -> PROTOCOL_Send_int8_t@pbuf(1), inv_handler@data(2), 
  5354 ;; Auto vars:     Size  Location     Type
  5355 ;;  length          1   38[BANK0 ] unsigned char 
  5356 ;; Return value:  Size  Location     Type
  5357 ;;                  1    wreg      void 
  5358 ;; Registers used:
  5359 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5360 ;; Tracked objects:
  5361 ;;		On entry : 0/0
  5362 ;;		On exit  : 0/0
  5363 ;;		Unchanged: 0/0
  5364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5365 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5366 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5367 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5368 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5369 ;;Total ram usage:        4 bytes
  5370 ;; Hardware stack levels used:    1
  5371 ;; Hardware stack levels required when called:    8
  5372 ;; This function calls:
  5373 ;;		_PROTOCOL_I2C_Set_TLV
  5374 ;;		_printf
  5375 ;; This function is called by:
  5376 ;;		_inv_handler
  5377 ;; This function uses a non-reentrant model
  5378 ;;
  5379                           
  5380                           
  5381                           ;psect for function _PROTOCOL_I2C_Send_int8_t
  5382  0F20                     _PROTOCOL_I2C_Send_int8_t:	
  5383                           
  5384                           ;incstack = 0
  5385                           ; Regs used in _PROTOCOL_I2C_Send_int8_t: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5386                           ;PROTOCOL_I2C_Send_int8_t@length stored from wreg
  5387  0F20  0020               	movlb	0	; select bank0
  5388  0F21  00C6               	movwf	PROTOCOL_I2C_Send_int8_t@length
  5389                           
  5390                           ;protocol.c: 298: if (backplane_slave_enabled) {
  5391  0F22  0021               	movlb	1	; select bank1
  5392  0F23  083A               	movf	_backplane_slave_enabled^(0+128),w
  5393  0F24  1903               	btfsc	3,2
  5394  0F25  2F4C               	goto	l4335
  5395                           
  5396                           ;protocol.c: 299: for (i=0; i<length; i++) {
  5397  0F26  0020               	movlb	0	; select bank0
  5398  0F27  01E5               	clrf	_i
  5399  0F28                     l4331:	
  5400  0F28  0846               	movf	PROTOCOL_I2C_Send_int8_t@length,w
  5401  0F29  0265               	subwf	_i,w
  5402  0F2A  1803               	btfsc	3,0
  5403  0F2B  2F40               	goto	l4333
  5404                           
  5405                           ;protocol.c: 300: sendbuf[i] = (uint8_t)pbuffer[i];
  5406  0F2C  0865               	movf	_i,w
  5407  0F2D  0743               	addwf	PROTOCOL_I2C_Send_int8_t@pbuffer,w
  5408  0F2E  00C4               	movwf	??_PROTOCOL_I2C_Send_int8_t
  5409  0F2F  0844               	movf	??_PROTOCOL_I2C_Send_int8_t,w
  5410  0F30  0086               	movwf	6
  5411  0F31  0187               	clrf	7
  5412  0F32  0801               	movf	1,w
  5413  0F33  00C5               	movwf	??_PROTOCOL_I2C_Send_int8_t+1
  5414  0F34  0865               	movf	_i,w
  5415  0F35  3E50               	addlw	(low (_sendbuf| (0+256)))& (0+255)
  5416  0F36  0086               	movwf	6
  5417  0F37  3001               	movlw	1	; select bank2/3
  5418  0F38  0087               	movwf	7
  5419  0F39  0845               	movf	??_PROTOCOL_I2C_Send_int8_t+1,w
  5420  0F3A  0081               	movwf	1
  5421  0F3B  3001               	movlw	1
  5422  0F3C  00C4               	movwf	??_PROTOCOL_I2C_Send_int8_t
  5423  0F3D  0844               	movf	??_PROTOCOL_I2C_Send_int8_t,w
  5424  0F3E  07E5               	addwf	_i,f
  5425  0F3F  2F28               	goto	l4331
  5426  0F40                     l4333:	
  5427                           
  5428                           ;protocol.c: 301: }
  5429                           ;protocol.c: 302: PROTOCOL_I2C_Set_TLV(0x02, length, &sendbuf[0]);
  5430  0F40  0846               	movf	PROTOCOL_I2C_Send_int8_t@length,w
  5431  0F41  00C4               	movwf	??_PROTOCOL_I2C_Send_int8_t
  5432  0F42  0844               	movf	??_PROTOCOL_I2C_Send_int8_t,w
  5433  0F43  00A1               	movwf	PROTOCOL_I2C_Set_TLV@length
  5434  0F44  3050               	movlw	low _sendbuf
  5435  0F45  00A2               	movwf	PROTOCOL_I2C_Set_TLV@pbuffer
  5436  0F46  3001               	movlw	high _sendbuf
  5437  0F47  00A3               	movwf	PROTOCOL_I2C_Set_TLV@pbuffer+1
  5438  0F48  3002               	movlw	2
  5439  0F49  318B  23E8         	fcall	_PROTOCOL_I2C_Set_TLV
  5440                           
  5441                           ;protocol.c: 303: } else {
  5442  0F4B  0008               	return
  5443  0F4C                     l4335:	
  5444                           
  5445                           ;protocol.c: 304: length--;
  5446  0F4C  3001               	movlw	1
  5447  0F4D  0020               	movlb	0	; select bank0
  5448  0F4E  02C6               	subwf	PROTOCOL_I2C_Send_int8_t@length,f
  5449                           
  5450                           ;protocol.c: 305: for (i=0; i<length; i++) printf("%d,", (int8_t)pbuffer[i]);
  5451  0F4F  01E5               	clrf	_i
  5452  0F50                     l4343:	
  5453  0F50  0846               	movf	PROTOCOL_I2C_Send_int8_t@length,w
  5454  0F51  0265               	subwf	_i,w
  5455  0F52  1803               	btfsc	3,0
  5456  0F53  2F6C               	goto	l4345
  5457  0F54  305F               	movlw	low (STR_22| (0+32768))
  5458  0F55  00AF               	movwf	printf@f
  5459  0F56  3087               	movlw	high (STR_22| (0+32768))
  5460  0F57  00B0               	movwf	printf@f+1
  5461  0F58  0865               	movf	_i,w
  5462  0F59  0743               	addwf	PROTOCOL_I2C_Send_int8_t@pbuffer,w
  5463  0F5A  00C4               	movwf	??_PROTOCOL_I2C_Send_int8_t
  5464  0F5B  0844               	movf	??_PROTOCOL_I2C_Send_int8_t,w
  5465  0F5C  0086               	movwf	6
  5466  0F5D  0187               	clrf	7
  5467  0F5E  0801               	movf	1,w
  5468  0F5F  00B1               	movwf	?_printf+2
  5469  0F60  01B2               	clrf	?_printf+3
  5470  0F61  1BB1               	btfsc	?_printf+2,7
  5471  0F62  03B2               	decf	?_printf+3,f
  5472  0F63  3180  2081  318F   	fcall	_printf
  5473  0F66  3001               	movlw	1
  5474  0F67  0020               	movlb	0	; select bank0
  5475  0F68  00C4               	movwf	??_PROTOCOL_I2C_Send_int8_t
  5476  0F69  0844               	movf	??_PROTOCOL_I2C_Send_int8_t,w
  5477  0F6A  07E5               	addwf	_i,f
  5478  0F6B  2F50               	goto	l4343
  5479  0F6C                     l4345:	
  5480                           
  5481                           ;protocol.c: 306: printf("%d\n", (int8_t)pbuffer[i]);
  5482  0F6C  30E6               	movlw	low ((STR_16+6)| (0+32768))
  5483  0F6D  00AF               	movwf	printf@f
  5484  0F6E  3086               	movlw	high ((STR_16+6)| (0+32768))
  5485  0F6F  00B0               	movwf	printf@f+1
  5486  0F70  0865               	movf	_i,w
  5487  0F71  0743               	addwf	PROTOCOL_I2C_Send_int8_t@pbuffer,w
  5488  0F72  00C4               	movwf	??_PROTOCOL_I2C_Send_int8_t
  5489  0F73  0844               	movf	??_PROTOCOL_I2C_Send_int8_t,w
  5490  0F74  0086               	movwf	6
  5491  0F75  0187               	clrf	7
  5492  0F76  0801               	movf	1,w
  5493  0F77  00B1               	movwf	?_printf+2
  5494  0F78  01B2               	clrf	?_printf+3
  5495  0F79  1BB1               	btfsc	?_printf+2,7
  5496  0F7A  03B2               	decf	?_printf+3,f
  5497  0F7B  3180  2081         	fcall	_printf
  5498  0F7D  0008               	return
  5499  0F7E                     __end_of_PROTOCOL_I2C_Send_int8_t:	
  5500                           
  5501                           	psect	text16
  5502  0081                     __ptext16:	
  5503 ;; *************** function _printf *****************
  5504 ;; Defined at:
  5505 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  5506 ;; Parameters:    Size  Location     Type
  5507 ;;  f               2   15[BANK0 ] PTR const unsigned char 
  5508 ;;		 -> STR_48(10), STR_47(9), STR_46(10), STR_45(9), 
  5509 ;;		 -> STR_44(4), STR_43(4), STR_42(4), STR_41(4), 
  5510 ;;		 -> STR_40(4), STR_39(4), STR_38(4), STR_37(4), 
  5511 ;;		 -> STR_36(14), STR_35(9), STR_34(10), STR_33(9), 
  5512 ;;		 -> STR_32(10), STR_31(9), STR_30(7), STR_29(4), 
  5513 ;;		 -> STR_28(4), STR_27(9), STR_26(4), STR_25(4), 
  5514 ;;		 -> STR_24(10), STR_23(4), STR_22(4), STR_21(8), 
  5515 ;;		 -> STR_20(4), STR_19(4), STR_18(9), STR_17(6), 
  5516 ;;		 -> STR_16(10), STR_13(10), STR_9(10), STR_5(10), 
  5517 ;;		 -> STR_3(5), 
  5518 ;; Auto vars:     Size  Location     Type
  5519 ;;  tmpval          4    0        struct .
  5520 ;;  width           2   32[BANK0 ] int 
  5521 ;;  len             2   29[BANK0 ] unsigned int 
  5522 ;;  val             2   27[BANK0 ] unsigned int 
  5523 ;;  cp              2   24[BANK0 ] PTR const unsigned char 
  5524 ;;		 -> STR_10(4), buf(48), STR_2(7), ROM(8192), 
  5525 ;;		 -> printf@c(1), STR_1(10), I2C2_ISR@i2c_address(2), 
  5526 ;;  c               1   34[BANK0 ] char 
  5527 ;;  flag            1   31[BANK0 ] unsigned char 
  5528 ;;  ap              1   26[BANK0 ] PTR void [1]
  5529 ;;		 -> ?_printf(2), 
  5530 ;;  prec            1   23[BANK0 ] char 
  5531 ;; Return value:  Size  Location     Type
  5532 ;;                  2   15[BANK0 ] int 
  5533 ;; Registers used:
  5534 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5535 ;; Tracked objects:
  5536 ;;		On entry : 0/0
  5537 ;;		On exit  : 0/0
  5538 ;;		Unchanged: 0/0
  5539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5540 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5541 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5542 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5543 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5544 ;;Total ram usage:       20 bytes
  5545 ;; Hardware stack levels used:    1
  5546 ;; Hardware stack levels required when called:    7
  5547 ;; This function calls:
  5548 ;;		___lwdiv
  5549 ;;		___lwmod
  5550 ;;		___wmul
  5551 ;;		_isdigit
  5552 ;;		_putch
  5553 ;; This function is called by:
  5554 ;;		_PROTOCOL_Loop
  5555 ;;		_PROTOCOL_I2C_Send_int8_t
  5556 ;; This function uses a non-reentrant model
  5557 ;;
  5558                           
  5559                           
  5560                           ;psect for function _printf
  5561  0081                     _printf:	
  5562                           
  5563                           ;doprnt.c: 466: va_list ap;
  5564                           ;doprnt.c: 499: signed char c;
  5565                           ;doprnt.c: 501: int width;
  5566                           ;doprnt.c: 506: signed char prec;
  5567                           ;doprnt.c: 508: unsigned char flag;
  5568                           ;doprnt.c: 523: union {
  5569                           ;doprnt.c: 524: unsigned long vd;
  5570                           ;doprnt.c: 525: double integ;
  5571                           ;doprnt.c: 526: } tmpval;
  5572                           ;doprnt.c: 528: unsigned int val;
  5573                           ;doprnt.c: 529: unsigned len;
  5574                           ;doprnt.c: 530: const char * cp;
  5575                           ;doprnt.c: 533: *ap = __va_start();
  5576                           
  5577                           ;incstack = 0
  5578                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5579  0081  3031               	movlw	(low ((?_printf| 0+2)))& (0+255)
  5580  0082  0020               	movlb	0	; select bank0
  5581  0083  00B3               	movwf	??_printf
  5582  0084  0833               	movf	??_printf,w
  5583  0085  00BA               	movwf	printf@ap
  5584  0086                     l4255:	
  5585                           ;doprnt.c: 536: while(c = *f++) {
  5586                           
  5587  0086  0020               	movlb	0	; select bank0
  5588  0087  0830               	movf	printf@f+1,w
  5589  0088  00B4               	movwf	??_printf+1
  5590  0089  082F               	movf	printf@f,w
  5591  008A  00B3               	movwf	??_printf
  5592  008B  0AAF               	incf	printf@f,f
  5593  008C  1903               	skipnz
  5594  008D  0AB0               	incf	printf@f+1,f
  5595  008E  0833               	movf	??_printf,w
  5596  008F  0084               	movwf	4
  5597  0090  0834               	movf	??_printf+1,w
  5598  0091  0085               	movwf	5
  5599  0092  0800               	movf	0,w	;code access
  5600  0093  00B5               	movwf	??_printf+2
  5601  0094  0835               	movf	??_printf+2,w
  5602  0095  00C2               	movwf	printf@c
  5603  0096  0842               	movf	printf@c,w
  5604  0097  1903               	btfsc	3,2
  5605  0098  0008               	return
  5606                           
  5607                           ;doprnt.c: 538: if(c != '%')
  5608  0099  3025               	movlw	37
  5609  009A  0642               	xorwf	printf@c,w
  5610  009B  1903               	btfsc	3,2
  5611  009C  28A2               	goto	l4131
  5612                           
  5613                           ;doprnt.c: 540: {
  5614                           ;doprnt.c: 541: (putch(c) );
  5615  009D  0842               	movf	printf@c,w
  5616  009E  318A  222D  3180   	fcall	_putch
  5617                           
  5618                           ;doprnt.c: 542: continue;
  5619  00A1  2886               	goto	l4255
  5620  00A2                     l4131:	
  5621                           
  5622                           ;doprnt.c: 543: }
  5623                           ;doprnt.c: 546: width = 0;
  5624  00A2  0020               	movlb	0	; select bank0
  5625  00A3  01C0               	clrf	printf@width
  5626  00A4  01C1               	clrf	printf@width+1
  5627                           
  5628                           ;doprnt.c: 548: flag = 0;
  5629  00A5  01BF               	clrf	printf@flag
  5630                           
  5631                           ;doprnt.c: 551: switch(*f) {
  5632                           
  5633                           ;doprnt.c: 550: for(;;) {
  5634  00A6  28AC               	goto	l4137
  5635  00A7                     l565:	
  5636                           ;doprnt.c: 579: case '0':
  5637                           
  5638                           
  5639                           ;doprnt.c: 580: flag |= 0x04;
  5640  00A7  153F               	bsf	printf@flag,2
  5641                           
  5642                           ;doprnt.c: 581: f++;
  5643  00A8  3001               	movlw	1
  5644  00A9  07AF               	addwf	printf@f,f
  5645  00AA  3000               	movlw	0
  5646  00AB  3DB0               	addwfc	printf@f+1,f
  5647  00AC                     l4137:	
  5648                           ;doprnt.c: 584: }
  5649                           
  5650                           ;doprnt.c: 582: continue;
  5651                           
  5652  00AC  082F               	movf	printf@f,w
  5653  00AD  0084               	movwf	4
  5654  00AE  0830               	movf	printf@f+1,w
  5655  00AF  0085               	movwf	5
  5656  00B0  0800               	movf	0,w	;code access
  5657                           
  5658                           ; Switch size 1, requested type "space"
  5659                           ; Number of cases is 1, Range of values is 48 to 48
  5660                           ; switch strategies available:
  5661                           ; Name         Instructions Cycles
  5662                           ; simple_byte            4     3 (average)
  5663                           ; direct_byte           11     9 (fixed)
  5664                           ; jumptable            263     9 (fixed)
  5665                           ;	Chosen strategy is simple_byte
  5666  00B1  3A30               	xorlw	48	; case 48
  5667  00B2  1903               	skipnz
  5668  00B3  28A7               	goto	l565
  5669  00B4  28B5               	goto	l4139
  5670  00B5                     l4139:	
  5671                           ;doprnt.c: 586: }
  5672                           
  5673                           ;doprnt.c: 585: break;
  5674                           
  5675                           
  5676                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5677  00B5  082F               	movf	printf@f,w
  5678  00B6  0084               	movwf	4
  5679  00B7  0830               	movf	printf@f+1,w
  5680  00B8  0085               	movwf	5
  5681  00B9  0800               	movf	0,w	;code access
  5682  00BA  318A  2270  3180   	fcall	_isdigit
  5683  00BD  1C03               	btfss	3,0
  5684  00BE  2956               	goto	l4187
  5685                           
  5686                           ;doprnt.c: 598: width = 0;
  5687  00BF  0020               	movlb	0	; select bank0
  5688  00C0  01C0               	clrf	printf@width
  5689  00C1  01C1               	clrf	printf@width+1
  5690  00C2                     l4143:	
  5691                           ;doprnt.c: 599: do {
  5692                           
  5693                           
  5694                           ;doprnt.c: 600: width *= 10;
  5695  00C2  300A               	movlw	10
  5696  00C3  0020               	movlb	0	; select bank0
  5697  00C4  00A1               	movwf	___wmul@multiplier
  5698  00C5  3000               	movlw	0
  5699  00C6  00A2               	movwf	___wmul@multiplier+1
  5700  00C7  0841               	movf	printf@width+1,w
  5701  00C8  00A4               	movwf	___wmul@multiplicand+1
  5702  00C9  0840               	movf	printf@width,w
  5703  00CA  00A3               	movwf	___wmul@multiplicand
  5704  00CB  318B  2331  3180   	fcall	___wmul
  5705  00CE  0020               	movlb	0	; select bank0
  5706  00CF  0822               	movf	?___wmul+1,w
  5707  00D0  00C1               	movwf	printf@width+1
  5708  00D1  0821               	movf	?___wmul,w
  5709  00D2  00C0               	movwf	printf@width
  5710                           
  5711                           ;doprnt.c: 601: width += *f++ - '0';
  5712  00D3  082F               	movf	printf@f,w
  5713  00D4  0084               	movwf	4
  5714  00D5  0830               	movf	printf@f+1,w
  5715  00D6  0085               	movwf	5
  5716  00D7  0800               	movf	0,w	;code access
  5717  00D8  3ED0               	addlw	208
  5718  00D9  00B3               	movwf	??_printf
  5719  00DA  30FF               	movlw	255
  5720  00DB  1803               	skipnc
  5721  00DC  3000               	movlw	0
  5722  00DD  00B4               	movwf	??_printf+1
  5723  00DE  0833               	movf	??_printf,w
  5724  00DF  07C0               	addwf	printf@width,f
  5725  00E0  0834               	movf	??_printf+1,w
  5726  00E1  3DC1               	addwfc	printf@width+1,f
  5727  00E2  3001               	movlw	1
  5728  00E3  07AF               	addwf	printf@f,f
  5729  00E4  3000               	movlw	0
  5730  00E5  3DB0               	addwfc	printf@f+1,f
  5731                           
  5732                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5733  00E6  082F               	movf	printf@f,w
  5734  00E7  0084               	movwf	4
  5735  00E8  0830               	movf	printf@f+1,w
  5736  00E9  0085               	movwf	5
  5737  00EA  0800               	movf	0,w	;code access
  5738  00EB  318A  2270  3180   	fcall	_isdigit
  5739  00EE  1C03               	btfss	3,0
  5740  00EF  2956               	goto	l4187
  5741  00F0  28C2               	goto	l4143
  5742  00F1                     l4151:	
  5743                           ;doprnt.c: 728: case 's':
  5744                           
  5745                           ;doprnt.c: 698: case 'i':
  5746                           ;doprnt.c: 699: break;
  5747                           
  5748                           ;doprnt.c: 697: case 'd':
  5749                           
  5750                           ;doprnt.c: 638: goto alldone;
  5751                           
  5752                           ;doprnt.c: 637: case 0:
  5753                           
  5754                           ;doprnt.c: 608: }
  5755                           ;doprnt.c: 635: switch(c = *f++) {
  5756                           
  5757                           
  5758                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  5759  00F1  0020               	movlb	0	; select bank0
  5760  00F2  083A               	movf	printf@ap,w
  5761  00F3  0086               	movwf	6
  5762  00F4  0187               	clrf	7
  5763  00F5  3F40               	moviw [0]fsr1
  5764  00F6  00B8               	movwf	printf@cp
  5765  00F7  3F41               	moviw [1]fsr1
  5766  00F8  00B9               	movwf	printf@cp+1
  5767  00F9  3002               	movlw	2
  5768  00FA  00B3               	movwf	??_printf
  5769  00FB  0833               	movf	??_printf,w
  5770  00FC  07BA               	addwf	printf@ap,f
  5771                           
  5772                           ;doprnt.c: 740: if(!cp)
  5773  00FD  0838               	movf	printf@cp,w
  5774  00FE  0439               	iorwf	printf@cp+1,w
  5775  00FF  1D03               	btfss	3,2
  5776  0100  2905               	goto	l4159
  5777                           
  5778                           ;doprnt.c: 741: cp = "(null)";
  5779  0101  3049               	movlw	low (STR_2| (0+32768))
  5780  0102  00B8               	movwf	printf@cp
  5781  0103  3087               	movlw	high (STR_2| (0+32768))
  5782  0104  00B9               	movwf	printf@cp+1
  5783  0105                     l4159:	
  5784                           
  5785                           ;doprnt.c: 745: len = 0;
  5786  0105  01BD               	clrf	printf@len
  5787  0106  01BE               	clrf	printf@len+1
  5788  0107                     l4163:	
  5789                           ;doprnt.c: 746: while(cp[len])
  5790                           
  5791  0107  0838               	movf	printf@cp,w
  5792  0108  073D               	addwf	printf@len,w
  5793  0109  0084               	movwf	4
  5794  010A  0839               	movf	printf@cp+1,w
  5795  010B  3D3E               	addwfc	printf@len+1,w
  5796  010C  0085               	movwf	5
  5797  010D  0012               	moviw fsr0++
  5798  010E  1903               	btfsc	3,2
  5799  010F  2915               	goto	l4165
  5800                           
  5801                           ;doprnt.c: 747: len++;
  5802  0110  3001               	movlw	1
  5803  0111  07BD               	addwf	printf@len,f
  5804  0112  3000               	movlw	0
  5805  0113  3DBE               	addwfc	printf@len+1,f
  5806  0114  2907               	goto	l4163
  5807  0115                     l4165:	
  5808                           ;doprnt.c: 750: dostring:
  5809                           
  5810                           
  5811                           ;doprnt.c: 757: if(width > len)
  5812  0115  0841               	movf	printf@width+1,w
  5813  0116  023E               	subwf	printf@len+1,w
  5814  0117  1D03               	skipz
  5815  0118  291B               	goto	u3555
  5816  0119  0840               	movf	printf@width,w
  5817  011A  023D               	subwf	printf@len,w
  5818  011B                     u3555:	
  5819  011B  1803               	skipnc
  5820  011C  2922               	goto	l4169
  5821                           
  5822                           ;doprnt.c: 758: width -= len;
  5823  011D  083D               	movf	printf@len,w
  5824  011E  02C0               	subwf	printf@width,f
  5825  011F  083E               	movf	printf@len+1,w
  5826  0120  3BC1               	subwfb	printf@width+1,f
  5827  0121  2924               	goto	l4173
  5828  0122                     l4169:	
  5829                           
  5830                           ;doprnt.c: 759: else
  5831                           ;doprnt.c: 760: width = 0;
  5832  0122  01C0               	clrf	printf@width
  5833  0123  01C1               	clrf	printf@width+1
  5834  0124                     l4173:	
  5835                           ;doprnt.c: 764: while(width--)
  5836                           
  5837  0124  30FF               	movlw	255
  5838  0125  0020               	movlb	0	; select bank0
  5839  0126  07C0               	addwf	printf@width,f
  5840  0127  30FF               	movlw	255
  5841  0128  3DC1               	addwfc	printf@width+1,f
  5842  0129  0A40               	incf	printf@width,w
  5843  012A  1903               	btfsc	3,2
  5844  012B  0A41               	incf	printf@width+1,w
  5845  012C  1903               	btfsc	3,2
  5846  012D  2940               	goto	l4179
  5847                           
  5848                           ;doprnt.c: 765: (putch(' ') );
  5849  012E  3020               	movlw	32
  5850  012F  318A  222D  3180   	fcall	_putch
  5851  0132  2924               	goto	l4173
  5852  0133                     l4175:	
  5853                           ;doprnt.c: 767: while(len--)
  5854                           
  5855                           
  5856                           ;doprnt.c: 768: (putch(*cp++) );
  5857  0133  0838               	movf	printf@cp,w
  5858  0134  0084               	movwf	4
  5859  0135  0839               	movf	printf@cp+1,w
  5860  0136  0085               	movwf	5
  5861  0137  0800               	movf	0,w	;code access
  5862  0138  318A  222D  3180   	fcall	_putch
  5863  013B  3001               	movlw	1
  5864  013C  0020               	movlb	0	; select bank0
  5865  013D  07B8               	addwf	printf@cp,f
  5866  013E  3000               	movlw	0
  5867  013F  3DB9               	addwfc	printf@cp+1,f
  5868  0140                     l4179:	
  5869  0140  3001               	movlw	1
  5870  0141  02BD               	subwf	printf@len,f
  5871  0142  3000               	movlw	0
  5872  0143  3BBE               	subwfb	printf@len+1,f
  5873  0144  0A3D               	incf	printf@len,w
  5874  0145  1D03               	skipz
  5875  0146  2933               	goto	l4175
  5876  0147  0A3E               	incf	printf@len+1,w
  5877  0148  1903               	btfsc	3,2
  5878  0149  2886               	goto	l4255
  5879  014A  2933               	goto	l4175
  5880  014B                     l4181:	
  5881                           ;doprnt.c: 802: default:
  5882                           
  5883                           ;doprnt.c: 774: continue;
  5884                           
  5885                           
  5886                           ;doprnt.c: 805: cp = (char *)&c;
  5887  014B  3042               	movlw	low printf@c
  5888  014C  00B8               	movwf	printf@cp
  5889  014D  3000               	movlw	high printf@c
  5890  014E  00B9               	movwf	printf@cp+1
  5891                           
  5892                           ;doprnt.c: 806: len = 1;
  5893  014F  3001               	movlw	1
  5894  0150  00BD               	movwf	printf@len
  5895  0151  3000               	movlw	0
  5896  0152  00BE               	movwf	printf@len+1
  5897                           
  5898                           ;doprnt.c: 807: goto dostring;
  5899  0153  2915               	goto	l4165
  5900  0154                     l593:	
  5901                           ;doprnt.c: 817: case 'u':
  5902                           
  5903                           
  5904                           ;doprnt.c: 818: flag |= 0x40;
  5905  0154  173F               	bsf	printf@flag,6
  5906                           
  5907                           ;doprnt.c: 822: }
  5908                           
  5909                           ;doprnt.c: 819: break;
  5910  0155  2974               	goto	l577
  5911  0156                     l4187:	
  5912  0156  0020               	movlb	0	; select bank0
  5913  0157  0830               	movf	printf@f+1,w
  5914  0158  00B4               	movwf	??_printf+1
  5915  0159  082F               	movf	printf@f,w
  5916  015A  00B3               	movwf	??_printf
  5917  015B  0AAF               	incf	printf@f,f
  5918  015C  1903               	skipnz
  5919  015D  0AB0               	incf	printf@f+1,f
  5920  015E  0833               	movf	??_printf,w
  5921  015F  0084               	movwf	4
  5922  0160  0834               	movf	??_printf+1,w
  5923  0161  0085               	movwf	5
  5924  0162  0800               	movf	0,w	;code access
  5925  0163  00C2               	movwf	printf@c
  5926                           
  5927                           ; Switch size 1, requested type "space"
  5928                           ; Number of cases is 5, Range of values is 0 to 117
  5929                           ; switch strategies available:
  5930                           ; Name         Instructions Cycles
  5931                           ; simple_byte           16     9 (average)
  5932                           ; direct_byte          242     6 (fixed)
  5933                           ; jumptable            260     6 (fixed)
  5934                           ;	Chosen strategy is simple_byte
  5935  0164  3A00               	xorlw	0	; case 0
  5936  0165  1903               	skipnz
  5937  0166  2A55               	goto	l617
  5938  0167  3A64               	xorlw	100	; case 100
  5939  0168  1903               	skipnz
  5940  0169  2974               	goto	l577
  5941  016A  3A0D               	xorlw	13	; case 105
  5942  016B  1903               	skipnz
  5943  016C  2974               	goto	l577
  5944  016D  3A1A               	xorlw	26	; case 115
  5945  016E  1903               	skipnz
  5946  016F  28F1               	goto	l4151
  5947  0170  3A06               	xorlw	6	; case 117
  5948  0171  1903               	skipnz
  5949  0172  2954               	goto	l593
  5950  0173  294B               	goto	l4181
  5951  0174                     l577:	
  5952                           
  5953                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  5954  0174  0020               	movlb	0	; select bank0
  5955  0175  1B3F               	btfsc	printf@flag,6
  5956  0176  298E               	goto	l4199
  5957                           
  5958                           ;doprnt.c: 1253: {
  5959                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5960  0177  083A               	movf	printf@ap,w
  5961  0178  0086               	movwf	6
  5962  0179  0187               	clrf	7
  5963  017A  3F40               	moviw [0]fsr1
  5964  017B  00BB               	movwf	printf@val
  5965  017C  3F41               	moviw [1]fsr1
  5966  017D  00BC               	movwf	printf@val+1
  5967  017E  3002               	movlw	2
  5968  017F  00B3               	movwf	??_printf
  5969  0180  0833               	movf	??_printf,w
  5970  0181  07BA               	addwf	printf@ap,f
  5971                           
  5972                           ;doprnt.c: 1261: if((int)val < 0) {
  5973  0182  1FBC               	btfss	printf@val+1,7
  5974  0183  2999               	goto	l4203
  5975                           
  5976                           ;doprnt.c: 1262: flag |= 0x03;
  5977  0184  3003               	movlw	3
  5978  0185  00B3               	movwf	??_printf
  5979  0186  0833               	movf	??_printf,w
  5980  0187  04BF               	iorwf	printf@flag,f
  5981                           
  5982                           ;doprnt.c: 1263: val = -val;
  5983  0188  09BB               	comf	printf@val,f
  5984  0189  09BC               	comf	printf@val+1,f
  5985  018A  0ABB               	incf	printf@val,f
  5986  018B  1903               	skipnz
  5987  018C  0ABC               	incf	printf@val+1,f
  5988                           
  5989                           ;doprnt.c: 1264: }
  5990                           ;doprnt.c: 1266: }
  5991  018D  2999               	goto	l4203
  5992  018E                     l4199:	
  5993                           
  5994                           ;doprnt.c: 1268: else
  5995                           ;doprnt.c: 1273: {
  5996                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5997  018E  083A               	movf	printf@ap,w
  5998  018F  0086               	movwf	6
  5999  0190  0187               	clrf	7
  6000  0191  3F40               	moviw [0]fsr1
  6001  0192  00BB               	movwf	printf@val
  6002  0193  3F41               	moviw [1]fsr1
  6003  0194  00BC               	movwf	printf@val+1
  6004  0195  3002               	movlw	2
  6005  0196  00B3               	movwf	??_printf
  6006  0197  0833               	movf	??_printf,w
  6007  0198  07BA               	addwf	printf@ap,f
  6008  0199                     l4203:	
  6009                           
  6010                           ;doprnt.c: 1287: }
  6011                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6012  0199  01C2               	clrf	printf@c
  6013  019A  0AC2               	incf	printf@c,f
  6014  019B  3005               	movlw	5
  6015  019C  0642               	xorwf	printf@c,w
  6016  019D  1903               	btfsc	3,2
  6017  019E  29BE               	goto	l4215
  6018  019F                     l4209:	
  6019                           
  6020                           ;doprnt.c: 1306: if(val < dpowers[c])
  6021  019F  0842               	movf	printf@c,w
  6022  01A0  00B3               	movwf	??_printf
  6023  01A1  01B4               	clrf	??_printf+1
  6024  01A2  35B3               	lslf	??_printf,f
  6025  01A3  0DB4               	rlf	??_printf+1,f
  6026  01A4  30C6               	movlw	low (_dpowers| (0+32768))
  6027  01A5  0733               	addwf	??_printf,w
  6028  01A6  0084               	movwf	4
  6029  01A7  3086               	movlw	high (_dpowers| (0+32768))
  6030  01A8  3D34               	addwfc	??_printf+1,w
  6031  01A9  0085               	movwf	5
  6032  01AA  3F00               	moviw [0]fsr0
  6033  01AB  00B5               	movwf	??_printf+2
  6034  01AC  3F01               	moviw [1]fsr0
  6035  01AD  00B6               	movwf	??_printf+3
  6036  01AE  0836               	movf	??_printf+3,w
  6037  01AF  023C               	subwf	printf@val+1,w
  6038  01B0  1D03               	skipz
  6039  01B1  29B4               	goto	u3615
  6040  01B2  0835               	movf	??_printf+2,w
  6041  01B3  023B               	subwf	printf@val,w
  6042  01B4                     u3615:	
  6043  01B4  1C03               	btfss	3,0
  6044  01B5  29BE               	goto	l4215
  6045                           
  6046                           ;doprnt.c: 1307: break;
  6047  01B6  3001               	movlw	1
  6048  01B7  00B3               	movwf	??_printf
  6049  01B8  0833               	movf	??_printf,w
  6050  01B9  07C2               	addwf	printf@c,f
  6051  01BA  3005               	movlw	5
  6052  01BB  0642               	xorwf	printf@c,w
  6053  01BC  1D03               	btfss	3,2
  6054  01BD  299F               	goto	l4209
  6055  01BE                     l4215:	
  6056                           
  6057                           ;doprnt.c: 1345: if(width && flag & 0x03)
  6058  01BE  0840               	movf	printf@width,w
  6059  01BF  0441               	iorwf	printf@width+1,w
  6060  01C0  1903               	btfsc	3,2
  6061  01C1  29CA               	goto	l600
  6062  01C2  083F               	movf	printf@flag,w
  6063  01C3  3903               	andlw	3
  6064  01C4  1903               	btfsc	3,2
  6065  01C5  29CA               	goto	l600
  6066                           
  6067                           ;doprnt.c: 1346: width--;
  6068  01C6  30FF               	movlw	255
  6069  01C7  07C0               	addwf	printf@width,f
  6070  01C8  30FF               	movlw	255
  6071  01C9  3DC1               	addwfc	printf@width+1,f
  6072  01CA                     l600:	
  6073                           
  6074                           ;doprnt.c: 1381: if(width > c)
  6075  01CA  0842               	movf	printf@c,w
  6076  01CB  00B3               	movwf	??_printf
  6077  01CC  01B4               	clrf	??_printf+1
  6078  01CD  1BB3               	btfsc	??_printf,7
  6079  01CE  03B4               	decf	??_printf+1,f
  6080  01CF  0834               	movf	??_printf+1,w
  6081  01D0  3A80               	xorlw	128
  6082  01D1  00B5               	movwf	??_printf+2
  6083  01D2  0841               	movf	printf@width+1,w
  6084  01D3  3A80               	xorlw	128
  6085  01D4  0235               	subwf	??_printf+2,w
  6086  01D5  1D03               	skipz
  6087  01D6  29D9               	goto	u3655
  6088  01D7  0840               	movf	printf@width,w
  6089  01D8  0233               	subwf	??_printf,w
  6090  01D9                     u3655:	
  6091  01D9  1803               	skipnc
  6092  01DA  29E6               	goto	l4223
  6093                           
  6094                           ;doprnt.c: 1382: width -= c;
  6095  01DB  0020               	movlb	0	; select bank0
  6096  01DC  0842               	movf	printf@c,w
  6097  01DD  00B3               	movwf	??_printf
  6098  01DE  01B4               	clrf	??_printf+1
  6099  01DF  1BB3               	btfsc	??_printf,7
  6100  01E0  03B4               	decf	??_printf+1,f
  6101  01E1  0833               	movf	??_printf,w
  6102  01E2  02C0               	subwf	printf@width,f
  6103  01E3  0834               	movf	??_printf+1,w
  6104  01E4  3BC1               	subwfb	printf@width+1,f
  6105  01E5  29E9               	goto	l4225
  6106  01E6                     l4223:	
  6107                           
  6108                           ;doprnt.c: 1383: else
  6109                           ;doprnt.c: 1384: width = 0;
  6110  01E6  0020               	movlb	0	; select bank0
  6111  01E7  01C0               	clrf	printf@width
  6112  01E8  01C1               	clrf	printf@width+1
  6113  01E9                     l4225:	
  6114                           
  6115                           ;doprnt.c: 1387: if(flag & 0x04) {
  6116  01E9  1D3F               	btfss	printf@flag,2
  6117  01EA  2A02               	goto	l4237
  6118                           
  6119                           ;doprnt.c: 1392: if(flag & 0x03)
  6120  01EB  083F               	movf	printf@flag,w
  6121  01EC  3903               	andlw	3
  6122  01ED  1903               	btfsc	3,2
  6123  01EE  29F3               	goto	l4231
  6124                           
  6125                           ;doprnt.c: 1393: (putch('-') );
  6126  01EF  302D               	movlw	45
  6127  01F0  318A  222D  3180   	fcall	_putch
  6128  01F3                     l4231:	
  6129                           
  6130                           ;doprnt.c: 1415: if(width)
  6131  01F3  0020               	movlb	0	; select bank0
  6132  01F4                     L2:	
  6133  01F4  0840               	movf	printf@width,w
  6134  01F5  0441               	iorwf	printf@width+1,w
  6135  01F6  1903               	btfsc	3,2
  6136  01F7  2A1B               	goto	l4247
  6137                           
  6138                           ;doprnt.c: 1417: (putch('0') );
  6139                           
  6140                           ;doprnt.c: 1416: do
  6141  01F8  3030               	movlw	48
  6142  01F9  318A  222D  3180   	fcall	_putch
  6143                           
  6144                           ;doprnt.c: 1418: while(--width);
  6145  01FC  30FF               	movlw	255
  6146  01FD  0020               	movlb	0	; select bank0
  6147  01FE  07C0               	addwf	printf@width,f
  6148  01FF  30FF               	movlw	255
  6149  0200  3DC1               	addwfc	printf@width+1,f
  6150  0201  29F4               	goto	L2
  6151  0202                     l4237:	
  6152                           ;doprnt.c: 1420: } else
  6153                           
  6154                           
  6155                           ;doprnt.c: 1422: {
  6156                           ;doprnt.c: 1424: if(width
  6157                           ;doprnt.c: 1428: )
  6158  0202  0840               	movf	printf@width,w
  6159  0203  0441               	iorwf	printf@width+1,w
  6160  0204  1903               	btfsc	3,2
  6161  0205  2A13               	goto	l4243
  6162  0206                     l4239:	
  6163                           ;doprnt.c: 1429: do
  6164                           
  6165                           
  6166                           ;doprnt.c: 1430: (putch(' ') );
  6167  0206  3020               	movlw	32
  6168  0207  318A  222D  3180   	fcall	_putch
  6169                           
  6170                           ;doprnt.c: 1431: while(--width);
  6171  020A  30FF               	movlw	255
  6172  020B  0020               	movlb	0	; select bank0
  6173  020C  07C0               	addwf	printf@width,f
  6174  020D  30FF               	movlw	255
  6175  020E  3DC1               	addwfc	printf@width+1,f
  6176  020F  0840               	movf	printf@width,w
  6177  0210  0441               	iorwf	printf@width+1,w
  6178  0211  1D03               	btfss	3,2
  6179  0212  2A06               	goto	l4239
  6180  0213                     l4243:	
  6181                           
  6182                           ;doprnt.c: 1438: if(flag & 0x03)
  6183  0213  083F               	movf	printf@flag,w
  6184  0214  3903               	andlw	3
  6185  0215  1903               	btfsc	3,2
  6186  0216  2A1B               	goto	l4247
  6187                           
  6188                           ;doprnt.c: 1439: (putch('-') );
  6189  0217  302D               	movlw	45
  6190  0218  318A  222D  3180   	fcall	_putch
  6191  021B                     l4247:	
  6192                           
  6193                           ;doprnt.c: 1469: }
  6194                           ;doprnt.c: 1472: prec = c;
  6195  021B  0020               	movlb	0	; select bank0
  6196  021C  0842               	movf	printf@c,w
  6197  021D  00B3               	movwf	??_printf
  6198  021E  0833               	movf	??_printf,w
  6199  021F  00B7               	movwf	printf@prec
  6200  0220                     l4253:	
  6201                           ;doprnt.c: 1474: while(prec--) {
  6202                           
  6203  0220  30FF               	movlw	255
  6204  0221  0020               	movlb	0	; select bank0
  6205  0222  00B3               	movwf	??_printf
  6206  0223  0833               	movf	??_printf,w
  6207  0224  07B7               	addwf	printf@prec,f
  6208  0225  0A37               	incf	printf@prec,w
  6209  0226  1903               	btfsc	3,2
  6210  0227  2886               	goto	l4255
  6211                           
  6212                           ;doprnt.c: 1478: {
  6213                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6214  0228  300A               	movlw	10
  6215  0229  00A9               	movwf	___lwmod@divisor
  6216  022A  3000               	movlw	0
  6217  022B  00AA               	movwf	___lwmod@divisor+1
  6218  022C  0837               	movf	printf@prec,w
  6219  022D  00B3               	movwf	??_printf
  6220  022E  01B4               	clrf	??_printf+1
  6221  022F  35B3               	lslf	??_printf,f
  6222  0230  0DB4               	rlf	??_printf+1,f
  6223  0231  30C6               	movlw	low (_dpowers| (0+32768))
  6224  0232  0733               	addwf	??_printf,w
  6225  0233  0084               	movwf	4
  6226  0234  3086               	movlw	high (_dpowers| (0+32768))
  6227  0235  3D34               	addwfc	??_printf+1,w
  6228  0236  0085               	movwf	5
  6229  0237  3F00               	moviw [0]fsr0
  6230  0238  00A1               	movwf	___lwdiv@divisor
  6231  0239  3F01               	moviw [1]fsr0
  6232  023A  00A2               	movwf	___lwdiv@divisor+1
  6233  023B  083C               	movf	printf@val+1,w
  6234  023C  00A4               	movwf	___lwdiv@dividend+1
  6235  023D  083B               	movf	printf@val,w
  6236  023E  00A3               	movwf	___lwdiv@dividend
  6237  023F  318D  25CE  3180   	fcall	___lwdiv
  6238  0242  0020               	movlb	0	; select bank0
  6239  0243  0822               	movf	?___lwdiv+1,w
  6240  0244  00AC               	movwf	___lwmod@dividend+1
  6241  0245  0821               	movf	?___lwdiv,w
  6242  0246  00AB               	movwf	___lwmod@dividend
  6243  0247  318D  2543  3180   	fcall	___lwmod
  6244  024A  0020               	movlb	0	; select bank0
  6245  024B  0829               	movf	?___lwmod,w
  6246  024C  3E30               	addlw	48
  6247  024D  00B5               	movwf	??_printf+2
  6248  024E  0835               	movf	??_printf+2,w
  6249  024F  00C2               	movwf	printf@c
  6250                           
  6251                           ;doprnt.c: 1523: }
  6252                           ;doprnt.c: 1524: (putch(c) );
  6253  0250  0842               	movf	printf@c,w
  6254  0251  318A  222D  3180   	fcall	_putch
  6255  0254  2A20               	goto	l4253
  6256  0255                     l617:	
  6257                           ;doprnt.c: 1540: return 0;
  6258                           ;	Return value of _printf is never used
  6259                           
  6260                           ;doprnt.c: 1525: }
  6261                           ;doprnt.c: 1533: }
  6262                           ;doprnt.c: 1535: alldone:
  6263                           
  6264  0255  0008               	return
  6265  0256                     __end_of_printf:	
  6266                           
  6267                           	psect	text17
  6268  0A2D                     __ptext17:	
  6269 ;; *************** function _putch *****************
  6270 ;; Defined at:
  6271 ;;		line 160 in file "mcc_generated_files/eusart.c"
  6272 ;; Parameters:    Size  Location     Type
  6273 ;;  txData          1    wreg     unsigned char 
  6274 ;; Auto vars:     Size  Location     Type
  6275 ;;  txData          1    3[BANK0 ] unsigned char 
  6276 ;; Return value:  Size  Location     Type
  6277 ;;                  1    wreg      void 
  6278 ;; Registers used:
  6279 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6280 ;; Tracked objects:
  6281 ;;		On entry : 0/0
  6282 ;;		On exit  : 0/0
  6283 ;;		Unchanged: 0/0
  6284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6286 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6288 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6289 ;;Total ram usage:        1 bytes
  6290 ;; Hardware stack levels used:    1
  6291 ;; Hardware stack levels required when called:    6
  6292 ;; This function calls:
  6293 ;;		_EUSART_Write
  6294 ;; This function is called by:
  6295 ;;		_printf
  6296 ;; This function uses a non-reentrant model
  6297 ;;
  6298                           
  6299                           
  6300                           ;psect for function _putch
  6301  0A2D                     _putch:	
  6302                           
  6303                           ;incstack = 0
  6304                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6305                           ;putch@txData stored from wreg
  6306  0A2D  0020               	movlb	0	; select bank0
  6307  0A2E  00A3               	movwf	putch@txData
  6308                           
  6309                           ;eusart.c: 162: EUSART_Write(txData);
  6310  0A2F  0823               	movf	putch@txData,w
  6311  0A30  318C  242D         	fcall	_EUSART_Write
  6312  0A32  0008               	return
  6313  0A33                     __end_of_putch:	
  6314                           
  6315                           	psect	text18
  6316  0C2D                     __ptext18:	
  6317 ;; *************** function _EUSART_Write *****************
  6318 ;; Defined at:
  6319 ;;		line 132 in file "mcc_generated_files/eusart.c"
  6320 ;; Parameters:    Size  Location     Type
  6321 ;;  txData          1    wreg     unsigned char 
  6322 ;; Auto vars:     Size  Location     Type
  6323 ;;  txData          1    2[BANK0 ] unsigned char 
  6324 ;; Return value:  Size  Location     Type
  6325 ;;                  1    wreg      void 
  6326 ;; Registers used:
  6327 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6328 ;; Tracked objects:
  6329 ;;		On entry : 0/0
  6330 ;;		On exit  : 0/0
  6331 ;;		Unchanged: 0/0
  6332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6334 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6335 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6336 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6337 ;;Total ram usage:        2 bytes
  6338 ;; Hardware stack levels used:    1
  6339 ;; Hardware stack levels required when called:    5
  6340 ;; This function calls:
  6341 ;;		Nothing
  6342 ;; This function is called by:
  6343 ;;		_putch
  6344 ;; This function uses a non-reentrant model
  6345 ;;
  6346                           
  6347                           
  6348                           ;psect for function _EUSART_Write
  6349  0C2D                     _EUSART_Write:	
  6350                           
  6351                           ;incstack = 0
  6352                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  6353                           ;EUSART_Write@txData stored from wreg
  6354  0C2D  0020               	movlb	0	; select bank0
  6355  0C2E  00A2               	movwf	EUSART_Write@txData
  6356  0C2F                     l3995:	
  6357                           ;eusart.c: 135: {
  6358                           
  6359                           ;eusart.c: 134: while(0 == eusartTxBufferRemaining)
  6360                           
  6361  0C2F  087A               	movf	_eusartTxBufferRemaining,w	;volatile
  6362  0C30  1903               	btfsc	3,2
  6363  0C31  2C2F               	goto	l3995
  6364                           
  6365                           ;eusart.c: 136: }
  6366                           ;eusart.c: 138: if(0 == PIE1bits.TXIE)
  6367  0C32  0021               	movlb	1	; select bank1
  6368  0C33  1A11               	btfsc	17,4	;volatile
  6369  0C34  2C3A               	goto	l383
  6370                           
  6371                           ;eusart.c: 139: {
  6372                           ;eusart.c: 140: TXREG = txData;
  6373  0C35  0020               	movlb	0	; select bank0
  6374  0C36  0822               	movf	EUSART_Write@txData,w
  6375  0C37  0023               	movlb	3	; select bank3
  6376  0C38  009A               	movwf	26	;volatile
  6377                           
  6378                           ;eusart.c: 141: }
  6379  0C39  2C4E               	goto	l4009
  6380  0C3A                     l383:	
  6381                           
  6382                           ;eusart.c: 142: else
  6383                           ;eusart.c: 143: {
  6384                           ;eusart.c: 144: PIE1bits.TXIE = 0;
  6385  0C3A  1211               	bcf	17,4	;volatile
  6386                           
  6387                           ;eusart.c: 145: eusartTxBuffer[eusartTxHead++] = txData;
  6388  0C3B  0020               	movlb	0	; select bank0
  6389  0C3C  0822               	movf	EUSART_Write@txData,w
  6390  0C3D  00A1               	movwf	??_EUSART_Write
  6391  0C3E  087C               	movf	_eusartTxHead,w
  6392  0C3F  3EA8               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  6393  0C40  0086               	movwf	6
  6394  0C41  0187               	clrf	7
  6395  0C42  0821               	movf	??_EUSART_Write,w
  6396  0C43  0081               	movwf	1
  6397  0C44  3001               	movlw	1
  6398  0C45  00A1               	movwf	??_EUSART_Write
  6399  0C46  0821               	movf	??_EUSART_Write,w
  6400  0C47  07FC               	addwf	_eusartTxHead,f	;volatile
  6401                           
  6402                           ;eusart.c: 146: if(sizeof(eusartTxBuffer) <= eusartTxHead)
  6403  0C48  3008               	movlw	8
  6404  0C49  027C               	subwf	_eusartTxHead,w	;volatile
  6405  0C4A  1803               	btfsc	3,0
  6406                           
  6407                           ;eusart.c: 147: {
  6408                           ;eusart.c: 148: eusartTxHead = 0;
  6409  0C4B  01FC               	clrf	_eusartTxHead	;volatile
  6410                           
  6411                           ;eusart.c: 149: }
  6412                           ;eusart.c: 150: eusartTxBufferRemaining--;
  6413  0C4C  3001               	movlw	1
  6414  0C4D  02FA               	subwf	_eusartTxBufferRemaining,f	;volatile
  6415  0C4E                     l4009:	
  6416                           
  6417                           ;eusart.c: 151: }
  6418                           ;eusart.c: 152: PIE1bits.TXIE = 1;
  6419  0C4E  0021               	movlb	1	; select bank1
  6420  0C4F  1611               	bsf	17,4	;volatile
  6421  0C50  0008               	return
  6422  0C51                     __end_of_EUSART_Write:	
  6423                           
  6424                           	psect	text19
  6425  0D43                     __ptext19:	
  6426 ;; *************** function ___lwmod *****************
  6427 ;; Defined at:
  6428 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  6429 ;; Parameters:    Size  Location     Type
  6430 ;;  divisor         2    9[BANK0 ] unsigned int 
  6431 ;;  dividend        2   11[BANK0 ] unsigned int 
  6432 ;; Auto vars:     Size  Location     Type
  6433 ;;  counter         1   14[BANK0 ] unsigned char 
  6434 ;; Return value:  Size  Location     Type
  6435 ;;                  2    9[BANK0 ] unsigned int 
  6436 ;; Registers used:
  6437 ;;		wreg, status,2, status,0
  6438 ;; Tracked objects:
  6439 ;;		On entry : 0/0
  6440 ;;		On exit  : 0/0
  6441 ;;		Unchanged: 0/0
  6442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6443 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6444 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6445 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6446 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6447 ;;Total ram usage:        6 bytes
  6448 ;; Hardware stack levels used:    1
  6449 ;; Hardware stack levels required when called:    5
  6450 ;; This function calls:
  6451 ;;		Nothing
  6452 ;; This function is called by:
  6453 ;;		_printf
  6454 ;; This function uses a non-reentrant model
  6455 ;;
  6456                           
  6457                           
  6458                           ;psect for function ___lwmod
  6459  0D43                     ___lwmod:	
  6460                           
  6461                           ;incstack = 0
  6462                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  6463  0D43  0020               	movlb	0	; select bank0
  6464  0D44  0829               	movf	___lwmod@divisor,w
  6465  0D45  042A               	iorwf	___lwmod@divisor+1,w
  6466  0D46  1903               	btfsc	3,2
  6467  0D47  2D6B               	goto	l4109
  6468  0D48  01AE               	clrf	___lwmod@counter
  6469  0D49  0AAE               	incf	___lwmod@counter,f
  6470  0D4A                     l4099:	
  6471  0D4A  1BAA               	btfsc	___lwmod@divisor+1,7
  6472  0D4B  2D56               	goto	l4101
  6473  0D4C  3001               	movlw	1
  6474  0D4D                     u3435:	
  6475  0D4D  35A9               	lslf	___lwmod@divisor,f
  6476  0D4E  0DAA               	rlf	___lwmod@divisor+1,f
  6477  0D4F  0B89               	decfsz	9,f
  6478  0D50  2D4D               	goto	u3435
  6479  0D51  3001               	movlw	1
  6480  0D52  00AD               	movwf	??___lwmod
  6481  0D53  082D               	movf	??___lwmod,w
  6482  0D54  07AE               	addwf	___lwmod@counter,f
  6483  0D55  2D4A               	goto	l4099
  6484  0D56                     l4101:	
  6485  0D56  082A               	movf	___lwmod@divisor+1,w
  6486  0D57  022C               	subwf	___lwmod@dividend+1,w
  6487  0D58  1D03               	skipz
  6488  0D59  2D5C               	goto	u3455
  6489  0D5A  0829               	movf	___lwmod@divisor,w
  6490  0D5B  022B               	subwf	___lwmod@dividend,w
  6491  0D5C                     u3455:	
  6492  0D5C  1C03               	skipc
  6493  0D5D  2D62               	goto	l4105
  6494  0D5E  0829               	movf	___lwmod@divisor,w
  6495  0D5F  02AB               	subwf	___lwmod@dividend,f
  6496  0D60  082A               	movf	___lwmod@divisor+1,w
  6497  0D61  3BAC               	subwfb	___lwmod@dividend+1,f
  6498  0D62                     l4105:	
  6499  0D62  3001               	movlw	1
  6500  0D63                     u3465:	
  6501  0D63  36AA               	lsrf	___lwmod@divisor+1,f
  6502  0D64  0CA9               	rrf	___lwmod@divisor,f
  6503  0D65  0B89               	decfsz	9,f
  6504  0D66  2D63               	goto	u3465
  6505  0D67  3001               	movlw	1
  6506  0D68  02AE               	subwf	___lwmod@counter,f
  6507  0D69  1D03               	btfss	3,2
  6508  0D6A  2D56               	goto	l4101
  6509  0D6B                     l4109:	
  6510  0D6B  082C               	movf	___lwmod@dividend+1,w
  6511  0D6C  00AA               	movwf	?___lwmod+1
  6512  0D6D  082B               	movf	___lwmod@dividend,w
  6513  0D6E  00A9               	movwf	?___lwmod
  6514  0D6F  0008               	return
  6515  0D70                     __end_of___lwmod:	
  6516                           
  6517                           	psect	text20
  6518  0DCE                     __ptext20:	
  6519 ;; *************** function ___lwdiv *****************
  6520 ;; Defined at:
  6521 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  6522 ;; Parameters:    Size  Location     Type
  6523 ;;  divisor         2    1[BANK0 ] unsigned int 
  6524 ;;  dividend        2    3[BANK0 ] unsigned int 
  6525 ;; Auto vars:     Size  Location     Type
  6526 ;;  quotient        2    7[BANK0 ] unsigned int 
  6527 ;;  counter         1    6[BANK0 ] unsigned char 
  6528 ;; Return value:  Size  Location     Type
  6529 ;;                  2    1[BANK0 ] unsigned int 
  6530 ;; Registers used:
  6531 ;;		wreg, status,2, status,0
  6532 ;; Tracked objects:
  6533 ;;		On entry : 0/0
  6534 ;;		On exit  : 0/0
  6535 ;;		Unchanged: 0/0
  6536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6537 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6538 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6539 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6540 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6541 ;;Total ram usage:        8 bytes
  6542 ;; Hardware stack levels used:    1
  6543 ;; Hardware stack levels required when called:    5
  6544 ;; This function calls:
  6545 ;;		Nothing
  6546 ;; This function is called by:
  6547 ;;		_printf
  6548 ;; This function uses a non-reentrant model
  6549 ;;
  6550                           
  6551                           
  6552                           ;psect for function ___lwdiv
  6553  0DCE                     ___lwdiv:	
  6554                           
  6555                           ;incstack = 0
  6556                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6557  0DCE  0020               	movlb	0	; select bank0
  6558  0DCF  01A7               	clrf	___lwdiv@quotient
  6559  0DD0  01A8               	clrf	___lwdiv@quotient+1
  6560  0DD1  0821               	movf	___lwdiv@divisor,w
  6561  0DD2  0422               	iorwf	___lwdiv@divisor+1,w
  6562  0DD3  1903               	btfsc	3,2
  6563  0DD4  2DFE               	goto	l4087
  6564  0DD5  01A6               	clrf	___lwdiv@counter
  6565  0DD6  0AA6               	incf	___lwdiv@counter,f
  6566  0DD7                     l4075:	
  6567  0DD7  1BA2               	btfsc	___lwdiv@divisor+1,7
  6568  0DD8  2DE3               	goto	l4077
  6569  0DD9  3001               	movlw	1
  6570  0DDA                     u3365:	
  6571  0DDA  35A1               	lslf	___lwdiv@divisor,f
  6572  0DDB  0DA2               	rlf	___lwdiv@divisor+1,f
  6573  0DDC  0B89               	decfsz	9,f
  6574  0DDD  2DDA               	goto	u3365
  6575  0DDE  3001               	movlw	1
  6576  0DDF  00A5               	movwf	??___lwdiv
  6577  0DE0  0825               	movf	??___lwdiv,w
  6578  0DE1  07A6               	addwf	___lwdiv@counter,f
  6579  0DE2  2DD7               	goto	l4075
  6580  0DE3                     l4077:	
  6581  0DE3  3001               	movlw	1
  6582  0DE4                     u3385:	
  6583  0DE4  35A7               	lslf	___lwdiv@quotient,f
  6584  0DE5  0DA8               	rlf	___lwdiv@quotient+1,f
  6585  0DE6  0B89               	decfsz	9,f
  6586  0DE7  2DE4               	goto	u3385
  6587  0DE8  0822               	movf	___lwdiv@divisor+1,w
  6588  0DE9  0224               	subwf	___lwdiv@dividend+1,w
  6589  0DEA  1D03               	skipz
  6590  0DEB  2DEE               	goto	u3395
  6591  0DEC  0821               	movf	___lwdiv@divisor,w
  6592  0DED  0223               	subwf	___lwdiv@dividend,w
  6593  0DEE                     u3395:	
  6594  0DEE  1C03               	skipc
  6595  0DEF  2DF5               	goto	l4083
  6596  0DF0  0821               	movf	___lwdiv@divisor,w
  6597  0DF1  02A3               	subwf	___lwdiv@dividend,f
  6598  0DF2  0822               	movf	___lwdiv@divisor+1,w
  6599  0DF3  3BA4               	subwfb	___lwdiv@dividend+1,f
  6600  0DF4  1427               	bsf	___lwdiv@quotient,0
  6601  0DF5                     l4083:	
  6602  0DF5  3001               	movlw	1
  6603  0DF6                     u3405:	
  6604  0DF6  36A2               	lsrf	___lwdiv@divisor+1,f
  6605  0DF7  0CA1               	rrf	___lwdiv@divisor,f
  6606  0DF8  0B89               	decfsz	9,f
  6607  0DF9  2DF6               	goto	u3405
  6608  0DFA  3001               	movlw	1
  6609  0DFB  02A6               	subwf	___lwdiv@counter,f
  6610  0DFC  1D03               	btfss	3,2
  6611  0DFD  2DE3               	goto	l4077
  6612  0DFE                     l4087:	
  6613  0DFE  0828               	movf	___lwdiv@quotient+1,w
  6614  0DFF  00A2               	movwf	?___lwdiv+1
  6615  0E00  0827               	movf	___lwdiv@quotient,w
  6616  0E01  00A1               	movwf	?___lwdiv
  6617  0E02  0008               	return
  6618  0E03                     __end_of___lwdiv:	
  6619                           
  6620                           	psect	text21
  6621  0BE8                     __ptext21:	
  6622 ;; *************** function _PROTOCOL_I2C_Set_TLV *****************
  6623 ;; Defined at:
  6624 ;;		line 208 in file "protocol.c"
  6625 ;; Parameters:    Size  Location     Type
  6626 ;;  type            1    wreg     unsigned char 
  6627 ;;  length          1    1[BANK0 ] unsigned char 
  6628 ;;  pbuffer         2    2[BANK0 ] PTR unsigned char 
  6629 ;;		 -> PROTOCOL_Send_uint8_t@pbuf(1), sendbuf(16), 
  6630 ;; Auto vars:     Size  Location     Type
  6631 ;;  type            1    5[BANK0 ] unsigned char 
  6632 ;;  status          1    6[BANK0 ] enum E3406
  6633 ;; Return value:  Size  Location     Type
  6634 ;;                  1    wreg      void 
  6635 ;; Registers used:
  6636 ;;		wreg, status,2, status,0
  6637 ;; Tracked objects:
  6638 ;;		On entry : 0/0
  6639 ;;		On exit  : 0/0
  6640 ;;		Unchanged: 0/0
  6641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6642 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6643 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6644 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6645 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6646 ;;Total ram usage:        6 bytes
  6647 ;; Hardware stack levels used:    1
  6648 ;; Hardware stack levels required when called:    5
  6649 ;; This function calls:
  6650 ;;		Nothing
  6651 ;; This function is called by:
  6652 ;;		_PROTOCOL_I2C_Send_int8_t
  6653 ;; This function uses a non-reentrant model
  6654 ;;
  6655                           
  6656                           
  6657                           ;psect for function _PROTOCOL_I2C_Set_TLV
  6658  0BE8                     _PROTOCOL_I2C_Set_TLV:	
  6659                           
  6660                           ;incstack = 0
  6661                           ; Regs used in _PROTOCOL_I2C_Set_TLV: [wreg+status,2+status,0]
  6662                           ;PROTOCOL_I2C_Set_TLV@type stored from wreg
  6663  0BE8  0020               	movlb	0	; select bank0
  6664  0BE9  00A5               	movwf	PROTOCOL_I2C_Set_TLV@type
  6665                           
  6666                           ;protocol.c: 209: READBUF_STATUS status = readbuf.status;
  6667  0BEA  0021               	movlb	1	; select bank1
  6668  0BEB  0851               	movf	(_readbuf^(0+128)+4),w
  6669  0BEC  0020               	movlb	0	; select bank0
  6670  0BED  00A4               	movwf	??_PROTOCOL_I2C_Set_TLV
  6671  0BEE  0824               	movf	??_PROTOCOL_I2C_Set_TLV,w
  6672  0BEF  00A6               	movwf	PROTOCOL_I2C_Set_TLV@status
  6673                           
  6674                           ;protocol.c: 210: if (status == COMPLETE) {
  6675  0BF0  3003               	movlw	3
  6676  0BF1  0626               	xorwf	PROTOCOL_I2C_Set_TLV@status,w
  6677  0BF2  1D03               	btfss	3,2
  6678  0BF3  0008               	return
  6679                           
  6680                           ;protocol.c: 211: readbuf.type = type;
  6681  0BF4  0825               	movf	PROTOCOL_I2C_Set_TLV@type,w
  6682  0BF5  00A4               	movwf	??_PROTOCOL_I2C_Set_TLV
  6683  0BF6  0824               	movf	??_PROTOCOL_I2C_Set_TLV,w
  6684  0BF7  0021               	movlb	1	; select bank1
  6685  0BF8  00CD               	movwf	_readbuf^(0+128)
  6686                           
  6687                           ;protocol.c: 212: readbuf.length = length;
  6688  0BF9  0020               	movlb	0	; select bank0
  6689  0BFA  0821               	movf	PROTOCOL_I2C_Set_TLV@length,w
  6690  0BFB  00A4               	movwf	??_PROTOCOL_I2C_Set_TLV
  6691  0BFC  0824               	movf	??_PROTOCOL_I2C_Set_TLV,w
  6692  0BFD  0021               	movlb	1	; select bank1
  6693  0BFE  00CE               	movwf	(_readbuf^(0+128)+1)
  6694                           
  6695                           ;protocol.c: 213: readbuf.pbuffer = pbuffer;
  6696  0BFF  0020               	movlb	0	; select bank0
  6697  0C00  0823               	movf	PROTOCOL_I2C_Set_TLV@pbuffer+1,w
  6698  0C01  0021               	movlb	1	; select bank1
  6699  0C02  00D0               	movwf	((low ((_readbuf| 0+2))+1))^(0+128)
  6700  0C03  0020               	movlb	0	; select bank0
  6701  0C04  0822               	movf	PROTOCOL_I2C_Set_TLV@pbuffer,w
  6702  0C05  0021               	movlb	1	; select bank1
  6703  0C06  00CF               	movwf	(low ((_readbuf| 0+2)))^(0+128)
  6704                           
  6705                           ;protocol.c: 214: readbuf.buf_cnt = 0;
  6706  0C07  01D2               	clrf	(_readbuf^(0+128)+5)
  6707                           
  6708                           ;protocol.c: 215: readbuf.status = TLV_SET;
  6709  0C08  01D1               	clrf	(_readbuf^(0+128)+4)
  6710  0C09  0008               	return
  6711  0C0A                     __end_of_PROTOCOL_I2C_Set_TLV:	
  6712                           
  6713                           	psect	text22
  6714  078B                     __ptext22:	
  6715 ;; *************** function _atoi *****************
  6716 ;; Defined at:
  6717 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\atoi.c"
  6718 ;; Parameters:    Size  Location     Type
  6719 ;;  s               1    wreg     PTR const unsigned char 
  6720 ;;		 -> buf(48), 
  6721 ;; Auto vars:     Size  Location     Type
  6722 ;;  s               1   14[BANK0 ] PTR const unsigned char 
  6723 ;;		 -> buf(48), 
  6724 ;;  a               2   12[BANK0 ] int 
  6725 ;;  sign            1   11[BANK0 ] unsigned char 
  6726 ;; Return value:  Size  Location     Type
  6727 ;;                  2    7[BANK0 ] int 
  6728 ;; Registers used:
  6729 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6730 ;; Tracked objects:
  6731 ;;		On entry : 0/0
  6732 ;;		On exit  : 0/0
  6733 ;;		Unchanged: 0/0
  6734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6735 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6736 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6737 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6738 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6739 ;;Total ram usage:        8 bytes
  6740 ;; Hardware stack levels used:    1
  6741 ;; Hardware stack levels required when called:    6
  6742 ;; This function calls:
  6743 ;;		___wmul
  6744 ;;		_isdigit
  6745 ;; This function is called by:
  6746 ;;		_PROTOCOL_Loop
  6747 ;; This function uses a non-reentrant model
  6748 ;;
  6749                           
  6750                           
  6751                           ;psect for function _atoi
  6752  078B                     _atoi:	
  6753                           
  6754                           ;incstack = 0
  6755                           ; Regs used in _atoi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6756                           ;atoi@s stored from wreg
  6757  078B  0020               	movlb	0	; select bank0
  6758  078C  00AE               	movwf	atoi@s
  6759  078D                     l4485:	
  6760  078D  082E               	movf	atoi@s,w
  6761  078E  0086               	movwf	6
  6762  078F  3001               	movlw	1	; select bank2/3
  6763  0790  0087               	movwf	7
  6764  0791  3020               	movlw	32
  6765  0792  0601               	xorwf	1,w
  6766  0793  1D03               	btfss	3,2
  6767  0794  2F9A               	goto	l4487
  6768  0795                     l4483:	
  6769  0795  3001               	movlw	1
  6770  0796  00A9               	movwf	??_atoi
  6771  0797  0829               	movf	??_atoi,w
  6772  0798  07AE               	addwf	atoi@s,f
  6773  0799  2F8D               	goto	l4485
  6774  079A                     l4487:	
  6775  079A  082E               	movf	atoi@s,w
  6776  079B  0086               	movwf	6
  6777  079C  3001               	movlw	1	; select bank2/3
  6778  079D  0087               	movwf	7
  6779  079E  3009               	movlw	9
  6780  079F  0601               	xorwf	1,w
  6781  07A0  1903               	btfsc	3,2
  6782  07A1  2F95               	goto	l4483
  6783  07A2  01AC               	clrf	atoi@a
  6784  07A3  01AD               	clrf	atoi@a+1
  6785  07A4  01AB               	clrf	atoi@sign
  6786  07A5  082E               	movf	atoi@s,w
  6787  07A6  0086               	movwf	6
  6788  07A7  3001               	movlw	1	; select bank2/3
  6789  07A8  0087               	movwf	7
  6790  07A9  302D               	movlw	45
  6791  07AA  0601               	xorwf	1,w
  6792  07AB  1D03               	btfss	3,2
  6793  07AC  2FB2               	goto	l4495
  6794  07AD  3001               	movlw	1
  6795  07AE  00A9               	movwf	??_atoi
  6796  07AF  0829               	movf	??_atoi,w
  6797  07B0  07AB               	addwf	atoi@sign,f
  6798  07B1  2FBA               	goto	l4501
  6799  07B2                     l4495:	
  6800  07B2  082E               	movf	atoi@s,w
  6801  07B3  0086               	movwf	6
  6802  07B4  3001               	movlw	1	; select bank2/3
  6803  07B5  0087               	movwf	7
  6804  07B6  302B               	movlw	43
  6805  07B7  0601               	xorwf	1,w
  6806  07B8  1D03               	btfss	3,2
  6807  07B9  2FBE               	goto	l4503
  6808  07BA                     l4501:	
  6809  07BA  3001               	movlw	1
  6810  07BB  00A9               	movwf	??_atoi
  6811  07BC  0829               	movf	??_atoi,w
  6812  07BD  07AE               	addwf	atoi@s,f
  6813  07BE                     l4503:	
  6814  07BE  082E               	movf	atoi@s,w
  6815  07BF  0086               	movwf	6
  6816  07C0  3001               	movlw	1	; select bank2/3
  6817  07C1  0087               	movwf	7
  6818  07C2  0801               	movf	1,w
  6819  07C3  318A  2270  3187   	fcall	_isdigit
  6820  07C6  1C03               	btfss	3,0
  6821  07C7  2FE7               	goto	l4505
  6822  07C8  0020               	movlb	0	; select bank0
  6823  07C9  082D               	movf	atoi@a+1,w
  6824  07CA  00A2               	movwf	___wmul@multiplier+1
  6825  07CB  082C               	movf	atoi@a,w
  6826  07CC  00A1               	movwf	___wmul@multiplier
  6827  07CD  300A               	movlw	10
  6828  07CE  00A3               	movwf	___wmul@multiplicand
  6829  07CF  3000               	movlw	0
  6830  07D0  00A4               	movwf	___wmul@multiplicand+1
  6831  07D1  318B  2331  3187   	fcall	___wmul
  6832  07D4  0020               	movlb	0	; select bank0
  6833  07D5  082E               	movf	atoi@s,w
  6834  07D6  0086               	movwf	6
  6835  07D7  3001               	movlw	1	; select bank2/3
  6836  07D8  0087               	movwf	7
  6837  07D9  0801               	movf	1,w
  6838  07DA  0721               	addwf	?___wmul,w
  6839  07DB  00A9               	movwf	??_atoi
  6840  07DC  0822               	movf	?___wmul+1,w
  6841  07DD  1803               	skipnc
  6842  07DE  0A22               	incf	?___wmul+1,w
  6843  07DF  00AA               	movwf	??_atoi+1
  6844  07E0  0829               	movf	??_atoi,w
  6845  07E1  3ED0               	addlw	208
  6846  07E2  00AC               	movwf	atoi@a
  6847  07E3  30FF               	movlw	255
  6848  07E4  3D2A               	addwfc	??_atoi+1,w
  6849  07E5  00AD               	movwf	atoi@a+1
  6850  07E6  2FBA               	goto	l4501
  6851  07E7                     l4505:	
  6852  07E7  0020               	movlb	0	; select bank0
  6853  07E8  082B               	movf	atoi@sign,w
  6854  07E9  1903               	btfsc	3,2
  6855  07EA  2FF7               	goto	l4511
  6856  07EB  092C               	comf	atoi@a,w
  6857  07EC  00A9               	movwf	??_atoi
  6858  07ED  092D               	comf	atoi@a+1,w
  6859  07EE  00AA               	movwf	??_atoi+1
  6860  07EF  0AA9               	incf	??_atoi,f
  6861  07F0  1903               	skipnz
  6862  07F1  0AAA               	incf	??_atoi+1,f
  6863  07F2  0829               	movf	??_atoi,w
  6864  07F3  00A7               	movwf	?_atoi
  6865  07F4  082A               	movf	??_atoi+1,w
  6866  07F5  00A8               	movwf	?_atoi+1
  6867  07F6  0008               	return
  6868  07F7                     l4511:	
  6869  07F7  082D               	movf	atoi@a+1,w
  6870  07F8  00A8               	movwf	?_atoi+1
  6871  07F9  082C               	movf	atoi@a,w
  6872  07FA  00A7               	movwf	?_atoi
  6873  07FB  0008               	return
  6874  07FC                     __end_of_atoi:	
  6875                           
  6876                           	psect	text23
  6877  0A70                     __ptext23:	
  6878 ;; *************** function _isdigit *****************
  6879 ;; Defined at:
  6880 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  6881 ;; Parameters:    Size  Location     Type
  6882 ;;  c               1    wreg     unsigned char 
  6883 ;; Auto vars:     Size  Location     Type
  6884 ;;  c               1    2[BANK0 ] unsigned char 
  6885 ;; Return value:  Size  Location     Type
  6886 ;;		None               void
  6887 ;; Registers used:
  6888 ;;		wreg, status,2, status,0
  6889 ;; Tracked objects:
  6890 ;;		On entry : 0/0
  6891 ;;		On exit  : 0/0
  6892 ;;		Unchanged: 0/0
  6893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6895 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6897 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6898 ;;Total ram usage:        2 bytes
  6899 ;; Hardware stack levels used:    1
  6900 ;; Hardware stack levels required when called:    5
  6901 ;; This function calls:
  6902 ;;		Nothing
  6903 ;; This function is called by:
  6904 ;;		_printf
  6905 ;;		_atoi
  6906 ;; This function uses a non-reentrant model
  6907 ;;
  6908                           
  6909                           
  6910                           ;psect for function _isdigit
  6911  0A70                     _isdigit:	
  6912                           
  6913                           ;incstack = 0
  6914                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  6915                           ;isdigit@c stored from wreg
  6916  0A70  0020               	movlb	0	; select bank0
  6917  0A71  00A2               	movwf	isdigit@c
  6918  0A72  01A1               	clrf	_isdigit$1477
  6919  0A73  303A               	movlw	58
  6920  0A74  0222               	subwf	isdigit@c,w
  6921  0A75  1803               	skipnc
  6922  0A76  2A7D               	goto	l4047
  6923  0A77  3030               	movlw	48
  6924  0A78  0222               	subwf	isdigit@c,w
  6925  0A79  1C03               	skipc
  6926  0A7A  2A7D               	goto	l4047
  6927  0A7B  01A1               	clrf	_isdigit$1477
  6928  0A7C  0AA1               	incf	_isdigit$1477,f
  6929  0A7D                     l4047:	
  6930  0A7D  0C21               	rrf	_isdigit$1477,w
  6931  0A7E  0008               	return
  6932  0A7F                     __end_of_isdigit:	
  6933                           
  6934                           	psect	text24
  6935  0B31                     __ptext24:	
  6936 ;; *************** function ___wmul *****************
  6937 ;; Defined at:
  6938 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  6939 ;; Parameters:    Size  Location     Type
  6940 ;;  multiplier      2    1[BANK0 ] unsigned int 
  6941 ;;  multiplicand    2    3[BANK0 ] unsigned int 
  6942 ;; Auto vars:     Size  Location     Type
  6943 ;;  product         2    5[BANK0 ] unsigned int 
  6944 ;; Return value:  Size  Location     Type
  6945 ;;                  2    1[BANK0 ] unsigned int 
  6946 ;; Registers used:
  6947 ;;		wreg, status,2, status,0
  6948 ;; Tracked objects:
  6949 ;;		On entry : 0/0
  6950 ;;		On exit  : 0/0
  6951 ;;		Unchanged: 0/0
  6952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6953 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6954 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6956 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6957 ;;Total ram usage:        6 bytes
  6958 ;; Hardware stack levels used:    1
  6959 ;; Hardware stack levels required when called:    5
  6960 ;; This function calls:
  6961 ;;		Nothing
  6962 ;; This function is called by:
  6963 ;;		_printf
  6964 ;;		_atoi
  6965 ;; This function uses a non-reentrant model
  6966 ;;
  6967                           
  6968                           
  6969                           ;psect for function ___wmul
  6970  0B31                     ___wmul:	
  6971                           
  6972                           ;incstack = 0
  6973                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6974  0B31  0020               	movlb	0	; select bank0
  6975  0B32  01A5               	clrf	___wmul@product
  6976  0B33  01A6               	clrf	___wmul@product+1
  6977  0B34                     l4053:	
  6978  0B34  1C21               	btfss	___wmul@multiplier,0
  6979  0B35  2B3A               	goto	l1058
  6980  0B36  0823               	movf	___wmul@multiplicand,w
  6981  0B37  07A5               	addwf	___wmul@product,f
  6982  0B38  0824               	movf	___wmul@multiplicand+1,w
  6983  0B39  3DA6               	addwfc	___wmul@product+1,f
  6984  0B3A                     l1058:	
  6985  0B3A  3001               	movlw	1
  6986  0B3B                     u3325:	
  6987  0B3B  35A3               	lslf	___wmul@multiplicand,f
  6988  0B3C  0DA4               	rlf	___wmul@multiplicand+1,f
  6989  0B3D  0B89               	decfsz	9,f
  6990  0B3E  2B3B               	goto	u3325
  6991  0B3F  3001               	movlw	1
  6992  0B40                     u3335:	
  6993  0B40  36A2               	lsrf	___wmul@multiplier+1,f
  6994  0B41  0CA1               	rrf	___wmul@multiplier,f
  6995  0B42  0B89               	decfsz	9,f
  6996  0B43  2B40               	goto	u3335
  6997  0B44  0821               	movf	___wmul@multiplier,w
  6998  0B45  0422               	iorwf	___wmul@multiplier+1,w
  6999  0B46  1D03               	btfss	3,2
  7000  0B47  2B34               	goto	l4053
  7001  0B48  0826               	movf	___wmul@product+1,w
  7002  0B49  00A2               	movwf	?___wmul+1
  7003  0B4A  0825               	movf	___wmul@product,w
  7004  0B4B  00A1               	movwf	?___wmul
  7005  0B4C  0008               	return
  7006  0B4D                     __end_of___wmul:	
  7007                           
  7008                           	psect	text25
  7009  0A24                     __ptext25:	
  7010 ;; *************** function _TMR0_HasOverflowOccured *****************
  7011 ;; Defined at:
  7012 ;;		line 101 in file "mcc_generated_files/tmr0.c"
  7013 ;; Parameters:    Size  Location     Type
  7014 ;;		None
  7015 ;; Auto vars:     Size  Location     Type
  7016 ;;		None
  7017 ;; Return value:  Size  Location     Type
  7018 ;;                  1    wreg      unsigned char 
  7019 ;; Registers used:
  7020 ;;		wreg, status,2, status,0
  7021 ;; Tracked objects:
  7022 ;;		On entry : 0/0
  7023 ;;		On exit  : 0/0
  7024 ;;		Unchanged: 0/0
  7025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7027 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7029 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7030 ;;Total ram usage:        0 bytes
  7031 ;; Hardware stack levels used:    1
  7032 ;; Hardware stack levels required when called:    5
  7033 ;; This function calls:
  7034 ;;		Nothing
  7035 ;; This function is called by:
  7036 ;;		_PROTOCOL_Loop
  7037 ;; This function uses a non-reentrant model
  7038 ;;
  7039                           
  7040                           
  7041                           ;psect for function _TMR0_HasOverflowOccured
  7042  0A24                     _TMR0_HasOverflowOccured:	
  7043                           
  7044                           ;tmr0.c: 104: return(INTCONbits.TMR0IF);
  7045                           
  7046                           ;incstack = 0
  7047                           ; Regs used in _TMR0_HasOverflowOccured: [wreg+status,2+status,0]
  7048  0A24  0C0B               	rrf	11,w	;volatile
  7049  0A25  0C89               	rrf	9,f
  7050  0A26  3901               	andlw	1
  7051  0A27  0008               	return
  7052  0A28                     __end_of_TMR0_HasOverflowOccured:	
  7053                           
  7054                           	psect	text26
  7055  0A8E                     __ptext26:	
  7056 ;; *************** function _PROTOCOL_Write_Device_Address *****************
  7057 ;; Defined at:
  7058 ;;		line 84 in file "protocol.c"
  7059 ;; Parameters:    Size  Location     Type
  7060 ;;  device_id_i2    1    wreg     unsigned char 
  7061 ;; Auto vars:     Size  Location     Type
  7062 ;;  device_id_i2    1    5[BANK0 ] unsigned char 
  7063 ;; Return value:  Size  Location     Type
  7064 ;;                  1    wreg      void 
  7065 ;; Registers used:
  7066 ;;		wreg, status,2, status,0, pclath, cstack
  7067 ;; Tracked objects:
  7068 ;;		On entry : 0/0
  7069 ;;		On exit  : 0/0
  7070 ;;		Unchanged: 0/0
  7071 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7073 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7074 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7075 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7076 ;;Total ram usage:        2 bytes
  7077 ;; Hardware stack levels used:    1
  7078 ;; Hardware stack levels required when called:    6
  7079 ;; This function calls:
  7080 ;;		_DATAEE_WriteByte
  7081 ;; This function is called by:
  7082 ;;		_PROTOCOL_Loop
  7083 ;; This function uses a non-reentrant model
  7084 ;;
  7085                           
  7086                           
  7087                           ;psect for function _PROTOCOL_Write_Device_Address
  7088  0A8E                     _PROTOCOL_Write_Device_Address:	
  7089                           
  7090                           ;incstack = 0
  7091                           ; Regs used in _PROTOCOL_Write_Device_Address: [wreg+status,2+status,0+pclath+cstack]
  7092                           ;PROTOCOL_Write_Device_Address@device_id_i2c stored from wreg
  7093  0A8E  0020               	movlb	0	; select bank0
  7094  0A8F  00A5               	movwf	PROTOCOL_Write_Device_Address@device_id_i2c
  7095                           
  7096                           ;protocol.c: 85: DATAEE_WriteByte(0, device_id_i2c);
  7097  0A90  0825               	movf	PROTOCOL_Write_Device_Address@device_id_i2c,w
  7098  0A91  00A4               	movwf	??_PROTOCOL_Write_Device_Address
  7099  0A92  0824               	movf	??_PROTOCOL_Write_Device_Address,w
  7100  0A93  00A1               	movwf	DATAEE_WriteByte@bData
  7101  0A94  3000               	movlw	0
  7102  0A95  318C  240A         	fcall	_DATAEE_WriteByte
  7103                           
  7104                           ;protocol.c: 86: slave_address = device_id_i2c;
  7105  0A97  0020               	movlb	0	; select bank0
  7106  0A98  0825               	movf	PROTOCOL_Write_Device_Address@device_id_i2c,w
  7107  0A99  00A4               	movwf	??_PROTOCOL_Write_Device_Address
  7108  0A9A  0824               	movf	??_PROTOCOL_Write_Device_Address,w
  7109  0A9B  0021               	movlb	1	; select bank1
  7110  0A9C  00C3               	movwf	_slave_address^(0+128)
  7111  0A9D  0008               	return
  7112  0A9E                     __end_of_PROTOCOL_Write_Device_Address:	
  7113                           
  7114                           	psect	text27
  7115  0A0E                     __ptext27:	
  7116 ;; *************** function _PROTOCOL_STP *****************
  7117 ;; Defined at:
  7118 ;;		line 98 in file "protocol.c"
  7119 ;; Parameters:    Size  Location     Type
  7120 ;;		None
  7121 ;; Auto vars:     Size  Location     Type
  7122 ;;		None
  7123 ;; Return value:  Size  Location     Type
  7124 ;;                  1    wreg      void 
  7125 ;; Registers used:
  7126 ;;		wreg, status,2, status,0
  7127 ;; Tracked objects:
  7128 ;;		On entry : 0/0
  7129 ;;		On exit  : 0/0
  7130 ;;		Unchanged: 0/0
  7131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7133 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7135 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7136 ;;Total ram usage:        0 bytes
  7137 ;; Hardware stack levels used:    1
  7138 ;; Hardware stack levels required when called:    5
  7139 ;; This function calls:
  7140 ;;		Nothing
  7141 ;; This function is called by:
  7142 ;;		_PROTOCOL_Loop
  7143 ;; This function uses a non-reentrant model
  7144 ;;
  7145                           
  7146                           
  7147                           ;psect for function _PROTOCOL_STP
  7148  0A0E                     _PROTOCOL_STP:	
  7149                           
  7150                           ;protocol.c: 100: running = 0;
  7151                           
  7152                           ;incstack = 0
  7153                           ; Regs used in _PROTOCOL_STP: [wreg+status,2+status,0]
  7154  0A0E  0021               	movlb	1	; select bank1
  7155  0A0F  01C0               	clrf	_running^(0+128)
  7156  0A10  0008               	return
  7157  0A11                     __end_of_PROTOCOL_STP:	
  7158                           
  7159                           	psect	text28
  7160  0A20                     __ptext28:	
  7161 ;; *************** function _PROTOCOL_STA *****************
  7162 ;; Defined at:
  7163 ;;		line 93 in file "protocol.c"
  7164 ;; Parameters:    Size  Location     Type
  7165 ;;		None
  7166 ;; Auto vars:     Size  Location     Type
  7167 ;;		None
  7168 ;; Return value:  Size  Location     Type
  7169 ;;                  1    wreg      void 
  7170 ;; Registers used:
  7171 ;;		wreg, status,2, status,0
  7172 ;; Tracked objects:
  7173 ;;		On entry : 0/0
  7174 ;;		On exit  : 0/0
  7175 ;;		Unchanged: 0/0
  7176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7180 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7181 ;;Total ram usage:        0 bytes
  7182 ;; Hardware stack levels used:    1
  7183 ;; Hardware stack levels required when called:    5
  7184 ;; This function calls:
  7185 ;;		Nothing
  7186 ;; This function is called by:
  7187 ;;		_PROTOCOL_Loop
  7188 ;; This function uses a non-reentrant model
  7189 ;;
  7190                           
  7191                           
  7192                           ;psect for function _PROTOCOL_STA
  7193  0A20                     _PROTOCOL_STA:	
  7194                           
  7195                           ;protocol.c: 95: running = 1;
  7196                           
  7197                           ;incstack = 0
  7198                           ; Regs used in _PROTOCOL_STA: [wreg+status,2+status,0]
  7199  0A20  0021               	movlb	1	; select bank1
  7200  0A21  01C0               	clrf	_running^(0+128)
  7201  0A22  0AC0               	incf	_running^(0+128),f
  7202  0A23  0008               	return
  7203  0A24                     __end_of_PROTOCOL_STA:	
  7204                           
  7205                           	psect	text29
  7206  0A40                     __ptext29:	
  7207 ;; *************** function _PROTOCOL_SET *****************
  7208 ;; Defined at:
  7209 ;;		line 111 in file "protocol.c"
  7210 ;; Parameters:    Size  Location     Type
  7211 ;;  value_          1    wreg     unsigned char 
  7212 ;; Auto vars:     Size  Location     Type
  7213 ;;  value_          1    2[BANK0 ] unsigned char 
  7214 ;; Return value:  Size  Location     Type
  7215 ;;                  1    wreg      void 
  7216 ;; Registers used:
  7217 ;;		wreg, status,2, status,0
  7218 ;; Tracked objects:
  7219 ;;		On entry : 0/0
  7220 ;;		On exit  : 0/0
  7221 ;;		Unchanged: 0/0
  7222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7224 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7225 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7226 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7227 ;;Total ram usage:        2 bytes
  7228 ;; Hardware stack levels used:    1
  7229 ;; Hardware stack levels required when called:    5
  7230 ;; This function calls:
  7231 ;;		Nothing
  7232 ;; This function is called by:
  7233 ;;		_PROTOCOL_Loop
  7234 ;; This function uses a non-reentrant model
  7235 ;;
  7236                           
  7237                           
  7238                           ;psect for function _PROTOCOL_SET
  7239  0A40                     _PROTOCOL_SET:	
  7240                           
  7241                           ;incstack = 0
  7242                           ; Regs used in _PROTOCOL_SET: [wreg+status,2+status,0]
  7243                           ;PROTOCOL_SET@value_ stored from wreg
  7244  0A40  0020               	movlb	0	; select bank0
  7245  0A41  00A2               	movwf	PROTOCOL_SET@value_
  7246                           
  7247                           ;protocol.c: 112: value = value_;
  7248  0A42  0822               	movf	PROTOCOL_SET@value_,w
  7249  0A43  00A1               	movwf	??_PROTOCOL_SET
  7250  0A44  0821               	movf	??_PROTOCOL_SET,w
  7251  0A45  00E6               	movwf	_value
  7252  0A46  0008               	return
  7253  0A47                     __end_of_PROTOCOL_SET:	
  7254                           
  7255                           	psect	text30
  7256  0A50                     __ptext30:	
  7257 ;; *************** function _PROTOCOL_SAV *****************
  7258 ;; Defined at:
  7259 ;;		line 107 in file "protocol.c"
  7260 ;; Parameters:    Size  Location     Type
  7261 ;;		None
  7262 ;; Auto vars:     Size  Location     Type
  7263 ;;		None
  7264 ;; Return value:  Size  Location     Type
  7265 ;;                  1    wreg      void 
  7266 ;; Registers used:
  7267 ;;		wreg, status,2, status,0, pclath, cstack
  7268 ;; Tracked objects:
  7269 ;;		On entry : 0/0
  7270 ;;		On exit  : 0/0
  7271 ;;		Unchanged: 0/0
  7272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7274 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7275 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7276 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7277 ;;Total ram usage:        1 bytes
  7278 ;; Hardware stack levels used:    1
  7279 ;; Hardware stack levels required when called:    6
  7280 ;; This function calls:
  7281 ;;		_DATAEE_WriteByte
  7282 ;; This function is called by:
  7283 ;;		_PROTOCOL_Loop
  7284 ;; This function uses a non-reentrant model
  7285 ;;
  7286                           
  7287                           
  7288                           ;psect for function _PROTOCOL_SAV
  7289  0A50                     _PROTOCOL_SAV:	
  7290                           
  7291                           ;protocol.c: 108: DATAEE_WriteByte(1, value);
  7292                           
  7293                           ;incstack = 0
  7294                           ; Regs used in _PROTOCOL_SAV: [wreg+status,2+status,0+pclath+cstack]
  7295  0A50  0020               	movlb	0	; select bank0
  7296  0A51  0866               	movf	_value,w
  7297  0A52  00A4               	movwf	??_PROTOCOL_SAV
  7298  0A53  0824               	movf	??_PROTOCOL_SAV,w
  7299  0A54  00A1               	movwf	DATAEE_WriteByte@bData
  7300  0A55  3001               	movlw	1
  7301  0A56  318C  240A         	fcall	_DATAEE_WriteByte
  7302  0A58  0008               	return
  7303  0A59                     __end_of_PROTOCOL_SAV:	
  7304                           
  7305                           	psect	text31
  7306  0C0A                     __ptext31:	
  7307 ;; *************** function _DATAEE_WriteByte *****************
  7308 ;; Defined at:
  7309 ;;		line 180 in file "mcc_generated_files/memory.c"
  7310 ;; Parameters:    Size  Location     Type
  7311 ;;  bAdd            1    wreg     unsigned char 
  7312 ;;  bData           1    1[BANK0 ] unsigned char 
  7313 ;; Auto vars:     Size  Location     Type
  7314 ;;  bAdd            1    2[BANK0 ] unsigned char 
  7315 ;;  GIEBitValue     1    3[BANK0 ] unsigned char 
  7316 ;; Return value:  Size  Location     Type
  7317 ;;                  1    wreg      void 
  7318 ;; Registers used:
  7319 ;;		wreg, status,2, status,0
  7320 ;; Tracked objects:
  7321 ;;		On entry : 0/0
  7322 ;;		On exit  : 0/0
  7323 ;;		Unchanged: 0/0
  7324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7325 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7326 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7328 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7329 ;;Total ram usage:        3 bytes
  7330 ;; Hardware stack levels used:    1
  7331 ;; Hardware stack levels required when called:    5
  7332 ;; This function calls:
  7333 ;;		Nothing
  7334 ;; This function is called by:
  7335 ;;		_PROTOCOL_Write_Device_Address
  7336 ;;		_PROTOCOL_SAV
  7337 ;; This function uses a non-reentrant model
  7338 ;;
  7339                           
  7340                           
  7341                           ;psect for function _DATAEE_WriteByte
  7342  0C0A                     _DATAEE_WriteByte:	
  7343                           
  7344                           ;incstack = 0
  7345                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
  7346                           ;DATAEE_WriteByte@bAdd stored from wreg
  7347  0C0A  0020               	movlb	0	; select bank0
  7348  0C0B  00A2               	movwf	DATAEE_WriteByte@bAdd
  7349                           
  7350                           ;memory.c: 182: uint8_t GIEBitValue = 0;
  7351  0C0C  01A3               	clrf	DATAEE_WriteByte@GIEBitValue
  7352                           
  7353                           ;memory.c: 184: EEADRL = (bAdd & 0x0ff);
  7354  0C0D  0822               	movf	DATAEE_WriteByte@bAdd,w
  7355  0C0E  0023               	movlb	3	; select bank3
  7356  0C0F  0091               	movwf	17	;volatile
  7357                           
  7358                           ;memory.c: 185: EEDATL = bData;
  7359  0C10  0020               	movlb	0	; select bank0
  7360  0C11  0821               	movf	DATAEE_WriteByte@bData,w
  7361  0C12  0023               	movlb	3	; select bank3
  7362  0C13  0093               	movwf	19	;volatile
  7363                           
  7364                           ;memory.c: 186: EECON1bits.EEPGD = 0;
  7365  0C14  1395               	bcf	21,7	;volsfr
  7366                           
  7367                           ;memory.c: 187: EECON1bits.CFGS = 0;
  7368  0C15  1315               	bcf	21,6	;volsfr
  7369                           
  7370                           ;memory.c: 188: EECON1bits.WREN = 1;
  7371  0C16  1515               	bsf	21,2	;volsfr
  7372                           
  7373                           ;memory.c: 190: GIEBitValue = INTCONbits.GIE;
  7374  0C17  3000               	movlw	0
  7375  0C18  1B8B               	btfsc	11,7	;volatile
  7376  0C19  3001               	movlw	1
  7377  0C1A  0020               	movlb	0	; select bank0
  7378  0C1B  00A3               	movwf	DATAEE_WriteByte@GIEBitValue
  7379                           
  7380                           ;memory.c: 191: INTCONbits.GIE = 0;
  7381  0C1C  138B               	bcf	11,7	;volatile
  7382                           
  7383                           ;memory.c: 192: EECON2 = 0x55;
  7384  0C1D  3055               	movlw	85
  7385  0C1E  0023               	movlb	3	; select bank3
  7386  0C1F  0096               	movwf	22	;volsfr
  7387                           
  7388                           ;memory.c: 193: EECON2 = 0xAA;
  7389  0C20  30AA               	movlw	170
  7390  0C21  0096               	movwf	22	;volsfr
  7391                           
  7392                           ;memory.c: 194: EECON1bits.WR = 1;
  7393  0C22  1495               	bsf	21,1	;volsfr
  7394  0C23                     l480:	
  7395                           ;memory.c: 197: {
  7396                           
  7397                           ;memory.c: 196: while (EECON1bits.WR)
  7398                           
  7399  0C23  1895               	btfsc	21,1	;volsfr
  7400  0C24  2C23               	goto	l480
  7401                           
  7402                           ;memory.c: 198: }
  7403                           ;memory.c: 200: EECON1bits.WREN = 0;
  7404  0C25  1115               	bcf	21,2	;volsfr
  7405                           
  7406                           ;memory.c: 201: INTCONbits.GIE = GIEBitValue;
  7407  0C26  0020               	movlb	0	; select bank0
  7408  0C27  0C23               	rrf	DATAEE_WriteByte@GIEBitValue,w
  7409  0C28  1C03               	skipc
  7410  0C29  138B               	bcf	11,7	;volatile
  7411  0C2A  1803               	skipnc
  7412  0C2B  178B               	bsf	11,7	;volatile
  7413  0C2C  0008               	return
  7414  0C2D                     __end_of_DATAEE_WriteByte:	
  7415                           
  7416                           	psect	text32
  7417  0002                     __ptext32:	
  7418 ;; *************** function _PROTOCOL_EXT *****************
  7419 ;; Defined at:
  7420 ;;		line 116 in file "protocol.c"
  7421 ;; Parameters:    Size  Location     Type
  7422 ;;  char_buf        1    wreg     PTR unsigned char 
  7423 ;;		 -> buf(48), I2C1_StatusCallback@ext_buf(48), 
  7424 ;; Auto vars:     Size  Location     Type
  7425 ;;  char_buf        1    1[BANK0 ] PTR unsigned char 
  7426 ;;		 -> buf(48), I2C1_StatusCallback@ext_buf(48), 
  7427 ;; Return value:  Size  Location     Type
  7428 ;;                  1    wreg      void 
  7429 ;; Registers used:
  7430 ;;		wreg, status,2, status,0
  7431 ;; Tracked objects:
  7432 ;;		On entry : 0/0
  7433 ;;		On exit  : 0/0
  7434 ;;		Unchanged: 0/0
  7435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7437 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7439 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7440 ;;Total ram usage:        1 bytes
  7441 ;; Hardware stack levels used:    1
  7442 ;; Hardware stack levels required when called:    5
  7443 ;; This function calls:
  7444 ;;		Nothing
  7445 ;; This function is called by:
  7446 ;;		_PROTOCOL_Loop
  7447 ;; This function uses a non-reentrant model
  7448 ;;
  7449                           
  7450                           
  7451                           ;psect for function _PROTOCOL_EXT
  7452  0002                     _PROTOCOL_EXT:	
  7453                           
  7454                           ;incstack = 0
  7455                           ; Regs used in _PROTOCOL_EXT: [wreg+status,2+status,0]
  7456  0002  0008               	return
  7457  0003                     __end_of_PROTOCOL_EXT:	
  7458                           
  7459                           	psect	text33
  7460  0B88                     __ptext33:	
  7461 ;; *************** function _EUSART_Read *****************
  7462 ;; Defined at:
  7463 ;;		line 112 in file "mcc_generated_files/eusart.c"
  7464 ;; Parameters:    Size  Location     Type
  7465 ;;		None
  7466 ;; Auto vars:     Size  Location     Type
  7467 ;;  readValue       1    2[BANK0 ] unsigned char 
  7468 ;; Return value:  Size  Location     Type
  7469 ;;                  1    wreg      unsigned char 
  7470 ;; Registers used:
  7471 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7472 ;; Tracked objects:
  7473 ;;		On entry : 0/0
  7474 ;;		On exit  : 0/0
  7475 ;;		Unchanged: 0/0
  7476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7478 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7479 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7480 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7481 ;;Total ram usage:        2 bytes
  7482 ;; Hardware stack levels used:    1
  7483 ;; Hardware stack levels required when called:    5
  7484 ;; This function calls:
  7485 ;;		Nothing
  7486 ;; This function is called by:
  7487 ;;		_PROTOCOL_Loop
  7488 ;;		_getch
  7489 ;; This function uses a non-reentrant model
  7490 ;;
  7491                           
  7492                           
  7493                           ;psect for function _EUSART_Read
  7494  0B88                     _EUSART_Read:	
  7495                           
  7496                           ;eusart.c: 114: uint8_t readValue = 0;
  7497                           
  7498                           ;incstack = 0
  7499                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  7500  0B88  0020               	movlb	0	; select bank0
  7501  0B89  01A2               	clrf	EUSART_Read@readValue
  7502  0B8A                     l4421:	
  7503                           ;eusart.c: 117: {
  7504                           
  7505                           ;eusart.c: 116: while(0 == eusartRxCount)
  7506                           
  7507  0B8A  0867               	movf	_eusartRxCount,w	;volatile
  7508  0B8B  1903               	btfsc	3,2
  7509  0B8C  2B8A               	goto	l4421
  7510                           
  7511                           ;eusart.c: 118: }
  7512                           ;eusart.c: 120: readValue = eusartRxBuffer[eusartRxTail++];
  7513  0B8D  0868               	movf	_eusartRxTail,w
  7514  0B8E  3EA0               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  7515  0B8F  0086               	movwf	6
  7516  0B90  0187               	clrf	7
  7517  0B91  0801               	movf	1,w
  7518  0B92  00A1               	movwf	??_EUSART_Read
  7519  0B93  0821               	movf	??_EUSART_Read,w
  7520  0B94  00A2               	movwf	EUSART_Read@readValue
  7521  0B95  3001               	movlw	1
  7522  0B96  00A1               	movwf	??_EUSART_Read
  7523  0B97  0821               	movf	??_EUSART_Read,w
  7524  0B98  07E8               	addwf	_eusartRxTail,f	;volatile
  7525                           
  7526                           ;eusart.c: 121: if(sizeof(eusartRxBuffer) <= eusartRxTail)
  7527  0B99  3008               	movlw	8
  7528  0B9A  0268               	subwf	_eusartRxTail,w	;volatile
  7529  0B9B  1803               	btfsc	3,0
  7530                           
  7531                           ;eusart.c: 122: {
  7532                           ;eusart.c: 123: eusartRxTail = 0;
  7533  0B9C  01E8               	clrf	_eusartRxTail	;volatile
  7534                           
  7535                           ;eusart.c: 124: }
  7536                           ;eusart.c: 125: PIE1bits.RCIE = 0;
  7537  0B9D  0021               	movlb	1	; select bank1
  7538  0B9E  1291               	bcf	17,5	;volatile
  7539                           
  7540                           ;eusart.c: 126: eusartRxCount--;
  7541  0B9F  3001               	movlw	1
  7542  0BA0  0020               	movlb	0	; select bank0
  7543  0BA1  02E7               	subwf	_eusartRxCount,f	;volatile
  7544                           
  7545                           ;eusart.c: 127: PIE1bits.RCIE = 1;
  7546  0BA2  0021               	movlb	1	; select bank1
  7547  0BA3  1691               	bsf	17,5	;volatile
  7548                           
  7549                           ;eusart.c: 129: return readValue;
  7550  0BA4  0020               	movlb	0	; select bank0
  7551  0BA5  0822               	movf	EUSART_Read@readValue,w
  7552  0BA6  0008               	return
  7553  0BA7                     __end_of_EUSART_Read:	
  7554                           
  7555                           	psect	text34
  7556  0ECF                     __ptext34:	
  7557 ;; *************** function _PROTOCOL_Initialize *****************
  7558 ;; Defined at:
  7559 ;;		line 59 in file "protocol.c"
  7560 ;; Parameters:    Size  Location     Type
  7561 ;;  device_id       2    2[BANK0 ] PTR const unsigned char 
  7562 ;;		 -> STR_1(10), 
  7563 ;;  start_handle    1    4[BANK0 ] PTR void 
  7564 ;;		 -> NULL(0), 
  7565 ;;  stop_handler    1    5[BANK0 ] PTR void 
  7566 ;;		 -> NULL(0), 
  7567 ;;  set_handler     1    6[BANK0 ] PTR void 
  7568 ;;		 -> NULL(0), 
  7569 ;;  inv_handler     2    7[BANK0 ] PTR void 
  7570 ;;		 -> inv_handler(1), 
  7571 ;;  scaler          1    9[BANK0 ] unsigned char 
  7572 ;; Auto vars:     Size  Location     Type
  7573 ;;		None
  7574 ;; Return value:  Size  Location     Type
  7575 ;;                  1    wreg      void 
  7576 ;; Registers used:
  7577 ;;		wreg, status,2, status,0, pclath, cstack
  7578 ;; Tracked objects:
  7579 ;;		On entry : 0/0
  7580 ;;		On exit  : 0/0
  7581 ;;		Unchanged: 0/0
  7582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7583 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7584 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7585 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7586 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7587 ;;Total ram usage:       10 bytes
  7588 ;; Hardware stack levels used:    1
  7589 ;; Hardware stack levels required when called:    6
  7590 ;; This function calls:
  7591 ;;		_DATAEE_ReadByte
  7592 ;; This function is called by:
  7593 ;;		_main
  7594 ;; This function uses a non-reentrant model
  7595 ;;
  7596                           
  7597                           
  7598                           ;psect for function _PROTOCOL_Initialize
  7599  0ECF                     _PROTOCOL_Initialize:	
  7600                           
  7601                           ;protocol.c: 60: device_id_ = device_id;
  7602                           
  7603                           ;incstack = 0
  7604                           ; Regs used in _PROTOCOL_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7605  0ECF  0020               	movlb	0	; select bank0
  7606  0ED0  0823               	movf	PROTOCOL_Initialize@device_id+1,w
  7607  0ED1  0022               	movlb	2	; select bank2
  7608  0ED2  00E1               	movwf	(_device_id_+1)^(0+256)
  7609  0ED3  0020               	movlb	0	; select bank0
  7610  0ED4  0822               	movf	PROTOCOL_Initialize@device_id,w
  7611  0ED5  0022               	movlb	2	; select bank2
  7612  0ED6  00E0               	movwf	_device_id_^(0+256)
  7613                           
  7614                           ;protocol.c: 61: PROTOCOL_Start_Handler = start_handler;
  7615  0ED7  0020               	movlb	0	; select bank0
  7616  0ED8  0824               	movf	PROTOCOL_Initialize@start_handler,w
  7617  0ED9  00AA               	movwf	??_PROTOCOL_Initialize
  7618  0EDA  3000               	movlw	0
  7619  0EDB  00AB               	movwf	??_PROTOCOL_Initialize+1
  7620  0EDC  082A               	movf	??_PROTOCOL_Initialize,w
  7621  0EDD  0021               	movlb	1	; select bank1
  7622  0EDE  00EB               	movwf	_PROTOCOL_Start_Handler^(0+128)
  7623  0EDF  0020               	movlb	0	; select bank0
  7624  0EE0  082B               	movf	??_PROTOCOL_Initialize+1,w
  7625  0EE1  0021               	movlb	1	; select bank1
  7626  0EE2  00EC               	movwf	(_PROTOCOL_Start_Handler+1)^(0+128)
  7627                           
  7628                           ;protocol.c: 62: PROTOCOL_Stop_Handler = stop_handler;
  7629  0EE3  0020               	movlb	0	; select bank0
  7630  0EE4  0825               	movf	PROTOCOL_Initialize@stop_handler,w
  7631  0EE5  00AA               	movwf	??_PROTOCOL_Initialize
  7632  0EE6  3000               	movlw	0
  7633  0EE7  00AB               	movwf	??_PROTOCOL_Initialize+1
  7634  0EE8  082A               	movf	??_PROTOCOL_Initialize,w
  7635  0EE9  0021               	movlb	1	; select bank1
  7636  0EEA  00E9               	movwf	_PROTOCOL_Stop_Handler^(0+128)
  7637  0EEB  0020               	movlb	0	; select bank0
  7638  0EEC  082B               	movf	??_PROTOCOL_Initialize+1,w
  7639  0EED  0021               	movlb	1	; select bank1
  7640  0EEE  00EA               	movwf	(_PROTOCOL_Stop_Handler+1)^(0+128)
  7641                           
  7642                           ;protocol.c: 63: PROTOCOL_Set_Handler = set_handler;
  7643  0EEF  0020               	movlb	0	; select bank0
  7644  0EF0  0826               	movf	PROTOCOL_Initialize@set_handler,w
  7645  0EF1  00AA               	movwf	??_PROTOCOL_Initialize
  7646  0EF2  3000               	movlw	0
  7647  0EF3  00AB               	movwf	??_PROTOCOL_Initialize+1
  7648  0EF4  082A               	movf	??_PROTOCOL_Initialize,w
  7649  0EF5  0021               	movlb	1	; select bank1
  7650  0EF6  00E7               	movwf	_PROTOCOL_Set_Handler^(0+128)
  7651  0EF7  0020               	movlb	0	; select bank0
  7652  0EF8  082B               	movf	??_PROTOCOL_Initialize+1,w
  7653  0EF9  0021               	movlb	1	; select bank1
  7654  0EFA  00E8               	movwf	(_PROTOCOL_Set_Handler+1)^(0+128)
  7655                           
  7656                           ;protocol.c: 66: value = DATAEE_ReadByte(1);
  7657  0EFB  3001               	movlw	1
  7658  0EFC  318A  2263  318E   	fcall	_DATAEE_ReadByte
  7659  0EFF  0020               	movlb	0	; select bank0
  7660  0F00  00AA               	movwf	??_PROTOCOL_Initialize
  7661  0F01  082A               	movf	??_PROTOCOL_Initialize,w
  7662  0F02  00E6               	movwf	_value
  7663                           
  7664                           ;protocol.c: 68: slave_address = DATAEE_ReadByte(0);
  7665  0F03  3000               	movlw	0
  7666  0F04  318A  2263         	fcall	_DATAEE_ReadByte
  7667  0F06  0020               	movlb	0	; select bank0
  7668  0F07  00AA               	movwf	??_PROTOCOL_Initialize
  7669  0F08  082A               	movf	??_PROTOCOL_Initialize,w
  7670  0F09  0021               	movlb	1	; select bank1
  7671  0F0A  00C3               	movwf	_slave_address^(0+128)
  7672                           
  7673                           ;protocol.c: 71: readbuf.status = COMPLETE;
  7674  0F0B  3003               	movlw	3
  7675  0F0C  0020               	movlb	0	; select bank0
  7676  0F0D  00AA               	movwf	??_PROTOCOL_Initialize
  7677  0F0E  082A               	movf	??_PROTOCOL_Initialize,w
  7678  0F0F  0021               	movlb	1	; select bank1
  7679  0F10  00D1               	movwf	(_readbuf^(0+128)+4)
  7680                           
  7681                           ;protocol.c: 72: PROTOCOL_Inv_Handler = inv_handler;
  7682  0F11  0020               	movlb	0	; select bank0
  7683  0F12  0828               	movf	PROTOCOL_Initialize@inv_handler+1,w
  7684  0F13  0021               	movlb	1	; select bank1
  7685  0F14  00B3               	movwf	(_PROTOCOL_Inv_Handler+1)^(0+128)
  7686  0F15  0020               	movlb	0	; select bank0
  7687  0F16  0827               	movf	PROTOCOL_Initialize@inv_handler,w
  7688  0F17  0021               	movlb	1	; select bank1
  7689  0F18  00B2               	movwf	_PROTOCOL_Inv_Handler^(0+128)
  7690                           
  7691                           ;protocol.c: 73: tmr_scaler = scaler;
  7692  0F19  0020               	movlb	0	; select bank0
  7693  0F1A  0829               	movf	PROTOCOL_Initialize@scaler,w
  7694  0F1B  00AA               	movwf	??_PROTOCOL_Initialize
  7695  0F1C  082A               	movf	??_PROTOCOL_Initialize,w
  7696  0F1D  0021               	movlb	1	; select bank1
  7697  0F1E  00ED               	movwf	_tmr_scaler^(0+128)
  7698  0F1F  0008               	return
  7699  0F20                     __end_of_PROTOCOL_Initialize:	
  7700                           
  7701                           	psect	text35
  7702  0A63                     __ptext35:	
  7703 ;; *************** function _DATAEE_ReadByte *****************
  7704 ;; Defined at:
  7705 ;;		line 204 in file "mcc_generated_files/memory.c"
  7706 ;; Parameters:    Size  Location     Type
  7707 ;;  bAdd            1    wreg     unsigned char 
  7708 ;; Auto vars:     Size  Location     Type
  7709 ;;  bAdd            1    1[BANK0 ] unsigned char 
  7710 ;; Return value:  Size  Location     Type
  7711 ;;                  1    wreg      unsigned char 
  7712 ;; Registers used:
  7713 ;;		wreg
  7714 ;; Tracked objects:
  7715 ;;		On entry : 0/0
  7716 ;;		On exit  : 0/0
  7717 ;;		Unchanged: 0/0
  7718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7720 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7722 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7723 ;;Total ram usage:        1 bytes
  7724 ;; Hardware stack levels used:    1
  7725 ;; Hardware stack levels required when called:    5
  7726 ;; This function calls:
  7727 ;;		Nothing
  7728 ;; This function is called by:
  7729 ;;		_PROTOCOL_Initialize
  7730 ;; This function uses a non-reentrant model
  7731 ;;
  7732                           
  7733                           
  7734                           ;psect for function _DATAEE_ReadByte
  7735  0A63                     _DATAEE_ReadByte:	
  7736                           
  7737                           ;incstack = 0
  7738                           ; Regs used in _DATAEE_ReadByte: [wreg]
  7739                           ;DATAEE_ReadByte@bAdd stored from wreg
  7740  0A63  0020               	movlb	0	; select bank0
  7741  0A64  00A1               	movwf	DATAEE_ReadByte@bAdd
  7742                           
  7743                           ;memory.c: 206: EEADRL = (bAdd & 0x0ff);
  7744  0A65  0821               	movf	DATAEE_ReadByte@bAdd,w
  7745  0A66  0023               	movlb	3	; select bank3
  7746  0A67  0091               	movwf	17	;volatile
  7747                           
  7748                           ;memory.c: 207: EECON1bits.CFGS = 0;
  7749  0A68  1315               	bcf	21,6	;volsfr
  7750                           
  7751                           ;memory.c: 208: EECON1bits.EEPGD = 0;
  7752  0A69  1395               	bcf	21,7	;volsfr
  7753                           
  7754                           ;memory.c: 209: EECON1bits.RD = 1;
  7755  0A6A  1415               	bsf	21,0	;volsfr
  7756                           
  7757                           ;memory.c: 210: __nop();
  7758  0A6B  0000               	nop
  7759                           
  7760                           ;memory.c: 211: __nop();
  7761  0A6C  0000               	nop
  7762                           
  7763                           ;memory.c: 213: return (EEDATL);
  7764  0A6D  0023               	movlb	3	; select bank3
  7765  0A6E  0813               	movf	19,w	;volatile
  7766  0A6F  0008               	return
  7767  0A70                     __end_of_DATAEE_ReadByte:	
  7768                           
  7769                           	psect	text36
  7770  0B6A                     __ptext36:	
  7771 ;; *************** function _PIN_MANAGER_Initialize *****************
  7772 ;; Defined at:
  7773 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
  7774 ;; Parameters:    Size  Location     Type
  7775 ;;		None
  7776 ;; Auto vars:     Size  Location     Type
  7777 ;;		None
  7778 ;; Return value:  Size  Location     Type
  7779 ;;                  1    wreg      void 
  7780 ;; Registers used:
  7781 ;;		wreg, status,2
  7782 ;; Tracked objects:
  7783 ;;		On entry : 0/0
  7784 ;;		On exit  : 0/0
  7785 ;;		Unchanged: 0/0
  7786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7788 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7790 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7791 ;;Total ram usage:        0 bytes
  7792 ;; Hardware stack levels used:    1
  7793 ;; Hardware stack levels required when called:    5
  7794 ;; This function calls:
  7795 ;;		Nothing
  7796 ;; This function is called by:
  7797 ;;		_main
  7798 ;;		_SYSTEM_Initialize
  7799 ;; This function uses a non-reentrant model
  7800 ;;
  7801                           
  7802                           
  7803                           ;psect for function _PIN_MANAGER_Initialize
  7804  0B6A                     _PIN_MANAGER_Initialize:	
  7805                           
  7806                           ;pin_manager.c: 56: LATA = 0x00;
  7807                           
  7808                           ;incstack = 0
  7809                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  7810  0B6A  0022               	movlb	2	; select bank2
  7811  0B6B  018C               	clrf	12	;volatile
  7812                           
  7813                           ;pin_manager.c: 57: LATB = 0x00;
  7814  0B6C  018D               	clrf	13	;volatile
  7815                           
  7816                           ;pin_manager.c: 58: LATC = 0x00;
  7817  0B6D  018E               	clrf	14	;volatile
  7818                           
  7819                           ;pin_manager.c: 63: TRISA = 0x3F;
  7820  0B6E  303F               	movlw	63
  7821  0B6F  0021               	movlb	1	; select bank1
  7822  0B70  008C               	movwf	12	;volatile
  7823                           
  7824                           ;pin_manager.c: 64: TRISB = 0xF0;
  7825  0B71  30F0               	movlw	240
  7826  0B72  008D               	movwf	13	;volatile
  7827                           
  7828                           ;pin_manager.c: 65: TRISC = 0x7F;
  7829  0B73  307F               	movlw	127
  7830  0B74  008E               	movwf	14	;volatile
  7831                           
  7832                           ;pin_manager.c: 70: ANSELC = 0x4F;
  7833  0B75  304F               	movlw	79
  7834  0B76  0023               	movlb	3	; select bank3
  7835  0B77  008E               	movwf	14	;volatile
  7836                           
  7837                           ;pin_manager.c: 71: ANSELB = 0x00;
  7838  0B78  018D               	clrf	13	;volatile
  7839                           
  7840                           ;pin_manager.c: 72: ANSELA = 0x17;
  7841  0B79  3017               	movlw	23
  7842  0B7A  008C               	movwf	12	;volatile
  7843                           
  7844                           ;pin_manager.c: 77: WPUB = 0x00;
  7845  0B7B  0024               	movlb	4	; select bank4
  7846  0B7C  018D               	clrf	13	;volatile
  7847                           
  7848                           ;pin_manager.c: 78: WPUA = 0x3F;
  7849  0B7D  303F               	movlw	63
  7850  0B7E  008C               	movwf	12	;volatile
  7851                           
  7852                           ;pin_manager.c: 79: WPUC = 0x7F;
  7853  0B7F  307F               	movlw	127
  7854  0B80  008E               	movwf	14	;volatile
  7855                           
  7856                           ;pin_manager.c: 80: OPTION_REGbits.nWPUEN = 0;
  7857  0B81  0021               	movlb	1	; select bank1
  7858  0B82  1395               	bcf	21,7	;volatile
  7859                           
  7860                           ;pin_manager.c: 86: APFCON1 = 0x00;
  7861  0B83  0022               	movlb	2	; select bank2
  7862  0B84  019E               	clrf	30	;volatile
  7863                           
  7864                           ;pin_manager.c: 87: APFCON0 = 0x84;
  7865  0B85  3084               	movlw	132
  7866  0B86  009D               	movwf	29	;volatile
  7867  0B87  0008               	return
  7868  0B88                     __end_of_PIN_MANAGER_Initialize:	
  7869                           
  7870                           	psect	text37
  7871  0A28                     __ptext37:	
  7872 ;; *************** function _OSCILLATOR_Initialize *****************
  7873 ;; Defined at:
  7874 ;;		line 81 in file "mcc_generated_files/mcc.c"
  7875 ;; Parameters:    Size  Location     Type
  7876 ;;		None
  7877 ;; Auto vars:     Size  Location     Type
  7878 ;;		None
  7879 ;; Return value:  Size  Location     Type
  7880 ;;                  1    wreg      void 
  7881 ;; Registers used:
  7882 ;;		wreg, status,2
  7883 ;; Tracked objects:
  7884 ;;		On entry : 0/0
  7885 ;;		On exit  : 0/0
  7886 ;;		Unchanged: 0/0
  7887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7889 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7891 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7892 ;;Total ram usage:        0 bytes
  7893 ;; Hardware stack levels used:    1
  7894 ;; Hardware stack levels required when called:    5
  7895 ;; This function calls:
  7896 ;;		Nothing
  7897 ;; This function is called by:
  7898 ;;		_main
  7899 ;;		_SYSTEM_Initialize
  7900 ;; This function uses a non-reentrant model
  7901 ;;
  7902                           
  7903                           
  7904                           ;psect for function _OSCILLATOR_Initialize
  7905  0A28                     _OSCILLATOR_Initialize:	
  7906                           
  7907                           ;mcc.c: 84: OSCCON = 0x68;
  7908                           
  7909                           ;incstack = 0
  7910                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  7911  0A28  3068               	movlw	104
  7912  0A29  0021               	movlb	1	; select bank1
  7913  0A2A  0099               	movwf	25	;volatile
  7914                           
  7915                           ;mcc.c: 86: OSCTUNE = 0x00;
  7916  0A2B  0198               	clrf	24	;volatile
  7917  0A2C  0008               	return
  7918  0A2D                     __end_of_OSCILLATOR_Initialize:	
  7919                           
  7920                           	psect	text38
  7921  0AB0                     __ptext38:	
  7922 ;; *************** function _I2C2_Initialize *****************
  7923 ;; Defined at:
  7924 ;;		line 198 in file "mcc_generated_files/i2c2.c"
  7925 ;; Parameters:    Size  Location     Type
  7926 ;;		None
  7927 ;; Auto vars:     Size  Location     Type
  7928 ;;		None
  7929 ;; Return value:  Size  Location     Type
  7930 ;;                  1    wreg      void 
  7931 ;; Registers used:
  7932 ;;		wreg, status,2
  7933 ;; Tracked objects:
  7934 ;;		On entry : 0/0
  7935 ;;		On exit  : 0/0
  7936 ;;		Unchanged: 0/0
  7937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7939 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7940 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7941 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7942 ;;Total ram usage:        1 bytes
  7943 ;; Hardware stack levels used:    1
  7944 ;; Hardware stack levels required when called:    5
  7945 ;; This function calls:
  7946 ;;		Nothing
  7947 ;; This function is called by:
  7948 ;;		_main
  7949 ;;		_SYSTEM_Initialize
  7950 ;; This function uses a non-reentrant model
  7951 ;;
  7952                           
  7953                           
  7954                           ;psect for function _I2C2_Initialize
  7955  0AB0                     _I2C2_Initialize:	
  7956                           
  7957                           ;i2c2.c: 200: i2c2_object.pTrHead = i2c2_tr_queue;
  7958                           
  7959                           ;incstack = 0
  7960                           ; Regs used in _I2C2_Initialize: [wreg+status,2]
  7961  0AB0  30DE               	movlw	(low (_i2c2_tr_queue| 0))& (0+255)
  7962  0AB1  0020               	movlb	0	; select bank0
  7963  0AB2  00A1               	movwf	??_I2C2_Initialize
  7964  0AB3  0821               	movf	??_I2C2_Initialize,w
  7965  0AB4  00E1               	movwf	low ((_i2c2_object| 0+1))
  7966                           
  7967                           ;i2c2.c: 201: i2c2_object.pTrTail = i2c2_tr_queue;
  7968  0AB5  30DE               	movlw	(low (_i2c2_tr_queue| 0))& (0+255)
  7969  0AB6  00A1               	movwf	??_I2C2_Initialize
  7970  0AB7  0821               	movf	??_I2C2_Initialize,w
  7971  0AB8  00E0               	movwf	_i2c2_object
  7972                           
  7973                           ;i2c2.c: 202: i2c2_object.trStatus.s.empty = 1;
  7974  0AB9  14E2               	bsf	_i2c2_object+2,1
  7975                           
  7976                           ;i2c2.c: 203: i2c2_object.trStatus.s.full = 0;
  7977  0ABA  1062               	bcf	_i2c2_object+2,0
  7978                           
  7979                           ;i2c2.c: 205: i2c2_object.i2cErrors = 0;
  7980  0ABB  01E4               	clrf	_i2c2_object+4
  7981                           
  7982                           ;i2c2.c: 208: SSP2STAT = 0x00;
  7983  0ABC  0024               	movlb	4	; select bank4
  7984  0ABD  019C               	clrf	28	;volatile
  7985                           
  7986                           ;i2c2.c: 210: SSP2CON1 = 0x28;
  7987  0ABE  3028               	movlw	40
  7988  0ABF  009D               	movwf	29	;volatile
  7989                           
  7990                           ;i2c2.c: 212: SSP2CON3 = 0x00;
  7991  0AC0  019F               	clrf	31	;volatile
  7992                           
  7993                           ;i2c2.c: 214: SSP2ADD = 0x09;
  7994  0AC1  3009               	movlw	9
  7995  0AC2  009A               	movwf	26	;volatile
  7996                           
  7997                           ;i2c2.c: 218: PIR4bits.SSP2IF = 0;
  7998  0AC3  0020               	movlb	0	; select bank0
  7999  0AC4  1014               	bcf	20,0	;volatile
  8000                           
  8001                           ;i2c2.c: 220: PIE4bits.SSP2IE = 1;
  8002  0AC5  0021               	movlb	1	; select bank1
  8003  0AC6  1414               	bsf	20,0	;volatile
  8004  0AC7  0008               	return
  8005  0AC8                     __end_of_I2C2_Initialize:	
  8006                           
  8007                           	psect	text39
  8008  0BC7                     __ptext39:	
  8009 ;; *************** function _I2C1_Initialize *****************
  8010 ;; Defined at:
  8011 ;;		line 30 in file "mcc_generated_files/i2c1.c"
  8012 ;; Parameters:    Size  Location     Type
  8013 ;;		None
  8014 ;; Auto vars:     Size  Location     Type
  8015 ;;		None
  8016 ;; Return value:  Size  Location     Type
  8017 ;;                  1    wreg      void 
  8018 ;; Registers used:
  8019 ;;		wreg, status,2, status,0, pclath, cstack
  8020 ;; Tracked objects:
  8021 ;;		On entry : 0/0
  8022 ;;		On exit  : 0/0
  8023 ;;		Unchanged: 0/0
  8024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8025 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8026 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8027 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8028 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8029 ;;Total ram usage:        2 bytes
  8030 ;; Hardware stack levels used:    1
  8031 ;; Hardware stack levels required when called:    6
  8032 ;; This function calls:
  8033 ;;		_PROTOCOL_Read_Device_Address
  8034 ;; This function is called by:
  8035 ;;		_main
  8036 ;;		_SYSTEM_Initialize
  8037 ;; This function uses a non-reentrant model
  8038 ;;
  8039                           
  8040                           
  8041                           ;psect for function _I2C1_Initialize
  8042  0BC7                     _I2C1_Initialize:	
  8043                           
  8044                           ;i2c1.c: 34: _delay((unsigned long)((2000)*(4000000/4000.0)));
  8045                           
  8046                           ;incstack = 0
  8047                           ; Regs used in _I2C1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8048  0BC7  300B               	movlw	11
  8049  0BC8  0020               	movlb	0	; select bank0
  8050  0BC9  00A2               	movwf	??_I2C1_Initialize+1
  8051  0BCA  3026               	movlw	38
  8052  0BCB  00A1               	movwf	??_I2C1_Initialize
  8053  0BCC  305D               	movlw	93
  8054  0BCD                     u4447:	
  8055  0BCD  0B89               	decfsz	9,f
  8056  0BCE  2BCD               	goto	u4447
  8057  0BCF  0BA1               	decfsz	??_I2C1_Initialize,f
  8058  0BD0  2BCD               	goto	u4447
  8059  0BD1  0BA2               	decfsz	??_I2C1_Initialize+1,f
  8060  0BD2  2BCD               	goto	u4447
  8061  0BD3  3200               	nop2
  8062                           
  8063                           ;i2c1.c: 38: SSP1STAT = 0x80;
  8064  0BD4  3080               	movlw	128
  8065  0BD5  0024               	movlb	4	; select bank4
  8066  0BD6  0094               	movwf	20	;volatile
  8067                           
  8068                           ;i2c1.c: 40: SSP1CON1 = 0x26;
  8069  0BD7  3026               	movlw	38
  8070  0BD8  0095               	movwf	21	;volatile
  8071                           
  8072                           ;i2c1.c: 42: SSP1CON2 = 0x81;
  8073  0BD9  3081               	movlw	129
  8074  0BDA  0096               	movwf	22	;volatile
  8075                           
  8076                           ;i2c1.c: 44: SSP1CON3 = 0x00;
  8077  0BDB  0197               	clrf	23	;volatile
  8078                           
  8079                           ;i2c1.c: 46: SSP1MSK = (0x7F << 1);
  8080  0BDC  30FE               	movlw	254
  8081  0BDD  0093               	movwf	19	;volatile
  8082                           
  8083                           ;i2c1.c: 48: SSP1ADD = (PROTOCOL_Read_Device_Address() << 1);
  8084  0BDE  318A  220B         	fcall	_PROTOCOL_Read_Device_Address
  8085  0BE0  0709               	addwf	9,w
  8086  0BE1  0024               	movlb	4	; select bank4
  8087  0BE2  0092               	movwf	18	;volatile
  8088                           
  8089                           ;i2c1.c: 51: PIR1bits.SSP1IF = 0;
  8090  0BE3  0020               	movlb	0	; select bank0
  8091  0BE4  1191               	bcf	17,3	;volatile
  8092                           
  8093                           ;i2c1.c: 53: PIE1bits.SSP1IE = 1;
  8094  0BE5  0021               	movlb	1	; select bank1
  8095  0BE6  1591               	bsf	17,3	;volatile
  8096  0BE7  0008               	return
  8097  0BE8                     __end_of_I2C1_Initialize:	
  8098                           
  8099                           	psect	text40
  8100  0A0B                     __ptext40:	
  8101 ;; *************** function _PROTOCOL_Read_Device_Address *****************
  8102 ;; Defined at:
  8103 ;;		line 89 in file "protocol.c"
  8104 ;; Parameters:    Size  Location     Type
  8105 ;;		None
  8106 ;; Auto vars:     Size  Location     Type
  8107 ;;		None
  8108 ;; Return value:  Size  Location     Type
  8109 ;;                  1    wreg      unsigned char 
  8110 ;; Registers used:
  8111 ;;		wreg
  8112 ;; Tracked objects:
  8113 ;;		On entry : 0/0
  8114 ;;		On exit  : 0/0
  8115 ;;		Unchanged: 0/0
  8116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8117 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8118 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8119 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8120 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8121 ;;Total ram usage:        0 bytes
  8122 ;; Hardware stack levels used:    1
  8123 ;; Hardware stack levels required when called:    5
  8124 ;; This function calls:
  8125 ;;		Nothing
  8126 ;; This function is called by:
  8127 ;;		_I2C1_Initialize
  8128 ;;		_PROTOCOL_Loop
  8129 ;; This function uses a non-reentrant model
  8130 ;;
  8131                           
  8132                           
  8133                           ;psect for function _PROTOCOL_Read_Device_Address
  8134  0A0B                     _PROTOCOL_Read_Device_Address:	
  8135                           
  8136                           ;protocol.c: 90: return slave_address;
  8137                           
  8138                           ;incstack = 0
  8139                           ; Regs used in _PROTOCOL_Read_Device_Address: [wreg]
  8140  0A0B  0021               	movlb	1	; select bank1
  8141  0A0C  0843               	movf	_slave_address^(0+128),w
  8142  0A0D  0008               	return
  8143  0A0E                     __end_of_PROTOCOL_Read_Device_Address:	
  8144                           
  8145                           	psect	text41
  8146  0AE1                     __ptext41:	
  8147 ;; *************** function _EUSART_Initialize *****************
  8148 ;; Defined at:
  8149 ;;		line 75 in file "mcc_generated_files/eusart.c"
  8150 ;; Parameters:    Size  Location     Type
  8151 ;;		None
  8152 ;; Auto vars:     Size  Location     Type
  8153 ;;		None
  8154 ;; Return value:  Size  Location     Type
  8155 ;;                  1    wreg      void 
  8156 ;; Registers used:
  8157 ;;		wreg, status,2
  8158 ;; Tracked objects:
  8159 ;;		On entry : 0/0
  8160 ;;		On exit  : 0/0
  8161 ;;		Unchanged: 0/0
  8162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8163 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8164 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8165 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8166 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8167 ;;Total ram usage:        1 bytes
  8168 ;; Hardware stack levels used:    1
  8169 ;; Hardware stack levels required when called:    5
  8170 ;; This function calls:
  8171 ;;		Nothing
  8172 ;; This function is called by:
  8173 ;;		_main
  8174 ;;		_SYSTEM_Initialize
  8175 ;; This function uses a non-reentrant model
  8176 ;;
  8177                           
  8178                           
  8179                           ;psect for function _EUSART_Initialize
  8180  0AE1                     _EUSART_Initialize:	
  8181                           
  8182                           ;eusart.c: 78: PIE1bits.RCIE = 0;
  8183                           
  8184                           ;incstack = 0
  8185                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  8186  0AE1  0021               	movlb	1	; select bank1
  8187  0AE2  1291               	bcf	17,5	;volatile
  8188                           
  8189                           ;eusart.c: 79: PIE1bits.TXIE = 0;
  8190  0AE3  1211               	bcf	17,4	;volatile
  8191                           
  8192                           ;eusart.c: 84: BAUDCON = 0x08;
  8193  0AE4  3008               	movlw	8
  8194  0AE5  0023               	movlb	3	; select bank3
  8195  0AE6  009F               	movwf	31	;volatile
  8196                           
  8197                           ;eusart.c: 87: RCSTA = 0x90;
  8198  0AE7  3090               	movlw	144
  8199  0AE8  009D               	movwf	29	;volatile
  8200                           
  8201                           ;eusart.c: 90: TXSTA = 0x24;
  8202  0AE9  3024               	movlw	36
  8203  0AEA  009E               	movwf	30	;volatile
  8204                           
  8205                           ;eusart.c: 93: SPBRGL = 0x67;
  8206  0AEB  3067               	movlw	103
  8207  0AEC  009B               	movwf	27	;volatile
  8208                           
  8209                           ;eusart.c: 96: SPBRGH = 0x00;
  8210  0AED  019C               	clrf	28	;volatile
  8211                           
  8212                           ;eusart.c: 100: eusartTxHead = 0;
  8213  0AEE  01FC               	clrf	_eusartTxHead	;volatile
  8214                           
  8215                           ;eusart.c: 101: eusartTxTail = 0;
  8216  0AEF  01FB               	clrf	_eusartTxTail	;volatile
  8217                           
  8218                           ;eusart.c: 102: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
  8219  0AF0  3008               	movlw	8
  8220  0AF1  0020               	movlb	0	; select bank0
  8221  0AF2  00A1               	movwf	??_EUSART_Initialize
  8222  0AF3  0821               	movf	??_EUSART_Initialize,w
  8223  0AF4  00FA               	movwf	_eusartTxBufferRemaining	;volatile
  8224                           
  8225                           ;eusart.c: 104: eusartRxHead = 0;
  8226  0AF5  01E9               	clrf	_eusartRxHead	;volatile
  8227                           
  8228                           ;eusart.c: 105: eusartRxTail = 0;
  8229  0AF6  01E8               	clrf	_eusartRxTail	;volatile
  8230                           
  8231                           ;eusart.c: 106: eusartRxCount = 0;
  8232  0AF7  01E7               	clrf	_eusartRxCount	;volatile
  8233                           
  8234                           ;eusart.c: 109: PIE1bits.RCIE = 1;
  8235  0AF8  0021               	movlb	1	; select bank1
  8236  0AF9  1691               	bsf	17,5	;volatile
  8237  0AFA  0008               	return
  8238  0AFB                     __end_of_EUSART_Initialize:	
  8239                           
  8240                           	psect	intentry
  8241  0004                     __pintentry:	
  8242 ;; *************** function _INTERRUPT_InterruptManager *****************
  8243 ;; Defined at:
  8244 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  8245 ;; Parameters:    Size  Location     Type
  8246 ;;		None
  8247 ;; Auto vars:     Size  Location     Type
  8248 ;;		None
  8249 ;; Return value:  Size  Location     Type
  8250 ;;                  1    wreg      void 
  8251 ;; Registers used:
  8252 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8253 ;; Tracked objects:
  8254 ;;		On entry : 0/0
  8255 ;;		On exit  : 0/0
  8256 ;;		Unchanged: 0/0
  8257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8260 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8261 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8262 ;;Total ram usage:        1 bytes
  8263 ;; Hardware stack levels used:    1
  8264 ;; Hardware stack levels required when called:    4
  8265 ;; This function calls:
  8266 ;;		_EUSART_Receive_ISR
  8267 ;;		_EUSART_Transmit_ISR
  8268 ;;		_I2C1_ISR
  8269 ;;		_I2C2_BusCollisionISR
  8270 ;;		_I2C2_ISR
  8271 ;; This function is called by:
  8272 ;;		Interrupt level 1
  8273 ;; This function uses a non-reentrant model
  8274 ;;
  8275                           
  8276  0004                     _INTERRUPT_InterruptManager:	
  8277                           
  8278                           ;incstack = 0
  8279  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  8280                           
  8281                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8282  0005  3180               	pagesel	$
  8283  0006  0020               	movlb	0	; select bank0
  8284  0007  087F               	movf	127,w
  8285  0008  00A0               	movwf	??_INTERRUPT_InterruptManager
  8286                           
  8287                           ;interrupt_manager.c: 54: if(INTCONbits.PEIE == 1 && PIE1bits.TXIE == 1 && PIR1bits.TXIF
      +                           == 1)
  8288  0009  1F0B               	btfss	11,6	;volatile
  8289  000A  2815               	goto	i1l323
  8290  000B  0021               	movlb	1	; select bank1
  8291  000C  1E11               	btfss	17,4	;volatile
  8292  000D  2815               	goto	i1l323
  8293  000E  0020               	movlb	0	; select bank0
  8294  000F  1E11               	btfss	17,4	;volatile
  8295  0010  2815               	goto	i1l323
  8296                           
  8297                           ;interrupt_manager.c: 55: {
  8298                           ;interrupt_manager.c: 56: EUSART_Transmit_ISR();
  8299  0011  318B  2316  3180   	fcall	_EUSART_Transmit_ISR
  8300                           
  8301                           ;interrupt_manager.c: 57: }
  8302  0014  2843               	goto	i1l333
  8303  0015                     i1l323:	
  8304                           
  8305                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits
      +                          .RCIF == 1)
  8306  0015  1F0B               	btfss	11,6	;volatile
  8307  0016  2821               	goto	i1l325
  8308  0017  0021               	movlb	1	; select bank1
  8309  0018  1E91               	btfss	17,5	;volatile
  8310  0019  2821               	goto	i1l325
  8311  001A  0020               	movlb	0	; select bank0
  8312  001B  1E91               	btfss	17,5	;volatile
  8313  001C  2821               	goto	i1l325
  8314                           
  8315                           ;interrupt_manager.c: 59: {
  8316                           ;interrupt_manager.c: 60: EUSART_Receive_ISR();
  8317  001D  318A  22FB  3180   	fcall	_EUSART_Receive_ISR
  8318                           
  8319                           ;interrupt_manager.c: 61: }
  8320  0020  2843               	goto	i1l333
  8321  0021                     i1l325:	
  8322                           
  8323                           ;interrupt_manager.c: 62: else if(INTCONbits.PEIE == 1 && PIE1bits.SSP1IE == 1 && PIR1bi
      +                          ts.SSP1IF == 1)
  8324  0021  1F0B               	btfss	11,6	;volatile
  8325  0022  282D               	goto	i1l327
  8326  0023  0021               	movlb	1	; select bank1
  8327  0024  1D91               	btfss	17,3	;volatile
  8328  0025  282D               	goto	i1l327
  8329  0026  0020               	movlb	0	; select bank0
  8330  0027  1D91               	btfss	17,3	;volatile
  8331  0028  282D               	goto	i1l327
  8332                           
  8333                           ;interrupt_manager.c: 63: {
  8334                           ;interrupt_manager.c: 64: I2C1_ISR();
  8335  0029  318C  2451  3180   	fcall	_I2C1_ISR
  8336                           
  8337                           ;interrupt_manager.c: 65: }
  8338  002C  2843               	goto	i1l333
  8339  002D                     i1l327:	
  8340                           
  8341                           ;interrupt_manager.c: 66: else if(INTCONbits.PEIE == 1 && PIE4bits.BCL2IE == 1 && PIR4bi
      +                          ts.BCL2IF == 1)
  8342  002D  1F0B               	btfss	11,6	;volatile
  8343  002E  2839               	goto	i1l329
  8344  002F  0021               	movlb	1	; select bank1
  8345  0030  1C94               	btfss	20,1	;volatile
  8346  0031  2839               	goto	i1l329
  8347  0032  0020               	movlb	0	; select bank0
  8348  0033  1C94               	btfss	20,1	;volatile
  8349  0034  2839               	goto	i1l329
  8350                           
  8351                           ;interrupt_manager.c: 67: {
  8352                           ;interrupt_manager.c: 68: I2C2_BusCollisionISR();
  8353  0035  3189  21FE  3180   	fcall	_I2C2_BusCollisionISR
  8354                           
  8355                           ;interrupt_manager.c: 69: }
  8356  0038  2843               	goto	i1l333
  8357  0039                     i1l329:	
  8358                           
  8359                           ;interrupt_manager.c: 70: else if(INTCONbits.PEIE == 1 && PIE4bits.SSP2IE == 1 && PIR4bi
      +                          ts.SSP2IF == 1)
  8360  0039  1F0B               	btfss	11,6	;volatile
  8361  003A  2843               	goto	i1l333
  8362  003B  0021               	movlb	1	; select bank1
  8363  003C  1C14               	btfss	20,0	;volatile
  8364  003D  2843               	goto	i1l333
  8365  003E  0020               	movlb	0	; select bank0
  8366  003F  1C14               	btfss	20,0	;volatile
  8367  0040  2843               	goto	i1l333
  8368                           
  8369                           ;interrupt_manager.c: 71: {
  8370                           ;interrupt_manager.c: 72: I2C2_ISR();
  8371  0041  3183  23E4         	fcall	_I2C2_ISR
  8372  0043                     i1l333:	
  8373                           ;interrupt_manager.c: 74: else
  8374                           ;interrupt_manager.c: 75: {
  8375                           
  8376                           ;interrupt_manager.c: 73: }
  8377                           
  8378  0043  0020               	movlb	0	; select bank0
  8379  0044  0820               	movf	??_INTERRUPT_InterruptManager,w
  8380  0045  00FF               	movwf	127
  8381  0046  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  8382  0047  0009               	retfie
  8383  0048                     __end_of_INTERRUPT_InterruptManager:	
  8384                           
  8385                           	psect	text43
  8386  03E4                     __ptext43:	
  8387 ;; *************** function _I2C2_ISR *****************
  8388 ;; Defined at:
  8389 ;;		line 233 in file "mcc_generated_files/i2c2.c"
  8390 ;; Parameters:    Size  Location     Type
  8391 ;;		None
  8392 ;; Auto vars:     Size  Location     Type
  8393 ;;		None
  8394 ;; Return value:  Size  Location     Type
  8395 ;;                  1    wreg      void 
  8396 ;; Registers used:
  8397 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8398 ;; Tracked objects:
  8399 ;;		On entry : 0/0
  8400 ;;		On exit  : 0/0
  8401 ;;		Unchanged: 0/0
  8402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8404 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8405 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8406 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8407 ;;Total ram usage:        4 bytes
  8408 ;; Hardware stack levels used:    1
  8409 ;; Hardware stack levels required when called:    1
  8410 ;; This function calls:
  8411 ;;		_I2C2_FunctionComplete
  8412 ;;		_I2C2_Stop
  8413 ;; This function is called by:
  8414 ;;		_INTERRUPT_InterruptManager
  8415 ;; This function uses a non-reentrant model
  8416 ;;
  8417                           
  8418                           
  8419                           ;psect for function _I2C2_ISR
  8420  03E4                     _I2C2_ISR:	
  8421                           
  8422                           ;i2c2.c: 236: static uint8_t *pi2c_buf_ptr;
  8423                           ;i2c2.c: 237: static uint16_t i2c_address = 0;
  8424                           ;i2c2.c: 238: static uint8_t i2c_bytes_left = 0;
  8425                           ;i2c2.c: 239: static uint8_t i2c_10bit_address_restart = 0;
  8426                           ;i2c2.c: 241: PIR4bits.SSP2IF = 0;
  8427                           
  8428                           ;incstack = 0
  8429                           ; Regs used in _I2C2_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8430  03E4  0020               	movlb	0	; select bank0
  8431  03E5  1014               	bcf	20,0	;volatile
  8432                           
  8433                           ;i2c2.c: 245: if(SSP2CON1bits.WCOL)
  8434  03E6  0024               	movlb	4	; select bank4
  8435  03E7  1F9D               	btfss	29,7	;volatile
  8436  03E8  2D27               	goto	i1l3705
  8437                           
  8438                           ;i2c2.c: 246: {
  8439                           ;i2c2.c: 248: SSP2CON1bits.WCOL = 0;
  8440  03E9  139D               	bcf	29,7	;volatile
  8441                           
  8442                           ;i2c2.c: 249: i2c2_state = S_MASTER_IDLE;
  8443  03EA  0021               	movlb	1	; select bank1
  8444  03EB  01C9               	clrf	_i2c2_state^(0+128)
  8445                           
  8446                           ;i2c2.c: 250: *(p_i2c2_current->pTrFlag) = I2C2_MESSAGE_FAIL;
  8447  03EC  0020               	movlb	0	; select bank0
  8448  03ED  086A               	movf	_p_i2c2_current,w
  8449  03EE  3E02               	addlw	2
  8450  03EF  0086               	movwf	6
  8451  03F0  0187               	clrf	7
  8452  03F1  0801               	movf	1,w
  8453  03F2  0086               	movwf	6
  8454  03F3  0187               	clrf	7
  8455  03F4  0181               	clrf	1
  8456  03F5  0A81               	incf	1,f
  8457                           
  8458                           ;i2c2.c: 253: p_i2c2_current = (0);
  8459  03F6  01EA               	clrf	_p_i2c2_current
  8460                           
  8461                           ;i2c2.c: 255: return;
  8462  03F7  0008               	return
  8463  03F8                     i1l184:	
  8464                           ;i2c2.c: 260: {
  8465                           ;i2c2.c: 261: case S_MASTER_IDLE:
  8466                           
  8467                           ;i2c2.c: 256: }
  8468                           ;i2c2.c: 259: switch(i2c2_state)
  8469                           
  8470                           
  8471                           ;i2c2.c: 263: if(i2c2_object.trStatus.s.empty != 1)
  8472  03F8  0020               	movlb	0	; select bank0
  8473  03F9  18E2               	btfsc	_i2c2_object+2,1
  8474  03FA  0008               	return
  8475                           
  8476                           ;i2c2.c: 264: {
  8477                           ;i2c2.c: 266: p_i2c2_current = i2c2_object.pTrHead;
  8478  03FB  0861               	movf	low ((_i2c2_object| 0+1)),w
  8479  03FC  00F2               	movwf	??_I2C2_ISR
  8480  03FD  0872               	movf	??_I2C2_ISR,w
  8481  03FE  00EA               	movwf	_p_i2c2_current
  8482                           
  8483                           ;i2c2.c: 267: i2c2_trb_count = i2c2_object.pTrHead->count;
  8484  03FF  0861               	movf	low ((_i2c2_object| 0+1)),w
  8485  0400  0086               	movwf	6
  8486  0401  0187               	clrf	7
  8487  0402  0801               	movf	1,w
  8488  0403  00F2               	movwf	??_I2C2_ISR
  8489  0404  0872               	movf	??_I2C2_ISR,w
  8490  0405  0021               	movlb	1	; select bank1
  8491  0406  00C8               	movwf	_i2c2_trb_count^(0+128)
  8492                           
  8493                           ;i2c2.c: 268: p_i2c2_trb_current = i2c2_object.pTrHead->ptrb_list;
  8494  0407  0020               	movlb	0	; select bank0
  8495  0408  0861               	movf	low ((_i2c2_object| 0+1)),w
  8496  0409  0086               	movwf	6
  8497  040A  0187               	clrf	7
  8498  040B  3F41               	moviw [1]fsr1
  8499  040C  00EB               	movwf	_p_i2c2_trb_current
  8500                           
  8501                           ;i2c2.c: 270: i2c2_object.pTrHead++;
  8502  040D  3003               	movlw	3
  8503  040E  00F2               	movwf	??_I2C2_ISR
  8504  040F  0872               	movf	??_I2C2_ISR,w
  8505  0410  07E1               	addwf	low ((_i2c2_object| 0+1)),f
  8506                           
  8507                           ;i2c2.c: 273: if(i2c2_object.pTrHead == (i2c2_tr_queue + 1))
  8508  0411  0861               	movf	low ((_i2c2_object| 0+1)),w
  8509  0412  3AE1               	xorlw	(low ((_i2c2_tr_queue| 0+3)))& (0+255)
  8510  0413  1D03               	skipz
  8511  0414  2C19               	goto	i1l3593
  8512                           
  8513                           ;i2c2.c: 274: {
  8514                           ;i2c2.c: 276: i2c2_object.pTrHead = i2c2_tr_queue;
  8515  0415  30DE               	movlw	(low (_i2c2_tr_queue| 0))& (0+255)
  8516  0416  00F2               	movwf	??_I2C2_ISR
  8517  0417  0872               	movf	??_I2C2_ISR,w
  8518  0418  00E1               	movwf	low ((_i2c2_object| 0+1))
  8519  0419                     i1l3593:	
  8520                           
  8521                           ;i2c2.c: 277: }
  8522                           ;i2c2.c: 281: i2c2_object.trStatus.s.full = 0;
  8523  0419  1062               	bcf	_i2c2_object+2,0
  8524                           
  8525                           ;i2c2.c: 284: if(i2c2_object.pTrHead == i2c2_object.pTrTail)
  8526  041A  0861               	movf	low ((_i2c2_object| 0+1)),w
  8527  041B  0660               	xorwf	_i2c2_object,w
  8528  041C  1903               	btfsc	3,2
  8529                           
  8530                           ;i2c2.c: 285: {
  8531                           ;i2c2.c: 287: i2c2_object.trStatus.s.empty = 1;
  8532  041D  14E2               	bsf	_i2c2_object+2,1
  8533                           
  8534                           ;i2c2.c: 288: }
  8535                           ;i2c2.c: 291: SSP2CON2bits.SEN = 1;
  8536  041E  0024               	movlb	4	; select bank4
  8537  041F  141E               	bsf	30,0	;volatile
  8538                           
  8539                           ;i2c2.c: 294: i2c2_state = S_MASTER_SEND_ADDR;
  8540  0420  3002               	movlw	2
  8541  0421  00F2               	movwf	??_I2C2_ISR
  8542  0422  0872               	movf	??_I2C2_ISR,w
  8543  0423  0021               	movlb	1	; select bank1
  8544  0424  00C9               	movwf	_i2c2_state^(0+128)
  8545                           
  8546                           ;i2c2.c: 295: }
  8547                           ;i2c2.c: 297: break;
  8548  0425  0008               	return
  8549  0426                     i1l189:	
  8550                           ;i2c2.c: 299: case S_MASTER_RESTART:
  8551                           
  8552                           
  8553                           ;i2c2.c: 304: SSP2CON2bits.RSEN = 1;
  8554  0426  0024               	movlb	4	; select bank4
  8555  0427  149E               	bsf	30,1	;volatile
  8556                           
  8557                           ;i2c2.c: 307: i2c2_state = S_MASTER_SEND_ADDR;
  8558  0428  3002               	movlw	2
  8559  0429  00F2               	movwf	??_I2C2_ISR
  8560  042A  0872               	movf	??_I2C2_ISR,w
  8561  042B  0021               	movlb	1	; select bank1
  8562  042C  00C9               	movwf	_i2c2_state^(0+128)
  8563                           
  8564                           ;i2c2.c: 309: break;
  8565  042D  0008               	return
  8566  042E                     i1l190:	
  8567                           ;i2c2.c: 311: case S_MASTER_SEND_ADDR_10BIT_LSB:
  8568                           
  8569                           
  8570                           ;i2c2.c: 313: if(SSP2CON2bits.ACKSTAT)
  8571  042E  0024               	movlb	4	; select bank4
  8572  042F  1F1E               	btfss	30,6	;volatile
  8573  0430  2C3A               	goto	i1l3605
  8574                           
  8575                           ;i2c2.c: 314: {
  8576                           ;i2c2.c: 315: i2c2_object.i2cErrors++;
  8577  0431  3001               	movlw	1
  8578  0432  00F2               	movwf	??_I2C2_ISR
  8579  0433  0872               	movf	??_I2C2_ISR,w
  8580  0434  0020               	movlb	0	; select bank0
  8581  0435  07E4               	addwf	_i2c2_object+4,f
  8582                           
  8583                           ;i2c2.c: 316: I2C2_Stop(I2C2_MESSAGE_ADDRESS_NO_ACK);
  8584  0436  3004               	movlw	4
  8585  0437  318A  22C8         	fcall	_I2C2_Stop
  8586                           
  8587                           ;i2c2.c: 317: }
  8588  0439  0008               	return
  8589  043A                     i1l3605:	
  8590                           
  8591                           ;i2c2.c: 318: else
  8592                           ;i2c2.c: 319: {
  8593                           ;i2c2.c: 321: SSP2BUF = (i2c_address >> 1) & 0x00FF;
  8594  043A  0020               	movlb	0	; select bank0
  8595  043B  086E               	movf	I2C2_ISR@i2c_address+1,w
  8596  043C  00F3               	movwf	??_I2C2_ISR+1
  8597  043D  086D               	movf	I2C2_ISR@i2c_address,w
  8598  043E  00F2               	movwf	??_I2C2_ISR
  8599  043F  36F3               	lsrf	??_I2C2_ISR+1,f
  8600  0440  0CF2               	rrf	??_I2C2_ISR,f
  8601  0441  0872               	movf	??_I2C2_ISR,w
  8602  0442  0024               	movlb	4	; select bank4
  8603  0443  0099               	movwf	25	;volatile
  8604                           
  8605                           ;i2c2.c: 324: if(i2c_address & 0x01)
  8606  0444  0020               	movlb	0	; select bank0
  8607  0445  1C6D               	btfss	I2C2_ISR@i2c_address,0
  8608  0446  2C4D               	goto	i1l3611
  8609                           
  8610                           ;i2c2.c: 325: {
  8611                           ;i2c2.c: 328: i2c2_state = S_MASTER_10BIT_RESTART;
  8612  0447  300B               	movlw	11
  8613  0448  00F2               	movwf	??_I2C2_ISR
  8614  0449  0872               	movf	??_I2C2_ISR,w
  8615  044A  0021               	movlb	1	; select bank1
  8616  044B  00C9               	movwf	_i2c2_state^(0+128)
  8617                           
  8618                           ;i2c2.c: 329: }
  8619  044C  0008               	return
  8620  044D                     i1l3611:	
  8621                           
  8622                           ;i2c2.c: 330: else
  8623                           ;i2c2.c: 331: {
  8624                           ;i2c2.c: 333: i2c2_state = S_MASTER_SEND_DATA;
  8625  044D  3003               	movlw	3
  8626  044E  00F2               	movwf	??_I2C2_ISR
  8627  044F  0872               	movf	??_I2C2_ISR,w
  8628  0450  0021               	movlb	1	; select bank1
  8629  0451  00C9               	movwf	_i2c2_state^(0+128)
  8630                           
  8631                           ;i2c2.c: 334: }
  8632                           ;i2c2.c: 335: }
  8633                           ;i2c2.c: 337: break;
  8634  0452  0008               	return
  8635  0453                     i1l195:	
  8636                           ;i2c2.c: 339: case S_MASTER_10BIT_RESTART:
  8637                           
  8638                           
  8639                           ;i2c2.c: 341: if(SSP2CON2bits.ACKSTAT)
  8640  0453  0024               	movlb	4	; select bank4
  8641  0454  1F1E               	btfss	30,6	;volatile
  8642  0455  2C5F               	goto	i1l196
  8643                           
  8644                           ;i2c2.c: 342: {
  8645                           ;i2c2.c: 343: i2c2_object.i2cErrors++;
  8646  0456  3001               	movlw	1
  8647  0457  00F2               	movwf	??_I2C2_ISR
  8648  0458  0872               	movf	??_I2C2_ISR,w
  8649  0459  0020               	movlb	0	; select bank0
  8650  045A  07E4               	addwf	_i2c2_object+4,f
  8651                           
  8652                           ;i2c2.c: 344: I2C2_Stop(I2C2_MESSAGE_ADDRESS_NO_ACK);
  8653  045B  3004               	movlw	4
  8654  045C  318A  22C8         	fcall	_I2C2_Stop
  8655                           
  8656                           ;i2c2.c: 345: }
  8657  045E  0008               	return
  8658  045F                     i1l196:	
  8659                           
  8660                           ;i2c2.c: 346: else
  8661                           ;i2c2.c: 347: {
  8662                           ;i2c2.c: 350: SSP2CON2bits.RSEN = 1;
  8663  045F  149E               	bsf	30,1	;volatile
  8664                           
  8665                           ;i2c2.c: 354: i2c_address = 0x00F0 | ((i2c_address >> 8) & 0x0006);
  8666  0460  0020               	movlb	0	; select bank0
  8667  0461  086E               	movf	I2C2_ISR@i2c_address+1,w
  8668  0462  00F3               	movwf	??_I2C2_ISR+1
  8669  0463  086D               	movf	I2C2_ISR@i2c_address,w
  8670  0464  00F2               	movwf	??_I2C2_ISR
  8671  0465  0873               	movf	??_I2C2_ISR+1,w
  8672  0466  00F2               	movwf	??_I2C2_ISR
  8673  0467  01F3               	clrf	??_I2C2_ISR+1
  8674  0468  3006               	movlw	6
  8675  0469  0572               	andwf	??_I2C2_ISR,w
  8676  046A  00F4               	movwf	??_I2C2_ISR+2
  8677  046B  3000               	movlw	0
  8678  046C  0573               	andwf	??_I2C2_ISR+1,w
  8679  046D  00F5               	movwf	??_I2C2_ISR+3
  8680  046E  30F0               	movlw	240
  8681  046F  0474               	iorwf	??_I2C2_ISR+2,w
  8682  0470  00ED               	movwf	I2C2_ISR@i2c_address
  8683  0471  3000               	movlw	0
  8684  0472  0475               	iorwf	??_I2C2_ISR+3,w
  8685  0473  00EE               	movwf	I2C2_ISR@i2c_address+1
  8686                           
  8687                           ;i2c2.c: 357: i2c_address |= 0x0001;
  8688  0474  146D               	bsf	I2C2_ISR@i2c_address,0
  8689                           
  8690                           ;i2c2.c: 360: i2c_10bit_address_restart = 1;
  8691  0475  0021               	movlb	1	; select bank1
  8692  0476  01C5               	clrf	I2C2_ISR@i2c_10bit_address_restart^(0+128)
  8693  0477  0AC5               	incf	I2C2_ISR@i2c_10bit_address_restart^(0+128),f
  8694                           
  8695                           ;i2c2.c: 363: i2c2_state = S_MASTER_SEND_ADDR;
  8696  0478  3002               	movlw	2
  8697  0479  00F2               	movwf	??_I2C2_ISR
  8698  047A  0872               	movf	??_I2C2_ISR,w
  8699  047B  00C9               	movwf	_i2c2_state^(0+128)
  8700                           
  8701                           ;i2c2.c: 364: }
  8702                           ;i2c2.c: 366: break;
  8703  047C  0008               	return
  8704  047D                     i1l3625:	
  8705                           ;i2c2.c: 368: case S_MASTER_SEND_ADDR:
  8706                           
  8707                           
  8708                           ;i2c2.c: 381: if(i2c_10bit_address_restart != 1)
  8709  047D  0345               	decf	I2C2_ISR@i2c_10bit_address_restart^(0+128),w
  8710  047E  1903               	btfsc	3,2
  8711  047F  2C95               	goto	i1l3645
  8712                           
  8713                           ;i2c2.c: 382: {
  8714                           ;i2c2.c: 384: i2c_address = p_i2c2_trb_current->address;
  8715  0480  0020               	movlb	0	; select bank0
  8716  0481  086B               	movf	_p_i2c2_trb_current,w
  8717  0482  0086               	movwf	6
  8718  0483  0187               	clrf	7
  8719  0484  3F40               	moviw [0]fsr1
  8720  0485  00ED               	movwf	I2C2_ISR@i2c_address
  8721  0486  3F41               	moviw [1]fsr1
  8722  0487  00EE               	movwf	I2C2_ISR@i2c_address+1
  8723                           
  8724                           ;i2c2.c: 385: pi2c_buf_ptr = p_i2c2_trb_current->pbuffer;
  8725  0488  086B               	movf	_p_i2c2_trb_current,w
  8726  0489  0086               	movwf	6
  8727  048A  0187               	clrf	7
  8728  048B  3F43               	moviw [3]fsr1
  8729  048C  0021               	movlb	1	; select bank1
  8730  048D  00C7               	movwf	I2C2_ISR@pi2c_buf_ptr^(0+128)
  8731                           
  8732                           ;i2c2.c: 386: i2c_bytes_left = p_i2c2_trb_current->length;
  8733  048E  0020               	movlb	0	; select bank0
  8734  048F  086B               	movf	_p_i2c2_trb_current,w
  8735  0490  0086               	movwf	6
  8736  0491  0187               	clrf	7
  8737  0492  3F42               	moviw [2]fsr1
  8738  0493  0021               	movlb	1	; select bank1
  8739  0494  00C6               	movwf	I2C2_ISR@i2c_bytes_left^(0+128)
  8740  0495                     i1l3645:	
  8741                           ;i2c2.c: 407: }
  8742                           ;i2c2.c: 408: }
  8743                           
  8744                           ;i2c2.c: 406: i2c_10bit_address_restart = 0;
  8745                           
  8746                           ;i2c2.c: 404: i2c2_state = S_MASTER_ACK_ADDR;
  8747                           
  8748                           ;i2c2.c: 400: else
  8749                           ;i2c2.c: 401: {
  8750                           ;i2c2.c: 403: SSP2BUF = i2c_address;
  8751                           
  8752                           ;i2c2.c: 399: }
  8753                           
  8754                           ;i2c2.c: 398: i2c2_state = S_MASTER_SEND_ADDR_10BIT_LSB;
  8755                           
  8756                           ;i2c2.c: 393: {
  8757                           ;i2c2.c: 397: SSP2BUF = 0xF0 | ((i2c_address >> 8) & 0x0006);
  8758                           
  8759                           ;i2c2.c: 391: {
  8760                           ;i2c2.c: 392: if (0 == i2c_10bit_address_restart)
  8761                           
  8762                           ;i2c2.c: 387: }
  8763                           ;i2c2.c: 390: if(!1 && (0x0 != i2c_address))
  8764                           
  8765                           
  8766                           ;i2c2.c: 409: else
  8767                           ;i2c2.c: 410: {
  8768                           ;i2c2.c: 412: SSP2BUF = i2c_address;
  8769  0495  0020               	movlb	0	; select bank0
  8770  0496  086D               	movf	I2C2_ISR@i2c_address,w
  8771  0497  0024               	movlb	4	; select bank4
  8772  0498  0099               	movwf	25	;volatile
  8773                           
  8774                           ;i2c2.c: 413: if(i2c_address & 0x01)
  8775  0499  0020               	movlb	0	; select bank0
  8776  049A  1C6D               	btfss	I2C2_ISR@i2c_address,0
  8777  049B  2CA2               	goto	i1l3651
  8778                           
  8779                           ;i2c2.c: 414: {
  8780                           ;i2c2.c: 416: i2c2_state = S_MASTER_ACK_ADDR;
  8781  049C  3005               	movlw	5
  8782  049D  00F2               	movwf	??_I2C2_ISR
  8783  049E  0872               	movf	??_I2C2_ISR,w
  8784  049F  0021               	movlb	1	; select bank1
  8785  04A0  00C9               	movwf	_i2c2_state^(0+128)
  8786                           
  8787                           ;i2c2.c: 417: }
  8788  04A1  0008               	return
  8789  04A2                     i1l3651:	
  8790                           
  8791                           ;i2c2.c: 418: else
  8792                           ;i2c2.c: 419: {
  8793                           ;i2c2.c: 421: i2c2_state = S_MASTER_SEND_DATA;
  8794  04A2  3003               	movlw	3
  8795  04A3  00F2               	movwf	??_I2C2_ISR
  8796  04A4  0872               	movf	??_I2C2_ISR,w
  8797  04A5  0021               	movlb	1	; select bank1
  8798  04A6  00C9               	movwf	_i2c2_state^(0+128)
  8799                           
  8800                           ;i2c2.c: 422: }
  8801                           ;i2c2.c: 423: }
  8802                           ;i2c2.c: 424: break;
  8803  04A7  0008               	return
  8804  04A8                     i1l206:	
  8805                           ;i2c2.c: 426: case S_MASTER_SEND_DATA:
  8806                           
  8807                           
  8808                           ;i2c2.c: 429: if(SSP2CON2bits.ACKSTAT)
  8809  04A8  0024               	movlb	4	; select bank4
  8810  04A9  1F1E               	btfss	30,6	;volatile
  8811  04AA  2CB6               	goto	i1l3659
  8812                           
  8813                           ;i2c2.c: 430: {
  8814                           ;i2c2.c: 432: i2c2_object.i2cErrors++;
  8815  04AB  3001               	movlw	1
  8816  04AC  00F2               	movwf	??_I2C2_ISR
  8817  04AD  0872               	movf	??_I2C2_ISR,w
  8818  04AE  0020               	movlb	0	; select bank0
  8819  04AF  07E4               	addwf	_i2c2_object+4,f
  8820                           
  8821                           ;i2c2.c: 435: SSP2CON2bits.ACKSTAT = 0;
  8822  04B0  0024               	movlb	4	; select bank4
  8823  04B1  131E               	bcf	30,6	;volatile
  8824                           
  8825                           ;i2c2.c: 438: I2C2_Stop(I2C2_DATA_NO_ACK);
  8826  04B2  3005               	movlw	5
  8827  04B3  318A  22C8         	fcall	_I2C2_Stop
  8828                           
  8829                           ;i2c2.c: 440: }
  8830  04B5  0008               	return
  8831  04B6                     i1l3659:	
  8832                           
  8833                           ;i2c2.c: 441: else
  8834                           ;i2c2.c: 442: {
  8835                           ;i2c2.c: 444: if(i2c_bytes_left-- == 0U)
  8836  04B6  3001               	movlw	1
  8837  04B7  0021               	movlb	1	; select bank1
  8838  04B8  02C6               	subwf	I2C2_ISR@i2c_bytes_left^(0+128),f
  8839  04B9  0A46               	incf	I2C2_ISR@i2c_bytes_left^(0+128),w
  8840  04BA  1D03               	btfss	3,2
  8841  04BB  2CD2               	goto	i1l3667
  8842                           
  8843                           ;i2c2.c: 445: {
  8844                           ;i2c2.c: 449: p_i2c2_trb_current++;
  8845  04BC  3004               	movlw	4
  8846  04BD  00F2               	movwf	??_I2C2_ISR
  8847  04BE  0872               	movf	??_I2C2_ISR,w
  8848  04BF  0020               	movlb	0	; select bank0
  8849  04C0  07EB               	addwf	_p_i2c2_trb_current,f
  8850                           
  8851                           ;i2c2.c: 452: if(--i2c2_trb_count == 0)
  8852  04C1  3001               	movlw	1
  8853  04C2  0021               	movlb	1	; select bank1
  8854  04C3  02C8               	subwf	_i2c2_trb_count^(0+128),f
  8855  04C4  1D03               	btfss	3,2
  8856  04C5  2CCA               	goto	i1l210
  8857                           
  8858                           ;i2c2.c: 453: {
  8859                           ;i2c2.c: 454: I2C2_Stop(I2C2_MESSAGE_COMPLETE);
  8860  04C6  3000               	movlw	0
  8861  04C7  318A  22C8         	fcall	_I2C2_Stop
  8862                           
  8863                           ;i2c2.c: 455: }
  8864  04C9  0008               	return
  8865  04CA                     i1l210:	
  8866                           
  8867                           ;i2c2.c: 456: else
  8868                           ;i2c2.c: 457: {
  8869                           ;i2c2.c: 464: SSP2CON2bits.RSEN = 1;
  8870  04CA  0024               	movlb	4	; select bank4
  8871  04CB  149E               	bsf	30,1	;volatile
  8872                           
  8873                           ;i2c2.c: 467: i2c2_state = S_MASTER_SEND_ADDR;
  8874  04CC  3002               	movlw	2
  8875  04CD  00F2               	movwf	??_I2C2_ISR
  8876  04CE  0872               	movf	??_I2C2_ISR,w
  8877  04CF  0021               	movlb	1	; select bank1
  8878  04D0  00C9               	movwf	_i2c2_state^(0+128)
  8879                           
  8880                           ;i2c2.c: 469: }
  8881                           ;i2c2.c: 470: }
  8882  04D1  0008               	return
  8883  04D2                     i1l3667:	
  8884                           
  8885                           ;i2c2.c: 471: else
  8886                           ;i2c2.c: 472: {
  8887                           ;i2c2.c: 474: SSP2BUF = *pi2c_buf_ptr++;
  8888  04D2  0847               	movf	I2C2_ISR@pi2c_buf_ptr^(0+128),w
  8889  04D3  0086               	movwf	6
  8890  04D4  0187               	clrf	7
  8891  04D5  0801               	movf	1,w
  8892  04D6  0024               	movlb	4	; select bank4
  8893  04D7  0099               	movwf	25	;volatile
  8894  04D8  3001               	movlw	1
  8895  04D9  00F2               	movwf	??_I2C2_ISR
  8896  04DA  0872               	movf	??_I2C2_ISR,w
  8897  04DB  0021               	movlb	1	; select bank1
  8898  04DC  07C7               	addwf	I2C2_ISR@pi2c_buf_ptr^(0+128),f
  8899                           
  8900                           ;i2c2.c: 475: }
  8901                           ;i2c2.c: 476: }
  8902                           ;i2c2.c: 477: break;
  8903  04DD  0008               	return
  8904  04DE                     i1l213:	
  8905                           ;i2c2.c: 479: case S_MASTER_ACK_ADDR:
  8906                           
  8907                           
  8908                           ;i2c2.c: 482: if(SSP2CON2bits.ACKSTAT)
  8909  04DE  0024               	movlb	4	; select bank4
  8910  04DF  1F1E               	btfss	30,6	;volatile
  8911  04E0  2CEC               	goto	i1l214
  8912                           
  8913                           ;i2c2.c: 483: {
  8914                           ;i2c2.c: 486: i2c2_object.i2cErrors++;
  8915  04E1  3001               	movlw	1
  8916  04E2  00F2               	movwf	??_I2C2_ISR
  8917  04E3  0872               	movf	??_I2C2_ISR,w
  8918  04E4  0020               	movlb	0	; select bank0
  8919  04E5  07E4               	addwf	_i2c2_object+4,f
  8920                           
  8921                           ;i2c2.c: 489: I2C2_Stop(I2C2_MESSAGE_ADDRESS_NO_ACK);
  8922  04E6  3004               	movlw	4
  8923  04E7  318A  22C8         	fcall	_I2C2_Stop
  8924                           
  8925                           ;i2c2.c: 492: SSP2CON2bits.ACKSTAT = 0;
  8926  04E9  0024               	movlb	4	; select bank4
  8927  04EA  131E               	bcf	30,6	;volatile
  8928                           
  8929                           ;i2c2.c: 493: }
  8930  04EB  0008               	return
  8931  04EC                     i1l214:	
  8932                           
  8933                           ;i2c2.c: 494: else
  8934                           ;i2c2.c: 495: {
  8935                           ;i2c2.c: 496: SSP2CON2bits.RCEN = 1;
  8936  04EC  159E               	bsf	30,3	;volatile
  8937                           
  8938                           ;i2c2.c: 497: i2c2_state = S_MASTER_ACK_RCV_DATA;
  8939  04ED  3008               	movlw	8
  8940  04EE  00F2               	movwf	??_I2C2_ISR
  8941  04EF  0872               	movf	??_I2C2_ISR,w
  8942  04F0  0021               	movlb	1	; select bank1
  8943  04F1  00C9               	movwf	_i2c2_state^(0+128)
  8944                           
  8945                           ;i2c2.c: 498: }
  8946                           ;i2c2.c: 499: break;
  8947  04F2  0008               	return
  8948  04F3                     i1l3679:	
  8949                           ;i2c2.c: 501: case S_MASTER_RCV_DATA:
  8950                           
  8951                           
  8952                           ;i2c2.c: 506: i2c2_state = S_MASTER_ACK_RCV_DATA;
  8953  04F3  3008               	movlw	8
  8954  04F4  00F2               	movwf	??_I2C2_ISR
  8955  04F5  0872               	movf	??_I2C2_ISR,w
  8956  04F6  00C9               	movwf	_i2c2_state^(0+128)
  8957                           
  8958                           ;i2c2.c: 509: SSP2CON2bits.RCEN = 1;
  8959  04F7  0024               	movlb	4	; select bank4
  8960  04F8  159E               	bsf	30,3	;volatile
  8961                           
  8962                           ;i2c2.c: 511: break;
  8963  04F9  0008               	return
  8964  04FA                     i1l3683:	
  8965                           ;i2c2.c: 513: case S_MASTER_ACK_RCV_DATA:
  8966                           
  8967                           
  8968                           ;i2c2.c: 516: *pi2c_buf_ptr++ = SSP2BUF;
  8969  04FA  0024               	movlb	4	; select bank4
  8970  04FB  0819               	movf	25,w	;volatile
  8971  04FC  00F2               	movwf	??_I2C2_ISR
  8972  04FD  0021               	movlb	1	; select bank1
  8973  04FE  0847               	movf	I2C2_ISR@pi2c_buf_ptr^(0+128),w
  8974  04FF  0086               	movwf	6
  8975  0500  0187               	clrf	7
  8976  0501  0872               	movf	??_I2C2_ISR,w
  8977  0502  0081               	movwf	1
  8978  0503  3001               	movlw	1
  8979  0504  00F2               	movwf	??_I2C2_ISR
  8980  0505  0872               	movf	??_I2C2_ISR,w
  8981  0506  07C7               	addwf	I2C2_ISR@pi2c_buf_ptr^(0+128),f
  8982                           
  8983                           ;i2c2.c: 519: if(--i2c_bytes_left)
  8984  0507  3001               	movlw	1
  8985  0508  02C6               	subwf	I2C2_ISR@i2c_bytes_left^(0+128),f
  8986  0509  1903               	btfsc	3,2
  8987  050A  2D13               	goto	i1l218
  8988                           
  8989                           ;i2c2.c: 520: {
  8990                           ;i2c2.c: 526: SSP2CON2bits.ACKDT = 0;
  8991  050B  0024               	movlb	4	; select bank4
  8992  050C  129E               	bcf	30,5	;volatile
  8993                           
  8994                           ;i2c2.c: 529: i2c2_state = S_MASTER_RCV_DATA;
  8995  050D  3006               	movlw	6
  8996  050E  00F2               	movwf	??_I2C2_ISR
  8997  050F  0872               	movf	??_I2C2_ISR,w
  8998  0510  0021               	movlb	1	; select bank1
  8999  0511  00C9               	movwf	_i2c2_state^(0+128)
  9000                           
  9001                           ;i2c2.c: 530: }
  9002  0512  2D17               	goto	i1l3695
  9003  0513                     i1l218:	
  9004                           
  9005                           ;i2c2.c: 531: else
  9006                           ;i2c2.c: 532: {
  9007                           ;i2c2.c: 536: SSP2CON2bits.ACKDT = 1;
  9008  0513  0024               	movlb	4	; select bank4
  9009  0514  169E               	bsf	30,5	;volatile
  9010                           
  9011                           ;i2c2.c: 538: I2C2_FunctionComplete();
  9012  0515  318A  229E         	fcall	_I2C2_FunctionComplete
  9013  0517                     i1l3695:	
  9014                           
  9015                           ;i2c2.c: 539: }
  9016                           ;i2c2.c: 542: SSP2CON2bits.ACKEN = 1;
  9017  0517  0024               	movlb	4	; select bank4
  9018  0518  161E               	bsf	30,4	;volatile
  9019                           
  9020                           ;i2c2.c: 543: break;
  9021  0519  0008               	return
  9022  051A                     i1l3697:	
  9023                           ;i2c2.c: 545: case S_MASTER_RCV_STOP:
  9024                           
  9025                           
  9026                           ;i2c2.c: 546: case S_MASTER_SEND_STOP:
  9027                           ;i2c2.c: 549: I2C2_Stop(I2C2_MESSAGE_COMPLETE);
  9028  051A  3000               	movlw	0
  9029  051B  318A  22C8         	fcall	_I2C2_Stop
  9030                           
  9031                           ;i2c2.c: 550: break;
  9032  051D  0008               	return
  9033  051E                     i1l3699:	
  9034                           ;i2c2.c: 552: default:
  9035                           
  9036                           
  9037                           ;i2c2.c: 556: i2c2_object.i2cErrors++;
  9038  051E  3001               	movlw	1
  9039  051F  00F2               	movwf	??_I2C2_ISR
  9040  0520  0872               	movf	??_I2C2_ISR,w
  9041  0521  0020               	movlb	0	; select bank0
  9042  0522  07E4               	addwf	_i2c2_object+4,f
  9043                           
  9044                           ;i2c2.c: 557: I2C2_Stop(I2C2_LOST_STATE);
  9045  0523  3006               	movlw	6
  9046  0524  318A  22C8         	fcall	_I2C2_Stop
  9047                           
  9048                           ;i2c2.c: 560: }
  9049                           
  9050                           ;i2c2.c: 558: break;
  9051  0526  0008               	return
  9052  0527                     i1l3705:	
  9053  0527  0021               	movlb	1	; select bank1
  9054  0528  0849               	movf	_i2c2_state^(0+128),w
  9055                           
  9056                           ; Switch size 1, requested type "space"
  9057                           ; Number of cases is 11, Range of values is 0 to 11
  9058                           ; switch strategies available:
  9059                           ; Name         Instructions Cycles
  9060                           ; direct_byte           30     6 (fixed)
  9061                           ; simple_byte           34    18 (average)
  9062                           ; jumptable            260     6 (fixed)
  9063                           ;	Chosen strategy is direct_byte
  9064  0529  0084               	movwf	4
  9065  052A  300C               	movlw	12
  9066  052B  0204               	subwf	4,w
  9067  052C  1803               	skipnc
  9068  052D  2D1E               	goto	i1l3699
  9069  052E  3188               	movlp	high i1S4713
  9070  052F  3504               	lslf	4,w
  9071  0530  3E00               	addlw	low i1S4713
  9072  0531  0082               	movwf	2
  9073  0532  0008               	return
  9074  0533                     __end_of_I2C2_ISR:	
  9075                           
  9076                           	psect	swtext1
  9077  0800                     __pswtext1:	
  9078  0800                     i1S4713:	
  9079  0800  3183  2BF8         	ljmp	i1l184
  9080  0802  3184  2C26         	ljmp	i1l189
  9081  0804  3184  2C7D         	ljmp	i1l3625
  9082  0806  3184  2CA8         	ljmp	i1l206
  9083  0808  3185  2D1A         	ljmp	i1l3697
  9084  080A  3184  2CDE         	ljmp	i1l213
  9085  080C  3184  2CF3         	ljmp	i1l3679
  9086  080E  3185  2D1A         	ljmp	i1l3697
  9087  0810  3184  2CFA         	ljmp	i1l3683
  9088  0812  3185  2D1E         	ljmp	i1l3699
  9089  0814  3184  2C2E         	ljmp	i1l190
  9090  0816  3184  2C53         	ljmp	i1l195
  9091                           
  9092                           	psect	text44
  9093  0AC8                     __ptext44:	
  9094 ;; *************** function _I2C2_Stop *****************
  9095 ;; Defined at:
  9096 ;;		line 581 in file "mcc_generated_files/i2c2.c"
  9097 ;; Parameters:    Size  Location     Type
  9098 ;;  completion_c    1    wreg     enum E2972
  9099 ;; Auto vars:     Size  Location     Type
  9100 ;;  completion_c    1    1[COMMON] enum E2972
  9101 ;; Return value:  Size  Location     Type
  9102 ;;                  1    wreg      void 
  9103 ;; Registers used:
  9104 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9105 ;; Tracked objects:
  9106 ;;		On entry : 0/0
  9107 ;;		On exit  : 0/0
  9108 ;;		Unchanged: 0/0
  9109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9111 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9112 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9113 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9114 ;;Total ram usage:        2 bytes
  9115 ;; Hardware stack levels used:    1
  9116 ;; This function calls:
  9117 ;;		Nothing
  9118 ;; This function is called by:
  9119 ;;		_I2C2_ISR
  9120 ;; This function uses a non-reentrant model
  9121 ;;
  9122                           
  9123                           
  9124                           ;psect for function _I2C2_Stop
  9125  0AC8                     _I2C2_Stop:	
  9126                           
  9127                           ;incstack = 0
  9128                           ; Regs used in _I2C2_Stop: [wreg+fsr1l+fsr1h+status,2+status,0]
  9129                           ;I2C2_Stop@completion_code stored from wreg
  9130  0AC8  00F1               	movwf	I2C2_Stop@completion_code
  9131                           
  9132                           ;i2c2.c: 584: SSP2CON2bits.PEN = 1;
  9133  0AC9  0024               	movlb	4	; select bank4
  9134  0ACA  151E               	bsf	30,2	;volatile
  9135                           
  9136                           ;i2c2.c: 587: if (p_i2c2_current->pTrFlag != (0))
  9137  0ACB  0020               	movlb	0	; select bank0
  9138  0ACC  086A               	movf	_p_i2c2_current,w
  9139  0ACD  3E02               	addlw	2
  9140  0ACE  0086               	movwf	6
  9141  0ACF  0187               	clrf	7
  9142  0AD0  0801               	movf	1,w
  9143  0AD1  1903               	btfsc	3,2
  9144  0AD2  2ADE               	goto	i1l3397
  9145                           
  9146                           ;i2c2.c: 588: {
  9147                           ;i2c2.c: 590: *(p_i2c2_current->pTrFlag) = completion_code;
  9148  0AD3  0871               	movf	I2C2_Stop@completion_code,w
  9149  0AD4  00F0               	movwf	??_I2C2_Stop
  9150  0AD5  086A               	movf	_p_i2c2_current,w
  9151  0AD6  3E02               	addlw	2
  9152  0AD7  0086               	movwf	6
  9153  0AD8  0187               	clrf	7
  9154  0AD9  0801               	movf	1,w
  9155  0ADA  0086               	movwf	6
  9156  0ADB  0187               	clrf	7
  9157  0ADC  0870               	movf	??_I2C2_Stop,w
  9158  0ADD  0081               	movwf	1
  9159  0ADE                     i1l3397:	
  9160                           
  9161                           ;i2c2.c: 591: }
  9162                           ;i2c2.c: 594: i2c2_state = S_MASTER_IDLE;
  9163  0ADE  0021               	movlb	1	; select bank1
  9164  0ADF  01C9               	clrf	_i2c2_state^(0+128)
  9165  0AE0  0008               	return
  9166  0AE1                     __end_of_I2C2_Stop:	
  9167                           
  9168                           	psect	text45
  9169  0A9E                     __ptext45:	
  9170 ;; *************** function _I2C2_FunctionComplete *****************
  9171 ;; Defined at:
  9172 ;;		line 563 in file "mcc_generated_files/i2c2.c"
  9173 ;; Parameters:    Size  Location     Type
  9174 ;;		None
  9175 ;; Auto vars:     Size  Location     Type
  9176 ;;		None
  9177 ;; Return value:  Size  Location     Type
  9178 ;;                  1    wreg      void 
  9179 ;; Registers used:
  9180 ;;		wreg, status,2, status,0
  9181 ;; Tracked objects:
  9182 ;;		On entry : 0/0
  9183 ;;		On exit  : 0/0
  9184 ;;		Unchanged: 0/0
  9185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9187 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9188 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9189 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9190 ;;Total ram usage:        1 bytes
  9191 ;; Hardware stack levels used:    1
  9192 ;; This function calls:
  9193 ;;		Nothing
  9194 ;; This function is called by:
  9195 ;;		_I2C2_ISR
  9196 ;; This function uses a non-reentrant model
  9197 ;;
  9198                           
  9199                           
  9200                           ;psect for function _I2C2_FunctionComplete
  9201  0A9E                     _I2C2_FunctionComplete:	
  9202                           
  9203                           ;i2c2.c: 567: p_i2c2_trb_current++;
  9204                           
  9205                           ;incstack = 0
  9206                           ; Regs used in _I2C2_FunctionComplete: [wreg+status,2+status,0]
  9207  0A9E  3004               	movlw	4
  9208  0A9F  00F0               	movwf	??_I2C2_FunctionComplete
  9209  0AA0  0870               	movf	??_I2C2_FunctionComplete,w
  9210  0AA1  0020               	movlb	0	; select bank0
  9211  0AA2  07EB               	addwf	_p_i2c2_trb_current,f
  9212                           
  9213                           ;i2c2.c: 570: if(--i2c2_trb_count == 0)
  9214  0AA3  3001               	movlw	1
  9215  0AA4  0021               	movlb	1	; select bank1
  9216  0AA5  02C8               	subwf	_i2c2_trb_count^(0+128),f
  9217  0AA6  1D03               	btfss	3,2
  9218  0AA7  2AAD               	goto	i1l225
  9219                           
  9220                           ;i2c2.c: 571: {
  9221                           ;i2c2.c: 572: i2c2_state = S_MASTER_SEND_STOP;
  9222  0AA8  3004               	movlw	4
  9223  0AA9  00F0               	movwf	??_I2C2_FunctionComplete
  9224  0AAA  0870               	movf	??_I2C2_FunctionComplete,w
  9225  0AAB  00C9               	movwf	_i2c2_state^(0+128)
  9226                           
  9227                           ;i2c2.c: 573: }
  9228  0AAC  0008               	return
  9229  0AAD                     i1l225:	
  9230                           
  9231                           ;i2c2.c: 574: else
  9232                           ;i2c2.c: 575: {
  9233                           ;i2c2.c: 576: i2c2_state = S_MASTER_RESTART;
  9234  0AAD  01C9               	clrf	_i2c2_state^(0+128)
  9235  0AAE  0AC9               	incf	_i2c2_state^(0+128),f
  9236  0AAF  0008               	return
  9237  0AB0                     __end_of_I2C2_FunctionComplete:	
  9238                           
  9239                           	psect	text46
  9240  09FE                     __ptext46:	
  9241 ;; *************** function _I2C2_BusCollisionISR *****************
  9242 ;; Defined at:
  9243 ;;		line 728 in file "mcc_generated_files/i2c2.c"
  9244 ;; Parameters:    Size  Location     Type
  9245 ;;		None
  9246 ;; Auto vars:     Size  Location     Type
  9247 ;;		None
  9248 ;; Return value:  Size  Location     Type
  9249 ;;                  1    wreg      void 
  9250 ;; Registers used:
  9251 ;;		None
  9252 ;; Tracked objects:
  9253 ;;		On entry : 0/0
  9254 ;;		On exit  : 0/0
  9255 ;;		Unchanged: 0/0
  9256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9260 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9261 ;;Total ram usage:        0 bytes
  9262 ;; Hardware stack levels used:    1
  9263 ;; This function calls:
  9264 ;;		Nothing
  9265 ;; This function is called by:
  9266 ;;		_INTERRUPT_InterruptManager
  9267 ;; This function uses a non-reentrant model
  9268 ;;
  9269                           
  9270                           
  9271                           ;psect for function _I2C2_BusCollisionISR
  9272  09FE                     _I2C2_BusCollisionISR:	
  9273                           
  9274                           ;incstack = 0
  9275                           ; Regs used in _I2C2_BusCollisionISR: []
  9276  09FE  0008               	return
  9277  09FF                     __end_of_I2C2_BusCollisionISR:	
  9278                           
  9279                           	psect	text47
  9280  0C51                     __ptext47:	
  9281 ;; *************** function _I2C1_ISR *****************
  9282 ;; Defined at:
  9283 ;;		line 57 in file "mcc_generated_files/i2c1.c"
  9284 ;; Parameters:    Size  Location     Type
  9285 ;;		None
  9286 ;; Auto vars:     Size  Location     Type
  9287 ;;  i2c_data        1    9[COMMON] unsigned char 
  9288 ;; Return value:  Size  Location     Type
  9289 ;;                  1    wreg      void 
  9290 ;; Registers used:
  9291 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9292 ;; Tracked objects:
  9293 ;;		On entry : 0/0
  9294 ;;		On exit  : 0/0
  9295 ;;		Unchanged: 0/0
  9296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9298 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9299 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9300 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9301 ;;Total ram usage:        2 bytes
  9302 ;; Hardware stack levels used:    1
  9303 ;; Hardware stack levels required when called:    3
  9304 ;; This function calls:
  9305 ;;		_I2C1_StatusCallback
  9306 ;; This function is called by:
  9307 ;;		_INTERRUPT_InterruptManager
  9308 ;; This function uses a non-reentrant model
  9309 ;;
  9310                           
  9311                           
  9312                           ;psect for function _I2C1_ISR
  9313  0C51                     _I2C1_ISR:	
  9314                           
  9315                           ;i2c1.c: 59: uint8_t i2c_data = 0x55;
  9316                           
  9317                           ;incstack = 0
  9318                           ; Regs used in _I2C1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9319  0C51  3055               	movlw	85
  9320  0C52  00F8               	movwf	??_I2C1_ISR
  9321  0C53  0878               	movf	??_I2C1_ISR,w
  9322  0C54  00F9               	movwf	I2C1_ISR@i2c_data
  9323                           
  9324                           ;i2c1.c: 64: PIR1bits.SSP1IF = 0;
  9325  0C55  0020               	movlb	0	; select bank0
  9326  0C56  1191               	bcf	17,3	;volatile
  9327                           
  9328                           ;i2c1.c: 65: i2c_data = SSP1BUF;
  9329  0C57  0024               	movlb	4	; select bank4
  9330  0C58  0811               	movf	17,w	;volatile
  9331  0C59  00F8               	movwf	??_I2C1_ISR
  9332  0C5A  0878               	movf	??_I2C1_ISR,w
  9333  0C5B  00F9               	movwf	I2C1_ISR@i2c_data
  9334                           
  9335                           ;i2c1.c: 66: if(1 == SSP1STATbits.R_nW)
  9336  0C5C  1D14               	btfss	20,2	;volatile
  9337  0C5D  2C65               	goto	i1l64
  9338                           
  9339                           ;i2c1.c: 67: {
  9340                           ;i2c1.c: 68: if((1 == SSP1STATbits.D_nA) && (1 == SSP1CON2bits.ACKSTAT))
  9341  0C5E  1A94               	btfsc	20,5	;volatile
  9342  0C5F  1F16               	btfss	22,6	;volatile
  9343  0C60  2C63               	goto	i1l3537
  9344                           
  9345                           ;i2c1.c: 69: {
  9346                           ;i2c1.c: 71: I2C1_StatusCallback(I2C1_SLAVE_READ_COMPLETED);
  9347  0C61  3003               	movlw	3
  9348  0C62  2C73               	goto	L3
  9349  0C63                     i1l3537:	
  9350                           ;i2c1.c: 72: }
  9351                           
  9352                           
  9353                           ;i2c1.c: 73: else
  9354                           ;i2c1.c: 74: {
  9355                           ;i2c1.c: 76: I2C1_StatusCallback(I2C1_SLAVE_READ_REQUEST);
  9356  0C63  3001               	movlw	1
  9357  0C64  2C73               	goto	L3
  9358  0C65                     i1l64:	
  9359                           ;i2c1.c: 77: }
  9360                           ;i2c1.c: 78: }
  9361                           
  9362                           
  9363                           ;i2c1.c: 79: else if(0 == SSP1STATbits.D_nA)
  9364  0C65  1A94               	btfsc	20,5	;volatile
  9365  0C66  2C6E               	goto	i1l3545
  9366                           
  9367                           ;i2c1.c: 80: {
  9368                           ;i2c1.c: 83: if(0x00 == i2c_data)
  9369  0C67  0879               	movf	I2C1_ISR@i2c_data,w
  9370  0C68  1D03               	btfss	3,2
  9371  0C69  2C6C               	goto	i1l3543
  9372                           
  9373                           ;i2c1.c: 84: {
  9374                           ;i2c1.c: 86: I2C1_StatusCallback(I2C1_SLAVE_GENERAL_CALL_REQUEST);
  9375  0C6A  3004               	movlw	4
  9376  0C6B  2C73               	goto	L3
  9377  0C6C                     i1l3543:	
  9378                           ;i2c1.c: 87: }
  9379                           
  9380                           
  9381                           ;i2c1.c: 88: else
  9382                           ;i2c1.c: 89: {
  9383                           ;i2c1.c: 91: I2C1_StatusCallback(I2C1_SLAVE_WRITE_REQUEST);
  9384  0C6C  3000               	movlw	0
  9385  0C6D  2C73               	goto	L3
  9386  0C6E                     i1l3545:	
  9387                           ;i2c1.c: 92: }
  9388                           ;i2c1.c: 93: }
  9389                           
  9390                           
  9391                           ;i2c1.c: 94: else
  9392                           ;i2c1.c: 95: {
  9393                           ;i2c1.c: 96: I2C_slaveWriteData = i2c_data;
  9394  0C6E  0879               	movf	I2C1_ISR@i2c_data,w
  9395  0C6F  00F8               	movwf	??_I2C1_ISR
  9396  0C70  0878               	movf	??_I2C1_ISR,w
  9397  0C71  00FD               	movwf	_I2C_slaveWriteData	;volatile
  9398                           
  9399                           ;i2c1.c: 99: I2C1_StatusCallback(I2C1_SLAVE_WRITE_COMPLETED);
  9400  0C72  3002               	movlw	2
  9401  0C73                     L3:	
  9402  0C73  3185  2533         	fcall	_I2C1_StatusCallback
  9403                           
  9404                           ;i2c1.c: 100: }
  9405                           ;i2c1.c: 102: SSP1CON1bits.CKP = 1;
  9406  0C75  0024               	movlb	4	; select bank4
  9407  0C76  1615               	bsf	21,4	;volatile
  9408  0C77  0008               	return
  9409  0C78                     __end_of_I2C1_ISR:	
  9410                           
  9411                           	psect	text48
  9412  0533                     __ptext48:	
  9413 ;; *************** function _I2C1_StatusCallback *****************
  9414 ;; Defined at:
  9415 ;;		line 106 in file "mcc_generated_files/i2c1.c"
  9416 ;; Parameters:    Size  Location     Type
  9417 ;;  i2c_bus_stat    1    wreg     enum E3053
  9418 ;; Auto vars:     Size  Location     Type
  9419 ;;  i2c_bus_stat    1    7[COMMON] enum E3053
  9420 ;;  pdata           2    5[COMMON] PTR unsigned char 
  9421 ;;		 -> type_no_data(1), PROTOCOL_Send_uint8_t@pbuf(1), sendbuf(16), readbuf.length(1), 
  9422 ;;		 -> readbuf.type(1), readbuf(6), 
  9423 ;; Return value:  Size  Location     Type
  9424 ;;                  1    wreg      void 
  9425 ;; Registers used:
  9426 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9427 ;; Tracked objects:
  9428 ;;		On entry : 0/0
  9429 ;;		On exit  : 0/0
  9430 ;;		Unchanged: 0/0
  9431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9433 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9434 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9435 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9436 ;;Total ram usage:        4 bytes
  9437 ;; Hardware stack levels used:    1
  9438 ;; Hardware stack levels required when called:    2
  9439 ;; This function calls:
  9440 ;;		_PROTOCOL_Backplane_Slave_Enabled
  9441 ;;		_PROTOCOL_I2C_GET
  9442 ;;		_PROTOCOL_I2C_SEN
  9443 ;;		_PROTOCOL_I2C_WHO
  9444 ;;		_PROTOCOL_INV
  9445 ;;		_PROTOCOL_RST
  9446 ;;		_PROTOCOL_Read_Lock
  9447 ;;		i1_PROTOCOL_EXT
  9448 ;;		i1_PROTOCOL_SAV
  9449 ;;		i1_PROTOCOL_SET
  9450 ;;		i1_PROTOCOL_STA
  9451 ;;		i1_PROTOCOL_STP
  9452 ;; This function is called by:
  9453 ;;		_I2C1_ISR
  9454 ;; This function uses a non-reentrant model
  9455 ;;
  9456                           
  9457                           
  9458                           ;psect for function _I2C1_StatusCallback
  9459  0533                     _I2C1_StatusCallback:	
  9460                           
  9461                           ;incstack = 0
  9462                           ; Regs used in _I2C1_StatusCallback: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9463                           ;I2C1_StatusCallback@i2c_bus_state stored from wreg
  9464  0533  00F7               	movwf	I2C1_StatusCallback@i2c_bus_state
  9465                           
  9466                           ;i2c1.c: 109: static uint8_t slaveWriteType = SLAVE_NORMAL_DATA;
  9467                           ;i2c1.c: 110: static uint8_t next = 0x00;
  9468                           ;i2c1.c: 111: static uint8_t ext_len = 0;
  9469                           ;i2c1.c: 112: static uint8_t ext_cnt = 0;
  9470                           ;i2c1.c: 113: static char ext_buf[48];
  9471                           ;i2c1.c: 114: uint8_t *pdata;
  9472                           ;i2c1.c: 115: switch (i2c_bus_state)
  9473  0534  2DF3               	goto	i1l3369
  9474  0535                     i1l86:	
  9475                           ;i2c1.c: 116: {
  9476                           ;i2c1.c: 117: case I2C1_SLAVE_WRITE_REQUEST:
  9477                           
  9478                           
  9479                           ;i2c1.c: 118: slaveWriteType = SLAVE_DATA_ADDRESS;
  9480  0535  0021               	movlb	1	; select bank1
  9481  0536  01CC               	clrf	I2C1_StatusCallback@slaveWriteType^(0+128)
  9482  0537  0ACC               	incf	I2C1_StatusCallback@slaveWriteType^(0+128),f
  9483                           
  9484                           ;i2c1.c: 119: break;
  9485  0538  0008               	return
  9486  0539                     i1l3295:	
  9487                           ;i2c1.c: 121: case I2C1_SLAVE_GENERAL_CALL_REQUEST:
  9488                           
  9489                           
  9490                           ;i2c1.c: 123: slaveWriteType = SLAVE_GENERAL_CALL;
  9491  0539  3002               	movlw	2
  9492  053A  00F4               	movwf	??_I2C1_StatusCallback
  9493  053B  0874               	movf	??_I2C1_StatusCallback,w
  9494  053C  0021               	movlb	1	; select bank1
  9495  053D  00CC               	movwf	I2C1_StatusCallback@slaveWriteType^(0+128)
  9496                           
  9497                           ;i2c1.c: 124: break;
  9498  053E  0008               	return
  9499  053F                     i1l3297:	
  9500                           ;i2c1.c: 132: case 0x01:
  9501                           
  9502                           ;i2c1.c: 131: switch(next) {
  9503                           
  9504                           ;i2c1.c: 129: {
  9505                           ;i2c1.c: 130: case SLAVE_DATA_ADDRESS:
  9506                           
  9507                           ;i2c1.c: 128: switch(slaveWriteType)
  9508                           
  9509                           ;i2c1.c: 126: case I2C1_SLAVE_WRITE_COMPLETED:
  9510                           
  9511                           
  9512                           ;i2c1.c: 133: PROTOCOL_SET(I2C_slaveWriteData);
  9513  053F  087D               	movf	_I2C_slaveWriteData,w	;volatile
  9514  0540  318A  2239  3185   	fcall	i1_PROTOCOL_SET
  9515  0543  2DB3               	goto	i1l3343
  9516  0544                     i1l3301:	
  9517                           ;i2c1.c: 138: case 0x04:
  9518                           
  9519                           ;i2c1.c: 137: switch(I2C_slaveWriteData) {
  9520                           
  9521                           ;i2c1.c: 136: case 0x00:
  9522                           
  9523                           ;i2c1.c: 135: break;
  9524                           
  9525                           ;i2c1.c: 134: next = 0x00;
  9526                           
  9527                           
  9528                           ;i2c1.c: 139: PROTOCOL_STA();
  9529  0544  318A  221C  3185   	fcall	i1_PROTOCOL_STA
  9530                           
  9531                           ;i2c1.c: 140: break;
  9532  0547  2DCC               	goto	i1l3353
  9533  0548                     i1l3303:	
  9534                           ;i2c1.c: 141: case 0x05:
  9535                           
  9536                           
  9537                           ;i2c1.c: 142: PROTOCOL_STP();
  9538  0548  318A  2208  3185   	fcall	i1_PROTOCOL_STP
  9539                           
  9540                           ;i2c1.c: 143: break;
  9541  054B  2DCC               	goto	i1l3353
  9542  054C                     i1l3305:	
  9543                           ;i2c1.c: 144: case 0x03:
  9544                           
  9545                           
  9546                           ;i2c1.c: 145: PROTOCOL_SAV();
  9547  054C  318A  2247  3185   	fcall	i1_PROTOCOL_SAV
  9548                           
  9549                           ;i2c1.c: 146: break;
  9550  054F  2DCC               	goto	i1l3353
  9551  0550                     i1l3307:	
  9552                           ;i2c1.c: 147: case 0x06:
  9553                           
  9554                           
  9555                           ;i2c1.c: 148: PROTOCOL_INV();
  9556  0550  318A  2218  3185   	fcall	_PROTOCOL_INV
  9557                           
  9558                           ;i2c1.c: 149: break;
  9559  0553  2DCC               	goto	i1l3353
  9560  0554                     i1l3309:	
  9561                           ;i2c1.c: 150: case 0x0c:
  9562                           
  9563                           
  9564                           ;i2c1.c: 151: PROTOCOL_RST();
  9565  0554  318A  2259  3185   	fcall	_PROTOCOL_RST
  9566                           
  9567                           ;i2c1.c: 152: break;
  9568  0557  2DCC               	goto	i1l3353
  9569  0558                     i1l103:	
  9570                           ;i2c1.c: 153: case 0x08:
  9571                           
  9572                           
  9573                           ;i2c1.c: 154: next = 0x01;
  9574  0558  01EC               	clrf	I2C1_StatusCallback@next
  9575  0559  0AEC               	incf	I2C1_StatusCallback@next,f
  9576                           
  9577                           ;i2c1.c: 155: break;
  9578  055A  2DCC               	goto	i1l3353
  9579  055B                     i1l3311:	
  9580                           ;i2c1.c: 156: case 0x0a:
  9581                           
  9582                           
  9583                           ;i2c1.c: 157: next = 0x02;
  9584  055B  3002               	movlw	2
  9585  055C  00F4               	movwf	??_I2C1_StatusCallback
  9586  055D  0874               	movf	??_I2C1_StatusCallback,w
  9587  055E  2D95               	goto	L4
  9588  055F                     i1l3315:	
  9589                           ;i2c1.c: 159: }
  9590                           
  9591                           ;i2c1.c: 158: break;
  9592                           
  9593  055F  087D               	movf	_I2C_slaveWriteData,w	;volatile
  9594                           
  9595                           ; Switch size 1, requested type "space"
  9596                           ; Number of cases is 7, Range of values is 3 to 12
  9597                           ; switch strategies available:
  9598                           ; Name         Instructions Cycles
  9599                           ; simple_byte           22    12 (average)
  9600                           ; direct_byte           29     9 (fixed)
  9601                           ; jumptable            263     9 (fixed)
  9602                           ;	Chosen strategy is simple_byte
  9603  0560  3A03               	xorlw	3	; case 3
  9604  0561  1903               	skipnz
  9605  0562  2D4C               	goto	i1l3305
  9606  0563  3A07               	xorlw	7	; case 4
  9607  0564  1903               	skipnz
  9608  0565  2D44               	goto	i1l3301
  9609  0566  3A01               	xorlw	1	; case 5
  9610  0567  1903               	skipnz
  9611  0568  2D48               	goto	i1l3303
  9612  0569  3A03               	xorlw	3	; case 6
  9613  056A  1903               	skipnz
  9614  056B  2D50               	goto	i1l3307
  9615  056C  3A0E               	xorlw	14	; case 8
  9616  056D  1903               	skipnz
  9617  056E  2D58               	goto	i1l103
  9618  056F  3A02               	xorlw	2	; case 10
  9619  0570  1903               	skipnz
  9620  0571  2D5B               	goto	i1l3311
  9621  0572  3A06               	xorlw	6	; case 12
  9622  0573  1903               	skipnz
  9623  0574  2D54               	goto	i1l3309
  9624  0575  2DCC               	goto	i1l3353
  9625                           
  9626                           ;i2c1.c: 161: }
  9627                           
  9628                           ;i2c1.c: 160: break;
  9629  0576  2DCC               	goto	i1l3353
  9630  0577                     i1l3319:	
  9631  0577  0020               	movlb	0	; select bank0
  9632  0578  086C               	movf	I2C1_StatusCallback@next,w
  9633                           
  9634                           ; Switch size 1, requested type "space"
  9635                           ; Number of cases is 2, Range of values is 0 to 1
  9636                           ; switch strategies available:
  9637                           ; Name         Instructions Cycles
  9638                           ; simple_byte            7     4 (average)
  9639                           ; direct_byte           10     6 (fixed)
  9640                           ; jumptable            260     6 (fixed)
  9641                           ;	Chosen strategy is simple_byte
  9642  0579  3A00               	xorlw	0	; case 0
  9643  057A  1903               	skipnz
  9644  057B  2D5F               	goto	i1l3315
  9645  057C  3A01               	xorlw	1	; case 1
  9646  057D  1903               	skipnz
  9647  057E  2D3F               	goto	i1l3297
  9648  057F  2DCC               	goto	i1l3353
  9649                           
  9650                           ;i2c1.c: 162: break;
  9651  0580  2DCC               	goto	i1l3353
  9652  0581                     i1l3321:	
  9653                           ;i2c1.c: 164: case SLAVE_GENERAL_CALL:
  9654                           
  9655                           
  9656                           ;i2c1.c: 165: if (I2C_slaveWriteData == 0x02) {
  9657  0581  3002               	movlw	2
  9658  0582  067D               	xorwf	_I2C_slaveWriteData,w	;volatile
  9659  0583  1D03               	btfss	3,2
  9660  0584  2DCC               	goto	i1l3353
  9661                           
  9662                           ;i2c1.c: 166: SSP1CON2bits.GCEN = 0;
  9663  0585  0024               	movlb	4	; select bank4
  9664  0586  1396               	bcf	22,7	;volatile
  9665                           
  9666                           ;i2c1.c: 167: PROTOCOL_Backplane_Slave_Enabled();
  9667  0587  318A  2214  3185   	fcall	_PROTOCOL_Backplane_Slave_Enabled
  9668                           
  9669                           ;i2c1.c: 168: }
  9670                           ;i2c1.c: 169: break;
  9671  058A  2DCC               	goto	i1l3353
  9672  058B                     i1l3327:	
  9673                           ;i2c1.c: 173: case 0x02:
  9674                           
  9675                           ;i2c1.c: 172: switch(next) {
  9676                           
  9677                           ;i2c1.c: 171: case SLAVE_NORMAL_DATA:
  9678                           
  9679                           
  9680                           ;i2c1.c: 174: ext_len = I2C_slaveWriteData;
  9681  058B  087D               	movf	_I2C_slaveWriteData,w	;volatile
  9682  058C  00F4               	movwf	??_I2C1_StatusCallback
  9683  058D  0874               	movf	??_I2C1_StatusCallback,w
  9684  058E  0021               	movlb	1	; select bank1
  9685  058F  00CB               	movwf	I2C1_StatusCallback@ext_len^(0+128)
  9686                           
  9687                           ;i2c1.c: 175: ext_cnt = 0;
  9688  0590  01CA               	clrf	I2C1_StatusCallback@ext_cnt^(0+128)
  9689                           
  9690                           ;i2c1.c: 176: next = 0x03;
  9691  0591  3003               	movlw	3
  9692  0592  00F4               	movwf	??_I2C1_StatusCallback
  9693  0593  0874               	movf	??_I2C1_StatusCallback,w
  9694  0594  0020               	movlb	0	; select bank0
  9695  0595                     L4:	
  9696  0595  00EC               	movwf	I2C1_StatusCallback@next
  9697                           
  9698                           ;i2c1.c: 177: break;
  9699  0596  2DCC               	goto	i1l3353
  9700  0597                     i1l3333:	
  9701                           ;i2c1.c: 178: case 0x03:
  9702                           
  9703                           
  9704                           ;i2c1.c: 179: ext_buf[ext_cnt++] = (char)I2C_slaveWriteData;
  9705  0597  087D               	movf	_I2C_slaveWriteData,w	;volatile
  9706  0598  00F4               	movwf	??_I2C1_StatusCallback
  9707  0599  0021               	movlb	1	; select bank1
  9708  059A  084A               	movf	I2C1_StatusCallback@ext_cnt^(0+128),w
  9709  059B  3EA0               	addlw	(low (I2C1_StatusCallback@ext_buf| (0+256)))& (0+255)
  9710  059C  0086               	movwf	6
  9711  059D  3001               	movlw	1	; select bank3/4
  9712  059E  0087               	movwf	7
  9713  059F  0874               	movf	??_I2C1_StatusCallback,w
  9714  05A0  0081               	movwf	1
  9715  05A1  3001               	movlw	1
  9716  05A2  00F4               	movwf	??_I2C1_StatusCallback
  9717  05A3  0874               	movf	??_I2C1_StatusCallback,w
  9718  05A4  07CA               	addwf	I2C1_StatusCallback@ext_cnt^(0+128),f
  9719                           
  9720                           ;i2c1.c: 180: if (ext_cnt >= ext_len) {
  9721  05A5  084B               	movf	I2C1_StatusCallback@ext_len^(0+128),w
  9722  05A6  024A               	subwf	I2C1_StatusCallback@ext_cnt^(0+128),w
  9723  05A7  1C03               	skipc
  9724  05A8  2DCC               	goto	i1l3353
  9725                           
  9726                           ;i2c1.c: 181: if (!PROTOCOL_Read_Lock()) PROTOCOL_EXT(&ext_buf[0]);
  9727  05A9  318A  2205  3185   	fcall	_PROTOCOL_Read_Lock
  9728  05AC  3A00               	xorlw	0
  9729  05AD  1D03               	skipz
  9730  05AE  2DB3               	goto	i1l3343
  9731  05AF  30A0               	movlw	(low (I2C1_StatusCallback@ext_buf| (0+256)))& (0+255)
  9732  05B0  3189  21FD  3185   	fcall	i1_PROTOCOL_EXT
  9733  05B3                     i1l3343:	
  9734                           
  9735                           ;i2c1.c: 182: next = 0x00;
  9736  05B3  0020               	movlb	0	; select bank0
  9737  05B4  01EC               	clrf	I2C1_StatusCallback@next
  9738                           
  9739                           ;i2c1.c: 185: }
  9740                           
  9741                           ;i2c1.c: 183: }
  9742                           ;i2c1.c: 184: break;
  9743  05B5  2DCC               	goto	i1l3353
  9744  05B6                     i1l3347:	
  9745  05B6  0020               	movlb	0	; select bank0
  9746  05B7  086C               	movf	I2C1_StatusCallback@next,w
  9747                           
  9748                           ; Switch size 1, requested type "space"
  9749                           ; Number of cases is 2, Range of values is 2 to 3
  9750                           ; switch strategies available:
  9751                           ; Name         Instructions Cycles
  9752                           ; simple_byte            7     4 (average)
  9753                           ; direct_byte           13     9 (fixed)
  9754                           ; jumptable            263     9 (fixed)
  9755                           ;	Chosen strategy is simple_byte
  9756  05B8  3A02               	xorlw	2	; case 2
  9757  05B9  1903               	skipnz
  9758  05BA  2D8B               	goto	i1l3327
  9759  05BB  3A01               	xorlw	1	; case 3
  9760  05BC  1903               	skipnz
  9761  05BD  2D97               	goto	i1l3333
  9762  05BE  2DCC               	goto	i1l3353
  9763                           
  9764                           ;i2c1.c: 190: }
  9765                           
  9766                           ;i2c1.c: 188: break;
  9767                           
  9768                           ;i2c1.c: 187: default:
  9769                           
  9770                           ;i2c1.c: 186: break;
  9771  05BF  2DCC               	goto	i1l3353
  9772  05C0                     i1l3351:	
  9773  05C0  0021               	movlb	1	; select bank1
  9774  05C1  084C               	movf	I2C1_StatusCallback@slaveWriteType^(0+128),w
  9775                           
  9776                           ; Switch size 1, requested type "space"
  9777                           ; Number of cases is 3, Range of values is 0 to 2
  9778                           ; switch strategies available:
  9779                           ; Name         Instructions Cycles
  9780                           ; simple_byte           10     6 (average)
  9781                           ; direct_byte           12     6 (fixed)
  9782                           ; jumptable            260     6 (fixed)
  9783                           ;	Chosen strategy is simple_byte
  9784  05C2  3A00               	xorlw	0	; case 0
  9785  05C3  1903               	skipnz
  9786  05C4  2DB6               	goto	i1l3347
  9787  05C5  3A01               	xorlw	1	; case 1
  9788  05C6  1903               	skipnz
  9789  05C7  2D77               	goto	i1l3319
  9790  05C8  3A03               	xorlw	3	; case 2
  9791  05C9  1903               	skipnz
  9792  05CA  2D81               	goto	i1l3321
  9793  05CB  2DCC               	goto	i1l3353
  9794  05CC                     i1l3353:	
  9795                           
  9796                           ;i2c1.c: 192: slaveWriteType = SLAVE_NORMAL_DATA;
  9797  05CC  0021               	movlb	1	; select bank1
  9798  05CD  01CC               	clrf	I2C1_StatusCallback@slaveWriteType^(0+128)
  9799                           
  9800                           ;i2c1.c: 193: break;
  9801  05CE  0008               	return
  9802  05CF                     i1l3355:	
  9803                           ;i2c1.c: 197: {
  9804                           ;i2c1.c: 198: case 0x01:
  9805                           
  9806                           ;i2c1.c: 196: switch (I2C_slaveWriteData)
  9807                           
  9808                           ;i2c1.c: 195: case I2C1_SLAVE_READ_REQUEST:
  9809                           
  9810                           
  9811                           ;i2c1.c: 199: SSP1BUF = PROTOCOL_I2C_WHO();
  9812  05CF  318A  2202         	fcall	_PROTOCOL_I2C_WHO
  9813  05D1  0024               	movlb	4	; select bank4
  9814  05D2  0091               	movwf	17	;volatile
  9815                           
  9816                           ;i2c1.c: 200: break;
  9817  05D3  0008               	return
  9818  05D4                     i1l3357:	
  9819                           ;i2c1.c: 201: case 0x07:
  9820                           
  9821                           
  9822                           ;i2c1.c: 202: pdata = PROTOCOL_I2C_SEN();
  9823  05D4  318E  2645         	fcall	_PROTOCOL_I2C_SEN
  9824  05D6  0871               	movf	?_PROTOCOL_I2C_SEN+1,w
  9825  05D7  00F6               	movwf	I2C1_StatusCallback@pdata+1
  9826  05D8  0870               	movf	?_PROTOCOL_I2C_SEN,w
  9827  05D9  00F5               	movwf	I2C1_StatusCallback@pdata
  9828                           
  9829                           ;i2c1.c: 203: SSP1BUF = *pdata;
  9830  05DA  0875               	movf	I2C1_StatusCallback@pdata,w
  9831  05DB  0086               	movwf	6
  9832  05DC  0876               	movf	I2C1_StatusCallback@pdata+1,w
  9833  05DD  0087               	movwf	7
  9834  05DE  0801               	movf	1,w
  9835  05DF  0024               	movlb	4	; select bank4
  9836  05E0  0091               	movwf	17	;volatile
  9837                           
  9838                           ;i2c1.c: 204: break;
  9839  05E1  0008               	return
  9840  05E2                     i1l3361:	
  9841                           ;i2c1.c: 205: case 0x09:
  9842                           
  9843                           
  9844                           ;i2c1.c: 206: SSP1BUF = PROTOCOL_I2C_GET();
  9845  05E2  3189  21FF         	fcall	_PROTOCOL_I2C_GET
  9846  05E4  0024               	movlb	4	; select bank4
  9847  05E5  0091               	movwf	17	;volatile
  9848                           
  9849                           ;i2c1.c: 208: }
  9850                           
  9851                           ;i2c1.c: 207: break;
  9852  05E6  0008               	return
  9853  05E7                     i1l3365:	
  9854  05E7  087D               	movf	_I2C_slaveWriteData,w	;volatile
  9855                           
  9856                           ; Switch size 1, requested type "space"
  9857                           ; Number of cases is 3, Range of values is 1 to 9
  9858                           ; switch strategies available:
  9859                           ; Name         Instructions Cycles
  9860                           ; simple_byte           10     6 (average)
  9861                           ; direct_byte           27     9 (fixed)
  9862                           ; jumptable            263     9 (fixed)
  9863                           ;	Chosen strategy is simple_byte
  9864  05E8  3A01               	xorlw	1	; case 1
  9865  05E9  1903               	skipnz
  9866  05EA  2DCF               	goto	i1l3355
  9867  05EB  3A06               	xorlw	6	; case 7
  9868  05EC  1903               	skipnz
  9869  05ED  2DD4               	goto	i1l3357
  9870  05EE  3A0E               	xorlw	14	; case 9
  9871  05EF  1903               	skipnz
  9872  05F0  2DE2               	goto	i1l3361
  9873  05F1  2DFD               	goto	i1l124
  9874                           
  9875                           ;i2c1.c: 216: }
  9876                           
  9877                           ;i2c1.c: 214: break;
  9878                           
  9879                           ;i2c1.c: 213: default:
  9880                           
  9881                           ;i2c1.c: 212: break;
  9882                           
  9883                           ;i2c1.c: 211: case I2C1_SLAVE_READ_COMPLETED:
  9884                           
  9885                           ;i2c1.c: 209: break;
  9886  05F2  0008               	return
  9887  05F3                     i1l3369:	
  9888  05F3  0877               	movf	I2C1_StatusCallback@i2c_bus_state,w
  9889                           
  9890                           ; Switch size 1, requested type "space"
  9891                           ; Number of cases is 5, Range of values is 0 to 4
  9892                           ; switch strategies available:
  9893                           ; Name         Instructions Cycles
  9894                           ; direct_byte           16     6 (fixed)
  9895                           ; simple_byte           16     9 (average)
  9896                           ; jumptable            260     6 (fixed)
  9897                           ;	Chosen strategy is direct_byte
  9898  05F4  0084               	movwf	4
  9899  05F5  3005               	movlw	5
  9900  05F6  0204               	subwf	4,w
  9901  05F7  1803               	skipnc
  9902  05F8  0008               	return
  9903  05F9  3188               	movlp	high i1S4715
  9904  05FA  3504               	lslf	4,w
  9905  05FB  3E18               	addlw	low i1S4715
  9906  05FC  0082               	movwf	2
  9907  05FD                     i1l124:	
  9908  05FD  0008               	return
  9909  05FE                     __end_of_I2C1_StatusCallback:	
  9910                           
  9911                           	psect	swtext2
  9912  0818                     __pswtext2:	
  9913  0818                     i1S4715:	
  9914  0818  3185  2D35         	ljmp	i1l86
  9915  081A  3185  2DE7         	ljmp	i1l3365
  9916  081C  3185  2DC0         	ljmp	i1l3351
  9917  081E  3185  2DFD         	ljmp	i1l124
  9918  0820  3185  2D39         	ljmp	i1l3295
  9919                           
  9920                           	psect	text49
  9921  0A08                     __ptext49:	
  9922 ;; *************** function i1_PROTOCOL_STP *****************
  9923 ;; Defined at:
  9924 ;;		line 98 in file "protocol.c"
  9925 ;; Parameters:    Size  Location     Type
  9926 ;;		None
  9927 ;; Auto vars:     Size  Location     Type
  9928 ;;		None
  9929 ;; Return value:  Size  Location     Type
  9930 ;;                  1    wreg      void 
  9931 ;; Registers used:
  9932 ;;		wreg, status,2, status,0
  9933 ;; Tracked objects:
  9934 ;;		On entry : 0/0
  9935 ;;		On exit  : 0/0
  9936 ;;		Unchanged: 0/0
  9937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9939 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9941 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9942 ;;Total ram usage:        0 bytes
  9943 ;; Hardware stack levels used:    1
  9944 ;; This function calls:
  9945 ;;		Nothing
  9946 ;; This function is called by:
  9947 ;;		_I2C1_StatusCallback
  9948 ;; This function uses a non-reentrant model
  9949 ;;
  9950                           
  9951                           
  9952                           ;psect for function i1_PROTOCOL_STP
  9953  0A08                     i1_PROTOCOL_STP:	
  9954                           
  9955                           ;protocol.c: 100: running = 0;
  9956                           
  9957                           ;incstack = 0
  9958                           ; Regs used in i1_PROTOCOL_STP: [wreg+status,2+status,0]
  9959  0A08  0021               	movlb	1	; select bank1
  9960  0A09  01C0               	clrf	_running^(0+128)
  9961  0A0A  0008               	return
  9962  0A0B                     __end_ofi1_PROTOCOL_STP:	
  9963                           
  9964                           	psect	text50
  9965  0A1C                     __ptext50:	
  9966 ;; *************** function i1_PROTOCOL_STA *****************
  9967 ;; Defined at:
  9968 ;;		line 93 in file "protocol.c"
  9969 ;; Parameters:    Size  Location     Type
  9970 ;;		None
  9971 ;; Auto vars:     Size  Location     Type
  9972 ;;		None
  9973 ;; Return value:  Size  Location     Type
  9974 ;;                  1    wreg      void 
  9975 ;; Registers used:
  9976 ;;		wreg, status,2, status,0
  9977 ;; Tracked objects:
  9978 ;;		On entry : 0/0
  9979 ;;		On exit  : 0/0
  9980 ;;		Unchanged: 0/0
  9981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9983 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9985 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9986 ;;Total ram usage:        0 bytes
  9987 ;; Hardware stack levels used:    1
  9988 ;; This function calls:
  9989 ;;		Nothing
  9990 ;; This function is called by:
  9991 ;;		_I2C1_StatusCallback
  9992 ;; This function uses a non-reentrant model
  9993 ;;
  9994                           
  9995                           
  9996                           ;psect for function i1_PROTOCOL_STA
  9997  0A1C                     i1_PROTOCOL_STA:	
  9998                           
  9999                           ;protocol.c: 95: running = 1;
 10000                           
 10001                           ;incstack = 0
 10002                           ; Regs used in i1_PROTOCOL_STA: [wreg+status,2+status,0]
 10003  0A1C  0021               	movlb	1	; select bank1
 10004  0A1D  01C0               	clrf	_running^(0+128)
 10005  0A1E  0AC0               	incf	_running^(0+128),f
 10006  0A1F  0008               	return
 10007  0A20                     __end_ofi1_PROTOCOL_STA:	
 10008                           
 10009                           	psect	text51
 10010  0A39                     __ptext51:	
 10011 ;; *************** function i1_PROTOCOL_SET *****************
 10012 ;; Defined at:
 10013 ;;		line 111 in file "protocol.c"
 10014 ;; Parameters:    Size  Location     Type
 10015 ;;  value_          1    wreg     unsigned char 
 10016 ;; Auto vars:     Size  Location     Type
 10017 ;;  value_          1    1[COMMON] unsigned char 
 10018 ;; Return value:  Size  Location     Type
 10019 ;;                  1    wreg      void 
 10020 ;; Registers used:
 10021 ;;		wreg, status,2, status,0
 10022 ;; Tracked objects:
 10023 ;;		On entry : 0/0
 10024 ;;		On exit  : 0/0
 10025 ;;		Unchanged: 0/0
 10026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10028 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10029 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10030 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10031 ;;Total ram usage:        2 bytes
 10032 ;; Hardware stack levels used:    1
 10033 ;; This function calls:
 10034 ;;		Nothing
 10035 ;; This function is called by:
 10036 ;;		_I2C1_StatusCallback
 10037 ;; This function uses a non-reentrant model
 10038 ;;
 10039                           
 10040                           
 10041                           ;psect for function i1_PROTOCOL_SET
 10042  0A39                     i1_PROTOCOL_SET:	
 10043                           
 10044                           ;incstack = 0
 10045                           ; Regs used in i1_PROTOCOL_SET: [wreg+status,2+status,0]
 10046                           ;i1PROTOCOL_SET@value_ stored from wreg
 10047  0A39  00F1               	movwf	i1PROTOCOL_SET@value_
 10048                           
 10049                           ;protocol.c: 112: value = value_;
 10050  0A3A  0871               	movf	i1PROTOCOL_SET@value_,w
 10051  0A3B  00F0               	movwf	??i1_PROTOCOL_SET
 10052  0A3C  0870               	movf	??i1_PROTOCOL_SET,w
 10053  0A3D  0020               	movlb	0	; select bank0
 10054  0A3E  00E6               	movwf	_value
 10055  0A3F  0008               	return
 10056  0A40                     __end_ofi1_PROTOCOL_SET:	
 10057                           
 10058                           	psect	text52
 10059  0A47                     __ptext52:	
 10060 ;; *************** function i1_PROTOCOL_SAV *****************
 10061 ;; Defined at:
 10062 ;;		line 107 in file "protocol.c"
 10063 ;; Parameters:    Size  Location     Type
 10064 ;;		None
 10065 ;; Auto vars:     Size  Location     Type
 10066 ;;		None
 10067 ;; Return value:  Size  Location     Type
 10068 ;;                  1    wreg      void 
 10069 ;; Registers used:
 10070 ;;		wreg, status,2, status,0, pclath, cstack
 10071 ;; Tracked objects:
 10072 ;;		On entry : 0/0
 10073 ;;		On exit  : 0/0
 10074 ;;		Unchanged: 0/0
 10075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10077 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10078 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10079 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10080 ;;Total ram usage:        1 bytes
 10081 ;; Hardware stack levels used:    1
 10082 ;; Hardware stack levels required when called:    1
 10083 ;; This function calls:
 10084 ;;		i1_DATAEE_WriteByte
 10085 ;; This function is called by:
 10086 ;;		_I2C1_StatusCallback
 10087 ;; This function uses a non-reentrant model
 10088 ;;
 10089                           
 10090                           
 10091                           ;psect for function i1_PROTOCOL_SAV
 10092  0A47                     i1_PROTOCOL_SAV:	
 10093                           
 10094                           ;protocol.c: 108: DATAEE_WriteByte(1, value);
 10095                           
 10096                           ;incstack = 0
 10097                           ; Regs used in i1_PROTOCOL_SAV: [wreg+status,2+status,0+pclath+cstack]
 10098  0A47  0020               	movlb	0	; select bank0
 10099  0A48  0866               	movf	_value,w
 10100  0A49  00F3               	movwf	??i1_PROTOCOL_SAV
 10101  0A4A  0873               	movf	??i1_PROTOCOL_SAV,w
 10102  0A4B  00F0               	movwf	i1DATAEE_WriteByte@bData
 10103  0A4C  3001               	movlw	1
 10104  0A4D  318B  234D         	fcall	i1_DATAEE_WriteByte
 10105  0A4F  0008               	return
 10106  0A50                     __end_ofi1_PROTOCOL_SAV:	
 10107                           
 10108                           	psect	text53
 10109  0B4D                     __ptext53:	
 10110 ;; *************** function i1_DATAEE_WriteByte *****************
 10111 ;; Defined at:
 10112 ;;		line 180 in file "mcc_generated_files/memory.c"
 10113 ;; Parameters:    Size  Location     Type
 10114 ;;  bAdd            1    wreg     unsigned char 
 10115 ;;  bData           1    0[COMMON] unsigned char 
 10116 ;; Auto vars:     Size  Location     Type
 10117 ;;  bAdd            1    1[COMMON] unsigned char 
 10118 ;;  DATAEE_Write    1    2[COMMON] unsigned char 
 10119 ;; Return value:  Size  Location     Type
 10120 ;;                  1    wreg      void 
 10121 ;; Registers used:
 10122 ;;		wreg, status,2, status,0
 10123 ;; Tracked objects:
 10124 ;;		On entry : 0/0
 10125 ;;		On exit  : 0/0
 10126 ;;		Unchanged: 0/0
 10127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10128 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10129 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10131 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10132 ;;Total ram usage:        3 bytes
 10133 ;; Hardware stack levels used:    1
 10134 ;; This function calls:
 10135 ;;		Nothing
 10136 ;; This function is called by:
 10137 ;;		i1_PROTOCOL_SAV
 10138 ;; This function uses a non-reentrant model
 10139 ;;
 10140                           
 10141                           
 10142                           ;psect for function i1_DATAEE_WriteByte
 10143  0B4D                     i1_DATAEE_WriteByte:	
 10144                           
 10145                           ;incstack = 0
 10146                           ; Regs used in i1_DATAEE_WriteByte: [wreg+status,2+status,0]
 10147                           ;i1DATAEE_WriteByte@bAdd stored from wreg
 10148  0B4D  00F1               	movwf	i1DATAEE_WriteByte@bAdd
 10149                           
 10150                           ;memory.c: 182: uint8_t GIEBitValue = 0;
 10151  0B4E  01F2               	clrf	i1DATAEE_WriteByte@GIEBitValue
 10152                           
 10153                           ;memory.c: 184: EEADRL = (bAdd & 0x0ff);
 10154  0B4F  0871               	movf	i1DATAEE_WriteByte@bAdd,w
 10155  0B50  0023               	movlb	3	; select bank3
 10156  0B51  0091               	movwf	17	;volatile
 10157                           
 10158                           ;memory.c: 185: EEDATL = bData;
 10159  0B52  0870               	movf	i1DATAEE_WriteByte@bData,w
 10160  0B53  0093               	movwf	19	;volatile
 10161                           
 10162                           ;memory.c: 186: EECON1bits.EEPGD = 0;
 10163  0B54  1395               	bcf	21,7	;volsfr
 10164                           
 10165                           ;memory.c: 187: EECON1bits.CFGS = 0;
 10166  0B55  1315               	bcf	21,6	;volsfr
 10167                           
 10168                           ;memory.c: 188: EECON1bits.WREN = 1;
 10169  0B56  1515               	bsf	21,2	;volsfr
 10170                           
 10171                           ;memory.c: 190: GIEBitValue = INTCONbits.GIE;
 10172  0B57  3000               	movlw	0
 10173  0B58  1B8B               	btfsc	11,7	;volatile
 10174  0B59  3001               	movlw	1
 10175  0B5A  00F2               	movwf	i1DATAEE_WriteByte@GIEBitValue
 10176                           
 10177                           ;memory.c: 191: INTCONbits.GIE = 0;
 10178  0B5B  138B               	bcf	11,7	;volatile
 10179                           
 10180                           ;memory.c: 192: EECON2 = 0x55;
 10181  0B5C  3055               	movlw	85
 10182  0B5D  0096               	movwf	22	;volsfr
 10183                           
 10184                           ;memory.c: 193: EECON2 = 0xAA;
 10185  0B5E  30AA               	movlw	170
 10186  0B5F  0096               	movwf	22	;volsfr
 10187                           
 10188                           ;memory.c: 194: EECON1bits.WR = 1;
 10189  0B60  1495               	bsf	21,1	;volsfr
 10190  0B61                     i1l480:	
 10191                           ;memory.c: 197: {
 10192                           
 10193                           ;memory.c: 196: while (EECON1bits.WR)
 10194                           
 10195  0B61  1895               	btfsc	21,1	;volsfr
 10196  0B62  2B61               	goto	i1l480
 10197                           
 10198                           ;memory.c: 198: }
 10199                           ;memory.c: 200: EECON1bits.WREN = 0;
 10200  0B63  1115               	bcf	21,2	;volsfr
 10201                           
 10202                           ;memory.c: 201: INTCONbits.GIE = GIEBitValue;
 10203  0B64  0C72               	rrf	i1DATAEE_WriteByte@GIEBitValue,w
 10204  0B65  1C03               	skipc
 10205  0B66  138B               	bcf	11,7	;volatile
 10206  0B67  1803               	skipnc
 10207  0B68  178B               	bsf	11,7	;volatile
 10208  0B69  0008               	return
 10209  0B6A                     __end_ofi1_DATAEE_WriteByte:	
 10210                           
 10211                           	psect	text54
 10212  09FD                     __ptext54:	
 10213 ;; *************** function i1_PROTOCOL_EXT *****************
 10214 ;; Defined at:
 10215 ;;		line 116 in file "protocol.c"
 10216 ;; Parameters:    Size  Location     Type
 10217 ;;  char_buf        1    wreg     PTR unsigned char 
 10218 ;;		 -> buf(48), I2C1_StatusCallback@ext_buf(48), 
 10219 ;; Auto vars:     Size  Location     Type
 10220 ;;  char_buf        1  (no storage) PTR unsigned char 
 10221 ;;		 -> buf(48), I2C1_StatusCallback@ext_buf(48), 
 10222 ;; Return value:  Size  Location     Type
 10223 ;;                  1    wreg      void 
 10224 ;; Registers used:
 10225 ;;		wreg, status,2, status,0
 10226 ;; Tracked objects:
 10227 ;;		On entry : 0/0
 10228 ;;		On exit  : 0/0
 10229 ;;		Unchanged: 0/0
 10230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10231 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10232 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10233 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10234 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10235 ;;Total ram usage:        0 bytes
 10236 ;; Hardware stack levels used:    1
 10237 ;; This function calls:
 10238 ;;		Nothing
 10239 ;; This function is called by:
 10240 ;;		_I2C1_StatusCallback
 10241 ;; This function uses a non-reentrant model
 10242 ;;
 10243                           
 10244                           
 10245                           ;psect for function i1_PROTOCOL_EXT
 10246  09FD                     i1_PROTOCOL_EXT:	
 10247                           
 10248                           ;incstack = 0
 10249                           ; Regs used in i1_PROTOCOL_EXT: [wreg+status,2+status,0]
 10250  09FD  0008               	return
 10251  09FE                     __end_ofi1_PROTOCOL_EXT:	
 10252                           
 10253                           	psect	text55
 10254  0A05                     __ptext55:	
 10255 ;; *************** function _PROTOCOL_Read_Lock *****************
 10256 ;; Defined at:
 10257 ;;		line 124 in file "protocol.c"
 10258 ;; Parameters:    Size  Location     Type
 10259 ;;		None
 10260 ;; Auto vars:     Size  Location     Type
 10261 ;;		None
 10262 ;; Return value:  Size  Location     Type
 10263 ;;                  1    wreg      unsigned char 
 10264 ;; Registers used:
 10265 ;;		wreg
 10266 ;; Tracked objects:
 10267 ;;		On entry : 0/0
 10268 ;;		On exit  : 0/0
 10269 ;;		Unchanged: 0/0
 10270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10272 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10273 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10274 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10275 ;;Total ram usage:        0 bytes
 10276 ;; Hardware stack levels used:    1
 10277 ;; This function calls:
 10278 ;;		Nothing
 10279 ;; This function is called by:
 10280 ;;		_I2C1_StatusCallback
 10281 ;; This function uses a non-reentrant model
 10282 ;;
 10283                           
 10284                           
 10285                           ;psect for function _PROTOCOL_Read_Lock
 10286  0A05                     _PROTOCOL_Read_Lock:	
 10287                           
 10288                           ;protocol.c: 125: return locked;
 10289                           
 10290                           ;incstack = 0
 10291                           ; Regs used in _PROTOCOL_Read_Lock: [wreg]
 10292  0A05  0021               	movlb	1	; select bank1
 10293  0A06  0841               	movf	_locked^(0+128),w
 10294  0A07  0008               	return
 10295  0A08                     __end_of_PROTOCOL_Read_Lock:	
 10296                           
 10297                           	psect	text56
 10298  0A59                     __ptext56:	
 10299 ;; *************** function _PROTOCOL_RST *****************
 10300 ;; Defined at:
 10301 ;;		line 280 in file "protocol.c"
 10302 ;; Parameters:    Size  Location     Type
 10303 ;;		None
 10304 ;; Auto vars:     Size  Location     Type
 10305 ;;		None
 10306 ;; Return value:  Size  Location     Type
 10307 ;;                  1    wreg      void 
 10308 ;; Registers used:
 10309 ;;		wreg, status,2, status,0
 10310 ;; Tracked objects:
 10311 ;;		On entry : 0/0
 10312 ;;		On exit  : 0/0
 10313 ;;		Unchanged: 0/0
 10314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10316 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10317 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10318 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10319 ;;Total ram usage:        1 bytes
 10320 ;; Hardware stack levels used:    1
 10321 ;; This function calls:
 10322 ;;		Nothing
 10323 ;; This function is called by:
 10324 ;;		_I2C1_StatusCallback
 10325 ;; This function uses a non-reentrant model
 10326 ;;
 10327                           
 10328                           
 10329                           ;psect for function _PROTOCOL_RST
 10330  0A59                     _PROTOCOL_RST:	
 10331                           
 10332                           ;protocol.c: 281: if (readbuf.status != TLV_SET) {
 10333                           
 10334                           ;incstack = 0
 10335                           ; Regs used in _PROTOCOL_RST: [wreg+status,2+status,0]
 10336  0A59  0021               	movlb	1	; select bank1
 10337  0A5A  0851               	movf	(_readbuf^(0+128)+4),w
 10338  0A5B  1903               	btfsc	3,2
 10339  0A5C  0008               	return
 10340                           
 10341                           ;protocol.c: 282: readbuf.buf_cnt = 0;
 10342  0A5D  01D2               	clrf	(_readbuf^(0+128)+5)
 10343                           
 10344                           ;protocol.c: 283: readbuf.status = COMPLETE;
 10345  0A5E  3003               	movlw	3
 10346  0A5F  00F0               	movwf	??_PROTOCOL_RST
 10347  0A60  0870               	movf	??_PROTOCOL_RST,w
 10348  0A61  00D1               	movwf	(_readbuf^(0+128)+4)
 10349  0A62  0008               	return
 10350  0A63                     __end_of_PROTOCOL_RST:	
 10351                           
 10352                           	psect	text57
 10353  0A18                     __ptext57:	
 10354 ;; *************** function _PROTOCOL_INV *****************
 10355 ;; Defined at:
 10356 ;;		line 103 in file "protocol.c"
 10357 ;; Parameters:    Size  Location     Type
 10358 ;;		None
 10359 ;; Auto vars:     Size  Location     Type
 10360 ;;		None
 10361 ;; Return value:  Size  Location     Type
 10362 ;;                  1    wreg      void 
 10363 ;; Registers used:
 10364 ;;		None
 10365 ;; Tracked objects:
 10366 ;;		On entry : 0/0
 10367 ;;		On exit  : 0/0
 10368 ;;		Unchanged: 0/0
 10369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10371 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10373 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10374 ;;Total ram usage:        0 bytes
 10375 ;; Hardware stack levels used:    1
 10376 ;; This function calls:
 10377 ;;		Nothing
 10378 ;; This function is called by:
 10379 ;;		_I2C1_StatusCallback
 10380 ;; This function uses a non-reentrant model
 10381 ;;
 10382                           
 10383                           
 10384                           ;psect for function _PROTOCOL_INV
 10385  0A18                     _PROTOCOL_INV:	
 10386                           
 10387                           ;protocol.c: 104: invoked = 1;
 10388                           
 10389                           ;incstack = 0
 10390                           ; Regs used in _PROTOCOL_INV: []
 10391  0A18  0021               	movlb	1	; select bank1
 10392  0A19  01BF               	clrf	_invoked^(0+128)
 10393  0A1A  0ABF               	incf	_invoked^(0+128),f
 10394  0A1B  0008               	return
 10395  0A1C                     __end_of_PROTOCOL_INV:	
 10396                           
 10397                           	psect	text58
 10398  0A02                     __ptext58:	
 10399 ;; *************** function _PROTOCOL_I2C_WHO *****************
 10400 ;; Defined at:
 10401 ;;		line 200 in file "protocol.c"
 10402 ;; Parameters:    Size  Location     Type
 10403 ;;		None
 10404 ;; Auto vars:     Size  Location     Type
 10405 ;;		None
 10406 ;; Return value:  Size  Location     Type
 10407 ;;                  1    wreg      unsigned char 
 10408 ;; Registers used:
 10409 ;;		wreg
 10410 ;; Tracked objects:
 10411 ;;		On entry : 0/0
 10412 ;;		On exit  : 0/0
 10413 ;;		Unchanged: 0/0
 10414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10416 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10418 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10419 ;;Total ram usage:        0 bytes
 10420 ;; Hardware stack levels used:    1
 10421 ;; This function calls:
 10422 ;;		Nothing
 10423 ;; This function is called by:
 10424 ;;		_I2C1_StatusCallback
 10425 ;; This function uses a non-reentrant model
 10426 ;;
 10427                           
 10428                           
 10429                           ;psect for function _PROTOCOL_I2C_WHO
 10430  0A02                     _PROTOCOL_I2C_WHO:	
 10431                           
 10432                           ;protocol.c: 201: return slave_address;
 10433                           
 10434                           ;incstack = 0
 10435                           ; Regs used in _PROTOCOL_I2C_WHO: [wreg]
 10436  0A02  0021               	movlb	1	; select bank1
 10437  0A03  0843               	movf	_slave_address^(0+128),w
 10438  0A04  0008               	return
 10439  0A05                     __end_of_PROTOCOL_I2C_WHO:	
 10440                           
 10441                           	psect	text59
 10442  0E45                     __ptext59:	
 10443 ;; *************** function _PROTOCOL_I2C_SEN *****************
 10444 ;; Defined at:
 10445 ;;		line 399 in file "protocol.c"
 10446 ;; Parameters:    Size  Location     Type
 10447 ;;		None
 10448 ;; Auto vars:     Size  Location     Type
 10449 ;;  pdata           2    2[COMMON] PTR unsigned char 
 10450 ;;		 -> type_no_data(1), PROTOCOL_Send_uint8_t@pbuf(1), sendbuf(16), readbuf.length(1), 
 10451 ;;		 -> readbuf.type(1), readbuf(6), 
 10452 ;; Return value:  Size  Location     Type
 10453 ;;                  2   52[None  ] PTR unsigned char 
 10454 ;; Registers used:
 10455 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 10456 ;; Tracked objects:
 10457 ;;		On entry : 0/0
 10458 ;;		On exit  : 0/0
 10459 ;;		Unchanged: 0/0
 10460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10462 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10463 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10464 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10465 ;;Total ram usage:        4 bytes
 10466 ;; Hardware stack levels used:    1
 10467 ;; This function calls:
 10468 ;;		Nothing
 10469 ;; This function is called by:
 10470 ;;		_I2C1_StatusCallback
 10471 ;; This function uses a non-reentrant model
 10472 ;;
 10473                           
 10474                           
 10475                           ;psect for function _PROTOCOL_I2C_SEN
 10476  0E45                     _PROTOCOL_I2C_SEN:	
 10477                           
 10478                           ;protocol.c: 400: uint8_t *pdata;
 10479                           ;protocol.c: 401: switch(readbuf.status) {
 10480                           
 10481                           ;incstack = 0
 10482                           ; Regs used in _PROTOCOL_I2C_SEN: [wreg-fsr0h+status,2+status,0]
 10483  0E45  2E74               	goto	i1l3131
 10484  0E46                     i1l3109:	
 10485                           ;protocol.c: 402: case TLV_SET:
 10486                           
 10487                           
 10488                           ;protocol.c: 403: pdata = &readbuf.type;
 10489  0E46  30CD               	movlw	low _readbuf
 10490  0E47  00F2               	movwf	PROTOCOL_I2C_SEN@pdata
 10491  0E48  3000               	movlw	high _readbuf
 10492  0E49  00F3               	movwf	PROTOCOL_I2C_SEN@pdata+1
 10493                           
 10494                           ;protocol.c: 404: readbuf.status = TYPE_SENT;
 10495  0E4A  0021               	movlb	1	; select bank1
 10496  0E4B  01D1               	clrf	(_readbuf^(0+128)+4)
 10497  0E4C  0AD1               	incf	(_readbuf^(0+128)+4),f
 10498                           
 10499                           ;protocol.c: 405: break;
 10500  0E4D  2E83               	goto	i1l3133
 10501  0E4E                     i1l3113:	
 10502                           ;protocol.c: 406: case TYPE_SENT:
 10503                           
 10504                           
 10505                           ;protocol.c: 407: pdata = &readbuf.length;
 10506  0E4E  30CE               	movlw	low (_readbuf+1)
 10507  0E4F  00F2               	movwf	PROTOCOL_I2C_SEN@pdata
 10508  0E50  3000               	movlw	high (_readbuf+1)
 10509  0E51  00F3               	movwf	PROTOCOL_I2C_SEN@pdata+1
 10510                           
 10511                           ;protocol.c: 408: readbuf.status = LENGTH_SENT;
 10512  0E52  3002               	movlw	2
 10513  0E53  2E6B               	goto	L5
 10514  0E54                     i1l3117:	
 10515                           ;protocol.c: 410: case LENGTH_SENT:
 10516                           
 10517                           ;protocol.c: 409: break;
 10518                           
 10519                           
 10520                           ;protocol.c: 411: if (readbuf.buf_cnt < readbuf.length) {
 10521  0E54  084E               	movf	(_readbuf^(0+128)+1),w
 10522  0E55  0252               	subwf	(_readbuf^(0+128)+5),w
 10523  0E56  1803               	skipnc
 10524  0E57  2E65               	goto	i1l3121
 10525                           
 10526                           ;protocol.c: 412: pdata = &readbuf.pbuffer[readbuf.buf_cnt++];
 10527  0E58  0852               	movf	(_readbuf^(0+128)+5),w
 10528  0E59  00F0               	movwf	??_PROTOCOL_I2C_SEN
 10529  0E5A  01F1               	clrf	??_PROTOCOL_I2C_SEN+1
 10530  0E5B  0870               	movf	??_PROTOCOL_I2C_SEN,w
 10531  0E5C  074F               	addwf	(low ((_readbuf| 0+2)))^(0+128),w
 10532  0E5D  00F2               	movwf	PROTOCOL_I2C_SEN@pdata
 10533  0E5E  0871               	movf	??_PROTOCOL_I2C_SEN+1,w
 10534  0E5F  3D50               	addwfc	((low ((_readbuf| 0+2))+1))^(0+128),w
 10535  0E60  00F3               	movwf	PROTOCOL_I2C_SEN@pdata+1
 10536  0E61  3001               	movlw	1
 10537  0E62  00F0               	movwf	??_PROTOCOL_I2C_SEN
 10538  0E63  0870               	movf	??_PROTOCOL_I2C_SEN,w
 10539  0E64  07D2               	addwf	(_readbuf^(0+128)+5),f
 10540  0E65                     i1l3121:	
 10541                           
 10542                           ;protocol.c: 413: }
 10543                           ;protocol.c: 414: if (readbuf.buf_cnt == readbuf.length) {
 10544  0E65  0852               	movf	(_readbuf^(0+128)+5),w
 10545  0E66  064E               	xorwf	(_readbuf^(0+128)+1),w
 10546  0E67  1D03               	skipz
 10547  0E68  2E83               	goto	i1l3133
 10548                           
 10549                           ;protocol.c: 415: readbuf.buf_cnt = 0;
 10550  0E69  01D2               	clrf	(_readbuf^(0+128)+5)
 10551                           
 10552                           ;protocol.c: 416: readbuf.status = COMPLETE;
 10553  0E6A  3003               	movlw	3
 10554  0E6B                     L5:	
 10555  0E6B  00F0               	movwf	??_PROTOCOL_I2C_SEN
 10556  0E6C  0870               	movf	??_PROTOCOL_I2C_SEN,w
 10557  0E6D  00D1               	movwf	(_readbuf^(0+128)+4)
 10558                           
 10559                           ;protocol.c: 417: }
 10560                           ;protocol.c: 418: break;
 10561  0E6E  2E83               	goto	i1l3133
 10562  0E6F                     i1l3127:	
 10563                           ;protocol.c: 419: case COMPLETE:
 10564                           
 10565                           
 10566                           ;protocol.c: 420: pdata = &type_no_data;
 10567  0E6F  30EF               	movlw	low _type_no_data
 10568  0E70  00F2               	movwf	PROTOCOL_I2C_SEN@pdata
 10569  0E71  3000               	movlw	high _type_no_data
 10570  0E72  00F3               	movwf	PROTOCOL_I2C_SEN@pdata+1
 10571                           
 10572                           ;protocol.c: 422: }
 10573                           
 10574                           ;protocol.c: 421: break;
 10575  0E73  2E83               	goto	i1l3133
 10576  0E74                     i1l3131:	
 10577  0E74  0021               	movlb	1	; select bank1
 10578  0E75  0851               	movf	(_readbuf^(0+128)+4),w
 10579                           
 10580                           ; Switch size 1, requested type "space"
 10581                           ; Number of cases is 4, Range of values is 0 to 3
 10582                           ; switch strategies available:
 10583                           ; Name         Instructions Cycles
 10584                           ; simple_byte           13     7 (average)
 10585                           ; direct_byte           14     6 (fixed)
 10586                           ; jumptable            260     6 (fixed)
 10587                           ;	Chosen strategy is simple_byte
 10588  0E76  3A00               	xorlw	0	; case 0
 10589  0E77  1903               	skipnz
 10590  0E78  2E46               	goto	i1l3109
 10591  0E79  3A01               	xorlw	1	; case 1
 10592  0E7A  1903               	skipnz
 10593  0E7B  2E4E               	goto	i1l3113
 10594  0E7C  3A03               	xorlw	3	; case 2
 10595  0E7D  1903               	skipnz
 10596  0E7E  2E54               	goto	i1l3117
 10597  0E7F  3A01               	xorlw	1	; case 3
 10598  0E80  1903               	skipnz
 10599  0E81  2E6F               	goto	i1l3127
 10600  0E82  2E83               	goto	i1l3133
 10601  0E83                     i1l3133:	
 10602                           
 10603                           ;protocol.c: 423: return pdata;
 10604  0E83  0873               	movf	PROTOCOL_I2C_SEN@pdata+1,w
 10605  0E84  00F1               	movwf	?_PROTOCOL_I2C_SEN+1
 10606  0E85  0872               	movf	PROTOCOL_I2C_SEN@pdata,w
 10607  0E86  00F0               	movwf	?_PROTOCOL_I2C_SEN
 10608  0E87  0008               	return
 10609  0E88                     __end_of_PROTOCOL_I2C_SEN:	
 10610                           
 10611                           	psect	text60
 10612  09FF                     __ptext60:	
 10613 ;; *************** function _PROTOCOL_I2C_GET *****************
 10614 ;; Defined at:
 10615 ;;		line 204 in file "protocol.c"
 10616 ;; Parameters:    Size  Location     Type
 10617 ;;		None
 10618 ;; Auto vars:     Size  Location     Type
 10619 ;;		None
 10620 ;; Return value:  Size  Location     Type
 10621 ;;                  1    wreg      unsigned char 
 10622 ;; Registers used:
 10623 ;;		wreg
 10624 ;; Tracked objects:
 10625 ;;		On entry : 0/0
 10626 ;;		On exit  : 0/0
 10627 ;;		Unchanged: 0/0
 10628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10632 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10633 ;;Total ram usage:        0 bytes
 10634 ;; Hardware stack levels used:    1
 10635 ;; This function calls:
 10636 ;;		Nothing
 10637 ;; This function is called by:
 10638 ;;		_I2C1_StatusCallback
 10639 ;; This function uses a non-reentrant model
 10640 ;;
 10641                           
 10642                           
 10643                           ;psect for function _PROTOCOL_I2C_GET
 10644  09FF                     _PROTOCOL_I2C_GET:	
 10645                           
 10646                           ;protocol.c: 205: return value;
 10647                           
 10648                           ;incstack = 0
 10649                           ; Regs used in _PROTOCOL_I2C_GET: [wreg]
 10650  09FF  0020               	movlb	0	; select bank0
 10651  0A00  0866               	movf	_value,w
 10652  0A01  0008               	return
 10653  0A02                     __end_of_PROTOCOL_I2C_GET:	
 10654                           
 10655                           	psect	text61
 10656  0A14                     __ptext61:	
 10657 ;; *************** function _PROTOCOL_Backplane_Slave_Enabled *****************
 10658 ;; Defined at:
 10659 ;;		line 196 in file "protocol.c"
 10660 ;; Parameters:    Size  Location     Type
 10661 ;;		None
 10662 ;; Auto vars:     Size  Location     Type
 10663 ;;		None
 10664 ;; Return value:  Size  Location     Type
 10665 ;;                  1    wreg      void 
 10666 ;; Registers used:
 10667 ;;		None
 10668 ;; Tracked objects:
 10669 ;;		On entry : 0/0
 10670 ;;		On exit  : 0/0
 10671 ;;		Unchanged: 0/0
 10672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10674 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10675 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10676 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10677 ;;Total ram usage:        0 bytes
 10678 ;; Hardware stack levels used:    1
 10679 ;; This function calls:
 10680 ;;		Nothing
 10681 ;; This function is called by:
 10682 ;;		_I2C1_StatusCallback
 10683 ;; This function uses a non-reentrant model
 10684 ;;
 10685                           
 10686                           
 10687                           ;psect for function _PROTOCOL_Backplane_Slave_Enabled
 10688  0A14                     _PROTOCOL_Backplane_Slave_Enabled:	
 10689                           
 10690                           ;protocol.c: 197: backplane_slave_enabled = 1;
 10691                           
 10692                           ;incstack = 0
 10693                           ; Regs used in _PROTOCOL_Backplane_Slave_Enabled: []
 10694  0A14  0021               	movlb	1	; select bank1
 10695  0A15  01BA               	clrf	_backplane_slave_enabled^(0+128)
 10696  0A16  0ABA               	incf	_backplane_slave_enabled^(0+128),f
 10697  0A17  0008               	return
 10698  0A18                     __end_of_PROTOCOL_Backplane_Slave_Enabled:	
 10699                           
 10700                           	psect	text62
 10701  0B16                     __ptext62:	
 10702 ;; *************** function _EUSART_Transmit_ISR *****************
 10703 ;; Defined at:
 10704 ;;		line 165 in file "mcc_generated_files/eusart.c"
 10705 ;; Parameters:    Size  Location     Type
 10706 ;;		None
 10707 ;; Auto vars:     Size  Location     Type
 10708 ;;		None
 10709 ;; Return value:  Size  Location     Type
 10710 ;;                  1    wreg      void 
 10711 ;; Registers used:
 10712 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10713 ;; Tracked objects:
 10714 ;;		On entry : 0/0
 10715 ;;		On exit  : 0/0
 10716 ;;		Unchanged: 0/0
 10717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10719 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10720 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10721 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10722 ;;Total ram usage:        1 bytes
 10723 ;; Hardware stack levels used:    1
 10724 ;; This function calls:
 10725 ;;		Nothing
 10726 ;; This function is called by:
 10727 ;;		_INTERRUPT_InterruptManager
 10728 ;; This function uses a non-reentrant model
 10729 ;;
 10730                           
 10731                           
 10732                           ;psect for function _EUSART_Transmit_ISR
 10733  0B16                     _EUSART_Transmit_ISR:	
 10734                           
 10735                           ;eusart.c: 169: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
 10736                           
 10737                           ;incstack = 0
 10738                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 10739  0B16  3008               	movlw	8
 10740  0B17  027A               	subwf	_eusartTxBufferRemaining,w	;volatile
 10741  0B18  1803               	skipnc
 10742  0B19  2B2E               	goto	i1l395
 10743                           
 10744                           ;eusart.c: 170: {
 10745                           ;eusart.c: 171: TXREG = eusartTxBuffer[eusartTxTail++];
 10746  0B1A  087B               	movf	_eusartTxTail,w
 10747  0B1B  3EA8               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
 10748  0B1C  0086               	movwf	6
 10749  0B1D  0187               	clrf	7
 10750  0B1E  0801               	movf	1,w
 10751  0B1F  0023               	movlb	3	; select bank3
 10752  0B20  009A               	movwf	26	;volatile
 10753  0B21  3001               	movlw	1
 10754  0B22  00F0               	movwf	??_EUSART_Transmit_ISR
 10755  0B23  0870               	movf	??_EUSART_Transmit_ISR,w
 10756  0B24  07FB               	addwf	_eusartTxTail,f	;volatile
 10757                           
 10758                           ;eusart.c: 172: if(sizeof(eusartTxBuffer) <= eusartTxTail)
 10759  0B25  3008               	movlw	8
 10760  0B26  027B               	subwf	_eusartTxTail,w	;volatile
 10761  0B27  1803               	btfsc	3,0
 10762                           
 10763                           ;eusart.c: 173: {
 10764                           ;eusart.c: 174: eusartTxTail = 0;
 10765  0B28  01FB               	clrf	_eusartTxTail	;volatile
 10766                           
 10767                           ;eusart.c: 175: }
 10768                           ;eusart.c: 176: eusartTxBufferRemaining++;
 10769  0B29  3001               	movlw	1
 10770  0B2A  00F0               	movwf	??_EUSART_Transmit_ISR
 10771  0B2B  0870               	movf	??_EUSART_Transmit_ISR,w
 10772  0B2C  07FA               	addwf	_eusartTxBufferRemaining,f	;volatile
 10773                           
 10774                           ;eusart.c: 177: }
 10775  0B2D  0008               	return
 10776  0B2E                     i1l395:	
 10777                           
 10778                           ;eusart.c: 178: else
 10779                           ;eusart.c: 179: {
 10780                           ;eusart.c: 180: PIE1bits.TXIE = 0;
 10781  0B2E  0021               	movlb	1	; select bank1
 10782  0B2F  1211               	bcf	17,4	;volatile
 10783  0B30  0008               	return
 10784  0B31                     __end_of_EUSART_Transmit_ISR:	
 10785                           
 10786                           	psect	text63
 10787  0AFB                     __ptext63:	
 10788 ;; *************** function _EUSART_Receive_ISR *****************
 10789 ;; Defined at:
 10790 ;;		line 184 in file "mcc_generated_files/eusart.c"
 10791 ;; Parameters:    Size  Location     Type
 10792 ;;		None
 10793 ;; Auto vars:     Size  Location     Type
 10794 ;;		None
 10795 ;; Return value:  Size  Location     Type
 10796 ;;                  1    wreg      void 
 10797 ;; Registers used:
 10798 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10799 ;; Tracked objects:
 10800 ;;		On entry : 0/0
 10801 ;;		On exit  : 0/0
 10802 ;;		Unchanged: 0/0
 10803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10805 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10806 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10807 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10808 ;;Total ram usage:        1 bytes
 10809 ;; Hardware stack levels used:    1
 10810 ;; This function calls:
 10811 ;;		Nothing
 10812 ;; This function is called by:
 10813 ;;		_INTERRUPT_InterruptManager
 10814 ;; This function uses a non-reentrant model
 10815 ;;
 10816                           
 10817                           
 10818                           ;psect for function _EUSART_Receive_ISR
 10819  0AFB                     _EUSART_Receive_ISR:	
 10820                           
 10821                           ;eusart.c: 187: if(1 == RCSTAbits.OERR)
 10822                           
 10823                           ;incstack = 0
 10824                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 10825  0AFB  0023               	movlb	3	; select bank3
 10826  0AFC  1C9D               	btfss	29,1	;volatile
 10827  0AFD  2B00               	goto	i1l3775
 10828                           
 10829                           ;eusart.c: 188: {
 10830                           ;eusart.c: 191: RCSTAbits.CREN = 0;
 10831  0AFE  121D               	bcf	29,4	;volatile
 10832                           
 10833                           ;eusart.c: 192: RCSTAbits.CREN = 1;
 10834  0AFF  161D               	bsf	29,4	;volatile
 10835  0B00                     i1l3775:	
 10836                           
 10837                           ;eusart.c: 193: }
 10838                           ;eusart.c: 196: eusartRxBuffer[eusartRxHead++] = RCREG;
 10839  0B00  0819               	movf	25,w	;volatile
 10840  0B01  00F0               	movwf	??_EUSART_Receive_ISR
 10841  0B02  0020               	movlb	0	; select bank0
 10842  0B03  0869               	movf	_eusartRxHead,w
 10843  0B04  3EA0               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
 10844  0B05  0086               	movwf	6
 10845  0B06  0187               	clrf	7
 10846  0B07  0870               	movf	??_EUSART_Receive_ISR,w
 10847  0B08  0081               	movwf	1
 10848  0B09  3001               	movlw	1
 10849  0B0A  00F0               	movwf	??_EUSART_Receive_ISR
 10850  0B0B  0870               	movf	??_EUSART_Receive_ISR,w
 10851  0B0C  07E9               	addwf	_eusartRxHead,f	;volatile
 10852                           
 10853                           ;eusart.c: 197: if(sizeof(eusartRxBuffer) <= eusartRxHead)
 10854  0B0D  3008               	movlw	8
 10855  0B0E  0269               	subwf	_eusartRxHead,w	;volatile
 10856  0B0F  1803               	btfsc	3,0
 10857                           
 10858                           ;eusart.c: 198: {
 10859                           ;eusart.c: 199: eusartRxHead = 0;
 10860  0B10  01E9               	clrf	_eusartRxHead	;volatile
 10861                           
 10862                           ;eusart.c: 200: }
 10863                           ;eusart.c: 201: eusartRxCount++;
 10864  0B11  3001               	movlw	1
 10865  0B12  00F0               	movwf	??_EUSART_Receive_ISR
 10866  0B13  0870               	movf	??_EUSART_Receive_ISR,w
 10867  0B14  07E7               	addwf	_eusartRxCount,f	;volatile
 10868  0B15  0008               	return
 10869  0B16                     __end_of_EUSART_Receive_ISR:	
 10870  007E                     btemp	set	126	;btemp
 10871  007E                     int$flags	set	126
 10872  007E                     wtemp0	set	126


Data Sizes:
    Strings     185
    Constant    12
    Data        4
    BSS         201
    Persistent  8
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      14
    BANK0            80     64      79
    BANK1            80      0      80
    BANK2            80      2      68
    BANK3            80      0      48
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    i2c2_tr_queue.ptrb_list.pbuffer	PTR unsigned char  size(1) Largest target is 6
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), inv_handler@measure(BANK0[6]), 

    i2c2_tr_queue.pTrFlag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c2_read_no_reg_addr@status(BANK0[1]), i2c2_write_no_data@status(COMMON[1]), i2c2_read@status(COMMON[1]), i2c2_write@status(BANK0[1]), 

    i2c2_tr_queue.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK1[4]), I2C2_MasterWrite@trBlock(BANK1[4]), 

    PROTOCOL_Extension_Handler$0	PTR unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), I2C1_StatusCallback@ext_buf(BANK3[48]), 

    data	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    strncmp@s2	PTR const unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_15(CODE[4]), STR_14(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), 
		 -> STR_8(CODE[4]), STR_7(CODE[4]), STR_6(CODE[4]), STR_4(CODE[4]), 

    atoi@s	PTR const unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), 

    i2c2_read_no_reg_addr@pbuf	PTR unsigned char  size(1) Largest target is 6
		 -> inv_handler@measure(BANK0[6]), 

    PROTOCOL_I2C_SEN@pdata	PTR unsigned char  size(2) Largest target is 16
		 -> type_no_data(BANK1[1]), PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK2[16]), readbuf.length(BANK1[1]), 
		 -> readbuf.type(BANK1[1]), readbuf(BANK1[6]), 

    PROTOCOL_I2C_Send_int8_t@pbuffer	PTR char  size(1) Largest target is 2
		 -> PROTOCOL_Send_int8_t@pbuf(BANK1[1]), inv_handler@data(BANK0[2]), 

    PROTOCOL_I2C_Set_TLV@pbuffer	PTR unsigned char  size(2) Largest target is 16
		 -> PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK2[16]), 

    PROTOCOL_EXT@char_buf	PTR unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), I2C1_StatusCallback@ext_buf(BANK3[48]), 

    PROTOCOL_Extension_Handler	PTR FTN(PTR unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    PROTOCOL_Loop_Func	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    PROTOCOL_Initialize@inv_handler	PTR void  size(2) Largest target is 1
		 -> inv_handler(), 

    PROTOCOL_Inv_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), inv_handler(), 

    PROTOCOL_Initialize@set_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Set_Handler	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@stop_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Stop_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@start_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Start_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@device_id	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_1(CODE[10]), 

    device_id_	PTR const unsigned char  size(2) Largest target is 8192
		 -> ROM(CODE[8192]), STR_1(CODE[10]), 

    S1029$pbuffer	PTR unsigned char  size(2) Largest target is 16
		 -> PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK2[16]), 

    readbuf.pbuffer	PTR unsigned char  size(2) Largest target is 16
		 -> PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK2[16]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 8192
		 -> STR_10(CODE[4]), buf(BANK2[48]), STR_2(CODE[7]), ROM(CODE[8192]), 
		 -> printf@c(BANK0[1]), STR_1(CODE[10]), I2C2_ISR@i2c_address(BANK0[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_48(CODE[10]), STR_47(CODE[9]), STR_46(CODE[10]), STR_45(CODE[9]), 
		 -> STR_44(CODE[4]), STR_43(CODE[4]), STR_42(CODE[4]), STR_41(CODE[4]), 
		 -> STR_40(CODE[4]), STR_39(CODE[4]), STR_38(CODE[4]), STR_37(CODE[4]), 
		 -> STR_36(CODE[14]), STR_35(CODE[9]), STR_34(CODE[10]), STR_33(CODE[9]), 
		 -> STR_32(CODE[10]), STR_31(CODE[9]), STR_30(CODE[7]), STR_29(CODE[4]), 
		 -> STR_28(CODE[4]), STR_27(CODE[9]), STR_26(CODE[4]), STR_25(CODE[4]), 
		 -> STR_24(CODE[10]), STR_23(CODE[4]), STR_22(CODE[4]), STR_21(CODE[8]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[9]), STR_17(CODE[6]), 
		 -> STR_16(CODE[10]), STR_13(CODE[10]), STR_9(CODE[10]), STR_5(CODE[10]), 
		 -> STR_3(CODE[5]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    I2C2_MasterWriteTRBBuild@pdata	PTR unsigned char  size(1) Largest target is 2
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), 

    I2C2_MasterWriteTRBBuild@ptrb.pbuffer	PTR unsigned char  size(1) Largest target is 6
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), inv_handler@measure(BANK0[6]), 

    I2C2_MasterWriteTRBBuild@ptrb	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterWrite@trBlock(BANK1[4]), 

    I2C2_MasterReadTRBBuild@pdata	PTR unsigned char  size(1) Largest target is 6
		 -> inv_handler@measure(BANK0[6]), 

    I2C2_MasterReadTRBBuild@ptrb.pbuffer	PTR unsigned char  size(1) Largest target is 6
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), inv_handler@measure(BANK0[6]), 

    I2C2_MasterReadTRBBuild@ptrb	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK1[4]), 

    i2c2_object.pTrTail.ptrb_list.pbuffer	PTR unsigned char  size(1) Largest target is 6
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), inv_handler@measure(BANK0[6]), 

    i2c2_object.pTrTail.pTrFlag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c2_read_no_reg_addr@status(BANK0[1]), i2c2_write_no_data@status(COMMON[1]), i2c2_read@status(COMMON[1]), i2c2_write@status(BANK0[1]), 

    i2c2_object.pTrTail.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK1[4]), I2C2_MasterWrite@trBlock(BANK1[4]), 

    I2C2_MasterTRBInsert@ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK1[4]), I2C2_MasterWrite@trBlock(BANK1[4]), 

    I2C2_MasterTRBInsert@pflag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c2_read_no_reg_addr@status(BANK0[1]), i2c2_write_no_data@status(COMMON[1]), i2c2_read@status(COMMON[1]), i2c2_write@status(BANK0[1]), 

    I2C2_MasterRead@pflag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c2_read_no_reg_addr@status(BANK0[1]), i2c2_read@status(COMMON[1]), 

    I2C2_MasterRead@pdata	PTR unsigned char  size(1) Largest target is 6
		 -> inv_handler@measure(BANK0[6]), 

    F3084.pbuffer	PTR unsigned char  size(1) Largest target is 6
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), inv_handler@measure(BANK0[6]), 

    I2C2_MasterWrite@pflag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c2_write_no_data@status(COMMON[1]), i2c2_read@status(COMMON[1]), i2c2_write@status(BANK0[1]), 

    I2C2_MasterWrite@pdata	PTR unsigned char  size(1) Largest target is 2
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), 

    F3079.pbuffer	PTR unsigned char  size(1) Largest target is 6
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), inv_handler@measure(BANK0[6]), 

    I2C2_ISR@pi2c_buf_ptr	PTR unsigned char  size(1) Largest target is 6
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), inv_handler@measure(BANK0[6]), 
		 -> I2C2_ISR@i2c_address(BANK0[2]), NULL(NULL[0]), 

    S264$pbuffer	PTR unsigned char  size(1) Largest target is 6
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), inv_handler@measure(BANK0[6]), 

    p_i2c2_trb_current.pbuffer	PTR unsigned char  size(1) Largest target is 6
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), inv_handler@measure(BANK0[6]), 

    p_i2c2_trb_current	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK1[4]), I2C2_MasterWrite@trBlock(BANK1[4]), NULL(NULL[0]), 

    i2c2_object.pTrHead.pTrFlag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c2_read_no_reg_addr@status(BANK0[1]), i2c2_write_no_data@status(COMMON[1]), i2c2_read@status(COMMON[1]), i2c2_write@status(BANK0[1]), 

    i2c2_object.pTrHead.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK1[4]), I2C2_MasterWrite@trBlock(BANK1[4]), 

    S276$pTrFlag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c2_read_no_reg_addr@status(BANK0[1]), i2c2_write_no_data@status(COMMON[1]), i2c2_read@status(COMMON[1]), i2c2_write@status(BANK0[1]), 

    p_i2c2_current.pTrFlag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c2_read_no_reg_addr@status(BANK0[1]), i2c2_write_no_data@status(COMMON[1]), i2c2_read@status(COMMON[1]), i2c2_write@status(BANK0[1]), 

    S276$ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK1[4]), I2C2_MasterWrite@trBlock(BANK1[4]), 

    p_i2c2_current.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK1[4]), I2C2_MasterWrite@trBlock(BANK1[4]), 

    p_i2c2_current	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK1[3]), NULL(NULL[0]), 

    S287$pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK1[3]), 

    i2c2_object.pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK1[3]), 

    S287$pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK1[3]), 

    i2c2_object.pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK1[3]), 

    sp__PROTOCOL_I2C_SEN	PTR unsigned char  size(2) Largest target is 16
		 -> type_no_data(BANK1[1]), PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK2[16]), readbuf.length(BANK1[1]), 
		 -> readbuf.type(BANK1[1]), readbuf(BANK1[6]), 

    I2C1_StatusCallback@pdata	PTR unsigned char  size(2) Largest target is 16
		 -> type_no_data(BANK1[1]), PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK2[16]), readbuf.length(BANK1[1]), 
		 -> readbuf.type(BANK1[1]), readbuf(BANK1[6]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_I2C1_ISR
    _I2C2_ISR->_I2C2_Stop
    _I2C1_ISR->_I2C1_StatusCallback
    _I2C1_StatusCallback->_PROTOCOL_I2C_SEN
    _I2C1_StatusCallback->i1_PROTOCOL_SAV
    i1_PROTOCOL_SAV->i1_DATAEE_WriteByte

Critical Paths under _main in BANK0

    _main->_PROTOCOL_Loop
    _PROTOCOL_Loop->_inv_handler
    _inv_handler->_PROTOCOL_I2C_Send_int8_t
    _i2c2_write->_I2C2_MasterWrite
    _I2C2_MasterWrite->_I2C2_MasterWriteTRBBuild
    _i2c2_read_no_reg_addr->_I2C2_MasterRead
    _I2C2_MasterRead->_I2C2_MasterReadTRBBuild
    ___aldiv->___lmul
    _PROTOCOL_I2C_Send_int8_t->_printf
    _printf->___lwmod
    _putch->_EUSART_Write
    ___lwmod->___lwdiv
    _atoi->___wmul
    _PROTOCOL_Write_Device_Address->_DATAEE_WriteByte
    _PROTOCOL_SAV->_DATAEE_WriteByte
    _PROTOCOL_Initialize->_DATAEE_ReadByte

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_PROTOCOL_Loop

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   22251
                                             63 BANK0      1     1      0
                  _EUSART_Initialize
                    _I2C1_Initialize
                    _I2C2_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                _PROTOCOL_Initialize
                      _PROTOCOL_Loop
                    _TMR0_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (1) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_Initialize                                      1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Loop                                        4     4      0   21713
                                             61 BANK0      2     2      0
                                              0 BANK2      2     2      0
                   Absolute function *
                        _EUSART_Read
                       _PROTOCOL_EXT
       _PROTOCOL_Read_Device_Address
                       _PROTOCOL_SAV
                       _PROTOCOL_SET
                       _PROTOCOL_STA
                       _PROTOCOL_STP
      _PROTOCOL_Write_Device_Address
            _TMR0_HasOverflowOccured
                               _atoi
                        _inv_handler *
                             _printf
                            _strncmp
 ---------------------------------------------------------------------------------
 (2) _strncmp                                              7     2      5    2040
                                              1 BANK0      7     2      5
 ---------------------------------------------------------------------------------
 (2) _inv_handler                                         22    22      0   12416
                                             39 BANK0     22    22      0
           _PROTOCOL_I2C_Send_int8_t
                            ___aldiv
                             ___lmul
              _i2c2_read_no_reg_addr
                         _i2c2_write
 ---------------------------------------------------------------------------------
 (3) _i2c2_write                                          10     6      4    2338
                                             15 BANK0     10     6      4
                   _I2C2_MasterWrite
 ---------------------------------------------------------------------------------
 (4) _I2C2_MasterWrite                                     7     3      4    1771
                                              8 BANK0      7     3      4
               _I2C2_MasterTRBInsert
           _I2C2_MasterWriteTRBBuild
 ---------------------------------------------------------------------------------
 (5) _I2C2_MasterWriteTRBBuild                             7     3      4     450
                                              1 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _i2c2_read_no_reg_addr                                9     5      4    2153
                                             15 BANK0      9     5      4
                    _I2C2_MasterRead
 ---------------------------------------------------------------------------------
 (4) _I2C2_MasterRead                                      7     3      4    1598
                                              8 BANK0      7     3      4
            _I2C2_MasterReadTRBBuild
               _I2C2_MasterTRBInsert
 ---------------------------------------------------------------------------------
 (5) _I2C2_MasterTRBInsert                                 4     2      2     494
                                              1 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (5) _I2C2_MasterReadTRBBuild                              7     3      4     481
                                              1 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     444
                                              1 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     753
                                             13 BANK0     15     7      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _PROTOCOL_I2C_Send_int8_t                             4     3      1    6401
                                             35 BANK0      4     3      1
               _PROTOCOL_I2C_Set_TLV
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              24    20      4    5341
                                             15 BANK0     20    16      4
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      93
                                              3 BANK0      1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (4) _EUSART_Write                                         2     2      0      62
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     386
                                              9 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     395
                                              1 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (4) _PROTOCOL_I2C_Set_TLV                                 6     3      3     737
                                              1 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 8     6      2    1081
                                              7 BANK0      8     6      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      99
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     582
                                              1 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _TMR0_HasOverflowOccured                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_Write_Device_Address                        2     2      0     315
                                              4 BANK0      2     2      0
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_STP                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_STA                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_SET                                         2     2      0      31
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_SAV                                         1     1      0     253
                                              4 BANK0      1     1      0
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (3) _DATAEE_WriteByte                                     3     2      1     253
                                              1 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_EXT                                         1     1      0      66
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Read                                          2     2      0      37
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Initialize                                 10     2      8     538
                                              2 BANK0     10     2      8
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (2) _DATAEE_ReadByte                                      1     1      0      22
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2C2_Initialize                                      1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C1_Initialize                                      2     2      0       0
                                              1 BANK0      2     2      0
       _PROTOCOL_Read_Device_Address
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_Read_Device_Address                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Initialize                                    1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                           1     1      0     255
                                              0 BANK0      1     1      0
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
                           _I2C1_ISR
               _I2C2_BusCollisionISR
                           _I2C2_ISR
 ---------------------------------------------------------------------------------
 (8) _I2C2_ISR                                             4     4      0      22
                                              2 COMMON     4     4      0
              _I2C2_FunctionComplete
                          _I2C2_Stop
 ---------------------------------------------------------------------------------
 (9) _I2C2_Stop                                            2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (9) _I2C2_FunctionComplete                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _I2C2_BusCollisionISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _I2C1_ISR                                             2     2      0     233
                                              8 COMMON     2     2      0
                _I2C1_StatusCallback
 ---------------------------------------------------------------------------------
 (9) _I2C1_StatusCallback                                  4     4      0     187
                                              4 COMMON     4     4      0
   _PROTOCOL_Backplane_Slave_Enabled
                   _PROTOCOL_I2C_GET
                   _PROTOCOL_I2C_SEN
                   _PROTOCOL_I2C_WHO
                       _PROTOCOL_INV
                       _PROTOCOL_RST
                 _PROTOCOL_Read_Lock
                     i1_PROTOCOL_EXT
                     i1_PROTOCOL_SAV
                     i1_PROTOCOL_SET
                     i1_PROTOCOL_STA
                     i1_PROTOCOL_STP
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_STP                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_STA                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_SET                                      2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_SAV                                      1     1      0      94
                                              3 COMMON     1     1      0
                 i1_DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (11) i1_DATAEE_WriteByte                                  3     2      1      94
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_EXT                                      1     1      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_Read_Lock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_RST                                        1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_INV                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_I2C_WHO                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_I2C_SEN                                    4     4      0      26
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_I2C_GET                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_Backplane_Slave_Enabled                    0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _EUSART_Receive_ISR                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_Initialize
   _I2C1_Initialize
     _PROTOCOL_Read_Device_Address
   _I2C2_Initialize
   _OSCILLATOR_Initialize
   _PIN_MANAGER_Initialize
   _PROTOCOL_Initialize
     _DATAEE_ReadByte
   _PROTOCOL_Loop
     Absolute function(Fake) *
     _EUSART_Read *
     _PROTOCOL_EXT *
     _PROTOCOL_Read_Device_Address *
     _PROTOCOL_SAV *
       _DATAEE_WriteByte
     _PROTOCOL_SET *
     _PROTOCOL_STA *
     _PROTOCOL_STP *
     _PROTOCOL_Write_Device_Address *
       _DATAEE_WriteByte
     _TMR0_HasOverflowOccured *
     _atoi *
       ___wmul
       _isdigit
     _inv_handler *
       _PROTOCOL_I2C_Send_int8_t
         _PROTOCOL_I2C_Set_TLV
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
           _putch
             _EUSART_Write
       ___aldiv
         ___lmul (ARG)
       ___lmul
       _i2c2_read_no_reg_addr
         _I2C2_MasterRead
           _I2C2_MasterReadTRBBuild
           _I2C2_MasterTRBInsert
       _i2c2_write
         _I2C2_MasterWrite
           _I2C2_MasterTRBInsert
           _I2C2_MasterWriteTRBBuild
     _printf *
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
     _strncmp *
   _TMR0_Initialize
   _WDT_Initialize

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR
   _I2C1_ISR
     _I2C1_StatusCallback
       _PROTOCOL_Backplane_Slave_Enabled
       _PROTOCOL_I2C_GET
       _PROTOCOL_I2C_SEN
       _PROTOCOL_I2C_WHO
       _PROTOCOL_INV
       _PROTOCOL_RST
       _PROTOCOL_Read_Lock
       i1_PROTOCOL_EXT
       i1_PROTOCOL_SAV
         i1_DATAEE_WriteByte
       i1_PROTOCOL_SET
       i1_PROTOCOL_STA
       i1_PROTOCOL_STP
   _I2C2_BusCollisionISR
   _I2C2_ISR
     _I2C2_FunctionComplete
     _I2C2_Stop

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     40      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      2      44       9       85.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      30      11       60.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     121      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     121      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Sat Aug 26 14:03:29 2017

                                         _i 0065                                           _j 00B9  
                                         pc 0002                 i2c2_read_no_reg_addr@status 0037  
                    __end_ofi1_PROTOCOL_EXT 09FE                      __end_ofi1_PROTOCOL_SAV 0A50  
                    __end_ofi1_PROTOCOL_SET 0A40                      __end_ofi1_PROTOCOL_STA 0A20  
                    __end_ofi1_PROTOCOL_STP 0A0B             __end_of_TMR0_HasOverflowOccured 0A28  
                               __CFG_CP$OFF 0000                       ?_I2C2_MasterTRBInsert 0021  
              i2c2_read_no_reg_addr@timeout 0035                         ___wmul@multiplicand 0023  
                           _timer0ReloadVal 00C4              I2C2_MasterReadTRBBuild@address 0023  
                            inv_handler@s_t 0053                                 __CFG_LVP$ON 0000  
                                       l600 01CA                                         l383 0C3A  
                                       l480 0C23                                         l617 0255  
                                       l565 00A7                                         l741 0256  
                                       l593 0154                                         l577 0174  
                                       l937 0C9B                                __CFG_CPD$OFF 0000  
                                       _buf 0120                                         _cnt 00C2  
                              __CFG_BORV$LO 0000                                         wreg 0009  
                              __CFG_IESO$ON 0000                             inv_handler@data 005B  
                              ?_EUSART_Read 0070                             inv_handler@s_rh 0057  
                          __end_of_I2C1_ISR 0C78                            __end_of_I2C2_ISR 0533  
                                      l1117 0F8F                                        l1058 0B3A  
                                      l4101 0D56                                        l4023 0EB5  
                                      l4105 0D62                                        l4009 0C4E  
                                      l4033 0EC8                                        l4203 0199  
                                      l4131 00A2                                        l4027 0EBC  
                                      l4123 0CE8                                        l4053 0B34  
                                      l4109 0D6B                                        l4029 0EC1  
                                      l4117 0D10                                        l4047 0A7D  
                                      l4231 01F3                                        l4223 01E6  
                                      l4215 01BE                                        l4151 00F1  
                                      l4143 00C2                                _tmr_overflow 00BC  
                                      l4225 01E9                                        l4209 019F  
                                      l4137 00AC                                        l4313 0D3B  
                                      l4083 0DF5                                        l4075 0DD7  
                                      l4243 0213                                        l4163 0107  
                                      l4139 00B5                                        l4331 0F28  
                                      l4307 0D31                                        l4421 0B8A  
                                      l4501 07BA                                        l4077 0DE3  
                                      l4253 0220                                        l4237 0202  
                                      l4181 014B                                        l4173 0124  
                                      l4165 0115                                        l4333 0F40  
                                      l4317 0D1E                                        l4511 07F7  
                                      l4503 07BE                                        l4087 0DFE  
                                      l4239 0206                                        l4247 021B  
                                      l4175 0133                                        l4159 0105  
                                      l4255 0086                                        l4343 0F50  
                                      l4335 0F4C                                        l4319 0D41  
                                      l4505 07E7                                        l4169 0122  
                                      l4345 0F6C                                        l4353 0DB1  
                                      l4099 0D4A                                        l4179 0140  
                                      l4187 0156                                        l4371 0FA0  
                                      l4291 0C91                                        l4603 038C  
                                      l4381 0FBE                                        l4349 0DA7  
                                      l4199 018E                                        l4471 0E39  
                                      l4615 03DF                                        l4393 0FE9  
                                      l4297 0C9D                                        l4609 03B0  
                                      l4545 0282                                        l4483 0795  
                                      l4379 0FB0                                        l4467 0E21  
                                      l4475 0E03                                        l4547 0283  
                                      l4485 078D                                        l4397 0FF7  
                                      l4389 0FDE                                        l4477 0E42  
                                      l4581 02F2                                        l4557 0291  
                                      l4495 07B2                                        l4487 079A  
                                      l4585 030B                                        l4595 0349  
                                      l4589 0324                                        l4599 0368  
                                      l3995 0C2F                                        STR_1 0726  
                                      STR_2 0749                                        STR_3 0756  
                                      STR_4 0777                                        STR_5 06FE  
                                      STR_6 0787                                        STR_7 076F  
                                      STR_8 077B                                        STR_9 0708  
                                      _LATA 010C                                        _LATB 010D  
                                      _LATC 010E                                        u3325 0B3B  
                                      u3405 0DF6                                        u3335 0B40  
                                      u3435 0D4D                                        u3365 0DDA  
                                      u3455 0D5C                                        u3615 01B4  
                                      u3385 0DE4                                        u3465 0D63  
                                      u3395 0DEE                                        u3555 011B  
                                      u4447 0BCD                                        u3655 01D9  
                                      u3935 0FB3                                        i1l64 0C65  
                                      u3955 0FBF                                        u3875 0DB2  
                                      u3965 0FD3                                        u3885 0DB9  
                                      i1l86 0535                                        u3975 0FDF  
                                      _TMR0 0015                                        _WPUA 020C  
                                      _WPUB 020D                                        _WPUC 020E  
                              __CFG_WRT$OFF 0000                               __CFG_FCMEN$ON 0000  
                                      _data 00B8                                        _atoi 078B  
                                      _main 0D70                                        fsr0h 0005  
                                      fsr1h 0007                                        indf0 0000  
                                      fsr0l 0004                                        indf1 0001  
                                      fsr1l 0006                                        btemp 007E  
               I2C2_MasterReadTRBBuild@ptrb 0027                               __CFG_BOREN$ON 0000  
                                      start 0048                               __CFG_MCLRE$ON 0000  
                       _I2C1_StatusCallback 0533                  ??_PROTOCOL_I2C_Send_int8_t 0044  
                           ?i1_PROTOCOL_EXT 0070                             ?i1_PROTOCOL_SAV 0070  
                           ?i1_PROTOCOL_SET 0070                   __size_of_DATAEE_WriteByte 0023  
                           ?i1_PROTOCOL_STA 0070                             ?i1_PROTOCOL_STP 0070  
                   __end_of_TMR0_Initialize 0A8E                               __CFG_PLLEN$ON 0000  
                                _i2c2_state 00C9                               ?_EUSART_Write 0070  
                                _i2c2_write 0C78              __size_of_OSCILLATOR_Initialize 0005  
             __end_of_OSCILLATOR_Initialize 0A2D                     _I2C2_MasterReadTRBBuild 0C9F  
                           __end_of___aldiv 1000                                       ?_atoi 0027  
                                     ?_main 0070                                       STR_10 0773  
                                     STR_11 0783                                       STR_12 077F  
                                     STR_20 075B                                       STR_13 06EA  
                                     STR_14 076B                                       STR_22 075F  
                                     STR_30 0742                                       STR_15 0767  
                                     STR_40 06E6                                       STR_24 071C  
                                     STR_32 0712                                       STR_16 06E0  
                                     STR_17 0750                               __CFG_WDTE$OFF 0000  
                                     STR_18 0739                                       STR_34 06F4  
                                     STR_19 0763                                       STR_35 0730  
                                     STR_36 06D2                                       STR_39 075F  
                         __end_of_I2C2_Stop 0AE1                             __end_of___lwdiv 0E03  
                                     i1l103 0558                                       i1l210 04CA  
                                     i1l124 05FD              __size_of_I2C2_FunctionComplete 0012  
                                     i1l213 04DE                                       i1l214 04EC  
                                     i1l206 04A8                                       i1l225 0AAD  
                                     i1l218 0513                                       i1l323 0015  
                                     i1l325 0021                                       i1l333 0043  
                                     i1l190 042E                                       i1l327 002D  
                                     i1l184 03F8                                       i1l329 0039  
                           __end_of___lwmod 0D70                                       i1l195 0453  
                                     i1l196 045F                                       i1l189 0426  
                                     i1l480 0B61                                       i1l395 0B2E  
                PROTOCOL_I2C_Set_TLV@length 0021                                       _RCREG 0199  
             __end_of_I2C2_FunctionComplete 0AB0                                       _RCSTA 019D  
                    i2c2_write@write_status 0037                                       _TRISA 008C  
                                     _TRISB 008D                                       _TRISC 008E  
                                     _TXREG 019A                                       _TXSTA 019E  
                       ___lmul@multiplicand 0025                __size_of_PROTOCOL_Initialize 0051  
                PROTOCOL_I2C_Set_TLV@status 0026                           ??_I2C1_Initialize 0021  
                      ?_I2C1_StatusCallback 0070                             _DATAEE_ReadByte 0A63  
           ??_PROTOCOL_Write_Device_Address 0024                             __end_of_dpowers 06D0  
                            _WDT_Initialize 07FC              PROTOCOL_Initialize@inv_handler 0027  
                           __end_of_isdigit 0A7F                                ?_inv_handler 0070  
                                     _value 0066                                       atoi@a 002C  
                                     atoi@s 002E                                       _putch 0A2D  
              I2C2_MasterReadTRBBuild@pdata 0021                      ?_i2c2_read_no_reg_addr 002F  
                                     pclath 000A                      ??_PROTOCOL_I2C_Set_TLV 0024  
                                     status 0003                                       wtemp0 007E  
                           __end_of_strncmp 0E45                           ??_I2C2_MasterRead 002C  
                         ??_I2C2_Initialize 0021                             __initialization 004A  
                              __end_of_atoi 07FC                                __end_of_main 0D9E  
                    ??_I2C2_MasterTRBInsert 0023                              ??_EUSART_Write 0021  
                            i2c2_write@data 0032                 ?_INTERRUPT_InterruptManager 0070  
          __end_of_I2C2_MasterWriteTRBBuild 0BC7            PROTOCOL_Initialize@start_handler 0024  
                                    ??_atoi 0029                                      ??_main 005F  
                               _i2c2_object 0060                          _PROTOCOL_Read_Lock 0A05  
                         inv_handler@status 004C                      __end_of_WDT_Initialize 0800  
                     ??_I2C1_StatusCallback 0074                  __end_ofi1_DATAEE_WriteByte 0B6A  
                                    i1S4713 0800                                      i1S4715 0818  
                                    _EEADRH 0192                                      _EEADRL 0191  
                                    _EEDATH 0194                                      _EEDATL 0193  
                                    _EECON2 0196                                      _ANSELA 018C  
                                    ?_putch 0070                                      _ANSELB 018D  
                                    _ANSELC 018E                         ?_PROTOCOL_Read_Lock 0070  
                        _PROTOCOL_Loop_Func 00B6                __end_of_I2C2_BusCollisionISR 09FF  
                                    i1l3121 0E65                                      i1l3113 0E4E  
                                    i1l3131 0E74                                      i1l3117 0E54  
                                    i1l3133 0E83                                      i1l3109 0E46  
                                    i1l3301 0544                                      i1l3127 0E6F  
                                    i1l3311 055B                                      i1l3303 0548  
                                    i1l3321 0581                                      i1l3305 054C  
                                    i1l3307 0550                                      i1l3315 055F  
                                    i1l3333 0597                                      i1l3309 0554  
                                    i1l3343 05B3                                      i1l3327 058B  
                                    i1l3319 0577                                      i1l3351 05C0  
                                    i1l3361 05E2                                      i1l3353 05CC  
                                    i1l3355 05CF                                      i1l3347 05B6  
                                    i1l3611 044D                                      i1l3357 05D4  
                                    i1l3365 05E7                                      i1l3605 043A  
                                    i1l3295 0539                                      i1l3543 0C6C  
                                    i1l3297 053F                                      i1l3369 05F3  
                                    i1l3545 0C6E                                      i1l3537 0C63  
                                    i1l3625 047D                                      i1l3705 0527  
                                    i1l3651 04A2                                      i1l3397 0ADE  
                                    i1l3645 0495                                      i1l3593 0419  
                                    i1l3683 04FA                                      i1l3667 04D2  
                                    i1l3659 04B6                                      i1l3775 0B00  
                                    i1l3695 0517                                      i1l3679 04F3  
                                    i1l3697 051A                                      i1l3699 051E  
                                    _OSCCON 0099            __size_of_TMR0_HasOverflowOccured 0004  
                                    _TMR0IF 005A                                      _SPBRGH 019C  
                                    _SPBRGL 019B                                      _WDTCON 0097  
                     I2C2_MasterRead@length 0028              PROTOCOL_Initialize@set_handler 0026  
                            __CFG_PWRTE$OFF 0000                   PROTOCOL_Initialize@scaler 0029  
                                    ___lmul 0D9E                                   ??___aldiv 0035  
                                    ___wmul 0B31                              _p_i2c2_current 006A  
                            __CFG_STVREN$ON 0000                   ??_I2C2_MasterReadTRBBuild 0025  
                                 ??___lwdiv 0025                        ??_PROTOCOL_Read_Lock 0070  
                                 ??___lwmod 002D                                _type_no_data 00EF  
                       _EUSART_Transmit_ISR 0B16                            ?_TMR0_Initialize 0070  
                                    _locked 00C1                                   ?_I2C1_ISR 0070  
                                 ?_I2C2_ISR 0070                                 ?_i2c2_write 002F  
                  I2C2_Stop@completion_code 0071                                      _printf 0081  
                   __end_of_DATAEE_ReadByte 0A70               I2C2_MasterReadTRBBuild@length 0022  
                              __pdataCOMMON 007D                                   ??_isdigit 0021  
                  __end_of_PROTOCOL_I2C_GET 0A02                    __end_of_PROTOCOL_I2C_SEN 0E88  
                  __end_of_PROTOCOL_I2C_WHO 0A05                             ?_WDT_Initialize 0070  
             i1DATAEE_WriteByte@GIEBitValue 0072                                   ??_strncmp 0026  
                 PROTOCOL_Send_uint8_t@pbuf 00E6                        ?_EUSART_Transmit_ISR 0070  
                      __size_of_EUSART_Read 001F                     __end_of__initialization 007D  
                         ?_I2C2_MasterWrite 0028                          ??_I2C2_MasterWrite 002C  
                            __pcstackCOMMON 0070                                __pidataBANK1 0A11  
                          _DATAEE_WriteByte 0C0A                              _i2c2_trb_count 00C8  
                             __end_of_putch 0A33                                  ??_I2C1_ISR 0078  
                                ??_I2C2_ISR 0072                       __end_of_PROTOCOL_Loop 03E4  
                            _OPTION_REGbits 0095                    _I2C2_MasterWriteTRBBuild 0BA7  
              I2C2_MasterWriteTRBBuild@ptrb 0027                     PROTOCOL_Send_float@pbuf 00DB  
                     ??_EUSART_Transmit_ISR 0070                                     ??_putch 0023  
                                __pbssBANK0 0060                                  __pbssBANK1 00A0  
                                __pbssBANK2 0120                                  __pbssBANK3 01A0  
                    i1DATAEE_WriteByte@bAdd 0071                          inv_handler@measure 004D  
                      __end_of_EUSART_Write 0C51                        __size_of_inv_handler 00C8  
                       __size_of_i2c2_write 0027                 __size_of_EUSART_Receive_ISR 001B  
                        i2c2_write@dev_addr 002F                            ??i1_PROTOCOL_EXT 0070  
                          ??i1_PROTOCOL_SAV 0073                            ??i1_PROTOCOL_SET 0070  
                          ??i1_PROTOCOL_STA 0070                            ??i1_PROTOCOL_STP 0070  
                       _PROTOCOL_Initialize 0ECF                                  __pmaintext 0D70  
                                   ?___lmul 0021                                     ?___wmul 0021  
                                __pintentry 0004                             _I2C1_Initialize 0BC7  
                                   _BAUDCON 019F                              ___lmul@product 0029  
                                _device_id_ 0160                          i2c2_write@reg_addr 0031  
                                   _APFCON0 011D                                     _APFCON1 011E  
                      _I2C2_BusCollisionISR 09FE                                     ?_printf 002F  
                 i2c2_read_no_reg_addr@pbuf 0031                  I2C1_StatusCallback@ext_buf 01A0  
                I2C1_StatusCallback@ext_cnt 00CA                  I2C1_StatusCallback@ext_len 00CB  
                          ?_DATAEE_ReadByte 0070                               _eusartRxCount 0067  
         I2C1_StatusCallback@slaveWriteType 00CC                  PROTOCOL_Send_uint16_t@pbuf 00E3  
                      ?_PROTOCOL_Initialize 0022           I2C2_ISR@i2c_10bit_address_restart 00C5  
                    I2C2_MasterRead@address 0029                                   _I2C2_Stop 0AC8  
                   ??_i2c2_read_no_reg_addr 0033                                     _OSCTUNE 0098  
                                   _SSP1ADD 0212                                     _SSP2ADD 021A  
                                   _SSP1BUF 0211                                     _SSP2BUF 0219  
                                   _SSP1MSK 0213                      _PROTOCOL_Start_Handler 00EB  
                           _I2C2_MasterRead 0CC7                             _I2C2_Initialize 0AB0  
                        __end_of_RESOLUTION 06D2                     _TMR0_HasOverflowOccured 0A24  
                      DATAEE_WriteByte@bAdd 0022                      I2C2_MasterRead@trBlock 00D3  
                                   ___aldiv 0F7E                             __size_of___lmul 0030  
                             ?_PROTOCOL_INV 0070                               ?_PROTOCOL_EXT 0070  
                             ?_PROTOCOL_SAV 0070                               ?_PROTOCOL_SET 0070  
                             ?_PROTOCOL_STA 0070                               ?_PROTOCOL_RST 0070  
                             ?_PROTOCOL_STP 0070                             __size_of___wmul 001C  
                                   ___lwdiv 0DCE                                     ___lwmod 0D43  
                     ?_I2C2_BusCollisionISR 0070                   I2C2_MasterTRBInsert@count 0024  
                                   __ptext1 07FC                                     __ptext2 0A7F  
                                   __ptext3 0256                                     __ptext4 0E03  
                                   __ptext5 05FE                                     __ptext6 0C78  
                                   __ptext7 0CEF                                     __ptext8 0BA7  
                                   __ptext9 0D17                   I2C2_MasterTRBInsert@pflag 0022  
                           __size_of_printf 01D5                                     _dpowers 06C6  
                     _OSCILLATOR_Initialize 0A28  PROTOCOL_Write_Device_Address@device_id_i2c 0025  
                     ??_PROTOCOL_Initialize 002A                                     _isdigit 0A70  
                                   _readbuf 00CD                                     _sec_cnt 00BE  
                                   _invoked 00BF                            ___aldiv@dividend 0031  
                  ??_PIN_MANAGER_Initialize 0021                                     _sendbuf 0150  
         __size_of_PROTOCOL_I2C_Send_int8_t 005E                                  ?_I2C2_Stop 0070  
                     _I2C2_FunctionComplete 0A9E                   ?_PROTOCOL_I2C_Send_int8_t 0043  
                                   _tmr_cnt 00BD                                     clrloop0 0A34  
                                   _running 00C0                                     _strncmp 0E03  
                      end_of_initialization 007D                  _PROTOCOL_Extension_Handler 00B4  
             __size_of_PROTOCOL_I2C_Set_TLV 0022                          i1_DATAEE_WriteByte 0B4D  
                         _EUSART_Initialize 0AE1                     __end_of_I2C1_Initialize 0BE8  
                        ?_EUSART_Initialize 0070                       I2C2_MasterWrite@pdata 002E  
                        _p_i2c2_trb_current 006B                                   _RCSTAbits 019D  
                     I2C2_MasterWrite@pflag 002B                                     printf@c 0042  
                                   printf@f 002F                            ___aldiv@quotient 0038  
                            ??_PROTOCOL_INV 0070                              ??_PROTOCOL_EXT 0021  
                            ??_PROTOCOL_SAV 0024                              ??_PROTOCOL_SET 0021  
                            ??_PROTOCOL_STA 0021                              ??_PROTOCOL_RST 0070  
                            ??_PROTOCOL_STP 0021                      I2C2_ISR@i2c_bytes_left 00C6  
                       ?i1_DATAEE_WriteByte 0070                                __pstringtext 06C6  
             __size_of_I2C2_MasterTRBInsert 0047                                ??_i2c2_write 0033  
                       ??_EUSART_Initialize 0021                 __end_of_I2C1_StatusCallback 05FE  
                          ??_WDT_Initialize 0021                           __size_of_I2C1_ISR 0027  
                         __size_of_I2C2_ISR 014F                     __end_of_I2C2_MasterRead 0CEF  
                          __CFG_FOSC$INTOSC 0000                     __end_of_I2C2_Initialize 0AC8  
                         ?_PROTOCOL_I2C_GET 0070                           ?_PROTOCOL_I2C_SEN 0070  
                         ?_PROTOCOL_I2C_WHO 0070                       __size_of_EUSART_Write 0024  
                 ??_TMR0_HasOverflowOccured 0021                          ??_PROTOCOL_I2C_GET 0070  
                        ??_PROTOCOL_I2C_SEN 0070                          ??_PROTOCOL_I2C_WHO 0070  
                      ??i1_DATAEE_WriteByte 0071                                  _tmr_scaler 00ED  
                  __end_of_DATAEE_WriteByte 0C2D                   __end_of_EUSART_Initialize 0AFB  
                               printf@width 0040                          __end_of_i2c2_write 0C9F  
                      i1PROTOCOL_SET@value_ 0071                      ??_I2C2_BusCollisionISR 0070  
                  I2C1_StatusCallback@pdata 0075                              __end_of___lmul 0DCE  
               __size_of_PROTOCOL_Read_Lock 0003                  ??_I2C2_MasterWriteTRBBuild 0025  
                            __end_of___wmul 0B4D                               __pidataCOMMON 0003  
                              _EUSART_Write 0C2D                      ?_OSCILLATOR_Initialize 0070  
                 __size_of_I2C2_MasterWrite 0028                              __end_of_printf 0256  
                    ?_I2C2_FunctionComplete 0070                              PROTOCOL_Loop@c 0162  
                       start_initialization 004A                                 ??_I2C2_Stop 0070  
                  __size_of_TMR0_Initialize 000F             __size_of_PIN_MANAGER_Initialize 001E  
                             ??_EUSART_Read 0021                               i2c2_write@buf 0035  
             i2c2_read_no_reg_addr@dev_addr 002F                                 putch@txData 0023  
                       DATAEE_ReadByte@bAdd 0021             I2C2_MasterWriteTRBBuild@address 0023  
                          i2c2_write@status 0038                        I2C2_MasterRead@pdata 002E  
                  ?_I2C2_MasterReadTRBBuild 0021                        I2C2_MasterRead@pflag 002B  
                          ?_I2C1_Initialize 0070                                    ??___lmul 0029  
                          I2C1_ISR@i2c_data 0079                                    ??___wmul 0025  
             I2C2_MasterWriteTRBBuild@pdata 0021                        I2C2_ISR@pi2c_buf_ptr 00C7  
                  PROTOCOL_Send_int8_t@pbuf 00E5        __end_of_PROTOCOL_Read_Device_Address 0A0E  
     __size_of_PROTOCOL_Read_Device_Address 0003                _PROTOCOL_Read_Device_Address 0A0B  
                               __pdataBANK1 00ED                                    ??_printf 0033  
                   i1DATAEE_WriteByte@bData 0070                 __end_of_EUSART_Transmit_ISR 0B31  
                          ?_I2C2_MasterRead 0028                                 __pbssCOMMON 007A  
                          ?_I2C2_Initialize 0070                                   ___latbits 0002  
                             __pcstackBANK0 0020                               __pcstackBANK2 0162  
          I2C1_StatusCallback@i2c_bus_state 0077                        _PROTOCOL_Inv_Handler 00B2  
                              _isdigit$1477 0021                               ??_inv_handler 0047  
                      __end_of_PROTOCOL_INV 0A1C                        __end_of_PROTOCOL_EXT 0003  
                      __end_of_PROTOCOL_SAV 0A59                        __end_of_PROTOCOL_SET 0A47  
                      __end_of_PROTOCOL_STA 0A24              __size_of_i2c2_read_no_reg_addr 002C  
                      __end_of_PROTOCOL_RST 0A63                        __end_of_PROTOCOL_STP 0A11  
             __end_of_i2c2_read_no_reg_addr 0D43                               _i2c2_tr_queue 00DE  
                __end_of_EUSART_Receive_ISR 0B16             PROTOCOL_Initialize@stop_handler 0025  
                __size_of_EUSART_Initialize 001A                         __end_of_EUSART_Read 0BA7  
                    __size_of_PROTOCOL_Loop 018E                                   __pnvBANK1 00E7  
                                 __pnvBANK2 0160       __end_of_PROTOCOL_Write_Device_Address 0A9E  
    __size_of_PROTOCOL_Write_Device_Address 0010               _PROTOCOL_Write_Device_Address 0A8E  
                          ___lwdiv@dividend 0023                      _PIN_MANAGER_Initialize 0B6A  
                      EUSART_Read@readValue 0022                                    ?___aldiv 002D  
          __end_of_PROTOCOL_I2C_Send_int8_t 0F7E                                    ?___lwdiv 0021  
                                  ?___lwmod 0029                                _eusartRxHead 0069  
                              _eusartTxHead 007C                                _eusartRxTail 0068  
                              _eusartTxTail 007B                                    _I2C1_ISR 0C51  
                                  _I2C2_ISR 03E4               ?_PROTOCOL_Read_Device_Address 0070  
              ??_INTERRUPT_InterruptManager 0020                   PROTOCOL_Send_int16_t@pbuf 00E1  
                                 __pswtext1 0800                                   __pswtext2 0818  
                   _eusartTxBufferRemaining 007A                                    ?_isdigit 0070  
                          ___lwdiv@quotient 0027                    __size_of_DATAEE_ReadByte 000D  
                                  ?_strncmp 0021                              __size_of_putch 0006  
                            _eusartRxBuffer 00A0             __end_of_I2C2_MasterReadTRBBuild 0CC7  
                           ___aldiv@divisor 002D                           ??_TMR0_Initialize 0021  
                            _eusartTxBuffer 00A8                             ___aldiv@counter 0036  
                            ___wmul@product 0025                                    _LATCbits 010E  
                      _PROTOCOL_Set_Handler 00E7            i2c2_read_no_reg_addr@read_status 0036  
                                 clear_ram0 0A33                         __end_of_inv_handler 06C6  
                                  _PIE1bits 0091                                    _PIE4bits 0094  
                     PROTOCOL_I2C_SEN@pdata 0072                    PROTOCOL_I2C_Set_TLV@type 0025  
       __size_of_INTERRUPT_InterruptManager 0044                                    _PIR1bits 0011  
                                  _PIR4bits 0014                                    _SSP1CON1 0215  
                                  _SSP1CON2 0216                                    _SSP1CON3 0217  
              PROTOCOL_Initialize@device_id 0022                                    _SSP2CON1 021D  
                                  _SSP2CON3 021F                                    _SSP1STAT 0214  
                                  _SSP2STAT 021C                              _readbuf_status 00BB  
                     _PROTOCOL_Stop_Handler 00E9                 __end_of_PROTOCOL_Initialize 0F20  
             I2C2_MasterTRBInsert@ptrb_list 0021                     __size_ofi1_PROTOCOL_EXT 0001  
                   __size_ofi1_PROTOCOL_SAV 0009                     __size_ofi1_PROTOCOL_SET 0007  
                   __size_ofi1_PROTOCOL_STA 0004                     __size_ofi1_PROTOCOL_STP 0003  
                         ___wmul@multiplier 0021                __end_of_PROTOCOL_I2C_Set_TLV 0C0A  
                          _I2C2_MasterWrite 0CEF                               _PROTOCOL_Loop 0256  
                                printf@flag 003F                                  printf@prec 0037  
                     DATAEE_WriteByte@bData 0021                     I2C1_StatusCallback@next 006C  
                               _EUSART_Read 0B88                           ___lmul@multiplier 0021  
              __end_of_I2C2_MasterTRBInsert 0ECF                 PROTOCOL_I2C_Set_TLV@pbuffer 0022  
                         ?_DATAEE_WriteByte 0021    __end_of_PROTOCOL_Backplane_Slave_Enabled 0A18  
 __size_of_PROTOCOL_Backplane_Slave_Enabled 0004          ??_PROTOCOL_Backplane_Slave_Enabled 0070  
         ?_PROTOCOL_Backplane_Slave_Enabled 0070            _PROTOCOL_Backplane_Slave_Enabled 0A14  
                        ??_DATAEE_WriteByte 0022                               _slave_address 00C3  
                                _EECON1bits 0195                          PROTOCOL_SET@value_ 0022  
                 __size_of_PROTOCOL_I2C_GET 0003                   __size_of_PROTOCOL_I2C_SEN 0043  
                 __size_of_PROTOCOL_I2C_WHO 0003              I2C2_MasterWriteTRBBuild@length 0022  
                   ??_OSCILLATOR_Initialize 0021              ?_PROTOCOL_Write_Device_Address 0070  
                          __size_of___aldiv 0082                            __size_of___lwdiv 0035  
                          __size_of___lwmod 002D                     ??_I2C2_FunctionComplete 0070  
                            ?_PROTOCOL_Loop 0070                    _PROTOCOL_I2C_Send_int8_t 0F20  
                     __size_of_PROTOCOL_INV 0004                       __size_of_PROTOCOL_EXT 0001  
                     __size_of_PROTOCOL_SAV 0009                       __size_of_PROTOCOL_SET 0007  
                     __size_of_PROTOCOL_STA 0004                       __size_of_PROTOCOL_RST 000A  
                     __size_of_PROTOCOL_STP 0003              ??_PROTOCOL_Read_Device_Address 0021  
                          __size_of_isdigit 000F                             ___lwdiv@divisor 0021  
              __size_of_I2C1_StatusCallback 00CB                             ___lwdiv@counter 0026  
                                  __ptext10 0CC7                                    __ptext11 0E88  
                                  __ptext20 0DCE                                    __ptext12 0C9F  
                                  __ptext21 0BE8                                    __ptext13 0D9E  
                                  __ptext30 0A50                                    __ptext22 078B  
                                  __ptext14 0F7E                                    __ptext31 0C0A  
                                  __ptext23 0A70                                    __ptext15 0F20  
                                  __ptext40 0A0B                                    __ptext32 0002  
                                  __ptext24 0B31                                    __ptext16 0081  
                                  __ptext41 0AE1                                    __ptext33 0B88  
                                  __ptext25 0A24                                    __ptext17 0A2D  
                                  __ptext50 0A1C                                    __ptext34 0ECF  
                                  __ptext26 0A8E                                    __ptext18 0C2D  
                                  __ptext51 0A39                                    __ptext43 03E4  
                                  __ptext35 0A63                                    __ptext27 0A0E  
                                  __ptext19 0D43                                    __ptext60 09FF  
                                  __ptext52 0A47                                    __ptext44 0AC8  
                                  __ptext36 0B6A                                    __ptext28 0A20  
                                  __ptext61 0A14                                    __ptext53 0B4D  
                                  __ptext45 0A9E                                    __ptext37 0A28  
                                  __ptext29 0A40                                    __ptext62 0B16  
                                  __ptext54 09FD                                    __ptext46 09FE  
                                  __ptext38 0AB0                                    __ptext63 0AFB  
                                  __ptext55 0A05                                    __ptext47 0C51  
                                  __ptext39 0BC7                                    __ptext56 0A59  
                                  __ptext48 0533                                    __ptext57 0A18  
                                  __ptext49 0A08                                    __ptext58 0A02  
                                  __ptext59 0E45                                _SSP1CON1bits 0215  
                              _SSP1CON2bits 0216                                    _float100 00B0  
               __size_ofi1_DATAEE_WriteByte 001D                                 _inv_handler 05FE  
                              _SSP2CON1bits 021D                                _SSP2CON2bits 021E  
               DATAEE_WriteByte@GIEBitValue 0023                            __size_of_strncmp 0042  
                             __size_of_atoi 0071                               __size_of_main 002E  
                                strncmp@len 0024                           ??_DATAEE_ReadByte 0021  
                   I2C2_MasterWrite@address 0029                     _BACKPLANE_SLAVE_ADDRESS 00EE  
                __end_of_PROTOCOL_Read_Lock 0A08                                    int$flags 007E  
                                  atoi@sign 002B             PROTOCOL_I2C_Send_int8_t@pbuffer 0043  
                              _PROTOCOL_INV 0A18                                _PROTOCOL_EXT 0002  
                              _PROTOCOL_SAV 0A50                                _PROTOCOL_SET 0A40  
                              _PROTOCOL_STA 0A20                                _PROTOCOL_RST 0A59  
                              _PROTOCOL_STP 0A0E          __end_of_INTERRUPT_InterruptManager 0048  
                _INTERRUPT_InterruptManager 0004                                   printf@len 003D  
                                 printf@val 003B                     I2C2_MasterWrite@trBlock 00D7  
                              _SSP1STATbits 0214                    i2c2_read_no_reg_addr@len 0032  
             __size_of_I2C2_BusCollisionISR 0001            __size_of_I2C2_MasterReadTRBBuild 0028  
                  ?_TMR0_HasOverflowOccured 0070                          _I2C_slaveWriteData 007D  
                                _INTCONbits 000B                                    isdigit@c 0022  
                   __size_of_WDT_Initialize 0004           __size_of_I2C2_MasterWriteTRBBuild 0020  
                 ?_I2C2_MasterWriteTRBBuild 0021                                    intlevel1 0000  
                          ___lwmod@dividend 002B                         I2C2_ISR@i2c_address 006D  
                   ?_PIN_MANAGER_Initialize 0070                           __CFG_CLKOUTEN$OFF 0000  
                      _PROTOCOL_I2C_Set_TLV 0BE8                                   strncmp@s1 0021  
                                 strncmp@s2 0023                     _backplane_slave_enabled 00BA  
            PROTOCOL_I2C_Send_int8_t@length 0046                                  _RESOLUTION 06D0  
                    I2C2_MasterWrite@length 0028                                    printf@ap 003A  
                                  printf@cp 0038                          _EUSART_Receive_ISR 0AFB  
                           ??_PROTOCOL_Loop 005D                        _I2C2_MasterTRBInsert 0E88  
                  __size_of_I2C1_Initialize 0021                              i1_PROTOCOL_EXT 09FD  
                            i1_PROTOCOL_SAV 0A47                              i1_PROTOCOL_SET 0A39  
                            i1_PROTOCOL_STA 0A1C                              i1_PROTOCOL_STP 0A08  
                                _OPTION_REG 0095                         ?_EUSART_Receive_ISR 0070  
                           ___lwmod@divisor 0029                             _TMR0_Initialize 0A7F  
                           ___lwmod@counter 002E                                ___aldiv@sign 0037  
               PROTOCOL_Loop@device_address 0163                        PROTOCOL_EXT@char_buf 0021  
                        EUSART_Write@txData 0022                __size_of_EUSART_Transmit_ISR 001B  
            __end_of_PIN_MANAGER_Initialize 0B88                    __size_of_I2C2_MasterRead 0028  
                  __size_of_I2C2_Initialize 0018                       _i2c2_read_no_reg_addr 0D17  
                        __size_of_I2C2_Stop 0019                        ??_EUSART_Receive_ISR 0070  
                     ?_PROTOCOL_I2C_Set_TLV 0021                    __end_of_I2C2_MasterWrite 0D17  
                          _PROTOCOL_I2C_GET 09FF                            _PROTOCOL_I2C_SEN 0E45  
                          _PROTOCOL_I2C_WHO 0A02  
