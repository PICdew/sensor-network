

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Thu Sep 21 20:07:41 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F1829
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	idataBANK1,global,class=CODE,delta=2
     7                           	psect	stringtext,global,class=STRCODE,delta=2
     8                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text4,local,class=CODE,merge=1,delta=2,group=4
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2,group=4
    29                           	psect	text8,local,class=CODE,merge=1,delta=2,group=4
    30                           	psect	text9,local,class=CODE,merge=1,delta=2,group=4
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2,group=4
    40                           	psect	text19,local,class=CODE,merge=1,delta=2,group=4
    41                           	psect	text20,local,class=CODE,merge=1,delta=2,group=4
    42                           	psect	text21,local,class=CODE,merge=1,delta=2,group=4
    43                           	psect	text22,local,class=CODE,merge=1,delta=2,group=4
    44                           	psect	text23,local,class=CODE,merge=1,delta=2,group=4
    45                           	psect	text24,local,class=CODE,merge=1,delta=2,group=4
    46                           	psect	text25,local,class=CODE,merge=1,delta=2,group=4
    47                           	psect	text26,local,class=CODE,merge=1,delta=2,group=4
    48                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    49                           	psect	text28,local,class=CODE,merge=1,delta=2,group=4
    50                           	psect	text29,local,class=CODE,merge=1,delta=2,group=4
    51                           	psect	text30,local,class=CODE,merge=1,delta=2,group=4
    52                           	psect	text31,local,class=CODE,merge=1,delta=2
    53                           	psect	text32,local,class=CODE,merge=1,delta=2,group=1
    54                           	psect	text33,local,class=CODE,merge=1,delta=2,group=1
    55                           	psect	text34,local,class=CODE,merge=1,delta=2,group=1
    56                           	psect	text35,local,class=CODE,merge=1,delta=2,group=1
    57                           	psect	text36,local,class=CODE,merge=1,delta=2,group=1
    58                           	psect	text37,local,class=CODE,merge=1,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2,group=1
    60                           	psect	text39,local,class=CODE,merge=1,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,delta=2,group=1
    62                           	psect	text41,local,class=CODE,merge=1,delta=2
    63                           	psect	text42,local,class=CODE,merge=1,delta=2
    64                           	psect	text43,local,class=CODE,merge=1,delta=2
    65                           	psect	text44,local,class=CODE,merge=1,delta=2
    66                           	psect	text45,local,class=CODE,merge=1,delta=2,group=1
    67                           	psect	text46,local,class=CODE,merge=1,delta=2
    68                           	psect	text47,local,class=CODE,merge=1,delta=2
    69                           	psect	intentry,global,class=CODE,delta=2
    70                           	psect	text49,local,class=CODE,merge=1,delta=2
    71                           	psect	text50,local,class=CODE,merge=1,delta=2
    72                           	psect	swtext1,local,class=CONST,delta=2
    73                           	psect	text51,local,class=CODE,merge=1,delta=2
    74                           	psect	text52,local,class=CODE,merge=1,delta=2
    75                           	psect	text53,local,class=CODE,merge=1,delta=2
    76                           	psect	text54,local,class=CODE,merge=1,delta=2
    77                           	psect	text55,local,class=CODE,merge=1,delta=2
    78                           	psect	text56,local,class=CODE,merge=1,delta=2
    79                           	psect	text57,local,class=CODE,merge=1,delta=2,group=1
    80                           	psect	text58,local,class=CODE,merge=1,delta=2,group=1
    81                           	psect	text59,local,class=CODE,merge=1,delta=2,group=1
    82                           	psect	text60,local,class=CODE,merge=1,delta=2,group=1
    83                           	psect	text61,local,class=CODE,merge=1,delta=2,group=1
    84                           	psect	text62,local,class=CODE,merge=1,delta=2,group=1
    85                           	psect	text63,local,class=CODE,merge=1,delta=2,group=1
    86                           	psect	text64,local,class=CODE,merge=1,delta=2
    87                           	psect	text65,local,class=CODE,merge=1,delta=2
    88                           	dabs	1,0x7E,2
    89  0000                     
    90                           ; Version 1.41 (B)
    91                           ; Generated 21/02/2017 GMT
    92                           ; 
    93                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    94                           ; All rights reserved.
    95                           ; 
    96                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    97                           ; 
    98                           ; Redistribution and use in source and binary forms, with or without modification, are
    99                           ; permitted provided that the following conditions are met:
   100                           ; 
   101                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   102                           ;        conditions and the following disclaimer.
   103                           ; 
   104                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   105                           ;        of conditions and the following disclaimer in the documentation and/or other
   106                           ;        materials provided with the distribution.
   107                           ; 
   108                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   109                           ;        software without specific prior written permission.
   110                           ; 
   111                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   112                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   113                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   114                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   115                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   116                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   117                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   118                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   119                           ; 
   120                           ; 
   121                           ; Code-generator required, PIC16F1829 Definitions
   122                           ; 
   123                           ; SFR Addresses
   124  0000                     	;# 
   125  0001                     	;# 
   126  0002                     	;# 
   127  0003                     	;# 
   128  0004                     	;# 
   129  0005                     	;# 
   130  0006                     	;# 
   131  0007                     	;# 
   132  0008                     	;# 
   133  0009                     	;# 
   134  000A                     	;# 
   135  000B                     	;# 
   136  000C                     	;# 
   137  000D                     	;# 
   138  000E                     	;# 
   139  0011                     	;# 
   140  0012                     	;# 
   141  0013                     	;# 
   142  0014                     	;# 
   143  0015                     	;# 
   144  0016                     	;# 
   145  0016                     	;# 
   146  0017                     	;# 
   147  0018                     	;# 
   148  0019                     	;# 
   149  001A                     	;# 
   150  001B                     	;# 
   151  001C                     	;# 
   152  001E                     	;# 
   153  001F                     	;# 
   154  008C                     	;# 
   155  008D                     	;# 
   156  008E                     	;# 
   157  0091                     	;# 
   158  0092                     	;# 
   159  0093                     	;# 
   160  0094                     	;# 
   161  0095                     	;# 
   162  0096                     	;# 
   163  0097                     	;# 
   164  0098                     	;# 
   165  0099                     	;# 
   166  009A                     	;# 
   167  009B                     	;# 
   168  009B                     	;# 
   169  009C                     	;# 
   170  009D                     	;# 
   171  009E                     	;# 
   172  010C                     	;# 
   173  010D                     	;# 
   174  010E                     	;# 
   175  0111                     	;# 
   176  0112                     	;# 
   177  0113                     	;# 
   178  0114                     	;# 
   179  0115                     	;# 
   180  0116                     	;# 
   181  0117                     	;# 
   182  0118                     	;# 
   183  0119                     	;# 
   184  011A                     	;# 
   185  011B                     	;# 
   186  011D                     	;# 
   187  011E                     	;# 
   188  018C                     	;# 
   189  018D                     	;# 
   190  018E                     	;# 
   191  0191                     	;# 
   192  0191                     	;# 
   193  0192                     	;# 
   194  0193                     	;# 
   195  0193                     	;# 
   196  0193                     	;# 
   197  0194                     	;# 
   198  0195                     	;# 
   199  0196                     	;# 
   200  0199                     	;# 
   201  019A                     	;# 
   202  019B                     	;# 
   203  019B                     	;# 
   204  019C                     	;# 
   205  019D                     	;# 
   206  019E                     	;# 
   207  019F                     	;# 
   208  020C                     	;# 
   209  020D                     	;# 
   210  020E                     	;# 
   211  0211                     	;# 
   212  0211                     	;# 
   213  0212                     	;# 
   214  0212                     	;# 
   215  0213                     	;# 
   216  0213                     	;# 
   217  0214                     	;# 
   218  0214                     	;# 
   219  0215                     	;# 
   220  0215                     	;# 
   221  0215                     	;# 
   222  0216                     	;# 
   223  0216                     	;# 
   224  0217                     	;# 
   225  0217                     	;# 
   226  0219                     	;# 
   227  021A                     	;# 
   228  021B                     	;# 
   229  021C                     	;# 
   230  021D                     	;# 
   231  021E                     	;# 
   232  021F                     	;# 
   233  0291                     	;# 
   234  0291                     	;# 
   235  0292                     	;# 
   236  0293                     	;# 
   237  0294                     	;# 
   238  0295                     	;# 
   239  0295                     	;# 
   240  0296                     	;# 
   241  0298                     	;# 
   242  0298                     	;# 
   243  0299                     	;# 
   244  029A                     	;# 
   245  029B                     	;# 
   246  029C                     	;# 
   247  029D                     	;# 
   248  029E                     	;# 
   249  0311                     	;# 
   250  0311                     	;# 
   251  0312                     	;# 
   252  0313                     	;# 
   253  0318                     	;# 
   254  0318                     	;# 
   255  0319                     	;# 
   256  031A                     	;# 
   257  038C                     	;# 
   258  038D                     	;# 
   259  038E                     	;# 
   260  0391                     	;# 
   261  0392                     	;# 
   262  0393                     	;# 
   263  0394                     	;# 
   264  0395                     	;# 
   265  0396                     	;# 
   266  039A                     	;# 
   267  039C                     	;# 
   268  039D                     	;# 
   269  039E                     	;# 
   270  039F                     	;# 
   271  0415                     	;# 
   272  0416                     	;# 
   273  0417                     	;# 
   274  041C                     	;# 
   275  041D                     	;# 
   276  041E                     	;# 
   277  0FE4                     	;# 
   278  0FE5                     	;# 
   279  0FE6                     	;# 
   280  0FE7                     	;# 
   281  0FE8                     	;# 
   282  0FE9                     	;# 
   283  0FEA                     	;# 
   284  0FEB                     	;# 
   285  0FED                     	;# 
   286  0FEE                     	;# 
   287  0FEF                     	;# 
   288  0000                     	;# 
   289  0001                     	;# 
   290  0002                     	;# 
   291  0003                     	;# 
   292  0004                     	;# 
   293  0005                     	;# 
   294  0006                     	;# 
   295  0007                     	;# 
   296  0008                     	;# 
   297  0009                     	;# 
   298  000A                     	;# 
   299  000B                     	;# 
   300  000C                     	;# 
   301  000D                     	;# 
   302  000E                     	;# 
   303  0011                     	;# 
   304  0012                     	;# 
   305  0013                     	;# 
   306  0014                     	;# 
   307  0015                     	;# 
   308  0016                     	;# 
   309  0016                     	;# 
   310  0017                     	;# 
   311  0018                     	;# 
   312  0019                     	;# 
   313  001A                     	;# 
   314  001B                     	;# 
   315  001C                     	;# 
   316  001E                     	;# 
   317  001F                     	;# 
   318  008C                     	;# 
   319  008D                     	;# 
   320  008E                     	;# 
   321  0091                     	;# 
   322  0092                     	;# 
   323  0093                     	;# 
   324  0094                     	;# 
   325  0095                     	;# 
   326  0096                     	;# 
   327  0097                     	;# 
   328  0098                     	;# 
   329  0099                     	;# 
   330  009A                     	;# 
   331  009B                     	;# 
   332  009B                     	;# 
   333  009C                     	;# 
   334  009D                     	;# 
   335  009E                     	;# 
   336  010C                     	;# 
   337  010D                     	;# 
   338  010E                     	;# 
   339  0111                     	;# 
   340  0112                     	;# 
   341  0113                     	;# 
   342  0114                     	;# 
   343  0115                     	;# 
   344  0116                     	;# 
   345  0117                     	;# 
   346  0118                     	;# 
   347  0119                     	;# 
   348  011A                     	;# 
   349  011B                     	;# 
   350  011D                     	;# 
   351  011E                     	;# 
   352  018C                     	;# 
   353  018D                     	;# 
   354  018E                     	;# 
   355  0191                     	;# 
   356  0191                     	;# 
   357  0192                     	;# 
   358  0193                     	;# 
   359  0193                     	;# 
   360  0193                     	;# 
   361  0194                     	;# 
   362  0195                     	;# 
   363  0196                     	;# 
   364  0199                     	;# 
   365  019A                     	;# 
   366  019B                     	;# 
   367  019B                     	;# 
   368  019C                     	;# 
   369  019D                     	;# 
   370  019E                     	;# 
   371  019F                     	;# 
   372  020C                     	;# 
   373  020D                     	;# 
   374  020E                     	;# 
   375  0211                     	;# 
   376  0211                     	;# 
   377  0212                     	;# 
   378  0212                     	;# 
   379  0213                     	;# 
   380  0213                     	;# 
   381  0214                     	;# 
   382  0214                     	;# 
   383  0215                     	;# 
   384  0215                     	;# 
   385  0215                     	;# 
   386  0216                     	;# 
   387  0216                     	;# 
   388  0217                     	;# 
   389  0217                     	;# 
   390  0219                     	;# 
   391  021A                     	;# 
   392  021B                     	;# 
   393  021C                     	;# 
   394  021D                     	;# 
   395  021E                     	;# 
   396  021F                     	;# 
   397  0291                     	;# 
   398  0291                     	;# 
   399  0292                     	;# 
   400  0293                     	;# 
   401  0294                     	;# 
   402  0295                     	;# 
   403  0295                     	;# 
   404  0296                     	;# 
   405  0298                     	;# 
   406  0298                     	;# 
   407  0299                     	;# 
   408  029A                     	;# 
   409  029B                     	;# 
   410  029C                     	;# 
   411  029D                     	;# 
   412  029E                     	;# 
   413  0311                     	;# 
   414  0311                     	;# 
   415  0312                     	;# 
   416  0313                     	;# 
   417  0318                     	;# 
   418  0318                     	;# 
   419  0319                     	;# 
   420  031A                     	;# 
   421  038C                     	;# 
   422  038D                     	;# 
   423  038E                     	;# 
   424  0391                     	;# 
   425  0392                     	;# 
   426  0393                     	;# 
   427  0394                     	;# 
   428  0395                     	;# 
   429  0396                     	;# 
   430  039A                     	;# 
   431  039C                     	;# 
   432  039D                     	;# 
   433  039E                     	;# 
   434  039F                     	;# 
   435  0415                     	;# 
   436  0416                     	;# 
   437  0417                     	;# 
   438  041C                     	;# 
   439  041D                     	;# 
   440  041E                     	;# 
   441  0FE4                     	;# 
   442  0FE5                     	;# 
   443  0FE6                     	;# 
   444  0FE7                     	;# 
   445  0FE8                     	;# 
   446  0FE9                     	;# 
   447  0FEA                     	;# 
   448  0FEB                     	;# 
   449  0FED                     	;# 
   450  0FEE                     	;# 
   451  0FEF                     	;# 
   452  0000                     	;# 
   453  0001                     	;# 
   454  0002                     	;# 
   455  0003                     	;# 
   456  0004                     	;# 
   457  0005                     	;# 
   458  0006                     	;# 
   459  0007                     	;# 
   460  0008                     	;# 
   461  0009                     	;# 
   462  000A                     	;# 
   463  000B                     	;# 
   464  000C                     	;# 
   465  000D                     	;# 
   466  000E                     	;# 
   467  0011                     	;# 
   468  0012                     	;# 
   469  0013                     	;# 
   470  0014                     	;# 
   471  0015                     	;# 
   472  0016                     	;# 
   473  0016                     	;# 
   474  0017                     	;# 
   475  0018                     	;# 
   476  0019                     	;# 
   477  001A                     	;# 
   478  001B                     	;# 
   479  001C                     	;# 
   480  001E                     	;# 
   481  001F                     	;# 
   482  008C                     	;# 
   483  008D                     	;# 
   484  008E                     	;# 
   485  0091                     	;# 
   486  0092                     	;# 
   487  0093                     	;# 
   488  0094                     	;# 
   489  0095                     	;# 
   490  0096                     	;# 
   491  0097                     	;# 
   492  0098                     	;# 
   493  0099                     	;# 
   494  009A                     	;# 
   495  009B                     	;# 
   496  009B                     	;# 
   497  009C                     	;# 
   498  009D                     	;# 
   499  009E                     	;# 
   500  010C                     	;# 
   501  010D                     	;# 
   502  010E                     	;# 
   503  0111                     	;# 
   504  0112                     	;# 
   505  0113                     	;# 
   506  0114                     	;# 
   507  0115                     	;# 
   508  0116                     	;# 
   509  0117                     	;# 
   510  0118                     	;# 
   511  0119                     	;# 
   512  011A                     	;# 
   513  011B                     	;# 
   514  011D                     	;# 
   515  011E                     	;# 
   516  018C                     	;# 
   517  018D                     	;# 
   518  018E                     	;# 
   519  0191                     	;# 
   520  0191                     	;# 
   521  0192                     	;# 
   522  0193                     	;# 
   523  0193                     	;# 
   524  0193                     	;# 
   525  0194                     	;# 
   526  0195                     	;# 
   527  0196                     	;# 
   528  0199                     	;# 
   529  019A                     	;# 
   530  019B                     	;# 
   531  019B                     	;# 
   532  019C                     	;# 
   533  019D                     	;# 
   534  019E                     	;# 
   535  019F                     	;# 
   536  020C                     	;# 
   537  020D                     	;# 
   538  020E                     	;# 
   539  0211                     	;# 
   540  0211                     	;# 
   541  0212                     	;# 
   542  0212                     	;# 
   543  0213                     	;# 
   544  0213                     	;# 
   545  0214                     	;# 
   546  0214                     	;# 
   547  0215                     	;# 
   548  0215                     	;# 
   549  0215                     	;# 
   550  0216                     	;# 
   551  0216                     	;# 
   552  0217                     	;# 
   553  0217                     	;# 
   554  0219                     	;# 
   555  021A                     	;# 
   556  021B                     	;# 
   557  021C                     	;# 
   558  021D                     	;# 
   559  021E                     	;# 
   560  021F                     	;# 
   561  0291                     	;# 
   562  0291                     	;# 
   563  0292                     	;# 
   564  0293                     	;# 
   565  0294                     	;# 
   566  0295                     	;# 
   567  0295                     	;# 
   568  0296                     	;# 
   569  0298                     	;# 
   570  0298                     	;# 
   571  0299                     	;# 
   572  029A                     	;# 
   573  029B                     	;# 
   574  029C                     	;# 
   575  029D                     	;# 
   576  029E                     	;# 
   577  0311                     	;# 
   578  0311                     	;# 
   579  0312                     	;# 
   580  0313                     	;# 
   581  0318                     	;# 
   582  0318                     	;# 
   583  0319                     	;# 
   584  031A                     	;# 
   585  038C                     	;# 
   586  038D                     	;# 
   587  038E                     	;# 
   588  0391                     	;# 
   589  0392                     	;# 
   590  0393                     	;# 
   591  0394                     	;# 
   592  0395                     	;# 
   593  0396                     	;# 
   594  039A                     	;# 
   595  039C                     	;# 
   596  039D                     	;# 
   597  039E                     	;# 
   598  039F                     	;# 
   599  0415                     	;# 
   600  0416                     	;# 
   601  0417                     	;# 
   602  041C                     	;# 
   603  041D                     	;# 
   604  041E                     	;# 
   605  0FE4                     	;# 
   606  0FE5                     	;# 
   607  0FE6                     	;# 
   608  0FE7                     	;# 
   609  0FE8                     	;# 
   610  0FE9                     	;# 
   611  0FEA                     	;# 
   612  0FEB                     	;# 
   613  0FED                     	;# 
   614  0FEE                     	;# 
   615  0FEF                     	;# 
   616  0000                     	;# 
   617  0001                     	;# 
   618  0002                     	;# 
   619  0003                     	;# 
   620  0004                     	;# 
   621  0005                     	;# 
   622  0006                     	;# 
   623  0007                     	;# 
   624  0008                     	;# 
   625  0009                     	;# 
   626  000A                     	;# 
   627  000B                     	;# 
   628  000C                     	;# 
   629  000D                     	;# 
   630  000E                     	;# 
   631  0011                     	;# 
   632  0012                     	;# 
   633  0013                     	;# 
   634  0014                     	;# 
   635  0015                     	;# 
   636  0016                     	;# 
   637  0016                     	;# 
   638  0017                     	;# 
   639  0018                     	;# 
   640  0019                     	;# 
   641  001A                     	;# 
   642  001B                     	;# 
   643  001C                     	;# 
   644  001E                     	;# 
   645  001F                     	;# 
   646  008C                     	;# 
   647  008D                     	;# 
   648  008E                     	;# 
   649  0091                     	;# 
   650  0092                     	;# 
   651  0093                     	;# 
   652  0094                     	;# 
   653  0095                     	;# 
   654  0096                     	;# 
   655  0097                     	;# 
   656  0098                     	;# 
   657  0099                     	;# 
   658  009A                     	;# 
   659  009B                     	;# 
   660  009B                     	;# 
   661  009C                     	;# 
   662  009D                     	;# 
   663  009E                     	;# 
   664  010C                     	;# 
   665  010D                     	;# 
   666  010E                     	;# 
   667  0111                     	;# 
   668  0112                     	;# 
   669  0113                     	;# 
   670  0114                     	;# 
   671  0115                     	;# 
   672  0116                     	;# 
   673  0117                     	;# 
   674  0118                     	;# 
   675  0119                     	;# 
   676  011A                     	;# 
   677  011B                     	;# 
   678  011D                     	;# 
   679  011E                     	;# 
   680  018C                     	;# 
   681  018D                     	;# 
   682  018E                     	;# 
   683  0191                     	;# 
   684  0191                     	;# 
   685  0192                     	;# 
   686  0193                     	;# 
   687  0193                     	;# 
   688  0193                     	;# 
   689  0194                     	;# 
   690  0195                     	;# 
   691  0196                     	;# 
   692  0199                     	;# 
   693  019A                     	;# 
   694  019B                     	;# 
   695  019B                     	;# 
   696  019C                     	;# 
   697  019D                     	;# 
   698  019E                     	;# 
   699  019F                     	;# 
   700  020C                     	;# 
   701  020D                     	;# 
   702  020E                     	;# 
   703  0211                     	;# 
   704  0211                     	;# 
   705  0212                     	;# 
   706  0212                     	;# 
   707  0213                     	;# 
   708  0213                     	;# 
   709  0214                     	;# 
   710  0214                     	;# 
   711  0215                     	;# 
   712  0215                     	;# 
   713  0215                     	;# 
   714  0216                     	;# 
   715  0216                     	;# 
   716  0217                     	;# 
   717  0217                     	;# 
   718  0219                     	;# 
   719  021A                     	;# 
   720  021B                     	;# 
   721  021C                     	;# 
   722  021D                     	;# 
   723  021E                     	;# 
   724  021F                     	;# 
   725  0291                     	;# 
   726  0291                     	;# 
   727  0292                     	;# 
   728  0293                     	;# 
   729  0294                     	;# 
   730  0295                     	;# 
   731  0295                     	;# 
   732  0296                     	;# 
   733  0298                     	;# 
   734  0298                     	;# 
   735  0299                     	;# 
   736  029A                     	;# 
   737  029B                     	;# 
   738  029C                     	;# 
   739  029D                     	;# 
   740  029E                     	;# 
   741  0311                     	;# 
   742  0311                     	;# 
   743  0312                     	;# 
   744  0313                     	;# 
   745  0318                     	;# 
   746  0318                     	;# 
   747  0319                     	;# 
   748  031A                     	;# 
   749  038C                     	;# 
   750  038D                     	;# 
   751  038E                     	;# 
   752  0391                     	;# 
   753  0392                     	;# 
   754  0393                     	;# 
   755  0394                     	;# 
   756  0395                     	;# 
   757  0396                     	;# 
   758  039A                     	;# 
   759  039C                     	;# 
   760  039D                     	;# 
   761  039E                     	;# 
   762  039F                     	;# 
   763  0415                     	;# 
   764  0416                     	;# 
   765  0417                     	;# 
   766  041C                     	;# 
   767  041D                     	;# 
   768  041E                     	;# 
   769  0FE4                     	;# 
   770  0FE5                     	;# 
   771  0FE6                     	;# 
   772  0FE7                     	;# 
   773  0FE8                     	;# 
   774  0FE9                     	;# 
   775  0FEA                     	;# 
   776  0FEB                     	;# 
   777  0FED                     	;# 
   778  0FEE                     	;# 
   779  0FEF                     	;# 
   780  0000                     	;# 
   781  0001                     	;# 
   782  0002                     	;# 
   783  0003                     	;# 
   784  0004                     	;# 
   785  0005                     	;# 
   786  0006                     	;# 
   787  0007                     	;# 
   788  0008                     	;# 
   789  0009                     	;# 
   790  000A                     	;# 
   791  000B                     	;# 
   792  000C                     	;# 
   793  000D                     	;# 
   794  000E                     	;# 
   795  0011                     	;# 
   796  0012                     	;# 
   797  0013                     	;# 
   798  0014                     	;# 
   799  0015                     	;# 
   800  0016                     	;# 
   801  0016                     	;# 
   802  0017                     	;# 
   803  0018                     	;# 
   804  0019                     	;# 
   805  001A                     	;# 
   806  001B                     	;# 
   807  001C                     	;# 
   808  001E                     	;# 
   809  001F                     	;# 
   810  008C                     	;# 
   811  008D                     	;# 
   812  008E                     	;# 
   813  0091                     	;# 
   814  0092                     	;# 
   815  0093                     	;# 
   816  0094                     	;# 
   817  0095                     	;# 
   818  0096                     	;# 
   819  0097                     	;# 
   820  0098                     	;# 
   821  0099                     	;# 
   822  009A                     	;# 
   823  009B                     	;# 
   824  009B                     	;# 
   825  009C                     	;# 
   826  009D                     	;# 
   827  009E                     	;# 
   828  010C                     	;# 
   829  010D                     	;# 
   830  010E                     	;# 
   831  0111                     	;# 
   832  0112                     	;# 
   833  0113                     	;# 
   834  0114                     	;# 
   835  0115                     	;# 
   836  0116                     	;# 
   837  0117                     	;# 
   838  0118                     	;# 
   839  0119                     	;# 
   840  011A                     	;# 
   841  011B                     	;# 
   842  011D                     	;# 
   843  011E                     	;# 
   844  018C                     	;# 
   845  018D                     	;# 
   846  018E                     	;# 
   847  0191                     	;# 
   848  0191                     	;# 
   849  0192                     	;# 
   850  0193                     	;# 
   851  0193                     	;# 
   852  0193                     	;# 
   853  0194                     	;# 
   854  0195                     	;# 
   855  0196                     	;# 
   856  0199                     	;# 
   857  019A                     	;# 
   858  019B                     	;# 
   859  019B                     	;# 
   860  019C                     	;# 
   861  019D                     	;# 
   862  019E                     	;# 
   863  019F                     	;# 
   864  020C                     	;# 
   865  020D                     	;# 
   866  020E                     	;# 
   867  0211                     	;# 
   868  0211                     	;# 
   869  0212                     	;# 
   870  0212                     	;# 
   871  0213                     	;# 
   872  0213                     	;# 
   873  0214                     	;# 
   874  0214                     	;# 
   875  0215                     	;# 
   876  0215                     	;# 
   877  0215                     	;# 
   878  0216                     	;# 
   879  0216                     	;# 
   880  0217                     	;# 
   881  0217                     	;# 
   882  0219                     	;# 
   883  021A                     	;# 
   884  021B                     	;# 
   885  021C                     	;# 
   886  021D                     	;# 
   887  021E                     	;# 
   888  021F                     	;# 
   889  0291                     	;# 
   890  0291                     	;# 
   891  0292                     	;# 
   892  0293                     	;# 
   893  0294                     	;# 
   894  0295                     	;# 
   895  0295                     	;# 
   896  0296                     	;# 
   897  0298                     	;# 
   898  0298                     	;# 
   899  0299                     	;# 
   900  029A                     	;# 
   901  029B                     	;# 
   902  029C                     	;# 
   903  029D                     	;# 
   904  029E                     	;# 
   905  0311                     	;# 
   906  0311                     	;# 
   907  0312                     	;# 
   908  0313                     	;# 
   909  0318                     	;# 
   910  0318                     	;# 
   911  0319                     	;# 
   912  031A                     	;# 
   913  038C                     	;# 
   914  038D                     	;# 
   915  038E                     	;# 
   916  0391                     	;# 
   917  0392                     	;# 
   918  0393                     	;# 
   919  0394                     	;# 
   920  0395                     	;# 
   921  0396                     	;# 
   922  039A                     	;# 
   923  039C                     	;# 
   924  039D                     	;# 
   925  039E                     	;# 
   926  039F                     	;# 
   927  0415                     	;# 
   928  0416                     	;# 
   929  0417                     	;# 
   930  041C                     	;# 
   931  041D                     	;# 
   932  041E                     	;# 
   933  0FE4                     	;# 
   934  0FE5                     	;# 
   935  0FE6                     	;# 
   936  0FE7                     	;# 
   937  0FE8                     	;# 
   938  0FE9                     	;# 
   939  0FEA                     	;# 
   940  0FEB                     	;# 
   941  0FED                     	;# 
   942  0FEE                     	;# 
   943  0FEF                     	;# 
   944  0000                     	;# 
   945  0001                     	;# 
   946  0002                     	;# 
   947  0003                     	;# 
   948  0004                     	;# 
   949  0005                     	;# 
   950  0006                     	;# 
   951  0007                     	;# 
   952  0008                     	;# 
   953  0009                     	;# 
   954  000A                     	;# 
   955  000B                     	;# 
   956  000C                     	;# 
   957  000D                     	;# 
   958  000E                     	;# 
   959  0011                     	;# 
   960  0012                     	;# 
   961  0013                     	;# 
   962  0014                     	;# 
   963  0015                     	;# 
   964  0016                     	;# 
   965  0016                     	;# 
   966  0017                     	;# 
   967  0018                     	;# 
   968  0019                     	;# 
   969  001A                     	;# 
   970  001B                     	;# 
   971  001C                     	;# 
   972  001E                     	;# 
   973  001F                     	;# 
   974  008C                     	;# 
   975  008D                     	;# 
   976  008E                     	;# 
   977  0091                     	;# 
   978  0092                     	;# 
   979  0093                     	;# 
   980  0094                     	;# 
   981  0095                     	;# 
   982  0096                     	;# 
   983  0097                     	;# 
   984  0098                     	;# 
   985  0099                     	;# 
   986  009A                     	;# 
   987  009B                     	;# 
   988  009B                     	;# 
   989  009C                     	;# 
   990  009D                     	;# 
   991  009E                     	;# 
   992  010C                     	;# 
   993  010D                     	;# 
   994  010E                     	;# 
   995  0111                     	;# 
   996  0112                     	;# 
   997  0113                     	;# 
   998  0114                     	;# 
   999  0115                     	;# 
  1000  0116                     	;# 
  1001  0117                     	;# 
  1002  0118                     	;# 
  1003  0119                     	;# 
  1004  011A                     	;# 
  1005  011B                     	;# 
  1006  011D                     	;# 
  1007  011E                     	;# 
  1008  018C                     	;# 
  1009  018D                     	;# 
  1010  018E                     	;# 
  1011  0191                     	;# 
  1012  0191                     	;# 
  1013  0192                     	;# 
  1014  0193                     	;# 
  1015  0193                     	;# 
  1016  0193                     	;# 
  1017  0194                     	;# 
  1018  0195                     	;# 
  1019  0196                     	;# 
  1020  0199                     	;# 
  1021  019A                     	;# 
  1022  019B                     	;# 
  1023  019B                     	;# 
  1024  019C                     	;# 
  1025  019D                     	;# 
  1026  019E                     	;# 
  1027  019F                     	;# 
  1028  020C                     	;# 
  1029  020D                     	;# 
  1030  020E                     	;# 
  1031  0211                     	;# 
  1032  0211                     	;# 
  1033  0212                     	;# 
  1034  0212                     	;# 
  1035  0213                     	;# 
  1036  0213                     	;# 
  1037  0214                     	;# 
  1038  0214                     	;# 
  1039  0215                     	;# 
  1040  0215                     	;# 
  1041  0215                     	;# 
  1042  0216                     	;# 
  1043  0216                     	;# 
  1044  0217                     	;# 
  1045  0217                     	;# 
  1046  0219                     	;# 
  1047  021A                     	;# 
  1048  021B                     	;# 
  1049  021C                     	;# 
  1050  021D                     	;# 
  1051  021E                     	;# 
  1052  021F                     	;# 
  1053  0291                     	;# 
  1054  0291                     	;# 
  1055  0292                     	;# 
  1056  0293                     	;# 
  1057  0294                     	;# 
  1058  0295                     	;# 
  1059  0295                     	;# 
  1060  0296                     	;# 
  1061  0298                     	;# 
  1062  0298                     	;# 
  1063  0299                     	;# 
  1064  029A                     	;# 
  1065  029B                     	;# 
  1066  029C                     	;# 
  1067  029D                     	;# 
  1068  029E                     	;# 
  1069  0311                     	;# 
  1070  0311                     	;# 
  1071  0312                     	;# 
  1072  0313                     	;# 
  1073  0318                     	;# 
  1074  0318                     	;# 
  1075  0319                     	;# 
  1076  031A                     	;# 
  1077  038C                     	;# 
  1078  038D                     	;# 
  1079  038E                     	;# 
  1080  0391                     	;# 
  1081  0392                     	;# 
  1082  0393                     	;# 
  1083  0394                     	;# 
  1084  0395                     	;# 
  1085  0396                     	;# 
  1086  039A                     	;# 
  1087  039C                     	;# 
  1088  039D                     	;# 
  1089  039E                     	;# 
  1090  039F                     	;# 
  1091  0415                     	;# 
  1092  0416                     	;# 
  1093  0417                     	;# 
  1094  041C                     	;# 
  1095  041D                     	;# 
  1096  041E                     	;# 
  1097  0FE4                     	;# 
  1098  0FE5                     	;# 
  1099  0FE6                     	;# 
  1100  0FE7                     	;# 
  1101  0FE8                     	;# 
  1102  0FE9                     	;# 
  1103  0FEA                     	;# 
  1104  0FEB                     	;# 
  1105  0FED                     	;# 
  1106  0FEE                     	;# 
  1107  0FEF                     	;# 
  1108  0000                     	;# 
  1109  0001                     	;# 
  1110  0002                     	;# 
  1111  0003                     	;# 
  1112  0004                     	;# 
  1113  0005                     	;# 
  1114  0006                     	;# 
  1115  0007                     	;# 
  1116  0008                     	;# 
  1117  0009                     	;# 
  1118  000A                     	;# 
  1119  000B                     	;# 
  1120  000C                     	;# 
  1121  000D                     	;# 
  1122  000E                     	;# 
  1123  0011                     	;# 
  1124  0012                     	;# 
  1125  0013                     	;# 
  1126  0014                     	;# 
  1127  0015                     	;# 
  1128  0016                     	;# 
  1129  0016                     	;# 
  1130  0017                     	;# 
  1131  0018                     	;# 
  1132  0019                     	;# 
  1133  001A                     	;# 
  1134  001B                     	;# 
  1135  001C                     	;# 
  1136  001E                     	;# 
  1137  001F                     	;# 
  1138  008C                     	;# 
  1139  008D                     	;# 
  1140  008E                     	;# 
  1141  0091                     	;# 
  1142  0092                     	;# 
  1143  0093                     	;# 
  1144  0094                     	;# 
  1145  0095                     	;# 
  1146  0096                     	;# 
  1147  0097                     	;# 
  1148  0098                     	;# 
  1149  0099                     	;# 
  1150  009A                     	;# 
  1151  009B                     	;# 
  1152  009B                     	;# 
  1153  009C                     	;# 
  1154  009D                     	;# 
  1155  009E                     	;# 
  1156  010C                     	;# 
  1157  010D                     	;# 
  1158  010E                     	;# 
  1159  0111                     	;# 
  1160  0112                     	;# 
  1161  0113                     	;# 
  1162  0114                     	;# 
  1163  0115                     	;# 
  1164  0116                     	;# 
  1165  0117                     	;# 
  1166  0118                     	;# 
  1167  0119                     	;# 
  1168  011A                     	;# 
  1169  011B                     	;# 
  1170  011D                     	;# 
  1171  011E                     	;# 
  1172  018C                     	;# 
  1173  018D                     	;# 
  1174  018E                     	;# 
  1175  0191                     	;# 
  1176  0191                     	;# 
  1177  0192                     	;# 
  1178  0193                     	;# 
  1179  0193                     	;# 
  1180  0193                     	;# 
  1181  0194                     	;# 
  1182  0195                     	;# 
  1183  0196                     	;# 
  1184  0199                     	;# 
  1185  019A                     	;# 
  1186  019B                     	;# 
  1187  019B                     	;# 
  1188  019C                     	;# 
  1189  019D                     	;# 
  1190  019E                     	;# 
  1191  019F                     	;# 
  1192  020C                     	;# 
  1193  020D                     	;# 
  1194  020E                     	;# 
  1195  0211                     	;# 
  1196  0211                     	;# 
  1197  0212                     	;# 
  1198  0212                     	;# 
  1199  0213                     	;# 
  1200  0213                     	;# 
  1201  0214                     	;# 
  1202  0214                     	;# 
  1203  0215                     	;# 
  1204  0215                     	;# 
  1205  0215                     	;# 
  1206  0216                     	;# 
  1207  0216                     	;# 
  1208  0217                     	;# 
  1209  0217                     	;# 
  1210  0219                     	;# 
  1211  021A                     	;# 
  1212  021B                     	;# 
  1213  021C                     	;# 
  1214  021D                     	;# 
  1215  021E                     	;# 
  1216  021F                     	;# 
  1217  0291                     	;# 
  1218  0291                     	;# 
  1219  0292                     	;# 
  1220  0293                     	;# 
  1221  0294                     	;# 
  1222  0295                     	;# 
  1223  0295                     	;# 
  1224  0296                     	;# 
  1225  0298                     	;# 
  1226  0298                     	;# 
  1227  0299                     	;# 
  1228  029A                     	;# 
  1229  029B                     	;# 
  1230  029C                     	;# 
  1231  029D                     	;# 
  1232  029E                     	;# 
  1233  0311                     	;# 
  1234  0311                     	;# 
  1235  0312                     	;# 
  1236  0313                     	;# 
  1237  0318                     	;# 
  1238  0318                     	;# 
  1239  0319                     	;# 
  1240  031A                     	;# 
  1241  038C                     	;# 
  1242  038D                     	;# 
  1243  038E                     	;# 
  1244  0391                     	;# 
  1245  0392                     	;# 
  1246  0393                     	;# 
  1247  0394                     	;# 
  1248  0395                     	;# 
  1249  0396                     	;# 
  1250  039A                     	;# 
  1251  039C                     	;# 
  1252  039D                     	;# 
  1253  039E                     	;# 
  1254  039F                     	;# 
  1255  0415                     	;# 
  1256  0416                     	;# 
  1257  0417                     	;# 
  1258  041C                     	;# 
  1259  041D                     	;# 
  1260  041E                     	;# 
  1261  0FE4                     	;# 
  1262  0FE5                     	;# 
  1263  0FE6                     	;# 
  1264  0FE7                     	;# 
  1265  0FE8                     	;# 
  1266  0FE9                     	;# 
  1267  0FEA                     	;# 
  1268  0FEB                     	;# 
  1269  0FED                     	;# 
  1270  0FEE                     	;# 
  1271  0FEF                     	;# 
  1272  0000                     	;# 
  1273  0001                     	;# 
  1274  0002                     	;# 
  1275  0003                     	;# 
  1276  0004                     	;# 
  1277  0005                     	;# 
  1278  0006                     	;# 
  1279  0007                     	;# 
  1280  0008                     	;# 
  1281  0009                     	;# 
  1282  000A                     	;# 
  1283  000B                     	;# 
  1284  000C                     	;# 
  1285  000D                     	;# 
  1286  000E                     	;# 
  1287  0011                     	;# 
  1288  0012                     	;# 
  1289  0013                     	;# 
  1290  0014                     	;# 
  1291  0015                     	;# 
  1292  0016                     	;# 
  1293  0016                     	;# 
  1294  0017                     	;# 
  1295  0018                     	;# 
  1296  0019                     	;# 
  1297  001A                     	;# 
  1298  001B                     	;# 
  1299  001C                     	;# 
  1300  001E                     	;# 
  1301  001F                     	;# 
  1302  008C                     	;# 
  1303  008D                     	;# 
  1304  008E                     	;# 
  1305  0091                     	;# 
  1306  0092                     	;# 
  1307  0093                     	;# 
  1308  0094                     	;# 
  1309  0095                     	;# 
  1310  0096                     	;# 
  1311  0097                     	;# 
  1312  0098                     	;# 
  1313  0099                     	;# 
  1314  009A                     	;# 
  1315  009B                     	;# 
  1316  009B                     	;# 
  1317  009C                     	;# 
  1318  009D                     	;# 
  1319  009E                     	;# 
  1320  010C                     	;# 
  1321  010D                     	;# 
  1322  010E                     	;# 
  1323  0111                     	;# 
  1324  0112                     	;# 
  1325  0113                     	;# 
  1326  0114                     	;# 
  1327  0115                     	;# 
  1328  0116                     	;# 
  1329  0117                     	;# 
  1330  0118                     	;# 
  1331  0119                     	;# 
  1332  011A                     	;# 
  1333  011B                     	;# 
  1334  011D                     	;# 
  1335  011E                     	;# 
  1336  018C                     	;# 
  1337  018D                     	;# 
  1338  018E                     	;# 
  1339  0191                     	;# 
  1340  0191                     	;# 
  1341  0192                     	;# 
  1342  0193                     	;# 
  1343  0193                     	;# 
  1344  0193                     	;# 
  1345  0194                     	;# 
  1346  0195                     	;# 
  1347  0196                     	;# 
  1348  0199                     	;# 
  1349  019A                     	;# 
  1350  019B                     	;# 
  1351  019B                     	;# 
  1352  019C                     	;# 
  1353  019D                     	;# 
  1354  019E                     	;# 
  1355  019F                     	;# 
  1356  020C                     	;# 
  1357  020D                     	;# 
  1358  020E                     	;# 
  1359  0211                     	;# 
  1360  0211                     	;# 
  1361  0212                     	;# 
  1362  0212                     	;# 
  1363  0213                     	;# 
  1364  0213                     	;# 
  1365  0214                     	;# 
  1366  0214                     	;# 
  1367  0215                     	;# 
  1368  0215                     	;# 
  1369  0215                     	;# 
  1370  0216                     	;# 
  1371  0216                     	;# 
  1372  0217                     	;# 
  1373  0217                     	;# 
  1374  0219                     	;# 
  1375  021A                     	;# 
  1376  021B                     	;# 
  1377  021C                     	;# 
  1378  021D                     	;# 
  1379  021E                     	;# 
  1380  021F                     	;# 
  1381  0291                     	;# 
  1382  0291                     	;# 
  1383  0292                     	;# 
  1384  0293                     	;# 
  1385  0294                     	;# 
  1386  0295                     	;# 
  1387  0295                     	;# 
  1388  0296                     	;# 
  1389  0298                     	;# 
  1390  0298                     	;# 
  1391  0299                     	;# 
  1392  029A                     	;# 
  1393  029B                     	;# 
  1394  029C                     	;# 
  1395  029D                     	;# 
  1396  029E                     	;# 
  1397  0311                     	;# 
  1398  0311                     	;# 
  1399  0312                     	;# 
  1400  0313                     	;# 
  1401  0318                     	;# 
  1402  0318                     	;# 
  1403  0319                     	;# 
  1404  031A                     	;# 
  1405  038C                     	;# 
  1406  038D                     	;# 
  1407  038E                     	;# 
  1408  0391                     	;# 
  1409  0392                     	;# 
  1410  0393                     	;# 
  1411  0394                     	;# 
  1412  0395                     	;# 
  1413  0396                     	;# 
  1414  039A                     	;# 
  1415  039C                     	;# 
  1416  039D                     	;# 
  1417  039E                     	;# 
  1418  039F                     	;# 
  1419  0415                     	;# 
  1420  0416                     	;# 
  1421  0417                     	;# 
  1422  041C                     	;# 
  1423  041D                     	;# 
  1424  041E                     	;# 
  1425  0FE4                     	;# 
  1426  0FE5                     	;# 
  1427  0FE6                     	;# 
  1428  0FE7                     	;# 
  1429  0FE8                     	;# 
  1430  0FE9                     	;# 
  1431  0FEA                     	;# 
  1432  0FEB                     	;# 
  1433  0FED                     	;# 
  1434  0FEE                     	;# 
  1435  0FEF                     	;# 
  1436  0000                     	;# 
  1437  0001                     	;# 
  1438  0002                     	;# 
  1439  0003                     	;# 
  1440  0004                     	;# 
  1441  0005                     	;# 
  1442  0006                     	;# 
  1443  0007                     	;# 
  1444  0008                     	;# 
  1445  0009                     	;# 
  1446  000A                     	;# 
  1447  000B                     	;# 
  1448  000C                     	;# 
  1449  000D                     	;# 
  1450  000E                     	;# 
  1451  0011                     	;# 
  1452  0012                     	;# 
  1453  0013                     	;# 
  1454  0014                     	;# 
  1455  0015                     	;# 
  1456  0016                     	;# 
  1457  0016                     	;# 
  1458  0017                     	;# 
  1459  0018                     	;# 
  1460  0019                     	;# 
  1461  001A                     	;# 
  1462  001B                     	;# 
  1463  001C                     	;# 
  1464  001E                     	;# 
  1465  001F                     	;# 
  1466  008C                     	;# 
  1467  008D                     	;# 
  1468  008E                     	;# 
  1469  0091                     	;# 
  1470  0092                     	;# 
  1471  0093                     	;# 
  1472  0094                     	;# 
  1473  0095                     	;# 
  1474  0096                     	;# 
  1475  0097                     	;# 
  1476  0098                     	;# 
  1477  0099                     	;# 
  1478  009A                     	;# 
  1479  009B                     	;# 
  1480  009B                     	;# 
  1481  009C                     	;# 
  1482  009D                     	;# 
  1483  009E                     	;# 
  1484  010C                     	;# 
  1485  010D                     	;# 
  1486  010E                     	;# 
  1487  0111                     	;# 
  1488  0112                     	;# 
  1489  0113                     	;# 
  1490  0114                     	;# 
  1491  0115                     	;# 
  1492  0116                     	;# 
  1493  0117                     	;# 
  1494  0118                     	;# 
  1495  0119                     	;# 
  1496  011A                     	;# 
  1497  011B                     	;# 
  1498  011D                     	;# 
  1499  011E                     	;# 
  1500  018C                     	;# 
  1501  018D                     	;# 
  1502  018E                     	;# 
  1503  0191                     	;# 
  1504  0191                     	;# 
  1505  0192                     	;# 
  1506  0193                     	;# 
  1507  0193                     	;# 
  1508  0193                     	;# 
  1509  0194                     	;# 
  1510  0195                     	;# 
  1511  0196                     	;# 
  1512  0199                     	;# 
  1513  019A                     	;# 
  1514  019B                     	;# 
  1515  019B                     	;# 
  1516  019C                     	;# 
  1517  019D                     	;# 
  1518  019E                     	;# 
  1519  019F                     	;# 
  1520  020C                     	;# 
  1521  020D                     	;# 
  1522  020E                     	;# 
  1523  0211                     	;# 
  1524  0211                     	;# 
  1525  0212                     	;# 
  1526  0212                     	;# 
  1527  0213                     	;# 
  1528  0213                     	;# 
  1529  0214                     	;# 
  1530  0214                     	;# 
  1531  0215                     	;# 
  1532  0215                     	;# 
  1533  0215                     	;# 
  1534  0216                     	;# 
  1535  0216                     	;# 
  1536  0217                     	;# 
  1537  0217                     	;# 
  1538  0219                     	;# 
  1539  021A                     	;# 
  1540  021B                     	;# 
  1541  021C                     	;# 
  1542  021D                     	;# 
  1543  021E                     	;# 
  1544  021F                     	;# 
  1545  0291                     	;# 
  1546  0291                     	;# 
  1547  0292                     	;# 
  1548  0293                     	;# 
  1549  0294                     	;# 
  1550  0295                     	;# 
  1551  0295                     	;# 
  1552  0296                     	;# 
  1553  0298                     	;# 
  1554  0298                     	;# 
  1555  0299                     	;# 
  1556  029A                     	;# 
  1557  029B                     	;# 
  1558  029C                     	;# 
  1559  029D                     	;# 
  1560  029E                     	;# 
  1561  0311                     	;# 
  1562  0311                     	;# 
  1563  0312                     	;# 
  1564  0313                     	;# 
  1565  0318                     	;# 
  1566  0318                     	;# 
  1567  0319                     	;# 
  1568  031A                     	;# 
  1569  038C                     	;# 
  1570  038D                     	;# 
  1571  038E                     	;# 
  1572  0391                     	;# 
  1573  0392                     	;# 
  1574  0393                     	;# 
  1575  0394                     	;# 
  1576  0395                     	;# 
  1577  0396                     	;# 
  1578  039A                     	;# 
  1579  039C                     	;# 
  1580  039D                     	;# 
  1581  039E                     	;# 
  1582  039F                     	;# 
  1583  0415                     	;# 
  1584  0416                     	;# 
  1585  0417                     	;# 
  1586  041C                     	;# 
  1587  041D                     	;# 
  1588  041E                     	;# 
  1589  0FE4                     	;# 
  1590  0FE5                     	;# 
  1591  0FE6                     	;# 
  1592  0FE7                     	;# 
  1593  0FE8                     	;# 
  1594  0FE9                     	;# 
  1595  0FEA                     	;# 
  1596  0FEB                     	;# 
  1597  0FED                     	;# 
  1598  0FEE                     	;# 
  1599  0FEF                     	;# 
  1600  0000                     	;# 
  1601  0001                     	;# 
  1602  0002                     	;# 
  1603  0003                     	;# 
  1604  0004                     	;# 
  1605  0005                     	;# 
  1606  0006                     	;# 
  1607  0007                     	;# 
  1608  0008                     	;# 
  1609  0009                     	;# 
  1610  000A                     	;# 
  1611  000B                     	;# 
  1612  000C                     	;# 
  1613  000D                     	;# 
  1614  000E                     	;# 
  1615  0011                     	;# 
  1616  0012                     	;# 
  1617  0013                     	;# 
  1618  0014                     	;# 
  1619  0015                     	;# 
  1620  0016                     	;# 
  1621  0016                     	;# 
  1622  0017                     	;# 
  1623  0018                     	;# 
  1624  0019                     	;# 
  1625  001A                     	;# 
  1626  001B                     	;# 
  1627  001C                     	;# 
  1628  001E                     	;# 
  1629  001F                     	;# 
  1630  008C                     	;# 
  1631  008D                     	;# 
  1632  008E                     	;# 
  1633  0091                     	;# 
  1634  0092                     	;# 
  1635  0093                     	;# 
  1636  0094                     	;# 
  1637  0095                     	;# 
  1638  0096                     	;# 
  1639  0097                     	;# 
  1640  0098                     	;# 
  1641  0099                     	;# 
  1642  009A                     	;# 
  1643  009B                     	;# 
  1644  009B                     	;# 
  1645  009C                     	;# 
  1646  009D                     	;# 
  1647  009E                     	;# 
  1648  010C                     	;# 
  1649  010D                     	;# 
  1650  010E                     	;# 
  1651  0111                     	;# 
  1652  0112                     	;# 
  1653  0113                     	;# 
  1654  0114                     	;# 
  1655  0115                     	;# 
  1656  0116                     	;# 
  1657  0117                     	;# 
  1658  0118                     	;# 
  1659  0119                     	;# 
  1660  011A                     	;# 
  1661  011B                     	;# 
  1662  011D                     	;# 
  1663  011E                     	;# 
  1664  018C                     	;# 
  1665  018D                     	;# 
  1666  018E                     	;# 
  1667  0191                     	;# 
  1668  0191                     	;# 
  1669  0192                     	;# 
  1670  0193                     	;# 
  1671  0193                     	;# 
  1672  0193                     	;# 
  1673  0194                     	;# 
  1674  0195                     	;# 
  1675  0196                     	;# 
  1676  0199                     	;# 
  1677  019A                     	;# 
  1678  019B                     	;# 
  1679  019B                     	;# 
  1680  019C                     	;# 
  1681  019D                     	;# 
  1682  019E                     	;# 
  1683  019F                     	;# 
  1684  020C                     	;# 
  1685  020D                     	;# 
  1686  020E                     	;# 
  1687  0211                     	;# 
  1688  0211                     	;# 
  1689  0212                     	;# 
  1690  0212                     	;# 
  1691  0213                     	;# 
  1692  0213                     	;# 
  1693  0214                     	;# 
  1694  0214                     	;# 
  1695  0215                     	;# 
  1696  0215                     	;# 
  1697  0215                     	;# 
  1698  0216                     	;# 
  1699  0216                     	;# 
  1700  0217                     	;# 
  1701  0217                     	;# 
  1702  0219                     	;# 
  1703  021A                     	;# 
  1704  021B                     	;# 
  1705  021C                     	;# 
  1706  021D                     	;# 
  1707  021E                     	;# 
  1708  021F                     	;# 
  1709  0291                     	;# 
  1710  0291                     	;# 
  1711  0292                     	;# 
  1712  0293                     	;# 
  1713  0294                     	;# 
  1714  0295                     	;# 
  1715  0295                     	;# 
  1716  0296                     	;# 
  1717  0298                     	;# 
  1718  0298                     	;# 
  1719  0299                     	;# 
  1720  029A                     	;# 
  1721  029B                     	;# 
  1722  029C                     	;# 
  1723  029D                     	;# 
  1724  029E                     	;# 
  1725  0311                     	;# 
  1726  0311                     	;# 
  1727  0312                     	;# 
  1728  0313                     	;# 
  1729  0318                     	;# 
  1730  0318                     	;# 
  1731  0319                     	;# 
  1732  031A                     	;# 
  1733  038C                     	;# 
  1734  038D                     	;# 
  1735  038E                     	;# 
  1736  0391                     	;# 
  1737  0392                     	;# 
  1738  0393                     	;# 
  1739  0394                     	;# 
  1740  0395                     	;# 
  1741  0396                     	;# 
  1742  039A                     	;# 
  1743  039C                     	;# 
  1744  039D                     	;# 
  1745  039E                     	;# 
  1746  039F                     	;# 
  1747  0415                     	;# 
  1748  0416                     	;# 
  1749  0417                     	;# 
  1750  041C                     	;# 
  1751  041D                     	;# 
  1752  041E                     	;# 
  1753  0FE4                     	;# 
  1754  0FE5                     	;# 
  1755  0FE6                     	;# 
  1756  0FE7                     	;# 
  1757  0FE8                     	;# 
  1758  0FE9                     	;# 
  1759  0FEA                     	;# 
  1760  0FEB                     	;# 
  1761  0FED                     	;# 
  1762  0FEE                     	;# 
  1763  0FEF                     	;# 
  1764                           
  1765                           	psect	idataCOMMON
  1766  0899                     __pidataCOMMON:	
  1767                           
  1768                           ;initializer for _I2C_slaveWriteData
  1769  0899  3455               	retlw	85
  1770                           
  1771                           	psect	idataBANK0
  1772  0002                     __pidataBANK0:	
  1773                           
  1774                           ;initializer for _tmr_scaler
  1775  0002  3401               	retlw	1
  1776                           
  1777                           ;initializer for _BACKPLANE_SLAVE_ADDRESS
  1778  0003  3401               	retlw	1
  1779                           
  1780                           	psect	idataBANK1
  1781  0898                     __pidataBANK1:	
  1782                           
  1783                           ;initializer for _type_no_data
  1784  0898  3406               	retlw	6
  1785                           
  1786                           	psect	stringtext
  1787  0636                     __pstringtext:	
  1788  0636                     _dpowers:	
  1789  0636  3401               	retlw	1
  1790  0637  3400               	retlw	0
  1791  0638  340A               	retlw	10
  1792  0639  3400               	retlw	0
  1793  063A  3464               	retlw	100
  1794  063B  3400               	retlw	0
  1795  063C  34E8               	retlw	232
  1796  063D  3403               	retlw	3
  1797  063E  3410               	retlw	16
  1798  063F  3427               	retlw	39
  1799  0640                     __end_of_dpowers:	
  1800  0640                     STR_36:	
  1801  0640  3449               	retlw	73	;'I'
  1802  0641  344C               	retlw	76	;'L'
  1803  0642  344C               	retlw	76	;'L'
  1804  0643  3445               	retlw	69	;'E'
  1805  0644  3447               	retlw	71	;'G'
  1806  0645  3441               	retlw	65	;'A'
  1807  0646  344C               	retlw	76	;'L'
  1808  0647  345F               	retlw	95	;'_'
  1809  0648  3454               	retlw	84	;'T'
  1810  0649  3459               	retlw	89	;'Y'
  1811  064A  3450               	retlw	80	;'P'
  1812  064B  3445               	retlw	69	;'E'
  1813  064C  340A               	retlw	10
  1814  064D  3400               	retlw	0
  1815  064E                     STR_1:	
  1816  064E  344B               	retlw	75	;'K'
  1817  064F  3458               	retlw	88	;'X'
  1818  0650  3452               	retlw	82	;'R'
  1819  0651  3439               	retlw	57	;'9'
  1820  0652  3434               	retlw	52	;'4'
  1821  0653  342D               	retlw	45	;'-'
  1822  0654  3432               	retlw	50	;'2'
  1823  0655  3430               	retlw	48	;'0'
  1824  0656  3435               	retlw	53	;'5'
  1825  0657  3430               	retlw	48	;'0'
  1826  0658  3400               	retlw	0
  1827  0659                     STR_16:	
  1828  0659  3424               	retlw	36	;'$'
  1829  065A  343A               	retlw	58	;':'
  1830  065B  3452               	retlw	82	;'R'
  1831  065C  3444               	retlw	68	;'D'
  1832  065D  3441               	retlw	65	;'A'
  1833  065E  343A               	retlw	58	;':'
  1834  065F  3425               	retlw	37	;'%'
  1835  0660  3464               	retlw	100	;'d'
  1836  0661  340A               	retlw	10
  1837  0662  3400               	retlw	0
  1838  0663                     STR_13:	
  1839  0663  3424               	retlw	36	;'$'
  1840  0664  343A               	retlw	58	;':'
  1841  0665  3447               	retlw	71	;'G'
  1842  0666  3445               	retlw	69	;'E'
  1843  0667  3454               	retlw	84	;'T'
  1844  0668  343A               	retlw	58	;':'
  1845  0669  3425               	retlw	37	;'%'
  1846  066A  3464               	retlw	100	;'d'
  1847  066B  340A               	retlw	10
  1848  066C  3400               	retlw	0
  1849  066D                     STR_34:	
  1850  066D  342D               	retlw	45	;'-'
  1851  066E  3425               	retlw	37	;'%'
  1852  066F  3464               	retlw	100	;'d'
  1853  0670  342E               	retlw	46	;'.'
  1854  0671  3425               	retlw	37	;'%'
  1855  0672  3430               	retlw	48	;'0'
  1856  0673  3432               	retlw	50	;'2'
  1857  0674  3464               	retlw	100	;'d'
  1858  0675  340A               	retlw	10
  1859  0676  3400               	retlw	0
  1860  0677                     STR_5:	
  1861  0677  3424               	retlw	36	;'$'
  1862  0678  343A               	retlw	58	;':'
  1863  0679  3457               	retlw	87	;'W'
  1864  067A  3448               	retlw	72	;'H'
  1865  067B  344F               	retlw	79	;'O'
  1866  067C  343A               	retlw	58	;':'
  1867  067D  3425               	retlw	37	;'%'
  1868  067E  3473               	retlw	115	;'s'
  1869  067F  340A               	retlw	10
  1870  0680  3400               	retlw	0
  1871  0681                     STR_9:	
  1872  0681  342A               	retlw	42	;'*'
  1873  0682  343A               	retlw	58	;':'
  1874  0683  3453               	retlw	83	;'S'
  1875  0684  3454               	retlw	84	;'T'
  1876  0685  3450               	retlw	80	;'P'
  1877  0686  343A               	retlw	58	;':'
  1878  0687  3425               	retlw	37	;'%'
  1879  0688  3473               	retlw	115	;'s'
  1880  0689  340A               	retlw	10
  1881  068A  3400               	retlw	0
  1882  068B                     STR_32:	
  1883  068B  342D               	retlw	45	;'-'
  1884  068C  3425               	retlw	37	;'%'
  1885  068D  3464               	retlw	100	;'d'
  1886  068E  342E               	retlw	46	;'.'
  1887  068F  3425               	retlw	37	;'%'
  1888  0690  3430               	retlw	48	;'0'
  1889  0691  3432               	retlw	50	;'2'
  1890  0692  3464               	retlw	100	;'d'
  1891  0693  342C               	retlw	44	;','
  1892  0694  3400               	retlw	0
  1893  0695                     STR_24:	
  1894  0695  3455               	retlw	85	;'U'
  1895  0696  3449               	retlw	73	;'I'
  1896  0697  344E               	retlw	78	;'N'
  1897  0698  3454               	retlw	84	;'T'
  1898  0699  3431               	retlw	49	;'1'
  1899  069A  3436               	retlw	54	;'6'
  1900  069B  345F               	retlw	95	;'_'
  1901  069C  3454               	retlw	84	;'T'
  1902  069D  343A               	retlw	58	;':'
  1903  069E  3400               	retlw	0
  1904  069F                     STR_35:	
  1905  069F  344E               	retlw	78	;'N'
  1906  06A0  344F               	retlw	79	;'O'
  1907  06A1  345F               	retlw	95	;'_'
  1908  06A2  3444               	retlw	68	;'D'
  1909  06A3  3441               	retlw	65	;'A'
  1910  06A4  3454               	retlw	84	;'T'
  1911  06A5  3441               	retlw	65	;'A'
  1912  06A6  340A               	retlw	10
  1913  06A7  3400               	retlw	0
  1914  06A8                     STR_18:	
  1915  06A8  3455               	retlw	85	;'U'
  1916  06A9  3449               	retlw	73	;'I'
  1917  06AA  344E               	retlw	78	;'N'
  1918  06AB  3454               	retlw	84	;'T'
  1919  06AC  3438               	retlw	56	;'8'
  1920  06AD  345F               	retlw	95	;'_'
  1921  06AE  3454               	retlw	84	;'T'
  1922  06AF  343A               	retlw	58	;':'
  1923  06B0  3400               	retlw	0
  1924  06B1                     STR_30:	
  1925  06B1  3446               	retlw	70	;'F'
  1926  06B2  344C               	retlw	76	;'L'
  1927  06B3  344F               	retlw	79	;'O'
  1928  06B4  3441               	retlw	65	;'A'
  1929  06B5  3454               	retlw	84	;'T'
  1930  06B6  343A               	retlw	58	;':'
  1931  06B7  3400               	retlw	0
  1932  06B8                     STR_2:	
  1933  06B8  3428               	retlw	40	;'('
  1934  06B9  346E               	retlw	110	;'n'
  1935  06BA  3475               	retlw	117	;'u'
  1936  06BB  346C               	retlw	108	;'l'
  1937  06BC  346C               	retlw	108	;'l'
  1938  06BD  3429               	retlw	41	;')'
  1939  06BE  3400               	retlw	0
  1940  06BF                     STR_17:	
  1941  06BF  3425               	retlw	37	;'%'
  1942  06C0  3425               	retlw	37	;'%'
  1943  06C1  3425               	retlw	37	;'%'
  1944  06C2  3464               	retlw	100	;'d'
  1945  06C3  343A               	retlw	58	;':'
  1946  06C4  3400               	retlw	0
  1947  06C5                     STR_3:	
  1948  06C5  3423               	retlw	35	;'#'
  1949  06C6  3425               	retlw	37	;'%'
  1950  06C7  3473               	retlw	115	;'s'
  1951  06C8  340A               	retlw	10
  1952  06C9  3400               	retlw	0
  1953  06CA                     STR_20:	
  1954  06CA  3425               	retlw	37	;'%'
  1955  06CB  3475               	retlw	117	;'u'
  1956  06CC  340A               	retlw	10
  1957  06CD  3400               	retlw	0
  1958  06CE                     STR_22:	
  1959  06CE  3425               	retlw	37	;'%'
  1960  06CF  3464               	retlw	100	;'d'
  1961  06D0  342C               	retlw	44	;','
  1962  06D1  3400               	retlw	0
  1963  06D2                     STR_19:	
  1964  06D2  3425               	retlw	37	;'%'
  1965  06D3  3475               	retlw	117	;'u'
  1966  06D4  342C               	retlw	44	;','
  1967  06D5  3400               	retlw	0
  1968  06D6                     STR_15:	
  1969  06D6  3452               	retlw	82	;'R'
  1970  06D7  3444               	retlw	68	;'D'
  1971  06D8  3441               	retlw	65	;'A'
  1972  06D9  3400               	retlw	0
  1973  06DA                     STR_14:	
  1974  06DA  3457               	retlw	87	;'W'
  1975  06DB  3444               	retlw	68	;'D'
  1976  06DC  3441               	retlw	65	;'A'
  1977  06DD  3400               	retlw	0
  1978  06DE                     STR_7:	
  1979  06DE  3453               	retlw	83	;'S'
  1980  06DF  3454               	retlw	84	;'T'
  1981  06E0  3441               	retlw	65	;'A'
  1982  06E1  3400               	retlw	0
  1983  06E2                     STR_10:	
  1984  06E2  3441               	retlw	65	;'A'
  1985  06E3  3443               	retlw	67	;'C'
  1986  06E4  344B               	retlw	75	;'K'
  1987  06E5  3400               	retlw	0
  1988  06E6                     STR_4:	
  1989  06E6  3457               	retlw	87	;'W'
  1990  06E7  3448               	retlw	72	;'H'
  1991  06E8  344F               	retlw	79	;'O'
  1992  06E9  3400               	retlw	0
  1993  06EA                     STR_8:	
  1994  06EA  3453               	retlw	83	;'S'
  1995  06EB  3454               	retlw	84	;'T'
  1996  06EC  3450               	retlw	80	;'P'
  1997  06ED  3400               	retlw	0
  1998  06EE                     STR_12:	
  1999  06EE  3447               	retlw	71	;'G'
  2000  06EF  3445               	retlw	69	;'E'
  2001  06F0  3454               	retlw	84	;'T'
  2002  06F1  3400               	retlw	0
  2003  06F2                     STR_11:	
  2004  06F2  3453               	retlw	83	;'S'
  2005  06F3  3445               	retlw	69	;'E'
  2006  06F4  3454               	retlw	84	;'T'
  2007  06F5  3400               	retlw	0
  2008  06F6                     STR_6:	
  2009  06F6  3453               	retlw	83	;'S'
  2010  06F7  3441               	retlw	65	;'A'
  2011  06F8  3456               	retlw	86	;'V'
  2012  06F9  3400               	retlw	0
  2013  065F                     
  2014                           ; #config settings
  2015  0000                     
  2016                           	psect	nvBANK1
  2017  00DC                     __pnvBANK1:	
  2018  00DC                     _device_id_:	
  2019  00DC                     	ds	2
  2020  00DE                     _PROTOCOL_Set_Handler:	
  2021  00DE                     	ds	2
  2022  00E0                     _PROTOCOL_Stop_Handler:	
  2023  00E0                     	ds	2
  2024  00E2                     _PROTOCOL_Start_Handler:	
  2025  00E2                     	ds	2
  2026  0015                     _TMR0	set	21
  2027  000B                     _INTCONbits	set	11
  2028  0011                     _PIR1bits	set	17
  2029  005A                     _TMR0IF	set	90
  2030  0095                     _OPTION_REG	set	149
  2031  009D                     _ADCON0bits	set	157
  2032  009C                     _ADRESH	set	156
  2033  009B                     _ADRESL	set	155
  2034  009E                     _ADCON1	set	158
  2035  009D                     _ADCON0	set	157
  2036  0095                     _OPTION_REGbits	set	149
  2037  008E                     _TRISC	set	142
  2038  008D                     _TRISB	set	141
  2039  008C                     _TRISA	set	140
  2040  0097                     _WDTCON	set	151
  2041  0098                     _OSCTUNE	set	152
  2042  0099                     _OSCCON	set	153
  2043  0091                     _PIE1bits	set	145
  2044  04D6                     _PLLR	set	1238
  2045  010E                     _LATCbits	set	270
  2046  011D                     _APFCON0	set	285
  2047  011E                     _APFCON1	set	286
  2048  010E                     _LATC	set	270
  2049  010D                     _LATB	set	269
  2050  010C                     _LATA	set	268
  2051  0196                     _EECON2	set	406
  2052  0193                     _EEDATL	set	403
  2053  0194                     _EEDATH	set	404
  2054  0195                     _EECON1bits	set	405
  2055  0192                     _EEADRH	set	402
  2056  0191                     _EEADRL	set	401
  2057  018C                     _ANSELA	set	396
  2058  018D                     _ANSELB	set	397
  2059  018E                     _ANSELC	set	398
  2060  0199                     _RCREG	set	409
  2061  019D                     _RCSTAbits	set	413
  2062  019A                     _TXREG	set	410
  2063  019C                     _SPBRGH	set	412
  2064  019B                     _SPBRGL	set	411
  2065  019E                     _TXSTA	set	414
  2066  019D                     _RCSTA	set	413
  2067  019F                     _BAUDCON	set	415
  2068  020E                     _WPUC	set	526
  2069  020C                     _WPUA	set	524
  2070  020D                     _WPUB	set	525
  2071  0215                     _SSP1CON1bits	set	533
  2072  0216                     _SSP1CON2bits	set	534
  2073  0214                     _SSP1STATbits	set	532
  2074  0211                     _SSP1BUF	set	529
  2075  0212                     _SSP1ADD	set	530
  2076  0213                     _SSP1MSK	set	531
  2077  0217                     _SSP1CON3	set	535
  2078  0216                     _SSP1CON2	set	534
  2079  0215                     _SSP1CON1	set	533
  2080  0214                     _SSP1STAT	set	532
  2081                           
  2082                           	psect	cinit
  2083  0032                     start_initialization:	
  2084  0032                     __initialization:	
  2085                           
  2086                           ; Initialize objects allocated to COMMON
  2087  0032  3188  2099  3180   	fcall	__pidataCOMMON	;fetch initializer
  2088  0035  00FD               	movwf	__pdataCOMMON& (0+127)
  2089                           
  2090                           ; Initialize objects allocated to BANK0
  2091  0036  3180  2002  3180   	fcall	__pidataBANK0	;fetch initializer
  2092  0039  00EE               	movwf	__pdataBANK0& (0+127)
  2093  003A  3180  2003  3180   	fcall	__pidataBANK0+1	;fetch initializer
  2094  003D  00EF               	movwf	(__pdataBANK0+1)& (0+127)
  2095                           
  2096                           ; Initialize objects allocated to BANK1
  2097  003E  0021               	movlb	1	; select bank1
  2098  003F  3188  2098  3180   	fcall	__pidataBANK1	;fetch initializer
  2099  0042  00E4               	movwf	__pdataBANK1& (0+127)
  2100                           
  2101                           ; Clear objects allocated to COMMON
  2102  0043  01FA               	clrf	__pbssCOMMON& (0+127)
  2103  0044  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
  2104  0045  01FC               	clrf	(__pbssCOMMON+2)& (0+127)
  2105                           
  2106                           ; Clear objects allocated to BANK0
  2107  0046  305C               	movlw	low __pbssBANK0
  2108  0047  0084               	movwf	4
  2109  0048  3000               	movlw	high __pbssBANK0
  2110  0049  0085               	movwf	5
  2111  004A  3012               	movlw	18
  2112  004B  3188  20CD  3180   	fcall	clear_ram0
  2113                           
  2114                           ; Clear objects allocated to BANK1
  2115  004E  30A0               	movlw	low __pbssBANK1
  2116  004F  0084               	movwf	4
  2117  0050  3000               	movlw	high __pbssBANK1
  2118  0051  0085               	movwf	5
  2119  0052  303C               	movlw	60
  2120  0053  3188  20CD  3180   	fcall	clear_ram0
  2121                           
  2122                           ; Clear objects allocated to BANK2
  2123  0056  3020               	movlw	low __pbssBANK2
  2124  0057  0084               	movwf	4
  2125  0058  3001               	movlw	high __pbssBANK2
  2126  0059  0085               	movwf	5
  2127  005A  3030               	movlw	48
  2128  005B  3188  20CD  3180   	fcall	clear_ram0
  2129                           
  2130                           ; Clear objects allocated to BANK3
  2131  005E  30A0               	movlw	low __pbssBANK3
  2132  005F  0084               	movwf	4
  2133  0060  3001               	movlw	high __pbssBANK3
  2134  0061  0085               	movwf	5
  2135  0062  3030               	movlw	48
  2136  0063  3188  20CD         	fcall	clear_ram0
  2137  0065                     end_of_initialization:	
  2138                           ;End of C runtime variable initialization code
  2139                           
  2140  0065                     __end_of__initialization:	
  2141  0065  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2142  0066  0020               	movlb	0
  2143  0067  318B  2B3F         	ljmp	_main	;jump to C main() function
  2144                           
  2145                           	psect	bssCOMMON
  2146  007A                     __pbssCOMMON:	
  2147  007A                     _eusartTxBufferRemaining:	
  2148  007A                     	ds	1
  2149  007B                     _eusartTxTail:	
  2150  007B                     	ds	1
  2151  007C                     _eusartTxHead:	
  2152  007C                     	ds	1
  2153                           
  2154                           	psect	dataCOMMON
  2155  007D                     __pdataCOMMON:	
  2156  007D                     _I2C_slaveWriteData:	
  2157  007D                     	ds	1
  2158                           
  2159                           	psect	bssBANK0
  2160  005C                     __pbssBANK0:	
  2161  005C                     _j:	
  2162  005C                     	ds	1
  2163  005D                     _i:	
  2164  005D                     	ds	1
  2165  005E                     _tmr_cnt:	
  2166  005E                     	ds	1
  2167  005F                     _sec_cnt:	
  2168  005F                     	ds	1
  2169  0060                     _invoked:	
  2170  0060                     	ds	1
  2171  0061                     _running:	
  2172  0061                     	ds	1
  2173  0062                     _locked:	
  2174  0062                     	ds	1
  2175  0063                     _value:	
  2176  0063                     	ds	1
  2177  0064                     _cnt:	
  2178  0064                     	ds	1
  2179  0065                     _slave_address:	
  2180  0065                     	ds	1
  2181  0066                     _timer0ReloadVal:	
  2182  0066                     	ds	1
  2183  0067                     _eusartRxCount:	
  2184  0067                     	ds	1
  2185  0068                     _eusartRxTail:	
  2186  0068                     	ds	1
  2187  0069                     _eusartRxHead:	
  2188  0069                     	ds	1
  2189  006A                     I2C1_StatusCallback@ext_cnt:	
  2190  006A                     	ds	1
  2191  006B                     I2C1_StatusCallback@ext_len:	
  2192  006B                     	ds	1
  2193  006C                     I2C1_StatusCallback@next:	
  2194  006C                     	ds	1
  2195  006D                     I2C1_StatusCallback@slaveWriteType:	
  2196  006D                     	ds	1
  2197                           
  2198                           	psect	dataBANK0
  2199  006E                     __pdataBANK0:	
  2200  006E                     _tmr_scaler:	
  2201  006E                     	ds	1
  2202  006F                     _BACKPLANE_SLAVE_ADDRESS:	
  2203  006F                     	ds	1
  2204                           
  2205                           	psect	bssBANK1
  2206  00A0                     __pbssBANK1:	
  2207  00A0                     _eusartRxBuffer:	
  2208  00A0                     	ds	8
  2209  00A8                     _eusartTxBuffer:	
  2210  00A8                     	ds	8
  2211  00B0                     _float100:	
  2212  00B0                     	ds	2
  2213  00B2                     _PROTOCOL_Tick_Handler:	
  2214  00B2                     	ds	2
  2215  00B4                     _PROTOCOL_Inv_Handler:	
  2216  00B4                     	ds	2
  2217  00B6                     _PROTOCOL_Extension_Handler:	
  2218  00B6                     	ds	2
  2219  00B8                     _PROTOCOL_Loop_Func:	
  2220  00B8                     	ds	2
  2221  00BA                     _data:	
  2222  00BA                     	ds	1
  2223  00BB                     _backplane_slave_enabled:	
  2224  00BB                     	ds	1
  2225  00BC                     _readbuf_status:	
  2226  00BC                     	ds	1
  2227  00BD                     _tmr_overflow:	
  2228  00BD                     	ds	1
  2229  00BE                     _sendbuf:	
  2230  00BE                     	ds	16
  2231  00CE                     _readbuf:	
  2232  00CE                     	ds	5
  2233  00D3                     PROTOCOL_Send_float@pbuf:	
  2234  00D3                     	ds	3
  2235  00D6                     PROTOCOL_Send_int16_t@pbuf:	
  2236  00D6                     	ds	2
  2237  00D8                     PROTOCOL_Send_uint16_t@pbuf:	
  2238  00D8                     	ds	2
  2239  00DA                     PROTOCOL_Send_int8_t@pbuf:	
  2240  00DA                     	ds	1
  2241  00DB                     PROTOCOL_Send_uint8_t@pbuf:	
  2242  00DB                     	ds	1
  2243                           
  2244                           	psect	dataBANK1
  2245  00E4                     __pdataBANK1:	
  2246  00E4                     _type_no_data:	
  2247  00E4                     	ds	1
  2248                           
  2249                           	psect	bssBANK2
  2250  0120                     __pbssBANK2:	
  2251  0120                     _buf:	
  2252  0120                     	ds	48
  2253                           
  2254                           	psect	bssBANK3
  2255  01A0                     __pbssBANK3:	
  2256  01A0                     I2C1_StatusCallback@ext_buf:	
  2257  01A0                     	ds	48
  2258                           
  2259                           	psect	clrtext
  2260  08CD                     clear_ram0:	
  2261                           ;	Called with FSR0 containing the base address, and
  2262                           ;	WREG with the size to clear
  2263                           
  2264  08CD  0064               	clrwdt	;clear the watchdog before getting into this loop
  2265  08CE                     clrloop0:	
  2266  08CE  0180               	clrf	0	;clear RAM location pointed to by FSR
  2267  08CF  3101               	addfsr 0,1
  2268  08D0  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2269  08D1  28CE               	goto	clrloop0	;have we reached the end yet?
  2270  08D2  3400               	retlw	0	;all done for this memory range, return
  2271                           
  2272                           	psect	cstackCOMMON
  2273  0070                     __pcstackCOMMON:	
  2274  0070                     ?_isdigit:	
  2275  0070                     ?_PROTOCOL_Read_Device_Address:	
  2276                           ; 1 bit 
  2277                           
  2278  0070                     ?_I2C1_StatusCallback:	
  2279                           ; 1 bytes @ 0x0
  2280                           
  2281  0070                     ?_PROTOCOL_SET:	
  2282                           ; 1 bytes @ 0x0
  2283                           
  2284  0070                     ?_PROTOCOL_STA:	
  2285                           ; 1 bytes @ 0x0
  2286                           
  2287  0070                     ?_PROTOCOL_STP:	
  2288                           ; 1 bytes @ 0x0
  2289                           
  2290  0070                     ?_PROTOCOL_SAV:	
  2291                           ; 1 bytes @ 0x0
  2292                           
  2293  0070                     ?_PROTOCOL_INV:	
  2294                           ; 1 bytes @ 0x0
  2295                           
  2296  0070                     ??_PROTOCOL_INV:	
  2297                           ; 1 bytes @ 0x0
  2298                           
  2299  0070                     ?_PROTOCOL_RST:	
  2300                           ; 1 bytes @ 0x0
  2301                           
  2302  0070                     ??_PROTOCOL_RST:	
  2303                           ; 1 bytes @ 0x0
  2304                           
  2305  0070                     ?_PROTOCOL_Backplane_Slave_Enabled:	
  2306                           ; 1 bytes @ 0x0
  2307                           
  2308  0070                     ??_PROTOCOL_Backplane_Slave_Enabled:	
  2309                           ; 1 bytes @ 0x0
  2310                           
  2311  0070                     ?_PROTOCOL_Read_Lock:	
  2312                           ; 1 bytes @ 0x0
  2313                           
  2314  0070                     ??_PROTOCOL_Read_Lock:	
  2315                           ; 1 bytes @ 0x0
  2316                           
  2317  0070                     ?_PROTOCOL_EXT:	
  2318                           ; 1 bytes @ 0x0
  2319                           
  2320  0070                     ?_PROTOCOL_I2C_WHO:	
  2321                           ; 1 bytes @ 0x0
  2322                           
  2323  0070                     ??_PROTOCOL_I2C_WHO:	
  2324                           ; 1 bytes @ 0x0
  2325                           
  2326  0070                     ?_PROTOCOL_I2C_SEN:	
  2327                           ; 1 bytes @ 0x0
  2328                           
  2329  0070                     ??_PROTOCOL_I2C_SEN:	
  2330                           ; 1 bytes @ 0x0
  2331                           
  2332  0070                     ?_PROTOCOL_I2C_GET:	
  2333                           ; 1 bytes @ 0x0
  2334                           
  2335  0070                     ??_PROTOCOL_I2C_GET:	
  2336                           ; 1 bytes @ 0x0
  2337                           
  2338  0070                     ?_PIN_MANAGER_Initialize:	
  2339                           ; 1 bytes @ 0x0
  2340                           
  2341  0070                     ?_OSCILLATOR_Initialize:	
  2342                           ; 1 bytes @ 0x0
  2343                           
  2344  0070                     ?_WDT_Initialize:	
  2345                           ; 1 bytes @ 0x0
  2346                           
  2347  0070                     ?_ADC_Initialize:	
  2348                           ; 1 bytes @ 0x0
  2349                           
  2350  0070                     ?_TMR0_Initialize:	
  2351                           ; 1 bytes @ 0x0
  2352                           
  2353  0070                     ?_EUSART_Initialize:	
  2354                           ; 1 bytes @ 0x0
  2355                           
  2356  0070                     ?_EUSART_Transmit_ISR:	
  2357                           ; 1 bytes @ 0x0
  2358                           
  2359  0070                     ??_EUSART_Transmit_ISR:	
  2360                           ; 1 bytes @ 0x0
  2361                           
  2362  0070                     ?_EUSART_Receive_ISR:	
  2363                           ; 1 bytes @ 0x0
  2364                           
  2365  0070                     ??_EUSART_Receive_ISR:	
  2366                           ; 1 bytes @ 0x0
  2367                           
  2368  0070                     ?_PROTOCOL_Loop:	
  2369                           ; 1 bytes @ 0x0
  2370                           
  2371  0070                     ?_I2C1_Initialize:	
  2372                           ; 1 bytes @ 0x0
  2373                           
  2374  0070                     ?_I2C1_ISR:	
  2375                           ; 1 bytes @ 0x0
  2376                           
  2377  0070                     ?_INTERRUPT_InterruptManager:	
  2378                           ; 1 bytes @ 0x0
  2379                           
  2380  0070                     ?_EUSART_Read:	
  2381                           ; 1 bytes @ 0x0
  2382                           
  2383  0070                     ?_EUSART_Write:	
  2384                           ; 1 bytes @ 0x0
  2385                           
  2386  0070                     ?_putch:	
  2387                           ; 1 bytes @ 0x0
  2388                           
  2389  0070                     ?_DATAEE_ReadByte:	
  2390                           ; 1 bytes @ 0x0
  2391                           
  2392  0070                     ?_ADC_SelectChannel:	
  2393                           ; 1 bytes @ 0x0
  2394                           
  2395  0070                     ?_ADC_StartConversion:	
  2396                           ; 1 bytes @ 0x0
  2397                           
  2398  0070                     ?_ADC_IsConversionDone:	
  2399                           ; 1 bytes @ 0x0
  2400                           
  2401  0070                     ?_TMR0_HasOverflowOccured:	
  2402                           ; 1 bytes @ 0x0
  2403                           
  2404  0070                     ?_inv_handler:	
  2405                           ; 1 bytes @ 0x0
  2406                           
  2407  0070                     ?_main:	
  2408                           ; 1 bytes @ 0x0
  2409                           
  2410  0070                     ?_PROTOCOL_Write_Device_Address:	
  2411                           ; 1 bytes @ 0x0
  2412                           
  2413  0070                     ?i1_DATAEE_WriteByte:	
  2414                           ; 1 bytes @ 0x0
  2415                           
  2416  0070                     ?i1_PROTOCOL_STA:	
  2417                           ; 1 bytes @ 0x0
  2418                           
  2419  0070                     ??i1_PROTOCOL_STA:	
  2420                           ; 1 bytes @ 0x0
  2421                           
  2422  0070                     ?i1_PROTOCOL_STP:	
  2423                           ; 1 bytes @ 0x0
  2424                           
  2425  0070                     ??i1_PROTOCOL_STP:	
  2426                           ; 1 bytes @ 0x0
  2427                           
  2428  0070                     ?i1_PROTOCOL_SAV:	
  2429                           ; 1 bytes @ 0x0
  2430                           
  2431  0070                     ?i1_PROTOCOL_SET:	
  2432                           ; 1 bytes @ 0x0
  2433                           
  2434  0070                     ??i1_PROTOCOL_SET:	
  2435                           ; 1 bytes @ 0x0
  2436                           
  2437  0070                     ?i1_PROTOCOL_EXT:	
  2438                           ; 1 bytes @ 0x0
  2439                           
  2440  0070                     ??i1_PROTOCOL_EXT:	
  2441                           ; 1 bytes @ 0x0
  2442                           
  2443  0070                     i1DATAEE_WriteByte@bData:	
  2444                           ; 1 bytes @ 0x0
  2445                           
  2446                           
  2447                           ; 1 bytes @ 0x0
  2448  0070                     	ds	1
  2449  0071                     ??i1_DATAEE_WriteByte:	
  2450  0071                     PROTOCOL_I2C_SEN@pdata:	
  2451                           ; 1 bytes @ 0x1
  2452                           
  2453  0071                     i1DATAEE_WriteByte@bAdd:	
  2454                           ; 1 bytes @ 0x1
  2455                           
  2456  0071                     i1PROTOCOL_SET@value_:	
  2457                           ; 1 bytes @ 0x1
  2458                           
  2459                           
  2460                           ; 1 bytes @ 0x1
  2461  0071                     	ds	1
  2462  0072                     i1DATAEE_WriteByte@GIEBitValue:	
  2463                           
  2464                           ; 1 bytes @ 0x2
  2465  0072                     	ds	1
  2466  0073                     ??i1_PROTOCOL_SAV:	
  2467                           
  2468                           ; 1 bytes @ 0x3
  2469  0073                     	ds	1
  2470  0074                     ??_I2C1_StatusCallback:	
  2471                           
  2472                           ; 1 bytes @ 0x4
  2473  0074                     	ds	1
  2474  0075                     I2C1_StatusCallback@i2c_bus_state:	
  2475                           
  2476                           ; 1 bytes @ 0x5
  2477  0075                     	ds	1
  2478  0076                     I2C1_StatusCallback@pdata:	
  2479                           
  2480                           ; 1 bytes @ 0x6
  2481  0076                     	ds	1
  2482  0077                     ??_I2C1_ISR:	
  2483                           
  2484                           ; 1 bytes @ 0x7
  2485  0077                     	ds	1
  2486  0078                     I2C1_ISR@i2c_data:	
  2487                           
  2488                           ; 1 bytes @ 0x8
  2489  0078                     	ds	1
  2490  0079                     ??_INTERRUPT_InterruptManager:	
  2491                           
  2492                           ; 1 bytes @ 0x9
  2493  0079                     	ds	1
  2494                           
  2495                           	psect	cstackBANK0
  2496  0020                     __pcstackBANK0:	
  2497  0020                     ??_PROTOCOL_Read_Device_Address:	
  2498  0020                     ??_PROTOCOL_SET:	
  2499                           ; 1 bytes @ 0x0
  2500                           
  2501  0020                     ??_PROTOCOL_STA:	
  2502                           ; 1 bytes @ 0x0
  2503                           
  2504  0020                     ??_PROTOCOL_STP:	
  2505                           ; 1 bytes @ 0x0
  2506                           
  2507  0020                     ??_PROTOCOL_EXT:	
  2508                           ; 1 bytes @ 0x0
  2509                           
  2510  0020                     ??_PIN_MANAGER_Initialize:	
  2511                           ; 1 bytes @ 0x0
  2512                           
  2513  0020                     ??_OSCILLATOR_Initialize:	
  2514                           ; 1 bytes @ 0x0
  2515                           
  2516  0020                     ??_WDT_Initialize:	
  2517                           ; 1 bytes @ 0x0
  2518                           
  2519  0020                     ??_ADC_Initialize:	
  2520                           ; 1 bytes @ 0x0
  2521                           
  2522  0020                     ??_TMR0_Initialize:	
  2523                           ; 1 bytes @ 0x0
  2524                           
  2525  0020                     ??_EUSART_Initialize:	
  2526                           ; 1 bytes @ 0x0
  2527                           
  2528  0020                     ??_isdigit:	
  2529                           ; 1 bytes @ 0x0
  2530                           
  2531  0020                     ??_I2C1_Initialize:	
  2532                           ; 1 bytes @ 0x0
  2533                           
  2534  0020                     ??_EUSART_Read:	
  2535                           ; 1 bytes @ 0x0
  2536                           
  2537  0020                     ??_EUSART_Write:	
  2538                           ; 1 bytes @ 0x0
  2539                           
  2540  0020                     ?_DATAEE_WriteByte:	
  2541                           ; 1 bytes @ 0x0
  2542                           
  2543  0020                     ??_DATAEE_ReadByte:	
  2544                           ; 1 bytes @ 0x0
  2545                           
  2546  0020                     ??_ADC_SelectChannel:	
  2547                           ; 1 bytes @ 0x0
  2548                           
  2549  0020                     ??_ADC_StartConversion:	
  2550                           ; 1 bytes @ 0x0
  2551                           
  2552  0020                     ??_ADC_IsConversionDone:	
  2553                           ; 1 bytes @ 0x0
  2554                           
  2555  0020                     ??_TMR0_HasOverflowOccured:	
  2556                           ; 1 bytes @ 0x0
  2557                           
  2558  0020                     ?_PROTOCOL_I2C_Set_TLV:	
  2559                           ; 1 bytes @ 0x0
  2560                           
  2561  0020                     ?___bmul:	
  2562                           ; 1 bytes @ 0x0
  2563                           
  2564  0020                     ?_strncmp:	
  2565                           ; 1 bytes @ 0x0
  2566                           
  2567  0020                     ?_ADC_GetConversionResult:	
  2568                           ; 2 bytes @ 0x0
  2569                           
  2570  0020                     ?___wmul:	
  2571                           ; 2 bytes @ 0x0
  2572                           
  2573  0020                     ?___awdiv:	
  2574                           ; 2 bytes @ 0x0
  2575                           
  2576  0020                     ?___awmod:	
  2577                           ; 2 bytes @ 0x0
  2578                           
  2579  0020                     ?___lwdiv:	
  2580                           ; 2 bytes @ 0x0
  2581                           
  2582  0020                     ?___ftpack:	
  2583                           ; 2 bytes @ 0x0
  2584                           
  2585  0020                     DATAEE_WriteByte@bData:	
  2586                           ; 3 bytes @ 0x0
  2587                           
  2588  0020                     DATAEE_ReadByte@bAdd:	
  2589                           ; 1 bytes @ 0x0
  2590                           
  2591  0020                     PROTOCOL_EXT@char_buf:	
  2592                           ; 1 bytes @ 0x0
  2593                           
  2594  0020                     PROTOCOL_I2C_Set_TLV@length:	
  2595                           ; 1 bytes @ 0x0
  2596                           
  2597  0020                     ___bmul@multiplicand:	
  2598                           ; 1 bytes @ 0x0
  2599                           
  2600  0020                     _isdigit$1244:	
  2601                           ; 1 bytes @ 0x0
  2602                           
  2603  0020                     ___wmul@multiplier:	
  2604                           ; 1 bytes @ 0x0
  2605                           
  2606  0020                     ___awdiv@divisor:	
  2607                           ; 2 bytes @ 0x0
  2608                           
  2609  0020                     ___awmod@divisor:	
  2610                           ; 2 bytes @ 0x0
  2611                           
  2612  0020                     ___lwdiv@divisor:	
  2613                           ; 2 bytes @ 0x0
  2614                           
  2615  0020                     strncmp@s1:	
  2616                           ; 2 bytes @ 0x0
  2617                           
  2618  0020                     ___ftpack@arg:	
  2619                           ; 2 bytes @ 0x0
  2620                           
  2621                           
  2622                           ; 3 bytes @ 0x0
  2623  0020                     	ds	1
  2624  0021                     ?_PROTOCOL_Initialize:	
  2625  0021                     ??_DATAEE_WriteByte:	
  2626                           ; 1 bytes @ 0x1
  2627                           
  2628  0021                     ??___bmul:	
  2629                           ; 1 bytes @ 0x1
  2630                           
  2631  0021                     EUSART_Read@readValue:	
  2632                           ; 1 bytes @ 0x1
  2633                           
  2634  0021                     EUSART_Write@txData:	
  2635                           ; 1 bytes @ 0x1
  2636                           
  2637  0021                     DATAEE_WriteByte@bAdd:	
  2638                           ; 1 bytes @ 0x1
  2639                           
  2640  0021                     ADC_SelectChannel@channel:	
  2641                           ; 1 bytes @ 0x1
  2642                           
  2643  0021                     PROTOCOL_SET@value_:	
  2644                           ; 1 bytes @ 0x1
  2645                           
  2646  0021                     PROTOCOL_I2C_Set_TLV@pbuffer:	
  2647                           ; 1 bytes @ 0x1
  2648                           
  2649  0021                     isdigit@c:	
  2650                           ; 1 bytes @ 0x1
  2651                           
  2652  0021                     PROTOCOL_Initialize@device_id:	
  2653                           ; 1 bytes @ 0x1
  2654                           
  2655                           
  2656                           ; 2 bytes @ 0x1
  2657  0021                     	ds	1
  2658  0022                     ??_putch:	
  2659  0022                     ??_ADC_GetConversionResult:	
  2660                           ; 1 bytes @ 0x2
  2661                           
  2662  0022                     ??_PROTOCOL_I2C_Set_TLV:	
  2663                           ; 1 bytes @ 0x2
  2664                           
  2665  0022                     putch@txData:	
  2666                           ; 1 bytes @ 0x2
  2667                           
  2668  0022                     DATAEE_WriteByte@GIEBitValue:	
  2669                           ; 1 bytes @ 0x2
  2670                           
  2671  0022                     ___bmul@product:	
  2672                           ; 1 bytes @ 0x2
  2673                           
  2674  0022                     strncmp@s2:	
  2675                           ; 1 bytes @ 0x2
  2676                           
  2677  0022                     ___wmul@multiplicand:	
  2678                           ; 1 bytes @ 0x2
  2679                           
  2680  0022                     ___awdiv@dividend:	
  2681                           ; 2 bytes @ 0x2
  2682                           
  2683  0022                     ___awmod@dividend:	
  2684                           ; 2 bytes @ 0x2
  2685                           
  2686  0022                     ___lwdiv@dividend:	
  2687                           ; 2 bytes @ 0x2
  2688                           
  2689                           
  2690                           ; 2 bytes @ 0x2
  2691  0022                     	ds	1
  2692  0023                     ??_PROTOCOL_SAV:	
  2693  0023                     ??_PROTOCOL_Write_Device_Address:	
  2694                           ; 1 bytes @ 0x3
  2695                           
  2696  0023                     PROTOCOL_Initialize@start_handler:	
  2697                           ; 1 bytes @ 0x3
  2698                           
  2699  0023                     PROTOCOL_I2C_Set_TLV@type:	
  2700                           ; 1 bytes @ 0x3
  2701                           
  2702  0023                     ___bmul@multiplier:	
  2703                           ; 1 bytes @ 0x3
  2704                           
  2705  0023                     ___ftpack@exp:	
  2706                           ; 1 bytes @ 0x3
  2707                           
  2708  0023                     strncmp@len:	
  2709                           ; 1 bytes @ 0x3
  2710                           
  2711                           
  2712                           ; 2 bytes @ 0x3
  2713  0023                     	ds	1
  2714  0024                     ??___wmul:	
  2715  0024                     ??___awdiv:	
  2716                           ; 1 bytes @ 0x4
  2717                           
  2718  0024                     ??___awmod:	
  2719                           ; 1 bytes @ 0x4
  2720                           
  2721  0024                     ??___lwdiv:	
  2722                           ; 1 bytes @ 0x4
  2723                           
  2724  0024                     PROTOCOL_Initialize@stop_handler:	
  2725                           ; 1 bytes @ 0x4
  2726                           
  2727  0024                     PROTOCOL_Write_Device_Address@device_id_i2c:	
  2728                           ; 1 bytes @ 0x4
  2729                           
  2730  0024                     PROTOCOL_I2C_Set_TLV@status:	
  2731                           ; 1 bytes @ 0x4
  2732                           
  2733  0024                     ___ftpack@sign:	
  2734                           ; 1 bytes @ 0x4
  2735                           
  2736  0024                     ___wmul@product:	
  2737                           ; 1 bytes @ 0x4
  2738                           
  2739                           
  2740                           ; 2 bytes @ 0x4
  2741  0024                     	ds	1
  2742  0025                     ??_strncmp:	
  2743  0025                     ??___ftpack:	
  2744                           ; 1 bytes @ 0x5
  2745                           
  2746  0025                     PROTOCOL_Initialize@set_handler:	
  2747                           ; 1 bytes @ 0x5
  2748                           
  2749  0025                     ___awdiv@counter:	
  2750                           ; 1 bytes @ 0x5
  2751                           
  2752  0025                     ___awmod@counter:	
  2753                           ; 1 bytes @ 0x5
  2754                           
  2755  0025                     ___lwdiv@quotient:	
  2756                           ; 1 bytes @ 0x5
  2757                           
  2758                           
  2759                           ; 2 bytes @ 0x5
  2760  0025                     	ds	1
  2761  0026                     ?_atoi:	
  2762  0026                     ___awdiv@sign:	
  2763                           ; 2 bytes @ 0x6
  2764                           
  2765  0026                     ___awmod@sign:	
  2766                           ; 1 bytes @ 0x6
  2767                           
  2768  0026                     PROTOCOL_Initialize@inv_handler:	
  2769                           ; 1 bytes @ 0x6
  2770                           
  2771                           
  2772                           ; 2 bytes @ 0x6
  2773  0026                     	ds	1
  2774  0027                     ?_abs:	
  2775  0027                     ___lwdiv@counter:	
  2776                           ; 2 bytes @ 0x7
  2777                           
  2778  0027                     abs@a:	
  2779                           ; 1 bytes @ 0x7
  2780                           
  2781  0027                     ___awdiv@quotient:	
  2782                           ; 2 bytes @ 0x7
  2783                           
  2784                           
  2785                           ; 2 bytes @ 0x7
  2786  0027                     	ds	1
  2787  0028                     ??_atoi:	
  2788  0028                     ?___lwmod:	
  2789                           ; 1 bytes @ 0x8
  2790                           
  2791  0028                     ?___ftadd:	
  2792                           ; 2 bytes @ 0x8
  2793                           
  2794  0028                     ?___ftmul:	
  2795                           ; 3 bytes @ 0x8
  2796                           
  2797  0028                     ?___lwtoft:	
  2798                           ; 3 bytes @ 0x8
  2799                           
  2800  0028                     PROTOCOL_Initialize@scaler:	
  2801                           ; 3 bytes @ 0x8
  2802                           
  2803  0028                     ___lwmod@divisor:	
  2804                           ; 1 bytes @ 0x8
  2805                           
  2806  0028                     ___lwtoft@c:	
  2807                           ; 2 bytes @ 0x8
  2808                           
  2809  0028                     ___ftadd@f1:	
  2810                           ; 2 bytes @ 0x8
  2811                           
  2812  0028                     ___ftmul@f1:	
  2813                           ; 3 bytes @ 0x8
  2814                           
  2815                           
  2816                           ; 3 bytes @ 0x8
  2817  0028                     	ds	1
  2818  0029                     ??_PROTOCOL_Initialize:	
  2819  0029                     ??_abs:	
  2820                           ; 1 bytes @ 0x9
  2821                           
  2822                           
  2823                           ; 1 bytes @ 0x9
  2824  0029                     	ds	1
  2825  002A                     atoi@sign:	
  2826  002A                     ___lwmod@dividend:	
  2827                           ; 1 bytes @ 0xA
  2828                           
  2829                           
  2830                           ; 2 bytes @ 0xA
  2831  002A                     	ds	1
  2832  002B                     ??___lwtoft:	
  2833  002B                     atoi@a:	
  2834                           ; 1 bytes @ 0xB
  2835                           
  2836  002B                     ___ftadd@f2:	
  2837                           ; 2 bytes @ 0xB
  2838                           
  2839  002B                     ___ftmul@f2:	
  2840                           ; 3 bytes @ 0xB
  2841                           
  2842                           
  2843                           ; 3 bytes @ 0xB
  2844  002B                     	ds	1
  2845  002C                     ??___lwmod:	
  2846                           
  2847                           ; 1 bytes @ 0xC
  2848  002C                     	ds	1
  2849  002D                     atoi@s:	
  2850  002D                     ___lwmod@counter:	
  2851                           ; 1 bytes @ 0xD
  2852                           
  2853                           
  2854                           ; 1 bytes @ 0xD
  2855  002D                     	ds	1
  2856  002E                     ??___ftadd:	
  2857  002E                     ??___ftmul:	
  2858                           ; 1 bytes @ 0xE
  2859                           
  2860  002E                     ?_printf:	
  2861                           ; 1 bytes @ 0xE
  2862                           
  2863  002E                     printf@f:	
  2864                           ; 2 bytes @ 0xE
  2865                           
  2866                           
  2867                           ; 2 bytes @ 0xE
  2868  002E                     	ds	4
  2869  0032                     ___ftadd@sign:	
  2870  0032                     ___ftmul@exp:	
  2871                           ; 1 bytes @ 0x12
  2872                           
  2873                           
  2874                           ; 1 bytes @ 0x12
  2875  0032                     	ds	1
  2876  0033                     ___ftadd@exp2:	
  2877  0033                     ___ftmul@f3_as_product:	
  2878                           ; 1 bytes @ 0x13
  2879                           
  2880                           
  2881                           ; 3 bytes @ 0x13
  2882  0033                     	ds	1
  2883  0034                     ??_printf:	
  2884  0034                     ___ftadd@exp1:	
  2885                           ; 1 bytes @ 0x14
  2886                           
  2887                           
  2888                           ; 1 bytes @ 0x14
  2889  0034                     	ds	1
  2890  0035                     ?___ftdiv:	
  2891  0035                     ___ftdiv@f2:	
  2892                           ; 3 bytes @ 0x15
  2893                           
  2894                           
  2895                           ; 3 bytes @ 0x15
  2896  0035                     	ds	1
  2897  0036                     ___ftmul@cntr:	
  2898                           
  2899                           ; 1 bytes @ 0x16
  2900  0036                     	ds	1
  2901  0037                     ___ftmul@sign:	
  2902                           
  2903                           ; 1 bytes @ 0x17
  2904  0037                     	ds	1
  2905  0038                     ?___fttol:	
  2906  0038                     printf@prec:	
  2907                           ; 4 bytes @ 0x18
  2908                           
  2909  0038                     ___ftdiv@f1:	
  2910                           ; 1 bytes @ 0x18
  2911                           
  2912  0038                     ___fttol@f1:	
  2913                           ; 3 bytes @ 0x18
  2914                           
  2915                           
  2916                           ; 3 bytes @ 0x18
  2917  0038                     	ds	1
  2918  0039                     printf@cp:	
  2919                           
  2920                           ; 2 bytes @ 0x19
  2921  0039                     	ds	2
  2922  003B                     ??___ftdiv:	
  2923  003B                     printf@ap:	
  2924                           ; 1 bytes @ 0x1B
  2925                           
  2926                           
  2927                           ; 1 bytes @ 0x1B
  2928  003B                     	ds	1
  2929  003C                     ??___fttol:	
  2930  003C                     printf@val:	
  2931                           ; 1 bytes @ 0x1C
  2932                           
  2933                           
  2934                           ; 2 bytes @ 0x1C
  2935  003C                     	ds	2
  2936  003E                     printf@len:	
  2937                           
  2938                           ; 2 bytes @ 0x1E
  2939  003E                     	ds	1
  2940  003F                     ___ftdiv@cntr:	
  2941                           
  2942                           ; 1 bytes @ 0x1F
  2943  003F                     	ds	1
  2944  0040                     printf@flag:	
  2945  0040                     ___fttol@sign1:	
  2946                           ; 1 bytes @ 0x20
  2947                           
  2948  0040                     ___ftdiv@f3:	
  2949                           ; 1 bytes @ 0x20
  2950                           
  2951                           
  2952                           ; 3 bytes @ 0x20
  2953  0040                     	ds	1
  2954  0041                     printf@width:	
  2955  0041                     ___fttol@lval:	
  2956                           ; 2 bytes @ 0x21
  2957                           
  2958                           
  2959                           ; 4 bytes @ 0x21
  2960  0041                     	ds	2
  2961  0043                     printf@c:	
  2962  0043                     ___ftdiv@exp:	
  2963                           ; 1 bytes @ 0x23
  2964                           
  2965                           
  2966                           ; 1 bytes @ 0x23
  2967  0043                     	ds	1
  2968  0044                     ___ftdiv@sign:	
  2969                           
  2970                           ; 1 bytes @ 0x24
  2971  0044                     	ds	1
  2972  0045                     ?_get_accel:	
  2973  0045                     ___fttol@exp1:	
  2974                           ; 3 bytes @ 0x25
  2975                           
  2976                           
  2977                           ; 1 bytes @ 0x25
  2978  0045                     	ds	1
  2979  0046                     ?_PROTOCOL_I2C_Send_float:	
  2980  0046                     PROTOCOL_I2C_Send_float@pbuffer:	
  2981                           ; 1 bytes @ 0x26
  2982                           
  2983                           
  2984                           ; 1 bytes @ 0x26
  2985  0046                     	ds	1
  2986  0047                     ??_PROTOCOL_I2C_Send_float:	
  2987                           
  2988                           ; 1 bytes @ 0x27
  2989  0047                     	ds	2
  2990  0049                     ??_get_accel:	
  2991  0049                     PROTOCOL_I2C_Send_float@length:	
  2992                           ; 1 bytes @ 0x29
  2993                           
  2994  0049                     get_accel@steps:	
  2995                           ; 1 bytes @ 0x29
  2996                           
  2997                           
  2998                           ; 3 bytes @ 0x29
  2999  0049                     	ds	1
  3000  004A                     PROTOCOL_I2C_Send_float@v:	
  3001                           
  3002                           ; 2 bytes @ 0x2A
  3003  004A                     	ds	2
  3004  004C                     get_accel@ch:	
  3005                           
  3006                           ; 1 bytes @ 0x2C
  3007  004C                     	ds	1
  3008  004D                     ??_inv_handler:	
  3009                           
  3010                           ; 1 bytes @ 0x2D
  3011  004D                     	ds	1
  3012  004E                     inv_handler@values:	
  3013                           
  3014                           ; 9 bytes @ 0x2E
  3015  004E                     	ds	9
  3016  0057                     ??_PROTOCOL_Loop:	
  3017                           
  3018                           ; 1 bytes @ 0x37
  3019  0057                     	ds	2
  3020  0059                     PROTOCOL_Loop@c:	
  3021                           
  3022                           ; 1 bytes @ 0x39
  3023  0059                     	ds	1
  3024  005A                     PROTOCOL_Loop@device_address:	
  3025                           
  3026                           ; 1 bytes @ 0x3A
  3027  005A                     	ds	1
  3028  005B                     ??_main:	
  3029                           
  3030                           ; 1 bytes @ 0x3B
  3031  005B                     	ds	1
  3032                           
  3033                           	psect	maintext
  3034  0B3F                     __pmaintext:	
  3035 ;;
  3036 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  3037 ;;
  3038 ;; *************** function _main *****************
  3039 ;; Defined at:
  3040 ;;		line 31 in file "main.c"
  3041 ;; Parameters:    Size  Location     Type
  3042 ;;		None
  3043 ;; Auto vars:     Size  Location     Type
  3044 ;;		None
  3045 ;; Return value:  Size  Location     Type
  3046 ;;                  1    wreg      void 
  3047 ;; Registers used:
  3048 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3049 ;; Tracked objects:
  3050 ;;		On entry : B1F/0
  3051 ;;		On exit  : 0/0
  3052 ;;		Unchanged: 0/0
  3053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3055 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3056 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3057 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3058 ;;Total ram usage:        1 bytes
  3059 ;; Hardware stack levels required when called:   11
  3060 ;; This function calls:
  3061 ;;		_ADC_Initialize
  3062 ;;		_EUSART_Initialize
  3063 ;;		_I2C1_Initialize
  3064 ;;		_OSCILLATOR_Initialize
  3065 ;;		_PIN_MANAGER_Initialize
  3066 ;;		_PROTOCOL_Initialize
  3067 ;;		_PROTOCOL_Loop
  3068 ;;		_TMR0_Initialize
  3069 ;;		_WDT_Initialize
  3070 ;; This function is called by:
  3071 ;;		Startup code after reset
  3072 ;; This function uses a non-reentrant model
  3073 ;;
  3074                           
  3075                           
  3076                           ;psect for function _main
  3077  0B3F                     _main:	
  3078                           
  3079                           ;main.c: 34: PROTOCOL_Initialize("KXR94-2050", (0), (0), (0), inv_handler, 250);
  3080                           
  3081                           ;incstack = 0
  3082                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3083  0B3F  304E               	movlw	low (STR_1| (0+32768))
  3084  0B40  0020               	movlb	0	; select bank0
  3085  0B41  00A1               	movwf	PROTOCOL_Initialize@device_id
  3086  0B42  3086               	movlw	high (STR_1| (0+32768))
  3087  0B43  00A2               	movwf	PROTOCOL_Initialize@device_id+1
  3088  0B44  01A3               	clrf	PROTOCOL_Initialize@start_handler
  3089  0B45  01A4               	clrf	PROTOCOL_Initialize@stop_handler
  3090  0B46  01A5               	clrf	PROTOCOL_Initialize@set_handler
  3091  0B47  30A2               	movlw	low _inv_handler
  3092  0B48  00A6               	movwf	PROTOCOL_Initialize@inv_handler
  3093  0B49  300B               	movlw	high _inv_handler
  3094  0B4A  00A7               	movwf	PROTOCOL_Initialize@inv_handler+1
  3095  0B4B  30FA               	movlw	250
  3096  0B4C  00DB               	movwf	??_main
  3097  0B4D  085B               	movf	??_main,w
  3098  0B4E  00A8               	movwf	PROTOCOL_Initialize@scaler
  3099  0B4F  318C  24A6  318B   	fcall	_PROTOCOL_Initialize
  3100                           
  3101                           ;main.c: 38: PIN_MANAGER_Initialize();
  3102  0B52  318A  2225  318B   	fcall	_PIN_MANAGER_Initialize
  3103                           
  3104                           ;main.c: 39: OSCILLATOR_Initialize();
  3105  0B55  3188  20DA  318B   	fcall	_OSCILLATOR_Initialize
  3106                           
  3107                           ;main.c: 40: WDT_Initialize();
  3108  0B58  3188  20C3  318B   	fcall	_WDT_Initialize
  3109                           
  3110                           ;main.c: 41: ADC_Initialize();
  3111  0B5B  3188  20EF  318B   	fcall	_ADC_Initialize
  3112                           
  3113                           ;main.c: 42: TMR0_Initialize();
  3114  0B5E  3189  2129  318B   	fcall	_TMR0_Initialize
  3115                           
  3116                           ;main.c: 43: EUSART_Initialize();
  3117  0B61  3189  21D1  318B   	fcall	_EUSART_Initialize
  3118                           
  3119                           ;main.c: 44: I2C1_Initialize();
  3120  0B64  318A  2283  318B   	fcall	_I2C1_Initialize
  3121                           
  3122                           ;main.c: 47: (INTCONbits.GIE = 1);
  3123  0B67  178B               	bsf	11,7	;volatile
  3124                           
  3125                           ;main.c: 48: (INTCONbits.PEIE = 1);
  3126  0B68  170B               	bsf	11,6	;volatile
  3127                           
  3128                           ;main.c: 51: PROTOCOL_Loop();
  3129  0B69  3182  223E         	fcall	_PROTOCOL_Loop
  3130  0B6B  3180  2830         	ljmp	start
  3131  0B6D                     __end_of_main:	
  3132                           
  3133                           	psect	text1
  3134  08C3                     __ptext1:	
  3135 ;; *************** function _WDT_Initialize *****************
  3136 ;; Defined at:
  3137 ;;		line 93 in file "mcc_generated_files/mcc.c"
  3138 ;; Parameters:    Size  Location     Type
  3139 ;;		None
  3140 ;; Auto vars:     Size  Location     Type
  3141 ;;		None
  3142 ;; Return value:  Size  Location     Type
  3143 ;;                  1    wreg      void 
  3144 ;; Registers used:
  3145 ;;		wreg
  3146 ;; Tracked objects:
  3147 ;;		On entry : 0/0
  3148 ;;		On exit  : 0/0
  3149 ;;		Unchanged: 0/0
  3150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3154 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3155 ;;Total ram usage:        0 bytes
  3156 ;; Hardware stack levels used:    1
  3157 ;; Hardware stack levels required when called:    5
  3158 ;; This function calls:
  3159 ;;		Nothing
  3160 ;; This function is called by:
  3161 ;;		_main
  3162 ;;		_SYSTEM_Initialize
  3163 ;; This function uses a non-reentrant model
  3164 ;;
  3165                           
  3166                           
  3167                           ;psect for function _WDT_Initialize
  3168  08C3                     _WDT_Initialize:	
  3169                           
  3170                           ;mcc.c: 96: WDTCON = 0x16;
  3171                           
  3172                           ;incstack = 0
  3173                           ; Regs used in _WDT_Initialize: [wreg]
  3174  08C3  3016               	movlw	22
  3175  08C4  0021               	movlb	1	; select bank1
  3176  08C5  0097               	movwf	23	;volatile
  3177  08C6  0008               	return
  3178  08C7                     __end_of_WDT_Initialize:	
  3179                           
  3180                           	psect	text2
  3181  0929                     __ptext2:	
  3182 ;; *************** function _TMR0_Initialize *****************
  3183 ;; Defined at:
  3184 ;;		line 62 in file "mcc_generated_files/tmr0.c"
  3185 ;; Parameters:    Size  Location     Type
  3186 ;;		None
  3187 ;; Auto vars:     Size  Location     Type
  3188 ;;		None
  3189 ;; Return value:  Size  Location     Type
  3190 ;;                  1    wreg      void 
  3191 ;; Registers used:
  3192 ;;		wreg, status,2
  3193 ;; Tracked objects:
  3194 ;;		On entry : 0/0
  3195 ;;		On exit  : 0/0
  3196 ;;		Unchanged: 0/0
  3197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3198 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3199 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3200 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3201 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3202 ;;Total ram usage:        1 bytes
  3203 ;; Hardware stack levels used:    1
  3204 ;; Hardware stack levels required when called:    5
  3205 ;; This function calls:
  3206 ;;		Nothing
  3207 ;; This function is called by:
  3208 ;;		_main
  3209 ;;		_SYSTEM_Initialize
  3210 ;; This function uses a non-reentrant model
  3211 ;;
  3212                           
  3213                           
  3214                           ;psect for function _TMR0_Initialize
  3215  0929                     _TMR0_Initialize:	
  3216                           
  3217                           ;tmr0.c: 67: OPTION_REG = (OPTION_REG & 0xC0) | 0xD7 & 0x3F;
  3218                           
  3219                           ;incstack = 0
  3220                           ; Regs used in _TMR0_Initialize: [wreg+status,2]
  3221  0929  0021               	movlb	1	; select bank1
  3222  092A  0815               	movf	21,w	;volatile
  3223  092B  39C0               	andlw	192
  3224  092C  3817               	iorlw	23
  3225  092D  0095               	movwf	21	;volatile
  3226                           
  3227                           ;tmr0.c: 70: TMR0 = 0x06;
  3228  092E  3006               	movlw	6
  3229  092F  0020               	movlb	0	; select bank0
  3230  0930  0095               	movwf	21	;volatile
  3231                           
  3232                           ;tmr0.c: 73: timer0ReloadVal= 6;
  3233  0931  3006               	movlw	6
  3234  0932  00A0               	movwf	??_TMR0_Initialize
  3235  0933  0820               	movf	??_TMR0_Initialize,w
  3236  0934  00E6               	movwf	_timer0ReloadVal	;volatile
  3237                           
  3238                           ;tmr0.c: 76: INTCONbits.TMR0IF = 0;
  3239  0935  110B               	bcf	11,2	;volatile
  3240  0936  0008               	return
  3241  0937                     __end_of_TMR0_Initialize:	
  3242                           
  3243                           	psect	text3
  3244  023E                     __ptext3:	
  3245 ;; *************** function _PROTOCOL_Loop *****************
  3246 ;; Defined at:
  3247 ;;		line 136 in file "protocol.c"
  3248 ;; Parameters:    Size  Location     Type
  3249 ;;		None
  3250 ;; Auto vars:     Size  Location     Type
  3251 ;;  device_addre    1   58[BANK0 ] unsigned char 
  3252 ;;  c               1   57[BANK0 ] unsigned char 
  3253 ;; Return value:  Size  Location     Type
  3254 ;;                  1    wreg      void 
  3255 ;; Registers used:
  3256 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3257 ;; Tracked objects:
  3258 ;;		On entry : 0/0
  3259 ;;		On exit  : 0/0
  3260 ;;		Unchanged: 0/0
  3261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3263 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3264 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3265 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3266 ;;Total ram usage:        4 bytes
  3267 ;; Hardware stack levels used:    1
  3268 ;; Hardware stack levels required when called:   10
  3269 ;; This function calls:
  3270 ;;		Absolute function
  3271 ;;		_EUSART_Read
  3272 ;;		_PROTOCOL_EXT
  3273 ;;		_PROTOCOL_Read_Device_Address
  3274 ;;		_PROTOCOL_SAV
  3275 ;;		_PROTOCOL_SET
  3276 ;;		_PROTOCOL_STA
  3277 ;;		_PROTOCOL_STP
  3278 ;;		_PROTOCOL_Write_Device_Address
  3279 ;;		_TMR0_HasOverflowOccured
  3280 ;;		_atoi
  3281 ;;		_inv_handler
  3282 ;;		_printf
  3283 ;;		_strncmp
  3284 ;; This function is called by:
  3285 ;;		_main
  3286 ;; This function uses a non-reentrant model
  3287 ;;
  3288                           
  3289                           
  3290                           ;psect for function _PROTOCOL_Loop
  3291  023E                     _PROTOCOL_Loop:	
  3292  023E                     l633:	
  3293                           ;incstack = 0
  3294                           ; Regs used in _PROTOCOL_Loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3295                           ;protocol.c: 137: uint8_t device_address;
  3296                           ;protocol.c: 138: uint8_t c;
  3297                           ;protocol.c: 139: while (1) {
  3298                           
  3299                           
  3300                           ;protocol.c: 140: tmr_overflow = TMR0_HasOverflowOccured();
  3301  023E  3188  20BF  3182   	fcall	_TMR0_HasOverflowOccured
  3302  0241  0020               	movlb	0	; select bank0
  3303  0242  00D7               	movwf	??_PROTOCOL_Loop
  3304  0243  0857               	movf	??_PROTOCOL_Loop,w
  3305  0244  0021               	movlb	1	; select bank1
  3306  0245  00BD               	movwf	_tmr_overflow^(0+128)
  3307                           
  3308                           ;protocol.c: 141: if (tmr_overflow) {
  3309  0246  083D               	movf	_tmr_overflow^(0+128),w
  3310  0247  1903               	btfsc	3,2
  3311  0248  2A66               	goto	l3825
  3312                           
  3313                           ;protocol.c: 142: TMR0IF = 0;
  3314  0249  110B               	bcf	11,2	;volatile
  3315                           
  3316                           ;protocol.c: 144: if (PROTOCOL_Inv_Handler && (++tmr_cnt >= value)) {
  3317  024A  0834               	movf	_PROTOCOL_Inv_Handler^(0+128),w
  3318  024B  0435               	iorwf	(_PROTOCOL_Inv_Handler+1)^(0+128),w
  3319  024C  1903               	btfsc	3,2
  3320  024D  2A66               	goto	l3825
  3321  024E  3001               	movlw	1
  3322  024F  0020               	movlb	0	; select bank0
  3323  0250  00D7               	movwf	??_PROTOCOL_Loop
  3324  0251  0857               	movf	??_PROTOCOL_Loop,w
  3325  0252  07DE               	addwf	_tmr_cnt,f
  3326  0253  0863               	movf	_value,w
  3327  0254  025E               	subwf	_tmr_cnt,w
  3328  0255  1C03               	skipc
  3329  0256  2A66               	goto	l3825
  3330                           
  3331                           ;protocol.c: 145: tmr_cnt = 0;
  3332  0257  01DE               	clrf	_tmr_cnt
  3333                           
  3334                           ;protocol.c: 146: if (++sec_cnt >= tmr_scaler) {
  3335  0258  3001               	movlw	1
  3336  0259  00D7               	movwf	??_PROTOCOL_Loop
  3337  025A  0857               	movf	??_PROTOCOL_Loop,w
  3338  025B  07DF               	addwf	_sec_cnt,f
  3339  025C  086E               	movf	_tmr_scaler,w
  3340  025D  025F               	subwf	_sec_cnt,w
  3341  025E  1C03               	skipc
  3342  025F  2A66               	goto	l3825
  3343                           
  3344                           ;protocol.c: 147: if (running) invoked = 1;
  3345  0260  0861               	movf	_running,w
  3346  0261  1903               	btfsc	3,2
  3347  0262  2A65               	goto	l3823
  3348  0263  01E0               	clrf	_invoked
  3349  0264  0AE0               	incf	_invoked,f
  3350  0265                     l3823:	
  3351                           
  3352                           ;protocol.c: 148: sec_cnt = 0;
  3353  0265  01DF               	clrf	_sec_cnt
  3354  0266                     l3825:	
  3355                           
  3356                           ;protocol.c: 149: }
  3357                           ;protocol.c: 150: }
  3358                           ;protocol.c: 151: }
  3359                           ;protocol.c: 152: if (invoked && PROTOCOL_Inv_Handler) {
  3360  0266  0020               	movlb	0	; select bank0
  3361  0267  0860               	movf	_invoked,w
  3362  0268  1903               	btfsc	3,2
  3363  0269  2A76               	goto	l3835
  3364  026A  0021               	movlb	1	; select bank1
  3365  026B  0834               	movf	_PROTOCOL_Inv_Handler^(0+128),w
  3366  026C  0435               	iorwf	(_PROTOCOL_Inv_Handler+1)^(0+128),w
  3367  026D  1903               	btfsc	3,2
  3368  026E  2A76               	goto	l3835
  3369                           
  3370                           ;protocol.c: 153: PROTOCOL_Inv_Handler();
  3371  026F  0835               	movf	(_PROTOCOL_Inv_Handler+1)^(0+128),w
  3372  0270  008A               	movwf	10
  3373  0271  0834               	movf	_PROTOCOL_Inv_Handler^(0+128),w
  3374  0272  000A               	callw
  3375  0273  3182               	pagesel	$
  3376                           
  3377                           ;protocol.c: 154: invoked = 0;
  3378  0274  0020               	movlb	0	; select bank0
  3379  0275  01E0               	clrf	_invoked
  3380  0276                     l3835:	
  3381                           
  3382                           ;protocol.c: 157: if ((eusartRxCount)) {
  3383  0276  0020               	movlb	0	; select bank0
  3384  0277  0867               	movf	_eusartRxCount,w	;volatile
  3385  0278  1903               	btfsc	3,2
  3386  0279  2A3E               	goto	l633
  3387                           
  3388                           ;protocol.c: 158: c = EUSART_Read();
  3389  027A  318A  2244  3182   	fcall	_EUSART_Read
  3390  027D  0020               	movlb	0	; select bank0
  3391  027E  00D7               	movwf	??_PROTOCOL_Loop
  3392  027F  0857               	movf	??_PROTOCOL_Loop,w
  3393  0280  00D9               	movwf	PROTOCOL_Loop@c
  3394                           
  3395                           ;protocol.c: 159: buf[cnt++] = c;
  3396  0281  0859               	movf	PROTOCOL_Loop@c,w
  3397  0282  00D7               	movwf	??_PROTOCOL_Loop
  3398  0283  0864               	movf	_cnt,w
  3399  0284  3E20               	addlw	(low (_buf| (0+256)))& (0+255)
  3400  0285  0086               	movwf	6
  3401  0286  3001               	movlw	1	; select bank2/3
  3402  0287  0087               	movwf	7
  3403  0288  0857               	movf	??_PROTOCOL_Loop,w
  3404  0289  0081               	movwf	1
  3405  028A  3001               	movlw	1
  3406  028B  00D7               	movwf	??_PROTOCOL_Loop
  3407  028C  0857               	movf	??_PROTOCOL_Loop,w
  3408  028D  07E4               	addwf	_cnt,f
  3409                           
  3410                           ;protocol.c: 160: if (c == '\n') {
  3411  028E  300A               	movlw	10
  3412  028F  0659               	xorwf	PROTOCOL_Loop@c,w
  3413  0290  1D03               	btfss	3,2
  3414  0291  2A3E               	goto	l633
  3415                           
  3416                           ;protocol.c: 161: buf[--cnt] = '\0';
  3417  0292  3001               	movlw	1
  3418  0293  02E4               	subwf	_cnt,f
  3419  0294  0864               	movf	_cnt,w
  3420  0295  3E20               	addlw	(low (_buf| (0+256)))& (0+255)
  3421  0296  0086               	movwf	6
  3422  0297  3001               	movlw	1	; select bank2/3
  3423  0298  0087               	movwf	7
  3424  0299  0181               	clrf	1
  3425                           
  3426                           ;protocol.c: 162: cnt = 0;
  3427  029A  01E4               	clrf	_cnt
  3428                           
  3429                           ;protocol.c: 163: printf("#%s\n", buf);
  3430  029B  30C5               	movlw	low (STR_3| (0+32768))
  3431  029C  00AE               	movwf	printf@f
  3432  029D  3086               	movlw	high (STR_3| (0+32768))
  3433  029E  00AF               	movwf	printf@f+1
  3434  029F  3020               	movlw	low _buf
  3435  02A0  00B0               	movwf	low ((?_printf| 0+2))
  3436  02A1  3001               	movlw	high _buf
  3437  02A2  00B1               	movwf	(low ((?_printf| 0+2))+1)
  3438  02A3  3180  2069  3182   	fcall	_printf
  3439                           
  3440                           ;protocol.c: 164: if (BACKPLANE_SLAVE_ADDRESS != 0x01) {
  3441  02A6  0020               	movlb	0	; select bank0
  3442  02A7  036F               	decf	_BACKPLANE_SLAVE_ADDRESS,w
  3443  02A8  1903               	btfsc	3,2
  3444  02A9  2AAF               	goto	l3855
  3445                           
  3446                           ;protocol.c: 165: PROTOCOL_EXT(buf);
  3447  02AA  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3448  02AB  3188  2097  3182   	fcall	_PROTOCOL_EXT
  3449                           
  3450                           ;protocol.c: 166: } else if (!strncmp(("WHO"), (buf), 3)) {
  3451  02AE  2A3E               	goto	l633
  3452  02AF                     l3855:	
  3453  02AF  30E6               	movlw	low (STR_4| (0+32768))
  3454  02B0  0020               	movlb	0	; select bank0
  3455  02B1  00A0               	movwf	strncmp@s1
  3456  02B2  3086               	movlw	high (STR_4| (0+32768))
  3457  02B3  00A1               	movwf	strncmp@s1+1
  3458  02B4  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3459  02B5  00D7               	movwf	??_PROTOCOL_Loop
  3460  02B6  0857               	movf	??_PROTOCOL_Loop,w
  3461  02B7  00A2               	movwf	strncmp@s2
  3462  02B8  3003               	movlw	3
  3463  02B9  00A3               	movwf	strncmp@len
  3464  02BA  3000               	movlw	0
  3465  02BB  00A4               	movwf	strncmp@len+1
  3466  02BC  3187  27BE  3182   	fcall	_strncmp
  3467  02BF  0020               	movlb	0	; select bank0
  3468  02C0  0820               	movf	?_strncmp,w
  3469  02C1  0421               	iorwf	?_strncmp+1,w
  3470  02C2  1D03               	btfss	3,2
  3471  02C3  2AD4               	goto	l3859
  3472                           
  3473                           ;protocol.c: 167: printf("$:WHO:%s\n", device_id_);
  3474  02C4  3077               	movlw	low (STR_5| (0+32768))
  3475  02C5  00AE               	movwf	printf@f
  3476  02C6  3086               	movlw	high (STR_5| (0+32768))
  3477  02C7  00AF               	movwf	printf@f+1
  3478  02C8  0021               	movlb	1	; select bank1
  3479  02C9  085D               	movf	(_device_id_+1)^(0+128),w
  3480  02CA  0020               	movlb	0	; select bank0
  3481  02CB  00B1               	movwf	(low ((?_printf| 0+2))+1)
  3482  02CC  0021               	movlb	1	; select bank1
  3483  02CD  085C               	movf	_device_id_^(0+128),w
  3484  02CE  0020               	movlb	0	; select bank0
  3485  02CF  00B0               	movwf	low ((?_printf| 0+2))
  3486  02D0  3180  2069  3182   	fcall	_printf
  3487                           
  3488                           ;protocol.c: 168: } else if (!strncmp(("SAV"), (buf), 3)) {
  3489  02D3  2A3E               	goto	l633
  3490  02D4                     l3859:	
  3491  02D4  30F6               	movlw	low (STR_6| (0+32768))
  3492  02D5  0020               	movlb	0	; select bank0
  3493  02D6  00A0               	movwf	strncmp@s1
  3494  02D7  3086               	movlw	high (STR_6| (0+32768))
  3495  02D8  00A1               	movwf	strncmp@s1+1
  3496  02D9  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3497  02DA  00D7               	movwf	??_PROTOCOL_Loop
  3498  02DB  0857               	movf	??_PROTOCOL_Loop,w
  3499  02DC  00A2               	movwf	strncmp@s2
  3500  02DD  3003               	movlw	3
  3501  02DE  00A3               	movwf	strncmp@len
  3502  02DF  3000               	movlw	0
  3503  02E0  00A4               	movwf	strncmp@len+1
  3504  02E1  3187  27BE  3182   	fcall	_strncmp
  3505  02E4  0020               	movlb	0	; select bank0
  3506  02E5  0820               	movf	?_strncmp,w
  3507  02E6  0421               	iorwf	?_strncmp+1,w
  3508  02E7  1D03               	btfss	3,2
  3509  02E8  2AED               	goto	l3863
  3510                           
  3511                           ;protocol.c: 169: PROTOCOL_SAV();
  3512  02E9  3189  2100  3182   	fcall	_PROTOCOL_SAV
  3513                           
  3514                           ;protocol.c: 170: } else if (!strncmp(("STA"), (buf), 3)) {
  3515  02EC  2A3E               	goto	l633
  3516  02ED                     l3863:	
  3517  02ED  30DE               	movlw	low (STR_7| (0+32768))
  3518  02EE  0020               	movlb	0	; select bank0
  3519  02EF  00A0               	movwf	strncmp@s1
  3520  02F0  3086               	movlw	high (STR_7| (0+32768))
  3521  02F1  00A1               	movwf	strncmp@s1+1
  3522  02F2  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3523  02F3  00D7               	movwf	??_PROTOCOL_Loop
  3524  02F4  0857               	movf	??_PROTOCOL_Loop,w
  3525  02F5  00A2               	movwf	strncmp@s2
  3526  02F6  3003               	movlw	3
  3527  02F7  00A3               	movwf	strncmp@len
  3528  02F8  3000               	movlw	0
  3529  02F9  00A4               	movwf	strncmp@len+1
  3530  02FA  3187  27BE  3182   	fcall	_strncmp
  3531  02FD  0020               	movlb	0	; select bank0
  3532  02FE  0820               	movf	?_strncmp,w
  3533  02FF  0421               	iorwf	?_strncmp+1,w
  3534  0300  1D03               	btfss	3,2
  3535  0301  2B06               	goto	l3867
  3536                           
  3537                           ;protocol.c: 171: PROTOCOL_STA();
  3538  0302  3188  20BB  3182   	fcall	_PROTOCOL_STA
  3539                           
  3540                           ;protocol.c: 172: } else if (!strncmp(("STP"), (buf), 3)) {
  3541  0305  2A3E               	goto	l633
  3542  0306                     l3867:	
  3543  0306  30EA               	movlw	low (STR_8| (0+32768))
  3544  0307  0020               	movlb	0	; select bank0
  3545  0308  00A0               	movwf	strncmp@s1
  3546  0309  3086               	movlw	high (STR_8| (0+32768))
  3547  030A  00A1               	movwf	strncmp@s1+1
  3548  030B  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3549  030C  00D7               	movwf	??_PROTOCOL_Loop
  3550  030D  0857               	movf	??_PROTOCOL_Loop,w
  3551  030E  00A2               	movwf	strncmp@s2
  3552  030F  3003               	movlw	3
  3553  0310  00A3               	movwf	strncmp@len
  3554  0311  3000               	movlw	0
  3555  0312  00A4               	movwf	strncmp@len+1
  3556  0313  3187  27BE  3182   	fcall	_strncmp
  3557  0316  0020               	movlb	0	; select bank0
  3558  0317  0820               	movf	?_strncmp,w
  3559  0318  0421               	iorwf	?_strncmp+1,w
  3560  0319  1D03               	btfss	3,2
  3561  031A  2B2B               	goto	l3873
  3562                           
  3563                           ;protocol.c: 173: PROTOCOL_STP();
  3564  031B  3188  20A9  3182   	fcall	_PROTOCOL_STP
  3565                           
  3566                           ;protocol.c: 174: printf("*:STP:%s\n", "ACK");
  3567  031E  3081               	movlw	low (STR_9| (0+32768))
  3568  031F  0020               	movlb	0	; select bank0
  3569  0320  00AE               	movwf	printf@f
  3570  0321  3086               	movlw	high (STR_9| (0+32768))
  3571  0322  00AF               	movwf	printf@f+1
  3572  0323  30E2               	movlw	low (STR_10| (0+32768))
  3573  0324  00B0               	movwf	low ((?_printf| 0+2))
  3574  0325  3086               	movlw	high (STR_10| (0+32768))
  3575  0326  00B1               	movwf	(low ((?_printf| 0+2))+1)
  3576  0327  3180  2069  3182   	fcall	_printf
  3577                           
  3578                           ;protocol.c: 175: } else if (!strncmp(("SET"), (buf), 3)) {
  3579  032A  2A3E               	goto	l633
  3580  032B                     l3873:	
  3581  032B  30F2               	movlw	low (STR_11| (0+32768))
  3582  032C  0020               	movlb	0	; select bank0
  3583  032D  00A0               	movwf	strncmp@s1
  3584  032E  3086               	movlw	high (STR_11| (0+32768))
  3585  032F  00A1               	movwf	strncmp@s1+1
  3586  0330  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3587  0331  00D7               	movwf	??_PROTOCOL_Loop
  3588  0332  0857               	movf	??_PROTOCOL_Loop,w
  3589  0333  00A2               	movwf	strncmp@s2
  3590  0334  3003               	movlw	3
  3591  0335  00A3               	movwf	strncmp@len
  3592  0336  3000               	movlw	0
  3593  0337  00A4               	movwf	strncmp@len+1
  3594  0338  3187  27BE  3182   	fcall	_strncmp
  3595  033B  0020               	movlb	0	; select bank0
  3596  033C  0820               	movf	?_strncmp,w
  3597  033D  0421               	iorwf	?_strncmp+1,w
  3598  033E  1D03               	btfss	3,2
  3599  033F  2B4A               	goto	l3877
  3600                           
  3601                           ;protocol.c: 176: PROTOCOL_SET(atoi(&buf[4]));
  3602  0340  3024               	movlw	(low ((_buf| (0+256)+4)))& (0+255)
  3603  0341  318D  25AB  3182   	fcall	_atoi
  3604  0344  0020               	movlb	0	; select bank0
  3605  0345  0826               	movf	?_atoi,w
  3606  0346  3188  20E1  3182   	fcall	_PROTOCOL_SET
  3607                           
  3608                           ;protocol.c: 177: } else if (!strncmp(("GET"), (buf), 3)) {
  3609  0349  2A3E               	goto	l633
  3610  034A                     l3877:	
  3611  034A  30EE               	movlw	low (STR_12| (0+32768))
  3612  034B  0020               	movlb	0	; select bank0
  3613  034C  00A0               	movwf	strncmp@s1
  3614  034D  3086               	movlw	high (STR_12| (0+32768))
  3615  034E  00A1               	movwf	strncmp@s1+1
  3616  034F  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3617  0350  00D7               	movwf	??_PROTOCOL_Loop
  3618  0351  0857               	movf	??_PROTOCOL_Loop,w
  3619  0352  00A2               	movwf	strncmp@s2
  3620  0353  3003               	movlw	3
  3621  0354  00A3               	movwf	strncmp@len
  3622  0355  3000               	movlw	0
  3623  0356  00A4               	movwf	strncmp@len+1
  3624  0357  3187  27BE  3182   	fcall	_strncmp
  3625  035A  0020               	movlb	0	; select bank0
  3626  035B  0820               	movf	?_strncmp,w
  3627  035C  0421               	iorwf	?_strncmp+1,w
  3628  035D  1D03               	btfss	3,2
  3629  035E  2B6E               	goto	l3881
  3630                           
  3631                           ;protocol.c: 178: printf("$:GET:%d\n", value);
  3632  035F  3063               	movlw	low (STR_13| (0+32768))
  3633  0360  00AE               	movwf	printf@f
  3634  0361  3086               	movlw	high (STR_13| (0+32768))
  3635  0362  00AF               	movwf	printf@f+1
  3636  0363  0863               	movf	_value,w
  3637  0364  00D7               	movwf	??_PROTOCOL_Loop
  3638  0365  01D8               	clrf	??_PROTOCOL_Loop+1
  3639  0366  0857               	movf	??_PROTOCOL_Loop,w
  3640  0367  00B0               	movwf	?_printf+2
  3641  0368  0858               	movf	??_PROTOCOL_Loop+1,w
  3642  0369  00B1               	movwf	?_printf+3
  3643  036A  3180  2069  3182   	fcall	_printf
  3644                           
  3645                           ;protocol.c: 179: } else if (!strncmp(("WDA"), (buf), 3)) {
  3646  036D  2A3E               	goto	l633
  3647  036E                     l3881:	
  3648  036E  30DA               	movlw	low (STR_14| (0+32768))
  3649  036F  0020               	movlb	0	; select bank0
  3650  0370  00A0               	movwf	strncmp@s1
  3651  0371  3086               	movlw	high (STR_14| (0+32768))
  3652  0372  00A1               	movwf	strncmp@s1+1
  3653  0373  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3654  0374  00D7               	movwf	??_PROTOCOL_Loop
  3655  0375  0857               	movf	??_PROTOCOL_Loop,w
  3656  0376  00A2               	movwf	strncmp@s2
  3657  0377  3003               	movlw	3
  3658  0378  00A3               	movwf	strncmp@len
  3659  0379  3000               	movlw	0
  3660  037A  00A4               	movwf	strncmp@len+1
  3661  037B  3187  27BE  3182   	fcall	_strncmp
  3662  037E  0020               	movlb	0	; select bank0
  3663  037F  0820               	movf	?_strncmp,w
  3664  0380  0421               	iorwf	?_strncmp+1,w
  3665  0381  1D03               	btfss	3,2
  3666  0382  2B91               	goto	l3887
  3667                           
  3668                           ;protocol.c: 180: device_address = atoi(&buf[4]);
  3669  0383  3024               	movlw	(low ((_buf| (0+256)+4)))& (0+255)
  3670  0384  318D  25AB  3182   	fcall	_atoi
  3671  0387  0020               	movlb	0	; select bank0
  3672  0388  0826               	movf	?_atoi,w
  3673  0389  00D7               	movwf	??_PROTOCOL_Loop
  3674  038A  0857               	movf	??_PROTOCOL_Loop,w
  3675  038B  00DA               	movwf	PROTOCOL_Loop@device_address
  3676                           
  3677                           ;protocol.c: 181: PROTOCOL_Write_Device_Address(device_address);
  3678  038C  085A               	movf	PROTOCOL_Loop@device_address,w
  3679  038D  3189  2137  3182   	fcall	_PROTOCOL_Write_Device_Address
  3680                           
  3681                           ;protocol.c: 182: } else if (!strncmp(("RDA"), (buf), 3)) {
  3682  0390  2A3E               	goto	l633
  3683  0391                     l3887:	
  3684  0391  30D6               	movlw	low (STR_15| (0+32768))
  3685  0392  0020               	movlb	0	; select bank0
  3686  0393  00A0               	movwf	strncmp@s1
  3687  0394  3086               	movlw	high (STR_15| (0+32768))
  3688  0395  00A1               	movwf	strncmp@s1+1
  3689  0396  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3690  0397  00D7               	movwf	??_PROTOCOL_Loop
  3691  0398  0857               	movf	??_PROTOCOL_Loop,w
  3692  0399  00A2               	movwf	strncmp@s2
  3693  039A  3003               	movlw	3
  3694  039B  00A3               	movwf	strncmp@len
  3695  039C  3000               	movlw	0
  3696  039D  00A4               	movwf	strncmp@len+1
  3697  039E  3187  27BE  3182   	fcall	_strncmp
  3698  03A1  0020               	movlb	0	; select bank0
  3699  03A2  0820               	movf	?_strncmp,w
  3700  03A3  0421               	iorwf	?_strncmp+1,w
  3701  03A4  1D03               	btfss	3,2
  3702  03A5  2BBC               	goto	l3893
  3703                           
  3704                           ;protocol.c: 183: device_address = PROTOCOL_Read_Device_Address();
  3705  03A6  3188  20A6  3182   	fcall	_PROTOCOL_Read_Device_Address
  3706  03A9  0020               	movlb	0	; select bank0
  3707  03AA  00D7               	movwf	??_PROTOCOL_Loop
  3708  03AB  0857               	movf	??_PROTOCOL_Loop,w
  3709  03AC  00DA               	movwf	PROTOCOL_Loop@device_address
  3710                           
  3711                           ;protocol.c: 184: printf("$:RDA:%d\n", device_address);
  3712  03AD  3059               	movlw	low (STR_16| (0+32768))
  3713  03AE  00AE               	movwf	printf@f
  3714  03AF  3086               	movlw	high (STR_16| (0+32768))
  3715  03B0  00AF               	movwf	printf@f+1
  3716  03B1  085A               	movf	PROTOCOL_Loop@device_address,w
  3717  03B2  00D7               	movwf	??_PROTOCOL_Loop
  3718  03B3  01D8               	clrf	??_PROTOCOL_Loop+1
  3719  03B4  0857               	movf	??_PROTOCOL_Loop,w
  3720  03B5  00B0               	movwf	?_printf+2
  3721  03B6  0858               	movf	??_PROTOCOL_Loop+1,w
  3722  03B7  00B1               	movwf	?_printf+3
  3723  03B8  3180  2069  3182   	fcall	_printf
  3724                           
  3725                           ;protocol.c: 185: } else {
  3726  03BB  2A3E               	goto	l633
  3727  03BC                     l3893:	
  3728                           
  3729                           ;protocol.c: 186: PROTOCOL_EXT(buf);
  3730  03BC  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3731  03BD  3188  2097  3182   	fcall	_PROTOCOL_EXT
  3732  03C0  2A3E               	goto	l633
  3733  03C1                     __end_of_PROTOCOL_Loop:	
  3734                           
  3735                           	psect	text4
  3736  07BE                     __ptext4:	
  3737 ;; *************** function _strncmp *****************
  3738 ;; Defined at:
  3739 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strncmp.c"
  3740 ;; Parameters:    Size  Location     Type
  3741 ;;  s1              2    0[BANK0 ] PTR const unsigned char 
  3742 ;;		 -> STR_15(4), STR_14(4), STR_12(4), STR_11(4), 
  3743 ;;		 -> STR_8(4), STR_7(4), STR_6(4), STR_4(4), 
  3744 ;;  s2              1    2[BANK0 ] PTR const unsigned char 
  3745 ;;		 -> buf(48), 
  3746 ;;  len             2    3[BANK0 ] unsigned int 
  3747 ;; Auto vars:     Size  Location     Type
  3748 ;;		None
  3749 ;; Return value:  Size  Location     Type
  3750 ;;                  2    0[BANK0 ] int 
  3751 ;; Registers used:
  3752 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  3753 ;; Tracked objects:
  3754 ;;		On entry : 0/0
  3755 ;;		On exit  : 0/0
  3756 ;;		Unchanged: 0/0
  3757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3758 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3759 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3760 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3761 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3762 ;;Total ram usage:        7 bytes
  3763 ;; Hardware stack levels used:    1
  3764 ;; Hardware stack levels required when called:    5
  3765 ;; This function calls:
  3766 ;;		Nothing
  3767 ;; This function is called by:
  3768 ;;		_PROTOCOL_Loop
  3769 ;; This function uses a non-reentrant model
  3770 ;;
  3771                           
  3772                           
  3773                           ;psect for function _strncmp
  3774  07BE                     _strncmp:	
  3775  07BE                     l3625:	
  3776                           ;incstack = 0
  3777                           ; Regs used in _strncmp: [wreg-fsr1h+status,2+status,0+pclath]
  3778                           
  3779  07BE  3001               	movlw	1
  3780  07BF  0020               	movlb	0	; select bank0
  3781  07C0  02A3               	subwf	strncmp@len,f
  3782  07C1  3000               	movlw	0
  3783  07C2  3BA4               	subwfb	strncmp@len+1,f
  3784  07C3  0A23               	incf	strncmp@len,w
  3785  07C4  1903               	btfsc	3,2
  3786  07C5  0A24               	incf	strncmp@len+1,w
  3787  07C6  1903               	btfsc	3,2
  3788  07C7  2FFD               	goto	l3627
  3789  07C8  0020               	movlb	0	; select bank0
  3790  07C9  0820               	movf	strncmp@s1,w
  3791  07CA  0084               	movwf	4
  3792  07CB  0821               	movf	strncmp@s1+1,w
  3793  07CC  0085               	movwf	5
  3794  07CD  0012               	moviw fsr0++
  3795  07CE  1903               	btfsc	3,2
  3796  07CF  2FDC               	goto	l3617
  3797  07D0  0822               	movf	strncmp@s2,w
  3798  07D1  0086               	movwf	6
  3799  07D2  3001               	movlw	1	; select bank2/3
  3800  07D3  0087               	movwf	7
  3801  07D4  0820               	movf	strncmp@s1,w
  3802  07D5  0084               	movwf	4
  3803  07D6  0821               	movf	strncmp@s1+1,w
  3804  07D7  0085               	movwf	5
  3805  07D8  0800               	movf	0,w	;code access
  3806  07D9  0601               	xorwf	1,w
  3807  07DA  1903               	skipnz
  3808  07DB  2FF4               	goto	l3621
  3809  07DC                     l3617:	
  3810  07DC  0822               	movf	strncmp@s2,w
  3811  07DD  0086               	movwf	6
  3812  07DE  3001               	movlw	1	; select bank2/3
  3813  07DF  0087               	movwf	7
  3814  07E0  0801               	movf	1,w
  3815  07E1  00A5               	movwf	??_strncmp
  3816  07E2  01A6               	clrf	??_strncmp+1
  3817  07E3  09A5               	comf	??_strncmp,f
  3818  07E4  09A6               	comf	??_strncmp+1,f
  3819  07E5  0AA5               	incf	??_strncmp,f
  3820  07E6  1903               	skipnz
  3821  07E7  0AA6               	incf	??_strncmp+1,f
  3822  07E8  0820               	movf	strncmp@s1,w
  3823  07E9  0084               	movwf	4
  3824  07EA  0821               	movf	strncmp@s1+1,w
  3825  07EB  0085               	movwf	5
  3826  07EC  0800               	movf	0,w	;code access
  3827  07ED  0725               	addwf	??_strncmp,w
  3828  07EE  00A0               	movwf	?_strncmp
  3829  07EF  0826               	movf	??_strncmp+1,w
  3830  07F0  1803               	skipnc
  3831  07F1  0A26               	incf	??_strncmp+1,w
  3832  07F2  00A1               	movwf	?_strncmp+1
  3833  07F3  0008               	return
  3834  07F4                     l3621:	
  3835  07F4  3001               	movlw	1
  3836  07F5  07A0               	addwf	strncmp@s1,f
  3837  07F6  3000               	movlw	0
  3838  07F7  3DA1               	addwfc	strncmp@s1+1,f
  3839  07F8  3001               	movlw	1
  3840  07F9  00A5               	movwf	??_strncmp
  3841  07FA  0825               	movf	??_strncmp,w
  3842  07FB  07A2               	addwf	strncmp@s2,f
  3843  07FC  2FBE               	goto	l3625
  3844  07FD                     l3627:	
  3845  07FD  01A0               	clrf	?_strncmp
  3846  07FE  01A1               	clrf	?_strncmp+1
  3847  07FF  0008               	return
  3848  0800                     __end_of_strncmp:	
  3849                           
  3850                           	psect	text5
  3851  0BA2                     __ptext5:	
  3852 ;; *************** function _inv_handler *****************
  3853 ;; Defined at:
  3854 ;;		line 22 in file "main.c"
  3855 ;; Parameters:    Size  Location     Type
  3856 ;;		None
  3857 ;; Auto vars:     Size  Location     Type
  3858 ;;  values          9   46[BANK0 ] float [3]
  3859 ;; Return value:  Size  Location     Type
  3860 ;;                  1    wreg      void 
  3861 ;; Registers used:
  3862 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3863 ;; Tracked objects:
  3864 ;;		On entry : 0/0
  3865 ;;		On exit  : 0/0
  3866 ;;		Unchanged: 0/0
  3867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3869 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3870 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3871 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3872 ;;Total ram usage:       10 bytes
  3873 ;; Hardware stack levels used:    1
  3874 ;; Hardware stack levels required when called:    9
  3875 ;; This function calls:
  3876 ;;		_PROTOCOL_I2C_Send_float
  3877 ;;		_get_accel
  3878 ;; This function is called by:
  3879 ;;		_main
  3880 ;;		_PROTOCOL_Loop
  3881 ;; This function uses a non-reentrant model
  3882 ;;
  3883                           
  3884                           
  3885                           ;psect for function _inv_handler
  3886  0BA2                     _inv_handler:	
  3887                           
  3888                           ;main.c: 23: float values[3];
  3889                           ;main.c: 24: LATCbits.LATC7 ^= 1;
  3890                           
  3891                           ;incstack = 0
  3892                           ; Regs used in _inv_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3893  0BA2  0022               	movlb	2	; select bank2
  3894  0BA3  0D0E               	rlf	14,w	;volatile
  3895  0BA4  0D0E               	rlf	14,w	;volatile
  3896  0BA5  3901               	andlw	1
  3897  0BA6  0020               	movlb	0	; select bank0
  3898  0BA7  00CD               	movwf	??_inv_handler
  3899  0BA8  3001               	movlw	1
  3900  0BA9  06CD               	xorwf	??_inv_handler,f
  3901  0BAA  0CCD               	rrf	??_inv_handler,f
  3902  0BAB  0CCD               	rrf	??_inv_handler,f
  3903  0BAC  0022               	movlb	2	; select bank2
  3904  0BAD  080E               	movf	14,w	;volatile
  3905  0BAE  0020               	movlb	0	; select bank0
  3906  0BAF  064D               	xorwf	??_inv_handler,w
  3907  0BB0  397F               	andlw	-129
  3908  0BB1  064D               	xorwf	??_inv_handler,w
  3909  0BB2  0022               	movlb	2	; select bank2
  3910  0BB3  008E               	movwf	14	;volatile
  3911                           
  3912                           ;main.c: 25: values[0] = get_accel(channel_AN3);
  3913  0BB4  3003               	movlw	3
  3914  0BB5  318C  245F  318B   	fcall	_get_accel
  3915  0BB8  0020               	movlb	0	; select bank0
  3916  0BB9  0845               	movf	?_get_accel,w
  3917  0BBA  00CE               	movwf	inv_handler@values
  3918  0BBB  0846               	movf	?_get_accel+1,w
  3919  0BBC  00CF               	movwf	inv_handler@values+1
  3920  0BBD  0847               	movf	?_get_accel+2,w
  3921  0BBE  00D0               	movwf	inv_handler@values+2
  3922                           
  3923                           ;main.c: 26: values[1] = get_accel(channel_AN7);
  3924  0BBF  3007               	movlw	7
  3925  0BC0  318C  245F  318B   	fcall	_get_accel
  3926  0BC3  0020               	movlb	0	; select bank0
  3927  0BC4  0845               	movf	?_get_accel,w
  3928  0BC5  00D1               	movwf	inv_handler@values+3
  3929  0BC6  0846               	movf	?_get_accel+1,w
  3930  0BC7  00D2               	movwf	inv_handler@values+4
  3931  0BC8  0847               	movf	?_get_accel+2,w
  3932  0BC9  00D3               	movwf	inv_handler@values+5
  3933                           
  3934                           ;main.c: 27: values[2] = get_accel(channel_AN8);
  3935  0BCA  3008               	movlw	8
  3936  0BCB  318C  245F  318B   	fcall	_get_accel
  3937  0BCE  0020               	movlb	0	; select bank0
  3938  0BCF  0845               	movf	?_get_accel,w
  3939  0BD0  00D4               	movwf	inv_handler@values+6
  3940  0BD1  0846               	movf	?_get_accel+1,w
  3941  0BD2  00D5               	movwf	inv_handler@values+7
  3942  0BD3  0847               	movf	?_get_accel+2,w
  3943  0BD4  00D6               	movwf	inv_handler@values+8
  3944                           
  3945                           ;main.c: 28: PROTOCOL_I2C_Send_float(3, values);
  3946  0BD5  304E               	movlw	(low (inv_handler@values| 0))& (0+255)
  3947  0BD6  00CD               	movwf	??_inv_handler
  3948  0BD7  084D               	movf	??_inv_handler,w
  3949  0BD8  00C6               	movwf	PROTOCOL_I2C_Send_float@pbuffer
  3950  0BD9  3003               	movlw	3
  3951  0BDA  3183  23C1         	fcall	_PROTOCOL_I2C_Send_float
  3952  0BDC  0008               	return
  3953  0BDD                     __end_of_inv_handler:	
  3954                           
  3955                           	psect	text6
  3956  0C5F                     __ptext6:	
  3957 ;; *************** function _get_accel *****************
  3958 ;; Defined at:
  3959 ;;		line 13 in file "main.c"
  3960 ;; Parameters:    Size  Location     Type
  3961 ;;  ch              1    wreg     enum E2982
  3962 ;; Auto vars:     Size  Location     Type
  3963 ;;  ch              1   44[BANK0 ] enum E2982
  3964 ;;  steps           3   41[BANK0 ] float 
  3965 ;; Return value:  Size  Location     Type
  3966 ;;                  3   37[BANK0 ] float 
  3967 ;; Registers used:
  3968 ;;		wreg, status,2, status,0, pclath, cstack
  3969 ;; Tracked objects:
  3970 ;;		On entry : 0/0
  3971 ;;		On exit  : 0/0
  3972 ;;		Unchanged: 0/0
  3973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3974 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3975 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3977 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3978 ;;Total ram usage:        8 bytes
  3979 ;; Hardware stack levels used:    1
  3980 ;; Hardware stack levels required when called:    7
  3981 ;; This function calls:
  3982 ;;		_ADC_GetConversionResult
  3983 ;;		_ADC_IsConversionDone
  3984 ;;		_ADC_SelectChannel
  3985 ;;		_ADC_StartConversion
  3986 ;;		___ftadd
  3987 ;;		___ftdiv
  3988 ;;		___lwtoft
  3989 ;; This function is called by:
  3990 ;;		_inv_handler
  3991 ;; This function uses a non-reentrant model
  3992 ;;
  3993                           
  3994                           
  3995                           ;psect for function _get_accel
  3996  0C5F                     _get_accel:	
  3997                           
  3998                           ;incstack = 0
  3999                           ; Regs used in _get_accel: [wreg+status,2+status,0+pclath+cstack]
  4000                           ;get_accel@ch stored from wreg
  4001  0C5F  0020               	movlb	0	; select bank0
  4002  0C60  00CC               	movwf	get_accel@ch
  4003                           
  4004                           ;main.c: 14: float steps;
  4005                           ;main.c: 15: ADC_SelectChannel(ch);
  4006  0C61  084C               	movf	get_accel@ch,w
  4007  0C62  3189  2164  318C   	fcall	_ADC_SelectChannel
  4008                           
  4009                           ;main.c: 16: ADC_StartConversion();
  4010  0C65  3188  20AC  318C   	fcall	_ADC_StartConversion
  4011  0C68                     l3387:	
  4012                           ;main.c: 17: while(!ADC_IsConversionDone());
  4013                           
  4014  0C68  3188  20E8  318C   	fcall	_ADC_IsConversionDone
  4015  0C6B  3A00               	xorlw	0
  4016  0C6C  1903               	skipnz
  4017  0C6D  2C68               	goto	l3387
  4018                           
  4019                           ;main.c: 18: steps = (float)ADC_GetConversionResult();
  4020  0C6E  3189  2109  318C   	fcall	_ADC_GetConversionResult
  4021  0C71  0020               	movlb	0	; select bank0
  4022  0C72  0821               	movf	?_ADC_GetConversionResult+1,w
  4023  0C73  00A9               	movwf	___lwtoft@c+1
  4024  0C74  0820               	movf	?_ADC_GetConversionResult,w
  4025  0C75  00A8               	movwf	___lwtoft@c
  4026  0C76  3189  2186  318C   	fcall	___lwtoft
  4027  0C79  0020               	movlb	0	; select bank0
  4028  0C7A  0828               	movf	?___lwtoft,w
  4029  0C7B  00C9               	movwf	get_accel@steps
  4030  0C7C  0829               	movf	?___lwtoft+1,w
  4031  0C7D  00CA               	movwf	get_accel@steps+1
  4032  0C7E  082A               	movf	?___lwtoft+2,w
  4033  0C7F  00CB               	movwf	get_accel@steps+2
  4034                           
  4035                           ;main.c: 19: return (steps - 512.0)/204.8;
  4036  0C80  30CD               	movlw	205
  4037  0C81  00B5               	movwf	___ftdiv@f2
  4038  0C82  304C               	movlw	76
  4039  0C83  00B6               	movwf	___ftdiv@f2+1
  4040  0C84  3043               	movlw	67
  4041  0C85  00B7               	movwf	___ftdiv@f2+2
  4042  0C86  3000               	movlw	0
  4043  0C87  00A8               	movwf	___ftadd@f1
  4044  0C88  3000               	movlw	0
  4045  0C89  00A9               	movwf	___ftadd@f1+1
  4046  0C8A  30C4               	movlw	196
  4047  0C8B  00AA               	movwf	___ftadd@f1+2
  4048  0C8C  0849               	movf	get_accel@steps,w
  4049  0C8D  00AB               	movwf	___ftadd@f2
  4050  0C8E  084A               	movf	get_accel@steps+1,w
  4051  0C8F  00AC               	movwf	___ftadd@f2+1
  4052  0C90  084B               	movf	get_accel@steps+2,w
  4053  0C91  00AD               	movwf	___ftadd@f2+2
  4054  0C92  3185  2540  318C   	fcall	___ftadd
  4055  0C95  0020               	movlb	0	; select bank0
  4056  0C96  0828               	movf	?___ftadd,w
  4057  0C97  00B8               	movwf	___ftdiv@f1
  4058  0C98  0829               	movf	?___ftadd+1,w
  4059  0C99  00B9               	movwf	___ftdiv@f1+1
  4060  0C9A  082A               	movf	?___ftadd+2,w
  4061  0C9B  00BA               	movwf	___ftdiv@f1+2
  4062  0C9C  318E  26A3         	fcall	___ftdiv
  4063  0C9E  0020               	movlb	0	; select bank0
  4064  0C9F  0835               	movf	?___ftdiv,w
  4065  0CA0  00C5               	movwf	?_get_accel
  4066  0CA1  0836               	movf	?___ftdiv+1,w
  4067  0CA2  00C6               	movwf	?_get_accel+1
  4068  0CA3  0837               	movf	?___ftdiv+2,w
  4069  0CA4  00C7               	movwf	?_get_accel+2
  4070  0CA5  0008               	return
  4071  0CA6                     __end_of_get_accel:	
  4072                           
  4073                           	psect	text7
  4074  0986                     __ptext7:	
  4075 ;; *************** function ___lwtoft *****************
  4076 ;; Defined at:
  4077 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwtoft.c"
  4078 ;; Parameters:    Size  Location     Type
  4079 ;;  c               2    8[BANK0 ] unsigned int 
  4080 ;; Auto vars:     Size  Location     Type
  4081 ;;		None
  4082 ;; Return value:  Size  Location     Type
  4083 ;;                  3    8[BANK0 ] float 
  4084 ;; Registers used:
  4085 ;;		wreg, status,2, status,0, pclath, cstack
  4086 ;; Tracked objects:
  4087 ;;		On entry : 0/0
  4088 ;;		On exit  : 0/0
  4089 ;;		Unchanged: 0/0
  4090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4091 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4092 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4093 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4094 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4095 ;;Total ram usage:        4 bytes
  4096 ;; Hardware stack levels used:    1
  4097 ;; Hardware stack levels required when called:    6
  4098 ;; This function calls:
  4099 ;;		___ftpack
  4100 ;; This function is called by:
  4101 ;;		_get_accel
  4102 ;; This function uses a non-reentrant model
  4103 ;;
  4104                           
  4105                           
  4106                           ;psect for function ___lwtoft
  4107  0986                     ___lwtoft:	
  4108                           
  4109                           ;incstack = 0
  4110                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  4111  0986  0020               	movlb	0	; select bank0
  4112  0987  0828               	movf	___lwtoft@c,w
  4113  0988  00A0               	movwf	___ftpack@arg
  4114  0989  0829               	movf	___lwtoft@c+1,w
  4115  098A  00A1               	movwf	___ftpack@arg+1
  4116  098B  01A2               	clrf	___ftpack@arg+2
  4117  098C  308E               	movlw	142
  4118  098D  00AB               	movwf	??___lwtoft
  4119  098E  082B               	movf	??___lwtoft,w
  4120  098F  00A3               	movwf	___ftpack@exp
  4121  0990  01A4               	clrf	___ftpack@sign
  4122  0991  318D  2546         	fcall	___ftpack
  4123  0993  0020               	movlb	0	; select bank0
  4124  0994  0820               	movf	?___ftpack,w
  4125  0995  00A8               	movwf	?___lwtoft
  4126  0996  0821               	movf	?___ftpack+1,w
  4127  0997  00A9               	movwf	?___lwtoft+1
  4128  0998  0822               	movf	?___ftpack+2,w
  4129  0999  00AA               	movwf	?___lwtoft+2
  4130  099A  0008               	return
  4131  099B                     __end_of___lwtoft:	
  4132                           
  4133                           	psect	text8
  4134  0EA3                     __ptext8:	
  4135 ;; *************** function ___ftdiv *****************
  4136 ;; Defined at:
  4137 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftdiv.c"
  4138 ;; Parameters:    Size  Location     Type
  4139 ;;  f2              3   21[BANK0 ] float 
  4140 ;;  f1              3   24[BANK0 ] float 
  4141 ;; Auto vars:     Size  Location     Type
  4142 ;;  f3              3   32[BANK0 ] float 
  4143 ;;  sign            1   36[BANK0 ] unsigned char 
  4144 ;;  exp             1   35[BANK0 ] unsigned char 
  4145 ;;  cntr            1   31[BANK0 ] unsigned char 
  4146 ;; Return value:  Size  Location     Type
  4147 ;;                  3   21[BANK0 ] float 
  4148 ;; Registers used:
  4149 ;;		wreg, status,2, status,0, pclath, cstack
  4150 ;; Tracked objects:
  4151 ;;		On entry : 0/0
  4152 ;;		On exit  : 0/0
  4153 ;;		Unchanged: 0/0
  4154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4155 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4156 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4157 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4158 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4159 ;;Total ram usage:       16 bytes
  4160 ;; Hardware stack levels used:    1
  4161 ;; Hardware stack levels required when called:    6
  4162 ;; This function calls:
  4163 ;;		___ftpack
  4164 ;; This function is called by:
  4165 ;;		_get_accel
  4166 ;; This function uses a non-reentrant model
  4167 ;;
  4168                           
  4169                           
  4170                           ;psect for function ___ftdiv
  4171  0EA3                     ___ftdiv:	
  4172                           
  4173                           ;incstack = 0
  4174                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  4175  0EA3  0020               	movlb	0	; select bank0
  4176  0EA4  0838               	movf	___ftdiv@f1,w
  4177  0EA5  00BB               	movwf	??___ftdiv
  4178  0EA6  0839               	movf	___ftdiv@f1+1,w
  4179  0EA7  00BC               	movwf	??___ftdiv+1
  4180  0EA8  083A               	movf	___ftdiv@f1+2,w
  4181  0EA9  00BD               	movwf	??___ftdiv+2
  4182  0EAA  1003               	clrc
  4183  0EAB  0D3C               	rlf	??___ftdiv+1,w
  4184  0EAC  0D3D               	rlf	??___ftdiv+2,w
  4185  0EAD  00BE               	movwf	??___ftdiv+3
  4186  0EAE  083E               	movf	??___ftdiv+3,w
  4187  0EAF  00C3               	movwf	___ftdiv@exp
  4188  0EB0  0843               	movf	___ftdiv@exp,w
  4189  0EB1  1D03               	btfss	3,2
  4190  0EB2  2EBA               	goto	l3161
  4191  0EB3  3000               	movlw	0
  4192  0EB4  00B5               	movwf	?___ftdiv
  4193  0EB5  3000               	movlw	0
  4194  0EB6  00B6               	movwf	?___ftdiv+1
  4195  0EB7  3000               	movlw	0
  4196  0EB8  00B7               	movwf	?___ftdiv+2
  4197  0EB9  0008               	return
  4198  0EBA                     l3161:	
  4199  0EBA  0835               	movf	___ftdiv@f2,w
  4200  0EBB  00BB               	movwf	??___ftdiv
  4201  0EBC  0836               	movf	___ftdiv@f2+1,w
  4202  0EBD  00BC               	movwf	??___ftdiv+1
  4203  0EBE  0837               	movf	___ftdiv@f2+2,w
  4204  0EBF  00BD               	movwf	??___ftdiv+2
  4205  0EC0  1003               	clrc
  4206  0EC1  0D3C               	rlf	??___ftdiv+1,w
  4207  0EC2  0D3D               	rlf	??___ftdiv+2,w
  4208  0EC3  00BE               	movwf	??___ftdiv+3
  4209  0EC4  083E               	movf	??___ftdiv+3,w
  4210  0EC5  00C4               	movwf	___ftdiv@sign
  4211  0EC6  0844               	movf	___ftdiv@sign,w
  4212  0EC7  1D03               	btfss	3,2
  4213  0EC8  2ED0               	goto	l3167
  4214  0EC9  3000               	movlw	0
  4215  0ECA  00B5               	movwf	?___ftdiv
  4216  0ECB  3000               	movlw	0
  4217  0ECC  00B6               	movwf	?___ftdiv+1
  4218  0ECD  3000               	movlw	0
  4219  0ECE  00B7               	movwf	?___ftdiv+2
  4220  0ECF  0008               	return
  4221  0ED0                     l3167:	
  4222  0ED0  3000               	movlw	0
  4223  0ED1  00C0               	movwf	___ftdiv@f3
  4224  0ED2  3000               	movlw	0
  4225  0ED3  00C1               	movwf	___ftdiv@f3+1
  4226  0ED4  3000               	movlw	0
  4227  0ED5  00C2               	movwf	___ftdiv@f3+2
  4228  0ED6  3089               	movlw	137
  4229  0ED7  0744               	addwf	___ftdiv@sign,w
  4230  0ED8  00BB               	movwf	??___ftdiv
  4231  0ED9  083B               	movf	??___ftdiv,w
  4232  0EDA  02C3               	subwf	___ftdiv@exp,f
  4233  0EDB  0838               	movf	___ftdiv@f1,w
  4234  0EDC  00BB               	movwf	??___ftdiv
  4235  0EDD  0839               	movf	___ftdiv@f1+1,w
  4236  0EDE  00BC               	movwf	??___ftdiv+1
  4237  0EDF  083A               	movf	___ftdiv@f1+2,w
  4238  0EE0  00BD               	movwf	??___ftdiv+2
  4239  0EE1  3010               	movlw	16
  4240  0EE2                     u3145:	
  4241  0EE2  36BD               	lsrf	??___ftdiv+2,f
  4242  0EE3  0CBC               	rrf	??___ftdiv+1,f
  4243  0EE4  0CBB               	rrf	??___ftdiv,f
  4244  0EE5  0B89               	decfsz	9,f
  4245  0EE6  2EE2               	goto	u3145
  4246  0EE7  083B               	movf	??___ftdiv,w
  4247  0EE8  00BE               	movwf	??___ftdiv+3
  4248  0EE9  083E               	movf	??___ftdiv+3,w
  4249  0EEA  00C4               	movwf	___ftdiv@sign
  4250  0EEB  0835               	movf	___ftdiv@f2,w
  4251  0EEC  00BB               	movwf	??___ftdiv
  4252  0EED  0836               	movf	___ftdiv@f2+1,w
  4253  0EEE  00BC               	movwf	??___ftdiv+1
  4254  0EEF  0837               	movf	___ftdiv@f2+2,w
  4255  0EF0  00BD               	movwf	??___ftdiv+2
  4256  0EF1  3010               	movlw	16
  4257  0EF2                     u3155:	
  4258  0EF2  36BD               	lsrf	??___ftdiv+2,f
  4259  0EF3  0CBC               	rrf	??___ftdiv+1,f
  4260  0EF4  0CBB               	rrf	??___ftdiv,f
  4261  0EF5  0B89               	decfsz	9,f
  4262  0EF6  2EF2               	goto	u3155
  4263  0EF7  083B               	movf	??___ftdiv,w
  4264  0EF8  00BE               	movwf	??___ftdiv+3
  4265  0EF9  083E               	movf	??___ftdiv+3,w
  4266  0EFA  06C4               	xorwf	___ftdiv@sign,f
  4267  0EFB  3080               	movlw	128
  4268  0EFC  00BB               	movwf	??___ftdiv
  4269  0EFD  083B               	movf	??___ftdiv,w
  4270  0EFE  05C4               	andwf	___ftdiv@sign,f
  4271  0EFF  17B9               	bsf	___ftdiv@f1+1,7
  4272  0F00  30FF               	movlw	255
  4273  0F01  05B8               	andwf	___ftdiv@f1,f
  4274  0F02  30FF               	movlw	255
  4275  0F03  05B9               	andwf	___ftdiv@f1+1,f
  4276  0F04  3000               	movlw	0
  4277  0F05  05BA               	andwf	___ftdiv@f1+2,f
  4278  0F06  17B6               	bsf	___ftdiv@f2+1,7
  4279  0F07  30FF               	movlw	255
  4280  0F08  05B5               	andwf	___ftdiv@f2,f
  4281  0F09  30FF               	movlw	255
  4282  0F0A  05B6               	andwf	___ftdiv@f2+1,f
  4283  0F0B  3000               	movlw	0
  4284  0F0C  05B7               	andwf	___ftdiv@f2+2,f
  4285  0F0D  3018               	movlw	24
  4286  0F0E  00BB               	movwf	??___ftdiv
  4287  0F0F  083B               	movf	??___ftdiv,w
  4288  0F10  00BF               	movwf	___ftdiv@cntr
  4289  0F11                     l3181:	
  4290  0F11  3001               	movlw	1
  4291  0F12                     u3165:	
  4292  0F12  35C0               	lslf	___ftdiv@f3,f
  4293  0F13  0DC1               	rlf	___ftdiv@f3+1,f
  4294  0F14  0DC2               	rlf	___ftdiv@f3+2,f
  4295  0F15  0B89               	decfsz	9,f
  4296  0F16  2F12               	goto	u3165
  4297  0F17  0837               	movf	___ftdiv@f2+2,w
  4298  0F18  023A               	subwf	___ftdiv@f1+2,w
  4299  0F19  1D03               	skipz
  4300  0F1A  2F21               	goto	u3175
  4301  0F1B  0836               	movf	___ftdiv@f2+1,w
  4302  0F1C  0239               	subwf	___ftdiv@f1+1,w
  4303  0F1D  1D03               	skipz
  4304  0F1E  2F21               	goto	u3175
  4305  0F1F  0835               	movf	___ftdiv@f2,w
  4306  0F20  0238               	subwf	___ftdiv@f1,w
  4307  0F21                     u3175:	
  4308  0F21  1C03               	skipc
  4309  0F22  2F2A               	goto	l3189
  4310  0F23  0835               	movf	___ftdiv@f2,w
  4311  0F24  02B8               	subwf	___ftdiv@f1,f
  4312  0F25  0836               	movf	___ftdiv@f2+1,w
  4313  0F26  3BB9               	subwfb	___ftdiv@f1+1,f
  4314  0F27  0837               	movf	___ftdiv@f2+2,w
  4315  0F28  3BBA               	subwfb	___ftdiv@f1+2,f
  4316  0F29  1440               	bsf	___ftdiv@f3,0
  4317  0F2A                     l3189:	
  4318  0F2A  3001               	movlw	1
  4319  0F2B                     u3185:	
  4320  0F2B  35B8               	lslf	___ftdiv@f1,f
  4321  0F2C  0DB9               	rlf	___ftdiv@f1+1,f
  4322  0F2D  0DBA               	rlf	___ftdiv@f1+2,f
  4323  0F2E  0B89               	decfsz	9,f
  4324  0F2F  2F2B               	goto	u3185
  4325  0F30  3001               	movlw	1
  4326  0F31  02BF               	subwf	___ftdiv@cntr,f
  4327  0F32  1D03               	btfss	3,2
  4328  0F33  2F11               	goto	l3181
  4329  0F34  0840               	movf	___ftdiv@f3,w
  4330  0F35  00A0               	movwf	___ftpack@arg
  4331  0F36  0841               	movf	___ftdiv@f3+1,w
  4332  0F37  00A1               	movwf	___ftpack@arg+1
  4333  0F38  0842               	movf	___ftdiv@f3+2,w
  4334  0F39  00A2               	movwf	___ftpack@arg+2
  4335  0F3A  0843               	movf	___ftdiv@exp,w
  4336  0F3B  00BB               	movwf	??___ftdiv
  4337  0F3C  083B               	movf	??___ftdiv,w
  4338  0F3D  00A3               	movwf	___ftpack@exp
  4339  0F3E  0844               	movf	___ftdiv@sign,w
  4340  0F3F  00BC               	movwf	??___ftdiv+1
  4341  0F40  083C               	movf	??___ftdiv+1,w
  4342  0F41  00A4               	movwf	___ftpack@sign
  4343  0F42  318D  2546         	fcall	___ftpack
  4344  0F44  0020               	movlb	0	; select bank0
  4345  0F45  0820               	movf	?___ftpack,w
  4346  0F46  00B5               	movwf	?___ftdiv
  4347  0F47  0821               	movf	?___ftpack+1,w
  4348  0F48  00B6               	movwf	?___ftdiv+1
  4349  0F49  0822               	movf	?___ftpack+2,w
  4350  0F4A  00B7               	movwf	?___ftdiv+2
  4351  0F4B  0008               	return
  4352  0F4C                     __end_of___ftdiv:	
  4353                           
  4354                           	psect	text9
  4355  0540                     __ptext9:	
  4356 ;; *************** function ___ftadd *****************
  4357 ;; Defined at:
  4358 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftadd.c"
  4359 ;; Parameters:    Size  Location     Type
  4360 ;;  f1              3    8[BANK0 ] float 
  4361 ;;  f2              3   11[BANK0 ] float 
  4362 ;; Auto vars:     Size  Location     Type
  4363 ;;  exp1            1   20[BANK0 ] unsigned char 
  4364 ;;  exp2            1   19[BANK0 ] unsigned char 
  4365 ;;  sign            1   18[BANK0 ] unsigned char 
  4366 ;; Return value:  Size  Location     Type
  4367 ;;                  3    8[BANK0 ] float 
  4368 ;; Registers used:
  4369 ;;		wreg, status,2, status,0, pclath, cstack
  4370 ;; Tracked objects:
  4371 ;;		On entry : 0/0
  4372 ;;		On exit  : 0/0
  4373 ;;		Unchanged: 0/0
  4374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4375 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4376 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4377 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4378 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4379 ;;Total ram usage:       13 bytes
  4380 ;; Hardware stack levels used:    1
  4381 ;; Hardware stack levels required when called:    6
  4382 ;; This function calls:
  4383 ;;		___ftpack
  4384 ;; This function is called by:
  4385 ;;		_get_accel
  4386 ;; This function uses a non-reentrant model
  4387 ;;
  4388                           
  4389                           
  4390                           ;psect for function ___ftadd
  4391  0540                     ___ftadd:	
  4392                           
  4393                           ;incstack = 0
  4394                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  4395  0540  0020               	movlb	0	; select bank0
  4396  0541  0828               	movf	___ftadd@f1,w
  4397  0542  00AE               	movwf	??___ftadd
  4398  0543  0829               	movf	___ftadd@f1+1,w
  4399  0544  00AF               	movwf	??___ftadd+1
  4400  0545  082A               	movf	___ftadd@f1+2,w
  4401  0546  00B0               	movwf	??___ftadd+2
  4402  0547  1003               	clrc
  4403  0548  0D2F               	rlf	??___ftadd+1,w
  4404  0549  0D30               	rlf	??___ftadd+2,w
  4405  054A  00B1               	movwf	??___ftadd+3
  4406  054B  0831               	movf	??___ftadd+3,w
  4407  054C  00B4               	movwf	___ftadd@exp1
  4408  054D  082B               	movf	___ftadd@f2,w
  4409  054E  00AE               	movwf	??___ftadd
  4410  054F  082C               	movf	___ftadd@f2+1,w
  4411  0550  00AF               	movwf	??___ftadd+1
  4412  0551  082D               	movf	___ftadd@f2+2,w
  4413  0552  00B0               	movwf	??___ftadd+2
  4414  0553  1003               	clrc
  4415  0554  0D2F               	rlf	??___ftadd+1,w
  4416  0555  0D30               	rlf	??___ftadd+2,w
  4417  0556  00B1               	movwf	??___ftadd+3
  4418  0557  0831               	movf	??___ftadd+3,w
  4419  0558  00B3               	movwf	___ftadd@exp2
  4420  0559  0834               	movf	___ftadd@exp1,w
  4421  055A  1903               	btfsc	3,2
  4422  055B  2D68               	goto	l3091
  4423  055C  0833               	movf	___ftadd@exp2,w
  4424  055D  0234               	subwf	___ftadd@exp1,w
  4425  055E  1803               	skipnc
  4426  055F  2D6F               	goto	l3095
  4427  0560  0334               	decf	___ftadd@exp1,w
  4428  0561  3AFF               	xorlw	255
  4429  0562  0733               	addwf	___ftadd@exp2,w
  4430  0563  00AE               	movwf	??___ftadd
  4431  0564  3019               	movlw	25
  4432  0565  022E               	subwf	??___ftadd,w
  4433  0566  1C03               	skipc
  4434  0567  2D6F               	goto	l3095
  4435  0568                     l3091:	
  4436  0568  082B               	movf	___ftadd@f2,w
  4437  0569  00A8               	movwf	?___ftadd
  4438  056A  082C               	movf	___ftadd@f2+1,w
  4439  056B  00A9               	movwf	?___ftadd+1
  4440  056C  082D               	movf	___ftadd@f2+2,w
  4441  056D  00AA               	movwf	?___ftadd+2
  4442  056E  0008               	return
  4443  056F                     l3095:	
  4444  056F  0833               	movf	___ftadd@exp2,w
  4445  0570  1903               	btfsc	3,2
  4446  0571  0008               	return
  4447  0572  0834               	movf	___ftadd@exp1,w
  4448  0573  0233               	subwf	___ftadd@exp2,w
  4449  0574  1803               	skipnc
  4450  0575  2D7E               	goto	l3101
  4451  0576  0333               	decf	___ftadd@exp2,w
  4452  0577  3AFF               	xorlw	255
  4453  0578  0734               	addwf	___ftadd@exp1,w
  4454  0579  00AE               	movwf	??___ftadd
  4455  057A  3019               	movlw	25
  4456  057B  022E               	subwf	??___ftadd,w
  4457  057C  1803               	btfsc	3,0
  4458  057D  0008               	return
  4459  057E                     l3101:	
  4460  057E  3006               	movlw	6
  4461  057F  00AE               	movwf	??___ftadd
  4462  0580  082E               	movf	??___ftadd,w
  4463  0581  00B2               	movwf	___ftadd@sign
  4464  0582  1BAA               	btfsc	___ftadd@f1+2,7
  4465  0583  17B2               	bsf	___ftadd@sign,7
  4466  0584  1BAD               	btfsc	___ftadd@f2+2,7
  4467  0585  1732               	bsf	___ftadd@sign,6
  4468  0586  17A9               	bsf	___ftadd@f1+1,7
  4469  0587  30FF               	movlw	255
  4470  0588  05A8               	andwf	___ftadd@f1,f
  4471  0589  30FF               	movlw	255
  4472  058A  05A9               	andwf	___ftadd@f1+1,f
  4473  058B  3000               	movlw	0
  4474  058C  05AA               	andwf	___ftadd@f1+2,f
  4475  058D  17AC               	bsf	___ftadd@f2+1,7
  4476  058E  30FF               	movlw	255
  4477  058F  05AB               	andwf	___ftadd@f2,f
  4478  0590  30FF               	movlw	255
  4479  0591  05AC               	andwf	___ftadd@f2+1,f
  4480  0592  3000               	movlw	0
  4481  0593  05AD               	andwf	___ftadd@f2+2,f
  4482  0594  0833               	movf	___ftadd@exp2,w
  4483  0595  0234               	subwf	___ftadd@exp1,w
  4484  0596  1803               	skipnc
  4485  0597  2DBA               	goto	l3123
  4486  0598                     l3113:	
  4487  0598  3001               	movlw	1
  4488  0599                     u2985:	
  4489  0599  35AB               	lslf	___ftadd@f2,f
  4490  059A  0DAC               	rlf	___ftadd@f2+1,f
  4491  059B  0DAD               	rlf	___ftadd@f2+2,f
  4492  059C  0B89               	decfsz	9,f
  4493  059D  2D99               	goto	u2985
  4494  059E  3001               	movlw	1
  4495  059F  02B3               	subwf	___ftadd@exp2,f
  4496  05A0  0833               	movf	___ftadd@exp2,w
  4497  05A1  0634               	xorwf	___ftadd@exp1,w
  4498  05A2  1903               	skipnz
  4499  05A3  2DB5               	goto	l3121
  4500  05A4  3001               	movlw	1
  4501  05A5  02B2               	subwf	___ftadd@sign,f
  4502  05A6  0832               	movf	___ftadd@sign,w
  4503  05A7  3907               	andlw	7
  4504  05A8  1903               	btfsc	3,2
  4505  05A9  2DB5               	goto	l3121
  4506  05AA  2D98               	goto	l3113
  4507  05AB                     l3119:	
  4508  05AB  3001               	movlw	1
  4509  05AC                     u3015:	
  4510  05AC  36AA               	lsrf	___ftadd@f1+2,f
  4511  05AD  0CA9               	rrf	___ftadd@f1+1,f
  4512  05AE  0CA8               	rrf	___ftadd@f1,f
  4513  05AF  0B89               	decfsz	9,f
  4514  05B0  2DAC               	goto	u3015
  4515  05B1  3001               	movlw	1
  4516  05B2  00AE               	movwf	??___ftadd
  4517  05B3  082E               	movf	??___ftadd,w
  4518  05B4  07B4               	addwf	___ftadd@exp1,f
  4519  05B5                     l3121:	
  4520  05B5  0834               	movf	___ftadd@exp1,w
  4521  05B6  0633               	xorwf	___ftadd@exp2,w
  4522  05B7  1903               	btfsc	3,2
  4523  05B8  2DDF               	goto	l1115
  4524  05B9  2DAB               	goto	l3119
  4525  05BA                     l3123:	
  4526  05BA  0834               	movf	___ftadd@exp1,w
  4527  05BB  0233               	subwf	___ftadd@exp2,w
  4528  05BC  1803               	skipnc
  4529  05BD  2DDF               	goto	l1115
  4530  05BE                     l3125:	
  4531  05BE  3001               	movlw	1
  4532  05BF                     u3045:	
  4533  05BF  35A8               	lslf	___ftadd@f1,f
  4534  05C0  0DA9               	rlf	___ftadd@f1+1,f
  4535  05C1  0DAA               	rlf	___ftadd@f1+2,f
  4536  05C2  0B89               	decfsz	9,f
  4537  05C3  2DBF               	goto	u3045
  4538  05C4  3001               	movlw	1
  4539  05C5  02B4               	subwf	___ftadd@exp1,f
  4540  05C6  0833               	movf	___ftadd@exp2,w
  4541  05C7  0634               	xorwf	___ftadd@exp1,w
  4542  05C8  1903               	skipnz
  4543  05C9  2DDB               	goto	l3133
  4544  05CA  3001               	movlw	1
  4545  05CB  02B2               	subwf	___ftadd@sign,f
  4546  05CC  0832               	movf	___ftadd@sign,w
  4547  05CD  3907               	andlw	7
  4548  05CE  1903               	btfsc	3,2
  4549  05CF  2DDB               	goto	l3133
  4550  05D0  2DBE               	goto	l3125
  4551  05D1                     l3131:	
  4552  05D1  3001               	movlw	1
  4553  05D2                     u3075:	
  4554  05D2  36AD               	lsrf	___ftadd@f2+2,f
  4555  05D3  0CAC               	rrf	___ftadd@f2+1,f
  4556  05D4  0CAB               	rrf	___ftadd@f2,f
  4557  05D5  0B89               	decfsz	9,f
  4558  05D6  2DD2               	goto	u3075
  4559  05D7  3001               	movlw	1
  4560  05D8  00AE               	movwf	??___ftadd
  4561  05D9  082E               	movf	??___ftadd,w
  4562  05DA  07B3               	addwf	___ftadd@exp2,f
  4563  05DB                     l3133:	
  4564  05DB  0834               	movf	___ftadd@exp1,w
  4565  05DC  0633               	xorwf	___ftadd@exp2,w
  4566  05DD  1D03               	skipz
  4567  05DE  2DD1               	goto	l3131
  4568  05DF                     l1115:	
  4569  05DF  1FB2               	btfss	___ftadd@sign,7
  4570  05E0  2DF1               	goto	l3137
  4571  05E1  30FF               	movlw	255
  4572  05E2  06A8               	xorwf	___ftadd@f1,f
  4573  05E3  30FF               	movlw	255
  4574  05E4  06A9               	xorwf	___ftadd@f1+1,f
  4575  05E5  30FF               	movlw	255
  4576  05E6  06AA               	xorwf	___ftadd@f1+2,f
  4577  05E7  3001               	movlw	1
  4578  05E8  07A8               	addwf	___ftadd@f1,f
  4579  05E9  3000               	movlw	0
  4580  05EA  1803               	skipnc
  4581  05EB  3001               	movlw	1
  4582  05EC  07A9               	addwf	___ftadd@f1+1,f
  4583  05ED  3000               	movlw	0
  4584  05EE  1803               	skipnc
  4585  05EF  3001               	movlw	1
  4586  05F0  07AA               	addwf	___ftadd@f1+2,f
  4587  05F1                     l3137:	
  4588  05F1  1F32               	btfss	___ftadd@sign,6
  4589  05F2  2E03               	goto	l3141
  4590  05F3  30FF               	movlw	255
  4591  05F4  06AB               	xorwf	___ftadd@f2,f
  4592  05F5  30FF               	movlw	255
  4593  05F6  06AC               	xorwf	___ftadd@f2+1,f
  4594  05F7  30FF               	movlw	255
  4595  05F8  06AD               	xorwf	___ftadd@f2+2,f
  4596  05F9  3001               	movlw	1
  4597  05FA  07AB               	addwf	___ftadd@f2,f
  4598  05FB  3000               	movlw	0
  4599  05FC  1803               	skipnc
  4600  05FD  3001               	movlw	1
  4601  05FE  07AC               	addwf	___ftadd@f2+1,f
  4602  05FF  3000               	movlw	0
  4603  0600  1803               	skipnc
  4604  0601  3001               	movlw	1
  4605  0602  07AD               	addwf	___ftadd@f2+2,f
  4606  0603                     l3141:	
  4607  0603  01B2               	clrf	___ftadd@sign
  4608  0604  0828               	movf	___ftadd@f1,w
  4609  0605  07AB               	addwf	___ftadd@f2,f
  4610  0606  0829               	movf	___ftadd@f1+1,w
  4611  0607  3DAC               	addwfc	___ftadd@f2+1,f
  4612  0608  082A               	movf	___ftadd@f1+2,w
  4613  0609  3DAD               	addwfc	___ftadd@f2+2,f
  4614  060A  1FAD               	btfss	___ftadd@f2+2,7
  4615  060B  2E1E               	goto	l3151
  4616  060C  30FF               	movlw	255
  4617  060D  06AB               	xorwf	___ftadd@f2,f
  4618  060E  30FF               	movlw	255
  4619  060F  06AC               	xorwf	___ftadd@f2+1,f
  4620  0610  30FF               	movlw	255
  4621  0611  06AD               	xorwf	___ftadd@f2+2,f
  4622  0612  3001               	movlw	1
  4623  0613  07AB               	addwf	___ftadd@f2,f
  4624  0614  3000               	movlw	0
  4625  0615  1803               	skipnc
  4626  0616  3001               	movlw	1
  4627  0617  07AC               	addwf	___ftadd@f2+1,f
  4628  0618  3000               	movlw	0
  4629  0619  1803               	skipnc
  4630  061A  3001               	movlw	1
  4631  061B  07AD               	addwf	___ftadd@f2+2,f
  4632  061C  01B2               	clrf	___ftadd@sign
  4633  061D  0AB2               	incf	___ftadd@sign,f
  4634  061E                     l3151:	
  4635  061E  082B               	movf	___ftadd@f2,w
  4636  061F  00A0               	movwf	___ftpack@arg
  4637  0620  082C               	movf	___ftadd@f2+1,w
  4638  0621  00A1               	movwf	___ftpack@arg+1
  4639  0622  082D               	movf	___ftadd@f2+2,w
  4640  0623  00A2               	movwf	___ftpack@arg+2
  4641  0624  0834               	movf	___ftadd@exp1,w
  4642  0625  00AE               	movwf	??___ftadd
  4643  0626  082E               	movf	??___ftadd,w
  4644  0627  00A3               	movwf	___ftpack@exp
  4645  0628  0832               	movf	___ftadd@sign,w
  4646  0629  00AF               	movwf	??___ftadd+1
  4647  062A  082F               	movf	??___ftadd+1,w
  4648  062B  00A4               	movwf	___ftpack@sign
  4649  062C  318D  2546         	fcall	___ftpack
  4650  062E  0020               	movlb	0	; select bank0
  4651  062F  0820               	movf	?___ftpack,w
  4652  0630  00A8               	movwf	?___ftadd
  4653  0631  0821               	movf	?___ftpack+1,w
  4654  0632  00A9               	movwf	?___ftadd+1
  4655  0633  0822               	movf	?___ftpack+2,w
  4656  0634  00AA               	movwf	?___ftadd+2
  4657  0635  0008               	return
  4658  0636                     __end_of___ftadd:	
  4659                           
  4660                           	psect	text10
  4661  08AC                     __ptext10:	
  4662 ;; *************** function _ADC_StartConversion *****************
  4663 ;; Defined at:
  4664 ;;		line 90 in file "mcc_generated_files/adc.c"
  4665 ;; Parameters:    Size  Location     Type
  4666 ;;		None
  4667 ;; Auto vars:     Size  Location     Type
  4668 ;;		None
  4669 ;; Return value:  Size  Location     Type
  4670 ;;                  1    wreg      void 
  4671 ;; Registers used:
  4672 ;;		None
  4673 ;; Tracked objects:
  4674 ;;		On entry : 0/0
  4675 ;;		On exit  : 0/0
  4676 ;;		Unchanged: 0/0
  4677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4679 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4681 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4682 ;;Total ram usage:        0 bytes
  4683 ;; Hardware stack levels used:    1
  4684 ;; Hardware stack levels required when called:    5
  4685 ;; This function calls:
  4686 ;;		Nothing
  4687 ;; This function is called by:
  4688 ;;		_get_accel
  4689 ;; This function uses a non-reentrant model
  4690 ;;
  4691                           
  4692                           
  4693                           ;psect for function _ADC_StartConversion
  4694  08AC                     _ADC_StartConversion:	
  4695                           
  4696                           ;adc.c: 93: ADCON0bits.GO_nDONE = 1;
  4697                           
  4698                           ;incstack = 0
  4699                           ; Regs used in _ADC_StartConversion: []
  4700  08AC  0021               	movlb	1	; select bank1
  4701  08AD  149D               	bsf	29,1	;volatile
  4702  08AE  0008               	return
  4703  08AF                     __end_of_ADC_StartConversion:	
  4704                           
  4705                           	psect	text11
  4706  0964                     __ptext11:	
  4707 ;; *************** function _ADC_SelectChannel *****************
  4708 ;; Defined at:
  4709 ;;		line 82 in file "mcc_generated_files/adc.c"
  4710 ;; Parameters:    Size  Location     Type
  4711 ;;  channel         1    wreg     enum E2975
  4712 ;; Auto vars:     Size  Location     Type
  4713 ;;  channel         1    1[BANK0 ] enum E2975
  4714 ;; Return value:  Size  Location     Type
  4715 ;;                  1    wreg      void 
  4716 ;; Registers used:
  4717 ;;		wreg, status,2, status,0
  4718 ;; Tracked objects:
  4719 ;;		On entry : 0/0
  4720 ;;		On exit  : 0/0
  4721 ;;		Unchanged: 0/0
  4722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4724 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4725 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4726 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4727 ;;Total ram usage:        2 bytes
  4728 ;; Hardware stack levels used:    1
  4729 ;; Hardware stack levels required when called:    5
  4730 ;; This function calls:
  4731 ;;		Nothing
  4732 ;; This function is called by:
  4733 ;;		_get_accel
  4734 ;; This function uses a non-reentrant model
  4735 ;;
  4736                           
  4737                           
  4738                           ;psect for function _ADC_SelectChannel
  4739  0964                     _ADC_SelectChannel:	
  4740                           
  4741                           ;incstack = 0
  4742                           ; Regs used in _ADC_SelectChannel: [wreg+status,2+status,0]
  4743                           ;ADC_SelectChannel@channel stored from wreg
  4744  0964  0020               	movlb	0	; select bank0
  4745  0965  00A1               	movwf	ADC_SelectChannel@channel
  4746                           
  4747                           ;adc.c: 85: ADCON0bits.CHS = channel;
  4748  0966  0821               	movf	ADC_SelectChannel@channel,w
  4749  0967  00A0               	movwf	??_ADC_SelectChannel
  4750  0968  0DA0               	rlf	??_ADC_SelectChannel,f
  4751  0969  0DA0               	rlf	??_ADC_SelectChannel,f
  4752  096A  0021               	movlb	1	; select bank1
  4753  096B  081D               	movf	29,w	;volatile
  4754  096C  0020               	movlb	0	; select bank0
  4755  096D  0620               	xorwf	??_ADC_SelectChannel,w
  4756  096E  3983               	andlw	-125
  4757  096F  0620               	xorwf	??_ADC_SelectChannel,w
  4758  0970  0021               	movlb	1	; select bank1
  4759  0971  009D               	movwf	29	;volatile
  4760                           
  4761                           ;adc.c: 87: ADCON0bits.ADON = 1;
  4762  0972  141D               	bsf	29,0	;volatile
  4763  0973  0008               	return
  4764  0974                     __end_of_ADC_SelectChannel:	
  4765                           
  4766                           	psect	text12
  4767  08E8                     __ptext12:	
  4768 ;; *************** function _ADC_IsConversionDone *****************
  4769 ;; Defined at:
  4770 ;;		line 97 in file "mcc_generated_files/adc.c"
  4771 ;; Parameters:    Size  Location     Type
  4772 ;;		None
  4773 ;; Auto vars:     Size  Location     Type
  4774 ;;		None
  4775 ;; Return value:  Size  Location     Type
  4776 ;;                  1    wreg      unsigned char 
  4777 ;; Registers used:
  4778 ;;		wreg, status,0
  4779 ;; Tracked objects:
  4780 ;;		On entry : 0/0
  4781 ;;		On exit  : 0/0
  4782 ;;		Unchanged: 0/0
  4783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4785 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4787 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4788 ;;Total ram usage:        0 bytes
  4789 ;; Hardware stack levels used:    1
  4790 ;; Hardware stack levels required when called:    5
  4791 ;; This function calls:
  4792 ;;		Nothing
  4793 ;; This function is called by:
  4794 ;;		_get_accel
  4795 ;; This function uses a non-reentrant model
  4796 ;;
  4797                           
  4798                           
  4799                           ;psect for function _ADC_IsConversionDone
  4800  08E8                     _ADC_IsConversionDone:	
  4801                           
  4802                           ;adc.c: 100: return (!ADCON0bits.GO_nDONE);
  4803                           
  4804                           ;incstack = 0
  4805                           ; Regs used in _ADC_IsConversionDone: [wreg+status,0]
  4806  08E8  1003               	clrc
  4807  08E9  0021               	movlb	1	; select bank1
  4808  08EA  1C9D               	btfss	29,1	;volatile
  4809  08EB  1403               	setc
  4810  08EC  3000               	movlw	0
  4811  08ED  3D09               	addwfc	9,w
  4812  08EE  0008               	return
  4813  08EF                     __end_of_ADC_IsConversionDone:	
  4814                           
  4815                           	psect	text13
  4816  0909                     __ptext13:	
  4817 ;; *************** function _ADC_GetConversionResult *****************
  4818 ;; Defined at:
  4819 ;;		line 103 in file "mcc_generated_files/adc.c"
  4820 ;; Parameters:    Size  Location     Type
  4821 ;;		None
  4822 ;; Auto vars:     Size  Location     Type
  4823 ;;		None
  4824 ;; Return value:  Size  Location     Type
  4825 ;;                  2    0[BANK0 ] unsigned int 
  4826 ;; Registers used:
  4827 ;;		wreg
  4828 ;; Tracked objects:
  4829 ;;		On entry : 0/0
  4830 ;;		On exit  : 0/0
  4831 ;;		Unchanged: 0/0
  4832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4833 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4834 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4836 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4837 ;;Total ram usage:        2 bytes
  4838 ;; Hardware stack levels used:    1
  4839 ;; Hardware stack levels required when called:    5
  4840 ;; This function calls:
  4841 ;;		Nothing
  4842 ;; This function is called by:
  4843 ;;		_get_accel
  4844 ;; This function uses a non-reentrant model
  4845 ;;
  4846                           
  4847                           
  4848                           ;psect for function _ADC_GetConversionResult
  4849  0909                     _ADC_GetConversionResult:	
  4850                           
  4851                           ;adc.c: 106: return ((ADRESH << 8) + ADRESL);
  4852                           
  4853                           ;incstack = 0
  4854                           ; Regs used in _ADC_GetConversionResult: [wreg]
  4855  0909  0021               	movlb	1	; select bank1
  4856  090A  081C               	movf	28,w	;volatile
  4857  090B  0020               	movlb	0	; select bank0
  4858  090C  00A1               	movwf	?_ADC_GetConversionResult+1
  4859  090D  0021               	movlb	1	; select bank1
  4860  090E  081B               	movf	27,w	;volatile
  4861  090F  0020               	movlb	0	; select bank0
  4862  0910  00A0               	movwf	?_ADC_GetConversionResult
  4863  0911  0008               	return
  4864  0912                     __end_of_ADC_GetConversionResult:	
  4865                           
  4866                           	psect	text14
  4867  03C1                     __ptext14:	
  4868 ;; *************** function _PROTOCOL_I2C_Send_float *****************
  4869 ;; Defined at:
  4870 ;;		line 345 in file "protocol.c"
  4871 ;; Parameters:    Size  Location     Type
  4872 ;;  length          1    wreg     unsigned char 
  4873 ;;  pbuffer         1   38[BANK0 ] PTR float 
  4874 ;;		 -> PROTOCOL_Send_float@pbuf(3), inv_handler@values(9), 
  4875 ;; Auto vars:     Size  Location     Type
  4876 ;;  length          1   41[BANK0 ] unsigned char 
  4877 ;;  v               2   42[BANK0 ] int 
  4878 ;; Return value:  Size  Location     Type
  4879 ;;                  1    wreg      void 
  4880 ;; Registers used:
  4881 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4882 ;; Tracked objects:
  4883 ;;		On entry : 0/0
  4884 ;;		On exit  : 0/0
  4885 ;;		Unchanged: 0/0
  4886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4887 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4888 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4889 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4890 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4891 ;;Total ram usage:        6 bytes
  4892 ;; Hardware stack levels used:    1
  4893 ;; Hardware stack levels required when called:    8
  4894 ;; This function calls:
  4895 ;;		_PROTOCOL_I2C_Set_TLV
  4896 ;;		___awdiv
  4897 ;;		___awmod
  4898 ;;		___bmul
  4899 ;;		___ftmul
  4900 ;;		___fttol
  4901 ;;		_abs
  4902 ;;		_printf
  4903 ;; This function is called by:
  4904 ;;		_inv_handler
  4905 ;; This function uses a non-reentrant model
  4906 ;;
  4907                           
  4908                           
  4909                           ;psect for function _PROTOCOL_I2C_Send_float
  4910  03C1                     _PROTOCOL_I2C_Send_float:	
  4911                           
  4912                           ;incstack = 0
  4913                           ; Regs used in _PROTOCOL_I2C_Send_float: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4914                           ;PROTOCOL_I2C_Send_float@length stored from wreg
  4915  03C1  0020               	movlb	0	; select bank0
  4916  03C2  00C9               	movwf	PROTOCOL_I2C_Send_float@length
  4917                           
  4918                           ;protocol.c: 346: int16_t v;
  4919                           ;protocol.c: 347: if (backplane_slave_enabled) {
  4920  03C3  0021               	movlb	1	; select bank1
  4921  03C4  083B               	movf	_backplane_slave_enabled^(0+128),w
  4922  03C5  1903               	btfsc	3,2
  4923  03C6  2C29               	goto	l3413
  4924                           
  4925                           ;protocol.c: 348: j = 0;
  4926  03C7  0020               	movlb	0	; select bank0
  4927  03C8  01DC               	clrf	_j
  4928                           
  4929                           ;protocol.c: 349: for (i=0; i<length; i++) {
  4930  03C9  01DD               	clrf	_i
  4931  03CA                     l3409:	
  4932  03CA  0849               	movf	PROTOCOL_I2C_Send_float@length,w
  4933  03CB  025D               	subwf	_i,w
  4934  03CC  1803               	btfsc	3,0
  4935  03CD  2C1D               	goto	l3411
  4936                           
  4937                           ;protocol.c: 350: float100 = (int16_t)(pbuffer[i] * 100);
  4938  03CE  3003               	movlw	3
  4939  03CF  00C7               	movwf	??_PROTOCOL_I2C_Send_float
  4940  03D0  0847               	movf	??_PROTOCOL_I2C_Send_float,w
  4941  03D1  00A0               	movwf	___bmul@multiplicand
  4942  03D2  085D               	movf	_i,w
  4943  03D3  3189  2174  3183   	fcall	___bmul
  4944  03D6  0020               	movlb	0	; select bank0
  4945  03D7  0746               	addwf	PROTOCOL_I2C_Send_float@pbuffer,w
  4946  03D8  00C8               	movwf	??_PROTOCOL_I2C_Send_float+1
  4947  03D9  0848               	movf	??_PROTOCOL_I2C_Send_float+1,w
  4948  03DA  0086               	movwf	6
  4949  03DB  0187               	clrf	7
  4950  03DC  3F40               	moviw [0]fsr1
  4951  03DD  00AB               	movwf	___ftmul@f2
  4952  03DE  3F41               	moviw [1]fsr1
  4953  03DF  00AC               	movwf	___ftmul@f2+1
  4954  03E0  3F42               	moviw [2]fsr1
  4955  03E1  00AD               	movwf	___ftmul@f2+2
  4956  03E2  3000               	movlw	0
  4957  03E3  00A8               	movwf	___ftmul@f1
  4958  03E4  30C8               	movlw	200
  4959  03E5  00A9               	movwf	___ftmul@f1+1
  4960  03E6  3042               	movlw	66
  4961  03E7  00AA               	movwf	___ftmul@f1+2
  4962  03E8  318F  274C  3183   	fcall	___ftmul
  4963  03EB  0020               	movlb	0	; select bank0
  4964  03EC  0828               	movf	?___ftmul,w
  4965  03ED  00B8               	movwf	___fttol@f1
  4966  03EE  0829               	movf	?___ftmul+1,w
  4967  03EF  00B9               	movwf	___fttol@f1+1
  4968  03F0  082A               	movf	?___ftmul+2,w
  4969  03F1  00BA               	movwf	___fttol@f1+2
  4970  03F2  318E  261C  3183   	fcall	___fttol
  4971  03F5  0020               	movlb	0	; select bank0
  4972  03F6  0839               	movf	?___fttol+1,w
  4973  03F7  0021               	movlb	1	; select bank1
  4974  03F8  00B1               	movwf	(_float100+1)^(0+128)
  4975  03F9  0020               	movlb	0	; select bank0
  4976  03FA  0838               	movf	?___fttol,w
  4977  03FB  0021               	movlb	1	; select bank1
  4978  03FC  00B0               	movwf	_float100^(0+128)
  4979                           
  4980                           ;protocol.c: 351: sendbuf[j++] = (uint8_t)((float100 >> 8) & 0x00ff);
  4981  03FD  0831               	movf	(_float100+1)^(0+128),w
  4982  03FE  0020               	movlb	0	; select bank0
  4983  03FF  00C7               	movwf	??_PROTOCOL_I2C_Send_float
  4984  0400  085C               	movf	_j,w
  4985  0401  3EBE               	addlw	(low (_sendbuf| 0))& (0+255)
  4986  0402  0086               	movwf	6
  4987  0403  0187               	clrf	7
  4988  0404  0847               	movf	??_PROTOCOL_I2C_Send_float,w
  4989  0405  0081               	movwf	1
  4990  0406  3001               	movlw	1
  4991  0407  00C7               	movwf	??_PROTOCOL_I2C_Send_float
  4992  0408  0847               	movf	??_PROTOCOL_I2C_Send_float,w
  4993  0409  07DC               	addwf	_j,f
  4994                           
  4995                           ;protocol.c: 352: sendbuf[j++] = (uint8_t)(float100 & 0x00ff);
  4996  040A  0021               	movlb	1	; select bank1
  4997  040B  0830               	movf	_float100^(0+128),w
  4998  040C  0020               	movlb	0	; select bank0
  4999  040D  00C7               	movwf	??_PROTOCOL_I2C_Send_float
  5000  040E  085C               	movf	_j,w
  5001  040F  3EBE               	addlw	(low (_sendbuf| 0))& (0+255)
  5002  0410  0086               	movwf	6
  5003  0411  0187               	clrf	7
  5004  0412  0847               	movf	??_PROTOCOL_I2C_Send_float,w
  5005  0413  0081               	movwf	1
  5006  0414  3001               	movlw	1
  5007  0415  00C7               	movwf	??_PROTOCOL_I2C_Send_float
  5008  0416  0847               	movf	??_PROTOCOL_I2C_Send_float,w
  5009  0417  07DC               	addwf	_j,f
  5010  0418  3001               	movlw	1
  5011  0419  00C7               	movwf	??_PROTOCOL_I2C_Send_float
  5012  041A  0847               	movf	??_PROTOCOL_I2C_Send_float,w
  5013  041B  07DD               	addwf	_i,f
  5014  041C  2BCA               	goto	l3409
  5015  041D                     l3411:	
  5016                           
  5017                           ;protocol.c: 353: }
  5018                           ;protocol.c: 354: PROTOCOL_I2C_Set_TLV(0x05, length*2, &sendbuf[0]);
  5019  041D  3549               	lslf	PROTOCOL_I2C_Send_float@length,w
  5020  041E  00C7               	movwf	??_PROTOCOL_I2C_Send_float
  5021  041F  0847               	movf	??_PROTOCOL_I2C_Send_float,w
  5022  0420  00A0               	movwf	PROTOCOL_I2C_Set_TLV@length
  5023  0421  30BE               	movlw	(low (_sendbuf| 0))& (0+255)
  5024  0422  00C8               	movwf	??_PROTOCOL_I2C_Send_float+1
  5025  0423  0848               	movf	??_PROTOCOL_I2C_Send_float+1,w
  5026  0424  00A1               	movwf	PROTOCOL_I2C_Set_TLV@pbuffer
  5027  0425  3005               	movlw	5
  5028  0426  318A  2263         	fcall	_PROTOCOL_I2C_Set_TLV
  5029                           
  5030                           ;protocol.c: 355: } else {
  5031  0428  0008               	return
  5032  0429                     l3413:	
  5033                           
  5034                           ;protocol.c: 356: length--;
  5035  0429  3001               	movlw	1
  5036  042A  0020               	movlb	0	; select bank0
  5037  042B  02C9               	subwf	PROTOCOL_I2C_Send_float@length,f
  5038                           
  5039                           ;protocol.c: 357: for (i=0; i<length; i++) {
  5040  042C  01DD               	clrf	_i
  5041  042D                     l3429:	
  5042  042D  0849               	movf	PROTOCOL_I2C_Send_float@length,w
  5043  042E  025D               	subwf	_i,w
  5044  042F  1803               	btfsc	3,0
  5045  0430  2CA6               	goto	l3431
  5046                           
  5047                           ;protocol.c: 358: v = (int16_t)(pbuffer[i] * 100);
  5048  0431  3003               	movlw	3
  5049  0432  00C7               	movwf	??_PROTOCOL_I2C_Send_float
  5050  0433  0847               	movf	??_PROTOCOL_I2C_Send_float,w
  5051  0434  00A0               	movwf	___bmul@multiplicand
  5052  0435  085D               	movf	_i,w
  5053  0436  3189  2174  3183   	fcall	___bmul
  5054  0439  0020               	movlb	0	; select bank0
  5055  043A  0746               	addwf	PROTOCOL_I2C_Send_float@pbuffer,w
  5056  043B  00C8               	movwf	??_PROTOCOL_I2C_Send_float+1
  5057  043C  0848               	movf	??_PROTOCOL_I2C_Send_float+1,w
  5058  043D  0086               	movwf	6
  5059  043E  0187               	clrf	7
  5060  043F  3F40               	moviw [0]fsr1
  5061  0440  00AB               	movwf	___ftmul@f2
  5062  0441  3F41               	moviw [1]fsr1
  5063  0442  00AC               	movwf	___ftmul@f2+1
  5064  0443  3F42               	moviw [2]fsr1
  5065  0444  00AD               	movwf	___ftmul@f2+2
  5066  0445  3000               	movlw	0
  5067  0446  00A8               	movwf	___ftmul@f1
  5068  0447  30C8               	movlw	200
  5069  0448  00A9               	movwf	___ftmul@f1+1
  5070  0449  3042               	movlw	66
  5071  044A  00AA               	movwf	___ftmul@f1+2
  5072  044B  318F  274C  3183   	fcall	___ftmul
  5073  044E  0020               	movlb	0	; select bank0
  5074  044F  0828               	movf	?___ftmul,w
  5075  0450  00B8               	movwf	___fttol@f1
  5076  0451  0829               	movf	?___ftmul+1,w
  5077  0452  00B9               	movwf	___fttol@f1+1
  5078  0453  082A               	movf	?___ftmul+2,w
  5079  0454  00BA               	movwf	___fttol@f1+2
  5080  0455  318E  261C  3183   	fcall	___fttol
  5081  0458  0020               	movlb	0	; select bank0
  5082  0459  0839               	movf	?___fttol+1,w
  5083  045A  00CB               	movwf	PROTOCOL_I2C_Send_float@v+1
  5084  045B  0838               	movf	?___fttol,w
  5085  045C  00CA               	movwf	PROTOCOL_I2C_Send_float@v
  5086                           
  5087                           ;protocol.c: 359: if (v <= -100 || v >= 0) {
  5088  045D  084B               	movf	PROTOCOL_I2C_Send_float@v+1,w
  5089  045E  3A80               	xorlw	128
  5090  045F  00C7               	movwf	??_PROTOCOL_I2C_Send_float
  5091  0460  307F               	movlw	127
  5092  0461  0247               	subwf	??_PROTOCOL_I2C_Send_float,w
  5093  0462  1D03               	skipz
  5094  0463  2C66               	goto	u3505
  5095  0464  309D               	movlw	157
  5096  0465  024A               	subwf	PROTOCOL_I2C_Send_float@v,w
  5097  0466                     u3505:	
  5098  0466  1C03               	skipc
  5099  0467  2C6B               	goto	l3423
  5100  0468  0020               	movlb	0	; select bank0
  5101  0469  1BCB               	btfsc	PROTOCOL_I2C_Send_float@v+1,7
  5102  046A  2C70               	goto	l3425
  5103  046B                     l3423:	
  5104                           
  5105                           ;protocol.c: 360: printf("%d.%02d,", v/100, abs(v%100));
  5106  046B  308C               	movlw	low ((STR_32+1)| (0+32768))
  5107  046C  0020               	movlb	0	; select bank0
  5108  046D  00AE               	movwf	printf@f
  5109  046E  3086               	movlw	high ((STR_32+1)| (0+32768))
  5110  046F  2C74               	goto	L1
  5111  0470                     l3425:	
  5112                           ;protocol.c: 361: } else {
  5113                           
  5114                           
  5115                           ;protocol.c: 362: printf("-%d.%02d,", v/100, abs(v%100));
  5116  0470  308B               	movlw	low (STR_32| (0+32768))
  5117  0471  0020               	movlb	0	; select bank0
  5118  0472  00AE               	movwf	printf@f
  5119  0473  3086               	movlw	high (STR_32| (0+32768))
  5120  0474                     L1:	
  5121  0474  00AF               	movwf	printf@f+1
  5122  0475  3064               	movlw	100
  5123  0476  00A0               	movwf	___awdiv@divisor
  5124  0477  3000               	movlw	0
  5125  0478  00A1               	movwf	___awdiv@divisor+1
  5126  0479  084B               	movf	PROTOCOL_I2C_Send_float@v+1,w
  5127  047A  00A3               	movwf	___awdiv@dividend+1
  5128  047B  084A               	movf	PROTOCOL_I2C_Send_float@v,w
  5129  047C  00A2               	movwf	___awdiv@dividend
  5130  047D  318C  24F4  3183   	fcall	___awdiv
  5131  0480  0020               	movlb	0	; select bank0
  5132  0481  0821               	movf	?___awdiv+1,w
  5133  0482  00B1               	movwf	?_printf+3
  5134  0483  0820               	movf	?___awdiv,w
  5135  0484  00B0               	movwf	?_printf+2
  5136  0485  3064               	movlw	100
  5137  0486  00A0               	movwf	___awmod@divisor
  5138  0487  3000               	movlw	0
  5139  0488  00A1               	movwf	___awmod@divisor+1
  5140  0489  084B               	movf	PROTOCOL_I2C_Send_float@v+1,w
  5141  048A  00A3               	movwf	___awmod@dividend+1
  5142  048B  084A               	movf	PROTOCOL_I2C_Send_float@v,w
  5143  048C  00A2               	movwf	___awmod@dividend
  5144  048D  318C  2419  3183   	fcall	___awmod
  5145  0490  0020               	movlb	0	; select bank0
  5146  0491  0821               	movf	?___awmod+1,w
  5147  0492  00A8               	movwf	abs@a+1
  5148  0493  0820               	movf	?___awmod,w
  5149  0494  00A7               	movwf	abs@a
  5150  0495  3189  2155  3183   	fcall	_abs
  5151  0498  0020               	movlb	0	; select bank0
  5152  0499  0828               	movf	?_abs+1,w
  5153  049A  00B3               	movwf	?_printf+5
  5154  049B  0827               	movf	?_abs,w
  5155  049C  00B2               	movwf	?_printf+4
  5156  049D  3180  2069  3183   	fcall	_printf
  5157  04A0  3001               	movlw	1
  5158  04A1  0020               	movlb	0	; select bank0
  5159  04A2  00C7               	movwf	??_PROTOCOL_I2C_Send_float
  5160  04A3  0847               	movf	??_PROTOCOL_I2C_Send_float,w
  5161  04A4  07DD               	addwf	_i,f
  5162  04A5  2C2D               	goto	l3429
  5163  04A6                     l3431:	
  5164                           
  5165                           ;protocol.c: 363: }
  5166                           ;protocol.c: 364: }
  5167                           ;protocol.c: 365: v = (int16_t)(pbuffer[i] * 100);
  5168  04A6  3003               	movlw	3
  5169  04A7  00C7               	movwf	??_PROTOCOL_I2C_Send_float
  5170  04A8  0847               	movf	??_PROTOCOL_I2C_Send_float,w
  5171  04A9  00A0               	movwf	___bmul@multiplicand
  5172  04AA  085D               	movf	_i,w
  5173  04AB  3189  2174  3183   	fcall	___bmul
  5174  04AE  0020               	movlb	0	; select bank0
  5175  04AF  0746               	addwf	PROTOCOL_I2C_Send_float@pbuffer,w
  5176  04B0  00C8               	movwf	??_PROTOCOL_I2C_Send_float+1
  5177  04B1  0848               	movf	??_PROTOCOL_I2C_Send_float+1,w
  5178  04B2  0086               	movwf	6
  5179  04B3  0187               	clrf	7
  5180  04B4  3F40               	moviw [0]fsr1
  5181  04B5  00AB               	movwf	___ftmul@f2
  5182  04B6  3F41               	moviw [1]fsr1
  5183  04B7  00AC               	movwf	___ftmul@f2+1
  5184  04B8  3F42               	moviw [2]fsr1
  5185  04B9  00AD               	movwf	___ftmul@f2+2
  5186  04BA  3000               	movlw	0
  5187  04BB  00A8               	movwf	___ftmul@f1
  5188  04BC  30C8               	movlw	200
  5189  04BD  00A9               	movwf	___ftmul@f1+1
  5190  04BE  3042               	movlw	66
  5191  04BF  00AA               	movwf	___ftmul@f1+2
  5192  04C0  318F  274C  3183   	fcall	___ftmul
  5193  04C3  0020               	movlb	0	; select bank0
  5194  04C4  0828               	movf	?___ftmul,w
  5195  04C5  00B8               	movwf	___fttol@f1
  5196  04C6  0829               	movf	?___ftmul+1,w
  5197  04C7  00B9               	movwf	___fttol@f1+1
  5198  04C8  082A               	movf	?___ftmul+2,w
  5199  04C9  00BA               	movwf	___fttol@f1+2
  5200  04CA  318E  261C  3183   	fcall	___fttol
  5201  04CD  0020               	movlb	0	; select bank0
  5202  04CE  0839               	movf	?___fttol+1,w
  5203  04CF  00CB               	movwf	PROTOCOL_I2C_Send_float@v+1
  5204  04D0  0838               	movf	?___fttol,w
  5205  04D1  00CA               	movwf	PROTOCOL_I2C_Send_float@v
  5206                           
  5207                           ;protocol.c: 366: if (v <= -100 || v >= 0) {
  5208  04D2  084B               	movf	PROTOCOL_I2C_Send_float@v+1,w
  5209  04D3  3A80               	xorlw	128
  5210  04D4  00C7               	movwf	??_PROTOCOL_I2C_Send_float
  5211  04D5  307F               	movlw	127
  5212  04D6  0247               	subwf	??_PROTOCOL_I2C_Send_float,w
  5213  04D7  1D03               	skipz
  5214  04D8  2CDB               	goto	u3535
  5215  04D9  309D               	movlw	157
  5216  04DA  024A               	subwf	PROTOCOL_I2C_Send_float@v,w
  5217  04DB                     u3535:	
  5218  04DB  1C03               	skipc
  5219  04DC  2CE0               	goto	l3437
  5220  04DD  0020               	movlb	0	; select bank0
  5221  04DE  1BCB               	btfsc	PROTOCOL_I2C_Send_float@v+1,7
  5222  04DF  2D10               	goto	l3439
  5223  04E0                     l3437:	
  5224                           
  5225                           ;protocol.c: 367: printf("%d.%02d\n", v/100, abs(v%100));
  5226  04E0  306E               	movlw	low ((STR_34+1)| (0+32768))
  5227  04E1  0020               	movlb	0	; select bank0
  5228  04E2  00AE               	movwf	printf@f
  5229  04E3  3086               	movlw	high ((STR_34+1)| (0+32768))
  5230  04E4  00AF               	movwf	printf@f+1
  5231  04E5  3064               	movlw	100
  5232  04E6  00A0               	movwf	___awdiv@divisor
  5233  04E7  3000               	movlw	0
  5234  04E8  00A1               	movwf	___awdiv@divisor+1
  5235  04E9  084B               	movf	PROTOCOL_I2C_Send_float@v+1,w
  5236  04EA  00A3               	movwf	___awdiv@dividend+1
  5237  04EB  084A               	movf	PROTOCOL_I2C_Send_float@v,w
  5238  04EC  00A2               	movwf	___awdiv@dividend
  5239  04ED  318C  24F4  3183   	fcall	___awdiv
  5240  04F0  0020               	movlb	0	; select bank0
  5241  04F1  0821               	movf	?___awdiv+1,w
  5242  04F2  00B1               	movwf	?_printf+3
  5243  04F3  0820               	movf	?___awdiv,w
  5244  04F4  00B0               	movwf	?_printf+2
  5245  04F5  3064               	movlw	100
  5246  04F6  00A0               	movwf	___awmod@divisor
  5247  04F7  3000               	movlw	0
  5248  04F8  00A1               	movwf	___awmod@divisor+1
  5249  04F9  084B               	movf	PROTOCOL_I2C_Send_float@v+1,w
  5250  04FA  00A3               	movwf	___awmod@dividend+1
  5251  04FB  084A               	movf	PROTOCOL_I2C_Send_float@v,w
  5252  04FC  00A2               	movwf	___awmod@dividend
  5253  04FD  318C  2419  3183   	fcall	___awmod
  5254  0500  0020               	movlb	0	; select bank0
  5255  0501  0821               	movf	?___awmod+1,w
  5256  0502  00A8               	movwf	abs@a+1
  5257  0503  0820               	movf	?___awmod,w
  5258  0504  00A7               	movwf	abs@a
  5259  0505  3189  2155  3183   	fcall	_abs
  5260  0508  0020               	movlb	0	; select bank0
  5261  0509  0828               	movf	?_abs+1,w
  5262  050A  00B3               	movwf	?_printf+5
  5263  050B  0827               	movf	?_abs,w
  5264  050C  00B2               	movwf	?_printf+4
  5265  050D  3180  2069         	fcall	_printf
  5266                           
  5267                           ;protocol.c: 368: } else {
  5268  050F  0008               	return
  5269  0510                     l3439:	
  5270                           
  5271                           ;protocol.c: 369: printf("-%d.%02d\n", v/100, abs(v%100));
  5272  0510  306D               	movlw	low (STR_34| (0+32768))
  5273  0511  0020               	movlb	0	; select bank0
  5274  0512  00AE               	movwf	printf@f
  5275  0513  3086               	movlw	high (STR_34| (0+32768))
  5276  0514  00AF               	movwf	printf@f+1
  5277  0515  3064               	movlw	100
  5278  0516  00A0               	movwf	___awdiv@divisor
  5279  0517  3000               	movlw	0
  5280  0518  00A1               	movwf	___awdiv@divisor+1
  5281  0519  084B               	movf	PROTOCOL_I2C_Send_float@v+1,w
  5282  051A  00A3               	movwf	___awdiv@dividend+1
  5283  051B  084A               	movf	PROTOCOL_I2C_Send_float@v,w
  5284  051C  00A2               	movwf	___awdiv@dividend
  5285  051D  318C  24F4  3183   	fcall	___awdiv
  5286  0520  0020               	movlb	0	; select bank0
  5287  0521  0821               	movf	?___awdiv+1,w
  5288  0522  00B1               	movwf	?_printf+3
  5289  0523  0820               	movf	?___awdiv,w
  5290  0524  00B0               	movwf	?_printf+2
  5291  0525  3064               	movlw	100
  5292  0526  00A0               	movwf	___awmod@divisor
  5293  0527  3000               	movlw	0
  5294  0528  00A1               	movwf	___awmod@divisor+1
  5295  0529  084B               	movf	PROTOCOL_I2C_Send_float@v+1,w
  5296  052A  00A3               	movwf	___awmod@dividend+1
  5297  052B  084A               	movf	PROTOCOL_I2C_Send_float@v,w
  5298  052C  00A2               	movwf	___awmod@dividend
  5299  052D  318C  2419  3183   	fcall	___awmod
  5300  0530  0020               	movlb	0	; select bank0
  5301  0531  0821               	movf	?___awmod+1,w
  5302  0532  00A8               	movwf	abs@a+1
  5303  0533  0820               	movf	?___awmod,w
  5304  0534  00A7               	movwf	abs@a
  5305  0535  3189  2155  3183   	fcall	_abs
  5306  0538  0020               	movlb	0	; select bank0
  5307  0539  0828               	movf	?_abs+1,w
  5308  053A  00B3               	movwf	?_printf+5
  5309  053B  0827               	movf	?_abs,w
  5310  053C  00B2               	movwf	?_printf+4
  5311  053D  3180  2069         	fcall	_printf
  5312  053F  0008               	return
  5313  0540                     __end_of_PROTOCOL_I2C_Send_float:	
  5314                           
  5315                           	psect	text15
  5316  0069                     __ptext15:	
  5317 ;; *************** function _printf *****************
  5318 ;; Defined at:
  5319 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  5320 ;; Parameters:    Size  Location     Type
  5321 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  5322 ;;		 -> STR_48(10), STR_47(9), STR_46(10), STR_45(9), 
  5323 ;;		 -> STR_44(4), STR_43(4), STR_42(4), STR_41(4), 
  5324 ;;		 -> STR_40(4), STR_39(4), STR_38(4), STR_37(4), 
  5325 ;;		 -> STR_36(14), STR_35(9), STR_34(10), STR_33(9), 
  5326 ;;		 -> STR_32(10), STR_31(9), STR_30(7), STR_29(4), 
  5327 ;;		 -> STR_28(4), STR_27(9), STR_26(4), STR_25(4), 
  5328 ;;		 -> STR_24(10), STR_23(4), STR_22(4), STR_21(8), 
  5329 ;;		 -> STR_20(4), STR_19(4), STR_18(9), STR_17(6), 
  5330 ;;		 -> STR_16(10), STR_13(10), STR_9(10), STR_5(10), 
  5331 ;;		 -> STR_3(5), 
  5332 ;; Auto vars:     Size  Location     Type
  5333 ;;  tmpval          4    0        struct .
  5334 ;;  width           2   33[BANK0 ] int 
  5335 ;;  len             2   30[BANK0 ] unsigned int 
  5336 ;;  val             2   28[BANK0 ] unsigned int 
  5337 ;;  cp              2   25[BANK0 ] PTR const unsigned char 
  5338 ;;		 -> STR_10(4), buf(48), STR_2(7), ROM(8192), 
  5339 ;;		 -> printf@c(1), STR_1(11), 
  5340 ;;  c               1   35[BANK0 ] char 
  5341 ;;  flag            1   32[BANK0 ] unsigned char 
  5342 ;;  ap              1   27[BANK0 ] PTR void [1]
  5343 ;;		 -> ?_printf(2), 
  5344 ;;  prec            1   24[BANK0 ] char 
  5345 ;; Return value:  Size  Location     Type
  5346 ;;                  2   14[BANK0 ] int 
  5347 ;; Registers used:
  5348 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5349 ;; Tracked objects:
  5350 ;;		On entry : 0/0
  5351 ;;		On exit  : 0/0
  5352 ;;		Unchanged: 0/0
  5353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5354 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5355 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5356 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5357 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5358 ;;Total ram usage:       22 bytes
  5359 ;; Hardware stack levels used:    1
  5360 ;; Hardware stack levels required when called:    7
  5361 ;; This function calls:
  5362 ;;		___lwdiv
  5363 ;;		___lwmod
  5364 ;;		___wmul
  5365 ;;		_isdigit
  5366 ;;		_putch
  5367 ;; This function is called by:
  5368 ;;		_PROTOCOL_Loop
  5369 ;;		_PROTOCOL_I2C_Send_float
  5370 ;; This function uses a non-reentrant model
  5371 ;;
  5372                           
  5373                           
  5374                           ;psect for function _printf
  5375  0069                     _printf:	
  5376                           
  5377                           ;doprnt.c: 466: va_list ap;
  5378                           ;doprnt.c: 499: signed char c;
  5379                           ;doprnt.c: 501: int width;
  5380                           ;doprnt.c: 506: signed char prec;
  5381                           ;doprnt.c: 508: unsigned char flag;
  5382                           ;doprnt.c: 523: union {
  5383                           ;doprnt.c: 524: unsigned long vd;
  5384                           ;doprnt.c: 525: double integ;
  5385                           ;doprnt.c: 526: } tmpval;
  5386                           ;doprnt.c: 528: unsigned int val;
  5387                           ;doprnt.c: 529: unsigned len;
  5388                           ;doprnt.c: 530: const char * cp;
  5389                           ;doprnt.c: 533: *ap = __va_start();
  5390                           
  5391                           ;incstack = 0
  5392                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5393  0069  3030               	movlw	(low ((?_printf| 0+2)))& (0+255)
  5394  006A  0020               	movlb	0	; select bank0
  5395  006B  00B4               	movwf	??_printf
  5396  006C  0834               	movf	??_printf,w
  5397  006D  00BB               	movwf	printf@ap
  5398  006E                     l2971:	
  5399                           ;doprnt.c: 536: while(c = *f++) {
  5400                           
  5401  006E  0020               	movlb	0	; select bank0
  5402  006F  082F               	movf	printf@f+1,w
  5403  0070  00B5               	movwf	??_printf+1
  5404  0071  082E               	movf	printf@f,w
  5405  0072  00B4               	movwf	??_printf
  5406  0073  0AAE               	incf	printf@f,f
  5407  0074  1903               	skipnz
  5408  0075  0AAF               	incf	printf@f+1,f
  5409  0076  0834               	movf	??_printf,w
  5410  0077  0084               	movwf	4
  5411  0078  0835               	movf	??_printf+1,w
  5412  0079  0085               	movwf	5
  5413  007A  0800               	movf	0,w	;code access
  5414  007B  00B6               	movwf	??_printf+2
  5415  007C  0836               	movf	??_printf+2,w
  5416  007D  00C3               	movwf	printf@c
  5417  007E  0843               	movf	printf@c,w
  5418  007F  1903               	btfsc	3,2
  5419  0080  0008               	return
  5420                           
  5421                           ;doprnt.c: 538: if(c != '%')
  5422  0081  3025               	movlw	37
  5423  0082  0643               	xorwf	printf@c,w
  5424  0083  1903               	btfsc	3,2
  5425  0084  288A               	goto	l2847
  5426                           
  5427                           ;doprnt.c: 540: {
  5428                           ;doprnt.c: 541: (putch(c) );
  5429  0085  0843               	movf	printf@c,w
  5430  0086  3188  20C7  3180   	fcall	_putch
  5431                           
  5432                           ;doprnt.c: 542: continue;
  5433  0089  286E               	goto	l2971
  5434  008A                     l2847:	
  5435                           
  5436                           ;doprnt.c: 543: }
  5437                           ;doprnt.c: 546: width = 0;
  5438  008A  0020               	movlb	0	; select bank0
  5439  008B  01C1               	clrf	printf@width
  5440  008C  01C2               	clrf	printf@width+1
  5441                           
  5442                           ;doprnt.c: 548: flag = 0;
  5443  008D  01C0               	clrf	printf@flag
  5444                           
  5445                           ;doprnt.c: 551: switch(*f) {
  5446                           
  5447                           ;doprnt.c: 550: for(;;) {
  5448  008E  2894               	goto	l2853
  5449  008F                     l452:	
  5450                           ;doprnt.c: 579: case '0':
  5451                           
  5452                           
  5453                           ;doprnt.c: 580: flag |= 0x04;
  5454  008F  1540               	bsf	printf@flag,2
  5455                           
  5456                           ;doprnt.c: 581: f++;
  5457  0090  3001               	movlw	1
  5458  0091  07AE               	addwf	printf@f,f
  5459  0092  3000               	movlw	0
  5460  0093  3DAF               	addwfc	printf@f+1,f
  5461  0094                     l2853:	
  5462                           ;doprnt.c: 584: }
  5463                           
  5464                           ;doprnt.c: 582: continue;
  5465                           
  5466  0094  082E               	movf	printf@f,w
  5467  0095  0084               	movwf	4
  5468  0096  082F               	movf	printf@f+1,w
  5469  0097  0085               	movwf	5
  5470  0098  0800               	movf	0,w	;code access
  5471                           
  5472                           ; Switch size 1, requested type "space"
  5473                           ; Number of cases is 1, Range of values is 48 to 48
  5474                           ; switch strategies available:
  5475                           ; Name         Instructions Cycles
  5476                           ; simple_byte            4     3 (average)
  5477                           ; direct_byte           11     9 (fixed)
  5478                           ; jumptable            263     9 (fixed)
  5479                           ;	Chosen strategy is simple_byte
  5480  0099  3A30               	xorlw	48	; case 48
  5481  009A  1903               	skipnz
  5482  009B  288F               	goto	l452
  5483  009C  289D               	goto	l2855
  5484  009D                     l2855:	
  5485                           ;doprnt.c: 586: }
  5486                           
  5487                           ;doprnt.c: 585: break;
  5488                           
  5489                           
  5490                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5491  009D  082E               	movf	printf@f,w
  5492  009E  0084               	movwf	4
  5493  009F  082F               	movf	printf@f+1,w
  5494  00A0  0085               	movwf	5
  5495  00A1  0800               	movf	0,w	;code access
  5496  00A2  3189  2146  3180   	fcall	_isdigit
  5497  00A5  1C03               	btfss	3,0
  5498  00A6  293E               	goto	l2903
  5499                           
  5500                           ;doprnt.c: 598: width = 0;
  5501  00A7  0020               	movlb	0	; select bank0
  5502  00A8  01C1               	clrf	printf@width
  5503  00A9  01C2               	clrf	printf@width+1
  5504  00AA                     l2859:	
  5505                           ;doprnt.c: 599: do {
  5506                           
  5507                           
  5508                           ;doprnt.c: 600: width *= 10;
  5509  00AA  300A               	movlw	10
  5510  00AB  0020               	movlb	0	; select bank0
  5511  00AC  00A0               	movwf	___wmul@multiplier
  5512  00AD  3000               	movlw	0
  5513  00AE  00A1               	movwf	___wmul@multiplier+1
  5514  00AF  0842               	movf	printf@width+1,w
  5515  00B0  00A3               	movwf	___wmul@multiplicand+1
  5516  00B1  0841               	movf	printf@width,w
  5517  00B2  00A2               	movwf	___wmul@multiplicand
  5518  00B3  3189  21EC  3180   	fcall	___wmul
  5519  00B6  0020               	movlb	0	; select bank0
  5520  00B7  0821               	movf	?___wmul+1,w
  5521  00B8  00C2               	movwf	printf@width+1
  5522  00B9  0820               	movf	?___wmul,w
  5523  00BA  00C1               	movwf	printf@width
  5524                           
  5525                           ;doprnt.c: 601: width += *f++ - '0';
  5526  00BB  082E               	movf	printf@f,w
  5527  00BC  0084               	movwf	4
  5528  00BD  082F               	movf	printf@f+1,w
  5529  00BE  0085               	movwf	5
  5530  00BF  0800               	movf	0,w	;code access
  5531  00C0  3ED0               	addlw	208
  5532  00C1  00B4               	movwf	??_printf
  5533  00C2  30FF               	movlw	255
  5534  00C3  1803               	skipnc
  5535  00C4  3000               	movlw	0
  5536  00C5  00B5               	movwf	??_printf+1
  5537  00C6  0834               	movf	??_printf,w
  5538  00C7  07C1               	addwf	printf@width,f
  5539  00C8  0835               	movf	??_printf+1,w
  5540  00C9  3DC2               	addwfc	printf@width+1,f
  5541  00CA  3001               	movlw	1
  5542  00CB  07AE               	addwf	printf@f,f
  5543  00CC  3000               	movlw	0
  5544  00CD  3DAF               	addwfc	printf@f+1,f
  5545                           
  5546                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5547  00CE  082E               	movf	printf@f,w
  5548  00CF  0084               	movwf	4
  5549  00D0  082F               	movf	printf@f+1,w
  5550  00D1  0085               	movwf	5
  5551  00D2  0800               	movf	0,w	;code access
  5552  00D3  3189  2146  3180   	fcall	_isdigit
  5553  00D6  1C03               	btfss	3,0
  5554  00D7  293E               	goto	l2903
  5555  00D8  28AA               	goto	l2859
  5556  00D9                     l2867:	
  5557                           ;doprnt.c: 728: case 's':
  5558                           
  5559                           ;doprnt.c: 698: case 'i':
  5560                           ;doprnt.c: 699: break;
  5561                           
  5562                           ;doprnt.c: 697: case 'd':
  5563                           
  5564                           ;doprnt.c: 638: goto alldone;
  5565                           
  5566                           ;doprnt.c: 637: case 0:
  5567                           
  5568                           ;doprnt.c: 608: }
  5569                           ;doprnt.c: 635: switch(c = *f++) {
  5570                           
  5571                           
  5572                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  5573  00D9  0020               	movlb	0	; select bank0
  5574  00DA  083B               	movf	printf@ap,w
  5575  00DB  0086               	movwf	6
  5576  00DC  0187               	clrf	7
  5577  00DD  3F40               	moviw [0]fsr1
  5578  00DE  00B9               	movwf	printf@cp
  5579  00DF  3F41               	moviw [1]fsr1
  5580  00E0  00BA               	movwf	printf@cp+1
  5581  00E1  3002               	movlw	2
  5582  00E2  00B4               	movwf	??_printf
  5583  00E3  0834               	movf	??_printf,w
  5584  00E4  07BB               	addwf	printf@ap,f
  5585                           
  5586                           ;doprnt.c: 740: if(!cp)
  5587  00E5  0839               	movf	printf@cp,w
  5588  00E6  043A               	iorwf	printf@cp+1,w
  5589  00E7  1D03               	btfss	3,2
  5590  00E8  28ED               	goto	l2875
  5591                           
  5592                           ;doprnt.c: 741: cp = "(null)";
  5593  00E9  30B8               	movlw	low (STR_2| (0+32768))
  5594  00EA  00B9               	movwf	printf@cp
  5595  00EB  3086               	movlw	high (STR_2| (0+32768))
  5596  00EC  00BA               	movwf	printf@cp+1
  5597  00ED                     l2875:	
  5598                           
  5599                           ;doprnt.c: 745: len = 0;
  5600  00ED  01BE               	clrf	printf@len
  5601  00EE  01BF               	clrf	printf@len+1
  5602  00EF                     l2879:	
  5603                           ;doprnt.c: 746: while(cp[len])
  5604                           
  5605  00EF  0839               	movf	printf@cp,w
  5606  00F0  073E               	addwf	printf@len,w
  5607  00F1  0084               	movwf	4
  5608  00F2  083A               	movf	printf@cp+1,w
  5609  00F3  3D3F               	addwfc	printf@len+1,w
  5610  00F4  0085               	movwf	5
  5611  00F5  0012               	moviw fsr0++
  5612  00F6  1903               	btfsc	3,2
  5613  00F7  28FD               	goto	l2881
  5614                           
  5615                           ;doprnt.c: 747: len++;
  5616  00F8  3001               	movlw	1
  5617  00F9  07BE               	addwf	printf@len,f
  5618  00FA  3000               	movlw	0
  5619  00FB  3DBF               	addwfc	printf@len+1,f
  5620  00FC  28EF               	goto	l2879
  5621  00FD                     l2881:	
  5622                           ;doprnt.c: 750: dostring:
  5623                           
  5624                           
  5625                           ;doprnt.c: 757: if(width > len)
  5626  00FD  0842               	movf	printf@width+1,w
  5627  00FE  023F               	subwf	printf@len+1,w
  5628  00FF  1D03               	skipz
  5629  0100  2903               	goto	u2465
  5630  0101  0841               	movf	printf@width,w
  5631  0102  023E               	subwf	printf@len,w
  5632  0103                     u2465:	
  5633  0103  1803               	skipnc
  5634  0104  290A               	goto	l2885
  5635                           
  5636                           ;doprnt.c: 758: width -= len;
  5637  0105  083E               	movf	printf@len,w
  5638  0106  02C1               	subwf	printf@width,f
  5639  0107  083F               	movf	printf@len+1,w
  5640  0108  3BC2               	subwfb	printf@width+1,f
  5641  0109  290C               	goto	l2889
  5642  010A                     l2885:	
  5643                           
  5644                           ;doprnt.c: 759: else
  5645                           ;doprnt.c: 760: width = 0;
  5646  010A  01C1               	clrf	printf@width
  5647  010B  01C2               	clrf	printf@width+1
  5648  010C                     l2889:	
  5649                           ;doprnt.c: 764: while(width--)
  5650                           
  5651  010C  30FF               	movlw	255
  5652  010D  0020               	movlb	0	; select bank0
  5653  010E  07C1               	addwf	printf@width,f
  5654  010F  30FF               	movlw	255
  5655  0110  3DC2               	addwfc	printf@width+1,f
  5656  0111  0A41               	incf	printf@width,w
  5657  0112  1903               	btfsc	3,2
  5658  0113  0A42               	incf	printf@width+1,w
  5659  0114  1903               	btfsc	3,2
  5660  0115  2928               	goto	l2895
  5661                           
  5662                           ;doprnt.c: 765: (putch(' ') );
  5663  0116  3020               	movlw	32
  5664  0117  3188  20C7  3180   	fcall	_putch
  5665  011A  290C               	goto	l2889
  5666  011B                     l2891:	
  5667                           ;doprnt.c: 767: while(len--)
  5668                           
  5669                           
  5670                           ;doprnt.c: 768: (putch(*cp++) );
  5671  011B  0839               	movf	printf@cp,w
  5672  011C  0084               	movwf	4
  5673  011D  083A               	movf	printf@cp+1,w
  5674  011E  0085               	movwf	5
  5675  011F  0800               	movf	0,w	;code access
  5676  0120  3188  20C7  3180   	fcall	_putch
  5677  0123  3001               	movlw	1
  5678  0124  0020               	movlb	0	; select bank0
  5679  0125  07B9               	addwf	printf@cp,f
  5680  0126  3000               	movlw	0
  5681  0127  3DBA               	addwfc	printf@cp+1,f
  5682  0128                     l2895:	
  5683  0128  3001               	movlw	1
  5684  0129  02BE               	subwf	printf@len,f
  5685  012A  3000               	movlw	0
  5686  012B  3BBF               	subwfb	printf@len+1,f
  5687  012C  0A3E               	incf	printf@len,w
  5688  012D  1D03               	skipz
  5689  012E  291B               	goto	l2891
  5690  012F  0A3F               	incf	printf@len+1,w
  5691  0130  1903               	btfsc	3,2
  5692  0131  286E               	goto	l2971
  5693  0132  291B               	goto	l2891
  5694  0133                     l2897:	
  5695                           ;doprnt.c: 802: default:
  5696                           
  5697                           ;doprnt.c: 774: continue;
  5698                           
  5699                           
  5700                           ;doprnt.c: 805: cp = (char *)&c;
  5701  0133  3043               	movlw	low printf@c
  5702  0134  00B9               	movwf	printf@cp
  5703  0135  3000               	movlw	high printf@c
  5704  0136  00BA               	movwf	printf@cp+1
  5705                           
  5706                           ;doprnt.c: 806: len = 1;
  5707  0137  3001               	movlw	1
  5708  0138  00BE               	movwf	printf@len
  5709  0139  3000               	movlw	0
  5710  013A  00BF               	movwf	printf@len+1
  5711                           
  5712                           ;doprnt.c: 807: goto dostring;
  5713  013B  28FD               	goto	l2881
  5714  013C                     l480:	
  5715                           ;doprnt.c: 817: case 'u':
  5716                           
  5717                           
  5718                           ;doprnt.c: 818: flag |= 0x40;
  5719  013C  1740               	bsf	printf@flag,6
  5720                           
  5721                           ;doprnt.c: 822: }
  5722                           
  5723                           ;doprnt.c: 819: break;
  5724  013D  295C               	goto	l464
  5725  013E                     l2903:	
  5726  013E  0020               	movlb	0	; select bank0
  5727  013F  082F               	movf	printf@f+1,w
  5728  0140  00B5               	movwf	??_printf+1
  5729  0141  082E               	movf	printf@f,w
  5730  0142  00B4               	movwf	??_printf
  5731  0143  0AAE               	incf	printf@f,f
  5732  0144  1903               	skipnz
  5733  0145  0AAF               	incf	printf@f+1,f
  5734  0146  0834               	movf	??_printf,w
  5735  0147  0084               	movwf	4
  5736  0148  0835               	movf	??_printf+1,w
  5737  0149  0085               	movwf	5
  5738  014A  0800               	movf	0,w	;code access
  5739  014B  00C3               	movwf	printf@c
  5740                           
  5741                           ; Switch size 1, requested type "space"
  5742                           ; Number of cases is 5, Range of values is 0 to 117
  5743                           ; switch strategies available:
  5744                           ; Name         Instructions Cycles
  5745                           ; simple_byte           16     9 (average)
  5746                           ; direct_byte          242     6 (fixed)
  5747                           ; jumptable            260     6 (fixed)
  5748                           ;	Chosen strategy is simple_byte
  5749  014C  3A00               	xorlw	0	; case 0
  5750  014D  1903               	skipnz
  5751  014E  2A3D               	goto	l504
  5752  014F  3A64               	xorlw	100	; case 100
  5753  0150  1903               	skipnz
  5754  0151  295C               	goto	l464
  5755  0152  3A0D               	xorlw	13	; case 105
  5756  0153  1903               	skipnz
  5757  0154  295C               	goto	l464
  5758  0155  3A1A               	xorlw	26	; case 115
  5759  0156  1903               	skipnz
  5760  0157  28D9               	goto	l2867
  5761  0158  3A06               	xorlw	6	; case 117
  5762  0159  1903               	skipnz
  5763  015A  293C               	goto	l480
  5764  015B  2933               	goto	l2897
  5765  015C                     l464:	
  5766                           
  5767                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  5768  015C  0020               	movlb	0	; select bank0
  5769  015D  1B40               	btfsc	printf@flag,6
  5770  015E  2976               	goto	l2915
  5771                           
  5772                           ;doprnt.c: 1253: {
  5773                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5774  015F  083B               	movf	printf@ap,w
  5775  0160  0086               	movwf	6
  5776  0161  0187               	clrf	7
  5777  0162  3F40               	moviw [0]fsr1
  5778  0163  00BC               	movwf	printf@val
  5779  0164  3F41               	moviw [1]fsr1
  5780  0165  00BD               	movwf	printf@val+1
  5781  0166  3002               	movlw	2
  5782  0167  00B4               	movwf	??_printf
  5783  0168  0834               	movf	??_printf,w
  5784  0169  07BB               	addwf	printf@ap,f
  5785                           
  5786                           ;doprnt.c: 1261: if((int)val < 0) {
  5787  016A  1FBD               	btfss	printf@val+1,7
  5788  016B  2981               	goto	l2919
  5789                           
  5790                           ;doprnt.c: 1262: flag |= 0x03;
  5791  016C  3003               	movlw	3
  5792  016D  00B4               	movwf	??_printf
  5793  016E  0834               	movf	??_printf,w
  5794  016F  04C0               	iorwf	printf@flag,f
  5795                           
  5796                           ;doprnt.c: 1263: val = -val;
  5797  0170  09BC               	comf	printf@val,f
  5798  0171  09BD               	comf	printf@val+1,f
  5799  0172  0ABC               	incf	printf@val,f
  5800  0173  1903               	skipnz
  5801  0174  0ABD               	incf	printf@val+1,f
  5802                           
  5803                           ;doprnt.c: 1264: }
  5804                           ;doprnt.c: 1266: }
  5805  0175  2981               	goto	l2919
  5806  0176                     l2915:	
  5807                           
  5808                           ;doprnt.c: 1268: else
  5809                           ;doprnt.c: 1273: {
  5810                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5811  0176  083B               	movf	printf@ap,w
  5812  0177  0086               	movwf	6
  5813  0178  0187               	clrf	7
  5814  0179  3F40               	moviw [0]fsr1
  5815  017A  00BC               	movwf	printf@val
  5816  017B  3F41               	moviw [1]fsr1
  5817  017C  00BD               	movwf	printf@val+1
  5818  017D  3002               	movlw	2
  5819  017E  00B4               	movwf	??_printf
  5820  017F  0834               	movf	??_printf,w
  5821  0180  07BB               	addwf	printf@ap,f
  5822  0181                     l2919:	
  5823                           
  5824                           ;doprnt.c: 1287: }
  5825                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5826  0181  01C3               	clrf	printf@c
  5827  0182  0AC3               	incf	printf@c,f
  5828  0183  3005               	movlw	5
  5829  0184  0643               	xorwf	printf@c,w
  5830  0185  1903               	btfsc	3,2
  5831  0186  29A6               	goto	l2931
  5832  0187                     l2925:	
  5833                           
  5834                           ;doprnt.c: 1306: if(val < dpowers[c])
  5835  0187  0843               	movf	printf@c,w
  5836  0188  00B4               	movwf	??_printf
  5837  0189  01B5               	clrf	??_printf+1
  5838  018A  35B4               	lslf	??_printf,f
  5839  018B  0DB5               	rlf	??_printf+1,f
  5840  018C  3036               	movlw	low (_dpowers| (0+32768))
  5841  018D  0734               	addwf	??_printf,w
  5842  018E  0084               	movwf	4
  5843  018F  3086               	movlw	high (_dpowers| (0+32768))
  5844  0190  3D35               	addwfc	??_printf+1,w
  5845  0191  0085               	movwf	5
  5846  0192  3F00               	moviw [0]fsr0
  5847  0193  00B6               	movwf	??_printf+2
  5848  0194  3F01               	moviw [1]fsr0
  5849  0195  00B7               	movwf	??_printf+3
  5850  0196  0837               	movf	??_printf+3,w
  5851  0197  023D               	subwf	printf@val+1,w
  5852  0198  1D03               	skipz
  5853  0199  299C               	goto	u2525
  5854  019A  0836               	movf	??_printf+2,w
  5855  019B  023C               	subwf	printf@val,w
  5856  019C                     u2525:	
  5857  019C  1C03               	btfss	3,0
  5858  019D  29A6               	goto	l2931
  5859                           
  5860                           ;doprnt.c: 1307: break;
  5861  019E  3001               	movlw	1
  5862  019F  00B4               	movwf	??_printf
  5863  01A0  0834               	movf	??_printf,w
  5864  01A1  07C3               	addwf	printf@c,f
  5865  01A2  3005               	movlw	5
  5866  01A3  0643               	xorwf	printf@c,w
  5867  01A4  1D03               	btfss	3,2
  5868  01A5  2987               	goto	l2925
  5869  01A6                     l2931:	
  5870                           
  5871                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5872  01A6  0841               	movf	printf@width,w
  5873  01A7  0442               	iorwf	printf@width+1,w
  5874  01A8  1903               	btfsc	3,2
  5875  01A9  29B2               	goto	l487
  5876  01AA  0840               	movf	printf@flag,w
  5877  01AB  3903               	andlw	3
  5878  01AC  1903               	btfsc	3,2
  5879  01AD  29B2               	goto	l487
  5880                           
  5881                           ;doprnt.c: 1346: width--;
  5882  01AE  30FF               	movlw	255
  5883  01AF  07C1               	addwf	printf@width,f
  5884  01B0  30FF               	movlw	255
  5885  01B1  3DC2               	addwfc	printf@width+1,f
  5886  01B2                     l487:	
  5887                           
  5888                           ;doprnt.c: 1381: if(width > c)
  5889  01B2  0843               	movf	printf@c,w
  5890  01B3  00B4               	movwf	??_printf
  5891  01B4  01B5               	clrf	??_printf+1
  5892  01B5  1BB4               	btfsc	??_printf,7
  5893  01B6  03B5               	decf	??_printf+1,f
  5894  01B7  0835               	movf	??_printf+1,w
  5895  01B8  3A80               	xorlw	128
  5896  01B9  00B6               	movwf	??_printf+2
  5897  01BA  0842               	movf	printf@width+1,w
  5898  01BB  3A80               	xorlw	128
  5899  01BC  0236               	subwf	??_printf+2,w
  5900  01BD  1D03               	skipz
  5901  01BE  29C1               	goto	u2565
  5902  01BF  0841               	movf	printf@width,w
  5903  01C0  0234               	subwf	??_printf,w
  5904  01C1                     u2565:	
  5905  01C1  1803               	skipnc
  5906  01C2  29CE               	goto	l2939
  5907                           
  5908                           ;doprnt.c: 1382: width -= c;
  5909  01C3  0020               	movlb	0	; select bank0
  5910  01C4  0843               	movf	printf@c,w
  5911  01C5  00B4               	movwf	??_printf
  5912  01C6  01B5               	clrf	??_printf+1
  5913  01C7  1BB4               	btfsc	??_printf,7
  5914  01C8  03B5               	decf	??_printf+1,f
  5915  01C9  0834               	movf	??_printf,w
  5916  01CA  02C1               	subwf	printf@width,f
  5917  01CB  0835               	movf	??_printf+1,w
  5918  01CC  3BC2               	subwfb	printf@width+1,f
  5919  01CD  29D1               	goto	l2941
  5920  01CE                     l2939:	
  5921                           
  5922                           ;doprnt.c: 1383: else
  5923                           ;doprnt.c: 1384: width = 0;
  5924  01CE  0020               	movlb	0	; select bank0
  5925  01CF  01C1               	clrf	printf@width
  5926  01D0  01C2               	clrf	printf@width+1
  5927  01D1                     l2941:	
  5928                           
  5929                           ;doprnt.c: 1387: if(flag & 0x04) {
  5930  01D1  1D40               	btfss	printf@flag,2
  5931  01D2  29EA               	goto	l2953
  5932                           
  5933                           ;doprnt.c: 1392: if(flag & 0x03)
  5934  01D3  0840               	movf	printf@flag,w
  5935  01D4  3903               	andlw	3
  5936  01D5  1903               	btfsc	3,2
  5937  01D6  29DB               	goto	l2947
  5938                           
  5939                           ;doprnt.c: 1393: (putch('-') );
  5940  01D7  302D               	movlw	45
  5941  01D8  3188  20C7  3180   	fcall	_putch
  5942  01DB                     l2947:	
  5943                           
  5944                           ;doprnt.c: 1415: if(width)
  5945  01DB  0020               	movlb	0	; select bank0
  5946  01DC                     L3:	
  5947  01DC  0841               	movf	printf@width,w
  5948  01DD  0442               	iorwf	printf@width+1,w
  5949  01DE  1903               	btfsc	3,2
  5950  01DF  2A03               	goto	l2963
  5951                           
  5952                           ;doprnt.c: 1417: (putch('0') );
  5953                           
  5954                           ;doprnt.c: 1416: do
  5955  01E0  3030               	movlw	48
  5956  01E1  3188  20C7  3180   	fcall	_putch
  5957                           
  5958                           ;doprnt.c: 1418: while(--width);
  5959  01E4  30FF               	movlw	255
  5960  01E5  0020               	movlb	0	; select bank0
  5961  01E6  07C1               	addwf	printf@width,f
  5962  01E7  30FF               	movlw	255
  5963  01E8  3DC2               	addwfc	printf@width+1,f
  5964  01E9  29DC               	goto	L3
  5965  01EA                     l2953:	
  5966                           ;doprnt.c: 1420: } else
  5967                           
  5968                           
  5969                           ;doprnt.c: 1422: {
  5970                           ;doprnt.c: 1424: if(width
  5971                           ;doprnt.c: 1428: )
  5972  01EA  0841               	movf	printf@width,w
  5973  01EB  0442               	iorwf	printf@width+1,w
  5974  01EC  1903               	btfsc	3,2
  5975  01ED  29FB               	goto	l2959
  5976  01EE                     l2955:	
  5977                           ;doprnt.c: 1429: do
  5978                           
  5979                           
  5980                           ;doprnt.c: 1430: (putch(' ') );
  5981  01EE  3020               	movlw	32
  5982  01EF  3188  20C7  3180   	fcall	_putch
  5983                           
  5984                           ;doprnt.c: 1431: while(--width);
  5985  01F2  30FF               	movlw	255
  5986  01F3  0020               	movlb	0	; select bank0
  5987  01F4  07C1               	addwf	printf@width,f
  5988  01F5  30FF               	movlw	255
  5989  01F6  3DC2               	addwfc	printf@width+1,f
  5990  01F7  0841               	movf	printf@width,w
  5991  01F8  0442               	iorwf	printf@width+1,w
  5992  01F9  1D03               	btfss	3,2
  5993  01FA  29EE               	goto	l2955
  5994  01FB                     l2959:	
  5995                           
  5996                           ;doprnt.c: 1438: if(flag & 0x03)
  5997  01FB  0840               	movf	printf@flag,w
  5998  01FC  3903               	andlw	3
  5999  01FD  1903               	btfsc	3,2
  6000  01FE  2A03               	goto	l2963
  6001                           
  6002                           ;doprnt.c: 1439: (putch('-') );
  6003  01FF  302D               	movlw	45
  6004  0200  3188  20C7  3180   	fcall	_putch
  6005  0203                     l2963:	
  6006                           
  6007                           ;doprnt.c: 1469: }
  6008                           ;doprnt.c: 1472: prec = c;
  6009  0203  0020               	movlb	0	; select bank0
  6010  0204  0843               	movf	printf@c,w
  6011  0205  00B4               	movwf	??_printf
  6012  0206  0834               	movf	??_printf,w
  6013  0207  00B8               	movwf	printf@prec
  6014  0208                     l2969:	
  6015                           ;doprnt.c: 1474: while(prec--) {
  6016                           
  6017  0208  30FF               	movlw	255
  6018  0209  0020               	movlb	0	; select bank0
  6019  020A  00B4               	movwf	??_printf
  6020  020B  0834               	movf	??_printf,w
  6021  020C  07B8               	addwf	printf@prec,f
  6022  020D  0A38               	incf	printf@prec,w
  6023  020E  1903               	btfsc	3,2
  6024  020F  286E               	goto	l2971
  6025                           
  6026                           ;doprnt.c: 1478: {
  6027                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6028  0210  300A               	movlw	10
  6029  0211  00A8               	movwf	___lwmod@divisor
  6030  0212  3000               	movlw	0
  6031  0213  00A9               	movwf	___lwmod@divisor+1
  6032  0214  0838               	movf	printf@prec,w
  6033  0215  00B4               	movwf	??_printf
  6034  0216  01B5               	clrf	??_printf+1
  6035  0217  35B4               	lslf	??_printf,f
  6036  0218  0DB5               	rlf	??_printf+1,f
  6037  0219  3036               	movlw	low (_dpowers| (0+32768))
  6038  021A  0734               	addwf	??_printf,w
  6039  021B  0084               	movwf	4
  6040  021C  3086               	movlw	high (_dpowers| (0+32768))
  6041  021D  3D35               	addwfc	??_printf+1,w
  6042  021E  0085               	movwf	5
  6043  021F  3F00               	moviw [0]fsr0
  6044  0220  00A0               	movwf	___lwdiv@divisor
  6045  0221  3F01               	moviw [1]fsr0
  6046  0222  00A1               	movwf	___lwdiv@divisor+1
  6047  0223  083D               	movf	printf@val+1,w
  6048  0224  00A3               	movwf	___lwdiv@dividend+1
  6049  0225  083C               	movf	printf@val,w
  6050  0226  00A2               	movwf	___lwdiv@dividend
  6051  0227  318B  236D  3180   	fcall	___lwdiv
  6052  022A  0020               	movlb	0	; select bank0
  6053  022B  0821               	movf	?___lwdiv+1,w
  6054  022C  00AB               	movwf	___lwmod@dividend+1
  6055  022D  0820               	movf	?___lwdiv,w
  6056  022E  00AA               	movwf	___lwmod@dividend
  6057  022F  318B  2312  3180   	fcall	___lwmod
  6058  0232  0020               	movlb	0	; select bank0
  6059  0233  0828               	movf	?___lwmod,w
  6060  0234  3E30               	addlw	48
  6061  0235  00B6               	movwf	??_printf+2
  6062  0236  0836               	movf	??_printf+2,w
  6063  0237  00C3               	movwf	printf@c
  6064                           
  6065                           ;doprnt.c: 1523: }
  6066                           ;doprnt.c: 1524: (putch(c) );
  6067  0238  0843               	movf	printf@c,w
  6068  0239  3188  20C7  3180   	fcall	_putch
  6069  023C  2A08               	goto	l2969
  6070  023D                     l504:	
  6071                           ;doprnt.c: 1540: return 0;
  6072                           ;	Return value of _printf is never used
  6073                           
  6074                           ;doprnt.c: 1525: }
  6075                           ;doprnt.c: 1533: }
  6076                           ;doprnt.c: 1535: alldone:
  6077                           
  6078  023D  0008               	return
  6079  023E                     __end_of_printf:	
  6080                           
  6081                           	psect	text16
  6082  08C7                     __ptext16:	
  6083 ;; *************** function _putch *****************
  6084 ;; Defined at:
  6085 ;;		line 160 in file "mcc_generated_files/eusart.c"
  6086 ;; Parameters:    Size  Location     Type
  6087 ;;  txData          1    wreg     unsigned char 
  6088 ;; Auto vars:     Size  Location     Type
  6089 ;;  txData          1    2[BANK0 ] unsigned char 
  6090 ;; Return value:  Size  Location     Type
  6091 ;;                  1    wreg      void 
  6092 ;; Registers used:
  6093 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6094 ;; Tracked objects:
  6095 ;;		On entry : 0/0
  6096 ;;		On exit  : 0/0
  6097 ;;		Unchanged: 0/0
  6098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6099 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6100 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6102 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6103 ;;Total ram usage:        1 bytes
  6104 ;; Hardware stack levels used:    1
  6105 ;; Hardware stack levels required when called:    6
  6106 ;; This function calls:
  6107 ;;		_EUSART_Write
  6108 ;; This function is called by:
  6109 ;;		_printf
  6110 ;; This function uses a non-reentrant model
  6111 ;;
  6112                           
  6113                           
  6114                           ;psect for function _putch
  6115  08C7                     _putch:	
  6116                           
  6117                           ;incstack = 0
  6118                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6119                           ;putch@txData stored from wreg
  6120  08C7  0020               	movlb	0	; select bank0
  6121  08C8  00A2               	movwf	putch@txData
  6122                           
  6123                           ;eusart.c: 162: EUSART_Write(txData);
  6124  08C9  0822               	movf	putch@txData,w
  6125  08CA  318A  22C7         	fcall	_EUSART_Write
  6126  08CC  0008               	return
  6127  08CD                     __end_of_putch:	
  6128                           
  6129                           	psect	text17
  6130  0AC7                     __ptext17:	
  6131 ;; *************** function _EUSART_Write *****************
  6132 ;; Defined at:
  6133 ;;		line 132 in file "mcc_generated_files/eusart.c"
  6134 ;; Parameters:    Size  Location     Type
  6135 ;;  txData          1    wreg     unsigned char 
  6136 ;; Auto vars:     Size  Location     Type
  6137 ;;  txData          1    1[BANK0 ] unsigned char 
  6138 ;; Return value:  Size  Location     Type
  6139 ;;                  1    wreg      void 
  6140 ;; Registers used:
  6141 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6142 ;; Tracked objects:
  6143 ;;		On entry : 0/0
  6144 ;;		On exit  : 0/0
  6145 ;;		Unchanged: 0/0
  6146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6148 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6149 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6150 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6151 ;;Total ram usage:        2 bytes
  6152 ;; Hardware stack levels used:    1
  6153 ;; Hardware stack levels required when called:    5
  6154 ;; This function calls:
  6155 ;;		Nothing
  6156 ;; This function is called by:
  6157 ;;		_putch
  6158 ;; This function uses a non-reentrant model
  6159 ;;
  6160                           
  6161                           
  6162                           ;psect for function _EUSART_Write
  6163  0AC7                     _EUSART_Write:	
  6164                           
  6165                           ;incstack = 0
  6166                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  6167                           ;EUSART_Write@txData stored from wreg
  6168  0AC7  0020               	movlb	0	; select bank0
  6169  0AC8  00A1               	movwf	EUSART_Write@txData
  6170  0AC9                     l2703:	
  6171                           ;eusart.c: 135: {
  6172                           
  6173                           ;eusart.c: 134: while(0 == eusartTxBufferRemaining)
  6174                           
  6175  0AC9  087A               	movf	_eusartTxBufferRemaining,w	;volatile
  6176  0ACA  1903               	btfsc	3,2
  6177  0ACB  2AC9               	goto	l2703
  6178                           
  6179                           ;eusart.c: 136: }
  6180                           ;eusart.c: 138: if(0 == PIE1bits.TXIE)
  6181  0ACC  0021               	movlb	1	; select bank1
  6182  0ACD  1A11               	btfsc	17,4	;volatile
  6183  0ACE  2AD4               	goto	l229
  6184                           
  6185                           ;eusart.c: 139: {
  6186                           ;eusart.c: 140: TXREG = txData;
  6187  0ACF  0020               	movlb	0	; select bank0
  6188  0AD0  0821               	movf	EUSART_Write@txData,w
  6189  0AD1  0023               	movlb	3	; select bank3
  6190  0AD2  009A               	movwf	26	;volatile
  6191                           
  6192                           ;eusart.c: 141: }
  6193  0AD3  2AE8               	goto	l2717
  6194  0AD4                     l229:	
  6195                           
  6196                           ;eusart.c: 142: else
  6197                           ;eusart.c: 143: {
  6198                           ;eusart.c: 144: PIE1bits.TXIE = 0;
  6199  0AD4  1211               	bcf	17,4	;volatile
  6200                           
  6201                           ;eusart.c: 145: eusartTxBuffer[eusartTxHead++] = txData;
  6202  0AD5  0020               	movlb	0	; select bank0
  6203  0AD6  0821               	movf	EUSART_Write@txData,w
  6204  0AD7  00A0               	movwf	??_EUSART_Write
  6205  0AD8  087C               	movf	_eusartTxHead,w
  6206  0AD9  3EA8               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  6207  0ADA  0086               	movwf	6
  6208  0ADB  0187               	clrf	7
  6209  0ADC  0820               	movf	??_EUSART_Write,w
  6210  0ADD  0081               	movwf	1
  6211  0ADE  3001               	movlw	1
  6212  0ADF  00A0               	movwf	??_EUSART_Write
  6213  0AE0  0820               	movf	??_EUSART_Write,w
  6214  0AE1  07FC               	addwf	_eusartTxHead,f	;volatile
  6215                           
  6216                           ;eusart.c: 146: if(sizeof(eusartTxBuffer) <= eusartTxHead)
  6217  0AE2  3008               	movlw	8
  6218  0AE3  027C               	subwf	_eusartTxHead,w	;volatile
  6219  0AE4  1803               	btfsc	3,0
  6220                           
  6221                           ;eusart.c: 147: {
  6222                           ;eusart.c: 148: eusartTxHead = 0;
  6223  0AE5  01FC               	clrf	_eusartTxHead	;volatile
  6224                           
  6225                           ;eusart.c: 149: }
  6226                           ;eusart.c: 150: eusartTxBufferRemaining--;
  6227  0AE6  3001               	movlw	1
  6228  0AE7  02FA               	subwf	_eusartTxBufferRemaining,f	;volatile
  6229  0AE8                     l2717:	
  6230                           
  6231                           ;eusart.c: 151: }
  6232                           ;eusart.c: 152: PIE1bits.TXIE = 1;
  6233  0AE8  0021               	movlb	1	; select bank1
  6234  0AE9  1611               	bsf	17,4	;volatile
  6235  0AEA  0008               	return
  6236  0AEB                     __end_of_EUSART_Write:	
  6237                           
  6238                           	psect	text18
  6239  0B12                     __ptext18:	
  6240 ;; *************** function ___lwmod *****************
  6241 ;; Defined at:
  6242 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  6243 ;; Parameters:    Size  Location     Type
  6244 ;;  divisor         2    8[BANK0 ] unsigned int 
  6245 ;;  dividend        2   10[BANK0 ] unsigned int 
  6246 ;; Auto vars:     Size  Location     Type
  6247 ;;  counter         1   13[BANK0 ] unsigned char 
  6248 ;; Return value:  Size  Location     Type
  6249 ;;                  2    8[BANK0 ] unsigned int 
  6250 ;; Registers used:
  6251 ;;		wreg, status,2, status,0
  6252 ;; Tracked objects:
  6253 ;;		On entry : 0/0
  6254 ;;		On exit  : 0/0
  6255 ;;		Unchanged: 0/0
  6256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6257 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6258 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6259 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6260 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6261 ;;Total ram usage:        6 bytes
  6262 ;; Hardware stack levels used:    1
  6263 ;; Hardware stack levels required when called:    5
  6264 ;; This function calls:
  6265 ;;		Nothing
  6266 ;; This function is called by:
  6267 ;;		_printf
  6268 ;; This function uses a non-reentrant model
  6269 ;;
  6270                           
  6271                           
  6272                           ;psect for function ___lwmod
  6273  0B12                     ___lwmod:	
  6274                           
  6275                           ;incstack = 0
  6276                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  6277  0B12  0020               	movlb	0	; select bank0
  6278  0B13  0828               	movf	___lwmod@divisor,w
  6279  0B14  0429               	iorwf	___lwmod@divisor+1,w
  6280  0B15  1903               	btfsc	3,2
  6281  0B16  2B3A               	goto	l2823
  6282  0B17  01AD               	clrf	___lwmod@counter
  6283  0B18  0AAD               	incf	___lwmod@counter,f
  6284  0B19                     l2813:	
  6285  0B19  1BA9               	btfsc	___lwmod@divisor+1,7
  6286  0B1A  2B25               	goto	l2815
  6287  0B1B  3001               	movlw	1
  6288  0B1C                     u2365:	
  6289  0B1C  35A8               	lslf	___lwmod@divisor,f
  6290  0B1D  0DA9               	rlf	___lwmod@divisor+1,f
  6291  0B1E  0B89               	decfsz	9,f
  6292  0B1F  2B1C               	goto	u2365
  6293  0B20  3001               	movlw	1
  6294  0B21  00AC               	movwf	??___lwmod
  6295  0B22  082C               	movf	??___lwmod,w
  6296  0B23  07AD               	addwf	___lwmod@counter,f
  6297  0B24  2B19               	goto	l2813
  6298  0B25                     l2815:	
  6299  0B25  0829               	movf	___lwmod@divisor+1,w
  6300  0B26  022B               	subwf	___lwmod@dividend+1,w
  6301  0B27  1D03               	skipz
  6302  0B28  2B2B               	goto	u2385
  6303  0B29  0828               	movf	___lwmod@divisor,w
  6304  0B2A  022A               	subwf	___lwmod@dividend,w
  6305  0B2B                     u2385:	
  6306  0B2B  1C03               	skipc
  6307  0B2C  2B31               	goto	l2819
  6308  0B2D  0828               	movf	___lwmod@divisor,w
  6309  0B2E  02AA               	subwf	___lwmod@dividend,f
  6310  0B2F  0829               	movf	___lwmod@divisor+1,w
  6311  0B30  3BAB               	subwfb	___lwmod@dividend+1,f
  6312  0B31                     l2819:	
  6313  0B31  3001               	movlw	1
  6314  0B32                     u2395:	
  6315  0B32  36A9               	lsrf	___lwmod@divisor+1,f
  6316  0B33  0CA8               	rrf	___lwmod@divisor,f
  6317  0B34  0B89               	decfsz	9,f
  6318  0B35  2B32               	goto	u2395
  6319  0B36  3001               	movlw	1
  6320  0B37  02AD               	subwf	___lwmod@counter,f
  6321  0B38  1D03               	btfss	3,2
  6322  0B39  2B25               	goto	l2815
  6323  0B3A                     l2823:	
  6324  0B3A  082B               	movf	___lwmod@dividend+1,w
  6325  0B3B  00A9               	movwf	?___lwmod+1
  6326  0B3C  082A               	movf	___lwmod@dividend,w
  6327  0B3D  00A8               	movwf	?___lwmod
  6328  0B3E  0008               	return
  6329  0B3F                     __end_of___lwmod:	
  6330                           
  6331                           	psect	text19
  6332  0B6D                     __ptext19:	
  6333 ;; *************** function ___lwdiv *****************
  6334 ;; Defined at:
  6335 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  6336 ;; Parameters:    Size  Location     Type
  6337 ;;  divisor         2    0[BANK0 ] unsigned int 
  6338 ;;  dividend        2    2[BANK0 ] unsigned int 
  6339 ;; Auto vars:     Size  Location     Type
  6340 ;;  quotient        2    5[BANK0 ] unsigned int 
  6341 ;;  counter         1    7[BANK0 ] unsigned char 
  6342 ;; Return value:  Size  Location     Type
  6343 ;;                  2    0[BANK0 ] unsigned int 
  6344 ;; Registers used:
  6345 ;;		wreg, status,2, status,0
  6346 ;; Tracked objects:
  6347 ;;		On entry : 0/0
  6348 ;;		On exit  : 0/0
  6349 ;;		Unchanged: 0/0
  6350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6351 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6352 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6353 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6354 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6355 ;;Total ram usage:        8 bytes
  6356 ;; Hardware stack levels used:    1
  6357 ;; Hardware stack levels required when called:    5
  6358 ;; This function calls:
  6359 ;;		Nothing
  6360 ;; This function is called by:
  6361 ;;		_printf
  6362 ;; This function uses a non-reentrant model
  6363 ;;
  6364                           
  6365                           
  6366                           ;psect for function ___lwdiv
  6367  0B6D                     ___lwdiv:	
  6368                           
  6369                           ;incstack = 0
  6370                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6371  0B6D  0020               	movlb	0	; select bank0
  6372  0B6E  01A5               	clrf	___lwdiv@quotient
  6373  0B6F  01A6               	clrf	___lwdiv@quotient+1
  6374  0B70  0820               	movf	___lwdiv@divisor,w
  6375  0B71  0421               	iorwf	___lwdiv@divisor+1,w
  6376  0B72  1903               	btfsc	3,2
  6377  0B73  2B9D               	goto	l2801
  6378  0B74  01A7               	clrf	___lwdiv@counter
  6379  0B75  0AA7               	incf	___lwdiv@counter,f
  6380  0B76                     l2789:	
  6381  0B76  1BA1               	btfsc	___lwdiv@divisor+1,7
  6382  0B77  2B82               	goto	l2791
  6383  0B78  3001               	movlw	1
  6384  0B79                     u2295:	
  6385  0B79  35A0               	lslf	___lwdiv@divisor,f
  6386  0B7A  0DA1               	rlf	___lwdiv@divisor+1,f
  6387  0B7B  0B89               	decfsz	9,f
  6388  0B7C  2B79               	goto	u2295
  6389  0B7D  3001               	movlw	1
  6390  0B7E  00A4               	movwf	??___lwdiv
  6391  0B7F  0824               	movf	??___lwdiv,w
  6392  0B80  07A7               	addwf	___lwdiv@counter,f
  6393  0B81  2B76               	goto	l2789
  6394  0B82                     l2791:	
  6395  0B82  3001               	movlw	1
  6396  0B83                     u2315:	
  6397  0B83  35A5               	lslf	___lwdiv@quotient,f
  6398  0B84  0DA6               	rlf	___lwdiv@quotient+1,f
  6399  0B85  0B89               	decfsz	9,f
  6400  0B86  2B83               	goto	u2315
  6401  0B87  0821               	movf	___lwdiv@divisor+1,w
  6402  0B88  0223               	subwf	___lwdiv@dividend+1,w
  6403  0B89  1D03               	skipz
  6404  0B8A  2B8D               	goto	u2325
  6405  0B8B  0820               	movf	___lwdiv@divisor,w
  6406  0B8C  0222               	subwf	___lwdiv@dividend,w
  6407  0B8D                     u2325:	
  6408  0B8D  1C03               	skipc
  6409  0B8E  2B94               	goto	l2797
  6410  0B8F  0820               	movf	___lwdiv@divisor,w
  6411  0B90  02A2               	subwf	___lwdiv@dividend,f
  6412  0B91  0821               	movf	___lwdiv@divisor+1,w
  6413  0B92  3BA3               	subwfb	___lwdiv@dividend+1,f
  6414  0B93  1425               	bsf	___lwdiv@quotient,0
  6415  0B94                     l2797:	
  6416  0B94  3001               	movlw	1
  6417  0B95                     u2335:	
  6418  0B95  36A1               	lsrf	___lwdiv@divisor+1,f
  6419  0B96  0CA0               	rrf	___lwdiv@divisor,f
  6420  0B97  0B89               	decfsz	9,f
  6421  0B98  2B95               	goto	u2335
  6422  0B99  3001               	movlw	1
  6423  0B9A  02A7               	subwf	___lwdiv@counter,f
  6424  0B9B  1D03               	btfss	3,2
  6425  0B9C  2B82               	goto	l2791
  6426  0B9D                     l2801:	
  6427  0B9D  0826               	movf	___lwdiv@quotient+1,w
  6428  0B9E  00A1               	movwf	?___lwdiv+1
  6429  0B9F  0825               	movf	___lwdiv@quotient,w
  6430  0BA0  00A0               	movwf	?___lwdiv
  6431  0BA1  0008               	return
  6432  0BA2                     __end_of___lwdiv:	
  6433                           
  6434                           	psect	text20
  6435  0955                     __ptext20:	
  6436 ;; *************** function _abs *****************
  6437 ;; Defined at:
  6438 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\abs.c"
  6439 ;; Parameters:    Size  Location     Type
  6440 ;;  a               2    7[BANK0 ] int 
  6441 ;; Auto vars:     Size  Location     Type
  6442 ;;		None
  6443 ;; Return value:  Size  Location     Type
  6444 ;;                  2    7[BANK0 ] int 
  6445 ;; Registers used:
  6446 ;;		wreg, status,2, status,0
  6447 ;; Tracked objects:
  6448 ;;		On entry : 0/0
  6449 ;;		On exit  : 0/0
  6450 ;;		Unchanged: 0/0
  6451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6452 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6454 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6455 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6456 ;;Total ram usage:        4 bytes
  6457 ;; Hardware stack levels used:    1
  6458 ;; Hardware stack levels required when called:    5
  6459 ;; This function calls:
  6460 ;;		Nothing
  6461 ;; This function is called by:
  6462 ;;		_PROTOCOL_I2C_Send_float
  6463 ;; This function uses a non-reentrant model
  6464 ;;
  6465                           
  6466                           
  6467                           ;psect for function _abs
  6468  0955                     _abs:	
  6469                           
  6470                           ;incstack = 0
  6471                           ; Regs used in _abs: [wreg+status,2+status,0]
  6472  0955  0020               	movlb	0	; select bank0
  6473  0956  1FA8               	btfss	abs@a+1,7
  6474  0957  0008               	return
  6475  0958  0927               	comf	abs@a,w
  6476  0959  00A9               	movwf	??_abs
  6477  095A  0928               	comf	abs@a+1,w
  6478  095B  00AA               	movwf	??_abs+1
  6479  095C  0AA9               	incf	??_abs,f
  6480  095D  1903               	skipnz
  6481  095E  0AAA               	incf	??_abs+1,f
  6482  095F  0829               	movf	??_abs,w
  6483  0960  00A7               	movwf	?_abs
  6484  0961  082A               	movf	??_abs+1,w
  6485  0962  00A8               	movwf	?_abs+1
  6486  0963  0008               	return
  6487  0964                     __end_of_abs:	
  6488                           
  6489                           	psect	text21
  6490  0E1C                     __ptext21:	
  6491 ;; *************** function ___fttol *****************
  6492 ;; Defined at:
  6493 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\fttol.c"
  6494 ;; Parameters:    Size  Location     Type
  6495 ;;  f1              3   24[BANK0 ] float 
  6496 ;; Auto vars:     Size  Location     Type
  6497 ;;  lval            4   33[BANK0 ] unsigned long 
  6498 ;;  exp1            1   37[BANK0 ] unsigned char 
  6499 ;;  sign1           1   32[BANK0 ] unsigned char 
  6500 ;; Return value:  Size  Location     Type
  6501 ;;                  4   24[BANK0 ] long 
  6502 ;; Registers used:
  6503 ;;		wreg, status,2, status,0
  6504 ;; Tracked objects:
  6505 ;;		On entry : 0/0
  6506 ;;		On exit  : 0/0
  6507 ;;		Unchanged: 0/0
  6508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6509 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6510 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6511 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6512 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6513 ;;Total ram usage:       14 bytes
  6514 ;; Hardware stack levels used:    1
  6515 ;; Hardware stack levels required when called:    5
  6516 ;; This function calls:
  6517 ;;		Nothing
  6518 ;; This function is called by:
  6519 ;;		_PROTOCOL_I2C_Send_float
  6520 ;; This function uses a non-reentrant model
  6521 ;;
  6522                           
  6523                           
  6524                           ;psect for function ___fttol
  6525  0E1C                     ___fttol:	
  6526                           
  6527                           ;incstack = 0
  6528                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  6529  0E1C  0020               	movlb	0	; select bank0
  6530  0E1D  0838               	movf	___fttol@f1,w
  6531  0E1E  00BC               	movwf	??___fttol
  6532  0E1F  0839               	movf	___fttol@f1+1,w
  6533  0E20  00BD               	movwf	??___fttol+1
  6534  0E21  083A               	movf	___fttol@f1+2,w
  6535  0E22  00BE               	movwf	??___fttol+2
  6536  0E23  1003               	clrc
  6537  0E24  0D3D               	rlf	??___fttol+1,w
  6538  0E25  0D3E               	rlf	??___fttol+2,w
  6539  0E26  00BF               	movwf	??___fttol+3
  6540  0E27  083F               	movf	??___fttol+3,w
  6541  0E28  00C5               	movwf	___fttol@exp1
  6542  0E29  0845               	movf	___fttol@exp1,w
  6543  0E2A  1D03               	btfss	3,2
  6544  0E2B  2E35               	goto	l3253
  6545  0E2C  3000               	movlw	0
  6546  0E2D  00BB               	movwf	?___fttol+3
  6547  0E2E  3000               	movlw	0
  6548  0E2F  00BA               	movwf	?___fttol+2
  6549  0E30  3000               	movlw	0
  6550  0E31  00B9               	movwf	?___fttol+1
  6551  0E32  3000               	movlw	0
  6552  0E33  00B8               	movwf	?___fttol
  6553  0E34  0008               	return
  6554  0E35                     l3253:	
  6555  0E35  0838               	movf	___fttol@f1,w
  6556  0E36  00BC               	movwf	??___fttol
  6557  0E37  0839               	movf	___fttol@f1+1,w
  6558  0E38  00BD               	movwf	??___fttol+1
  6559  0E39  083A               	movf	___fttol@f1+2,w
  6560  0E3A  00BE               	movwf	??___fttol+2
  6561  0E3B  3017               	movlw	23
  6562  0E3C                     u3335:	
  6563  0E3C  36BE               	lsrf	??___fttol+2,f
  6564  0E3D  0CBD               	rrf	??___fttol+1,f
  6565  0E3E  0CBC               	rrf	??___fttol,f
  6566  0E3F  0B89               	decfsz	9,f
  6567  0E40  2E3C               	goto	u3335
  6568  0E41  083C               	movf	??___fttol,w
  6569  0E42  00BF               	movwf	??___fttol+3
  6570  0E43  083F               	movf	??___fttol+3,w
  6571  0E44  00C0               	movwf	___fttol@sign1
  6572  0E45  17B9               	bsf	___fttol@f1+1,7
  6573  0E46  30FF               	movlw	255
  6574  0E47  05B8               	andwf	___fttol@f1,f
  6575  0E48  30FF               	movlw	255
  6576  0E49  05B9               	andwf	___fttol@f1+1,f
  6577  0E4A  3000               	movlw	0
  6578  0E4B  05BA               	andwf	___fttol@f1+2,f
  6579  0E4C  0838               	movf	___fttol@f1,w
  6580  0E4D  00C1               	movwf	___fttol@lval
  6581  0E4E  0839               	movf	___fttol@f1+1,w
  6582  0E4F  00C2               	movwf	___fttol@lval+1
  6583  0E50  083A               	movf	___fttol@f1+2,w
  6584  0E51  00C3               	movwf	___fttol@lval+2
  6585  0E52  01C4               	clrf	___fttol@lval+3
  6586  0E53  308E               	movlw	142
  6587  0E54  02C5               	subwf	___fttol@exp1,f
  6588  0E55  1FC5               	btfss	___fttol@exp1,7
  6589  0E56  2E73               	goto	l3273
  6590  0E57  0845               	movf	___fttol@exp1,w
  6591  0E58  3A80               	xorlw	128
  6592  0E59  3E8F               	addlw	143
  6593  0E5A  1803               	skipnc
  6594  0E5B  2E65               	goto	l3271
  6595  0E5C  3000               	movlw	0
  6596  0E5D  00BB               	movwf	?___fttol+3
  6597  0E5E  3000               	movlw	0
  6598  0E5F  00BA               	movwf	?___fttol+2
  6599  0E60  3000               	movlw	0
  6600  0E61  00B9               	movwf	?___fttol+1
  6601  0E62  3000               	movlw	0
  6602  0E63  00B8               	movwf	?___fttol
  6603  0E64  0008               	return
  6604  0E65                     l3271:	
  6605  0E65  3001               	movlw	1
  6606  0E66                     u3365:	
  6607  0E66  36C4               	lsrf	___fttol@lval+3,f
  6608  0E67  0CC3               	rrf	___fttol@lval+2,f
  6609  0E68  0CC2               	rrf	___fttol@lval+1,f
  6610  0E69  0CC1               	rrf	___fttol@lval,f
  6611  0E6A  0B89               	decfsz	9,f
  6612  0E6B  2E66               	goto	u3365
  6613  0E6C  3001               	movlw	1
  6614  0E6D  00BC               	movwf	??___fttol
  6615  0E6E  083C               	movf	??___fttol,w
  6616  0E6F  07C5               	addwf	___fttol@exp1,f
  6617  0E70  1903               	btfsc	3,2
  6618  0E71  2E8C               	goto	l3281
  6619  0E72  2E65               	goto	l3271
  6620  0E73                     l3273:	
  6621  0E73  3018               	movlw	24
  6622  0E74  0245               	subwf	___fttol@exp1,w
  6623  0E75  1C03               	skipc
  6624  0E76  2E89               	goto	l1175
  6625  0E77  3000               	movlw	0
  6626  0E78  00BB               	movwf	?___fttol+3
  6627  0E79  3000               	movlw	0
  6628  0E7A  00BA               	movwf	?___fttol+2
  6629  0E7B  3000               	movlw	0
  6630  0E7C  00B9               	movwf	?___fttol+1
  6631  0E7D  3000               	movlw	0
  6632  0E7E  00B8               	movwf	?___fttol
  6633  0E7F  0008               	return
  6634  0E80                     l3279:	
  6635  0E80  3001               	movlw	1
  6636  0E81                     u3395:	
  6637  0E81  35C1               	lslf	___fttol@lval,f
  6638  0E82  0DC2               	rlf	___fttol@lval+1,f
  6639  0E83  0DC3               	rlf	___fttol@lval+2,f
  6640  0E84  0DC4               	rlf	___fttol@lval+3,f
  6641  0E85  0B89               	decfsz	9,f
  6642  0E86  2E81               	goto	u3395
  6643  0E87  3001               	movlw	1
  6644  0E88  02C5               	subwf	___fttol@exp1,f
  6645  0E89                     l1175:	
  6646  0E89  0845               	movf	___fttol@exp1,w
  6647  0E8A  1D03               	btfss	3,2
  6648  0E8B  2E80               	goto	l3279
  6649  0E8C                     l3281:	
  6650  0E8C  0840               	movf	___fttol@sign1,w
  6651  0E8D  1903               	btfsc	3,2
  6652  0E8E  2E9A               	goto	l3285
  6653  0E8F  09C1               	comf	___fttol@lval,f
  6654  0E90  09C2               	comf	___fttol@lval+1,f
  6655  0E91  09C3               	comf	___fttol@lval+2,f
  6656  0E92  09C4               	comf	___fttol@lval+3,f
  6657  0E93  0AC1               	incf	___fttol@lval,f
  6658  0E94  1903               	skipnz
  6659  0E95  0AC2               	incf	___fttol@lval+1,f
  6660  0E96  1903               	skipnz
  6661  0E97  0AC3               	incf	___fttol@lval+2,f
  6662  0E98  1903               	skipnz
  6663  0E99  0AC4               	incf	___fttol@lval+3,f
  6664  0E9A                     l3285:	
  6665  0E9A  0844               	movf	___fttol@lval+3,w
  6666  0E9B  00BB               	movwf	?___fttol+3
  6667  0E9C  0843               	movf	___fttol@lval+2,w
  6668  0E9D  00BA               	movwf	?___fttol+2
  6669  0E9E  0842               	movf	___fttol@lval+1,w
  6670  0E9F  00B9               	movwf	?___fttol+1
  6671  0EA0  0841               	movf	___fttol@lval,w
  6672  0EA1  00B8               	movwf	?___fttol
  6673  0EA2  0008               	return
  6674  0EA3                     __end_of___fttol:	
  6675                           
  6676                           	psect	text22
  6677  0F4C                     __ptext22:	
  6678 ;; *************** function ___ftmul *****************
  6679 ;; Defined at:
  6680 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftmul.c"
  6681 ;; Parameters:    Size  Location     Type
  6682 ;;  f1              3    8[BANK0 ] float 
  6683 ;;  f2              3   11[BANK0 ] float 
  6684 ;; Auto vars:     Size  Location     Type
  6685 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
  6686 ;;  sign            1   23[BANK0 ] unsigned char 
  6687 ;;  cntr            1   22[BANK0 ] unsigned char 
  6688 ;;  exp             1   18[BANK0 ] unsigned char 
  6689 ;; Return value:  Size  Location     Type
  6690 ;;                  3    8[BANK0 ] float 
  6691 ;; Registers used:
  6692 ;;		wreg, status,2, status,0, pclath, cstack
  6693 ;; Tracked objects:
  6694 ;;		On entry : 0/0
  6695 ;;		On exit  : 0/0
  6696 ;;		Unchanged: 0/0
  6697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6698 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6699 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6700 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6701 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6702 ;;Total ram usage:       16 bytes
  6703 ;; Hardware stack levels used:    1
  6704 ;; Hardware stack levels required when called:    6
  6705 ;; This function calls:
  6706 ;;		___ftpack
  6707 ;; This function is called by:
  6708 ;;		_PROTOCOL_I2C_Send_float
  6709 ;; This function uses a non-reentrant model
  6710 ;;
  6711                           
  6712                           
  6713                           ;psect for function ___ftmul
  6714  0F4C                     ___ftmul:	
  6715                           
  6716                           ;incstack = 0
  6717                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  6718  0F4C  0020               	movlb	0	; select bank0
  6719  0F4D  0828               	movf	___ftmul@f1,w
  6720  0F4E  00AE               	movwf	??___ftmul
  6721  0F4F  0829               	movf	___ftmul@f1+1,w
  6722  0F50  00AF               	movwf	??___ftmul+1
  6723  0F51  082A               	movf	___ftmul@f1+2,w
  6724  0F52  00B0               	movwf	??___ftmul+2
  6725  0F53  1003               	clrc
  6726  0F54  0D2F               	rlf	??___ftmul+1,w
  6727  0F55  0D30               	rlf	??___ftmul+2,w
  6728  0F56  00B1               	movwf	??___ftmul+3
  6729  0F57  0831               	movf	??___ftmul+3,w
  6730  0F58  00B2               	movwf	___ftmul@exp
  6731  0F59  0832               	movf	___ftmul@exp,w
  6732  0F5A  1D03               	btfss	3,2
  6733  0F5B  2F63               	goto	l3203
  6734  0F5C  3000               	movlw	0
  6735  0F5D  00A8               	movwf	?___ftmul
  6736  0F5E  3000               	movlw	0
  6737  0F5F  00A9               	movwf	?___ftmul+1
  6738  0F60  3000               	movlw	0
  6739  0F61  00AA               	movwf	?___ftmul+2
  6740  0F62  0008               	return
  6741  0F63                     l3203:	
  6742  0F63  082B               	movf	___ftmul@f2,w
  6743  0F64  00AE               	movwf	??___ftmul
  6744  0F65  082C               	movf	___ftmul@f2+1,w
  6745  0F66  00AF               	movwf	??___ftmul+1
  6746  0F67  082D               	movf	___ftmul@f2+2,w
  6747  0F68  00B0               	movwf	??___ftmul+2
  6748  0F69  1003               	clrc
  6749  0F6A  0D2F               	rlf	??___ftmul+1,w
  6750  0F6B  0D30               	rlf	??___ftmul+2,w
  6751  0F6C  00B1               	movwf	??___ftmul+3
  6752  0F6D  0831               	movf	??___ftmul+3,w
  6753  0F6E  00B7               	movwf	___ftmul@sign
  6754  0F6F  0837               	movf	___ftmul@sign,w
  6755  0F70  1D03               	btfss	3,2
  6756  0F71  2F79               	goto	l3209
  6757  0F72  3000               	movlw	0
  6758  0F73  00A8               	movwf	?___ftmul
  6759  0F74  3000               	movlw	0
  6760  0F75  00A9               	movwf	?___ftmul+1
  6761  0F76  3000               	movlw	0
  6762  0F77  00AA               	movwf	?___ftmul+2
  6763  0F78  0008               	return
  6764  0F79                     l3209:	
  6765  0F79  0837               	movf	___ftmul@sign,w
  6766  0F7A  3E7B               	addlw	123
  6767  0F7B  00AE               	movwf	??___ftmul
  6768  0F7C  082E               	movf	??___ftmul,w
  6769  0F7D  07B2               	addwf	___ftmul@exp,f
  6770  0F7E  0828               	movf	___ftmul@f1,w
  6771  0F7F  00AE               	movwf	??___ftmul
  6772  0F80  0829               	movf	___ftmul@f1+1,w
  6773  0F81  00AF               	movwf	??___ftmul+1
  6774  0F82  082A               	movf	___ftmul@f1+2,w
  6775  0F83  00B0               	movwf	??___ftmul+2
  6776  0F84  3010               	movlw	16
  6777  0F85                     u3225:	
  6778  0F85  36B0               	lsrf	??___ftmul+2,f
  6779  0F86  0CAF               	rrf	??___ftmul+1,f
  6780  0F87  0CAE               	rrf	??___ftmul,f
  6781  0F88  0B89               	decfsz	9,f
  6782  0F89  2F85               	goto	u3225
  6783  0F8A  082E               	movf	??___ftmul,w
  6784  0F8B  00B1               	movwf	??___ftmul+3
  6785  0F8C  0831               	movf	??___ftmul+3,w
  6786  0F8D  00B7               	movwf	___ftmul@sign
  6787  0F8E  082B               	movf	___ftmul@f2,w
  6788  0F8F  00AE               	movwf	??___ftmul
  6789  0F90  082C               	movf	___ftmul@f2+1,w
  6790  0F91  00AF               	movwf	??___ftmul+1
  6791  0F92  082D               	movf	___ftmul@f2+2,w
  6792  0F93  00B0               	movwf	??___ftmul+2
  6793  0F94  3010               	movlw	16
  6794  0F95                     u3235:	
  6795  0F95  36B0               	lsrf	??___ftmul+2,f
  6796  0F96  0CAF               	rrf	??___ftmul+1,f
  6797  0F97  0CAE               	rrf	??___ftmul,f
  6798  0F98  0B89               	decfsz	9,f
  6799  0F99  2F95               	goto	u3235
  6800  0F9A  082E               	movf	??___ftmul,w
  6801  0F9B  00B1               	movwf	??___ftmul+3
  6802  0F9C  0831               	movf	??___ftmul+3,w
  6803  0F9D  06B7               	xorwf	___ftmul@sign,f
  6804  0F9E  3080               	movlw	128
  6805  0F9F  00AE               	movwf	??___ftmul
  6806  0FA0  082E               	movf	??___ftmul,w
  6807  0FA1  05B7               	andwf	___ftmul@sign,f
  6808  0FA2  17A9               	bsf	___ftmul@f1+1,7
  6809  0FA3  17AC               	bsf	___ftmul@f2+1,7
  6810  0FA4  30FF               	movlw	255
  6811  0FA5  05AB               	andwf	___ftmul@f2,f
  6812  0FA6  30FF               	movlw	255
  6813  0FA7  05AC               	andwf	___ftmul@f2+1,f
  6814  0FA8  3000               	movlw	0
  6815  0FA9  05AD               	andwf	___ftmul@f2+2,f
  6816  0FAA  3000               	movlw	0
  6817  0FAB  00B3               	movwf	___ftmul@f3_as_product
  6818  0FAC  3000               	movlw	0
  6819  0FAD  00B4               	movwf	___ftmul@f3_as_product+1
  6820  0FAE  3000               	movlw	0
  6821  0FAF  00B5               	movwf	___ftmul@f3_as_product+2
  6822  0FB0  3007               	movlw	7
  6823  0FB1  00AE               	movwf	??___ftmul
  6824  0FB2  082E               	movf	??___ftmul,w
  6825  0FB3  00B6               	movwf	___ftmul@cntr
  6826  0FB4                     l3221:	
  6827  0FB4  1C28               	btfss	___ftmul@f1,0
  6828  0FB5  2FBC               	goto	l3225
  6829  0FB6  082B               	movf	___ftmul@f2,w
  6830  0FB7  07B3               	addwf	___ftmul@f3_as_product,f
  6831  0FB8  082C               	movf	___ftmul@f2+1,w
  6832  0FB9  3DB4               	addwfc	___ftmul@f3_as_product+1,f
  6833  0FBA  082D               	movf	___ftmul@f2+2,w
  6834  0FBB  3DB5               	addwfc	___ftmul@f3_as_product+2,f
  6835  0FBC                     l3225:	
  6836  0FBC  3001               	movlw	1
  6837  0FBD                     u3255:	
  6838  0FBD  36AA               	lsrf	___ftmul@f1+2,f
  6839  0FBE  0CA9               	rrf	___ftmul@f1+1,f
  6840  0FBF  0CA8               	rrf	___ftmul@f1,f
  6841  0FC0  0B89               	decfsz	9,f
  6842  0FC1  2FBD               	goto	u3255
  6843  0FC2  3001               	movlw	1
  6844  0FC3                     u3265:	
  6845  0FC3  35AB               	lslf	___ftmul@f2,f
  6846  0FC4  0DAC               	rlf	___ftmul@f2+1,f
  6847  0FC5  0DAD               	rlf	___ftmul@f2+2,f
  6848  0FC6  0B89               	decfsz	9,f
  6849  0FC7  2FC3               	goto	u3265
  6850  0FC8  3001               	movlw	1
  6851  0FC9  02B6               	subwf	___ftmul@cntr,f
  6852  0FCA  1D03               	btfss	3,2
  6853  0FCB  2FB4               	goto	l3221
  6854  0FCC  3009               	movlw	9
  6855  0FCD  00AE               	movwf	??___ftmul
  6856  0FCE  082E               	movf	??___ftmul,w
  6857  0FCF  00B6               	movwf	___ftmul@cntr
  6858  0FD0                     l3233:	
  6859  0FD0  1C28               	btfss	___ftmul@f1,0
  6860  0FD1  2FD8               	goto	l3237
  6861  0FD2  082B               	movf	___ftmul@f2,w
  6862  0FD3  07B3               	addwf	___ftmul@f3_as_product,f
  6863  0FD4  082C               	movf	___ftmul@f2+1,w
  6864  0FD5  3DB4               	addwfc	___ftmul@f3_as_product+1,f
  6865  0FD6  082D               	movf	___ftmul@f2+2,w
  6866  0FD7  3DB5               	addwfc	___ftmul@f3_as_product+2,f
  6867  0FD8                     l3237:	
  6868  0FD8  3001               	movlw	1
  6869  0FD9                     u3295:	
  6870  0FD9  36AA               	lsrf	___ftmul@f1+2,f
  6871  0FDA  0CA9               	rrf	___ftmul@f1+1,f
  6872  0FDB  0CA8               	rrf	___ftmul@f1,f
  6873  0FDC  0B89               	decfsz	9,f
  6874  0FDD  2FD9               	goto	u3295
  6875  0FDE  3001               	movlw	1
  6876  0FDF                     u3305:	
  6877  0FDF  36B5               	lsrf	___ftmul@f3_as_product+2,f
  6878  0FE0  0CB4               	rrf	___ftmul@f3_as_product+1,f
  6879  0FE1  0CB3               	rrf	___ftmul@f3_as_product,f
  6880  0FE2  0B89               	decfsz	9,f
  6881  0FE3  2FDF               	goto	u3305
  6882  0FE4  3001               	movlw	1
  6883  0FE5  02B6               	subwf	___ftmul@cntr,f
  6884  0FE6  1D03               	btfss	3,2
  6885  0FE7  2FD0               	goto	l3233
  6886  0FE8  0833               	movf	___ftmul@f3_as_product,w
  6887  0FE9  00A0               	movwf	___ftpack@arg
  6888  0FEA  0834               	movf	___ftmul@f3_as_product+1,w
  6889  0FEB  00A1               	movwf	___ftpack@arg+1
  6890  0FEC  0835               	movf	___ftmul@f3_as_product+2,w
  6891  0FED  00A2               	movwf	___ftpack@arg+2
  6892  0FEE  0832               	movf	___ftmul@exp,w
  6893  0FEF  00AE               	movwf	??___ftmul
  6894  0FF0  082E               	movf	??___ftmul,w
  6895  0FF1  00A3               	movwf	___ftpack@exp
  6896  0FF2  0837               	movf	___ftmul@sign,w
  6897  0FF3  00AF               	movwf	??___ftmul+1
  6898  0FF4  082F               	movf	??___ftmul+1,w
  6899  0FF5  00A4               	movwf	___ftpack@sign
  6900  0FF6  318D  2546         	fcall	___ftpack
  6901  0FF8  0020               	movlb	0	; select bank0
  6902  0FF9  0820               	movf	?___ftpack,w
  6903  0FFA  00A8               	movwf	?___ftmul
  6904  0FFB  0821               	movf	?___ftpack+1,w
  6905  0FFC  00A9               	movwf	?___ftmul+1
  6906  0FFD  0822               	movf	?___ftpack+2,w
  6907  0FFE  00AA               	movwf	?___ftmul+2
  6908  0FFF  0008               	return
  6909  1000                     __end_of___ftmul:	
  6910                           
  6911                           	psect	text23
  6912  0D46                     __ptext23:	
  6913 ;; *************** function ___ftpack *****************
  6914 ;; Defined at:
  6915 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\float.c"
  6916 ;; Parameters:    Size  Location     Type
  6917 ;;  arg             3    0[BANK0 ] unsigned um
  6918 ;;  exp             1    3[BANK0 ] unsigned char 
  6919 ;;  sign            1    4[BANK0 ] unsigned char 
  6920 ;; Auto vars:     Size  Location     Type
  6921 ;;		None
  6922 ;; Return value:  Size  Location     Type
  6923 ;;                  3    0[BANK0 ] float 
  6924 ;; Registers used:
  6925 ;;		wreg, status,2, status,0
  6926 ;; Tracked objects:
  6927 ;;		On entry : 0/0
  6928 ;;		On exit  : 0/0
  6929 ;;		Unchanged: 0/0
  6930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6931 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6932 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6933 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6934 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6935 ;;Total ram usage:        8 bytes
  6936 ;; Hardware stack levels used:    1
  6937 ;; Hardware stack levels required when called:    5
  6938 ;; This function calls:
  6939 ;;		Nothing
  6940 ;; This function is called by:
  6941 ;;		___ftadd
  6942 ;;		___ftdiv
  6943 ;;		___ftmul
  6944 ;;		___lwtoft
  6945 ;; This function uses a non-reentrant model
  6946 ;;
  6947                           
  6948                           
  6949                           ;psect for function ___ftpack
  6950  0D46                     ___ftpack:	
  6951                           
  6952                           ;incstack = 0
  6953                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  6954  0D46  0020               	movlb	0	; select bank0
  6955  0D47  0823               	movf	___ftpack@exp,w
  6956  0D48  1903               	btfsc	3,2
  6957  0D49  2D4F               	goto	l2751
  6958  0D4A  0822               	movf	___ftpack@arg+2,w
  6959  0D4B  0421               	iorwf	___ftpack@arg+1,w
  6960  0D4C  0420               	iorwf	___ftpack@arg,w
  6961  0D4D  1D03               	skipz
  6962  0D4E  2D60               	goto	l2757
  6963  0D4F                     l2751:	
  6964  0D4F  3000               	movlw	0
  6965  0D50  00A0               	movwf	?___ftpack
  6966  0D51  3000               	movlw	0
  6967  0D52  00A1               	movwf	?___ftpack+1
  6968  0D53  3000               	movlw	0
  6969  0D54  00A2               	movwf	?___ftpack+2
  6970  0D55  0008               	return
  6971  0D56                     l2755:	
  6972  0D56  3001               	movlw	1
  6973  0D57  00A5               	movwf	??___ftpack
  6974  0D58  0825               	movf	??___ftpack,w
  6975  0D59  07A3               	addwf	___ftpack@exp,f
  6976  0D5A  3001               	movlw	1
  6977  0D5B                     u2185:	
  6978  0D5B  36A2               	lsrf	___ftpack@arg+2,f
  6979  0D5C  0CA1               	rrf	___ftpack@arg+1,f
  6980  0D5D  0CA0               	rrf	___ftpack@arg,f
  6981  0D5E  0B89               	decfsz	9,f
  6982  0D5F  2D5B               	goto	u2185
  6983  0D60                     l2757:	
  6984  0D60  30FE               	movlw	254
  6985  0D61  0522               	andwf	___ftpack@arg+2,w
  6986  0D62  1903               	btfsc	3,2
  6987  0D63  2D79               	goto	l1084
  6988  0D64  2D56               	goto	l2755
  6989  0D65                     l2759:	
  6990  0D65  3001               	movlw	1
  6991  0D66  00A5               	movwf	??___ftpack
  6992  0D67  0825               	movf	??___ftpack,w
  6993  0D68  07A3               	addwf	___ftpack@exp,f
  6994  0D69  3001               	movlw	1
  6995  0D6A  07A0               	addwf	___ftpack@arg,f
  6996  0D6B  3000               	movlw	0
  6997  0D6C  1803               	skipnc
  6998  0D6D  3001               	movlw	1
  6999  0D6E  07A1               	addwf	___ftpack@arg+1,f
  7000  0D6F  3000               	movlw	0
  7001  0D70  1803               	skipnc
  7002  0D71  3001               	movlw	1
  7003  0D72  07A2               	addwf	___ftpack@arg+2,f
  7004  0D73  3001               	movlw	1
  7005  0D74                     u2205:	
  7006  0D74  36A2               	lsrf	___ftpack@arg+2,f
  7007  0D75  0CA1               	rrf	___ftpack@arg+1,f
  7008  0D76  0CA0               	rrf	___ftpack@arg,f
  7009  0D77  0B89               	decfsz	9,f
  7010  0D78  2D74               	goto	u2205
  7011  0D79                     l1084:	
  7012  0D79  30FF               	movlw	255
  7013  0D7A  0522               	andwf	___ftpack@arg+2,w
  7014  0D7B  1903               	btfsc	3,2
  7015  0D7C  2D86               	goto	l2767
  7016  0D7D  2D65               	goto	l2759
  7017  0D7E                     l2765:	
  7018  0D7E  3001               	movlw	1
  7019  0D7F  02A3               	subwf	___ftpack@exp,f
  7020  0D80  3001               	movlw	1
  7021  0D81                     u2225:	
  7022  0D81  35A0               	lslf	___ftpack@arg,f
  7023  0D82  0DA1               	rlf	___ftpack@arg+1,f
  7024  0D83  0DA2               	rlf	___ftpack@arg+2,f
  7025  0D84  0B89               	decfsz	9,f
  7026  0D85  2D81               	goto	u2225
  7027  0D86                     l2767:	
  7028  0D86  1BA1               	btfsc	___ftpack@arg+1,7
  7029  0D87  2D8C               	goto	l1091
  7030  0D88  3002               	movlw	2
  7031  0D89  0223               	subwf	___ftpack@exp,w
  7032  0D8A  1803               	skipnc
  7033  0D8B  2D7E               	goto	l2765
  7034  0D8C                     l1091:	
  7035  0D8C  1823               	btfsc	___ftpack@exp,0
  7036  0D8D  2D94               	goto	l1092
  7037  0D8E  30FF               	movlw	255
  7038  0D8F  05A0               	andwf	___ftpack@arg,f
  7039  0D90  307F               	movlw	127
  7040  0D91  05A1               	andwf	___ftpack@arg+1,f
  7041  0D92  30FF               	movlw	255
  7042  0D93  05A2               	andwf	___ftpack@arg+2,f
  7043  0D94                     l1092:	
  7044  0D94  1003               	clrc
  7045  0D95  0CA3               	rrf	___ftpack@exp,f
  7046  0D96  0823               	movf	___ftpack@exp,w
  7047  0D97  00A5               	movwf	??___ftpack
  7048  0D98  01A6               	clrf	??___ftpack+1
  7049  0D99  01A7               	clrf	??___ftpack+2
  7050  0D9A  3010               	movlw	16
  7051  0D9B                     u2265:	
  7052  0D9B  35A5               	lslf	??___ftpack,f
  7053  0D9C  0DA6               	rlf	??___ftpack+1,f
  7054  0D9D  0DA7               	rlf	??___ftpack+2,f
  7055  0D9E  0B89               	decfsz	9,f
  7056  0D9F  2D9B               	goto	u2265
  7057  0DA0  0825               	movf	??___ftpack,w
  7058  0DA1  04A0               	iorwf	___ftpack@arg,f
  7059  0DA2  0826               	movf	??___ftpack+1,w
  7060  0DA3  04A1               	iorwf	___ftpack@arg+1,f
  7061  0DA4  0827               	movf	??___ftpack+2,w
  7062  0DA5  04A2               	iorwf	___ftpack@arg+2,f
  7063  0DA6  0824               	movf	___ftpack@sign,w
  7064  0DA7  1903               	btfsc	3,2
  7065  0DA8  0008               	return
  7066  0DA9  17A2               	bsf	___ftpack@arg+2,7
  7067  0DAA  0008               	return
  7068  0DAB                     __end_of___ftpack:	
  7069                           
  7070                           	psect	text24
  7071  0974                     __ptext24:	
  7072 ;; *************** function ___bmul *****************
  7073 ;; Defined at:
  7074 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul8.c"
  7075 ;; Parameters:    Size  Location     Type
  7076 ;;  multiplier      1    wreg     unsigned char 
  7077 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  7078 ;; Auto vars:     Size  Location     Type
  7079 ;;  multiplier      1    3[BANK0 ] unsigned char 
  7080 ;;  product         1    2[BANK0 ] unsigned char 
  7081 ;; Return value:  Size  Location     Type
  7082 ;;                  1    wreg      unsigned char 
  7083 ;; Registers used:
  7084 ;;		wreg, status,2, status,0
  7085 ;; Tracked objects:
  7086 ;;		On entry : 0/0
  7087 ;;		On exit  : 0/0
  7088 ;;		Unchanged: 0/0
  7089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7090 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7091 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7092 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7093 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7094 ;;Total ram usage:        4 bytes
  7095 ;; Hardware stack levels used:    1
  7096 ;; Hardware stack levels required when called:    5
  7097 ;; This function calls:
  7098 ;;		Nothing
  7099 ;; This function is called by:
  7100 ;;		_PROTOCOL_I2C_Send_float
  7101 ;; This function uses a non-reentrant model
  7102 ;;
  7103                           
  7104                           
  7105                           ;psect for function ___bmul
  7106  0974                     ___bmul:	
  7107                           
  7108                           ;incstack = 0
  7109                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  7110                           ;___bmul@multiplier stored from wreg
  7111  0974  0020               	movlb	0	; select bank0
  7112  0975  00A3               	movwf	___bmul@multiplier
  7113  0976  01A2               	clrf	___bmul@product
  7114  0977                     l2991:	
  7115  0977  1C23               	btfss	___bmul@multiplier,0
  7116  0978  297D               	goto	l2995
  7117  0979  0820               	movf	___bmul@multiplicand,w
  7118  097A  00A1               	movwf	??___bmul
  7119  097B  0821               	movf	??___bmul,w
  7120  097C  07A2               	addwf	___bmul@product,f
  7121  097D                     l2995:	
  7122  097D  1003               	clrc
  7123  097E  0DA0               	rlf	___bmul@multiplicand,f
  7124  097F  1003               	clrc
  7125  0980  0CA3               	rrf	___bmul@multiplier,f
  7126  0981  0823               	movf	___bmul@multiplier,w
  7127  0982  1D03               	btfss	3,2
  7128  0983  2977               	goto	l2991
  7129  0984  0822               	movf	___bmul@product,w
  7130  0985  0008               	return
  7131  0986                     __end_of___bmul:	
  7132                           
  7133                           	psect	text25
  7134  0C19                     __ptext25:	
  7135 ;; *************** function ___awmod *****************
  7136 ;; Defined at:
  7137 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awmod.c"
  7138 ;; Parameters:    Size  Location     Type
  7139 ;;  divisor         2    0[BANK0 ] int 
  7140 ;;  dividend        2    2[BANK0 ] int 
  7141 ;; Auto vars:     Size  Location     Type
  7142 ;;  sign            1    6[BANK0 ] unsigned char 
  7143 ;;  counter         1    5[BANK0 ] unsigned char 
  7144 ;; Return value:  Size  Location     Type
  7145 ;;                  2    0[BANK0 ] int 
  7146 ;; Registers used:
  7147 ;;		wreg, status,2, status,0
  7148 ;; Tracked objects:
  7149 ;;		On entry : 0/0
  7150 ;;		On exit  : 0/0
  7151 ;;		Unchanged: 0/0
  7152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7153 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7154 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7155 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7156 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7157 ;;Total ram usage:        7 bytes
  7158 ;; Hardware stack levels used:    1
  7159 ;; Hardware stack levels required when called:    5
  7160 ;; This function calls:
  7161 ;;		Nothing
  7162 ;; This function is called by:
  7163 ;;		_PROTOCOL_I2C_Send_float
  7164 ;; This function uses a non-reentrant model
  7165 ;;
  7166                           
  7167                           
  7168                           ;psect for function ___awmod
  7169  0C19                     ___awmod:	
  7170                           
  7171                           ;incstack = 0
  7172                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  7173  0C19  0020               	movlb	0	; select bank0
  7174  0C1A  01A6               	clrf	___awmod@sign
  7175  0C1B  1FA3               	btfss	___awmod@dividend+1,7
  7176  0C1C  2C24               	goto	l3055
  7177  0C1D  09A2               	comf	___awmod@dividend,f
  7178  0C1E  09A3               	comf	___awmod@dividend+1,f
  7179  0C1F  0AA2               	incf	___awmod@dividend,f
  7180  0C20  1903               	skipnz
  7181  0C21  0AA3               	incf	___awmod@dividend+1,f
  7182  0C22  01A6               	clrf	___awmod@sign
  7183  0C23  0AA6               	incf	___awmod@sign,f
  7184  0C24                     l3055:	
  7185  0C24  1FA1               	btfss	___awmod@divisor+1,7
  7186  0C25  2C2B               	goto	l3059
  7187  0C26  09A0               	comf	___awmod@divisor,f
  7188  0C27  09A1               	comf	___awmod@divisor+1,f
  7189  0C28  0AA0               	incf	___awmod@divisor,f
  7190  0C29  1903               	skipnz
  7191  0C2A  0AA1               	incf	___awmod@divisor+1,f
  7192  0C2B                     l3059:	
  7193  0C2B  0820               	movf	___awmod@divisor,w
  7194  0C2C  0421               	iorwf	___awmod@divisor+1,w
  7195  0C2D  1903               	btfsc	3,2
  7196  0C2E  2C52               	goto	l3077
  7197  0C2F  01A5               	clrf	___awmod@counter
  7198  0C30  0AA5               	incf	___awmod@counter,f
  7199  0C31                     l3067:	
  7200  0C31  1BA1               	btfsc	___awmod@divisor+1,7
  7201  0C32  2C3D               	goto	l3069
  7202  0C33  3001               	movlw	1
  7203  0C34                     u2835:	
  7204  0C34  35A0               	lslf	___awmod@divisor,f
  7205  0C35  0DA1               	rlf	___awmod@divisor+1,f
  7206  0C36  0B89               	decfsz	9,f
  7207  0C37  2C34               	goto	u2835
  7208  0C38  3001               	movlw	1
  7209  0C39  00A4               	movwf	??___awmod
  7210  0C3A  0824               	movf	??___awmod,w
  7211  0C3B  07A5               	addwf	___awmod@counter,f
  7212  0C3C  2C31               	goto	l3067
  7213  0C3D                     l3069:	
  7214  0C3D  0821               	movf	___awmod@divisor+1,w
  7215  0C3E  0223               	subwf	___awmod@dividend+1,w
  7216  0C3F  1D03               	skipz
  7217  0C40  2C43               	goto	u2855
  7218  0C41  0820               	movf	___awmod@divisor,w
  7219  0C42  0222               	subwf	___awmod@dividend,w
  7220  0C43                     u2855:	
  7221  0C43  1C03               	skipc
  7222  0C44  2C49               	goto	l3073
  7223  0C45  0820               	movf	___awmod@divisor,w
  7224  0C46  02A2               	subwf	___awmod@dividend,f
  7225  0C47  0821               	movf	___awmod@divisor+1,w
  7226  0C48  3BA3               	subwfb	___awmod@dividend+1,f
  7227  0C49                     l3073:	
  7228  0C49  3001               	movlw	1
  7229  0C4A                     u2865:	
  7230  0C4A  36A1               	lsrf	___awmod@divisor+1,f
  7231  0C4B  0CA0               	rrf	___awmod@divisor,f
  7232  0C4C  0B89               	decfsz	9,f
  7233  0C4D  2C4A               	goto	u2865
  7234  0C4E  3001               	movlw	1
  7235  0C4F  02A5               	subwf	___awmod@counter,f
  7236  0C50  1D03               	btfss	3,2
  7237  0C51  2C3D               	goto	l3069
  7238  0C52                     l3077:	
  7239  0C52  0826               	movf	___awmod@sign,w
  7240  0C53  1903               	btfsc	3,2
  7241  0C54  2C5A               	goto	l3081
  7242  0C55  09A2               	comf	___awmod@dividend,f
  7243  0C56  09A3               	comf	___awmod@dividend+1,f
  7244  0C57  0AA2               	incf	___awmod@dividend,f
  7245  0C58  1903               	skipnz
  7246  0C59  0AA3               	incf	___awmod@dividend+1,f
  7247  0C5A                     l3081:	
  7248  0C5A  0823               	movf	___awmod@dividend+1,w
  7249  0C5B  00A1               	movwf	?___awmod+1
  7250  0C5C  0822               	movf	___awmod@dividend,w
  7251  0C5D  00A0               	movwf	?___awmod
  7252  0C5E  0008               	return
  7253  0C5F                     __end_of___awmod:	
  7254                           
  7255                           	psect	text26
  7256  0CF4                     __ptext26:	
  7257 ;; *************** function ___awdiv *****************
  7258 ;; Defined at:
  7259 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
  7260 ;; Parameters:    Size  Location     Type
  7261 ;;  divisor         2    0[BANK0 ] int 
  7262 ;;  dividend        2    2[BANK0 ] int 
  7263 ;; Auto vars:     Size  Location     Type
  7264 ;;  quotient        2    7[BANK0 ] int 
  7265 ;;  sign            1    6[BANK0 ] unsigned char 
  7266 ;;  counter         1    5[BANK0 ] unsigned char 
  7267 ;; Return value:  Size  Location     Type
  7268 ;;                  2    0[BANK0 ] int 
  7269 ;; Registers used:
  7270 ;;		wreg, status,2, status,0
  7271 ;; Tracked objects:
  7272 ;;		On entry : 0/0
  7273 ;;		On exit  : 0/0
  7274 ;;		Unchanged: 0/0
  7275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7276 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7277 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7278 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7279 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7280 ;;Total ram usage:        9 bytes
  7281 ;; Hardware stack levels used:    1
  7282 ;; Hardware stack levels required when called:    5
  7283 ;; This function calls:
  7284 ;;		Nothing
  7285 ;; This function is called by:
  7286 ;;		_PROTOCOL_I2C_Send_float
  7287 ;; This function uses a non-reentrant model
  7288 ;;
  7289                           
  7290                           
  7291                           ;psect for function ___awdiv
  7292  0CF4                     ___awdiv:	
  7293                           
  7294                           ;incstack = 0
  7295                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7296  0CF4  0020               	movlb	0	; select bank0
  7297  0CF5  01A6               	clrf	___awdiv@sign
  7298  0CF6  1FA1               	btfss	___awdiv@divisor+1,7
  7299  0CF7  2CFF               	goto	l3011
  7300  0CF8  09A0               	comf	___awdiv@divisor,f
  7301  0CF9  09A1               	comf	___awdiv@divisor+1,f
  7302  0CFA  0AA0               	incf	___awdiv@divisor,f
  7303  0CFB  1903               	skipnz
  7304  0CFC  0AA1               	incf	___awdiv@divisor+1,f
  7305  0CFD  01A6               	clrf	___awdiv@sign
  7306  0CFE  0AA6               	incf	___awdiv@sign,f
  7307  0CFF                     l3011:	
  7308  0CFF  1FA3               	btfss	___awdiv@dividend+1,7
  7309  0D00  2D0A               	goto	l3017
  7310  0D01  09A2               	comf	___awdiv@dividend,f
  7311  0D02  09A3               	comf	___awdiv@dividend+1,f
  7312  0D03  0AA2               	incf	___awdiv@dividend,f
  7313  0D04  1903               	skipnz
  7314  0D05  0AA3               	incf	___awdiv@dividend+1,f
  7315  0D06  3001               	movlw	1
  7316  0D07  00A4               	movwf	??___awdiv
  7317  0D08  0824               	movf	??___awdiv,w
  7318  0D09  06A6               	xorwf	___awdiv@sign,f
  7319  0D0A                     l3017:	
  7320  0D0A  01A7               	clrf	___awdiv@quotient
  7321  0D0B  01A8               	clrf	___awdiv@quotient+1
  7322  0D0C  0820               	movf	___awdiv@divisor,w
  7323  0D0D  0421               	iorwf	___awdiv@divisor+1,w
  7324  0D0E  1903               	btfsc	3,2
  7325  0D0F  2D39               	goto	l3039
  7326  0D10  01A5               	clrf	___awdiv@counter
  7327  0D11  0AA5               	incf	___awdiv@counter,f
  7328  0D12                     l3027:	
  7329  0D12  1BA1               	btfsc	___awdiv@divisor+1,7
  7330  0D13  2D1E               	goto	l3029
  7331  0D14  3001               	movlw	1
  7332  0D15                     u2735:	
  7333  0D15  35A0               	lslf	___awdiv@divisor,f
  7334  0D16  0DA1               	rlf	___awdiv@divisor+1,f
  7335  0D17  0B89               	decfsz	9,f
  7336  0D18  2D15               	goto	u2735
  7337  0D19  3001               	movlw	1
  7338  0D1A  00A4               	movwf	??___awdiv
  7339  0D1B  0824               	movf	??___awdiv,w
  7340  0D1C  07A5               	addwf	___awdiv@counter,f
  7341  0D1D  2D12               	goto	l3027
  7342  0D1E                     l3029:	
  7343  0D1E  3001               	movlw	1
  7344  0D1F                     u2755:	
  7345  0D1F  35A7               	lslf	___awdiv@quotient,f
  7346  0D20  0DA8               	rlf	___awdiv@quotient+1,f
  7347  0D21  0B89               	decfsz	9,f
  7348  0D22  2D1F               	goto	u2755
  7349  0D23  0821               	movf	___awdiv@divisor+1,w
  7350  0D24  0223               	subwf	___awdiv@dividend+1,w
  7351  0D25  1D03               	skipz
  7352  0D26  2D29               	goto	u2765
  7353  0D27  0820               	movf	___awdiv@divisor,w
  7354  0D28  0222               	subwf	___awdiv@dividend,w
  7355  0D29                     u2765:	
  7356  0D29  1C03               	skipc
  7357  0D2A  2D30               	goto	l3035
  7358  0D2B  0820               	movf	___awdiv@divisor,w
  7359  0D2C  02A2               	subwf	___awdiv@dividend,f
  7360  0D2D  0821               	movf	___awdiv@divisor+1,w
  7361  0D2E  3BA3               	subwfb	___awdiv@dividend+1,f
  7362  0D2F  1427               	bsf	___awdiv@quotient,0
  7363  0D30                     l3035:	
  7364  0D30  3001               	movlw	1
  7365  0D31                     u2775:	
  7366  0D31  36A1               	lsrf	___awdiv@divisor+1,f
  7367  0D32  0CA0               	rrf	___awdiv@divisor,f
  7368  0D33  0B89               	decfsz	9,f
  7369  0D34  2D31               	goto	u2775
  7370  0D35  3001               	movlw	1
  7371  0D36  02A5               	subwf	___awdiv@counter,f
  7372  0D37  1D03               	btfss	3,2
  7373  0D38  2D1E               	goto	l3029
  7374  0D39                     l3039:	
  7375  0D39  0826               	movf	___awdiv@sign,w
  7376  0D3A  1903               	btfsc	3,2
  7377  0D3B  2D41               	goto	l3043
  7378  0D3C  09A7               	comf	___awdiv@quotient,f
  7379  0D3D  09A8               	comf	___awdiv@quotient+1,f
  7380  0D3E  0AA7               	incf	___awdiv@quotient,f
  7381  0D3F  1903               	skipnz
  7382  0D40  0AA8               	incf	___awdiv@quotient+1,f
  7383  0D41                     l3043:	
  7384  0D41  0828               	movf	___awdiv@quotient+1,w
  7385  0D42  00A1               	movwf	?___awdiv+1
  7386  0D43  0827               	movf	___awdiv@quotient,w
  7387  0D44  00A0               	movwf	?___awdiv
  7388  0D45  0008               	return
  7389  0D46                     __end_of___awdiv:	
  7390                           
  7391                           	psect	text27
  7392  0A63                     __ptext27:	
  7393 ;; *************** function _PROTOCOL_I2C_Set_TLV *****************
  7394 ;; Defined at:
  7395 ;;		line 213 in file "protocol.c"
  7396 ;; Parameters:    Size  Location     Type
  7397 ;;  type            1    wreg     unsigned char 
  7398 ;;  length          1    0[BANK0 ] unsigned char 
  7399 ;;  pbuffer         1    1[BANK0 ] PTR unsigned char 
  7400 ;;		 -> PROTOCOL_Send_uint8_t@pbuf(1), sendbuf(16), 
  7401 ;; Auto vars:     Size  Location     Type
  7402 ;;  type            1    3[BANK0 ] unsigned char 
  7403 ;;  status          1    4[BANK0 ] enum E3411
  7404 ;; Return value:  Size  Location     Type
  7405 ;;                  1    wreg      void 
  7406 ;; Registers used:
  7407 ;;		wreg, status,2, status,0
  7408 ;; Tracked objects:
  7409 ;;		On entry : 0/0
  7410 ;;		On exit  : 0/0
  7411 ;;		Unchanged: 0/0
  7412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7413 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7414 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7415 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7416 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7417 ;;Total ram usage:        5 bytes
  7418 ;; Hardware stack levels used:    1
  7419 ;; Hardware stack levels required when called:    5
  7420 ;; This function calls:
  7421 ;;		Nothing
  7422 ;; This function is called by:
  7423 ;;		_PROTOCOL_I2C_Send_float
  7424 ;; This function uses a non-reentrant model
  7425 ;;
  7426                           
  7427                           
  7428                           ;psect for function _PROTOCOL_I2C_Set_TLV
  7429  0A63                     _PROTOCOL_I2C_Set_TLV:	
  7430                           
  7431                           ;incstack = 0
  7432                           ; Regs used in _PROTOCOL_I2C_Set_TLV: [wreg+status,2+status,0]
  7433                           ;PROTOCOL_I2C_Set_TLV@type stored from wreg
  7434  0A63  0020               	movlb	0	; select bank0
  7435  0A64  00A3               	movwf	PROTOCOL_I2C_Set_TLV@type
  7436                           
  7437                           ;protocol.c: 214: READBUF_STATUS status = readbuf.status;
  7438  0A65  0021               	movlb	1	; select bank1
  7439  0A66  0851               	movf	(_readbuf^(0+128)+3),w
  7440  0A67  0020               	movlb	0	; select bank0
  7441  0A68  00A2               	movwf	??_PROTOCOL_I2C_Set_TLV
  7442  0A69  0822               	movf	??_PROTOCOL_I2C_Set_TLV,w
  7443  0A6A  00A4               	movwf	PROTOCOL_I2C_Set_TLV@status
  7444                           
  7445                           ;protocol.c: 215: if (status == COMPLETE) {
  7446  0A6B  3003               	movlw	3
  7447  0A6C  0624               	xorwf	PROTOCOL_I2C_Set_TLV@status,w
  7448  0A6D  1D03               	btfss	3,2
  7449  0A6E  0008               	return
  7450                           
  7451                           ;protocol.c: 216: readbuf.type = type;
  7452  0A6F  0823               	movf	PROTOCOL_I2C_Set_TLV@type,w
  7453  0A70  00A2               	movwf	??_PROTOCOL_I2C_Set_TLV
  7454  0A71  0822               	movf	??_PROTOCOL_I2C_Set_TLV,w
  7455  0A72  0021               	movlb	1	; select bank1
  7456  0A73  00CE               	movwf	_readbuf^(0+128)
  7457                           
  7458                           ;protocol.c: 217: readbuf.length = length;
  7459  0A74  0020               	movlb	0	; select bank0
  7460  0A75  0820               	movf	PROTOCOL_I2C_Set_TLV@length,w
  7461  0A76  00A2               	movwf	??_PROTOCOL_I2C_Set_TLV
  7462  0A77  0822               	movf	??_PROTOCOL_I2C_Set_TLV,w
  7463  0A78  0021               	movlb	1	; select bank1
  7464  0A79  00CF               	movwf	(_readbuf^(0+128)+1)
  7465                           
  7466                           ;protocol.c: 218: readbuf.pbuffer = pbuffer;
  7467  0A7A  0020               	movlb	0	; select bank0
  7468  0A7B  0821               	movf	PROTOCOL_I2C_Set_TLV@pbuffer,w
  7469  0A7C  00A2               	movwf	??_PROTOCOL_I2C_Set_TLV
  7470  0A7D  0822               	movf	??_PROTOCOL_I2C_Set_TLV,w
  7471  0A7E  0021               	movlb	1	; select bank1
  7472  0A7F  00D0               	movwf	(low ((_readbuf| 0+2)))^(0+128)
  7473                           
  7474                           ;protocol.c: 219: readbuf.buf_cnt = 0;
  7475  0A80  01D2               	clrf	(_readbuf^(0+128)+4)
  7476                           
  7477                           ;protocol.c: 220: readbuf.status = TLV_SET;
  7478  0A81  01D1               	clrf	(_readbuf^(0+128)+3)
  7479  0A82  0008               	return
  7480  0A83                     __end_of_PROTOCOL_I2C_Set_TLV:	
  7481                           
  7482                           	psect	text28
  7483  0DAB                     __ptext28:	
  7484 ;; *************** function _atoi *****************
  7485 ;; Defined at:
  7486 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\atoi.c"
  7487 ;; Parameters:    Size  Location     Type
  7488 ;;  s               1    wreg     PTR const unsigned char 
  7489 ;;		 -> buf(48), 
  7490 ;; Auto vars:     Size  Location     Type
  7491 ;;  s               1   13[BANK0 ] PTR const unsigned char 
  7492 ;;		 -> buf(48), 
  7493 ;;  a               2   11[BANK0 ] int 
  7494 ;;  sign            1   10[BANK0 ] unsigned char 
  7495 ;; Return value:  Size  Location     Type
  7496 ;;                  2    6[BANK0 ] int 
  7497 ;; Registers used:
  7498 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7499 ;; Tracked objects:
  7500 ;;		On entry : 0/0
  7501 ;;		On exit  : 0/0
  7502 ;;		Unchanged: 0/0
  7503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7504 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7505 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7506 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7507 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7508 ;;Total ram usage:        8 bytes
  7509 ;; Hardware stack levels used:    1
  7510 ;; Hardware stack levels required when called:    6
  7511 ;; This function calls:
  7512 ;;		___wmul
  7513 ;;		_isdigit
  7514 ;; This function is called by:
  7515 ;;		_PROTOCOL_Loop
  7516 ;; This function uses a non-reentrant model
  7517 ;;
  7518                           
  7519                           
  7520                           ;psect for function _atoi
  7521  0DAB                     _atoi:	
  7522                           
  7523                           ;incstack = 0
  7524                           ; Regs used in _atoi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7525                           ;atoi@s stored from wreg
  7526  0DAB  0020               	movlb	0	; select bank0
  7527  0DAC  00AD               	movwf	atoi@s
  7528  0DAD                     l3635:	
  7529  0DAD  082D               	movf	atoi@s,w
  7530  0DAE  0086               	movwf	6
  7531  0DAF  3001               	movlw	1	; select bank2/3
  7532  0DB0  0087               	movwf	7
  7533  0DB1  3020               	movlw	32
  7534  0DB2  0601               	xorwf	1,w
  7535  0DB3  1D03               	btfss	3,2
  7536  0DB4  2DBA               	goto	l3637
  7537  0DB5                     l3633:	
  7538  0DB5  3001               	movlw	1
  7539  0DB6  00A8               	movwf	??_atoi
  7540  0DB7  0828               	movf	??_atoi,w
  7541  0DB8  07AD               	addwf	atoi@s,f
  7542  0DB9  2DAD               	goto	l3635
  7543  0DBA                     l3637:	
  7544  0DBA  082D               	movf	atoi@s,w
  7545  0DBB  0086               	movwf	6
  7546  0DBC  3001               	movlw	1	; select bank2/3
  7547  0DBD  0087               	movwf	7
  7548  0DBE  3009               	movlw	9
  7549  0DBF  0601               	xorwf	1,w
  7550  0DC0  1903               	btfsc	3,2
  7551  0DC1  2DB5               	goto	l3633
  7552  0DC2  01AB               	clrf	atoi@a
  7553  0DC3  01AC               	clrf	atoi@a+1
  7554  0DC4  01AA               	clrf	atoi@sign
  7555  0DC5  082D               	movf	atoi@s,w
  7556  0DC6  0086               	movwf	6
  7557  0DC7  3001               	movlw	1	; select bank2/3
  7558  0DC8  0087               	movwf	7
  7559  0DC9  302D               	movlw	45
  7560  0DCA  0601               	xorwf	1,w
  7561  0DCB  1D03               	btfss	3,2
  7562  0DCC  2DD2               	goto	l3645
  7563  0DCD  3001               	movlw	1
  7564  0DCE  00A8               	movwf	??_atoi
  7565  0DCF  0828               	movf	??_atoi,w
  7566  0DD0  07AA               	addwf	atoi@sign,f
  7567  0DD1  2DDA               	goto	l3651
  7568  0DD2                     l3645:	
  7569  0DD2  082D               	movf	atoi@s,w
  7570  0DD3  0086               	movwf	6
  7571  0DD4  3001               	movlw	1	; select bank2/3
  7572  0DD5  0087               	movwf	7
  7573  0DD6  302B               	movlw	43
  7574  0DD7  0601               	xorwf	1,w
  7575  0DD8  1D03               	btfss	3,2
  7576  0DD9  2DDE               	goto	l3653
  7577  0DDA                     l3651:	
  7578  0DDA  3001               	movlw	1
  7579  0DDB  00A8               	movwf	??_atoi
  7580  0DDC  0828               	movf	??_atoi,w
  7581  0DDD  07AD               	addwf	atoi@s,f
  7582  0DDE                     l3653:	
  7583  0DDE  082D               	movf	atoi@s,w
  7584  0DDF  0086               	movwf	6
  7585  0DE0  3001               	movlw	1	; select bank2/3
  7586  0DE1  0087               	movwf	7
  7587  0DE2  0801               	movf	1,w
  7588  0DE3  3189  2146  318D   	fcall	_isdigit
  7589  0DE6  1C03               	btfss	3,0
  7590  0DE7  2E07               	goto	l3655
  7591  0DE8  0020               	movlb	0	; select bank0
  7592  0DE9  082C               	movf	atoi@a+1,w
  7593  0DEA  00A1               	movwf	___wmul@multiplier+1
  7594  0DEB  082B               	movf	atoi@a,w
  7595  0DEC  00A0               	movwf	___wmul@multiplier
  7596  0DED  300A               	movlw	10
  7597  0DEE  00A2               	movwf	___wmul@multiplicand
  7598  0DEF  3000               	movlw	0
  7599  0DF0  00A3               	movwf	___wmul@multiplicand+1
  7600  0DF1  3189  21EC  318D   	fcall	___wmul
  7601  0DF4  0020               	movlb	0	; select bank0
  7602  0DF5  082D               	movf	atoi@s,w
  7603  0DF6  0086               	movwf	6
  7604  0DF7  3001               	movlw	1	; select bank2/3
  7605  0DF8  0087               	movwf	7
  7606  0DF9  0801               	movf	1,w
  7607  0DFA  0720               	addwf	?___wmul,w
  7608  0DFB  00A8               	movwf	??_atoi
  7609  0DFC  0821               	movf	?___wmul+1,w
  7610  0DFD  1803               	skipnc
  7611  0DFE  0A21               	incf	?___wmul+1,w
  7612  0DFF  00A9               	movwf	??_atoi+1
  7613  0E00  0828               	movf	??_atoi,w
  7614  0E01  3ED0               	addlw	208
  7615  0E02  00AB               	movwf	atoi@a
  7616  0E03  30FF               	movlw	255
  7617  0E04  3D29               	addwfc	??_atoi+1,w
  7618  0E05  00AC               	movwf	atoi@a+1
  7619  0E06  2DDA               	goto	l3651
  7620  0E07                     l3655:	
  7621  0E07  0020               	movlb	0	; select bank0
  7622  0E08  082A               	movf	atoi@sign,w
  7623  0E09  1903               	btfsc	3,2
  7624  0E0A  2E17               	goto	l3661
  7625  0E0B  092B               	comf	atoi@a,w
  7626  0E0C  00A8               	movwf	??_atoi
  7627  0E0D  092C               	comf	atoi@a+1,w
  7628  0E0E  00A9               	movwf	??_atoi+1
  7629  0E0F  0AA8               	incf	??_atoi,f
  7630  0E10  1903               	skipnz
  7631  0E11  0AA9               	incf	??_atoi+1,f
  7632  0E12  0828               	movf	??_atoi,w
  7633  0E13  00A6               	movwf	?_atoi
  7634  0E14  0829               	movf	??_atoi+1,w
  7635  0E15  00A7               	movwf	?_atoi+1
  7636  0E16  0008               	return
  7637  0E17                     l3661:	
  7638  0E17  082C               	movf	atoi@a+1,w
  7639  0E18  00A7               	movwf	?_atoi+1
  7640  0E19  082B               	movf	atoi@a,w
  7641  0E1A  00A6               	movwf	?_atoi
  7642  0E1B  0008               	return
  7643  0E1C                     __end_of_atoi:	
  7644                           
  7645                           	psect	text29
  7646  0946                     __ptext29:	
  7647 ;; *************** function _isdigit *****************
  7648 ;; Defined at:
  7649 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  7650 ;; Parameters:    Size  Location     Type
  7651 ;;  c               1    wreg     unsigned char 
  7652 ;; Auto vars:     Size  Location     Type
  7653 ;;  c               1    1[BANK0 ] unsigned char 
  7654 ;; Return value:  Size  Location     Type
  7655 ;;		None               void
  7656 ;; Registers used:
  7657 ;;		wreg, status,2, status,0
  7658 ;; Tracked objects:
  7659 ;;		On entry : 0/0
  7660 ;;		On exit  : 0/0
  7661 ;;		Unchanged: 0/0
  7662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7664 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7666 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7667 ;;Total ram usage:        2 bytes
  7668 ;; Hardware stack levels used:    1
  7669 ;; Hardware stack levels required when called:    5
  7670 ;; This function calls:
  7671 ;;		Nothing
  7672 ;; This function is called by:
  7673 ;;		_printf
  7674 ;;		_atoi
  7675 ;; This function uses a non-reentrant model
  7676 ;;
  7677                           
  7678                           
  7679                           ;psect for function _isdigit
  7680  0946                     _isdigit:	
  7681                           
  7682                           ;incstack = 0
  7683                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  7684                           ;isdigit@c stored from wreg
  7685  0946  0020               	movlb	0	; select bank0
  7686  0947  00A1               	movwf	isdigit@c
  7687  0948  01A0               	clrf	_isdigit$1244
  7688  0949  303A               	movlw	58
  7689  094A  0221               	subwf	isdigit@c,w
  7690  094B  1803               	skipnc
  7691  094C  2953               	goto	l2729
  7692  094D  3030               	movlw	48
  7693  094E  0221               	subwf	isdigit@c,w
  7694  094F  1C03               	skipc
  7695  0950  2953               	goto	l2729
  7696  0951  01A0               	clrf	_isdigit$1244
  7697  0952  0AA0               	incf	_isdigit$1244,f
  7698  0953                     l2729:	
  7699  0953  0C20               	rrf	_isdigit$1244,w
  7700  0954  0008               	return
  7701  0955                     __end_of_isdigit:	
  7702                           
  7703                           	psect	text30
  7704  09EC                     __ptext30:	
  7705 ;; *************** function ___wmul *****************
  7706 ;; Defined at:
  7707 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  7708 ;; Parameters:    Size  Location     Type
  7709 ;;  multiplier      2    0[BANK0 ] unsigned int 
  7710 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  7711 ;; Auto vars:     Size  Location     Type
  7712 ;;  product         2    4[BANK0 ] unsigned int 
  7713 ;; Return value:  Size  Location     Type
  7714 ;;                  2    0[BANK0 ] unsigned int 
  7715 ;; Registers used:
  7716 ;;		wreg, status,2, status,0
  7717 ;; Tracked objects:
  7718 ;;		On entry : 0/0
  7719 ;;		On exit  : 0/0
  7720 ;;		Unchanged: 0/0
  7721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7722 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7723 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7725 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7726 ;;Total ram usage:        6 bytes
  7727 ;; Hardware stack levels used:    1
  7728 ;; Hardware stack levels required when called:    5
  7729 ;; This function calls:
  7730 ;;		Nothing
  7731 ;; This function is called by:
  7732 ;;		_printf
  7733 ;;		_atoi
  7734 ;; This function uses a non-reentrant model
  7735 ;;
  7736                           
  7737                           
  7738                           ;psect for function ___wmul
  7739  09EC                     ___wmul:	
  7740                           
  7741                           ;incstack = 0
  7742                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7743  09EC  0020               	movlb	0	; select bank0
  7744  09ED  01A4               	clrf	___wmul@product
  7745  09EE  01A5               	clrf	___wmul@product+1
  7746  09EF                     l2735:	
  7747  09EF  1C20               	btfss	___wmul@multiplier,0
  7748  09F0  29F5               	goto	l904
  7749  09F1  0822               	movf	___wmul@multiplicand,w
  7750  09F2  07A4               	addwf	___wmul@product,f
  7751  09F3  0823               	movf	___wmul@multiplicand+1,w
  7752  09F4  3DA5               	addwfc	___wmul@product+1,f
  7753  09F5                     l904:	
  7754  09F5  3001               	movlw	1
  7755  09F6                     u2135:	
  7756  09F6  35A2               	lslf	___wmul@multiplicand,f
  7757  09F7  0DA3               	rlf	___wmul@multiplicand+1,f
  7758  09F8  0B89               	decfsz	9,f
  7759  09F9  29F6               	goto	u2135
  7760  09FA  3001               	movlw	1
  7761  09FB                     u2145:	
  7762  09FB  36A1               	lsrf	___wmul@multiplier+1,f
  7763  09FC  0CA0               	rrf	___wmul@multiplier,f
  7764  09FD  0B89               	decfsz	9,f
  7765  09FE  29FB               	goto	u2145
  7766  09FF  0820               	movf	___wmul@multiplier,w
  7767  0A00  0421               	iorwf	___wmul@multiplier+1,w
  7768  0A01  1D03               	btfss	3,2
  7769  0A02  29EF               	goto	l2735
  7770  0A03  0825               	movf	___wmul@product+1,w
  7771  0A04  00A1               	movwf	?___wmul+1
  7772  0A05  0824               	movf	___wmul@product,w
  7773  0A06  00A0               	movwf	?___wmul
  7774  0A07  0008               	return
  7775  0A08                     __end_of___wmul:	
  7776                           
  7777                           	psect	text31
  7778  08BF                     __ptext31:	
  7779 ;; *************** function _TMR0_HasOverflowOccured *****************
  7780 ;; Defined at:
  7781 ;;		line 101 in file "mcc_generated_files/tmr0.c"
  7782 ;; Parameters:    Size  Location     Type
  7783 ;;		None
  7784 ;; Auto vars:     Size  Location     Type
  7785 ;;		None
  7786 ;; Return value:  Size  Location     Type
  7787 ;;                  1    wreg      unsigned char 
  7788 ;; Registers used:
  7789 ;;		wreg, status,2, status,0
  7790 ;; Tracked objects:
  7791 ;;		On entry : 0/0
  7792 ;;		On exit  : 0/0
  7793 ;;		Unchanged: 0/0
  7794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7796 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7797 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7798 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7799 ;;Total ram usage:        0 bytes
  7800 ;; Hardware stack levels used:    1
  7801 ;; Hardware stack levels required when called:    5
  7802 ;; This function calls:
  7803 ;;		Nothing
  7804 ;; This function is called by:
  7805 ;;		_PROTOCOL_Loop
  7806 ;; This function uses a non-reentrant model
  7807 ;;
  7808                           
  7809                           
  7810                           ;psect for function _TMR0_HasOverflowOccured
  7811  08BF                     _TMR0_HasOverflowOccured:	
  7812                           
  7813                           ;tmr0.c: 104: return(INTCONbits.TMR0IF);
  7814                           
  7815                           ;incstack = 0
  7816                           ; Regs used in _TMR0_HasOverflowOccured: [wreg+status,2+status,0]
  7817  08BF  0C0B               	rrf	11,w	;volatile
  7818  08C0  0C89               	rrf	9,f
  7819  08C1  3901               	andlw	1
  7820  08C2  0008               	return
  7821  08C3                     __end_of_TMR0_HasOverflowOccured:	
  7822                           
  7823                           	psect	text32
  7824  0937                     __ptext32:	
  7825 ;; *************** function _PROTOCOL_Write_Device_Address *****************
  7826 ;; Defined at:
  7827 ;;		line 89 in file "protocol.c"
  7828 ;; Parameters:    Size  Location     Type
  7829 ;;  device_id_i2    1    wreg     unsigned char 
  7830 ;; Auto vars:     Size  Location     Type
  7831 ;;  device_id_i2    1    4[BANK0 ] unsigned char 
  7832 ;; Return value:  Size  Location     Type
  7833 ;;                  1    wreg      void 
  7834 ;; Registers used:
  7835 ;;		wreg, status,2, status,0, pclath, cstack
  7836 ;; Tracked objects:
  7837 ;;		On entry : 0/0
  7838 ;;		On exit  : 0/0
  7839 ;;		Unchanged: 0/0
  7840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7842 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7843 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7844 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7845 ;;Total ram usage:        2 bytes
  7846 ;; Hardware stack levels used:    1
  7847 ;; Hardware stack levels required when called:    6
  7848 ;; This function calls:
  7849 ;;		_DATAEE_WriteByte
  7850 ;; This function is called by:
  7851 ;;		_PROTOCOL_Loop
  7852 ;; This function uses a non-reentrant model
  7853 ;;
  7854                           
  7855                           
  7856                           ;psect for function _PROTOCOL_Write_Device_Address
  7857  0937                     _PROTOCOL_Write_Device_Address:	
  7858                           
  7859                           ;incstack = 0
  7860                           ; Regs used in _PROTOCOL_Write_Device_Address: [wreg+status,2+status,0+pclath+cstack]
  7861                           ;PROTOCOL_Write_Device_Address@device_id_i2c stored from wreg
  7862  0937  0020               	movlb	0	; select bank0
  7863  0938  00A4               	movwf	PROTOCOL_Write_Device_Address@device_id_i2c
  7864                           
  7865                           ;protocol.c: 90: DATAEE_WriteByte(0, device_id_i2c);
  7866  0939  0824               	movf	PROTOCOL_Write_Device_Address@device_id_i2c,w
  7867  093A  00A3               	movwf	??_PROTOCOL_Write_Device_Address
  7868  093B  0823               	movf	??_PROTOCOL_Write_Device_Address,w
  7869  093C  00A0               	movwf	DATAEE_WriteByte@bData
  7870  093D  3000               	movlw	0
  7871  093E  318A  22A4         	fcall	_DATAEE_WriteByte
  7872                           
  7873                           ;protocol.c: 91: slave_address = device_id_i2c;
  7874  0940  0020               	movlb	0	; select bank0
  7875  0941  0824               	movf	PROTOCOL_Write_Device_Address@device_id_i2c,w
  7876  0942  00A3               	movwf	??_PROTOCOL_Write_Device_Address
  7877  0943  0823               	movf	??_PROTOCOL_Write_Device_Address,w
  7878  0944  00E5               	movwf	_slave_address
  7879  0945  0008               	return
  7880  0946                     __end_of_PROTOCOL_Write_Device_Address:	
  7881                           
  7882                           	psect	text33
  7883  08A9                     __ptext33:	
  7884 ;; *************** function _PROTOCOL_STP *****************
  7885 ;; Defined at:
  7886 ;;		line 103 in file "protocol.c"
  7887 ;; Parameters:    Size  Location     Type
  7888 ;;		None
  7889 ;; Auto vars:     Size  Location     Type
  7890 ;;		None
  7891 ;; Return value:  Size  Location     Type
  7892 ;;                  1    wreg      void 
  7893 ;; Registers used:
  7894 ;;		wreg, status,2, status,0
  7895 ;; Tracked objects:
  7896 ;;		On entry : 0/0
  7897 ;;		On exit  : 0/0
  7898 ;;		Unchanged: 0/0
  7899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7903 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7904 ;;Total ram usage:        0 bytes
  7905 ;; Hardware stack levels used:    1
  7906 ;; Hardware stack levels required when called:    5
  7907 ;; This function calls:
  7908 ;;		Nothing
  7909 ;; This function is called by:
  7910 ;;		_PROTOCOL_Loop
  7911 ;; This function uses a non-reentrant model
  7912 ;;
  7913                           
  7914                           
  7915                           ;psect for function _PROTOCOL_STP
  7916  08A9                     _PROTOCOL_STP:	
  7917                           
  7918                           ;protocol.c: 105: running = 0;
  7919                           
  7920                           ;incstack = 0
  7921                           ; Regs used in _PROTOCOL_STP: [wreg+status,2+status,0]
  7922  08A9  0020               	movlb	0	; select bank0
  7923  08AA  01E1               	clrf	_running
  7924  08AB  0008               	return
  7925  08AC                     __end_of_PROTOCOL_STP:	
  7926                           
  7927                           	psect	text34
  7928  08BB                     __ptext34:	
  7929 ;; *************** function _PROTOCOL_STA *****************
  7930 ;; Defined at:
  7931 ;;		line 98 in file "protocol.c"
  7932 ;; Parameters:    Size  Location     Type
  7933 ;;		None
  7934 ;; Auto vars:     Size  Location     Type
  7935 ;;		None
  7936 ;; Return value:  Size  Location     Type
  7937 ;;                  1    wreg      void 
  7938 ;; Registers used:
  7939 ;;		wreg, status,2, status,0
  7940 ;; Tracked objects:
  7941 ;;		On entry : 0/0
  7942 ;;		On exit  : 0/0
  7943 ;;		Unchanged: 0/0
  7944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7948 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7949 ;;Total ram usage:        0 bytes
  7950 ;; Hardware stack levels used:    1
  7951 ;; Hardware stack levels required when called:    5
  7952 ;; This function calls:
  7953 ;;		Nothing
  7954 ;; This function is called by:
  7955 ;;		_PROTOCOL_Loop
  7956 ;; This function uses a non-reentrant model
  7957 ;;
  7958                           
  7959                           
  7960                           ;psect for function _PROTOCOL_STA
  7961  08BB                     _PROTOCOL_STA:	
  7962                           
  7963                           ;protocol.c: 100: running = 1;
  7964                           
  7965                           ;incstack = 0
  7966                           ; Regs used in _PROTOCOL_STA: [wreg+status,2+status,0]
  7967  08BB  0020               	movlb	0	; select bank0
  7968  08BC  01E1               	clrf	_running
  7969  08BD  0AE1               	incf	_running,f
  7970  08BE  0008               	return
  7971  08BF                     __end_of_PROTOCOL_STA:	
  7972                           
  7973                           	psect	text35
  7974  08E1                     __ptext35:	
  7975 ;; *************** function _PROTOCOL_SET *****************
  7976 ;; Defined at:
  7977 ;;		line 116 in file "protocol.c"
  7978 ;; Parameters:    Size  Location     Type
  7979 ;;  value_          1    wreg     unsigned char 
  7980 ;; Auto vars:     Size  Location     Type
  7981 ;;  value_          1    1[BANK0 ] unsigned char 
  7982 ;; Return value:  Size  Location     Type
  7983 ;;                  1    wreg      void 
  7984 ;; Registers used:
  7985 ;;		wreg, status,2, status,0
  7986 ;; Tracked objects:
  7987 ;;		On entry : 0/0
  7988 ;;		On exit  : 0/0
  7989 ;;		Unchanged: 0/0
  7990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7992 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7993 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7994 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7995 ;;Total ram usage:        2 bytes
  7996 ;; Hardware stack levels used:    1
  7997 ;; Hardware stack levels required when called:    5
  7998 ;; This function calls:
  7999 ;;		Nothing
  8000 ;; This function is called by:
  8001 ;;		_PROTOCOL_Loop
  8002 ;; This function uses a non-reentrant model
  8003 ;;
  8004                           
  8005                           
  8006                           ;psect for function _PROTOCOL_SET
  8007  08E1                     _PROTOCOL_SET:	
  8008                           
  8009                           ;incstack = 0
  8010                           ; Regs used in _PROTOCOL_SET: [wreg+status,2+status,0]
  8011                           ;PROTOCOL_SET@value_ stored from wreg
  8012  08E1  0020               	movlb	0	; select bank0
  8013  08E2  00A1               	movwf	PROTOCOL_SET@value_
  8014                           
  8015                           ;protocol.c: 117: value = value_;
  8016  08E3  0821               	movf	PROTOCOL_SET@value_,w
  8017  08E4  00A0               	movwf	??_PROTOCOL_SET
  8018  08E5  0820               	movf	??_PROTOCOL_SET,w
  8019  08E6  00E3               	movwf	_value
  8020  08E7  0008               	return
  8021  08E8                     __end_of_PROTOCOL_SET:	
  8022                           
  8023                           	psect	text36
  8024  0900                     __ptext36:	
  8025 ;; *************** function _PROTOCOL_SAV *****************
  8026 ;; Defined at:
  8027 ;;		line 112 in file "protocol.c"
  8028 ;; Parameters:    Size  Location     Type
  8029 ;;		None
  8030 ;; Auto vars:     Size  Location     Type
  8031 ;;		None
  8032 ;; Return value:  Size  Location     Type
  8033 ;;                  1    wreg      void 
  8034 ;; Registers used:
  8035 ;;		wreg, status,2, status,0, pclath, cstack
  8036 ;; Tracked objects:
  8037 ;;		On entry : 0/0
  8038 ;;		On exit  : 0/0
  8039 ;;		Unchanged: 0/0
  8040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8042 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8043 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8044 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8045 ;;Total ram usage:        1 bytes
  8046 ;; Hardware stack levels used:    1
  8047 ;; Hardware stack levels required when called:    6
  8048 ;; This function calls:
  8049 ;;		_DATAEE_WriteByte
  8050 ;; This function is called by:
  8051 ;;		_PROTOCOL_Loop
  8052 ;; This function uses a non-reentrant model
  8053 ;;
  8054                           
  8055                           
  8056                           ;psect for function _PROTOCOL_SAV
  8057  0900                     _PROTOCOL_SAV:	
  8058                           
  8059                           ;protocol.c: 113: DATAEE_WriteByte(1, value);
  8060                           
  8061                           ;incstack = 0
  8062                           ; Regs used in _PROTOCOL_SAV: [wreg+status,2+status,0+pclath+cstack]
  8063  0900  0020               	movlb	0	; select bank0
  8064  0901  0863               	movf	_value,w
  8065  0902  00A3               	movwf	??_PROTOCOL_SAV
  8066  0903  0823               	movf	??_PROTOCOL_SAV,w
  8067  0904  00A0               	movwf	DATAEE_WriteByte@bData
  8068  0905  3001               	movlw	1
  8069  0906  318A  22A4         	fcall	_DATAEE_WriteByte
  8070  0908  0008               	return
  8071  0909                     __end_of_PROTOCOL_SAV:	
  8072                           
  8073                           	psect	text37
  8074  0AA4                     __ptext37:	
  8075 ;; *************** function _DATAEE_WriteByte *****************
  8076 ;; Defined at:
  8077 ;;		line 180 in file "mcc_generated_files/memory.c"
  8078 ;; Parameters:    Size  Location     Type
  8079 ;;  bAdd            1    wreg     unsigned char 
  8080 ;;  bData           1    0[BANK0 ] unsigned char 
  8081 ;; Auto vars:     Size  Location     Type
  8082 ;;  bAdd            1    1[BANK0 ] unsigned char 
  8083 ;;  GIEBitValue     1    2[BANK0 ] unsigned char 
  8084 ;; Return value:  Size  Location     Type
  8085 ;;                  1    wreg      void 
  8086 ;; Registers used:
  8087 ;;		wreg, status,2, status,0
  8088 ;; Tracked objects:
  8089 ;;		On entry : 0/0
  8090 ;;		On exit  : 0/0
  8091 ;;		Unchanged: 0/0
  8092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8093 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8094 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8096 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8097 ;;Total ram usage:        3 bytes
  8098 ;; Hardware stack levels used:    1
  8099 ;; Hardware stack levels required when called:    5
  8100 ;; This function calls:
  8101 ;;		Nothing
  8102 ;; This function is called by:
  8103 ;;		_PROTOCOL_Write_Device_Address
  8104 ;;		_PROTOCOL_SAV
  8105 ;; This function uses a non-reentrant model
  8106 ;;
  8107                           
  8108                           
  8109                           ;psect for function _DATAEE_WriteByte
  8110  0AA4                     _DATAEE_WriteByte:	
  8111                           
  8112                           ;incstack = 0
  8113                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
  8114                           ;DATAEE_WriteByte@bAdd stored from wreg
  8115  0AA4  0020               	movlb	0	; select bank0
  8116  0AA5  00A1               	movwf	DATAEE_WriteByte@bAdd
  8117                           
  8118                           ;memory.c: 182: uint8_t GIEBitValue = 0;
  8119  0AA6  01A2               	clrf	DATAEE_WriteByte@GIEBitValue
  8120                           
  8121                           ;memory.c: 184: EEADRL = (bAdd & 0x0ff);
  8122  0AA7  0821               	movf	DATAEE_WriteByte@bAdd,w
  8123  0AA8  0023               	movlb	3	; select bank3
  8124  0AA9  0091               	movwf	17	;volatile
  8125                           
  8126                           ;memory.c: 185: EEDATL = bData;
  8127  0AAA  0020               	movlb	0	; select bank0
  8128  0AAB  0820               	movf	DATAEE_WriteByte@bData,w
  8129  0AAC  0023               	movlb	3	; select bank3
  8130  0AAD  0093               	movwf	19	;volatile
  8131                           
  8132                           ;memory.c: 186: EECON1bits.EEPGD = 0;
  8133  0AAE  1395               	bcf	21,7	;volsfr
  8134                           
  8135                           ;memory.c: 187: EECON1bits.CFGS = 0;
  8136  0AAF  1315               	bcf	21,6	;volsfr
  8137                           
  8138                           ;memory.c: 188: EECON1bits.WREN = 1;
  8139  0AB0  1515               	bsf	21,2	;volsfr
  8140                           
  8141                           ;memory.c: 190: GIEBitValue = INTCONbits.GIE;
  8142  0AB1  3000               	movlw	0
  8143  0AB2  1B8B               	btfsc	11,7	;volatile
  8144  0AB3  3001               	movlw	1
  8145  0AB4  0020               	movlb	0	; select bank0
  8146  0AB5  00A2               	movwf	DATAEE_WriteByte@GIEBitValue
  8147                           
  8148                           ;memory.c: 191: INTCONbits.GIE = 0;
  8149  0AB6  138B               	bcf	11,7	;volatile
  8150                           
  8151                           ;memory.c: 192: EECON2 = 0x55;
  8152  0AB7  3055               	movlw	85
  8153  0AB8  0023               	movlb	3	; select bank3
  8154  0AB9  0096               	movwf	22	;volsfr
  8155                           
  8156                           ;memory.c: 193: EECON2 = 0xAA;
  8157  0ABA  30AA               	movlw	170
  8158  0ABB  0096               	movwf	22	;volsfr
  8159                           
  8160                           ;memory.c: 194: EECON1bits.WR = 1;
  8161  0ABC  1495               	bsf	21,1	;volsfr
  8162  0ABD                     l326:	
  8163                           ;memory.c: 197: {
  8164                           
  8165                           ;memory.c: 196: while (EECON1bits.WR)
  8166                           
  8167  0ABD  1895               	btfsc	21,1	;volsfr
  8168  0ABE  2ABD               	goto	l326
  8169                           
  8170                           ;memory.c: 198: }
  8171                           ;memory.c: 200: EECON1bits.WREN = 0;
  8172  0ABF  1115               	bcf	21,2	;volsfr
  8173                           
  8174                           ;memory.c: 201: INTCONbits.GIE = GIEBitValue;
  8175  0AC0  0020               	movlb	0	; select bank0
  8176  0AC1  0C22               	rrf	DATAEE_WriteByte@GIEBitValue,w
  8177  0AC2  1C03               	skipc
  8178  0AC3  138B               	bcf	11,7	;volatile
  8179  0AC4  1803               	skipnc
  8180  0AC5  178B               	bsf	11,7	;volatile
  8181  0AC6  0008               	return
  8182  0AC7                     __end_of_DATAEE_WriteByte:	
  8183                           
  8184                           	psect	text38
  8185  0897                     __ptext38:	
  8186 ;; *************** function _PROTOCOL_EXT *****************
  8187 ;; Defined at:
  8188 ;;		line 121 in file "protocol.c"
  8189 ;; Parameters:    Size  Location     Type
  8190 ;;  char_buf        1    wreg     PTR unsigned char 
  8191 ;;		 -> buf(48), I2C1_StatusCallback@ext_buf(48), 
  8192 ;; Auto vars:     Size  Location     Type
  8193 ;;  char_buf        1    0[BANK0 ] PTR unsigned char 
  8194 ;;		 -> buf(48), I2C1_StatusCallback@ext_buf(48), 
  8195 ;; Return value:  Size  Location     Type
  8196 ;;                  1    wreg      void 
  8197 ;; Registers used:
  8198 ;;		wreg, status,2, status,0
  8199 ;; Tracked objects:
  8200 ;;		On entry : 0/0
  8201 ;;		On exit  : 0/0
  8202 ;;		Unchanged: 0/0
  8203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8205 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8207 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8208 ;;Total ram usage:        1 bytes
  8209 ;; Hardware stack levels used:    1
  8210 ;; Hardware stack levels required when called:    5
  8211 ;; This function calls:
  8212 ;;		Nothing
  8213 ;; This function is called by:
  8214 ;;		_PROTOCOL_Loop
  8215 ;; This function uses a non-reentrant model
  8216 ;;
  8217                           
  8218                           
  8219                           ;psect for function _PROTOCOL_EXT
  8220  0897                     _PROTOCOL_EXT:	
  8221                           
  8222                           ;incstack = 0
  8223                           ; Regs used in _PROTOCOL_EXT: [wreg+status,2+status,0]
  8224  0897  0008               	return
  8225  0898                     __end_of_PROTOCOL_EXT:	
  8226                           
  8227                           	psect	text39
  8228  0A44                     __ptext39:	
  8229 ;; *************** function _EUSART_Read *****************
  8230 ;; Defined at:
  8231 ;;		line 112 in file "mcc_generated_files/eusart.c"
  8232 ;; Parameters:    Size  Location     Type
  8233 ;;		None
  8234 ;; Auto vars:     Size  Location     Type
  8235 ;;  readValue       1    1[BANK0 ] unsigned char 
  8236 ;; Return value:  Size  Location     Type
  8237 ;;                  1    wreg      unsigned char 
  8238 ;; Registers used:
  8239 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8240 ;; Tracked objects:
  8241 ;;		On entry : 0/0
  8242 ;;		On exit  : 0/0
  8243 ;;		Unchanged: 0/0
  8244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8246 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8247 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8248 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8249 ;;Total ram usage:        2 bytes
  8250 ;; Hardware stack levels used:    1
  8251 ;; Hardware stack levels required when called:    5
  8252 ;; This function calls:
  8253 ;;		Nothing
  8254 ;; This function is called by:
  8255 ;;		_PROTOCOL_Loop
  8256 ;;		_getch
  8257 ;; This function uses a non-reentrant model
  8258 ;;
  8259                           
  8260                           
  8261                           ;psect for function _EUSART_Read
  8262  0A44                     _EUSART_Read:	
  8263                           
  8264                           ;eusart.c: 114: uint8_t readValue = 0;
  8265                           
  8266                           ;incstack = 0
  8267                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  8268  0A44  0020               	movlb	0	; select bank0
  8269  0A45  01A1               	clrf	EUSART_Read@readValue
  8270  0A46                     l3559:	
  8271                           ;eusart.c: 117: {
  8272                           
  8273                           ;eusart.c: 116: while(0 == eusartRxCount)
  8274                           
  8275  0A46  0867               	movf	_eusartRxCount,w	;volatile
  8276  0A47  1903               	btfsc	3,2
  8277  0A48  2A46               	goto	l3559
  8278                           
  8279                           ;eusart.c: 118: }
  8280                           ;eusart.c: 120: readValue = eusartRxBuffer[eusartRxTail++];
  8281  0A49  0868               	movf	_eusartRxTail,w
  8282  0A4A  3EA0               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  8283  0A4B  0086               	movwf	6
  8284  0A4C  0187               	clrf	7
  8285  0A4D  0801               	movf	1,w
  8286  0A4E  00A0               	movwf	??_EUSART_Read
  8287  0A4F  0820               	movf	??_EUSART_Read,w
  8288  0A50  00A1               	movwf	EUSART_Read@readValue
  8289  0A51  3001               	movlw	1
  8290  0A52  00A0               	movwf	??_EUSART_Read
  8291  0A53  0820               	movf	??_EUSART_Read,w
  8292  0A54  07E8               	addwf	_eusartRxTail,f	;volatile
  8293                           
  8294                           ;eusart.c: 121: if(sizeof(eusartRxBuffer) <= eusartRxTail)
  8295  0A55  3008               	movlw	8
  8296  0A56  0268               	subwf	_eusartRxTail,w	;volatile
  8297  0A57  1803               	btfsc	3,0
  8298                           
  8299                           ;eusart.c: 122: {
  8300                           ;eusart.c: 123: eusartRxTail = 0;
  8301  0A58  01E8               	clrf	_eusartRxTail	;volatile
  8302                           
  8303                           ;eusart.c: 124: }
  8304                           ;eusart.c: 125: PIE1bits.RCIE = 0;
  8305  0A59  0021               	movlb	1	; select bank1
  8306  0A5A  1291               	bcf	17,5	;volatile
  8307                           
  8308                           ;eusart.c: 126: eusartRxCount--;
  8309  0A5B  3001               	movlw	1
  8310  0A5C  0020               	movlb	0	; select bank0
  8311  0A5D  02E7               	subwf	_eusartRxCount,f	;volatile
  8312                           
  8313                           ;eusart.c: 127: PIE1bits.RCIE = 1;
  8314  0A5E  0021               	movlb	1	; select bank1
  8315  0A5F  1691               	bsf	17,5	;volatile
  8316                           
  8317                           ;eusart.c: 129: return readValue;
  8318  0A60  0020               	movlb	0	; select bank0
  8319  0A61  0821               	movf	EUSART_Read@readValue,w
  8320  0A62  0008               	return
  8321  0A63                     __end_of_EUSART_Read:	
  8322                           
  8323                           	psect	text40
  8324  0CA6                     __ptext40:	
  8325 ;; *************** function _PROTOCOL_Initialize *****************
  8326 ;; Defined at:
  8327 ;;		line 60 in file "protocol.c"
  8328 ;; Parameters:    Size  Location     Type
  8329 ;;  device_id       2    1[BANK0 ] PTR const unsigned char 
  8330 ;;		 -> STR_1(11), 
  8331 ;;  start_handle    1    3[BANK0 ] PTR void 
  8332 ;;		 -> NULL(0), 
  8333 ;;  stop_handler    1    4[BANK0 ] PTR void 
  8334 ;;		 -> NULL(0), 
  8335 ;;  set_handler     1    5[BANK0 ] PTR void 
  8336 ;;		 -> NULL(0), 
  8337 ;;  inv_handler     2    6[BANK0 ] PTR void 
  8338 ;;		 -> inv_handler(1), 
  8339 ;;  scaler          1    8[BANK0 ] unsigned char 
  8340 ;; Auto vars:     Size  Location     Type
  8341 ;;		None
  8342 ;; Return value:  Size  Location     Type
  8343 ;;                  1    wreg      void 
  8344 ;; Registers used:
  8345 ;;		wreg, status,2, status,0, pclath, cstack
  8346 ;; Tracked objects:
  8347 ;;		On entry : 0/0
  8348 ;;		On exit  : 0/0
  8349 ;;		Unchanged: 0/0
  8350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8351 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8352 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8353 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8354 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8355 ;;Total ram usage:       10 bytes
  8356 ;; Hardware stack levels used:    1
  8357 ;; Hardware stack levels required when called:    6
  8358 ;; This function calls:
  8359 ;;		_DATAEE_ReadByte
  8360 ;; This function is called by:
  8361 ;;		_main
  8362 ;; This function uses a non-reentrant model
  8363 ;;
  8364                           
  8365                           
  8366                           ;psect for function _PROTOCOL_Initialize
  8367  0CA6                     _PROTOCOL_Initialize:	
  8368                           
  8369                           ;protocol.c: 61: device_id_ = device_id;
  8370                           
  8371                           ;incstack = 0
  8372                           ; Regs used in _PROTOCOL_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8373  0CA6  0020               	movlb	0	; select bank0
  8374  0CA7  0822               	movf	PROTOCOL_Initialize@device_id+1,w
  8375  0CA8  0021               	movlb	1	; select bank1
  8376  0CA9  00DD               	movwf	(_device_id_+1)^(0+128)
  8377  0CAA  0020               	movlb	0	; select bank0
  8378  0CAB  0821               	movf	PROTOCOL_Initialize@device_id,w
  8379  0CAC  0021               	movlb	1	; select bank1
  8380  0CAD  00DC               	movwf	_device_id_^(0+128)
  8381                           
  8382                           ;protocol.c: 62: PROTOCOL_Start_Handler = start_handler;
  8383  0CAE  0020               	movlb	0	; select bank0
  8384  0CAF  0823               	movf	PROTOCOL_Initialize@start_handler,w
  8385  0CB0  00A9               	movwf	??_PROTOCOL_Initialize
  8386  0CB1  3000               	movlw	0
  8387  0CB2  00AA               	movwf	??_PROTOCOL_Initialize+1
  8388  0CB3  0829               	movf	??_PROTOCOL_Initialize,w
  8389  0CB4  0021               	movlb	1	; select bank1
  8390  0CB5  00E2               	movwf	_PROTOCOL_Start_Handler^(0+128)
  8391  0CB6  0020               	movlb	0	; select bank0
  8392  0CB7  082A               	movf	??_PROTOCOL_Initialize+1,w
  8393  0CB8  0021               	movlb	1	; select bank1
  8394  0CB9  00E3               	movwf	(_PROTOCOL_Start_Handler+1)^(0+128)
  8395                           
  8396                           ;protocol.c: 63: PROTOCOL_Stop_Handler = stop_handler;
  8397  0CBA  0020               	movlb	0	; select bank0
  8398  0CBB  0824               	movf	PROTOCOL_Initialize@stop_handler,w
  8399  0CBC  00A9               	movwf	??_PROTOCOL_Initialize
  8400  0CBD  3000               	movlw	0
  8401  0CBE  00AA               	movwf	??_PROTOCOL_Initialize+1
  8402  0CBF  0829               	movf	??_PROTOCOL_Initialize,w
  8403  0CC0  0021               	movlb	1	; select bank1
  8404  0CC1  00E0               	movwf	_PROTOCOL_Stop_Handler^(0+128)
  8405  0CC2  0020               	movlb	0	; select bank0
  8406  0CC3  082A               	movf	??_PROTOCOL_Initialize+1,w
  8407  0CC4  0021               	movlb	1	; select bank1
  8408  0CC5  00E1               	movwf	(_PROTOCOL_Stop_Handler+1)^(0+128)
  8409                           
  8410                           ;protocol.c: 64: PROTOCOL_Set_Handler = set_handler;
  8411  0CC6  0020               	movlb	0	; select bank0
  8412  0CC7  0825               	movf	PROTOCOL_Initialize@set_handler,w
  8413  0CC8  00A9               	movwf	??_PROTOCOL_Initialize
  8414  0CC9  3000               	movlw	0
  8415  0CCA  00AA               	movwf	??_PROTOCOL_Initialize+1
  8416  0CCB  0829               	movf	??_PROTOCOL_Initialize,w
  8417  0CCC  0021               	movlb	1	; select bank1
  8418  0CCD  00DE               	movwf	_PROTOCOL_Set_Handler^(0+128)
  8419  0CCE  0020               	movlb	0	; select bank0
  8420  0CCF  082A               	movf	??_PROTOCOL_Initialize+1,w
  8421  0CD0  0021               	movlb	1	; select bank1
  8422  0CD1  00DF               	movwf	(_PROTOCOL_Set_Handler+1)^(0+128)
  8423                           
  8424                           ;protocol.c: 67: value = DATAEE_ReadByte(1);
  8425  0CD2  3001               	movlw	1
  8426  0CD3  3189  211C  318C   	fcall	_DATAEE_ReadByte
  8427  0CD6  0020               	movlb	0	; select bank0
  8428  0CD7  00A9               	movwf	??_PROTOCOL_Initialize
  8429  0CD8  0829               	movf	??_PROTOCOL_Initialize,w
  8430  0CD9  00E3               	movwf	_value
  8431                           
  8432                           ;protocol.c: 69: slave_address = DATAEE_ReadByte(0);
  8433  0CDA  3000               	movlw	0
  8434  0CDB  3189  211C         	fcall	_DATAEE_ReadByte
  8435  0CDD  0020               	movlb	0	; select bank0
  8436  0CDE  00A9               	movwf	??_PROTOCOL_Initialize
  8437  0CDF  0829               	movf	??_PROTOCOL_Initialize,w
  8438  0CE0  00E5               	movwf	_slave_address
  8439                           
  8440                           ;protocol.c: 72: readbuf.status = COMPLETE;
  8441  0CE1  3003               	movlw	3
  8442  0CE2  00A9               	movwf	??_PROTOCOL_Initialize
  8443  0CE3  0829               	movf	??_PROTOCOL_Initialize,w
  8444  0CE4  0021               	movlb	1	; select bank1
  8445  0CE5  00D1               	movwf	(_readbuf^(0+128)+3)
  8446                           
  8447                           ;protocol.c: 73: PROTOCOL_Inv_Handler = inv_handler;
  8448  0CE6  0020               	movlb	0	; select bank0
  8449  0CE7  0827               	movf	PROTOCOL_Initialize@inv_handler+1,w
  8450  0CE8  0021               	movlb	1	; select bank1
  8451  0CE9  00B5               	movwf	(_PROTOCOL_Inv_Handler+1)^(0+128)
  8452  0CEA  0020               	movlb	0	; select bank0
  8453  0CEB  0826               	movf	PROTOCOL_Initialize@inv_handler,w
  8454  0CEC  0021               	movlb	1	; select bank1
  8455  0CED  00B4               	movwf	_PROTOCOL_Inv_Handler^(0+128)
  8456                           
  8457                           ;protocol.c: 74: tmr_scaler = scaler;
  8458  0CEE  0020               	movlb	0	; select bank0
  8459  0CEF  0828               	movf	PROTOCOL_Initialize@scaler,w
  8460  0CF0  00A9               	movwf	??_PROTOCOL_Initialize
  8461  0CF1  0829               	movf	??_PROTOCOL_Initialize,w
  8462  0CF2  00EE               	movwf	_tmr_scaler
  8463  0CF3  0008               	return
  8464  0CF4                     __end_of_PROTOCOL_Initialize:	
  8465                           
  8466                           	psect	text41
  8467  091C                     __ptext41:	
  8468 ;; *************** function _DATAEE_ReadByte *****************
  8469 ;; Defined at:
  8470 ;;		line 204 in file "mcc_generated_files/memory.c"
  8471 ;; Parameters:    Size  Location     Type
  8472 ;;  bAdd            1    wreg     unsigned char 
  8473 ;; Auto vars:     Size  Location     Type
  8474 ;;  bAdd            1    0[BANK0 ] unsigned char 
  8475 ;; Return value:  Size  Location     Type
  8476 ;;                  1    wreg      unsigned char 
  8477 ;; Registers used:
  8478 ;;		wreg
  8479 ;; Tracked objects:
  8480 ;;		On entry : 0/0
  8481 ;;		On exit  : 0/0
  8482 ;;		Unchanged: 0/0
  8483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8485 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8486 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8487 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8488 ;;Total ram usage:        1 bytes
  8489 ;; Hardware stack levels used:    1
  8490 ;; Hardware stack levels required when called:    5
  8491 ;; This function calls:
  8492 ;;		Nothing
  8493 ;; This function is called by:
  8494 ;;		_PROTOCOL_Initialize
  8495 ;; This function uses a non-reentrant model
  8496 ;;
  8497                           
  8498                           
  8499                           ;psect for function _DATAEE_ReadByte
  8500  091C                     _DATAEE_ReadByte:	
  8501                           
  8502                           ;incstack = 0
  8503                           ; Regs used in _DATAEE_ReadByte: [wreg]
  8504                           ;DATAEE_ReadByte@bAdd stored from wreg
  8505  091C  0020               	movlb	0	; select bank0
  8506  091D  00A0               	movwf	DATAEE_ReadByte@bAdd
  8507                           
  8508                           ;memory.c: 206: EEADRL = (bAdd & 0x0ff);
  8509  091E  0820               	movf	DATAEE_ReadByte@bAdd,w
  8510  091F  0023               	movlb	3	; select bank3
  8511  0920  0091               	movwf	17	;volatile
  8512                           
  8513                           ;memory.c: 207: EECON1bits.CFGS = 0;
  8514  0921  1315               	bcf	21,6	;volsfr
  8515                           
  8516                           ;memory.c: 208: EECON1bits.EEPGD = 0;
  8517  0922  1395               	bcf	21,7	;volsfr
  8518                           
  8519                           ;memory.c: 209: EECON1bits.RD = 1;
  8520  0923  1415               	bsf	21,0	;volsfr
  8521                           
  8522                           ;memory.c: 210: __nop();
  8523  0924  0000               	nop
  8524                           
  8525                           ;memory.c: 211: __nop();
  8526  0925  0000               	nop
  8527                           
  8528                           ;memory.c: 213: return (EEDATL);
  8529  0926  0023               	movlb	3	; select bank3
  8530  0927  0813               	movf	19,w	;volatile
  8531  0928  0008               	return
  8532  0929                     __end_of_DATAEE_ReadByte:	
  8533                           
  8534                           	psect	text42
  8535  0A25                     __ptext42:	
  8536 ;; *************** function _PIN_MANAGER_Initialize *****************
  8537 ;; Defined at:
  8538 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
  8539 ;; Parameters:    Size  Location     Type
  8540 ;;		None
  8541 ;; Auto vars:     Size  Location     Type
  8542 ;;		None
  8543 ;; Return value:  Size  Location     Type
  8544 ;;                  1    wreg      void 
  8545 ;; Registers used:
  8546 ;;		wreg, status,2
  8547 ;; Tracked objects:
  8548 ;;		On entry : 0/0
  8549 ;;		On exit  : 0/0
  8550 ;;		Unchanged: 0/0
  8551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8552 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8553 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8554 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8555 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8556 ;;Total ram usage:        0 bytes
  8557 ;; Hardware stack levels used:    1
  8558 ;; Hardware stack levels required when called:    5
  8559 ;; This function calls:
  8560 ;;		Nothing
  8561 ;; This function is called by:
  8562 ;;		_main
  8563 ;;		_SYSTEM_Initialize
  8564 ;; This function uses a non-reentrant model
  8565 ;;
  8566                           
  8567                           
  8568                           ;psect for function _PIN_MANAGER_Initialize
  8569  0A25                     _PIN_MANAGER_Initialize:	
  8570                           
  8571                           ;pin_manager.c: 56: LATA = 0x00;
  8572                           
  8573                           ;incstack = 0
  8574                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  8575  0A25  0022               	movlb	2	; select bank2
  8576  0A26  018C               	clrf	12	;volatile
  8577                           
  8578                           ;pin_manager.c: 57: LATB = 0x00;
  8579  0A27  018D               	clrf	13	;volatile
  8580                           
  8581                           ;pin_manager.c: 58: LATC = 0x00;
  8582  0A28  018E               	clrf	14	;volatile
  8583                           
  8584                           ;pin_manager.c: 63: TRISA = 0x3F;
  8585  0A29  303F               	movlw	63
  8586  0A2A  0021               	movlb	1	; select bank1
  8587  0A2B  008C               	movwf	12	;volatile
  8588                           
  8589                           ;pin_manager.c: 64: TRISB = 0xF0;
  8590  0A2C  30F0               	movlw	240
  8591  0A2D  008D               	movwf	13	;volatile
  8592                           
  8593                           ;pin_manager.c: 65: TRISC = 0x7F;
  8594  0A2E  307F               	movlw	127
  8595  0A2F  008E               	movwf	14	;volatile
  8596                           
  8597                           ;pin_manager.c: 70: ANSELC = 0x4F;
  8598  0A30  304F               	movlw	79
  8599  0A31  0023               	movlb	3	; select bank3
  8600  0A32  008E               	movwf	14	;volatile
  8601                           
  8602                           ;pin_manager.c: 71: ANSELB = 0x20;
  8603  0A33  3020               	movlw	32
  8604  0A34  008D               	movwf	13	;volatile
  8605                           
  8606                           ;pin_manager.c: 72: ANSELA = 0x17;
  8607  0A35  3017               	movlw	23
  8608  0A36  008C               	movwf	12	;volatile
  8609                           
  8610                           ;pin_manager.c: 77: WPUB = 0x00;
  8611  0A37  0024               	movlb	4	; select bank4
  8612  0A38  018D               	clrf	13	;volatile
  8613                           
  8614                           ;pin_manager.c: 78: WPUA = 0x2F;
  8615  0A39  302F               	movlw	47
  8616  0A3A  008C               	movwf	12	;volatile
  8617                           
  8618                           ;pin_manager.c: 79: WPUC = 0x37;
  8619  0A3B  3037               	movlw	55
  8620  0A3C  008E               	movwf	14	;volatile
  8621                           
  8622                           ;pin_manager.c: 80: OPTION_REGbits.nWPUEN = 0;
  8623  0A3D  0021               	movlb	1	; select bank1
  8624  0A3E  1395               	bcf	21,7	;volatile
  8625                           
  8626                           ;pin_manager.c: 86: APFCON1 = 0x00;
  8627  0A3F  0022               	movlb	2	; select bank2
  8628  0A40  019E               	clrf	30	;volatile
  8629                           
  8630                           ;pin_manager.c: 87: APFCON0 = 0x84;
  8631  0A41  3084               	movlw	132
  8632  0A42  009D               	movwf	29	;volatile
  8633  0A43  0008               	return
  8634  0A44                     __end_of_PIN_MANAGER_Initialize:	
  8635                           
  8636                           	psect	text43
  8637  08DA                     __ptext43:	
  8638 ;; *************** function _OSCILLATOR_Initialize *****************
  8639 ;; Defined at:
  8640 ;;		line 81 in file "mcc_generated_files/mcc.c"
  8641 ;; Parameters:    Size  Location     Type
  8642 ;;		None
  8643 ;; Auto vars:     Size  Location     Type
  8644 ;;		None
  8645 ;; Return value:  Size  Location     Type
  8646 ;;                  1    wreg      void 
  8647 ;; Registers used:
  8648 ;;		wreg, status,2
  8649 ;; Tracked objects:
  8650 ;;		On entry : 0/0
  8651 ;;		On exit  : 0/0
  8652 ;;		Unchanged: 0/0
  8653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8655 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8657 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8658 ;;Total ram usage:        0 bytes
  8659 ;; Hardware stack levels used:    1
  8660 ;; Hardware stack levels required when called:    5
  8661 ;; This function calls:
  8662 ;;		Nothing
  8663 ;; This function is called by:
  8664 ;;		_main
  8665 ;;		_SYSTEM_Initialize
  8666 ;; This function uses a non-reentrant model
  8667 ;;
  8668                           
  8669                           
  8670                           ;psect for function _OSCILLATOR_Initialize
  8671  08DA                     _OSCILLATOR_Initialize:	
  8672                           
  8673                           ;mcc.c: 84: OSCCON = 0x70;
  8674                           
  8675                           ;incstack = 0
  8676                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  8677  08DA  3070               	movlw	112
  8678  08DB  0021               	movlb	1	; select bank1
  8679  08DC  0099               	movwf	25	;volatile
  8680                           
  8681                           ;mcc.c: 86: OSCTUNE = 0x00;
  8682  08DD  0198               	clrf	24	;volatile
  8683  08DE                     l152:	
  8684                           ;mcc.c: 89: {
  8685                           
  8686                           ;mcc.c: 88: while(PLLR == 0)
  8687                           
  8688  08DE  1B1A               	btfsc	26,6	;volatile
  8689  08DF  0008               	return
  8690  08E0  28DE               	goto	l152
  8691  08E1                     __end_of_OSCILLATOR_Initialize:	
  8692                           
  8693                           	psect	text44
  8694  0A83                     __ptext44:	
  8695 ;; *************** function _I2C1_Initialize *****************
  8696 ;; Defined at:
  8697 ;;		line 30 in file "mcc_generated_files/i2c1.c"
  8698 ;; Parameters:    Size  Location     Type
  8699 ;;		None
  8700 ;; Auto vars:     Size  Location     Type
  8701 ;;		None
  8702 ;; Return value:  Size  Location     Type
  8703 ;;                  1    wreg      void 
  8704 ;; Registers used:
  8705 ;;		wreg, status,2, status,0, pclath, cstack
  8706 ;; Tracked objects:
  8707 ;;		On entry : 0/0
  8708 ;;		On exit  : 0/0
  8709 ;;		Unchanged: 0/0
  8710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8712 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8713 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8714 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8715 ;;Total ram usage:        2 bytes
  8716 ;; Hardware stack levels used:    1
  8717 ;; Hardware stack levels required when called:    6
  8718 ;; This function calls:
  8719 ;;		_PROTOCOL_Read_Device_Address
  8720 ;; This function is called by:
  8721 ;;		_main
  8722 ;;		_SYSTEM_Initialize
  8723 ;; This function uses a non-reentrant model
  8724 ;;
  8725                           
  8726                           
  8727                           ;psect for function _I2C1_Initialize
  8728  0A83                     _I2C1_Initialize:	
  8729                           
  8730                           ;i2c1.c: 34: _delay((unsigned long)((2000)*(32000000/4000.0)));
  8731                           
  8732                           ;incstack = 0
  8733                           ; Regs used in _I2C1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8734  0A83  3052               	movlw	82
  8735  0A84  0020               	movlb	0	; select bank0
  8736  0A85  00A1               	movwf	??_I2C1_Initialize+1
  8737  0A86  302B               	movlw	43
  8738  0A87  00A0               	movwf	??_I2C1_Initialize
  8739  0A88  3000               	movlw	0
  8740  0A89                     u4067:	
  8741  0A89  0B89               	decfsz	9,f
  8742  0A8A  2A89               	goto	u4067
  8743  0A8B  0BA0               	decfsz	??_I2C1_Initialize,f
  8744  0A8C  2A89               	goto	u4067
  8745  0A8D  0BA1               	decfsz	??_I2C1_Initialize+1,f
  8746  0A8E  2A89               	goto	u4067
  8747  0A8F  0000               	nop
  8748                           
  8749                           ;i2c1.c: 38: SSP1STAT = 0x80;
  8750  0A90  3080               	movlw	128
  8751  0A91  0024               	movlb	4	; select bank4
  8752  0A92  0094               	movwf	20	;volatile
  8753                           
  8754                           ;i2c1.c: 40: SSP1CON1 = 0x26;
  8755  0A93  3026               	movlw	38
  8756  0A94  0095               	movwf	21	;volatile
  8757                           
  8758                           ;i2c1.c: 42: SSP1CON2 = 0x81;
  8759  0A95  3081               	movlw	129
  8760  0A96  0096               	movwf	22	;volatile
  8761                           
  8762                           ;i2c1.c: 44: SSP1CON3 = 0x00;
  8763  0A97  0197               	clrf	23	;volatile
  8764                           
  8765                           ;i2c1.c: 46: SSP1MSK = (0x7F << 1);
  8766  0A98  30FE               	movlw	254
  8767  0A99  0093               	movwf	19	;volatile
  8768                           
  8769                           ;i2c1.c: 48: SSP1ADD = (PROTOCOL_Read_Device_Address() << 1);
  8770  0A9A  3188  20A6         	fcall	_PROTOCOL_Read_Device_Address
  8771  0A9C  0709               	addwf	9,w
  8772  0A9D  0024               	movlb	4	; select bank4
  8773  0A9E  0092               	movwf	18	;volatile
  8774                           
  8775                           ;i2c1.c: 51: PIR1bits.SSP1IF = 0;
  8776  0A9F  0020               	movlb	0	; select bank0
  8777  0AA0  1191               	bcf	17,3	;volatile
  8778                           
  8779                           ;i2c1.c: 53: PIE1bits.SSP1IE = 1;
  8780  0AA1  0021               	movlb	1	; select bank1
  8781  0AA2  1591               	bsf	17,3	;volatile
  8782  0AA3  0008               	return
  8783  0AA4                     __end_of_I2C1_Initialize:	
  8784                           
  8785                           	psect	text45
  8786  08A6                     __ptext45:	
  8787 ;; *************** function _PROTOCOL_Read_Device_Address *****************
  8788 ;; Defined at:
  8789 ;;		line 94 in file "protocol.c"
  8790 ;; Parameters:    Size  Location     Type
  8791 ;;		None
  8792 ;; Auto vars:     Size  Location     Type
  8793 ;;		None
  8794 ;; Return value:  Size  Location     Type
  8795 ;;                  1    wreg      unsigned char 
  8796 ;; Registers used:
  8797 ;;		wreg
  8798 ;; Tracked objects:
  8799 ;;		On entry : 0/0
  8800 ;;		On exit  : 0/0
  8801 ;;		Unchanged: 0/0
  8802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8804 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8806 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8807 ;;Total ram usage:        0 bytes
  8808 ;; Hardware stack levels used:    1
  8809 ;; Hardware stack levels required when called:    5
  8810 ;; This function calls:
  8811 ;;		Nothing
  8812 ;; This function is called by:
  8813 ;;		_I2C1_Initialize
  8814 ;;		_PROTOCOL_Loop
  8815 ;; This function uses a non-reentrant model
  8816 ;;
  8817                           
  8818                           
  8819                           ;psect for function _PROTOCOL_Read_Device_Address
  8820  08A6                     _PROTOCOL_Read_Device_Address:	
  8821                           
  8822                           ;protocol.c: 95: return slave_address;
  8823                           
  8824                           ;incstack = 0
  8825                           ; Regs used in _PROTOCOL_Read_Device_Address: [wreg]
  8826  08A6  0020               	movlb	0	; select bank0
  8827  08A7  0865               	movf	_slave_address,w
  8828  08A8  0008               	return
  8829  08A9                     __end_of_PROTOCOL_Read_Device_Address:	
  8830                           
  8831                           	psect	text46
  8832  09D1                     __ptext46:	
  8833 ;; *************** function _EUSART_Initialize *****************
  8834 ;; Defined at:
  8835 ;;		line 75 in file "mcc_generated_files/eusart.c"
  8836 ;; Parameters:    Size  Location     Type
  8837 ;;		None
  8838 ;; Auto vars:     Size  Location     Type
  8839 ;;		None
  8840 ;; Return value:  Size  Location     Type
  8841 ;;                  1    wreg      void 
  8842 ;; Registers used:
  8843 ;;		wreg, status,2
  8844 ;; Tracked objects:
  8845 ;;		On entry : 0/0
  8846 ;;		On exit  : 0/0
  8847 ;;		Unchanged: 0/0
  8848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8850 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8851 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8852 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8853 ;;Total ram usage:        1 bytes
  8854 ;; Hardware stack levels used:    1
  8855 ;; Hardware stack levels required when called:    5
  8856 ;; This function calls:
  8857 ;;		Nothing
  8858 ;; This function is called by:
  8859 ;;		_main
  8860 ;;		_SYSTEM_Initialize
  8861 ;; This function uses a non-reentrant model
  8862 ;;
  8863                           
  8864                           
  8865                           ;psect for function _EUSART_Initialize
  8866  09D1                     _EUSART_Initialize:	
  8867                           
  8868                           ;eusart.c: 78: PIE1bits.RCIE = 0;
  8869                           
  8870                           ;incstack = 0
  8871                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  8872  09D1  0021               	movlb	1	; select bank1
  8873  09D2  1291               	bcf	17,5	;volatile
  8874                           
  8875                           ;eusart.c: 79: PIE1bits.TXIE = 0;
  8876  09D3  1211               	bcf	17,4	;volatile
  8877                           
  8878                           ;eusart.c: 84: BAUDCON = 0x08;
  8879  09D4  3008               	movlw	8
  8880  09D5  0023               	movlb	3	; select bank3
  8881  09D6  009F               	movwf	31	;volatile
  8882                           
  8883                           ;eusart.c: 87: RCSTA = 0x90;
  8884  09D7  3090               	movlw	144
  8885  09D8  009D               	movwf	29	;volatile
  8886                           
  8887                           ;eusart.c: 90: TXSTA = 0x24;
  8888  09D9  3024               	movlw	36
  8889  09DA  009E               	movwf	30	;volatile
  8890                           
  8891                           ;eusart.c: 93: SPBRGL = 0x40;
  8892  09DB  3040               	movlw	64
  8893  09DC  009B               	movwf	27	;volatile
  8894                           
  8895                           ;eusart.c: 96: SPBRGH = 0x03;
  8896  09DD  3003               	movlw	3
  8897  09DE  009C               	movwf	28	;volatile
  8898                           
  8899                           ;eusart.c: 100: eusartTxHead = 0;
  8900  09DF  01FC               	clrf	_eusartTxHead	;volatile
  8901                           
  8902                           ;eusart.c: 101: eusartTxTail = 0;
  8903  09E0  01FB               	clrf	_eusartTxTail	;volatile
  8904                           
  8905                           ;eusart.c: 102: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
  8906  09E1  3008               	movlw	8
  8907  09E2  0020               	movlb	0	; select bank0
  8908  09E3  00A0               	movwf	??_EUSART_Initialize
  8909  09E4  0820               	movf	??_EUSART_Initialize,w
  8910  09E5  00FA               	movwf	_eusartTxBufferRemaining	;volatile
  8911                           
  8912                           ;eusart.c: 104: eusartRxHead = 0;
  8913  09E6  01E9               	clrf	_eusartRxHead	;volatile
  8914                           
  8915                           ;eusart.c: 105: eusartRxTail = 0;
  8916  09E7  01E8               	clrf	_eusartRxTail	;volatile
  8917                           
  8918                           ;eusart.c: 106: eusartRxCount = 0;
  8919  09E8  01E7               	clrf	_eusartRxCount	;volatile
  8920                           
  8921                           ;eusart.c: 109: PIE1bits.RCIE = 1;
  8922  09E9  0021               	movlb	1	; select bank1
  8923  09EA  1691               	bsf	17,5	;volatile
  8924  09EB  0008               	return
  8925  09EC                     __end_of_EUSART_Initialize:	
  8926                           
  8927                           	psect	text47
  8928  08EF                     __ptext47:	
  8929 ;; *************** function _ADC_Initialize *****************
  8930 ;; Defined at:
  8931 ;;		line 64 in file "mcc_generated_files/adc.c"
  8932 ;; Parameters:    Size  Location     Type
  8933 ;;		None
  8934 ;; Auto vars:     Size  Location     Type
  8935 ;;		None
  8936 ;; Return value:  Size  Location     Type
  8937 ;;                  1    wreg      void 
  8938 ;; Registers used:
  8939 ;;		wreg, status,2
  8940 ;; Tracked objects:
  8941 ;;		On entry : 0/0
  8942 ;;		On exit  : 0/0
  8943 ;;		Unchanged: 0/0
  8944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8948 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8949 ;;Total ram usage:        0 bytes
  8950 ;; Hardware stack levels used:    1
  8951 ;; Hardware stack levels required when called:    5
  8952 ;; This function calls:
  8953 ;;		Nothing
  8954 ;; This function is called by:
  8955 ;;		_main
  8956 ;;		_SYSTEM_Initialize
  8957 ;; This function uses a non-reentrant model
  8958 ;;
  8959                           
  8960                           
  8961                           ;psect for function _ADC_Initialize
  8962  08EF                     _ADC_Initialize:	
  8963                           
  8964                           ;adc.c: 69: ADCON0 = 0x01;
  8965                           
  8966                           ;incstack = 0
  8967                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  8968  08EF  3001               	movlw	1
  8969  08F0  0021               	movlb	1	; select bank1
  8970  08F1  009D               	movwf	29	;volatile
  8971                           
  8972                           ;adc.c: 72: ADCON1 = 0xF0;
  8973  08F2  30F0               	movlw	240
  8974  08F3  009E               	movwf	30	;volatile
  8975                           
  8976                           ;adc.c: 75: ADRESL = 0x00;
  8977  08F4  019B               	clrf	27	;volatile
  8978                           
  8979                           ;adc.c: 78: ADRESH = 0x00;
  8980  08F5  019C               	clrf	28	;volatile
  8981  08F6  0008               	return
  8982  08F7                     __end_of_ADC_Initialize:	
  8983                           
  8984                           	psect	intentry
  8985  0004                     __pintentry:	
  8986 ;; *************** function _INTERRUPT_InterruptManager *****************
  8987 ;; Defined at:
  8988 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  8989 ;; Parameters:    Size  Location     Type
  8990 ;;		None
  8991 ;; Auto vars:     Size  Location     Type
  8992 ;;		None
  8993 ;; Return value:  Size  Location     Type
  8994 ;;                  1    wreg      void 
  8995 ;; Registers used:
  8996 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8997 ;; Tracked objects:
  8998 ;;		On entry : 0/0
  8999 ;;		On exit  : 0/0
  9000 ;;		Unchanged: 0/0
  9001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9003 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9004 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9005 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9006 ;;Total ram usage:        1 bytes
  9007 ;; Hardware stack levels used:    1
  9008 ;; Hardware stack levels required when called:    4
  9009 ;; This function calls:
  9010 ;;		_EUSART_Receive_ISR
  9011 ;;		_EUSART_Transmit_ISR
  9012 ;;		_I2C1_ISR
  9013 ;; This function is called by:
  9014 ;;		Interrupt level 1
  9015 ;; This function uses a non-reentrant model
  9016 ;;
  9017                           
  9018  0004                     _INTERRUPT_InterruptManager:	
  9019                           
  9020                           ;incstack = 0
  9021  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  9022                           
  9023                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9024  0005  3180               	pagesel	$
  9025  0006  0020               	movlb	0	; select bank0
  9026  0007  087F               	movf	127,w
  9027  0008  00F9               	movwf	??_INTERRUPT_InterruptManager
  9028                           
  9029                           ;interrupt_manager.c: 54: if(INTCONbits.PEIE == 1 && PIE1bits.TXIE == 1 && PIR1bits.TXIF
      +                           == 1)
  9030  0009  1F0B               	btfss	11,6	;volatile
  9031  000A  2815               	goto	i1l173
  9032  000B  0021               	movlb	1	; select bank1
  9033  000C  1E11               	btfss	17,4	;volatile
  9034  000D  2815               	goto	i1l173
  9035  000E  0020               	movlb	0	; select bank0
  9036  000F  1E11               	btfss	17,4	;volatile
  9037  0010  2815               	goto	i1l173
  9038                           
  9039                           ;interrupt_manager.c: 55: {
  9040                           ;interrupt_manager.c: 56: EUSART_Transmit_ISR();
  9041  0011  3189  21B6  3180   	fcall	_EUSART_Transmit_ISR
  9042                           
  9043                           ;interrupt_manager.c: 57: }
  9044  0014  282B               	goto	i1l179
  9045  0015                     i1l173:	
  9046                           
  9047                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits
      +                          .RCIF == 1)
  9048  0015  1F0B               	btfss	11,6	;volatile
  9049  0016  2821               	goto	i1l175
  9050  0017  0021               	movlb	1	; select bank1
  9051  0018  1E91               	btfss	17,5	;volatile
  9052  0019  2821               	goto	i1l175
  9053  001A  0020               	movlb	0	; select bank0
  9054  001B  1E91               	btfss	17,5	;volatile
  9055  001C  2821               	goto	i1l175
  9056                           
  9057                           ;interrupt_manager.c: 59: {
  9058                           ;interrupt_manager.c: 60: EUSART_Receive_ISR();
  9059  001D  3189  219B  3180   	fcall	_EUSART_Receive_ISR
  9060                           
  9061                           ;interrupt_manager.c: 61: }
  9062  0020  282B               	goto	i1l179
  9063  0021                     i1l175:	
  9064                           
  9065                           ;interrupt_manager.c: 62: else if(INTCONbits.PEIE == 1 && PIE1bits.SSP1IE == 1 && PIR1bi
      +                          ts.SSP1IF == 1)
  9066  0021  1F0B               	btfss	11,6	;volatile
  9067  0022  282B               	goto	i1l179
  9068  0023  0021               	movlb	1	; select bank1
  9069  0024  1D91               	btfss	17,3	;volatile
  9070  0025  282B               	goto	i1l179
  9071  0026  0020               	movlb	0	; select bank0
  9072  0027  1D91               	btfss	17,3	;volatile
  9073  0028  282B               	goto	i1l179
  9074                           
  9075                           ;interrupt_manager.c: 63: {
  9076                           ;interrupt_manager.c: 64: I2C1_ISR();
  9077  0029  318A  22EB         	fcall	_I2C1_ISR
  9078  002B                     i1l179:	
  9079                           ;interrupt_manager.c: 66: else
  9080                           ;interrupt_manager.c: 67: {
  9081                           
  9082                           ;interrupt_manager.c: 65: }
  9083                           
  9084  002B  0879               	movf	??_INTERRUPT_InterruptManager,w
  9085  002C  0020               	movlb	0	; select bank0
  9086  002D  00FF               	movwf	127
  9087  002E  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  9088  002F  0009               	retfie
  9089  0030                     __end_of_INTERRUPT_InterruptManager:	
  9090                           
  9091                           	psect	text49
  9092  0AEB                     __ptext49:	
  9093 ;; *************** function _I2C1_ISR *****************
  9094 ;; Defined at:
  9095 ;;		line 57 in file "mcc_generated_files/i2c1.c"
  9096 ;; Parameters:    Size  Location     Type
  9097 ;;		None
  9098 ;; Auto vars:     Size  Location     Type
  9099 ;;  i2c_data        1    8[COMMON] unsigned char 
  9100 ;; Return value:  Size  Location     Type
  9101 ;;                  1    wreg      void 
  9102 ;; Registers used:
  9103 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9104 ;; Tracked objects:
  9105 ;;		On entry : 0/0
  9106 ;;		On exit  : 0/0
  9107 ;;		Unchanged: 0/0
  9108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9110 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9111 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9112 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9113 ;;Total ram usage:        2 bytes
  9114 ;; Hardware stack levels used:    1
  9115 ;; Hardware stack levels required when called:    3
  9116 ;; This function calls:
  9117 ;;		_I2C1_StatusCallback
  9118 ;; This function is called by:
  9119 ;;		_INTERRUPT_InterruptManager
  9120 ;; This function uses a non-reentrant model
  9121 ;;
  9122                           
  9123                           
  9124                           ;psect for function _I2C1_ISR
  9125  0AEB                     _I2C1_ISR:	
  9126                           
  9127                           ;i2c1.c: 59: uint8_t i2c_data = 0x55;
  9128                           
  9129                           ;incstack = 0
  9130                           ; Regs used in _I2C1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9131  0AEB  3055               	movlw	85
  9132  0AEC  00F7               	movwf	??_I2C1_ISR
  9133  0AED  0877               	movf	??_I2C1_ISR,w
  9134  0AEE  00F8               	movwf	I2C1_ISR@i2c_data
  9135                           
  9136                           ;i2c1.c: 64: PIR1bits.SSP1IF = 0;
  9137  0AEF  0020               	movlb	0	; select bank0
  9138  0AF0  1191               	bcf	17,3	;volatile
  9139                           
  9140                           ;i2c1.c: 65: i2c_data = SSP1BUF;
  9141  0AF1  0024               	movlb	4	; select bank4
  9142  0AF2  0811               	movf	17,w	;volatile
  9143  0AF3  00F7               	movwf	??_I2C1_ISR
  9144  0AF4  0877               	movf	??_I2C1_ISR,w
  9145  0AF5  00F8               	movwf	I2C1_ISR@i2c_data
  9146                           
  9147                           ;i2c1.c: 66: if(1 == SSP1STATbits.R_nW)
  9148  0AF6  1D14               	btfss	20,2	;volatile
  9149  0AF7  2AFF               	goto	i1l64
  9150                           
  9151                           ;i2c1.c: 67: {
  9152                           ;i2c1.c: 68: if((1 == SSP1STATbits.D_nA) && (1 == SSP1CON2bits.ACKSTAT))
  9153  0AF8  1A94               	btfsc	20,5	;volatile
  9154  0AF9  1F16               	btfss	22,6	;volatile
  9155  0AFA  2AFD               	goto	i1l3689
  9156                           
  9157                           ;i2c1.c: 69: {
  9158                           ;i2c1.c: 71: I2C1_StatusCallback(I2C1_SLAVE_READ_COMPLETED);
  9159  0AFB  3003               	movlw	3
  9160  0AFC  2B0D               	goto	L4
  9161  0AFD                     i1l3689:	
  9162                           ;i2c1.c: 72: }
  9163                           
  9164                           
  9165                           ;i2c1.c: 73: else
  9166                           ;i2c1.c: 74: {
  9167                           ;i2c1.c: 76: I2C1_StatusCallback(I2C1_SLAVE_READ_REQUEST);
  9168  0AFD  3001               	movlw	1
  9169  0AFE  2B0D               	goto	L4
  9170  0AFF                     i1l64:	
  9171                           ;i2c1.c: 77: }
  9172                           ;i2c1.c: 78: }
  9173                           
  9174                           
  9175                           ;i2c1.c: 79: else if(0 == SSP1STATbits.D_nA)
  9176  0AFF  1A94               	btfsc	20,5	;volatile
  9177  0B00  2B08               	goto	i1l3697
  9178                           
  9179                           ;i2c1.c: 80: {
  9180                           ;i2c1.c: 83: if(0x00 == i2c_data)
  9181  0B01  0878               	movf	I2C1_ISR@i2c_data,w
  9182  0B02  1D03               	btfss	3,2
  9183  0B03  2B06               	goto	i1l3695
  9184                           
  9185                           ;i2c1.c: 84: {
  9186                           ;i2c1.c: 86: I2C1_StatusCallback(I2C1_SLAVE_GENERAL_CALL_REQUEST);
  9187  0B04  3004               	movlw	4
  9188  0B05  2B0D               	goto	L4
  9189  0B06                     i1l3695:	
  9190                           ;i2c1.c: 87: }
  9191                           
  9192                           
  9193                           ;i2c1.c: 88: else
  9194                           ;i2c1.c: 89: {
  9195                           ;i2c1.c: 91: I2C1_StatusCallback(I2C1_SLAVE_WRITE_REQUEST);
  9196  0B06  3000               	movlw	0
  9197  0B07  2B0D               	goto	L4
  9198  0B08                     i1l3697:	
  9199                           ;i2c1.c: 92: }
  9200                           ;i2c1.c: 93: }
  9201                           
  9202                           
  9203                           ;i2c1.c: 94: else
  9204                           ;i2c1.c: 95: {
  9205                           ;i2c1.c: 96: I2C_slaveWriteData = i2c_data;
  9206  0B08  0878               	movf	I2C1_ISR@i2c_data,w
  9207  0B09  00F7               	movwf	??_I2C1_ISR
  9208  0B0A  0877               	movf	??_I2C1_ISR,w
  9209  0B0B  00FD               	movwf	_I2C_slaveWriteData	;volatile
  9210                           
  9211                           ;i2c1.c: 99: I2C1_StatusCallback(I2C1_SLAVE_WRITE_COMPLETED);
  9212  0B0C  3002               	movlw	2
  9213  0B0D                     L4:	
  9214  0B0D  3186  26FA         	fcall	_I2C1_StatusCallback
  9215                           
  9216                           ;i2c1.c: 100: }
  9217                           ;i2c1.c: 102: SSP1CON1bits.CKP = 1;
  9218  0B0F  0024               	movlb	4	; select bank4
  9219  0B10  1615               	bsf	21,4	;volatile
  9220  0B11  0008               	return
  9221  0B12                     __end_of_I2C1_ISR:	
  9222                           
  9223                           	psect	text50
  9224  06FA                     __ptext50:	
  9225 ;; *************** function _I2C1_StatusCallback *****************
  9226 ;; Defined at:
  9227 ;;		line 106 in file "mcc_generated_files/i2c1.c"
  9228 ;; Parameters:    Size  Location     Type
  9229 ;;  i2c_bus_stat    1    wreg     enum E3101
  9230 ;; Auto vars:     Size  Location     Type
  9231 ;;  i2c_bus_stat    1    5[COMMON] enum E3101
  9232 ;;  pdata           1    6[COMMON] PTR unsigned char 
  9233 ;;		 -> type_no_data(1), PROTOCOL_Send_uint8_t@pbuf(1), sendbuf(16), readbuf.length(1), 
  9234 ;;		 -> readbuf.type(1), readbuf(5), 
  9235 ;; Return value:  Size  Location     Type
  9236 ;;                  1    wreg      void 
  9237 ;; Registers used:
  9238 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9239 ;; Tracked objects:
  9240 ;;		On entry : 0/0
  9241 ;;		On exit  : 0/0
  9242 ;;		Unchanged: 0/0
  9243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9245 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9246 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9247 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9248 ;;Total ram usage:        3 bytes
  9249 ;; Hardware stack levels used:    1
  9250 ;; Hardware stack levels required when called:    2
  9251 ;; This function calls:
  9252 ;;		_PROTOCOL_Backplane_Slave_Enabled
  9253 ;;		_PROTOCOL_I2C_GET
  9254 ;;		_PROTOCOL_I2C_SEN
  9255 ;;		_PROTOCOL_I2C_WHO
  9256 ;;		_PROTOCOL_INV
  9257 ;;		_PROTOCOL_RST
  9258 ;;		_PROTOCOL_Read_Lock
  9259 ;;		i1_PROTOCOL_EXT
  9260 ;;		i1_PROTOCOL_SAV
  9261 ;;		i1_PROTOCOL_SET
  9262 ;;		i1_PROTOCOL_STA
  9263 ;;		i1_PROTOCOL_STP
  9264 ;; This function is called by:
  9265 ;;		_I2C1_ISR
  9266 ;; This function uses a non-reentrant model
  9267 ;;
  9268                           
  9269                           
  9270                           ;psect for function _I2C1_StatusCallback
  9271  06FA                     _I2C1_StatusCallback:	
  9272                           
  9273                           ;incstack = 0
  9274                           ; Regs used in _I2C1_StatusCallback: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9275                           ;I2C1_StatusCallback@i2c_bus_state stored from wreg
  9276  06FA  00F5               	movwf	I2C1_StatusCallback@i2c_bus_state
  9277                           
  9278                           ;i2c1.c: 109: static uint8_t slaveWriteType = SLAVE_NORMAL_DATA;
  9279                           ;i2c1.c: 110: static uint8_t next = 0x00;
  9280                           ;i2c1.c: 111: static uint8_t ext_len = 0;
  9281                           ;i2c1.c: 112: static uint8_t ext_cnt = 0;
  9282                           ;i2c1.c: 113: static char ext_buf[48];
  9283                           ;i2c1.c: 114: uint8_t *pdata;
  9284                           ;i2c1.c: 115: switch (i2c_bus_state)
  9285  06FB  2FB3               	goto	i1l3535
  9286  06FC                     i1l86:	
  9287                           ;i2c1.c: 116: {
  9288                           ;i2c1.c: 117: case I2C1_SLAVE_WRITE_REQUEST:
  9289                           
  9290                           
  9291                           ;i2c1.c: 118: slaveWriteType = SLAVE_DATA_ADDRESS;
  9292  06FC  0020               	movlb	0	; select bank0
  9293  06FD  01ED               	clrf	I2C1_StatusCallback@slaveWriteType
  9294  06FE  0AED               	incf	I2C1_StatusCallback@slaveWriteType,f
  9295                           
  9296                           ;i2c1.c: 119: break;
  9297  06FF  0008               	return
  9298  0700                     i1l3461:	
  9299                           ;i2c1.c: 121: case I2C1_SLAVE_GENERAL_CALL_REQUEST:
  9300                           
  9301                           
  9302                           ;i2c1.c: 123: slaveWriteType = SLAVE_GENERAL_CALL;
  9303  0700  3002               	movlw	2
  9304  0701  00F4               	movwf	??_I2C1_StatusCallback
  9305  0702  0874               	movf	??_I2C1_StatusCallback,w
  9306  0703  0020               	movlb	0	; select bank0
  9307  0704  00ED               	movwf	I2C1_StatusCallback@slaveWriteType
  9308                           
  9309                           ;i2c1.c: 124: break;
  9310  0705  0008               	return
  9311  0706                     i1l3463:	
  9312                           ;i2c1.c: 132: case 0x01:
  9313                           
  9314                           ;i2c1.c: 131: switch(next) {
  9315                           
  9316                           ;i2c1.c: 129: {
  9317                           ;i2c1.c: 130: case SLAVE_DATA_ADDRESS:
  9318                           
  9319                           ;i2c1.c: 128: switch(slaveWriteType)
  9320                           
  9321                           ;i2c1.c: 126: case I2C1_SLAVE_WRITE_COMPLETED:
  9322                           
  9323                           
  9324                           ;i2c1.c: 133: PROTOCOL_SET(I2C_slaveWriteData);
  9325  0706  087D               	movf	_I2C_slaveWriteData,w	;volatile
  9326  0707  3188  20D3  3186   	fcall	i1_PROTOCOL_SET
  9327  070A  2F75               	goto	i1l3509
  9328  070B                     i1l3467:	
  9329                           ;i2c1.c: 138: case 0x04:
  9330                           
  9331                           ;i2c1.c: 137: switch(I2C_slaveWriteData) {
  9332                           
  9333                           ;i2c1.c: 136: case 0x00:
  9334                           
  9335                           ;i2c1.c: 135: break;
  9336                           
  9337                           ;i2c1.c: 134: next = 0x00;
  9338                           
  9339                           
  9340                           ;i2c1.c: 139: PROTOCOL_STA();
  9341  070B  3188  20B7  3186   	fcall	i1_PROTOCOL_STA
  9342                           
  9343                           ;i2c1.c: 140: break;
  9344  070E  2F8E               	goto	i1l3519
  9345  070F                     i1l3469:	
  9346                           ;i2c1.c: 141: case 0x05:
  9347                           
  9348                           
  9349                           ;i2c1.c: 142: PROTOCOL_STP();
  9350  070F  3188  20A3  3186   	fcall	i1_PROTOCOL_STP
  9351                           
  9352                           ;i2c1.c: 143: break;
  9353  0712  2F8E               	goto	i1l3519
  9354  0713                     i1l3471:	
  9355                           ;i2c1.c: 144: case 0x03:
  9356                           
  9357                           
  9358                           ;i2c1.c: 145: PROTOCOL_SAV();
  9359  0713  3188  20F7  3186   	fcall	i1_PROTOCOL_SAV
  9360                           
  9361                           ;i2c1.c: 146: break;
  9362  0716  2F8E               	goto	i1l3519
  9363  0717                     i1l3473:	
  9364                           ;i2c1.c: 147: case 0x06:
  9365                           
  9366                           
  9367                           ;i2c1.c: 148: PROTOCOL_INV();
  9368  0717  3188  20B3  3186   	fcall	_PROTOCOL_INV
  9369                           
  9370                           ;i2c1.c: 149: break;
  9371  071A  2F8E               	goto	i1l3519
  9372  071B                     i1l3475:	
  9373                           ;i2c1.c: 150: case 0x0c:
  9374                           
  9375                           
  9376                           ;i2c1.c: 151: PROTOCOL_RST();
  9377  071B  3189  2112  3186   	fcall	_PROTOCOL_RST
  9378                           
  9379                           ;i2c1.c: 152: break;
  9380  071E  2F8E               	goto	i1l3519
  9381  071F                     i1l103:	
  9382                           ;i2c1.c: 153: case 0x08:
  9383                           
  9384                           
  9385                           ;i2c1.c: 154: next = 0x01;
  9386  071F  01EC               	clrf	I2C1_StatusCallback@next
  9387  0720  0AEC               	incf	I2C1_StatusCallback@next,f
  9388                           
  9389                           ;i2c1.c: 155: break;
  9390  0721  2F8E               	goto	i1l3519
  9391  0722                     i1l3477:	
  9392                           ;i2c1.c: 156: case 0x0a:
  9393                           
  9394                           
  9395                           ;i2c1.c: 157: next = 0x02;
  9396  0722  3002               	movlw	2
  9397  0723  2F56               	goto	L5
  9398  0724                     i1l3481:	
  9399                           ;i2c1.c: 159: }
  9400                           
  9401                           ;i2c1.c: 158: break;
  9402                           
  9403  0724  087D               	movf	_I2C_slaveWriteData,w	;volatile
  9404                           
  9405                           ; Switch size 1, requested type "space"
  9406                           ; Number of cases is 7, Range of values is 3 to 12
  9407                           ; switch strategies available:
  9408                           ; Name         Instructions Cycles
  9409                           ; simple_byte           22    12 (average)
  9410                           ; direct_byte           29     9 (fixed)
  9411                           ; jumptable            263     9 (fixed)
  9412                           ;	Chosen strategy is simple_byte
  9413  0725  3A03               	xorlw	3	; case 3
  9414  0726  1903               	skipnz
  9415  0727  2F13               	goto	i1l3471
  9416  0728  3A07               	xorlw	7	; case 4
  9417  0729  1903               	skipnz
  9418  072A  2F0B               	goto	i1l3467
  9419  072B  3A01               	xorlw	1	; case 5
  9420  072C  1903               	skipnz
  9421  072D  2F0F               	goto	i1l3469
  9422  072E  3A03               	xorlw	3	; case 6
  9423  072F  1903               	skipnz
  9424  0730  2F17               	goto	i1l3473
  9425  0731  3A0E               	xorlw	14	; case 8
  9426  0732  1903               	skipnz
  9427  0733  2F1F               	goto	i1l103
  9428  0734  3A02               	xorlw	2	; case 10
  9429  0735  1903               	skipnz
  9430  0736  2F22               	goto	i1l3477
  9431  0737  3A06               	xorlw	6	; case 12
  9432  0738  1903               	skipnz
  9433  0739  2F1B               	goto	i1l3475
  9434  073A  2F8E               	goto	i1l3519
  9435                           
  9436                           ;i2c1.c: 161: }
  9437                           
  9438                           ;i2c1.c: 160: break;
  9439  073B  2F8E               	goto	i1l3519
  9440  073C                     i1l3485:	
  9441  073C  086C               	movf	I2C1_StatusCallback@next,w
  9442                           
  9443                           ; Switch size 1, requested type "space"
  9444                           ; Number of cases is 2, Range of values is 0 to 1
  9445                           ; switch strategies available:
  9446                           ; Name         Instructions Cycles
  9447                           ; simple_byte            7     4 (average)
  9448                           ; direct_byte           10     6 (fixed)
  9449                           ; jumptable            260     6 (fixed)
  9450                           ;	Chosen strategy is simple_byte
  9451  073D  3A00               	xorlw	0	; case 0
  9452  073E  1903               	skipnz
  9453  073F  2F24               	goto	i1l3481
  9454  0740  3A01               	xorlw	1	; case 1
  9455  0741  1903               	skipnz
  9456  0742  2F06               	goto	i1l3463
  9457  0743  2F8E               	goto	i1l3519
  9458                           
  9459                           ;i2c1.c: 162: break;
  9460  0744  2F8E               	goto	i1l3519
  9461  0745                     i1l3487:	
  9462                           ;i2c1.c: 164: case SLAVE_GENERAL_CALL:
  9463                           
  9464                           
  9465                           ;i2c1.c: 165: if (I2C_slaveWriteData == 0x02) {
  9466  0745  3002               	movlw	2
  9467  0746  067D               	xorwf	_I2C_slaveWriteData,w	;volatile
  9468  0747  1D03               	btfss	3,2
  9469  0748  2F8E               	goto	i1l3519
  9470                           
  9471                           ;i2c1.c: 166: SSP1CON2bits.GCEN = 0;
  9472  0749  0024               	movlb	4	; select bank4
  9473  074A  1396               	bcf	22,7	;volatile
  9474                           
  9475                           ;i2c1.c: 167: PROTOCOL_Backplane_Slave_Enabled();
  9476  074B  3188  20AF  3186   	fcall	_PROTOCOL_Backplane_Slave_Enabled
  9477                           
  9478                           ;i2c1.c: 168: }
  9479                           ;i2c1.c: 169: break;
  9480  074E  2F8E               	goto	i1l3519
  9481  074F                     i1l3493:	
  9482                           ;i2c1.c: 173: case 0x02:
  9483                           
  9484                           ;i2c1.c: 172: switch(next) {
  9485                           
  9486                           ;i2c1.c: 171: case SLAVE_NORMAL_DATA:
  9487                           
  9488                           
  9489                           ;i2c1.c: 174: ext_len = I2C_slaveWriteData;
  9490  074F  087D               	movf	_I2C_slaveWriteData,w	;volatile
  9491  0750  00F4               	movwf	??_I2C1_StatusCallback
  9492  0751  0874               	movf	??_I2C1_StatusCallback,w
  9493  0752  0020               	movlb	0	; select bank0
  9494  0753  00EB               	movwf	I2C1_StatusCallback@ext_len
  9495                           
  9496                           ;i2c1.c: 175: ext_cnt = 0;
  9497  0754  01EA               	clrf	I2C1_StatusCallback@ext_cnt
  9498                           
  9499                           ;i2c1.c: 176: next = 0x03;
  9500  0755  3003               	movlw	3
  9501  0756                     L5:	
  9502  0756  00F4               	movwf	??_I2C1_StatusCallback
  9503  0757  0874               	movf	??_I2C1_StatusCallback,w
  9504  0758  00EC               	movwf	I2C1_StatusCallback@next
  9505                           
  9506                           ;i2c1.c: 177: break;
  9507  0759  2F8E               	goto	i1l3519
  9508  075A                     i1l3499:	
  9509                           ;i2c1.c: 178: case 0x03:
  9510                           
  9511                           
  9512                           ;i2c1.c: 179: ext_buf[ext_cnt++] = (char)I2C_slaveWriteData;
  9513  075A  087D               	movf	_I2C_slaveWriteData,w	;volatile
  9514  075B  00F4               	movwf	??_I2C1_StatusCallback
  9515  075C  086A               	movf	I2C1_StatusCallback@ext_cnt,w
  9516  075D  3EA0               	addlw	(low (I2C1_StatusCallback@ext_buf| (0+256)))& (0+255)
  9517  075E  0086               	movwf	6
  9518  075F  3001               	movlw	1	; select bank3/4
  9519  0760  0087               	movwf	7
  9520  0761  0874               	movf	??_I2C1_StatusCallback,w
  9521  0762  0081               	movwf	1
  9522  0763  3001               	movlw	1
  9523  0764  00F4               	movwf	??_I2C1_StatusCallback
  9524  0765  0874               	movf	??_I2C1_StatusCallback,w
  9525  0766  07EA               	addwf	I2C1_StatusCallback@ext_cnt,f
  9526                           
  9527                           ;i2c1.c: 180: if (ext_cnt >= ext_len) {
  9528  0767  086B               	movf	I2C1_StatusCallback@ext_len,w
  9529  0768  026A               	subwf	I2C1_StatusCallback@ext_cnt,w
  9530  0769  1C03               	skipc
  9531  076A  2F8E               	goto	i1l3519
  9532                           
  9533                           ;i2c1.c: 181: if (!PROTOCOL_Read_Lock()) PROTOCOL_EXT(&ext_buf[0]);
  9534  076B  3188  20A0  3186   	fcall	_PROTOCOL_Read_Lock
  9535  076E  3A00               	xorlw	0
  9536  076F  1D03               	skipz
  9537  0770  2F75               	goto	i1l3509
  9538  0771  30A0               	movlw	(low (I2C1_StatusCallback@ext_buf| (0+256)))& (0+255)
  9539  0772  3188  2096  3186   	fcall	i1_PROTOCOL_EXT
  9540  0775                     i1l3509:	
  9541                           
  9542                           ;i2c1.c: 182: next = 0x00;
  9543  0775  0020               	movlb	0	; select bank0
  9544  0776  01EC               	clrf	I2C1_StatusCallback@next
  9545                           
  9546                           ;i2c1.c: 185: }
  9547                           
  9548                           ;i2c1.c: 183: }
  9549                           ;i2c1.c: 184: break;
  9550  0777  2F8E               	goto	i1l3519
  9551  0778                     i1l3513:	
  9552  0778  0020               	movlb	0	; select bank0
  9553  0779  086C               	movf	I2C1_StatusCallback@next,w
  9554                           
  9555                           ; Switch size 1, requested type "space"
  9556                           ; Number of cases is 2, Range of values is 2 to 3
  9557                           ; switch strategies available:
  9558                           ; Name         Instructions Cycles
  9559                           ; simple_byte            7     4 (average)
  9560                           ; direct_byte           13     9 (fixed)
  9561                           ; jumptable            263     9 (fixed)
  9562                           ;	Chosen strategy is simple_byte
  9563  077A  3A02               	xorlw	2	; case 2
  9564  077B  1903               	skipnz
  9565  077C  2F4F               	goto	i1l3493
  9566  077D  3A01               	xorlw	1	; case 3
  9567  077E  1903               	skipnz
  9568  077F  2F5A               	goto	i1l3499
  9569  0780  2F8E               	goto	i1l3519
  9570                           
  9571                           ;i2c1.c: 190: }
  9572                           
  9573                           ;i2c1.c: 188: break;
  9574                           
  9575                           ;i2c1.c: 187: default:
  9576                           
  9577                           ;i2c1.c: 186: break;
  9578  0781  2F8E               	goto	i1l3519
  9579  0782                     i1l3517:	
  9580  0782  0020               	movlb	0	; select bank0
  9581  0783  086D               	movf	I2C1_StatusCallback@slaveWriteType,w
  9582                           
  9583                           ; Switch size 1, requested type "space"
  9584                           ; Number of cases is 3, Range of values is 0 to 2
  9585                           ; switch strategies available:
  9586                           ; Name         Instructions Cycles
  9587                           ; simple_byte           10     6 (average)
  9588                           ; direct_byte           12     6 (fixed)
  9589                           ; jumptable            260     6 (fixed)
  9590                           ;	Chosen strategy is simple_byte
  9591  0784  3A00               	xorlw	0	; case 0
  9592  0785  1903               	skipnz
  9593  0786  2F78               	goto	i1l3513
  9594  0787  3A01               	xorlw	1	; case 1
  9595  0788  1903               	skipnz
  9596  0789  2F3C               	goto	i1l3485
  9597  078A  3A03               	xorlw	3	; case 2
  9598  078B  1903               	skipnz
  9599  078C  2F45               	goto	i1l3487
  9600  078D  2F8E               	goto	i1l3519
  9601  078E                     i1l3519:	
  9602                           
  9603                           ;i2c1.c: 192: slaveWriteType = SLAVE_NORMAL_DATA;
  9604  078E  0020               	movlb	0	; select bank0
  9605  078F  01ED               	clrf	I2C1_StatusCallback@slaveWriteType
  9606                           
  9607                           ;i2c1.c: 193: break;
  9608  0790  0008               	return
  9609  0791                     i1l3521:	
  9610                           ;i2c1.c: 197: {
  9611                           ;i2c1.c: 198: case 0x01:
  9612                           
  9613                           ;i2c1.c: 196: switch (I2C_slaveWriteData)
  9614                           
  9615                           ;i2c1.c: 195: case I2C1_SLAVE_READ_REQUEST:
  9616                           
  9617                           
  9618                           ;i2c1.c: 199: SSP1BUF = PROTOCOL_I2C_WHO();
  9619  0791  3188  209D         	fcall	_PROTOCOL_I2C_WHO
  9620  0793  0024               	movlb	4	; select bank4
  9621  0794  0091               	movwf	17	;volatile
  9622                           
  9623                           ;i2c1.c: 200: break;
  9624  0795  0008               	return
  9625  0796                     i1l3523:	
  9626                           ;i2c1.c: 201: case 0x07:
  9627                           
  9628                           
  9629                           ;i2c1.c: 202: pdata = PROTOCOL_I2C_SEN();
  9630  0796  318B  23DD         	fcall	_PROTOCOL_I2C_SEN
  9631  0798  00F4               	movwf	??_I2C1_StatusCallback
  9632  0799  0874               	movf	??_I2C1_StatusCallback,w
  9633  079A  00F6               	movwf	I2C1_StatusCallback@pdata
  9634                           
  9635                           ;i2c1.c: 203: SSP1BUF = *pdata;
  9636  079B  0876               	movf	I2C1_StatusCallback@pdata,w
  9637  079C  0086               	movwf	6
  9638  079D  0187               	clrf	7
  9639  079E  0801               	movf	1,w
  9640  079F  0024               	movlb	4	; select bank4
  9641  07A0  0091               	movwf	17	;volatile
  9642                           
  9643                           ;i2c1.c: 204: break;
  9644  07A1  0008               	return
  9645  07A2                     i1l3527:	
  9646                           ;i2c1.c: 205: case 0x09:
  9647                           
  9648                           
  9649                           ;i2c1.c: 206: SSP1BUF = PROTOCOL_I2C_GET();
  9650  07A2  3188  209A         	fcall	_PROTOCOL_I2C_GET
  9651  07A4  0024               	movlb	4	; select bank4
  9652  07A5  0091               	movwf	17	;volatile
  9653                           
  9654                           ;i2c1.c: 208: }
  9655                           
  9656                           ;i2c1.c: 207: break;
  9657  07A6  0008               	return
  9658  07A7                     i1l3531:	
  9659  07A7  087D               	movf	_I2C_slaveWriteData,w	;volatile
  9660                           
  9661                           ; Switch size 1, requested type "space"
  9662                           ; Number of cases is 3, Range of values is 1 to 9
  9663                           ; switch strategies available:
  9664                           ; Name         Instructions Cycles
  9665                           ; simple_byte           10     6 (average)
  9666                           ; direct_byte           27     9 (fixed)
  9667                           ; jumptable            263     9 (fixed)
  9668                           ;	Chosen strategy is simple_byte
  9669  07A8  3A01               	xorlw	1	; case 1
  9670  07A9  1903               	skipnz
  9671  07AA  2F91               	goto	i1l3521
  9672  07AB  3A06               	xorlw	6	; case 7
  9673  07AC  1903               	skipnz
  9674  07AD  2F96               	goto	i1l3523
  9675  07AE  3A0E               	xorlw	14	; case 9
  9676  07AF  1903               	skipnz
  9677  07B0  2FA2               	goto	i1l3527
  9678  07B1  2FBD               	goto	i1l124
  9679                           
  9680                           ;i2c1.c: 216: }
  9681                           
  9682                           ;i2c1.c: 214: break;
  9683                           
  9684                           ;i2c1.c: 213: default:
  9685                           
  9686                           ;i2c1.c: 212: break;
  9687                           
  9688                           ;i2c1.c: 211: case I2C1_SLAVE_READ_COMPLETED:
  9689                           
  9690                           ;i2c1.c: 209: break;
  9691  07B2  0008               	return
  9692  07B3                     i1l3535:	
  9693  07B3  0875               	movf	I2C1_StatusCallback@i2c_bus_state,w
  9694                           
  9695                           ; Switch size 1, requested type "space"
  9696                           ; Number of cases is 5, Range of values is 0 to 4
  9697                           ; switch strategies available:
  9698                           ; Name         Instructions Cycles
  9699                           ; direct_byte           16     6 (fixed)
  9700                           ; simple_byte           16     9 (average)
  9701                           ; jumptable            260     6 (fixed)
  9702                           ;	Chosen strategy is direct_byte
  9703  07B4  0084               	movwf	4
  9704  07B5  3005               	movlw	5
  9705  07B6  0204               	subwf	4,w
  9706  07B7  1803               	skipnc
  9707  07B8  0008               	return
  9708  07B9  3188               	movlp	high i1S3961
  9709  07BA  3504               	lslf	4,w
  9710  07BB  3E00               	addlw	low i1S3961
  9711  07BC  0082               	movwf	2
  9712  07BD                     i1l124:	
  9713  07BD  0008               	return
  9714  07BE                     __end_of_I2C1_StatusCallback:	
  9715                           
  9716                           	psect	swtext1
  9717  0800                     __pswtext1:	
  9718  0800                     i1S3961:	
  9719  0800  3186  2EFC         	ljmp	i1l86
  9720  0802  3187  2FA7         	ljmp	i1l3531
  9721  0804  3187  2F82         	ljmp	i1l3517
  9722  0806  3187  2FBD         	ljmp	i1l124
  9723  0808  3187  2F00         	ljmp	i1l3461
  9724                           
  9725                           	psect	text51
  9726  08A3                     __ptext51:	
  9727 ;; *************** function i1_PROTOCOL_STP *****************
  9728 ;; Defined at:
  9729 ;;		line 103 in file "protocol.c"
  9730 ;; Parameters:    Size  Location     Type
  9731 ;;		None
  9732 ;; Auto vars:     Size  Location     Type
  9733 ;;		None
  9734 ;; Return value:  Size  Location     Type
  9735 ;;                  1    wreg      void 
  9736 ;; Registers used:
  9737 ;;		wreg, status,2, status,0
  9738 ;; Tracked objects:
  9739 ;;		On entry : 0/0
  9740 ;;		On exit  : 0/0
  9741 ;;		Unchanged: 0/0
  9742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9744 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9746 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9747 ;;Total ram usage:        0 bytes
  9748 ;; Hardware stack levels used:    1
  9749 ;; This function calls:
  9750 ;;		Nothing
  9751 ;; This function is called by:
  9752 ;;		_I2C1_StatusCallback
  9753 ;; This function uses a non-reentrant model
  9754 ;;
  9755                           
  9756                           
  9757                           ;psect for function i1_PROTOCOL_STP
  9758  08A3                     i1_PROTOCOL_STP:	
  9759                           
  9760                           ;protocol.c: 105: running = 0;
  9761                           
  9762                           ;incstack = 0
  9763                           ; Regs used in i1_PROTOCOL_STP: [wreg+status,2+status,0]
  9764  08A3  0020               	movlb	0	; select bank0
  9765  08A4  01E1               	clrf	_running
  9766  08A5  0008               	return
  9767  08A6                     __end_ofi1_PROTOCOL_STP:	
  9768                           
  9769                           	psect	text52
  9770  08B7                     __ptext52:	
  9771 ;; *************** function i1_PROTOCOL_STA *****************
  9772 ;; Defined at:
  9773 ;;		line 98 in file "protocol.c"
  9774 ;; Parameters:    Size  Location     Type
  9775 ;;		None
  9776 ;; Auto vars:     Size  Location     Type
  9777 ;;		None
  9778 ;; Return value:  Size  Location     Type
  9779 ;;                  1    wreg      void 
  9780 ;; Registers used:
  9781 ;;		wreg, status,2, status,0
  9782 ;; Tracked objects:
  9783 ;;		On entry : 0/0
  9784 ;;		On exit  : 0/0
  9785 ;;		Unchanged: 0/0
  9786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9788 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9790 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9791 ;;Total ram usage:        0 bytes
  9792 ;; Hardware stack levels used:    1
  9793 ;; This function calls:
  9794 ;;		Nothing
  9795 ;; This function is called by:
  9796 ;;		_I2C1_StatusCallback
  9797 ;; This function uses a non-reentrant model
  9798 ;;
  9799                           
  9800                           
  9801                           ;psect for function i1_PROTOCOL_STA
  9802  08B7                     i1_PROTOCOL_STA:	
  9803                           
  9804                           ;protocol.c: 100: running = 1;
  9805                           
  9806                           ;incstack = 0
  9807                           ; Regs used in i1_PROTOCOL_STA: [wreg+status,2+status,0]
  9808  08B7  0020               	movlb	0	; select bank0
  9809  08B8  01E1               	clrf	_running
  9810  08B9  0AE1               	incf	_running,f
  9811  08BA  0008               	return
  9812  08BB                     __end_ofi1_PROTOCOL_STA:	
  9813                           
  9814                           	psect	text53
  9815  08D3                     __ptext53:	
  9816 ;; *************** function i1_PROTOCOL_SET *****************
  9817 ;; Defined at:
  9818 ;;		line 116 in file "protocol.c"
  9819 ;; Parameters:    Size  Location     Type
  9820 ;;  value_          1    wreg     unsigned char 
  9821 ;; Auto vars:     Size  Location     Type
  9822 ;;  value_          1    1[COMMON] unsigned char 
  9823 ;; Return value:  Size  Location     Type
  9824 ;;                  1    wreg      void 
  9825 ;; Registers used:
  9826 ;;		wreg, status,2, status,0
  9827 ;; Tracked objects:
  9828 ;;		On entry : 0/0
  9829 ;;		On exit  : 0/0
  9830 ;;		Unchanged: 0/0
  9831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9833 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9834 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9835 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9836 ;;Total ram usage:        2 bytes
  9837 ;; Hardware stack levels used:    1
  9838 ;; This function calls:
  9839 ;;		Nothing
  9840 ;; This function is called by:
  9841 ;;		_I2C1_StatusCallback
  9842 ;; This function uses a non-reentrant model
  9843 ;;
  9844                           
  9845                           
  9846                           ;psect for function i1_PROTOCOL_SET
  9847  08D3                     i1_PROTOCOL_SET:	
  9848                           
  9849                           ;incstack = 0
  9850                           ; Regs used in i1_PROTOCOL_SET: [wreg+status,2+status,0]
  9851                           ;i1PROTOCOL_SET@value_ stored from wreg
  9852  08D3  00F1               	movwf	i1PROTOCOL_SET@value_
  9853                           
  9854                           ;protocol.c: 117: value = value_;
  9855  08D4  0871               	movf	i1PROTOCOL_SET@value_,w
  9856  08D5  00F0               	movwf	??i1_PROTOCOL_SET
  9857  08D6  0870               	movf	??i1_PROTOCOL_SET,w
  9858  08D7  0020               	movlb	0	; select bank0
  9859  08D8  00E3               	movwf	_value
  9860  08D9  0008               	return
  9861  08DA                     __end_ofi1_PROTOCOL_SET:	
  9862                           
  9863                           	psect	text54
  9864  08F7                     __ptext54:	
  9865 ;; *************** function i1_PROTOCOL_SAV *****************
  9866 ;; Defined at:
  9867 ;;		line 112 in file "protocol.c"
  9868 ;; Parameters:    Size  Location     Type
  9869 ;;		None
  9870 ;; Auto vars:     Size  Location     Type
  9871 ;;		None
  9872 ;; Return value:  Size  Location     Type
  9873 ;;                  1    wreg      void 
  9874 ;; Registers used:
  9875 ;;		wreg, status,2, status,0, pclath, cstack
  9876 ;; Tracked objects:
  9877 ;;		On entry : 0/0
  9878 ;;		On exit  : 0/0
  9879 ;;		Unchanged: 0/0
  9880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9883 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9884 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9885 ;;Total ram usage:        1 bytes
  9886 ;; Hardware stack levels used:    1
  9887 ;; Hardware stack levels required when called:    1
  9888 ;; This function calls:
  9889 ;;		i1_DATAEE_WriteByte
  9890 ;; This function is called by:
  9891 ;;		_I2C1_StatusCallback
  9892 ;; This function uses a non-reentrant model
  9893 ;;
  9894                           
  9895                           
  9896                           ;psect for function i1_PROTOCOL_SAV
  9897  08F7                     i1_PROTOCOL_SAV:	
  9898                           
  9899                           ;protocol.c: 113: DATAEE_WriteByte(1, value);
  9900                           
  9901                           ;incstack = 0
  9902                           ; Regs used in i1_PROTOCOL_SAV: [wreg+status,2+status,0+pclath+cstack]
  9903  08F7  0020               	movlb	0	; select bank0
  9904  08F8  0863               	movf	_value,w
  9905  08F9  00F3               	movwf	??i1_PROTOCOL_SAV
  9906  08FA  0873               	movf	??i1_PROTOCOL_SAV,w
  9907  08FB  00F0               	movwf	i1DATAEE_WriteByte@bData
  9908  08FC  3001               	movlw	1
  9909  08FD  318A  2208         	fcall	i1_DATAEE_WriteByte
  9910  08FF  0008               	return
  9911  0900                     __end_ofi1_PROTOCOL_SAV:	
  9912                           
  9913                           	psect	text55
  9914  0A08                     __ptext55:	
  9915 ;; *************** function i1_DATAEE_WriteByte *****************
  9916 ;; Defined at:
  9917 ;;		line 180 in file "mcc_generated_files/memory.c"
  9918 ;; Parameters:    Size  Location     Type
  9919 ;;  bAdd            1    wreg     unsigned char 
  9920 ;;  bData           1    0[COMMON] unsigned char 
  9921 ;; Auto vars:     Size  Location     Type
  9922 ;;  bAdd            1    1[COMMON] unsigned char 
  9923 ;;  DATAEE_Write    1    2[COMMON] unsigned char 
  9924 ;; Return value:  Size  Location     Type
  9925 ;;                  1    wreg      void 
  9926 ;; Registers used:
  9927 ;;		wreg, status,2, status,0
  9928 ;; Tracked objects:
  9929 ;;		On entry : 0/0
  9930 ;;		On exit  : 0/0
  9931 ;;		Unchanged: 0/0
  9932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9933 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9934 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9936 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9937 ;;Total ram usage:        3 bytes
  9938 ;; Hardware stack levels used:    1
  9939 ;; This function calls:
  9940 ;;		Nothing
  9941 ;; This function is called by:
  9942 ;;		i1_PROTOCOL_SAV
  9943 ;; This function uses a non-reentrant model
  9944 ;;
  9945                           
  9946                           
  9947                           ;psect for function i1_DATAEE_WriteByte
  9948  0A08                     i1_DATAEE_WriteByte:	
  9949                           
  9950                           ;incstack = 0
  9951                           ; Regs used in i1_DATAEE_WriteByte: [wreg+status,2+status,0]
  9952                           ;i1DATAEE_WriteByte@bAdd stored from wreg
  9953  0A08  00F1               	movwf	i1DATAEE_WriteByte@bAdd
  9954                           
  9955                           ;memory.c: 182: uint8_t GIEBitValue = 0;
  9956  0A09  01F2               	clrf	i1DATAEE_WriteByte@GIEBitValue
  9957                           
  9958                           ;memory.c: 184: EEADRL = (bAdd & 0x0ff);
  9959  0A0A  0871               	movf	i1DATAEE_WriteByte@bAdd,w
  9960  0A0B  0023               	movlb	3	; select bank3
  9961  0A0C  0091               	movwf	17	;volatile
  9962                           
  9963                           ;memory.c: 185: EEDATL = bData;
  9964  0A0D  0870               	movf	i1DATAEE_WriteByte@bData,w
  9965  0A0E  0093               	movwf	19	;volatile
  9966                           
  9967                           ;memory.c: 186: EECON1bits.EEPGD = 0;
  9968  0A0F  1395               	bcf	21,7	;volsfr
  9969                           
  9970                           ;memory.c: 187: EECON1bits.CFGS = 0;
  9971  0A10  1315               	bcf	21,6	;volsfr
  9972                           
  9973                           ;memory.c: 188: EECON1bits.WREN = 1;
  9974  0A11  1515               	bsf	21,2	;volsfr
  9975                           
  9976                           ;memory.c: 190: GIEBitValue = INTCONbits.GIE;
  9977  0A12  3000               	movlw	0
  9978  0A13  1B8B               	btfsc	11,7	;volatile
  9979  0A14  3001               	movlw	1
  9980  0A15  00F2               	movwf	i1DATAEE_WriteByte@GIEBitValue
  9981                           
  9982                           ;memory.c: 191: INTCONbits.GIE = 0;
  9983  0A16  138B               	bcf	11,7	;volatile
  9984                           
  9985                           ;memory.c: 192: EECON2 = 0x55;
  9986  0A17  3055               	movlw	85
  9987  0A18  0096               	movwf	22	;volsfr
  9988                           
  9989                           ;memory.c: 193: EECON2 = 0xAA;
  9990  0A19  30AA               	movlw	170
  9991  0A1A  0096               	movwf	22	;volsfr
  9992                           
  9993                           ;memory.c: 194: EECON1bits.WR = 1;
  9994  0A1B  1495               	bsf	21,1	;volsfr
  9995  0A1C                     i1l326:	
  9996                           ;memory.c: 197: {
  9997                           
  9998                           ;memory.c: 196: while (EECON1bits.WR)
  9999                           
 10000  0A1C  1895               	btfsc	21,1	;volsfr
 10001  0A1D  2A1C               	goto	i1l326
 10002                           
 10003                           ;memory.c: 198: }
 10004                           ;memory.c: 200: EECON1bits.WREN = 0;
 10005  0A1E  1115               	bcf	21,2	;volsfr
 10006                           
 10007                           ;memory.c: 201: INTCONbits.GIE = GIEBitValue;
 10008  0A1F  0C72               	rrf	i1DATAEE_WriteByte@GIEBitValue,w
 10009  0A20  1C03               	skipc
 10010  0A21  138B               	bcf	11,7	;volatile
 10011  0A22  1803               	skipnc
 10012  0A23  178B               	bsf	11,7	;volatile
 10013  0A24  0008               	return
 10014  0A25                     __end_ofi1_DATAEE_WriteByte:	
 10015                           
 10016                           	psect	text56
 10017  0896                     __ptext56:	
 10018 ;; *************** function i1_PROTOCOL_EXT *****************
 10019 ;; Defined at:
 10020 ;;		line 121 in file "protocol.c"
 10021 ;; Parameters:    Size  Location     Type
 10022 ;;  char_buf        1    wreg     PTR unsigned char 
 10023 ;;		 -> buf(48), I2C1_StatusCallback@ext_buf(48), 
 10024 ;; Auto vars:     Size  Location     Type
 10025 ;;  char_buf        1  (no storage) PTR unsigned char 
 10026 ;;		 -> buf(48), I2C1_StatusCallback@ext_buf(48), 
 10027 ;; Return value:  Size  Location     Type
 10028 ;;                  1    wreg      void 
 10029 ;; Registers used:
 10030 ;;		wreg, status,2, status,0
 10031 ;; Tracked objects:
 10032 ;;		On entry : 0/0
 10033 ;;		On exit  : 0/0
 10034 ;;		Unchanged: 0/0
 10035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10037 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10038 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10039 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10040 ;;Total ram usage:        0 bytes
 10041 ;; Hardware stack levels used:    1
 10042 ;; This function calls:
 10043 ;;		Nothing
 10044 ;; This function is called by:
 10045 ;;		_I2C1_StatusCallback
 10046 ;; This function uses a non-reentrant model
 10047 ;;
 10048                           
 10049                           
 10050                           ;psect for function i1_PROTOCOL_EXT
 10051  0896                     i1_PROTOCOL_EXT:	
 10052                           
 10053                           ;incstack = 0
 10054                           ; Regs used in i1_PROTOCOL_EXT: [wreg+status,2+status,0]
 10055  0896  0008               	return
 10056  0897                     __end_ofi1_PROTOCOL_EXT:	
 10057                           
 10058                           	psect	text57
 10059  08A0                     __ptext57:	
 10060 ;; *************** function _PROTOCOL_Read_Lock *****************
 10061 ;; Defined at:
 10062 ;;		line 129 in file "protocol.c"
 10063 ;; Parameters:    Size  Location     Type
 10064 ;;		None
 10065 ;; Auto vars:     Size  Location     Type
 10066 ;;		None
 10067 ;; Return value:  Size  Location     Type
 10068 ;;                  1    wreg      unsigned char 
 10069 ;; Registers used:
 10070 ;;		wreg
 10071 ;; Tracked objects:
 10072 ;;		On entry : 0/0
 10073 ;;		On exit  : 0/0
 10074 ;;		Unchanged: 0/0
 10075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10077 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10079 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10080 ;;Total ram usage:        0 bytes
 10081 ;; Hardware stack levels used:    1
 10082 ;; This function calls:
 10083 ;;		Nothing
 10084 ;; This function is called by:
 10085 ;;		_I2C1_StatusCallback
 10086 ;; This function uses a non-reentrant model
 10087 ;;
 10088                           
 10089                           
 10090                           ;psect for function _PROTOCOL_Read_Lock
 10091  08A0                     _PROTOCOL_Read_Lock:	
 10092                           
 10093                           ;protocol.c: 130: return locked;
 10094                           
 10095                           ;incstack = 0
 10096                           ; Regs used in _PROTOCOL_Read_Lock: [wreg]
 10097  08A0  0020               	movlb	0	; select bank0
 10098  08A1  0862               	movf	_locked,w
 10099  08A2  0008               	return
 10100  08A3                     __end_of_PROTOCOL_Read_Lock:	
 10101                           
 10102                           	psect	text58
 10103  0912                     __ptext58:	
 10104 ;; *************** function _PROTOCOL_RST *****************
 10105 ;; Defined at:
 10106 ;;		line 285 in file "protocol.c"
 10107 ;; Parameters:    Size  Location     Type
 10108 ;;		None
 10109 ;; Auto vars:     Size  Location     Type
 10110 ;;		None
 10111 ;; Return value:  Size  Location     Type
 10112 ;;                  1    wreg      void 
 10113 ;; Registers used:
 10114 ;;		wreg, status,2, status,0
 10115 ;; Tracked objects:
 10116 ;;		On entry : 0/0
 10117 ;;		On exit  : 0/0
 10118 ;;		Unchanged: 0/0
 10119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10121 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10122 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10123 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10124 ;;Total ram usage:        1 bytes
 10125 ;; Hardware stack levels used:    1
 10126 ;; This function calls:
 10127 ;;		Nothing
 10128 ;; This function is called by:
 10129 ;;		_I2C1_StatusCallback
 10130 ;; This function uses a non-reentrant model
 10131 ;;
 10132                           
 10133                           
 10134                           ;psect for function _PROTOCOL_RST
 10135  0912                     _PROTOCOL_RST:	
 10136                           
 10137                           ;protocol.c: 286: if (readbuf.status != TLV_SET) {
 10138                           
 10139                           ;incstack = 0
 10140                           ; Regs used in _PROTOCOL_RST: [wreg+status,2+status,0]
 10141  0912  0021               	movlb	1	; select bank1
 10142  0913  0851               	movf	(_readbuf^(0+128)+3),w
 10143  0914  1903               	btfsc	3,2
 10144  0915  0008               	return
 10145                           
 10146                           ;protocol.c: 287: readbuf.buf_cnt = 0;
 10147  0916  01D2               	clrf	(_readbuf^(0+128)+4)
 10148                           
 10149                           ;protocol.c: 288: readbuf.status = COMPLETE;
 10150  0917  3003               	movlw	3
 10151  0918  00F0               	movwf	??_PROTOCOL_RST
 10152  0919  0870               	movf	??_PROTOCOL_RST,w
 10153  091A  00D1               	movwf	(_readbuf^(0+128)+3)
 10154  091B  0008               	return
 10155  091C                     __end_of_PROTOCOL_RST:	
 10156                           
 10157                           	psect	text59
 10158  08B3                     __ptext59:	
 10159 ;; *************** function _PROTOCOL_INV *****************
 10160 ;; Defined at:
 10161 ;;		line 108 in file "protocol.c"
 10162 ;; Parameters:    Size  Location     Type
 10163 ;;		None
 10164 ;; Auto vars:     Size  Location     Type
 10165 ;;		None
 10166 ;; Return value:  Size  Location     Type
 10167 ;;                  1    wreg      void 
 10168 ;; Registers used:
 10169 ;;		None
 10170 ;; Tracked objects:
 10171 ;;		On entry : 0/0
 10172 ;;		On exit  : 0/0
 10173 ;;		Unchanged: 0/0
 10174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10176 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10177 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10178 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10179 ;;Total ram usage:        0 bytes
 10180 ;; Hardware stack levels used:    1
 10181 ;; This function calls:
 10182 ;;		Nothing
 10183 ;; This function is called by:
 10184 ;;		_I2C1_StatusCallback
 10185 ;; This function uses a non-reentrant model
 10186 ;;
 10187                           
 10188                           
 10189                           ;psect for function _PROTOCOL_INV
 10190  08B3                     _PROTOCOL_INV:	
 10191                           
 10192                           ;protocol.c: 109: invoked = 1;
 10193                           
 10194                           ;incstack = 0
 10195                           ; Regs used in _PROTOCOL_INV: []
 10196  08B3  0020               	movlb	0	; select bank0
 10197  08B4  01E0               	clrf	_invoked
 10198  08B5  0AE0               	incf	_invoked,f
 10199  08B6  0008               	return
 10200  08B7                     __end_of_PROTOCOL_INV:	
 10201                           
 10202                           	psect	text60
 10203  089D                     __ptext60:	
 10204 ;; *************** function _PROTOCOL_I2C_WHO *****************
 10205 ;; Defined at:
 10206 ;;		line 205 in file "protocol.c"
 10207 ;; Parameters:    Size  Location     Type
 10208 ;;		None
 10209 ;; Auto vars:     Size  Location     Type
 10210 ;;		None
 10211 ;; Return value:  Size  Location     Type
 10212 ;;                  1    wreg      unsigned char 
 10213 ;; Registers used:
 10214 ;;		wreg
 10215 ;; Tracked objects:
 10216 ;;		On entry : 0/0
 10217 ;;		On exit  : 0/0
 10218 ;;		Unchanged: 0/0
 10219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10223 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10224 ;;Total ram usage:        0 bytes
 10225 ;; Hardware stack levels used:    1
 10226 ;; This function calls:
 10227 ;;		Nothing
 10228 ;; This function is called by:
 10229 ;;		_I2C1_StatusCallback
 10230 ;; This function uses a non-reentrant model
 10231 ;;
 10232                           
 10233                           
 10234                           ;psect for function _PROTOCOL_I2C_WHO
 10235  089D                     _PROTOCOL_I2C_WHO:	
 10236                           
 10237                           ;protocol.c: 206: return slave_address;
 10238                           
 10239                           ;incstack = 0
 10240                           ; Regs used in _PROTOCOL_I2C_WHO: [wreg]
 10241  089D  0020               	movlb	0	; select bank0
 10242  089E  0865               	movf	_slave_address,w
 10243  089F  0008               	return
 10244  08A0                     __end_of_PROTOCOL_I2C_WHO:	
 10245                           
 10246                           	psect	text61
 10247  0BDD                     __ptext61:	
 10248 ;; *************** function _PROTOCOL_I2C_SEN *****************
 10249 ;; Defined at:
 10250 ;;		line 404 in file "protocol.c"
 10251 ;; Parameters:    Size  Location     Type
 10252 ;;		None
 10253 ;; Auto vars:     Size  Location     Type
 10254 ;;  pdata           1    1[COMMON] PTR unsigned char 
 10255 ;;		 -> type_no_data(1), PROTOCOL_Send_uint8_t@pbuf(1), sendbuf(16), readbuf.length(1), 
 10256 ;;		 -> readbuf.type(1), readbuf(5), 
 10257 ;; Return value:  Size  Location     Type
 10258 ;;                  1    wreg      PTR unsigned char 
 10259 ;; Registers used:
 10260 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 10261 ;; Tracked objects:
 10262 ;;		On entry : 0/0
 10263 ;;		On exit  : 0/0
 10264 ;;		Unchanged: 0/0
 10265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10267 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10268 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10269 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10270 ;;Total ram usage:        2 bytes
 10271 ;; Hardware stack levels used:    1
 10272 ;; This function calls:
 10273 ;;		Nothing
 10274 ;; This function is called by:
 10275 ;;		_I2C1_StatusCallback
 10276 ;; This function uses a non-reentrant model
 10277 ;;
 10278                           
 10279                           
 10280                           ;psect for function _PROTOCOL_I2C_SEN
 10281  0BDD                     _PROTOCOL_I2C_SEN:	
 10282                           
 10283                           ;protocol.c: 405: uint8_t *pdata;
 10284                           ;protocol.c: 406: switch(readbuf.status) {
 10285                           
 10286                           ;incstack = 0
 10287                           ; Regs used in _PROTOCOL_I2C_SEN: [wreg-fsr0h+status,2+status,0]
 10288  0BDD  2C08               	goto	i1l3353
 10289  0BDE                     i1l3333:	
 10290                           ;protocol.c: 407: case TLV_SET:
 10291                           
 10292                           
 10293                           ;protocol.c: 408: pdata = &readbuf.type;
 10294  0BDE  30CE               	movlw	(low (_readbuf| 0))& (0+255)
 10295  0BDF  00F0               	movwf	??_PROTOCOL_I2C_SEN
 10296  0BE0  0870               	movf	??_PROTOCOL_I2C_SEN,w
 10297  0BE1  00F1               	movwf	PROTOCOL_I2C_SEN@pdata
 10298                           
 10299                           ;protocol.c: 409: readbuf.status = TYPE_SENT;
 10300  0BE2  0021               	movlb	1	; select bank1
 10301  0BE3  01D1               	clrf	(_readbuf^(0+128)+3)
 10302  0BE4  0AD1               	incf	(_readbuf^(0+128)+3),f
 10303                           
 10304                           ;protocol.c: 410: break;
 10305  0BE5  2C17               	goto	i1l3355
 10306  0BE6                     i1l3337:	
 10307                           ;protocol.c: 411: case TYPE_SENT:
 10308                           
 10309                           
 10310                           ;protocol.c: 412: pdata = &readbuf.length;
 10311  0BE6  30CF               	movlw	(low ((_readbuf| 0+1)))& (0+255)
 10312  0BE7  00F0               	movwf	??_PROTOCOL_I2C_SEN
 10313  0BE8  0870               	movf	??_PROTOCOL_I2C_SEN,w
 10314  0BE9  00F1               	movwf	PROTOCOL_I2C_SEN@pdata
 10315                           
 10316                           ;protocol.c: 413: readbuf.status = LENGTH_SENT;
 10317  0BEA  3002               	movlw	2
 10318  0BEB  2BFF               	goto	L6
 10319  0BEC                     i1l3339:	
 10320                           ;protocol.c: 415: case LENGTH_SENT:
 10321                           
 10322                           ;protocol.c: 414: break;
 10323                           
 10324                           
 10325                           ;protocol.c: 416: if (readbuf.buf_cnt < readbuf.length) {
 10326  0BEC  084F               	movf	(_readbuf^(0+128)+1),w
 10327  0BED  0252               	subwf	(_readbuf^(0+128)+4),w
 10328  0BEE  1803               	skipnc
 10329  0BEF  2BF9               	goto	i1l3343
 10330                           
 10331                           ;protocol.c: 417: pdata = &readbuf.pbuffer[readbuf.buf_cnt++];
 10332  0BF0  0850               	movf	(low ((_readbuf| 0+2)))^(0+128),w
 10333  0BF1  0752               	addwf	(_readbuf^(0+128)+4),w
 10334  0BF2  00F0               	movwf	??_PROTOCOL_I2C_SEN
 10335  0BF3  0870               	movf	??_PROTOCOL_I2C_SEN,w
 10336  0BF4  00F1               	movwf	PROTOCOL_I2C_SEN@pdata
 10337  0BF5  3001               	movlw	1
 10338  0BF6  00F0               	movwf	??_PROTOCOL_I2C_SEN
 10339  0BF7  0870               	movf	??_PROTOCOL_I2C_SEN,w
 10340  0BF8  07D2               	addwf	(_readbuf^(0+128)+4),f
 10341  0BF9                     i1l3343:	
 10342                           
 10343                           ;protocol.c: 418: }
 10344                           ;protocol.c: 419: if (readbuf.buf_cnt == readbuf.length) {
 10345  0BF9  0852               	movf	(_readbuf^(0+128)+4),w
 10346  0BFA  064F               	xorwf	(_readbuf^(0+128)+1),w
 10347  0BFB  1D03               	skipz
 10348  0BFC  2C17               	goto	i1l3355
 10349                           
 10350                           ;protocol.c: 420: readbuf.buf_cnt = 0;
 10351  0BFD  01D2               	clrf	(_readbuf^(0+128)+4)
 10352                           
 10353                           ;protocol.c: 421: readbuf.status = COMPLETE;
 10354  0BFE  3003               	movlw	3
 10355  0BFF                     L6:	
 10356  0BFF  00F0               	movwf	??_PROTOCOL_I2C_SEN
 10357  0C00  0870               	movf	??_PROTOCOL_I2C_SEN,w
 10358  0C01  00D1               	movwf	(_readbuf^(0+128)+3)
 10359                           
 10360                           ;protocol.c: 422: }
 10361                           ;protocol.c: 423: break;
 10362  0C02  2C17               	goto	i1l3355
 10363  0C03                     i1l3349:	
 10364                           ;protocol.c: 424: case COMPLETE:
 10365                           
 10366                           
 10367                           ;protocol.c: 425: pdata = &type_no_data;
 10368  0C03  30E4               	movlw	(low (_type_no_data| 0))& (0+255)
 10369  0C04  00F0               	movwf	??_PROTOCOL_I2C_SEN
 10370  0C05  0870               	movf	??_PROTOCOL_I2C_SEN,w
 10371  0C06  00F1               	movwf	PROTOCOL_I2C_SEN@pdata
 10372                           
 10373                           ;protocol.c: 427: }
 10374                           
 10375                           ;protocol.c: 426: break;
 10376  0C07  2C17               	goto	i1l3355
 10377  0C08                     i1l3353:	
 10378  0C08  0021               	movlb	1	; select bank1
 10379  0C09  0851               	movf	(_readbuf^(0+128)+3),w
 10380                           
 10381                           ; Switch size 1, requested type "space"
 10382                           ; Number of cases is 4, Range of values is 0 to 3
 10383                           ; switch strategies available:
 10384                           ; Name         Instructions Cycles
 10385                           ; simple_byte           13     7 (average)
 10386                           ; direct_byte           14     6 (fixed)
 10387                           ; jumptable            260     6 (fixed)
 10388                           ;	Chosen strategy is simple_byte
 10389  0C0A  3A00               	xorlw	0	; case 0
 10390  0C0B  1903               	skipnz
 10391  0C0C  2BDE               	goto	i1l3333
 10392  0C0D  3A01               	xorlw	1	; case 1
 10393  0C0E  1903               	skipnz
 10394  0C0F  2BE6               	goto	i1l3337
 10395  0C10  3A03               	xorlw	3	; case 2
 10396  0C11  1903               	skipnz
 10397  0C12  2BEC               	goto	i1l3339
 10398  0C13  3A01               	xorlw	1	; case 3
 10399  0C14  1903               	skipnz
 10400  0C15  2C03               	goto	i1l3349
 10401  0C16  2C17               	goto	i1l3355
 10402  0C17                     i1l3355:	
 10403                           
 10404                           ;protocol.c: 428: return pdata;
 10405  0C17  0871               	movf	PROTOCOL_I2C_SEN@pdata,w
 10406  0C18  0008               	return
 10407  0C19                     __end_of_PROTOCOL_I2C_SEN:	
 10408                           
 10409                           	psect	text62
 10410  089A                     __ptext62:	
 10411 ;; *************** function _PROTOCOL_I2C_GET *****************
 10412 ;; Defined at:
 10413 ;;		line 209 in file "protocol.c"
 10414 ;; Parameters:    Size  Location     Type
 10415 ;;		None
 10416 ;; Auto vars:     Size  Location     Type
 10417 ;;		None
 10418 ;; Return value:  Size  Location     Type
 10419 ;;                  1    wreg      unsigned char 
 10420 ;; Registers used:
 10421 ;;		wreg
 10422 ;; Tracked objects:
 10423 ;;		On entry : 0/0
 10424 ;;		On exit  : 0/0
 10425 ;;		Unchanged: 0/0
 10426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10428 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10430 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10431 ;;Total ram usage:        0 bytes
 10432 ;; Hardware stack levels used:    1
 10433 ;; This function calls:
 10434 ;;		Nothing
 10435 ;; This function is called by:
 10436 ;;		_I2C1_StatusCallback
 10437 ;; This function uses a non-reentrant model
 10438 ;;
 10439                           
 10440                           
 10441                           ;psect for function _PROTOCOL_I2C_GET
 10442  089A                     _PROTOCOL_I2C_GET:	
 10443                           
 10444                           ;protocol.c: 210: return value;
 10445                           
 10446                           ;incstack = 0
 10447                           ; Regs used in _PROTOCOL_I2C_GET: [wreg]
 10448  089A  0020               	movlb	0	; select bank0
 10449  089B  0863               	movf	_value,w
 10450  089C  0008               	return
 10451  089D                     __end_of_PROTOCOL_I2C_GET:	
 10452                           
 10453                           	psect	text63
 10454  08AF                     __ptext63:	
 10455 ;; *************** function _PROTOCOL_Backplane_Slave_Enabled *****************
 10456 ;; Defined at:
 10457 ;;		line 201 in file "protocol.c"
 10458 ;; Parameters:    Size  Location     Type
 10459 ;;		None
 10460 ;; Auto vars:     Size  Location     Type
 10461 ;;		None
 10462 ;; Return value:  Size  Location     Type
 10463 ;;                  1    wreg      void 
 10464 ;; Registers used:
 10465 ;;		None
 10466 ;; Tracked objects:
 10467 ;;		On entry : 0/0
 10468 ;;		On exit  : 0/0
 10469 ;;		Unchanged: 0/0
 10470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10474 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10475 ;;Total ram usage:        0 bytes
 10476 ;; Hardware stack levels used:    1
 10477 ;; This function calls:
 10478 ;;		Nothing
 10479 ;; This function is called by:
 10480 ;;		_I2C1_StatusCallback
 10481 ;; This function uses a non-reentrant model
 10482 ;;
 10483                           
 10484                           
 10485                           ;psect for function _PROTOCOL_Backplane_Slave_Enabled
 10486  08AF                     _PROTOCOL_Backplane_Slave_Enabled:	
 10487                           
 10488                           ;protocol.c: 202: backplane_slave_enabled = 1;
 10489                           
 10490                           ;incstack = 0
 10491                           ; Regs used in _PROTOCOL_Backplane_Slave_Enabled: []
 10492  08AF  0021               	movlb	1	; select bank1
 10493  08B0  01BB               	clrf	_backplane_slave_enabled^(0+128)
 10494  08B1  0ABB               	incf	_backplane_slave_enabled^(0+128),f
 10495  08B2  0008               	return
 10496  08B3                     __end_of_PROTOCOL_Backplane_Slave_Enabled:	
 10497                           
 10498                           	psect	text64
 10499  09B6                     __ptext64:	
 10500 ;; *************** function _EUSART_Transmit_ISR *****************
 10501 ;; Defined at:
 10502 ;;		line 165 in file "mcc_generated_files/eusart.c"
 10503 ;; Parameters:    Size  Location     Type
 10504 ;;		None
 10505 ;; Auto vars:     Size  Location     Type
 10506 ;;		None
 10507 ;; Return value:  Size  Location     Type
 10508 ;;                  1    wreg      void 
 10509 ;; Registers used:
 10510 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10511 ;; Tracked objects:
 10512 ;;		On entry : 0/0
 10513 ;;		On exit  : 0/0
 10514 ;;		Unchanged: 0/0
 10515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10517 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10518 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10519 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10520 ;;Total ram usage:        1 bytes
 10521 ;; Hardware stack levels used:    1
 10522 ;; This function calls:
 10523 ;;		Nothing
 10524 ;; This function is called by:
 10525 ;;		_INTERRUPT_InterruptManager
 10526 ;; This function uses a non-reentrant model
 10527 ;;
 10528                           
 10529                           
 10530                           ;psect for function _EUSART_Transmit_ISR
 10531  09B6                     _EUSART_Transmit_ISR:	
 10532                           
 10533                           ;eusart.c: 169: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
 10534                           
 10535                           ;incstack = 0
 10536                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 10537  09B6  3008               	movlw	8
 10538  09B7  027A               	subwf	_eusartTxBufferRemaining,w	;volatile
 10539  09B8  1803               	skipnc
 10540  09B9  29CE               	goto	i1l241
 10541                           
 10542                           ;eusart.c: 170: {
 10543                           ;eusart.c: 171: TXREG = eusartTxBuffer[eusartTxTail++];
 10544  09BA  087B               	movf	_eusartTxTail,w
 10545  09BB  3EA8               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
 10546  09BC  0086               	movwf	6
 10547  09BD  0187               	clrf	7
 10548  09BE  0801               	movf	1,w
 10549  09BF  0023               	movlb	3	; select bank3
 10550  09C0  009A               	movwf	26	;volatile
 10551  09C1  3001               	movlw	1
 10552  09C2  00F0               	movwf	??_EUSART_Transmit_ISR
 10553  09C3  0870               	movf	??_EUSART_Transmit_ISR,w
 10554  09C4  07FB               	addwf	_eusartTxTail,f	;volatile
 10555                           
 10556                           ;eusart.c: 172: if(sizeof(eusartTxBuffer) <= eusartTxTail)
 10557  09C5  3008               	movlw	8
 10558  09C6  027B               	subwf	_eusartTxTail,w	;volatile
 10559  09C7  1803               	btfsc	3,0
 10560                           
 10561                           ;eusart.c: 173: {
 10562                           ;eusart.c: 174: eusartTxTail = 0;
 10563  09C8  01FB               	clrf	_eusartTxTail	;volatile
 10564                           
 10565                           ;eusart.c: 175: }
 10566                           ;eusart.c: 176: eusartTxBufferRemaining++;
 10567  09C9  3001               	movlw	1
 10568  09CA  00F0               	movwf	??_EUSART_Transmit_ISR
 10569  09CB  0870               	movf	??_EUSART_Transmit_ISR,w
 10570  09CC  07FA               	addwf	_eusartTxBufferRemaining,f	;volatile
 10571                           
 10572                           ;eusart.c: 177: }
 10573  09CD  0008               	return
 10574  09CE                     i1l241:	
 10575                           
 10576                           ;eusart.c: 178: else
 10577                           ;eusart.c: 179: {
 10578                           ;eusart.c: 180: PIE1bits.TXIE = 0;
 10579  09CE  0021               	movlb	1	; select bank1
 10580  09CF  1211               	bcf	17,4	;volatile
 10581  09D0  0008               	return
 10582  09D1                     __end_of_EUSART_Transmit_ISR:	
 10583                           
 10584                           	psect	text65
 10585  099B                     __ptext65:	
 10586 ;; *************** function _EUSART_Receive_ISR *****************
 10587 ;; Defined at:
 10588 ;;		line 184 in file "mcc_generated_files/eusart.c"
 10589 ;; Parameters:    Size  Location     Type
 10590 ;;		None
 10591 ;; Auto vars:     Size  Location     Type
 10592 ;;		None
 10593 ;; Return value:  Size  Location     Type
 10594 ;;                  1    wreg      void 
 10595 ;; Registers used:
 10596 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10597 ;; Tracked objects:
 10598 ;;		On entry : 0/0
 10599 ;;		On exit  : 0/0
 10600 ;;		Unchanged: 0/0
 10601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10603 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10604 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10605 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10606 ;;Total ram usage:        1 bytes
 10607 ;; Hardware stack levels used:    1
 10608 ;; This function calls:
 10609 ;;		Nothing
 10610 ;; This function is called by:
 10611 ;;		_INTERRUPT_InterruptManager
 10612 ;; This function uses a non-reentrant model
 10613 ;;
 10614                           
 10615                           
 10616                           ;psect for function _EUSART_Receive_ISR
 10617  099B                     _EUSART_Receive_ISR:	
 10618                           
 10619                           ;eusart.c: 187: if(1 == RCSTAbits.OERR)
 10620                           
 10621                           ;incstack = 0
 10622                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 10623  099B  0023               	movlb	3	; select bank3
 10624  099C  1C9D               	btfss	29,1	;volatile
 10625  099D  29A0               	goto	i1l3777
 10626                           
 10627                           ;eusart.c: 188: {
 10628                           ;eusart.c: 191: RCSTAbits.CREN = 0;
 10629  099E  121D               	bcf	29,4	;volatile
 10630                           
 10631                           ;eusart.c: 192: RCSTAbits.CREN = 1;
 10632  099F  161D               	bsf	29,4	;volatile
 10633  09A0                     i1l3777:	
 10634                           
 10635                           ;eusart.c: 193: }
 10636                           ;eusart.c: 196: eusartRxBuffer[eusartRxHead++] = RCREG;
 10637  09A0  0819               	movf	25,w	;volatile
 10638  09A1  00F0               	movwf	??_EUSART_Receive_ISR
 10639  09A2  0020               	movlb	0	; select bank0
 10640  09A3  0869               	movf	_eusartRxHead,w
 10641  09A4  3EA0               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
 10642  09A5  0086               	movwf	6
 10643  09A6  0187               	clrf	7
 10644  09A7  0870               	movf	??_EUSART_Receive_ISR,w
 10645  09A8  0081               	movwf	1
 10646  09A9  3001               	movlw	1
 10647  09AA  00F0               	movwf	??_EUSART_Receive_ISR
 10648  09AB  0870               	movf	??_EUSART_Receive_ISR,w
 10649  09AC  07E9               	addwf	_eusartRxHead,f	;volatile
 10650                           
 10651                           ;eusart.c: 197: if(sizeof(eusartRxBuffer) <= eusartRxHead)
 10652  09AD  3008               	movlw	8
 10653  09AE  0269               	subwf	_eusartRxHead,w	;volatile
 10654  09AF  1803               	btfsc	3,0
 10655                           
 10656                           ;eusart.c: 198: {
 10657                           ;eusart.c: 199: eusartRxHead = 0;
 10658  09B0  01E9               	clrf	_eusartRxHead	;volatile
 10659                           
 10660                           ;eusart.c: 200: }
 10661                           ;eusart.c: 201: eusartRxCount++;
 10662  09B1  3001               	movlw	1
 10663  09B2  00F0               	movwf	??_EUSART_Receive_ISR
 10664  09B3  0870               	movf	??_EUSART_Receive_ISR,w
 10665  09B4  07E7               	addwf	_eusartRxCount,f	;volatile
 10666  09B5  0008               	return
 10667  09B6                     __end_of_EUSART_Receive_ISR:	
 10668  007E                     btemp	set	126	;btemp
 10669  007E                     int$flags	set	126
 10670  007E                     wtemp0	set	126


Data Sizes:
    Strings     186
    Constant    10
    Data        4
    BSS         177
    Persistent  8
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      14
    BANK0            80     60      80
    BANK1            80      0      69
    BANK2            80      0      48
    BANK3            80      0      48
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    PROTOCOL_Extension_Handler$0	PTR unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), I2C1_StatusCallback@ext_buf(BANK3[48]), 

    data	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    strncmp@s2	PTR const unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_15(CODE[4]), STR_14(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), 
		 -> STR_8(CODE[4]), STR_7(CODE[4]), STR_6(CODE[4]), STR_4(CODE[4]), 

    atoi@s	PTR const unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), 

    PROTOCOL_I2C_SEN@pdata	PTR unsigned char  size(1) Largest target is 16
		 -> type_no_data(BANK1[1]), PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK1[16]), readbuf.length(BANK1[1]), 
		 -> readbuf.type(BANK1[1]), readbuf(BANK1[5]), 

    PROTOCOL_I2C_Send_float@pbuffer	PTR float  size(1) Largest target is 9
		 -> PROTOCOL_Send_float@pbuf(BANK1[3]), inv_handler@values(BANK0[9]), 

    PROTOCOL_I2C_Set_TLV@pbuffer	PTR unsigned char  size(1) Largest target is 16
		 -> PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK1[16]), 

    PROTOCOL_EXT@char_buf	PTR unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), I2C1_StatusCallback@ext_buf(BANK3[48]), 

    PROTOCOL_Tick_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    PROTOCOL_Extension_Handler	PTR FTN(PTR unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    PROTOCOL_Loop_Func	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    PROTOCOL_Initialize@inv_handler	PTR void  size(2) Largest target is 1
		 -> inv_handler(), 

    PROTOCOL_Inv_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), inv_handler(), 

    PROTOCOL_Initialize@set_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Set_Handler	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@stop_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Stop_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@start_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Start_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@device_id	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_1(CODE[11]), 

    device_id_	PTR const unsigned char  size(2) Largest target is 8192
		 -> ROM(CODE[8192]), STR_1(CODE[11]), 

    S833$pbuffer	PTR unsigned char  size(1) Largest target is 16
		 -> PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK1[16]), 

    readbuf.pbuffer	PTR unsigned char  size(1) Largest target is 16
		 -> PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK1[16]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 8192
		 -> STR_10(CODE[4]), buf(BANK2[48]), STR_2(CODE[7]), ROM(CODE[8192]), 
		 -> printf@c(BANK0[1]), STR_1(CODE[11]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_48(CODE[10]), STR_47(CODE[9]), STR_46(CODE[10]), STR_45(CODE[9]), 
		 -> STR_44(CODE[4]), STR_43(CODE[4]), STR_42(CODE[4]), STR_41(CODE[4]), 
		 -> STR_40(CODE[4]), STR_39(CODE[4]), STR_38(CODE[4]), STR_37(CODE[4]), 
		 -> STR_36(CODE[14]), STR_35(CODE[9]), STR_34(CODE[10]), STR_33(CODE[9]), 
		 -> STR_32(CODE[10]), STR_31(CODE[9]), STR_30(CODE[7]), STR_29(CODE[4]), 
		 -> STR_28(CODE[4]), STR_27(CODE[9]), STR_26(CODE[4]), STR_25(CODE[4]), 
		 -> STR_24(CODE[10]), STR_23(CODE[4]), STR_22(CODE[4]), STR_21(CODE[8]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[9]), STR_17(CODE[6]), 
		 -> STR_16(CODE[10]), STR_13(CODE[10]), STR_9(CODE[10]), STR_5(CODE[10]), 
		 -> STR_3(CODE[5]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    sp__PROTOCOL_I2C_SEN	PTR unsigned char  size(1) Largest target is 16
		 -> type_no_data(BANK1[1]), PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK1[16]), readbuf.length(BANK1[1]), 
		 -> readbuf.type(BANK1[1]), readbuf(BANK1[5]), 

    I2C1_StatusCallback@pdata	PTR unsigned char  size(1) Largest target is 16
		 -> type_no_data(BANK1[1]), PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK1[16]), readbuf.length(BANK1[1]), 
		 -> readbuf.type(BANK1[1]), readbuf(BANK1[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_I2C1_ISR
    _I2C1_ISR->_I2C1_StatusCallback
    _I2C1_StatusCallback->i1_PROTOCOL_SAV
    i1_PROTOCOL_SAV->i1_DATAEE_WriteByte

Critical Paths under _main in BANK0

    _main->_PROTOCOL_Loop
    _PROTOCOL_Loop->_inv_handler
    _inv_handler->_get_accel
    _get_accel->___ftdiv
    ___lwtoft->___ftpack
    ___ftdiv->___ftadd
    ___ftadd->___ftpack
    _PROTOCOL_I2C_Send_float->___fttol
    _printf->___lwmod
    _putch->_EUSART_Write
    ___lwmod->___lwdiv
    _abs->___awmod
    ___fttol->___ftmul
    ___ftmul->___ftpack
    _atoi->___wmul
    _PROTOCOL_Write_Device_Address->_DATAEE_WriteByte
    _PROTOCOL_SAV->_DATAEE_WriteByte
    _PROTOCOL_Initialize->_DATAEE_ReadByte

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   27638
                                             59 BANK0      1     1      0
                     _ADC_Initialize
                  _EUSART_Initialize
                    _I2C1_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                _PROTOCOL_Initialize
                      _PROTOCOL_Loop
                    _TMR0_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (1) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_Initialize                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Loop                                        4     4      0   27100
                                             55 BANK0      4     4      0
                   Absolute function *
                        _EUSART_Read
                       _PROTOCOL_EXT
       _PROTOCOL_Read_Device_Address
                       _PROTOCOL_SAV
                       _PROTOCOL_SET
                       _PROTOCOL_STA
                       _PROTOCOL_STP
      _PROTOCOL_Write_Device_Address
            _TMR0_HasOverflowOccured
                               _atoi
                        _inv_handler *
                             _printf
                            _strncmp
 ---------------------------------------------------------------------------------
 (2) _strncmp                                              7     2      5    1670
                                              0 BANK0      7     2      5
 ---------------------------------------------------------------------------------
 (2) _inv_handler                                         10    10      0   19699
                                             45 BANK0     10    10      0
            _PROTOCOL_I2C_Send_float
                          _get_accel
 ---------------------------------------------------------------------------------
 (3) _get_accel                                            8     4      4    7841
                                             37 BANK0      8     4      4
            _ADC_GetConversionResult
               _ADC_IsConversionDone
                  _ADC_SelectChannel
                _ADC_StartConversion
                            ___ftadd
                            ___ftdiv
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (4) ___lwtoft                                             4     1      3    2156
                                              8 BANK0      4     1      3
            _ADC_GetConversionResult (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             16    10      6    2478
                                             21 BANK0     16    10      6
                            ___ftadd (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    3140
                                              8 BANK0     13     7      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) _ADC_StartConversion                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _ADC_SelectChannel                                    2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _ADC_IsConversionDone                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _ADC_GetConversionResult                              2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _PROTOCOL_I2C_Send_float                              6     5      1   11784
                                             38 BANK0      6     5      1
               _PROTOCOL_I2C_Set_TLV
                            ___awdiv
                            ___awmod
                             ___bmul
                            ___ftmul
                            ___fttol
                                _abs
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              26    20      6    4238
                                             14 BANK0     22    16      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                                _abs (ARG)
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      66
                                              2 BANK0      1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (4) _EUSART_Write                                         2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     287
                                              8 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     290
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (4) _abs                                                  4     2      2     526
                                              7 BANK0      4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             14    10      4     444
                                             24 BANK0     14    10      4
                             ___bmul (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             16    10      6    2780
                                              8 BANK0     16    10      6
                             ___bmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2070
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) ___bmul                                               4     3      1     221
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              7     3      4    1216
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4    1220
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (4) _PROTOCOL_I2C_Set_TLV                                 5     3      2     625
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 8     6      2     830
                                              6 BANK0      8     6      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     474
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _TMR0_HasOverflowOccured                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_Write_Device_Address                        2     2      0     240
                                              3 BANK0      2     2      0
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_STP                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_STA                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_SET                                         2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_SAV                                         1     1      0     196
                                              3 BANK0      1     1      0
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (3) _DATAEE_WriteByte                                     3     2      1     196
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_EXT                                         1     1      0      90
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Read                                          2     2      0      24
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Initialize                                 10     2      8     538
                                              1 BANK0     10     2      8
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (2) _DATAEE_ReadByte                                      1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2C1_Initialize                                      2     2      0       0
                                              0 BANK0      2     2      0
       _PROTOCOL_Read_Device_Address
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_Read_Device_Address                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Initialize                                    1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                           1     1      0     233
                                              9 COMMON     1     1      0
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
                           _I2C1_ISR
 ---------------------------------------------------------------------------------
 (8) _I2C1_ISR                                             2     2      0     233
                                              7 COMMON     2     2      0
                _I2C1_StatusCallback
 ---------------------------------------------------------------------------------
 (9) _I2C1_StatusCallback                                  3     3      0     187
                                              4 COMMON     3     3      0
   _PROTOCOL_Backplane_Slave_Enabled
                   _PROTOCOL_I2C_GET
                   _PROTOCOL_I2C_SEN
                   _PROTOCOL_I2C_WHO
                       _PROTOCOL_INV
                       _PROTOCOL_RST
                 _PROTOCOL_Read_Lock
                     i1_PROTOCOL_EXT
                     i1_PROTOCOL_SAV
                     i1_PROTOCOL_SET
                     i1_PROTOCOL_STA
                     i1_PROTOCOL_STP
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_STP                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_STA                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_SET                                      2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_SAV                                      1     1      0      94
                                              3 COMMON     1     1      0
                 i1_DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (11) i1_DATAEE_WriteByte                                  3     2      1      94
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_EXT                                      1     1      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_Read_Lock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_RST                                        1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_INV                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_I2C_WHO                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_I2C_SEN                                    2     2      0      26
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_I2C_GET                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_Backplane_Slave_Enabled                    0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _EUSART_Receive_ISR                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Initialize
   _EUSART_Initialize
   _I2C1_Initialize
     _PROTOCOL_Read_Device_Address
   _OSCILLATOR_Initialize
   _PIN_MANAGER_Initialize
   _PROTOCOL_Initialize
     _DATAEE_ReadByte
   _PROTOCOL_Loop
     Absolute function(Fake) *
     _EUSART_Read *
     _PROTOCOL_EXT *
     _PROTOCOL_Read_Device_Address *
     _PROTOCOL_SAV *
       _DATAEE_WriteByte
     _PROTOCOL_SET *
     _PROTOCOL_STA *
     _PROTOCOL_STP *
     _PROTOCOL_Write_Device_Address *
       _DATAEE_WriteByte
     _TMR0_HasOverflowOccured *
     _atoi *
       ___wmul
       _isdigit
     _inv_handler *
       _PROTOCOL_I2C_Send_float
         _PROTOCOL_I2C_Set_TLV
         ___awdiv
         ___awmod
         ___bmul
         ___ftmul
           ___bmul (ARG)
           ___ftpack (ARG)
         ___fttol
           ___bmul (ARG)
           ___ftmul (ARG)
             ___bmul (ARG)
             ___ftpack (ARG)
         _abs
           ___awmod (ARG)
         _printf
           ___awdiv (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _abs (ARG)
             ___awmod (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _EUSART_Write
       _get_accel
         _ADC_GetConversionResult
         _ADC_IsConversionDone
         _ADC_SelectChannel
         _ADC_StartConversion
         ___ftadd
           ___ftpack
         ___ftdiv
           ___ftadd (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___lwtoft
           _ADC_GetConversionResult (ARG)
           ___ftpack (ARG)
     _printf *
       ___awdiv (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _abs (ARG)
         ___awmod (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _EUSART_Write
     _strncmp *
   _TMR0_Initialize
   _WDT_Initialize

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR
   _I2C1_ISR
     _I2C1_StatusCallback
       _PROTOCOL_Backplane_Slave_Enabled
       _PROTOCOL_I2C_GET
       _PROTOCOL_I2C_SEN
       _PROTOCOL_I2C_WHO
       _PROTOCOL_INV
       _PROTOCOL_RST
       _PROTOCOL_Read_Lock
       i1_PROTOCOL_EXT
       i1_PROTOCOL_SAV
         i1_DATAEE_WriteByte
       i1_PROTOCOL_SET
       i1_PROTOCOL_STA
       i1_PROTOCOL_STP

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     3C      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      45       7       86.3%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      30       9       60.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      30      11       60.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     103      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     103      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Thu Sep 21 20:07:41 2017

                                         _i 005D                                           _j 005C  
                                         pc 0002                      __end_ofi1_PROTOCOL_EXT 0897  
                    __end_ofi1_PROTOCOL_SAV 0900                      __end_ofi1_PROTOCOL_SET 08DA  
                            ___bmul@product 0022                      __end_ofi1_PROTOCOL_STA 08BB  
                    __end_ofi1_PROTOCOL_STP 08A6             __end_of_TMR0_HasOverflowOccured 08C3  
                               __CFG_CP$OFF 0000                                ___awdiv@sign 0026  
                       ___wmul@multiplicand 0022                             _timer0ReloadVal 0066  
                              ___ftadd@exp1 0034                                ___ftadd@exp2 0033  
                               __CFG_LVP$ON 0000                                ___ftadd@sign 0032  
                                       l152 08DE                                         l229 0AD4  
                                       l326 0ABD                                         l504 023D  
                                       l452 008F                                         l480 013C  
                                       l464 015C                                         l633 023E  
                                       l487 01B2                                         l904 09F5  
                              __CFG_CPD$OFF 0000                                         _abs 0955  
                                       _buf 0120                                         _cnt 0064  
                              ___awmod@sign 0026                                __CFG_BORV$LO 0000  
                                       wreg 0009                                __CFG_IESO$ON 0000  
                              ?_EUSART_Read 0070                                ___ftdiv@cntr 003F  
                          __end_of_I2C1_ISR 0B12                                ___ftdiv@sign 0044  
                                      l1115 05DF                                        ?_abs 0027  
                                      l3011 0CFF                                        l1091 0D8C  
                                      l1092 0D94                                        l1084 0D79  
                                      l3101 057E                                        l1175 0E89  
                                      l3017 0D0A                                        l3121 05B5  
                                      l3113 0598                                        l3043 0D41  
                                      l3035 0D30                                        l3027 0D12  
                                      l3203 0F63                                        l3131 05D1  
                                      l3123 05BA             __end_of_PROTOCOL_I2C_Send_float 0540  
                                      l3029 0D1E                                        l3221 0FB4  
                                      l3141 0603                                        l3133 05DB  
                                      l3125 05BE                                        l3039 0D39  
                                      l3055 0C24                                        l3151 061E  
                                      l3119 05AB                                        l3081 0C5A  
                                      l3073 0C49                                        l3233 0FD0  
                                      l3225 0FBC                                        l3209 0F79  
                                      l3137 05F1                                        l3161 0EBA  
                                      l3067 0C31                                        l3059 0C2B  
                                      l3411 041D                                        l3091 0568  
                                      l3069 0C3D                                        l3077 0C52  
                                      l3237 0FD8                                        l3253 0E35  
                                      l3413 0429                                        l3181 0F11  
                                      l3271 0E65                                        l2703 0AC9  
                                      l3431 04A6                                        l3423 046B  
                                      l3095 056F                                        l3167 0ED0  
                              _tmr_overflow 00BD                                        l3281 0E8C  
                                      l3273 0E73                                        l2801 0B9D  
                                      l3425 0470                                        l3409 03CA  
                                      l3285 0E9A                                        l2813 0B19  
                                      l2717 0AE8                                        l3437 04E0  
                                      l3429 042D                                        l3189 0F2A  
                                      l3621 07F4                                        l2735 09EF  
                                      l2751 0D4F                                        l3279 0E80  
                                      l2815 0B25                                        l2823 0B3A  
                                      l2903 013E                                        l3439 0510  
                                      l2729 0953                                        l3633 0DB5  
                                      l3617 07DC                                        l3625 07BE  
                                      l3651 0DDA                                        l3635 0DAD  
                                      l2755 0D56                                        l2819 0B31  
                                      l2931 01A6                                        l2915 0176  
                                      l3387 0C68                                        l3627 07FD  
                                      l3661 0E17                                        l3653 0DDE  
                                      l3645 0DD2                                        l3637 0DBA  
                                      l2765 0D7E                                        l2757 0D60  
                                      l2941 01D1                                        l2925 0187  
                                      l2853 0094                                        l3559 0A46  
                                      l3655 0E07                                        l2767 0D86  
                                      l2759 0D65                                        l2791 0B82  
                                      l2919 0181                                        l2855 009D  
                                      l2847 008A                                        l3823 0265  
                                      l2953 01EA                                        l2881 00FD  
                                      l3825 0266                                        l2955 01EE  
                                      l2963 0203                                        l2947 01DB  
                                      l2939 01CE                                        l2891 011B  
                                      l2875 00ED                                        l2867 00D9  
                                      l2859 00AA                                        l2971 006E  
                                      l3835 0276                                        l2797 0B94  
                                      l2789 0B76                                        l2885 010A  
                                      l2991 0977                                        l2959 01FB  
                                      l2895 0128                                        l2879 00EF  
                                      l3863 02ED                                        l3855 02AF  
                                      l2969 0208                                        l2897 0133  
                                      l2889 010C                                        l3881 036E  
                                      l3873 032B                                        l2995 097D  
                                      l3867 0306                                        l3859 02D4  
                                      l3893 03BC                                        l3877 034A  
                                      l3887 0391                                        STR_1 064E  
                                      STR_2 06B8                                        STR_3 06C5  
                                      STR_4 06E6                                        STR_5 0677  
                                      STR_6 06F6                                        STR_7 06DE  
                                      STR_8 06EA                                        STR_9 0681  
                                      u2205 0D74                                        _LATA 010C  
                                      _LATB 010D                                        u2135 09F6  
                                      u3015 05AC                                        _LATC 010E  
                                      u2145 09FB                                        u2225 0D81  
                                      u2315 0B83                                        u2325 0B8D  
                                      u3045 05BF                                        u2335 0B95  
                                      u2265 0D9B                                        u2185 0D5B  
                                      u3305 0FDF                                        u3225 0F85  
                                      u3145 0EE2                                        u3235 0F95  
                                      u3075 05D2                                        u3155 0EF2  
                                      u2365 0B1C                                        u2525 019C  
                                      u3165 0F12                                        u3255 0FBD  
                                      u3335 0E3C                                        u2295 0B79  
                                      u3175 0F21                                        u3265 0FC3  
                                      u2385 0B2B                                        u2465 0103  
                                      u3505 0466                                        u3185 0F2B  
                                      u4067 0A89                                        u2395 0B32  
                                      u3365 0E66                                        u2565 01C1  
                                      u2735 0D15                                        u3295 0FD9  
                                      u3535 04DB                                        u2755 0D1F  
                                      u2835 0C34                                        u3395 0E81  
                                      u2765 0D29                                        u2775 0D31  
                                      u2855 0C43                                        u2865 0C4A  
                                      i1l64 0AFF                                        u2985 0599  
                                      i1l86 06FC                                        _PLLR 04D6  
                                      _TMR0 0015                                        _WPUA 020C  
                                      _WPUB 020D                                        _WPUC 020E  
                              __CFG_WRT$OFF 0000                               __CFG_FCMEN$ON 0000  
                                      abs@a 0027                                        _data 00BA  
                                      _atoi 0DAB                                        _main 0B3F  
                              ___ftpack@arg 0020                                ___ftpack@exp 0023  
                                      fsr0h 0005                                        fsr1h 0007  
                                      indf0 0000                                        fsr0l 0004  
                                      indf1 0001                                        fsr1l 0006  
                                      btemp 007E                               __CFG_BOREN$ON 0000  
                                      start 0030                           ___bmul@multiplier 0023  
                             __CFG_MCLRE$ON 0000                                ___ftmul@cntr 0036  
                              ___ftmul@sign 0037                         _I2C1_StatusCallback 06FA  
                              ___fttol@exp1 0045                                       ??_abs 0029  
                           ?i1_PROTOCOL_EXT 0070                             ?i1_PROTOCOL_SAV 0070  
                           ?i1_PROTOCOL_SET 0070                   __size_of_DATAEE_WriteByte 0023  
                           ?i1_PROTOCOL_STA 0070                                ___fttol@lval 0041  
                           ?i1_PROTOCOL_STP 0070                     __end_of_TMR0_Initialize 0937  
                             __CFG_PLLEN$ON 0000                               ?_EUSART_Write 0070  
            __size_of_OSCILLATOR_Initialize 0007               __end_of_OSCILLATOR_Initialize 08E1  
                                     ?_atoi 0026                                       ?_main 0070  
                           __end_of___awdiv 0D46                             __end_of___ftadd 0636  
                                     STR_10 06E2                                       STR_11 06F2  
                                     STR_12 06EE                                       STR_20 06CA  
                                     STR_13 0663                                       STR_14 06DA  
                                     STR_22 06CE                                       STR_30 06B1  
                                     STR_15 06D6                                       STR_24 0695  
                                     STR_32 068B                                       STR_16 0659  
                                     STR_17 06BF                               __CFG_WDTE$OFF 0000  
                                     STR_18 06A8                                       STR_34 066D  
                                     STR_19 06D2                                       STR_35 069F  
                                     STR_36 0640                             __end_of___awmod 0C5F  
                                     STR_45 068C                                       STR_46 068B  
                                     STR_47 066E                                       STR_48 066D  
                           __end_of___ftdiv 0F4C                             __end_of___ftmul 1000  
                           ___awdiv@divisor 0020                             __end_of___fttol 0EA3  
                           __end_of___lwdiv 0BA2                                       i1l103 071F  
                                     i1l124 07BD                                       i1l241 09CE  
                                     i1l173 0015                                       i1l326 0A1C  
                                     i1l175 0021                             __end_of___lwmod 0B3F  
                                     i1l179 002B                             ___awdiv@counter 0025  
                PROTOCOL_I2C_Set_TLV@length 0020                                       _RCREG 0199  
                                     _RCSTA 019D                                       _TRISA 008C  
                                     _TRISB 008D                                       _TRISC 008E  
                                     _TXREG 019A                                       _TXSTA 019E  
          __size_of_ADC_GetConversionResult 0009                __size_of_PROTOCOL_Initialize 004E  
                PROTOCOL_I2C_Set_TLV@status 0024                           ??_I2C1_Initialize 0020  
                      ?_I2C1_StatusCallback 0070                             _DATAEE_ReadByte 091C  
           ??_PROTOCOL_Write_Device_Address 0023                             __end_of_dpowers 0640  
                            _WDT_Initialize 08C3              PROTOCOL_Initialize@inv_handler 0026  
                           __end_of_isdigit 0955                                ?_inv_handler 0070  
                             ___ftpack@sign 0024                                       _value 0063  
                                     atoi@a 002B                                       atoi@s 002D  
                                     _putch 08C7                                       pclath 000A  
                    ??_PROTOCOL_I2C_Set_TLV 0022                                       status 0003  
                                     wtemp0 007E                             __end_of_strncmp 0800  
                           __initialization 0032                                __end_of_atoi 0E1C  
                              __end_of_main 0B6D                              ??_EUSART_Write 0020  
               ?_INTERRUPT_InterruptManager 0070            PROTOCOL_Initialize@start_handler 0023  
                                    ??_atoi 0028                                      ??_main 005B  
                             ___fttol@sign1 0040                           inv_handler@values 004E  
                        _PROTOCOL_Read_Lock 08A0                      __end_of_WDT_Initialize 08C7  
                     ??_I2C1_StatusCallback 0074                  __end_ofi1_DATAEE_WriteByte 0A25  
             __size_of_ADC_IsConversionDone 0007                                      _ADCON0 009D  
                                    _ADCON1 009E                                      i1S3961 0800  
                                    _ADRESH 009C                                      _EEADRH 0192  
                                    _ADRESL 009B                                      _EEADRL 0191  
                                    _EEDATH 0194                                      _EEDATL 0193  
                                    _EECON2 0196                            ___awdiv@dividend 0022  
                                    _ANSELA 018C                                      ?_putch 0070  
                                    _ANSELB 018D                                      _ANSELC 018E  
                          __end_of___ftpack 0DAB                         ?_PROTOCOL_Read_Lock 0070  
                        _PROTOCOL_Loop_Func 00B8                                      i1l3333 0BDE  
                                    i1l3343 0BF9                                      i1l3337 0BE6  
                                    i1l3353 0C08                                      i1l3521 0791  
                                    i1l3513 0778                                      i1l3339 0BEC  
                                    i1l3355 0C17                                      i1l3523 0796  
                                    i1l3531 07A7                                      i1l3349 0C03  
                                    i1l3509 0775                                      i1l3517 0782  
                                    i1l3461 0700                                      i1l3527 07A2  
                                    i1l3471 0713                                      i1l3519 078E  
                                    i1l3463 0706                                      i1l3535 07B3  
                                    i1l3473 0717                                      i1l3481 0724  
                                    i1l3475 071B                                      i1l3467 070B  
                                    i1l3493 074F                                      i1l3477 0722  
                                    i1l3469 070F                                      i1l3485 073C  
                                    i1l3487 0745                                      i1l3499 075A  
                                    i1l3695 0B06                                      i1l3777 09A0  
                                    i1l3697 0B08                                      i1l3689 0AFD  
                          __end_of___lwtoft 099B                                      _OSCCON 0099  
          __size_of_TMR0_HasOverflowOccured 0004                                      _TMR0IF 005A  
                                    _SPBRGH 019C                                      _SPBRGL 019B  
                                    _WDTCON 0097              PROTOCOL_Initialize@set_handler 0025  
                            __CFG_PWRTE$OFF 0000                   PROTOCOL_Initialize@scaler 0028  
                                    ___bmul 0974                                      ___wmul 09EC  
                                 ??___awdiv 0024                                   ??___ftadd 002E  
                            __CFG_STVREN$ON 0000                                   ??___awmod 0024  
                                 ??___ftdiv 003B                                   ??___ftmul 002E  
                                 ??___fttol 003C                                   ??___lwdiv 0024  
                      ??_PROTOCOL_Read_Lock 0070                                   ??___lwmod 002C  
                              _type_no_data 00E4                         _EUSART_Transmit_ISR 09B6  
                          ?_TMR0_Initialize 0070                                      _locked 0062  
                                 ?_I2C1_ISR 0070                            ___awdiv@quotient 0027  
                           ___awmod@divisor 0020            __size_of_PROTOCOL_I2C_Send_float 017F  
                           ___awmod@counter 0025                                      _printf 0069  
                   __end_of_DATAEE_ReadByte 0929                       ___ftmul@f3_as_product 0033  
                              __pdataCOMMON 007D                                   ??_isdigit 0020  
                  __end_of_PROTOCOL_I2C_GET 089D                    __end_of_PROTOCOL_I2C_SEN 0C19  
                  __end_of_PROTOCOL_I2C_WHO 08A0                             ?_WDT_Initialize 0070  
             i1DATAEE_WriteByte@GIEBitValue 0072                                   ??_strncmp 0025  
                 PROTOCOL_Send_uint8_t@pbuf 00DB                        ?_EUSART_Transmit_ISR 0070  
                      __size_of_EUSART_Read 001F                     __end_of__initialization 0065  
                                ___ftadd@f1 0028                                  ___ftadd@f2 002B  
                                ___ftdiv@f1 0038                                  ___ftdiv@f2 0035  
                                ___ftdiv@f3 0040                         ___bmul@multiplicand 0020  
                                ___ftmul@f1 0028                                  ___ftmul@f2 002B  
                                ___fttol@f1 0038                __size_of_ADC_StartConversion 0003  
                            __pcstackCOMMON 0070                                __pidataBANK0 0002  
                              __pidataBANK1 0898                            _DATAEE_WriteByte 0AA4  
                             __end_of_putch 08CD                                  ??_I2C1_ISR 0077  
                     __end_of_PROTOCOL_Loop 03C1                                  ___lwtoft@c 0028  
                   _ADC_GetConversionResult 0909                              _OPTION_REGbits 0095  
                        __size_of_get_accel 0047                     PROTOCOL_Send_float@pbuf 00D3  
                     ??_EUSART_Transmit_ISR 0070                                     ??_putch 0022  
                                __pbssBANK0 005C                                  __pbssBANK1 00A0  
                                __pbssBANK2 0120                                  __pbssBANK3 01A0  
                    i1DATAEE_WriteByte@bAdd 0071                        __end_of_EUSART_Write 0AEB  
                      __size_of_inv_handler 003B                 __size_of_EUSART_Receive_ISR 001B  
                          ??i1_PROTOCOL_EXT 0070                            ??i1_PROTOCOL_SAV 0073  
                          ??i1_PROTOCOL_SET 0070                            ??i1_PROTOCOL_STA 0070  
                          ??i1_PROTOCOL_STP 0070                         _PROTOCOL_Initialize 0CA6  
                                __pmaintext 0B3F                                     ?___bmul 0020  
                                   ?___wmul 0020                                  __pintentry 0004  
                           _I2C1_Initialize 0A83                                     _BAUDCON 019F  
                                _device_id_ 00DC                                   ?___ftpack 0020  
                                   _APFCON0 011D                                     _APFCON1 011E  
                                   ?_printf 002E                     __size_of_ADC_Initialize 0008  
                I2C1_StatusCallback@ext_buf 01A0                  I2C1_StatusCallback@ext_cnt 006A  
                I2C1_StatusCallback@ext_len 006B                                   ?___lwtoft 0028  
                          ?_DATAEE_ReadByte 0070                               _eusartRxCount 0067  
         I2C1_StatusCallback@slaveWriteType 006D                  PROTOCOL_Send_uint16_t@pbuf 00D8  
                      ?_PROTOCOL_Initialize 0021                                     _OSCTUNE 0098  
                                   _SSP1ADD 0212                                     _SSP1BUF 0211  
                                   _SSP1MSK 0213                      _PROTOCOL_Start_Handler 00E2  
                   _TMR0_HasOverflowOccured 08BF                        DATAEE_WriteByte@bAdd 0021  
                         __end_of_get_accel 0CA6                             __size_of___bmul 0012  
                                   ___awdiv 0CF4                                     ___ftadd 0540  
                                   ___awmod 0C19                               ?_PROTOCOL_INV 0070  
                             ?_PROTOCOL_EXT 0070                               ?_PROTOCOL_SAV 0070  
                                   ___ftdiv 0EA3                               ?_PROTOCOL_SET 0070  
                             ?_PROTOCOL_STA 0070                               ?_PROTOCOL_RST 0070  
                             ?_PROTOCOL_STP 0070                             __size_of___wmul 001C  
                                   ___ftmul 0F4C                                     ___fttol 0E1C  
                                   ___lwdiv 0B6D                                     ___lwmod 0B12  
                   _PROTOCOL_I2C_Send_float 03C1                   ??_ADC_GetConversionResult 0022  
                                ??___ftpack 0025                                     __ptext1 08C3  
                                   __ptext2 0929                                     __ptext3 023E  
                                   __ptext4 07BE                                     __ptext5 0BA2  
                                   __ptext6 0C5F                                     __ptext7 0986  
                                   __ptext8 0EA3                                     __ptext9 0540  
                           __size_of_printf 01D5                                  ??___lwtoft 002B  
                                   _dpowers 0636                       _OSCILLATOR_Initialize 08DA  
                              __size_of_abs 000F  PROTOCOL_Write_Device_Address@device_id_i2c 0024  
                     ??_PROTOCOL_Initialize 0029                                     _isdigit 0946  
                                   _readbuf 00CE                                     _sec_cnt 005F  
                          ___awmod@dividend 0022                                     _invoked 0060  
                  ??_PIN_MANAGER_Initialize 0020                                     _sendbuf 00BE  
                                   _tmr_cnt 005E                                     clrloop0 08CE  
                                   _running 0061                                     _strncmp 07BE  
                      end_of_initialization 0065                  _PROTOCOL_Extension_Handler 00B6  
             __size_of_PROTOCOL_I2C_Set_TLV 0020                          i1_DATAEE_WriteByte 0A08  
                         _EUSART_Initialize 09D1                     __end_of_I2C1_Initialize 0AA4  
              __end_of_ADC_IsConversionDone 08EF                          ?_EUSART_Initialize 0070  
                     _PROTOCOL_Tick_Handler 00B2                                   _RCSTAbits 019D  
                                   printf@c 0043                                     printf@f 002E  
                            ??_PROTOCOL_INV 0070                              ??_PROTOCOL_EXT 0020  
                            ??_PROTOCOL_SAV 0023                              ??_PROTOCOL_SET 0020  
                            ??_PROTOCOL_STA 0020                              ??_PROTOCOL_RST 0070  
                            ??_PROTOCOL_STP 0020                         ?i1_DATAEE_WriteByte 0070  
             PROTOCOL_I2C_Send_float@length 0049                                __pstringtext 0636  
                       ??_EUSART_Initialize 0020                 __end_of_I2C1_StatusCallback 07BE  
                          ??_WDT_Initialize 0020                           __size_of_I2C1_ISR 0027  
                          __CFG_FOSC$INTOSC 0000                           ?_PROTOCOL_I2C_GET 0070  
                         ?_PROTOCOL_I2C_SEN 0070                           ?_PROTOCOL_I2C_WHO 0070  
                     __size_of_EUSART_Write 0024                         _ADC_StartConversion 08AC  
                 ??_TMR0_HasOverflowOccured 0020                          ??_PROTOCOL_I2C_GET 0070  
                        ??_PROTOCOL_I2C_SEN 0070                          ??_PROTOCOL_I2C_WHO 0070  
                      ??i1_DATAEE_WriteByte 0071                                  _tmr_scaler 006E  
                  __end_of_DATAEE_WriteByte 0AC7                   __end_of_EUSART_Initialize 09EC  
                               ___ftdiv@exp 0043                                 printf@width 0041  
                      i1PROTOCOL_SET@value_ 0071                                 ___ftmul@exp 0032  
                      ?_ADC_StartConversion 0070                   ??_PROTOCOL_I2C_Send_float 0047  
                  I2C1_StatusCallback@pdata 0076                              __end_of___bmul 0986  
               __size_of_PROTOCOL_Read_Lock 0003                              __end_of___wmul 0A08  
                             __pidataCOMMON 0899                                _EUSART_Write 0AC7  
                            _ADC_Initialize 08EF                      ?_OSCILLATOR_Initialize 0070  
                            __end_of_printf 023E                              PROTOCOL_Loop@c 0059  
                       start_initialization 0032                    __size_of_TMR0_Initialize 000E  
           __size_of_PIN_MANAGER_Initialize 001F                                 __end_of_abs 0964  
                             ??_EUSART_Read 0020                                 putch@txData 0022  
                       DATAEE_ReadByte@bAdd 0020                            ?_I2C1_Initialize 0070  
                     ??_ADC_StartConversion 0020                                    ??___bmul 0021  
                          I2C1_ISR@i2c_data 0078                                    ??___wmul 0024  
                  PROTOCOL_Send_int8_t@pbuf 00DA        __end_of_PROTOCOL_Read_Device_Address 08A9  
     __size_of_PROTOCOL_Read_Device_Address 0003                _PROTOCOL_Read_Device_Address 08A6  
                    __end_of_ADC_Initialize 08F7                                 __pdataBANK0 006E  
                               __pdataBANK1 00E4                                    ??_printf 0034  
                         __size_of___ftpack 0065                     i1DATAEE_WriteByte@bData 0070  
               __end_of_EUSART_Transmit_ISR 09D1                                 __pbssCOMMON 007A  
                                 ___latbits 0002                           __size_of___lwtoft 0015  
                             __pcstackBANK0 0020            I2C1_StatusCallback@i2c_bus_state 0075  
                      _ADC_IsConversionDone 08E8                        _PROTOCOL_Inv_Handler 00B4  
                              _isdigit$1244 0020                               ??_inv_handler 004D  
                      __end_of_PROTOCOL_INV 08B7                        __end_of_PROTOCOL_EXT 0898  
                      __end_of_PROTOCOL_SAV 0909                        __end_of_PROTOCOL_SET 08E8  
                      __end_of_PROTOCOL_STA 08BF                        __end_of_PROTOCOL_RST 091C  
                      __end_of_PROTOCOL_STP 08AC                  __end_of_EUSART_Receive_ISR 09B6  
           PROTOCOL_Initialize@stop_handler 0024                  __size_of_EUSART_Initialize 001B  
                       __end_of_EUSART_Read 0A63                      __size_of_PROTOCOL_Loop 0183  
                                 __pnvBANK1 00DC       __end_of_PROTOCOL_Write_Device_Address 0946  
    __size_of_PROTOCOL_Write_Device_Address 000F               _PROTOCOL_Write_Device_Address 0937  
                          ___lwdiv@dividend 0022                      _PIN_MANAGER_Initialize 0A25  
                      EUSART_Read@readValue 0021                           _ADC_SelectChannel 0964  
                                  ?___awdiv 0020                                    ?___ftadd 0028  
                                  ?___awmod 0020                                    ?___ftdiv 0035  
                                  ?___ftmul 0028                                    ?___fttol 0038  
                                  ?___lwdiv 0020                                    ?___lwmod 0028  
                           ?_ADC_Initialize 0070                                _eusartRxHead 0069  
                        ?_ADC_SelectChannel 0070                                   _get_accel 0C5F  
                              _eusartTxHead 007C                                _eusartRxTail 0068  
                              _eusartTxTail 007B                                    _I2C1_ISR 0AEB  
             ?_PROTOCOL_Read_Device_Address 0070                ??_INTERRUPT_InterruptManager 0079  
                 PROTOCOL_Send_int16_t@pbuf 00D6                                   __pswtext1 0800  
                   _eusartTxBufferRemaining 007A                                    ?_isdigit 0070  
                       ??_ADC_SelectChannel 0020                       ?_ADC_IsConversionDone 0070  
                          ___lwdiv@quotient 0025                    __size_of_DATAEE_ReadByte 000D  
                                  ?_strncmp 0020                              __size_of_putch 0006  
                            _eusartRxBuffer 00A0                           ??_TMR0_Initialize 0020  
                            _eusartTxBuffer 00A8                              ___wmul@product 0024  
                                  _LATCbits 010E                        _PROTOCOL_Set_Handler 00DE  
                                 clear_ram0 08CD                         __end_of_inv_handler 0BDD  
                                  _PIE1bits 0091                   __end_of_ADC_SelectChannel 0974  
                     PROTOCOL_I2C_SEN@pdata 0071                    PROTOCOL_I2C_Set_TLV@type 0023  
       __size_of_INTERRUPT_InterruptManager 002C                                    _PIR1bits 0011  
                                  _SSP1CON1 0215                                    _SSP1CON2 0216  
                                  _SSP1CON3 0217                PROTOCOL_Initialize@device_id 0021  
                                  _SSP1STAT 0214                              _readbuf_status 00BC  
                     _PROTOCOL_Stop_Handler 00E0                                  ?_get_accel 0045  
               __end_of_PROTOCOL_Initialize 0CF4                                  _ADCON0bits 009D  
                   __size_ofi1_PROTOCOL_EXT 0001                     __size_ofi1_PROTOCOL_SAV 0009  
                   __size_ofi1_PROTOCOL_SET 0007                     __size_ofi1_PROTOCOL_STA 0004  
                   __size_ofi1_PROTOCOL_STP 0003                           ___wmul@multiplier 0020  
              __end_of_PROTOCOL_I2C_Set_TLV 0A83                               _PROTOCOL_Loop 023E  
                  ADC_SelectChannel@channel 0021                                  printf@flag 0040  
                                printf@prec 0038                       DATAEE_WriteByte@bData 0020  
                  PROTOCOL_I2C_Send_float@v 004A                     I2C1_StatusCallback@next 006C  
                               _EUSART_Read 0A44                 PROTOCOL_I2C_Set_TLV@pbuffer 0021  
                         ?_DATAEE_WriteByte 0020    __end_of_PROTOCOL_Backplane_Slave_Enabled 08B3  
 __size_of_PROTOCOL_Backplane_Slave_Enabled 0004          ??_PROTOCOL_Backplane_Slave_Enabled 0070  
         ?_PROTOCOL_Backplane_Slave_Enabled 0070            _PROTOCOL_Backplane_Slave_Enabled 08AF  
                        ??_DATAEE_WriteByte 0021                               _slave_address 0065  
                                _EECON1bits 0195                          PROTOCOL_SET@value_ 0021  
                 __size_of_PROTOCOL_I2C_GET 0003                   __size_of_PROTOCOL_I2C_SEN 003C  
                 __size_of_PROTOCOL_I2C_WHO 0003                    ?_ADC_GetConversionResult 0020  
                   ??_OSCILLATOR_Initialize 0020              ?_PROTOCOL_Write_Device_Address 0070  
                          __size_of___awdiv 0052                            __size_of___ftadd 00F6  
                          __size_of___awmod 0046                            __size_of___ftdiv 00A9  
                          __size_of___ftmul 00B4                            __size_of___fttol 0087  
                          __size_of___lwdiv 0035                            __size_of___lwmod 002D  
                                  ___ftpack 0D46                              ?_PROTOCOL_Loop 0070  
                                  ___lwtoft 0986                      ??_ADC_IsConversionDone 0020  
                     __size_of_PROTOCOL_INV 0004                       __size_of_PROTOCOL_EXT 0001  
                     __size_of_PROTOCOL_SAV 0009                       __size_of_PROTOCOL_SET 0007  
                     __size_of_PROTOCOL_STA 0004                       __size_of_PROTOCOL_RST 000A  
                     __size_of_PROTOCOL_STP 0003              ??_PROTOCOL_Read_Device_Address 0020  
                          __size_of_isdigit 000F                             ___lwdiv@divisor 0020  
              __size_of_I2C1_StatusCallback 00C4                             ___lwdiv@counter 0027  
                                  __ptext10 08AC                                    __ptext11 0964  
                                  __ptext20 0955                                    __ptext12 08E8  
                                  __ptext21 0E1C                                    __ptext13 0909  
                                  __ptext30 09EC                                    __ptext22 0F4C  
                                  __ptext14 03C1                                    __ptext31 08BF  
                                  __ptext23 0D46                                    __ptext15 0069  
                                  __ptext40 0CA6                                    __ptext32 0937  
                                  __ptext24 0974                                    __ptext16 08C7  
                                  __ptext41 091C                                    __ptext33 08A9  
                                  __ptext25 0C19                                    __ptext17 0AC7  
                                  __ptext50 06FA                                    __ptext42 0A25  
                                  __ptext34 08BB                                    __ptext26 0CF4  
                                  __ptext18 0B12                                    __ptext51 08A3  
                                  __ptext43 08DA                                    __ptext35 08E1  
                                  __ptext27 0A63                                    __ptext19 0B6D  
                                  __ptext60 089D                                    __ptext52 08B7  
                                  __ptext44 0A83                                    __ptext36 0900  
                                  __ptext28 0DAB                                    __ptext61 0BDD  
                                  __ptext53 08D3                                    __ptext45 08A6  
                                  __ptext37 0AA4                                    __ptext29 0946  
                                  __ptext62 089A                                    __ptext54 08F7  
                                  __ptext46 09D1                                    __ptext38 0897  
                                  __ptext63 08AF                                    __ptext55 0A08  
                                  __ptext47 08EF                                    __ptext39 0A44  
                                  __ptext64 09B6                                    __ptext56 0896  
                                  __ptext65 099B                                    __ptext57 08A0  
                                  __ptext49 0AEB                                    __ptext58 0912  
                                  __ptext59 08B3                                _SSP1CON1bits 0215  
                              _SSP1CON2bits 0216                                    _float100 00B0  
               __size_ofi1_DATAEE_WriteByte 001D                                 _inv_handler 0BA2  
               DATAEE_WriteByte@GIEBitValue 0022                            __size_of_strncmp 0042  
                             __size_of_atoi 0071                               __size_of_main 002E  
                                strncmp@len 0023                           ??_DATAEE_ReadByte 0020  
                __size_of_ADC_SelectChannel 0010                     _BACKPLANE_SLAVE_ADDRESS 006F  
                __end_of_PROTOCOL_Read_Lock 08A3                                    int$flags 007E  
                                  atoi@sign 002A                                _PROTOCOL_INV 08B3  
                              _PROTOCOL_EXT 0897                                _PROTOCOL_SAV 0900  
                              _PROTOCOL_SET 08E1                                _PROTOCOL_STA 08BB  
                              _PROTOCOL_RST 0912                                _PROTOCOL_STP 08A9  
                               ??_get_accel 0049          __end_of_INTERRUPT_InterruptManager 0030  
                _INTERRUPT_InterruptManager 0004                                   printf@len 003E  
                                 printf@val 003C                                _SSP1STATbits 0214  
                  ?_TMR0_HasOverflowOccured 0070                          _I2C_slaveWriteData 007D  
                                _INTCONbits 000B                                    isdigit@c 0021  
                   __size_of_WDT_Initialize 0004                                    intlevel1 0000  
               __end_of_ADC_StartConversion 08AF                            ___lwmod@dividend 002A  
                   ?_PIN_MANAGER_Initialize 0070             __end_of_ADC_GetConversionResult 0912  
                  ?_PROTOCOL_I2C_Send_float 0046                           __CFG_CLKOUTEN$OFF 0000  
                      _PROTOCOL_I2C_Set_TLV 0A63                                   strncmp@s1 0020  
                                 strncmp@s2 0022                            ??_ADC_Initialize 0020  
                   _backplane_slave_enabled 00BB                                    printf@ap 003B  
                                  printf@cp 0039                          _EUSART_Receive_ISR 099B  
                           ??_PROTOCOL_Loop 0057                    __size_of_I2C1_Initialize 0021  
                            i1_PROTOCOL_EXT 0896                              i1_PROTOCOL_SAV 08F7  
                            i1_PROTOCOL_SET 08D3                              i1_PROTOCOL_STA 08B7  
                            i1_PROTOCOL_STP 08A3              PROTOCOL_I2C_Send_float@pbuffer 0046  
                                _OPTION_REG 0095                         ?_EUSART_Receive_ISR 0070  
                           ___lwmod@divisor 0028                             _TMR0_Initialize 0929  
                           ___lwmod@counter 002D                              get_accel@steps 0049  
               PROTOCOL_Loop@device_address 005A                        PROTOCOL_EXT@char_buf 0020  
                        EUSART_Write@txData 0021                __size_of_EUSART_Transmit_ISR 001B  
            __end_of_PIN_MANAGER_Initialize 0A44                        ??_EUSART_Receive_ISR 0070  
                     ?_PROTOCOL_I2C_Set_TLV 0020                            _PROTOCOL_I2C_GET 089A  
                          _PROTOCOL_I2C_SEN 0BDD                            _PROTOCOL_I2C_WHO 089D  
                               get_accel@ch 004C  
