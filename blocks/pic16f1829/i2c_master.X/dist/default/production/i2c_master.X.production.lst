

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Sun Oct 08 09:56:40 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F1829
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	stringtext,global,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    17                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text12,local,class=CODE,merge=1,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    45                           	psect	text23,local,class=CODE,merge=1,delta=2,group=1
    46                           	psect	text24,local,class=CODE,merge=1,delta=2,group=1
    47                           	psect	text25,local,class=CODE,merge=1,delta=2,group=1
    48                           	psect	text26,local,class=CODE,merge=1,delta=2,group=1
    49                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    50                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    51                           	psect	text29,local,class=CODE,merge=1,delta=2
    52                           	psect	text30,local,class=CODE,merge=1,delta=2,group=3
    53                           	psect	text31,local,class=CODE,merge=1,delta=2
    54                           	psect	text32,local,class=CODE,merge=1,delta=2,group=3
    55                           	psect	text33,local,class=CODE,merge=1,delta=2
    56                           	psect	text34,local,class=CODE,merge=1,delta=2
    57                           	psect	text35,local,class=CODE,merge=1,delta=2
    58                           	psect	text36,local,class=CODE,merge=1,delta=2
    59                           	psect	text37,local,class=CODE,merge=1,delta=2
    60                           	psect	text38,local,class=CODE,merge=1,delta=2
    61                           	psect	text39,local,class=CODE,merge=1,delta=2
    62                           	psect	text40,local,class=CODE,merge=1,delta=2
    63                           	psect	text41,local,class=CODE,merge=1,delta=2
    64                           	psect	text42,local,class=CODE,merge=1,delta=2
    65                           	psect	text43,local,class=CODE,merge=1,delta=2
    66                           	psect	text44,local,class=CODE,merge=1,delta=2,group=1
    67                           	psect	text45,local,class=CODE,merge=1,delta=2
    68                           	psect	text46,local,class=CODE,merge=1,delta=2
    69                           	psect	text47,local,class=CODE,merge=1,delta=2
    70                           	psect	text48,local,class=CODE,merge=1,delta=2,group=3
    71                           	psect	text49,local,class=CODE,merge=1,delta=2,group=3
    72                           	psect	text50,local,class=CODE,merge=1,delta=2,group=1
    73                           	psect	text51,local,class=CODE,merge=1,delta=2,group=3
    74                           	psect	text52,local,class=CODE,merge=1,delta=2,group=3
    75                           	psect	text53,local,class=CODE,merge=1,delta=2
    76                           	psect	text54,local,class=CODE,merge=1,delta=2,group=3
    77                           	psect	text55,local,class=CODE,merge=1,delta=2,group=3
    78                           	psect	text56,local,class=CODE,merge=1,delta=2,group=3
    79                           	psect	text57,local,class=CODE,merge=1,delta=2,group=3
    80                           	psect	text58,local,class=CODE,merge=1,delta=2
    81                           	psect	text59,local,class=CODE,merge=1,delta=2
    82                           	psect	text60,local,class=CODE,merge=1,delta=2,group=1
    83                           	psect	text61,local,class=CODE,merge=1,delta=2
    84                           	psect	intentry,global,class=CODE,delta=2
    85                           	psect	text63,local,class=CODE,merge=1,delta=2
    86                           	psect	swtext1,local,class=CONST,delta=2
    87                           	psect	text64,local,class=CODE,merge=1,delta=2
    88                           	psect	text65,local,class=CODE,merge=1,delta=2
    89                           	psect	text66,local,class=CODE,merge=1,delta=2
    90                           	psect	text67,local,class=CODE,merge=1,delta=2
    91                           	psect	text68,local,class=CODE,merge=1,delta=2
    92                           	dabs	1,0x620,48
    93                           	dabs	1,0x5A0,80
    94                           	dabs	1,0x530,64
    95                           	dabs	1,0x2330,0,_cmd_buf
    96                           	dabs	1,0x7E,2
    97  0000                     
    98                           ; Version 1.41 (B)
    99                           ; Generated 21/02/2017 GMT
   100                           ; 
   101                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   102                           ; All rights reserved.
   103                           ; 
   104                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   105                           ; 
   106                           ; Redistribution and use in source and binary forms, with or without modification, are
   107                           ; permitted provided that the following conditions are met:
   108                           ; 
   109                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   110                           ;        conditions and the following disclaimer.
   111                           ; 
   112                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   113                           ;        of conditions and the following disclaimer in the documentation and/or other
   114                           ;        materials provided with the distribution.
   115                           ; 
   116                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   117                           ;        software without specific prior written permission.
   118                           ; 
   119                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   120                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   121                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   122                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   123                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   124                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   125                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   126                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   127                           ; 
   128                           ; 
   129                           ; Code-generator required, PIC16F1829 Definitions
   130                           ; 
   131                           ; SFR Addresses
   132  0000                     	;# 
   133  0001                     	;# 
   134  0002                     	;# 
   135  0003                     	;# 
   136  0004                     	;# 
   137  0005                     	;# 
   138  0006                     	;# 
   139  0007                     	;# 
   140  0008                     	;# 
   141  0009                     	;# 
   142  000A                     	;# 
   143  000B                     	;# 
   144  000C                     	;# 
   145  000D                     	;# 
   146  000E                     	;# 
   147  0011                     	;# 
   148  0012                     	;# 
   149  0013                     	;# 
   150  0014                     	;# 
   151  0015                     	;# 
   152  0016                     	;# 
   153  0016                     	;# 
   154  0017                     	;# 
   155  0018                     	;# 
   156  0019                     	;# 
   157  001A                     	;# 
   158  001B                     	;# 
   159  001C                     	;# 
   160  001E                     	;# 
   161  001F                     	;# 
   162  008C                     	;# 
   163  008D                     	;# 
   164  008E                     	;# 
   165  0091                     	;# 
   166  0092                     	;# 
   167  0093                     	;# 
   168  0094                     	;# 
   169  0095                     	;# 
   170  0096                     	;# 
   171  0097                     	;# 
   172  0098                     	;# 
   173  0099                     	;# 
   174  009A                     	;# 
   175  009B                     	;# 
   176  009B                     	;# 
   177  009C                     	;# 
   178  009D                     	;# 
   179  009E                     	;# 
   180  010C                     	;# 
   181  010D                     	;# 
   182  010E                     	;# 
   183  0111                     	;# 
   184  0112                     	;# 
   185  0113                     	;# 
   186  0114                     	;# 
   187  0115                     	;# 
   188  0116                     	;# 
   189  0117                     	;# 
   190  0118                     	;# 
   191  0119                     	;# 
   192  011A                     	;# 
   193  011B                     	;# 
   194  011D                     	;# 
   195  011E                     	;# 
   196  018C                     	;# 
   197  018D                     	;# 
   198  018E                     	;# 
   199  0191                     	;# 
   200  0191                     	;# 
   201  0192                     	;# 
   202  0193                     	;# 
   203  0193                     	;# 
   204  0193                     	;# 
   205  0194                     	;# 
   206  0195                     	;# 
   207  0196                     	;# 
   208  0199                     	;# 
   209  019A                     	;# 
   210  019B                     	;# 
   211  019B                     	;# 
   212  019C                     	;# 
   213  019D                     	;# 
   214  019E                     	;# 
   215  019F                     	;# 
   216  020C                     	;# 
   217  020D                     	;# 
   218  020E                     	;# 
   219  0211                     	;# 
   220  0211                     	;# 
   221  0212                     	;# 
   222  0212                     	;# 
   223  0213                     	;# 
   224  0213                     	;# 
   225  0214                     	;# 
   226  0214                     	;# 
   227  0215                     	;# 
   228  0215                     	;# 
   229  0215                     	;# 
   230  0216                     	;# 
   231  0216                     	;# 
   232  0217                     	;# 
   233  0217                     	;# 
   234  0219                     	;# 
   235  021A                     	;# 
   236  021B                     	;# 
   237  021C                     	;# 
   238  021D                     	;# 
   239  021E                     	;# 
   240  021F                     	;# 
   241  0291                     	;# 
   242  0291                     	;# 
   243  0292                     	;# 
   244  0293                     	;# 
   245  0294                     	;# 
   246  0295                     	;# 
   247  0295                     	;# 
   248  0296                     	;# 
   249  0298                     	;# 
   250  0298                     	;# 
   251  0299                     	;# 
   252  029A                     	;# 
   253  029B                     	;# 
   254  029C                     	;# 
   255  029D                     	;# 
   256  029E                     	;# 
   257  0311                     	;# 
   258  0311                     	;# 
   259  0312                     	;# 
   260  0313                     	;# 
   261  0318                     	;# 
   262  0318                     	;# 
   263  0319                     	;# 
   264  031A                     	;# 
   265  038C                     	;# 
   266  038D                     	;# 
   267  038E                     	;# 
   268  0391                     	;# 
   269  0392                     	;# 
   270  0393                     	;# 
   271  0394                     	;# 
   272  0395                     	;# 
   273  0396                     	;# 
   274  039A                     	;# 
   275  039C                     	;# 
   276  039D                     	;# 
   277  039E                     	;# 
   278  039F                     	;# 
   279  0415                     	;# 
   280  0416                     	;# 
   281  0417                     	;# 
   282  041C                     	;# 
   283  041D                     	;# 
   284  041E                     	;# 
   285  0FE4                     	;# 
   286  0FE5                     	;# 
   287  0FE6                     	;# 
   288  0FE7                     	;# 
   289  0FE8                     	;# 
   290  0FE9                     	;# 
   291  0FEA                     	;# 
   292  0FEB                     	;# 
   293  0FED                     	;# 
   294  0FEE                     	;# 
   295  0FEF                     	;# 
   296  0000                     	;# 
   297  0001                     	;# 
   298  0002                     	;# 
   299  0003                     	;# 
   300  0004                     	;# 
   301  0005                     	;# 
   302  0006                     	;# 
   303  0007                     	;# 
   304  0008                     	;# 
   305  0009                     	;# 
   306  000A                     	;# 
   307  000B                     	;# 
   308  000C                     	;# 
   309  000D                     	;# 
   310  000E                     	;# 
   311  0011                     	;# 
   312  0012                     	;# 
   313  0013                     	;# 
   314  0014                     	;# 
   315  0015                     	;# 
   316  0016                     	;# 
   317  0016                     	;# 
   318  0017                     	;# 
   319  0018                     	;# 
   320  0019                     	;# 
   321  001A                     	;# 
   322  001B                     	;# 
   323  001C                     	;# 
   324  001E                     	;# 
   325  001F                     	;# 
   326  008C                     	;# 
   327  008D                     	;# 
   328  008E                     	;# 
   329  0091                     	;# 
   330  0092                     	;# 
   331  0093                     	;# 
   332  0094                     	;# 
   333  0095                     	;# 
   334  0096                     	;# 
   335  0097                     	;# 
   336  0098                     	;# 
   337  0099                     	;# 
   338  009A                     	;# 
   339  009B                     	;# 
   340  009B                     	;# 
   341  009C                     	;# 
   342  009D                     	;# 
   343  009E                     	;# 
   344  010C                     	;# 
   345  010D                     	;# 
   346  010E                     	;# 
   347  0111                     	;# 
   348  0112                     	;# 
   349  0113                     	;# 
   350  0114                     	;# 
   351  0115                     	;# 
   352  0116                     	;# 
   353  0117                     	;# 
   354  0118                     	;# 
   355  0119                     	;# 
   356  011A                     	;# 
   357  011B                     	;# 
   358  011D                     	;# 
   359  011E                     	;# 
   360  018C                     	;# 
   361  018D                     	;# 
   362  018E                     	;# 
   363  0191                     	;# 
   364  0191                     	;# 
   365  0192                     	;# 
   366  0193                     	;# 
   367  0193                     	;# 
   368  0193                     	;# 
   369  0194                     	;# 
   370  0195                     	;# 
   371  0196                     	;# 
   372  0199                     	;# 
   373  019A                     	;# 
   374  019B                     	;# 
   375  019B                     	;# 
   376  019C                     	;# 
   377  019D                     	;# 
   378  019E                     	;# 
   379  019F                     	;# 
   380  020C                     	;# 
   381  020D                     	;# 
   382  020E                     	;# 
   383  0211                     	;# 
   384  0211                     	;# 
   385  0212                     	;# 
   386  0212                     	;# 
   387  0213                     	;# 
   388  0213                     	;# 
   389  0214                     	;# 
   390  0214                     	;# 
   391  0215                     	;# 
   392  0215                     	;# 
   393  0215                     	;# 
   394  0216                     	;# 
   395  0216                     	;# 
   396  0217                     	;# 
   397  0217                     	;# 
   398  0219                     	;# 
   399  021A                     	;# 
   400  021B                     	;# 
   401  021C                     	;# 
   402  021D                     	;# 
   403  021E                     	;# 
   404  021F                     	;# 
   405  0291                     	;# 
   406  0291                     	;# 
   407  0292                     	;# 
   408  0293                     	;# 
   409  0294                     	;# 
   410  0295                     	;# 
   411  0295                     	;# 
   412  0296                     	;# 
   413  0298                     	;# 
   414  0298                     	;# 
   415  0299                     	;# 
   416  029A                     	;# 
   417  029B                     	;# 
   418  029C                     	;# 
   419  029D                     	;# 
   420  029E                     	;# 
   421  0311                     	;# 
   422  0311                     	;# 
   423  0312                     	;# 
   424  0313                     	;# 
   425  0318                     	;# 
   426  0318                     	;# 
   427  0319                     	;# 
   428  031A                     	;# 
   429  038C                     	;# 
   430  038D                     	;# 
   431  038E                     	;# 
   432  0391                     	;# 
   433  0392                     	;# 
   434  0393                     	;# 
   435  0394                     	;# 
   436  0395                     	;# 
   437  0396                     	;# 
   438  039A                     	;# 
   439  039C                     	;# 
   440  039D                     	;# 
   441  039E                     	;# 
   442  039F                     	;# 
   443  0415                     	;# 
   444  0416                     	;# 
   445  0417                     	;# 
   446  041C                     	;# 
   447  041D                     	;# 
   448  041E                     	;# 
   449  0FE4                     	;# 
   450  0FE5                     	;# 
   451  0FE6                     	;# 
   452  0FE7                     	;# 
   453  0FE8                     	;# 
   454  0FE9                     	;# 
   455  0FEA                     	;# 
   456  0FEB                     	;# 
   457  0FED                     	;# 
   458  0FEE                     	;# 
   459  0FEF                     	;# 
   460  0000                     	;# 
   461  0001                     	;# 
   462  0002                     	;# 
   463  0003                     	;# 
   464  0004                     	;# 
   465  0005                     	;# 
   466  0006                     	;# 
   467  0007                     	;# 
   468  0008                     	;# 
   469  0009                     	;# 
   470  000A                     	;# 
   471  000B                     	;# 
   472  000C                     	;# 
   473  000D                     	;# 
   474  000E                     	;# 
   475  0011                     	;# 
   476  0012                     	;# 
   477  0013                     	;# 
   478  0014                     	;# 
   479  0015                     	;# 
   480  0016                     	;# 
   481  0016                     	;# 
   482  0017                     	;# 
   483  0018                     	;# 
   484  0019                     	;# 
   485  001A                     	;# 
   486  001B                     	;# 
   487  001C                     	;# 
   488  001E                     	;# 
   489  001F                     	;# 
   490  008C                     	;# 
   491  008D                     	;# 
   492  008E                     	;# 
   493  0091                     	;# 
   494  0092                     	;# 
   495  0093                     	;# 
   496  0094                     	;# 
   497  0095                     	;# 
   498  0096                     	;# 
   499  0097                     	;# 
   500  0098                     	;# 
   501  0099                     	;# 
   502  009A                     	;# 
   503  009B                     	;# 
   504  009B                     	;# 
   505  009C                     	;# 
   506  009D                     	;# 
   507  009E                     	;# 
   508  010C                     	;# 
   509  010D                     	;# 
   510  010E                     	;# 
   511  0111                     	;# 
   512  0112                     	;# 
   513  0113                     	;# 
   514  0114                     	;# 
   515  0115                     	;# 
   516  0116                     	;# 
   517  0117                     	;# 
   518  0118                     	;# 
   519  0119                     	;# 
   520  011A                     	;# 
   521  011B                     	;# 
   522  011D                     	;# 
   523  011E                     	;# 
   524  018C                     	;# 
   525  018D                     	;# 
   526  018E                     	;# 
   527  0191                     	;# 
   528  0191                     	;# 
   529  0192                     	;# 
   530  0193                     	;# 
   531  0193                     	;# 
   532  0193                     	;# 
   533  0194                     	;# 
   534  0195                     	;# 
   535  0196                     	;# 
   536  0199                     	;# 
   537  019A                     	;# 
   538  019B                     	;# 
   539  019B                     	;# 
   540  019C                     	;# 
   541  019D                     	;# 
   542  019E                     	;# 
   543  019F                     	;# 
   544  020C                     	;# 
   545  020D                     	;# 
   546  020E                     	;# 
   547  0211                     	;# 
   548  0211                     	;# 
   549  0212                     	;# 
   550  0212                     	;# 
   551  0213                     	;# 
   552  0213                     	;# 
   553  0214                     	;# 
   554  0214                     	;# 
   555  0215                     	;# 
   556  0215                     	;# 
   557  0215                     	;# 
   558  0216                     	;# 
   559  0216                     	;# 
   560  0217                     	;# 
   561  0217                     	;# 
   562  0219                     	;# 
   563  021A                     	;# 
   564  021B                     	;# 
   565  021C                     	;# 
   566  021D                     	;# 
   567  021E                     	;# 
   568  021F                     	;# 
   569  0291                     	;# 
   570  0291                     	;# 
   571  0292                     	;# 
   572  0293                     	;# 
   573  0294                     	;# 
   574  0295                     	;# 
   575  0295                     	;# 
   576  0296                     	;# 
   577  0298                     	;# 
   578  0298                     	;# 
   579  0299                     	;# 
   580  029A                     	;# 
   581  029B                     	;# 
   582  029C                     	;# 
   583  029D                     	;# 
   584  029E                     	;# 
   585  0311                     	;# 
   586  0311                     	;# 
   587  0312                     	;# 
   588  0313                     	;# 
   589  0318                     	;# 
   590  0318                     	;# 
   591  0319                     	;# 
   592  031A                     	;# 
   593  038C                     	;# 
   594  038D                     	;# 
   595  038E                     	;# 
   596  0391                     	;# 
   597  0392                     	;# 
   598  0393                     	;# 
   599  0394                     	;# 
   600  0395                     	;# 
   601  0396                     	;# 
   602  039A                     	;# 
   603  039C                     	;# 
   604  039D                     	;# 
   605  039E                     	;# 
   606  039F                     	;# 
   607  0415                     	;# 
   608  0416                     	;# 
   609  0417                     	;# 
   610  041C                     	;# 
   611  041D                     	;# 
   612  041E                     	;# 
   613  0FE4                     	;# 
   614  0FE5                     	;# 
   615  0FE6                     	;# 
   616  0FE7                     	;# 
   617  0FE8                     	;# 
   618  0FE9                     	;# 
   619  0FEA                     	;# 
   620  0FEB                     	;# 
   621  0FED                     	;# 
   622  0FEE                     	;# 
   623  0FEF                     	;# 
   624  0000                     	;# 
   625  0001                     	;# 
   626  0002                     	;# 
   627  0003                     	;# 
   628  0004                     	;# 
   629  0005                     	;# 
   630  0006                     	;# 
   631  0007                     	;# 
   632  0008                     	;# 
   633  0009                     	;# 
   634  000A                     	;# 
   635  000B                     	;# 
   636  000C                     	;# 
   637  000D                     	;# 
   638  000E                     	;# 
   639  0011                     	;# 
   640  0012                     	;# 
   641  0013                     	;# 
   642  0014                     	;# 
   643  0015                     	;# 
   644  0016                     	;# 
   645  0016                     	;# 
   646  0017                     	;# 
   647  0018                     	;# 
   648  0019                     	;# 
   649  001A                     	;# 
   650  001B                     	;# 
   651  001C                     	;# 
   652  001E                     	;# 
   653  001F                     	;# 
   654  008C                     	;# 
   655  008D                     	;# 
   656  008E                     	;# 
   657  0091                     	;# 
   658  0092                     	;# 
   659  0093                     	;# 
   660  0094                     	;# 
   661  0095                     	;# 
   662  0096                     	;# 
   663  0097                     	;# 
   664  0098                     	;# 
   665  0099                     	;# 
   666  009A                     	;# 
   667  009B                     	;# 
   668  009B                     	;# 
   669  009C                     	;# 
   670  009D                     	;# 
   671  009E                     	;# 
   672  010C                     	;# 
   673  010D                     	;# 
   674  010E                     	;# 
   675  0111                     	;# 
   676  0112                     	;# 
   677  0113                     	;# 
   678  0114                     	;# 
   679  0115                     	;# 
   680  0116                     	;# 
   681  0117                     	;# 
   682  0118                     	;# 
   683  0119                     	;# 
   684  011A                     	;# 
   685  011B                     	;# 
   686  011D                     	;# 
   687  011E                     	;# 
   688  018C                     	;# 
   689  018D                     	;# 
   690  018E                     	;# 
   691  0191                     	;# 
   692  0191                     	;# 
   693  0192                     	;# 
   694  0193                     	;# 
   695  0193                     	;# 
   696  0193                     	;# 
   697  0194                     	;# 
   698  0195                     	;# 
   699  0196                     	;# 
   700  0199                     	;# 
   701  019A                     	;# 
   702  019B                     	;# 
   703  019B                     	;# 
   704  019C                     	;# 
   705  019D                     	;# 
   706  019E                     	;# 
   707  019F                     	;# 
   708  020C                     	;# 
   709  020D                     	;# 
   710  020E                     	;# 
   711  0211                     	;# 
   712  0211                     	;# 
   713  0212                     	;# 
   714  0212                     	;# 
   715  0213                     	;# 
   716  0213                     	;# 
   717  0214                     	;# 
   718  0214                     	;# 
   719  0215                     	;# 
   720  0215                     	;# 
   721  0215                     	;# 
   722  0216                     	;# 
   723  0216                     	;# 
   724  0217                     	;# 
   725  0217                     	;# 
   726  0219                     	;# 
   727  021A                     	;# 
   728  021B                     	;# 
   729  021C                     	;# 
   730  021D                     	;# 
   731  021E                     	;# 
   732  021F                     	;# 
   733  0291                     	;# 
   734  0291                     	;# 
   735  0292                     	;# 
   736  0293                     	;# 
   737  0294                     	;# 
   738  0295                     	;# 
   739  0295                     	;# 
   740  0296                     	;# 
   741  0298                     	;# 
   742  0298                     	;# 
   743  0299                     	;# 
   744  029A                     	;# 
   745  029B                     	;# 
   746  029C                     	;# 
   747  029D                     	;# 
   748  029E                     	;# 
   749  0311                     	;# 
   750  0311                     	;# 
   751  0312                     	;# 
   752  0313                     	;# 
   753  0318                     	;# 
   754  0318                     	;# 
   755  0319                     	;# 
   756  031A                     	;# 
   757  038C                     	;# 
   758  038D                     	;# 
   759  038E                     	;# 
   760  0391                     	;# 
   761  0392                     	;# 
   762  0393                     	;# 
   763  0394                     	;# 
   764  0395                     	;# 
   765  0396                     	;# 
   766  039A                     	;# 
   767  039C                     	;# 
   768  039D                     	;# 
   769  039E                     	;# 
   770  039F                     	;# 
   771  0415                     	;# 
   772  0416                     	;# 
   773  0417                     	;# 
   774  041C                     	;# 
   775  041D                     	;# 
   776  041E                     	;# 
   777  0FE4                     	;# 
   778  0FE5                     	;# 
   779  0FE6                     	;# 
   780  0FE7                     	;# 
   781  0FE8                     	;# 
   782  0FE9                     	;# 
   783  0FEA                     	;# 
   784  0FEB                     	;# 
   785  0FED                     	;# 
   786  0FEE                     	;# 
   787  0FEF                     	;# 
   788  0000                     	;# 
   789  0001                     	;# 
   790  0002                     	;# 
   791  0003                     	;# 
   792  0004                     	;# 
   793  0005                     	;# 
   794  0006                     	;# 
   795  0007                     	;# 
   796  0008                     	;# 
   797  0009                     	;# 
   798  000A                     	;# 
   799  000B                     	;# 
   800  000C                     	;# 
   801  000D                     	;# 
   802  000E                     	;# 
   803  0011                     	;# 
   804  0012                     	;# 
   805  0013                     	;# 
   806  0014                     	;# 
   807  0015                     	;# 
   808  0016                     	;# 
   809  0016                     	;# 
   810  0017                     	;# 
   811  0018                     	;# 
   812  0019                     	;# 
   813  001A                     	;# 
   814  001B                     	;# 
   815  001C                     	;# 
   816  001E                     	;# 
   817  001F                     	;# 
   818  008C                     	;# 
   819  008D                     	;# 
   820  008E                     	;# 
   821  0091                     	;# 
   822  0092                     	;# 
   823  0093                     	;# 
   824  0094                     	;# 
   825  0095                     	;# 
   826  0096                     	;# 
   827  0097                     	;# 
   828  0098                     	;# 
   829  0099                     	;# 
   830  009A                     	;# 
   831  009B                     	;# 
   832  009B                     	;# 
   833  009C                     	;# 
   834  009D                     	;# 
   835  009E                     	;# 
   836  010C                     	;# 
   837  010D                     	;# 
   838  010E                     	;# 
   839  0111                     	;# 
   840  0112                     	;# 
   841  0113                     	;# 
   842  0114                     	;# 
   843  0115                     	;# 
   844  0116                     	;# 
   845  0117                     	;# 
   846  0118                     	;# 
   847  0119                     	;# 
   848  011A                     	;# 
   849  011B                     	;# 
   850  011D                     	;# 
   851  011E                     	;# 
   852  018C                     	;# 
   853  018D                     	;# 
   854  018E                     	;# 
   855  0191                     	;# 
   856  0191                     	;# 
   857  0192                     	;# 
   858  0193                     	;# 
   859  0193                     	;# 
   860  0193                     	;# 
   861  0194                     	;# 
   862  0195                     	;# 
   863  0196                     	;# 
   864  0199                     	;# 
   865  019A                     	;# 
   866  019B                     	;# 
   867  019B                     	;# 
   868  019C                     	;# 
   869  019D                     	;# 
   870  019E                     	;# 
   871  019F                     	;# 
   872  020C                     	;# 
   873  020D                     	;# 
   874  020E                     	;# 
   875  0211                     	;# 
   876  0211                     	;# 
   877  0212                     	;# 
   878  0212                     	;# 
   879  0213                     	;# 
   880  0213                     	;# 
   881  0214                     	;# 
   882  0214                     	;# 
   883  0215                     	;# 
   884  0215                     	;# 
   885  0215                     	;# 
   886  0216                     	;# 
   887  0216                     	;# 
   888  0217                     	;# 
   889  0217                     	;# 
   890  0219                     	;# 
   891  021A                     	;# 
   892  021B                     	;# 
   893  021C                     	;# 
   894  021D                     	;# 
   895  021E                     	;# 
   896  021F                     	;# 
   897  0291                     	;# 
   898  0291                     	;# 
   899  0292                     	;# 
   900  0293                     	;# 
   901  0294                     	;# 
   902  0295                     	;# 
   903  0295                     	;# 
   904  0296                     	;# 
   905  0298                     	;# 
   906  0298                     	;# 
   907  0299                     	;# 
   908  029A                     	;# 
   909  029B                     	;# 
   910  029C                     	;# 
   911  029D                     	;# 
   912  029E                     	;# 
   913  0311                     	;# 
   914  0311                     	;# 
   915  0312                     	;# 
   916  0313                     	;# 
   917  0318                     	;# 
   918  0318                     	;# 
   919  0319                     	;# 
   920  031A                     	;# 
   921  038C                     	;# 
   922  038D                     	;# 
   923  038E                     	;# 
   924  0391                     	;# 
   925  0392                     	;# 
   926  0393                     	;# 
   927  0394                     	;# 
   928  0395                     	;# 
   929  0396                     	;# 
   930  039A                     	;# 
   931  039C                     	;# 
   932  039D                     	;# 
   933  039E                     	;# 
   934  039F                     	;# 
   935  0415                     	;# 
   936  0416                     	;# 
   937  0417                     	;# 
   938  041C                     	;# 
   939  041D                     	;# 
   940  041E                     	;# 
   941  0FE4                     	;# 
   942  0FE5                     	;# 
   943  0FE6                     	;# 
   944  0FE7                     	;# 
   945  0FE8                     	;# 
   946  0FE9                     	;# 
   947  0FEA                     	;# 
   948  0FEB                     	;# 
   949  0FED                     	;# 
   950  0FEE                     	;# 
   951  0FEF                     	;# 
   952  0000                     	;# 
   953  0001                     	;# 
   954  0002                     	;# 
   955  0003                     	;# 
   956  0004                     	;# 
   957  0005                     	;# 
   958  0006                     	;# 
   959  0007                     	;# 
   960  0008                     	;# 
   961  0009                     	;# 
   962  000A                     	;# 
   963  000B                     	;# 
   964  000C                     	;# 
   965  000D                     	;# 
   966  000E                     	;# 
   967  0011                     	;# 
   968  0012                     	;# 
   969  0013                     	;# 
   970  0014                     	;# 
   971  0015                     	;# 
   972  0016                     	;# 
   973  0016                     	;# 
   974  0017                     	;# 
   975  0018                     	;# 
   976  0019                     	;# 
   977  001A                     	;# 
   978  001B                     	;# 
   979  001C                     	;# 
   980  001E                     	;# 
   981  001F                     	;# 
   982  008C                     	;# 
   983  008D                     	;# 
   984  008E                     	;# 
   985  0091                     	;# 
   986  0092                     	;# 
   987  0093                     	;# 
   988  0094                     	;# 
   989  0095                     	;# 
   990  0096                     	;# 
   991  0097                     	;# 
   992  0098                     	;# 
   993  0099                     	;# 
   994  009A                     	;# 
   995  009B                     	;# 
   996  009B                     	;# 
   997  009C                     	;# 
   998  009D                     	;# 
   999  009E                     	;# 
  1000  010C                     	;# 
  1001  010D                     	;# 
  1002  010E                     	;# 
  1003  0111                     	;# 
  1004  0112                     	;# 
  1005  0113                     	;# 
  1006  0114                     	;# 
  1007  0115                     	;# 
  1008  0116                     	;# 
  1009  0117                     	;# 
  1010  0118                     	;# 
  1011  0119                     	;# 
  1012  011A                     	;# 
  1013  011B                     	;# 
  1014  011D                     	;# 
  1015  011E                     	;# 
  1016  018C                     	;# 
  1017  018D                     	;# 
  1018  018E                     	;# 
  1019  0191                     	;# 
  1020  0191                     	;# 
  1021  0192                     	;# 
  1022  0193                     	;# 
  1023  0193                     	;# 
  1024  0193                     	;# 
  1025  0194                     	;# 
  1026  0195                     	;# 
  1027  0196                     	;# 
  1028  0199                     	;# 
  1029  019A                     	;# 
  1030  019B                     	;# 
  1031  019B                     	;# 
  1032  019C                     	;# 
  1033  019D                     	;# 
  1034  019E                     	;# 
  1035  019F                     	;# 
  1036  020C                     	;# 
  1037  020D                     	;# 
  1038  020E                     	;# 
  1039  0211                     	;# 
  1040  0211                     	;# 
  1041  0212                     	;# 
  1042  0212                     	;# 
  1043  0213                     	;# 
  1044  0213                     	;# 
  1045  0214                     	;# 
  1046  0214                     	;# 
  1047  0215                     	;# 
  1048  0215                     	;# 
  1049  0215                     	;# 
  1050  0216                     	;# 
  1051  0216                     	;# 
  1052  0217                     	;# 
  1053  0217                     	;# 
  1054  0219                     	;# 
  1055  021A                     	;# 
  1056  021B                     	;# 
  1057  021C                     	;# 
  1058  021D                     	;# 
  1059  021E                     	;# 
  1060  021F                     	;# 
  1061  0291                     	;# 
  1062  0291                     	;# 
  1063  0292                     	;# 
  1064  0293                     	;# 
  1065  0294                     	;# 
  1066  0295                     	;# 
  1067  0295                     	;# 
  1068  0296                     	;# 
  1069  0298                     	;# 
  1070  0298                     	;# 
  1071  0299                     	;# 
  1072  029A                     	;# 
  1073  029B                     	;# 
  1074  029C                     	;# 
  1075  029D                     	;# 
  1076  029E                     	;# 
  1077  0311                     	;# 
  1078  0311                     	;# 
  1079  0312                     	;# 
  1080  0313                     	;# 
  1081  0318                     	;# 
  1082  0318                     	;# 
  1083  0319                     	;# 
  1084  031A                     	;# 
  1085  038C                     	;# 
  1086  038D                     	;# 
  1087  038E                     	;# 
  1088  0391                     	;# 
  1089  0392                     	;# 
  1090  0393                     	;# 
  1091  0394                     	;# 
  1092  0395                     	;# 
  1093  0396                     	;# 
  1094  039A                     	;# 
  1095  039C                     	;# 
  1096  039D                     	;# 
  1097  039E                     	;# 
  1098  039F                     	;# 
  1099  0415                     	;# 
  1100  0416                     	;# 
  1101  0417                     	;# 
  1102  041C                     	;# 
  1103  041D                     	;# 
  1104  041E                     	;# 
  1105  0FE4                     	;# 
  1106  0FE5                     	;# 
  1107  0FE6                     	;# 
  1108  0FE7                     	;# 
  1109  0FE8                     	;# 
  1110  0FE9                     	;# 
  1111  0FEA                     	;# 
  1112  0FEB                     	;# 
  1113  0FED                     	;# 
  1114  0FEE                     	;# 
  1115  0FEF                     	;# 
  1116  0000                     	;# 
  1117  0001                     	;# 
  1118  0002                     	;# 
  1119  0003                     	;# 
  1120  0004                     	;# 
  1121  0005                     	;# 
  1122  0006                     	;# 
  1123  0007                     	;# 
  1124  0008                     	;# 
  1125  0009                     	;# 
  1126  000A                     	;# 
  1127  000B                     	;# 
  1128  000C                     	;# 
  1129  000D                     	;# 
  1130  000E                     	;# 
  1131  0011                     	;# 
  1132  0012                     	;# 
  1133  0013                     	;# 
  1134  0014                     	;# 
  1135  0015                     	;# 
  1136  0016                     	;# 
  1137  0016                     	;# 
  1138  0017                     	;# 
  1139  0018                     	;# 
  1140  0019                     	;# 
  1141  001A                     	;# 
  1142  001B                     	;# 
  1143  001C                     	;# 
  1144  001E                     	;# 
  1145  001F                     	;# 
  1146  008C                     	;# 
  1147  008D                     	;# 
  1148  008E                     	;# 
  1149  0091                     	;# 
  1150  0092                     	;# 
  1151  0093                     	;# 
  1152  0094                     	;# 
  1153  0095                     	;# 
  1154  0096                     	;# 
  1155  0097                     	;# 
  1156  0098                     	;# 
  1157  0099                     	;# 
  1158  009A                     	;# 
  1159  009B                     	;# 
  1160  009B                     	;# 
  1161  009C                     	;# 
  1162  009D                     	;# 
  1163  009E                     	;# 
  1164  010C                     	;# 
  1165  010D                     	;# 
  1166  010E                     	;# 
  1167  0111                     	;# 
  1168  0112                     	;# 
  1169  0113                     	;# 
  1170  0114                     	;# 
  1171  0115                     	;# 
  1172  0116                     	;# 
  1173  0117                     	;# 
  1174  0118                     	;# 
  1175  0119                     	;# 
  1176  011A                     	;# 
  1177  011B                     	;# 
  1178  011D                     	;# 
  1179  011E                     	;# 
  1180  018C                     	;# 
  1181  018D                     	;# 
  1182  018E                     	;# 
  1183  0191                     	;# 
  1184  0191                     	;# 
  1185  0192                     	;# 
  1186  0193                     	;# 
  1187  0193                     	;# 
  1188  0193                     	;# 
  1189  0194                     	;# 
  1190  0195                     	;# 
  1191  0196                     	;# 
  1192  0199                     	;# 
  1193  019A                     	;# 
  1194  019B                     	;# 
  1195  019B                     	;# 
  1196  019C                     	;# 
  1197  019D                     	;# 
  1198  019E                     	;# 
  1199  019F                     	;# 
  1200  020C                     	;# 
  1201  020D                     	;# 
  1202  020E                     	;# 
  1203  0211                     	;# 
  1204  0211                     	;# 
  1205  0212                     	;# 
  1206  0212                     	;# 
  1207  0213                     	;# 
  1208  0213                     	;# 
  1209  0214                     	;# 
  1210  0214                     	;# 
  1211  0215                     	;# 
  1212  0215                     	;# 
  1213  0215                     	;# 
  1214  0216                     	;# 
  1215  0216                     	;# 
  1216  0217                     	;# 
  1217  0217                     	;# 
  1218  0219                     	;# 
  1219  021A                     	;# 
  1220  021B                     	;# 
  1221  021C                     	;# 
  1222  021D                     	;# 
  1223  021E                     	;# 
  1224  021F                     	;# 
  1225  0291                     	;# 
  1226  0291                     	;# 
  1227  0292                     	;# 
  1228  0293                     	;# 
  1229  0294                     	;# 
  1230  0295                     	;# 
  1231  0295                     	;# 
  1232  0296                     	;# 
  1233  0298                     	;# 
  1234  0298                     	;# 
  1235  0299                     	;# 
  1236  029A                     	;# 
  1237  029B                     	;# 
  1238  029C                     	;# 
  1239  029D                     	;# 
  1240  029E                     	;# 
  1241  0311                     	;# 
  1242  0311                     	;# 
  1243  0312                     	;# 
  1244  0313                     	;# 
  1245  0318                     	;# 
  1246  0318                     	;# 
  1247  0319                     	;# 
  1248  031A                     	;# 
  1249  038C                     	;# 
  1250  038D                     	;# 
  1251  038E                     	;# 
  1252  0391                     	;# 
  1253  0392                     	;# 
  1254  0393                     	;# 
  1255  0394                     	;# 
  1256  0395                     	;# 
  1257  0396                     	;# 
  1258  039A                     	;# 
  1259  039C                     	;# 
  1260  039D                     	;# 
  1261  039E                     	;# 
  1262  039F                     	;# 
  1263  0415                     	;# 
  1264  0416                     	;# 
  1265  0417                     	;# 
  1266  041C                     	;# 
  1267  041D                     	;# 
  1268  041E                     	;# 
  1269  0FE4                     	;# 
  1270  0FE5                     	;# 
  1271  0FE6                     	;# 
  1272  0FE7                     	;# 
  1273  0FE8                     	;# 
  1274  0FE9                     	;# 
  1275  0FEA                     	;# 
  1276  0FEB                     	;# 
  1277  0FED                     	;# 
  1278  0FEE                     	;# 
  1279  0FEF                     	;# 
  1280  0000                     	;# 
  1281  0001                     	;# 
  1282  0002                     	;# 
  1283  0003                     	;# 
  1284  0004                     	;# 
  1285  0005                     	;# 
  1286  0006                     	;# 
  1287  0007                     	;# 
  1288  0008                     	;# 
  1289  0009                     	;# 
  1290  000A                     	;# 
  1291  000B                     	;# 
  1292  000C                     	;# 
  1293  000D                     	;# 
  1294  000E                     	;# 
  1295  0011                     	;# 
  1296  0012                     	;# 
  1297  0013                     	;# 
  1298  0014                     	;# 
  1299  0015                     	;# 
  1300  0016                     	;# 
  1301  0016                     	;# 
  1302  0017                     	;# 
  1303  0018                     	;# 
  1304  0019                     	;# 
  1305  001A                     	;# 
  1306  001B                     	;# 
  1307  001C                     	;# 
  1308  001E                     	;# 
  1309  001F                     	;# 
  1310  008C                     	;# 
  1311  008D                     	;# 
  1312  008E                     	;# 
  1313  0091                     	;# 
  1314  0092                     	;# 
  1315  0093                     	;# 
  1316  0094                     	;# 
  1317  0095                     	;# 
  1318  0096                     	;# 
  1319  0097                     	;# 
  1320  0098                     	;# 
  1321  0099                     	;# 
  1322  009A                     	;# 
  1323  009B                     	;# 
  1324  009B                     	;# 
  1325  009C                     	;# 
  1326  009D                     	;# 
  1327  009E                     	;# 
  1328  010C                     	;# 
  1329  010D                     	;# 
  1330  010E                     	;# 
  1331  0111                     	;# 
  1332  0112                     	;# 
  1333  0113                     	;# 
  1334  0114                     	;# 
  1335  0115                     	;# 
  1336  0116                     	;# 
  1337  0117                     	;# 
  1338  0118                     	;# 
  1339  0119                     	;# 
  1340  011A                     	;# 
  1341  011B                     	;# 
  1342  011D                     	;# 
  1343  011E                     	;# 
  1344  018C                     	;# 
  1345  018D                     	;# 
  1346  018E                     	;# 
  1347  0191                     	;# 
  1348  0191                     	;# 
  1349  0192                     	;# 
  1350  0193                     	;# 
  1351  0193                     	;# 
  1352  0193                     	;# 
  1353  0194                     	;# 
  1354  0195                     	;# 
  1355  0196                     	;# 
  1356  0199                     	;# 
  1357  019A                     	;# 
  1358  019B                     	;# 
  1359  019B                     	;# 
  1360  019C                     	;# 
  1361  019D                     	;# 
  1362  019E                     	;# 
  1363  019F                     	;# 
  1364  020C                     	;# 
  1365  020D                     	;# 
  1366  020E                     	;# 
  1367  0211                     	;# 
  1368  0211                     	;# 
  1369  0212                     	;# 
  1370  0212                     	;# 
  1371  0213                     	;# 
  1372  0213                     	;# 
  1373  0214                     	;# 
  1374  0214                     	;# 
  1375  0215                     	;# 
  1376  0215                     	;# 
  1377  0215                     	;# 
  1378  0216                     	;# 
  1379  0216                     	;# 
  1380  0217                     	;# 
  1381  0217                     	;# 
  1382  0219                     	;# 
  1383  021A                     	;# 
  1384  021B                     	;# 
  1385  021C                     	;# 
  1386  021D                     	;# 
  1387  021E                     	;# 
  1388  021F                     	;# 
  1389  0291                     	;# 
  1390  0291                     	;# 
  1391  0292                     	;# 
  1392  0293                     	;# 
  1393  0294                     	;# 
  1394  0295                     	;# 
  1395  0295                     	;# 
  1396  0296                     	;# 
  1397  0298                     	;# 
  1398  0298                     	;# 
  1399  0299                     	;# 
  1400  029A                     	;# 
  1401  029B                     	;# 
  1402  029C                     	;# 
  1403  029D                     	;# 
  1404  029E                     	;# 
  1405  0311                     	;# 
  1406  0311                     	;# 
  1407  0312                     	;# 
  1408  0313                     	;# 
  1409  0318                     	;# 
  1410  0318                     	;# 
  1411  0319                     	;# 
  1412  031A                     	;# 
  1413  038C                     	;# 
  1414  038D                     	;# 
  1415  038E                     	;# 
  1416  0391                     	;# 
  1417  0392                     	;# 
  1418  0393                     	;# 
  1419  0394                     	;# 
  1420  0395                     	;# 
  1421  0396                     	;# 
  1422  039A                     	;# 
  1423  039C                     	;# 
  1424  039D                     	;# 
  1425  039E                     	;# 
  1426  039F                     	;# 
  1427  0415                     	;# 
  1428  0416                     	;# 
  1429  0417                     	;# 
  1430  041C                     	;# 
  1431  041D                     	;# 
  1432  041E                     	;# 
  1433  0FE4                     	;# 
  1434  0FE5                     	;# 
  1435  0FE6                     	;# 
  1436  0FE7                     	;# 
  1437  0FE8                     	;# 
  1438  0FE9                     	;# 
  1439  0FEA                     	;# 
  1440  0FEB                     	;# 
  1441  0FED                     	;# 
  1442  0FEE                     	;# 
  1443  0FEF                     	;# 
  1444  0000                     	;# 
  1445  0001                     	;# 
  1446  0002                     	;# 
  1447  0003                     	;# 
  1448  0004                     	;# 
  1449  0005                     	;# 
  1450  0006                     	;# 
  1451  0007                     	;# 
  1452  0008                     	;# 
  1453  0009                     	;# 
  1454  000A                     	;# 
  1455  000B                     	;# 
  1456  000C                     	;# 
  1457  000D                     	;# 
  1458  000E                     	;# 
  1459  0011                     	;# 
  1460  0012                     	;# 
  1461  0013                     	;# 
  1462  0014                     	;# 
  1463  0015                     	;# 
  1464  0016                     	;# 
  1465  0016                     	;# 
  1466  0017                     	;# 
  1467  0018                     	;# 
  1468  0019                     	;# 
  1469  001A                     	;# 
  1470  001B                     	;# 
  1471  001C                     	;# 
  1472  001E                     	;# 
  1473  001F                     	;# 
  1474  008C                     	;# 
  1475  008D                     	;# 
  1476  008E                     	;# 
  1477  0091                     	;# 
  1478  0092                     	;# 
  1479  0093                     	;# 
  1480  0094                     	;# 
  1481  0095                     	;# 
  1482  0096                     	;# 
  1483  0097                     	;# 
  1484  0098                     	;# 
  1485  0099                     	;# 
  1486  009A                     	;# 
  1487  009B                     	;# 
  1488  009B                     	;# 
  1489  009C                     	;# 
  1490  009D                     	;# 
  1491  009E                     	;# 
  1492  010C                     	;# 
  1493  010D                     	;# 
  1494  010E                     	;# 
  1495  0111                     	;# 
  1496  0112                     	;# 
  1497  0113                     	;# 
  1498  0114                     	;# 
  1499  0115                     	;# 
  1500  0116                     	;# 
  1501  0117                     	;# 
  1502  0118                     	;# 
  1503  0119                     	;# 
  1504  011A                     	;# 
  1505  011B                     	;# 
  1506  011D                     	;# 
  1507  011E                     	;# 
  1508  018C                     	;# 
  1509  018D                     	;# 
  1510  018E                     	;# 
  1511  0191                     	;# 
  1512  0191                     	;# 
  1513  0192                     	;# 
  1514  0193                     	;# 
  1515  0193                     	;# 
  1516  0193                     	;# 
  1517  0194                     	;# 
  1518  0195                     	;# 
  1519  0196                     	;# 
  1520  0199                     	;# 
  1521  019A                     	;# 
  1522  019B                     	;# 
  1523  019B                     	;# 
  1524  019C                     	;# 
  1525  019D                     	;# 
  1526  019E                     	;# 
  1527  019F                     	;# 
  1528  020C                     	;# 
  1529  020D                     	;# 
  1530  020E                     	;# 
  1531  0211                     	;# 
  1532  0211                     	;# 
  1533  0212                     	;# 
  1534  0212                     	;# 
  1535  0213                     	;# 
  1536  0213                     	;# 
  1537  0214                     	;# 
  1538  0214                     	;# 
  1539  0215                     	;# 
  1540  0215                     	;# 
  1541  0215                     	;# 
  1542  0216                     	;# 
  1543  0216                     	;# 
  1544  0217                     	;# 
  1545  0217                     	;# 
  1546  0219                     	;# 
  1547  021A                     	;# 
  1548  021B                     	;# 
  1549  021C                     	;# 
  1550  021D                     	;# 
  1551  021E                     	;# 
  1552  021F                     	;# 
  1553  0291                     	;# 
  1554  0291                     	;# 
  1555  0292                     	;# 
  1556  0293                     	;# 
  1557  0294                     	;# 
  1558  0295                     	;# 
  1559  0295                     	;# 
  1560  0296                     	;# 
  1561  0298                     	;# 
  1562  0298                     	;# 
  1563  0299                     	;# 
  1564  029A                     	;# 
  1565  029B                     	;# 
  1566  029C                     	;# 
  1567  029D                     	;# 
  1568  029E                     	;# 
  1569  0311                     	;# 
  1570  0311                     	;# 
  1571  0312                     	;# 
  1572  0313                     	;# 
  1573  0318                     	;# 
  1574  0318                     	;# 
  1575  0319                     	;# 
  1576  031A                     	;# 
  1577  038C                     	;# 
  1578  038D                     	;# 
  1579  038E                     	;# 
  1580  0391                     	;# 
  1581  0392                     	;# 
  1582  0393                     	;# 
  1583  0394                     	;# 
  1584  0395                     	;# 
  1585  0396                     	;# 
  1586  039A                     	;# 
  1587  039C                     	;# 
  1588  039D                     	;# 
  1589  039E                     	;# 
  1590  039F                     	;# 
  1591  0415                     	;# 
  1592  0416                     	;# 
  1593  0417                     	;# 
  1594  041C                     	;# 
  1595  041D                     	;# 
  1596  041E                     	;# 
  1597  0FE4                     	;# 
  1598  0FE5                     	;# 
  1599  0FE6                     	;# 
  1600  0FE7                     	;# 
  1601  0FE8                     	;# 
  1602  0FE9                     	;# 
  1603  0FEA                     	;# 
  1604  0FEB                     	;# 
  1605  0FED                     	;# 
  1606  0FEE                     	;# 
  1607  0FEF                     	;# 
  1608  0000                     	;# 
  1609  0001                     	;# 
  1610  0002                     	;# 
  1611  0003                     	;# 
  1612  0004                     	;# 
  1613  0005                     	;# 
  1614  0006                     	;# 
  1615  0007                     	;# 
  1616  0008                     	;# 
  1617  0009                     	;# 
  1618  000A                     	;# 
  1619  000B                     	;# 
  1620  000C                     	;# 
  1621  000D                     	;# 
  1622  000E                     	;# 
  1623  0011                     	;# 
  1624  0012                     	;# 
  1625  0013                     	;# 
  1626  0014                     	;# 
  1627  0015                     	;# 
  1628  0016                     	;# 
  1629  0016                     	;# 
  1630  0017                     	;# 
  1631  0018                     	;# 
  1632  0019                     	;# 
  1633  001A                     	;# 
  1634  001B                     	;# 
  1635  001C                     	;# 
  1636  001E                     	;# 
  1637  001F                     	;# 
  1638  008C                     	;# 
  1639  008D                     	;# 
  1640  008E                     	;# 
  1641  0091                     	;# 
  1642  0092                     	;# 
  1643  0093                     	;# 
  1644  0094                     	;# 
  1645  0095                     	;# 
  1646  0096                     	;# 
  1647  0097                     	;# 
  1648  0098                     	;# 
  1649  0099                     	;# 
  1650  009A                     	;# 
  1651  009B                     	;# 
  1652  009B                     	;# 
  1653  009C                     	;# 
  1654  009D                     	;# 
  1655  009E                     	;# 
  1656  010C                     	;# 
  1657  010D                     	;# 
  1658  010E                     	;# 
  1659  0111                     	;# 
  1660  0112                     	;# 
  1661  0113                     	;# 
  1662  0114                     	;# 
  1663  0115                     	;# 
  1664  0116                     	;# 
  1665  0117                     	;# 
  1666  0118                     	;# 
  1667  0119                     	;# 
  1668  011A                     	;# 
  1669  011B                     	;# 
  1670  011D                     	;# 
  1671  011E                     	;# 
  1672  018C                     	;# 
  1673  018D                     	;# 
  1674  018E                     	;# 
  1675  0191                     	;# 
  1676  0191                     	;# 
  1677  0192                     	;# 
  1678  0193                     	;# 
  1679  0193                     	;# 
  1680  0193                     	;# 
  1681  0194                     	;# 
  1682  0195                     	;# 
  1683  0196                     	;# 
  1684  0199                     	;# 
  1685  019A                     	;# 
  1686  019B                     	;# 
  1687  019B                     	;# 
  1688  019C                     	;# 
  1689  019D                     	;# 
  1690  019E                     	;# 
  1691  019F                     	;# 
  1692  020C                     	;# 
  1693  020D                     	;# 
  1694  020E                     	;# 
  1695  0211                     	;# 
  1696  0211                     	;# 
  1697  0212                     	;# 
  1698  0212                     	;# 
  1699  0213                     	;# 
  1700  0213                     	;# 
  1701  0214                     	;# 
  1702  0214                     	;# 
  1703  0215                     	;# 
  1704  0215                     	;# 
  1705  0215                     	;# 
  1706  0216                     	;# 
  1707  0216                     	;# 
  1708  0217                     	;# 
  1709  0217                     	;# 
  1710  0219                     	;# 
  1711  021A                     	;# 
  1712  021B                     	;# 
  1713  021C                     	;# 
  1714  021D                     	;# 
  1715  021E                     	;# 
  1716  021F                     	;# 
  1717  0291                     	;# 
  1718  0291                     	;# 
  1719  0292                     	;# 
  1720  0293                     	;# 
  1721  0294                     	;# 
  1722  0295                     	;# 
  1723  0295                     	;# 
  1724  0296                     	;# 
  1725  0298                     	;# 
  1726  0298                     	;# 
  1727  0299                     	;# 
  1728  029A                     	;# 
  1729  029B                     	;# 
  1730  029C                     	;# 
  1731  029D                     	;# 
  1732  029E                     	;# 
  1733  0311                     	;# 
  1734  0311                     	;# 
  1735  0312                     	;# 
  1736  0313                     	;# 
  1737  0318                     	;# 
  1738  0318                     	;# 
  1739  0319                     	;# 
  1740  031A                     	;# 
  1741  038C                     	;# 
  1742  038D                     	;# 
  1743  038E                     	;# 
  1744  0391                     	;# 
  1745  0392                     	;# 
  1746  0393                     	;# 
  1747  0394                     	;# 
  1748  0395                     	;# 
  1749  0396                     	;# 
  1750  039A                     	;# 
  1751  039C                     	;# 
  1752  039D                     	;# 
  1753  039E                     	;# 
  1754  039F                     	;# 
  1755  0415                     	;# 
  1756  0416                     	;# 
  1757  0417                     	;# 
  1758  041C                     	;# 
  1759  041D                     	;# 
  1760  041E                     	;# 
  1761  0FE4                     	;# 
  1762  0FE5                     	;# 
  1763  0FE6                     	;# 
  1764  0FE7                     	;# 
  1765  0FE8                     	;# 
  1766  0FE9                     	;# 
  1767  0FEA                     	;# 
  1768  0FEB                     	;# 
  1769  0FED                     	;# 
  1770  0FEE                     	;# 
  1771  0FEF                     	;_cmd_buf
  1772                           
  1773                           	psect	idataBANK1
  1774  1F8D                     __pidataBANK1:	
  1775                           
  1776                           ;initializer for put_cmd@idx
  1777  1F8D  34FF               	retlw	-1
  1778                           
  1779                           ;initializer for _filter
  1780  1F8E  3401               	retlw	1
  1781                           
  1782                           ;initializer for _BACKPLANE_SLAVE_ADDRESS
  1783  1F8F  3401               	retlw	1
  1784                           
  1785                           	psect	idataBANK2
  1786  1F8A                     __pidataBANK2:	
  1787                           
  1788                           ;initializer for _tmr_scaler
  1789  1F8A  3401               	retlw	1
  1790                           
  1791                           ;initializer for dev_map_iterator@start
  1792  1F8B  3401               	retlw	1
  1793                           
  1794                           ;initializer for _type_no_data
  1795  1F8C  3406               	retlw	6
  1796                           
  1797                           	psect	stringtext
  1798  1000                     __pstringtext:	
  1799  1000                     _dpowers:	
  1800  1000  3401               	retlw	1
  1801  1001  3400               	retlw	0
  1802  1002  340A               	retlw	10
  1803  1003  3400               	retlw	0
  1804  1004  3464               	retlw	100
  1805  1005  3400               	retlw	0
  1806  1006  34E8               	retlw	232
  1807  1007  3403               	retlw	3
  1808  1008  3410               	retlw	16
  1809  1009  3427               	retlw	39
  1810  100A                     __end_of_dpowers:	
  1811  100A                     _MAX_Y:	
  1812  100A  3404               	retlw	4
  1813  100B                     __end_of_MAX_Y:	
  1814  0015                     _TMR0	set	21
  1815  0012                     _PIR2bits	set	18
  1816  000B                     _INTCONbits	set	11
  1817  0011                     _PIR1bits	set	17
  1818  005A                     _TMR0IF	set	90
  1819  0095                     _OPTION_REG	set	149
  1820  0097                     _WDTCON	set	151
  1821  0098                     _OSCTUNE	set	152
  1822  0099                     _OSCCON	set	153
  1823  0092                     _PIE2bits	set	146
  1824  0095                     _OPTION_REGbits	set	149
  1825  008E                     _TRISC	set	142
  1826  008D                     _TRISB	set	141
  1827  008C                     _TRISA	set	140
  1828  0091                     _PIE1bits	set	145
  1829  04D6                     _PLLR	set	1238
  1830  010E                     _LATCbits	set	270
  1831  011D                     _APFCON0	set	285
  1832  011E                     _APFCON1	set	286
  1833  010E                     _LATC	set	270
  1834  010D                     _LATB	set	269
  1835  010C                     _LATA	set	268
  1836  018C                     _ANSELA	set	396
  1837  018D                     _ANSELB	set	397
  1838  018E                     _ANSELC	set	398
  1839  0199                     _RCREG	set	409
  1840  019D                     _RCSTAbits	set	413
  1841  019A                     _TXREG	set	410
  1842  019C                     _SPBRGH	set	412
  1843  019B                     _SPBRGL	set	411
  1844  019E                     _TXSTA	set	414
  1845  019D                     _RCSTA	set	413
  1846  019F                     _BAUDCON	set	415
  1847  0196                     _EECON2	set	406
  1848  0193                     _EEDATL	set	403
  1849  0194                     _EEDATH	set	404
  1850  0195                     _EECON1bits	set	405
  1851  0192                     _EEADRH	set	402
  1852  0191                     _EEADRL	set	401
  1853  020E                     _WPUC	set	526
  1854  020C                     _WPUA	set	524
  1855  020D                     _WPUB	set	525
  1856  0211                     _SSP1BUF	set	529
  1857  0216                     _SSP1CON2bits	set	534
  1858  0215                     _SSP1CON1bits	set	533
  1859  0212                     _SSP1ADD	set	530
  1860  0217                     _SSP1CON3	set	535
  1861  0215                     _SSP1CON1	set	533
  1862  0214                     _SSP1STAT	set	532
  1863  100B                     STR_25:	
  1864  100B  3421               	retlw	33	;'!'
  1865  100C  343A               	retlw	58	;':'
  1866  100D  3457               	retlw	87	;'W'
  1867  100E  3453               	retlw	83	;'S'
  1868  100F  3443               	retlw	67	;'C'
  1869  1010  343A               	retlw	58	;':'
  1870  1011  3450               	retlw	80	;'P'
  1871  1012  344F               	retlw	79	;'O'
  1872  1013  3453               	retlw	83	;'S'
  1873  1014  3420               	retlw	32	;' '
  1874  1015  344C               	retlw	76	;'L'
  1875  1016  3441               	retlw	65	;'A'
  1876  1017  3452               	retlw	82	;'R'
  1877  1018  3447               	retlw	71	;'G'
  1878  1019  3445               	retlw	69	;'E'
  1879  101A  3452               	retlw	82	;'R'
  1880  101B  3420               	retlw	32	;' '
  1881  101C  3454               	retlw	84	;'T'
  1882  101D  3448               	retlw	72	;'H'
  1883  101E  3441               	retlw	65	;'A'
  1884  101F  344E               	retlw	78	;'N'
  1885  1020  3420               	retlw	32	;' '
  1886  1021  3432               	retlw	50	;'2'
  1887  1022  3437               	retlw	55	;'7'
  1888  1023  340A               	retlw	10
  1889  1024  3400               	retlw	0
  1890  1025                     STR_23:	
  1891  1025  3421               	retlw	33	;'!'
  1892  1026  343A               	retlw	58	;':'
  1893  1027  3450               	retlw	80	;'P'
  1894  1028  344F               	retlw	79	;'O'
  1895  1029  3453               	retlw	83	;'S'
  1896  102A  343A               	retlw	58	;':'
  1897  102B  3450               	retlw	80	;'P'
  1898  102C  344F               	retlw	79	;'O'
  1899  102D  3453               	retlw	83	;'S'
  1900  102E  3420               	retlw	32	;' '
  1901  102F  344C               	retlw	76	;'L'
  1902  1030  3441               	retlw	65	;'A'
  1903  1031  3452               	retlw	82	;'R'
  1904  1032  3447               	retlw	71	;'G'
  1905  1033  3445               	retlw	69	;'E'
  1906  1034  3452               	retlw	82	;'R'
  1907  1035  3420               	retlw	32	;' '
  1908  1036  3454               	retlw	84	;'T'
  1909  1037  3448               	retlw	72	;'H'
  1910  1038  3441               	retlw	65	;'A'
  1911  1039  344E               	retlw	78	;'N'
  1912  103A  3420               	retlw	32	;' '
  1913  103B  3432               	retlw	50	;'2'
  1914  103C  3437               	retlw	55	;'7'
  1915  103D  340A               	retlw	10
  1916  103E  3400               	retlw	0
  1917  103F                     STR_17:	
  1918  103F  3421               	retlw	33	;'!'
  1919  1040  343A               	retlw	58	;':'
  1920  1041  3425               	retlw	37	;'%'
  1921  1042  3425               	retlw	37	;'%'
  1922  1043  3425               	retlw	37	;'%'
  1923  1044  3464               	retlw	100	;'d'
  1924  1045  343A               	retlw	58	;':'
  1925  1046  3455               	retlw	85	;'U'
  1926  1047  344E               	retlw	78	;'N'
  1927  1048  3444               	retlw	68	;'D'
  1928  1049  3445               	retlw	69	;'E'
  1929  104A  3454               	retlw	84	;'T'
  1930  104B  3445               	retlw	69	;'E'
  1931  104C  3443               	retlw	67	;'C'
  1932  104D  3454               	retlw	84	;'T'
  1933  104E  3445               	retlw	69	;'E'
  1934  104F  3444               	retlw	68	;'D'
  1935  1050  3420               	retlw	32	;' '
  1936  1051  3444               	retlw	68	;'D'
  1937  1052  3445               	retlw	69	;'E'
  1938  1053  3456               	retlw	86	;'V'
  1939  1054  3449               	retlw	73	;'I'
  1940  1055  3443               	retlw	67	;'C'
  1941  1056  3445               	retlw	69	;'E'
  1942  1057  340A               	retlw	10
  1943  1058  3400               	retlw	0
  1944  1059                     STR_12:	
  1945  1059  3421               	retlw	33	;'!'
  1946  105A  343A               	retlw	58	;':'
  1947  105B  344E               	retlw	78	;'N'
  1948  105C  344F               	retlw	79	;'O'
  1949  105D  3420               	retlw	32	;' '
  1950  105E  3441               	retlw	65	;'A'
  1951  105F  3443               	retlw	67	;'C'
  1952  1060  344B               	retlw	75	;'K'
  1953  1061  3420               	retlw	32	;' '
  1954  1062  3446               	retlw	70	;'F'
  1955  1063  3452               	retlw	82	;'R'
  1956  1064  344F               	retlw	79	;'O'
  1957  1065  344D               	retlw	77	;'M'
  1958  1066  3420               	retlw	32	;' '
  1959  1067  3449               	retlw	73	;'I'
  1960  1068  3432               	retlw	50	;'2'
  1961  1069  3443               	retlw	67	;'C'
  1962  106A  3420               	retlw	32	;' '
  1963  106B  3453               	retlw	83	;'S'
  1964  106C  344C               	retlw	76	;'L'
  1965  106D  3441               	retlw	65	;'A'
  1966  106E  3456               	retlw	86	;'V'
  1967  106F  3445               	retlw	69	;'E'
  1968  1070  340A               	retlw	10
  1969  1071  3400               	retlw	0
  1970  1072                     STR_16:	
  1971  1072  3421               	retlw	33	;'!'
  1972  1073  343A               	retlw	58	;':'
  1973  1074  344D               	retlw	77	;'M'
  1974  1075  3441               	retlw	65	;'A'
  1975  1076  3450               	retlw	80	;'P'
  1976  1077  343A               	retlw	58	;':'
  1977  1078  344E               	retlw	78	;'N'
  1978  1079  344F               	retlw	79	;'O'
  1979  107A  3420               	retlw	32	;' '
  1980  107B  3453               	retlw	83	;'S'
  1981  107C  344C               	retlw	76	;'L'
  1982  107D  3441               	retlw	65	;'A'
  1983  107E  3456               	retlw	86	;'V'
  1984  107F  3445               	retlw	69	;'E'
  1985  1080  3420               	retlw	32	;' '
  1986  1081  3446               	retlw	70	;'F'
  1987  1082  344F               	retlw	79	;'O'
  1988  1083  3455               	retlw	85	;'U'
  1989  1084  344E               	retlw	78	;'N'
  1990  1085  3444               	retlw	68	;'D'
  1991  1086  340A               	retlw	10
  1992  1087  3400               	retlw	0
  1993  1088                     STR_18:	
  1994  1088  3421               	retlw	33	;'!'
  1995  1089  343A               	retlw	58	;':'
  1996  108A  3425               	retlw	37	;'%'
  1997  108B  3425               	retlw	37	;'%'
  1998  108C  3425               	retlw	37	;'%'
  1999  108D  3464               	retlw	100	;'d'
  2000  108E  343A               	retlw	58	;':'
  2001  108F  344E               	retlw	78	;'N'
  2002  1090  3445               	retlw	69	;'E'
  2003  1091  3454               	retlw	84	;'T'
  2004  1092  3457               	retlw	87	;'W'
  2005  1093  344F               	retlw	79	;'O'
  2006  1094  3452               	retlw	82	;'R'
  2007  1095  344B               	retlw	75	;'K'
  2008  1096  3420               	retlw	32	;' '
  2009  1097  3445               	retlw	69	;'E'
  2010  1098  3452               	retlw	82	;'R'
  2011  1099  3452               	retlw	82	;'R'
  2012  109A  344F               	retlw	79	;'O'
  2013  109B  3452               	retlw	82	;'R'
  2014  109C  340A               	retlw	10
  2015  109D  3400               	retlw	0
  2016  109E                     STR_36:	
  2017  109E  3442               	retlw	66	;'B'
  2018  109F  3441               	retlw	65	;'A'
  2019  10A0  3443               	retlw	67	;'C'
  2020  10A1  344B               	retlw	75	;'K'
  2021  10A2  3450               	retlw	80	;'P'
  2022  10A3  344C               	retlw	76	;'L'
  2023  10A4  3441               	retlw	65	;'A'
  2024  10A5  344E               	retlw	78	;'N'
  2025  10A6  3445               	retlw	69	;'E'
  2026  10A7  342D               	retlw	45	;'-'
  2027  10A8  344D               	retlw	77	;'M'
  2028  10A9  3441               	retlw	65	;'A'
  2029  10AA  3453               	retlw	83	;'S'
  2030  10AB  3454               	retlw	84	;'T'
  2031  10AC  3445               	retlw	69	;'E'
  2032  10AD  3452               	retlw	82	;'R'
  2033  10AE  3400               	retlw	0
  2034  10AF                     STR_71:	
  2035  10AF  3449               	retlw	73	;'I'
  2036  10B0  344C               	retlw	76	;'L'
  2037  10B1  344C               	retlw	76	;'L'
  2038  10B2  3445               	retlw	69	;'E'
  2039  10B3  3447               	retlw	71	;'G'
  2040  10B4  3441               	retlw	65	;'A'
  2041  10B5  344C               	retlw	76	;'L'
  2042  10B6  345F               	retlw	95	;'_'
  2043  10B7  3454               	retlw	84	;'T'
  2044  10B8  3459               	retlw	89	;'Y'
  2045  10B9  3450               	retlw	80	;'P'
  2046  10BA  3445               	retlw	69	;'E'
  2047  10BB  340A               	retlw	10
  2048  10BC  3400               	retlw	0
  2049  10BD                     STR_3:	
  2050  10BD  3421               	retlw	33	;'!'
  2051  10BE  343A               	retlw	58	;':'
  2052  10BF  3457               	retlw	87	;'W'
  2053  10C0  3448               	retlw	72	;'H'
  2054  10C1  344F               	retlw	79	;'O'
  2055  10C2  343A               	retlw	58	;':'
  2056  10C3  344E               	retlw	78	;'N'
  2057  10C4  3441               	retlw	65	;'A'
  2058  10C5  3443               	retlw	67	;'C'
  2059  10C6  344B               	retlw	75	;'K'
  2060  10C7  340A               	retlw	10
  2061  10C8  3400               	retlw	0
  2062  10C9                     STR_8:	
  2063  10C9  3421               	retlw	33	;'!'
  2064  10CA  343A               	retlw	58	;':'
  2065  10CB  3453               	retlw	83	;'S'
  2066  10CC  3454               	retlw	84	;'T'
  2067  10CD  3450               	retlw	80	;'P'
  2068  10CE  343A               	retlw	58	;':'
  2069  10CF  344E               	retlw	78	;'N'
  2070  10D0  3441               	retlw	65	;'A'
  2071  10D1  3443               	retlw	67	;'C'
  2072  10D2  344B               	retlw	75	;'K'
  2073  10D3  340A               	retlw	10
  2074  10D4  3400               	retlw	0
  2075  10D5                     STR_7:	
  2076  10D5  342A               	retlw	42	;'*'
  2077  10D6  343A               	retlw	58	;':'
  2078  10D7  3453               	retlw	83	;'S'
  2079  10D8  3454               	retlw	84	;'T'
  2080  10D9  3450               	retlw	80	;'P'
  2081  10DA  343A               	retlw	58	;':'
  2082  10DB  3441               	retlw	65	;'A'
  2083  10DC  3443               	retlw	67	;'C'
  2084  10DD  344B               	retlw	75	;'K'
  2085  10DE  340A               	retlw	10
  2086  10DF  3400               	retlw	0
  2087  10E0                     STR_51:	
  2088  10E0  3424               	retlw	36	;'$'
  2089  10E1  343A               	retlw	58	;':'
  2090  10E2  3452               	retlw	82	;'R'
  2091  10E3  3444               	retlw	68	;'D'
  2092  10E4  3441               	retlw	65	;'A'
  2093  10E5  343A               	retlw	58	;':'
  2094  10E6  3425               	retlw	37	;'%'
  2095  10E7  3464               	retlw	100	;'d'
  2096  10E8  340A               	retlw	10
  2097  10E9  3400               	retlw	0
  2098  10EA                     STR_69:	
  2099  10EA  342D               	retlw	45	;'-'
  2100  10EB  3425               	retlw	37	;'%'
  2101  10EC  3464               	retlw	100	;'d'
  2102  10ED  342E               	retlw	46	;'.'
  2103  10EE  3425               	retlw	37	;'%'
  2104  10EF  3430               	retlw	48	;'0'
  2105  10F0  3432               	retlw	50	;'2'
  2106  10F1  3464               	retlw	100	;'d'
  2107  10F2  340A               	retlw	10
  2108  10F3  3400               	retlw	0
  2109  10F4                     STR_40:	
  2110  10F4  3424               	retlw	36	;'$'
  2111  10F5  343A               	retlw	58	;':'
  2112  10F6  3457               	retlw	87	;'W'
  2113  10F7  3448               	retlw	72	;'H'
  2114  10F8  344F               	retlw	79	;'O'
  2115  10F9  343A               	retlw	58	;':'
  2116  10FA  3425               	retlw	37	;'%'
  2117  10FB  3473               	retlw	115	;'s'
  2118  10FC  340A               	retlw	10
  2119  10FD  3400               	retlw	0
  2120  10FE                     STR_44:	
  2121  10FE  342A               	retlw	42	;'*'
  2122  10FF  343A               	retlw	58	;':'
  2123  1100  3453               	retlw	83	;'S'
  2124  1101  3454               	retlw	84	;'T'
  2125  1102  3450               	retlw	80	;'P'
  2126  1103  343A               	retlw	58	;':'
  2127  1104  3425               	retlw	37	;'%'
  2128  1105  3473               	retlw	115	;'s'
  2129  1106  340A               	retlw	10
  2130  1107  3400               	retlw	0
  2131  1108                     STR_67:	
  2132  1108  342D               	retlw	45	;'-'
  2133  1109  3425               	retlw	37	;'%'
  2134  110A  3464               	retlw	100	;'d'
  2135  110B  342E               	retlw	46	;'.'
  2136  110C  3425               	retlw	37	;'%'
  2137  110D  3430               	retlw	48	;'0'
  2138  110E  3432               	retlw	50	;'2'
  2139  110F  3464               	retlw	100	;'d'
  2140  1110  342C               	retlw	44	;','
  2141  1111  3400               	retlw	0
  2142  1112                     STR_59:	
  2143  1112  3455               	retlw	85	;'U'
  2144  1113  3449               	retlw	73	;'I'
  2145  1114  344E               	retlw	78	;'N'
  2146  1115  3454               	retlw	84	;'T'
  2147  1116  3431               	retlw	49	;'1'
  2148  1117  3436               	retlw	54	;'6'
  2149  1118  345F               	retlw	95	;'_'
  2150  1119  3454               	retlw	84	;'T'
  2151  111A  343A               	retlw	58	;':'
  2152  111B  3400               	retlw	0
  2153  111C                     STR_2:	
  2154  111C  3424               	retlw	36	;'$'
  2155  111D  343A               	retlw	58	;':'
  2156  111E  3457               	retlw	87	;'W'
  2157  111F  3448               	retlw	72	;'H'
  2158  1120  344F               	retlw	79	;'O'
  2159  1121  343A               	retlw	58	;':'
  2160  1122  3425               	retlw	37	;'%'
  2161  1123  3464               	retlw	100	;'d'
  2162  1124  340A               	retlw	10
  2163  1125  3400               	retlw	0
  2164  1126                     STR_11:	
  2165  1126  3424               	retlw	36	;'$'
  2166  1127  343A               	retlw	58	;':'
  2167  1128  3447               	retlw	71	;'G'
  2168  1129  3445               	retlw	69	;'E'
  2169  112A  3454               	retlw	84	;'T'
  2170  112B  343A               	retlw	58	;':'
  2171  112C  3425               	retlw	37	;'%'
  2172  112D  3464               	retlw	100	;'d'
  2173  112E  340A               	retlw	10
  2174  112F  3400               	retlw	0
  2175  1130                     STR_70:	
  2176  1130  344E               	retlw	78	;'N'
  2177  1131  344F               	retlw	79	;'O'
  2178  1132  345F               	retlw	95	;'_'
  2179  1133  3444               	retlw	68	;'D'
  2180  1134  3441               	retlw	65	;'A'
  2181  1135  3454               	retlw	84	;'T'
  2182  1136  3441               	retlw	65	;'A'
  2183  1137  340A               	retlw	10
  2184  1138  3400               	retlw	0
  2185  1139                     STR_53:	
  2186  1139  3455               	retlw	85	;'U'
  2187  113A  3449               	retlw	73	;'I'
  2188  113B  344E               	retlw	78	;'N'
  2189  113C  3454               	retlw	84	;'T'
  2190  113D  3438               	retlw	56	;'8'
  2191  113E  345F               	retlw	95	;'_'
  2192  113F  3454               	retlw	84	;'T'
  2193  1140  343A               	retlw	58	;':'
  2194  1141  3400               	retlw	0
  2195  1142                     STR_65:	
  2196  1142  3446               	retlw	70	;'F'
  2197  1143  344C               	retlw	76	;'L'
  2198  1144  344F               	retlw	79	;'O'
  2199  1145  3441               	retlw	65	;'A'
  2200  1146  3454               	retlw	84	;'T'
  2201  1147  343A               	retlw	58	;':'
  2202  1148  3400               	retlw	0
  2203  1149                     STR_37:	
  2204  1149  3428               	retlw	40	;'('
  2205  114A  346E               	retlw	110	;'n'
  2206  114B  3475               	retlw	117	;'u'
  2207  114C  346C               	retlw	108	;'l'
  2208  114D  346C               	retlw	108	;'l'
  2209  114E  3429               	retlw	41	;')'
  2210  114F  3400               	retlw	0
  2211  1150                     STR_28:	
  2212  1150  3424               	retlw	36	;'$'
  2213  1151  343A               	retlw	58	;':'
  2214  1152  3452               	retlw	82	;'R'
  2215  1153  3453               	retlw	83	;'S'
  2216  1154  3443               	retlw	67	;'C'
  2217  1155  343A               	retlw	58	;':'
  2218  1156  3400               	retlw	0
  2219  1157                     STR_13:	
  2220  1157  3424               	retlw	36	;'$'
  2221  1158  343A               	retlw	58	;':'
  2222  1159  344D               	retlw	77	;'M'
  2223  115A  3441               	retlw	65	;'A'
  2224  115B  3450               	retlw	80	;'P'
  2225  115C  343A               	retlw	58	;':'
  2226  115D  3400               	retlw	0
  2227  115E                     STR_52:	
  2228  115E  3425               	retlw	37	;'%'
  2229  115F  3425               	retlw	37	;'%'
  2230  1160  3425               	retlw	37	;'%'
  2231  1161  3464               	retlw	100	;'d'
  2232  1162  343A               	retlw	58	;':'
  2233  1163  3400               	retlw	0
  2234  1164                     STR_38:	
  2235  1164  3423               	retlw	35	;'#'
  2236  1165  3425               	retlw	37	;'%'
  2237  1166  3473               	retlw	115	;'s'
  2238  1167  340A               	retlw	10
  2239  1168  3400               	retlw	0
  2240  1169                     STR_55:	
  2241  1169  3425               	retlw	37	;'%'
  2242  116A  3475               	retlw	117	;'u'
  2243  116B  340A               	retlw	10
  2244  116C  3400               	retlw	0
  2245  116D                     STR_54:	
  2246  116D  3425               	retlw	37	;'%'
  2247  116E  3475               	retlw	117	;'u'
  2248  116F  342C               	retlw	44	;','
  2249  1170  3400               	retlw	0
  2250  1171                     STR_50:	
  2251  1171  3452               	retlw	82	;'R'
  2252  1172  3444               	retlw	68	;'D'
  2253  1173  3441               	retlw	65	;'A'
  2254  1174  3400               	retlw	0
  2255  1175                     STR_49:	
  2256  1175  3457               	retlw	87	;'W'
  2257  1176  3444               	retlw	68	;'D'
  2258  1177  3441               	retlw	65	;'A'
  2259  1178  3400               	retlw	0
  2260  1179                     STR_45:	
  2261  1179  3441               	retlw	65	;'A'
  2262  117A  3443               	retlw	67	;'C'
  2263  117B  344B               	retlw	75	;'K'
  2264  117C  3400               	retlw	0
  2265  117D                     STR_14:	
  2266  117D  3425               	retlw	37	;'%'
  2267  117E  3464               	retlw	100	;'d'
  2268  117F  342C               	retlw	44	;','
  2269  1180  3400               	retlw	0
  2270  1181                     STR_5:	
  2271  1181  3453               	retlw	83	;'S'
  2272  1182  3454               	retlw	84	;'T'
  2273  1183  3441               	retlw	65	;'A'
  2274  1184  3400               	retlw	0
  2275  1185                     STR_20:	
  2276  1185  3449               	retlw	73	;'I'
  2277  1186  3432               	retlw	50	;'2'
  2278  1187  3443               	retlw	67	;'C'
  2279  1188  3400               	retlw	0
  2280  1189                     STR_32:	
  2281  1189  3443               	retlw	67	;'C'
  2282  118A  3453               	retlw	83	;'S'
  2283  118B  3443               	retlw	67	;'C'
  2284  118C  3400               	retlw	0
  2285  118D                     STR_27:	
  2286  118D  3452               	retlw	82	;'R'
  2287  118E  3453               	retlw	83	;'S'
  2288  118F  3443               	retlw	67	;'C'
  2289  1190  3400               	retlw	0
  2290  1191                     STR_26:	
  2291  1191  3453               	retlw	83	;'S'
  2292  1192  3453               	retlw	83	;'S'
  2293  1193  3443               	retlw	67	;'C'
  2294  1194  3400               	retlw	0
  2295  1195                     STR_24:	
  2296  1195  3457               	retlw	87	;'W'
  2297  1196  3453               	retlw	83	;'S'
  2298  1197  3443               	retlw	67	;'C'
  2299  1198  3400               	retlw	0
  2300  1199                     STR_33:	
  2301  1199  3453               	retlw	83	;'S'
  2302  119A  3445               	retlw	69	;'E'
  2303  119B  344E               	retlw	78	;'N'
  2304  119C  3400               	retlw	0
  2305  119D                     STR_1:	
  2306  119D  3457               	retlw	87	;'W'
  2307  119E  3448               	retlw	72	;'H'
  2308  119F  344F               	retlw	79	;'O'
  2309  11A0  3400               	retlw	0
  2310  11A1                     STR_21:	
  2311  11A1  344D               	retlw	77	;'M'
  2312  11A2  3441               	retlw	65	;'A'
  2313  11A3  3450               	retlw	80	;'P'
  2314  11A4  3400               	retlw	0
  2315  11A5                     STR_6:	
  2316  11A5  3453               	retlw	83	;'S'
  2317  11A6  3454               	retlw	84	;'T'
  2318  11A7  3450               	retlw	80	;'P'
  2319  11A8  3400               	retlw	0
  2320  11A9                     STR_22:	
  2321  11A9  3450               	retlw	80	;'P'
  2322  11AA  344F               	retlw	79	;'O'
  2323  11AB  3453               	retlw	83	;'S'
  2324  11AC  3400               	retlw	0
  2325  11AD                     STR_10:	
  2326  11AD  3447               	retlw	71	;'G'
  2327  11AE  3445               	retlw	69	;'E'
  2328  11AF  3454               	retlw	84	;'T'
  2329  11B0  3400               	retlw	0
  2330  11B1                     STR_9:	
  2331  11B1  3453               	retlw	83	;'S'
  2332  11B2  3445               	retlw	69	;'E'
  2333  11B3  3454               	retlw	84	;'T'
  2334  11B4  3400               	retlw	0
  2335  11B5                     STR_34:	
  2336  11B5  3453               	retlw	83	;'S'
  2337  11B6  3446               	retlw	70	;'F'
  2338  11B7  3454               	retlw	84	;'T'
  2339  11B8  3400               	retlw	0
  2340  11B9                     STR_35:	
  2341  11B9  3455               	retlw	85	;'U'
  2342  11BA  3446               	retlw	70	;'F'
  2343  11BB  3454               	retlw	84	;'T'
  2344  11BC  3400               	retlw	0
  2345  11BD                     STR_4:	
  2346  11BD  3453               	retlw	83	;'S'
  2347  11BE  3441               	retlw	65	;'A'
  2348  11BF  3456               	retlw	86	;'V'
  2349  11C0  3400               	retlw	0
  2350  11C1                     STR_29:	
  2351  11C1  3425               	retlw	37	;'%'
  2352  11C2  3464               	retlw	100	;'d'
  2353  11C3  347C               	retlw	124	;'|'
  2354  11C4  3400               	retlw	0
  2355  1088                     
  2356                           ; #config settings
  2357  0000                     
  2358                           	psect	cinit
  2359  003E                     start_initialization:	
  2360  003E                     __initialization:		;BIGRAM
  2361                           
  2362                           ; Initialize objects allocated to BANK1
  2363  003E  0021               	movlb	1	; select bank1
  2364  003F  319F  278D  3180   	fcall	__pidataBANK1	;fetch initializer
  2365  0042  00EC               	movwf	__pdataBANK1& (0+127)
  2366  0043  319F  278E  3180   	fcall	__pidataBANK1+1	;fetch initializer
  2367  0046  00ED               	movwf	(__pdataBANK1+1)& (0+127)
  2368  0047  319F  278F  3180   	fcall	__pidataBANK1+2	;fetch initializer
  2369  004A  00EE               	movwf	(__pdataBANK1+2)& (0+127)
  2370                           
  2371                           ; Initialize objects allocated to BANK2
  2372  004B  0022               	movlb	2	; select bank2
  2373  004C  319F  278A  3180   	fcall	__pidataBANK2	;fetch initializer
  2374  004F  00E2               	movwf	__pdataBANK2& (0+127)
  2375  0050  319F  278B  3180   	fcall	__pidataBANK2+1	;fetch initializer
  2376  0053  00E3               	movwf	(__pdataBANK2+1)& (0+127)
  2377  0054  319F  278C  3180   	fcall	__pidataBANK2+2	;fetch initializer
  2378  0057  00E4               	movwf	(__pdataBANK2+2)& (0+127)
  2379                           
  2380                           ; Clear objects allocated to BIGRAM
  2381  0058  3030               	movlw	low (0+9008)
  2382  0059  0084               	movwf	4
  2383  005A  3023               	movlw	high (0+9008)
  2384  005B  0085               	movwf	5
  2385  005C  30C0               	movlw	192
  2386  005D  00FE               	movwf	btemp
  2387  005E  3000               	movlw	0
  2388  005F  00FF               	movwf	btemp+1
  2389  0060  319F  27D8  3180   	fcall	clear_ram0
  2390                           
  2391                           ; Clear objects allocated to COMMON
  2392  0063  01F0               	clrf	__pbssCOMMON& (0+127)
  2393  0064  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  2394  0065  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  2395  0066  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  2396  0067  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  2397  0068  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
  2398  0069  01F6               	clrf	(__pbssCOMMON+6)& (0+127)
  2399                           
  2400                           ; Clear objects allocated to BANK0
  2401  006A  0020               	movlb	0	; select bank0
  2402  006B  01EB               	clrf	__pbssBANK0& (0+127)
  2403  006C  01EC               	clrf	(__pbssBANK0+1)& (0+127)
  2404  006D  01ED               	clrf	(__pbssBANK0+2)& (0+127)
  2405  006E  01EE               	clrf	(__pbssBANK0+3)& (0+127)
  2406                           
  2407                           ; Clear objects allocated to BANK1
  2408  006F  30D9               	movlw	low __pbssBANK1
  2409  0070  0084               	movwf	4
  2410  0071  3000               	movlw	high __pbssBANK1
  2411  0072  0085               	movwf	5
  2412  0073  3013               	movlw	19
  2413  0074  00FE               	movwf	btemp
  2414  0075  3000               	movlw	0
  2415  0076  00FF               	movwf	btemp+1
  2416  0077  319F  27D8  3180   	fcall	clear_ram0
  2417                           
  2418                           ; Clear objects allocated to BANK2
  2419  007A  3020               	movlw	low __pbssBANK2
  2420  007B  0084               	movwf	4
  2421  007C  3001               	movlw	high __pbssBANK2
  2422  007D  0085               	movwf	5
  2423  007E  3042               	movlw	66
  2424  007F  00FE               	movwf	btemp
  2425  0080  3000               	movlw	0
  2426  0081  00FF               	movwf	btemp+1
  2427  0082  319F  27D8  3180   	fcall	clear_ram0
  2428                           
  2429                           ; Clear objects allocated to BANK3
  2430  0085  30A0               	movlw	low __pbssBANK3
  2431  0086  0084               	movwf	4
  2432  0087  3001               	movlw	high __pbssBANK3
  2433  0088  0085               	movwf	5
  2434  0089  303C               	movlw	60
  2435  008A  00FE               	movwf	btemp
  2436  008B  3000               	movlw	0
  2437  008C  00FF               	movwf	btemp+1
  2438  008D  319F  27D8  3180   	fcall	clear_ram0
  2439                           
  2440                           ; Clear objects allocated to BANK4
  2441  0090  3020               	movlw	low __pbssBANK4
  2442  0091  0084               	movwf	4
  2443  0092  3002               	movlw	high __pbssBANK4
  2444  0093  0085               	movwf	5
  2445  0094  3030               	movlw	48
  2446  0095  00FE               	movwf	btemp
  2447  0096  3000               	movlw	0
  2448  0097  00FF               	movwf	btemp+1
  2449  0098  319F  27D8  3180   	fcall	clear_ram0
  2450                           
  2451                           ; Clear objects allocated to BANK5
  2452  009B  30A0               	movlw	low __pbssBANK5
  2453  009C  0084               	movwf	4
  2454  009D  3002               	movlw	high __pbssBANK5
  2455  009E  0085               	movwf	5
  2456  009F  3040               	movlw	64
  2457  00A0  00FE               	movwf	btemp
  2458  00A1  3000               	movlw	0
  2459  00A2  00FF               	movwf	btemp+1
  2460  00A3  319F  27D8  3180   	fcall	clear_ram0
  2461                           
  2462                           ; Clear objects allocated to BANK6
  2463  00A6  3020               	movlw	low __pbssBANK6
  2464  00A7  0084               	movwf	4
  2465  00A8  3003               	movlw	high __pbssBANK6
  2466  00A9  0085               	movwf	5
  2467  00AA  3040               	movlw	64
  2468  00AB  00FE               	movwf	btemp
  2469  00AC  3000               	movlw	0
  2470  00AD  00FF               	movwf	btemp+1
  2471  00AE  319F  27D8         	fcall	clear_ram0
  2472  00B0                     end_of_initialization:	
  2473                           ;End of C runtime variable initialization code
  2474                           
  2475  00B0                     __end_of__initialization:	
  2476  00B0  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2477  00B1  0020               	movlb	0
  2478  00B2  3194  2CC1         	ljmp	_main	;jump to C main() function
  2479                           
  2480                           	psect	bssCOMMON
  2481  0070                     __pbssCOMMON:	
  2482  0070                     inv_handler@t:	
  2483  0070                     	ds	2
  2484  0072                     command_handler@pos:	
  2485  0072                     	ds	1
  2486  0073                     _eusartRxHead:	
  2487  0073                     	ds	1
  2488  0074                     _eusartTxBufferRemaining:	
  2489  0074                     	ds	1
  2490  0075                     _eusartTxTail:	
  2491  0075                     	ds	1
  2492  0076                     _eusartTxHead:	
  2493  0076                     	ds	1
  2494                           
  2495                           	psect	bssBANK0
  2496  006B                     __pbssBANK0:	
  2497  006B                     _i:	
  2498  006B                     	ds	1
  2499  006C                     _eusartRxTail:	
  2500  006C                     	ds	1
  2501  006D                     I2C1_ISR@i2c_address:	
  2502  006D                     	ds	2
  2503                           
  2504                           	psect	bssBANK1
  2505  00D9                     __pbssBANK1:	
  2506  00D9                     _i2c1_object:	
  2507  00D9                     	ds	5
  2508  00DE                     _value:	
  2509  00DE                     	ds	1
  2510  00DF                     _cnt:	
  2511  00DF                     	ds	1
  2512  00E0                     tick_handler@cmd_next:	
  2513  00E0                     	ds	1
  2514  00E1                     dev_map_iterator@yy:	
  2515  00E1                     	ds	1
  2516  00E2                     dev_map_iterator@xx:	
  2517  00E2                     	ds	1
  2518  00E3                     _devs:	
  2519  00E3                     	ds	1
  2520  00E4                     _timer0ReloadVal:	
  2521  00E4                     	ds	1
  2522  00E5                     _eusartRxCount:	
  2523  00E5                     	ds	1
  2524  00E6                     I2C1_ISR@i2c_10bit_address_restart:	
  2525  00E6                     	ds	1
  2526  00E7                     I2C1_ISR@i2c_bytes_left:	
  2527  00E7                     	ds	1
  2528  00E8                     _p_i2c1_current:	
  2529  00E8                     	ds	1
  2530  00E9                     _p_i2c1_trb_current:	
  2531  00E9                     	ds	1
  2532  00EA                     _i2c1_trb_count:	
  2533  00EA                     	ds	1
  2534  00EB                     _i2c1_state:	
  2535  00EB                     	ds	1
  2536                           
  2537                           	psect	dataBANK1
  2538  00EC                     __pdataBANK1:	
  2539  00EC                     put_cmd@idx:	
  2540  00EC                     	ds	1
  2541  00ED                     _filter:	
  2542  00ED                     	ds	1
  2543  00EE                     _BACKPLANE_SLAVE_ADDRESS:	
  2544  00EE                     	ds	1
  2545                           
  2546                           	psect	bssBANK2
  2547  0120                     __pbssBANK2:	
  2548  0120                     _dev_map:	
  2549  0120                     	ds	4
  2550  0124                     _float100:	
  2551  0124                     	ds	2
  2552  0126                     _device_id_:	
  2553  0126                     	ds	2
  2554  0128                     _PROTOCOL_Tick_Handler:	
  2555  0128                     	ds	2
  2556  012A                     _PROTOCOL_Inv_Handler:	
  2557  012A                     	ds	2
  2558  012C                     _PROTOCOL_Extension_Handler:	
  2559  012C                     	ds	2
  2560  012E                     _PROTOCOL_Loop_Func:	
  2561  012E                     	ds	2
  2562  0130                     _PROTOCOL_Set_Handler:	
  2563  0130                     	ds	2
  2564  0132                     _PROTOCOL_Stop_Handler:	
  2565  0132                     	ds	2
  2566  0134                     _PROTOCOL_Start_Handler:	
  2567  0134                     	ds	2
  2568  0136                     tick_handler@t:	
  2569  0136                     	ds	2
  2570  0138                     I2C1_ISR@pi2c_buf_ptr:	
  2571  0138                     	ds	2
  2572  013A                     _data:	
  2573  013A                     	ds	1
  2574  013B                     _j:	
  2575  013B                     	ds	1
  2576  013C                     _backplane_slave_enabled:	
  2577  013C                     	ds	1
  2578  013D                     _readbuf_status:	
  2579  013D                     	ds	1
  2580  013E                     _tmr_overflow:	
  2581  013E                     	ds	1
  2582  013F                     _tmr_cnt:	
  2583  013F                     	ds	1
  2584  0140                     _sec_cnt:	
  2585  0140                     	ds	1
  2586  0141                     _invoked:	
  2587  0141                     	ds	1
  2588  0142                     _running:	
  2589  0142                     	ds	1
  2590  0143                     _locked:	
  2591  0143                     	ds	1
  2592  0144                     _slave_address:	
  2593  0144                     	ds	1
  2594  0145                     _do_func:	
  2595  0145                     	ds	1
  2596  0146                     _timer_cnt:	
  2597  0146                     	ds	1
  2598  0147                     _readbuf:	
  2599  0147                     	ds	5
  2600  014C                     I2C1_MasterRead@trBlock:	
  2601  014C                     	ds	5
  2602  0151                     I2C1_MasterWrite@trBlock:	
  2603  0151                     	ds	5
  2604  0156                     PROTOCOL_Send_float@pbuf:	
  2605  0156                     	ds	3
  2606  0159                     _i2c1_tr_queue:	
  2607  0159                     	ds	3
  2608  015C                     PROTOCOL_Send_int16_t@pbuf:	
  2609  015C                     	ds	2
  2610  015E                     PROTOCOL_Send_uint16_t@pbuf:	
  2611  015E                     	ds	2
  2612  0160                     PROTOCOL_Send_int8_t@pbuf:	
  2613  0160                     	ds	1
  2614  0161                     PROTOCOL_Send_uint8_t@pbuf:	
  2615  0161                     	ds	1
  2616                           
  2617                           	psect	dataBANK2
  2618  0162                     __pdataBANK2:	
  2619  0162                     _tmr_scaler:	
  2620  0162                     	ds	1
  2621  0163                     dev_map_iterator@start:	
  2622  0163                     	ds	1
  2623  0164                     _type_no_data:	
  2624  0164                     	ds	1
  2625                           
  2626                           	psect	bssBANK3
  2627  01A0                     __pbssBANK3:	
  2628  01A0                     _schedule:	
  2629  01A0                     	ds	28
  2630  01BC                     _sendbuf:	
  2631  01BC                     	ds	16
  2632  01CC                     _read_buf:	
  2633  01CC                     	ds	16
  2634                           
  2635                           	psect	bssBANK4
  2636  0220                     __pbssBANK4:	
  2637  0220                     _buf:	
  2638  0220                     	ds	48
  2639                           
  2640                           	psect	bssBANK5
  2641  02A0                     __pbssBANK5:	
  2642  02A0                     _eusartTxBuffer:	
  2643  02A0                     	ds	64
  2644                           
  2645                           	psect	bssBANK6
  2646  0320                     __pbssBANK6:	
  2647  0320                     _eusartRxBuffer:	
  2648  0320                     	ds	64
  2649                           
  2650                           	psect	clrtext
  2651  1FD8                     clear_ram0:	
  2652                           ;	Called with FSR0 containing the base address, and
  2653                           ;	btemp/btemp+1 has the size to clear
  2654                           
  2655  1FD8  0064               	clrwdt	;clear the watchdog before getting into this loop
  2656  1FD9                     clrloop0:	
  2657  1FD9  0180               	clrf	0	;clear RAM location pointed to by FSR
  2658  1FDA  3101               	addfsr 0,1
  2659  1FDB  3001               	movlw	1
  2660  1FDC  02FE               	subwf	126,f
  2661  1FDD  3000               	movlw	0
  2662  1FDE  3BFF               	subwfb	127,f
  2663  1FDF  087F               	movf	127,w
  2664  1FE0  047E               	iorwf	126,w
  2665  1FE1  1903               	btfsc	3,2
  2666  1FE2  3400               	retlw	0	;all done for this memory range, return
  2667  1FE3  2FD9               	goto	clrloop0	;have we reached the end yet?
  2668                           
  2669                           	psect	cstackBANK1
  2670  00A0                     __pcstackBANK1:	
  2671  00A0                     exec_remote_cmd@send_buf:	
  2672                           
  2673                           ; 50 bytes @ 0x0
  2674  00A0                     	ds	50
  2675  00D2                     exec_remote_cmd@idx:	
  2676                           
  2677                           ; 1 bytes @ 0x32
  2678  00D2                     	ds	1
  2679  00D3                     exec_remote_cmd@j:	
  2680                           
  2681                           ; 1 bytes @ 0x33
  2682  00D3                     	ds	1
  2683  00D4                     exec_remote_cmd@i:	
  2684                           
  2685                           ; 1 bytes @ 0x34
  2686  00D4                     	ds	1
  2687  00D5                     exec_remote_cmd@status:	
  2688                           
  2689                           ; 1 bytes @ 0x35
  2690  00D5                     	ds	1
  2691  00D6                     exec_remote_cmd@data:	
  2692                           
  2693                           ; 1 bytes @ 0x36
  2694  00D6                     	ds	1
  2695  00D7                     exec_remote_cmd@buf:	
  2696                           
  2697                           ; 2 bytes @ 0x37
  2698  00D7                     	ds	2
  2699                           
  2700                           	psect	cstackCOMMON
  2701  0077                     __pcstackCOMMON:	
  2702  0077                     ?_isdigit:	
  2703  0077                     ?_I2C1_Stop:	
  2704                           ; 1 bit 
  2705                           
  2706  0077                     ??_I2C1_Stop:	
  2707                           ; 1 bytes @ 0x0
  2708                           
  2709  0077                     ?_I2C1_FunctionComplete:	
  2710                           ; 1 bytes @ 0x0
  2711                           
  2712  0077                     ??_I2C1_FunctionComplete:	
  2713                           ; 1 bytes @ 0x0
  2714                           
  2715  0077                     ?_OSCILLATOR_Initialize:	
  2716                           ; 1 bytes @ 0x0
  2717                           
  2718  0077                     ?_WDT_Initialize:	
  2719                           ; 1 bytes @ 0x0
  2720                           
  2721  0077                     ?_TMR0_Initialize:	
  2722                           ; 1 bytes @ 0x0
  2723                           
  2724  0077                     ?_PROTOCOL_Loop:	
  2725                           ; 1 bytes @ 0x0
  2726                           
  2727  0077                     ?_I2C1_Initialize:	
  2728                           ; 1 bytes @ 0x0
  2729                           
  2730  0077                     ?_I2C1_ISR:	
  2731                           ; 1 bytes @ 0x0
  2732                           
  2733  0077                     ?_I2C1_BusCollisionISR:	
  2734                           ; 1 bytes @ 0x0
  2735                           
  2736  0077                     ??_I2C1_BusCollisionISR:	
  2737                           ; 1 bytes @ 0x0
  2738                           
  2739  0077                     ?_DATAEE_ReadByte:	
  2740                           ; 1 bytes @ 0x0
  2741                           
  2742  0077                     ?_EUSART_Initialize:	
  2743                           ; 1 bytes @ 0x0
  2744                           
  2745  0077                     ?_EUSART_Read:	
  2746                           ; 1 bytes @ 0x0
  2747                           
  2748  0077                     ?_EUSART_Write:	
  2749                           ; 1 bytes @ 0x0
  2750                           
  2751  0077                     ?_putch:	
  2752                           ; 1 bytes @ 0x0
  2753                           
  2754  0077                     ?_EUSART_Transmit_ISR:	
  2755                           ; 1 bytes @ 0x0
  2756                           
  2757  0077                     ??_EUSART_Transmit_ISR:	
  2758                           ; 1 bytes @ 0x0
  2759                           
  2760  0077                     ?_EUSART_Receive_ISR:	
  2761                           ; 1 bytes @ 0x0
  2762                           
  2763  0077                     ??_EUSART_Receive_ISR:	
  2764                           ; 1 bytes @ 0x0
  2765                           
  2766  0077                     ?_PIN_MANAGER_Initialize:	
  2767                           ; 1 bytes @ 0x0
  2768                           
  2769  0077                     ?_INTERRUPT_InterruptManager:	
  2770                           ; 1 bytes @ 0x0
  2771                           
  2772  0077                     ?_SYSTEM_Initialize:	
  2773                           ; 1 bytes @ 0x0
  2774                           
  2775  0077                     ?_TMR0_HasOverflowOccured:	
  2776                           ; 1 bytes @ 0x0
  2777                           
  2778  0077                     ?_exec_remote_cmd:	
  2779                           ; 1 bytes @ 0x0
  2780                           
  2781  0077                     ?_init:	
  2782                           ; 1 bytes @ 0x0
  2783                           
  2784  0077                     ?_add_dev:	
  2785                           ; 1 bytes @ 0x0
  2786                           
  2787  0077                     ?_del_dev:	
  2788                           ; 1 bytes @ 0x0
  2789                           
  2790  0077                     ?_dev_map_iterator:	
  2791                           ; 1 bytes @ 0x0
  2792                           
  2793  0077                     ?_scan_dev:	
  2794                           ; 1 bytes @ 0x0
  2795                           
  2796  0077                     ?_check_plg:	
  2797                           ; 1 bytes @ 0x0
  2798                           
  2799  0077                     ?_detected:	
  2800                           ; 1 bytes @ 0x0
  2801                           
  2802  0077                     ?_print_dev_map:	
  2803                           ; 1 bytes @ 0x0
  2804                           
  2805  0077                     ?_sen:	
  2806                           ; 1 bytes @ 0x0
  2807                           
  2808  0077                     ?_one_shot_sen:	
  2809                           ; 1 bytes @ 0x0
  2810                           
  2811  0077                     ?_fetch:	
  2812                           ; 1 bytes @ 0x0
  2813                           
  2814  0077                     ?_tick_handler:	
  2815                           ; 1 bytes @ 0x0
  2816                           
  2817  0077                     ?_inv_handler:	
  2818                           ; 1 bytes @ 0x0
  2819                           
  2820  0077                     ?_put_cmd:	
  2821                           ; 1 bytes @ 0x0
  2822                           
  2823  0077                     ?_main:	
  2824                           ; 1 bytes @ 0x0
  2825                           
  2826  0077                     ?_PROTOCOL_Write_Device_Address:	
  2827                           ; 1 bytes @ 0x0
  2828                           
  2829  0077                     ?_PROTOCOL_Read_Device_Address:	
  2830                           ; 1 bytes @ 0x0
  2831                           
  2832  0077                     ?_PROTOCOL_STA:	
  2833                           ; 1 bytes @ 0x0
  2834                           
  2835  0077                     ?_PROTOCOL_STP:	
  2836                           ; 1 bytes @ 0x0
  2837                           
  2838  0077                     ?_PROTOCOL_SAV:	
  2839                           ; 1 bytes @ 0x0
  2840                           
  2841  0077                     ?_PROTOCOL_SET:	
  2842                           ; 1 bytes @ 0x0
  2843                           
  2844  0077                     ?_PROTOCOL_EXT:	
  2845                           ; 1 bytes @ 0x0
  2846                           
  2847                           
  2848                           ; 1 bytes @ 0x0
  2849  0077                     	ds	1
  2850  0078                     I2C1_Stop@completion_code:	
  2851                           
  2852                           ; 1 bytes @ 0x1
  2853  0078                     	ds	1
  2854  0079                     ??_I2C1_ISR:	
  2855                           
  2856                           ; 1 bytes @ 0x2
  2857  0079                     	ds	4
  2858  007D                     ??_INTERRUPT_InterruptManager:	
  2859                           
  2860                           ; 1 bytes @ 0x6
  2861  007D                     	ds	1
  2862                           
  2863                           	psect	cstackBANK0
  2864  0020                     __pcstackBANK0:	
  2865  0020                     ?_I2C1_MasterWriteTRBBuild:	
  2866  0020                     ?_I2C1_MasterTRBInsert:	
  2867                           ; 1 bytes @ 0x0
  2868                           
  2869  0020                     ?_I2C1_MasterReadTRBBuild:	
  2870                           ; 1 bytes @ 0x0
  2871                           
  2872  0020                     ??_OSCILLATOR_Initialize:	
  2873                           ; 1 bytes @ 0x0
  2874                           
  2875  0020                     ??_WDT_Initialize:	
  2876                           ; 1 bytes @ 0x0
  2877                           
  2878  0020                     ??_TMR0_Initialize:	
  2879                           ; 1 bytes @ 0x0
  2880                           
  2881  0020                     ?_PROTOCOL_Set_Extension_Handler:	
  2882                           ; 1 bytes @ 0x0
  2883                           
  2884  0020                     ?_PROTOCOL_Set_Tick_Handler:	
  2885                           ; 1 bytes @ 0x0
  2886                           
  2887  0020                     ??_isdigit:	
  2888                           ; 1 bytes @ 0x0
  2889                           
  2890  0020                     ??_I2C1_Initialize:	
  2891                           ; 1 bytes @ 0x0
  2892                           
  2893  0020                     ?_DATAEE_WriteByte:	
  2894                           ; 1 bytes @ 0x0
  2895                           
  2896  0020                     ??_DATAEE_ReadByte:	
  2897                           ; 1 bytes @ 0x0
  2898                           
  2899  0020                     ??_EUSART_Initialize:	
  2900                           ; 1 bytes @ 0x0
  2901                           
  2902  0020                     ??_EUSART_Read:	
  2903                           ; 1 bytes @ 0x0
  2904                           
  2905  0020                     ??_EUSART_Write:	
  2906                           ; 1 bytes @ 0x0
  2907                           
  2908  0020                     ??_PIN_MANAGER_Initialize:	
  2909                           ; 1 bytes @ 0x0
  2910                           
  2911  0020                     ??_TMR0_HasOverflowOccured:	
  2912                           ; 1 bytes @ 0x0
  2913                           
  2914  0020                     ??_dev_map_iterator:	
  2915                           ; 1 bytes @ 0x0
  2916                           
  2917  0020                     ??_PROTOCOL_Read_Device_Address:	
  2918                           ; 1 bytes @ 0x0
  2919                           
  2920  0020                     ??_PROTOCOL_STA:	
  2921                           ; 1 bytes @ 0x0
  2922                           
  2923  0020                     ??_PROTOCOL_STP:	
  2924                           ; 1 bytes @ 0x0
  2925                           
  2926  0020                     ??_PROTOCOL_SET:	
  2927                           ; 1 bytes @ 0x0
  2928                           
  2929  0020                     ?_strncmp:	
  2930                           ; 1 bytes @ 0x0
  2931                           
  2932  0020                     ?_concat:	
  2933                           ; 2 bytes @ 0x0
  2934                           
  2935  0020                     ?___wmul:	
  2936                           ; 2 bytes @ 0x0
  2937                           
  2938  0020                     ?___awdiv:	
  2939                           ; 2 bytes @ 0x0
  2940                           
  2941  0020                     ?___awmod:	
  2942                           ; 2 bytes @ 0x0
  2943                           
  2944  0020                     ?___lwdiv:	
  2945                           ; 2 bytes @ 0x0
  2946                           
  2947  0020                     I2C1_MasterTRBInsert@ptrb_list:	
  2948                           ; 2 bytes @ 0x0
  2949                           
  2950  0020                     I2C1_MasterWriteTRBBuild@pdata:	
  2951                           ; 1 bytes @ 0x0
  2952                           
  2953  0020                     DATAEE_WriteByte@bData:	
  2954                           ; 1 bytes @ 0x0
  2955                           
  2956  0020                     DATAEE_ReadByte@bAdd:	
  2957                           ; 1 bytes @ 0x0
  2958                           
  2959  0020                     concat@lsb:	
  2960                           ; 1 bytes @ 0x0
  2961                           
  2962  0020                     _isdigit$1463:	
  2963                           ; 1 bytes @ 0x0
  2964                           
  2965  0020                     I2C1_MasterReadTRBBuild@pdata:	
  2966                           ; 1 bytes @ 0x0
  2967                           
  2968  0020                     PROTOCOL_Set_Extension_Handler@extension_handler:	
  2969                           ; 2 bytes @ 0x0
  2970                           
  2971  0020                     PROTOCOL_Set_Tick_Handler@tick_handler:	
  2972                           ; 2 bytes @ 0x0
  2973                           
  2974  0020                     ___wmul@multiplier:	
  2975                           ; 2 bytes @ 0x0
  2976                           
  2977  0020                     ___awdiv@divisor:	
  2978                           ; 2 bytes @ 0x0
  2979                           
  2980  0020                     ___awmod@divisor:	
  2981                           ; 2 bytes @ 0x0
  2982                           
  2983  0020                     ___lwdiv@divisor:	
  2984                           ; 2 bytes @ 0x0
  2985                           
  2986  0020                     strncmp@s1:	
  2987                           ; 2 bytes @ 0x0
  2988                           
  2989                           
  2990                           ; 2 bytes @ 0x0
  2991  0020                     	ds	1
  2992  0021                     ?_PROTOCOL_Initialize:	
  2993  0021                     ??_DATAEE_WriteByte:	
  2994                           ; 1 bytes @ 0x1
  2995                           
  2996  0021                     ??_SYSTEM_Initialize:	
  2997                           ; 1 bytes @ 0x1
  2998                           
  2999  0021                     I2C1_MasterTRBInsert@pflag:	
  3000                           ; 1 bytes @ 0x1
  3001                           
  3002  0021                     I2C1_MasterWriteTRBBuild@length:	
  3003                           ; 1 bytes @ 0x1
  3004                           
  3005  0021                     DATAEE_WriteByte@bAdd:	
  3006                           ; 1 bytes @ 0x1
  3007                           
  3008  0021                     EUSART_Read@readValue:	
  3009                           ; 1 bytes @ 0x1
  3010                           
  3011  0021                     EUSART_Write@txData:	
  3012                           ; 1 bytes @ 0x1
  3013                           
  3014  0021                     PROTOCOL_SET@value_:	
  3015                           ; 1 bytes @ 0x1
  3016                           
  3017  0021                     isdigit@c:	
  3018                           ; 1 bytes @ 0x1
  3019                           
  3020  0021                     PROTOCOL_Initialize@device_id:	
  3021                           ; 1 bytes @ 0x1
  3022                           
  3023                           
  3024                           ; 2 bytes @ 0x1
  3025  0021                     	ds	1
  3026  0022                     ??_I2C1_MasterTRBInsert:	
  3027  0022                     ??_PROTOCOL_Set_Extension_Handler:	
  3028                           ; 1 bytes @ 0x2
  3029                           
  3030  0022                     ??_PROTOCOL_Set_Tick_Handler:	
  3031                           ; 1 bytes @ 0x2
  3032                           
  3033  0022                     ??_putch:	
  3034                           ; 1 bytes @ 0x2
  3035                           
  3036  0022                     ??_concat:	
  3037                           ; 1 bytes @ 0x2
  3038                           
  3039  0022                     I2C1_MasterReadTRBBuild@length:	
  3040                           ; 1 bytes @ 0x2
  3041                           
  3042  0022                     DATAEE_WriteByte@GIEBitValue:	
  3043                           ; 1 bytes @ 0x2
  3044                           
  3045  0022                     putch@txData:	
  3046                           ; 1 bytes @ 0x2
  3047                           
  3048  0022                     I2C1_MasterWriteTRBBuild@address:	
  3049                           ; 1 bytes @ 0x2
  3050                           
  3051  0022                     ___wmul@multiplicand:	
  3052                           ; 2 bytes @ 0x2
  3053                           
  3054  0022                     ___awdiv@dividend:	
  3055                           ; 2 bytes @ 0x2
  3056                           
  3057  0022                     ___awmod@dividend:	
  3058                           ; 2 bytes @ 0x2
  3059                           
  3060  0022                     ___lwdiv@dividend:	
  3061                           ; 2 bytes @ 0x2
  3062                           
  3063  0022                     strncmp@s2:	
  3064                           ; 2 bytes @ 0x2
  3065                           
  3066                           
  3067                           ; 2 bytes @ 0x2
  3068  0022                     	ds	1
  3069  0023                     ??_PROTOCOL_Write_Device_Address:	
  3070  0023                     ??_PROTOCOL_SAV:	
  3071                           ; 1 bytes @ 0x3
  3072                           
  3073  0023                     I2C1_MasterTRBInsert@count:	
  3074                           ; 1 bytes @ 0x3
  3075                           
  3076  0023                     PROTOCOL_Initialize@start_handler:	
  3077                           ; 1 bytes @ 0x3
  3078                           
  3079  0023                     I2C1_MasterReadTRBBuild@address:	
  3080                           ; 1 bytes @ 0x3
  3081                           
  3082                           
  3083                           ; 2 bytes @ 0x3
  3084  0023                     	ds	1
  3085  0024                     ??_I2C1_MasterWriteTRBBuild:	
  3086  0024                     ??___wmul:	
  3087                           ; 1 bytes @ 0x4
  3088                           
  3089  0024                     ??___awdiv:	
  3090                           ; 1 bytes @ 0x4
  3091                           
  3092  0024                     ??___awmod:	
  3093                           ; 1 bytes @ 0x4
  3094                           
  3095  0024                     ??___lwdiv:	
  3096                           ; 1 bytes @ 0x4
  3097                           
  3098  0024                     PROTOCOL_Initialize@stop_handler:	
  3099                           ; 1 bytes @ 0x4
  3100                           
  3101  0024                     PROTOCOL_Write_Device_Address@device_id_i2c:	
  3102                           ; 1 bytes @ 0x4
  3103                           
  3104  0024                     ___wmul@product:	
  3105                           ; 1 bytes @ 0x4
  3106                           
  3107  0024                     strncmp@len:	
  3108                           ; 2 bytes @ 0x4
  3109                           
  3110                           
  3111                           ; 2 bytes @ 0x4
  3112  0024                     	ds	1
  3113  0025                     ??_I2C1_MasterReadTRBBuild:	
  3114  0025                     PROTOCOL_Initialize@set_handler:	
  3115                           ; 1 bytes @ 0x5
  3116                           
  3117  0025                     ___awdiv@counter:	
  3118                           ; 1 bytes @ 0x5
  3119                           
  3120  0025                     ___awmod@counter:	
  3121                           ; 1 bytes @ 0x5
  3122                           
  3123  0025                     ___lwdiv@quotient:	
  3124                           ; 1 bytes @ 0x5
  3125                           
  3126                           
  3127                           ; 2 bytes @ 0x5
  3128  0025                     	ds	1
  3129  0026                     ??_strncmp:	
  3130  0026                     ?_atoi:	
  3131                           ; 1 bytes @ 0x6
  3132                           
  3133  0026                     ?_strcpy:	
  3134                           ; 2 bytes @ 0x6
  3135                           
  3136  0026                     I2C1_MasterWriteTRBBuild@ptrb:	
  3137                           ; 2 bytes @ 0x6
  3138                           
  3139  0026                     dev_map_iterator@exist:	
  3140                           ; 1 bytes @ 0x6
  3141                           
  3142  0026                     ___awdiv@sign:	
  3143                           ; 1 bytes @ 0x6
  3144                           
  3145  0026                     ___awmod@sign:	
  3146                           ; 1 bytes @ 0x6
  3147                           
  3148  0026                     PROTOCOL_Initialize@inv_handler:	
  3149                           ; 1 bytes @ 0x6
  3150                           
  3151  0026                     atoi@s:	
  3152                           ; 2 bytes @ 0x6
  3153                           
  3154  0026                     strcpy@to:	
  3155                           ; 2 bytes @ 0x6
  3156                           
  3157                           
  3158                           ; 2 bytes @ 0x6
  3159  0026                     	ds	1
  3160  0027                     ?_I2C1_MasterWrite:	
  3161  0027                     ?_abs:	
  3162                           ; 1 bytes @ 0x7
  3163                           
  3164  0027                     I2C1_MasterWrite@length:	
  3165                           ; 2 bytes @ 0x7
  3166                           
  3167  0027                     I2C1_MasterReadTRBBuild@ptrb:	
  3168                           ; 1 bytes @ 0x7
  3169                           
  3170  0027                     dev_map_iterator@dev_addr:	
  3171                           ; 1 bytes @ 0x7
  3172                           
  3173  0027                     concat@msb:	
  3174                           ; 1 bytes @ 0x7
  3175                           
  3176  0027                     ___lwdiv@counter:	
  3177                           ; 1 bytes @ 0x7
  3178                           
  3179  0027                     abs@a:	
  3180                           ; 1 bytes @ 0x7
  3181                           
  3182  0027                     ___awdiv@quotient:	
  3183                           ; 2 bytes @ 0x7
  3184                           
  3185                           
  3186                           ; 2 bytes @ 0x7
  3187  0027                     	ds	1
  3188  0028                     ??_atoi:	
  3189  0028                     ?_I2C1_MasterRead:	
  3190                           ; 1 bytes @ 0x8
  3191                           
  3192  0028                     ?___lwmod:	
  3193                           ; 1 bytes @ 0x8
  3194                           
  3195  0028                     PROTOCOL_Initialize@scaler:	
  3196                           ; 2 bytes @ 0x8
  3197                           
  3198  0028                     strcpy@from:	
  3199                           ; 1 bytes @ 0x8
  3200                           
  3201  0028                     I2C1_MasterWrite@address:	
  3202                           ; 1 bytes @ 0x8
  3203                           
  3204  0028                     I2C1_MasterRead@pdata:	
  3205                           ; 2 bytes @ 0x8
  3206                           
  3207  0028                     ___lwmod@divisor:	
  3208                           ; 2 bytes @ 0x8
  3209                           
  3210                           
  3211                           ; 2 bytes @ 0x8
  3212  0028                     	ds	1
  3213  0029                     ??_strcpy:	
  3214  0029                     ??_PROTOCOL_Initialize:	
  3215                           ; 1 bytes @ 0x9
  3216                           
  3217  0029                     ??_abs:	
  3218                           ; 1 bytes @ 0x9
  3219                           
  3220  0029                     ??_init:	
  3221                           ; 1 bytes @ 0x9
  3222                           
  3223  0029                     ??_add_dev:	
  3224                           ; 1 bytes @ 0x9
  3225                           
  3226  0029                     ??_del_dev:	
  3227                           ; 1 bytes @ 0x9
  3228                           
  3229  0029                     ??_detected:	
  3230                           ; 1 bytes @ 0x9
  3231                           
  3232                           
  3233                           ; 1 bytes @ 0x9
  3234  0029                     	ds	1
  3235  002A                     I2C1_MasterWrite@pflag:	
  3236  002A                     I2C1_MasterRead@length:	
  3237                           ; 1 bytes @ 0xA
  3238                           
  3239  002A                     atoi@sign:	
  3240                           ; 1 bytes @ 0xA
  3241                           
  3242  002A                     ___lwmod@dividend:	
  3243                           ; 1 bytes @ 0xA
  3244                           
  3245  002A                     strcpy@cp:	
  3246                           ; 2 bytes @ 0xA
  3247                           
  3248                           
  3249                           ; 2 bytes @ 0xA
  3250  002A                     	ds	1
  3251  002B                     ??_I2C1_MasterWrite:	
  3252  002B                     I2C1_MasterRead@address:	
  3253                           ; 1 bytes @ 0xB
  3254                           
  3255  002B                     atoi@a:	
  3256                           ; 2 bytes @ 0xB
  3257                           
  3258                           
  3259                           ; 2 bytes @ 0xB
  3260  002B                     	ds	1
  3261  002C                     ??_put_cmd:	
  3262  002C                     ??___lwmod:	
  3263                           ; 1 bytes @ 0xC
  3264                           
  3265  002C                     add_dev@x:	
  3266                           ; 1 bytes @ 0xC
  3267                           
  3268  002C                     del_dev@x:	
  3269                           ; 1 bytes @ 0xC
  3270                           
  3271  002C                     detected@y:	
  3272                           ; 1 bytes @ 0xC
  3273                           
  3274                           
  3275                           ; 1 bytes @ 0xC
  3276  002C                     	ds	1
  3277  002D                     I2C1_MasterWrite@pdata:	
  3278  002D                     I2C1_MasterRead@pflag:	
  3279                           ; 1 bytes @ 0xD
  3280                           
  3281  002D                     add_dev@old_map:	
  3282                           ; 1 bytes @ 0xD
  3283                           
  3284  002D                     del_dev@old_map:	
  3285                           ; 1 bytes @ 0xD
  3286                           
  3287  002D                     detected@x:	
  3288                           ; 1 bytes @ 0xD
  3289                           
  3290  002D                     ___lwmod@counter:	
  3291                           ; 1 bytes @ 0xD
  3292                           
  3293                           
  3294                           ; 1 bytes @ 0xD
  3295  002D                     	ds	1
  3296  002E                     ?_i2c1_write_no_data:	
  3297  002E                     ?_i2c1_write:	
  3298                           ; 1 bytes @ 0xE
  3299                           
  3300  002E                     ??_I2C1_MasterRead:	
  3301                           ; 1 bytes @ 0xE
  3302                           
  3303  002E                     ?_printf:	
  3304                           ; 1 bytes @ 0xE
  3305                           
  3306  002E                     add_dev@new_map:	
  3307                           ; 2 bytes @ 0xE
  3308                           
  3309  002E                     del_dev@new_map:	
  3310                           ; 1 bytes @ 0xE
  3311                           
  3312  002E                     detected@exist:	
  3313                           ; 1 bytes @ 0xE
  3314                           
  3315  002E                     i2c1_write@dev_addr:	
  3316                           ; 1 bytes @ 0xE
  3317                           
  3318  002E                     i2c1_write_no_data@dev_addr:	
  3319                           ; 2 bytes @ 0xE
  3320                           
  3321  002E                     printf@f:	
  3322                           ; 2 bytes @ 0xE
  3323                           
  3324                           
  3325                           ; 2 bytes @ 0xE
  3326  002E                     	ds	1
  3327  002F                     init@dev_addr:	
  3328  002F                     add_dev@y:	
  3329                           ; 1 bytes @ 0xF
  3330                           
  3331  002F                     del_dev@y:	
  3332                           ; 1 bytes @ 0xF
  3333                           
  3334  002F                     detected@dev_addr:	
  3335                           ; 1 bytes @ 0xF
  3336                           
  3337                           
  3338                           ; 1 bytes @ 0xF
  3339  002F                     	ds	1
  3340  0030                     ?_i2c1_read:	
  3341  0030                     init@y:	
  3342                           ; 1 bytes @ 0x10
  3343                           
  3344  0030                     add_dev@dev_addr:	
  3345                           ; 1 bytes @ 0x10
  3346                           
  3347  0030                     del_dev@dev_addr:	
  3348                           ; 1 bytes @ 0x10
  3349                           
  3350  0030                     i2c1_write@pbuf:	
  3351                           ; 1 bytes @ 0x10
  3352                           
  3353  0030                     i2c1_write_no_data@reg_addr:	
  3354                           ; 1 bytes @ 0x10
  3355                           
  3356  0030                     i2c1_read@dev_addr:	
  3357                           ; 1 bytes @ 0x10
  3358                           
  3359                           
  3360                           ; 2 bytes @ 0x10
  3361  0030                     	ds	1
  3362  0031                     ??_i2c1_write_no_data:	
  3363  0031                     init@i:	
  3364                           ; 1 bytes @ 0x11
  3365                           
  3366  0031                     put_cmd@buf:	
  3367                           ; 1 bytes @ 0x11
  3368                           
  3369  0031                     i2c1_write@len:	
  3370                           ; 1 bytes @ 0x11
  3371                           
  3372                           
  3373                           ; 1 bytes @ 0x11
  3374  0031                     	ds	1
  3375  0032                     ??_i2c1_write:	
  3376  0032                     i2c1_read@reg_addr:	
  3377                           ; 1 bytes @ 0x12
  3378                           
  3379  0032                     i2c1_write_no_data@write_status:	
  3380                           ; 1 bytes @ 0x12
  3381                           
  3382                           
  3383                           ; 1 bytes @ 0x12
  3384  0032                     	ds	1
  3385  0033                     i2c1_write_no_data@buf:	
  3386  0033                     i2c1_read@pbuf:	
  3387                           ; 1 bytes @ 0x13
  3388                           
  3389                           
  3390                           ; 2 bytes @ 0x13
  3391  0033                     	ds	1
  3392  0034                     ??_printf:	
  3393  0034                     i2c1_write@write_status:	
  3394                           ; 1 bytes @ 0x14
  3395                           
  3396  0034                     i2c1_write_no_data@status:	
  3397                           ; 1 bytes @ 0x14
  3398                           
  3399                           
  3400                           ; 1 bytes @ 0x14
  3401  0034                     	ds	1
  3402  0035                     i2c1_write@status:	
  3403  0035                     i2c1_read@len:	
  3404                           ; 1 bytes @ 0x15
  3405                           
  3406                           
  3407                           ; 1 bytes @ 0x15
  3408  0035                     	ds	1
  3409  0036                     ??_i2c1_read:	
  3410                           
  3411                           ; 1 bytes @ 0x16
  3412  0036                     	ds	2
  3413  0038                     i2c1_read@read_status:	
  3414  0038                     printf@prec:	
  3415                           ; 1 bytes @ 0x18
  3416                           
  3417                           
  3418                           ; 1 bytes @ 0x18
  3419  0038                     	ds	1
  3420  0039                     i2c1_read@reg:	
  3421  0039                     printf@cp:	
  3422                           ; 1 bytes @ 0x19
  3423                           
  3424                           
  3425                           ; 2 bytes @ 0x19
  3426  0039                     	ds	1
  3427  003A                     i2c1_read@status:	
  3428                           
  3429                           ; 1 bytes @ 0x1A
  3430  003A                     	ds	1
  3431  003B                     ??_scan_dev:	
  3432  003B                     printf@ap:	
  3433                           ; 1 bytes @ 0x1B
  3434                           
  3435                           
  3436                           ; 1 bytes @ 0x1B
  3437  003B                     	ds	1
  3438  003C                     printf@val:	
  3439                           
  3440                           ; 2 bytes @ 0x1C
  3441  003C                     	ds	2
  3442  003E                     scan_dev@status:	
  3443  003E                     printf@len:	
  3444                           ; 1 bytes @ 0x1E
  3445                           
  3446                           
  3447                           ; 2 bytes @ 0x1E
  3448  003E                     	ds	1
  3449  003F                     scan_dev@dev_addr:	
  3450                           
  3451                           ; 1 bytes @ 0x1F
  3452  003F                     	ds	1
  3453  0040                     ??_check_plg:	
  3454  0040                     printf@flag:	
  3455                           ; 1 bytes @ 0x20
  3456                           
  3457                           
  3458                           ; 1 bytes @ 0x20
  3459  0040                     	ds	1
  3460  0041                     printf@width:	
  3461                           
  3462                           ; 2 bytes @ 0x21
  3463  0041                     	ds	1
  3464  0042                     check_plg@status:	
  3465                           
  3466                           ; 1 bytes @ 0x22
  3467  0042                     	ds	1
  3468  0043                     printf@c:	
  3469                           
  3470                           ; 1 bytes @ 0x23
  3471  0043                     	ds	1
  3472  0044                     ?_PROTOCOL_Print_TLV:	
  3473  0044                     ??_exec_remote_cmd:	
  3474                           ; 1 bytes @ 0x24
  3475                           
  3476  0044                     ??_print_dev_map:	
  3477                           ; 1 bytes @ 0x24
  3478                           
  3479  0044                     PROTOCOL_Print_TLV@type:	
  3480                           ; 1 bytes @ 0x24
  3481                           
  3482                           
  3483                           ; 1 bytes @ 0x24
  3484  0044                     	ds	1
  3485  0045                     PROTOCOL_Print_TLV@length:	
  3486                           
  3487                           ; 1 bytes @ 0x25
  3488  0045                     	ds	1
  3489  0046                     print_dev_map@i:	
  3490  0046                     PROTOCOL_Print_TLV@pbuffer:	
  3491                           ; 1 bytes @ 0x26
  3492                           
  3493                           
  3494                           ; 1 bytes @ 0x26
  3495  0046                     	ds	1
  3496  0047                     ??_PROTOCOL_Print_TLV:	
  3497  0047                     print_dev_map@len:	
  3498                           ; 1 bytes @ 0x27
  3499                           
  3500                           
  3501                           ; 1 bytes @ 0x27
  3502  0047                     	ds	2
  3503  0049                     ??_tick_handler:	
  3504                           
  3505                           ; 1 bytes @ 0x29
  3506  0049                     	ds	1
  3507  004A                     PROTOCOL_Print_TLV@dev_addr:	
  3508                           
  3509                           ; 1 bytes @ 0x2A
  3510  004A                     	ds	1
  3511  004B                     PROTOCOL_Print_TLV@v:	
  3512                           
  3513                           ; 2 bytes @ 0x2B
  3514  004B                     	ds	2
  3515  004D                     ??_sen:	
  3516                           
  3517                           ; 1 bytes @ 0x2D
  3518  004D                     	ds	5
  3519  0052                     sen@type:	
  3520                           
  3521                           ; 1 bytes @ 0x32
  3522  0052                     	ds	1
  3523  0053                     sen@length:	
  3524                           
  3525                           ; 1 bytes @ 0x33
  3526  0053                     	ds	1
  3527  0054                     sen@status:	
  3528                           
  3529                           ; 1 bytes @ 0x34
  3530  0054                     	ds	1
  3531  0055                     sen@dev_addr:	
  3532                           
  3533                           ; 1 bytes @ 0x35
  3534  0055                     	ds	1
  3535  0056                     ??_one_shot_sen:	
  3536  0056                     ??_fetch:	
  3537                           ; 1 bytes @ 0x36
  3538                           
  3539                           
  3540                           ; 1 bytes @ 0x36
  3541  0056                     	ds	3
  3542  0059                     one_shot_sen@status:	
  3543  0059                     fetch@status:	
  3544                           ; 1 bytes @ 0x39
  3545                           
  3546                           
  3547                           ; 1 bytes @ 0x39
  3548  0059                     	ds	1
  3549  005A                     one_shot_sen@dev_addr:	
  3550  005A                     fetch@sch:	
  3551                           ; 1 bytes @ 0x3A
  3552                           
  3553                           
  3554                           ; 1 bytes @ 0x3A
  3555  005A                     	ds	1
  3556  005B                     ?_command_handler:	
  3557  005B                     fetch@pos:	
  3558                           ; 1 bytes @ 0x3B
  3559                           
  3560  005B                     command_handler@buf:	
  3561                           ; 1 bytes @ 0x3B
  3562                           
  3563                           
  3564                           ; 1 bytes @ 0x3B
  3565  005B                     	ds	1
  3566  005C                     ??_command_handler:	
  3567  005C                     fetch@dev_addr:	
  3568                           ; 1 bytes @ 0x3C
  3569                           
  3570                           
  3571                           ; 1 bytes @ 0x3C
  3572  005C                     	ds	1
  3573  005D                     ??_inv_handler:	
  3574                           
  3575                           ; 1 bytes @ 0x3D
  3576  005D                     	ds	6
  3577  0063                     command_handler@dev_addr:	
  3578                           
  3579                           ; 1 bytes @ 0x43
  3580  0063                     	ds	1
  3581  0064                     command_handler@i:	
  3582                           
  3583                           ; 1 bytes @ 0x44
  3584  0064                     	ds	1
  3585  0065                     ??_PROTOCOL_EXT:	
  3586                           
  3587                           ; 1 bytes @ 0x45
  3588  0065                     	ds	1
  3589  0066                     PROTOCOL_EXT@char_buf:	
  3590                           
  3591                           ; 1 bytes @ 0x46
  3592  0066                     	ds	1
  3593  0067                     ??_PROTOCOL_Loop:	
  3594                           
  3595                           ; 1 bytes @ 0x47
  3596  0067                     	ds	2
  3597  0069                     PROTOCOL_Loop@c:	
  3598                           
  3599                           ; 1 bytes @ 0x49
  3600  0069                     	ds	1
  3601  006A                     PROTOCOL_Loop@device_address:	
  3602                           
  3603                           ; 1 bytes @ 0x4A
  3604  006A                     	ds	1
  3605  006B                     ??_main:	
  3606                           
  3607                           	psect	maintext
  3608  14C1                     __pmaintext:	
  3609                           ; 1 bytes @ 0x4B
  3610 ;;
  3611 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3612 ;;
  3613 ;; *************** function _main *****************
  3614 ;; Defined at:
  3615 ;;		line 421 in file "main.c"
  3616 ;; Parameters:    Size  Location     Type
  3617 ;;		None
  3618 ;; Auto vars:     Size  Location     Type
  3619 ;;		None
  3620 ;; Return value:  Size  Location     Type
  3621 ;;                  1    wreg      void 
  3622 ;; Registers used:
  3623 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3624 ;; Tracked objects:
  3625 ;;		On entry : B1F/0
  3626 ;;		On exit  : 0/0
  3627 ;;		Unchanged: 0/0
  3628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3632 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3633 ;;Total ram usage:        0 bytes
  3634 ;; Hardware stack levels required when called:   12
  3635 ;; This function calls:
  3636 ;;		_PROTOCOL_Initialize
  3637 ;;		_PROTOCOL_Loop
  3638 ;;		_PROTOCOL_Set_Extension_Handler
  3639 ;;		_PROTOCOL_Set_Tick_Handler
  3640 ;;		_SYSTEM_Initialize
  3641 ;;		_init
  3642 ;; This function is called by:
  3643 ;;		Startup code after reset
  3644 ;; This function uses a non-reentrant model
  3645 ;;
  3646                           
  3647                           
  3648                           ;psect for function _main
  3649  14C1                     _main:	
  3650                           
  3651                           ;main.c: 423: init();
  3652                           
  3653                           ;incstack = 0
  3654                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3655  14C1  318A  2203  3194   	fcall	_init
  3656                           
  3657                           ;main.c: 425: SYSTEM_Initialize();
  3658  14C4  3192  2220  3194   	fcall	_SYSTEM_Initialize
  3659                           
  3660                           ;main.c: 426: (INTCONbits.GIE = 1);
  3661  14C7  178B               	bsf	11,7	;volatile
  3662                           
  3663                           ;main.c: 427: (INTCONbits.PEIE = 1);
  3664  14C8  170B               	bsf	11,6	;volatile
  3665                           
  3666                           ;main.c: 429: PROTOCOL_Initialize("BACKPLANE-MASTER", (0), (0), (0), inv_handler, 1);
  3667  14C9  309E               	movlw	low (STR_36| (0+32768))
  3668  14CA  0020               	movlb	0	; select bank0
  3669  14CB  00A1               	movwf	PROTOCOL_Initialize@device_id
  3670  14CC  3090               	movlw	high (STR_36| (0+32768))
  3671  14CD  00A2               	movwf	PROTOCOL_Initialize@device_id+1
  3672  14CE  01A3               	clrf	PROTOCOL_Initialize@start_handler
  3673  14CF  01A4               	clrf	PROTOCOL_Initialize@stop_handler
  3674  14D0  01A5               	clrf	PROTOCOL_Initialize@set_handler
  3675  14D1  304E               	movlw	low _inv_handler
  3676  14D2  00A6               	movwf	PROTOCOL_Initialize@inv_handler
  3677  14D3  3007               	movlw	high _inv_handler
  3678  14D4  00A7               	movwf	PROTOCOL_Initialize@inv_handler+1
  3679  14D5  01A8               	clrf	PROTOCOL_Initialize@scaler
  3680  14D6  0AA8               	incf	PROTOCOL_Initialize@scaler,f
  3681  14D7  3197  27AE  3194   	fcall	_PROTOCOL_Initialize
  3682                           
  3683                           ;main.c: 430: PROTOCOL_Set_Extension_Handler(command_handler);
  3684  14DA  302D               	movlw	low _command_handler
  3685  14DB  0020               	movlb	0	; select bank0
  3686  14DC  00A0               	movwf	PROTOCOL_Set_Extension_Handler@extension_handler
  3687  14DD  3003               	movlw	high _command_handler
  3688  14DE  00A1               	movwf	PROTOCOL_Set_Extension_Handler@extension_handler+1
  3689  14DF  319F  27B1  3194   	fcall	_PROTOCOL_Set_Extension_Handler
  3690                           
  3691                           ;main.c: 431: PROTOCOL_Set_Tick_Handler(tick_handler);
  3692  14E2  3079               	movlw	low _tick_handler
  3693  14E3  0020               	movlb	0	; select bank0
  3694  14E4  00A0               	movwf	PROTOCOL_Set_Tick_Handler@tick_handler
  3695  14E5  3016               	movlw	high _tick_handler
  3696  14E6  00A1               	movwf	PROTOCOL_Set_Tick_Handler@tick_handler+1
  3697  14E7  319F  27BA  3194   	fcall	_PROTOCOL_Set_Tick_Handler
  3698                           
  3699                           ;main.c: 432: PROTOCOL_Loop();
  3700  14EA  318C  248D         	fcall	_PROTOCOL_Loop
  3701  14EC  3180  283C         	ljmp	start
  3702  14EE                     __end_of_main:	
  3703                           
  3704                           	psect	text1
  3705  0A03                     __ptext1:	
  3706 ;; *************** function _init *****************
  3707 ;; Defined at:
  3708 ;;		line 104 in file "main.c"
  3709 ;; Parameters:    Size  Location     Type
  3710 ;;		None
  3711 ;; Auto vars:     Size  Location     Type
  3712 ;;  i               1   17[BANK0 ] unsigned char 
  3713 ;;  y               1   16[BANK0 ] unsigned char 
  3714 ;;  dev_addr        1   15[BANK0 ] unsigned char 
  3715 ;;  k               1    0        unsigned char 
  3716 ;;  j               1    0        unsigned char 
  3717 ;; Return value:  Size  Location     Type
  3718 ;;                  1    wreg      void 
  3719 ;; Registers used:
  3720 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3721 ;; Tracked objects:
  3722 ;;		On entry : 0/0
  3723 ;;		On exit  : 0/0
  3724 ;;		Unchanged: 0/0
  3725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3727 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3728 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3729 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3730 ;;Total ram usage:        9 bytes
  3731 ;; Hardware stack levels used:    1
  3732 ;; Hardware stack levels required when called:    4
  3733 ;; This function calls:
  3734 ;;		_DATAEE_ReadByte
  3735 ;;		___awdiv
  3736 ;;		___wmul
  3737 ;; This function is called by:
  3738 ;;		_main
  3739 ;; This function uses a non-reentrant model
  3740 ;;
  3741                           
  3742                           
  3743                           ;psect for function _init
  3744  0A03                     _init:	
  3745                           
  3746                           ;main.c: 105: uint8_t y, i, j, k, dev_addr;
  3747                           ;main.c: 108: for (y=0; y<MAX_Y; y++) {
  3748                           
  3749                           ;incstack = 0
  3750                           ; Regs used in _init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3751  0A03  0020               	movlb	0	; select bank0
  3752  0A04  01B0               	clrf	init@y
  3753  0A05  300A               	movlw	low (_MAX_Y| (0+32768))
  3754  0A06  0084               	movwf	4
  3755  0A07  3090               	movlw	high (_MAX_Y| (0+32768))
  3756  0A08  0085               	movwf	5
  3757  0A09  0800               	movf	0,w	;code access
  3758  0A0A  0230               	subwf	init@y,w
  3759  0A0B  1803               	btfsc	3,0
  3760  0A0C  2A1F               	goto	l5627
  3761  0A0D                     l5621:	
  3762                           
  3763                           ;main.c: 109: dev_map[y] = 0;
  3764  0A0D  0830               	movf	init@y,w
  3765  0A0E  3E20               	addlw	(low (_dev_map| (0+256)))& (0+255)
  3766  0A0F  0086               	movwf	6
  3767  0A10  3001               	movlw	1	; select bank2/3
  3768  0A11  0087               	movwf	7
  3769  0A12  0181               	clrf	1
  3770  0A13  3001               	movlw	1
  3771  0A14  00A9               	movwf	??_init
  3772  0A15  0829               	movf	??_init,w
  3773  0A16  07B0               	addwf	init@y,f
  3774  0A17  300A               	movlw	low (_MAX_Y| (0+32768))
  3775  0A18  0084               	movwf	4
  3776  0A19  3090               	movlw	high (_MAX_Y| (0+32768))
  3777  0A1A  0085               	movwf	5
  3778  0A1B  0800               	movf	0,w	;code access
  3779  0A1C  0230               	subwf	init@y,w
  3780  0A1D  1C03               	skipc
  3781  0A1E  2A0D               	goto	l5621
  3782  0A1F                     l5627:	
  3783                           
  3784                           ;main.c: 110: }
  3785                           ;main.c: 113: for (i=0; i<4; i++) cmd_buf[i][0] = '\0';
  3786  0A1F  01B1               	clrf	init@i
  3787  0A20  3004               	movlw	4
  3788  0A21  0231               	subwf	init@i,w
  3789  0A22  1803               	btfsc	3,0
  3790  0A23  2A46               	goto	l5639
  3791  0A24                     l5633:	
  3792  0A24  0831               	movf	init@i,w
  3793  0A25  00A9               	movwf	??_init
  3794  0A26  01AA               	clrf	??_init+1
  3795  0A27  0829               	movf	??_init,w
  3796  0A28  00A0               	movwf	___wmul@multiplier
  3797  0A29  082A               	movf	??_init+1,w
  3798  0A2A  00A1               	movwf	___wmul@multiplier+1
  3799  0A2B  3030               	movlw	48
  3800  0A2C  00A2               	movwf	___wmul@multiplicand
  3801  0A2D  3000               	movlw	0
  3802  0A2E  00A3               	movwf	___wmul@multiplicand+1
  3803  0A2F  3192  22E1  318A   	fcall	___wmul
  3804  0A32  3030               	movlw	48
  3805  0A33  0020               	movlb	0	; select bank0
  3806  0A34  00AB               	movwf	??_init+2
  3807  0A35  3023               	movlw	35
  3808  0A36  00AC               	movwf	??_init+3
  3809  0A37  0820               	movf	?___wmul,w
  3810  0A38  072B               	addwf	??_init+2,w
  3811  0A39  0086               	movwf	6
  3812  0A3A  0821               	movf	?___wmul+1,w
  3813  0A3B  3D2C               	addwfc	??_init+3,w
  3814  0A3C  0087               	movwf	7
  3815  0A3D  0181               	clrf	1
  3816  0A3E  3001               	movlw	1
  3817  0A3F  00A9               	movwf	??_init
  3818  0A40  0829               	movf	??_init,w
  3819  0A41  07B1               	addwf	init@i,f
  3820  0A42  3004               	movlw	4
  3821  0A43  0231               	subwf	init@i,w
  3822  0A44  1C03               	skipc
  3823  0A45  2A24               	goto	l5633
  3824  0A46                     l5639:	
  3825                           
  3826                           ;main.c: 116: for (i=0; i<28; i++) {
  3827  0A46  01B1               	clrf	init@i
  3828  0A47                     L1:	
  3829  0A47  301C               	movlw	28
  3830  0A48  0231               	subwf	init@i,w
  3831  0A49  1803               	btfsc	3,0
  3832  0A4A  0008               	return
  3833                           
  3834                           ;main.c: 117: dev_addr = DATAEE_ReadByte(2+i);
  3835  0A4B  0831               	movf	init@i,w
  3836  0A4C  3E02               	addlw	2
  3837  0A4D  319F  27E4  318A   	fcall	_DATAEE_ReadByte
  3838  0A50  0020               	movlb	0	; select bank0
  3839  0A51  00A9               	movwf	??_init
  3840  0A52  0829               	movf	??_init,w
  3841  0A53  00AF               	movwf	init@dev_addr
  3842                           
  3843                           ;main.c: 118: schedule[i/4][i%4] = dev_addr;
  3844  0A54  082F               	movf	init@dev_addr,w
  3845  0A55  00A9               	movwf	??_init
  3846  0A56  3004               	movlw	4
  3847  0A57  00A0               	movwf	___awdiv@divisor
  3848  0A58  3000               	movlw	0
  3849  0A59  00A1               	movwf	___awdiv@divisor+1
  3850  0A5A  0831               	movf	init@i,w
  3851  0A5B  00AA               	movwf	??_init+1
  3852  0A5C  01AB               	clrf	??_init+2
  3853  0A5D  082A               	movf	??_init+1,w
  3854  0A5E  00A2               	movwf	___awdiv@dividend
  3855  0A5F  082B               	movf	??_init+2,w
  3856  0A60  00A3               	movwf	___awdiv@dividend+1
  3857  0A61  3188  203A  318A   	fcall	___awdiv
  3858  0A64  0020               	movlb	0	; select bank0
  3859  0A65  0820               	movf	?___awdiv,w
  3860  0A66  00AC               	movwf	??_init+3
  3861  0A67  3002               	movlw	2
  3862  0A68                     u6445:	
  3863  0A68  35AC               	lslf	??_init+3,f
  3864  0A69  0B89               	decfsz	9,f
  3865  0A6A  2A68               	goto	u6445
  3866  0A6B  30A0               	movlw	(low (_schedule| (0+256)))& (0+255)
  3867  0A6C  072C               	addwf	??_init+3,w
  3868  0A6D  00AD               	movwf	??_init+4
  3869  0A6E  0831               	movf	init@i,w
  3870  0A6F  3903               	andlw	3
  3871  0A70  072D               	addwf	??_init+4,w
  3872  0A71  00AE               	movwf	??_init+5
  3873  0A72  082E               	movf	??_init+5,w
  3874  0A73  0086               	movwf	6
  3875  0A74  3001               	movlw	1	; select bank3/4
  3876  0A75  0087               	movwf	7
  3877  0A76  0829               	movf	??_init,w
  3878  0A77  0081               	movwf	1
  3879  0A78  3001               	movlw	1
  3880  0A79  00A9               	movwf	??_init
  3881  0A7A  0829               	movf	??_init,w
  3882  0A7B  07B1               	addwf	init@i,f
  3883  0A7C  2A47               	goto	L1
  3884  0A7D                     __end_of_init:	
  3885                           
  3886                           	psect	text2
  3887  1220                     __ptext2:	
  3888 ;; *************** function _SYSTEM_Initialize *****************
  3889 ;; Defined at:
  3890 ;;		line 69 in file "mcc_generated_files/mcc.c"
  3891 ;; Parameters:    Size  Location     Type
  3892 ;;		None
  3893 ;; Auto vars:     Size  Location     Type
  3894 ;;		None
  3895 ;; Return value:  Size  Location     Type
  3896 ;;                  1    wreg      void 
  3897 ;; Registers used:
  3898 ;;		wreg, status,2, status,0, pclath, cstack
  3899 ;; Tracked objects:
  3900 ;;		On entry : 0/0
  3901 ;;		On exit  : 0/0
  3902 ;;		Unchanged: 0/0
  3903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3907 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3908 ;;Total ram usage:        0 bytes
  3909 ;; Hardware stack levels used:    1
  3910 ;; Hardware stack levels required when called:    4
  3911 ;; This function calls:
  3912 ;;		_EUSART_Initialize
  3913 ;;		_I2C1_Initialize
  3914 ;;		_OSCILLATOR_Initialize
  3915 ;;		_PIN_MANAGER_Initialize
  3916 ;;		_TMR0_Initialize
  3917 ;;		_WDT_Initialize
  3918 ;; This function is called by:
  3919 ;;		_main
  3920 ;; This function uses a non-reentrant model
  3921 ;;
  3922                           
  3923                           
  3924                           ;psect for function _SYSTEM_Initialize
  3925  1220                     _SYSTEM_Initialize:	
  3926                           
  3927                           ;mcc.c: 72: PIN_MANAGER_Initialize();
  3928                           
  3929                           ;incstack = 0
  3930                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3931  1220  3193  2319  3192   	fcall	_PIN_MANAGER_Initialize
  3932                           
  3933                           ;mcc.c: 73: OSCILLATOR_Initialize();
  3934  1223  319F  27A2  3192   	fcall	_OSCILLATOR_Initialize
  3935                           
  3936                           ;mcc.c: 74: WDT_Initialize();
  3937  1226  319F  2798  3192   	fcall	_WDT_Initialize
  3938                           
  3939                           ;mcc.c: 75: I2C1_Initialize();
  3940  1229  3192  22FD  3192   	fcall	_I2C1_Initialize
  3941                           
  3942                           ;mcc.c: 76: TMR0_Initialize();
  3943  122C  319F  27CD  3192   	fcall	_TMR0_Initialize
  3944                           
  3945                           ;mcc.c: 77: EUSART_Initialize();
  3946  122F  3192  2274         	fcall	_EUSART_Initialize
  3947  1231  0008               	return
  3948  1232                     __end_of_SYSTEM_Initialize:	
  3949                           
  3950                           	psect	text3
  3951  1F98                     __ptext3:	
  3952 ;; *************** function _WDT_Initialize *****************
  3953 ;; Defined at:
  3954 ;;		line 92 in file "mcc_generated_files/mcc.c"
  3955 ;; Parameters:    Size  Location     Type
  3956 ;;		None
  3957 ;; Auto vars:     Size  Location     Type
  3958 ;;		None
  3959 ;; Return value:  Size  Location     Type
  3960 ;;                  1    wreg      void 
  3961 ;; Registers used:
  3962 ;;		wreg
  3963 ;; Tracked objects:
  3964 ;;		On entry : 0/0
  3965 ;;		On exit  : 0/0
  3966 ;;		Unchanged: 0/0
  3967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3969 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3971 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3972 ;;Total ram usage:        0 bytes
  3973 ;; Hardware stack levels used:    1
  3974 ;; Hardware stack levels required when called:    3
  3975 ;; This function calls:
  3976 ;;		Nothing
  3977 ;; This function is called by:
  3978 ;;		_SYSTEM_Initialize
  3979 ;; This function uses a non-reentrant model
  3980 ;;
  3981                           
  3982                           
  3983                           ;psect for function _WDT_Initialize
  3984  1F98                     _WDT_Initialize:	
  3985                           
  3986                           ;mcc.c: 95: WDTCON = 0x16;
  3987                           
  3988                           ;incstack = 0
  3989                           ; Regs used in _WDT_Initialize: [wreg]
  3990  1F98  3016               	movlw	22
  3991  1F99  0021               	movlb	1	; select bank1
  3992  1F9A  0097               	movwf	23	;volatile
  3993  1F9B  0008               	return
  3994  1F9C                     __end_of_WDT_Initialize:	
  3995                           
  3996                           	psect	text4
  3997  1FCD                     __ptext4:	
  3998 ;; *************** function _TMR0_Initialize *****************
  3999 ;; Defined at:
  4000 ;;		line 62 in file "mcc_generated_files/tmr0.c"
  4001 ;; Parameters:    Size  Location     Type
  4002 ;;		None
  4003 ;; Auto vars:     Size  Location     Type
  4004 ;;		None
  4005 ;; Return value:  Size  Location     Type
  4006 ;;                  1    wreg      void 
  4007 ;; Registers used:
  4008 ;;		wreg, status,2
  4009 ;; Tracked objects:
  4010 ;;		On entry : 0/0
  4011 ;;		On exit  : 0/0
  4012 ;;		Unchanged: 0/0
  4013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4017 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4018 ;;Total ram usage:        0 bytes
  4019 ;; Hardware stack levels used:    1
  4020 ;; Hardware stack levels required when called:    3
  4021 ;; This function calls:
  4022 ;;		Nothing
  4023 ;; This function is called by:
  4024 ;;		_SYSTEM_Initialize
  4025 ;; This function uses a non-reentrant model
  4026 ;;
  4027                           
  4028                           
  4029                           ;psect for function _TMR0_Initialize
  4030  1FCD                     _TMR0_Initialize:	
  4031                           
  4032                           ;tmr0.c: 67: OPTION_REG = (OPTION_REG & 0xC0) | 0xD7 & 0x3F;
  4033                           
  4034                           ;incstack = 0
  4035                           ; Regs used in _TMR0_Initialize: [wreg+status,2]
  4036  1FCD  0021               	movlb	1	; select bank1
  4037  1FCE  0815               	movf	21,w	;volatile
  4038  1FCF  39C0               	andlw	192
  4039  1FD0  3817               	iorlw	23
  4040  1FD1  0095               	movwf	21	;volatile
  4041                           
  4042                           ;tmr0.c: 70: TMR0 = 0x00;
  4043  1FD2  0020               	movlb	0	; select bank0
  4044  1FD3  0195               	clrf	21	;volatile
  4045                           
  4046                           ;tmr0.c: 73: timer0ReloadVal= 0;
  4047  1FD4  0021               	movlb	1	; select bank1
  4048  1FD5  01E4               	clrf	_timer0ReloadVal^(0+128)	;volatile
  4049                           
  4050                           ;tmr0.c: 76: INTCONbits.TMR0IF = 0;
  4051  1FD6  110B               	bcf	11,2	;volatile
  4052  1FD7  0008               	return
  4053  1FD8                     __end_of_TMR0_Initialize:	
  4054                           
  4055                           	psect	text5
  4056  1319                     __ptext5:	
  4057 ;; *************** function _PIN_MANAGER_Initialize *****************
  4058 ;; Defined at:
  4059 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
  4060 ;; Parameters:    Size  Location     Type
  4061 ;;		None
  4062 ;; Auto vars:     Size  Location     Type
  4063 ;;		None
  4064 ;; Return value:  Size  Location     Type
  4065 ;;                  1    wreg      void 
  4066 ;; Registers used:
  4067 ;;		wreg, status,2
  4068 ;; Tracked objects:
  4069 ;;		On entry : 0/0
  4070 ;;		On exit  : 0/0
  4071 ;;		Unchanged: 0/0
  4072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4074 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4076 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4077 ;;Total ram usage:        0 bytes
  4078 ;; Hardware stack levels used:    1
  4079 ;; Hardware stack levels required when called:    3
  4080 ;; This function calls:
  4081 ;;		Nothing
  4082 ;; This function is called by:
  4083 ;;		_SYSTEM_Initialize
  4084 ;; This function uses a non-reentrant model
  4085 ;;
  4086                           
  4087                           
  4088                           ;psect for function _PIN_MANAGER_Initialize
  4089  1319                     _PIN_MANAGER_Initialize:	
  4090                           
  4091                           ;pin_manager.c: 56: LATA = 0x00;
  4092                           
  4093                           ;incstack = 0
  4094                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  4095  1319  0022               	movlb	2	; select bank2
  4096  131A  018C               	clrf	12	;volatile
  4097                           
  4098                           ;pin_manager.c: 57: LATB = 0x00;
  4099  131B  018D               	clrf	13	;volatile
  4100                           
  4101                           ;pin_manager.c: 58: LATC = 0x00;
  4102  131C  018E               	clrf	14	;volatile
  4103                           
  4104                           ;pin_manager.c: 63: TRISA = 0x3F;
  4105  131D  303F               	movlw	63
  4106  131E  0021               	movlb	1	; select bank1
  4107  131F  008C               	movwf	12	;volatile
  4108                           
  4109                           ;pin_manager.c: 64: TRISB = 0xF0;
  4110  1320  30F0               	movlw	240
  4111  1321  008D               	movwf	13	;volatile
  4112                           
  4113                           ;pin_manager.c: 65: TRISC = 0x7F;
  4114  1322  307F               	movlw	127
  4115  1323  008E               	movwf	14	;volatile
  4116                           
  4117                           ;pin_manager.c: 70: ANSELC = 0x4F;
  4118  1324  304F               	movlw	79
  4119  1325  0023               	movlb	3	; select bank3
  4120  1326  008E               	movwf	14	;volatile
  4121                           
  4122                           ;pin_manager.c: 71: ANSELB = 0x20;
  4123  1327  3020               	movlw	32
  4124  1328  008D               	movwf	13	;volatile
  4125                           
  4126                           ;pin_manager.c: 72: ANSELA = 0x17;
  4127  1329  3017               	movlw	23
  4128  132A  008C               	movwf	12	;volatile
  4129                           
  4130                           ;pin_manager.c: 77: WPUB = 0x00;
  4131  132B  0024               	movlb	4	; select bank4
  4132  132C  018D               	clrf	13	;volatile
  4133                           
  4134                           ;pin_manager.c: 78: WPUA = 0x3F;
  4135  132D  303F               	movlw	63
  4136  132E  008C               	movwf	12	;volatile
  4137                           
  4138                           ;pin_manager.c: 79: WPUC = 0xBF;
  4139  132F  30BF               	movlw	191
  4140  1330  008E               	movwf	14	;volatile
  4141                           
  4142                           ;pin_manager.c: 80: OPTION_REGbits.nWPUEN = 0;
  4143  1331  0021               	movlb	1	; select bank1
  4144  1332  1395               	bcf	21,7	;volatile
  4145                           
  4146                           ;pin_manager.c: 86: APFCON1 = 0x00;
  4147  1333  0022               	movlb	2	; select bank2
  4148  1334  019E               	clrf	30	;volatile
  4149                           
  4150                           ;pin_manager.c: 87: APFCON0 = 0x84;
  4151  1335  3084               	movlw	132
  4152  1336  009D               	movwf	29	;volatile
  4153  1337  0008               	return
  4154  1338                     __end_of_PIN_MANAGER_Initialize:	
  4155                           
  4156                           	psect	text6
  4157  1FA2                     __ptext6:	
  4158 ;; *************** function _OSCILLATOR_Initialize *****************
  4159 ;; Defined at:
  4160 ;;		line 80 in file "mcc_generated_files/mcc.c"
  4161 ;; Parameters:    Size  Location     Type
  4162 ;;		None
  4163 ;; Auto vars:     Size  Location     Type
  4164 ;;		None
  4165 ;; Return value:  Size  Location     Type
  4166 ;;                  1    wreg      void 
  4167 ;; Registers used:
  4168 ;;		wreg, status,2
  4169 ;; Tracked objects:
  4170 ;;		On entry : 0/0
  4171 ;;		On exit  : 0/0
  4172 ;;		Unchanged: 0/0
  4173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4175 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4177 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4178 ;;Total ram usage:        0 bytes
  4179 ;; Hardware stack levels used:    1
  4180 ;; Hardware stack levels required when called:    3
  4181 ;; This function calls:
  4182 ;;		Nothing
  4183 ;; This function is called by:
  4184 ;;		_SYSTEM_Initialize
  4185 ;; This function uses a non-reentrant model
  4186 ;;
  4187                           
  4188                           
  4189                           ;psect for function _OSCILLATOR_Initialize
  4190  1FA2                     _OSCILLATOR_Initialize:	
  4191                           
  4192                           ;mcc.c: 83: OSCCON = 0x70;
  4193                           
  4194                           ;incstack = 0
  4195                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  4196  1FA2  3070               	movlw	112
  4197  1FA3  0021               	movlb	1	; select bank1
  4198  1FA4  0099               	movwf	25	;volatile
  4199                           
  4200                           ;mcc.c: 85: OSCTUNE = 0x00;
  4201  1FA5  0198               	clrf	24	;volatile
  4202  1FA6                     l355:	
  4203                           ;mcc.c: 88: {
  4204                           
  4205                           ;mcc.c: 87: while(PLLR == 0)
  4206                           
  4207  1FA6  1B1A               	btfsc	26,6	;volatile
  4208  1FA7  0008               	return
  4209  1FA8  2FA6               	goto	l355
  4210  1FA9                     __end_of_OSCILLATOR_Initialize:	
  4211                           
  4212                           	psect	text7
  4213  12FD                     __ptext7:	
  4214 ;; *************** function _I2C1_Initialize *****************
  4215 ;; Defined at:
  4216 ;;		line 198 in file "mcc_generated_files/i2c1.c"
  4217 ;; Parameters:    Size  Location     Type
  4218 ;;		None
  4219 ;; Auto vars:     Size  Location     Type
  4220 ;;		None
  4221 ;; Return value:  Size  Location     Type
  4222 ;;                  1    wreg      void 
  4223 ;; Registers used:
  4224 ;;		wreg, status,2
  4225 ;; Tracked objects:
  4226 ;;		On entry : 0/0
  4227 ;;		On exit  : 0/0
  4228 ;;		Unchanged: 0/0
  4229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4232 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4233 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4234 ;;Total ram usage:        1 bytes
  4235 ;; Hardware stack levels used:    1
  4236 ;; Hardware stack levels required when called:    3
  4237 ;; This function calls:
  4238 ;;		Nothing
  4239 ;; This function is called by:
  4240 ;;		_SYSTEM_Initialize
  4241 ;; This function uses a non-reentrant model
  4242 ;;
  4243                           
  4244                           
  4245                           ;psect for function _I2C1_Initialize
  4246  12FD                     _I2C1_Initialize:	
  4247                           
  4248                           ;i2c1.c: 200: i2c1_object.pTrHead = i2c1_tr_queue;
  4249                           
  4250                           ;incstack = 0
  4251                           ; Regs used in _I2C1_Initialize: [wreg+status,2]
  4252  12FD  3059               	movlw	(low (_i2c1_tr_queue| (0+256)))& (0+255)
  4253  12FE  0020               	movlb	0	; select bank0
  4254  12FF  00A0               	movwf	??_I2C1_Initialize
  4255  1300  0820               	movf	??_I2C1_Initialize,w
  4256  1301  0021               	movlb	1	; select bank1
  4257  1302  00DA               	movwf	(low ((_i2c1_object| 0+1)))^(0+128)
  4258                           
  4259                           ;i2c1.c: 201: i2c1_object.pTrTail = i2c1_tr_queue;
  4260  1303  3059               	movlw	(low (_i2c1_tr_queue| (0+256)))& (0+255)
  4261  1304  0020               	movlb	0	; select bank0
  4262  1305  00A0               	movwf	??_I2C1_Initialize
  4263  1306  0820               	movf	??_I2C1_Initialize,w
  4264  1307  0021               	movlb	1	; select bank1
  4265  1308  00D9               	movwf	_i2c1_object^(0+128)
  4266                           
  4267                           ;i2c1.c: 202: i2c1_object.trStatus.s.empty = 1;
  4268  1309  14DB               	bsf	(_i2c1_object^(0+128)+2),1
  4269                           
  4270                           ;i2c1.c: 203: i2c1_object.trStatus.s.full = 0;
  4271  130A  105B               	bcf	(_i2c1_object^(0+128)+2),0
  4272                           
  4273                           ;i2c1.c: 205: i2c1_object.i2cErrors = 0;
  4274  130B  01DD               	clrf	(_i2c1_object^(0+128)+4)
  4275                           
  4276                           ;i2c1.c: 208: SSP1STAT = 0x80;
  4277  130C  3080               	movlw	128
  4278  130D  0024               	movlb	4	; select bank4
  4279  130E  0094               	movwf	20	;volatile
  4280                           
  4281                           ;i2c1.c: 210: SSP1CON1 = 0x28;
  4282  130F  3028               	movlw	40
  4283  1310  0095               	movwf	21	;volatile
  4284                           
  4285                           ;i2c1.c: 212: SSP1CON3 = 0x00;
  4286  1311  0197               	clrf	23	;volatile
  4287                           
  4288                           ;i2c1.c: 214: SSP1ADD = 0x4F;
  4289  1312  304F               	movlw	79
  4290  1313  0092               	movwf	18	;volatile
  4291                           
  4292                           ;i2c1.c: 218: PIR1bits.SSP1IF = 0;
  4293  1314  0020               	movlb	0	; select bank0
  4294  1315  1191               	bcf	17,3	;volatile
  4295                           
  4296                           ;i2c1.c: 220: PIE1bits.SSP1IE = 1;
  4297  1316  0021               	movlb	1	; select bank1
  4298  1317  1591               	bsf	17,3	;volatile
  4299  1318  0008               	return
  4300  1319                     __end_of_I2C1_Initialize:	
  4301                           
  4302                           	psect	text8
  4303  1274                     __ptext8:	
  4304 ;; *************** function _EUSART_Initialize *****************
  4305 ;; Defined at:
  4306 ;;		line 75 in file "mcc_generated_files/eusart.c"
  4307 ;; Parameters:    Size  Location     Type
  4308 ;;		None
  4309 ;; Auto vars:     Size  Location     Type
  4310 ;;		None
  4311 ;; Return value:  Size  Location     Type
  4312 ;;                  1    wreg      void 
  4313 ;; Registers used:
  4314 ;;		wreg, status,2
  4315 ;; Tracked objects:
  4316 ;;		On entry : 0/0
  4317 ;;		On exit  : 0/0
  4318 ;;		Unchanged: 0/0
  4319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4321 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4322 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4323 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4324 ;;Total ram usage:        1 bytes
  4325 ;; Hardware stack levels used:    1
  4326 ;; Hardware stack levels required when called:    3
  4327 ;; This function calls:
  4328 ;;		Nothing
  4329 ;; This function is called by:
  4330 ;;		_SYSTEM_Initialize
  4331 ;; This function uses a non-reentrant model
  4332 ;;
  4333                           
  4334                           
  4335                           ;psect for function _EUSART_Initialize
  4336  1274                     _EUSART_Initialize:	
  4337                           
  4338                           ;eusart.c: 78: PIE1bits.RCIE = 0;
  4339                           
  4340                           ;incstack = 0
  4341                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  4342  1274  0021               	movlb	1	; select bank1
  4343  1275  1291               	bcf	17,5	;volatile
  4344                           
  4345                           ;eusart.c: 79: PIE1bits.TXIE = 0;
  4346  1276  1211               	bcf	17,4	;volatile
  4347                           
  4348                           ;eusart.c: 84: BAUDCON = 0x08;
  4349  1277  3008               	movlw	8
  4350  1278  0023               	movlb	3	; select bank3
  4351  1279  009F               	movwf	31	;volatile
  4352                           
  4353                           ;eusart.c: 87: RCSTA = 0x90;
  4354  127A  3090               	movlw	144
  4355  127B  009D               	movwf	29	;volatile
  4356                           
  4357                           ;eusart.c: 90: TXSTA = 0x24;
  4358  127C  3024               	movlw	36
  4359  127D  009E               	movwf	30	;volatile
  4360                           
  4361                           ;eusart.c: 93: SPBRGL = 0x44;
  4362  127E  3044               	movlw	68
  4363  127F  009B               	movwf	27	;volatile
  4364                           
  4365                           ;eusart.c: 96: SPBRGH = 0x00;
  4366  1280  019C               	clrf	28	;volatile
  4367                           
  4368                           ;eusart.c: 100: eusartTxHead = 0;
  4369  1281  01F6               	clrf	_eusartTxHead	;volatile
  4370                           
  4371                           ;eusart.c: 101: eusartTxTail = 0;
  4372  1282  01F5               	clrf	_eusartTxTail	;volatile
  4373                           
  4374                           ;eusart.c: 102: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
  4375  1283  3040               	movlw	64
  4376  1284  0020               	movlb	0	; select bank0
  4377  1285  00A0               	movwf	??_EUSART_Initialize
  4378  1286  0820               	movf	??_EUSART_Initialize,w
  4379  1287  00F4               	movwf	_eusartTxBufferRemaining	;volatile
  4380                           
  4381                           ;eusart.c: 104: eusartRxHead = 0;
  4382  1288  01F3               	clrf	_eusartRxHead	;volatile
  4383                           
  4384                           ;eusart.c: 105: eusartRxTail = 0;
  4385  1289  01EC               	clrf	_eusartRxTail	;volatile
  4386                           
  4387                           ;eusart.c: 106: eusartRxCount = 0;
  4388  128A  0021               	movlb	1	; select bank1
  4389  128B  01E5               	clrf	_eusartRxCount^(0+128)	;volatile
  4390                           
  4391                           ;eusart.c: 109: PIE1bits.RCIE = 1;
  4392  128C  1691               	bsf	17,5	;volatile
  4393  128D  0008               	return
  4394  128E                     __end_of_EUSART_Initialize:	
  4395                           
  4396                           	psect	text9
  4397  1FBA                     __ptext9:	
  4398 ;; *************** function _PROTOCOL_Set_Tick_Handler *****************
  4399 ;; Defined at:
  4400 ;;		line 85 in file "protocol.c"
  4401 ;; Parameters:    Size  Location     Type
  4402 ;;  tick_handler    2    0[BANK0 ] PTR void 
  4403 ;;		 -> tick_handler(1), 
  4404 ;; Auto vars:     Size  Location     Type
  4405 ;;		None
  4406 ;; Return value:  Size  Location     Type
  4407 ;;                  1    wreg      void 
  4408 ;; Registers used:
  4409 ;;		wreg
  4410 ;; Tracked objects:
  4411 ;;		On entry : 0/0
  4412 ;;		On exit  : 0/0
  4413 ;;		Unchanged: 0/0
  4414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4415 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4416 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4418 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4419 ;;Total ram usage:        2 bytes
  4420 ;; Hardware stack levels used:    1
  4421 ;; Hardware stack levels required when called:    3
  4422 ;; This function calls:
  4423 ;;		Nothing
  4424 ;; This function is called by:
  4425 ;;		_main
  4426 ;; This function uses a non-reentrant model
  4427 ;;
  4428                           
  4429                           
  4430                           ;psect for function _PROTOCOL_Set_Tick_Handler
  4431  1FBA                     _PROTOCOL_Set_Tick_Handler:	
  4432                           
  4433                           ;protocol.c: 86: PROTOCOL_Tick_Handler = tick_handler;
  4434                           
  4435                           ;incstack = 0
  4436                           ; Regs used in _PROTOCOL_Set_Tick_Handler: [wreg]
  4437  1FBA  0020               	movlb	0	; select bank0
  4438  1FBB  0821               	movf	PROTOCOL_Set_Tick_Handler@tick_handler+1,w
  4439  1FBC  0022               	movlb	2	; select bank2
  4440  1FBD  00A9               	movwf	(_PROTOCOL_Tick_Handler+1)^(0+256)
  4441  1FBE  0020               	movlb	0	; select bank0
  4442  1FBF  0820               	movf	PROTOCOL_Set_Tick_Handler@tick_handler,w
  4443  1FC0  0022               	movlb	2	; select bank2
  4444  1FC1  00A8               	movwf	_PROTOCOL_Tick_Handler^(0+256)
  4445  1FC2  0008               	return
  4446  1FC3                     __end_of_PROTOCOL_Set_Tick_Handler:	
  4447                           
  4448                           	psect	text10
  4449  1FB1                     __ptext10:	
  4450 ;; *************** function _PROTOCOL_Set_Extension_Handler *****************
  4451 ;; Defined at:
  4452 ;;		line 81 in file "protocol.c"
  4453 ;; Parameters:    Size  Location     Type
  4454 ;;  extension_ha    2    0[BANK0 ] PTR void 
  4455 ;;		 -> command_handler(1), 
  4456 ;; Auto vars:     Size  Location     Type
  4457 ;;		None
  4458 ;; Return value:  Size  Location     Type
  4459 ;;                  1    wreg      void 
  4460 ;; Registers used:
  4461 ;;		wreg
  4462 ;; Tracked objects:
  4463 ;;		On entry : 0/0
  4464 ;;		On exit  : 0/0
  4465 ;;		Unchanged: 0/0
  4466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4467 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4468 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4470 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4471 ;;Total ram usage:        2 bytes
  4472 ;; Hardware stack levels used:    1
  4473 ;; Hardware stack levels required when called:    3
  4474 ;; This function calls:
  4475 ;;		Nothing
  4476 ;; This function is called by:
  4477 ;;		_main
  4478 ;; This function uses a non-reentrant model
  4479 ;;
  4480                           
  4481                           
  4482                           ;psect for function _PROTOCOL_Set_Extension_Handler
  4483  1FB1                     _PROTOCOL_Set_Extension_Handler:	
  4484                           
  4485                           ;protocol.c: 82: PROTOCOL_Extension_Handler = extension_handler;
  4486                           
  4487                           ;incstack = 0
  4488                           ; Regs used in _PROTOCOL_Set_Extension_Handler: [wreg]
  4489  1FB1  0020               	movlb	0	; select bank0
  4490  1FB2  0821               	movf	PROTOCOL_Set_Extension_Handler@extension_handler+1,w
  4491  1FB3  0022               	movlb	2	; select bank2
  4492  1FB4  00AD               	movwf	(_PROTOCOL_Extension_Handler+1)^(0+256)
  4493  1FB5  0020               	movlb	0	; select bank0
  4494  1FB6  0820               	movf	PROTOCOL_Set_Extension_Handler@extension_handler,w
  4495  1FB7  0022               	movlb	2	; select bank2
  4496  1FB8  00AC               	movwf	_PROTOCOL_Extension_Handler^(0+256)
  4497  1FB9  0008               	return
  4498  1FBA                     __end_of_PROTOCOL_Set_Extension_Handler:	
  4499                           
  4500                           	psect	text11
  4501  0C8D                     __ptext11:	
  4502 ;; *************** function _PROTOCOL_Loop *****************
  4503 ;; Defined at:
  4504 ;;		line 136 in file "protocol.c"
  4505 ;; Parameters:    Size  Location     Type
  4506 ;;		None
  4507 ;; Auto vars:     Size  Location     Type
  4508 ;;  device_addre    1   74[BANK0 ] unsigned char 
  4509 ;;  c               1   73[BANK0 ] unsigned char 
  4510 ;; Return value:  Size  Location     Type
  4511 ;;                  1    wreg      void 
  4512 ;; Registers used:
  4513 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4514 ;; Tracked objects:
  4515 ;;		On entry : 0/0
  4516 ;;		On exit  : 0/0
  4517 ;;		Unchanged: 0/0
  4518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4520 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4521 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4522 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4523 ;;Total ram usage:        4 bytes
  4524 ;; Hardware stack levels used:    1
  4525 ;; Hardware stack levels required when called:   11
  4526 ;; This function calls:
  4527 ;;		Absolute function
  4528 ;;		_EUSART_Read
  4529 ;;		_PROTOCOL_EXT
  4530 ;;		_PROTOCOL_Read_Device_Address
  4531 ;;		_PROTOCOL_SAV
  4532 ;;		_PROTOCOL_SET
  4533 ;;		_PROTOCOL_STA
  4534 ;;		_PROTOCOL_STP
  4535 ;;		_PROTOCOL_Write_Device_Address
  4536 ;;		_TMR0_HasOverflowOccured
  4537 ;;		_atoi
  4538 ;;		_inv_handler
  4539 ;;		_printf
  4540 ;;		_strncmp
  4541 ;;		_tick_handler
  4542 ;; This function is called by:
  4543 ;;		_main
  4544 ;; This function uses a non-reentrant model
  4545 ;;
  4546                           
  4547                           
  4548                           ;psect for function _PROTOCOL_Loop
  4549  0C8D                     _PROTOCOL_Loop:	
  4550  0C8D                     l853:	
  4551                           ;incstack = 0
  4552                           ; Regs used in _PROTOCOL_Loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4553                           ;protocol.c: 137: uint8_t device_address;
  4554                           ;protocol.c: 138: uint8_t c;
  4555                           ;protocol.c: 139: while (1) {
  4556                           
  4557                           
  4558                           ;protocol.c: 140: tmr_overflow = TMR0_HasOverflowOccured();
  4559  0C8D  319F  2794  318C   	fcall	_TMR0_HasOverflowOccured
  4560  0C90  0020               	movlb	0	; select bank0
  4561  0C91  00E7               	movwf	??_PROTOCOL_Loop
  4562  0C92  0867               	movf	??_PROTOCOL_Loop,w
  4563  0C93  0022               	movlb	2	; select bank2
  4564  0C94  00BE               	movwf	_tmr_overflow^(0+256)
  4565                           
  4566                           ;protocol.c: 141: if (tmr_overflow) {
  4567  0C95  083E               	movf	_tmr_overflow^(0+256),w
  4568  0C96  1903               	btfsc	3,2
  4569  0C97  2CC4               	goto	l5697
  4570                           
  4571                           ;protocol.c: 142: TMR0IF = 0;
  4572  0C98  110B               	bcf	11,2	;volatile
  4573                           
  4574                           ;protocol.c: 143: if (PROTOCOL_Tick_Handler) PROTOCOL_Tick_Handler();
  4575  0C99  0828               	movf	_PROTOCOL_Tick_Handler^(0+256),w
  4576  0C9A  0429               	iorwf	(_PROTOCOL_Tick_Handler+1)^(0+256),w
  4577  0C9B  1903               	btfsc	3,2
  4578  0C9C  2CA2               	goto	l5683
  4579  0C9D  0829               	movf	(_PROTOCOL_Tick_Handler+1)^(0+256),w
  4580  0C9E  008A               	movwf	10
  4581  0C9F  0828               	movf	_PROTOCOL_Tick_Handler^(0+256),w
  4582  0CA0  000A               	callw
  4583  0CA1  318C               	pagesel	$
  4584  0CA2                     l5683:	
  4585                           
  4586                           ;protocol.c: 144: if (PROTOCOL_Inv_Handler && (++tmr_cnt >= value)) {
  4587  0CA2  0022               	movlb	2	; select bank2
  4588  0CA3  082A               	movf	_PROTOCOL_Inv_Handler^(0+256),w
  4589  0CA4  042B               	iorwf	(_PROTOCOL_Inv_Handler+1)^(0+256),w
  4590  0CA5  1903               	btfsc	3,2
  4591  0CA6  2CC4               	goto	l5697
  4592  0CA7  3001               	movlw	1
  4593  0CA8  0020               	movlb	0	; select bank0
  4594  0CA9  00E7               	movwf	??_PROTOCOL_Loop
  4595  0CAA  0867               	movf	??_PROTOCOL_Loop,w
  4596  0CAB  0022               	movlb	2	; select bank2
  4597  0CAC  07BF               	addwf	_tmr_cnt^(0+256),f
  4598  0CAD  0021               	movlb	1	; select bank1
  4599  0CAE  085E               	movf	_value^(0+128),w
  4600  0CAF  0022               	movlb	2	; select bank2
  4601  0CB0  023F               	subwf	_tmr_cnt^(0+256),w
  4602  0CB1  1C03               	skipc
  4603  0CB2  2CC4               	goto	l5697
  4604                           
  4605                           ;protocol.c: 145: tmr_cnt = 0;
  4606  0CB3  01BF               	clrf	_tmr_cnt^(0+256)
  4607                           
  4608                           ;protocol.c: 146: if (++sec_cnt >= tmr_scaler) {
  4609  0CB4  3001               	movlw	1
  4610  0CB5  0020               	movlb	0	; select bank0
  4611  0CB6  00E7               	movwf	??_PROTOCOL_Loop
  4612  0CB7  0867               	movf	??_PROTOCOL_Loop,w
  4613  0CB8  0022               	movlb	2	; select bank2
  4614  0CB9  07C0               	addwf	_sec_cnt^(0+256),f
  4615  0CBA  0862               	movf	_tmr_scaler^(0+256),w
  4616  0CBB  0240               	subwf	_sec_cnt^(0+256),w
  4617  0CBC  1C03               	skipc
  4618  0CBD  2CC4               	goto	l5697
  4619                           
  4620                           ;protocol.c: 147: if (running) invoked = 1;
  4621  0CBE  0842               	movf	_running^(0+256),w
  4622  0CBF  1903               	btfsc	3,2
  4623  0CC0  2CC3               	goto	l5695
  4624  0CC1  01C1               	clrf	_invoked^(0+256)
  4625  0CC2  0AC1               	incf	_invoked^(0+256),f
  4626  0CC3                     l5695:	
  4627                           
  4628                           ;protocol.c: 148: sec_cnt = 0;
  4629  0CC3  01C0               	clrf	_sec_cnt^(0+256)
  4630  0CC4                     l5697:	
  4631                           
  4632                           ;protocol.c: 149: }
  4633                           ;protocol.c: 150: }
  4634                           ;protocol.c: 151: }
  4635                           ;protocol.c: 152: if (invoked && PROTOCOL_Inv_Handler) {
  4636  0CC4  0841               	movf	_invoked^(0+256),w
  4637  0CC5  1903               	btfsc	3,2
  4638  0CC6  2CD2               	goto	l5707
  4639  0CC7  082A               	movf	_PROTOCOL_Inv_Handler^(0+256),w
  4640  0CC8  042B               	iorwf	(_PROTOCOL_Inv_Handler+1)^(0+256),w
  4641  0CC9  1903               	btfsc	3,2
  4642  0CCA  2CD2               	goto	l5707
  4643                           
  4644                           ;protocol.c: 153: PROTOCOL_Inv_Handler();
  4645  0CCB  082B               	movf	(_PROTOCOL_Inv_Handler+1)^(0+256),w
  4646  0CCC  008A               	movwf	10
  4647  0CCD  082A               	movf	_PROTOCOL_Inv_Handler^(0+256),w
  4648  0CCE  000A               	callw
  4649  0CCF  318C               	pagesel	$
  4650                           
  4651                           ;protocol.c: 154: invoked = 0;
  4652  0CD0  0022               	movlb	2	; select bank2
  4653  0CD1  01C1               	clrf	_invoked^(0+256)
  4654  0CD2                     l5707:	
  4655                           
  4656                           ;protocol.c: 157: if ((eusartRxCount)) {
  4657  0CD2  0021               	movlb	1	; select bank1
  4658  0CD3  0865               	movf	_eusartRxCount^(0+128),w	;volatile
  4659  0CD4  1903               	btfsc	3,2
  4660  0CD5  2C8D               	goto	l853
  4661                           
  4662                           ;protocol.c: 158: c = EUSART_Read();
  4663  0CD6  3193  2338  318C   	fcall	_EUSART_Read
  4664  0CD9  0020               	movlb	0	; select bank0
  4665  0CDA  00E7               	movwf	??_PROTOCOL_Loop
  4666  0CDB  0867               	movf	??_PROTOCOL_Loop,w
  4667  0CDC  00E9               	movwf	PROTOCOL_Loop@c
  4668                           
  4669                           ;protocol.c: 159: buf[cnt++] = c;
  4670  0CDD  0869               	movf	PROTOCOL_Loop@c,w
  4671  0CDE  00E7               	movwf	??_PROTOCOL_Loop
  4672  0CDF  0021               	movlb	1	; select bank1
  4673  0CE0  085F               	movf	_cnt^(0+128),w
  4674  0CE1  3E20               	addlw	(low (_buf| (0+512)))& (0+255)
  4675  0CE2  0086               	movwf	6
  4676  0CE3  3002               	movlw	2	; select bank4/5
  4677  0CE4  0087               	movwf	7
  4678  0CE5  0020               	movlb	0	; select bank0
  4679  0CE6  0867               	movf	??_PROTOCOL_Loop,w
  4680  0CE7  0081               	movwf	1
  4681  0CE8  3001               	movlw	1
  4682  0CE9  00E7               	movwf	??_PROTOCOL_Loop
  4683  0CEA  0867               	movf	??_PROTOCOL_Loop,w
  4684  0CEB  0021               	movlb	1	; select bank1
  4685  0CEC  07DF               	addwf	_cnt^(0+128),f
  4686                           
  4687                           ;protocol.c: 160: if (c == '\n') {
  4688  0CED  300A               	movlw	10
  4689  0CEE  0020               	movlb	0	; select bank0
  4690  0CEF  0669               	xorwf	PROTOCOL_Loop@c,w
  4691  0CF0  1D03               	btfss	3,2
  4692  0CF1  2C8D               	goto	l853
  4693                           
  4694                           ;protocol.c: 161: buf[--cnt] = '\0';
  4695  0CF2  3001               	movlw	1
  4696  0CF3  0021               	movlb	1	; select bank1
  4697  0CF4  02DF               	subwf	_cnt^(0+128),f
  4698  0CF5  085F               	movf	_cnt^(0+128),w
  4699  0CF6  3E20               	addlw	(low (_buf| (0+512)))& (0+255)
  4700  0CF7  0086               	movwf	6
  4701  0CF8  3002               	movlw	2	; select bank4/5
  4702  0CF9  0087               	movwf	7
  4703  0CFA  0181               	clrf	1
  4704                           
  4705                           ;protocol.c: 162: cnt = 0;
  4706  0CFB  01DF               	clrf	_cnt^(0+128)
  4707                           
  4708                           ;protocol.c: 163: printf("#%s\n", buf);
  4709  0CFC  3064               	movlw	low (STR_38| (0+32768))
  4710  0CFD  0020               	movlb	0	; select bank0
  4711  0CFE  00AE               	movwf	printf@f
  4712  0CFF  3091               	movlw	high (STR_38| (0+32768))
  4713  0D00  00AF               	movwf	printf@f+1
  4714  0D01  3020               	movlw	low _buf
  4715  0D02  00B0               	movwf	low ((?_printf| 0+2))
  4716  0D03  3002               	movlw	high _buf
  4717  0D04  00B1               	movwf	(low ((?_printf| 0+2))+1)
  4718  0D05  318E  262B  318C   	fcall	_printf
  4719                           
  4720                           ;protocol.c: 164: if (BACKPLANE_SLAVE_ADDRESS != 0x01) {
  4721  0D08  0021               	movlb	1	; select bank1
  4722  0D09  036E               	decf	_BACKPLANE_SLAVE_ADDRESS^(0+128),w
  4723  0D0A  1903               	btfsc	3,2
  4724  0D0B  2D11               	goto	l5727
  4725                           
  4726                           ;protocol.c: 165: PROTOCOL_EXT(buf);
  4727  0D0C  3020               	movlw	(low (_buf| (0+512)))& (0+255)
  4728  0D0D  3192  2232  318C   	fcall	_PROTOCOL_EXT
  4729                           
  4730                           ;protocol.c: 166: } else if (!strncmp(("WHO"), (buf), 3)) {
  4731  0D10  2C8D               	goto	l853
  4732  0D11                     l5727:	
  4733  0D11  309D               	movlw	low (STR_1| (0+32768))
  4734  0D12  0020               	movlb	0	; select bank0
  4735  0D13  00A0               	movwf	strncmp@s1
  4736  0D14  3091               	movlw	high (STR_1| (0+32768))
  4737  0D15  00A1               	movwf	strncmp@s1+1
  4738  0D16  3020               	movlw	low _buf
  4739  0D17  00A2               	movwf	strncmp@s2
  4740  0D18  3002               	movlw	high _buf
  4741  0D19  00A3               	movwf	strncmp@s2+1
  4742  0D1A  3003               	movlw	3
  4743  0D1B  00A4               	movwf	strncmp@len
  4744  0D1C  3000               	movlw	0
  4745  0D1D  00A5               	movwf	strncmp@len+1
  4746  0D1E  3195  255E  318C   	fcall	_strncmp
  4747  0D21  0020               	movlb	0	; select bank0
  4748  0D22  0820               	movf	?_strncmp,w
  4749  0D23  0421               	iorwf	?_strncmp+1,w
  4750  0D24  1D03               	btfss	3,2
  4751  0D25  2D36               	goto	l5731
  4752                           
  4753                           ;protocol.c: 167: printf("$:WHO:%s\n", device_id_);
  4754  0D26  30F4               	movlw	low (STR_40| (0+32768))
  4755  0D27  00AE               	movwf	printf@f
  4756  0D28  3090               	movlw	high (STR_40| (0+32768))
  4757  0D29  00AF               	movwf	printf@f+1
  4758  0D2A  0022               	movlb	2	; select bank2
  4759  0D2B  0827               	movf	(_device_id_+1)^(0+256),w
  4760  0D2C  0020               	movlb	0	; select bank0
  4761  0D2D  00B1               	movwf	(low ((?_printf| 0+2))+1)
  4762  0D2E  0022               	movlb	2	; select bank2
  4763  0D2F  0826               	movf	_device_id_^(0+256),w
  4764  0D30  0020               	movlb	0	; select bank0
  4765  0D31  00B0               	movwf	low ((?_printf| 0+2))
  4766  0D32  318E  262B  318C   	fcall	_printf
  4767                           
  4768                           ;protocol.c: 168: } else if (!strncmp(("SAV"), (buf), 3)) {
  4769  0D35  2C8D               	goto	l853
  4770  0D36                     l5731:	
  4771  0D36  30BD               	movlw	low (STR_4| (0+32768))
  4772  0D37  0020               	movlb	0	; select bank0
  4773  0D38  00A0               	movwf	strncmp@s1
  4774  0D39  3091               	movlw	high (STR_4| (0+32768))
  4775  0D3A  00A1               	movwf	strncmp@s1+1
  4776  0D3B  3020               	movlw	low _buf
  4777  0D3C  00A2               	movwf	strncmp@s2
  4778  0D3D  3002               	movlw	high _buf
  4779  0D3E  00A3               	movwf	strncmp@s2+1
  4780  0D3F  3003               	movlw	3
  4781  0D40  00A4               	movwf	strncmp@len
  4782  0D41  3000               	movlw	0
  4783  0D42  00A5               	movwf	strncmp@len+1
  4784  0D43  3195  255E  318C   	fcall	_strncmp
  4785  0D46  0020               	movlb	0	; select bank0
  4786  0D47  0820               	movf	?_strncmp,w
  4787  0D48  0421               	iorwf	?_strncmp+1,w
  4788  0D49  1D03               	btfss	3,2
  4789  0D4A  2D4F               	goto	l5735
  4790                           
  4791                           ;protocol.c: 169: PROTOCOL_SAV();
  4792  0D4B  319F  27C3  318C   	fcall	_PROTOCOL_SAV
  4793                           
  4794                           ;protocol.c: 170: } else if (!strncmp(("STA"), (buf), 3)) {
  4795  0D4E  2C8D               	goto	l853
  4796  0D4F                     l5735:	
  4797  0D4F  3081               	movlw	low (STR_5| (0+32768))
  4798  0D50  0020               	movlb	0	; select bank0
  4799  0D51  00A0               	movwf	strncmp@s1
  4800  0D52  3091               	movlw	high (STR_5| (0+32768))
  4801  0D53  00A1               	movwf	strncmp@s1+1
  4802  0D54  3020               	movlw	low _buf
  4803  0D55  00A2               	movwf	strncmp@s2
  4804  0D56  3002               	movlw	high _buf
  4805  0D57  00A3               	movwf	strncmp@s2+1
  4806  0D58  3003               	movlw	3
  4807  0D59  00A4               	movwf	strncmp@len
  4808  0D5A  3000               	movlw	0
  4809  0D5B  00A5               	movwf	strncmp@len+1
  4810  0D5C  3195  255E  318C   	fcall	_strncmp
  4811  0D5F  0020               	movlb	0	; select bank0
  4812  0D60  0820               	movf	?_strncmp,w
  4813  0D61  0421               	iorwf	?_strncmp+1,w
  4814  0D62  1D03               	btfss	3,2
  4815  0D63  2D68               	goto	l5739
  4816                           
  4817                           ;protocol.c: 171: PROTOCOL_STA();
  4818  0D64  319F  2790  318C   	fcall	_PROTOCOL_STA
  4819                           
  4820                           ;protocol.c: 172: } else if (!strncmp(("STP"), (buf), 3)) {
  4821  0D67  2C8D               	goto	l853
  4822  0D68                     l5739:	
  4823  0D68  30A5               	movlw	low (STR_6| (0+32768))
  4824  0D69  0020               	movlb	0	; select bank0
  4825  0D6A  00A0               	movwf	strncmp@s1
  4826  0D6B  3091               	movlw	high (STR_6| (0+32768))
  4827  0D6C  00A1               	movwf	strncmp@s1+1
  4828  0D6D  3020               	movlw	low _buf
  4829  0D6E  00A2               	movwf	strncmp@s2
  4830  0D6F  3002               	movlw	high _buf
  4831  0D70  00A3               	movwf	strncmp@s2+1
  4832  0D71  3003               	movlw	3
  4833  0D72  00A4               	movwf	strncmp@len
  4834  0D73  3000               	movlw	0
  4835  0D74  00A5               	movwf	strncmp@len+1
  4836  0D75  3195  255E  318C   	fcall	_strncmp
  4837  0D78  0020               	movlb	0	; select bank0
  4838  0D79  0820               	movf	?_strncmp,w
  4839  0D7A  0421               	iorwf	?_strncmp+1,w
  4840  0D7B  1D03               	btfss	3,2
  4841  0D7C  2D8D               	goto	l5745
  4842                           
  4843                           ;protocol.c: 173: PROTOCOL_STP();
  4844  0D7D  319F  2787  318C   	fcall	_PROTOCOL_STP
  4845                           
  4846                           ;protocol.c: 174: printf("*:STP:%s\n", "ACK");
  4847  0D80  30FE               	movlw	low (STR_44| (0+32768))
  4848  0D81  0020               	movlb	0	; select bank0
  4849  0D82  00AE               	movwf	printf@f
  4850  0D83  3090               	movlw	high (STR_44| (0+32768))
  4851  0D84  00AF               	movwf	printf@f+1
  4852  0D85  3079               	movlw	low (STR_45| (0+32768))
  4853  0D86  00B0               	movwf	low ((?_printf| 0+2))
  4854  0D87  3091               	movlw	high (STR_45| (0+32768))
  4855  0D88  00B1               	movwf	(low ((?_printf| 0+2))+1)
  4856  0D89  318E  262B  318C   	fcall	_printf
  4857                           
  4858                           ;protocol.c: 175: } else if (!strncmp(("SET"), (buf), 3)) {
  4859  0D8C  2C8D               	goto	l853
  4860  0D8D                     l5745:	
  4861  0D8D  30B1               	movlw	low (STR_9| (0+32768))
  4862  0D8E  0020               	movlb	0	; select bank0
  4863  0D8F  00A0               	movwf	strncmp@s1
  4864  0D90  3091               	movlw	high (STR_9| (0+32768))
  4865  0D91  00A1               	movwf	strncmp@s1+1
  4866  0D92  3020               	movlw	low _buf
  4867  0D93  00A2               	movwf	strncmp@s2
  4868  0D94  3002               	movlw	high _buf
  4869  0D95  00A3               	movwf	strncmp@s2+1
  4870  0D96  3003               	movlw	3
  4871  0D97  00A4               	movwf	strncmp@len
  4872  0D98  3000               	movlw	0
  4873  0D99  00A5               	movwf	strncmp@len+1
  4874  0D9A  3195  255E  318C   	fcall	_strncmp
  4875  0D9D  0020               	movlb	0	; select bank0
  4876  0D9E  0820               	movf	?_strncmp,w
  4877  0D9F  0421               	iorwf	?_strncmp+1,w
  4878  0DA0  1D03               	btfss	3,2
  4879  0DA1  2DAF               	goto	l5749
  4880                           
  4881                           ;protocol.c: 176: PROTOCOL_SET(atoi(&buf[4]));
  4882  0DA2  3024               	movlw	low (_buf+4)
  4883  0DA3  00A6               	movwf	atoi@s
  4884  0DA4  3002               	movlw	high (_buf+4)
  4885  0DA5  00A7               	movwf	atoi@s+1
  4886  0DA6  3189  2192  318C   	fcall	_atoi
  4887  0DA9  0020               	movlb	0	; select bank0
  4888  0DAA  0826               	movf	?_atoi,w
  4889  0DAB  319F  27A9  318C   	fcall	_PROTOCOL_SET
  4890                           
  4891                           ;protocol.c: 177: } else if (!strncmp(("GET"), (buf), 3)) {
  4892  0DAE  2C8D               	goto	l853
  4893  0DAF                     l5749:	
  4894  0DAF  30AD               	movlw	low (STR_10| (0+32768))
  4895  0DB0  0020               	movlb	0	; select bank0
  4896  0DB1  00A0               	movwf	strncmp@s1
  4897  0DB2  3091               	movlw	high (STR_10| (0+32768))
  4898  0DB3  00A1               	movwf	strncmp@s1+1
  4899  0DB4  3020               	movlw	low _buf
  4900  0DB5  00A2               	movwf	strncmp@s2
  4901  0DB6  3002               	movlw	high _buf
  4902  0DB7  00A3               	movwf	strncmp@s2+1
  4903  0DB8  3003               	movlw	3
  4904  0DB9  00A4               	movwf	strncmp@len
  4905  0DBA  3000               	movlw	0
  4906  0DBB  00A5               	movwf	strncmp@len+1
  4907  0DBC  3195  255E  318C   	fcall	_strncmp
  4908  0DBF  0020               	movlb	0	; select bank0
  4909  0DC0  0820               	movf	?_strncmp,w
  4910  0DC1  0421               	iorwf	?_strncmp+1,w
  4911  0DC2  1D03               	btfss	3,2
  4912  0DC3  2DD5               	goto	l5753
  4913                           
  4914                           ;protocol.c: 178: printf("$:GET:%d\n", value);
  4915  0DC4  3026               	movlw	low (STR_11| (0+32768))
  4916  0DC5  00AE               	movwf	printf@f
  4917  0DC6  3091               	movlw	high (STR_11| (0+32768))
  4918  0DC7  00AF               	movwf	printf@f+1
  4919  0DC8  0021               	movlb	1	; select bank1
  4920  0DC9  085E               	movf	_value^(0+128),w
  4921  0DCA  0020               	movlb	0	; select bank0
  4922  0DCB  00E7               	movwf	??_PROTOCOL_Loop
  4923  0DCC  01E8               	clrf	??_PROTOCOL_Loop+1
  4924  0DCD  0867               	movf	??_PROTOCOL_Loop,w
  4925  0DCE  00B0               	movwf	?_printf+2
  4926  0DCF  0868               	movf	??_PROTOCOL_Loop+1,w
  4927  0DD0  00B1               	movwf	?_printf+3
  4928  0DD1  318E  262B  318C   	fcall	_printf
  4929                           
  4930                           ;protocol.c: 179: } else if (!strncmp(("WDA"), (buf), 3)) {
  4931  0DD4  2C8D               	goto	l853
  4932  0DD5                     l5753:	
  4933  0DD5  3075               	movlw	low (STR_49| (0+32768))
  4934  0DD6  0020               	movlb	0	; select bank0
  4935  0DD7  00A0               	movwf	strncmp@s1
  4936  0DD8  3091               	movlw	high (STR_49| (0+32768))
  4937  0DD9  00A1               	movwf	strncmp@s1+1
  4938  0DDA  3020               	movlw	low _buf
  4939  0DDB  00A2               	movwf	strncmp@s2
  4940  0DDC  3002               	movlw	high _buf
  4941  0DDD  00A3               	movwf	strncmp@s2+1
  4942  0DDE  3003               	movlw	3
  4943  0DDF  00A4               	movwf	strncmp@len
  4944  0DE0  3000               	movlw	0
  4945  0DE1  00A5               	movwf	strncmp@len+1
  4946  0DE2  3195  255E  318C   	fcall	_strncmp
  4947  0DE5  0020               	movlb	0	; select bank0
  4948  0DE6  0820               	movf	?_strncmp,w
  4949  0DE7  0421               	iorwf	?_strncmp+1,w
  4950  0DE8  1D03               	btfss	3,2
  4951  0DE9  2DFB               	goto	l5759
  4952                           
  4953                           ;protocol.c: 180: device_address = atoi(&buf[4]);
  4954  0DEA  3024               	movlw	low (_buf+4)
  4955  0DEB  00A6               	movwf	atoi@s
  4956  0DEC  3002               	movlw	high (_buf+4)
  4957  0DED  00A7               	movwf	atoi@s+1
  4958  0DEE  3189  2192  318C   	fcall	_atoi
  4959  0DF1  0020               	movlb	0	; select bank0
  4960  0DF2  0826               	movf	?_atoi,w
  4961  0DF3  00E7               	movwf	??_PROTOCOL_Loop
  4962  0DF4  0867               	movf	??_PROTOCOL_Loop,w
  4963  0DF5  00EA               	movwf	PROTOCOL_Loop@device_address
  4964                           
  4965                           ;protocol.c: 181: PROTOCOL_Write_Device_Address(device_address);
  4966  0DF6  086A               	movf	PROTOCOL_Loop@device_address,w
  4967  0DF7  3191  21ED  318C   	fcall	_PROTOCOL_Write_Device_Address
  4968                           
  4969                           ;protocol.c: 182: } else if (!strncmp(("RDA"), (buf), 3)) {
  4970  0DFA  2C8D               	goto	l853
  4971  0DFB                     l5759:	
  4972  0DFB  3071               	movlw	low (STR_50| (0+32768))
  4973  0DFC  0020               	movlb	0	; select bank0
  4974  0DFD  00A0               	movwf	strncmp@s1
  4975  0DFE  3091               	movlw	high (STR_50| (0+32768))
  4976  0DFF  00A1               	movwf	strncmp@s1+1
  4977  0E00  3020               	movlw	low _buf
  4978  0E01  00A2               	movwf	strncmp@s2
  4979  0E02  3002               	movlw	high _buf
  4980  0E03  00A3               	movwf	strncmp@s2+1
  4981  0E04  3003               	movlw	3
  4982  0E05  00A4               	movwf	strncmp@len
  4983  0E06  3000               	movlw	0
  4984  0E07  00A5               	movwf	strncmp@len+1
  4985  0E08  3195  255E  318C   	fcall	_strncmp
  4986  0E0B  0020               	movlb	0	; select bank0
  4987  0E0C  0820               	movf	?_strncmp,w
  4988  0E0D  0421               	iorwf	?_strncmp+1,w
  4989  0E0E  1D03               	btfss	3,2
  4990  0E0F  2E26               	goto	l5765
  4991                           
  4992                           ;protocol.c: 183: device_address = PROTOCOL_Read_Device_Address();
  4993  0E10  319F  2784  318C   	fcall	_PROTOCOL_Read_Device_Address
  4994  0E13  0020               	movlb	0	; select bank0
  4995  0E14  00E7               	movwf	??_PROTOCOL_Loop
  4996  0E15  0867               	movf	??_PROTOCOL_Loop,w
  4997  0E16  00EA               	movwf	PROTOCOL_Loop@device_address
  4998                           
  4999                           ;protocol.c: 184: printf("$:RDA:%d\n", device_address);
  5000  0E17  30E0               	movlw	low (STR_51| (0+32768))
  5001  0E18  00AE               	movwf	printf@f
  5002  0E19  3090               	movlw	high (STR_51| (0+32768))
  5003  0E1A  00AF               	movwf	printf@f+1
  5004  0E1B  086A               	movf	PROTOCOL_Loop@device_address,w
  5005  0E1C  00E7               	movwf	??_PROTOCOL_Loop
  5006  0E1D  01E8               	clrf	??_PROTOCOL_Loop+1
  5007  0E1E  0867               	movf	??_PROTOCOL_Loop,w
  5008  0E1F  00B0               	movwf	?_printf+2
  5009  0E20  0868               	movf	??_PROTOCOL_Loop+1,w
  5010  0E21  00B1               	movwf	?_printf+3
  5011  0E22  318E  262B  318C   	fcall	_printf
  5012                           
  5013                           ;protocol.c: 185: } else {
  5014  0E25  2C8D               	goto	l853
  5015  0E26                     l5765:	
  5016                           
  5017                           ;protocol.c: 186: PROTOCOL_EXT(buf);
  5018  0E26  3020               	movlw	(low (_buf| (0+512)))& (0+255)
  5019  0E27  3192  2232  318C   	fcall	_PROTOCOL_EXT
  5020  0E2A  2C8D               	goto	l853
  5021  0E2B                     __end_of_PROTOCOL_Loop:	
  5022                           
  5023                           	psect	text12
  5024  1679                     __ptext12:	
  5025 ;; *************** function _tick_handler *****************
  5026 ;; Defined at:
  5027 ;;		line 314 in file "main.c"
  5028 ;; Parameters:    Size  Location     Type
  5029 ;;		None
  5030 ;; Auto vars:     Size  Location     Type
  5031 ;;		None
  5032 ;; Return value:  Size  Location     Type
  5033 ;;                  1    wreg      void 
  5034 ;; Registers used:
  5035 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5036 ;; Tracked objects:
  5037 ;;		On entry : 0/0
  5038 ;;		On exit  : 0/0
  5039 ;;		Unchanged: 0/0
  5040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5042 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5043 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5044 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5045 ;;Total ram usage:        1 bytes
  5046 ;; Hardware stack levels used:    1
  5047 ;; Hardware stack levels required when called:    8
  5048 ;; This function calls:
  5049 ;;		___lwmod
  5050 ;;		_check_plg
  5051 ;;		_exec_remote_cmd
  5052 ;;		_scan_dev
  5053 ;; This function is called by:
  5054 ;;		_main
  5055 ;;		_PROTOCOL_Loop
  5056 ;; This function uses a non-reentrant model
  5057 ;;
  5058                           
  5059                           
  5060                           ;psect for function _tick_handler
  5061  1679                     _tick_handler:	
  5062                           
  5063                           ;main.c: 315: static uint16_t t = 0;
  5064                           ;main.c: 316: static int8_t cmd_next = 0;
  5065                           ;main.c: 317: t++;
  5066                           
  5067                           ;incstack = 0
  5068                           ; Regs used in _tick_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5069  1679  3001               	movlw	1
  5070  167A  0022               	movlb	2	; select bank2
  5071  167B  07B6               	addwf	tick_handler@t^(0+256),f
  5072  167C  3000               	movlw	0
  5073  167D  3DB7               	addwfc	(tick_handler@t+1)^(0+256),f
  5074                           
  5075                           ;main.c: 319: if (exec_remote_cmd(cmd_next)) {
  5076  167E  0021               	movlb	1	; select bank1
  5077  167F  0860               	movf	tick_handler@cmd_next^(0+128),w
  5078  1680  3185  255B  3196   	fcall	_exec_remote_cmd
  5079  1683  3A00               	xorlw	0
  5080  1684  1903               	skipnz
  5081  1685  2E91               	goto	l5413
  5082                           
  5083                           ;main.c: 320: cmd_next++;
  5084  1686  3001               	movlw	1
  5085  1687  0020               	movlb	0	; select bank0
  5086  1688  00C9               	movwf	??_tick_handler
  5087  1689  0849               	movf	??_tick_handler,w
  5088  168A  0021               	movlb	1	; select bank1
  5089  168B  07E0               	addwf	tick_handler@cmd_next^(0+128),f
  5090                           
  5091                           ;main.c: 321: if (cmd_next > 3) cmd_next = 0;
  5092  168C  0860               	movf	tick_handler@cmd_next^(0+128),w
  5093  168D  3A80               	xorlw	128
  5094  168E  3E7C               	addlw	-132
  5095  168F  1803               	btfsc	3,0
  5096  1690  01E0               	clrf	tick_handler@cmd_next^(0+128)
  5097  1691                     l5413:	
  5098                           
  5099                           ;main.c: 322: }
  5100                           ;main.c: 324: if (t % 600 == 0) {
  5101  1691  3058               	movlw	88
  5102  1692  0020               	movlb	0	; select bank0
  5103  1693  00A8               	movwf	___lwmod@divisor
  5104  1694  3002               	movlw	2
  5105  1695  00A9               	movwf	___lwmod@divisor+1
  5106  1696  0022               	movlb	2	; select bank2
  5107  1697  0837               	movf	(tick_handler@t+1)^(0+256),w
  5108  1698  0020               	movlb	0	; select bank0
  5109  1699  00AB               	movwf	___lwmod@dividend+1
  5110  169A  0022               	movlb	2	; select bank2
  5111  169B  0836               	movf	tick_handler@t^(0+256),w
  5112  169C  0020               	movlb	0	; select bank0
  5113  169D  00AA               	movwf	___lwmod@dividend
  5114  169E  3194  2494  3196   	fcall	___lwmod
  5115  16A1  0020               	movlb	0	; select bank0
  5116  16A2  0828               	movf	?___lwmod,w
  5117  16A3  0429               	iorwf	?___lwmod+1,w
  5118  16A4  1D03               	btfss	3,2
  5119  16A5  2EAC               	goto	l5419
  5120                           
  5121                           ;main.c: 325: scan_dev();
  5122  16A6  3188  2002         	fcall	_scan_dev
  5123                           
  5124                           ;main.c: 326: t = 0;
  5125  16A8  0022               	movlb	2	; select bank2
  5126  16A9  01B6               	clrf	tick_handler@t^(0+256)
  5127  16AA  01B7               	clrf	(tick_handler@t+1)^(0+256)
  5128                           
  5129                           ;main.c: 327: } else if (t % 60 == 0) {
  5130  16AB  0008               	return
  5131  16AC                     l5419:	
  5132  16AC  303C               	movlw	60
  5133  16AD  0020               	movlb	0	; select bank0
  5134  16AE  00A8               	movwf	___lwmod@divisor
  5135  16AF  3000               	movlw	0
  5136  16B0  00A9               	movwf	___lwmod@divisor+1
  5137  16B1  0022               	movlb	2	; select bank2
  5138  16B2  0837               	movf	(tick_handler@t+1)^(0+256),w
  5139  16B3  0020               	movlb	0	; select bank0
  5140  16B4  00AB               	movwf	___lwmod@dividend+1
  5141  16B5  0022               	movlb	2	; select bank2
  5142  16B6  0836               	movf	tick_handler@t^(0+256),w
  5143  16B7  0020               	movlb	0	; select bank0
  5144  16B8  00AA               	movwf	___lwmod@dividend
  5145  16B9  3194  2494  3196   	fcall	___lwmod
  5146  16BC  0020               	movlb	0	; select bank0
  5147  16BD  0828               	movf	?___lwmod,w
  5148  16BE  0429               	iorwf	?___lwmod+1,w
  5149  16BF  1D03               	btfss	3,2
  5150  16C0  0008               	return
  5151                           
  5152                           ;main.c: 328: check_plg();
  5153  16C1  3192  2245         	fcall	_check_plg
  5154  16C3  0008               	return
  5155  16C4                     __end_of_tick_handler:	
  5156                           
  5157                           	psect	text13
  5158  055B                     __ptext13:	
  5159 ;; *************** function _exec_remote_cmd *****************
  5160 ;; Defined at:
  5161 ;;		line 58 in file "main.c"
  5162 ;; Parameters:    Size  Location     Type
  5163 ;;  idx             1    wreg     unsigned char 
  5164 ;; Auto vars:     Size  Location     Type
  5165 ;;  idx             1   50[BANK1 ] unsigned char 
  5166 ;;  send_buf       50    0[BANK1 ] unsigned char [50]
  5167 ;;  buf             2   55[BANK1 ] PTR unsigned char 
  5168 ;;		 -> cmd_buf(192), 
  5169 ;;  data            1   54[BANK1 ] unsigned char 
  5170 ;;  status          1   53[BANK1 ] unsigned char 
  5171 ;;  i               1   52[BANK1 ] unsigned char 
  5172 ;;  j               1   51[BANK1 ] unsigned char 
  5173 ;; Return value:  Size  Location     Type
  5174 ;;                  1    wreg      unsigned char 
  5175 ;; Registers used:
  5176 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5177 ;; Tracked objects:
  5178 ;;		On entry : 0/0
  5179 ;;		On exit  : 0/0
  5180 ;;		Unchanged: 0/0
  5181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5182 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5183 ;;      Locals:         0       0      57       0       0       0       0       0       0       0       0       0       
      +0       0
  5184 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5185 ;;      Totals:         0       5      57       0       0       0       0       0       0       0       0       0       
      +0       0
  5186 ;;Total ram usage:       62 bytes
  5187 ;; Hardware stack levels used:    1
  5188 ;; Hardware stack levels required when called:    6
  5189 ;; This function calls:
  5190 ;;		___wmul
  5191 ;;		_atoi
  5192 ;;		_i2c1_read
  5193 ;;		_i2c1_write
  5194 ;;		_i2c1_write_no_data
  5195 ;;		_printf
  5196 ;;		_strncmp
  5197 ;; This function is called by:
  5198 ;;		_tick_handler
  5199 ;; This function uses a non-reentrant model
  5200 ;;
  5201                           
  5202                           
  5203                           ;psect for function _exec_remote_cmd
  5204  055B                     _exec_remote_cmd:	
  5205                           
  5206                           ;incstack = 0
  5207                           ; Regs used in _exec_remote_cmd: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5208                           ;exec_remote_cmd@idx stored from wreg
  5209  055B  0021               	movlb	1	; select bank1
  5210  055C  00D2               	movwf	exec_remote_cmd@idx^(0+128)
  5211                           
  5212                           ;main.c: 59: uint8_t data;
  5213                           ;main.c: 60: uint8_t i, j;
  5214                           ;main.c: 61: uint8_t status;
  5215                           ;main.c: 63: uint8_t send_buf[48 + 2];
  5216                           ;main.c: 65: char *buf = cmd_buf[idx];
  5217  055D  0852               	movf	exec_remote_cmd@idx^(0+128),w
  5218  055E  0020               	movlb	0	; select bank0
  5219  055F  00C4               	movwf	??_exec_remote_cmd
  5220  0560  01C5               	clrf	??_exec_remote_cmd+1
  5221  0561  0844               	movf	??_exec_remote_cmd,w
  5222  0562  00A0               	movwf	___wmul@multiplier
  5223  0563  0845               	movf	??_exec_remote_cmd+1,w
  5224  0564  00A1               	movwf	___wmul@multiplier+1
  5225  0565  3030               	movlw	48
  5226  0566  00A2               	movwf	___wmul@multiplicand
  5227  0567  3000               	movlw	0
  5228  0568  00A3               	movwf	___wmul@multiplicand+1
  5229  0569  3192  22E1  3185   	fcall	___wmul
  5230  056C  3030               	movlw	48
  5231  056D  0020               	movlb	0	; select bank0
  5232  056E  00C6               	movwf	??_exec_remote_cmd+2
  5233  056F  3023               	movlw	35
  5234  0570  00C7               	movwf	??_exec_remote_cmd+3
  5235  0571  0820               	movf	?___wmul,w
  5236  0572  0746               	addwf	??_exec_remote_cmd+2,w
  5237  0573  0021               	movlb	1	; select bank1
  5238  0574  00D7               	movwf	exec_remote_cmd@buf^(0+128)
  5239  0575  0020               	movlb	0	; select bank0
  5240  0576  0821               	movf	?___wmul+1,w
  5241  0577  3D47               	addwfc	??_exec_remote_cmd+3,w
  5242  0578  0021               	movlb	1	; select bank1
  5243  0579  00D8               	movwf	(exec_remote_cmd@buf+1)^(0+128)
  5244                           
  5245                           ;main.c: 66: if (buf[0] == '\0') return 0;
  5246  057A  0857               	movf	exec_remote_cmd@buf^(0+128),w
  5247  057B  0086               	movwf	6
  5248  057C  0858               	movf	(exec_remote_cmd@buf+1)^(0+128),w
  5249  057D  0087               	movwf	7
  5250  057E  0801               	movf	1,w
  5251  057F  1D03               	btfss	3,2
  5252  0580  2D83               	goto	l5153
  5253  0581  3000               	movlw	0
  5254  0582  0008               	return
  5255  0583                     l5153:	
  5256                           
  5257                           ;main.c: 68: if (!strncmp(("WHO"), (buf), 3)) {
  5258  0583  309D               	movlw	low (STR_1| (0+32768))
  5259  0584  0020               	movlb	0	; select bank0
  5260  0585  00A0               	movwf	strncmp@s1
  5261  0586  3091               	movlw	high (STR_1| (0+32768))
  5262  0587  00A1               	movwf	strncmp@s1+1
  5263  0588  0021               	movlb	1	; select bank1
  5264  0589  0858               	movf	(exec_remote_cmd@buf+1)^(0+128),w
  5265  058A  0020               	movlb	0	; select bank0
  5266  058B  00A3               	movwf	strncmp@s2+1
  5267  058C  0021               	movlb	1	; select bank1
  5268  058D  0857               	movf	exec_remote_cmd@buf^(0+128),w
  5269  058E  0020               	movlb	0	; select bank0
  5270  058F  00A2               	movwf	strncmp@s2
  5271  0590  3003               	movlw	3
  5272  0591  00A4               	movwf	strncmp@len
  5273  0592  3000               	movlw	0
  5274  0593  00A5               	movwf	strncmp@len+1
  5275  0594  3195  255E  3185   	fcall	_strncmp
  5276  0597  0020               	movlb	0	; select bank0
  5277  0598  0820               	movf	?_strncmp,w
  5278  0599  0421               	iorwf	?_strncmp+1,w
  5279  059A  1D03               	btfss	3,2
  5280  059B  2DC2               	goto	l5163
  5281                           
  5282                           ;main.c: 69: status = i2c1_read(BACKPLANE_SLAVE_ADDRESS, 0x01, &data, 1);
  5283  059C  0021               	movlb	1	; select bank1
  5284  059D  086E               	movf	_BACKPLANE_SLAVE_ADDRESS^(0+128),w
  5285  059E  0020               	movlb	0	; select bank0
  5286  059F  00C4               	movwf	??_exec_remote_cmd
  5287  05A0  01C5               	clrf	??_exec_remote_cmd+1
  5288  05A1  0844               	movf	??_exec_remote_cmd,w
  5289  05A2  00B0               	movwf	i2c1_read@dev_addr
  5290  05A3  0845               	movf	??_exec_remote_cmd+1,w
  5291  05A4  00B1               	movwf	i2c1_read@dev_addr+1
  5292  05A5  01B2               	clrf	i2c1_read@reg_addr
  5293  05A6  0AB2               	incf	i2c1_read@reg_addr,f
  5294  05A7  30D6               	movlw	low exec_remote_cmd@data
  5295  05A8  00B3               	movwf	i2c1_read@pbuf
  5296  05A9  3000               	movlw	high exec_remote_cmd@data
  5297  05AA  00B4               	movwf	i2c1_read@pbuf+1
  5298  05AB  01B5               	clrf	i2c1_read@len
  5299  05AC  0AB5               	incf	i2c1_read@len,f
  5300  05AD  3188  208C  3185   	fcall	_i2c1_read
  5301  05B0  0020               	movlb	0	; select bank0
  5302  05B1  00C6               	movwf	??_exec_remote_cmd+2
  5303  05B2  0846               	movf	??_exec_remote_cmd+2,w
  5304  05B3  0021               	movlb	1	; select bank1
  5305  05B4  00D5               	movwf	exec_remote_cmd@status^(0+128)
  5306                           
  5307                           ;main.c: 70: if (status == 0) printf("$:WHO:%d\n", data);
  5308  05B5  0855               	movf	exec_remote_cmd@status^(0+128),w
  5309  05B6  1D03               	btfss	3,2
  5310  05B7  2DBD               	goto	l5161
  5311  05B8  301C               	movlw	low (STR_2| (0+32768))
  5312  05B9  0020               	movlb	0	; select bank0
  5313  05BA  00AE               	movwf	printf@f
  5314  05BB  3091               	movlw	high (STR_2| (0+32768))
  5315  05BC  2ED5               	goto	L5
  5316  05BD                     l5161:	
  5317                           
  5318                           ;main.c: 71: else printf("!:WHO:NACK\n");
  5319  05BD  30BD               	movlw	low (STR_3| (0+32768))
  5320  05BE  0020               	movlb	0	; select bank0
  5321  05BF  00AE               	movwf	printf@f
  5322  05C0  3090               	movlw	high (STR_3| (0+32768))
  5323  05C1  2F43               	goto	L6
  5324  05C2                     l5163:	
  5325                           ;main.c: 72: } else if (!strncmp(("SAV"), (buf), 3)) {
  5326                           
  5327  05C2  30BD               	movlw	low (STR_4| (0+32768))
  5328  05C3  0020               	movlb	0	; select bank0
  5329  05C4  00A0               	movwf	strncmp@s1
  5330  05C5  3091               	movlw	high (STR_4| (0+32768))
  5331  05C6  00A1               	movwf	strncmp@s1+1
  5332  05C7  0021               	movlb	1	; select bank1
  5333  05C8  0858               	movf	(exec_remote_cmd@buf+1)^(0+128),w
  5334  05C9  0020               	movlb	0	; select bank0
  5335  05CA  00A3               	movwf	strncmp@s2+1
  5336  05CB  0021               	movlb	1	; select bank1
  5337  05CC  0857               	movf	exec_remote_cmd@buf^(0+128),w
  5338  05CD  0020               	movlb	0	; select bank0
  5339  05CE  00A2               	movwf	strncmp@s2
  5340  05CF  3003               	movlw	3
  5341  05D0  00A4               	movwf	strncmp@len
  5342  05D1  3000               	movlw	0
  5343  05D2  00A5               	movwf	strncmp@len+1
  5344  05D3  3195  255E  3185   	fcall	_strncmp
  5345  05D6  0020               	movlb	0	; select bank0
  5346  05D7  0820               	movf	?_strncmp,w
  5347  05D8  0421               	iorwf	?_strncmp+1,w
  5348  05D9  1D03               	btfss	3,2
  5349  05DA  2DE6               	goto	l5167
  5350                           
  5351                           ;main.c: 73: status = i2c1_write_no_data(BACKPLANE_SLAVE_ADDRESS, 0x03);
  5352  05DB  0021               	movlb	1	; select bank1
  5353  05DC  086E               	movf	_BACKPLANE_SLAVE_ADDRESS^(0+128),w
  5354  05DD  0020               	movlb	0	; select bank0
  5355  05DE  00C4               	movwf	??_exec_remote_cmd
  5356  05DF  01C5               	clrf	??_exec_remote_cmd+1
  5357  05E0  0844               	movf	??_exec_remote_cmd,w
  5358  05E1  00AE               	movwf	i2c1_write_no_data@dev_addr
  5359  05E2  0845               	movf	??_exec_remote_cmd+1,w
  5360  05E3  00AF               	movwf	i2c1_write_no_data@dev_addr+1
  5361  05E4  3003               	movlw	3
  5362  05E5  2E09               	goto	L4
  5363  05E6                     l5167:	
  5364                           ;main.c: 74: } else if (!strncmp(("STA"), (buf), 3)) {
  5365                           
  5366  05E6  3081               	movlw	low (STR_5| (0+32768))
  5367  05E7  0020               	movlb	0	; select bank0
  5368  05E8  00A0               	movwf	strncmp@s1
  5369  05E9  3091               	movlw	high (STR_5| (0+32768))
  5370  05EA  00A1               	movwf	strncmp@s1+1
  5371  05EB  0021               	movlb	1	; select bank1
  5372  05EC  0858               	movf	(exec_remote_cmd@buf+1)^(0+128),w
  5373  05ED  0020               	movlb	0	; select bank0
  5374  05EE  00A3               	movwf	strncmp@s2+1
  5375  05EF  0021               	movlb	1	; select bank1
  5376  05F0  0857               	movf	exec_remote_cmd@buf^(0+128),w
  5377  05F1  0020               	movlb	0	; select bank0
  5378  05F2  00A2               	movwf	strncmp@s2
  5379  05F3  3003               	movlw	3
  5380  05F4  00A4               	movwf	strncmp@len
  5381  05F5  3000               	movlw	0
  5382  05F6  00A5               	movwf	strncmp@len+1
  5383  05F7  3195  255E  3185   	fcall	_strncmp
  5384  05FA  0020               	movlb	0	; select bank0
  5385  05FB  0820               	movf	?_strncmp,w
  5386  05FC  0421               	iorwf	?_strncmp+1,w
  5387  05FD  1D03               	btfss	3,2
  5388  05FE  2E15               	goto	l5171
  5389                           
  5390                           ;main.c: 75: status = i2c1_write_no_data(BACKPLANE_SLAVE_ADDRESS, 0x04);
  5391  05FF  0021               	movlb	1	; select bank1
  5392  0600  086E               	movf	_BACKPLANE_SLAVE_ADDRESS^(0+128),w
  5393  0601  0020               	movlb	0	; select bank0
  5394  0602  00C4               	movwf	??_exec_remote_cmd
  5395  0603  01C5               	clrf	??_exec_remote_cmd+1
  5396  0604  0844               	movf	??_exec_remote_cmd,w
  5397  0605  00AE               	movwf	i2c1_write_no_data@dev_addr
  5398  0606  0845               	movf	??_exec_remote_cmd+1,w
  5399  0607  00AF               	movwf	i2c1_write_no_data@dev_addr+1
  5400  0608  3004               	movlw	4
  5401  0609                     L4:	
  5402  0609  00C6               	movwf	??_exec_remote_cmd+2
  5403  060A  0846               	movf	??_exec_remote_cmd+2,w
  5404  060B  00B0               	movwf	i2c1_write_no_data@reg_addr
  5405  060C  3194  243D  3185   	fcall	_i2c1_write_no_data
  5406  060F  0020               	movlb	0	; select bank0
  5407  0610  00C7               	movwf	??_exec_remote_cmd+3
  5408  0611  0847               	movf	??_exec_remote_cmd+3,w
  5409  0612  0021               	movlb	1	; select bank1
  5410  0613  00D5               	movwf	exec_remote_cmd@status^(0+128)
  5411                           
  5412                           ;main.c: 76: } else if (!strncmp(("STP"), (buf), 3)) {
  5413  0614  2F46               	goto	l5209
  5414  0615                     l5171:	
  5415  0615  30A5               	movlw	low (STR_6| (0+32768))
  5416  0616  0020               	movlb	0	; select bank0
  5417  0617  00A0               	movwf	strncmp@s1
  5418  0618  3091               	movlw	high (STR_6| (0+32768))
  5419  0619  00A1               	movwf	strncmp@s1+1
  5420  061A  0021               	movlb	1	; select bank1
  5421  061B  0858               	movf	(exec_remote_cmd@buf+1)^(0+128),w
  5422  061C  0020               	movlb	0	; select bank0
  5423  061D  00A3               	movwf	strncmp@s2+1
  5424  061E  0021               	movlb	1	; select bank1
  5425  061F  0857               	movf	exec_remote_cmd@buf^(0+128),w
  5426  0620  0020               	movlb	0	; select bank0
  5427  0621  00A2               	movwf	strncmp@s2
  5428  0622  3003               	movlw	3
  5429  0623  00A4               	movwf	strncmp@len
  5430  0624  3000               	movlw	0
  5431  0625  00A5               	movwf	strncmp@len+1
  5432  0626  3195  255E  3185   	fcall	_strncmp
  5433  0629  0020               	movlb	0	; select bank0
  5434  062A  0820               	movf	?_strncmp,w
  5435  062B  0421               	iorwf	?_strncmp+1,w
  5436  062C  1D03               	btfss	3,2
  5437  062D  2E50               	goto	l5181
  5438                           
  5439                           ;main.c: 77: status = i2c1_write_no_data(BACKPLANE_SLAVE_ADDRESS, 0x05);
  5440  062E  0021               	movlb	1	; select bank1
  5441  062F  086E               	movf	_BACKPLANE_SLAVE_ADDRESS^(0+128),w
  5442  0630  0020               	movlb	0	; select bank0
  5443  0631  00C4               	movwf	??_exec_remote_cmd
  5444  0632  01C5               	clrf	??_exec_remote_cmd+1
  5445  0633  0844               	movf	??_exec_remote_cmd,w
  5446  0634  00AE               	movwf	i2c1_write_no_data@dev_addr
  5447  0635  0845               	movf	??_exec_remote_cmd+1,w
  5448  0636  00AF               	movwf	i2c1_write_no_data@dev_addr+1
  5449  0637  3005               	movlw	5
  5450  0638  00C6               	movwf	??_exec_remote_cmd+2
  5451  0639  0846               	movf	??_exec_remote_cmd+2,w
  5452  063A  00B0               	movwf	i2c1_write_no_data@reg_addr
  5453  063B  3194  243D  3185   	fcall	_i2c1_write_no_data
  5454  063E  0020               	movlb	0	; select bank0
  5455  063F  00C7               	movwf	??_exec_remote_cmd+3
  5456  0640  0847               	movf	??_exec_remote_cmd+3,w
  5457  0641  0021               	movlb	1	; select bank1
  5458  0642  00D5               	movwf	exec_remote_cmd@status^(0+128)
  5459                           
  5460                           ;main.c: 78: if (status == 0) printf("*:STP:ACK\n");
  5461  0643  0855               	movf	exec_remote_cmd@status^(0+128),w
  5462  0644  1D03               	btfss	3,2
  5463  0645  2E4B               	goto	l5179
  5464  0646  30D5               	movlw	low (STR_7| (0+32768))
  5465  0647  0020               	movlb	0	; select bank0
  5466  0648  00AE               	movwf	printf@f
  5467  0649  3090               	movlw	high (STR_7| (0+32768))
  5468  064A  2F43               	goto	L6
  5469  064B                     l5179:	
  5470                           
  5471                           ;main.c: 79: else printf("!:STP:NACK\n");
  5472  064B  30C9               	movlw	low (STR_8| (0+32768))
  5473  064C  0020               	movlb	0	; select bank0
  5474  064D  00AE               	movwf	printf@f
  5475  064E  3090               	movlw	high (STR_8| (0+32768))
  5476  064F  2F43               	goto	L6
  5477  0650                     l5181:	
  5478                           ;main.c: 80: } else if (!strncmp(("SET"), (buf), 3)) {
  5479                           
  5480  0650  30B1               	movlw	low (STR_9| (0+32768))
  5481  0651  0020               	movlb	0	; select bank0
  5482  0652  00A0               	movwf	strncmp@s1
  5483  0653  3091               	movlw	high (STR_9| (0+32768))
  5484  0654  00A1               	movwf	strncmp@s1+1
  5485  0655  0021               	movlb	1	; select bank1
  5486  0656  0858               	movf	(exec_remote_cmd@buf+1)^(0+128),w
  5487  0657  0020               	movlb	0	; select bank0
  5488  0658  00A3               	movwf	strncmp@s2+1
  5489  0659  0021               	movlb	1	; select bank1
  5490  065A  0857               	movf	exec_remote_cmd@buf^(0+128),w
  5491  065B  0020               	movlb	0	; select bank0
  5492  065C  00A2               	movwf	strncmp@s2
  5493  065D  3003               	movlw	3
  5494  065E  00A4               	movwf	strncmp@len
  5495  065F  3000               	movlw	0
  5496  0660  00A5               	movwf	strncmp@len+1
  5497  0661  3195  255E  3185   	fcall	_strncmp
  5498  0664  0020               	movlb	0	; select bank0
  5499  0665  0820               	movf	?_strncmp,w
  5500  0666  0421               	iorwf	?_strncmp+1,w
  5501  0667  1D03               	btfss	3,2
  5502  0668  2EA2               	goto	l5185
  5503                           
  5504                           ;main.c: 81: data = atoi(&buf[4]);
  5505  0669  0021               	movlb	1	; select bank1
  5506  066A  0857               	movf	exec_remote_cmd@buf^(0+128),w
  5507  066B  3E04               	addlw	4
  5508  066C  0020               	movlb	0	; select bank0
  5509  066D  00C4               	movwf	??_exec_remote_cmd
  5510  066E  3000               	movlw	0
  5511  066F  0021               	movlb	1	; select bank1
  5512  0670  3D58               	addwfc	(exec_remote_cmd@buf+1)^(0+128),w
  5513  0671  0020               	movlb	0	; select bank0
  5514  0672  00C5               	movwf	??_exec_remote_cmd+1
  5515  0673  0844               	movf	??_exec_remote_cmd,w
  5516  0674  00A6               	movwf	atoi@s
  5517  0675  0845               	movf	??_exec_remote_cmd+1,w
  5518  0676  00A7               	movwf	atoi@s+1
  5519  0677  3189  2192  3185   	fcall	_atoi
  5520  067A  0020               	movlb	0	; select bank0
  5521  067B  0826               	movf	?_atoi,w
  5522  067C  00C6               	movwf	??_exec_remote_cmd+2
  5523  067D  0846               	movf	??_exec_remote_cmd+2,w
  5524  067E  0021               	movlb	1	; select bank1
  5525  067F  00D6               	movwf	exec_remote_cmd@data^(0+128)
  5526                           
  5527                           ;main.c: 82: i2c1_write_no_data(BACKPLANE_SLAVE_ADDRESS, 0x08);
  5528  0680  086E               	movf	_BACKPLANE_SLAVE_ADDRESS^(0+128),w
  5529  0681  0020               	movlb	0	; select bank0
  5530  0682  00C4               	movwf	??_exec_remote_cmd
  5531  0683  01C5               	clrf	??_exec_remote_cmd+1
  5532  0684  0844               	movf	??_exec_remote_cmd,w
  5533  0685  00AE               	movwf	i2c1_write_no_data@dev_addr
  5534  0686  0845               	movf	??_exec_remote_cmd+1,w
  5535  0687  00AF               	movwf	i2c1_write_no_data@dev_addr+1
  5536  0688  3008               	movlw	8
  5537  0689  00C6               	movwf	??_exec_remote_cmd+2
  5538  068A  0846               	movf	??_exec_remote_cmd+2,w
  5539  068B  00B0               	movwf	i2c1_write_no_data@reg_addr
  5540  068C  3194  243D  3185   	fcall	_i2c1_write_no_data
  5541                           
  5542                           ;main.c: 83: i2c1_write_no_data(BACKPLANE_SLAVE_ADDRESS, data);
  5543  068F  0021               	movlb	1	; select bank1
  5544  0690  086E               	movf	_BACKPLANE_SLAVE_ADDRESS^(0+128),w
  5545  0691  0020               	movlb	0	; select bank0
  5546  0692  00C4               	movwf	??_exec_remote_cmd
  5547  0693  01C5               	clrf	??_exec_remote_cmd+1
  5548  0694  0844               	movf	??_exec_remote_cmd,w
  5549  0695  00AE               	movwf	i2c1_write_no_data@dev_addr
  5550  0696  0845               	movf	??_exec_remote_cmd+1,w
  5551  0697  00AF               	movwf	i2c1_write_no_data@dev_addr+1
  5552  0698  0021               	movlb	1	; select bank1
  5553  0699  0856               	movf	exec_remote_cmd@data^(0+128),w
  5554  069A  0020               	movlb	0	; select bank0
  5555  069B  00C6               	movwf	??_exec_remote_cmd+2
  5556  069C  0846               	movf	??_exec_remote_cmd+2,w
  5557  069D  00B0               	movwf	i2c1_write_no_data@reg_addr
  5558  069E  3194  243D  3185   	fcall	_i2c1_write_no_data
  5559                           
  5560                           ;main.c: 84: } else if (!strncmp(("GET"), (buf), 3)) {
  5561  06A1  2F46               	goto	l5209
  5562  06A2                     l5185:	
  5563  06A2  30AD               	movlw	low (STR_10| (0+32768))
  5564  06A3  0020               	movlb	0	; select bank0
  5565  06A4  00A0               	movwf	strncmp@s1
  5566  06A5  3091               	movlw	high (STR_10| (0+32768))
  5567  06A6  00A1               	movwf	strncmp@s1+1
  5568  06A7  0021               	movlb	1	; select bank1
  5569  06A8  0858               	movf	(exec_remote_cmd@buf+1)^(0+128),w
  5570  06A9  0020               	movlb	0	; select bank0
  5571  06AA  00A3               	movwf	strncmp@s2+1
  5572  06AB  0021               	movlb	1	; select bank1
  5573  06AC  0857               	movf	exec_remote_cmd@buf^(0+128),w
  5574  06AD  0020               	movlb	0	; select bank0
  5575  06AE  00A2               	movwf	strncmp@s2
  5576  06AF  3003               	movlw	3
  5577  06B0  00A4               	movwf	strncmp@len
  5578  06B1  3000               	movlw	0
  5579  06B2  00A5               	movwf	strncmp@len+1
  5580  06B3  3195  255E  3185   	fcall	_strncmp
  5581  06B6  0020               	movlb	0	; select bank0
  5582  06B7  0820               	movf	?_strncmp,w
  5583  06B8  0421               	iorwf	?_strncmp+1,w
  5584  06B9  1D03               	btfss	3,2
  5585  06BA  2EE0               	goto	l5191
  5586                           
  5587                           ;main.c: 85: i2c1_read(BACKPLANE_SLAVE_ADDRESS, 0x09, &data, 1);
  5588  06BB  0021               	movlb	1	; select bank1
  5589  06BC  086E               	movf	_BACKPLANE_SLAVE_ADDRESS^(0+128),w
  5590  06BD  0020               	movlb	0	; select bank0
  5591  06BE  00C4               	movwf	??_exec_remote_cmd
  5592  06BF  01C5               	clrf	??_exec_remote_cmd+1
  5593  06C0  0844               	movf	??_exec_remote_cmd,w
  5594  06C1  00B0               	movwf	i2c1_read@dev_addr
  5595  06C2  0845               	movf	??_exec_remote_cmd+1,w
  5596  06C3  00B1               	movwf	i2c1_read@dev_addr+1
  5597  06C4  3009               	movlw	9
  5598  06C5  00C6               	movwf	??_exec_remote_cmd+2
  5599  06C6  0846               	movf	??_exec_remote_cmd+2,w
  5600  06C7  00B2               	movwf	i2c1_read@reg_addr
  5601  06C8  30D6               	movlw	low exec_remote_cmd@data
  5602  06C9  00B3               	movwf	i2c1_read@pbuf
  5603  06CA  3000               	movlw	high exec_remote_cmd@data
  5604  06CB  00B4               	movwf	i2c1_read@pbuf+1
  5605  06CC  01B5               	clrf	i2c1_read@len
  5606  06CD  0AB5               	incf	i2c1_read@len,f
  5607  06CE  3188  208C  3185   	fcall	_i2c1_read
  5608                           
  5609                           ;main.c: 86: printf("$:GET:%d\n", data);
  5610  06D1  3026               	movlw	low (STR_11| (0+32768))
  5611  06D2  0020               	movlb	0	; select bank0
  5612  06D3  00AE               	movwf	printf@f
  5613  06D4  3091               	movlw	high (STR_11| (0+32768))
  5614  06D5                     L5:	
  5615  06D5  00AF               	movwf	printf@f+1
  5616  06D6  0021               	movlb	1	; select bank1
  5617  06D7  0856               	movf	exec_remote_cmd@data^(0+128),w
  5618  06D8  0020               	movlb	0	; select bank0
  5619  06D9  00C4               	movwf	??_exec_remote_cmd
  5620  06DA  01C5               	clrf	??_exec_remote_cmd+1
  5621  06DB  0844               	movf	??_exec_remote_cmd,w
  5622  06DC  00B0               	movwf	?_printf+2
  5623  06DD  0845               	movf	??_exec_remote_cmd+1,w
  5624  06DE  00B1               	movwf	?_printf+3
  5625  06DF  2F44               	goto	L3
  5626  06E0                     l5191:	
  5627                           ;main.c: 88: } else {
  5628                           
  5629                           
  5630                           ;main.c: 89: i = 0;
  5631  06E0  0021               	movlb	1	; select bank1
  5632  06E1  01D4               	clrf	exec_remote_cmd@i^(0+128)
  5633                           
  5634                           ;main.c: 90: j = 2;
  5635  06E2  3002               	movlw	2
  5636  06E3  0020               	movlb	0	; select bank0
  5637  06E4  00C4               	movwf	??_exec_remote_cmd
  5638  06E5  0844               	movf	??_exec_remote_cmd,w
  5639  06E6  0021               	movlb	1	; select bank1
  5640  06E7  00D3               	movwf	exec_remote_cmd@j^(0+128)
  5641  06E8                     l5195:	
  5642                           ;main.c: 91: do {
  5643                           
  5644                           
  5645                           ;main.c: 92: send_buf[j++] = (uint8_t)buf[i];
  5646  06E8  0854               	movf	exec_remote_cmd@i^(0+128),w
  5647  06E9  0020               	movlb	0	; select bank0
  5648  06EA  00C4               	movwf	??_exec_remote_cmd
  5649  06EB  01C5               	clrf	??_exec_remote_cmd+1
  5650  06EC  0844               	movf	??_exec_remote_cmd,w
  5651  06ED  0021               	movlb	1	; select bank1
  5652  06EE  0757               	addwf	exec_remote_cmd@buf^(0+128),w
  5653  06EF  0086               	movwf	6
  5654  06F0  0020               	movlb	0	; select bank0
  5655  06F1  0845               	movf	??_exec_remote_cmd+1,w
  5656  06F2  0021               	movlb	1	; select bank1
  5657  06F3  3D58               	addwfc	(exec_remote_cmd@buf+1)^(0+128),w
  5658  06F4  0087               	movwf	7
  5659  06F5  0801               	movf	1,w
  5660  06F6  0020               	movlb	0	; select bank0
  5661  06F7  00C6               	movwf	??_exec_remote_cmd+2
  5662  06F8  0021               	movlb	1	; select bank1
  5663  06F9  0853               	movf	exec_remote_cmd@j^(0+128),w
  5664  06FA  3EA0               	addlw	(low (exec_remote_cmd@send_buf| 0))& (0+255)
  5665  06FB  0086               	movwf	6
  5666  06FC  0187               	clrf	7
  5667  06FD  0020               	movlb	0	; select bank0
  5668  06FE  0846               	movf	??_exec_remote_cmd+2,w
  5669  06FF  0081               	movwf	1
  5670  0700  3001               	movlw	1
  5671  0701  00C4               	movwf	??_exec_remote_cmd
  5672  0702  0844               	movf	??_exec_remote_cmd,w
  5673  0703  0021               	movlb	1	; select bank1
  5674  0704  07D3               	addwf	exec_remote_cmd@j^(0+128),f
  5675                           
  5676                           ;main.c: 93: } while (buf[i++] != '\0');
  5677  0705  0854               	movf	exec_remote_cmd@i^(0+128),w
  5678  0706  0AD4               	incf	exec_remote_cmd@i^(0+128),f
  5679  0707  0020               	movlb	0	; select bank0
  5680  0708  00C4               	movwf	??_exec_remote_cmd
  5681  0709  01C5               	clrf	??_exec_remote_cmd+1
  5682  070A  0844               	movf	??_exec_remote_cmd,w
  5683  070B  0021               	movlb	1	; select bank1
  5684  070C  0757               	addwf	exec_remote_cmd@buf^(0+128),w
  5685  070D  0086               	movwf	6
  5686  070E  0020               	movlb	0	; select bank0
  5687  070F  0845               	movf	??_exec_remote_cmd+1,w
  5688  0710  0021               	movlb	1	; select bank1
  5689  0711  3D58               	addwfc	(exec_remote_cmd@buf+1)^(0+128),w
  5690  0712  0087               	movwf	7
  5691  0713  0801               	movf	1,w
  5692  0714  1D03               	btfss	3,2
  5693  0715  2EE8               	goto	l5195
  5694                           
  5695                           ;main.c: 94: send_buf[0] = 0x0a;
  5696  0716  300A               	movlw	10
  5697  0717  0020               	movlb	0	; select bank0
  5698  0718  00C4               	movwf	??_exec_remote_cmd
  5699  0719  0844               	movf	??_exec_remote_cmd,w
  5700  071A  0021               	movlb	1	; select bank1
  5701  071B  00A0               	movwf	exec_remote_cmd@send_buf^(0+128)
  5702                           
  5703                           ;main.c: 95: send_buf[1] = i;
  5704  071C  0854               	movf	exec_remote_cmd@i^(0+128),w
  5705  071D  0020               	movlb	0	; select bank0
  5706  071E  00C4               	movwf	??_exec_remote_cmd
  5707  071F  0844               	movf	??_exec_remote_cmd,w
  5708  0720  0021               	movlb	1	; select bank1
  5709  0721  00A1               	movwf	(exec_remote_cmd@send_buf^(0+128)+1)
  5710                           
  5711                           ;main.c: 96: status = i2c1_write(BACKPLANE_SLAVE_ADDRESS, send_buf, j);
  5712  0722  086E               	movf	_BACKPLANE_SLAVE_ADDRESS^(0+128),w
  5713  0723  0020               	movlb	0	; select bank0
  5714  0724  00C4               	movwf	??_exec_remote_cmd
  5715  0725  01C5               	clrf	??_exec_remote_cmd+1
  5716  0726  0844               	movf	??_exec_remote_cmd,w
  5717  0727  00AE               	movwf	i2c1_write@dev_addr
  5718  0728  0845               	movf	??_exec_remote_cmd+1,w
  5719  0729  00AF               	movwf	i2c1_write@dev_addr+1
  5720  072A  30A0               	movlw	(low (exec_remote_cmd@send_buf| 0))& (0+255)
  5721  072B  00C6               	movwf	??_exec_remote_cmd+2
  5722  072C  0846               	movf	??_exec_remote_cmd+2,w
  5723  072D  00B0               	movwf	i2c1_write@pbuf
  5724  072E  0021               	movlb	1	; select bank1
  5725  072F  0853               	movf	exec_remote_cmd@j^(0+128),w
  5726  0730  0020               	movlb	0	; select bank0
  5727  0731  00C7               	movwf	??_exec_remote_cmd+3
  5728  0732  0847               	movf	??_exec_remote_cmd+3,w
  5729  0733  00B1               	movwf	i2c1_write@len
  5730  0734  3193  23EB  3185   	fcall	_i2c1_write
  5731  0737  0020               	movlb	0	; select bank0
  5732  0738  00C8               	movwf	??_exec_remote_cmd+4
  5733  0739  0848               	movf	??_exec_remote_cmd+4,w
  5734  073A  0021               	movlb	1	; select bank1
  5735  073B  00D5               	movwf	exec_remote_cmd@status^(0+128)
  5736                           
  5737                           ;main.c: 97: if (status != 0) printf("!:NO ACK FROM I2C SLAVE\n");
  5738  073C  0855               	movf	exec_remote_cmd@status^(0+128),w
  5739  073D  1903               	btfsc	3,2
  5740  073E  2F46               	goto	l5209
  5741  073F  3059               	movlw	low (STR_12| (0+32768))
  5742  0740  0020               	movlb	0	; select bank0
  5743  0741  00AE               	movwf	printf@f
  5744  0742  3090               	movlw	high (STR_12| (0+32768))
  5745  0743                     L6:	
  5746  0743  00AF               	movwf	printf@f+1
  5747  0744                     L3:	
  5748  0744  318E  262B         	fcall	_printf
  5749  0746                     l5209:	
  5750                           
  5751                           ;main.c: 99: }
  5752                           ;main.c: 100: buf[0] = '\0';
  5753  0746  0021               	movlb	1	; select bank1
  5754  0747  0857               	movf	exec_remote_cmd@buf^(0+128),w
  5755  0748  0086               	movwf	6
  5756  0749  0858               	movf	(exec_remote_cmd@buf+1)^(0+128),w
  5757  074A  0087               	movwf	7
  5758  074B  0181               	clrf	1
  5759                           
  5760                           ;main.c: 101: return 1;
  5761  074C  3001               	movlw	1
  5762  074D  0008               	return
  5763  074E                     __end_of_exec_remote_cmd:	
  5764                           
  5765                           	psect	text14
  5766  13EB                     __ptext14:	
  5767 ;; *************** function _i2c1_write *****************
  5768 ;; Defined at:
  5769 ;;		line 8 in file "i2c1_util.c"
  5770 ;; Parameters:    Size  Location     Type
  5771 ;;  dev_addr        2   14[BANK0 ] unsigned int 
  5772 ;;  pbuf            1   16[BANK0 ] PTR unsigned char 
  5773 ;;		 -> exec_remote_cmd@send_buf(50), 
  5774 ;;  len             1   17[BANK0 ] unsigned char 
  5775 ;; Auto vars:     Size  Location     Type
  5776 ;;  status          1   21[BANK0 ] enum E3078
  5777 ;;  write_status    1   20[BANK0 ] unsigned char 
  5778 ;; Return value:  Size  Location     Type
  5779 ;;                  1    wreg      unsigned char 
  5780 ;; Registers used:
  5781 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5782 ;; Tracked objects:
  5783 ;;		On entry : 0/0
  5784 ;;		On exit  : 0/0
  5785 ;;		Unchanged: 0/0
  5786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5787 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5788 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5789 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5790 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5791 ;;Total ram usage:        8 bytes
  5792 ;; Hardware stack levels used:    1
  5793 ;; Hardware stack levels required when called:    5
  5794 ;; This function calls:
  5795 ;;		_I2C1_MasterWrite
  5796 ;; This function is called by:
  5797 ;;		_exec_remote_cmd
  5798 ;; This function uses a non-reentrant model
  5799 ;;
  5800                           
  5801                           
  5802                           ;psect for function _i2c1_write
  5803  13EB                     _i2c1_write:	
  5804                           
  5805                           ;i2c1_util.c: 10: I2C1_MESSAGE_STATUS status;
  5806                           ;i2c1_util.c: 11: uint8_t write_status;
  5807                           ;i2c1_util.c: 12: _delay((unsigned long)((100)*(32000000/4000000.0)));
  5808                           
  5809                           ;incstack = 0
  5810                           ; Regs used in _i2c1_write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5811  13EB  30A0               	movlw	160
  5812  13EC                     u6777:	
  5813  13EC  3200               	nop2
  5814  13ED  0B89               	decfsz	9,f
  5815  13EE  2BEC               	goto	u6777
  5816                           
  5817                           ;i2c1_util.c: 13: I2C1_MasterWrite(pbuf, len, dev_addr, &status);
  5818  13EF  0020               	movlb	0	; select bank0
  5819  13F0  0831               	movf	i2c1_write@len,w
  5820  13F1  00B2               	movwf	??_i2c1_write
  5821  13F2  0832               	movf	??_i2c1_write,w
  5822  13F3  00A7               	movwf	I2C1_MasterWrite@length
  5823  13F4  082F               	movf	i2c1_write@dev_addr+1,w
  5824  13F5  00A9               	movwf	I2C1_MasterWrite@address+1
  5825  13F6  082E               	movf	i2c1_write@dev_addr,w
  5826  13F7  00A8               	movwf	I2C1_MasterWrite@address
  5827  13F8  3035               	movlw	(low (i2c1_write@status| 0))& (0+255)
  5828  13F9  00B3               	movwf	??_i2c1_write+1
  5829  13FA  0833               	movf	??_i2c1_write+1,w
  5830  13FB  00AA               	movwf	I2C1_MasterWrite@pflag
  5831  13FC  0830               	movf	i2c1_write@pbuf,w
  5832  13FD  3194  2413  3193   	fcall	_I2C1_MasterWrite
  5833  1400                     l3931:	
  5834                           ;i2c1_util.c: 14: while (status == I2C1_MESSAGE_PENDING) {_delay((unsigned long)((100)*(
      +                          32000000/4000000.0)));};
  5835                           
  5836  1400  3002               	movlw	2
  5837  1401  0020               	movlb	0	; select bank0
  5838  1402  0635               	xorwf	i2c1_write@status,w
  5839  1403  1D03               	btfss	3,2
  5840  1404  2C0A               	goto	l3933
  5841  1405  30A0               	movlw	160
  5842  1406                     u6787:	
  5843  1406  3200               	nop2
  5844  1407  0B89               	decfsz	9,f
  5845  1408  2C06               	goto	u6787
  5846  1409  2C00               	goto	l3931
  5847  140A                     l3933:	
  5848                           
  5849                           ;i2c1_util.c: 15: if (status == I2C1_MESSAGE_COMPLETE) {
  5850  140A  0835               	movf	i2c1_write@status,w
  5851  140B  1D03               	btfss	3,2
  5852  140C  2C0F               	goto	l631
  5853                           
  5854                           ;i2c1_util.c: 16: write_status = 0;
  5855  140D  01B4               	clrf	i2c1_write@write_status
  5856                           
  5857                           ;i2c1_util.c: 17: } else {
  5858  140E  2C11               	goto	l3937
  5859  140F                     l631:	
  5860                           
  5861                           ;i2c1_util.c: 18: write_status = 1;
  5862  140F  01B4               	clrf	i2c1_write@write_status
  5863  1410  0AB4               	incf	i2c1_write@write_status,f
  5864  1411                     l3937:	
  5865                           
  5866                           ;i2c1_util.c: 19: }
  5867                           ;i2c1_util.c: 20: return write_status;
  5868  1411  0834               	movf	i2c1_write@write_status,w
  5869  1412  0008               	return
  5870  1413                     __end_of_i2c1_write:	
  5871                           
  5872                           	psect	text15
  5873  1245                     __ptext15:	
  5874 ;; *************** function _check_plg *****************
  5875 ;; Defined at:
  5876 ;;		line 203 in file "main.c"
  5877 ;; Parameters:    Size  Location     Type
  5878 ;;		None
  5879 ;; Auto vars:     Size  Location     Type
  5880 ;;  status          1   34[BANK0 ] unsigned char 
  5881 ;; Return value:  Size  Location     Type
  5882 ;;                  1    wreg      void 
  5883 ;; Registers used:
  5884 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5885 ;; Tracked objects:
  5886 ;;		On entry : 0/0
  5887 ;;		On exit  : 0/0
  5888 ;;		Unchanged: 0/0
  5889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5891 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5892 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5893 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5894 ;;Total ram usage:        3 bytes
  5895 ;; Hardware stack levels used:    1
  5896 ;; Hardware stack levels required when called:    7
  5897 ;; This function calls:
  5898 ;;		_i2c1_write_no_data
  5899 ;;		_scan_dev
  5900 ;; This function is called by:
  5901 ;;		_tick_handler
  5902 ;; This function uses a non-reentrant model
  5903 ;;
  5904                           
  5905                           
  5906                           ;psect for function _check_plg
  5907  1245                     _check_plg:	
  5908                           
  5909                           ;main.c: 204: uint8_t status = i2c1_write_no_data(0x00, 0x02);
  5910                           
  5911                           ;incstack = 0
  5912                           ; Regs used in _check_plg: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5913  1245  3000               	movlw	0
  5914  1246  0020               	movlb	0	; select bank0
  5915  1247  00AE               	movwf	i2c1_write_no_data@dev_addr
  5916  1248  00AF               	movwf	i2c1_write_no_data@dev_addr+1
  5917  1249  3002               	movlw	2
  5918  124A  00C0               	movwf	??_check_plg
  5919  124B  0840               	movf	??_check_plg,w
  5920  124C  00B0               	movwf	i2c1_write_no_data@reg_addr
  5921  124D  3194  243D  3192   	fcall	_i2c1_write_no_data
  5922  1250  0020               	movlb	0	; select bank0
  5923  1251  00C1               	movwf	??_check_plg+1
  5924  1252  0841               	movf	??_check_plg+1,w
  5925  1253  00C2               	movwf	check_plg@status
  5926                           
  5927                           ;main.c: 205: if (status == 0) scan_dev();
  5928  1254  0842               	movf	check_plg@status,w
  5929  1255  1D03               	btfss	3,2
  5930  1256  0008               	return
  5931  1257  3188  2002         	fcall	_scan_dev
  5932  1259  0008               	return
  5933  125A                     __end_of_check_plg:	
  5934                           
  5935                           	psect	text16
  5936  0802                     __ptext16:	
  5937 ;; *************** function _scan_dev *****************
  5938 ;; Defined at:
  5939 ;;		line 187 in file "main.c"
  5940 ;; Parameters:    Size  Location     Type
  5941 ;;		None
  5942 ;; Auto vars:     Size  Location     Type
  5943 ;;  dev_addr        1   31[BANK0 ] unsigned char 
  5944 ;;  status          1   30[BANK0 ] unsigned char 
  5945 ;; Return value:  Size  Location     Type
  5946 ;;                  1    wreg      void 
  5947 ;; Registers used:
  5948 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5949 ;; Tracked objects:
  5950 ;;		On entry : 0/0
  5951 ;;		On exit  : 0/0
  5952 ;;		Unchanged: 0/0
  5953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5955 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5956 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5957 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5958 ;;Total ram usage:        5 bytes
  5959 ;; Hardware stack levels used:    1
  5960 ;; Hardware stack levels required when called:    6
  5961 ;; This function calls:
  5962 ;;		_add_dev
  5963 ;;		_del_dev
  5964 ;;		_i2c1_read
  5965 ;; This function is called by:
  5966 ;;		_check_plg
  5967 ;;		_tick_handler
  5968 ;; This function uses a non-reentrant model
  5969 ;;
  5970                           
  5971                           
  5972                           ;psect for function _scan_dev
  5973  0802                     _scan_dev:	
  5974                           
  5975                           ;main.c: 188: uint8_t dev_addr, status;
  5976                           ;main.c: 189: for (dev_addr=0x10; dev_addr<=0x20; dev_addr++) {
  5977                           
  5978                           ;incstack = 0
  5979                           ; Regs used in _scan_dev: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5980  0802  3010               	movlw	16
  5981  0803  0020               	movlb	0	; select bank0
  5982  0804  00BB               	movwf	??_scan_dev
  5983  0805  083B               	movf	??_scan_dev,w
  5984  0806  00BF               	movwf	scan_dev@dev_addr
  5985  0807                     L7:	
  5986  0807  3021               	movlw	33
  5987  0808  023F               	subwf	scan_dev@dev_addr,w
  5988  0809  1803               	btfsc	3,0
  5989  080A  0008               	return
  5990                           
  5991                           ;main.c: 190: status = i2c1_read(dev_addr, 0x01, &read_buf[0], 1);
  5992  080B  083F               	movf	scan_dev@dev_addr,w
  5993  080C  00BB               	movwf	??_scan_dev
  5994  080D  01BC               	clrf	??_scan_dev+1
  5995  080E  083B               	movf	??_scan_dev,w
  5996  080F  00B0               	movwf	i2c1_read@dev_addr
  5997  0810  083C               	movf	??_scan_dev+1,w
  5998  0811  00B1               	movwf	i2c1_read@dev_addr+1
  5999  0812  01B2               	clrf	i2c1_read@reg_addr
  6000  0813  0AB2               	incf	i2c1_read@reg_addr,f
  6001  0814  30CC               	movlw	low _read_buf
  6002  0815  00B3               	movwf	i2c1_read@pbuf
  6003  0816  3001               	movlw	high _read_buf
  6004  0817  00B4               	movwf	i2c1_read@pbuf+1
  6005  0818  01B5               	clrf	i2c1_read@len
  6006  0819  0AB5               	incf	i2c1_read@len,f
  6007  081A  3188  208C  3188   	fcall	_i2c1_read
  6008  081D  0020               	movlb	0	; select bank0
  6009  081E  00BD               	movwf	??_scan_dev+2
  6010  081F  083D               	movf	??_scan_dev+2,w
  6011  0820  00BE               	movwf	scan_dev@status
  6012                           
  6013                           ;main.c: 192: if (status == 0 && dev_addr == read_buf[0]) {
  6014  0821  083E               	movf	scan_dev@status,w
  6015  0822  1D03               	btfss	3,2
  6016  0823  282F               	goto	l3953
  6017  0824  0023               	movlb	3	; select bank3
  6018  0825  084C               	movf	_read_buf^(0+384),w
  6019  0826  0020               	movlb	0	; select bank0
  6020  0827  063F               	xorwf	scan_dev@dev_addr,w
  6021  0828  1D03               	skipz
  6022  0829  282F               	goto	l3953
  6023                           
  6024                           ;main.c: 193: add_dev(dev_addr);
  6025  082A  083F               	movf	scan_dev@dev_addr,w
  6026  082B  3197  2711  3188   	fcall	_add_dev
  6027                           
  6028                           ;main.c: 194: } else {
  6029  082E  2834               	goto	l3955
  6030  082F                     l3953:	
  6031                           
  6032                           ;main.c: 195: del_dev(dev_addr);
  6033  082F  0020               	movlb	0	; select bank0
  6034  0830  083F               	movf	scan_dev@dev_addr,w
  6035  0831  3196  26C4  3188   	fcall	_del_dev
  6036  0834                     l3955:	
  6037  0834  3001               	movlw	1
  6038  0835  0020               	movlb	0	; select bank0
  6039  0836  00BB               	movwf	??_scan_dev
  6040  0837  083B               	movf	??_scan_dev,w
  6041  0838  07BF               	addwf	scan_dev@dev_addr,f
  6042  0839  2807               	goto	L7
  6043  083A                     __end_of_scan_dev:	
  6044                           
  6045                           	psect	text17
  6046  16C4                     __ptext17:	
  6047 ;; *************** function _del_dev *****************
  6048 ;; Defined at:
  6049 ;;		line 139 in file "main.c"
  6050 ;; Parameters:    Size  Location     Type
  6051 ;;  dev_addr        1    wreg     unsigned char 
  6052 ;; Auto vars:     Size  Location     Type
  6053 ;;  dev_addr        1   16[BANK0 ] unsigned char 
  6054 ;;  y               1   15[BANK0 ] unsigned char 
  6055 ;;  new_map         1   14[BANK0 ] unsigned char 
  6056 ;;  old_map         1   13[BANK0 ] unsigned char 
  6057 ;;  x               1   12[BANK0 ] unsigned char 
  6058 ;; Return value:  Size  Location     Type
  6059 ;;                  1    wreg      void 
  6060 ;; Registers used:
  6061 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6062 ;; Tracked objects:
  6063 ;;		On entry : 0/0
  6064 ;;		On exit  : 0/0
  6065 ;;		Unchanged: 0/0
  6066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6068 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6069 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6070 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6071 ;;Total ram usage:        8 bytes
  6072 ;; Hardware stack levels used:    1
  6073 ;; Hardware stack levels required when called:    4
  6074 ;; This function calls:
  6075 ;;		___awdiv
  6076 ;; This function is called by:
  6077 ;;		_scan_dev
  6078 ;; This function uses a non-reentrant model
  6079 ;;
  6080                           
  6081                           
  6082                           ;psect for function _del_dev
  6083  16C4                     _del_dev:	
  6084                           
  6085                           ;incstack = 0
  6086                           ; Regs used in _del_dev: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6087                           ;del_dev@dev_addr stored from wreg
  6088  16C4  0020               	movlb	0	; select bank0
  6089  16C5  00B0               	movwf	del_dev@dev_addr
  6090                           
  6091                           ;main.c: 140: uint8_t x, y;
  6092                           ;main.c: 141: uint8_t new_map, old_map;
  6093                           ;main.c: 142: if (dev_addr >= 1 && dev_addr <= 0x20) {
  6094  16C6  0830               	movf	del_dev@dev_addr,w
  6095  16C7  1903               	btfsc	3,2
  6096  16C8  0008               	return
  6097  16C9  3021               	movlw	33
  6098  16CA  0230               	subwf	del_dev@dev_addr,w
  6099  16CB  1803               	skipnc
  6100  16CC  0008               	return
  6101                           
  6102                           ;main.c: 143: y = dev_addr / 8;
  6103  16CD  3008               	movlw	8
  6104  16CE  00A0               	movwf	___awdiv@divisor
  6105  16CF  3000               	movlw	0
  6106  16D0  00A1               	movwf	___awdiv@divisor+1
  6107  16D1  0830               	movf	del_dev@dev_addr,w
  6108  16D2  00A9               	movwf	??_del_dev
  6109  16D3  01AA               	clrf	??_del_dev+1
  6110  16D4  0829               	movf	??_del_dev,w
  6111  16D5  00A2               	movwf	___awdiv@dividend
  6112  16D6  082A               	movf	??_del_dev+1,w
  6113  16D7  00A3               	movwf	___awdiv@dividend+1
  6114  16D8  3188  203A  3196   	fcall	___awdiv
  6115  16DB  0020               	movlb	0	; select bank0
  6116  16DC  0820               	movf	?___awdiv,w
  6117  16DD  00AB               	movwf	??_del_dev+2
  6118  16DE  082B               	movf	??_del_dev+2,w
  6119  16DF  00AF               	movwf	del_dev@y
  6120                           
  6121                           ;main.c: 144: x = dev_addr % 8;
  6122  16E0  0830               	movf	del_dev@dev_addr,w
  6123  16E1  3907               	andlw	7
  6124  16E2  00A9               	movwf	??_del_dev
  6125  16E3  0829               	movf	??_del_dev,w
  6126  16E4  00AC               	movwf	del_dev@x
  6127                           
  6128                           ;main.c: 145: old_map = dev_map[y];
  6129  16E5  082F               	movf	del_dev@y,w
  6130  16E6  3E20               	addlw	(low (_dev_map| (0+256)))& (0+255)
  6131  16E7  0086               	movwf	6
  6132  16E8  3001               	movlw	1	; select bank2/3
  6133  16E9  0087               	movwf	7
  6134  16EA  0801               	movf	1,w
  6135  16EB  00A9               	movwf	??_del_dev
  6136  16EC  0829               	movf	??_del_dev,w
  6137  16ED  00AD               	movwf	del_dev@old_map
  6138                           
  6139                           ;main.c: 146: new_map = dev_map[y] & ~(0x01 << x);
  6140  16EE  082F               	movf	del_dev@y,w
  6141  16EF  3E20               	addlw	(low (_dev_map| (0+256)))& (0+255)
  6142  16F0  0086               	movwf	6
  6143  16F1  3001               	movlw	1	; select bank2/3
  6144  16F2  0087               	movwf	7
  6145  16F3  3001               	movlw	1
  6146  16F4  00A9               	movwf	??_del_dev
  6147  16F5  0A2C               	incf	del_dev@x,w
  6148  16F6  2EF8               	goto	u3544
  6149  16F7                     u3545:	
  6150  16F7  35A9               	lslf	??_del_dev,f
  6151  16F8                     u3544:	
  6152  16F8  0B89               	decfsz	9,f
  6153  16F9  2EF7               	goto	u3545
  6154  16FA  0829               	movf	??_del_dev,w
  6155  16FB  3AFF               	xorlw	255
  6156  16FC  0501               	andwf	1,w
  6157  16FD  00AA               	movwf	??_del_dev+1
  6158  16FE  082A               	movf	??_del_dev+1,w
  6159  16FF  00AE               	movwf	del_dev@new_map
  6160                           
  6161                           ;main.c: 147: if (old_map != new_map) {
  6162  1700  082D               	movf	del_dev@old_map,w
  6163  1701  062E               	xorwf	del_dev@new_map,w
  6164  1702  1903               	skipnz
  6165  1703  0008               	return
  6166                           
  6167                           ;main.c: 148: dev_map[y] = new_map;
  6168  1704  082E               	movf	del_dev@new_map,w
  6169  1705  00A9               	movwf	??_del_dev
  6170  1706  082F               	movf	del_dev@y,w
  6171  1707  3E20               	addlw	(low (_dev_map| (0+256)))& (0+255)
  6172  1708  0086               	movwf	6
  6173  1709  3001               	movlw	1	; select bank2/3
  6174  170A  0087               	movwf	7
  6175  170B  0829               	movf	??_del_dev,w
  6176  170C  0081               	movwf	1
  6177                           
  6178                           ;main.c: 149: devs--;
  6179  170D  3001               	movlw	1
  6180  170E  0021               	movlb	1	; select bank1
  6181  170F  02E3               	subwf	_devs^(0+128),f
  6182  1710  0008               	return
  6183  1711                     __end_of_del_dev:	
  6184                           
  6185                           	psect	text18
  6186  1711                     __ptext18:	
  6187 ;; *************** function _add_dev *****************
  6188 ;; Defined at:
  6189 ;;		line 124 in file "main.c"
  6190 ;; Parameters:    Size  Location     Type
  6191 ;;  dev_addr        1    wreg     unsigned char 
  6192 ;; Auto vars:     Size  Location     Type
  6193 ;;  dev_addr        1   16[BANK0 ] unsigned char 
  6194 ;;  y               1   15[BANK0 ] unsigned char 
  6195 ;;  new_map         1   14[BANK0 ] unsigned char 
  6196 ;;  old_map         1   13[BANK0 ] unsigned char 
  6197 ;;  x               1   12[BANK0 ] unsigned char 
  6198 ;; Return value:  Size  Location     Type
  6199 ;;                  1    wreg      void 
  6200 ;; Registers used:
  6201 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6202 ;; Tracked objects:
  6203 ;;		On entry : 0/0
  6204 ;;		On exit  : 0/0
  6205 ;;		Unchanged: 0/0
  6206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6207 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6208 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6209 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6210 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6211 ;;Total ram usage:        8 bytes
  6212 ;; Hardware stack levels used:    1
  6213 ;; Hardware stack levels required when called:    4
  6214 ;; This function calls:
  6215 ;;		___awdiv
  6216 ;; This function is called by:
  6217 ;;		_scan_dev
  6218 ;; This function uses a non-reentrant model
  6219 ;;
  6220                           
  6221                           
  6222                           ;psect for function _add_dev
  6223  1711                     _add_dev:	
  6224                           
  6225                           ;incstack = 0
  6226                           ; Regs used in _add_dev: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6227                           ;add_dev@dev_addr stored from wreg
  6228  1711  0020               	movlb	0	; select bank0
  6229  1712  00B0               	movwf	add_dev@dev_addr
  6230                           
  6231                           ;main.c: 125: uint8_t x, y;
  6232                           ;main.c: 126: uint8_t new_map, old_map;
  6233                           ;main.c: 127: if (dev_addr >= 1 && dev_addr <= 0x20) {
  6234  1713  0830               	movf	add_dev@dev_addr,w
  6235  1714  1903               	btfsc	3,2
  6236  1715  0008               	return
  6237  1716  3021               	movlw	33
  6238  1717  0230               	subwf	add_dev@dev_addr,w
  6239  1718  1803               	skipnc
  6240  1719  0008               	return
  6241                           
  6242                           ;main.c: 128: y = dev_addr / 8;
  6243  171A  3008               	movlw	8
  6244  171B  00A0               	movwf	___awdiv@divisor
  6245  171C  3000               	movlw	0
  6246  171D  00A1               	movwf	___awdiv@divisor+1
  6247  171E  0830               	movf	add_dev@dev_addr,w
  6248  171F  00A9               	movwf	??_add_dev
  6249  1720  01AA               	clrf	??_add_dev+1
  6250  1721  0829               	movf	??_add_dev,w
  6251  1722  00A2               	movwf	___awdiv@dividend
  6252  1723  082A               	movf	??_add_dev+1,w
  6253  1724  00A3               	movwf	___awdiv@dividend+1
  6254  1725  3188  203A  3197   	fcall	___awdiv
  6255  1728  0020               	movlb	0	; select bank0
  6256  1729  0820               	movf	?___awdiv,w
  6257  172A  00AB               	movwf	??_add_dev+2
  6258  172B  082B               	movf	??_add_dev+2,w
  6259  172C  00AF               	movwf	add_dev@y
  6260                           
  6261                           ;main.c: 129: x = dev_addr % 8;
  6262  172D  0830               	movf	add_dev@dev_addr,w
  6263  172E  3907               	andlw	7
  6264  172F  00A9               	movwf	??_add_dev
  6265  1730  0829               	movf	??_add_dev,w
  6266  1731  00AC               	movwf	add_dev@x
  6267                           
  6268                           ;main.c: 130: old_map = dev_map[y];
  6269  1732  082F               	movf	add_dev@y,w
  6270  1733  3E20               	addlw	(low (_dev_map| (0+256)))& (0+255)
  6271  1734  0086               	movwf	6
  6272  1735  3001               	movlw	1	; select bank2/3
  6273  1736  0087               	movwf	7
  6274  1737  0801               	movf	1,w
  6275  1738  00A9               	movwf	??_add_dev
  6276  1739  0829               	movf	??_add_dev,w
  6277  173A  00AD               	movwf	add_dev@old_map
  6278                           
  6279                           ;main.c: 131: new_map = dev_map[y] | (0x01 << x);
  6280  173B  082F               	movf	add_dev@y,w
  6281  173C  3E20               	addlw	(low (_dev_map| (0+256)))& (0+255)
  6282  173D  0086               	movwf	6
  6283  173E  3001               	movlw	1	; select bank2/3
  6284  173F  0087               	movwf	7
  6285  1740  3001               	movlw	1
  6286  1741  00A9               	movwf	??_add_dev
  6287  1742  0A2C               	incf	add_dev@x,w
  6288  1743  2F45               	goto	u3504
  6289  1744                     u3505:	
  6290  1744  35A9               	lslf	??_add_dev,f
  6291  1745                     u3504:	
  6292  1745  0B89               	decfsz	9,f
  6293  1746  2F44               	goto	u3505
  6294  1747  0829               	movf	??_add_dev,w
  6295  1748  0401               	iorwf	1,w
  6296  1749  00AA               	movwf	??_add_dev+1
  6297  174A  082A               	movf	??_add_dev+1,w
  6298  174B  00AE               	movwf	add_dev@new_map
  6299                           
  6300                           ;main.c: 132: if (old_map != new_map) {
  6301  174C  082D               	movf	add_dev@old_map,w
  6302  174D  062E               	xorwf	add_dev@new_map,w
  6303  174E  1903               	skipnz
  6304  174F  0008               	return
  6305                           
  6306                           ;main.c: 133: dev_map[y] = new_map;
  6307  1750  082E               	movf	add_dev@new_map,w
  6308  1751  00A9               	movwf	??_add_dev
  6309  1752  082F               	movf	add_dev@y,w
  6310  1753  3E20               	addlw	(low (_dev_map| (0+256)))& (0+255)
  6311  1754  0086               	movwf	6
  6312  1755  3001               	movlw	1	; select bank2/3
  6313  1756  0087               	movwf	7
  6314  1757  0829               	movf	??_add_dev,w
  6315  1758  0081               	movwf	1
  6316                           
  6317                           ;main.c: 134: devs++;
  6318  1759  3001               	movlw	1
  6319  175A  00A9               	movwf	??_add_dev
  6320  175B  0829               	movf	??_add_dev,w
  6321  175C  0021               	movlb	1	; select bank1
  6322  175D  07E3               	addwf	_devs^(0+128),f
  6323  175E  0008               	return
  6324  175F                     __end_of_add_dev:	
  6325                           
  6326                           	psect	text19
  6327  074E                     __ptext19:	
  6328 ;; *************** function _inv_handler *****************
  6329 ;; Defined at:
  6330 ;;		line 335 in file "main.c"
  6331 ;; Parameters:    Size  Location     Type
  6332 ;;		None
  6333 ;; Auto vars:     Size  Location     Type
  6334 ;;  status          1    0        unsigned char 
  6335 ;;  dev_addr        1    0        unsigned char 
  6336 ;; Return value:  Size  Location     Type
  6337 ;;                  1    wreg      void 
  6338 ;; Registers used:
  6339 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6340 ;; Tracked objects:
  6341 ;;		On entry : 0/0
  6342 ;;		On exit  : 0/0
  6343 ;;		Unchanged: 0/0
  6344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6348 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6349 ;;Total ram usage:        0 bytes
  6350 ;; Hardware stack levels used:    1
  6351 ;; Hardware stack levels required when called:    9
  6352 ;; This function calls:
  6353 ;;		___lwmod
  6354 ;;		_fetch
  6355 ;; This function is called by:
  6356 ;;		_main
  6357 ;;		_PROTOCOL_Loop
  6358 ;; This function uses a non-reentrant model
  6359 ;;
  6360                           
  6361                           
  6362                           ;psect for function _inv_handler
  6363  074E                     _inv_handler:	
  6364                           
  6365                           ;main.c: 336: uint8_t dev_addr, status;
  6366                           ;main.c: 337: static uint16_t t = 0;
  6367                           ;main.c: 340: fetch(schedule[0]);
  6368                           
  6369                           ;incstack = 0
  6370                           ; Regs used in _inv_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6371  074E  30A0               	movlw	(low (_schedule| (0+256)))& (0+255)
  6372  074F  3197  275F  3187   	fcall	_fetch
  6373                           
  6374                           ;main.c: 342: if (t % 2 == 0) fetch(schedule[1]);
  6375  0752  1870               	btfsc	inv_handler@t,0
  6376  0753  2F58               	goto	l5429
  6377  0754  30A4               	movlw	(low ((_schedule| (0+256)+4)))& (0+255)
  6378  0755  3197  275F  3187   	fcall	_fetch
  6379  0758                     l5429:	
  6380                           
  6381                           ;main.c: 344: if (t % 6 == 0) fetch(schedule[2]);
  6382  0758  3006               	movlw	6
  6383  0759  0020               	movlb	0	; select bank0
  6384  075A  00A8               	movwf	___lwmod@divisor
  6385  075B  3000               	movlw	0
  6386  075C  00A9               	movwf	___lwmod@divisor+1
  6387  075D  0871               	movf	inv_handler@t+1,w
  6388  075E  00AB               	movwf	___lwmod@dividend+1
  6389  075F  0870               	movf	inv_handler@t,w
  6390  0760  00AA               	movwf	___lwmod@dividend
  6391  0761  3194  2494  3187   	fcall	___lwmod
  6392  0764  0020               	movlb	0	; select bank0
  6393  0765  0828               	movf	?___lwmod,w
  6394  0766  0429               	iorwf	?___lwmod+1,w
  6395  0767  1D03               	btfss	3,2
  6396  0768  2F6D               	goto	l5433
  6397  0769  30A8               	movlw	(low ((_schedule| (0+256)+8)))& (0+255)
  6398  076A  3197  275F  3187   	fcall	_fetch
  6399  076D                     l5433:	
  6400                           
  6401                           ;main.c: 346: if (t % 12 == 0) fetch(schedule[3]);
  6402  076D  300C               	movlw	12
  6403  076E  0020               	movlb	0	; select bank0
  6404  076F  00A8               	movwf	___lwmod@divisor
  6405  0770  3000               	movlw	0
  6406  0771  00A9               	movwf	___lwmod@divisor+1
  6407  0772  0871               	movf	inv_handler@t+1,w
  6408  0773  00AB               	movwf	___lwmod@dividend+1
  6409  0774  0870               	movf	inv_handler@t,w
  6410  0775  00AA               	movwf	___lwmod@dividend
  6411  0776  3194  2494  3187   	fcall	___lwmod
  6412  0779  0020               	movlb	0	; select bank0
  6413  077A  0828               	movf	?___lwmod,w
  6414  077B  0429               	iorwf	?___lwmod+1,w
  6415  077C  1D03               	btfss	3,2
  6416  077D  2F82               	goto	l5437
  6417  077E  30AC               	movlw	(low ((_schedule| (0+256)+12)))& (0+255)
  6418  077F  3197  275F  3187   	fcall	_fetch
  6419  0782                     l5437:	
  6420                           
  6421                           ;main.c: 348: if (t % 60 == 0) fetch(schedule[4]);
  6422  0782  303C               	movlw	60
  6423  0783  0020               	movlb	0	; select bank0
  6424  0784  00A8               	movwf	___lwmod@divisor
  6425  0785  3000               	movlw	0
  6426  0786  00A9               	movwf	___lwmod@divisor+1
  6427  0787  0871               	movf	inv_handler@t+1,w
  6428  0788  00AB               	movwf	___lwmod@dividend+1
  6429  0789  0870               	movf	inv_handler@t,w
  6430  078A  00AA               	movwf	___lwmod@dividend
  6431  078B  3194  2494  3187   	fcall	___lwmod
  6432  078E  0020               	movlb	0	; select bank0
  6433  078F  0828               	movf	?___lwmod,w
  6434  0790  0429               	iorwf	?___lwmod+1,w
  6435  0791  1D03               	btfss	3,2
  6436  0792  2F97               	goto	l5441
  6437  0793  30B0               	movlw	(low ((_schedule| (0+256)+16)))& (0+255)
  6438  0794  3197  275F  3187   	fcall	_fetch
  6439  0797                     l5441:	
  6440                           
  6441                           ;main.c: 350: if (t % 120 == 0) fetch(schedule[5]);
  6442  0797  3078               	movlw	120
  6443  0798  0020               	movlb	0	; select bank0
  6444  0799  00A8               	movwf	___lwmod@divisor
  6445  079A  3000               	movlw	0
  6446  079B  00A9               	movwf	___lwmod@divisor+1
  6447  079C  0871               	movf	inv_handler@t+1,w
  6448  079D  00AB               	movwf	___lwmod@dividend+1
  6449  079E  0870               	movf	inv_handler@t,w
  6450  079F  00AA               	movwf	___lwmod@dividend
  6451  07A0  3194  2494  3187   	fcall	___lwmod
  6452  07A3  0020               	movlb	0	; select bank0
  6453  07A4  0828               	movf	?___lwmod,w
  6454  07A5  0429               	iorwf	?___lwmod+1,w
  6455  07A6  1D03               	btfss	3,2
  6456  07A7  2FAC               	goto	l5445
  6457  07A8  30B4               	movlw	(low ((_schedule| (0+256)+20)))& (0+255)
  6458  07A9  3197  275F  3187   	fcall	_fetch
  6459  07AC                     l5445:	
  6460                           
  6461                           ;main.c: 352: if (t % 600 == 0) {
  6462  07AC  3058               	movlw	88
  6463  07AD  0020               	movlb	0	; select bank0
  6464  07AE  00A8               	movwf	___lwmod@divisor
  6465  07AF  3002               	movlw	2
  6466  07B0  00A9               	movwf	___lwmod@divisor+1
  6467  07B1  0871               	movf	inv_handler@t+1,w
  6468  07B2  00AB               	movwf	___lwmod@dividend+1
  6469  07B3  0870               	movf	inv_handler@t,w
  6470  07B4  00AA               	movwf	___lwmod@dividend
  6471  07B5  3194  2494  3187   	fcall	___lwmod
  6472  07B8  0020               	movlb	0	; select bank0
  6473  07B9  0828               	movf	?___lwmod,w
  6474  07BA  0429               	iorwf	?___lwmod+1,w
  6475  07BB  1D03               	btfss	3,2
  6476  07BC  2FC4               	goto	l5451
  6477                           
  6478                           ;main.c: 353: fetch(schedule[6]);
  6479  07BD  30B8               	movlw	(low ((_schedule| (0+256)+24)))& (0+255)
  6480  07BE  3197  275F         	fcall	_fetch
  6481                           
  6482                           ;main.c: 354: t = 1;
  6483  07C0  3001               	movlw	1
  6484  07C1  00F0               	movwf	inv_handler@t
  6485  07C2  3000               	movlw	0
  6486  07C3  00F1               	movwf	inv_handler@t+1
  6487  07C4                     l5451:	
  6488                           
  6489                           ;main.c: 355: }
  6490                           ;main.c: 357: t++;
  6491  07C4  3001               	movlw	1
  6492  07C5  07F0               	addwf	inv_handler@t,f
  6493  07C6  3000               	movlw	0
  6494  07C7  3DF1               	addwfc	inv_handler@t+1,f
  6495  07C8  0008               	return
  6496  07C9                     __end_of_inv_handler:	
  6497                           
  6498                           	psect	text20
  6499  175F                     __ptext20:	
  6500 ;; *************** function _fetch *****************
  6501 ;; Defined at:
  6502 ;;		line 288 in file "main.c"
  6503 ;; Parameters:    Size  Location     Type
  6504 ;;  sch             1    wreg     PTR unsigned char 
  6505 ;;		 -> schedule(28), 
  6506 ;; Auto vars:     Size  Location     Type
  6507 ;;  sch             1   58[BANK0 ] PTR unsigned char 
  6508 ;;		 -> schedule(28), 
  6509 ;;  dev_addr        1   60[BANK0 ] unsigned char 
  6510 ;;  pos             1   59[BANK0 ] unsigned char 
  6511 ;;  status          1   57[BANK0 ] unsigned char 
  6512 ;; Return value:  Size  Location     Type
  6513 ;;                  1    wreg      void 
  6514 ;; Registers used:
  6515 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6516 ;; Tracked objects:
  6517 ;;		On entry : 0/0
  6518 ;;		On exit  : 0/0
  6519 ;;		Unchanged: 0/0
  6520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6522 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6523 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6524 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6525 ;;Total ram usage:        7 bytes
  6526 ;; Hardware stack levels used:    1
  6527 ;; Hardware stack levels required when called:    8
  6528 ;; This function calls:
  6529 ;;		_detected
  6530 ;;		_i2c1_write_no_data
  6531 ;;		_printf
  6532 ;;		_sen
  6533 ;; This function is called by:
  6534 ;;		_inv_handler
  6535 ;; This function uses a non-reentrant model
  6536 ;;
  6537                           
  6538                           
  6539                           ;psect for function _fetch
  6540  175F                     _fetch:	
  6541                           
  6542                           ;incstack = 0
  6543                           ; Regs used in _fetch: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6544                           ;fetch@sch stored from wreg
  6545  175F  0020               	movlb	0	; select bank0
  6546  1760  00DA               	movwf	fetch@sch
  6547                           
  6548                           ;main.c: 289: uint8_t pos;
  6549                           ;main.c: 290: uint8_t dev_addr;
  6550                           ;main.c: 291: uint8_t status;
  6551                           ;main.c: 292: for (pos=0; pos<4; pos++) {
  6552  1761  01DB               	clrf	fetch@pos
  6553  1762                     L8:	
  6554  1762  3004               	movlw	4
  6555  1763  025B               	subwf	fetch@pos,w
  6556  1764  1803               	btfsc	3,0
  6557  1765  0008               	return
  6558                           
  6559                           ;main.c: 293: dev_addr = sch[pos];
  6560  1766  085B               	movf	fetch@pos,w
  6561  1767  075A               	addwf	fetch@sch,w
  6562  1768  00D6               	movwf	??_fetch
  6563  1769  0856               	movf	??_fetch,w
  6564  176A  0086               	movwf	6
  6565  176B  3001               	movlw	1	; select bank2/3
  6566  176C  0087               	movwf	7
  6567  176D  0801               	movf	1,w
  6568  176E  00D7               	movwf	??_fetch+1
  6569  176F  0857               	movf	??_fetch+1,w
  6570  1770  00DC               	movwf	fetch@dev_addr
  6571                           
  6572                           ;main.c: 294: if (dev_addr == 0 || dev_addr > 0x20) {
  6573  1771  085C               	movf	fetch@dev_addr,w
  6574  1772  1903               	btfsc	3,2
  6575  1773  0008               	return
  6576  1774  3021               	movlw	33
  6577  1775  025C               	subwf	fetch@dev_addr,w
  6578  1776  1803               	btfsc	3,0
  6579  1777  0008               	return
  6580                           
  6581                           ;main.c: 296: } else if (detected(dev_addr)) {
  6582                           
  6583                           ;main.c: 295: break;
  6584  1778  085C               	movf	fetch@dev_addr,w
  6585  1779  3194  24EE  3197   	fcall	_detected
  6586  177C  3A00               	xorlw	0
  6587  177D  1903               	skipnz
  6588  177E  2FA8               	goto	l5239
  6589                           
  6590                           ;main.c: 297: status = sen(dev_addr);
  6591  177F  0020               	movlb	0	; select bank0
  6592  1780  085C               	movf	fetch@dev_addr,w
  6593  1781  318A  227D  3197   	fcall	_sen
  6594  1784  0020               	movlb	0	; select bank0
  6595  1785  00D6               	movwf	??_fetch
  6596  1786  0856               	movf	??_fetch,w
  6597  1787  00D9               	movwf	fetch@status
  6598                           
  6599                           ;main.c: 298: if (status > 0) {
  6600  1788  0859               	movf	fetch@status,w
  6601  1789  1903               	btfsc	3,2
  6602  178A  2FA8               	goto	l5239
  6603                           
  6604                           ;main.c: 299: printf("!:%%%d:NETWORK ERROR\n", dev_addr);
  6605  178B  3088               	movlw	low (STR_18| (0+32768))
  6606  178C  00AE               	movwf	printf@f
  6607  178D  3090               	movlw	high (STR_18| (0+32768))
  6608  178E  00AF               	movwf	printf@f+1
  6609  178F  085C               	movf	fetch@dev_addr,w
  6610  1790  00D6               	movwf	??_fetch
  6611  1791  01D7               	clrf	??_fetch+1
  6612  1792  0856               	movf	??_fetch,w
  6613  1793  00B0               	movwf	?_printf+2
  6614  1794  0857               	movf	??_fetch+1,w
  6615  1795  00B1               	movwf	?_printf+3
  6616  1796  318E  262B  3197   	fcall	_printf
  6617                           
  6618                           ;main.c: 300: i2c1_write_no_data(dev_addr, 0x0c);
  6619  1799  0020               	movlb	0	; select bank0
  6620  179A  085C               	movf	fetch@dev_addr,w
  6621  179B  00D6               	movwf	??_fetch
  6622  179C  01D7               	clrf	??_fetch+1
  6623  179D  0856               	movf	??_fetch,w
  6624  179E  00AE               	movwf	i2c1_write_no_data@dev_addr
  6625  179F  0857               	movf	??_fetch+1,w
  6626  17A0  00AF               	movwf	i2c1_write_no_data@dev_addr+1
  6627  17A1  300C               	movlw	12
  6628  17A2  00D8               	movwf	??_fetch+2
  6629  17A3  0858               	movf	??_fetch+2,w
  6630  17A4  00B0               	movwf	i2c1_write_no_data@reg_addr
  6631  17A5  3194  243D  3197   	fcall	_i2c1_write_no_data
  6632  17A8                     l5239:	
  6633  17A8  3001               	movlw	1
  6634  17A9  0020               	movlb	0	; select bank0
  6635  17AA  00D6               	movwf	??_fetch
  6636  17AB  0856               	movf	??_fetch,w
  6637  17AC  07DB               	addwf	fetch@pos,f
  6638  17AD  2F62               	goto	L8
  6639  17AE                     __end_of_fetch:	
  6640                           
  6641                           	psect	text21
  6642  1F94                     __ptext21:	
  6643 ;; *************** function _TMR0_HasOverflowOccured *****************
  6644 ;; Defined at:
  6645 ;;		line 101 in file "mcc_generated_files/tmr0.c"
  6646 ;; Parameters:    Size  Location     Type
  6647 ;;		None
  6648 ;; Auto vars:     Size  Location     Type
  6649 ;;		None
  6650 ;; Return value:  Size  Location     Type
  6651 ;;                  1    wreg      unsigned char 
  6652 ;; Registers used:
  6653 ;;		wreg, status,2, status,0
  6654 ;; Tracked objects:
  6655 ;;		On entry : 0/0
  6656 ;;		On exit  : 0/0
  6657 ;;		Unchanged: 0/0
  6658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6660 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6662 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6663 ;;Total ram usage:        0 bytes
  6664 ;; Hardware stack levels used:    1
  6665 ;; Hardware stack levels required when called:    3
  6666 ;; This function calls:
  6667 ;;		Nothing
  6668 ;; This function is called by:
  6669 ;;		_PROTOCOL_Loop
  6670 ;; This function uses a non-reentrant model
  6671 ;;
  6672                           
  6673                           
  6674                           ;psect for function _TMR0_HasOverflowOccured
  6675  1F94                     _TMR0_HasOverflowOccured:	
  6676                           
  6677                           ;tmr0.c: 104: return(INTCONbits.TMR0IF);
  6678                           
  6679                           ;incstack = 0
  6680                           ; Regs used in _TMR0_HasOverflowOccured: [wreg+status,2+status,0]
  6681  1F94  0C0B               	rrf	11,w	;volatile
  6682  1F95  0C89               	rrf	9,f
  6683  1F96  3901               	andlw	1
  6684  1F97  0008               	return
  6685  1F98                     __end_of_TMR0_HasOverflowOccured:	
  6686                           
  6687                           	psect	text22
  6688  11ED                     __ptext22:	
  6689 ;; *************** function _PROTOCOL_Write_Device_Address *****************
  6690 ;; Defined at:
  6691 ;;		line 89 in file "protocol.c"
  6692 ;; Parameters:    Size  Location     Type
  6693 ;;  device_id_i2    1    wreg     unsigned char 
  6694 ;; Auto vars:     Size  Location     Type
  6695 ;;  device_id_i2    1    4[BANK0 ] unsigned char 
  6696 ;; Return value:  Size  Location     Type
  6697 ;;                  1    wreg      void 
  6698 ;; Registers used:
  6699 ;;		wreg, status,2, status,0, pclath, cstack
  6700 ;; Tracked objects:
  6701 ;;		On entry : 0/0
  6702 ;;		On exit  : 0/0
  6703 ;;		Unchanged: 0/0
  6704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6706 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6707 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6708 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6709 ;;Total ram usage:        2 bytes
  6710 ;; Hardware stack levels used:    1
  6711 ;; Hardware stack levels required when called:    4
  6712 ;; This function calls:
  6713 ;;		_DATAEE_WriteByte
  6714 ;; This function is called by:
  6715 ;;		_PROTOCOL_Loop
  6716 ;; This function uses a non-reentrant model
  6717 ;;
  6718                           
  6719                           
  6720                           ;psect for function _PROTOCOL_Write_Device_Address
  6721  11ED                     _PROTOCOL_Write_Device_Address:	
  6722                           
  6723                           ;incstack = 0
  6724                           ; Regs used in _PROTOCOL_Write_Device_Address: [wreg+status,2+status,0+pclath+cstack]
  6725                           ;PROTOCOL_Write_Device_Address@device_id_i2c stored from wreg
  6726  11ED  0020               	movlb	0	; select bank0
  6727  11EE  00A4               	movwf	PROTOCOL_Write_Device_Address@device_id_i2c
  6728                           
  6729                           ;protocol.c: 90: DATAEE_WriteByte(0, device_id_i2c);
  6730  11EF  0824               	movf	PROTOCOL_Write_Device_Address@device_id_i2c,w
  6731  11F0  00A3               	movwf	??_PROTOCOL_Write_Device_Address
  6732  11F1  0823               	movf	??_PROTOCOL_Write_Device_Address,w
  6733  11F2  00A0               	movwf	DATAEE_WriteByte@bData
  6734  11F3  3000               	movlw	0
  6735  11F4  3193  2358         	fcall	_DATAEE_WriteByte
  6736                           
  6737                           ;protocol.c: 91: slave_address = device_id_i2c;
  6738  11F6  0020               	movlb	0	; select bank0
  6739  11F7  0824               	movf	PROTOCOL_Write_Device_Address@device_id_i2c,w
  6740  11F8  00A3               	movwf	??_PROTOCOL_Write_Device_Address
  6741  11F9  0823               	movf	??_PROTOCOL_Write_Device_Address,w
  6742  11FA  0022               	movlb	2	; select bank2
  6743  11FB  00C4               	movwf	_slave_address^(0+256)
  6744  11FC  0008               	return
  6745  11FD                     __end_of_PROTOCOL_Write_Device_Address:	
  6746                           
  6747                           	psect	text23
  6748  1F87                     __ptext23:	
  6749 ;; *************** function _PROTOCOL_STP *****************
  6750 ;; Defined at:
  6751 ;;		line 103 in file "protocol.c"
  6752 ;; Parameters:    Size  Location     Type
  6753 ;;		None
  6754 ;; Auto vars:     Size  Location     Type
  6755 ;;		None
  6756 ;; Return value:  Size  Location     Type
  6757 ;;                  1    wreg      void 
  6758 ;; Registers used:
  6759 ;;		wreg, status,2, status,0
  6760 ;; Tracked objects:
  6761 ;;		On entry : 0/0
  6762 ;;		On exit  : 0/0
  6763 ;;		Unchanged: 0/0
  6764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6766 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6768 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6769 ;;Total ram usage:        0 bytes
  6770 ;; Hardware stack levels used:    1
  6771 ;; Hardware stack levels required when called:    3
  6772 ;; This function calls:
  6773 ;;		Nothing
  6774 ;; This function is called by:
  6775 ;;		_PROTOCOL_Loop
  6776 ;; This function uses a non-reentrant model
  6777 ;;
  6778                           
  6779                           
  6780                           ;psect for function _PROTOCOL_STP
  6781  1F87                     _PROTOCOL_STP:	
  6782                           
  6783                           ;protocol.c: 105: running = 0;
  6784                           
  6785                           ;incstack = 0
  6786                           ; Regs used in _PROTOCOL_STP: [wreg+status,2+status,0]
  6787  1F87  0022               	movlb	2	; select bank2
  6788  1F88  01C2               	clrf	_running^(0+256)
  6789  1F89  0008               	return
  6790  1F8A                     __end_of_PROTOCOL_STP:	
  6791                           
  6792                           	psect	text24
  6793  1F90                     __ptext24:	
  6794 ;; *************** function _PROTOCOL_STA *****************
  6795 ;; Defined at:
  6796 ;;		line 98 in file "protocol.c"
  6797 ;; Parameters:    Size  Location     Type
  6798 ;;		None
  6799 ;; Auto vars:     Size  Location     Type
  6800 ;;		None
  6801 ;; Return value:  Size  Location     Type
  6802 ;;                  1    wreg      void 
  6803 ;; Registers used:
  6804 ;;		wreg, status,2, status,0
  6805 ;; Tracked objects:
  6806 ;;		On entry : 0/0
  6807 ;;		On exit  : 0/0
  6808 ;;		Unchanged: 0/0
  6809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6811 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6813 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6814 ;;Total ram usage:        0 bytes
  6815 ;; Hardware stack levels used:    1
  6816 ;; Hardware stack levels required when called:    3
  6817 ;; This function calls:
  6818 ;;		Nothing
  6819 ;; This function is called by:
  6820 ;;		_PROTOCOL_Loop
  6821 ;; This function uses a non-reentrant model
  6822 ;;
  6823                           
  6824                           
  6825                           ;psect for function _PROTOCOL_STA
  6826  1F90                     _PROTOCOL_STA:	
  6827                           
  6828                           ;protocol.c: 100: running = 1;
  6829                           
  6830                           ;incstack = 0
  6831                           ; Regs used in _PROTOCOL_STA: [wreg+status,2+status,0]
  6832  1F90  0022               	movlb	2	; select bank2
  6833  1F91  01C2               	clrf	_running^(0+256)
  6834  1F92  0AC2               	incf	_running^(0+256),f
  6835  1F93  0008               	return
  6836  1F94                     __end_of_PROTOCOL_STA:	
  6837                           
  6838                           	psect	text25
  6839  1FA9                     __ptext25:	
  6840 ;; *************** function _PROTOCOL_SET *****************
  6841 ;; Defined at:
  6842 ;;		line 116 in file "protocol.c"
  6843 ;; Parameters:    Size  Location     Type
  6844 ;;  value_          1    wreg     unsigned char 
  6845 ;; Auto vars:     Size  Location     Type
  6846 ;;  value_          1    1[BANK0 ] unsigned char 
  6847 ;; Return value:  Size  Location     Type
  6848 ;;                  1    wreg      void 
  6849 ;; Registers used:
  6850 ;;		wreg, status,2, status,0
  6851 ;; Tracked objects:
  6852 ;;		On entry : 0/0
  6853 ;;		On exit  : 0/0
  6854 ;;		Unchanged: 0/0
  6855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6856 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6857 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6858 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6859 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6860 ;;Total ram usage:        2 bytes
  6861 ;; Hardware stack levels used:    1
  6862 ;; Hardware stack levels required when called:    3
  6863 ;; This function calls:
  6864 ;;		Nothing
  6865 ;; This function is called by:
  6866 ;;		_PROTOCOL_Loop
  6867 ;; This function uses a non-reentrant model
  6868 ;;
  6869                           
  6870                           
  6871                           ;psect for function _PROTOCOL_SET
  6872  1FA9                     _PROTOCOL_SET:	
  6873                           
  6874                           ;incstack = 0
  6875                           ; Regs used in _PROTOCOL_SET: [wreg+status,2+status,0]
  6876                           ;PROTOCOL_SET@value_ stored from wreg
  6877  1FA9  0020               	movlb	0	; select bank0
  6878  1FAA  00A1               	movwf	PROTOCOL_SET@value_
  6879                           
  6880                           ;protocol.c: 117: value = value_;
  6881  1FAB  0821               	movf	PROTOCOL_SET@value_,w
  6882  1FAC  00A0               	movwf	??_PROTOCOL_SET
  6883  1FAD  0820               	movf	??_PROTOCOL_SET,w
  6884  1FAE  0021               	movlb	1	; select bank1
  6885  1FAF  00DE               	movwf	_value^(0+128)
  6886  1FB0  0008               	return
  6887  1FB1                     __end_of_PROTOCOL_SET:	
  6888                           
  6889                           	psect	text26
  6890  1FC3                     __ptext26:	
  6891 ;; *************** function _PROTOCOL_SAV *****************
  6892 ;; Defined at:
  6893 ;;		line 112 in file "protocol.c"
  6894 ;; Parameters:    Size  Location     Type
  6895 ;;		None
  6896 ;; Auto vars:     Size  Location     Type
  6897 ;;		None
  6898 ;; Return value:  Size  Location     Type
  6899 ;;                  1    wreg      void 
  6900 ;; Registers used:
  6901 ;;		wreg, status,2, status,0, pclath, cstack
  6902 ;; Tracked objects:
  6903 ;;		On entry : 0/0
  6904 ;;		On exit  : 0/0
  6905 ;;		Unchanged: 0/0
  6906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6908 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6909 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6910 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6911 ;;Total ram usage:        1 bytes
  6912 ;; Hardware stack levels used:    1
  6913 ;; Hardware stack levels required when called:    4
  6914 ;; This function calls:
  6915 ;;		_DATAEE_WriteByte
  6916 ;; This function is called by:
  6917 ;;		_PROTOCOL_Loop
  6918 ;; This function uses a non-reentrant model
  6919 ;;
  6920                           
  6921                           
  6922                           ;psect for function _PROTOCOL_SAV
  6923  1FC3                     _PROTOCOL_SAV:	
  6924                           
  6925                           ;protocol.c: 113: DATAEE_WriteByte(1, value);
  6926                           
  6927                           ;incstack = 0
  6928                           ; Regs used in _PROTOCOL_SAV: [wreg+status,2+status,0+pclath+cstack]
  6929  1FC3  0021               	movlb	1	; select bank1
  6930  1FC4  085E               	movf	_value^(0+128),w
  6931  1FC5  0020               	movlb	0	; select bank0
  6932  1FC6  00A3               	movwf	??_PROTOCOL_SAV
  6933  1FC7  0823               	movf	??_PROTOCOL_SAV,w
  6934  1FC8  00A0               	movwf	DATAEE_WriteByte@bData
  6935  1FC9  3001               	movlw	1
  6936  1FCA  3193  2358         	fcall	_DATAEE_WriteByte
  6937  1FCC  0008               	return
  6938  1FCD                     __end_of_PROTOCOL_SAV:	
  6939                           
  6940                           	psect	text27
  6941  1F84                     __ptext27:	
  6942 ;; *************** function _PROTOCOL_Read_Device_Address *****************
  6943 ;; Defined at:
  6944 ;;		line 94 in file "protocol.c"
  6945 ;; Parameters:    Size  Location     Type
  6946 ;;		None
  6947 ;; Auto vars:     Size  Location     Type
  6948 ;;		None
  6949 ;; Return value:  Size  Location     Type
  6950 ;;                  1    wreg      unsigned char 
  6951 ;; Registers used:
  6952 ;;		wreg
  6953 ;; Tracked objects:
  6954 ;;		On entry : 0/0
  6955 ;;		On exit  : 0/0
  6956 ;;		Unchanged: 0/0
  6957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6958 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6959 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6960 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6961 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6962 ;;Total ram usage:        0 bytes
  6963 ;; Hardware stack levels used:    1
  6964 ;; Hardware stack levels required when called:    3
  6965 ;; This function calls:
  6966 ;;		Nothing
  6967 ;; This function is called by:
  6968 ;;		_PROTOCOL_Loop
  6969 ;; This function uses a non-reentrant model
  6970 ;;
  6971                           
  6972                           
  6973                           ;psect for function _PROTOCOL_Read_Device_Address
  6974  1F84                     _PROTOCOL_Read_Device_Address:	
  6975                           
  6976                           ;protocol.c: 95: return slave_address;
  6977                           
  6978                           ;incstack = 0
  6979                           ; Regs used in _PROTOCOL_Read_Device_Address: [wreg]
  6980  1F84  0022               	movlb	2	; select bank2
  6981  1F85  0844               	movf	_slave_address^(0+256),w
  6982  1F86  0008               	return
  6983  1F87                     __end_of_PROTOCOL_Read_Device_Address:	
  6984                           
  6985                           	psect	text28
  6986  1232                     __ptext28:	
  6987 ;; *************** function _PROTOCOL_EXT *****************
  6988 ;; Defined at:
  6989 ;;		line 121 in file "protocol.c"
  6990 ;; Parameters:    Size  Location     Type
  6991 ;;  char_buf        1    wreg     PTR unsigned char 
  6992 ;;		 -> buf(48), 
  6993 ;; Auto vars:     Size  Location     Type
  6994 ;;  char_buf        1   70[BANK0 ] PTR unsigned char 
  6995 ;;		 -> buf(48), 
  6996 ;; Return value:  Size  Location     Type
  6997 ;;                  1    wreg      void 
  6998 ;; Registers used:
  6999 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7000 ;; Tracked objects:
  7001 ;;		On entry : 0/0
  7002 ;;		On exit  : 0/0
  7003 ;;		Unchanged: 0/0
  7004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7005 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7006 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7007 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7008 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7009 ;;Total ram usage:        2 bytes
  7010 ;; Hardware stack levels used:    1
  7011 ;; Hardware stack levels required when called:   10
  7012 ;; This function calls:
  7013 ;;		Absolute function
  7014 ;;		_command_handler
  7015 ;; This function is called by:
  7016 ;;		_PROTOCOL_Loop
  7017 ;; This function uses a non-reentrant model
  7018 ;;
  7019                           
  7020                           
  7021                           ;psect for function _PROTOCOL_EXT
  7022  1232                     _PROTOCOL_EXT:	
  7023                           
  7024                           ;incstack = 0
  7025                           ; Regs used in _PROTOCOL_EXT: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7026                           ;PROTOCOL_EXT@char_buf stored from wreg
  7027  1232  0020               	movlb	0	; select bank0
  7028  1233  00E6               	movwf	PROTOCOL_EXT@char_buf
  7029                           
  7030                           ;protocol.c: 122: if (PROTOCOL_Extension_Handler) PROTOCOL_Extension_Handler(char_buf);
  7031  1234  0022               	movlb	2	; select bank2
  7032  1235  082C               	movf	_PROTOCOL_Extension_Handler^(0+256),w
  7033  1236  042D               	iorwf	(_PROTOCOL_Extension_Handler+1)^(0+256),w
  7034  1237  1903               	btfsc	3,2
  7035  1238  0008               	return
  7036  1239  0020               	movlb	0	; select bank0
  7037  123A  0866               	movf	PROTOCOL_EXT@char_buf,w
  7038  123B  00E5               	movwf	??_PROTOCOL_EXT
  7039  123C  0865               	movf	??_PROTOCOL_EXT,w
  7040  123D  00DB               	movwf	command_handler@buf
  7041  123E  0022               	movlb	2	; select bank2
  7042  123F  082D               	movf	(_PROTOCOL_Extension_Handler+1)^(0+256),w
  7043  1240  008A               	movwf	10
  7044  1241  082C               	movf	_PROTOCOL_Extension_Handler^(0+256),w
  7045  1242  000A               	callw
  7046  1243  3192               	pagesel	$
  7047  1244  0008               	return
  7048  1245                     __end_of_PROTOCOL_EXT:	
  7049                           
  7050                           	psect	text29
  7051  032D                     __ptext29:	
  7052 ;; *************** function _command_handler *****************
  7053 ;; Defined at:
  7054 ;;		line 372 in file "main.c"
  7055 ;; Parameters:    Size  Location     Type
  7056 ;;  buf             1   59[BANK0 ] PTR unsigned char 
  7057 ;;		 -> buf(48), 
  7058 ;; Auto vars:     Size  Location     Type
  7059 ;;  i               1   68[BANK0 ] unsigned char 
  7060 ;;  dev_addr        1   67[BANK0 ] unsigned char 
  7061 ;; Return value:  Size  Location     Type
  7062 ;;                  1    wreg      void 
  7063 ;; Registers used:
  7064 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7065 ;; Tracked objects:
  7066 ;;		On entry : 0/0
  7067 ;;		On exit  : 0/0
  7068 ;;		Unchanged: 0/0
  7069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7070 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7071 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7072 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7073 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7074 ;;Total ram usage:       10 bytes
  7075 ;; Hardware stack levels used:    1
  7076 ;; Hardware stack levels required when called:    9
  7077 ;; This function calls:
  7078 ;;		_DATAEE_WriteByte
  7079 ;;		___awdiv
  7080 ;;		_atoi
  7081 ;;		_one_shot_sen
  7082 ;;		_print_dev_map
  7083 ;;		_printf
  7084 ;;		_put_cmd
  7085 ;;		_strncmp
  7086 ;; This function is called by:
  7087 ;;		_main
  7088 ;;		_PROTOCOL_EXT
  7089 ;; This function uses a non-reentrant model
  7090 ;;
  7091                           
  7092                           
  7093                           ;psect for function _command_handler
  7094  032D                     _command_handler:	
  7095                           
  7096                           ;main.c: 373: static uint8_t pos = 0;
  7097                           ;main.c: 374: uint8_t i;
  7098                           ;main.c: 375: uint8_t dev_addr;
  7099                           ;main.c: 376: if (!strncmp(("I2C"), (buf), 3)) {
  7100                           
  7101                           ;incstack = 0
  7102                           ; Regs used in _command_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7103  032D  3085               	movlw	low (STR_20| (0+32768))
  7104  032E  0020               	movlb	0	; select bank0
  7105  032F  00A0               	movwf	strncmp@s1
  7106  0330  3091               	movlw	high (STR_20| (0+32768))
  7107  0331  00A1               	movwf	strncmp@s1+1
  7108  0332  085B               	movf	command_handler@buf,w
  7109  0333  00A2               	movwf	strncmp@s2
  7110  0334  3002               	movlw	2
  7111  0335  00A3               	movwf	strncmp@s2+1
  7112  0336  3003               	movlw	3
  7113  0337  00A4               	movwf	strncmp@len
  7114  0338  3000               	movlw	0
  7115  0339  00A5               	movwf	strncmp@len+1
  7116  033A  3195  255E  3183   	fcall	_strncmp
  7117  033D  0020               	movlb	0	; select bank0
  7118  033E  0820               	movf	?_strncmp,w
  7119  033F  0421               	iorwf	?_strncmp+1,w
  7120  0340  1D03               	btfss	3,2
  7121  0341  2B50               	goto	l5247
  7122                           
  7123                           ;main.c: 377: BACKPLANE_SLAVE_ADDRESS = atoi(&buf[4]);
  7124  0342  085B               	movf	command_handler@buf,w
  7125  0343  3E04               	addlw	4
  7126  0344  00A6               	movwf	atoi@s
  7127  0345  3002               	movlw	2
  7128  0346  00A7               	movwf	atoi@s+1
  7129  0347  3189  2192         	fcall	_atoi
  7130  0349  0020               	movlb	0	; select bank0
  7131  034A  0826               	movf	?_atoi,w
  7132  034B  00DC               	movwf	??_command_handler
  7133  034C  085C               	movf	??_command_handler,w
  7134  034D  0021               	movlb	1	; select bank1
  7135  034E  00EE               	movwf	_BACKPLANE_SLAVE_ADDRESS^(0+128)
  7136                           
  7137                           ;main.c: 378: } else if (!strncmp(("MAP"), (buf), 3)) {
  7138  034F  0008               	return
  7139  0350                     l5247:	
  7140  0350  30A1               	movlw	low (STR_21| (0+32768))
  7141  0351  0020               	movlb	0	; select bank0
  7142  0352  00A0               	movwf	strncmp@s1
  7143  0353  3091               	movlw	high (STR_21| (0+32768))
  7144  0354  00A1               	movwf	strncmp@s1+1
  7145  0355  085B               	movf	command_handler@buf,w
  7146  0356  00A2               	movwf	strncmp@s2
  7147  0357  3002               	movlw	2
  7148  0358  00A3               	movwf	strncmp@s2+1
  7149  0359  3003               	movlw	3
  7150  035A  00A4               	movwf	strncmp@len
  7151  035B  3000               	movlw	0
  7152  035C  00A5               	movwf	strncmp@len+1
  7153  035D  3195  255E  3183   	fcall	_strncmp
  7154  0360  0020               	movlb	0	; select bank0
  7155  0361  0820               	movf	?_strncmp,w
  7156  0362  0421               	iorwf	?_strncmp+1,w
  7157  0363  1D03               	btfss	3,2
  7158  0364  2B68               	goto	l5251
  7159                           
  7160                           ;main.c: 379: print_dev_map();
  7161  0365  3195  25E6         	fcall	_print_dev_map
  7162                           
  7163                           ;main.c: 380: } else if (!strncmp(("POS"), (buf), 3)) {
  7164  0367  0008               	return
  7165  0368                     l5251:	
  7166  0368  30A9               	movlw	low (STR_22| (0+32768))
  7167  0369  0020               	movlb	0	; select bank0
  7168  036A  00A0               	movwf	strncmp@s1
  7169  036B  3091               	movlw	high (STR_22| (0+32768))
  7170  036C  00A1               	movwf	strncmp@s1+1
  7171  036D  085B               	movf	command_handler@buf,w
  7172  036E  00A2               	movwf	strncmp@s2
  7173  036F  3002               	movlw	2
  7174  0370  00A3               	movwf	strncmp@s2+1
  7175  0371  3003               	movlw	3
  7176  0372  00A4               	movwf	strncmp@len
  7177  0373  3000               	movlw	0
  7178  0374  00A5               	movwf	strncmp@len+1
  7179  0375  3195  255E  3183   	fcall	_strncmp
  7180  0378  0020               	movlb	0	; select bank0
  7181  0379  0820               	movf	?_strncmp,w
  7182  037A  0421               	iorwf	?_strncmp+1,w
  7183  037B  1D03               	btfss	3,2
  7184  037C  2B95               	goto	l5259
  7185                           
  7186                           ;main.c: 381: pos = atoi(&buf[4]);
  7187  037D  085B               	movf	command_handler@buf,w
  7188  037E  3E04               	addlw	4
  7189  037F  00A6               	movwf	atoi@s
  7190  0380  3002               	movlw	2
  7191  0381  00A7               	movwf	atoi@s+1
  7192  0382  3189  2192  3183   	fcall	_atoi
  7193  0385  0020               	movlb	0	; select bank0
  7194  0386  0826               	movf	?_atoi,w
  7195  0387  00DC               	movwf	??_command_handler
  7196  0388  085C               	movf	??_command_handler,w
  7197  0389  00F2               	movwf	command_handler@pos
  7198                           
  7199                           ;main.c: 382: if (pos > 27) printf("!:POS:POS LARGER THAN 27\n");
  7200  038A  301C               	movlw	28
  7201  038B  0272               	subwf	command_handler@pos,w
  7202  038C  1C03               	skipc
  7203  038D  0008               	return
  7204  038E  3025               	movlw	low (STR_23| (0+32768))
  7205  038F  00AE               	movwf	printf@f
  7206  0390  3090               	movlw	high (STR_23| (0+32768))
  7207  0391  00AF               	movwf	printf@f+1
  7208  0392  318E  262B         	fcall	_printf
  7209                           
  7210                           ;main.c: 383: } else if (!strncmp(("WSC"), (buf), 3)) {
  7211  0394  0008               	return
  7212  0395                     l5259:	
  7213  0395  3095               	movlw	low (STR_24| (0+32768))
  7214  0396  0020               	movlb	0	; select bank0
  7215  0397  00A0               	movwf	strncmp@s1
  7216  0398  3091               	movlw	high (STR_24| (0+32768))
  7217  0399  00A1               	movwf	strncmp@s1+1
  7218  039A  085B               	movf	command_handler@buf,w
  7219  039B  00A2               	movwf	strncmp@s2
  7220  039C  3002               	movlw	2
  7221  039D  00A3               	movwf	strncmp@s2+1
  7222  039E  3003               	movlw	3
  7223  039F  00A4               	movwf	strncmp@len
  7224  03A0  3000               	movlw	0
  7225  03A1  00A5               	movwf	strncmp@len+1
  7226  03A2  3195  255E  3183   	fcall	_strncmp
  7227  03A5  0020               	movlb	0	; select bank0
  7228  03A6  0820               	movf	?_strncmp,w
  7229  03A7  0421               	iorwf	?_strncmp+1,w
  7230  03A8  1D03               	btfss	3,2
  7231  03A9  2BE7               	goto	l5267
  7232                           
  7233                           ;main.c: 384: if (pos <= 27) {
  7234  03AA  301C               	movlw	28
  7235  03AB  0272               	subwf	command_handler@pos,w
  7236  03AC  1803               	skipnc
  7237  03AD  2BE0               	goto	l5265
  7238                           
  7239                           ;main.c: 385: dev_addr = atoi(&buf[4]);
  7240  03AE  085B               	movf	command_handler@buf,w
  7241  03AF  3E04               	addlw	4
  7242  03B0  00A6               	movwf	atoi@s
  7243  03B1  3002               	movlw	2
  7244  03B2  00A7               	movwf	atoi@s+1
  7245  03B3  3189  2192  3183   	fcall	_atoi
  7246  03B6  0020               	movlb	0	; select bank0
  7247  03B7  0826               	movf	?_atoi,w
  7248  03B8  00DC               	movwf	??_command_handler
  7249  03B9  085C               	movf	??_command_handler,w
  7250  03BA  00E3               	movwf	command_handler@dev_addr
  7251                           
  7252                           ;main.c: 386: schedule[pos/4][pos%4] = dev_addr;
  7253  03BB  0863               	movf	command_handler@dev_addr,w
  7254  03BC  00DC               	movwf	??_command_handler
  7255  03BD  3004               	movlw	4
  7256  03BE  00A0               	movwf	___awdiv@divisor
  7257  03BF  3000               	movlw	0
  7258  03C0  00A1               	movwf	___awdiv@divisor+1
  7259  03C1  0872               	movf	command_handler@pos,w
  7260  03C2  00DD               	movwf	??_command_handler+1
  7261  03C3  01DE               	clrf	??_command_handler+2
  7262  03C4  085D               	movf	??_command_handler+1,w
  7263  03C5  00A2               	movwf	___awdiv@dividend
  7264  03C6  085E               	movf	??_command_handler+2,w
  7265  03C7  00A3               	movwf	___awdiv@dividend+1
  7266  03C8  3188  203A  3183   	fcall	___awdiv
  7267  03CB  0020               	movlb	0	; select bank0
  7268  03CC  0820               	movf	?___awdiv,w
  7269  03CD  00DF               	movwf	??_command_handler+3
  7270  03CE  3002               	movlw	2
  7271  03CF                     u5905:	
  7272  03CF  35DF               	lslf	??_command_handler+3,f
  7273  03D0  0B89               	decfsz	9,f
  7274  03D1  2BCF               	goto	u5905
  7275  03D2  30A0               	movlw	(low (_schedule| (0+256)))& (0+255)
  7276  03D3  075F               	addwf	??_command_handler+3,w
  7277  03D4  00E0               	movwf	??_command_handler+4
  7278  03D5  0872               	movf	command_handler@pos,w
  7279  03D6  3903               	andlw	3
  7280  03D7  0760               	addwf	??_command_handler+4,w
  7281  03D8  00E1               	movwf	??_command_handler+5
  7282  03D9  0861               	movf	??_command_handler+5,w
  7283  03DA  0086               	movwf	6
  7284  03DB  3001               	movlw	1	; select bank3/4
  7285  03DC  0087               	movwf	7
  7286  03DD  085C               	movf	??_command_handler,w
  7287  03DE  0081               	movwf	1
  7288                           
  7289                           ;main.c: 387: } else {
  7290  03DF  0008               	return
  7291  03E0                     l5265:	
  7292                           
  7293                           ;main.c: 388: printf("!:WSC:POS LARGER THAN 27\n");
  7294  03E0  300B               	movlw	low (STR_25| (0+32768))
  7295  03E1  00AE               	movwf	printf@f
  7296  03E2  3090               	movlw	high (STR_25| (0+32768))
  7297  03E3  00AF               	movwf	printf@f+1
  7298  03E4  318E  262B         	fcall	_printf
  7299                           
  7300                           ;main.c: 389: }
  7301                           ;main.c: 390: } else if (!strncmp(("SSC"), (buf), 3)) {
  7302  03E6  0008               	return
  7303  03E7                     l5267:	
  7304  03E7  3091               	movlw	low (STR_26| (0+32768))
  7305  03E8  0020               	movlb	0	; select bank0
  7306  03E9  00A0               	movwf	strncmp@s1
  7307  03EA  3091               	movlw	high (STR_26| (0+32768))
  7308  03EB  00A1               	movwf	strncmp@s1+1
  7309  03EC  085B               	movf	command_handler@buf,w
  7310  03ED  00A2               	movwf	strncmp@s2
  7311  03EE  3002               	movlw	2
  7312  03EF  00A3               	movwf	strncmp@s2+1
  7313  03F0  3003               	movlw	3
  7314  03F1  00A4               	movwf	strncmp@len
  7315  03F2  3000               	movlw	0
  7316  03F3  00A5               	movwf	strncmp@len+1
  7317  03F4  3195  255E  3183   	fcall	_strncmp
  7318  03F7  0020               	movlb	0	; select bank0
  7319  03F8  0820               	movf	?_strncmp,w
  7320  03F9  0421               	iorwf	?_strncmp+1,w
  7321  03FA  1D03               	btfss	3,2
  7322  03FB  2C34               	goto	l5283
  7323                           
  7324                           ;main.c: 391: for(i=0; i<28; i++) {
  7325  03FC  01E4               	clrf	command_handler@i
  7326  03FD                     L9:	
  7327  03FD  301C               	movlw	28
  7328  03FE  0264               	subwf	command_handler@i,w
  7329  03FF  1803               	btfsc	3,0
  7330  0400  0008               	return
  7331                           
  7332                           ;main.c: 392: dev_addr = schedule[i/4][i%4];
  7333  0401  3004               	movlw	4
  7334  0402  00A0               	movwf	___awdiv@divisor
  7335  0403  3000               	movlw	0
  7336  0404  00A1               	movwf	___awdiv@divisor+1
  7337  0405  0864               	movf	command_handler@i,w
  7338  0406  00DC               	movwf	??_command_handler
  7339  0407  01DD               	clrf	??_command_handler+1
  7340  0408  085C               	movf	??_command_handler,w
  7341  0409  00A2               	movwf	___awdiv@dividend
  7342  040A  085D               	movf	??_command_handler+1,w
  7343  040B  00A3               	movwf	___awdiv@dividend+1
  7344  040C  3188  203A  3183   	fcall	___awdiv
  7345  040F  0020               	movlb	0	; select bank0
  7346  0410  0820               	movf	?___awdiv,w
  7347  0411  00DE               	movwf	??_command_handler+2
  7348  0412  3002               	movlw	2
  7349  0413                     u5935:	
  7350  0413  35DE               	lslf	??_command_handler+2,f
  7351  0414  0B89               	decfsz	9,f
  7352  0415  2C13               	goto	u5935
  7353  0416  30A0               	movlw	(low (_schedule| (0+256)))& (0+255)
  7354  0417  075E               	addwf	??_command_handler+2,w
  7355  0418  00DF               	movwf	??_command_handler+3
  7356  0419  0864               	movf	command_handler@i,w
  7357  041A  3903               	andlw	3
  7358  041B  075F               	addwf	??_command_handler+3,w
  7359  041C  00E0               	movwf	??_command_handler+4
  7360  041D  0860               	movf	??_command_handler+4,w
  7361  041E  0086               	movwf	6
  7362  041F  3001               	movlw	1	; select bank3/4
  7363  0420  0087               	movwf	7
  7364  0421  0801               	movf	1,w
  7365  0422  00E1               	movwf	??_command_handler+5
  7366  0423  0861               	movf	??_command_handler+5,w
  7367  0424  00E3               	movwf	command_handler@dev_addr
  7368                           
  7369                           ;main.c: 393: DATAEE_WriteByte(2 + i, dev_addr);
  7370  0425  0863               	movf	command_handler@dev_addr,w
  7371  0426  00DC               	movwf	??_command_handler
  7372  0427  085C               	movf	??_command_handler,w
  7373  0428  00A0               	movwf	DATAEE_WriteByte@bData
  7374  0429  0864               	movf	command_handler@i,w
  7375  042A  3E02               	addlw	2
  7376  042B  3193  2358  3183   	fcall	_DATAEE_WriteByte
  7377  042E  3001               	movlw	1
  7378  042F  0020               	movlb	0	; select bank0
  7379  0430  00DC               	movwf	??_command_handler
  7380  0431  085C               	movf	??_command_handler,w
  7381  0432  07E4               	addwf	command_handler@i,f
  7382  0433  2BFD               	goto	L9
  7383  0434                     l5283:	
  7384                           ;main.c: 394: }
  7385                           ;main.c: 395: } else if (!strncmp(("RSC"), (buf), 3)) {
  7386                           
  7387  0434  308D               	movlw	low (STR_27| (0+32768))
  7388  0435  00A0               	movwf	strncmp@s1
  7389  0436  3091               	movlw	high (STR_27| (0+32768))
  7390  0437  00A1               	movwf	strncmp@s1+1
  7391  0438  085B               	movf	command_handler@buf,w
  7392  0439  00A2               	movwf	strncmp@s2
  7393  043A  3002               	movlw	2
  7394  043B  00A3               	movwf	strncmp@s2+1
  7395  043C  3003               	movlw	3
  7396  043D  00A4               	movwf	strncmp@len
  7397  043E  3000               	movlw	0
  7398  043F  00A5               	movwf	strncmp@len+1
  7399  0440  3195  255E  3183   	fcall	_strncmp
  7400  0443  0020               	movlb	0	; select bank0
  7401  0444  0820               	movf	?_strncmp,w
  7402  0445  0421               	iorwf	?_strncmp+1,w
  7403  0446  1D03               	btfss	3,2
  7404  0447  2CBC               	goto	l5305
  7405                           
  7406                           ;main.c: 396: printf("$:RSC:");
  7407  0448  3050               	movlw	low (STR_28| (0+32768))
  7408  0449  00AE               	movwf	printf@f
  7409  044A  3091               	movlw	high (STR_28| (0+32768))
  7410  044B  00AF               	movwf	printf@f+1
  7411  044C  318E  262B  3183   	fcall	_printf
  7412                           
  7413                           ;main.c: 397: for (i=0; i<27; i++) {
  7414  044F  0020               	movlb	0	; select bank0
  7415  0450  01E4               	clrf	command_handler@i
  7416  0451  301B               	movlw	27
  7417  0452  0264               	subwf	command_handler@i,w
  7418  0453  1803               	btfsc	3,0
  7419  0454  2CAC               	goto	l5303
  7420  0455                     l5293:	
  7421                           
  7422                           ;main.c: 398: if ((i+1) % 4 == 0) {
  7423  0455  0864               	movf	command_handler@i,w
  7424  0456  3E01               	addlw	1
  7425  0457  3903               	andlw	3
  7426  0458  1D03               	btfss	3,2
  7427  0459  2C74               	goto	l5297
  7428                           
  7429                           ;main.c: 399: printf("%d|", schedule[i/4][i%4]);
  7430  045A  30C1               	movlw	low (STR_29| (0+32768))
  7431  045B  00AE               	movwf	printf@f
  7432  045C  3091               	movlw	high (STR_29| (0+32768))
  7433  045D  00AF               	movwf	printf@f+1
  7434  045E  3004               	movlw	4
  7435  045F  00A0               	movwf	___awdiv@divisor
  7436  0460  3000               	movlw	0
  7437  0461  00A1               	movwf	___awdiv@divisor+1
  7438  0462  0864               	movf	command_handler@i,w
  7439  0463  00DC               	movwf	??_command_handler
  7440  0464  01DD               	clrf	??_command_handler+1
  7441  0465  085C               	movf	??_command_handler,w
  7442  0466  00A2               	movwf	___awdiv@dividend
  7443  0467  085D               	movf	??_command_handler+1,w
  7444  0468  00A3               	movwf	___awdiv@dividend+1
  7445  0469  3188  203A  3183   	fcall	___awdiv
  7446  046C  0020               	movlb	0	; select bank0
  7447  046D  0820               	movf	?___awdiv,w
  7448  046E  00DE               	movwf	??_command_handler+2
  7449  046F  3002               	movlw	2
  7450  0470                     u5985:	
  7451  0470  35DE               	lslf	??_command_handler+2,f
  7452  0471  0B89               	decfsz	9,f
  7453  0472  2C70               	goto	u5985
  7454  0473  2C8E               	goto	L10
  7455  0474                     l5297:	
  7456                           ;main.c: 400: } else {
  7457                           
  7458                           
  7459                           ;main.c: 401: printf("%d,", schedule[i/4][i%4]);
  7460  0474  307D               	movlw	low (STR_14| (0+32768))
  7461  0475  0020               	movlb	0	; select bank0
  7462  0476  00AE               	movwf	printf@f
  7463  0477  3091               	movlw	high (STR_14| (0+32768))
  7464  0478  00AF               	movwf	printf@f+1
  7465  0479  3004               	movlw	4
  7466  047A  00A0               	movwf	___awdiv@divisor
  7467  047B  3000               	movlw	0
  7468  047C  00A1               	movwf	___awdiv@divisor+1
  7469  047D  0864               	movf	command_handler@i,w
  7470  047E  00DC               	movwf	??_command_handler
  7471  047F  01DD               	clrf	??_command_handler+1
  7472  0480  085C               	movf	??_command_handler,w
  7473  0481  00A2               	movwf	___awdiv@dividend
  7474  0482  085D               	movf	??_command_handler+1,w
  7475  0483  00A3               	movwf	___awdiv@dividend+1
  7476  0484  3188  203A  3183   	fcall	___awdiv
  7477  0487  0020               	movlb	0	; select bank0
  7478  0488  0820               	movf	?___awdiv,w
  7479  0489  00DE               	movwf	??_command_handler+2
  7480  048A  3002               	movlw	2
  7481  048B                     u5995:	
  7482  048B  35DE               	lslf	??_command_handler+2,f
  7483  048C  0B89               	decfsz	9,f
  7484  048D  2C8B               	goto	u5995
  7485  048E                     L10:	
  7486  048E  30A0               	movlw	(low (_schedule| (0+256)))& (0+255)
  7487  048F  075E               	addwf	??_command_handler+2,w
  7488  0490  00DF               	movwf	??_command_handler+3
  7489  0491  0864               	movf	command_handler@i,w
  7490  0492  3903               	andlw	3
  7491  0493  075F               	addwf	??_command_handler+3,w
  7492  0494  00E0               	movwf	??_command_handler+4
  7493  0495  0860               	movf	??_command_handler+4,w
  7494  0496  0086               	movwf	6
  7495  0497  3001               	movlw	1	; select bank3/4
  7496  0498  0087               	movwf	7
  7497  0499  0801               	movf	1,w
  7498  049A  00E1               	movwf	??_command_handler+5
  7499  049B  01E2               	clrf	??_command_handler+6
  7500  049C  0861               	movf	??_command_handler+5,w
  7501  049D  00B0               	movwf	?_printf+2
  7502  049E  0862               	movf	??_command_handler+6,w
  7503  049F  00B1               	movwf	?_printf+3
  7504  04A0  318E  262B  3183   	fcall	_printf
  7505  04A3  3001               	movlw	1
  7506  04A4  0020               	movlb	0	; select bank0
  7507  04A5  00DC               	movwf	??_command_handler
  7508  04A6  085C               	movf	??_command_handler,w
  7509  04A7  07E4               	addwf	command_handler@i,f
  7510  04A8  301B               	movlw	27
  7511  04A9  0264               	subwf	command_handler@i,w
  7512  04AA  1C03               	skipc
  7513  04AB  2C55               	goto	l5293
  7514  04AC                     l5303:	
  7515                           
  7516                           ;main.c: 402: }
  7517                           ;main.c: 403: }
  7518                           ;main.c: 404: printf("%d\n", schedule[6][3]);
  7519  04AC  30E6               	movlw	low ((STR_51+6)| (0+32768))
  7520  04AD  00AE               	movwf	printf@f
  7521  04AE  3090               	movlw	high ((STR_51+6)| (0+32768))
  7522  04AF  00AF               	movwf	printf@f+1
  7523  04B0  0023               	movlb	3	; select bank3
  7524  04B1  083B               	movf	(_schedule^(0+384)+27),w
  7525  04B2  0020               	movlb	0	; select bank0
  7526  04B3  00DC               	movwf	??_command_handler
  7527  04B4  01DD               	clrf	??_command_handler+1
  7528  04B5  085C               	movf	??_command_handler,w
  7529  04B6  00B0               	movwf	?_printf+2
  7530  04B7  085D               	movf	??_command_handler+1,w
  7531  04B8  00B1               	movwf	?_printf+3
  7532  04B9  318E  262B         	fcall	_printf
  7533                           
  7534                           ;main.c: 405: } else if (!strncmp(("CSC"), (buf), 3)) {
  7535  04BB  0008               	return
  7536  04BC                     l5305:	
  7537  04BC  3089               	movlw	low (STR_32| (0+32768))
  7538  04BD  0020               	movlb	0	; select bank0
  7539  04BE  00A0               	movwf	strncmp@s1
  7540  04BF  3091               	movlw	high (STR_32| (0+32768))
  7541  04C0  00A1               	movwf	strncmp@s1+1
  7542  04C1  085B               	movf	command_handler@buf,w
  7543  04C2  00A2               	movwf	strncmp@s2
  7544  04C3  3002               	movlw	2
  7545  04C4  00A3               	movwf	strncmp@s2+1
  7546  04C5  3003               	movlw	3
  7547  04C6  00A4               	movwf	strncmp@len
  7548  04C7  3000               	movlw	0
  7549  04C8  00A5               	movwf	strncmp@len+1
  7550  04C9  3195  255E  3183   	fcall	_strncmp
  7551  04CC  0020               	movlb	0	; select bank0
  7552  04CD  0820               	movf	?_strncmp,w
  7553  04CE  0421               	iorwf	?_strncmp+1,w
  7554  04CF  1D03               	btfss	3,2
  7555  04D0  2CFC               	goto	l5319
  7556                           
  7557                           ;main.c: 406: for (i=0; i<28; i++) {
  7558  04D1  01E4               	clrf	command_handler@i
  7559  04D2                     L11:	
  7560  04D2  301C               	movlw	28
  7561  04D3  0264               	subwf	command_handler@i,w
  7562  04D4  1803               	btfsc	3,0
  7563  04D5  0008               	return
  7564                           
  7565                           ;main.c: 407: schedule[i/4][i%4] = 0;
  7566  04D6  3004               	movlw	4
  7567  04D7  00A0               	movwf	___awdiv@divisor
  7568  04D8  3000               	movlw	0
  7569  04D9  00A1               	movwf	___awdiv@divisor+1
  7570  04DA  0864               	movf	command_handler@i,w
  7571  04DB  00DC               	movwf	??_command_handler
  7572  04DC  01DD               	clrf	??_command_handler+1
  7573  04DD  085C               	movf	??_command_handler,w
  7574  04DE  00A2               	movwf	___awdiv@dividend
  7575  04DF  085D               	movf	??_command_handler+1,w
  7576  04E0  00A3               	movwf	___awdiv@dividend+1
  7577  04E1  3188  203A  3183   	fcall	___awdiv
  7578  04E4  0020               	movlb	0	; select bank0
  7579  04E5  0820               	movf	?___awdiv,w
  7580  04E6  00DE               	movwf	??_command_handler+2
  7581  04E7  3002               	movlw	2
  7582  04E8                     u6035:	
  7583  04E8  35DE               	lslf	??_command_handler+2,f
  7584  04E9  0B89               	decfsz	9,f
  7585  04EA  2CE8               	goto	u6035
  7586  04EB  30A0               	movlw	(low (_schedule| (0+256)))& (0+255)
  7587  04EC  075E               	addwf	??_command_handler+2,w
  7588  04ED  00DF               	movwf	??_command_handler+3
  7589  04EE  0864               	movf	command_handler@i,w
  7590  04EF  3903               	andlw	3
  7591  04F0  075F               	addwf	??_command_handler+3,w
  7592  04F1  00E0               	movwf	??_command_handler+4
  7593  04F2  0860               	movf	??_command_handler+4,w
  7594  04F3  0086               	movwf	6
  7595  04F4  3001               	movlw	1	; select bank3/4
  7596  04F5  0087               	movwf	7
  7597  04F6  0181               	clrf	1
  7598  04F7  3001               	movlw	1
  7599  04F8  00DC               	movwf	??_command_handler
  7600  04F9  085C               	movf	??_command_handler,w
  7601  04FA  07E4               	addwf	command_handler@i,f
  7602  04FB  2CD2               	goto	L11
  7603  04FC                     l5319:	
  7604                           ;main.c: 408: }
  7605                           ;main.c: 409: } else if (!strncmp(("SEN"), (buf), 3)) {
  7606                           
  7607  04FC  3099               	movlw	low (STR_33| (0+32768))
  7608  04FD  00A0               	movwf	strncmp@s1
  7609  04FE  3091               	movlw	high (STR_33| (0+32768))
  7610  04FF  00A1               	movwf	strncmp@s1+1
  7611  0500  085B               	movf	command_handler@buf,w
  7612  0501  00A2               	movwf	strncmp@s2
  7613  0502  3002               	movlw	2
  7614  0503  00A3               	movwf	strncmp@s2+1
  7615  0504  3003               	movlw	3
  7616  0505  00A4               	movwf	strncmp@len
  7617  0506  3000               	movlw	0
  7618  0507  00A5               	movwf	strncmp@len+1
  7619  0508  3195  255E  3183   	fcall	_strncmp
  7620  050B  0020               	movlb	0	; select bank0
  7621  050C  0820               	movf	?_strncmp,w
  7622  050D  0421               	iorwf	?_strncmp+1,w
  7623  050E  1D03               	btfss	3,2
  7624  050F  2D21               	goto	l5325
  7625                           
  7626                           ;main.c: 410: dev_addr = atoi(&buf[4]);
  7627  0510  085B               	movf	command_handler@buf,w
  7628  0511  3E04               	addlw	4
  7629  0512  00A6               	movwf	atoi@s
  7630  0513  3002               	movlw	2
  7631  0514  00A7               	movwf	atoi@s+1
  7632  0515  3189  2192  3183   	fcall	_atoi
  7633  0518  0020               	movlb	0	; select bank0
  7634  0519  0826               	movf	?_atoi,w
  7635  051A  00DC               	movwf	??_command_handler
  7636  051B  085C               	movf	??_command_handler,w
  7637  051C  00E3               	movwf	command_handler@dev_addr
  7638                           
  7639                           ;main.c: 411: one_shot_sen(dev_addr);
  7640  051D  0863               	movf	command_handler@dev_addr,w
  7641  051E  3195  251D         	fcall	_one_shot_sen
  7642                           
  7643                           ;main.c: 412: } else if (!strncmp(("SFT"), (buf), 3)) {
  7644  0520  0008               	return
  7645  0521                     l5325:	
  7646  0521  30B5               	movlw	low (STR_34| (0+32768))
  7647  0522  0020               	movlb	0	; select bank0
  7648  0523  00A0               	movwf	strncmp@s1
  7649  0524  3091               	movlw	high (STR_34| (0+32768))
  7650  0525  00A1               	movwf	strncmp@s1+1
  7651  0526  085B               	movf	command_handler@buf,w
  7652  0527  00A2               	movwf	strncmp@s2
  7653  0528  3002               	movlw	2
  7654  0529  00A3               	movwf	strncmp@s2+1
  7655  052A  3003               	movlw	3
  7656  052B  00A4               	movwf	strncmp@len
  7657  052C  3000               	movlw	0
  7658  052D  00A5               	movwf	strncmp@len+1
  7659  052E  3195  255E  3183   	fcall	_strncmp
  7660  0531  0020               	movlb	0	; select bank0
  7661  0532  0820               	movf	?_strncmp,w
  7662  0533  0421               	iorwf	?_strncmp+1,w
  7663  0534  1D03               	btfss	3,2
  7664  0535  2D3A               	goto	l5329
  7665                           
  7666                           ;main.c: 413: filter = 1;
  7667  0536  0021               	movlb	1	; select bank1
  7668  0537  01ED               	clrf	_filter^(0+128)
  7669  0538  0AED               	incf	_filter^(0+128),f
  7670                           
  7671                           ;main.c: 414: } else if (!strncmp(("UFT"), (buf), 3)) {
  7672  0539  0008               	return
  7673  053A                     l5329:	
  7674  053A  30B9               	movlw	low (STR_35| (0+32768))
  7675  053B  0020               	movlb	0	; select bank0
  7676  053C  00A0               	movwf	strncmp@s1
  7677  053D  3091               	movlw	high (STR_35| (0+32768))
  7678  053E  00A1               	movwf	strncmp@s1+1
  7679  053F  085B               	movf	command_handler@buf,w
  7680  0540  00A2               	movwf	strncmp@s2
  7681  0541  3002               	movlw	2
  7682  0542  00A3               	movwf	strncmp@s2+1
  7683  0543  3003               	movlw	3
  7684  0544  00A4               	movwf	strncmp@len
  7685  0545  3000               	movlw	0
  7686  0546  00A5               	movwf	strncmp@len+1
  7687  0547  3195  255E  3183   	fcall	_strncmp
  7688  054A  0020               	movlb	0	; select bank0
  7689  054B  0820               	movf	?_strncmp,w
  7690  054C  0421               	iorwf	?_strncmp+1,w
  7691  054D  1D03               	btfss	3,2
  7692  054E  2D52               	goto	l5333
  7693                           
  7694                           ;main.c: 415: filter = 0;
  7695  054F  0021               	movlb	1	; select bank1
  7696  0550  01ED               	clrf	_filter^(0+128)
  7697                           
  7698                           ;main.c: 416: } else if (BACKPLANE_SLAVE_ADDRESS != 0x01) {
  7699  0551  0008               	return
  7700  0552                     l5333:	
  7701  0552  0021               	movlb	1	; select bank1
  7702  0553  036E               	decf	_BACKPLANE_SLAVE_ADDRESS^(0+128),w
  7703  0554  1903               	btfsc	3,2
  7704  0555  0008               	return
  7705                           
  7706                           ;main.c: 417: put_cmd(buf);
  7707  0556  0020               	movlb	0	; select bank0
  7708  0557  085B               	movf	command_handler@buf,w
  7709  0558  3196  262E         	fcall	_put_cmd
  7710  055A  0008               	return
  7711  055B                     __end_of_command_handler:	
  7712                           
  7713                           	psect	text30
  7714  155E                     __ptext30:	
  7715 ;; *************** function _strncmp *****************
  7716 ;; Defined at:
  7717 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strncmp.c"
  7718 ;; Parameters:    Size  Location     Type
  7719 ;;  s1              2    0[BANK0 ] PTR const unsigned char 
  7720 ;;		 -> STR_50(4), STR_49(4), STR_47(4), STR_46(4), 
  7721 ;;		 -> STR_43(4), STR_42(4), STR_41(4), STR_39(4), 
  7722 ;;		 -> STR_35(4), STR_34(4), STR_33(4), STR_32(4), 
  7723 ;;		 -> STR_27(4), STR_26(4), STR_24(4), STR_22(4), 
  7724 ;;		 -> STR_21(4), STR_20(4), STR_10(4), STR_9(4), 
  7725 ;;		 -> STR_6(4), STR_5(4), STR_4(4), STR_1(4), 
  7726 ;;  s2              2    2[BANK0 ] PTR const unsigned char 
  7727 ;;		 -> buf(48), cmd_buf(192), 
  7728 ;;  len             2    4[BANK0 ] unsigned int 
  7729 ;; Auto vars:     Size  Location     Type
  7730 ;;		None
  7731 ;; Return value:  Size  Location     Type
  7732 ;;                  2    0[BANK0 ] int 
  7733 ;; Registers used:
  7734 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  7735 ;; Tracked objects:
  7736 ;;		On entry : 0/0
  7737 ;;		On exit  : 0/0
  7738 ;;		Unchanged: 0/0
  7739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7740 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7741 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7742 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7743 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7744 ;;Total ram usage:        8 bytes
  7745 ;; Hardware stack levels used:    1
  7746 ;; Hardware stack levels required when called:    3
  7747 ;; This function calls:
  7748 ;;		Nothing
  7749 ;; This function is called by:
  7750 ;;		_exec_remote_cmd
  7751 ;;		_command_handler
  7752 ;;		_PROTOCOL_Loop
  7753 ;; This function uses a non-reentrant model
  7754 ;;
  7755                           
  7756                           
  7757                           ;psect for function _strncmp
  7758  155E                     _strncmp:	
  7759  155E                     l3883:	
  7760                           ;incstack = 0
  7761                           ; Regs used in _strncmp: [wreg-fsr1h+status,2+status,0+pclath]
  7762                           
  7763  155E  3001               	movlw	1
  7764  155F  0020               	movlb	0	; select bank0
  7765  1560  02A4               	subwf	strncmp@len,f
  7766  1561  3000               	movlw	0
  7767  1562  3BA5               	subwfb	strncmp@len+1,f
  7768  1563  0A24               	incf	strncmp@len,w
  7769  1564  1903               	btfsc	3,2
  7770  1565  0A25               	incf	strncmp@len+1,w
  7771  1566  1903               	btfsc	3,2
  7772  1567  2D9D               	goto	l3885
  7773  1568  0020               	movlb	0	; select bank0
  7774  1569  0820               	movf	strncmp@s1,w
  7775  156A  0084               	movwf	4
  7776  156B  0821               	movf	strncmp@s1+1,w
  7777  156C  0085               	movwf	5
  7778  156D  0012               	moviw fsr0++
  7779  156E  1903               	btfsc	3,2
  7780  156F  2D7C               	goto	l3877
  7781  1570  0822               	movf	strncmp@s2,w
  7782  1571  0086               	movwf	6
  7783  1572  0823               	movf	strncmp@s2+1,w
  7784  1573  0087               	movwf	7
  7785  1574  0820               	movf	strncmp@s1,w
  7786  1575  0084               	movwf	4
  7787  1576  0821               	movf	strncmp@s1+1,w
  7788  1577  0085               	movwf	5
  7789  1578  0800               	movf	0,w	;code access
  7790  1579  0601               	xorwf	1,w
  7791  157A  1903               	skipnz
  7792  157B  2D94               	goto	l3881
  7793  157C                     l3877:	
  7794  157C  0822               	movf	strncmp@s2,w
  7795  157D  0086               	movwf	6
  7796  157E  0823               	movf	strncmp@s2+1,w
  7797  157F  0087               	movwf	7
  7798  1580  0801               	movf	1,w
  7799  1581  00A6               	movwf	??_strncmp
  7800  1582  01A7               	clrf	??_strncmp+1
  7801  1583  09A6               	comf	??_strncmp,f
  7802  1584  09A7               	comf	??_strncmp+1,f
  7803  1585  0AA6               	incf	??_strncmp,f
  7804  1586  1903               	skipnz
  7805  1587  0AA7               	incf	??_strncmp+1,f
  7806  1588  0820               	movf	strncmp@s1,w
  7807  1589  0084               	movwf	4
  7808  158A  0821               	movf	strncmp@s1+1,w
  7809  158B  0085               	movwf	5
  7810  158C  0800               	movf	0,w	;code access
  7811  158D  0726               	addwf	??_strncmp,w
  7812  158E  00A0               	movwf	?_strncmp
  7813  158F  0827               	movf	??_strncmp+1,w
  7814  1590  1803               	skipnc
  7815  1591  0A27               	incf	??_strncmp+1,w
  7816  1592  00A1               	movwf	?_strncmp+1
  7817  1593  0008               	return
  7818  1594                     l3881:	
  7819  1594  3001               	movlw	1
  7820  1595  07A0               	addwf	strncmp@s1,f
  7821  1596  3000               	movlw	0
  7822  1597  3DA1               	addwfc	strncmp@s1+1,f
  7823  1598  3001               	movlw	1
  7824  1599  07A2               	addwf	strncmp@s2,f
  7825  159A  3000               	movlw	0
  7826  159B  3DA3               	addwfc	strncmp@s2+1,f
  7827  159C  2D5E               	goto	l3883
  7828  159D                     l3885:	
  7829  159D  01A0               	clrf	?_strncmp
  7830  159E  01A1               	clrf	?_strncmp+1
  7831  159F  0008               	return
  7832  15A0                     __end_of_strncmp:	
  7833                           
  7834                           	psect	text31
  7835  162E                     __ptext31:	
  7836 ;; *************** function _put_cmd *****************
  7837 ;; Defined at:
  7838 ;;		line 363 in file "main.c"
  7839 ;; Parameters:    Size  Location     Type
  7840 ;;  buf             1    wreg     PTR unsigned char 
  7841 ;;		 -> buf(48), 
  7842 ;; Auto vars:     Size  Location     Type
  7843 ;;  buf             1   17[BANK0 ] PTR unsigned char 
  7844 ;;		 -> buf(48), 
  7845 ;; Return value:  Size  Location     Type
  7846 ;;                  1    wreg      void 
  7847 ;; Registers used:
  7848 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7849 ;; Tracked objects:
  7850 ;;		On entry : 0/0
  7851 ;;		On exit  : 0/0
  7852 ;;		Unchanged: 0/0
  7853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7855 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7856 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7857 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7858 ;;Total ram usage:        6 bytes
  7859 ;; Hardware stack levels used:    1
  7860 ;; Hardware stack levels required when called:    4
  7861 ;; This function calls:
  7862 ;;		___wmul
  7863 ;;		_strcpy
  7864 ;; This function is called by:
  7865 ;;		_command_handler
  7866 ;; This function uses a non-reentrant model
  7867 ;;
  7868                           
  7869                           
  7870                           ;psect for function _put_cmd
  7871  162E                     _put_cmd:	
  7872                           
  7873                           ;incstack = 0
  7874                           ; Regs used in _put_cmd: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7875                           ;put_cmd@buf stored from wreg
  7876  162E  0020               	movlb	0	; select bank0
  7877  162F  00B1               	movwf	put_cmd@buf
  7878                           
  7879                           ;main.c: 364: static int8_t idx = -1;
  7880                           ;main.c: 365: if (++idx > 3) idx = 0;
  7881  1630  3001               	movlw	1
  7882  1631  00AC               	movwf	??_put_cmd
  7883  1632  082C               	movf	??_put_cmd,w
  7884  1633  0021               	movlb	1	; select bank1
  7885  1634  07EC               	addwf	put_cmd@idx^(0+128),f
  7886  1635  086C               	movf	put_cmd@idx^(0+128),w
  7887  1636  3A80               	xorlw	128
  7888  1637  3E7C               	addlw	-132
  7889  1638  1803               	btfsc	3,0
  7890  1639  01EC               	clrf	put_cmd@idx^(0+128)
  7891                           
  7892                           ;main.c: 366: if (cmd_buf[idx][0] == '\0') strcpy(cmd_buf[idx], buf);
  7893  163A  086C               	movf	put_cmd@idx^(0+128),w
  7894  163B  0020               	movlb	0	; select bank0
  7895  163C  00AC               	movwf	??_put_cmd
  7896  163D  01AD               	clrf	??_put_cmd+1
  7897  163E  082C               	movf	??_put_cmd,w
  7898  163F  00A0               	movwf	___wmul@multiplier
  7899  1640  082D               	movf	??_put_cmd+1,w
  7900  1641  00A1               	movwf	___wmul@multiplier+1
  7901  1642  3030               	movlw	48
  7902  1643  00A2               	movwf	___wmul@multiplicand
  7903  1644  3000               	movlw	0
  7904  1645  00A3               	movwf	___wmul@multiplicand+1
  7905  1646  3192  22E1  3196   	fcall	___wmul
  7906  1649  3030               	movlw	48
  7907  164A  0020               	movlb	0	; select bank0
  7908  164B  00AE               	movwf	??_put_cmd+2
  7909  164C  3023               	movlw	35
  7910  164D  00AF               	movwf	??_put_cmd+3
  7911  164E  0820               	movf	?___wmul,w
  7912  164F  072E               	addwf	??_put_cmd+2,w
  7913  1650  0086               	movwf	6
  7914  1651  0821               	movf	?___wmul+1,w
  7915  1652  3D2F               	addwfc	??_put_cmd+3,w
  7916  1653  0087               	movwf	7
  7917  1654  0801               	movf	1,w
  7918  1655  1D03               	btfss	3,2
  7919  1656  0008               	return
  7920  1657  0021               	movlb	1	; select bank1
  7921  1658  086C               	movf	put_cmd@idx^(0+128),w
  7922  1659  0020               	movlb	0	; select bank0
  7923  165A  00AC               	movwf	??_put_cmd
  7924  165B  01AD               	clrf	??_put_cmd+1
  7925  165C  082C               	movf	??_put_cmd,w
  7926  165D  00A0               	movwf	___wmul@multiplier
  7927  165E  082D               	movf	??_put_cmd+1,w
  7928  165F  00A1               	movwf	___wmul@multiplier+1
  7929  1660  3030               	movlw	48
  7930  1661  00A2               	movwf	___wmul@multiplicand
  7931  1662  3000               	movlw	0
  7932  1663  00A3               	movwf	___wmul@multiplicand+1
  7933  1664  3192  22E1  3196   	fcall	___wmul
  7934  1667  3030               	movlw	48
  7935  1668  0020               	movlb	0	; select bank0
  7936  1669  00AE               	movwf	??_put_cmd+2
  7937  166A  3023               	movlw	35
  7938  166B  00AF               	movwf	??_put_cmd+3
  7939  166C  0820               	movf	?___wmul,w
  7940  166D  072E               	addwf	??_put_cmd+2,w
  7941  166E  00A6               	movwf	strcpy@to
  7942  166F  0821               	movf	?___wmul+1,w
  7943  1670  3D2F               	addwfc	??_put_cmd+3,w
  7944  1671  00A7               	movwf	strcpy@to+1
  7945  1672  0831               	movf	put_cmd@buf,w
  7946  1673  00B0               	movwf	??_put_cmd+4
  7947  1674  0830               	movf	??_put_cmd+4,w
  7948  1675  00A8               	movwf	strcpy@from
  7949  1676  3192  228E         	fcall	_strcpy
  7950  1678  0008               	return
  7951  1679                     __end_of_put_cmd:	
  7952                           
  7953                           	psect	text32
  7954  128E                     __ptext32:	
  7955 ;; *************** function _strcpy *****************
  7956 ;; Defined at:
  7957 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strcpy.c"
  7958 ;; Parameters:    Size  Location     Type
  7959 ;;  to              2    6[BANK0 ] PTR unsigned char 
  7960 ;;		 -> cmd_buf(192), 
  7961 ;;  from            1    8[BANK0 ] PTR const unsigned char 
  7962 ;;		 -> buf(48), 
  7963 ;; Auto vars:     Size  Location     Type
  7964 ;;  cp              2   10[BANK0 ] PTR unsigned char 
  7965 ;;		 -> cmd_buf(192), 
  7966 ;; Return value:  Size  Location     Type
  7967 ;;                  2    6[BANK0 ] PTR unsigned char 
  7968 ;; Registers used:
  7969 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  7970 ;; Tracked objects:
  7971 ;;		On entry : 0/0
  7972 ;;		On exit  : 0/0
  7973 ;;		Unchanged: 0/0
  7974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7975 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7976 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7977 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7978 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7979 ;;Total ram usage:        6 bytes
  7980 ;; Hardware stack levels used:    1
  7981 ;; Hardware stack levels required when called:    3
  7982 ;; This function calls:
  7983 ;;		Nothing
  7984 ;; This function is called by:
  7985 ;;		_put_cmd
  7986 ;; This function uses a non-reentrant model
  7987 ;;
  7988                           
  7989                           
  7990                           ;psect for function _strcpy
  7991  128E                     _strcpy:	
  7992                           
  7993                           ;incstack = 0
  7994                           ; Regs used in _strcpy: [wreg-fsr1h+status,2+status,0]
  7995  128E  0020               	movlb	0	; select bank0
  7996  128F  0827               	movf	strcpy@to+1,w
  7997  1290  00AB               	movwf	strcpy@cp+1
  7998  1291  0826               	movf	strcpy@to,w
  7999  1292  00AA               	movwf	strcpy@cp
  8000  1293                     l3849:	
  8001  1293  082A               	movf	strcpy@cp,w
  8002  1294  0086               	movwf	6
  8003  1295  082B               	movf	strcpy@cp+1,w
  8004  1296  0087               	movwf	7
  8005  1297  0828               	movf	strcpy@from,w
  8006  1298  0084               	movwf	4
  8007  1299  3002               	movlw	2	; select bank4/5
  8008  129A  0085               	movwf	5
  8009  129B  0800               	movf	0,w
  8010  129C  3FC0               	movwi [0]fsr1
  8011  129D  0889               	movf	9,f
  8012  129E  1903               	btfsc	3,2
  8013  129F  0008               	return
  8014  12A0  3001               	movlw	1
  8015  12A1  07AA               	addwf	strcpy@cp,f
  8016  12A2  3000               	movlw	0
  8017  12A3  3DAB               	addwfc	strcpy@cp+1,f
  8018  12A4  3001               	movlw	1
  8019  12A5  00A9               	movwf	??_strcpy
  8020  12A6  0829               	movf	??_strcpy,w
  8021  12A7  07A8               	addwf	strcpy@from,f
  8022  12A8  2A93               	goto	l3849
  8023  12A9                     __end_of_strcpy:	
  8024                           ;	Return value of _strcpy is never used
  8025                           
  8026                           
  8027                           	psect	text33
  8028  15E6                     __ptext33:	
  8029 ;; *************** function _print_dev_map *****************
  8030 ;; Defined at:
  8031 ;;		line 221 in file "main.c"
  8032 ;; Parameters:    Size  Location     Type
  8033 ;;		None
  8034 ;; Auto vars:     Size  Location     Type
  8035 ;;  len             1   39[BANK0 ] unsigned char 
  8036 ;;  i               1   38[BANK0 ] unsigned char 
  8037 ;; Return value:  Size  Location     Type
  8038 ;;                  1    wreg      void 
  8039 ;; Registers used:
  8040 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8041 ;; Tracked objects:
  8042 ;;		On entry : 0/0
  8043 ;;		On exit  : 0/0
  8044 ;;		Unchanged: 0/0
  8045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8047 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8048 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8049 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8050 ;;Total ram usage:        4 bytes
  8051 ;; Hardware stack levels used:    1
  8052 ;; Hardware stack levels required when called:    6
  8053 ;; This function calls:
  8054 ;;		_dev_map_iterator
  8055 ;;		_printf
  8056 ;; This function is called by:
  8057 ;;		_command_handler
  8058 ;; This function uses a non-reentrant model
  8059 ;;
  8060                           
  8061                           
  8062                           ;psect for function _print_dev_map
  8063  15E6                     _print_dev_map:	
  8064                           
  8065                           ;main.c: 222: uint8_t i;
  8066                           ;main.c: 223: uint8_t len = devs;
  8067                           
  8068                           ;incstack = 0
  8069                           ; Regs used in _print_dev_map: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8070  15E6  0021               	movlb	1	; select bank1
  8071  15E7  0863               	movf	_devs^(0+128),w
  8072  15E8  0020               	movlb	0	; select bank0
  8073  15E9  00C4               	movwf	??_print_dev_map
  8074  15EA  0844               	movf	??_print_dev_map,w
  8075  15EB  00C7               	movwf	print_dev_map@len
  8076                           
  8077                           ;main.c: 224: if (len > 0) {
  8078  15EC  0847               	movf	print_dev_map@len,w
  8079  15ED  1903               	btfsc	3,2
  8080  15EE  2E26               	goto	l5123
  8081                           
  8082                           ;main.c: 225: len--;
  8083  15EF  3001               	movlw	1
  8084  15F0  02C7               	subwf	print_dev_map@len,f
  8085                           
  8086                           ;main.c: 226: printf("$:MAP:");
  8087  15F1  3057               	movlw	low (STR_13| (0+32768))
  8088  15F2  00AE               	movwf	printf@f
  8089  15F3  3091               	movlw	high (STR_13| (0+32768))
  8090  15F4  00AF               	movwf	printf@f+1
  8091  15F5  318E  262B  3195   	fcall	_printf
  8092                           
  8093                           ;main.c: 227: for (i=0; i<len; i++) printf("%d,", dev_map_iterator());
  8094  15F8  0020               	movlb	0	; select bank0
  8095  15F9  01C6               	clrf	print_dev_map@i
  8096  15FA                     l5119:	
  8097  15FA  0847               	movf	print_dev_map@len,w
  8098  15FB  0246               	subwf	print_dev_map@i,w
  8099  15FC  1803               	btfsc	3,0
  8100  15FD  2E15               	goto	l5121
  8101  15FE  307D               	movlw	low (STR_14| (0+32768))
  8102  15FF  00AE               	movwf	printf@f
  8103  1600  3091               	movlw	high (STR_14| (0+32768))
  8104  1601  00AF               	movwf	printf@f+1
  8105  1602  3189  2138  3195   	fcall	_dev_map_iterator
  8106  1605  0020               	movlb	0	; select bank0
  8107  1606  00C4               	movwf	??_print_dev_map
  8108  1607  01C5               	clrf	??_print_dev_map+1
  8109  1608  0844               	movf	??_print_dev_map,w
  8110  1609  00B0               	movwf	?_printf+2
  8111  160A  0845               	movf	??_print_dev_map+1,w
  8112  160B  00B1               	movwf	?_printf+3
  8113  160C  318E  262B  3195   	fcall	_printf
  8114  160F  3001               	movlw	1
  8115  1610  0020               	movlb	0	; select bank0
  8116  1611  00C4               	movwf	??_print_dev_map
  8117  1612  0844               	movf	??_print_dev_map,w
  8118  1613  07C6               	addwf	print_dev_map@i,f
  8119  1614  2DFA               	goto	l5119
  8120  1615                     l5121:	
  8121                           
  8122                           ;main.c: 228: printf("%d\n", dev_map_iterator());
  8123  1615  30E6               	movlw	low ((STR_51+6)| (0+32768))
  8124  1616  00AE               	movwf	printf@f
  8125  1617  3090               	movlw	high ((STR_51+6)| (0+32768))
  8126  1618  00AF               	movwf	printf@f+1
  8127  1619  3189  2138  3195   	fcall	_dev_map_iterator
  8128  161C  0020               	movlb	0	; select bank0
  8129  161D  00C4               	movwf	??_print_dev_map
  8130  161E  01C5               	clrf	??_print_dev_map+1
  8131  161F  0844               	movf	??_print_dev_map,w
  8132  1620  00B0               	movwf	?_printf+2
  8133  1621  0845               	movf	??_print_dev_map+1,w
  8134  1622  00B1               	movwf	?_printf+3
  8135  1623  318E  262B         	fcall	_printf
  8136                           
  8137                           ;main.c: 229: } else {
  8138  1625  0008               	return
  8139  1626                     l5123:	
  8140                           
  8141                           ;main.c: 230: printf("!:MAP:NO SLAVE FOUND\n");
  8142  1626  3072               	movlw	low (STR_16| (0+32768))
  8143  1627  0020               	movlb	0	; select bank0
  8144  1628  00AE               	movwf	printf@f
  8145  1629  3090               	movlw	high (STR_16| (0+32768))
  8146  162A  00AF               	movwf	printf@f+1
  8147  162B  318E  262B         	fcall	_printf
  8148  162D  0008               	return
  8149  162E                     __end_of_print_dev_map:	
  8150                           
  8151                           	psect	text34
  8152  0938                     __ptext34:	
  8153 ;; *************** function _dev_map_iterator *****************
  8154 ;; Defined at:
  8155 ;;		line 157 in file "main.c"
  8156 ;; Parameters:    Size  Location     Type
  8157 ;;		None
  8158 ;; Auto vars:     Size  Location     Type
  8159 ;;  dev_addr        1    7[BANK0 ] unsigned char 
  8160 ;;  exist           1    6[BANK0 ] unsigned char 
  8161 ;; Return value:  Size  Location     Type
  8162 ;;                  1    wreg      unsigned char 
  8163 ;; Registers used:
  8164 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  8165 ;; Tracked objects:
  8166 ;;		On entry : 0/0
  8167 ;;		On exit  : 0/0
  8168 ;;		Unchanged: 0/0
  8169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8171 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8172 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8173 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8174 ;;Total ram usage:        8 bytes
  8175 ;; Hardware stack levels used:    1
  8176 ;; Hardware stack levels required when called:    3
  8177 ;; This function calls:
  8178 ;;		Nothing
  8179 ;; This function is called by:
  8180 ;;		_print_dev_map
  8181 ;; This function uses a non-reentrant model
  8182 ;;
  8183                           
  8184                           
  8185                           ;psect for function _dev_map_iterator
  8186  0938                     _dev_map_iterator:	
  8187                           
  8188                           ;main.c: 158: static uint8_t xx = 0;
  8189                           ;main.c: 159: static uint8_t yy = 0;
  8190                           ;main.c: 160: static bool start = 1;
  8191                           ;main.c: 161: bool exist = 0;
  8192                           
  8193                           ;incstack = 0
  8194                           ; Regs used in _dev_map_iterator: [wreg-fsr1h+status,2+status,0+pclath]
  8195  0938  0020               	movlb	0	; select bank0
  8196  0939  01A6               	clrf	dev_map_iterator@exist
  8197                           
  8198                           ;main.c: 162: uint8_t dev_addr;
  8199                           ;main.c: 164: if (devs) {
  8200  093A  0021               	movlb	1	; select bank1
  8201  093B  0863               	movf	_devs^(0+128),w
  8202  093C  1903               	btfsc	3,2
  8203  093D  298F               	goto	l3787
  8204  093E                     l3771:	
  8205                           ;main.c: 165: while(1) {
  8206                           
  8207                           
  8208                           ;main.c: 166: if (xx > 7) {
  8209  093E  3008               	movlw	8
  8210  093F  0262               	subwf	dev_map_iterator@xx^(0+128),w
  8211  0940  1C03               	skipc
  8212  0941  2949               	goto	l3777
  8213                           
  8214                           ;main.c: 167: xx = 0;
  8215  0942  01E2               	clrf	dev_map_iterator@xx^(0+128)
  8216                           
  8217                           ;main.c: 168: yy++;
  8218  0943  3001               	movlw	1
  8219  0944  0020               	movlb	0	; select bank0
  8220  0945  00A0               	movwf	??_dev_map_iterator
  8221  0946  0820               	movf	??_dev_map_iterator,w
  8222  0947  0021               	movlb	1	; select bank1
  8223  0948  07E1               	addwf	dev_map_iterator@yy^(0+128),f
  8224  0949                     l3777:	
  8225                           
  8226                           ;main.c: 169: }
  8227                           ;main.c: 170: if (yy >= MAX_Y) {
  8228  0949  300A               	movlw	low (_MAX_Y| (0+32768))
  8229  094A  0084               	movwf	4
  8230  094B  3090               	movlw	high (_MAX_Y| (0+32768))
  8231  094C  0085               	movwf	5
  8232  094D  0800               	movf	0,w	;code access
  8233  094E  0261               	subwf	dev_map_iterator@yy^(0+128),w
  8234  094F  1C03               	skipc
  8235  0950  2953               	goto	l3781
  8236                           
  8237                           ;main.c: 171: xx = 0;
  8238  0951  01E2               	clrf	dev_map_iterator@xx^(0+128)
  8239                           
  8240                           ;main.c: 172: yy = 0;
  8241  0952  01E1               	clrf	dev_map_iterator@yy^(0+128)
  8242  0953                     l3781:	
  8243                           
  8244                           ;main.c: 173: }
  8245                           ;main.c: 174: if ((0x01 << xx) & dev_map[yy]) {
  8246  0953  0861               	movf	dev_map_iterator@yy^(0+128),w
  8247  0954  3E20               	addlw	(low (_dev_map| (0+256)))& (0+255)
  8248  0955  0086               	movwf	6
  8249  0956  3001               	movlw	1	; select bank2/3
  8250  0957  0087               	movwf	7
  8251  0958  0801               	movf	1,w
  8252  0959  0020               	movlb	0	; select bank0
  8253  095A  00A0               	movwf	??_dev_map_iterator
  8254  095B  01A1               	clrf	??_dev_map_iterator+1
  8255  095C  3001               	movlw	1
  8256  095D  00A2               	movwf	??_dev_map_iterator+2
  8257  095E  3000               	movlw	0
  8258  095F  00A3               	movwf	??_dev_map_iterator+3
  8259  0960  0021               	movlb	1	; select bank1
  8260  0961  0A62               	incf	dev_map_iterator@xx^(0+128),w
  8261  0962  0020               	movlb	0	; select bank0
  8262  0963  2966               	goto	u3594
  8263  0964                     u3595:	
  8264  0964  35A2               	lslf	??_dev_map_iterator+2,f
  8265  0965  0DA3               	rlf	??_dev_map_iterator+3,f
  8266  0966                     u3594:	
  8267  0966  0B89               	decfsz	9,f
  8268  0967  2964               	goto	u3595
  8269  0968  0820               	movf	??_dev_map_iterator,w
  8270  0969  0522               	andwf	??_dev_map_iterator+2,w
  8271  096A  00A4               	movwf	??_dev_map_iterator+4
  8272  096B  0821               	movf	??_dev_map_iterator+1,w
  8273  096C  0523               	andwf	??_dev_map_iterator+3,w
  8274  096D  00A5               	movwf	??_dev_map_iterator+5
  8275  096E  0824               	movf	??_dev_map_iterator+4,w
  8276  096F  0425               	iorwf	??_dev_map_iterator+5,w
  8277  0970  1903               	btfsc	3,2
  8278  0971  2988               	goto	l3785
  8279                           
  8280                           ;main.c: 175: dev_addr = yy * 8 + xx++;
  8281  0972  0021               	movlb	1	; select bank1
  8282  0973  0861               	movf	dev_map_iterator@yy^(0+128),w
  8283  0974  0020               	movlb	0	; select bank0
  8284  0975  00A0               	movwf	??_dev_map_iterator
  8285  0976  3002               	movlw	2
  8286  0977                     u3615:	
  8287  0977  35A0               	lslf	??_dev_map_iterator,f
  8288  0978  3EFF               	addlw	-1
  8289  0979  1D03               	skipz
  8290  097A  2977               	goto	u3615
  8291  097B  3520               	lslf	??_dev_map_iterator,w
  8292  097C  0021               	movlb	1	; select bank1
  8293  097D  0762               	addwf	dev_map_iterator@xx^(0+128),w
  8294  097E  0020               	movlb	0	; select bank0
  8295  097F  00A1               	movwf	??_dev_map_iterator+1
  8296  0980  0821               	movf	??_dev_map_iterator+1,w
  8297  0981  00A7               	movwf	dev_map_iterator@dev_addr
  8298  0982  3001               	movlw	1
  8299  0983  00A0               	movwf	??_dev_map_iterator
  8300  0984  0820               	movf	??_dev_map_iterator,w
  8301  0985  0021               	movlb	1	; select bank1
  8302  0986  07E2               	addwf	dev_map_iterator@xx^(0+128),f
  8303                           
  8304                           ;main.c: 176: break;
  8305  0987  298F               	goto	l3787
  8306  0988                     l3785:	
  8307                           
  8308                           ;main.c: 177: }
  8309                           ;main.c: 178: xx++;
  8310  0988  3001               	movlw	1
  8311  0989  0020               	movlb	0	; select bank0
  8312  098A  00A0               	movwf	??_dev_map_iterator
  8313  098B  0820               	movf	??_dev_map_iterator,w
  8314  098C  0021               	movlb	1	; select bank1
  8315  098D  07E2               	addwf	dev_map_iterator@xx^(0+128),f
  8316  098E  293E               	goto	l3771
  8317  098F                     l3787:	
  8318                           
  8319                           ;main.c: 179: }
  8320                           ;main.c: 180: }
  8321                           ;main.c: 181: return dev_addr;
  8322  098F  0020               	movlb	0	; select bank0
  8323  0990  0827               	movf	dev_map_iterator@dev_addr,w
  8324  0991  0008               	return
  8325  0992                     __end_of_dev_map_iterator:	
  8326                           
  8327                           	psect	text35
  8328  151D                     __ptext35:	
  8329 ;; *************** function _one_shot_sen *****************
  8330 ;; Defined at:
  8331 ;;		line 273 in file "main.c"
  8332 ;; Parameters:    Size  Location     Type
  8333 ;;  dev_addr        1    wreg     unsigned char 
  8334 ;; Auto vars:     Size  Location     Type
  8335 ;;  dev_addr        1   58[BANK0 ] unsigned char 
  8336 ;;  status          1   57[BANK0 ] unsigned char 
  8337 ;; Return value:  Size  Location     Type
  8338 ;;                  1    wreg      void 
  8339 ;; Registers used:
  8340 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8341 ;; Tracked objects:
  8342 ;;		On entry : 0/0
  8343 ;;		On exit  : 0/0
  8344 ;;		Unchanged: 0/0
  8345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8347 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8348 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8349 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8350 ;;Total ram usage:        5 bytes
  8351 ;; Hardware stack levels used:    1
  8352 ;; Hardware stack levels required when called:    8
  8353 ;; This function calls:
  8354 ;;		_detected
  8355 ;;		_i2c1_write_no_data
  8356 ;;		_printf
  8357 ;;		_sen
  8358 ;; This function is called by:
  8359 ;;		_command_handler
  8360 ;; This function uses a non-reentrant model
  8361 ;;
  8362                           
  8363                           
  8364                           ;psect for function _one_shot_sen
  8365  151D                     _one_shot_sen:	
  8366                           
  8367                           ;incstack = 0
  8368                           ; Regs used in _one_shot_sen: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8369                           ;one_shot_sen@dev_addr stored from wreg
  8370  151D  0020               	movlb	0	; select bank0
  8371  151E  00DA               	movwf	one_shot_sen@dev_addr
  8372                           
  8373                           ;main.c: 274: if (!detected(dev_addr)) {
  8374  151F  085A               	movf	one_shot_sen@dev_addr,w
  8375  1520  3194  24EE  3195   	fcall	_detected
  8376  1523  3A00               	xorlw	0
  8377  1524  1D03               	skipz
  8378  1525  2D35               	goto	l5129
  8379                           
  8380                           ;main.c: 275: printf("!:%%%d:UNDETECTED DEVICE\n", dev_addr);
  8381  1526  303F               	movlw	low (STR_17| (0+32768))
  8382  1527  0020               	movlb	0	; select bank0
  8383  1528  00AE               	movwf	printf@f
  8384  1529  3090               	movlw	high (STR_17| (0+32768))
  8385  152A  00AF               	movwf	printf@f+1
  8386  152B  085A               	movf	one_shot_sen@dev_addr,w
  8387  152C  00D6               	movwf	??_one_shot_sen
  8388  152D  01D7               	clrf	??_one_shot_sen+1
  8389  152E  0856               	movf	??_one_shot_sen,w
  8390  152F  00B0               	movwf	?_printf+2
  8391  1530  0857               	movf	??_one_shot_sen+1,w
  8392  1531  00B1               	movwf	?_printf+3
  8393  1532  318E  262B         	fcall	_printf
  8394                           
  8395                           ;main.c: 276: } else {
  8396  1534  0008               	return
  8397  1535                     l5129:	
  8398                           
  8399                           ;main.c: 277: uint8_t status = sen(dev_addr);
  8400  1535  0020               	movlb	0	; select bank0
  8401  1536  085A               	movf	one_shot_sen@dev_addr,w
  8402  1537  318A  227D  3195   	fcall	_sen
  8403  153A  0020               	movlb	0	; select bank0
  8404  153B  00D6               	movwf	??_one_shot_sen
  8405  153C  0856               	movf	??_one_shot_sen,w
  8406  153D  00D9               	movwf	one_shot_sen@status
  8407                           
  8408                           ;main.c: 278: if (status > 0) {
  8409  153E  0859               	movf	one_shot_sen@status,w
  8410  153F  1903               	btfsc	3,2
  8411  1540  0008               	return
  8412                           
  8413                           ;main.c: 279: printf("!:%%%d:NETWORK ERROR\n", dev_addr);
  8414  1541  3088               	movlw	low (STR_18| (0+32768))
  8415  1542  00AE               	movwf	printf@f
  8416  1543  3090               	movlw	high (STR_18| (0+32768))
  8417  1544  00AF               	movwf	printf@f+1
  8418  1545  085A               	movf	one_shot_sen@dev_addr,w
  8419  1546  00D6               	movwf	??_one_shot_sen
  8420  1547  01D7               	clrf	??_one_shot_sen+1
  8421  1548  0856               	movf	??_one_shot_sen,w
  8422  1549  00B0               	movwf	?_printf+2
  8423  154A  0857               	movf	??_one_shot_sen+1,w
  8424  154B  00B1               	movwf	?_printf+3
  8425  154C  318E  262B  3195   	fcall	_printf
  8426                           
  8427                           ;main.c: 280: i2c1_write_no_data(dev_addr, 0x0c);
  8428  154F  0020               	movlb	0	; select bank0
  8429  1550  085A               	movf	one_shot_sen@dev_addr,w
  8430  1551  00D6               	movwf	??_one_shot_sen
  8431  1552  01D7               	clrf	??_one_shot_sen+1
  8432  1553  0856               	movf	??_one_shot_sen,w
  8433  1554  00AE               	movwf	i2c1_write_no_data@dev_addr
  8434  1555  0857               	movf	??_one_shot_sen+1,w
  8435  1556  00AF               	movwf	i2c1_write_no_data@dev_addr+1
  8436  1557  300C               	movlw	12
  8437  1558  00D8               	movwf	??_one_shot_sen+2
  8438  1559  0858               	movf	??_one_shot_sen+2,w
  8439  155A  00B0               	movwf	i2c1_write_no_data@reg_addr
  8440  155B  3194  243D         	fcall	_i2c1_write_no_data
  8441  155D  0008               	return
  8442  155E                     __end_of_one_shot_sen:	
  8443                           
  8444                           	psect	text36
  8445  0A7D                     __ptext36:	
  8446 ;; *************** function _sen *****************
  8447 ;; Defined at:
  8448 ;;		line 238 in file "main.c"
  8449 ;; Parameters:    Size  Location     Type
  8450 ;;  dev_addr        1    wreg     unsigned char 
  8451 ;; Auto vars:     Size  Location     Type
  8452 ;;  dev_addr        1   53[BANK0 ] unsigned char 
  8453 ;;  status          1   52[BANK0 ] unsigned char 
  8454 ;;  length          1   51[BANK0 ] unsigned char 
  8455 ;;  type            1   50[BANK0 ] unsigned char 
  8456 ;;  i               1    0        unsigned char 
  8457 ;;  data            1    0        unsigned char 
  8458 ;; Return value:  Size  Location     Type
  8459 ;;                  1    wreg      unsigned char 
  8460 ;; Registers used:
  8461 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8462 ;; Tracked objects:
  8463 ;;		On entry : 0/0
  8464 ;;		On exit  : 0/0
  8465 ;;		Unchanged: 0/0
  8466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8468 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8469 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8470 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8471 ;;Total ram usage:        9 bytes
  8472 ;; Hardware stack levels used:    1
  8473 ;; Hardware stack levels required when called:    7
  8474 ;; This function calls:
  8475 ;;		_PROTOCOL_Print_TLV
  8476 ;;		_i2c1_read
  8477 ;;		_i2c1_write_no_data
  8478 ;; This function is called by:
  8479 ;;		_one_shot_sen
  8480 ;;		_fetch
  8481 ;; This function uses a non-reentrant model
  8482 ;;
  8483                           
  8484                           
  8485                           ;psect for function _sen
  8486  0A7D                     _sen:	
  8487                           
  8488                           ;incstack = 0
  8489                           ; Regs used in _sen: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8490                           ;sen@dev_addr stored from wreg
  8491  0A7D  0020               	movlb	0	; select bank0
  8492  0A7E  00D5               	movwf	sen@dev_addr
  8493                           
  8494                           ;main.c: 239: uint8_t status;
  8495                           ;main.c: 240: uint8_t type;
  8496                           ;main.c: 241: uint8_t length ,data, i;
  8497                           ;main.c: 242: LATCbits.LATC7 ^= 1;
  8498  0A7F  0022               	movlb	2	; select bank2
  8499  0A80  0D0E               	rlf	14,w	;volatile
  8500  0A81  0D0E               	rlf	14,w	;volatile
  8501  0A82  3901               	andlw	1
  8502  0A83  0020               	movlb	0	; select bank0
  8503  0A84  00CD               	movwf	??_sen
  8504  0A85  3001               	movlw	1
  8505  0A86  06CD               	xorwf	??_sen,f
  8506  0A87  0CCD               	rrf	??_sen,f
  8507  0A88  0CCD               	rrf	??_sen,f
  8508  0A89  0022               	movlb	2	; select bank2
  8509  0A8A  080E               	movf	14,w	;volatile
  8510  0A8B  0020               	movlb	0	; select bank0
  8511  0A8C  064D               	xorwf	??_sen,w
  8512  0A8D  397F               	andlw	-129
  8513  0A8E  064D               	xorwf	??_sen,w
  8514  0A8F  0022               	movlb	2	; select bank2
  8515  0A90  008E               	movwf	14	;volatile
  8516                           
  8517                           ;main.c: 244: _delay((unsigned long)((200)*(32000000/4000000.0)));
  8518  0A91  30E4               	movlw	228
  8519  0A92                     u6797:	
  8520  0A92  3200               	nop2
  8521  0A93  3200               	nop2
  8522  0A94  0B89               	decfsz	9,f
  8523  0A95  2A92               	goto	u6797
  8524  0A96  3200               	nop2
  8525  0A97  3200               	nop2
  8526                           
  8527                           ;main.c: 245: i2c1_write_no_data(dev_addr, 0x06);
  8528  0A98  0020               	movlb	0	; select bank0
  8529  0A99  0855               	movf	sen@dev_addr,w
  8530  0A9A  00CD               	movwf	??_sen
  8531  0A9B  01CE               	clrf	??_sen+1
  8532  0A9C  084D               	movf	??_sen,w
  8533  0A9D  00AE               	movwf	i2c1_write_no_data@dev_addr
  8534  0A9E  084E               	movf	??_sen+1,w
  8535  0A9F  00AF               	movwf	i2c1_write_no_data@dev_addr+1
  8536  0AA0  3006               	movlw	6
  8537  0AA1  00CF               	movwf	??_sen+2
  8538  0AA2  084F               	movf	??_sen+2,w
  8539  0AA3  00B0               	movwf	i2c1_write_no_data@reg_addr
  8540  0AA4  3194  243D  318A   	fcall	_i2c1_write_no_data
  8541                           
  8542                           ;main.c: 247: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  8543  0AA7  300B               	movlw	11
  8544  0AA8  0020               	movlb	0	; select bank0
  8545  0AA9  00CD               	movwf	??_sen
  8546  0AAA  3062               	movlw	98
  8547  0AAB                     u6807:	
  8548  0AAB  0B89               	decfsz	9,f
  8549  0AAC  2AAB               	goto	u6807
  8550  0AAD  0BCD               	decfsz	??_sen,f
  8551  0AAE  2AAB               	goto	u6807
  8552  0AAF  0000               	nop
  8553                           
  8554                           ;main.c: 248: status = i2c1_read(dev_addr, 0x07, &type, 1);
  8555  0AB0  0020               	movlb	0	; select bank0
  8556  0AB1  0855               	movf	sen@dev_addr,w
  8557  0AB2  00CD               	movwf	??_sen
  8558  0AB3  01CE               	clrf	??_sen+1
  8559  0AB4  084D               	movf	??_sen,w
  8560  0AB5  00B0               	movwf	i2c1_read@dev_addr
  8561  0AB6  084E               	movf	??_sen+1,w
  8562  0AB7  00B1               	movwf	i2c1_read@dev_addr+1
  8563  0AB8  3007               	movlw	7
  8564  0AB9  00CF               	movwf	??_sen+2
  8565  0ABA  084F               	movf	??_sen+2,w
  8566  0ABB  00B2               	movwf	i2c1_read@reg_addr
  8567  0ABC  3052               	movlw	low sen@type
  8568  0ABD  00B3               	movwf	i2c1_read@pbuf
  8569  0ABE  3000               	movlw	high sen@type
  8570  0ABF  00B4               	movwf	i2c1_read@pbuf+1
  8571  0AC0  01B5               	clrf	i2c1_read@len
  8572  0AC1  0AB5               	incf	i2c1_read@len,f
  8573  0AC2  3188  208C  318A   	fcall	_i2c1_read
  8574  0AC5  0020               	movlb	0	; select bank0
  8575  0AC6  00D0               	movwf	??_sen+3
  8576  0AC7  0850               	movf	??_sen+3,w
  8577  0AC8  00D4               	movwf	sen@status
  8578                           
  8579                           ;main.c: 249: _delay((unsigned long)((100)*(32000000/4000000.0)));
  8580  0AC9  30A0               	movlw	160
  8581  0ACA                     u6817:	
  8582  0ACA  3200               	nop2
  8583  0ACB  0B89               	decfsz	9,f
  8584  0ACC  2ACA               	goto	u6817
  8585                           
  8586                           ;main.c: 250: if (status == 0) {
  8587  0ACD  0020               	movlb	0	; select bank0
  8588  0ACE  0854               	movf	sen@status,w
  8589  0ACF  1D03               	btfss	3,2
  8590  0AD0  2B33               	goto	l5045
  8591                           
  8592                           ;main.c: 251: if (type == 0x06) {
  8593  0AD1  3006               	movlw	6
  8594  0AD2  0652               	xorwf	sen@type,w
  8595  0AD3  1D03               	btfss	3,2
  8596  0AD4  2AE1               	goto	l5031
  8597                           
  8598                           ;main.c: 252: if (!filter) {
  8599  0AD5  0021               	movlb	1	; select bank1
  8600  0AD6  086D               	movf	_filter^(0+128),w
  8601  0AD7  1D03               	btfss	3,2
  8602  0AD8  2B33               	goto	l5045
  8603                           
  8604                           ;main.c: 253: PROTOCOL_Print_TLV(dev_addr, 0x06, 0, (0));
  8605  0AD9  3006               	movlw	6
  8606  0ADA  0020               	movlb	0	; select bank0
  8607  0ADB  00CD               	movwf	??_sen
  8608  0ADC  084D               	movf	??_sen,w
  8609  0ADD  00C4               	movwf	PROTOCOL_Print_TLV@type
  8610  0ADE  01C5               	clrf	PROTOCOL_Print_TLV@length
  8611  0ADF  01C6               	clrf	PROTOCOL_Print_TLV@pbuffer
  8612  0AE0  2B30               	goto	L12
  8613  0AE1                     l5031:	
  8614                           ;main.c: 254: }
  8615                           ;main.c: 255: } else {
  8616                           
  8617                           
  8618                           ;main.c: 256: status = i2c1_read(dev_addr, 0x07, &length, 1);
  8619  0AE1  0020               	movlb	0	; select bank0
  8620  0AE2  0855               	movf	sen@dev_addr,w
  8621  0AE3  00CD               	movwf	??_sen
  8622  0AE4  01CE               	clrf	??_sen+1
  8623  0AE5  084D               	movf	??_sen,w
  8624  0AE6  00B0               	movwf	i2c1_read@dev_addr
  8625  0AE7  084E               	movf	??_sen+1,w
  8626  0AE8  00B1               	movwf	i2c1_read@dev_addr+1
  8627  0AE9  3007               	movlw	7
  8628  0AEA  00CF               	movwf	??_sen+2
  8629  0AEB  084F               	movf	??_sen+2,w
  8630  0AEC  00B2               	movwf	i2c1_read@reg_addr
  8631  0AED  3053               	movlw	low sen@length
  8632  0AEE  00B3               	movwf	i2c1_read@pbuf
  8633  0AEF  3000               	movlw	high sen@length
  8634  0AF0  00B4               	movwf	i2c1_read@pbuf+1
  8635  0AF1  01B5               	clrf	i2c1_read@len
  8636  0AF2  0AB5               	incf	i2c1_read@len,f
  8637  0AF3  3188  208C  318A   	fcall	_i2c1_read
  8638  0AF6  0020               	movlb	0	; select bank0
  8639  0AF7  00D0               	movwf	??_sen+3
  8640  0AF8  0850               	movf	??_sen+3,w
  8641  0AF9  00D4               	movwf	sen@status
  8642                           
  8643                           ;main.c: 257: _delay((unsigned long)((100)*(32000000/4000000.0)));
  8644  0AFA  30A0               	movlw	160
  8645  0AFB                     u6827:	
  8646  0AFB  3200               	nop2
  8647  0AFC  0B89               	decfsz	9,f
  8648  0AFD  2AFB               	goto	u6827
  8649                           
  8650                           ;main.c: 258: if (status == 0) {
  8651  0AFE  0020               	movlb	0	; select bank0
  8652  0AFF  0854               	movf	sen@status,w
  8653  0B00  1D03               	btfss	3,2
  8654  0B01  2B33               	goto	l5045
  8655                           
  8656                           ;main.c: 259: status = i2c1_read(dev_addr, 0x07, read_buf, length);
  8657  0B02  0855               	movf	sen@dev_addr,w
  8658  0B03  00CD               	movwf	??_sen
  8659  0B04  01CE               	clrf	??_sen+1
  8660  0B05  084D               	movf	??_sen,w
  8661  0B06  00B0               	movwf	i2c1_read@dev_addr
  8662  0B07  084E               	movf	??_sen+1,w
  8663  0B08  00B1               	movwf	i2c1_read@dev_addr+1
  8664  0B09  3007               	movlw	7
  8665  0B0A  00CF               	movwf	??_sen+2
  8666  0B0B  084F               	movf	??_sen+2,w
  8667  0B0C  00B2               	movwf	i2c1_read@reg_addr
  8668  0B0D  30CC               	movlw	low _read_buf
  8669  0B0E  00B3               	movwf	i2c1_read@pbuf
  8670  0B0F  3001               	movlw	high _read_buf
  8671  0B10  00B4               	movwf	i2c1_read@pbuf+1
  8672  0B11  0853               	movf	sen@length,w
  8673  0B12  00D0               	movwf	??_sen+3
  8674  0B13  0850               	movf	??_sen+3,w
  8675  0B14  00B5               	movwf	i2c1_read@len
  8676  0B15  3188  208C  318A   	fcall	_i2c1_read
  8677  0B18  0020               	movlb	0	; select bank0
  8678  0B19  00D1               	movwf	??_sen+4
  8679  0B1A  0851               	movf	??_sen+4,w
  8680  0B1B  00D4               	movwf	sen@status
  8681                           
  8682                           ;main.c: 260: _delay((unsigned long)((100)*(32000000/4000000.0)));
  8683  0B1C  30A0               	movlw	160
  8684  0B1D                     u6837:	
  8685  0B1D  3200               	nop2
  8686  0B1E  0B89               	decfsz	9,f
  8687  0B1F  2B1D               	goto	u6837
  8688                           
  8689                           ;main.c: 261: if (status == 0) {
  8690  0B20  0020               	movlb	0	; select bank0
  8691  0B21  0854               	movf	sen@status,w
  8692  0B22  1D03               	btfss	3,2
  8693  0B23  2B33               	goto	l5045
  8694                           
  8695                           ;main.c: 262: PROTOCOL_Print_TLV(dev_addr, type, length, read_buf);
  8696  0B24  0852               	movf	sen@type,w
  8697  0B25  00CD               	movwf	??_sen
  8698  0B26  084D               	movf	??_sen,w
  8699  0B27  00C4               	movwf	PROTOCOL_Print_TLV@type
  8700  0B28  0853               	movf	sen@length,w
  8701  0B29  00CE               	movwf	??_sen+1
  8702  0B2A  084E               	movf	??_sen+1,w
  8703  0B2B  00C5               	movwf	PROTOCOL_Print_TLV@length
  8704  0B2C  30CC               	movlw	(low (_read_buf| (0+256)))& (0+255)
  8705  0B2D  00CF               	movwf	??_sen+2
  8706  0B2E  084F               	movf	??_sen+2,w
  8707  0B2F  00C6               	movwf	PROTOCOL_Print_TLV@pbuffer
  8708  0B30                     L12:	
  8709  0B30  0855               	movf	sen@dev_addr,w
  8710  0B31  3180  20B4         	fcall	_PROTOCOL_Print_TLV
  8711  0B33                     l5045:	
  8712                           
  8713                           ;main.c: 263: }
  8714                           ;main.c: 264: }
  8715                           ;main.c: 265: }
  8716                           ;main.c: 266: }
  8717                           ;main.c: 267: return status;
  8718  0B33  0020               	movlb	0	; select bank0
  8719  0B34  0854               	movf	sen@status,w
  8720  0B35  0008               	return
  8721  0B36                     __end_of_sen:	
  8722                           
  8723                           	psect	text37
  8724  143D                     __ptext37:	
  8725 ;; *************** function _i2c1_write_no_data *****************
  8726 ;; Defined at:
  8727 ;;		line 49 in file "i2c1_util.c"
  8728 ;; Parameters:    Size  Location     Type
  8729 ;;  dev_addr        2   14[BANK0 ] unsigned int 
  8730 ;;  reg_addr        1   16[BANK0 ] unsigned char 
  8731 ;; Auto vars:     Size  Location     Type
  8732 ;;  status          1   20[BANK0 ] enum E3078
  8733 ;;  buf             1   19[BANK0 ] unsigned char [1]
  8734 ;;  write_status    1   18[BANK0 ] unsigned char 
  8735 ;; Return value:  Size  Location     Type
  8736 ;;                  1    wreg      unsigned char 
  8737 ;; Registers used:
  8738 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8739 ;; Tracked objects:
  8740 ;;		On entry : 0/0
  8741 ;;		On exit  : 0/0
  8742 ;;		Unchanged: 0/0
  8743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8744 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8745 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8746 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8747 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8748 ;;Total ram usage:        7 bytes
  8749 ;; Hardware stack levels used:    1
  8750 ;; Hardware stack levels required when called:    5
  8751 ;; This function calls:
  8752 ;;		_I2C1_MasterWrite
  8753 ;; This function is called by:
  8754 ;;		_exec_remote_cmd
  8755 ;;		_check_plg
  8756 ;;		_sen
  8757 ;;		_one_shot_sen
  8758 ;;		_fetch
  8759 ;; This function uses a non-reentrant model
  8760 ;;
  8761                           
  8762                           
  8763                           ;psect for function _i2c1_write_no_data
  8764  143D                     _i2c1_write_no_data:	
  8765                           
  8766                           ;i2c1_util.c: 51: uint8_t buf[1];
  8767                           ;i2c1_util.c: 52: I2C1_MESSAGE_STATUS status;
  8768                           ;i2c1_util.c: 53: uint8_t write_status;
  8769                           ;i2c1_util.c: 54: buf[0] = reg_addr;
  8770                           
  8771                           ;incstack = 0
  8772                           ; Regs used in _i2c1_write_no_data: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8773  143D  0020               	movlb	0	; select bank0
  8774  143E  0830               	movf	i2c1_write_no_data@reg_addr,w
  8775  143F  00B1               	movwf	??_i2c1_write_no_data
  8776  1440  0831               	movf	??_i2c1_write_no_data,w
  8777  1441  00B3               	movwf	i2c1_write_no_data@buf
  8778                           
  8779                           ;i2c1_util.c: 55: _delay((unsigned long)((100)*(32000000/4000000.0)));
  8780  1442  30A0               	movlw	160
  8781  1443                     u6847:	
  8782  1443  3200               	nop2
  8783  1444  0B89               	decfsz	9,f
  8784  1445  2C43               	goto	u6847
  8785                           
  8786                           ;i2c1_util.c: 56: I2C1_MasterWrite(buf, 1, dev_addr, &status);
  8787  1446  0020               	movlb	0	; select bank0
  8788  1447  01A7               	clrf	I2C1_MasterWrite@length
  8789  1448  0AA7               	incf	I2C1_MasterWrite@length,f
  8790  1449  082F               	movf	i2c1_write_no_data@dev_addr+1,w
  8791  144A  00A9               	movwf	I2C1_MasterWrite@address+1
  8792  144B  082E               	movf	i2c1_write_no_data@dev_addr,w
  8793  144C  00A8               	movwf	I2C1_MasterWrite@address
  8794  144D  3034               	movlw	(low (i2c1_write_no_data@status| 0))& (0+255)
  8795  144E  00B1               	movwf	??_i2c1_write_no_data
  8796  144F  0831               	movf	??_i2c1_write_no_data,w
  8797  1450  00AA               	movwf	I2C1_MasterWrite@pflag
  8798  1451  3033               	movlw	(low (i2c1_write_no_data@buf| 0))& (0+255)
  8799  1452  3194  2413  3194   	fcall	_I2C1_MasterWrite
  8800  1455                     l3623:	
  8801                           ;i2c1_util.c: 57: while (status == I2C1_MESSAGE_PENDING) {_delay((unsigned long)((100)*(
      +                          32000000/4000000.0)));};
  8802                           
  8803  1455  3002               	movlw	2
  8804  1456  0020               	movlb	0	; select bank0
  8805  1457  0634               	xorwf	i2c1_write_no_data@status,w
  8806  1458  1D03               	btfss	3,2
  8807  1459  2C5F               	goto	l3625
  8808  145A  30A0               	movlw	160
  8809  145B                     u6857:	
  8810  145B  3200               	nop2
  8811  145C  0B89               	decfsz	9,f
  8812  145D  2C5B               	goto	u6857
  8813  145E  2C55               	goto	l3623
  8814  145F                     l3625:	
  8815                           
  8816                           ;i2c1_util.c: 58: if (status == I2C1_MESSAGE_COMPLETE) {
  8817  145F  0834               	movf	i2c1_write_no_data@status,w
  8818  1460  1D03               	btfss	3,2
  8819  1461  2C64               	goto	l652
  8820                           
  8821                           ;i2c1_util.c: 59: write_status = 0;
  8822  1462  01B2               	clrf	i2c1_write_no_data@write_status
  8823                           
  8824                           ;i2c1_util.c: 60: } else {
  8825  1463  2C66               	goto	l3629
  8826  1464                     l652:	
  8827                           
  8828                           ;i2c1_util.c: 61: write_status = 1;
  8829  1464  01B2               	clrf	i2c1_write_no_data@write_status
  8830  1465  0AB2               	incf	i2c1_write_no_data@write_status,f
  8831  1466                     l3629:	
  8832                           
  8833                           ;i2c1_util.c: 62: }
  8834                           ;i2c1_util.c: 63: return write_status;
  8835  1466  0832               	movf	i2c1_write_no_data@write_status,w
  8836  1467  0008               	return
  8837  1468                     __end_of_i2c1_write_no_data:	
  8838                           
  8839                           	psect	text38
  8840  088C                     __ptext38:	
  8841 ;; *************** function _i2c1_read *****************
  8842 ;; Defined at:
  8843 ;;		line 24 in file "i2c1_util.c"
  8844 ;; Parameters:    Size  Location     Type
  8845 ;;  dev_addr        2   16[BANK0 ] unsigned int 
  8846 ;;  reg_addr        1   18[BANK0 ] unsigned char 
  8847 ;;  pbuf            2   19[BANK0 ] PTR unsigned char 
  8848 ;;		 -> sen@length(1), sen@type(1), read_buf(16), exec_remote_cmd@data(1), 
  8849 ;;  len             1   21[BANK0 ] unsigned char 
  8850 ;; Auto vars:     Size  Location     Type
  8851 ;;  status          1   26[BANK0 ] enum E3078
  8852 ;;  reg             1   25[BANK0 ] unsigned char [1]
  8853 ;;  read_status     1   24[BANK0 ] unsigned char 
  8854 ;; Return value:  Size  Location     Type
  8855 ;;                  1    wreg      unsigned char 
  8856 ;; Registers used:
  8857 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8858 ;; Tracked objects:
  8859 ;;		On entry : 0/0
  8860 ;;		On exit  : 0/0
  8861 ;;		Unchanged: 0/0
  8862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8863 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8864 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8865 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8866 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8867 ;;Total ram usage:       11 bytes
  8868 ;; Hardware stack levels used:    1
  8869 ;; Hardware stack levels required when called:    5
  8870 ;; This function calls:
  8871 ;;		_I2C1_MasterRead
  8872 ;;		_I2C1_MasterWrite
  8873 ;; This function is called by:
  8874 ;;		_exec_remote_cmd
  8875 ;;		_scan_dev
  8876 ;;		_sen
  8877 ;; This function uses a non-reentrant model
  8878 ;;
  8879                           
  8880                           
  8881                           ;psect for function _i2c1_read
  8882  088C                     _i2c1_read:	
  8883                           
  8884                           ;i2c1_util.c: 26: uint8_t reg[1];
  8885                           ;i2c1_util.c: 27: I2C1_MESSAGE_STATUS status;
  8886                           ;i2c1_util.c: 28: uint8_t read_status;
  8887                           ;i2c1_util.c: 29: reg[0] = reg_addr;
  8888                           
  8889                           ;incstack = 0
  8890                           ; Regs used in _i2c1_read: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8891  088C  0020               	movlb	0	; select bank0
  8892  088D  0832               	movf	i2c1_read@reg_addr,w
  8893  088E  00B6               	movwf	??_i2c1_read
  8894  088F  0836               	movf	??_i2c1_read,w
  8895  0890  00B9               	movwf	i2c1_read@reg
  8896                           
  8897                           ;i2c1_util.c: 30: _delay((unsigned long)((100)*(32000000/4000000.0)));
  8898  0891  30A0               	movlw	160
  8899  0892                     u6867:	
  8900  0892  3200               	nop2
  8901  0893  0B89               	decfsz	9,f
  8902  0894  2892               	goto	u6867
  8903                           
  8904                           ;i2c1_util.c: 31: I2C1_MasterWrite(reg, 1, dev_addr, &status);
  8905  0895  0020               	movlb	0	; select bank0
  8906  0896  01A7               	clrf	I2C1_MasterWrite@length
  8907  0897  0AA7               	incf	I2C1_MasterWrite@length,f
  8908  0898  0831               	movf	i2c1_read@dev_addr+1,w
  8909  0899  00A9               	movwf	I2C1_MasterWrite@address+1
  8910  089A  0830               	movf	i2c1_read@dev_addr,w
  8911  089B  00A8               	movwf	I2C1_MasterWrite@address
  8912  089C  303A               	movlw	(low (i2c1_read@status| 0))& (0+255)
  8913  089D  00B6               	movwf	??_i2c1_read
  8914  089E  0836               	movf	??_i2c1_read,w
  8915  089F  00AA               	movwf	I2C1_MasterWrite@pflag
  8916  08A0  3039               	movlw	(low (i2c1_read@reg| 0))& (0+255)
  8917  08A1  3194  2413  3188   	fcall	_I2C1_MasterWrite
  8918  08A4                     l3595:	
  8919                           ;i2c1_util.c: 32: while (status == I2C1_MESSAGE_PENDING) {_delay((unsigned long)((100)*(
      +                          32000000/4000000.0)));};
  8920                           
  8921  08A4  3002               	movlw	2
  8922  08A5  0020               	movlb	0	; select bank0
  8923  08A6  063A               	xorwf	i2c1_read@status,w
  8924  08A7  1D03               	btfss	3,2
  8925  08A8  28AE               	goto	l3597
  8926  08A9  30A0               	movlw	160
  8927  08AA                     u6877:	
  8928  08AA  3200               	nop2
  8929  08AB  0B89               	decfsz	9,f
  8930  08AC  28AA               	goto	u6877
  8931  08AD  28A4               	goto	l3595
  8932  08AE                     l3597:	
  8933                           
  8934                           ;i2c1_util.c: 33: if (status == I2C1_MESSAGE_COMPLETE) {
  8935  08AE  083A               	movf	i2c1_read@status,w
  8936  08AF  1D03               	btfss	3,2
  8937  08B0  28DD               	goto	l639
  8938                           
  8939                           ;i2c1_util.c: 34: _delay((unsigned long)((100)*(32000000/4000000.0)));
  8940  08B1  30A0               	movlw	160
  8941  08B2                     u6887:	
  8942  08B2  3200               	nop2
  8943  08B3  0B89               	decfsz	9,f
  8944  08B4  28B2               	goto	u6887
  8945                           
  8946                           ;i2c1_util.c: 35: I2C1_MasterRead(pbuf, len, dev_addr, &status);
  8947  08B5  0020               	movlb	0	; select bank0
  8948  08B6  0834               	movf	i2c1_read@pbuf+1,w
  8949  08B7  00A9               	movwf	I2C1_MasterRead@pdata+1
  8950  08B8  0833               	movf	i2c1_read@pbuf,w
  8951  08B9  00A8               	movwf	I2C1_MasterRead@pdata
  8952  08BA  0835               	movf	i2c1_read@len,w
  8953  08BB  00B6               	movwf	??_i2c1_read
  8954  08BC  0836               	movf	??_i2c1_read,w
  8955  08BD  00AA               	movwf	I2C1_MasterRead@length
  8956  08BE  0831               	movf	i2c1_read@dev_addr+1,w
  8957  08BF  00AC               	movwf	I2C1_MasterRead@address+1
  8958  08C0  0830               	movf	i2c1_read@dev_addr,w
  8959  08C1  00AB               	movwf	I2C1_MasterRead@address
  8960  08C2  303A               	movlw	(low (i2c1_read@status| 0))& (0+255)
  8961  08C3  00B7               	movwf	??_i2c1_read+1
  8962  08C4  0837               	movf	??_i2c1_read+1,w
  8963  08C5  00AD               	movwf	I2C1_MasterRead@pflag
  8964  08C6  3193  23C3  3188   	fcall	_I2C1_MasterRead
  8965  08C9                     l3605:	
  8966                           ;i2c1_util.c: 36: while (status == I2C1_MESSAGE_PENDING) {_delay((unsigned long)((100)*(
      +                          32000000/4000000.0)));};
  8967                           
  8968  08C9  3002               	movlw	2
  8969  08CA  0020               	movlb	0	; select bank0
  8970  08CB  063A               	xorwf	i2c1_read@status,w
  8971  08CC  1D03               	btfss	3,2
  8972  08CD  28D3               	goto	l3607
  8973  08CE  30A0               	movlw	160
  8974  08CF                     u6897:	
  8975  08CF  3200               	nop2
  8976  08D0  0B89               	decfsz	9,f
  8977  08D1  28CF               	goto	u6897
  8978  08D2  28C9               	goto	l3605
  8979  08D3                     l3607:	
  8980                           
  8981                           ;i2c1_util.c: 37: if (status == I2C1_MESSAGE_COMPLETE) {
  8982  08D3  083A               	movf	i2c1_read@status,w
  8983  08D4  1D03               	btfss	3,2
  8984  08D5  28D8               	goto	l3611
  8985                           
  8986                           ;i2c1_util.c: 38: read_status = 0;
  8987  08D6  01B8               	clrf	i2c1_read@read_status
  8988                           
  8989                           ;i2c1_util.c: 39: } else {
  8990  08D7  28DF               	goto	l3613
  8991  08D8                     l3611:	
  8992                           
  8993                           ;i2c1_util.c: 40: read_status = 2;
  8994  08D8  3002               	movlw	2
  8995  08D9  00B6               	movwf	??_i2c1_read
  8996  08DA  0836               	movf	??_i2c1_read,w
  8997  08DB  00B8               	movwf	i2c1_read@read_status
  8998                           
  8999                           ;i2c1_util.c: 41: }
  9000                           ;i2c1_util.c: 42: } else {
  9001  08DC  28DF               	goto	l3613
  9002  08DD                     l639:	
  9003                           
  9004                           ;i2c1_util.c: 43: read_status = 1;
  9005  08DD  01B8               	clrf	i2c1_read@read_status
  9006  08DE  0AB8               	incf	i2c1_read@read_status,f
  9007  08DF                     l3613:	
  9008                           
  9009                           ;i2c1_util.c: 44: }
  9010                           ;i2c1_util.c: 45: return read_status;
  9011  08DF  0838               	movf	i2c1_read@read_status,w
  9012  08E0  0008               	return
  9013  08E1                     __end_of_i2c1_read:	
  9014                           
  9015                           	psect	text39
  9016  1413                     __ptext39:	
  9017 ;; *************** function _I2C1_MasterWrite *****************
  9018 ;; Defined at:
  9019 ;;		line 598 in file "mcc_generated_files/i2c1.c"
  9020 ;; Parameters:    Size  Location     Type
  9021 ;;  pdata           1    wreg     PTR unsigned char 
  9022 ;;		 -> i2c1_write_no_data@buf(1), i2c1_read@reg(1), exec_remote_cmd@send_buf(50), 
  9023 ;;  length          1    7[BANK0 ] unsigned char 
  9024 ;;  address         2    8[BANK0 ] unsigned int 
  9025 ;;  pflag           1   10[BANK0 ] PTR enum E2972
  9026 ;;		 -> i2c1_write_no_data@status(1), i2c1_read@status(1), i2c1_write@status(1), 
  9027 ;; Auto vars:     Size  Location     Type
  9028 ;;  pdata           1   13[BANK0 ] PTR unsigned char 
  9029 ;;		 -> i2c1_write_no_data@buf(1), i2c1_read@reg(1), exec_remote_cmd@send_buf(50), 
  9030 ;; Return value:  Size  Location     Type
  9031 ;;                  1    wreg      void 
  9032 ;; Registers used:
  9033 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9034 ;; Tracked objects:
  9035 ;;		On entry : 0/0
  9036 ;;		On exit  : 0/0
  9037 ;;		Unchanged: 0/0
  9038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9039 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9040 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9041 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9042 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9043 ;;Total ram usage:        7 bytes
  9044 ;; Hardware stack levels used:    1
  9045 ;; Hardware stack levels required when called:    4
  9046 ;; This function calls:
  9047 ;;		_I2C1_MasterTRBInsert
  9048 ;;		_I2C1_MasterWriteTRBBuild
  9049 ;; This function is called by:
  9050 ;;		_i2c1_write
  9051 ;;		_i2c1_read
  9052 ;;		_i2c1_write_no_data
  9053 ;; This function uses a non-reentrant model
  9054 ;;
  9055                           
  9056                           
  9057                           ;psect for function _I2C1_MasterWrite
  9058  1413                     _I2C1_MasterWrite:	
  9059                           
  9060                           ;incstack = 0
  9061                           ; Regs used in _I2C1_MasterWrite: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9062                           ;I2C1_MasterWrite@pdata stored from wreg
  9063  1413  0020               	movlb	0	; select bank0
  9064  1414  00AD               	movwf	I2C1_MasterWrite@pdata
  9065                           
  9066                           ;i2c1.c: 604: static I2C1_TRANSACTION_REQUEST_BLOCK trBlock;
  9067                           ;i2c1.c: 607: if (i2c1_object.trStatus.s.full != 1)
  9068  1415  0021               	movlb	1	; select bank1
  9069  1416  185B               	btfsc	(_i2c1_object^(0+128)+2),0
  9070  1417  2C36               	goto	l3357
  9071                           
  9072                           ;i2c1.c: 608: {
  9073                           ;i2c1.c: 609: I2C1_MasterWriteTRBBuild(&trBlock, pdata, length, address);
  9074  1418  0020               	movlb	0	; select bank0
  9075  1419  082D               	movf	I2C1_MasterWrite@pdata,w
  9076  141A  00AB               	movwf	??_I2C1_MasterWrite
  9077  141B  082B               	movf	??_I2C1_MasterWrite,w
  9078  141C  00A0               	movwf	I2C1_MasterWriteTRBBuild@pdata
  9079  141D  0827               	movf	I2C1_MasterWrite@length,w
  9080  141E  00AC               	movwf	??_I2C1_MasterWrite+1
  9081  141F  082C               	movf	??_I2C1_MasterWrite+1,w
  9082  1420  00A1               	movwf	I2C1_MasterWriteTRBBuild@length
  9083  1421  0829               	movf	I2C1_MasterWrite@address+1,w
  9084  1422  00A3               	movwf	I2C1_MasterWriteTRBBuild@address+1
  9085  1423  0828               	movf	I2C1_MasterWrite@address,w
  9086  1424  00A2               	movwf	I2C1_MasterWriteTRBBuild@address
  9087  1425  3051               	movlw	(low (I2C1_MasterWrite@trBlock| (0+256)))& (0+255)
  9088  1426  3193  237B  3194   	fcall	_I2C1_MasterWriteTRBBuild
  9089                           
  9090                           ;i2c1.c: 610: I2C1_MasterTRBInsert(1, &trBlock, pflag);
  9091  1429  3051               	movlw	(low (I2C1_MasterWrite@trBlock| (0+256)))& (0+255)
  9092  142A  0020               	movlb	0	; select bank0
  9093  142B  00AB               	movwf	??_I2C1_MasterWrite
  9094  142C  082B               	movf	??_I2C1_MasterWrite,w
  9095  142D  00A0               	movwf	I2C1_MasterTRBInsert@ptrb_list
  9096  142E  082A               	movf	I2C1_MasterWrite@pflag,w
  9097  142F  00AC               	movwf	??_I2C1_MasterWrite+1
  9098  1430  082C               	movf	??_I2C1_MasterWrite+1,w
  9099  1431  00A1               	movwf	I2C1_MasterTRBInsert@pflag
  9100  1432  3001               	movlw	1
  9101  1433  3188  20E1         	fcall	_I2C1_MasterTRBInsert
  9102                           
  9103                           ;i2c1.c: 611: }
  9104  1435  0008               	return
  9105  1436                     l3357:	
  9106                           
  9107                           ;i2c1.c: 612: else
  9108                           ;i2c1.c: 613: {
  9109                           ;i2c1.c: 614: *pflag = I2C1_MESSAGE_FAIL;
  9110  1436  0020               	movlb	0	; select bank0
  9111  1437  082A               	movf	I2C1_MasterWrite@pflag,w
  9112  1438  0086               	movwf	6
  9113  1439  0187               	clrf	7
  9114  143A  0181               	clrf	1
  9115  143B  0A81               	incf	1,f
  9116  143C  0008               	return
  9117  143D                     __end_of_I2C1_MasterWrite:	
  9118                           
  9119                           	psect	text40
  9120  137B                     __ptext40:	
  9121 ;; *************** function _I2C1_MasterWriteTRBBuild *****************
  9122 ;; Defined at:
  9123 ;;		line 707 in file "mcc_generated_files/i2c1.c"
  9124 ;; Parameters:    Size  Location     Type
  9125 ;;  ptrb            1    wreg     PTR struct .
  9126 ;;		 -> I2C1_MasterWrite@trBlock(5), 
  9127 ;;  pdata           1    0[BANK0 ] PTR unsigned char 
  9128 ;;		 -> i2c1_write_no_data@buf(1), i2c1_read@reg(1), exec_remote_cmd@send_buf(50), 
  9129 ;;  length          1    1[BANK0 ] unsigned char 
  9130 ;;  address         2    2[BANK0 ] unsigned int 
  9131 ;; Auto vars:     Size  Location     Type
  9132 ;;  ptrb            1    6[BANK0 ] PTR struct .
  9133 ;;		 -> I2C1_MasterWrite@trBlock(5), 
  9134 ;; Return value:  Size  Location     Type
  9135 ;;                  1    wreg      void 
  9136 ;; Registers used:
  9137 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9138 ;; Tracked objects:
  9139 ;;		On entry : 0/0
  9140 ;;		On exit  : 0/0
  9141 ;;		Unchanged: 0/0
  9142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9143 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9144 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9145 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9146 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9147 ;;Total ram usage:        7 bytes
  9148 ;; Hardware stack levels used:    1
  9149 ;; Hardware stack levels required when called:    3
  9150 ;; This function calls:
  9151 ;;		Nothing
  9152 ;; This function is called by:
  9153 ;;		_I2C1_MasterWrite
  9154 ;; This function uses a non-reentrant model
  9155 ;;
  9156                           
  9157                           
  9158                           ;psect for function _I2C1_MasterWriteTRBBuild
  9159  137B                     _I2C1_MasterWriteTRBBuild:	
  9160                           
  9161                           ;incstack = 0
  9162                           ; Regs used in _I2C1_MasterWriteTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
  9163                           ;I2C1_MasterWriteTRBBuild@ptrb stored from wreg
  9164  137B  0020               	movlb	0	; select bank0
  9165  137C  00A6               	movwf	I2C1_MasterWriteTRBBuild@ptrb
  9166                           
  9167                           ;i2c1.c: 713: ptrb->address = address << 1;
  9168  137D  0823               	movf	I2C1_MasterWriteTRBBuild@address+1,w
  9169  137E  00A5               	movwf	??_I2C1_MasterWriteTRBBuild+1
  9170  137F  0822               	movf	I2C1_MasterWriteTRBBuild@address,w
  9171  1380  00A4               	movwf	??_I2C1_MasterWriteTRBBuild
  9172  1381  35A4               	lslf	??_I2C1_MasterWriteTRBBuild,f
  9173  1382  0DA5               	rlf	??_I2C1_MasterWriteTRBBuild+1,f
  9174  1383  0826               	movf	I2C1_MasterWriteTRBBuild@ptrb,w
  9175  1384  0086               	movwf	6
  9176  1385  3001               	movlw	1	; select bank2/3
  9177  1386  0087               	movwf	7
  9178  1387  0824               	movf	??_I2C1_MasterWriteTRBBuild,w
  9179  1388  3FC0               	movwi [0]fsr1
  9180  1389  0825               	movf	??_I2C1_MasterWriteTRBBuild+1,w
  9181  138A  3FC1               	movwi [1]fsr1
  9182                           
  9183                           ;i2c1.c: 714: ptrb->length = length;
  9184  138B  0821               	movf	I2C1_MasterWriteTRBBuild@length,w
  9185  138C  00A4               	movwf	??_I2C1_MasterWriteTRBBuild
  9186  138D  0826               	movf	I2C1_MasterWriteTRBBuild@ptrb,w
  9187  138E  3E02               	addlw	2
  9188  138F  0086               	movwf	6
  9189  1390  3001               	movlw	1	; select bank2/3
  9190  1391  0087               	movwf	7
  9191  1392  0824               	movf	??_I2C1_MasterWriteTRBBuild,w
  9192  1393  0081               	movwf	1
  9193                           
  9194                           ;i2c1.c: 715: ptrb->pbuffer = pdata;
  9195  1394  0826               	movf	I2C1_MasterWriteTRBBuild@ptrb,w
  9196  1395  3E03               	addlw	3
  9197  1396  0086               	movwf	6
  9198  1397  3001               	movlw	1	; select bank2/3
  9199  1398  0087               	movwf	7
  9200  1399  0820               	movf	I2C1_MasterWriteTRBBuild@pdata,w
  9201  139A  3FC0               	movwi [0]fsr1
  9202  139B  3000               	movlw	0
  9203  139C  3FC1               	movwi [1]fsr1
  9204  139D  0008               	return
  9205  139E                     __end_of_I2C1_MasterWriteTRBBuild:	
  9206                           
  9207                           	psect	text41
  9208  13C3                     __ptext41:	
  9209 ;; *************** function _I2C1_MasterRead *****************
  9210 ;; Defined at:
  9211 ;;		line 619 in file "mcc_generated_files/i2c1.c"
  9212 ;; Parameters:    Size  Location     Type
  9213 ;;  pdata           2    8[BANK0 ] PTR unsigned char 
  9214 ;;		 -> sen@length(1), sen@type(1), read_buf(16), exec_remote_cmd@data(1), 
  9215 ;;  length          1   10[BANK0 ] unsigned char 
  9216 ;;  address         2   11[BANK0 ] unsigned int 
  9217 ;;  pflag           1   13[BANK0 ] PTR enum E2972
  9218 ;;		 -> i2c1_read@status(1), 
  9219 ;; Auto vars:     Size  Location     Type
  9220 ;;		None
  9221 ;; Return value:  Size  Location     Type
  9222 ;;                  1    wreg      void 
  9223 ;; Registers used:
  9224 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9225 ;; Tracked objects:
  9226 ;;		On entry : 0/0
  9227 ;;		On exit  : 0/0
  9228 ;;		Unchanged: 0/0
  9229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9230 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9232 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9233 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9234 ;;Total ram usage:        8 bytes
  9235 ;; Hardware stack levels used:    1
  9236 ;; Hardware stack levels required when called:    4
  9237 ;; This function calls:
  9238 ;;		_I2C1_MasterReadTRBBuild
  9239 ;;		_I2C1_MasterTRBInsert
  9240 ;; This function is called by:
  9241 ;;		_i2c1_read
  9242 ;; This function uses a non-reentrant model
  9243 ;;
  9244                           
  9245                           
  9246                           ;psect for function _I2C1_MasterRead
  9247  13C3                     _I2C1_MasterRead:	
  9248                           
  9249                           ;i2c1.c: 625: static I2C1_TRANSACTION_REQUEST_BLOCK trBlock;
  9250                           ;i2c1.c: 629: if (i2c1_object.trStatus.s.full != 1)
  9251                           
  9252                           ;incstack = 0
  9253                           ; Regs used in _I2C1_MasterRead: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9254  13C3  0021               	movlb	1	; select bank1
  9255  13C4  185B               	btfsc	(_i2c1_object^(0+128)+2),0
  9256  13C5  2BE4               	goto	l3363
  9257                           
  9258                           ;i2c1.c: 630: {
  9259                           ;i2c1.c: 631: I2C1_MasterReadTRBBuild(&trBlock, pdata, length, address);
  9260  13C6  0020               	movlb	0	; select bank0
  9261  13C7  0829               	movf	I2C1_MasterRead@pdata+1,w
  9262  13C8  00A1               	movwf	I2C1_MasterReadTRBBuild@pdata+1
  9263  13C9  0828               	movf	I2C1_MasterRead@pdata,w
  9264  13CA  00A0               	movwf	I2C1_MasterReadTRBBuild@pdata
  9265  13CB  082A               	movf	I2C1_MasterRead@length,w
  9266  13CC  00AE               	movwf	??_I2C1_MasterRead
  9267  13CD  082E               	movf	??_I2C1_MasterRead,w
  9268  13CE  00A2               	movwf	I2C1_MasterReadTRBBuild@length
  9269  13CF  082C               	movf	I2C1_MasterRead@address+1,w
  9270  13D0  00A4               	movwf	I2C1_MasterReadTRBBuild@address+1
  9271  13D1  082B               	movf	I2C1_MasterRead@address,w
  9272  13D2  00A3               	movwf	I2C1_MasterReadTRBBuild@address
  9273  13D3  304C               	movlw	(low (I2C1_MasterRead@trBlock| (0+256)))& (0+255)
  9274  13D4  3194  2468  3193   	fcall	_I2C1_MasterReadTRBBuild
  9275                           
  9276                           ;i2c1.c: 632: I2C1_MasterTRBInsert(1, &trBlock, pflag);
  9277  13D7  304C               	movlw	(low (I2C1_MasterRead@trBlock| (0+256)))& (0+255)
  9278  13D8  0020               	movlb	0	; select bank0
  9279  13D9  00AE               	movwf	??_I2C1_MasterRead
  9280  13DA  082E               	movf	??_I2C1_MasterRead,w
  9281  13DB  00A0               	movwf	I2C1_MasterTRBInsert@ptrb_list
  9282  13DC  082D               	movf	I2C1_MasterRead@pflag,w
  9283  13DD  00AF               	movwf	??_I2C1_MasterRead+1
  9284  13DE  082F               	movf	??_I2C1_MasterRead+1,w
  9285  13DF  00A1               	movwf	I2C1_MasterTRBInsert@pflag
  9286  13E0  3001               	movlw	1
  9287  13E1  3188  20E1         	fcall	_I2C1_MasterTRBInsert
  9288                           
  9289                           ;i2c1.c: 633: }
  9290  13E3  0008               	return
  9291  13E4                     l3363:	
  9292                           
  9293                           ;i2c1.c: 634: else
  9294                           ;i2c1.c: 635: {
  9295                           ;i2c1.c: 636: *pflag = I2C1_MESSAGE_FAIL;
  9296  13E4  0020               	movlb	0	; select bank0
  9297  13E5  082D               	movf	I2C1_MasterRead@pflag,w
  9298  13E6  0086               	movwf	6
  9299  13E7  0187               	clrf	7
  9300  13E8  0181               	clrf	1
  9301  13E9  0A81               	incf	1,f
  9302  13EA  0008               	return
  9303  13EB                     __end_of_I2C1_MasterRead:	
  9304                           
  9305                           	psect	text42
  9306  08E1                     __ptext42:	
  9307 ;; *************** function _I2C1_MasterTRBInsert *****************
  9308 ;; Defined at:
  9309 ;;		line 641 in file "mcc_generated_files/i2c1.c"
  9310 ;; Parameters:    Size  Location     Type
  9311 ;;  count           1    wreg     unsigned char 
  9312 ;;  ptrb_list       1    0[BANK0 ] PTR struct .
  9313 ;;		 -> I2C1_MasterRead@trBlock(5), I2C1_MasterWrite@trBlock(5), 
  9314 ;;  pflag           1    1[BANK0 ] PTR enum E2972
  9315 ;;		 -> i2c1_write_no_data@status(1), i2c1_read@status(1), i2c1_write@status(1), 
  9316 ;; Auto vars:     Size  Location     Type
  9317 ;;  count           1    3[BANK0 ] unsigned char 
  9318 ;; Return value:  Size  Location     Type
  9319 ;;                  1    wreg      void 
  9320 ;; Registers used:
  9321 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9322 ;; Tracked objects:
  9323 ;;		On entry : 0/0
  9324 ;;		On exit  : 0/0
  9325 ;;		Unchanged: 0/0
  9326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9327 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9328 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9329 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9330 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9331 ;;Total ram usage:        4 bytes
  9332 ;; Hardware stack levels used:    1
  9333 ;; Hardware stack levels required when called:    3
  9334 ;; This function calls:
  9335 ;;		Nothing
  9336 ;; This function is called by:
  9337 ;;		_I2C1_MasterWrite
  9338 ;;		_I2C1_MasterRead
  9339 ;; This function uses a non-reentrant model
  9340 ;;
  9341                           
  9342                           
  9343                           ;psect for function _I2C1_MasterTRBInsert
  9344  08E1                     _I2C1_MasterTRBInsert:	
  9345                           
  9346                           ;incstack = 0
  9347                           ; Regs used in _I2C1_MasterTRBInsert: [wreg+fsr1l+fsr1h+status,2+status,0]
  9348                           ;I2C1_MasterTRBInsert@count stored from wreg
  9349  08E1  0020               	movlb	0	; select bank0
  9350  08E2  00A3               	movwf	I2C1_MasterTRBInsert@count
  9351                           
  9352                           ;i2c1.c: 648: if (i2c1_object.trStatus.s.full != 1)
  9353  08E3  0021               	movlb	1	; select bank1
  9354  08E4  185B               	btfsc	(_i2c1_object^(0+128)+2),0
  9355  08E5  2923               	goto	l3267
  9356                           
  9357                           ;i2c1.c: 649: {
  9358                           ;i2c1.c: 650: *pflag = I2C1_MESSAGE_PENDING;
  9359  08E6  3002               	movlw	2
  9360  08E7  0020               	movlb	0	; select bank0
  9361  08E8  00A2               	movwf	??_I2C1_MasterTRBInsert
  9362  08E9  0821               	movf	I2C1_MasterTRBInsert@pflag,w
  9363  08EA  0086               	movwf	6
  9364  08EB  0187               	clrf	7
  9365  08EC  0822               	movf	??_I2C1_MasterTRBInsert,w
  9366  08ED  0081               	movwf	1
  9367                           
  9368                           ;i2c1.c: 652: i2c1_object.pTrTail->ptrb_list = ptrb_list;
  9369  08EE  0820               	movf	I2C1_MasterTRBInsert@ptrb_list,w
  9370  08EF  00A2               	movwf	??_I2C1_MasterTRBInsert
  9371  08F0  0021               	movlb	1	; select bank1
  9372  08F1  0A59               	incf	_i2c1_object^(0+128),w
  9373  08F2  0086               	movwf	6
  9374  08F3  3001               	movlw	1	; select bank2/3
  9375  08F4  0087               	movwf	7
  9376  08F5  0020               	movlb	0	; select bank0
  9377  08F6  0822               	movf	??_I2C1_MasterTRBInsert,w
  9378  08F7  0081               	movwf	1
  9379                           
  9380                           ;i2c1.c: 653: i2c1_object.pTrTail->count = count;
  9381  08F8  0823               	movf	I2C1_MasterTRBInsert@count,w
  9382  08F9  00A2               	movwf	??_I2C1_MasterTRBInsert
  9383  08FA  0021               	movlb	1	; select bank1
  9384  08FB  0859               	movf	_i2c1_object^(0+128),w
  9385  08FC  0086               	movwf	6
  9386  08FD  3001               	movlw	1	; select bank2/3
  9387  08FE  0087               	movwf	7
  9388  08FF  0020               	movlb	0	; select bank0
  9389  0900  0822               	movf	??_I2C1_MasterTRBInsert,w
  9390  0901  0081               	movwf	1
  9391                           
  9392                           ;i2c1.c: 654: i2c1_object.pTrTail->pTrFlag = pflag;
  9393  0902  0821               	movf	I2C1_MasterTRBInsert@pflag,w
  9394  0903  00A2               	movwf	??_I2C1_MasterTRBInsert
  9395  0904  0021               	movlb	1	; select bank1
  9396  0905  0859               	movf	_i2c1_object^(0+128),w
  9397  0906  3E02               	addlw	2
  9398  0907  0086               	movwf	6
  9399  0908  3001               	movlw	1	; select bank2/3
  9400  0909  0087               	movwf	7
  9401  090A  0020               	movlb	0	; select bank0
  9402  090B  0822               	movf	??_I2C1_MasterTRBInsert,w
  9403  090C  0081               	movwf	1
  9404                           
  9405                           ;i2c1.c: 655: i2c1_object.pTrTail++;
  9406  090D  3003               	movlw	3
  9407  090E  00A2               	movwf	??_I2C1_MasterTRBInsert
  9408  090F  0822               	movf	??_I2C1_MasterTRBInsert,w
  9409  0910  0021               	movlb	1	; select bank1
  9410  0911  07D9               	addwf	_i2c1_object^(0+128),f
  9411                           
  9412                           ;i2c1.c: 658: if (i2c1_object.pTrTail == (i2c1_tr_queue + 1))
  9413  0912  0859               	movf	_i2c1_object^(0+128),w
  9414  0913  3A5C               	xorlw	(low ((_i2c1_tr_queue| (0+256)+3)))& (0+255)
  9415  0914  1D03               	skipz
  9416  0915  291C               	goto	l3263
  9417                           
  9418                           ;i2c1.c: 659: {
  9419                           ;i2c1.c: 661: i2c1_object.pTrTail = i2c1_tr_queue;
  9420  0916  3059               	movlw	(low (_i2c1_tr_queue| (0+256)))& (0+255)
  9421  0917  0020               	movlb	0	; select bank0
  9422  0918  00A2               	movwf	??_I2C1_MasterTRBInsert
  9423  0919  0822               	movf	??_I2C1_MasterTRBInsert,w
  9424  091A  0021               	movlb	1	; select bank1
  9425  091B  00D9               	movwf	_i2c1_object^(0+128)
  9426  091C                     l3263:	
  9427                           
  9428                           ;i2c1.c: 662: }
  9429                           ;i2c1.c: 666: i2c1_object.trStatus.s.empty = 0;
  9430  091C  10DB               	bcf	(_i2c1_object^(0+128)+2),1
  9431                           
  9432                           ;i2c1.c: 669: if (i2c1_object.pTrHead == i2c1_object.pTrTail)
  9433  091D  085A               	movf	(low ((_i2c1_object| 0+1)))^(0+128),w
  9434  091E  0659               	xorwf	_i2c1_object^(0+128),w
  9435  091F  1D03               	skipz
  9436  0920  2929               	goto	l3269
  9437                           
  9438                           ;i2c1.c: 670: {
  9439                           ;i2c1.c: 672: i2c1_object.trStatus.s.full = 1;
  9440  0921  145B               	bsf	(_i2c1_object^(0+128)+2),0
  9441                           
  9442                           ;i2c1.c: 673: }
  9443                           ;i2c1.c: 675: }
  9444  0922  2929               	goto	l3269
  9445  0923                     l3267:	
  9446                           
  9447                           ;i2c1.c: 676: else
  9448                           ;i2c1.c: 677: {
  9449                           ;i2c1.c: 678: *pflag = I2C1_MESSAGE_FAIL;
  9450  0923  0020               	movlb	0	; select bank0
  9451  0924  0821               	movf	I2C1_MasterTRBInsert@pflag,w
  9452  0925  0086               	movwf	6
  9453  0926  0187               	clrf	7
  9454  0927  0181               	clrf	1
  9455  0928  0A81               	incf	1,f
  9456  0929                     l3269:	
  9457                           
  9458                           ;i2c1.c: 679: }
  9459                           ;i2c1.c: 682: if (*pflag == I2C1_MESSAGE_PENDING)
  9460  0929  0020               	movlb	0	; select bank0
  9461  092A  0821               	movf	I2C1_MasterTRBInsert@pflag,w
  9462  092B  0086               	movwf	6
  9463  092C  0187               	clrf	7
  9464  092D  3002               	movlw	2
  9465  092E  0601               	xorwf	1,w
  9466  092F  1D03               	btfss	3,2
  9467  0930  0008               	return
  9468  0931                     l3273:	
  9469                           ;i2c1.c: 683: {
  9470                           ;i2c1.c: 684: while(i2c1_state != S_MASTER_IDLE);
  9471                           
  9472  0931  0021               	movlb	1	; select bank1
  9473  0932  086B               	movf	_i2c1_state^(0+128),w
  9474  0933  1D03               	btfss	3,2
  9475  0934  2931               	goto	l3273
  9476                           
  9477                           ;i2c1.c: 685: {
  9478                           ;i2c1.c: 688: PIR1bits.SSP1IF = 1;
  9479  0935  0020               	movlb	0	; select bank0
  9480  0936  1591               	bsf	17,3	;volatile
  9481  0937  0008               	return
  9482  0938                     __end_of_I2C1_MasterTRBInsert:	
  9483                           
  9484                           	psect	text43
  9485  1468                     __ptext43:	
  9486 ;; *************** function _I2C1_MasterReadTRBBuild *****************
  9487 ;; Defined at:
  9488 ;;		line 694 in file "mcc_generated_files/i2c1.c"
  9489 ;; Parameters:    Size  Location     Type
  9490 ;;  ptrb            1    wreg     PTR struct .
  9491 ;;		 -> I2C1_MasterRead@trBlock(5), 
  9492 ;;  pdata           2    0[BANK0 ] PTR unsigned char 
  9493 ;;		 -> sen@length(1), sen@type(1), read_buf(16), exec_remote_cmd@data(1), 
  9494 ;;  length          1    2[BANK0 ] unsigned char 
  9495 ;;  address         2    3[BANK0 ] unsigned int 
  9496 ;; Auto vars:     Size  Location     Type
  9497 ;;  ptrb            1    7[BANK0 ] PTR struct .
  9498 ;;		 -> I2C1_MasterRead@trBlock(5), 
  9499 ;; Return value:  Size  Location     Type
  9500 ;;                  1    wreg      void 
  9501 ;; Registers used:
  9502 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9503 ;; Tracked objects:
  9504 ;;		On entry : 0/0
  9505 ;;		On exit  : 0/0
  9506 ;;		Unchanged: 0/0
  9507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9508 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9509 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9510 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9511 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9512 ;;Total ram usage:        8 bytes
  9513 ;; Hardware stack levels used:    1
  9514 ;; Hardware stack levels required when called:    3
  9515 ;; This function calls:
  9516 ;;		Nothing
  9517 ;; This function is called by:
  9518 ;;		_I2C1_MasterRead
  9519 ;; This function uses a non-reentrant model
  9520 ;;
  9521                           
  9522                           
  9523                           ;psect for function _I2C1_MasterReadTRBBuild
  9524  1468                     _I2C1_MasterReadTRBBuild:	
  9525                           
  9526                           ;incstack = 0
  9527                           ; Regs used in _I2C1_MasterReadTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
  9528                           ;I2C1_MasterReadTRBBuild@ptrb stored from wreg
  9529  1468  0020               	movlb	0	; select bank0
  9530  1469  00A7               	movwf	I2C1_MasterReadTRBBuild@ptrb
  9531                           
  9532                           ;i2c1.c: 700: ptrb->address = address << 1;
  9533  146A  0824               	movf	I2C1_MasterReadTRBBuild@address+1,w
  9534  146B  00A6               	movwf	??_I2C1_MasterReadTRBBuild+1
  9535  146C  0823               	movf	I2C1_MasterReadTRBBuild@address,w
  9536  146D  00A5               	movwf	??_I2C1_MasterReadTRBBuild
  9537  146E  35A5               	lslf	??_I2C1_MasterReadTRBBuild,f
  9538  146F  0DA6               	rlf	??_I2C1_MasterReadTRBBuild+1,f
  9539  1470  0827               	movf	I2C1_MasterReadTRBBuild@ptrb,w
  9540  1471  0086               	movwf	6
  9541  1472  3001               	movlw	1	; select bank2/3
  9542  1473  0087               	movwf	7
  9543  1474  0825               	movf	??_I2C1_MasterReadTRBBuild,w
  9544  1475  3FC0               	movwi [0]fsr1
  9545  1476  0826               	movf	??_I2C1_MasterReadTRBBuild+1,w
  9546  1477  3FC1               	movwi [1]fsr1
  9547                           
  9548                           ;i2c1.c: 702: ptrb->address |= 0x01;
  9549  1478  0827               	movf	I2C1_MasterReadTRBBuild@ptrb,w
  9550  1479  0086               	movwf	6
  9551  147A  3001               	movlw	1	; select bank2/3
  9552  147B  0087               	movwf	7
  9553  147C  3001               	movlw	1
  9554  147D  0481               	iorwf	1,f
  9555  147E  3141               	addfsr 1,1
  9556  147F  3000               	movlw	0
  9557  1480  0481               	iorwf	1,f
  9558                           
  9559                           ;i2c1.c: 703: ptrb->length = length;
  9560  1481  0822               	movf	I2C1_MasterReadTRBBuild@length,w
  9561  1482  00A5               	movwf	??_I2C1_MasterReadTRBBuild
  9562  1483  0827               	movf	I2C1_MasterReadTRBBuild@ptrb,w
  9563  1484  3E02               	addlw	2
  9564  1485  0086               	movwf	6
  9565  1486  3001               	movlw	1	; select bank2/3
  9566  1487  0087               	movwf	7
  9567  1488  0825               	movf	??_I2C1_MasterReadTRBBuild,w
  9568  1489  0081               	movwf	1
  9569                           
  9570                           ;i2c1.c: 704: ptrb->pbuffer = pdata;
  9571  148A  0827               	movf	I2C1_MasterReadTRBBuild@ptrb,w
  9572  148B  3E03               	addlw	3
  9573  148C  0086               	movwf	6
  9574  148D  3001               	movlw	1	; select bank2/3
  9575  148E  0087               	movwf	7
  9576  148F  0820               	movf	I2C1_MasterReadTRBBuild@pdata,w
  9577  1490  3FC0               	movwi [0]fsr1
  9578  1491  0821               	movf	I2C1_MasterReadTRBBuild@pdata+1,w
  9579  1492  3FC1               	movwi [1]fsr1
  9580  1493  0008               	return
  9581  1494                     __end_of_I2C1_MasterReadTRBBuild:	
  9582                           
  9583                           	psect	text44
  9584  00B4                     __ptext44:	
  9585 ;; *************** function _PROTOCOL_Print_TLV *****************
  9586 ;; Defined at:
  9587 ;;		line 224 in file "protocol.c"
  9588 ;; Parameters:    Size  Location     Type
  9589 ;;  dev_addr        1    wreg     unsigned char 
  9590 ;;  type            1   36[BANK0 ] unsigned char 
  9591 ;;  length          1   37[BANK0 ] unsigned char 
  9592 ;;  pbuffer         1   38[BANK0 ] PTR unsigned char 
  9593 ;;		 -> read_buf(16), NULL(0), 
  9594 ;; Auto vars:     Size  Location     Type
  9595 ;;  dev_addr        1   42[BANK0 ] unsigned char 
  9596 ;;  v               2   43[BANK0 ] int 
  9597 ;; Return value:  Size  Location     Type
  9598 ;;                  1    wreg      void 
  9599 ;; Registers used:
  9600 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9601 ;; Tracked objects:
  9602 ;;		On entry : 0/0
  9603 ;;		On exit  : 0/0
  9604 ;;		Unchanged: 0/0
  9605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9606 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9607 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9608 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9609 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9610 ;;Total ram usage:        9 bytes
  9611 ;; Hardware stack levels used:    1
  9612 ;; Hardware stack levels required when called:    6
  9613 ;; This function calls:
  9614 ;;		___awdiv
  9615 ;;		___awmod
  9616 ;;		_abs
  9617 ;;		_concat
  9618 ;;		_printf
  9619 ;; This function is called by:
  9620 ;;		_sen
  9621 ;; This function uses a non-reentrant model
  9622 ;;
  9623                           
  9624                           
  9625                           ;psect for function _PROTOCOL_Print_TLV
  9626  00B4                     _PROTOCOL_Print_TLV:	
  9627                           
  9628                           ;incstack = 0
  9629                           ; Regs used in _PROTOCOL_Print_TLV: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9630                           ;PROTOCOL_Print_TLV@dev_addr stored from wreg
  9631  00B4  0020               	movlb	0	; select bank0
  9632  00B5  00CA               	movwf	PROTOCOL_Print_TLV@dev_addr
  9633                           
  9634                           ;protocol.c: 225: int16_t v;
  9635                           ;protocol.c: 226: if (dev_addr != 0) printf("%%%d:", dev_addr);
  9636  00B6  084A               	movf	PROTOCOL_Print_TLV@dev_addr,w
  9637  00B7  1903               	btfsc	3,2
  9638  00B8  2B17               	goto	l5009
  9639  00B9  305E               	movlw	low (STR_52| (0+32768))
  9640  00BA  00AE               	movwf	printf@f
  9641  00BB  3091               	movlw	high (STR_52| (0+32768))
  9642  00BC  00AF               	movwf	printf@f+1
  9643  00BD  084A               	movf	PROTOCOL_Print_TLV@dev_addr,w
  9644  00BE  00C7               	movwf	??_PROTOCOL_Print_TLV
  9645  00BF  01C8               	clrf	??_PROTOCOL_Print_TLV+1
  9646  00C0  0847               	movf	??_PROTOCOL_Print_TLV,w
  9647  00C1  00B0               	movwf	?_printf+2
  9648  00C2  0848               	movf	??_PROTOCOL_Print_TLV+1,w
  9649  00C3  00B1               	movwf	?_printf+3
  9650  00C4  318E  262B  3180   	fcall	_printf
  9651                           
  9652                           ;protocol.c: 227: switch(type) {
  9653  00C7  2B17               	goto	l5009
  9654  00C8                     l4917:	
  9655                           ;protocol.c: 228: case 0x01:
  9656                           
  9657                           
  9658                           ;protocol.c: 229: length--;
  9659  00C8  3001               	movlw	1
  9660  00C9  0020               	movlb	0	; select bank0
  9661  00CA  02C5               	subwf	PROTOCOL_Print_TLV@length,f
  9662                           
  9663                           ;protocol.c: 230: printf("UINT8_T:");
  9664  00CB  3039               	movlw	low (STR_53| (0+32768))
  9665  00CC  00AE               	movwf	printf@f
  9666  00CD  3091               	movlw	high (STR_53| (0+32768))
  9667  00CE  00AF               	movwf	printf@f+1
  9668  00CF  318E  262B  3180   	fcall	_printf
  9669                           
  9670                           ;protocol.c: 231: for (i=0; i<length; i++) printf("%u,", pbuffer[i]);
  9671  00D2  0020               	movlb	0	; select bank0
  9672  00D3  01EB               	clrf	_i
  9673  00D4                     l4927:	
  9674  00D4  0845               	movf	PROTOCOL_Print_TLV@length,w
  9675  00D5  026B               	subwf	_i,w
  9676  00D6  1803               	btfsc	3,0
  9677  00D7  28F3               	goto	l4929
  9678  00D8  306D               	movlw	low (STR_54| (0+32768))
  9679  00D9  00AE               	movwf	printf@f
  9680  00DA  3091               	movlw	high (STR_54| (0+32768))
  9681  00DB  00AF               	movwf	printf@f+1
  9682  00DC  086B               	movf	_i,w
  9683  00DD  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  9684  00DE  00C7               	movwf	??_PROTOCOL_Print_TLV
  9685  00DF  0847               	movf	??_PROTOCOL_Print_TLV,w
  9686  00E0  0086               	movwf	6
  9687  00E1  3001               	movlw	1	; select bank2/3
  9688  00E2  0087               	movwf	7
  9689  00E3  0801               	movf	1,w
  9690  00E4  00C8               	movwf	??_PROTOCOL_Print_TLV+1
  9691  00E5  01C9               	clrf	??_PROTOCOL_Print_TLV+2
  9692  00E6  0848               	movf	??_PROTOCOL_Print_TLV+1,w
  9693  00E7  00B0               	movwf	?_printf+2
  9694  00E8  0849               	movf	??_PROTOCOL_Print_TLV+2,w
  9695  00E9  00B1               	movwf	?_printf+3
  9696  00EA  318E  262B  3180   	fcall	_printf
  9697  00ED  3001               	movlw	1
  9698  00EE  0020               	movlb	0	; select bank0
  9699  00EF  00C7               	movwf	??_PROTOCOL_Print_TLV
  9700  00F0  0847               	movf	??_PROTOCOL_Print_TLV,w
  9701  00F1  07EB               	addwf	_i,f
  9702  00F2  28D4               	goto	l4927
  9703  00F3                     l4929:	
  9704                           
  9705                           ;protocol.c: 232: printf("%u\n", pbuffer[i]);
  9706  00F3  3069               	movlw	low (STR_55| (0+32768))
  9707  00F4  00AE               	movwf	printf@f
  9708  00F5  3091               	movlw	high (STR_55| (0+32768))
  9709  00F6  00AF               	movwf	printf@f+1
  9710  00F7  086B               	movf	_i,w
  9711  00F8  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  9712  00F9  00C7               	movwf	??_PROTOCOL_Print_TLV
  9713  00FA  0847               	movf	??_PROTOCOL_Print_TLV,w
  9714  00FB  0086               	movwf	6
  9715  00FC  3001               	movlw	1	; select bank2/3
  9716  00FD  0087               	movwf	7
  9717  00FE  0801               	movf	1,w
  9718  00FF  00C8               	movwf	??_PROTOCOL_Print_TLV+1
  9719  0100  01C9               	clrf	??_PROTOCOL_Print_TLV+2
  9720  0101  0848               	movf	??_PROTOCOL_Print_TLV+1,w
  9721  0102  00B0               	movwf	?_printf+2
  9722  0103  0849               	movf	??_PROTOCOL_Print_TLV+2,w
  9723  0104  00B1               	movwf	?_printf+3
  9724  0105  318E  262B         	fcall	_printf
  9725                           
  9726                           ;protocol.c: 233: break;
  9727  0107  0008               	return
  9728  0108                     l4931:	
  9729                           ;protocol.c: 234: case 0x02:
  9730                           
  9731                           
  9732                           ;protocol.c: 235: length--;
  9733  0108  3001               	movlw	1
  9734  0109  0020               	movlb	0	; select bank0
  9735  010A  02C5               	subwf	PROTOCOL_Print_TLV@length,f
  9736                           
  9737                           ;protocol.c: 236: printf("INT8_T:");
  9738  010B  303A               	movlw	low ((STR_53+1)| (0+32768))
  9739  010C  00AE               	movwf	printf@f
  9740  010D  3091               	movlw	high ((STR_53+1)| (0+32768))
  9741  010E  00AF               	movwf	printf@f+1
  9742  010F  318E  262B  3180   	fcall	_printf
  9743                           
  9744                           ;protocol.c: 237: for (i=0; i<length; i++) printf("%d,", (int8_t)pbuffer[i]);
  9745  0112  0020               	movlb	0	; select bank0
  9746  0113  01EB               	clrf	_i
  9747  0114                     l4941:	
  9748  0114  0845               	movf	PROTOCOL_Print_TLV@length,w
  9749  0115  026B               	subwf	_i,w
  9750  0116  1803               	btfsc	3,0
  9751  0117  2931               	goto	l4943
  9752  0118  307D               	movlw	low (STR_14| (0+32768))
  9753  0119  00AE               	movwf	printf@f
  9754  011A  3091               	movlw	high (STR_14| (0+32768))
  9755  011B  00AF               	movwf	printf@f+1
  9756  011C  086B               	movf	_i,w
  9757  011D  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  9758  011E  00C7               	movwf	??_PROTOCOL_Print_TLV
  9759  011F  0847               	movf	??_PROTOCOL_Print_TLV,w
  9760  0120  0086               	movwf	6
  9761  0121  3001               	movlw	1	; select bank2/3
  9762  0122  0087               	movwf	7
  9763  0123  0801               	movf	1,w
  9764  0124  00B0               	movwf	?_printf+2
  9765  0125  01B1               	clrf	?_printf+3
  9766  0126  1BB0               	btfsc	?_printf+2,7
  9767  0127  03B1               	decf	?_printf+3,f
  9768  0128  318E  262B  3180   	fcall	_printf
  9769  012B  3001               	movlw	1
  9770  012C  0020               	movlb	0	; select bank0
  9771  012D  00C7               	movwf	??_PROTOCOL_Print_TLV
  9772  012E  0847               	movf	??_PROTOCOL_Print_TLV,w
  9773  012F  07EB               	addwf	_i,f
  9774  0130  2914               	goto	l4941
  9775  0131                     l4943:	
  9776                           
  9777                           ;protocol.c: 238: printf("%d\n", (int8_t)pbuffer[i]);
  9778  0131  30E6               	movlw	low ((STR_51+6)| (0+32768))
  9779  0132  00AE               	movwf	printf@f
  9780  0133  3090               	movlw	high ((STR_51+6)| (0+32768))
  9781  0134  00AF               	movwf	printf@f+1
  9782  0135  086B               	movf	_i,w
  9783  0136  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  9784  0137  00C7               	movwf	??_PROTOCOL_Print_TLV
  9785  0138  0847               	movf	??_PROTOCOL_Print_TLV,w
  9786  0139  0086               	movwf	6
  9787  013A  3001               	movlw	1	; select bank2/3
  9788  013B  0087               	movwf	7
  9789  013C  0801               	movf	1,w
  9790  013D  00B0               	movwf	?_printf+2
  9791  013E  01B1               	clrf	?_printf+3
  9792  013F  1BB0               	btfsc	?_printf+2,7
  9793  0140  03B1               	decf	?_printf+3,f
  9794  0141  318E  262B         	fcall	_printf
  9795                           
  9796                           ;protocol.c: 239: break;
  9797  0143  0008               	return
  9798  0144                     l4945:	
  9799                           ;protocol.c: 240: case 0x03:
  9800                           
  9801                           
  9802                           ;protocol.c: 241: printf("UINT16_T:");
  9803  0144  3012               	movlw	low (STR_59| (0+32768))
  9804  0145  0020               	movlb	0	; select bank0
  9805  0146  00AE               	movwf	printf@f
  9806  0147  3091               	movlw	high (STR_59| (0+32768))
  9807  0148  00AF               	movwf	printf@f+1
  9808  0149  318E  262B  3180   	fcall	_printf
  9809                           
  9810                           ;protocol.c: 242: length = length - 2;
  9811  014C  0020               	movlb	0	; select bank0
  9812  014D  0845               	movf	PROTOCOL_Print_TLV@length,w
  9813  014E  3EFE               	addlw	254
  9814  014F  00C7               	movwf	??_PROTOCOL_Print_TLV
  9815  0150  0847               	movf	??_PROTOCOL_Print_TLV,w
  9816  0151  00C5               	movwf	PROTOCOL_Print_TLV@length
  9817                           
  9818                           ;protocol.c: 243: for(i=0; i<length; i=i+2) printf("%u,", concat(pbuffer[i], pbuffer[i+1
      +                          ]));
  9819  0152  01EB               	clrf	_i
  9820  0153                     l4955:	
  9821  0153  0845               	movf	PROTOCOL_Print_TLV@length,w
  9822  0154  026B               	subwf	_i,w
  9823  0155  1803               	btfsc	3,0
  9824  0156  2981               	goto	l4957
  9825  0157  306D               	movlw	low (STR_54| (0+32768))
  9826  0158  00AE               	movwf	printf@f
  9827  0159  3091               	movlw	high (STR_54| (0+32768))
  9828  015A  00AF               	movwf	printf@f+1
  9829  015B  086B               	movf	_i,w
  9830  015C  3E01               	addlw	1
  9831  015D  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  9832  015E  00C7               	movwf	??_PROTOCOL_Print_TLV
  9833  015F  0847               	movf	??_PROTOCOL_Print_TLV,w
  9834  0160  0086               	movwf	6
  9835  0161  3001               	movlw	1	; select bank2/3
  9836  0162  0087               	movwf	7
  9837  0163  0801               	movf	1,w
  9838  0164  00C8               	movwf	??_PROTOCOL_Print_TLV+1
  9839  0165  0848               	movf	??_PROTOCOL_Print_TLV+1,w
  9840  0166  00A0               	movwf	concat@lsb
  9841  0167  086B               	movf	_i,w
  9842  0168  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  9843  0169  00C9               	movwf	??_PROTOCOL_Print_TLV+2
  9844  016A  0849               	movf	??_PROTOCOL_Print_TLV+2,w
  9845  016B  0086               	movwf	6
  9846  016C  3001               	movlw	1	; select bank2/3
  9847  016D  0087               	movwf	7
  9848  016E  0801               	movf	1,w
  9849  016F  3192  220E  3180   	fcall	_concat
  9850  0172  0020               	movlb	0	; select bank0
  9851  0173  0821               	movf	?_concat+1,w
  9852  0174  00B1               	movwf	?_printf+3
  9853  0175  0820               	movf	?_concat,w
  9854  0176  00B0               	movwf	?_printf+2
  9855  0177  318E  262B  3180   	fcall	_printf
  9856  017A  0020               	movlb	0	; select bank0
  9857  017B  086B               	movf	_i,w
  9858  017C  3E02               	addlw	2
  9859  017D  00C7               	movwf	??_PROTOCOL_Print_TLV
  9860  017E  0847               	movf	??_PROTOCOL_Print_TLV,w
  9861  017F  00EB               	movwf	_i
  9862  0180  2953               	goto	l4955
  9863  0181                     l4957:	
  9864                           
  9865                           ;protocol.c: 244: printf("%u\n", concat(pbuffer[i], pbuffer[i+1]));
  9866  0181  3069               	movlw	low (STR_55| (0+32768))
  9867  0182  00AE               	movwf	printf@f
  9868  0183  3091               	movlw	high (STR_55| (0+32768))
  9869  0184  00AF               	movwf	printf@f+1
  9870  0185  086B               	movf	_i,w
  9871  0186  3E01               	addlw	1
  9872  0187  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  9873  0188  00C7               	movwf	??_PROTOCOL_Print_TLV
  9874  0189  0847               	movf	??_PROTOCOL_Print_TLV,w
  9875  018A  0086               	movwf	6
  9876  018B  3001               	movlw	1	; select bank2/3
  9877  018C  0087               	movwf	7
  9878  018D  0801               	movf	1,w
  9879  018E  00C8               	movwf	??_PROTOCOL_Print_TLV+1
  9880  018F  0848               	movf	??_PROTOCOL_Print_TLV+1,w
  9881  0190  00A0               	movwf	concat@lsb
  9882  0191  086B               	movf	_i,w
  9883  0192  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  9884  0193  00C9               	movwf	??_PROTOCOL_Print_TLV+2
  9885  0194  0849               	movf	??_PROTOCOL_Print_TLV+2,w
  9886  0195  0086               	movwf	6
  9887  0196  3001               	movlw	1	; select bank2/3
  9888  0197  0087               	movwf	7
  9889  0198  0801               	movf	1,w
  9890  0199  3192  220E  3180   	fcall	_concat
  9891  019C  0020               	movlb	0	; select bank0
  9892  019D  0821               	movf	?_concat+1,w
  9893  019E  00B1               	movwf	?_printf+3
  9894  019F  0820               	movf	?_concat,w
  9895  01A0  00B0               	movwf	?_printf+2
  9896  01A1  318E  262B         	fcall	_printf
  9897                           
  9898                           ;protocol.c: 245: break;
  9899  01A3  0008               	return
  9900  01A4                     l4959:	
  9901                           ;protocol.c: 246: case 0x04:
  9902                           
  9903                           
  9904                           ;protocol.c: 247: printf("INT16_T:");
  9905  01A4  3013               	movlw	low ((STR_59+1)| (0+32768))
  9906  01A5  0020               	movlb	0	; select bank0
  9907  01A6  00AE               	movwf	printf@f
  9908  01A7  3091               	movlw	high ((STR_59+1)| (0+32768))
  9909  01A8  00AF               	movwf	printf@f+1
  9910  01A9  318E  262B  3180   	fcall	_printf
  9911                           
  9912                           ;protocol.c: 248: length = length - 2;
  9913  01AC  0020               	movlb	0	; select bank0
  9914  01AD  0845               	movf	PROTOCOL_Print_TLV@length,w
  9915  01AE  3EFE               	addlw	254
  9916  01AF  00C7               	movwf	??_PROTOCOL_Print_TLV
  9917  01B0  0847               	movf	??_PROTOCOL_Print_TLV,w
  9918  01B1  00C5               	movwf	PROTOCOL_Print_TLV@length
  9919                           
  9920                           ;protocol.c: 249: for(i=0; i<length; i=i+2) printf("%d,", (int16_t)(concat(pbuffer[i], p
      +                          buffer[i+1])));
  9921  01B2  01EB               	clrf	_i
  9922  01B3                     l4969:	
  9923  01B3  0845               	movf	PROTOCOL_Print_TLV@length,w
  9924  01B4  026B               	subwf	_i,w
  9925  01B5  1803               	btfsc	3,0
  9926  01B6  29E1               	goto	l4971
  9927  01B7  307D               	movlw	low (STR_14| (0+32768))
  9928  01B8  00AE               	movwf	printf@f
  9929  01B9  3091               	movlw	high (STR_14| (0+32768))
  9930  01BA  00AF               	movwf	printf@f+1
  9931  01BB  086B               	movf	_i,w
  9932  01BC  3E01               	addlw	1
  9933  01BD  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  9934  01BE  00C7               	movwf	??_PROTOCOL_Print_TLV
  9935  01BF  0847               	movf	??_PROTOCOL_Print_TLV,w
  9936  01C0  0086               	movwf	6
  9937  01C1  3001               	movlw	1	; select bank2/3
  9938  01C2  0087               	movwf	7
  9939  01C3  0801               	movf	1,w
  9940  01C4  00C8               	movwf	??_PROTOCOL_Print_TLV+1
  9941  01C5  0848               	movf	??_PROTOCOL_Print_TLV+1,w
  9942  01C6  00A0               	movwf	concat@lsb
  9943  01C7  086B               	movf	_i,w
  9944  01C8  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  9945  01C9  00C9               	movwf	??_PROTOCOL_Print_TLV+2
  9946  01CA  0849               	movf	??_PROTOCOL_Print_TLV+2,w
  9947  01CB  0086               	movwf	6
  9948  01CC  3001               	movlw	1	; select bank2/3
  9949  01CD  0087               	movwf	7
  9950  01CE  0801               	movf	1,w
  9951  01CF  3192  220E  3180   	fcall	_concat
  9952  01D2  0020               	movlb	0	; select bank0
  9953  01D3  0821               	movf	?_concat+1,w
  9954  01D4  00B1               	movwf	?_printf+3
  9955  01D5  0820               	movf	?_concat,w
  9956  01D6  00B0               	movwf	?_printf+2
  9957  01D7  318E  262B  3180   	fcall	_printf
  9958  01DA  0020               	movlb	0	; select bank0
  9959  01DB  086B               	movf	_i,w
  9960  01DC  3E02               	addlw	2
  9961  01DD  00C7               	movwf	??_PROTOCOL_Print_TLV
  9962  01DE  0847               	movf	??_PROTOCOL_Print_TLV,w
  9963  01DF  00EB               	movwf	_i
  9964  01E0  29B3               	goto	l4969
  9965  01E1                     l4971:	
  9966                           
  9967                           ;protocol.c: 250: printf("%d\n", (int16_t)(concat(pbuffer[i], pbuffer[i+1])));
  9968  01E1  30E6               	movlw	low ((STR_51+6)| (0+32768))
  9969  01E2  00AE               	movwf	printf@f
  9970  01E3  3090               	movlw	high ((STR_51+6)| (0+32768))
  9971  01E4  00AF               	movwf	printf@f+1
  9972  01E5  086B               	movf	_i,w
  9973  01E6  3E01               	addlw	1
  9974  01E7  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  9975  01E8  00C7               	movwf	??_PROTOCOL_Print_TLV
  9976  01E9  0847               	movf	??_PROTOCOL_Print_TLV,w
  9977  01EA  0086               	movwf	6
  9978  01EB  3001               	movlw	1	; select bank2/3
  9979  01EC  0087               	movwf	7
  9980  01ED  0801               	movf	1,w
  9981  01EE  00C8               	movwf	??_PROTOCOL_Print_TLV+1
  9982  01EF  0848               	movf	??_PROTOCOL_Print_TLV+1,w
  9983  01F0  00A0               	movwf	concat@lsb
  9984  01F1  086B               	movf	_i,w
  9985  01F2  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  9986  01F3  00C9               	movwf	??_PROTOCOL_Print_TLV+2
  9987  01F4  0849               	movf	??_PROTOCOL_Print_TLV+2,w
  9988  01F5  0086               	movwf	6
  9989  01F6  3001               	movlw	1	; select bank2/3
  9990  01F7  0087               	movwf	7
  9991  01F8  0801               	movf	1,w
  9992  01F9  3192  220E  3180   	fcall	_concat
  9993  01FC  0020               	movlb	0	; select bank0
  9994  01FD  0821               	movf	?_concat+1,w
  9995  01FE  00B1               	movwf	?_printf+3
  9996  01FF  0820               	movf	?_concat,w
  9997  0200  00B0               	movwf	?_printf+2
  9998  0201  318E  262B         	fcall	_printf
  9999                           
 10000                           ;protocol.c: 251: break;
 10001  0203  0008               	return
 10002  0204                     l4973:	
 10003                           ;protocol.c: 252: case 0x05:
 10004                           
 10005                           
 10006                           ;protocol.c: 253: printf("FLOAT:");
 10007  0204  3042               	movlw	low (STR_65| (0+32768))
 10008  0205  0020               	movlb	0	; select bank0
 10009  0206  00AE               	movwf	printf@f
 10010  0207  3091               	movlw	high (STR_65| (0+32768))
 10011  0208  00AF               	movwf	printf@f+1
 10012  0209  318E  262B  3180   	fcall	_printf
 10013                           
 10014                           ;protocol.c: 254: length = length - 2;
 10015  020C  0020               	movlb	0	; select bank0
 10016  020D  0845               	movf	PROTOCOL_Print_TLV@length,w
 10017  020E  3EFE               	addlw	254
 10018  020F  00C7               	movwf	??_PROTOCOL_Print_TLV
 10019  0210  0847               	movf	??_PROTOCOL_Print_TLV,w
 10020  0211  00C5               	movwf	PROTOCOL_Print_TLV@length
 10021                           
 10022                           ;protocol.c: 255: for (i=0; i<length; i=i+2) {
 10023  0212  01EB               	clrf	_i
 10024  0213                     l4991:	
 10025  0213  0845               	movf	PROTOCOL_Print_TLV@length,w
 10026  0214  026B               	subwf	_i,w
 10027  0215  1803               	btfsc	3,0
 10028  0216  2A7D               	goto	l4993
 10029                           
 10030                           ;protocol.c: 256: v = (int16_t)(concat(pbuffer[i], pbuffer[i+1]));
 10031  0217  086B               	movf	_i,w
 10032  0218  3E01               	addlw	1
 10033  0219  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
 10034  021A  00C7               	movwf	??_PROTOCOL_Print_TLV
 10035  021B  0847               	movf	??_PROTOCOL_Print_TLV,w
 10036  021C  0086               	movwf	6
 10037  021D  3001               	movlw	1	; select bank2/3
 10038  021E  0087               	movwf	7
 10039  021F  0801               	movf	1,w
 10040  0220  00C8               	movwf	??_PROTOCOL_Print_TLV+1
 10041  0221  0848               	movf	??_PROTOCOL_Print_TLV+1,w
 10042  0222  00A0               	movwf	concat@lsb
 10043  0223  086B               	movf	_i,w
 10044  0224  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
 10045  0225  00C9               	movwf	??_PROTOCOL_Print_TLV+2
 10046  0226  0849               	movf	??_PROTOCOL_Print_TLV+2,w
 10047  0227  0086               	movwf	6
 10048  0228  3001               	movlw	1	; select bank2/3
 10049  0229  0087               	movwf	7
 10050  022A  0801               	movf	1,w
 10051  022B  3192  220E  3180   	fcall	_concat
 10052  022E  0020               	movlb	0	; select bank0
 10053  022F  0821               	movf	?_concat+1,w
 10054  0230  00CC               	movwf	PROTOCOL_Print_TLV@v+1
 10055  0231  0820               	movf	?_concat,w
 10056  0232  00CB               	movwf	PROTOCOL_Print_TLV@v
 10057                           
 10058                           ;protocol.c: 257: if (v <= -100 || v >= 0) {
 10059  0233  084C               	movf	PROTOCOL_Print_TLV@v+1,w
 10060  0234  3A80               	xorlw	128
 10061  0235  00C7               	movwf	??_PROTOCOL_Print_TLV
 10062  0236  307F               	movlw	127
 10063  0237  0247               	subwf	??_PROTOCOL_Print_TLV,w
 10064  0238  1D03               	skipz
 10065  0239  2A3C               	goto	u5445
 10066  023A  309D               	movlw	157
 10067  023B  024B               	subwf	PROTOCOL_Print_TLV@v,w
 10068  023C                     u5445:	
 10069  023C  1C03               	skipc
 10070  023D  2A41               	goto	l4985
 10071  023E  0020               	movlb	0	; select bank0
 10072  023F  1BCC               	btfsc	PROTOCOL_Print_TLV@v+1,7
 10073  0240  2A46               	goto	l4987
 10074  0241                     l4985:	
 10075                           
 10076                           ;protocol.c: 258: printf("%d.%02d,", v/100, abs(v%100));
 10077  0241  3009               	movlw	low ((STR_67+1)| (0+32768))
 10078  0242  0020               	movlb	0	; select bank0
 10079  0243  00AE               	movwf	printf@f
 10080  0244  3091               	movlw	high ((STR_67+1)| (0+32768))
 10081  0245  2A4A               	goto	L13
 10082  0246                     l4987:	
 10083                           ;protocol.c: 259: } else {
 10084                           
 10085                           
 10086                           ;protocol.c: 260: printf("-%d.%02d,", v/100, abs(v%100));
 10087  0246  3008               	movlw	low (STR_67| (0+32768))
 10088  0247  0020               	movlb	0	; select bank0
 10089  0248  00AE               	movwf	printf@f
 10090  0249  3091               	movlw	high (STR_67| (0+32768))
 10091  024A                     L13:	
 10092  024A  00AF               	movwf	printf@f+1
 10093  024B  3064               	movlw	100
 10094  024C  00A0               	movwf	___awdiv@divisor
 10095  024D  3000               	movlw	0
 10096  024E  00A1               	movwf	___awdiv@divisor+1
 10097  024F  084C               	movf	PROTOCOL_Print_TLV@v+1,w
 10098  0250  00A3               	movwf	___awdiv@dividend+1
 10099  0251  084B               	movf	PROTOCOL_Print_TLV@v,w
 10100  0252  00A2               	movwf	___awdiv@dividend
 10101  0253  3188  203A  3180   	fcall	___awdiv
 10102  0256  0020               	movlb	0	; select bank0
 10103  0257  0821               	movf	?___awdiv+1,w
 10104  0258  00B1               	movwf	?_printf+3
 10105  0259  0820               	movf	?___awdiv,w
 10106  025A  00B0               	movwf	?_printf+2
 10107  025B  3064               	movlw	100
 10108  025C  00A0               	movwf	___awmod@divisor
 10109  025D  3000               	movlw	0
 10110  025E  00A1               	movwf	___awmod@divisor+1
 10111  025F  084C               	movf	PROTOCOL_Print_TLV@v+1,w
 10112  0260  00A3               	movwf	___awmod@dividend+1
 10113  0261  084B               	movf	PROTOCOL_Print_TLV@v,w
 10114  0262  00A2               	movwf	___awmod@dividend
 10115  0263  3195  25A0  3180   	fcall	___awmod
 10116  0266  0020               	movlb	0	; select bank0
 10117  0267  0821               	movf	?___awmod+1,w
 10118  0268  00A8               	movwf	abs@a+1
 10119  0269  0820               	movf	?___awmod,w
 10120  026A  00A7               	movwf	abs@a
 10121  026B  3191  21DE  3180   	fcall	_abs
 10122  026E  0020               	movlb	0	; select bank0
 10123  026F  0828               	movf	?_abs+1,w
 10124  0270  00B3               	movwf	?_printf+5
 10125  0271  0827               	movf	?_abs,w
 10126  0272  00B2               	movwf	?_printf+4
 10127  0273  318E  262B  3180   	fcall	_printf
 10128  0276  0020               	movlb	0	; select bank0
 10129  0277  086B               	movf	_i,w
 10130  0278  3E02               	addlw	2
 10131  0279  00C7               	movwf	??_PROTOCOL_Print_TLV
 10132  027A  0847               	movf	??_PROTOCOL_Print_TLV,w
 10133  027B  00EB               	movwf	_i
 10134  027C  2A13               	goto	l4991
 10135  027D                     l4993:	
 10136                           
 10137                           ;protocol.c: 261: }
 10138                           ;protocol.c: 262: }
 10139                           ;protocol.c: 263: v = (int16_t)(concat(pbuffer[i], pbuffer[i+1]));
 10140  027D  086B               	movf	_i,w
 10141  027E  3E01               	addlw	1
 10142  027F  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
 10143  0280  00C7               	movwf	??_PROTOCOL_Print_TLV
 10144  0281  0847               	movf	??_PROTOCOL_Print_TLV,w
 10145  0282  0086               	movwf	6
 10146  0283  3001               	movlw	1	; select bank2/3
 10147  0284  0087               	movwf	7
 10148  0285  0801               	movf	1,w
 10149  0286  00C8               	movwf	??_PROTOCOL_Print_TLV+1
 10150  0287  0848               	movf	??_PROTOCOL_Print_TLV+1,w
 10151  0288  00A0               	movwf	concat@lsb
 10152  0289  086B               	movf	_i,w
 10153  028A  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
 10154  028B  00C9               	movwf	??_PROTOCOL_Print_TLV+2
 10155  028C  0849               	movf	??_PROTOCOL_Print_TLV+2,w
 10156  028D  0086               	movwf	6
 10157  028E  3001               	movlw	1	; select bank2/3
 10158  028F  0087               	movwf	7
 10159  0290  0801               	movf	1,w
 10160  0291  3192  220E  3180   	fcall	_concat
 10161  0294  0020               	movlb	0	; select bank0
 10162  0295  0821               	movf	?_concat+1,w
 10163  0296  00CC               	movwf	PROTOCOL_Print_TLV@v+1
 10164  0297  0820               	movf	?_concat,w
 10165  0298  00CB               	movwf	PROTOCOL_Print_TLV@v
 10166                           
 10167                           ;protocol.c: 264: if (v <= -100 || v >= 0) {
 10168  0299  084C               	movf	PROTOCOL_Print_TLV@v+1,w
 10169  029A  3A80               	xorlw	128
 10170  029B  00C7               	movwf	??_PROTOCOL_Print_TLV
 10171  029C  307F               	movlw	127
 10172  029D  0247               	subwf	??_PROTOCOL_Print_TLV,w
 10173  029E  1D03               	skipz
 10174  029F  2AA2               	goto	u5475
 10175  02A0  309D               	movlw	157
 10176  02A1  024B               	subwf	PROTOCOL_Print_TLV@v,w
 10177  02A2                     u5475:	
 10178  02A2  1C03               	skipc
 10179  02A3  2AA7               	goto	l4999
 10180  02A4  0020               	movlb	0	; select bank0
 10181  02A5  1BCC               	btfsc	PROTOCOL_Print_TLV@v+1,7
 10182  02A6  2AD7               	goto	l5001
 10183  02A7                     l4999:	
 10184                           
 10185                           ;protocol.c: 265: printf("%d.%02d\n", v/100, abs(v%100));
 10186  02A7  30EB               	movlw	low ((STR_69+1)| (0+32768))
 10187  02A8  0020               	movlb	0	; select bank0
 10188  02A9  00AE               	movwf	printf@f
 10189  02AA  3090               	movlw	high ((STR_69+1)| (0+32768))
 10190  02AB  00AF               	movwf	printf@f+1
 10191  02AC  3064               	movlw	100
 10192  02AD  00A0               	movwf	___awdiv@divisor
 10193  02AE  3000               	movlw	0
 10194  02AF  00A1               	movwf	___awdiv@divisor+1
 10195  02B0  084C               	movf	PROTOCOL_Print_TLV@v+1,w
 10196  02B1  00A3               	movwf	___awdiv@dividend+1
 10197  02B2  084B               	movf	PROTOCOL_Print_TLV@v,w
 10198  02B3  00A2               	movwf	___awdiv@dividend
 10199  02B4  3188  203A  3180   	fcall	___awdiv
 10200  02B7  0020               	movlb	0	; select bank0
 10201  02B8  0821               	movf	?___awdiv+1,w
 10202  02B9  00B1               	movwf	?_printf+3
 10203  02BA  0820               	movf	?___awdiv,w
 10204  02BB  00B0               	movwf	?_printf+2
 10205  02BC  3064               	movlw	100
 10206  02BD  00A0               	movwf	___awmod@divisor
 10207  02BE  3000               	movlw	0
 10208  02BF  00A1               	movwf	___awmod@divisor+1
 10209  02C0  084C               	movf	PROTOCOL_Print_TLV@v+1,w
 10210  02C1  00A3               	movwf	___awmod@dividend+1
 10211  02C2  084B               	movf	PROTOCOL_Print_TLV@v,w
 10212  02C3  00A2               	movwf	___awmod@dividend
 10213  02C4  3195  25A0  3180   	fcall	___awmod
 10214  02C7  0020               	movlb	0	; select bank0
 10215  02C8  0821               	movf	?___awmod+1,w
 10216  02C9  00A8               	movwf	abs@a+1
 10217  02CA  0820               	movf	?___awmod,w
 10218  02CB  00A7               	movwf	abs@a
 10219  02CC  3191  21DE  3180   	fcall	_abs
 10220  02CF  0020               	movlb	0	; select bank0
 10221  02D0  0828               	movf	?_abs+1,w
 10222  02D1  00B3               	movwf	?_printf+5
 10223  02D2  0827               	movf	?_abs,w
 10224  02D3  00B2               	movwf	?_printf+4
 10225  02D4  318E  262B         	fcall	_printf
 10226                           
 10227                           ;protocol.c: 266: } else {
 10228  02D6  0008               	return
 10229  02D7                     l5001:	
 10230                           
 10231                           ;protocol.c: 267: printf("-%d.%02d\n", v/100, abs(v%100));
 10232  02D7  30EA               	movlw	low (STR_69| (0+32768))
 10233  02D8  0020               	movlb	0	; select bank0
 10234  02D9  00AE               	movwf	printf@f
 10235  02DA  3090               	movlw	high (STR_69| (0+32768))
 10236  02DB  00AF               	movwf	printf@f+1
 10237  02DC  3064               	movlw	100
 10238  02DD  00A0               	movwf	___awdiv@divisor
 10239  02DE  3000               	movlw	0
 10240  02DF  00A1               	movwf	___awdiv@divisor+1
 10241  02E0  084C               	movf	PROTOCOL_Print_TLV@v+1,w
 10242  02E1  00A3               	movwf	___awdiv@dividend+1
 10243  02E2  084B               	movf	PROTOCOL_Print_TLV@v,w
 10244  02E3  00A2               	movwf	___awdiv@dividend
 10245  02E4  3188  203A  3180   	fcall	___awdiv
 10246  02E7  0020               	movlb	0	; select bank0
 10247  02E8  0821               	movf	?___awdiv+1,w
 10248  02E9  00B1               	movwf	?_printf+3
 10249  02EA  0820               	movf	?___awdiv,w
 10250  02EB  00B0               	movwf	?_printf+2
 10251  02EC  3064               	movlw	100
 10252  02ED  00A0               	movwf	___awmod@divisor
 10253  02EE  3000               	movlw	0
 10254  02EF  00A1               	movwf	___awmod@divisor+1
 10255  02F0  084C               	movf	PROTOCOL_Print_TLV@v+1,w
 10256  02F1  00A3               	movwf	___awmod@dividend+1
 10257  02F2  084B               	movf	PROTOCOL_Print_TLV@v,w
 10258  02F3  00A2               	movwf	___awmod@dividend
 10259  02F4  3195  25A0  3180   	fcall	___awmod
 10260  02F7  0020               	movlb	0	; select bank0
 10261  02F8  0821               	movf	?___awmod+1,w
 10262  02F9  00A8               	movwf	abs@a+1
 10263  02FA  0820               	movf	?___awmod,w
 10264  02FB  00A7               	movwf	abs@a
 10265  02FC  3191  21DE  3180   	fcall	_abs
 10266  02FF  0020               	movlb	0	; select bank0
 10267  0300  0828               	movf	?_abs+1,w
 10268  0301  00B3               	movwf	?_printf+5
 10269  0302  0827               	movf	?_abs,w
 10270  0303  00B2               	movwf	?_printf+4
 10271  0304  318E  262B         	fcall	_printf
 10272                           
 10273                           ;protocol.c: 268: }
 10274                           ;protocol.c: 269: break;
 10275  0306  0008               	return
 10276  0307                     l5003:	
 10277                           ;protocol.c: 270: case 0x06:
 10278                           
 10279                           
 10280                           ;protocol.c: 271: printf("NO_DATA\n");
 10281  0307  3030               	movlw	low (STR_70| (0+32768))
 10282  0308  0020               	movlb	0	; select bank0
 10283  0309  00AE               	movwf	printf@f
 10284  030A  3091               	movlw	high (STR_70| (0+32768))
 10285  030B  00AF               	movwf	printf@f+1
 10286  030C  318E  262B         	fcall	_printf
 10287                           
 10288                           ;protocol.c: 272: break;
 10289  030E  0008               	return
 10290  030F                     l5005:	
 10291                           ;protocol.c: 273: default:
 10292                           
 10293                           
 10294                           ;protocol.c: 274: printf("ILLEGAL_TYPE\n");
 10295  030F  30AF               	movlw	low (STR_71| (0+32768))
 10296  0310  0020               	movlb	0	; select bank0
 10297  0311  00AE               	movwf	printf@f
 10298  0312  3090               	movlw	high (STR_71| (0+32768))
 10299  0313  00AF               	movwf	printf@f+1
 10300  0314  318E  262B         	fcall	_printf
 10301                           
 10302                           ;protocol.c: 276: }
 10303                           
 10304                           ;protocol.c: 275: break;
 10305  0316  0008               	return
 10306  0317                     l5009:	
 10307  0317  0020               	movlb	0	; select bank0
 10308  0318  0844               	movf	PROTOCOL_Print_TLV@type,w
 10309                           
 10310                           ; Switch size 1, requested type "space"
 10311                           ; Number of cases is 6, Range of values is 1 to 6
 10312                           ; switch strategies available:
 10313                           ; Name         Instructions Cycles
 10314                           ; simple_byte           19    10 (average)
 10315                           ; direct_byte           21     9 (fixed)
 10316                           ; jumptable            263     9 (fixed)
 10317                           ;	Chosen strategy is simple_byte
 10318  0319  3A01               	xorlw	1	; case 1
 10319  031A  1903               	skipnz
 10320  031B  28C8               	goto	l4917
 10321  031C  3A03               	xorlw	3	; case 2
 10322  031D  1903               	skipnz
 10323  031E  2908               	goto	l4931
 10324  031F  3A01               	xorlw	1	; case 3
 10325  0320  1903               	skipnz
 10326  0321  2944               	goto	l4945
 10327  0322  3A07               	xorlw	7	; case 4
 10328  0323  1903               	skipnz
 10329  0324  29A4               	goto	l4959
 10330  0325  3A01               	xorlw	1	; case 5
 10331  0326  1903               	skipnz
 10332  0327  2A04               	goto	l4973
 10333  0328  3A03               	xorlw	3	; case 6
 10334  0329  1903               	skipnz
 10335  032A  2B07               	goto	l5003
 10336  032B  2B0F               	goto	l5005
 10337  032C  0008               	return
 10338  032D                     __end_of_PROTOCOL_Print_TLV:	
 10339                           
 10340                           	psect	text45
 10341  0E2B                     __ptext45:	
 10342 ;; *************** function _printf *****************
 10343 ;; Defined at:
 10344 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
 10345 ;; Parameters:    Size  Location     Type
 10346 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 10347 ;;		 -> STR_83(10), STR_82(9), STR_81(10), STR_80(9), 
 10348 ;;		 -> STR_79(4), STR_78(4), STR_77(4), STR_76(4), 
 10349 ;;		 -> STR_75(4), STR_74(4), STR_73(4), STR_72(4), 
 10350 ;;		 -> STR_71(14), STR_70(9), STR_69(10), STR_68(9), 
 10351 ;;		 -> STR_67(10), STR_66(9), STR_65(7), STR_64(4), 
 10352 ;;		 -> STR_63(4), STR_62(9), STR_61(4), STR_60(4), 
 10353 ;;		 -> STR_59(10), STR_58(4), STR_57(4), STR_56(8), 
 10354 ;;		 -> STR_55(4), STR_54(4), STR_53(9), STR_52(6), 
 10355 ;;		 -> STR_51(10), STR_48(10), STR_44(10), STR_40(10), 
 10356 ;;		 -> STR_38(5), STR_31(4), STR_30(4), STR_29(4), 
 10357 ;;		 -> STR_28(7), STR_25(26), STR_23(26), STR_19(22), 
 10358 ;;		 -> STR_18(22), STR_17(26), STR_16(22), STR_15(4), 
 10359 ;;		 -> STR_14(4), STR_13(7), STR_12(25), STR_11(10), 
 10360 ;;		 -> STR_8(12), STR_7(11), STR_3(12), STR_2(10), 
 10361 ;; Auto vars:     Size  Location     Type
 10362 ;;  tmpval          4    0        struct .
 10363 ;;  width           2   33[BANK0 ] int 
 10364 ;;  len             2   30[BANK0 ] unsigned int 
 10365 ;;  val             2   28[BANK0 ] unsigned int 
 10366 ;;  cp              2   25[BANK0 ] PTR const unsigned char 
 10367 ;;		 -> STR_45(4), buf(48), STR_37(7), ROM(8192), 
 10368 ;;		 -> printf@c(1), STR_36(17), I2C1_ISR@i2c_address(2), 
 10369 ;;  c               1   35[BANK0 ] char 
 10370 ;;  flag            1   32[BANK0 ] unsigned char 
 10371 ;;  ap              1   27[BANK0 ] PTR void [1]
 10372 ;;		 -> ?_printf(2), 
 10373 ;;  prec            1   24[BANK0 ] char 
 10374 ;; Return value:  Size  Location     Type
 10375 ;;                  2   14[BANK0 ] int 
 10376 ;; Registers used:
 10377 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10378 ;; Tracked objects:
 10379 ;;		On entry : 0/0
 10380 ;;		On exit  : 0/0
 10381 ;;		Unchanged: 0/0
 10382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10383 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10384 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10385 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10386 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10387 ;;Total ram usage:       22 bytes
 10388 ;; Hardware stack levels used:    1
 10389 ;; Hardware stack levels required when called:    5
 10390 ;; This function calls:
 10391 ;;		___lwdiv
 10392 ;;		___lwmod
 10393 ;;		___wmul
 10394 ;;		_isdigit
 10395 ;;		_putch
 10396 ;; This function is called by:
 10397 ;;		_exec_remote_cmd
 10398 ;;		_print_dev_map
 10399 ;;		_one_shot_sen
 10400 ;;		_fetch
 10401 ;;		_command_handler
 10402 ;;		_PROTOCOL_Loop
 10403 ;;		_PROTOCOL_Print_TLV
 10404 ;; This function uses a non-reentrant model
 10405 ;;
 10406                           
 10407                           
 10408                           ;psect for function _printf
 10409  0E2B                     _printf:	
 10410                           
 10411                           ;doprnt.c: 466: va_list ap;
 10412                           ;doprnt.c: 499: signed char c;
 10413                           ;doprnt.c: 501: int width;
 10414                           ;doprnt.c: 506: signed char prec;
 10415                           ;doprnt.c: 508: unsigned char flag;
 10416                           ;doprnt.c: 523: union {
 10417                           ;doprnt.c: 524: unsigned long vd;
 10418                           ;doprnt.c: 525: double integ;
 10419                           ;doprnt.c: 526: } tmpval;
 10420                           ;doprnt.c: 528: unsigned int val;
 10421                           ;doprnt.c: 529: unsigned len;
 10422                           ;doprnt.c: 530: const char * cp;
 10423                           ;doprnt.c: 533: *ap = __va_start();
 10424                           
 10425                           ;incstack = 0
 10426                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10427  0E2B  3030               	movlw	(low ((?_printf| 0+2)))& (0+255)
 10428  0E2C  0020               	movlb	0	; select bank0
 10429  0E2D  00B4               	movwf	??_printf
 10430  0E2E  0834               	movf	??_printf,w
 10431  0E2F  00BB               	movwf	printf@ap
 10432  0E30                     l4911:	
 10433                           ;doprnt.c: 536: while(c = *f++) {
 10434                           
 10435  0E30  0020               	movlb	0	; select bank0
 10436  0E31  082F               	movf	printf@f+1,w
 10437  0E32  00B5               	movwf	??_printf+1
 10438  0E33  082E               	movf	printf@f,w
 10439  0E34  00B4               	movwf	??_printf
 10440  0E35  0AAE               	incf	printf@f,f
 10441  0E36  1903               	skipnz
 10442  0E37  0AAF               	incf	printf@f+1,f
 10443  0E38  0834               	movf	??_printf,w
 10444  0E39  0084               	movwf	4
 10445  0E3A  0835               	movf	??_printf+1,w
 10446  0E3B  0085               	movwf	5
 10447  0E3C  0800               	movf	0,w	;code access
 10448  0E3D  00B6               	movwf	??_printf+2
 10449  0E3E  0836               	movf	??_printf+2,w
 10450  0E3F  00C3               	movwf	printf@c
 10451  0E40  0843               	movf	printf@c,w
 10452  0E41  1903               	btfsc	3,2
 10453  0E42  0008               	return
 10454                           
 10455                           ;doprnt.c: 538: if(c != '%')
 10456  0E43  3025               	movlw	37
 10457  0E44  0643               	xorwf	printf@c,w
 10458  0E45  1903               	btfsc	3,2
 10459  0E46  2E4C               	goto	l4787
 10460                           
 10461                           ;doprnt.c: 540: {
 10462                           ;doprnt.c: 541: (putch(c) );
 10463  0E47  0843               	movf	printf@c,w
 10464  0E48  319F  279C  318E   	fcall	_putch
 10465                           
 10466                           ;doprnt.c: 542: continue;
 10467  0E4B  2E30               	goto	l4911
 10468  0E4C                     l4787:	
 10469                           
 10470                           ;doprnt.c: 543: }
 10471                           ;doprnt.c: 546: width = 0;
 10472  0E4C  0020               	movlb	0	; select bank0
 10473  0E4D  01C1               	clrf	printf@width
 10474  0E4E  01C2               	clrf	printf@width+1
 10475                           
 10476                           ;doprnt.c: 548: flag = 0;
 10477  0E4F  01C0               	clrf	printf@flag
 10478                           
 10479                           ;doprnt.c: 551: switch(*f) {
 10480                           
 10481                           ;doprnt.c: 550: for(;;) {
 10482  0E50  2E56               	goto	l4793
 10483  0E51                     l672:	
 10484                           ;doprnt.c: 579: case '0':
 10485                           
 10486                           
 10487                           ;doprnt.c: 580: flag |= 0x04;
 10488  0E51  1540               	bsf	printf@flag,2
 10489                           
 10490                           ;doprnt.c: 581: f++;
 10491  0E52  3001               	movlw	1
 10492  0E53  07AE               	addwf	printf@f,f
 10493  0E54  3000               	movlw	0
 10494  0E55  3DAF               	addwfc	printf@f+1,f
 10495  0E56                     l4793:	
 10496                           ;doprnt.c: 584: }
 10497                           
 10498                           ;doprnt.c: 582: continue;
 10499                           
 10500  0E56  082E               	movf	printf@f,w
 10501  0E57  0084               	movwf	4
 10502  0E58  082F               	movf	printf@f+1,w
 10503  0E59  0085               	movwf	5
 10504  0E5A  0800               	movf	0,w	;code access
 10505                           
 10506                           ; Switch size 1, requested type "space"
 10507                           ; Number of cases is 1, Range of values is 48 to 48
 10508                           ; switch strategies available:
 10509                           ; Name         Instructions Cycles
 10510                           ; simple_byte            4     3 (average)
 10511                           ; direct_byte           11     9 (fixed)
 10512                           ; jumptable            263     9 (fixed)
 10513                           ;	Chosen strategy is simple_byte
 10514  0E5B  3A30               	xorlw	48	; case 48
 10515  0E5C  1903               	skipnz
 10516  0E5D  2E51               	goto	l672
 10517  0E5E  2E5F               	goto	l4795
 10518  0E5F                     l4795:	
 10519                           ;doprnt.c: 586: }
 10520                           
 10521                           ;doprnt.c: 585: break;
 10522                           
 10523                           
 10524                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 10525  0E5F  082E               	movf	printf@f,w
 10526  0E60  0084               	movwf	4
 10527  0E61  082F               	movf	printf@f+1,w
 10528  0E62  0085               	movwf	5
 10529  0E63  0800               	movf	0,w	;code access
 10530  0E64  319F  27F1  318E   	fcall	_isdigit
 10531  0E67  1C03               	btfss	3,0
 10532  0E68  2F00               	goto	l4843
 10533                           
 10534                           ;doprnt.c: 598: width = 0;
 10535  0E69  0020               	movlb	0	; select bank0
 10536  0E6A  01C1               	clrf	printf@width
 10537  0E6B  01C2               	clrf	printf@width+1
 10538  0E6C                     l4799:	
 10539                           ;doprnt.c: 599: do {
 10540                           
 10541                           
 10542                           ;doprnt.c: 600: width *= 10;
 10543  0E6C  300A               	movlw	10
 10544  0E6D  0020               	movlb	0	; select bank0
 10545  0E6E  00A0               	movwf	___wmul@multiplier
 10546  0E6F  3000               	movlw	0
 10547  0E70  00A1               	movwf	___wmul@multiplier+1
 10548  0E71  0842               	movf	printf@width+1,w
 10549  0E72  00A3               	movwf	___wmul@multiplicand+1
 10550  0E73  0841               	movf	printf@width,w
 10551  0E74  00A2               	movwf	___wmul@multiplicand
 10552  0E75  3192  22E1  318E   	fcall	___wmul
 10553  0E78  0020               	movlb	0	; select bank0
 10554  0E79  0821               	movf	?___wmul+1,w
 10555  0E7A  00C2               	movwf	printf@width+1
 10556  0E7B  0820               	movf	?___wmul,w
 10557  0E7C  00C1               	movwf	printf@width
 10558                           
 10559                           ;doprnt.c: 601: width += *f++ - '0';
 10560  0E7D  082E               	movf	printf@f,w
 10561  0E7E  0084               	movwf	4
 10562  0E7F  082F               	movf	printf@f+1,w
 10563  0E80  0085               	movwf	5
 10564  0E81  0800               	movf	0,w	;code access
 10565  0E82  3ED0               	addlw	208
 10566  0E83  00B4               	movwf	??_printf
 10567  0E84  30FF               	movlw	255
 10568  0E85  1803               	skipnc
 10569  0E86  3000               	movlw	0
 10570  0E87  00B5               	movwf	??_printf+1
 10571  0E88  0834               	movf	??_printf,w
 10572  0E89  07C1               	addwf	printf@width,f
 10573  0E8A  0835               	movf	??_printf+1,w
 10574  0E8B  3DC2               	addwfc	printf@width+1,f
 10575  0E8C  3001               	movlw	1
 10576  0E8D  07AE               	addwf	printf@f,f
 10577  0E8E  3000               	movlw	0
 10578  0E8F  3DAF               	addwfc	printf@f+1,f
 10579                           
 10580                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 10581  0E90  082E               	movf	printf@f,w
 10582  0E91  0084               	movwf	4
 10583  0E92  082F               	movf	printf@f+1,w
 10584  0E93  0085               	movwf	5
 10585  0E94  0800               	movf	0,w	;code access
 10586  0E95  319F  27F1  318E   	fcall	_isdigit
 10587  0E98  1C03               	btfss	3,0
 10588  0E99  2F00               	goto	l4843
 10589  0E9A  2E6C               	goto	l4799
 10590  0E9B                     l4807:	
 10591                           ;doprnt.c: 728: case 's':
 10592                           
 10593                           ;doprnt.c: 698: case 'i':
 10594                           ;doprnt.c: 699: break;
 10595                           
 10596                           ;doprnt.c: 697: case 'd':
 10597                           
 10598                           ;doprnt.c: 638: goto alldone;
 10599                           
 10600                           ;doprnt.c: 637: case 0:
 10601                           
 10602                           ;doprnt.c: 608: }
 10603                           ;doprnt.c: 635: switch(c = *f++) {
 10604                           
 10605                           
 10606                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 10607  0E9B  0020               	movlb	0	; select bank0
 10608  0E9C  083B               	movf	printf@ap,w
 10609  0E9D  0086               	movwf	6
 10610  0E9E  0187               	clrf	7
 10611  0E9F  3F40               	moviw [0]fsr1
 10612  0EA0  00B9               	movwf	printf@cp
 10613  0EA1  3F41               	moviw [1]fsr1
 10614  0EA2  00BA               	movwf	printf@cp+1
 10615  0EA3  3002               	movlw	2
 10616  0EA4  00B4               	movwf	??_printf
 10617  0EA5  0834               	movf	??_printf,w
 10618  0EA6  07BB               	addwf	printf@ap,f
 10619                           
 10620                           ;doprnt.c: 740: if(!cp)
 10621  0EA7  0839               	movf	printf@cp,w
 10622  0EA8  043A               	iorwf	printf@cp+1,w
 10623  0EA9  1D03               	btfss	3,2
 10624  0EAA  2EAF               	goto	l4815
 10625                           
 10626                           ;doprnt.c: 741: cp = "(null)";
 10627  0EAB  3049               	movlw	low (STR_37| (0+32768))
 10628  0EAC  00B9               	movwf	printf@cp
 10629  0EAD  3091               	movlw	high (STR_37| (0+32768))
 10630  0EAE  00BA               	movwf	printf@cp+1
 10631  0EAF                     l4815:	
 10632                           
 10633                           ;doprnt.c: 745: len = 0;
 10634  0EAF  01BE               	clrf	printf@len
 10635  0EB0  01BF               	clrf	printf@len+1
 10636  0EB1                     l4819:	
 10637                           ;doprnt.c: 746: while(cp[len])
 10638                           
 10639  0EB1  0839               	movf	printf@cp,w
 10640  0EB2  073E               	addwf	printf@len,w
 10641  0EB3  0084               	movwf	4
 10642  0EB4  083A               	movf	printf@cp+1,w
 10643  0EB5  3D3F               	addwfc	printf@len+1,w
 10644  0EB6  0085               	movwf	5
 10645  0EB7  0012               	moviw fsr0++
 10646  0EB8  1903               	btfsc	3,2
 10647  0EB9  2EBF               	goto	l4821
 10648                           
 10649                           ;doprnt.c: 747: len++;
 10650  0EBA  3001               	movlw	1
 10651  0EBB  07BE               	addwf	printf@len,f
 10652  0EBC  3000               	movlw	0
 10653  0EBD  3DBF               	addwfc	printf@len+1,f
 10654  0EBE  2EB1               	goto	l4819
 10655  0EBF                     l4821:	
 10656                           ;doprnt.c: 750: dostring:
 10657                           
 10658                           
 10659                           ;doprnt.c: 757: if(width > len)
 10660  0EBF  0842               	movf	printf@width+1,w
 10661  0EC0  023F               	subwf	printf@len+1,w
 10662  0EC1  1D03               	skipz
 10663  0EC2  2EC5               	goto	u5195
 10664  0EC3  0841               	movf	printf@width,w
 10665  0EC4  023E               	subwf	printf@len,w
 10666  0EC5                     u5195:	
 10667  0EC5  1803               	skipnc
 10668  0EC6  2ECC               	goto	l4825
 10669                           
 10670                           ;doprnt.c: 758: width -= len;
 10671  0EC7  083E               	movf	printf@len,w
 10672  0EC8  02C1               	subwf	printf@width,f
 10673  0EC9  083F               	movf	printf@len+1,w
 10674  0ECA  3BC2               	subwfb	printf@width+1,f
 10675  0ECB  2ECE               	goto	l4829
 10676  0ECC                     l4825:	
 10677                           
 10678                           ;doprnt.c: 759: else
 10679                           ;doprnt.c: 760: width = 0;
 10680  0ECC  01C1               	clrf	printf@width
 10681  0ECD  01C2               	clrf	printf@width+1
 10682  0ECE                     l4829:	
 10683                           ;doprnt.c: 764: while(width--)
 10684                           
 10685  0ECE  30FF               	movlw	255
 10686  0ECF  0020               	movlb	0	; select bank0
 10687  0ED0  07C1               	addwf	printf@width,f
 10688  0ED1  30FF               	movlw	255
 10689  0ED2  3DC2               	addwfc	printf@width+1,f
 10690  0ED3  0A41               	incf	printf@width,w
 10691  0ED4  1903               	btfsc	3,2
 10692  0ED5  0A42               	incf	printf@width+1,w
 10693  0ED6  1903               	btfsc	3,2
 10694  0ED7  2EEA               	goto	l4835
 10695                           
 10696                           ;doprnt.c: 765: (putch(' ') );
 10697  0ED8  3020               	movlw	32
 10698  0ED9  319F  279C  318E   	fcall	_putch
 10699  0EDC  2ECE               	goto	l4829
 10700  0EDD                     l4831:	
 10701                           ;doprnt.c: 767: while(len--)
 10702                           
 10703                           
 10704                           ;doprnt.c: 768: (putch(*cp++) );
 10705  0EDD  0839               	movf	printf@cp,w
 10706  0EDE  0084               	movwf	4
 10707  0EDF  083A               	movf	printf@cp+1,w
 10708  0EE0  0085               	movwf	5
 10709  0EE1  0800               	movf	0,w	;code access
 10710  0EE2  319F  279C  318E   	fcall	_putch
 10711  0EE5  3001               	movlw	1
 10712  0EE6  0020               	movlb	0	; select bank0
 10713  0EE7  07B9               	addwf	printf@cp,f
 10714  0EE8  3000               	movlw	0
 10715  0EE9  3DBA               	addwfc	printf@cp+1,f
 10716  0EEA                     l4835:	
 10717  0EEA  3001               	movlw	1
 10718  0EEB  02BE               	subwf	printf@len,f
 10719  0EEC  3000               	movlw	0
 10720  0EED  3BBF               	subwfb	printf@len+1,f
 10721  0EEE  0A3E               	incf	printf@len,w
 10722  0EEF  1D03               	skipz
 10723  0EF0  2EDD               	goto	l4831
 10724  0EF1  0A3F               	incf	printf@len+1,w
 10725  0EF2  1903               	btfsc	3,2
 10726  0EF3  2E30               	goto	l4911
 10727  0EF4  2EDD               	goto	l4831
 10728  0EF5                     l4837:	
 10729                           ;doprnt.c: 802: default:
 10730                           
 10731                           ;doprnt.c: 774: continue;
 10732                           
 10733                           
 10734                           ;doprnt.c: 805: cp = (char *)&c;
 10735  0EF5  3043               	movlw	low printf@c
 10736  0EF6  00B9               	movwf	printf@cp
 10737  0EF7  3000               	movlw	high printf@c
 10738  0EF8  00BA               	movwf	printf@cp+1
 10739                           
 10740                           ;doprnt.c: 806: len = 1;
 10741  0EF9  3001               	movlw	1
 10742  0EFA  00BE               	movwf	printf@len
 10743  0EFB  3000               	movlw	0
 10744  0EFC  00BF               	movwf	printf@len+1
 10745                           
 10746                           ;doprnt.c: 807: goto dostring;
 10747  0EFD  2EBF               	goto	l4821
 10748  0EFE                     l700:	
 10749                           ;doprnt.c: 817: case 'u':
 10750                           
 10751                           
 10752                           ;doprnt.c: 818: flag |= 0x40;
 10753  0EFE  1740               	bsf	printf@flag,6
 10754                           
 10755                           ;doprnt.c: 822: }
 10756                           
 10757                           ;doprnt.c: 819: break;
 10758  0EFF  2F1E               	goto	l684
 10759  0F00                     l4843:	
 10760  0F00  0020               	movlb	0	; select bank0
 10761  0F01  082F               	movf	printf@f+1,w
 10762  0F02  00B5               	movwf	??_printf+1
 10763  0F03  082E               	movf	printf@f,w
 10764  0F04  00B4               	movwf	??_printf
 10765  0F05  0AAE               	incf	printf@f,f
 10766  0F06  1903               	skipnz
 10767  0F07  0AAF               	incf	printf@f+1,f
 10768  0F08  0834               	movf	??_printf,w
 10769  0F09  0084               	movwf	4
 10770  0F0A  0835               	movf	??_printf+1,w
 10771  0F0B  0085               	movwf	5
 10772  0F0C  0800               	movf	0,w	;code access
 10773  0F0D  00C3               	movwf	printf@c
 10774                           
 10775                           ; Switch size 1, requested type "space"
 10776                           ; Number of cases is 5, Range of values is 0 to 117
 10777                           ; switch strategies available:
 10778                           ; Name         Instructions Cycles
 10779                           ; simple_byte           16     9 (average)
 10780                           ; direct_byte          242     6 (fixed)
 10781                           ; jumptable            260     6 (fixed)
 10782                           ;	Chosen strategy is simple_byte
 10783  0F0E  3A00               	xorlw	0	; case 0
 10784  0F0F  1903               	skipnz
 10785  0F10  2FFF               	goto	l724
 10786  0F11  3A64               	xorlw	100	; case 100
 10787  0F12  1903               	skipnz
 10788  0F13  2F1E               	goto	l684
 10789  0F14  3A0D               	xorlw	13	; case 105
 10790  0F15  1903               	skipnz
 10791  0F16  2F1E               	goto	l684
 10792  0F17  3A1A               	xorlw	26	; case 115
 10793  0F18  1903               	skipnz
 10794  0F19  2E9B               	goto	l4807
 10795  0F1A  3A06               	xorlw	6	; case 117
 10796  0F1B  1903               	skipnz
 10797  0F1C  2EFE               	goto	l700
 10798  0F1D  2EF5               	goto	l4837
 10799  0F1E                     l684:	
 10800                           
 10801                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 10802  0F1E  0020               	movlb	0	; select bank0
 10803  0F1F  1B40               	btfsc	printf@flag,6
 10804  0F20  2F38               	goto	l4855
 10805                           
 10806                           ;doprnt.c: 1253: {
 10807                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 10808  0F21  083B               	movf	printf@ap,w
 10809  0F22  0086               	movwf	6
 10810  0F23  0187               	clrf	7
 10811  0F24  3F40               	moviw [0]fsr1
 10812  0F25  00BC               	movwf	printf@val
 10813  0F26  3F41               	moviw [1]fsr1
 10814  0F27  00BD               	movwf	printf@val+1
 10815  0F28  3002               	movlw	2
 10816  0F29  00B4               	movwf	??_printf
 10817  0F2A  0834               	movf	??_printf,w
 10818  0F2B  07BB               	addwf	printf@ap,f
 10819                           
 10820                           ;doprnt.c: 1261: if((int)val < 0) {
 10821  0F2C  1FBD               	btfss	printf@val+1,7
 10822  0F2D  2F43               	goto	l4859
 10823                           
 10824                           ;doprnt.c: 1262: flag |= 0x03;
 10825  0F2E  3003               	movlw	3
 10826  0F2F  00B4               	movwf	??_printf
 10827  0F30  0834               	movf	??_printf,w
 10828  0F31  04C0               	iorwf	printf@flag,f
 10829                           
 10830                           ;doprnt.c: 1263: val = -val;
 10831  0F32  09BC               	comf	printf@val,f
 10832  0F33  09BD               	comf	printf@val+1,f
 10833  0F34  0ABC               	incf	printf@val,f
 10834  0F35  1903               	skipnz
 10835  0F36  0ABD               	incf	printf@val+1,f
 10836                           
 10837                           ;doprnt.c: 1264: }
 10838                           ;doprnt.c: 1266: }
 10839  0F37  2F43               	goto	l4859
 10840  0F38                     l4855:	
 10841                           
 10842                           ;doprnt.c: 1268: else
 10843                           ;doprnt.c: 1273: {
 10844                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 10845  0F38  083B               	movf	printf@ap,w
 10846  0F39  0086               	movwf	6
 10847  0F3A  0187               	clrf	7
 10848  0F3B  3F40               	moviw [0]fsr1
 10849  0F3C  00BC               	movwf	printf@val
 10850  0F3D  3F41               	moviw [1]fsr1
 10851  0F3E  00BD               	movwf	printf@val+1
 10852  0F3F  3002               	movlw	2
 10853  0F40  00B4               	movwf	??_printf
 10854  0F41  0834               	movf	??_printf,w
 10855  0F42  07BB               	addwf	printf@ap,f
 10856  0F43                     l4859:	
 10857                           
 10858                           ;doprnt.c: 1287: }
 10859                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 10860  0F43  01C3               	clrf	printf@c
 10861  0F44  0AC3               	incf	printf@c,f
 10862  0F45  3005               	movlw	5
 10863  0F46  0643               	xorwf	printf@c,w
 10864  0F47  1903               	btfsc	3,2
 10865  0F48  2F68               	goto	l4871
 10866  0F49                     l4865:	
 10867                           
 10868                           ;doprnt.c: 1306: if(val < dpowers[c])
 10869  0F49  0843               	movf	printf@c,w
 10870  0F4A  00B4               	movwf	??_printf
 10871  0F4B  01B5               	clrf	??_printf+1
 10872  0F4C  35B4               	lslf	??_printf,f
 10873  0F4D  0DB5               	rlf	??_printf+1,f
 10874  0F4E  3000               	movlw	low (_dpowers| (0+32768))
 10875  0F4F  0734               	addwf	??_printf,w
 10876  0F50  0084               	movwf	4
 10877  0F51  3090               	movlw	high (_dpowers| (0+32768))
 10878  0F52  3D35               	addwfc	??_printf+1,w
 10879  0F53  0085               	movwf	5
 10880  0F54  3F00               	moviw [0]fsr0
 10881  0F55  00B6               	movwf	??_printf+2
 10882  0F56  3F01               	moviw [1]fsr0
 10883  0F57  00B7               	movwf	??_printf+3
 10884  0F58  0837               	movf	??_printf+3,w
 10885  0F59  023D               	subwf	printf@val+1,w
 10886  0F5A  1D03               	skipz
 10887  0F5B  2F5E               	goto	u5255
 10888  0F5C  0836               	movf	??_printf+2,w
 10889  0F5D  023C               	subwf	printf@val,w
 10890  0F5E                     u5255:	
 10891  0F5E  1C03               	btfss	3,0
 10892  0F5F  2F68               	goto	l4871
 10893                           
 10894                           ;doprnt.c: 1307: break;
 10895  0F60  3001               	movlw	1
 10896  0F61  00B4               	movwf	??_printf
 10897  0F62  0834               	movf	??_printf,w
 10898  0F63  07C3               	addwf	printf@c,f
 10899  0F64  3005               	movlw	5
 10900  0F65  0643               	xorwf	printf@c,w
 10901  0F66  1D03               	btfss	3,2
 10902  0F67  2F49               	goto	l4865
 10903  0F68                     l4871:	
 10904                           
 10905                           ;doprnt.c: 1345: if(width && flag & 0x03)
 10906  0F68  0841               	movf	printf@width,w
 10907  0F69  0442               	iorwf	printf@width+1,w
 10908  0F6A  1903               	btfsc	3,2
 10909  0F6B  2F74               	goto	l707
 10910  0F6C  0840               	movf	printf@flag,w
 10911  0F6D  3903               	andlw	3
 10912  0F6E  1903               	btfsc	3,2
 10913  0F6F  2F74               	goto	l707
 10914                           
 10915                           ;doprnt.c: 1346: width--;
 10916  0F70  30FF               	movlw	255
 10917  0F71  07C1               	addwf	printf@width,f
 10918  0F72  30FF               	movlw	255
 10919  0F73  3DC2               	addwfc	printf@width+1,f
 10920  0F74                     l707:	
 10921                           
 10922                           ;doprnt.c: 1381: if(width > c)
 10923  0F74  0843               	movf	printf@c,w
 10924  0F75  00B4               	movwf	??_printf
 10925  0F76  01B5               	clrf	??_printf+1
 10926  0F77  1BB4               	btfsc	??_printf,7
 10927  0F78  03B5               	decf	??_printf+1,f
 10928  0F79  0835               	movf	??_printf+1,w
 10929  0F7A  3A80               	xorlw	128
 10930  0F7B  00B6               	movwf	??_printf+2
 10931  0F7C  0842               	movf	printf@width+1,w
 10932  0F7D  3A80               	xorlw	128
 10933  0F7E  0236               	subwf	??_printf+2,w
 10934  0F7F  1D03               	skipz
 10935  0F80  2F83               	goto	u5295
 10936  0F81  0841               	movf	printf@width,w
 10937  0F82  0234               	subwf	??_printf,w
 10938  0F83                     u5295:	
 10939  0F83  1803               	skipnc
 10940  0F84  2F90               	goto	l4879
 10941                           
 10942                           ;doprnt.c: 1382: width -= c;
 10943  0F85  0020               	movlb	0	; select bank0
 10944  0F86  0843               	movf	printf@c,w
 10945  0F87  00B4               	movwf	??_printf
 10946  0F88  01B5               	clrf	??_printf+1
 10947  0F89  1BB4               	btfsc	??_printf,7
 10948  0F8A  03B5               	decf	??_printf+1,f
 10949  0F8B  0834               	movf	??_printf,w
 10950  0F8C  02C1               	subwf	printf@width,f
 10951  0F8D  0835               	movf	??_printf+1,w
 10952  0F8E  3BC2               	subwfb	printf@width+1,f
 10953  0F8F  2F93               	goto	l4881
 10954  0F90                     l4879:	
 10955                           
 10956                           ;doprnt.c: 1383: else
 10957                           ;doprnt.c: 1384: width = 0;
 10958  0F90  0020               	movlb	0	; select bank0
 10959  0F91  01C1               	clrf	printf@width
 10960  0F92  01C2               	clrf	printf@width+1
 10961  0F93                     l4881:	
 10962                           
 10963                           ;doprnt.c: 1387: if(flag & 0x04) {
 10964  0F93  1D40               	btfss	printf@flag,2
 10965  0F94  2FAC               	goto	l4893
 10966                           
 10967                           ;doprnt.c: 1392: if(flag & 0x03)
 10968  0F95  0840               	movf	printf@flag,w
 10969  0F96  3903               	andlw	3
 10970  0F97  1903               	btfsc	3,2
 10971  0F98  2F9D               	goto	l4887
 10972                           
 10973                           ;doprnt.c: 1393: (putch('-') );
 10974  0F99  302D               	movlw	45
 10975  0F9A  319F  279C  318E   	fcall	_putch
 10976  0F9D                     l4887:	
 10977                           
 10978                           ;doprnt.c: 1415: if(width)
 10979  0F9D  0020               	movlb	0	; select bank0
 10980  0F9E                     L15:	
 10981  0F9E  0841               	movf	printf@width,w
 10982  0F9F  0442               	iorwf	printf@width+1,w
 10983  0FA0  1903               	btfsc	3,2
 10984  0FA1  2FC5               	goto	l4903
 10985                           
 10986                           ;doprnt.c: 1417: (putch('0') );
 10987                           
 10988                           ;doprnt.c: 1416: do
 10989  0FA2  3030               	movlw	48
 10990  0FA3  319F  279C  318E   	fcall	_putch
 10991                           
 10992                           ;doprnt.c: 1418: while(--width);
 10993  0FA6  30FF               	movlw	255
 10994  0FA7  0020               	movlb	0	; select bank0
 10995  0FA8  07C1               	addwf	printf@width,f
 10996  0FA9  30FF               	movlw	255
 10997  0FAA  3DC2               	addwfc	printf@width+1,f
 10998  0FAB  2F9E               	goto	L15
 10999  0FAC                     l4893:	
 11000                           ;doprnt.c: 1420: } else
 11001                           
 11002                           
 11003                           ;doprnt.c: 1422: {
 11004                           ;doprnt.c: 1424: if(width
 11005                           ;doprnt.c: 1428: )
 11006  0FAC  0841               	movf	printf@width,w
 11007  0FAD  0442               	iorwf	printf@width+1,w
 11008  0FAE  1903               	btfsc	3,2
 11009  0FAF  2FBD               	goto	l4899
 11010  0FB0                     l4895:	
 11011                           ;doprnt.c: 1429: do
 11012                           
 11013                           
 11014                           ;doprnt.c: 1430: (putch(' ') );
 11015  0FB0  3020               	movlw	32
 11016  0FB1  319F  279C  318E   	fcall	_putch
 11017                           
 11018                           ;doprnt.c: 1431: while(--width);
 11019  0FB4  30FF               	movlw	255
 11020  0FB5  0020               	movlb	0	; select bank0
 11021  0FB6  07C1               	addwf	printf@width,f
 11022  0FB7  30FF               	movlw	255
 11023  0FB8  3DC2               	addwfc	printf@width+1,f
 11024  0FB9  0841               	movf	printf@width,w
 11025  0FBA  0442               	iorwf	printf@width+1,w
 11026  0FBB  1D03               	btfss	3,2
 11027  0FBC  2FB0               	goto	l4895
 11028  0FBD                     l4899:	
 11029                           
 11030                           ;doprnt.c: 1438: if(flag & 0x03)
 11031  0FBD  0840               	movf	printf@flag,w
 11032  0FBE  3903               	andlw	3
 11033  0FBF  1903               	btfsc	3,2
 11034  0FC0  2FC5               	goto	l4903
 11035                           
 11036                           ;doprnt.c: 1439: (putch('-') );
 11037  0FC1  302D               	movlw	45
 11038  0FC2  319F  279C  318E   	fcall	_putch
 11039  0FC5                     l4903:	
 11040                           
 11041                           ;doprnt.c: 1469: }
 11042                           ;doprnt.c: 1472: prec = c;
 11043  0FC5  0020               	movlb	0	; select bank0
 11044  0FC6  0843               	movf	printf@c,w
 11045  0FC7  00B4               	movwf	??_printf
 11046  0FC8  0834               	movf	??_printf,w
 11047  0FC9  00B8               	movwf	printf@prec
 11048  0FCA                     l4909:	
 11049                           ;doprnt.c: 1474: while(prec--) {
 11050                           
 11051  0FCA  30FF               	movlw	255
 11052  0FCB  0020               	movlb	0	; select bank0
 11053  0FCC  00B4               	movwf	??_printf
 11054  0FCD  0834               	movf	??_printf,w
 11055  0FCE  07B8               	addwf	printf@prec,f
 11056  0FCF  0A38               	incf	printf@prec,w
 11057  0FD0  1903               	btfsc	3,2
 11058  0FD1  2E30               	goto	l4911
 11059                           
 11060                           ;doprnt.c: 1478: {
 11061                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 11062  0FD2  300A               	movlw	10
 11063  0FD3  00A8               	movwf	___lwmod@divisor
 11064  0FD4  3000               	movlw	0
 11065  0FD5  00A9               	movwf	___lwmod@divisor+1
 11066  0FD6  0838               	movf	printf@prec,w
 11067  0FD7  00B4               	movwf	??_printf
 11068  0FD8  01B5               	clrf	??_printf+1
 11069  0FD9  35B4               	lslf	??_printf,f
 11070  0FDA  0DB5               	rlf	??_printf+1,f
 11071  0FDB  3000               	movlw	low (_dpowers| (0+32768))
 11072  0FDC  0734               	addwf	??_printf,w
 11073  0FDD  0084               	movwf	4
 11074  0FDE  3090               	movlw	high (_dpowers| (0+32768))
 11075  0FDF  3D35               	addwfc	??_printf+1,w
 11076  0FE0  0085               	movwf	5
 11077  0FE1  3F00               	moviw [0]fsr0
 11078  0FE2  00A0               	movwf	___lwdiv@divisor
 11079  0FE3  3F01               	moviw [1]fsr0
 11080  0FE4  00A1               	movwf	___lwdiv@divisor+1
 11081  0FE5  083D               	movf	printf@val+1,w
 11082  0FE6  00A3               	movwf	___lwdiv@dividend+1
 11083  0FE7  083C               	movf	printf@val,w
 11084  0FE8  00A2               	movwf	___lwdiv@dividend
 11085  0FE9  3187  27C9  318E   	fcall	___lwdiv
 11086  0FEC  0020               	movlb	0	; select bank0
 11087  0FED  0821               	movf	?___lwdiv+1,w
 11088  0FEE  00AB               	movwf	___lwmod@dividend+1
 11089  0FEF  0820               	movf	?___lwdiv,w
 11090  0FF0  00AA               	movwf	___lwmod@dividend
 11091  0FF1  3194  2494  318E   	fcall	___lwmod
 11092  0FF4  0020               	movlb	0	; select bank0
 11093  0FF5  0828               	movf	?___lwmod,w
 11094  0FF6  3E30               	addlw	48
 11095  0FF7  00B6               	movwf	??_printf+2
 11096  0FF8  0836               	movf	??_printf+2,w
 11097  0FF9  00C3               	movwf	printf@c
 11098                           
 11099                           ;doprnt.c: 1523: }
 11100                           ;doprnt.c: 1524: (putch(c) );
 11101  0FFA  0843               	movf	printf@c,w
 11102  0FFB  319F  279C  318E   	fcall	_putch
 11103  0FFE  2FCA               	goto	l4909
 11104  0FFF                     l724:	
 11105                           ;doprnt.c: 1540: return 0;
 11106                           ;	Return value of _printf is never used
 11107                           
 11108                           ;doprnt.c: 1525: }
 11109                           ;doprnt.c: 1533: }
 11110                           ;doprnt.c: 1535: alldone:
 11111                           
 11112  0FFF  0008               	return
 11113  1000                     __end_of_printf:	
 11114                           
 11115                           	psect	text46
 11116  1F9C                     __ptext46:	
 11117 ;; *************** function _putch *****************
 11118 ;; Defined at:
 11119 ;;		line 160 in file "mcc_generated_files/eusart.c"
 11120 ;; Parameters:    Size  Location     Type
 11121 ;;  txData          1    wreg     unsigned char 
 11122 ;; Auto vars:     Size  Location     Type
 11123 ;;  txData          1    2[BANK0 ] unsigned char 
 11124 ;; Return value:  Size  Location     Type
 11125 ;;                  1    wreg      void 
 11126 ;; Registers used:
 11127 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11128 ;; Tracked objects:
 11129 ;;		On entry : 0/0
 11130 ;;		On exit  : 0/0
 11131 ;;		Unchanged: 0/0
 11132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11134 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11135 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11136 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11137 ;;Total ram usage:        1 bytes
 11138 ;; Hardware stack levels used:    1
 11139 ;; Hardware stack levels required when called:    4
 11140 ;; This function calls:
 11141 ;;		_EUSART_Write
 11142 ;; This function is called by:
 11143 ;;		_printf
 11144 ;; This function uses a non-reentrant model
 11145 ;;
 11146                           
 11147                           
 11148                           ;psect for function _putch
 11149  1F9C                     _putch:	
 11150                           
 11151                           ;incstack = 0
 11152                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11153                           ;putch@txData stored from wreg
 11154  1F9C  0020               	movlb	0	; select bank0
 11155  1F9D  00A2               	movwf	putch@txData
 11156                           
 11157                           ;eusart.c: 162: EUSART_Write(txData);
 11158  1F9E  0822               	movf	putch@txData,w
 11159  1F9F  3193  239E         	fcall	_EUSART_Write
 11160  1FA1  0008               	return
 11161  1FA2                     __end_of_putch:	
 11162                           
 11163                           	psect	text47
 11164  139E                     __ptext47:	
 11165 ;; *************** function _EUSART_Write *****************
 11166 ;; Defined at:
 11167 ;;		line 132 in file "mcc_generated_files/eusart.c"
 11168 ;; Parameters:    Size  Location     Type
 11169 ;;  txData          1    wreg     unsigned char 
 11170 ;; Auto vars:     Size  Location     Type
 11171 ;;  txData          1    1[BANK0 ] unsigned char 
 11172 ;; Return value:  Size  Location     Type
 11173 ;;                  1    wreg      void 
 11174 ;; Registers used:
 11175 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11176 ;; Tracked objects:
 11177 ;;		On entry : 0/0
 11178 ;;		On exit  : 0/0
 11179 ;;		Unchanged: 0/0
 11180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11182 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11183 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11184 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11185 ;;Total ram usage:        2 bytes
 11186 ;; Hardware stack levels used:    1
 11187 ;; Hardware stack levels required when called:    3
 11188 ;; This function calls:
 11189 ;;		Nothing
 11190 ;; This function is called by:
 11191 ;;		_putch
 11192 ;; This function uses a non-reentrant model
 11193 ;;
 11194                           
 11195                           
 11196                           ;psect for function _EUSART_Write
 11197  139E                     _EUSART_Write:	
 11198                           
 11199                           ;incstack = 0
 11200                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
 11201                           ;EUSART_Write@txData stored from wreg
 11202  139E  0020               	movlb	0	; select bank0
 11203  139F  00A1               	movwf	EUSART_Write@txData
 11204  13A0                     l3235:	
 11205                           ;eusart.c: 135: {
 11206                           
 11207                           ;eusart.c: 134: while(0 == eusartTxBufferRemaining)
 11208                           
 11209  13A0  0874               	movf	_eusartTxBufferRemaining,w	;volatile
 11210  13A1  1903               	btfsc	3,2
 11211  13A2  2BA0               	goto	l3235
 11212                           
 11213                           ;eusart.c: 136: }
 11214                           ;eusart.c: 138: if(0 == PIE1bits.TXIE)
 11215  13A3  0021               	movlb	1	; select bank1
 11216  13A4  1A11               	btfsc	17,4	;volatile
 11217  13A5  2BAB               	goto	l244
 11218                           
 11219                           ;eusart.c: 139: {
 11220                           ;eusart.c: 140: TXREG = txData;
 11221  13A6  0020               	movlb	0	; select bank0
 11222  13A7  0821               	movf	EUSART_Write@txData,w
 11223  13A8  0023               	movlb	3	; select bank3
 11224  13A9  009A               	movwf	26	;volatile
 11225                           
 11226                           ;eusart.c: 141: }
 11227  13AA  2BC0               	goto	l3249
 11228  13AB                     l244:	
 11229                           
 11230                           ;eusart.c: 142: else
 11231                           ;eusart.c: 143: {
 11232                           ;eusart.c: 144: PIE1bits.TXIE = 0;
 11233  13AB  1211               	bcf	17,4	;volatile
 11234                           
 11235                           ;eusart.c: 145: eusartTxBuffer[eusartTxHead++] = txData;
 11236  13AC  0020               	movlb	0	; select bank0
 11237  13AD  0821               	movf	EUSART_Write@txData,w
 11238  13AE  00A0               	movwf	??_EUSART_Write
 11239  13AF  0876               	movf	_eusartTxHead,w
 11240  13B0  3EA0               	addlw	(low (_eusartTxBuffer| (0+512)))& (0+255)
 11241  13B1  0086               	movwf	6
 11242  13B2  3002               	movlw	2	; select bank5/6
 11243  13B3  0087               	movwf	7
 11244  13B4  0820               	movf	??_EUSART_Write,w
 11245  13B5  0081               	movwf	1
 11246  13B6  3001               	movlw	1
 11247  13B7  00A0               	movwf	??_EUSART_Write
 11248  13B8  0820               	movf	??_EUSART_Write,w
 11249  13B9  07F6               	addwf	_eusartTxHead,f	;volatile
 11250                           
 11251                           ;eusart.c: 146: if(sizeof(eusartTxBuffer) <= eusartTxHead)
 11252  13BA  3040               	movlw	64
 11253  13BB  0276               	subwf	_eusartTxHead,w	;volatile
 11254  13BC  1803               	btfsc	3,0
 11255                           
 11256                           ;eusart.c: 147: {
 11257                           ;eusart.c: 148: eusartTxHead = 0;
 11258  13BD  01F6               	clrf	_eusartTxHead	;volatile
 11259                           
 11260                           ;eusart.c: 149: }
 11261                           ;eusart.c: 150: eusartTxBufferRemaining--;
 11262  13BE  3001               	movlw	1
 11263  13BF  02F4               	subwf	_eusartTxBufferRemaining,f	;volatile
 11264  13C0                     l3249:	
 11265                           
 11266                           ;eusart.c: 151: }
 11267                           ;eusart.c: 152: PIE1bits.TXIE = 1;
 11268  13C0  0021               	movlb	1	; select bank1
 11269  13C1  1611               	bsf	17,4	;volatile
 11270  13C2  0008               	return
 11271  13C3                     __end_of_EUSART_Write:	
 11272                           
 11273                           	psect	text48
 11274  1494                     __ptext48:	
 11275 ;; *************** function ___lwmod *****************
 11276 ;; Defined at:
 11277 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
 11278 ;; Parameters:    Size  Location     Type
 11279 ;;  divisor         2    8[BANK0 ] unsigned int 
 11280 ;;  dividend        2   10[BANK0 ] unsigned int 
 11281 ;; Auto vars:     Size  Location     Type
 11282 ;;  counter         1   13[BANK0 ] unsigned char 
 11283 ;; Return value:  Size  Location     Type
 11284 ;;                  2    8[BANK0 ] unsigned int 
 11285 ;; Registers used:
 11286 ;;		wreg, status,2, status,0
 11287 ;; Tracked objects:
 11288 ;;		On entry : 0/0
 11289 ;;		On exit  : 0/0
 11290 ;;		Unchanged: 0/0
 11291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11292 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11293 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11294 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11295 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11296 ;;Total ram usage:        6 bytes
 11297 ;; Hardware stack levels used:    1
 11298 ;; Hardware stack levels required when called:    3
 11299 ;; This function calls:
 11300 ;;		Nothing
 11301 ;; This function is called by:
 11302 ;;		_tick_handler
 11303 ;;		_inv_handler
 11304 ;;		_printf
 11305 ;; This function uses a non-reentrant model
 11306 ;;
 11307                           
 11308                           
 11309                           ;psect for function ___lwmod
 11310  1494                     ___lwmod:	
 11311                           
 11312                           ;incstack = 0
 11313                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 11314  1494  0020               	movlb	0	; select bank0
 11315  1495  0828               	movf	___lwmod@divisor,w
 11316  1496  0429               	iorwf	___lwmod@divisor+1,w
 11317  1497  1903               	btfsc	3,2
 11318  1498  2CBC               	goto	l3349
 11319  1499  01AD               	clrf	___lwmod@counter
 11320  149A  0AAD               	incf	___lwmod@counter,f
 11321  149B                     l3339:	
 11322  149B  1BA9               	btfsc	___lwmod@divisor+1,7
 11323  149C  2CA7               	goto	l3341
 11324  149D  3001               	movlw	1
 11325  149E                     u2805:	
 11326  149E  35A8               	lslf	___lwmod@divisor,f
 11327  149F  0DA9               	rlf	___lwmod@divisor+1,f
 11328  14A0  0B89               	decfsz	9,f
 11329  14A1  2C9E               	goto	u2805
 11330  14A2  3001               	movlw	1
 11331  14A3  00AC               	movwf	??___lwmod
 11332  14A4  082C               	movf	??___lwmod,w
 11333  14A5  07AD               	addwf	___lwmod@counter,f
 11334  14A6  2C9B               	goto	l3339
 11335  14A7                     l3341:	
 11336  14A7  0829               	movf	___lwmod@divisor+1,w
 11337  14A8  022B               	subwf	___lwmod@dividend+1,w
 11338  14A9  1D03               	skipz
 11339  14AA  2CAD               	goto	u2825
 11340  14AB  0828               	movf	___lwmod@divisor,w
 11341  14AC  022A               	subwf	___lwmod@dividend,w
 11342  14AD                     u2825:	
 11343  14AD  1C03               	skipc
 11344  14AE  2CB3               	goto	l3345
 11345  14AF  0828               	movf	___lwmod@divisor,w
 11346  14B0  02AA               	subwf	___lwmod@dividend,f
 11347  14B1  0829               	movf	___lwmod@divisor+1,w
 11348  14B2  3BAB               	subwfb	___lwmod@dividend+1,f
 11349  14B3                     l3345:	
 11350  14B3  3001               	movlw	1
 11351  14B4                     u2835:	
 11352  14B4  36A9               	lsrf	___lwmod@divisor+1,f
 11353  14B5  0CA8               	rrf	___lwmod@divisor,f
 11354  14B6  0B89               	decfsz	9,f
 11355  14B7  2CB4               	goto	u2835
 11356  14B8  3001               	movlw	1
 11357  14B9  02AD               	subwf	___lwmod@counter,f
 11358  14BA  1D03               	btfss	3,2
 11359  14BB  2CA7               	goto	l3341
 11360  14BC                     l3349:	
 11361  14BC  082B               	movf	___lwmod@dividend+1,w
 11362  14BD  00A9               	movwf	?___lwmod+1
 11363  14BE  082A               	movf	___lwmod@dividend,w
 11364  14BF  00A8               	movwf	?___lwmod
 11365  14C0  0008               	return
 11366  14C1                     __end_of___lwmod:	
 11367                           
 11368                           	psect	text49
 11369  07C9                     __ptext49:	
 11370 ;; *************** function ___lwdiv *****************
 11371 ;; Defined at:
 11372 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
 11373 ;; Parameters:    Size  Location     Type
 11374 ;;  divisor         2    0[BANK0 ] unsigned int 
 11375 ;;  dividend        2    2[BANK0 ] unsigned int 
 11376 ;; Auto vars:     Size  Location     Type
 11377 ;;  quotient        2    5[BANK0 ] unsigned int 
 11378 ;;  counter         1    7[BANK0 ] unsigned char 
 11379 ;; Return value:  Size  Location     Type
 11380 ;;                  2    0[BANK0 ] unsigned int 
 11381 ;; Registers used:
 11382 ;;		wreg, status,2, status,0
 11383 ;; Tracked objects:
 11384 ;;		On entry : 0/0
 11385 ;;		On exit  : 0/0
 11386 ;;		Unchanged: 0/0
 11387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11388 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11389 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11390 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11391 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11392 ;;Total ram usage:        8 bytes
 11393 ;; Hardware stack levels used:    1
 11394 ;; Hardware stack levels required when called:    3
 11395 ;; This function calls:
 11396 ;;		Nothing
 11397 ;; This function is called by:
 11398 ;;		_printf
 11399 ;; This function uses a non-reentrant model
 11400 ;;
 11401                           
 11402                           
 11403                           ;psect for function ___lwdiv
 11404  07C9                     ___lwdiv:	
 11405                           
 11406                           ;incstack = 0
 11407                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11408  07C9  0020               	movlb	0	; select bank0
 11409  07CA  01A5               	clrf	___lwdiv@quotient
 11410  07CB  01A6               	clrf	___lwdiv@quotient+1
 11411  07CC  0820               	movf	___lwdiv@divisor,w
 11412  07CD  0421               	iorwf	___lwdiv@divisor+1,w
 11413  07CE  1903               	btfsc	3,2
 11414  07CF  2FF9               	goto	l3327
 11415  07D0  01A7               	clrf	___lwdiv@counter
 11416  07D1  0AA7               	incf	___lwdiv@counter,f
 11417  07D2                     l3315:	
 11418  07D2  1BA1               	btfsc	___lwdiv@divisor+1,7
 11419  07D3  2FDE               	goto	l3317
 11420  07D4  3001               	movlw	1
 11421  07D5                     u2735:	
 11422  07D5  35A0               	lslf	___lwdiv@divisor,f
 11423  07D6  0DA1               	rlf	___lwdiv@divisor+1,f
 11424  07D7  0B89               	decfsz	9,f
 11425  07D8  2FD5               	goto	u2735
 11426  07D9  3001               	movlw	1
 11427  07DA  00A4               	movwf	??___lwdiv
 11428  07DB  0824               	movf	??___lwdiv,w
 11429  07DC  07A7               	addwf	___lwdiv@counter,f
 11430  07DD  2FD2               	goto	l3315
 11431  07DE                     l3317:	
 11432  07DE  3001               	movlw	1
 11433  07DF                     u2755:	
 11434  07DF  35A5               	lslf	___lwdiv@quotient,f
 11435  07E0  0DA6               	rlf	___lwdiv@quotient+1,f
 11436  07E1  0B89               	decfsz	9,f
 11437  07E2  2FDF               	goto	u2755
 11438  07E3  0821               	movf	___lwdiv@divisor+1,w
 11439  07E4  0223               	subwf	___lwdiv@dividend+1,w
 11440  07E5  1D03               	skipz
 11441  07E6  2FE9               	goto	u2765
 11442  07E7  0820               	movf	___lwdiv@divisor,w
 11443  07E8  0222               	subwf	___lwdiv@dividend,w
 11444  07E9                     u2765:	
 11445  07E9  1C03               	skipc
 11446  07EA  2FF0               	goto	l3323
 11447  07EB  0820               	movf	___lwdiv@divisor,w
 11448  07EC  02A2               	subwf	___lwdiv@dividend,f
 11449  07ED  0821               	movf	___lwdiv@divisor+1,w
 11450  07EE  3BA3               	subwfb	___lwdiv@dividend+1,f
 11451  07EF  1425               	bsf	___lwdiv@quotient,0
 11452  07F0                     l3323:	
 11453  07F0  3001               	movlw	1
 11454  07F1                     u2775:	
 11455  07F1  36A1               	lsrf	___lwdiv@divisor+1,f
 11456  07F2  0CA0               	rrf	___lwdiv@divisor,f
 11457  07F3  0B89               	decfsz	9,f
 11458  07F4  2FF1               	goto	u2775
 11459  07F5  3001               	movlw	1
 11460  07F6  02A7               	subwf	___lwdiv@counter,f
 11461  07F7  1D03               	btfss	3,2
 11462  07F8  2FDE               	goto	l3317
 11463  07F9                     l3327:	
 11464  07F9  0826               	movf	___lwdiv@quotient+1,w
 11465  07FA  00A1               	movwf	?___lwdiv+1
 11466  07FB  0825               	movf	___lwdiv@quotient,w
 11467  07FC  00A0               	movwf	?___lwdiv
 11468  07FD  0008               	return
 11469  07FE                     __end_of___lwdiv:	
 11470                           
 11471                           	psect	text50
 11472  120E                     __ptext50:	
 11473 ;; *************** function _concat *****************
 11474 ;; Defined at:
 11475 ;;		line 197 in file "protocol.c"
 11476 ;; Parameters:    Size  Location     Type
 11477 ;;  msb             1    wreg     unsigned char 
 11478 ;;  lsb             1    0[BANK0 ] unsigned char 
 11479 ;; Auto vars:     Size  Location     Type
 11480 ;;  msb             1    7[BANK0 ] unsigned char 
 11481 ;; Return value:  Size  Location     Type
 11482 ;;                  2    0[BANK0 ] unsigned int 
 11483 ;; Registers used:
 11484 ;;		wreg, status,2, status,0
 11485 ;; Tracked objects:
 11486 ;;		On entry : 0/0
 11487 ;;		On exit  : 0/0
 11488 ;;		Unchanged: 0/0
 11489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11490 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11491 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11492 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11493 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11494 ;;Total ram usage:        8 bytes
 11495 ;; Hardware stack levels used:    1
 11496 ;; Hardware stack levels required when called:    3
 11497 ;; This function calls:
 11498 ;;		Nothing
 11499 ;; This function is called by:
 11500 ;;		_PROTOCOL_Print_TLV
 11501 ;; This function uses a non-reentrant model
 11502 ;;
 11503                           
 11504                           
 11505                           ;psect for function _concat
 11506  120E                     _concat:	
 11507                           
 11508                           ;incstack = 0
 11509                           ; Regs used in _concat: [wreg+status,2+status,0]
 11510                           ;concat@msb stored from wreg
 11511  120E  0020               	movlb	0	; select bank0
 11512  120F  00A7               	movwf	concat@msb
 11513                           
 11514                           ;protocol.c: 198: return (uint16_t)msb * 256 + (uint16_t)lsb;
 11515  1210  0820               	movf	concat@lsb,w
 11516  1211  00A2               	movwf	??_concat
 11517  1212  01A3               	clrf	??_concat+1
 11518  1213  0827               	movf	concat@msb,w
 11519  1214  00A4               	movwf	??_concat+2
 11520  1215  01A5               	clrf	??_concat+3
 11521  1216  0824               	movf	??_concat+2,w
 11522  1217  00A5               	movwf	??_concat+3
 11523  1218  01A4               	clrf	??_concat+2
 11524  1219  0822               	movf	??_concat,w
 11525  121A  0724               	addwf	??_concat+2,w
 11526  121B  00A0               	movwf	?_concat
 11527  121C  0823               	movf	??_concat+1,w
 11528  121D  3D25               	addwfc	??_concat+3,w
 11529  121E  00A1               	movwf	?_concat+1
 11530  121F  0008               	return
 11531  1220                     __end_of_concat:	
 11532                           
 11533                           	psect	text51
 11534  11DE                     __ptext51:	
 11535 ;; *************** function _abs *****************
 11536 ;; Defined at:
 11537 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\abs.c"
 11538 ;; Parameters:    Size  Location     Type
 11539 ;;  a               2    7[BANK0 ] int 
 11540 ;; Auto vars:     Size  Location     Type
 11541 ;;		None
 11542 ;; Return value:  Size  Location     Type
 11543 ;;                  2    7[BANK0 ] int 
 11544 ;; Registers used:
 11545 ;;		wreg, status,2, status,0
 11546 ;; Tracked objects:
 11547 ;;		On entry : 0/0
 11548 ;;		On exit  : 0/0
 11549 ;;		Unchanged: 0/0
 11550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11551 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11552 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11553 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11554 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11555 ;;Total ram usage:        4 bytes
 11556 ;; Hardware stack levels used:    1
 11557 ;; Hardware stack levels required when called:    3
 11558 ;; This function calls:
 11559 ;;		Nothing
 11560 ;; This function is called by:
 11561 ;;		_PROTOCOL_Print_TLV
 11562 ;; This function uses a non-reentrant model
 11563 ;;
 11564                           
 11565                           
 11566                           ;psect for function _abs
 11567  11DE                     _abs:	
 11568                           
 11569                           ;incstack = 0
 11570                           ; Regs used in _abs: [wreg+status,2+status,0]
 11571  11DE  0020               	movlb	0	; select bank0
 11572  11DF  1FA8               	btfss	abs@a+1,7
 11573  11E0  0008               	return
 11574  11E1  0927               	comf	abs@a,w
 11575  11E2  00A9               	movwf	??_abs
 11576  11E3  0928               	comf	abs@a+1,w
 11577  11E4  00AA               	movwf	??_abs+1
 11578  11E5  0AA9               	incf	??_abs,f
 11579  11E6  1903               	skipnz
 11580  11E7  0AAA               	incf	??_abs+1,f
 11581  11E8  0829               	movf	??_abs,w
 11582  11E9  00A7               	movwf	?_abs
 11583  11EA  082A               	movf	??_abs+1,w
 11584  11EB  00A8               	movwf	?_abs+1
 11585  11EC  0008               	return
 11586  11ED                     __end_of_abs:	
 11587                           
 11588                           	psect	text52
 11589  15A0                     __ptext52:	
 11590 ;; *************** function ___awmod *****************
 11591 ;; Defined at:
 11592 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awmod.c"
 11593 ;; Parameters:    Size  Location     Type
 11594 ;;  divisor         2    0[BANK0 ] int 
 11595 ;;  dividend        2    2[BANK0 ] int 
 11596 ;; Auto vars:     Size  Location     Type
 11597 ;;  sign            1    6[BANK0 ] unsigned char 
 11598 ;;  counter         1    5[BANK0 ] unsigned char 
 11599 ;; Return value:  Size  Location     Type
 11600 ;;                  2    0[BANK0 ] int 
 11601 ;; Registers used:
 11602 ;;		wreg, status,2, status,0
 11603 ;; Tracked objects:
 11604 ;;		On entry : 0/0
 11605 ;;		On exit  : 0/0
 11606 ;;		Unchanged: 0/0
 11607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11608 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11609 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11610 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11611 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11612 ;;Total ram usage:        7 bytes
 11613 ;; Hardware stack levels used:    1
 11614 ;; Hardware stack levels required when called:    3
 11615 ;; This function calls:
 11616 ;;		Nothing
 11617 ;; This function is called by:
 11618 ;;		_PROTOCOL_Print_TLV
 11619 ;; This function uses a non-reentrant model
 11620 ;;
 11621                           
 11622                           
 11623                           ;psect for function ___awmod
 11624  15A0                     ___awmod:	
 11625                           
 11626                           ;incstack = 0
 11627                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 11628  15A0  0020               	movlb	0	; select bank0
 11629  15A1  01A6               	clrf	___awmod@sign
 11630  15A2  1FA3               	btfss	___awmod@dividend+1,7
 11631  15A3  2DAB               	goto	l3559
 11632  15A4  09A2               	comf	___awmod@dividend,f
 11633  15A5  09A3               	comf	___awmod@dividend+1,f
 11634  15A6  0AA2               	incf	___awmod@dividend,f
 11635  15A7  1903               	skipnz
 11636  15A8  0AA3               	incf	___awmod@dividend+1,f
 11637  15A9  01A6               	clrf	___awmod@sign
 11638  15AA  0AA6               	incf	___awmod@sign,f
 11639  15AB                     l3559:	
 11640  15AB  1FA1               	btfss	___awmod@divisor+1,7
 11641  15AC  2DB2               	goto	l3563
 11642  15AD  09A0               	comf	___awmod@divisor,f
 11643  15AE  09A1               	comf	___awmod@divisor+1,f
 11644  15AF  0AA0               	incf	___awmod@divisor,f
 11645  15B0  1903               	skipnz
 11646  15B1  0AA1               	incf	___awmod@divisor+1,f
 11647  15B2                     l3563:	
 11648  15B2  0820               	movf	___awmod@divisor,w
 11649  15B3  0421               	iorwf	___awmod@divisor+1,w
 11650  15B4  1903               	btfsc	3,2
 11651  15B5  2DD9               	goto	l3581
 11652  15B6  01A5               	clrf	___awmod@counter
 11653  15B7  0AA5               	incf	___awmod@counter,f
 11654  15B8                     l3571:	
 11655  15B8  1BA1               	btfsc	___awmod@divisor+1,7
 11656  15B9  2DC4               	goto	l3573
 11657  15BA  3001               	movlw	1
 11658  15BB                     u3265:	
 11659  15BB  35A0               	lslf	___awmod@divisor,f
 11660  15BC  0DA1               	rlf	___awmod@divisor+1,f
 11661  15BD  0B89               	decfsz	9,f
 11662  15BE  2DBB               	goto	u3265
 11663  15BF  3001               	movlw	1
 11664  15C0  00A4               	movwf	??___awmod
 11665  15C1  0824               	movf	??___awmod,w
 11666  15C2  07A5               	addwf	___awmod@counter,f
 11667  15C3  2DB8               	goto	l3571
 11668  15C4                     l3573:	
 11669  15C4  0821               	movf	___awmod@divisor+1,w
 11670  15C5  0223               	subwf	___awmod@dividend+1,w
 11671  15C6  1D03               	skipz
 11672  15C7  2DCA               	goto	u3285
 11673  15C8  0820               	movf	___awmod@divisor,w
 11674  15C9  0222               	subwf	___awmod@dividend,w
 11675  15CA                     u3285:	
 11676  15CA  1C03               	skipc
 11677  15CB  2DD0               	goto	l3577
 11678  15CC  0820               	movf	___awmod@divisor,w
 11679  15CD  02A2               	subwf	___awmod@dividend,f
 11680  15CE  0821               	movf	___awmod@divisor+1,w
 11681  15CF  3BA3               	subwfb	___awmod@dividend+1,f
 11682  15D0                     l3577:	
 11683  15D0  3001               	movlw	1
 11684  15D1                     u3295:	
 11685  15D1  36A1               	lsrf	___awmod@divisor+1,f
 11686  15D2  0CA0               	rrf	___awmod@divisor,f
 11687  15D3  0B89               	decfsz	9,f
 11688  15D4  2DD1               	goto	u3295
 11689  15D5  3001               	movlw	1
 11690  15D6  02A5               	subwf	___awmod@counter,f
 11691  15D7  1D03               	btfss	3,2
 11692  15D8  2DC4               	goto	l3573
 11693  15D9                     l3581:	
 11694  15D9  0826               	movf	___awmod@sign,w
 11695  15DA  1903               	btfsc	3,2
 11696  15DB  2DE1               	goto	l3585
 11697  15DC  09A2               	comf	___awmod@dividend,f
 11698  15DD  09A3               	comf	___awmod@dividend+1,f
 11699  15DE  0AA2               	incf	___awmod@dividend,f
 11700  15DF  1903               	skipnz
 11701  15E0  0AA3               	incf	___awmod@dividend+1,f
 11702  15E1                     l3585:	
 11703  15E1  0823               	movf	___awmod@dividend+1,w
 11704  15E2  00A1               	movwf	?___awmod+1
 11705  15E3  0822               	movf	___awmod@dividend,w
 11706  15E4  00A0               	movwf	?___awmod
 11707  15E5  0008               	return
 11708  15E6                     __end_of___awmod:	
 11709                           
 11710                           	psect	text53
 11711  14EE                     __ptext53:	
 11712 ;; *************** function _detected *****************
 11713 ;; Defined at:
 11714 ;;		line 211 in file "main.c"
 11715 ;; Parameters:    Size  Location     Type
 11716 ;;  dev_addr        1    wreg     unsigned char 
 11717 ;; Auto vars:     Size  Location     Type
 11718 ;;  dev_addr        1   15[BANK0 ] unsigned char 
 11719 ;;  exist           1   14[BANK0 ] unsigned char 
 11720 ;;  x               1   13[BANK0 ] unsigned char 
 11721 ;;  y               1   12[BANK0 ] unsigned char 
 11722 ;; Return value:  Size  Location     Type
 11723 ;;                  1    wreg      unsigned char 
 11724 ;; Registers used:
 11725 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11726 ;; Tracked objects:
 11727 ;;		On entry : 0/0
 11728 ;;		On exit  : 0/0
 11729 ;;		Unchanged: 0/0
 11730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11732 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11733 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11734 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11735 ;;Total ram usage:        7 bytes
 11736 ;; Hardware stack levels used:    1
 11737 ;; Hardware stack levels required when called:    4
 11738 ;; This function calls:
 11739 ;;		___awdiv
 11740 ;; This function is called by:
 11741 ;;		_one_shot_sen
 11742 ;;		_fetch
 11743 ;; This function uses a non-reentrant model
 11744 ;;
 11745                           
 11746                           
 11747                           ;psect for function _detected
 11748  14EE                     _detected:	
 11749                           
 11750                           ;incstack = 0
 11751                           ; Regs used in _detected: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11752                           ;detected@dev_addr stored from wreg
 11753  14EE  0020               	movlb	0	; select bank0
 11754  14EF  00AF               	movwf	detected@dev_addr
 11755                           
 11756                           ;main.c: 212: uint8_t y = dev_addr / 8;
 11757  14F0  3008               	movlw	8
 11758  14F1  00A0               	movwf	___awdiv@divisor
 11759  14F2  3000               	movlw	0
 11760  14F3  00A1               	movwf	___awdiv@divisor+1
 11761  14F4  082F               	movf	detected@dev_addr,w
 11762  14F5  00A9               	movwf	??_detected
 11763  14F6  01AA               	clrf	??_detected+1
 11764  14F7  0829               	movf	??_detected,w
 11765  14F8  00A2               	movwf	___awdiv@dividend
 11766  14F9  082A               	movf	??_detected+1,w
 11767  14FA  00A3               	movwf	___awdiv@dividend+1
 11768  14FB  3188  203A  3194   	fcall	___awdiv
 11769  14FE  0020               	movlb	0	; select bank0
 11770  14FF  0820               	movf	?___awdiv,w
 11771  1500  00AB               	movwf	??_detected+2
 11772  1501  082B               	movf	??_detected+2,w
 11773  1502  00AC               	movwf	detected@y
 11774                           
 11775                           ;main.c: 213: uint8_t x = dev_addr % 8;
 11776  1503  082F               	movf	detected@dev_addr,w
 11777  1504  3907               	andlw	7
 11778  1505  00A9               	movwf	??_detected
 11779  1506  0829               	movf	??_detected,w
 11780  1507  00AD               	movwf	detected@x
 11781                           
 11782                           ;main.c: 214: bool exist = 0;
 11783  1508  01AE               	clrf	detected@exist
 11784                           
 11785                           ;main.c: 215: if ((dev_map[y] & (0x01 << x)) > 0) {
 11786  1509  082C               	movf	detected@y,w
 11787  150A  3E20               	addlw	(low (_dev_map| (0+256)))& (0+255)
 11788  150B  0086               	movwf	6
 11789  150C  3001               	movlw	1	; select bank2/3
 11790  150D  0087               	movwf	7
 11791  150E  3001               	movlw	1
 11792  150F  00A9               	movwf	??_detected
 11793  1510  0A2D               	incf	detected@x,w
 11794  1511  2D13               	goto	u3624
 11795  1512                     u3625:	
 11796  1512  35A9               	lslf	??_detected,f
 11797  1513                     u3624:	
 11798  1513  0B89               	decfsz	9,f
 11799  1514  2D12               	goto	u3625
 11800  1515  0829               	movf	??_detected,w
 11801  1516  0501               	andwf	1,w
 11802  1517  1903               	btfsc	3,2
 11803  1518  2D1B               	goto	l3801
 11804                           
 11805                           ;main.c: 216: exist = 1;
 11806  1519  01AE               	clrf	detected@exist
 11807  151A  0AAE               	incf	detected@exist,f
 11808  151B                     l3801:	
 11809                           
 11810                           ;main.c: 217: }
 11811                           ;main.c: 218: return exist;
 11812  151B  082E               	movf	detected@exist,w
 11813  151C  0008               	return
 11814  151D                     __end_of_detected:	
 11815                           
 11816                           	psect	text54
 11817  083A                     __ptext54:	
 11818 ;; *************** function ___awdiv *****************
 11819 ;; Defined at:
 11820 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
 11821 ;; Parameters:    Size  Location     Type
 11822 ;;  divisor         2    0[BANK0 ] int 
 11823 ;;  dividend        2    2[BANK0 ] int 
 11824 ;; Auto vars:     Size  Location     Type
 11825 ;;  quotient        2    7[BANK0 ] int 
 11826 ;;  sign            1    6[BANK0 ] unsigned char 
 11827 ;;  counter         1    5[BANK0 ] unsigned char 
 11828 ;; Return value:  Size  Location     Type
 11829 ;;                  2    0[BANK0 ] int 
 11830 ;; Registers used:
 11831 ;;		wreg, status,2, status,0
 11832 ;; Tracked objects:
 11833 ;;		On entry : 0/0
 11834 ;;		On exit  : 0/0
 11835 ;;		Unchanged: 0/0
 11836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11837 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11838 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11839 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11840 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11841 ;;Total ram usage:        9 bytes
 11842 ;; Hardware stack levels used:    1
 11843 ;; Hardware stack levels required when called:    3
 11844 ;; This function calls:
 11845 ;;		Nothing
 11846 ;; This function is called by:
 11847 ;;		_init
 11848 ;;		_add_dev
 11849 ;;		_del_dev
 11850 ;;		_detected
 11851 ;;		_command_handler
 11852 ;;		_PROTOCOL_Print_TLV
 11853 ;; This function uses a non-reentrant model
 11854 ;;
 11855                           
 11856                           
 11857                           ;psect for function ___awdiv
 11858  083A                     ___awdiv:	
 11859                           
 11860                           ;incstack = 0
 11861                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 11862  083A  0020               	movlb	0	; select bank0
 11863  083B  01A6               	clrf	___awdiv@sign
 11864  083C  1FA1               	btfss	___awdiv@divisor+1,7
 11865  083D  2845               	goto	l3515
 11866  083E  09A0               	comf	___awdiv@divisor,f
 11867  083F  09A1               	comf	___awdiv@divisor+1,f
 11868  0840  0AA0               	incf	___awdiv@divisor,f
 11869  0841  1903               	skipnz
 11870  0842  0AA1               	incf	___awdiv@divisor+1,f
 11871  0843  01A6               	clrf	___awdiv@sign
 11872  0844  0AA6               	incf	___awdiv@sign,f
 11873  0845                     l3515:	
 11874  0845  1FA3               	btfss	___awdiv@dividend+1,7
 11875  0846  2850               	goto	l3521
 11876  0847  09A2               	comf	___awdiv@dividend,f
 11877  0848  09A3               	comf	___awdiv@dividend+1,f
 11878  0849  0AA2               	incf	___awdiv@dividend,f
 11879  084A  1903               	skipnz
 11880  084B  0AA3               	incf	___awdiv@dividend+1,f
 11881  084C  3001               	movlw	1
 11882  084D  00A4               	movwf	??___awdiv
 11883  084E  0824               	movf	??___awdiv,w
 11884  084F  06A6               	xorwf	___awdiv@sign,f
 11885  0850                     l3521:	
 11886  0850  01A7               	clrf	___awdiv@quotient
 11887  0851  01A8               	clrf	___awdiv@quotient+1
 11888  0852  0820               	movf	___awdiv@divisor,w
 11889  0853  0421               	iorwf	___awdiv@divisor+1,w
 11890  0854  1903               	btfsc	3,2
 11891  0855  287F               	goto	l3543
 11892  0856  01A5               	clrf	___awdiv@counter
 11893  0857  0AA5               	incf	___awdiv@counter,f
 11894  0858                     l3531:	
 11895  0858  1BA1               	btfsc	___awdiv@divisor+1,7
 11896  0859  2864               	goto	l3533
 11897  085A  3001               	movlw	1
 11898  085B                     u3165:	
 11899  085B  35A0               	lslf	___awdiv@divisor,f
 11900  085C  0DA1               	rlf	___awdiv@divisor+1,f
 11901  085D  0B89               	decfsz	9,f
 11902  085E  285B               	goto	u3165
 11903  085F  3001               	movlw	1
 11904  0860  00A4               	movwf	??___awdiv
 11905  0861  0824               	movf	??___awdiv,w
 11906  0862  07A5               	addwf	___awdiv@counter,f
 11907  0863  2858               	goto	l3531
 11908  0864                     l3533:	
 11909  0864  3001               	movlw	1
 11910  0865                     u3185:	
 11911  0865  35A7               	lslf	___awdiv@quotient,f
 11912  0866  0DA8               	rlf	___awdiv@quotient+1,f
 11913  0867  0B89               	decfsz	9,f
 11914  0868  2865               	goto	u3185
 11915  0869  0821               	movf	___awdiv@divisor+1,w
 11916  086A  0223               	subwf	___awdiv@dividend+1,w
 11917  086B  1D03               	skipz
 11918  086C  286F               	goto	u3195
 11919  086D  0820               	movf	___awdiv@divisor,w
 11920  086E  0222               	subwf	___awdiv@dividend,w
 11921  086F                     u3195:	
 11922  086F  1C03               	skipc
 11923  0870  2876               	goto	l3539
 11924  0871  0820               	movf	___awdiv@divisor,w
 11925  0872  02A2               	subwf	___awdiv@dividend,f
 11926  0873  0821               	movf	___awdiv@divisor+1,w
 11927  0874  3BA3               	subwfb	___awdiv@dividend+1,f
 11928  0875  1427               	bsf	___awdiv@quotient,0
 11929  0876                     l3539:	
 11930  0876  3001               	movlw	1
 11931  0877                     u3205:	
 11932  0877  36A1               	lsrf	___awdiv@divisor+1,f
 11933  0878  0CA0               	rrf	___awdiv@divisor,f
 11934  0879  0B89               	decfsz	9,f
 11935  087A  2877               	goto	u3205
 11936  087B  3001               	movlw	1
 11937  087C  02A5               	subwf	___awdiv@counter,f
 11938  087D  1D03               	btfss	3,2
 11939  087E  2864               	goto	l3533
 11940  087F                     l3543:	
 11941  087F  0826               	movf	___awdiv@sign,w
 11942  0880  1903               	btfsc	3,2
 11943  0881  2887               	goto	l3547
 11944  0882  09A7               	comf	___awdiv@quotient,f
 11945  0883  09A8               	comf	___awdiv@quotient+1,f
 11946  0884  0AA7               	incf	___awdiv@quotient,f
 11947  0885  1903               	skipnz
 11948  0886  0AA8               	incf	___awdiv@quotient+1,f
 11949  0887                     l3547:	
 11950  0887  0828               	movf	___awdiv@quotient+1,w
 11951  0888  00A1               	movwf	?___awdiv+1
 11952  0889  0827               	movf	___awdiv@quotient,w
 11953  088A  00A0               	movwf	?___awdiv
 11954  088B  0008               	return
 11955  088C                     __end_of___awdiv:	
 11956                           
 11957                           	psect	text55
 11958  0992                     __ptext55:	
 11959 ;; *************** function _atoi *****************
 11960 ;; Defined at:
 11961 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\atoi.c"
 11962 ;; Parameters:    Size  Location     Type
 11963 ;;  s               2    6[BANK0 ] PTR const unsigned char 
 11964 ;;		 -> buf(48), cmd_buf(192), 
 11965 ;; Auto vars:     Size  Location     Type
 11966 ;;  a               2   11[BANK0 ] int 
 11967 ;;  sign            1   10[BANK0 ] unsigned char 
 11968 ;; Return value:  Size  Location     Type
 11969 ;;                  2    6[BANK0 ] int 
 11970 ;; Registers used:
 11971 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11972 ;; Tracked objects:
 11973 ;;		On entry : 0/0
 11974 ;;		On exit  : 0/0
 11975 ;;		Unchanged: 0/0
 11976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11977 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11978 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11979 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11980 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11981 ;;Total ram usage:        7 bytes
 11982 ;; Hardware stack levels used:    1
 11983 ;; Hardware stack levels required when called:    4
 11984 ;; This function calls:
 11985 ;;		___wmul
 11986 ;;		_isdigit
 11987 ;; This function is called by:
 11988 ;;		_exec_remote_cmd
 11989 ;;		_command_handler
 11990 ;;		_PROTOCOL_Loop
 11991 ;; This function uses a non-reentrant model
 11992 ;;
 11993                           
 11994                           
 11995                           ;psect for function _atoi
 11996  0992                     _atoi:	
 11997  0992                     l5073:	
 11998                           ;incstack = 0
 11999                           ; Regs used in _atoi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12000                           
 12001  0992  0020               	movlb	0	; select bank0
 12002  0993  0826               	movf	atoi@s,w
 12003  0994  0086               	movwf	6
 12004  0995  0827               	movf	atoi@s+1,w
 12005  0996  0087               	movwf	7
 12006  0997  3020               	movlw	32
 12007  0998  0601               	xorwf	1,w
 12008  0999  1D03               	btfss	3,2
 12009  099A  29A1               	goto	l5075
 12010  099B                     l5071:	
 12011  099B  3001               	movlw	1
 12012  099C  0020               	movlb	0	; select bank0
 12013  099D  07A6               	addwf	atoi@s,f
 12014  099E  3000               	movlw	0
 12015  099F  3DA7               	addwfc	atoi@s+1,f
 12016  09A0  2992               	goto	l5073
 12017  09A1                     l5075:	
 12018  09A1  0826               	movf	atoi@s,w
 12019  09A2  0086               	movwf	6
 12020  09A3  0827               	movf	atoi@s+1,w
 12021  09A4  0087               	movwf	7
 12022  09A5  3009               	movlw	9
 12023  09A6  0601               	xorwf	1,w
 12024  09A7  1903               	btfsc	3,2
 12025  09A8  299B               	goto	l5071
 12026  09A9  01AB               	clrf	atoi@a
 12027  09AA  01AC               	clrf	atoi@a+1
 12028  09AB  01AA               	clrf	atoi@sign
 12029  09AC  0826               	movf	atoi@s,w
 12030  09AD  0086               	movwf	6
 12031  09AE  0827               	movf	atoi@s+1,w
 12032  09AF  0087               	movwf	7
 12033  09B0  302D               	movlw	45
 12034  09B1  0601               	xorwf	1,w
 12035  09B2  1D03               	btfss	3,2
 12036  09B3  29B9               	goto	l5085
 12037  09B4  3001               	movlw	1
 12038  09B5  00A8               	movwf	??_atoi
 12039  09B6  0828               	movf	??_atoi,w
 12040  09B7  07AA               	addwf	atoi@sign,f
 12041  09B8  29C1               	goto	l5091
 12042  09B9                     l5085:	
 12043  09B9  0826               	movf	atoi@s,w
 12044  09BA  0086               	movwf	6
 12045  09BB  0827               	movf	atoi@s+1,w
 12046  09BC  0087               	movwf	7
 12047  09BD  302B               	movlw	43
 12048  09BE  0601               	xorwf	1,w
 12049  09BF  1D03               	btfss	3,2
 12050  09C0  29C5               	goto	l5093
 12051  09C1                     l5091:	
 12052  09C1  3001               	movlw	1
 12053  09C2  07A6               	addwf	atoi@s,f
 12054  09C3  3000               	movlw	0
 12055  09C4  3DA7               	addwfc	atoi@s+1,f
 12056  09C5                     l5093:	
 12057  09C5  0826               	movf	atoi@s,w
 12058  09C6  0086               	movwf	6
 12059  09C7  0827               	movf	atoi@s+1,w
 12060  09C8  0087               	movwf	7
 12061  09C9  0801               	movf	1,w
 12062  09CA  319F  27F1  3189   	fcall	_isdigit
 12063  09CD  1C03               	btfss	3,0
 12064  09CE  29EE               	goto	l5095
 12065  09CF  0020               	movlb	0	; select bank0
 12066  09D0  082C               	movf	atoi@a+1,w
 12067  09D1  00A1               	movwf	___wmul@multiplier+1
 12068  09D2  082B               	movf	atoi@a,w
 12069  09D3  00A0               	movwf	___wmul@multiplier
 12070  09D4  300A               	movlw	10
 12071  09D5  00A2               	movwf	___wmul@multiplicand
 12072  09D6  3000               	movlw	0
 12073  09D7  00A3               	movwf	___wmul@multiplicand+1
 12074  09D8  3192  22E1  3189   	fcall	___wmul
 12075  09DB  0020               	movlb	0	; select bank0
 12076  09DC  0826               	movf	atoi@s,w
 12077  09DD  0086               	movwf	6
 12078  09DE  0827               	movf	atoi@s+1,w
 12079  09DF  0087               	movwf	7
 12080  09E0  0801               	movf	1,w
 12081  09E1  0720               	addwf	?___wmul,w
 12082  09E2  00A8               	movwf	??_atoi
 12083  09E3  0821               	movf	?___wmul+1,w
 12084  09E4  1803               	skipnc
 12085  09E5  0A21               	incf	?___wmul+1,w
 12086  09E6  00A9               	movwf	??_atoi+1
 12087  09E7  0828               	movf	??_atoi,w
 12088  09E8  3ED0               	addlw	208
 12089  09E9  00AB               	movwf	atoi@a
 12090  09EA  30FF               	movlw	255
 12091  09EB  3D29               	addwfc	??_atoi+1,w
 12092  09EC  00AC               	movwf	atoi@a+1
 12093  09ED  29C1               	goto	l5091
 12094  09EE                     l5095:	
 12095  09EE  0020               	movlb	0	; select bank0
 12096  09EF  082A               	movf	atoi@sign,w
 12097  09F0  1903               	btfsc	3,2
 12098  09F1  29FE               	goto	l5101
 12099  09F2  092B               	comf	atoi@a,w
 12100  09F3  00A8               	movwf	??_atoi
 12101  09F4  092C               	comf	atoi@a+1,w
 12102  09F5  00A9               	movwf	??_atoi+1
 12103  09F6  0AA8               	incf	??_atoi,f
 12104  09F7  1903               	skipnz
 12105  09F8  0AA9               	incf	??_atoi+1,f
 12106  09F9  0828               	movf	??_atoi,w
 12107  09FA  00A6               	movwf	?_atoi
 12108  09FB  0829               	movf	??_atoi+1,w
 12109  09FC  00A7               	movwf	?_atoi+1
 12110  09FD  0008               	return
 12111  09FE                     l5101:	
 12112  09FE  082C               	movf	atoi@a+1,w
 12113  09FF  00A7               	movwf	?_atoi+1
 12114  0A00  082B               	movf	atoi@a,w
 12115  0A01  00A6               	movwf	?_atoi
 12116  0A02  0008               	return
 12117  0A03                     __end_of_atoi:	
 12118                           
 12119                           	psect	text56
 12120  1FF1                     __ptext56:	
 12121 ;; *************** function _isdigit *****************
 12122 ;; Defined at:
 12123 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
 12124 ;; Parameters:    Size  Location     Type
 12125 ;;  c               1    wreg     unsigned char 
 12126 ;; Auto vars:     Size  Location     Type
 12127 ;;  c               1    1[BANK0 ] unsigned char 
 12128 ;; Return value:  Size  Location     Type
 12129 ;;		None               void
 12130 ;; Registers used:
 12131 ;;		wreg, status,2, status,0
 12132 ;; Tracked objects:
 12133 ;;		On entry : 0/0
 12134 ;;		On exit  : 0/0
 12135 ;;		Unchanged: 0/0
 12136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12138 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12140 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12141 ;;Total ram usage:        2 bytes
 12142 ;; Hardware stack levels used:    1
 12143 ;; Hardware stack levels required when called:    3
 12144 ;; This function calls:
 12145 ;;		Nothing
 12146 ;; This function is called by:
 12147 ;;		_printf
 12148 ;;		_atoi
 12149 ;; This function uses a non-reentrant model
 12150 ;;
 12151                           
 12152                           
 12153                           ;psect for function _isdigit
 12154  1FF1                     _isdigit:	
 12155                           
 12156                           ;incstack = 0
 12157                           ; Regs used in _isdigit: [wreg+status,2+status,0]
 12158                           ;isdigit@c stored from wreg
 12159  1FF1  0020               	movlb	0	; select bank0
 12160  1FF2  00A1               	movwf	isdigit@c
 12161  1FF3  01A0               	clrf	_isdigit$1463
 12162  1FF4  303A               	movlw	58
 12163  1FF5  0221               	subwf	isdigit@c,w
 12164  1FF6  1803               	skipnc
 12165  1FF7  2FFE               	goto	l4763
 12166  1FF8  3030               	movlw	48
 12167  1FF9  0221               	subwf	isdigit@c,w
 12168  1FFA  1C03               	skipc
 12169  1FFB  2FFE               	goto	l4763
 12170  1FFC  01A0               	clrf	_isdigit$1463
 12171  1FFD  0AA0               	incf	_isdigit$1463,f
 12172  1FFE                     l4763:	
 12173  1FFE  0C20               	rrf	_isdigit$1463,w
 12174  1FFF  0008               	return
 12175  2000                     __end_of_isdigit:	
 12176                           
 12177                           	psect	text57
 12178  12E1                     __ptext57:	
 12179 ;; *************** function ___wmul *****************
 12180 ;; Defined at:
 12181 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
 12182 ;; Parameters:    Size  Location     Type
 12183 ;;  multiplier      2    0[BANK0 ] unsigned int 
 12184 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 12185 ;; Auto vars:     Size  Location     Type
 12186 ;;  product         2    4[BANK0 ] unsigned int 
 12187 ;; Return value:  Size  Location     Type
 12188 ;;                  2    0[BANK0 ] unsigned int 
 12189 ;; Registers used:
 12190 ;;		wreg, status,2, status,0
 12191 ;; Tracked objects:
 12192 ;;		On entry : 0/0
 12193 ;;		On exit  : 0/0
 12194 ;;		Unchanged: 0/0
 12195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12196 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12197 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12199 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12200 ;;Total ram usage:        6 bytes
 12201 ;; Hardware stack levels used:    1
 12202 ;; Hardware stack levels required when called:    3
 12203 ;; This function calls:
 12204 ;;		Nothing
 12205 ;; This function is called by:
 12206 ;;		_exec_remote_cmd
 12207 ;;		_init
 12208 ;;		_put_cmd
 12209 ;;		_printf
 12210 ;;		_atoi
 12211 ;; This function uses a non-reentrant model
 12212 ;;
 12213                           
 12214                           
 12215                           ;psect for function ___wmul
 12216  12E1                     ___wmul:	
 12217                           
 12218                           ;incstack = 0
 12219                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 12220  12E1  0020               	movlb	0	; select bank0
 12221  12E2  01A4               	clrf	___wmul@product
 12222  12E3  01A5               	clrf	___wmul@product+1
 12223  12E4                     l4769:	
 12224  12E4  1C20               	btfss	___wmul@multiplier,0
 12225  12E5  2AEA               	goto	l1124
 12226  12E6  0822               	movf	___wmul@multiplicand,w
 12227  12E7  07A4               	addwf	___wmul@product,f
 12228  12E8  0823               	movf	___wmul@multiplicand+1,w
 12229  12E9  3DA5               	addwfc	___wmul@product+1,f
 12230  12EA                     l1124:	
 12231  12EA  3001               	movlw	1
 12232  12EB                     u5115:	
 12233  12EB  35A2               	lslf	___wmul@multiplicand,f
 12234  12EC  0DA3               	rlf	___wmul@multiplicand+1,f
 12235  12ED  0B89               	decfsz	9,f
 12236  12EE  2AEB               	goto	u5115
 12237  12EF  3001               	movlw	1
 12238  12F0                     u5125:	
 12239  12F0  36A1               	lsrf	___wmul@multiplier+1,f
 12240  12F1  0CA0               	rrf	___wmul@multiplier,f
 12241  12F2  0B89               	decfsz	9,f
 12242  12F3  2AF0               	goto	u5125
 12243  12F4  0820               	movf	___wmul@multiplier,w
 12244  12F5  0421               	iorwf	___wmul@multiplier+1,w
 12245  12F6  1D03               	btfss	3,2
 12246  12F7  2AE4               	goto	l4769
 12247  12F8  0825               	movf	___wmul@product+1,w
 12248  12F9  00A1               	movwf	?___wmul+1
 12249  12FA  0824               	movf	___wmul@product,w
 12250  12FB  00A0               	movwf	?___wmul
 12251  12FC  0008               	return
 12252  12FD                     __end_of___wmul:	
 12253                           
 12254                           	psect	text58
 12255  1358                     __ptext58:	
 12256 ;; *************** function _DATAEE_WriteByte *****************
 12257 ;; Defined at:
 12258 ;;		line 180 in file "mcc_generated_files/memory.c"
 12259 ;; Parameters:    Size  Location     Type
 12260 ;;  bAdd            1    wreg     unsigned char 
 12261 ;;  bData           1    0[BANK0 ] unsigned char 
 12262 ;; Auto vars:     Size  Location     Type
 12263 ;;  bAdd            1    1[BANK0 ] unsigned char 
 12264 ;;  GIEBitValue     1    2[BANK0 ] unsigned char 
 12265 ;; Return value:  Size  Location     Type
 12266 ;;                  1    wreg      void 
 12267 ;; Registers used:
 12268 ;;		wreg, status,2, status,0
 12269 ;; Tracked objects:
 12270 ;;		On entry : 0/0
 12271 ;;		On exit  : 0/0
 12272 ;;		Unchanged: 0/0
 12273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12274 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12275 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12276 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12277 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12278 ;;Total ram usage:        3 bytes
 12279 ;; Hardware stack levels used:    1
 12280 ;; Hardware stack levels required when called:    3
 12281 ;; This function calls:
 12282 ;;		Nothing
 12283 ;; This function is called by:
 12284 ;;		_command_handler
 12285 ;;		_PROTOCOL_Write_Device_Address
 12286 ;;		_PROTOCOL_SAV
 12287 ;; This function uses a non-reentrant model
 12288 ;;
 12289                           
 12290                           
 12291                           ;psect for function _DATAEE_WriteByte
 12292  1358                     _DATAEE_WriteByte:	
 12293                           
 12294                           ;incstack = 0
 12295                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
 12296                           ;DATAEE_WriteByte@bAdd stored from wreg
 12297  1358  0020               	movlb	0	; select bank0
 12298  1359  00A1               	movwf	DATAEE_WriteByte@bAdd
 12299                           
 12300                           ;memory.c: 182: uint8_t GIEBitValue = 0;
 12301  135A  01A2               	clrf	DATAEE_WriteByte@GIEBitValue
 12302                           
 12303                           ;memory.c: 184: EEADRL = (bAdd & 0x0ff);
 12304  135B  0821               	movf	DATAEE_WriteByte@bAdd,w
 12305  135C  0023               	movlb	3	; select bank3
 12306  135D  0091               	movwf	17	;volatile
 12307                           
 12308                           ;memory.c: 185: EEDATL = bData;
 12309  135E  0020               	movlb	0	; select bank0
 12310  135F  0820               	movf	DATAEE_WriteByte@bData,w
 12311  1360  0023               	movlb	3	; select bank3
 12312  1361  0093               	movwf	19	;volatile
 12313                           
 12314                           ;memory.c: 186: EECON1bits.EEPGD = 0;
 12315  1362  1395               	bcf	21,7	;volsfr
 12316                           
 12317                           ;memory.c: 187: EECON1bits.CFGS = 0;
 12318  1363  1315               	bcf	21,6	;volsfr
 12319                           
 12320                           ;memory.c: 188: EECON1bits.WREN = 1;
 12321  1364  1515               	bsf	21,2	;volsfr
 12322                           
 12323                           ;memory.c: 190: GIEBitValue = INTCONbits.GIE;
 12324  1365  3000               	movlw	0
 12325  1366  1B8B               	btfsc	11,7	;volatile
 12326  1367  3001               	movlw	1
 12327  1368  0020               	movlb	0	; select bank0
 12328  1369  00A2               	movwf	DATAEE_WriteByte@GIEBitValue
 12329                           
 12330                           ;memory.c: 191: INTCONbits.GIE = 0;
 12331  136A  138B               	bcf	11,7	;volatile
 12332                           
 12333                           ;memory.c: 192: EECON2 = 0x55;
 12334  136B  3055               	movlw	85
 12335  136C  0023               	movlb	3	; select bank3
 12336  136D  0096               	movwf	22	;volsfr
 12337                           
 12338                           ;memory.c: 193: EECON2 = 0xAA;
 12339  136E  30AA               	movlw	170
 12340  136F  0096               	movwf	22	;volsfr
 12341                           
 12342                           ;memory.c: 194: EECON1bits.WR = 1;
 12343  1370  1495               	bsf	21,1	;volsfr
 12344  1371                     l188:	
 12345                           ;memory.c: 197: {
 12346                           
 12347                           ;memory.c: 196: while (EECON1bits.WR)
 12348                           
 12349  1371  1895               	btfsc	21,1	;volsfr
 12350  1372  2B71               	goto	l188
 12351                           
 12352                           ;memory.c: 198: }
 12353                           ;memory.c: 200: EECON1bits.WREN = 0;
 12354  1373  1115               	bcf	21,2	;volsfr
 12355                           
 12356                           ;memory.c: 201: INTCONbits.GIE = GIEBitValue;
 12357  1374  0020               	movlb	0	; select bank0
 12358  1375  0C22               	rrf	DATAEE_WriteByte@GIEBitValue,w
 12359  1376  1C03               	skipc
 12360  1377  138B               	bcf	11,7	;volatile
 12361  1378  1803               	skipnc
 12362  1379  178B               	bsf	11,7	;volatile
 12363  137A  0008               	return
 12364  137B                     __end_of_DATAEE_WriteByte:	
 12365                           
 12366                           	psect	text59
 12367  1338                     __ptext59:	
 12368 ;; *************** function _EUSART_Read *****************
 12369 ;; Defined at:
 12370 ;;		line 112 in file "mcc_generated_files/eusart.c"
 12371 ;; Parameters:    Size  Location     Type
 12372 ;;		None
 12373 ;; Auto vars:     Size  Location     Type
 12374 ;;  readValue       1    1[BANK0 ] unsigned char 
 12375 ;; Return value:  Size  Location     Type
 12376 ;;                  1    wreg      unsigned char 
 12377 ;; Registers used:
 12378 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12379 ;; Tracked objects:
 12380 ;;		On entry : 0/0
 12381 ;;		On exit  : 0/0
 12382 ;;		Unchanged: 0/0
 12383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12384 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12385 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12386 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12387 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12388 ;;Total ram usage:        2 bytes
 12389 ;; Hardware stack levels used:    1
 12390 ;; Hardware stack levels required when called:    3
 12391 ;; This function calls:
 12392 ;;		Nothing
 12393 ;; This function is called by:
 12394 ;;		_PROTOCOL_Loop
 12395 ;;		_getch
 12396 ;; This function uses a non-reentrant model
 12397 ;;
 12398                           
 12399                           
 12400                           ;psect for function _EUSART_Read
 12401  1338                     _EUSART_Read:	
 12402                           
 12403                           ;eusart.c: 114: uint8_t readValue = 0;
 12404                           
 12405                           ;incstack = 0
 12406                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
 12407  1338  0020               	movlb	0	; select bank0
 12408  1339  01A1               	clrf	EUSART_Read@readValue
 12409  133A                     l4257:	
 12410                           ;eusart.c: 117: {
 12411                           
 12412                           ;eusart.c: 116: while(0 == eusartRxCount)
 12413                           
 12414  133A  0021               	movlb	1	; select bank1
 12415  133B  0865               	movf	_eusartRxCount^(0+128),w	;volatile
 12416  133C  1903               	btfsc	3,2
 12417  133D  2B3A               	goto	l4257
 12418                           
 12419                           ;eusart.c: 118: }
 12420                           ;eusart.c: 120: readValue = eusartRxBuffer[eusartRxTail++];
 12421  133E  0020               	movlb	0	; select bank0
 12422  133F  086C               	movf	_eusartRxTail,w
 12423  1340  3E20               	addlw	(low (_eusartRxBuffer| (0+768)))& (0+255)
 12424  1341  0086               	movwf	6
 12425  1342  3003               	movlw	3	; select bank6/7
 12426  1343  0087               	movwf	7
 12427  1344  0801               	movf	1,w
 12428  1345  00A0               	movwf	??_EUSART_Read
 12429  1346  0820               	movf	??_EUSART_Read,w
 12430  1347  00A1               	movwf	EUSART_Read@readValue
 12431  1348  3001               	movlw	1
 12432  1349  00A0               	movwf	??_EUSART_Read
 12433  134A  0820               	movf	??_EUSART_Read,w
 12434  134B  07EC               	addwf	_eusartRxTail,f	;volatile
 12435                           
 12436                           ;eusart.c: 121: if(sizeof(eusartRxBuffer) <= eusartRxTail)
 12437  134C  3040               	movlw	64
 12438  134D  026C               	subwf	_eusartRxTail,w	;volatile
 12439  134E  1803               	btfsc	3,0
 12440                           
 12441                           ;eusart.c: 122: {
 12442                           ;eusart.c: 123: eusartRxTail = 0;
 12443  134F  01EC               	clrf	_eusartRxTail	;volatile
 12444                           
 12445                           ;eusart.c: 124: }
 12446                           ;eusart.c: 125: PIE1bits.RCIE = 0;
 12447  1350  0021               	movlb	1	; select bank1
 12448  1351  1291               	bcf	17,5	;volatile
 12449                           
 12450                           ;eusart.c: 126: eusartRxCount--;
 12451  1352  3001               	movlw	1
 12452  1353  02E5               	subwf	_eusartRxCount^(0+128),f	;volatile
 12453                           
 12454                           ;eusart.c: 127: PIE1bits.RCIE = 1;
 12455  1354  1691               	bsf	17,5	;volatile
 12456                           
 12457                           ;eusart.c: 129: return readValue;
 12458  1355  0020               	movlb	0	; select bank0
 12459  1356  0821               	movf	EUSART_Read@readValue,w
 12460  1357  0008               	return
 12461  1358                     __end_of_EUSART_Read:	
 12462                           
 12463                           	psect	text60
 12464  17AE                     __ptext60:	
 12465 ;; *************** function _PROTOCOL_Initialize *****************
 12466 ;; Defined at:
 12467 ;;		line 60 in file "protocol.c"
 12468 ;; Parameters:    Size  Location     Type
 12469 ;;  device_id       2    1[BANK0 ] PTR const unsigned char 
 12470 ;;		 -> STR_36(17), 
 12471 ;;  start_handle    1    3[BANK0 ] PTR void 
 12472 ;;		 -> NULL(0), 
 12473 ;;  stop_handler    1    4[BANK0 ] PTR void 
 12474 ;;		 -> NULL(0), 
 12475 ;;  set_handler     1    5[BANK0 ] PTR void 
 12476 ;;		 -> NULL(0), 
 12477 ;;  inv_handler     2    6[BANK0 ] PTR void 
 12478 ;;		 -> inv_handler(1), 
 12479 ;;  scaler          1    8[BANK0 ] unsigned char 
 12480 ;; Auto vars:     Size  Location     Type
 12481 ;;		None
 12482 ;; Return value:  Size  Location     Type
 12483 ;;                  1    wreg      void 
 12484 ;; Registers used:
 12485 ;;		wreg, status,2, status,0, pclath, cstack
 12486 ;; Tracked objects:
 12487 ;;		On entry : 0/0
 12488 ;;		On exit  : 0/0
 12489 ;;		Unchanged: 0/0
 12490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12491 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12492 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12493 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12494 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12495 ;;Total ram usage:       10 bytes
 12496 ;; Hardware stack levels used:    1
 12497 ;; Hardware stack levels required when called:    4
 12498 ;; This function calls:
 12499 ;;		_DATAEE_ReadByte
 12500 ;; This function is called by:
 12501 ;;		_main
 12502 ;; This function uses a non-reentrant model
 12503 ;;
 12504                           
 12505                           
 12506                           ;psect for function _PROTOCOL_Initialize
 12507  17AE                     _PROTOCOL_Initialize:	
 12508                           
 12509                           ;protocol.c: 61: device_id_ = device_id;
 12510                           
 12511                           ;incstack = 0
 12512                           ; Regs used in _PROTOCOL_Initialize: [wreg+status,2+status,0+pclath+cstack]
 12513  17AE  0020               	movlb	0	; select bank0
 12514  17AF  0822               	movf	PROTOCOL_Initialize@device_id+1,w
 12515  17B0  0022               	movlb	2	; select bank2
 12516  17B1  00A7               	movwf	(_device_id_+1)^(0+256)
 12517  17B2  0020               	movlb	0	; select bank0
 12518  17B3  0821               	movf	PROTOCOL_Initialize@device_id,w
 12519  17B4  0022               	movlb	2	; select bank2
 12520  17B5  00A6               	movwf	_device_id_^(0+256)
 12521                           
 12522                           ;protocol.c: 62: PROTOCOL_Start_Handler = start_handler;
 12523  17B6  0020               	movlb	0	; select bank0
 12524  17B7  0823               	movf	PROTOCOL_Initialize@start_handler,w
 12525  17B8  00A9               	movwf	??_PROTOCOL_Initialize
 12526  17B9  3000               	movlw	0
 12527  17BA  00AA               	movwf	??_PROTOCOL_Initialize+1
 12528  17BB  0829               	movf	??_PROTOCOL_Initialize,w
 12529  17BC  0022               	movlb	2	; select bank2
 12530  17BD  00B4               	movwf	_PROTOCOL_Start_Handler^(0+256)
 12531  17BE  0020               	movlb	0	; select bank0
 12532  17BF  082A               	movf	??_PROTOCOL_Initialize+1,w
 12533  17C0  0022               	movlb	2	; select bank2
 12534  17C1  00B5               	movwf	(_PROTOCOL_Start_Handler+1)^(0+256)
 12535                           
 12536                           ;protocol.c: 63: PROTOCOL_Stop_Handler = stop_handler;
 12537  17C2  0020               	movlb	0	; select bank0
 12538  17C3  0824               	movf	PROTOCOL_Initialize@stop_handler,w
 12539  17C4  00A9               	movwf	??_PROTOCOL_Initialize
 12540  17C5  3000               	movlw	0
 12541  17C6  00AA               	movwf	??_PROTOCOL_Initialize+1
 12542  17C7  0829               	movf	??_PROTOCOL_Initialize,w
 12543  17C8  0022               	movlb	2	; select bank2
 12544  17C9  00B2               	movwf	_PROTOCOL_Stop_Handler^(0+256)
 12545  17CA  0020               	movlb	0	; select bank0
 12546  17CB  082A               	movf	??_PROTOCOL_Initialize+1,w
 12547  17CC  0022               	movlb	2	; select bank2
 12548  17CD  00B3               	movwf	(_PROTOCOL_Stop_Handler+1)^(0+256)
 12549                           
 12550                           ;protocol.c: 64: PROTOCOL_Set_Handler = set_handler;
 12551  17CE  0020               	movlb	0	; select bank0
 12552  17CF  0825               	movf	PROTOCOL_Initialize@set_handler,w
 12553  17D0  00A9               	movwf	??_PROTOCOL_Initialize
 12554  17D1  3000               	movlw	0
 12555  17D2  00AA               	movwf	??_PROTOCOL_Initialize+1
 12556  17D3  0829               	movf	??_PROTOCOL_Initialize,w
 12557  17D4  0022               	movlb	2	; select bank2
 12558  17D5  00B0               	movwf	_PROTOCOL_Set_Handler^(0+256)
 12559  17D6  0020               	movlb	0	; select bank0
 12560  17D7  082A               	movf	??_PROTOCOL_Initialize+1,w
 12561  17D8  0022               	movlb	2	; select bank2
 12562  17D9  00B1               	movwf	(_PROTOCOL_Set_Handler+1)^(0+256)
 12563                           
 12564                           ;protocol.c: 67: value = DATAEE_ReadByte(1);
 12565  17DA  3001               	movlw	1
 12566  17DB  319F  27E4  3197   	fcall	_DATAEE_ReadByte
 12567  17DE  0020               	movlb	0	; select bank0
 12568  17DF  00A9               	movwf	??_PROTOCOL_Initialize
 12569  17E0  0829               	movf	??_PROTOCOL_Initialize,w
 12570  17E1  0021               	movlb	1	; select bank1
 12571  17E2  00DE               	movwf	_value^(0+128)
 12572                           
 12573                           ;protocol.c: 69: slave_address = DATAEE_ReadByte(0);
 12574  17E3  3000               	movlw	0
 12575  17E4  319F  27E4         	fcall	_DATAEE_ReadByte
 12576  17E6  0020               	movlb	0	; select bank0
 12577  17E7  00A9               	movwf	??_PROTOCOL_Initialize
 12578  17E8  0829               	movf	??_PROTOCOL_Initialize,w
 12579  17E9  0022               	movlb	2	; select bank2
 12580  17EA  00C4               	movwf	_slave_address^(0+256)
 12581                           
 12582                           ;protocol.c: 72: readbuf.status = COMPLETE;
 12583  17EB  3003               	movlw	3
 12584  17EC  0020               	movlb	0	; select bank0
 12585  17ED  00A9               	movwf	??_PROTOCOL_Initialize
 12586  17EE  0829               	movf	??_PROTOCOL_Initialize,w
 12587  17EF  0022               	movlb	2	; select bank2
 12588  17F0  00CA               	movwf	(_readbuf^(0+256)+3)
 12589                           
 12590                           ;protocol.c: 73: PROTOCOL_Inv_Handler = inv_handler;
 12591  17F1  0020               	movlb	0	; select bank0
 12592  17F2  0827               	movf	PROTOCOL_Initialize@inv_handler+1,w
 12593  17F3  0022               	movlb	2	; select bank2
 12594  17F4  00AB               	movwf	(_PROTOCOL_Inv_Handler+1)^(0+256)
 12595  17F5  0020               	movlb	0	; select bank0
 12596  17F6  0826               	movf	PROTOCOL_Initialize@inv_handler,w
 12597  17F7  0022               	movlb	2	; select bank2
 12598  17F8  00AA               	movwf	_PROTOCOL_Inv_Handler^(0+256)
 12599                           
 12600                           ;protocol.c: 74: tmr_scaler = scaler;
 12601  17F9  0020               	movlb	0	; select bank0
 12602  17FA  0828               	movf	PROTOCOL_Initialize@scaler,w
 12603  17FB  00A9               	movwf	??_PROTOCOL_Initialize
 12604  17FC  0829               	movf	??_PROTOCOL_Initialize,w
 12605  17FD  0022               	movlb	2	; select bank2
 12606  17FE  00E2               	movwf	_tmr_scaler^(0+256)
 12607  17FF  0008               	return
 12608  1800                     __end_of_PROTOCOL_Initialize:	
 12609                           
 12610                           	psect	text61
 12611  1FE4                     __ptext61:	
 12612 ;; *************** function _DATAEE_ReadByte *****************
 12613 ;; Defined at:
 12614 ;;		line 204 in file "mcc_generated_files/memory.c"
 12615 ;; Parameters:    Size  Location     Type
 12616 ;;  bAdd            1    wreg     unsigned char 
 12617 ;; Auto vars:     Size  Location     Type
 12618 ;;  bAdd            1    0[BANK0 ] unsigned char 
 12619 ;; Return value:  Size  Location     Type
 12620 ;;                  1    wreg      unsigned char 
 12621 ;; Registers used:
 12622 ;;		wreg
 12623 ;; Tracked objects:
 12624 ;;		On entry : 0/0
 12625 ;;		On exit  : 0/0
 12626 ;;		Unchanged: 0/0
 12627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12629 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12631 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12632 ;;Total ram usage:        1 bytes
 12633 ;; Hardware stack levels used:    1
 12634 ;; Hardware stack levels required when called:    3
 12635 ;; This function calls:
 12636 ;;		Nothing
 12637 ;; This function is called by:
 12638 ;;		_init
 12639 ;;		_PROTOCOL_Initialize
 12640 ;; This function uses a non-reentrant model
 12641 ;;
 12642                           
 12643                           
 12644                           ;psect for function _DATAEE_ReadByte
 12645  1FE4                     _DATAEE_ReadByte:	
 12646                           
 12647                           ;incstack = 0
 12648                           ; Regs used in _DATAEE_ReadByte: [wreg]
 12649                           ;DATAEE_ReadByte@bAdd stored from wreg
 12650  1FE4  0020               	movlb	0	; select bank0
 12651  1FE5  00A0               	movwf	DATAEE_ReadByte@bAdd
 12652                           
 12653                           ;memory.c: 206: EEADRL = (bAdd & 0x0ff);
 12654  1FE6  0820               	movf	DATAEE_ReadByte@bAdd,w
 12655  1FE7  0023               	movlb	3	; select bank3
 12656  1FE8  0091               	movwf	17	;volatile
 12657                           
 12658                           ;memory.c: 207: EECON1bits.CFGS = 0;
 12659  1FE9  1315               	bcf	21,6	;volsfr
 12660                           
 12661                           ;memory.c: 208: EECON1bits.EEPGD = 0;
 12662  1FEA  1395               	bcf	21,7	;volsfr
 12663                           
 12664                           ;memory.c: 209: EECON1bits.RD = 1;
 12665  1FEB  1415               	bsf	21,0	;volsfr
 12666                           
 12667                           ;memory.c: 210: __nop();
 12668  1FEC  0000               	nop
 12669                           
 12670                           ;memory.c: 211: __nop();
 12671  1FED  0000               	nop
 12672                           
 12673                           ;memory.c: 213: return (EEDATL);
 12674  1FEE  0023               	movlb	3	; select bank3
 12675  1FEF  0813               	movf	19,w	;volatile
 12676  1FF0  0008               	return
 12677  1FF1                     __end_of_DATAEE_ReadByte:	
 12678                           
 12679                           	psect	intentry
 12680  0004                     __pintentry:	
 12681 ;; *************** function _INTERRUPT_InterruptManager *****************
 12682 ;; Defined at:
 12683 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
 12684 ;; Parameters:    Size  Location     Type
 12685 ;;		None
 12686 ;; Auto vars:     Size  Location     Type
 12687 ;;		None
 12688 ;; Return value:  Size  Location     Type
 12689 ;;                  1    wreg      void 
 12690 ;; Registers used:
 12691 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12692 ;; Tracked objects:
 12693 ;;		On entry : 0/0
 12694 ;;		On exit  : 0/0
 12695 ;;		Unchanged: 0/0
 12696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12698 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12699 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12700 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12701 ;;Total ram usage:        1 bytes
 12702 ;; Hardware stack levels used:    1
 12703 ;; Hardware stack levels required when called:    2
 12704 ;; This function calls:
 12705 ;;		_EUSART_Receive_ISR
 12706 ;;		_EUSART_Transmit_ISR
 12707 ;;		_I2C1_BusCollisionISR
 12708 ;;		_I2C1_ISR
 12709 ;; This function is called by:
 12710 ;;		Interrupt level 1
 12711 ;; This function uses a non-reentrant model
 12712 ;;
 12713                           
 12714  0004                     _INTERRUPT_InterruptManager:	
 12715                           
 12716                           ;incstack = 0
 12717  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 12718                           
 12719                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12720  0005  3180               	pagesel	$
 12721  0006  0020               	movlb	0	; select bank0
 12722  0007  087F               	movf	127,w
 12723  0008  00FD               	movwf	??_INTERRUPT_InterruptManager
 12724                           
 12725                           ;interrupt_manager.c: 54: if(INTCONbits.PEIE == 1 && PIE1bits.TXIE == 1 && PIR1bits.TXIF
      +                           == 1)
 12726  0009  1F0B               	btfss	11,6	;volatile
 12727  000A  2815               	goto	i1l321
 12728  000B  0021               	movlb	1	; select bank1
 12729  000C  1E11               	btfss	17,4	;volatile
 12730  000D  2815               	goto	i1l321
 12731  000E  0020               	movlb	0	; select bank0
 12732  000F  1E11               	btfss	17,4	;volatile
 12733  0010  2815               	goto	i1l321
 12734                           
 12735                           ;interrupt_manager.c: 55: {
 12736                           ;interrupt_manager.c: 56: EUSART_Transmit_ISR();
 12737  0011  3192  22C5  3180   	fcall	_EUSART_Transmit_ISR
 12738                           
 12739                           ;interrupt_manager.c: 57: }
 12740  0014  2837               	goto	i1l329
 12741  0015                     i1l321:	
 12742                           
 12743                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits
      +                          .RCIF == 1)
 12744  0015  1F0B               	btfss	11,6	;volatile
 12745  0016  2821               	goto	i1l323
 12746  0017  0021               	movlb	1	; select bank1
 12747  0018  1E91               	btfss	17,5	;volatile
 12748  0019  2821               	goto	i1l323
 12749  001A  0020               	movlb	0	; select bank0
 12750  001B  1E91               	btfss	17,5	;volatile
 12751  001C  2821               	goto	i1l323
 12752                           
 12753                           ;interrupt_manager.c: 59: {
 12754                           ;interrupt_manager.c: 60: EUSART_Receive_ISR();
 12755  001D  3192  22A9  3180   	fcall	_EUSART_Receive_ISR
 12756                           
 12757                           ;interrupt_manager.c: 61: }
 12758  0020  2837               	goto	i1l329
 12759  0021                     i1l323:	
 12760                           
 12761                           ;interrupt_manager.c: 62: else if(INTCONbits.PEIE == 1 && PIE2bits.BCL1IE == 1 && PIR2bi
      +                          ts.BCL1IF == 1)
 12762  0021  1F0B               	btfss	11,6	;volatile
 12763  0022  282D               	goto	i1l325
 12764  0023  0021               	movlb	1	; select bank1
 12765  0024  1D92               	btfss	18,3	;volatile
 12766  0025  282D               	goto	i1l325
 12767  0026  0020               	movlb	0	; select bank0
 12768  0027  1D92               	btfss	18,3	;volatile
 12769  0028  282D               	goto	i1l325
 12770                           
 12771                           ;interrupt_manager.c: 63: {
 12772                           ;interrupt_manager.c: 64: I2C1_BusCollisionISR();
 12773  0029  3187  27FE  3180   	fcall	_I2C1_BusCollisionISR
 12774                           
 12775                           ;interrupt_manager.c: 65: }
 12776  002C  2837               	goto	i1l329
 12777  002D                     i1l325:	
 12778                           
 12779                           ;interrupt_manager.c: 66: else if(INTCONbits.PEIE == 1 && PIE1bits.SSP1IE == 1 && PIR1bi
      +                          ts.SSP1IF == 1)
 12780  002D  1F0B               	btfss	11,6	;volatile
 12781  002E  2837               	goto	i1l329
 12782  002F  0021               	movlb	1	; select bank1
 12783  0030  1D91               	btfss	17,3	;volatile
 12784  0031  2837               	goto	i1l329
 12785  0032  0020               	movlb	0	; select bank0
 12786  0033  1D91               	btfss	17,3	;volatile
 12787  0034  2837               	goto	i1l329
 12788                           
 12789                           ;interrupt_manager.c: 67: {
 12790                           ;interrupt_manager.c: 68: I2C1_ISR();
 12791  0035  318B  2336         	fcall	_I2C1_ISR
 12792  0037                     i1l329:	
 12793                           ;interrupt_manager.c: 70: else
 12794                           ;interrupt_manager.c: 71: {
 12795                           
 12796                           ;interrupt_manager.c: 69: }
 12797                           
 12798  0037  087D               	movf	??_INTERRUPT_InterruptManager,w
 12799  0038  0020               	movlb	0	; select bank0
 12800  0039  00FF               	movwf	127
 12801  003A  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 12802  003B  0009               	retfie
 12803  003C                     __end_of_INTERRUPT_InterruptManager:	
 12804                           
 12805                           	psect	text63
 12806  0B36                     __ptext63:	
 12807 ;; *************** function _I2C1_ISR *****************
 12808 ;; Defined at:
 12809 ;;		line 233 in file "mcc_generated_files/i2c1.c"
 12810 ;; Parameters:    Size  Location     Type
 12811 ;;		None
 12812 ;; Auto vars:     Size  Location     Type
 12813 ;;		None
 12814 ;; Return value:  Size  Location     Type
 12815 ;;                  1    wreg      void 
 12816 ;; Registers used:
 12817 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12818 ;; Tracked objects:
 12819 ;;		On entry : 0/0
 12820 ;;		On exit  : 0/0
 12821 ;;		Unchanged: 0/0
 12822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12824 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12825 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12826 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12827 ;;Total ram usage:        4 bytes
 12828 ;; Hardware stack levels used:    1
 12829 ;; Hardware stack levels required when called:    1
 12830 ;; This function calls:
 12831 ;;		_I2C1_FunctionComplete
 12832 ;;		_I2C1_Stop
 12833 ;; This function is called by:
 12834 ;;		_INTERRUPT_InterruptManager
 12835 ;; This function uses a non-reentrant model
 12836 ;;
 12837                           
 12838                           
 12839                           ;psect for function _I2C1_ISR
 12840  0B36                     _I2C1_ISR:	
 12841                           
 12842                           ;i2c1.c: 236: static uint8_t *pi2c_buf_ptr;
 12843                           ;i2c1.c: 237: static uint16_t i2c_address = 0;
 12844                           ;i2c1.c: 238: static uint8_t i2c_bytes_left = 0;
 12845                           ;i2c1.c: 239: static uint8_t i2c_10bit_address_restart = 0;
 12846                           ;i2c1.c: 241: PIR1bits.SSP1IF = 0;
 12847                           
 12848                           ;incstack = 0
 12849                           ; Regs used in _I2C1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12850  0B36  0020               	movlb	0	; select bank0
 12851  0B37  1191               	bcf	17,3	;volatile
 12852                           
 12853                           ;i2c1.c: 245: if(SSP1CON1bits.WCOL)
 12854  0B38  0024               	movlb	4	; select bank4
 12855  0B39  1F95               	btfss	21,7	;volatile
 12856  0B3A  2C81               	goto	i1l5607
 12857                           
 12858                           ;i2c1.c: 246: {
 12859                           ;i2c1.c: 248: SSP1CON1bits.WCOL = 0;
 12860  0B3B  1395               	bcf	21,7	;volatile
 12861                           
 12862                           ;i2c1.c: 249: i2c1_state = S_MASTER_IDLE;
 12863  0B3C  0021               	movlb	1	; select bank1
 12864  0B3D  01EB               	clrf	_i2c1_state^(0+128)
 12865                           
 12866                           ;i2c1.c: 250: *(p_i2c1_current->pTrFlag) = I2C1_MESSAGE_FAIL;
 12867  0B3E  0868               	movf	_p_i2c1_current^(0+128),w
 12868  0B3F  3E02               	addlw	2
 12869  0B40  0086               	movwf	6
 12870  0B41  3001               	movlw	1	; select bank2/3
 12871  0B42  0087               	movwf	7
 12872  0B43  0801               	movf	1,w
 12873  0B44  0086               	movwf	6
 12874  0B45  0187               	clrf	7
 12875  0B46  0181               	clrf	1
 12876  0B47  0A81               	incf	1,f
 12877                           
 12878                           ;i2c1.c: 253: p_i2c1_current = (0);
 12879  0B48  01E8               	clrf	_p_i2c1_current^(0+128)
 12880                           
 12881                           ;i2c1.c: 255: return;
 12882  0B49  0008               	return
 12883  0B4A                     i1l60:	
 12884                           ;i2c1.c: 260: {
 12885                           ;i2c1.c: 261: case S_MASTER_IDLE:
 12886                           
 12887                           ;i2c1.c: 256: }
 12888                           ;i2c1.c: 259: switch(i2c1_state)
 12889                           
 12890                           
 12891                           ;i2c1.c: 263: if(i2c1_object.trStatus.s.empty != 1)
 12892  0B4A  18DB               	btfsc	(_i2c1_object^(0+128)+2),1
 12893  0B4B  0008               	return
 12894                           
 12895                           ;i2c1.c: 264: {
 12896                           ;i2c1.c: 266: p_i2c1_current = i2c1_object.pTrHead;
 12897  0B4C  085A               	movf	(low ((_i2c1_object| 0+1)))^(0+128),w
 12898  0B4D  00F9               	movwf	??_I2C1_ISR
 12899  0B4E  0879               	movf	??_I2C1_ISR,w
 12900  0B4F  00E8               	movwf	_p_i2c1_current^(0+128)
 12901                           
 12902                           ;i2c1.c: 267: i2c1_trb_count = i2c1_object.pTrHead->count;
 12903  0B50  085A               	movf	(low ((_i2c1_object| 0+1)))^(0+128),w
 12904  0B51  0086               	movwf	6
 12905  0B52  3001               	movlw	1	; select bank2/3
 12906  0B53  0087               	movwf	7
 12907  0B54  0801               	movf	1,w
 12908  0B55  00F9               	movwf	??_I2C1_ISR
 12909  0B56  0879               	movf	??_I2C1_ISR,w
 12910  0B57  00EA               	movwf	_i2c1_trb_count^(0+128)
 12911                           
 12912                           ;i2c1.c: 268: p_i2c1_trb_current = i2c1_object.pTrHead->ptrb_list;
 12913  0B58  085A               	movf	(low ((_i2c1_object| 0+1)))^(0+128),w
 12914  0B59  0086               	movwf	6
 12915  0B5A  3001               	movlw	1	; select bank2/3
 12916  0B5B  0087               	movwf	7
 12917  0B5C  3001               	movlw	1	; select bank2/3
 12918  0B5D  3F41               	moviw [1]fsr1
 12919  0B5E  00E9               	movwf	_p_i2c1_trb_current^(0+128)
 12920                           
 12921                           ;i2c1.c: 270: i2c1_object.pTrHead++;
 12922  0B5F  3003               	movlw	3
 12923  0B60  00F9               	movwf	??_I2C1_ISR
 12924  0B61  0879               	movf	??_I2C1_ISR,w
 12925  0B62  07DA               	addwf	(low ((_i2c1_object| 0+1)))^(0+128),f
 12926                           
 12927                           ;i2c1.c: 273: if(i2c1_object.pTrHead == (i2c1_tr_queue + 1))
 12928  0B63  085A               	movf	(low ((_i2c1_object| 0+1)))^(0+128),w
 12929  0B64  3A5C               	xorlw	(low ((_i2c1_tr_queue| (0+256)+3)))& (0+255)
 12930  0B65  1D03               	skipz
 12931  0B66  2B6B               	goto	i1l5497
 12932                           
 12933                           ;i2c1.c: 274: {
 12934                           ;i2c1.c: 276: i2c1_object.pTrHead = i2c1_tr_queue;
 12935  0B67  3059               	movlw	(low (_i2c1_tr_queue| (0+256)))& (0+255)
 12936  0B68  00F9               	movwf	??_I2C1_ISR
 12937  0B69  0879               	movf	??_I2C1_ISR,w
 12938  0B6A  00DA               	movwf	(low ((_i2c1_object| 0+1)))^(0+128)
 12939  0B6B                     i1l5497:	
 12940                           
 12941                           ;i2c1.c: 277: }
 12942                           ;i2c1.c: 281: i2c1_object.trStatus.s.full = 0;
 12943  0B6B  105B               	bcf	(_i2c1_object^(0+128)+2),0
 12944                           
 12945                           ;i2c1.c: 284: if(i2c1_object.pTrHead == i2c1_object.pTrTail)
 12946  0B6C  085A               	movf	(low ((_i2c1_object| 0+1)))^(0+128),w
 12947  0B6D  0659               	xorwf	_i2c1_object^(0+128),w
 12948  0B6E  1903               	btfsc	3,2
 12949                           
 12950                           ;i2c1.c: 285: {
 12951                           ;i2c1.c: 287: i2c1_object.trStatus.s.empty = 1;
 12952  0B6F  14DB               	bsf	(_i2c1_object^(0+128)+2),1
 12953                           
 12954                           ;i2c1.c: 288: }
 12955                           ;i2c1.c: 291: SSP1CON2bits.SEN = 1;
 12956  0B70  0024               	movlb	4	; select bank4
 12957  0B71  1416               	bsf	22,0	;volatile
 12958                           
 12959                           ;i2c1.c: 294: i2c1_state = S_MASTER_SEND_ADDR;
 12960  0B72  3002               	movlw	2
 12961  0B73  00F9               	movwf	??_I2C1_ISR
 12962  0B74  0879               	movf	??_I2C1_ISR,w
 12963  0B75  0021               	movlb	1	; select bank1
 12964  0B76  00EB               	movwf	_i2c1_state^(0+128)
 12965                           
 12966                           ;i2c1.c: 295: }
 12967                           ;i2c1.c: 297: break;
 12968  0B77  0008               	return
 12969  0B78                     i1l65:	
 12970                           ;i2c1.c: 299: case S_MASTER_RESTART:
 12971                           
 12972                           
 12973                           ;i2c1.c: 304: SSP1CON2bits.RSEN = 1;
 12974  0B78  0024               	movlb	4	; select bank4
 12975  0B79  1496               	bsf	22,1	;volatile
 12976                           
 12977                           ;i2c1.c: 307: i2c1_state = S_MASTER_SEND_ADDR;
 12978  0B7A  3002               	movlw	2
 12979  0B7B  00F9               	movwf	??_I2C1_ISR
 12980  0B7C  0879               	movf	??_I2C1_ISR,w
 12981  0B7D  0021               	movlb	1	; select bank1
 12982  0B7E  00EB               	movwf	_i2c1_state^(0+128)
 12983                           
 12984                           ;i2c1.c: 309: break;
 12985  0B7F  0008               	return
 12986  0B80                     i1l66:	
 12987                           ;i2c1.c: 311: case S_MASTER_SEND_ADDR_10BIT_LSB:
 12988                           
 12989                           
 12990                           ;i2c1.c: 313: if(SSP1CON2bits.ACKSTAT)
 12991  0B80  0024               	movlb	4	; select bank4
 12992  0B81  1F16               	btfss	22,6	;volatile
 12993  0B82  2B8C               	goto	i1l5509
 12994                           
 12995                           ;i2c1.c: 314: {
 12996                           ;i2c1.c: 315: i2c1_object.i2cErrors++;
 12997  0B83  3001               	movlw	1
 12998  0B84  00F9               	movwf	??_I2C1_ISR
 12999  0B85  0879               	movf	??_I2C1_ISR,w
 13000  0B86  0021               	movlb	1	; select bank1
 13001  0B87  07DD               	addwf	(_i2c1_object^(0+128)+4),f
 13002                           
 13003                           ;i2c1.c: 316: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
 13004  0B88  3004               	movlw	4
 13005  0B89  3192  225A         	fcall	_I2C1_Stop
 13006                           
 13007                           ;i2c1.c: 317: }
 13008  0B8B  0008               	return
 13009  0B8C                     i1l5509:	
 13010                           
 13011                           ;i2c1.c: 318: else
 13012                           ;i2c1.c: 319: {
 13013                           ;i2c1.c: 321: SSP1BUF = (i2c_address >> 1) & 0x00FF;
 13014  0B8C  0020               	movlb	0	; select bank0
 13015  0B8D  086E               	movf	I2C1_ISR@i2c_address+1,w
 13016  0B8E  00FA               	movwf	??_I2C1_ISR+1
 13017  0B8F  086D               	movf	I2C1_ISR@i2c_address,w
 13018  0B90  00F9               	movwf	??_I2C1_ISR
 13019  0B91  36FA               	lsrf	??_I2C1_ISR+1,f
 13020  0B92  0CF9               	rrf	??_I2C1_ISR,f
 13021  0B93  0879               	movf	??_I2C1_ISR,w
 13022  0B94  0024               	movlb	4	; select bank4
 13023  0B95  0091               	movwf	17	;volatile
 13024                           
 13025                           ;i2c1.c: 324: if(i2c_address & 0x01)
 13026  0B96  0020               	movlb	0	; select bank0
 13027  0B97  1C6D               	btfss	I2C1_ISR@i2c_address,0
 13028  0B98  2B9F               	goto	i1l5515
 13029                           
 13030                           ;i2c1.c: 325: {
 13031                           ;i2c1.c: 328: i2c1_state = S_MASTER_10BIT_RESTART;
 13032  0B99  300B               	movlw	11
 13033  0B9A  00F9               	movwf	??_I2C1_ISR
 13034  0B9B  0879               	movf	??_I2C1_ISR,w
 13035  0B9C  0021               	movlb	1	; select bank1
 13036  0B9D  00EB               	movwf	_i2c1_state^(0+128)
 13037                           
 13038                           ;i2c1.c: 329: }
 13039  0B9E  0008               	return
 13040  0B9F                     i1l5515:	
 13041                           
 13042                           ;i2c1.c: 330: else
 13043                           ;i2c1.c: 331: {
 13044                           ;i2c1.c: 333: i2c1_state = S_MASTER_SEND_DATA;
 13045  0B9F  3003               	movlw	3
 13046  0BA0  00F9               	movwf	??_I2C1_ISR
 13047  0BA1  0879               	movf	??_I2C1_ISR,w
 13048  0BA2  0021               	movlb	1	; select bank1
 13049  0BA3  00EB               	movwf	_i2c1_state^(0+128)
 13050                           
 13051                           ;i2c1.c: 334: }
 13052                           ;i2c1.c: 335: }
 13053                           ;i2c1.c: 337: break;
 13054  0BA4  0008               	return
 13055  0BA5                     i1l71:	
 13056                           ;i2c1.c: 339: case S_MASTER_10BIT_RESTART:
 13057                           
 13058                           
 13059                           ;i2c1.c: 341: if(SSP1CON2bits.ACKSTAT)
 13060  0BA5  0024               	movlb	4	; select bank4
 13061  0BA6  1F16               	btfss	22,6	;volatile
 13062  0BA7  2BB1               	goto	i1l72
 13063                           
 13064                           ;i2c1.c: 342: {
 13065                           ;i2c1.c: 343: i2c1_object.i2cErrors++;
 13066  0BA8  3001               	movlw	1
 13067  0BA9  00F9               	movwf	??_I2C1_ISR
 13068  0BAA  0879               	movf	??_I2C1_ISR,w
 13069  0BAB  0021               	movlb	1	; select bank1
 13070  0BAC  07DD               	addwf	(_i2c1_object^(0+128)+4),f
 13071                           
 13072                           ;i2c1.c: 344: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
 13073  0BAD  3004               	movlw	4
 13074  0BAE  3192  225A         	fcall	_I2C1_Stop
 13075                           
 13076                           ;i2c1.c: 345: }
 13077  0BB0  0008               	return
 13078  0BB1                     i1l72:	
 13079                           
 13080                           ;i2c1.c: 346: else
 13081                           ;i2c1.c: 347: {
 13082                           ;i2c1.c: 350: SSP1CON2bits.RSEN = 1;
 13083  0BB1  1496               	bsf	22,1	;volatile
 13084                           
 13085                           ;i2c1.c: 354: i2c_address = 0x00F0 | ((i2c_address >> 8) & 0x0006);
 13086  0BB2  0020               	movlb	0	; select bank0
 13087  0BB3  086E               	movf	I2C1_ISR@i2c_address+1,w
 13088  0BB4  00FA               	movwf	??_I2C1_ISR+1
 13089  0BB5  086D               	movf	I2C1_ISR@i2c_address,w
 13090  0BB6  00F9               	movwf	??_I2C1_ISR
 13091  0BB7  087A               	movf	??_I2C1_ISR+1,w
 13092  0BB8  00F9               	movwf	??_I2C1_ISR
 13093  0BB9  01FA               	clrf	??_I2C1_ISR+1
 13094  0BBA  3006               	movlw	6
 13095  0BBB  0579               	andwf	??_I2C1_ISR,w
 13096  0BBC  00FB               	movwf	??_I2C1_ISR+2
 13097  0BBD  3000               	movlw	0
 13098  0BBE  057A               	andwf	??_I2C1_ISR+1,w
 13099  0BBF  00FC               	movwf	??_I2C1_ISR+3
 13100  0BC0  30F0               	movlw	240
 13101  0BC1  047B               	iorwf	??_I2C1_ISR+2,w
 13102  0BC2  00ED               	movwf	I2C1_ISR@i2c_address
 13103  0BC3  3000               	movlw	0
 13104  0BC4  047C               	iorwf	??_I2C1_ISR+3,w
 13105  0BC5  00EE               	movwf	I2C1_ISR@i2c_address+1
 13106                           
 13107                           ;i2c1.c: 357: i2c_address |= 0x0001;
 13108  0BC6  146D               	bsf	I2C1_ISR@i2c_address,0
 13109                           
 13110                           ;i2c1.c: 360: i2c_10bit_address_restart = 1;
 13111  0BC7  0021               	movlb	1	; select bank1
 13112  0BC8  01E6               	clrf	I2C1_ISR@i2c_10bit_address_restart^(0+128)
 13113  0BC9  0AE6               	incf	I2C1_ISR@i2c_10bit_address_restart^(0+128),f
 13114                           
 13115                           ;i2c1.c: 363: i2c1_state = S_MASTER_SEND_ADDR;
 13116  0BCA  3002               	movlw	2
 13117  0BCB  00F9               	movwf	??_I2C1_ISR
 13118  0BCC  0879               	movf	??_I2C1_ISR,w
 13119  0BCD  00EB               	movwf	_i2c1_state^(0+128)
 13120                           
 13121                           ;i2c1.c: 364: }
 13122                           ;i2c1.c: 366: break;
 13123  0BCE  0008               	return
 13124  0BCF                     i1l5529:	
 13125                           ;i2c1.c: 368: case S_MASTER_SEND_ADDR:
 13126                           
 13127                           
 13128                           ;i2c1.c: 381: if(i2c_10bit_address_restart != 1)
 13129  0BCF  0366               	decf	I2C1_ISR@i2c_10bit_address_restart^(0+128),w
 13130  0BD0  1903               	btfsc	3,2
 13131  0BD1  2BEE               	goto	i1l5547
 13132                           
 13133                           ;i2c1.c: 382: {
 13134                           ;i2c1.c: 384: i2c_address = p_i2c1_trb_current->address;
 13135  0BD2  0869               	movf	_p_i2c1_trb_current^(0+128),w
 13136  0BD3  0086               	movwf	6
 13137  0BD4  3001               	movlw	1	; select bank2/3
 13138  0BD5  0087               	movwf	7
 13139  0BD6  3F40               	moviw [0]fsr1
 13140  0BD7  0020               	movlb	0	; select bank0
 13141  0BD8  00ED               	movwf	I2C1_ISR@i2c_address
 13142  0BD9  3F41               	moviw [1]fsr1
 13143  0BDA  00EE               	movwf	I2C1_ISR@i2c_address+1
 13144                           
 13145                           ;i2c1.c: 385: pi2c_buf_ptr = p_i2c1_trb_current->pbuffer;
 13146  0BDB  0021               	movlb	1	; select bank1
 13147  0BDC  0869               	movf	_p_i2c1_trb_current^(0+128),w
 13148  0BDD  3E03               	addlw	3
 13149  0BDE  0086               	movwf	6
 13150  0BDF  3001               	movlw	1	; select bank2/3
 13151  0BE0  0087               	movwf	7
 13152  0BE1  3F40               	moviw [0]fsr1
 13153  0BE2  0022               	movlb	2	; select bank2
 13154  0BE3  00B8               	movwf	I2C1_ISR@pi2c_buf_ptr^(0+256)
 13155  0BE4  3F41               	moviw [1]fsr1
 13156  0BE5  00B9               	movwf	(I2C1_ISR@pi2c_buf_ptr+1)^(0+256)
 13157                           
 13158                           ;i2c1.c: 386: i2c_bytes_left = p_i2c1_trb_current->length;
 13159  0BE6  0021               	movlb	1	; select bank1
 13160  0BE7  0869               	movf	_p_i2c1_trb_current^(0+128),w
 13161  0BE8  0086               	movwf	6
 13162  0BE9  3001               	movlw	1	; select bank2/3
 13163  0BEA  0087               	movwf	7
 13164  0BEB  3001               	movlw	1	; select bank2/3
 13165  0BEC  3F42               	moviw [2]fsr1
 13166  0BED  00E7               	movwf	I2C1_ISR@i2c_bytes_left^(0+128)
 13167  0BEE                     i1l5547:	
 13168                           ;i2c1.c: 407: }
 13169                           ;i2c1.c: 408: }
 13170                           
 13171                           ;i2c1.c: 406: i2c_10bit_address_restart = 0;
 13172                           
 13173                           ;i2c1.c: 404: i2c1_state = S_MASTER_ACK_ADDR;
 13174                           
 13175                           ;i2c1.c: 400: else
 13176                           ;i2c1.c: 401: {
 13177                           ;i2c1.c: 403: SSP1BUF = i2c_address;
 13178                           
 13179                           ;i2c1.c: 399: }
 13180                           
 13181                           ;i2c1.c: 398: i2c1_state = S_MASTER_SEND_ADDR_10BIT_LSB;
 13182                           
 13183                           ;i2c1.c: 393: {
 13184                           ;i2c1.c: 397: SSP1BUF = 0xF0 | ((i2c_address >> 8) & 0x0006);
 13185                           
 13186                           ;i2c1.c: 391: {
 13187                           ;i2c1.c: 392: if (0 == i2c_10bit_address_restart)
 13188                           
 13189                           ;i2c1.c: 387: }
 13190                           ;i2c1.c: 390: if(!1 && (0x0 != i2c_address))
 13191                           
 13192                           
 13193                           ;i2c1.c: 409: else
 13194                           ;i2c1.c: 410: {
 13195                           ;i2c1.c: 412: SSP1BUF = i2c_address;
 13196  0BEE  0020               	movlb	0	; select bank0
 13197  0BEF  086D               	movf	I2C1_ISR@i2c_address,w
 13198  0BF0  0024               	movlb	4	; select bank4
 13199  0BF1  0091               	movwf	17	;volatile
 13200                           
 13201                           ;i2c1.c: 413: if(i2c_address & 0x01)
 13202  0BF2  0020               	movlb	0	; select bank0
 13203  0BF3  1C6D               	btfss	I2C1_ISR@i2c_address,0
 13204  0BF4  2BFB               	goto	i1l5553
 13205                           
 13206                           ;i2c1.c: 414: {
 13207                           ;i2c1.c: 416: i2c1_state = S_MASTER_ACK_ADDR;
 13208  0BF5  3005               	movlw	5
 13209  0BF6  00F9               	movwf	??_I2C1_ISR
 13210  0BF7  0879               	movf	??_I2C1_ISR,w
 13211  0BF8  0021               	movlb	1	; select bank1
 13212  0BF9  00EB               	movwf	_i2c1_state^(0+128)
 13213                           
 13214                           ;i2c1.c: 417: }
 13215  0BFA  0008               	return
 13216  0BFB                     i1l5553:	
 13217                           
 13218                           ;i2c1.c: 418: else
 13219                           ;i2c1.c: 419: {
 13220                           ;i2c1.c: 421: i2c1_state = S_MASTER_SEND_DATA;
 13221  0BFB  3003               	movlw	3
 13222  0BFC  00F9               	movwf	??_I2C1_ISR
 13223  0BFD  0879               	movf	??_I2C1_ISR,w
 13224  0BFE  0021               	movlb	1	; select bank1
 13225  0BFF  00EB               	movwf	_i2c1_state^(0+128)
 13226                           
 13227                           ;i2c1.c: 422: }
 13228                           ;i2c1.c: 423: }
 13229                           ;i2c1.c: 424: break;
 13230  0C00  0008               	return
 13231  0C01                     i1l82:	
 13232                           ;i2c1.c: 426: case S_MASTER_SEND_DATA:
 13233                           
 13234                           
 13235                           ;i2c1.c: 429: if(SSP1CON2bits.ACKSTAT)
 13236  0C01  0024               	movlb	4	; select bank4
 13237  0C02  1F16               	btfss	22,6	;volatile
 13238  0C03  2C0F               	goto	i1l5561
 13239                           
 13240                           ;i2c1.c: 430: {
 13241                           ;i2c1.c: 432: i2c1_object.i2cErrors++;
 13242  0C04  3001               	movlw	1
 13243  0C05  00F9               	movwf	??_I2C1_ISR
 13244  0C06  0879               	movf	??_I2C1_ISR,w
 13245  0C07  0021               	movlb	1	; select bank1
 13246  0C08  07DD               	addwf	(_i2c1_object^(0+128)+4),f
 13247                           
 13248                           ;i2c1.c: 435: SSP1CON2bits.ACKSTAT = 0;
 13249  0C09  0024               	movlb	4	; select bank4
 13250  0C0A  1316               	bcf	22,6	;volatile
 13251                           
 13252                           ;i2c1.c: 438: I2C1_Stop(I2C1_DATA_NO_ACK);
 13253  0C0B  3005               	movlw	5
 13254  0C0C  3192  225A         	fcall	_I2C1_Stop
 13255                           
 13256                           ;i2c1.c: 440: }
 13257  0C0E  0008               	return
 13258  0C0F                     i1l5561:	
 13259                           
 13260                           ;i2c1.c: 441: else
 13261                           ;i2c1.c: 442: {
 13262                           ;i2c1.c: 444: if(i2c_bytes_left-- == 0U)
 13263  0C0F  3001               	movlw	1
 13264  0C10  0021               	movlb	1	; select bank1
 13265  0C11  02E7               	subwf	I2C1_ISR@i2c_bytes_left^(0+128),f
 13266  0C12  0A67               	incf	I2C1_ISR@i2c_bytes_left^(0+128),w
 13267  0C13  1D03               	btfss	3,2
 13268  0C14  2C29               	goto	i1l5569
 13269                           
 13270                           ;i2c1.c: 445: {
 13271                           ;i2c1.c: 449: p_i2c1_trb_current++;
 13272  0C15  3005               	movlw	5
 13273  0C16  00F9               	movwf	??_I2C1_ISR
 13274  0C17  0879               	movf	??_I2C1_ISR,w
 13275  0C18  07E9               	addwf	_p_i2c1_trb_current^(0+128),f
 13276                           
 13277                           ;i2c1.c: 452: if(--i2c1_trb_count == 0)
 13278  0C19  3001               	movlw	1
 13279  0C1A  02EA               	subwf	_i2c1_trb_count^(0+128),f
 13280  0C1B  1D03               	btfss	3,2
 13281  0C1C  2C21               	goto	i1l86
 13282                           
 13283                           ;i2c1.c: 453: {
 13284                           ;i2c1.c: 454: I2C1_Stop(I2C1_MESSAGE_COMPLETE);
 13285  0C1D  3000               	movlw	0
 13286  0C1E  3192  225A         	fcall	_I2C1_Stop
 13287                           
 13288                           ;i2c1.c: 455: }
 13289  0C20  0008               	return
 13290  0C21                     i1l86:	
 13291                           
 13292                           ;i2c1.c: 456: else
 13293                           ;i2c1.c: 457: {
 13294                           ;i2c1.c: 464: SSP1CON2bits.RSEN = 1;
 13295  0C21  0024               	movlb	4	; select bank4
 13296  0C22  1496               	bsf	22,1	;volatile
 13297                           
 13298                           ;i2c1.c: 467: i2c1_state = S_MASTER_SEND_ADDR;
 13299  0C23  3002               	movlw	2
 13300  0C24  00F9               	movwf	??_I2C1_ISR
 13301  0C25  0879               	movf	??_I2C1_ISR,w
 13302  0C26  0021               	movlb	1	; select bank1
 13303  0C27  00EB               	movwf	_i2c1_state^(0+128)
 13304                           
 13305                           ;i2c1.c: 469: }
 13306                           ;i2c1.c: 470: }
 13307  0C28  0008               	return
 13308  0C29                     i1l5569:	
 13309                           
 13310                           ;i2c1.c: 471: else
 13311                           ;i2c1.c: 472: {
 13312                           ;i2c1.c: 474: SSP1BUF = *pi2c_buf_ptr++;
 13313  0C29  0022               	movlb	2	; select bank2
 13314  0C2A  0838               	movf	I2C1_ISR@pi2c_buf_ptr^(0+256),w
 13315  0C2B  0086               	movwf	6
 13316  0C2C  0839               	movf	(I2C1_ISR@pi2c_buf_ptr+1)^(0+256),w
 13317  0C2D  0087               	movwf	7
 13318  0C2E  0801               	movf	1,w
 13319  0C2F  0024               	movlb	4	; select bank4
 13320  0C30  0091               	movwf	17	;volatile
 13321  0C31  3001               	movlw	1
 13322  0C32  0022               	movlb	2	; select bank2
 13323  0C33  07B8               	addwf	I2C1_ISR@pi2c_buf_ptr^(0+256),f
 13324  0C34  3000               	movlw	0
 13325  0C35  3DB9               	addwfc	(I2C1_ISR@pi2c_buf_ptr+1)^(0+256),f
 13326                           
 13327                           ;i2c1.c: 475: }
 13328                           ;i2c1.c: 476: }
 13329                           ;i2c1.c: 477: break;
 13330  0C36  0008               	return
 13331  0C37                     i1l89:	
 13332                           ;i2c1.c: 479: case S_MASTER_ACK_ADDR:
 13333                           
 13334                           
 13335                           ;i2c1.c: 482: if(SSP1CON2bits.ACKSTAT)
 13336  0C37  0024               	movlb	4	; select bank4
 13337  0C38  1F16               	btfss	22,6	;volatile
 13338  0C39  2C45               	goto	i1l90
 13339                           
 13340                           ;i2c1.c: 483: {
 13341                           ;i2c1.c: 486: i2c1_object.i2cErrors++;
 13342  0C3A  3001               	movlw	1
 13343  0C3B  00F9               	movwf	??_I2C1_ISR
 13344  0C3C  0879               	movf	??_I2C1_ISR,w
 13345  0C3D  0021               	movlb	1	; select bank1
 13346  0C3E  07DD               	addwf	(_i2c1_object^(0+128)+4),f
 13347                           
 13348                           ;i2c1.c: 489: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
 13349  0C3F  3004               	movlw	4
 13350  0C40  3192  225A         	fcall	_I2C1_Stop
 13351                           
 13352                           ;i2c1.c: 492: SSP1CON2bits.ACKSTAT = 0;
 13353  0C42  0024               	movlb	4	; select bank4
 13354  0C43  1316               	bcf	22,6	;volatile
 13355                           
 13356                           ;i2c1.c: 493: }
 13357  0C44  0008               	return
 13358  0C45                     i1l90:	
 13359                           
 13360                           ;i2c1.c: 494: else
 13361                           ;i2c1.c: 495: {
 13362                           ;i2c1.c: 496: SSP1CON2bits.RCEN = 1;
 13363  0C45  1596               	bsf	22,3	;volatile
 13364                           
 13365                           ;i2c1.c: 497: i2c1_state = S_MASTER_ACK_RCV_DATA;
 13366  0C46  3008               	movlw	8
 13367  0C47  00F9               	movwf	??_I2C1_ISR
 13368  0C48  0879               	movf	??_I2C1_ISR,w
 13369  0C49  0021               	movlb	1	; select bank1
 13370  0C4A  00EB               	movwf	_i2c1_state^(0+128)
 13371                           
 13372                           ;i2c1.c: 498: }
 13373                           ;i2c1.c: 499: break;
 13374  0C4B  0008               	return
 13375  0C4C                     i1l5581:	
 13376                           ;i2c1.c: 501: case S_MASTER_RCV_DATA:
 13377                           
 13378                           
 13379                           ;i2c1.c: 506: i2c1_state = S_MASTER_ACK_RCV_DATA;
 13380  0C4C  3008               	movlw	8
 13381  0C4D  00F9               	movwf	??_I2C1_ISR
 13382  0C4E  0879               	movf	??_I2C1_ISR,w
 13383  0C4F  00EB               	movwf	_i2c1_state^(0+128)
 13384                           
 13385                           ;i2c1.c: 509: SSP1CON2bits.RCEN = 1;
 13386  0C50  0024               	movlb	4	; select bank4
 13387  0C51  1596               	bsf	22,3	;volatile
 13388                           
 13389                           ;i2c1.c: 511: break;
 13390  0C52  0008               	return
 13391  0C53                     i1l5585:	
 13392                           ;i2c1.c: 513: case S_MASTER_ACK_RCV_DATA:
 13393                           
 13394                           
 13395                           ;i2c1.c: 516: *pi2c_buf_ptr++ = SSP1BUF;
 13396  0C53  0022               	movlb	2	; select bank2
 13397  0C54  0838               	movf	I2C1_ISR@pi2c_buf_ptr^(0+256),w
 13398  0C55  0086               	movwf	6
 13399  0C56  0839               	movf	(I2C1_ISR@pi2c_buf_ptr+1)^(0+256),w
 13400  0C57  0087               	movwf	7
 13401  0C58  0024               	movlb	4	; select bank4
 13402  0C59  0811               	movf	17,w	;volatile
 13403  0C5A  0081               	movwf	1
 13404  0C5B  3001               	movlw	1
 13405  0C5C  0022               	movlb	2	; select bank2
 13406  0C5D  07B8               	addwf	I2C1_ISR@pi2c_buf_ptr^(0+256),f
 13407  0C5E  3000               	movlw	0
 13408  0C5F  3DB9               	addwfc	(I2C1_ISR@pi2c_buf_ptr+1)^(0+256),f
 13409                           
 13410                           ;i2c1.c: 519: if(--i2c_bytes_left)
 13411  0C60  3001               	movlw	1
 13412  0C61  0021               	movlb	1	; select bank1
 13413  0C62  02E7               	subwf	I2C1_ISR@i2c_bytes_left^(0+128),f
 13414  0C63  1903               	btfsc	3,2
 13415  0C64  2C6D               	goto	i1l94
 13416                           
 13417                           ;i2c1.c: 520: {
 13418                           ;i2c1.c: 526: SSP1CON2bits.ACKDT = 0;
 13419  0C65  0024               	movlb	4	; select bank4
 13420  0C66  1296               	bcf	22,5	;volatile
 13421                           
 13422                           ;i2c1.c: 529: i2c1_state = S_MASTER_RCV_DATA;
 13423  0C67  3006               	movlw	6
 13424  0C68  00F9               	movwf	??_I2C1_ISR
 13425  0C69  0879               	movf	??_I2C1_ISR,w
 13426  0C6A  0021               	movlb	1	; select bank1
 13427  0C6B  00EB               	movwf	_i2c1_state^(0+128)
 13428                           
 13429                           ;i2c1.c: 530: }
 13430  0C6C  2C71               	goto	i1l5597
 13431  0C6D                     i1l94:	
 13432                           
 13433                           ;i2c1.c: 531: else
 13434                           ;i2c1.c: 532: {
 13435                           ;i2c1.c: 536: SSP1CON2bits.ACKDT = 1;
 13436  0C6D  0024               	movlb	4	; select bank4
 13437  0C6E  1696               	bsf	22,5	;volatile
 13438                           
 13439                           ;i2c1.c: 538: I2C1_FunctionComplete();
 13440  0C6F  3191  21FD         	fcall	_I2C1_FunctionComplete
 13441  0C71                     i1l5597:	
 13442                           
 13443                           ;i2c1.c: 539: }
 13444                           ;i2c1.c: 542: SSP1CON2bits.ACKEN = 1;
 13445  0C71  0024               	movlb	4	; select bank4
 13446  0C72  1616               	bsf	22,4	;volatile
 13447                           
 13448                           ;i2c1.c: 543: break;
 13449  0C73  0008               	return
 13450  0C74                     i1l5599:	
 13451                           ;i2c1.c: 545: case S_MASTER_RCV_STOP:
 13452                           
 13453                           
 13454                           ;i2c1.c: 546: case S_MASTER_SEND_STOP:
 13455                           ;i2c1.c: 549: I2C1_Stop(I2C1_MESSAGE_COMPLETE);
 13456  0C74  3000               	movlw	0
 13457  0C75  3192  225A         	fcall	_I2C1_Stop
 13458                           
 13459                           ;i2c1.c: 550: break;
 13460  0C77  0008               	return
 13461  0C78                     i1l5601:	
 13462                           ;i2c1.c: 552: default:
 13463                           
 13464                           
 13465                           ;i2c1.c: 556: i2c1_object.i2cErrors++;
 13466  0C78  3001               	movlw	1
 13467  0C79  00F9               	movwf	??_I2C1_ISR
 13468  0C7A  0879               	movf	??_I2C1_ISR,w
 13469  0C7B  0021               	movlb	1	; select bank1
 13470  0C7C  07DD               	addwf	(_i2c1_object^(0+128)+4),f
 13471                           
 13472                           ;i2c1.c: 557: I2C1_Stop(I2C1_LOST_STATE);
 13473  0C7D  3006               	movlw	6
 13474  0C7E  3192  225A         	fcall	_I2C1_Stop
 13475                           
 13476                           ;i2c1.c: 560: }
 13477                           
 13478                           ;i2c1.c: 558: break;
 13479  0C80  0008               	return
 13480  0C81                     i1l5607:	
 13481  0C81  0021               	movlb	1	; select bank1
 13482  0C82  086B               	movf	_i2c1_state^(0+128),w
 13483                           
 13484                           ; Switch size 1, requested type "space"
 13485                           ; Number of cases is 11, Range of values is 0 to 11
 13486                           ; switch strategies available:
 13487                           ; Name         Instructions Cycles
 13488                           ; direct_byte           30     6 (fixed)
 13489                           ; simple_byte           34    18 (average)
 13490                           ; jumptable            260     6 (fixed)
 13491                           ;	Chosen strategy is direct_byte
 13492  0C83  0084               	movwf	4
 13493  0C84  300C               	movlw	12
 13494  0C85  0204               	subwf	4,w
 13495  0C86  1803               	skipnc
 13496  0C87  2C78               	goto	i1l5601
 13497  0C88  3191               	movlp	high i1S5827
 13498  0C89  3504               	lslf	4,w
 13499  0C8A  3EC5               	addlw	low i1S5827
 13500  0C8B  0082               	movwf	2
 13501  0C8C  0008               	return
 13502  0C8D                     __end_of_I2C1_ISR:	
 13503                           
 13504                           	psect	swtext1
 13505  11C5                     __pswtext1:	
 13506  11C5                     i1S5827:	
 13507  11C5  318B  2B4A         	ljmp	i1l60
 13508  11C7  318B  2B78         	ljmp	i1l65
 13509  11C9  318B  2BCF         	ljmp	i1l5529
 13510  11CB  318C  2C01         	ljmp	i1l82
 13511  11CD  318C  2C74         	ljmp	i1l5599
 13512  11CF  318C  2C37         	ljmp	i1l89
 13513  11D1  318C  2C4C         	ljmp	i1l5581
 13514  11D3  318C  2C74         	ljmp	i1l5599
 13515  11D5  318C  2C53         	ljmp	i1l5585
 13516  11D7  318C  2C78         	ljmp	i1l5601
 13517  11D9  318B  2B80         	ljmp	i1l66
 13518  11DB  318B  2BA5         	ljmp	i1l71
 13519                           
 13520                           	psect	text64
 13521  125A                     __ptext64:	
 13522 ;; *************** function _I2C1_Stop *****************
 13523 ;; Defined at:
 13524 ;;		line 581 in file "mcc_generated_files/i2c1.c"
 13525 ;; Parameters:    Size  Location     Type
 13526 ;;  completion_c    1    wreg     enum E2972
 13527 ;; Auto vars:     Size  Location     Type
 13528 ;;  completion_c    1    1[COMMON] enum E2972
 13529 ;; Return value:  Size  Location     Type
 13530 ;;                  1    wreg      void 
 13531 ;; Registers used:
 13532 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13533 ;; Tracked objects:
 13534 ;;		On entry : 0/0
 13535 ;;		On exit  : 0/0
 13536 ;;		Unchanged: 0/0
 13537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13539 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13540 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13541 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13542 ;;Total ram usage:        2 bytes
 13543 ;; Hardware stack levels used:    1
 13544 ;; This function calls:
 13545 ;;		Nothing
 13546 ;; This function is called by:
 13547 ;;		_I2C1_ISR
 13548 ;; This function uses a non-reentrant model
 13549 ;;
 13550                           
 13551                           
 13552                           ;psect for function _I2C1_Stop
 13553  125A                     _I2C1_Stop:	
 13554                           
 13555                           ;incstack = 0
 13556                           ; Regs used in _I2C1_Stop: [wreg+fsr1l+fsr1h+status,2+status,0]
 13557                           ;I2C1_Stop@completion_code stored from wreg
 13558  125A  00F8               	movwf	I2C1_Stop@completion_code
 13559                           
 13560                           ;i2c1.c: 584: SSP1CON2bits.PEN = 1;
 13561  125B  0024               	movlb	4	; select bank4
 13562  125C  1516               	bsf	22,2	;volatile
 13563                           
 13564                           ;i2c1.c: 587: if (p_i2c1_current->pTrFlag != (0))
 13565  125D  0021               	movlb	1	; select bank1
 13566  125E  0868               	movf	_p_i2c1_current^(0+128),w
 13567  125F  3E02               	addlw	2
 13568  1260  0086               	movwf	6
 13569  1261  3001               	movlw	1	; select bank2/3
 13570  1262  0087               	movwf	7
 13571  1263  0801               	movf	1,w
 13572  1264  1903               	btfsc	3,2
 13573  1265  2A72               	goto	i1l5343
 13574                           
 13575                           ;i2c1.c: 588: {
 13576                           ;i2c1.c: 590: *(p_i2c1_current->pTrFlag) = completion_code;
 13577  1266  0878               	movf	I2C1_Stop@completion_code,w
 13578  1267  00F7               	movwf	??_I2C1_Stop
 13579  1268  0868               	movf	_p_i2c1_current^(0+128),w
 13580  1269  3E02               	addlw	2
 13581  126A  0086               	movwf	6
 13582  126B  3001               	movlw	1	; select bank2/3
 13583  126C  0087               	movwf	7
 13584  126D  0801               	movf	1,w
 13585  126E  0086               	movwf	6
 13586  126F  0187               	clrf	7
 13587  1270  0877               	movf	??_I2C1_Stop,w
 13588  1271  0081               	movwf	1
 13589  1272                     i1l5343:	
 13590                           
 13591                           ;i2c1.c: 591: }
 13592                           ;i2c1.c: 594: i2c1_state = S_MASTER_IDLE;
 13593  1272  01EB               	clrf	_i2c1_state^(0+128)
 13594  1273  0008               	return
 13595  1274                     __end_of_I2C1_Stop:	
 13596                           
 13597                           	psect	text65
 13598  11FD                     __ptext65:	
 13599 ;; *************** function _I2C1_FunctionComplete *****************
 13600 ;; Defined at:
 13601 ;;		line 563 in file "mcc_generated_files/i2c1.c"
 13602 ;; Parameters:    Size  Location     Type
 13603 ;;		None
 13604 ;; Auto vars:     Size  Location     Type
 13605 ;;		None
 13606 ;; Return value:  Size  Location     Type
 13607 ;;                  1    wreg      void 
 13608 ;; Registers used:
 13609 ;;		wreg, status,2, status,0
 13610 ;; Tracked objects:
 13611 ;;		On entry : 0/0
 13612 ;;		On exit  : 0/0
 13613 ;;		Unchanged: 0/0
 13614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13616 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13617 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13618 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13619 ;;Total ram usage:        1 bytes
 13620 ;; Hardware stack levels used:    1
 13621 ;; This function calls:
 13622 ;;		Nothing
 13623 ;; This function is called by:
 13624 ;;		_I2C1_ISR
 13625 ;; This function uses a non-reentrant model
 13626 ;;
 13627                           
 13628                           
 13629                           ;psect for function _I2C1_FunctionComplete
 13630  11FD                     _I2C1_FunctionComplete:	
 13631                           
 13632                           ;i2c1.c: 567: p_i2c1_trb_current++;
 13633                           
 13634                           ;incstack = 0
 13635                           ; Regs used in _I2C1_FunctionComplete: [wreg+status,2+status,0]
 13636  11FD  3005               	movlw	5
 13637  11FE  00F7               	movwf	??_I2C1_FunctionComplete
 13638  11FF  0877               	movf	??_I2C1_FunctionComplete,w
 13639  1200  0021               	movlb	1	; select bank1
 13640  1201  07E9               	addwf	_p_i2c1_trb_current^(0+128),f
 13641                           
 13642                           ;i2c1.c: 570: if(--i2c1_trb_count == 0)
 13643  1202  3001               	movlw	1
 13644  1203  02EA               	subwf	_i2c1_trb_count^(0+128),f
 13645  1204  1D03               	btfss	3,2
 13646  1205  2A0B               	goto	i1l101
 13647                           
 13648                           ;i2c1.c: 571: {
 13649                           ;i2c1.c: 572: i2c1_state = S_MASTER_SEND_STOP;
 13650  1206  3004               	movlw	4
 13651  1207  00F7               	movwf	??_I2C1_FunctionComplete
 13652  1208  0877               	movf	??_I2C1_FunctionComplete,w
 13653  1209  00EB               	movwf	_i2c1_state^(0+128)
 13654                           
 13655                           ;i2c1.c: 573: }
 13656  120A  0008               	return
 13657  120B                     i1l101:	
 13658                           
 13659                           ;i2c1.c: 574: else
 13660                           ;i2c1.c: 575: {
 13661                           ;i2c1.c: 576: i2c1_state = S_MASTER_RESTART;
 13662  120B  01EB               	clrf	_i2c1_state^(0+128)
 13663  120C  0AEB               	incf	_i2c1_state^(0+128),f
 13664  120D  0008               	return
 13665  120E                     __end_of_I2C1_FunctionComplete:	
 13666                           
 13667                           	psect	text66
 13668  07FE                     __ptext66:	
 13669 ;; *************** function _I2C1_BusCollisionISR *****************
 13670 ;; Defined at:
 13671 ;;		line 728 in file "mcc_generated_files/i2c1.c"
 13672 ;; Parameters:    Size  Location     Type
 13673 ;;		None
 13674 ;; Auto vars:     Size  Location     Type
 13675 ;;		None
 13676 ;; Return value:  Size  Location     Type
 13677 ;;                  1    wreg      void 
 13678 ;; Registers used:
 13679 ;;		None
 13680 ;; Tracked objects:
 13681 ;;		On entry : 0/0
 13682 ;;		On exit  : 0/0
 13683 ;;		Unchanged: 0/0
 13684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13686 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13688 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13689 ;;Total ram usage:        0 bytes
 13690 ;; Hardware stack levels used:    1
 13691 ;; This function calls:
 13692 ;;		Nothing
 13693 ;; This function is called by:
 13694 ;;		_INTERRUPT_InterruptManager
 13695 ;; This function uses a non-reentrant model
 13696 ;;
 13697                           
 13698                           
 13699                           ;psect for function _I2C1_BusCollisionISR
 13700  07FE                     _I2C1_BusCollisionISR:	
 13701                           
 13702                           ;incstack = 0
 13703                           ; Regs used in _I2C1_BusCollisionISR: []
 13704  07FE  0008               	return
 13705  07FF                     __end_of_I2C1_BusCollisionISR:	
 13706                           
 13707                           	psect	text67
 13708  12C5                     __ptext67:	
 13709 ;; *************** function _EUSART_Transmit_ISR *****************
 13710 ;; Defined at:
 13711 ;;		line 165 in file "mcc_generated_files/eusart.c"
 13712 ;; Parameters:    Size  Location     Type
 13713 ;;		None
 13714 ;; Auto vars:     Size  Location     Type
 13715 ;;		None
 13716 ;; Return value:  Size  Location     Type
 13717 ;;                  1    wreg      void 
 13718 ;; Registers used:
 13719 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13720 ;; Tracked objects:
 13721 ;;		On entry : 0/0
 13722 ;;		On exit  : 0/0
 13723 ;;		Unchanged: 0/0
 13724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13726 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13727 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13728 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13729 ;;Total ram usage:        1 bytes
 13730 ;; Hardware stack levels used:    1
 13731 ;; This function calls:
 13732 ;;		Nothing
 13733 ;; This function is called by:
 13734 ;;		_INTERRUPT_InterruptManager
 13735 ;; This function uses a non-reentrant model
 13736 ;;
 13737                           
 13738                           
 13739                           ;psect for function _EUSART_Transmit_ISR
 13740  12C5                     _EUSART_Transmit_ISR:	
 13741                           
 13742                           ;eusart.c: 169: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
 13743                           
 13744                           ;incstack = 0
 13745                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 13746  12C5  3040               	movlw	64
 13747  12C6  0274               	subwf	_eusartTxBufferRemaining,w	;volatile
 13748  12C7  1803               	skipnc
 13749  12C8  2ADE               	goto	i1l256
 13750                           
 13751                           ;eusart.c: 170: {
 13752                           ;eusart.c: 171: TXREG = eusartTxBuffer[eusartTxTail++];
 13753  12C9  0875               	movf	_eusartTxTail,w
 13754  12CA  3EA0               	addlw	(low (_eusartTxBuffer| (0+512)))& (0+255)
 13755  12CB  0086               	movwf	6
 13756  12CC  3002               	movlw	2	; select bank5/6
 13757  12CD  0087               	movwf	7
 13758  12CE  0801               	movf	1,w
 13759  12CF  0023               	movlb	3	; select bank3
 13760  12D0  009A               	movwf	26	;volatile
 13761  12D1  3001               	movlw	1
 13762  12D2  00F7               	movwf	??_EUSART_Transmit_ISR
 13763  12D3  0877               	movf	??_EUSART_Transmit_ISR,w
 13764  12D4  07F5               	addwf	_eusartTxTail,f	;volatile
 13765                           
 13766                           ;eusart.c: 172: if(sizeof(eusartTxBuffer) <= eusartTxTail)
 13767  12D5  3040               	movlw	64
 13768  12D6  0275               	subwf	_eusartTxTail,w	;volatile
 13769  12D7  1803               	btfsc	3,0
 13770                           
 13771                           ;eusart.c: 173: {
 13772                           ;eusart.c: 174: eusartTxTail = 0;
 13773  12D8  01F5               	clrf	_eusartTxTail	;volatile
 13774                           
 13775                           ;eusart.c: 175: }
 13776                           ;eusart.c: 176: eusartTxBufferRemaining++;
 13777  12D9  3001               	movlw	1
 13778  12DA  00F7               	movwf	??_EUSART_Transmit_ISR
 13779  12DB  0877               	movf	??_EUSART_Transmit_ISR,w
 13780  12DC  07F4               	addwf	_eusartTxBufferRemaining,f	;volatile
 13781                           
 13782                           ;eusart.c: 177: }
 13783  12DD  0008               	return
 13784  12DE                     i1l256:	
 13785                           
 13786                           ;eusart.c: 178: else
 13787                           ;eusart.c: 179: {
 13788                           ;eusart.c: 180: PIE1bits.TXIE = 0;
 13789  12DE  0021               	movlb	1	; select bank1
 13790  12DF  1211               	bcf	17,4	;volatile
 13791  12E0  0008               	return
 13792  12E1                     __end_of_EUSART_Transmit_ISR:	
 13793                           
 13794                           	psect	text68
 13795  12A9                     __ptext68:	
 13796 ;; *************** function _EUSART_Receive_ISR *****************
 13797 ;; Defined at:
 13798 ;;		line 184 in file "mcc_generated_files/eusart.c"
 13799 ;; Parameters:    Size  Location     Type
 13800 ;;		None
 13801 ;; Auto vars:     Size  Location     Type
 13802 ;;		None
 13803 ;; Return value:  Size  Location     Type
 13804 ;;                  1    wreg      void 
 13805 ;; Registers used:
 13806 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13807 ;; Tracked objects:
 13808 ;;		On entry : 0/0
 13809 ;;		On exit  : 0/0
 13810 ;;		Unchanged: 0/0
 13811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13813 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13814 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13815 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13816 ;;Total ram usage:        1 bytes
 13817 ;; Hardware stack levels used:    1
 13818 ;; This function calls:
 13819 ;;		Nothing
 13820 ;; This function is called by:
 13821 ;;		_INTERRUPT_InterruptManager
 13822 ;; This function uses a non-reentrant model
 13823 ;;
 13824                           
 13825                           
 13826                           ;psect for function _EUSART_Receive_ISR
 13827  12A9                     _EUSART_Receive_ISR:	
 13828                           
 13829                           ;eusart.c: 187: if(1 == RCSTAbits.OERR)
 13830                           
 13831                           ;incstack = 0
 13832                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 13833  12A9  0023               	movlb	3	; select bank3
 13834  12AA  1C9D               	btfss	29,1	;volatile
 13835  12AB  2AAE               	goto	i1l4519
 13836                           
 13837                           ;eusart.c: 188: {
 13838                           ;eusart.c: 191: RCSTAbits.CREN = 0;
 13839  12AC  121D               	bcf	29,4	;volatile
 13840                           
 13841                           ;eusart.c: 192: RCSTAbits.CREN = 1;
 13842  12AD  161D               	bsf	29,4	;volatile
 13843  12AE                     i1l4519:	
 13844                           
 13845                           ;eusart.c: 193: }
 13846                           ;eusart.c: 196: eusartRxBuffer[eusartRxHead++] = RCREG;
 13847  12AE  0819               	movf	25,w	;volatile
 13848  12AF  00F7               	movwf	??_EUSART_Receive_ISR
 13849  12B0  0873               	movf	_eusartRxHead,w
 13850  12B1  3E20               	addlw	(low (_eusartRxBuffer| (0+768)))& (0+255)
 13851  12B2  0086               	movwf	6
 13852  12B3  3003               	movlw	3	; select bank6/7
 13853  12B4  0087               	movwf	7
 13854  12B5  0877               	movf	??_EUSART_Receive_ISR,w
 13855  12B6  0081               	movwf	1
 13856  12B7  3001               	movlw	1
 13857  12B8  00F7               	movwf	??_EUSART_Receive_ISR
 13858  12B9  0877               	movf	??_EUSART_Receive_ISR,w
 13859  12BA  07F3               	addwf	_eusartRxHead,f	;volatile
 13860                           
 13861                           ;eusart.c: 197: if(sizeof(eusartRxBuffer) <= eusartRxHead)
 13862  12BB  3040               	movlw	64
 13863  12BC  0273               	subwf	_eusartRxHead,w	;volatile
 13864  12BD  1803               	btfsc	3,0
 13865                           
 13866                           ;eusart.c: 198: {
 13867                           ;eusart.c: 199: eusartRxHead = 0;
 13868  12BE  01F3               	clrf	_eusartRxHead	;volatile
 13869                           
 13870                           ;eusart.c: 200: }
 13871                           ;eusart.c: 201: eusartRxCount++;
 13872  12BF  3001               	movlw	1
 13873  12C0  00F7               	movwf	??_EUSART_Receive_ISR
 13874  12C1  0877               	movf	??_EUSART_Receive_ISR,w
 13875  12C2  0021               	movlb	1	; select bank1
 13876  12C3  07E5               	addwf	_eusartRxCount^(0+128),f	;volatile
 13877  12C4  0008               	return
 13878  12C5                     __end_of_EUSART_Receive_ISR:	
 13879  007E                     btemp	set	126	;btemp
 13880  007E                     int$flags	set	126
 13881  007E                     wtemp0	set	126


Data Sizes:
    Strings     442
    Constant    11
    Data        6
    BSS         332
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      14
    BANK0            80     75      79
    BANK1            80     57      79
    BANK2            80      0      69
    BANK3            80      0      60
    BANK4            80      0      48
    BANK5            80      0      64
    BANK6            80      0      64
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           16      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    i2c1_tr_queue.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 50
		 -> i2c1_write_no_data@buf(BANK0[1]), i2c1_read@reg(BANK0[1]), sen@length(BANK0[1]), sen@type(BANK0[1]), 
		 -> read_buf(BANK3[16]), exec_remote_cmd@send_buf(BANK1[50]), exec_remote_cmd@data(BANK1[1]), 

    i2c1_tr_queue.pTrFlag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c1_write_no_data@status(BANK0[1]), i2c1_read@status(BANK0[1]), i2c1_write@status(BANK0[1]), 

    i2c1_tr_queue.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C1_MasterRead@trBlock(BANK2[5]), I2C1_MasterWrite@trBlock(BANK2[5]), 

    PROTOCOL_Extension_Handler$0	PTR unsigned char  size(1) Largest target is 48
		 -> buf(BANK4[48]), 

    data	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    strncmp@s2	PTR const unsigned char  size(2) Largest target is 192
		 -> buf(BANK4[48]), cmd_buf(BIGRAM[192]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_50(CODE[4]), STR_49(CODE[4]), STR_47(CODE[4]), STR_46(CODE[4]), 
		 -> STR_43(CODE[4]), STR_42(CODE[4]), STR_41(CODE[4]), STR_39(CODE[4]), 
		 -> STR_35(CODE[4]), STR_34(CODE[4]), STR_33(CODE[4]), STR_32(CODE[4]), 
		 -> STR_27(CODE[4]), STR_26(CODE[4]), STR_24(CODE[4]), STR_22(CODE[4]), 
		 -> STR_21(CODE[4]), STR_20(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_6(CODE[4]), STR_5(CODE[4]), STR_4(CODE[4]), STR_1(CODE[4]), 

    strcpy@from	PTR const unsigned char  size(1) Largest target is 48
		 -> buf(BANK4[48]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 192
		 -> cmd_buf(BIGRAM[192]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 192
		 -> cmd_buf(BIGRAM[192]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 192
		 -> buf(BANK4[48]), cmd_buf(BIGRAM[192]), 

    sp__PROTOCOL_I2C_SEN	PTR unsigned char  size(1) Largest target is 16
		 -> type_no_data(BANK2[1]), PROTOCOL_Send_uint8_t@pbuf(BANK2[1]), sendbuf(BANK3[16]), readbuf.length(BANK2[1]), 
		 -> readbuf.type(BANK2[1]), readbuf(BANK2[5]), 

    PROTOCOL_Print_TLV@pbuffer	PTR unsigned char  size(1) Largest target is 16
		 -> read_buf(BANK3[16]), NULL(NULL[0]), 

    PROTOCOL_EXT@char_buf	PTR unsigned char  size(1) Largest target is 48
		 -> buf(BANK4[48]), 

    PROTOCOL_Set_Tick_Handler@tick_handler	PTR void  size(2) Largest target is 1
		 -> tick_handler(), 

    PROTOCOL_Tick_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), tick_handler(), 

    PROTOCOL_Set_Extension_Handler@extension_handler	PTR void  size(2) Largest target is 1
		 -> command_handler(), 

    PROTOCOL_Extension_Handler	PTR FTN(PTR unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), command_handler(), 

    PROTOCOL_Loop_Func	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    PROTOCOL_Initialize@inv_handler	PTR void  size(2) Largest target is 1
		 -> inv_handler(), 

    PROTOCOL_Inv_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), inv_handler(), 

    PROTOCOL_Initialize@set_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Set_Handler	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@stop_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Stop_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@start_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Start_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@device_id	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_36(CODE[17]), 

    device_id_	PTR const unsigned char  size(2) Largest target is 8192
		 -> ROM(CODE[8192]), STR_36(CODE[17]), 

    S1056$pbuffer	PTR unsigned char  size(1) Largest target is 16
		 -> PROTOCOL_Send_uint8_t@pbuf(BANK2[1]), sendbuf(BANK3[16]), 

    readbuf.pbuffer	PTR unsigned char  size(1) Largest target is 16
		 -> PROTOCOL_Send_uint8_t@pbuf(BANK2[1]), sendbuf(BANK3[16]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 8192
		 -> STR_45(CODE[4]), buf(BANK4[48]), STR_37(CODE[7]), ROM(CODE[8192]), 
		 -> printf@c(BANK0[1]), STR_36(CODE[17]), I2C1_ISR@i2c_address(BANK0[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 26
		 -> STR_83(CODE[10]), STR_82(CODE[9]), STR_81(CODE[10]), STR_80(CODE[9]), 
		 -> STR_79(CODE[4]), STR_78(CODE[4]), STR_77(CODE[4]), STR_76(CODE[4]), 
		 -> STR_75(CODE[4]), STR_74(CODE[4]), STR_73(CODE[4]), STR_72(CODE[4]), 
		 -> STR_71(CODE[14]), STR_70(CODE[9]), STR_69(CODE[10]), STR_68(CODE[9]), 
		 -> STR_67(CODE[10]), STR_66(CODE[9]), STR_65(CODE[7]), STR_64(CODE[4]), 
		 -> STR_63(CODE[4]), STR_62(CODE[9]), STR_61(CODE[4]), STR_60(CODE[4]), 
		 -> STR_59(CODE[10]), STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[8]), 
		 -> STR_55(CODE[4]), STR_54(CODE[4]), STR_53(CODE[9]), STR_52(CODE[6]), 
		 -> STR_51(CODE[10]), STR_48(CODE[10]), STR_44(CODE[10]), STR_40(CODE[10]), 
		 -> STR_38(CODE[5]), STR_31(CODE[4]), STR_30(CODE[4]), STR_29(CODE[4]), 
		 -> STR_28(CODE[7]), STR_25(CODE[26]), STR_23(CODE[26]), STR_19(CODE[22]), 
		 -> STR_18(CODE[22]), STR_17(CODE[26]), STR_16(CODE[22]), STR_15(CODE[4]), 
		 -> STR_14(CODE[4]), STR_13(CODE[7]), STR_12(CODE[25]), STR_11(CODE[10]), 
		 -> STR_8(CODE[12]), STR_7(CODE[11]), STR_3(CODE[12]), STR_2(CODE[10]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    i2c1_read@pbuf	PTR unsigned char  size(2) Largest target is 16
		 -> sen@length(BANK0[1]), sen@type(BANK0[1]), read_buf(BANK3[16]), exec_remote_cmd@data(BANK1[1]), 

    i2c1_write@pbuf	PTR unsigned char  size(1) Largest target is 50
		 -> exec_remote_cmd@send_buf(BANK1[50]), 

    command_handler@buf	PTR unsigned char  size(1) Largest target is 48
		 -> buf(BANK4[48]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 192
		 -> cmd_buf(BIGRAM[192]), 

    put_cmd@buf	PTR unsigned char  size(1) Largest target is 48
		 -> buf(BANK4[48]), 

    fetch@sch	PTR unsigned char  size(1) Largest target is 28
		 -> schedule(BANK3[28]), 

    exec_remote_cmd@buf	PTR unsigned char  size(2) Largest target is 192
		 -> cmd_buf(BIGRAM[192]), 

    I2C1_MasterWriteTRBBuild@pdata	PTR unsigned char  size(1) Largest target is 50
		 -> i2c1_write_no_data@buf(BANK0[1]), i2c1_read@reg(BANK0[1]), exec_remote_cmd@send_buf(BANK1[50]), 

    I2C1_MasterWriteTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 50
		 -> i2c1_write_no_data@buf(BANK0[1]), i2c1_read@reg(BANK0[1]), sen@length(BANK0[1]), sen@type(BANK0[1]), 
		 -> read_buf(BANK3[16]), exec_remote_cmd@send_buf(BANK1[50]), exec_remote_cmd@data(BANK1[1]), 

    I2C1_MasterWriteTRBBuild@ptrb	PTR struct . size(1) Largest target is 5
		 -> I2C1_MasterWrite@trBlock(BANK2[5]), 

    I2C1_MasterReadTRBBuild@pdata	PTR unsigned char  size(2) Largest target is 16
		 -> sen@length(BANK0[1]), sen@type(BANK0[1]), read_buf(BANK3[16]), exec_remote_cmd@data(BANK1[1]), 

    I2C1_MasterReadTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 50
		 -> i2c1_write_no_data@buf(BANK0[1]), i2c1_read@reg(BANK0[1]), sen@length(BANK0[1]), sen@type(BANK0[1]), 
		 -> read_buf(BANK3[16]), exec_remote_cmd@send_buf(BANK1[50]), exec_remote_cmd@data(BANK1[1]), 

    I2C1_MasterReadTRBBuild@ptrb	PTR struct . size(1) Largest target is 5
		 -> I2C1_MasterRead@trBlock(BANK2[5]), 

    i2c1_object.pTrTail.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 50
		 -> i2c1_write_no_data@buf(BANK0[1]), i2c1_read@reg(BANK0[1]), sen@length(BANK0[1]), sen@type(BANK0[1]), 
		 -> read_buf(BANK3[16]), exec_remote_cmd@send_buf(BANK1[50]), exec_remote_cmd@data(BANK1[1]), 

    i2c1_object.pTrTail.pTrFlag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c1_write_no_data@status(BANK0[1]), i2c1_read@status(BANK0[1]), i2c1_write@status(BANK0[1]), 

    i2c1_object.pTrTail.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C1_MasterRead@trBlock(BANK2[5]), I2C1_MasterWrite@trBlock(BANK2[5]), 

    I2C1_MasterTRBInsert@ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C1_MasterRead@trBlock(BANK2[5]), I2C1_MasterWrite@trBlock(BANK2[5]), 

    I2C1_MasterTRBInsert@pflag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c1_write_no_data@status(BANK0[1]), i2c1_read@status(BANK0[1]), i2c1_write@status(BANK0[1]), 

    I2C1_MasterRead@pflag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c1_read@status(BANK0[1]), 

    I2C1_MasterRead@pdata	PTR unsigned char  size(2) Largest target is 16
		 -> sen@length(BANK0[1]), sen@type(BANK0[1]), read_buf(BANK3[16]), exec_remote_cmd@data(BANK1[1]), 

    F3084.pbuffer	PTR unsigned char  size(2) Largest target is 50
		 -> i2c1_write_no_data@buf(BANK0[1]), i2c1_read@reg(BANK0[1]), sen@length(BANK0[1]), sen@type(BANK0[1]), 
		 -> read_buf(BANK3[16]), exec_remote_cmd@send_buf(BANK1[50]), exec_remote_cmd@data(BANK1[1]), 

    I2C1_MasterWrite@pflag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c1_write_no_data@status(BANK0[1]), i2c1_read@status(BANK0[1]), i2c1_write@status(BANK0[1]), 

    I2C1_MasterWrite@pdata	PTR unsigned char  size(1) Largest target is 50
		 -> i2c1_write_no_data@buf(BANK0[1]), i2c1_read@reg(BANK0[1]), exec_remote_cmd@send_buf(BANK1[50]), 

    F3079.pbuffer	PTR unsigned char  size(2) Largest target is 50
		 -> i2c1_write_no_data@buf(BANK0[1]), i2c1_read@reg(BANK0[1]), sen@length(BANK0[1]), sen@type(BANK0[1]), 
		 -> read_buf(BANK3[16]), exec_remote_cmd@send_buf(BANK1[50]), exec_remote_cmd@data(BANK1[1]), 

    I2C1_ISR@pi2c_buf_ptr	PTR unsigned char  size(2) Largest target is 50
		 -> i2c1_write_no_data@buf(BANK0[1]), i2c1_read@reg(BANK0[1]), sen@length(BANK0[1]), sen@type(BANK0[1]), 
		 -> read_buf(BANK3[16]), exec_remote_cmd@send_buf(BANK1[50]), exec_remote_cmd@data(BANK1[1]), I2C1_ISR@i2c_address(BANK0[2]), 
		 -> NULL(NULL[0]), 

    S19$pbuffer	PTR unsigned char  size(2) Largest target is 50
		 -> i2c1_write_no_data@buf(BANK0[1]), i2c1_read@reg(BANK0[1]), sen@length(BANK0[1]), sen@type(BANK0[1]), 
		 -> read_buf(BANK3[16]), exec_remote_cmd@send_buf(BANK1[50]), exec_remote_cmd@data(BANK1[1]), 

    p_i2c1_trb_current.pbuffer	PTR unsigned char  size(2) Largest target is 50
		 -> i2c1_write_no_data@buf(BANK0[1]), i2c1_read@reg(BANK0[1]), sen@length(BANK0[1]), sen@type(BANK0[1]), 
		 -> read_buf(BANK3[16]), exec_remote_cmd@send_buf(BANK1[50]), exec_remote_cmd@data(BANK1[1]), 

    p_i2c1_trb_current	PTR struct . size(1) Largest target is 5
		 -> I2C1_MasterRead@trBlock(BANK2[5]), I2C1_MasterWrite@trBlock(BANK2[5]), NULL(NULL[0]), 

    i2c1_object.pTrHead.pTrFlag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c1_write_no_data@status(BANK0[1]), i2c1_read@status(BANK0[1]), i2c1_write@status(BANK0[1]), 

    i2c1_object.pTrHead.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C1_MasterRead@trBlock(BANK2[5]), I2C1_MasterWrite@trBlock(BANK2[5]), 

    S31$pTrFlag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c1_write_no_data@status(BANK0[1]), i2c1_read@status(BANK0[1]), i2c1_write@status(BANK0[1]), 

    p_i2c1_current.pTrFlag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c1_write_no_data@status(BANK0[1]), i2c1_read@status(BANK0[1]), i2c1_write@status(BANK0[1]), 

    S31$ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C1_MasterRead@trBlock(BANK2[5]), I2C1_MasterWrite@trBlock(BANK2[5]), 

    p_i2c1_current.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C1_MasterRead@trBlock(BANK2[5]), I2C1_MasterWrite@trBlock(BANK2[5]), 

    p_i2c1_current	PTR struct . size(1) Largest target is 5
		 -> i2c1_tr_queue(BANK2[3]), NULL(NULL[0]), 

    S42$pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c1_tr_queue(BANK2[3]), 

    i2c1_object.pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c1_tr_queue(BANK2[3]), 

    S42$pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c1_tr_queue(BANK2[3]), 

    i2c1_object.pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c1_tr_queue(BANK2[3]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_I2C1_ISR
    _I2C1_ISR->_I2C1_Stop

Critical Paths under _main in BANK0

    _main->_PROTOCOL_Loop
    _init->___awdiv
    _SYSTEM_Initialize->_EUSART_Initialize
    _SYSTEM_Initialize->_I2C1_Initialize
    _PROTOCOL_Loop->_PROTOCOL_EXT
    _tick_handler->_exec_remote_cmd
    _exec_remote_cmd->_printf
    _i2c1_write->_I2C1_MasterWrite
    _check_plg->_scan_dev
    _scan_dev->_i2c1_read
    _del_dev->___awdiv
    _add_dev->___awdiv
    _inv_handler->_fetch
    _fetch->_sen
    _PROTOCOL_Write_Device_Address->_DATAEE_WriteByte
    _PROTOCOL_SAV->_DATAEE_WriteByte
    _PROTOCOL_EXT->_command_handler
    _command_handler->_one_shot_sen
    _put_cmd->_strcpy
    _strcpy->___wmul
    _print_dev_map->_printf
    _one_shot_sen->_sen
    _sen->_PROTOCOL_Print_TLV
    _i2c1_write_no_data->_I2C1_MasterWrite
    _i2c1_read->_I2C1_MasterRead
    _I2C1_MasterWrite->_I2C1_MasterWriteTRBBuild
    _I2C1_MasterRead->_I2C1_MasterReadTRBBuild
    _PROTOCOL_Print_TLV->_printf
    _printf->___lwmod
    _putch->_EUSART_Write
    ___lwmod->___lwdiv
    _abs->___awmod
    _detected->___awdiv
    _atoi->___wmul
    _PROTOCOL_Initialize->_DATAEE_ReadByte

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _tick_handler->_exec_remote_cmd

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  175466
                _PROTOCOL_Initialize
                      _PROTOCOL_Loop
     _PROTOCOL_Set_Extension_Handler
          _PROTOCOL_Set_Tick_Handler
                  _SYSTEM_Initialize
                               _init
 ---------------------------------------------------------------------------------
 (1) _init                                                11    11      0    3994
                                              9 BANK0      9     9      0
                    _DATAEE_ReadByte
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                  _EUSART_Initialize
                    _I2C1_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C1_Initialize                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Set_Tick_Handler                            2     0      2     108
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Set_Extension_Handler                       2     0      2     108
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Loop                                        4     4      0  170577
                                             71 BANK0      4     4      0
                   Absolute function *
                        _EUSART_Read
                       _PROTOCOL_EXT
       _PROTOCOL_Read_Device_Address
                       _PROTOCOL_SAV
                       _PROTOCOL_SET
                       _PROTOCOL_STA
                       _PROTOCOL_STP
      _PROTOCOL_Write_Device_Address
            _TMR0_HasOverflowOccured
                               _atoi
                        _inv_handler *
                             _printf
                            _strncmp
                       _tick_handler *
 ---------------------------------------------------------------------------------
 (2) _tick_handler                                         1     1      0   50417
                                             41 BANK0      1     1      0
                            ___lwmod
                          _check_plg
                    _exec_remote_cmd
                           _scan_dev
 ---------------------------------------------------------------------------------
 (3) _exec_remote_cmd                                     62    62      0   26670
                                             36 BANK0      5     5      0
                                              0 BANK1     57    57      0
                             ___wmul
                               _atoi
                          _i2c1_read
                         _i2c1_write
                 _i2c1_write_no_data
                             _printf
                            _strncmp
 ---------------------------------------------------------------------------------
 (4) _i2c1_write                                           8     4      4    1877
                                             14 BANK0      8     4      4
                   _I2C1_MasterWrite
 ---------------------------------------------------------------------------------
 (3) _check_plg                                            3     3      0   12714
                                             32 BANK0      3     3      0
                 _i2c1_write_no_data
                           _scan_dev
 ---------------------------------------------------------------------------------
 (3) _scan_dev                                             5     5      0    9850
                                             27 BANK0      5     5      0
                            _add_dev
                            _del_dev
                          _i2c1_read
 ---------------------------------------------------------------------------------
 (4) _del_dev                                              8     8      0    2618
                                              9 BANK0      8     8      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) _add_dev                                              8     8      0    2618
                                              9 BANK0      8     8      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) _inv_handler                                          2     2      0   38057
                            ___lwmod
                              _fetch
 ---------------------------------------------------------------------------------
 (3) _fetch                                                7     7      0   36874
                                             54 BANK0      7     7      0
                           _detected
                 _i2c1_write_no_data
                             _printf
                                _sen
 ---------------------------------------------------------------------------------
 (2) _TMR0_HasOverflowOccured                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_Write_Device_Address                        2     2      0     392
                                              3 BANK0      2     2      0
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_STP                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_STA                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_SET                                         2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_SAV                                         1     1      0     330
                                              3 BANK0      1     1      0
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_Read_Device_Address                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_EXT                                         2     2      0   65836
                                             69 BANK0      2     2      0
                   Absolute function *
                    _command_handler *
 ---------------------------------------------------------------------------------
 (3) _command_handler                                     10     9      1   65739
                                             59 BANK0     10     9      1
                   _DATAEE_WriteByte
                            ___awdiv
                               _atoi
                       _one_shot_sen
                      _print_dev_map
                             _printf
                            _put_cmd
                            _strncmp
 ---------------------------------------------------------------------------------
 (4) _strncmp                                              8     2      6    4742
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (4) _put_cmd                                              6     6      0    1474
                                             12 BANK0      6     6      0
                             ___wmul
                             _strcpy
 ---------------------------------------------------------------------------------
 (5) _strcpy                                               6     3      3     203
                                              6 BANK0      6     3      3
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _print_dev_map                                        4     4      0    8583
                                             36 BANK0      4     4      0
                   _dev_map_iterator
                             _printf
 ---------------------------------------------------------------------------------
 (5) _dev_map_iterator                                     8     8      0      24
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (4) _one_shot_sen                                         5     5      0   36479
                                             54 BANK0      5     5      0
                           _detected
                 _i2c1_write_no_data
                             _printf
                                _sen
 ---------------------------------------------------------------------------------
 (4) _sen                                                 11    11      0   22509
                                             45 BANK0      9     9      0
                 _PROTOCOL_Print_TLV
                          _i2c1_read
                 _i2c1_write_no_data
 ---------------------------------------------------------------------------------
 (4) _i2c1_write_no_data                                   7     4      3    2841
                                             14 BANK0      7     4      3
                   _I2C1_MasterWrite
 ---------------------------------------------------------------------------------
 (4) _i2c1_read                                           11     5      6    4457
                                             16 BANK0     11     5      6
                    _I2C1_MasterRead
                   _I2C1_MasterWrite
 ---------------------------------------------------------------------------------
 (5) _I2C1_MasterWrite                                     7     3      4    1518
                                              7 BANK0      7     3      4
               _I2C1_MasterTRBInsert
           _I2C1_MasterWriteTRBBuild
 ---------------------------------------------------------------------------------
 (6) _I2C1_MasterWriteTRBBuild                             7     3      4     354
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (5) _I2C1_MasterRead                                      8     2      6    1097
                                              8 BANK0      8     2      6
            _I2C1_MasterReadTRBBuild
               _I2C1_MasterTRBInsert
 ---------------------------------------------------------------------------------
 (6) _I2C1_MasterTRBInsert                                 4     2      2     388
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (6) _I2C1_MasterReadTRBBuild                              8     3      5     376
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (5) _PROTOCOL_Print_TLV                                   9     6      3   14688
                                             36 BANK0      9     6      3
                            ___awdiv
                            ___awmod
                                _abs
                             _concat
                             _printf
 ---------------------------------------------------------------------------------
 (4) _printf                                              26    20      6    8454
                                             14 BANK0     22    16      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                                _abs (ARG)
                             _concat (ARG)
                   _dev_map_iterator (ARG)
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0      75
                                              2 BANK0      1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (6) _EUSART_Write                                         2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              6     2      4    1183
                                              8 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              8     4      4     290
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (6) _concat                                               8     6      2     428
                                              0 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     526
                                              7 BANK0      4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              7     3      4    1216
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) _detected                                             7     7      0    2486
                                              9 BANK0      7     7      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4    2372
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (4) _atoi                                                 7     5      2    2170
                                              6 BANK0      7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              2     2      0      99
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1198
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _DATAEE_WriteByte                                     3     2      1     330
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) Absolute function(Fake)                               1     0      1       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Read                                          2     2      0      24
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Initialize                                 10     2      8     679
                                              1 BANK0     10     2      8
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (2) _DATAEE_ReadByte                                      1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _INTERRUPT_InterruptManager                          1     1      0      31
                                              6 COMMON     1     1      0
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
               _I2C1_BusCollisionISR
                           _I2C1_ISR
 ---------------------------------------------------------------------------------
 (11) _I2C1_ISR                                            4     4      0      31
                                              2 COMMON     4     4      0
              _I2C1_FunctionComplete
                          _I2C1_Stop
 ---------------------------------------------------------------------------------
 (12) _I2C1_Stop                                           2     2      0      31
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _I2C1_FunctionComplete                               1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _I2C1_BusCollisionISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART_Transmit_ISR                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _EUSART_Receive_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PROTOCOL_Initialize
     _DATAEE_ReadByte
   _PROTOCOL_Loop
     Absolute function(Fake) *
     _EUSART_Read *
     _PROTOCOL_EXT *
       Absolute function(Fake) *
       _command_handler *
         _DATAEE_WriteByte
         ___awdiv
         _atoi
           ___wmul
           _isdigit
         _one_shot_sen
           _detected
             ___awdiv
           _i2c1_write_no_data
             _I2C1_MasterWrite
               _I2C1_MasterTRBInsert
               _I2C1_MasterWriteTRBBuild
           _printf
             ___awdiv (ARG)
             ___awmod (ARG)
             ___lwdiv (ARG)
             ___lwmod (ARG)
               ___lwdiv (ARG)
             ___wmul (ARG)
             _abs (ARG)
               ___awmod (ARG)
             _concat (ARG)
             _dev_map_iterator (ARG)
             _isdigit (ARG)
             _putch (ARG)
               _EUSART_Write
           _sen
             _PROTOCOL_Print_TLV
               ___awdiv
               ___awmod
               _abs
                 ___awmod (ARG)
               _concat
               _printf
                 ___awdiv (ARG)
                 ___awmod (ARG)
                 ___lwdiv (ARG)
                 ___lwmod (ARG)
                   ___lwdiv (ARG)
                 ___wmul (ARG)
                 _abs (ARG)
                   ___awmod (ARG)
                 _concat (ARG)
                 _dev_map_iterator (ARG)
                 _isdigit (ARG)
                 _putch (ARG)
                   _EUSART_Write
             _i2c1_read
               _I2C1_MasterRead
                 _I2C1_MasterReadTRBBuild
                 _I2C1_MasterTRBInsert
               _I2C1_MasterWrite
                 _I2C1_MasterTRBInsert
                 _I2C1_MasterWriteTRBBuild
             _i2c1_write_no_data
               _I2C1_MasterWrite
                 _I2C1_MasterTRBInsert
                 _I2C1_MasterWriteTRBBuild
         _print_dev_map
           _dev_map_iterator
           _printf
             ___awdiv (ARG)
             ___awmod (ARG)
             ___lwdiv (ARG)
             ___lwmod (ARG)
               ___lwdiv (ARG)
             ___wmul (ARG)
             _abs (ARG)
               ___awmod (ARG)
             _concat (ARG)
             _dev_map_iterator (ARG)
             _isdigit (ARG)
             _putch (ARG)
               _EUSART_Write
         _printf
           ___awdiv (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _abs (ARG)
             ___awmod (ARG)
           _concat (ARG)
           _dev_map_iterator (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _EUSART_Write
         _put_cmd
           ___wmul
           _strcpy
             ___wmul (ARG)
         _strncmp
     _PROTOCOL_Read_Device_Address *
     _PROTOCOL_SAV *
       _DATAEE_WriteByte
     _PROTOCOL_SET *
     _PROTOCOL_STA *
     _PROTOCOL_STP *
     _PROTOCOL_Write_Device_Address *
       _DATAEE_WriteByte
     _TMR0_HasOverflowOccured *
     _atoi *
       ___wmul
       _isdigit
     _inv_handler *
       ___lwmod
         ___lwdiv (ARG)
       _fetch
         _detected
           ___awdiv
         _i2c1_write_no_data
           _I2C1_MasterWrite
             _I2C1_MasterTRBInsert
             _I2C1_MasterWriteTRBBuild
         _printf
           ___awdiv (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _abs (ARG)
             ___awmod (ARG)
           _concat (ARG)
           _dev_map_iterator (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _EUSART_Write
         _sen
           _PROTOCOL_Print_TLV
             ___awdiv
             ___awmod
             _abs
               ___awmod (ARG)
             _concat
             _printf
               ___awdiv (ARG)
               ___awmod (ARG)
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _abs (ARG)
                 ___awmod (ARG)
               _concat (ARG)
               _dev_map_iterator (ARG)
               _isdigit (ARG)
               _putch (ARG)
                 _EUSART_Write
           _i2c1_read
             _I2C1_MasterRead
               _I2C1_MasterReadTRBBuild
               _I2C1_MasterTRBInsert
             _I2C1_MasterWrite
               _I2C1_MasterTRBInsert
               _I2C1_MasterWriteTRBBuild
           _i2c1_write_no_data
             _I2C1_MasterWrite
               _I2C1_MasterTRBInsert
               _I2C1_MasterWriteTRBBuild
     _printf *
       ___awdiv (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _abs (ARG)
         ___awmod (ARG)
       _concat (ARG)
       _dev_map_iterator (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _EUSART_Write
     _strncmp *
     _tick_handler *
       ___lwmod
         ___lwdiv (ARG)
       _check_plg
         _i2c1_write_no_data
           _I2C1_MasterWrite
             _I2C1_MasterTRBInsert
             _I2C1_MasterWriteTRBBuild
         _scan_dev
           _add_dev
             ___awdiv
           _del_dev
             ___awdiv
           _i2c1_read
             _I2C1_MasterRead
               _I2C1_MasterReadTRBBuild
               _I2C1_MasterTRBInsert
             _I2C1_MasterWrite
               _I2C1_MasterTRBInsert
               _I2C1_MasterWriteTRBBuild
       _exec_remote_cmd
         ___wmul
         _atoi
           ___wmul
           _isdigit
         _i2c1_read
           _I2C1_MasterRead
             _I2C1_MasterReadTRBBuild
             _I2C1_MasterTRBInsert
           _I2C1_MasterWrite
             _I2C1_MasterTRBInsert
             _I2C1_MasterWriteTRBBuild
         _i2c1_write
           _I2C1_MasterWrite
             _I2C1_MasterTRBInsert
             _I2C1_MasterWriteTRBBuild
         _i2c1_write_no_data
           _I2C1_MasterWrite
             _I2C1_MasterTRBInsert
             _I2C1_MasterWriteTRBBuild
         _printf
           ___awdiv (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _abs (ARG)
             ___awmod (ARG)
           _concat (ARG)
           _dev_map_iterator (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _EUSART_Write
         _strncmp
       _scan_dev
         _add_dev
           ___awdiv
         _del_dev
           ___awdiv
         _i2c1_read
           _I2C1_MasterRead
             _I2C1_MasterReadTRBBuild
             _I2C1_MasterTRBInsert
           _I2C1_MasterWrite
             _I2C1_MasterTRBInsert
             _I2C1_MasterWriteTRBBuild
   _PROTOCOL_Set_Extension_Handler
   _PROTOCOL_Set_Tick_Handler
   _SYSTEM_Initialize
     _EUSART_Initialize
     _I2C1_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
     _WDT_Initialize
   _init
     _DATAEE_ReadByte
     ___awdiv
     ___wmul

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR
   _I2C1_BusCollisionISR
   _I2C1_ISR
     _I2C1_FunctionComplete
     _I2C1_Stop

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4B      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     39      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      45       9       86.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      3C      11       75.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      30      13       60.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      40      15       80.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0      40      17       80.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     1DD      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              10      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     1DD      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Sun Oct 08 09:56:40 2017

                    ??_PROTOCOL_Set_Tick_Handler 0022                                                _i 006B  
                                              _j 013B                                                pc 0002  
                __end_of_TMR0_HasOverflowOccured 1F98                                      __CFG_CP$OFF 0000  
                                   ___awdiv@sign 0026                              ___wmul@multiplicand 0022  
                                _timer0ReloadVal 00E4                                      __CFG_LVP$ON 0000  
                                            l244 13AB                                              l355 1FA6  
                                            l188 1371                                              l700 0EFE  
                                            l631 140F                                              l707 0F74  
                                            l724 0FFF                                              l652 1464  
                                            l639 08DD                                              l672 0E51  
                                            l684 0F1E                                              l853 0C8D  
                                   __CFG_CPD$OFF 0000                                              _abs 11DE  
                                            _buf 0220                                              _cnt 00DF  
                                            _sen 0A7D           __end_of_PROTOCOL_Set_Extension_Handler 1FBA  
        __size_of_PROTOCOL_Set_Extension_Handler 0009                   _PROTOCOL_Set_Extension_Handler 1FB1  
                                   ___awmod@sign 0026                                     __CFG_BORV$LO 0000  
                                            wreg 0009                                     __CFG_IESO$ON 0000  
                    __size_of_i2c1_write_no_data 002B                                 detected@dev_addr 002F  
                               exec_remote_cmd@i 00D4                                 exec_remote_cmd@j 00D3  
                                   ?_EUSART_Read 0077                         i2c1_write_no_data@status 0034  
                               __end_of_I2C1_ISR 0C8D                                 ?_command_handler 005B  
                                           ?_abs 0027                                             l1124 12EA  
                                           l5001 02D7                                             l3323 07F0  
                                           l3315 07D2                                             l3235 13A0  
                                           l5003 0307                                             l5101 09FE  
                                           l3317 07DE                                             l3341 14A7  
                                           l5005 030F                                             l3327 07F9  
                                           l3263 091C                                             l5031 0AE1  
                                   _tmr_overflow 013E                                             l3521 0850  
                                           l3345 14B3                                             l3249 13C0  
                                           l5009 0317                                             l3273 0931  
                                           l5121 1615                                             l3531 0858  
                                           l3515 0845                                             l3339 149B  
                                           l3267 0923                                             l3363 13E4  
                                           l3611 08D8                                             l5123 1626  
                                           l3533 0864                                             l3349 14BC  
                                           l3269 0929                                             l3357 1436  
                                           l3613 08DF                                             l3605 08C9  
                                           l5045 0B33                                             l5071 099B  
                                           l3543 087F                                             l3607 08D3  
                                           l3623 1455                                             l5119 15FA  
                                           l5303 04AC                                             l4257 133A  
                                           l5073 0992                                             l3801 151B  
                                           l3625 145F                                             l5129 1535  
                                           l5305 04BC                                             l5209 0746  
                                           l5161 05BD                                             l5153 0583  
                                           l5091 09C1                                             l5075 09A1  
                                           l3547 0887                                             l3539 0876  
                                           l3571 15B8                                             l3563 15B2  
                                           l5251 0368                                             l5171 0615  
                                           l5163 05C2                                             l5093 09C5  
                                           l5085 09B9                                             l3573 15C4  
                                           l3581 15D9                                             l3629 1466  
                                           l5333 0552                                             l5325 0521  
                                           l5181 0650                                             l5413 1691  
                                           l5095 09EE                                             l3559 15AB  
                                           l5319 04FC                                             l5247 0350  
                                           l5239 17A8                                             l5191 06E0  
                                           l5167 05E6                                             l3585 15E1  
                                           l3577 15D0                                             l5329 053A  
                                           l5265 03E0                                             l5441 0797  
                                           l5433 076D                                             l5185 06A2  
                                           l3595 08A4                                             l3771 093E  
                                           l5283 0434                                             l5267 03E7  
                                           l5259 0395                                             l5451 07C4  
                                           l3931 1400                                             l5195 06E8  
                                           l5179 064B                                             l5419 16AC  
                                           l4821 0EBF                                             l3597 08AE  
                                           l3781 0953                                             l5293 0455  
                                           l5445 07AC                                             l5437 0782  
                                           l5429 0758                                             l3933 140A  
                                           l5621 0A0D                                             l4903 0FC5  
                                           l4831 0EDD                                             l4815 0EAF  
                                           l4807 0E9B                                             l4911 0E30  
                                           l4825 0ECC                                             l3785 0988  
                                           l3777 0949                                             l3849 1293  
                                           l3881 1594                                             l5297 0474  
                                           l3953 082F                                             l3937 1411  
                                           l5633 0A24                                             l4763 1FFE  
                                           l4835 0EEA                                             l4819 0EB1  
                                           l4843 0F00                                             l4931 0108  
                                           l3787 098F                                             l3883 155E  
                                           l3955 0834                                             l5731 0D36  
                                           l5707 0CD2                                             l5627 0A1F  
                                           l4909 0FCA                                             l4837 0EF5  
                                           l4829 0ECE                                             l4941 0114  
                                           l4917 00C8                                             l3885 159D  
                                           l3877 157C                                             l4871 0F68  
                                           l4855 0F38                                             l4943 0131  
                                           l4927 00D4                                             l5735 0D4F  
                                           l5727 0D11                                             l5639 0A46  
                                           l4769 12E4                                             l4881 0F93  
                                           l4865 0F49                                             l4793 0E56  
                                           l4945 0144                                             l4929 00F3  
                                           l5753 0DD5                                             l5745 0D8D  
                                           l4859 0F43                                             l4795 0E5F  
                                           l4787 0E4C                                             l4971 01E1  
                                           l4955 0153                                             l5739 0D68  
                                           l5683 0CA2                                             l4893 0FAC  
                                           l4973 0204                                             l4957 0181  
                                           l5765 0E26                                             l5749 0DAF  
                                           l4895 0FB0                                             l4887 0F9D  
                                           l4879 0F90                                             l4799 0E6C  
                                           l4991 0213                                             l4959 01A4  
                                           l5759 0DFB                                             l5695 0CC3  
                                           l4993 027D                                             l4985 0241  
                                           l4969 01B3                                             l5697 0CC4  
                                           l4899 0FBD                                             l4987 0246  
                                           ?_sen 0077                                             l4999 02A7  
                                           STR_1 119D                                             STR_2 111C  
                                           STR_3 10BD                                             STR_4 11BD  
                                           STR_5 1181                                             STR_6 11A5  
                                           STR_7 10D5                                             STR_8 10C9  
                                           STR_9 11B1                                             _LATA 010C  
                                           _LATB 010D                                             _LATC 010E  
                                           u3205 0877                                             u3165 085B  
                                           u3504 1745                                             u3185 0865  
                                           u3265 15BB                                             u3505 1744  
                                           u5115 12EB                                             u3195 086F  
                                           u5125 12F0                                             u3285 15CA  
                                           u2805 149E                                             u3295 15D1  
                                           u2735 07D5                                             u3615 0977  
                                           u3624 1513                                             u3544 16F8  
                                           u3625 1512                                             u2825 14AD  
                                           u3545 16F7                                             u2755 07DF  
                                           u2835 14B4                                             u6035 04E8  
                                           u2765 07E9                                             u2775 07F1  
                                           u5255 0F5E                                             u3594 0966  
                                           u5195 0EC5                                             u3595 0964  
                                           i1l60 0B4A                                             u5445 023C  
                                           i1l71 0BA5                                             u5295 0F83  
                                           i1l72 0BB1                                             i1l65 0B78  
                                           i1l90 0C45                                             i1l82 0C01  
                                           i1l66 0B80                                             u5475 02A2  
                                           u6445 0A68                                             i1l94 0C6D  
                                           i1l86 0C21                                             i1l89 0C37  
                                           u5905 03CF                                             u6807 0AAB  
                                           u5935 0413                                             u6817 0ACA  
                                           u6827 0AFB                                             u6837 0B1D  
                                           u6847 1443                                             u6857 145B  
                                           u5985 0470                                             u6777 13EC  
                                           u6867 0892                                             u5995 048B  
                                           u6787 1406                                             u6877 08AA  
                                           u6797 0A92                                             u6887 08B2  
                                           u6897 08CF                                             _PLLR 04D6  
                                           _TMR0 0015                                             _WPUA 020C  
                                           _WPUB 020D                                             _WPUC 020E  
                __end_of_I2C1_MasterReadTRBBuild 1494                                     __CFG_WRT$OFF 0000  
                                  __CFG_FCMEN$ON 0000                                             abs@a 0027  
                                           _data 013A                                             _devs 00E3  
                                           _atoi 0992                                             _main 14C1  
                                           _init 0A03                            exec_remote_cmd@status 00D5  
                                           fsr0h 0005                                             fsr1h 0007  
                                           indf0 0000                                             fsr0l 0004  
                                           indf1 0001                                             fsr1l 0006  
                         ??_I2C1_MasterTRBInsert 0022                                             btemp 007E  
                                  __CFG_BOREN$ON 0000                                             start 003C  
                 i2c1_write_no_data@write_status 0032                          command_handler@dev_addr 0063  
                                  __CFG_MCLRE$ON 0000                   I2C1_MasterWriteTRBBuild@length 0021  
                                          ??_abs 0029                        __size_of_DATAEE_WriteByte 0023  
                                          ??_sen 004D                          __end_of_TMR0_Initialize 1FD8  
                                     _i2c1_state 00EB                                    __CFG_PLLEN$ON 0000  
                                     _i2c1_write 13EB                                    ?_EUSART_Write 0077  
                 __size_of_OSCILLATOR_Initialize 0007                        I2C1_MasterTRBInsert@count 0023  
                  __end_of_OSCILLATOR_Initialize 1FA9                        I2C1_MasterTRBInsert@pflag 0021  
                            PROTOCOL_Print_TLV@v 004B                                            ?_atoi 0026  
                                          ?_main 0077                                            ?_init 0077  
                                __end_of___awdiv 088C                                __end_of_I2C1_Stop 1274  
                                          STR_10 11AD                                            STR_11 1126  
                                          STR_20 1185                                            STR_12 1059  
                                          STR_21 11A1                                            STR_13 1157  
                                          STR_30 117D                                            STR_22 11A9  
                                          STR_14 117D                                            STR_31 10E6  
                                          STR_15 10E6                                            STR_23 1025  
                                          STR_24 1195                                            STR_32 1189  
                                          STR_40 10F4                                            STR_16 1072  
                                          STR_41 11BD                                            STR_33 1199  
                                          STR_17 103F                                            STR_25 100B  
                                  __CFG_WDTE$OFF 0000                                            STR_42 1181  
                                          STR_34 11B5                                            STR_26 1191  
                                          STR_50 1171                                            STR_18 1088  
                                          STR_19 1088                                            STR_43 11A5  
                                          STR_35 11B9                                            STR_27 118D  
                                          STR_51 10E0                                            STR_60 116D  
                                          STR_52 115E                                            STR_28 1150  
                                          STR_44 10FE                                            STR_36 109E  
                                __end_of___awmod 15E6                                            STR_61 1169  
                                          STR_29 11C1                                            STR_45 1179  
                                          STR_37 1149                                            STR_53 1139  
                                          STR_62 1113                                            STR_46 11B1  
                                          STR_54 116D                                            STR_38 1164  
                                          STR_70 1130                                            STR_63 117D  
                                          STR_39 119D                                            STR_47 11AD  
                                          STR_55 1169                                            STR_71 10AF  
                                          STR_64 10E6                                            STR_48 1126  
                                          STR_56 113A                                            STR_57 117D  
                                          STR_49 1175                                            STR_65 1142  
                                          STR_58 10E6                                            STR_66 1109  
                                          STR_59 1112                                            STR_67 1108  
                                          STR_68 10EB                                            STR_69 10EA  
                                ___awdiv@divisor 0020                                  __end_of_add_dev 175F  
                                __end_of___lwdiv 07FE                                            i1l101 120B  
                                          i1l321 0015                                            i1l323 0021  
                                          i1l325 002D                                            i1l256 12DE  
                                          i1l329 0037                                  __end_of___lwmod 14C1  
                                ___awdiv@counter 0025                                            _MAX_Y 100A  
                                          _RCREG 0199                                            _RCSTA 019D  
                                          _TRISA 008C                                            _TRISB 008D  
                                          _TRISC 008E                                            _TXREG 019A  
                                __end_of_del_dev 1711                                            _TXSTA 019E  
                   __end_of_I2C1_BusCollisionISR 07FF                     __size_of_PROTOCOL_Initialize 0052  
                              ??_I2C1_MasterRead 002E                                ??_I2C1_Initialize 0020  
                      _PROTOCOL_Set_Tick_Handler 1FBA                                  _DATAEE_ReadByte 1FE4  
                                          _fetch 175F                  ??_PROTOCOL_Write_Device_Address 0023  
                                __end_of_dpowers 100A                                   _WDT_Initialize 1F98  
                 PROTOCOL_Initialize@inv_handler 0026                                  __end_of_isdigit 2000  
                                   ?_inv_handler 0077                                            _value 00DE  
                                          atoi@a 002B                                            atoi@s 0026  
                                          _putch 1F9C                                            init@i 0031  
                                          init@y 0030                                   i2c1_write@pbuf 0030  
                                          pclath 000A                                  ??_print_dev_map 0044  
                                __end_of_put_cmd 1679                                            status 0003  
                                          wtemp0 007E                                  __end_of_strncmp 15A0  
                I2C1_MasterWriteTRBBuild@address 0022                               exec_remote_cmd@buf 00D7  
                             exec_remote_cmd@idx 00D2                                  __initialization 003E  
                          I2C1_MasterWrite@pdata 002D                            I2C1_MasterWrite@pflag 002A  
                                   __end_of_atoi 0A03                                     __end_of_main 14EE  
                                   __end_of_init 0A7D                                   ??_EUSART_Write 0020  
                    ?_INTERRUPT_InterruptManager 0077                 PROTOCOL_Initialize@start_handler 0023  
                                    _i2c1_object 00D9                                           ??_atoi 0028  
                                         ??_main 006B                                           ??_init 0029  
                             __size_of_i2c1_read 0055                                   scan_dev@status 003E  
                         __end_of_WDT_Initialize 1F9C                                           ?_fetch 0077  
                                         i1S5827 11C5                                           _EEADRH 0192  
                                         _EEADRL 0191                                           _EEDATH 0194  
                                         _EEDATL 0193                                           _EECON2 0196  
                               ___awdiv@dividend 0022                                           _ANSELA 018C  
                                         ?_putch 0077                                           _ANSELB 018D  
                                         _ANSELC 018E                               _PROTOCOL_Loop_Func 012E  
                                         i1l4519 12AE                                           i1l5343 1272  
                                         i1l5601 0C78                                           i1l5515 0B9F  
                                         i1l5509 0B8C                                           i1l5607 0C81  
                                         i1l5561 0C0F                                           i1l5553 0BFB  
                                         i1l5529 0BCF                                           i1l5547 0BEE  
                                         i1l5581 0C4C                                           i1l5585 0C53  
                                         i1l5569 0C29                                           i1l5497 0B6B  
                                         i1l5597 0C71                                           i1l5599 0C74  
                                         _OSCCON 0099                 __size_of_TMR0_HasOverflowOccured 0004  
                                         _TMR0IF 005A                                           _SPBRGH 019C  
                                         _SPBRGL 019B                                           _WDTCON 0097  
                 PROTOCOL_Initialize@set_handler 0025                                ?_I2C1_MasterWrite 0027  
                                 __CFG_PWRTE$OFF 0000                                 __end_of_detected 151D  
                             ??_I2C1_MasterWrite 002B                          exec_remote_cmd@send_buf 00A0  
                             _PROTOCOL_Print_TLV 00B4                        PROTOCOL_Initialize@scaler 0028  
                                 _p_i2c1_current 00E8                                           ___wmul 12E1  
                                      ??___awdiv 0024                                   __CFG_STVREN$ON 0000  
                                      ??___awmod 0024                                        ??_add_dev 0029  
                                      ??___lwdiv 0024                                        ??___lwmod 002C  
                                         _concat 120E                                   add_dev@old_map 002D  
                                         _filter 00ED                                   add_dev@new_map 002E  
                                   _type_no_data 0164                              _EUSART_Transmit_ISR 12C5  
                     ??_I2C1_MasterWriteTRBBuild 0024                                 ?_TMR0_Initialize 0077  
                                    ?_i2c1_write 002E                                           _locked 0143  
                                      ?_I2C1_ISR 0077                                        ??_del_dev 0029  
                               ___awdiv@quotient 0027                                  check_plg@status 0042  
                                ___awmod@divisor 0020                              ?_PROTOCOL_Print_TLV 0044  
                               __end_of_scan_dev 083A                                  ___awmod@counter 0025  
                                         _printf 0E2B                          __end_of_DATAEE_ReadByte 1FF1  
                                         _strcpy 128E                 __size_of_I2C1_MasterReadTRBBuild 002C  
                                      ??_isdigit 0020                         __end_of_dev_map_iterator 0992  
                                ?_WDT_Initialize 0077                                      sen@dev_addr 0055  
                                      ??_put_cmd 002C                                   print_dev_map@i 0046  
                  I2C1_MasterWriteTRBBuild@pdata 0020                                        ??_strncmp 0026  
                      PROTOCOL_Send_uint8_t@pbuf 0161                             ?_EUSART_Transmit_ISR 0077  
                           ??_PROTOCOL_Print_TLV 0047                             __size_of_EUSART_Read 0020  
                              _SYSTEM_Initialize 1220                          __end_of__initialization 00B0  
PROTOCOL_Set_Extension_Handler@extension_handler 0020                               ?_SYSTEM_Initialize 0077  
                              __end_of_i2c1_read 08E1                              exec_remote_cmd@data 00D6  
                                  __end_of_MAX_Y 100B                                   _i2c1_trb_count 00EA  
                          _I2C1_FunctionComplete 11FD                             _I2C1_BusCollisionISR 07FE  
                                 __pcstackCOMMON 0077                           I2C1_MasterWrite@length 0027  
                                   __pidataBANK1 1F8D                                     __pidataBANK2 1F8A  
                            ??_SYSTEM_Initialize 0021                                    __end_of_fetch 17AE  
                               _DATAEE_WriteByte 1358                               __size_of_check_plg 0015  
                                  __end_of_putch 1FA2                                       ??_I2C1_ISR 0079  
                             command_handler@buf 005B                               command_handler@pos 0072  
                          __end_of_PROTOCOL_Loop 0E2B                   I2C1_MasterReadTRBBuild@address 0023  
                                 _OPTION_REGbits 0095                       i2c1_write_no_data@dev_addr 002E  
                                   init@dev_addr 002F                             one_shot_sen@dev_addr 005A  
                                        ??_fetch 0056                          PROTOCOL_Send_float@pbuf 0156  
                      __end_of_SYSTEM_Initialize 1232                            ??_EUSART_Transmit_ISR 0077  
                           i2c1_read@read_status 0038                                          ??_putch 0022  
                                  ?_one_shot_sen 0077                                       __pbssBANK0 006B  
                                     __pbssBANK1 00D9                                       __pbssBANK2 0120  
                                     __pbssBANK3 01A0                                       __pbssBANK4 0220  
                                     __pbssBANK5 02A0                                       __pbssBANK6 0320  
                           __end_of_EUSART_Write 13C3                       i2c1_write_no_data@reg_addr 0030  
                           __size_of_inv_handler 007B                              __size_of_i2c1_write 0028  
                               command_handler@i 0064                 ??_PROTOCOL_Set_Extension_Handler 0022  
                ?_PROTOCOL_Set_Extension_Handler 0020                         __size_of_exec_remote_cmd 01F3  
                    __size_of_EUSART_Receive_ISR 001C                              _PROTOCOL_Initialize 17AE  
                          ?_I2C1_BusCollisionISR 0077                                       __pmaintext 14C1  
                             one_shot_sen@status 0059                                          ?___wmul 0020  
                                _I2C1_MasterRead 13C3                                       __pintentry 0004  
                                        ?_concat 0020                                  _I2C1_Initialize 12FD  
                                        _BAUDCON 019F                                       _device_id_ 0126  
                                        _APFCON0 011D                                          _APFCON1 011E  
                                        ?_printf 002E                                          ?_strcpy 0026  
                     __end_of_i2c1_write_no_data 1468                                 ?_DATAEE_ReadByte 0077  
                                  _eusartRxCount 00E5                       PROTOCOL_Send_uint16_t@pbuf 015E  
                           ?_PROTOCOL_Initialize 0021                                        _I2C1_Stop 125A  
                                        _OSCTUNE 0098                                        ?_detected 0077  
                                        _SSP1ADD 0212                                          _SSP1BUF 0211  
                                 ??_one_shot_sen 0056                           _PROTOCOL_Start_Handler 0134  
                                  ?_tick_handler 0077                                __end_of_check_plg 125A  
                                del_dev@dev_addr 0030                          _TMR0_HasOverflowOccured 1F94  
                  I2C1_MasterTRBInsert@ptrb_list 0020                             DATAEE_WriteByte@bAdd 0021  
                                      ?_scan_dev 0077                           ?_I2C1_FunctionComplete 0077  
                       __size_of_command_handler 022E                    __size_of_I2C1_MasterTRBInsert 0057  
                                add_dev@dev_addr 0030                               _p_i2c1_trb_current 00E9  
                                        ___awdiv 083A                                          ___awmod 15A0  
                                  ?_PROTOCOL_EXT 0077                                    ?_PROTOCOL_SAV 0077  
                                  ?_PROTOCOL_SET 0077                                    ?_PROTOCOL_STA 0077  
                                  ?_PROTOCOL_STP 0077                                  __size_of___wmul 001C  
                                        _add_dev 1711                                          ___lwdiv 07C9  
                                        ___lwmod 1494                                  __size_of_concat 0012  
                                        _del_dev 16C4                                          _cmd_buf 2330  
                        _I2C1_MasterReadTRBBuild 1468                                          _dev_map 0120  
                                        _do_func 0145                                          __ptext1 0A03  
                                        __ptext2 1220                                          __ptext3 1F98  
                                        __ptext4 1FCD                                          __ptext5 1319  
                                        __ptext6 1FA2                                          __ptext7 12FD  
                                        __ptext8 1274                                          __ptext9 1FBA  
                                __size_of_printf 01D5                                  __size_of_strcpy 001B  
                                        _dpowers 1000                            _OSCILLATOR_Initialize 1FA2  
                                   __size_of_abs 000F                           i2c1_write@write_status 0034  
     PROTOCOL_Write_Device_Address@device_id_i2c 0024                            ??_PROTOCOL_Initialize 0029  
                                        _isdigit 1FF1                                     __size_of_sen 00B9  
                                        _readbuf 0147                     I2C1_MasterReadTRBBuild@pdata 0020  
                           I2C1_MasterRead@pdata 0028                                          _sec_cnt 0140  
                           I2C1_MasterRead@pflag 002D                                 ___awmod@dividend 0022  
                                        _invoked 0141                         ??_PIN_MANAGER_Initialize 0020  
                                        _sendbuf 01BC                                       ?_I2C1_Stop 0077  
                                     ??_detected 0029                                          _tmr_cnt 013F  
                                        _put_cmd 162E                       __size_of_SYSTEM_Initialize 0012  
                           I2C1_ISR@pi2c_buf_ptr 0138                                          clrloop0 1FD9  
                                 ??_tick_handler 0049                                          _running 0142  
                                        _strncmp 155E                             end_of_initialization 00B0  
          PROTOCOL_Set_Tick_Handler@tick_handler 0020                            __end_of_print_dev_map 162E  
                                        sen@type 0052                                       ??_scan_dev 003B  
                     _PROTOCOL_Extension_Handler 012C                                 i2c1_write@status 0035  
                        __end_of_I2C1_MasterRead 13EB                           ??_I2C1_BusCollisionISR 0077  
                              _EUSART_Initialize 1274                          __end_of_I2C1_Initialize 1319  
                             ?_EUSART_Initialize 0077                            _PROTOCOL_Tick_Handler 0128  
                                      _RCSTAbits 019D                                          printf@c 0043  
                                        printf@f 002E                                   ??_PROTOCOL_EXT 0065  
                                 ??_PROTOCOL_SAV 0023                                   ??_PROTOCOL_SET 0020  
                                 ??_PROTOCOL_STA 0020                                   ??_PROTOCOL_STP 0020  
                              ??_exec_remote_cmd 0044                                     __pstringtext 1000  
                                   ??_i2c1_write 0032                              ??_EUSART_Initialize 0020  
                               ??_WDT_Initialize 0020                                    i2c1_read@pbuf 0033  
                      __size_of_I2C1_MasterWrite 002A                                __size_of_I2C1_ISR 0157  
                               __CFG_FOSC$INTOSC 0000                                ?_dev_map_iterator 0077  
                          __size_of_EUSART_Write 0025                        ??_TMR0_HasOverflowOccured 0020  
                          i2c1_write_no_data@buf 0033                                     inv_handler@t 0070  
                             ??_dev_map_iterator 0020                                       _tmr_scaler 0162  
                       __end_of_DATAEE_WriteByte 137B                I2C1_ISR@i2c_10bit_address_restart 00E6  
                      __end_of_EUSART_Initialize 128E                               __end_of_i2c1_write 1413  
                                    printf@width 0041                          I2C1_MasterWrite@address 0028  
                                      _i2c1_read 088C                        ??_I2C1_MasterReadTRBBuild 0025  
                           __end_of_one_shot_sen 155E                                   __end_of___wmul 12FD  
                              ??_command_handler 005C                          I2C1_MasterWrite@trBlock 0151  
                                   _EUSART_Write 139E                                   __end_of_concat 1220  
                       I2C1_Stop@completion_code 0078                           ?_OSCILLATOR_Initialize 0077  
                                  i2c1_write@len 0031                                   __end_of_printf 1000  
                                 __end_of_strcpy 12A9                                   PROTOCOL_Loop@c 0069  
                            start_initialization 003E                                      ??_I2C1_Stop 0077  
                       __size_of_TMR0_Initialize 000B                  __size_of_PIN_MANAGER_Initialize 001F  
                                    __end_of_abs 11ED                                      __end_of_sen 0B36  
                                  ??_EUSART_Read 0020                __size_of_I2C1_MasterWriteTRBBuild 0023  
                                    putch@txData 0022                        ?_I2C1_MasterWriteTRBBuild 0020  
                       dev_map_iterator@dev_addr 0027                      __size_of_PROTOCOL_Print_TLV 0279  
                             dev_map_iterator@xx 00E2                               dev_map_iterator@yy 00E1  
                            DATAEE_ReadByte@bAdd 0020                                 ?_I2C1_MasterRead 0028  
                               ?_I2C1_Initialize 0077                                       ?_i2c1_read 0030  
                                       ??___wmul 0024                         PROTOCOL_Send_int8_t@pbuf 0160  
           __end_of_PROTOCOL_Read_Device_Address 1F87            __size_of_PROTOCOL_Read_Device_Address 0003  
                   _PROTOCOL_Read_Device_Address 1F84                                         ??_concat 0022  
                                    __pdataBANK1 00EC                                 scan_dev@dev_addr 003F  
                                    __pdataBANK2 0162                             __end_of_tick_handler 16C4  
                                       ??_printf 0034                                         ??_strcpy 0029  
                   I2C1_MasterWriteTRBBuild@ptrb 0026                                      __pbssBIGRAM 2330  
                    __end_of_EUSART_Transmit_ISR 12E1                                      __pbssCOMMON 0070  
                                      ___latbits 0002                                    __pcstackBANK0 0020  
                                  __pcstackBANK1 00A0                                    _i2c1_tr_queue 0159  
                           _PROTOCOL_Inv_Handler 012A                                     _isdigit$1463 0020  
                                  ??_inv_handler 005D                             __end_of_PROTOCOL_EXT 1245  
                           __end_of_PROTOCOL_SAV 1FCD                             __end_of_PROTOCOL_SET 1FB1  
                           __end_of_PROTOCOL_STA 1F94                             __end_of_PROTOCOL_STP 1F8A  
                              __size_of_detected 002F                               _i2c1_write_no_data 143D  
                     __end_of_EUSART_Receive_ISR 12C5                  PROTOCOL_Initialize@stop_handler 0024  
                        ??_I2C1_FunctionComplete 0077                       __size_of_EUSART_Initialize 001A  
                            __end_of_EUSART_Read 1358                                    tick_handler@t 0136  
                         __size_of_PROTOCOL_Loop 019E                                        _check_plg 1245  
          __end_of_PROTOCOL_Write_Device_Address 11FD           __size_of_PROTOCOL_Write_Device_Address 0010  
                  _PROTOCOL_Write_Device_Address 11ED                              ?_i2c1_write_no_data 002E  
                               ___lwdiv@dividend 0022                           _PIN_MANAGER_Initialize 1319  
                              __size_of_scan_dev 0038                             EUSART_Read@readValue 0021  
                                       ?___awdiv 0020                                         ?___awmod 0020  
                         PROTOCOL_Print_TLV@type 0044                                         ?_add_dev 0077  
                                       ?___lwdiv 0020                                         ?___lwmod 0028  
                                   _eusartRxHead 0073                                     _eusartTxHead 0076  
                                   _eusartRxTail 006C                                     _eusartTxTail 0075  
                                       _I2C1_ISR 0B36                                         ?_del_dev 0077  
                  ?_PROTOCOL_Read_Device_Address 0077                     ??_INTERRUPT_InterruptManager 007D  
                      PROTOCOL_Send_int16_t@pbuf 015C                                        __pswtext1 11C5  
                               _I2C1_MasterWrite 1413                          _eusartTxBufferRemaining 0074  
                   __end_of_I2C1_MasterTRBInsert 0938                         PROTOCOL_Print_TLV@length 0045  
                                       ?_isdigit 0077                             ??_i2c1_write_no_data 0031  
                         I2C1_MasterRead@address 002B                            dev_map_iterator@exist 0026  
                                 del_dev@old_map 002D                                   del_dev@new_map 002E  
                          dev_map_iterator@start 0163                                         ?_put_cmd 0077  
                               ___lwdiv@quotient 0025                                   __size_of_fetch 004F  
                       __size_of_DATAEE_ReadByte 000D                                         ?_strncmp 0020  
                                 __size_of_putch 0006                                   _eusartRxBuffer 0320  
                    I2C1_MasterReadTRBBuild@ptrb 0027                           I2C1_MasterRead@trBlock 014C  
                              ??_TMR0_Initialize 0020                                   _eusartTxBuffer 02A0  
                                _exec_remote_cmd 055B                                   ___wmul@product 0024  
                                       _LATCbits 010E                             _PROTOCOL_Set_Handler 0130  
                                     ?_check_plg 0077                                        clear_ram0 1FD8  
                            __end_of_inv_handler 07C9                                         _PIE1bits 0091  
                                       _PIE2bits 0092                            __size_of_one_shot_sen 0041  
            __size_of_INTERRUPT_InterruptManager 0038                                         _PIR1bits 0011  
                                       _PIR2bits 0012               __size_of_PROTOCOL_Set_Tick_Handler 0009  
                                      detected@x 002D                                        detected@y 002C  
                     ?_PROTOCOL_Set_Tick_Handler 0020                                      ??_i2c1_read 0036  
                                       _SSP1CON1 0215                                         _SSP1CON3 0217  
                   PROTOCOL_Initialize@device_id 0021                                        _timer_cnt 0146  
                                       _SSP1STAT 0214                                     i2c1_read@len 0035  
                                   i2c1_read@reg 0039                                   _readbuf_status 013D  
                          _PROTOCOL_Stop_Handler 0132                      __end_of_PROTOCOL_Initialize 1800  
                                      concat@lsb 0020                                        concat@msb 0027  
                              ___wmul@multiplier 0020                                    _PROTOCOL_Loop 0C8D  
                                  detected@exist 002E                                       printf@flag 0040  
                                     printf@prec 0038                            DATAEE_WriteByte@bData 0020  
                              i2c1_read@dev_addr 0030                                      _EUSART_Read 1338  
                                   _one_shot_sen 151D                                ?_DATAEE_WriteByte 0020  
                             i2c1_write@dev_addr 002E                               ??_DATAEE_WriteByte 0021  
                                  _slave_address 0144                                       put_cmd@buf 0031  
                              i2c1_read@reg_addr 0032                                       put_cmd@idx 00EC  
                                _command_handler 032D                                       _EECON1bits 0195  
                             PROTOCOL_SET@value_ 0021                        __size_of_dev_map_iterator 005A  
                          __size_of_tick_handler 004B                    __size_of_I2C1_BusCollisionISR 0001  
                         I2C1_ISR@i2c_bytes_left 00E7                __end_of_PROTOCOL_Set_Tick_Handler 1FC3  
                        ??_OSCILLATOR_Initialize 0020                   ?_PROTOCOL_Write_Device_Address 0077  
                               __size_of___awdiv 0052                                 __size_of___awmod 0046  
                                      sen@length 0053                                 __size_of_add_dev 004E  
                               __size_of___lwdiv 0035                                 __size_of___lwmod 002D  
               __end_of_I2C1_MasterWriteTRBBuild 139E                                   ?_PROTOCOL_Loop 0077  
                               __size_of_del_dev 004D                                        sen@status 0054  
                         __size_of_print_dev_map 0048                            __size_of_PROTOCOL_EXT 0013  
                          __size_of_PROTOCOL_SAV 000A                            __size_of_PROTOCOL_SET 0008  
                          __size_of_PROTOCOL_STA 0004                            __size_of_PROTOCOL_STP 0003  
                 ??_PROTOCOL_Read_Device_Address 0020                                         add_dev@x 002C  
                                       add_dev@y 002F                             tick_handler@cmd_next 00E0  
                               __size_of_isdigit 000F                                  ___lwdiv@divisor 0020  
                        __end_of_exec_remote_cmd 074E                              I2C1_ISR@i2c_address 006D  
                                ___lwdiv@counter 0027                                         _detected 14EE  
                                       __ptext10 1FB1                                         __ptext11 0C8D  
                                       __ptext20 175F                                         __ptext12 1679  
                                       __ptext21 1F94                                         __ptext13 055B  
                                       __ptext30 155E                                         __ptext22 11ED  
                                       __ptext14 13EB                                         __ptext31 162E  
                                       __ptext23 1F87                                         __ptext15 1245  
                                       __ptext40 137B                                         __ptext32 128E  
                                       __ptext24 1F90                                         __ptext16 0802  
                                       __ptext41 13C3                                         __ptext33 15E6  
                                       __ptext25 1FA9                                         __ptext17 16C4  
                                       __ptext50 120E                                         __ptext42 08E1  
                                       __ptext34 0938                                         __ptext26 1FC3  
                                       __ptext18 1711                                         __ptext51 11DE  
                                       __ptext43 1468                                         __ptext35 151D  
                                       __ptext27 1F84                                         __ptext19 074E  
                                       __ptext60 17AE                                         __ptext52 15A0  
                                       __ptext44 00B4                                         __ptext36 0A7D  
                                       __ptext28 1232                                         __ptext61 1FE4  
                                       __ptext53 14EE                                         __ptext45 0E2B  
                                       __ptext37 143D                                         __ptext29 032D  
                                       __ptext54 083A                                         __ptext46 1F9C  
                                       __ptext38 088C                                         __ptext63 0B36  
                                       __ptext55 0992                                         __ptext47 139E  
                                       __ptext39 1413                                         __ptext64 125A  
                                       __ptext56 1FF1                                         __ptext48 1494  
                                       __ptext65 11FD                                         __ptext57 12E1  
                                       __ptext49 07C9                                         __ptext66 07FE  
                                       __ptext58 1358                                         __ptext67 12C5  
                                       __ptext59 1338                                         __ptext68 12A9  
                                  fetch@dev_addr 005C                                     _SSP1CON1bits 0215  
                                   _SSP1CON2bits 0216                                         _float100 0124  
                                    _inv_handler 074E                                 __size_of_put_cmd 004B  
                    DATAEE_WriteByte@GIEBitValue 0022                                     _tick_handler 1679  
                               __size_of_strncmp 0042                                       strcpy@from 0028  
                                  __size_of_atoi 0071                                    __size_of_main 002D  
                                  __size_of_init 007A                                         _read_buf 01CC  
                                       del_dev@x 002C                                         del_dev@y 002F  
                  I2C1_MasterReadTRBBuild@length 0022                            I2C1_MasterRead@length 002A  
                                       _scan_dev 0802                                      ??_check_plg 0040  
                                     strncmp@len 0024                                ??_DATAEE_ReadByte 0020  
                                       _schedule 01A0                             _I2C1_MasterTRBInsert 08E1  
                        _BACKPLANE_SLAVE_ADDRESS 00EE                                         fetch@sch 005A  
                                       fetch@pos 005B                                         int$flags 007E  
                                       atoi@sign 002A                                     _PROTOCOL_EXT 1232  
                                   _PROTOCOL_SAV 1FC3                                     _PROTOCOL_SET 1FA9  
                                   _PROTOCOL_STA 1F90                                     _PROTOCOL_STP 1F87  
             __end_of_INTERRUPT_InterruptManager 003C                       _INTERRUPT_InterruptManager 0004  
                                      printf@len 003E                                        printf@val 003C  
                       ?_TMR0_HasOverflowOccured 0077                                       _INTCONbits 000B  
                                       isdigit@c 0021                       __end_of_PROTOCOL_Print_TLV 032D  
                        __end_of_command_handler 055B                          __size_of_WDT_Initialize 0004  
                                       intlevel1 0000                                 ___lwmod@dividend 002A  
                        ?_PIN_MANAGER_Initialize 0077                         __end_of_I2C1_MasterWrite 143D  
                              __CFG_CLKOUTEN$OFF 0000                   __size_of_I2C1_FunctionComplete 0011  
                  __end_of_I2C1_FunctionComplete 120E                                    _print_dev_map 15E6  
                          ?_I2C1_MasterTRBInsert 0020                                        strncmp@s1 0020  
                                      strncmp@s2 0022                         ?_I2C1_MasterReadTRBBuild 0020  
                     PROTOCOL_Print_TLV@dev_addr 004A                          _backplane_slave_enabled 013C  
                                       printf@ap 003B                                         printf@cp 0039  
                             _EUSART_Receive_ISR 12A9                                  ??_PROTOCOL_Loop 0067  
                       __size_of_I2C1_MasterRead 0028                         __size_of_I2C1_Initialize 001C  
                                i2c1_read@status 003A                                       _OPTION_REG 0095  
                            ?_EUSART_Receive_ISR 0077                                 print_dev_map@len 0047  
                                ___lwmod@divisor 0028                                  _TMR0_Initialize 1FCD  
                                       strcpy@cp 002A                                         strcpy@to 0026  
                                ___lwmod@counter 002D                         _I2C1_MasterWriteTRBBuild 137B  
                    PROTOCOL_Loop@device_address 006A                                 ?_exec_remote_cmd 0077  
                                    fetch@status 0059                             PROTOCOL_EXT@char_buf 0066  
                             EUSART_Write@txData 0021                     __size_of_EUSART_Transmit_ISR 001C  
                      PROTOCOL_Print_TLV@pbuffer 0046                   __end_of_PIN_MANAGER_Initialize 1338  
                             __size_of_I2C1_Stop 001A                                   ?_print_dev_map 0077  
                           ??_EUSART_Receive_ISR 0077                                 _dev_map_iterator 0938  
