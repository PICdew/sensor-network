

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Sun Sep 24 06:31:34 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F1829
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	stringtext,global,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    17                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text12,local,class=CODE,merge=1,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    45                           	psect	text23,local,class=CODE,merge=1,delta=2,group=1
    46                           	psect	text24,local,class=CODE,merge=1,delta=2,group=1
    47                           	psect	text25,local,class=CODE,merge=1,delta=2,group=1
    48                           	psect	text26,local,class=CODE,merge=1,delta=2,group=1
    49                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    50                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    51                           	psect	text29,local,class=CODE,merge=1,delta=2
    52                           	psect	text30,local,class=CODE,merge=1,delta=2,group=3
    53                           	psect	text31,local,class=CODE,merge=1,delta=2
    54                           	psect	text32,local,class=CODE,merge=1,delta=2,group=3
    55                           	psect	text33,local,class=CODE,merge=1,delta=2
    56                           	psect	text34,local,class=CODE,merge=1,delta=2
    57                           	psect	text35,local,class=CODE,merge=1,delta=2
    58                           	psect	text36,local,class=CODE,merge=1,delta=2
    59                           	psect	text37,local,class=CODE,merge=1,delta=2
    60                           	psect	text38,local,class=CODE,merge=1,delta=2
    61                           	psect	text39,local,class=CODE,merge=1,delta=2
    62                           	psect	text40,local,class=CODE,merge=1,delta=2
    63                           	psect	text41,local,class=CODE,merge=1,delta=2
    64                           	psect	text42,local,class=CODE,merge=1,delta=2
    65                           	psect	text43,local,class=CODE,merge=1,delta=2
    66                           	psect	text44,local,class=CODE,merge=1,delta=2,group=1
    67                           	psect	text45,local,class=CODE,merge=1,delta=2
    68                           	psect	text46,local,class=CODE,merge=1,delta=2
    69                           	psect	text47,local,class=CODE,merge=1,delta=2
    70                           	psect	text48,local,class=CODE,merge=1,delta=2,group=3
    71                           	psect	text49,local,class=CODE,merge=1,delta=2,group=3
    72                           	psect	text50,local,class=CODE,merge=1,delta=2,group=1
    73                           	psect	text51,local,class=CODE,merge=1,delta=2,group=3
    74                           	psect	text52,local,class=CODE,merge=1,delta=2,group=3
    75                           	psect	text53,local,class=CODE,merge=1,delta=2
    76                           	psect	text54,local,class=CODE,merge=1,delta=2,group=3
    77                           	psect	text55,local,class=CODE,merge=1,delta=2,group=3
    78                           	psect	text56,local,class=CODE,merge=1,delta=2,group=3
    79                           	psect	text57,local,class=CODE,merge=1,delta=2,group=3
    80                           	psect	text58,local,class=CODE,merge=1,delta=2
    81                           	psect	text59,local,class=CODE,merge=1,delta=2
    82                           	psect	text60,local,class=CODE,merge=1,delta=2,group=1
    83                           	psect	text61,local,class=CODE,merge=1,delta=2
    84                           	psect	intentry,global,class=CODE,delta=2
    85                           	psect	text63,local,class=CODE,merge=1,delta=2
    86                           	psect	swtext1,local,class=CONST,delta=2
    87                           	psect	text64,local,class=CODE,merge=1,delta=2
    88                           	psect	text65,local,class=CODE,merge=1,delta=2
    89                           	psect	text66,local,class=CODE,merge=1,delta=2
    90                           	psect	text67,local,class=CODE,merge=1,delta=2
    91                           	psect	text68,local,class=CODE,merge=1,delta=2
    92                           	dabs	1,0x620,48
    93                           	dabs	1,0x5A0,80
    94                           	dabs	1,0x530,64
    95                           	dabs	1,0x2330,0,_cmd_buf
    96                           	dabs	1,0x7E,2
    97  0000                     
    98                           ; Version 1.41 (B)
    99                           ; Generated 21/02/2017 GMT
   100                           ; 
   101                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   102                           ; All rights reserved.
   103                           ; 
   104                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   105                           ; 
   106                           ; Redistribution and use in source and binary forms, with or without modification, are
   107                           ; permitted provided that the following conditions are met:
   108                           ; 
   109                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   110                           ;        conditions and the following disclaimer.
   111                           ; 
   112                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   113                           ;        of conditions and the following disclaimer in the documentation and/or other
   114                           ;        materials provided with the distribution.
   115                           ; 
   116                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   117                           ;        software without specific prior written permission.
   118                           ; 
   119                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   120                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   121                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   122                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   123                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   124                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   125                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   126                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   127                           ; 
   128                           ; 
   129                           ; Code-generator required, PIC16F1829 Definitions
   130                           ; 
   131                           ; SFR Addresses
   132  0000                     	;# 
   133  0001                     	;# 
   134  0002                     	;# 
   135  0003                     	;# 
   136  0004                     	;# 
   137  0005                     	;# 
   138  0006                     	;# 
   139  0007                     	;# 
   140  0008                     	;# 
   141  0009                     	;# 
   142  000A                     	;# 
   143  000B                     	;# 
   144  000C                     	;# 
   145  000D                     	;# 
   146  000E                     	;# 
   147  0011                     	;# 
   148  0012                     	;# 
   149  0013                     	;# 
   150  0014                     	;# 
   151  0015                     	;# 
   152  0016                     	;# 
   153  0016                     	;# 
   154  0017                     	;# 
   155  0018                     	;# 
   156  0019                     	;# 
   157  001A                     	;# 
   158  001B                     	;# 
   159  001C                     	;# 
   160  001E                     	;# 
   161  001F                     	;# 
   162  008C                     	;# 
   163  008D                     	;# 
   164  008E                     	;# 
   165  0091                     	;# 
   166  0092                     	;# 
   167  0093                     	;# 
   168  0094                     	;# 
   169  0095                     	;# 
   170  0096                     	;# 
   171  0097                     	;# 
   172  0098                     	;# 
   173  0099                     	;# 
   174  009A                     	;# 
   175  009B                     	;# 
   176  009B                     	;# 
   177  009C                     	;# 
   178  009D                     	;# 
   179  009E                     	;# 
   180  010C                     	;# 
   181  010D                     	;# 
   182  010E                     	;# 
   183  0111                     	;# 
   184  0112                     	;# 
   185  0113                     	;# 
   186  0114                     	;# 
   187  0115                     	;# 
   188  0116                     	;# 
   189  0117                     	;# 
   190  0118                     	;# 
   191  0119                     	;# 
   192  011A                     	;# 
   193  011B                     	;# 
   194  011D                     	;# 
   195  011E                     	;# 
   196  018C                     	;# 
   197  018D                     	;# 
   198  018E                     	;# 
   199  0191                     	;# 
   200  0191                     	;# 
   201  0192                     	;# 
   202  0193                     	;# 
   203  0193                     	;# 
   204  0193                     	;# 
   205  0194                     	;# 
   206  0195                     	;# 
   207  0196                     	;# 
   208  0199                     	;# 
   209  019A                     	;# 
   210  019B                     	;# 
   211  019B                     	;# 
   212  019C                     	;# 
   213  019D                     	;# 
   214  019E                     	;# 
   215  019F                     	;# 
   216  020C                     	;# 
   217  020D                     	;# 
   218  020E                     	;# 
   219  0211                     	;# 
   220  0211                     	;# 
   221  0212                     	;# 
   222  0212                     	;# 
   223  0213                     	;# 
   224  0213                     	;# 
   225  0214                     	;# 
   226  0214                     	;# 
   227  0215                     	;# 
   228  0215                     	;# 
   229  0215                     	;# 
   230  0216                     	;# 
   231  0216                     	;# 
   232  0217                     	;# 
   233  0217                     	;# 
   234  0219                     	;# 
   235  021A                     	;# 
   236  021B                     	;# 
   237  021C                     	;# 
   238  021D                     	;# 
   239  021E                     	;# 
   240  021F                     	;# 
   241  0291                     	;# 
   242  0291                     	;# 
   243  0292                     	;# 
   244  0293                     	;# 
   245  0294                     	;# 
   246  0295                     	;# 
   247  0295                     	;# 
   248  0296                     	;# 
   249  0298                     	;# 
   250  0298                     	;# 
   251  0299                     	;# 
   252  029A                     	;# 
   253  029B                     	;# 
   254  029C                     	;# 
   255  029D                     	;# 
   256  029E                     	;# 
   257  0311                     	;# 
   258  0311                     	;# 
   259  0312                     	;# 
   260  0313                     	;# 
   261  0318                     	;# 
   262  0318                     	;# 
   263  0319                     	;# 
   264  031A                     	;# 
   265  038C                     	;# 
   266  038D                     	;# 
   267  038E                     	;# 
   268  0391                     	;# 
   269  0392                     	;# 
   270  0393                     	;# 
   271  0394                     	;# 
   272  0395                     	;# 
   273  0396                     	;# 
   274  039A                     	;# 
   275  039C                     	;# 
   276  039D                     	;# 
   277  039E                     	;# 
   278  039F                     	;# 
   279  0415                     	;# 
   280  0416                     	;# 
   281  0417                     	;# 
   282  041C                     	;# 
   283  041D                     	;# 
   284  041E                     	;# 
   285  0FE4                     	;# 
   286  0FE5                     	;# 
   287  0FE6                     	;# 
   288  0FE7                     	;# 
   289  0FE8                     	;# 
   290  0FE9                     	;# 
   291  0FEA                     	;# 
   292  0FEB                     	;# 
   293  0FED                     	;# 
   294  0FEE                     	;# 
   295  0FEF                     	;# 
   296  0000                     	;# 
   297  0001                     	;# 
   298  0002                     	;# 
   299  0003                     	;# 
   300  0004                     	;# 
   301  0005                     	;# 
   302  0006                     	;# 
   303  0007                     	;# 
   304  0008                     	;# 
   305  0009                     	;# 
   306  000A                     	;# 
   307  000B                     	;# 
   308  000C                     	;# 
   309  000D                     	;# 
   310  000E                     	;# 
   311  0011                     	;# 
   312  0012                     	;# 
   313  0013                     	;# 
   314  0014                     	;# 
   315  0015                     	;# 
   316  0016                     	;# 
   317  0016                     	;# 
   318  0017                     	;# 
   319  0018                     	;# 
   320  0019                     	;# 
   321  001A                     	;# 
   322  001B                     	;# 
   323  001C                     	;# 
   324  001E                     	;# 
   325  001F                     	;# 
   326  008C                     	;# 
   327  008D                     	;# 
   328  008E                     	;# 
   329  0091                     	;# 
   330  0092                     	;# 
   331  0093                     	;# 
   332  0094                     	;# 
   333  0095                     	;# 
   334  0096                     	;# 
   335  0097                     	;# 
   336  0098                     	;# 
   337  0099                     	;# 
   338  009A                     	;# 
   339  009B                     	;# 
   340  009B                     	;# 
   341  009C                     	;# 
   342  009D                     	;# 
   343  009E                     	;# 
   344  010C                     	;# 
   345  010D                     	;# 
   346  010E                     	;# 
   347  0111                     	;# 
   348  0112                     	;# 
   349  0113                     	;# 
   350  0114                     	;# 
   351  0115                     	;# 
   352  0116                     	;# 
   353  0117                     	;# 
   354  0118                     	;# 
   355  0119                     	;# 
   356  011A                     	;# 
   357  011B                     	;# 
   358  011D                     	;# 
   359  011E                     	;# 
   360  018C                     	;# 
   361  018D                     	;# 
   362  018E                     	;# 
   363  0191                     	;# 
   364  0191                     	;# 
   365  0192                     	;# 
   366  0193                     	;# 
   367  0193                     	;# 
   368  0193                     	;# 
   369  0194                     	;# 
   370  0195                     	;# 
   371  0196                     	;# 
   372  0199                     	;# 
   373  019A                     	;# 
   374  019B                     	;# 
   375  019B                     	;# 
   376  019C                     	;# 
   377  019D                     	;# 
   378  019E                     	;# 
   379  019F                     	;# 
   380  020C                     	;# 
   381  020D                     	;# 
   382  020E                     	;# 
   383  0211                     	;# 
   384  0211                     	;# 
   385  0212                     	;# 
   386  0212                     	;# 
   387  0213                     	;# 
   388  0213                     	;# 
   389  0214                     	;# 
   390  0214                     	;# 
   391  0215                     	;# 
   392  0215                     	;# 
   393  0215                     	;# 
   394  0216                     	;# 
   395  0216                     	;# 
   396  0217                     	;# 
   397  0217                     	;# 
   398  0219                     	;# 
   399  021A                     	;# 
   400  021B                     	;# 
   401  021C                     	;# 
   402  021D                     	;# 
   403  021E                     	;# 
   404  021F                     	;# 
   405  0291                     	;# 
   406  0291                     	;# 
   407  0292                     	;# 
   408  0293                     	;# 
   409  0294                     	;# 
   410  0295                     	;# 
   411  0295                     	;# 
   412  0296                     	;# 
   413  0298                     	;# 
   414  0298                     	;# 
   415  0299                     	;# 
   416  029A                     	;# 
   417  029B                     	;# 
   418  029C                     	;# 
   419  029D                     	;# 
   420  029E                     	;# 
   421  0311                     	;# 
   422  0311                     	;# 
   423  0312                     	;# 
   424  0313                     	;# 
   425  0318                     	;# 
   426  0318                     	;# 
   427  0319                     	;# 
   428  031A                     	;# 
   429  038C                     	;# 
   430  038D                     	;# 
   431  038E                     	;# 
   432  0391                     	;# 
   433  0392                     	;# 
   434  0393                     	;# 
   435  0394                     	;# 
   436  0395                     	;# 
   437  0396                     	;# 
   438  039A                     	;# 
   439  039C                     	;# 
   440  039D                     	;# 
   441  039E                     	;# 
   442  039F                     	;# 
   443  0415                     	;# 
   444  0416                     	;# 
   445  0417                     	;# 
   446  041C                     	;# 
   447  041D                     	;# 
   448  041E                     	;# 
   449  0FE4                     	;# 
   450  0FE5                     	;# 
   451  0FE6                     	;# 
   452  0FE7                     	;# 
   453  0FE8                     	;# 
   454  0FE9                     	;# 
   455  0FEA                     	;# 
   456  0FEB                     	;# 
   457  0FED                     	;# 
   458  0FEE                     	;# 
   459  0FEF                     	;# 
   460  0000                     	;# 
   461  0001                     	;# 
   462  0002                     	;# 
   463  0003                     	;# 
   464  0004                     	;# 
   465  0005                     	;# 
   466  0006                     	;# 
   467  0007                     	;# 
   468  0008                     	;# 
   469  0009                     	;# 
   470  000A                     	;# 
   471  000B                     	;# 
   472  000C                     	;# 
   473  000D                     	;# 
   474  000E                     	;# 
   475  0011                     	;# 
   476  0012                     	;# 
   477  0013                     	;# 
   478  0014                     	;# 
   479  0015                     	;# 
   480  0016                     	;# 
   481  0016                     	;# 
   482  0017                     	;# 
   483  0018                     	;# 
   484  0019                     	;# 
   485  001A                     	;# 
   486  001B                     	;# 
   487  001C                     	;# 
   488  001E                     	;# 
   489  001F                     	;# 
   490  008C                     	;# 
   491  008D                     	;# 
   492  008E                     	;# 
   493  0091                     	;# 
   494  0092                     	;# 
   495  0093                     	;# 
   496  0094                     	;# 
   497  0095                     	;# 
   498  0096                     	;# 
   499  0097                     	;# 
   500  0098                     	;# 
   501  0099                     	;# 
   502  009A                     	;# 
   503  009B                     	;# 
   504  009B                     	;# 
   505  009C                     	;# 
   506  009D                     	;# 
   507  009E                     	;# 
   508  010C                     	;# 
   509  010D                     	;# 
   510  010E                     	;# 
   511  0111                     	;# 
   512  0112                     	;# 
   513  0113                     	;# 
   514  0114                     	;# 
   515  0115                     	;# 
   516  0116                     	;# 
   517  0117                     	;# 
   518  0118                     	;# 
   519  0119                     	;# 
   520  011A                     	;# 
   521  011B                     	;# 
   522  011D                     	;# 
   523  011E                     	;# 
   524  018C                     	;# 
   525  018D                     	;# 
   526  018E                     	;# 
   527  0191                     	;# 
   528  0191                     	;# 
   529  0192                     	;# 
   530  0193                     	;# 
   531  0193                     	;# 
   532  0193                     	;# 
   533  0194                     	;# 
   534  0195                     	;# 
   535  0196                     	;# 
   536  0199                     	;# 
   537  019A                     	;# 
   538  019B                     	;# 
   539  019B                     	;# 
   540  019C                     	;# 
   541  019D                     	;# 
   542  019E                     	;# 
   543  019F                     	;# 
   544  020C                     	;# 
   545  020D                     	;# 
   546  020E                     	;# 
   547  0211                     	;# 
   548  0211                     	;# 
   549  0212                     	;# 
   550  0212                     	;# 
   551  0213                     	;# 
   552  0213                     	;# 
   553  0214                     	;# 
   554  0214                     	;# 
   555  0215                     	;# 
   556  0215                     	;# 
   557  0215                     	;# 
   558  0216                     	;# 
   559  0216                     	;# 
   560  0217                     	;# 
   561  0217                     	;# 
   562  0219                     	;# 
   563  021A                     	;# 
   564  021B                     	;# 
   565  021C                     	;# 
   566  021D                     	;# 
   567  021E                     	;# 
   568  021F                     	;# 
   569  0291                     	;# 
   570  0291                     	;# 
   571  0292                     	;# 
   572  0293                     	;# 
   573  0294                     	;# 
   574  0295                     	;# 
   575  0295                     	;# 
   576  0296                     	;# 
   577  0298                     	;# 
   578  0298                     	;# 
   579  0299                     	;# 
   580  029A                     	;# 
   581  029B                     	;# 
   582  029C                     	;# 
   583  029D                     	;# 
   584  029E                     	;# 
   585  0311                     	;# 
   586  0311                     	;# 
   587  0312                     	;# 
   588  0313                     	;# 
   589  0318                     	;# 
   590  0318                     	;# 
   591  0319                     	;# 
   592  031A                     	;# 
   593  038C                     	;# 
   594  038D                     	;# 
   595  038E                     	;# 
   596  0391                     	;# 
   597  0392                     	;# 
   598  0393                     	;# 
   599  0394                     	;# 
   600  0395                     	;# 
   601  0396                     	;# 
   602  039A                     	;# 
   603  039C                     	;# 
   604  039D                     	;# 
   605  039E                     	;# 
   606  039F                     	;# 
   607  0415                     	;# 
   608  0416                     	;# 
   609  0417                     	;# 
   610  041C                     	;# 
   611  041D                     	;# 
   612  041E                     	;# 
   613  0FE4                     	;# 
   614  0FE5                     	;# 
   615  0FE6                     	;# 
   616  0FE7                     	;# 
   617  0FE8                     	;# 
   618  0FE9                     	;# 
   619  0FEA                     	;# 
   620  0FEB                     	;# 
   621  0FED                     	;# 
   622  0FEE                     	;# 
   623  0FEF                     	;# 
   624  0000                     	;# 
   625  0001                     	;# 
   626  0002                     	;# 
   627  0003                     	;# 
   628  0004                     	;# 
   629  0005                     	;# 
   630  0006                     	;# 
   631  0007                     	;# 
   632  0008                     	;# 
   633  0009                     	;# 
   634  000A                     	;# 
   635  000B                     	;# 
   636  000C                     	;# 
   637  000D                     	;# 
   638  000E                     	;# 
   639  0011                     	;# 
   640  0012                     	;# 
   641  0013                     	;# 
   642  0014                     	;# 
   643  0015                     	;# 
   644  0016                     	;# 
   645  0016                     	;# 
   646  0017                     	;# 
   647  0018                     	;# 
   648  0019                     	;# 
   649  001A                     	;# 
   650  001B                     	;# 
   651  001C                     	;# 
   652  001E                     	;# 
   653  001F                     	;# 
   654  008C                     	;# 
   655  008D                     	;# 
   656  008E                     	;# 
   657  0091                     	;# 
   658  0092                     	;# 
   659  0093                     	;# 
   660  0094                     	;# 
   661  0095                     	;# 
   662  0096                     	;# 
   663  0097                     	;# 
   664  0098                     	;# 
   665  0099                     	;# 
   666  009A                     	;# 
   667  009B                     	;# 
   668  009B                     	;# 
   669  009C                     	;# 
   670  009D                     	;# 
   671  009E                     	;# 
   672  010C                     	;# 
   673  010D                     	;# 
   674  010E                     	;# 
   675  0111                     	;# 
   676  0112                     	;# 
   677  0113                     	;# 
   678  0114                     	;# 
   679  0115                     	;# 
   680  0116                     	;# 
   681  0117                     	;# 
   682  0118                     	;# 
   683  0119                     	;# 
   684  011A                     	;# 
   685  011B                     	;# 
   686  011D                     	;# 
   687  011E                     	;# 
   688  018C                     	;# 
   689  018D                     	;# 
   690  018E                     	;# 
   691  0191                     	;# 
   692  0191                     	;# 
   693  0192                     	;# 
   694  0193                     	;# 
   695  0193                     	;# 
   696  0193                     	;# 
   697  0194                     	;# 
   698  0195                     	;# 
   699  0196                     	;# 
   700  0199                     	;# 
   701  019A                     	;# 
   702  019B                     	;# 
   703  019B                     	;# 
   704  019C                     	;# 
   705  019D                     	;# 
   706  019E                     	;# 
   707  019F                     	;# 
   708  020C                     	;# 
   709  020D                     	;# 
   710  020E                     	;# 
   711  0211                     	;# 
   712  0211                     	;# 
   713  0212                     	;# 
   714  0212                     	;# 
   715  0213                     	;# 
   716  0213                     	;# 
   717  0214                     	;# 
   718  0214                     	;# 
   719  0215                     	;# 
   720  0215                     	;# 
   721  0215                     	;# 
   722  0216                     	;# 
   723  0216                     	;# 
   724  0217                     	;# 
   725  0217                     	;# 
   726  0219                     	;# 
   727  021A                     	;# 
   728  021B                     	;# 
   729  021C                     	;# 
   730  021D                     	;# 
   731  021E                     	;# 
   732  021F                     	;# 
   733  0291                     	;# 
   734  0291                     	;# 
   735  0292                     	;# 
   736  0293                     	;# 
   737  0294                     	;# 
   738  0295                     	;# 
   739  0295                     	;# 
   740  0296                     	;# 
   741  0298                     	;# 
   742  0298                     	;# 
   743  0299                     	;# 
   744  029A                     	;# 
   745  029B                     	;# 
   746  029C                     	;# 
   747  029D                     	;# 
   748  029E                     	;# 
   749  0311                     	;# 
   750  0311                     	;# 
   751  0312                     	;# 
   752  0313                     	;# 
   753  0318                     	;# 
   754  0318                     	;# 
   755  0319                     	;# 
   756  031A                     	;# 
   757  038C                     	;# 
   758  038D                     	;# 
   759  038E                     	;# 
   760  0391                     	;# 
   761  0392                     	;# 
   762  0393                     	;# 
   763  0394                     	;# 
   764  0395                     	;# 
   765  0396                     	;# 
   766  039A                     	;# 
   767  039C                     	;# 
   768  039D                     	;# 
   769  039E                     	;# 
   770  039F                     	;# 
   771  0415                     	;# 
   772  0416                     	;# 
   773  0417                     	;# 
   774  041C                     	;# 
   775  041D                     	;# 
   776  041E                     	;# 
   777  0FE4                     	;# 
   778  0FE5                     	;# 
   779  0FE6                     	;# 
   780  0FE7                     	;# 
   781  0FE8                     	;# 
   782  0FE9                     	;# 
   783  0FEA                     	;# 
   784  0FEB                     	;# 
   785  0FED                     	;# 
   786  0FEE                     	;# 
   787  0FEF                     	;# 
   788  0000                     	;# 
   789  0001                     	;# 
   790  0002                     	;# 
   791  0003                     	;# 
   792  0004                     	;# 
   793  0005                     	;# 
   794  0006                     	;# 
   795  0007                     	;# 
   796  0008                     	;# 
   797  0009                     	;# 
   798  000A                     	;# 
   799  000B                     	;# 
   800  000C                     	;# 
   801  000D                     	;# 
   802  000E                     	;# 
   803  0011                     	;# 
   804  0012                     	;# 
   805  0013                     	;# 
   806  0014                     	;# 
   807  0015                     	;# 
   808  0016                     	;# 
   809  0016                     	;# 
   810  0017                     	;# 
   811  0018                     	;# 
   812  0019                     	;# 
   813  001A                     	;# 
   814  001B                     	;# 
   815  001C                     	;# 
   816  001E                     	;# 
   817  001F                     	;# 
   818  008C                     	;# 
   819  008D                     	;# 
   820  008E                     	;# 
   821  0091                     	;# 
   822  0092                     	;# 
   823  0093                     	;# 
   824  0094                     	;# 
   825  0095                     	;# 
   826  0096                     	;# 
   827  0097                     	;# 
   828  0098                     	;# 
   829  0099                     	;# 
   830  009A                     	;# 
   831  009B                     	;# 
   832  009B                     	;# 
   833  009C                     	;# 
   834  009D                     	;# 
   835  009E                     	;# 
   836  010C                     	;# 
   837  010D                     	;# 
   838  010E                     	;# 
   839  0111                     	;# 
   840  0112                     	;# 
   841  0113                     	;# 
   842  0114                     	;# 
   843  0115                     	;# 
   844  0116                     	;# 
   845  0117                     	;# 
   846  0118                     	;# 
   847  0119                     	;# 
   848  011A                     	;# 
   849  011B                     	;# 
   850  011D                     	;# 
   851  011E                     	;# 
   852  018C                     	;# 
   853  018D                     	;# 
   854  018E                     	;# 
   855  0191                     	;# 
   856  0191                     	;# 
   857  0192                     	;# 
   858  0193                     	;# 
   859  0193                     	;# 
   860  0193                     	;# 
   861  0194                     	;# 
   862  0195                     	;# 
   863  0196                     	;# 
   864  0199                     	;# 
   865  019A                     	;# 
   866  019B                     	;# 
   867  019B                     	;# 
   868  019C                     	;# 
   869  019D                     	;# 
   870  019E                     	;# 
   871  019F                     	;# 
   872  020C                     	;# 
   873  020D                     	;# 
   874  020E                     	;# 
   875  0211                     	;# 
   876  0211                     	;# 
   877  0212                     	;# 
   878  0212                     	;# 
   879  0213                     	;# 
   880  0213                     	;# 
   881  0214                     	;# 
   882  0214                     	;# 
   883  0215                     	;# 
   884  0215                     	;# 
   885  0215                     	;# 
   886  0216                     	;# 
   887  0216                     	;# 
   888  0217                     	;# 
   889  0217                     	;# 
   890  0219                     	;# 
   891  021A                     	;# 
   892  021B                     	;# 
   893  021C                     	;# 
   894  021D                     	;# 
   895  021E                     	;# 
   896  021F                     	;# 
   897  0291                     	;# 
   898  0291                     	;# 
   899  0292                     	;# 
   900  0293                     	;# 
   901  0294                     	;# 
   902  0295                     	;# 
   903  0295                     	;# 
   904  0296                     	;# 
   905  0298                     	;# 
   906  0298                     	;# 
   907  0299                     	;# 
   908  029A                     	;# 
   909  029B                     	;# 
   910  029C                     	;# 
   911  029D                     	;# 
   912  029E                     	;# 
   913  0311                     	;# 
   914  0311                     	;# 
   915  0312                     	;# 
   916  0313                     	;# 
   917  0318                     	;# 
   918  0318                     	;# 
   919  0319                     	;# 
   920  031A                     	;# 
   921  038C                     	;# 
   922  038D                     	;# 
   923  038E                     	;# 
   924  0391                     	;# 
   925  0392                     	;# 
   926  0393                     	;# 
   927  0394                     	;# 
   928  0395                     	;# 
   929  0396                     	;# 
   930  039A                     	;# 
   931  039C                     	;# 
   932  039D                     	;# 
   933  039E                     	;# 
   934  039F                     	;# 
   935  0415                     	;# 
   936  0416                     	;# 
   937  0417                     	;# 
   938  041C                     	;# 
   939  041D                     	;# 
   940  041E                     	;# 
   941  0FE4                     	;# 
   942  0FE5                     	;# 
   943  0FE6                     	;# 
   944  0FE7                     	;# 
   945  0FE8                     	;# 
   946  0FE9                     	;# 
   947  0FEA                     	;# 
   948  0FEB                     	;# 
   949  0FED                     	;# 
   950  0FEE                     	;# 
   951  0FEF                     	;# 
   952  0000                     	;# 
   953  0001                     	;# 
   954  0002                     	;# 
   955  0003                     	;# 
   956  0004                     	;# 
   957  0005                     	;# 
   958  0006                     	;# 
   959  0007                     	;# 
   960  0008                     	;# 
   961  0009                     	;# 
   962  000A                     	;# 
   963  000B                     	;# 
   964  000C                     	;# 
   965  000D                     	;# 
   966  000E                     	;# 
   967  0011                     	;# 
   968  0012                     	;# 
   969  0013                     	;# 
   970  0014                     	;# 
   971  0015                     	;# 
   972  0016                     	;# 
   973  0016                     	;# 
   974  0017                     	;# 
   975  0018                     	;# 
   976  0019                     	;# 
   977  001A                     	;# 
   978  001B                     	;# 
   979  001C                     	;# 
   980  001E                     	;# 
   981  001F                     	;# 
   982  008C                     	;# 
   983  008D                     	;# 
   984  008E                     	;# 
   985  0091                     	;# 
   986  0092                     	;# 
   987  0093                     	;# 
   988  0094                     	;# 
   989  0095                     	;# 
   990  0096                     	;# 
   991  0097                     	;# 
   992  0098                     	;# 
   993  0099                     	;# 
   994  009A                     	;# 
   995  009B                     	;# 
   996  009B                     	;# 
   997  009C                     	;# 
   998  009D                     	;# 
   999  009E                     	;# 
  1000  010C                     	;# 
  1001  010D                     	;# 
  1002  010E                     	;# 
  1003  0111                     	;# 
  1004  0112                     	;# 
  1005  0113                     	;# 
  1006  0114                     	;# 
  1007  0115                     	;# 
  1008  0116                     	;# 
  1009  0117                     	;# 
  1010  0118                     	;# 
  1011  0119                     	;# 
  1012  011A                     	;# 
  1013  011B                     	;# 
  1014  011D                     	;# 
  1015  011E                     	;# 
  1016  018C                     	;# 
  1017  018D                     	;# 
  1018  018E                     	;# 
  1019  0191                     	;# 
  1020  0191                     	;# 
  1021  0192                     	;# 
  1022  0193                     	;# 
  1023  0193                     	;# 
  1024  0193                     	;# 
  1025  0194                     	;# 
  1026  0195                     	;# 
  1027  0196                     	;# 
  1028  0199                     	;# 
  1029  019A                     	;# 
  1030  019B                     	;# 
  1031  019B                     	;# 
  1032  019C                     	;# 
  1033  019D                     	;# 
  1034  019E                     	;# 
  1035  019F                     	;# 
  1036  020C                     	;# 
  1037  020D                     	;# 
  1038  020E                     	;# 
  1039  0211                     	;# 
  1040  0211                     	;# 
  1041  0212                     	;# 
  1042  0212                     	;# 
  1043  0213                     	;# 
  1044  0213                     	;# 
  1045  0214                     	;# 
  1046  0214                     	;# 
  1047  0215                     	;# 
  1048  0215                     	;# 
  1049  0215                     	;# 
  1050  0216                     	;# 
  1051  0216                     	;# 
  1052  0217                     	;# 
  1053  0217                     	;# 
  1054  0219                     	;# 
  1055  021A                     	;# 
  1056  021B                     	;# 
  1057  021C                     	;# 
  1058  021D                     	;# 
  1059  021E                     	;# 
  1060  021F                     	;# 
  1061  0291                     	;# 
  1062  0291                     	;# 
  1063  0292                     	;# 
  1064  0293                     	;# 
  1065  0294                     	;# 
  1066  0295                     	;# 
  1067  0295                     	;# 
  1068  0296                     	;# 
  1069  0298                     	;# 
  1070  0298                     	;# 
  1071  0299                     	;# 
  1072  029A                     	;# 
  1073  029B                     	;# 
  1074  029C                     	;# 
  1075  029D                     	;# 
  1076  029E                     	;# 
  1077  0311                     	;# 
  1078  0311                     	;# 
  1079  0312                     	;# 
  1080  0313                     	;# 
  1081  0318                     	;# 
  1082  0318                     	;# 
  1083  0319                     	;# 
  1084  031A                     	;# 
  1085  038C                     	;# 
  1086  038D                     	;# 
  1087  038E                     	;# 
  1088  0391                     	;# 
  1089  0392                     	;# 
  1090  0393                     	;# 
  1091  0394                     	;# 
  1092  0395                     	;# 
  1093  0396                     	;# 
  1094  039A                     	;# 
  1095  039C                     	;# 
  1096  039D                     	;# 
  1097  039E                     	;# 
  1098  039F                     	;# 
  1099  0415                     	;# 
  1100  0416                     	;# 
  1101  0417                     	;# 
  1102  041C                     	;# 
  1103  041D                     	;# 
  1104  041E                     	;# 
  1105  0FE4                     	;# 
  1106  0FE5                     	;# 
  1107  0FE6                     	;# 
  1108  0FE7                     	;# 
  1109  0FE8                     	;# 
  1110  0FE9                     	;# 
  1111  0FEA                     	;# 
  1112  0FEB                     	;# 
  1113  0FED                     	;# 
  1114  0FEE                     	;# 
  1115  0FEF                     	;# 
  1116  0000                     	;# 
  1117  0001                     	;# 
  1118  0002                     	;# 
  1119  0003                     	;# 
  1120  0004                     	;# 
  1121  0005                     	;# 
  1122  0006                     	;# 
  1123  0007                     	;# 
  1124  0008                     	;# 
  1125  0009                     	;# 
  1126  000A                     	;# 
  1127  000B                     	;# 
  1128  000C                     	;# 
  1129  000D                     	;# 
  1130  000E                     	;# 
  1131  0011                     	;# 
  1132  0012                     	;# 
  1133  0013                     	;# 
  1134  0014                     	;# 
  1135  0015                     	;# 
  1136  0016                     	;# 
  1137  0016                     	;# 
  1138  0017                     	;# 
  1139  0018                     	;# 
  1140  0019                     	;# 
  1141  001A                     	;# 
  1142  001B                     	;# 
  1143  001C                     	;# 
  1144  001E                     	;# 
  1145  001F                     	;# 
  1146  008C                     	;# 
  1147  008D                     	;# 
  1148  008E                     	;# 
  1149  0091                     	;# 
  1150  0092                     	;# 
  1151  0093                     	;# 
  1152  0094                     	;# 
  1153  0095                     	;# 
  1154  0096                     	;# 
  1155  0097                     	;# 
  1156  0098                     	;# 
  1157  0099                     	;# 
  1158  009A                     	;# 
  1159  009B                     	;# 
  1160  009B                     	;# 
  1161  009C                     	;# 
  1162  009D                     	;# 
  1163  009E                     	;# 
  1164  010C                     	;# 
  1165  010D                     	;# 
  1166  010E                     	;# 
  1167  0111                     	;# 
  1168  0112                     	;# 
  1169  0113                     	;# 
  1170  0114                     	;# 
  1171  0115                     	;# 
  1172  0116                     	;# 
  1173  0117                     	;# 
  1174  0118                     	;# 
  1175  0119                     	;# 
  1176  011A                     	;# 
  1177  011B                     	;# 
  1178  011D                     	;# 
  1179  011E                     	;# 
  1180  018C                     	;# 
  1181  018D                     	;# 
  1182  018E                     	;# 
  1183  0191                     	;# 
  1184  0191                     	;# 
  1185  0192                     	;# 
  1186  0193                     	;# 
  1187  0193                     	;# 
  1188  0193                     	;# 
  1189  0194                     	;# 
  1190  0195                     	;# 
  1191  0196                     	;# 
  1192  0199                     	;# 
  1193  019A                     	;# 
  1194  019B                     	;# 
  1195  019B                     	;# 
  1196  019C                     	;# 
  1197  019D                     	;# 
  1198  019E                     	;# 
  1199  019F                     	;# 
  1200  020C                     	;# 
  1201  020D                     	;# 
  1202  020E                     	;# 
  1203  0211                     	;# 
  1204  0211                     	;# 
  1205  0212                     	;# 
  1206  0212                     	;# 
  1207  0213                     	;# 
  1208  0213                     	;# 
  1209  0214                     	;# 
  1210  0214                     	;# 
  1211  0215                     	;# 
  1212  0215                     	;# 
  1213  0215                     	;# 
  1214  0216                     	;# 
  1215  0216                     	;# 
  1216  0217                     	;# 
  1217  0217                     	;# 
  1218  0219                     	;# 
  1219  021A                     	;# 
  1220  021B                     	;# 
  1221  021C                     	;# 
  1222  021D                     	;# 
  1223  021E                     	;# 
  1224  021F                     	;# 
  1225  0291                     	;# 
  1226  0291                     	;# 
  1227  0292                     	;# 
  1228  0293                     	;# 
  1229  0294                     	;# 
  1230  0295                     	;# 
  1231  0295                     	;# 
  1232  0296                     	;# 
  1233  0298                     	;# 
  1234  0298                     	;# 
  1235  0299                     	;# 
  1236  029A                     	;# 
  1237  029B                     	;# 
  1238  029C                     	;# 
  1239  029D                     	;# 
  1240  029E                     	;# 
  1241  0311                     	;# 
  1242  0311                     	;# 
  1243  0312                     	;# 
  1244  0313                     	;# 
  1245  0318                     	;# 
  1246  0318                     	;# 
  1247  0319                     	;# 
  1248  031A                     	;# 
  1249  038C                     	;# 
  1250  038D                     	;# 
  1251  038E                     	;# 
  1252  0391                     	;# 
  1253  0392                     	;# 
  1254  0393                     	;# 
  1255  0394                     	;# 
  1256  0395                     	;# 
  1257  0396                     	;# 
  1258  039A                     	;# 
  1259  039C                     	;# 
  1260  039D                     	;# 
  1261  039E                     	;# 
  1262  039F                     	;# 
  1263  0415                     	;# 
  1264  0416                     	;# 
  1265  0417                     	;# 
  1266  041C                     	;# 
  1267  041D                     	;# 
  1268  041E                     	;# 
  1269  0FE4                     	;# 
  1270  0FE5                     	;# 
  1271  0FE6                     	;# 
  1272  0FE7                     	;# 
  1273  0FE8                     	;# 
  1274  0FE9                     	;# 
  1275  0FEA                     	;# 
  1276  0FEB                     	;# 
  1277  0FED                     	;# 
  1278  0FEE                     	;# 
  1279  0FEF                     	;# 
  1280  0000                     	;# 
  1281  0001                     	;# 
  1282  0002                     	;# 
  1283  0003                     	;# 
  1284  0004                     	;# 
  1285  0005                     	;# 
  1286  0006                     	;# 
  1287  0007                     	;# 
  1288  0008                     	;# 
  1289  0009                     	;# 
  1290  000A                     	;# 
  1291  000B                     	;# 
  1292  000C                     	;# 
  1293  000D                     	;# 
  1294  000E                     	;# 
  1295  0011                     	;# 
  1296  0012                     	;# 
  1297  0013                     	;# 
  1298  0014                     	;# 
  1299  0015                     	;# 
  1300  0016                     	;# 
  1301  0016                     	;# 
  1302  0017                     	;# 
  1303  0018                     	;# 
  1304  0019                     	;# 
  1305  001A                     	;# 
  1306  001B                     	;# 
  1307  001C                     	;# 
  1308  001E                     	;# 
  1309  001F                     	;# 
  1310  008C                     	;# 
  1311  008D                     	;# 
  1312  008E                     	;# 
  1313  0091                     	;# 
  1314  0092                     	;# 
  1315  0093                     	;# 
  1316  0094                     	;# 
  1317  0095                     	;# 
  1318  0096                     	;# 
  1319  0097                     	;# 
  1320  0098                     	;# 
  1321  0099                     	;# 
  1322  009A                     	;# 
  1323  009B                     	;# 
  1324  009B                     	;# 
  1325  009C                     	;# 
  1326  009D                     	;# 
  1327  009E                     	;# 
  1328  010C                     	;# 
  1329  010D                     	;# 
  1330  010E                     	;# 
  1331  0111                     	;# 
  1332  0112                     	;# 
  1333  0113                     	;# 
  1334  0114                     	;# 
  1335  0115                     	;# 
  1336  0116                     	;# 
  1337  0117                     	;# 
  1338  0118                     	;# 
  1339  0119                     	;# 
  1340  011A                     	;# 
  1341  011B                     	;# 
  1342  011D                     	;# 
  1343  011E                     	;# 
  1344  018C                     	;# 
  1345  018D                     	;# 
  1346  018E                     	;# 
  1347  0191                     	;# 
  1348  0191                     	;# 
  1349  0192                     	;# 
  1350  0193                     	;# 
  1351  0193                     	;# 
  1352  0193                     	;# 
  1353  0194                     	;# 
  1354  0195                     	;# 
  1355  0196                     	;# 
  1356  0199                     	;# 
  1357  019A                     	;# 
  1358  019B                     	;# 
  1359  019B                     	;# 
  1360  019C                     	;# 
  1361  019D                     	;# 
  1362  019E                     	;# 
  1363  019F                     	;# 
  1364  020C                     	;# 
  1365  020D                     	;# 
  1366  020E                     	;# 
  1367  0211                     	;# 
  1368  0211                     	;# 
  1369  0212                     	;# 
  1370  0212                     	;# 
  1371  0213                     	;# 
  1372  0213                     	;# 
  1373  0214                     	;# 
  1374  0214                     	;# 
  1375  0215                     	;# 
  1376  0215                     	;# 
  1377  0215                     	;# 
  1378  0216                     	;# 
  1379  0216                     	;# 
  1380  0217                     	;# 
  1381  0217                     	;# 
  1382  0219                     	;# 
  1383  021A                     	;# 
  1384  021B                     	;# 
  1385  021C                     	;# 
  1386  021D                     	;# 
  1387  021E                     	;# 
  1388  021F                     	;# 
  1389  0291                     	;# 
  1390  0291                     	;# 
  1391  0292                     	;# 
  1392  0293                     	;# 
  1393  0294                     	;# 
  1394  0295                     	;# 
  1395  0295                     	;# 
  1396  0296                     	;# 
  1397  0298                     	;# 
  1398  0298                     	;# 
  1399  0299                     	;# 
  1400  029A                     	;# 
  1401  029B                     	;# 
  1402  029C                     	;# 
  1403  029D                     	;# 
  1404  029E                     	;# 
  1405  0311                     	;# 
  1406  0311                     	;# 
  1407  0312                     	;# 
  1408  0313                     	;# 
  1409  0318                     	;# 
  1410  0318                     	;# 
  1411  0319                     	;# 
  1412  031A                     	;# 
  1413  038C                     	;# 
  1414  038D                     	;# 
  1415  038E                     	;# 
  1416  0391                     	;# 
  1417  0392                     	;# 
  1418  0393                     	;# 
  1419  0394                     	;# 
  1420  0395                     	;# 
  1421  0396                     	;# 
  1422  039A                     	;# 
  1423  039C                     	;# 
  1424  039D                     	;# 
  1425  039E                     	;# 
  1426  039F                     	;# 
  1427  0415                     	;# 
  1428  0416                     	;# 
  1429  0417                     	;# 
  1430  041C                     	;# 
  1431  041D                     	;# 
  1432  041E                     	;# 
  1433  0FE4                     	;# 
  1434  0FE5                     	;# 
  1435  0FE6                     	;# 
  1436  0FE7                     	;# 
  1437  0FE8                     	;# 
  1438  0FE9                     	;# 
  1439  0FEA                     	;# 
  1440  0FEB                     	;# 
  1441  0FED                     	;# 
  1442  0FEE                     	;# 
  1443  0FEF                     	;# 
  1444  0000                     	;# 
  1445  0001                     	;# 
  1446  0002                     	;# 
  1447  0003                     	;# 
  1448  0004                     	;# 
  1449  0005                     	;# 
  1450  0006                     	;# 
  1451  0007                     	;# 
  1452  0008                     	;# 
  1453  0009                     	;# 
  1454  000A                     	;# 
  1455  000B                     	;# 
  1456  000C                     	;# 
  1457  000D                     	;# 
  1458  000E                     	;# 
  1459  0011                     	;# 
  1460  0012                     	;# 
  1461  0013                     	;# 
  1462  0014                     	;# 
  1463  0015                     	;# 
  1464  0016                     	;# 
  1465  0016                     	;# 
  1466  0017                     	;# 
  1467  0018                     	;# 
  1468  0019                     	;# 
  1469  001A                     	;# 
  1470  001B                     	;# 
  1471  001C                     	;# 
  1472  001E                     	;# 
  1473  001F                     	;# 
  1474  008C                     	;# 
  1475  008D                     	;# 
  1476  008E                     	;# 
  1477  0091                     	;# 
  1478  0092                     	;# 
  1479  0093                     	;# 
  1480  0094                     	;# 
  1481  0095                     	;# 
  1482  0096                     	;# 
  1483  0097                     	;# 
  1484  0098                     	;# 
  1485  0099                     	;# 
  1486  009A                     	;# 
  1487  009B                     	;# 
  1488  009B                     	;# 
  1489  009C                     	;# 
  1490  009D                     	;# 
  1491  009E                     	;# 
  1492  010C                     	;# 
  1493  010D                     	;# 
  1494  010E                     	;# 
  1495  0111                     	;# 
  1496  0112                     	;# 
  1497  0113                     	;# 
  1498  0114                     	;# 
  1499  0115                     	;# 
  1500  0116                     	;# 
  1501  0117                     	;# 
  1502  0118                     	;# 
  1503  0119                     	;# 
  1504  011A                     	;# 
  1505  011B                     	;# 
  1506  011D                     	;# 
  1507  011E                     	;# 
  1508  018C                     	;# 
  1509  018D                     	;# 
  1510  018E                     	;# 
  1511  0191                     	;# 
  1512  0191                     	;# 
  1513  0192                     	;# 
  1514  0193                     	;# 
  1515  0193                     	;# 
  1516  0193                     	;# 
  1517  0194                     	;# 
  1518  0195                     	;# 
  1519  0196                     	;# 
  1520  0199                     	;# 
  1521  019A                     	;# 
  1522  019B                     	;# 
  1523  019B                     	;# 
  1524  019C                     	;# 
  1525  019D                     	;# 
  1526  019E                     	;# 
  1527  019F                     	;# 
  1528  020C                     	;# 
  1529  020D                     	;# 
  1530  020E                     	;# 
  1531  0211                     	;# 
  1532  0211                     	;# 
  1533  0212                     	;# 
  1534  0212                     	;# 
  1535  0213                     	;# 
  1536  0213                     	;# 
  1537  0214                     	;# 
  1538  0214                     	;# 
  1539  0215                     	;# 
  1540  0215                     	;# 
  1541  0215                     	;# 
  1542  0216                     	;# 
  1543  0216                     	;# 
  1544  0217                     	;# 
  1545  0217                     	;# 
  1546  0219                     	;# 
  1547  021A                     	;# 
  1548  021B                     	;# 
  1549  021C                     	;# 
  1550  021D                     	;# 
  1551  021E                     	;# 
  1552  021F                     	;# 
  1553  0291                     	;# 
  1554  0291                     	;# 
  1555  0292                     	;# 
  1556  0293                     	;# 
  1557  0294                     	;# 
  1558  0295                     	;# 
  1559  0295                     	;# 
  1560  0296                     	;# 
  1561  0298                     	;# 
  1562  0298                     	;# 
  1563  0299                     	;# 
  1564  029A                     	;# 
  1565  029B                     	;# 
  1566  029C                     	;# 
  1567  029D                     	;# 
  1568  029E                     	;# 
  1569  0311                     	;# 
  1570  0311                     	;# 
  1571  0312                     	;# 
  1572  0313                     	;# 
  1573  0318                     	;# 
  1574  0318                     	;# 
  1575  0319                     	;# 
  1576  031A                     	;# 
  1577  038C                     	;# 
  1578  038D                     	;# 
  1579  038E                     	;# 
  1580  0391                     	;# 
  1581  0392                     	;# 
  1582  0393                     	;# 
  1583  0394                     	;# 
  1584  0395                     	;# 
  1585  0396                     	;# 
  1586  039A                     	;# 
  1587  039C                     	;# 
  1588  039D                     	;# 
  1589  039E                     	;# 
  1590  039F                     	;# 
  1591  0415                     	;# 
  1592  0416                     	;# 
  1593  0417                     	;# 
  1594  041C                     	;# 
  1595  041D                     	;# 
  1596  041E                     	;# 
  1597  0FE4                     	;# 
  1598  0FE5                     	;# 
  1599  0FE6                     	;# 
  1600  0FE7                     	;# 
  1601  0FE8                     	;# 
  1602  0FE9                     	;# 
  1603  0FEA                     	;# 
  1604  0FEB                     	;# 
  1605  0FED                     	;# 
  1606  0FEE                     	;# 
  1607  0FEF                     	;# 
  1608  0000                     	;# 
  1609  0001                     	;# 
  1610  0002                     	;# 
  1611  0003                     	;# 
  1612  0004                     	;# 
  1613  0005                     	;# 
  1614  0006                     	;# 
  1615  0007                     	;# 
  1616  0008                     	;# 
  1617  0009                     	;# 
  1618  000A                     	;# 
  1619  000B                     	;# 
  1620  000C                     	;# 
  1621  000D                     	;# 
  1622  000E                     	;# 
  1623  0011                     	;# 
  1624  0012                     	;# 
  1625  0013                     	;# 
  1626  0014                     	;# 
  1627  0015                     	;# 
  1628  0016                     	;# 
  1629  0016                     	;# 
  1630  0017                     	;# 
  1631  0018                     	;# 
  1632  0019                     	;# 
  1633  001A                     	;# 
  1634  001B                     	;# 
  1635  001C                     	;# 
  1636  001E                     	;# 
  1637  001F                     	;# 
  1638  008C                     	;# 
  1639  008D                     	;# 
  1640  008E                     	;# 
  1641  0091                     	;# 
  1642  0092                     	;# 
  1643  0093                     	;# 
  1644  0094                     	;# 
  1645  0095                     	;# 
  1646  0096                     	;# 
  1647  0097                     	;# 
  1648  0098                     	;# 
  1649  0099                     	;# 
  1650  009A                     	;# 
  1651  009B                     	;# 
  1652  009B                     	;# 
  1653  009C                     	;# 
  1654  009D                     	;# 
  1655  009E                     	;# 
  1656  010C                     	;# 
  1657  010D                     	;# 
  1658  010E                     	;# 
  1659  0111                     	;# 
  1660  0112                     	;# 
  1661  0113                     	;# 
  1662  0114                     	;# 
  1663  0115                     	;# 
  1664  0116                     	;# 
  1665  0117                     	;# 
  1666  0118                     	;# 
  1667  0119                     	;# 
  1668  011A                     	;# 
  1669  011B                     	;# 
  1670  011D                     	;# 
  1671  011E                     	;# 
  1672  018C                     	;# 
  1673  018D                     	;# 
  1674  018E                     	;# 
  1675  0191                     	;# 
  1676  0191                     	;# 
  1677  0192                     	;# 
  1678  0193                     	;# 
  1679  0193                     	;# 
  1680  0193                     	;# 
  1681  0194                     	;# 
  1682  0195                     	;# 
  1683  0196                     	;# 
  1684  0199                     	;# 
  1685  019A                     	;# 
  1686  019B                     	;# 
  1687  019B                     	;# 
  1688  019C                     	;# 
  1689  019D                     	;# 
  1690  019E                     	;# 
  1691  019F                     	;# 
  1692  020C                     	;# 
  1693  020D                     	;# 
  1694  020E                     	;# 
  1695  0211                     	;# 
  1696  0211                     	;# 
  1697  0212                     	;# 
  1698  0212                     	;# 
  1699  0213                     	;# 
  1700  0213                     	;# 
  1701  0214                     	;# 
  1702  0214                     	;# 
  1703  0215                     	;# 
  1704  0215                     	;# 
  1705  0215                     	;# 
  1706  0216                     	;# 
  1707  0216                     	;# 
  1708  0217                     	;# 
  1709  0217                     	;# 
  1710  0219                     	;# 
  1711  021A                     	;# 
  1712  021B                     	;# 
  1713  021C                     	;# 
  1714  021D                     	;# 
  1715  021E                     	;# 
  1716  021F                     	;# 
  1717  0291                     	;# 
  1718  0291                     	;# 
  1719  0292                     	;# 
  1720  0293                     	;# 
  1721  0294                     	;# 
  1722  0295                     	;# 
  1723  0295                     	;# 
  1724  0296                     	;# 
  1725  0298                     	;# 
  1726  0298                     	;# 
  1727  0299                     	;# 
  1728  029A                     	;# 
  1729  029B                     	;# 
  1730  029C                     	;# 
  1731  029D                     	;# 
  1732  029E                     	;# 
  1733  0311                     	;# 
  1734  0311                     	;# 
  1735  0312                     	;# 
  1736  0313                     	;# 
  1737  0318                     	;# 
  1738  0318                     	;# 
  1739  0319                     	;# 
  1740  031A                     	;# 
  1741  038C                     	;# 
  1742  038D                     	;# 
  1743  038E                     	;# 
  1744  0391                     	;# 
  1745  0392                     	;# 
  1746  0393                     	;# 
  1747  0394                     	;# 
  1748  0395                     	;# 
  1749  0396                     	;# 
  1750  039A                     	;# 
  1751  039C                     	;# 
  1752  039D                     	;# 
  1753  039E                     	;# 
  1754  039F                     	;# 
  1755  0415                     	;# 
  1756  0416                     	;# 
  1757  0417                     	;# 
  1758  041C                     	;# 
  1759  041D                     	;# 
  1760  041E                     	;# 
  1761  0FE4                     	;# 
  1762  0FE5                     	;# 
  1763  0FE6                     	;# 
  1764  0FE7                     	;# 
  1765  0FE8                     	;# 
  1766  0FE9                     	;# 
  1767  0FEA                     	;# 
  1768  0FEB                     	;# 
  1769  0FED                     	;# 
  1770  0FEE                     	;# 
  1771  0FEF                     	;_cmd_buf
  1772                           
  1773                           	psect	idataBANK1
  1774  0002                     __pidataBANK1:	
  1775                           
  1776                           ;initializer for put_cmd@idx
  1777  0002  34FF               	retlw	-1
  1778                           
  1779                           ;initializer for _BACKPLANE_SLAVE_ADDRESS
  1780  0003  3401               	retlw	1
  1781                           
  1782                           	psect	idataBANK2
  1783  11E1                     __pidataBANK2:	
  1784                           
  1785                           ;initializer for _tmr_scaler
  1786  11E1  3401               	retlw	1
  1787                           
  1788                           ;initializer for dev_map_iterator@start
  1789  11E2  3401               	retlw	1
  1790                           
  1791                           ;initializer for _type_no_data
  1792  11E3  3406               	retlw	6
  1793                           
  1794                           	psect	stringtext
  1795  1000                     __pstringtext:	
  1796  1000                     _dpowers:	
  1797  1000  3401               	retlw	1
  1798  1001  3400               	retlw	0
  1799  1002  340A               	retlw	10
  1800  1003  3400               	retlw	0
  1801  1004  3464               	retlw	100
  1802  1005  3400               	retlw	0
  1803  1006  34E8               	retlw	232
  1804  1007  3403               	retlw	3
  1805  1008  3410               	retlw	16
  1806  1009  3427               	retlw	39
  1807  100A                     __end_of_dpowers:	
  1808  100A                     _MAX_Y:	
  1809  100A  3404               	retlw	4
  1810  100B                     __end_of_MAX_Y:	
  1811  0015                     _TMR0	set	21
  1812  0012                     _PIR2bits	set	18
  1813  000B                     _INTCONbits	set	11
  1814  0011                     _PIR1bits	set	17
  1815  005A                     _TMR0IF	set	90
  1816  0095                     _OPTION_REG	set	149
  1817  0097                     _WDTCON	set	151
  1818  0098                     _OSCTUNE	set	152
  1819  0099                     _OSCCON	set	153
  1820  0092                     _PIE2bits	set	146
  1821  0095                     _OPTION_REGbits	set	149
  1822  008E                     _TRISC	set	142
  1823  008D                     _TRISB	set	141
  1824  008C                     _TRISA	set	140
  1825  0091                     _PIE1bits	set	145
  1826  04D6                     _PLLR	set	1238
  1827  010E                     _LATCbits	set	270
  1828  011D                     _APFCON0	set	285
  1829  011E                     _APFCON1	set	286
  1830  010E                     _LATC	set	270
  1831  010D                     _LATB	set	269
  1832  010C                     _LATA	set	268
  1833  018C                     _ANSELA	set	396
  1834  018D                     _ANSELB	set	397
  1835  018E                     _ANSELC	set	398
  1836  0199                     _RCREG	set	409
  1837  019D                     _RCSTAbits	set	413
  1838  019A                     _TXREG	set	410
  1839  019C                     _SPBRGH	set	412
  1840  019B                     _SPBRGL	set	411
  1841  019E                     _TXSTA	set	414
  1842  019D                     _RCSTA	set	413
  1843  019F                     _BAUDCON	set	415
  1844  0196                     _EECON2	set	406
  1845  0193                     _EEDATL	set	403
  1846  0194                     _EEDATH	set	404
  1847  0195                     _EECON1bits	set	405
  1848  0192                     _EEADRH	set	402
  1849  0191                     _EEADRL	set	401
  1850  020E                     _WPUC	set	526
  1851  020C                     _WPUA	set	524
  1852  020D                     _WPUB	set	525
  1853  0211                     _SSP1BUF	set	529
  1854  0216                     _SSP1CON2bits	set	534
  1855  0215                     _SSP1CON1bits	set	533
  1856  0212                     _SSP1ADD	set	530
  1857  0217                     _SSP1CON3	set	535
  1858  0215                     _SSP1CON1	set	533
  1859  0214                     _SSP1STAT	set	532
  1860  100B                     STR_25:	
  1861  100B  3421               	retlw	33	;'!'
  1862  100C  343A               	retlw	58	;':'
  1863  100D  3457               	retlw	87	;'W'
  1864  100E  3453               	retlw	83	;'S'
  1865  100F  3443               	retlw	67	;'C'
  1866  1010  343A               	retlw	58	;':'
  1867  1011  3450               	retlw	80	;'P'
  1868  1012  344F               	retlw	79	;'O'
  1869  1013  3453               	retlw	83	;'S'
  1870  1014  3420               	retlw	32	;' '
  1871  1015  344C               	retlw	76	;'L'
  1872  1016  3441               	retlw	65	;'A'
  1873  1017  3452               	retlw	82	;'R'
  1874  1018  3447               	retlw	71	;'G'
  1875  1019  3445               	retlw	69	;'E'
  1876  101A  3452               	retlw	82	;'R'
  1877  101B  3420               	retlw	32	;' '
  1878  101C  3454               	retlw	84	;'T'
  1879  101D  3448               	retlw	72	;'H'
  1880  101E  3441               	retlw	65	;'A'
  1881  101F  344E               	retlw	78	;'N'
  1882  1020  3420               	retlw	32	;' '
  1883  1021  3432               	retlw	50	;'2'
  1884  1022  3437               	retlw	55	;'7'
  1885  1023  340A               	retlw	10
  1886  1024  3400               	retlw	0
  1887  1025                     STR_23:	
  1888  1025  3421               	retlw	33	;'!'
  1889  1026  343A               	retlw	58	;':'
  1890  1027  3450               	retlw	80	;'P'
  1891  1028  344F               	retlw	79	;'O'
  1892  1029  3453               	retlw	83	;'S'
  1893  102A  343A               	retlw	58	;':'
  1894  102B  3450               	retlw	80	;'P'
  1895  102C  344F               	retlw	79	;'O'
  1896  102D  3453               	retlw	83	;'S'
  1897  102E  3420               	retlw	32	;' '
  1898  102F  344C               	retlw	76	;'L'
  1899  1030  3441               	retlw	65	;'A'
  1900  1031  3452               	retlw	82	;'R'
  1901  1032  3447               	retlw	71	;'G'
  1902  1033  3445               	retlw	69	;'E'
  1903  1034  3452               	retlw	82	;'R'
  1904  1035  3420               	retlw	32	;' '
  1905  1036  3454               	retlw	84	;'T'
  1906  1037  3448               	retlw	72	;'H'
  1907  1038  3441               	retlw	65	;'A'
  1908  1039  344E               	retlw	78	;'N'
  1909  103A  3420               	retlw	32	;' '
  1910  103B  3432               	retlw	50	;'2'
  1911  103C  3437               	retlw	55	;'7'
  1912  103D  340A               	retlw	10
  1913  103E  3400               	retlw	0
  1914  103F                     STR_17:	
  1915  103F  3421               	retlw	33	;'!'
  1916  1040  343A               	retlw	58	;':'
  1917  1041  3425               	retlw	37	;'%'
  1918  1042  3425               	retlw	37	;'%'
  1919  1043  3425               	retlw	37	;'%'
  1920  1044  3464               	retlw	100	;'d'
  1921  1045  343A               	retlw	58	;':'
  1922  1046  3455               	retlw	85	;'U'
  1923  1047  344E               	retlw	78	;'N'
  1924  1048  3444               	retlw	68	;'D'
  1925  1049  3445               	retlw	69	;'E'
  1926  104A  3454               	retlw	84	;'T'
  1927  104B  3445               	retlw	69	;'E'
  1928  104C  3443               	retlw	67	;'C'
  1929  104D  3454               	retlw	84	;'T'
  1930  104E  3445               	retlw	69	;'E'
  1931  104F  3444               	retlw	68	;'D'
  1932  1050  345F               	retlw	95	;'_'
  1933  1051  3444               	retlw	68	;'D'
  1934  1052  3445               	retlw	69	;'E'
  1935  1053  3456               	retlw	86	;'V'
  1936  1054  3449               	retlw	73	;'I'
  1937  1055  3443               	retlw	67	;'C'
  1938  1056  3445               	retlw	69	;'E'
  1939  1057  340A               	retlw	10
  1940  1058  3400               	retlw	0
  1941  1059                     STR_12:	
  1942  1059  3421               	retlw	33	;'!'
  1943  105A  343A               	retlw	58	;':'
  1944  105B  344E               	retlw	78	;'N'
  1945  105C  344F               	retlw	79	;'O'
  1946  105D  3420               	retlw	32	;' '
  1947  105E  3441               	retlw	65	;'A'
  1948  105F  3443               	retlw	67	;'C'
  1949  1060  344B               	retlw	75	;'K'
  1950  1061  3420               	retlw	32	;' '
  1951  1062  3446               	retlw	70	;'F'
  1952  1063  3452               	retlw	82	;'R'
  1953  1064  344F               	retlw	79	;'O'
  1954  1065  344D               	retlw	77	;'M'
  1955  1066  3420               	retlw	32	;' '
  1956  1067  3449               	retlw	73	;'I'
  1957  1068  3432               	retlw	50	;'2'
  1958  1069  3443               	retlw	67	;'C'
  1959  106A  3420               	retlw	32	;' '
  1960  106B  3453               	retlw	83	;'S'
  1961  106C  344C               	retlw	76	;'L'
  1962  106D  3441               	retlw	65	;'A'
  1963  106E  3456               	retlw	86	;'V'
  1964  106F  3445               	retlw	69	;'E'
  1965  1070  340A               	retlw	10
  1966  1071  3400               	retlw	0
  1967  1072                     STR_16:	
  1968  1072  3421               	retlw	33	;'!'
  1969  1073  343A               	retlw	58	;':'
  1970  1074  344D               	retlw	77	;'M'
  1971  1075  3441               	retlw	65	;'A'
  1972  1076  3450               	retlw	80	;'P'
  1973  1077  343A               	retlw	58	;':'
  1974  1078  344E               	retlw	78	;'N'
  1975  1079  344F               	retlw	79	;'O'
  1976  107A  3420               	retlw	32	;' '
  1977  107B  3453               	retlw	83	;'S'
  1978  107C  344C               	retlw	76	;'L'
  1979  107D  3441               	retlw	65	;'A'
  1980  107E  3456               	retlw	86	;'V'
  1981  107F  3445               	retlw	69	;'E'
  1982  1080  3420               	retlw	32	;' '
  1983  1081  3446               	retlw	70	;'F'
  1984  1082  344F               	retlw	79	;'O'
  1985  1083  3455               	retlw	85	;'U'
  1986  1084  344E               	retlw	78	;'N'
  1987  1085  3444               	retlw	68	;'D'
  1988  1086  340A               	retlw	10
  1989  1087  3400               	retlw	0
  1990  1088                     STR_18:	
  1991  1088  3421               	retlw	33	;'!'
  1992  1089  343A               	retlw	58	;':'
  1993  108A  3425               	retlw	37	;'%'
  1994  108B  3425               	retlw	37	;'%'
  1995  108C  3425               	retlw	37	;'%'
  1996  108D  3464               	retlw	100	;'d'
  1997  108E  343A               	retlw	58	;':'
  1998  108F  344E               	retlw	78	;'N'
  1999  1090  3445               	retlw	69	;'E'
  2000  1091  3454               	retlw	84	;'T'
  2001  1092  3457               	retlw	87	;'W'
  2002  1093  344F               	retlw	79	;'O'
  2003  1094  3452               	retlw	82	;'R'
  2004  1095  344B               	retlw	75	;'K'
  2005  1096  345F               	retlw	95	;'_'
  2006  1097  3445               	retlw	69	;'E'
  2007  1098  3452               	retlw	82	;'R'
  2008  1099  3452               	retlw	82	;'R'
  2009  109A  344F               	retlw	79	;'O'
  2010  109B  3452               	retlw	82	;'R'
  2011  109C  340A               	retlw	10
  2012  109D  3400               	retlw	0
  2013  109E                     STR_33:	
  2014  109E  3442               	retlw	66	;'B'
  2015  109F  3441               	retlw	65	;'A'
  2016  10A0  3443               	retlw	67	;'C'
  2017  10A1  344B               	retlw	75	;'K'
  2018  10A2  3450               	retlw	80	;'P'
  2019  10A3  344C               	retlw	76	;'L'
  2020  10A4  3441               	retlw	65	;'A'
  2021  10A5  344E               	retlw	78	;'N'
  2022  10A6  3445               	retlw	69	;'E'
  2023  10A7  342D               	retlw	45	;'-'
  2024  10A8  344D               	retlw	77	;'M'
  2025  10A9  3441               	retlw	65	;'A'
  2026  10AA  3453               	retlw	83	;'S'
  2027  10AB  3454               	retlw	84	;'T'
  2028  10AC  3445               	retlw	69	;'E'
  2029  10AD  3452               	retlw	82	;'R'
  2030  10AE  3400               	retlw	0
  2031  10AF                     STR_68:	
  2032  10AF  3449               	retlw	73	;'I'
  2033  10B0  344C               	retlw	76	;'L'
  2034  10B1  344C               	retlw	76	;'L'
  2035  10B2  3445               	retlw	69	;'E'
  2036  10B3  3447               	retlw	71	;'G'
  2037  10B4  3441               	retlw	65	;'A'
  2038  10B5  344C               	retlw	76	;'L'
  2039  10B6  345F               	retlw	95	;'_'
  2040  10B7  3454               	retlw	84	;'T'
  2041  10B8  3459               	retlw	89	;'Y'
  2042  10B9  3450               	retlw	80	;'P'
  2043  10BA  3445               	retlw	69	;'E'
  2044  10BB  340A               	retlw	10
  2045  10BC  3400               	retlw	0
  2046  10BD                     STR_8:	
  2047  10BD  3421               	retlw	33	;'!'
  2048  10BE  343A               	retlw	58	;':'
  2049  10BF  3453               	retlw	83	;'S'
  2050  10C0  3454               	retlw	84	;'T'
  2051  10C1  3450               	retlw	80	;'P'
  2052  10C2  343A               	retlw	58	;':'
  2053  10C3  344E               	retlw	78	;'N'
  2054  10C4  3441               	retlw	65	;'A'
  2055  10C5  3443               	retlw	67	;'C'
  2056  10C6  344B               	retlw	75	;'K'
  2057  10C7  340A               	retlw	10
  2058  10C8  3400               	retlw	0
  2059  10C9                     STR_7:	
  2060  10C9  342A               	retlw	42	;'*'
  2061  10CA  343A               	retlw	58	;':'
  2062  10CB  3453               	retlw	83	;'S'
  2063  10CC  3454               	retlw	84	;'T'
  2064  10CD  3450               	retlw	80	;'P'
  2065  10CE  343A               	retlw	58	;':'
  2066  10CF  3441               	retlw	65	;'A'
  2067  10D0  3443               	retlw	67	;'C'
  2068  10D1  344B               	retlw	75	;'K'
  2069  10D2  340A               	retlw	10
  2070  10D3  3400               	retlw	0
  2071  10D4                     STR_48:	
  2072  10D4  3424               	retlw	36	;'$'
  2073  10D5  343A               	retlw	58	;':'
  2074  10D6  3452               	retlw	82	;'R'
  2075  10D7  3444               	retlw	68	;'D'
  2076  10D8  3441               	retlw	65	;'A'
  2077  10D9  343A               	retlw	58	;':'
  2078  10DA  3425               	retlw	37	;'%'
  2079  10DB  3464               	retlw	100	;'d'
  2080  10DC  340A               	retlw	10
  2081  10DD  3400               	retlw	0
  2082  10DE                     STR_66:	
  2083  10DE  342D               	retlw	45	;'-'
  2084  10DF  3425               	retlw	37	;'%'
  2085  10E0  3464               	retlw	100	;'d'
  2086  10E1  342E               	retlw	46	;'.'
  2087  10E2  3425               	retlw	37	;'%'
  2088  10E3  3430               	retlw	48	;'0'
  2089  10E4  3432               	retlw	50	;'2'
  2090  10E5  3464               	retlw	100	;'d'
  2091  10E6  340A               	retlw	10
  2092  10E7  3400               	retlw	0
  2093  10E8                     STR_37:	
  2094  10E8  3424               	retlw	36	;'$'
  2095  10E9  343A               	retlw	58	;':'
  2096  10EA  3457               	retlw	87	;'W'
  2097  10EB  3448               	retlw	72	;'H'
  2098  10EC  344F               	retlw	79	;'O'
  2099  10ED  343A               	retlw	58	;':'
  2100  10EE  3425               	retlw	37	;'%'
  2101  10EF  3473               	retlw	115	;'s'
  2102  10F0  340A               	retlw	10
  2103  10F1  3400               	retlw	0
  2104  10F2                     STR_41:	
  2105  10F2  342A               	retlw	42	;'*'
  2106  10F3  343A               	retlw	58	;':'
  2107  10F4  3453               	retlw	83	;'S'
  2108  10F5  3454               	retlw	84	;'T'
  2109  10F6  3450               	retlw	80	;'P'
  2110  10F7  343A               	retlw	58	;':'
  2111  10F8  3425               	retlw	37	;'%'
  2112  10F9  3473               	retlw	115	;'s'
  2113  10FA  340A               	retlw	10
  2114  10FB  3400               	retlw	0
  2115  10FC                     STR_64:	
  2116  10FC  342D               	retlw	45	;'-'
  2117  10FD  3425               	retlw	37	;'%'
  2118  10FE  3464               	retlw	100	;'d'
  2119  10FF  342E               	retlw	46	;'.'
  2120  1100  3425               	retlw	37	;'%'
  2121  1101  3430               	retlw	48	;'0'
  2122  1102  3432               	retlw	50	;'2'
  2123  1103  3464               	retlw	100	;'d'
  2124  1104  342C               	retlw	44	;','
  2125  1105  3400               	retlw	0
  2126  1106                     STR_56:	
  2127  1106  3455               	retlw	85	;'U'
  2128  1107  3449               	retlw	73	;'I'
  2129  1108  344E               	retlw	78	;'N'
  2130  1109  3454               	retlw	84	;'T'
  2131  110A  3431               	retlw	49	;'1'
  2132  110B  3436               	retlw	54	;'6'
  2133  110C  345F               	retlw	95	;'_'
  2134  110D  3454               	retlw	84	;'T'
  2135  110E  343A               	retlw	58	;':'
  2136  110F  3400               	retlw	0
  2137  1110                     STR_2:	
  2138  1110  3424               	retlw	36	;'$'
  2139  1111  343A               	retlw	58	;':'
  2140  1112  3457               	retlw	87	;'W'
  2141  1113  3448               	retlw	72	;'H'
  2142  1114  344F               	retlw	79	;'O'
  2143  1115  343A               	retlw	58	;':'
  2144  1116  3425               	retlw	37	;'%'
  2145  1117  3464               	retlw	100	;'d'
  2146  1118  340A               	retlw	10
  2147  1119  3400               	retlw	0
  2148  111A                     STR_11:	
  2149  111A  3424               	retlw	36	;'$'
  2150  111B  343A               	retlw	58	;':'
  2151  111C  3447               	retlw	71	;'G'
  2152  111D  3445               	retlw	69	;'E'
  2153  111E  3454               	retlw	84	;'T'
  2154  111F  343A               	retlw	58	;':'
  2155  1120  3425               	retlw	37	;'%'
  2156  1121  3464               	retlw	100	;'d'
  2157  1122  340A               	retlw	10
  2158  1123  3400               	retlw	0
  2159  1124                     STR_67:	
  2160  1124  344E               	retlw	78	;'N'
  2161  1125  344F               	retlw	79	;'O'
  2162  1126  345F               	retlw	95	;'_'
  2163  1127  3444               	retlw	68	;'D'
  2164  1128  3441               	retlw	65	;'A'
  2165  1129  3454               	retlw	84	;'T'
  2166  112A  3441               	retlw	65	;'A'
  2167  112B  340A               	retlw	10
  2168  112C  3400               	retlw	0
  2169  112D                     STR_50:	
  2170  112D  3455               	retlw	85	;'U'
  2171  112E  3449               	retlw	73	;'I'
  2172  112F  344E               	retlw	78	;'N'
  2173  1130  3454               	retlw	84	;'T'
  2174  1131  3438               	retlw	56	;'8'
  2175  1132  345F               	retlw	95	;'_'
  2176  1133  3454               	retlw	84	;'T'
  2177  1134  343A               	retlw	58	;':'
  2178  1135  3400               	retlw	0
  2179  1136                     STR_62:	
  2180  1136  3446               	retlw	70	;'F'
  2181  1137  344C               	retlw	76	;'L'
  2182  1138  344F               	retlw	79	;'O'
  2183  1139  3441               	retlw	65	;'A'
  2184  113A  3454               	retlw	84	;'T'
  2185  113B  343A               	retlw	58	;':'
  2186  113C  3400               	retlw	0
  2187  113D                     STR_34:	
  2188  113D  3428               	retlw	40	;'('
  2189  113E  346E               	retlw	110	;'n'
  2190  113F  3475               	retlw	117	;'u'
  2191  1140  346C               	retlw	108	;'l'
  2192  1141  346C               	retlw	108	;'l'
  2193  1142  3429               	retlw	41	;')'
  2194  1143  3400               	retlw	0
  2195  1144                     STR_27:	
  2196  1144  3424               	retlw	36	;'$'
  2197  1145  343A               	retlw	58	;':'
  2198  1146  3452               	retlw	82	;'R'
  2199  1147  3453               	retlw	83	;'S'
  2200  1148  3443               	retlw	67	;'C'
  2201  1149  343A               	retlw	58	;':'
  2202  114A  3400               	retlw	0
  2203  114B                     STR_13:	
  2204  114B  3424               	retlw	36	;'$'
  2205  114C  343A               	retlw	58	;':'
  2206  114D  344D               	retlw	77	;'M'
  2207  114E  3441               	retlw	65	;'A'
  2208  114F  3450               	retlw	80	;'P'
  2209  1150  343A               	retlw	58	;':'
  2210  1151  3400               	retlw	0
  2211  1152                     STR_49:	
  2212  1152  3425               	retlw	37	;'%'
  2213  1153  3425               	retlw	37	;'%'
  2214  1154  3425               	retlw	37	;'%'
  2215  1155  3464               	retlw	100	;'d'
  2216  1156  343A               	retlw	58	;':'
  2217  1157  3400               	retlw	0
  2218  1158                     STR_35:	
  2219  1158  3423               	retlw	35	;'#'
  2220  1159  3425               	retlw	37	;'%'
  2221  115A  3473               	retlw	115	;'s'
  2222  115B  340A               	retlw	10
  2223  115C  3400               	retlw	0
  2224  115D                     STR_52:	
  2225  115D  3425               	retlw	37	;'%'
  2226  115E  3475               	retlw	117	;'u'
  2227  115F  340A               	retlw	10
  2228  1160  3400               	retlw	0
  2229  1161                     STR_51:	
  2230  1161  3425               	retlw	37	;'%'
  2231  1162  3475               	retlw	117	;'u'
  2232  1163  342C               	retlw	44	;','
  2233  1164  3400               	retlw	0
  2234  1165                     STR_47:	
  2235  1165  3452               	retlw	82	;'R'
  2236  1166  3444               	retlw	68	;'D'
  2237  1167  3441               	retlw	65	;'A'
  2238  1168  3400               	retlw	0
  2239  1169                     STR_46:	
  2240  1169  3457               	retlw	87	;'W'
  2241  116A  3444               	retlw	68	;'D'
  2242  116B  3441               	retlw	65	;'A'
  2243  116C  3400               	retlw	0
  2244  116D                     STR_42:	
  2245  116D  3441               	retlw	65	;'A'
  2246  116E  3443               	retlw	67	;'C'
  2247  116F  344B               	retlw	75	;'K'
  2248  1170  3400               	retlw	0
  2249  1171                     STR_14:	
  2250  1171  3425               	retlw	37	;'%'
  2251  1172  3464               	retlw	100	;'d'
  2252  1173  342C               	retlw	44	;','
  2253  1174  3400               	retlw	0
  2254  1175                     STR_5:	
  2255  1175  3453               	retlw	83	;'S'
  2256  1176  3454               	retlw	84	;'T'
  2257  1177  3441               	retlw	65	;'A'
  2258  1178  3400               	retlw	0
  2259  1179                     STR_20:	
  2260  1179  3449               	retlw	73	;'I'
  2261  117A  3432               	retlw	50	;'2'
  2262  117B  3443               	retlw	67	;'C'
  2263  117C  3400               	retlw	0
  2264  117D                     STR_31:	
  2265  117D  3443               	retlw	67	;'C'
  2266  117E  3453               	retlw	83	;'S'
  2267  117F  3443               	retlw	67	;'C'
  2268  1180  3400               	retlw	0
  2269  1181                     STR_26:	
  2270  1181  3452               	retlw	82	;'R'
  2271  1182  3453               	retlw	83	;'S'
  2272  1183  3443               	retlw	67	;'C'
  2273  1184  3400               	retlw	0
  2274  1185                     STR_24:	
  2275  1185  3457               	retlw	87	;'W'
  2276  1186  3453               	retlw	83	;'S'
  2277  1187  3443               	retlw	67	;'C'
  2278  1188  3400               	retlw	0
  2279  1189                     STR_32:	
  2280  1189  3453               	retlw	83	;'S'
  2281  118A  3445               	retlw	69	;'E'
  2282  118B  344E               	retlw	78	;'N'
  2283  118C  3400               	retlw	0
  2284  118D                     STR_1:	
  2285  118D  3457               	retlw	87	;'W'
  2286  118E  3448               	retlw	72	;'H'
  2287  118F  344F               	retlw	79	;'O'
  2288  1190  3400               	retlw	0
  2289  1191                     STR_21:	
  2290  1191  344D               	retlw	77	;'M'
  2291  1192  3441               	retlw	65	;'A'
  2292  1193  3450               	retlw	80	;'P'
  2293  1194  3400               	retlw	0
  2294  1195                     STR_6:	
  2295  1195  3453               	retlw	83	;'S'
  2296  1196  3454               	retlw	84	;'T'
  2297  1197  3450               	retlw	80	;'P'
  2298  1198  3400               	retlw	0
  2299  1199                     STR_22:	
  2300  1199  3450               	retlw	80	;'P'
  2301  119A  344F               	retlw	79	;'O'
  2302  119B  3453               	retlw	83	;'S'
  2303  119C  3400               	retlw	0
  2304  119D                     STR_10:	
  2305  119D  3447               	retlw	71	;'G'
  2306  119E  3445               	retlw	69	;'E'
  2307  119F  3454               	retlw	84	;'T'
  2308  11A0  3400               	retlw	0
  2309  11A1                     STR_9:	
  2310  11A1  3453               	retlw	83	;'S'
  2311  11A2  3445               	retlw	69	;'E'
  2312  11A3  3454               	retlw	84	;'T'
  2313  11A4  3400               	retlw	0
  2314  11A5                     STR_4:	
  2315  11A5  3453               	retlw	83	;'S'
  2316  11A6  3441               	retlw	65	;'A'
  2317  11A7  3456               	retlw	86	;'V'
  2318  11A8  3400               	retlw	0
  2319  11A9                     STR_28:	
  2320  11A9  3425               	retlw	37	;'%'
  2321  11AA  3464               	retlw	100	;'d'
  2322  11AB  347C               	retlw	124	;'|'
  2323  11AC  3400               	retlw	0
  2324  11AD                     STR_3:	
  2325  11AD  3421               	retlw	33	;'!'
  2326  11AE  340A               	retlw	10
  2327  11AF  3400               	retlw	0
  2328  1088                     
  2329                           ; #config settings
  2330  0000                     
  2331                           	psect	cinit
  2332  003E                     start_initialization:	
  2333  003E                     __initialization:		;BIGRAM
  2334                           
  2335                           ; Initialize objects allocated to BANK1
  2336  003E  0021               	movlb	1	; select bank1
  2337  003F  3180  2002  3180   	fcall	__pidataBANK1	;fetch initializer
  2338  0042  00ED               	movwf	__pdataBANK1& (0+127)
  2339  0043  3180  2003  3180   	fcall	__pidataBANK1+1	;fetch initializer
  2340  0046  00EE               	movwf	(__pdataBANK1+1)& (0+127)
  2341                           
  2342                           ; Initialize objects allocated to BANK2
  2343  0047  0022               	movlb	2	; select bank2
  2344  0048  3191  21E1  3180   	fcall	__pidataBANK2	;fetch initializer
  2345  004B  00E2               	movwf	__pdataBANK2& (0+127)
  2346  004C  3191  21E2  3180   	fcall	__pidataBANK2+1	;fetch initializer
  2347  004F  00E3               	movwf	(__pdataBANK2+1)& (0+127)
  2348  0050  3191  21E3  3180   	fcall	__pidataBANK2+2	;fetch initializer
  2349  0053  00E4               	movwf	(__pdataBANK2+2)& (0+127)
  2350                           
  2351                           ; Clear objects allocated to BIGRAM
  2352  0054  3030               	movlw	low (0+9008)
  2353  0055  0084               	movwf	4
  2354  0056  3023               	movlw	high (0+9008)
  2355  0057  0085               	movwf	5
  2356  0058  30C0               	movlw	192
  2357  0059  00FE               	movwf	btemp
  2358  005A  3000               	movlw	0
  2359  005B  00FF               	movwf	btemp+1
  2360  005C  3192  222C  3180   	fcall	clear_ram0
  2361                           
  2362                           ; Clear objects allocated to COMMON
  2363  005F  01F0               	clrf	__pbssCOMMON& (0+127)
  2364  0060  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  2365  0061  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  2366  0062  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  2367  0063  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  2368  0064  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
  2369  0065  01F6               	clrf	(__pbssCOMMON+6)& (0+127)
  2370                           
  2371                           ; Clear objects allocated to BANK0
  2372  0066  0020               	movlb	0	; select bank0
  2373  0067  01EB               	clrf	__pbssBANK0& (0+127)
  2374  0068  01EC               	clrf	(__pbssBANK0+1)& (0+127)
  2375  0069  01ED               	clrf	(__pbssBANK0+2)& (0+127)
  2376  006A  01EE               	clrf	(__pbssBANK0+3)& (0+127)
  2377                           
  2378                           ; Clear objects allocated to BANK1
  2379  006B  30D9               	movlw	low __pbssBANK1
  2380  006C  0084               	movwf	4
  2381  006D  3000               	movlw	high __pbssBANK1
  2382  006E  0085               	movwf	5
  2383  006F  3014               	movlw	20
  2384  0070  00FE               	movwf	btemp
  2385  0071  3000               	movlw	0
  2386  0072  00FF               	movwf	btemp+1
  2387  0073  3192  222C  3180   	fcall	clear_ram0
  2388                           
  2389                           ; Clear objects allocated to BANK2
  2390  0076  3020               	movlw	low __pbssBANK2
  2391  0077  0084               	movwf	4
  2392  0078  3001               	movlw	high __pbssBANK2
  2393  0079  0085               	movwf	5
  2394  007A  3042               	movlw	66
  2395  007B  00FE               	movwf	btemp
  2396  007C  3000               	movlw	0
  2397  007D  00FF               	movwf	btemp+1
  2398  007E  3192  222C  3180   	fcall	clear_ram0
  2399                           
  2400                           ; Clear objects allocated to BANK3
  2401  0081  30A0               	movlw	low __pbssBANK3
  2402  0082  0084               	movwf	4
  2403  0083  3001               	movlw	high __pbssBANK3
  2404  0084  0085               	movwf	5
  2405  0085  302C               	movlw	44
  2406  0086  00FE               	movwf	btemp
  2407  0087  3000               	movlw	0
  2408  0088  00FF               	movwf	btemp+1
  2409  0089  3192  222C  3180   	fcall	clear_ram0
  2410                           
  2411                           ; Clear objects allocated to BANK4
  2412  008C  3020               	movlw	low __pbssBANK4
  2413  008D  0084               	movwf	4
  2414  008E  3002               	movlw	high __pbssBANK4
  2415  008F  0085               	movwf	5
  2416  0090  3040               	movlw	64
  2417  0091  00FE               	movwf	btemp
  2418  0092  3000               	movlw	0
  2419  0093  00FF               	movwf	btemp+1
  2420  0094  3192  222C  3180   	fcall	clear_ram0
  2421                           
  2422                           ; Clear objects allocated to BANK5
  2423  0097  30A0               	movlw	low __pbssBANK5
  2424  0098  0084               	movwf	4
  2425  0099  3002               	movlw	high __pbssBANK5
  2426  009A  0085               	movwf	5
  2427  009B  3040               	movlw	64
  2428  009C  00FE               	movwf	btemp
  2429  009D  3000               	movlw	0
  2430  009E  00FF               	movwf	btemp+1
  2431  009F  3192  222C  3180   	fcall	clear_ram0
  2432                           
  2433                           ; Clear objects allocated to BANK6
  2434  00A2  3020               	movlw	low __pbssBANK6
  2435  00A3  0084               	movwf	4
  2436  00A4  3003               	movlw	high __pbssBANK6
  2437  00A5  0085               	movwf	5
  2438  00A6  3040               	movlw	64
  2439  00A7  00FE               	movwf	btemp
  2440  00A8  3000               	movlw	0
  2441  00A9  00FF               	movwf	btemp+1
  2442  00AA  3192  222C         	fcall	clear_ram0
  2443  00AC                     end_of_initialization:	
  2444                           ;End of C runtime variable initialization code
  2445                           
  2446  00AC                     __end_of__initialization:	
  2447  00AC  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2448  00AD  0020               	movlb	0
  2449  00AE  3195  2D37         	ljmp	_main	;jump to C main() function
  2450                           
  2451                           	psect	bssCOMMON
  2452  0070                     __pbssCOMMON:	
  2453  0070                     inv_handler@t:	
  2454  0070                     	ds	2
  2455  0072                     _eusartRxTail:	
  2456  0072                     	ds	1
  2457  0073                     _eusartRxHead:	
  2458  0073                     	ds	1
  2459  0074                     _eusartTxBufferRemaining:	
  2460  0074                     	ds	1
  2461  0075                     _eusartTxTail:	
  2462  0075                     	ds	1
  2463  0076                     _eusartTxHead:	
  2464  0076                     	ds	1
  2465                           
  2466                           	psect	bssBANK0
  2467  006B                     __pbssBANK0:	
  2468  006B                     _i:	
  2469  006B                     	ds	1
  2470  006C                     command_handler@pos:	
  2471  006C                     	ds	1
  2472  006D                     I2C1_ISR@i2c_address:	
  2473  006D                     	ds	2
  2474                           
  2475                           	psect	bssBANK1
  2476  00D9                     __pbssBANK1:	
  2477  00D9                     _i2c1_object:	
  2478  00D9                     	ds	5
  2479  00DE                     _value:	
  2480  00DE                     	ds	1
  2481  00DF                     _cnt:	
  2482  00DF                     	ds	1
  2483  00E0                     _slave_address:	
  2484  00E0                     	ds	1
  2485  00E1                     tick_handler@cmd_next:	
  2486  00E1                     	ds	1
  2487  00E2                     dev_map_iterator@yy:	
  2488  00E2                     	ds	1
  2489  00E3                     dev_map_iterator@xx:	
  2490  00E3                     	ds	1
  2491  00E4                     _devs:	
  2492  00E4                     	ds	1
  2493  00E5                     _timer0ReloadVal:	
  2494  00E5                     	ds	1
  2495  00E6                     _eusartRxCount:	
  2496  00E6                     	ds	1
  2497  00E7                     I2C1_ISR@i2c_10bit_address_restart:	
  2498  00E7                     	ds	1
  2499  00E8                     I2C1_ISR@i2c_bytes_left:	
  2500  00E8                     	ds	1
  2501  00E9                     _p_i2c1_current:	
  2502  00E9                     	ds	1
  2503  00EA                     _p_i2c1_trb_current:	
  2504  00EA                     	ds	1
  2505  00EB                     _i2c1_trb_count:	
  2506  00EB                     	ds	1
  2507  00EC                     _i2c1_state:	
  2508  00EC                     	ds	1
  2509                           
  2510                           	psect	dataBANK1
  2511  00ED                     __pdataBANK1:	
  2512  00ED                     put_cmd@idx:	
  2513  00ED                     	ds	1
  2514  00EE                     _BACKPLANE_SLAVE_ADDRESS:	
  2515  00EE                     	ds	1
  2516                           
  2517                           	psect	bssBANK2
  2518  0120                     __pbssBANK2:	
  2519  0120                     _dev_map:	
  2520  0120                     	ds	4
  2521  0124                     _float100:	
  2522  0124                     	ds	2
  2523  0126                     _device_id_:	
  2524  0126                     	ds	2
  2525  0128                     _PROTOCOL_Tick_Handler:	
  2526  0128                     	ds	2
  2527  012A                     _PROTOCOL_Inv_Handler:	
  2528  012A                     	ds	2
  2529  012C                     _PROTOCOL_Extension_Handler:	
  2530  012C                     	ds	2
  2531  012E                     _PROTOCOL_Loop_Func:	
  2532  012E                     	ds	2
  2533  0130                     _PROTOCOL_Set_Handler:	
  2534  0130                     	ds	2
  2535  0132                     _PROTOCOL_Stop_Handler:	
  2536  0132                     	ds	2
  2537  0134                     _PROTOCOL_Start_Handler:	
  2538  0134                     	ds	2
  2539  0136                     tick_handler@t:	
  2540  0136                     	ds	2
  2541  0138                     I2C1_ISR@pi2c_buf_ptr:	
  2542  0138                     	ds	2
  2543  013A                     _data:	
  2544  013A                     	ds	1
  2545  013B                     _j:	
  2546  013B                     	ds	1
  2547  013C                     _backplane_slave_enabled:	
  2548  013C                     	ds	1
  2549  013D                     _readbuf_status:	
  2550  013D                     	ds	1
  2551  013E                     _tmr_overflow:	
  2552  013E                     	ds	1
  2553  013F                     _tmr_cnt:	
  2554  013F                     	ds	1
  2555  0140                     _sec_cnt:	
  2556  0140                     	ds	1
  2557  0141                     _invoked:	
  2558  0141                     	ds	1
  2559  0142                     _running:	
  2560  0142                     	ds	1
  2561  0143                     _locked:	
  2562  0143                     	ds	1
  2563  0144                     _do_func:	
  2564  0144                     	ds	1
  2565  0145                     _timer_cnt:	
  2566  0145                     	ds	1
  2567  0146                     _readbuf:	
  2568  0146                     	ds	6
  2569  014C                     I2C1_MasterRead@trBlock:	
  2570  014C                     	ds	5
  2571  0151                     I2C1_MasterWrite@trBlock:	
  2572  0151                     	ds	5
  2573  0156                     PROTOCOL_Send_float@pbuf:	
  2574  0156                     	ds	3
  2575  0159                     _i2c1_tr_queue:	
  2576  0159                     	ds	3
  2577  015C                     PROTOCOL_Send_int16_t@pbuf:	
  2578  015C                     	ds	2
  2579  015E                     PROTOCOL_Send_uint16_t@pbuf:	
  2580  015E                     	ds	2
  2581  0160                     PROTOCOL_Send_int8_t@pbuf:	
  2582  0160                     	ds	1
  2583  0161                     PROTOCOL_Send_uint8_t@pbuf:	
  2584  0161                     	ds	1
  2585                           
  2586                           	psect	dataBANK2
  2587  0162                     __pdataBANK2:	
  2588  0162                     _tmr_scaler:	
  2589  0162                     	ds	1
  2590  0163                     dev_map_iterator@start:	
  2591  0163                     	ds	1
  2592  0164                     _type_no_data:	
  2593  0164                     	ds	1
  2594                           
  2595                           	psect	bssBANK3
  2596  01A0                     __pbssBANK3:	
  2597  01A0                     _schedule:	
  2598  01A0                     	ds	28
  2599  01BC                     _read_buf:	
  2600  01BC                     	ds	16
  2601                           
  2602                           	psect	bssBANK4
  2603  0220                     __pbssBANK4:	
  2604  0220                     _buf:	
  2605  0220                     	ds	48
  2606  0250                     _sendbuf:	
  2607  0250                     	ds	16
  2608                           
  2609                           	psect	bssBANK5
  2610  02A0                     __pbssBANK5:	
  2611  02A0                     _eusartTxBuffer:	
  2612  02A0                     	ds	64
  2613                           
  2614                           	psect	bssBANK6
  2615  0320                     __pbssBANK6:	
  2616  0320                     _eusartRxBuffer:	
  2617  0320                     	ds	64
  2618                           
  2619                           	psect	clrtext
  2620  122C                     clear_ram0:	
  2621                           ;	Called with FSR0 containing the base address, and
  2622                           ;	btemp/btemp+1 has the size to clear
  2623                           
  2624  122C  0064               	clrwdt	;clear the watchdog before getting into this loop
  2625  122D                     clrloop0:	
  2626  122D  0180               	clrf	0	;clear RAM location pointed to by FSR
  2627  122E  3101               	addfsr 0,1
  2628  122F  3001               	movlw	1
  2629  1230  02FE               	subwf	126,f
  2630  1231  3000               	movlw	0
  2631  1232  3BFF               	subwfb	127,f
  2632  1233  087F               	movf	127,w
  2633  1234  047E               	iorwf	126,w
  2634  1235  1903               	btfsc	3,2
  2635  1236  3400               	retlw	0	;all done for this memory range, return
  2636  1237  2A2D               	goto	clrloop0	;have we reached the end yet?
  2637                           
  2638                           	psect	cstackBANK1
  2639  00A0                     __pcstackBANK1:	
  2640  00A0                     exec_remote_cmd@send_buf:	
  2641                           
  2642                           ; 50 bytes @ 0x0
  2643  00A0                     	ds	50
  2644  00D2                     exec_remote_cmd@idx:	
  2645                           
  2646                           ; 1 bytes @ 0x32
  2647  00D2                     	ds	1
  2648  00D3                     exec_remote_cmd@j:	
  2649                           
  2650                           ; 1 bytes @ 0x33
  2651  00D3                     	ds	1
  2652  00D4                     exec_remote_cmd@i:	
  2653                           
  2654                           ; 1 bytes @ 0x34
  2655  00D4                     	ds	1
  2656  00D5                     exec_remote_cmd@status:	
  2657                           
  2658                           ; 1 bytes @ 0x35
  2659  00D5                     	ds	1
  2660  00D6                     exec_remote_cmd@data:	
  2661                           
  2662                           ; 1 bytes @ 0x36
  2663  00D6                     	ds	1
  2664  00D7                     exec_remote_cmd@buf:	
  2665                           
  2666                           ; 2 bytes @ 0x37
  2667  00D7                     	ds	2
  2668                           
  2669                           	psect	cstackCOMMON
  2670  0077                     __pcstackCOMMON:	
  2671  0077                     ?_isdigit:	
  2672  0077                     ?_I2C1_Stop:	
  2673                           ; 1 bit 
  2674                           
  2675  0077                     ??_I2C1_Stop:	
  2676                           ; 1 bytes @ 0x0
  2677                           
  2678  0077                     ?_I2C1_FunctionComplete:	
  2679                           ; 1 bytes @ 0x0
  2680                           
  2681  0077                     ??_I2C1_FunctionComplete:	
  2682                           ; 1 bytes @ 0x0
  2683                           
  2684  0077                     ?_OSCILLATOR_Initialize:	
  2685                           ; 1 bytes @ 0x0
  2686                           
  2687  0077                     ?_WDT_Initialize:	
  2688                           ; 1 bytes @ 0x0
  2689                           
  2690  0077                     ?_TMR0_Initialize:	
  2691                           ; 1 bytes @ 0x0
  2692                           
  2693  0077                     ?_PROTOCOL_Loop:	
  2694                           ; 1 bytes @ 0x0
  2695                           
  2696  0077                     ?_I2C1_Initialize:	
  2697                           ; 1 bytes @ 0x0
  2698                           
  2699  0077                     ?_I2C1_ISR:	
  2700                           ; 1 bytes @ 0x0
  2701                           
  2702  0077                     ?_I2C1_BusCollisionISR:	
  2703                           ; 1 bytes @ 0x0
  2704                           
  2705  0077                     ??_I2C1_BusCollisionISR:	
  2706                           ; 1 bytes @ 0x0
  2707                           
  2708  0077                     ?_DATAEE_ReadByte:	
  2709                           ; 1 bytes @ 0x0
  2710                           
  2711  0077                     ?_EUSART_Initialize:	
  2712                           ; 1 bytes @ 0x0
  2713                           
  2714  0077                     ?_EUSART_Read:	
  2715                           ; 1 bytes @ 0x0
  2716                           
  2717  0077                     ?_EUSART_Write:	
  2718                           ; 1 bytes @ 0x0
  2719                           
  2720  0077                     ?_putch:	
  2721                           ; 1 bytes @ 0x0
  2722                           
  2723  0077                     ?_EUSART_Transmit_ISR:	
  2724                           ; 1 bytes @ 0x0
  2725                           
  2726  0077                     ??_EUSART_Transmit_ISR:	
  2727                           ; 1 bytes @ 0x0
  2728                           
  2729  0077                     ?_EUSART_Receive_ISR:	
  2730                           ; 1 bytes @ 0x0
  2731                           
  2732  0077                     ??_EUSART_Receive_ISR:	
  2733                           ; 1 bytes @ 0x0
  2734                           
  2735  0077                     ?_PIN_MANAGER_Initialize:	
  2736                           ; 1 bytes @ 0x0
  2737                           
  2738  0077                     ?_INTERRUPT_InterruptManager:	
  2739                           ; 1 bytes @ 0x0
  2740                           
  2741  0077                     ?_SYSTEM_Initialize:	
  2742                           ; 1 bytes @ 0x0
  2743                           
  2744  0077                     ?_TMR0_HasOverflowOccured:	
  2745                           ; 1 bytes @ 0x0
  2746                           
  2747  0077                     ?_exec_remote_cmd:	
  2748                           ; 1 bytes @ 0x0
  2749                           
  2750  0077                     ?_init:	
  2751                           ; 1 bytes @ 0x0
  2752                           
  2753  0077                     ?_add_dev:	
  2754                           ; 1 bytes @ 0x0
  2755                           
  2756  0077                     ?_del_dev:	
  2757                           ; 1 bytes @ 0x0
  2758                           
  2759  0077                     ?_dev_map_iterator:	
  2760                           ; 1 bytes @ 0x0
  2761                           
  2762  0077                     ?_scan_dev:	
  2763                           ; 1 bytes @ 0x0
  2764                           
  2765  0077                     ?_check_plg:	
  2766                           ; 1 bytes @ 0x0
  2767                           
  2768  0077                     ?_detected:	
  2769                           ; 1 bytes @ 0x0
  2770                           
  2771  0077                     ?_print_dev_map:	
  2772                           ; 1 bytes @ 0x0
  2773                           
  2774  0077                     ?_sen:	
  2775                           ; 1 bytes @ 0x0
  2776                           
  2777  0077                     ?_one_shot_sen:	
  2778                           ; 1 bytes @ 0x0
  2779                           
  2780  0077                     ?_fetch:	
  2781                           ; 1 bytes @ 0x0
  2782                           
  2783  0077                     ?_tick_handler:	
  2784                           ; 1 bytes @ 0x0
  2785                           
  2786  0077                     ?_inv_handler:	
  2787                           ; 1 bytes @ 0x0
  2788                           
  2789  0077                     ?_put_cmd:	
  2790                           ; 1 bytes @ 0x0
  2791                           
  2792  0077                     ?_main:	
  2793                           ; 1 bytes @ 0x0
  2794                           
  2795  0077                     ?_PROTOCOL_Write_Device_Address:	
  2796                           ; 1 bytes @ 0x0
  2797                           
  2798  0077                     ?_PROTOCOL_Read_Device_Address:	
  2799                           ; 1 bytes @ 0x0
  2800                           
  2801  0077                     ?_PROTOCOL_STA:	
  2802                           ; 1 bytes @ 0x0
  2803                           
  2804  0077                     ?_PROTOCOL_STP:	
  2805                           ; 1 bytes @ 0x0
  2806                           
  2807  0077                     ?_PROTOCOL_SAV:	
  2808                           ; 1 bytes @ 0x0
  2809                           
  2810  0077                     ?_PROTOCOL_SET:	
  2811                           ; 1 bytes @ 0x0
  2812                           
  2813  0077                     ?_PROTOCOL_EXT:	
  2814                           ; 1 bytes @ 0x0
  2815                           
  2816                           
  2817                           ; 1 bytes @ 0x0
  2818  0077                     	ds	1
  2819  0078                     I2C1_Stop@completion_code:	
  2820                           
  2821                           ; 1 bytes @ 0x1
  2822  0078                     	ds	1
  2823  0079                     ??_I2C1_ISR:	
  2824                           
  2825                           ; 1 bytes @ 0x2
  2826  0079                     	ds	4
  2827  007D                     ??_INTERRUPT_InterruptManager:	
  2828                           
  2829                           ; 1 bytes @ 0x6
  2830  007D                     	ds	1
  2831                           
  2832                           	psect	cstackBANK0
  2833  0020                     __pcstackBANK0:	
  2834  0020                     ?_I2C1_MasterWriteTRBBuild:	
  2835  0020                     ?_I2C1_MasterTRBInsert:	
  2836                           ; 1 bytes @ 0x0
  2837                           
  2838  0020                     ?_I2C1_MasterReadTRBBuild:	
  2839                           ; 1 bytes @ 0x0
  2840                           
  2841  0020                     ??_OSCILLATOR_Initialize:	
  2842                           ; 1 bytes @ 0x0
  2843                           
  2844  0020                     ??_WDT_Initialize:	
  2845                           ; 1 bytes @ 0x0
  2846                           
  2847  0020                     ??_TMR0_Initialize:	
  2848                           ; 1 bytes @ 0x0
  2849                           
  2850  0020                     ?_PROTOCOL_Set_Extension_Handler:	
  2851                           ; 1 bytes @ 0x0
  2852                           
  2853  0020                     ?_PROTOCOL_Set_Tick_Handler:	
  2854                           ; 1 bytes @ 0x0
  2855                           
  2856  0020                     ??_isdigit:	
  2857                           ; 1 bytes @ 0x0
  2858                           
  2859  0020                     ??_I2C1_Initialize:	
  2860                           ; 1 bytes @ 0x0
  2861                           
  2862  0020                     ?_DATAEE_WriteByte:	
  2863                           ; 1 bytes @ 0x0
  2864                           
  2865  0020                     ??_DATAEE_ReadByte:	
  2866                           ; 1 bytes @ 0x0
  2867                           
  2868  0020                     ??_EUSART_Initialize:	
  2869                           ; 1 bytes @ 0x0
  2870                           
  2871  0020                     ??_EUSART_Read:	
  2872                           ; 1 bytes @ 0x0
  2873                           
  2874  0020                     ??_EUSART_Write:	
  2875                           ; 1 bytes @ 0x0
  2876                           
  2877  0020                     ??_PIN_MANAGER_Initialize:	
  2878                           ; 1 bytes @ 0x0
  2879                           
  2880  0020                     ??_TMR0_HasOverflowOccured:	
  2881                           ; 1 bytes @ 0x0
  2882                           
  2883  0020                     ??_dev_map_iterator:	
  2884                           ; 1 bytes @ 0x0
  2885                           
  2886  0020                     ??_PROTOCOL_Read_Device_Address:	
  2887                           ; 1 bytes @ 0x0
  2888                           
  2889  0020                     ??_PROTOCOL_STA:	
  2890                           ; 1 bytes @ 0x0
  2891                           
  2892  0020                     ??_PROTOCOL_STP:	
  2893                           ; 1 bytes @ 0x0
  2894                           
  2895  0020                     ??_PROTOCOL_SET:	
  2896                           ; 1 bytes @ 0x0
  2897                           
  2898  0020                     ?_strncmp:	
  2899                           ; 1 bytes @ 0x0
  2900                           
  2901  0020                     ?_concat:	
  2902                           ; 2 bytes @ 0x0
  2903                           
  2904  0020                     ?___wmul:	
  2905                           ; 2 bytes @ 0x0
  2906                           
  2907  0020                     ?___awdiv:	
  2908                           ; 2 bytes @ 0x0
  2909                           
  2910  0020                     ?___awmod:	
  2911                           ; 2 bytes @ 0x0
  2912                           
  2913  0020                     ?___lwdiv:	
  2914                           ; 2 bytes @ 0x0
  2915                           
  2916  0020                     I2C1_MasterTRBInsert@ptrb_list:	
  2917                           ; 2 bytes @ 0x0
  2918                           
  2919  0020                     I2C1_MasterWriteTRBBuild@pdata:	
  2920                           ; 1 bytes @ 0x0
  2921                           
  2922  0020                     DATAEE_WriteByte@bData:	
  2923                           ; 1 bytes @ 0x0
  2924                           
  2925  0020                     DATAEE_ReadByte@bAdd:	
  2926                           ; 1 bytes @ 0x0
  2927                           
  2928  0020                     concat@lsb:	
  2929                           ; 1 bytes @ 0x0
  2930                           
  2931  0020                     _isdigit$1459:	
  2932                           ; 1 bytes @ 0x0
  2933                           
  2934  0020                     I2C1_MasterReadTRBBuild@pdata:	
  2935                           ; 1 bytes @ 0x0
  2936                           
  2937  0020                     PROTOCOL_Set_Extension_Handler@extension_handler:	
  2938                           ; 2 bytes @ 0x0
  2939                           
  2940  0020                     PROTOCOL_Set_Tick_Handler@tick_handler:	
  2941                           ; 2 bytes @ 0x0
  2942                           
  2943  0020                     ___wmul@multiplier:	
  2944                           ; 2 bytes @ 0x0
  2945                           
  2946  0020                     ___awdiv@divisor:	
  2947                           ; 2 bytes @ 0x0
  2948                           
  2949  0020                     ___awmod@divisor:	
  2950                           ; 2 bytes @ 0x0
  2951                           
  2952  0020                     ___lwdiv@divisor:	
  2953                           ; 2 bytes @ 0x0
  2954                           
  2955  0020                     strncmp@s1:	
  2956                           ; 2 bytes @ 0x0
  2957                           
  2958                           
  2959                           ; 2 bytes @ 0x0
  2960  0020                     	ds	1
  2961  0021                     ?_PROTOCOL_Initialize:	
  2962  0021                     ??_DATAEE_WriteByte:	
  2963                           ; 1 bytes @ 0x1
  2964                           
  2965  0021                     ??_SYSTEM_Initialize:	
  2966                           ; 1 bytes @ 0x1
  2967                           
  2968  0021                     I2C1_MasterTRBInsert@pflag:	
  2969                           ; 1 bytes @ 0x1
  2970                           
  2971  0021                     I2C1_MasterWriteTRBBuild@length:	
  2972                           ; 1 bytes @ 0x1
  2973                           
  2974  0021                     DATAEE_WriteByte@bAdd:	
  2975                           ; 1 bytes @ 0x1
  2976                           
  2977  0021                     EUSART_Read@readValue:	
  2978                           ; 1 bytes @ 0x1
  2979                           
  2980  0021                     EUSART_Write@txData:	
  2981                           ; 1 bytes @ 0x1
  2982                           
  2983  0021                     PROTOCOL_SET@value_:	
  2984                           ; 1 bytes @ 0x1
  2985                           
  2986  0021                     isdigit@c:	
  2987                           ; 1 bytes @ 0x1
  2988                           
  2989  0021                     PROTOCOL_Initialize@device_id:	
  2990                           ; 1 bytes @ 0x1
  2991                           
  2992                           
  2993                           ; 2 bytes @ 0x1
  2994  0021                     	ds	1
  2995  0022                     ??_I2C1_MasterTRBInsert:	
  2996  0022                     ??_PROTOCOL_Set_Extension_Handler:	
  2997                           ; 1 bytes @ 0x2
  2998                           
  2999  0022                     ??_PROTOCOL_Set_Tick_Handler:	
  3000                           ; 1 bytes @ 0x2
  3001                           
  3002  0022                     ??_putch:	
  3003                           ; 1 bytes @ 0x2
  3004                           
  3005  0022                     ??_concat:	
  3006                           ; 1 bytes @ 0x2
  3007                           
  3008  0022                     I2C1_MasterReadTRBBuild@length:	
  3009                           ; 1 bytes @ 0x2
  3010                           
  3011  0022                     DATAEE_WriteByte@GIEBitValue:	
  3012                           ; 1 bytes @ 0x2
  3013                           
  3014  0022                     putch@txData:	
  3015                           ; 1 bytes @ 0x2
  3016                           
  3017  0022                     I2C1_MasterWriteTRBBuild@address:	
  3018                           ; 1 bytes @ 0x2
  3019                           
  3020  0022                     ___wmul@multiplicand:	
  3021                           ; 2 bytes @ 0x2
  3022                           
  3023  0022                     ___awdiv@dividend:	
  3024                           ; 2 bytes @ 0x2
  3025                           
  3026  0022                     ___awmod@dividend:	
  3027                           ; 2 bytes @ 0x2
  3028                           
  3029  0022                     ___lwdiv@dividend:	
  3030                           ; 2 bytes @ 0x2
  3031                           
  3032  0022                     strncmp@s2:	
  3033                           ; 2 bytes @ 0x2
  3034                           
  3035                           
  3036                           ; 2 bytes @ 0x2
  3037  0022                     	ds	1
  3038  0023                     ??_PROTOCOL_Write_Device_Address:	
  3039  0023                     ??_PROTOCOL_SAV:	
  3040                           ; 1 bytes @ 0x3
  3041                           
  3042  0023                     I2C1_MasterTRBInsert@count:	
  3043                           ; 1 bytes @ 0x3
  3044                           
  3045  0023                     PROTOCOL_Initialize@start_handler:	
  3046                           ; 1 bytes @ 0x3
  3047                           
  3048  0023                     I2C1_MasterReadTRBBuild@address:	
  3049                           ; 1 bytes @ 0x3
  3050                           
  3051                           
  3052                           ; 2 bytes @ 0x3
  3053  0023                     	ds	1
  3054  0024                     ??_I2C1_MasterWriteTRBBuild:	
  3055  0024                     ??___wmul:	
  3056                           ; 1 bytes @ 0x4
  3057                           
  3058  0024                     ??___awdiv:	
  3059                           ; 1 bytes @ 0x4
  3060                           
  3061  0024                     ??___awmod:	
  3062                           ; 1 bytes @ 0x4
  3063                           
  3064  0024                     ??___lwdiv:	
  3065                           ; 1 bytes @ 0x4
  3066                           
  3067  0024                     PROTOCOL_Initialize@stop_handler:	
  3068                           ; 1 bytes @ 0x4
  3069                           
  3070  0024                     PROTOCOL_Write_Device_Address@device_id_i2c:	
  3071                           ; 1 bytes @ 0x4
  3072                           
  3073  0024                     ___wmul@product:	
  3074                           ; 1 bytes @ 0x4
  3075                           
  3076  0024                     strncmp@len:	
  3077                           ; 2 bytes @ 0x4
  3078                           
  3079                           
  3080                           ; 2 bytes @ 0x4
  3081  0024                     	ds	1
  3082  0025                     ??_I2C1_MasterReadTRBBuild:	
  3083  0025                     PROTOCOL_Initialize@set_handler:	
  3084                           ; 1 bytes @ 0x5
  3085                           
  3086  0025                     ___awdiv@counter:	
  3087                           ; 1 bytes @ 0x5
  3088                           
  3089  0025                     ___awmod@counter:	
  3090                           ; 1 bytes @ 0x5
  3091                           
  3092  0025                     ___lwdiv@counter:	
  3093                           ; 1 bytes @ 0x5
  3094                           
  3095                           
  3096                           ; 1 bytes @ 0x5
  3097  0025                     	ds	1
  3098  0026                     ??_strncmp:	
  3099  0026                     ?_atoi:	
  3100                           ; 1 bytes @ 0x6
  3101                           
  3102  0026                     ?_strcpy:	
  3103                           ; 2 bytes @ 0x6
  3104                           
  3105  0026                     I2C1_MasterWriteTRBBuild@ptrb:	
  3106                           ; 2 bytes @ 0x6
  3107                           
  3108  0026                     dev_map_iterator@exist:	
  3109                           ; 1 bytes @ 0x6
  3110                           
  3111  0026                     ___awdiv@sign:	
  3112                           ; 1 bytes @ 0x6
  3113                           
  3114  0026                     ___awmod@sign:	
  3115                           ; 1 bytes @ 0x6
  3116                           
  3117  0026                     PROTOCOL_Initialize@inv_handler:	
  3118                           ; 1 bytes @ 0x6
  3119                           
  3120  0026                     atoi@s:	
  3121                           ; 2 bytes @ 0x6
  3122                           
  3123  0026                     ___lwdiv@quotient:	
  3124                           ; 2 bytes @ 0x6
  3125                           
  3126  0026                     strcpy@to:	
  3127                           ; 2 bytes @ 0x6
  3128                           
  3129                           
  3130                           ; 2 bytes @ 0x6
  3131  0026                     	ds	1
  3132  0027                     ?_I2C1_MasterWrite:	
  3133  0027                     ?_abs:	
  3134                           ; 1 bytes @ 0x7
  3135                           
  3136  0027                     I2C1_MasterWrite@length:	
  3137                           ; 2 bytes @ 0x7
  3138                           
  3139  0027                     I2C1_MasterReadTRBBuild@ptrb:	
  3140                           ; 1 bytes @ 0x7
  3141                           
  3142  0027                     dev_map_iterator@dev_addr:	
  3143                           ; 1 bytes @ 0x7
  3144                           
  3145  0027                     concat@msb:	
  3146                           ; 1 bytes @ 0x7
  3147                           
  3148  0027                     abs@a:	
  3149                           ; 1 bytes @ 0x7
  3150                           
  3151  0027                     ___awdiv@quotient:	
  3152                           ; 2 bytes @ 0x7
  3153                           
  3154                           
  3155                           ; 2 bytes @ 0x7
  3156  0027                     	ds	1
  3157  0028                     ??_atoi:	
  3158  0028                     ?_I2C1_MasterRead:	
  3159                           ; 1 bytes @ 0x8
  3160                           
  3161  0028                     ?___lwmod:	
  3162                           ; 1 bytes @ 0x8
  3163                           
  3164  0028                     PROTOCOL_Initialize@scaler:	
  3165                           ; 2 bytes @ 0x8
  3166                           
  3167  0028                     strcpy@from:	
  3168                           ; 1 bytes @ 0x8
  3169                           
  3170  0028                     I2C1_MasterWrite@address:	
  3171                           ; 1 bytes @ 0x8
  3172                           
  3173  0028                     I2C1_MasterRead@pdata:	
  3174                           ; 2 bytes @ 0x8
  3175                           
  3176  0028                     ___lwmod@divisor:	
  3177                           ; 2 bytes @ 0x8
  3178                           
  3179                           
  3180                           ; 2 bytes @ 0x8
  3181  0028                     	ds	1
  3182  0029                     ??_strcpy:	
  3183  0029                     ??_PROTOCOL_Initialize:	
  3184                           ; 1 bytes @ 0x9
  3185                           
  3186  0029                     ??_abs:	
  3187                           ; 1 bytes @ 0x9
  3188                           
  3189  0029                     ??_init:	
  3190                           ; 1 bytes @ 0x9
  3191                           
  3192  0029                     ??_add_dev:	
  3193                           ; 1 bytes @ 0x9
  3194                           
  3195  0029                     ??_del_dev:	
  3196                           ; 1 bytes @ 0x9
  3197                           
  3198  0029                     ??_detected:	
  3199                           ; 1 bytes @ 0x9
  3200                           
  3201                           
  3202                           ; 1 bytes @ 0x9
  3203  0029                     	ds	1
  3204  002A                     I2C1_MasterWrite@pflag:	
  3205  002A                     I2C1_MasterRead@length:	
  3206                           ; 1 bytes @ 0xA
  3207                           
  3208  002A                     atoi@sign:	
  3209                           ; 1 bytes @ 0xA
  3210                           
  3211  002A                     ___lwmod@dividend:	
  3212                           ; 1 bytes @ 0xA
  3213                           
  3214  002A                     strcpy@cp:	
  3215                           ; 2 bytes @ 0xA
  3216                           
  3217                           
  3218                           ; 2 bytes @ 0xA
  3219  002A                     	ds	1
  3220  002B                     ??_I2C1_MasterWrite:	
  3221  002B                     I2C1_MasterRead@address:	
  3222                           ; 1 bytes @ 0xB
  3223                           
  3224  002B                     atoi@a:	
  3225                           ; 2 bytes @ 0xB
  3226                           
  3227                           
  3228                           ; 2 bytes @ 0xB
  3229  002B                     	ds	1
  3230  002C                     ??_put_cmd:	
  3231  002C                     ??___lwmod:	
  3232                           ; 1 bytes @ 0xC
  3233                           
  3234  002C                     add_dev@x:	
  3235                           ; 1 bytes @ 0xC
  3236                           
  3237  002C                     del_dev@x:	
  3238                           ; 1 bytes @ 0xC
  3239                           
  3240  002C                     detected@y:	
  3241                           ; 1 bytes @ 0xC
  3242                           
  3243                           
  3244                           ; 1 bytes @ 0xC
  3245  002C                     	ds	1
  3246  002D                     I2C1_MasterWrite@pdata:	
  3247  002D                     I2C1_MasterRead@pflag:	
  3248                           ; 1 bytes @ 0xD
  3249                           
  3250  002D                     add_dev@old_map:	
  3251                           ; 1 bytes @ 0xD
  3252                           
  3253  002D                     del_dev@old_map:	
  3254                           ; 1 bytes @ 0xD
  3255                           
  3256  002D                     detected@x:	
  3257                           ; 1 bytes @ 0xD
  3258                           
  3259  002D                     ___lwmod@counter:	
  3260                           ; 1 bytes @ 0xD
  3261                           
  3262                           
  3263                           ; 1 bytes @ 0xD
  3264  002D                     	ds	1
  3265  002E                     ?_i2c1_write_no_data:	
  3266  002E                     ?_i2c1_write:	
  3267                           ; 1 bytes @ 0xE
  3268                           
  3269  002E                     ??_I2C1_MasterRead:	
  3270                           ; 1 bytes @ 0xE
  3271                           
  3272  002E                     ?_printf:	
  3273                           ; 1 bytes @ 0xE
  3274                           
  3275  002E                     add_dev@new_map:	
  3276                           ; 2 bytes @ 0xE
  3277                           
  3278  002E                     del_dev@new_map:	
  3279                           ; 1 bytes @ 0xE
  3280                           
  3281  002E                     detected@exist:	
  3282                           ; 1 bytes @ 0xE
  3283                           
  3284  002E                     i2c1_write@dev_addr:	
  3285                           ; 1 bytes @ 0xE
  3286                           
  3287  002E                     i2c1_write_no_data@dev_addr:	
  3288                           ; 2 bytes @ 0xE
  3289                           
  3290  002E                     printf@f:	
  3291                           ; 2 bytes @ 0xE
  3292                           
  3293                           
  3294                           ; 2 bytes @ 0xE
  3295  002E                     	ds	1
  3296  002F                     init@dev_addr:	
  3297  002F                     add_dev@y:	
  3298                           ; 1 bytes @ 0xF
  3299                           
  3300  002F                     del_dev@y:	
  3301                           ; 1 bytes @ 0xF
  3302                           
  3303  002F                     detected@dev_addr:	
  3304                           ; 1 bytes @ 0xF
  3305                           
  3306                           
  3307                           ; 1 bytes @ 0xF
  3308  002F                     	ds	1
  3309  0030                     ?_i2c1_read:	
  3310  0030                     init@y:	
  3311                           ; 1 bytes @ 0x10
  3312                           
  3313  0030                     add_dev@dev_addr:	
  3314                           ; 1 bytes @ 0x10
  3315                           
  3316  0030                     del_dev@dev_addr:	
  3317                           ; 1 bytes @ 0x10
  3318                           
  3319  0030                     i2c1_write@pbuf:	
  3320                           ; 1 bytes @ 0x10
  3321                           
  3322  0030                     i2c1_write_no_data@reg_addr:	
  3323                           ; 1 bytes @ 0x10
  3324                           
  3325  0030                     i2c1_read@dev_addr:	
  3326                           ; 1 bytes @ 0x10
  3327                           
  3328                           
  3329                           ; 2 bytes @ 0x10
  3330  0030                     	ds	1
  3331  0031                     ??_i2c1_write_no_data:	
  3332  0031                     init@i:	
  3333                           ; 1 bytes @ 0x11
  3334                           
  3335  0031                     put_cmd@buf:	
  3336                           ; 1 bytes @ 0x11
  3337                           
  3338  0031                     i2c1_write@len:	
  3339                           ; 1 bytes @ 0x11
  3340                           
  3341                           
  3342                           ; 1 bytes @ 0x11
  3343  0031                     	ds	1
  3344  0032                     ??_i2c1_write:	
  3345  0032                     i2c1_read@reg_addr:	
  3346                           ; 1 bytes @ 0x12
  3347                           
  3348  0032                     i2c1_write_no_data@write_status:	
  3349                           ; 1 bytes @ 0x12
  3350                           
  3351                           
  3352                           ; 1 bytes @ 0x12
  3353  0032                     	ds	1
  3354  0033                     i2c1_write_no_data@buf:	
  3355  0033                     i2c1_read@pbuf:	
  3356                           ; 1 bytes @ 0x13
  3357                           
  3358                           
  3359                           ; 2 bytes @ 0x13
  3360  0033                     	ds	1
  3361  0034                     ??_printf:	
  3362  0034                     i2c1_write@write_status:	
  3363                           ; 1 bytes @ 0x14
  3364                           
  3365  0034                     i2c1_write_no_data@status:	
  3366                           ; 1 bytes @ 0x14
  3367                           
  3368                           
  3369                           ; 1 bytes @ 0x14
  3370  0034                     	ds	1
  3371  0035                     i2c1_write@status:	
  3372  0035                     i2c1_read@len:	
  3373                           ; 1 bytes @ 0x15
  3374                           
  3375                           
  3376                           ; 1 bytes @ 0x15
  3377  0035                     	ds	1
  3378  0036                     ??_i2c1_read:	
  3379                           
  3380                           ; 1 bytes @ 0x16
  3381  0036                     	ds	2
  3382  0038                     i2c1_read@read_status:	
  3383  0038                     printf@prec:	
  3384                           ; 1 bytes @ 0x18
  3385                           
  3386                           
  3387                           ; 1 bytes @ 0x18
  3388  0038                     	ds	1
  3389  0039                     i2c1_read@reg:	
  3390  0039                     printf@cp:	
  3391                           ; 1 bytes @ 0x19
  3392                           
  3393                           
  3394                           ; 2 bytes @ 0x19
  3395  0039                     	ds	1
  3396  003A                     i2c1_read@status:	
  3397                           
  3398                           ; 1 bytes @ 0x1A
  3399  003A                     	ds	1
  3400  003B                     ??_scan_dev:	
  3401  003B                     printf@ap:	
  3402                           ; 1 bytes @ 0x1B
  3403                           
  3404                           
  3405                           ; 1 bytes @ 0x1B
  3406  003B                     	ds	1
  3407  003C                     printf@val:	
  3408                           
  3409                           ; 2 bytes @ 0x1C
  3410  003C                     	ds	2
  3411  003E                     scan_dev@status:	
  3412  003E                     printf@len:	
  3413                           ; 1 bytes @ 0x1E
  3414                           
  3415                           
  3416                           ; 2 bytes @ 0x1E
  3417  003E                     	ds	1
  3418  003F                     scan_dev@dev_addr:	
  3419                           
  3420                           ; 1 bytes @ 0x1F
  3421  003F                     	ds	1
  3422  0040                     ??_check_plg:	
  3423  0040                     printf@flag:	
  3424                           ; 1 bytes @ 0x20
  3425                           
  3426                           
  3427                           ; 1 bytes @ 0x20
  3428  0040                     	ds	1
  3429  0041                     printf@width:	
  3430                           
  3431                           ; 2 bytes @ 0x21
  3432  0041                     	ds	1
  3433  0042                     check_plg@status:	
  3434                           
  3435                           ; 1 bytes @ 0x22
  3436  0042                     	ds	1
  3437  0043                     printf@c:	
  3438                           
  3439                           ; 1 bytes @ 0x23
  3440  0043                     	ds	1
  3441  0044                     ?_PROTOCOL_Print_TLV:	
  3442  0044                     ??_exec_remote_cmd:	
  3443                           ; 1 bytes @ 0x24
  3444                           
  3445  0044                     ??_print_dev_map:	
  3446                           ; 1 bytes @ 0x24
  3447                           
  3448  0044                     PROTOCOL_Print_TLV@type:	
  3449                           ; 1 bytes @ 0x24
  3450                           
  3451                           
  3452                           ; 1 bytes @ 0x24
  3453  0044                     	ds	1
  3454  0045                     PROTOCOL_Print_TLV@length:	
  3455                           
  3456                           ; 1 bytes @ 0x25
  3457  0045                     	ds	1
  3458  0046                     print_dev_map@i:	
  3459  0046                     PROTOCOL_Print_TLV@pbuffer:	
  3460                           ; 1 bytes @ 0x26
  3461                           
  3462                           
  3463                           ; 1 bytes @ 0x26
  3464  0046                     	ds	1
  3465  0047                     ??_PROTOCOL_Print_TLV:	
  3466  0047                     print_dev_map@len:	
  3467                           ; 1 bytes @ 0x27
  3468                           
  3469                           
  3470                           ; 1 bytes @ 0x27
  3471  0047                     	ds	2
  3472  0049                     ??_tick_handler:	
  3473                           
  3474                           ; 1 bytes @ 0x29
  3475  0049                     	ds	1
  3476  004A                     PROTOCOL_Print_TLV@dev_addr:	
  3477                           
  3478                           ; 1 bytes @ 0x2A
  3479  004A                     	ds	1
  3480  004B                     PROTOCOL_Print_TLV@v:	
  3481                           
  3482                           ; 2 bytes @ 0x2B
  3483  004B                     	ds	2
  3484  004D                     ??_sen:	
  3485                           
  3486                           ; 1 bytes @ 0x2D
  3487  004D                     	ds	5
  3488  0052                     sen@type:	
  3489                           
  3490                           ; 1 bytes @ 0x32
  3491  0052                     	ds	1
  3492  0053                     sen@length:	
  3493                           
  3494                           ; 1 bytes @ 0x33
  3495  0053                     	ds	1
  3496  0054                     sen@status:	
  3497                           
  3498                           ; 1 bytes @ 0x34
  3499  0054                     	ds	1
  3500  0055                     sen@dev_addr:	
  3501                           
  3502                           ; 1 bytes @ 0x35
  3503  0055                     	ds	1
  3504  0056                     ??_one_shot_sen:	
  3505  0056                     ??_fetch:	
  3506                           ; 1 bytes @ 0x36
  3507                           
  3508                           
  3509                           ; 1 bytes @ 0x36
  3510  0056                     	ds	3
  3511  0059                     one_shot_sen@status:	
  3512  0059                     fetch@status:	
  3513                           ; 1 bytes @ 0x39
  3514                           
  3515                           
  3516                           ; 1 bytes @ 0x39
  3517  0059                     	ds	1
  3518  005A                     one_shot_sen@dev_addr:	
  3519  005A                     fetch@sch:	
  3520                           ; 1 bytes @ 0x3A
  3521                           
  3522                           
  3523                           ; 1 bytes @ 0x3A
  3524  005A                     	ds	1
  3525  005B                     ?_command_handler:	
  3526  005B                     fetch@pos:	
  3527                           ; 1 bytes @ 0x3B
  3528                           
  3529  005B                     command_handler@buf:	
  3530                           ; 1 bytes @ 0x3B
  3531                           
  3532                           
  3533                           ; 1 bytes @ 0x3B
  3534  005B                     	ds	1
  3535  005C                     ??_command_handler:	
  3536  005C                     fetch@dev_addr:	
  3537                           ; 1 bytes @ 0x3C
  3538                           
  3539                           
  3540                           ; 1 bytes @ 0x3C
  3541  005C                     	ds	1
  3542  005D                     ??_inv_handler:	
  3543                           
  3544                           ; 1 bytes @ 0x3D
  3545  005D                     	ds	6
  3546  0063                     command_handler@dev_addr:	
  3547                           
  3548                           ; 1 bytes @ 0x43
  3549  0063                     	ds	1
  3550  0064                     command_handler@i:	
  3551                           
  3552                           ; 1 bytes @ 0x44
  3553  0064                     	ds	1
  3554  0065                     ??_PROTOCOL_EXT:	
  3555                           
  3556                           ; 1 bytes @ 0x45
  3557  0065                     	ds	1
  3558  0066                     PROTOCOL_EXT@char_buf:	
  3559                           
  3560                           ; 1 bytes @ 0x46
  3561  0066                     	ds	1
  3562  0067                     ??_PROTOCOL_Loop:	
  3563                           
  3564                           ; 1 bytes @ 0x47
  3565  0067                     	ds	2
  3566  0069                     PROTOCOL_Loop@c:	
  3567                           
  3568                           ; 1 bytes @ 0x49
  3569  0069                     	ds	1
  3570  006A                     PROTOCOL_Loop@device_address:	
  3571                           
  3572                           ; 1 bytes @ 0x4A
  3573  006A                     	ds	1
  3574  006B                     ??_main:	
  3575                           
  3576                           	psect	maintext
  3577  1537                     __pmaintext:	
  3578                           ; 1 bytes @ 0x4B
  3579 ;;
  3580 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3581 ;;
  3582 ;; *************** function _main *****************
  3583 ;; Defined at:
  3584 ;;		line 407 in file "main.c"
  3585 ;; Parameters:    Size  Location     Type
  3586 ;;		None
  3587 ;; Auto vars:     Size  Location     Type
  3588 ;;		None
  3589 ;; Return value:  Size  Location     Type
  3590 ;;                  1    wreg      void 
  3591 ;; Registers used:
  3592 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3593 ;; Tracked objects:
  3594 ;;		On entry : B1F/0
  3595 ;;		On exit  : 0/0
  3596 ;;		Unchanged: 0/0
  3597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3599 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3601 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3602 ;;Total ram usage:        0 bytes
  3603 ;; Hardware stack levels required when called:   12
  3604 ;; This function calls:
  3605 ;;		_PROTOCOL_Initialize
  3606 ;;		_PROTOCOL_Loop
  3607 ;;		_PROTOCOL_Set_Extension_Handler
  3608 ;;		_PROTOCOL_Set_Tick_Handler
  3609 ;;		_SYSTEM_Initialize
  3610 ;;		_init
  3611 ;; This function is called by:
  3612 ;;		Startup code after reset
  3613 ;; This function uses a non-reentrant model
  3614 ;;
  3615                           
  3616                           
  3617                           ;psect for function _main
  3618  1537                     _main:	
  3619                           
  3620                           ;main.c: 409: init();
  3621                           
  3622                           ;incstack = 0
  3623                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3624  1537  318A  2254  3195   	fcall	_init
  3625                           
  3626                           ;main.c: 411: SYSTEM_Initialize();
  3627  153A  3192  2296  3195   	fcall	_SYSTEM_Initialize
  3628                           
  3629                           ;main.c: 412: (INTCONbits.GIE = 1);
  3630  153D  178B               	bsf	11,7	;volatile
  3631                           
  3632                           ;main.c: 413: (INTCONbits.PEIE = 1);
  3633  153E  170B               	bsf	11,6	;volatile
  3634                           
  3635                           ;main.c: 415: PROTOCOL_Initialize("BACKPLANE-MASTER", (0), (0), (0), inv_handler, 1);
  3636  153F  309E               	movlw	low (STR_33| (0+32768))
  3637  1540  0020               	movlb	0	; select bank0
  3638  1541  00A1               	movwf	PROTOCOL_Initialize@device_id
  3639  1542  3090               	movlw	high (STR_33| (0+32768))
  3640  1543  00A2               	movwf	PROTOCOL_Initialize@device_id+1
  3641  1544  01A3               	clrf	PROTOCOL_Initialize@start_handler
  3642  1545  01A4               	clrf	PROTOCOL_Initialize@stop_handler
  3643  1546  01A5               	clrf	PROTOCOL_Initialize@set_handler
  3644  1547  30CE               	movlw	low _inv_handler
  3645  1548  00A6               	movwf	PROTOCOL_Initialize@inv_handler
  3646  1549  300A               	movlw	high _inv_handler
  3647  154A  00A7               	movwf	PROTOCOL_Initialize@inv_handler+1
  3648  154B  01A8               	clrf	PROTOCOL_Initialize@scaler
  3649  154C  0AA8               	incf	PROTOCOL_Initialize@scaler,f
  3650  154D  3188  2093  3195   	fcall	_PROTOCOL_Initialize
  3651                           
  3652                           ;main.c: 416: PROTOCOL_Set_Extension_Handler(command_handler);
  3653  1550  303E               	movlw	low _command_handler
  3654  1551  0020               	movlb	0	; select bank0
  3655  1552  00A0               	movwf	PROTOCOL_Set_Extension_Handler@extension_handler
  3656  1553  300E               	movlw	high _command_handler
  3657  1554  00A1               	movwf	PROTOCOL_Set_Extension_Handler@extension_handler+1
  3658  1555  3192  2205  3195   	fcall	_PROTOCOL_Set_Extension_Handler
  3659                           
  3660                           ;main.c: 417: PROTOCOL_Set_Tick_Handler(tick_handler);
  3661  1558  301A               	movlw	low _tick_handler
  3662  1559  0020               	movlb	0	; select bank0
  3663  155A  00A0               	movwf	PROTOCOL_Set_Tick_Handler@tick_handler
  3664  155B  3017               	movlw	high _tick_handler
  3665  155C  00A1               	movwf	PROTOCOL_Set_Tick_Handler@tick_handler+1
  3666  155D  3192  220E  3195   	fcall	_PROTOCOL_Set_Tick_Handler
  3667                           
  3668                           ;main.c: 418: PROTOCOL_Loop();
  3669  1560  318C  24A0         	fcall	_PROTOCOL_Loop
  3670  1562  3180  283C         	ljmp	start
  3671  1564                     __end_of_main:	
  3672                           
  3673                           	psect	text1
  3674  0A54                     __ptext1:	
  3675 ;; *************** function _init *****************
  3676 ;; Defined at:
  3677 ;;		line 99 in file "main.c"
  3678 ;; Parameters:    Size  Location     Type
  3679 ;;		None
  3680 ;; Auto vars:     Size  Location     Type
  3681 ;;  i               1   17[BANK0 ] unsigned char 
  3682 ;;  y               1   16[BANK0 ] unsigned char 
  3683 ;;  dev_addr        1   15[BANK0 ] unsigned char 
  3684 ;;  k               1    0        unsigned char 
  3685 ;;  j               1    0        unsigned char 
  3686 ;; Return value:  Size  Location     Type
  3687 ;;                  1    wreg      void 
  3688 ;; Registers used:
  3689 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3690 ;; Tracked objects:
  3691 ;;		On entry : 0/0
  3692 ;;		On exit  : 0/0
  3693 ;;		Unchanged: 0/0
  3694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3696 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3697 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3698 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3699 ;;Total ram usage:        9 bytes
  3700 ;; Hardware stack levels used:    1
  3701 ;; Hardware stack levels required when called:    4
  3702 ;; This function calls:
  3703 ;;		_DATAEE_ReadByte
  3704 ;;		___awdiv
  3705 ;;		___wmul
  3706 ;; This function is called by:
  3707 ;;		_main
  3708 ;; This function uses a non-reentrant model
  3709 ;;
  3710                           
  3711                           
  3712                           ;psect for function _init
  3713  0A54                     _init:	
  3714                           
  3715                           ;main.c: 100: uint8_t y, i, j, k, dev_addr;
  3716                           ;main.c: 103: for (y=0; y<MAX_Y; y++) {
  3717                           
  3718                           ;incstack = 0
  3719                           ; Regs used in _init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3720  0A54  0020               	movlb	0	; select bank0
  3721  0A55  01B0               	clrf	init@y
  3722  0A56  300A               	movlw	low (_MAX_Y| (0+32768))
  3723  0A57  0084               	movwf	4
  3724  0A58  3090               	movlw	high (_MAX_Y| (0+32768))
  3725  0A59  0085               	movwf	5
  3726  0A5A  0800               	movf	0,w	;code access
  3727  0A5B  0230               	subwf	init@y,w
  3728  0A5C  1803               	btfsc	3,0
  3729  0A5D  2A70               	goto	l5998
  3730  0A5E                     l5992:	
  3731                           
  3732                           ;main.c: 104: dev_map[y] = 0;
  3733  0A5E  0830               	movf	init@y,w
  3734  0A5F  3E20               	addlw	(low (_dev_map| (0+256)))& (0+255)
  3735  0A60  0086               	movwf	6
  3736  0A61  3001               	movlw	1	; select bank2/3
  3737  0A62  0087               	movwf	7
  3738  0A63  0181               	clrf	1
  3739  0A64  3001               	movlw	1
  3740  0A65  00A9               	movwf	??_init
  3741  0A66  0829               	movf	??_init,w
  3742  0A67  07B0               	addwf	init@y,f
  3743  0A68  300A               	movlw	low (_MAX_Y| (0+32768))
  3744  0A69  0084               	movwf	4
  3745  0A6A  3090               	movlw	high (_MAX_Y| (0+32768))
  3746  0A6B  0085               	movwf	5
  3747  0A6C  0800               	movf	0,w	;code access
  3748  0A6D  0230               	subwf	init@y,w
  3749  0A6E  1C03               	skipc
  3750  0A6F  2A5E               	goto	l5992
  3751  0A70                     l5998:	
  3752                           
  3753                           ;main.c: 105: }
  3754                           ;main.c: 108: for (i=0; i<4; i++) cmd_buf[i][0] = '\0';
  3755  0A70  01B1               	clrf	init@i
  3756  0A71  3004               	movlw	4
  3757  0A72  0231               	subwf	init@i,w
  3758  0A73  1803               	btfsc	3,0
  3759  0A74  2A97               	goto	l6010
  3760  0A75                     l6004:	
  3761  0A75  0831               	movf	init@i,w
  3762  0A76  00A9               	movwf	??_init
  3763  0A77  01AA               	clrf	??_init+1
  3764  0A78  0829               	movf	??_init,w
  3765  0A79  00A0               	movwf	___wmul@multiplier
  3766  0A7A  082A               	movf	??_init+1,w
  3767  0A7B  00A1               	movwf	___wmul@multiplier+1
  3768  0A7C  3030               	movlw	48
  3769  0A7D  00A2               	movwf	___wmul@multiplicand
  3770  0A7E  3000               	movlw	0
  3771  0A7F  00A3               	movwf	___wmul@multiplicand+1
  3772  0A80  3193  2357  318A   	fcall	___wmul
  3773  0A83  3030               	movlw	48
  3774  0A84  0020               	movlb	0	; select bank0
  3775  0A85  00AB               	movwf	??_init+2
  3776  0A86  3023               	movlw	35
  3777  0A87  00AC               	movwf	??_init+3
  3778  0A88  0820               	movf	?___wmul,w
  3779  0A89  072B               	addwf	??_init+2,w
  3780  0A8A  0086               	movwf	6
  3781  0A8B  0821               	movf	?___wmul+1,w
  3782  0A8C  3D2C               	addwfc	??_init+3,w
  3783  0A8D  0087               	movwf	7
  3784  0A8E  0181               	clrf	1
  3785  0A8F  3001               	movlw	1
  3786  0A90  00A9               	movwf	??_init
  3787  0A91  0829               	movf	??_init,w
  3788  0A92  07B1               	addwf	init@i,f
  3789  0A93  3004               	movlw	4
  3790  0A94  0231               	subwf	init@i,w
  3791  0A95  1C03               	skipc
  3792  0A96  2A75               	goto	l6004
  3793  0A97                     l6010:	
  3794                           
  3795                           ;main.c: 111: for (i=0; i<28; i++) {
  3796  0A97  01B1               	clrf	init@i
  3797  0A98                     L1:	
  3798  0A98  301C               	movlw	28
  3799  0A99  0231               	subwf	init@i,w
  3800  0A9A  1803               	btfsc	3,0
  3801  0A9B  0008               	return
  3802                           
  3803                           ;main.c: 112: dev_addr = DATAEE_ReadByte(1+i+1);
  3804  0A9C  0831               	movf	init@i,w
  3805  0A9D  3E02               	addlw	2
  3806  0A9E  3192  2238  318A   	fcall	_DATAEE_ReadByte
  3807  0AA1  0020               	movlb	0	; select bank0
  3808  0AA2  00A9               	movwf	??_init
  3809  0AA3  0829               	movf	??_init,w
  3810  0AA4  00AF               	movwf	init@dev_addr
  3811                           
  3812                           ;main.c: 113: schedule[i/4][i%4] = dev_addr;
  3813  0AA5  082F               	movf	init@dev_addr,w
  3814  0AA6  00A9               	movwf	??_init
  3815  0AA7  3004               	movlw	4
  3816  0AA8  00A0               	movwf	___awdiv@divisor
  3817  0AA9  3000               	movlw	0
  3818  0AAA  00A1               	movwf	___awdiv@divisor+1
  3819  0AAB  0831               	movf	init@i,w
  3820  0AAC  00AA               	movwf	??_init+1
  3821  0AAD  01AB               	clrf	??_init+2
  3822  0AAE  082A               	movf	??_init+1,w
  3823  0AAF  00A2               	movwf	___awdiv@dividend
  3824  0AB0  082B               	movf	??_init+2,w
  3825  0AB1  00A3               	movwf	___awdiv@dividend+1
  3826  0AB2  3188  20E5  318A   	fcall	___awdiv
  3827  0AB5  0020               	movlb	0	; select bank0
  3828  0AB6  0820               	movf	?___awdiv,w
  3829  0AB7  00AC               	movwf	??_init+3
  3830  0AB8  3002               	movlw	2
  3831  0AB9                     u7065:	
  3832  0AB9  35AC               	lslf	??_init+3,f
  3833  0ABA  0B89               	decfsz	9,f
  3834  0ABB  2AB9               	goto	u7065
  3835  0ABC  30A0               	movlw	(low (_schedule| (0+256)))& (0+255)
  3836  0ABD  072C               	addwf	??_init+3,w
  3837  0ABE  00AD               	movwf	??_init+4
  3838  0ABF  0831               	movf	init@i,w
  3839  0AC0  3903               	andlw	3
  3840  0AC1  072D               	addwf	??_init+4,w
  3841  0AC2  00AE               	movwf	??_init+5
  3842  0AC3  082E               	movf	??_init+5,w
  3843  0AC4  0086               	movwf	6
  3844  0AC5  3001               	movlw	1	; select bank3/4
  3845  0AC6  0087               	movwf	7
  3846  0AC7  0829               	movf	??_init,w
  3847  0AC8  0081               	movwf	1
  3848  0AC9  3001               	movlw	1
  3849  0ACA  00A9               	movwf	??_init
  3850  0ACB  0829               	movf	??_init,w
  3851  0ACC  07B1               	addwf	init@i,f
  3852  0ACD  2A98               	goto	L1
  3853  0ACE                     __end_of_init:	
  3854                           
  3855                           	psect	text2
  3856  1296                     __ptext2:	
  3857 ;; *************** function _SYSTEM_Initialize *****************
  3858 ;; Defined at:
  3859 ;;		line 69 in file "mcc_generated_files/mcc.c"
  3860 ;; Parameters:    Size  Location     Type
  3861 ;;		None
  3862 ;; Auto vars:     Size  Location     Type
  3863 ;;		None
  3864 ;; Return value:  Size  Location     Type
  3865 ;;                  1    wreg      void 
  3866 ;; Registers used:
  3867 ;;		wreg, status,2, status,0, pclath, cstack
  3868 ;; Tracked objects:
  3869 ;;		On entry : 0/0
  3870 ;;		On exit  : 0/0
  3871 ;;		Unchanged: 0/0
  3872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3876 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3877 ;;Total ram usage:        0 bytes
  3878 ;; Hardware stack levels used:    1
  3879 ;; Hardware stack levels required when called:    4
  3880 ;; This function calls:
  3881 ;;		_EUSART_Initialize
  3882 ;;		_I2C1_Initialize
  3883 ;;		_OSCILLATOR_Initialize
  3884 ;;		_PIN_MANAGER_Initialize
  3885 ;;		_TMR0_Initialize
  3886 ;;		_WDT_Initialize
  3887 ;; This function is called by:
  3888 ;;		_main
  3889 ;; This function uses a non-reentrant model
  3890 ;;
  3891                           
  3892                           
  3893                           ;psect for function _SYSTEM_Initialize
  3894  1296                     _SYSTEM_Initialize:	
  3895                           
  3896                           ;mcc.c: 72: PIN_MANAGER_Initialize();
  3897                           
  3898                           ;incstack = 0
  3899                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3900  1296  3193  238F  3192   	fcall	_PIN_MANAGER_Initialize
  3901                           
  3902                           ;mcc.c: 73: OSCILLATOR_Initialize();
  3903  1299  3191  21F6  3192   	fcall	_OSCILLATOR_Initialize
  3904                           
  3905                           ;mcc.c: 74: WDT_Initialize();
  3906  129C  3191  21EC  3192   	fcall	_WDT_Initialize
  3907                           
  3908                           ;mcc.c: 75: I2C1_Initialize();
  3909  129F  3193  2373  3192   	fcall	_I2C1_Initialize
  3910                           
  3911                           ;mcc.c: 76: TMR0_Initialize();
  3912  12A2  3192  2221  3192   	fcall	_TMR0_Initialize
  3913                           
  3914                           ;mcc.c: 77: EUSART_Initialize();
  3915  12A5  3192  22EA         	fcall	_EUSART_Initialize
  3916  12A7  0008               	return
  3917  12A8                     __end_of_SYSTEM_Initialize:	
  3918                           
  3919                           	psect	text3
  3920  11EC                     __ptext3:	
  3921 ;; *************** function _WDT_Initialize *****************
  3922 ;; Defined at:
  3923 ;;		line 92 in file "mcc_generated_files/mcc.c"
  3924 ;; Parameters:    Size  Location     Type
  3925 ;;		None
  3926 ;; Auto vars:     Size  Location     Type
  3927 ;;		None
  3928 ;; Return value:  Size  Location     Type
  3929 ;;                  1    wreg      void 
  3930 ;; Registers used:
  3931 ;;		wreg
  3932 ;; Tracked objects:
  3933 ;;		On entry : 0/0
  3934 ;;		On exit  : 0/0
  3935 ;;		Unchanged: 0/0
  3936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3937 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3938 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3939 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3940 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3941 ;;Total ram usage:        0 bytes
  3942 ;; Hardware stack levels used:    1
  3943 ;; Hardware stack levels required when called:    3
  3944 ;; This function calls:
  3945 ;;		Nothing
  3946 ;; This function is called by:
  3947 ;;		_SYSTEM_Initialize
  3948 ;; This function uses a non-reentrant model
  3949 ;;
  3950                           
  3951                           
  3952                           ;psect for function _WDT_Initialize
  3953  11EC                     _WDT_Initialize:	
  3954                           
  3955                           ;mcc.c: 95: WDTCON = 0x16;
  3956                           
  3957                           ;incstack = 0
  3958                           ; Regs used in _WDT_Initialize: [wreg]
  3959  11EC  3016               	movlw	22
  3960  11ED  0021               	movlb	1	; select bank1
  3961  11EE  0097               	movwf	23	;volatile
  3962  11EF  0008               	return
  3963  11F0                     __end_of_WDT_Initialize:	
  3964                           
  3965                           	psect	text4
  3966  1221                     __ptext4:	
  3967 ;; *************** function _TMR0_Initialize *****************
  3968 ;; Defined at:
  3969 ;;		line 62 in file "mcc_generated_files/tmr0.c"
  3970 ;; Parameters:    Size  Location     Type
  3971 ;;		None
  3972 ;; Auto vars:     Size  Location     Type
  3973 ;;		None
  3974 ;; Return value:  Size  Location     Type
  3975 ;;                  1    wreg      void 
  3976 ;; Registers used:
  3977 ;;		wreg, status,2
  3978 ;; Tracked objects:
  3979 ;;		On entry : 0/0
  3980 ;;		On exit  : 0/0
  3981 ;;		Unchanged: 0/0
  3982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3986 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3987 ;;Total ram usage:        0 bytes
  3988 ;; Hardware stack levels used:    1
  3989 ;; Hardware stack levels required when called:    3
  3990 ;; This function calls:
  3991 ;;		Nothing
  3992 ;; This function is called by:
  3993 ;;		_SYSTEM_Initialize
  3994 ;; This function uses a non-reentrant model
  3995 ;;
  3996                           
  3997                           
  3998                           ;psect for function _TMR0_Initialize
  3999  1221                     _TMR0_Initialize:	
  4000                           
  4001                           ;tmr0.c: 67: OPTION_REG = (OPTION_REG & 0xC0) | 0xD7 & 0x3F;
  4002                           
  4003                           ;incstack = 0
  4004                           ; Regs used in _TMR0_Initialize: [wreg+status,2]
  4005  1221  0021               	movlb	1	; select bank1
  4006  1222  0815               	movf	21,w	;volatile
  4007  1223  39C0               	andlw	192
  4008  1224  3817               	iorlw	23
  4009  1225  0095               	movwf	21	;volatile
  4010                           
  4011                           ;tmr0.c: 70: TMR0 = 0x00;
  4012  1226  0020               	movlb	0	; select bank0
  4013  1227  0195               	clrf	21	;volatile
  4014                           
  4015                           ;tmr0.c: 73: timer0ReloadVal= 0;
  4016  1228  0021               	movlb	1	; select bank1
  4017  1229  01E5               	clrf	_timer0ReloadVal^(0+128)	;volatile
  4018                           
  4019                           ;tmr0.c: 76: INTCONbits.TMR0IF = 0;
  4020  122A  110B               	bcf	11,2	;volatile
  4021  122B  0008               	return
  4022  122C                     __end_of_TMR0_Initialize:	
  4023                           
  4024                           	psect	text5
  4025  138F                     __ptext5:	
  4026 ;; *************** function _PIN_MANAGER_Initialize *****************
  4027 ;; Defined at:
  4028 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
  4029 ;; Parameters:    Size  Location     Type
  4030 ;;		None
  4031 ;; Auto vars:     Size  Location     Type
  4032 ;;		None
  4033 ;; Return value:  Size  Location     Type
  4034 ;;                  1    wreg      void 
  4035 ;; Registers used:
  4036 ;;		wreg, status,2
  4037 ;; Tracked objects:
  4038 ;;		On entry : 0/0
  4039 ;;		On exit  : 0/0
  4040 ;;		Unchanged: 0/0
  4041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4045 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4046 ;;Total ram usage:        0 bytes
  4047 ;; Hardware stack levels used:    1
  4048 ;; Hardware stack levels required when called:    3
  4049 ;; This function calls:
  4050 ;;		Nothing
  4051 ;; This function is called by:
  4052 ;;		_SYSTEM_Initialize
  4053 ;; This function uses a non-reentrant model
  4054 ;;
  4055                           
  4056                           
  4057                           ;psect for function _PIN_MANAGER_Initialize
  4058  138F                     _PIN_MANAGER_Initialize:	
  4059                           
  4060                           ;pin_manager.c: 56: LATA = 0x00;
  4061                           
  4062                           ;incstack = 0
  4063                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  4064  138F  0022               	movlb	2	; select bank2
  4065  1390  018C               	clrf	12	;volatile
  4066                           
  4067                           ;pin_manager.c: 57: LATB = 0x00;
  4068  1391  018D               	clrf	13	;volatile
  4069                           
  4070                           ;pin_manager.c: 58: LATC = 0x00;
  4071  1392  018E               	clrf	14	;volatile
  4072                           
  4073                           ;pin_manager.c: 63: TRISA = 0x3F;
  4074  1393  303F               	movlw	63
  4075  1394  0021               	movlb	1	; select bank1
  4076  1395  008C               	movwf	12	;volatile
  4077                           
  4078                           ;pin_manager.c: 64: TRISB = 0xF0;
  4079  1396  30F0               	movlw	240
  4080  1397  008D               	movwf	13	;volatile
  4081                           
  4082                           ;pin_manager.c: 65: TRISC = 0x7F;
  4083  1398  307F               	movlw	127
  4084  1399  008E               	movwf	14	;volatile
  4085                           
  4086                           ;pin_manager.c: 70: ANSELC = 0x4F;
  4087  139A  304F               	movlw	79
  4088  139B  0023               	movlb	3	; select bank3
  4089  139C  008E               	movwf	14	;volatile
  4090                           
  4091                           ;pin_manager.c: 71: ANSELB = 0x20;
  4092  139D  3020               	movlw	32
  4093  139E  008D               	movwf	13	;volatile
  4094                           
  4095                           ;pin_manager.c: 72: ANSELA = 0x17;
  4096  139F  3017               	movlw	23
  4097  13A0  008C               	movwf	12	;volatile
  4098                           
  4099                           ;pin_manager.c: 77: WPUB = 0x00;
  4100  13A1  0024               	movlb	4	; select bank4
  4101  13A2  018D               	clrf	13	;volatile
  4102                           
  4103                           ;pin_manager.c: 78: WPUA = 0x3F;
  4104  13A3  303F               	movlw	63
  4105  13A4  008C               	movwf	12	;volatile
  4106                           
  4107                           ;pin_manager.c: 79: WPUC = 0xBF;
  4108  13A5  30BF               	movlw	191
  4109  13A6  008E               	movwf	14	;volatile
  4110                           
  4111                           ;pin_manager.c: 80: OPTION_REGbits.nWPUEN = 0;
  4112  13A7  0021               	movlb	1	; select bank1
  4113  13A8  1395               	bcf	21,7	;volatile
  4114                           
  4115                           ;pin_manager.c: 86: APFCON1 = 0x00;
  4116  13A9  0022               	movlb	2	; select bank2
  4117  13AA  019E               	clrf	30	;volatile
  4118                           
  4119                           ;pin_manager.c: 87: APFCON0 = 0x84;
  4120  13AB  3084               	movlw	132
  4121  13AC  009D               	movwf	29	;volatile
  4122  13AD  0008               	return
  4123  13AE                     __end_of_PIN_MANAGER_Initialize:	
  4124                           
  4125                           	psect	text6
  4126  11F6                     __ptext6:	
  4127 ;; *************** function _OSCILLATOR_Initialize *****************
  4128 ;; Defined at:
  4129 ;;		line 80 in file "mcc_generated_files/mcc.c"
  4130 ;; Parameters:    Size  Location     Type
  4131 ;;		None
  4132 ;; Auto vars:     Size  Location     Type
  4133 ;;		None
  4134 ;; Return value:  Size  Location     Type
  4135 ;;                  1    wreg      void 
  4136 ;; Registers used:
  4137 ;;		wreg, status,2
  4138 ;; Tracked objects:
  4139 ;;		On entry : 0/0
  4140 ;;		On exit  : 0/0
  4141 ;;		Unchanged: 0/0
  4142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4144 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4146 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4147 ;;Total ram usage:        0 bytes
  4148 ;; Hardware stack levels used:    1
  4149 ;; Hardware stack levels required when called:    3
  4150 ;; This function calls:
  4151 ;;		Nothing
  4152 ;; This function is called by:
  4153 ;;		_SYSTEM_Initialize
  4154 ;; This function uses a non-reentrant model
  4155 ;;
  4156                           
  4157                           
  4158                           ;psect for function _OSCILLATOR_Initialize
  4159  11F6                     _OSCILLATOR_Initialize:	
  4160                           
  4161                           ;mcc.c: 83: OSCCON = 0x70;
  4162                           
  4163                           ;incstack = 0
  4164                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  4165  11F6  3070               	movlw	112
  4166  11F7  0021               	movlb	1	; select bank1
  4167  11F8  0099               	movwf	25	;volatile
  4168                           
  4169                           ;mcc.c: 85: OSCTUNE = 0x00;
  4170  11F9  0198               	clrf	24	;volatile
  4171  11FA                     l355:	
  4172                           ;mcc.c: 88: {
  4173                           
  4174                           ;mcc.c: 87: while(PLLR == 0)
  4175                           
  4176  11FA  1B1A               	btfsc	26,6	;volatile
  4177  11FB  0008               	return
  4178  11FC  29FA               	goto	l355
  4179  11FD                     __end_of_OSCILLATOR_Initialize:	
  4180                           
  4181                           	psect	text7
  4182  1373                     __ptext7:	
  4183 ;; *************** function _I2C1_Initialize *****************
  4184 ;; Defined at:
  4185 ;;		line 198 in file "mcc_generated_files/i2c1.c"
  4186 ;; Parameters:    Size  Location     Type
  4187 ;;		None
  4188 ;; Auto vars:     Size  Location     Type
  4189 ;;		None
  4190 ;; Return value:  Size  Location     Type
  4191 ;;                  1    wreg      void 
  4192 ;; Registers used:
  4193 ;;		wreg, status,2
  4194 ;; Tracked objects:
  4195 ;;		On entry : 0/0
  4196 ;;		On exit  : 0/0
  4197 ;;		Unchanged: 0/0
  4198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4200 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4201 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4202 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4203 ;;Total ram usage:        1 bytes
  4204 ;; Hardware stack levels used:    1
  4205 ;; Hardware stack levels required when called:    3
  4206 ;; This function calls:
  4207 ;;		Nothing
  4208 ;; This function is called by:
  4209 ;;		_SYSTEM_Initialize
  4210 ;; This function uses a non-reentrant model
  4211 ;;
  4212                           
  4213                           
  4214                           ;psect for function _I2C1_Initialize
  4215  1373                     _I2C1_Initialize:	
  4216                           
  4217                           ;i2c1.c: 200: i2c1_object.pTrHead = i2c1_tr_queue;
  4218                           
  4219                           ;incstack = 0
  4220                           ; Regs used in _I2C1_Initialize: [wreg+status,2]
  4221  1373  3059               	movlw	(low (_i2c1_tr_queue| (0+256)))& (0+255)
  4222  1374  0020               	movlb	0	; select bank0
  4223  1375  00A0               	movwf	??_I2C1_Initialize
  4224  1376  0820               	movf	??_I2C1_Initialize,w
  4225  1377  0021               	movlb	1	; select bank1
  4226  1378  00DA               	movwf	(low ((_i2c1_object| 0+1)))^(0+128)
  4227                           
  4228                           ;i2c1.c: 201: i2c1_object.pTrTail = i2c1_tr_queue;
  4229  1379  3059               	movlw	(low (_i2c1_tr_queue| (0+256)))& (0+255)
  4230  137A  0020               	movlb	0	; select bank0
  4231  137B  00A0               	movwf	??_I2C1_Initialize
  4232  137C  0820               	movf	??_I2C1_Initialize,w
  4233  137D  0021               	movlb	1	; select bank1
  4234  137E  00D9               	movwf	_i2c1_object^(0+128)
  4235                           
  4236                           ;i2c1.c: 202: i2c1_object.trStatus.s.empty = 1;
  4237  137F  14DB               	bsf	(_i2c1_object^(0+128)+2),1
  4238                           
  4239                           ;i2c1.c: 203: i2c1_object.trStatus.s.full = 0;
  4240  1380  105B               	bcf	(_i2c1_object^(0+128)+2),0
  4241                           
  4242                           ;i2c1.c: 205: i2c1_object.i2cErrors = 0;
  4243  1381  01DD               	clrf	(_i2c1_object^(0+128)+4)
  4244                           
  4245                           ;i2c1.c: 208: SSP1STAT = 0x80;
  4246  1382  3080               	movlw	128
  4247  1383  0024               	movlb	4	; select bank4
  4248  1384  0094               	movwf	20	;volatile
  4249                           
  4250                           ;i2c1.c: 210: SSP1CON1 = 0x28;
  4251  1385  3028               	movlw	40
  4252  1386  0095               	movwf	21	;volatile
  4253                           
  4254                           ;i2c1.c: 212: SSP1CON3 = 0x00;
  4255  1387  0197               	clrf	23	;volatile
  4256                           
  4257                           ;i2c1.c: 214: SSP1ADD = 0x4F;
  4258  1388  304F               	movlw	79
  4259  1389  0092               	movwf	18	;volatile
  4260                           
  4261                           ;i2c1.c: 218: PIR1bits.SSP1IF = 0;
  4262  138A  0020               	movlb	0	; select bank0
  4263  138B  1191               	bcf	17,3	;volatile
  4264                           
  4265                           ;i2c1.c: 220: PIE1bits.SSP1IE = 1;
  4266  138C  0021               	movlb	1	; select bank1
  4267  138D  1591               	bsf	17,3	;volatile
  4268  138E  0008               	return
  4269  138F                     __end_of_I2C1_Initialize:	
  4270                           
  4271                           	psect	text8
  4272  12EA                     __ptext8:	
  4273 ;; *************** function _EUSART_Initialize *****************
  4274 ;; Defined at:
  4275 ;;		line 75 in file "mcc_generated_files/eusart.c"
  4276 ;; Parameters:    Size  Location     Type
  4277 ;;		None
  4278 ;; Auto vars:     Size  Location     Type
  4279 ;;		None
  4280 ;; Return value:  Size  Location     Type
  4281 ;;                  1    wreg      void 
  4282 ;; Registers used:
  4283 ;;		wreg, status,2
  4284 ;; Tracked objects:
  4285 ;;		On entry : 0/0
  4286 ;;		On exit  : 0/0
  4287 ;;		Unchanged: 0/0
  4288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4290 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4291 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4292 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4293 ;;Total ram usage:        1 bytes
  4294 ;; Hardware stack levels used:    1
  4295 ;; Hardware stack levels required when called:    3
  4296 ;; This function calls:
  4297 ;;		Nothing
  4298 ;; This function is called by:
  4299 ;;		_SYSTEM_Initialize
  4300 ;; This function uses a non-reentrant model
  4301 ;;
  4302                           
  4303                           
  4304                           ;psect for function _EUSART_Initialize
  4305  12EA                     _EUSART_Initialize:	
  4306                           
  4307                           ;eusart.c: 78: PIE1bits.RCIE = 0;
  4308                           
  4309                           ;incstack = 0
  4310                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  4311  12EA  0021               	movlb	1	; select bank1
  4312  12EB  1291               	bcf	17,5	;volatile
  4313                           
  4314                           ;eusart.c: 79: PIE1bits.TXIE = 0;
  4315  12EC  1211               	bcf	17,4	;volatile
  4316                           
  4317                           ;eusart.c: 84: BAUDCON = 0x08;
  4318  12ED  3008               	movlw	8
  4319  12EE  0023               	movlb	3	; select bank3
  4320  12EF  009F               	movwf	31	;volatile
  4321                           
  4322                           ;eusart.c: 87: RCSTA = 0x90;
  4323  12F0  3090               	movlw	144
  4324  12F1  009D               	movwf	29	;volatile
  4325                           
  4326                           ;eusart.c: 90: TXSTA = 0x24;
  4327  12F2  3024               	movlw	36
  4328  12F3  009E               	movwf	30	;volatile
  4329                           
  4330                           ;eusart.c: 93: SPBRGL = 0x44;
  4331  12F4  3044               	movlw	68
  4332  12F5  009B               	movwf	27	;volatile
  4333                           
  4334                           ;eusart.c: 96: SPBRGH = 0x00;
  4335  12F6  019C               	clrf	28	;volatile
  4336                           
  4337                           ;eusart.c: 100: eusartTxHead = 0;
  4338  12F7  01F6               	clrf	_eusartTxHead	;volatile
  4339                           
  4340                           ;eusart.c: 101: eusartTxTail = 0;
  4341  12F8  01F5               	clrf	_eusartTxTail	;volatile
  4342                           
  4343                           ;eusart.c: 102: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
  4344  12F9  3040               	movlw	64
  4345  12FA  0020               	movlb	0	; select bank0
  4346  12FB  00A0               	movwf	??_EUSART_Initialize
  4347  12FC  0820               	movf	??_EUSART_Initialize,w
  4348  12FD  00F4               	movwf	_eusartTxBufferRemaining	;volatile
  4349                           
  4350                           ;eusart.c: 104: eusartRxHead = 0;
  4351  12FE  01F3               	clrf	_eusartRxHead	;volatile
  4352                           
  4353                           ;eusart.c: 105: eusartRxTail = 0;
  4354  12FF  01F2               	clrf	_eusartRxTail	;volatile
  4355                           
  4356                           ;eusart.c: 106: eusartRxCount = 0;
  4357  1300  0021               	movlb	1	; select bank1
  4358  1301  01E6               	clrf	_eusartRxCount^(0+128)	;volatile
  4359                           
  4360                           ;eusart.c: 109: PIE1bits.RCIE = 1;
  4361  1302  1691               	bsf	17,5	;volatile
  4362  1303  0008               	return
  4363  1304                     __end_of_EUSART_Initialize:	
  4364                           
  4365                           	psect	text9
  4366  120E                     __ptext9:	
  4367 ;; *************** function _PROTOCOL_Set_Tick_Handler *****************
  4368 ;; Defined at:
  4369 ;;		line 85 in file "protocol.c"
  4370 ;; Parameters:    Size  Location     Type
  4371 ;;  tick_handler    2    0[BANK0 ] PTR void 
  4372 ;;		 -> tick_handler(1), 
  4373 ;; Auto vars:     Size  Location     Type
  4374 ;;		None
  4375 ;; Return value:  Size  Location     Type
  4376 ;;                  1    wreg      void 
  4377 ;; Registers used:
  4378 ;;		wreg
  4379 ;; Tracked objects:
  4380 ;;		On entry : 0/0
  4381 ;;		On exit  : 0/0
  4382 ;;		Unchanged: 0/0
  4383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4384 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4385 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4387 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4388 ;;Total ram usage:        2 bytes
  4389 ;; Hardware stack levels used:    1
  4390 ;; Hardware stack levels required when called:    3
  4391 ;; This function calls:
  4392 ;;		Nothing
  4393 ;; This function is called by:
  4394 ;;		_main
  4395 ;; This function uses a non-reentrant model
  4396 ;;
  4397                           
  4398                           
  4399                           ;psect for function _PROTOCOL_Set_Tick_Handler
  4400  120E                     _PROTOCOL_Set_Tick_Handler:	
  4401                           
  4402                           ;protocol.c: 86: PROTOCOL_Tick_Handler = tick_handler;
  4403                           
  4404                           ;incstack = 0
  4405                           ; Regs used in _PROTOCOL_Set_Tick_Handler: [wreg]
  4406  120E  0020               	movlb	0	; select bank0
  4407  120F  0821               	movf	PROTOCOL_Set_Tick_Handler@tick_handler+1,w
  4408  1210  0022               	movlb	2	; select bank2
  4409  1211  00A9               	movwf	(_PROTOCOL_Tick_Handler+1)^(0+256)
  4410  1212  0020               	movlb	0	; select bank0
  4411  1213  0820               	movf	PROTOCOL_Set_Tick_Handler@tick_handler,w
  4412  1214  0022               	movlb	2	; select bank2
  4413  1215  00A8               	movwf	_PROTOCOL_Tick_Handler^(0+256)
  4414  1216  0008               	return
  4415  1217                     __end_of_PROTOCOL_Set_Tick_Handler:	
  4416                           
  4417                           	psect	text10
  4418  1205                     __ptext10:	
  4419 ;; *************** function _PROTOCOL_Set_Extension_Handler *****************
  4420 ;; Defined at:
  4421 ;;		line 81 in file "protocol.c"
  4422 ;; Parameters:    Size  Location     Type
  4423 ;;  extension_ha    2    0[BANK0 ] PTR void 
  4424 ;;		 -> command_handler(1), 
  4425 ;; Auto vars:     Size  Location     Type
  4426 ;;		None
  4427 ;; Return value:  Size  Location     Type
  4428 ;;                  1    wreg      void 
  4429 ;; Registers used:
  4430 ;;		wreg
  4431 ;; Tracked objects:
  4432 ;;		On entry : 0/0
  4433 ;;		On exit  : 0/0
  4434 ;;		Unchanged: 0/0
  4435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4436 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4439 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4440 ;;Total ram usage:        2 bytes
  4441 ;; Hardware stack levels used:    1
  4442 ;; Hardware stack levels required when called:    3
  4443 ;; This function calls:
  4444 ;;		Nothing
  4445 ;; This function is called by:
  4446 ;;		_main
  4447 ;; This function uses a non-reentrant model
  4448 ;;
  4449                           
  4450                           
  4451                           ;psect for function _PROTOCOL_Set_Extension_Handler
  4452  1205                     _PROTOCOL_Set_Extension_Handler:	
  4453                           
  4454                           ;protocol.c: 82: PROTOCOL_Extension_Handler = extension_handler;
  4455                           
  4456                           ;incstack = 0
  4457                           ; Regs used in _PROTOCOL_Set_Extension_Handler: [wreg]
  4458  1205  0020               	movlb	0	; select bank0
  4459  1206  0821               	movf	PROTOCOL_Set_Extension_Handler@extension_handler+1,w
  4460  1207  0022               	movlb	2	; select bank2
  4461  1208  00AD               	movwf	(_PROTOCOL_Extension_Handler+1)^(0+256)
  4462  1209  0020               	movlb	0	; select bank0
  4463  120A  0820               	movf	PROTOCOL_Set_Extension_Handler@extension_handler,w
  4464  120B  0022               	movlb	2	; select bank2
  4465  120C  00AC               	movwf	_PROTOCOL_Extension_Handler^(0+256)
  4466  120D  0008               	return
  4467  120E                     __end_of_PROTOCOL_Set_Extension_Handler:	
  4468                           
  4469                           	psect	text11
  4470  0CA0                     __ptext11:	
  4471 ;; *************** function _PROTOCOL_Loop *****************
  4472 ;; Defined at:
  4473 ;;		line 136 in file "protocol.c"
  4474 ;; Parameters:    Size  Location     Type
  4475 ;;		None
  4476 ;; Auto vars:     Size  Location     Type
  4477 ;;  device_addre    1   74[BANK0 ] unsigned char 
  4478 ;;  c               1   73[BANK0 ] unsigned char 
  4479 ;; Return value:  Size  Location     Type
  4480 ;;                  1    wreg      void 
  4481 ;; Registers used:
  4482 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4483 ;; Tracked objects:
  4484 ;;		On entry : 0/0
  4485 ;;		On exit  : 0/0
  4486 ;;		Unchanged: 0/0
  4487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4489 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4490 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4491 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4492 ;;Total ram usage:        4 bytes
  4493 ;; Hardware stack levels used:    1
  4494 ;; Hardware stack levels required when called:   11
  4495 ;; This function calls:
  4496 ;;		Absolute function
  4497 ;;		_EUSART_Read
  4498 ;;		_PROTOCOL_EXT
  4499 ;;		_PROTOCOL_Read_Device_Address
  4500 ;;		_PROTOCOL_SAV
  4501 ;;		_PROTOCOL_SET
  4502 ;;		_PROTOCOL_STA
  4503 ;;		_PROTOCOL_STP
  4504 ;;		_PROTOCOL_Write_Device_Address
  4505 ;;		_TMR0_HasOverflowOccured
  4506 ;;		_atoi
  4507 ;;		_inv_handler
  4508 ;;		_printf
  4509 ;;		_strncmp
  4510 ;;		_tick_handler
  4511 ;; This function is called by:
  4512 ;;		_main
  4513 ;; This function uses a non-reentrant model
  4514 ;;
  4515                           
  4516                           
  4517                           ;psect for function _PROTOCOL_Loop
  4518  0CA0                     _PROTOCOL_Loop:	
  4519  0CA0                     l842:	
  4520                           ;incstack = 0
  4521                           ; Regs used in _PROTOCOL_Loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4522                           ;protocol.c: 137: uint8_t device_address;
  4523                           ;protocol.c: 138: uint8_t c;
  4524                           ;protocol.c: 139: while (1) {
  4525                           
  4526                           
  4527                           ;protocol.c: 140: tmr_overflow = TMR0_HasOverflowOccured();
  4528  0CA0  3191  21E8  318C   	fcall	_TMR0_HasOverflowOccured
  4529  0CA3  0020               	movlb	0	; select bank0
  4530  0CA4  00E7               	movwf	??_PROTOCOL_Loop
  4531  0CA5  0867               	movf	??_PROTOCOL_Loop,w
  4532  0CA6  0022               	movlb	2	; select bank2
  4533  0CA7  00BE               	movwf	_tmr_overflow^(0+256)
  4534                           
  4535                           ;protocol.c: 141: if (tmr_overflow) {
  4536  0CA8  083E               	movf	_tmr_overflow^(0+256),w
  4537  0CA9  1903               	btfsc	3,2
  4538  0CAA  2CD7               	goto	l6068
  4539                           
  4540                           ;protocol.c: 142: TMR0IF = 0;
  4541  0CAB  110B               	bcf	11,2	;volatile
  4542                           
  4543                           ;protocol.c: 143: if (PROTOCOL_Tick_Handler) PROTOCOL_Tick_Handler();
  4544  0CAC  0828               	movf	_PROTOCOL_Tick_Handler^(0+256),w
  4545  0CAD  0429               	iorwf	(_PROTOCOL_Tick_Handler+1)^(0+256),w
  4546  0CAE  1903               	btfsc	3,2
  4547  0CAF  2CB5               	goto	l6054
  4548  0CB0  0829               	movf	(_PROTOCOL_Tick_Handler+1)^(0+256),w
  4549  0CB1  008A               	movwf	10
  4550  0CB2  0828               	movf	_PROTOCOL_Tick_Handler^(0+256),w
  4551  0CB3  000A               	callw
  4552  0CB4  318C               	pagesel	$
  4553  0CB5                     l6054:	
  4554                           
  4555                           ;protocol.c: 144: if (PROTOCOL_Inv_Handler && (++tmr_cnt >= value)) {
  4556  0CB5  0022               	movlb	2	; select bank2
  4557  0CB6  082A               	movf	_PROTOCOL_Inv_Handler^(0+256),w
  4558  0CB7  042B               	iorwf	(_PROTOCOL_Inv_Handler+1)^(0+256),w
  4559  0CB8  1903               	btfsc	3,2
  4560  0CB9  2CD7               	goto	l6068
  4561  0CBA  3001               	movlw	1
  4562  0CBB  0020               	movlb	0	; select bank0
  4563  0CBC  00E7               	movwf	??_PROTOCOL_Loop
  4564  0CBD  0867               	movf	??_PROTOCOL_Loop,w
  4565  0CBE  0022               	movlb	2	; select bank2
  4566  0CBF  07BF               	addwf	_tmr_cnt^(0+256),f
  4567  0CC0  0021               	movlb	1	; select bank1
  4568  0CC1  085E               	movf	_value^(0+128),w
  4569  0CC2  0022               	movlb	2	; select bank2
  4570  0CC3  023F               	subwf	_tmr_cnt^(0+256),w
  4571  0CC4  1C03               	skipc
  4572  0CC5  2CD7               	goto	l6068
  4573                           
  4574                           ;protocol.c: 145: tmr_cnt = 0;
  4575  0CC6  01BF               	clrf	_tmr_cnt^(0+256)
  4576                           
  4577                           ;protocol.c: 146: if (++sec_cnt >= tmr_scaler) {
  4578  0CC7  3001               	movlw	1
  4579  0CC8  0020               	movlb	0	; select bank0
  4580  0CC9  00E7               	movwf	??_PROTOCOL_Loop
  4581  0CCA  0867               	movf	??_PROTOCOL_Loop,w
  4582  0CCB  0022               	movlb	2	; select bank2
  4583  0CCC  07C0               	addwf	_sec_cnt^(0+256),f
  4584  0CCD  0862               	movf	_tmr_scaler^(0+256),w
  4585  0CCE  0240               	subwf	_sec_cnt^(0+256),w
  4586  0CCF  1C03               	skipc
  4587  0CD0  2CD7               	goto	l6068
  4588                           
  4589                           ;protocol.c: 147: if (running) invoked = 1;
  4590  0CD1  0842               	movf	_running^(0+256),w
  4591  0CD2  1903               	btfsc	3,2
  4592  0CD3  2CD6               	goto	l6066
  4593  0CD4  01C1               	clrf	_invoked^(0+256)
  4594  0CD5  0AC1               	incf	_invoked^(0+256),f
  4595  0CD6                     l6066:	
  4596                           
  4597                           ;protocol.c: 148: sec_cnt = 0;
  4598  0CD6  01C0               	clrf	_sec_cnt^(0+256)
  4599  0CD7                     l6068:	
  4600                           
  4601                           ;protocol.c: 149: }
  4602                           ;protocol.c: 150: }
  4603                           ;protocol.c: 151: }
  4604                           ;protocol.c: 152: if (invoked && PROTOCOL_Inv_Handler) {
  4605  0CD7  0841               	movf	_invoked^(0+256),w
  4606  0CD8  1903               	btfsc	3,2
  4607  0CD9  2CE5               	goto	l6078
  4608  0CDA  082A               	movf	_PROTOCOL_Inv_Handler^(0+256),w
  4609  0CDB  042B               	iorwf	(_PROTOCOL_Inv_Handler+1)^(0+256),w
  4610  0CDC  1903               	btfsc	3,2
  4611  0CDD  2CE5               	goto	l6078
  4612                           
  4613                           ;protocol.c: 153: PROTOCOL_Inv_Handler();
  4614  0CDE  082B               	movf	(_PROTOCOL_Inv_Handler+1)^(0+256),w
  4615  0CDF  008A               	movwf	10
  4616  0CE0  082A               	movf	_PROTOCOL_Inv_Handler^(0+256),w
  4617  0CE1  000A               	callw
  4618  0CE2  318C               	pagesel	$
  4619                           
  4620                           ;protocol.c: 154: invoked = 0;
  4621  0CE3  0022               	movlb	2	; select bank2
  4622  0CE4  01C1               	clrf	_invoked^(0+256)
  4623  0CE5                     l6078:	
  4624                           
  4625                           ;protocol.c: 157: if ((eusartRxCount)) {
  4626  0CE5  0021               	movlb	1	; select bank1
  4627  0CE6  0866               	movf	_eusartRxCount^(0+128),w	;volatile
  4628  0CE7  1903               	btfsc	3,2
  4629  0CE8  2CA0               	goto	l842
  4630                           
  4631                           ;protocol.c: 158: c = EUSART_Read();
  4632  0CE9  3193  23AE  318C   	fcall	_EUSART_Read
  4633  0CEC  0020               	movlb	0	; select bank0
  4634  0CED  00E7               	movwf	??_PROTOCOL_Loop
  4635  0CEE  0867               	movf	??_PROTOCOL_Loop,w
  4636  0CEF  00E9               	movwf	PROTOCOL_Loop@c
  4637                           
  4638                           ;protocol.c: 159: buf[cnt++] = c;
  4639  0CF0  0869               	movf	PROTOCOL_Loop@c,w
  4640  0CF1  00E7               	movwf	??_PROTOCOL_Loop
  4641  0CF2  0021               	movlb	1	; select bank1
  4642  0CF3  085F               	movf	_cnt^(0+128),w
  4643  0CF4  3E20               	addlw	(low (_buf| (0+512)))& (0+255)
  4644  0CF5  0086               	movwf	6
  4645  0CF6  3002               	movlw	2	; select bank4/5
  4646  0CF7  0087               	movwf	7
  4647  0CF8  0020               	movlb	0	; select bank0
  4648  0CF9  0867               	movf	??_PROTOCOL_Loop,w
  4649  0CFA  0081               	movwf	1
  4650  0CFB  3001               	movlw	1
  4651  0CFC  00E7               	movwf	??_PROTOCOL_Loop
  4652  0CFD  0867               	movf	??_PROTOCOL_Loop,w
  4653  0CFE  0021               	movlb	1	; select bank1
  4654  0CFF  07DF               	addwf	_cnt^(0+128),f
  4655                           
  4656                           ;protocol.c: 160: if (c == '\n') {
  4657  0D00  300A               	movlw	10
  4658  0D01  0020               	movlb	0	; select bank0
  4659  0D02  0669               	xorwf	PROTOCOL_Loop@c,w
  4660  0D03  1D03               	btfss	3,2
  4661  0D04  2CA0               	goto	l842
  4662                           
  4663                           ;protocol.c: 161: buf[--cnt] = '\0';
  4664  0D05  3001               	movlw	1
  4665  0D06  0021               	movlb	1	; select bank1
  4666  0D07  02DF               	subwf	_cnt^(0+128),f
  4667  0D08  085F               	movf	_cnt^(0+128),w
  4668  0D09  3E20               	addlw	(low (_buf| (0+512)))& (0+255)
  4669  0D0A  0086               	movwf	6
  4670  0D0B  3002               	movlw	2	; select bank4/5
  4671  0D0C  0087               	movwf	7
  4672  0D0D  0181               	clrf	1
  4673                           
  4674                           ;protocol.c: 162: cnt = 0;
  4675  0D0E  01DF               	clrf	_cnt^(0+128)
  4676                           
  4677                           ;protocol.c: 163: printf("#%s\n", buf);
  4678  0D0F  3058               	movlw	low (STR_35| (0+32768))
  4679  0D10  0020               	movlb	0	; select bank0
  4680  0D11  00AE               	movwf	printf@f
  4681  0D12  3091               	movlw	high (STR_35| (0+32768))
  4682  0D13  00AF               	movwf	printf@f+1
  4683  0D14  3020               	movlw	low _buf
  4684  0D15  00B0               	movwf	low ((?_printf| 0+2))
  4685  0D16  3002               	movlw	high _buf
  4686  0D17  00B1               	movwf	(low ((?_printf| 0+2))+1)
  4687  0D18  3185  251C  318C   	fcall	_printf
  4688                           
  4689                           ;protocol.c: 164: if (BACKPLANE_SLAVE_ADDRESS != 0x01) {
  4690  0D1B  0021               	movlb	1	; select bank1
  4691  0D1C  036E               	decf	_BACKPLANE_SLAVE_ADDRESS^(0+128),w
  4692  0D1D  1903               	btfsc	3,2
  4693  0D1E  2D24               	goto	l6098
  4694                           
  4695                           ;protocol.c: 165: PROTOCOL_EXT(buf);
  4696  0D1F  3020               	movlw	(low (_buf| (0+512)))& (0+255)
  4697  0D20  3192  22A8  318C   	fcall	_PROTOCOL_EXT
  4698                           
  4699                           ;protocol.c: 166: } else if (!strncmp(("WHO"), (buf), 3)) {
  4700  0D23  2CA0               	goto	l842
  4701  0D24                     l6098:	
  4702  0D24  308D               	movlw	low (STR_1| (0+32768))
  4703  0D25  0020               	movlb	0	; select bank0
  4704  0D26  00A0               	movwf	strncmp@s1
  4705  0D27  3091               	movlw	high (STR_1| (0+32768))
  4706  0D28  00A1               	movwf	strncmp@s1+1
  4707  0D29  3020               	movlw	low _buf
  4708  0D2A  00A2               	movwf	strncmp@s2
  4709  0D2B  3002               	movlw	high _buf
  4710  0D2C  00A3               	movwf	strncmp@s2+1
  4711  0D2D  3003               	movlw	3
  4712  0D2E  00A4               	movwf	strncmp@len
  4713  0D2F  3000               	movlw	0
  4714  0D30  00A5               	movwf	strncmp@len+1
  4715  0D31  3188  2002  318C   	fcall	_strncmp
  4716  0D34  0020               	movlb	0	; select bank0
  4717  0D35  0820               	movf	?_strncmp,w
  4718  0D36  0421               	iorwf	?_strncmp+1,w
  4719  0D37  1D03               	btfss	3,2
  4720  0D38  2D49               	goto	l6102
  4721                           
  4722                           ;protocol.c: 167: printf("$:WHO:%s\n", device_id_);
  4723  0D39  30E8               	movlw	low (STR_37| (0+32768))
  4724  0D3A  00AE               	movwf	printf@f
  4725  0D3B  3090               	movlw	high (STR_37| (0+32768))
  4726  0D3C  00AF               	movwf	printf@f+1
  4727  0D3D  0022               	movlb	2	; select bank2
  4728  0D3E  0827               	movf	(_device_id_+1)^(0+256),w
  4729  0D3F  0020               	movlb	0	; select bank0
  4730  0D40  00B1               	movwf	(low ((?_printf| 0+2))+1)
  4731  0D41  0022               	movlb	2	; select bank2
  4732  0D42  0826               	movf	_device_id_^(0+256),w
  4733  0D43  0020               	movlb	0	; select bank0
  4734  0D44  00B0               	movwf	low ((?_printf| 0+2))
  4735  0D45  3185  251C  318C   	fcall	_printf
  4736                           
  4737                           ;protocol.c: 168: } else if (!strncmp(("SAV"), (buf), 3)) {
  4738  0D48  2CA0               	goto	l842
  4739  0D49                     l6102:	
  4740  0D49  30A5               	movlw	low (STR_4| (0+32768))
  4741  0D4A  0020               	movlb	0	; select bank0
  4742  0D4B  00A0               	movwf	strncmp@s1
  4743  0D4C  3091               	movlw	high (STR_4| (0+32768))
  4744  0D4D  00A1               	movwf	strncmp@s1+1
  4745  0D4E  3020               	movlw	low _buf
  4746  0D4F  00A2               	movwf	strncmp@s2
  4747  0D50  3002               	movlw	high _buf
  4748  0D51  00A3               	movwf	strncmp@s2+1
  4749  0D52  3003               	movlw	3
  4750  0D53  00A4               	movwf	strncmp@len
  4751  0D54  3000               	movlw	0
  4752  0D55  00A5               	movwf	strncmp@len+1
  4753  0D56  3188  2002  318C   	fcall	_strncmp
  4754  0D59  0020               	movlb	0	; select bank0
  4755  0D5A  0820               	movf	?_strncmp,w
  4756  0D5B  0421               	iorwf	?_strncmp+1,w
  4757  0D5C  1D03               	btfss	3,2
  4758  0D5D  2D62               	goto	l6106
  4759                           
  4760                           ;protocol.c: 169: PROTOCOL_SAV();
  4761  0D5E  3192  2217  318C   	fcall	_PROTOCOL_SAV
  4762                           
  4763                           ;protocol.c: 170: } else if (!strncmp(("STA"), (buf), 3)) {
  4764  0D61  2CA0               	goto	l842
  4765  0D62                     l6106:	
  4766  0D62  3075               	movlw	low (STR_5| (0+32768))
  4767  0D63  0020               	movlb	0	; select bank0
  4768  0D64  00A0               	movwf	strncmp@s1
  4769  0D65  3091               	movlw	high (STR_5| (0+32768))
  4770  0D66  00A1               	movwf	strncmp@s1+1
  4771  0D67  3020               	movlw	low _buf
  4772  0D68  00A2               	movwf	strncmp@s2
  4773  0D69  3002               	movlw	high _buf
  4774  0D6A  00A3               	movwf	strncmp@s2+1
  4775  0D6B  3003               	movlw	3
  4776  0D6C  00A4               	movwf	strncmp@len
  4777  0D6D  3000               	movlw	0
  4778  0D6E  00A5               	movwf	strncmp@len+1
  4779  0D6F  3188  2002  318C   	fcall	_strncmp
  4780  0D72  0020               	movlb	0	; select bank0
  4781  0D73  0820               	movf	?_strncmp,w
  4782  0D74  0421               	iorwf	?_strncmp+1,w
  4783  0D75  1D03               	btfss	3,2
  4784  0D76  2D7B               	goto	l6110
  4785                           
  4786                           ;protocol.c: 171: PROTOCOL_STA();
  4787  0D77  3191  21E4  318C   	fcall	_PROTOCOL_STA
  4788                           
  4789                           ;protocol.c: 172: } else if (!strncmp(("STP"), (buf), 3)) {
  4790  0D7A  2CA0               	goto	l842
  4791  0D7B                     l6110:	
  4792  0D7B  3095               	movlw	low (STR_6| (0+32768))
  4793  0D7C  0020               	movlb	0	; select bank0
  4794  0D7D  00A0               	movwf	strncmp@s1
  4795  0D7E  3091               	movlw	high (STR_6| (0+32768))
  4796  0D7F  00A1               	movwf	strncmp@s1+1
  4797  0D80  3020               	movlw	low _buf
  4798  0D81  00A2               	movwf	strncmp@s2
  4799  0D82  3002               	movlw	high _buf
  4800  0D83  00A3               	movwf	strncmp@s2+1
  4801  0D84  3003               	movlw	3
  4802  0D85  00A4               	movwf	strncmp@len
  4803  0D86  3000               	movlw	0
  4804  0D87  00A5               	movwf	strncmp@len+1
  4805  0D88  3188  2002  318C   	fcall	_strncmp
  4806  0D8B  0020               	movlb	0	; select bank0
  4807  0D8C  0820               	movf	?_strncmp,w
  4808  0D8D  0421               	iorwf	?_strncmp+1,w
  4809  0D8E  1D03               	btfss	3,2
  4810  0D8F  2DA0               	goto	l6116
  4811                           
  4812                           ;protocol.c: 173: PROTOCOL_STP();
  4813  0D90  3191  21DE  318C   	fcall	_PROTOCOL_STP
  4814                           
  4815                           ;protocol.c: 174: printf("*:STP:%s\n", "ACK");
  4816  0D93  30F2               	movlw	low (STR_41| (0+32768))
  4817  0D94  0020               	movlb	0	; select bank0
  4818  0D95  00AE               	movwf	printf@f
  4819  0D96  3090               	movlw	high (STR_41| (0+32768))
  4820  0D97  00AF               	movwf	printf@f+1
  4821  0D98  306D               	movlw	low (STR_42| (0+32768))
  4822  0D99  00B0               	movwf	low ((?_printf| 0+2))
  4823  0D9A  3091               	movlw	high (STR_42| (0+32768))
  4824  0D9B  00B1               	movwf	(low ((?_printf| 0+2))+1)
  4825  0D9C  3185  251C  318C   	fcall	_printf
  4826                           
  4827                           ;protocol.c: 175: } else if (!strncmp(("SET"), (buf), 3)) {
  4828  0D9F  2CA0               	goto	l842
  4829  0DA0                     l6116:	
  4830  0DA0  30A1               	movlw	low (STR_9| (0+32768))
  4831  0DA1  0020               	movlb	0	; select bank0
  4832  0DA2  00A0               	movwf	strncmp@s1
  4833  0DA3  3091               	movlw	high (STR_9| (0+32768))
  4834  0DA4  00A1               	movwf	strncmp@s1+1
  4835  0DA5  3020               	movlw	low _buf
  4836  0DA6  00A2               	movwf	strncmp@s2
  4837  0DA7  3002               	movlw	high _buf
  4838  0DA8  00A3               	movwf	strncmp@s2+1
  4839  0DA9  3003               	movlw	3
  4840  0DAA  00A4               	movwf	strncmp@len
  4841  0DAB  3000               	movlw	0
  4842  0DAC  00A5               	movwf	strncmp@len+1
  4843  0DAD  3188  2002  318C   	fcall	_strncmp
  4844  0DB0  0020               	movlb	0	; select bank0
  4845  0DB1  0820               	movf	?_strncmp,w
  4846  0DB2  0421               	iorwf	?_strncmp+1,w
  4847  0DB3  1D03               	btfss	3,2
  4848  0DB4  2DC2               	goto	l6120
  4849                           
  4850                           ;protocol.c: 176: PROTOCOL_SET(atoi(&buf[4]));
  4851  0DB5  3024               	movlw	low (_buf+4)
  4852  0DB6  00A6               	movwf	atoi@s
  4853  0DB7  3002               	movlw	high (_buf+4)
  4854  0DB8  00A7               	movwf	atoi@s+1
  4855  0DB9  3189  21E3  318C   	fcall	_atoi
  4856  0DBC  0020               	movlb	0	; select bank0
  4857  0DBD  0826               	movf	?_atoi,w
  4858  0DBE  3191  21FD  318C   	fcall	_PROTOCOL_SET
  4859                           
  4860                           ;protocol.c: 177: } else if (!strncmp(("GET"), (buf), 3)) {
  4861  0DC1  2CA0               	goto	l842
  4862  0DC2                     l6120:	
  4863  0DC2  309D               	movlw	low (STR_10| (0+32768))
  4864  0DC3  0020               	movlb	0	; select bank0
  4865  0DC4  00A0               	movwf	strncmp@s1
  4866  0DC5  3091               	movlw	high (STR_10| (0+32768))
  4867  0DC6  00A1               	movwf	strncmp@s1+1
  4868  0DC7  3020               	movlw	low _buf
  4869  0DC8  00A2               	movwf	strncmp@s2
  4870  0DC9  3002               	movlw	high _buf
  4871  0DCA  00A3               	movwf	strncmp@s2+1
  4872  0DCB  3003               	movlw	3
  4873  0DCC  00A4               	movwf	strncmp@len
  4874  0DCD  3000               	movlw	0
  4875  0DCE  00A5               	movwf	strncmp@len+1
  4876  0DCF  3188  2002  318C   	fcall	_strncmp
  4877  0DD2  0020               	movlb	0	; select bank0
  4878  0DD3  0820               	movf	?_strncmp,w
  4879  0DD4  0421               	iorwf	?_strncmp+1,w
  4880  0DD5  1D03               	btfss	3,2
  4881  0DD6  2DE8               	goto	l6124
  4882                           
  4883                           ;protocol.c: 178: printf("$:GET:%d\n", value);
  4884  0DD7  301A               	movlw	low (STR_11| (0+32768))
  4885  0DD8  00AE               	movwf	printf@f
  4886  0DD9  3091               	movlw	high (STR_11| (0+32768))
  4887  0DDA  00AF               	movwf	printf@f+1
  4888  0DDB  0021               	movlb	1	; select bank1
  4889  0DDC  085E               	movf	_value^(0+128),w
  4890  0DDD  0020               	movlb	0	; select bank0
  4891  0DDE  00E7               	movwf	??_PROTOCOL_Loop
  4892  0DDF  01E8               	clrf	??_PROTOCOL_Loop+1
  4893  0DE0  0867               	movf	??_PROTOCOL_Loop,w
  4894  0DE1  00B0               	movwf	?_printf+2
  4895  0DE2  0868               	movf	??_PROTOCOL_Loop+1,w
  4896  0DE3  00B1               	movwf	?_printf+3
  4897  0DE4  3185  251C  318C   	fcall	_printf
  4898                           
  4899                           ;protocol.c: 179: } else if (!strncmp(("WDA"), (buf), 3)) {
  4900  0DE7  2CA0               	goto	l842
  4901  0DE8                     l6124:	
  4902  0DE8  3069               	movlw	low (STR_46| (0+32768))
  4903  0DE9  0020               	movlb	0	; select bank0
  4904  0DEA  00A0               	movwf	strncmp@s1
  4905  0DEB  3091               	movlw	high (STR_46| (0+32768))
  4906  0DEC  00A1               	movwf	strncmp@s1+1
  4907  0DED  3020               	movlw	low _buf
  4908  0DEE  00A2               	movwf	strncmp@s2
  4909  0DEF  3002               	movlw	high _buf
  4910  0DF0  00A3               	movwf	strncmp@s2+1
  4911  0DF1  3003               	movlw	3
  4912  0DF2  00A4               	movwf	strncmp@len
  4913  0DF3  3000               	movlw	0
  4914  0DF4  00A5               	movwf	strncmp@len+1
  4915  0DF5  3188  2002  318C   	fcall	_strncmp
  4916  0DF8  0020               	movlb	0	; select bank0
  4917  0DF9  0820               	movf	?_strncmp,w
  4918  0DFA  0421               	iorwf	?_strncmp+1,w
  4919  0DFB  1D03               	btfss	3,2
  4920  0DFC  2E0E               	goto	l6130
  4921                           
  4922                           ;protocol.c: 180: device_address = atoi(&buf[4]);
  4923  0DFD  3024               	movlw	low (_buf+4)
  4924  0DFE  00A6               	movwf	atoi@s
  4925  0DFF  3002               	movlw	high (_buf+4)
  4926  0E00  00A7               	movwf	atoi@s+1
  4927  0E01  3189  21E3  318C   	fcall	_atoi
  4928  0E04  0020               	movlb	0	; select bank0
  4929  0E05  0826               	movf	?_atoi,w
  4930  0E06  00E7               	movwf	??_PROTOCOL_Loop
  4931  0E07  0867               	movf	??_PROTOCOL_Loop,w
  4932  0E08  00EA               	movwf	PROTOCOL_Loop@device_address
  4933                           
  4934                           ;protocol.c: 181: PROTOCOL_Write_Device_Address(device_address);
  4935  0E09  086A               	movf	PROTOCOL_Loop@device_address,w
  4936  0E0A  3192  2263  318C   	fcall	_PROTOCOL_Write_Device_Address
  4937                           
  4938                           ;protocol.c: 182: } else if (!strncmp(("RDA"), (buf), 3)) {
  4939  0E0D  2CA0               	goto	l842
  4940  0E0E                     l6130:	
  4941  0E0E  3065               	movlw	low (STR_47| (0+32768))
  4942  0E0F  0020               	movlb	0	; select bank0
  4943  0E10  00A0               	movwf	strncmp@s1
  4944  0E11  3091               	movlw	high (STR_47| (0+32768))
  4945  0E12  00A1               	movwf	strncmp@s1+1
  4946  0E13  3020               	movlw	low _buf
  4947  0E14  00A2               	movwf	strncmp@s2
  4948  0E15  3002               	movlw	high _buf
  4949  0E16  00A3               	movwf	strncmp@s2+1
  4950  0E17  3003               	movlw	3
  4951  0E18  00A4               	movwf	strncmp@len
  4952  0E19  3000               	movlw	0
  4953  0E1A  00A5               	movwf	strncmp@len+1
  4954  0E1B  3188  2002  318C   	fcall	_strncmp
  4955  0E1E  0020               	movlb	0	; select bank0
  4956  0E1F  0820               	movf	?_strncmp,w
  4957  0E20  0421               	iorwf	?_strncmp+1,w
  4958  0E21  1D03               	btfss	3,2
  4959  0E22  2E39               	goto	l6136
  4960                           
  4961                           ;protocol.c: 183: device_address = PROTOCOL_Read_Device_Address();
  4962  0E23  3191  21DB  318C   	fcall	_PROTOCOL_Read_Device_Address
  4963  0E26  0020               	movlb	0	; select bank0
  4964  0E27  00E7               	movwf	??_PROTOCOL_Loop
  4965  0E28  0867               	movf	??_PROTOCOL_Loop,w
  4966  0E29  00EA               	movwf	PROTOCOL_Loop@device_address
  4967                           
  4968                           ;protocol.c: 184: printf("$:RDA:%d\n", device_address);
  4969  0E2A  30D4               	movlw	low (STR_48| (0+32768))
  4970  0E2B  00AE               	movwf	printf@f
  4971  0E2C  3090               	movlw	high (STR_48| (0+32768))
  4972  0E2D  00AF               	movwf	printf@f+1
  4973  0E2E  086A               	movf	PROTOCOL_Loop@device_address,w
  4974  0E2F  00E7               	movwf	??_PROTOCOL_Loop
  4975  0E30  01E8               	clrf	??_PROTOCOL_Loop+1
  4976  0E31  0867               	movf	??_PROTOCOL_Loop,w
  4977  0E32  00B0               	movwf	?_printf+2
  4978  0E33  0868               	movf	??_PROTOCOL_Loop+1,w
  4979  0E34  00B1               	movwf	?_printf+3
  4980  0E35  3185  251C  318C   	fcall	_printf
  4981                           
  4982                           ;protocol.c: 185: } else {
  4983  0E38  2CA0               	goto	l842
  4984  0E39                     l6136:	
  4985                           
  4986                           ;protocol.c: 186: PROTOCOL_EXT(buf);
  4987  0E39  3020               	movlw	(low (_buf| (0+512)))& (0+255)
  4988  0E3A  3192  22A8  318C   	fcall	_PROTOCOL_EXT
  4989  0E3D  2CA0               	goto	l842
  4990  0E3E                     __end_of_PROTOCOL_Loop:	
  4991                           
  4992                           	psect	text12
  4993  171A                     __ptext12:	
  4994 ;; *************** function _tick_handler *****************
  4995 ;; Defined at:
  4996 ;;		line 307 in file "main.c"
  4997 ;; Parameters:    Size  Location     Type
  4998 ;;		None
  4999 ;; Auto vars:     Size  Location     Type
  5000 ;;		None
  5001 ;; Return value:  Size  Location     Type
  5002 ;;                  1    wreg      void 
  5003 ;; Registers used:
  5004 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5005 ;; Tracked objects:
  5006 ;;		On entry : 0/0
  5007 ;;		On exit  : 0/0
  5008 ;;		Unchanged: 0/0
  5009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5011 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5012 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5013 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5014 ;;Total ram usage:        1 bytes
  5015 ;; Hardware stack levels used:    1
  5016 ;; Hardware stack levels required when called:    8
  5017 ;; This function calls:
  5018 ;;		___lwmod
  5019 ;;		_check_plg
  5020 ;;		_exec_remote_cmd
  5021 ;;		_scan_dev
  5022 ;; This function is called by:
  5023 ;;		_main
  5024 ;;		_PROTOCOL_Loop
  5025 ;; This function uses a non-reentrant model
  5026 ;;
  5027                           
  5028                           
  5029                           ;psect for function _tick_handler
  5030  171A                     _tick_handler:	
  5031                           
  5032                           ;main.c: 308: static uint16_t t = 0;
  5033                           ;main.c: 309: static int8_t cmd_next = 0;
  5034                           ;main.c: 310: t++;
  5035                           
  5036                           ;incstack = 0
  5037                           ; Regs used in _tick_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5038  171A  3001               	movlw	1
  5039  171B  0022               	movlb	2	; select bank2
  5040  171C  07B6               	addwf	tick_handler@t^(0+256),f
  5041  171D  3000               	movlw	0
  5042  171E  3DB7               	addwfc	(tick_handler@t+1)^(0+256),f
  5043                           
  5044                           ;main.c: 312: if (exec_remote_cmd(cmd_next)) {
  5045  171F  0021               	movlb	1	; select bank1
  5046  1720  0861               	movf	tick_handler@cmd_next^(0+128),w
  5047  1721  3183  2329  3197   	fcall	_exec_remote_cmd
  5048  1724  3A00               	xorlw	0
  5049  1725  1903               	skipnz
  5050  1726  2F32               	goto	l5754
  5051                           
  5052                           ;main.c: 313: cmd_next++;
  5053  1727  3001               	movlw	1
  5054  1728  0020               	movlb	0	; select bank0
  5055  1729  00C9               	movwf	??_tick_handler
  5056  172A  0849               	movf	??_tick_handler,w
  5057  172B  0021               	movlb	1	; select bank1
  5058  172C  07E1               	addwf	tick_handler@cmd_next^(0+128),f
  5059                           
  5060                           ;main.c: 314: if (cmd_next > 3) cmd_next = 0;
  5061  172D  0861               	movf	tick_handler@cmd_next^(0+128),w
  5062  172E  3A80               	xorlw	128
  5063  172F  3E7C               	addlw	-132
  5064  1730  1803               	btfsc	3,0
  5065  1731  01E1               	clrf	tick_handler@cmd_next^(0+128)
  5066  1732                     l5754:	
  5067                           
  5068                           ;main.c: 315: }
  5069                           ;main.c: 317: if (t % 60 == 0) {
  5070  1732  303C               	movlw	60
  5071  1733  0020               	movlb	0	; select bank0
  5072  1734  00A8               	movwf	___lwmod@divisor
  5073  1735  3000               	movlw	0
  5074  1736  00A9               	movwf	___lwmod@divisor+1
  5075  1737  0022               	movlb	2	; select bank2
  5076  1738  0837               	movf	(tick_handler@t+1)^(0+256),w
  5077  1739  0020               	movlb	0	; select bank0
  5078  173A  00AB               	movwf	___lwmod@dividend+1
  5079  173B  0022               	movlb	2	; select bank2
  5080  173C  0836               	movf	tick_handler@t^(0+256),w
  5081  173D  0020               	movlb	0	; select bank0
  5082  173E  00AA               	movwf	___lwmod@dividend
  5083  173F  3195  250A  3197   	fcall	___lwmod
  5084  1742  0020               	movlb	0	; select bank0
  5085  1743  0828               	movf	?___lwmod,w
  5086  1744  0429               	iorwf	?___lwmod+1,w
  5087  1745  1D03               	btfss	3,2
  5088  1746  2F4A               	goto	l5758
  5089                           
  5090                           ;main.c: 318: check_plg();
  5091  1747  3192  22BB         	fcall	_check_plg
  5092                           
  5093                           ;main.c: 319: } else if (t % 600 == 0) {
  5094  1749  0008               	return
  5095  174A                     l5758:	
  5096  174A  3058               	movlw	88
  5097  174B  0020               	movlb	0	; select bank0
  5098  174C  00A8               	movwf	___lwmod@divisor
  5099  174D  3002               	movlw	2
  5100  174E  00A9               	movwf	___lwmod@divisor+1
  5101  174F  0022               	movlb	2	; select bank2
  5102  1750  0837               	movf	(tick_handler@t+1)^(0+256),w
  5103  1751  0020               	movlb	0	; select bank0
  5104  1752  00AB               	movwf	___lwmod@dividend+1
  5105  1753  0022               	movlb	2	; select bank2
  5106  1754  0836               	movf	tick_handler@t^(0+256),w
  5107  1755  0020               	movlb	0	; select bank0
  5108  1756  00AA               	movwf	___lwmod@dividend
  5109  1757  3195  250A  3197   	fcall	___lwmod
  5110  175A  0020               	movlb	0	; select bank0
  5111  175B  0828               	movf	?___lwmod,w
  5112  175C  0429               	iorwf	?___lwmod+1,w
  5113  175D  1D03               	btfss	3,2
  5114  175E  0008               	return
  5115                           
  5116                           ;main.c: 320: scan_dev();
  5117  175F  3195  25C8         	fcall	_scan_dev
  5118                           
  5119                           ;main.c: 321: t = 0;
  5120  1761  0022               	movlb	2	; select bank2
  5121  1762  01B6               	clrf	tick_handler@t^(0+256)
  5122  1763  01B7               	clrf	(tick_handler@t+1)^(0+256)
  5123  1764  0008               	return
  5124  1765                     __end_of_tick_handler:	
  5125                           
  5126                           	psect	text13
  5127  0329                     __ptext13:	
  5128 ;; *************** function _exec_remote_cmd *****************
  5129 ;; Defined at:
  5130 ;;		line 53 in file "main.c"
  5131 ;; Parameters:    Size  Location     Type
  5132 ;;  idx             1    wreg     unsigned char 
  5133 ;; Auto vars:     Size  Location     Type
  5134 ;;  idx             1   50[BANK1 ] unsigned char 
  5135 ;;  send_buf       50    0[BANK1 ] unsigned char [50]
  5136 ;;  buf             2   55[BANK1 ] PTR unsigned char 
  5137 ;;		 -> cmd_buf(192), 
  5138 ;;  data            1   54[BANK1 ] unsigned char 
  5139 ;;  status          1   53[BANK1 ] unsigned char 
  5140 ;;  i               1   52[BANK1 ] unsigned char 
  5141 ;;  j               1   51[BANK1 ] unsigned char 
  5142 ;; Return value:  Size  Location     Type
  5143 ;;                  1    wreg      unsigned char 
  5144 ;; Registers used:
  5145 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5146 ;; Tracked objects:
  5147 ;;		On entry : 0/0
  5148 ;;		On exit  : 0/0
  5149 ;;		Unchanged: 0/0
  5150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5152 ;;      Locals:         0       0      57       0       0       0       0       0       0       0       0       0       
      +0       0
  5153 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5154 ;;      Totals:         0       5      57       0       0       0       0       0       0       0       0       0       
      +0       0
  5155 ;;Total ram usage:       62 bytes
  5156 ;; Hardware stack levels used:    1
  5157 ;; Hardware stack levels required when called:    6
  5158 ;; This function calls:
  5159 ;;		___wmul
  5160 ;;		_atoi
  5161 ;;		_i2c1_read
  5162 ;;		_i2c1_write
  5163 ;;		_i2c1_write_no_data
  5164 ;;		_printf
  5165 ;;		_strncmp
  5166 ;; This function is called by:
  5167 ;;		_tick_handler
  5168 ;; This function uses a non-reentrant model
  5169 ;;
  5170                           
  5171                           
  5172                           ;psect for function _exec_remote_cmd
  5173  0329                     _exec_remote_cmd:	
  5174                           
  5175                           ;incstack = 0
  5176                           ; Regs used in _exec_remote_cmd: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5177                           ;exec_remote_cmd@idx stored from wreg
  5178  0329  0021               	movlb	1	; select bank1
  5179  032A  00D2               	movwf	exec_remote_cmd@idx^(0+128)
  5180                           
  5181                           ;main.c: 54: uint8_t data;
  5182                           ;main.c: 55: uint8_t i, j;
  5183                           ;main.c: 56: uint8_t status;
  5184                           ;main.c: 58: uint8_t send_buf[48 + 2];
  5185                           ;main.c: 60: char *buf = cmd_buf[idx];
  5186  032B  0852               	movf	exec_remote_cmd@idx^(0+128),w
  5187  032C  0020               	movlb	0	; select bank0
  5188  032D  00C4               	movwf	??_exec_remote_cmd
  5189  032E  01C5               	clrf	??_exec_remote_cmd+1
  5190  032F  0844               	movf	??_exec_remote_cmd,w
  5191  0330  00A0               	movwf	___wmul@multiplier
  5192  0331  0845               	movf	??_exec_remote_cmd+1,w
  5193  0332  00A1               	movwf	___wmul@multiplier+1
  5194  0333  3030               	movlw	48
  5195  0334  00A2               	movwf	___wmul@multiplicand
  5196  0335  3000               	movlw	0
  5197  0336  00A3               	movwf	___wmul@multiplicand+1
  5198  0337  3193  2357  3183   	fcall	___wmul
  5199  033A  3030               	movlw	48
  5200  033B  0020               	movlb	0	; select bank0
  5201  033C  00C6               	movwf	??_exec_remote_cmd+2
  5202  033D  3023               	movlw	35
  5203  033E  00C7               	movwf	??_exec_remote_cmd+3
  5204  033F  0820               	movf	?___wmul,w
  5205  0340  0746               	addwf	??_exec_remote_cmd+2,w
  5206  0341  0021               	movlb	1	; select bank1
  5207  0342  00D7               	movwf	exec_remote_cmd@buf^(0+128)
  5208  0343  0020               	movlb	0	; select bank0
  5209  0344  0821               	movf	?___wmul+1,w
  5210  0345  3D47               	addwfc	??_exec_remote_cmd+3,w
  5211  0346  0021               	movlb	1	; select bank1
  5212  0347  00D8               	movwf	(exec_remote_cmd@buf+1)^(0+128)
  5213                           
  5214                           ;main.c: 61: if (buf[0] == '\0') return 0;
  5215  0348  0857               	movf	exec_remote_cmd@buf^(0+128),w
  5216  0349  0086               	movwf	6
  5217  034A  0858               	movf	(exec_remote_cmd@buf+1)^(0+128),w
  5218  034B  0087               	movwf	7
  5219  034C  0801               	movf	1,w
  5220  034D  1D03               	btfss	3,2
  5221  034E  2B51               	goto	l5484
  5222  034F  3000               	movlw	0
  5223  0350  0008               	return
  5224  0351                     l5484:	
  5225                           
  5226                           ;main.c: 63: if (!strncmp(("WHO"), (buf), 3)) {
  5227  0351  308D               	movlw	low (STR_1| (0+32768))
  5228  0352  0020               	movlb	0	; select bank0
  5229  0353  00A0               	movwf	strncmp@s1
  5230  0354  3091               	movlw	high (STR_1| (0+32768))
  5231  0355  00A1               	movwf	strncmp@s1+1
  5232  0356  0021               	movlb	1	; select bank1
  5233  0357  0858               	movf	(exec_remote_cmd@buf+1)^(0+128),w
  5234  0358  0020               	movlb	0	; select bank0
  5235  0359  00A3               	movwf	strncmp@s2+1
  5236  035A  0021               	movlb	1	; select bank1
  5237  035B  0857               	movf	exec_remote_cmd@buf^(0+128),w
  5238  035C  0020               	movlb	0	; select bank0
  5239  035D  00A2               	movwf	strncmp@s2
  5240  035E  3003               	movlw	3
  5241  035F  00A4               	movwf	strncmp@len
  5242  0360  3000               	movlw	0
  5243  0361  00A5               	movwf	strncmp@len+1
  5244  0362  3188  2002  3183   	fcall	_strncmp
  5245  0365  0020               	movlb	0	; select bank0
  5246  0366  0820               	movf	?_strncmp,w
  5247  0367  0421               	iorwf	?_strncmp+1,w
  5248  0368  1D03               	btfss	3,2
  5249  0369  2B90               	goto	l5494
  5250                           
  5251                           ;main.c: 64: status = i2c1_read(BACKPLANE_SLAVE_ADDRESS, 0x01, &data, 1);
  5252  036A  0021               	movlb	1	; select bank1
  5253  036B  086E               	movf	_BACKPLANE_SLAVE_ADDRESS^(0+128),w
  5254  036C  0020               	movlb	0	; select bank0
  5255  036D  00C4               	movwf	??_exec_remote_cmd
  5256  036E  01C5               	clrf	??_exec_remote_cmd+1
  5257  036F  0844               	movf	??_exec_remote_cmd,w
  5258  0370  00B0               	movwf	i2c1_read@dev_addr
  5259  0371  0845               	movf	??_exec_remote_cmd+1,w
  5260  0372  00B1               	movwf	i2c1_read@dev_addr+1
  5261  0373  01B2               	clrf	i2c1_read@reg_addr
  5262  0374  0AB2               	incf	i2c1_read@reg_addr,f
  5263  0375  30D6               	movlw	low exec_remote_cmd@data
  5264  0376  00B3               	movwf	i2c1_read@pbuf
  5265  0377  3000               	movlw	high exec_remote_cmd@data
  5266  0378  00B4               	movwf	i2c1_read@pbuf+1
  5267  0379  01B5               	clrf	i2c1_read@len
  5268  037A  0AB5               	incf	i2c1_read@len,f
  5269  037B  3189  2137  3183   	fcall	_i2c1_read
  5270  037E  0020               	movlb	0	; select bank0
  5271  037F  00C6               	movwf	??_exec_remote_cmd+2
  5272  0380  0846               	movf	??_exec_remote_cmd+2,w
  5273  0381  0021               	movlb	1	; select bank1
  5274  0382  00D5               	movwf	exec_remote_cmd@status^(0+128)
  5275                           
  5276                           ;main.c: 65: if (status == 0) printf("$:WHO:%d\n", data);
  5277  0383  0855               	movf	exec_remote_cmd@status^(0+128),w
  5278  0384  1D03               	btfss	3,2
  5279  0385  2B8B               	goto	l5492
  5280  0386  3010               	movlw	low (STR_2| (0+32768))
  5281  0387  0020               	movlb	0	; select bank0
  5282  0388  00AE               	movwf	printf@f
  5283  0389  3091               	movlw	high (STR_2| (0+32768))
  5284  038A  2CA3               	goto	L5
  5285  038B                     l5492:	
  5286                           
  5287                           ;main.c: 66: else printf("!\n");
  5288  038B  30AD               	movlw	low (STR_3| (0+32768))
  5289  038C  0020               	movlb	0	; select bank0
  5290  038D  00AE               	movwf	printf@f
  5291  038E  3091               	movlw	high (STR_3| (0+32768))
  5292  038F  2D11               	goto	L6
  5293  0390                     l5494:	
  5294                           ;main.c: 67: } else if (!strncmp(("SAV"), (buf), 3)) {
  5295                           
  5296  0390  30A5               	movlw	low (STR_4| (0+32768))
  5297  0391  0020               	movlb	0	; select bank0
  5298  0392  00A0               	movwf	strncmp@s1
  5299  0393  3091               	movlw	high (STR_4| (0+32768))
  5300  0394  00A1               	movwf	strncmp@s1+1
  5301  0395  0021               	movlb	1	; select bank1
  5302  0396  0858               	movf	(exec_remote_cmd@buf+1)^(0+128),w
  5303  0397  0020               	movlb	0	; select bank0
  5304  0398  00A3               	movwf	strncmp@s2+1
  5305  0399  0021               	movlb	1	; select bank1
  5306  039A  0857               	movf	exec_remote_cmd@buf^(0+128),w
  5307  039B  0020               	movlb	0	; select bank0
  5308  039C  00A2               	movwf	strncmp@s2
  5309  039D  3003               	movlw	3
  5310  039E  00A4               	movwf	strncmp@len
  5311  039F  3000               	movlw	0
  5312  03A0  00A5               	movwf	strncmp@len+1
  5313  03A1  3188  2002  3183   	fcall	_strncmp
  5314  03A4  0020               	movlb	0	; select bank0
  5315  03A5  0820               	movf	?_strncmp,w
  5316  03A6  0421               	iorwf	?_strncmp+1,w
  5317  03A7  1D03               	btfss	3,2
  5318  03A8  2BB4               	goto	l5498
  5319                           
  5320                           ;main.c: 68: status = i2c1_write_no_data(BACKPLANE_SLAVE_ADDRESS, 0x03);
  5321  03A9  0021               	movlb	1	; select bank1
  5322  03AA  086E               	movf	_BACKPLANE_SLAVE_ADDRESS^(0+128),w
  5323  03AB  0020               	movlb	0	; select bank0
  5324  03AC  00C4               	movwf	??_exec_remote_cmd
  5325  03AD  01C5               	clrf	??_exec_remote_cmd+1
  5326  03AE  0844               	movf	??_exec_remote_cmd,w
  5327  03AF  00AE               	movwf	i2c1_write_no_data@dev_addr
  5328  03B0  0845               	movf	??_exec_remote_cmd+1,w
  5329  03B1  00AF               	movwf	i2c1_write_no_data@dev_addr+1
  5330  03B2  3003               	movlw	3
  5331  03B3  2BD7               	goto	L4
  5332  03B4                     l5498:	
  5333                           ;main.c: 69: } else if (!strncmp(("STA"), (buf), 3)) {
  5334                           
  5335  03B4  3075               	movlw	low (STR_5| (0+32768))
  5336  03B5  0020               	movlb	0	; select bank0
  5337  03B6  00A0               	movwf	strncmp@s1
  5338  03B7  3091               	movlw	high (STR_5| (0+32768))
  5339  03B8  00A1               	movwf	strncmp@s1+1
  5340  03B9  0021               	movlb	1	; select bank1
  5341  03BA  0858               	movf	(exec_remote_cmd@buf+1)^(0+128),w
  5342  03BB  0020               	movlb	0	; select bank0
  5343  03BC  00A3               	movwf	strncmp@s2+1
  5344  03BD  0021               	movlb	1	; select bank1
  5345  03BE  0857               	movf	exec_remote_cmd@buf^(0+128),w
  5346  03BF  0020               	movlb	0	; select bank0
  5347  03C0  00A2               	movwf	strncmp@s2
  5348  03C1  3003               	movlw	3
  5349  03C2  00A4               	movwf	strncmp@len
  5350  03C3  3000               	movlw	0
  5351  03C4  00A5               	movwf	strncmp@len+1
  5352  03C5  3188  2002  3183   	fcall	_strncmp
  5353  03C8  0020               	movlb	0	; select bank0
  5354  03C9  0820               	movf	?_strncmp,w
  5355  03CA  0421               	iorwf	?_strncmp+1,w
  5356  03CB  1D03               	btfss	3,2
  5357  03CC  2BE3               	goto	l5502
  5358                           
  5359                           ;main.c: 70: status = i2c1_write_no_data(BACKPLANE_SLAVE_ADDRESS, 0x04);
  5360  03CD  0021               	movlb	1	; select bank1
  5361  03CE  086E               	movf	_BACKPLANE_SLAVE_ADDRESS^(0+128),w
  5362  03CF  0020               	movlb	0	; select bank0
  5363  03D0  00C4               	movwf	??_exec_remote_cmd
  5364  03D1  01C5               	clrf	??_exec_remote_cmd+1
  5365  03D2  0844               	movf	??_exec_remote_cmd,w
  5366  03D3  00AE               	movwf	i2c1_write_no_data@dev_addr
  5367  03D4  0845               	movf	??_exec_remote_cmd+1,w
  5368  03D5  00AF               	movwf	i2c1_write_no_data@dev_addr+1
  5369  03D6  3004               	movlw	4
  5370  03D7                     L4:	
  5371  03D7  00C6               	movwf	??_exec_remote_cmd+2
  5372  03D8  0846               	movf	??_exec_remote_cmd+2,w
  5373  03D9  00B0               	movwf	i2c1_write_no_data@reg_addr
  5374  03DA  3194  24B3  3183   	fcall	_i2c1_write_no_data
  5375  03DD  0020               	movlb	0	; select bank0
  5376  03DE  00C7               	movwf	??_exec_remote_cmd+3
  5377  03DF  0847               	movf	??_exec_remote_cmd+3,w
  5378  03E0  0021               	movlb	1	; select bank1
  5379  03E1  00D5               	movwf	exec_remote_cmd@status^(0+128)
  5380                           
  5381                           ;main.c: 71: } else if (!strncmp(("STP"), (buf), 3)) {
  5382  03E2  2D14               	goto	l5540
  5383  03E3                     l5502:	
  5384  03E3  3095               	movlw	low (STR_6| (0+32768))
  5385  03E4  0020               	movlb	0	; select bank0
  5386  03E5  00A0               	movwf	strncmp@s1
  5387  03E6  3091               	movlw	high (STR_6| (0+32768))
  5388  03E7  00A1               	movwf	strncmp@s1+1
  5389  03E8  0021               	movlb	1	; select bank1
  5390  03E9  0858               	movf	(exec_remote_cmd@buf+1)^(0+128),w
  5391  03EA  0020               	movlb	0	; select bank0
  5392  03EB  00A3               	movwf	strncmp@s2+1
  5393  03EC  0021               	movlb	1	; select bank1
  5394  03ED  0857               	movf	exec_remote_cmd@buf^(0+128),w
  5395  03EE  0020               	movlb	0	; select bank0
  5396  03EF  00A2               	movwf	strncmp@s2
  5397  03F0  3003               	movlw	3
  5398  03F1  00A4               	movwf	strncmp@len
  5399  03F2  3000               	movlw	0
  5400  03F3  00A5               	movwf	strncmp@len+1
  5401  03F4  3188  2002  3183   	fcall	_strncmp
  5402  03F7  0020               	movlb	0	; select bank0
  5403  03F8  0820               	movf	?_strncmp,w
  5404  03F9  0421               	iorwf	?_strncmp+1,w
  5405  03FA  1D03               	btfss	3,2
  5406  03FB  2C1E               	goto	l5512
  5407                           
  5408                           ;main.c: 72: status = i2c1_write_no_data(BACKPLANE_SLAVE_ADDRESS, 0x05);
  5409  03FC  0021               	movlb	1	; select bank1
  5410  03FD  086E               	movf	_BACKPLANE_SLAVE_ADDRESS^(0+128),w
  5411  03FE  0020               	movlb	0	; select bank0
  5412  03FF  00C4               	movwf	??_exec_remote_cmd
  5413  0400  01C5               	clrf	??_exec_remote_cmd+1
  5414  0401  0844               	movf	??_exec_remote_cmd,w
  5415  0402  00AE               	movwf	i2c1_write_no_data@dev_addr
  5416  0403  0845               	movf	??_exec_remote_cmd+1,w
  5417  0404  00AF               	movwf	i2c1_write_no_data@dev_addr+1
  5418  0405  3005               	movlw	5
  5419  0406  00C6               	movwf	??_exec_remote_cmd+2
  5420  0407  0846               	movf	??_exec_remote_cmd+2,w
  5421  0408  00B0               	movwf	i2c1_write_no_data@reg_addr
  5422  0409  3194  24B3  3183   	fcall	_i2c1_write_no_data
  5423  040C  0020               	movlb	0	; select bank0
  5424  040D  00C7               	movwf	??_exec_remote_cmd+3
  5425  040E  0847               	movf	??_exec_remote_cmd+3,w
  5426  040F  0021               	movlb	1	; select bank1
  5427  0410  00D5               	movwf	exec_remote_cmd@status^(0+128)
  5428                           
  5429                           ;main.c: 73: if (status == 0) printf("*:STP:ACK\n");
  5430  0411  0855               	movf	exec_remote_cmd@status^(0+128),w
  5431  0412  1D03               	btfss	3,2
  5432  0413  2C19               	goto	l5510
  5433  0414  30C9               	movlw	low (STR_7| (0+32768))
  5434  0415  0020               	movlb	0	; select bank0
  5435  0416  00AE               	movwf	printf@f
  5436  0417  3090               	movlw	high (STR_7| (0+32768))
  5437  0418  2D11               	goto	L6
  5438  0419                     l5510:	
  5439                           
  5440                           ;main.c: 74: else printf("!:STP:NACK\n");
  5441  0419  30BD               	movlw	low (STR_8| (0+32768))
  5442  041A  0020               	movlb	0	; select bank0
  5443  041B  00AE               	movwf	printf@f
  5444  041C  3090               	movlw	high (STR_8| (0+32768))
  5445  041D  2D11               	goto	L6
  5446  041E                     l5512:	
  5447                           ;main.c: 75: } else if (!strncmp(("SET"), (buf), 3)) {
  5448                           
  5449  041E  30A1               	movlw	low (STR_9| (0+32768))
  5450  041F  0020               	movlb	0	; select bank0
  5451  0420  00A0               	movwf	strncmp@s1
  5452  0421  3091               	movlw	high (STR_9| (0+32768))
  5453  0422  00A1               	movwf	strncmp@s1+1
  5454  0423  0021               	movlb	1	; select bank1
  5455  0424  0858               	movf	(exec_remote_cmd@buf+1)^(0+128),w
  5456  0425  0020               	movlb	0	; select bank0
  5457  0426  00A3               	movwf	strncmp@s2+1
  5458  0427  0021               	movlb	1	; select bank1
  5459  0428  0857               	movf	exec_remote_cmd@buf^(0+128),w
  5460  0429  0020               	movlb	0	; select bank0
  5461  042A  00A2               	movwf	strncmp@s2
  5462  042B  3003               	movlw	3
  5463  042C  00A4               	movwf	strncmp@len
  5464  042D  3000               	movlw	0
  5465  042E  00A5               	movwf	strncmp@len+1
  5466  042F  3188  2002  3183   	fcall	_strncmp
  5467  0432  0020               	movlb	0	; select bank0
  5468  0433  0820               	movf	?_strncmp,w
  5469  0434  0421               	iorwf	?_strncmp+1,w
  5470  0435  1D03               	btfss	3,2
  5471  0436  2C70               	goto	l5516
  5472                           
  5473                           ;main.c: 76: data = atoi(&buf[4]);
  5474  0437  0021               	movlb	1	; select bank1
  5475  0438  0857               	movf	exec_remote_cmd@buf^(0+128),w
  5476  0439  3E04               	addlw	4
  5477  043A  0020               	movlb	0	; select bank0
  5478  043B  00C4               	movwf	??_exec_remote_cmd
  5479  043C  3000               	movlw	0
  5480  043D  0021               	movlb	1	; select bank1
  5481  043E  3D58               	addwfc	(exec_remote_cmd@buf+1)^(0+128),w
  5482  043F  0020               	movlb	0	; select bank0
  5483  0440  00C5               	movwf	??_exec_remote_cmd+1
  5484  0441  0844               	movf	??_exec_remote_cmd,w
  5485  0442  00A6               	movwf	atoi@s
  5486  0443  0845               	movf	??_exec_remote_cmd+1,w
  5487  0444  00A7               	movwf	atoi@s+1
  5488  0445  3189  21E3  3183   	fcall	_atoi
  5489  0448  0020               	movlb	0	; select bank0
  5490  0449  0826               	movf	?_atoi,w
  5491  044A  00C6               	movwf	??_exec_remote_cmd+2
  5492  044B  0846               	movf	??_exec_remote_cmd+2,w
  5493  044C  0021               	movlb	1	; select bank1
  5494  044D  00D6               	movwf	exec_remote_cmd@data^(0+128)
  5495                           
  5496                           ;main.c: 77: i2c1_write_no_data(BACKPLANE_SLAVE_ADDRESS, 0x08);
  5497  044E  086E               	movf	_BACKPLANE_SLAVE_ADDRESS^(0+128),w
  5498  044F  0020               	movlb	0	; select bank0
  5499  0450  00C4               	movwf	??_exec_remote_cmd
  5500  0451  01C5               	clrf	??_exec_remote_cmd+1
  5501  0452  0844               	movf	??_exec_remote_cmd,w
  5502  0453  00AE               	movwf	i2c1_write_no_data@dev_addr
  5503  0454  0845               	movf	??_exec_remote_cmd+1,w
  5504  0455  00AF               	movwf	i2c1_write_no_data@dev_addr+1
  5505  0456  3008               	movlw	8
  5506  0457  00C6               	movwf	??_exec_remote_cmd+2
  5507  0458  0846               	movf	??_exec_remote_cmd+2,w
  5508  0459  00B0               	movwf	i2c1_write_no_data@reg_addr
  5509  045A  3194  24B3  3183   	fcall	_i2c1_write_no_data
  5510                           
  5511                           ;main.c: 78: i2c1_write_no_data(BACKPLANE_SLAVE_ADDRESS, data);
  5512  045D  0021               	movlb	1	; select bank1
  5513  045E  086E               	movf	_BACKPLANE_SLAVE_ADDRESS^(0+128),w
  5514  045F  0020               	movlb	0	; select bank0
  5515  0460  00C4               	movwf	??_exec_remote_cmd
  5516  0461  01C5               	clrf	??_exec_remote_cmd+1
  5517  0462  0844               	movf	??_exec_remote_cmd,w
  5518  0463  00AE               	movwf	i2c1_write_no_data@dev_addr
  5519  0464  0845               	movf	??_exec_remote_cmd+1,w
  5520  0465  00AF               	movwf	i2c1_write_no_data@dev_addr+1
  5521  0466  0021               	movlb	1	; select bank1
  5522  0467  0856               	movf	exec_remote_cmd@data^(0+128),w
  5523  0468  0020               	movlb	0	; select bank0
  5524  0469  00C6               	movwf	??_exec_remote_cmd+2
  5525  046A  0846               	movf	??_exec_remote_cmd+2,w
  5526  046B  00B0               	movwf	i2c1_write_no_data@reg_addr
  5527  046C  3194  24B3  3183   	fcall	_i2c1_write_no_data
  5528                           
  5529                           ;main.c: 79: } else if (!strncmp(("GET"), (buf), 3)) {
  5530  046F  2D14               	goto	l5540
  5531  0470                     l5516:	
  5532  0470  309D               	movlw	low (STR_10| (0+32768))
  5533  0471  0020               	movlb	0	; select bank0
  5534  0472  00A0               	movwf	strncmp@s1
  5535  0473  3091               	movlw	high (STR_10| (0+32768))
  5536  0474  00A1               	movwf	strncmp@s1+1
  5537  0475  0021               	movlb	1	; select bank1
  5538  0476  0858               	movf	(exec_remote_cmd@buf+1)^(0+128),w
  5539  0477  0020               	movlb	0	; select bank0
  5540  0478  00A3               	movwf	strncmp@s2+1
  5541  0479  0021               	movlb	1	; select bank1
  5542  047A  0857               	movf	exec_remote_cmd@buf^(0+128),w
  5543  047B  0020               	movlb	0	; select bank0
  5544  047C  00A2               	movwf	strncmp@s2
  5545  047D  3003               	movlw	3
  5546  047E  00A4               	movwf	strncmp@len
  5547  047F  3000               	movlw	0
  5548  0480  00A5               	movwf	strncmp@len+1
  5549  0481  3188  2002  3183   	fcall	_strncmp
  5550  0484  0020               	movlb	0	; select bank0
  5551  0485  0820               	movf	?_strncmp,w
  5552  0486  0421               	iorwf	?_strncmp+1,w
  5553  0487  1D03               	btfss	3,2
  5554  0488  2CAE               	goto	l5522
  5555                           
  5556                           ;main.c: 80: i2c1_read(BACKPLANE_SLAVE_ADDRESS, 0x09, &data, 1);
  5557  0489  0021               	movlb	1	; select bank1
  5558  048A  086E               	movf	_BACKPLANE_SLAVE_ADDRESS^(0+128),w
  5559  048B  0020               	movlb	0	; select bank0
  5560  048C  00C4               	movwf	??_exec_remote_cmd
  5561  048D  01C5               	clrf	??_exec_remote_cmd+1
  5562  048E  0844               	movf	??_exec_remote_cmd,w
  5563  048F  00B0               	movwf	i2c1_read@dev_addr
  5564  0490  0845               	movf	??_exec_remote_cmd+1,w
  5565  0491  00B1               	movwf	i2c1_read@dev_addr+1
  5566  0492  3009               	movlw	9
  5567  0493  00C6               	movwf	??_exec_remote_cmd+2
  5568  0494  0846               	movf	??_exec_remote_cmd+2,w
  5569  0495  00B2               	movwf	i2c1_read@reg_addr
  5570  0496  30D6               	movlw	low exec_remote_cmd@data
  5571  0497  00B3               	movwf	i2c1_read@pbuf
  5572  0498  3000               	movlw	high exec_remote_cmd@data
  5573  0499  00B4               	movwf	i2c1_read@pbuf+1
  5574  049A  01B5               	clrf	i2c1_read@len
  5575  049B  0AB5               	incf	i2c1_read@len,f
  5576  049C  3189  2137  3183   	fcall	_i2c1_read
  5577                           
  5578                           ;main.c: 81: printf("$:GET:%d\n", data);
  5579  049F  301A               	movlw	low (STR_11| (0+32768))
  5580  04A0  0020               	movlb	0	; select bank0
  5581  04A1  00AE               	movwf	printf@f
  5582  04A2  3091               	movlw	high (STR_11| (0+32768))
  5583  04A3                     L5:	
  5584  04A3  00AF               	movwf	printf@f+1
  5585  04A4  0021               	movlb	1	; select bank1
  5586  04A5  0856               	movf	exec_remote_cmd@data^(0+128),w
  5587  04A6  0020               	movlb	0	; select bank0
  5588  04A7  00C4               	movwf	??_exec_remote_cmd
  5589  04A8  01C5               	clrf	??_exec_remote_cmd+1
  5590  04A9  0844               	movf	??_exec_remote_cmd,w
  5591  04AA  00B0               	movwf	?_printf+2
  5592  04AB  0845               	movf	??_exec_remote_cmd+1,w
  5593  04AC  00B1               	movwf	?_printf+3
  5594  04AD  2D12               	goto	L3
  5595  04AE                     l5522:	
  5596                           ;main.c: 83: } else {
  5597                           
  5598                           
  5599                           ;main.c: 84: i = 0;
  5600  04AE  0021               	movlb	1	; select bank1
  5601  04AF  01D4               	clrf	exec_remote_cmd@i^(0+128)
  5602                           
  5603                           ;main.c: 85: j = 2;
  5604  04B0  3002               	movlw	2
  5605  04B1  0020               	movlb	0	; select bank0
  5606  04B2  00C4               	movwf	??_exec_remote_cmd
  5607  04B3  0844               	movf	??_exec_remote_cmd,w
  5608  04B4  0021               	movlb	1	; select bank1
  5609  04B5  00D3               	movwf	exec_remote_cmd@j^(0+128)
  5610  04B6                     l5526:	
  5611                           ;main.c: 86: do {
  5612                           
  5613                           
  5614                           ;main.c: 87: send_buf[j++] = (uint8_t)buf[i];
  5615  04B6  0854               	movf	exec_remote_cmd@i^(0+128),w
  5616  04B7  0020               	movlb	0	; select bank0
  5617  04B8  00C4               	movwf	??_exec_remote_cmd
  5618  04B9  01C5               	clrf	??_exec_remote_cmd+1
  5619  04BA  0844               	movf	??_exec_remote_cmd,w
  5620  04BB  0021               	movlb	1	; select bank1
  5621  04BC  0757               	addwf	exec_remote_cmd@buf^(0+128),w
  5622  04BD  0086               	movwf	6
  5623  04BE  0020               	movlb	0	; select bank0
  5624  04BF  0845               	movf	??_exec_remote_cmd+1,w
  5625  04C0  0021               	movlb	1	; select bank1
  5626  04C1  3D58               	addwfc	(exec_remote_cmd@buf+1)^(0+128),w
  5627  04C2  0087               	movwf	7
  5628  04C3  0801               	movf	1,w
  5629  04C4  0020               	movlb	0	; select bank0
  5630  04C5  00C6               	movwf	??_exec_remote_cmd+2
  5631  04C6  0021               	movlb	1	; select bank1
  5632  04C7  0853               	movf	exec_remote_cmd@j^(0+128),w
  5633  04C8  3EA0               	addlw	(low (exec_remote_cmd@send_buf| 0))& (0+255)
  5634  04C9  0086               	movwf	6
  5635  04CA  0187               	clrf	7
  5636  04CB  0020               	movlb	0	; select bank0
  5637  04CC  0846               	movf	??_exec_remote_cmd+2,w
  5638  04CD  0081               	movwf	1
  5639  04CE  3001               	movlw	1
  5640  04CF  00C4               	movwf	??_exec_remote_cmd
  5641  04D0  0844               	movf	??_exec_remote_cmd,w
  5642  04D1  0021               	movlb	1	; select bank1
  5643  04D2  07D3               	addwf	exec_remote_cmd@j^(0+128),f
  5644                           
  5645                           ;main.c: 88: } while (buf[i++] != '\0');
  5646  04D3  0854               	movf	exec_remote_cmd@i^(0+128),w
  5647  04D4  0AD4               	incf	exec_remote_cmd@i^(0+128),f
  5648  04D5  0020               	movlb	0	; select bank0
  5649  04D6  00C4               	movwf	??_exec_remote_cmd
  5650  04D7  01C5               	clrf	??_exec_remote_cmd+1
  5651  04D8  0844               	movf	??_exec_remote_cmd,w
  5652  04D9  0021               	movlb	1	; select bank1
  5653  04DA  0757               	addwf	exec_remote_cmd@buf^(0+128),w
  5654  04DB  0086               	movwf	6
  5655  04DC  0020               	movlb	0	; select bank0
  5656  04DD  0845               	movf	??_exec_remote_cmd+1,w
  5657  04DE  0021               	movlb	1	; select bank1
  5658  04DF  3D58               	addwfc	(exec_remote_cmd@buf+1)^(0+128),w
  5659  04E0  0087               	movwf	7
  5660  04E1  0801               	movf	1,w
  5661  04E2  1D03               	btfss	3,2
  5662  04E3  2CB6               	goto	l5526
  5663                           
  5664                           ;main.c: 89: send_buf[0] = 0x0a;
  5665  04E4  300A               	movlw	10
  5666  04E5  0020               	movlb	0	; select bank0
  5667  04E6  00C4               	movwf	??_exec_remote_cmd
  5668  04E7  0844               	movf	??_exec_remote_cmd,w
  5669  04E8  0021               	movlb	1	; select bank1
  5670  04E9  00A0               	movwf	exec_remote_cmd@send_buf^(0+128)
  5671                           
  5672                           ;main.c: 90: send_buf[1] = i;
  5673  04EA  0854               	movf	exec_remote_cmd@i^(0+128),w
  5674  04EB  0020               	movlb	0	; select bank0
  5675  04EC  00C4               	movwf	??_exec_remote_cmd
  5676  04ED  0844               	movf	??_exec_remote_cmd,w
  5677  04EE  0021               	movlb	1	; select bank1
  5678  04EF  00A1               	movwf	(exec_remote_cmd@send_buf^(0+128)+1)
  5679                           
  5680                           ;main.c: 91: status = i2c1_write(BACKPLANE_SLAVE_ADDRESS, send_buf, j);
  5681  04F0  086E               	movf	_BACKPLANE_SLAVE_ADDRESS^(0+128),w
  5682  04F1  0020               	movlb	0	; select bank0
  5683  04F2  00C4               	movwf	??_exec_remote_cmd
  5684  04F3  01C5               	clrf	??_exec_remote_cmd+1
  5685  04F4  0844               	movf	??_exec_remote_cmd,w
  5686  04F5  00AE               	movwf	i2c1_write@dev_addr
  5687  04F6  0845               	movf	??_exec_remote_cmd+1,w
  5688  04F7  00AF               	movwf	i2c1_write@dev_addr+1
  5689  04F8  30A0               	movlw	(low (exec_remote_cmd@send_buf| 0))& (0+255)
  5690  04F9  00C6               	movwf	??_exec_remote_cmd+2
  5691  04FA  0846               	movf	??_exec_remote_cmd+2,w
  5692  04FB  00B0               	movwf	i2c1_write@pbuf
  5693  04FC  0021               	movlb	1	; select bank1
  5694  04FD  0853               	movf	exec_remote_cmd@j^(0+128),w
  5695  04FE  0020               	movlb	0	; select bank0
  5696  04FF  00C7               	movwf	??_exec_remote_cmd+3
  5697  0500  0847               	movf	??_exec_remote_cmd+3,w
  5698  0501  00B1               	movwf	i2c1_write@len
  5699  0502  3194  2461  3183   	fcall	_i2c1_write
  5700  0505  0020               	movlb	0	; select bank0
  5701  0506  00C8               	movwf	??_exec_remote_cmd+4
  5702  0507  0848               	movf	??_exec_remote_cmd+4,w
  5703  0508  0021               	movlb	1	; select bank1
  5704  0509  00D5               	movwf	exec_remote_cmd@status^(0+128)
  5705                           
  5706                           ;main.c: 92: if (status != 0) printf("!:NO ACK FROM I2C SLAVE\n");
  5707  050A  0855               	movf	exec_remote_cmd@status^(0+128),w
  5708  050B  1903               	btfsc	3,2
  5709  050C  2D14               	goto	l5540
  5710  050D  3059               	movlw	low (STR_12| (0+32768))
  5711  050E  0020               	movlb	0	; select bank0
  5712  050F  00AE               	movwf	printf@f
  5713  0510  3090               	movlw	high (STR_12| (0+32768))
  5714  0511                     L6:	
  5715  0511  00AF               	movwf	printf@f+1
  5716  0512                     L3:	
  5717  0512  3185  251C         	fcall	_printf
  5718  0514                     l5540:	
  5719                           
  5720                           ;main.c: 94: }
  5721                           ;main.c: 95: buf[0] = '\0';
  5722  0514  0021               	movlb	1	; select bank1
  5723  0515  0857               	movf	exec_remote_cmd@buf^(0+128),w
  5724  0516  0086               	movwf	6
  5725  0517  0858               	movf	(exec_remote_cmd@buf+1)^(0+128),w
  5726  0518  0087               	movwf	7
  5727  0519  0181               	clrf	1
  5728                           
  5729                           ;main.c: 96: return 1;
  5730  051A  3001               	movlw	1
  5731  051B  0008               	return
  5732  051C                     __end_of_exec_remote_cmd:	
  5733                           
  5734                           	psect	text14
  5735  1461                     __ptext14:	
  5736 ;; *************** function _i2c1_write *****************
  5737 ;; Defined at:
  5738 ;;		line 8 in file "i2c1_util.c"
  5739 ;; Parameters:    Size  Location     Type
  5740 ;;  dev_addr        2   14[BANK0 ] unsigned int 
  5741 ;;  pbuf            1   16[BANK0 ] PTR unsigned char 
  5742 ;;		 -> exec_remote_cmd@send_buf(50), 
  5743 ;;  len             1   17[BANK0 ] unsigned char 
  5744 ;; Auto vars:     Size  Location     Type
  5745 ;;  status          1   21[BANK0 ] enum E3078
  5746 ;;  write_status    1   20[BANK0 ] unsigned char 
  5747 ;; Return value:  Size  Location     Type
  5748 ;;                  1    wreg      unsigned char 
  5749 ;; Registers used:
  5750 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5751 ;; Tracked objects:
  5752 ;;		On entry : 0/0
  5753 ;;		On exit  : 0/0
  5754 ;;		Unchanged: 0/0
  5755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5756 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5757 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5758 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5759 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5760 ;;Total ram usage:        8 bytes
  5761 ;; Hardware stack levels used:    1
  5762 ;; Hardware stack levels required when called:    5
  5763 ;; This function calls:
  5764 ;;		_I2C1_MasterWrite
  5765 ;; This function is called by:
  5766 ;;		_exec_remote_cmd
  5767 ;; This function uses a non-reentrant model
  5768 ;;
  5769                           
  5770                           
  5771                           ;psect for function _i2c1_write
  5772  1461                     _i2c1_write:	
  5773                           
  5774                           ;i2c1_util.c: 10: I2C1_MESSAGE_STATUS status;
  5775                           ;i2c1_util.c: 11: uint8_t write_status;
  5776                           ;i2c1_util.c: 12: _delay((unsigned long)((100)*(32000000/4000000.0)));
  5777                           
  5778                           ;incstack = 0
  5779                           ; Regs used in _i2c1_write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5780  1461  30A0               	movlw	160
  5781  1462                     u7397:	
  5782  1462  3200               	nop2
  5783  1463  0B89               	decfsz	9,f
  5784  1464  2C62               	goto	u7397
  5785                           
  5786                           ;i2c1_util.c: 13: I2C1_MasterWrite(pbuf, len, dev_addr, &status);
  5787  1465  0020               	movlb	0	; select bank0
  5788  1466  0831               	movf	i2c1_write@len,w
  5789  1467  00B2               	movwf	??_i2c1_write
  5790  1468  0832               	movf	??_i2c1_write,w
  5791  1469  00A7               	movwf	I2C1_MasterWrite@length
  5792  146A  082F               	movf	i2c1_write@dev_addr+1,w
  5793  146B  00A9               	movwf	I2C1_MasterWrite@address+1
  5794  146C  082E               	movf	i2c1_write@dev_addr,w
  5795  146D  00A8               	movwf	I2C1_MasterWrite@address
  5796  146E  3035               	movlw	(low (i2c1_write@status| 0))& (0+255)
  5797  146F  00B3               	movwf	??_i2c1_write+1
  5798  1470  0833               	movf	??_i2c1_write+1,w
  5799  1471  00AA               	movwf	I2C1_MasterWrite@pflag
  5800  1472  0830               	movf	i2c1_write@pbuf,w
  5801  1473  3194  2489  3194   	fcall	_I2C1_MasterWrite
  5802  1476                     l5408:	
  5803                           ;i2c1_util.c: 14: while (status == I2C1_MESSAGE_PENDING) {_delay((unsigned long)((100)*(
      +                          32000000/4000000.0)));};
  5804                           
  5805  1476  3002               	movlw	2
  5806  1477  0020               	movlb	0	; select bank0
  5807  1478  0635               	xorwf	i2c1_write@status,w
  5808  1479  1D03               	btfss	3,2
  5809  147A  2C80               	goto	l5410
  5810  147B  30A0               	movlw	160
  5811  147C                     u7407:	
  5812  147C  3200               	nop2
  5813  147D  0B89               	decfsz	9,f
  5814  147E  2C7C               	goto	u7407
  5815  147F  2C76               	goto	l5408
  5816  1480                     l5410:	
  5817                           
  5818                           ;i2c1_util.c: 15: if (status == I2C1_MESSAGE_COMPLETE) {
  5819  1480  0835               	movf	i2c1_write@status,w
  5820  1481  1D03               	btfss	3,2
  5821  1482  2C85               	goto	l620
  5822                           
  5823                           ;i2c1_util.c: 16: write_status = 0;
  5824  1483  01B4               	clrf	i2c1_write@write_status
  5825                           
  5826                           ;i2c1_util.c: 17: } else {
  5827  1484  2C87               	goto	l5414
  5828  1485                     l620:	
  5829                           
  5830                           ;i2c1_util.c: 18: write_status = 1;
  5831  1485  01B4               	clrf	i2c1_write@write_status
  5832  1486  0AB4               	incf	i2c1_write@write_status,f
  5833  1487                     l5414:	
  5834                           
  5835                           ;i2c1_util.c: 19: }
  5836                           ;i2c1_util.c: 20: return write_status;
  5837  1487  0834               	movf	i2c1_write@write_status,w
  5838  1488  0008               	return
  5839  1489                     __end_of_i2c1_write:	
  5840                           
  5841                           	psect	text15
  5842  12BB                     __ptext15:	
  5843 ;; *************** function _check_plg *****************
  5844 ;; Defined at:
  5845 ;;		line 198 in file "main.c"
  5846 ;; Parameters:    Size  Location     Type
  5847 ;;		None
  5848 ;; Auto vars:     Size  Location     Type
  5849 ;;  status          1   34[BANK0 ] unsigned char 
  5850 ;; Return value:  Size  Location     Type
  5851 ;;                  1    wreg      void 
  5852 ;; Registers used:
  5853 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5854 ;; Tracked objects:
  5855 ;;		On entry : 0/0
  5856 ;;		On exit  : 0/0
  5857 ;;		Unchanged: 0/0
  5858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5860 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5861 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5862 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5863 ;;Total ram usage:        3 bytes
  5864 ;; Hardware stack levels used:    1
  5865 ;; Hardware stack levels required when called:    7
  5866 ;; This function calls:
  5867 ;;		_i2c1_write_no_data
  5868 ;;		_scan_dev
  5869 ;; This function is called by:
  5870 ;;		_tick_handler
  5871 ;; This function uses a non-reentrant model
  5872 ;;
  5873                           
  5874                           
  5875                           ;psect for function _check_plg
  5876  12BB                     _check_plg:	
  5877                           
  5878                           ;main.c: 199: uint8_t status = i2c1_write_no_data(0x00, 0x02);
  5879                           
  5880                           ;incstack = 0
  5881                           ; Regs used in _check_plg: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5882  12BB  3000               	movlw	0
  5883  12BC  0020               	movlb	0	; select bank0
  5884  12BD  00AE               	movwf	i2c1_write_no_data@dev_addr
  5885  12BE  00AF               	movwf	i2c1_write_no_data@dev_addr+1
  5886  12BF  3002               	movlw	2
  5887  12C0  00C0               	movwf	??_check_plg
  5888  12C1  0840               	movf	??_check_plg,w
  5889  12C2  00B0               	movwf	i2c1_write_no_data@reg_addr
  5890  12C3  3194  24B3  3192   	fcall	_i2c1_write_no_data
  5891  12C6  0020               	movlb	0	; select bank0
  5892  12C7  00C1               	movwf	??_check_plg+1
  5893  12C8  0841               	movf	??_check_plg+1,w
  5894  12C9  00C2               	movwf	check_plg@status
  5895                           
  5896                           ;main.c: 200: if (status == 0) scan_dev();
  5897  12CA  0842               	movf	check_plg@status,w
  5898  12CB  1D03               	btfss	3,2
  5899  12CC  0008               	return
  5900  12CD  3195  25C8         	fcall	_scan_dev
  5901  12CF  0008               	return
  5902  12D0                     __end_of_check_plg:	
  5903                           
  5904                           	psect	text16
  5905  15C8                     __ptext16:	
  5906 ;; *************** function _scan_dev *****************
  5907 ;; Defined at:
  5908 ;;		line 182 in file "main.c"
  5909 ;; Parameters:    Size  Location     Type
  5910 ;;		None
  5911 ;; Auto vars:     Size  Location     Type
  5912 ;;  dev_addr        1   31[BANK0 ] unsigned char 
  5913 ;;  status          1   30[BANK0 ] unsigned char 
  5914 ;; Return value:  Size  Location     Type
  5915 ;;                  1    wreg      void 
  5916 ;; Registers used:
  5917 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5918 ;; Tracked objects:
  5919 ;;		On entry : 0/0
  5920 ;;		On exit  : 0/0
  5921 ;;		Unchanged: 0/0
  5922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5924 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5925 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5926 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5927 ;;Total ram usage:        5 bytes
  5928 ;; Hardware stack levels used:    1
  5929 ;; Hardware stack levels required when called:    6
  5930 ;; This function calls:
  5931 ;;		_add_dev
  5932 ;;		_del_dev
  5933 ;;		_i2c1_read
  5934 ;; This function is called by:
  5935 ;;		_check_plg
  5936 ;;		_tick_handler
  5937 ;; This function uses a non-reentrant model
  5938 ;;
  5939                           
  5940                           
  5941                           ;psect for function _scan_dev
  5942  15C8                     _scan_dev:	
  5943                           
  5944                           ;main.c: 183: uint8_t dev_addr, status;
  5945                           ;main.c: 184: for (dev_addr=0x10; dev_addr<=0x20; dev_addr++) {
  5946                           
  5947                           ;incstack = 0
  5948                           ; Regs used in _scan_dev: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5949  15C8  3010               	movlw	16
  5950  15C9  0020               	movlb	0	; select bank0
  5951  15CA  00BB               	movwf	??_scan_dev
  5952  15CB  083B               	movf	??_scan_dev,w
  5953  15CC  00BF               	movwf	scan_dev@dev_addr
  5954  15CD                     L7:	
  5955  15CD  3021               	movlw	33
  5956  15CE  023F               	subwf	scan_dev@dev_addr,w
  5957  15CF  1803               	btfsc	3,0
  5958  15D0  0008               	return
  5959                           
  5960                           ;main.c: 185: status = i2c1_read(dev_addr, 0x01, &read_buf[0], 1);
  5961  15D1  083F               	movf	scan_dev@dev_addr,w
  5962  15D2  00BB               	movwf	??_scan_dev
  5963  15D3  01BC               	clrf	??_scan_dev+1
  5964  15D4  083B               	movf	??_scan_dev,w
  5965  15D5  00B0               	movwf	i2c1_read@dev_addr
  5966  15D6  083C               	movf	??_scan_dev+1,w
  5967  15D7  00B1               	movwf	i2c1_read@dev_addr+1
  5968  15D8  01B2               	clrf	i2c1_read@reg_addr
  5969  15D9  0AB2               	incf	i2c1_read@reg_addr,f
  5970  15DA  30BC               	movlw	low _read_buf
  5971  15DB  00B3               	movwf	i2c1_read@pbuf
  5972  15DC  3001               	movlw	high _read_buf
  5973  15DD  00B4               	movwf	i2c1_read@pbuf+1
  5974  15DE  01B5               	clrf	i2c1_read@len
  5975  15DF  0AB5               	incf	i2c1_read@len,f
  5976  15E0  3189  2137  3195   	fcall	_i2c1_read
  5977  15E3  0020               	movlb	0	; select bank0
  5978  15E4  00BD               	movwf	??_scan_dev+2
  5979  15E5  083D               	movf	??_scan_dev+2,w
  5980  15E6  00BE               	movwf	scan_dev@status
  5981                           
  5982                           ;main.c: 187: if (status == 0 && dev_addr == read_buf[0]) {
  5983  15E7  083E               	movf	scan_dev@status,w
  5984  15E8  1D03               	btfss	3,2
  5985  15E9  2DF5               	goto	l5430
  5986  15EA  0023               	movlb	3	; select bank3
  5987  15EB  083C               	movf	_read_buf^(0+384),w
  5988  15EC  0020               	movlb	0	; select bank0
  5989  15ED  063F               	xorwf	scan_dev@dev_addr,w
  5990  15EE  1D03               	skipz
  5991  15EF  2DF5               	goto	l5430
  5992                           
  5993                           ;main.c: 188: add_dev(dev_addr);
  5994  15F0  083F               	movf	scan_dev@dev_addr,w
  5995  15F1  3197  27B2  3195   	fcall	_add_dev
  5996                           
  5997                           ;main.c: 189: } else {
  5998  15F4  2DFA               	goto	l5432
  5999  15F5                     l5430:	
  6000                           
  6001                           ;main.c: 190: del_dev(dev_addr);
  6002  15F5  0020               	movlb	0	; select bank0
  6003  15F6  083F               	movf	scan_dev@dev_addr,w
  6004  15F7  3197  2765  3195   	fcall	_del_dev
  6005  15FA                     l5432:	
  6006  15FA  3001               	movlw	1
  6007  15FB  0020               	movlb	0	; select bank0
  6008  15FC  00BB               	movwf	??_scan_dev
  6009  15FD  083B               	movf	??_scan_dev,w
  6010  15FE  07BF               	addwf	scan_dev@dev_addr,f
  6011  15FF  2DCD               	goto	L7
  6012  1600                     __end_of_scan_dev:	
  6013                           
  6014                           	psect	text17
  6015  1765                     __ptext17:	
  6016 ;; *************** function _del_dev *****************
  6017 ;; Defined at:
  6018 ;;		line 134 in file "main.c"
  6019 ;; Parameters:    Size  Location     Type
  6020 ;;  dev_addr        1    wreg     unsigned char 
  6021 ;; Auto vars:     Size  Location     Type
  6022 ;;  dev_addr        1   16[BANK0 ] unsigned char 
  6023 ;;  y               1   15[BANK0 ] unsigned char 
  6024 ;;  new_map         1   14[BANK0 ] unsigned char 
  6025 ;;  old_map         1   13[BANK0 ] unsigned char 
  6026 ;;  x               1   12[BANK0 ] unsigned char 
  6027 ;; Return value:  Size  Location     Type
  6028 ;;                  1    wreg      void 
  6029 ;; Registers used:
  6030 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6031 ;; Tracked objects:
  6032 ;;		On entry : 0/0
  6033 ;;		On exit  : 0/0
  6034 ;;		Unchanged: 0/0
  6035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6037 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6038 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6039 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6040 ;;Total ram usage:        8 bytes
  6041 ;; Hardware stack levels used:    1
  6042 ;; Hardware stack levels required when called:    4
  6043 ;; This function calls:
  6044 ;;		___awdiv
  6045 ;; This function is called by:
  6046 ;;		_scan_dev
  6047 ;; This function uses a non-reentrant model
  6048 ;;
  6049                           
  6050                           
  6051                           ;psect for function _del_dev
  6052  1765                     _del_dev:	
  6053                           
  6054                           ;incstack = 0
  6055                           ; Regs used in _del_dev: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6056                           ;del_dev@dev_addr stored from wreg
  6057  1765  0020               	movlb	0	; select bank0
  6058  1766  00B0               	movwf	del_dev@dev_addr
  6059                           
  6060                           ;main.c: 135: uint8_t x, y;
  6061                           ;main.c: 136: uint8_t new_map, old_map;
  6062                           ;main.c: 137: if (dev_addr >= 1 && dev_addr <= 0x20) {
  6063  1767  0830               	movf	del_dev@dev_addr,w
  6064  1768  1903               	btfsc	3,2
  6065  1769  0008               	return
  6066  176A  3021               	movlw	33
  6067  176B  0230               	subwf	del_dev@dev_addr,w
  6068  176C  1803               	skipnc
  6069  176D  0008               	return
  6070                           
  6071                           ;main.c: 138: y = dev_addr / 8;
  6072  176E  3008               	movlw	8
  6073  176F  00A0               	movwf	___awdiv@divisor
  6074  1770  3000               	movlw	0
  6075  1771  00A1               	movwf	___awdiv@divisor+1
  6076  1772  0830               	movf	del_dev@dev_addr,w
  6077  1773  00A9               	movwf	??_del_dev
  6078  1774  01AA               	clrf	??_del_dev+1
  6079  1775  0829               	movf	??_del_dev,w
  6080  1776  00A2               	movwf	___awdiv@dividend
  6081  1777  082A               	movf	??_del_dev+1,w
  6082  1778  00A3               	movwf	___awdiv@dividend+1
  6083  1779  3188  20E5  3197   	fcall	___awdiv
  6084  177C  0020               	movlb	0	; select bank0
  6085  177D  0820               	movf	?___awdiv,w
  6086  177E  00AB               	movwf	??_del_dev+2
  6087  177F  082B               	movf	??_del_dev+2,w
  6088  1780  00AF               	movwf	del_dev@y
  6089                           
  6090                           ;main.c: 139: x = dev_addr % 8;
  6091  1781  0830               	movf	del_dev@dev_addr,w
  6092  1782  3907               	andlw	7
  6093  1783  00A9               	movwf	??_del_dev
  6094  1784  0829               	movf	??_del_dev,w
  6095  1785  00AC               	movwf	del_dev@x
  6096                           
  6097                           ;main.c: 140: old_map = dev_map[y];
  6098  1786  082F               	movf	del_dev@y,w
  6099  1787  3E20               	addlw	(low (_dev_map| (0+256)))& (0+255)
  6100  1788  0086               	movwf	6
  6101  1789  3001               	movlw	1	; select bank2/3
  6102  178A  0087               	movwf	7
  6103  178B  0801               	movf	1,w
  6104  178C  00A9               	movwf	??_del_dev
  6105  178D  0829               	movf	??_del_dev,w
  6106  178E  00AD               	movwf	del_dev@old_map
  6107                           
  6108                           ;main.c: 141: new_map = dev_map[y] & ~(0x01 << x);
  6109  178F  082F               	movf	del_dev@y,w
  6110  1790  3E20               	addlw	(low (_dev_map| (0+256)))& (0+255)
  6111  1791  0086               	movwf	6
  6112  1792  3001               	movlw	1	; select bank2/3
  6113  1793  0087               	movwf	7
  6114  1794  3001               	movlw	1
  6115  1795  00A9               	movwf	??_del_dev
  6116  1796  0A2C               	incf	del_dev@x,w
  6117  1797  2F99               	goto	u5914
  6118  1798                     u5915:	
  6119  1798  35A9               	lslf	??_del_dev,f
  6120  1799                     u5914:	
  6121  1799  0B89               	decfsz	9,f
  6122  179A  2F98               	goto	u5915
  6123  179B  0829               	movf	??_del_dev,w
  6124  179C  3AFF               	xorlw	255
  6125  179D  0501               	andwf	1,w
  6126  179E  00AA               	movwf	??_del_dev+1
  6127  179F  082A               	movf	??_del_dev+1,w
  6128  17A0  00AE               	movwf	del_dev@new_map
  6129                           
  6130                           ;main.c: 142: if (old_map != new_map) {
  6131  17A1  082D               	movf	del_dev@old_map,w
  6132  17A2  062E               	xorwf	del_dev@new_map,w
  6133  17A3  1903               	skipnz
  6134  17A4  0008               	return
  6135                           
  6136                           ;main.c: 143: dev_map[y] = new_map;
  6137  17A5  082E               	movf	del_dev@new_map,w
  6138  17A6  00A9               	movwf	??_del_dev
  6139  17A7  082F               	movf	del_dev@y,w
  6140  17A8  3E20               	addlw	(low (_dev_map| (0+256)))& (0+255)
  6141  17A9  0086               	movwf	6
  6142  17AA  3001               	movlw	1	; select bank2/3
  6143  17AB  0087               	movwf	7
  6144  17AC  0829               	movf	??_del_dev,w
  6145  17AD  0081               	movwf	1
  6146                           
  6147                           ;main.c: 144: devs--;
  6148  17AE  3001               	movlw	1
  6149  17AF  0021               	movlb	1	; select bank1
  6150  17B0  02E4               	subwf	_devs^(0+128),f
  6151  17B1  0008               	return
  6152  17B2                     __end_of_del_dev:	
  6153                           
  6154                           	psect	text18
  6155  17B2                     __ptext18:	
  6156 ;; *************** function _add_dev *****************
  6157 ;; Defined at:
  6158 ;;		line 119 in file "main.c"
  6159 ;; Parameters:    Size  Location     Type
  6160 ;;  dev_addr        1    wreg     unsigned char 
  6161 ;; Auto vars:     Size  Location     Type
  6162 ;;  dev_addr        1   16[BANK0 ] unsigned char 
  6163 ;;  y               1   15[BANK0 ] unsigned char 
  6164 ;;  new_map         1   14[BANK0 ] unsigned char 
  6165 ;;  old_map         1   13[BANK0 ] unsigned char 
  6166 ;;  x               1   12[BANK0 ] unsigned char 
  6167 ;; Return value:  Size  Location     Type
  6168 ;;                  1    wreg      void 
  6169 ;; Registers used:
  6170 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6171 ;; Tracked objects:
  6172 ;;		On entry : 0/0
  6173 ;;		On exit  : 0/0
  6174 ;;		Unchanged: 0/0
  6175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6177 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6178 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6179 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6180 ;;Total ram usage:        8 bytes
  6181 ;; Hardware stack levels used:    1
  6182 ;; Hardware stack levels required when called:    4
  6183 ;; This function calls:
  6184 ;;		___awdiv
  6185 ;; This function is called by:
  6186 ;;		_scan_dev
  6187 ;; This function uses a non-reentrant model
  6188 ;;
  6189                           
  6190                           
  6191                           ;psect for function _add_dev
  6192  17B2                     _add_dev:	
  6193                           
  6194                           ;incstack = 0
  6195                           ; Regs used in _add_dev: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6196                           ;add_dev@dev_addr stored from wreg
  6197  17B2  0020               	movlb	0	; select bank0
  6198  17B3  00B0               	movwf	add_dev@dev_addr
  6199                           
  6200                           ;main.c: 120: uint8_t x, y;
  6201                           ;main.c: 121: uint8_t new_map, old_map;
  6202                           ;main.c: 122: if (dev_addr >= 1 && dev_addr <= 0x20) {
  6203  17B4  0830               	movf	add_dev@dev_addr,w
  6204  17B5  1903               	btfsc	3,2
  6205  17B6  0008               	return
  6206  17B7  3021               	movlw	33
  6207  17B8  0230               	subwf	add_dev@dev_addr,w
  6208  17B9  1803               	skipnc
  6209  17BA  0008               	return
  6210                           
  6211                           ;main.c: 123: y = dev_addr / 8;
  6212  17BB  3008               	movlw	8
  6213  17BC  00A0               	movwf	___awdiv@divisor
  6214  17BD  3000               	movlw	0
  6215  17BE  00A1               	movwf	___awdiv@divisor+1
  6216  17BF  0830               	movf	add_dev@dev_addr,w
  6217  17C0  00A9               	movwf	??_add_dev
  6218  17C1  01AA               	clrf	??_add_dev+1
  6219  17C2  0829               	movf	??_add_dev,w
  6220  17C3  00A2               	movwf	___awdiv@dividend
  6221  17C4  082A               	movf	??_add_dev+1,w
  6222  17C5  00A3               	movwf	___awdiv@dividend+1
  6223  17C6  3188  20E5  3197   	fcall	___awdiv
  6224  17C9  0020               	movlb	0	; select bank0
  6225  17CA  0820               	movf	?___awdiv,w
  6226  17CB  00AB               	movwf	??_add_dev+2
  6227  17CC  082B               	movf	??_add_dev+2,w
  6228  17CD  00AF               	movwf	add_dev@y
  6229                           
  6230                           ;main.c: 124: x = dev_addr % 8;
  6231  17CE  0830               	movf	add_dev@dev_addr,w
  6232  17CF  3907               	andlw	7
  6233  17D0  00A9               	movwf	??_add_dev
  6234  17D1  0829               	movf	??_add_dev,w
  6235  17D2  00AC               	movwf	add_dev@x
  6236                           
  6237                           ;main.c: 125: old_map = dev_map[y];
  6238  17D3  082F               	movf	add_dev@y,w
  6239  17D4  3E20               	addlw	(low (_dev_map| (0+256)))& (0+255)
  6240  17D5  0086               	movwf	6
  6241  17D6  3001               	movlw	1	; select bank2/3
  6242  17D7  0087               	movwf	7
  6243  17D8  0801               	movf	1,w
  6244  17D9  00A9               	movwf	??_add_dev
  6245  17DA  0829               	movf	??_add_dev,w
  6246  17DB  00AD               	movwf	add_dev@old_map
  6247                           
  6248                           ;main.c: 126: new_map = dev_map[y] | (0x01 << x);
  6249  17DC  082F               	movf	add_dev@y,w
  6250  17DD  3E20               	addlw	(low (_dev_map| (0+256)))& (0+255)
  6251  17DE  0086               	movwf	6
  6252  17DF  3001               	movlw	1	; select bank2/3
  6253  17E0  0087               	movwf	7
  6254  17E1  3001               	movlw	1
  6255  17E2  00A9               	movwf	??_add_dev
  6256  17E3  0A2C               	incf	add_dev@x,w
  6257  17E4  2FE6               	goto	u5874
  6258  17E5                     u5875:	
  6259  17E5  35A9               	lslf	??_add_dev,f
  6260  17E6                     u5874:	
  6261  17E6  0B89               	decfsz	9,f
  6262  17E7  2FE5               	goto	u5875
  6263  17E8  0829               	movf	??_add_dev,w
  6264  17E9  0401               	iorwf	1,w
  6265  17EA  00AA               	movwf	??_add_dev+1
  6266  17EB  082A               	movf	??_add_dev+1,w
  6267  17EC  00AE               	movwf	add_dev@new_map
  6268                           
  6269                           ;main.c: 127: if (old_map != new_map) {
  6270  17ED  082D               	movf	add_dev@old_map,w
  6271  17EE  062E               	xorwf	add_dev@new_map,w
  6272  17EF  1903               	skipnz
  6273  17F0  0008               	return
  6274                           
  6275                           ;main.c: 128: dev_map[y] = new_map;
  6276  17F1  082E               	movf	add_dev@new_map,w
  6277  17F2  00A9               	movwf	??_add_dev
  6278  17F3  082F               	movf	add_dev@y,w
  6279  17F4  3E20               	addlw	(low (_dev_map| (0+256)))& (0+255)
  6280  17F5  0086               	movwf	6
  6281  17F6  3001               	movlw	1	; select bank2/3
  6282  17F7  0087               	movwf	7
  6283  17F8  0829               	movf	??_add_dev,w
  6284  17F9  0081               	movwf	1
  6285                           
  6286                           ;main.c: 129: devs++;
  6287  17FA  3001               	movlw	1
  6288  17FB  00A9               	movwf	??_add_dev
  6289  17FC  0829               	movf	??_add_dev,w
  6290  17FD  0021               	movlb	1	; select bank1
  6291  17FE  07E4               	addwf	_devs^(0+128),f
  6292  17FF  0008               	return
  6293  1800                     __end_of_add_dev:	
  6294                           
  6295                           	psect	text19
  6296  0ACE                     __ptext19:	
  6297 ;; *************** function _inv_handler *****************
  6298 ;; Defined at:
  6299 ;;		line 328 in file "main.c"
  6300 ;; Parameters:    Size  Location     Type
  6301 ;;		None
  6302 ;; Auto vars:     Size  Location     Type
  6303 ;;  status          1    0        unsigned char 
  6304 ;;  dev_addr        1    0        unsigned char 
  6305 ;; Return value:  Size  Location     Type
  6306 ;;                  1    wreg      void 
  6307 ;; Registers used:
  6308 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6309 ;; Tracked objects:
  6310 ;;		On entry : 0/0
  6311 ;;		On exit  : 0/0
  6312 ;;		Unchanged: 0/0
  6313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6314 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6315 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6317 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6318 ;;Total ram usage:        0 bytes
  6319 ;; Hardware stack levels used:    1
  6320 ;; Hardware stack levels required when called:    9
  6321 ;; This function calls:
  6322 ;;		___lwmod
  6323 ;;		_fetch
  6324 ;; This function is called by:
  6325 ;;		_main
  6326 ;;		_PROTOCOL_Loop
  6327 ;; This function uses a non-reentrant model
  6328 ;;
  6329                           
  6330                           
  6331                           ;psect for function _inv_handler
  6332  0ACE                     _inv_handler:	
  6333                           
  6334                           ;main.c: 329: uint8_t dev_addr, status;
  6335                           ;main.c: 330: static uint16_t t = 0;
  6336                           ;main.c: 333: fetch(schedule[0]);
  6337                           
  6338                           ;incstack = 0
  6339                           ; Regs used in _inv_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6340  0ACE  30A0               	movlw	(low (_schedule| (0+256)))& (0+255)
  6341  0ACF  3188  2044  318A   	fcall	_fetch
  6342                           
  6343                           ;main.c: 335: if (t % 2 == 0) fetch(schedule[1]);
  6344  0AD2  1870               	btfsc	inv_handler@t,0
  6345  0AD3  2AD8               	goto	l5770
  6346  0AD4  30A4               	movlw	(low ((_schedule| (0+256)+4)))& (0+255)
  6347  0AD5  3188  2044  318A   	fcall	_fetch
  6348  0AD8                     l5770:	
  6349                           
  6350                           ;main.c: 337: if (t % 6 == 0) fetch(schedule[2]);
  6351  0AD8  3006               	movlw	6
  6352  0AD9  0020               	movlb	0	; select bank0
  6353  0ADA  00A8               	movwf	___lwmod@divisor
  6354  0ADB  3000               	movlw	0
  6355  0ADC  00A9               	movwf	___lwmod@divisor+1
  6356  0ADD  0871               	movf	inv_handler@t+1,w
  6357  0ADE  00AB               	movwf	___lwmod@dividend+1
  6358  0ADF  0870               	movf	inv_handler@t,w
  6359  0AE0  00AA               	movwf	___lwmod@dividend
  6360  0AE1  3195  250A  318A   	fcall	___lwmod
  6361  0AE4  0020               	movlb	0	; select bank0
  6362  0AE5  0828               	movf	?___lwmod,w
  6363  0AE6  0429               	iorwf	?___lwmod+1,w
  6364  0AE7  1D03               	btfss	3,2
  6365  0AE8  2AED               	goto	l5774
  6366  0AE9  30A8               	movlw	(low ((_schedule| (0+256)+8)))& (0+255)
  6367  0AEA  3188  2044  318A   	fcall	_fetch
  6368  0AED                     l5774:	
  6369                           
  6370                           ;main.c: 339: if (t % 12 == 0) fetch(schedule[3]);
  6371  0AED  300C               	movlw	12
  6372  0AEE  0020               	movlb	0	; select bank0
  6373  0AEF  00A8               	movwf	___lwmod@divisor
  6374  0AF0  3000               	movlw	0
  6375  0AF1  00A9               	movwf	___lwmod@divisor+1
  6376  0AF2  0871               	movf	inv_handler@t+1,w
  6377  0AF3  00AB               	movwf	___lwmod@dividend+1
  6378  0AF4  0870               	movf	inv_handler@t,w
  6379  0AF5  00AA               	movwf	___lwmod@dividend
  6380  0AF6  3195  250A  318A   	fcall	___lwmod
  6381  0AF9  0020               	movlb	0	; select bank0
  6382  0AFA  0828               	movf	?___lwmod,w
  6383  0AFB  0429               	iorwf	?___lwmod+1,w
  6384  0AFC  1D03               	btfss	3,2
  6385  0AFD  2B02               	goto	l5778
  6386  0AFE  30AC               	movlw	(low ((_schedule| (0+256)+12)))& (0+255)
  6387  0AFF  3188  2044  318A   	fcall	_fetch
  6388  0B02                     l5778:	
  6389                           
  6390                           ;main.c: 341: if (t % 60 == 0) fetch(schedule[4]);
  6391  0B02  303C               	movlw	60
  6392  0B03  0020               	movlb	0	; select bank0
  6393  0B04  00A8               	movwf	___lwmod@divisor
  6394  0B05  3000               	movlw	0
  6395  0B06  00A9               	movwf	___lwmod@divisor+1
  6396  0B07  0871               	movf	inv_handler@t+1,w
  6397  0B08  00AB               	movwf	___lwmod@dividend+1
  6398  0B09  0870               	movf	inv_handler@t,w
  6399  0B0A  00AA               	movwf	___lwmod@dividend
  6400  0B0B  3195  250A  318A   	fcall	___lwmod
  6401  0B0E  0020               	movlb	0	; select bank0
  6402  0B0F  0828               	movf	?___lwmod,w
  6403  0B10  0429               	iorwf	?___lwmod+1,w
  6404  0B11  1D03               	btfss	3,2
  6405  0B12  2B17               	goto	l5782
  6406  0B13  30B0               	movlw	(low ((_schedule| (0+256)+16)))& (0+255)
  6407  0B14  3188  2044  318A   	fcall	_fetch
  6408  0B17                     l5782:	
  6409                           
  6410                           ;main.c: 343: if (t % 120 == 0) fetch(schedule[5]);
  6411  0B17  3078               	movlw	120
  6412  0B18  0020               	movlb	0	; select bank0
  6413  0B19  00A8               	movwf	___lwmod@divisor
  6414  0B1A  3000               	movlw	0
  6415  0B1B  00A9               	movwf	___lwmod@divisor+1
  6416  0B1C  0871               	movf	inv_handler@t+1,w
  6417  0B1D  00AB               	movwf	___lwmod@dividend+1
  6418  0B1E  0870               	movf	inv_handler@t,w
  6419  0B1F  00AA               	movwf	___lwmod@dividend
  6420  0B20  3195  250A  318A   	fcall	___lwmod
  6421  0B23  0020               	movlb	0	; select bank0
  6422  0B24  0828               	movf	?___lwmod,w
  6423  0B25  0429               	iorwf	?___lwmod+1,w
  6424  0B26  1D03               	btfss	3,2
  6425  0B27  2B2C               	goto	l5786
  6426  0B28  30B4               	movlw	(low ((_schedule| (0+256)+20)))& (0+255)
  6427  0B29  3188  2044  318A   	fcall	_fetch
  6428  0B2C                     l5786:	
  6429                           
  6430                           ;main.c: 345: if (t % 600 == 0) {
  6431  0B2C  3058               	movlw	88
  6432  0B2D  0020               	movlb	0	; select bank0
  6433  0B2E  00A8               	movwf	___lwmod@divisor
  6434  0B2F  3002               	movlw	2
  6435  0B30  00A9               	movwf	___lwmod@divisor+1
  6436  0B31  0871               	movf	inv_handler@t+1,w
  6437  0B32  00AB               	movwf	___lwmod@dividend+1
  6438  0B33  0870               	movf	inv_handler@t,w
  6439  0B34  00AA               	movwf	___lwmod@dividend
  6440  0B35  3195  250A  318A   	fcall	___lwmod
  6441  0B38  0020               	movlb	0	; select bank0
  6442  0B39  0828               	movf	?___lwmod,w
  6443  0B3A  0429               	iorwf	?___lwmod+1,w
  6444  0B3B  1D03               	btfss	3,2
  6445  0B3C  2B44               	goto	l5792
  6446                           
  6447                           ;main.c: 346: fetch(schedule[6]);
  6448  0B3D  30B8               	movlw	(low ((_schedule| (0+256)+24)))& (0+255)
  6449  0B3E  3188  2044         	fcall	_fetch
  6450                           
  6451                           ;main.c: 347: t = 1;
  6452  0B40  3001               	movlw	1
  6453  0B41  00F0               	movwf	inv_handler@t
  6454  0B42  3000               	movlw	0
  6455  0B43  00F1               	movwf	inv_handler@t+1
  6456  0B44                     l5792:	
  6457                           
  6458                           ;main.c: 348: }
  6459                           ;main.c: 350: t++;
  6460  0B44  3001               	movlw	1
  6461  0B45  07F0               	addwf	inv_handler@t,f
  6462  0B46  3000               	movlw	0
  6463  0B47  3DF1               	addwfc	inv_handler@t+1,f
  6464  0B48  0008               	return
  6465  0B49                     __end_of_inv_handler:	
  6466                           
  6467                           	psect	text20
  6468  0844                     __ptext20:	
  6469 ;; *************** function _fetch *****************
  6470 ;; Defined at:
  6471 ;;		line 281 in file "main.c"
  6472 ;; Parameters:    Size  Location     Type
  6473 ;;  sch             1    wreg     PTR unsigned char 
  6474 ;;		 -> schedule(28), 
  6475 ;; Auto vars:     Size  Location     Type
  6476 ;;  sch             1   58[BANK0 ] PTR unsigned char 
  6477 ;;		 -> schedule(28), 
  6478 ;;  dev_addr        1   60[BANK0 ] unsigned char 
  6479 ;;  pos             1   59[BANK0 ] unsigned char 
  6480 ;;  status          1   57[BANK0 ] unsigned char 
  6481 ;; Return value:  Size  Location     Type
  6482 ;;                  1    wreg      void 
  6483 ;; Registers used:
  6484 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6485 ;; Tracked objects:
  6486 ;;		On entry : 0/0
  6487 ;;		On exit  : 0/0
  6488 ;;		Unchanged: 0/0
  6489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6491 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6492 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6493 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6494 ;;Total ram usage:        7 bytes
  6495 ;; Hardware stack levels used:    1
  6496 ;; Hardware stack levels required when called:    8
  6497 ;; This function calls:
  6498 ;;		_detected
  6499 ;;		_i2c1_write_no_data
  6500 ;;		_printf
  6501 ;;		_sen
  6502 ;; This function is called by:
  6503 ;;		_inv_handler
  6504 ;; This function uses a non-reentrant model
  6505 ;;
  6506                           
  6507                           
  6508                           ;psect for function _fetch
  6509  0844                     _fetch:	
  6510                           
  6511                           ;incstack = 0
  6512                           ; Regs used in _fetch: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6513                           ;fetch@sch stored from wreg
  6514  0844  0020               	movlb	0	; select bank0
  6515  0845  00DA               	movwf	fetch@sch
  6516                           
  6517                           ;main.c: 282: uint8_t pos;
  6518                           ;main.c: 283: uint8_t dev_addr;
  6519                           ;main.c: 284: uint8_t status;
  6520                           ;main.c: 285: for (pos=0; pos<4; pos++) {
  6521  0846  01DB               	clrf	fetch@pos
  6522  0847                     L8:	
  6523  0847  3004               	movlw	4
  6524  0848  025B               	subwf	fetch@pos,w
  6525  0849  1803               	btfsc	3,0
  6526  084A  0008               	return
  6527                           
  6528                           ;main.c: 286: dev_addr = sch[pos];
  6529  084B  085B               	movf	fetch@pos,w
  6530  084C  075A               	addwf	fetch@sch,w
  6531  084D  00D6               	movwf	??_fetch
  6532  084E  0856               	movf	??_fetch,w
  6533  084F  0086               	movwf	6
  6534  0850  3001               	movlw	1	; select bank2/3
  6535  0851  0087               	movwf	7
  6536  0852  0801               	movf	1,w
  6537  0853  00D7               	movwf	??_fetch+1
  6538  0854  0857               	movf	??_fetch+1,w
  6539  0855  00DC               	movwf	fetch@dev_addr
  6540                           
  6541                           ;main.c: 287: if (dev_addr == 0 || dev_addr > 0x20) {
  6542  0856  085C               	movf	fetch@dev_addr,w
  6543  0857  1903               	btfsc	3,2
  6544  0858  0008               	return
  6545  0859  3021               	movlw	33
  6546  085A  025C               	subwf	fetch@dev_addr,w
  6547  085B  1803               	btfsc	3,0
  6548  085C  0008               	return
  6549                           
  6550                           ;main.c: 289: } else if (detected(dev_addr)) {
  6551                           
  6552                           ;main.c: 288: break;
  6553  085D  085C               	movf	fetch@dev_addr,w
  6554  085E  3195  2564  3188   	fcall	_detected
  6555  0861  3A00               	xorlw	0
  6556  0862  1903               	skipnz
  6557  0863  288D               	goto	l5576
  6558                           
  6559                           ;main.c: 290: status = sen(dev_addr);
  6560  0864  0020               	movlb	0	; select bank0
  6561  0865  085C               	movf	fetch@dev_addr,w
  6562  0866  3186  26F1  3188   	fcall	_sen
  6563  0869  0020               	movlb	0	; select bank0
  6564  086A  00D6               	movwf	??_fetch
  6565  086B  0856               	movf	??_fetch,w
  6566  086C  00D9               	movwf	fetch@status
  6567                           
  6568                           ;main.c: 291: if (status > 0) {
  6569  086D  0859               	movf	fetch@status,w
  6570  086E  1903               	btfsc	3,2
  6571  086F  288D               	goto	l5576
  6572                           
  6573                           ;main.c: 292: printf("!:%%%d:NETWORK_ERROR\n", dev_addr);
  6574  0870  3088               	movlw	low (STR_18| (0+32768))
  6575  0871  00AE               	movwf	printf@f
  6576  0872  3090               	movlw	high (STR_18| (0+32768))
  6577  0873  00AF               	movwf	printf@f+1
  6578  0874  085C               	movf	fetch@dev_addr,w
  6579  0875  00D6               	movwf	??_fetch
  6580  0876  01D7               	clrf	??_fetch+1
  6581  0877  0856               	movf	??_fetch,w
  6582  0878  00B0               	movwf	?_printf+2
  6583  0879  0857               	movf	??_fetch+1,w
  6584  087A  00B1               	movwf	?_printf+3
  6585  087B  3185  251C  3188   	fcall	_printf
  6586                           
  6587                           ;main.c: 293: i2c1_write_no_data(dev_addr, 0x0c);
  6588  087E  0020               	movlb	0	; select bank0
  6589  087F  085C               	movf	fetch@dev_addr,w
  6590  0880  00D6               	movwf	??_fetch
  6591  0881  01D7               	clrf	??_fetch+1
  6592  0882  0856               	movf	??_fetch,w
  6593  0883  00AE               	movwf	i2c1_write_no_data@dev_addr
  6594  0884  0857               	movf	??_fetch+1,w
  6595  0885  00AF               	movwf	i2c1_write_no_data@dev_addr+1
  6596  0886  300C               	movlw	12
  6597  0887  00D8               	movwf	??_fetch+2
  6598  0888  0858               	movf	??_fetch+2,w
  6599  0889  00B0               	movwf	i2c1_write_no_data@reg_addr
  6600  088A  3194  24B3  3188   	fcall	_i2c1_write_no_data
  6601  088D                     l5576:	
  6602  088D  3001               	movlw	1
  6603  088E  0020               	movlb	0	; select bank0
  6604  088F  00D6               	movwf	??_fetch
  6605  0890  0856               	movf	??_fetch,w
  6606  0891  07DB               	addwf	fetch@pos,f
  6607  0892  2847               	goto	L8
  6608  0893                     __end_of_fetch:	
  6609                           
  6610                           	psect	text21
  6611  11E8                     __ptext21:	
  6612 ;; *************** function _TMR0_HasOverflowOccured *****************
  6613 ;; Defined at:
  6614 ;;		line 101 in file "mcc_generated_files/tmr0.c"
  6615 ;; Parameters:    Size  Location     Type
  6616 ;;		None
  6617 ;; Auto vars:     Size  Location     Type
  6618 ;;		None
  6619 ;; Return value:  Size  Location     Type
  6620 ;;                  1    wreg      unsigned char 
  6621 ;; Registers used:
  6622 ;;		wreg, status,2, status,0
  6623 ;; Tracked objects:
  6624 ;;		On entry : 0/0
  6625 ;;		On exit  : 0/0
  6626 ;;		Unchanged: 0/0
  6627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6629 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6631 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6632 ;;Total ram usage:        0 bytes
  6633 ;; Hardware stack levels used:    1
  6634 ;; Hardware stack levels required when called:    3
  6635 ;; This function calls:
  6636 ;;		Nothing
  6637 ;; This function is called by:
  6638 ;;		_PROTOCOL_Loop
  6639 ;; This function uses a non-reentrant model
  6640 ;;
  6641                           
  6642                           
  6643                           ;psect for function _TMR0_HasOverflowOccured
  6644  11E8                     _TMR0_HasOverflowOccured:	
  6645                           
  6646                           ;tmr0.c: 104: return(INTCONbits.TMR0IF);
  6647                           
  6648                           ;incstack = 0
  6649                           ; Regs used in _TMR0_HasOverflowOccured: [wreg+status,2+status,0]
  6650  11E8  0C0B               	rrf	11,w	;volatile
  6651  11E9  0C89               	rrf	9,f
  6652  11EA  3901               	andlw	1
  6653  11EB  0008               	return
  6654  11EC                     __end_of_TMR0_HasOverflowOccured:	
  6655                           
  6656                           	psect	text22
  6657  1263                     __ptext22:	
  6658 ;; *************** function _PROTOCOL_Write_Device_Address *****************
  6659 ;; Defined at:
  6660 ;;		line 89 in file "protocol.c"
  6661 ;; Parameters:    Size  Location     Type
  6662 ;;  device_id_i2    1    wreg     unsigned char 
  6663 ;; Auto vars:     Size  Location     Type
  6664 ;;  device_id_i2    1    4[BANK0 ] unsigned char 
  6665 ;; Return value:  Size  Location     Type
  6666 ;;                  1    wreg      void 
  6667 ;; Registers used:
  6668 ;;		wreg, status,2, status,0, pclath, cstack
  6669 ;; Tracked objects:
  6670 ;;		On entry : 0/0
  6671 ;;		On exit  : 0/0
  6672 ;;		Unchanged: 0/0
  6673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6675 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6676 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6677 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6678 ;;Total ram usage:        2 bytes
  6679 ;; Hardware stack levels used:    1
  6680 ;; Hardware stack levels required when called:    4
  6681 ;; This function calls:
  6682 ;;		_DATAEE_WriteByte
  6683 ;; This function is called by:
  6684 ;;		_PROTOCOL_Loop
  6685 ;; This function uses a non-reentrant model
  6686 ;;
  6687                           
  6688                           
  6689                           ;psect for function _PROTOCOL_Write_Device_Address
  6690  1263                     _PROTOCOL_Write_Device_Address:	
  6691                           
  6692                           ;incstack = 0
  6693                           ; Regs used in _PROTOCOL_Write_Device_Address: [wreg+status,2+status,0+pclath+cstack]
  6694                           ;PROTOCOL_Write_Device_Address@device_id_i2c stored from wreg
  6695  1263  0020               	movlb	0	; select bank0
  6696  1264  00A4               	movwf	PROTOCOL_Write_Device_Address@device_id_i2c
  6697                           
  6698                           ;protocol.c: 90: DATAEE_WriteByte(0, device_id_i2c);
  6699  1265  0824               	movf	PROTOCOL_Write_Device_Address@device_id_i2c,w
  6700  1266  00A3               	movwf	??_PROTOCOL_Write_Device_Address
  6701  1267  0823               	movf	??_PROTOCOL_Write_Device_Address,w
  6702  1268  00A0               	movwf	DATAEE_WriteByte@bData
  6703  1269  3000               	movlw	0
  6704  126A  3193  23CE         	fcall	_DATAEE_WriteByte
  6705                           
  6706                           ;protocol.c: 91: slave_address = device_id_i2c;
  6707  126C  0020               	movlb	0	; select bank0
  6708  126D  0824               	movf	PROTOCOL_Write_Device_Address@device_id_i2c,w
  6709  126E  00A3               	movwf	??_PROTOCOL_Write_Device_Address
  6710  126F  0823               	movf	??_PROTOCOL_Write_Device_Address,w
  6711  1270  0021               	movlb	1	; select bank1
  6712  1271  00E0               	movwf	_slave_address^(0+128)
  6713  1272  0008               	return
  6714  1273                     __end_of_PROTOCOL_Write_Device_Address:	
  6715                           
  6716                           	psect	text23
  6717  11DE                     __ptext23:	
  6718 ;; *************** function _PROTOCOL_STP *****************
  6719 ;; Defined at:
  6720 ;;		line 103 in file "protocol.c"
  6721 ;; Parameters:    Size  Location     Type
  6722 ;;		None
  6723 ;; Auto vars:     Size  Location     Type
  6724 ;;		None
  6725 ;; Return value:  Size  Location     Type
  6726 ;;                  1    wreg      void 
  6727 ;; Registers used:
  6728 ;;		wreg, status,2, status,0
  6729 ;; Tracked objects:
  6730 ;;		On entry : 0/0
  6731 ;;		On exit  : 0/0
  6732 ;;		Unchanged: 0/0
  6733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6737 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6738 ;;Total ram usage:        0 bytes
  6739 ;; Hardware stack levels used:    1
  6740 ;; Hardware stack levels required when called:    3
  6741 ;; This function calls:
  6742 ;;		Nothing
  6743 ;; This function is called by:
  6744 ;;		_PROTOCOL_Loop
  6745 ;; This function uses a non-reentrant model
  6746 ;;
  6747                           
  6748                           
  6749                           ;psect for function _PROTOCOL_STP
  6750  11DE                     _PROTOCOL_STP:	
  6751                           
  6752                           ;protocol.c: 105: running = 0;
  6753                           
  6754                           ;incstack = 0
  6755                           ; Regs used in _PROTOCOL_STP: [wreg+status,2+status,0]
  6756  11DE  0022               	movlb	2	; select bank2
  6757  11DF  01C2               	clrf	_running^(0+256)
  6758  11E0  0008               	return
  6759  11E1                     __end_of_PROTOCOL_STP:	
  6760                           
  6761                           	psect	text24
  6762  11E4                     __ptext24:	
  6763 ;; *************** function _PROTOCOL_STA *****************
  6764 ;; Defined at:
  6765 ;;		line 98 in file "protocol.c"
  6766 ;; Parameters:    Size  Location     Type
  6767 ;;		None
  6768 ;; Auto vars:     Size  Location     Type
  6769 ;;		None
  6770 ;; Return value:  Size  Location     Type
  6771 ;;                  1    wreg      void 
  6772 ;; Registers used:
  6773 ;;		wreg, status,2, status,0
  6774 ;; Tracked objects:
  6775 ;;		On entry : 0/0
  6776 ;;		On exit  : 0/0
  6777 ;;		Unchanged: 0/0
  6778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6780 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6782 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6783 ;;Total ram usage:        0 bytes
  6784 ;; Hardware stack levels used:    1
  6785 ;; Hardware stack levels required when called:    3
  6786 ;; This function calls:
  6787 ;;		Nothing
  6788 ;; This function is called by:
  6789 ;;		_PROTOCOL_Loop
  6790 ;; This function uses a non-reentrant model
  6791 ;;
  6792                           
  6793                           
  6794                           ;psect for function _PROTOCOL_STA
  6795  11E4                     _PROTOCOL_STA:	
  6796                           
  6797                           ;protocol.c: 100: running = 1;
  6798                           
  6799                           ;incstack = 0
  6800                           ; Regs used in _PROTOCOL_STA: [wreg+status,2+status,0]
  6801  11E4  0022               	movlb	2	; select bank2
  6802  11E5  01C2               	clrf	_running^(0+256)
  6803  11E6  0AC2               	incf	_running^(0+256),f
  6804  11E7  0008               	return
  6805  11E8                     __end_of_PROTOCOL_STA:	
  6806                           
  6807                           	psect	text25
  6808  11FD                     __ptext25:	
  6809 ;; *************** function _PROTOCOL_SET *****************
  6810 ;; Defined at:
  6811 ;;		line 116 in file "protocol.c"
  6812 ;; Parameters:    Size  Location     Type
  6813 ;;  value_          1    wreg     unsigned char 
  6814 ;; Auto vars:     Size  Location     Type
  6815 ;;  value_          1    1[BANK0 ] unsigned char 
  6816 ;; Return value:  Size  Location     Type
  6817 ;;                  1    wreg      void 
  6818 ;; Registers used:
  6819 ;;		wreg, status,2, status,0
  6820 ;; Tracked objects:
  6821 ;;		On entry : 0/0
  6822 ;;		On exit  : 0/0
  6823 ;;		Unchanged: 0/0
  6824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6825 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6826 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6827 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6828 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6829 ;;Total ram usage:        2 bytes
  6830 ;; Hardware stack levels used:    1
  6831 ;; Hardware stack levels required when called:    3
  6832 ;; This function calls:
  6833 ;;		Nothing
  6834 ;; This function is called by:
  6835 ;;		_PROTOCOL_Loop
  6836 ;; This function uses a non-reentrant model
  6837 ;;
  6838                           
  6839                           
  6840                           ;psect for function _PROTOCOL_SET
  6841  11FD                     _PROTOCOL_SET:	
  6842                           
  6843                           ;incstack = 0
  6844                           ; Regs used in _PROTOCOL_SET: [wreg+status,2+status,0]
  6845                           ;PROTOCOL_SET@value_ stored from wreg
  6846  11FD  0020               	movlb	0	; select bank0
  6847  11FE  00A1               	movwf	PROTOCOL_SET@value_
  6848                           
  6849                           ;protocol.c: 117: value = value_;
  6850  11FF  0821               	movf	PROTOCOL_SET@value_,w
  6851  1200  00A0               	movwf	??_PROTOCOL_SET
  6852  1201  0820               	movf	??_PROTOCOL_SET,w
  6853  1202  0021               	movlb	1	; select bank1
  6854  1203  00DE               	movwf	_value^(0+128)
  6855  1204  0008               	return
  6856  1205                     __end_of_PROTOCOL_SET:	
  6857                           
  6858                           	psect	text26
  6859  1217                     __ptext26:	
  6860 ;; *************** function _PROTOCOL_SAV *****************
  6861 ;; Defined at:
  6862 ;;		line 112 in file "protocol.c"
  6863 ;; Parameters:    Size  Location     Type
  6864 ;;		None
  6865 ;; Auto vars:     Size  Location     Type
  6866 ;;		None
  6867 ;; Return value:  Size  Location     Type
  6868 ;;                  1    wreg      void 
  6869 ;; Registers used:
  6870 ;;		wreg, status,2, status,0, pclath, cstack
  6871 ;; Tracked objects:
  6872 ;;		On entry : 0/0
  6873 ;;		On exit  : 0/0
  6874 ;;		Unchanged: 0/0
  6875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6877 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6878 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6879 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6880 ;;Total ram usage:        1 bytes
  6881 ;; Hardware stack levels used:    1
  6882 ;; Hardware stack levels required when called:    4
  6883 ;; This function calls:
  6884 ;;		_DATAEE_WriteByte
  6885 ;; This function is called by:
  6886 ;;		_PROTOCOL_Loop
  6887 ;; This function uses a non-reentrant model
  6888 ;;
  6889                           
  6890                           
  6891                           ;psect for function _PROTOCOL_SAV
  6892  1217                     _PROTOCOL_SAV:	
  6893                           
  6894                           ;protocol.c: 113: DATAEE_WriteByte(1, value);
  6895                           
  6896                           ;incstack = 0
  6897                           ; Regs used in _PROTOCOL_SAV: [wreg+status,2+status,0+pclath+cstack]
  6898  1217  0021               	movlb	1	; select bank1
  6899  1218  085E               	movf	_value^(0+128),w
  6900  1219  0020               	movlb	0	; select bank0
  6901  121A  00A3               	movwf	??_PROTOCOL_SAV
  6902  121B  0823               	movf	??_PROTOCOL_SAV,w
  6903  121C  00A0               	movwf	DATAEE_WriteByte@bData
  6904  121D  3001               	movlw	1
  6905  121E  3193  23CE         	fcall	_DATAEE_WriteByte
  6906  1220  0008               	return
  6907  1221                     __end_of_PROTOCOL_SAV:	
  6908                           
  6909                           	psect	text27
  6910  11DB                     __ptext27:	
  6911 ;; *************** function _PROTOCOL_Read_Device_Address *****************
  6912 ;; Defined at:
  6913 ;;		line 94 in file "protocol.c"
  6914 ;; Parameters:    Size  Location     Type
  6915 ;;		None
  6916 ;; Auto vars:     Size  Location     Type
  6917 ;;		None
  6918 ;; Return value:  Size  Location     Type
  6919 ;;                  1    wreg      unsigned char 
  6920 ;; Registers used:
  6921 ;;		wreg
  6922 ;; Tracked objects:
  6923 ;;		On entry : 0/0
  6924 ;;		On exit  : 0/0
  6925 ;;		Unchanged: 0/0
  6926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6928 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6929 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6930 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6931 ;;Total ram usage:        0 bytes
  6932 ;; Hardware stack levels used:    1
  6933 ;; Hardware stack levels required when called:    3
  6934 ;; This function calls:
  6935 ;;		Nothing
  6936 ;; This function is called by:
  6937 ;;		_PROTOCOL_Loop
  6938 ;; This function uses a non-reentrant model
  6939 ;;
  6940                           
  6941                           
  6942                           ;psect for function _PROTOCOL_Read_Device_Address
  6943  11DB                     _PROTOCOL_Read_Device_Address:	
  6944                           
  6945                           ;protocol.c: 95: return slave_address;
  6946                           
  6947                           ;incstack = 0
  6948                           ; Regs used in _PROTOCOL_Read_Device_Address: [wreg]
  6949  11DB  0021               	movlb	1	; select bank1
  6950  11DC  0860               	movf	_slave_address^(0+128),w
  6951  11DD  0008               	return
  6952  11DE                     __end_of_PROTOCOL_Read_Device_Address:	
  6953                           
  6954                           	psect	text28
  6955  12A8                     __ptext28:	
  6956 ;; *************** function _PROTOCOL_EXT *****************
  6957 ;; Defined at:
  6958 ;;		line 121 in file "protocol.c"
  6959 ;; Parameters:    Size  Location     Type
  6960 ;;  char_buf        1    wreg     PTR unsigned char 
  6961 ;;		 -> buf(48), 
  6962 ;; Auto vars:     Size  Location     Type
  6963 ;;  char_buf        1   70[BANK0 ] PTR unsigned char 
  6964 ;;		 -> buf(48), 
  6965 ;; Return value:  Size  Location     Type
  6966 ;;                  1    wreg      void 
  6967 ;; Registers used:
  6968 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6969 ;; Tracked objects:
  6970 ;;		On entry : 0/0
  6971 ;;		On exit  : 0/0
  6972 ;;		Unchanged: 0/0
  6973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6975 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6976 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6977 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6978 ;;Total ram usage:        2 bytes
  6979 ;; Hardware stack levels used:    1
  6980 ;; Hardware stack levels required when called:   10
  6981 ;; This function calls:
  6982 ;;		Absolute function
  6983 ;;		_command_handler
  6984 ;; This function is called by:
  6985 ;;		_PROTOCOL_Loop
  6986 ;; This function uses a non-reentrant model
  6987 ;;
  6988                           
  6989                           
  6990                           ;psect for function _PROTOCOL_EXT
  6991  12A8                     _PROTOCOL_EXT:	
  6992                           
  6993                           ;incstack = 0
  6994                           ; Regs used in _PROTOCOL_EXT: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6995                           ;PROTOCOL_EXT@char_buf stored from wreg
  6996  12A8  0020               	movlb	0	; select bank0
  6997  12A9  00E6               	movwf	PROTOCOL_EXT@char_buf
  6998                           
  6999                           ;protocol.c: 122: if (PROTOCOL_Extension_Handler) PROTOCOL_Extension_Handler(char_buf);
  7000  12AA  0022               	movlb	2	; select bank2
  7001  12AB  082C               	movf	_PROTOCOL_Extension_Handler^(0+256),w
  7002  12AC  042D               	iorwf	(_PROTOCOL_Extension_Handler+1)^(0+256),w
  7003  12AD  1903               	btfsc	3,2
  7004  12AE  0008               	return
  7005  12AF  0020               	movlb	0	; select bank0
  7006  12B0  0866               	movf	PROTOCOL_EXT@char_buf,w
  7007  12B1  00E5               	movwf	??_PROTOCOL_EXT
  7008  12B2  0865               	movf	??_PROTOCOL_EXT,w
  7009  12B3  00DB               	movwf	command_handler@buf
  7010  12B4  0022               	movlb	2	; select bank2
  7011  12B5  082D               	movf	(_PROTOCOL_Extension_Handler+1)^(0+256),w
  7012  12B6  008A               	movwf	10
  7013  12B7  082C               	movf	_PROTOCOL_Extension_Handler^(0+256),w
  7014  12B8  000A               	callw
  7015  12B9  3192               	pagesel	$
  7016  12BA  0008               	return
  7017  12BB                     __end_of_PROTOCOL_EXT:	
  7018                           
  7019                           	psect	text29
  7020  0E3E                     __ptext29:	
  7021 ;; *************** function _command_handler *****************
  7022 ;; Defined at:
  7023 ;;		line 365 in file "main.c"
  7024 ;; Parameters:    Size  Location     Type
  7025 ;;  buf             1   59[BANK0 ] PTR unsigned char 
  7026 ;;		 -> buf(48), 
  7027 ;; Auto vars:     Size  Location     Type
  7028 ;;  i               1   68[BANK0 ] unsigned char 
  7029 ;;  dev_addr        1   67[BANK0 ] unsigned char 
  7030 ;; Return value:  Size  Location     Type
  7031 ;;                  1    wreg      void 
  7032 ;; Registers used:
  7033 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7034 ;; Tracked objects:
  7035 ;;		On entry : 0/0
  7036 ;;		On exit  : 0/0
  7037 ;;		Unchanged: 0/0
  7038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7039 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7040 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7041 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7042 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7043 ;;Total ram usage:       10 bytes
  7044 ;; Hardware stack levels used:    1
  7045 ;; Hardware stack levels required when called:    9
  7046 ;; This function calls:
  7047 ;;		_DATAEE_WriteByte
  7048 ;;		___awdiv
  7049 ;;		_atoi
  7050 ;;		_one_shot_sen
  7051 ;;		_print_dev_map
  7052 ;;		_printf
  7053 ;;		_put_cmd
  7054 ;;		_strncmp
  7055 ;; This function is called by:
  7056 ;;		_main
  7057 ;;		_PROTOCOL_EXT
  7058 ;; This function uses a non-reentrant model
  7059 ;;
  7060                           
  7061                           
  7062                           ;psect for function _command_handler
  7063  0E3E                     _command_handler:	
  7064                           
  7065                           ;main.c: 366: static uint8_t pos = 0;
  7066                           ;main.c: 367: uint8_t i;
  7067                           ;main.c: 368: uint8_t dev_addr;
  7068                           ;main.c: 369: if (!strncmp(("I2C"), (buf), 3)) {
  7069                           
  7070                           ;incstack = 0
  7071                           ; Regs used in _command_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7072  0E3E  3079               	movlw	low (STR_20| (0+32768))
  7073  0E3F  0020               	movlb	0	; select bank0
  7074  0E40  00A0               	movwf	strncmp@s1
  7075  0E41  3091               	movlw	high (STR_20| (0+32768))
  7076  0E42  00A1               	movwf	strncmp@s1+1
  7077  0E43  085B               	movf	command_handler@buf,w
  7078  0E44  00A2               	movwf	strncmp@s2
  7079  0E45  3002               	movlw	2
  7080  0E46  00A3               	movwf	strncmp@s2+1
  7081  0E47  3003               	movlw	3
  7082  0E48  00A4               	movwf	strncmp@len
  7083  0E49  3000               	movlw	0
  7084  0E4A  00A5               	movwf	strncmp@len+1
  7085  0E4B  3188  2002  318E   	fcall	_strncmp
  7086  0E4E  0020               	movlb	0	; select bank0
  7087  0E4F  0820               	movf	?_strncmp,w
  7088  0E50  0421               	iorwf	?_strncmp+1,w
  7089  0E51  1D03               	btfss	3,2
  7090  0E52  2E61               	goto	l5584
  7091                           
  7092                           ;main.c: 370: BACKPLANE_SLAVE_ADDRESS = atoi(&buf[4]);
  7093  0E53  085B               	movf	command_handler@buf,w
  7094  0E54  3E04               	addlw	4
  7095  0E55  00A6               	movwf	atoi@s
  7096  0E56  3002               	movlw	2
  7097  0E57  00A7               	movwf	atoi@s+1
  7098  0E58  3189  21E3         	fcall	_atoi
  7099  0E5A  0020               	movlb	0	; select bank0
  7100  0E5B  0826               	movf	?_atoi,w
  7101  0E5C  00DC               	movwf	??_command_handler
  7102  0E5D  085C               	movf	??_command_handler,w
  7103  0E5E  0021               	movlb	1	; select bank1
  7104  0E5F  00EE               	movwf	_BACKPLANE_SLAVE_ADDRESS^(0+128)
  7105                           
  7106                           ;main.c: 371: } else if (!strncmp(("MAP"), (buf), 3)) {
  7107  0E60  0008               	return
  7108  0E61                     l5584:	
  7109  0E61  3091               	movlw	low (STR_21| (0+32768))
  7110  0E62  0020               	movlb	0	; select bank0
  7111  0E63  00A0               	movwf	strncmp@s1
  7112  0E64  3091               	movlw	high (STR_21| (0+32768))
  7113  0E65  00A1               	movwf	strncmp@s1+1
  7114  0E66  085B               	movf	command_handler@buf,w
  7115  0E67  00A2               	movwf	strncmp@s2
  7116  0E68  3002               	movlw	2
  7117  0E69  00A3               	movwf	strncmp@s2+1
  7118  0E6A  3003               	movlw	3
  7119  0E6B  00A4               	movwf	strncmp@len
  7120  0E6C  3000               	movlw	0
  7121  0E6D  00A5               	movwf	strncmp@len+1
  7122  0E6E  3188  2002  318E   	fcall	_strncmp
  7123  0E71  0020               	movlb	0	; select bank0
  7124  0E72  0820               	movf	?_strncmp,w
  7125  0E73  0421               	iorwf	?_strncmp+1,w
  7126  0E74  1D03               	btfss	3,2
  7127  0E75  2E79               	goto	l5588
  7128                           
  7129                           ;main.c: 372: print_dev_map();
  7130  0E76  3196  2687         	fcall	_print_dev_map
  7131                           
  7132                           ;main.c: 373: } else if (!strncmp(("POS"), (buf), 3)) {
  7133  0E78  0008               	return
  7134  0E79                     l5588:	
  7135  0E79  3099               	movlw	low (STR_22| (0+32768))
  7136  0E7A  0020               	movlb	0	; select bank0
  7137  0E7B  00A0               	movwf	strncmp@s1
  7138  0E7C  3091               	movlw	high (STR_22| (0+32768))
  7139  0E7D  00A1               	movwf	strncmp@s1+1
  7140  0E7E  085B               	movf	command_handler@buf,w
  7141  0E7F  00A2               	movwf	strncmp@s2
  7142  0E80  3002               	movlw	2
  7143  0E81  00A3               	movwf	strncmp@s2+1
  7144  0E82  3003               	movlw	3
  7145  0E83  00A4               	movwf	strncmp@len
  7146  0E84  3000               	movlw	0
  7147  0E85  00A5               	movwf	strncmp@len+1
  7148  0E86  3188  2002  318E   	fcall	_strncmp
  7149  0E89  0020               	movlb	0	; select bank0
  7150  0E8A  0820               	movf	?_strncmp,w
  7151  0E8B  0421               	iorwf	?_strncmp+1,w
  7152  0E8C  1D03               	btfss	3,2
  7153  0E8D  2EA6               	goto	l5596
  7154                           
  7155                           ;main.c: 374: pos = atoi(&buf[4]);
  7156  0E8E  085B               	movf	command_handler@buf,w
  7157  0E8F  3E04               	addlw	4
  7158  0E90  00A6               	movwf	atoi@s
  7159  0E91  3002               	movlw	2
  7160  0E92  00A7               	movwf	atoi@s+1
  7161  0E93  3189  21E3  318E   	fcall	_atoi
  7162  0E96  0020               	movlb	0	; select bank0
  7163  0E97  0826               	movf	?_atoi,w
  7164  0E98  00DC               	movwf	??_command_handler
  7165  0E99  085C               	movf	??_command_handler,w
  7166  0E9A  00EC               	movwf	command_handler@pos
  7167                           
  7168                           ;main.c: 375: if (pos > 27) printf("!:POS:POS LARGER THAN 27\n");
  7169  0E9B  301C               	movlw	28
  7170  0E9C  026C               	subwf	command_handler@pos,w
  7171  0E9D  1C03               	skipc
  7172  0E9E  0008               	return
  7173  0E9F  3025               	movlw	low (STR_23| (0+32768))
  7174  0EA0  00AE               	movwf	printf@f
  7175  0EA1  3090               	movlw	high (STR_23| (0+32768))
  7176  0EA2  00AF               	movwf	printf@f+1
  7177  0EA3  3185  251C         	fcall	_printf
  7178                           
  7179                           ;main.c: 376: } else if (!strncmp(("WSC"), (buf), 3)) {
  7180  0EA5  0008               	return
  7181  0EA6                     l5596:	
  7182  0EA6  3085               	movlw	low (STR_24| (0+32768))
  7183  0EA7  0020               	movlb	0	; select bank0
  7184  0EA8  00A0               	movwf	strncmp@s1
  7185  0EA9  3091               	movlw	high (STR_24| (0+32768))
  7186  0EAA  00A1               	movwf	strncmp@s1+1
  7187  0EAB  085B               	movf	command_handler@buf,w
  7188  0EAC  00A2               	movwf	strncmp@s2
  7189  0EAD  3002               	movlw	2
  7190  0EAE  00A3               	movwf	strncmp@s2+1
  7191  0EAF  3003               	movlw	3
  7192  0EB0  00A4               	movwf	strncmp@len
  7193  0EB1  3000               	movlw	0
  7194  0EB2  00A5               	movwf	strncmp@len+1
  7195  0EB3  3188  2002  318E   	fcall	_strncmp
  7196  0EB6  0020               	movlb	0	; select bank0
  7197  0EB7  0820               	movf	?_strncmp,w
  7198  0EB8  0421               	iorwf	?_strncmp+1,w
  7199  0EB9  1D03               	btfss	3,2
  7200  0EBA  2F02               	goto	l5608
  7201                           
  7202                           ;main.c: 377: if (pos <= 27) {
  7203  0EBB  301C               	movlw	28
  7204  0EBC  026C               	subwf	command_handler@pos,w
  7205  0EBD  1803               	skipnc
  7206  0EBE  2EFB               	goto	l5606
  7207                           
  7208                           ;main.c: 378: dev_addr = atoi(&buf[4]);
  7209  0EBF  085B               	movf	command_handler@buf,w
  7210  0EC0  3E04               	addlw	4
  7211  0EC1  00A6               	movwf	atoi@s
  7212  0EC2  3002               	movlw	2
  7213  0EC3  00A7               	movwf	atoi@s+1
  7214  0EC4  3189  21E3  318E   	fcall	_atoi
  7215  0EC7  0020               	movlb	0	; select bank0
  7216  0EC8  0826               	movf	?_atoi,w
  7217  0EC9  00DC               	movwf	??_command_handler
  7218  0ECA  085C               	movf	??_command_handler,w
  7219  0ECB  00E3               	movwf	command_handler@dev_addr
  7220                           
  7221                           ;main.c: 379: DATAEE_WriteByte(1 + pos + 1, dev_addr);
  7222  0ECC  0863               	movf	command_handler@dev_addr,w
  7223  0ECD  00DC               	movwf	??_command_handler
  7224  0ECE  085C               	movf	??_command_handler,w
  7225  0ECF  00A0               	movwf	DATAEE_WriteByte@bData
  7226  0ED0  086C               	movf	command_handler@pos,w
  7227  0ED1  3E02               	addlw	2
  7228  0ED2  3193  23CE  318E   	fcall	_DATAEE_WriteByte
  7229                           
  7230                           ;main.c: 380: schedule[pos/4][pos%4] = dev_addr;
  7231  0ED5  0020               	movlb	0	; select bank0
  7232  0ED6  0863               	movf	command_handler@dev_addr,w
  7233  0ED7  00DC               	movwf	??_command_handler
  7234  0ED8  3004               	movlw	4
  7235  0ED9  00A0               	movwf	___awdiv@divisor
  7236  0EDA  3000               	movlw	0
  7237  0EDB  00A1               	movwf	___awdiv@divisor+1
  7238  0EDC  086C               	movf	command_handler@pos,w
  7239  0EDD  00DD               	movwf	??_command_handler+1
  7240  0EDE  01DE               	clrf	??_command_handler+2
  7241  0EDF  085D               	movf	??_command_handler+1,w
  7242  0EE0  00A2               	movwf	___awdiv@dividend
  7243  0EE1  085E               	movf	??_command_handler+2,w
  7244  0EE2  00A3               	movwf	___awdiv@dividend+1
  7245  0EE3  3188  20E5  318E   	fcall	___awdiv
  7246  0EE6  0020               	movlb	0	; select bank0
  7247  0EE7  0820               	movf	?___awdiv,w
  7248  0EE8  00DF               	movwf	??_command_handler+3
  7249  0EE9  3002               	movlw	2
  7250  0EEA                     u6525:	
  7251  0EEA  35DF               	lslf	??_command_handler+3,f
  7252  0EEB  0B89               	decfsz	9,f
  7253  0EEC  2EEA               	goto	u6525
  7254  0EED  30A0               	movlw	(low (_schedule| (0+256)))& (0+255)
  7255  0EEE  075F               	addwf	??_command_handler+3,w
  7256  0EEF  00E0               	movwf	??_command_handler+4
  7257  0EF0  086C               	movf	command_handler@pos,w
  7258  0EF1  3903               	andlw	3
  7259  0EF2  0760               	addwf	??_command_handler+4,w
  7260  0EF3  00E1               	movwf	??_command_handler+5
  7261  0EF4  0861               	movf	??_command_handler+5,w
  7262  0EF5  0086               	movwf	6
  7263  0EF6  3001               	movlw	1	; select bank3/4
  7264  0EF7  0087               	movwf	7
  7265  0EF8  085C               	movf	??_command_handler,w
  7266  0EF9  0081               	movwf	1
  7267                           
  7268                           ;main.c: 381: } else {
  7269  0EFA  0008               	return
  7270  0EFB                     l5606:	
  7271                           
  7272                           ;main.c: 382: printf("!:WSC:POS LARGER THAN 27\n");
  7273  0EFB  300B               	movlw	low (STR_25| (0+32768))
  7274  0EFC  00AE               	movwf	printf@f
  7275  0EFD  3090               	movlw	high (STR_25| (0+32768))
  7276  0EFE  00AF               	movwf	printf@f+1
  7277  0EFF  3185  251C         	fcall	_printf
  7278                           
  7279                           ;main.c: 383: }
  7280                           ;main.c: 384: } else if (!strncmp(("RSC"), (buf), 3)) {
  7281  0F01  0008               	return
  7282  0F02                     l5608:	
  7283  0F02  3081               	movlw	low (STR_26| (0+32768))
  7284  0F03  0020               	movlb	0	; select bank0
  7285  0F04  00A0               	movwf	strncmp@s1
  7286  0F05  3091               	movlw	high (STR_26| (0+32768))
  7287  0F06  00A1               	movwf	strncmp@s1+1
  7288  0F07  085B               	movf	command_handler@buf,w
  7289  0F08  00A2               	movwf	strncmp@s2
  7290  0F09  3002               	movlw	2
  7291  0F0A  00A3               	movwf	strncmp@s2+1
  7292  0F0B  3003               	movlw	3
  7293  0F0C  00A4               	movwf	strncmp@len
  7294  0F0D  3000               	movlw	0
  7295  0F0E  00A5               	movwf	strncmp@len+1
  7296  0F0F  3188  2002  318E   	fcall	_strncmp
  7297  0F12  0020               	movlb	0	; select bank0
  7298  0F13  0820               	movf	?_strncmp,w
  7299  0F14  0421               	iorwf	?_strncmp+1,w
  7300  0F15  1D03               	btfss	3,2
  7301  0F16  2F8B               	goto	l5630
  7302                           
  7303                           ;main.c: 385: printf("$:RSC:");
  7304  0F17  3044               	movlw	low (STR_27| (0+32768))
  7305  0F18  00AE               	movwf	printf@f
  7306  0F19  3091               	movlw	high (STR_27| (0+32768))
  7307  0F1A  00AF               	movwf	printf@f+1
  7308  0F1B  3185  251C  318E   	fcall	_printf
  7309                           
  7310                           ;main.c: 386: for (i=0; i<27; i++) {
  7311  0F1E  0020               	movlb	0	; select bank0
  7312  0F1F  01E4               	clrf	command_handler@i
  7313  0F20  301B               	movlw	27
  7314  0F21  0264               	subwf	command_handler@i,w
  7315  0F22  1803               	btfsc	3,0
  7316  0F23  2F7B               	goto	l5628
  7317  0F24                     l5618:	
  7318                           
  7319                           ;main.c: 387: if ((i+1) % 4 == 0) {
  7320  0F24  0864               	movf	command_handler@i,w
  7321  0F25  3E01               	addlw	1
  7322  0F26  3903               	andlw	3
  7323  0F27  1D03               	btfss	3,2
  7324  0F28  2F43               	goto	l5622
  7325                           
  7326                           ;main.c: 388: printf("%d|", schedule[i/4][i%4]);
  7327  0F29  30A9               	movlw	low (STR_28| (0+32768))
  7328  0F2A  00AE               	movwf	printf@f
  7329  0F2B  3091               	movlw	high (STR_28| (0+32768))
  7330  0F2C  00AF               	movwf	printf@f+1
  7331  0F2D  3004               	movlw	4
  7332  0F2E  00A0               	movwf	___awdiv@divisor
  7333  0F2F  3000               	movlw	0
  7334  0F30  00A1               	movwf	___awdiv@divisor+1
  7335  0F31  0864               	movf	command_handler@i,w
  7336  0F32  00DC               	movwf	??_command_handler
  7337  0F33  01DD               	clrf	??_command_handler+1
  7338  0F34  085C               	movf	??_command_handler,w
  7339  0F35  00A2               	movwf	___awdiv@dividend
  7340  0F36  085D               	movf	??_command_handler+1,w
  7341  0F37  00A3               	movwf	___awdiv@dividend+1
  7342  0F38  3188  20E5  318E   	fcall	___awdiv
  7343  0F3B  0020               	movlb	0	; select bank0
  7344  0F3C  0820               	movf	?___awdiv,w
  7345  0F3D  00DE               	movwf	??_command_handler+2
  7346  0F3E  3002               	movlw	2
  7347  0F3F                     u6565:	
  7348  0F3F  35DE               	lslf	??_command_handler+2,f
  7349  0F40  0B89               	decfsz	9,f
  7350  0F41  2F3F               	goto	u6565
  7351  0F42  2F5D               	goto	L9
  7352  0F43                     l5622:	
  7353                           ;main.c: 389: } else {
  7354                           
  7355                           
  7356                           ;main.c: 390: printf("%d,", schedule[i/4][i%4]);
  7357  0F43  3071               	movlw	low (STR_14| (0+32768))
  7358  0F44  0020               	movlb	0	; select bank0
  7359  0F45  00AE               	movwf	printf@f
  7360  0F46  3091               	movlw	high (STR_14| (0+32768))
  7361  0F47  00AF               	movwf	printf@f+1
  7362  0F48  3004               	movlw	4
  7363  0F49  00A0               	movwf	___awdiv@divisor
  7364  0F4A  3000               	movlw	0
  7365  0F4B  00A1               	movwf	___awdiv@divisor+1
  7366  0F4C  0864               	movf	command_handler@i,w
  7367  0F4D  00DC               	movwf	??_command_handler
  7368  0F4E  01DD               	clrf	??_command_handler+1
  7369  0F4F  085C               	movf	??_command_handler,w
  7370  0F50  00A2               	movwf	___awdiv@dividend
  7371  0F51  085D               	movf	??_command_handler+1,w
  7372  0F52  00A3               	movwf	___awdiv@dividend+1
  7373  0F53  3188  20E5  318E   	fcall	___awdiv
  7374  0F56  0020               	movlb	0	; select bank0
  7375  0F57  0820               	movf	?___awdiv,w
  7376  0F58  00DE               	movwf	??_command_handler+2
  7377  0F59  3002               	movlw	2
  7378  0F5A                     u6575:	
  7379  0F5A  35DE               	lslf	??_command_handler+2,f
  7380  0F5B  0B89               	decfsz	9,f
  7381  0F5C  2F5A               	goto	u6575
  7382  0F5D                     L9:	
  7383  0F5D  30A0               	movlw	(low (_schedule| (0+256)))& (0+255)
  7384  0F5E  075E               	addwf	??_command_handler+2,w
  7385  0F5F  00DF               	movwf	??_command_handler+3
  7386  0F60  0864               	movf	command_handler@i,w
  7387  0F61  3903               	andlw	3
  7388  0F62  075F               	addwf	??_command_handler+3,w
  7389  0F63  00E0               	movwf	??_command_handler+4
  7390  0F64  0860               	movf	??_command_handler+4,w
  7391  0F65  0086               	movwf	6
  7392  0F66  3001               	movlw	1	; select bank3/4
  7393  0F67  0087               	movwf	7
  7394  0F68  0801               	movf	1,w
  7395  0F69  00E1               	movwf	??_command_handler+5
  7396  0F6A  01E2               	clrf	??_command_handler+6
  7397  0F6B  0861               	movf	??_command_handler+5,w
  7398  0F6C  00B0               	movwf	?_printf+2
  7399  0F6D  0862               	movf	??_command_handler+6,w
  7400  0F6E  00B1               	movwf	?_printf+3
  7401  0F6F  3185  251C  318E   	fcall	_printf
  7402  0F72  3001               	movlw	1
  7403  0F73  0020               	movlb	0	; select bank0
  7404  0F74  00DC               	movwf	??_command_handler
  7405  0F75  085C               	movf	??_command_handler,w
  7406  0F76  07E4               	addwf	command_handler@i,f
  7407  0F77  301B               	movlw	27
  7408  0F78  0264               	subwf	command_handler@i,w
  7409  0F79  1C03               	skipc
  7410  0F7A  2F24               	goto	l5618
  7411  0F7B                     l5628:	
  7412                           
  7413                           ;main.c: 391: }
  7414                           ;main.c: 392: }
  7415                           ;main.c: 393: printf("%d\n", schedule[6][3]);
  7416  0F7B  30DA               	movlw	low ((STR_48+6)| (0+32768))
  7417  0F7C  00AE               	movwf	printf@f
  7418  0F7D  3090               	movlw	high ((STR_48+6)| (0+32768))
  7419  0F7E  00AF               	movwf	printf@f+1
  7420  0F7F  0023               	movlb	3	; select bank3
  7421  0F80  083B               	movf	(_schedule^(0+384)+27),w
  7422  0F81  0020               	movlb	0	; select bank0
  7423  0F82  00DC               	movwf	??_command_handler
  7424  0F83  01DD               	clrf	??_command_handler+1
  7425  0F84  085C               	movf	??_command_handler,w
  7426  0F85  00B0               	movwf	?_printf+2
  7427  0F86  085D               	movf	??_command_handler+1,w
  7428  0F87  00B1               	movwf	?_printf+3
  7429  0F88  3185  251C         	fcall	_printf
  7430                           
  7431                           ;main.c: 394: } else if (!strncmp(("CSC"), (buf), 3)) {
  7432  0F8A  0008               	return
  7433  0F8B                     l5630:	
  7434  0F8B  307D               	movlw	low (STR_31| (0+32768))
  7435  0F8C  0020               	movlb	0	; select bank0
  7436  0F8D  00A0               	movwf	strncmp@s1
  7437  0F8E  3091               	movlw	high (STR_31| (0+32768))
  7438  0F8F  00A1               	movwf	strncmp@s1+1
  7439  0F90  085B               	movf	command_handler@buf,w
  7440  0F91  00A2               	movwf	strncmp@s2
  7441  0F92  3002               	movlw	2
  7442  0F93  00A3               	movwf	strncmp@s2+1
  7443  0F94  3003               	movlw	3
  7444  0F95  00A4               	movwf	strncmp@len
  7445  0F96  3000               	movlw	0
  7446  0F97  00A5               	movwf	strncmp@len+1
  7447  0F98  3188  2002  318E   	fcall	_strncmp
  7448  0F9B  0020               	movlb	0	; select bank0
  7449  0F9C  0820               	movf	?_strncmp,w
  7450  0F9D  0421               	iorwf	?_strncmp+1,w
  7451  0F9E  1D03               	btfss	3,2
  7452  0F9F  2FD2               	goto	l5646
  7453                           
  7454                           ;main.c: 395: for (i=0; i<28; i++) {
  7455  0FA0  01E4               	clrf	command_handler@i
  7456  0FA1                     L10:	
  7457  0FA1  301C               	movlw	28
  7458  0FA2  0264               	subwf	command_handler@i,w
  7459  0FA3  1803               	btfsc	3,0
  7460  0FA4  0008               	return
  7461                           
  7462                           ;main.c: 396: DATAEE_WriteByte(1+i+1, 0);
  7463  0FA5  01A0               	clrf	DATAEE_WriteByte@bData
  7464  0FA6  0864               	movf	command_handler@i,w
  7465  0FA7  3E02               	addlw	2
  7466  0FA8  3193  23CE  318E   	fcall	_DATAEE_WriteByte
  7467                           
  7468                           ;main.c: 397: schedule[i/4][i%4] = 0;
  7469  0FAB  3004               	movlw	4
  7470  0FAC  0020               	movlb	0	; select bank0
  7471  0FAD  00A0               	movwf	___awdiv@divisor
  7472  0FAE  3000               	movlw	0
  7473  0FAF  00A1               	movwf	___awdiv@divisor+1
  7474  0FB0  0864               	movf	command_handler@i,w
  7475  0FB1  00DC               	movwf	??_command_handler
  7476  0FB2  01DD               	clrf	??_command_handler+1
  7477  0FB3  085C               	movf	??_command_handler,w
  7478  0FB4  00A2               	movwf	___awdiv@dividend
  7479  0FB5  085D               	movf	??_command_handler+1,w
  7480  0FB6  00A3               	movwf	___awdiv@dividend+1
  7481  0FB7  3188  20E5  318E   	fcall	___awdiv
  7482  0FBA  0020               	movlb	0	; select bank0
  7483  0FBB  0820               	movf	?___awdiv,w
  7484  0FBC  00DE               	movwf	??_command_handler+2
  7485  0FBD  3002               	movlw	2
  7486  0FBE                     u6615:	
  7487  0FBE  35DE               	lslf	??_command_handler+2,f
  7488  0FBF  0B89               	decfsz	9,f
  7489  0FC0  2FBE               	goto	u6615
  7490  0FC1  30A0               	movlw	(low (_schedule| (0+256)))& (0+255)
  7491  0FC2  075E               	addwf	??_command_handler+2,w
  7492  0FC3  00DF               	movwf	??_command_handler+3
  7493  0FC4  0864               	movf	command_handler@i,w
  7494  0FC5  3903               	andlw	3
  7495  0FC6  075F               	addwf	??_command_handler+3,w
  7496  0FC7  00E0               	movwf	??_command_handler+4
  7497  0FC8  0860               	movf	??_command_handler+4,w
  7498  0FC9  0086               	movwf	6
  7499  0FCA  3001               	movlw	1	; select bank3/4
  7500  0FCB  0087               	movwf	7
  7501  0FCC  0181               	clrf	1
  7502  0FCD  3001               	movlw	1
  7503  0FCE  00DC               	movwf	??_command_handler
  7504  0FCF  085C               	movf	??_command_handler,w
  7505  0FD0  07E4               	addwf	command_handler@i,f
  7506  0FD1  2FA1               	goto	L10
  7507  0FD2                     l5646:	
  7508                           ;main.c: 398: }
  7509                           ;main.c: 399: } else if (!strncmp(("SEN"), (buf), 3)) {
  7510                           
  7511  0FD2  3089               	movlw	low (STR_32| (0+32768))
  7512  0FD3  00A0               	movwf	strncmp@s1
  7513  0FD4  3091               	movlw	high (STR_32| (0+32768))
  7514  0FD5  00A1               	movwf	strncmp@s1+1
  7515  0FD6  085B               	movf	command_handler@buf,w
  7516  0FD7  00A2               	movwf	strncmp@s2
  7517  0FD8  3002               	movlw	2
  7518  0FD9  00A3               	movwf	strncmp@s2+1
  7519  0FDA  3003               	movlw	3
  7520  0FDB  00A4               	movwf	strncmp@len
  7521  0FDC  3000               	movlw	0
  7522  0FDD  00A5               	movwf	strncmp@len+1
  7523  0FDE  3188  2002  318E   	fcall	_strncmp
  7524  0FE1  0020               	movlb	0	; select bank0
  7525  0FE2  0820               	movf	?_strncmp,w
  7526  0FE3  0421               	iorwf	?_strncmp+1,w
  7527  0FE4  1D03               	btfss	3,2
  7528  0FE5  2FF7               	goto	l5652
  7529                           
  7530                           ;main.c: 400: dev_addr = atoi(&buf[4]);
  7531  0FE6  085B               	movf	command_handler@buf,w
  7532  0FE7  3E04               	addlw	4
  7533  0FE8  00A6               	movwf	atoi@s
  7534  0FE9  3002               	movlw	2
  7535  0FEA  00A7               	movwf	atoi@s+1
  7536  0FEB  3189  21E3  318E   	fcall	_atoi
  7537  0FEE  0020               	movlb	0	; select bank0
  7538  0FEF  0826               	movf	?_atoi,w
  7539  0FF0  00DC               	movwf	??_command_handler
  7540  0FF1  085C               	movf	??_command_handler,w
  7541  0FF2  00E3               	movwf	command_handler@dev_addr
  7542                           
  7543                           ;main.c: 401: one_shot_sen(dev_addr);
  7544  0FF3  0863               	movf	command_handler@dev_addr,w
  7545  0FF4  3196  2600         	fcall	_one_shot_sen
  7546                           
  7547                           ;main.c: 402: } else if (BACKPLANE_SLAVE_ADDRESS != 0x01) {
  7548  0FF6  0008               	return
  7549  0FF7                     l5652:	
  7550  0FF7  0021               	movlb	1	; select bank1
  7551  0FF8  036E               	decf	_BACKPLANE_SLAVE_ADDRESS^(0+128),w
  7552  0FF9  1903               	btfsc	3,2
  7553  0FFA  0008               	return
  7554                           
  7555                           ;main.c: 403: put_cmd(buf);
  7556  0FFB  0020               	movlb	0	; select bank0
  7557  0FFC  085B               	movf	command_handler@buf,w
  7558  0FFD  3196  26CF         	fcall	_put_cmd
  7559  0FFF  0008               	return
  7560  1000                     __end_of_command_handler:	
  7561                           
  7562                           	psect	text30
  7563  0802                     __ptext30:	
  7564 ;; *************** function _strncmp *****************
  7565 ;; Defined at:
  7566 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strncmp.c"
  7567 ;; Parameters:    Size  Location     Type
  7568 ;;  s1              2    0[BANK0 ] PTR const unsigned char 
  7569 ;;		 -> STR_47(4), STR_46(4), STR_44(4), STR_43(4), 
  7570 ;;		 -> STR_40(4), STR_39(4), STR_38(4), STR_36(4), 
  7571 ;;		 -> STR_32(4), STR_31(4), STR_26(4), STR_24(4), 
  7572 ;;		 -> STR_22(4), STR_21(4), STR_20(4), STR_10(4), 
  7573 ;;		 -> STR_9(4), STR_6(4), STR_5(4), STR_4(4), 
  7574 ;;		 -> STR_1(4), 
  7575 ;;  s2              2    2[BANK0 ] PTR const unsigned char 
  7576 ;;		 -> buf(48), cmd_buf(192), 
  7577 ;;  len             2    4[BANK0 ] unsigned int 
  7578 ;; Auto vars:     Size  Location     Type
  7579 ;;		None
  7580 ;; Return value:  Size  Location     Type
  7581 ;;                  2    0[BANK0 ] int 
  7582 ;; Registers used:
  7583 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  7584 ;; Tracked objects:
  7585 ;;		On entry : 0/0
  7586 ;;		On exit  : 0/0
  7587 ;;		Unchanged: 0/0
  7588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7589 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7591 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7592 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7593 ;;Total ram usage:        8 bytes
  7594 ;; Hardware stack levels used:    1
  7595 ;; Hardware stack levels required when called:    3
  7596 ;; This function calls:
  7597 ;;		Nothing
  7598 ;; This function is called by:
  7599 ;;		_exec_remote_cmd
  7600 ;;		_command_handler
  7601 ;;		_PROTOCOL_Loop
  7602 ;; This function uses a non-reentrant model
  7603 ;;
  7604                           
  7605                           
  7606                           ;psect for function _strncmp
  7607  0802                     _strncmp:	
  7608  0802                     l5360:	
  7609                           ;incstack = 0
  7610                           ; Regs used in _strncmp: [wreg-fsr1h+status,2+status,0+pclath]
  7611                           
  7612  0802  3001               	movlw	1
  7613  0803  0020               	movlb	0	; select bank0
  7614  0804  02A4               	subwf	strncmp@len,f
  7615  0805  3000               	movlw	0
  7616  0806  3BA5               	subwfb	strncmp@len+1,f
  7617  0807  0A24               	incf	strncmp@len,w
  7618  0808  1903               	btfsc	3,2
  7619  0809  0A25               	incf	strncmp@len+1,w
  7620  080A  1903               	btfsc	3,2
  7621  080B  2841               	goto	l5362
  7622  080C  0020               	movlb	0	; select bank0
  7623  080D  0820               	movf	strncmp@s1,w
  7624  080E  0084               	movwf	4
  7625  080F  0821               	movf	strncmp@s1+1,w
  7626  0810  0085               	movwf	5
  7627  0811  0012               	moviw fsr0++
  7628  0812  1903               	btfsc	3,2
  7629  0813  2820               	goto	l5354
  7630  0814  0822               	movf	strncmp@s2,w
  7631  0815  0086               	movwf	6
  7632  0816  0823               	movf	strncmp@s2+1,w
  7633  0817  0087               	movwf	7
  7634  0818  0820               	movf	strncmp@s1,w
  7635  0819  0084               	movwf	4
  7636  081A  0821               	movf	strncmp@s1+1,w
  7637  081B  0085               	movwf	5
  7638  081C  0800               	movf	0,w	;code access
  7639  081D  0601               	xorwf	1,w
  7640  081E  1903               	skipnz
  7641  081F  2838               	goto	l5358
  7642  0820                     l5354:	
  7643  0820  0822               	movf	strncmp@s2,w
  7644  0821  0086               	movwf	6
  7645  0822  0823               	movf	strncmp@s2+1,w
  7646  0823  0087               	movwf	7
  7647  0824  0801               	movf	1,w
  7648  0825  00A6               	movwf	??_strncmp
  7649  0826  01A7               	clrf	??_strncmp+1
  7650  0827  09A6               	comf	??_strncmp,f
  7651  0828  09A7               	comf	??_strncmp+1,f
  7652  0829  0AA6               	incf	??_strncmp,f
  7653  082A  1903               	skipnz
  7654  082B  0AA7               	incf	??_strncmp+1,f
  7655  082C  0820               	movf	strncmp@s1,w
  7656  082D  0084               	movwf	4
  7657  082E  0821               	movf	strncmp@s1+1,w
  7658  082F  0085               	movwf	5
  7659  0830  0800               	movf	0,w	;code access
  7660  0831  0726               	addwf	??_strncmp,w
  7661  0832  00A0               	movwf	?_strncmp
  7662  0833  0827               	movf	??_strncmp+1,w
  7663  0834  1803               	skipnc
  7664  0835  0A27               	incf	??_strncmp+1,w
  7665  0836  00A1               	movwf	?_strncmp+1
  7666  0837  0008               	return
  7667  0838                     l5358:	
  7668  0838  3001               	movlw	1
  7669  0839  07A0               	addwf	strncmp@s1,f
  7670  083A  3000               	movlw	0
  7671  083B  3DA1               	addwfc	strncmp@s1+1,f
  7672  083C  3001               	movlw	1
  7673  083D  07A2               	addwf	strncmp@s2,f
  7674  083E  3000               	movlw	0
  7675  083F  3DA3               	addwfc	strncmp@s2+1,f
  7676  0840  2802               	goto	l5360
  7677  0841                     l5362:	
  7678  0841  01A0               	clrf	?_strncmp
  7679  0842  01A1               	clrf	?_strncmp+1
  7680  0843  0008               	return
  7681  0844                     __end_of_strncmp:	
  7682                           
  7683                           	psect	text31
  7684  16CF                     __ptext31:	
  7685 ;; *************** function _put_cmd *****************
  7686 ;; Defined at:
  7687 ;;		line 356 in file "main.c"
  7688 ;; Parameters:    Size  Location     Type
  7689 ;;  buf             1    wreg     PTR unsigned char 
  7690 ;;		 -> buf(48), 
  7691 ;; Auto vars:     Size  Location     Type
  7692 ;;  buf             1   17[BANK0 ] PTR unsigned char 
  7693 ;;		 -> buf(48), 
  7694 ;; Return value:  Size  Location     Type
  7695 ;;                  1    wreg      void 
  7696 ;; Registers used:
  7697 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7698 ;; Tracked objects:
  7699 ;;		On entry : 0/0
  7700 ;;		On exit  : 0/0
  7701 ;;		Unchanged: 0/0
  7702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7704 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7705 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7706 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7707 ;;Total ram usage:        6 bytes
  7708 ;; Hardware stack levels used:    1
  7709 ;; Hardware stack levels required when called:    4
  7710 ;; This function calls:
  7711 ;;		___wmul
  7712 ;;		_strcpy
  7713 ;; This function is called by:
  7714 ;;		_command_handler
  7715 ;; This function uses a non-reentrant model
  7716 ;;
  7717                           
  7718                           
  7719                           ;psect for function _put_cmd
  7720  16CF                     _put_cmd:	
  7721                           
  7722                           ;incstack = 0
  7723                           ; Regs used in _put_cmd: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7724                           ;put_cmd@buf stored from wreg
  7725  16CF  0020               	movlb	0	; select bank0
  7726  16D0  00B1               	movwf	put_cmd@buf
  7727                           
  7728                           ;main.c: 357: static int8_t idx = -1;
  7729                           ;main.c: 358: if (++idx > 3) idx = 0;
  7730  16D1  3001               	movlw	1
  7731  16D2  00AC               	movwf	??_put_cmd
  7732  16D3  082C               	movf	??_put_cmd,w
  7733  16D4  0021               	movlb	1	; select bank1
  7734  16D5  07ED               	addwf	put_cmd@idx^(0+128),f
  7735  16D6  086D               	movf	put_cmd@idx^(0+128),w
  7736  16D7  3A80               	xorlw	128
  7737  16D8  3E7C               	addlw	-132
  7738  16D9  1803               	btfsc	3,0
  7739  16DA  01ED               	clrf	put_cmd@idx^(0+128)
  7740                           
  7741                           ;main.c: 359: if (cmd_buf[idx][0] == '\0') strcpy(cmd_buf[idx], buf);
  7742  16DB  086D               	movf	put_cmd@idx^(0+128),w
  7743  16DC  0020               	movlb	0	; select bank0
  7744  16DD  00AC               	movwf	??_put_cmd
  7745  16DE  01AD               	clrf	??_put_cmd+1
  7746  16DF  082C               	movf	??_put_cmd,w
  7747  16E0  00A0               	movwf	___wmul@multiplier
  7748  16E1  082D               	movf	??_put_cmd+1,w
  7749  16E2  00A1               	movwf	___wmul@multiplier+1
  7750  16E3  3030               	movlw	48
  7751  16E4  00A2               	movwf	___wmul@multiplicand
  7752  16E5  3000               	movlw	0
  7753  16E6  00A3               	movwf	___wmul@multiplicand+1
  7754  16E7  3193  2357  3196   	fcall	___wmul
  7755  16EA  3030               	movlw	48
  7756  16EB  0020               	movlb	0	; select bank0
  7757  16EC  00AE               	movwf	??_put_cmd+2
  7758  16ED  3023               	movlw	35
  7759  16EE  00AF               	movwf	??_put_cmd+3
  7760  16EF  0820               	movf	?___wmul,w
  7761  16F0  072E               	addwf	??_put_cmd+2,w
  7762  16F1  0086               	movwf	6
  7763  16F2  0821               	movf	?___wmul+1,w
  7764  16F3  3D2F               	addwfc	??_put_cmd+3,w
  7765  16F4  0087               	movwf	7
  7766  16F5  0801               	movf	1,w
  7767  16F6  1D03               	btfss	3,2
  7768  16F7  0008               	return
  7769  16F8  0021               	movlb	1	; select bank1
  7770  16F9  086D               	movf	put_cmd@idx^(0+128),w
  7771  16FA  0020               	movlb	0	; select bank0
  7772  16FB  00AC               	movwf	??_put_cmd
  7773  16FC  01AD               	clrf	??_put_cmd+1
  7774  16FD  082C               	movf	??_put_cmd,w
  7775  16FE  00A0               	movwf	___wmul@multiplier
  7776  16FF  082D               	movf	??_put_cmd+1,w
  7777  1700  00A1               	movwf	___wmul@multiplier+1
  7778  1701  3030               	movlw	48
  7779  1702  00A2               	movwf	___wmul@multiplicand
  7780  1703  3000               	movlw	0
  7781  1704  00A3               	movwf	___wmul@multiplicand+1
  7782  1705  3193  2357  3196   	fcall	___wmul
  7783  1708  3030               	movlw	48
  7784  1709  0020               	movlb	0	; select bank0
  7785  170A  00AE               	movwf	??_put_cmd+2
  7786  170B  3023               	movlw	35
  7787  170C  00AF               	movwf	??_put_cmd+3
  7788  170D  0820               	movf	?___wmul,w
  7789  170E  072E               	addwf	??_put_cmd+2,w
  7790  170F  00A6               	movwf	strcpy@to
  7791  1710  0821               	movf	?___wmul+1,w
  7792  1711  3D2F               	addwfc	??_put_cmd+3,w
  7793  1712  00A7               	movwf	strcpy@to+1
  7794  1713  0831               	movf	put_cmd@buf,w
  7795  1714  00B0               	movwf	??_put_cmd+4
  7796  1715  0830               	movf	??_put_cmd+4,w
  7797  1716  00A8               	movwf	strcpy@from
  7798  1717  3193  2304         	fcall	_strcpy
  7799  1719  0008               	return
  7800  171A                     __end_of_put_cmd:	
  7801                           
  7802                           	psect	text32
  7803  1304                     __ptext32:	
  7804 ;; *************** function _strcpy *****************
  7805 ;; Defined at:
  7806 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strcpy.c"
  7807 ;; Parameters:    Size  Location     Type
  7808 ;;  to              2    6[BANK0 ] PTR unsigned char 
  7809 ;;		 -> cmd_buf(192), 
  7810 ;;  from            1    8[BANK0 ] PTR const unsigned char 
  7811 ;;		 -> buf(48), 
  7812 ;; Auto vars:     Size  Location     Type
  7813 ;;  cp              2   10[BANK0 ] PTR unsigned char 
  7814 ;;		 -> cmd_buf(192), 
  7815 ;; Return value:  Size  Location     Type
  7816 ;;                  2    6[BANK0 ] PTR unsigned char 
  7817 ;; Registers used:
  7818 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  7819 ;; Tracked objects:
  7820 ;;		On entry : 0/0
  7821 ;;		On exit  : 0/0
  7822 ;;		Unchanged: 0/0
  7823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7824 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7825 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7826 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7827 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7828 ;;Total ram usage:        6 bytes
  7829 ;; Hardware stack levels used:    1
  7830 ;; Hardware stack levels required when called:    3
  7831 ;; This function calls:
  7832 ;;		Nothing
  7833 ;; This function is called by:
  7834 ;;		_put_cmd
  7835 ;; This function uses a non-reentrant model
  7836 ;;
  7837                           
  7838                           
  7839                           ;psect for function _strcpy
  7840  1304                     _strcpy:	
  7841                           
  7842                           ;incstack = 0
  7843                           ; Regs used in _strcpy: [wreg-fsr1h+status,2+status,0]
  7844  1304  0020               	movlb	0	; select bank0
  7845  1305  0827               	movf	strcpy@to+1,w
  7846  1306  00AB               	movwf	strcpy@cp+1
  7847  1307  0826               	movf	strcpy@to,w
  7848  1308  00AA               	movwf	strcpy@cp
  7849  1309                     l5326:	
  7850  1309  082A               	movf	strcpy@cp,w
  7851  130A  0086               	movwf	6
  7852  130B  082B               	movf	strcpy@cp+1,w
  7853  130C  0087               	movwf	7
  7854  130D  0828               	movf	strcpy@from,w
  7855  130E  0084               	movwf	4
  7856  130F  3002               	movlw	2	; select bank4/5
  7857  1310  0085               	movwf	5
  7858  1311  0800               	movf	0,w
  7859  1312  3FC0               	movwi [0]fsr1
  7860  1313  0889               	movf	9,f
  7861  1314  1903               	btfsc	3,2
  7862  1315  0008               	return
  7863  1316  3001               	movlw	1
  7864  1317  07AA               	addwf	strcpy@cp,f
  7865  1318  3000               	movlw	0
  7866  1319  3DAB               	addwfc	strcpy@cp+1,f
  7867  131A  3001               	movlw	1
  7868  131B  00A9               	movwf	??_strcpy
  7869  131C  0829               	movf	??_strcpy,w
  7870  131D  07A8               	addwf	strcpy@from,f
  7871  131E  2B09               	goto	l5326
  7872  131F                     __end_of_strcpy:	
  7873                           ;	Return value of _strcpy is never used
  7874                           
  7875                           
  7876                           	psect	text33
  7877  1687                     __ptext33:	
  7878 ;; *************** function _print_dev_map *****************
  7879 ;; Defined at:
  7880 ;;		line 216 in file "main.c"
  7881 ;; Parameters:    Size  Location     Type
  7882 ;;		None
  7883 ;; Auto vars:     Size  Location     Type
  7884 ;;  len             1   39[BANK0 ] unsigned char 
  7885 ;;  i               1   38[BANK0 ] unsigned char 
  7886 ;; Return value:  Size  Location     Type
  7887 ;;                  1    wreg      void 
  7888 ;; Registers used:
  7889 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7890 ;; Tracked objects:
  7891 ;;		On entry : 0/0
  7892 ;;		On exit  : 0/0
  7893 ;;		Unchanged: 0/0
  7894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7896 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7897 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7898 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7899 ;;Total ram usage:        4 bytes
  7900 ;; Hardware stack levels used:    1
  7901 ;; Hardware stack levels required when called:    6
  7902 ;; This function calls:
  7903 ;;		_dev_map_iterator
  7904 ;;		_printf
  7905 ;; This function is called by:
  7906 ;;		_command_handler
  7907 ;; This function uses a non-reentrant model
  7908 ;;
  7909                           
  7910                           
  7911                           ;psect for function _print_dev_map
  7912  1687                     _print_dev_map:	
  7913                           
  7914                           ;main.c: 217: uint8_t i;
  7915                           ;main.c: 218: uint8_t len = devs;
  7916                           
  7917                           ;incstack = 0
  7918                           ; Regs used in _print_dev_map: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7919  1687  0021               	movlb	1	; select bank1
  7920  1688  0864               	movf	_devs^(0+128),w
  7921  1689  0020               	movlb	0	; select bank0
  7922  168A  00C4               	movwf	??_print_dev_map
  7923  168B  0844               	movf	??_print_dev_map,w
  7924  168C  00C7               	movwf	print_dev_map@len
  7925                           
  7926                           ;main.c: 219: if (len > 0) {
  7927  168D  0847               	movf	print_dev_map@len,w
  7928  168E  1903               	btfsc	3,2
  7929  168F  2EC7               	goto	l5454
  7930                           
  7931                           ;main.c: 220: len--;
  7932  1690  3001               	movlw	1
  7933  1691  02C7               	subwf	print_dev_map@len,f
  7934                           
  7935                           ;main.c: 221: printf("$:MAP:");
  7936  1692  304B               	movlw	low (STR_13| (0+32768))
  7937  1693  00AE               	movwf	printf@f
  7938  1694  3091               	movlw	high (STR_13| (0+32768))
  7939  1695  00AF               	movwf	printf@f+1
  7940  1696  3185  251C  3196   	fcall	_printf
  7941                           
  7942                           ;main.c: 222: for (i=0; i<len; i++) printf("%d,", dev_map_iterator());
  7943  1699  0020               	movlb	0	; select bank0
  7944  169A  01C6               	clrf	print_dev_map@i
  7945  169B                     l5450:	
  7946  169B  0847               	movf	print_dev_map@len,w
  7947  169C  0246               	subwf	print_dev_map@i,w
  7948  169D  1803               	btfsc	3,0
  7949  169E  2EB6               	goto	l5452
  7950  169F  3071               	movlw	low (STR_14| (0+32768))
  7951  16A0  00AE               	movwf	printf@f
  7952  16A1  3091               	movlw	high (STR_14| (0+32768))
  7953  16A2  00AF               	movwf	printf@f+1
  7954  16A3  3187  27A5  3196   	fcall	_dev_map_iterator
  7955  16A6  0020               	movlb	0	; select bank0
  7956  16A7  00C4               	movwf	??_print_dev_map
  7957  16A8  01C5               	clrf	??_print_dev_map+1
  7958  16A9  0844               	movf	??_print_dev_map,w
  7959  16AA  00B0               	movwf	?_printf+2
  7960  16AB  0845               	movf	??_print_dev_map+1,w
  7961  16AC  00B1               	movwf	?_printf+3
  7962  16AD  3185  251C  3196   	fcall	_printf
  7963  16B0  3001               	movlw	1
  7964  16B1  0020               	movlb	0	; select bank0
  7965  16B2  00C4               	movwf	??_print_dev_map
  7966  16B3  0844               	movf	??_print_dev_map,w
  7967  16B4  07C6               	addwf	print_dev_map@i,f
  7968  16B5  2E9B               	goto	l5450
  7969  16B6                     l5452:	
  7970                           
  7971                           ;main.c: 223: printf("%d\n", dev_map_iterator());
  7972  16B6  30DA               	movlw	low ((STR_48+6)| (0+32768))
  7973  16B7  00AE               	movwf	printf@f
  7974  16B8  3090               	movlw	high ((STR_48+6)| (0+32768))
  7975  16B9  00AF               	movwf	printf@f+1
  7976  16BA  3187  27A5  3196   	fcall	_dev_map_iterator
  7977  16BD  0020               	movlb	0	; select bank0
  7978  16BE  00C4               	movwf	??_print_dev_map
  7979  16BF  01C5               	clrf	??_print_dev_map+1
  7980  16C0  0844               	movf	??_print_dev_map,w
  7981  16C1  00B0               	movwf	?_printf+2
  7982  16C2  0845               	movf	??_print_dev_map+1,w
  7983  16C3  00B1               	movwf	?_printf+3
  7984  16C4  3185  251C         	fcall	_printf
  7985                           
  7986                           ;main.c: 224: } else {
  7987  16C6  0008               	return
  7988  16C7                     l5454:	
  7989                           
  7990                           ;main.c: 225: printf("!:MAP:NO SLAVE FOUND\n");
  7991  16C7  3072               	movlw	low (STR_16| (0+32768))
  7992  16C8  0020               	movlb	0	; select bank0
  7993  16C9  00AE               	movwf	printf@f
  7994  16CA  3090               	movlw	high (STR_16| (0+32768))
  7995  16CB  00AF               	movwf	printf@f+1
  7996  16CC  3185  251C         	fcall	_printf
  7997  16CE  0008               	return
  7998  16CF                     __end_of_print_dev_map:	
  7999                           
  8000                           	psect	text34
  8001  07A5                     __ptext34:	
  8002 ;; *************** function _dev_map_iterator *****************
  8003 ;; Defined at:
  8004 ;;		line 152 in file "main.c"
  8005 ;; Parameters:    Size  Location     Type
  8006 ;;		None
  8007 ;; Auto vars:     Size  Location     Type
  8008 ;;  dev_addr        1    7[BANK0 ] unsigned char 
  8009 ;;  exist           1    6[BANK0 ] unsigned char 
  8010 ;; Return value:  Size  Location     Type
  8011 ;;                  1    wreg      unsigned char 
  8012 ;; Registers used:
  8013 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  8014 ;; Tracked objects:
  8015 ;;		On entry : 0/0
  8016 ;;		On exit  : 0/0
  8017 ;;		Unchanged: 0/0
  8018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8020 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8021 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8022 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8023 ;;Total ram usage:        8 bytes
  8024 ;; Hardware stack levels used:    1
  8025 ;; Hardware stack levels required when called:    3
  8026 ;; This function calls:
  8027 ;;		Nothing
  8028 ;; This function is called by:
  8029 ;;		_print_dev_map
  8030 ;; This function uses a non-reentrant model
  8031 ;;
  8032                           
  8033                           
  8034                           ;psect for function _dev_map_iterator
  8035  07A5                     _dev_map_iterator:	
  8036                           
  8037                           ;main.c: 153: static uint8_t xx = 0;
  8038                           ;main.c: 154: static uint8_t yy = 0;
  8039                           ;main.c: 155: static bool start = 1;
  8040                           ;main.c: 156: bool exist = 0;
  8041                           
  8042                           ;incstack = 0
  8043                           ; Regs used in _dev_map_iterator: [wreg-fsr1h+status,2+status,0+pclath]
  8044  07A5  0020               	movlb	0	; select bank0
  8045  07A6  01A6               	clrf	dev_map_iterator@exist
  8046                           
  8047                           ;main.c: 157: uint8_t dev_addr;
  8048                           ;main.c: 159: if (devs) {
  8049  07A7  0021               	movlb	1	; select bank1
  8050  07A8  0864               	movf	_devs^(0+128),w
  8051  07A9  1903               	btfsc	3,2
  8052  07AA  2FFC               	goto	l5266
  8053  07AB                     l5250:	
  8054                           ;main.c: 160: while(1) {
  8055                           
  8056                           
  8057                           ;main.c: 161: if (xx > 7) {
  8058  07AB  3008               	movlw	8
  8059  07AC  0263               	subwf	dev_map_iterator@xx^(0+128),w
  8060  07AD  1C03               	skipc
  8061  07AE  2FB6               	goto	l5256
  8062                           
  8063                           ;main.c: 162: xx = 0;
  8064  07AF  01E3               	clrf	dev_map_iterator@xx^(0+128)
  8065                           
  8066                           ;main.c: 163: yy++;
  8067  07B0  3001               	movlw	1
  8068  07B1  0020               	movlb	0	; select bank0
  8069  07B2  00A0               	movwf	??_dev_map_iterator
  8070  07B3  0820               	movf	??_dev_map_iterator,w
  8071  07B4  0021               	movlb	1	; select bank1
  8072  07B5  07E2               	addwf	dev_map_iterator@yy^(0+128),f
  8073  07B6                     l5256:	
  8074                           
  8075                           ;main.c: 164: }
  8076                           ;main.c: 165: if (yy >= MAX_Y) {
  8077  07B6  300A               	movlw	low (_MAX_Y| (0+32768))
  8078  07B7  0084               	movwf	4
  8079  07B8  3090               	movlw	high (_MAX_Y| (0+32768))
  8080  07B9  0085               	movwf	5
  8081  07BA  0800               	movf	0,w	;code access
  8082  07BB  0262               	subwf	dev_map_iterator@yy^(0+128),w
  8083  07BC  1C03               	skipc
  8084  07BD  2FC0               	goto	l5260
  8085                           
  8086                           ;main.c: 166: xx = 0;
  8087  07BE  01E3               	clrf	dev_map_iterator@xx^(0+128)
  8088                           
  8089                           ;main.c: 167: yy = 0;
  8090  07BF  01E2               	clrf	dev_map_iterator@yy^(0+128)
  8091  07C0                     l5260:	
  8092                           
  8093                           ;main.c: 168: }
  8094                           ;main.c: 169: if ((0x01 << xx) & dev_map[yy]) {
  8095  07C0  0862               	movf	dev_map_iterator@yy^(0+128),w
  8096  07C1  3E20               	addlw	(low (_dev_map| (0+256)))& (0+255)
  8097  07C2  0086               	movwf	6
  8098  07C3  3001               	movlw	1	; select bank2/3
  8099  07C4  0087               	movwf	7
  8100  07C5  0801               	movf	1,w
  8101  07C6  0020               	movlb	0	; select bank0
  8102  07C7  00A0               	movwf	??_dev_map_iterator
  8103  07C8  01A1               	clrf	??_dev_map_iterator+1
  8104  07C9  3001               	movlw	1
  8105  07CA  00A2               	movwf	??_dev_map_iterator+2
  8106  07CB  3000               	movlw	0
  8107  07CC  00A3               	movwf	??_dev_map_iterator+3
  8108  07CD  0021               	movlb	1	; select bank1
  8109  07CE  0A63               	incf	dev_map_iterator@xx^(0+128),w
  8110  07CF  0020               	movlb	0	; select bank0
  8111  07D0  2FD3               	goto	u5964
  8112  07D1                     u5965:	
  8113  07D1  35A2               	lslf	??_dev_map_iterator+2,f
  8114  07D2  0DA3               	rlf	??_dev_map_iterator+3,f
  8115  07D3                     u5964:	
  8116  07D3  0B89               	decfsz	9,f
  8117  07D4  2FD1               	goto	u5965
  8118  07D5  0820               	movf	??_dev_map_iterator,w
  8119  07D6  0522               	andwf	??_dev_map_iterator+2,w
  8120  07D7  00A4               	movwf	??_dev_map_iterator+4
  8121  07D8  0821               	movf	??_dev_map_iterator+1,w
  8122  07D9  0523               	andwf	??_dev_map_iterator+3,w
  8123  07DA  00A5               	movwf	??_dev_map_iterator+5
  8124  07DB  0824               	movf	??_dev_map_iterator+4,w
  8125  07DC  0425               	iorwf	??_dev_map_iterator+5,w
  8126  07DD  1903               	btfsc	3,2
  8127  07DE  2FF5               	goto	l5264
  8128                           
  8129                           ;main.c: 170: dev_addr = yy * 8 + xx++;
  8130  07DF  0021               	movlb	1	; select bank1
  8131  07E0  0862               	movf	dev_map_iterator@yy^(0+128),w
  8132  07E1  0020               	movlb	0	; select bank0
  8133  07E2  00A0               	movwf	??_dev_map_iterator
  8134  07E3  3002               	movlw	2
  8135  07E4                     u5985:	
  8136  07E4  35A0               	lslf	??_dev_map_iterator,f
  8137  07E5  3EFF               	addlw	-1
  8138  07E6  1D03               	skipz
  8139  07E7  2FE4               	goto	u5985
  8140  07E8  3520               	lslf	??_dev_map_iterator,w
  8141  07E9  0021               	movlb	1	; select bank1
  8142  07EA  0763               	addwf	dev_map_iterator@xx^(0+128),w
  8143  07EB  0020               	movlb	0	; select bank0
  8144  07EC  00A1               	movwf	??_dev_map_iterator+1
  8145  07ED  0821               	movf	??_dev_map_iterator+1,w
  8146  07EE  00A7               	movwf	dev_map_iterator@dev_addr
  8147  07EF  3001               	movlw	1
  8148  07F0  00A0               	movwf	??_dev_map_iterator
  8149  07F1  0820               	movf	??_dev_map_iterator,w
  8150  07F2  0021               	movlb	1	; select bank1
  8151  07F3  07E3               	addwf	dev_map_iterator@xx^(0+128),f
  8152                           
  8153                           ;main.c: 171: break;
  8154  07F4  2FFC               	goto	l5266
  8155  07F5                     l5264:	
  8156                           
  8157                           ;main.c: 172: }
  8158                           ;main.c: 173: xx++;
  8159  07F5  3001               	movlw	1
  8160  07F6  0020               	movlb	0	; select bank0
  8161  07F7  00A0               	movwf	??_dev_map_iterator
  8162  07F8  0820               	movf	??_dev_map_iterator,w
  8163  07F9  0021               	movlb	1	; select bank1
  8164  07FA  07E3               	addwf	dev_map_iterator@xx^(0+128),f
  8165  07FB  2FAB               	goto	l5250
  8166  07FC                     l5266:	
  8167                           
  8168                           ;main.c: 174: }
  8169                           ;main.c: 175: }
  8170                           ;main.c: 176: return dev_addr;
  8171  07FC  0020               	movlb	0	; select bank0
  8172  07FD  0827               	movf	dev_map_iterator@dev_addr,w
  8173  07FE  0008               	return
  8174  07FF                     __end_of_dev_map_iterator:	
  8175                           
  8176                           	psect	text35
  8177  1600                     __ptext35:	
  8178 ;; *************** function _one_shot_sen *****************
  8179 ;; Defined at:
  8180 ;;		line 266 in file "main.c"
  8181 ;; Parameters:    Size  Location     Type
  8182 ;;  dev_addr        1    wreg     unsigned char 
  8183 ;; Auto vars:     Size  Location     Type
  8184 ;;  dev_addr        1   58[BANK0 ] unsigned char 
  8185 ;;  status          1   57[BANK0 ] unsigned char 
  8186 ;; Return value:  Size  Location     Type
  8187 ;;                  1    wreg      void 
  8188 ;; Registers used:
  8189 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8190 ;; Tracked objects:
  8191 ;;		On entry : 0/0
  8192 ;;		On exit  : 0/0
  8193 ;;		Unchanged: 0/0
  8194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8195 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8196 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8197 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8198 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8199 ;;Total ram usage:        5 bytes
  8200 ;; Hardware stack levels used:    1
  8201 ;; Hardware stack levels required when called:    8
  8202 ;; This function calls:
  8203 ;;		_detected
  8204 ;;		_i2c1_write_no_data
  8205 ;;		_printf
  8206 ;;		_sen
  8207 ;; This function is called by:
  8208 ;;		_command_handler
  8209 ;; This function uses a non-reentrant model
  8210 ;;
  8211                           
  8212                           
  8213                           ;psect for function _one_shot_sen
  8214  1600                     _one_shot_sen:	
  8215                           
  8216                           ;incstack = 0
  8217                           ; Regs used in _one_shot_sen: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8218                           ;one_shot_sen@dev_addr stored from wreg
  8219  1600  0020               	movlb	0	; select bank0
  8220  1601  00DA               	movwf	one_shot_sen@dev_addr
  8221                           
  8222                           ;main.c: 267: if (!detected(dev_addr)) {
  8223  1602  085A               	movf	one_shot_sen@dev_addr,w
  8224  1603  3195  2564  3196   	fcall	_detected
  8225  1606  3A00               	xorlw	0
  8226  1607  1D03               	skipz
  8227  1608  2E18               	goto	l5460
  8228                           
  8229                           ;main.c: 268: printf("!:%%%d:UNDETECTED_DEVICE\n", dev_addr);
  8230  1609  303F               	movlw	low (STR_17| (0+32768))
  8231  160A  0020               	movlb	0	; select bank0
  8232  160B  00AE               	movwf	printf@f
  8233  160C  3090               	movlw	high (STR_17| (0+32768))
  8234  160D  00AF               	movwf	printf@f+1
  8235  160E  085A               	movf	one_shot_sen@dev_addr,w
  8236  160F  00D6               	movwf	??_one_shot_sen
  8237  1610  01D7               	clrf	??_one_shot_sen+1
  8238  1611  0856               	movf	??_one_shot_sen,w
  8239  1612  00B0               	movwf	?_printf+2
  8240  1613  0857               	movf	??_one_shot_sen+1,w
  8241  1614  00B1               	movwf	?_printf+3
  8242  1615  3185  251C         	fcall	_printf
  8243                           
  8244                           ;main.c: 269: } else {
  8245  1617  0008               	return
  8246  1618                     l5460:	
  8247                           
  8248                           ;main.c: 270: uint8_t status = sen(dev_addr);
  8249  1618  0020               	movlb	0	; select bank0
  8250  1619  085A               	movf	one_shot_sen@dev_addr,w
  8251  161A  3186  26F1  3196   	fcall	_sen
  8252  161D  0020               	movlb	0	; select bank0
  8253  161E  00D6               	movwf	??_one_shot_sen
  8254  161F  0856               	movf	??_one_shot_sen,w
  8255  1620  00D9               	movwf	one_shot_sen@status
  8256                           
  8257                           ;main.c: 271: if (status > 0) {
  8258  1621  0859               	movf	one_shot_sen@status,w
  8259  1622  1903               	btfsc	3,2
  8260  1623  0008               	return
  8261                           
  8262                           ;main.c: 272: printf("!:%%%d:NETWORK_ERROR\n", dev_addr);
  8263  1624  3088               	movlw	low (STR_18| (0+32768))
  8264  1625  00AE               	movwf	printf@f
  8265  1626  3090               	movlw	high (STR_18| (0+32768))
  8266  1627  00AF               	movwf	printf@f+1
  8267  1628  085A               	movf	one_shot_sen@dev_addr,w
  8268  1629  00D6               	movwf	??_one_shot_sen
  8269  162A  01D7               	clrf	??_one_shot_sen+1
  8270  162B  0856               	movf	??_one_shot_sen,w
  8271  162C  00B0               	movwf	?_printf+2
  8272  162D  0857               	movf	??_one_shot_sen+1,w
  8273  162E  00B1               	movwf	?_printf+3
  8274  162F  3185  251C  3196   	fcall	_printf
  8275                           
  8276                           ;main.c: 273: i2c1_write_no_data(dev_addr, 0x0c);
  8277  1632  0020               	movlb	0	; select bank0
  8278  1633  085A               	movf	one_shot_sen@dev_addr,w
  8279  1634  00D6               	movwf	??_one_shot_sen
  8280  1635  01D7               	clrf	??_one_shot_sen+1
  8281  1636  0856               	movf	??_one_shot_sen,w
  8282  1637  00AE               	movwf	i2c1_write_no_data@dev_addr
  8283  1638  0857               	movf	??_one_shot_sen+1,w
  8284  1639  00AF               	movwf	i2c1_write_no_data@dev_addr+1
  8285  163A  300C               	movlw	12
  8286  163B  00D8               	movwf	??_one_shot_sen+2
  8287  163C  0858               	movf	??_one_shot_sen+2,w
  8288  163D  00B0               	movwf	i2c1_write_no_data@reg_addr
  8289  163E  3194  24B3         	fcall	_i2c1_write_no_data
  8290  1640  0008               	return
  8291  1641                     __end_of_one_shot_sen:	
  8292                           
  8293                           	psect	text36
  8294  06F1                     __ptext36:	
  8295 ;; *************** function _sen *****************
  8296 ;; Defined at:
  8297 ;;		line 233 in file "main.c"
  8298 ;; Parameters:    Size  Location     Type
  8299 ;;  dev_addr        1    wreg     unsigned char 
  8300 ;; Auto vars:     Size  Location     Type
  8301 ;;  dev_addr        1   53[BANK0 ] unsigned char 
  8302 ;;  status          1   52[BANK0 ] unsigned char 
  8303 ;;  length          1   51[BANK0 ] unsigned char 
  8304 ;;  type            1   50[BANK0 ] unsigned char 
  8305 ;;  i               1    0        unsigned char 
  8306 ;;  data            1    0        unsigned char 
  8307 ;; Return value:  Size  Location     Type
  8308 ;;                  1    wreg      unsigned char 
  8309 ;; Registers used:
  8310 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8311 ;; Tracked objects:
  8312 ;;		On entry : 0/0
  8313 ;;		On exit  : 0/0
  8314 ;;		Unchanged: 0/0
  8315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8317 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8318 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8319 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8320 ;;Total ram usage:        9 bytes
  8321 ;; Hardware stack levels used:    1
  8322 ;; Hardware stack levels required when called:    7
  8323 ;; This function calls:
  8324 ;;		_PROTOCOL_Print_TLV
  8325 ;;		_i2c1_read
  8326 ;;		_i2c1_write_no_data
  8327 ;; This function is called by:
  8328 ;;		_one_shot_sen
  8329 ;;		_fetch
  8330 ;; This function uses a non-reentrant model
  8331 ;;
  8332                           
  8333                           
  8334                           ;psect for function _sen
  8335  06F1                     _sen:	
  8336                           
  8337                           ;incstack = 0
  8338                           ; Regs used in _sen: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8339                           ;sen@dev_addr stored from wreg
  8340  06F1  0020               	movlb	0	; select bank0
  8341  06F2  00D5               	movwf	sen@dev_addr
  8342                           
  8343                           ;main.c: 234: uint8_t status;
  8344                           ;main.c: 235: uint8_t type;
  8345                           ;main.c: 236: uint8_t length ,data, i;
  8346                           ;main.c: 237: LATCbits.LATC7 ^= 1;
  8347  06F3  0022               	movlb	2	; select bank2
  8348  06F4  0D0E               	rlf	14,w	;volatile
  8349  06F5  0D0E               	rlf	14,w	;volatile
  8350  06F6  3901               	andlw	1
  8351  06F7  0020               	movlb	0	; select bank0
  8352  06F8  00CD               	movwf	??_sen
  8353  06F9  3001               	movlw	1
  8354  06FA  06CD               	xorwf	??_sen,f
  8355  06FB  0CCD               	rrf	??_sen,f
  8356  06FC  0CCD               	rrf	??_sen,f
  8357  06FD  0022               	movlb	2	; select bank2
  8358  06FE  080E               	movf	14,w	;volatile
  8359  06FF  0020               	movlb	0	; select bank0
  8360  0700  064D               	xorwf	??_sen,w
  8361  0701  397F               	andlw	-129
  8362  0702  064D               	xorwf	??_sen,w
  8363  0703  0022               	movlb	2	; select bank2
  8364  0704  008E               	movwf	14	;volatile
  8365                           
  8366                           ;main.c: 239: _delay((unsigned long)((200)*(32000000/4000000.0)));
  8367  0705  30E4               	movlw	228
  8368  0706                     u7417:	
  8369  0706  3200               	nop2
  8370  0707  3200               	nop2
  8371  0708  0B89               	decfsz	9,f
  8372  0709  2F06               	goto	u7417
  8373  070A  3200               	nop2
  8374  070B  3200               	nop2
  8375                           
  8376                           ;main.c: 240: i2c1_write_no_data(dev_addr, 0x06);
  8377  070C  0020               	movlb	0	; select bank0
  8378  070D  0855               	movf	sen@dev_addr,w
  8379  070E  00CD               	movwf	??_sen
  8380  070F  01CE               	clrf	??_sen+1
  8381  0710  084D               	movf	??_sen,w
  8382  0711  00AE               	movwf	i2c1_write_no_data@dev_addr
  8383  0712  084E               	movf	??_sen+1,w
  8384  0713  00AF               	movwf	i2c1_write_no_data@dev_addr+1
  8385  0714  3006               	movlw	6
  8386  0715  00CF               	movwf	??_sen+2
  8387  0716  084F               	movf	??_sen+2,w
  8388  0717  00B0               	movwf	i2c1_write_no_data@reg_addr
  8389  0718  3194  24B3  3186   	fcall	_i2c1_write_no_data
  8390                           
  8391                           ;main.c: 242: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  8392  071B  300B               	movlw	11
  8393  071C  0020               	movlb	0	; select bank0
  8394  071D  00CD               	movwf	??_sen
  8395  071E  3062               	movlw	98
  8396  071F                     u7427:	
  8397  071F  0B89               	decfsz	9,f
  8398  0720  2F1F               	goto	u7427
  8399  0721  0BCD               	decfsz	??_sen,f
  8400  0722  2F1F               	goto	u7427
  8401  0723  0000               	nop
  8402                           
  8403                           ;main.c: 243: status = i2c1_read(dev_addr, 0x07, &type, 1);
  8404  0724  0020               	movlb	0	; select bank0
  8405  0725  0855               	movf	sen@dev_addr,w
  8406  0726  00CD               	movwf	??_sen
  8407  0727  01CE               	clrf	??_sen+1
  8408  0728  084D               	movf	??_sen,w
  8409  0729  00B0               	movwf	i2c1_read@dev_addr
  8410  072A  084E               	movf	??_sen+1,w
  8411  072B  00B1               	movwf	i2c1_read@dev_addr+1
  8412  072C  3007               	movlw	7
  8413  072D  00CF               	movwf	??_sen+2
  8414  072E  084F               	movf	??_sen+2,w
  8415  072F  00B2               	movwf	i2c1_read@reg_addr
  8416  0730  3052               	movlw	low sen@type
  8417  0731  00B3               	movwf	i2c1_read@pbuf
  8418  0732  3000               	movlw	high sen@type
  8419  0733  00B4               	movwf	i2c1_read@pbuf+1
  8420  0734  01B5               	clrf	i2c1_read@len
  8421  0735  0AB5               	incf	i2c1_read@len,f
  8422  0736  3189  2137  3186   	fcall	_i2c1_read
  8423  0739  0020               	movlb	0	; select bank0
  8424  073A  00D0               	movwf	??_sen+3
  8425  073B  0850               	movf	??_sen+3,w
  8426  073C  00D4               	movwf	sen@status
  8427                           
  8428                           ;main.c: 244: _delay((unsigned long)((100)*(32000000/4000000.0)));
  8429  073D  30A0               	movlw	160
  8430  073E                     u7437:	
  8431  073E  3200               	nop2
  8432  073F  0B89               	decfsz	9,f
  8433  0740  2F3E               	goto	u7437
  8434                           
  8435                           ;main.c: 245: if (status == 0) {
  8436  0741  0020               	movlb	0	; select bank0
  8437  0742  0854               	movf	sen@status,w
  8438  0743  1D03               	btfss	3,2
  8439  0744  2FA2               	goto	l5316
  8440                           
  8441                           ;main.c: 246: if (type == 0x06) {
  8442  0745  3006               	movlw	6
  8443  0746  0652               	xorwf	sen@type,w
  8444  0747  1D03               	btfss	3,2
  8445  0748  2F50               	goto	l5302
  8446                           
  8447                           ;main.c: 247: PROTOCOL_Print_TLV(dev_addr, 0x06, 0, (0));
  8448  0749  3006               	movlw	6
  8449  074A  00CD               	movwf	??_sen
  8450  074B  084D               	movf	??_sen,w
  8451  074C  00C4               	movwf	PROTOCOL_Print_TLV@type
  8452  074D  01C5               	clrf	PROTOCOL_Print_TLV@length
  8453  074E  01C6               	clrf	PROTOCOL_Print_TLV@pbuffer
  8454  074F  2F9F               	goto	L11
  8455  0750                     l5302:	
  8456                           ;main.c: 248: } else {
  8457                           
  8458                           
  8459                           ;main.c: 249: status = i2c1_read(dev_addr, 0x07, &length, 1);
  8460  0750  0020               	movlb	0	; select bank0
  8461  0751  0855               	movf	sen@dev_addr,w
  8462  0752  00CD               	movwf	??_sen
  8463  0753  01CE               	clrf	??_sen+1
  8464  0754  084D               	movf	??_sen,w
  8465  0755  00B0               	movwf	i2c1_read@dev_addr
  8466  0756  084E               	movf	??_sen+1,w
  8467  0757  00B1               	movwf	i2c1_read@dev_addr+1
  8468  0758  3007               	movlw	7
  8469  0759  00CF               	movwf	??_sen+2
  8470  075A  084F               	movf	??_sen+2,w
  8471  075B  00B2               	movwf	i2c1_read@reg_addr
  8472  075C  3053               	movlw	low sen@length
  8473  075D  00B3               	movwf	i2c1_read@pbuf
  8474  075E  3000               	movlw	high sen@length
  8475  075F  00B4               	movwf	i2c1_read@pbuf+1
  8476  0760  01B5               	clrf	i2c1_read@len
  8477  0761  0AB5               	incf	i2c1_read@len,f
  8478  0762  3189  2137  3186   	fcall	_i2c1_read
  8479  0765  0020               	movlb	0	; select bank0
  8480  0766  00D0               	movwf	??_sen+3
  8481  0767  0850               	movf	??_sen+3,w
  8482  0768  00D4               	movwf	sen@status
  8483                           
  8484                           ;main.c: 250: _delay((unsigned long)((100)*(32000000/4000000.0)));
  8485  0769  30A0               	movlw	160
  8486  076A                     u7447:	
  8487  076A  3200               	nop2
  8488  076B  0B89               	decfsz	9,f
  8489  076C  2F6A               	goto	u7447
  8490                           
  8491                           ;main.c: 251: if (status == 0) {
  8492  076D  0020               	movlb	0	; select bank0
  8493  076E  0854               	movf	sen@status,w
  8494  076F  1D03               	btfss	3,2
  8495  0770  2FA2               	goto	l5316
  8496                           
  8497                           ;main.c: 252: status = i2c1_read(dev_addr, 0x07, read_buf, length);
  8498  0771  0855               	movf	sen@dev_addr,w
  8499  0772  00CD               	movwf	??_sen
  8500  0773  01CE               	clrf	??_sen+1
  8501  0774  084D               	movf	??_sen,w
  8502  0775  00B0               	movwf	i2c1_read@dev_addr
  8503  0776  084E               	movf	??_sen+1,w
  8504  0777  00B1               	movwf	i2c1_read@dev_addr+1
  8505  0778  3007               	movlw	7
  8506  0779  00CF               	movwf	??_sen+2
  8507  077A  084F               	movf	??_sen+2,w
  8508  077B  00B2               	movwf	i2c1_read@reg_addr
  8509  077C  30BC               	movlw	low _read_buf
  8510  077D  00B3               	movwf	i2c1_read@pbuf
  8511  077E  3001               	movlw	high _read_buf
  8512  077F  00B4               	movwf	i2c1_read@pbuf+1
  8513  0780  0853               	movf	sen@length,w
  8514  0781  00D0               	movwf	??_sen+3
  8515  0782  0850               	movf	??_sen+3,w
  8516  0783  00B5               	movwf	i2c1_read@len
  8517  0784  3189  2137  3186   	fcall	_i2c1_read
  8518  0787  0020               	movlb	0	; select bank0
  8519  0788  00D1               	movwf	??_sen+4
  8520  0789  0851               	movf	??_sen+4,w
  8521  078A  00D4               	movwf	sen@status
  8522                           
  8523                           ;main.c: 253: _delay((unsigned long)((100)*(32000000/4000000.0)));
  8524  078B  30A0               	movlw	160
  8525  078C                     u7457:	
  8526  078C  3200               	nop2
  8527  078D  0B89               	decfsz	9,f
  8528  078E  2F8C               	goto	u7457
  8529                           
  8530                           ;main.c: 254: if (status == 0) {
  8531  078F  0020               	movlb	0	; select bank0
  8532  0790  0854               	movf	sen@status,w
  8533  0791  1D03               	btfss	3,2
  8534  0792  2FA2               	goto	l5316
  8535                           
  8536                           ;main.c: 255: PROTOCOL_Print_TLV(dev_addr, type, length, read_buf);
  8537  0793  0852               	movf	sen@type,w
  8538  0794  00CD               	movwf	??_sen
  8539  0795  084D               	movf	??_sen,w
  8540  0796  00C4               	movwf	PROTOCOL_Print_TLV@type
  8541  0797  0853               	movf	sen@length,w
  8542  0798  00CE               	movwf	??_sen+1
  8543  0799  084E               	movf	??_sen+1,w
  8544  079A  00C5               	movwf	PROTOCOL_Print_TLV@length
  8545  079B  30BC               	movlw	(low (_read_buf| (0+256)))& (0+255)
  8546  079C  00CF               	movwf	??_sen+2
  8547  079D  084F               	movf	??_sen+2,w
  8548  079E  00C6               	movwf	PROTOCOL_Print_TLV@pbuffer
  8549  079F                     L11:	
  8550  079F  0855               	movf	sen@dev_addr,w
  8551  07A0  3180  20B0         	fcall	_PROTOCOL_Print_TLV
  8552  07A2                     l5316:	
  8553                           
  8554                           ;main.c: 256: }
  8555                           ;main.c: 257: }
  8556                           ;main.c: 258: }
  8557                           ;main.c: 259: }
  8558                           ;main.c: 260: return status;
  8559  07A2  0020               	movlb	0	; select bank0
  8560  07A3  0854               	movf	sen@status,w
  8561  07A4  0008               	return
  8562  07A5                     __end_of_sen:	
  8563                           
  8564                           	psect	text37
  8565  14B3                     __ptext37:	
  8566 ;; *************** function _i2c1_write_no_data *****************
  8567 ;; Defined at:
  8568 ;;		line 49 in file "i2c1_util.c"
  8569 ;; Parameters:    Size  Location     Type
  8570 ;;  dev_addr        2   14[BANK0 ] unsigned int 
  8571 ;;  reg_addr        1   16[BANK0 ] unsigned char 
  8572 ;; Auto vars:     Size  Location     Type
  8573 ;;  status          1   20[BANK0 ] enum E3078
  8574 ;;  buf             1   19[BANK0 ] unsigned char [1]
  8575 ;;  write_status    1   18[BANK0 ] unsigned char 
  8576 ;; Return value:  Size  Location     Type
  8577 ;;                  1    wreg      unsigned char 
  8578 ;; Registers used:
  8579 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8580 ;; Tracked objects:
  8581 ;;		On entry : 0/0
  8582 ;;		On exit  : 0/0
  8583 ;;		Unchanged: 0/0
  8584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8585 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8586 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8587 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8588 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8589 ;;Total ram usage:        7 bytes
  8590 ;; Hardware stack levels used:    1
  8591 ;; Hardware stack levels required when called:    5
  8592 ;; This function calls:
  8593 ;;		_I2C1_MasterWrite
  8594 ;; This function is called by:
  8595 ;;		_exec_remote_cmd
  8596 ;;		_check_plg
  8597 ;;		_sen
  8598 ;;		_one_shot_sen
  8599 ;;		_fetch
  8600 ;; This function uses a non-reentrant model
  8601 ;;
  8602                           
  8603                           
  8604                           ;psect for function _i2c1_write_no_data
  8605  14B3                     _i2c1_write_no_data:	
  8606                           
  8607                           ;i2c1_util.c: 51: uint8_t buf[1];
  8608                           ;i2c1_util.c: 52: I2C1_MESSAGE_STATUS status;
  8609                           ;i2c1_util.c: 53: uint8_t write_status;
  8610                           ;i2c1_util.c: 54: buf[0] = reg_addr;
  8611                           
  8612                           ;incstack = 0
  8613                           ; Regs used in _i2c1_write_no_data: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8614  14B3  0020               	movlb	0	; select bank0
  8615  14B4  0830               	movf	i2c1_write_no_data@reg_addr,w
  8616  14B5  00B1               	movwf	??_i2c1_write_no_data
  8617  14B6  0831               	movf	??_i2c1_write_no_data,w
  8618  14B7  00B3               	movwf	i2c1_write_no_data@buf
  8619                           
  8620                           ;i2c1_util.c: 55: _delay((unsigned long)((100)*(32000000/4000000.0)));
  8621  14B8  30A0               	movlw	160
  8622  14B9                     u7467:	
  8623  14B9  3200               	nop2
  8624  14BA  0B89               	decfsz	9,f
  8625  14BB  2CB9               	goto	u7467
  8626                           
  8627                           ;i2c1_util.c: 56: I2C1_MasterWrite(buf, 1, dev_addr, &status);
  8628  14BC  0020               	movlb	0	; select bank0
  8629  14BD  01A7               	clrf	I2C1_MasterWrite@length
  8630  14BE  0AA7               	incf	I2C1_MasterWrite@length,f
  8631  14BF  082F               	movf	i2c1_write_no_data@dev_addr+1,w
  8632  14C0  00A9               	movwf	I2C1_MasterWrite@address+1
  8633  14C1  082E               	movf	i2c1_write_no_data@dev_addr,w
  8634  14C2  00A8               	movwf	I2C1_MasterWrite@address
  8635  14C3  3034               	movlw	(low (i2c1_write_no_data@status| 0))& (0+255)
  8636  14C4  00B1               	movwf	??_i2c1_write_no_data
  8637  14C5  0831               	movf	??_i2c1_write_no_data,w
  8638  14C6  00AA               	movwf	I2C1_MasterWrite@pflag
  8639  14C7  3033               	movlw	(low (i2c1_write_no_data@buf| 0))& (0+255)
  8640  14C8  3194  2489  3194   	fcall	_I2C1_MasterWrite
  8641  14CB                     l5102:	
  8642                           ;i2c1_util.c: 57: while (status == I2C1_MESSAGE_PENDING) {_delay((unsigned long)((100)*(
      +                          32000000/4000000.0)));};
  8643                           
  8644  14CB  3002               	movlw	2
  8645  14CC  0020               	movlb	0	; select bank0
  8646  14CD  0634               	xorwf	i2c1_write_no_data@status,w
  8647  14CE  1D03               	btfss	3,2
  8648  14CF  2CD5               	goto	l5104
  8649  14D0  30A0               	movlw	160
  8650  14D1                     u7477:	
  8651  14D1  3200               	nop2
  8652  14D2  0B89               	decfsz	9,f
  8653  14D3  2CD1               	goto	u7477
  8654  14D4  2CCB               	goto	l5102
  8655  14D5                     l5104:	
  8656                           
  8657                           ;i2c1_util.c: 58: if (status == I2C1_MESSAGE_COMPLETE) {
  8658  14D5  0834               	movf	i2c1_write_no_data@status,w
  8659  14D6  1D03               	btfss	3,2
  8660  14D7  2CDA               	goto	l641
  8661                           
  8662                           ;i2c1_util.c: 59: write_status = 0;
  8663  14D8  01B2               	clrf	i2c1_write_no_data@write_status
  8664                           
  8665                           ;i2c1_util.c: 60: } else {
  8666  14D9  2CDC               	goto	l5108
  8667  14DA                     l641:	
  8668                           
  8669                           ;i2c1_util.c: 61: write_status = 1;
  8670  14DA  01B2               	clrf	i2c1_write_no_data@write_status
  8671  14DB  0AB2               	incf	i2c1_write_no_data@write_status,f
  8672  14DC                     l5108:	
  8673                           
  8674                           ;i2c1_util.c: 62: }
  8675                           ;i2c1_util.c: 63: return write_status;
  8676  14DC  0832               	movf	i2c1_write_no_data@write_status,w
  8677  14DD  0008               	return
  8678  14DE                     __end_of_i2c1_write_no_data:	
  8679                           
  8680                           	psect	text38
  8681  0937                     __ptext38:	
  8682 ;; *************** function _i2c1_read *****************
  8683 ;; Defined at:
  8684 ;;		line 24 in file "i2c1_util.c"
  8685 ;; Parameters:    Size  Location     Type
  8686 ;;  dev_addr        2   16[BANK0 ] unsigned int 
  8687 ;;  reg_addr        1   18[BANK0 ] unsigned char 
  8688 ;;  pbuf            2   19[BANK0 ] PTR unsigned char 
  8689 ;;		 -> sen@length(1), sen@type(1), read_buf(16), exec_remote_cmd@data(1), 
  8690 ;;  len             1   21[BANK0 ] unsigned char 
  8691 ;; Auto vars:     Size  Location     Type
  8692 ;;  status          1   26[BANK0 ] enum E3078
  8693 ;;  reg             1   25[BANK0 ] unsigned char [1]
  8694 ;;  read_status     1   24[BANK0 ] unsigned char 
  8695 ;; Return value:  Size  Location     Type
  8696 ;;                  1    wreg      unsigned char 
  8697 ;; Registers used:
  8698 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8699 ;; Tracked objects:
  8700 ;;		On entry : 0/0
  8701 ;;		On exit  : 0/0
  8702 ;;		Unchanged: 0/0
  8703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8704 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8705 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8706 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8707 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8708 ;;Total ram usage:       11 bytes
  8709 ;; Hardware stack levels used:    1
  8710 ;; Hardware stack levels required when called:    5
  8711 ;; This function calls:
  8712 ;;		_I2C1_MasterRead
  8713 ;;		_I2C1_MasterWrite
  8714 ;; This function is called by:
  8715 ;;		_exec_remote_cmd
  8716 ;;		_scan_dev
  8717 ;;		_sen
  8718 ;; This function uses a non-reentrant model
  8719 ;;
  8720                           
  8721                           
  8722                           ;psect for function _i2c1_read
  8723  0937                     _i2c1_read:	
  8724                           
  8725                           ;i2c1_util.c: 26: uint8_t reg[1];
  8726                           ;i2c1_util.c: 27: I2C1_MESSAGE_STATUS status;
  8727                           ;i2c1_util.c: 28: uint8_t read_status;
  8728                           ;i2c1_util.c: 29: reg[0] = reg_addr;
  8729                           
  8730                           ;incstack = 0
  8731                           ; Regs used in _i2c1_read: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8732  0937  0020               	movlb	0	; select bank0
  8733  0938  0832               	movf	i2c1_read@reg_addr,w
  8734  0939  00B6               	movwf	??_i2c1_read
  8735  093A  0836               	movf	??_i2c1_read,w
  8736  093B  00B9               	movwf	i2c1_read@reg
  8737                           
  8738                           ;i2c1_util.c: 30: _delay((unsigned long)((100)*(32000000/4000000.0)));
  8739  093C  30A0               	movlw	160
  8740  093D                     u7487:	
  8741  093D  3200               	nop2
  8742  093E  0B89               	decfsz	9,f
  8743  093F  293D               	goto	u7487
  8744                           
  8745                           ;i2c1_util.c: 31: I2C1_MasterWrite(reg, 1, dev_addr, &status);
  8746  0940  0020               	movlb	0	; select bank0
  8747  0941  01A7               	clrf	I2C1_MasterWrite@length
  8748  0942  0AA7               	incf	I2C1_MasterWrite@length,f
  8749  0943  0831               	movf	i2c1_read@dev_addr+1,w
  8750  0944  00A9               	movwf	I2C1_MasterWrite@address+1
  8751  0945  0830               	movf	i2c1_read@dev_addr,w
  8752  0946  00A8               	movwf	I2C1_MasterWrite@address
  8753  0947  303A               	movlw	(low (i2c1_read@status| 0))& (0+255)
  8754  0948  00B6               	movwf	??_i2c1_read
  8755  0949  0836               	movf	??_i2c1_read,w
  8756  094A  00AA               	movwf	I2C1_MasterWrite@pflag
  8757  094B  3039               	movlw	(low (i2c1_read@reg| 0))& (0+255)
  8758  094C  3194  2489  3189   	fcall	_I2C1_MasterWrite
  8759  094F                     l5074:	
  8760                           ;i2c1_util.c: 32: while (status == I2C1_MESSAGE_PENDING) {_delay((unsigned long)((100)*(
      +                          32000000/4000000.0)));};
  8761                           
  8762  094F  3002               	movlw	2
  8763  0950  0020               	movlb	0	; select bank0
  8764  0951  063A               	xorwf	i2c1_read@status,w
  8765  0952  1D03               	btfss	3,2
  8766  0953  2959               	goto	l5076
  8767  0954  30A0               	movlw	160
  8768  0955                     u7497:	
  8769  0955  3200               	nop2
  8770  0956  0B89               	decfsz	9,f
  8771  0957  2955               	goto	u7497
  8772  0958  294F               	goto	l5074
  8773  0959                     l5076:	
  8774                           
  8775                           ;i2c1_util.c: 33: if (status == I2C1_MESSAGE_COMPLETE) {
  8776  0959  083A               	movf	i2c1_read@status,w
  8777  095A  1D03               	btfss	3,2
  8778  095B  2988               	goto	l628
  8779                           
  8780                           ;i2c1_util.c: 34: _delay((unsigned long)((100)*(32000000/4000000.0)));
  8781  095C  30A0               	movlw	160
  8782  095D                     u7507:	
  8783  095D  3200               	nop2
  8784  095E  0B89               	decfsz	9,f
  8785  095F  295D               	goto	u7507
  8786                           
  8787                           ;i2c1_util.c: 35: I2C1_MasterRead(pbuf, len, dev_addr, &status);
  8788  0960  0020               	movlb	0	; select bank0
  8789  0961  0834               	movf	i2c1_read@pbuf+1,w
  8790  0962  00A9               	movwf	I2C1_MasterRead@pdata+1
  8791  0963  0833               	movf	i2c1_read@pbuf,w
  8792  0964  00A8               	movwf	I2C1_MasterRead@pdata
  8793  0965  0835               	movf	i2c1_read@len,w
  8794  0966  00B6               	movwf	??_i2c1_read
  8795  0967  0836               	movf	??_i2c1_read,w
  8796  0968  00AA               	movwf	I2C1_MasterRead@length
  8797  0969  0831               	movf	i2c1_read@dev_addr+1,w
  8798  096A  00AC               	movwf	I2C1_MasterRead@address+1
  8799  096B  0830               	movf	i2c1_read@dev_addr,w
  8800  096C  00AB               	movwf	I2C1_MasterRead@address
  8801  096D  303A               	movlw	(low (i2c1_read@status| 0))& (0+255)
  8802  096E  00B7               	movwf	??_i2c1_read+1
  8803  096F  0837               	movf	??_i2c1_read+1,w
  8804  0970  00AD               	movwf	I2C1_MasterRead@pflag
  8805  0971  3194  2439  3189   	fcall	_I2C1_MasterRead
  8806  0974                     l5084:	
  8807                           ;i2c1_util.c: 36: while (status == I2C1_MESSAGE_PENDING) {_delay((unsigned long)((100)*(
      +                          32000000/4000000.0)));};
  8808                           
  8809  0974  3002               	movlw	2
  8810  0975  0020               	movlb	0	; select bank0
  8811  0976  063A               	xorwf	i2c1_read@status,w
  8812  0977  1D03               	btfss	3,2
  8813  0978  297E               	goto	l5086
  8814  0979  30A0               	movlw	160
  8815  097A                     u7517:	
  8816  097A  3200               	nop2
  8817  097B  0B89               	decfsz	9,f
  8818  097C  297A               	goto	u7517
  8819  097D  2974               	goto	l5084
  8820  097E                     l5086:	
  8821                           
  8822                           ;i2c1_util.c: 37: if (status == I2C1_MESSAGE_COMPLETE) {
  8823  097E  083A               	movf	i2c1_read@status,w
  8824  097F  1D03               	btfss	3,2
  8825  0980  2983               	goto	l5090
  8826                           
  8827                           ;i2c1_util.c: 38: read_status = 0;
  8828  0981  01B8               	clrf	i2c1_read@read_status
  8829                           
  8830                           ;i2c1_util.c: 39: } else {
  8831  0982  298A               	goto	l5092
  8832  0983                     l5090:	
  8833                           
  8834                           ;i2c1_util.c: 40: read_status = 2;
  8835  0983  3002               	movlw	2
  8836  0984  00B6               	movwf	??_i2c1_read
  8837  0985  0836               	movf	??_i2c1_read,w
  8838  0986  00B8               	movwf	i2c1_read@read_status
  8839                           
  8840                           ;i2c1_util.c: 41: }
  8841                           ;i2c1_util.c: 42: } else {
  8842  0987  298A               	goto	l5092
  8843  0988                     l628:	
  8844                           
  8845                           ;i2c1_util.c: 43: read_status = 1;
  8846  0988  01B8               	clrf	i2c1_read@read_status
  8847  0989  0AB8               	incf	i2c1_read@read_status,f
  8848  098A                     l5092:	
  8849                           
  8850                           ;i2c1_util.c: 44: }
  8851                           ;i2c1_util.c: 45: return read_status;
  8852  098A  0838               	movf	i2c1_read@read_status,w
  8853  098B  0008               	return
  8854  098C                     __end_of_i2c1_read:	
  8855                           
  8856                           	psect	text39
  8857  1489                     __ptext39:	
  8858 ;; *************** function _I2C1_MasterWrite *****************
  8859 ;; Defined at:
  8860 ;;		line 598 in file "mcc_generated_files/i2c1.c"
  8861 ;; Parameters:    Size  Location     Type
  8862 ;;  pdata           1    wreg     PTR unsigned char 
  8863 ;;		 -> i2c1_write_no_data@buf(1), i2c1_read@reg(1), exec_remote_cmd@send_buf(50), 
  8864 ;;  length          1    7[BANK0 ] unsigned char 
  8865 ;;  address         2    8[BANK0 ] unsigned int 
  8866 ;;  pflag           1   10[BANK0 ] PTR enum E2972
  8867 ;;		 -> i2c1_write_no_data@status(1), i2c1_read@status(1), i2c1_write@status(1), 
  8868 ;; Auto vars:     Size  Location     Type
  8869 ;;  pdata           1   13[BANK0 ] PTR unsigned char 
  8870 ;;		 -> i2c1_write_no_data@buf(1), i2c1_read@reg(1), exec_remote_cmd@send_buf(50), 
  8871 ;; Return value:  Size  Location     Type
  8872 ;;                  1    wreg      void 
  8873 ;; Registers used:
  8874 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8875 ;; Tracked objects:
  8876 ;;		On entry : 0/0
  8877 ;;		On exit  : 0/0
  8878 ;;		Unchanged: 0/0
  8879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8880 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8881 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8882 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8883 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8884 ;;Total ram usage:        7 bytes
  8885 ;; Hardware stack levels used:    1
  8886 ;; Hardware stack levels required when called:    4
  8887 ;; This function calls:
  8888 ;;		_I2C1_MasterTRBInsert
  8889 ;;		_I2C1_MasterWriteTRBBuild
  8890 ;; This function is called by:
  8891 ;;		_i2c1_write
  8892 ;;		_i2c1_read
  8893 ;;		_i2c1_write_no_data
  8894 ;; This function uses a non-reentrant model
  8895 ;;
  8896                           
  8897                           
  8898                           ;psect for function _I2C1_MasterWrite
  8899  1489                     _I2C1_MasterWrite:	
  8900                           
  8901                           ;incstack = 0
  8902                           ; Regs used in _I2C1_MasterWrite: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8903                           ;I2C1_MasterWrite@pdata stored from wreg
  8904  1489  0020               	movlb	0	; select bank0
  8905  148A  00AD               	movwf	I2C1_MasterWrite@pdata
  8906                           
  8907                           ;i2c1.c: 604: static I2C1_TRANSACTION_REQUEST_BLOCK trBlock;
  8908                           ;i2c1.c: 607: if (i2c1_object.trStatus.s.full != 1)
  8909  148B  0021               	movlb	1	; select bank1
  8910  148C  185B               	btfsc	(_i2c1_object^(0+128)+2),0
  8911  148D  2CAC               	goto	l4836
  8912                           
  8913                           ;i2c1.c: 608: {
  8914                           ;i2c1.c: 609: I2C1_MasterWriteTRBBuild(&trBlock, pdata, length, address);
  8915  148E  0020               	movlb	0	; select bank0
  8916  148F  082D               	movf	I2C1_MasterWrite@pdata,w
  8917  1490  00AB               	movwf	??_I2C1_MasterWrite
  8918  1491  082B               	movf	??_I2C1_MasterWrite,w
  8919  1492  00A0               	movwf	I2C1_MasterWriteTRBBuild@pdata
  8920  1493  0827               	movf	I2C1_MasterWrite@length,w
  8921  1494  00AC               	movwf	??_I2C1_MasterWrite+1
  8922  1495  082C               	movf	??_I2C1_MasterWrite+1,w
  8923  1496  00A1               	movwf	I2C1_MasterWriteTRBBuild@length
  8924  1497  0829               	movf	I2C1_MasterWrite@address+1,w
  8925  1498  00A3               	movwf	I2C1_MasterWriteTRBBuild@address+1
  8926  1499  0828               	movf	I2C1_MasterWrite@address,w
  8927  149A  00A2               	movwf	I2C1_MasterWriteTRBBuild@address
  8928  149B  3051               	movlw	(low (I2C1_MasterWrite@trBlock| (0+256)))& (0+255)
  8929  149C  3193  23F1  3194   	fcall	_I2C1_MasterWriteTRBBuild
  8930                           
  8931                           ;i2c1.c: 610: I2C1_MasterTRBInsert(1, &trBlock, pflag);
  8932  149F  3051               	movlw	(low (I2C1_MasterWrite@trBlock| (0+256)))& (0+255)
  8933  14A0  0020               	movlb	0	; select bank0
  8934  14A1  00AB               	movwf	??_I2C1_MasterWrite
  8935  14A2  082B               	movf	??_I2C1_MasterWrite,w
  8936  14A3  00A0               	movwf	I2C1_MasterTRBInsert@ptrb_list
  8937  14A4  082A               	movf	I2C1_MasterWrite@pflag,w
  8938  14A5  00AC               	movwf	??_I2C1_MasterWrite+1
  8939  14A6  082C               	movf	??_I2C1_MasterWrite+1,w
  8940  14A7  00A1               	movwf	I2C1_MasterTRBInsert@pflag
  8941  14A8  3001               	movlw	1
  8942  14A9  3189  218C         	fcall	_I2C1_MasterTRBInsert
  8943                           
  8944                           ;i2c1.c: 611: }
  8945  14AB  0008               	return
  8946  14AC                     l4836:	
  8947                           
  8948                           ;i2c1.c: 612: else
  8949                           ;i2c1.c: 613: {
  8950                           ;i2c1.c: 614: *pflag = I2C1_MESSAGE_FAIL;
  8951  14AC  0020               	movlb	0	; select bank0
  8952  14AD  082A               	movf	I2C1_MasterWrite@pflag,w
  8953  14AE  0086               	movwf	6
  8954  14AF  0187               	clrf	7
  8955  14B0  0181               	clrf	1
  8956  14B1  0A81               	incf	1,f
  8957  14B2  0008               	return
  8958  14B3                     __end_of_I2C1_MasterWrite:	
  8959                           
  8960                           	psect	text40
  8961  13F1                     __ptext40:	
  8962 ;; *************** function _I2C1_MasterWriteTRBBuild *****************
  8963 ;; Defined at:
  8964 ;;		line 707 in file "mcc_generated_files/i2c1.c"
  8965 ;; Parameters:    Size  Location     Type
  8966 ;;  ptrb            1    wreg     PTR struct .
  8967 ;;		 -> I2C1_MasterWrite@trBlock(5), 
  8968 ;;  pdata           1    0[BANK0 ] PTR unsigned char 
  8969 ;;		 -> i2c1_write_no_data@buf(1), i2c1_read@reg(1), exec_remote_cmd@send_buf(50), 
  8970 ;;  length          1    1[BANK0 ] unsigned char 
  8971 ;;  address         2    2[BANK0 ] unsigned int 
  8972 ;; Auto vars:     Size  Location     Type
  8973 ;;  ptrb            1    6[BANK0 ] PTR struct .
  8974 ;;		 -> I2C1_MasterWrite@trBlock(5), 
  8975 ;; Return value:  Size  Location     Type
  8976 ;;                  1    wreg      void 
  8977 ;; Registers used:
  8978 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8979 ;; Tracked objects:
  8980 ;;		On entry : 0/0
  8981 ;;		On exit  : 0/0
  8982 ;;		Unchanged: 0/0
  8983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8984 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8985 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8986 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8987 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8988 ;;Total ram usage:        7 bytes
  8989 ;; Hardware stack levels used:    1
  8990 ;; Hardware stack levels required when called:    3
  8991 ;; This function calls:
  8992 ;;		Nothing
  8993 ;; This function is called by:
  8994 ;;		_I2C1_MasterWrite
  8995 ;; This function uses a non-reentrant model
  8996 ;;
  8997                           
  8998                           
  8999                           ;psect for function _I2C1_MasterWriteTRBBuild
  9000  13F1                     _I2C1_MasterWriteTRBBuild:	
  9001                           
  9002                           ;incstack = 0
  9003                           ; Regs used in _I2C1_MasterWriteTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
  9004                           ;I2C1_MasterWriteTRBBuild@ptrb stored from wreg
  9005  13F1  0020               	movlb	0	; select bank0
  9006  13F2  00A6               	movwf	I2C1_MasterWriteTRBBuild@ptrb
  9007                           
  9008                           ;i2c1.c: 713: ptrb->address = address << 1;
  9009  13F3  0823               	movf	I2C1_MasterWriteTRBBuild@address+1,w
  9010  13F4  00A5               	movwf	??_I2C1_MasterWriteTRBBuild+1
  9011  13F5  0822               	movf	I2C1_MasterWriteTRBBuild@address,w
  9012  13F6  00A4               	movwf	??_I2C1_MasterWriteTRBBuild
  9013  13F7  35A4               	lslf	??_I2C1_MasterWriteTRBBuild,f
  9014  13F8  0DA5               	rlf	??_I2C1_MasterWriteTRBBuild+1,f
  9015  13F9  0826               	movf	I2C1_MasterWriteTRBBuild@ptrb,w
  9016  13FA  0086               	movwf	6
  9017  13FB  3001               	movlw	1	; select bank2/3
  9018  13FC  0087               	movwf	7
  9019  13FD  0824               	movf	??_I2C1_MasterWriteTRBBuild,w
  9020  13FE  3FC0               	movwi [0]fsr1
  9021  13FF  0825               	movf	??_I2C1_MasterWriteTRBBuild+1,w
  9022  1400  3FC1               	movwi [1]fsr1
  9023                           
  9024                           ;i2c1.c: 714: ptrb->length = length;
  9025  1401  0821               	movf	I2C1_MasterWriteTRBBuild@length,w
  9026  1402  00A4               	movwf	??_I2C1_MasterWriteTRBBuild
  9027  1403  0826               	movf	I2C1_MasterWriteTRBBuild@ptrb,w
  9028  1404  3E02               	addlw	2
  9029  1405  0086               	movwf	6
  9030  1406  3001               	movlw	1	; select bank2/3
  9031  1407  0087               	movwf	7
  9032  1408  0824               	movf	??_I2C1_MasterWriteTRBBuild,w
  9033  1409  0081               	movwf	1
  9034                           
  9035                           ;i2c1.c: 715: ptrb->pbuffer = pdata;
  9036  140A  0826               	movf	I2C1_MasterWriteTRBBuild@ptrb,w
  9037  140B  3E03               	addlw	3
  9038  140C  0086               	movwf	6
  9039  140D  3001               	movlw	1	; select bank2/3
  9040  140E  0087               	movwf	7
  9041  140F  0820               	movf	I2C1_MasterWriteTRBBuild@pdata,w
  9042  1410  3FC0               	movwi [0]fsr1
  9043  1411  3000               	movlw	0
  9044  1412  3FC1               	movwi [1]fsr1
  9045  1413  0008               	return
  9046  1414                     __end_of_I2C1_MasterWriteTRBBuild:	
  9047                           
  9048                           	psect	text41
  9049  1439                     __ptext41:	
  9050 ;; *************** function _I2C1_MasterRead *****************
  9051 ;; Defined at:
  9052 ;;		line 619 in file "mcc_generated_files/i2c1.c"
  9053 ;; Parameters:    Size  Location     Type
  9054 ;;  pdata           2    8[BANK0 ] PTR unsigned char 
  9055 ;;		 -> sen@length(1), sen@type(1), read_buf(16), exec_remote_cmd@data(1), 
  9056 ;;  length          1   10[BANK0 ] unsigned char 
  9057 ;;  address         2   11[BANK0 ] unsigned int 
  9058 ;;  pflag           1   13[BANK0 ] PTR enum E2972
  9059 ;;		 -> i2c1_read@status(1), 
  9060 ;; Auto vars:     Size  Location     Type
  9061 ;;		None
  9062 ;; Return value:  Size  Location     Type
  9063 ;;                  1    wreg      void 
  9064 ;; Registers used:
  9065 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9066 ;; Tracked objects:
  9067 ;;		On entry : 0/0
  9068 ;;		On exit  : 0/0
  9069 ;;		Unchanged: 0/0
  9070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9071 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9072 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9073 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9074 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9075 ;;Total ram usage:        8 bytes
  9076 ;; Hardware stack levels used:    1
  9077 ;; Hardware stack levels required when called:    4
  9078 ;; This function calls:
  9079 ;;		_I2C1_MasterReadTRBBuild
  9080 ;;		_I2C1_MasterTRBInsert
  9081 ;; This function is called by:
  9082 ;;		_i2c1_read
  9083 ;; This function uses a non-reentrant model
  9084 ;;
  9085                           
  9086                           
  9087                           ;psect for function _I2C1_MasterRead
  9088  1439                     _I2C1_MasterRead:	
  9089                           
  9090                           ;i2c1.c: 625: static I2C1_TRANSACTION_REQUEST_BLOCK trBlock;
  9091                           ;i2c1.c: 629: if (i2c1_object.trStatus.s.full != 1)
  9092                           
  9093                           ;incstack = 0
  9094                           ; Regs used in _I2C1_MasterRead: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9095  1439  0021               	movlb	1	; select bank1
  9096  143A  185B               	btfsc	(_i2c1_object^(0+128)+2),0
  9097  143B  2C5A               	goto	l4842
  9098                           
  9099                           ;i2c1.c: 630: {
  9100                           ;i2c1.c: 631: I2C1_MasterReadTRBBuild(&trBlock, pdata, length, address);
  9101  143C  0020               	movlb	0	; select bank0
  9102  143D  0829               	movf	I2C1_MasterRead@pdata+1,w
  9103  143E  00A1               	movwf	I2C1_MasterReadTRBBuild@pdata+1
  9104  143F  0828               	movf	I2C1_MasterRead@pdata,w
  9105  1440  00A0               	movwf	I2C1_MasterReadTRBBuild@pdata
  9106  1441  082A               	movf	I2C1_MasterRead@length,w
  9107  1442  00AE               	movwf	??_I2C1_MasterRead
  9108  1443  082E               	movf	??_I2C1_MasterRead,w
  9109  1444  00A2               	movwf	I2C1_MasterReadTRBBuild@length
  9110  1445  082C               	movf	I2C1_MasterRead@address+1,w
  9111  1446  00A4               	movwf	I2C1_MasterReadTRBBuild@address+1
  9112  1447  082B               	movf	I2C1_MasterRead@address,w
  9113  1448  00A3               	movwf	I2C1_MasterReadTRBBuild@address
  9114  1449  304C               	movlw	(low (I2C1_MasterRead@trBlock| (0+256)))& (0+255)
  9115  144A  3194  24DE  3194   	fcall	_I2C1_MasterReadTRBBuild
  9116                           
  9117                           ;i2c1.c: 632: I2C1_MasterTRBInsert(1, &trBlock, pflag);
  9118  144D  304C               	movlw	(low (I2C1_MasterRead@trBlock| (0+256)))& (0+255)
  9119  144E  0020               	movlb	0	; select bank0
  9120  144F  00AE               	movwf	??_I2C1_MasterRead
  9121  1450  082E               	movf	??_I2C1_MasterRead,w
  9122  1451  00A0               	movwf	I2C1_MasterTRBInsert@ptrb_list
  9123  1452  082D               	movf	I2C1_MasterRead@pflag,w
  9124  1453  00AF               	movwf	??_I2C1_MasterRead+1
  9125  1454  082F               	movf	??_I2C1_MasterRead+1,w
  9126  1455  00A1               	movwf	I2C1_MasterTRBInsert@pflag
  9127  1456  3001               	movlw	1
  9128  1457  3189  218C         	fcall	_I2C1_MasterTRBInsert
  9129                           
  9130                           ;i2c1.c: 633: }
  9131  1459  0008               	return
  9132  145A                     l4842:	
  9133                           
  9134                           ;i2c1.c: 634: else
  9135                           ;i2c1.c: 635: {
  9136                           ;i2c1.c: 636: *pflag = I2C1_MESSAGE_FAIL;
  9137  145A  0020               	movlb	0	; select bank0
  9138  145B  082D               	movf	I2C1_MasterRead@pflag,w
  9139  145C  0086               	movwf	6
  9140  145D  0187               	clrf	7
  9141  145E  0181               	clrf	1
  9142  145F  0A81               	incf	1,f
  9143  1460  0008               	return
  9144  1461                     __end_of_I2C1_MasterRead:	
  9145                           
  9146                           	psect	text42
  9147  098C                     __ptext42:	
  9148 ;; *************** function _I2C1_MasterTRBInsert *****************
  9149 ;; Defined at:
  9150 ;;		line 641 in file "mcc_generated_files/i2c1.c"
  9151 ;; Parameters:    Size  Location     Type
  9152 ;;  count           1    wreg     unsigned char 
  9153 ;;  ptrb_list       1    0[BANK0 ] PTR struct .
  9154 ;;		 -> I2C1_MasterRead@trBlock(5), I2C1_MasterWrite@trBlock(5), 
  9155 ;;  pflag           1    1[BANK0 ] PTR enum E2972
  9156 ;;		 -> i2c1_write_no_data@status(1), i2c1_read@status(1), i2c1_write@status(1), 
  9157 ;; Auto vars:     Size  Location     Type
  9158 ;;  count           1    3[BANK0 ] unsigned char 
  9159 ;; Return value:  Size  Location     Type
  9160 ;;                  1    wreg      void 
  9161 ;; Registers used:
  9162 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9163 ;; Tracked objects:
  9164 ;;		On entry : 0/0
  9165 ;;		On exit  : 0/0
  9166 ;;		Unchanged: 0/0
  9167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9168 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9169 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9170 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9171 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9172 ;;Total ram usage:        4 bytes
  9173 ;; Hardware stack levels used:    1
  9174 ;; Hardware stack levels required when called:    3
  9175 ;; This function calls:
  9176 ;;		Nothing
  9177 ;; This function is called by:
  9178 ;;		_I2C1_MasterWrite
  9179 ;;		_I2C1_MasterRead
  9180 ;; This function uses a non-reentrant model
  9181 ;;
  9182                           
  9183                           
  9184                           ;psect for function _I2C1_MasterTRBInsert
  9185  098C                     _I2C1_MasterTRBInsert:	
  9186                           
  9187                           ;incstack = 0
  9188                           ; Regs used in _I2C1_MasterTRBInsert: [wreg+fsr1l+fsr1h+status,2+status,0]
  9189                           ;I2C1_MasterTRBInsert@count stored from wreg
  9190  098C  0020               	movlb	0	; select bank0
  9191  098D  00A3               	movwf	I2C1_MasterTRBInsert@count
  9192                           
  9193                           ;i2c1.c: 648: if (i2c1_object.trStatus.s.full != 1)
  9194  098E  0021               	movlb	1	; select bank1
  9195  098F  185B               	btfsc	(_i2c1_object^(0+128)+2),0
  9196  0990  29CE               	goto	l4746
  9197                           
  9198                           ;i2c1.c: 649: {
  9199                           ;i2c1.c: 650: *pflag = I2C1_MESSAGE_PENDING;
  9200  0991  3002               	movlw	2
  9201  0992  0020               	movlb	0	; select bank0
  9202  0993  00A2               	movwf	??_I2C1_MasterTRBInsert
  9203  0994  0821               	movf	I2C1_MasterTRBInsert@pflag,w
  9204  0995  0086               	movwf	6
  9205  0996  0187               	clrf	7
  9206  0997  0822               	movf	??_I2C1_MasterTRBInsert,w
  9207  0998  0081               	movwf	1
  9208                           
  9209                           ;i2c1.c: 652: i2c1_object.pTrTail->ptrb_list = ptrb_list;
  9210  0999  0820               	movf	I2C1_MasterTRBInsert@ptrb_list,w
  9211  099A  00A2               	movwf	??_I2C1_MasterTRBInsert
  9212  099B  0021               	movlb	1	; select bank1
  9213  099C  0A59               	incf	_i2c1_object^(0+128),w
  9214  099D  0086               	movwf	6
  9215  099E  3001               	movlw	1	; select bank2/3
  9216  099F  0087               	movwf	7
  9217  09A0  0020               	movlb	0	; select bank0
  9218  09A1  0822               	movf	??_I2C1_MasterTRBInsert,w
  9219  09A2  0081               	movwf	1
  9220                           
  9221                           ;i2c1.c: 653: i2c1_object.pTrTail->count = count;
  9222  09A3  0823               	movf	I2C1_MasterTRBInsert@count,w
  9223  09A4  00A2               	movwf	??_I2C1_MasterTRBInsert
  9224  09A5  0021               	movlb	1	; select bank1
  9225  09A6  0859               	movf	_i2c1_object^(0+128),w
  9226  09A7  0086               	movwf	6
  9227  09A8  3001               	movlw	1	; select bank2/3
  9228  09A9  0087               	movwf	7
  9229  09AA  0020               	movlb	0	; select bank0
  9230  09AB  0822               	movf	??_I2C1_MasterTRBInsert,w
  9231  09AC  0081               	movwf	1
  9232                           
  9233                           ;i2c1.c: 654: i2c1_object.pTrTail->pTrFlag = pflag;
  9234  09AD  0821               	movf	I2C1_MasterTRBInsert@pflag,w
  9235  09AE  00A2               	movwf	??_I2C1_MasterTRBInsert
  9236  09AF  0021               	movlb	1	; select bank1
  9237  09B0  0859               	movf	_i2c1_object^(0+128),w
  9238  09B1  3E02               	addlw	2
  9239  09B2  0086               	movwf	6
  9240  09B3  3001               	movlw	1	; select bank2/3
  9241  09B4  0087               	movwf	7
  9242  09B5  0020               	movlb	0	; select bank0
  9243  09B6  0822               	movf	??_I2C1_MasterTRBInsert,w
  9244  09B7  0081               	movwf	1
  9245                           
  9246                           ;i2c1.c: 655: i2c1_object.pTrTail++;
  9247  09B8  3003               	movlw	3
  9248  09B9  00A2               	movwf	??_I2C1_MasterTRBInsert
  9249  09BA  0822               	movf	??_I2C1_MasterTRBInsert,w
  9250  09BB  0021               	movlb	1	; select bank1
  9251  09BC  07D9               	addwf	_i2c1_object^(0+128),f
  9252                           
  9253                           ;i2c1.c: 658: if (i2c1_object.pTrTail == (i2c1_tr_queue + 1))
  9254  09BD  0859               	movf	_i2c1_object^(0+128),w
  9255  09BE  3A5C               	xorlw	(low ((_i2c1_tr_queue| (0+256)+3)))& (0+255)
  9256  09BF  1D03               	skipz
  9257  09C0  29C7               	goto	l4742
  9258                           
  9259                           ;i2c1.c: 659: {
  9260                           ;i2c1.c: 661: i2c1_object.pTrTail = i2c1_tr_queue;
  9261  09C1  3059               	movlw	(low (_i2c1_tr_queue| (0+256)))& (0+255)
  9262  09C2  0020               	movlb	0	; select bank0
  9263  09C3  00A2               	movwf	??_I2C1_MasterTRBInsert
  9264  09C4  0822               	movf	??_I2C1_MasterTRBInsert,w
  9265  09C5  0021               	movlb	1	; select bank1
  9266  09C6  00D9               	movwf	_i2c1_object^(0+128)
  9267  09C7                     l4742:	
  9268                           
  9269                           ;i2c1.c: 662: }
  9270                           ;i2c1.c: 666: i2c1_object.trStatus.s.empty = 0;
  9271  09C7  10DB               	bcf	(_i2c1_object^(0+128)+2),1
  9272                           
  9273                           ;i2c1.c: 669: if (i2c1_object.pTrHead == i2c1_object.pTrTail)
  9274  09C8  085A               	movf	(low ((_i2c1_object| 0+1)))^(0+128),w
  9275  09C9  0659               	xorwf	_i2c1_object^(0+128),w
  9276  09CA  1D03               	skipz
  9277  09CB  29D4               	goto	l4748
  9278                           
  9279                           ;i2c1.c: 670: {
  9280                           ;i2c1.c: 672: i2c1_object.trStatus.s.full = 1;
  9281  09CC  145B               	bsf	(_i2c1_object^(0+128)+2),0
  9282                           
  9283                           ;i2c1.c: 673: }
  9284                           ;i2c1.c: 675: }
  9285  09CD  29D4               	goto	l4748
  9286  09CE                     l4746:	
  9287                           
  9288                           ;i2c1.c: 676: else
  9289                           ;i2c1.c: 677: {
  9290                           ;i2c1.c: 678: *pflag = I2C1_MESSAGE_FAIL;
  9291  09CE  0020               	movlb	0	; select bank0
  9292  09CF  0821               	movf	I2C1_MasterTRBInsert@pflag,w
  9293  09D0  0086               	movwf	6
  9294  09D1  0187               	clrf	7
  9295  09D2  0181               	clrf	1
  9296  09D3  0A81               	incf	1,f
  9297  09D4                     l4748:	
  9298                           
  9299                           ;i2c1.c: 679: }
  9300                           ;i2c1.c: 682: if (*pflag == I2C1_MESSAGE_PENDING)
  9301  09D4  0020               	movlb	0	; select bank0
  9302  09D5  0821               	movf	I2C1_MasterTRBInsert@pflag,w
  9303  09D6  0086               	movwf	6
  9304  09D7  0187               	clrf	7
  9305  09D8  3002               	movlw	2
  9306  09D9  0601               	xorwf	1,w
  9307  09DA  1D03               	btfss	3,2
  9308  09DB  0008               	return
  9309  09DC                     l4752:	
  9310                           ;i2c1.c: 683: {
  9311                           ;i2c1.c: 684: while(i2c1_state != S_MASTER_IDLE);
  9312                           
  9313  09DC  0021               	movlb	1	; select bank1
  9314  09DD  086C               	movf	_i2c1_state^(0+128),w
  9315  09DE  1D03               	btfss	3,2
  9316  09DF  29DC               	goto	l4752
  9317                           
  9318                           ;i2c1.c: 685: {
  9319                           ;i2c1.c: 688: PIR1bits.SSP1IF = 1;
  9320  09E0  0020               	movlb	0	; select bank0
  9321  09E1  1591               	bsf	17,3	;volatile
  9322  09E2  0008               	return
  9323  09E3                     __end_of_I2C1_MasterTRBInsert:	
  9324                           
  9325                           	psect	text43
  9326  14DE                     __ptext43:	
  9327 ;; *************** function _I2C1_MasterReadTRBBuild *****************
  9328 ;; Defined at:
  9329 ;;		line 694 in file "mcc_generated_files/i2c1.c"
  9330 ;; Parameters:    Size  Location     Type
  9331 ;;  ptrb            1    wreg     PTR struct .
  9332 ;;		 -> I2C1_MasterRead@trBlock(5), 
  9333 ;;  pdata           2    0[BANK0 ] PTR unsigned char 
  9334 ;;		 -> sen@length(1), sen@type(1), read_buf(16), exec_remote_cmd@data(1), 
  9335 ;;  length          1    2[BANK0 ] unsigned char 
  9336 ;;  address         2    3[BANK0 ] unsigned int 
  9337 ;; Auto vars:     Size  Location     Type
  9338 ;;  ptrb            1    7[BANK0 ] PTR struct .
  9339 ;;		 -> I2C1_MasterRead@trBlock(5), 
  9340 ;; Return value:  Size  Location     Type
  9341 ;;                  1    wreg      void 
  9342 ;; Registers used:
  9343 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9344 ;; Tracked objects:
  9345 ;;		On entry : 0/0
  9346 ;;		On exit  : 0/0
  9347 ;;		Unchanged: 0/0
  9348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9349 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9350 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9351 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9352 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9353 ;;Total ram usage:        8 bytes
  9354 ;; Hardware stack levels used:    1
  9355 ;; Hardware stack levels required when called:    3
  9356 ;; This function calls:
  9357 ;;		Nothing
  9358 ;; This function is called by:
  9359 ;;		_I2C1_MasterRead
  9360 ;; This function uses a non-reentrant model
  9361 ;;
  9362                           
  9363                           
  9364                           ;psect for function _I2C1_MasterReadTRBBuild
  9365  14DE                     _I2C1_MasterReadTRBBuild:	
  9366                           
  9367                           ;incstack = 0
  9368                           ; Regs used in _I2C1_MasterReadTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
  9369                           ;I2C1_MasterReadTRBBuild@ptrb stored from wreg
  9370  14DE  0020               	movlb	0	; select bank0
  9371  14DF  00A7               	movwf	I2C1_MasterReadTRBBuild@ptrb
  9372                           
  9373                           ;i2c1.c: 700: ptrb->address = address << 1;
  9374  14E0  0824               	movf	I2C1_MasterReadTRBBuild@address+1,w
  9375  14E1  00A6               	movwf	??_I2C1_MasterReadTRBBuild+1
  9376  14E2  0823               	movf	I2C1_MasterReadTRBBuild@address,w
  9377  14E3  00A5               	movwf	??_I2C1_MasterReadTRBBuild
  9378  14E4  35A5               	lslf	??_I2C1_MasterReadTRBBuild,f
  9379  14E5  0DA6               	rlf	??_I2C1_MasterReadTRBBuild+1,f
  9380  14E6  0827               	movf	I2C1_MasterReadTRBBuild@ptrb,w
  9381  14E7  0086               	movwf	6
  9382  14E8  3001               	movlw	1	; select bank2/3
  9383  14E9  0087               	movwf	7
  9384  14EA  0825               	movf	??_I2C1_MasterReadTRBBuild,w
  9385  14EB  3FC0               	movwi [0]fsr1
  9386  14EC  0826               	movf	??_I2C1_MasterReadTRBBuild+1,w
  9387  14ED  3FC1               	movwi [1]fsr1
  9388                           
  9389                           ;i2c1.c: 702: ptrb->address |= 0x01;
  9390  14EE  0827               	movf	I2C1_MasterReadTRBBuild@ptrb,w
  9391  14EF  0086               	movwf	6
  9392  14F0  3001               	movlw	1	; select bank2/3
  9393  14F1  0087               	movwf	7
  9394  14F2  3001               	movlw	1
  9395  14F3  0481               	iorwf	1,f
  9396  14F4  3141               	addfsr 1,1
  9397  14F5  3000               	movlw	0
  9398  14F6  0481               	iorwf	1,f
  9399                           
  9400                           ;i2c1.c: 703: ptrb->length = length;
  9401  14F7  0822               	movf	I2C1_MasterReadTRBBuild@length,w
  9402  14F8  00A5               	movwf	??_I2C1_MasterReadTRBBuild
  9403  14F9  0827               	movf	I2C1_MasterReadTRBBuild@ptrb,w
  9404  14FA  3E02               	addlw	2
  9405  14FB  0086               	movwf	6
  9406  14FC  3001               	movlw	1	; select bank2/3
  9407  14FD  0087               	movwf	7
  9408  14FE  0825               	movf	??_I2C1_MasterReadTRBBuild,w
  9409  14FF  0081               	movwf	1
  9410                           
  9411                           ;i2c1.c: 704: ptrb->pbuffer = pdata;
  9412  1500  0827               	movf	I2C1_MasterReadTRBBuild@ptrb,w
  9413  1501  3E03               	addlw	3
  9414  1502  0086               	movwf	6
  9415  1503  3001               	movlw	1	; select bank2/3
  9416  1504  0087               	movwf	7
  9417  1505  0820               	movf	I2C1_MasterReadTRBBuild@pdata,w
  9418  1506  3FC0               	movwi [0]fsr1
  9419  1507  0821               	movf	I2C1_MasterReadTRBBuild@pdata+1,w
  9420  1508  3FC1               	movwi [1]fsr1
  9421  1509  0008               	return
  9422  150A                     __end_of_I2C1_MasterReadTRBBuild:	
  9423                           
  9424                           	psect	text44
  9425  00B0                     __ptext44:	
  9426 ;; *************** function _PROTOCOL_Print_TLV *****************
  9427 ;; Defined at:
  9428 ;;		line 224 in file "protocol.c"
  9429 ;; Parameters:    Size  Location     Type
  9430 ;;  dev_addr        1    wreg     unsigned char 
  9431 ;;  type            1   36[BANK0 ] unsigned char 
  9432 ;;  length          1   37[BANK0 ] unsigned char 
  9433 ;;  pbuffer         1   38[BANK0 ] PTR unsigned char 
  9434 ;;		 -> read_buf(16), NULL(0), 
  9435 ;; Auto vars:     Size  Location     Type
  9436 ;;  dev_addr        1   42[BANK0 ] unsigned char 
  9437 ;;  v               2   43[BANK0 ] int 
  9438 ;; Return value:  Size  Location     Type
  9439 ;;                  1    wreg      void 
  9440 ;; Registers used:
  9441 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9442 ;; Tracked objects:
  9443 ;;		On entry : 0/0
  9444 ;;		On exit  : 0/0
  9445 ;;		Unchanged: 0/0
  9446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9447 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9448 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9449 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9450 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9451 ;;Total ram usage:        9 bytes
  9452 ;; Hardware stack levels used:    1
  9453 ;; Hardware stack levels required when called:    6
  9454 ;; This function calls:
  9455 ;;		___awdiv
  9456 ;;		___awmod
  9457 ;;		_abs
  9458 ;;		_concat
  9459 ;;		_printf
  9460 ;; This function is called by:
  9461 ;;		_sen
  9462 ;; This function uses a non-reentrant model
  9463 ;;
  9464                           
  9465                           
  9466                           ;psect for function _PROTOCOL_Print_TLV
  9467  00B0                     _PROTOCOL_Print_TLV:	
  9468                           
  9469                           ;incstack = 0
  9470                           ; Regs used in _PROTOCOL_Print_TLV: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9471                           ;PROTOCOL_Print_TLV@dev_addr stored from wreg
  9472  00B0  0020               	movlb	0	; select bank0
  9473  00B1  00CA               	movwf	PROTOCOL_Print_TLV@dev_addr
  9474                           
  9475                           ;protocol.c: 225: int16_t v;
  9476                           ;protocol.c: 226: if (dev_addr != 0) printf("%%%d:", dev_addr);
  9477  00B2  084A               	movf	PROTOCOL_Print_TLV@dev_addr,w
  9478  00B3  1903               	btfsc	3,2
  9479  00B4  2B13               	goto	l5208
  9480  00B5  3052               	movlw	low (STR_49| (0+32768))
  9481  00B6  00AE               	movwf	printf@f
  9482  00B7  3091               	movlw	high (STR_49| (0+32768))
  9483  00B8  00AF               	movwf	printf@f+1
  9484  00B9  084A               	movf	PROTOCOL_Print_TLV@dev_addr,w
  9485  00BA  00C7               	movwf	??_PROTOCOL_Print_TLV
  9486  00BB  01C8               	clrf	??_PROTOCOL_Print_TLV+1
  9487  00BC  0847               	movf	??_PROTOCOL_Print_TLV,w
  9488  00BD  00B0               	movwf	?_printf+2
  9489  00BE  0848               	movf	??_PROTOCOL_Print_TLV+1,w
  9490  00BF  00B1               	movwf	?_printf+3
  9491  00C0  3185  251C  3180   	fcall	_printf
  9492                           
  9493                           ;protocol.c: 227: switch(type) {
  9494  00C3  2B13               	goto	l5208
  9495  00C4                     l5116:	
  9496                           ;protocol.c: 228: case 0x01:
  9497                           
  9498                           
  9499                           ;protocol.c: 229: length--;
  9500  00C4  3001               	movlw	1
  9501  00C5  0020               	movlb	0	; select bank0
  9502  00C6  02C5               	subwf	PROTOCOL_Print_TLV@length,f
  9503                           
  9504                           ;protocol.c: 230: printf("UINT8_T:");
  9505  00C7  302D               	movlw	low (STR_50| (0+32768))
  9506  00C8  00AE               	movwf	printf@f
  9507  00C9  3091               	movlw	high (STR_50| (0+32768))
  9508  00CA  00AF               	movwf	printf@f+1
  9509  00CB  3185  251C  3180   	fcall	_printf
  9510                           
  9511                           ;protocol.c: 231: for (i=0; i<length; i++) printf("%u,", pbuffer[i]);
  9512  00CE  0020               	movlb	0	; select bank0
  9513  00CF  01EB               	clrf	_i
  9514  00D0                     l5126:	
  9515  00D0  0845               	movf	PROTOCOL_Print_TLV@length,w
  9516  00D1  026B               	subwf	_i,w
  9517  00D2  1803               	btfsc	3,0
  9518  00D3  28EF               	goto	l5128
  9519  00D4  3061               	movlw	low (STR_51| (0+32768))
  9520  00D5  00AE               	movwf	printf@f
  9521  00D6  3091               	movlw	high (STR_51| (0+32768))
  9522  00D7  00AF               	movwf	printf@f+1
  9523  00D8  086B               	movf	_i,w
  9524  00D9  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  9525  00DA  00C7               	movwf	??_PROTOCOL_Print_TLV
  9526  00DB  0847               	movf	??_PROTOCOL_Print_TLV,w
  9527  00DC  0086               	movwf	6
  9528  00DD  3001               	movlw	1	; select bank2/3
  9529  00DE  0087               	movwf	7
  9530  00DF  0801               	movf	1,w
  9531  00E0  00C8               	movwf	??_PROTOCOL_Print_TLV+1
  9532  00E1  01C9               	clrf	??_PROTOCOL_Print_TLV+2
  9533  00E2  0848               	movf	??_PROTOCOL_Print_TLV+1,w
  9534  00E3  00B0               	movwf	?_printf+2
  9535  00E4  0849               	movf	??_PROTOCOL_Print_TLV+2,w
  9536  00E5  00B1               	movwf	?_printf+3
  9537  00E6  3185  251C  3180   	fcall	_printf
  9538  00E9  3001               	movlw	1
  9539  00EA  0020               	movlb	0	; select bank0
  9540  00EB  00C7               	movwf	??_PROTOCOL_Print_TLV
  9541  00EC  0847               	movf	??_PROTOCOL_Print_TLV,w
  9542  00ED  07EB               	addwf	_i,f
  9543  00EE  28D0               	goto	l5126
  9544  00EF                     l5128:	
  9545                           
  9546                           ;protocol.c: 232: printf("%u\n", pbuffer[i]);
  9547  00EF  305D               	movlw	low (STR_52| (0+32768))
  9548  00F0  00AE               	movwf	printf@f
  9549  00F1  3091               	movlw	high (STR_52| (0+32768))
  9550  00F2  00AF               	movwf	printf@f+1
  9551  00F3  086B               	movf	_i,w
  9552  00F4  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  9553  00F5  00C7               	movwf	??_PROTOCOL_Print_TLV
  9554  00F6  0847               	movf	??_PROTOCOL_Print_TLV,w
  9555  00F7  0086               	movwf	6
  9556  00F8  3001               	movlw	1	; select bank2/3
  9557  00F9  0087               	movwf	7
  9558  00FA  0801               	movf	1,w
  9559  00FB  00C8               	movwf	??_PROTOCOL_Print_TLV+1
  9560  00FC  01C9               	clrf	??_PROTOCOL_Print_TLV+2
  9561  00FD  0848               	movf	??_PROTOCOL_Print_TLV+1,w
  9562  00FE  00B0               	movwf	?_printf+2
  9563  00FF  0849               	movf	??_PROTOCOL_Print_TLV+2,w
  9564  0100  00B1               	movwf	?_printf+3
  9565  0101  3185  251C         	fcall	_printf
  9566                           
  9567                           ;protocol.c: 233: break;
  9568  0103  0008               	return
  9569  0104                     l5130:	
  9570                           ;protocol.c: 234: case 0x02:
  9571                           
  9572                           
  9573                           ;protocol.c: 235: length--;
  9574  0104  3001               	movlw	1
  9575  0105  0020               	movlb	0	; select bank0
  9576  0106  02C5               	subwf	PROTOCOL_Print_TLV@length,f
  9577                           
  9578                           ;protocol.c: 236: printf("INT8_T:");
  9579  0107  302E               	movlw	low ((STR_50+1)| (0+32768))
  9580  0108  00AE               	movwf	printf@f
  9581  0109  3091               	movlw	high ((STR_50+1)| (0+32768))
  9582  010A  00AF               	movwf	printf@f+1
  9583  010B  3185  251C  3180   	fcall	_printf
  9584                           
  9585                           ;protocol.c: 237: for (i=0; i<length; i++) printf("%d,", (int8_t)pbuffer[i]);
  9586  010E  0020               	movlb	0	; select bank0
  9587  010F  01EB               	clrf	_i
  9588  0110                     l5140:	
  9589  0110  0845               	movf	PROTOCOL_Print_TLV@length,w
  9590  0111  026B               	subwf	_i,w
  9591  0112  1803               	btfsc	3,0
  9592  0113  292D               	goto	l5142
  9593  0114  3071               	movlw	low (STR_14| (0+32768))
  9594  0115  00AE               	movwf	printf@f
  9595  0116  3091               	movlw	high (STR_14| (0+32768))
  9596  0117  00AF               	movwf	printf@f+1
  9597  0118  086B               	movf	_i,w
  9598  0119  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  9599  011A  00C7               	movwf	??_PROTOCOL_Print_TLV
  9600  011B  0847               	movf	??_PROTOCOL_Print_TLV,w
  9601  011C  0086               	movwf	6
  9602  011D  3001               	movlw	1	; select bank2/3
  9603  011E  0087               	movwf	7
  9604  011F  0801               	movf	1,w
  9605  0120  00B0               	movwf	?_printf+2
  9606  0121  01B1               	clrf	?_printf+3
  9607  0122  1BB0               	btfsc	?_printf+2,7
  9608  0123  03B1               	decf	?_printf+3,f
  9609  0124  3185  251C  3180   	fcall	_printf
  9610  0127  3001               	movlw	1
  9611  0128  0020               	movlb	0	; select bank0
  9612  0129  00C7               	movwf	??_PROTOCOL_Print_TLV
  9613  012A  0847               	movf	??_PROTOCOL_Print_TLV,w
  9614  012B  07EB               	addwf	_i,f
  9615  012C  2910               	goto	l5140
  9616  012D                     l5142:	
  9617                           
  9618                           ;protocol.c: 238: printf("%d\n", (int8_t)pbuffer[i]);
  9619  012D  30DA               	movlw	low ((STR_48+6)| (0+32768))
  9620  012E  00AE               	movwf	printf@f
  9621  012F  3090               	movlw	high ((STR_48+6)| (0+32768))
  9622  0130  00AF               	movwf	printf@f+1
  9623  0131  086B               	movf	_i,w
  9624  0132  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  9625  0133  00C7               	movwf	??_PROTOCOL_Print_TLV
  9626  0134  0847               	movf	??_PROTOCOL_Print_TLV,w
  9627  0135  0086               	movwf	6
  9628  0136  3001               	movlw	1	; select bank2/3
  9629  0137  0087               	movwf	7
  9630  0138  0801               	movf	1,w
  9631  0139  00B0               	movwf	?_printf+2
  9632  013A  01B1               	clrf	?_printf+3
  9633  013B  1BB0               	btfsc	?_printf+2,7
  9634  013C  03B1               	decf	?_printf+3,f
  9635  013D  3185  251C         	fcall	_printf
  9636                           
  9637                           ;protocol.c: 239: break;
  9638  013F  0008               	return
  9639  0140                     l5144:	
  9640                           ;protocol.c: 240: case 0x03:
  9641                           
  9642                           
  9643                           ;protocol.c: 241: printf("UINT16_T:");
  9644  0140  3006               	movlw	low (STR_56| (0+32768))
  9645  0141  0020               	movlb	0	; select bank0
  9646  0142  00AE               	movwf	printf@f
  9647  0143  3091               	movlw	high (STR_56| (0+32768))
  9648  0144  00AF               	movwf	printf@f+1
  9649  0145  3185  251C  3180   	fcall	_printf
  9650                           
  9651                           ;protocol.c: 242: length = length - 2;
  9652  0148  0020               	movlb	0	; select bank0
  9653  0149  0845               	movf	PROTOCOL_Print_TLV@length,w
  9654  014A  3EFE               	addlw	254
  9655  014B  00C7               	movwf	??_PROTOCOL_Print_TLV
  9656  014C  0847               	movf	??_PROTOCOL_Print_TLV,w
  9657  014D  00C5               	movwf	PROTOCOL_Print_TLV@length
  9658                           
  9659                           ;protocol.c: 243: for(i=0; i<length; i=i+2) printf("%u,", concat(pbuffer[i], pbuffer[i+1
      +                          ]));
  9660  014E  01EB               	clrf	_i
  9661  014F                     l5154:	
  9662  014F  0845               	movf	PROTOCOL_Print_TLV@length,w
  9663  0150  026B               	subwf	_i,w
  9664  0151  1803               	btfsc	3,0
  9665  0152  297D               	goto	l5156
  9666  0153  3061               	movlw	low (STR_51| (0+32768))
  9667  0154  00AE               	movwf	printf@f
  9668  0155  3091               	movlw	high (STR_51| (0+32768))
  9669  0156  00AF               	movwf	printf@f+1
  9670  0157  086B               	movf	_i,w
  9671  0158  3E01               	addlw	1
  9672  0159  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  9673  015A  00C7               	movwf	??_PROTOCOL_Print_TLV
  9674  015B  0847               	movf	??_PROTOCOL_Print_TLV,w
  9675  015C  0086               	movwf	6
  9676  015D  3001               	movlw	1	; select bank2/3
  9677  015E  0087               	movwf	7
  9678  015F  0801               	movf	1,w
  9679  0160  00C8               	movwf	??_PROTOCOL_Print_TLV+1
  9680  0161  0848               	movf	??_PROTOCOL_Print_TLV+1,w
  9681  0162  00A0               	movwf	concat@lsb
  9682  0163  086B               	movf	_i,w
  9683  0164  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  9684  0165  00C9               	movwf	??_PROTOCOL_Print_TLV+2
  9685  0166  0849               	movf	??_PROTOCOL_Print_TLV+2,w
  9686  0167  0086               	movwf	6
  9687  0168  3001               	movlw	1	; select bank2/3
  9688  0169  0087               	movwf	7
  9689  016A  0801               	movf	1,w
  9690  016B  3192  2284  3180   	fcall	_concat
  9691  016E  0020               	movlb	0	; select bank0
  9692  016F  0821               	movf	?_concat+1,w
  9693  0170  00B1               	movwf	?_printf+3
  9694  0171  0820               	movf	?_concat,w
  9695  0172  00B0               	movwf	?_printf+2
  9696  0173  3185  251C  3180   	fcall	_printf
  9697  0176  0020               	movlb	0	; select bank0
  9698  0177  086B               	movf	_i,w
  9699  0178  3E02               	addlw	2
  9700  0179  00C7               	movwf	??_PROTOCOL_Print_TLV
  9701  017A  0847               	movf	??_PROTOCOL_Print_TLV,w
  9702  017B  00EB               	movwf	_i
  9703  017C  294F               	goto	l5154
  9704  017D                     l5156:	
  9705                           
  9706                           ;protocol.c: 244: printf("%u\n", concat(pbuffer[i], pbuffer[i+1]));
  9707  017D  305D               	movlw	low (STR_52| (0+32768))
  9708  017E  00AE               	movwf	printf@f
  9709  017F  3091               	movlw	high (STR_52| (0+32768))
  9710  0180  00AF               	movwf	printf@f+1
  9711  0181  086B               	movf	_i,w
  9712  0182  3E01               	addlw	1
  9713  0183  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  9714  0184  00C7               	movwf	??_PROTOCOL_Print_TLV
  9715  0185  0847               	movf	??_PROTOCOL_Print_TLV,w
  9716  0186  0086               	movwf	6
  9717  0187  3001               	movlw	1	; select bank2/3
  9718  0188  0087               	movwf	7
  9719  0189  0801               	movf	1,w
  9720  018A  00C8               	movwf	??_PROTOCOL_Print_TLV+1
  9721  018B  0848               	movf	??_PROTOCOL_Print_TLV+1,w
  9722  018C  00A0               	movwf	concat@lsb
  9723  018D  086B               	movf	_i,w
  9724  018E  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  9725  018F  00C9               	movwf	??_PROTOCOL_Print_TLV+2
  9726  0190  0849               	movf	??_PROTOCOL_Print_TLV+2,w
  9727  0191  0086               	movwf	6
  9728  0192  3001               	movlw	1	; select bank2/3
  9729  0193  0087               	movwf	7
  9730  0194  0801               	movf	1,w
  9731  0195  3192  2284  3180   	fcall	_concat
  9732  0198  0020               	movlb	0	; select bank0
  9733  0199  0821               	movf	?_concat+1,w
  9734  019A  00B1               	movwf	?_printf+3
  9735  019B  0820               	movf	?_concat,w
  9736  019C  00B0               	movwf	?_printf+2
  9737  019D  3185  251C         	fcall	_printf
  9738                           
  9739                           ;protocol.c: 245: break;
  9740  019F  0008               	return
  9741  01A0                     l5158:	
  9742                           ;protocol.c: 246: case 0x04:
  9743                           
  9744                           
  9745                           ;protocol.c: 247: printf("INT16_T:");
  9746  01A0  3007               	movlw	low ((STR_56+1)| (0+32768))
  9747  01A1  0020               	movlb	0	; select bank0
  9748  01A2  00AE               	movwf	printf@f
  9749  01A3  3091               	movlw	high ((STR_56+1)| (0+32768))
  9750  01A4  00AF               	movwf	printf@f+1
  9751  01A5  3185  251C  3180   	fcall	_printf
  9752                           
  9753                           ;protocol.c: 248: length = length - 2;
  9754  01A8  0020               	movlb	0	; select bank0
  9755  01A9  0845               	movf	PROTOCOL_Print_TLV@length,w
  9756  01AA  3EFE               	addlw	254
  9757  01AB  00C7               	movwf	??_PROTOCOL_Print_TLV
  9758  01AC  0847               	movf	??_PROTOCOL_Print_TLV,w
  9759  01AD  00C5               	movwf	PROTOCOL_Print_TLV@length
  9760                           
  9761                           ;protocol.c: 249: for(i=0; i<length; i=i+2) printf("%d,", (int16_t)(concat(pbuffer[i], p
      +                          buffer[i+1])));
  9762  01AE  01EB               	clrf	_i
  9763  01AF                     l5168:	
  9764  01AF  0845               	movf	PROTOCOL_Print_TLV@length,w
  9765  01B0  026B               	subwf	_i,w
  9766  01B1  1803               	btfsc	3,0
  9767  01B2  29DD               	goto	l5170
  9768  01B3  3071               	movlw	low (STR_14| (0+32768))
  9769  01B4  00AE               	movwf	printf@f
  9770  01B5  3091               	movlw	high (STR_14| (0+32768))
  9771  01B6  00AF               	movwf	printf@f+1
  9772  01B7  086B               	movf	_i,w
  9773  01B8  3E01               	addlw	1
  9774  01B9  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  9775  01BA  00C7               	movwf	??_PROTOCOL_Print_TLV
  9776  01BB  0847               	movf	??_PROTOCOL_Print_TLV,w
  9777  01BC  0086               	movwf	6
  9778  01BD  3001               	movlw	1	; select bank2/3
  9779  01BE  0087               	movwf	7
  9780  01BF  0801               	movf	1,w
  9781  01C0  00C8               	movwf	??_PROTOCOL_Print_TLV+1
  9782  01C1  0848               	movf	??_PROTOCOL_Print_TLV+1,w
  9783  01C2  00A0               	movwf	concat@lsb
  9784  01C3  086B               	movf	_i,w
  9785  01C4  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  9786  01C5  00C9               	movwf	??_PROTOCOL_Print_TLV+2
  9787  01C6  0849               	movf	??_PROTOCOL_Print_TLV+2,w
  9788  01C7  0086               	movwf	6
  9789  01C8  3001               	movlw	1	; select bank2/3
  9790  01C9  0087               	movwf	7
  9791  01CA  0801               	movf	1,w
  9792  01CB  3192  2284  3180   	fcall	_concat
  9793  01CE  0020               	movlb	0	; select bank0
  9794  01CF  0821               	movf	?_concat+1,w
  9795  01D0  00B1               	movwf	?_printf+3
  9796  01D1  0820               	movf	?_concat,w
  9797  01D2  00B0               	movwf	?_printf+2
  9798  01D3  3185  251C  3180   	fcall	_printf
  9799  01D6  0020               	movlb	0	; select bank0
  9800  01D7  086B               	movf	_i,w
  9801  01D8  3E02               	addlw	2
  9802  01D9  00C7               	movwf	??_PROTOCOL_Print_TLV
  9803  01DA  0847               	movf	??_PROTOCOL_Print_TLV,w
  9804  01DB  00EB               	movwf	_i
  9805  01DC  29AF               	goto	l5168
  9806  01DD                     l5170:	
  9807                           
  9808                           ;protocol.c: 250: printf("%d\n", (int16_t)(concat(pbuffer[i], pbuffer[i+1])));
  9809  01DD  30DA               	movlw	low ((STR_48+6)| (0+32768))
  9810  01DE  00AE               	movwf	printf@f
  9811  01DF  3090               	movlw	high ((STR_48+6)| (0+32768))
  9812  01E0  00AF               	movwf	printf@f+1
  9813  01E1  086B               	movf	_i,w
  9814  01E2  3E01               	addlw	1
  9815  01E3  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  9816  01E4  00C7               	movwf	??_PROTOCOL_Print_TLV
  9817  01E5  0847               	movf	??_PROTOCOL_Print_TLV,w
  9818  01E6  0086               	movwf	6
  9819  01E7  3001               	movlw	1	; select bank2/3
  9820  01E8  0087               	movwf	7
  9821  01E9  0801               	movf	1,w
  9822  01EA  00C8               	movwf	??_PROTOCOL_Print_TLV+1
  9823  01EB  0848               	movf	??_PROTOCOL_Print_TLV+1,w
  9824  01EC  00A0               	movwf	concat@lsb
  9825  01ED  086B               	movf	_i,w
  9826  01EE  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  9827  01EF  00C9               	movwf	??_PROTOCOL_Print_TLV+2
  9828  01F0  0849               	movf	??_PROTOCOL_Print_TLV+2,w
  9829  01F1  0086               	movwf	6
  9830  01F2  3001               	movlw	1	; select bank2/3
  9831  01F3  0087               	movwf	7
  9832  01F4  0801               	movf	1,w
  9833  01F5  3192  2284  3180   	fcall	_concat
  9834  01F8  0020               	movlb	0	; select bank0
  9835  01F9  0821               	movf	?_concat+1,w
  9836  01FA  00B1               	movwf	?_printf+3
  9837  01FB  0820               	movf	?_concat,w
  9838  01FC  00B0               	movwf	?_printf+2
  9839  01FD  3185  251C         	fcall	_printf
  9840                           
  9841                           ;protocol.c: 251: break;
  9842  01FF  0008               	return
  9843  0200                     l5172:	
  9844                           ;protocol.c: 252: case 0x05:
  9845                           
  9846                           
  9847                           ;protocol.c: 253: printf("FLOAT:");
  9848  0200  3036               	movlw	low (STR_62| (0+32768))
  9849  0201  0020               	movlb	0	; select bank0
  9850  0202  00AE               	movwf	printf@f
  9851  0203  3091               	movlw	high (STR_62| (0+32768))
  9852  0204  00AF               	movwf	printf@f+1
  9853  0205  3185  251C  3180   	fcall	_printf
  9854                           
  9855                           ;protocol.c: 254: length = length - 2;
  9856  0208  0020               	movlb	0	; select bank0
  9857  0209  0845               	movf	PROTOCOL_Print_TLV@length,w
  9858  020A  3EFE               	addlw	254
  9859  020B  00C7               	movwf	??_PROTOCOL_Print_TLV
  9860  020C  0847               	movf	??_PROTOCOL_Print_TLV,w
  9861  020D  00C5               	movwf	PROTOCOL_Print_TLV@length
  9862                           
  9863                           ;protocol.c: 255: for (i=0; i<length; i=i+2) {
  9864  020E  01EB               	clrf	_i
  9865  020F                     l5190:	
  9866  020F  0845               	movf	PROTOCOL_Print_TLV@length,w
  9867  0210  026B               	subwf	_i,w
  9868  0211  1803               	btfsc	3,0
  9869  0212  2A79               	goto	l5192
  9870                           
  9871                           ;protocol.c: 256: v = (int16_t)(concat(pbuffer[i], pbuffer[i+1]));
  9872  0213  086B               	movf	_i,w
  9873  0214  3E01               	addlw	1
  9874  0215  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  9875  0216  00C7               	movwf	??_PROTOCOL_Print_TLV
  9876  0217  0847               	movf	??_PROTOCOL_Print_TLV,w
  9877  0218  0086               	movwf	6
  9878  0219  3001               	movlw	1	; select bank2/3
  9879  021A  0087               	movwf	7
  9880  021B  0801               	movf	1,w
  9881  021C  00C8               	movwf	??_PROTOCOL_Print_TLV+1
  9882  021D  0848               	movf	??_PROTOCOL_Print_TLV+1,w
  9883  021E  00A0               	movwf	concat@lsb
  9884  021F  086B               	movf	_i,w
  9885  0220  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  9886  0221  00C9               	movwf	??_PROTOCOL_Print_TLV+2
  9887  0222  0849               	movf	??_PROTOCOL_Print_TLV+2,w
  9888  0223  0086               	movwf	6
  9889  0224  3001               	movlw	1	; select bank2/3
  9890  0225  0087               	movwf	7
  9891  0226  0801               	movf	1,w
  9892  0227  3192  2284  3180   	fcall	_concat
  9893  022A  0020               	movlb	0	; select bank0
  9894  022B  0821               	movf	?_concat+1,w
  9895  022C  00CC               	movwf	PROTOCOL_Print_TLV@v+1
  9896  022D  0820               	movf	?_concat,w
  9897  022E  00CB               	movwf	PROTOCOL_Print_TLV@v
  9898                           
  9899                           ;protocol.c: 257: if (v <= -100 || v >= 0) {
  9900  022F  084C               	movf	PROTOCOL_Print_TLV@v+1,w
  9901  0230  3A80               	xorlw	128
  9902  0231  00C7               	movwf	??_PROTOCOL_Print_TLV
  9903  0232  307F               	movlw	127
  9904  0233  0247               	subwf	??_PROTOCOL_Print_TLV,w
  9905  0234  1D03               	skipz
  9906  0235  2A38               	goto	u5805
  9907  0236  309D               	movlw	157
  9908  0237  024B               	subwf	PROTOCOL_Print_TLV@v,w
  9909  0238                     u5805:	
  9910  0238  1C03               	skipc
  9911  0239  2A3D               	goto	l5184
  9912  023A  0020               	movlb	0	; select bank0
  9913  023B  1BCC               	btfsc	PROTOCOL_Print_TLV@v+1,7
  9914  023C  2A42               	goto	l5186
  9915  023D                     l5184:	
  9916                           
  9917                           ;protocol.c: 258: printf("%d.%02d,", v/100, abs(v%100));
  9918  023D  30FD               	movlw	low ((STR_64+1)| (0+32768))
  9919  023E  0020               	movlb	0	; select bank0
  9920  023F  00AE               	movwf	printf@f
  9921  0240  3090               	movlw	high ((STR_64+1)| (0+32768))
  9922  0241  2A46               	goto	L12
  9923  0242                     l5186:	
  9924                           ;protocol.c: 259: } else {
  9925                           
  9926                           
  9927                           ;protocol.c: 260: printf("-%d.%02d,", v/100, abs(v%100));
  9928  0242  30FC               	movlw	low (STR_64| (0+32768))
  9929  0243  0020               	movlb	0	; select bank0
  9930  0244  00AE               	movwf	printf@f
  9931  0245  3090               	movlw	high (STR_64| (0+32768))
  9932  0246                     L12:	
  9933  0246  00AF               	movwf	printf@f+1
  9934  0247  3064               	movlw	100
  9935  0248  00A0               	movwf	___awdiv@divisor
  9936  0249  3000               	movlw	0
  9937  024A  00A1               	movwf	___awdiv@divisor+1
  9938  024B  084C               	movf	PROTOCOL_Print_TLV@v+1,w
  9939  024C  00A3               	movwf	___awdiv@dividend+1
  9940  024D  084B               	movf	PROTOCOL_Print_TLV@v,w
  9941  024E  00A2               	movwf	___awdiv@dividend
  9942  024F  3188  20E5  3180   	fcall	___awdiv
  9943  0252  0020               	movlb	0	; select bank0
  9944  0253  0821               	movf	?___awdiv+1,w
  9945  0254  00B1               	movwf	?_printf+3
  9946  0255  0820               	movf	?___awdiv,w
  9947  0256  00B0               	movwf	?_printf+2
  9948  0257  3064               	movlw	100
  9949  0258  00A0               	movwf	___awmod@divisor
  9950  0259  3000               	movlw	0
  9951  025A  00A1               	movwf	___awmod@divisor+1
  9952  025B  084C               	movf	PROTOCOL_Print_TLV@v+1,w
  9953  025C  00A3               	movwf	___awmod@dividend+1
  9954  025D  084B               	movf	PROTOCOL_Print_TLV@v,w
  9955  025E  00A2               	movwf	___awmod@dividend
  9956  025F  3196  2641  3180   	fcall	___awmod
  9957  0262  0020               	movlb	0	; select bank0
  9958  0263  0821               	movf	?___awmod+1,w
  9959  0264  00A8               	movwf	abs@a+1
  9960  0265  0820               	movf	?___awmod,w
  9961  0266  00A7               	movwf	abs@a
  9962  0267  3192  2254  3180   	fcall	_abs
  9963  026A  0020               	movlb	0	; select bank0
  9964  026B  0828               	movf	?_abs+1,w
  9965  026C  00B3               	movwf	?_printf+5
  9966  026D  0827               	movf	?_abs,w
  9967  026E  00B2               	movwf	?_printf+4
  9968  026F  3185  251C  3180   	fcall	_printf
  9969  0272  0020               	movlb	0	; select bank0
  9970  0273  086B               	movf	_i,w
  9971  0274  3E02               	addlw	2
  9972  0275  00C7               	movwf	??_PROTOCOL_Print_TLV
  9973  0276  0847               	movf	??_PROTOCOL_Print_TLV,w
  9974  0277  00EB               	movwf	_i
  9975  0278  2A0F               	goto	l5190
  9976  0279                     l5192:	
  9977                           
  9978                           ;protocol.c: 261: }
  9979                           ;protocol.c: 262: }
  9980                           ;protocol.c: 263: v = (int16_t)(concat(pbuffer[i], pbuffer[i+1]));
  9981  0279  086B               	movf	_i,w
  9982  027A  3E01               	addlw	1
  9983  027B  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  9984  027C  00C7               	movwf	??_PROTOCOL_Print_TLV
  9985  027D  0847               	movf	??_PROTOCOL_Print_TLV,w
  9986  027E  0086               	movwf	6
  9987  027F  3001               	movlw	1	; select bank2/3
  9988  0280  0087               	movwf	7
  9989  0281  0801               	movf	1,w
  9990  0282  00C8               	movwf	??_PROTOCOL_Print_TLV+1
  9991  0283  0848               	movf	??_PROTOCOL_Print_TLV+1,w
  9992  0284  00A0               	movwf	concat@lsb
  9993  0285  086B               	movf	_i,w
  9994  0286  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  9995  0287  00C9               	movwf	??_PROTOCOL_Print_TLV+2
  9996  0288  0849               	movf	??_PROTOCOL_Print_TLV+2,w
  9997  0289  0086               	movwf	6
  9998  028A  3001               	movlw	1	; select bank2/3
  9999  028B  0087               	movwf	7
 10000  028C  0801               	movf	1,w
 10001  028D  3192  2284  3180   	fcall	_concat
 10002  0290  0020               	movlb	0	; select bank0
 10003  0291  0821               	movf	?_concat+1,w
 10004  0292  00CC               	movwf	PROTOCOL_Print_TLV@v+1
 10005  0293  0820               	movf	?_concat,w
 10006  0294  00CB               	movwf	PROTOCOL_Print_TLV@v
 10007                           
 10008                           ;protocol.c: 264: if (v <= -100 || v >= 0) {
 10009  0295  084C               	movf	PROTOCOL_Print_TLV@v+1,w
 10010  0296  3A80               	xorlw	128
 10011  0297  00C7               	movwf	??_PROTOCOL_Print_TLV
 10012  0298  307F               	movlw	127
 10013  0299  0247               	subwf	??_PROTOCOL_Print_TLV,w
 10014  029A  1D03               	skipz
 10015  029B  2A9E               	goto	u5835
 10016  029C  309D               	movlw	157
 10017  029D  024B               	subwf	PROTOCOL_Print_TLV@v,w
 10018  029E                     u5835:	
 10019  029E  1C03               	skipc
 10020  029F  2AA3               	goto	l5198
 10021  02A0  0020               	movlb	0	; select bank0
 10022  02A1  1BCC               	btfsc	PROTOCOL_Print_TLV@v+1,7
 10023  02A2  2AD3               	goto	l5200
 10024  02A3                     l5198:	
 10025                           
 10026                           ;protocol.c: 265: printf("%d.%02d\n", v/100, abs(v%100));
 10027  02A3  30DF               	movlw	low ((STR_66+1)| (0+32768))
 10028  02A4  0020               	movlb	0	; select bank0
 10029  02A5  00AE               	movwf	printf@f
 10030  02A6  3090               	movlw	high ((STR_66+1)| (0+32768))
 10031  02A7  00AF               	movwf	printf@f+1
 10032  02A8  3064               	movlw	100
 10033  02A9  00A0               	movwf	___awdiv@divisor
 10034  02AA  3000               	movlw	0
 10035  02AB  00A1               	movwf	___awdiv@divisor+1
 10036  02AC  084C               	movf	PROTOCOL_Print_TLV@v+1,w
 10037  02AD  00A3               	movwf	___awdiv@dividend+1
 10038  02AE  084B               	movf	PROTOCOL_Print_TLV@v,w
 10039  02AF  00A2               	movwf	___awdiv@dividend
 10040  02B0  3188  20E5  3180   	fcall	___awdiv
 10041  02B3  0020               	movlb	0	; select bank0
 10042  02B4  0821               	movf	?___awdiv+1,w
 10043  02B5  00B1               	movwf	?_printf+3
 10044  02B6  0820               	movf	?___awdiv,w
 10045  02B7  00B0               	movwf	?_printf+2
 10046  02B8  3064               	movlw	100
 10047  02B9  00A0               	movwf	___awmod@divisor
 10048  02BA  3000               	movlw	0
 10049  02BB  00A1               	movwf	___awmod@divisor+1
 10050  02BC  084C               	movf	PROTOCOL_Print_TLV@v+1,w
 10051  02BD  00A3               	movwf	___awmod@dividend+1
 10052  02BE  084B               	movf	PROTOCOL_Print_TLV@v,w
 10053  02BF  00A2               	movwf	___awmod@dividend
 10054  02C0  3196  2641  3180   	fcall	___awmod
 10055  02C3  0020               	movlb	0	; select bank0
 10056  02C4  0821               	movf	?___awmod+1,w
 10057  02C5  00A8               	movwf	abs@a+1
 10058  02C6  0820               	movf	?___awmod,w
 10059  02C7  00A7               	movwf	abs@a
 10060  02C8  3192  2254  3180   	fcall	_abs
 10061  02CB  0020               	movlb	0	; select bank0
 10062  02CC  0828               	movf	?_abs+1,w
 10063  02CD  00B3               	movwf	?_printf+5
 10064  02CE  0827               	movf	?_abs,w
 10065  02CF  00B2               	movwf	?_printf+4
 10066  02D0  3185  251C         	fcall	_printf
 10067                           
 10068                           ;protocol.c: 266: } else {
 10069  02D2  0008               	return
 10070  02D3                     l5200:	
 10071                           
 10072                           ;protocol.c: 267: printf("-%d.%02d\n", v/100, abs(v%100));
 10073  02D3  30DE               	movlw	low (STR_66| (0+32768))
 10074  02D4  0020               	movlb	0	; select bank0
 10075  02D5  00AE               	movwf	printf@f
 10076  02D6  3090               	movlw	high (STR_66| (0+32768))
 10077  02D7  00AF               	movwf	printf@f+1
 10078  02D8  3064               	movlw	100
 10079  02D9  00A0               	movwf	___awdiv@divisor
 10080  02DA  3000               	movlw	0
 10081  02DB  00A1               	movwf	___awdiv@divisor+1
 10082  02DC  084C               	movf	PROTOCOL_Print_TLV@v+1,w
 10083  02DD  00A3               	movwf	___awdiv@dividend+1
 10084  02DE  084B               	movf	PROTOCOL_Print_TLV@v,w
 10085  02DF  00A2               	movwf	___awdiv@dividend
 10086  02E0  3188  20E5  3180   	fcall	___awdiv
 10087  02E3  0020               	movlb	0	; select bank0
 10088  02E4  0821               	movf	?___awdiv+1,w
 10089  02E5  00B1               	movwf	?_printf+3
 10090  02E6  0820               	movf	?___awdiv,w
 10091  02E7  00B0               	movwf	?_printf+2
 10092  02E8  3064               	movlw	100
 10093  02E9  00A0               	movwf	___awmod@divisor
 10094  02EA  3000               	movlw	0
 10095  02EB  00A1               	movwf	___awmod@divisor+1
 10096  02EC  084C               	movf	PROTOCOL_Print_TLV@v+1,w
 10097  02ED  00A3               	movwf	___awmod@dividend+1
 10098  02EE  084B               	movf	PROTOCOL_Print_TLV@v,w
 10099  02EF  00A2               	movwf	___awmod@dividend
 10100  02F0  3196  2641  3180   	fcall	___awmod
 10101  02F3  0020               	movlb	0	; select bank0
 10102  02F4  0821               	movf	?___awmod+1,w
 10103  02F5  00A8               	movwf	abs@a+1
 10104  02F6  0820               	movf	?___awmod,w
 10105  02F7  00A7               	movwf	abs@a
 10106  02F8  3192  2254  3180   	fcall	_abs
 10107  02FB  0020               	movlb	0	; select bank0
 10108  02FC  0828               	movf	?_abs+1,w
 10109  02FD  00B3               	movwf	?_printf+5
 10110  02FE  0827               	movf	?_abs,w
 10111  02FF  00B2               	movwf	?_printf+4
 10112  0300  3185  251C         	fcall	_printf
 10113                           
 10114                           ;protocol.c: 268: }
 10115                           ;protocol.c: 269: break;
 10116  0302  0008               	return
 10117  0303                     l5202:	
 10118                           ;protocol.c: 270: case 0x06:
 10119                           
 10120                           
 10121                           ;protocol.c: 271: printf("NO_DATA\n");
 10122  0303  3024               	movlw	low (STR_67| (0+32768))
 10123  0304  0020               	movlb	0	; select bank0
 10124  0305  00AE               	movwf	printf@f
 10125  0306  3091               	movlw	high (STR_67| (0+32768))
 10126  0307  00AF               	movwf	printf@f+1
 10127  0308  3185  251C         	fcall	_printf
 10128                           
 10129                           ;protocol.c: 272: break;
 10130  030A  0008               	return
 10131  030B                     l5204:	
 10132                           ;protocol.c: 273: default:
 10133                           
 10134                           
 10135                           ;protocol.c: 274: printf("ILLEGAL_TYPE\n");
 10136  030B  30AF               	movlw	low (STR_68| (0+32768))
 10137  030C  0020               	movlb	0	; select bank0
 10138  030D  00AE               	movwf	printf@f
 10139  030E  3090               	movlw	high (STR_68| (0+32768))
 10140  030F  00AF               	movwf	printf@f+1
 10141  0310  3185  251C         	fcall	_printf
 10142                           
 10143                           ;protocol.c: 276: }
 10144                           
 10145                           ;protocol.c: 275: break;
 10146  0312  0008               	return
 10147  0313                     l5208:	
 10148  0313  0020               	movlb	0	; select bank0
 10149  0314  0844               	movf	PROTOCOL_Print_TLV@type,w
 10150                           
 10151                           ; Switch size 1, requested type "space"
 10152                           ; Number of cases is 6, Range of values is 1 to 6
 10153                           ; switch strategies available:
 10154                           ; Name         Instructions Cycles
 10155                           ; simple_byte           19    10 (average)
 10156                           ; direct_byte           21     9 (fixed)
 10157                           ; jumptable            263     9 (fixed)
 10158                           ;	Chosen strategy is simple_byte
 10159  0315  3A01               	xorlw	1	; case 1
 10160  0316  1903               	skipnz
 10161  0317  28C4               	goto	l5116
 10162  0318  3A03               	xorlw	3	; case 2
 10163  0319  1903               	skipnz
 10164  031A  2904               	goto	l5130
 10165  031B  3A01               	xorlw	1	; case 3
 10166  031C  1903               	skipnz
 10167  031D  2940               	goto	l5144
 10168  031E  3A07               	xorlw	7	; case 4
 10169  031F  1903               	skipnz
 10170  0320  29A0               	goto	l5158
 10171  0321  3A01               	xorlw	1	; case 5
 10172  0322  1903               	skipnz
 10173  0323  2A00               	goto	l5172
 10174  0324  3A03               	xorlw	3	; case 6
 10175  0325  1903               	skipnz
 10176  0326  2B03               	goto	l5202
 10177  0327  2B0B               	goto	l5204
 10178  0328  0008               	return
 10179  0329                     __end_of_PROTOCOL_Print_TLV:	
 10180                           
 10181                           	psect	text45
 10182  051C                     __ptext45:	
 10183 ;; *************** function _printf *****************
 10184 ;; Defined at:
 10185 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
 10186 ;; Parameters:    Size  Location     Type
 10187 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 10188 ;;		 -> STR_80(10), STR_79(9), STR_78(10), STR_77(9), 
 10189 ;;		 -> STR_76(4), STR_75(4), STR_74(4), STR_73(4), 
 10190 ;;		 -> STR_72(4), STR_71(4), STR_70(4), STR_69(4), 
 10191 ;;		 -> STR_68(14), STR_67(9), STR_66(10), STR_65(9), 
 10192 ;;		 -> STR_64(10), STR_63(9), STR_62(7), STR_61(4), 
 10193 ;;		 -> STR_60(4), STR_59(9), STR_58(4), STR_57(4), 
 10194 ;;		 -> STR_56(10), STR_55(4), STR_54(4), STR_53(8), 
 10195 ;;		 -> STR_52(4), STR_51(4), STR_50(9), STR_49(6), 
 10196 ;;		 -> STR_48(10), STR_45(10), STR_41(10), STR_37(10), 
 10197 ;;		 -> STR_35(5), STR_30(4), STR_29(4), STR_28(4), 
 10198 ;;		 -> STR_27(7), STR_25(26), STR_23(26), STR_19(22), 
 10199 ;;		 -> STR_18(22), STR_17(26), STR_16(22), STR_15(4), 
 10200 ;;		 -> STR_14(4), STR_13(7), STR_12(25), STR_11(10), 
 10201 ;;		 -> STR_8(12), STR_7(11), STR_3(3), STR_2(10), 
 10202 ;; Auto vars:     Size  Location     Type
 10203 ;;  tmpval          4    0        struct .
 10204 ;;  width           2   33[BANK0 ] int 
 10205 ;;  len             2   30[BANK0 ] unsigned int 
 10206 ;;  val             2   28[BANK0 ] unsigned int 
 10207 ;;  cp              2   25[BANK0 ] PTR const unsigned char 
 10208 ;;		 -> STR_42(4), buf(48), STR_34(7), ROM(8192), 
 10209 ;;		 -> printf@c(1), STR_33(17), I2C1_ISR@i2c_address(2), 
 10210 ;;  c               1   35[BANK0 ] char 
 10211 ;;  flag            1   32[BANK0 ] unsigned char 
 10212 ;;  ap              1   27[BANK0 ] PTR void [1]
 10213 ;;		 -> ?_printf(2), 
 10214 ;;  prec            1   24[BANK0 ] char 
 10215 ;; Return value:  Size  Location     Type
 10216 ;;                  2   14[BANK0 ] int 
 10217 ;; Registers used:
 10218 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10219 ;; Tracked objects:
 10220 ;;		On entry : 0/0
 10221 ;;		On exit  : 0/0
 10222 ;;		Unchanged: 0/0
 10223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10224 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10225 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10226 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10227 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10228 ;;Total ram usage:       22 bytes
 10229 ;; Hardware stack levels used:    1
 10230 ;; Hardware stack levels required when called:    5
 10231 ;; This function calls:
 10232 ;;		___lwdiv
 10233 ;;		___lwmod
 10234 ;;		___wmul
 10235 ;;		_isdigit
 10236 ;;		_putch
 10237 ;; This function is called by:
 10238 ;;		_exec_remote_cmd
 10239 ;;		_print_dev_map
 10240 ;;		_one_shot_sen
 10241 ;;		_fetch
 10242 ;;		_command_handler
 10243 ;;		_PROTOCOL_Loop
 10244 ;;		_PROTOCOL_Print_TLV
 10245 ;; This function uses a non-reentrant model
 10246 ;;
 10247                           
 10248                           
 10249                           ;psect for function _printf
 10250  051C                     _printf:	
 10251                           
 10252                           ;doprnt.c: 466: va_list ap;
 10253                           ;doprnt.c: 499: signed char c;
 10254                           ;doprnt.c: 501: int width;
 10255                           ;doprnt.c: 506: signed char prec;
 10256                           ;doprnt.c: 508: unsigned char flag;
 10257                           ;doprnt.c: 523: union {
 10258                           ;doprnt.c: 524: unsigned long vd;
 10259                           ;doprnt.c: 525: double integ;
 10260                           ;doprnt.c: 526: } tmpval;
 10261                           ;doprnt.c: 528: unsigned int val;
 10262                           ;doprnt.c: 529: unsigned len;
 10263                           ;doprnt.c: 530: const char * cp;
 10264                           ;doprnt.c: 533: *ap = __va_start();
 10265                           
 10266                           ;incstack = 0
 10267                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10268  051C  3030               	movlw	(low ((?_printf| 0+2)))& (0+255)
 10269  051D  0020               	movlb	0	; select bank0
 10270  051E  00B4               	movwf	??_printf
 10271  051F  0834               	movf	??_printf,w
 10272  0520  00BB               	movwf	printf@ap
 10273  0521                     l4974:	
 10274                           ;doprnt.c: 536: while(c = *f++) {
 10275                           
 10276  0521  0020               	movlb	0	; select bank0
 10277  0522  082F               	movf	printf@f+1,w
 10278  0523  00B5               	movwf	??_printf+1
 10279  0524  082E               	movf	printf@f,w
 10280  0525  00B4               	movwf	??_printf
 10281  0526  0AAE               	incf	printf@f,f
 10282  0527  1903               	skipnz
 10283  0528  0AAF               	incf	printf@f+1,f
 10284  0529  0834               	movf	??_printf,w
 10285  052A  0084               	movwf	4
 10286  052B  0835               	movf	??_printf+1,w
 10287  052C  0085               	movwf	5
 10288  052D  0800               	movf	0,w	;code access
 10289  052E  00B6               	movwf	??_printf+2
 10290  052F  0836               	movf	??_printf+2,w
 10291  0530  00C3               	movwf	printf@c
 10292  0531  0843               	movf	printf@c,w
 10293  0532  1903               	btfsc	3,2
 10294  0533  0008               	return
 10295                           
 10296                           ;doprnt.c: 538: if(c != '%')
 10297  0534  3025               	movlw	37
 10298  0535  0643               	xorwf	printf@c,w
 10299  0536  1903               	btfsc	3,2
 10300  0537  2D3D               	goto	l4850
 10301                           
 10302                           ;doprnt.c: 540: {
 10303                           ;doprnt.c: 541: (putch(c) );
 10304  0538  0843               	movf	printf@c,w
 10305  0539  3191  21F0  3185   	fcall	_putch
 10306                           
 10307                           ;doprnt.c: 542: continue;
 10308  053C  2D21               	goto	l4974
 10309  053D                     l4850:	
 10310                           
 10311                           ;doprnt.c: 543: }
 10312                           ;doprnt.c: 546: width = 0;
 10313  053D  0020               	movlb	0	; select bank0
 10314  053E  01C1               	clrf	printf@width
 10315  053F  01C2               	clrf	printf@width+1
 10316                           
 10317                           ;doprnt.c: 548: flag = 0;
 10318  0540  01C0               	clrf	printf@flag
 10319                           
 10320                           ;doprnt.c: 551: switch(*f) {
 10321                           
 10322                           ;doprnt.c: 550: for(;;) {
 10323  0541  2D47               	goto	l4856
 10324  0542                     l661:	
 10325                           ;doprnt.c: 579: case '0':
 10326                           
 10327                           
 10328                           ;doprnt.c: 580: flag |= 0x04;
 10329  0542  1540               	bsf	printf@flag,2
 10330                           
 10331                           ;doprnt.c: 581: f++;
 10332  0543  3001               	movlw	1
 10333  0544  07AE               	addwf	printf@f,f
 10334  0545  3000               	movlw	0
 10335  0546  3DAF               	addwfc	printf@f+1,f
 10336  0547                     l4856:	
 10337                           ;doprnt.c: 584: }
 10338                           
 10339                           ;doprnt.c: 582: continue;
 10340                           
 10341  0547  082E               	movf	printf@f,w
 10342  0548  0084               	movwf	4
 10343  0549  082F               	movf	printf@f+1,w
 10344  054A  0085               	movwf	5
 10345  054B  0800               	movf	0,w	;code access
 10346                           
 10347                           ; Switch size 1, requested type "space"
 10348                           ; Number of cases is 1, Range of values is 48 to 48
 10349                           ; switch strategies available:
 10350                           ; Name         Instructions Cycles
 10351                           ; simple_byte            4     3 (average)
 10352                           ; direct_byte           11     9 (fixed)
 10353                           ; jumptable            263     9 (fixed)
 10354                           ;	Chosen strategy is simple_byte
 10355  054C  3A30               	xorlw	48	; case 48
 10356  054D  1903               	skipnz
 10357  054E  2D42               	goto	l661
 10358  054F  2D50               	goto	l4858
 10359  0550                     l4858:	
 10360                           ;doprnt.c: 586: }
 10361                           
 10362                           ;doprnt.c: 585: break;
 10363                           
 10364                           
 10365                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 10366  0550  082E               	movf	printf@f,w
 10367  0551  0084               	movwf	4
 10368  0552  082F               	movf	printf@f+1,w
 10369  0553  0085               	movwf	5
 10370  0554  0800               	movf	0,w	;code access
 10371  0555  3192  2245  3185   	fcall	_isdigit
 10372  0558  1C03               	btfss	3,0
 10373  0559  2DF1               	goto	l4906
 10374                           
 10375                           ;doprnt.c: 598: width = 0;
 10376  055A  0020               	movlb	0	; select bank0
 10377  055B  01C1               	clrf	printf@width
 10378  055C  01C2               	clrf	printf@width+1
 10379  055D                     l4862:	
 10380                           ;doprnt.c: 599: do {
 10381                           
 10382                           
 10383                           ;doprnt.c: 600: width *= 10;
 10384  055D  300A               	movlw	10
 10385  055E  0020               	movlb	0	; select bank0
 10386  055F  00A0               	movwf	___wmul@multiplier
 10387  0560  3000               	movlw	0
 10388  0561  00A1               	movwf	___wmul@multiplier+1
 10389  0562  0842               	movf	printf@width+1,w
 10390  0563  00A3               	movwf	___wmul@multiplicand+1
 10391  0564  0841               	movf	printf@width,w
 10392  0565  00A2               	movwf	___wmul@multiplicand
 10393  0566  3193  2357  3185   	fcall	___wmul
 10394  0569  0020               	movlb	0	; select bank0
 10395  056A  0821               	movf	?___wmul+1,w
 10396  056B  00C2               	movwf	printf@width+1
 10397  056C  0820               	movf	?___wmul,w
 10398  056D  00C1               	movwf	printf@width
 10399                           
 10400                           ;doprnt.c: 601: width += *f++ - '0';
 10401  056E  082E               	movf	printf@f,w
 10402  056F  0084               	movwf	4
 10403  0570  082F               	movf	printf@f+1,w
 10404  0571  0085               	movwf	5
 10405  0572  0800               	movf	0,w	;code access
 10406  0573  3ED0               	addlw	208
 10407  0574  00B4               	movwf	??_printf
 10408  0575  30FF               	movlw	255
 10409  0576  1803               	skipnc
 10410  0577  3000               	movlw	0
 10411  0578  00B5               	movwf	??_printf+1
 10412  0579  0834               	movf	??_printf,w
 10413  057A  07C1               	addwf	printf@width,f
 10414  057B  0835               	movf	??_printf+1,w
 10415  057C  3DC2               	addwfc	printf@width+1,f
 10416  057D  3001               	movlw	1
 10417  057E  07AE               	addwf	printf@f,f
 10418  057F  3000               	movlw	0
 10419  0580  3DAF               	addwfc	printf@f+1,f
 10420                           
 10421                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 10422  0581  082E               	movf	printf@f,w
 10423  0582  0084               	movwf	4
 10424  0583  082F               	movf	printf@f+1,w
 10425  0584  0085               	movwf	5
 10426  0585  0800               	movf	0,w	;code access
 10427  0586  3192  2245  3185   	fcall	_isdigit
 10428  0589  1C03               	btfss	3,0
 10429  058A  2DF1               	goto	l4906
 10430  058B  2D5D               	goto	l4862
 10431  058C                     l4870:	
 10432                           ;doprnt.c: 728: case 's':
 10433                           
 10434                           ;doprnt.c: 698: case 'i':
 10435                           ;doprnt.c: 699: break;
 10436                           
 10437                           ;doprnt.c: 697: case 'd':
 10438                           
 10439                           ;doprnt.c: 638: goto alldone;
 10440                           
 10441                           ;doprnt.c: 637: case 0:
 10442                           
 10443                           ;doprnt.c: 608: }
 10444                           ;doprnt.c: 635: switch(c = *f++) {
 10445                           
 10446                           
 10447                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 10448  058C  0020               	movlb	0	; select bank0
 10449  058D  083B               	movf	printf@ap,w
 10450  058E  0086               	movwf	6
 10451  058F  0187               	clrf	7
 10452  0590  3F40               	moviw [0]fsr1
 10453  0591  00B9               	movwf	printf@cp
 10454  0592  3F41               	moviw [1]fsr1
 10455  0593  00BA               	movwf	printf@cp+1
 10456  0594  3002               	movlw	2
 10457  0595  00B4               	movwf	??_printf
 10458  0596  0834               	movf	??_printf,w
 10459  0597  07BB               	addwf	printf@ap,f
 10460                           
 10461                           ;doprnt.c: 740: if(!cp)
 10462  0598  0839               	movf	printf@cp,w
 10463  0599  043A               	iorwf	printf@cp+1,w
 10464  059A  1D03               	btfss	3,2
 10465  059B  2DA0               	goto	l4878
 10466                           
 10467                           ;doprnt.c: 741: cp = "(null)";
 10468  059C  303D               	movlw	low (STR_34| (0+32768))
 10469  059D  00B9               	movwf	printf@cp
 10470  059E  3091               	movlw	high (STR_34| (0+32768))
 10471  059F  00BA               	movwf	printf@cp+1
 10472  05A0                     l4878:	
 10473                           
 10474                           ;doprnt.c: 745: len = 0;
 10475  05A0  01BE               	clrf	printf@len
 10476  05A1  01BF               	clrf	printf@len+1
 10477  05A2                     l4882:	
 10478                           ;doprnt.c: 746: while(cp[len])
 10479                           
 10480  05A2  0839               	movf	printf@cp,w
 10481  05A3  073E               	addwf	printf@len,w
 10482  05A4  0084               	movwf	4
 10483  05A5  083A               	movf	printf@cp+1,w
 10484  05A6  3D3F               	addwfc	printf@len+1,w
 10485  05A7  0085               	movwf	5
 10486  05A8  0012               	moviw fsr0++
 10487  05A9  1903               	btfsc	3,2
 10488  05AA  2DB0               	goto	l4884
 10489                           
 10490                           ;doprnt.c: 747: len++;
 10491  05AB  3001               	movlw	1
 10492  05AC  07BE               	addwf	printf@len,f
 10493  05AD  3000               	movlw	0
 10494  05AE  3DBF               	addwfc	printf@len+1,f
 10495  05AF  2DA2               	goto	l4882
 10496  05B0                     l4884:	
 10497                           ;doprnt.c: 750: dostring:
 10498                           
 10499                           
 10500                           ;doprnt.c: 757: if(width > len)
 10501  05B0  0842               	movf	printf@width+1,w
 10502  05B1  023F               	subwf	printf@len+1,w
 10503  05B2  1D03               	skipz
 10504  05B3  2DB6               	goto	u5295
 10505  05B4  0841               	movf	printf@width,w
 10506  05B5  023E               	subwf	printf@len,w
 10507  05B6                     u5295:	
 10508  05B6  1803               	skipnc
 10509  05B7  2DBD               	goto	l4888
 10510                           
 10511                           ;doprnt.c: 758: width -= len;
 10512  05B8  083E               	movf	printf@len,w
 10513  05B9  02C1               	subwf	printf@width,f
 10514  05BA  083F               	movf	printf@len+1,w
 10515  05BB  3BC2               	subwfb	printf@width+1,f
 10516  05BC  2DBF               	goto	l4892
 10517  05BD                     l4888:	
 10518                           
 10519                           ;doprnt.c: 759: else
 10520                           ;doprnt.c: 760: width = 0;
 10521  05BD  01C1               	clrf	printf@width
 10522  05BE  01C2               	clrf	printf@width+1
 10523  05BF                     l4892:	
 10524                           ;doprnt.c: 764: while(width--)
 10525                           
 10526  05BF  30FF               	movlw	255
 10527  05C0  0020               	movlb	0	; select bank0
 10528  05C1  07C1               	addwf	printf@width,f
 10529  05C2  30FF               	movlw	255
 10530  05C3  3DC2               	addwfc	printf@width+1,f
 10531  05C4  0A41               	incf	printf@width,w
 10532  05C5  1903               	btfsc	3,2
 10533  05C6  0A42               	incf	printf@width+1,w
 10534  05C7  1903               	btfsc	3,2
 10535  05C8  2DDB               	goto	l4898
 10536                           
 10537                           ;doprnt.c: 765: (putch(' ') );
 10538  05C9  3020               	movlw	32
 10539  05CA  3191  21F0  3185   	fcall	_putch
 10540  05CD  2DBF               	goto	l4892
 10541  05CE                     l4894:	
 10542                           ;doprnt.c: 767: while(len--)
 10543                           
 10544                           
 10545                           ;doprnt.c: 768: (putch(*cp++) );
 10546  05CE  0839               	movf	printf@cp,w
 10547  05CF  0084               	movwf	4
 10548  05D0  083A               	movf	printf@cp+1,w
 10549  05D1  0085               	movwf	5
 10550  05D2  0800               	movf	0,w	;code access
 10551  05D3  3191  21F0  3185   	fcall	_putch
 10552  05D6  3001               	movlw	1
 10553  05D7  0020               	movlb	0	; select bank0
 10554  05D8  07B9               	addwf	printf@cp,f
 10555  05D9  3000               	movlw	0
 10556  05DA  3DBA               	addwfc	printf@cp+1,f
 10557  05DB                     l4898:	
 10558  05DB  3001               	movlw	1
 10559  05DC  02BE               	subwf	printf@len,f
 10560  05DD  3000               	movlw	0
 10561  05DE  3BBF               	subwfb	printf@len+1,f
 10562  05DF  0A3E               	incf	printf@len,w
 10563  05E0  1D03               	skipz
 10564  05E1  2DCE               	goto	l4894
 10565  05E2  0A3F               	incf	printf@len+1,w
 10566  05E3  1903               	btfsc	3,2
 10567  05E4  2D21               	goto	l4974
 10568  05E5  2DCE               	goto	l4894
 10569  05E6                     l4900:	
 10570                           ;doprnt.c: 802: default:
 10571                           
 10572                           ;doprnt.c: 774: continue;
 10573                           
 10574                           
 10575                           ;doprnt.c: 805: cp = (char *)&c;
 10576  05E6  3043               	movlw	low printf@c
 10577  05E7  00B9               	movwf	printf@cp
 10578  05E8  3000               	movlw	high printf@c
 10579  05E9  00BA               	movwf	printf@cp+1
 10580                           
 10581                           ;doprnt.c: 806: len = 1;
 10582  05EA  3001               	movlw	1
 10583  05EB  00BE               	movwf	printf@len
 10584  05EC  3000               	movlw	0
 10585  05ED  00BF               	movwf	printf@len+1
 10586                           
 10587                           ;doprnt.c: 807: goto dostring;
 10588  05EE  2DB0               	goto	l4884
 10589  05EF                     l689:	
 10590                           ;doprnt.c: 817: case 'u':
 10591                           
 10592                           
 10593                           ;doprnt.c: 818: flag |= 0x40;
 10594  05EF  1740               	bsf	printf@flag,6
 10595                           
 10596                           ;doprnt.c: 822: }
 10597                           
 10598                           ;doprnt.c: 819: break;
 10599  05F0  2E0F               	goto	l673
 10600  05F1                     l4906:	
 10601  05F1  0020               	movlb	0	; select bank0
 10602  05F2  082F               	movf	printf@f+1,w
 10603  05F3  00B5               	movwf	??_printf+1
 10604  05F4  082E               	movf	printf@f,w
 10605  05F5  00B4               	movwf	??_printf
 10606  05F6  0AAE               	incf	printf@f,f
 10607  05F7  1903               	skipnz
 10608  05F8  0AAF               	incf	printf@f+1,f
 10609  05F9  0834               	movf	??_printf,w
 10610  05FA  0084               	movwf	4
 10611  05FB  0835               	movf	??_printf+1,w
 10612  05FC  0085               	movwf	5
 10613  05FD  0800               	movf	0,w	;code access
 10614  05FE  00C3               	movwf	printf@c
 10615                           
 10616                           ; Switch size 1, requested type "space"
 10617                           ; Number of cases is 5, Range of values is 0 to 117
 10618                           ; switch strategies available:
 10619                           ; Name         Instructions Cycles
 10620                           ; simple_byte           16     9 (average)
 10621                           ; direct_byte          242     6 (fixed)
 10622                           ; jumptable            260     6 (fixed)
 10623                           ;	Chosen strategy is simple_byte
 10624  05FF  3A00               	xorlw	0	; case 0
 10625  0600  1903               	skipnz
 10626  0601  2EF0               	goto	l713
 10627  0602  3A64               	xorlw	100	; case 100
 10628  0603  1903               	skipnz
 10629  0604  2E0F               	goto	l673
 10630  0605  3A0D               	xorlw	13	; case 105
 10631  0606  1903               	skipnz
 10632  0607  2E0F               	goto	l673
 10633  0608  3A1A               	xorlw	26	; case 115
 10634  0609  1903               	skipnz
 10635  060A  2D8C               	goto	l4870
 10636  060B  3A06               	xorlw	6	; case 117
 10637  060C  1903               	skipnz
 10638  060D  2DEF               	goto	l689
 10639  060E  2DE6               	goto	l4900
 10640  060F                     l673:	
 10641                           
 10642                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 10643  060F  0020               	movlb	0	; select bank0
 10644  0610  1B40               	btfsc	printf@flag,6
 10645  0611  2E29               	goto	l4918
 10646                           
 10647                           ;doprnt.c: 1253: {
 10648                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 10649  0612  083B               	movf	printf@ap,w
 10650  0613  0086               	movwf	6
 10651  0614  0187               	clrf	7
 10652  0615  3F40               	moviw [0]fsr1
 10653  0616  00BC               	movwf	printf@val
 10654  0617  3F41               	moviw [1]fsr1
 10655  0618  00BD               	movwf	printf@val+1
 10656  0619  3002               	movlw	2
 10657  061A  00B4               	movwf	??_printf
 10658  061B  0834               	movf	??_printf,w
 10659  061C  07BB               	addwf	printf@ap,f
 10660                           
 10661                           ;doprnt.c: 1261: if((int)val < 0) {
 10662  061D  1FBD               	btfss	printf@val+1,7
 10663  061E  2E34               	goto	l4922
 10664                           
 10665                           ;doprnt.c: 1262: flag |= 0x03;
 10666  061F  3003               	movlw	3
 10667  0620  00B4               	movwf	??_printf
 10668  0621  0834               	movf	??_printf,w
 10669  0622  04C0               	iorwf	printf@flag,f
 10670                           
 10671                           ;doprnt.c: 1263: val = -val;
 10672  0623  09BC               	comf	printf@val,f
 10673  0624  09BD               	comf	printf@val+1,f
 10674  0625  0ABC               	incf	printf@val,f
 10675  0626  1903               	skipnz
 10676  0627  0ABD               	incf	printf@val+1,f
 10677                           
 10678                           ;doprnt.c: 1264: }
 10679                           ;doprnt.c: 1266: }
 10680  0628  2E34               	goto	l4922
 10681  0629                     l4918:	
 10682                           
 10683                           ;doprnt.c: 1268: else
 10684                           ;doprnt.c: 1273: {
 10685                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 10686  0629  083B               	movf	printf@ap,w
 10687  062A  0086               	movwf	6
 10688  062B  0187               	clrf	7
 10689  062C  3F40               	moviw [0]fsr1
 10690  062D  00BC               	movwf	printf@val
 10691  062E  3F41               	moviw [1]fsr1
 10692  062F  00BD               	movwf	printf@val+1
 10693  0630  3002               	movlw	2
 10694  0631  00B4               	movwf	??_printf
 10695  0632  0834               	movf	??_printf,w
 10696  0633  07BB               	addwf	printf@ap,f
 10697  0634                     l4922:	
 10698                           
 10699                           ;doprnt.c: 1287: }
 10700                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 10701  0634  01C3               	clrf	printf@c
 10702  0635  0AC3               	incf	printf@c,f
 10703  0636  3005               	movlw	5
 10704  0637  0643               	xorwf	printf@c,w
 10705  0638  1903               	btfsc	3,2
 10706  0639  2E59               	goto	l4934
 10707  063A                     l4928:	
 10708                           
 10709                           ;doprnt.c: 1306: if(val < dpowers[c])
 10710  063A  0843               	movf	printf@c,w
 10711  063B  00B4               	movwf	??_printf
 10712  063C  01B5               	clrf	??_printf+1
 10713  063D  35B4               	lslf	??_printf,f
 10714  063E  0DB5               	rlf	??_printf+1,f
 10715  063F  3000               	movlw	low (_dpowers| (0+32768))
 10716  0640  0734               	addwf	??_printf,w
 10717  0641  0084               	movwf	4
 10718  0642  3090               	movlw	high (_dpowers| (0+32768))
 10719  0643  3D35               	addwfc	??_printf+1,w
 10720  0644  0085               	movwf	5
 10721  0645  3F00               	moviw [0]fsr0
 10722  0646  00B6               	movwf	??_printf+2
 10723  0647  3F01               	moviw [1]fsr0
 10724  0648  00B7               	movwf	??_printf+3
 10725  0649  0837               	movf	??_printf+3,w
 10726  064A  023D               	subwf	printf@val+1,w
 10727  064B  1D03               	skipz
 10728  064C  2E4F               	goto	u5355
 10729  064D  0836               	movf	??_printf+2,w
 10730  064E  023C               	subwf	printf@val,w
 10731  064F                     u5355:	
 10732  064F  1C03               	btfss	3,0
 10733  0650  2E59               	goto	l4934
 10734                           
 10735                           ;doprnt.c: 1307: break;
 10736  0651  3001               	movlw	1
 10737  0652  00B4               	movwf	??_printf
 10738  0653  0834               	movf	??_printf,w
 10739  0654  07C3               	addwf	printf@c,f
 10740  0655  3005               	movlw	5
 10741  0656  0643               	xorwf	printf@c,w
 10742  0657  1D03               	btfss	3,2
 10743  0658  2E3A               	goto	l4928
 10744  0659                     l4934:	
 10745                           
 10746                           ;doprnt.c: 1345: if(width && flag & 0x03)
 10747  0659  0841               	movf	printf@width,w
 10748  065A  0442               	iorwf	printf@width+1,w
 10749  065B  1903               	btfsc	3,2
 10750  065C  2E65               	goto	l696
 10751  065D  0840               	movf	printf@flag,w
 10752  065E  3903               	andlw	3
 10753  065F  1903               	btfsc	3,2
 10754  0660  2E65               	goto	l696
 10755                           
 10756                           ;doprnt.c: 1346: width--;
 10757  0661  30FF               	movlw	255
 10758  0662  07C1               	addwf	printf@width,f
 10759  0663  30FF               	movlw	255
 10760  0664  3DC2               	addwfc	printf@width+1,f
 10761  0665                     l696:	
 10762                           
 10763                           ;doprnt.c: 1381: if(width > c)
 10764  0665  0843               	movf	printf@c,w
 10765  0666  00B4               	movwf	??_printf
 10766  0667  01B5               	clrf	??_printf+1
 10767  0668  1BB4               	btfsc	??_printf,7
 10768  0669  03B5               	decf	??_printf+1,f
 10769  066A  0835               	movf	??_printf+1,w
 10770  066B  3A80               	xorlw	128
 10771  066C  00B6               	movwf	??_printf+2
 10772  066D  0842               	movf	printf@width+1,w
 10773  066E  3A80               	xorlw	128
 10774  066F  0236               	subwf	??_printf+2,w
 10775  0670  1D03               	skipz
 10776  0671  2E74               	goto	u5395
 10777  0672  0841               	movf	printf@width,w
 10778  0673  0234               	subwf	??_printf,w
 10779  0674                     u5395:	
 10780  0674  1803               	skipnc
 10781  0675  2E81               	goto	l4942
 10782                           
 10783                           ;doprnt.c: 1382: width -= c;
 10784  0676  0020               	movlb	0	; select bank0
 10785  0677  0843               	movf	printf@c,w
 10786  0678  00B4               	movwf	??_printf
 10787  0679  01B5               	clrf	??_printf+1
 10788  067A  1BB4               	btfsc	??_printf,7
 10789  067B  03B5               	decf	??_printf+1,f
 10790  067C  0834               	movf	??_printf,w
 10791  067D  02C1               	subwf	printf@width,f
 10792  067E  0835               	movf	??_printf+1,w
 10793  067F  3BC2               	subwfb	printf@width+1,f
 10794  0680  2E84               	goto	l4944
 10795  0681                     l4942:	
 10796                           
 10797                           ;doprnt.c: 1383: else
 10798                           ;doprnt.c: 1384: width = 0;
 10799  0681  0020               	movlb	0	; select bank0
 10800  0682  01C1               	clrf	printf@width
 10801  0683  01C2               	clrf	printf@width+1
 10802  0684                     l4944:	
 10803                           
 10804                           ;doprnt.c: 1387: if(flag & 0x04) {
 10805  0684  1D40               	btfss	printf@flag,2
 10806  0685  2E9D               	goto	l4956
 10807                           
 10808                           ;doprnt.c: 1392: if(flag & 0x03)
 10809  0686  0840               	movf	printf@flag,w
 10810  0687  3903               	andlw	3
 10811  0688  1903               	btfsc	3,2
 10812  0689  2E8E               	goto	l4950
 10813                           
 10814                           ;doprnt.c: 1393: (putch('-') );
 10815  068A  302D               	movlw	45
 10816  068B  3191  21F0  3185   	fcall	_putch
 10817  068E                     l4950:	
 10818                           
 10819                           ;doprnt.c: 1415: if(width)
 10820  068E  0020               	movlb	0	; select bank0
 10821  068F                     L14:	
 10822  068F  0841               	movf	printf@width,w
 10823  0690  0442               	iorwf	printf@width+1,w
 10824  0691  1903               	btfsc	3,2
 10825  0692  2EB6               	goto	l4966
 10826                           
 10827                           ;doprnt.c: 1417: (putch('0') );
 10828                           
 10829                           ;doprnt.c: 1416: do
 10830  0693  3030               	movlw	48
 10831  0694  3191  21F0  3185   	fcall	_putch
 10832                           
 10833                           ;doprnt.c: 1418: while(--width);
 10834  0697  30FF               	movlw	255
 10835  0698  0020               	movlb	0	; select bank0
 10836  0699  07C1               	addwf	printf@width,f
 10837  069A  30FF               	movlw	255
 10838  069B  3DC2               	addwfc	printf@width+1,f
 10839  069C  2E8F               	goto	L14
 10840  069D                     l4956:	
 10841                           ;doprnt.c: 1420: } else
 10842                           
 10843                           
 10844                           ;doprnt.c: 1422: {
 10845                           ;doprnt.c: 1424: if(width
 10846                           ;doprnt.c: 1428: )
 10847  069D  0841               	movf	printf@width,w
 10848  069E  0442               	iorwf	printf@width+1,w
 10849  069F  1903               	btfsc	3,2
 10850  06A0  2EAE               	goto	l4962
 10851  06A1                     l4958:	
 10852                           ;doprnt.c: 1429: do
 10853                           
 10854                           
 10855                           ;doprnt.c: 1430: (putch(' ') );
 10856  06A1  3020               	movlw	32
 10857  06A2  3191  21F0  3185   	fcall	_putch
 10858                           
 10859                           ;doprnt.c: 1431: while(--width);
 10860  06A5  30FF               	movlw	255
 10861  06A6  0020               	movlb	0	; select bank0
 10862  06A7  07C1               	addwf	printf@width,f
 10863  06A8  30FF               	movlw	255
 10864  06A9  3DC2               	addwfc	printf@width+1,f
 10865  06AA  0841               	movf	printf@width,w
 10866  06AB  0442               	iorwf	printf@width+1,w
 10867  06AC  1D03               	btfss	3,2
 10868  06AD  2EA1               	goto	l4958
 10869  06AE                     l4962:	
 10870                           
 10871                           ;doprnt.c: 1438: if(flag & 0x03)
 10872  06AE  0840               	movf	printf@flag,w
 10873  06AF  3903               	andlw	3
 10874  06B0  1903               	btfsc	3,2
 10875  06B1  2EB6               	goto	l4966
 10876                           
 10877                           ;doprnt.c: 1439: (putch('-') );
 10878  06B2  302D               	movlw	45
 10879  06B3  3191  21F0  3185   	fcall	_putch
 10880  06B6                     l4966:	
 10881                           
 10882                           ;doprnt.c: 1469: }
 10883                           ;doprnt.c: 1472: prec = c;
 10884  06B6  0020               	movlb	0	; select bank0
 10885  06B7  0843               	movf	printf@c,w
 10886  06B8  00B4               	movwf	??_printf
 10887  06B9  0834               	movf	??_printf,w
 10888  06BA  00B8               	movwf	printf@prec
 10889  06BB                     l4972:	
 10890                           ;doprnt.c: 1474: while(prec--) {
 10891                           
 10892  06BB  30FF               	movlw	255
 10893  06BC  0020               	movlb	0	; select bank0
 10894  06BD  00B4               	movwf	??_printf
 10895  06BE  0834               	movf	??_printf,w
 10896  06BF  07B8               	addwf	printf@prec,f
 10897  06C0  0A38               	incf	printf@prec,w
 10898  06C1  1903               	btfsc	3,2
 10899  06C2  2D21               	goto	l4974
 10900                           
 10901                           ;doprnt.c: 1478: {
 10902                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 10903  06C3  300A               	movlw	10
 10904  06C4  00A8               	movwf	___lwmod@divisor
 10905  06C5  3000               	movlw	0
 10906  06C6  00A9               	movwf	___lwmod@divisor+1
 10907  06C7  0838               	movf	printf@prec,w
 10908  06C8  00B4               	movwf	??_printf
 10909  06C9  01B5               	clrf	??_printf+1
 10910  06CA  35B4               	lslf	??_printf,f
 10911  06CB  0DB5               	rlf	??_printf+1,f
 10912  06CC  3000               	movlw	low (_dpowers| (0+32768))
 10913  06CD  0734               	addwf	??_printf,w
 10914  06CE  0084               	movwf	4
 10915  06CF  3090               	movlw	high (_dpowers| (0+32768))
 10916  06D0  3D35               	addwfc	??_printf+1,w
 10917  06D1  0085               	movwf	5
 10918  06D2  3F00               	moviw [0]fsr0
 10919  06D3  00A0               	movwf	___lwdiv@divisor
 10920  06D4  3F01               	moviw [1]fsr0
 10921  06D5  00A1               	movwf	___lwdiv@divisor+1
 10922  06D6  083D               	movf	printf@val+1,w
 10923  06D7  00A3               	movwf	___lwdiv@dividend+1
 10924  06D8  083C               	movf	printf@val,w
 10925  06D9  00A2               	movwf	___lwdiv@dividend
 10926  06DA  3195  2593  3185   	fcall	___lwdiv
 10927  06DD  0020               	movlb	0	; select bank0
 10928  06DE  0821               	movf	?___lwdiv+1,w
 10929  06DF  00AB               	movwf	___lwmod@dividend+1
 10930  06E0  0820               	movf	?___lwdiv,w
 10931  06E1  00AA               	movwf	___lwmod@dividend
 10932  06E2  3195  250A  3185   	fcall	___lwmod
 10933  06E5  0020               	movlb	0	; select bank0
 10934  06E6  0828               	movf	?___lwmod,w
 10935  06E7  3E30               	addlw	48
 10936  06E8  00B6               	movwf	??_printf+2
 10937  06E9  0836               	movf	??_printf+2,w
 10938  06EA  00C3               	movwf	printf@c
 10939                           
 10940                           ;doprnt.c: 1523: }
 10941                           ;doprnt.c: 1524: (putch(c) );
 10942  06EB  0843               	movf	printf@c,w
 10943  06EC  3191  21F0  3185   	fcall	_putch
 10944  06EF  2EBB               	goto	l4972
 10945  06F0                     l713:	
 10946                           ;doprnt.c: 1540: return 0;
 10947                           ;	Return value of _printf is never used
 10948                           
 10949                           ;doprnt.c: 1525: }
 10950                           ;doprnt.c: 1533: }
 10951                           ;doprnt.c: 1535: alldone:
 10952                           
 10953  06F0  0008               	return
 10954  06F1                     __end_of_printf:	
 10955                           
 10956                           	psect	text46
 10957  11F0                     __ptext46:	
 10958 ;; *************** function _putch *****************
 10959 ;; Defined at:
 10960 ;;		line 160 in file "mcc_generated_files/eusart.c"
 10961 ;; Parameters:    Size  Location     Type
 10962 ;;  txData          1    wreg     unsigned char 
 10963 ;; Auto vars:     Size  Location     Type
 10964 ;;  txData          1    2[BANK0 ] unsigned char 
 10965 ;; Return value:  Size  Location     Type
 10966 ;;                  1    wreg      void 
 10967 ;; Registers used:
 10968 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10969 ;; Tracked objects:
 10970 ;;		On entry : 0/0
 10971 ;;		On exit  : 0/0
 10972 ;;		Unchanged: 0/0
 10973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10975 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10977 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10978 ;;Total ram usage:        1 bytes
 10979 ;; Hardware stack levels used:    1
 10980 ;; Hardware stack levels required when called:    4
 10981 ;; This function calls:
 10982 ;;		_EUSART_Write
 10983 ;; This function is called by:
 10984 ;;		_printf
 10985 ;; This function uses a non-reentrant model
 10986 ;;
 10987                           
 10988                           
 10989                           ;psect for function _putch
 10990  11F0                     _putch:	
 10991                           
 10992                           ;incstack = 0
 10993                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10994                           ;putch@txData stored from wreg
 10995  11F0  0020               	movlb	0	; select bank0
 10996  11F1  00A2               	movwf	putch@txData
 10997                           
 10998                           ;eusart.c: 162: EUSART_Write(txData);
 10999  11F2  0822               	movf	putch@txData,w
 11000  11F3  3194  2414         	fcall	_EUSART_Write
 11001  11F5  0008               	return
 11002  11F6                     __end_of_putch:	
 11003                           
 11004                           	psect	text47
 11005  1414                     __ptext47:	
 11006 ;; *************** function _EUSART_Write *****************
 11007 ;; Defined at:
 11008 ;;		line 132 in file "mcc_generated_files/eusart.c"
 11009 ;; Parameters:    Size  Location     Type
 11010 ;;  txData          1    wreg     unsigned char 
 11011 ;; Auto vars:     Size  Location     Type
 11012 ;;  txData          1    1[BANK0 ] unsigned char 
 11013 ;; Return value:  Size  Location     Type
 11014 ;;                  1    wreg      void 
 11015 ;; Registers used:
 11016 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11017 ;; Tracked objects:
 11018 ;;		On entry : 0/0
 11019 ;;		On exit  : 0/0
 11020 ;;		Unchanged: 0/0
 11021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11023 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11024 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11025 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11026 ;;Total ram usage:        2 bytes
 11027 ;; Hardware stack levels used:    1
 11028 ;; Hardware stack levels required when called:    3
 11029 ;; This function calls:
 11030 ;;		Nothing
 11031 ;; This function is called by:
 11032 ;;		_putch
 11033 ;; This function uses a non-reentrant model
 11034 ;;
 11035                           
 11036                           
 11037                           ;psect for function _EUSART_Write
 11038  1414                     _EUSART_Write:	
 11039                           
 11040                           ;incstack = 0
 11041                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
 11042                           ;EUSART_Write@txData stored from wreg
 11043  1414  0020               	movlb	0	; select bank0
 11044  1415  00A1               	movwf	EUSART_Write@txData
 11045  1416                     l4714:	
 11046                           ;eusart.c: 135: {
 11047                           
 11048                           ;eusart.c: 134: while(0 == eusartTxBufferRemaining)
 11049                           
 11050  1416  0874               	movf	_eusartTxBufferRemaining,w	;volatile
 11051  1417  1903               	btfsc	3,2
 11052  1418  2C16               	goto	l4714
 11053                           
 11054                           ;eusart.c: 136: }
 11055                           ;eusart.c: 138: if(0 == PIE1bits.TXIE)
 11056  1419  0021               	movlb	1	; select bank1
 11057  141A  1A11               	btfsc	17,4	;volatile
 11058  141B  2C21               	goto	l244
 11059                           
 11060                           ;eusart.c: 139: {
 11061                           ;eusart.c: 140: TXREG = txData;
 11062  141C  0020               	movlb	0	; select bank0
 11063  141D  0821               	movf	EUSART_Write@txData,w
 11064  141E  0023               	movlb	3	; select bank3
 11065  141F  009A               	movwf	26	;volatile
 11066                           
 11067                           ;eusart.c: 141: }
 11068  1420  2C36               	goto	l4728
 11069  1421                     l244:	
 11070                           
 11071                           ;eusart.c: 142: else
 11072                           ;eusart.c: 143: {
 11073                           ;eusart.c: 144: PIE1bits.TXIE = 0;
 11074  1421  1211               	bcf	17,4	;volatile
 11075                           
 11076                           ;eusart.c: 145: eusartTxBuffer[eusartTxHead++] = txData;
 11077  1422  0020               	movlb	0	; select bank0
 11078  1423  0821               	movf	EUSART_Write@txData,w
 11079  1424  00A0               	movwf	??_EUSART_Write
 11080  1425  0876               	movf	_eusartTxHead,w
 11081  1426  3EA0               	addlw	(low (_eusartTxBuffer| (0+512)))& (0+255)
 11082  1427  0086               	movwf	6
 11083  1428  3002               	movlw	2	; select bank5/6
 11084  1429  0087               	movwf	7
 11085  142A  0820               	movf	??_EUSART_Write,w
 11086  142B  0081               	movwf	1
 11087  142C  3001               	movlw	1
 11088  142D  00A0               	movwf	??_EUSART_Write
 11089  142E  0820               	movf	??_EUSART_Write,w
 11090  142F  07F6               	addwf	_eusartTxHead,f	;volatile
 11091                           
 11092                           ;eusart.c: 146: if(sizeof(eusartTxBuffer) <= eusartTxHead)
 11093  1430  3040               	movlw	64
 11094  1431  0276               	subwf	_eusartTxHead,w	;volatile
 11095  1432  1803               	btfsc	3,0
 11096                           
 11097                           ;eusart.c: 147: {
 11098                           ;eusart.c: 148: eusartTxHead = 0;
 11099  1433  01F6               	clrf	_eusartTxHead	;volatile
 11100                           
 11101                           ;eusart.c: 149: }
 11102                           ;eusart.c: 150: eusartTxBufferRemaining--;
 11103  1434  3001               	movlw	1
 11104  1435  02F4               	subwf	_eusartTxBufferRemaining,f	;volatile
 11105  1436                     l4728:	
 11106                           
 11107                           ;eusart.c: 151: }
 11108                           ;eusart.c: 152: PIE1bits.TXIE = 1;
 11109  1436  0021               	movlb	1	; select bank1
 11110  1437  1611               	bsf	17,4	;volatile
 11111  1438  0008               	return
 11112  1439                     __end_of_EUSART_Write:	
 11113                           
 11114                           	psect	text48
 11115  150A                     __ptext48:	
 11116 ;; *************** function ___lwmod *****************
 11117 ;; Defined at:
 11118 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
 11119 ;; Parameters:    Size  Location     Type
 11120 ;;  divisor         2    8[BANK0 ] unsigned int 
 11121 ;;  dividend        2   10[BANK0 ] unsigned int 
 11122 ;; Auto vars:     Size  Location     Type
 11123 ;;  counter         1   13[BANK0 ] unsigned char 
 11124 ;; Return value:  Size  Location     Type
 11125 ;;                  2    8[BANK0 ] unsigned int 
 11126 ;; Registers used:
 11127 ;;		wreg, status,2, status,0
 11128 ;; Tracked objects:
 11129 ;;		On entry : 0/0
 11130 ;;		On exit  : 0/0
 11131 ;;		Unchanged: 0/0
 11132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11133 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11134 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11135 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11136 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11137 ;;Total ram usage:        6 bytes
 11138 ;; Hardware stack levels used:    1
 11139 ;; Hardware stack levels required when called:    3
 11140 ;; This function calls:
 11141 ;;		Nothing
 11142 ;; This function is called by:
 11143 ;;		_tick_handler
 11144 ;;		_inv_handler
 11145 ;;		_printf
 11146 ;; This function uses a non-reentrant model
 11147 ;;
 11148                           
 11149                           
 11150                           ;psect for function ___lwmod
 11151  150A                     ___lwmod:	
 11152                           
 11153                           ;incstack = 0
 11154                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 11155  150A  0020               	movlb	0	; select bank0
 11156  150B  0828               	movf	___lwmod@divisor,w
 11157  150C  0429               	iorwf	___lwmod@divisor+1,w
 11158  150D  1903               	btfsc	3,2
 11159  150E  2D32               	goto	l4828
 11160  150F  01AD               	clrf	___lwmod@counter
 11161  1510  0AAD               	incf	___lwmod@counter,f
 11162  1511                     l4818:	
 11163  1511  1BA9               	btfsc	___lwmod@divisor+1,7
 11164  1512  2D1D               	goto	l4820
 11165  1513  3001               	movlw	1
 11166  1514                     u5175:	
 11167  1514  35A8               	lslf	___lwmod@divisor,f
 11168  1515  0DA9               	rlf	___lwmod@divisor+1,f
 11169  1516  0B89               	decfsz	9,f
 11170  1517  2D14               	goto	u5175
 11171  1518  3001               	movlw	1
 11172  1519  00AC               	movwf	??___lwmod
 11173  151A  082C               	movf	??___lwmod,w
 11174  151B  07AD               	addwf	___lwmod@counter,f
 11175  151C  2D11               	goto	l4818
 11176  151D                     l4820:	
 11177  151D  0829               	movf	___lwmod@divisor+1,w
 11178  151E  022B               	subwf	___lwmod@dividend+1,w
 11179  151F  1D03               	skipz
 11180  1520  2D23               	goto	u5195
 11181  1521  0828               	movf	___lwmod@divisor,w
 11182  1522  022A               	subwf	___lwmod@dividend,w
 11183  1523                     u5195:	
 11184  1523  1C03               	skipc
 11185  1524  2D29               	goto	l4824
 11186  1525  0828               	movf	___lwmod@divisor,w
 11187  1526  02AA               	subwf	___lwmod@dividend,f
 11188  1527  0829               	movf	___lwmod@divisor+1,w
 11189  1528  3BAB               	subwfb	___lwmod@dividend+1,f
 11190  1529                     l4824:	
 11191  1529  3001               	movlw	1
 11192  152A                     u5205:	
 11193  152A  36A9               	lsrf	___lwmod@divisor+1,f
 11194  152B  0CA8               	rrf	___lwmod@divisor,f
 11195  152C  0B89               	decfsz	9,f
 11196  152D  2D2A               	goto	u5205
 11197  152E  3001               	movlw	1
 11198  152F  02AD               	subwf	___lwmod@counter,f
 11199  1530  1D03               	btfss	3,2
 11200  1531  2D1D               	goto	l4820
 11201  1532                     l4828:	
 11202  1532  082B               	movf	___lwmod@dividend+1,w
 11203  1533  00A9               	movwf	?___lwmod+1
 11204  1534  082A               	movf	___lwmod@dividend,w
 11205  1535  00A8               	movwf	?___lwmod
 11206  1536  0008               	return
 11207  1537                     __end_of___lwmod:	
 11208                           
 11209                           	psect	text49
 11210  1593                     __ptext49:	
 11211 ;; *************** function ___lwdiv *****************
 11212 ;; Defined at:
 11213 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
 11214 ;; Parameters:    Size  Location     Type
 11215 ;;  divisor         2    0[BANK0 ] unsigned int 
 11216 ;;  dividend        2    2[BANK0 ] unsigned int 
 11217 ;; Auto vars:     Size  Location     Type
 11218 ;;  quotient        2    6[BANK0 ] unsigned int 
 11219 ;;  counter         1    5[BANK0 ] unsigned char 
 11220 ;; Return value:  Size  Location     Type
 11221 ;;                  2    0[BANK0 ] unsigned int 
 11222 ;; Registers used:
 11223 ;;		wreg, status,2, status,0
 11224 ;; Tracked objects:
 11225 ;;		On entry : 0/0
 11226 ;;		On exit  : 0/0
 11227 ;;		Unchanged: 0/0
 11228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11229 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11230 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11231 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11232 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11233 ;;Total ram usage:        8 bytes
 11234 ;; Hardware stack levels used:    1
 11235 ;; Hardware stack levels required when called:    3
 11236 ;; This function calls:
 11237 ;;		Nothing
 11238 ;; This function is called by:
 11239 ;;		_printf
 11240 ;; This function uses a non-reentrant model
 11241 ;;
 11242                           
 11243                           
 11244                           ;psect for function ___lwdiv
 11245  1593                     ___lwdiv:	
 11246                           
 11247                           ;incstack = 0
 11248                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11249  1593  0020               	movlb	0	; select bank0
 11250  1594  01A6               	clrf	___lwdiv@quotient
 11251  1595  01A7               	clrf	___lwdiv@quotient+1
 11252  1596  0820               	movf	___lwdiv@divisor,w
 11253  1597  0421               	iorwf	___lwdiv@divisor+1,w
 11254  1598  1903               	btfsc	3,2
 11255  1599  2DC3               	goto	l4806
 11256  159A  01A5               	clrf	___lwdiv@counter
 11257  159B  0AA5               	incf	___lwdiv@counter,f
 11258  159C                     l4794:	
 11259  159C  1BA1               	btfsc	___lwdiv@divisor+1,7
 11260  159D  2DA8               	goto	l4796
 11261  159E  3001               	movlw	1
 11262  159F                     u5105:	
 11263  159F  35A0               	lslf	___lwdiv@divisor,f
 11264  15A0  0DA1               	rlf	___lwdiv@divisor+1,f
 11265  15A1  0B89               	decfsz	9,f
 11266  15A2  2D9F               	goto	u5105
 11267  15A3  3001               	movlw	1
 11268  15A4  00A4               	movwf	??___lwdiv
 11269  15A5  0824               	movf	??___lwdiv,w
 11270  15A6  07A5               	addwf	___lwdiv@counter,f
 11271  15A7  2D9C               	goto	l4794
 11272  15A8                     l4796:	
 11273  15A8  3001               	movlw	1
 11274  15A9                     u5125:	
 11275  15A9  35A6               	lslf	___lwdiv@quotient,f
 11276  15AA  0DA7               	rlf	___lwdiv@quotient+1,f
 11277  15AB  0B89               	decfsz	9,f
 11278  15AC  2DA9               	goto	u5125
 11279  15AD  0821               	movf	___lwdiv@divisor+1,w
 11280  15AE  0223               	subwf	___lwdiv@dividend+1,w
 11281  15AF  1D03               	skipz
 11282  15B0  2DB3               	goto	u5135
 11283  15B1  0820               	movf	___lwdiv@divisor,w
 11284  15B2  0222               	subwf	___lwdiv@dividend,w
 11285  15B3                     u5135:	
 11286  15B3  1C03               	skipc
 11287  15B4  2DBA               	goto	l4802
 11288  15B5  0820               	movf	___lwdiv@divisor,w
 11289  15B6  02A2               	subwf	___lwdiv@dividend,f
 11290  15B7  0821               	movf	___lwdiv@divisor+1,w
 11291  15B8  3BA3               	subwfb	___lwdiv@dividend+1,f
 11292  15B9  1426               	bsf	___lwdiv@quotient,0
 11293  15BA                     l4802:	
 11294  15BA  3001               	movlw	1
 11295  15BB                     u5145:	
 11296  15BB  36A1               	lsrf	___lwdiv@divisor+1,f
 11297  15BC  0CA0               	rrf	___lwdiv@divisor,f
 11298  15BD  0B89               	decfsz	9,f
 11299  15BE  2DBB               	goto	u5145
 11300  15BF  3001               	movlw	1
 11301  15C0  02A5               	subwf	___lwdiv@counter,f
 11302  15C1  1D03               	btfss	3,2
 11303  15C2  2DA8               	goto	l4796
 11304  15C3                     l4806:	
 11305  15C3  0827               	movf	___lwdiv@quotient+1,w
 11306  15C4  00A1               	movwf	?___lwdiv+1
 11307  15C5  0826               	movf	___lwdiv@quotient,w
 11308  15C6  00A0               	movwf	?___lwdiv
 11309  15C7  0008               	return
 11310  15C8                     __end_of___lwdiv:	
 11311                           
 11312                           	psect	text50
 11313  1284                     __ptext50:	
 11314 ;; *************** function _concat *****************
 11315 ;; Defined at:
 11316 ;;		line 197 in file "protocol.c"
 11317 ;; Parameters:    Size  Location     Type
 11318 ;;  msb             1    wreg     unsigned char 
 11319 ;;  lsb             1    0[BANK0 ] unsigned char 
 11320 ;; Auto vars:     Size  Location     Type
 11321 ;;  msb             1    7[BANK0 ] unsigned char 
 11322 ;; Return value:  Size  Location     Type
 11323 ;;                  2    0[BANK0 ] unsigned int 
 11324 ;; Registers used:
 11325 ;;		wreg, status,2, status,0
 11326 ;; Tracked objects:
 11327 ;;		On entry : 0/0
 11328 ;;		On exit  : 0/0
 11329 ;;		Unchanged: 0/0
 11330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11331 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11332 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11333 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11334 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11335 ;;Total ram usage:        8 bytes
 11336 ;; Hardware stack levels used:    1
 11337 ;; Hardware stack levels required when called:    3
 11338 ;; This function calls:
 11339 ;;		Nothing
 11340 ;; This function is called by:
 11341 ;;		_PROTOCOL_Print_TLV
 11342 ;; This function uses a non-reentrant model
 11343 ;;
 11344                           
 11345                           
 11346                           ;psect for function _concat
 11347  1284                     _concat:	
 11348                           
 11349                           ;incstack = 0
 11350                           ; Regs used in _concat: [wreg+status,2+status,0]
 11351                           ;concat@msb stored from wreg
 11352  1284  0020               	movlb	0	; select bank0
 11353  1285  00A7               	movwf	concat@msb
 11354                           
 11355                           ;protocol.c: 198: return (uint16_t)msb * 256 + (uint16_t)lsb;
 11356  1286  0820               	movf	concat@lsb,w
 11357  1287  00A2               	movwf	??_concat
 11358  1288  01A3               	clrf	??_concat+1
 11359  1289  0827               	movf	concat@msb,w
 11360  128A  00A4               	movwf	??_concat+2
 11361  128B  01A5               	clrf	??_concat+3
 11362  128C  0824               	movf	??_concat+2,w
 11363  128D  00A5               	movwf	??_concat+3
 11364  128E  01A4               	clrf	??_concat+2
 11365  128F  0822               	movf	??_concat,w
 11366  1290  0724               	addwf	??_concat+2,w
 11367  1291  00A0               	movwf	?_concat
 11368  1292  0823               	movf	??_concat+1,w
 11369  1293  3D25               	addwfc	??_concat+3,w
 11370  1294  00A1               	movwf	?_concat+1
 11371  1295  0008               	return
 11372  1296                     __end_of_concat:	
 11373                           
 11374                           	psect	text51
 11375  1254                     __ptext51:	
 11376 ;; *************** function _abs *****************
 11377 ;; Defined at:
 11378 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\abs.c"
 11379 ;; Parameters:    Size  Location     Type
 11380 ;;  a               2    7[BANK0 ] int 
 11381 ;; Auto vars:     Size  Location     Type
 11382 ;;		None
 11383 ;; Return value:  Size  Location     Type
 11384 ;;                  2    7[BANK0 ] int 
 11385 ;; Registers used:
 11386 ;;		wreg, status,2, status,0
 11387 ;; Tracked objects:
 11388 ;;		On entry : 0/0
 11389 ;;		On exit  : 0/0
 11390 ;;		Unchanged: 0/0
 11391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11392 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11394 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11395 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11396 ;;Total ram usage:        4 bytes
 11397 ;; Hardware stack levels used:    1
 11398 ;; Hardware stack levels required when called:    3
 11399 ;; This function calls:
 11400 ;;		Nothing
 11401 ;; This function is called by:
 11402 ;;		_PROTOCOL_Print_TLV
 11403 ;; This function uses a non-reentrant model
 11404 ;;
 11405                           
 11406                           
 11407                           ;psect for function _abs
 11408  1254                     _abs:	
 11409                           
 11410                           ;incstack = 0
 11411                           ; Regs used in _abs: [wreg+status,2+status,0]
 11412  1254  0020               	movlb	0	; select bank0
 11413  1255  1FA8               	btfss	abs@a+1,7
 11414  1256  0008               	return
 11415  1257  0927               	comf	abs@a,w
 11416  1258  00A9               	movwf	??_abs
 11417  1259  0928               	comf	abs@a+1,w
 11418  125A  00AA               	movwf	??_abs+1
 11419  125B  0AA9               	incf	??_abs,f
 11420  125C  1903               	skipnz
 11421  125D  0AAA               	incf	??_abs+1,f
 11422  125E  0829               	movf	??_abs,w
 11423  125F  00A7               	movwf	?_abs
 11424  1260  082A               	movf	??_abs+1,w
 11425  1261  00A8               	movwf	?_abs+1
 11426  1262  0008               	return
 11427  1263                     __end_of_abs:	
 11428                           
 11429                           	psect	text52
 11430  1641                     __ptext52:	
 11431 ;; *************** function ___awmod *****************
 11432 ;; Defined at:
 11433 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awmod.c"
 11434 ;; Parameters:    Size  Location     Type
 11435 ;;  divisor         2    0[BANK0 ] int 
 11436 ;;  dividend        2    2[BANK0 ] int 
 11437 ;; Auto vars:     Size  Location     Type
 11438 ;;  sign            1    6[BANK0 ] unsigned char 
 11439 ;;  counter         1    5[BANK0 ] unsigned char 
 11440 ;; Return value:  Size  Location     Type
 11441 ;;                  2    0[BANK0 ] int 
 11442 ;; Registers used:
 11443 ;;		wreg, status,2, status,0
 11444 ;; Tracked objects:
 11445 ;;		On entry : 0/0
 11446 ;;		On exit  : 0/0
 11447 ;;		Unchanged: 0/0
 11448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11449 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11450 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11451 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11452 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11453 ;;Total ram usage:        7 bytes
 11454 ;; Hardware stack levels used:    1
 11455 ;; Hardware stack levels required when called:    3
 11456 ;; This function calls:
 11457 ;;		Nothing
 11458 ;; This function is called by:
 11459 ;;		_PROTOCOL_Print_TLV
 11460 ;; This function uses a non-reentrant model
 11461 ;;
 11462                           
 11463                           
 11464                           ;psect for function ___awmod
 11465  1641                     ___awmod:	
 11466                           
 11467                           ;incstack = 0
 11468                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 11469  1641  0020               	movlb	0	; select bank0
 11470  1642  01A6               	clrf	___awmod@sign
 11471  1643  1FA3               	btfss	___awmod@dividend+1,7
 11472  1644  2E4C               	goto	l5038
 11473  1645  09A2               	comf	___awmod@dividend,f
 11474  1646  09A3               	comf	___awmod@dividend+1,f
 11475  1647  0AA2               	incf	___awmod@dividend,f
 11476  1648  1903               	skipnz
 11477  1649  0AA3               	incf	___awmod@dividend+1,f
 11478  164A  01A6               	clrf	___awmod@sign
 11479  164B  0AA6               	incf	___awmod@sign,f
 11480  164C                     l5038:	
 11481  164C  1FA1               	btfss	___awmod@divisor+1,7
 11482  164D  2E53               	goto	l5042
 11483  164E  09A0               	comf	___awmod@divisor,f
 11484  164F  09A1               	comf	___awmod@divisor+1,f
 11485  1650  0AA0               	incf	___awmod@divisor,f
 11486  1651  1903               	skipnz
 11487  1652  0AA1               	incf	___awmod@divisor+1,f
 11488  1653                     l5042:	
 11489  1653  0820               	movf	___awmod@divisor,w
 11490  1654  0421               	iorwf	___awmod@divisor+1,w
 11491  1655  1903               	btfsc	3,2
 11492  1656  2E7A               	goto	l5060
 11493  1657  01A5               	clrf	___awmod@counter
 11494  1658  0AA5               	incf	___awmod@counter,f
 11495  1659                     l5050:	
 11496  1659  1BA1               	btfsc	___awmod@divisor+1,7
 11497  165A  2E65               	goto	l5052
 11498  165B  3001               	movlw	1
 11499  165C                     u5635:	
 11500  165C  35A0               	lslf	___awmod@divisor,f
 11501  165D  0DA1               	rlf	___awmod@divisor+1,f
 11502  165E  0B89               	decfsz	9,f
 11503  165F  2E5C               	goto	u5635
 11504  1660  3001               	movlw	1
 11505  1661  00A4               	movwf	??___awmod
 11506  1662  0824               	movf	??___awmod,w
 11507  1663  07A5               	addwf	___awmod@counter,f
 11508  1664  2E59               	goto	l5050
 11509  1665                     l5052:	
 11510  1665  0821               	movf	___awmod@divisor+1,w
 11511  1666  0223               	subwf	___awmod@dividend+1,w
 11512  1667  1D03               	skipz
 11513  1668  2E6B               	goto	u5655
 11514  1669  0820               	movf	___awmod@divisor,w
 11515  166A  0222               	subwf	___awmod@dividend,w
 11516  166B                     u5655:	
 11517  166B  1C03               	skipc
 11518  166C  2E71               	goto	l5056
 11519  166D  0820               	movf	___awmod@divisor,w
 11520  166E  02A2               	subwf	___awmod@dividend,f
 11521  166F  0821               	movf	___awmod@divisor+1,w
 11522  1670  3BA3               	subwfb	___awmod@dividend+1,f
 11523  1671                     l5056:	
 11524  1671  3001               	movlw	1
 11525  1672                     u5665:	
 11526  1672  36A1               	lsrf	___awmod@divisor+1,f
 11527  1673  0CA0               	rrf	___awmod@divisor,f
 11528  1674  0B89               	decfsz	9,f
 11529  1675  2E72               	goto	u5665
 11530  1676  3001               	movlw	1
 11531  1677  02A5               	subwf	___awmod@counter,f
 11532  1678  1D03               	btfss	3,2
 11533  1679  2E65               	goto	l5052
 11534  167A                     l5060:	
 11535  167A  0826               	movf	___awmod@sign,w
 11536  167B  1903               	btfsc	3,2
 11537  167C  2E82               	goto	l5064
 11538  167D  09A2               	comf	___awmod@dividend,f
 11539  167E  09A3               	comf	___awmod@dividend+1,f
 11540  167F  0AA2               	incf	___awmod@dividend,f
 11541  1680  1903               	skipnz
 11542  1681  0AA3               	incf	___awmod@dividend+1,f
 11543  1682                     l5064:	
 11544  1682  0823               	movf	___awmod@dividend+1,w
 11545  1683  00A1               	movwf	?___awmod+1
 11546  1684  0822               	movf	___awmod@dividend,w
 11547  1685  00A0               	movwf	?___awmod
 11548  1686  0008               	return
 11549  1687                     __end_of___awmod:	
 11550                           
 11551                           	psect	text53
 11552  1564                     __ptext53:	
 11553 ;; *************** function _detected *****************
 11554 ;; Defined at:
 11555 ;;		line 206 in file "main.c"
 11556 ;; Parameters:    Size  Location     Type
 11557 ;;  dev_addr        1    wreg     unsigned char 
 11558 ;; Auto vars:     Size  Location     Type
 11559 ;;  dev_addr        1   15[BANK0 ] unsigned char 
 11560 ;;  exist           1   14[BANK0 ] unsigned char 
 11561 ;;  x               1   13[BANK0 ] unsigned char 
 11562 ;;  y               1   12[BANK0 ] unsigned char 
 11563 ;; Return value:  Size  Location     Type
 11564 ;;                  1    wreg      unsigned char 
 11565 ;; Registers used:
 11566 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11567 ;; Tracked objects:
 11568 ;;		On entry : 0/0
 11569 ;;		On exit  : 0/0
 11570 ;;		Unchanged: 0/0
 11571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11573 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11574 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11575 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11576 ;;Total ram usage:        7 bytes
 11577 ;; Hardware stack levels used:    1
 11578 ;; Hardware stack levels required when called:    4
 11579 ;; This function calls:
 11580 ;;		___awdiv
 11581 ;; This function is called by:
 11582 ;;		_one_shot_sen
 11583 ;;		_fetch
 11584 ;; This function uses a non-reentrant model
 11585 ;;
 11586                           
 11587                           
 11588                           ;psect for function _detected
 11589  1564                     _detected:	
 11590                           
 11591                           ;incstack = 0
 11592                           ; Regs used in _detected: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11593                           ;detected@dev_addr stored from wreg
 11594  1564  0020               	movlb	0	; select bank0
 11595  1565  00AF               	movwf	detected@dev_addr
 11596                           
 11597                           ;main.c: 207: uint8_t y = dev_addr / 8;
 11598  1566  3008               	movlw	8
 11599  1567  00A0               	movwf	___awdiv@divisor
 11600  1568  3000               	movlw	0
 11601  1569  00A1               	movwf	___awdiv@divisor+1
 11602  156A  082F               	movf	detected@dev_addr,w
 11603  156B  00A9               	movwf	??_detected
 11604  156C  01AA               	clrf	??_detected+1
 11605  156D  0829               	movf	??_detected,w
 11606  156E  00A2               	movwf	___awdiv@dividend
 11607  156F  082A               	movf	??_detected+1,w
 11608  1570  00A3               	movwf	___awdiv@dividend+1
 11609  1571  3188  20E5  3195   	fcall	___awdiv
 11610  1574  0020               	movlb	0	; select bank0
 11611  1575  0820               	movf	?___awdiv,w
 11612  1576  00AB               	movwf	??_detected+2
 11613  1577  082B               	movf	??_detected+2,w
 11614  1578  00AC               	movwf	detected@y
 11615                           
 11616                           ;main.c: 208: uint8_t x = dev_addr % 8;
 11617  1579  082F               	movf	detected@dev_addr,w
 11618  157A  3907               	andlw	7
 11619  157B  00A9               	movwf	??_detected
 11620  157C  0829               	movf	??_detected,w
 11621  157D  00AD               	movwf	detected@x
 11622                           
 11623                           ;main.c: 209: bool exist = 0;
 11624  157E  01AE               	clrf	detected@exist
 11625                           
 11626                           ;main.c: 210: if ((dev_map[y] & (0x01 << x)) > 0) {
 11627  157F  082C               	movf	detected@y,w
 11628  1580  3E20               	addlw	(low (_dev_map| (0+256)))& (0+255)
 11629  1581  0086               	movwf	6
 11630  1582  3001               	movlw	1	; select bank2/3
 11631  1583  0087               	movwf	7
 11632  1584  3001               	movlw	1
 11633  1585  00A9               	movwf	??_detected
 11634  1586  0A2D               	incf	detected@x,w
 11635  1587  2D89               	goto	u5994
 11636  1588                     u5995:	
 11637  1588  35A9               	lslf	??_detected,f
 11638  1589                     u5994:	
 11639  1589  0B89               	decfsz	9,f
 11640  158A  2D88               	goto	u5995
 11641  158B  0829               	movf	??_detected,w
 11642  158C  0501               	andwf	1,w
 11643  158D  1903               	btfsc	3,2
 11644  158E  2D91               	goto	l5280
 11645                           
 11646                           ;main.c: 211: exist = 1;
 11647  158F  01AE               	clrf	detected@exist
 11648  1590  0AAE               	incf	detected@exist,f
 11649  1591                     l5280:	
 11650                           
 11651                           ;main.c: 212: }
 11652                           ;main.c: 213: return exist;
 11653  1591  082E               	movf	detected@exist,w
 11654  1592  0008               	return
 11655  1593                     __end_of_detected:	
 11656                           
 11657                           	psect	text54
 11658  08E5                     __ptext54:	
 11659 ;; *************** function ___awdiv *****************
 11660 ;; Defined at:
 11661 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
 11662 ;; Parameters:    Size  Location     Type
 11663 ;;  divisor         2    0[BANK0 ] int 
 11664 ;;  dividend        2    2[BANK0 ] int 
 11665 ;; Auto vars:     Size  Location     Type
 11666 ;;  quotient        2    7[BANK0 ] int 
 11667 ;;  sign            1    6[BANK0 ] unsigned char 
 11668 ;;  counter         1    5[BANK0 ] unsigned char 
 11669 ;; Return value:  Size  Location     Type
 11670 ;;                  2    0[BANK0 ] int 
 11671 ;; Registers used:
 11672 ;;		wreg, status,2, status,0
 11673 ;; Tracked objects:
 11674 ;;		On entry : 0/0
 11675 ;;		On exit  : 0/0
 11676 ;;		Unchanged: 0/0
 11677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11678 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11679 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11680 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11681 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11682 ;;Total ram usage:        9 bytes
 11683 ;; Hardware stack levels used:    1
 11684 ;; Hardware stack levels required when called:    3
 11685 ;; This function calls:
 11686 ;;		Nothing
 11687 ;; This function is called by:
 11688 ;;		_init
 11689 ;;		_add_dev
 11690 ;;		_del_dev
 11691 ;;		_detected
 11692 ;;		_command_handler
 11693 ;;		_PROTOCOL_Print_TLV
 11694 ;; This function uses a non-reentrant model
 11695 ;;
 11696                           
 11697                           
 11698                           ;psect for function ___awdiv
 11699  08E5                     ___awdiv:	
 11700                           
 11701                           ;incstack = 0
 11702                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 11703  08E5  0020               	movlb	0	; select bank0
 11704  08E6  01A6               	clrf	___awdiv@sign
 11705  08E7  1FA1               	btfss	___awdiv@divisor+1,7
 11706  08E8  28F0               	goto	l4994
 11707  08E9  09A0               	comf	___awdiv@divisor,f
 11708  08EA  09A1               	comf	___awdiv@divisor+1,f
 11709  08EB  0AA0               	incf	___awdiv@divisor,f
 11710  08EC  1903               	skipnz
 11711  08ED  0AA1               	incf	___awdiv@divisor+1,f
 11712  08EE  01A6               	clrf	___awdiv@sign
 11713  08EF  0AA6               	incf	___awdiv@sign,f
 11714  08F0                     l4994:	
 11715  08F0  1FA3               	btfss	___awdiv@dividend+1,7
 11716  08F1  28FB               	goto	l5000
 11717  08F2  09A2               	comf	___awdiv@dividend,f
 11718  08F3  09A3               	comf	___awdiv@dividend+1,f
 11719  08F4  0AA2               	incf	___awdiv@dividend,f
 11720  08F5  1903               	skipnz
 11721  08F6  0AA3               	incf	___awdiv@dividend+1,f
 11722  08F7  3001               	movlw	1
 11723  08F8  00A4               	movwf	??___awdiv
 11724  08F9  0824               	movf	??___awdiv,w
 11725  08FA  06A6               	xorwf	___awdiv@sign,f
 11726  08FB                     l5000:	
 11727  08FB  01A7               	clrf	___awdiv@quotient
 11728  08FC  01A8               	clrf	___awdiv@quotient+1
 11729  08FD  0820               	movf	___awdiv@divisor,w
 11730  08FE  0421               	iorwf	___awdiv@divisor+1,w
 11731  08FF  1903               	btfsc	3,2
 11732  0900  292A               	goto	l5022
 11733  0901  01A5               	clrf	___awdiv@counter
 11734  0902  0AA5               	incf	___awdiv@counter,f
 11735  0903                     l5010:	
 11736  0903  1BA1               	btfsc	___awdiv@divisor+1,7
 11737  0904  290F               	goto	l5012
 11738  0905  3001               	movlw	1
 11739  0906                     u5535:	
 11740  0906  35A0               	lslf	___awdiv@divisor,f
 11741  0907  0DA1               	rlf	___awdiv@divisor+1,f
 11742  0908  0B89               	decfsz	9,f
 11743  0909  2906               	goto	u5535
 11744  090A  3001               	movlw	1
 11745  090B  00A4               	movwf	??___awdiv
 11746  090C  0824               	movf	??___awdiv,w
 11747  090D  07A5               	addwf	___awdiv@counter,f
 11748  090E  2903               	goto	l5010
 11749  090F                     l5012:	
 11750  090F  3001               	movlw	1
 11751  0910                     u5555:	
 11752  0910  35A7               	lslf	___awdiv@quotient,f
 11753  0911  0DA8               	rlf	___awdiv@quotient+1,f
 11754  0912  0B89               	decfsz	9,f
 11755  0913  2910               	goto	u5555
 11756  0914  0821               	movf	___awdiv@divisor+1,w
 11757  0915  0223               	subwf	___awdiv@dividend+1,w
 11758  0916  1D03               	skipz
 11759  0917  291A               	goto	u5565
 11760  0918  0820               	movf	___awdiv@divisor,w
 11761  0919  0222               	subwf	___awdiv@dividend,w
 11762  091A                     u5565:	
 11763  091A  1C03               	skipc
 11764  091B  2921               	goto	l5018
 11765  091C  0820               	movf	___awdiv@divisor,w
 11766  091D  02A2               	subwf	___awdiv@dividend,f
 11767  091E  0821               	movf	___awdiv@divisor+1,w
 11768  091F  3BA3               	subwfb	___awdiv@dividend+1,f
 11769  0920  1427               	bsf	___awdiv@quotient,0
 11770  0921                     l5018:	
 11771  0921  3001               	movlw	1
 11772  0922                     u5575:	
 11773  0922  36A1               	lsrf	___awdiv@divisor+1,f
 11774  0923  0CA0               	rrf	___awdiv@divisor,f
 11775  0924  0B89               	decfsz	9,f
 11776  0925  2922               	goto	u5575
 11777  0926  3001               	movlw	1
 11778  0927  02A5               	subwf	___awdiv@counter,f
 11779  0928  1D03               	btfss	3,2
 11780  0929  290F               	goto	l5012
 11781  092A                     l5022:	
 11782  092A  0826               	movf	___awdiv@sign,w
 11783  092B  1903               	btfsc	3,2
 11784  092C  2932               	goto	l5026
 11785  092D  09A7               	comf	___awdiv@quotient,f
 11786  092E  09A8               	comf	___awdiv@quotient+1,f
 11787  092F  0AA7               	incf	___awdiv@quotient,f
 11788  0930  1903               	skipnz
 11789  0931  0AA8               	incf	___awdiv@quotient+1,f
 11790  0932                     l5026:	
 11791  0932  0828               	movf	___awdiv@quotient+1,w
 11792  0933  00A1               	movwf	?___awdiv+1
 11793  0934  0827               	movf	___awdiv@quotient,w
 11794  0935  00A0               	movwf	?___awdiv
 11795  0936  0008               	return
 11796  0937                     __end_of___awdiv:	
 11797                           
 11798                           	psect	text55
 11799  09E3                     __ptext55:	
 11800 ;; *************** function _atoi *****************
 11801 ;; Defined at:
 11802 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\atoi.c"
 11803 ;; Parameters:    Size  Location     Type
 11804 ;;  s               2    6[BANK0 ] PTR const unsigned char 
 11805 ;;		 -> buf(48), cmd_buf(192), 
 11806 ;; Auto vars:     Size  Location     Type
 11807 ;;  a               2   11[BANK0 ] int 
 11808 ;;  sign            1   10[BANK0 ] unsigned char 
 11809 ;; Return value:  Size  Location     Type
 11810 ;;                  2    6[BANK0 ] int 
 11811 ;; Registers used:
 11812 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11813 ;; Tracked objects:
 11814 ;;		On entry : 0/0
 11815 ;;		On exit  : 0/0
 11816 ;;		Unchanged: 0/0
 11817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11818 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11819 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11820 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11821 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11822 ;;Total ram usage:        7 bytes
 11823 ;; Hardware stack levels used:    1
 11824 ;; Hardware stack levels required when called:    4
 11825 ;; This function calls:
 11826 ;;		___wmul
 11827 ;;		_isdigit
 11828 ;; This function is called by:
 11829 ;;		_exec_remote_cmd
 11830 ;;		_command_handler
 11831 ;;		_PROTOCOL_Loop
 11832 ;; This function uses a non-reentrant model
 11833 ;;
 11834                           
 11835                           
 11836                           ;psect for function _atoi
 11837  09E3                     _atoi:	
 11838  09E3                     l5370:	
 11839                           ;incstack = 0
 11840                           ; Regs used in _atoi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11841                           
 11842  09E3  0020               	movlb	0	; select bank0
 11843  09E4  0826               	movf	atoi@s,w
 11844  09E5  0086               	movwf	6
 11845  09E6  0827               	movf	atoi@s+1,w
 11846  09E7  0087               	movwf	7
 11847  09E8  3020               	movlw	32
 11848  09E9  0601               	xorwf	1,w
 11849  09EA  1D03               	btfss	3,2
 11850  09EB  29F2               	goto	l5372
 11851  09EC                     l5368:	
 11852  09EC  3001               	movlw	1
 11853  09ED  0020               	movlb	0	; select bank0
 11854  09EE  07A6               	addwf	atoi@s,f
 11855  09EF  3000               	movlw	0
 11856  09F0  3DA7               	addwfc	atoi@s+1,f
 11857  09F1  29E3               	goto	l5370
 11858  09F2                     l5372:	
 11859  09F2  0826               	movf	atoi@s,w
 11860  09F3  0086               	movwf	6
 11861  09F4  0827               	movf	atoi@s+1,w
 11862  09F5  0087               	movwf	7
 11863  09F6  3009               	movlw	9
 11864  09F7  0601               	xorwf	1,w
 11865  09F8  1903               	btfsc	3,2
 11866  09F9  29EC               	goto	l5368
 11867  09FA  01AB               	clrf	atoi@a
 11868  09FB  01AC               	clrf	atoi@a+1
 11869  09FC  01AA               	clrf	atoi@sign
 11870  09FD  0826               	movf	atoi@s,w
 11871  09FE  0086               	movwf	6
 11872  09FF  0827               	movf	atoi@s+1,w
 11873  0A00  0087               	movwf	7
 11874  0A01  302D               	movlw	45
 11875  0A02  0601               	xorwf	1,w
 11876  0A03  1D03               	btfss	3,2
 11877  0A04  2A0A               	goto	l5382
 11878  0A05  3001               	movlw	1
 11879  0A06  00A8               	movwf	??_atoi
 11880  0A07  0828               	movf	??_atoi,w
 11881  0A08  07AA               	addwf	atoi@sign,f
 11882  0A09  2A12               	goto	l5388
 11883  0A0A                     l5382:	
 11884  0A0A  0826               	movf	atoi@s,w
 11885  0A0B  0086               	movwf	6
 11886  0A0C  0827               	movf	atoi@s+1,w
 11887  0A0D  0087               	movwf	7
 11888  0A0E  302B               	movlw	43
 11889  0A0F  0601               	xorwf	1,w
 11890  0A10  1D03               	btfss	3,2
 11891  0A11  2A16               	goto	l5390
 11892  0A12                     l5388:	
 11893  0A12  3001               	movlw	1
 11894  0A13  07A6               	addwf	atoi@s,f
 11895  0A14  3000               	movlw	0
 11896  0A15  3DA7               	addwfc	atoi@s+1,f
 11897  0A16                     l5390:	
 11898  0A16  0826               	movf	atoi@s,w
 11899  0A17  0086               	movwf	6
 11900  0A18  0827               	movf	atoi@s+1,w
 11901  0A19  0087               	movwf	7
 11902  0A1A  0801               	movf	1,w
 11903  0A1B  3192  2245  3189   	fcall	_isdigit
 11904  0A1E  1C03               	btfss	3,0
 11905  0A1F  2A3F               	goto	l5392
 11906  0A20  0020               	movlb	0	; select bank0
 11907  0A21  082C               	movf	atoi@a+1,w
 11908  0A22  00A1               	movwf	___wmul@multiplier+1
 11909  0A23  082B               	movf	atoi@a,w
 11910  0A24  00A0               	movwf	___wmul@multiplier
 11911  0A25  300A               	movlw	10
 11912  0A26  00A2               	movwf	___wmul@multiplicand
 11913  0A27  3000               	movlw	0
 11914  0A28  00A3               	movwf	___wmul@multiplicand+1
 11915  0A29  3193  2357  3189   	fcall	___wmul
 11916  0A2C  0020               	movlb	0	; select bank0
 11917  0A2D  0826               	movf	atoi@s,w
 11918  0A2E  0086               	movwf	6
 11919  0A2F  0827               	movf	atoi@s+1,w
 11920  0A30  0087               	movwf	7
 11921  0A31  0801               	movf	1,w
 11922  0A32  0720               	addwf	?___wmul,w
 11923  0A33  00A8               	movwf	??_atoi
 11924  0A34  0821               	movf	?___wmul+1,w
 11925  0A35  1803               	skipnc
 11926  0A36  0A21               	incf	?___wmul+1,w
 11927  0A37  00A9               	movwf	??_atoi+1
 11928  0A38  0828               	movf	??_atoi,w
 11929  0A39  3ED0               	addlw	208
 11930  0A3A  00AB               	movwf	atoi@a
 11931  0A3B  30FF               	movlw	255
 11932  0A3C  3D29               	addwfc	??_atoi+1,w
 11933  0A3D  00AC               	movwf	atoi@a+1
 11934  0A3E  2A12               	goto	l5388
 11935  0A3F                     l5392:	
 11936  0A3F  0020               	movlb	0	; select bank0
 11937  0A40  082A               	movf	atoi@sign,w
 11938  0A41  1903               	btfsc	3,2
 11939  0A42  2A4F               	goto	l5398
 11940  0A43  092B               	comf	atoi@a,w
 11941  0A44  00A8               	movwf	??_atoi
 11942  0A45  092C               	comf	atoi@a+1,w
 11943  0A46  00A9               	movwf	??_atoi+1
 11944  0A47  0AA8               	incf	??_atoi,f
 11945  0A48  1903               	skipnz
 11946  0A49  0AA9               	incf	??_atoi+1,f
 11947  0A4A  0828               	movf	??_atoi,w
 11948  0A4B  00A6               	movwf	?_atoi
 11949  0A4C  0829               	movf	??_atoi+1,w
 11950  0A4D  00A7               	movwf	?_atoi+1
 11951  0A4E  0008               	return
 11952  0A4F                     l5398:	
 11953  0A4F  082C               	movf	atoi@a+1,w
 11954  0A50  00A7               	movwf	?_atoi+1
 11955  0A51  082B               	movf	atoi@a,w
 11956  0A52  00A6               	movwf	?_atoi
 11957  0A53  0008               	return
 11958  0A54                     __end_of_atoi:	
 11959                           
 11960                           	psect	text56
 11961  1245                     __ptext56:	
 11962 ;; *************** function _isdigit *****************
 11963 ;; Defined at:
 11964 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
 11965 ;; Parameters:    Size  Location     Type
 11966 ;;  c               1    wreg     unsigned char 
 11967 ;; Auto vars:     Size  Location     Type
 11968 ;;  c               1    1[BANK0 ] unsigned char 
 11969 ;; Return value:  Size  Location     Type
 11970 ;;		None               void
 11971 ;; Registers used:
 11972 ;;		wreg, status,2, status,0
 11973 ;; Tracked objects:
 11974 ;;		On entry : 0/0
 11975 ;;		On exit  : 0/0
 11976 ;;		Unchanged: 0/0
 11977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11979 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11981 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11982 ;;Total ram usage:        2 bytes
 11983 ;; Hardware stack levels used:    1
 11984 ;; Hardware stack levels required when called:    3
 11985 ;; This function calls:
 11986 ;;		Nothing
 11987 ;; This function is called by:
 11988 ;;		_printf
 11989 ;;		_atoi
 11990 ;; This function uses a non-reentrant model
 11991 ;;
 11992                           
 11993                           
 11994                           ;psect for function _isdigit
 11995  1245                     _isdigit:	
 11996                           
 11997                           ;incstack = 0
 11998                           ; Regs used in _isdigit: [wreg+status,2+status,0]
 11999                           ;isdigit@c stored from wreg
 12000  1245  0020               	movlb	0	; select bank0
 12001  1246  00A1               	movwf	isdigit@c
 12002  1247  01A0               	clrf	_isdigit$1459
 12003  1248  303A               	movlw	58
 12004  1249  0221               	subwf	isdigit@c,w
 12005  124A  1803               	skipnc
 12006  124B  2A52               	goto	l4766
 12007  124C  3030               	movlw	48
 12008  124D  0221               	subwf	isdigit@c,w
 12009  124E  1C03               	skipc
 12010  124F  2A52               	goto	l4766
 12011  1250  01A0               	clrf	_isdigit$1459
 12012  1251  0AA0               	incf	_isdigit$1459,f
 12013  1252                     l4766:	
 12014  1252  0C20               	rrf	_isdigit$1459,w
 12015  1253  0008               	return
 12016  1254                     __end_of_isdigit:	
 12017                           
 12018                           	psect	text57
 12019  1357                     __ptext57:	
 12020 ;; *************** function ___wmul *****************
 12021 ;; Defined at:
 12022 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
 12023 ;; Parameters:    Size  Location     Type
 12024 ;;  multiplier      2    0[BANK0 ] unsigned int 
 12025 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 12026 ;; Auto vars:     Size  Location     Type
 12027 ;;  product         2    4[BANK0 ] unsigned int 
 12028 ;; Return value:  Size  Location     Type
 12029 ;;                  2    0[BANK0 ] unsigned int 
 12030 ;; Registers used:
 12031 ;;		wreg, status,2, status,0
 12032 ;; Tracked objects:
 12033 ;;		On entry : 0/0
 12034 ;;		On exit  : 0/0
 12035 ;;		Unchanged: 0/0
 12036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12037 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12038 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12040 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12041 ;;Total ram usage:        6 bytes
 12042 ;; Hardware stack levels used:    1
 12043 ;; Hardware stack levels required when called:    3
 12044 ;; This function calls:
 12045 ;;		Nothing
 12046 ;; This function is called by:
 12047 ;;		_exec_remote_cmd
 12048 ;;		_init
 12049 ;;		_put_cmd
 12050 ;;		_printf
 12051 ;;		_atoi
 12052 ;; This function uses a non-reentrant model
 12053 ;;
 12054                           
 12055                           
 12056                           ;psect for function ___wmul
 12057  1357                     ___wmul:	
 12058                           
 12059                           ;incstack = 0
 12060                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 12061  1357  0020               	movlb	0	; select bank0
 12062  1358  01A4               	clrf	___wmul@product
 12063  1359  01A5               	clrf	___wmul@product+1
 12064  135A                     l4772:	
 12065  135A  1C20               	btfss	___wmul@multiplier,0
 12066  135B  2B60               	goto	l1113
 12067  135C  0822               	movf	___wmul@multiplicand,w
 12068  135D  07A4               	addwf	___wmul@product,f
 12069  135E  0823               	movf	___wmul@multiplicand+1,w
 12070  135F  3DA5               	addwfc	___wmul@product+1,f
 12071  1360                     l1113:	
 12072  1360  3001               	movlw	1
 12073  1361                     u5065:	
 12074  1361  35A2               	lslf	___wmul@multiplicand,f
 12075  1362  0DA3               	rlf	___wmul@multiplicand+1,f
 12076  1363  0B89               	decfsz	9,f
 12077  1364  2B61               	goto	u5065
 12078  1365  3001               	movlw	1
 12079  1366                     u5075:	
 12080  1366  36A1               	lsrf	___wmul@multiplier+1,f
 12081  1367  0CA0               	rrf	___wmul@multiplier,f
 12082  1368  0B89               	decfsz	9,f
 12083  1369  2B66               	goto	u5075
 12084  136A  0820               	movf	___wmul@multiplier,w
 12085  136B  0421               	iorwf	___wmul@multiplier+1,w
 12086  136C  1D03               	btfss	3,2
 12087  136D  2B5A               	goto	l4772
 12088  136E  0825               	movf	___wmul@product+1,w
 12089  136F  00A1               	movwf	?___wmul+1
 12090  1370  0824               	movf	___wmul@product,w
 12091  1371  00A0               	movwf	?___wmul
 12092  1372  0008               	return
 12093  1373                     __end_of___wmul:	
 12094                           
 12095                           	psect	text58
 12096  13CE                     __ptext58:	
 12097 ;; *************** function _DATAEE_WriteByte *****************
 12098 ;; Defined at:
 12099 ;;		line 180 in file "mcc_generated_files/memory.c"
 12100 ;; Parameters:    Size  Location     Type
 12101 ;;  bAdd            1    wreg     unsigned char 
 12102 ;;  bData           1    0[BANK0 ] unsigned char 
 12103 ;; Auto vars:     Size  Location     Type
 12104 ;;  bAdd            1    1[BANK0 ] unsigned char 
 12105 ;;  GIEBitValue     1    2[BANK0 ] unsigned char 
 12106 ;; Return value:  Size  Location     Type
 12107 ;;                  1    wreg      void 
 12108 ;; Registers used:
 12109 ;;		wreg, status,2, status,0
 12110 ;; Tracked objects:
 12111 ;;		On entry : 0/0
 12112 ;;		On exit  : 0/0
 12113 ;;		Unchanged: 0/0
 12114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12115 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12116 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12117 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12118 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12119 ;;Total ram usage:        3 bytes
 12120 ;; Hardware stack levels used:    1
 12121 ;; Hardware stack levels required when called:    3
 12122 ;; This function calls:
 12123 ;;		Nothing
 12124 ;; This function is called by:
 12125 ;;		_command_handler
 12126 ;;		_PROTOCOL_Write_Device_Address
 12127 ;;		_PROTOCOL_SAV
 12128 ;; This function uses a non-reentrant model
 12129 ;;
 12130                           
 12131                           
 12132                           ;psect for function _DATAEE_WriteByte
 12133  13CE                     _DATAEE_WriteByte:	
 12134                           
 12135                           ;incstack = 0
 12136                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
 12137                           ;DATAEE_WriteByte@bAdd stored from wreg
 12138  13CE  0020               	movlb	0	; select bank0
 12139  13CF  00A1               	movwf	DATAEE_WriteByte@bAdd
 12140                           
 12141                           ;memory.c: 182: uint8_t GIEBitValue = 0;
 12142  13D0  01A2               	clrf	DATAEE_WriteByte@GIEBitValue
 12143                           
 12144                           ;memory.c: 184: EEADRL = (bAdd & 0x0ff);
 12145  13D1  0821               	movf	DATAEE_WriteByte@bAdd,w
 12146  13D2  0023               	movlb	3	; select bank3
 12147  13D3  0091               	movwf	17	;volatile
 12148                           
 12149                           ;memory.c: 185: EEDATL = bData;
 12150  13D4  0020               	movlb	0	; select bank0
 12151  13D5  0820               	movf	DATAEE_WriteByte@bData,w
 12152  13D6  0023               	movlb	3	; select bank3
 12153  13D7  0093               	movwf	19	;volatile
 12154                           
 12155                           ;memory.c: 186: EECON1bits.EEPGD = 0;
 12156  13D8  1395               	bcf	21,7	;volsfr
 12157                           
 12158                           ;memory.c: 187: EECON1bits.CFGS = 0;
 12159  13D9  1315               	bcf	21,6	;volsfr
 12160                           
 12161                           ;memory.c: 188: EECON1bits.WREN = 1;
 12162  13DA  1515               	bsf	21,2	;volsfr
 12163                           
 12164                           ;memory.c: 190: GIEBitValue = INTCONbits.GIE;
 12165  13DB  3000               	movlw	0
 12166  13DC  1B8B               	btfsc	11,7	;volatile
 12167  13DD  3001               	movlw	1
 12168  13DE  0020               	movlb	0	; select bank0
 12169  13DF  00A2               	movwf	DATAEE_WriteByte@GIEBitValue
 12170                           
 12171                           ;memory.c: 191: INTCONbits.GIE = 0;
 12172  13E0  138B               	bcf	11,7	;volatile
 12173                           
 12174                           ;memory.c: 192: EECON2 = 0x55;
 12175  13E1  3055               	movlw	85
 12176  13E2  0023               	movlb	3	; select bank3
 12177  13E3  0096               	movwf	22	;volsfr
 12178                           
 12179                           ;memory.c: 193: EECON2 = 0xAA;
 12180  13E4  30AA               	movlw	170
 12181  13E5  0096               	movwf	22	;volsfr
 12182                           
 12183                           ;memory.c: 194: EECON1bits.WR = 1;
 12184  13E6  1495               	bsf	21,1	;volsfr
 12185  13E7                     l188:	
 12186                           ;memory.c: 197: {
 12187                           
 12188                           ;memory.c: 196: while (EECON1bits.WR)
 12189                           
 12190  13E7  1895               	btfsc	21,1	;volsfr
 12191  13E8  2BE7               	goto	l188
 12192                           
 12193                           ;memory.c: 198: }
 12194                           ;memory.c: 200: EECON1bits.WREN = 0;
 12195  13E9  1115               	bcf	21,2	;volsfr
 12196                           
 12197                           ;memory.c: 201: INTCONbits.GIE = GIEBitValue;
 12198  13EA  0020               	movlb	0	; select bank0
 12199  13EB  0C22               	rrf	DATAEE_WriteByte@GIEBitValue,w
 12200  13EC  1C03               	skipc
 12201  13ED  138B               	bcf	11,7	;volatile
 12202  13EE  1803               	skipnc
 12203  13EF  178B               	bsf	11,7	;volatile
 12204  13F0  0008               	return
 12205  13F1                     __end_of_DATAEE_WriteByte:	
 12206                           
 12207                           	psect	text59
 12208  13AE                     __ptext59:	
 12209 ;; *************** function _EUSART_Read *****************
 12210 ;; Defined at:
 12211 ;;		line 112 in file "mcc_generated_files/eusart.c"
 12212 ;; Parameters:    Size  Location     Type
 12213 ;;		None
 12214 ;; Auto vars:     Size  Location     Type
 12215 ;;  readValue       1    1[BANK0 ] unsigned char 
 12216 ;; Return value:  Size  Location     Type
 12217 ;;                  1    wreg      unsigned char 
 12218 ;; Registers used:
 12219 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12220 ;; Tracked objects:
 12221 ;;		On entry : 0/0
 12222 ;;		On exit  : 0/0
 12223 ;;		Unchanged: 0/0
 12224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12226 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12227 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12228 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12229 ;;Total ram usage:        2 bytes
 12230 ;; Hardware stack levels used:    1
 12231 ;; Hardware stack levels required when called:    3
 12232 ;; This function calls:
 12233 ;;		Nothing
 12234 ;; This function is called by:
 12235 ;;		_PROTOCOL_Loop
 12236 ;;		_getch
 12237 ;; This function uses a non-reentrant model
 12238 ;;
 12239                           
 12240                           
 12241                           ;psect for function _EUSART_Read
 12242  13AE                     _EUSART_Read:	
 12243                           
 12244                           ;eusart.c: 114: uint8_t readValue = 0;
 12245                           
 12246                           ;incstack = 0
 12247                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
 12248  13AE  0020               	movlb	0	; select bank0
 12249  13AF  01A1               	clrf	EUSART_Read@readValue
 12250  13B0                     l5684:	
 12251                           ;eusart.c: 117: {
 12252                           
 12253                           ;eusart.c: 116: while(0 == eusartRxCount)
 12254                           
 12255  13B0  0021               	movlb	1	; select bank1
 12256  13B1  0866               	movf	_eusartRxCount^(0+128),w	;volatile
 12257  13B2  1903               	btfsc	3,2
 12258  13B3  2BB0               	goto	l5684
 12259                           
 12260                           ;eusart.c: 118: }
 12261                           ;eusart.c: 120: readValue = eusartRxBuffer[eusartRxTail++];
 12262  13B4  0872               	movf	_eusartRxTail,w
 12263  13B5  3E20               	addlw	(low (_eusartRxBuffer| (0+768)))& (0+255)
 12264  13B6  0086               	movwf	6
 12265  13B7  3003               	movlw	3	; select bank6/7
 12266  13B8  0087               	movwf	7
 12267  13B9  0801               	movf	1,w
 12268  13BA  0020               	movlb	0	; select bank0
 12269  13BB  00A0               	movwf	??_EUSART_Read
 12270  13BC  0820               	movf	??_EUSART_Read,w
 12271  13BD  00A1               	movwf	EUSART_Read@readValue
 12272  13BE  3001               	movlw	1
 12273  13BF  00A0               	movwf	??_EUSART_Read
 12274  13C0  0820               	movf	??_EUSART_Read,w
 12275  13C1  07F2               	addwf	_eusartRxTail,f	;volatile
 12276                           
 12277                           ;eusart.c: 121: if(sizeof(eusartRxBuffer) <= eusartRxTail)
 12278  13C2  3040               	movlw	64
 12279  13C3  0272               	subwf	_eusartRxTail,w	;volatile
 12280  13C4  1803               	btfsc	3,0
 12281                           
 12282                           ;eusart.c: 122: {
 12283                           ;eusart.c: 123: eusartRxTail = 0;
 12284  13C5  01F2               	clrf	_eusartRxTail	;volatile
 12285                           
 12286                           ;eusart.c: 124: }
 12287                           ;eusart.c: 125: PIE1bits.RCIE = 0;
 12288  13C6  0021               	movlb	1	; select bank1
 12289  13C7  1291               	bcf	17,5	;volatile
 12290                           
 12291                           ;eusart.c: 126: eusartRxCount--;
 12292  13C8  3001               	movlw	1
 12293  13C9  02E6               	subwf	_eusartRxCount^(0+128),f	;volatile
 12294                           
 12295                           ;eusart.c: 127: PIE1bits.RCIE = 1;
 12296  13CA  1691               	bsf	17,5	;volatile
 12297                           
 12298                           ;eusart.c: 129: return readValue;
 12299  13CB  0020               	movlb	0	; select bank0
 12300  13CC  0821               	movf	EUSART_Read@readValue,w
 12301  13CD  0008               	return
 12302  13CE                     __end_of_EUSART_Read:	
 12303                           
 12304                           	psect	text60
 12305  0893                     __ptext60:	
 12306 ;; *************** function _PROTOCOL_Initialize *****************
 12307 ;; Defined at:
 12308 ;;		line 60 in file "protocol.c"
 12309 ;; Parameters:    Size  Location     Type
 12310 ;;  device_id       2    1[BANK0 ] PTR const unsigned char 
 12311 ;;		 -> STR_33(17), 
 12312 ;;  start_handle    1    3[BANK0 ] PTR void 
 12313 ;;		 -> NULL(0), 
 12314 ;;  stop_handler    1    4[BANK0 ] PTR void 
 12315 ;;		 -> NULL(0), 
 12316 ;;  set_handler     1    5[BANK0 ] PTR void 
 12317 ;;		 -> NULL(0), 
 12318 ;;  inv_handler     2    6[BANK0 ] PTR void 
 12319 ;;		 -> inv_handler(1), 
 12320 ;;  scaler          1    8[BANK0 ] unsigned char 
 12321 ;; Auto vars:     Size  Location     Type
 12322 ;;		None
 12323 ;; Return value:  Size  Location     Type
 12324 ;;                  1    wreg      void 
 12325 ;; Registers used:
 12326 ;;		wreg, status,2, status,0, pclath, cstack
 12327 ;; Tracked objects:
 12328 ;;		On entry : 0/0
 12329 ;;		On exit  : 0/0
 12330 ;;		Unchanged: 0/0
 12331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12332 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12333 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12334 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12335 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12336 ;;Total ram usage:       10 bytes
 12337 ;; Hardware stack levels used:    1
 12338 ;; Hardware stack levels required when called:    4
 12339 ;; This function calls:
 12340 ;;		_DATAEE_ReadByte
 12341 ;; This function is called by:
 12342 ;;		_main
 12343 ;; This function uses a non-reentrant model
 12344 ;;
 12345                           
 12346                           
 12347                           ;psect for function _PROTOCOL_Initialize
 12348  0893                     _PROTOCOL_Initialize:	
 12349                           
 12350                           ;protocol.c: 61: device_id_ = device_id;
 12351                           
 12352                           ;incstack = 0
 12353                           ; Regs used in _PROTOCOL_Initialize: [wreg+status,2+status,0+pclath+cstack]
 12354  0893  0020               	movlb	0	; select bank0
 12355  0894  0822               	movf	PROTOCOL_Initialize@device_id+1,w
 12356  0895  0022               	movlb	2	; select bank2
 12357  0896  00A7               	movwf	(_device_id_+1)^(0+256)
 12358  0897  0020               	movlb	0	; select bank0
 12359  0898  0821               	movf	PROTOCOL_Initialize@device_id,w
 12360  0899  0022               	movlb	2	; select bank2
 12361  089A  00A6               	movwf	_device_id_^(0+256)
 12362                           
 12363                           ;protocol.c: 62: PROTOCOL_Start_Handler = start_handler;
 12364  089B  0020               	movlb	0	; select bank0
 12365  089C  0823               	movf	PROTOCOL_Initialize@start_handler,w
 12366  089D  00A9               	movwf	??_PROTOCOL_Initialize
 12367  089E  3000               	movlw	0
 12368  089F  00AA               	movwf	??_PROTOCOL_Initialize+1
 12369  08A0  0829               	movf	??_PROTOCOL_Initialize,w
 12370  08A1  0022               	movlb	2	; select bank2
 12371  08A2  00B4               	movwf	_PROTOCOL_Start_Handler^(0+256)
 12372  08A3  0020               	movlb	0	; select bank0
 12373  08A4  082A               	movf	??_PROTOCOL_Initialize+1,w
 12374  08A5  0022               	movlb	2	; select bank2
 12375  08A6  00B5               	movwf	(_PROTOCOL_Start_Handler+1)^(0+256)
 12376                           
 12377                           ;protocol.c: 63: PROTOCOL_Stop_Handler = stop_handler;
 12378  08A7  0020               	movlb	0	; select bank0
 12379  08A8  0824               	movf	PROTOCOL_Initialize@stop_handler,w
 12380  08A9  00A9               	movwf	??_PROTOCOL_Initialize
 12381  08AA  3000               	movlw	0
 12382  08AB  00AA               	movwf	??_PROTOCOL_Initialize+1
 12383  08AC  0829               	movf	??_PROTOCOL_Initialize,w
 12384  08AD  0022               	movlb	2	; select bank2
 12385  08AE  00B2               	movwf	_PROTOCOL_Stop_Handler^(0+256)
 12386  08AF  0020               	movlb	0	; select bank0
 12387  08B0  082A               	movf	??_PROTOCOL_Initialize+1,w
 12388  08B1  0022               	movlb	2	; select bank2
 12389  08B2  00B3               	movwf	(_PROTOCOL_Stop_Handler+1)^(0+256)
 12390                           
 12391                           ;protocol.c: 64: PROTOCOL_Set_Handler = set_handler;
 12392  08B3  0020               	movlb	0	; select bank0
 12393  08B4  0825               	movf	PROTOCOL_Initialize@set_handler,w
 12394  08B5  00A9               	movwf	??_PROTOCOL_Initialize
 12395  08B6  3000               	movlw	0
 12396  08B7  00AA               	movwf	??_PROTOCOL_Initialize+1
 12397  08B8  0829               	movf	??_PROTOCOL_Initialize,w
 12398  08B9  0022               	movlb	2	; select bank2
 12399  08BA  00B0               	movwf	_PROTOCOL_Set_Handler^(0+256)
 12400  08BB  0020               	movlb	0	; select bank0
 12401  08BC  082A               	movf	??_PROTOCOL_Initialize+1,w
 12402  08BD  0022               	movlb	2	; select bank2
 12403  08BE  00B1               	movwf	(_PROTOCOL_Set_Handler+1)^(0+256)
 12404                           
 12405                           ;protocol.c: 67: value = DATAEE_ReadByte(1);
 12406  08BF  3001               	movlw	1
 12407  08C0  3192  2238  3188   	fcall	_DATAEE_ReadByte
 12408  08C3  0020               	movlb	0	; select bank0
 12409  08C4  00A9               	movwf	??_PROTOCOL_Initialize
 12410  08C5  0829               	movf	??_PROTOCOL_Initialize,w
 12411  08C6  0021               	movlb	1	; select bank1
 12412  08C7  00DE               	movwf	_value^(0+128)
 12413                           
 12414                           ;protocol.c: 69: slave_address = DATAEE_ReadByte(0);
 12415  08C8  3000               	movlw	0
 12416  08C9  3192  2238         	fcall	_DATAEE_ReadByte
 12417  08CB  0020               	movlb	0	; select bank0
 12418  08CC  00A9               	movwf	??_PROTOCOL_Initialize
 12419  08CD  0829               	movf	??_PROTOCOL_Initialize,w
 12420  08CE  0021               	movlb	1	; select bank1
 12421  08CF  00E0               	movwf	_slave_address^(0+128)
 12422                           
 12423                           ;protocol.c: 72: readbuf.status = COMPLETE;
 12424  08D0  3003               	movlw	3
 12425  08D1  0020               	movlb	0	; select bank0
 12426  08D2  00A9               	movwf	??_PROTOCOL_Initialize
 12427  08D3  0829               	movf	??_PROTOCOL_Initialize,w
 12428  08D4  0022               	movlb	2	; select bank2
 12429  08D5  00CA               	movwf	(_readbuf^(0+256)+4)
 12430                           
 12431                           ;protocol.c: 73: PROTOCOL_Inv_Handler = inv_handler;
 12432  08D6  0020               	movlb	0	; select bank0
 12433  08D7  0827               	movf	PROTOCOL_Initialize@inv_handler+1,w
 12434  08D8  0022               	movlb	2	; select bank2
 12435  08D9  00AB               	movwf	(_PROTOCOL_Inv_Handler+1)^(0+256)
 12436  08DA  0020               	movlb	0	; select bank0
 12437  08DB  0826               	movf	PROTOCOL_Initialize@inv_handler,w
 12438  08DC  0022               	movlb	2	; select bank2
 12439  08DD  00AA               	movwf	_PROTOCOL_Inv_Handler^(0+256)
 12440                           
 12441                           ;protocol.c: 74: tmr_scaler = scaler;
 12442  08DE  0020               	movlb	0	; select bank0
 12443  08DF  0828               	movf	PROTOCOL_Initialize@scaler,w
 12444  08E0  00A9               	movwf	??_PROTOCOL_Initialize
 12445  08E1  0829               	movf	??_PROTOCOL_Initialize,w
 12446  08E2  0022               	movlb	2	; select bank2
 12447  08E3  00E2               	movwf	_tmr_scaler^(0+256)
 12448  08E4  0008               	return
 12449  08E5                     __end_of_PROTOCOL_Initialize:	
 12450                           
 12451                           	psect	text61
 12452  1238                     __ptext61:	
 12453 ;; *************** function _DATAEE_ReadByte *****************
 12454 ;; Defined at:
 12455 ;;		line 204 in file "mcc_generated_files/memory.c"
 12456 ;; Parameters:    Size  Location     Type
 12457 ;;  bAdd            1    wreg     unsigned char 
 12458 ;; Auto vars:     Size  Location     Type
 12459 ;;  bAdd            1    0[BANK0 ] unsigned char 
 12460 ;; Return value:  Size  Location     Type
 12461 ;;                  1    wreg      unsigned char 
 12462 ;; Registers used:
 12463 ;;		wreg
 12464 ;; Tracked objects:
 12465 ;;		On entry : 0/0
 12466 ;;		On exit  : 0/0
 12467 ;;		Unchanged: 0/0
 12468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12470 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12472 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12473 ;;Total ram usage:        1 bytes
 12474 ;; Hardware stack levels used:    1
 12475 ;; Hardware stack levels required when called:    3
 12476 ;; This function calls:
 12477 ;;		Nothing
 12478 ;; This function is called by:
 12479 ;;		_init
 12480 ;;		_PROTOCOL_Initialize
 12481 ;; This function uses a non-reentrant model
 12482 ;;
 12483                           
 12484                           
 12485                           ;psect for function _DATAEE_ReadByte
 12486  1238                     _DATAEE_ReadByte:	
 12487                           
 12488                           ;incstack = 0
 12489                           ; Regs used in _DATAEE_ReadByte: [wreg]
 12490                           ;DATAEE_ReadByte@bAdd stored from wreg
 12491  1238  0020               	movlb	0	; select bank0
 12492  1239  00A0               	movwf	DATAEE_ReadByte@bAdd
 12493                           
 12494                           ;memory.c: 206: EEADRL = (bAdd & 0x0ff);
 12495  123A  0820               	movf	DATAEE_ReadByte@bAdd,w
 12496  123B  0023               	movlb	3	; select bank3
 12497  123C  0091               	movwf	17	;volatile
 12498                           
 12499                           ;memory.c: 207: EECON1bits.CFGS = 0;
 12500  123D  1315               	bcf	21,6	;volsfr
 12501                           
 12502                           ;memory.c: 208: EECON1bits.EEPGD = 0;
 12503  123E  1395               	bcf	21,7	;volsfr
 12504                           
 12505                           ;memory.c: 209: EECON1bits.RD = 1;
 12506  123F  1415               	bsf	21,0	;volsfr
 12507                           
 12508                           ;memory.c: 210: __nop();
 12509  1240  0000               	nop
 12510                           
 12511                           ;memory.c: 211: __nop();
 12512  1241  0000               	nop
 12513                           
 12514                           ;memory.c: 213: return (EEDATL);
 12515  1242  0023               	movlb	3	; select bank3
 12516  1243  0813               	movf	19,w	;volatile
 12517  1244  0008               	return
 12518  1245                     __end_of_DATAEE_ReadByte:	
 12519                           
 12520                           	psect	intentry
 12521  0004                     __pintentry:	
 12522 ;; *************** function _INTERRUPT_InterruptManager *****************
 12523 ;; Defined at:
 12524 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
 12525 ;; Parameters:    Size  Location     Type
 12526 ;;		None
 12527 ;; Auto vars:     Size  Location     Type
 12528 ;;		None
 12529 ;; Return value:  Size  Location     Type
 12530 ;;                  1    wreg      void 
 12531 ;; Registers used:
 12532 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12533 ;; Tracked objects:
 12534 ;;		On entry : 0/0
 12535 ;;		On exit  : 0/0
 12536 ;;		Unchanged: 0/0
 12537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12539 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12540 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12541 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12542 ;;Total ram usage:        1 bytes
 12543 ;; Hardware stack levels used:    1
 12544 ;; Hardware stack levels required when called:    2
 12545 ;; This function calls:
 12546 ;;		_EUSART_Receive_ISR
 12547 ;;		_EUSART_Transmit_ISR
 12548 ;;		_I2C1_BusCollisionISR
 12549 ;;		_I2C1_ISR
 12550 ;; This function is called by:
 12551 ;;		Interrupt level 1
 12552 ;; This function uses a non-reentrant model
 12553 ;;
 12554                           
 12555  0004                     _INTERRUPT_InterruptManager:	
 12556                           
 12557                           ;incstack = 0
 12558  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 12559                           
 12560                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12561  0005  3180               	pagesel	$
 12562  0006  0020               	movlb	0	; select bank0
 12563  0007  087F               	movf	127,w
 12564  0008  00FD               	movwf	??_INTERRUPT_InterruptManager
 12565                           
 12566                           ;interrupt_manager.c: 54: if(INTCONbits.PEIE == 1 && PIE1bits.TXIE == 1 && PIR1bits.TXIF
      +                           == 1)
 12567  0009  1F0B               	btfss	11,6	;volatile
 12568  000A  2815               	goto	i1l321
 12569  000B  0021               	movlb	1	; select bank1
 12570  000C  1E11               	btfss	17,4	;volatile
 12571  000D  2815               	goto	i1l321
 12572  000E  0020               	movlb	0	; select bank0
 12573  000F  1E11               	btfss	17,4	;volatile
 12574  0010  2815               	goto	i1l321
 12575                           
 12576                           ;interrupt_manager.c: 55: {
 12577                           ;interrupt_manager.c: 56: EUSART_Transmit_ISR();
 12578  0011  3193  233B  3180   	fcall	_EUSART_Transmit_ISR
 12579                           
 12580                           ;interrupt_manager.c: 57: }
 12581  0014  2837               	goto	i1l329
 12582  0015                     i1l321:	
 12583                           
 12584                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits
      +                          .RCIF == 1)
 12585  0015  1F0B               	btfss	11,6	;volatile
 12586  0016  2821               	goto	i1l323
 12587  0017  0021               	movlb	1	; select bank1
 12588  0018  1E91               	btfss	17,5	;volatile
 12589  0019  2821               	goto	i1l323
 12590  001A  0020               	movlb	0	; select bank0
 12591  001B  1E91               	btfss	17,5	;volatile
 12592  001C  2821               	goto	i1l323
 12593                           
 12594                           ;interrupt_manager.c: 59: {
 12595                           ;interrupt_manager.c: 60: EUSART_Receive_ISR();
 12596  001D  3193  231F  3180   	fcall	_EUSART_Receive_ISR
 12597                           
 12598                           ;interrupt_manager.c: 61: }
 12599  0020  2837               	goto	i1l329
 12600  0021                     i1l323:	
 12601                           
 12602                           ;interrupt_manager.c: 62: else if(INTCONbits.PEIE == 1 && PIE2bits.BCL1IE == 1 && PIR2bi
      +                          ts.BCL1IF == 1)
 12603  0021  1F0B               	btfss	11,6	;volatile
 12604  0022  282D               	goto	i1l325
 12605  0023  0021               	movlb	1	; select bank1
 12606  0024  1D92               	btfss	18,3	;volatile
 12607  0025  282D               	goto	i1l325
 12608  0026  0020               	movlb	0	; select bank0
 12609  0027  1D92               	btfss	18,3	;volatile
 12610  0028  282D               	goto	i1l325
 12611                           
 12612                           ;interrupt_manager.c: 63: {
 12613                           ;interrupt_manager.c: 64: I2C1_BusCollisionISR();
 12614  0029  3187  27FF  3180   	fcall	_I2C1_BusCollisionISR
 12615                           
 12616                           ;interrupt_manager.c: 65: }
 12617  002C  2837               	goto	i1l329
 12618  002D                     i1l325:	
 12619                           
 12620                           ;interrupt_manager.c: 66: else if(INTCONbits.PEIE == 1 && PIE1bits.SSP1IE == 1 && PIR1bi
      +                          ts.SSP1IF == 1)
 12621  002D  1F0B               	btfss	11,6	;volatile
 12622  002E  2837               	goto	i1l329
 12623  002F  0021               	movlb	1	; select bank1
 12624  0030  1D91               	btfss	17,3	;volatile
 12625  0031  2837               	goto	i1l329
 12626  0032  0020               	movlb	0	; select bank0
 12627  0033  1D91               	btfss	17,3	;volatile
 12628  0034  2837               	goto	i1l329
 12629                           
 12630                           ;interrupt_manager.c: 67: {
 12631                           ;interrupt_manager.c: 68: I2C1_ISR();
 12632  0035  318B  2349         	fcall	_I2C1_ISR
 12633  0037                     i1l329:	
 12634                           ;interrupt_manager.c: 70: else
 12635                           ;interrupt_manager.c: 71: {
 12636                           
 12637                           ;interrupt_manager.c: 69: }
 12638                           
 12639  0037  087D               	movf	??_INTERRUPT_InterruptManager,w
 12640  0038  0020               	movlb	0	; select bank0
 12641  0039  00FF               	movwf	127
 12642  003A  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 12643  003B  0009               	retfie
 12644  003C                     __end_of_INTERRUPT_InterruptManager:	
 12645                           
 12646                           	psect	text63
 12647  0B49                     __ptext63:	
 12648 ;; *************** function _I2C1_ISR *****************
 12649 ;; Defined at:
 12650 ;;		line 233 in file "mcc_generated_files/i2c1.c"
 12651 ;; Parameters:    Size  Location     Type
 12652 ;;		None
 12653 ;; Auto vars:     Size  Location     Type
 12654 ;;		None
 12655 ;; Return value:  Size  Location     Type
 12656 ;;                  1    wreg      void 
 12657 ;; Registers used:
 12658 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12659 ;; Tracked objects:
 12660 ;;		On entry : 0/0
 12661 ;;		On exit  : 0/0
 12662 ;;		Unchanged: 0/0
 12663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12665 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12666 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12667 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12668 ;;Total ram usage:        4 bytes
 12669 ;; Hardware stack levels used:    1
 12670 ;; Hardware stack levels required when called:    1
 12671 ;; This function calls:
 12672 ;;		_I2C1_FunctionComplete
 12673 ;;		_I2C1_Stop
 12674 ;; This function is called by:
 12675 ;;		_INTERRUPT_InterruptManager
 12676 ;; This function uses a non-reentrant model
 12677 ;;
 12678                           
 12679                           
 12680                           ;psect for function _I2C1_ISR
 12681  0B49                     _I2C1_ISR:	
 12682                           
 12683                           ;i2c1.c: 236: static uint8_t *pi2c_buf_ptr;
 12684                           ;i2c1.c: 237: static uint16_t i2c_address = 0;
 12685                           ;i2c1.c: 238: static uint8_t i2c_bytes_left = 0;
 12686                           ;i2c1.c: 239: static uint8_t i2c_10bit_address_restart = 0;
 12687                           ;i2c1.c: 241: PIR1bits.SSP1IF = 0;
 12688                           
 12689                           ;incstack = 0
 12690                           ; Regs used in _I2C1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12691  0B49  0020               	movlb	0	; select bank0
 12692  0B4A  1191               	bcf	17,3	;volatile
 12693                           
 12694                           ;i2c1.c: 245: if(SSP1CON1bits.WCOL)
 12695  0B4B  0024               	movlb	4	; select bank4
 12696  0B4C  1F95               	btfss	21,7	;volatile
 12697  0B4D  2C94               	goto	i1l5952
 12698                           
 12699                           ;i2c1.c: 246: {
 12700                           ;i2c1.c: 248: SSP1CON1bits.WCOL = 0;
 12701  0B4E  1395               	bcf	21,7	;volatile
 12702                           
 12703                           ;i2c1.c: 249: i2c1_state = S_MASTER_IDLE;
 12704  0B4F  0021               	movlb	1	; select bank1
 12705  0B50  01EC               	clrf	_i2c1_state^(0+128)
 12706                           
 12707                           ;i2c1.c: 250: *(p_i2c1_current->pTrFlag) = I2C1_MESSAGE_FAIL;
 12708  0B51  0869               	movf	_p_i2c1_current^(0+128),w
 12709  0B52  3E02               	addlw	2
 12710  0B53  0086               	movwf	6
 12711  0B54  3001               	movlw	1	; select bank2/3
 12712  0B55  0087               	movwf	7
 12713  0B56  0801               	movf	1,w
 12714  0B57  0086               	movwf	6
 12715  0B58  0187               	clrf	7
 12716  0B59  0181               	clrf	1
 12717  0B5A  0A81               	incf	1,f
 12718                           
 12719                           ;i2c1.c: 253: p_i2c1_current = (0);
 12720  0B5B  01E9               	clrf	_p_i2c1_current^(0+128)
 12721                           
 12722                           ;i2c1.c: 255: return;
 12723  0B5C  0008               	return
 12724  0B5D                     i1l60:	
 12725                           ;i2c1.c: 260: {
 12726                           ;i2c1.c: 261: case S_MASTER_IDLE:
 12727                           
 12728                           ;i2c1.c: 256: }
 12729                           ;i2c1.c: 259: switch(i2c1_state)
 12730                           
 12731                           
 12732                           ;i2c1.c: 263: if(i2c1_object.trStatus.s.empty != 1)
 12733  0B5D  18DB               	btfsc	(_i2c1_object^(0+128)+2),1
 12734  0B5E  0008               	return
 12735                           
 12736                           ;i2c1.c: 264: {
 12737                           ;i2c1.c: 266: p_i2c1_current = i2c1_object.pTrHead;
 12738  0B5F  085A               	movf	(low ((_i2c1_object| 0+1)))^(0+128),w
 12739  0B60  00F9               	movwf	??_I2C1_ISR
 12740  0B61  0879               	movf	??_I2C1_ISR,w
 12741  0B62  00E9               	movwf	_p_i2c1_current^(0+128)
 12742                           
 12743                           ;i2c1.c: 267: i2c1_trb_count = i2c1_object.pTrHead->count;
 12744  0B63  085A               	movf	(low ((_i2c1_object| 0+1)))^(0+128),w
 12745  0B64  0086               	movwf	6
 12746  0B65  3001               	movlw	1	; select bank2/3
 12747  0B66  0087               	movwf	7
 12748  0B67  0801               	movf	1,w
 12749  0B68  00F9               	movwf	??_I2C1_ISR
 12750  0B69  0879               	movf	??_I2C1_ISR,w
 12751  0B6A  00EB               	movwf	_i2c1_trb_count^(0+128)
 12752                           
 12753                           ;i2c1.c: 268: p_i2c1_trb_current = i2c1_object.pTrHead->ptrb_list;
 12754  0B6B  085A               	movf	(low ((_i2c1_object| 0+1)))^(0+128),w
 12755  0B6C  0086               	movwf	6
 12756  0B6D  3001               	movlw	1	; select bank2/3
 12757  0B6E  0087               	movwf	7
 12758  0B6F  3001               	movlw	1	; select bank2/3
 12759  0B70  3F41               	moviw [1]fsr1
 12760  0B71  00EA               	movwf	_p_i2c1_trb_current^(0+128)
 12761                           
 12762                           ;i2c1.c: 270: i2c1_object.pTrHead++;
 12763  0B72  3003               	movlw	3
 12764  0B73  00F9               	movwf	??_I2C1_ISR
 12765  0B74  0879               	movf	??_I2C1_ISR,w
 12766  0B75  07DA               	addwf	(low ((_i2c1_object| 0+1)))^(0+128),f
 12767                           
 12768                           ;i2c1.c: 273: if(i2c1_object.pTrHead == (i2c1_tr_queue + 1))
 12769  0B76  085A               	movf	(low ((_i2c1_object| 0+1)))^(0+128),w
 12770  0B77  3A5C               	xorlw	(low ((_i2c1_tr_queue| (0+256)+3)))& (0+255)
 12771  0B78  1D03               	skipz
 12772  0B79  2B7E               	goto	i1l5842
 12773                           
 12774                           ;i2c1.c: 274: {
 12775                           ;i2c1.c: 276: i2c1_object.pTrHead = i2c1_tr_queue;
 12776  0B7A  3059               	movlw	(low (_i2c1_tr_queue| (0+256)))& (0+255)
 12777  0B7B  00F9               	movwf	??_I2C1_ISR
 12778  0B7C  0879               	movf	??_I2C1_ISR,w
 12779  0B7D  00DA               	movwf	(low ((_i2c1_object| 0+1)))^(0+128)
 12780  0B7E                     i1l5842:	
 12781                           
 12782                           ;i2c1.c: 277: }
 12783                           ;i2c1.c: 281: i2c1_object.trStatus.s.full = 0;
 12784  0B7E  105B               	bcf	(_i2c1_object^(0+128)+2),0
 12785                           
 12786                           ;i2c1.c: 284: if(i2c1_object.pTrHead == i2c1_object.pTrTail)
 12787  0B7F  085A               	movf	(low ((_i2c1_object| 0+1)))^(0+128),w
 12788  0B80  0659               	xorwf	_i2c1_object^(0+128),w
 12789  0B81  1903               	btfsc	3,2
 12790                           
 12791                           ;i2c1.c: 285: {
 12792                           ;i2c1.c: 287: i2c1_object.trStatus.s.empty = 1;
 12793  0B82  14DB               	bsf	(_i2c1_object^(0+128)+2),1
 12794                           
 12795                           ;i2c1.c: 288: }
 12796                           ;i2c1.c: 291: SSP1CON2bits.SEN = 1;
 12797  0B83  0024               	movlb	4	; select bank4
 12798  0B84  1416               	bsf	22,0	;volatile
 12799                           
 12800                           ;i2c1.c: 294: i2c1_state = S_MASTER_SEND_ADDR;
 12801  0B85  3002               	movlw	2
 12802  0B86  00F9               	movwf	??_I2C1_ISR
 12803  0B87  0879               	movf	??_I2C1_ISR,w
 12804  0B88  0021               	movlb	1	; select bank1
 12805  0B89  00EC               	movwf	_i2c1_state^(0+128)
 12806                           
 12807                           ;i2c1.c: 295: }
 12808                           ;i2c1.c: 297: break;
 12809  0B8A  0008               	return
 12810  0B8B                     i1l65:	
 12811                           ;i2c1.c: 299: case S_MASTER_RESTART:
 12812                           
 12813                           
 12814                           ;i2c1.c: 304: SSP1CON2bits.RSEN = 1;
 12815  0B8B  0024               	movlb	4	; select bank4
 12816  0B8C  1496               	bsf	22,1	;volatile
 12817                           
 12818                           ;i2c1.c: 307: i2c1_state = S_MASTER_SEND_ADDR;
 12819  0B8D  3002               	movlw	2
 12820  0B8E  00F9               	movwf	??_I2C1_ISR
 12821  0B8F  0879               	movf	??_I2C1_ISR,w
 12822  0B90  0021               	movlb	1	; select bank1
 12823  0B91  00EC               	movwf	_i2c1_state^(0+128)
 12824                           
 12825                           ;i2c1.c: 309: break;
 12826  0B92  0008               	return
 12827  0B93                     i1l66:	
 12828                           ;i2c1.c: 311: case S_MASTER_SEND_ADDR_10BIT_LSB:
 12829                           
 12830                           
 12831                           ;i2c1.c: 313: if(SSP1CON2bits.ACKSTAT)
 12832  0B93  0024               	movlb	4	; select bank4
 12833  0B94  1F16               	btfss	22,6	;volatile
 12834  0B95  2B9F               	goto	i1l5854
 12835                           
 12836                           ;i2c1.c: 314: {
 12837                           ;i2c1.c: 315: i2c1_object.i2cErrors++;
 12838  0B96  3001               	movlw	1
 12839  0B97  00F9               	movwf	??_I2C1_ISR
 12840  0B98  0879               	movf	??_I2C1_ISR,w
 12841  0B99  0021               	movlb	1	; select bank1
 12842  0B9A  07DD               	addwf	(_i2c1_object^(0+128)+4),f
 12843                           
 12844                           ;i2c1.c: 316: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
 12845  0B9B  3004               	movlw	4
 12846  0B9C  3192  22D0         	fcall	_I2C1_Stop
 12847                           
 12848                           ;i2c1.c: 317: }
 12849  0B9E  0008               	return
 12850  0B9F                     i1l5854:	
 12851                           
 12852                           ;i2c1.c: 318: else
 12853                           ;i2c1.c: 319: {
 12854                           ;i2c1.c: 321: SSP1BUF = (i2c_address >> 1) & 0x00FF;
 12855  0B9F  0020               	movlb	0	; select bank0
 12856  0BA0  086E               	movf	I2C1_ISR@i2c_address+1,w
 12857  0BA1  00FA               	movwf	??_I2C1_ISR+1
 12858  0BA2  086D               	movf	I2C1_ISR@i2c_address,w
 12859  0BA3  00F9               	movwf	??_I2C1_ISR
 12860  0BA4  36FA               	lsrf	??_I2C1_ISR+1,f
 12861  0BA5  0CF9               	rrf	??_I2C1_ISR,f
 12862  0BA6  0879               	movf	??_I2C1_ISR,w
 12863  0BA7  0024               	movlb	4	; select bank4
 12864  0BA8  0091               	movwf	17	;volatile
 12865                           
 12866                           ;i2c1.c: 324: if(i2c_address & 0x01)
 12867  0BA9  0020               	movlb	0	; select bank0
 12868  0BAA  1C6D               	btfss	I2C1_ISR@i2c_address,0
 12869  0BAB  2BB2               	goto	i1l5860
 12870                           
 12871                           ;i2c1.c: 325: {
 12872                           ;i2c1.c: 328: i2c1_state = S_MASTER_10BIT_RESTART;
 12873  0BAC  300B               	movlw	11
 12874  0BAD  00F9               	movwf	??_I2C1_ISR
 12875  0BAE  0879               	movf	??_I2C1_ISR,w
 12876  0BAF  0021               	movlb	1	; select bank1
 12877  0BB0  00EC               	movwf	_i2c1_state^(0+128)
 12878                           
 12879                           ;i2c1.c: 329: }
 12880  0BB1  0008               	return
 12881  0BB2                     i1l5860:	
 12882                           
 12883                           ;i2c1.c: 330: else
 12884                           ;i2c1.c: 331: {
 12885                           ;i2c1.c: 333: i2c1_state = S_MASTER_SEND_DATA;
 12886  0BB2  3003               	movlw	3
 12887  0BB3  00F9               	movwf	??_I2C1_ISR
 12888  0BB4  0879               	movf	??_I2C1_ISR,w
 12889  0BB5  0021               	movlb	1	; select bank1
 12890  0BB6  00EC               	movwf	_i2c1_state^(0+128)
 12891                           
 12892                           ;i2c1.c: 334: }
 12893                           ;i2c1.c: 335: }
 12894                           ;i2c1.c: 337: break;
 12895  0BB7  0008               	return
 12896  0BB8                     i1l71:	
 12897                           ;i2c1.c: 339: case S_MASTER_10BIT_RESTART:
 12898                           
 12899                           
 12900                           ;i2c1.c: 341: if(SSP1CON2bits.ACKSTAT)
 12901  0BB8  0024               	movlb	4	; select bank4
 12902  0BB9  1F16               	btfss	22,6	;volatile
 12903  0BBA  2BC4               	goto	i1l72
 12904                           
 12905                           ;i2c1.c: 342: {
 12906                           ;i2c1.c: 343: i2c1_object.i2cErrors++;
 12907  0BBB  3001               	movlw	1
 12908  0BBC  00F9               	movwf	??_I2C1_ISR
 12909  0BBD  0879               	movf	??_I2C1_ISR,w
 12910  0BBE  0021               	movlb	1	; select bank1
 12911  0BBF  07DD               	addwf	(_i2c1_object^(0+128)+4),f
 12912                           
 12913                           ;i2c1.c: 344: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
 12914  0BC0  3004               	movlw	4
 12915  0BC1  3192  22D0         	fcall	_I2C1_Stop
 12916                           
 12917                           ;i2c1.c: 345: }
 12918  0BC3  0008               	return
 12919  0BC4                     i1l72:	
 12920                           
 12921                           ;i2c1.c: 346: else
 12922                           ;i2c1.c: 347: {
 12923                           ;i2c1.c: 350: SSP1CON2bits.RSEN = 1;
 12924  0BC4  1496               	bsf	22,1	;volatile
 12925                           
 12926                           ;i2c1.c: 354: i2c_address = 0x00F0 | ((i2c_address >> 8) & 0x0006);
 12927  0BC5  0020               	movlb	0	; select bank0
 12928  0BC6  086E               	movf	I2C1_ISR@i2c_address+1,w
 12929  0BC7  00FA               	movwf	??_I2C1_ISR+1
 12930  0BC8  086D               	movf	I2C1_ISR@i2c_address,w
 12931  0BC9  00F9               	movwf	??_I2C1_ISR
 12932  0BCA  087A               	movf	??_I2C1_ISR+1,w
 12933  0BCB  00F9               	movwf	??_I2C1_ISR
 12934  0BCC  01FA               	clrf	??_I2C1_ISR+1
 12935  0BCD  3006               	movlw	6
 12936  0BCE  0579               	andwf	??_I2C1_ISR,w
 12937  0BCF  00FB               	movwf	??_I2C1_ISR+2
 12938  0BD0  3000               	movlw	0
 12939  0BD1  057A               	andwf	??_I2C1_ISR+1,w
 12940  0BD2  00FC               	movwf	??_I2C1_ISR+3
 12941  0BD3  30F0               	movlw	240
 12942  0BD4  047B               	iorwf	??_I2C1_ISR+2,w
 12943  0BD5  00ED               	movwf	I2C1_ISR@i2c_address
 12944  0BD6  3000               	movlw	0
 12945  0BD7  047C               	iorwf	??_I2C1_ISR+3,w
 12946  0BD8  00EE               	movwf	I2C1_ISR@i2c_address+1
 12947                           
 12948                           ;i2c1.c: 357: i2c_address |= 0x0001;
 12949  0BD9  146D               	bsf	I2C1_ISR@i2c_address,0
 12950                           
 12951                           ;i2c1.c: 360: i2c_10bit_address_restart = 1;
 12952  0BDA  0021               	movlb	1	; select bank1
 12953  0BDB  01E7               	clrf	I2C1_ISR@i2c_10bit_address_restart^(0+128)
 12954  0BDC  0AE7               	incf	I2C1_ISR@i2c_10bit_address_restart^(0+128),f
 12955                           
 12956                           ;i2c1.c: 363: i2c1_state = S_MASTER_SEND_ADDR;
 12957  0BDD  3002               	movlw	2
 12958  0BDE  00F9               	movwf	??_I2C1_ISR
 12959  0BDF  0879               	movf	??_I2C1_ISR,w
 12960  0BE0  00EC               	movwf	_i2c1_state^(0+128)
 12961                           
 12962                           ;i2c1.c: 364: }
 12963                           ;i2c1.c: 366: break;
 12964  0BE1  0008               	return
 12965  0BE2                     i1l5874:	
 12966                           ;i2c1.c: 368: case S_MASTER_SEND_ADDR:
 12967                           
 12968                           
 12969                           ;i2c1.c: 381: if(i2c_10bit_address_restart != 1)
 12970  0BE2  0367               	decf	I2C1_ISR@i2c_10bit_address_restart^(0+128),w
 12971  0BE3  1903               	btfsc	3,2
 12972  0BE4  2C01               	goto	i1l5892
 12973                           
 12974                           ;i2c1.c: 382: {
 12975                           ;i2c1.c: 384: i2c_address = p_i2c1_trb_current->address;
 12976  0BE5  086A               	movf	_p_i2c1_trb_current^(0+128),w
 12977  0BE6  0086               	movwf	6
 12978  0BE7  3001               	movlw	1	; select bank2/3
 12979  0BE8  0087               	movwf	7
 12980  0BE9  3F40               	moviw [0]fsr1
 12981  0BEA  0020               	movlb	0	; select bank0
 12982  0BEB  00ED               	movwf	I2C1_ISR@i2c_address
 12983  0BEC  3F41               	moviw [1]fsr1
 12984  0BED  00EE               	movwf	I2C1_ISR@i2c_address+1
 12985                           
 12986                           ;i2c1.c: 385: pi2c_buf_ptr = p_i2c1_trb_current->pbuffer;
 12987  0BEE  0021               	movlb	1	; select bank1
 12988  0BEF  086A               	movf	_p_i2c1_trb_current^(0+128),w
 12989  0BF0  3E03               	addlw	3
 12990  0BF1  0086               	movwf	6
 12991  0BF2  3001               	movlw	1	; select bank2/3
 12992  0BF3  0087               	movwf	7
 12993  0BF4  3F40               	moviw [0]fsr1
 12994  0BF5  0022               	movlb	2	; select bank2
 12995  0BF6  00B8               	movwf	I2C1_ISR@pi2c_buf_ptr^(0+256)
 12996  0BF7  3F41               	moviw [1]fsr1
 12997  0BF8  00B9               	movwf	(I2C1_ISR@pi2c_buf_ptr+1)^(0+256)
 12998                           
 12999                           ;i2c1.c: 386: i2c_bytes_left = p_i2c1_trb_current->length;
 13000  0BF9  0021               	movlb	1	; select bank1
 13001  0BFA  086A               	movf	_p_i2c1_trb_current^(0+128),w
 13002  0BFB  0086               	movwf	6
 13003  0BFC  3001               	movlw	1	; select bank2/3
 13004  0BFD  0087               	movwf	7
 13005  0BFE  3001               	movlw	1	; select bank2/3
 13006  0BFF  3F42               	moviw [2]fsr1
 13007  0C00  00E8               	movwf	I2C1_ISR@i2c_bytes_left^(0+128)
 13008  0C01                     i1l5892:	
 13009                           ;i2c1.c: 407: }
 13010                           ;i2c1.c: 408: }
 13011                           
 13012                           ;i2c1.c: 406: i2c_10bit_address_restart = 0;
 13013                           
 13014                           ;i2c1.c: 404: i2c1_state = S_MASTER_ACK_ADDR;
 13015                           
 13016                           ;i2c1.c: 400: else
 13017                           ;i2c1.c: 401: {
 13018                           ;i2c1.c: 403: SSP1BUF = i2c_address;
 13019                           
 13020                           ;i2c1.c: 399: }
 13021                           
 13022                           ;i2c1.c: 398: i2c1_state = S_MASTER_SEND_ADDR_10BIT_LSB;
 13023                           
 13024                           ;i2c1.c: 393: {
 13025                           ;i2c1.c: 397: SSP1BUF = 0xF0 | ((i2c_address >> 8) & 0x0006);
 13026                           
 13027                           ;i2c1.c: 391: {
 13028                           ;i2c1.c: 392: if (0 == i2c_10bit_address_restart)
 13029                           
 13030                           ;i2c1.c: 387: }
 13031                           ;i2c1.c: 390: if(!1 && (0x0 != i2c_address))
 13032                           
 13033                           
 13034                           ;i2c1.c: 409: else
 13035                           ;i2c1.c: 410: {
 13036                           ;i2c1.c: 412: SSP1BUF = i2c_address;
 13037  0C01  0020               	movlb	0	; select bank0
 13038  0C02  086D               	movf	I2C1_ISR@i2c_address,w
 13039  0C03  0024               	movlb	4	; select bank4
 13040  0C04  0091               	movwf	17	;volatile
 13041                           
 13042                           ;i2c1.c: 413: if(i2c_address & 0x01)
 13043  0C05  0020               	movlb	0	; select bank0
 13044  0C06  1C6D               	btfss	I2C1_ISR@i2c_address,0
 13045  0C07  2C0E               	goto	i1l5898
 13046                           
 13047                           ;i2c1.c: 414: {
 13048                           ;i2c1.c: 416: i2c1_state = S_MASTER_ACK_ADDR;
 13049  0C08  3005               	movlw	5
 13050  0C09  00F9               	movwf	??_I2C1_ISR
 13051  0C0A  0879               	movf	??_I2C1_ISR,w
 13052  0C0B  0021               	movlb	1	; select bank1
 13053  0C0C  00EC               	movwf	_i2c1_state^(0+128)
 13054                           
 13055                           ;i2c1.c: 417: }
 13056  0C0D  0008               	return
 13057  0C0E                     i1l5898:	
 13058                           
 13059                           ;i2c1.c: 418: else
 13060                           ;i2c1.c: 419: {
 13061                           ;i2c1.c: 421: i2c1_state = S_MASTER_SEND_DATA;
 13062  0C0E  3003               	movlw	3
 13063  0C0F  00F9               	movwf	??_I2C1_ISR
 13064  0C10  0879               	movf	??_I2C1_ISR,w
 13065  0C11  0021               	movlb	1	; select bank1
 13066  0C12  00EC               	movwf	_i2c1_state^(0+128)
 13067                           
 13068                           ;i2c1.c: 422: }
 13069                           ;i2c1.c: 423: }
 13070                           ;i2c1.c: 424: break;
 13071  0C13  0008               	return
 13072  0C14                     i1l82:	
 13073                           ;i2c1.c: 426: case S_MASTER_SEND_DATA:
 13074                           
 13075                           
 13076                           ;i2c1.c: 429: if(SSP1CON2bits.ACKSTAT)
 13077  0C14  0024               	movlb	4	; select bank4
 13078  0C15  1F16               	btfss	22,6	;volatile
 13079  0C16  2C22               	goto	i1l5906
 13080                           
 13081                           ;i2c1.c: 430: {
 13082                           ;i2c1.c: 432: i2c1_object.i2cErrors++;
 13083  0C17  3001               	movlw	1
 13084  0C18  00F9               	movwf	??_I2C1_ISR
 13085  0C19  0879               	movf	??_I2C1_ISR,w
 13086  0C1A  0021               	movlb	1	; select bank1
 13087  0C1B  07DD               	addwf	(_i2c1_object^(0+128)+4),f
 13088                           
 13089                           ;i2c1.c: 435: SSP1CON2bits.ACKSTAT = 0;
 13090  0C1C  0024               	movlb	4	; select bank4
 13091  0C1D  1316               	bcf	22,6	;volatile
 13092                           
 13093                           ;i2c1.c: 438: I2C1_Stop(I2C1_DATA_NO_ACK);
 13094  0C1E  3005               	movlw	5
 13095  0C1F  3192  22D0         	fcall	_I2C1_Stop
 13096                           
 13097                           ;i2c1.c: 440: }
 13098  0C21  0008               	return
 13099  0C22                     i1l5906:	
 13100                           
 13101                           ;i2c1.c: 441: else
 13102                           ;i2c1.c: 442: {
 13103                           ;i2c1.c: 444: if(i2c_bytes_left-- == 0U)
 13104  0C22  3001               	movlw	1
 13105  0C23  0021               	movlb	1	; select bank1
 13106  0C24  02E8               	subwf	I2C1_ISR@i2c_bytes_left^(0+128),f
 13107  0C25  0A68               	incf	I2C1_ISR@i2c_bytes_left^(0+128),w
 13108  0C26  1D03               	btfss	3,2
 13109  0C27  2C3C               	goto	i1l5914
 13110                           
 13111                           ;i2c1.c: 445: {
 13112                           ;i2c1.c: 449: p_i2c1_trb_current++;
 13113  0C28  3005               	movlw	5
 13114  0C29  00F9               	movwf	??_I2C1_ISR
 13115  0C2A  0879               	movf	??_I2C1_ISR,w
 13116  0C2B  07EA               	addwf	_p_i2c1_trb_current^(0+128),f
 13117                           
 13118                           ;i2c1.c: 452: if(--i2c1_trb_count == 0)
 13119  0C2C  3001               	movlw	1
 13120  0C2D  02EB               	subwf	_i2c1_trb_count^(0+128),f
 13121  0C2E  1D03               	btfss	3,2
 13122  0C2F  2C34               	goto	i1l86
 13123                           
 13124                           ;i2c1.c: 453: {
 13125                           ;i2c1.c: 454: I2C1_Stop(I2C1_MESSAGE_COMPLETE);
 13126  0C30  3000               	movlw	0
 13127  0C31  3192  22D0         	fcall	_I2C1_Stop
 13128                           
 13129                           ;i2c1.c: 455: }
 13130  0C33  0008               	return
 13131  0C34                     i1l86:	
 13132                           
 13133                           ;i2c1.c: 456: else
 13134                           ;i2c1.c: 457: {
 13135                           ;i2c1.c: 464: SSP1CON2bits.RSEN = 1;
 13136  0C34  0024               	movlb	4	; select bank4
 13137  0C35  1496               	bsf	22,1	;volatile
 13138                           
 13139                           ;i2c1.c: 467: i2c1_state = S_MASTER_SEND_ADDR;
 13140  0C36  3002               	movlw	2
 13141  0C37  00F9               	movwf	??_I2C1_ISR
 13142  0C38  0879               	movf	??_I2C1_ISR,w
 13143  0C39  0021               	movlb	1	; select bank1
 13144  0C3A  00EC               	movwf	_i2c1_state^(0+128)
 13145                           
 13146                           ;i2c1.c: 469: }
 13147                           ;i2c1.c: 470: }
 13148  0C3B  0008               	return
 13149  0C3C                     i1l5914:	
 13150                           
 13151                           ;i2c1.c: 471: else
 13152                           ;i2c1.c: 472: {
 13153                           ;i2c1.c: 474: SSP1BUF = *pi2c_buf_ptr++;
 13154  0C3C  0022               	movlb	2	; select bank2
 13155  0C3D  0838               	movf	I2C1_ISR@pi2c_buf_ptr^(0+256),w
 13156  0C3E  0086               	movwf	6
 13157  0C3F  0839               	movf	(I2C1_ISR@pi2c_buf_ptr+1)^(0+256),w
 13158  0C40  0087               	movwf	7
 13159  0C41  0801               	movf	1,w
 13160  0C42  0024               	movlb	4	; select bank4
 13161  0C43  0091               	movwf	17	;volatile
 13162  0C44  3001               	movlw	1
 13163  0C45  0022               	movlb	2	; select bank2
 13164  0C46  07B8               	addwf	I2C1_ISR@pi2c_buf_ptr^(0+256),f
 13165  0C47  3000               	movlw	0
 13166  0C48  3DB9               	addwfc	(I2C1_ISR@pi2c_buf_ptr+1)^(0+256),f
 13167                           
 13168                           ;i2c1.c: 475: }
 13169                           ;i2c1.c: 476: }
 13170                           ;i2c1.c: 477: break;
 13171  0C49  0008               	return
 13172  0C4A                     i1l89:	
 13173                           ;i2c1.c: 479: case S_MASTER_ACK_ADDR:
 13174                           
 13175                           
 13176                           ;i2c1.c: 482: if(SSP1CON2bits.ACKSTAT)
 13177  0C4A  0024               	movlb	4	; select bank4
 13178  0C4B  1F16               	btfss	22,6	;volatile
 13179  0C4C  2C58               	goto	i1l90
 13180                           
 13181                           ;i2c1.c: 483: {
 13182                           ;i2c1.c: 486: i2c1_object.i2cErrors++;
 13183  0C4D  3001               	movlw	1
 13184  0C4E  00F9               	movwf	??_I2C1_ISR
 13185  0C4F  0879               	movf	??_I2C1_ISR,w
 13186  0C50  0021               	movlb	1	; select bank1
 13187  0C51  07DD               	addwf	(_i2c1_object^(0+128)+4),f
 13188                           
 13189                           ;i2c1.c: 489: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
 13190  0C52  3004               	movlw	4
 13191  0C53  3192  22D0         	fcall	_I2C1_Stop
 13192                           
 13193                           ;i2c1.c: 492: SSP1CON2bits.ACKSTAT = 0;
 13194  0C55  0024               	movlb	4	; select bank4
 13195  0C56  1316               	bcf	22,6	;volatile
 13196                           
 13197                           ;i2c1.c: 493: }
 13198  0C57  0008               	return
 13199  0C58                     i1l90:	
 13200                           
 13201                           ;i2c1.c: 494: else
 13202                           ;i2c1.c: 495: {
 13203                           ;i2c1.c: 496: SSP1CON2bits.RCEN = 1;
 13204  0C58  1596               	bsf	22,3	;volatile
 13205                           
 13206                           ;i2c1.c: 497: i2c1_state = S_MASTER_ACK_RCV_DATA;
 13207  0C59  3008               	movlw	8
 13208  0C5A  00F9               	movwf	??_I2C1_ISR
 13209  0C5B  0879               	movf	??_I2C1_ISR,w
 13210  0C5C  0021               	movlb	1	; select bank1
 13211  0C5D  00EC               	movwf	_i2c1_state^(0+128)
 13212                           
 13213                           ;i2c1.c: 498: }
 13214                           ;i2c1.c: 499: break;
 13215  0C5E  0008               	return
 13216  0C5F                     i1l5926:	
 13217                           ;i2c1.c: 501: case S_MASTER_RCV_DATA:
 13218                           
 13219                           
 13220                           ;i2c1.c: 506: i2c1_state = S_MASTER_ACK_RCV_DATA;
 13221  0C5F  3008               	movlw	8
 13222  0C60  00F9               	movwf	??_I2C1_ISR
 13223  0C61  0879               	movf	??_I2C1_ISR,w
 13224  0C62  00EC               	movwf	_i2c1_state^(0+128)
 13225                           
 13226                           ;i2c1.c: 509: SSP1CON2bits.RCEN = 1;
 13227  0C63  0024               	movlb	4	; select bank4
 13228  0C64  1596               	bsf	22,3	;volatile
 13229                           
 13230                           ;i2c1.c: 511: break;
 13231  0C65  0008               	return
 13232  0C66                     i1l5930:	
 13233                           ;i2c1.c: 513: case S_MASTER_ACK_RCV_DATA:
 13234                           
 13235                           
 13236                           ;i2c1.c: 516: *pi2c_buf_ptr++ = SSP1BUF;
 13237  0C66  0022               	movlb	2	; select bank2
 13238  0C67  0838               	movf	I2C1_ISR@pi2c_buf_ptr^(0+256),w
 13239  0C68  0086               	movwf	6
 13240  0C69  0839               	movf	(I2C1_ISR@pi2c_buf_ptr+1)^(0+256),w
 13241  0C6A  0087               	movwf	7
 13242  0C6B  0024               	movlb	4	; select bank4
 13243  0C6C  0811               	movf	17,w	;volatile
 13244  0C6D  0081               	movwf	1
 13245  0C6E  3001               	movlw	1
 13246  0C6F  0022               	movlb	2	; select bank2
 13247  0C70  07B8               	addwf	I2C1_ISR@pi2c_buf_ptr^(0+256),f
 13248  0C71  3000               	movlw	0
 13249  0C72  3DB9               	addwfc	(I2C1_ISR@pi2c_buf_ptr+1)^(0+256),f
 13250                           
 13251                           ;i2c1.c: 519: if(--i2c_bytes_left)
 13252  0C73  3001               	movlw	1
 13253  0C74  0021               	movlb	1	; select bank1
 13254  0C75  02E8               	subwf	I2C1_ISR@i2c_bytes_left^(0+128),f
 13255  0C76  1903               	btfsc	3,2
 13256  0C77  2C80               	goto	i1l94
 13257                           
 13258                           ;i2c1.c: 520: {
 13259                           ;i2c1.c: 526: SSP1CON2bits.ACKDT = 0;
 13260  0C78  0024               	movlb	4	; select bank4
 13261  0C79  1296               	bcf	22,5	;volatile
 13262                           
 13263                           ;i2c1.c: 529: i2c1_state = S_MASTER_RCV_DATA;
 13264  0C7A  3006               	movlw	6
 13265  0C7B  00F9               	movwf	??_I2C1_ISR
 13266  0C7C  0879               	movf	??_I2C1_ISR,w
 13267  0C7D  0021               	movlb	1	; select bank1
 13268  0C7E  00EC               	movwf	_i2c1_state^(0+128)
 13269                           
 13270                           ;i2c1.c: 530: }
 13271  0C7F  2C84               	goto	i1l5942
 13272  0C80                     i1l94:	
 13273                           
 13274                           ;i2c1.c: 531: else
 13275                           ;i2c1.c: 532: {
 13276                           ;i2c1.c: 536: SSP1CON2bits.ACKDT = 1;
 13277  0C80  0024               	movlb	4	; select bank4
 13278  0C81  1696               	bsf	22,5	;volatile
 13279                           
 13280                           ;i2c1.c: 538: I2C1_FunctionComplete();
 13281  0C82  3192  2273         	fcall	_I2C1_FunctionComplete
 13282  0C84                     i1l5942:	
 13283                           
 13284                           ;i2c1.c: 539: }
 13285                           ;i2c1.c: 542: SSP1CON2bits.ACKEN = 1;
 13286  0C84  0024               	movlb	4	; select bank4
 13287  0C85  1616               	bsf	22,4	;volatile
 13288                           
 13289                           ;i2c1.c: 543: break;
 13290  0C86  0008               	return
 13291  0C87                     i1l5944:	
 13292                           ;i2c1.c: 545: case S_MASTER_RCV_STOP:
 13293                           
 13294                           
 13295                           ;i2c1.c: 546: case S_MASTER_SEND_STOP:
 13296                           ;i2c1.c: 549: I2C1_Stop(I2C1_MESSAGE_COMPLETE);
 13297  0C87  3000               	movlw	0
 13298  0C88  3192  22D0         	fcall	_I2C1_Stop
 13299                           
 13300                           ;i2c1.c: 550: break;
 13301  0C8A  0008               	return
 13302  0C8B                     i1l5946:	
 13303                           ;i2c1.c: 552: default:
 13304                           
 13305                           
 13306                           ;i2c1.c: 556: i2c1_object.i2cErrors++;
 13307  0C8B  3001               	movlw	1
 13308  0C8C  00F9               	movwf	??_I2C1_ISR
 13309  0C8D  0879               	movf	??_I2C1_ISR,w
 13310  0C8E  0021               	movlb	1	; select bank1
 13311  0C8F  07DD               	addwf	(_i2c1_object^(0+128)+4),f
 13312                           
 13313                           ;i2c1.c: 557: I2C1_Stop(I2C1_LOST_STATE);
 13314  0C90  3006               	movlw	6
 13315  0C91  3192  22D0         	fcall	_I2C1_Stop
 13316                           
 13317                           ;i2c1.c: 560: }
 13318                           
 13319                           ;i2c1.c: 558: break;
 13320  0C93  0008               	return
 13321  0C94                     i1l5952:	
 13322  0C94  0021               	movlb	1	; select bank1
 13323  0C95  086C               	movf	_i2c1_state^(0+128),w
 13324                           
 13325                           ; Switch size 1, requested type "space"
 13326                           ; Number of cases is 11, Range of values is 0 to 11
 13327                           ; switch strategies available:
 13328                           ; Name         Instructions Cycles
 13329                           ; direct_byte           30     6 (fixed)
 13330                           ; simple_byte           34    18 (average)
 13331                           ; jumptable            260     6 (fixed)
 13332                           ;	Chosen strategy is direct_byte
 13333  0C96  0084               	movwf	4
 13334  0C97  300C               	movlw	12
 13335  0C98  0204               	subwf	4,w
 13336  0C99  1803               	skipnc
 13337  0C9A  2C8B               	goto	i1l5946
 13338  0C9B  3191               	movlp	high i1S6202
 13339  0C9C  3504               	lslf	4,w
 13340  0C9D  3EB0               	addlw	low i1S6202
 13341  0C9E  0082               	movwf	2
 13342  0C9F  0008               	return
 13343  0CA0                     __end_of_I2C1_ISR:	
 13344                           
 13345                           	psect	swtext1
 13346  11B0                     __pswtext1:	
 13347  11B0                     i1S6202:	
 13348  11B0  318B  2B5D         	ljmp	i1l60
 13349  11B2  318B  2B8B         	ljmp	i1l65
 13350  11B4  318B  2BE2         	ljmp	i1l5874
 13351  11B6  318C  2C14         	ljmp	i1l82
 13352  11B8  318C  2C87         	ljmp	i1l5944
 13353  11BA  318C  2C4A         	ljmp	i1l89
 13354  11BC  318C  2C5F         	ljmp	i1l5926
 13355  11BE  318C  2C87         	ljmp	i1l5944
 13356  11C0  318C  2C66         	ljmp	i1l5930
 13357  11C2  318C  2C8B         	ljmp	i1l5946
 13358  11C4  318B  2B93         	ljmp	i1l66
 13359  11C6  318B  2BB8         	ljmp	i1l71
 13360                           
 13361                           	psect	text64
 13362  12D0                     __ptext64:	
 13363 ;; *************** function _I2C1_Stop *****************
 13364 ;; Defined at:
 13365 ;;		line 581 in file "mcc_generated_files/i2c1.c"
 13366 ;; Parameters:    Size  Location     Type
 13367 ;;  completion_c    1    wreg     enum E2972
 13368 ;; Auto vars:     Size  Location     Type
 13369 ;;  completion_c    1    1[COMMON] enum E2972
 13370 ;; Return value:  Size  Location     Type
 13371 ;;                  1    wreg      void 
 13372 ;; Registers used:
 13373 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13374 ;; Tracked objects:
 13375 ;;		On entry : 0/0
 13376 ;;		On exit  : 0/0
 13377 ;;		Unchanged: 0/0
 13378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13380 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13381 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13382 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13383 ;;Total ram usage:        2 bytes
 13384 ;; Hardware stack levels used:    1
 13385 ;; This function calls:
 13386 ;;		Nothing
 13387 ;; This function is called by:
 13388 ;;		_I2C1_ISR
 13389 ;; This function uses a non-reentrant model
 13390 ;;
 13391                           
 13392                           
 13393                           ;psect for function _I2C1_Stop
 13394  12D0                     _I2C1_Stop:	
 13395                           
 13396                           ;incstack = 0
 13397                           ; Regs used in _I2C1_Stop: [wreg+fsr1l+fsr1h+status,2+status,0]
 13398                           ;I2C1_Stop@completion_code stored from wreg
 13399  12D0  00F8               	movwf	I2C1_Stop@completion_code
 13400                           
 13401                           ;i2c1.c: 584: SSP1CON2bits.PEN = 1;
 13402  12D1  0024               	movlb	4	; select bank4
 13403  12D2  1516               	bsf	22,2	;volatile
 13404                           
 13405                           ;i2c1.c: 587: if (p_i2c1_current->pTrFlag != (0))
 13406  12D3  0021               	movlb	1	; select bank1
 13407  12D4  0869               	movf	_p_i2c1_current^(0+128),w
 13408  12D5  3E02               	addlw	2
 13409  12D6  0086               	movwf	6
 13410  12D7  3001               	movlw	1	; select bank2/3
 13411  12D8  0087               	movwf	7
 13412  12D9  0801               	movf	1,w
 13413  12DA  1903               	btfsc	3,2
 13414  12DB  2AE8               	goto	i1l5662
 13415                           
 13416                           ;i2c1.c: 588: {
 13417                           ;i2c1.c: 590: *(p_i2c1_current->pTrFlag) = completion_code;
 13418  12DC  0878               	movf	I2C1_Stop@completion_code,w
 13419  12DD  00F7               	movwf	??_I2C1_Stop
 13420  12DE  0869               	movf	_p_i2c1_current^(0+128),w
 13421  12DF  3E02               	addlw	2
 13422  12E0  0086               	movwf	6
 13423  12E1  3001               	movlw	1	; select bank2/3
 13424  12E2  0087               	movwf	7
 13425  12E3  0801               	movf	1,w
 13426  12E4  0086               	movwf	6
 13427  12E5  0187               	clrf	7
 13428  12E6  0877               	movf	??_I2C1_Stop,w
 13429  12E7  0081               	movwf	1
 13430  12E8                     i1l5662:	
 13431                           
 13432                           ;i2c1.c: 591: }
 13433                           ;i2c1.c: 594: i2c1_state = S_MASTER_IDLE;
 13434  12E8  01EC               	clrf	_i2c1_state^(0+128)
 13435  12E9  0008               	return
 13436  12EA                     __end_of_I2C1_Stop:	
 13437                           
 13438                           	psect	text65
 13439  1273                     __ptext65:	
 13440 ;; *************** function _I2C1_FunctionComplete *****************
 13441 ;; Defined at:
 13442 ;;		line 563 in file "mcc_generated_files/i2c1.c"
 13443 ;; Parameters:    Size  Location     Type
 13444 ;;		None
 13445 ;; Auto vars:     Size  Location     Type
 13446 ;;		None
 13447 ;; Return value:  Size  Location     Type
 13448 ;;                  1    wreg      void 
 13449 ;; Registers used:
 13450 ;;		wreg, status,2, status,0
 13451 ;; Tracked objects:
 13452 ;;		On entry : 0/0
 13453 ;;		On exit  : 0/0
 13454 ;;		Unchanged: 0/0
 13455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13457 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13458 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13459 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13460 ;;Total ram usage:        1 bytes
 13461 ;; Hardware stack levels used:    1
 13462 ;; This function calls:
 13463 ;;		Nothing
 13464 ;; This function is called by:
 13465 ;;		_I2C1_ISR
 13466 ;; This function uses a non-reentrant model
 13467 ;;
 13468                           
 13469                           
 13470                           ;psect for function _I2C1_FunctionComplete
 13471  1273                     _I2C1_FunctionComplete:	
 13472                           
 13473                           ;i2c1.c: 567: p_i2c1_trb_current++;
 13474                           
 13475                           ;incstack = 0
 13476                           ; Regs used in _I2C1_FunctionComplete: [wreg+status,2+status,0]
 13477  1273  3005               	movlw	5
 13478  1274  00F7               	movwf	??_I2C1_FunctionComplete
 13479  1275  0877               	movf	??_I2C1_FunctionComplete,w
 13480  1276  0021               	movlb	1	; select bank1
 13481  1277  07EA               	addwf	_p_i2c1_trb_current^(0+128),f
 13482                           
 13483                           ;i2c1.c: 570: if(--i2c1_trb_count == 0)
 13484  1278  3001               	movlw	1
 13485  1279  02EB               	subwf	_i2c1_trb_count^(0+128),f
 13486  127A  1D03               	btfss	3,2
 13487  127B  2A81               	goto	i1l101
 13488                           
 13489                           ;i2c1.c: 571: {
 13490                           ;i2c1.c: 572: i2c1_state = S_MASTER_SEND_STOP;
 13491  127C  3004               	movlw	4
 13492  127D  00F7               	movwf	??_I2C1_FunctionComplete
 13493  127E  0877               	movf	??_I2C1_FunctionComplete,w
 13494  127F  00EC               	movwf	_i2c1_state^(0+128)
 13495                           
 13496                           ;i2c1.c: 573: }
 13497  1280  0008               	return
 13498  1281                     i1l101:	
 13499                           
 13500                           ;i2c1.c: 574: else
 13501                           ;i2c1.c: 575: {
 13502                           ;i2c1.c: 576: i2c1_state = S_MASTER_RESTART;
 13503  1281  01EC               	clrf	_i2c1_state^(0+128)
 13504  1282  0AEC               	incf	_i2c1_state^(0+128),f
 13505  1283  0008               	return
 13506  1284                     __end_of_I2C1_FunctionComplete:	
 13507                           
 13508                           	psect	text66
 13509  07FF                     __ptext66:	
 13510 ;; *************** function _I2C1_BusCollisionISR *****************
 13511 ;; Defined at:
 13512 ;;		line 728 in file "mcc_generated_files/i2c1.c"
 13513 ;; Parameters:    Size  Location     Type
 13514 ;;		None
 13515 ;; Auto vars:     Size  Location     Type
 13516 ;;		None
 13517 ;; Return value:  Size  Location     Type
 13518 ;;                  1    wreg      void 
 13519 ;; Registers used:
 13520 ;;		None
 13521 ;; Tracked objects:
 13522 ;;		On entry : 0/0
 13523 ;;		On exit  : 0/0
 13524 ;;		Unchanged: 0/0
 13525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13527 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13529 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13530 ;;Total ram usage:        0 bytes
 13531 ;; Hardware stack levels used:    1
 13532 ;; This function calls:
 13533 ;;		Nothing
 13534 ;; This function is called by:
 13535 ;;		_INTERRUPT_InterruptManager
 13536 ;; This function uses a non-reentrant model
 13537 ;;
 13538                           
 13539                           
 13540                           ;psect for function _I2C1_BusCollisionISR
 13541  07FF                     _I2C1_BusCollisionISR:	
 13542                           
 13543                           ;incstack = 0
 13544                           ; Regs used in _I2C1_BusCollisionISR: []
 13545  07FF  0008               	return
 13546  0800                     __end_of_I2C1_BusCollisionISR:	
 13547                           
 13548                           	psect	text67
 13549  133B                     __ptext67:	
 13550 ;; *************** function _EUSART_Transmit_ISR *****************
 13551 ;; Defined at:
 13552 ;;		line 165 in file "mcc_generated_files/eusart.c"
 13553 ;; Parameters:    Size  Location     Type
 13554 ;;		None
 13555 ;; Auto vars:     Size  Location     Type
 13556 ;;		None
 13557 ;; Return value:  Size  Location     Type
 13558 ;;                  1    wreg      void 
 13559 ;; Registers used:
 13560 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13561 ;; Tracked objects:
 13562 ;;		On entry : 0/0
 13563 ;;		On exit  : 0/0
 13564 ;;		Unchanged: 0/0
 13565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13567 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13568 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13569 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13570 ;;Total ram usage:        1 bytes
 13571 ;; Hardware stack levels used:    1
 13572 ;; This function calls:
 13573 ;;		Nothing
 13574 ;; This function is called by:
 13575 ;;		_INTERRUPT_InterruptManager
 13576 ;; This function uses a non-reentrant model
 13577 ;;
 13578                           
 13579                           
 13580                           ;psect for function _EUSART_Transmit_ISR
 13581  133B                     _EUSART_Transmit_ISR:	
 13582                           
 13583                           ;eusart.c: 169: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
 13584                           
 13585                           ;incstack = 0
 13586                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 13587  133B  3040               	movlw	64
 13588  133C  0274               	subwf	_eusartTxBufferRemaining,w	;volatile
 13589  133D  1803               	skipnc
 13590  133E  2B54               	goto	i1l256
 13591                           
 13592                           ;eusart.c: 170: {
 13593                           ;eusart.c: 171: TXREG = eusartTxBuffer[eusartTxTail++];
 13594  133F  0875               	movf	_eusartTxTail,w
 13595  1340  3EA0               	addlw	(low (_eusartTxBuffer| (0+512)))& (0+255)
 13596  1341  0086               	movwf	6
 13597  1342  3002               	movlw	2	; select bank5/6
 13598  1343  0087               	movwf	7
 13599  1344  0801               	movf	1,w
 13600  1345  0023               	movlb	3	; select bank3
 13601  1346  009A               	movwf	26	;volatile
 13602  1347  3001               	movlw	1
 13603  1348  00F7               	movwf	??_EUSART_Transmit_ISR
 13604  1349  0877               	movf	??_EUSART_Transmit_ISR,w
 13605  134A  07F5               	addwf	_eusartTxTail,f	;volatile
 13606                           
 13607                           ;eusart.c: 172: if(sizeof(eusartTxBuffer) <= eusartTxTail)
 13608  134B  3040               	movlw	64
 13609  134C  0275               	subwf	_eusartTxTail,w	;volatile
 13610  134D  1803               	btfsc	3,0
 13611                           
 13612                           ;eusart.c: 173: {
 13613                           ;eusart.c: 174: eusartTxTail = 0;
 13614  134E  01F5               	clrf	_eusartTxTail	;volatile
 13615                           
 13616                           ;eusart.c: 175: }
 13617                           ;eusart.c: 176: eusartTxBufferRemaining++;
 13618  134F  3001               	movlw	1
 13619  1350  00F7               	movwf	??_EUSART_Transmit_ISR
 13620  1351  0877               	movf	??_EUSART_Transmit_ISR,w
 13621  1352  07F4               	addwf	_eusartTxBufferRemaining,f	;volatile
 13622                           
 13623                           ;eusart.c: 177: }
 13624  1353  0008               	return
 13625  1354                     i1l256:	
 13626                           
 13627                           ;eusart.c: 178: else
 13628                           ;eusart.c: 179: {
 13629                           ;eusart.c: 180: PIE1bits.TXIE = 0;
 13630  1354  0021               	movlb	1	; select bank1
 13631  1355  1211               	bcf	17,4	;volatile
 13632  1356  0008               	return
 13633  1357                     __end_of_EUSART_Transmit_ISR:	
 13634                           
 13635                           	psect	text68
 13636  131F                     __ptext68:	
 13637 ;; *************** function _EUSART_Receive_ISR *****************
 13638 ;; Defined at:
 13639 ;;		line 184 in file "mcc_generated_files/eusart.c"
 13640 ;; Parameters:    Size  Location     Type
 13641 ;;		None
 13642 ;; Auto vars:     Size  Location     Type
 13643 ;;		None
 13644 ;; Return value:  Size  Location     Type
 13645 ;;                  1    wreg      void 
 13646 ;; Registers used:
 13647 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13648 ;; Tracked objects:
 13649 ;;		On entry : 0/0
 13650 ;;		On exit  : 0/0
 13651 ;;		Unchanged: 0/0
 13652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13654 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13655 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13656 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13657 ;;Total ram usage:        1 bytes
 13658 ;; Hardware stack levels used:    1
 13659 ;; This function calls:
 13660 ;;		Nothing
 13661 ;; This function is called by:
 13662 ;;		_INTERRUPT_InterruptManager
 13663 ;; This function uses a non-reentrant model
 13664 ;;
 13665                           
 13666                           
 13667                           ;psect for function _EUSART_Receive_ISR
 13668  131F                     _EUSART_Receive_ISR:	
 13669                           
 13670                           ;eusart.c: 187: if(1 == RCSTAbits.OERR)
 13671                           
 13672                           ;incstack = 0
 13673                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 13674  131F  0023               	movlb	3	; select bank3
 13675  1320  1C9D               	btfss	29,1	;volatile
 13676  1321  2B24               	goto	i1l5974
 13677                           
 13678                           ;eusart.c: 188: {
 13679                           ;eusart.c: 191: RCSTAbits.CREN = 0;
 13680  1322  121D               	bcf	29,4	;volatile
 13681                           
 13682                           ;eusart.c: 192: RCSTAbits.CREN = 1;
 13683  1323  161D               	bsf	29,4	;volatile
 13684  1324                     i1l5974:	
 13685                           
 13686                           ;eusart.c: 193: }
 13687                           ;eusart.c: 196: eusartRxBuffer[eusartRxHead++] = RCREG;
 13688  1324  0819               	movf	25,w	;volatile
 13689  1325  00F7               	movwf	??_EUSART_Receive_ISR
 13690  1326  0873               	movf	_eusartRxHead,w
 13691  1327  3E20               	addlw	(low (_eusartRxBuffer| (0+768)))& (0+255)
 13692  1328  0086               	movwf	6
 13693  1329  3003               	movlw	3	; select bank6/7
 13694  132A  0087               	movwf	7
 13695  132B  0877               	movf	??_EUSART_Receive_ISR,w
 13696  132C  0081               	movwf	1
 13697  132D  3001               	movlw	1
 13698  132E  00F7               	movwf	??_EUSART_Receive_ISR
 13699  132F  0877               	movf	??_EUSART_Receive_ISR,w
 13700  1330  07F3               	addwf	_eusartRxHead,f	;volatile
 13701                           
 13702                           ;eusart.c: 197: if(sizeof(eusartRxBuffer) <= eusartRxHead)
 13703  1331  3040               	movlw	64
 13704  1332  0273               	subwf	_eusartRxHead,w	;volatile
 13705  1333  1803               	btfsc	3,0
 13706                           
 13707                           ;eusart.c: 198: {
 13708                           ;eusart.c: 199: eusartRxHead = 0;
 13709  1334  01F3               	clrf	_eusartRxHead	;volatile
 13710                           
 13711                           ;eusart.c: 200: }
 13712                           ;eusart.c: 201: eusartRxCount++;
 13713  1335  3001               	movlw	1
 13714  1336  00F7               	movwf	??_EUSART_Receive_ISR
 13715  1337  0877               	movf	??_EUSART_Receive_ISR,w
 13716  1338  0021               	movlb	1	; select bank1
 13717  1339  07E6               	addwf	_eusartRxCount^(0+128),f	;volatile
 13718  133A  0008               	return
 13719  133B                     __end_of_EUSART_Receive_ISR:	
 13720  007E                     btemp	set	126	;btemp
 13721  007E                     int$flags	set	126
 13722  007E                     wtemp0	set	126


Data Sizes:
    Strings     421
    Constant    11
    Data        5
    BSS         333
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      14
    BANK0            80     75      79
    BANK1            80     57      79
    BANK2            80      0      69
    BANK3            80      0      44
    BANK4            80      0      64
    BANK5            80      0      64
    BANK6            80      0      64
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           16      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    i2c1_tr_queue.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 50
		 -> i2c1_write_no_data@buf(BANK0[1]), i2c1_read@reg(BANK0[1]), sen@length(BANK0[1]), sen@type(BANK0[1]), 
		 -> read_buf(BANK3[16]), exec_remote_cmd@send_buf(BANK1[50]), exec_remote_cmd@data(BANK1[1]), 

    i2c1_tr_queue.pTrFlag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c1_write_no_data@status(BANK0[1]), i2c1_read@status(BANK0[1]), i2c1_write@status(BANK0[1]), 

    i2c1_tr_queue.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C1_MasterRead@trBlock(BANK2[5]), I2C1_MasterWrite@trBlock(BANK2[5]), 

    PROTOCOL_Extension_Handler$0	PTR unsigned char  size(1) Largest target is 48
		 -> buf(BANK4[48]), 

    data	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    strncmp@s2	PTR const unsigned char  size(2) Largest target is 192
		 -> buf(BANK4[48]), cmd_buf(BIGRAM[192]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_47(CODE[4]), STR_46(CODE[4]), STR_44(CODE[4]), STR_43(CODE[4]), 
		 -> STR_40(CODE[4]), STR_39(CODE[4]), STR_38(CODE[4]), STR_36(CODE[4]), 
		 -> STR_32(CODE[4]), STR_31(CODE[4]), STR_26(CODE[4]), STR_24(CODE[4]), 
		 -> STR_22(CODE[4]), STR_21(CODE[4]), STR_20(CODE[4]), STR_10(CODE[4]), 
		 -> STR_9(CODE[4]), STR_6(CODE[4]), STR_5(CODE[4]), STR_4(CODE[4]), 
		 -> STR_1(CODE[4]), 

    strcpy@from	PTR const unsigned char  size(1) Largest target is 48
		 -> buf(BANK4[48]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 192
		 -> cmd_buf(BIGRAM[192]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 192
		 -> cmd_buf(BIGRAM[192]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 192
		 -> buf(BANK4[48]), cmd_buf(BIGRAM[192]), 

    sp__PROTOCOL_I2C_SEN	PTR unsigned char  size(2) Largest target is 16
		 -> type_no_data(BANK2[1]), PROTOCOL_Send_uint8_t@pbuf(BANK2[1]), sendbuf(BANK4[16]), readbuf.length(BANK2[1]), 
		 -> readbuf.type(BANK2[1]), readbuf(BANK2[6]), 

    PROTOCOL_Print_TLV@pbuffer	PTR unsigned char  size(1) Largest target is 16
		 -> read_buf(BANK3[16]), NULL(NULL[0]), 

    PROTOCOL_EXT@char_buf	PTR unsigned char  size(1) Largest target is 48
		 -> buf(BANK4[48]), 

    PROTOCOL_Set_Tick_Handler@tick_handler	PTR void  size(2) Largest target is 1
		 -> tick_handler(), 

    PROTOCOL_Tick_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), tick_handler(), 

    PROTOCOL_Set_Extension_Handler@extension_handler	PTR void  size(2) Largest target is 1
		 -> command_handler(), 

    PROTOCOL_Extension_Handler	PTR FTN(PTR unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), command_handler(), 

    PROTOCOL_Loop_Func	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    PROTOCOL_Initialize@inv_handler	PTR void  size(2) Largest target is 1
		 -> inv_handler(), 

    PROTOCOL_Inv_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), inv_handler(), 

    PROTOCOL_Initialize@set_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Set_Handler	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@stop_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Stop_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@start_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Start_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@device_id	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_33(CODE[17]), 

    device_id_	PTR const unsigned char  size(2) Largest target is 8192
		 -> ROM(CODE[8192]), STR_33(CODE[17]), 

    S1052$pbuffer	PTR unsigned char  size(2) Largest target is 16
		 -> PROTOCOL_Send_uint8_t@pbuf(BANK2[1]), sendbuf(BANK4[16]), 

    readbuf.pbuffer	PTR unsigned char  size(2) Largest target is 16
		 -> PROTOCOL_Send_uint8_t@pbuf(BANK2[1]), sendbuf(BANK4[16]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 8192
		 -> STR_42(CODE[4]), buf(BANK4[48]), STR_34(CODE[7]), ROM(CODE[8192]), 
		 -> printf@c(BANK0[1]), STR_33(CODE[17]), I2C1_ISR@i2c_address(BANK0[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 26
		 -> STR_80(CODE[10]), STR_79(CODE[9]), STR_78(CODE[10]), STR_77(CODE[9]), 
		 -> STR_76(CODE[4]), STR_75(CODE[4]), STR_74(CODE[4]), STR_73(CODE[4]), 
		 -> STR_72(CODE[4]), STR_71(CODE[4]), STR_70(CODE[4]), STR_69(CODE[4]), 
		 -> STR_68(CODE[14]), STR_67(CODE[9]), STR_66(CODE[10]), STR_65(CODE[9]), 
		 -> STR_64(CODE[10]), STR_63(CODE[9]), STR_62(CODE[7]), STR_61(CODE[4]), 
		 -> STR_60(CODE[4]), STR_59(CODE[9]), STR_58(CODE[4]), STR_57(CODE[4]), 
		 -> STR_56(CODE[10]), STR_55(CODE[4]), STR_54(CODE[4]), STR_53(CODE[8]), 
		 -> STR_52(CODE[4]), STR_51(CODE[4]), STR_50(CODE[9]), STR_49(CODE[6]), 
		 -> STR_48(CODE[10]), STR_45(CODE[10]), STR_41(CODE[10]), STR_37(CODE[10]), 
		 -> STR_35(CODE[5]), STR_30(CODE[4]), STR_29(CODE[4]), STR_28(CODE[4]), 
		 -> STR_27(CODE[7]), STR_25(CODE[26]), STR_23(CODE[26]), STR_19(CODE[22]), 
		 -> STR_18(CODE[22]), STR_17(CODE[26]), STR_16(CODE[22]), STR_15(CODE[4]), 
		 -> STR_14(CODE[4]), STR_13(CODE[7]), STR_12(CODE[25]), STR_11(CODE[10]), 
		 -> STR_8(CODE[12]), STR_7(CODE[11]), STR_3(CODE[3]), STR_2(CODE[10]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    i2c1_read@pbuf	PTR unsigned char  size(2) Largest target is 16
		 -> sen@length(BANK0[1]), sen@type(BANK0[1]), read_buf(BANK3[16]), exec_remote_cmd@data(BANK1[1]), 

    i2c1_write@pbuf	PTR unsigned char  size(1) Largest target is 50
		 -> exec_remote_cmd@send_buf(BANK1[50]), 

    command_handler@buf	PTR unsigned char  size(1) Largest target is 48
		 -> buf(BANK4[48]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 192
		 -> cmd_buf(BIGRAM[192]), 

    put_cmd@buf	PTR unsigned char  size(1) Largest target is 48
		 -> buf(BANK4[48]), 

    fetch@sch	PTR unsigned char  size(1) Largest target is 28
		 -> schedule(BANK3[28]), 

    exec_remote_cmd@buf	PTR unsigned char  size(2) Largest target is 192
		 -> cmd_buf(BIGRAM[192]), 

    I2C1_MasterWriteTRBBuild@pdata	PTR unsigned char  size(1) Largest target is 50
		 -> i2c1_write_no_data@buf(BANK0[1]), i2c1_read@reg(BANK0[1]), exec_remote_cmd@send_buf(BANK1[50]), 

    I2C1_MasterWriteTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 50
		 -> i2c1_write_no_data@buf(BANK0[1]), i2c1_read@reg(BANK0[1]), sen@length(BANK0[1]), sen@type(BANK0[1]), 
		 -> read_buf(BANK3[16]), exec_remote_cmd@send_buf(BANK1[50]), exec_remote_cmd@data(BANK1[1]), 

    I2C1_MasterWriteTRBBuild@ptrb	PTR struct . size(1) Largest target is 5
		 -> I2C1_MasterWrite@trBlock(BANK2[5]), 

    I2C1_MasterReadTRBBuild@pdata	PTR unsigned char  size(2) Largest target is 16
		 -> sen@length(BANK0[1]), sen@type(BANK0[1]), read_buf(BANK3[16]), exec_remote_cmd@data(BANK1[1]), 

    I2C1_MasterReadTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 50
		 -> i2c1_write_no_data@buf(BANK0[1]), i2c1_read@reg(BANK0[1]), sen@length(BANK0[1]), sen@type(BANK0[1]), 
		 -> read_buf(BANK3[16]), exec_remote_cmd@send_buf(BANK1[50]), exec_remote_cmd@data(BANK1[1]), 

    I2C1_MasterReadTRBBuild@ptrb	PTR struct . size(1) Largest target is 5
		 -> I2C1_MasterRead@trBlock(BANK2[5]), 

    i2c1_object.pTrTail.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 50
		 -> i2c1_write_no_data@buf(BANK0[1]), i2c1_read@reg(BANK0[1]), sen@length(BANK0[1]), sen@type(BANK0[1]), 
		 -> read_buf(BANK3[16]), exec_remote_cmd@send_buf(BANK1[50]), exec_remote_cmd@data(BANK1[1]), 

    i2c1_object.pTrTail.pTrFlag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c1_write_no_data@status(BANK0[1]), i2c1_read@status(BANK0[1]), i2c1_write@status(BANK0[1]), 

    i2c1_object.pTrTail.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C1_MasterRead@trBlock(BANK2[5]), I2C1_MasterWrite@trBlock(BANK2[5]), 

    I2C1_MasterTRBInsert@ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C1_MasterRead@trBlock(BANK2[5]), I2C1_MasterWrite@trBlock(BANK2[5]), 

    I2C1_MasterTRBInsert@pflag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c1_write_no_data@status(BANK0[1]), i2c1_read@status(BANK0[1]), i2c1_write@status(BANK0[1]), 

    I2C1_MasterRead@pflag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c1_read@status(BANK0[1]), 

    I2C1_MasterRead@pdata	PTR unsigned char  size(2) Largest target is 16
		 -> sen@length(BANK0[1]), sen@type(BANK0[1]), read_buf(BANK3[16]), exec_remote_cmd@data(BANK1[1]), 

    F3084.pbuffer	PTR unsigned char  size(2) Largest target is 50
		 -> i2c1_write_no_data@buf(BANK0[1]), i2c1_read@reg(BANK0[1]), sen@length(BANK0[1]), sen@type(BANK0[1]), 
		 -> read_buf(BANK3[16]), exec_remote_cmd@send_buf(BANK1[50]), exec_remote_cmd@data(BANK1[1]), 

    I2C1_MasterWrite@pflag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c1_write_no_data@status(BANK0[1]), i2c1_read@status(BANK0[1]), i2c1_write@status(BANK0[1]), 

    I2C1_MasterWrite@pdata	PTR unsigned char  size(1) Largest target is 50
		 -> i2c1_write_no_data@buf(BANK0[1]), i2c1_read@reg(BANK0[1]), exec_remote_cmd@send_buf(BANK1[50]), 

    F3079.pbuffer	PTR unsigned char  size(2) Largest target is 50
		 -> i2c1_write_no_data@buf(BANK0[1]), i2c1_read@reg(BANK0[1]), sen@length(BANK0[1]), sen@type(BANK0[1]), 
		 -> read_buf(BANK3[16]), exec_remote_cmd@send_buf(BANK1[50]), exec_remote_cmd@data(BANK1[1]), 

    I2C1_ISR@pi2c_buf_ptr	PTR unsigned char  size(2) Largest target is 50
		 -> i2c1_write_no_data@buf(BANK0[1]), i2c1_read@reg(BANK0[1]), sen@length(BANK0[1]), sen@type(BANK0[1]), 
		 -> read_buf(BANK3[16]), exec_remote_cmd@send_buf(BANK1[50]), exec_remote_cmd@data(BANK1[1]), I2C1_ISR@i2c_address(BANK0[2]), 
		 -> NULL(NULL[0]), 

    S19$pbuffer	PTR unsigned char  size(2) Largest target is 50
		 -> i2c1_write_no_data@buf(BANK0[1]), i2c1_read@reg(BANK0[1]), sen@length(BANK0[1]), sen@type(BANK0[1]), 
		 -> read_buf(BANK3[16]), exec_remote_cmd@send_buf(BANK1[50]), exec_remote_cmd@data(BANK1[1]), 

    p_i2c1_trb_current.pbuffer	PTR unsigned char  size(2) Largest target is 50
		 -> i2c1_write_no_data@buf(BANK0[1]), i2c1_read@reg(BANK0[1]), sen@length(BANK0[1]), sen@type(BANK0[1]), 
		 -> read_buf(BANK3[16]), exec_remote_cmd@send_buf(BANK1[50]), exec_remote_cmd@data(BANK1[1]), 

    p_i2c1_trb_current	PTR struct . size(1) Largest target is 5
		 -> I2C1_MasterRead@trBlock(BANK2[5]), I2C1_MasterWrite@trBlock(BANK2[5]), NULL(NULL[0]), 

    i2c1_object.pTrHead.pTrFlag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c1_write_no_data@status(BANK0[1]), i2c1_read@status(BANK0[1]), i2c1_write@status(BANK0[1]), 

    i2c1_object.pTrHead.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C1_MasterRead@trBlock(BANK2[5]), I2C1_MasterWrite@trBlock(BANK2[5]), 

    S31$pTrFlag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c1_write_no_data@status(BANK0[1]), i2c1_read@status(BANK0[1]), i2c1_write@status(BANK0[1]), 

    p_i2c1_current.pTrFlag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c1_write_no_data@status(BANK0[1]), i2c1_read@status(BANK0[1]), i2c1_write@status(BANK0[1]), 

    S31$ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C1_MasterRead@trBlock(BANK2[5]), I2C1_MasterWrite@trBlock(BANK2[5]), 

    p_i2c1_current.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C1_MasterRead@trBlock(BANK2[5]), I2C1_MasterWrite@trBlock(BANK2[5]), 

    p_i2c1_current	PTR struct . size(1) Largest target is 5
		 -> i2c1_tr_queue(BANK2[3]), NULL(NULL[0]), 

    S42$pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c1_tr_queue(BANK2[3]), 

    i2c1_object.pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c1_tr_queue(BANK2[3]), 

    S42$pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c1_tr_queue(BANK2[3]), 

    i2c1_object.pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c1_tr_queue(BANK2[3]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_I2C1_ISR
    _I2C1_ISR->_I2C1_Stop

Critical Paths under _main in BANK0

    _main->_PROTOCOL_Loop
    _init->___awdiv
    _SYSTEM_Initialize->_EUSART_Initialize
    _SYSTEM_Initialize->_I2C1_Initialize
    _PROTOCOL_Loop->_PROTOCOL_EXT
    _tick_handler->_exec_remote_cmd
    _exec_remote_cmd->_printf
    _i2c1_write->_I2C1_MasterWrite
    _check_plg->_scan_dev
    _scan_dev->_i2c1_read
    _del_dev->___awdiv
    _add_dev->___awdiv
    _inv_handler->_fetch
    _fetch->_sen
    _PROTOCOL_Write_Device_Address->_DATAEE_WriteByte
    _PROTOCOL_SAV->_DATAEE_WriteByte
    _PROTOCOL_EXT->_command_handler
    _command_handler->_one_shot_sen
    _put_cmd->_strcpy
    _strcpy->___wmul
    _print_dev_map->_printf
    _one_shot_sen->_sen
    _sen->_PROTOCOL_Print_TLV
    _i2c1_write_no_data->_I2C1_MasterWrite
    _i2c1_read->_I2C1_MasterRead
    _I2C1_MasterWrite->_I2C1_MasterWriteTRBBuild
    _I2C1_MasterRead->_I2C1_MasterReadTRBBuild
    _PROTOCOL_Print_TLV->_printf
    _printf->___lwmod
    _putch->_EUSART_Write
    ___lwmod->___lwdiv
    _abs->___awmod
    _detected->___awdiv
    _atoi->___wmul
    _PROTOCOL_Initialize->_DATAEE_ReadByte

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _tick_handler->_exec_remote_cmd

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  196132
                _PROTOCOL_Initialize
                      _PROTOCOL_Loop
     _PROTOCOL_Set_Extension_Handler
          _PROTOCOL_Set_Tick_Handler
                  _SYSTEM_Initialize
                               _init
 ---------------------------------------------------------------------------------
 (1) _init                                                11    11      0    4371
                                              9 BANK0      9     9      0
                    _DATAEE_ReadByte
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                  _EUSART_Initialize
                    _I2C1_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C1_Initialize                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Set_Tick_Handler                            2     0      2     108
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Set_Extension_Handler                       2     0      2     108
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Loop                                        4     4      0  190866
                                             71 BANK0      4     4      0
                   Absolute function *
                        _EUSART_Read
                       _PROTOCOL_EXT
       _PROTOCOL_Read_Device_Address
                       _PROTOCOL_SAV
                       _PROTOCOL_SET
                       _PROTOCOL_STA
                       _PROTOCOL_STP
      _PROTOCOL_Write_Device_Address
            _TMR0_HasOverflowOccured
                               _atoi
                        _inv_handler *
                             _printf
                            _strncmp
                       _tick_handler *
 ---------------------------------------------------------------------------------
 (2) _tick_handler                                         1     1      0   58826
                                             41 BANK0      1     1      0
                            ___lwmod
                          _check_plg
                    _exec_remote_cmd
                           _scan_dev
 ---------------------------------------------------------------------------------
 (3) _exec_remote_cmd                                     62    62      0   29723
                                             36 BANK0      5     5      0
                                              0 BANK1     57    57      0
                             ___wmul
                               _atoi
                          _i2c1_read
                         _i2c1_write
                 _i2c1_write_no_data
                             _printf
                            _strncmp
 ---------------------------------------------------------------------------------
 (4) _i2c1_write                                           8     4      4    2378
                                             14 BANK0      8     4      4
                   _I2C1_MasterWrite
 ---------------------------------------------------------------------------------
 (3) _check_plg                                            3     3      0   15609
                                             32 BANK0      3     3      0
                 _i2c1_write_no_data
                           _scan_dev
 ---------------------------------------------------------------------------------
 (3) _scan_dev                                             5     5      0   12030
                                             27 BANK0      5     5      0
                            _add_dev
                            _del_dev
                          _i2c1_read
 ---------------------------------------------------------------------------------
 (4) _del_dev                                              8     8      0    3102
                                              9 BANK0      8     8      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) _add_dev                                              8     8      0    3102
                                              9 BANK0      8     8      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) _inv_handler                                          2     2      0   42992
                            ___lwmod
                              _fetch
 ---------------------------------------------------------------------------------
 (3) _fetch                                                7     7      0   41528
                                             54 BANK0      7     7      0
                           _detected
                 _i2c1_write_no_data
                             _printf
                                _sen
 ---------------------------------------------------------------------------------
 (2) _TMR0_HasOverflowOccured                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_Write_Device_Address                        2     2      0     469
                                              3 BANK0      2     2      0
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_STP                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_STA                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_SET                                         2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_SAV                                         1     1      0     407
                                              3 BANK0      1     1      0
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_Read_Device_Address                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_EXT                                         2     2      0   71900
                                             69 BANK0      2     2      0
                   Absolute function *
                    _command_handler *
 ---------------------------------------------------------------------------------
 (3) _command_handler                                     10     9      1   71803
                                             59 BANK0     10     9      1
                   _DATAEE_WriteByte
                            ___awdiv
                               _atoi
                       _one_shot_sen
                      _print_dev_map
                             _printf
                            _put_cmd
                            _strncmp
 ---------------------------------------------------------------------------------
 (4) _strncmp                                              8     2      6    5043
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (4) _put_cmd                                              6     6      0    1534
                                             12 BANK0      6     6      0
                             ___wmul
                             _strcpy
 ---------------------------------------------------------------------------------
 (5) _strcpy                                               6     3      3     263
                                              6 BANK0      6     3      3
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _print_dev_map                                        4     4      0    9000
                                             36 BANK0      4     4      0
                   _dev_map_iterator
                             _printf
 ---------------------------------------------------------------------------------
 (5) _dev_map_iterator                                     8     8      0      37
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (4) _one_shot_sen                                         5     5      0   41133
                                             54 BANK0      5     5      0
                           _detected
                 _i2c1_write_no_data
                             _printf
                                _sen
 ---------------------------------------------------------------------------------
 (4) _sen                                                 11    11      0   25625
                                             45 BANK0      9     9      0
                 _PROTOCOL_Print_TLV
                          _i2c1_read
                 _i2c1_write_no_data
 ---------------------------------------------------------------------------------
 (4) _i2c1_write_no_data                                   7     4      3    3545
                                             14 BANK0      7     4      3
                   _I2C1_MasterWrite
 ---------------------------------------------------------------------------------
 (4) _i2c1_read                                           11     5      6    5600
                                             16 BANK0     11     5      6
                    _I2C1_MasterRead
                   _I2C1_MasterWrite
 ---------------------------------------------------------------------------------
 (5) _I2C1_MasterWrite                                     7     3      4    1891
                                              7 BANK0      7     3      4
               _I2C1_MasterTRBInsert
           _I2C1_MasterWriteTRBBuild
 ---------------------------------------------------------------------------------
 (6) _I2C1_MasterWriteTRBBuild                             7     3      4     450
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (5) _I2C1_MasterRead                                      8     2      6    1398
                                              8 BANK0      8     2      6
            _I2C1_MasterReadTRBBuild
               _I2C1_MasterTRBInsert
 ---------------------------------------------------------------------------------
 (6) _I2C1_MasterTRBInsert                                 4     2      2     494
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (6) _I2C1_MasterReadTRBBuild                              8     3      5     481
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (5) _PROTOCOL_Print_TLV                                   9     6      3   15957
                                             36 BANK0      9     6      3
                            ___awdiv
                            ___awmod
                                _abs
                             _concat
                             _printf
 ---------------------------------------------------------------------------------
 (4) _printf                                              26    20      6    8858
                                             14 BANK0     22    16      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                                _abs (ARG)
                             _concat (ARG)
                   _dev_map_iterator (ARG)
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0      93
                                              2 BANK0      1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (6) _EUSART_Write                                         2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              6     2      4    1464
                                              8 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              8     4      4     395
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (6) _concat                                               8     6      2     524
                                              0 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     629
                                              7 BANK0      4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              7     3      4    1505
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) _detected                                             7     7      0    2916
                                              9 BANK0      7     7      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4    2749
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (4) _atoi                                                 7     5      2    2170
                                              6 BANK0      7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              2     2      0      99
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1198
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _DATAEE_WriteByte                                     3     2      1     407
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) Absolute function(Fake)                               1     0      1       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Read                                          2     2      0      37
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Initialize                                 10     2      8     679
                                              1 BANK0     10     2      8
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (2) _DATAEE_ReadByte                                      1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _INTERRUPT_InterruptManager                          1     1      0      31
                                              6 COMMON     1     1      0
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
               _I2C1_BusCollisionISR
                           _I2C1_ISR
 ---------------------------------------------------------------------------------
 (11) _I2C1_ISR                                            4     4      0      31
                                              2 COMMON     4     4      0
              _I2C1_FunctionComplete
                          _I2C1_Stop
 ---------------------------------------------------------------------------------
 (12) _I2C1_Stop                                           2     2      0      31
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _I2C1_FunctionComplete                               1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _I2C1_BusCollisionISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART_Transmit_ISR                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _EUSART_Receive_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PROTOCOL_Initialize
     _DATAEE_ReadByte
   _PROTOCOL_Loop
     Absolute function(Fake) *
     _EUSART_Read *
     _PROTOCOL_EXT *
       Absolute function(Fake) *
       _command_handler *
         _DATAEE_WriteByte
         ___awdiv
         _atoi
           ___wmul
           _isdigit
         _one_shot_sen
           _detected
             ___awdiv
           _i2c1_write_no_data
             _I2C1_MasterWrite
               _I2C1_MasterTRBInsert
               _I2C1_MasterWriteTRBBuild
           _printf
             ___awdiv (ARG)
             ___awmod (ARG)
             ___lwdiv (ARG)
             ___lwmod (ARG)
               ___lwdiv (ARG)
             ___wmul (ARG)
             _abs (ARG)
               ___awmod (ARG)
             _concat (ARG)
             _dev_map_iterator (ARG)
             _isdigit (ARG)
             _putch (ARG)
               _EUSART_Write
           _sen
             _PROTOCOL_Print_TLV
               ___awdiv
               ___awmod
               _abs
                 ___awmod (ARG)
               _concat
               _printf
                 ___awdiv (ARG)
                 ___awmod (ARG)
                 ___lwdiv (ARG)
                 ___lwmod (ARG)
                   ___lwdiv (ARG)
                 ___wmul (ARG)
                 _abs (ARG)
                   ___awmod (ARG)
                 _concat (ARG)
                 _dev_map_iterator (ARG)
                 _isdigit (ARG)
                 _putch (ARG)
                   _EUSART_Write
             _i2c1_read
               _I2C1_MasterRead
                 _I2C1_MasterReadTRBBuild
                 _I2C1_MasterTRBInsert
               _I2C1_MasterWrite
                 _I2C1_MasterTRBInsert
                 _I2C1_MasterWriteTRBBuild
             _i2c1_write_no_data
               _I2C1_MasterWrite
                 _I2C1_MasterTRBInsert
                 _I2C1_MasterWriteTRBBuild
         _print_dev_map
           _dev_map_iterator
           _printf
             ___awdiv (ARG)
             ___awmod (ARG)
             ___lwdiv (ARG)
             ___lwmod (ARG)
               ___lwdiv (ARG)
             ___wmul (ARG)
             _abs (ARG)
               ___awmod (ARG)
             _concat (ARG)
             _dev_map_iterator (ARG)
             _isdigit (ARG)
             _putch (ARG)
               _EUSART_Write
         _printf
           ___awdiv (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _abs (ARG)
             ___awmod (ARG)
           _concat (ARG)
           _dev_map_iterator (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _EUSART_Write
         _put_cmd
           ___wmul
           _strcpy
             ___wmul (ARG)
         _strncmp
     _PROTOCOL_Read_Device_Address *
     _PROTOCOL_SAV *
       _DATAEE_WriteByte
     _PROTOCOL_SET *
     _PROTOCOL_STA *
     _PROTOCOL_STP *
     _PROTOCOL_Write_Device_Address *
       _DATAEE_WriteByte
     _TMR0_HasOverflowOccured *
     _atoi *
       ___wmul
       _isdigit
     _inv_handler *
       ___lwmod
         ___lwdiv (ARG)
       _fetch
         _detected
           ___awdiv
         _i2c1_write_no_data
           _I2C1_MasterWrite
             _I2C1_MasterTRBInsert
             _I2C1_MasterWriteTRBBuild
         _printf
           ___awdiv (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _abs (ARG)
             ___awmod (ARG)
           _concat (ARG)
           _dev_map_iterator (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _EUSART_Write
         _sen
           _PROTOCOL_Print_TLV
             ___awdiv
             ___awmod
             _abs
               ___awmod (ARG)
             _concat
             _printf
               ___awdiv (ARG)
               ___awmod (ARG)
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _abs (ARG)
                 ___awmod (ARG)
               _concat (ARG)
               _dev_map_iterator (ARG)
               _isdigit (ARG)
               _putch (ARG)
                 _EUSART_Write
           _i2c1_read
             _I2C1_MasterRead
               _I2C1_MasterReadTRBBuild
               _I2C1_MasterTRBInsert
             _I2C1_MasterWrite
               _I2C1_MasterTRBInsert
               _I2C1_MasterWriteTRBBuild
           _i2c1_write_no_data
             _I2C1_MasterWrite
               _I2C1_MasterTRBInsert
               _I2C1_MasterWriteTRBBuild
     _printf *
       ___awdiv (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _abs (ARG)
         ___awmod (ARG)
       _concat (ARG)
       _dev_map_iterator (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _EUSART_Write
     _strncmp *
     _tick_handler *
       ___lwmod
         ___lwdiv (ARG)
       _check_plg
         _i2c1_write_no_data
           _I2C1_MasterWrite
             _I2C1_MasterTRBInsert
             _I2C1_MasterWriteTRBBuild
         _scan_dev
           _add_dev
             ___awdiv
           _del_dev
             ___awdiv
           _i2c1_read
             _I2C1_MasterRead
               _I2C1_MasterReadTRBBuild
               _I2C1_MasterTRBInsert
             _I2C1_MasterWrite
               _I2C1_MasterTRBInsert
               _I2C1_MasterWriteTRBBuild
       _exec_remote_cmd
         ___wmul
         _atoi
           ___wmul
           _isdigit
         _i2c1_read
           _I2C1_MasterRead
             _I2C1_MasterReadTRBBuild
             _I2C1_MasterTRBInsert
           _I2C1_MasterWrite
             _I2C1_MasterTRBInsert
             _I2C1_MasterWriteTRBBuild
         _i2c1_write
           _I2C1_MasterWrite
             _I2C1_MasterTRBInsert
             _I2C1_MasterWriteTRBBuild
         _i2c1_write_no_data
           _I2C1_MasterWrite
             _I2C1_MasterTRBInsert
             _I2C1_MasterWriteTRBBuild
         _printf
           ___awdiv (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _abs (ARG)
             ___awmod (ARG)
           _concat (ARG)
           _dev_map_iterator (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _EUSART_Write
         _strncmp
       _scan_dev
         _add_dev
           ___awdiv
         _del_dev
           ___awdiv
         _i2c1_read
           _I2C1_MasterRead
             _I2C1_MasterReadTRBBuild
             _I2C1_MasterTRBInsert
           _I2C1_MasterWrite
             _I2C1_MasterTRBInsert
             _I2C1_MasterWriteTRBBuild
   _PROTOCOL_Set_Extension_Handler
   _PROTOCOL_Set_Tick_Handler
   _SYSTEM_Initialize
     _EUSART_Initialize
     _I2C1_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
     _WDT_Initialize
   _init
     _DATAEE_ReadByte
     ___awdiv
     ___wmul

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR
   _I2C1_BusCollisionISR
   _I2C1_ISR
     _I2C1_FunctionComplete
     _I2C1_Stop

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4B      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     39      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      45       9       86.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      2C      11       55.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      40      13       80.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      40      15       80.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0      40      17       80.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     1DD      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              10      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     1DD      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Sun Sep 24 06:31:34 2017

                    ??_PROTOCOL_Set_Tick_Handler 0022                                                _i 006B  
                                              _j 013B                                                pc 0002  
                __end_of_TMR0_HasOverflowOccured 11EC                                      __CFG_CP$OFF 0000  
                                   ___awdiv@sign 0026                              ___wmul@multiplicand 0022  
                                _timer0ReloadVal 00E5                                      __CFG_LVP$ON 0000  
                                            l244 1421                                              l355 11FA  
                                            l188 13E7                                              l620 1485  
                                            l713 06F0                                              l641 14DA  
                                            l628 0988                                              l661 0542  
                                            l673 060F                                              l842 0CA0  
                                            l696 0665                                              l689 05EF  
                                   __CFG_CPD$OFF 0000                                              _abs 1254  
                                            _buf 0220                                              _cnt 00DF  
                                            _sen 06F1           __end_of_PROTOCOL_Set_Extension_Handler 120E  
        __size_of_PROTOCOL_Set_Extension_Handler 0009                   _PROTOCOL_Set_Extension_Handler 1205  
                                   ___awmod@sign 0026                                     __CFG_BORV$LO 0000  
                                            wreg 0009                                     __CFG_IESO$ON 0000  
                    __size_of_i2c1_write_no_data 002B                                 detected@dev_addr 002F  
                               exec_remote_cmd@i 00D4                                 exec_remote_cmd@j 00D3  
                                   ?_EUSART_Read 0077                         i2c1_write_no_data@status 0034  
                               __end_of_I2C1_ISR 0CA0                                 ?_command_handler 005B  
                                           l1113 1360                                             ?_abs 0027  
                                           l5000 08FB                                             l5010 0903  
                                           l5012 090F                                             l5022 092A  
                                           l5102 14CB                                     _tmr_overflow 013E  
                                           l5200 02D3                                             l5104 14D5  
                                           l5026 0932                                             l5018 0921  
                                           l5050 1659                                             l5042 1653  
                                           l5202 0303                                             l5130 0104  
                                           l6010 0A97                                             l5052 1665  
                                           l5060 167A                                             l5204 030B  
                                           l5140 0110                                             l5116 00C4  
                                           l5108 14DC                                             l6004 0A75  
                                           l5038 164C                                             l5142 012D  
                                           l5126 00D0                                             l5302 0750  
                                           l6110 0D7B                                             l6102 0D49  
                                           l5064 1682                                             l5056 1671  
                                           l5144 0140                                             l5128 00EF  
                                           l5208 0313                                             l6120 0DC2  
                                           l5170 01DD                                             l5154 014F  
                                           l5090 0983                                             l5074 094F  
                                           l5250 07AB                                             l5410 1480  
                                           l6130 0E0E                                             l6106 0D62  
                                           l5172 0200                                             l5156 017D  
                                           l5092 098A                                             l5084 0974  
                                           l5076 0959                                             l5316 07A2  
                                           l5260 07C0                                             l6124 0DE8  
                                           l6116 0DA0                                             l5190 020F  
                                           l5158 01A0                                             l5086 097E  
                                           l5326 1309                                             l5430 15F5  
                                           l5414 1487                                             l5510 0419  
                                           l5502 03E3                                             l6054 0CB5  
                                           l5280 1591                                             l5192 0279  
                                           l5184 023D                                             l5168 01AF  
                                           l5264 07F5                                             l5256 07B6  
                                           l5360 0802                                             l5432 15FA  
                                           l5408 1476                                             l5512 041E  
                                           l6136 0E39                                             l5370 09E3  
                                           l4802 15BA                                             l4714 1416  
                                           l5186 0242                                             l5266 07FC  
                                           l5450 169B                                             l5362 0841  
                                           l5354 0820                                             l5522 04AE  
                                           l6066 0CD6                                             l5372 09F2  
                                           l4820 151D                                             l4900 05E6  
                                           l5460 1618                                             l5452 16B6  
                                           l5516 0470                                             l5540 0514  
                                           l6068 0CD7                                             l5390 0A16  
                                           l5382 0A0A                                             l4806 15C3  
                                           l5198 02A3                                             l4742 09C7  
                                           l5454 16C7                                             l5358 0838  
                                           l5622 0F43                                             l5630 0F8B  
                                           l5606 0EFB                                             l5526 04B6  
                                           l6078 0CE5                                             l5392 0A3F  
                                           l5368 09EC                                             l4824 1529  
                                           l4728 1436                                             l4752 09DC  
                                           l5608 0F02                                             l4818 1511  
                                           l4922 0634                                             l4906 05F1  
                                           l4850 053D                                             l4746 09CE  
                                           l4842 145A                                             l5618 0F24  
                                           l6098 0D24                                             l4772 135A  
                                           l5388 0A12                                             l4828 1532  
                                           l4748 09D4                                             l4836 14AC  
                                           l5652 0FF7                                             l5628 0F7B  
                                           l5492 038B                                             l5484 0351  
                                           l4766 1252                                             l5398 0A4F  
                                           l4950 068E                                             l4942 0681  
                                           l4934 0659                                             l4918 0629  
                                           l4870 058C                                             l4862 055D  
                                           l5646 0FD2                                             l5494 0390  
                                           l4944 0684                                             l4928 063A  
                                           l4856 0547                                             l5584 0E61  
                                           l5576 088D                                             l4794 159C  
                                           l4962 06AE                                             l4882 05A2  
                                           l4858 0550                                             l5770 0AD8  
                                           l5498 03B4                                             l5754 1732  
                                           l5684 13B0                                             l4796 15A8  
                                           l4972 06BB                                             l4956 069D  
                                           l4892 05BF                                             l4884 05B0  
                                           l5596 0EA6                                             l5588 0E79  
                                           l4958 06A1                                             l4966 06B6  
                                           l4894 05CE                                             l4878 05A0  
                                           l4974 0521                                             l5782 0B17  
                                           l5774 0AED                                             l5758 174A  
                                           l4888 05BD                                             l5792 0B44  
                                           l4994 08F0                                             l4898 05DB  
                                           l5786 0B2C                                             l5778 0B02  
                                           ?_sen 0077                                             l5992 0A5E  
                                           l5998 0A70                                             STR_1 118D  
                                           STR_2 1110                                             STR_3 11AD  
                                           STR_4 11A5                                             STR_5 1175  
                                           STR_6 1195                                             STR_7 10C9  
                                           STR_8 10BD                                             STR_9 11A1  
                                           _LATA 010C                                             _LATB 010D  
                                           _LATC 010E                                             u5105 159F  
                                           u5125 15A9                                             u5205 152A  
                                           u5135 15B3                                             u5065 1361  
                                           u5145 15BB                                             u5075 1366  
                                           u5175 1514                                             u5195 1523  
                                           u5355 064F                                             i1l60 0B5D  
                                           i1l71 0BB8                                             u5535 0906  
                                           u5295 05B6                                             i1l72 0BC4  
                                           i1l65 0B8B                                             u7065 0AB9  
                                           i1l90 0C58                                             i1l82 0C14  
                                           i1l66 0B93                                             u5555 0910  
                                           u5635 165C                                             u5395 0674  
                                           u5565 091A                                             u5805 0238  
                                           u6525 0EEA                                             i1l94 0C80  
                                           i1l86 0C34                                             u5575 0922  
                                           u5655 166B                                             u6615 0FBE  
                                           u7407 147C                                             i1l89 0C4A  
                                           u5665 1672                                             u7417 0706  
                                           u5914 1799                                             u5835 029E  
                                           u7507 095D                                             u7427 071F  
                                           u5915 1798                                             u7517 097A  
                                           u7437 073E                                             u6565 0F3F  
                                           u7447 076A                                             u6575 0F5A  
                                           u7457 078C                                             u5874 17E6  
                                           u7467 14B9                                             u5875 17E5  
                                           u5964 07D3                                             u7477 14D1  
                                           u5965 07D1                                             u7397 1462  
                                           u7487 093D                                             u7497 0955  
                                           u5985 07E4                                             u5994 1589  
                                           u5995 1588                                             _PLLR 04D6  
                                           _TMR0 0015                                             _WPUA 020C  
                                           _WPUB 020D                                             _WPUC 020E  
                __end_of_I2C1_MasterReadTRBBuild 150A                                     __CFG_WRT$OFF 0000  
                                  __CFG_FCMEN$ON 0000                                             abs@a 0027  
                                           _data 013A                                             _devs 00E4  
                                           _atoi 09E3                                             _main 1537  
                                           _init 0A54                            exec_remote_cmd@status 00D5  
                                           fsr0h 0005                                             fsr1h 0007  
                                           indf0 0000                                             fsr0l 0004  
                                           indf1 0001                                             fsr1l 0006  
                         ??_I2C1_MasterTRBInsert 0022                                             btemp 007E  
                                  __CFG_BOREN$ON 0000                                             start 003C  
                 i2c1_write_no_data@write_status 0032                          command_handler@dev_addr 0063  
                                  __CFG_MCLRE$ON 0000                   I2C1_MasterWriteTRBBuild@length 0021  
                                          ??_abs 0029                        __size_of_DATAEE_WriteByte 0023  
                                          ??_sen 004D                          __end_of_TMR0_Initialize 122C  
                                     _i2c1_state 00EC                                    __CFG_PLLEN$ON 0000  
                                     _i2c1_write 1461                                    ?_EUSART_Write 0077  
                 __size_of_OSCILLATOR_Initialize 0007                        I2C1_MasterTRBInsert@count 0023  
                  __end_of_OSCILLATOR_Initialize 11FD                        I2C1_MasterTRBInsert@pflag 0021  
                            PROTOCOL_Print_TLV@v 004B                                            ?_atoi 0026  
                                          ?_main 0077                                            ?_init 0077  
                                __end_of___awdiv 0937                                __end_of_I2C1_Stop 12EA  
                                          STR_10 119D                                            STR_11 111A  
                                          STR_20 1179                                            STR_12 1059  
                                          STR_21 1191                                            STR_13 114B  
                                          STR_30 10DA                                            STR_22 1199  
                                          STR_14 1171                                            STR_15 10DA  
                                          STR_31 117D                                            STR_23 1025  
                                          STR_40 1195                                            STR_32 1189  
                                          STR_24 1185                                            STR_16 1072  
                                          STR_41 10F2                                            STR_33 109E  
                                          STR_17 103F                                            STR_25 100B  
                                  __CFG_WDTE$OFF 0000                                            STR_26 1181  
                                          STR_42 116D                                            STR_34 113D  
                                          STR_50 112D                                            STR_18 1088  
                                          STR_19 1088                                            STR_43 11A1  
                                          STR_51 1161                                            STR_35 1158  
                                          STR_27 1144                                            STR_60 1171  
                                          STR_36 118D                                            STR_44 119D  
                                          STR_28 11A9                                            STR_52 115D  
                                __end_of___awmod 1687                                            STR_61 10DA  
                                          STR_45 111A                                            STR_29 1171  
                                          STR_53 112E                                            STR_37 10E8  
                                          STR_54 1171                                            STR_38 11A5  
                                          STR_46 1169                                            STR_62 1136  
                                          STR_55 10DA                                            STR_63 10FD  
                                          STR_39 1175                                            STR_47 1165  
                                          STR_56 1106                                            STR_64 10FC  
                                          STR_48 10D4                                            STR_65 10DF  
                                          STR_57 1161                                            STR_49 1152  
                                          STR_58 115D                                            STR_66 10DE  
                                          STR_59 1107                                            STR_67 1124  
                                          STR_68 10AF                                  ___awdiv@divisor 0020  
                                __end_of_add_dev 1800                                  __end_of___lwdiv 15C8  
                                          i1l101 1281                                            i1l321 0015  
                                          i1l323 0021                                            i1l325 002D  
                                          i1l256 1354                                            i1l329 0037  
                                __end_of___lwmod 1537                                  ___awdiv@counter 0025  
                                          _MAX_Y 100A                                            _RCREG 0199  
                                          _RCSTA 019D                                            _TRISA 008C  
                                          _TRISB 008D                                            _TRISC 008E  
                                          _TXREG 019A                                  __end_of_del_dev 17B2  
                                          _TXSTA 019E                     __end_of_I2C1_BusCollisionISR 0800  
                   __size_of_PROTOCOL_Initialize 0052                                ??_I2C1_MasterRead 002E  
                              ??_I2C1_Initialize 0020                        _PROTOCOL_Set_Tick_Handler 120E  
                                _DATAEE_ReadByte 1238                                            _fetch 0844  
                ??_PROTOCOL_Write_Device_Address 0023                                  __end_of_dpowers 100A  
                                 _WDT_Initialize 11EC                   PROTOCOL_Initialize@inv_handler 0026  
                                __end_of_isdigit 1254                                     ?_inv_handler 0077  
                                          _value 00DE                                            atoi@a 002B  
                                          atoi@s 0026                                            _putch 11F0  
                                          init@i 0031                                            init@y 0030  
                                 i2c1_write@pbuf 0030                                            pclath 000A  
                                ??_print_dev_map 0044                                  __end_of_put_cmd 171A  
                                          status 0003                                            wtemp0 007E  
                                __end_of_strncmp 0844                  I2C1_MasterWriteTRBBuild@address 0022  
                             exec_remote_cmd@buf 00D7                               exec_remote_cmd@idx 00D2  
                                __initialization 003E                            I2C1_MasterWrite@pdata 002D  
                          I2C1_MasterWrite@pflag 002A                                     __end_of_atoi 0A54  
                                   __end_of_main 1564                                     __end_of_init 0ACE  
                                 ??_EUSART_Write 0020                      ?_INTERRUPT_InterruptManager 0077  
               PROTOCOL_Initialize@start_handler 0023                                      _i2c1_object 00D9  
                                         ??_atoi 0028                                           ??_main 006B  
                                         ??_init 0029                               __size_of_i2c1_read 0055  
                                 scan_dev@status 003E                           __end_of_WDT_Initialize 11F0  
                                         ?_fetch 0077                                           i1S6202 11B0  
                                         _EEADRH 0192                                           _EEADRL 0191  
                                         _EEDATH 0194                                           _EEDATL 0193  
                                         _EECON2 0196                                 ___awdiv@dividend 0022  
                                         _ANSELA 018C                                           ?_putch 0077  
                                         _ANSELB 018D                                           _ANSELC 018E  
                             _PROTOCOL_Loop_Func 012E                                           i1l5662 12E8  
                                         i1l5930 0C66                                           i1l5914 0C3C  
                                         i1l5906 0C22                                           i1l5842 0B7E  
                                         i1l5860 0BB2                                           i1l5942 0C84  
                                         i1l5926 0C5F                                           i1l5854 0B9F  
                                         i1l5944 0C87                                           i1l5952 0C94  
                                         i1l5946 0C8B                                           i1l5874 0BE2  
                                         i1l5892 0C01                                           i1l5974 1324  
                                         i1l5898 0C0E                                           _OSCCON 0099  
               __size_of_TMR0_HasOverflowOccured 0004                                           _TMR0IF 005A  
                                         _SPBRGH 019C                                           _SPBRGL 019B  
                                         _WDTCON 0097                   PROTOCOL_Initialize@set_handler 0025  
                              ?_I2C1_MasterWrite 0027                                   __CFG_PWRTE$OFF 0000  
                               __end_of_detected 1593                               ??_I2C1_MasterWrite 002B  
                        exec_remote_cmd@send_buf 00A0                               _PROTOCOL_Print_TLV 00B0  
                      PROTOCOL_Initialize@scaler 0028                                   _p_i2c1_current 00E9  
                                         ___wmul 1357                                        ??___awdiv 0024  
                                 __CFG_STVREN$ON 0000                                        ??___awmod 0024  
                                      ??_add_dev 0029                                        ??___lwdiv 0024  
                                      ??___lwmod 002C                                           _concat 1284  
                                 add_dev@old_map 002D                                   add_dev@new_map 002E  
                                   _type_no_data 0164                              _EUSART_Transmit_ISR 133B  
                     ??_I2C1_MasterWriteTRBBuild 0024                                 ?_TMR0_Initialize 0077  
                                    ?_i2c1_write 002E                                           _locked 0143  
                                      ?_I2C1_ISR 0077                                        ??_del_dev 0029  
                               ___awdiv@quotient 0027                                  check_plg@status 0042  
                                ___awmod@divisor 0020                              ?_PROTOCOL_Print_TLV 0044  
                               __end_of_scan_dev 1600                                  ___awmod@counter 0025  
                                         _printf 051C                          __end_of_DATAEE_ReadByte 1245  
                                         _strcpy 1304                 __size_of_I2C1_MasterReadTRBBuild 002C  
                                      ??_isdigit 0020                         __end_of_dev_map_iterator 07FF  
                                ?_WDT_Initialize 0077                                      sen@dev_addr 0055  
                                      ??_put_cmd 002C                                   print_dev_map@i 0046  
                  I2C1_MasterWriteTRBBuild@pdata 0020                                        ??_strncmp 0026  
                      PROTOCOL_Send_uint8_t@pbuf 0161                             ?_EUSART_Transmit_ISR 0077  
                           ??_PROTOCOL_Print_TLV 0047                             __size_of_EUSART_Read 0020  
                              _SYSTEM_Initialize 1296                          __end_of__initialization 00AC  
PROTOCOL_Set_Extension_Handler@extension_handler 0020                               ?_SYSTEM_Initialize 0077  
                              __end_of_i2c1_read 098C                              exec_remote_cmd@data 00D6  
                                  __end_of_MAX_Y 100B                                   _i2c1_trb_count 00EB  
                          _I2C1_FunctionComplete 1273                             _I2C1_BusCollisionISR 07FF  
                                 __pcstackCOMMON 0077                           I2C1_MasterWrite@length 0027  
                                   __pidataBANK1 0002                                     __pidataBANK2 11E1  
                            ??_SYSTEM_Initialize 0021                                    __end_of_fetch 0893  
                               _DATAEE_WriteByte 13CE                               __size_of_check_plg 0015  
                                  __end_of_putch 11F6                                       ??_I2C1_ISR 0079  
                             command_handler@buf 005B                               command_handler@pos 006C  
                          __end_of_PROTOCOL_Loop 0E3E                   I2C1_MasterReadTRBBuild@address 0023  
                                 _OPTION_REGbits 0095                       i2c1_write_no_data@dev_addr 002E  
                                   init@dev_addr 002F                             one_shot_sen@dev_addr 005A  
                                        ??_fetch 0056                          PROTOCOL_Send_float@pbuf 0156  
                      __end_of_SYSTEM_Initialize 12A8                            ??_EUSART_Transmit_ISR 0077  
                           i2c1_read@read_status 0038                                          ??_putch 0022  
                                  ?_one_shot_sen 0077                                       __pbssBANK0 006B  
                                     __pbssBANK1 00D9                                       __pbssBANK2 0120  
                                     __pbssBANK3 01A0                                       __pbssBANK4 0220  
                                     __pbssBANK5 02A0                                       __pbssBANK6 0320  
                           __end_of_EUSART_Write 1439                       i2c1_write_no_data@reg_addr 0030  
                           __size_of_inv_handler 007B                              __size_of_i2c1_write 0028  
                               command_handler@i 0064                 ??_PROTOCOL_Set_Extension_Handler 0022  
                ?_PROTOCOL_Set_Extension_Handler 0020                         __size_of_exec_remote_cmd 01F3  
                    __size_of_EUSART_Receive_ISR 001C                              _PROTOCOL_Initialize 0893  
                          ?_I2C1_BusCollisionISR 0077                                       __pmaintext 1537  
                             one_shot_sen@status 0059                                          ?___wmul 0020  
                                _I2C1_MasterRead 1439                                       __pintentry 0004  
                                        ?_concat 0020                                  _I2C1_Initialize 1373  
                                        _BAUDCON 019F                                       _device_id_ 0126  
                                        _APFCON0 011D                                          _APFCON1 011E  
                                        ?_printf 002E                                          ?_strcpy 0026  
                     __end_of_i2c1_write_no_data 14DE                                 ?_DATAEE_ReadByte 0077  
                                  _eusartRxCount 00E6                       PROTOCOL_Send_uint16_t@pbuf 015E  
                           ?_PROTOCOL_Initialize 0021                                        _I2C1_Stop 12D0  
                                        _OSCTUNE 0098                                        ?_detected 0077  
                                        _SSP1ADD 0212                                          _SSP1BUF 0211  
                                 ??_one_shot_sen 0056                           _PROTOCOL_Start_Handler 0134  
                                  ?_tick_handler 0077                                __end_of_check_plg 12D0  
                                del_dev@dev_addr 0030                          _TMR0_HasOverflowOccured 11E8  
                  I2C1_MasterTRBInsert@ptrb_list 0020                             DATAEE_WriteByte@bAdd 0021  
                                      ?_scan_dev 0077                           ?_I2C1_FunctionComplete 0077  
                       __size_of_command_handler 01C2                    __size_of_I2C1_MasterTRBInsert 0057  
                                add_dev@dev_addr 0030                               _p_i2c1_trb_current 00EA  
                                        ___awdiv 08E5                                          ___awmod 1641  
                                  ?_PROTOCOL_EXT 0077                                    ?_PROTOCOL_SAV 0077  
                                  ?_PROTOCOL_SET 0077                                    ?_PROTOCOL_STA 0077  
                                  ?_PROTOCOL_STP 0077                                  __size_of___wmul 001C  
                                        _add_dev 17B2                                          ___lwdiv 1593  
                                        ___lwmod 150A                                  __size_of_concat 0012  
                                        _del_dev 1765                                          _cmd_buf 2330  
                        _I2C1_MasterReadTRBBuild 14DE                                          _dev_map 0120  
                                        _do_func 0144                                          __ptext1 0A54  
                                        __ptext2 1296                                          __ptext3 11EC  
                                        __ptext4 1221                                          __ptext5 138F  
                                        __ptext6 11F6                                          __ptext7 1373  
                                        __ptext8 12EA                                          __ptext9 120E  
                                __size_of_printf 01D5                                  __size_of_strcpy 001B  
                                        _dpowers 1000                            _OSCILLATOR_Initialize 11F6  
                                   __size_of_abs 000F                           i2c1_write@write_status 0034  
     PROTOCOL_Write_Device_Address@device_id_i2c 0024                            ??_PROTOCOL_Initialize 0029  
                                        _isdigit 1245                                     __size_of_sen 00B4  
                                        _readbuf 0146                     I2C1_MasterReadTRBBuild@pdata 0020  
                           I2C1_MasterRead@pdata 0028                                          _sec_cnt 0140  
                           I2C1_MasterRead@pflag 002D                                 ___awmod@dividend 0022  
                                        _invoked 0141                         ??_PIN_MANAGER_Initialize 0020  
                                        _sendbuf 0250                                       ?_I2C1_Stop 0077  
                                     ??_detected 0029                                          _tmr_cnt 013F  
                                        _put_cmd 16CF                       __size_of_SYSTEM_Initialize 0012  
                           I2C1_ISR@pi2c_buf_ptr 0138                                          clrloop0 122D  
                                 ??_tick_handler 0049                                          _running 0142  
                                        _strncmp 0802                             end_of_initialization 00AC  
          PROTOCOL_Set_Tick_Handler@tick_handler 0020                            __end_of_print_dev_map 16CF  
                                        sen@type 0052                                       ??_scan_dev 003B  
                     _PROTOCOL_Extension_Handler 012C                                 i2c1_write@status 0035  
                        __end_of_I2C1_MasterRead 1461                           ??_I2C1_BusCollisionISR 0077  
                              _EUSART_Initialize 12EA                          __end_of_I2C1_Initialize 138F  
                             ?_EUSART_Initialize 0077                            _PROTOCOL_Tick_Handler 0128  
                                      _RCSTAbits 019D                                          printf@c 0043  
                                        printf@f 002E                                   ??_PROTOCOL_EXT 0065  
                                 ??_PROTOCOL_SAV 0023                                   ??_PROTOCOL_SET 0020  
                                 ??_PROTOCOL_STA 0020                                   ??_PROTOCOL_STP 0020  
                              ??_exec_remote_cmd 0044                                     __pstringtext 1000  
                                   ??_i2c1_write 0032                              ??_EUSART_Initialize 0020  
                               ??_WDT_Initialize 0020                                    i2c1_read@pbuf 0033  
                      __size_of_I2C1_MasterWrite 002A                                __size_of_I2C1_ISR 0157  
                               __CFG_FOSC$INTOSC 0000                                ?_dev_map_iterator 0077  
                          __size_of_EUSART_Write 0025                        ??_TMR0_HasOverflowOccured 0020  
                          i2c1_write_no_data@buf 0033                                     inv_handler@t 0070  
                             ??_dev_map_iterator 0020                                       _tmr_scaler 0162  
                       __end_of_DATAEE_WriteByte 13F1                I2C1_ISR@i2c_10bit_address_restart 00E7  
                      __end_of_EUSART_Initialize 1304                               __end_of_i2c1_write 1489  
                                    printf@width 0041                          I2C1_MasterWrite@address 0028  
                                      _i2c1_read 0937                        ??_I2C1_MasterReadTRBBuild 0025  
                           __end_of_one_shot_sen 1641                                   __end_of___wmul 1373  
                              ??_command_handler 005C                          I2C1_MasterWrite@trBlock 0151  
                                   _EUSART_Write 1414                                   __end_of_concat 1296  
                       I2C1_Stop@completion_code 0078                           ?_OSCILLATOR_Initialize 0077  
                                  i2c1_write@len 0031                                   __end_of_printf 06F1  
                                 __end_of_strcpy 131F                                   PROTOCOL_Loop@c 0069  
                            start_initialization 003E                                      ??_I2C1_Stop 0077  
                       __size_of_TMR0_Initialize 000B                  __size_of_PIN_MANAGER_Initialize 001F  
                                    __end_of_abs 1263                                      __end_of_sen 07A5  
                                  ??_EUSART_Read 0020                __size_of_I2C1_MasterWriteTRBBuild 0023  
                                    putch@txData 0022                        ?_I2C1_MasterWriteTRBBuild 0020  
                       dev_map_iterator@dev_addr 0027                      __size_of_PROTOCOL_Print_TLV 0279  
                             dev_map_iterator@xx 00E3                               dev_map_iterator@yy 00E2  
                            DATAEE_ReadByte@bAdd 0020                                 ?_I2C1_MasterRead 0028  
                               ?_I2C1_Initialize 0077                                       ?_i2c1_read 0030  
                                       ??___wmul 0024                         PROTOCOL_Send_int8_t@pbuf 0160  
           __end_of_PROTOCOL_Read_Device_Address 11DE            __size_of_PROTOCOL_Read_Device_Address 0003  
                   _PROTOCOL_Read_Device_Address 11DB                                         ??_concat 0022  
                                    __pdataBANK1 00ED                                 scan_dev@dev_addr 003F  
                                    __pdataBANK2 0162                             __end_of_tick_handler 1765  
                                       ??_printf 0034                                         ??_strcpy 0029  
                   I2C1_MasterWriteTRBBuild@ptrb 0026                                      __pbssBIGRAM 2330  
                    __end_of_EUSART_Transmit_ISR 1357                                      __pbssCOMMON 0070  
                                      ___latbits 0002                                    __pcstackBANK0 0020  
                                  __pcstackBANK1 00A0                                    _i2c1_tr_queue 0159  
                           _PROTOCOL_Inv_Handler 012A                                     _isdigit$1459 0020  
                                  ??_inv_handler 005D                             __end_of_PROTOCOL_EXT 12BB  
                           __end_of_PROTOCOL_SAV 1221                             __end_of_PROTOCOL_SET 1205  
                           __end_of_PROTOCOL_STA 11E8                             __end_of_PROTOCOL_STP 11E1  
                              __size_of_detected 002F                               _i2c1_write_no_data 14B3  
                     __end_of_EUSART_Receive_ISR 133B                  PROTOCOL_Initialize@stop_handler 0024  
                        ??_I2C1_FunctionComplete 0077                       __size_of_EUSART_Initialize 001A  
                            __end_of_EUSART_Read 13CE                                    tick_handler@t 0136  
                         __size_of_PROTOCOL_Loop 019E                                        _check_plg 12BB  
          __end_of_PROTOCOL_Write_Device_Address 1273           __size_of_PROTOCOL_Write_Device_Address 0010  
                  _PROTOCOL_Write_Device_Address 1263                              ?_i2c1_write_no_data 002E  
                               ___lwdiv@dividend 0022                           _PIN_MANAGER_Initialize 138F  
                              __size_of_scan_dev 0038                             EUSART_Read@readValue 0021  
                                       ?___awdiv 0020                                         ?___awmod 0020  
                         PROTOCOL_Print_TLV@type 0044                                         ?_add_dev 0077  
                                       ?___lwdiv 0020                                         ?___lwmod 0028  
                                   _eusartRxHead 0073                                     _eusartTxHead 0076  
                                   _eusartRxTail 0072                                     _eusartTxTail 0075  
                                       _I2C1_ISR 0B49                                         ?_del_dev 0077  
                  ?_PROTOCOL_Read_Device_Address 0077                     ??_INTERRUPT_InterruptManager 007D  
                      PROTOCOL_Send_int16_t@pbuf 015C                                        __pswtext1 11B0  
                               _I2C1_MasterWrite 1489                          _eusartTxBufferRemaining 0074  
                   __end_of_I2C1_MasterTRBInsert 09E3                         PROTOCOL_Print_TLV@length 0045  
                                       ?_isdigit 0077                             ??_i2c1_write_no_data 0031  
                         I2C1_MasterRead@address 002B                            dev_map_iterator@exist 0026  
                                 del_dev@old_map 002D                                   del_dev@new_map 002E  
                          dev_map_iterator@start 0163                                         ?_put_cmd 0077  
                               ___lwdiv@quotient 0026                                   __size_of_fetch 004F  
                       __size_of_DATAEE_ReadByte 000D                                         ?_strncmp 0020  
                                 __size_of_putch 0006                                   _eusartRxBuffer 0320  
                    I2C1_MasterReadTRBBuild@ptrb 0027                           I2C1_MasterRead@trBlock 014C  
                              ??_TMR0_Initialize 0020                                   _eusartTxBuffer 02A0  
                                _exec_remote_cmd 0329                                   ___wmul@product 0024  
                                       _LATCbits 010E                             _PROTOCOL_Set_Handler 0130  
                                     ?_check_plg 0077                                        clear_ram0 122C  
                            __end_of_inv_handler 0B49                                         _PIE1bits 0091  
                                       _PIE2bits 0092                            __size_of_one_shot_sen 0041  
            __size_of_INTERRUPT_InterruptManager 0038                                         _PIR1bits 0011  
                                       _PIR2bits 0012               __size_of_PROTOCOL_Set_Tick_Handler 0009  
                                      detected@x 002D                                        detected@y 002C  
                     ?_PROTOCOL_Set_Tick_Handler 0020                                      ??_i2c1_read 0036  
                                       _SSP1CON1 0215                                         _SSP1CON3 0217  
                   PROTOCOL_Initialize@device_id 0021                                        _timer_cnt 0145  
                                       _SSP1STAT 0214                                     i2c1_read@len 0035  
                                   i2c1_read@reg 0039                                   _readbuf_status 013D  
                          _PROTOCOL_Stop_Handler 0132                      __end_of_PROTOCOL_Initialize 08E5  
                                      concat@lsb 0020                                        concat@msb 0027  
                              ___wmul@multiplier 0020                                    _PROTOCOL_Loop 0CA0  
                                  detected@exist 002E                                       printf@flag 0040  
                                     printf@prec 0038                            DATAEE_WriteByte@bData 0020  
                              i2c1_read@dev_addr 0030                                      _EUSART_Read 13AE  
                                   _one_shot_sen 1600                                ?_DATAEE_WriteByte 0020  
                             i2c1_write@dev_addr 002E                               ??_DATAEE_WriteByte 0021  
                                  _slave_address 00E0                                       put_cmd@buf 0031  
                              i2c1_read@reg_addr 0032                                       put_cmd@idx 00ED  
                                _command_handler 0E3E                                       _EECON1bits 0195  
                             PROTOCOL_SET@value_ 0021                        __size_of_dev_map_iterator 005A  
                          __size_of_tick_handler 004B                    __size_of_I2C1_BusCollisionISR 0001  
                         I2C1_ISR@i2c_bytes_left 00E8                __end_of_PROTOCOL_Set_Tick_Handler 1217  
                        ??_OSCILLATOR_Initialize 0020                   ?_PROTOCOL_Write_Device_Address 0077  
                               __size_of___awdiv 0052                                 __size_of___awmod 0046  
                                      sen@length 0053                                 __size_of_add_dev 004E  
                               __size_of___lwdiv 0035                                 __size_of___lwmod 002D  
               __end_of_I2C1_MasterWriteTRBBuild 1414                                   ?_PROTOCOL_Loop 0077  
                               __size_of_del_dev 004D                                        sen@status 0054  
                         __size_of_print_dev_map 0048                            __size_of_PROTOCOL_EXT 0013  
                          __size_of_PROTOCOL_SAV 000A                            __size_of_PROTOCOL_SET 0008  
                          __size_of_PROTOCOL_STA 0004                            __size_of_PROTOCOL_STP 0003  
                 ??_PROTOCOL_Read_Device_Address 0020                                         add_dev@x 002C  
                                       add_dev@y 002F                             tick_handler@cmd_next 00E1  
                               __size_of_isdigit 000F                                  ___lwdiv@divisor 0020  
                        __end_of_exec_remote_cmd 051C                              I2C1_ISR@i2c_address 006D  
                                ___lwdiv@counter 0025                                         _detected 1564  
                                       __ptext10 1205                                         __ptext11 0CA0  
                                       __ptext20 0844                                         __ptext12 171A  
                                       __ptext21 11E8                                         __ptext13 0329  
                                       __ptext30 0802                                         __ptext22 1263  
                                       __ptext14 1461                                         __ptext31 16CF  
                                       __ptext23 11DE                                         __ptext15 12BB  
                                       __ptext40 13F1                                         __ptext32 1304  
                                       __ptext24 11E4                                         __ptext16 15C8  
                                       __ptext41 1439                                         __ptext33 1687  
                                       __ptext25 11FD                                         __ptext17 1765  
                                       __ptext50 1284                                         __ptext42 098C  
                                       __ptext34 07A5                                         __ptext26 1217  
                                       __ptext18 17B2                                         __ptext51 1254  
                                       __ptext43 14DE                                         __ptext35 1600  
                                       __ptext27 11DB                                         __ptext19 0ACE  
                                       __ptext60 0893                                         __ptext52 1641  
                                       __ptext44 00B0                                         __ptext36 06F1  
                                       __ptext28 12A8                                         __ptext61 1238  
                                       __ptext53 1564                                         __ptext45 051C  
                                       __ptext37 14B3                                         __ptext29 0E3E  
                                       __ptext54 08E5                                         __ptext46 11F0  
                                       __ptext38 0937                                         __ptext63 0B49  
                                       __ptext55 09E3                                         __ptext47 1414  
                                       __ptext39 1489                                         __ptext64 12D0  
                                       __ptext56 1245                                         __ptext48 150A  
                                       __ptext65 1273                                         __ptext57 1357  
                                       __ptext49 1593                                         __ptext66 07FF  
                                       __ptext58 13CE                                         __ptext67 133B  
                                       __ptext59 13AE                                         __ptext68 131F  
                                  fetch@dev_addr 005C                                     _SSP1CON1bits 0215  
                                   _SSP1CON2bits 0216                                         _float100 0124  
                                    _inv_handler 0ACE                                 __size_of_put_cmd 004B  
                    DATAEE_WriteByte@GIEBitValue 0022                                     _tick_handler 171A  
                               __size_of_strncmp 0042                                       strcpy@from 0028  
                                  __size_of_atoi 0071                                    __size_of_main 002D  
                                  __size_of_init 007A                                         _read_buf 01BC  
                                       del_dev@x 002C                                         del_dev@y 002F  
                  I2C1_MasterReadTRBBuild@length 0022                            I2C1_MasterRead@length 002A  
                                       _scan_dev 15C8                                      ??_check_plg 0040  
                                     strncmp@len 0024                                ??_DATAEE_ReadByte 0020  
                                       _schedule 01A0                             _I2C1_MasterTRBInsert 098C  
                        _BACKPLANE_SLAVE_ADDRESS 00EE                                         fetch@sch 005A  
                                       fetch@pos 005B                                         int$flags 007E  
                                       atoi@sign 002A                                     _PROTOCOL_EXT 12A8  
                                   _PROTOCOL_SAV 1217                                     _PROTOCOL_SET 11FD  
                                   _PROTOCOL_STA 11E4                                     _PROTOCOL_STP 11DE  
             __end_of_INTERRUPT_InterruptManager 003C                       _INTERRUPT_InterruptManager 0004  
                                      printf@len 003E                                        printf@val 003C  
                       ?_TMR0_HasOverflowOccured 0077                                       _INTCONbits 000B  
                                       isdigit@c 0021                       __end_of_PROTOCOL_Print_TLV 0329  
                        __end_of_command_handler 1000                          __size_of_WDT_Initialize 0004  
                                       intlevel1 0000                                 ___lwmod@dividend 002A  
                        ?_PIN_MANAGER_Initialize 0077                         __end_of_I2C1_MasterWrite 14B3  
                              __CFG_CLKOUTEN$OFF 0000                   __size_of_I2C1_FunctionComplete 0011  
                  __end_of_I2C1_FunctionComplete 1284                                    _print_dev_map 1687  
                          ?_I2C1_MasterTRBInsert 0020                                        strncmp@s1 0020  
                                      strncmp@s2 0022                         ?_I2C1_MasterReadTRBBuild 0020  
                     PROTOCOL_Print_TLV@dev_addr 004A                          _backplane_slave_enabled 013C  
                                       printf@ap 003B                                         printf@cp 0039  
                             _EUSART_Receive_ISR 131F                                  ??_PROTOCOL_Loop 0067  
                       __size_of_I2C1_MasterRead 0028                         __size_of_I2C1_Initialize 001C  
                                i2c1_read@status 003A                                       _OPTION_REG 0095  
                            ?_EUSART_Receive_ISR 0077                                 print_dev_map@len 0047  
                                ___lwmod@divisor 0028                                  _TMR0_Initialize 1221  
                                       strcpy@cp 002A                                         strcpy@to 0026  
                                ___lwmod@counter 002D                         _I2C1_MasterWriteTRBBuild 13F1  
                    PROTOCOL_Loop@device_address 006A                                 ?_exec_remote_cmd 0077  
                                    fetch@status 0059                             PROTOCOL_EXT@char_buf 0066  
                             EUSART_Write@txData 0021                     __size_of_EUSART_Transmit_ISR 001C  
                      PROTOCOL_Print_TLV@pbuffer 0046                   __end_of_PIN_MANAGER_Initialize 13AE  
                             __size_of_I2C1_Stop 001A                                   ?_print_dev_map 0077  
                           ??_EUSART_Receive_ISR 0077                                 _dev_map_iterator 07A5  
