

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Sat Aug 26 12:04:17 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F1829
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	stringtext,global,class=STRCODE,delta=2
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text4,local,class=CODE,merge=1,delta=2,group=4
    25                           	psect	text5,local,class=CODE,merge=1,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2,group=4
    38                           	psect	text18,local,class=CODE,merge=1,delta=2,group=4
    39                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    40                           	psect	text20,local,class=CODE,merge=1,delta=2,group=4
    41                           	psect	text21,local,class=CODE,merge=1,delta=2,group=4
    42                           	psect	text22,local,class=CODE,merge=1,delta=2,group=4
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2,group=1
    45                           	psect	text25,local,class=CODE,merge=1,delta=2,group=1
    46                           	psect	text26,local,class=CODE,merge=1,delta=2,group=1
    47                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    48                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2,group=1
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2,group=1
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	intentry,global,class=CODE,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	swtext1,local,class=CONST,delta=2
    63                           	psect	text42,local,class=CODE,merge=1,delta=2
    64                           	psect	text43,local,class=CODE,merge=1,delta=2
    65                           	psect	text44,local,class=CODE,merge=1,delta=2
    66                           	psect	text45,local,class=CODE,merge=1,delta=2
    67                           	psect	text46,local,class=CODE,merge=1,delta=2
    68                           	psect	swtext2,local,class=CONST,delta=2
    69                           	psect	text47,local,class=CODE,merge=1,delta=2
    70                           	psect	text48,local,class=CODE,merge=1,delta=2
    71                           	psect	text49,local,class=CODE,merge=1,delta=2
    72                           	psect	text50,local,class=CODE,merge=1,delta=2
    73                           	psect	text51,local,class=CODE,merge=1,delta=2
    74                           	psect	text52,local,class=CODE,merge=1,delta=2
    75                           	psect	text53,local,class=CODE,merge=1,delta=2,group=1
    76                           	psect	text54,local,class=CODE,merge=1,delta=2,group=1
    77                           	psect	text55,local,class=CODE,merge=1,delta=2,group=1
    78                           	psect	text56,local,class=CODE,merge=1,delta=2,group=1
    79                           	psect	text57,local,class=CODE,merge=1,delta=2,group=1
    80                           	psect	text58,local,class=CODE,merge=1,delta=2,group=1
    81                           	psect	text59,local,class=CODE,merge=1,delta=2,group=1
    82                           	psect	text60,local,class=CODE,merge=1,delta=2
    83                           	psect	text61,local,class=CODE,merge=1,delta=2
    84                           	dabs	1,0x7E,2
    85  0000                     
    86                           ; Version 1.41 (B)
    87                           ; Generated 21/02/2017 GMT
    88                           ; 
    89                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    90                           ; All rights reserved.
    91                           ; 
    92                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    93                           ; 
    94                           ; Redistribution and use in source and binary forms, with or without modification, are
    95                           ; permitted provided that the following conditions are met:
    96                           ; 
    97                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    98                           ;        conditions and the following disclaimer.
    99                           ; 
   100                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   101                           ;        of conditions and the following disclaimer in the documentation and/or other
   102                           ;        materials provided with the distribution.
   103                           ; 
   104                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   105                           ;        software without specific prior written permission.
   106                           ; 
   107                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   108                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   109                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   110                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   111                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   112                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   113                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   114                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   115                           ; 
   116                           ; 
   117                           ; Code-generator required, PIC16F1829 Definitions
   118                           ; 
   119                           ; SFR Addresses
   120  0000                     	;# 
   121  0001                     	;# 
   122  0002                     	;# 
   123  0003                     	;# 
   124  0004                     	;# 
   125  0005                     	;# 
   126  0006                     	;# 
   127  0007                     	;# 
   128  0008                     	;# 
   129  0009                     	;# 
   130  000A                     	;# 
   131  000B                     	;# 
   132  000C                     	;# 
   133  000D                     	;# 
   134  000E                     	;# 
   135  0011                     	;# 
   136  0012                     	;# 
   137  0013                     	;# 
   138  0014                     	;# 
   139  0015                     	;# 
   140  0016                     	;# 
   141  0016                     	;# 
   142  0017                     	;# 
   143  0018                     	;# 
   144  0019                     	;# 
   145  001A                     	;# 
   146  001B                     	;# 
   147  001C                     	;# 
   148  001E                     	;# 
   149  001F                     	;# 
   150  008C                     	;# 
   151  008D                     	;# 
   152  008E                     	;# 
   153  0091                     	;# 
   154  0092                     	;# 
   155  0093                     	;# 
   156  0094                     	;# 
   157  0095                     	;# 
   158  0096                     	;# 
   159  0097                     	;# 
   160  0098                     	;# 
   161  0099                     	;# 
   162  009A                     	;# 
   163  009B                     	;# 
   164  009B                     	;# 
   165  009C                     	;# 
   166  009D                     	;# 
   167  009E                     	;# 
   168  010C                     	;# 
   169  010D                     	;# 
   170  010E                     	;# 
   171  0111                     	;# 
   172  0112                     	;# 
   173  0113                     	;# 
   174  0114                     	;# 
   175  0115                     	;# 
   176  0116                     	;# 
   177  0117                     	;# 
   178  0118                     	;# 
   179  0119                     	;# 
   180  011A                     	;# 
   181  011B                     	;# 
   182  011D                     	;# 
   183  011E                     	;# 
   184  018C                     	;# 
   185  018D                     	;# 
   186  018E                     	;# 
   187  0191                     	;# 
   188  0191                     	;# 
   189  0192                     	;# 
   190  0193                     	;# 
   191  0193                     	;# 
   192  0193                     	;# 
   193  0194                     	;# 
   194  0195                     	;# 
   195  0196                     	;# 
   196  0199                     	;# 
   197  019A                     	;# 
   198  019B                     	;# 
   199  019B                     	;# 
   200  019C                     	;# 
   201  019D                     	;# 
   202  019E                     	;# 
   203  019F                     	;# 
   204  020C                     	;# 
   205  020D                     	;# 
   206  020E                     	;# 
   207  0211                     	;# 
   208  0211                     	;# 
   209  0212                     	;# 
   210  0212                     	;# 
   211  0213                     	;# 
   212  0213                     	;# 
   213  0214                     	;# 
   214  0214                     	;# 
   215  0215                     	;# 
   216  0215                     	;# 
   217  0215                     	;# 
   218  0216                     	;# 
   219  0216                     	;# 
   220  0217                     	;# 
   221  0217                     	;# 
   222  0219                     	;# 
   223  021A                     	;# 
   224  021B                     	;# 
   225  021C                     	;# 
   226  021D                     	;# 
   227  021E                     	;# 
   228  021F                     	;# 
   229  0291                     	;# 
   230  0291                     	;# 
   231  0292                     	;# 
   232  0293                     	;# 
   233  0294                     	;# 
   234  0295                     	;# 
   235  0295                     	;# 
   236  0296                     	;# 
   237  0298                     	;# 
   238  0298                     	;# 
   239  0299                     	;# 
   240  029A                     	;# 
   241  029B                     	;# 
   242  029C                     	;# 
   243  029D                     	;# 
   244  029E                     	;# 
   245  0311                     	;# 
   246  0311                     	;# 
   247  0312                     	;# 
   248  0313                     	;# 
   249  0318                     	;# 
   250  0318                     	;# 
   251  0319                     	;# 
   252  031A                     	;# 
   253  038C                     	;# 
   254  038D                     	;# 
   255  038E                     	;# 
   256  0391                     	;# 
   257  0392                     	;# 
   258  0393                     	;# 
   259  0394                     	;# 
   260  0395                     	;# 
   261  0396                     	;# 
   262  039A                     	;# 
   263  039C                     	;# 
   264  039D                     	;# 
   265  039E                     	;# 
   266  039F                     	;# 
   267  0415                     	;# 
   268  0416                     	;# 
   269  0417                     	;# 
   270  041C                     	;# 
   271  041D                     	;# 
   272  041E                     	;# 
   273  0FE4                     	;# 
   274  0FE5                     	;# 
   275  0FE6                     	;# 
   276  0FE7                     	;# 
   277  0FE8                     	;# 
   278  0FE9                     	;# 
   279  0FEA                     	;# 
   280  0FEB                     	;# 
   281  0FED                     	;# 
   282  0FEE                     	;# 
   283  0FEF                     	;# 
   284  0000                     	;# 
   285  0001                     	;# 
   286  0002                     	;# 
   287  0003                     	;# 
   288  0004                     	;# 
   289  0005                     	;# 
   290  0006                     	;# 
   291  0007                     	;# 
   292  0008                     	;# 
   293  0009                     	;# 
   294  000A                     	;# 
   295  000B                     	;# 
   296  000C                     	;# 
   297  000D                     	;# 
   298  000E                     	;# 
   299  0011                     	;# 
   300  0012                     	;# 
   301  0013                     	;# 
   302  0014                     	;# 
   303  0015                     	;# 
   304  0016                     	;# 
   305  0016                     	;# 
   306  0017                     	;# 
   307  0018                     	;# 
   308  0019                     	;# 
   309  001A                     	;# 
   310  001B                     	;# 
   311  001C                     	;# 
   312  001E                     	;# 
   313  001F                     	;# 
   314  008C                     	;# 
   315  008D                     	;# 
   316  008E                     	;# 
   317  0091                     	;# 
   318  0092                     	;# 
   319  0093                     	;# 
   320  0094                     	;# 
   321  0095                     	;# 
   322  0096                     	;# 
   323  0097                     	;# 
   324  0098                     	;# 
   325  0099                     	;# 
   326  009A                     	;# 
   327  009B                     	;# 
   328  009B                     	;# 
   329  009C                     	;# 
   330  009D                     	;# 
   331  009E                     	;# 
   332  010C                     	;# 
   333  010D                     	;# 
   334  010E                     	;# 
   335  0111                     	;# 
   336  0112                     	;# 
   337  0113                     	;# 
   338  0114                     	;# 
   339  0115                     	;# 
   340  0116                     	;# 
   341  0117                     	;# 
   342  0118                     	;# 
   343  0119                     	;# 
   344  011A                     	;# 
   345  011B                     	;# 
   346  011D                     	;# 
   347  011E                     	;# 
   348  018C                     	;# 
   349  018D                     	;# 
   350  018E                     	;# 
   351  0191                     	;# 
   352  0191                     	;# 
   353  0192                     	;# 
   354  0193                     	;# 
   355  0193                     	;# 
   356  0193                     	;# 
   357  0194                     	;# 
   358  0195                     	;# 
   359  0196                     	;# 
   360  0199                     	;# 
   361  019A                     	;# 
   362  019B                     	;# 
   363  019B                     	;# 
   364  019C                     	;# 
   365  019D                     	;# 
   366  019E                     	;# 
   367  019F                     	;# 
   368  020C                     	;# 
   369  020D                     	;# 
   370  020E                     	;# 
   371  0211                     	;# 
   372  0211                     	;# 
   373  0212                     	;# 
   374  0212                     	;# 
   375  0213                     	;# 
   376  0213                     	;# 
   377  0214                     	;# 
   378  0214                     	;# 
   379  0215                     	;# 
   380  0215                     	;# 
   381  0215                     	;# 
   382  0216                     	;# 
   383  0216                     	;# 
   384  0217                     	;# 
   385  0217                     	;# 
   386  0219                     	;# 
   387  021A                     	;# 
   388  021B                     	;# 
   389  021C                     	;# 
   390  021D                     	;# 
   391  021E                     	;# 
   392  021F                     	;# 
   393  0291                     	;# 
   394  0291                     	;# 
   395  0292                     	;# 
   396  0293                     	;# 
   397  0294                     	;# 
   398  0295                     	;# 
   399  0295                     	;# 
   400  0296                     	;# 
   401  0298                     	;# 
   402  0298                     	;# 
   403  0299                     	;# 
   404  029A                     	;# 
   405  029B                     	;# 
   406  029C                     	;# 
   407  029D                     	;# 
   408  029E                     	;# 
   409  0311                     	;# 
   410  0311                     	;# 
   411  0312                     	;# 
   412  0313                     	;# 
   413  0318                     	;# 
   414  0318                     	;# 
   415  0319                     	;# 
   416  031A                     	;# 
   417  038C                     	;# 
   418  038D                     	;# 
   419  038E                     	;# 
   420  0391                     	;# 
   421  0392                     	;# 
   422  0393                     	;# 
   423  0394                     	;# 
   424  0395                     	;# 
   425  0396                     	;# 
   426  039A                     	;# 
   427  039C                     	;# 
   428  039D                     	;# 
   429  039E                     	;# 
   430  039F                     	;# 
   431  0415                     	;# 
   432  0416                     	;# 
   433  0417                     	;# 
   434  041C                     	;# 
   435  041D                     	;# 
   436  041E                     	;# 
   437  0FE4                     	;# 
   438  0FE5                     	;# 
   439  0FE6                     	;# 
   440  0FE7                     	;# 
   441  0FE8                     	;# 
   442  0FE9                     	;# 
   443  0FEA                     	;# 
   444  0FEB                     	;# 
   445  0FED                     	;# 
   446  0FEE                     	;# 
   447  0FEF                     	;# 
   448  0000                     	;# 
   449  0001                     	;# 
   450  0002                     	;# 
   451  0003                     	;# 
   452  0004                     	;# 
   453  0005                     	;# 
   454  0006                     	;# 
   455  0007                     	;# 
   456  0008                     	;# 
   457  0009                     	;# 
   458  000A                     	;# 
   459  000B                     	;# 
   460  000C                     	;# 
   461  000D                     	;# 
   462  000E                     	;# 
   463  0011                     	;# 
   464  0012                     	;# 
   465  0013                     	;# 
   466  0014                     	;# 
   467  0015                     	;# 
   468  0016                     	;# 
   469  0016                     	;# 
   470  0017                     	;# 
   471  0018                     	;# 
   472  0019                     	;# 
   473  001A                     	;# 
   474  001B                     	;# 
   475  001C                     	;# 
   476  001E                     	;# 
   477  001F                     	;# 
   478  008C                     	;# 
   479  008D                     	;# 
   480  008E                     	;# 
   481  0091                     	;# 
   482  0092                     	;# 
   483  0093                     	;# 
   484  0094                     	;# 
   485  0095                     	;# 
   486  0096                     	;# 
   487  0097                     	;# 
   488  0098                     	;# 
   489  0099                     	;# 
   490  009A                     	;# 
   491  009B                     	;# 
   492  009B                     	;# 
   493  009C                     	;# 
   494  009D                     	;# 
   495  009E                     	;# 
   496  010C                     	;# 
   497  010D                     	;# 
   498  010E                     	;# 
   499  0111                     	;# 
   500  0112                     	;# 
   501  0113                     	;# 
   502  0114                     	;# 
   503  0115                     	;# 
   504  0116                     	;# 
   505  0117                     	;# 
   506  0118                     	;# 
   507  0119                     	;# 
   508  011A                     	;# 
   509  011B                     	;# 
   510  011D                     	;# 
   511  011E                     	;# 
   512  018C                     	;# 
   513  018D                     	;# 
   514  018E                     	;# 
   515  0191                     	;# 
   516  0191                     	;# 
   517  0192                     	;# 
   518  0193                     	;# 
   519  0193                     	;# 
   520  0193                     	;# 
   521  0194                     	;# 
   522  0195                     	;# 
   523  0196                     	;# 
   524  0199                     	;# 
   525  019A                     	;# 
   526  019B                     	;# 
   527  019B                     	;# 
   528  019C                     	;# 
   529  019D                     	;# 
   530  019E                     	;# 
   531  019F                     	;# 
   532  020C                     	;# 
   533  020D                     	;# 
   534  020E                     	;# 
   535  0211                     	;# 
   536  0211                     	;# 
   537  0212                     	;# 
   538  0212                     	;# 
   539  0213                     	;# 
   540  0213                     	;# 
   541  0214                     	;# 
   542  0214                     	;# 
   543  0215                     	;# 
   544  0215                     	;# 
   545  0215                     	;# 
   546  0216                     	;# 
   547  0216                     	;# 
   548  0217                     	;# 
   549  0217                     	;# 
   550  0219                     	;# 
   551  021A                     	;# 
   552  021B                     	;# 
   553  021C                     	;# 
   554  021D                     	;# 
   555  021E                     	;# 
   556  021F                     	;# 
   557  0291                     	;# 
   558  0291                     	;# 
   559  0292                     	;# 
   560  0293                     	;# 
   561  0294                     	;# 
   562  0295                     	;# 
   563  0295                     	;# 
   564  0296                     	;# 
   565  0298                     	;# 
   566  0298                     	;# 
   567  0299                     	;# 
   568  029A                     	;# 
   569  029B                     	;# 
   570  029C                     	;# 
   571  029D                     	;# 
   572  029E                     	;# 
   573  0311                     	;# 
   574  0311                     	;# 
   575  0312                     	;# 
   576  0313                     	;# 
   577  0318                     	;# 
   578  0318                     	;# 
   579  0319                     	;# 
   580  031A                     	;# 
   581  038C                     	;# 
   582  038D                     	;# 
   583  038E                     	;# 
   584  0391                     	;# 
   585  0392                     	;# 
   586  0393                     	;# 
   587  0394                     	;# 
   588  0395                     	;# 
   589  0396                     	;# 
   590  039A                     	;# 
   591  039C                     	;# 
   592  039D                     	;# 
   593  039E                     	;# 
   594  039F                     	;# 
   595  0415                     	;# 
   596  0416                     	;# 
   597  0417                     	;# 
   598  041C                     	;# 
   599  041D                     	;# 
   600  041E                     	;# 
   601  0FE4                     	;# 
   602  0FE5                     	;# 
   603  0FE6                     	;# 
   604  0FE7                     	;# 
   605  0FE8                     	;# 
   606  0FE9                     	;# 
   607  0FEA                     	;# 
   608  0FEB                     	;# 
   609  0FED                     	;# 
   610  0FEE                     	;# 
   611  0FEF                     	;# 
   612  0000                     	;# 
   613  0001                     	;# 
   614  0002                     	;# 
   615  0003                     	;# 
   616  0004                     	;# 
   617  0005                     	;# 
   618  0006                     	;# 
   619  0007                     	;# 
   620  0008                     	;# 
   621  0009                     	;# 
   622  000A                     	;# 
   623  000B                     	;# 
   624  000C                     	;# 
   625  000D                     	;# 
   626  000E                     	;# 
   627  0011                     	;# 
   628  0012                     	;# 
   629  0013                     	;# 
   630  0014                     	;# 
   631  0015                     	;# 
   632  0016                     	;# 
   633  0016                     	;# 
   634  0017                     	;# 
   635  0018                     	;# 
   636  0019                     	;# 
   637  001A                     	;# 
   638  001B                     	;# 
   639  001C                     	;# 
   640  001E                     	;# 
   641  001F                     	;# 
   642  008C                     	;# 
   643  008D                     	;# 
   644  008E                     	;# 
   645  0091                     	;# 
   646  0092                     	;# 
   647  0093                     	;# 
   648  0094                     	;# 
   649  0095                     	;# 
   650  0096                     	;# 
   651  0097                     	;# 
   652  0098                     	;# 
   653  0099                     	;# 
   654  009A                     	;# 
   655  009B                     	;# 
   656  009B                     	;# 
   657  009C                     	;# 
   658  009D                     	;# 
   659  009E                     	;# 
   660  010C                     	;# 
   661  010D                     	;# 
   662  010E                     	;# 
   663  0111                     	;# 
   664  0112                     	;# 
   665  0113                     	;# 
   666  0114                     	;# 
   667  0115                     	;# 
   668  0116                     	;# 
   669  0117                     	;# 
   670  0118                     	;# 
   671  0119                     	;# 
   672  011A                     	;# 
   673  011B                     	;# 
   674  011D                     	;# 
   675  011E                     	;# 
   676  018C                     	;# 
   677  018D                     	;# 
   678  018E                     	;# 
   679  0191                     	;# 
   680  0191                     	;# 
   681  0192                     	;# 
   682  0193                     	;# 
   683  0193                     	;# 
   684  0193                     	;# 
   685  0194                     	;# 
   686  0195                     	;# 
   687  0196                     	;# 
   688  0199                     	;# 
   689  019A                     	;# 
   690  019B                     	;# 
   691  019B                     	;# 
   692  019C                     	;# 
   693  019D                     	;# 
   694  019E                     	;# 
   695  019F                     	;# 
   696  020C                     	;# 
   697  020D                     	;# 
   698  020E                     	;# 
   699  0211                     	;# 
   700  0211                     	;# 
   701  0212                     	;# 
   702  0212                     	;# 
   703  0213                     	;# 
   704  0213                     	;# 
   705  0214                     	;# 
   706  0214                     	;# 
   707  0215                     	;# 
   708  0215                     	;# 
   709  0215                     	;# 
   710  0216                     	;# 
   711  0216                     	;# 
   712  0217                     	;# 
   713  0217                     	;# 
   714  0219                     	;# 
   715  021A                     	;# 
   716  021B                     	;# 
   717  021C                     	;# 
   718  021D                     	;# 
   719  021E                     	;# 
   720  021F                     	;# 
   721  0291                     	;# 
   722  0291                     	;# 
   723  0292                     	;# 
   724  0293                     	;# 
   725  0294                     	;# 
   726  0295                     	;# 
   727  0295                     	;# 
   728  0296                     	;# 
   729  0298                     	;# 
   730  0298                     	;# 
   731  0299                     	;# 
   732  029A                     	;# 
   733  029B                     	;# 
   734  029C                     	;# 
   735  029D                     	;# 
   736  029E                     	;# 
   737  0311                     	;# 
   738  0311                     	;# 
   739  0312                     	;# 
   740  0313                     	;# 
   741  0318                     	;# 
   742  0318                     	;# 
   743  0319                     	;# 
   744  031A                     	;# 
   745  038C                     	;# 
   746  038D                     	;# 
   747  038E                     	;# 
   748  0391                     	;# 
   749  0392                     	;# 
   750  0393                     	;# 
   751  0394                     	;# 
   752  0395                     	;# 
   753  0396                     	;# 
   754  039A                     	;# 
   755  039C                     	;# 
   756  039D                     	;# 
   757  039E                     	;# 
   758  039F                     	;# 
   759  0415                     	;# 
   760  0416                     	;# 
   761  0417                     	;# 
   762  041C                     	;# 
   763  041D                     	;# 
   764  041E                     	;# 
   765  0FE4                     	;# 
   766  0FE5                     	;# 
   767  0FE6                     	;# 
   768  0FE7                     	;# 
   769  0FE8                     	;# 
   770  0FE9                     	;# 
   771  0FEA                     	;# 
   772  0FEB                     	;# 
   773  0FED                     	;# 
   774  0FEE                     	;# 
   775  0FEF                     	;# 
   776  0000                     	;# 
   777  0001                     	;# 
   778  0002                     	;# 
   779  0003                     	;# 
   780  0004                     	;# 
   781  0005                     	;# 
   782  0006                     	;# 
   783  0007                     	;# 
   784  0008                     	;# 
   785  0009                     	;# 
   786  000A                     	;# 
   787  000B                     	;# 
   788  000C                     	;# 
   789  000D                     	;# 
   790  000E                     	;# 
   791  0011                     	;# 
   792  0012                     	;# 
   793  0013                     	;# 
   794  0014                     	;# 
   795  0015                     	;# 
   796  0016                     	;# 
   797  0016                     	;# 
   798  0017                     	;# 
   799  0018                     	;# 
   800  0019                     	;# 
   801  001A                     	;# 
   802  001B                     	;# 
   803  001C                     	;# 
   804  001E                     	;# 
   805  001F                     	;# 
   806  008C                     	;# 
   807  008D                     	;# 
   808  008E                     	;# 
   809  0091                     	;# 
   810  0092                     	;# 
   811  0093                     	;# 
   812  0094                     	;# 
   813  0095                     	;# 
   814  0096                     	;# 
   815  0097                     	;# 
   816  0098                     	;# 
   817  0099                     	;# 
   818  009A                     	;# 
   819  009B                     	;# 
   820  009B                     	;# 
   821  009C                     	;# 
   822  009D                     	;# 
   823  009E                     	;# 
   824  010C                     	;# 
   825  010D                     	;# 
   826  010E                     	;# 
   827  0111                     	;# 
   828  0112                     	;# 
   829  0113                     	;# 
   830  0114                     	;# 
   831  0115                     	;# 
   832  0116                     	;# 
   833  0117                     	;# 
   834  0118                     	;# 
   835  0119                     	;# 
   836  011A                     	;# 
   837  011B                     	;# 
   838  011D                     	;# 
   839  011E                     	;# 
   840  018C                     	;# 
   841  018D                     	;# 
   842  018E                     	;# 
   843  0191                     	;# 
   844  0191                     	;# 
   845  0192                     	;# 
   846  0193                     	;# 
   847  0193                     	;# 
   848  0193                     	;# 
   849  0194                     	;# 
   850  0195                     	;# 
   851  0196                     	;# 
   852  0199                     	;# 
   853  019A                     	;# 
   854  019B                     	;# 
   855  019B                     	;# 
   856  019C                     	;# 
   857  019D                     	;# 
   858  019E                     	;# 
   859  019F                     	;# 
   860  020C                     	;# 
   861  020D                     	;# 
   862  020E                     	;# 
   863  0211                     	;# 
   864  0211                     	;# 
   865  0212                     	;# 
   866  0212                     	;# 
   867  0213                     	;# 
   868  0213                     	;# 
   869  0214                     	;# 
   870  0214                     	;# 
   871  0215                     	;# 
   872  0215                     	;# 
   873  0215                     	;# 
   874  0216                     	;# 
   875  0216                     	;# 
   876  0217                     	;# 
   877  0217                     	;# 
   878  0219                     	;# 
   879  021A                     	;# 
   880  021B                     	;# 
   881  021C                     	;# 
   882  021D                     	;# 
   883  021E                     	;# 
   884  021F                     	;# 
   885  0291                     	;# 
   886  0291                     	;# 
   887  0292                     	;# 
   888  0293                     	;# 
   889  0294                     	;# 
   890  0295                     	;# 
   891  0295                     	;# 
   892  0296                     	;# 
   893  0298                     	;# 
   894  0298                     	;# 
   895  0299                     	;# 
   896  029A                     	;# 
   897  029B                     	;# 
   898  029C                     	;# 
   899  029D                     	;# 
   900  029E                     	;# 
   901  0311                     	;# 
   902  0311                     	;# 
   903  0312                     	;# 
   904  0313                     	;# 
   905  0318                     	;# 
   906  0318                     	;# 
   907  0319                     	;# 
   908  031A                     	;# 
   909  038C                     	;# 
   910  038D                     	;# 
   911  038E                     	;# 
   912  0391                     	;# 
   913  0392                     	;# 
   914  0393                     	;# 
   915  0394                     	;# 
   916  0395                     	;# 
   917  0396                     	;# 
   918  039A                     	;# 
   919  039C                     	;# 
   920  039D                     	;# 
   921  039E                     	;# 
   922  039F                     	;# 
   923  0415                     	;# 
   924  0416                     	;# 
   925  0417                     	;# 
   926  041C                     	;# 
   927  041D                     	;# 
   928  041E                     	;# 
   929  0FE4                     	;# 
   930  0FE5                     	;# 
   931  0FE6                     	;# 
   932  0FE7                     	;# 
   933  0FE8                     	;# 
   934  0FE9                     	;# 
   935  0FEA                     	;# 
   936  0FEB                     	;# 
   937  0FED                     	;# 
   938  0FEE                     	;# 
   939  0FEF                     	;# 
   940  0000                     	;# 
   941  0001                     	;# 
   942  0002                     	;# 
   943  0003                     	;# 
   944  0004                     	;# 
   945  0005                     	;# 
   946  0006                     	;# 
   947  0007                     	;# 
   948  0008                     	;# 
   949  0009                     	;# 
   950  000A                     	;# 
   951  000B                     	;# 
   952  000C                     	;# 
   953  000D                     	;# 
   954  000E                     	;# 
   955  0011                     	;# 
   956  0012                     	;# 
   957  0013                     	;# 
   958  0014                     	;# 
   959  0015                     	;# 
   960  0016                     	;# 
   961  0016                     	;# 
   962  0017                     	;# 
   963  0018                     	;# 
   964  0019                     	;# 
   965  001A                     	;# 
   966  001B                     	;# 
   967  001C                     	;# 
   968  001E                     	;# 
   969  001F                     	;# 
   970  008C                     	;# 
   971  008D                     	;# 
   972  008E                     	;# 
   973  0091                     	;# 
   974  0092                     	;# 
   975  0093                     	;# 
   976  0094                     	;# 
   977  0095                     	;# 
   978  0096                     	;# 
   979  0097                     	;# 
   980  0098                     	;# 
   981  0099                     	;# 
   982  009A                     	;# 
   983  009B                     	;# 
   984  009B                     	;# 
   985  009C                     	;# 
   986  009D                     	;# 
   987  009E                     	;# 
   988  010C                     	;# 
   989  010D                     	;# 
   990  010E                     	;# 
   991  0111                     	;# 
   992  0112                     	;# 
   993  0113                     	;# 
   994  0114                     	;# 
   995  0115                     	;# 
   996  0116                     	;# 
   997  0117                     	;# 
   998  0118                     	;# 
   999  0119                     	;# 
  1000  011A                     	;# 
  1001  011B                     	;# 
  1002  011D                     	;# 
  1003  011E                     	;# 
  1004  018C                     	;# 
  1005  018D                     	;# 
  1006  018E                     	;# 
  1007  0191                     	;# 
  1008  0191                     	;# 
  1009  0192                     	;# 
  1010  0193                     	;# 
  1011  0193                     	;# 
  1012  0193                     	;# 
  1013  0194                     	;# 
  1014  0195                     	;# 
  1015  0196                     	;# 
  1016  0199                     	;# 
  1017  019A                     	;# 
  1018  019B                     	;# 
  1019  019B                     	;# 
  1020  019C                     	;# 
  1021  019D                     	;# 
  1022  019E                     	;# 
  1023  019F                     	;# 
  1024  020C                     	;# 
  1025  020D                     	;# 
  1026  020E                     	;# 
  1027  0211                     	;# 
  1028  0211                     	;# 
  1029  0212                     	;# 
  1030  0212                     	;# 
  1031  0213                     	;# 
  1032  0213                     	;# 
  1033  0214                     	;# 
  1034  0214                     	;# 
  1035  0215                     	;# 
  1036  0215                     	;# 
  1037  0215                     	;# 
  1038  0216                     	;# 
  1039  0216                     	;# 
  1040  0217                     	;# 
  1041  0217                     	;# 
  1042  0219                     	;# 
  1043  021A                     	;# 
  1044  021B                     	;# 
  1045  021C                     	;# 
  1046  021D                     	;# 
  1047  021E                     	;# 
  1048  021F                     	;# 
  1049  0291                     	;# 
  1050  0291                     	;# 
  1051  0292                     	;# 
  1052  0293                     	;# 
  1053  0294                     	;# 
  1054  0295                     	;# 
  1055  0295                     	;# 
  1056  0296                     	;# 
  1057  0298                     	;# 
  1058  0298                     	;# 
  1059  0299                     	;# 
  1060  029A                     	;# 
  1061  029B                     	;# 
  1062  029C                     	;# 
  1063  029D                     	;# 
  1064  029E                     	;# 
  1065  0311                     	;# 
  1066  0311                     	;# 
  1067  0312                     	;# 
  1068  0313                     	;# 
  1069  0318                     	;# 
  1070  0318                     	;# 
  1071  0319                     	;# 
  1072  031A                     	;# 
  1073  038C                     	;# 
  1074  038D                     	;# 
  1075  038E                     	;# 
  1076  0391                     	;# 
  1077  0392                     	;# 
  1078  0393                     	;# 
  1079  0394                     	;# 
  1080  0395                     	;# 
  1081  0396                     	;# 
  1082  039A                     	;# 
  1083  039C                     	;# 
  1084  039D                     	;# 
  1085  039E                     	;# 
  1086  039F                     	;# 
  1087  0415                     	;# 
  1088  0416                     	;# 
  1089  0417                     	;# 
  1090  041C                     	;# 
  1091  041D                     	;# 
  1092  041E                     	;# 
  1093  0FE4                     	;# 
  1094  0FE5                     	;# 
  1095  0FE6                     	;# 
  1096  0FE7                     	;# 
  1097  0FE8                     	;# 
  1098  0FE9                     	;# 
  1099  0FEA                     	;# 
  1100  0FEB                     	;# 
  1101  0FED                     	;# 
  1102  0FEE                     	;# 
  1103  0FEF                     	;# 
  1104  0000                     	;# 
  1105  0001                     	;# 
  1106  0002                     	;# 
  1107  0003                     	;# 
  1108  0004                     	;# 
  1109  0005                     	;# 
  1110  0006                     	;# 
  1111  0007                     	;# 
  1112  0008                     	;# 
  1113  0009                     	;# 
  1114  000A                     	;# 
  1115  000B                     	;# 
  1116  000C                     	;# 
  1117  000D                     	;# 
  1118  000E                     	;# 
  1119  0011                     	;# 
  1120  0012                     	;# 
  1121  0013                     	;# 
  1122  0014                     	;# 
  1123  0015                     	;# 
  1124  0016                     	;# 
  1125  0016                     	;# 
  1126  0017                     	;# 
  1127  0018                     	;# 
  1128  0019                     	;# 
  1129  001A                     	;# 
  1130  001B                     	;# 
  1131  001C                     	;# 
  1132  001E                     	;# 
  1133  001F                     	;# 
  1134  008C                     	;# 
  1135  008D                     	;# 
  1136  008E                     	;# 
  1137  0091                     	;# 
  1138  0092                     	;# 
  1139  0093                     	;# 
  1140  0094                     	;# 
  1141  0095                     	;# 
  1142  0096                     	;# 
  1143  0097                     	;# 
  1144  0098                     	;# 
  1145  0099                     	;# 
  1146  009A                     	;# 
  1147  009B                     	;# 
  1148  009B                     	;# 
  1149  009C                     	;# 
  1150  009D                     	;# 
  1151  009E                     	;# 
  1152  010C                     	;# 
  1153  010D                     	;# 
  1154  010E                     	;# 
  1155  0111                     	;# 
  1156  0112                     	;# 
  1157  0113                     	;# 
  1158  0114                     	;# 
  1159  0115                     	;# 
  1160  0116                     	;# 
  1161  0117                     	;# 
  1162  0118                     	;# 
  1163  0119                     	;# 
  1164  011A                     	;# 
  1165  011B                     	;# 
  1166  011D                     	;# 
  1167  011E                     	;# 
  1168  018C                     	;# 
  1169  018D                     	;# 
  1170  018E                     	;# 
  1171  0191                     	;# 
  1172  0191                     	;# 
  1173  0192                     	;# 
  1174  0193                     	;# 
  1175  0193                     	;# 
  1176  0193                     	;# 
  1177  0194                     	;# 
  1178  0195                     	;# 
  1179  0196                     	;# 
  1180  0199                     	;# 
  1181  019A                     	;# 
  1182  019B                     	;# 
  1183  019B                     	;# 
  1184  019C                     	;# 
  1185  019D                     	;# 
  1186  019E                     	;# 
  1187  019F                     	;# 
  1188  020C                     	;# 
  1189  020D                     	;# 
  1190  020E                     	;# 
  1191  0211                     	;# 
  1192  0211                     	;# 
  1193  0212                     	;# 
  1194  0212                     	;# 
  1195  0213                     	;# 
  1196  0213                     	;# 
  1197  0214                     	;# 
  1198  0214                     	;# 
  1199  0215                     	;# 
  1200  0215                     	;# 
  1201  0215                     	;# 
  1202  0216                     	;# 
  1203  0216                     	;# 
  1204  0217                     	;# 
  1205  0217                     	;# 
  1206  0219                     	;# 
  1207  021A                     	;# 
  1208  021B                     	;# 
  1209  021C                     	;# 
  1210  021D                     	;# 
  1211  021E                     	;# 
  1212  021F                     	;# 
  1213  0291                     	;# 
  1214  0291                     	;# 
  1215  0292                     	;# 
  1216  0293                     	;# 
  1217  0294                     	;# 
  1218  0295                     	;# 
  1219  0295                     	;# 
  1220  0296                     	;# 
  1221  0298                     	;# 
  1222  0298                     	;# 
  1223  0299                     	;# 
  1224  029A                     	;# 
  1225  029B                     	;# 
  1226  029C                     	;# 
  1227  029D                     	;# 
  1228  029E                     	;# 
  1229  0311                     	;# 
  1230  0311                     	;# 
  1231  0312                     	;# 
  1232  0313                     	;# 
  1233  0318                     	;# 
  1234  0318                     	;# 
  1235  0319                     	;# 
  1236  031A                     	;# 
  1237  038C                     	;# 
  1238  038D                     	;# 
  1239  038E                     	;# 
  1240  0391                     	;# 
  1241  0392                     	;# 
  1242  0393                     	;# 
  1243  0394                     	;# 
  1244  0395                     	;# 
  1245  0396                     	;# 
  1246  039A                     	;# 
  1247  039C                     	;# 
  1248  039D                     	;# 
  1249  039E                     	;# 
  1250  039F                     	;# 
  1251  0415                     	;# 
  1252  0416                     	;# 
  1253  0417                     	;# 
  1254  041C                     	;# 
  1255  041D                     	;# 
  1256  041E                     	;# 
  1257  0FE4                     	;# 
  1258  0FE5                     	;# 
  1259  0FE6                     	;# 
  1260  0FE7                     	;# 
  1261  0FE8                     	;# 
  1262  0FE9                     	;# 
  1263  0FEA                     	;# 
  1264  0FEB                     	;# 
  1265  0FED                     	;# 
  1266  0FEE                     	;# 
  1267  0FEF                     	;# 
  1268  0000                     	;# 
  1269  0001                     	;# 
  1270  0002                     	;# 
  1271  0003                     	;# 
  1272  0004                     	;# 
  1273  0005                     	;# 
  1274  0006                     	;# 
  1275  0007                     	;# 
  1276  0008                     	;# 
  1277  0009                     	;# 
  1278  000A                     	;# 
  1279  000B                     	;# 
  1280  000C                     	;# 
  1281  000D                     	;# 
  1282  000E                     	;# 
  1283  0011                     	;# 
  1284  0012                     	;# 
  1285  0013                     	;# 
  1286  0014                     	;# 
  1287  0015                     	;# 
  1288  0016                     	;# 
  1289  0016                     	;# 
  1290  0017                     	;# 
  1291  0018                     	;# 
  1292  0019                     	;# 
  1293  001A                     	;# 
  1294  001B                     	;# 
  1295  001C                     	;# 
  1296  001E                     	;# 
  1297  001F                     	;# 
  1298  008C                     	;# 
  1299  008D                     	;# 
  1300  008E                     	;# 
  1301  0091                     	;# 
  1302  0092                     	;# 
  1303  0093                     	;# 
  1304  0094                     	;# 
  1305  0095                     	;# 
  1306  0096                     	;# 
  1307  0097                     	;# 
  1308  0098                     	;# 
  1309  0099                     	;# 
  1310  009A                     	;# 
  1311  009B                     	;# 
  1312  009B                     	;# 
  1313  009C                     	;# 
  1314  009D                     	;# 
  1315  009E                     	;# 
  1316  010C                     	;# 
  1317  010D                     	;# 
  1318  010E                     	;# 
  1319  0111                     	;# 
  1320  0112                     	;# 
  1321  0113                     	;# 
  1322  0114                     	;# 
  1323  0115                     	;# 
  1324  0116                     	;# 
  1325  0117                     	;# 
  1326  0118                     	;# 
  1327  0119                     	;# 
  1328  011A                     	;# 
  1329  011B                     	;# 
  1330  011D                     	;# 
  1331  011E                     	;# 
  1332  018C                     	;# 
  1333  018D                     	;# 
  1334  018E                     	;# 
  1335  0191                     	;# 
  1336  0191                     	;# 
  1337  0192                     	;# 
  1338  0193                     	;# 
  1339  0193                     	;# 
  1340  0193                     	;# 
  1341  0194                     	;# 
  1342  0195                     	;# 
  1343  0196                     	;# 
  1344  0199                     	;# 
  1345  019A                     	;# 
  1346  019B                     	;# 
  1347  019B                     	;# 
  1348  019C                     	;# 
  1349  019D                     	;# 
  1350  019E                     	;# 
  1351  019F                     	;# 
  1352  020C                     	;# 
  1353  020D                     	;# 
  1354  020E                     	;# 
  1355  0211                     	;# 
  1356  0211                     	;# 
  1357  0212                     	;# 
  1358  0212                     	;# 
  1359  0213                     	;# 
  1360  0213                     	;# 
  1361  0214                     	;# 
  1362  0214                     	;# 
  1363  0215                     	;# 
  1364  0215                     	;# 
  1365  0215                     	;# 
  1366  0216                     	;# 
  1367  0216                     	;# 
  1368  0217                     	;# 
  1369  0217                     	;# 
  1370  0219                     	;# 
  1371  021A                     	;# 
  1372  021B                     	;# 
  1373  021C                     	;# 
  1374  021D                     	;# 
  1375  021E                     	;# 
  1376  021F                     	;# 
  1377  0291                     	;# 
  1378  0291                     	;# 
  1379  0292                     	;# 
  1380  0293                     	;# 
  1381  0294                     	;# 
  1382  0295                     	;# 
  1383  0295                     	;# 
  1384  0296                     	;# 
  1385  0298                     	;# 
  1386  0298                     	;# 
  1387  0299                     	;# 
  1388  029A                     	;# 
  1389  029B                     	;# 
  1390  029C                     	;# 
  1391  029D                     	;# 
  1392  029E                     	;# 
  1393  0311                     	;# 
  1394  0311                     	;# 
  1395  0312                     	;# 
  1396  0313                     	;# 
  1397  0318                     	;# 
  1398  0318                     	;# 
  1399  0319                     	;# 
  1400  031A                     	;# 
  1401  038C                     	;# 
  1402  038D                     	;# 
  1403  038E                     	;# 
  1404  0391                     	;# 
  1405  0392                     	;# 
  1406  0393                     	;# 
  1407  0394                     	;# 
  1408  0395                     	;# 
  1409  0396                     	;# 
  1410  039A                     	;# 
  1411  039C                     	;# 
  1412  039D                     	;# 
  1413  039E                     	;# 
  1414  039F                     	;# 
  1415  0415                     	;# 
  1416  0416                     	;# 
  1417  0417                     	;# 
  1418  041C                     	;# 
  1419  041D                     	;# 
  1420  041E                     	;# 
  1421  0FE4                     	;# 
  1422  0FE5                     	;# 
  1423  0FE6                     	;# 
  1424  0FE7                     	;# 
  1425  0FE8                     	;# 
  1426  0FE9                     	;# 
  1427  0FEA                     	;# 
  1428  0FEB                     	;# 
  1429  0FED                     	;# 
  1430  0FEE                     	;# 
  1431  0FEF                     	;# 
  1432  0000                     	;# 
  1433  0001                     	;# 
  1434  0002                     	;# 
  1435  0003                     	;# 
  1436  0004                     	;# 
  1437  0005                     	;# 
  1438  0006                     	;# 
  1439  0007                     	;# 
  1440  0008                     	;# 
  1441  0009                     	;# 
  1442  000A                     	;# 
  1443  000B                     	;# 
  1444  000C                     	;# 
  1445  000D                     	;# 
  1446  000E                     	;# 
  1447  0011                     	;# 
  1448  0012                     	;# 
  1449  0013                     	;# 
  1450  0014                     	;# 
  1451  0015                     	;# 
  1452  0016                     	;# 
  1453  0016                     	;# 
  1454  0017                     	;# 
  1455  0018                     	;# 
  1456  0019                     	;# 
  1457  001A                     	;# 
  1458  001B                     	;# 
  1459  001C                     	;# 
  1460  001E                     	;# 
  1461  001F                     	;# 
  1462  008C                     	;# 
  1463  008D                     	;# 
  1464  008E                     	;# 
  1465  0091                     	;# 
  1466  0092                     	;# 
  1467  0093                     	;# 
  1468  0094                     	;# 
  1469  0095                     	;# 
  1470  0096                     	;# 
  1471  0097                     	;# 
  1472  0098                     	;# 
  1473  0099                     	;# 
  1474  009A                     	;# 
  1475  009B                     	;# 
  1476  009B                     	;# 
  1477  009C                     	;# 
  1478  009D                     	;# 
  1479  009E                     	;# 
  1480  010C                     	;# 
  1481  010D                     	;# 
  1482  010E                     	;# 
  1483  0111                     	;# 
  1484  0112                     	;# 
  1485  0113                     	;# 
  1486  0114                     	;# 
  1487  0115                     	;# 
  1488  0116                     	;# 
  1489  0117                     	;# 
  1490  0118                     	;# 
  1491  0119                     	;# 
  1492  011A                     	;# 
  1493  011B                     	;# 
  1494  011D                     	;# 
  1495  011E                     	;# 
  1496  018C                     	;# 
  1497  018D                     	;# 
  1498  018E                     	;# 
  1499  0191                     	;# 
  1500  0191                     	;# 
  1501  0192                     	;# 
  1502  0193                     	;# 
  1503  0193                     	;# 
  1504  0193                     	;# 
  1505  0194                     	;# 
  1506  0195                     	;# 
  1507  0196                     	;# 
  1508  0199                     	;# 
  1509  019A                     	;# 
  1510  019B                     	;# 
  1511  019B                     	;# 
  1512  019C                     	;# 
  1513  019D                     	;# 
  1514  019E                     	;# 
  1515  019F                     	;# 
  1516  020C                     	;# 
  1517  020D                     	;# 
  1518  020E                     	;# 
  1519  0211                     	;# 
  1520  0211                     	;# 
  1521  0212                     	;# 
  1522  0212                     	;# 
  1523  0213                     	;# 
  1524  0213                     	;# 
  1525  0214                     	;# 
  1526  0214                     	;# 
  1527  0215                     	;# 
  1528  0215                     	;# 
  1529  0215                     	;# 
  1530  0216                     	;# 
  1531  0216                     	;# 
  1532  0217                     	;# 
  1533  0217                     	;# 
  1534  0219                     	;# 
  1535  021A                     	;# 
  1536  021B                     	;# 
  1537  021C                     	;# 
  1538  021D                     	;# 
  1539  021E                     	;# 
  1540  021F                     	;# 
  1541  0291                     	;# 
  1542  0291                     	;# 
  1543  0292                     	;# 
  1544  0293                     	;# 
  1545  0294                     	;# 
  1546  0295                     	;# 
  1547  0295                     	;# 
  1548  0296                     	;# 
  1549  0298                     	;# 
  1550  0298                     	;# 
  1551  0299                     	;# 
  1552  029A                     	;# 
  1553  029B                     	;# 
  1554  029C                     	;# 
  1555  029D                     	;# 
  1556  029E                     	;# 
  1557  0311                     	;# 
  1558  0311                     	;# 
  1559  0312                     	;# 
  1560  0313                     	;# 
  1561  0318                     	;# 
  1562  0318                     	;# 
  1563  0319                     	;# 
  1564  031A                     	;# 
  1565  038C                     	;# 
  1566  038D                     	;# 
  1567  038E                     	;# 
  1568  0391                     	;# 
  1569  0392                     	;# 
  1570  0393                     	;# 
  1571  0394                     	;# 
  1572  0395                     	;# 
  1573  0396                     	;# 
  1574  039A                     	;# 
  1575  039C                     	;# 
  1576  039D                     	;# 
  1577  039E                     	;# 
  1578  039F                     	;# 
  1579  0415                     	;# 
  1580  0416                     	;# 
  1581  0417                     	;# 
  1582  041C                     	;# 
  1583  041D                     	;# 
  1584  041E                     	;# 
  1585  0FE4                     	;# 
  1586  0FE5                     	;# 
  1587  0FE6                     	;# 
  1588  0FE7                     	;# 
  1589  0FE8                     	;# 
  1590  0FE9                     	;# 
  1591  0FEA                     	;# 
  1592  0FEB                     	;# 
  1593  0FED                     	;# 
  1594  0FEE                     	;# 
  1595  0FEF                     	;# 
  1596  0000                     	;# 
  1597  0001                     	;# 
  1598  0002                     	;# 
  1599  0003                     	;# 
  1600  0004                     	;# 
  1601  0005                     	;# 
  1602  0006                     	;# 
  1603  0007                     	;# 
  1604  0008                     	;# 
  1605  0009                     	;# 
  1606  000A                     	;# 
  1607  000B                     	;# 
  1608  000C                     	;# 
  1609  000D                     	;# 
  1610  000E                     	;# 
  1611  0011                     	;# 
  1612  0012                     	;# 
  1613  0013                     	;# 
  1614  0014                     	;# 
  1615  0015                     	;# 
  1616  0016                     	;# 
  1617  0016                     	;# 
  1618  0017                     	;# 
  1619  0018                     	;# 
  1620  0019                     	;# 
  1621  001A                     	;# 
  1622  001B                     	;# 
  1623  001C                     	;# 
  1624  001E                     	;# 
  1625  001F                     	;# 
  1626  008C                     	;# 
  1627  008D                     	;# 
  1628  008E                     	;# 
  1629  0091                     	;# 
  1630  0092                     	;# 
  1631  0093                     	;# 
  1632  0094                     	;# 
  1633  0095                     	;# 
  1634  0096                     	;# 
  1635  0097                     	;# 
  1636  0098                     	;# 
  1637  0099                     	;# 
  1638  009A                     	;# 
  1639  009B                     	;# 
  1640  009B                     	;# 
  1641  009C                     	;# 
  1642  009D                     	;# 
  1643  009E                     	;# 
  1644  010C                     	;# 
  1645  010D                     	;# 
  1646  010E                     	;# 
  1647  0111                     	;# 
  1648  0112                     	;# 
  1649  0113                     	;# 
  1650  0114                     	;# 
  1651  0115                     	;# 
  1652  0116                     	;# 
  1653  0117                     	;# 
  1654  0118                     	;# 
  1655  0119                     	;# 
  1656  011A                     	;# 
  1657  011B                     	;# 
  1658  011D                     	;# 
  1659  011E                     	;# 
  1660  018C                     	;# 
  1661  018D                     	;# 
  1662  018E                     	;# 
  1663  0191                     	;# 
  1664  0191                     	;# 
  1665  0192                     	;# 
  1666  0193                     	;# 
  1667  0193                     	;# 
  1668  0193                     	;# 
  1669  0194                     	;# 
  1670  0195                     	;# 
  1671  0196                     	;# 
  1672  0199                     	;# 
  1673  019A                     	;# 
  1674  019B                     	;# 
  1675  019B                     	;# 
  1676  019C                     	;# 
  1677  019D                     	;# 
  1678  019E                     	;# 
  1679  019F                     	;# 
  1680  020C                     	;# 
  1681  020D                     	;# 
  1682  020E                     	;# 
  1683  0211                     	;# 
  1684  0211                     	;# 
  1685  0212                     	;# 
  1686  0212                     	;# 
  1687  0213                     	;# 
  1688  0213                     	;# 
  1689  0214                     	;# 
  1690  0214                     	;# 
  1691  0215                     	;# 
  1692  0215                     	;# 
  1693  0215                     	;# 
  1694  0216                     	;# 
  1695  0216                     	;# 
  1696  0217                     	;# 
  1697  0217                     	;# 
  1698  0219                     	;# 
  1699  021A                     	;# 
  1700  021B                     	;# 
  1701  021C                     	;# 
  1702  021D                     	;# 
  1703  021E                     	;# 
  1704  021F                     	;# 
  1705  0291                     	;# 
  1706  0291                     	;# 
  1707  0292                     	;# 
  1708  0293                     	;# 
  1709  0294                     	;# 
  1710  0295                     	;# 
  1711  0295                     	;# 
  1712  0296                     	;# 
  1713  0298                     	;# 
  1714  0298                     	;# 
  1715  0299                     	;# 
  1716  029A                     	;# 
  1717  029B                     	;# 
  1718  029C                     	;# 
  1719  029D                     	;# 
  1720  029E                     	;# 
  1721  0311                     	;# 
  1722  0311                     	;# 
  1723  0312                     	;# 
  1724  0313                     	;# 
  1725  0318                     	;# 
  1726  0318                     	;# 
  1727  0319                     	;# 
  1728  031A                     	;# 
  1729  038C                     	;# 
  1730  038D                     	;# 
  1731  038E                     	;# 
  1732  0391                     	;# 
  1733  0392                     	;# 
  1734  0393                     	;# 
  1735  0394                     	;# 
  1736  0395                     	;# 
  1737  0396                     	;# 
  1738  039A                     	;# 
  1739  039C                     	;# 
  1740  039D                     	;# 
  1741  039E                     	;# 
  1742  039F                     	;# 
  1743  0415                     	;# 
  1744  0416                     	;# 
  1745  0417                     	;# 
  1746  041C                     	;# 
  1747  041D                     	;# 
  1748  041E                     	;# 
  1749  0FE4                     	;# 
  1750  0FE5                     	;# 
  1751  0FE6                     	;# 
  1752  0FE7                     	;# 
  1753  0FE8                     	;# 
  1754  0FE9                     	;# 
  1755  0FEA                     	;# 
  1756  0FEB                     	;# 
  1757  0FED                     	;# 
  1758  0FEE                     	;# 
  1759  0FEF                     	;# 
  1760  0000                     	;# 
  1761  0001                     	;# 
  1762  0002                     	;# 
  1763  0003                     	;# 
  1764  0004                     	;# 
  1765  0005                     	;# 
  1766  0006                     	;# 
  1767  0007                     	;# 
  1768  0008                     	;# 
  1769  0009                     	;# 
  1770  000A                     	;# 
  1771  000B                     	;# 
  1772  000C                     	;# 
  1773  000D                     	;# 
  1774  000E                     	;# 
  1775  0011                     	;# 
  1776  0012                     	;# 
  1777  0013                     	;# 
  1778  0014                     	;# 
  1779  0015                     	;# 
  1780  0016                     	;# 
  1781  0016                     	;# 
  1782  0017                     	;# 
  1783  0018                     	;# 
  1784  0019                     	;# 
  1785  001A                     	;# 
  1786  001B                     	;# 
  1787  001C                     	;# 
  1788  001E                     	;# 
  1789  001F                     	;# 
  1790  008C                     	;# 
  1791  008D                     	;# 
  1792  008E                     	;# 
  1793  0091                     	;# 
  1794  0092                     	;# 
  1795  0093                     	;# 
  1796  0094                     	;# 
  1797  0095                     	;# 
  1798  0096                     	;# 
  1799  0097                     	;# 
  1800  0098                     	;# 
  1801  0099                     	;# 
  1802  009A                     	;# 
  1803  009B                     	;# 
  1804  009B                     	;# 
  1805  009C                     	;# 
  1806  009D                     	;# 
  1807  009E                     	;# 
  1808  010C                     	;# 
  1809  010D                     	;# 
  1810  010E                     	;# 
  1811  0111                     	;# 
  1812  0112                     	;# 
  1813  0113                     	;# 
  1814  0114                     	;# 
  1815  0115                     	;# 
  1816  0116                     	;# 
  1817  0117                     	;# 
  1818  0118                     	;# 
  1819  0119                     	;# 
  1820  011A                     	;# 
  1821  011B                     	;# 
  1822  011D                     	;# 
  1823  011E                     	;# 
  1824  018C                     	;# 
  1825  018D                     	;# 
  1826  018E                     	;# 
  1827  0191                     	;# 
  1828  0191                     	;# 
  1829  0192                     	;# 
  1830  0193                     	;# 
  1831  0193                     	;# 
  1832  0193                     	;# 
  1833  0194                     	;# 
  1834  0195                     	;# 
  1835  0196                     	;# 
  1836  0199                     	;# 
  1837  019A                     	;# 
  1838  019B                     	;# 
  1839  019B                     	;# 
  1840  019C                     	;# 
  1841  019D                     	;# 
  1842  019E                     	;# 
  1843  019F                     	;# 
  1844  020C                     	;# 
  1845  020D                     	;# 
  1846  020E                     	;# 
  1847  0211                     	;# 
  1848  0211                     	;# 
  1849  0212                     	;# 
  1850  0212                     	;# 
  1851  0213                     	;# 
  1852  0213                     	;# 
  1853  0214                     	;# 
  1854  0214                     	;# 
  1855  0215                     	;# 
  1856  0215                     	;# 
  1857  0215                     	;# 
  1858  0216                     	;# 
  1859  0216                     	;# 
  1860  0217                     	;# 
  1861  0217                     	;# 
  1862  0219                     	;# 
  1863  021A                     	;# 
  1864  021B                     	;# 
  1865  021C                     	;# 
  1866  021D                     	;# 
  1867  021E                     	;# 
  1868  021F                     	;# 
  1869  0291                     	;# 
  1870  0291                     	;# 
  1871  0292                     	;# 
  1872  0293                     	;# 
  1873  0294                     	;# 
  1874  0295                     	;# 
  1875  0295                     	;# 
  1876  0296                     	;# 
  1877  0298                     	;# 
  1878  0298                     	;# 
  1879  0299                     	;# 
  1880  029A                     	;# 
  1881  029B                     	;# 
  1882  029C                     	;# 
  1883  029D                     	;# 
  1884  029E                     	;# 
  1885  0311                     	;# 
  1886  0311                     	;# 
  1887  0312                     	;# 
  1888  0313                     	;# 
  1889  0318                     	;# 
  1890  0318                     	;# 
  1891  0319                     	;# 
  1892  031A                     	;# 
  1893  038C                     	;# 
  1894  038D                     	;# 
  1895  038E                     	;# 
  1896  0391                     	;# 
  1897  0392                     	;# 
  1898  0393                     	;# 
  1899  0394                     	;# 
  1900  0395                     	;# 
  1901  0396                     	;# 
  1902  039A                     	;# 
  1903  039C                     	;# 
  1904  039D                     	;# 
  1905  039E                     	;# 
  1906  039F                     	;# 
  1907  0415                     	;# 
  1908  0416                     	;# 
  1909  0417                     	;# 
  1910  041C                     	;# 
  1911  041D                     	;# 
  1912  041E                     	;# 
  1913  0FE4                     	;# 
  1914  0FE5                     	;# 
  1915  0FE6                     	;# 
  1916  0FE7                     	;# 
  1917  0FE8                     	;# 
  1918  0FE9                     	;# 
  1919  0FEA                     	;# 
  1920  0FEB                     	;# 
  1921  0FED                     	;# 
  1922  0FEE                     	;# 
  1923  0FEF                     	;# 
  1924                           
  1925                           	psect	idataCOMMON
  1926  0003                     __pidataCOMMON:	
  1927                           
  1928                           ;initializer for _I2C_slaveWriteData
  1929  0003  3455               	retlw	85
  1930                           
  1931                           	psect	idataBANK1
  1932  0ADB                     __pidataBANK1:	
  1933                           
  1934                           ;initializer for _tmr_scaler
  1935  0ADB  3401               	retlw	1
  1936                           
  1937                           ;initializer for _BACKPLANE_SLAVE_ADDRESS
  1938  0ADC  3401               	retlw	1
  1939                           
  1940                           ;initializer for _type_no_data
  1941  0ADD  3406               	retlw	6
  1942                           
  1943                           	psect	stringtext
  1944  05FC                     __pstringtext:	
  1945  05FC                     _dpowers:	
  1946  05FC  3401               	retlw	1
  1947  05FD  3400               	retlw	0
  1948  05FE  340A               	retlw	10
  1949  05FF  3400               	retlw	0
  1950  0600  3464               	retlw	100
  1951  0601  3400               	retlw	0
  1952  0602  34E8               	retlw	232
  1953  0603  3403               	retlw	3
  1954  0604  3410               	retlw	16
  1955  0605  3427               	retlw	39
  1956  0606                     __end_of_dpowers:	
  1957  0606                     _RESOLUTION:	
  1958  0606  34FF               	retlw	255
  1959  0607  34FF               	retlw	255
  1960  0608                     __end_of_RESOLUTION:	
  1961  0608                     STR_36:	
  1962  0608  3449               	retlw	73	;'I'
  1963  0609  344C               	retlw	76	;'L'
  1964  060A  344C               	retlw	76	;'L'
  1965  060B  3445               	retlw	69	;'E'
  1966  060C  3447               	retlw	71	;'G'
  1967  060D  3441               	retlw	65	;'A'
  1968  060E  344C               	retlw	76	;'L'
  1969  060F  345F               	retlw	95	;'_'
  1970  0610  3454               	retlw	84	;'T'
  1971  0611  3459               	retlw	89	;'Y'
  1972  0612  3450               	retlw	80	;'P'
  1973  0613  3445               	retlw	69	;'E'
  1974  0614  340A               	retlw	10
  1975  0615  3400               	retlw	0
  1976  0616                     STR_16:	
  1977  0616  3424               	retlw	36	;'$'
  1978  0617  343A               	retlw	58	;':'
  1979  0618  3452               	retlw	82	;'R'
  1980  0619  3444               	retlw	68	;'D'
  1981  061A  3441               	retlw	65	;'A'
  1982  061B  343A               	retlw	58	;':'
  1983  061C  3425               	retlw	37	;'%'
  1984  061D  3464               	retlw	100	;'d'
  1985  061E  340A               	retlw	10
  1986  061F  3400               	retlw	0
  1987  0620                     STR_13:	
  1988  0620  3424               	retlw	36	;'$'
  1989  0621  343A               	retlw	58	;':'
  1990  0622  3447               	retlw	71	;'G'
  1991  0623  3445               	retlw	69	;'E'
  1992  0624  3454               	retlw	84	;'T'
  1993  0625  343A               	retlw	58	;':'
  1994  0626  3425               	retlw	37	;'%'
  1995  0627  3464               	retlw	100	;'d'
  1996  0628  340A               	retlw	10
  1997  0629  3400               	retlw	0
  1998  062A                     STR_34:	
  1999  062A  342D               	retlw	45	;'-'
  2000  062B  3425               	retlw	37	;'%'
  2001  062C  3464               	retlw	100	;'d'
  2002  062D  342E               	retlw	46	;'.'
  2003  062E  3425               	retlw	37	;'%'
  2004  062F  3430               	retlw	48	;'0'
  2005  0630  3432               	retlw	50	;'2'
  2006  0631  3464               	retlw	100	;'d'
  2007  0632  340A               	retlw	10
  2008  0633  3400               	retlw	0
  2009  0634                     STR_5:	
  2010  0634  3424               	retlw	36	;'$'
  2011  0635  343A               	retlw	58	;':'
  2012  0636  3457               	retlw	87	;'W'
  2013  0637  3448               	retlw	72	;'H'
  2014  0638  344F               	retlw	79	;'O'
  2015  0639  343A               	retlw	58	;':'
  2016  063A  3425               	retlw	37	;'%'
  2017  063B  3473               	retlw	115	;'s'
  2018  063C  340A               	retlw	10
  2019  063D  3400               	retlw	0
  2020  063E                     STR_9:	
  2021  063E  342A               	retlw	42	;'*'
  2022  063F  343A               	retlw	58	;':'
  2023  0640  3453               	retlw	83	;'S'
  2024  0641  3454               	retlw	84	;'T'
  2025  0642  3450               	retlw	80	;'P'
  2026  0643  343A               	retlw	58	;':'
  2027  0644  3425               	retlw	37	;'%'
  2028  0645  3473               	retlw	115	;'s'
  2029  0646  340A               	retlw	10
  2030  0647  3400               	retlw	0
  2031  0648                     STR_32:	
  2032  0648  342D               	retlw	45	;'-'
  2033  0649  3425               	retlw	37	;'%'
  2034  064A  3464               	retlw	100	;'d'
  2035  064B  342E               	retlw	46	;'.'
  2036  064C  3425               	retlw	37	;'%'
  2037  064D  3430               	retlw	48	;'0'
  2038  064E  3432               	retlw	50	;'2'
  2039  064F  3464               	retlw	100	;'d'
  2040  0650  342C               	retlw	44	;','
  2041  0651  3400               	retlw	0
  2042  0652                     STR_24:	
  2043  0652  3455               	retlw	85	;'U'
  2044  0653  3449               	retlw	73	;'I'
  2045  0654  344E               	retlw	78	;'N'
  2046  0655  3454               	retlw	84	;'T'
  2047  0656  3431               	retlw	49	;'1'
  2048  0657  3436               	retlw	54	;'6'
  2049  0658  345F               	retlw	95	;'_'
  2050  0659  3454               	retlw	84	;'T'
  2051  065A  343A               	retlw	58	;':'
  2052  065B  3400               	retlw	0
  2053  065C                     STR_1:	
  2054  065C  3453               	retlw	83	;'S'
  2055  065D  3448               	retlw	72	;'H'
  2056  065E  3454               	retlw	84	;'T'
  2057  065F  3433               	retlw	51	;'3'
  2058  0660  3431               	retlw	49	;'1'
  2059  0661  342D               	retlw	45	;'-'
  2060  0662  3444               	retlw	68	;'D'
  2061  0663  3449               	retlw	73	;'I'
  2062  0664  3453               	retlw	83	;'S'
  2063  0665  3400               	retlw	0
  2064  0666                     STR_35:	
  2065  0666  344E               	retlw	78	;'N'
  2066  0667  344F               	retlw	79	;'O'
  2067  0668  345F               	retlw	95	;'_'
  2068  0669  3444               	retlw	68	;'D'
  2069  066A  3441               	retlw	65	;'A'
  2070  066B  3454               	retlw	84	;'T'
  2071  066C  3441               	retlw	65	;'A'
  2072  066D  340A               	retlw	10
  2073  066E  3400               	retlw	0
  2074  066F                     STR_18:	
  2075  066F  3455               	retlw	85	;'U'
  2076  0670  3449               	retlw	73	;'I'
  2077  0671  344E               	retlw	78	;'N'
  2078  0672  3454               	retlw	84	;'T'
  2079  0673  3438               	retlw	56	;'8'
  2080  0674  345F               	retlw	95	;'_'
  2081  0675  3454               	retlw	84	;'T'
  2082  0676  343A               	retlw	58	;':'
  2083  0677  3400               	retlw	0
  2084  0678                     STR_30:	
  2085  0678  3446               	retlw	70	;'F'
  2086  0679  344C               	retlw	76	;'L'
  2087  067A  344F               	retlw	79	;'O'
  2088  067B  3441               	retlw	65	;'A'
  2089  067C  3454               	retlw	84	;'T'
  2090  067D  343A               	retlw	58	;':'
  2091  067E  3400               	retlw	0
  2092  067F                     STR_2:	
  2093  067F  3428               	retlw	40	;'('
  2094  0680  346E               	retlw	110	;'n'
  2095  0681  3475               	retlw	117	;'u'
  2096  0682  346C               	retlw	108	;'l'
  2097  0683  346C               	retlw	108	;'l'
  2098  0684  3429               	retlw	41	;')'
  2099  0685  3400               	retlw	0
  2100  0686                     STR_17:	
  2101  0686  3425               	retlw	37	;'%'
  2102  0687  3425               	retlw	37	;'%'
  2103  0688  3425               	retlw	37	;'%'
  2104  0689  3464               	retlw	100	;'d'
  2105  068A  343A               	retlw	58	;':'
  2106  068B  3400               	retlw	0
  2107  068C                     STR_3:	
  2108  068C  3423               	retlw	35	;'#'
  2109  068D  3425               	retlw	37	;'%'
  2110  068E  3473               	retlw	115	;'s'
  2111  068F  340A               	retlw	10
  2112  0690  3400               	retlw	0
  2113  0691                     STR_20:	
  2114  0691  3425               	retlw	37	;'%'
  2115  0692  3475               	retlw	117	;'u'
  2116  0693  340A               	retlw	10
  2117  0694  3400               	retlw	0
  2118  0695                     STR_22:	
  2119  0695  3425               	retlw	37	;'%'
  2120  0696  3464               	retlw	100	;'d'
  2121  0697  342C               	retlw	44	;','
  2122  0698  3400               	retlw	0
  2123  0699                     STR_19:	
  2124  0699  3425               	retlw	37	;'%'
  2125  069A  3475               	retlw	117	;'u'
  2126  069B  342C               	retlw	44	;','
  2127  069C  3400               	retlw	0
  2128  069D                     STR_15:	
  2129  069D  3452               	retlw	82	;'R'
  2130  069E  3444               	retlw	68	;'D'
  2131  069F  3441               	retlw	65	;'A'
  2132  06A0  3400               	retlw	0
  2133  06A1                     STR_14:	
  2134  06A1  3457               	retlw	87	;'W'
  2135  06A2  3444               	retlw	68	;'D'
  2136  06A3  3441               	retlw	65	;'A'
  2137  06A4  3400               	retlw	0
  2138  06A5                     STR_7:	
  2139  06A5  3453               	retlw	83	;'S'
  2140  06A6  3454               	retlw	84	;'T'
  2141  06A7  3441               	retlw	65	;'A'
  2142  06A8  3400               	retlw	0
  2143  06A9                     STR_10:	
  2144  06A9  3441               	retlw	65	;'A'
  2145  06AA  3443               	retlw	67	;'C'
  2146  06AB  344B               	retlw	75	;'K'
  2147  06AC  3400               	retlw	0
  2148  06AD                     STR_4:	
  2149  06AD  3457               	retlw	87	;'W'
  2150  06AE  3448               	retlw	72	;'H'
  2151  06AF  344F               	retlw	79	;'O'
  2152  06B0  3400               	retlw	0
  2153  06B1                     STR_8:	
  2154  06B1  3453               	retlw	83	;'S'
  2155  06B2  3454               	retlw	84	;'T'
  2156  06B3  3450               	retlw	80	;'P'
  2157  06B4  3400               	retlw	0
  2158  06B5                     STR_12:	
  2159  06B5  3447               	retlw	71	;'G'
  2160  06B6  3445               	retlw	69	;'E'
  2161  06B7  3454               	retlw	84	;'T'
  2162  06B8  3400               	retlw	0
  2163  06B9                     STR_11:	
  2164  06B9  3453               	retlw	83	;'S'
  2165  06BA  3445               	retlw	69	;'E'
  2166  06BB  3454               	retlw	84	;'T'
  2167  06BC  3400               	retlw	0
  2168  06BD                     STR_6:	
  2169  06BD  3453               	retlw	83	;'S'
  2170  06BE  3441               	retlw	65	;'A'
  2171  06BF  3456               	retlw	86	;'V'
  2172  06C0  3400               	retlw	0
  2173  061C                     
  2174                           ; #config settings
  2175  0000                     
  2176                           	psect	nvBANK1
  2177  00E1                     __pnvBANK1:	
  2178  00E1                     _device_id_:	
  2179  00E1                     	ds	2
  2180  00E3                     _PROTOCOL_Set_Handler:	
  2181  00E3                     	ds	2
  2182  00E5                     _PROTOCOL_Stop_Handler:	
  2183  00E5                     	ds	2
  2184  00E7                     _PROTOCOL_Start_Handler:	
  2185  00E7                     	ds	2
  2186  0015                     _TMR0	set	21
  2187  000B                     _INTCONbits	set	11
  2188  0014                     _PIR4bits	set	20
  2189  0011                     _PIR1bits	set	17
  2190  005A                     _TMR0IF	set	90
  2191  0095                     _OPTION_REG	set	149
  2192  0095                     _OPTION_REGbits	set	149
  2193  008E                     _TRISC	set	142
  2194  008D                     _TRISB	set	141
  2195  008C                     _TRISA	set	140
  2196  0097                     _WDTCON	set	151
  2197  0098                     _OSCTUNE	set	152
  2198  0099                     _OSCCON	set	153
  2199  0094                     _PIE4bits	set	148
  2200  0091                     _PIE1bits	set	145
  2201  010E                     _LATCbits	set	270
  2202  011D                     _APFCON0	set	285
  2203  011E                     _APFCON1	set	286
  2204  010E                     _LATC	set	270
  2205  010D                     _LATB	set	269
  2206  010C                     _LATA	set	268
  2207  0196                     _EECON2	set	406
  2208  0193                     _EEDATL	set	403
  2209  0194                     _EEDATH	set	404
  2210  0195                     _EECON1bits	set	405
  2211  0192                     _EEADRH	set	402
  2212  0191                     _EEADRL	set	401
  2213  018C                     _ANSELA	set	396
  2214  018D                     _ANSELB	set	397
  2215  018E                     _ANSELC	set	398
  2216  0199                     _RCREG	set	409
  2217  019D                     _RCSTAbits	set	413
  2218  019A                     _TXREG	set	410
  2219  019C                     _SPBRGH	set	412
  2220  019B                     _SPBRGL	set	411
  2221  019E                     _TXSTA	set	414
  2222  019D                     _RCSTA	set	413
  2223  019F                     _BAUDCON	set	415
  2224  020E                     _WPUC	set	526
  2225  020C                     _WPUA	set	524
  2226  020D                     _WPUB	set	525
  2227  0219                     _SSP2BUF	set	537
  2228  021E                     _SSP2CON2bits	set	542
  2229  021D                     _SSP2CON1bits	set	541
  2230  021A                     _SSP2ADD	set	538
  2231  021F                     _SSP2CON3	set	543
  2232  021D                     _SSP2CON1	set	541
  2233  021C                     _SSP2STAT	set	540
  2234  0215                     _SSP1CON1bits	set	533
  2235  0216                     _SSP1CON2bits	set	534
  2236  0214                     _SSP1STATbits	set	532
  2237  0211                     _SSP1BUF	set	529
  2238  0212                     _SSP1ADD	set	530
  2239  0213                     _SSP1MSK	set	531
  2240  0217                     _SSP1CON3	set	535
  2241  0216                     _SSP1CON2	set	534
  2242  0215                     _SSP1CON1	set	533
  2243  0214                     _SSP1STAT	set	532
  2244                           
  2245                           	psect	cinit
  2246  004A                     start_initialization:	
  2247  004A                     __initialization:	
  2248                           
  2249                           ; Initialize objects allocated to COMMON
  2250  004A  3180  2003  3180   	fcall	__pidataCOMMON	;fetch initializer
  2251  004D  00FD               	movwf	__pdataCOMMON& (0+127)
  2252                           
  2253                           ; Initialize objects allocated to BANK1
  2254  004E  0021               	movlb	1	; select bank1
  2255  004F  318A  22DB  3180   	fcall	__pidataBANK1	;fetch initializer
  2256  0052  00E9               	movwf	__pdataBANK1& (0+127)
  2257  0053  318A  22DC  3180   	fcall	__pidataBANK1+1	;fetch initializer
  2258  0056  00EA               	movwf	(__pdataBANK1+1)& (0+127)
  2259  0057  318A  22DD  3180   	fcall	__pidataBANK1+2	;fetch initializer
  2260  005A  00EB               	movwf	(__pdataBANK1+2)& (0+127)
  2261                           
  2262                           ; Clear objects allocated to COMMON
  2263  005B  01FA               	clrf	__pbssCOMMON& (0+127)
  2264  005C  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
  2265  005D  01FC               	clrf	(__pbssCOMMON+2)& (0+127)
  2266                           
  2267                           ; Clear objects allocated to BANK0
  2268  005E  3062               	movlw	low __pbssBANK0
  2269  005F  0084               	movwf	4
  2270  0060  3000               	movlw	high __pbssBANK0
  2271  0061  0085               	movwf	5
  2272  0062  300D               	movlw	13
  2273  0063  318B  2301  3180   	fcall	clear_ram0
  2274                           
  2275                           ; Clear objects allocated to BANK1
  2276  0066  30A0               	movlw	low __pbssBANK1
  2277  0067  0084               	movwf	4
  2278  0068  3000               	movlw	high __pbssBANK1
  2279  0069  0085               	movwf	5
  2280  006A  3041               	movlw	65
  2281  006B  318B  2301  3180   	fcall	clear_ram0
  2282                           
  2283                           ; Clear objects allocated to BANK2
  2284  006E  3020               	movlw	low __pbssBANK2
  2285  006F  0084               	movwf	4
  2286  0070  3001               	movlw	high __pbssBANK2
  2287  0071  0085               	movwf	5
  2288  0072  3048               	movlw	72
  2289  0073  318B  2301  3180   	fcall	clear_ram0
  2290                           
  2291                           ; Clear objects allocated to BANK3
  2292  0076  30A0               	movlw	low __pbssBANK3
  2293  0077  0084               	movwf	4
  2294  0078  3001               	movlw	high __pbssBANK3
  2295  0079  0085               	movwf	5
  2296  007A  3030               	movlw	48
  2297  007B  318B  2301         	fcall	clear_ram0
  2298  007D                     end_of_initialization:	
  2299                           ;End of C runtime variable initialization code
  2300                           
  2301  007D                     __end_of__initialization:	
  2302  007D  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2303  007E  0020               	movlb	0
  2304  007F  3187  2FD2         	ljmp	_main	;jump to C main() function
  2305                           
  2306                           	psect	bssCOMMON
  2307  007A                     __pbssCOMMON:	
  2308  007A                     _eusartTxBufferRemaining:	
  2309  007A                     	ds	1
  2310  007B                     _eusartTxTail:	
  2311  007B                     	ds	1
  2312  007C                     _eusartTxHead:	
  2313  007C                     	ds	1
  2314                           
  2315                           	psect	dataCOMMON
  2316  007D                     __pdataCOMMON:	
  2317  007D                     _I2C_slaveWriteData:	
  2318  007D                     	ds	1
  2319                           
  2320                           	psect	bssBANK0
  2321  0062                     __pbssBANK0:	
  2322  0062                     _i:	
  2323  0062                     	ds	1
  2324  0063                     _value:	
  2325  0063                     	ds	1
  2326  0064                     _eusartRxCount:	
  2327  0064                     	ds	1
  2328  0065                     _eusartRxTail:	
  2329  0065                     	ds	1
  2330  0066                     _eusartRxHead:	
  2331  0066                     	ds	1
  2332  0067                     _p_i2c2_current:	
  2333  0067                     	ds	1
  2334  0068                     _p_i2c2_trb_current:	
  2335  0068                     	ds	1
  2336  0069                     _i2c2_trb_count:	
  2337  0069                     	ds	1
  2338  006A                     _i2c2_state:	
  2339  006A                     	ds	1
  2340  006B                     I2C1_StatusCallback@ext_cnt:	
  2341  006B                     	ds	1
  2342  006C                     I2C1_StatusCallback@next:	
  2343  006C                     	ds	1
  2344  006D                     I2C2_ISR@i2c_address:	
  2345  006D                     	ds	2
  2346                           
  2347                           	psect	bssBANK1
  2348  00A0                     __pbssBANK1:	
  2349  00A0                     _eusartTxBuffer:	
  2350  00A0                     	ds	8
  2351  00A8                     _i2c2_object:	
  2352  00A8                     	ds	5
  2353  00AD                     _float100:	
  2354  00AD                     	ds	2
  2355  00AF                     _PROTOCOL_Inv_Handler:	
  2356  00AF                     	ds	2
  2357  00B1                     _PROTOCOL_Extension_Handler:	
  2358  00B1                     	ds	2
  2359  00B3                     _PROTOCOL_Loop_Func:	
  2360  00B3                     	ds	2
  2361  00B5                     _data:	
  2362  00B5                     	ds	1
  2363  00B6                     _j:	
  2364  00B6                     	ds	1
  2365  00B7                     _backplane_slave_enabled:	
  2366  00B7                     	ds	1
  2367  00B8                     _readbuf_status:	
  2368  00B8                     	ds	1
  2369  00B9                     _tmr_overflow:	
  2370  00B9                     	ds	1
  2371  00BA                     _tmr_cnt:	
  2372  00BA                     	ds	1
  2373  00BB                     _sec_cnt:	
  2374  00BB                     	ds	1
  2375  00BC                     _invoked:	
  2376  00BC                     	ds	1
  2377  00BD                     _running:	
  2378  00BD                     	ds	1
  2379  00BE                     _locked:	
  2380  00BE                     	ds	1
  2381  00BF                     _cnt:	
  2382  00BF                     	ds	1
  2383  00C0                     _slave_address:	
  2384  00C0                     	ds	1
  2385  00C1                     _timer0ReloadVal:	
  2386  00C1                     	ds	1
  2387  00C2                     I2C2_ISR@i2c_10bit_address_restart:	
  2388  00C2                     	ds	1
  2389  00C3                     I2C2_ISR@i2c_bytes_left:	
  2390  00C3                     	ds	1
  2391  00C4                     I2C2_ISR@pi2c_buf_ptr:	
  2392  00C4                     	ds	1
  2393  00C5                     I2C1_StatusCallback@ext_len:	
  2394  00C5                     	ds	1
  2395  00C6                     I2C1_StatusCallback@slaveWriteType:	
  2396  00C6                     	ds	1
  2397  00C7                     _readbuf:	
  2398  00C7                     	ds	6
  2399  00CD                     I2C2_MasterRead@trBlock:	
  2400  00CD                     	ds	4
  2401  00D1                     I2C2_MasterWrite@trBlock:	
  2402  00D1                     	ds	4
  2403  00D5                     PROTOCOL_Send_float@pbuf:	
  2404  00D5                     	ds	3
  2405  00D8                     _i2c2_tr_queue:	
  2406  00D8                     	ds	3
  2407  00DB                     PROTOCOL_Send_int16_t@pbuf:	
  2408  00DB                     	ds	2
  2409  00DD                     PROTOCOL_Send_uint16_t@pbuf:	
  2410  00DD                     	ds	2
  2411  00DF                     PROTOCOL_Send_int8_t@pbuf:	
  2412  00DF                     	ds	1
  2413  00E0                     PROTOCOL_Send_uint8_t@pbuf:	
  2414  00E0                     	ds	1
  2415                           
  2416                           	psect	dataBANK1
  2417  00E9                     __pdataBANK1:	
  2418  00E9                     _tmr_scaler:	
  2419  00E9                     	ds	1
  2420  00EA                     _BACKPLANE_SLAVE_ADDRESS:	
  2421  00EA                     	ds	1
  2422  00EB                     _type_no_data:	
  2423  00EB                     	ds	1
  2424                           
  2425                           	psect	bssBANK2
  2426  0120                     __pbssBANK2:	
  2427  0120                     _eusartRxBuffer:	
  2428  0120                     	ds	8
  2429  0128                     _buf:	
  2430  0128                     	ds	48
  2431  0158                     _sendbuf:	
  2432  0158                     	ds	16
  2433                           
  2434                           	psect	bssBANK3
  2435  01A0                     __pbssBANK3:	
  2436  01A0                     I2C1_StatusCallback@ext_buf:	
  2437  01A0                     	ds	48
  2438                           
  2439                           	psect	clrtext
  2440  0B01                     clear_ram0:	
  2441                           ;	Called with FSR0 containing the base address, and
  2442                           ;	WREG with the size to clear
  2443                           
  2444  0B01  0064               	clrwdt	;clear the watchdog before getting into this loop
  2445  0B02                     clrloop0:	
  2446  0B02  0180               	clrf	0	;clear RAM location pointed to by FSR
  2447  0B03  3101               	addfsr 0,1
  2448  0B04  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2449  0B05  2B02               	goto	clrloop0	;have we reached the end yet?
  2450  0B06  3400               	retlw	0	;all done for this memory range, return
  2451                           
  2452                           	psect	cstackBANK1
  2453  00EC                     __pcstackBANK1:	
  2454  00EC                     PROTOCOL_Loop@c:	
  2455                           
  2456                           ; 1 bytes @ 0x0
  2457  00EC                     	ds	1
  2458  00ED                     PROTOCOL_Loop@device_address:	
  2459                           
  2460                           ; 1 bytes @ 0x1
  2461  00ED                     	ds	1
  2462                           
  2463                           	psect	cstackCOMMON
  2464  0070                     __pcstackCOMMON:	
  2465  0070                     ?_isdigit:	
  2466  0070                     ?_PROTOCOL_Read_Device_Address:	
  2467                           ; 1 bit 
  2468                           
  2469  0070                     ?_I2C1_StatusCallback:	
  2470                           ; 1 bytes @ 0x0
  2471                           
  2472  0070                     ?_PROTOCOL_SET:	
  2473                           ; 1 bytes @ 0x0
  2474                           
  2475  0070                     ?_PROTOCOL_STA:	
  2476                           ; 1 bytes @ 0x0
  2477                           
  2478  0070                     ?_PROTOCOL_STP:	
  2479                           ; 1 bytes @ 0x0
  2480                           
  2481  0070                     ?_PROTOCOL_SAV:	
  2482                           ; 1 bytes @ 0x0
  2483                           
  2484  0070                     ?_PROTOCOL_INV:	
  2485                           ; 1 bytes @ 0x0
  2486                           
  2487  0070                     ??_PROTOCOL_INV:	
  2488                           ; 1 bytes @ 0x0
  2489                           
  2490  0070                     ?_PROTOCOL_RST:	
  2491                           ; 1 bytes @ 0x0
  2492                           
  2493  0070                     ??_PROTOCOL_RST:	
  2494                           ; 1 bytes @ 0x0
  2495                           
  2496  0070                     ?_PROTOCOL_Backplane_Slave_Enabled:	
  2497                           ; 1 bytes @ 0x0
  2498                           
  2499  0070                     ??_PROTOCOL_Backplane_Slave_Enabled:	
  2500                           ; 1 bytes @ 0x0
  2501                           
  2502  0070                     ?_PROTOCOL_Read_Lock:	
  2503                           ; 1 bytes @ 0x0
  2504                           
  2505  0070                     ??_PROTOCOL_Read_Lock:	
  2506                           ; 1 bytes @ 0x0
  2507                           
  2508  0070                     ?_PROTOCOL_EXT:	
  2509                           ; 1 bytes @ 0x0
  2510                           
  2511  0070                     ?_PROTOCOL_I2C_WHO:	
  2512                           ; 1 bytes @ 0x0
  2513                           
  2514  0070                     ??_PROTOCOL_I2C_WHO:	
  2515                           ; 1 bytes @ 0x0
  2516                           
  2517  0070                     ??_PROTOCOL_I2C_SEN:	
  2518                           ; 1 bytes @ 0x0
  2519                           
  2520  0070                     ?_PROTOCOL_I2C_GET:	
  2521                           ; 1 bytes @ 0x0
  2522                           
  2523  0070                     ??_PROTOCOL_I2C_GET:	
  2524                           ; 1 bytes @ 0x0
  2525                           
  2526  0070                     ?_I2C2_Stop:	
  2527                           ; 1 bytes @ 0x0
  2528                           
  2529  0070                     ??_I2C2_Stop:	
  2530                           ; 1 bytes @ 0x0
  2531                           
  2532  0070                     ?_I2C2_FunctionComplete:	
  2533                           ; 1 bytes @ 0x0
  2534                           
  2535  0070                     ??_I2C2_FunctionComplete:	
  2536                           ; 1 bytes @ 0x0
  2537                           
  2538  0070                     ?_PIN_MANAGER_Initialize:	
  2539                           ; 1 bytes @ 0x0
  2540                           
  2541  0070                     ?_OSCILLATOR_Initialize:	
  2542                           ; 1 bytes @ 0x0
  2543                           
  2544  0070                     ?_WDT_Initialize:	
  2545                           ; 1 bytes @ 0x0
  2546                           
  2547  0070                     ?_TMR0_Initialize:	
  2548                           ; 1 bytes @ 0x0
  2549                           
  2550  0070                     ?_EUSART_Initialize:	
  2551                           ; 1 bytes @ 0x0
  2552                           
  2553  0070                     ?_EUSART_Transmit_ISR:	
  2554                           ; 1 bytes @ 0x0
  2555                           
  2556  0070                     ??_EUSART_Transmit_ISR:	
  2557                           ; 1 bytes @ 0x0
  2558                           
  2559  0070                     ?_EUSART_Receive_ISR:	
  2560                           ; 1 bytes @ 0x0
  2561                           
  2562  0070                     ??_EUSART_Receive_ISR:	
  2563                           ; 1 bytes @ 0x0
  2564                           
  2565  0070                     ?_PROTOCOL_Loop:	
  2566                           ; 1 bytes @ 0x0
  2567                           
  2568  0070                     ?_I2C1_Initialize:	
  2569                           ; 1 bytes @ 0x0
  2570                           
  2571  0070                     ?_I2C1_ISR:	
  2572                           ; 1 bytes @ 0x0
  2573                           
  2574  0070                     ?_I2C2_Initialize:	
  2575                           ; 1 bytes @ 0x0
  2576                           
  2577  0070                     ?_I2C2_ISR:	
  2578                           ; 1 bytes @ 0x0
  2579                           
  2580  0070                     ?_I2C2_BusCollisionISR:	
  2581                           ; 1 bytes @ 0x0
  2582                           
  2583  0070                     ??_I2C2_BusCollisionISR:	
  2584                           ; 1 bytes @ 0x0
  2585                           
  2586  0070                     ?_INTERRUPT_InterruptManager:	
  2587                           ; 1 bytes @ 0x0
  2588                           
  2589  0070                     ?_EUSART_Read:	
  2590                           ; 1 bytes @ 0x0
  2591                           
  2592  0070                     ?_EUSART_Write:	
  2593                           ; 1 bytes @ 0x0
  2594                           
  2595  0070                     ?_putch:	
  2596                           ; 1 bytes @ 0x0
  2597                           
  2598  0070                     ?_DATAEE_ReadByte:	
  2599                           ; 1 bytes @ 0x0
  2600                           
  2601  0070                     ?_TMR0_HasOverflowOccured:	
  2602                           ; 1 bytes @ 0x0
  2603                           
  2604  0070                     ?_inv_handler:	
  2605                           ; 1 bytes @ 0x0
  2606                           
  2607  0070                     ?_main:	
  2608                           ; 1 bytes @ 0x0
  2609                           
  2610  0070                     ?_PROTOCOL_Write_Device_Address:	
  2611                           ; 1 bytes @ 0x0
  2612                           
  2613  0070                     ?i1_DATAEE_WriteByte:	
  2614                           ; 1 bytes @ 0x0
  2615                           
  2616  0070                     ?i1_PROTOCOL_STA:	
  2617                           ; 1 bytes @ 0x0
  2618                           
  2619  0070                     ??i1_PROTOCOL_STA:	
  2620                           ; 1 bytes @ 0x0
  2621                           
  2622  0070                     ?i1_PROTOCOL_STP:	
  2623                           ; 1 bytes @ 0x0
  2624                           
  2625  0070                     ??i1_PROTOCOL_STP:	
  2626                           ; 1 bytes @ 0x0
  2627                           
  2628  0070                     ?i1_PROTOCOL_SAV:	
  2629                           ; 1 bytes @ 0x0
  2630                           
  2631  0070                     ?i1_PROTOCOL_SET:	
  2632                           ; 1 bytes @ 0x0
  2633                           
  2634  0070                     ??i1_PROTOCOL_SET:	
  2635                           ; 1 bytes @ 0x0
  2636                           
  2637  0070                     ?i1_PROTOCOL_EXT:	
  2638                           ; 1 bytes @ 0x0
  2639                           
  2640  0070                     ??i1_PROTOCOL_EXT:	
  2641                           ; 1 bytes @ 0x0
  2642                           
  2643  0070                     ?_PROTOCOL_I2C_SEN:	
  2644                           ; 1 bytes @ 0x0
  2645                           
  2646  0070                     i1DATAEE_WriteByte@bData:	
  2647                           ; 2 bytes @ 0x0
  2648                           
  2649                           
  2650                           ; 1 bytes @ 0x0
  2651  0070                     	ds	1
  2652  0071                     ??i1_DATAEE_WriteByte:	
  2653  0071                     I2C2_Stop@completion_code:	
  2654                           ; 1 bytes @ 0x1
  2655                           
  2656  0071                     i1DATAEE_WriteByte@bAdd:	
  2657                           ; 1 bytes @ 0x1
  2658                           
  2659  0071                     i1PROTOCOL_SET@value_:	
  2660                           ; 1 bytes @ 0x1
  2661                           
  2662                           
  2663                           ; 1 bytes @ 0x1
  2664  0071                     	ds	1
  2665  0072                     ??_I2C2_ISR:	
  2666  0072                     i1DATAEE_WriteByte@GIEBitValue:	
  2667                           ; 1 bytes @ 0x2
  2668                           
  2669  0072                     PROTOCOL_I2C_SEN@pdata:	
  2670                           ; 1 bytes @ 0x2
  2671                           
  2672                           
  2673                           ; 2 bytes @ 0x2
  2674  0072                     	ds	1
  2675  0073                     ??i1_PROTOCOL_SAV:	
  2676                           
  2677                           ; 1 bytes @ 0x3
  2678  0073                     	ds	1
  2679  0074                     ??_I2C1_StatusCallback:	
  2680                           
  2681                           ; 1 bytes @ 0x4
  2682  0074                     	ds	1
  2683  0075                     I2C1_StatusCallback@pdata:	
  2684                           
  2685                           ; 2 bytes @ 0x5
  2686  0075                     	ds	2
  2687  0077                     I2C1_StatusCallback@i2c_bus_state:	
  2688                           
  2689                           ; 1 bytes @ 0x7
  2690  0077                     	ds	1
  2691  0078                     ??_I2C1_ISR:	
  2692                           
  2693                           ; 1 bytes @ 0x8
  2694  0078                     	ds	1
  2695  0079                     I2C1_ISR@i2c_data:	
  2696                           
  2697                           ; 1 bytes @ 0x9
  2698  0079                     	ds	1
  2699                           
  2700                           	psect	cstackBANK0
  2701  0020                     __pcstackBANK0:	
  2702  0020                     ??_INTERRUPT_InterruptManager:	
  2703                           
  2704                           ; 1 bytes @ 0x0
  2705  0020                     	ds	1
  2706  0021                     ??_PROTOCOL_Read_Device_Address:	
  2707  0021                     ??_PROTOCOL_SET:	
  2708                           ; 1 bytes @ 0x1
  2709                           
  2710  0021                     ??_PROTOCOL_STA:	
  2711                           ; 1 bytes @ 0x1
  2712                           
  2713  0021                     ??_PROTOCOL_STP:	
  2714                           ; 1 bytes @ 0x1
  2715                           
  2716  0021                     ??_PROTOCOL_EXT:	
  2717                           ; 1 bytes @ 0x1
  2718                           
  2719  0021                     ?_I2C2_MasterWriteTRBBuild:	
  2720                           ; 1 bytes @ 0x1
  2721                           
  2722  0021                     ?_I2C2_MasterTRBInsert:	
  2723                           ; 1 bytes @ 0x1
  2724                           
  2725  0021                     ?_I2C2_MasterReadTRBBuild:	
  2726                           ; 1 bytes @ 0x1
  2727                           
  2728  0021                     ??_PIN_MANAGER_Initialize:	
  2729                           ; 1 bytes @ 0x1
  2730                           
  2731  0021                     ??_OSCILLATOR_Initialize:	
  2732                           ; 1 bytes @ 0x1
  2733                           
  2734  0021                     ??_WDT_Initialize:	
  2735                           ; 1 bytes @ 0x1
  2736                           
  2737  0021                     ??_TMR0_Initialize:	
  2738                           ; 1 bytes @ 0x1
  2739                           
  2740  0021                     ??_EUSART_Initialize:	
  2741                           ; 1 bytes @ 0x1
  2742                           
  2743  0021                     ??_isdigit:	
  2744                           ; 1 bytes @ 0x1
  2745                           
  2746  0021                     ??_I2C1_Initialize:	
  2747                           ; 1 bytes @ 0x1
  2748                           
  2749  0021                     ??_I2C2_Initialize:	
  2750                           ; 1 bytes @ 0x1
  2751                           
  2752  0021                     ??_EUSART_Read:	
  2753                           ; 1 bytes @ 0x1
  2754                           
  2755  0021                     ??_EUSART_Write:	
  2756                           ; 1 bytes @ 0x1
  2757                           
  2758  0021                     ?_DATAEE_WriteByte:	
  2759                           ; 1 bytes @ 0x1
  2760                           
  2761  0021                     ??_DATAEE_ReadByte:	
  2762                           ; 1 bytes @ 0x1
  2763                           
  2764  0021                     ??_TMR0_HasOverflowOccured:	
  2765                           ; 1 bytes @ 0x1
  2766                           
  2767  0021                     ?_PROTOCOL_I2C_Set_TLV:	
  2768                           ; 1 bytes @ 0x1
  2769                           
  2770  0021                     ?_strncmp:	
  2771                           ; 1 bytes @ 0x1
  2772                           
  2773  0021                     ?___wmul:	
  2774                           ; 2 bytes @ 0x1
  2775                           
  2776  0021                     I2C2_MasterTRBInsert@ptrb_list:	
  2777                           ; 2 bytes @ 0x1
  2778                           
  2779  0021                     I2C2_MasterReadTRBBuild@pdata:	
  2780                           ; 1 bytes @ 0x1
  2781                           
  2782  0021                     I2C2_MasterWriteTRBBuild@pdata:	
  2783                           ; 1 bytes @ 0x1
  2784                           
  2785  0021                     DATAEE_WriteByte@bData:	
  2786                           ; 1 bytes @ 0x1
  2787                           
  2788  0021                     DATAEE_ReadByte@bAdd:	
  2789                           ; 1 bytes @ 0x1
  2790                           
  2791  0021                     PROTOCOL_EXT@char_buf:	
  2792                           ; 1 bytes @ 0x1
  2793                           
  2794  0021                     PROTOCOL_I2C_Set_TLV@length:	
  2795                           ; 1 bytes @ 0x1
  2796                           
  2797  0021                     _isdigit$1477:	
  2798                           ; 1 bytes @ 0x1
  2799                           
  2800  0021                     ___wmul@multiplier:	
  2801                           ; 1 bytes @ 0x1
  2802                           
  2803  0021                     strncmp@s1:	
  2804                           ; 2 bytes @ 0x1
  2805                           
  2806                           
  2807                           ; 2 bytes @ 0x1
  2808  0021                     	ds	1
  2809  0022                     ?_PROTOCOL_Initialize:	
  2810  0022                     ??_DATAEE_WriteByte:	
  2811                           ; 1 bytes @ 0x2
  2812                           
  2813  0022                     I2C2_MasterTRBInsert@pflag:	
  2814                           ; 1 bytes @ 0x2
  2815                           
  2816  0022                     I2C2_MasterReadTRBBuild@length:	
  2817                           ; 1 bytes @ 0x2
  2818                           
  2819  0022                     I2C2_MasterWriteTRBBuild@length:	
  2820                           ; 1 bytes @ 0x2
  2821                           
  2822  0022                     EUSART_Read@readValue:	
  2823                           ; 1 bytes @ 0x2
  2824                           
  2825  0022                     EUSART_Write@txData:	
  2826                           ; 1 bytes @ 0x2
  2827                           
  2828  0022                     DATAEE_WriteByte@bAdd:	
  2829                           ; 1 bytes @ 0x2
  2830                           
  2831  0022                     PROTOCOL_SET@value_:	
  2832                           ; 1 bytes @ 0x2
  2833                           
  2834  0022                     isdigit@c:	
  2835                           ; 1 bytes @ 0x2
  2836                           
  2837  0022                     PROTOCOL_Initialize@device_id:	
  2838                           ; 1 bytes @ 0x2
  2839                           
  2840  0022                     PROTOCOL_I2C_Set_TLV@pbuffer:	
  2841                           ; 2 bytes @ 0x2
  2842                           
  2843                           
  2844                           ; 2 bytes @ 0x2
  2845  0022                     	ds	1
  2846  0023                     ??_I2C2_MasterTRBInsert:	
  2847  0023                     ??_putch:	
  2848                           ; 1 bytes @ 0x3
  2849                           
  2850  0023                     putch@txData:	
  2851                           ; 1 bytes @ 0x3
  2852                           
  2853  0023                     DATAEE_WriteByte@GIEBitValue:	
  2854                           ; 1 bytes @ 0x3
  2855                           
  2856  0023                     strncmp@s2:	
  2857                           ; 1 bytes @ 0x3
  2858                           
  2859  0023                     I2C2_MasterReadTRBBuild@address:	
  2860                           ; 1 bytes @ 0x3
  2861                           
  2862  0023                     I2C2_MasterWriteTRBBuild@address:	
  2863                           ; 2 bytes @ 0x3
  2864                           
  2865  0023                     ___wmul@multiplicand:	
  2866                           ; 2 bytes @ 0x3
  2867                           
  2868                           
  2869                           ; 2 bytes @ 0x3
  2870  0023                     	ds	1
  2871  0024                     ??_PROTOCOL_SAV:	
  2872  0024                     ??_PROTOCOL_Write_Device_Address:	
  2873                           ; 1 bytes @ 0x4
  2874                           
  2875  0024                     ??_PROTOCOL_I2C_Set_TLV:	
  2876                           ; 1 bytes @ 0x4
  2877                           
  2878  0024                     I2C2_MasterTRBInsert@count:	
  2879                           ; 1 bytes @ 0x4
  2880                           
  2881  0024                     PROTOCOL_Initialize@start_handler:	
  2882                           ; 1 bytes @ 0x4
  2883                           
  2884  0024                     strncmp@len:	
  2885                           ; 1 bytes @ 0x4
  2886                           
  2887                           
  2888                           ; 2 bytes @ 0x4
  2889  0024                     	ds	1
  2890  0025                     ??_I2C2_MasterWriteTRBBuild:	
  2891  0025                     ??_I2C2_MasterReadTRBBuild:	
  2892                           ; 1 bytes @ 0x5
  2893                           
  2894  0025                     ??___wmul:	
  2895                           ; 1 bytes @ 0x5
  2896                           
  2897  0025                     PROTOCOL_Initialize@stop_handler:	
  2898                           ; 1 bytes @ 0x5
  2899                           
  2900  0025                     PROTOCOL_Write_Device_Address@device_id_i2c:	
  2901                           ; 1 bytes @ 0x5
  2902                           
  2903  0025                     PROTOCOL_I2C_Set_TLV@type:	
  2904                           ; 1 bytes @ 0x5
  2905                           
  2906  0025                     ___wmul@product:	
  2907                           ; 1 bytes @ 0x5
  2908                           
  2909                           
  2910                           ; 2 bytes @ 0x5
  2911  0025                     	ds	1
  2912  0026                     ??_strncmp:	
  2913  0026                     PROTOCOL_Initialize@set_handler:	
  2914                           ; 1 bytes @ 0x6
  2915                           
  2916  0026                     PROTOCOL_I2C_Set_TLV@status:	
  2917                           ; 1 bytes @ 0x6
  2918                           
  2919                           
  2920                           ; 1 bytes @ 0x6
  2921  0026                     	ds	1
  2922  0027                     ?_atoi:	
  2923  0027                     ?___lwdiv:	
  2924                           ; 2 bytes @ 0x7
  2925                           
  2926  0027                     I2C2_MasterReadTRBBuild@ptrb:	
  2927                           ; 2 bytes @ 0x7
  2928                           
  2929  0027                     I2C2_MasterWriteTRBBuild@ptrb:	
  2930                           ; 1 bytes @ 0x7
  2931                           
  2932  0027                     PROTOCOL_Initialize@inv_handler:	
  2933                           ; 1 bytes @ 0x7
  2934                           
  2935  0027                     ___lwdiv@divisor:	
  2936                           ; 2 bytes @ 0x7
  2937                           
  2938                           
  2939                           ; 2 bytes @ 0x7
  2940  0027                     	ds	1
  2941  0028                     ?_I2C2_MasterWrite:	
  2942  0028                     ?_I2C2_MasterRead:	
  2943                           ; 1 bytes @ 0x8
  2944                           
  2945  0028                     I2C2_MasterWrite@length:	
  2946                           ; 1 bytes @ 0x8
  2947                           
  2948  0028                     I2C2_MasterRead@length:	
  2949                           ; 1 bytes @ 0x8
  2950                           
  2951                           
  2952                           ; 1 bytes @ 0x8
  2953  0028                     	ds	1
  2954  0029                     ??_atoi:	
  2955  0029                     PROTOCOL_Initialize@scaler:	
  2956                           ; 1 bytes @ 0x9
  2957                           
  2958  0029                     I2C2_MasterWrite@address:	
  2959                           ; 1 bytes @ 0x9
  2960                           
  2961  0029                     I2C2_MasterRead@address:	
  2962                           ; 2 bytes @ 0x9
  2963                           
  2964  0029                     ___lwdiv@dividend:	
  2965                           ; 2 bytes @ 0x9
  2966                           
  2967                           
  2968                           ; 2 bytes @ 0x9
  2969  0029                     	ds	1
  2970  002A                     ??_PROTOCOL_Initialize:	
  2971                           
  2972                           ; 1 bytes @ 0xA
  2973  002A                     	ds	1
  2974  002B                     ??___lwdiv:	
  2975  002B                     I2C2_MasterWrite@pflag:	
  2976                           ; 1 bytes @ 0xB
  2977                           
  2978  002B                     I2C2_MasterRead@pflag:	
  2979                           ; 1 bytes @ 0xB
  2980                           
  2981  002B                     atoi@sign:	
  2982                           ; 1 bytes @ 0xB
  2983                           
  2984                           
  2985                           ; 1 bytes @ 0xB
  2986  002B                     	ds	1
  2987  002C                     ??_I2C2_MasterWrite:	
  2988  002C                     ??_I2C2_MasterRead:	
  2989                           ; 1 bytes @ 0xC
  2990                           
  2991  002C                     ___lwdiv@counter:	
  2992                           ; 1 bytes @ 0xC
  2993                           
  2994  002C                     atoi@a:	
  2995                           ; 1 bytes @ 0xC
  2996                           
  2997                           
  2998                           ; 2 bytes @ 0xC
  2999  002C                     	ds	1
  3000  002D                     ___lwdiv@quotient:	
  3001                           
  3002                           ; 2 bytes @ 0xD
  3003  002D                     	ds	1
  3004  002E                     I2C2_MasterWrite@pdata:	
  3005  002E                     I2C2_MasterRead@pdata:	
  3006                           ; 1 bytes @ 0xE
  3007                           
  3008  002E                     atoi@s:	
  3009                           ; 1 bytes @ 0xE
  3010                           
  3011                           
  3012                           ; 1 bytes @ 0xE
  3013  002E                     	ds	1
  3014  002F                     ?_i2c2_write:	
  3015  002F                     ?_i2c2_read_no_reg_addr:	
  3016                           ; 1 bytes @ 0xF
  3017                           
  3018  002F                     ?___lwmod:	
  3019                           ; 1 bytes @ 0xF
  3020                           
  3021  002F                     i2c2_write@dev_addr:	
  3022                           ; 2 bytes @ 0xF
  3023                           
  3024  002F                     i2c2_read_no_reg_addr@dev_addr:	
  3025                           ; 2 bytes @ 0xF
  3026                           
  3027  002F                     ___lwmod@divisor:	
  3028                           ; 2 bytes @ 0xF
  3029                           
  3030                           
  3031                           ; 2 bytes @ 0xF
  3032  002F                     	ds	2
  3033  0031                     i2c2_write@reg_addr:	
  3034  0031                     i2c2_read_no_reg_addr@pbuf:	
  3035                           ; 1 bytes @ 0x11
  3036                           
  3037  0031                     ___lwmod@dividend:	
  3038                           ; 1 bytes @ 0x11
  3039                           
  3040                           
  3041                           ; 2 bytes @ 0x11
  3042  0031                     	ds	1
  3043  0032                     i2c2_write@data:	
  3044  0032                     i2c2_read_no_reg_addr@len:	
  3045                           ; 1 bytes @ 0x12
  3046                           
  3047                           
  3048                           ; 1 bytes @ 0x12
  3049  0032                     	ds	1
  3050  0033                     ??_i2c2_write:	
  3051  0033                     ??_i2c2_read_no_reg_addr:	
  3052                           ; 1 bytes @ 0x13
  3053                           
  3054  0033                     ??___lwmod:	
  3055                           ; 1 bytes @ 0x13
  3056                           
  3057                           
  3058                           ; 1 bytes @ 0x13
  3059  0033                     	ds	1
  3060  0034                     ___lwmod@counter:	
  3061                           
  3062                           ; 1 bytes @ 0x14
  3063  0034                     	ds	1
  3064  0035                     ?_printf:	
  3065  0035                     i2c2_read_no_reg_addr@timeout:	
  3066                           ; 2 bytes @ 0x15
  3067                           
  3068  0035                     printf@f:	
  3069                           ; 1 bytes @ 0x15
  3070                           
  3071  0035                     i2c2_write@buf:	
  3072                           ; 2 bytes @ 0x15
  3073                           
  3074                           
  3075                           ; 2 bytes @ 0x15
  3076  0035                     	ds	1
  3077  0036                     i2c2_read_no_reg_addr@read_status:	
  3078                           
  3079                           ; 1 bytes @ 0x16
  3080  0036                     	ds	1
  3081  0037                     i2c2_write@write_status:	
  3082  0037                     i2c2_read_no_reg_addr@status:	
  3083                           ; 1 bytes @ 0x17
  3084                           
  3085                           
  3086                           ; 1 bytes @ 0x17
  3087  0037                     	ds	1
  3088  0038                     i2c2_write@status:	
  3089                           
  3090                           ; 1 bytes @ 0x18
  3091  0038                     	ds	1
  3092  0039                     ??_printf:	
  3093                           
  3094                           ; 1 bytes @ 0x19
  3095  0039                     	ds	4
  3096  003D                     printf@prec:	
  3097                           
  3098                           ; 1 bytes @ 0x1D
  3099  003D                     	ds	1
  3100  003E                     printf@cp:	
  3101                           
  3102                           ; 2 bytes @ 0x1E
  3103  003E                     	ds	2
  3104  0040                     printf@ap:	
  3105                           
  3106                           ; 1 bytes @ 0x20
  3107  0040                     	ds	1
  3108  0041                     printf@val:	
  3109                           
  3110                           ; 2 bytes @ 0x21
  3111  0041                     	ds	2
  3112  0043                     printf@len:	
  3113                           
  3114                           ; 2 bytes @ 0x23
  3115  0043                     	ds	2
  3116  0045                     printf@flag:	
  3117                           
  3118                           ; 1 bytes @ 0x25
  3119  0045                     	ds	1
  3120  0046                     printf@width:	
  3121                           
  3122                           ; 2 bytes @ 0x26
  3123  0046                     	ds	2
  3124  0048                     printf@c:	
  3125                           
  3126                           ; 1 bytes @ 0x28
  3127  0048                     	ds	1
  3128  0049                     ?_PROTOCOL_I2C_Send_int8_t:	
  3129  0049                     PROTOCOL_I2C_Send_int8_t@pbuffer:	
  3130                           ; 1 bytes @ 0x29
  3131                           
  3132                           
  3133                           ; 1 bytes @ 0x29
  3134  0049                     	ds	1
  3135  004A                     ??_PROTOCOL_I2C_Send_int8_t:	
  3136                           
  3137                           ; 1 bytes @ 0x2A
  3138  004A                     	ds	2
  3139  004C                     PROTOCOL_I2C_Send_int8_t@length:	
  3140                           
  3141                           ; 1 bytes @ 0x2C
  3142  004C                     	ds	1
  3143  004D                     ??_inv_handler:	
  3144                           
  3145                           ; 1 bytes @ 0x2D
  3146  004D                     	ds	5
  3147  0052                     inv_handler@status:	
  3148                           
  3149                           ; 1 bytes @ 0x32
  3150  0052                     	ds	1
  3151  0053                     inv_handler@measure:	
  3152                           
  3153                           ; 6 bytes @ 0x33
  3154  0053                     	ds	6
  3155  0059                     inv_handler@s_t:	
  3156                           
  3157                           ; 2 bytes @ 0x39
  3158  0059                     	ds	2
  3159  005B                     inv_handler@s_rh:	
  3160                           
  3161                           ; 2 bytes @ 0x3B
  3162  005B                     	ds	2
  3163  005D                     inv_handler@data:	
  3164                           
  3165                           ; 2 bytes @ 0x3D
  3166  005D                     	ds	2
  3167  005F                     ??_PROTOCOL_Loop:	
  3168                           
  3169                           ; 1 bytes @ 0x3F
  3170  005F                     	ds	2
  3171  0061                     ??_main:	
  3172                           
  3173                           ; 1 bytes @ 0x41
  3174  0061                     	ds	1
  3175                           
  3176                           	psect	maintext
  3177  07D2                     __pmaintext:	
  3178 ;;
  3179 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  3180 ;;
  3181 ;; *************** function _main *****************
  3182 ;; Defined at:
  3183 ;;		line 37 in file "main.c"
  3184 ;; Parameters:    Size  Location     Type
  3185 ;;		None
  3186 ;; Auto vars:     Size  Location     Type
  3187 ;;		None
  3188 ;; Return value:  Size  Location     Type
  3189 ;;                  1    wreg      void 
  3190 ;; Registers used:
  3191 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3192 ;; Tracked objects:
  3193 ;;		On entry : B1F/0
  3194 ;;		On exit  : 0/0
  3195 ;;		Unchanged: 0/0
  3196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3197 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3198 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3199 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3200 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3201 ;;Total ram usage:        1 bytes
  3202 ;; Hardware stack levels required when called:   11
  3203 ;; This function calls:
  3204 ;;		_EUSART_Initialize
  3205 ;;		_I2C1_Initialize
  3206 ;;		_I2C2_Initialize
  3207 ;;		_OSCILLATOR_Initialize
  3208 ;;		_PIN_MANAGER_Initialize
  3209 ;;		_PROTOCOL_Initialize
  3210 ;;		_PROTOCOL_Loop
  3211 ;;		_TMR0_Initialize
  3212 ;;		_WDT_Initialize
  3213 ;; This function is called by:
  3214 ;;		Startup code after reset
  3215 ;; This function uses a non-reentrant model
  3216 ;;
  3217                           
  3218                           
  3219                           ;psect for function _main
  3220  07D2                     _main:	
  3221                           
  3222                           ;main.c: 40: PROTOCOL_Initialize("SHT31-DIS", (0), (0), (0), inv_handler, 250);
  3223                           
  3224                           ;incstack = 0
  3225                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3226  07D2  305C               	movlw	low (STR_1| (0+32768))
  3227  07D3  0020               	movlb	0	; select bank0
  3228  07D4  00A2               	movwf	PROTOCOL_Initialize@device_id
  3229  07D5  3086               	movlw	high (STR_1| (0+32768))
  3230  07D6  00A3               	movwf	PROTOCOL_Initialize@device_id+1
  3231  07D7  01A4               	clrf	PROTOCOL_Initialize@start_handler
  3232  07D8  01A5               	clrf	PROTOCOL_Initialize@stop_handler
  3233  07D9  01A6               	clrf	PROTOCOL_Initialize@set_handler
  3234  07DA  30C1               	movlw	low _inv_handler
  3235  07DB  00A7               	movwf	PROTOCOL_Initialize@inv_handler
  3236  07DC  3006               	movlw	high _inv_handler
  3237  07DD  00A8               	movwf	PROTOCOL_Initialize@inv_handler+1
  3238  07DE  30FA               	movlw	250
  3239  07DF  00E1               	movwf	??_main
  3240  07E0  0861               	movf	??_main,w
  3241  07E1  00A9               	movwf	PROTOCOL_Initialize@scaler
  3242  07E2  318E  26FF  3187   	fcall	_PROTOCOL_Initialize
  3243                           
  3244                           ;main.c: 43: PIN_MANAGER_Initialize();
  3245  07E5  318C  243A  3187   	fcall	_PIN_MANAGER_Initialize
  3246                           
  3247                           ;main.c: 44: OSCILLATOR_Initialize();
  3248  07E8  318A  22F6  3187   	fcall	_OSCILLATOR_Initialize
  3249                           
  3250                           ;main.c: 45: WDT_Initialize();
  3251  07EB  318A  22F2  3187   	fcall	_WDT_Initialize
  3252                           
  3253                           ;main.c: 46: TMR0_Initialize();
  3254  07EE  318B  234D  3187   	fcall	_TMR0_Initialize
  3255                           
  3256                           ;main.c: 49: (INTCONbits.GIE = 1);
  3257  07F1  178B               	bsf	11,7	;volatile
  3258                           
  3259                           ;main.c: 50: (INTCONbits.PEIE = 1);
  3260  07F2  170B               	bsf	11,6	;volatile
  3261                           
  3262                           ;main.c: 53: EUSART_Initialize();
  3263  07F3  318B  2395  3187   	fcall	_EUSART_Initialize
  3264                           
  3265                           ;main.c: 56: I2C2_Initialize();
  3266  07F6  318B  23CA  3187   	fcall	_I2C2_Initialize
  3267                           
  3268                           ;main.c: 59: I2C1_Initialize();
  3269  07F9  318C  2498  3187   	fcall	_I2C1_Initialize
  3270                           
  3271                           ;main.c: 62: PROTOCOL_Loop();
  3272  07FC  3182  2256         	fcall	_PROTOCOL_Loop
  3273  07FE  3180  2848         	ljmp	start
  3274  0800                     __end_of_main:	
  3275                           
  3276                           	psect	text1
  3277  0AF2                     __ptext1:	
  3278 ;; *************** function _WDT_Initialize *****************
  3279 ;; Defined at:
  3280 ;;		line 89 in file "mcc_generated_files/mcc.c"
  3281 ;; Parameters:    Size  Location     Type
  3282 ;;		None
  3283 ;; Auto vars:     Size  Location     Type
  3284 ;;		None
  3285 ;; Return value:  Size  Location     Type
  3286 ;;                  1    wreg      void 
  3287 ;; Registers used:
  3288 ;;		wreg
  3289 ;; Tracked objects:
  3290 ;;		On entry : 0/0
  3291 ;;		On exit  : 0/0
  3292 ;;		Unchanged: 0/0
  3293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3295 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3296 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3297 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3298 ;;Total ram usage:        0 bytes
  3299 ;; Hardware stack levels used:    1
  3300 ;; Hardware stack levels required when called:    5
  3301 ;; This function calls:
  3302 ;;		Nothing
  3303 ;; This function is called by:
  3304 ;;		_main
  3305 ;;		_SYSTEM_Initialize
  3306 ;; This function uses a non-reentrant model
  3307 ;;
  3308                           
  3309                           
  3310                           ;psect for function _WDT_Initialize
  3311  0AF2                     _WDT_Initialize:	
  3312                           
  3313                           ;mcc.c: 92: WDTCON = 0x16;
  3314                           
  3315                           ;incstack = 0
  3316                           ; Regs used in _WDT_Initialize: [wreg]
  3317  0AF2  3016               	movlw	22
  3318  0AF3  0021               	movlb	1	; select bank1
  3319  0AF4  0097               	movwf	23	;volatile
  3320  0AF5  0008               	return
  3321  0AF6                     __end_of_WDT_Initialize:	
  3322                           
  3323                           	psect	text2
  3324  0B4D                     __ptext2:	
  3325 ;; *************** function _TMR0_Initialize *****************
  3326 ;; Defined at:
  3327 ;;		line 62 in file "mcc_generated_files/tmr0.c"
  3328 ;; Parameters:    Size  Location     Type
  3329 ;;		None
  3330 ;; Auto vars:     Size  Location     Type
  3331 ;;		None
  3332 ;; Return value:  Size  Location     Type
  3333 ;;                  1    wreg      void 
  3334 ;; Registers used:
  3335 ;;		wreg, status,2
  3336 ;; Tracked objects:
  3337 ;;		On entry : 0/0
  3338 ;;		On exit  : 0/0
  3339 ;;		Unchanged: 0/0
  3340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3342 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3343 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3344 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3345 ;;Total ram usage:        1 bytes
  3346 ;; Hardware stack levels used:    1
  3347 ;; Hardware stack levels required when called:    5
  3348 ;; This function calls:
  3349 ;;		Nothing
  3350 ;; This function is called by:
  3351 ;;		_main
  3352 ;;		_SYSTEM_Initialize
  3353 ;; This function uses a non-reentrant model
  3354 ;;
  3355                           
  3356                           
  3357                           ;psect for function _TMR0_Initialize
  3358  0B4D                     _TMR0_Initialize:	
  3359                           
  3360                           ;tmr0.c: 67: OPTION_REG = (OPTION_REG & 0xC0) | 0xD4 & 0x3F;
  3361                           
  3362                           ;incstack = 0
  3363                           ; Regs used in _TMR0_Initialize: [wreg+status,2]
  3364  0B4D  0021               	movlb	1	; select bank1
  3365  0B4E  0815               	movf	21,w	;volatile
  3366  0B4F  39C0               	andlw	192
  3367  0B50  3814               	iorlw	20
  3368  0B51  0095               	movwf	21	;volatile
  3369                           
  3370                           ;tmr0.c: 70: TMR0 = 0x06;
  3371  0B52  3006               	movlw	6
  3372  0B53  0020               	movlb	0	; select bank0
  3373  0B54  0095               	movwf	21	;volatile
  3374                           
  3375                           ;tmr0.c: 73: timer0ReloadVal= 6;
  3376  0B55  3006               	movlw	6
  3377  0B56  00A1               	movwf	??_TMR0_Initialize
  3378  0B57  0821               	movf	??_TMR0_Initialize,w
  3379  0B58  0021               	movlb	1	; select bank1
  3380  0B59  00C1               	movwf	_timer0ReloadVal^(0+128)	;volatile
  3381                           
  3382                           ;tmr0.c: 76: INTCONbits.TMR0IF = 0;
  3383  0B5A  110B               	bcf	11,2	;volatile
  3384  0B5B  0008               	return
  3385  0B5C                     __end_of_TMR0_Initialize:	
  3386                           
  3387                           	psect	text3
  3388  0256                     __ptext3:	
  3389 ;; *************** function _PROTOCOL_Loop *****************
  3390 ;; Defined at:
  3391 ;;		line 131 in file "protocol.c"
  3392 ;; Parameters:    Size  Location     Type
  3393 ;;		None
  3394 ;; Auto vars:     Size  Location     Type
  3395 ;;  device_addre    1    1[BANK1 ] unsigned char 
  3396 ;;  c               1    0[BANK1 ] unsigned char 
  3397 ;; Return value:  Size  Location     Type
  3398 ;;                  1    wreg      void 
  3399 ;; Registers used:
  3400 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3401 ;; Tracked objects:
  3402 ;;		On entry : 0/0
  3403 ;;		On exit  : 0/0
  3404 ;;		Unchanged: 0/0
  3405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3407 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  3408 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3409 ;;      Totals:         0       2       2       0       0       0       0       0       0       0       0       0       
      +0       0
  3410 ;;Total ram usage:        4 bytes
  3411 ;; Hardware stack levels used:    1
  3412 ;; Hardware stack levels required when called:   10
  3413 ;; This function calls:
  3414 ;;		Absolute function
  3415 ;;		_EUSART_Read
  3416 ;;		_PROTOCOL_EXT
  3417 ;;		_PROTOCOL_Read_Device_Address
  3418 ;;		_PROTOCOL_SAV
  3419 ;;		_PROTOCOL_SET
  3420 ;;		_PROTOCOL_STA
  3421 ;;		_PROTOCOL_STP
  3422 ;;		_PROTOCOL_Write_Device_Address
  3423 ;;		_TMR0_HasOverflowOccured
  3424 ;;		_atoi
  3425 ;;		_inv_handler
  3426 ;;		_printf
  3427 ;;		_strncmp
  3428 ;; This function is called by:
  3429 ;;		_main
  3430 ;; This function uses a non-reentrant model
  3431 ;;
  3432                           
  3433                           
  3434                           ;psect for function _PROTOCOL_Loop
  3435  0256                     _PROTOCOL_Loop:	
  3436  0256                     l741:	
  3437                           ;incstack = 0
  3438                           ; Regs used in _PROTOCOL_Loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3439                           ;protocol.c: 132: uint8_t device_address;
  3440                           ;protocol.c: 133: uint8_t c;
  3441                           ;protocol.c: 134: while (1) {
  3442                           
  3443                           
  3444                           ;protocol.c: 135: tmr_overflow = TMR0_HasOverflowOccured();
  3445  0256  318A  22EE  3182   	fcall	_TMR0_HasOverflowOccured
  3446  0259  0020               	movlb	0	; select bank0
  3447  025A  00DF               	movwf	??_PROTOCOL_Loop
  3448  025B  085F               	movf	??_PROTOCOL_Loop,w
  3449  025C  0021               	movlb	1	; select bank1
  3450  025D  00B9               	movwf	_tmr_overflow^(0+128)
  3451                           
  3452                           ;protocol.c: 136: if (tmr_overflow) {
  3453  025E  0839               	movf	_tmr_overflow^(0+128),w
  3454  025F  1903               	btfsc	3,2
  3455  0260  2A83               	goto	l4385
  3456                           
  3457                           ;protocol.c: 137: TMR0IF = 0;
  3458  0261  110B               	bcf	11,2	;volatile
  3459                           
  3460                           ;protocol.c: 138: if (PROTOCOL_Inv_Handler && (++tmr_cnt >= value)) {
  3461  0262  082F               	movf	_PROTOCOL_Inv_Handler^(0+128),w
  3462  0263  0430               	iorwf	(_PROTOCOL_Inv_Handler+1)^(0+128),w
  3463  0264  1903               	btfsc	3,2
  3464  0265  2A83               	goto	l4385
  3465  0266  3001               	movlw	1
  3466  0267  0020               	movlb	0	; select bank0
  3467  0268  00DF               	movwf	??_PROTOCOL_Loop
  3468  0269  085F               	movf	??_PROTOCOL_Loop,w
  3469  026A  0021               	movlb	1	; select bank1
  3470  026B  07BA               	addwf	_tmr_cnt^(0+128),f
  3471  026C  0020               	movlb	0	; select bank0
  3472  026D  0863               	movf	_value,w
  3473  026E  0021               	movlb	1	; select bank1
  3474  026F  023A               	subwf	_tmr_cnt^(0+128),w
  3475  0270  1C03               	skipc
  3476  0271  2A83               	goto	l4385
  3477                           
  3478                           ;protocol.c: 139: tmr_cnt = 0;
  3479  0272  01BA               	clrf	_tmr_cnt^(0+128)
  3480                           
  3481                           ;protocol.c: 140: if (++sec_cnt >= tmr_scaler) {
  3482  0273  3001               	movlw	1
  3483  0274  0020               	movlb	0	; select bank0
  3484  0275  00DF               	movwf	??_PROTOCOL_Loop
  3485  0276  085F               	movf	??_PROTOCOL_Loop,w
  3486  0277  0021               	movlb	1	; select bank1
  3487  0278  07BB               	addwf	_sec_cnt^(0+128),f
  3488  0279  0869               	movf	_tmr_scaler^(0+128),w
  3489  027A  023B               	subwf	_sec_cnt^(0+128),w
  3490  027B  1C03               	skipc
  3491  027C  2A83               	goto	l4385
  3492                           
  3493                           ;protocol.c: 141: if (running) invoked = 1;
  3494  027D  083D               	movf	_running^(0+128),w
  3495  027E  1903               	btfsc	3,2
  3496  027F  2A82               	goto	l4383
  3497  0280  01BC               	clrf	_invoked^(0+128)
  3498  0281  0ABC               	incf	_invoked^(0+128),f
  3499  0282                     l4383:	
  3500                           
  3501                           ;protocol.c: 142: sec_cnt = 0;
  3502  0282  01BB               	clrf	_sec_cnt^(0+128)
  3503  0283                     l4385:	
  3504                           
  3505                           ;protocol.c: 143: }
  3506                           ;protocol.c: 144: }
  3507                           ;protocol.c: 145: }
  3508                           ;protocol.c: 146: if (invoked && PROTOCOL_Inv_Handler) {
  3509  0283  083C               	movf	_invoked^(0+128),w
  3510  0284  1903               	btfsc	3,2
  3511  0285  2A91               	goto	l4395
  3512  0286  082F               	movf	_PROTOCOL_Inv_Handler^(0+128),w
  3513  0287  0430               	iorwf	(_PROTOCOL_Inv_Handler+1)^(0+128),w
  3514  0288  1903               	btfsc	3,2
  3515  0289  2A91               	goto	l4395
  3516                           
  3517                           ;protocol.c: 147: PROTOCOL_Inv_Handler();
  3518  028A  0830               	movf	(_PROTOCOL_Inv_Handler+1)^(0+128),w
  3519  028B  008A               	movwf	10
  3520  028C  082F               	movf	_PROTOCOL_Inv_Handler^(0+128),w
  3521  028D  000A               	callw
  3522  028E  3182               	pagesel	$
  3523                           
  3524                           ;protocol.c: 148: invoked = 0;
  3525  028F  0021               	movlb	1	; select bank1
  3526  0290  01BC               	clrf	_invoked^(0+128)
  3527  0291                     l4395:	
  3528                           
  3529                           ;protocol.c: 151: if ((eusartRxCount)) {
  3530  0291  0020               	movlb	0	; select bank0
  3531  0292  0864               	movf	_eusartRxCount,w	;volatile
  3532  0293  1903               	btfsc	3,2
  3533  0294  2A56               	goto	l741
  3534                           
  3535                           ;protocol.c: 152: c = EUSART_Read();
  3536  0295  318C  2458  3182   	fcall	_EUSART_Read
  3537  0298  0020               	movlb	0	; select bank0
  3538  0299  00DF               	movwf	??_PROTOCOL_Loop
  3539  029A  085F               	movf	??_PROTOCOL_Loop,w
  3540  029B  0021               	movlb	1	; select bank1
  3541  029C  00EC               	movwf	PROTOCOL_Loop@c^(0+128)
  3542                           
  3543                           ;protocol.c: 153: buf[cnt++] = c;
  3544  029D  086C               	movf	PROTOCOL_Loop@c^(0+128),w
  3545  029E  0020               	movlb	0	; select bank0
  3546  029F  00DF               	movwf	??_PROTOCOL_Loop
  3547  02A0  0021               	movlb	1	; select bank1
  3548  02A1  083F               	movf	_cnt^(0+128),w
  3549  02A2  3E28               	addlw	(low (_buf| (0+256)))& (0+255)
  3550  02A3  0086               	movwf	6
  3551  02A4  3001               	movlw	1	; select bank2/3
  3552  02A5  0087               	movwf	7
  3553  02A6  0020               	movlb	0	; select bank0
  3554  02A7  085F               	movf	??_PROTOCOL_Loop,w
  3555  02A8  0081               	movwf	1
  3556  02A9  3001               	movlw	1
  3557  02AA  00DF               	movwf	??_PROTOCOL_Loop
  3558  02AB  085F               	movf	??_PROTOCOL_Loop,w
  3559  02AC  0021               	movlb	1	; select bank1
  3560  02AD  07BF               	addwf	_cnt^(0+128),f
  3561                           
  3562                           ;protocol.c: 154: if (c == '\n') {
  3563  02AE  300A               	movlw	10
  3564  02AF  066C               	xorwf	PROTOCOL_Loop@c^(0+128),w
  3565  02B0  1D03               	btfss	3,2
  3566  02B1  2A56               	goto	l741
  3567                           
  3568                           ;protocol.c: 155: buf[--cnt] = '\0';
  3569  02B2  3001               	movlw	1
  3570  02B3  02BF               	subwf	_cnt^(0+128),f
  3571  02B4  083F               	movf	_cnt^(0+128),w
  3572  02B5  3E28               	addlw	(low (_buf| (0+256)))& (0+255)
  3573  02B6  0086               	movwf	6
  3574  02B7  3001               	movlw	1	; select bank2/3
  3575  02B8  0087               	movwf	7
  3576  02B9  0181               	clrf	1
  3577                           
  3578                           ;protocol.c: 156: cnt = 0;
  3579  02BA  01BF               	clrf	_cnt^(0+128)
  3580                           
  3581                           ;protocol.c: 157: printf("#%s\n", buf);
  3582  02BB  308C               	movlw	low (STR_3| (0+32768))
  3583  02BC  0020               	movlb	0	; select bank0
  3584  02BD  00B5               	movwf	printf@f
  3585  02BE  3086               	movlw	high (STR_3| (0+32768))
  3586  02BF  00B6               	movwf	printf@f+1
  3587  02C0  3028               	movlw	low _buf
  3588  02C1  00B7               	movwf	low ((?_printf| 0+2))
  3589  02C2  3001               	movlw	high _buf
  3590  02C3  00B8               	movwf	(low ((?_printf| 0+2))+1)
  3591  02C4  3180  2081  3182   	fcall	_printf
  3592                           
  3593                           ;protocol.c: 159: PROTOCOL_Extension_Handler(buf);
  3594  02C7  0021               	movlb	1	; select bank1
  3595  02C8  036A               	decf	_BACKPLANE_SLAVE_ADDRESS^(0+128),w
  3596  02C9  1D03               	btfss	3,2
  3597  02CA  2A56               	goto	l741
  3598                           
  3599                           ;protocol.c: 160: } else if (!strncmp(("WHO"), (buf), 3)) {
  3600  02CB  30AD               	movlw	low (STR_4| (0+32768))
  3601  02CC  0020               	movlb	0	; select bank0
  3602  02CD  00A1               	movwf	strncmp@s1
  3603  02CE  3086               	movlw	high (STR_4| (0+32768))
  3604  02CF  00A2               	movwf	strncmp@s1+1
  3605  02D0  3028               	movlw	(low (_buf| (0+256)))& (0+255)
  3606  02D1  00DF               	movwf	??_PROTOCOL_Loop
  3607  02D2  085F               	movf	??_PROTOCOL_Loop,w
  3608  02D3  00A3               	movwf	strncmp@s2
  3609  02D4  3003               	movlw	3
  3610  02D5  00A4               	movwf	strncmp@len
  3611  02D6  3000               	movlw	0
  3612  02D7  00A5               	movwf	strncmp@len+1
  3613  02D8  318E  267A  3182   	fcall	_strncmp
  3614  02DB  0020               	movlb	0	; select bank0
  3615  02DC  0821               	movf	?_strncmp,w
  3616  02DD  0422               	iorwf	?_strncmp+1,w
  3617  02DE  1D03               	btfss	3,2
  3618  02DF  2AF0               	goto	l4419
  3619                           
  3620                           ;protocol.c: 161: printf("$:WHO:%s\n", device_id_);
  3621  02E0  3034               	movlw	low (STR_5| (0+32768))
  3622  02E1  00B5               	movwf	printf@f
  3623  02E2  3086               	movlw	high (STR_5| (0+32768))
  3624  02E3  00B6               	movwf	printf@f+1
  3625  02E4  0021               	movlb	1	; select bank1
  3626  02E5  0862               	movf	(_device_id_+1)^(0+128),w
  3627  02E6  0020               	movlb	0	; select bank0
  3628  02E7  00B8               	movwf	(low ((?_printf| 0+2))+1)
  3629  02E8  0021               	movlb	1	; select bank1
  3630  02E9  0861               	movf	_device_id_^(0+128),w
  3631  02EA  0020               	movlb	0	; select bank0
  3632  02EB  00B7               	movwf	low ((?_printf| 0+2))
  3633  02EC  3180  2081  3182   	fcall	_printf
  3634                           
  3635                           ;protocol.c: 162: } else if (!strncmp(("SAV"), (buf), 3)) {
  3636  02EF  2A56               	goto	l741
  3637  02F0                     l4419:	
  3638  02F0  30BD               	movlw	low (STR_6| (0+32768))
  3639  02F1  0020               	movlb	0	; select bank0
  3640  02F2  00A1               	movwf	strncmp@s1
  3641  02F3  3086               	movlw	high (STR_6| (0+32768))
  3642  02F4  00A2               	movwf	strncmp@s1+1
  3643  02F5  3028               	movlw	(low (_buf| (0+256)))& (0+255)
  3644  02F6  00DF               	movwf	??_PROTOCOL_Loop
  3645  02F7  085F               	movf	??_PROTOCOL_Loop,w
  3646  02F8  00A3               	movwf	strncmp@s2
  3647  02F9  3003               	movlw	3
  3648  02FA  00A4               	movwf	strncmp@len
  3649  02FB  3000               	movlw	0
  3650  02FC  00A5               	movwf	strncmp@len+1
  3651  02FD  318E  267A  3182   	fcall	_strncmp
  3652  0300  0020               	movlb	0	; select bank0
  3653  0301  0821               	movf	?_strncmp,w
  3654  0302  0422               	iorwf	?_strncmp+1,w
  3655  0303  1D03               	btfss	3,2
  3656  0304  2B09               	goto	l4423
  3657                           
  3658                           ;protocol.c: 163: PROTOCOL_SAV();
  3659  0305  318B  231E  3182   	fcall	_PROTOCOL_SAV
  3660                           
  3661                           ;protocol.c: 164: } else if (!strncmp(("STA"), (buf), 3)) {
  3662  0308  2A56               	goto	l741
  3663  0309                     l4423:	
  3664  0309  30A5               	movlw	low (STR_7| (0+32768))
  3665  030A  0020               	movlb	0	; select bank0
  3666  030B  00A1               	movwf	strncmp@s1
  3667  030C  3086               	movlw	high (STR_7| (0+32768))
  3668  030D  00A2               	movwf	strncmp@s1+1
  3669  030E  3028               	movlw	(low (_buf| (0+256)))& (0+255)
  3670  030F  00DF               	movwf	??_PROTOCOL_Loop
  3671  0310  085F               	movf	??_PROTOCOL_Loop,w
  3672  0311  00A3               	movwf	strncmp@s2
  3673  0312  3003               	movlw	3
  3674  0313  00A4               	movwf	strncmp@len
  3675  0314  3000               	movlw	0
  3676  0315  00A5               	movwf	strncmp@len+1
  3677  0316  318E  267A  3182   	fcall	_strncmp
  3678  0319  0020               	movlb	0	; select bank0
  3679  031A  0821               	movf	?_strncmp,w
  3680  031B  0422               	iorwf	?_strncmp+1,w
  3681  031C  1D03               	btfss	3,2
  3682  031D  2B22               	goto	l4427
  3683                           
  3684                           ;protocol.c: 165: PROTOCOL_STA();
  3685  031E  318A  22EA  3182   	fcall	_PROTOCOL_STA
  3686                           
  3687                           ;protocol.c: 166: } else if (!strncmp(("STP"), (buf), 3)) {
  3688  0321  2A56               	goto	l741
  3689  0322                     l4427:	
  3690  0322  30B1               	movlw	low (STR_8| (0+32768))
  3691  0323  0020               	movlb	0	; select bank0
  3692  0324  00A1               	movwf	strncmp@s1
  3693  0325  3086               	movlw	high (STR_8| (0+32768))
  3694  0326  00A2               	movwf	strncmp@s1+1
  3695  0327  3028               	movlw	(low (_buf| (0+256)))& (0+255)
  3696  0328  00DF               	movwf	??_PROTOCOL_Loop
  3697  0329  085F               	movf	??_PROTOCOL_Loop,w
  3698  032A  00A3               	movwf	strncmp@s2
  3699  032B  3003               	movlw	3
  3700  032C  00A4               	movwf	strncmp@len
  3701  032D  3000               	movlw	0
  3702  032E  00A5               	movwf	strncmp@len+1
  3703  032F  318E  267A  3182   	fcall	_strncmp
  3704  0332  0020               	movlb	0	; select bank0
  3705  0333  0821               	movf	?_strncmp,w
  3706  0334  0422               	iorwf	?_strncmp+1,w
  3707  0335  1D03               	btfss	3,2
  3708  0336  2B47               	goto	l4433
  3709                           
  3710                           ;protocol.c: 167: PROTOCOL_STP();
  3711  0337  318A  22D8  3182   	fcall	_PROTOCOL_STP
  3712                           
  3713                           ;protocol.c: 168: printf("*:STP:%s\n", "ACK");
  3714  033A  303E               	movlw	low (STR_9| (0+32768))
  3715  033B  0020               	movlb	0	; select bank0
  3716  033C  00B5               	movwf	printf@f
  3717  033D  3086               	movlw	high (STR_9| (0+32768))
  3718  033E  00B6               	movwf	printf@f+1
  3719  033F  30A9               	movlw	low (STR_10| (0+32768))
  3720  0340  00B7               	movwf	low ((?_printf| 0+2))
  3721  0341  3086               	movlw	high (STR_10| (0+32768))
  3722  0342  00B8               	movwf	(low ((?_printf| 0+2))+1)
  3723  0343  3180  2081  3182   	fcall	_printf
  3724                           
  3725                           ;protocol.c: 169: } else if (!strncmp(("SET"), (buf), 3)) {
  3726  0346  2A56               	goto	l741
  3727  0347                     l4433:	
  3728  0347  30B9               	movlw	low (STR_11| (0+32768))
  3729  0348  0020               	movlb	0	; select bank0
  3730  0349  00A1               	movwf	strncmp@s1
  3731  034A  3086               	movlw	high (STR_11| (0+32768))
  3732  034B  00A2               	movwf	strncmp@s1+1
  3733  034C  3028               	movlw	(low (_buf| (0+256)))& (0+255)
  3734  034D  00DF               	movwf	??_PROTOCOL_Loop
  3735  034E  085F               	movf	??_PROTOCOL_Loop,w
  3736  034F  00A3               	movwf	strncmp@s2
  3737  0350  3003               	movlw	3
  3738  0351  00A4               	movwf	strncmp@len
  3739  0352  3000               	movlw	0
  3740  0353  00A5               	movwf	strncmp@len+1
  3741  0354  318E  267A  3182   	fcall	_strncmp
  3742  0357  0020               	movlb	0	; select bank0
  3743  0358  0821               	movf	?_strncmp,w
  3744  0359  0422               	iorwf	?_strncmp+1,w
  3745  035A  1D03               	btfss	3,2
  3746  035B  2B66               	goto	l4437
  3747                           
  3748                           ;protocol.c: 170: PROTOCOL_SET(atoi(&buf[4]));
  3749  035C  302C               	movlw	(low ((_buf| (0+256)+4)))& (0+255)
  3750  035D  3187  2761  3182   	fcall	_atoi
  3751  0360  0020               	movlb	0	; select bank0
  3752  0361  0827               	movf	?_atoi,w
  3753  0362  318B  230E  3182   	fcall	_PROTOCOL_SET
  3754                           
  3755                           ;protocol.c: 171: } else if (!strncmp(("GET"), (buf), 3)) {
  3756  0365  2A56               	goto	l741
  3757  0366                     l4437:	
  3758  0366  30B5               	movlw	low (STR_12| (0+32768))
  3759  0367  0020               	movlb	0	; select bank0
  3760  0368  00A1               	movwf	strncmp@s1
  3761  0369  3086               	movlw	high (STR_12| (0+32768))
  3762  036A  00A2               	movwf	strncmp@s1+1
  3763  036B  3028               	movlw	(low (_buf| (0+256)))& (0+255)
  3764  036C  00DF               	movwf	??_PROTOCOL_Loop
  3765  036D  085F               	movf	??_PROTOCOL_Loop,w
  3766  036E  00A3               	movwf	strncmp@s2
  3767  036F  3003               	movlw	3
  3768  0370  00A4               	movwf	strncmp@len
  3769  0371  3000               	movlw	0
  3770  0372  00A5               	movwf	strncmp@len+1
  3771  0373  318E  267A  3182   	fcall	_strncmp
  3772  0376  0020               	movlb	0	; select bank0
  3773  0377  0821               	movf	?_strncmp,w
  3774  0378  0422               	iorwf	?_strncmp+1,w
  3775  0379  1D03               	btfss	3,2
  3776  037A  2B8A               	goto	l4441
  3777                           
  3778                           ;protocol.c: 172: printf("$:GET:%d\n", value);
  3779  037B  3020               	movlw	low (STR_13| (0+32768))
  3780  037C  00B5               	movwf	printf@f
  3781  037D  3086               	movlw	high (STR_13| (0+32768))
  3782  037E  00B6               	movwf	printf@f+1
  3783  037F  0863               	movf	_value,w
  3784  0380  00DF               	movwf	??_PROTOCOL_Loop
  3785  0381  01E0               	clrf	??_PROTOCOL_Loop+1
  3786  0382  085F               	movf	??_PROTOCOL_Loop,w
  3787  0383  00B7               	movwf	?_printf+2
  3788  0384  0860               	movf	??_PROTOCOL_Loop+1,w
  3789  0385  00B8               	movwf	?_printf+3
  3790  0386  3180  2081  3182   	fcall	_printf
  3791                           
  3792                           ;protocol.c: 173: } else if (!strncmp(("WDA"), (buf), 3)) {
  3793  0389  2A56               	goto	l741
  3794  038A                     l4441:	
  3795  038A  30A1               	movlw	low (STR_14| (0+32768))
  3796  038B  0020               	movlb	0	; select bank0
  3797  038C  00A1               	movwf	strncmp@s1
  3798  038D  3086               	movlw	high (STR_14| (0+32768))
  3799  038E  00A2               	movwf	strncmp@s1+1
  3800  038F  3028               	movlw	(low (_buf| (0+256)))& (0+255)
  3801  0390  00DF               	movwf	??_PROTOCOL_Loop
  3802  0391  085F               	movf	??_PROTOCOL_Loop,w
  3803  0392  00A3               	movwf	strncmp@s2
  3804  0393  3003               	movlw	3
  3805  0394  00A4               	movwf	strncmp@len
  3806  0395  3000               	movlw	0
  3807  0396  00A5               	movwf	strncmp@len+1
  3808  0397  318E  267A  3182   	fcall	_strncmp
  3809  039A  0020               	movlb	0	; select bank0
  3810  039B  0821               	movf	?_strncmp,w
  3811  039C  0422               	iorwf	?_strncmp+1,w
  3812  039D  1D03               	btfss	3,2
  3813  039E  2BAE               	goto	l4447
  3814                           
  3815                           ;protocol.c: 174: device_address = atoi(&buf[4]);
  3816  039F  302C               	movlw	(low ((_buf| (0+256)+4)))& (0+255)
  3817  03A0  3187  2761  3182   	fcall	_atoi
  3818  03A3  0020               	movlb	0	; select bank0
  3819  03A4  0827               	movf	?_atoi,w
  3820  03A5  00DF               	movwf	??_PROTOCOL_Loop
  3821  03A6  085F               	movf	??_PROTOCOL_Loop,w
  3822  03A7  0021               	movlb	1	; select bank1
  3823  03A8  00ED               	movwf	PROTOCOL_Loop@device_address^(0+128)
  3824                           
  3825                           ;protocol.c: 175: PROTOCOL_Write_Device_Address(device_address);
  3826  03A9  086D               	movf	PROTOCOL_Loop@device_address^(0+128),w
  3827  03AA  318B  235C  3182   	fcall	_PROTOCOL_Write_Device_Address
  3828                           
  3829                           ;protocol.c: 176: } else if (!strncmp(("RDA"), (buf), 3)) {
  3830  03AD  2A56               	goto	l741
  3831  03AE                     l4447:	
  3832  03AE  309D               	movlw	low (STR_15| (0+32768))
  3833  03AF  0020               	movlb	0	; select bank0
  3834  03B0  00A1               	movwf	strncmp@s1
  3835  03B1  3086               	movlw	high (STR_15| (0+32768))
  3836  03B2  00A2               	movwf	strncmp@s1+1
  3837  03B3  3028               	movlw	(low (_buf| (0+256)))& (0+255)
  3838  03B4  00DF               	movwf	??_PROTOCOL_Loop
  3839  03B5  085F               	movf	??_PROTOCOL_Loop,w
  3840  03B6  00A3               	movwf	strncmp@s2
  3841  03B7  3003               	movlw	3
  3842  03B8  00A4               	movwf	strncmp@len
  3843  03B9  3000               	movlw	0
  3844  03BA  00A5               	movwf	strncmp@len+1
  3845  03BB  318E  267A  3182   	fcall	_strncmp
  3846  03BE  0020               	movlb	0	; select bank0
  3847  03BF  0821               	movf	?_strncmp,w
  3848  03C0  0422               	iorwf	?_strncmp+1,w
  3849  03C1  1D03               	btfss	3,2
  3850  03C2  2BDD               	goto	l4453
  3851                           
  3852                           ;protocol.c: 177: device_address = PROTOCOL_Read_Device_Address();
  3853  03C3  318A  22D5  3182   	fcall	_PROTOCOL_Read_Device_Address
  3854  03C6  0020               	movlb	0	; select bank0
  3855  03C7  00DF               	movwf	??_PROTOCOL_Loop
  3856  03C8  085F               	movf	??_PROTOCOL_Loop,w
  3857  03C9  0021               	movlb	1	; select bank1
  3858  03CA  00ED               	movwf	PROTOCOL_Loop@device_address^(0+128)
  3859                           
  3860                           ;protocol.c: 178: printf("$:RDA:%d\n", device_address);
  3861  03CB  3016               	movlw	low (STR_16| (0+32768))
  3862  03CC  0020               	movlb	0	; select bank0
  3863  03CD  00B5               	movwf	printf@f
  3864  03CE  3086               	movlw	high (STR_16| (0+32768))
  3865  03CF  00B6               	movwf	printf@f+1
  3866  03D0  0021               	movlb	1	; select bank1
  3867  03D1  086D               	movf	PROTOCOL_Loop@device_address^(0+128),w
  3868  03D2  0020               	movlb	0	; select bank0
  3869  03D3  00DF               	movwf	??_PROTOCOL_Loop
  3870  03D4  01E0               	clrf	??_PROTOCOL_Loop+1
  3871  03D5  085F               	movf	??_PROTOCOL_Loop,w
  3872  03D6  00B7               	movwf	?_printf+2
  3873  03D7  0860               	movf	??_PROTOCOL_Loop+1,w
  3874  03D8  00B8               	movwf	?_printf+3
  3875  03D9  3180  2081  3182   	fcall	_printf
  3876                           
  3877                           ;protocol.c: 179: }
  3878  03DC  2A56               	goto	l741
  3879  03DD                     l4453:	
  3880                           
  3881                           ;protocol.c: 180: else {
  3882                           ;protocol.c: 181: PROTOCOL_EXT(buf);
  3883  03DD  3028               	movlw	(low (_buf| (0+256)))& (0+255)
  3884  03DE  3180  2002  3182   	fcall	_PROTOCOL_EXT
  3885  03E1  2A56               	goto	l741
  3886  03E2                     __end_of_PROTOCOL_Loop:	
  3887                           
  3888                           	psect	text4
  3889  0E7A                     __ptext4:	
  3890 ;; *************** function _strncmp *****************
  3891 ;; Defined at:
  3892 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strncmp.c"
  3893 ;; Parameters:    Size  Location     Type
  3894 ;;  s1              2    1[BANK0 ] PTR const unsigned char 
  3895 ;;		 -> STR_15(4), STR_14(4), STR_12(4), STR_11(4), 
  3896 ;;		 -> STR_8(4), STR_7(4), STR_6(4), STR_4(4), 
  3897 ;;  s2              1    3[BANK0 ] PTR const unsigned char 
  3898 ;;		 -> buf(48), 
  3899 ;;  len             2    4[BANK0 ] unsigned int 
  3900 ;; Auto vars:     Size  Location     Type
  3901 ;;		None
  3902 ;; Return value:  Size  Location     Type
  3903 ;;                  2    1[BANK0 ] int 
  3904 ;; Registers used:
  3905 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  3906 ;; Tracked objects:
  3907 ;;		On entry : 0/0
  3908 ;;		On exit  : 0/0
  3909 ;;		Unchanged: 0/0
  3910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3911 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3912 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3913 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3914 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3915 ;;Total ram usage:        7 bytes
  3916 ;; Hardware stack levels used:    1
  3917 ;; Hardware stack levels required when called:    5
  3918 ;; This function calls:
  3919 ;;		Nothing
  3920 ;; This function is called by:
  3921 ;;		_PROTOCOL_Loop
  3922 ;; This function uses a non-reentrant model
  3923 ;;
  3924                           
  3925                           
  3926                           ;psect for function _strncmp
  3927  0E7A                     _strncmp:	
  3928  0E7A                     l4313:	
  3929                           ;incstack = 0
  3930                           ; Regs used in _strncmp: [wreg-fsr1h+status,2+status,0+pclath]
  3931                           
  3932  0E7A  3001               	movlw	1
  3933  0E7B  0020               	movlb	0	; select bank0
  3934  0E7C  02A4               	subwf	strncmp@len,f
  3935  0E7D  3000               	movlw	0
  3936  0E7E  3BA5               	subwfb	strncmp@len+1,f
  3937  0E7F  0A24               	incf	strncmp@len,w
  3938  0E80  1903               	btfsc	3,2
  3939  0E81  0A25               	incf	strncmp@len+1,w
  3940  0E82  1903               	btfsc	3,2
  3941  0E83  2EB9               	goto	l4315
  3942  0E84  0020               	movlb	0	; select bank0
  3943  0E85  0821               	movf	strncmp@s1,w
  3944  0E86  0084               	movwf	4
  3945  0E87  0822               	movf	strncmp@s1+1,w
  3946  0E88  0085               	movwf	5
  3947  0E89  0012               	moviw fsr0++
  3948  0E8A  1903               	btfsc	3,2
  3949  0E8B  2E98               	goto	l4305
  3950  0E8C  0823               	movf	strncmp@s2,w
  3951  0E8D  0086               	movwf	6
  3952  0E8E  3001               	movlw	1	; select bank2/3
  3953  0E8F  0087               	movwf	7
  3954  0E90  0821               	movf	strncmp@s1,w
  3955  0E91  0084               	movwf	4
  3956  0E92  0822               	movf	strncmp@s1+1,w
  3957  0E93  0085               	movwf	5
  3958  0E94  0800               	movf	0,w	;code access
  3959  0E95  0601               	xorwf	1,w
  3960  0E96  1903               	skipnz
  3961  0E97  2EB0               	goto	l4309
  3962  0E98                     l4305:	
  3963  0E98  0823               	movf	strncmp@s2,w
  3964  0E99  0086               	movwf	6
  3965  0E9A  3001               	movlw	1	; select bank2/3
  3966  0E9B  0087               	movwf	7
  3967  0E9C  0801               	movf	1,w
  3968  0E9D  00A6               	movwf	??_strncmp
  3969  0E9E  01A7               	clrf	??_strncmp+1
  3970  0E9F  09A6               	comf	??_strncmp,f
  3971  0EA0  09A7               	comf	??_strncmp+1,f
  3972  0EA1  0AA6               	incf	??_strncmp,f
  3973  0EA2  1903               	skipnz
  3974  0EA3  0AA7               	incf	??_strncmp+1,f
  3975  0EA4  0821               	movf	strncmp@s1,w
  3976  0EA5  0084               	movwf	4
  3977  0EA6  0822               	movf	strncmp@s1+1,w
  3978  0EA7  0085               	movwf	5
  3979  0EA8  0800               	movf	0,w	;code access
  3980  0EA9  0726               	addwf	??_strncmp,w
  3981  0EAA  00A1               	movwf	?_strncmp
  3982  0EAB  0827               	movf	??_strncmp+1,w
  3983  0EAC  1803               	skipnc
  3984  0EAD  0A27               	incf	??_strncmp+1,w
  3985  0EAE  00A2               	movwf	?_strncmp+1
  3986  0EAF  0008               	return
  3987  0EB0                     l4309:	
  3988  0EB0  3001               	movlw	1
  3989  0EB1  07A1               	addwf	strncmp@s1,f
  3990  0EB2  3000               	movlw	0
  3991  0EB3  3DA2               	addwfc	strncmp@s1+1,f
  3992  0EB4  3001               	movlw	1
  3993  0EB5  00A6               	movwf	??_strncmp
  3994  0EB6  0826               	movf	??_strncmp,w
  3995  0EB7  07A3               	addwf	strncmp@s2,f
  3996  0EB8  2E7A               	goto	l4313
  3997  0EB9                     l4315:	
  3998  0EB9  01A1               	clrf	?_strncmp
  3999  0EBA  01A2               	clrf	?_strncmp+1
  4000  0EBB  0008               	return
  4001  0EBC                     __end_of_strncmp:	
  4002                           
  4003                           	psect	text5
  4004  06C1                     __ptext5:	
  4005 ;; *************** function _inv_handler *****************
  4006 ;; Defined at:
  4007 ;;		line 15 in file "main.c"
  4008 ;; Parameters:    Size  Location     Type
  4009 ;;		None
  4010 ;; Auto vars:     Size  Location     Type
  4011 ;;  measure         6   51[BANK0 ] unsigned char [6]
  4012 ;;  data            2   61[BANK0 ] char [2]
  4013 ;;  s_rh            2   59[BANK0 ] unsigned int 
  4014 ;;  s_t             2   57[BANK0 ] unsigned int 
  4015 ;;  status          1   50[BANK0 ] unsigned char 
  4016 ;; Return value:  Size  Location     Type
  4017 ;;                  1    wreg      void 
  4018 ;; Registers used:
  4019 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4020 ;; Tracked objects:
  4021 ;;		On entry : 0/0
  4022 ;;		On exit  : 0/0
  4023 ;;		Unchanged: 0/0
  4024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4025 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4026 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4027 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4028 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4029 ;;Total ram usage:       18 bytes
  4030 ;; Hardware stack levels used:    1
  4031 ;; Hardware stack levels required when called:    9
  4032 ;; This function calls:
  4033 ;;		_PROTOCOL_I2C_Send_int8_t
  4034 ;;		___lwdiv
  4035 ;;		___wmul
  4036 ;;		_i2c2_read_no_reg_addr
  4037 ;;		_i2c2_write
  4038 ;; This function is called by:
  4039 ;;		_main
  4040 ;;		_PROTOCOL_Loop
  4041 ;; This function uses a non-reentrant model
  4042 ;;
  4043                           
  4044                           
  4045                           ;psect for function _inv_handler
  4046  06C1                     _inv_handler:	
  4047                           
  4048                           ;main.c: 16: uint8_t measure[6];
  4049                           ;main.c: 17: int8_t data[2];
  4050                           ;main.c: 18: uint16_t s_t;
  4051                           ;main.c: 19: uint16_t s_rh;
  4052                           ;main.c: 20: uint8_t status;
  4053                           ;main.c: 22: LATCbits.LATC7 ^= 1;
  4054                           
  4055                           ;incstack = 0
  4056                           ; Regs used in _inv_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4057  06C1  0022               	movlb	2	; select bank2
  4058  06C2  0D0E               	rlf	14,w	;volatile
  4059  06C3  0D0E               	rlf	14,w	;volatile
  4060  06C4  3901               	andlw	1
  4061  06C5  0020               	movlb	0	; select bank0
  4062  06C6  00CD               	movwf	??_inv_handler
  4063  06C7  3001               	movlw	1
  4064  06C8  06CD               	xorwf	??_inv_handler,f
  4065  06C9  0CCD               	rrf	??_inv_handler,f
  4066  06CA  0CCD               	rrf	??_inv_handler,f
  4067  06CB  0022               	movlb	2	; select bank2
  4068  06CC  080E               	movf	14,w	;volatile
  4069  06CD  0020               	movlb	0	; select bank0
  4070  06CE  064D               	xorwf	??_inv_handler,w
  4071  06CF  397F               	andlw	-129
  4072  06D0  064D               	xorwf	??_inv_handler,w
  4073  06D1  0022               	movlb	2	; select bank2
  4074  06D2  008E               	movwf	14	;volatile
  4075                           
  4076                           ;main.c: 25: status = i2c2_write(0x0045, 0x2c, 0x06);
  4077  06D3  3045               	movlw	69
  4078  06D4  0020               	movlb	0	; select bank0
  4079  06D5  00AF               	movwf	i2c2_write@dev_addr
  4080  06D6  3000               	movlw	0
  4081  06D7  00B0               	movwf	i2c2_write@dev_addr+1
  4082  06D8  302C               	movlw	44
  4083  06D9  00CD               	movwf	??_inv_handler
  4084  06DA  084D               	movf	??_inv_handler,w
  4085  06DB  00B1               	movwf	i2c2_write@reg_addr
  4086  06DC  3006               	movlw	6
  4087  06DD  00CE               	movwf	??_inv_handler+1
  4088  06DE  084E               	movf	??_inv_handler+1,w
  4089  06DF  00B2               	movwf	i2c2_write@data
  4090  06E0  318D  2549  3186   	fcall	_i2c2_write
  4091  06E3  0020               	movlb	0	; select bank0
  4092  06E4  00CF               	movwf	??_inv_handler+2
  4093  06E5  084F               	movf	??_inv_handler+2,w
  4094  06E6  00D2               	movwf	inv_handler@status
  4095                           
  4096                           ;main.c: 26: status = i2c2_read_no_reg_addr(0x0045, measure, 6);
  4097  06E7  3045               	movlw	69
  4098  06E8  00AF               	movwf	i2c2_read_no_reg_addr@dev_addr
  4099  06E9  3000               	movlw	0
  4100  06EA  00B0               	movwf	i2c2_read_no_reg_addr@dev_addr+1
  4101  06EB  3053               	movlw	(low (inv_handler@measure| 0))& (0+255)
  4102  06EC  00CD               	movwf	??_inv_handler
  4103  06ED  084D               	movf	??_inv_handler,w
  4104  06EE  00B1               	movwf	i2c2_read_no_reg_addr@pbuf
  4105  06EF  3006               	movlw	6
  4106  06F0  00CE               	movwf	??_inv_handler+1
  4107  06F1  084E               	movf	??_inv_handler+1,w
  4108  06F2  00B2               	movwf	i2c2_read_no_reg_addr@len
  4109  06F3  318D  25EC  3186   	fcall	_i2c2_read_no_reg_addr
  4110  06F6  0020               	movlb	0	; select bank0
  4111  06F7  00CF               	movwf	??_inv_handler+2
  4112  06F8  084F               	movf	??_inv_handler+2,w
  4113  06F9  00D2               	movwf	inv_handler@status
  4114                           
  4115                           ;main.c: 27: s_t = (uint16_t)measure[0] * 256 + (uint16_t)measure[1];
  4116  06FA  0854               	movf	inv_handler@measure+1,w
  4117  06FB  00CD               	movwf	??_inv_handler
  4118  06FC  01CE               	clrf	??_inv_handler+1
  4119  06FD  0853               	movf	inv_handler@measure,w
  4120  06FE  00CF               	movwf	??_inv_handler+2
  4121  06FF  01D0               	clrf	??_inv_handler+3
  4122  0700  084F               	movf	??_inv_handler+2,w
  4123  0701  00D0               	movwf	??_inv_handler+3
  4124  0702  01CF               	clrf	??_inv_handler+2
  4125  0703  084D               	movf	??_inv_handler,w
  4126  0704  074F               	addwf	??_inv_handler+2,w
  4127  0705  00D9               	movwf	inv_handler@s_t
  4128  0706  084E               	movf	??_inv_handler+1,w
  4129  0707  3D50               	addwfc	??_inv_handler+3,w
  4130  0708  00DA               	movwf	inv_handler@s_t+1
  4131                           
  4132                           ;main.c: 28: s_rh = (uint16_t)measure[3] * 256 + (uint16_t)measure[4];
  4133  0709  0857               	movf	inv_handler@measure+4,w
  4134  070A  00CD               	movwf	??_inv_handler
  4135  070B  01CE               	clrf	??_inv_handler+1
  4136  070C  0856               	movf	inv_handler@measure+3,w
  4137  070D  00CF               	movwf	??_inv_handler+2
  4138  070E  01D0               	clrf	??_inv_handler+3
  4139  070F  084F               	movf	??_inv_handler+2,w
  4140  0710  00D0               	movwf	??_inv_handler+3
  4141  0711  01CF               	clrf	??_inv_handler+2
  4142  0712  084D               	movf	??_inv_handler,w
  4143  0713  074F               	addwf	??_inv_handler+2,w
  4144  0714  00DB               	movwf	inv_handler@s_rh
  4145  0715  084E               	movf	??_inv_handler+1,w
  4146  0716  3D50               	addwfc	??_inv_handler+3,w
  4147  0717  00DC               	movwf	inv_handler@s_rh+1
  4148                           
  4149                           ;main.c: 30: data[0] = (int8_t)(s_t * 175 / RESOLUTION - 45);
  4150  0718  3006               	movlw	low (_RESOLUTION| (0+32768))
  4151  0719  0084               	movwf	4
  4152  071A  3086               	movlw	high (_RESOLUTION| (0+32768))
  4153  071B  0085               	movwf	5
  4154  071C  3F00               	moviw [0]fsr0
  4155  071D  00A7               	movwf	___lwdiv@divisor
  4156  071E  3F01               	moviw [1]fsr0
  4157  071F  00A8               	movwf	___lwdiv@divisor+1
  4158  0720  085A               	movf	inv_handler@s_t+1,w
  4159  0721  00A2               	movwf	___wmul@multiplier+1
  4160  0722  0859               	movf	inv_handler@s_t,w
  4161  0723  00A1               	movwf	___wmul@multiplier
  4162  0724  30AF               	movlw	175
  4163  0725  00A3               	movwf	___wmul@multiplicand
  4164  0726  3000               	movlw	0
  4165  0727  00A4               	movwf	___wmul@multiplicand+1
  4166  0728  318C  2401  3186   	fcall	___wmul
  4167  072B  0020               	movlb	0	; select bank0
  4168  072C  0822               	movf	?___wmul+1,w
  4169  072D  00AA               	movwf	___lwdiv@dividend+1
  4170  072E  0821               	movf	?___wmul,w
  4171  072F  00A9               	movwf	___lwdiv@dividend
  4172  0730  318E  2645  3186   	fcall	___lwdiv
  4173  0733  0020               	movlb	0	; select bank0
  4174  0734  0827               	movf	?___lwdiv,w
  4175  0735  3ED3               	addlw	-45
  4176  0736  00CD               	movwf	??_inv_handler
  4177  0737  084D               	movf	??_inv_handler,w
  4178  0738  00DD               	movwf	inv_handler@data
  4179                           
  4180                           ;main.c: 31: data[1] = (int8_t)(s_rh * 100 / RESOLUTION);
  4181  0739  3006               	movlw	low (_RESOLUTION| (0+32768))
  4182  073A  0084               	movwf	4
  4183  073B  3086               	movlw	high (_RESOLUTION| (0+32768))
  4184  073C  0085               	movwf	5
  4185  073D  3F00               	moviw [0]fsr0
  4186  073E  00A7               	movwf	___lwdiv@divisor
  4187  073F  3F01               	moviw [1]fsr0
  4188  0740  00A8               	movwf	___lwdiv@divisor+1
  4189  0741  085C               	movf	inv_handler@s_rh+1,w
  4190  0742  00A2               	movwf	___wmul@multiplier+1
  4191  0743  085B               	movf	inv_handler@s_rh,w
  4192  0744  00A1               	movwf	___wmul@multiplier
  4193  0745  3064               	movlw	100
  4194  0746  00A3               	movwf	___wmul@multiplicand
  4195  0747  3000               	movlw	0
  4196  0748  00A4               	movwf	___wmul@multiplicand+1
  4197  0749  318C  2401  3186   	fcall	___wmul
  4198  074C  0020               	movlb	0	; select bank0
  4199  074D  0822               	movf	?___wmul+1,w
  4200  074E  00AA               	movwf	___lwdiv@dividend+1
  4201  074F  0821               	movf	?___wmul,w
  4202  0750  00A9               	movwf	___lwdiv@dividend
  4203  0751  318E  2645  3186   	fcall	___lwdiv
  4204  0754  0020               	movlb	0	; select bank0
  4205  0755  0827               	movf	?___lwdiv,w
  4206  0756  00CD               	movwf	??_inv_handler
  4207  0757  084D               	movf	??_inv_handler,w
  4208  0758  00DE               	movwf	inv_handler@data+1
  4209                           
  4210                           ;main.c: 34: PROTOCOL_I2C_Send_int8_t(2, data);
  4211  0759  305D               	movlw	(low (inv_handler@data| 0))& (0+255)
  4212  075A  00CD               	movwf	??_inv_handler
  4213  075B  084D               	movf	??_inv_handler,w
  4214  075C  00C9               	movwf	PROTOCOL_I2C_Send_int8_t@pbuffer
  4215  075D  3002               	movlw	2
  4216  075E  318F  27A2         	fcall	_PROTOCOL_I2C_Send_int8_t
  4217  0760  0008               	return
  4218  0761                     __end_of_inv_handler:	
  4219                           
  4220                           	psect	text6
  4221  0D49                     __ptext6:	
  4222 ;; *************** function _i2c2_write *****************
  4223 ;; Defined at:
  4224 ;;		line 13 in file "i2c2_util.c"
  4225 ;; Parameters:    Size  Location     Type
  4226 ;;  dev_addr        2   15[BANK0 ] unsigned int 
  4227 ;;  reg_addr        1   17[BANK0 ] unsigned char 
  4228 ;;  data            1   18[BANK0 ] unsigned char 
  4229 ;; Auto vars:     Size  Location     Type
  4230 ;;  buf             2   21[BANK0 ] unsigned char [2]
  4231 ;;  status          1   24[BANK0 ] enum E2979
  4232 ;;  write_status    1   23[BANK0 ] unsigned char 
  4233 ;; Return value:  Size  Location     Type
  4234 ;;                  1    wreg      unsigned char 
  4235 ;; Registers used:
  4236 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4237 ;; Tracked objects:
  4238 ;;		On entry : 0/0
  4239 ;;		On exit  : 0/0
  4240 ;;		Unchanged: 0/0
  4241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4242 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4243 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4244 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4245 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4246 ;;Total ram usage:       10 bytes
  4247 ;; Hardware stack levels used:    1
  4248 ;; Hardware stack levels required when called:    7
  4249 ;; This function calls:
  4250 ;;		_I2C2_MasterWrite
  4251 ;; This function is called by:
  4252 ;;		_inv_handler
  4253 ;; This function uses a non-reentrant model
  4254 ;;
  4255                           
  4256                           
  4257                           ;psect for function _i2c2_write
  4258  0D49                     _i2c2_write:	
  4259                           
  4260                           ;i2c2_util.c: 15: uint8_t buf[2];
  4261                           ;i2c2_util.c: 16: I2C2_MESSAGE_STATUS status;
  4262                           ;i2c2_util.c: 17: uint8_t write_status;
  4263                           ;i2c2_util.c: 18: buf[0] = reg_addr;
  4264                           
  4265                           ;incstack = 0
  4266                           ; Regs used in _i2c2_write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4267  0D49  0020               	movlb	0	; select bank0
  4268  0D4A  0831               	movf	i2c2_write@reg_addr,w
  4269  0D4B  00B3               	movwf	??_i2c2_write
  4270  0D4C  0833               	movf	??_i2c2_write,w
  4271  0D4D  00B5               	movwf	i2c2_write@buf
  4272                           
  4273                           ;i2c2_util.c: 19: buf[1] = data;
  4274  0D4E  0832               	movf	i2c2_write@data,w
  4275  0D4F  00B3               	movwf	??_i2c2_write
  4276  0D50  0833               	movf	??_i2c2_write,w
  4277  0D51  00B6               	movwf	i2c2_write@buf+1
  4278                           
  4279                           ;i2c2_util.c: 20: I2C2_MasterWrite(buf, 2, dev_addr, &status);
  4280  0D52  3002               	movlw	2
  4281  0D53  00B3               	movwf	??_i2c2_write
  4282  0D54  0833               	movf	??_i2c2_write,w
  4283  0D55  00A8               	movwf	I2C2_MasterWrite@length
  4284  0D56  0830               	movf	i2c2_write@dev_addr+1,w
  4285  0D57  00AA               	movwf	I2C2_MasterWrite@address+1
  4286  0D58  082F               	movf	i2c2_write@dev_addr,w
  4287  0D59  00A9               	movwf	I2C2_MasterWrite@address
  4288  0D5A  3038               	movlw	(low (i2c2_write@status| 0))& (0+255)
  4289  0D5B  00B4               	movwf	??_i2c2_write+1
  4290  0D5C  0834               	movf	??_i2c2_write+1,w
  4291  0D5D  00AB               	movwf	I2C2_MasterWrite@pflag
  4292  0D5E  3035               	movlw	(low (i2c2_write@buf| 0))& (0+255)
  4293  0D5F  318D  25C2  318D   	fcall	_I2C2_MasterWrite
  4294  0D62                     l4183:	
  4295                           ;i2c2_util.c: 21: while (status == I2C2_MESSAGE_PENDING);
  4296                           
  4297  0D62  3002               	movlw	2
  4298  0D63  0020               	movlb	0	; select bank0
  4299  0D64  0638               	xorwf	i2c2_write@status,w
  4300  0D65  1903               	btfsc	3,2
  4301  0D66  2D62               	goto	l4183
  4302                           
  4303                           ;i2c2_util.c: 22: if (status == I2C2_MESSAGE_COMPLETE) {
  4304  0D67  0838               	movf	i2c2_write@status,w
  4305  0D68  1D03               	btfss	3,2
  4306  0D69  2D6C               	goto	l937
  4307                           
  4308                           ;i2c2_util.c: 23: write_status = 0;
  4309  0D6A  01B7               	clrf	i2c2_write@write_status
  4310                           
  4311                           ;i2c2_util.c: 24: } else {
  4312  0D6B  2D6E               	goto	l4189
  4313  0D6C                     l937:	
  4314                           
  4315                           ;i2c2_util.c: 25: write_status = 1;
  4316  0D6C  01B7               	clrf	i2c2_write@write_status
  4317  0D6D  0AB7               	incf	i2c2_write@write_status,f
  4318  0D6E                     l4189:	
  4319                           
  4320                           ;i2c2_util.c: 26: }
  4321                           ;i2c2_util.c: 27: return write_status;
  4322  0D6E  0837               	movf	i2c2_write@write_status,w
  4323  0D6F  0008               	return
  4324  0D70                     __end_of_i2c2_write:	
  4325                           
  4326                           	psect	text7
  4327  0DC2                     __ptext7:	
  4328 ;; *************** function _I2C2_MasterWrite *****************
  4329 ;; Defined at:
  4330 ;;		line 598 in file "mcc_generated_files/i2c2.c"
  4331 ;; Parameters:    Size  Location     Type
  4332 ;;  pdata           1    wreg     PTR unsigned char 
  4333 ;;		 -> i2c2_write_no_data@buf(1), i2c2_read@reg(1), i2c2_write@buf(2), 
  4334 ;;  length          1    8[BANK0 ] unsigned char 
  4335 ;;  address         2    9[BANK0 ] unsigned int 
  4336 ;;  pflag           1   11[BANK0 ] PTR enum E2972
  4337 ;;		 -> i2c2_write_no_data@status(1), i2c2_read@status(1), i2c2_write@status(1), 
  4338 ;; Auto vars:     Size  Location     Type
  4339 ;;  pdata           1   14[BANK0 ] PTR unsigned char 
  4340 ;;		 -> i2c2_write_no_data@buf(1), i2c2_read@reg(1), i2c2_write@buf(2), 
  4341 ;; Return value:  Size  Location     Type
  4342 ;;                  1    wreg      void 
  4343 ;; Registers used:
  4344 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4345 ;; Tracked objects:
  4346 ;;		On entry : 0/0
  4347 ;;		On exit  : 0/0
  4348 ;;		Unchanged: 0/0
  4349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4350 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4351 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4352 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4353 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4354 ;;Total ram usage:        7 bytes
  4355 ;; Hardware stack levels used:    1
  4356 ;; Hardware stack levels required when called:    6
  4357 ;; This function calls:
  4358 ;;		_I2C2_MasterTRBInsert
  4359 ;;		_I2C2_MasterWriteTRBBuild
  4360 ;; This function is called by:
  4361 ;;		_i2c2_write
  4362 ;; This function uses a non-reentrant model
  4363 ;;
  4364                           
  4365                           
  4366                           ;psect for function _I2C2_MasterWrite
  4367  0DC2                     _I2C2_MasterWrite:	
  4368                           
  4369                           ;incstack = 0
  4370                           ; Regs used in _I2C2_MasterWrite: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4371                           ;I2C2_MasterWrite@pdata stored from wreg
  4372  0DC2  0020               	movlb	0	; select bank0
  4373  0DC3  00AE               	movwf	I2C2_MasterWrite@pdata
  4374                           
  4375                           ;i2c2.c: 604: static I2C2_TRANSACTION_REQUEST_BLOCK trBlock;
  4376                           ;i2c2.c: 607: if (i2c2_object.trStatus.s.full != 1)
  4377  0DC4  0021               	movlb	1	; select bank1
  4378  0DC5  182A               	btfsc	(_i2c2_object^(0+128)+2),0
  4379  0DC6  2DE5               	goto	l4009
  4380                           
  4381                           ;i2c2.c: 608: {
  4382                           ;i2c2.c: 609: I2C2_MasterWriteTRBBuild(&trBlock, pdata, length, address);
  4383  0DC7  0020               	movlb	0	; select bank0
  4384  0DC8  082E               	movf	I2C2_MasterWrite@pdata,w
  4385  0DC9  00AC               	movwf	??_I2C2_MasterWrite
  4386  0DCA  082C               	movf	??_I2C2_MasterWrite,w
  4387  0DCB  00A1               	movwf	I2C2_MasterWriteTRBBuild@pdata
  4388  0DCC  0828               	movf	I2C2_MasterWrite@length,w
  4389  0DCD  00AD               	movwf	??_I2C2_MasterWrite+1
  4390  0DCE  082D               	movf	??_I2C2_MasterWrite+1,w
  4391  0DCF  00A2               	movwf	I2C2_MasterWriteTRBBuild@length
  4392  0DD0  082A               	movf	I2C2_MasterWrite@address+1,w
  4393  0DD1  00A4               	movwf	I2C2_MasterWriteTRBBuild@address+1
  4394  0DD2  0829               	movf	I2C2_MasterWrite@address,w
  4395  0DD3  00A3               	movwf	I2C2_MasterWriteTRBBuild@address
  4396  0DD4  30D1               	movlw	(low (I2C2_MasterWrite@trBlock| 0))& (0+255)
  4397  0DD5  318C  2478  318D   	fcall	_I2C2_MasterWriteTRBBuild
  4398                           
  4399                           ;i2c2.c: 610: I2C2_MasterTRBInsert(1, &trBlock, pflag);
  4400  0DD8  30D1               	movlw	(low (I2C2_MasterWrite@trBlock| 0))& (0+255)
  4401  0DD9  0020               	movlb	0	; select bank0
  4402  0DDA  00AC               	movwf	??_I2C2_MasterWrite
  4403  0DDB  082C               	movf	??_I2C2_MasterWrite,w
  4404  0DDC  00A1               	movwf	I2C2_MasterTRBInsert@ptrb_list
  4405  0DDD  082B               	movf	I2C2_MasterWrite@pflag,w
  4406  0DDE  00AD               	movwf	??_I2C2_MasterWrite+1
  4407  0DDF  082D               	movf	??_I2C2_MasterWrite+1,w
  4408  0DE0  00A2               	movwf	I2C2_MasterTRBInsert@pflag
  4409  0DE1  3001               	movlw	1
  4410  0DE2  318F  2750         	fcall	_I2C2_MasterTRBInsert
  4411                           
  4412                           ;i2c2.c: 611: }
  4413  0DE4  0008               	return
  4414  0DE5                     l4009:	
  4415                           
  4416                           ;i2c2.c: 612: else
  4417                           ;i2c2.c: 613: {
  4418                           ;i2c2.c: 614: *pflag = I2C2_MESSAGE_FAIL;
  4419  0DE5  0020               	movlb	0	; select bank0
  4420  0DE6  082B               	movf	I2C2_MasterWrite@pflag,w
  4421  0DE7  0086               	movwf	6
  4422  0DE8  0187               	clrf	7
  4423  0DE9  0181               	clrf	1
  4424  0DEA  0A81               	incf	1,f
  4425  0DEB  0008               	return
  4426  0DEC                     __end_of_I2C2_MasterWrite:	
  4427                           
  4428                           	psect	text8
  4429  0C78                     __ptext8:	
  4430 ;; *************** function _I2C2_MasterWriteTRBBuild *****************
  4431 ;; Defined at:
  4432 ;;		line 707 in file "mcc_generated_files/i2c2.c"
  4433 ;; Parameters:    Size  Location     Type
  4434 ;;  ptrb            1    wreg     PTR struct .
  4435 ;;		 -> I2C2_MasterWrite@trBlock(4), 
  4436 ;;  pdata           1    1[BANK0 ] PTR unsigned char 
  4437 ;;		 -> i2c2_write_no_data@buf(1), i2c2_read@reg(1), i2c2_write@buf(2), 
  4438 ;;  length          1    2[BANK0 ] unsigned char 
  4439 ;;  address         2    3[BANK0 ] unsigned int 
  4440 ;; Auto vars:     Size  Location     Type
  4441 ;;  ptrb            1    7[BANK0 ] PTR struct .
  4442 ;;		 -> I2C2_MasterWrite@trBlock(4), 
  4443 ;; Return value:  Size  Location     Type
  4444 ;;                  1    wreg      void 
  4445 ;; Registers used:
  4446 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4447 ;; Tracked objects:
  4448 ;;		On entry : 0/0
  4449 ;;		On exit  : 0/0
  4450 ;;		Unchanged: 0/0
  4451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4452 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4453 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4454 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4455 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4456 ;;Total ram usage:        7 bytes
  4457 ;; Hardware stack levels used:    1
  4458 ;; Hardware stack levels required when called:    5
  4459 ;; This function calls:
  4460 ;;		Nothing
  4461 ;; This function is called by:
  4462 ;;		_I2C2_MasterWrite
  4463 ;; This function uses a non-reentrant model
  4464 ;;
  4465                           
  4466                           
  4467                           ;psect for function _I2C2_MasterWriteTRBBuild
  4468  0C78                     _I2C2_MasterWriteTRBBuild:	
  4469                           
  4470                           ;incstack = 0
  4471                           ; Regs used in _I2C2_MasterWriteTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
  4472                           ;I2C2_MasterWriteTRBBuild@ptrb stored from wreg
  4473  0C78  0020               	movlb	0	; select bank0
  4474  0C79  00A7               	movwf	I2C2_MasterWriteTRBBuild@ptrb
  4475                           
  4476                           ;i2c2.c: 713: ptrb->address = address << 1;
  4477  0C7A  0824               	movf	I2C2_MasterWriteTRBBuild@address+1,w
  4478  0C7B  00A6               	movwf	??_I2C2_MasterWriteTRBBuild+1
  4479  0C7C  0823               	movf	I2C2_MasterWriteTRBBuild@address,w
  4480  0C7D  00A5               	movwf	??_I2C2_MasterWriteTRBBuild
  4481  0C7E  35A5               	lslf	??_I2C2_MasterWriteTRBBuild,f
  4482  0C7F  0DA6               	rlf	??_I2C2_MasterWriteTRBBuild+1,f
  4483  0C80  0827               	movf	I2C2_MasterWriteTRBBuild@ptrb,w
  4484  0C81  0086               	movwf	6
  4485  0C82  0187               	clrf	7
  4486  0C83  0825               	movf	??_I2C2_MasterWriteTRBBuild,w
  4487  0C84  3FC0               	movwi [0]fsr1
  4488  0C85  0826               	movf	??_I2C2_MasterWriteTRBBuild+1,w
  4489  0C86  3FC1               	movwi [1]fsr1
  4490                           
  4491                           ;i2c2.c: 714: ptrb->length = length;
  4492  0C87  0822               	movf	I2C2_MasterWriteTRBBuild@length,w
  4493  0C88  00A5               	movwf	??_I2C2_MasterWriteTRBBuild
  4494  0C89  0827               	movf	I2C2_MasterWriteTRBBuild@ptrb,w
  4495  0C8A  3E02               	addlw	2
  4496  0C8B  0086               	movwf	6
  4497  0C8C  0187               	clrf	7
  4498  0C8D  0825               	movf	??_I2C2_MasterWriteTRBBuild,w
  4499  0C8E  0081               	movwf	1
  4500                           
  4501                           ;i2c2.c: 715: ptrb->pbuffer = pdata;
  4502  0C8F  0821               	movf	I2C2_MasterWriteTRBBuild@pdata,w
  4503  0C90  00A5               	movwf	??_I2C2_MasterWriteTRBBuild
  4504  0C91  0827               	movf	I2C2_MasterWriteTRBBuild@ptrb,w
  4505  0C92  3E03               	addlw	3
  4506  0C93  0086               	movwf	6
  4507  0C94  0187               	clrf	7
  4508  0C95  0825               	movf	??_I2C2_MasterWriteTRBBuild,w
  4509  0C96  0081               	movwf	1
  4510  0C97  0008               	return
  4511  0C98                     __end_of_I2C2_MasterWriteTRBBuild:	
  4512                           
  4513                           	psect	text9
  4514  0DEC                     __ptext9:	
  4515 ;; *************** function _i2c2_read_no_reg_addr *****************
  4516 ;; Defined at:
  4517 ;;		line 77 in file "i2c2_util.c"
  4518 ;; Parameters:    Size  Location     Type
  4519 ;;  dev_addr        2   15[BANK0 ] unsigned int 
  4520 ;;  pbuf            1   17[BANK0 ] PTR unsigned char 
  4521 ;;		 -> inv_handler@measure(6), 
  4522 ;;  len             1   18[BANK0 ] unsigned char 
  4523 ;; Auto vars:     Size  Location     Type
  4524 ;;  status          1   23[BANK0 ] enum E2979
  4525 ;;  read_status     1   22[BANK0 ] unsigned char 
  4526 ;;  timeout         1   21[BANK0 ] unsigned char 
  4527 ;; Return value:  Size  Location     Type
  4528 ;;                  1    wreg      unsigned char 
  4529 ;; Registers used:
  4530 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4531 ;; Tracked objects:
  4532 ;;		On entry : 0/0
  4533 ;;		On exit  : 0/0
  4534 ;;		Unchanged: 0/0
  4535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4536 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4537 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4538 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4539 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4540 ;;Total ram usage:        9 bytes
  4541 ;; Hardware stack levels used:    1
  4542 ;; Hardware stack levels required when called:    7
  4543 ;; This function calls:
  4544 ;;		_I2C2_MasterRead
  4545 ;; This function is called by:
  4546 ;;		_inv_handler
  4547 ;; This function uses a non-reentrant model
  4548 ;;
  4549                           
  4550                           
  4551                           ;psect for function _i2c2_read_no_reg_addr
  4552  0DEC                     _i2c2_read_no_reg_addr:	
  4553                           
  4554                           ;i2c2_util.c: 79: I2C2_MESSAGE_STATUS status;
  4555                           ;i2c2_util.c: 80: uint8_t read_status = 2;
  4556                           
  4557                           ;incstack = 0
  4558                           ; Regs used in _i2c2_read_no_reg_addr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  4559  0DEC  3002               	movlw	2
  4560  0DED  0020               	movlb	0	; select bank0
  4561  0DEE  00B3               	movwf	??_i2c2_read_no_reg_addr
  4562  0DEF  0833               	movf	??_i2c2_read_no_reg_addr,w
  4563  0DF0  00B6               	movwf	i2c2_read_no_reg_addr@read_status
  4564                           
  4565                           ;i2c2_util.c: 81: uint8_t timeout = 1;
  4566  0DF1  01B5               	clrf	i2c2_read_no_reg_addr@timeout
  4567  0DF2  0AB5               	incf	i2c2_read_no_reg_addr@timeout,f
  4568  0DF3                     l4209:	
  4569                           ;i2c2_util.c: 82: while (status != I2C2_MESSAGE_FAIL) {
  4570                           
  4571  0DF3  0337               	decf	i2c2_read_no_reg_addr@status,w
  4572  0DF4  1903               	btfsc	3,2
  4573  0DF5  2E16               	goto	l4211
  4574                           
  4575                           ;i2c2_util.c: 83: I2C2_MasterRead(pbuf, len, dev_addr, &status);
  4576  0DF6  0832               	movf	i2c2_read_no_reg_addr@len,w
  4577  0DF7  00B3               	movwf	??_i2c2_read_no_reg_addr
  4578  0DF8  0833               	movf	??_i2c2_read_no_reg_addr,w
  4579  0DF9  00A8               	movwf	I2C2_MasterRead@length
  4580  0DFA  0830               	movf	i2c2_read_no_reg_addr@dev_addr+1,w
  4581  0DFB  00AA               	movwf	I2C2_MasterRead@address+1
  4582  0DFC  082F               	movf	i2c2_read_no_reg_addr@dev_addr,w
  4583  0DFD  00A9               	movwf	I2C2_MasterRead@address
  4584  0DFE  3037               	movlw	(low (i2c2_read_no_reg_addr@status| 0))& (0+255)
  4585  0DFF  00B4               	movwf	??_i2c2_read_no_reg_addr+1
  4586  0E00  0834               	movf	??_i2c2_read_no_reg_addr+1,w
  4587  0E01  00AB               	movwf	I2C2_MasterRead@pflag
  4588  0E02  0831               	movf	i2c2_read_no_reg_addr@pbuf,w
  4589  0E03  318D  2598  318D   	fcall	_I2C2_MasterRead
  4590  0E06                     l4199:	
  4591                           ;i2c2_util.c: 84: while (status == I2C2_MESSAGE_PENDING);
  4592                           
  4593  0E06  3002               	movlw	2
  4594  0E07  0020               	movlb	0	; select bank0
  4595  0E08  0637               	xorwf	i2c2_read_no_reg_addr@status,w
  4596  0E09  1903               	btfsc	3,2
  4597  0E0A  2E06               	goto	l4199
  4598                           
  4599                           ;i2c2_util.c: 85: if (status == I2C2_MESSAGE_COMPLETE) {
  4600  0E0B  0837               	movf	i2c2_read_no_reg_addr@status,w
  4601  0E0C  1D03               	btfss	3,2
  4602  0E0D  2E10               	goto	l4205
  4603                           
  4604                           ;i2c2_util.c: 86: read_status = 0;
  4605  0E0E  01B6               	clrf	i2c2_read_no_reg_addr@read_status
  4606                           
  4607                           ;i2c2_util.c: 87: break;
  4608  0E0F  2E16               	goto	l4211
  4609  0E10                     l4205:	
  4610                           
  4611                           ;i2c2_util.c: 88: }
  4612                           ;i2c2_util.c: 89: if (--timeout == 0) {
  4613  0E10  3001               	movlw	1
  4614  0E11  02B5               	subwf	i2c2_read_no_reg_addr@timeout,f
  4615  0E12  1D03               	btfss	3,2
  4616  0E13  2DF3               	goto	l4209
  4617                           
  4618                           ;i2c2_util.c: 90: read_status = 1;
  4619  0E14  01B6               	clrf	i2c2_read_no_reg_addr@read_status
  4620  0E15  0AB6               	incf	i2c2_read_no_reg_addr@read_status,f
  4621  0E16                     l4211:	
  4622                           ;i2c2_util.c: 91: break;
  4623                           
  4624                           
  4625                           ;i2c2_util.c: 92: }
  4626                           ;i2c2_util.c: 93: }
  4627                           ;i2c2_util.c: 94: return read_status;
  4628  0E16  0836               	movf	i2c2_read_no_reg_addr@read_status,w
  4629  0E17  0008               	return
  4630  0E18                     __end_of_i2c2_read_no_reg_addr:	
  4631                           
  4632                           	psect	text10
  4633  0D98                     __ptext10:	
  4634 ;; *************** function _I2C2_MasterRead *****************
  4635 ;; Defined at:
  4636 ;;		line 619 in file "mcc_generated_files/i2c2.c"
  4637 ;; Parameters:    Size  Location     Type
  4638 ;;  pdata           1    wreg     PTR unsigned char 
  4639 ;;		 -> inv_handler@measure(6), 
  4640 ;;  length          1    8[BANK0 ] unsigned char 
  4641 ;;  address         2    9[BANK0 ] unsigned int 
  4642 ;;  pflag           1   11[BANK0 ] PTR enum E2972
  4643 ;;		 -> i2c2_read_no_reg_addr@status(1), i2c2_read@status(1), 
  4644 ;; Auto vars:     Size  Location     Type
  4645 ;;  pdata           1   14[BANK0 ] PTR unsigned char 
  4646 ;;		 -> inv_handler@measure(6), 
  4647 ;; Return value:  Size  Location     Type
  4648 ;;                  1    wreg      void 
  4649 ;; Registers used:
  4650 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4651 ;; Tracked objects:
  4652 ;;		On entry : 0/0
  4653 ;;		On exit  : 0/0
  4654 ;;		Unchanged: 0/0
  4655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4656 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4657 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4658 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4659 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4660 ;;Total ram usage:        7 bytes
  4661 ;; Hardware stack levels used:    1
  4662 ;; Hardware stack levels required when called:    6
  4663 ;; This function calls:
  4664 ;;		_I2C2_MasterReadTRBBuild
  4665 ;;		_I2C2_MasterTRBInsert
  4666 ;; This function is called by:
  4667 ;;		_i2c2_read_no_reg_addr
  4668 ;; This function uses a non-reentrant model
  4669 ;;
  4670                           
  4671                           
  4672                           ;psect for function _I2C2_MasterRead
  4673  0D98                     _I2C2_MasterRead:	
  4674                           
  4675                           ;incstack = 0
  4676                           ; Regs used in _I2C2_MasterRead: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4677                           ;I2C2_MasterRead@pdata stored from wreg
  4678  0D98  0020               	movlb	0	; select bank0
  4679  0D99  00AE               	movwf	I2C2_MasterRead@pdata
  4680                           
  4681                           ;i2c2.c: 625: static I2C2_TRANSACTION_REQUEST_BLOCK trBlock;
  4682                           ;i2c2.c: 629: if (i2c2_object.trStatus.s.full != 1)
  4683  0D9A  0021               	movlb	1	; select bank1
  4684  0D9B  182A               	btfsc	(_i2c2_object^(0+128)+2),0
  4685  0D9C  2DBB               	goto	l4015
  4686                           
  4687                           ;i2c2.c: 630: {
  4688                           ;i2c2.c: 631: I2C2_MasterReadTRBBuild(&trBlock, pdata, length, address);
  4689  0D9D  0020               	movlb	0	; select bank0
  4690  0D9E  082E               	movf	I2C2_MasterRead@pdata,w
  4691  0D9F  00AC               	movwf	??_I2C2_MasterRead
  4692  0DA0  082C               	movf	??_I2C2_MasterRead,w
  4693  0DA1  00A1               	movwf	I2C2_MasterReadTRBBuild@pdata
  4694  0DA2  0828               	movf	I2C2_MasterRead@length,w
  4695  0DA3  00AD               	movwf	??_I2C2_MasterRead+1
  4696  0DA4  082D               	movf	??_I2C2_MasterRead+1,w
  4697  0DA5  00A2               	movwf	I2C2_MasterReadTRBBuild@length
  4698  0DA6  082A               	movf	I2C2_MasterRead@address+1,w
  4699  0DA7  00A4               	movwf	I2C2_MasterReadTRBBuild@address+1
  4700  0DA8  0829               	movf	I2C2_MasterRead@address,w
  4701  0DA9  00A3               	movwf	I2C2_MasterReadTRBBuild@address
  4702  0DAA  30CD               	movlw	(low (I2C2_MasterRead@trBlock| 0))& (0+255)
  4703  0DAB  318D  2570  318D   	fcall	_I2C2_MasterReadTRBBuild
  4704                           
  4705                           ;i2c2.c: 632: I2C2_MasterTRBInsert(1, &trBlock, pflag);
  4706  0DAE  30CD               	movlw	(low (I2C2_MasterRead@trBlock| 0))& (0+255)
  4707  0DAF  0020               	movlb	0	; select bank0
  4708  0DB0  00AC               	movwf	??_I2C2_MasterRead
  4709  0DB1  082C               	movf	??_I2C2_MasterRead,w
  4710  0DB2  00A1               	movwf	I2C2_MasterTRBInsert@ptrb_list
  4711  0DB3  082B               	movf	I2C2_MasterRead@pflag,w
  4712  0DB4  00AD               	movwf	??_I2C2_MasterRead+1
  4713  0DB5  082D               	movf	??_I2C2_MasterRead+1,w
  4714  0DB6  00A2               	movwf	I2C2_MasterTRBInsert@pflag
  4715  0DB7  3001               	movlw	1
  4716  0DB8  318F  2750         	fcall	_I2C2_MasterTRBInsert
  4717                           
  4718                           ;i2c2.c: 633: }
  4719  0DBA  0008               	return
  4720  0DBB                     l4015:	
  4721                           
  4722                           ;i2c2.c: 634: else
  4723                           ;i2c2.c: 635: {
  4724                           ;i2c2.c: 636: *pflag = I2C2_MESSAGE_FAIL;
  4725  0DBB  0020               	movlb	0	; select bank0
  4726  0DBC  082B               	movf	I2C2_MasterRead@pflag,w
  4727  0DBD  0086               	movwf	6
  4728  0DBE  0187               	clrf	7
  4729  0DBF  0181               	clrf	1
  4730  0DC0  0A81               	incf	1,f
  4731  0DC1  0008               	return
  4732  0DC2                     __end_of_I2C2_MasterRead:	
  4733                           
  4734                           	psect	text11
  4735  0F50                     __ptext11:	
  4736 ;; *************** function _I2C2_MasterTRBInsert *****************
  4737 ;; Defined at:
  4738 ;;		line 641 in file "mcc_generated_files/i2c2.c"
  4739 ;; Parameters:    Size  Location     Type
  4740 ;;  count           1    wreg     unsigned char 
  4741 ;;  ptrb_list       1    1[BANK0 ] PTR struct .
  4742 ;;		 -> I2C2_MasterRead@trBlock(4), I2C2_MasterWrite@trBlock(4), 
  4743 ;;  pflag           1    2[BANK0 ] PTR enum E2972
  4744 ;;		 -> i2c2_read_no_reg_addr@status(1), i2c2_write_no_data@status(1), i2c2_read@status(1), i2c2_write@status(1), 
  4745 ;; Auto vars:     Size  Location     Type
  4746 ;;  count           1    4[BANK0 ] unsigned char 
  4747 ;; Return value:  Size  Location     Type
  4748 ;;                  1    wreg      void 
  4749 ;; Registers used:
  4750 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4751 ;; Tracked objects:
  4752 ;;		On entry : 0/0
  4753 ;;		On exit  : 0/0
  4754 ;;		Unchanged: 0/0
  4755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4756 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4757 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4758 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4759 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4760 ;;Total ram usage:        4 bytes
  4761 ;; Hardware stack levels used:    1
  4762 ;; Hardware stack levels required when called:    5
  4763 ;; This function calls:
  4764 ;;		Nothing
  4765 ;; This function is called by:
  4766 ;;		_I2C2_MasterWrite
  4767 ;;		_I2C2_MasterRead
  4768 ;; This function uses a non-reentrant model
  4769 ;;
  4770                           
  4771                           
  4772                           ;psect for function _I2C2_MasterTRBInsert
  4773  0F50                     _I2C2_MasterTRBInsert:	
  4774                           
  4775                           ;incstack = 0
  4776                           ; Regs used in _I2C2_MasterTRBInsert: [wreg+fsr1l+fsr1h+status,2+status,0]
  4777                           ;I2C2_MasterTRBInsert@count stored from wreg
  4778  0F50  0020               	movlb	0	; select bank0
  4779  0F51  00A4               	movwf	I2C2_MasterTRBInsert@count
  4780                           
  4781                           ;i2c2.c: 648: if (i2c2_object.trStatus.s.full != 1)
  4782  0F52  0021               	movlb	1	; select bank1
  4783  0F53  182A               	btfsc	(_i2c2_object^(0+128)+2),0
  4784  0F54  2F8F               	goto	l3919
  4785                           
  4786                           ;i2c2.c: 649: {
  4787                           ;i2c2.c: 650: *pflag = I2C2_MESSAGE_PENDING;
  4788  0F55  3002               	movlw	2
  4789  0F56  0020               	movlb	0	; select bank0
  4790  0F57  00A3               	movwf	??_I2C2_MasterTRBInsert
  4791  0F58  0822               	movf	I2C2_MasterTRBInsert@pflag,w
  4792  0F59  0086               	movwf	6
  4793  0F5A  0187               	clrf	7
  4794  0F5B  0823               	movf	??_I2C2_MasterTRBInsert,w
  4795  0F5C  0081               	movwf	1
  4796                           
  4797                           ;i2c2.c: 652: i2c2_object.pTrTail->ptrb_list = ptrb_list;
  4798  0F5D  0821               	movf	I2C2_MasterTRBInsert@ptrb_list,w
  4799  0F5E  00A3               	movwf	??_I2C2_MasterTRBInsert
  4800  0F5F  0021               	movlb	1	; select bank1
  4801  0F60  0A28               	incf	_i2c2_object^(0+128),w
  4802  0F61  0086               	movwf	6
  4803  0F62  0187               	clrf	7
  4804  0F63  0020               	movlb	0	; select bank0
  4805  0F64  0823               	movf	??_I2C2_MasterTRBInsert,w
  4806  0F65  0081               	movwf	1
  4807                           
  4808                           ;i2c2.c: 653: i2c2_object.pTrTail->count = count;
  4809  0F66  0824               	movf	I2C2_MasterTRBInsert@count,w
  4810  0F67  00A3               	movwf	??_I2C2_MasterTRBInsert
  4811  0F68  0021               	movlb	1	; select bank1
  4812  0F69  0828               	movf	_i2c2_object^(0+128),w
  4813  0F6A  0086               	movwf	6
  4814  0F6B  0187               	clrf	7
  4815  0F6C  0020               	movlb	0	; select bank0
  4816  0F6D  0823               	movf	??_I2C2_MasterTRBInsert,w
  4817  0F6E  0081               	movwf	1
  4818                           
  4819                           ;i2c2.c: 654: i2c2_object.pTrTail->pTrFlag = pflag;
  4820  0F6F  0822               	movf	I2C2_MasterTRBInsert@pflag,w
  4821  0F70  00A3               	movwf	??_I2C2_MasterTRBInsert
  4822  0F71  0021               	movlb	1	; select bank1
  4823  0F72  0828               	movf	_i2c2_object^(0+128),w
  4824  0F73  3E02               	addlw	2
  4825  0F74  0086               	movwf	6
  4826  0F75  0187               	clrf	7
  4827  0F76  0020               	movlb	0	; select bank0
  4828  0F77  0823               	movf	??_I2C2_MasterTRBInsert,w
  4829  0F78  0081               	movwf	1
  4830                           
  4831                           ;i2c2.c: 655: i2c2_object.pTrTail++;
  4832  0F79  3003               	movlw	3
  4833  0F7A  00A3               	movwf	??_I2C2_MasterTRBInsert
  4834  0F7B  0823               	movf	??_I2C2_MasterTRBInsert,w
  4835  0F7C  0021               	movlb	1	; select bank1
  4836  0F7D  07A8               	addwf	_i2c2_object^(0+128),f
  4837                           
  4838                           ;i2c2.c: 658: if (i2c2_object.pTrTail == (i2c2_tr_queue + 1))
  4839  0F7E  0828               	movf	_i2c2_object^(0+128),w
  4840  0F7F  3ADB               	xorlw	(low ((_i2c2_tr_queue| 0+3)))& (0+255)
  4841  0F80  1D03               	skipz
  4842  0F81  2F88               	goto	l3915
  4843                           
  4844                           ;i2c2.c: 659: {
  4845                           ;i2c2.c: 661: i2c2_object.pTrTail = i2c2_tr_queue;
  4846  0F82  30D8               	movlw	(low (_i2c2_tr_queue| 0))& (0+255)
  4847  0F83  0020               	movlb	0	; select bank0
  4848  0F84  00A3               	movwf	??_I2C2_MasterTRBInsert
  4849  0F85  0823               	movf	??_I2C2_MasterTRBInsert,w
  4850  0F86  0021               	movlb	1	; select bank1
  4851  0F87  00A8               	movwf	_i2c2_object^(0+128)
  4852  0F88                     l3915:	
  4853                           
  4854                           ;i2c2.c: 662: }
  4855                           ;i2c2.c: 666: i2c2_object.trStatus.s.empty = 0;
  4856  0F88  10AA               	bcf	(_i2c2_object^(0+128)+2),1
  4857                           
  4858                           ;i2c2.c: 669: if (i2c2_object.pTrHead == i2c2_object.pTrTail)
  4859  0F89  0829               	movf	(low ((_i2c2_object| 0+1)))^(0+128),w
  4860  0F8A  0628               	xorwf	_i2c2_object^(0+128),w
  4861  0F8B  1D03               	skipz
  4862  0F8C  2F95               	goto	l3921
  4863                           
  4864                           ;i2c2.c: 670: {
  4865                           ;i2c2.c: 672: i2c2_object.trStatus.s.full = 1;
  4866  0F8D  142A               	bsf	(_i2c2_object^(0+128)+2),0
  4867                           
  4868                           ;i2c2.c: 673: }
  4869                           ;i2c2.c: 675: }
  4870  0F8E  2F95               	goto	l3921
  4871  0F8F                     l3919:	
  4872                           
  4873                           ;i2c2.c: 676: else
  4874                           ;i2c2.c: 677: {
  4875                           ;i2c2.c: 678: *pflag = I2C2_MESSAGE_FAIL;
  4876  0F8F  0020               	movlb	0	; select bank0
  4877  0F90  0822               	movf	I2C2_MasterTRBInsert@pflag,w
  4878  0F91  0086               	movwf	6
  4879  0F92  0187               	clrf	7
  4880  0F93  0181               	clrf	1
  4881  0F94  0A81               	incf	1,f
  4882  0F95                     l3921:	
  4883                           
  4884                           ;i2c2.c: 679: }
  4885                           ;i2c2.c: 682: if (*pflag == I2C2_MESSAGE_PENDING)
  4886  0F95  0020               	movlb	0	; select bank0
  4887  0F96  0822               	movf	I2C2_MasterTRBInsert@pflag,w
  4888  0F97  0086               	movwf	6
  4889  0F98  0187               	clrf	7
  4890  0F99  3002               	movlw	2
  4891  0F9A  0601               	xorwf	1,w
  4892  0F9B  1D03               	btfss	3,2
  4893  0F9C  0008               	return
  4894  0F9D                     l3925:	
  4895                           ;i2c2.c: 683: {
  4896                           ;i2c2.c: 684: while(i2c2_state != S_MASTER_IDLE);
  4897                           
  4898  0F9D  086A               	movf	_i2c2_state,w
  4899  0F9E  1D03               	btfss	3,2
  4900  0F9F  2F9D               	goto	l3925
  4901                           
  4902                           ;i2c2.c: 685: {
  4903                           ;i2c2.c: 688: PIR4bits.SSP2IF = 1;
  4904  0FA0  1414               	bsf	20,0	;volatile
  4905  0FA1  0008               	return
  4906  0FA2                     __end_of_I2C2_MasterTRBInsert:	
  4907                           
  4908                           	psect	text12
  4909  0D70                     __ptext12:	
  4910 ;; *************** function _I2C2_MasterReadTRBBuild *****************
  4911 ;; Defined at:
  4912 ;;		line 694 in file "mcc_generated_files/i2c2.c"
  4913 ;; Parameters:    Size  Location     Type
  4914 ;;  ptrb            1    wreg     PTR struct .
  4915 ;;		 -> I2C2_MasterRead@trBlock(4), 
  4916 ;;  pdata           1    1[BANK0 ] PTR unsigned char 
  4917 ;;		 -> inv_handler@measure(6), 
  4918 ;;  length          1    2[BANK0 ] unsigned char 
  4919 ;;  address         2    3[BANK0 ] unsigned int 
  4920 ;; Auto vars:     Size  Location     Type
  4921 ;;  ptrb            1    7[BANK0 ] PTR struct .
  4922 ;;		 -> I2C2_MasterRead@trBlock(4), 
  4923 ;; Return value:  Size  Location     Type
  4924 ;;                  1    wreg      void 
  4925 ;; Registers used:
  4926 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4927 ;; Tracked objects:
  4928 ;;		On entry : 0/0
  4929 ;;		On exit  : 0/0
  4930 ;;		Unchanged: 0/0
  4931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4932 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4933 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4934 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4935 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4936 ;;Total ram usage:        7 bytes
  4937 ;; Hardware stack levels used:    1
  4938 ;; Hardware stack levels required when called:    5
  4939 ;; This function calls:
  4940 ;;		Nothing
  4941 ;; This function is called by:
  4942 ;;		_I2C2_MasterRead
  4943 ;; This function uses a non-reentrant model
  4944 ;;
  4945                           
  4946                           
  4947                           ;psect for function _I2C2_MasterReadTRBBuild
  4948  0D70                     _I2C2_MasterReadTRBBuild:	
  4949                           
  4950                           ;incstack = 0
  4951                           ; Regs used in _I2C2_MasterReadTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
  4952                           ;I2C2_MasterReadTRBBuild@ptrb stored from wreg
  4953  0D70  0020               	movlb	0	; select bank0
  4954  0D71  00A7               	movwf	I2C2_MasterReadTRBBuild@ptrb
  4955                           
  4956                           ;i2c2.c: 700: ptrb->address = address << 1;
  4957  0D72  0824               	movf	I2C2_MasterReadTRBBuild@address+1,w
  4958  0D73  00A6               	movwf	??_I2C2_MasterReadTRBBuild+1
  4959  0D74  0823               	movf	I2C2_MasterReadTRBBuild@address,w
  4960  0D75  00A5               	movwf	??_I2C2_MasterReadTRBBuild
  4961  0D76  35A5               	lslf	??_I2C2_MasterReadTRBBuild,f
  4962  0D77  0DA6               	rlf	??_I2C2_MasterReadTRBBuild+1,f
  4963  0D78  0827               	movf	I2C2_MasterReadTRBBuild@ptrb,w
  4964  0D79  0086               	movwf	6
  4965  0D7A  0187               	clrf	7
  4966  0D7B  0825               	movf	??_I2C2_MasterReadTRBBuild,w
  4967  0D7C  3FC0               	movwi [0]fsr1
  4968  0D7D  0826               	movf	??_I2C2_MasterReadTRBBuild+1,w
  4969  0D7E  3FC1               	movwi [1]fsr1
  4970                           
  4971                           ;i2c2.c: 702: ptrb->address |= 0x01;
  4972  0D7F  0827               	movf	I2C2_MasterReadTRBBuild@ptrb,w
  4973  0D80  0086               	movwf	6
  4974  0D81  0187               	clrf	7
  4975  0D82  3001               	movlw	1
  4976  0D83  0481               	iorwf	1,f
  4977  0D84  3141               	addfsr 1,1
  4978  0D85  3000               	movlw	0
  4979  0D86  0481               	iorwf	1,f
  4980                           
  4981                           ;i2c2.c: 703: ptrb->length = length;
  4982  0D87  0822               	movf	I2C2_MasterReadTRBBuild@length,w
  4983  0D88  00A5               	movwf	??_I2C2_MasterReadTRBBuild
  4984  0D89  0827               	movf	I2C2_MasterReadTRBBuild@ptrb,w
  4985  0D8A  3E02               	addlw	2
  4986  0D8B  0086               	movwf	6
  4987  0D8C  0187               	clrf	7
  4988  0D8D  0825               	movf	??_I2C2_MasterReadTRBBuild,w
  4989  0D8E  0081               	movwf	1
  4990                           
  4991                           ;i2c2.c: 704: ptrb->pbuffer = pdata;
  4992  0D8F  0821               	movf	I2C2_MasterReadTRBBuild@pdata,w
  4993  0D90  00A5               	movwf	??_I2C2_MasterReadTRBBuild
  4994  0D91  0827               	movf	I2C2_MasterReadTRBBuild@ptrb,w
  4995  0D92  3E03               	addlw	3
  4996  0D93  0086               	movwf	6
  4997  0D94  0187               	clrf	7
  4998  0D95  0825               	movf	??_I2C2_MasterReadTRBBuild,w
  4999  0D96  0081               	movwf	1
  5000  0D97  0008               	return
  5001  0D98                     __end_of_I2C2_MasterReadTRBBuild:	
  5002                           
  5003                           	psect	text13
  5004  0FA2                     __ptext13:	
  5005 ;; *************** function _PROTOCOL_I2C_Send_int8_t *****************
  5006 ;; Defined at:
  5007 ;;		line 297 in file "protocol.c"
  5008 ;; Parameters:    Size  Location     Type
  5009 ;;  length          1    wreg     unsigned char 
  5010 ;;  pbuffer         1   41[BANK0 ] PTR char 
  5011 ;;		 -> PROTOCOL_Send_int8_t@pbuf(1), inv_handler@data(2), 
  5012 ;; Auto vars:     Size  Location     Type
  5013 ;;  length          1   44[BANK0 ] unsigned char 
  5014 ;; Return value:  Size  Location     Type
  5015 ;;                  1    wreg      void 
  5016 ;; Registers used:
  5017 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5018 ;; Tracked objects:
  5019 ;;		On entry : 0/0
  5020 ;;		On exit  : 0/0
  5021 ;;		Unchanged: 0/0
  5022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5023 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5024 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5025 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5026 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5027 ;;Total ram usage:        4 bytes
  5028 ;; Hardware stack levels used:    1
  5029 ;; Hardware stack levels required when called:    8
  5030 ;; This function calls:
  5031 ;;		_PROTOCOL_I2C_Set_TLV
  5032 ;;		_printf
  5033 ;; This function is called by:
  5034 ;;		_inv_handler
  5035 ;; This function uses a non-reentrant model
  5036 ;;
  5037                           
  5038                           
  5039                           ;psect for function _PROTOCOL_I2C_Send_int8_t
  5040  0FA2                     _PROTOCOL_I2C_Send_int8_t:	
  5041                           
  5042                           ;incstack = 0
  5043                           ; Regs used in _PROTOCOL_I2C_Send_int8_t: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5044                           ;PROTOCOL_I2C_Send_int8_t@length stored from wreg
  5045  0FA2  0020               	movlb	0	; select bank0
  5046  0FA3  00CC               	movwf	PROTOCOL_I2C_Send_int8_t@length
  5047                           
  5048                           ;protocol.c: 298: if (backplane_slave_enabled) {
  5049  0FA4  0021               	movlb	1	; select bank1
  5050  0FA5  0837               	movf	_backplane_slave_enabled^(0+128),w
  5051  0FA6  1903               	btfsc	3,2
  5052  0FA7  2FCE               	goto	l4227
  5053                           
  5054                           ;protocol.c: 299: for (i=0; i<length; i++) {
  5055  0FA8  0020               	movlb	0	; select bank0
  5056  0FA9  01E2               	clrf	_i
  5057  0FAA                     l4223:	
  5058  0FAA  084C               	movf	PROTOCOL_I2C_Send_int8_t@length,w
  5059  0FAB  0262               	subwf	_i,w
  5060  0FAC  1803               	btfsc	3,0
  5061  0FAD  2FC2               	goto	l4225
  5062                           
  5063                           ;protocol.c: 300: sendbuf[i] = (uint8_t)pbuffer[i];
  5064  0FAE  0862               	movf	_i,w
  5065  0FAF  0749               	addwf	PROTOCOL_I2C_Send_int8_t@pbuffer,w
  5066  0FB0  00CA               	movwf	??_PROTOCOL_I2C_Send_int8_t
  5067  0FB1  084A               	movf	??_PROTOCOL_I2C_Send_int8_t,w
  5068  0FB2  0086               	movwf	6
  5069  0FB3  0187               	clrf	7
  5070  0FB4  0801               	movf	1,w
  5071  0FB5  00CB               	movwf	??_PROTOCOL_I2C_Send_int8_t+1
  5072  0FB6  0862               	movf	_i,w
  5073  0FB7  3E58               	addlw	(low (_sendbuf| (0+256)))& (0+255)
  5074  0FB8  0086               	movwf	6
  5075  0FB9  3001               	movlw	1	; select bank2/3
  5076  0FBA  0087               	movwf	7
  5077  0FBB  084B               	movf	??_PROTOCOL_I2C_Send_int8_t+1,w
  5078  0FBC  0081               	movwf	1
  5079  0FBD  3001               	movlw	1
  5080  0FBE  00CA               	movwf	??_PROTOCOL_I2C_Send_int8_t
  5081  0FBF  084A               	movf	??_PROTOCOL_I2C_Send_int8_t,w
  5082  0FC0  07E2               	addwf	_i,f
  5083  0FC1  2FAA               	goto	l4223
  5084  0FC2                     l4225:	
  5085                           
  5086                           ;protocol.c: 301: }
  5087                           ;protocol.c: 302: PROTOCOL_I2C_Set_TLV(0x02, length, &sendbuf[0]);
  5088  0FC2  084C               	movf	PROTOCOL_I2C_Send_int8_t@length,w
  5089  0FC3  00CA               	movwf	??_PROTOCOL_I2C_Send_int8_t
  5090  0FC4  084A               	movf	??_PROTOCOL_I2C_Send_int8_t,w
  5091  0FC5  00A1               	movwf	PROTOCOL_I2C_Set_TLV@length
  5092  0FC6  3058               	movlw	low _sendbuf
  5093  0FC7  00A2               	movwf	PROTOCOL_I2C_Set_TLV@pbuffer
  5094  0FC8  3001               	movlw	high _sendbuf
  5095  0FC9  00A3               	movwf	PROTOCOL_I2C_Set_TLV@pbuffer+1
  5096  0FCA  3002               	movlw	2
  5097  0FCB  318C  24B9         	fcall	_PROTOCOL_I2C_Set_TLV
  5098                           
  5099                           ;protocol.c: 303: } else {
  5100  0FCD  0008               	return
  5101  0FCE                     l4227:	
  5102                           
  5103                           ;protocol.c: 304: length--;
  5104  0FCE  3001               	movlw	1
  5105  0FCF  0020               	movlb	0	; select bank0
  5106  0FD0  02CC               	subwf	PROTOCOL_I2C_Send_int8_t@length,f
  5107                           
  5108                           ;protocol.c: 305: for (i=0; i<length; i++) printf("%d,", (int8_t)pbuffer[i]);
  5109  0FD1  01E2               	clrf	_i
  5110  0FD2                     l4235:	
  5111  0FD2  084C               	movf	PROTOCOL_I2C_Send_int8_t@length,w
  5112  0FD3  0262               	subwf	_i,w
  5113  0FD4  1803               	btfsc	3,0
  5114  0FD5  2FEE               	goto	l4237
  5115  0FD6  3095               	movlw	low (STR_22| (0+32768))
  5116  0FD7  00B5               	movwf	printf@f
  5117  0FD8  3086               	movlw	high (STR_22| (0+32768))
  5118  0FD9  00B6               	movwf	printf@f+1
  5119  0FDA  0862               	movf	_i,w
  5120  0FDB  0749               	addwf	PROTOCOL_I2C_Send_int8_t@pbuffer,w
  5121  0FDC  00CA               	movwf	??_PROTOCOL_I2C_Send_int8_t
  5122  0FDD  084A               	movf	??_PROTOCOL_I2C_Send_int8_t,w
  5123  0FDE  0086               	movwf	6
  5124  0FDF  0187               	clrf	7
  5125  0FE0  0801               	movf	1,w
  5126  0FE1  00B7               	movwf	?_printf+2
  5127  0FE2  01B8               	clrf	?_printf+3
  5128  0FE3  1BB7               	btfsc	?_printf+2,7
  5129  0FE4  03B8               	decf	?_printf+3,f
  5130  0FE5  3180  2081  318F   	fcall	_printf
  5131  0FE8  3001               	movlw	1
  5132  0FE9  0020               	movlb	0	; select bank0
  5133  0FEA  00CA               	movwf	??_PROTOCOL_I2C_Send_int8_t
  5134  0FEB  084A               	movf	??_PROTOCOL_I2C_Send_int8_t,w
  5135  0FEC  07E2               	addwf	_i,f
  5136  0FED  2FD2               	goto	l4235
  5137  0FEE                     l4237:	
  5138                           
  5139                           ;protocol.c: 306: printf("%d\n", (int8_t)pbuffer[i]);
  5140  0FEE  301C               	movlw	low ((STR_16+6)| (0+32768))
  5141  0FEF  00B5               	movwf	printf@f
  5142  0FF0  3086               	movlw	high ((STR_16+6)| (0+32768))
  5143  0FF1  00B6               	movwf	printf@f+1
  5144  0FF2  0862               	movf	_i,w
  5145  0FF3  0749               	addwf	PROTOCOL_I2C_Send_int8_t@pbuffer,w
  5146  0FF4  00CA               	movwf	??_PROTOCOL_I2C_Send_int8_t
  5147  0FF5  084A               	movf	??_PROTOCOL_I2C_Send_int8_t,w
  5148  0FF6  0086               	movwf	6
  5149  0FF7  0187               	clrf	7
  5150  0FF8  0801               	movf	1,w
  5151  0FF9  00B7               	movwf	?_printf+2
  5152  0FFA  01B8               	clrf	?_printf+3
  5153  0FFB  1BB7               	btfsc	?_printf+2,7
  5154  0FFC  03B8               	decf	?_printf+3,f
  5155  0FFD  3180  2081         	fcall	_printf
  5156  0FFF  0008               	return
  5157  1000                     __end_of_PROTOCOL_I2C_Send_int8_t:	
  5158                           
  5159                           	psect	text14
  5160  0081                     __ptext14:	
  5161 ;; *************** function _printf *****************
  5162 ;; Defined at:
  5163 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  5164 ;; Parameters:    Size  Location     Type
  5165 ;;  f               2   21[BANK0 ] PTR const unsigned char 
  5166 ;;		 -> STR_48(10), STR_47(9), STR_46(10), STR_45(9), 
  5167 ;;		 -> STR_44(4), STR_43(4), STR_42(4), STR_41(4), 
  5168 ;;		 -> STR_40(4), STR_39(4), STR_38(4), STR_37(4), 
  5169 ;;		 -> STR_36(14), STR_35(9), STR_34(10), STR_33(9), 
  5170 ;;		 -> STR_32(10), STR_31(9), STR_30(7), STR_29(4), 
  5171 ;;		 -> STR_28(4), STR_27(9), STR_26(4), STR_25(4), 
  5172 ;;		 -> STR_24(10), STR_23(4), STR_22(4), STR_21(8), 
  5173 ;;		 -> STR_20(4), STR_19(4), STR_18(9), STR_17(6), 
  5174 ;;		 -> STR_16(10), STR_13(10), STR_9(10), STR_5(10), 
  5175 ;;		 -> STR_3(5), 
  5176 ;; Auto vars:     Size  Location     Type
  5177 ;;  tmpval          4    0        struct .
  5178 ;;  width           2   38[BANK0 ] int 
  5179 ;;  len             2   35[BANK0 ] unsigned int 
  5180 ;;  val             2   33[BANK0 ] unsigned int 
  5181 ;;  cp              2   30[BANK0 ] PTR const unsigned char 
  5182 ;;		 -> STR_10(4), buf(48), STR_2(7), ROM(8192), 
  5183 ;;		 -> printf@c(1), STR_1(10), I2C2_ISR@i2c_address(2), 
  5184 ;;  c               1   40[BANK0 ] char 
  5185 ;;  flag            1   37[BANK0 ] unsigned char 
  5186 ;;  ap              1   32[BANK0 ] PTR void [1]
  5187 ;;		 -> ?_printf(2), 
  5188 ;;  prec            1   29[BANK0 ] char 
  5189 ;; Return value:  Size  Location     Type
  5190 ;;                  2   21[BANK0 ] int 
  5191 ;; Registers used:
  5192 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5193 ;; Tracked objects:
  5194 ;;		On entry : 0/0
  5195 ;;		On exit  : 0/0
  5196 ;;		Unchanged: 0/0
  5197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5198 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5199 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5200 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5201 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5202 ;;Total ram usage:       20 bytes
  5203 ;; Hardware stack levels used:    1
  5204 ;; Hardware stack levels required when called:    7
  5205 ;; This function calls:
  5206 ;;		___lwdiv
  5207 ;;		___lwmod
  5208 ;;		___wmul
  5209 ;;		_isdigit
  5210 ;;		_putch
  5211 ;; This function is called by:
  5212 ;;		_PROTOCOL_Loop
  5213 ;;		_PROTOCOL_I2C_Send_int8_t
  5214 ;; This function uses a non-reentrant model
  5215 ;;
  5216                           
  5217                           
  5218                           ;psect for function _printf
  5219  0081                     _printf:	
  5220                           
  5221                           ;doprnt.c: 466: va_list ap;
  5222                           ;doprnt.c: 499: signed char c;
  5223                           ;doprnt.c: 501: int width;
  5224                           ;doprnt.c: 506: signed char prec;
  5225                           ;doprnt.c: 508: unsigned char flag;
  5226                           ;doprnt.c: 523: union {
  5227                           ;doprnt.c: 524: unsigned long vd;
  5228                           ;doprnt.c: 525: double integ;
  5229                           ;doprnt.c: 526: } tmpval;
  5230                           ;doprnt.c: 528: unsigned int val;
  5231                           ;doprnt.c: 529: unsigned len;
  5232                           ;doprnt.c: 530: const char * cp;
  5233                           ;doprnt.c: 533: *ap = __va_start();
  5234                           
  5235                           ;incstack = 0
  5236                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5237  0081  3037               	movlw	(low ((?_printf| 0+2)))& (0+255)
  5238  0082  0020               	movlb	0	; select bank0
  5239  0083  00B9               	movwf	??_printf
  5240  0084  0839               	movf	??_printf,w
  5241  0085  00C0               	movwf	printf@ap
  5242  0086                     l4147:	
  5243                           ;doprnt.c: 536: while(c = *f++) {
  5244                           
  5245  0086  0020               	movlb	0	; select bank0
  5246  0087  0836               	movf	printf@f+1,w
  5247  0088  00BA               	movwf	??_printf+1
  5248  0089  0835               	movf	printf@f,w
  5249  008A  00B9               	movwf	??_printf
  5250  008B  0AB5               	incf	printf@f,f
  5251  008C  1903               	skipnz
  5252  008D  0AB6               	incf	printf@f+1,f
  5253  008E  0839               	movf	??_printf,w
  5254  008F  0084               	movwf	4
  5255  0090  083A               	movf	??_printf+1,w
  5256  0091  0085               	movwf	5
  5257  0092  0800               	movf	0,w	;code access
  5258  0093  00BB               	movwf	??_printf+2
  5259  0094  083B               	movf	??_printf+2,w
  5260  0095  00C8               	movwf	printf@c
  5261  0096  0848               	movf	printf@c,w
  5262  0097  1903               	btfsc	3,2
  5263  0098  0008               	return
  5264                           
  5265                           ;doprnt.c: 538: if(c != '%')
  5266  0099  3025               	movlw	37
  5267  009A  0648               	xorwf	printf@c,w
  5268  009B  1903               	btfsc	3,2
  5269  009C  28A2               	goto	l4023
  5270                           
  5271                           ;doprnt.c: 540: {
  5272                           ;doprnt.c: 541: (putch(c) );
  5273  009D  0848               	movf	printf@c,w
  5274  009E  318A  22FB  3180   	fcall	_putch
  5275                           
  5276                           ;doprnt.c: 542: continue;
  5277  00A1  2886               	goto	l4147
  5278  00A2                     l4023:	
  5279                           
  5280                           ;doprnt.c: 543: }
  5281                           ;doprnt.c: 546: width = 0;
  5282  00A2  0020               	movlb	0	; select bank0
  5283  00A3  01C6               	clrf	printf@width
  5284  00A4  01C7               	clrf	printf@width+1
  5285                           
  5286                           ;doprnt.c: 548: flag = 0;
  5287  00A5  01C5               	clrf	printf@flag
  5288                           
  5289                           ;doprnt.c: 551: switch(*f) {
  5290                           
  5291                           ;doprnt.c: 550: for(;;) {
  5292  00A6  28AC               	goto	l4029
  5293  00A7                     l565:	
  5294                           ;doprnt.c: 579: case '0':
  5295                           
  5296                           
  5297                           ;doprnt.c: 580: flag |= 0x04;
  5298  00A7  1545               	bsf	printf@flag,2
  5299                           
  5300                           ;doprnt.c: 581: f++;
  5301  00A8  3001               	movlw	1
  5302  00A9  07B5               	addwf	printf@f,f
  5303  00AA  3000               	movlw	0
  5304  00AB  3DB6               	addwfc	printf@f+1,f
  5305  00AC                     l4029:	
  5306                           ;doprnt.c: 584: }
  5307                           
  5308                           ;doprnt.c: 582: continue;
  5309                           
  5310  00AC  0835               	movf	printf@f,w
  5311  00AD  0084               	movwf	4
  5312  00AE  0836               	movf	printf@f+1,w
  5313  00AF  0085               	movwf	5
  5314  00B0  0800               	movf	0,w	;code access
  5315                           
  5316                           ; Switch size 1, requested type "space"
  5317                           ; Number of cases is 1, Range of values is 48 to 48
  5318                           ; switch strategies available:
  5319                           ; Name         Instructions Cycles
  5320                           ; simple_byte            4     3 (average)
  5321                           ; direct_byte           11     9 (fixed)
  5322                           ; jumptable            263     9 (fixed)
  5323                           ;	Chosen strategy is simple_byte
  5324  00B1  3A30               	xorlw	48	; case 48
  5325  00B2  1903               	skipnz
  5326  00B3  28A7               	goto	l565
  5327  00B4  28B5               	goto	l4031
  5328  00B5                     l4031:	
  5329                           ;doprnt.c: 586: }
  5330                           
  5331                           ;doprnt.c: 585: break;
  5332                           
  5333                           
  5334                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5335  00B5  0835               	movf	printf@f,w
  5336  00B6  0084               	movwf	4
  5337  00B7  0836               	movf	printf@f+1,w
  5338  00B8  0085               	movwf	5
  5339  00B9  0800               	movf	0,w	;code access
  5340  00BA  318B  233E  3180   	fcall	_isdigit
  5341  00BD  1C03               	btfss	3,0
  5342  00BE  2956               	goto	l4079
  5343                           
  5344                           ;doprnt.c: 598: width = 0;
  5345  00BF  0020               	movlb	0	; select bank0
  5346  00C0  01C6               	clrf	printf@width
  5347  00C1  01C7               	clrf	printf@width+1
  5348  00C2                     l4035:	
  5349                           ;doprnt.c: 599: do {
  5350                           
  5351                           
  5352                           ;doprnt.c: 600: width *= 10;
  5353  00C2  300A               	movlw	10
  5354  00C3  0020               	movlb	0	; select bank0
  5355  00C4  00A1               	movwf	___wmul@multiplier
  5356  00C5  3000               	movlw	0
  5357  00C6  00A2               	movwf	___wmul@multiplier+1
  5358  00C7  0847               	movf	printf@width+1,w
  5359  00C8  00A4               	movwf	___wmul@multiplicand+1
  5360  00C9  0846               	movf	printf@width,w
  5361  00CA  00A3               	movwf	___wmul@multiplicand
  5362  00CB  318C  2401  3180   	fcall	___wmul
  5363  00CE  0020               	movlb	0	; select bank0
  5364  00CF  0822               	movf	?___wmul+1,w
  5365  00D0  00C7               	movwf	printf@width+1
  5366  00D1  0821               	movf	?___wmul,w
  5367  00D2  00C6               	movwf	printf@width
  5368                           
  5369                           ;doprnt.c: 601: width += *f++ - '0';
  5370  00D3  0835               	movf	printf@f,w
  5371  00D4  0084               	movwf	4
  5372  00D5  0836               	movf	printf@f+1,w
  5373  00D6  0085               	movwf	5
  5374  00D7  0800               	movf	0,w	;code access
  5375  00D8  3ED0               	addlw	208
  5376  00D9  00B9               	movwf	??_printf
  5377  00DA  30FF               	movlw	255
  5378  00DB  1803               	skipnc
  5379  00DC  3000               	movlw	0
  5380  00DD  00BA               	movwf	??_printf+1
  5381  00DE  0839               	movf	??_printf,w
  5382  00DF  07C6               	addwf	printf@width,f
  5383  00E0  083A               	movf	??_printf+1,w
  5384  00E1  3DC7               	addwfc	printf@width+1,f
  5385  00E2  3001               	movlw	1
  5386  00E3  07B5               	addwf	printf@f,f
  5387  00E4  3000               	movlw	0
  5388  00E5  3DB6               	addwfc	printf@f+1,f
  5389                           
  5390                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5391  00E6  0835               	movf	printf@f,w
  5392  00E7  0084               	movwf	4
  5393  00E8  0836               	movf	printf@f+1,w
  5394  00E9  0085               	movwf	5
  5395  00EA  0800               	movf	0,w	;code access
  5396  00EB  318B  233E  3180   	fcall	_isdigit
  5397  00EE  1C03               	btfss	3,0
  5398  00EF  2956               	goto	l4079
  5399  00F0  28C2               	goto	l4035
  5400  00F1                     l4043:	
  5401                           ;doprnt.c: 728: case 's':
  5402                           
  5403                           ;doprnt.c: 698: case 'i':
  5404                           ;doprnt.c: 699: break;
  5405                           
  5406                           ;doprnt.c: 697: case 'd':
  5407                           
  5408                           ;doprnt.c: 638: goto alldone;
  5409                           
  5410                           ;doprnt.c: 637: case 0:
  5411                           
  5412                           ;doprnt.c: 608: }
  5413                           ;doprnt.c: 635: switch(c = *f++) {
  5414                           
  5415                           
  5416                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  5417  00F1  0020               	movlb	0	; select bank0
  5418  00F2  0840               	movf	printf@ap,w
  5419  00F3  0086               	movwf	6
  5420  00F4  0187               	clrf	7
  5421  00F5  3F40               	moviw [0]fsr1
  5422  00F6  00BE               	movwf	printf@cp
  5423  00F7  3F41               	moviw [1]fsr1
  5424  00F8  00BF               	movwf	printf@cp+1
  5425  00F9  3002               	movlw	2
  5426  00FA  00B9               	movwf	??_printf
  5427  00FB  0839               	movf	??_printf,w
  5428  00FC  07C0               	addwf	printf@ap,f
  5429                           
  5430                           ;doprnt.c: 740: if(!cp)
  5431  00FD  083E               	movf	printf@cp,w
  5432  00FE  043F               	iorwf	printf@cp+1,w
  5433  00FF  1D03               	btfss	3,2
  5434  0100  2905               	goto	l4051
  5435                           
  5436                           ;doprnt.c: 741: cp = "(null)";
  5437  0101  307F               	movlw	low (STR_2| (0+32768))
  5438  0102  00BE               	movwf	printf@cp
  5439  0103  3086               	movlw	high (STR_2| (0+32768))
  5440  0104  00BF               	movwf	printf@cp+1
  5441  0105                     l4051:	
  5442                           
  5443                           ;doprnt.c: 745: len = 0;
  5444  0105  01C3               	clrf	printf@len
  5445  0106  01C4               	clrf	printf@len+1
  5446  0107                     l4055:	
  5447                           ;doprnt.c: 746: while(cp[len])
  5448                           
  5449  0107  083E               	movf	printf@cp,w
  5450  0108  0743               	addwf	printf@len,w
  5451  0109  0084               	movwf	4
  5452  010A  083F               	movf	printf@cp+1,w
  5453  010B  3D44               	addwfc	printf@len+1,w
  5454  010C  0085               	movwf	5
  5455  010D  0012               	moviw fsr0++
  5456  010E  1903               	btfsc	3,2
  5457  010F  2915               	goto	l4057
  5458                           
  5459                           ;doprnt.c: 747: len++;
  5460  0110  3001               	movlw	1
  5461  0111  07C3               	addwf	printf@len,f
  5462  0112  3000               	movlw	0
  5463  0113  3DC4               	addwfc	printf@len+1,f
  5464  0114  2907               	goto	l4055
  5465  0115                     l4057:	
  5466                           ;doprnt.c: 750: dostring:
  5467                           
  5468                           
  5469                           ;doprnt.c: 757: if(width > len)
  5470  0115  0847               	movf	printf@width+1,w
  5471  0116  0244               	subwf	printf@len+1,w
  5472  0117  1D03               	skipz
  5473  0118  291B               	goto	u3275
  5474  0119  0846               	movf	printf@width,w
  5475  011A  0243               	subwf	printf@len,w
  5476  011B                     u3275:	
  5477  011B  1803               	skipnc
  5478  011C  2922               	goto	l4061
  5479                           
  5480                           ;doprnt.c: 758: width -= len;
  5481  011D  0843               	movf	printf@len,w
  5482  011E  02C6               	subwf	printf@width,f
  5483  011F  0844               	movf	printf@len+1,w
  5484  0120  3BC7               	subwfb	printf@width+1,f
  5485  0121  2924               	goto	l4065
  5486  0122                     l4061:	
  5487                           
  5488                           ;doprnt.c: 759: else
  5489                           ;doprnt.c: 760: width = 0;
  5490  0122  01C6               	clrf	printf@width
  5491  0123  01C7               	clrf	printf@width+1
  5492  0124                     l4065:	
  5493                           ;doprnt.c: 764: while(width--)
  5494                           
  5495  0124  30FF               	movlw	255
  5496  0125  0020               	movlb	0	; select bank0
  5497  0126  07C6               	addwf	printf@width,f
  5498  0127  30FF               	movlw	255
  5499  0128  3DC7               	addwfc	printf@width+1,f
  5500  0129  0A46               	incf	printf@width,w
  5501  012A  1903               	btfsc	3,2
  5502  012B  0A47               	incf	printf@width+1,w
  5503  012C  1903               	btfsc	3,2
  5504  012D  2940               	goto	l4071
  5505                           
  5506                           ;doprnt.c: 765: (putch(' ') );
  5507  012E  3020               	movlw	32
  5508  012F  318A  22FB  3180   	fcall	_putch
  5509  0132  2924               	goto	l4065
  5510  0133                     l4067:	
  5511                           ;doprnt.c: 767: while(len--)
  5512                           
  5513                           
  5514                           ;doprnt.c: 768: (putch(*cp++) );
  5515  0133  083E               	movf	printf@cp,w
  5516  0134  0084               	movwf	4
  5517  0135  083F               	movf	printf@cp+1,w
  5518  0136  0085               	movwf	5
  5519  0137  0800               	movf	0,w	;code access
  5520  0138  318A  22FB  3180   	fcall	_putch
  5521  013B  3001               	movlw	1
  5522  013C  0020               	movlb	0	; select bank0
  5523  013D  07BE               	addwf	printf@cp,f
  5524  013E  3000               	movlw	0
  5525  013F  3DBF               	addwfc	printf@cp+1,f
  5526  0140                     l4071:	
  5527  0140  3001               	movlw	1
  5528  0141  02C3               	subwf	printf@len,f
  5529  0142  3000               	movlw	0
  5530  0143  3BC4               	subwfb	printf@len+1,f
  5531  0144  0A43               	incf	printf@len,w
  5532  0145  1D03               	skipz
  5533  0146  2933               	goto	l4067
  5534  0147  0A44               	incf	printf@len+1,w
  5535  0148  1903               	btfsc	3,2
  5536  0149  2886               	goto	l4147
  5537  014A  2933               	goto	l4067
  5538  014B                     l4073:	
  5539                           ;doprnt.c: 802: default:
  5540                           
  5541                           ;doprnt.c: 774: continue;
  5542                           
  5543                           
  5544                           ;doprnt.c: 805: cp = (char *)&c;
  5545  014B  3048               	movlw	low printf@c
  5546  014C  00BE               	movwf	printf@cp
  5547  014D  3000               	movlw	high printf@c
  5548  014E  00BF               	movwf	printf@cp+1
  5549                           
  5550                           ;doprnt.c: 806: len = 1;
  5551  014F  3001               	movlw	1
  5552  0150  00C3               	movwf	printf@len
  5553  0151  3000               	movlw	0
  5554  0152  00C4               	movwf	printf@len+1
  5555                           
  5556                           ;doprnt.c: 807: goto dostring;
  5557  0153  2915               	goto	l4057
  5558  0154                     l593:	
  5559                           ;doprnt.c: 817: case 'u':
  5560                           
  5561                           
  5562                           ;doprnt.c: 818: flag |= 0x40;
  5563  0154  1745               	bsf	printf@flag,6
  5564                           
  5565                           ;doprnt.c: 822: }
  5566                           
  5567                           ;doprnt.c: 819: break;
  5568  0155  2974               	goto	l577
  5569  0156                     l4079:	
  5570  0156  0020               	movlb	0	; select bank0
  5571  0157  0836               	movf	printf@f+1,w
  5572  0158  00BA               	movwf	??_printf+1
  5573  0159  0835               	movf	printf@f,w
  5574  015A  00B9               	movwf	??_printf
  5575  015B  0AB5               	incf	printf@f,f
  5576  015C  1903               	skipnz
  5577  015D  0AB6               	incf	printf@f+1,f
  5578  015E  0839               	movf	??_printf,w
  5579  015F  0084               	movwf	4
  5580  0160  083A               	movf	??_printf+1,w
  5581  0161  0085               	movwf	5
  5582  0162  0800               	movf	0,w	;code access
  5583  0163  00C8               	movwf	printf@c
  5584                           
  5585                           ; Switch size 1, requested type "space"
  5586                           ; Number of cases is 5, Range of values is 0 to 117
  5587                           ; switch strategies available:
  5588                           ; Name         Instructions Cycles
  5589                           ; simple_byte           16     9 (average)
  5590                           ; direct_byte          242     6 (fixed)
  5591                           ; jumptable            260     6 (fixed)
  5592                           ;	Chosen strategy is simple_byte
  5593  0164  3A00               	xorlw	0	; case 0
  5594  0165  1903               	skipnz
  5595  0166  2A55               	goto	l617
  5596  0167  3A64               	xorlw	100	; case 100
  5597  0168  1903               	skipnz
  5598  0169  2974               	goto	l577
  5599  016A  3A0D               	xorlw	13	; case 105
  5600  016B  1903               	skipnz
  5601  016C  2974               	goto	l577
  5602  016D  3A1A               	xorlw	26	; case 115
  5603  016E  1903               	skipnz
  5604  016F  28F1               	goto	l4043
  5605  0170  3A06               	xorlw	6	; case 117
  5606  0171  1903               	skipnz
  5607  0172  2954               	goto	l593
  5608  0173  294B               	goto	l4073
  5609  0174                     l577:	
  5610                           
  5611                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  5612  0174  0020               	movlb	0	; select bank0
  5613  0175  1B45               	btfsc	printf@flag,6
  5614  0176  298E               	goto	l4091
  5615                           
  5616                           ;doprnt.c: 1253: {
  5617                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5618  0177  0840               	movf	printf@ap,w
  5619  0178  0086               	movwf	6
  5620  0179  0187               	clrf	7
  5621  017A  3F40               	moviw [0]fsr1
  5622  017B  00C1               	movwf	printf@val
  5623  017C  3F41               	moviw [1]fsr1
  5624  017D  00C2               	movwf	printf@val+1
  5625  017E  3002               	movlw	2
  5626  017F  00B9               	movwf	??_printf
  5627  0180  0839               	movf	??_printf,w
  5628  0181  07C0               	addwf	printf@ap,f
  5629                           
  5630                           ;doprnt.c: 1261: if((int)val < 0) {
  5631  0182  1FC2               	btfss	printf@val+1,7
  5632  0183  2999               	goto	l4095
  5633                           
  5634                           ;doprnt.c: 1262: flag |= 0x03;
  5635  0184  3003               	movlw	3
  5636  0185  00B9               	movwf	??_printf
  5637  0186  0839               	movf	??_printf,w
  5638  0187  04C5               	iorwf	printf@flag,f
  5639                           
  5640                           ;doprnt.c: 1263: val = -val;
  5641  0188  09C1               	comf	printf@val,f
  5642  0189  09C2               	comf	printf@val+1,f
  5643  018A  0AC1               	incf	printf@val,f
  5644  018B  1903               	skipnz
  5645  018C  0AC2               	incf	printf@val+1,f
  5646                           
  5647                           ;doprnt.c: 1264: }
  5648                           ;doprnt.c: 1266: }
  5649  018D  2999               	goto	l4095
  5650  018E                     l4091:	
  5651                           
  5652                           ;doprnt.c: 1268: else
  5653                           ;doprnt.c: 1273: {
  5654                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5655  018E  0840               	movf	printf@ap,w
  5656  018F  0086               	movwf	6
  5657  0190  0187               	clrf	7
  5658  0191  3F40               	moviw [0]fsr1
  5659  0192  00C1               	movwf	printf@val
  5660  0193  3F41               	moviw [1]fsr1
  5661  0194  00C2               	movwf	printf@val+1
  5662  0195  3002               	movlw	2
  5663  0196  00B9               	movwf	??_printf
  5664  0197  0839               	movf	??_printf,w
  5665  0198  07C0               	addwf	printf@ap,f
  5666  0199                     l4095:	
  5667                           
  5668                           ;doprnt.c: 1287: }
  5669                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5670  0199  01C8               	clrf	printf@c
  5671  019A  0AC8               	incf	printf@c,f
  5672  019B  3005               	movlw	5
  5673  019C  0648               	xorwf	printf@c,w
  5674  019D  1903               	btfsc	3,2
  5675  019E  29BE               	goto	l4107
  5676  019F                     l4101:	
  5677                           
  5678                           ;doprnt.c: 1306: if(val < dpowers[c])
  5679  019F  0848               	movf	printf@c,w
  5680  01A0  00B9               	movwf	??_printf
  5681  01A1  01BA               	clrf	??_printf+1
  5682  01A2  35B9               	lslf	??_printf,f
  5683  01A3  0DBA               	rlf	??_printf+1,f
  5684  01A4  30FC               	movlw	low (_dpowers| (0+32768))
  5685  01A5  0739               	addwf	??_printf,w
  5686  01A6  0084               	movwf	4
  5687  01A7  3085               	movlw	high (_dpowers| (0+32768))
  5688  01A8  3D3A               	addwfc	??_printf+1,w
  5689  01A9  0085               	movwf	5
  5690  01AA  3F00               	moviw [0]fsr0
  5691  01AB  00BB               	movwf	??_printf+2
  5692  01AC  3F01               	moviw [1]fsr0
  5693  01AD  00BC               	movwf	??_printf+3
  5694  01AE  083C               	movf	??_printf+3,w
  5695  01AF  0242               	subwf	printf@val+1,w
  5696  01B0  1D03               	skipz
  5697  01B1  29B4               	goto	u3335
  5698  01B2  083B               	movf	??_printf+2,w
  5699  01B3  0241               	subwf	printf@val,w
  5700  01B4                     u3335:	
  5701  01B4  1C03               	btfss	3,0
  5702  01B5  29BE               	goto	l4107
  5703                           
  5704                           ;doprnt.c: 1307: break;
  5705  01B6  3001               	movlw	1
  5706  01B7  00B9               	movwf	??_printf
  5707  01B8  0839               	movf	??_printf,w
  5708  01B9  07C8               	addwf	printf@c,f
  5709  01BA  3005               	movlw	5
  5710  01BB  0648               	xorwf	printf@c,w
  5711  01BC  1D03               	btfss	3,2
  5712  01BD  299F               	goto	l4101
  5713  01BE                     l4107:	
  5714                           
  5715                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5716  01BE  0846               	movf	printf@width,w
  5717  01BF  0447               	iorwf	printf@width+1,w
  5718  01C0  1903               	btfsc	3,2
  5719  01C1  29CA               	goto	l600
  5720  01C2  0845               	movf	printf@flag,w
  5721  01C3  3903               	andlw	3
  5722  01C4  1903               	btfsc	3,2
  5723  01C5  29CA               	goto	l600
  5724                           
  5725                           ;doprnt.c: 1346: width--;
  5726  01C6  30FF               	movlw	255
  5727  01C7  07C6               	addwf	printf@width,f
  5728  01C8  30FF               	movlw	255
  5729  01C9  3DC7               	addwfc	printf@width+1,f
  5730  01CA                     l600:	
  5731                           
  5732                           ;doprnt.c: 1381: if(width > c)
  5733  01CA  0848               	movf	printf@c,w
  5734  01CB  00B9               	movwf	??_printf
  5735  01CC  01BA               	clrf	??_printf+1
  5736  01CD  1BB9               	btfsc	??_printf,7
  5737  01CE  03BA               	decf	??_printf+1,f
  5738  01CF  083A               	movf	??_printf+1,w
  5739  01D0  3A80               	xorlw	128
  5740  01D1  00BB               	movwf	??_printf+2
  5741  01D2  0847               	movf	printf@width+1,w
  5742  01D3  3A80               	xorlw	128
  5743  01D4  023B               	subwf	??_printf+2,w
  5744  01D5  1D03               	skipz
  5745  01D6  29D9               	goto	u3375
  5746  01D7  0846               	movf	printf@width,w
  5747  01D8  0239               	subwf	??_printf,w
  5748  01D9                     u3375:	
  5749  01D9  1803               	skipnc
  5750  01DA  29E6               	goto	l4115
  5751                           
  5752                           ;doprnt.c: 1382: width -= c;
  5753  01DB  0020               	movlb	0	; select bank0
  5754  01DC  0848               	movf	printf@c,w
  5755  01DD  00B9               	movwf	??_printf
  5756  01DE  01BA               	clrf	??_printf+1
  5757  01DF  1BB9               	btfsc	??_printf,7
  5758  01E0  03BA               	decf	??_printf+1,f
  5759  01E1  0839               	movf	??_printf,w
  5760  01E2  02C6               	subwf	printf@width,f
  5761  01E3  083A               	movf	??_printf+1,w
  5762  01E4  3BC7               	subwfb	printf@width+1,f
  5763  01E5  29E9               	goto	l4117
  5764  01E6                     l4115:	
  5765                           
  5766                           ;doprnt.c: 1383: else
  5767                           ;doprnt.c: 1384: width = 0;
  5768  01E6  0020               	movlb	0	; select bank0
  5769  01E7  01C6               	clrf	printf@width
  5770  01E8  01C7               	clrf	printf@width+1
  5771  01E9                     l4117:	
  5772                           
  5773                           ;doprnt.c: 1387: if(flag & 0x04) {
  5774  01E9  1D45               	btfss	printf@flag,2
  5775  01EA  2A02               	goto	l4129
  5776                           
  5777                           ;doprnt.c: 1392: if(flag & 0x03)
  5778  01EB  0845               	movf	printf@flag,w
  5779  01EC  3903               	andlw	3
  5780  01ED  1903               	btfsc	3,2
  5781  01EE  29F3               	goto	l4123
  5782                           
  5783                           ;doprnt.c: 1393: (putch('-') );
  5784  01EF  302D               	movlw	45
  5785  01F0  318A  22FB  3180   	fcall	_putch
  5786  01F3                     l4123:	
  5787                           
  5788                           ;doprnt.c: 1415: if(width)
  5789  01F3  0020               	movlb	0	; select bank0
  5790  01F4                     L2:	
  5791  01F4  0846               	movf	printf@width,w
  5792  01F5  0447               	iorwf	printf@width+1,w
  5793  01F6  1903               	btfsc	3,2
  5794  01F7  2A1B               	goto	l4139
  5795                           
  5796                           ;doprnt.c: 1417: (putch('0') );
  5797                           
  5798                           ;doprnt.c: 1416: do
  5799  01F8  3030               	movlw	48
  5800  01F9  318A  22FB  3180   	fcall	_putch
  5801                           
  5802                           ;doprnt.c: 1418: while(--width);
  5803  01FC  30FF               	movlw	255
  5804  01FD  0020               	movlb	0	; select bank0
  5805  01FE  07C6               	addwf	printf@width,f
  5806  01FF  30FF               	movlw	255
  5807  0200  3DC7               	addwfc	printf@width+1,f
  5808  0201  29F4               	goto	L2
  5809  0202                     l4129:	
  5810                           ;doprnt.c: 1420: } else
  5811                           
  5812                           
  5813                           ;doprnt.c: 1422: {
  5814                           ;doprnt.c: 1424: if(width
  5815                           ;doprnt.c: 1428: )
  5816  0202  0846               	movf	printf@width,w
  5817  0203  0447               	iorwf	printf@width+1,w
  5818  0204  1903               	btfsc	3,2
  5819  0205  2A13               	goto	l4135
  5820  0206                     l4131:	
  5821                           ;doprnt.c: 1429: do
  5822                           
  5823                           
  5824                           ;doprnt.c: 1430: (putch(' ') );
  5825  0206  3020               	movlw	32
  5826  0207  318A  22FB  3180   	fcall	_putch
  5827                           
  5828                           ;doprnt.c: 1431: while(--width);
  5829  020A  30FF               	movlw	255
  5830  020B  0020               	movlb	0	; select bank0
  5831  020C  07C6               	addwf	printf@width,f
  5832  020D  30FF               	movlw	255
  5833  020E  3DC7               	addwfc	printf@width+1,f
  5834  020F  0846               	movf	printf@width,w
  5835  0210  0447               	iorwf	printf@width+1,w
  5836  0211  1D03               	btfss	3,2
  5837  0212  2A06               	goto	l4131
  5838  0213                     l4135:	
  5839                           
  5840                           ;doprnt.c: 1438: if(flag & 0x03)
  5841  0213  0845               	movf	printf@flag,w
  5842  0214  3903               	andlw	3
  5843  0215  1903               	btfsc	3,2
  5844  0216  2A1B               	goto	l4139
  5845                           
  5846                           ;doprnt.c: 1439: (putch('-') );
  5847  0217  302D               	movlw	45
  5848  0218  318A  22FB  3180   	fcall	_putch
  5849  021B                     l4139:	
  5850                           
  5851                           ;doprnt.c: 1469: }
  5852                           ;doprnt.c: 1472: prec = c;
  5853  021B  0020               	movlb	0	; select bank0
  5854  021C  0848               	movf	printf@c,w
  5855  021D  00B9               	movwf	??_printf
  5856  021E  0839               	movf	??_printf,w
  5857  021F  00BD               	movwf	printf@prec
  5858  0220                     l4145:	
  5859                           ;doprnt.c: 1474: while(prec--) {
  5860                           
  5861  0220  30FF               	movlw	255
  5862  0221  0020               	movlb	0	; select bank0
  5863  0222  00B9               	movwf	??_printf
  5864  0223  0839               	movf	??_printf,w
  5865  0224  07BD               	addwf	printf@prec,f
  5866  0225  0A3D               	incf	printf@prec,w
  5867  0226  1903               	btfsc	3,2
  5868  0227  2886               	goto	l4147
  5869                           
  5870                           ;doprnt.c: 1478: {
  5871                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5872  0228  300A               	movlw	10
  5873  0229  00AF               	movwf	___lwmod@divisor
  5874  022A  3000               	movlw	0
  5875  022B  00B0               	movwf	___lwmod@divisor+1
  5876  022C  083D               	movf	printf@prec,w
  5877  022D  00B9               	movwf	??_printf
  5878  022E  01BA               	clrf	??_printf+1
  5879  022F  35B9               	lslf	??_printf,f
  5880  0230  0DBA               	rlf	??_printf+1,f
  5881  0231  30FC               	movlw	low (_dpowers| (0+32768))
  5882  0232  0739               	addwf	??_printf,w
  5883  0233  0084               	movwf	4
  5884  0234  3085               	movlw	high (_dpowers| (0+32768))
  5885  0235  3D3A               	addwfc	??_printf+1,w
  5886  0236  0085               	movwf	5
  5887  0237  3F00               	moviw [0]fsr0
  5888  0238  00A7               	movwf	___lwdiv@divisor
  5889  0239  3F01               	moviw [1]fsr0
  5890  023A  00A8               	movwf	___lwdiv@divisor+1
  5891  023B  0842               	movf	printf@val+1,w
  5892  023C  00AA               	movwf	___lwdiv@dividend+1
  5893  023D  0841               	movf	printf@val,w
  5894  023E  00A9               	movwf	___lwdiv@dividend
  5895  023F  318E  2645  3180   	fcall	___lwdiv
  5896  0242  0020               	movlb	0	; select bank0
  5897  0243  0828               	movf	?___lwdiv+1,w
  5898  0244  00B2               	movwf	___lwmod@dividend+1
  5899  0245  0827               	movf	?___lwdiv,w
  5900  0246  00B1               	movwf	___lwmod@dividend
  5901  0247  318E  2618  3180   	fcall	___lwmod
  5902  024A  0020               	movlb	0	; select bank0
  5903  024B  082F               	movf	?___lwmod,w
  5904  024C  3E30               	addlw	48
  5905  024D  00BB               	movwf	??_printf+2
  5906  024E  083B               	movf	??_printf+2,w
  5907  024F  00C8               	movwf	printf@c
  5908                           
  5909                           ;doprnt.c: 1523: }
  5910                           ;doprnt.c: 1524: (putch(c) );
  5911  0250  0848               	movf	printf@c,w
  5912  0251  318A  22FB  3180   	fcall	_putch
  5913  0254  2A20               	goto	l4145
  5914  0255                     l617:	
  5915                           ;doprnt.c: 1540: return 0;
  5916                           ;	Return value of _printf is never used
  5917                           
  5918                           ;doprnt.c: 1525: }
  5919                           ;doprnt.c: 1533: }
  5920                           ;doprnt.c: 1535: alldone:
  5921                           
  5922  0255  0008               	return
  5923  0256                     __end_of_printf:	
  5924                           
  5925                           	psect	text15
  5926  0AFB                     __ptext15:	
  5927 ;; *************** function _putch *****************
  5928 ;; Defined at:
  5929 ;;		line 160 in file "mcc_generated_files/eusart.c"
  5930 ;; Parameters:    Size  Location     Type
  5931 ;;  txData          1    wreg     unsigned char 
  5932 ;; Auto vars:     Size  Location     Type
  5933 ;;  txData          1    3[BANK0 ] unsigned char 
  5934 ;; Return value:  Size  Location     Type
  5935 ;;                  1    wreg      void 
  5936 ;; Registers used:
  5937 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5938 ;; Tracked objects:
  5939 ;;		On entry : 0/0
  5940 ;;		On exit  : 0/0
  5941 ;;		Unchanged: 0/0
  5942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5944 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5946 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5947 ;;Total ram usage:        1 bytes
  5948 ;; Hardware stack levels used:    1
  5949 ;; Hardware stack levels required when called:    6
  5950 ;; This function calls:
  5951 ;;		_EUSART_Write
  5952 ;; This function is called by:
  5953 ;;		_printf
  5954 ;; This function uses a non-reentrant model
  5955 ;;
  5956                           
  5957                           
  5958                           ;psect for function _putch
  5959  0AFB                     _putch:	
  5960                           
  5961                           ;incstack = 0
  5962                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5963                           ;putch@txData stored from wreg
  5964  0AFB  0020               	movlb	0	; select bank0
  5965  0AFC  00A3               	movwf	putch@txData
  5966                           
  5967                           ;eusart.c: 162: EUSART_Write(txData);
  5968  0AFD  0823               	movf	putch@txData,w
  5969  0AFE  318C  24FE         	fcall	_EUSART_Write
  5970  0B00  0008               	return
  5971  0B01                     __end_of_putch:	
  5972                           
  5973                           	psect	text16
  5974  0CFE                     __ptext16:	
  5975 ;; *************** function _EUSART_Write *****************
  5976 ;; Defined at:
  5977 ;;		line 132 in file "mcc_generated_files/eusart.c"
  5978 ;; Parameters:    Size  Location     Type
  5979 ;;  txData          1    wreg     unsigned char 
  5980 ;; Auto vars:     Size  Location     Type
  5981 ;;  txData          1    2[BANK0 ] unsigned char 
  5982 ;; Return value:  Size  Location     Type
  5983 ;;                  1    wreg      void 
  5984 ;; Registers used:
  5985 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5986 ;; Tracked objects:
  5987 ;;		On entry : 0/0
  5988 ;;		On exit  : 0/0
  5989 ;;		Unchanged: 0/0
  5990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5992 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5993 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5994 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5995 ;;Total ram usage:        2 bytes
  5996 ;; Hardware stack levels used:    1
  5997 ;; Hardware stack levels required when called:    5
  5998 ;; This function calls:
  5999 ;;		Nothing
  6000 ;; This function is called by:
  6001 ;;		_putch
  6002 ;; This function uses a non-reentrant model
  6003 ;;
  6004                           
  6005                           
  6006                           ;psect for function _EUSART_Write
  6007  0CFE                     _EUSART_Write:	
  6008                           
  6009                           ;incstack = 0
  6010                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  6011                           ;EUSART_Write@txData stored from wreg
  6012  0CFE  0020               	movlb	0	; select bank0
  6013  0CFF  00A2               	movwf	EUSART_Write@txData
  6014  0D00                     l3887:	
  6015                           ;eusart.c: 135: {
  6016                           
  6017                           ;eusart.c: 134: while(0 == eusartTxBufferRemaining)
  6018                           
  6019  0D00  087A               	movf	_eusartTxBufferRemaining,w	;volatile
  6020  0D01  1903               	btfsc	3,2
  6021  0D02  2D00               	goto	l3887
  6022                           
  6023                           ;eusart.c: 136: }
  6024                           ;eusart.c: 138: if(0 == PIE1bits.TXIE)
  6025  0D03  0021               	movlb	1	; select bank1
  6026  0D04  1A11               	btfsc	17,4	;volatile
  6027  0D05  2D0B               	goto	l383
  6028                           
  6029                           ;eusart.c: 139: {
  6030                           ;eusart.c: 140: TXREG = txData;
  6031  0D06  0020               	movlb	0	; select bank0
  6032  0D07  0822               	movf	EUSART_Write@txData,w
  6033  0D08  0023               	movlb	3	; select bank3
  6034  0D09  009A               	movwf	26	;volatile
  6035                           
  6036                           ;eusart.c: 141: }
  6037  0D0A  2D1F               	goto	l3901
  6038  0D0B                     l383:	
  6039                           
  6040                           ;eusart.c: 142: else
  6041                           ;eusart.c: 143: {
  6042                           ;eusart.c: 144: PIE1bits.TXIE = 0;
  6043  0D0B  1211               	bcf	17,4	;volatile
  6044                           
  6045                           ;eusart.c: 145: eusartTxBuffer[eusartTxHead++] = txData;
  6046  0D0C  0020               	movlb	0	; select bank0
  6047  0D0D  0822               	movf	EUSART_Write@txData,w
  6048  0D0E  00A1               	movwf	??_EUSART_Write
  6049  0D0F  087C               	movf	_eusartTxHead,w
  6050  0D10  3EA0               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  6051  0D11  0086               	movwf	6
  6052  0D12  0187               	clrf	7
  6053  0D13  0821               	movf	??_EUSART_Write,w
  6054  0D14  0081               	movwf	1
  6055  0D15  3001               	movlw	1
  6056  0D16  00A1               	movwf	??_EUSART_Write
  6057  0D17  0821               	movf	??_EUSART_Write,w
  6058  0D18  07FC               	addwf	_eusartTxHead,f	;volatile
  6059                           
  6060                           ;eusart.c: 146: if(sizeof(eusartTxBuffer) <= eusartTxHead)
  6061  0D19  3008               	movlw	8
  6062  0D1A  027C               	subwf	_eusartTxHead,w	;volatile
  6063  0D1B  1803               	btfsc	3,0
  6064                           
  6065                           ;eusart.c: 147: {
  6066                           ;eusart.c: 148: eusartTxHead = 0;
  6067  0D1C  01FC               	clrf	_eusartTxHead	;volatile
  6068                           
  6069                           ;eusart.c: 149: }
  6070                           ;eusart.c: 150: eusartTxBufferRemaining--;
  6071  0D1D  3001               	movlw	1
  6072  0D1E  02FA               	subwf	_eusartTxBufferRemaining,f	;volatile
  6073  0D1F                     l3901:	
  6074                           
  6075                           ;eusart.c: 151: }
  6076                           ;eusart.c: 152: PIE1bits.TXIE = 1;
  6077  0D1F  0021               	movlb	1	; select bank1
  6078  0D20  1611               	bsf	17,4	;volatile
  6079  0D21  0008               	return
  6080  0D22                     __end_of_EUSART_Write:	
  6081                           
  6082                           	psect	text17
  6083  0E18                     __ptext17:	
  6084 ;; *************** function ___lwmod *****************
  6085 ;; Defined at:
  6086 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  6087 ;; Parameters:    Size  Location     Type
  6088 ;;  divisor         2   15[BANK0 ] unsigned int 
  6089 ;;  dividend        2   17[BANK0 ] unsigned int 
  6090 ;; Auto vars:     Size  Location     Type
  6091 ;;  counter         1   20[BANK0 ] unsigned char 
  6092 ;; Return value:  Size  Location     Type
  6093 ;;                  2   15[BANK0 ] unsigned int 
  6094 ;; Registers used:
  6095 ;;		wreg, status,2, status,0
  6096 ;; Tracked objects:
  6097 ;;		On entry : 0/0
  6098 ;;		On exit  : 0/0
  6099 ;;		Unchanged: 0/0
  6100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6101 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6102 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6103 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6104 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6105 ;;Total ram usage:        6 bytes
  6106 ;; Hardware stack levels used:    1
  6107 ;; Hardware stack levels required when called:    5
  6108 ;; This function calls:
  6109 ;;		Nothing
  6110 ;; This function is called by:
  6111 ;;		_printf
  6112 ;; This function uses a non-reentrant model
  6113 ;;
  6114                           
  6115                           
  6116                           ;psect for function ___lwmod
  6117  0E18                     ___lwmod:	
  6118                           
  6119                           ;incstack = 0
  6120                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  6121  0E18  0020               	movlb	0	; select bank0
  6122  0E19  082F               	movf	___lwmod@divisor,w
  6123  0E1A  0430               	iorwf	___lwmod@divisor+1,w
  6124  0E1B  1903               	btfsc	3,2
  6125  0E1C  2E40               	goto	l4001
  6126  0E1D  01B4               	clrf	___lwmod@counter
  6127  0E1E  0AB4               	incf	___lwmod@counter,f
  6128  0E1F                     l3991:	
  6129  0E1F  1BB0               	btfsc	___lwmod@divisor+1,7
  6130  0E20  2E2B               	goto	l3993
  6131  0E21  3001               	movlw	1
  6132  0E22                     u3155:	
  6133  0E22  35AF               	lslf	___lwmod@divisor,f
  6134  0E23  0DB0               	rlf	___lwmod@divisor+1,f
  6135  0E24  0B89               	decfsz	9,f
  6136  0E25  2E22               	goto	u3155
  6137  0E26  3001               	movlw	1
  6138  0E27  00B3               	movwf	??___lwmod
  6139  0E28  0833               	movf	??___lwmod,w
  6140  0E29  07B4               	addwf	___lwmod@counter,f
  6141  0E2A  2E1F               	goto	l3991
  6142  0E2B                     l3993:	
  6143  0E2B  0830               	movf	___lwmod@divisor+1,w
  6144  0E2C  0232               	subwf	___lwmod@dividend+1,w
  6145  0E2D  1D03               	skipz
  6146  0E2E  2E31               	goto	u3175
  6147  0E2F  082F               	movf	___lwmod@divisor,w
  6148  0E30  0231               	subwf	___lwmod@dividend,w
  6149  0E31                     u3175:	
  6150  0E31  1C03               	skipc
  6151  0E32  2E37               	goto	l3997
  6152  0E33  082F               	movf	___lwmod@divisor,w
  6153  0E34  02B1               	subwf	___lwmod@dividend,f
  6154  0E35  0830               	movf	___lwmod@divisor+1,w
  6155  0E36  3BB2               	subwfb	___lwmod@dividend+1,f
  6156  0E37                     l3997:	
  6157  0E37  3001               	movlw	1
  6158  0E38                     u3185:	
  6159  0E38  36B0               	lsrf	___lwmod@divisor+1,f
  6160  0E39  0CAF               	rrf	___lwmod@divisor,f
  6161  0E3A  0B89               	decfsz	9,f
  6162  0E3B  2E38               	goto	u3185
  6163  0E3C  3001               	movlw	1
  6164  0E3D  02B4               	subwf	___lwmod@counter,f
  6165  0E3E  1D03               	btfss	3,2
  6166  0E3F  2E2B               	goto	l3993
  6167  0E40                     l4001:	
  6168  0E40  0832               	movf	___lwmod@dividend+1,w
  6169  0E41  00B0               	movwf	?___lwmod+1
  6170  0E42  0831               	movf	___lwmod@dividend,w
  6171  0E43  00AF               	movwf	?___lwmod
  6172  0E44  0008               	return
  6173  0E45                     __end_of___lwmod:	
  6174                           
  6175                           	psect	text18
  6176  0E45                     __ptext18:	
  6177 ;; *************** function ___lwdiv *****************
  6178 ;; Defined at:
  6179 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  6180 ;; Parameters:    Size  Location     Type
  6181 ;;  divisor         2    7[BANK0 ] unsigned int 
  6182 ;;  dividend        2    9[BANK0 ] unsigned int 
  6183 ;; Auto vars:     Size  Location     Type
  6184 ;;  quotient        2   13[BANK0 ] unsigned int 
  6185 ;;  counter         1   12[BANK0 ] unsigned char 
  6186 ;; Return value:  Size  Location     Type
  6187 ;;                  2    7[BANK0 ] unsigned int 
  6188 ;; Registers used:
  6189 ;;		wreg, status,2, status,0
  6190 ;; Tracked objects:
  6191 ;;		On entry : 0/0
  6192 ;;		On exit  : 0/0
  6193 ;;		Unchanged: 0/0
  6194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6195 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6196 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6197 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6198 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6199 ;;Total ram usage:        8 bytes
  6200 ;; Hardware stack levels used:    1
  6201 ;; Hardware stack levels required when called:    5
  6202 ;; This function calls:
  6203 ;;		Nothing
  6204 ;; This function is called by:
  6205 ;;		_inv_handler
  6206 ;;		_printf
  6207 ;; This function uses a non-reentrant model
  6208 ;;
  6209                           
  6210                           
  6211                           ;psect for function ___lwdiv
  6212  0E45                     ___lwdiv:	
  6213                           
  6214                           ;incstack = 0
  6215                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6216  0E45  0020               	movlb	0	; select bank0
  6217  0E46  01AD               	clrf	___lwdiv@quotient
  6218  0E47  01AE               	clrf	___lwdiv@quotient+1
  6219  0E48  0827               	movf	___lwdiv@divisor,w
  6220  0E49  0428               	iorwf	___lwdiv@divisor+1,w
  6221  0E4A  1903               	btfsc	3,2
  6222  0E4B  2E75               	goto	l3979
  6223  0E4C  01AC               	clrf	___lwdiv@counter
  6224  0E4D  0AAC               	incf	___lwdiv@counter,f
  6225  0E4E                     l3967:	
  6226  0E4E  1BA8               	btfsc	___lwdiv@divisor+1,7
  6227  0E4F  2E5A               	goto	l3969
  6228  0E50  3001               	movlw	1
  6229  0E51                     u3085:	
  6230  0E51  35A7               	lslf	___lwdiv@divisor,f
  6231  0E52  0DA8               	rlf	___lwdiv@divisor+1,f
  6232  0E53  0B89               	decfsz	9,f
  6233  0E54  2E51               	goto	u3085
  6234  0E55  3001               	movlw	1
  6235  0E56  00AB               	movwf	??___lwdiv
  6236  0E57  082B               	movf	??___lwdiv,w
  6237  0E58  07AC               	addwf	___lwdiv@counter,f
  6238  0E59  2E4E               	goto	l3967
  6239  0E5A                     l3969:	
  6240  0E5A  3001               	movlw	1
  6241  0E5B                     u3105:	
  6242  0E5B  35AD               	lslf	___lwdiv@quotient,f
  6243  0E5C  0DAE               	rlf	___lwdiv@quotient+1,f
  6244  0E5D  0B89               	decfsz	9,f
  6245  0E5E  2E5B               	goto	u3105
  6246  0E5F  0828               	movf	___lwdiv@divisor+1,w
  6247  0E60  022A               	subwf	___lwdiv@dividend+1,w
  6248  0E61  1D03               	skipz
  6249  0E62  2E65               	goto	u3115
  6250  0E63  0827               	movf	___lwdiv@divisor,w
  6251  0E64  0229               	subwf	___lwdiv@dividend,w
  6252  0E65                     u3115:	
  6253  0E65  1C03               	skipc
  6254  0E66  2E6C               	goto	l3975
  6255  0E67  0827               	movf	___lwdiv@divisor,w
  6256  0E68  02A9               	subwf	___lwdiv@dividend,f
  6257  0E69  0828               	movf	___lwdiv@divisor+1,w
  6258  0E6A  3BAA               	subwfb	___lwdiv@dividend+1,f
  6259  0E6B  142D               	bsf	___lwdiv@quotient,0
  6260  0E6C                     l3975:	
  6261  0E6C  3001               	movlw	1
  6262  0E6D                     u3125:	
  6263  0E6D  36A8               	lsrf	___lwdiv@divisor+1,f
  6264  0E6E  0CA7               	rrf	___lwdiv@divisor,f
  6265  0E6F  0B89               	decfsz	9,f
  6266  0E70  2E6D               	goto	u3125
  6267  0E71  3001               	movlw	1
  6268  0E72  02AC               	subwf	___lwdiv@counter,f
  6269  0E73  1D03               	btfss	3,2
  6270  0E74  2E5A               	goto	l3969
  6271  0E75                     l3979:	
  6272  0E75  082E               	movf	___lwdiv@quotient+1,w
  6273  0E76  00A8               	movwf	?___lwdiv+1
  6274  0E77  082D               	movf	___lwdiv@quotient,w
  6275  0E78  00A7               	movwf	?___lwdiv
  6276  0E79  0008               	return
  6277  0E7A                     __end_of___lwdiv:	
  6278                           
  6279                           	psect	text19
  6280  0CB9                     __ptext19:	
  6281 ;; *************** function _PROTOCOL_I2C_Set_TLV *****************
  6282 ;; Defined at:
  6283 ;;		line 208 in file "protocol.c"
  6284 ;; Parameters:    Size  Location     Type
  6285 ;;  type            1    wreg     unsigned char 
  6286 ;;  length          1    1[BANK0 ] unsigned char 
  6287 ;;  pbuffer         2    2[BANK0 ] PTR unsigned char 
  6288 ;;		 -> PROTOCOL_Send_uint8_t@pbuf(1), sendbuf(16), 
  6289 ;; Auto vars:     Size  Location     Type
  6290 ;;  type            1    5[BANK0 ] unsigned char 
  6291 ;;  status          1    6[BANK0 ] enum E3406
  6292 ;; Return value:  Size  Location     Type
  6293 ;;                  1    wreg      void 
  6294 ;; Registers used:
  6295 ;;		wreg, status,2, status,0
  6296 ;; Tracked objects:
  6297 ;;		On entry : 0/0
  6298 ;;		On exit  : 0/0
  6299 ;;		Unchanged: 0/0
  6300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6301 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6302 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6303 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6304 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6305 ;;Total ram usage:        6 bytes
  6306 ;; Hardware stack levels used:    1
  6307 ;; Hardware stack levels required when called:    5
  6308 ;; This function calls:
  6309 ;;		Nothing
  6310 ;; This function is called by:
  6311 ;;		_PROTOCOL_I2C_Send_int8_t
  6312 ;; This function uses a non-reentrant model
  6313 ;;
  6314                           
  6315                           
  6316                           ;psect for function _PROTOCOL_I2C_Set_TLV
  6317  0CB9                     _PROTOCOL_I2C_Set_TLV:	
  6318                           
  6319                           ;incstack = 0
  6320                           ; Regs used in _PROTOCOL_I2C_Set_TLV: [wreg+status,2+status,0]
  6321                           ;PROTOCOL_I2C_Set_TLV@type stored from wreg
  6322  0CB9  0020               	movlb	0	; select bank0
  6323  0CBA  00A5               	movwf	PROTOCOL_I2C_Set_TLV@type
  6324                           
  6325                           ;protocol.c: 209: READBUF_STATUS status = readbuf.status;
  6326  0CBB  0021               	movlb	1	; select bank1
  6327  0CBC  084B               	movf	(_readbuf^(0+128)+4),w
  6328  0CBD  0020               	movlb	0	; select bank0
  6329  0CBE  00A4               	movwf	??_PROTOCOL_I2C_Set_TLV
  6330  0CBF  0824               	movf	??_PROTOCOL_I2C_Set_TLV,w
  6331  0CC0  00A6               	movwf	PROTOCOL_I2C_Set_TLV@status
  6332                           
  6333                           ;protocol.c: 210: if (status == COMPLETE) {
  6334  0CC1  3003               	movlw	3
  6335  0CC2  0626               	xorwf	PROTOCOL_I2C_Set_TLV@status,w
  6336  0CC3  1D03               	btfss	3,2
  6337  0CC4  0008               	return
  6338                           
  6339                           ;protocol.c: 211: readbuf.type = type;
  6340  0CC5  0825               	movf	PROTOCOL_I2C_Set_TLV@type,w
  6341  0CC6  00A4               	movwf	??_PROTOCOL_I2C_Set_TLV
  6342  0CC7  0824               	movf	??_PROTOCOL_I2C_Set_TLV,w
  6343  0CC8  0021               	movlb	1	; select bank1
  6344  0CC9  00C7               	movwf	_readbuf^(0+128)
  6345                           
  6346                           ;protocol.c: 212: readbuf.length = length;
  6347  0CCA  0020               	movlb	0	; select bank0
  6348  0CCB  0821               	movf	PROTOCOL_I2C_Set_TLV@length,w
  6349  0CCC  00A4               	movwf	??_PROTOCOL_I2C_Set_TLV
  6350  0CCD  0824               	movf	??_PROTOCOL_I2C_Set_TLV,w
  6351  0CCE  0021               	movlb	1	; select bank1
  6352  0CCF  00C8               	movwf	(_readbuf^(0+128)+1)
  6353                           
  6354                           ;protocol.c: 213: readbuf.pbuffer = pbuffer;
  6355  0CD0  0020               	movlb	0	; select bank0
  6356  0CD1  0823               	movf	PROTOCOL_I2C_Set_TLV@pbuffer+1,w
  6357  0CD2  0021               	movlb	1	; select bank1
  6358  0CD3  00CA               	movwf	((low ((_readbuf| 0+2))+1))^(0+128)
  6359  0CD4  0020               	movlb	0	; select bank0
  6360  0CD5  0822               	movf	PROTOCOL_I2C_Set_TLV@pbuffer,w
  6361  0CD6  0021               	movlb	1	; select bank1
  6362  0CD7  00C9               	movwf	(low ((_readbuf| 0+2)))^(0+128)
  6363                           
  6364                           ;protocol.c: 214: readbuf.buf_cnt = 0;
  6365  0CD8  01CC               	clrf	(_readbuf^(0+128)+5)
  6366                           
  6367                           ;protocol.c: 215: readbuf.status = TLV_SET;
  6368  0CD9  01CB               	clrf	(_readbuf^(0+128)+4)
  6369  0CDA  0008               	return
  6370  0CDB                     __end_of_PROTOCOL_I2C_Set_TLV:	
  6371                           
  6372                           	psect	text20
  6373  0761                     __ptext20:	
  6374 ;; *************** function _atoi *****************
  6375 ;; Defined at:
  6376 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\atoi.c"
  6377 ;; Parameters:    Size  Location     Type
  6378 ;;  s               1    wreg     PTR const unsigned char 
  6379 ;;		 -> buf(48), 
  6380 ;; Auto vars:     Size  Location     Type
  6381 ;;  s               1   14[BANK0 ] PTR const unsigned char 
  6382 ;;		 -> buf(48), 
  6383 ;;  a               2   12[BANK0 ] int 
  6384 ;;  sign            1   11[BANK0 ] unsigned char 
  6385 ;; Return value:  Size  Location     Type
  6386 ;;                  2    7[BANK0 ] int 
  6387 ;; Registers used:
  6388 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6389 ;; Tracked objects:
  6390 ;;		On entry : 0/0
  6391 ;;		On exit  : 0/0
  6392 ;;		Unchanged: 0/0
  6393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6394 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6395 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6396 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6397 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6398 ;;Total ram usage:        8 bytes
  6399 ;; Hardware stack levels used:    1
  6400 ;; Hardware stack levels required when called:    6
  6401 ;; This function calls:
  6402 ;;		___wmul
  6403 ;;		_isdigit
  6404 ;; This function is called by:
  6405 ;;		_PROTOCOL_Loop
  6406 ;; This function uses a non-reentrant model
  6407 ;;
  6408                           
  6409                           
  6410                           ;psect for function _atoi
  6411  0761                     _atoi:	
  6412                           
  6413                           ;incstack = 0
  6414                           ; Regs used in _atoi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6415                           ;atoi@s stored from wreg
  6416  0761  0020               	movlb	0	; select bank0
  6417  0762  00AE               	movwf	atoi@s
  6418  0763                     l4323:	
  6419  0763  082E               	movf	atoi@s,w
  6420  0764  0086               	movwf	6
  6421  0765  3001               	movlw	1	; select bank2/3
  6422  0766  0087               	movwf	7
  6423  0767  3020               	movlw	32
  6424  0768  0601               	xorwf	1,w
  6425  0769  1D03               	btfss	3,2
  6426  076A  2F70               	goto	l4325
  6427  076B                     l4321:	
  6428  076B  3001               	movlw	1
  6429  076C  00A9               	movwf	??_atoi
  6430  076D  0829               	movf	??_atoi,w
  6431  076E  07AE               	addwf	atoi@s,f
  6432  076F  2F63               	goto	l4323
  6433  0770                     l4325:	
  6434  0770  082E               	movf	atoi@s,w
  6435  0771  0086               	movwf	6
  6436  0772  3001               	movlw	1	; select bank2/3
  6437  0773  0087               	movwf	7
  6438  0774  3009               	movlw	9
  6439  0775  0601               	xorwf	1,w
  6440  0776  1903               	btfsc	3,2
  6441  0777  2F6B               	goto	l4321
  6442  0778  01AC               	clrf	atoi@a
  6443  0779  01AD               	clrf	atoi@a+1
  6444  077A  01AB               	clrf	atoi@sign
  6445  077B  082E               	movf	atoi@s,w
  6446  077C  0086               	movwf	6
  6447  077D  3001               	movlw	1	; select bank2/3
  6448  077E  0087               	movwf	7
  6449  077F  302D               	movlw	45
  6450  0780  0601               	xorwf	1,w
  6451  0781  1D03               	btfss	3,2
  6452  0782  2F88               	goto	l4333
  6453  0783  3001               	movlw	1
  6454  0784  00A9               	movwf	??_atoi
  6455  0785  0829               	movf	??_atoi,w
  6456  0786  07AB               	addwf	atoi@sign,f
  6457  0787  2F90               	goto	l4339
  6458  0788                     l4333:	
  6459  0788  082E               	movf	atoi@s,w
  6460  0789  0086               	movwf	6
  6461  078A  3001               	movlw	1	; select bank2/3
  6462  078B  0087               	movwf	7
  6463  078C  302B               	movlw	43
  6464  078D  0601               	xorwf	1,w
  6465  078E  1D03               	btfss	3,2
  6466  078F  2F94               	goto	l4341
  6467  0790                     l4339:	
  6468  0790  3001               	movlw	1
  6469  0791  00A9               	movwf	??_atoi
  6470  0792  0829               	movf	??_atoi,w
  6471  0793  07AE               	addwf	atoi@s,f
  6472  0794                     l4341:	
  6473  0794  082E               	movf	atoi@s,w
  6474  0795  0086               	movwf	6
  6475  0796  3001               	movlw	1	; select bank2/3
  6476  0797  0087               	movwf	7
  6477  0798  0801               	movf	1,w
  6478  0799  318B  233E  3187   	fcall	_isdigit
  6479  079C  1C03               	btfss	3,0
  6480  079D  2FBD               	goto	l4343
  6481  079E  0020               	movlb	0	; select bank0
  6482  079F  082D               	movf	atoi@a+1,w
  6483  07A0  00A2               	movwf	___wmul@multiplier+1
  6484  07A1  082C               	movf	atoi@a,w
  6485  07A2  00A1               	movwf	___wmul@multiplier
  6486  07A3  300A               	movlw	10
  6487  07A4  00A3               	movwf	___wmul@multiplicand
  6488  07A5  3000               	movlw	0
  6489  07A6  00A4               	movwf	___wmul@multiplicand+1
  6490  07A7  318C  2401  3187   	fcall	___wmul
  6491  07AA  0020               	movlb	0	; select bank0
  6492  07AB  082E               	movf	atoi@s,w
  6493  07AC  0086               	movwf	6
  6494  07AD  3001               	movlw	1	; select bank2/3
  6495  07AE  0087               	movwf	7
  6496  07AF  0801               	movf	1,w
  6497  07B0  0721               	addwf	?___wmul,w
  6498  07B1  00A9               	movwf	??_atoi
  6499  07B2  0822               	movf	?___wmul+1,w
  6500  07B3  1803               	skipnc
  6501  07B4  0A22               	incf	?___wmul+1,w
  6502  07B5  00AA               	movwf	??_atoi+1
  6503  07B6  0829               	movf	??_atoi,w
  6504  07B7  3ED0               	addlw	208
  6505  07B8  00AC               	movwf	atoi@a
  6506  07B9  30FF               	movlw	255
  6507  07BA  3D2A               	addwfc	??_atoi+1,w
  6508  07BB  00AD               	movwf	atoi@a+1
  6509  07BC  2F90               	goto	l4339
  6510  07BD                     l4343:	
  6511  07BD  0020               	movlb	0	; select bank0
  6512  07BE  082B               	movf	atoi@sign,w
  6513  07BF  1903               	btfsc	3,2
  6514  07C0  2FCD               	goto	l4349
  6515  07C1  092C               	comf	atoi@a,w
  6516  07C2  00A9               	movwf	??_atoi
  6517  07C3  092D               	comf	atoi@a+1,w
  6518  07C4  00AA               	movwf	??_atoi+1
  6519  07C5  0AA9               	incf	??_atoi,f
  6520  07C6  1903               	skipnz
  6521  07C7  0AAA               	incf	??_atoi+1,f
  6522  07C8  0829               	movf	??_atoi,w
  6523  07C9  00A7               	movwf	?_atoi
  6524  07CA  082A               	movf	??_atoi+1,w
  6525  07CB  00A8               	movwf	?_atoi+1
  6526  07CC  0008               	return
  6527  07CD                     l4349:	
  6528  07CD  082D               	movf	atoi@a+1,w
  6529  07CE  00A8               	movwf	?_atoi+1
  6530  07CF  082C               	movf	atoi@a,w
  6531  07D0  00A7               	movwf	?_atoi
  6532  07D1  0008               	return
  6533  07D2                     __end_of_atoi:	
  6534                           
  6535                           	psect	text21
  6536  0B3E                     __ptext21:	
  6537 ;; *************** function _isdigit *****************
  6538 ;; Defined at:
  6539 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  6540 ;; Parameters:    Size  Location     Type
  6541 ;;  c               1    wreg     unsigned char 
  6542 ;; Auto vars:     Size  Location     Type
  6543 ;;  c               1    2[BANK0 ] unsigned char 
  6544 ;; Return value:  Size  Location     Type
  6545 ;;		None               void
  6546 ;; Registers used:
  6547 ;;		wreg, status,2, status,0
  6548 ;; Tracked objects:
  6549 ;;		On entry : 0/0
  6550 ;;		On exit  : 0/0
  6551 ;;		Unchanged: 0/0
  6552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6554 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6556 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6557 ;;Total ram usage:        2 bytes
  6558 ;; Hardware stack levels used:    1
  6559 ;; Hardware stack levels required when called:    5
  6560 ;; This function calls:
  6561 ;;		Nothing
  6562 ;; This function is called by:
  6563 ;;		_printf
  6564 ;;		_atoi
  6565 ;; This function uses a non-reentrant model
  6566 ;;
  6567                           
  6568                           
  6569                           ;psect for function _isdigit
  6570  0B3E                     _isdigit:	
  6571                           
  6572                           ;incstack = 0
  6573                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  6574                           ;isdigit@c stored from wreg
  6575  0B3E  0020               	movlb	0	; select bank0
  6576  0B3F  00A2               	movwf	isdigit@c
  6577  0B40  01A1               	clrf	_isdigit$1477
  6578  0B41  303A               	movlw	58
  6579  0B42  0222               	subwf	isdigit@c,w
  6580  0B43  1803               	skipnc
  6581  0B44  2B4B               	goto	l3939
  6582  0B45  3030               	movlw	48
  6583  0B46  0222               	subwf	isdigit@c,w
  6584  0B47  1C03               	skipc
  6585  0B48  2B4B               	goto	l3939
  6586  0B49  01A1               	clrf	_isdigit$1477
  6587  0B4A  0AA1               	incf	_isdigit$1477,f
  6588  0B4B                     l3939:	
  6589  0B4B  0C21               	rrf	_isdigit$1477,w
  6590  0B4C  0008               	return
  6591  0B4D                     __end_of_isdigit:	
  6592                           
  6593                           	psect	text22
  6594  0C01                     __ptext22:	
  6595 ;; *************** function ___wmul *****************
  6596 ;; Defined at:
  6597 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  6598 ;; Parameters:    Size  Location     Type
  6599 ;;  multiplier      2    1[BANK0 ] unsigned int 
  6600 ;;  multiplicand    2    3[BANK0 ] unsigned int 
  6601 ;; Auto vars:     Size  Location     Type
  6602 ;;  product         2    5[BANK0 ] unsigned int 
  6603 ;; Return value:  Size  Location     Type
  6604 ;;                  2    1[BANK0 ] unsigned int 
  6605 ;; Registers used:
  6606 ;;		wreg, status,2, status,0
  6607 ;; Tracked objects:
  6608 ;;		On entry : 0/0
  6609 ;;		On exit  : 0/0
  6610 ;;		Unchanged: 0/0
  6611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6612 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6613 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6615 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6616 ;;Total ram usage:        6 bytes
  6617 ;; Hardware stack levels used:    1
  6618 ;; Hardware stack levels required when called:    5
  6619 ;; This function calls:
  6620 ;;		Nothing
  6621 ;; This function is called by:
  6622 ;;		_inv_handler
  6623 ;;		_printf
  6624 ;;		_atoi
  6625 ;; This function uses a non-reentrant model
  6626 ;;
  6627                           
  6628                           
  6629                           ;psect for function ___wmul
  6630  0C01                     ___wmul:	
  6631                           
  6632                           ;incstack = 0
  6633                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6634  0C01  0020               	movlb	0	; select bank0
  6635  0C02  01A5               	clrf	___wmul@product
  6636  0C03  01A6               	clrf	___wmul@product+1
  6637  0C04                     l3945:	
  6638  0C04  1C21               	btfss	___wmul@multiplier,0
  6639  0C05  2C0A               	goto	l1058
  6640  0C06  0823               	movf	___wmul@multiplicand,w
  6641  0C07  07A5               	addwf	___wmul@product,f
  6642  0C08  0824               	movf	___wmul@multiplicand+1,w
  6643  0C09  3DA6               	addwfc	___wmul@product+1,f
  6644  0C0A                     l1058:	
  6645  0C0A  3001               	movlw	1
  6646  0C0B                     u3045:	
  6647  0C0B  35A3               	lslf	___wmul@multiplicand,f
  6648  0C0C  0DA4               	rlf	___wmul@multiplicand+1,f
  6649  0C0D  0B89               	decfsz	9,f
  6650  0C0E  2C0B               	goto	u3045
  6651  0C0F  3001               	movlw	1
  6652  0C10                     u3055:	
  6653  0C10  36A2               	lsrf	___wmul@multiplier+1,f
  6654  0C11  0CA1               	rrf	___wmul@multiplier,f
  6655  0C12  0B89               	decfsz	9,f
  6656  0C13  2C10               	goto	u3055
  6657  0C14  0821               	movf	___wmul@multiplier,w
  6658  0C15  0422               	iorwf	___wmul@multiplier+1,w
  6659  0C16  1D03               	btfss	3,2
  6660  0C17  2C04               	goto	l3945
  6661  0C18  0826               	movf	___wmul@product+1,w
  6662  0C19  00A2               	movwf	?___wmul+1
  6663  0C1A  0825               	movf	___wmul@product,w
  6664  0C1B  00A1               	movwf	?___wmul
  6665  0C1C  0008               	return
  6666  0C1D                     __end_of___wmul:	
  6667                           
  6668                           	psect	text23
  6669  0AEE                     __ptext23:	
  6670 ;; *************** function _TMR0_HasOverflowOccured *****************
  6671 ;; Defined at:
  6672 ;;		line 101 in file "mcc_generated_files/tmr0.c"
  6673 ;; Parameters:    Size  Location     Type
  6674 ;;		None
  6675 ;; Auto vars:     Size  Location     Type
  6676 ;;		None
  6677 ;; Return value:  Size  Location     Type
  6678 ;;                  1    wreg      unsigned char 
  6679 ;; Registers used:
  6680 ;;		wreg, status,2, status,0
  6681 ;; Tracked objects:
  6682 ;;		On entry : 0/0
  6683 ;;		On exit  : 0/0
  6684 ;;		Unchanged: 0/0
  6685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6687 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6689 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6690 ;;Total ram usage:        0 bytes
  6691 ;; Hardware stack levels used:    1
  6692 ;; Hardware stack levels required when called:    5
  6693 ;; This function calls:
  6694 ;;		Nothing
  6695 ;; This function is called by:
  6696 ;;		_PROTOCOL_Loop
  6697 ;; This function uses a non-reentrant model
  6698 ;;
  6699                           
  6700                           
  6701                           ;psect for function _TMR0_HasOverflowOccured
  6702  0AEE                     _TMR0_HasOverflowOccured:	
  6703                           
  6704                           ;tmr0.c: 104: return(INTCONbits.TMR0IF);
  6705                           
  6706                           ;incstack = 0
  6707                           ; Regs used in _TMR0_HasOverflowOccured: [wreg+status,2+status,0]
  6708  0AEE  0C0B               	rrf	11,w	;volatile
  6709  0AEF  0C89               	rrf	9,f
  6710  0AF0  3901               	andlw	1
  6711  0AF1  0008               	return
  6712  0AF2                     __end_of_TMR0_HasOverflowOccured:	
  6713                           
  6714                           	psect	text24
  6715  0B5C                     __ptext24:	
  6716 ;; *************** function _PROTOCOL_Write_Device_Address *****************
  6717 ;; Defined at:
  6718 ;;		line 84 in file "protocol.c"
  6719 ;; Parameters:    Size  Location     Type
  6720 ;;  device_id_i2    1    wreg     unsigned char 
  6721 ;; Auto vars:     Size  Location     Type
  6722 ;;  device_id_i2    1    5[BANK0 ] unsigned char 
  6723 ;; Return value:  Size  Location     Type
  6724 ;;                  1    wreg      void 
  6725 ;; Registers used:
  6726 ;;		wreg, status,2, status,0, pclath, cstack
  6727 ;; Tracked objects:
  6728 ;;		On entry : 0/0
  6729 ;;		On exit  : 0/0
  6730 ;;		Unchanged: 0/0
  6731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6733 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6734 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6735 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6736 ;;Total ram usage:        2 bytes
  6737 ;; Hardware stack levels used:    1
  6738 ;; Hardware stack levels required when called:    6
  6739 ;; This function calls:
  6740 ;;		_DATAEE_WriteByte
  6741 ;; This function is called by:
  6742 ;;		_PROTOCOL_Loop
  6743 ;; This function uses a non-reentrant model
  6744 ;;
  6745                           
  6746                           
  6747                           ;psect for function _PROTOCOL_Write_Device_Address
  6748  0B5C                     _PROTOCOL_Write_Device_Address:	
  6749                           
  6750                           ;incstack = 0
  6751                           ; Regs used in _PROTOCOL_Write_Device_Address: [wreg+status,2+status,0+pclath+cstack]
  6752                           ;PROTOCOL_Write_Device_Address@device_id_i2c stored from wreg
  6753  0B5C  0020               	movlb	0	; select bank0
  6754  0B5D  00A5               	movwf	PROTOCOL_Write_Device_Address@device_id_i2c
  6755                           
  6756                           ;protocol.c: 85: DATAEE_WriteByte(0, device_id_i2c);
  6757  0B5E  0825               	movf	PROTOCOL_Write_Device_Address@device_id_i2c,w
  6758  0B5F  00A4               	movwf	??_PROTOCOL_Write_Device_Address
  6759  0B60  0824               	movf	??_PROTOCOL_Write_Device_Address,w
  6760  0B61  00A1               	movwf	DATAEE_WriteByte@bData
  6761  0B62  3000               	movlw	0
  6762  0B63  318C  24DB         	fcall	_DATAEE_WriteByte
  6763                           
  6764                           ;protocol.c: 86: slave_address = device_id_i2c;
  6765  0B65  0020               	movlb	0	; select bank0
  6766  0B66  0825               	movf	PROTOCOL_Write_Device_Address@device_id_i2c,w
  6767  0B67  00A4               	movwf	??_PROTOCOL_Write_Device_Address
  6768  0B68  0824               	movf	??_PROTOCOL_Write_Device_Address,w
  6769  0B69  0021               	movlb	1	; select bank1
  6770  0B6A  00C0               	movwf	_slave_address^(0+128)
  6771  0B6B  0008               	return
  6772  0B6C                     __end_of_PROTOCOL_Write_Device_Address:	
  6773                           
  6774                           	psect	text25
  6775  0AD8                     __ptext25:	
  6776 ;; *************** function _PROTOCOL_STP *****************
  6777 ;; Defined at:
  6778 ;;		line 98 in file "protocol.c"
  6779 ;; Parameters:    Size  Location     Type
  6780 ;;		None
  6781 ;; Auto vars:     Size  Location     Type
  6782 ;;		None
  6783 ;; Return value:  Size  Location     Type
  6784 ;;                  1    wreg      void 
  6785 ;; Registers used:
  6786 ;;		wreg, status,2, status,0
  6787 ;; Tracked objects:
  6788 ;;		On entry : 0/0
  6789 ;;		On exit  : 0/0
  6790 ;;		Unchanged: 0/0
  6791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6793 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6794 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6795 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6796 ;;Total ram usage:        0 bytes
  6797 ;; Hardware stack levels used:    1
  6798 ;; Hardware stack levels required when called:    5
  6799 ;; This function calls:
  6800 ;;		Nothing
  6801 ;; This function is called by:
  6802 ;;		_PROTOCOL_Loop
  6803 ;; This function uses a non-reentrant model
  6804 ;;
  6805                           
  6806                           
  6807                           ;psect for function _PROTOCOL_STP
  6808  0AD8                     _PROTOCOL_STP:	
  6809                           
  6810                           ;protocol.c: 100: running = 0;
  6811                           
  6812                           ;incstack = 0
  6813                           ; Regs used in _PROTOCOL_STP: [wreg+status,2+status,0]
  6814  0AD8  0021               	movlb	1	; select bank1
  6815  0AD9  01BD               	clrf	_running^(0+128)
  6816  0ADA  0008               	return
  6817  0ADB                     __end_of_PROTOCOL_STP:	
  6818                           
  6819                           	psect	text26
  6820  0AEA                     __ptext26:	
  6821 ;; *************** function _PROTOCOL_STA *****************
  6822 ;; Defined at:
  6823 ;;		line 93 in file "protocol.c"
  6824 ;; Parameters:    Size  Location     Type
  6825 ;;		None
  6826 ;; Auto vars:     Size  Location     Type
  6827 ;;		None
  6828 ;; Return value:  Size  Location     Type
  6829 ;;                  1    wreg      void 
  6830 ;; Registers used:
  6831 ;;		wreg, status,2, status,0
  6832 ;; Tracked objects:
  6833 ;;		On entry : 0/0
  6834 ;;		On exit  : 0/0
  6835 ;;		Unchanged: 0/0
  6836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6838 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6840 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6841 ;;Total ram usage:        0 bytes
  6842 ;; Hardware stack levels used:    1
  6843 ;; Hardware stack levels required when called:    5
  6844 ;; This function calls:
  6845 ;;		Nothing
  6846 ;; This function is called by:
  6847 ;;		_PROTOCOL_Loop
  6848 ;; This function uses a non-reentrant model
  6849 ;;
  6850                           
  6851                           
  6852                           ;psect for function _PROTOCOL_STA
  6853  0AEA                     _PROTOCOL_STA:	
  6854                           
  6855                           ;protocol.c: 95: running = 1;
  6856                           
  6857                           ;incstack = 0
  6858                           ; Regs used in _PROTOCOL_STA: [wreg+status,2+status,0]
  6859  0AEA  0021               	movlb	1	; select bank1
  6860  0AEB  01BD               	clrf	_running^(0+128)
  6861  0AEC  0ABD               	incf	_running^(0+128),f
  6862  0AED  0008               	return
  6863  0AEE                     __end_of_PROTOCOL_STA:	
  6864                           
  6865                           	psect	text27
  6866  0B0E                     __ptext27:	
  6867 ;; *************** function _PROTOCOL_SET *****************
  6868 ;; Defined at:
  6869 ;;		line 111 in file "protocol.c"
  6870 ;; Parameters:    Size  Location     Type
  6871 ;;  value_          1    wreg     unsigned char 
  6872 ;; Auto vars:     Size  Location     Type
  6873 ;;  value_          1    2[BANK0 ] unsigned char 
  6874 ;; Return value:  Size  Location     Type
  6875 ;;                  1    wreg      void 
  6876 ;; Registers used:
  6877 ;;		wreg, status,2, status,0
  6878 ;; Tracked objects:
  6879 ;;		On entry : 0/0
  6880 ;;		On exit  : 0/0
  6881 ;;		Unchanged: 0/0
  6882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6883 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6884 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6885 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6886 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6887 ;;Total ram usage:        2 bytes
  6888 ;; Hardware stack levels used:    1
  6889 ;; Hardware stack levels required when called:    5
  6890 ;; This function calls:
  6891 ;;		Nothing
  6892 ;; This function is called by:
  6893 ;;		_PROTOCOL_Loop
  6894 ;; This function uses a non-reentrant model
  6895 ;;
  6896                           
  6897                           
  6898                           ;psect for function _PROTOCOL_SET
  6899  0B0E                     _PROTOCOL_SET:	
  6900                           
  6901                           ;incstack = 0
  6902                           ; Regs used in _PROTOCOL_SET: [wreg+status,2+status,0]
  6903                           ;PROTOCOL_SET@value_ stored from wreg
  6904  0B0E  0020               	movlb	0	; select bank0
  6905  0B0F  00A2               	movwf	PROTOCOL_SET@value_
  6906                           
  6907                           ;protocol.c: 112: value = value_;
  6908  0B10  0822               	movf	PROTOCOL_SET@value_,w
  6909  0B11  00A1               	movwf	??_PROTOCOL_SET
  6910  0B12  0821               	movf	??_PROTOCOL_SET,w
  6911  0B13  00E3               	movwf	_value
  6912  0B14  0008               	return
  6913  0B15                     __end_of_PROTOCOL_SET:	
  6914                           
  6915                           	psect	text28
  6916  0B1E                     __ptext28:	
  6917 ;; *************** function _PROTOCOL_SAV *****************
  6918 ;; Defined at:
  6919 ;;		line 107 in file "protocol.c"
  6920 ;; Parameters:    Size  Location     Type
  6921 ;;		None
  6922 ;; Auto vars:     Size  Location     Type
  6923 ;;		None
  6924 ;; Return value:  Size  Location     Type
  6925 ;;                  1    wreg      void 
  6926 ;; Registers used:
  6927 ;;		wreg, status,2, status,0, pclath, cstack
  6928 ;; Tracked objects:
  6929 ;;		On entry : 0/0
  6930 ;;		On exit  : 0/0
  6931 ;;		Unchanged: 0/0
  6932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6934 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6935 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6936 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6937 ;;Total ram usage:        1 bytes
  6938 ;; Hardware stack levels used:    1
  6939 ;; Hardware stack levels required when called:    6
  6940 ;; This function calls:
  6941 ;;		_DATAEE_WriteByte
  6942 ;; This function is called by:
  6943 ;;		_PROTOCOL_Loop
  6944 ;; This function uses a non-reentrant model
  6945 ;;
  6946                           
  6947                           
  6948                           ;psect for function _PROTOCOL_SAV
  6949  0B1E                     _PROTOCOL_SAV:	
  6950                           
  6951                           ;protocol.c: 108: DATAEE_WriteByte(1, value);
  6952                           
  6953                           ;incstack = 0
  6954                           ; Regs used in _PROTOCOL_SAV: [wreg+status,2+status,0+pclath+cstack]
  6955  0B1E  0020               	movlb	0	; select bank0
  6956  0B1F  0863               	movf	_value,w
  6957  0B20  00A4               	movwf	??_PROTOCOL_SAV
  6958  0B21  0824               	movf	??_PROTOCOL_SAV,w
  6959  0B22  00A1               	movwf	DATAEE_WriteByte@bData
  6960  0B23  3001               	movlw	1
  6961  0B24  318C  24DB         	fcall	_DATAEE_WriteByte
  6962  0B26  0008               	return
  6963  0B27                     __end_of_PROTOCOL_SAV:	
  6964                           
  6965                           	psect	text29
  6966  0CDB                     __ptext29:	
  6967 ;; *************** function _DATAEE_WriteByte *****************
  6968 ;; Defined at:
  6969 ;;		line 180 in file "mcc_generated_files/memory.c"
  6970 ;; Parameters:    Size  Location     Type
  6971 ;;  bAdd            1    wreg     unsigned char 
  6972 ;;  bData           1    1[BANK0 ] unsigned char 
  6973 ;; Auto vars:     Size  Location     Type
  6974 ;;  bAdd            1    2[BANK0 ] unsigned char 
  6975 ;;  GIEBitValue     1    3[BANK0 ] unsigned char 
  6976 ;; Return value:  Size  Location     Type
  6977 ;;                  1    wreg      void 
  6978 ;; Registers used:
  6979 ;;		wreg, status,2, status,0
  6980 ;; Tracked objects:
  6981 ;;		On entry : 0/0
  6982 ;;		On exit  : 0/0
  6983 ;;		Unchanged: 0/0
  6984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6985 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6986 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6988 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6989 ;;Total ram usage:        3 bytes
  6990 ;; Hardware stack levels used:    1
  6991 ;; Hardware stack levels required when called:    5
  6992 ;; This function calls:
  6993 ;;		Nothing
  6994 ;; This function is called by:
  6995 ;;		_PROTOCOL_Write_Device_Address
  6996 ;;		_PROTOCOL_SAV
  6997 ;; This function uses a non-reentrant model
  6998 ;;
  6999                           
  7000                           
  7001                           ;psect for function _DATAEE_WriteByte
  7002  0CDB                     _DATAEE_WriteByte:	
  7003                           
  7004                           ;incstack = 0
  7005                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
  7006                           ;DATAEE_WriteByte@bAdd stored from wreg
  7007  0CDB  0020               	movlb	0	; select bank0
  7008  0CDC  00A2               	movwf	DATAEE_WriteByte@bAdd
  7009                           
  7010                           ;memory.c: 182: uint8_t GIEBitValue = 0;
  7011  0CDD  01A3               	clrf	DATAEE_WriteByte@GIEBitValue
  7012                           
  7013                           ;memory.c: 184: EEADRL = (bAdd & 0x0ff);
  7014  0CDE  0822               	movf	DATAEE_WriteByte@bAdd,w
  7015  0CDF  0023               	movlb	3	; select bank3
  7016  0CE0  0091               	movwf	17	;volatile
  7017                           
  7018                           ;memory.c: 185: EEDATL = bData;
  7019  0CE1  0020               	movlb	0	; select bank0
  7020  0CE2  0821               	movf	DATAEE_WriteByte@bData,w
  7021  0CE3  0023               	movlb	3	; select bank3
  7022  0CE4  0093               	movwf	19	;volatile
  7023                           
  7024                           ;memory.c: 186: EECON1bits.EEPGD = 0;
  7025  0CE5  1395               	bcf	21,7	;volsfr
  7026                           
  7027                           ;memory.c: 187: EECON1bits.CFGS = 0;
  7028  0CE6  1315               	bcf	21,6	;volsfr
  7029                           
  7030                           ;memory.c: 188: EECON1bits.WREN = 1;
  7031  0CE7  1515               	bsf	21,2	;volsfr
  7032                           
  7033                           ;memory.c: 190: GIEBitValue = INTCONbits.GIE;
  7034  0CE8  3000               	movlw	0
  7035  0CE9  1B8B               	btfsc	11,7	;volatile
  7036  0CEA  3001               	movlw	1
  7037  0CEB  0020               	movlb	0	; select bank0
  7038  0CEC  00A3               	movwf	DATAEE_WriteByte@GIEBitValue
  7039                           
  7040                           ;memory.c: 191: INTCONbits.GIE = 0;
  7041  0CED  138B               	bcf	11,7	;volatile
  7042                           
  7043                           ;memory.c: 192: EECON2 = 0x55;
  7044  0CEE  3055               	movlw	85
  7045  0CEF  0023               	movlb	3	; select bank3
  7046  0CF0  0096               	movwf	22	;volsfr
  7047                           
  7048                           ;memory.c: 193: EECON2 = 0xAA;
  7049  0CF1  30AA               	movlw	170
  7050  0CF2  0096               	movwf	22	;volsfr
  7051                           
  7052                           ;memory.c: 194: EECON1bits.WR = 1;
  7053  0CF3  1495               	bsf	21,1	;volsfr
  7054  0CF4                     l480:	
  7055                           ;memory.c: 197: {
  7056                           
  7057                           ;memory.c: 196: while (EECON1bits.WR)
  7058                           
  7059  0CF4  1895               	btfsc	21,1	;volsfr
  7060  0CF5  2CF4               	goto	l480
  7061                           
  7062                           ;memory.c: 198: }
  7063                           ;memory.c: 200: EECON1bits.WREN = 0;
  7064  0CF6  1115               	bcf	21,2	;volsfr
  7065                           
  7066                           ;memory.c: 201: INTCONbits.GIE = GIEBitValue;
  7067  0CF7  0020               	movlb	0	; select bank0
  7068  0CF8  0C23               	rrf	DATAEE_WriteByte@GIEBitValue,w
  7069  0CF9  1C03               	skipc
  7070  0CFA  138B               	bcf	11,7	;volatile
  7071  0CFB  1803               	skipnc
  7072  0CFC  178B               	bsf	11,7	;volatile
  7073  0CFD  0008               	return
  7074  0CFE                     __end_of_DATAEE_WriteByte:	
  7075                           
  7076                           	psect	text30
  7077  0002                     __ptext30:	
  7078 ;; *************** function _PROTOCOL_EXT *****************
  7079 ;; Defined at:
  7080 ;;		line 116 in file "protocol.c"
  7081 ;; Parameters:    Size  Location     Type
  7082 ;;  char_buf        1    wreg     PTR unsigned char 
  7083 ;;		 -> buf(48), I2C1_StatusCallback@ext_buf(48), 
  7084 ;; Auto vars:     Size  Location     Type
  7085 ;;  char_buf        1    1[BANK0 ] PTR unsigned char 
  7086 ;;		 -> buf(48), I2C1_StatusCallback@ext_buf(48), 
  7087 ;; Return value:  Size  Location     Type
  7088 ;;                  1    wreg      void 
  7089 ;; Registers used:
  7090 ;;		wreg, status,2, status,0
  7091 ;; Tracked objects:
  7092 ;;		On entry : 0/0
  7093 ;;		On exit  : 0/0
  7094 ;;		Unchanged: 0/0
  7095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7097 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7099 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7100 ;;Total ram usage:        1 bytes
  7101 ;; Hardware stack levels used:    1
  7102 ;; Hardware stack levels required when called:    5
  7103 ;; This function calls:
  7104 ;;		Nothing
  7105 ;; This function is called by:
  7106 ;;		_PROTOCOL_Loop
  7107 ;; This function uses a non-reentrant model
  7108 ;;
  7109                           
  7110                           
  7111                           ;psect for function _PROTOCOL_EXT
  7112  0002                     _PROTOCOL_EXT:	
  7113                           
  7114                           ;incstack = 0
  7115                           ; Regs used in _PROTOCOL_EXT: [wreg+status,2+status,0]
  7116  0002  0008               	return
  7117  0003                     __end_of_PROTOCOL_EXT:	
  7118                           
  7119                           	psect	text31
  7120  0C58                     __ptext31:	
  7121 ;; *************** function _EUSART_Read *****************
  7122 ;; Defined at:
  7123 ;;		line 112 in file "mcc_generated_files/eusart.c"
  7124 ;; Parameters:    Size  Location     Type
  7125 ;;		None
  7126 ;; Auto vars:     Size  Location     Type
  7127 ;;  readValue       1    2[BANK0 ] unsigned char 
  7128 ;; Return value:  Size  Location     Type
  7129 ;;                  1    wreg      unsigned char 
  7130 ;; Registers used:
  7131 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7132 ;; Tracked objects:
  7133 ;;		On entry : 0/0
  7134 ;;		On exit  : 0/0
  7135 ;;		Unchanged: 0/0
  7136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7138 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7139 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7140 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7141 ;;Total ram usage:        2 bytes
  7142 ;; Hardware stack levels used:    1
  7143 ;; Hardware stack levels required when called:    5
  7144 ;; This function calls:
  7145 ;;		Nothing
  7146 ;; This function is called by:
  7147 ;;		_PROTOCOL_Loop
  7148 ;;		_getch
  7149 ;; This function uses a non-reentrant model
  7150 ;;
  7151                           
  7152                           
  7153                           ;psect for function _EUSART_Read
  7154  0C58                     _EUSART_Read:	
  7155                           
  7156                           ;eusart.c: 114: uint8_t readValue = 0;
  7157                           
  7158                           ;incstack = 0
  7159                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  7160  0C58  0020               	movlb	0	; select bank0
  7161  0C59  01A2               	clrf	EUSART_Read@readValue
  7162  0C5A                     l4259:	
  7163                           ;eusart.c: 117: {
  7164                           
  7165                           ;eusart.c: 116: while(0 == eusartRxCount)
  7166                           
  7167  0C5A  0864               	movf	_eusartRxCount,w	;volatile
  7168  0C5B  1903               	btfsc	3,2
  7169  0C5C  2C5A               	goto	l4259
  7170                           
  7171                           ;eusart.c: 118: }
  7172                           ;eusart.c: 120: readValue = eusartRxBuffer[eusartRxTail++];
  7173  0C5D  0865               	movf	_eusartRxTail,w
  7174  0C5E  3E20               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
  7175  0C5F  0086               	movwf	6
  7176  0C60  3001               	movlw	1	; select bank2/3
  7177  0C61  0087               	movwf	7
  7178  0C62  0801               	movf	1,w
  7179  0C63  00A1               	movwf	??_EUSART_Read
  7180  0C64  0821               	movf	??_EUSART_Read,w
  7181  0C65  00A2               	movwf	EUSART_Read@readValue
  7182  0C66  3001               	movlw	1
  7183  0C67  00A1               	movwf	??_EUSART_Read
  7184  0C68  0821               	movf	??_EUSART_Read,w
  7185  0C69  07E5               	addwf	_eusartRxTail,f	;volatile
  7186                           
  7187                           ;eusart.c: 121: if(sizeof(eusartRxBuffer) <= eusartRxTail)
  7188  0C6A  3008               	movlw	8
  7189  0C6B  0265               	subwf	_eusartRxTail,w	;volatile
  7190  0C6C  1803               	btfsc	3,0
  7191                           
  7192                           ;eusart.c: 122: {
  7193                           ;eusart.c: 123: eusartRxTail = 0;
  7194  0C6D  01E5               	clrf	_eusartRxTail	;volatile
  7195                           
  7196                           ;eusart.c: 124: }
  7197                           ;eusart.c: 125: PIE1bits.RCIE = 0;
  7198  0C6E  0021               	movlb	1	; select bank1
  7199  0C6F  1291               	bcf	17,5	;volatile
  7200                           
  7201                           ;eusart.c: 126: eusartRxCount--;
  7202  0C70  3001               	movlw	1
  7203  0C71  0020               	movlb	0	; select bank0
  7204  0C72  02E4               	subwf	_eusartRxCount,f	;volatile
  7205                           
  7206                           ;eusart.c: 127: PIE1bits.RCIE = 1;
  7207  0C73  0021               	movlb	1	; select bank1
  7208  0C74  1691               	bsf	17,5	;volatile
  7209                           
  7210                           ;eusart.c: 129: return readValue;
  7211  0C75  0020               	movlb	0	; select bank0
  7212  0C76  0822               	movf	EUSART_Read@readValue,w
  7213  0C77  0008               	return
  7214  0C78                     __end_of_EUSART_Read:	
  7215                           
  7216                           	psect	text32
  7217  0EFF                     __ptext32:	
  7218 ;; *************** function _PROTOCOL_Initialize *****************
  7219 ;; Defined at:
  7220 ;;		line 59 in file "protocol.c"
  7221 ;; Parameters:    Size  Location     Type
  7222 ;;  device_id       2    2[BANK0 ] PTR const unsigned char 
  7223 ;;		 -> STR_1(10), 
  7224 ;;  start_handle    1    4[BANK0 ] PTR void 
  7225 ;;		 -> NULL(0), 
  7226 ;;  stop_handler    1    5[BANK0 ] PTR void 
  7227 ;;		 -> NULL(0), 
  7228 ;;  set_handler     1    6[BANK0 ] PTR void 
  7229 ;;		 -> NULL(0), 
  7230 ;;  inv_handler     2    7[BANK0 ] PTR void 
  7231 ;;		 -> inv_handler(1), 
  7232 ;;  scaler          1    9[BANK0 ] unsigned char 
  7233 ;; Auto vars:     Size  Location     Type
  7234 ;;		None
  7235 ;; Return value:  Size  Location     Type
  7236 ;;                  1    wreg      void 
  7237 ;; Registers used:
  7238 ;;		wreg, status,2, status,0, pclath, cstack
  7239 ;; Tracked objects:
  7240 ;;		On entry : 0/0
  7241 ;;		On exit  : 0/0
  7242 ;;		Unchanged: 0/0
  7243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7244 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7245 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7246 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7247 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7248 ;;Total ram usage:       10 bytes
  7249 ;; Hardware stack levels used:    1
  7250 ;; Hardware stack levels required when called:    6
  7251 ;; This function calls:
  7252 ;;		_DATAEE_ReadByte
  7253 ;; This function is called by:
  7254 ;;		_main
  7255 ;; This function uses a non-reentrant model
  7256 ;;
  7257                           
  7258                           
  7259                           ;psect for function _PROTOCOL_Initialize
  7260  0EFF                     _PROTOCOL_Initialize:	
  7261                           
  7262                           ;protocol.c: 60: device_id_ = device_id;
  7263                           
  7264                           ;incstack = 0
  7265                           ; Regs used in _PROTOCOL_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7266  0EFF  0020               	movlb	0	; select bank0
  7267  0F00  0823               	movf	PROTOCOL_Initialize@device_id+1,w
  7268  0F01  0021               	movlb	1	; select bank1
  7269  0F02  00E2               	movwf	(_device_id_+1)^(0+128)
  7270  0F03  0020               	movlb	0	; select bank0
  7271  0F04  0822               	movf	PROTOCOL_Initialize@device_id,w
  7272  0F05  0021               	movlb	1	; select bank1
  7273  0F06  00E1               	movwf	_device_id_^(0+128)
  7274                           
  7275                           ;protocol.c: 61: PROTOCOL_Start_Handler = start_handler;
  7276  0F07  0020               	movlb	0	; select bank0
  7277  0F08  0824               	movf	PROTOCOL_Initialize@start_handler,w
  7278  0F09  00AA               	movwf	??_PROTOCOL_Initialize
  7279  0F0A  3000               	movlw	0
  7280  0F0B  00AB               	movwf	??_PROTOCOL_Initialize+1
  7281  0F0C  082A               	movf	??_PROTOCOL_Initialize,w
  7282  0F0D  0021               	movlb	1	; select bank1
  7283  0F0E  00E7               	movwf	_PROTOCOL_Start_Handler^(0+128)
  7284  0F0F  0020               	movlb	0	; select bank0
  7285  0F10  082B               	movf	??_PROTOCOL_Initialize+1,w
  7286  0F11  0021               	movlb	1	; select bank1
  7287  0F12  00E8               	movwf	(_PROTOCOL_Start_Handler+1)^(0+128)
  7288                           
  7289                           ;protocol.c: 62: PROTOCOL_Stop_Handler = stop_handler;
  7290  0F13  0020               	movlb	0	; select bank0
  7291  0F14  0825               	movf	PROTOCOL_Initialize@stop_handler,w
  7292  0F15  00AA               	movwf	??_PROTOCOL_Initialize
  7293  0F16  3000               	movlw	0
  7294  0F17  00AB               	movwf	??_PROTOCOL_Initialize+1
  7295  0F18  082A               	movf	??_PROTOCOL_Initialize,w
  7296  0F19  0021               	movlb	1	; select bank1
  7297  0F1A  00E5               	movwf	_PROTOCOL_Stop_Handler^(0+128)
  7298  0F1B  0020               	movlb	0	; select bank0
  7299  0F1C  082B               	movf	??_PROTOCOL_Initialize+1,w
  7300  0F1D  0021               	movlb	1	; select bank1
  7301  0F1E  00E6               	movwf	(_PROTOCOL_Stop_Handler+1)^(0+128)
  7302                           
  7303                           ;protocol.c: 63: PROTOCOL_Set_Handler = set_handler;
  7304  0F1F  0020               	movlb	0	; select bank0
  7305  0F20  0826               	movf	PROTOCOL_Initialize@set_handler,w
  7306  0F21  00AA               	movwf	??_PROTOCOL_Initialize
  7307  0F22  3000               	movlw	0
  7308  0F23  00AB               	movwf	??_PROTOCOL_Initialize+1
  7309  0F24  082A               	movf	??_PROTOCOL_Initialize,w
  7310  0F25  0021               	movlb	1	; select bank1
  7311  0F26  00E3               	movwf	_PROTOCOL_Set_Handler^(0+128)
  7312  0F27  0020               	movlb	0	; select bank0
  7313  0F28  082B               	movf	??_PROTOCOL_Initialize+1,w
  7314  0F29  0021               	movlb	1	; select bank1
  7315  0F2A  00E4               	movwf	(_PROTOCOL_Set_Handler+1)^(0+128)
  7316                           
  7317                           ;protocol.c: 66: value = DATAEE_ReadByte(1);
  7318  0F2B  3001               	movlw	1
  7319  0F2C  318B  2331  318E   	fcall	_DATAEE_ReadByte
  7320  0F2F  0020               	movlb	0	; select bank0
  7321  0F30  00AA               	movwf	??_PROTOCOL_Initialize
  7322  0F31  082A               	movf	??_PROTOCOL_Initialize,w
  7323  0F32  00E3               	movwf	_value
  7324                           
  7325                           ;protocol.c: 68: slave_address = DATAEE_ReadByte(0);
  7326  0F33  3000               	movlw	0
  7327  0F34  318B  2331         	fcall	_DATAEE_ReadByte
  7328  0F36  0020               	movlb	0	; select bank0
  7329  0F37  00AA               	movwf	??_PROTOCOL_Initialize
  7330  0F38  082A               	movf	??_PROTOCOL_Initialize,w
  7331  0F39  0021               	movlb	1	; select bank1
  7332  0F3A  00C0               	movwf	_slave_address^(0+128)
  7333                           
  7334                           ;protocol.c: 71: readbuf.status = COMPLETE;
  7335  0F3B  3003               	movlw	3
  7336  0F3C  0020               	movlb	0	; select bank0
  7337  0F3D  00AA               	movwf	??_PROTOCOL_Initialize
  7338  0F3E  082A               	movf	??_PROTOCOL_Initialize,w
  7339  0F3F  0021               	movlb	1	; select bank1
  7340  0F40  00CB               	movwf	(_readbuf^(0+128)+4)
  7341                           
  7342                           ;protocol.c: 72: PROTOCOL_Inv_Handler = inv_handler;
  7343  0F41  0020               	movlb	0	; select bank0
  7344  0F42  0828               	movf	PROTOCOL_Initialize@inv_handler+1,w
  7345  0F43  0021               	movlb	1	; select bank1
  7346  0F44  00B0               	movwf	(_PROTOCOL_Inv_Handler+1)^(0+128)
  7347  0F45  0020               	movlb	0	; select bank0
  7348  0F46  0827               	movf	PROTOCOL_Initialize@inv_handler,w
  7349  0F47  0021               	movlb	1	; select bank1
  7350  0F48  00AF               	movwf	_PROTOCOL_Inv_Handler^(0+128)
  7351                           
  7352                           ;protocol.c: 73: tmr_scaler = scaler;
  7353  0F49  0020               	movlb	0	; select bank0
  7354  0F4A  0829               	movf	PROTOCOL_Initialize@scaler,w
  7355  0F4B  00AA               	movwf	??_PROTOCOL_Initialize
  7356  0F4C  082A               	movf	??_PROTOCOL_Initialize,w
  7357  0F4D  0021               	movlb	1	; select bank1
  7358  0F4E  00E9               	movwf	_tmr_scaler^(0+128)
  7359  0F4F  0008               	return
  7360  0F50                     __end_of_PROTOCOL_Initialize:	
  7361                           
  7362                           	psect	text33
  7363  0B31                     __ptext33:	
  7364 ;; *************** function _DATAEE_ReadByte *****************
  7365 ;; Defined at:
  7366 ;;		line 204 in file "mcc_generated_files/memory.c"
  7367 ;; Parameters:    Size  Location     Type
  7368 ;;  bAdd            1    wreg     unsigned char 
  7369 ;; Auto vars:     Size  Location     Type
  7370 ;;  bAdd            1    1[BANK0 ] unsigned char 
  7371 ;; Return value:  Size  Location     Type
  7372 ;;                  1    wreg      unsigned char 
  7373 ;; Registers used:
  7374 ;;		wreg
  7375 ;; Tracked objects:
  7376 ;;		On entry : 0/0
  7377 ;;		On exit  : 0/0
  7378 ;;		Unchanged: 0/0
  7379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7381 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7383 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7384 ;;Total ram usage:        1 bytes
  7385 ;; Hardware stack levels used:    1
  7386 ;; Hardware stack levels required when called:    5
  7387 ;; This function calls:
  7388 ;;		Nothing
  7389 ;; This function is called by:
  7390 ;;		_PROTOCOL_Initialize
  7391 ;; This function uses a non-reentrant model
  7392 ;;
  7393                           
  7394                           
  7395                           ;psect for function _DATAEE_ReadByte
  7396  0B31                     _DATAEE_ReadByte:	
  7397                           
  7398                           ;incstack = 0
  7399                           ; Regs used in _DATAEE_ReadByte: [wreg]
  7400                           ;DATAEE_ReadByte@bAdd stored from wreg
  7401  0B31  0020               	movlb	0	; select bank0
  7402  0B32  00A1               	movwf	DATAEE_ReadByte@bAdd
  7403                           
  7404                           ;memory.c: 206: EEADRL = (bAdd & 0x0ff);
  7405  0B33  0821               	movf	DATAEE_ReadByte@bAdd,w
  7406  0B34  0023               	movlb	3	; select bank3
  7407  0B35  0091               	movwf	17	;volatile
  7408                           
  7409                           ;memory.c: 207: EECON1bits.CFGS = 0;
  7410  0B36  1315               	bcf	21,6	;volsfr
  7411                           
  7412                           ;memory.c: 208: EECON1bits.EEPGD = 0;
  7413  0B37  1395               	bcf	21,7	;volsfr
  7414                           
  7415                           ;memory.c: 209: EECON1bits.RD = 1;
  7416  0B38  1415               	bsf	21,0	;volsfr
  7417                           
  7418                           ;memory.c: 210: __nop();
  7419  0B39  0000               	nop
  7420                           
  7421                           ;memory.c: 211: __nop();
  7422  0B3A  0000               	nop
  7423                           
  7424                           ;memory.c: 213: return (EEDATL);
  7425  0B3B  0023               	movlb	3	; select bank3
  7426  0B3C  0813               	movf	19,w	;volatile
  7427  0B3D  0008               	return
  7428  0B3E                     __end_of_DATAEE_ReadByte:	
  7429                           
  7430                           	psect	text34
  7431  0C3A                     __ptext34:	
  7432 ;; *************** function _PIN_MANAGER_Initialize *****************
  7433 ;; Defined at:
  7434 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
  7435 ;; Parameters:    Size  Location     Type
  7436 ;;		None
  7437 ;; Auto vars:     Size  Location     Type
  7438 ;;		None
  7439 ;; Return value:  Size  Location     Type
  7440 ;;                  1    wreg      void 
  7441 ;; Registers used:
  7442 ;;		wreg, status,2
  7443 ;; Tracked objects:
  7444 ;;		On entry : 0/0
  7445 ;;		On exit  : 0/0
  7446 ;;		Unchanged: 0/0
  7447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7449 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7451 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7452 ;;Total ram usage:        0 bytes
  7453 ;; Hardware stack levels used:    1
  7454 ;; Hardware stack levels required when called:    5
  7455 ;; This function calls:
  7456 ;;		Nothing
  7457 ;; This function is called by:
  7458 ;;		_main
  7459 ;;		_SYSTEM_Initialize
  7460 ;; This function uses a non-reentrant model
  7461 ;;
  7462                           
  7463                           
  7464                           ;psect for function _PIN_MANAGER_Initialize
  7465  0C3A                     _PIN_MANAGER_Initialize:	
  7466                           
  7467                           ;pin_manager.c: 56: LATA = 0x00;
  7468                           
  7469                           ;incstack = 0
  7470                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  7471  0C3A  0022               	movlb	2	; select bank2
  7472  0C3B  018C               	clrf	12	;volatile
  7473                           
  7474                           ;pin_manager.c: 57: LATB = 0x00;
  7475  0C3C  018D               	clrf	13	;volatile
  7476                           
  7477                           ;pin_manager.c: 58: LATC = 0x00;
  7478  0C3D  018E               	clrf	14	;volatile
  7479                           
  7480                           ;pin_manager.c: 63: TRISA = 0x3F;
  7481  0C3E  303F               	movlw	63
  7482  0C3F  0021               	movlb	1	; select bank1
  7483  0C40  008C               	movwf	12	;volatile
  7484                           
  7485                           ;pin_manager.c: 64: TRISB = 0xF0;
  7486  0C41  30F0               	movlw	240
  7487  0C42  008D               	movwf	13	;volatile
  7488                           
  7489                           ;pin_manager.c: 65: TRISC = 0x7F;
  7490  0C43  307F               	movlw	127
  7491  0C44  008E               	movwf	14	;volatile
  7492                           
  7493                           ;pin_manager.c: 70: ANSELC = 0x4F;
  7494  0C45  304F               	movlw	79
  7495  0C46  0023               	movlb	3	; select bank3
  7496  0C47  008E               	movwf	14	;volatile
  7497                           
  7498                           ;pin_manager.c: 71: ANSELB = 0x00;
  7499  0C48  018D               	clrf	13	;volatile
  7500                           
  7501                           ;pin_manager.c: 72: ANSELA = 0x17;
  7502  0C49  3017               	movlw	23
  7503  0C4A  008C               	movwf	12	;volatile
  7504                           
  7505                           ;pin_manager.c: 77: WPUB = 0x00;
  7506  0C4B  0024               	movlb	4	; select bank4
  7507  0C4C  018D               	clrf	13	;volatile
  7508                           
  7509                           ;pin_manager.c: 78: WPUA = 0x3F;
  7510  0C4D  303F               	movlw	63
  7511  0C4E  008C               	movwf	12	;volatile
  7512                           
  7513                           ;pin_manager.c: 79: WPUC = 0x7F;
  7514  0C4F  307F               	movlw	127
  7515  0C50  008E               	movwf	14	;volatile
  7516                           
  7517                           ;pin_manager.c: 80: OPTION_REGbits.nWPUEN = 0;
  7518  0C51  0021               	movlb	1	; select bank1
  7519  0C52  1395               	bcf	21,7	;volatile
  7520                           
  7521                           ;pin_manager.c: 86: APFCON1 = 0x00;
  7522  0C53  0022               	movlb	2	; select bank2
  7523  0C54  019E               	clrf	30	;volatile
  7524                           
  7525                           ;pin_manager.c: 87: APFCON0 = 0x84;
  7526  0C55  3084               	movlw	132
  7527  0C56  009D               	movwf	29	;volatile
  7528  0C57  0008               	return
  7529  0C58                     __end_of_PIN_MANAGER_Initialize:	
  7530                           
  7531                           	psect	text35
  7532  0AF6                     __ptext35:	
  7533 ;; *************** function _OSCILLATOR_Initialize *****************
  7534 ;; Defined at:
  7535 ;;		line 81 in file "mcc_generated_files/mcc.c"
  7536 ;; Parameters:    Size  Location     Type
  7537 ;;		None
  7538 ;; Auto vars:     Size  Location     Type
  7539 ;;		None
  7540 ;; Return value:  Size  Location     Type
  7541 ;;                  1    wreg      void 
  7542 ;; Registers used:
  7543 ;;		wreg, status,2
  7544 ;; Tracked objects:
  7545 ;;		On entry : 0/0
  7546 ;;		On exit  : 0/0
  7547 ;;		Unchanged: 0/0
  7548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7550 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7552 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7553 ;;Total ram usage:        0 bytes
  7554 ;; Hardware stack levels used:    1
  7555 ;; Hardware stack levels required when called:    5
  7556 ;; This function calls:
  7557 ;;		Nothing
  7558 ;; This function is called by:
  7559 ;;		_main
  7560 ;;		_SYSTEM_Initialize
  7561 ;; This function uses a non-reentrant model
  7562 ;;
  7563                           
  7564                           
  7565                           ;psect for function _OSCILLATOR_Initialize
  7566  0AF6                     _OSCILLATOR_Initialize:	
  7567                           
  7568                           ;mcc.c: 84: OSCCON = 0x68;
  7569                           
  7570                           ;incstack = 0
  7571                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  7572  0AF6  3068               	movlw	104
  7573  0AF7  0021               	movlb	1	; select bank1
  7574  0AF8  0099               	movwf	25	;volatile
  7575                           
  7576                           ;mcc.c: 86: OSCTUNE = 0x00;
  7577  0AF9  0198               	clrf	24	;volatile
  7578  0AFA  0008               	return
  7579  0AFB                     __end_of_OSCILLATOR_Initialize:	
  7580                           
  7581                           	psect	text36
  7582  0BCA                     __ptext36:	
  7583 ;; *************** function _I2C2_Initialize *****************
  7584 ;; Defined at:
  7585 ;;		line 198 in file "mcc_generated_files/i2c2.c"
  7586 ;; Parameters:    Size  Location     Type
  7587 ;;		None
  7588 ;; Auto vars:     Size  Location     Type
  7589 ;;		None
  7590 ;; Return value:  Size  Location     Type
  7591 ;;                  1    wreg      void 
  7592 ;; Registers used:
  7593 ;;		wreg, status,2
  7594 ;; Tracked objects:
  7595 ;;		On entry : 0/0
  7596 ;;		On exit  : 0/0
  7597 ;;		Unchanged: 0/0
  7598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7600 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7601 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7602 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7603 ;;Total ram usage:        1 bytes
  7604 ;; Hardware stack levels used:    1
  7605 ;; Hardware stack levels required when called:    5
  7606 ;; This function calls:
  7607 ;;		Nothing
  7608 ;; This function is called by:
  7609 ;;		_main
  7610 ;;		_SYSTEM_Initialize
  7611 ;; This function uses a non-reentrant model
  7612 ;;
  7613                           
  7614                           
  7615                           ;psect for function _I2C2_Initialize
  7616  0BCA                     _I2C2_Initialize:	
  7617                           
  7618                           ;i2c2.c: 200: i2c2_object.pTrHead = i2c2_tr_queue;
  7619                           
  7620                           ;incstack = 0
  7621                           ; Regs used in _I2C2_Initialize: [wreg+status,2]
  7622  0BCA  30D8               	movlw	(low (_i2c2_tr_queue| 0))& (0+255)
  7623  0BCB  0020               	movlb	0	; select bank0
  7624  0BCC  00A1               	movwf	??_I2C2_Initialize
  7625  0BCD  0821               	movf	??_I2C2_Initialize,w
  7626  0BCE  0021               	movlb	1	; select bank1
  7627  0BCF  00A9               	movwf	(low ((_i2c2_object| 0+1)))^(0+128)
  7628                           
  7629                           ;i2c2.c: 201: i2c2_object.pTrTail = i2c2_tr_queue;
  7630  0BD0  30D8               	movlw	(low (_i2c2_tr_queue| 0))& (0+255)
  7631  0BD1  0020               	movlb	0	; select bank0
  7632  0BD2  00A1               	movwf	??_I2C2_Initialize
  7633  0BD3  0821               	movf	??_I2C2_Initialize,w
  7634  0BD4  0021               	movlb	1	; select bank1
  7635  0BD5  00A8               	movwf	_i2c2_object^(0+128)
  7636                           
  7637                           ;i2c2.c: 202: i2c2_object.trStatus.s.empty = 1;
  7638  0BD6  14AA               	bsf	(_i2c2_object^(0+128)+2),1
  7639                           
  7640                           ;i2c2.c: 203: i2c2_object.trStatus.s.full = 0;
  7641  0BD7  102A               	bcf	(_i2c2_object^(0+128)+2),0
  7642                           
  7643                           ;i2c2.c: 205: i2c2_object.i2cErrors = 0;
  7644  0BD8  01AC               	clrf	(_i2c2_object^(0+128)+4)
  7645                           
  7646                           ;i2c2.c: 208: SSP2STAT = 0x00;
  7647  0BD9  0024               	movlb	4	; select bank4
  7648  0BDA  019C               	clrf	28	;volatile
  7649                           
  7650                           ;i2c2.c: 210: SSP2CON1 = 0x28;
  7651  0BDB  3028               	movlw	40
  7652  0BDC  009D               	movwf	29	;volatile
  7653                           
  7654                           ;i2c2.c: 212: SSP2CON3 = 0x00;
  7655  0BDD  019F               	clrf	31	;volatile
  7656                           
  7657                           ;i2c2.c: 214: SSP2ADD = 0x09;
  7658  0BDE  3009               	movlw	9
  7659  0BDF  009A               	movwf	26	;volatile
  7660                           
  7661                           ;i2c2.c: 218: PIR4bits.SSP2IF = 0;
  7662  0BE0  0020               	movlb	0	; select bank0
  7663  0BE1  1014               	bcf	20,0	;volatile
  7664                           
  7665                           ;i2c2.c: 220: PIE4bits.SSP2IE = 1;
  7666  0BE2  0021               	movlb	1	; select bank1
  7667  0BE3  1414               	bsf	20,0	;volatile
  7668  0BE4  0008               	return
  7669  0BE5                     __end_of_I2C2_Initialize:	
  7670                           
  7671                           	psect	text37
  7672  0C98                     __ptext37:	
  7673 ;; *************** function _I2C1_Initialize *****************
  7674 ;; Defined at:
  7675 ;;		line 30 in file "mcc_generated_files/i2c1.c"
  7676 ;; Parameters:    Size  Location     Type
  7677 ;;		None
  7678 ;; Auto vars:     Size  Location     Type
  7679 ;;		None
  7680 ;; Return value:  Size  Location     Type
  7681 ;;                  1    wreg      void 
  7682 ;; Registers used:
  7683 ;;		wreg, status,2, status,0, pclath, cstack
  7684 ;; Tracked objects:
  7685 ;;		On entry : 0/0
  7686 ;;		On exit  : 0/0
  7687 ;;		Unchanged: 0/0
  7688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7689 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7690 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7691 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7692 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7693 ;;Total ram usage:        2 bytes
  7694 ;; Hardware stack levels used:    1
  7695 ;; Hardware stack levels required when called:    6
  7696 ;; This function calls:
  7697 ;;		_PROTOCOL_Read_Device_Address
  7698 ;; This function is called by:
  7699 ;;		_main
  7700 ;;		_SYSTEM_Initialize
  7701 ;; This function uses a non-reentrant model
  7702 ;;
  7703                           
  7704                           
  7705                           ;psect for function _I2C1_Initialize
  7706  0C98                     _I2C1_Initialize:	
  7707                           
  7708                           ;i2c1.c: 34: _delay((unsigned long)((2000)*(4000000/4000.0)));
  7709                           
  7710                           ;incstack = 0
  7711                           ; Regs used in _I2C1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7712  0C98  300B               	movlw	11
  7713  0C99  0020               	movlb	0	; select bank0
  7714  0C9A  00A2               	movwf	??_I2C1_Initialize+1
  7715  0C9B  3026               	movlw	38
  7716  0C9C  00A1               	movwf	??_I2C1_Initialize
  7717  0C9D  305D               	movlw	93
  7718  0C9E                     u4027:	
  7719  0C9E  0B89               	decfsz	9,f
  7720  0C9F  2C9E               	goto	u4027
  7721  0CA0  0BA1               	decfsz	??_I2C1_Initialize,f
  7722  0CA1  2C9E               	goto	u4027
  7723  0CA2  0BA2               	decfsz	??_I2C1_Initialize+1,f
  7724  0CA3  2C9E               	goto	u4027
  7725  0CA4  3200               	nop2
  7726                           
  7727                           ;i2c1.c: 38: SSP1STAT = 0x80;
  7728  0CA5  3080               	movlw	128
  7729  0CA6  0024               	movlb	4	; select bank4
  7730  0CA7  0094               	movwf	20	;volatile
  7731                           
  7732                           ;i2c1.c: 40: SSP1CON1 = 0x26;
  7733  0CA8  3026               	movlw	38
  7734  0CA9  0095               	movwf	21	;volatile
  7735                           
  7736                           ;i2c1.c: 42: SSP1CON2 = 0x81;
  7737  0CAA  3081               	movlw	129
  7738  0CAB  0096               	movwf	22	;volatile
  7739                           
  7740                           ;i2c1.c: 44: SSP1CON3 = 0x00;
  7741  0CAC  0197               	clrf	23	;volatile
  7742                           
  7743                           ;i2c1.c: 46: SSP1MSK = (0x7F << 1);
  7744  0CAD  30FE               	movlw	254
  7745  0CAE  0093               	movwf	19	;volatile
  7746                           
  7747                           ;i2c1.c: 48: SSP1ADD = (PROTOCOL_Read_Device_Address() << 1);
  7748  0CAF  318A  22D5         	fcall	_PROTOCOL_Read_Device_Address
  7749  0CB1  0709               	addwf	9,w
  7750  0CB2  0024               	movlb	4	; select bank4
  7751  0CB3  0092               	movwf	18	;volatile
  7752                           
  7753                           ;i2c1.c: 51: PIR1bits.SSP1IF = 0;
  7754  0CB4  0020               	movlb	0	; select bank0
  7755  0CB5  1191               	bcf	17,3	;volatile
  7756                           
  7757                           ;i2c1.c: 53: PIE1bits.SSP1IE = 1;
  7758  0CB6  0021               	movlb	1	; select bank1
  7759  0CB7  1591               	bsf	17,3	;volatile
  7760  0CB8  0008               	return
  7761  0CB9                     __end_of_I2C1_Initialize:	
  7762                           
  7763                           	psect	text38
  7764  0AD5                     __ptext38:	
  7765 ;; *************** function _PROTOCOL_Read_Device_Address *****************
  7766 ;; Defined at:
  7767 ;;		line 89 in file "protocol.c"
  7768 ;; Parameters:    Size  Location     Type
  7769 ;;		None
  7770 ;; Auto vars:     Size  Location     Type
  7771 ;;		None
  7772 ;; Return value:  Size  Location     Type
  7773 ;;                  1    wreg      unsigned char 
  7774 ;; Registers used:
  7775 ;;		wreg
  7776 ;; Tracked objects:
  7777 ;;		On entry : 0/0
  7778 ;;		On exit  : 0/0
  7779 ;;		Unchanged: 0/0
  7780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7782 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7783 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7784 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7785 ;;Total ram usage:        0 bytes
  7786 ;; Hardware stack levels used:    1
  7787 ;; Hardware stack levels required when called:    5
  7788 ;; This function calls:
  7789 ;;		Nothing
  7790 ;; This function is called by:
  7791 ;;		_I2C1_Initialize
  7792 ;;		_PROTOCOL_Loop
  7793 ;; This function uses a non-reentrant model
  7794 ;;
  7795                           
  7796                           
  7797                           ;psect for function _PROTOCOL_Read_Device_Address
  7798  0AD5                     _PROTOCOL_Read_Device_Address:	
  7799                           
  7800                           ;protocol.c: 90: return slave_address;
  7801                           
  7802                           ;incstack = 0
  7803                           ; Regs used in _PROTOCOL_Read_Device_Address: [wreg]
  7804  0AD5  0021               	movlb	1	; select bank1
  7805  0AD6  0840               	movf	_slave_address^(0+128),w
  7806  0AD7  0008               	return
  7807  0AD8                     __end_of_PROTOCOL_Read_Device_Address:	
  7808                           
  7809                           	psect	text39
  7810  0B95                     __ptext39:	
  7811 ;; *************** function _EUSART_Initialize *****************
  7812 ;; Defined at:
  7813 ;;		line 75 in file "mcc_generated_files/eusart.c"
  7814 ;; Parameters:    Size  Location     Type
  7815 ;;		None
  7816 ;; Auto vars:     Size  Location     Type
  7817 ;;		None
  7818 ;; Return value:  Size  Location     Type
  7819 ;;                  1    wreg      void 
  7820 ;; Registers used:
  7821 ;;		wreg, status,2
  7822 ;; Tracked objects:
  7823 ;;		On entry : 0/0
  7824 ;;		On exit  : 0/0
  7825 ;;		Unchanged: 0/0
  7826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7829 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7830 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7831 ;;Total ram usage:        1 bytes
  7832 ;; Hardware stack levels used:    1
  7833 ;; Hardware stack levels required when called:    5
  7834 ;; This function calls:
  7835 ;;		Nothing
  7836 ;; This function is called by:
  7837 ;;		_main
  7838 ;;		_SYSTEM_Initialize
  7839 ;; This function uses a non-reentrant model
  7840 ;;
  7841                           
  7842                           
  7843                           ;psect for function _EUSART_Initialize
  7844  0B95                     _EUSART_Initialize:	
  7845                           
  7846                           ;eusart.c: 78: PIE1bits.RCIE = 0;
  7847                           
  7848                           ;incstack = 0
  7849                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  7850  0B95  0021               	movlb	1	; select bank1
  7851  0B96  1291               	bcf	17,5	;volatile
  7852                           
  7853                           ;eusart.c: 79: PIE1bits.TXIE = 0;
  7854  0B97  1211               	bcf	17,4	;volatile
  7855                           
  7856                           ;eusart.c: 84: BAUDCON = 0x08;
  7857  0B98  3008               	movlw	8
  7858  0B99  0023               	movlb	3	; select bank3
  7859  0B9A  009F               	movwf	31	;volatile
  7860                           
  7861                           ;eusart.c: 87: RCSTA = 0x90;
  7862  0B9B  3090               	movlw	144
  7863  0B9C  009D               	movwf	29	;volatile
  7864                           
  7865                           ;eusart.c: 90: TXSTA = 0x24;
  7866  0B9D  3024               	movlw	36
  7867  0B9E  009E               	movwf	30	;volatile
  7868                           
  7869                           ;eusart.c: 93: SPBRGL = 0x67;
  7870  0B9F  3067               	movlw	103
  7871  0BA0  009B               	movwf	27	;volatile
  7872                           
  7873                           ;eusart.c: 96: SPBRGH = 0x00;
  7874  0BA1  019C               	clrf	28	;volatile
  7875                           
  7876                           ;eusart.c: 100: eusartTxHead = 0;
  7877  0BA2  01FC               	clrf	_eusartTxHead	;volatile
  7878                           
  7879                           ;eusart.c: 101: eusartTxTail = 0;
  7880  0BA3  01FB               	clrf	_eusartTxTail	;volatile
  7881                           
  7882                           ;eusart.c: 102: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
  7883  0BA4  3008               	movlw	8
  7884  0BA5  0020               	movlb	0	; select bank0
  7885  0BA6  00A1               	movwf	??_EUSART_Initialize
  7886  0BA7  0821               	movf	??_EUSART_Initialize,w
  7887  0BA8  00FA               	movwf	_eusartTxBufferRemaining	;volatile
  7888                           
  7889                           ;eusart.c: 104: eusartRxHead = 0;
  7890  0BA9  01E6               	clrf	_eusartRxHead	;volatile
  7891                           
  7892                           ;eusart.c: 105: eusartRxTail = 0;
  7893  0BAA  01E5               	clrf	_eusartRxTail	;volatile
  7894                           
  7895                           ;eusart.c: 106: eusartRxCount = 0;
  7896  0BAB  01E4               	clrf	_eusartRxCount	;volatile
  7897                           
  7898                           ;eusart.c: 109: PIE1bits.RCIE = 1;
  7899  0BAC  0021               	movlb	1	; select bank1
  7900  0BAD  1691               	bsf	17,5	;volatile
  7901  0BAE  0008               	return
  7902  0BAF                     __end_of_EUSART_Initialize:	
  7903                           
  7904                           	psect	intentry
  7905  0004                     __pintentry:	
  7906 ;; *************** function _INTERRUPT_InterruptManager *****************
  7907 ;; Defined at:
  7908 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  7909 ;; Parameters:    Size  Location     Type
  7910 ;;		None
  7911 ;; Auto vars:     Size  Location     Type
  7912 ;;		None
  7913 ;; Return value:  Size  Location     Type
  7914 ;;                  1    wreg      void 
  7915 ;; Registers used:
  7916 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7917 ;; Tracked objects:
  7918 ;;		On entry : 0/0
  7919 ;;		On exit  : 0/0
  7920 ;;		Unchanged: 0/0
  7921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7924 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7925 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7926 ;;Total ram usage:        1 bytes
  7927 ;; Hardware stack levels used:    1
  7928 ;; Hardware stack levels required when called:    4
  7929 ;; This function calls:
  7930 ;;		_EUSART_Receive_ISR
  7931 ;;		_EUSART_Transmit_ISR
  7932 ;;		_I2C1_ISR
  7933 ;;		_I2C2_BusCollisionISR
  7934 ;;		_I2C2_ISR
  7935 ;; This function is called by:
  7936 ;;		Interrupt level 1
  7937 ;; This function uses a non-reentrant model
  7938 ;;
  7939                           
  7940  0004                     _INTERRUPT_InterruptManager:	
  7941                           
  7942                           ;incstack = 0
  7943  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  7944                           
  7945                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7946  0005  3180               	pagesel	$
  7947  0006  0020               	movlb	0	; select bank0
  7948  0007  087F               	movf	127,w
  7949  0008  00A0               	movwf	??_INTERRUPT_InterruptManager
  7950                           
  7951                           ;interrupt_manager.c: 54: if(INTCONbits.PEIE == 1 && PIE1bits.TXIE == 1 && PIR1bits.TXIF
      +                           == 1)
  7952  0009  1F0B               	btfss	11,6	;volatile
  7953  000A  2815               	goto	i1l323
  7954  000B  0021               	movlb	1	; select bank1
  7955  000C  1E11               	btfss	17,4	;volatile
  7956  000D  2815               	goto	i1l323
  7957  000E  0020               	movlb	0	; select bank0
  7958  000F  1E11               	btfss	17,4	;volatile
  7959  0010  2815               	goto	i1l323
  7960                           
  7961                           ;interrupt_manager.c: 55: {
  7962                           ;interrupt_manager.c: 56: EUSART_Transmit_ISR();
  7963  0011  318B  23AF  3180   	fcall	_EUSART_Transmit_ISR
  7964                           
  7965                           ;interrupt_manager.c: 57: }
  7966  0014  2843               	goto	i1l333
  7967  0015                     i1l323:	
  7968                           
  7969                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits
      +                          .RCIF == 1)
  7970  0015  1F0B               	btfss	11,6	;volatile
  7971  0016  2821               	goto	i1l325
  7972  0017  0021               	movlb	1	; select bank1
  7973  0018  1E91               	btfss	17,5	;volatile
  7974  0019  2821               	goto	i1l325
  7975  001A  0020               	movlb	0	; select bank0
  7976  001B  1E91               	btfss	17,5	;volatile
  7977  001C  2821               	goto	i1l325
  7978                           
  7979                           ;interrupt_manager.c: 59: {
  7980                           ;interrupt_manager.c: 60: EUSART_Receive_ISR();
  7981  001D  318B  23E5  3180   	fcall	_EUSART_Receive_ISR
  7982                           
  7983                           ;interrupt_manager.c: 61: }
  7984  0020  2843               	goto	i1l333
  7985  0021                     i1l325:	
  7986                           
  7987                           ;interrupt_manager.c: 62: else if(INTCONbits.PEIE == 1 && PIE1bits.SSP1IE == 1 && PIR1bi
      +                          ts.SSP1IF == 1)
  7988  0021  1F0B               	btfss	11,6	;volatile
  7989  0022  282D               	goto	i1l327
  7990  0023  0021               	movlb	1	; select bank1
  7991  0024  1D91               	btfss	17,3	;volatile
  7992  0025  282D               	goto	i1l327
  7993  0026  0020               	movlb	0	; select bank0
  7994  0027  1D91               	btfss	17,3	;volatile
  7995  0028  282D               	goto	i1l327
  7996                           
  7997                           ;interrupt_manager.c: 63: {
  7998                           ;interrupt_manager.c: 64: I2C1_ISR();
  7999  0029  318D  2522  3180   	fcall	_I2C1_ISR
  8000                           
  8001                           ;interrupt_manager.c: 65: }
  8002  002C  2843               	goto	i1l333
  8003  002D                     i1l327:	
  8004                           
  8005                           ;interrupt_manager.c: 66: else if(INTCONbits.PEIE == 1 && PIE4bits.BCL2IE == 1 && PIR4bi
      +                          ts.BCL2IF == 1)
  8006  002D  1F0B               	btfss	11,6	;volatile
  8007  002E  2839               	goto	i1l329
  8008  002F  0021               	movlb	1	; select bank1
  8009  0030  1C94               	btfss	20,1	;volatile
  8010  0031  2839               	goto	i1l329
  8011  0032  0020               	movlb	0	; select bank0
  8012  0033  1C94               	btfss	20,1	;volatile
  8013  0034  2839               	goto	i1l329
  8014                           
  8015                           ;interrupt_manager.c: 67: {
  8016                           ;interrupt_manager.c: 68: I2C2_BusCollisionISR();
  8017  0035  318A  22C8  3180   	fcall	_I2C2_BusCollisionISR
  8018                           
  8019                           ;interrupt_manager.c: 69: }
  8020  0038  2843               	goto	i1l333
  8021  0039                     i1l329:	
  8022                           
  8023                           ;interrupt_manager.c: 70: else if(INTCONbits.PEIE == 1 && PIE4bits.SSP2IE == 1 && PIR4bi
      +                          ts.SSP2IF == 1)
  8024  0039  1F0B               	btfss	11,6	;volatile
  8025  003A  2843               	goto	i1l333
  8026  003B  0021               	movlb	1	; select bank1
  8027  003C  1C14               	btfss	20,0	;volatile
  8028  003D  2843               	goto	i1l333
  8029  003E  0020               	movlb	0	; select bank0
  8030  003F  1C14               	btfss	20,0	;volatile
  8031  0040  2843               	goto	i1l333
  8032                           
  8033                           ;interrupt_manager.c: 71: {
  8034                           ;interrupt_manager.c: 72: I2C2_ISR();
  8035  0041  3183  23E2         	fcall	_I2C2_ISR
  8036  0043                     i1l333:	
  8037                           ;interrupt_manager.c: 74: else
  8038                           ;interrupt_manager.c: 75: {
  8039                           
  8040                           ;interrupt_manager.c: 73: }
  8041                           
  8042  0043  0020               	movlb	0	; select bank0
  8043  0044  0820               	movf	??_INTERRUPT_InterruptManager,w
  8044  0045  00FF               	movwf	127
  8045  0046  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  8046  0047  0009               	retfie
  8047  0048                     __end_of_INTERRUPT_InterruptManager:	
  8048                           
  8049                           	psect	text41
  8050  03E2                     __ptext41:	
  8051 ;; *************** function _I2C2_ISR *****************
  8052 ;; Defined at:
  8053 ;;		line 233 in file "mcc_generated_files/i2c2.c"
  8054 ;; Parameters:    Size  Location     Type
  8055 ;;		None
  8056 ;; Auto vars:     Size  Location     Type
  8057 ;;		None
  8058 ;; Return value:  Size  Location     Type
  8059 ;;                  1    wreg      void 
  8060 ;; Registers used:
  8061 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8062 ;; Tracked objects:
  8063 ;;		On entry : 0/0
  8064 ;;		On exit  : 0/0
  8065 ;;		Unchanged: 0/0
  8066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8068 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8069 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8070 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8071 ;;Total ram usage:        4 bytes
  8072 ;; Hardware stack levels used:    1
  8073 ;; Hardware stack levels required when called:    1
  8074 ;; This function calls:
  8075 ;;		_I2C2_FunctionComplete
  8076 ;;		_I2C2_Stop
  8077 ;; This function is called by:
  8078 ;;		_INTERRUPT_InterruptManager
  8079 ;; This function uses a non-reentrant model
  8080 ;;
  8081                           
  8082                           
  8083                           ;psect for function _I2C2_ISR
  8084  03E2                     _I2C2_ISR:	
  8085                           
  8086                           ;i2c2.c: 236: static uint8_t *pi2c_buf_ptr;
  8087                           ;i2c2.c: 237: static uint16_t i2c_address = 0;
  8088                           ;i2c2.c: 238: static uint8_t i2c_bytes_left = 0;
  8089                           ;i2c2.c: 239: static uint8_t i2c_10bit_address_restart = 0;
  8090                           ;i2c2.c: 241: PIR4bits.SSP2IF = 0;
  8091                           
  8092                           ;incstack = 0
  8093                           ; Regs used in _I2C2_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8094  03E2  0020               	movlb	0	; select bank0
  8095  03E3  1014               	bcf	20,0	;volatile
  8096                           
  8097                           ;i2c2.c: 245: if(SSP2CON1bits.WCOL)
  8098  03E4  0024               	movlb	4	; select bank4
  8099  03E5  1F9D               	btfss	29,7	;volatile
  8100  03E6  2D26               	goto	i1l3597
  8101                           
  8102                           ;i2c2.c: 246: {
  8103                           ;i2c2.c: 248: SSP2CON1bits.WCOL = 0;
  8104  03E7  139D               	bcf	29,7	;volatile
  8105                           
  8106                           ;i2c2.c: 249: i2c2_state = S_MASTER_IDLE;
  8107  03E8  0020               	movlb	0	; select bank0
  8108  03E9  01EA               	clrf	_i2c2_state
  8109                           
  8110                           ;i2c2.c: 250: *(p_i2c2_current->pTrFlag) = I2C2_MESSAGE_FAIL;
  8111  03EA  0867               	movf	_p_i2c2_current,w
  8112  03EB  3E02               	addlw	2
  8113  03EC  0086               	movwf	6
  8114  03ED  0187               	clrf	7
  8115  03EE  0801               	movf	1,w
  8116  03EF  0086               	movwf	6
  8117  03F0  0187               	clrf	7
  8118  03F1  0181               	clrf	1
  8119  03F2  0A81               	incf	1,f
  8120                           
  8121                           ;i2c2.c: 253: p_i2c2_current = (0);
  8122  03F3  01E7               	clrf	_p_i2c2_current
  8123                           
  8124                           ;i2c2.c: 255: return;
  8125  03F4  0008               	return
  8126  03F5                     i1l184:	
  8127                           ;i2c2.c: 260: {
  8128                           ;i2c2.c: 261: case S_MASTER_IDLE:
  8129                           
  8130                           ;i2c2.c: 256: }
  8131                           ;i2c2.c: 259: switch(i2c2_state)
  8132                           
  8133                           
  8134                           ;i2c2.c: 263: if(i2c2_object.trStatus.s.empty != 1)
  8135  03F5  0021               	movlb	1	; select bank1
  8136  03F6  18AA               	btfsc	(_i2c2_object^(0+128)+2),1
  8137  03F7  0008               	return
  8138                           
  8139                           ;i2c2.c: 264: {
  8140                           ;i2c2.c: 266: p_i2c2_current = i2c2_object.pTrHead;
  8141  03F8  0829               	movf	(low ((_i2c2_object| 0+1)))^(0+128),w
  8142  03F9  00F2               	movwf	??_I2C2_ISR
  8143  03FA  0872               	movf	??_I2C2_ISR,w
  8144  03FB  0020               	movlb	0	; select bank0
  8145  03FC  00E7               	movwf	_p_i2c2_current
  8146                           
  8147                           ;i2c2.c: 267: i2c2_trb_count = i2c2_object.pTrHead->count;
  8148  03FD  0021               	movlb	1	; select bank1
  8149  03FE  0829               	movf	(low ((_i2c2_object| 0+1)))^(0+128),w
  8150  03FF  0086               	movwf	6
  8151  0400  0187               	clrf	7
  8152  0401  0801               	movf	1,w
  8153  0402  00F2               	movwf	??_I2C2_ISR
  8154  0403  0872               	movf	??_I2C2_ISR,w
  8155  0404  0020               	movlb	0	; select bank0
  8156  0405  00E9               	movwf	_i2c2_trb_count
  8157                           
  8158                           ;i2c2.c: 268: p_i2c2_trb_current = i2c2_object.pTrHead->ptrb_list;
  8159  0406  0021               	movlb	1	; select bank1
  8160  0407  0829               	movf	(low ((_i2c2_object| 0+1)))^(0+128),w
  8161  0408  0086               	movwf	6
  8162  0409  0187               	clrf	7
  8163  040A  3F41               	moviw [1]fsr1
  8164  040B  0020               	movlb	0	; select bank0
  8165  040C  00E8               	movwf	_p_i2c2_trb_current
  8166                           
  8167                           ;i2c2.c: 270: i2c2_object.pTrHead++;
  8168  040D  3003               	movlw	3
  8169  040E  00F2               	movwf	??_I2C2_ISR
  8170  040F  0872               	movf	??_I2C2_ISR,w
  8171  0410  0021               	movlb	1	; select bank1
  8172  0411  07A9               	addwf	(low ((_i2c2_object| 0+1)))^(0+128),f
  8173                           
  8174                           ;i2c2.c: 273: if(i2c2_object.pTrHead == (i2c2_tr_queue + 1))
  8175  0412  0829               	movf	(low ((_i2c2_object| 0+1)))^(0+128),w
  8176  0413  3ADB               	xorlw	(low ((_i2c2_tr_queue| 0+3)))& (0+255)
  8177  0414  1D03               	skipz
  8178  0415  2C1A               	goto	i1l3485
  8179                           
  8180                           ;i2c2.c: 274: {
  8181                           ;i2c2.c: 276: i2c2_object.pTrHead = i2c2_tr_queue;
  8182  0416  30D8               	movlw	(low (_i2c2_tr_queue| 0))& (0+255)
  8183  0417  00F2               	movwf	??_I2C2_ISR
  8184  0418  0872               	movf	??_I2C2_ISR,w
  8185  0419  00A9               	movwf	(low ((_i2c2_object| 0+1)))^(0+128)
  8186  041A                     i1l3485:	
  8187                           
  8188                           ;i2c2.c: 277: }
  8189                           ;i2c2.c: 281: i2c2_object.trStatus.s.full = 0;
  8190  041A  102A               	bcf	(_i2c2_object^(0+128)+2),0
  8191                           
  8192                           ;i2c2.c: 284: if(i2c2_object.pTrHead == i2c2_object.pTrTail)
  8193  041B  0829               	movf	(low ((_i2c2_object| 0+1)))^(0+128),w
  8194  041C  0628               	xorwf	_i2c2_object^(0+128),w
  8195  041D  1903               	btfsc	3,2
  8196                           
  8197                           ;i2c2.c: 285: {
  8198                           ;i2c2.c: 287: i2c2_object.trStatus.s.empty = 1;
  8199  041E  14AA               	bsf	(_i2c2_object^(0+128)+2),1
  8200                           
  8201                           ;i2c2.c: 288: }
  8202                           ;i2c2.c: 291: SSP2CON2bits.SEN = 1;
  8203  041F  0024               	movlb	4	; select bank4
  8204  0420  141E               	bsf	30,0	;volatile
  8205                           
  8206                           ;i2c2.c: 294: i2c2_state = S_MASTER_SEND_ADDR;
  8207  0421  3002               	movlw	2
  8208  0422  00F2               	movwf	??_I2C2_ISR
  8209  0423  0872               	movf	??_I2C2_ISR,w
  8210  0424  0020               	movlb	0	; select bank0
  8211  0425  00EA               	movwf	_i2c2_state
  8212                           
  8213                           ;i2c2.c: 295: }
  8214                           ;i2c2.c: 297: break;
  8215  0426  0008               	return
  8216  0427                     i1l189:	
  8217                           ;i2c2.c: 299: case S_MASTER_RESTART:
  8218                           
  8219                           
  8220                           ;i2c2.c: 304: SSP2CON2bits.RSEN = 1;
  8221  0427  0024               	movlb	4	; select bank4
  8222  0428  149E               	bsf	30,1	;volatile
  8223                           
  8224                           ;i2c2.c: 307: i2c2_state = S_MASTER_SEND_ADDR;
  8225  0429  3002               	movlw	2
  8226  042A  00F2               	movwf	??_I2C2_ISR
  8227  042B  0872               	movf	??_I2C2_ISR,w
  8228  042C  0020               	movlb	0	; select bank0
  8229  042D  00EA               	movwf	_i2c2_state
  8230                           
  8231                           ;i2c2.c: 309: break;
  8232  042E  0008               	return
  8233  042F                     i1l190:	
  8234                           ;i2c2.c: 311: case S_MASTER_SEND_ADDR_10BIT_LSB:
  8235                           
  8236                           
  8237                           ;i2c2.c: 313: if(SSP2CON2bits.ACKSTAT)
  8238  042F  0024               	movlb	4	; select bank4
  8239  0430  1F1E               	btfss	30,6	;volatile
  8240  0431  2C3B               	goto	i1l3497
  8241                           
  8242                           ;i2c2.c: 314: {
  8243                           ;i2c2.c: 315: i2c2_object.i2cErrors++;
  8244  0432  3001               	movlw	1
  8245  0433  00F2               	movwf	??_I2C2_ISR
  8246  0434  0872               	movf	??_I2C2_ISR,w
  8247  0435  0021               	movlb	1	; select bank1
  8248  0436  07AC               	addwf	(_i2c2_object^(0+128)+4),f
  8249                           
  8250                           ;i2c2.c: 316: I2C2_Stop(I2C2_MESSAGE_ADDRESS_NO_ACK);
  8251  0437  3004               	movlw	4
  8252  0438  318B  237D         	fcall	_I2C2_Stop
  8253                           
  8254                           ;i2c2.c: 317: }
  8255  043A  0008               	return
  8256  043B                     i1l3497:	
  8257                           
  8258                           ;i2c2.c: 318: else
  8259                           ;i2c2.c: 319: {
  8260                           ;i2c2.c: 321: SSP2BUF = (i2c_address >> 1) & 0x00FF;
  8261  043B  0020               	movlb	0	; select bank0
  8262  043C  086E               	movf	I2C2_ISR@i2c_address+1,w
  8263  043D  00F3               	movwf	??_I2C2_ISR+1
  8264  043E  086D               	movf	I2C2_ISR@i2c_address,w
  8265  043F  00F2               	movwf	??_I2C2_ISR
  8266  0440  36F3               	lsrf	??_I2C2_ISR+1,f
  8267  0441  0CF2               	rrf	??_I2C2_ISR,f
  8268  0442  0872               	movf	??_I2C2_ISR,w
  8269  0443  0024               	movlb	4	; select bank4
  8270  0444  0099               	movwf	25	;volatile
  8271                           
  8272                           ;i2c2.c: 324: if(i2c_address & 0x01)
  8273  0445  0020               	movlb	0	; select bank0
  8274  0446  1C6D               	btfss	I2C2_ISR@i2c_address,0
  8275  0447  2C4D               	goto	i1l3503
  8276                           
  8277                           ;i2c2.c: 325: {
  8278                           ;i2c2.c: 328: i2c2_state = S_MASTER_10BIT_RESTART;
  8279  0448  300B               	movlw	11
  8280  0449  00F2               	movwf	??_I2C2_ISR
  8281  044A  0872               	movf	??_I2C2_ISR,w
  8282  044B  00EA               	movwf	_i2c2_state
  8283                           
  8284                           ;i2c2.c: 329: }
  8285  044C  0008               	return
  8286  044D                     i1l3503:	
  8287                           
  8288                           ;i2c2.c: 330: else
  8289                           ;i2c2.c: 331: {
  8290                           ;i2c2.c: 333: i2c2_state = S_MASTER_SEND_DATA;
  8291  044D  3003               	movlw	3
  8292  044E  00F2               	movwf	??_I2C2_ISR
  8293  044F  0872               	movf	??_I2C2_ISR,w
  8294  0450  00EA               	movwf	_i2c2_state
  8295                           
  8296                           ;i2c2.c: 334: }
  8297                           ;i2c2.c: 335: }
  8298                           ;i2c2.c: 337: break;
  8299  0451  0008               	return
  8300  0452                     i1l195:	
  8301                           ;i2c2.c: 339: case S_MASTER_10BIT_RESTART:
  8302                           
  8303                           
  8304                           ;i2c2.c: 341: if(SSP2CON2bits.ACKSTAT)
  8305  0452  0024               	movlb	4	; select bank4
  8306  0453  1F1E               	btfss	30,6	;volatile
  8307  0454  2C5E               	goto	i1l196
  8308                           
  8309                           ;i2c2.c: 342: {
  8310                           ;i2c2.c: 343: i2c2_object.i2cErrors++;
  8311  0455  3001               	movlw	1
  8312  0456  00F2               	movwf	??_I2C2_ISR
  8313  0457  0872               	movf	??_I2C2_ISR,w
  8314  0458  0021               	movlb	1	; select bank1
  8315  0459  07AC               	addwf	(_i2c2_object^(0+128)+4),f
  8316                           
  8317                           ;i2c2.c: 344: I2C2_Stop(I2C2_MESSAGE_ADDRESS_NO_ACK);
  8318  045A  3004               	movlw	4
  8319  045B  318B  237D         	fcall	_I2C2_Stop
  8320                           
  8321                           ;i2c2.c: 345: }
  8322  045D  0008               	return
  8323  045E                     i1l196:	
  8324                           
  8325                           ;i2c2.c: 346: else
  8326                           ;i2c2.c: 347: {
  8327                           ;i2c2.c: 350: SSP2CON2bits.RSEN = 1;
  8328  045E  149E               	bsf	30,1	;volatile
  8329                           
  8330                           ;i2c2.c: 354: i2c_address = 0x00F0 | ((i2c_address >> 8) & 0x0006);
  8331  045F  0020               	movlb	0	; select bank0
  8332  0460  086E               	movf	I2C2_ISR@i2c_address+1,w
  8333  0461  00F3               	movwf	??_I2C2_ISR+1
  8334  0462  086D               	movf	I2C2_ISR@i2c_address,w
  8335  0463  00F2               	movwf	??_I2C2_ISR
  8336  0464  0873               	movf	??_I2C2_ISR+1,w
  8337  0465  00F2               	movwf	??_I2C2_ISR
  8338  0466  01F3               	clrf	??_I2C2_ISR+1
  8339  0467  3006               	movlw	6
  8340  0468  0572               	andwf	??_I2C2_ISR,w
  8341  0469  00F4               	movwf	??_I2C2_ISR+2
  8342  046A  3000               	movlw	0
  8343  046B  0573               	andwf	??_I2C2_ISR+1,w
  8344  046C  00F5               	movwf	??_I2C2_ISR+3
  8345  046D  30F0               	movlw	240
  8346  046E  0474               	iorwf	??_I2C2_ISR+2,w
  8347  046F  00ED               	movwf	I2C2_ISR@i2c_address
  8348  0470  3000               	movlw	0
  8349  0471  0475               	iorwf	??_I2C2_ISR+3,w
  8350  0472  00EE               	movwf	I2C2_ISR@i2c_address+1
  8351                           
  8352                           ;i2c2.c: 357: i2c_address |= 0x0001;
  8353  0473  146D               	bsf	I2C2_ISR@i2c_address,0
  8354                           
  8355                           ;i2c2.c: 360: i2c_10bit_address_restart = 1;
  8356  0474  0021               	movlb	1	; select bank1
  8357  0475  01C2               	clrf	I2C2_ISR@i2c_10bit_address_restart^(0+128)
  8358  0476  0AC2               	incf	I2C2_ISR@i2c_10bit_address_restart^(0+128),f
  8359                           
  8360                           ;i2c2.c: 363: i2c2_state = S_MASTER_SEND_ADDR;
  8361  0477  3002               	movlw	2
  8362  0478  00F2               	movwf	??_I2C2_ISR
  8363  0479  0872               	movf	??_I2C2_ISR,w
  8364  047A  0020               	movlb	0	; select bank0
  8365  047B  00EA               	movwf	_i2c2_state
  8366                           
  8367                           ;i2c2.c: 364: }
  8368                           ;i2c2.c: 366: break;
  8369  047C  0008               	return
  8370  047D                     i1l3517:	
  8371                           ;i2c2.c: 368: case S_MASTER_SEND_ADDR:
  8372                           
  8373                           
  8374                           ;i2c2.c: 381: if(i2c_10bit_address_restart != 1)
  8375  047D  0021               	movlb	1	; select bank1
  8376  047E  0342               	decf	I2C2_ISR@i2c_10bit_address_restart^(0+128),w
  8377  047F  1903               	btfsc	3,2
  8378  0480  2C96               	goto	i1l3537
  8379                           
  8380                           ;i2c2.c: 382: {
  8381                           ;i2c2.c: 384: i2c_address = p_i2c2_trb_current->address;
  8382  0481  0020               	movlb	0	; select bank0
  8383  0482  0868               	movf	_p_i2c2_trb_current,w
  8384  0483  0086               	movwf	6
  8385  0484  0187               	clrf	7
  8386  0485  3F40               	moviw [0]fsr1
  8387  0486  00ED               	movwf	I2C2_ISR@i2c_address
  8388  0487  3F41               	moviw [1]fsr1
  8389  0488  00EE               	movwf	I2C2_ISR@i2c_address+1
  8390                           
  8391                           ;i2c2.c: 385: pi2c_buf_ptr = p_i2c2_trb_current->pbuffer;
  8392  0489  0868               	movf	_p_i2c2_trb_current,w
  8393  048A  0086               	movwf	6
  8394  048B  0187               	clrf	7
  8395  048C  3F43               	moviw [3]fsr1
  8396  048D  0021               	movlb	1	; select bank1
  8397  048E  00C4               	movwf	I2C2_ISR@pi2c_buf_ptr^(0+128)
  8398                           
  8399                           ;i2c2.c: 386: i2c_bytes_left = p_i2c2_trb_current->length;
  8400  048F  0020               	movlb	0	; select bank0
  8401  0490  0868               	movf	_p_i2c2_trb_current,w
  8402  0491  0086               	movwf	6
  8403  0492  0187               	clrf	7
  8404  0493  3F42               	moviw [2]fsr1
  8405  0494  0021               	movlb	1	; select bank1
  8406  0495  00C3               	movwf	I2C2_ISR@i2c_bytes_left^(0+128)
  8407  0496                     i1l3537:	
  8408                           ;i2c2.c: 407: }
  8409                           ;i2c2.c: 408: }
  8410                           
  8411                           ;i2c2.c: 406: i2c_10bit_address_restart = 0;
  8412                           
  8413                           ;i2c2.c: 404: i2c2_state = S_MASTER_ACK_ADDR;
  8414                           
  8415                           ;i2c2.c: 400: else
  8416                           ;i2c2.c: 401: {
  8417                           ;i2c2.c: 403: SSP2BUF = i2c_address;
  8418                           
  8419                           ;i2c2.c: 399: }
  8420                           
  8421                           ;i2c2.c: 398: i2c2_state = S_MASTER_SEND_ADDR_10BIT_LSB;
  8422                           
  8423                           ;i2c2.c: 393: {
  8424                           ;i2c2.c: 397: SSP2BUF = 0xF0 | ((i2c_address >> 8) & 0x0006);
  8425                           
  8426                           ;i2c2.c: 391: {
  8427                           ;i2c2.c: 392: if (0 == i2c_10bit_address_restart)
  8428                           
  8429                           ;i2c2.c: 387: }
  8430                           ;i2c2.c: 390: if(!1 && (0x0 != i2c_address))
  8431                           
  8432                           
  8433                           ;i2c2.c: 409: else
  8434                           ;i2c2.c: 410: {
  8435                           ;i2c2.c: 412: SSP2BUF = i2c_address;
  8436  0496  0020               	movlb	0	; select bank0
  8437  0497  086D               	movf	I2C2_ISR@i2c_address,w
  8438  0498  0024               	movlb	4	; select bank4
  8439  0499  0099               	movwf	25	;volatile
  8440                           
  8441                           ;i2c2.c: 413: if(i2c_address & 0x01)
  8442  049A  0020               	movlb	0	; select bank0
  8443  049B  1C6D               	btfss	I2C2_ISR@i2c_address,0
  8444  049C  2CA2               	goto	i1l3543
  8445                           
  8446                           ;i2c2.c: 414: {
  8447                           ;i2c2.c: 416: i2c2_state = S_MASTER_ACK_ADDR;
  8448  049D  3005               	movlw	5
  8449  049E  00F2               	movwf	??_I2C2_ISR
  8450  049F  0872               	movf	??_I2C2_ISR,w
  8451  04A0  00EA               	movwf	_i2c2_state
  8452                           
  8453                           ;i2c2.c: 417: }
  8454  04A1  0008               	return
  8455  04A2                     i1l3543:	
  8456                           
  8457                           ;i2c2.c: 418: else
  8458                           ;i2c2.c: 419: {
  8459                           ;i2c2.c: 421: i2c2_state = S_MASTER_SEND_DATA;
  8460  04A2  3003               	movlw	3
  8461  04A3  00F2               	movwf	??_I2C2_ISR
  8462  04A4  0872               	movf	??_I2C2_ISR,w
  8463  04A5  00EA               	movwf	_i2c2_state
  8464                           
  8465                           ;i2c2.c: 422: }
  8466                           ;i2c2.c: 423: }
  8467                           ;i2c2.c: 424: break;
  8468  04A6  0008               	return
  8469  04A7                     i1l206:	
  8470                           ;i2c2.c: 426: case S_MASTER_SEND_DATA:
  8471                           
  8472                           
  8473                           ;i2c2.c: 429: if(SSP2CON2bits.ACKSTAT)
  8474  04A7  0024               	movlb	4	; select bank4
  8475  04A8  1F1E               	btfss	30,6	;volatile
  8476  04A9  2CB5               	goto	i1l3551
  8477                           
  8478                           ;i2c2.c: 430: {
  8479                           ;i2c2.c: 432: i2c2_object.i2cErrors++;
  8480  04AA  3001               	movlw	1
  8481  04AB  00F2               	movwf	??_I2C2_ISR
  8482  04AC  0872               	movf	??_I2C2_ISR,w
  8483  04AD  0021               	movlb	1	; select bank1
  8484  04AE  07AC               	addwf	(_i2c2_object^(0+128)+4),f
  8485                           
  8486                           ;i2c2.c: 435: SSP2CON2bits.ACKSTAT = 0;
  8487  04AF  0024               	movlb	4	; select bank4
  8488  04B0  131E               	bcf	30,6	;volatile
  8489                           
  8490                           ;i2c2.c: 438: I2C2_Stop(I2C2_DATA_NO_ACK);
  8491  04B1  3005               	movlw	5
  8492  04B2  318B  237D         	fcall	_I2C2_Stop
  8493                           
  8494                           ;i2c2.c: 440: }
  8495  04B4  0008               	return
  8496  04B5                     i1l3551:	
  8497                           
  8498                           ;i2c2.c: 441: else
  8499                           ;i2c2.c: 442: {
  8500                           ;i2c2.c: 444: if(i2c_bytes_left-- == 0U)
  8501  04B5  3001               	movlw	1
  8502  04B6  0021               	movlb	1	; select bank1
  8503  04B7  02C3               	subwf	I2C2_ISR@i2c_bytes_left^(0+128),f
  8504  04B8  0A43               	incf	I2C2_ISR@i2c_bytes_left^(0+128),w
  8505  04B9  1D03               	btfss	3,2
  8506  04BA  2CD0               	goto	i1l3559
  8507                           
  8508                           ;i2c2.c: 445: {
  8509                           ;i2c2.c: 449: p_i2c2_trb_current++;
  8510  04BB  3004               	movlw	4
  8511  04BC  00F2               	movwf	??_I2C2_ISR
  8512  04BD  0872               	movf	??_I2C2_ISR,w
  8513  04BE  0020               	movlb	0	; select bank0
  8514  04BF  07E8               	addwf	_p_i2c2_trb_current,f
  8515                           
  8516                           ;i2c2.c: 452: if(--i2c2_trb_count == 0)
  8517  04C0  3001               	movlw	1
  8518  04C1  02E9               	subwf	_i2c2_trb_count,f
  8519  04C2  1D03               	btfss	3,2
  8520  04C3  2CC8               	goto	i1l210
  8521                           
  8522                           ;i2c2.c: 453: {
  8523                           ;i2c2.c: 454: I2C2_Stop(I2C2_MESSAGE_COMPLETE);
  8524  04C4  3000               	movlw	0
  8525  04C5  318B  237D         	fcall	_I2C2_Stop
  8526                           
  8527                           ;i2c2.c: 455: }
  8528  04C7  0008               	return
  8529  04C8                     i1l210:	
  8530                           
  8531                           ;i2c2.c: 456: else
  8532                           ;i2c2.c: 457: {
  8533                           ;i2c2.c: 464: SSP2CON2bits.RSEN = 1;
  8534  04C8  0024               	movlb	4	; select bank4
  8535  04C9  149E               	bsf	30,1	;volatile
  8536                           
  8537                           ;i2c2.c: 467: i2c2_state = S_MASTER_SEND_ADDR;
  8538  04CA  3002               	movlw	2
  8539  04CB  00F2               	movwf	??_I2C2_ISR
  8540  04CC  0872               	movf	??_I2C2_ISR,w
  8541  04CD  0020               	movlb	0	; select bank0
  8542  04CE  00EA               	movwf	_i2c2_state
  8543                           
  8544                           ;i2c2.c: 469: }
  8545                           ;i2c2.c: 470: }
  8546  04CF  0008               	return
  8547  04D0                     i1l3559:	
  8548                           
  8549                           ;i2c2.c: 471: else
  8550                           ;i2c2.c: 472: {
  8551                           ;i2c2.c: 474: SSP2BUF = *pi2c_buf_ptr++;
  8552  04D0  0021               	movlb	1	; select bank1
  8553  04D1  0844               	movf	I2C2_ISR@pi2c_buf_ptr^(0+128),w
  8554  04D2  0086               	movwf	6
  8555  04D3  0187               	clrf	7
  8556  04D4  0801               	movf	1,w
  8557  04D5  0024               	movlb	4	; select bank4
  8558  04D6  0099               	movwf	25	;volatile
  8559  04D7  3001               	movlw	1
  8560  04D8  00F2               	movwf	??_I2C2_ISR
  8561  04D9  0872               	movf	??_I2C2_ISR,w
  8562  04DA  0021               	movlb	1	; select bank1
  8563  04DB  07C4               	addwf	I2C2_ISR@pi2c_buf_ptr^(0+128),f
  8564                           
  8565                           ;i2c2.c: 475: }
  8566                           ;i2c2.c: 476: }
  8567                           ;i2c2.c: 477: break;
  8568  04DC  0008               	return
  8569  04DD                     i1l213:	
  8570                           ;i2c2.c: 479: case S_MASTER_ACK_ADDR:
  8571                           
  8572                           
  8573                           ;i2c2.c: 482: if(SSP2CON2bits.ACKSTAT)
  8574  04DD  0024               	movlb	4	; select bank4
  8575  04DE  1F1E               	btfss	30,6	;volatile
  8576  04DF  2CEB               	goto	i1l214
  8577                           
  8578                           ;i2c2.c: 483: {
  8579                           ;i2c2.c: 486: i2c2_object.i2cErrors++;
  8580  04E0  3001               	movlw	1
  8581  04E1  00F2               	movwf	??_I2C2_ISR
  8582  04E2  0872               	movf	??_I2C2_ISR,w
  8583  04E3  0021               	movlb	1	; select bank1
  8584  04E4  07AC               	addwf	(_i2c2_object^(0+128)+4),f
  8585                           
  8586                           ;i2c2.c: 489: I2C2_Stop(I2C2_MESSAGE_ADDRESS_NO_ACK);
  8587  04E5  3004               	movlw	4
  8588  04E6  318B  237D         	fcall	_I2C2_Stop
  8589                           
  8590                           ;i2c2.c: 492: SSP2CON2bits.ACKSTAT = 0;
  8591  04E8  0024               	movlb	4	; select bank4
  8592  04E9  131E               	bcf	30,6	;volatile
  8593                           
  8594                           ;i2c2.c: 493: }
  8595  04EA  0008               	return
  8596  04EB                     i1l214:	
  8597                           
  8598                           ;i2c2.c: 494: else
  8599                           ;i2c2.c: 495: {
  8600                           ;i2c2.c: 496: SSP2CON2bits.RCEN = 1;
  8601  04EB  159E               	bsf	30,3	;volatile
  8602                           
  8603                           ;i2c2.c: 497: i2c2_state = S_MASTER_ACK_RCV_DATA;
  8604  04EC  3008               	movlw	8
  8605  04ED  00F2               	movwf	??_I2C2_ISR
  8606  04EE  0872               	movf	??_I2C2_ISR,w
  8607  04EF  0020               	movlb	0	; select bank0
  8608  04F0  00EA               	movwf	_i2c2_state
  8609                           
  8610                           ;i2c2.c: 498: }
  8611                           ;i2c2.c: 499: break;
  8612  04F1  0008               	return
  8613  04F2                     i1l3571:	
  8614                           ;i2c2.c: 501: case S_MASTER_RCV_DATA:
  8615                           
  8616                           
  8617                           ;i2c2.c: 506: i2c2_state = S_MASTER_ACK_RCV_DATA;
  8618  04F2  3008               	movlw	8
  8619  04F3  00F2               	movwf	??_I2C2_ISR
  8620  04F4  0872               	movf	??_I2C2_ISR,w
  8621  04F5  00EA               	movwf	_i2c2_state
  8622                           
  8623                           ;i2c2.c: 509: SSP2CON2bits.RCEN = 1;
  8624  04F6  0024               	movlb	4	; select bank4
  8625  04F7  159E               	bsf	30,3	;volatile
  8626                           
  8627                           ;i2c2.c: 511: break;
  8628  04F8  0008               	return
  8629  04F9                     i1l3575:	
  8630                           ;i2c2.c: 513: case S_MASTER_ACK_RCV_DATA:
  8631                           
  8632                           
  8633                           ;i2c2.c: 516: *pi2c_buf_ptr++ = SSP2BUF;
  8634  04F9  0024               	movlb	4	; select bank4
  8635  04FA  0819               	movf	25,w	;volatile
  8636  04FB  00F2               	movwf	??_I2C2_ISR
  8637  04FC  0021               	movlb	1	; select bank1
  8638  04FD  0844               	movf	I2C2_ISR@pi2c_buf_ptr^(0+128),w
  8639  04FE  0086               	movwf	6
  8640  04FF  0187               	clrf	7
  8641  0500  0872               	movf	??_I2C2_ISR,w
  8642  0501  0081               	movwf	1
  8643  0502  3001               	movlw	1
  8644  0503  00F2               	movwf	??_I2C2_ISR
  8645  0504  0872               	movf	??_I2C2_ISR,w
  8646  0505  07C4               	addwf	I2C2_ISR@pi2c_buf_ptr^(0+128),f
  8647                           
  8648                           ;i2c2.c: 519: if(--i2c_bytes_left)
  8649  0506  3001               	movlw	1
  8650  0507  02C3               	subwf	I2C2_ISR@i2c_bytes_left^(0+128),f
  8651  0508  1903               	btfsc	3,2
  8652  0509  2D12               	goto	i1l218
  8653                           
  8654                           ;i2c2.c: 520: {
  8655                           ;i2c2.c: 526: SSP2CON2bits.ACKDT = 0;
  8656  050A  0024               	movlb	4	; select bank4
  8657  050B  129E               	bcf	30,5	;volatile
  8658                           
  8659                           ;i2c2.c: 529: i2c2_state = S_MASTER_RCV_DATA;
  8660  050C  3006               	movlw	6
  8661  050D  00F2               	movwf	??_I2C2_ISR
  8662  050E  0872               	movf	??_I2C2_ISR,w
  8663  050F  0020               	movlb	0	; select bank0
  8664  0510  00EA               	movwf	_i2c2_state
  8665                           
  8666                           ;i2c2.c: 530: }
  8667  0511  2D16               	goto	i1l3587
  8668  0512                     i1l218:	
  8669                           
  8670                           ;i2c2.c: 531: else
  8671                           ;i2c2.c: 532: {
  8672                           ;i2c2.c: 536: SSP2CON2bits.ACKDT = 1;
  8673  0512  0024               	movlb	4	; select bank4
  8674  0513  169E               	bsf	30,5	;volatile
  8675                           
  8676                           ;i2c2.c: 538: I2C2_FunctionComplete();
  8677  0514  318B  236C         	fcall	_I2C2_FunctionComplete
  8678  0516                     i1l3587:	
  8679                           
  8680                           ;i2c2.c: 539: }
  8681                           ;i2c2.c: 542: SSP2CON2bits.ACKEN = 1;
  8682  0516  0024               	movlb	4	; select bank4
  8683  0517  161E               	bsf	30,4	;volatile
  8684                           
  8685                           ;i2c2.c: 543: break;
  8686  0518  0008               	return
  8687  0519                     i1l3589:	
  8688                           ;i2c2.c: 545: case S_MASTER_RCV_STOP:
  8689                           
  8690                           
  8691                           ;i2c2.c: 546: case S_MASTER_SEND_STOP:
  8692                           ;i2c2.c: 549: I2C2_Stop(I2C2_MESSAGE_COMPLETE);
  8693  0519  3000               	movlw	0
  8694  051A  318B  237D         	fcall	_I2C2_Stop
  8695                           
  8696                           ;i2c2.c: 550: break;
  8697  051C  0008               	return
  8698  051D                     i1l3591:	
  8699                           ;i2c2.c: 552: default:
  8700                           
  8701                           
  8702                           ;i2c2.c: 556: i2c2_object.i2cErrors++;
  8703  051D  3001               	movlw	1
  8704  051E  00F2               	movwf	??_I2C2_ISR
  8705  051F  0872               	movf	??_I2C2_ISR,w
  8706  0520  0021               	movlb	1	; select bank1
  8707  0521  07AC               	addwf	(_i2c2_object^(0+128)+4),f
  8708                           
  8709                           ;i2c2.c: 557: I2C2_Stop(I2C2_LOST_STATE);
  8710  0522  3006               	movlw	6
  8711  0523  318B  237D         	fcall	_I2C2_Stop
  8712                           
  8713                           ;i2c2.c: 560: }
  8714                           
  8715                           ;i2c2.c: 558: break;
  8716  0525  0008               	return
  8717  0526                     i1l3597:	
  8718  0526  0020               	movlb	0	; select bank0
  8719  0527  086A               	movf	_i2c2_state,w
  8720                           
  8721                           ; Switch size 1, requested type "space"
  8722                           ; Number of cases is 11, Range of values is 0 to 11
  8723                           ; switch strategies available:
  8724                           ; Name         Instructions Cycles
  8725                           ; direct_byte           30     6 (fixed)
  8726                           ; simple_byte           34    18 (average)
  8727                           ; jumptable            260     6 (fixed)
  8728                           ;	Chosen strategy is direct_byte
  8729  0528  0084               	movwf	4
  8730  0529  300C               	movlw	12
  8731  052A  0204               	subwf	4,w
  8732  052B  1803               	skipnc
  8733  052C  2D1D               	goto	i1l3591
  8734  052D  3188               	movlp	high i1S4551
  8735  052E  3504               	lslf	4,w
  8736  052F  3E00               	addlw	low i1S4551
  8737  0530  0082               	movwf	2
  8738  0531  0008               	return
  8739  0532                     __end_of_I2C2_ISR:	
  8740                           
  8741                           	psect	swtext1
  8742  0800                     __pswtext1:	
  8743  0800                     i1S4551:	
  8744  0800  3183  2BF5         	ljmp	i1l184
  8745  0802  3184  2C27         	ljmp	i1l189
  8746  0804  3184  2C7D         	ljmp	i1l3517
  8747  0806  3184  2CA7         	ljmp	i1l206
  8748  0808  3185  2D19         	ljmp	i1l3589
  8749  080A  3184  2CDD         	ljmp	i1l213
  8750  080C  3184  2CF2         	ljmp	i1l3571
  8751  080E  3185  2D19         	ljmp	i1l3589
  8752  0810  3184  2CF9         	ljmp	i1l3575
  8753  0812  3185  2D1D         	ljmp	i1l3591
  8754  0814  3184  2C2F         	ljmp	i1l190
  8755  0816  3184  2C52         	ljmp	i1l195
  8756                           
  8757                           	psect	text42
  8758  0B7D                     __ptext42:	
  8759 ;; *************** function _I2C2_Stop *****************
  8760 ;; Defined at:
  8761 ;;		line 581 in file "mcc_generated_files/i2c2.c"
  8762 ;; Parameters:    Size  Location     Type
  8763 ;;  completion_c    1    wreg     enum E2972
  8764 ;; Auto vars:     Size  Location     Type
  8765 ;;  completion_c    1    1[COMMON] enum E2972
  8766 ;; Return value:  Size  Location     Type
  8767 ;;                  1    wreg      void 
  8768 ;; Registers used:
  8769 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8770 ;; Tracked objects:
  8771 ;;		On entry : 0/0
  8772 ;;		On exit  : 0/0
  8773 ;;		Unchanged: 0/0
  8774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8776 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8777 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8778 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8779 ;;Total ram usage:        2 bytes
  8780 ;; Hardware stack levels used:    1
  8781 ;; This function calls:
  8782 ;;		Nothing
  8783 ;; This function is called by:
  8784 ;;		_I2C2_ISR
  8785 ;; This function uses a non-reentrant model
  8786 ;;
  8787                           
  8788                           
  8789                           ;psect for function _I2C2_Stop
  8790  0B7D                     _I2C2_Stop:	
  8791                           
  8792                           ;incstack = 0
  8793                           ; Regs used in _I2C2_Stop: [wreg+fsr1l+fsr1h+status,2+status,0]
  8794                           ;I2C2_Stop@completion_code stored from wreg
  8795  0B7D  00F1               	movwf	I2C2_Stop@completion_code
  8796                           
  8797                           ;i2c2.c: 584: SSP2CON2bits.PEN = 1;
  8798  0B7E  0024               	movlb	4	; select bank4
  8799  0B7F  151E               	bsf	30,2	;volatile
  8800                           
  8801                           ;i2c2.c: 587: if (p_i2c2_current->pTrFlag != (0))
  8802  0B80  0020               	movlb	0	; select bank0
  8803  0B81  0867               	movf	_p_i2c2_current,w
  8804  0B82  3E02               	addlw	2
  8805  0B83  0086               	movwf	6
  8806  0B84  0187               	clrf	7
  8807  0B85  0801               	movf	1,w
  8808  0B86  1903               	btfsc	3,2
  8809  0B87  2B93               	goto	i1l3289
  8810                           
  8811                           ;i2c2.c: 588: {
  8812                           ;i2c2.c: 590: *(p_i2c2_current->pTrFlag) = completion_code;
  8813  0B88  0871               	movf	I2C2_Stop@completion_code,w
  8814  0B89  00F0               	movwf	??_I2C2_Stop
  8815  0B8A  0867               	movf	_p_i2c2_current,w
  8816  0B8B  3E02               	addlw	2
  8817  0B8C  0086               	movwf	6
  8818  0B8D  0187               	clrf	7
  8819  0B8E  0801               	movf	1,w
  8820  0B8F  0086               	movwf	6
  8821  0B90  0187               	clrf	7
  8822  0B91  0870               	movf	??_I2C2_Stop,w
  8823  0B92  0081               	movwf	1
  8824  0B93                     i1l3289:	
  8825                           
  8826                           ;i2c2.c: 591: }
  8827                           ;i2c2.c: 594: i2c2_state = S_MASTER_IDLE;
  8828  0B93  01EA               	clrf	_i2c2_state
  8829  0B94  0008               	return
  8830  0B95                     __end_of_I2C2_Stop:	
  8831                           
  8832                           	psect	text43
  8833  0B6C                     __ptext43:	
  8834 ;; *************** function _I2C2_FunctionComplete *****************
  8835 ;; Defined at:
  8836 ;;		line 563 in file "mcc_generated_files/i2c2.c"
  8837 ;; Parameters:    Size  Location     Type
  8838 ;;		None
  8839 ;; Auto vars:     Size  Location     Type
  8840 ;;		None
  8841 ;; Return value:  Size  Location     Type
  8842 ;;                  1    wreg      void 
  8843 ;; Registers used:
  8844 ;;		wreg, status,2, status,0
  8845 ;; Tracked objects:
  8846 ;;		On entry : 0/0
  8847 ;;		On exit  : 0/0
  8848 ;;		Unchanged: 0/0
  8849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8852 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8853 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8854 ;;Total ram usage:        1 bytes
  8855 ;; Hardware stack levels used:    1
  8856 ;; This function calls:
  8857 ;;		Nothing
  8858 ;; This function is called by:
  8859 ;;		_I2C2_ISR
  8860 ;; This function uses a non-reentrant model
  8861 ;;
  8862                           
  8863                           
  8864                           ;psect for function _I2C2_FunctionComplete
  8865  0B6C                     _I2C2_FunctionComplete:	
  8866                           
  8867                           ;i2c2.c: 567: p_i2c2_trb_current++;
  8868                           
  8869                           ;incstack = 0
  8870                           ; Regs used in _I2C2_FunctionComplete: [wreg+status,2+status,0]
  8871  0B6C  3004               	movlw	4
  8872  0B6D  00F0               	movwf	??_I2C2_FunctionComplete
  8873  0B6E  0870               	movf	??_I2C2_FunctionComplete,w
  8874  0B6F  0020               	movlb	0	; select bank0
  8875  0B70  07E8               	addwf	_p_i2c2_trb_current,f
  8876                           
  8877                           ;i2c2.c: 570: if(--i2c2_trb_count == 0)
  8878  0B71  3001               	movlw	1
  8879  0B72  02E9               	subwf	_i2c2_trb_count,f
  8880  0B73  1D03               	btfss	3,2
  8881  0B74  2B7A               	goto	i1l225
  8882                           
  8883                           ;i2c2.c: 571: {
  8884                           ;i2c2.c: 572: i2c2_state = S_MASTER_SEND_STOP;
  8885  0B75  3004               	movlw	4
  8886  0B76  00F0               	movwf	??_I2C2_FunctionComplete
  8887  0B77  0870               	movf	??_I2C2_FunctionComplete,w
  8888  0B78  00EA               	movwf	_i2c2_state
  8889                           
  8890                           ;i2c2.c: 573: }
  8891  0B79  0008               	return
  8892  0B7A                     i1l225:	
  8893                           
  8894                           ;i2c2.c: 574: else
  8895                           ;i2c2.c: 575: {
  8896                           ;i2c2.c: 576: i2c2_state = S_MASTER_RESTART;
  8897  0B7A  01EA               	clrf	_i2c2_state
  8898  0B7B  0AEA               	incf	_i2c2_state,f
  8899  0B7C  0008               	return
  8900  0B7D                     __end_of_I2C2_FunctionComplete:	
  8901                           
  8902                           	psect	text44
  8903  0AC8                     __ptext44:	
  8904 ;; *************** function _I2C2_BusCollisionISR *****************
  8905 ;; Defined at:
  8906 ;;		line 728 in file "mcc_generated_files/i2c2.c"
  8907 ;; Parameters:    Size  Location     Type
  8908 ;;		None
  8909 ;; Auto vars:     Size  Location     Type
  8910 ;;		None
  8911 ;; Return value:  Size  Location     Type
  8912 ;;                  1    wreg      void 
  8913 ;; Registers used:
  8914 ;;		None
  8915 ;; Tracked objects:
  8916 ;;		On entry : 0/0
  8917 ;;		On exit  : 0/0
  8918 ;;		Unchanged: 0/0
  8919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8921 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8922 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8923 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8924 ;;Total ram usage:        0 bytes
  8925 ;; Hardware stack levels used:    1
  8926 ;; This function calls:
  8927 ;;		Nothing
  8928 ;; This function is called by:
  8929 ;;		_INTERRUPT_InterruptManager
  8930 ;; This function uses a non-reentrant model
  8931 ;;
  8932                           
  8933                           
  8934                           ;psect for function _I2C2_BusCollisionISR
  8935  0AC8                     _I2C2_BusCollisionISR:	
  8936                           
  8937                           ;incstack = 0
  8938                           ; Regs used in _I2C2_BusCollisionISR: []
  8939  0AC8  0008               	return
  8940  0AC9                     __end_of_I2C2_BusCollisionISR:	
  8941                           
  8942                           	psect	text45
  8943  0D22                     __ptext45:	
  8944 ;; *************** function _I2C1_ISR *****************
  8945 ;; Defined at:
  8946 ;;		line 57 in file "mcc_generated_files/i2c1.c"
  8947 ;; Parameters:    Size  Location     Type
  8948 ;;		None
  8949 ;; Auto vars:     Size  Location     Type
  8950 ;;  i2c_data        1    9[COMMON] unsigned char 
  8951 ;; Return value:  Size  Location     Type
  8952 ;;                  1    wreg      void 
  8953 ;; Registers used:
  8954 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8955 ;; Tracked objects:
  8956 ;;		On entry : 0/0
  8957 ;;		On exit  : 0/0
  8958 ;;		Unchanged: 0/0
  8959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8960 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8961 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8962 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8963 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8964 ;;Total ram usage:        2 bytes
  8965 ;; Hardware stack levels used:    1
  8966 ;; Hardware stack levels required when called:    3
  8967 ;; This function calls:
  8968 ;;		_I2C1_StatusCallback
  8969 ;; This function is called by:
  8970 ;;		_INTERRUPT_InterruptManager
  8971 ;; This function uses a non-reentrant model
  8972 ;;
  8973                           
  8974                           
  8975                           ;psect for function _I2C1_ISR
  8976  0D22                     _I2C1_ISR:	
  8977                           
  8978                           ;i2c1.c: 59: uint8_t i2c_data = 0x55;
  8979                           
  8980                           ;incstack = 0
  8981                           ; Regs used in _I2C1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8982  0D22  3055               	movlw	85
  8983  0D23  00F8               	movwf	??_I2C1_ISR
  8984  0D24  0878               	movf	??_I2C1_ISR,w
  8985  0D25  00F9               	movwf	I2C1_ISR@i2c_data
  8986                           
  8987                           ;i2c1.c: 64: PIR1bits.SSP1IF = 0;
  8988  0D26  0020               	movlb	0	; select bank0
  8989  0D27  1191               	bcf	17,3	;volatile
  8990                           
  8991                           ;i2c1.c: 65: i2c_data = SSP1BUF;
  8992  0D28  0024               	movlb	4	; select bank4
  8993  0D29  0811               	movf	17,w	;volatile
  8994  0D2A  00F8               	movwf	??_I2C1_ISR
  8995  0D2B  0878               	movf	??_I2C1_ISR,w
  8996  0D2C  00F9               	movwf	I2C1_ISR@i2c_data
  8997                           
  8998                           ;i2c1.c: 66: if(1 == SSP1STATbits.R_nW)
  8999  0D2D  1D14               	btfss	20,2	;volatile
  9000  0D2E  2D36               	goto	i1l64
  9001                           
  9002                           ;i2c1.c: 67: {
  9003                           ;i2c1.c: 68: if((1 == SSP1STATbits.D_nA) && (1 == SSP1CON2bits.ACKSTAT))
  9004  0D2F  1A94               	btfsc	20,5	;volatile
  9005  0D30  1F16               	btfss	22,6	;volatile
  9006  0D31  2D34               	goto	i1l3429
  9007                           
  9008                           ;i2c1.c: 69: {
  9009                           ;i2c1.c: 71: I2C1_StatusCallback(I2C1_SLAVE_READ_COMPLETED);
  9010  0D32  3003               	movlw	3
  9011  0D33  2D44               	goto	L3
  9012  0D34                     i1l3429:	
  9013                           ;i2c1.c: 72: }
  9014                           
  9015                           
  9016                           ;i2c1.c: 73: else
  9017                           ;i2c1.c: 74: {
  9018                           ;i2c1.c: 76: I2C1_StatusCallback(I2C1_SLAVE_READ_REQUEST);
  9019  0D34  3001               	movlw	1
  9020  0D35  2D44               	goto	L3
  9021  0D36                     i1l64:	
  9022                           ;i2c1.c: 77: }
  9023                           ;i2c1.c: 78: }
  9024                           
  9025                           
  9026                           ;i2c1.c: 79: else if(0 == SSP1STATbits.D_nA)
  9027  0D36  1A94               	btfsc	20,5	;volatile
  9028  0D37  2D3F               	goto	i1l3437
  9029                           
  9030                           ;i2c1.c: 80: {
  9031                           ;i2c1.c: 83: if(0x00 == i2c_data)
  9032  0D38  0879               	movf	I2C1_ISR@i2c_data,w
  9033  0D39  1D03               	btfss	3,2
  9034  0D3A  2D3D               	goto	i1l3435
  9035                           
  9036                           ;i2c1.c: 84: {
  9037                           ;i2c1.c: 86: I2C1_StatusCallback(I2C1_SLAVE_GENERAL_CALL_REQUEST);
  9038  0D3B  3004               	movlw	4
  9039  0D3C  2D44               	goto	L3
  9040  0D3D                     i1l3435:	
  9041                           ;i2c1.c: 87: }
  9042                           
  9043                           
  9044                           ;i2c1.c: 88: else
  9045                           ;i2c1.c: 89: {
  9046                           ;i2c1.c: 91: I2C1_StatusCallback(I2C1_SLAVE_WRITE_REQUEST);
  9047  0D3D  3000               	movlw	0
  9048  0D3E  2D44               	goto	L3
  9049  0D3F                     i1l3437:	
  9050                           ;i2c1.c: 92: }
  9051                           ;i2c1.c: 93: }
  9052                           
  9053                           
  9054                           ;i2c1.c: 94: else
  9055                           ;i2c1.c: 95: {
  9056                           ;i2c1.c: 96: I2C_slaveWriteData = i2c_data;
  9057  0D3F  0879               	movf	I2C1_ISR@i2c_data,w
  9058  0D40  00F8               	movwf	??_I2C1_ISR
  9059  0D41  0878               	movf	??_I2C1_ISR,w
  9060  0D42  00FD               	movwf	_I2C_slaveWriteData	;volatile
  9061                           
  9062                           ;i2c1.c: 99: I2C1_StatusCallback(I2C1_SLAVE_WRITE_COMPLETED);
  9063  0D43  3002               	movlw	2
  9064  0D44                     L3:	
  9065  0D44  3185  2532         	fcall	_I2C1_StatusCallback
  9066                           
  9067                           ;i2c1.c: 100: }
  9068                           ;i2c1.c: 102: SSP1CON1bits.CKP = 1;
  9069  0D46  0024               	movlb	4	; select bank4
  9070  0D47  1615               	bsf	21,4	;volatile
  9071  0D48  0008               	return
  9072  0D49                     __end_of_I2C1_ISR:	
  9073                           
  9074                           	psect	text46
  9075  0532                     __ptext46:	
  9076 ;; *************** function _I2C1_StatusCallback *****************
  9077 ;; Defined at:
  9078 ;;		line 106 in file "mcc_generated_files/i2c1.c"
  9079 ;; Parameters:    Size  Location     Type
  9080 ;;  i2c_bus_stat    1    wreg     enum E3053
  9081 ;; Auto vars:     Size  Location     Type
  9082 ;;  i2c_bus_stat    1    7[COMMON] enum E3053
  9083 ;;  pdata           2    5[COMMON] PTR unsigned char 
  9084 ;;		 -> type_no_data(1), PROTOCOL_Send_uint8_t@pbuf(1), sendbuf(16), readbuf.length(1), 
  9085 ;;		 -> readbuf.type(1), readbuf(6), 
  9086 ;; Return value:  Size  Location     Type
  9087 ;;                  1    wreg      void 
  9088 ;; Registers used:
  9089 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9090 ;; Tracked objects:
  9091 ;;		On entry : 0/0
  9092 ;;		On exit  : 0/0
  9093 ;;		Unchanged: 0/0
  9094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9096 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9097 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9098 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9099 ;;Total ram usage:        4 bytes
  9100 ;; Hardware stack levels used:    1
  9101 ;; Hardware stack levels required when called:    2
  9102 ;; This function calls:
  9103 ;;		_PROTOCOL_Backplane_Slave_Enabled
  9104 ;;		_PROTOCOL_I2C_GET
  9105 ;;		_PROTOCOL_I2C_SEN
  9106 ;;		_PROTOCOL_I2C_WHO
  9107 ;;		_PROTOCOL_INV
  9108 ;;		_PROTOCOL_RST
  9109 ;;		_PROTOCOL_Read_Lock
  9110 ;;		i1_PROTOCOL_EXT
  9111 ;;		i1_PROTOCOL_SAV
  9112 ;;		i1_PROTOCOL_SET
  9113 ;;		i1_PROTOCOL_STA
  9114 ;;		i1_PROTOCOL_STP
  9115 ;; This function is called by:
  9116 ;;		_I2C1_ISR
  9117 ;; This function uses a non-reentrant model
  9118 ;;
  9119                           
  9120                           
  9121                           ;psect for function _I2C1_StatusCallback
  9122  0532                     _I2C1_StatusCallback:	
  9123                           
  9124                           ;incstack = 0
  9125                           ; Regs used in _I2C1_StatusCallback: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9126                           ;I2C1_StatusCallback@i2c_bus_state stored from wreg
  9127  0532  00F7               	movwf	I2C1_StatusCallback@i2c_bus_state
  9128                           
  9129                           ;i2c1.c: 109: static uint8_t slaveWriteType = SLAVE_NORMAL_DATA;
  9130                           ;i2c1.c: 110: static uint8_t next = 0x00;
  9131                           ;i2c1.c: 111: static uint8_t ext_len = 0;
  9132                           ;i2c1.c: 112: static uint8_t ext_cnt = 0;
  9133                           ;i2c1.c: 113: static char ext_buf[48];
  9134                           ;i2c1.c: 114: uint8_t *pdata;
  9135                           ;i2c1.c: 115: switch (i2c_bus_state)
  9136  0533  2DF1               	goto	i1l3261
  9137  0534                     i1l86:	
  9138                           ;i2c1.c: 116: {
  9139                           ;i2c1.c: 117: case I2C1_SLAVE_WRITE_REQUEST:
  9140                           
  9141                           
  9142                           ;i2c1.c: 118: slaveWriteType = SLAVE_DATA_ADDRESS;
  9143  0534  0021               	movlb	1	; select bank1
  9144  0535  01C6               	clrf	I2C1_StatusCallback@slaveWriteType^(0+128)
  9145  0536  0AC6               	incf	I2C1_StatusCallback@slaveWriteType^(0+128),f
  9146                           
  9147                           ;i2c1.c: 119: break;
  9148  0537  0008               	return
  9149  0538                     i1l3187:	
  9150                           ;i2c1.c: 121: case I2C1_SLAVE_GENERAL_CALL_REQUEST:
  9151                           
  9152                           
  9153                           ;i2c1.c: 123: slaveWriteType = SLAVE_GENERAL_CALL;
  9154  0538  3002               	movlw	2
  9155  0539  00F4               	movwf	??_I2C1_StatusCallback
  9156  053A  0874               	movf	??_I2C1_StatusCallback,w
  9157  053B  0021               	movlb	1	; select bank1
  9158  053C  00C6               	movwf	I2C1_StatusCallback@slaveWriteType^(0+128)
  9159                           
  9160                           ;i2c1.c: 124: break;
  9161  053D  0008               	return
  9162  053E                     i1l3189:	
  9163                           ;i2c1.c: 132: case 0x01:
  9164                           
  9165                           ;i2c1.c: 131: switch(next) {
  9166                           
  9167                           ;i2c1.c: 129: {
  9168                           ;i2c1.c: 130: case SLAVE_DATA_ADDRESS:
  9169                           
  9170                           ;i2c1.c: 128: switch(slaveWriteType)
  9171                           
  9172                           ;i2c1.c: 126: case I2C1_SLAVE_WRITE_COMPLETED:
  9173                           
  9174                           
  9175                           ;i2c1.c: 133: PROTOCOL_SET(I2C_slaveWriteData);
  9176  053E  087D               	movf	_I2C_slaveWriteData,w	;volatile
  9177  053F  318B  2307  3185   	fcall	i1_PROTOCOL_SET
  9178  0542  2DB1               	goto	i1l3235
  9179  0543                     i1l3193:	
  9180                           ;i2c1.c: 138: case 0x04:
  9181                           
  9182                           ;i2c1.c: 137: switch(I2C_slaveWriteData) {
  9183                           
  9184                           ;i2c1.c: 136: case 0x00:
  9185                           
  9186                           ;i2c1.c: 135: break;
  9187                           
  9188                           ;i2c1.c: 134: next = 0x00;
  9189                           
  9190                           
  9191                           ;i2c1.c: 139: PROTOCOL_STA();
  9192  0543  318A  22E6  3185   	fcall	i1_PROTOCOL_STA
  9193                           
  9194                           ;i2c1.c: 140: break;
  9195  0546  2DCA               	goto	i1l3245
  9196  0547                     i1l3195:	
  9197                           ;i2c1.c: 141: case 0x05:
  9198                           
  9199                           
  9200                           ;i2c1.c: 142: PROTOCOL_STP();
  9201  0547  318A  22D2  3185   	fcall	i1_PROTOCOL_STP
  9202                           
  9203                           ;i2c1.c: 143: break;
  9204  054A  2DCA               	goto	i1l3245
  9205  054B                     i1l3197:	
  9206                           ;i2c1.c: 144: case 0x03:
  9207                           
  9208                           
  9209                           ;i2c1.c: 145: PROTOCOL_SAV();
  9210  054B  318B  2315  3185   	fcall	i1_PROTOCOL_SAV
  9211                           
  9212                           ;i2c1.c: 146: break;
  9213  054E  2DCA               	goto	i1l3245
  9214  054F                     i1l3199:	
  9215                           ;i2c1.c: 147: case 0x06:
  9216                           
  9217                           
  9218                           ;i2c1.c: 148: PROTOCOL_INV();
  9219  054F  318A  22E2  3185   	fcall	_PROTOCOL_INV
  9220                           
  9221                           ;i2c1.c: 149: break;
  9222  0552  2DCA               	goto	i1l3245
  9223  0553                     i1l3201:	
  9224                           ;i2c1.c: 150: case 0x0c:
  9225                           
  9226                           
  9227                           ;i2c1.c: 151: PROTOCOL_RST();
  9228  0553  318B  2327  3185   	fcall	_PROTOCOL_RST
  9229                           
  9230                           ;i2c1.c: 152: break;
  9231  0556  2DCA               	goto	i1l3245
  9232  0557                     i1l103:	
  9233                           ;i2c1.c: 153: case 0x08:
  9234                           
  9235                           
  9236                           ;i2c1.c: 154: next = 0x01;
  9237  0557  01EC               	clrf	I2C1_StatusCallback@next
  9238  0558  0AEC               	incf	I2C1_StatusCallback@next,f
  9239                           
  9240                           ;i2c1.c: 155: break;
  9241  0559  2DCA               	goto	i1l3245
  9242  055A                     i1l3203:	
  9243                           ;i2c1.c: 156: case 0x0a:
  9244                           
  9245                           
  9246                           ;i2c1.c: 157: next = 0x02;
  9247  055A  3002               	movlw	2
  9248  055B  2D90               	goto	L4
  9249  055C                     i1l3207:	
  9250                           ;i2c1.c: 159: }
  9251                           
  9252                           ;i2c1.c: 158: break;
  9253                           
  9254  055C  087D               	movf	_I2C_slaveWriteData,w	;volatile
  9255                           
  9256                           ; Switch size 1, requested type "space"
  9257                           ; Number of cases is 7, Range of values is 3 to 12
  9258                           ; switch strategies available:
  9259                           ; Name         Instructions Cycles
  9260                           ; simple_byte           22    12 (average)
  9261                           ; direct_byte           29     9 (fixed)
  9262                           ; jumptable            263     9 (fixed)
  9263                           ;	Chosen strategy is simple_byte
  9264  055D  3A03               	xorlw	3	; case 3
  9265  055E  1903               	skipnz
  9266  055F  2D4B               	goto	i1l3197
  9267  0560  3A07               	xorlw	7	; case 4
  9268  0561  1903               	skipnz
  9269  0562  2D43               	goto	i1l3193
  9270  0563  3A01               	xorlw	1	; case 5
  9271  0564  1903               	skipnz
  9272  0565  2D47               	goto	i1l3195
  9273  0566  3A03               	xorlw	3	; case 6
  9274  0567  1903               	skipnz
  9275  0568  2D4F               	goto	i1l3199
  9276  0569  3A0E               	xorlw	14	; case 8
  9277  056A  1903               	skipnz
  9278  056B  2D57               	goto	i1l103
  9279  056C  3A02               	xorlw	2	; case 10
  9280  056D  1903               	skipnz
  9281  056E  2D5A               	goto	i1l3203
  9282  056F  3A06               	xorlw	6	; case 12
  9283  0570  1903               	skipnz
  9284  0571  2D53               	goto	i1l3201
  9285  0572  2DCA               	goto	i1l3245
  9286                           
  9287                           ;i2c1.c: 161: }
  9288                           
  9289                           ;i2c1.c: 160: break;
  9290  0573  2DCA               	goto	i1l3245
  9291  0574                     i1l3211:	
  9292  0574  0020               	movlb	0	; select bank0
  9293  0575  086C               	movf	I2C1_StatusCallback@next,w
  9294                           
  9295                           ; Switch size 1, requested type "space"
  9296                           ; Number of cases is 2, Range of values is 0 to 1
  9297                           ; switch strategies available:
  9298                           ; Name         Instructions Cycles
  9299                           ; simple_byte            7     4 (average)
  9300                           ; direct_byte           10     6 (fixed)
  9301                           ; jumptable            260     6 (fixed)
  9302                           ;	Chosen strategy is simple_byte
  9303  0576  3A00               	xorlw	0	; case 0
  9304  0577  1903               	skipnz
  9305  0578  2D5C               	goto	i1l3207
  9306  0579  3A01               	xorlw	1	; case 1
  9307  057A  1903               	skipnz
  9308  057B  2D3E               	goto	i1l3189
  9309  057C  2DCA               	goto	i1l3245
  9310                           
  9311                           ;i2c1.c: 162: break;
  9312  057D  2DCA               	goto	i1l3245
  9313  057E                     i1l3213:	
  9314                           ;i2c1.c: 164: case SLAVE_GENERAL_CALL:
  9315                           
  9316                           
  9317                           ;i2c1.c: 165: if (I2C_slaveWriteData == 0x02) {
  9318  057E  3002               	movlw	2
  9319  057F  067D               	xorwf	_I2C_slaveWriteData,w	;volatile
  9320  0580  1D03               	btfss	3,2
  9321  0581  2DCA               	goto	i1l3245
  9322                           
  9323                           ;i2c1.c: 166: SSP1CON2bits.GCEN = 0;
  9324  0582  0024               	movlb	4	; select bank4
  9325  0583  1396               	bcf	22,7	;volatile
  9326                           
  9327                           ;i2c1.c: 167: PROTOCOL_Backplane_Slave_Enabled();
  9328  0584  318A  22DE  3185   	fcall	_PROTOCOL_Backplane_Slave_Enabled
  9329                           
  9330                           ;i2c1.c: 168: }
  9331                           ;i2c1.c: 169: break;
  9332  0587  2DCA               	goto	i1l3245
  9333  0588                     i1l3219:	
  9334                           ;i2c1.c: 173: case 0x02:
  9335                           
  9336                           ;i2c1.c: 172: switch(next) {
  9337                           
  9338                           ;i2c1.c: 171: case SLAVE_NORMAL_DATA:
  9339                           
  9340                           
  9341                           ;i2c1.c: 174: ext_len = I2C_slaveWriteData;
  9342  0588  087D               	movf	_I2C_slaveWriteData,w	;volatile
  9343  0589  00F4               	movwf	??_I2C1_StatusCallback
  9344  058A  0874               	movf	??_I2C1_StatusCallback,w
  9345  058B  0021               	movlb	1	; select bank1
  9346  058C  00C5               	movwf	I2C1_StatusCallback@ext_len^(0+128)
  9347                           
  9348                           ;i2c1.c: 175: ext_cnt = 0;
  9349  058D  0020               	movlb	0	; select bank0
  9350  058E  01EB               	clrf	I2C1_StatusCallback@ext_cnt
  9351                           
  9352                           ;i2c1.c: 176: next = 0x03;
  9353  058F  3003               	movlw	3
  9354  0590                     L4:	
  9355  0590  00F4               	movwf	??_I2C1_StatusCallback
  9356  0591  0874               	movf	??_I2C1_StatusCallback,w
  9357  0592  00EC               	movwf	I2C1_StatusCallback@next
  9358                           
  9359                           ;i2c1.c: 177: break;
  9360  0593  2DCA               	goto	i1l3245
  9361  0594                     i1l3225:	
  9362                           ;i2c1.c: 178: case 0x03:
  9363                           
  9364                           
  9365                           ;i2c1.c: 179: ext_buf[ext_cnt++] = (char)I2C_slaveWriteData;
  9366  0594  087D               	movf	_I2C_slaveWriteData,w	;volatile
  9367  0595  00F4               	movwf	??_I2C1_StatusCallback
  9368  0596  086B               	movf	I2C1_StatusCallback@ext_cnt,w
  9369  0597  3EA0               	addlw	(low (I2C1_StatusCallback@ext_buf| (0+256)))& (0+255)
  9370  0598  0086               	movwf	6
  9371  0599  3001               	movlw	1	; select bank3/4
  9372  059A  0087               	movwf	7
  9373  059B  0874               	movf	??_I2C1_StatusCallback,w
  9374  059C  0081               	movwf	1
  9375  059D  3001               	movlw	1
  9376  059E  00F4               	movwf	??_I2C1_StatusCallback
  9377  059F  0874               	movf	??_I2C1_StatusCallback,w
  9378  05A0  07EB               	addwf	I2C1_StatusCallback@ext_cnt,f
  9379                           
  9380                           ;i2c1.c: 180: if (ext_cnt >= ext_len) {
  9381  05A1  0021               	movlb	1	; select bank1
  9382  05A2  0845               	movf	I2C1_StatusCallback@ext_len^(0+128),w
  9383  05A3  0020               	movlb	0	; select bank0
  9384  05A4  026B               	subwf	I2C1_StatusCallback@ext_cnt,w
  9385  05A5  1C03               	skipc
  9386  05A6  2DCA               	goto	i1l3245
  9387                           
  9388                           ;i2c1.c: 181: if (!PROTOCOL_Read_Lock()) PROTOCOL_EXT(&ext_buf[0]);
  9389  05A7  318A  22CF  3185   	fcall	_PROTOCOL_Read_Lock
  9390  05AA  3A00               	xorlw	0
  9391  05AB  1D03               	skipz
  9392  05AC  2DB1               	goto	i1l3235
  9393  05AD  30A0               	movlw	(low (I2C1_StatusCallback@ext_buf| (0+256)))& (0+255)
  9394  05AE  318A  22C7  3185   	fcall	i1_PROTOCOL_EXT
  9395  05B1                     i1l3235:	
  9396                           
  9397                           ;i2c1.c: 182: next = 0x00;
  9398  05B1  0020               	movlb	0	; select bank0
  9399  05B2  01EC               	clrf	I2C1_StatusCallback@next
  9400                           
  9401                           ;i2c1.c: 185: }
  9402                           
  9403                           ;i2c1.c: 183: }
  9404                           ;i2c1.c: 184: break;
  9405  05B3  2DCA               	goto	i1l3245
  9406  05B4                     i1l3239:	
  9407  05B4  0020               	movlb	0	; select bank0
  9408  05B5  086C               	movf	I2C1_StatusCallback@next,w
  9409                           
  9410                           ; Switch size 1, requested type "space"
  9411                           ; Number of cases is 2, Range of values is 2 to 3
  9412                           ; switch strategies available:
  9413                           ; Name         Instructions Cycles
  9414                           ; simple_byte            7     4 (average)
  9415                           ; direct_byte           13     9 (fixed)
  9416                           ; jumptable            263     9 (fixed)
  9417                           ;	Chosen strategy is simple_byte
  9418  05B6  3A02               	xorlw	2	; case 2
  9419  05B7  1903               	skipnz
  9420  05B8  2D88               	goto	i1l3219
  9421  05B9  3A01               	xorlw	1	; case 3
  9422  05BA  1903               	skipnz
  9423  05BB  2D94               	goto	i1l3225
  9424  05BC  2DCA               	goto	i1l3245
  9425                           
  9426                           ;i2c1.c: 190: }
  9427                           
  9428                           ;i2c1.c: 188: break;
  9429                           
  9430                           ;i2c1.c: 187: default:
  9431                           
  9432                           ;i2c1.c: 186: break;
  9433  05BD  2DCA               	goto	i1l3245
  9434  05BE                     i1l3243:	
  9435  05BE  0021               	movlb	1	; select bank1
  9436  05BF  0846               	movf	I2C1_StatusCallback@slaveWriteType^(0+128),w
  9437                           
  9438                           ; Switch size 1, requested type "space"
  9439                           ; Number of cases is 3, Range of values is 0 to 2
  9440                           ; switch strategies available:
  9441                           ; Name         Instructions Cycles
  9442                           ; simple_byte           10     6 (average)
  9443                           ; direct_byte           12     6 (fixed)
  9444                           ; jumptable            260     6 (fixed)
  9445                           ;	Chosen strategy is simple_byte
  9446  05C0  3A00               	xorlw	0	; case 0
  9447  05C1  1903               	skipnz
  9448  05C2  2DB4               	goto	i1l3239
  9449  05C3  3A01               	xorlw	1	; case 1
  9450  05C4  1903               	skipnz
  9451  05C5  2D74               	goto	i1l3211
  9452  05C6  3A03               	xorlw	3	; case 2
  9453  05C7  1903               	skipnz
  9454  05C8  2D7E               	goto	i1l3213
  9455  05C9  2DCA               	goto	i1l3245
  9456  05CA                     i1l3245:	
  9457                           
  9458                           ;i2c1.c: 192: slaveWriteType = SLAVE_NORMAL_DATA;
  9459  05CA  0021               	movlb	1	; select bank1
  9460  05CB  01C6               	clrf	I2C1_StatusCallback@slaveWriteType^(0+128)
  9461                           
  9462                           ;i2c1.c: 193: break;
  9463  05CC  0008               	return
  9464  05CD                     i1l3247:	
  9465                           ;i2c1.c: 197: {
  9466                           ;i2c1.c: 198: case 0x01:
  9467                           
  9468                           ;i2c1.c: 196: switch (I2C_slaveWriteData)
  9469                           
  9470                           ;i2c1.c: 195: case I2C1_SLAVE_READ_REQUEST:
  9471                           
  9472                           
  9473                           ;i2c1.c: 199: SSP1BUF = PROTOCOL_I2C_WHO();
  9474  05CD  318A  22CC         	fcall	_PROTOCOL_I2C_WHO
  9475  05CF  0024               	movlb	4	; select bank4
  9476  05D0  0091               	movwf	17	;volatile
  9477                           
  9478                           ;i2c1.c: 200: break;
  9479  05D1  0008               	return
  9480  05D2                     i1l3249:	
  9481                           ;i2c1.c: 201: case 0x07:
  9482                           
  9483                           
  9484                           ;i2c1.c: 202: pdata = PROTOCOL_I2C_SEN();
  9485  05D2  318E  26BC         	fcall	_PROTOCOL_I2C_SEN
  9486  05D4  0871               	movf	?_PROTOCOL_I2C_SEN+1,w
  9487  05D5  00F6               	movwf	I2C1_StatusCallback@pdata+1
  9488  05D6  0870               	movf	?_PROTOCOL_I2C_SEN,w
  9489  05D7  00F5               	movwf	I2C1_StatusCallback@pdata
  9490                           
  9491                           ;i2c1.c: 203: SSP1BUF = *pdata;
  9492  05D8  0875               	movf	I2C1_StatusCallback@pdata,w
  9493  05D9  0086               	movwf	6
  9494  05DA  0876               	movf	I2C1_StatusCallback@pdata+1,w
  9495  05DB  0087               	movwf	7
  9496  05DC  0801               	movf	1,w
  9497  05DD  0024               	movlb	4	; select bank4
  9498  05DE  0091               	movwf	17	;volatile
  9499                           
  9500                           ;i2c1.c: 204: break;
  9501  05DF  0008               	return
  9502  05E0                     i1l3253:	
  9503                           ;i2c1.c: 205: case 0x09:
  9504                           
  9505                           
  9506                           ;i2c1.c: 206: SSP1BUF = PROTOCOL_I2C_GET();
  9507  05E0  318A  22C9         	fcall	_PROTOCOL_I2C_GET
  9508  05E2  0024               	movlb	4	; select bank4
  9509  05E3  0091               	movwf	17	;volatile
  9510                           
  9511                           ;i2c1.c: 208: }
  9512                           
  9513                           ;i2c1.c: 207: break;
  9514  05E4  0008               	return
  9515  05E5                     i1l3257:	
  9516  05E5  087D               	movf	_I2C_slaveWriteData,w	;volatile
  9517                           
  9518                           ; Switch size 1, requested type "space"
  9519                           ; Number of cases is 3, Range of values is 1 to 9
  9520                           ; switch strategies available:
  9521                           ; Name         Instructions Cycles
  9522                           ; simple_byte           10     6 (average)
  9523                           ; direct_byte           27     9 (fixed)
  9524                           ; jumptable            263     9 (fixed)
  9525                           ;	Chosen strategy is simple_byte
  9526  05E6  3A01               	xorlw	1	; case 1
  9527  05E7  1903               	skipnz
  9528  05E8  2DCD               	goto	i1l3247
  9529  05E9  3A06               	xorlw	6	; case 7
  9530  05EA  1903               	skipnz
  9531  05EB  2DD2               	goto	i1l3249
  9532  05EC  3A0E               	xorlw	14	; case 9
  9533  05ED  1903               	skipnz
  9534  05EE  2DE0               	goto	i1l3253
  9535  05EF  2DFB               	goto	i1l124
  9536                           
  9537                           ;i2c1.c: 216: }
  9538                           
  9539                           ;i2c1.c: 214: break;
  9540                           
  9541                           ;i2c1.c: 213: default:
  9542                           
  9543                           ;i2c1.c: 212: break;
  9544                           
  9545                           ;i2c1.c: 211: case I2C1_SLAVE_READ_COMPLETED:
  9546                           
  9547                           ;i2c1.c: 209: break;
  9548  05F0  0008               	return
  9549  05F1                     i1l3261:	
  9550  05F1  0877               	movf	I2C1_StatusCallback@i2c_bus_state,w
  9551                           
  9552                           ; Switch size 1, requested type "space"
  9553                           ; Number of cases is 5, Range of values is 0 to 4
  9554                           ; switch strategies available:
  9555                           ; Name         Instructions Cycles
  9556                           ; direct_byte           16     6 (fixed)
  9557                           ; simple_byte           16     9 (average)
  9558                           ; jumptable            260     6 (fixed)
  9559                           ;	Chosen strategy is direct_byte
  9560  05F2  0084               	movwf	4
  9561  05F3  3005               	movlw	5
  9562  05F4  0204               	subwf	4,w
  9563  05F5  1803               	skipnc
  9564  05F6  0008               	return
  9565  05F7  3188               	movlp	high i1S4553
  9566  05F8  3504               	lslf	4,w
  9567  05F9  3E18               	addlw	low i1S4553
  9568  05FA  0082               	movwf	2
  9569  05FB                     i1l124:	
  9570  05FB  0008               	return
  9571  05FC                     __end_of_I2C1_StatusCallback:	
  9572                           
  9573                           	psect	swtext2
  9574  0818                     __pswtext2:	
  9575  0818                     i1S4553:	
  9576  0818  3185  2D34         	ljmp	i1l86
  9577  081A  3185  2DE5         	ljmp	i1l3257
  9578  081C  3185  2DBE         	ljmp	i1l3243
  9579  081E  3185  2DFB         	ljmp	i1l124
  9580  0820  3185  2D38         	ljmp	i1l3187
  9581                           
  9582                           	psect	text47
  9583  0AD2                     __ptext47:	
  9584 ;; *************** function i1_PROTOCOL_STP *****************
  9585 ;; Defined at:
  9586 ;;		line 98 in file "protocol.c"
  9587 ;; Parameters:    Size  Location     Type
  9588 ;;		None
  9589 ;; Auto vars:     Size  Location     Type
  9590 ;;		None
  9591 ;; Return value:  Size  Location     Type
  9592 ;;                  1    wreg      void 
  9593 ;; Registers used:
  9594 ;;		wreg, status,2, status,0
  9595 ;; Tracked objects:
  9596 ;;		On entry : 0/0
  9597 ;;		On exit  : 0/0
  9598 ;;		Unchanged: 0/0
  9599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9601 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9603 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9604 ;;Total ram usage:        0 bytes
  9605 ;; Hardware stack levels used:    1
  9606 ;; This function calls:
  9607 ;;		Nothing
  9608 ;; This function is called by:
  9609 ;;		_I2C1_StatusCallback
  9610 ;; This function uses a non-reentrant model
  9611 ;;
  9612                           
  9613                           
  9614                           ;psect for function i1_PROTOCOL_STP
  9615  0AD2                     i1_PROTOCOL_STP:	
  9616                           
  9617                           ;protocol.c: 100: running = 0;
  9618                           
  9619                           ;incstack = 0
  9620                           ; Regs used in i1_PROTOCOL_STP: [wreg+status,2+status,0]
  9621  0AD2  0021               	movlb	1	; select bank1
  9622  0AD3  01BD               	clrf	_running^(0+128)
  9623  0AD4  0008               	return
  9624  0AD5                     __end_ofi1_PROTOCOL_STP:	
  9625                           
  9626                           	psect	text48
  9627  0AE6                     __ptext48:	
  9628 ;; *************** function i1_PROTOCOL_STA *****************
  9629 ;; Defined at:
  9630 ;;		line 93 in file "protocol.c"
  9631 ;; Parameters:    Size  Location     Type
  9632 ;;		None
  9633 ;; Auto vars:     Size  Location     Type
  9634 ;;		None
  9635 ;; Return value:  Size  Location     Type
  9636 ;;                  1    wreg      void 
  9637 ;; Registers used:
  9638 ;;		wreg, status,2, status,0
  9639 ;; Tracked objects:
  9640 ;;		On entry : 0/0
  9641 ;;		On exit  : 0/0
  9642 ;;		Unchanged: 0/0
  9643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9645 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9646 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9647 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9648 ;;Total ram usage:        0 bytes
  9649 ;; Hardware stack levels used:    1
  9650 ;; This function calls:
  9651 ;;		Nothing
  9652 ;; This function is called by:
  9653 ;;		_I2C1_StatusCallback
  9654 ;; This function uses a non-reentrant model
  9655 ;;
  9656                           
  9657                           
  9658                           ;psect for function i1_PROTOCOL_STA
  9659  0AE6                     i1_PROTOCOL_STA:	
  9660                           
  9661                           ;protocol.c: 95: running = 1;
  9662                           
  9663                           ;incstack = 0
  9664                           ; Regs used in i1_PROTOCOL_STA: [wreg+status,2+status,0]
  9665  0AE6  0021               	movlb	1	; select bank1
  9666  0AE7  01BD               	clrf	_running^(0+128)
  9667  0AE8  0ABD               	incf	_running^(0+128),f
  9668  0AE9  0008               	return
  9669  0AEA                     __end_ofi1_PROTOCOL_STA:	
  9670                           
  9671                           	psect	text49
  9672  0B07                     __ptext49:	
  9673 ;; *************** function i1_PROTOCOL_SET *****************
  9674 ;; Defined at:
  9675 ;;		line 111 in file "protocol.c"
  9676 ;; Parameters:    Size  Location     Type
  9677 ;;  value_          1    wreg     unsigned char 
  9678 ;; Auto vars:     Size  Location     Type
  9679 ;;  value_          1    1[COMMON] unsigned char 
  9680 ;; Return value:  Size  Location     Type
  9681 ;;                  1    wreg      void 
  9682 ;; Registers used:
  9683 ;;		wreg, status,2, status,0
  9684 ;; Tracked objects:
  9685 ;;		On entry : 0/0
  9686 ;;		On exit  : 0/0
  9687 ;;		Unchanged: 0/0
  9688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9689 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9690 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9691 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9692 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9693 ;;Total ram usage:        2 bytes
  9694 ;; Hardware stack levels used:    1
  9695 ;; This function calls:
  9696 ;;		Nothing
  9697 ;; This function is called by:
  9698 ;;		_I2C1_StatusCallback
  9699 ;; This function uses a non-reentrant model
  9700 ;;
  9701                           
  9702                           
  9703                           ;psect for function i1_PROTOCOL_SET
  9704  0B07                     i1_PROTOCOL_SET:	
  9705                           
  9706                           ;incstack = 0
  9707                           ; Regs used in i1_PROTOCOL_SET: [wreg+status,2+status,0]
  9708                           ;i1PROTOCOL_SET@value_ stored from wreg
  9709  0B07  00F1               	movwf	i1PROTOCOL_SET@value_
  9710                           
  9711                           ;protocol.c: 112: value = value_;
  9712  0B08  0871               	movf	i1PROTOCOL_SET@value_,w
  9713  0B09  00F0               	movwf	??i1_PROTOCOL_SET
  9714  0B0A  0870               	movf	??i1_PROTOCOL_SET,w
  9715  0B0B  0020               	movlb	0	; select bank0
  9716  0B0C  00E3               	movwf	_value
  9717  0B0D  0008               	return
  9718  0B0E                     __end_ofi1_PROTOCOL_SET:	
  9719                           
  9720                           	psect	text50
  9721  0B15                     __ptext50:	
  9722 ;; *************** function i1_PROTOCOL_SAV *****************
  9723 ;; Defined at:
  9724 ;;		line 107 in file "protocol.c"
  9725 ;; Parameters:    Size  Location     Type
  9726 ;;		None
  9727 ;; Auto vars:     Size  Location     Type
  9728 ;;		None
  9729 ;; Return value:  Size  Location     Type
  9730 ;;                  1    wreg      void 
  9731 ;; Registers used:
  9732 ;;		wreg, status,2, status,0, pclath, cstack
  9733 ;; Tracked objects:
  9734 ;;		On entry : 0/0
  9735 ;;		On exit  : 0/0
  9736 ;;		Unchanged: 0/0
  9737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9739 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9740 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9741 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9742 ;;Total ram usage:        1 bytes
  9743 ;; Hardware stack levels used:    1
  9744 ;; Hardware stack levels required when called:    1
  9745 ;; This function calls:
  9746 ;;		i1_DATAEE_WriteByte
  9747 ;; This function is called by:
  9748 ;;		_I2C1_StatusCallback
  9749 ;; This function uses a non-reentrant model
  9750 ;;
  9751                           
  9752                           
  9753                           ;psect for function i1_PROTOCOL_SAV
  9754  0B15                     i1_PROTOCOL_SAV:	
  9755                           
  9756                           ;protocol.c: 108: DATAEE_WriteByte(1, value);
  9757                           
  9758                           ;incstack = 0
  9759                           ; Regs used in i1_PROTOCOL_SAV: [wreg+status,2+status,0+pclath+cstack]
  9760  0B15  0020               	movlb	0	; select bank0
  9761  0B16  0863               	movf	_value,w
  9762  0B17  00F3               	movwf	??i1_PROTOCOL_SAV
  9763  0B18  0873               	movf	??i1_PROTOCOL_SAV,w
  9764  0B19  00F0               	movwf	i1DATAEE_WriteByte@bData
  9765  0B1A  3001               	movlw	1
  9766  0B1B  318C  241D         	fcall	i1_DATAEE_WriteByte
  9767  0B1D  0008               	return
  9768  0B1E                     __end_ofi1_PROTOCOL_SAV:	
  9769                           
  9770                           	psect	text51
  9771  0C1D                     __ptext51:	
  9772 ;; *************** function i1_DATAEE_WriteByte *****************
  9773 ;; Defined at:
  9774 ;;		line 180 in file "mcc_generated_files/memory.c"
  9775 ;; Parameters:    Size  Location     Type
  9776 ;;  bAdd            1    wreg     unsigned char 
  9777 ;;  bData           1    0[COMMON] unsigned char 
  9778 ;; Auto vars:     Size  Location     Type
  9779 ;;  bAdd            1    1[COMMON] unsigned char 
  9780 ;;  DATAEE_Write    1    2[COMMON] unsigned char 
  9781 ;; Return value:  Size  Location     Type
  9782 ;;                  1    wreg      void 
  9783 ;; Registers used:
  9784 ;;		wreg, status,2, status,0
  9785 ;; Tracked objects:
  9786 ;;		On entry : 0/0
  9787 ;;		On exit  : 0/0
  9788 ;;		Unchanged: 0/0
  9789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9790 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9791 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9793 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9794 ;;Total ram usage:        3 bytes
  9795 ;; Hardware stack levels used:    1
  9796 ;; This function calls:
  9797 ;;		Nothing
  9798 ;; This function is called by:
  9799 ;;		i1_PROTOCOL_SAV
  9800 ;; This function uses a non-reentrant model
  9801 ;;
  9802                           
  9803                           
  9804                           ;psect for function i1_DATAEE_WriteByte
  9805  0C1D                     i1_DATAEE_WriteByte:	
  9806                           
  9807                           ;incstack = 0
  9808                           ; Regs used in i1_DATAEE_WriteByte: [wreg+status,2+status,0]
  9809                           ;i1DATAEE_WriteByte@bAdd stored from wreg
  9810  0C1D  00F1               	movwf	i1DATAEE_WriteByte@bAdd
  9811                           
  9812                           ;memory.c: 182: uint8_t GIEBitValue = 0;
  9813  0C1E  01F2               	clrf	i1DATAEE_WriteByte@GIEBitValue
  9814                           
  9815                           ;memory.c: 184: EEADRL = (bAdd & 0x0ff);
  9816  0C1F  0871               	movf	i1DATAEE_WriteByte@bAdd,w
  9817  0C20  0023               	movlb	3	; select bank3
  9818  0C21  0091               	movwf	17	;volatile
  9819                           
  9820                           ;memory.c: 185: EEDATL = bData;
  9821  0C22  0870               	movf	i1DATAEE_WriteByte@bData,w
  9822  0C23  0093               	movwf	19	;volatile
  9823                           
  9824                           ;memory.c: 186: EECON1bits.EEPGD = 0;
  9825  0C24  1395               	bcf	21,7	;volsfr
  9826                           
  9827                           ;memory.c: 187: EECON1bits.CFGS = 0;
  9828  0C25  1315               	bcf	21,6	;volsfr
  9829                           
  9830                           ;memory.c: 188: EECON1bits.WREN = 1;
  9831  0C26  1515               	bsf	21,2	;volsfr
  9832                           
  9833                           ;memory.c: 190: GIEBitValue = INTCONbits.GIE;
  9834  0C27  3000               	movlw	0
  9835  0C28  1B8B               	btfsc	11,7	;volatile
  9836  0C29  3001               	movlw	1
  9837  0C2A  00F2               	movwf	i1DATAEE_WriteByte@GIEBitValue
  9838                           
  9839                           ;memory.c: 191: INTCONbits.GIE = 0;
  9840  0C2B  138B               	bcf	11,7	;volatile
  9841                           
  9842                           ;memory.c: 192: EECON2 = 0x55;
  9843  0C2C  3055               	movlw	85
  9844  0C2D  0096               	movwf	22	;volsfr
  9845                           
  9846                           ;memory.c: 193: EECON2 = 0xAA;
  9847  0C2E  30AA               	movlw	170
  9848  0C2F  0096               	movwf	22	;volsfr
  9849                           
  9850                           ;memory.c: 194: EECON1bits.WR = 1;
  9851  0C30  1495               	bsf	21,1	;volsfr
  9852  0C31                     i1l480:	
  9853                           ;memory.c: 197: {
  9854                           
  9855                           ;memory.c: 196: while (EECON1bits.WR)
  9856                           
  9857  0C31  1895               	btfsc	21,1	;volsfr
  9858  0C32  2C31               	goto	i1l480
  9859                           
  9860                           ;memory.c: 198: }
  9861                           ;memory.c: 200: EECON1bits.WREN = 0;
  9862  0C33  1115               	bcf	21,2	;volsfr
  9863                           
  9864                           ;memory.c: 201: INTCONbits.GIE = GIEBitValue;
  9865  0C34  0C72               	rrf	i1DATAEE_WriteByte@GIEBitValue,w
  9866  0C35  1C03               	skipc
  9867  0C36  138B               	bcf	11,7	;volatile
  9868  0C37  1803               	skipnc
  9869  0C38  178B               	bsf	11,7	;volatile
  9870  0C39  0008               	return
  9871  0C3A                     __end_ofi1_DATAEE_WriteByte:	
  9872                           
  9873                           	psect	text52
  9874  0AC7                     __ptext52:	
  9875 ;; *************** function i1_PROTOCOL_EXT *****************
  9876 ;; Defined at:
  9877 ;;		line 116 in file "protocol.c"
  9878 ;; Parameters:    Size  Location     Type
  9879 ;;  char_buf        1    wreg     PTR unsigned char 
  9880 ;;		 -> buf(48), I2C1_StatusCallback@ext_buf(48), 
  9881 ;; Auto vars:     Size  Location     Type
  9882 ;;  char_buf        1  (no storage) PTR unsigned char 
  9883 ;;		 -> buf(48), I2C1_StatusCallback@ext_buf(48), 
  9884 ;; Return value:  Size  Location     Type
  9885 ;;                  1    wreg      void 
  9886 ;; Registers used:
  9887 ;;		wreg, status,2, status,0
  9888 ;; Tracked objects:
  9889 ;;		On entry : 0/0
  9890 ;;		On exit  : 0/0
  9891 ;;		Unchanged: 0/0
  9892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9894 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9895 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9896 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9897 ;;Total ram usage:        0 bytes
  9898 ;; Hardware stack levels used:    1
  9899 ;; This function calls:
  9900 ;;		Nothing
  9901 ;; This function is called by:
  9902 ;;		_I2C1_StatusCallback
  9903 ;; This function uses a non-reentrant model
  9904 ;;
  9905                           
  9906                           
  9907                           ;psect for function i1_PROTOCOL_EXT
  9908  0AC7                     i1_PROTOCOL_EXT:	
  9909                           
  9910                           ;incstack = 0
  9911                           ; Regs used in i1_PROTOCOL_EXT: [wreg+status,2+status,0]
  9912  0AC7  0008               	return
  9913  0AC8                     __end_ofi1_PROTOCOL_EXT:	
  9914                           
  9915                           	psect	text53
  9916  0ACF                     __ptext53:	
  9917 ;; *************** function _PROTOCOL_Read_Lock *****************
  9918 ;; Defined at:
  9919 ;;		line 124 in file "protocol.c"
  9920 ;; Parameters:    Size  Location     Type
  9921 ;;		None
  9922 ;; Auto vars:     Size  Location     Type
  9923 ;;		None
  9924 ;; Return value:  Size  Location     Type
  9925 ;;                  1    wreg      unsigned char 
  9926 ;; Registers used:
  9927 ;;		wreg
  9928 ;; Tracked objects:
  9929 ;;		On entry : 0/0
  9930 ;;		On exit  : 0/0
  9931 ;;		Unchanged: 0/0
  9932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9934 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9936 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9937 ;;Total ram usage:        0 bytes
  9938 ;; Hardware stack levels used:    1
  9939 ;; This function calls:
  9940 ;;		Nothing
  9941 ;; This function is called by:
  9942 ;;		_I2C1_StatusCallback
  9943 ;; This function uses a non-reentrant model
  9944 ;;
  9945                           
  9946                           
  9947                           ;psect for function _PROTOCOL_Read_Lock
  9948  0ACF                     _PROTOCOL_Read_Lock:	
  9949                           
  9950                           ;protocol.c: 125: return locked;
  9951                           
  9952                           ;incstack = 0
  9953                           ; Regs used in _PROTOCOL_Read_Lock: [wreg]
  9954  0ACF  0021               	movlb	1	; select bank1
  9955  0AD0  083E               	movf	_locked^(0+128),w
  9956  0AD1  0008               	return
  9957  0AD2                     __end_of_PROTOCOL_Read_Lock:	
  9958                           
  9959                           	psect	text54
  9960  0B27                     __ptext54:	
  9961 ;; *************** function _PROTOCOL_RST *****************
  9962 ;; Defined at:
  9963 ;;		line 280 in file "protocol.c"
  9964 ;; Parameters:    Size  Location     Type
  9965 ;;		None
  9966 ;; Auto vars:     Size  Location     Type
  9967 ;;		None
  9968 ;; Return value:  Size  Location     Type
  9969 ;;                  1    wreg      void 
  9970 ;; Registers used:
  9971 ;;		wreg, status,2, status,0
  9972 ;; Tracked objects:
  9973 ;;		On entry : 0/0
  9974 ;;		On exit  : 0/0
  9975 ;;		Unchanged: 0/0
  9976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9978 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9979 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9980 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9981 ;;Total ram usage:        1 bytes
  9982 ;; Hardware stack levels used:    1
  9983 ;; This function calls:
  9984 ;;		Nothing
  9985 ;; This function is called by:
  9986 ;;		_I2C1_StatusCallback
  9987 ;; This function uses a non-reentrant model
  9988 ;;
  9989                           
  9990                           
  9991                           ;psect for function _PROTOCOL_RST
  9992  0B27                     _PROTOCOL_RST:	
  9993                           
  9994                           ;protocol.c: 281: if (readbuf.status != TLV_SET) {
  9995                           
  9996                           ;incstack = 0
  9997                           ; Regs used in _PROTOCOL_RST: [wreg+status,2+status,0]
  9998  0B27  0021               	movlb	1	; select bank1
  9999  0B28  084B               	movf	(_readbuf^(0+128)+4),w
 10000  0B29  1903               	btfsc	3,2
 10001  0B2A  0008               	return
 10002                           
 10003                           ;protocol.c: 282: readbuf.buf_cnt = 0;
 10004  0B2B  01CC               	clrf	(_readbuf^(0+128)+5)
 10005                           
 10006                           ;protocol.c: 283: readbuf.status = COMPLETE;
 10007  0B2C  3003               	movlw	3
 10008  0B2D  00F0               	movwf	??_PROTOCOL_RST
 10009  0B2E  0870               	movf	??_PROTOCOL_RST,w
 10010  0B2F  00CB               	movwf	(_readbuf^(0+128)+4)
 10011  0B30  0008               	return
 10012  0B31                     __end_of_PROTOCOL_RST:	
 10013                           
 10014                           	psect	text55
 10015  0AE2                     __ptext55:	
 10016 ;; *************** function _PROTOCOL_INV *****************
 10017 ;; Defined at:
 10018 ;;		line 103 in file "protocol.c"
 10019 ;; Parameters:    Size  Location     Type
 10020 ;;		None
 10021 ;; Auto vars:     Size  Location     Type
 10022 ;;		None
 10023 ;; Return value:  Size  Location     Type
 10024 ;;                  1    wreg      void 
 10025 ;; Registers used:
 10026 ;;		None
 10027 ;; Tracked objects:
 10028 ;;		On entry : 0/0
 10029 ;;		On exit  : 0/0
 10030 ;;		Unchanged: 0/0
 10031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10033 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10035 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10036 ;;Total ram usage:        0 bytes
 10037 ;; Hardware stack levels used:    1
 10038 ;; This function calls:
 10039 ;;		Nothing
 10040 ;; This function is called by:
 10041 ;;		_I2C1_StatusCallback
 10042 ;; This function uses a non-reentrant model
 10043 ;;
 10044                           
 10045                           
 10046                           ;psect for function _PROTOCOL_INV
 10047  0AE2                     _PROTOCOL_INV:	
 10048                           
 10049                           ;protocol.c: 104: invoked = 1;
 10050                           
 10051                           ;incstack = 0
 10052                           ; Regs used in _PROTOCOL_INV: []
 10053  0AE2  0021               	movlb	1	; select bank1
 10054  0AE3  01BC               	clrf	_invoked^(0+128)
 10055  0AE4  0ABC               	incf	_invoked^(0+128),f
 10056  0AE5  0008               	return
 10057  0AE6                     __end_of_PROTOCOL_INV:	
 10058                           
 10059                           	psect	text56
 10060  0ACC                     __ptext56:	
 10061 ;; *************** function _PROTOCOL_I2C_WHO *****************
 10062 ;; Defined at:
 10063 ;;		line 200 in file "protocol.c"
 10064 ;; Parameters:    Size  Location     Type
 10065 ;;		None
 10066 ;; Auto vars:     Size  Location     Type
 10067 ;;		None
 10068 ;; Return value:  Size  Location     Type
 10069 ;;                  1    wreg      unsigned char 
 10070 ;; Registers used:
 10071 ;;		wreg
 10072 ;; Tracked objects:
 10073 ;;		On entry : 0/0
 10074 ;;		On exit  : 0/0
 10075 ;;		Unchanged: 0/0
 10076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10078 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10080 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10081 ;;Total ram usage:        0 bytes
 10082 ;; Hardware stack levels used:    1
 10083 ;; This function calls:
 10084 ;;		Nothing
 10085 ;; This function is called by:
 10086 ;;		_I2C1_StatusCallback
 10087 ;; This function uses a non-reentrant model
 10088 ;;
 10089                           
 10090                           
 10091                           ;psect for function _PROTOCOL_I2C_WHO
 10092  0ACC                     _PROTOCOL_I2C_WHO:	
 10093                           
 10094                           ;protocol.c: 201: return slave_address;
 10095                           
 10096                           ;incstack = 0
 10097                           ; Regs used in _PROTOCOL_I2C_WHO: [wreg]
 10098  0ACC  0021               	movlb	1	; select bank1
 10099  0ACD  0840               	movf	_slave_address^(0+128),w
 10100  0ACE  0008               	return
 10101  0ACF                     __end_of_PROTOCOL_I2C_WHO:	
 10102                           
 10103                           	psect	text57
 10104  0EBC                     __ptext57:	
 10105 ;; *************** function _PROTOCOL_I2C_SEN *****************
 10106 ;; Defined at:
 10107 ;;		line 399 in file "protocol.c"
 10108 ;; Parameters:    Size  Location     Type
 10109 ;;		None
 10110 ;; Auto vars:     Size  Location     Type
 10111 ;;  pdata           2    2[COMMON] PTR unsigned char 
 10112 ;;		 -> type_no_data(1), PROTOCOL_Send_uint8_t@pbuf(1), sendbuf(16), readbuf.length(1), 
 10113 ;;		 -> readbuf.type(1), readbuf(6), 
 10114 ;; Return value:  Size  Location     Type
 10115 ;;                  2   52[None  ] PTR unsigned char 
 10116 ;; Registers used:
 10117 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 10118 ;; Tracked objects:
 10119 ;;		On entry : 0/0
 10120 ;;		On exit  : 0/0
 10121 ;;		Unchanged: 0/0
 10122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10124 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10125 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10126 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10127 ;;Total ram usage:        4 bytes
 10128 ;; Hardware stack levels used:    1
 10129 ;; This function calls:
 10130 ;;		Nothing
 10131 ;; This function is called by:
 10132 ;;		_I2C1_StatusCallback
 10133 ;; This function uses a non-reentrant model
 10134 ;;
 10135                           
 10136                           
 10137                           ;psect for function _PROTOCOL_I2C_SEN
 10138  0EBC                     _PROTOCOL_I2C_SEN:	
 10139                           
 10140                           ;protocol.c: 400: uint8_t *pdata;
 10141                           ;protocol.c: 401: switch(readbuf.status) {
 10142                           
 10143                           ;incstack = 0
 10144                           ; Regs used in _PROTOCOL_I2C_SEN: [wreg-fsr0h+status,2+status,0]
 10145  0EBC  2EEB               	goto	i1l3077
 10146  0EBD                     i1l3055:	
 10147                           ;protocol.c: 402: case TLV_SET:
 10148                           
 10149                           
 10150                           ;protocol.c: 403: pdata = &readbuf.type;
 10151  0EBD  30C7               	movlw	low _readbuf
 10152  0EBE  00F2               	movwf	PROTOCOL_I2C_SEN@pdata
 10153  0EBF  3000               	movlw	high _readbuf
 10154  0EC0  00F3               	movwf	PROTOCOL_I2C_SEN@pdata+1
 10155                           
 10156                           ;protocol.c: 404: readbuf.status = TYPE_SENT;
 10157  0EC1  0021               	movlb	1	; select bank1
 10158  0EC2  01CB               	clrf	(_readbuf^(0+128)+4)
 10159  0EC3  0ACB               	incf	(_readbuf^(0+128)+4),f
 10160                           
 10161                           ;protocol.c: 405: break;
 10162  0EC4  2EFA               	goto	i1l3079
 10163  0EC5                     i1l3059:	
 10164                           ;protocol.c: 406: case TYPE_SENT:
 10165                           
 10166                           
 10167                           ;protocol.c: 407: pdata = &readbuf.length;
 10168  0EC5  30C8               	movlw	low (_readbuf+1)
 10169  0EC6  00F2               	movwf	PROTOCOL_I2C_SEN@pdata
 10170  0EC7  3000               	movlw	high (_readbuf+1)
 10171  0EC8  00F3               	movwf	PROTOCOL_I2C_SEN@pdata+1
 10172                           
 10173                           ;protocol.c: 408: readbuf.status = LENGTH_SENT;
 10174  0EC9  3002               	movlw	2
 10175  0ECA  2EE2               	goto	L5
 10176  0ECB                     i1l3063:	
 10177                           ;protocol.c: 410: case LENGTH_SENT:
 10178                           
 10179                           ;protocol.c: 409: break;
 10180                           
 10181                           
 10182                           ;protocol.c: 411: if (readbuf.buf_cnt < readbuf.length) {
 10183  0ECB  0848               	movf	(_readbuf^(0+128)+1),w
 10184  0ECC  024C               	subwf	(_readbuf^(0+128)+5),w
 10185  0ECD  1803               	skipnc
 10186  0ECE  2EDC               	goto	i1l3067
 10187                           
 10188                           ;protocol.c: 412: pdata = &readbuf.pbuffer[readbuf.buf_cnt++];
 10189  0ECF  084C               	movf	(_readbuf^(0+128)+5),w
 10190  0ED0  00F0               	movwf	??_PROTOCOL_I2C_SEN
 10191  0ED1  01F1               	clrf	??_PROTOCOL_I2C_SEN+1
 10192  0ED2  0870               	movf	??_PROTOCOL_I2C_SEN,w
 10193  0ED3  0749               	addwf	(low ((_readbuf| 0+2)))^(0+128),w
 10194  0ED4  00F2               	movwf	PROTOCOL_I2C_SEN@pdata
 10195  0ED5  0871               	movf	??_PROTOCOL_I2C_SEN+1,w
 10196  0ED6  3D4A               	addwfc	((low ((_readbuf| 0+2))+1))^(0+128),w
 10197  0ED7  00F3               	movwf	PROTOCOL_I2C_SEN@pdata+1
 10198  0ED8  3001               	movlw	1
 10199  0ED9  00F0               	movwf	??_PROTOCOL_I2C_SEN
 10200  0EDA  0870               	movf	??_PROTOCOL_I2C_SEN,w
 10201  0EDB  07CC               	addwf	(_readbuf^(0+128)+5),f
 10202  0EDC                     i1l3067:	
 10203                           
 10204                           ;protocol.c: 413: }
 10205                           ;protocol.c: 414: if (readbuf.buf_cnt == readbuf.length) {
 10206  0EDC  084C               	movf	(_readbuf^(0+128)+5),w
 10207  0EDD  0648               	xorwf	(_readbuf^(0+128)+1),w
 10208  0EDE  1D03               	skipz
 10209  0EDF  2EFA               	goto	i1l3079
 10210                           
 10211                           ;protocol.c: 415: readbuf.buf_cnt = 0;
 10212  0EE0  01CC               	clrf	(_readbuf^(0+128)+5)
 10213                           
 10214                           ;protocol.c: 416: readbuf.status = COMPLETE;
 10215  0EE1  3003               	movlw	3
 10216  0EE2                     L5:	
 10217  0EE2  00F0               	movwf	??_PROTOCOL_I2C_SEN
 10218  0EE3  0870               	movf	??_PROTOCOL_I2C_SEN,w
 10219  0EE4  00CB               	movwf	(_readbuf^(0+128)+4)
 10220                           
 10221                           ;protocol.c: 417: }
 10222                           ;protocol.c: 418: break;
 10223  0EE5  2EFA               	goto	i1l3079
 10224  0EE6                     i1l3073:	
 10225                           ;protocol.c: 419: case COMPLETE:
 10226                           
 10227                           
 10228                           ;protocol.c: 420: pdata = &type_no_data;
 10229  0EE6  30EB               	movlw	low _type_no_data
 10230  0EE7  00F2               	movwf	PROTOCOL_I2C_SEN@pdata
 10231  0EE8  3000               	movlw	high _type_no_data
 10232  0EE9  00F3               	movwf	PROTOCOL_I2C_SEN@pdata+1
 10233                           
 10234                           ;protocol.c: 422: }
 10235                           
 10236                           ;protocol.c: 421: break;
 10237  0EEA  2EFA               	goto	i1l3079
 10238  0EEB                     i1l3077:	
 10239  0EEB  0021               	movlb	1	; select bank1
 10240  0EEC  084B               	movf	(_readbuf^(0+128)+4),w
 10241                           
 10242                           ; Switch size 1, requested type "space"
 10243                           ; Number of cases is 4, Range of values is 0 to 3
 10244                           ; switch strategies available:
 10245                           ; Name         Instructions Cycles
 10246                           ; simple_byte           13     7 (average)
 10247                           ; direct_byte           14     6 (fixed)
 10248                           ; jumptable            260     6 (fixed)
 10249                           ;	Chosen strategy is simple_byte
 10250  0EED  3A00               	xorlw	0	; case 0
 10251  0EEE  1903               	skipnz
 10252  0EEF  2EBD               	goto	i1l3055
 10253  0EF0  3A01               	xorlw	1	; case 1
 10254  0EF1  1903               	skipnz
 10255  0EF2  2EC5               	goto	i1l3059
 10256  0EF3  3A03               	xorlw	3	; case 2
 10257  0EF4  1903               	skipnz
 10258  0EF5  2ECB               	goto	i1l3063
 10259  0EF6  3A01               	xorlw	1	; case 3
 10260  0EF7  1903               	skipnz
 10261  0EF8  2EE6               	goto	i1l3073
 10262  0EF9  2EFA               	goto	i1l3079
 10263  0EFA                     i1l3079:	
 10264                           
 10265                           ;protocol.c: 423: return pdata;
 10266  0EFA  0873               	movf	PROTOCOL_I2C_SEN@pdata+1,w
 10267  0EFB  00F1               	movwf	?_PROTOCOL_I2C_SEN+1
 10268  0EFC  0872               	movf	PROTOCOL_I2C_SEN@pdata,w
 10269  0EFD  00F0               	movwf	?_PROTOCOL_I2C_SEN
 10270  0EFE  0008               	return
 10271  0EFF                     __end_of_PROTOCOL_I2C_SEN:	
 10272                           
 10273                           	psect	text58
 10274  0AC9                     __ptext58:	
 10275 ;; *************** function _PROTOCOL_I2C_GET *****************
 10276 ;; Defined at:
 10277 ;;		line 204 in file "protocol.c"
 10278 ;; Parameters:    Size  Location     Type
 10279 ;;		None
 10280 ;; Auto vars:     Size  Location     Type
 10281 ;;		None
 10282 ;; Return value:  Size  Location     Type
 10283 ;;                  1    wreg      unsigned char 
 10284 ;; Registers used:
 10285 ;;		wreg
 10286 ;; Tracked objects:
 10287 ;;		On entry : 0/0
 10288 ;;		On exit  : 0/0
 10289 ;;		Unchanged: 0/0
 10290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10291 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10292 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10293 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10294 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10295 ;;Total ram usage:        0 bytes
 10296 ;; Hardware stack levels used:    1
 10297 ;; This function calls:
 10298 ;;		Nothing
 10299 ;; This function is called by:
 10300 ;;		_I2C1_StatusCallback
 10301 ;; This function uses a non-reentrant model
 10302 ;;
 10303                           
 10304                           
 10305                           ;psect for function _PROTOCOL_I2C_GET
 10306  0AC9                     _PROTOCOL_I2C_GET:	
 10307                           
 10308                           ;protocol.c: 205: return value;
 10309                           
 10310                           ;incstack = 0
 10311                           ; Regs used in _PROTOCOL_I2C_GET: [wreg]
 10312  0AC9  0020               	movlb	0	; select bank0
 10313  0ACA  0863               	movf	_value,w
 10314  0ACB  0008               	return
 10315  0ACC                     __end_of_PROTOCOL_I2C_GET:	
 10316                           
 10317                           	psect	text59
 10318  0ADE                     __ptext59:	
 10319 ;; *************** function _PROTOCOL_Backplane_Slave_Enabled *****************
 10320 ;; Defined at:
 10321 ;;		line 196 in file "protocol.c"
 10322 ;; Parameters:    Size  Location     Type
 10323 ;;		None
 10324 ;; Auto vars:     Size  Location     Type
 10325 ;;		None
 10326 ;; Return value:  Size  Location     Type
 10327 ;;                  1    wreg      void 
 10328 ;; Registers used:
 10329 ;;		None
 10330 ;; Tracked objects:
 10331 ;;		On entry : 0/0
 10332 ;;		On exit  : 0/0
 10333 ;;		Unchanged: 0/0
 10334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10336 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10338 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10339 ;;Total ram usage:        0 bytes
 10340 ;; Hardware stack levels used:    1
 10341 ;; This function calls:
 10342 ;;		Nothing
 10343 ;; This function is called by:
 10344 ;;		_I2C1_StatusCallback
 10345 ;; This function uses a non-reentrant model
 10346 ;;
 10347                           
 10348                           
 10349                           ;psect for function _PROTOCOL_Backplane_Slave_Enabled
 10350  0ADE                     _PROTOCOL_Backplane_Slave_Enabled:	
 10351                           
 10352                           ;protocol.c: 197: backplane_slave_enabled = 1;
 10353                           
 10354                           ;incstack = 0
 10355                           ; Regs used in _PROTOCOL_Backplane_Slave_Enabled: []
 10356  0ADE  0021               	movlb	1	; select bank1
 10357  0ADF  01B7               	clrf	_backplane_slave_enabled^(0+128)
 10358  0AE0  0AB7               	incf	_backplane_slave_enabled^(0+128),f
 10359  0AE1  0008               	return
 10360  0AE2                     __end_of_PROTOCOL_Backplane_Slave_Enabled:	
 10361                           
 10362                           	psect	text60
 10363  0BAF                     __ptext60:	
 10364 ;; *************** function _EUSART_Transmit_ISR *****************
 10365 ;; Defined at:
 10366 ;;		line 165 in file "mcc_generated_files/eusart.c"
 10367 ;; Parameters:    Size  Location     Type
 10368 ;;		None
 10369 ;; Auto vars:     Size  Location     Type
 10370 ;;		None
 10371 ;; Return value:  Size  Location     Type
 10372 ;;                  1    wreg      void 
 10373 ;; Registers used:
 10374 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10375 ;; Tracked objects:
 10376 ;;		On entry : 0/0
 10377 ;;		On exit  : 0/0
 10378 ;;		Unchanged: 0/0
 10379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10382 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10383 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10384 ;;Total ram usage:        1 bytes
 10385 ;; Hardware stack levels used:    1
 10386 ;; This function calls:
 10387 ;;		Nothing
 10388 ;; This function is called by:
 10389 ;;		_INTERRUPT_InterruptManager
 10390 ;; This function uses a non-reentrant model
 10391 ;;
 10392                           
 10393                           
 10394                           ;psect for function _EUSART_Transmit_ISR
 10395  0BAF                     _EUSART_Transmit_ISR:	
 10396                           
 10397                           ;eusart.c: 169: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
 10398                           
 10399                           ;incstack = 0
 10400                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 10401  0BAF  3008               	movlw	8
 10402  0BB0  027A               	subwf	_eusartTxBufferRemaining,w	;volatile
 10403  0BB1  1803               	skipnc
 10404  0BB2  2BC7               	goto	i1l395
 10405                           
 10406                           ;eusart.c: 170: {
 10407                           ;eusart.c: 171: TXREG = eusartTxBuffer[eusartTxTail++];
 10408  0BB3  087B               	movf	_eusartTxTail,w
 10409  0BB4  3EA0               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
 10410  0BB5  0086               	movwf	6
 10411  0BB6  0187               	clrf	7
 10412  0BB7  0801               	movf	1,w
 10413  0BB8  0023               	movlb	3	; select bank3
 10414  0BB9  009A               	movwf	26	;volatile
 10415  0BBA  3001               	movlw	1
 10416  0BBB  00F0               	movwf	??_EUSART_Transmit_ISR
 10417  0BBC  0870               	movf	??_EUSART_Transmit_ISR,w
 10418  0BBD  07FB               	addwf	_eusartTxTail,f	;volatile
 10419                           
 10420                           ;eusart.c: 172: if(sizeof(eusartTxBuffer) <= eusartTxTail)
 10421  0BBE  3008               	movlw	8
 10422  0BBF  027B               	subwf	_eusartTxTail,w	;volatile
 10423  0BC0  1803               	btfsc	3,0
 10424                           
 10425                           ;eusart.c: 173: {
 10426                           ;eusart.c: 174: eusartTxTail = 0;
 10427  0BC1  01FB               	clrf	_eusartTxTail	;volatile
 10428                           
 10429                           ;eusart.c: 175: }
 10430                           ;eusart.c: 176: eusartTxBufferRemaining++;
 10431  0BC2  3001               	movlw	1
 10432  0BC3  00F0               	movwf	??_EUSART_Transmit_ISR
 10433  0BC4  0870               	movf	??_EUSART_Transmit_ISR,w
 10434  0BC5  07FA               	addwf	_eusartTxBufferRemaining,f	;volatile
 10435                           
 10436                           ;eusart.c: 177: }
 10437  0BC6  0008               	return
 10438  0BC7                     i1l395:	
 10439                           
 10440                           ;eusart.c: 178: else
 10441                           ;eusart.c: 179: {
 10442                           ;eusart.c: 180: PIE1bits.TXIE = 0;
 10443  0BC7  0021               	movlb	1	; select bank1
 10444  0BC8  1211               	bcf	17,4	;volatile
 10445  0BC9  0008               	return
 10446  0BCA                     __end_of_EUSART_Transmit_ISR:	
 10447                           
 10448                           	psect	text61
 10449  0BE5                     __ptext61:	
 10450 ;; *************** function _EUSART_Receive_ISR *****************
 10451 ;; Defined at:
 10452 ;;		line 184 in file "mcc_generated_files/eusart.c"
 10453 ;; Parameters:    Size  Location     Type
 10454 ;;		None
 10455 ;; Auto vars:     Size  Location     Type
 10456 ;;		None
 10457 ;; Return value:  Size  Location     Type
 10458 ;;                  1    wreg      void 
 10459 ;; Registers used:
 10460 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10461 ;; Tracked objects:
 10462 ;;		On entry : 0/0
 10463 ;;		On exit  : 0/0
 10464 ;;		Unchanged: 0/0
 10465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10466 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10467 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10468 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10469 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10470 ;;Total ram usage:        1 bytes
 10471 ;; Hardware stack levels used:    1
 10472 ;; This function calls:
 10473 ;;		Nothing
 10474 ;; This function is called by:
 10475 ;;		_INTERRUPT_InterruptManager
 10476 ;; This function uses a non-reentrant model
 10477 ;;
 10478                           
 10479                           
 10480                           ;psect for function _EUSART_Receive_ISR
 10481  0BE5                     _EUSART_Receive_ISR:	
 10482                           
 10483                           ;eusart.c: 187: if(1 == RCSTAbits.OERR)
 10484                           
 10485                           ;incstack = 0
 10486                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 10487  0BE5  0023               	movlb	3	; select bank3
 10488  0BE6  1C9D               	btfss	29,1	;volatile
 10489  0BE7  2BEA               	goto	i1l3667
 10490                           
 10491                           ;eusart.c: 188: {
 10492                           ;eusart.c: 191: RCSTAbits.CREN = 0;
 10493  0BE8  121D               	bcf	29,4	;volatile
 10494                           
 10495                           ;eusart.c: 192: RCSTAbits.CREN = 1;
 10496  0BE9  161D               	bsf	29,4	;volatile
 10497  0BEA                     i1l3667:	
 10498                           
 10499                           ;eusart.c: 193: }
 10500                           ;eusart.c: 196: eusartRxBuffer[eusartRxHead++] = RCREG;
 10501  0BEA  0819               	movf	25,w	;volatile
 10502  0BEB  00F0               	movwf	??_EUSART_Receive_ISR
 10503  0BEC  0020               	movlb	0	; select bank0
 10504  0BED  0866               	movf	_eusartRxHead,w
 10505  0BEE  3E20               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
 10506  0BEF  0086               	movwf	6
 10507  0BF0  3001               	movlw	1	; select bank2/3
 10508  0BF1  0087               	movwf	7
 10509  0BF2  0870               	movf	??_EUSART_Receive_ISR,w
 10510  0BF3  0081               	movwf	1
 10511  0BF4  3001               	movlw	1
 10512  0BF5  00F0               	movwf	??_EUSART_Receive_ISR
 10513  0BF6  0870               	movf	??_EUSART_Receive_ISR,w
 10514  0BF7  07E6               	addwf	_eusartRxHead,f	;volatile
 10515                           
 10516                           ;eusart.c: 197: if(sizeof(eusartRxBuffer) <= eusartRxHead)
 10517  0BF8  3008               	movlw	8
 10518  0BF9  0266               	subwf	_eusartRxHead,w	;volatile
 10519  0BFA  1803               	btfsc	3,0
 10520                           
 10521                           ;eusart.c: 198: {
 10522                           ;eusart.c: 199: eusartRxHead = 0;
 10523  0BFB  01E6               	clrf	_eusartRxHead	;volatile
 10524                           
 10525                           ;eusart.c: 200: }
 10526                           ;eusart.c: 201: eusartRxCount++;
 10527  0BFC  3001               	movlw	1
 10528  0BFD  00F0               	movwf	??_EUSART_Receive_ISR
 10529  0BFE  0870               	movf	??_EUSART_Receive_ISR,w
 10530  0BFF  07E4               	addwf	_eusartRxCount,f	;volatile
 10531  0C00  0008               	return
 10532  0C01                     __end_of_EUSART_Receive_ISR:	
 10533  007E                     btemp	set	126	;btemp
 10534  007E                     int$flags	set	126
 10535  007E                     wtemp0	set	126


Data Sizes:
    Strings     185
    Constant    12
    Data        4
    BSS         201
    Persistent  8
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      14
    BANK0            80     66      79
    BANK1            80      2      78
    BANK2            80      0      72
    BANK3            80      0      48
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    i2c2_tr_queue.ptrb_list.pbuffer	PTR unsigned char  size(1) Largest target is 6
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), inv_handler@measure(BANK0[6]), 

    i2c2_tr_queue.pTrFlag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c2_read_no_reg_addr@status(BANK0[1]), i2c2_write_no_data@status(COMMON[1]), i2c2_read@status(COMMON[1]), i2c2_write@status(BANK0[1]), 

    i2c2_tr_queue.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK1[4]), I2C2_MasterWrite@trBlock(BANK1[4]), 

    PROTOCOL_Extension_Handler$0	PTR unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), I2C1_StatusCallback@ext_buf(BANK3[48]), 

    data	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    strncmp@s2	PTR const unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_15(CODE[4]), STR_14(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), 
		 -> STR_8(CODE[4]), STR_7(CODE[4]), STR_6(CODE[4]), STR_4(CODE[4]), 

    atoi@s	PTR const unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), 

    i2c2_read_no_reg_addr@pbuf	PTR unsigned char  size(1) Largest target is 6
		 -> inv_handler@measure(BANK0[6]), 

    PROTOCOL_I2C_SEN@pdata	PTR unsigned char  size(2) Largest target is 16
		 -> type_no_data(BANK1[1]), PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK2[16]), readbuf.length(BANK1[1]), 
		 -> readbuf.type(BANK1[1]), readbuf(BANK1[6]), 

    PROTOCOL_I2C_Send_int8_t@pbuffer	PTR char  size(1) Largest target is 2
		 -> PROTOCOL_Send_int8_t@pbuf(BANK1[1]), inv_handler@data(BANK0[2]), 

    PROTOCOL_I2C_Set_TLV@pbuffer	PTR unsigned char  size(2) Largest target is 16
		 -> PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK2[16]), 

    PROTOCOL_EXT@char_buf	PTR unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), I2C1_StatusCallback@ext_buf(BANK3[48]), 

    PROTOCOL_Extension_Handler	PTR FTN(PTR unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    PROTOCOL_Loop_Func	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    PROTOCOL_Initialize@inv_handler	PTR void  size(2) Largest target is 1
		 -> inv_handler(), 

    PROTOCOL_Inv_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), inv_handler(), 

    PROTOCOL_Initialize@set_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Set_Handler	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@stop_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Stop_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@start_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Start_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@device_id	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_1(CODE[10]), 

    device_id_	PTR const unsigned char  size(2) Largest target is 8192
		 -> ROM(CODE[8192]), STR_1(CODE[10]), 

    S1029$pbuffer	PTR unsigned char  size(2) Largest target is 16
		 -> PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK2[16]), 

    readbuf.pbuffer	PTR unsigned char  size(2) Largest target is 16
		 -> PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK2[16]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 8192
		 -> STR_10(CODE[4]), buf(BANK2[48]), STR_2(CODE[7]), ROM(CODE[8192]), 
		 -> printf@c(BANK0[1]), STR_1(CODE[10]), I2C2_ISR@i2c_address(BANK0[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_48(CODE[10]), STR_47(CODE[9]), STR_46(CODE[10]), STR_45(CODE[9]), 
		 -> STR_44(CODE[4]), STR_43(CODE[4]), STR_42(CODE[4]), STR_41(CODE[4]), 
		 -> STR_40(CODE[4]), STR_39(CODE[4]), STR_38(CODE[4]), STR_37(CODE[4]), 
		 -> STR_36(CODE[14]), STR_35(CODE[9]), STR_34(CODE[10]), STR_33(CODE[9]), 
		 -> STR_32(CODE[10]), STR_31(CODE[9]), STR_30(CODE[7]), STR_29(CODE[4]), 
		 -> STR_28(CODE[4]), STR_27(CODE[9]), STR_26(CODE[4]), STR_25(CODE[4]), 
		 -> STR_24(CODE[10]), STR_23(CODE[4]), STR_22(CODE[4]), STR_21(CODE[8]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[9]), STR_17(CODE[6]), 
		 -> STR_16(CODE[10]), STR_13(CODE[10]), STR_9(CODE[10]), STR_5(CODE[10]), 
		 -> STR_3(CODE[5]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    I2C2_MasterWriteTRBBuild@pdata	PTR unsigned char  size(1) Largest target is 2
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), 

    I2C2_MasterWriteTRBBuild@ptrb.pbuffer	PTR unsigned char  size(1) Largest target is 6
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), inv_handler@measure(BANK0[6]), 

    I2C2_MasterWriteTRBBuild@ptrb	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterWrite@trBlock(BANK1[4]), 

    I2C2_MasterReadTRBBuild@pdata	PTR unsigned char  size(1) Largest target is 6
		 -> inv_handler@measure(BANK0[6]), 

    I2C2_MasterReadTRBBuild@ptrb.pbuffer	PTR unsigned char  size(1) Largest target is 6
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), inv_handler@measure(BANK0[6]), 

    I2C2_MasterReadTRBBuild@ptrb	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK1[4]), 

    i2c2_object.pTrTail.ptrb_list.pbuffer	PTR unsigned char  size(1) Largest target is 6
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), inv_handler@measure(BANK0[6]), 

    i2c2_object.pTrTail.pTrFlag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c2_read_no_reg_addr@status(BANK0[1]), i2c2_write_no_data@status(COMMON[1]), i2c2_read@status(COMMON[1]), i2c2_write@status(BANK0[1]), 

    i2c2_object.pTrTail.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK1[4]), I2C2_MasterWrite@trBlock(BANK1[4]), 

    I2C2_MasterTRBInsert@ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK1[4]), I2C2_MasterWrite@trBlock(BANK1[4]), 

    I2C2_MasterTRBInsert@pflag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c2_read_no_reg_addr@status(BANK0[1]), i2c2_write_no_data@status(COMMON[1]), i2c2_read@status(COMMON[1]), i2c2_write@status(BANK0[1]), 

    I2C2_MasterRead@pflag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c2_read_no_reg_addr@status(BANK0[1]), i2c2_read@status(COMMON[1]), 

    I2C2_MasterRead@pdata	PTR unsigned char  size(1) Largest target is 6
		 -> inv_handler@measure(BANK0[6]), 

    F3084.pbuffer	PTR unsigned char  size(1) Largest target is 6
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), inv_handler@measure(BANK0[6]), 

    I2C2_MasterWrite@pflag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c2_write_no_data@status(COMMON[1]), i2c2_read@status(COMMON[1]), i2c2_write@status(BANK0[1]), 

    I2C2_MasterWrite@pdata	PTR unsigned char  size(1) Largest target is 2
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), 

    F3079.pbuffer	PTR unsigned char  size(1) Largest target is 6
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), inv_handler@measure(BANK0[6]), 

    I2C2_ISR@pi2c_buf_ptr	PTR unsigned char  size(1) Largest target is 6
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), inv_handler@measure(BANK0[6]), 
		 -> I2C2_ISR@i2c_address(BANK0[2]), NULL(NULL[0]), 

    S264$pbuffer	PTR unsigned char  size(1) Largest target is 6
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), inv_handler@measure(BANK0[6]), 

    p_i2c2_trb_current.pbuffer	PTR unsigned char  size(1) Largest target is 6
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), inv_handler@measure(BANK0[6]), 

    p_i2c2_trb_current	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK1[4]), I2C2_MasterWrite@trBlock(BANK1[4]), NULL(NULL[0]), 

    i2c2_object.pTrHead.pTrFlag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c2_read_no_reg_addr@status(BANK0[1]), i2c2_write_no_data@status(COMMON[1]), i2c2_read@status(COMMON[1]), i2c2_write@status(BANK0[1]), 

    i2c2_object.pTrHead.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK1[4]), I2C2_MasterWrite@trBlock(BANK1[4]), 

    S276$pTrFlag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c2_read_no_reg_addr@status(BANK0[1]), i2c2_write_no_data@status(COMMON[1]), i2c2_read@status(COMMON[1]), i2c2_write@status(BANK0[1]), 

    p_i2c2_current.pTrFlag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c2_read_no_reg_addr@status(BANK0[1]), i2c2_write_no_data@status(COMMON[1]), i2c2_read@status(COMMON[1]), i2c2_write@status(BANK0[1]), 

    S276$ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK1[4]), I2C2_MasterWrite@trBlock(BANK1[4]), 

    p_i2c2_current.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK1[4]), I2C2_MasterWrite@trBlock(BANK1[4]), 

    p_i2c2_current	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK1[3]), NULL(NULL[0]), 

    S287$pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK1[3]), 

    i2c2_object.pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK1[3]), 

    S287$pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK1[3]), 

    i2c2_object.pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK1[3]), 

    sp__PROTOCOL_I2C_SEN	PTR unsigned char  size(2) Largest target is 16
		 -> type_no_data(BANK1[1]), PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK2[16]), readbuf.length(BANK1[1]), 
		 -> readbuf.type(BANK1[1]), readbuf(BANK1[6]), 

    I2C1_StatusCallback@pdata	PTR unsigned char  size(2) Largest target is 16
		 -> type_no_data(BANK1[1]), PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK2[16]), readbuf.length(BANK1[1]), 
		 -> readbuf.type(BANK1[1]), readbuf(BANK1[6]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_I2C1_ISR
    _I2C2_ISR->_I2C2_Stop
    _I2C1_ISR->_I2C1_StatusCallback
    _I2C1_StatusCallback->_PROTOCOL_I2C_SEN
    _I2C1_StatusCallback->i1_PROTOCOL_SAV
    i1_PROTOCOL_SAV->i1_DATAEE_WriteByte

Critical Paths under _main in BANK0

    _main->_PROTOCOL_Loop
    _PROTOCOL_Loop->_inv_handler
    _inv_handler->_PROTOCOL_I2C_Send_int8_t
    _i2c2_write->_I2C2_MasterWrite
    _I2C2_MasterWrite->_I2C2_MasterWriteTRBBuild
    _i2c2_read_no_reg_addr->_I2C2_MasterRead
    _I2C2_MasterRead->_I2C2_MasterReadTRBBuild
    _PROTOCOL_I2C_Send_int8_t->_printf
    _printf->___lwmod
    _putch->_EUSART_Write
    ___lwmod->___lwdiv
    ___lwdiv->___wmul
    _atoi->___wmul
    _PROTOCOL_Write_Device_Address->_DATAEE_WriteByte
    _PROTOCOL_SAV->_DATAEE_WriteByte
    _PROTOCOL_Initialize->_DATAEE_ReadByte

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_PROTOCOL_Loop

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   24187
                                             65 BANK0      1     1      0
                  _EUSART_Initialize
                    _I2C1_Initialize
                    _I2C2_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                _PROTOCOL_Initialize
                      _PROTOCOL_Loop
                    _TMR0_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (1) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_Initialize                                      1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Loop                                        4     4      0   23649
                                             63 BANK0      2     2      0
                                              0 BANK1      2     2      0
                   Absolute function *
                        _EUSART_Read
                       _PROTOCOL_EXT
       _PROTOCOL_Read_Device_Address
                       _PROTOCOL_SAV
                       _PROTOCOL_SET
                       _PROTOCOL_STA
                       _PROTOCOL_STP
      _PROTOCOL_Write_Device_Address
            _TMR0_HasOverflowOccured
                               _atoi
                        _inv_handler *
                             _printf
                            _strncmp
 ---------------------------------------------------------------------------------
 (2) _strncmp                                              7     2      5    2040
                                              1 BANK0      7     2      5
 ---------------------------------------------------------------------------------
 (2) _inv_handler                                         18    18      0   13428
                                             45 BANK0     18    18      0
           _PROTOCOL_I2C_Send_int8_t
                            ___lwdiv
                             ___wmul
              _i2c2_read_no_reg_addr
                         _i2c2_write
 ---------------------------------------------------------------------------------
 (3) _i2c2_write                                          10     6      4    2338
                                             15 BANK0     10     6      4
                   _I2C2_MasterWrite
 ---------------------------------------------------------------------------------
 (4) _I2C2_MasterWrite                                     7     3      4    1771
                                              8 BANK0      7     3      4
               _I2C2_MasterTRBInsert
           _I2C2_MasterWriteTRBBuild
 ---------------------------------------------------------------------------------
 (5) _I2C2_MasterWriteTRBBuild                             7     3      4     450
                                              1 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _i2c2_read_no_reg_addr                                9     5      4    2153
                                             15 BANK0      9     5      4
                    _I2C2_MasterRead
 ---------------------------------------------------------------------------------
 (4) _I2C2_MasterRead                                      7     3      4    1598
                                              8 BANK0      7     3      4
            _I2C2_MasterReadTRBBuild
               _I2C2_MasterTRBInsert
 ---------------------------------------------------------------------------------
 (5) _I2C2_MasterTRBInsert                                 4     2      2     494
                                              1 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (5) _I2C2_MasterReadTRBBuild                              7     3      4     481
                                              1 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _PROTOCOL_I2C_Send_int8_t                             4     3      1    7017
                                             41 BANK0      4     3      1
               _PROTOCOL_I2C_Set_TLV
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              24    20      4    5957
                                             21 BANK0     20    16      4
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      93
                                              3 BANK0      1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (4) _EUSART_Write                                         2     2      0      62
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     386
                                             15 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     703
                                              7 BANK0      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _PROTOCOL_I2C_Set_TLV                                 6     3      3     737
                                              1 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 8     6      2    1389
                                              7 BANK0      8     6      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      99
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     890
                                              1 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _TMR0_HasOverflowOccured                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_Write_Device_Address                        2     2      0     315
                                              4 BANK0      2     2      0
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_STP                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_STA                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_SET                                         2     2      0      31
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_SAV                                         1     1      0     253
                                              4 BANK0      1     1      0
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (3) _DATAEE_WriteByte                                     3     2      1     253
                                              1 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_EXT                                         1     1      0      66
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Read                                          2     2      0      37
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Initialize                                 10     2      8     538
                                              2 BANK0     10     2      8
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (2) _DATAEE_ReadByte                                      1     1      0      22
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2C2_Initialize                                      1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C1_Initialize                                      2     2      0       0
                                              1 BANK0      2     2      0
       _PROTOCOL_Read_Device_Address
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_Read_Device_Address                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Initialize                                    1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                           1     1      0     255
                                              0 BANK0      1     1      0
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
                           _I2C1_ISR
               _I2C2_BusCollisionISR
                           _I2C2_ISR
 ---------------------------------------------------------------------------------
 (8) _I2C2_ISR                                             4     4      0      22
                                              2 COMMON     4     4      0
              _I2C2_FunctionComplete
                          _I2C2_Stop
 ---------------------------------------------------------------------------------
 (9) _I2C2_Stop                                            2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (9) _I2C2_FunctionComplete                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _I2C2_BusCollisionISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _I2C1_ISR                                             2     2      0     233
                                              8 COMMON     2     2      0
                _I2C1_StatusCallback
 ---------------------------------------------------------------------------------
 (9) _I2C1_StatusCallback                                  4     4      0     187
                                              4 COMMON     4     4      0
   _PROTOCOL_Backplane_Slave_Enabled
                   _PROTOCOL_I2C_GET
                   _PROTOCOL_I2C_SEN
                   _PROTOCOL_I2C_WHO
                       _PROTOCOL_INV
                       _PROTOCOL_RST
                 _PROTOCOL_Read_Lock
                     i1_PROTOCOL_EXT
                     i1_PROTOCOL_SAV
                     i1_PROTOCOL_SET
                     i1_PROTOCOL_STA
                     i1_PROTOCOL_STP
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_STP                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_STA                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_SET                                      2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_SAV                                      1     1      0      94
                                              3 COMMON     1     1      0
                 i1_DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (11) i1_DATAEE_WriteByte                                  3     2      1      94
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_EXT                                      1     1      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_Read_Lock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_RST                                        1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_INV                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_I2C_WHO                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_I2C_SEN                                    4     4      0      26
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_I2C_GET                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_Backplane_Slave_Enabled                    0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _EUSART_Receive_ISR                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_Initialize
   _I2C1_Initialize
     _PROTOCOL_Read_Device_Address
   _I2C2_Initialize
   _OSCILLATOR_Initialize
   _PIN_MANAGER_Initialize
   _PROTOCOL_Initialize
     _DATAEE_ReadByte
   _PROTOCOL_Loop
     Absolute function(Fake) *
     _EUSART_Read *
     _PROTOCOL_EXT *
     _PROTOCOL_Read_Device_Address *
     _PROTOCOL_SAV *
       _DATAEE_WriteByte
     _PROTOCOL_SET *
     _PROTOCOL_STA *
     _PROTOCOL_STP *
     _PROTOCOL_Write_Device_Address *
       _DATAEE_WriteByte
     _TMR0_HasOverflowOccured *
     _atoi *
       ___wmul
       _isdigit
     _inv_handler *
       _PROTOCOL_I2C_Send_int8_t
         _PROTOCOL_I2C_Set_TLV
         _printf
           ___lwdiv
             ___wmul (ARG)
           ___lwmod
             ___lwdiv (ARG)
               ___wmul (ARG)
           ___wmul
           _isdigit
           _putch
             _EUSART_Write
       ___lwdiv
         ___wmul (ARG)
       ___wmul
       _i2c2_read_no_reg_addr
         _I2C2_MasterRead
           _I2C2_MasterReadTRBBuild
           _I2C2_MasterTRBInsert
       _i2c2_write
         _I2C2_MasterWrite
           _I2C2_MasterTRBInsert
           _I2C2_MasterWriteTRBBuild
     _printf *
       ___lwdiv
         ___wmul (ARG)
       ___lwmod
         ___lwdiv (ARG)
           ___wmul (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
     _strncmp *
   _TMR0_Initialize
   _WDT_Initialize

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR
   _I2C1_ISR
     _I2C1_StatusCallback
       _PROTOCOL_Backplane_Slave_Enabled
       _PROTOCOL_I2C_GET
       _PROTOCOL_I2C_SEN
       _PROTOCOL_I2C_WHO
       _PROTOCOL_INV
       _PROTOCOL_RST
       _PROTOCOL_Read_Lock
       i1_PROTOCOL_EXT
       i1_PROTOCOL_SAV
         i1_DATAEE_WriteByte
       i1_PROTOCOL_SET
       i1_PROTOCOL_STA
       i1_PROTOCOL_STP
   _I2C2_BusCollisionISR
   _I2C2_ISR
     _I2C2_FunctionComplete
     _I2C2_Stop

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     42      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      2      4E       7       97.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      48       9       90.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      30      11       60.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     123      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     123      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Sat Aug 26 12:04:17 2017

                                         _i 0062                                           _j 00B6  
                                         pc 0002                 i2c2_read_no_reg_addr@status 0037  
                    __end_ofi1_PROTOCOL_EXT 0AC8                      __end_ofi1_PROTOCOL_SAV 0B1E  
                    __end_ofi1_PROTOCOL_SET 0B0E                      __end_ofi1_PROTOCOL_STA 0AEA  
                    __end_ofi1_PROTOCOL_STP 0AD5             __end_of_TMR0_HasOverflowOccured 0AF2  
                               __CFG_CP$OFF 0000                       ?_I2C2_MasterTRBInsert 0021  
              i2c2_read_no_reg_addr@timeout 0035                         ___wmul@multiplicand 0023  
                           _timer0ReloadVal 00C1              I2C2_MasterReadTRBBuild@address 0023  
                            inv_handler@s_t 0059                                 __CFG_LVP$ON 0000  
                                       l600 01CA                                         l383 0D0B  
                                       l480 0CF4                                         l617 0255  
                                       l565 00A7                                         l741 0256  
                                       l593 0154                                         l577 0174  
                                       l937 0D6C                                __CFG_CPD$OFF 0000  
                                       _buf 0128                                         _cnt 00BF  
                              __CFG_BORV$LO 0000                                         wreg 0009  
                              __CFG_IESO$ON 0000                             inv_handler@data 005D  
                              ?_EUSART_Read 0070                             inv_handler@s_rh 005B  
                          __end_of_I2C1_ISR 0D49                            __end_of_I2C2_ISR 0532  
                                      l1058 0C0A                                        l4001 0E40  
                                      l4101 019F                                        l4031 00B5  
                                      l4023 00A2                                        l4015 0DBB  
                                      l4009 0DE5                                        l4131 0206  
                                      l4123 01F3                                        l4115 01E6  
                                      l4107 01BE                                        l4051 0105  
                                      l4043 00F1                                        l4035 00C2  
                                      l4211 0E16                                        l4117 01E9  
                                      l4061 0122                                        l4029 00AC  
                                      l4205 0E10                                        l4135 0213  
                                      l4071 0140                                        l4055 0107  
                                      l4223 0FAA                                _tmr_overflow 00B9  
                                      l4321 076B                                        l4145 0220  
                                      l4129 0202                                        l4073 014B  
                                      l4065 0124                                        l4057 0115  
                                      l4225 0FC2                                        l4209 0DF3  
                                      l4305 0E98                                        l4313 0E7A  
                                      l4323 0763                                        l4139 021B  
                                      l4091 018E                                        l4067 0133  
                                      l4147 0086                                        l4235 0FD2  
                                      l4227 0FCE                                        l4315 0EB9  
                                      l4341 0794                                        l4333 0788  
                                      l4325 0770                                        l4237 0FEE  
                                      l4309 0EB0                                        l4343 07BD  
                                      l4095 0199                                        l4079 0156  
                                      l4183 0D62                                        l4423 0309  
                                      l4441 038A                                        l4433 0347  
                                      l4259 0C5A                                        l4339 0790  
                                      l4427 0322                                        l4419 02F0  
                                      l4349 07CD                                        l3901 0D1F  
                                      l4189 0D6E                                        l4453 03DD  
                                      l4437 0366                                        l4199 0E06  
                                      l4447 03AE                                        l4383 0282  
                                      l3921 0F95                                        l4385 0283  
                                      l3915 0F88                                        l4395 0291  
                                      l3925 0F9D                                        l3919 0F8F  
                                      l3945 0C04                                        l3939 0B4B  
                                      l3975 0E6C                                        l3967 0E4E  
                                      l3991 0E1F                                        l3887 0D00  
                                      l3969 0E5A                                        l3993 0E2B  
                                      l3979 0E75                                        l3997 0E37  
                                      STR_1 065C                                        STR_2 067F  
                                      STR_3 068C                                        STR_4 06AD  
                                      STR_5 0634                                        STR_6 06BD  
                                      STR_7 06A5                                        STR_8 06B1  
                                      STR_9 063E                                        _LATA 010C  
                                      _LATB 010D                                        _LATC 010E  
                                      u3105 0E5B                                        u3115 0E65  
                                      u3045 0C0B                                        u3125 0E6D  
                                      u3055 0C10                                        u4027 0C9E  
                                      u3155 0E22                                        u3085 0E51  
                                      u3175 0E31                                        u3335 01B4  
                                      u3185 0E38                                        u3275 011B  
                                      u3375 01D9                                        i1l64 0D36  
                                      i1l86 0534                                        _TMR0 0015  
                                      _WPUA 020C                                        _WPUB 020D  
                                      _WPUC 020E                                __CFG_WRT$OFF 0000  
                             __CFG_FCMEN$ON 0000                                        _data 00B5  
                                      _atoi 0761                                        _main 07D2  
                                      fsr0h 0005                                        fsr1h 0007  
                                      indf0 0000                                        fsr0l 0004  
                                      indf1 0001                                        fsr1l 0006  
                                      btemp 007E                 I2C2_MasterReadTRBBuild@ptrb 0027  
                             __CFG_BOREN$ON 0000                                        start 0048  
                             __CFG_MCLRE$ON 0000                         _I2C1_StatusCallback 0532  
                ??_PROTOCOL_I2C_Send_int8_t 004A                             ?i1_PROTOCOL_EXT 0070  
                           ?i1_PROTOCOL_SAV 0070                             ?i1_PROTOCOL_SET 0070  
                 __size_of_DATAEE_WriteByte 0023                             ?i1_PROTOCOL_STA 0070  
                           ?i1_PROTOCOL_STP 0070                     __end_of_TMR0_Initialize 0B5C  
                             __CFG_PLLEN$ON 0000                                  _i2c2_state 006A  
                             ?_EUSART_Write 0070                                  _i2c2_write 0D49  
            __size_of_OSCILLATOR_Initialize 0005               __end_of_OSCILLATOR_Initialize 0AFB  
                   _I2C2_MasterReadTRBBuild 0D70                                       ?_atoi 0027  
                                     ?_main 0070                                       STR_10 06A9  
                                     STR_11 06B9                                       STR_12 06B5  
                                     STR_20 0691                                       STR_13 0620  
                                     STR_14 06A1                                       STR_22 0695  
                                     STR_30 0678                                       STR_15 069D  
                                     STR_40 061C                                       STR_24 0652  
                                     STR_32 0648                                       STR_16 0616  
                                     STR_17 0686                               __CFG_WDTE$OFF 0000  
                                     STR_18 066F                                       STR_34 062A  
                                     STR_19 0699                                       STR_35 0666  
                                     STR_36 0608                                       STR_39 0695  
                         __end_of_I2C2_Stop 0B95                             __end_of___lwdiv 0E7A  
                                     i1l103 0557                                       i1l210 04C8  
                                     i1l124 05FB              __size_of_I2C2_FunctionComplete 0011  
                                     i1l213 04DD                                       i1l214 04EB  
                                     i1l206 04A7                                       i1l225 0B7A  
                                     i1l218 0512                                       i1l323 0015  
                                     i1l325 0021                                       i1l333 0043  
                                     i1l190 042F                                       i1l327 002D  
                                     i1l184 03F5                                       i1l329 0039  
                           __end_of___lwmod 0E45                                       i1l195 0452  
                                     i1l196 045E                                       i1l189 0427  
                                     i1l480 0C31                                       i1l395 0BC7  
                PROTOCOL_I2C_Set_TLV@length 0021                                       _RCREG 0199  
             __end_of_I2C2_FunctionComplete 0B7D                                       _RCSTA 019D  
                    i2c2_write@write_status 0037                                       _TRISA 008C  
                                     _TRISB 008D                                       _TRISC 008E  
                                     _TXREG 019A                                       _TXSTA 019E  
              __size_of_PROTOCOL_Initialize 0051                  PROTOCOL_I2C_Set_TLV@status 0026  
                         ??_I2C1_Initialize 0021                        ?_I2C1_StatusCallback 0070  
                           _DATAEE_ReadByte 0B31             ??_PROTOCOL_Write_Device_Address 0024  
                           __end_of_dpowers 0606                              _WDT_Initialize 0AF2  
            PROTOCOL_Initialize@inv_handler 0027                             __end_of_isdigit 0B4D  
                              ?_inv_handler 0070                                       _value 0063  
                                     atoi@a 002C                                       atoi@s 002E  
                                     _putch 0AFB                I2C2_MasterReadTRBBuild@pdata 0021  
                    ?_i2c2_read_no_reg_addr 002F                                       pclath 000A  
                    ??_PROTOCOL_I2C_Set_TLV 0024                                       status 0003  
                                     wtemp0 007E                             __end_of_strncmp 0EBC  
                         ??_I2C2_MasterRead 002C                           ??_I2C2_Initialize 0021  
                           __initialization 004A                                __end_of_atoi 07D2  
                              __end_of_main 0800                      ??_I2C2_MasterTRBInsert 0023  
                            ??_EUSART_Write 0021                              i2c2_write@data 0032  
               ?_INTERRUPT_InterruptManager 0070            __end_of_I2C2_MasterWriteTRBBuild 0C98  
          PROTOCOL_Initialize@start_handler 0024                                      ??_atoi 0029  
                                    ??_main 0061                                 _i2c2_object 00A8  
                        _PROTOCOL_Read_Lock 0ACF                           inv_handler@status 0052  
                    __end_of_WDT_Initialize 0AF6                       ??_I2C1_StatusCallback 0074  
                __end_ofi1_DATAEE_WriteByte 0C3A                                      i1S4551 0800  
                                    i1S4553 0818                                      _EEADRH 0192  
                                    _EEADRL 0191                                      _EEDATH 0194  
                                    _EEDATL 0193                                      _EECON2 0196  
                                    _ANSELA 018C                                      ?_putch 0070  
                                    _ANSELB 018D                                      _ANSELC 018E  
                       ?_PROTOCOL_Read_Lock 0070                          _PROTOCOL_Loop_Func 00B3  
              __end_of_I2C2_BusCollisionISR 0AC9                                      i1l3201 0553  
                                    i1l3203 055A                                      i1l3211 0574  
                                    i1l3213 057E                                      i1l3063 0ECB  
                                    i1l3055 0EBD                                      i1l3207 055C  
                                    i1l3073 0EE6                                      i1l3225 0594  
                                    i1l3067 0EDC                                      i1l3059 0EC5  
                                    i1l3235 05B1                                      i1l3219 0588  
                                    i1l3243 05BE                                      i1l3077 0EEB  
                                    i1l3253 05E0                                      i1l3245 05CA  
                                    i1l3261 05F1                                      i1l3079 0EFA  
                                    i1l3247 05CD                                      i1l3239 05B4  
                                    i1l3503 044D                                      i1l3249 05D2  
                                    i1l3257 05E5                                      i1l3193 0543  
                                    i1l3195 0547                                      i1l3187 0538  
                                    i1l3435 0D3D                                      i1l3197 054B  
                                    i1l3189 053E                                      i1l3437 0D3F  
                                    i1l3429 0D34                                      i1l3517 047D  
                                    i1l3199 054F                                      i1l3551 04B5  
                                    i1l3543 04A2                                      i1l3289 0B93  
                                    i1l3537 0496                                      i1l3571 04F2  
                                    i1l3485 041A                                      i1l3591 051D  
                                    i1l3575 04F9                                      i1l3559 04D0  
                                    i1l3497 043B                                      i1l3667 0BEA  
                                    i1l3587 0516                                      i1l3589 0519  
                                    i1l3597 0526                                      _OSCCON 0099  
          __size_of_TMR0_HasOverflowOccured 0004                                      _TMR0IF 005A  
                                    _SPBRGH 019C                                      _SPBRGL 019B  
                                    _WDTCON 0097                       I2C2_MasterRead@length 0028  
            PROTOCOL_Initialize@set_handler 0026                              __CFG_PWRTE$OFF 0000  
                 PROTOCOL_Initialize@scaler 0029                                      ___wmul 0C01  
                            _p_i2c2_current 0067                              __CFG_STVREN$ON 0000  
                 ??_I2C2_MasterReadTRBBuild 0025                                   ??___lwdiv 002B  
                      ??_PROTOCOL_Read_Lock 0070                                   ??___lwmod 0033  
                              _type_no_data 00EB                         _EUSART_Transmit_ISR 0BAF  
                          ?_TMR0_Initialize 0070                                      _locked 00BE  
                                 ?_I2C1_ISR 0070                                   ?_I2C2_ISR 0070  
                               ?_i2c2_write 002F                    I2C2_Stop@completion_code 0071  
                                    _printf 0081                     __end_of_DATAEE_ReadByte 0B3E  
             I2C2_MasterReadTRBBuild@length 0022                                __pdataCOMMON 007D  
                                 ??_isdigit 0021                    __end_of_PROTOCOL_I2C_GET 0ACC  
                  __end_of_PROTOCOL_I2C_SEN 0EFF                    __end_of_PROTOCOL_I2C_WHO 0ACF  
                           ?_WDT_Initialize 0070               i1DATAEE_WriteByte@GIEBitValue 0072  
                                 ??_strncmp 0026                   PROTOCOL_Send_uint8_t@pbuf 00E0  
                      ?_EUSART_Transmit_ISR 0070                        __size_of_EUSART_Read 0020  
                   __end_of__initialization 007D                           ?_I2C2_MasterWrite 0028  
                        ??_I2C2_MasterWrite 002C                              __pcstackCOMMON 0070  
                              __pidataBANK1 0ADB                            _DATAEE_WriteByte 0CDB  
                            _i2c2_trb_count 0069                               __end_of_putch 0B01  
                                ??_I2C1_ISR 0078                                  ??_I2C2_ISR 0072  
                     __end_of_PROTOCOL_Loop 03E2                              _OPTION_REGbits 0095  
                  _I2C2_MasterWriteTRBBuild 0C78                I2C2_MasterWriteTRBBuild@ptrb 0027  
                   PROTOCOL_Send_float@pbuf 00D5                       ??_EUSART_Transmit_ISR 0070  
                                   ??_putch 0023                                  __pbssBANK0 0062  
                                __pbssBANK1 00A0                                  __pbssBANK2 0120  
                                __pbssBANK3 01A0                      i1DATAEE_WriteByte@bAdd 0071  
                        inv_handler@measure 0053                        __end_of_EUSART_Write 0D22  
                      __size_of_inv_handler 00A0                         __size_of_i2c2_write 0027  
               __size_of_EUSART_Receive_ISR 001C                          i2c2_write@dev_addr 002F  
                          ??i1_PROTOCOL_EXT 0070                            ??i1_PROTOCOL_SAV 0073  
                          ??i1_PROTOCOL_SET 0070                            ??i1_PROTOCOL_STA 0070  
                          ??i1_PROTOCOL_STP 0070                         _PROTOCOL_Initialize 0EFF  
                                __pmaintext 07D2                                     ?___wmul 0021  
                                __pintentry 0004                             _I2C1_Initialize 0C98  
                                   _BAUDCON 019F                                  _device_id_ 00E1  
                        i2c2_write@reg_addr 0031                                     _APFCON0 011D  
                                   _APFCON1 011E                        _I2C2_BusCollisionISR 0AC8  
                                   ?_printf 0035                   i2c2_read_no_reg_addr@pbuf 0031  
                I2C1_StatusCallback@ext_buf 01A0                  I2C1_StatusCallback@ext_cnt 006B  
                I2C1_StatusCallback@ext_len 00C5                            ?_DATAEE_ReadByte 0070  
                             _eusartRxCount 0064           I2C1_StatusCallback@slaveWriteType 00C6  
                PROTOCOL_Send_uint16_t@pbuf 00DD                        ?_PROTOCOL_Initialize 0022  
         I2C2_ISR@i2c_10bit_address_restart 00C2                      I2C2_MasterRead@address 0029  
                                 _I2C2_Stop 0B7D                     ??_i2c2_read_no_reg_addr 0033  
                                   _OSCTUNE 0098                                     _SSP1ADD 0212  
                                   _SSP2ADD 021A                                     _SSP1BUF 0211  
                                   _SSP2BUF 0219                                     _SSP1MSK 0213  
                    _PROTOCOL_Start_Handler 00E7                             _I2C2_MasterRead 0D98  
                           _I2C2_Initialize 0BCA                          __end_of_RESOLUTION 0608  
                   _TMR0_HasOverflowOccured 0AEE                        DATAEE_WriteByte@bAdd 0022  
                    I2C2_MasterRead@trBlock 00CD                               ?_PROTOCOL_INV 0070  
                             ?_PROTOCOL_EXT 0070                               ?_PROTOCOL_SAV 0070  
                             ?_PROTOCOL_SET 0070                               ?_PROTOCOL_STA 0070  
                             ?_PROTOCOL_RST 0070                               ?_PROTOCOL_STP 0070  
                           __size_of___wmul 001C                                     ___lwdiv 0E45  
                                   ___lwmod 0E18                       ?_I2C2_BusCollisionISR 0070  
                 I2C2_MasterTRBInsert@count 0024                                     __ptext1 0AF2  
                                   __ptext2 0B4D                                     __ptext3 0256  
                                   __ptext4 0E7A                                     __ptext5 06C1  
                                   __ptext6 0D49                                     __ptext7 0DC2  
                                   __ptext8 0C78                                     __ptext9 0DEC  
                 I2C2_MasterTRBInsert@pflag 0022                             __size_of_printf 01D5  
                                   _dpowers 05FC                       _OSCILLATOR_Initialize 0AF6  
PROTOCOL_Write_Device_Address@device_id_i2c 0025                       ??_PROTOCOL_Initialize 002A  
                                   _isdigit 0B3E                                     _readbuf 00C7  
                                   _sec_cnt 00BB                                     _invoked 00BC  
                  ??_PIN_MANAGER_Initialize 0021                                     _sendbuf 0158  
         __size_of_PROTOCOL_I2C_Send_int8_t 005E                                  ?_I2C2_Stop 0070  
                     _I2C2_FunctionComplete 0B6C                   ?_PROTOCOL_I2C_Send_int8_t 0049  
                                   _tmr_cnt 00BA                                     clrloop0 0B02  
                                   _running 00BD                                     _strncmp 0E7A  
                      end_of_initialization 007D                  _PROTOCOL_Extension_Handler 00B1  
             __size_of_PROTOCOL_I2C_Set_TLV 0022                          i1_DATAEE_WriteByte 0C1D  
                         _EUSART_Initialize 0B95                     __end_of_I2C1_Initialize 0CB9  
                        ?_EUSART_Initialize 0070                       I2C2_MasterWrite@pdata 002E  
                        _p_i2c2_trb_current 0068                                   _RCSTAbits 019D  
                     I2C2_MasterWrite@pflag 002B                                     printf@c 0048  
                                   printf@f 0035                              ??_PROTOCOL_INV 0070  
                            ??_PROTOCOL_EXT 0021                              ??_PROTOCOL_SAV 0024  
                            ??_PROTOCOL_SET 0021                              ??_PROTOCOL_STA 0021  
                            ??_PROTOCOL_RST 0070                              ??_PROTOCOL_STP 0021  
                    I2C2_ISR@i2c_bytes_left 00C3                         ?i1_DATAEE_WriteByte 0070  
                              __pstringtext 05FC               __size_of_I2C2_MasterTRBInsert 0052  
                              ??_i2c2_write 0033                         ??_EUSART_Initialize 0021  
               __end_of_I2C1_StatusCallback 05FC                            ??_WDT_Initialize 0021  
                         __size_of_I2C1_ISR 0027                           __size_of_I2C2_ISR 0150  
                   __end_of_I2C2_MasterRead 0DC2                            __CFG_FOSC$INTOSC 0000  
                   __end_of_I2C2_Initialize 0BE5                           ?_PROTOCOL_I2C_GET 0070  
                         ?_PROTOCOL_I2C_SEN 0070                           ?_PROTOCOL_I2C_WHO 0070  
                     __size_of_EUSART_Write 0024                   ??_TMR0_HasOverflowOccured 0021  
                        ??_PROTOCOL_I2C_GET 0070                          ??_PROTOCOL_I2C_SEN 0070  
                        ??_PROTOCOL_I2C_WHO 0070                        ??i1_DATAEE_WriteByte 0071  
                                _tmr_scaler 00E9                    __end_of_DATAEE_WriteByte 0CFE  
                 __end_of_EUSART_Initialize 0BAF                                 printf@width 0046  
                        __end_of_i2c2_write 0D70                        i1PROTOCOL_SET@value_ 0071  
                    ??_I2C2_BusCollisionISR 0070                    I2C1_StatusCallback@pdata 0075  
               __size_of_PROTOCOL_Read_Lock 0003                  ??_I2C2_MasterWriteTRBBuild 0025  
                            __end_of___wmul 0C1D                               __pidataCOMMON 0003  
                              _EUSART_Write 0CFE                      ?_OSCILLATOR_Initialize 0070  
                 __size_of_I2C2_MasterWrite 002A                              __end_of_printf 0256  
                    ?_I2C2_FunctionComplete 0070                              PROTOCOL_Loop@c 00EC  
                       start_initialization 004A                                 ??_I2C2_Stop 0070  
                  __size_of_TMR0_Initialize 000F             __size_of_PIN_MANAGER_Initialize 001E  
                             ??_EUSART_Read 0021                               i2c2_write@buf 0035  
             i2c2_read_no_reg_addr@dev_addr 002F                                 putch@txData 0023  
                       DATAEE_ReadByte@bAdd 0021             I2C2_MasterWriteTRBBuild@address 0023  
                          i2c2_write@status 0038                        I2C2_MasterRead@pdata 002E  
                  ?_I2C2_MasterReadTRBBuild 0021                        I2C2_MasterRead@pflag 002B  
                          ?_I2C1_Initialize 0070                            I2C1_ISR@i2c_data 0079  
                                  ??___wmul 0025               I2C2_MasterWriteTRBBuild@pdata 0021  
                      I2C2_ISR@pi2c_buf_ptr 00C4                    PROTOCOL_Send_int8_t@pbuf 00DF  
      __end_of_PROTOCOL_Read_Device_Address 0AD8       __size_of_PROTOCOL_Read_Device_Address 0003  
              _PROTOCOL_Read_Device_Address 0AD5                                 __pdataBANK1 00E9  
                                  ??_printf 0039                     i1DATAEE_WriteByte@bData 0070  
               __end_of_EUSART_Transmit_ISR 0BCA                            ?_I2C2_MasterRead 0028  
                               __pbssCOMMON 007A                            ?_I2C2_Initialize 0070  
                                 ___latbits 0002                               __pcstackBANK0 0020  
                             __pcstackBANK1 00EC            I2C1_StatusCallback@i2c_bus_state 0077  
                      _PROTOCOL_Inv_Handler 00AF                                _isdigit$1477 0021  
                             ??_inv_handler 004D                        __end_of_PROTOCOL_INV 0AE6  
                      __end_of_PROTOCOL_EXT 0003                        __end_of_PROTOCOL_SAV 0B27  
                      __end_of_PROTOCOL_SET 0B15                        __end_of_PROTOCOL_STA 0AEE  
            __size_of_i2c2_read_no_reg_addr 002C                        __end_of_PROTOCOL_RST 0B31  
                      __end_of_PROTOCOL_STP 0ADB               __end_of_i2c2_read_no_reg_addr 0E18  
                             _i2c2_tr_queue 00D8                  __end_of_EUSART_Receive_ISR 0C01  
           PROTOCOL_Initialize@stop_handler 0025                  __size_of_EUSART_Initialize 001A  
                       __end_of_EUSART_Read 0C78                      __size_of_PROTOCOL_Loop 018C  
                                 __pnvBANK1 00E1       __end_of_PROTOCOL_Write_Device_Address 0B6C  
    __size_of_PROTOCOL_Write_Device_Address 0010               _PROTOCOL_Write_Device_Address 0B5C  
                          ___lwdiv@dividend 0029                      _PIN_MANAGER_Initialize 0C3A  
                      EUSART_Read@readValue 0022            __end_of_PROTOCOL_I2C_Send_int8_t 1000  
                                  ?___lwdiv 0027                                    ?___lwmod 002F  
                              _eusartRxHead 0066                                _eusartTxHead 007C  
                              _eusartRxTail 0065                                _eusartTxTail 007B  
                                  _I2C1_ISR 0D22                                    _I2C2_ISR 03E2  
             ?_PROTOCOL_Read_Device_Address 0070                ??_INTERRUPT_InterruptManager 0020  
                 PROTOCOL_Send_int16_t@pbuf 00DB                                   __pswtext1 0800  
                                 __pswtext2 0818                     _eusartTxBufferRemaining 007A  
                                  ?_isdigit 0070                            ___lwdiv@quotient 002D  
                  __size_of_DATAEE_ReadByte 000D                                    ?_strncmp 0021  
                            __size_of_putch 0006                              _eusartRxBuffer 0120  
           __end_of_I2C2_MasterReadTRBBuild 0D98                           ??_TMR0_Initialize 0021  
                            _eusartTxBuffer 00A0                              ___wmul@product 0025  
                                  _LATCbits 010E                        _PROTOCOL_Set_Handler 00E3  
          i2c2_read_no_reg_addr@read_status 0036                                   clear_ram0 0B01  
                       __end_of_inv_handler 0761                                    _PIE1bits 0091  
                                  _PIE4bits 0094                       PROTOCOL_I2C_SEN@pdata 0072  
                  PROTOCOL_I2C_Set_TLV@type 0025         __size_of_INTERRUPT_InterruptManager 0044  
                                  _PIR1bits 0011                                    _PIR4bits 0014  
                                  _SSP1CON1 0215                                    _SSP1CON2 0216  
                                  _SSP1CON3 0217                PROTOCOL_Initialize@device_id 0022  
                                  _SSP2CON1 021D                                    _SSP2CON3 021F  
                                  _SSP1STAT 0214                                    _SSP2STAT 021C  
                            _readbuf_status 00B8                       _PROTOCOL_Stop_Handler 00E5  
               __end_of_PROTOCOL_Initialize 0F50               I2C2_MasterTRBInsert@ptrb_list 0021  
                   __size_ofi1_PROTOCOL_EXT 0001                     __size_ofi1_PROTOCOL_SAV 0009  
                   __size_ofi1_PROTOCOL_SET 0007                     __size_ofi1_PROTOCOL_STA 0004  
                   __size_ofi1_PROTOCOL_STP 0003                           ___wmul@multiplier 0021  
              __end_of_PROTOCOL_I2C_Set_TLV 0CDB                            _I2C2_MasterWrite 0DC2  
                             _PROTOCOL_Loop 0256                                  printf@flag 0045  
                                printf@prec 003D                       DATAEE_WriteByte@bData 0021  
                   I2C1_StatusCallback@next 006C                                 _EUSART_Read 0C58  
              __end_of_I2C2_MasterTRBInsert 0FA2                 PROTOCOL_I2C_Set_TLV@pbuffer 0022  
                         ?_DATAEE_WriteByte 0021    __end_of_PROTOCOL_Backplane_Slave_Enabled 0AE2  
 __size_of_PROTOCOL_Backplane_Slave_Enabled 0004          ??_PROTOCOL_Backplane_Slave_Enabled 0070  
         ?_PROTOCOL_Backplane_Slave_Enabled 0070            _PROTOCOL_Backplane_Slave_Enabled 0ADE  
                        ??_DATAEE_WriteByte 0022                               _slave_address 00C0  
                                _EECON1bits 0195                          PROTOCOL_SET@value_ 0022  
                 __size_of_PROTOCOL_I2C_GET 0003                   __size_of_PROTOCOL_I2C_SEN 0043  
                 __size_of_PROTOCOL_I2C_WHO 0003              I2C2_MasterWriteTRBBuild@length 0022  
                   ??_OSCILLATOR_Initialize 0021              ?_PROTOCOL_Write_Device_Address 0070  
                          __size_of___lwdiv 0035                            __size_of___lwmod 002D  
                   ??_I2C2_FunctionComplete 0070                              ?_PROTOCOL_Loop 0070  
                  _PROTOCOL_I2C_Send_int8_t 0FA2                       __size_of_PROTOCOL_INV 0004  
                     __size_of_PROTOCOL_EXT 0001                       __size_of_PROTOCOL_SAV 0009  
                     __size_of_PROTOCOL_SET 0007                       __size_of_PROTOCOL_STA 0004  
                     __size_of_PROTOCOL_RST 000A                       __size_of_PROTOCOL_STP 0003  
            ??_PROTOCOL_Read_Device_Address 0021                            __size_of_isdigit 000F  
                           ___lwdiv@divisor 0027                __size_of_I2C1_StatusCallback 00CA  
                           ___lwdiv@counter 002C                                    __ptext10 0D98  
                                  __ptext11 0F50                                    __ptext20 0761  
                                  __ptext12 0D70                                    __ptext21 0B3E  
                                  __ptext13 0FA2                                    __ptext30 0002  
                                  __ptext22 0C01                                    __ptext14 0081  
                                  __ptext31 0C58                                    __ptext23 0AEE  
                                  __ptext15 0AFB                                    __ptext32 0EFF  
                                  __ptext24 0B5C                                    __ptext16 0CFE  
                                  __ptext41 03E2                                    __ptext33 0B31  
                                  __ptext25 0AD8                                    __ptext17 0E18  
                                  __ptext50 0B15                                    __ptext42 0B7D  
                                  __ptext34 0C3A                                    __ptext26 0AEA  
                                  __ptext18 0E45                                    __ptext51 0C1D  
                                  __ptext43 0B6C                                    __ptext35 0AF6  
                                  __ptext27 0B0E                                    __ptext19 0CB9  
                                  __ptext60 0BAF                                    __ptext52 0AC7  
                                  __ptext44 0AC8                                    __ptext36 0BCA  
                                  __ptext28 0B1E                                    __ptext61 0BE5  
                                  __ptext53 0ACF                                    __ptext45 0D22  
                                  __ptext37 0C98                                    __ptext29 0CDB  
                                  __ptext54 0B27                                    __ptext46 0532  
                                  __ptext38 0AD5                                    __ptext55 0AE2  
                                  __ptext47 0AD2                                    __ptext39 0B95  
                                  __ptext56 0ACC                                    __ptext48 0AE6  
                                  __ptext57 0EBC                                    __ptext49 0B07  
                                  __ptext58 0AC9                                    __ptext59 0ADE  
                              _SSP1CON1bits 0215                                _SSP1CON2bits 0216  
                                  _float100 00AD                 __size_ofi1_DATAEE_WriteByte 001D  
                               _inv_handler 06C1                                _SSP2CON1bits 021D  
                              _SSP2CON2bits 021E                 DATAEE_WriteByte@GIEBitValue 0023  
                          __size_of_strncmp 0042                               __size_of_atoi 0071  
                             __size_of_main 002E                                  strncmp@len 0024  
                         ??_DATAEE_ReadByte 0021                     I2C2_MasterWrite@address 0029  
                   _BACKPLANE_SLAVE_ADDRESS 00EA                  __end_of_PROTOCOL_Read_Lock 0AD2  
                                  int$flags 007E                                    atoi@sign 002B  
           PROTOCOL_I2C_Send_int8_t@pbuffer 0049                                _PROTOCOL_INV 0AE2  
                              _PROTOCOL_EXT 0002                                _PROTOCOL_SAV 0B1E  
                              _PROTOCOL_SET 0B0E                                _PROTOCOL_STA 0AEA  
                              _PROTOCOL_RST 0B27                                _PROTOCOL_STP 0AD8  
        __end_of_INTERRUPT_InterruptManager 0048                  _INTERRUPT_InterruptManager 0004  
                                 printf@len 0043                                   printf@val 0041  
                   I2C2_MasterWrite@trBlock 00D1                                _SSP1STATbits 0214  
                  i2c2_read_no_reg_addr@len 0032               __size_of_I2C2_BusCollisionISR 0001  
          __size_of_I2C2_MasterReadTRBBuild 0028                    ?_TMR0_HasOverflowOccured 0070  
                        _I2C_slaveWriteData 007D                                  _INTCONbits 000B  
                                  isdigit@c 0022                     __size_of_WDT_Initialize 0004  
         __size_of_I2C2_MasterWriteTRBBuild 0020                   ?_I2C2_MasterWriteTRBBuild 0021  
                                  intlevel1 0000                            ___lwmod@dividend 0031  
                       I2C2_ISR@i2c_address 006D                     ?_PIN_MANAGER_Initialize 0070  
                         __CFG_CLKOUTEN$OFF 0000                        _PROTOCOL_I2C_Set_TLV 0CB9  
                                 strncmp@s1 0021                                   strncmp@s2 0023  
                   _backplane_slave_enabled 00B7              PROTOCOL_I2C_Send_int8_t@length 004C  
                                _RESOLUTION 0606                      I2C2_MasterWrite@length 0028  
                                  printf@ap 0040                                    printf@cp 003E  
                        _EUSART_Receive_ISR 0BE5                             ??_PROTOCOL_Loop 005F  
                      _I2C2_MasterTRBInsert 0F50                    __size_of_I2C1_Initialize 0021  
                            i1_PROTOCOL_EXT 0AC7                              i1_PROTOCOL_SAV 0B15  
                            i1_PROTOCOL_SET 0B07                              i1_PROTOCOL_STA 0AE6  
                            i1_PROTOCOL_STP 0AD2                                  _OPTION_REG 0095  
                       ?_EUSART_Receive_ISR 0070                             ___lwmod@divisor 002F  
                           _TMR0_Initialize 0B4D                             ___lwmod@counter 0034  
               PROTOCOL_Loop@device_address 00ED                        PROTOCOL_EXT@char_buf 0021  
                        EUSART_Write@txData 0022                __size_of_EUSART_Transmit_ISR 001B  
            __end_of_PIN_MANAGER_Initialize 0C58                    __size_of_I2C2_MasterRead 002A  
                  __size_of_I2C2_Initialize 001B                       _i2c2_read_no_reg_addr 0DEC  
                        __size_of_I2C2_Stop 0018                        ??_EUSART_Receive_ISR 0070  
                     ?_PROTOCOL_I2C_Set_TLV 0021                    __end_of_I2C2_MasterWrite 0DEC  
                          _PROTOCOL_I2C_GET 0AC9                            _PROTOCOL_I2C_SEN 0EBC  
                          _PROTOCOL_I2C_WHO 0ACC  
