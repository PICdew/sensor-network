

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Wed Sep 20 03:34:22 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F1829
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	stringtext,global,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    17                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    39                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    40                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    43                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    44                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    45                           	psect	text23,local,class=CODE,merge=1,delta=2,group=1
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2,group=3
    48                           	psect	text26,local,class=CODE,merge=1,delta=2
    49                           	psect	text27,local,class=CODE,merge=1,delta=2,group=3
    50                           	psect	text28,local,class=CODE,merge=1,delta=2
    51                           	psect	text29,local,class=CODE,merge=1,delta=2
    52                           	psect	text30,local,class=CODE,merge=1,delta=2
    53                           	psect	text31,local,class=CODE,merge=1,delta=2
    54                           	psect	text32,local,class=CODE,merge=1,delta=2,group=1
    55                           	psect	text33,local,class=CODE,merge=1,delta=2
    56                           	psect	text34,local,class=CODE,merge=1,delta=2
    57                           	psect	text35,local,class=CODE,merge=1,delta=2
    58                           	psect	text36,local,class=CODE,merge=1,delta=2,group=3
    59                           	psect	text37,local,class=CODE,merge=1,delta=2,group=3
    60                           	psect	text38,local,class=CODE,merge=1,delta=2,group=1
    61                           	psect	text39,local,class=CODE,merge=1,delta=2,group=3
    62                           	psect	text40,local,class=CODE,merge=1,delta=2,group=3
    63                           	psect	text41,local,class=CODE,merge=1,delta=2
    64                           	psect	text42,local,class=CODE,merge=1,delta=2
    65                           	psect	text43,local,class=CODE,merge=1,delta=2
    66                           	psect	text44,local,class=CODE,merge=1,delta=2
    67                           	psect	text45,local,class=CODE,merge=1,delta=2
    68                           	psect	text46,local,class=CODE,merge=1,delta=2
    69                           	psect	text47,local,class=CODE,merge=1,delta=2
    70                           	psect	text48,local,class=CODE,merge=1,delta=2
    71                           	psect	text49,local,class=CODE,merge=1,delta=2,group=3
    72                           	psect	text50,local,class=CODE,merge=1,delta=2
    73                           	psect	text51,local,class=CODE,merge=1,delta=2
    74                           	psect	text52,local,class=CODE,merge=1,delta=2
    75                           	psect	text53,local,class=CODE,merge=1,delta=2
    76                           	psect	text54,local,class=CODE,merge=1,delta=2,group=3
    77                           	psect	text55,local,class=CODE,merge=1,delta=2,group=3
    78                           	psect	text56,local,class=CODE,merge=1,delta=2,group=3
    79                           	psect	text57,local,class=CODE,merge=1,delta=2
    80                           	psect	text58,local,class=CODE,merge=1,delta=2
    81                           	psect	text59,local,class=CODE,merge=1,delta=2,group=1
    82                           	psect	text60,local,class=CODE,merge=1,delta=2
    83                           	psect	text61,local,class=CODE,merge=1,delta=2
    84                           	psect	intentry,global,class=CODE,delta=2
    85                           	psect	text63,local,class=CODE,merge=1,delta=2
    86                           	psect	swtext1,local,class=CONST,delta=2
    87                           	psect	text64,local,class=CODE,merge=1,delta=2
    88                           	psect	text65,local,class=CODE,merge=1,delta=2
    89                           	psect	text66,local,class=CODE,merge=1,delta=2
    90                           	psect	text67,local,class=CODE,merge=1,delta=2
    91                           	psect	text68,local,class=CODE,merge=1,delta=2
    92                           	dabs	1,0x620,48
    93                           	dabs	1,0x5A0,80
    94                           	dabs	1,0x530,64
    95                           	dabs	1,0x2330,0,_cmd_buf
    96                           	dabs	1,0x7E,2
    97  0000                     
    98                           ; Version 1.41 (B)
    99                           ; Generated 21/02/2017 GMT
   100                           ; 
   101                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   102                           ; All rights reserved.
   103                           ; 
   104                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   105                           ; 
   106                           ; Redistribution and use in source and binary forms, with or without modification, are
   107                           ; permitted provided that the following conditions are met:
   108                           ; 
   109                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   110                           ;        conditions and the following disclaimer.
   111                           ; 
   112                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   113                           ;        of conditions and the following disclaimer in the documentation and/or other
   114                           ;        materials provided with the distribution.
   115                           ; 
   116                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   117                           ;        software without specific prior written permission.
   118                           ; 
   119                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   120                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   121                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   122                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   123                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   124                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   125                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   126                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   127                           ; 
   128                           ; 
   129                           ; Code-generator required, PIC16F1829 Definitions
   130                           ; 
   131                           ; SFR Addresses
   132  0000                     	;# 
   133  0001                     	;# 
   134  0002                     	;# 
   135  0003                     	;# 
   136  0004                     	;# 
   137  0005                     	;# 
   138  0006                     	;# 
   139  0007                     	;# 
   140  0008                     	;# 
   141  0009                     	;# 
   142  000A                     	;# 
   143  000B                     	;# 
   144  000C                     	;# 
   145  000D                     	;# 
   146  000E                     	;# 
   147  0011                     	;# 
   148  0012                     	;# 
   149  0013                     	;# 
   150  0014                     	;# 
   151  0015                     	;# 
   152  0016                     	;# 
   153  0016                     	;# 
   154  0017                     	;# 
   155  0018                     	;# 
   156  0019                     	;# 
   157  001A                     	;# 
   158  001B                     	;# 
   159  001C                     	;# 
   160  001E                     	;# 
   161  001F                     	;# 
   162  008C                     	;# 
   163  008D                     	;# 
   164  008E                     	;# 
   165  0091                     	;# 
   166  0092                     	;# 
   167  0093                     	;# 
   168  0094                     	;# 
   169  0095                     	;# 
   170  0096                     	;# 
   171  0097                     	;# 
   172  0098                     	;# 
   173  0099                     	;# 
   174  009A                     	;# 
   175  009B                     	;# 
   176  009B                     	;# 
   177  009C                     	;# 
   178  009D                     	;# 
   179  009E                     	;# 
   180  010C                     	;# 
   181  010D                     	;# 
   182  010E                     	;# 
   183  0111                     	;# 
   184  0112                     	;# 
   185  0113                     	;# 
   186  0114                     	;# 
   187  0115                     	;# 
   188  0116                     	;# 
   189  0117                     	;# 
   190  0118                     	;# 
   191  0119                     	;# 
   192  011A                     	;# 
   193  011B                     	;# 
   194  011D                     	;# 
   195  011E                     	;# 
   196  018C                     	;# 
   197  018D                     	;# 
   198  018E                     	;# 
   199  0191                     	;# 
   200  0191                     	;# 
   201  0192                     	;# 
   202  0193                     	;# 
   203  0193                     	;# 
   204  0193                     	;# 
   205  0194                     	;# 
   206  0195                     	;# 
   207  0196                     	;# 
   208  0199                     	;# 
   209  019A                     	;# 
   210  019B                     	;# 
   211  019B                     	;# 
   212  019C                     	;# 
   213  019D                     	;# 
   214  019E                     	;# 
   215  019F                     	;# 
   216  020C                     	;# 
   217  020D                     	;# 
   218  020E                     	;# 
   219  0211                     	;# 
   220  0211                     	;# 
   221  0212                     	;# 
   222  0212                     	;# 
   223  0213                     	;# 
   224  0213                     	;# 
   225  0214                     	;# 
   226  0214                     	;# 
   227  0215                     	;# 
   228  0215                     	;# 
   229  0215                     	;# 
   230  0216                     	;# 
   231  0216                     	;# 
   232  0217                     	;# 
   233  0217                     	;# 
   234  0219                     	;# 
   235  021A                     	;# 
   236  021B                     	;# 
   237  021C                     	;# 
   238  021D                     	;# 
   239  021E                     	;# 
   240  021F                     	;# 
   241  0291                     	;# 
   242  0291                     	;# 
   243  0292                     	;# 
   244  0293                     	;# 
   245  0294                     	;# 
   246  0295                     	;# 
   247  0295                     	;# 
   248  0296                     	;# 
   249  0298                     	;# 
   250  0298                     	;# 
   251  0299                     	;# 
   252  029A                     	;# 
   253  029B                     	;# 
   254  029C                     	;# 
   255  029D                     	;# 
   256  029E                     	;# 
   257  0311                     	;# 
   258  0311                     	;# 
   259  0312                     	;# 
   260  0313                     	;# 
   261  0318                     	;# 
   262  0318                     	;# 
   263  0319                     	;# 
   264  031A                     	;# 
   265  038C                     	;# 
   266  038D                     	;# 
   267  038E                     	;# 
   268  0391                     	;# 
   269  0392                     	;# 
   270  0393                     	;# 
   271  0394                     	;# 
   272  0395                     	;# 
   273  0396                     	;# 
   274  039A                     	;# 
   275  039C                     	;# 
   276  039D                     	;# 
   277  039E                     	;# 
   278  039F                     	;# 
   279  0415                     	;# 
   280  0416                     	;# 
   281  0417                     	;# 
   282  041C                     	;# 
   283  041D                     	;# 
   284  041E                     	;# 
   285  0FE4                     	;# 
   286  0FE5                     	;# 
   287  0FE6                     	;# 
   288  0FE7                     	;# 
   289  0FE8                     	;# 
   290  0FE9                     	;# 
   291  0FEA                     	;# 
   292  0FEB                     	;# 
   293  0FED                     	;# 
   294  0FEE                     	;# 
   295  0FEF                     	;# 
   296  0000                     	;# 
   297  0001                     	;# 
   298  0002                     	;# 
   299  0003                     	;# 
   300  0004                     	;# 
   301  0005                     	;# 
   302  0006                     	;# 
   303  0007                     	;# 
   304  0008                     	;# 
   305  0009                     	;# 
   306  000A                     	;# 
   307  000B                     	;# 
   308  000C                     	;# 
   309  000D                     	;# 
   310  000E                     	;# 
   311  0011                     	;# 
   312  0012                     	;# 
   313  0013                     	;# 
   314  0014                     	;# 
   315  0015                     	;# 
   316  0016                     	;# 
   317  0016                     	;# 
   318  0017                     	;# 
   319  0018                     	;# 
   320  0019                     	;# 
   321  001A                     	;# 
   322  001B                     	;# 
   323  001C                     	;# 
   324  001E                     	;# 
   325  001F                     	;# 
   326  008C                     	;# 
   327  008D                     	;# 
   328  008E                     	;# 
   329  0091                     	;# 
   330  0092                     	;# 
   331  0093                     	;# 
   332  0094                     	;# 
   333  0095                     	;# 
   334  0096                     	;# 
   335  0097                     	;# 
   336  0098                     	;# 
   337  0099                     	;# 
   338  009A                     	;# 
   339  009B                     	;# 
   340  009B                     	;# 
   341  009C                     	;# 
   342  009D                     	;# 
   343  009E                     	;# 
   344  010C                     	;# 
   345  010D                     	;# 
   346  010E                     	;# 
   347  0111                     	;# 
   348  0112                     	;# 
   349  0113                     	;# 
   350  0114                     	;# 
   351  0115                     	;# 
   352  0116                     	;# 
   353  0117                     	;# 
   354  0118                     	;# 
   355  0119                     	;# 
   356  011A                     	;# 
   357  011B                     	;# 
   358  011D                     	;# 
   359  011E                     	;# 
   360  018C                     	;# 
   361  018D                     	;# 
   362  018E                     	;# 
   363  0191                     	;# 
   364  0191                     	;# 
   365  0192                     	;# 
   366  0193                     	;# 
   367  0193                     	;# 
   368  0193                     	;# 
   369  0194                     	;# 
   370  0195                     	;# 
   371  0196                     	;# 
   372  0199                     	;# 
   373  019A                     	;# 
   374  019B                     	;# 
   375  019B                     	;# 
   376  019C                     	;# 
   377  019D                     	;# 
   378  019E                     	;# 
   379  019F                     	;# 
   380  020C                     	;# 
   381  020D                     	;# 
   382  020E                     	;# 
   383  0211                     	;# 
   384  0211                     	;# 
   385  0212                     	;# 
   386  0212                     	;# 
   387  0213                     	;# 
   388  0213                     	;# 
   389  0214                     	;# 
   390  0214                     	;# 
   391  0215                     	;# 
   392  0215                     	;# 
   393  0215                     	;# 
   394  0216                     	;# 
   395  0216                     	;# 
   396  0217                     	;# 
   397  0217                     	;# 
   398  0219                     	;# 
   399  021A                     	;# 
   400  021B                     	;# 
   401  021C                     	;# 
   402  021D                     	;# 
   403  021E                     	;# 
   404  021F                     	;# 
   405  0291                     	;# 
   406  0291                     	;# 
   407  0292                     	;# 
   408  0293                     	;# 
   409  0294                     	;# 
   410  0295                     	;# 
   411  0295                     	;# 
   412  0296                     	;# 
   413  0298                     	;# 
   414  0298                     	;# 
   415  0299                     	;# 
   416  029A                     	;# 
   417  029B                     	;# 
   418  029C                     	;# 
   419  029D                     	;# 
   420  029E                     	;# 
   421  0311                     	;# 
   422  0311                     	;# 
   423  0312                     	;# 
   424  0313                     	;# 
   425  0318                     	;# 
   426  0318                     	;# 
   427  0319                     	;# 
   428  031A                     	;# 
   429  038C                     	;# 
   430  038D                     	;# 
   431  038E                     	;# 
   432  0391                     	;# 
   433  0392                     	;# 
   434  0393                     	;# 
   435  0394                     	;# 
   436  0395                     	;# 
   437  0396                     	;# 
   438  039A                     	;# 
   439  039C                     	;# 
   440  039D                     	;# 
   441  039E                     	;# 
   442  039F                     	;# 
   443  0415                     	;# 
   444  0416                     	;# 
   445  0417                     	;# 
   446  041C                     	;# 
   447  041D                     	;# 
   448  041E                     	;# 
   449  0FE4                     	;# 
   450  0FE5                     	;# 
   451  0FE6                     	;# 
   452  0FE7                     	;# 
   453  0FE8                     	;# 
   454  0FE9                     	;# 
   455  0FEA                     	;# 
   456  0FEB                     	;# 
   457  0FED                     	;# 
   458  0FEE                     	;# 
   459  0FEF                     	;# 
   460  0000                     	;# 
   461  0001                     	;# 
   462  0002                     	;# 
   463  0003                     	;# 
   464  0004                     	;# 
   465  0005                     	;# 
   466  0006                     	;# 
   467  0007                     	;# 
   468  0008                     	;# 
   469  0009                     	;# 
   470  000A                     	;# 
   471  000B                     	;# 
   472  000C                     	;# 
   473  000D                     	;# 
   474  000E                     	;# 
   475  0011                     	;# 
   476  0012                     	;# 
   477  0013                     	;# 
   478  0014                     	;# 
   479  0015                     	;# 
   480  0016                     	;# 
   481  0016                     	;# 
   482  0017                     	;# 
   483  0018                     	;# 
   484  0019                     	;# 
   485  001A                     	;# 
   486  001B                     	;# 
   487  001C                     	;# 
   488  001E                     	;# 
   489  001F                     	;# 
   490  008C                     	;# 
   491  008D                     	;# 
   492  008E                     	;# 
   493  0091                     	;# 
   494  0092                     	;# 
   495  0093                     	;# 
   496  0094                     	;# 
   497  0095                     	;# 
   498  0096                     	;# 
   499  0097                     	;# 
   500  0098                     	;# 
   501  0099                     	;# 
   502  009A                     	;# 
   503  009B                     	;# 
   504  009B                     	;# 
   505  009C                     	;# 
   506  009D                     	;# 
   507  009E                     	;# 
   508  010C                     	;# 
   509  010D                     	;# 
   510  010E                     	;# 
   511  0111                     	;# 
   512  0112                     	;# 
   513  0113                     	;# 
   514  0114                     	;# 
   515  0115                     	;# 
   516  0116                     	;# 
   517  0117                     	;# 
   518  0118                     	;# 
   519  0119                     	;# 
   520  011A                     	;# 
   521  011B                     	;# 
   522  011D                     	;# 
   523  011E                     	;# 
   524  018C                     	;# 
   525  018D                     	;# 
   526  018E                     	;# 
   527  0191                     	;# 
   528  0191                     	;# 
   529  0192                     	;# 
   530  0193                     	;# 
   531  0193                     	;# 
   532  0193                     	;# 
   533  0194                     	;# 
   534  0195                     	;# 
   535  0196                     	;# 
   536  0199                     	;# 
   537  019A                     	;# 
   538  019B                     	;# 
   539  019B                     	;# 
   540  019C                     	;# 
   541  019D                     	;# 
   542  019E                     	;# 
   543  019F                     	;# 
   544  020C                     	;# 
   545  020D                     	;# 
   546  020E                     	;# 
   547  0211                     	;# 
   548  0211                     	;# 
   549  0212                     	;# 
   550  0212                     	;# 
   551  0213                     	;# 
   552  0213                     	;# 
   553  0214                     	;# 
   554  0214                     	;# 
   555  0215                     	;# 
   556  0215                     	;# 
   557  0215                     	;# 
   558  0216                     	;# 
   559  0216                     	;# 
   560  0217                     	;# 
   561  0217                     	;# 
   562  0219                     	;# 
   563  021A                     	;# 
   564  021B                     	;# 
   565  021C                     	;# 
   566  021D                     	;# 
   567  021E                     	;# 
   568  021F                     	;# 
   569  0291                     	;# 
   570  0291                     	;# 
   571  0292                     	;# 
   572  0293                     	;# 
   573  0294                     	;# 
   574  0295                     	;# 
   575  0295                     	;# 
   576  0296                     	;# 
   577  0298                     	;# 
   578  0298                     	;# 
   579  0299                     	;# 
   580  029A                     	;# 
   581  029B                     	;# 
   582  029C                     	;# 
   583  029D                     	;# 
   584  029E                     	;# 
   585  0311                     	;# 
   586  0311                     	;# 
   587  0312                     	;# 
   588  0313                     	;# 
   589  0318                     	;# 
   590  0318                     	;# 
   591  0319                     	;# 
   592  031A                     	;# 
   593  038C                     	;# 
   594  038D                     	;# 
   595  038E                     	;# 
   596  0391                     	;# 
   597  0392                     	;# 
   598  0393                     	;# 
   599  0394                     	;# 
   600  0395                     	;# 
   601  0396                     	;# 
   602  039A                     	;# 
   603  039C                     	;# 
   604  039D                     	;# 
   605  039E                     	;# 
   606  039F                     	;# 
   607  0415                     	;# 
   608  0416                     	;# 
   609  0417                     	;# 
   610  041C                     	;# 
   611  041D                     	;# 
   612  041E                     	;# 
   613  0FE4                     	;# 
   614  0FE5                     	;# 
   615  0FE6                     	;# 
   616  0FE7                     	;# 
   617  0FE8                     	;# 
   618  0FE9                     	;# 
   619  0FEA                     	;# 
   620  0FEB                     	;# 
   621  0FED                     	;# 
   622  0FEE                     	;# 
   623  0FEF                     	;# 
   624  0000                     	;# 
   625  0001                     	;# 
   626  0002                     	;# 
   627  0003                     	;# 
   628  0004                     	;# 
   629  0005                     	;# 
   630  0006                     	;# 
   631  0007                     	;# 
   632  0008                     	;# 
   633  0009                     	;# 
   634  000A                     	;# 
   635  000B                     	;# 
   636  000C                     	;# 
   637  000D                     	;# 
   638  000E                     	;# 
   639  0011                     	;# 
   640  0012                     	;# 
   641  0013                     	;# 
   642  0014                     	;# 
   643  0015                     	;# 
   644  0016                     	;# 
   645  0016                     	;# 
   646  0017                     	;# 
   647  0018                     	;# 
   648  0019                     	;# 
   649  001A                     	;# 
   650  001B                     	;# 
   651  001C                     	;# 
   652  001E                     	;# 
   653  001F                     	;# 
   654  008C                     	;# 
   655  008D                     	;# 
   656  008E                     	;# 
   657  0091                     	;# 
   658  0092                     	;# 
   659  0093                     	;# 
   660  0094                     	;# 
   661  0095                     	;# 
   662  0096                     	;# 
   663  0097                     	;# 
   664  0098                     	;# 
   665  0099                     	;# 
   666  009A                     	;# 
   667  009B                     	;# 
   668  009B                     	;# 
   669  009C                     	;# 
   670  009D                     	;# 
   671  009E                     	;# 
   672  010C                     	;# 
   673  010D                     	;# 
   674  010E                     	;# 
   675  0111                     	;# 
   676  0112                     	;# 
   677  0113                     	;# 
   678  0114                     	;# 
   679  0115                     	;# 
   680  0116                     	;# 
   681  0117                     	;# 
   682  0118                     	;# 
   683  0119                     	;# 
   684  011A                     	;# 
   685  011B                     	;# 
   686  011D                     	;# 
   687  011E                     	;# 
   688  018C                     	;# 
   689  018D                     	;# 
   690  018E                     	;# 
   691  0191                     	;# 
   692  0191                     	;# 
   693  0192                     	;# 
   694  0193                     	;# 
   695  0193                     	;# 
   696  0193                     	;# 
   697  0194                     	;# 
   698  0195                     	;# 
   699  0196                     	;# 
   700  0199                     	;# 
   701  019A                     	;# 
   702  019B                     	;# 
   703  019B                     	;# 
   704  019C                     	;# 
   705  019D                     	;# 
   706  019E                     	;# 
   707  019F                     	;# 
   708  020C                     	;# 
   709  020D                     	;# 
   710  020E                     	;# 
   711  0211                     	;# 
   712  0211                     	;# 
   713  0212                     	;# 
   714  0212                     	;# 
   715  0213                     	;# 
   716  0213                     	;# 
   717  0214                     	;# 
   718  0214                     	;# 
   719  0215                     	;# 
   720  0215                     	;# 
   721  0215                     	;# 
   722  0216                     	;# 
   723  0216                     	;# 
   724  0217                     	;# 
   725  0217                     	;# 
   726  0219                     	;# 
   727  021A                     	;# 
   728  021B                     	;# 
   729  021C                     	;# 
   730  021D                     	;# 
   731  021E                     	;# 
   732  021F                     	;# 
   733  0291                     	;# 
   734  0291                     	;# 
   735  0292                     	;# 
   736  0293                     	;# 
   737  0294                     	;# 
   738  0295                     	;# 
   739  0295                     	;# 
   740  0296                     	;# 
   741  0298                     	;# 
   742  0298                     	;# 
   743  0299                     	;# 
   744  029A                     	;# 
   745  029B                     	;# 
   746  029C                     	;# 
   747  029D                     	;# 
   748  029E                     	;# 
   749  0311                     	;# 
   750  0311                     	;# 
   751  0312                     	;# 
   752  0313                     	;# 
   753  0318                     	;# 
   754  0318                     	;# 
   755  0319                     	;# 
   756  031A                     	;# 
   757  038C                     	;# 
   758  038D                     	;# 
   759  038E                     	;# 
   760  0391                     	;# 
   761  0392                     	;# 
   762  0393                     	;# 
   763  0394                     	;# 
   764  0395                     	;# 
   765  0396                     	;# 
   766  039A                     	;# 
   767  039C                     	;# 
   768  039D                     	;# 
   769  039E                     	;# 
   770  039F                     	;# 
   771  0415                     	;# 
   772  0416                     	;# 
   773  0417                     	;# 
   774  041C                     	;# 
   775  041D                     	;# 
   776  041E                     	;# 
   777  0FE4                     	;# 
   778  0FE5                     	;# 
   779  0FE6                     	;# 
   780  0FE7                     	;# 
   781  0FE8                     	;# 
   782  0FE9                     	;# 
   783  0FEA                     	;# 
   784  0FEB                     	;# 
   785  0FED                     	;# 
   786  0FEE                     	;# 
   787  0FEF                     	;# 
   788  0000                     	;# 
   789  0001                     	;# 
   790  0002                     	;# 
   791  0003                     	;# 
   792  0004                     	;# 
   793  0005                     	;# 
   794  0006                     	;# 
   795  0007                     	;# 
   796  0008                     	;# 
   797  0009                     	;# 
   798  000A                     	;# 
   799  000B                     	;# 
   800  000C                     	;# 
   801  000D                     	;# 
   802  000E                     	;# 
   803  0011                     	;# 
   804  0012                     	;# 
   805  0013                     	;# 
   806  0014                     	;# 
   807  0015                     	;# 
   808  0016                     	;# 
   809  0016                     	;# 
   810  0017                     	;# 
   811  0018                     	;# 
   812  0019                     	;# 
   813  001A                     	;# 
   814  001B                     	;# 
   815  001C                     	;# 
   816  001E                     	;# 
   817  001F                     	;# 
   818  008C                     	;# 
   819  008D                     	;# 
   820  008E                     	;# 
   821  0091                     	;# 
   822  0092                     	;# 
   823  0093                     	;# 
   824  0094                     	;# 
   825  0095                     	;# 
   826  0096                     	;# 
   827  0097                     	;# 
   828  0098                     	;# 
   829  0099                     	;# 
   830  009A                     	;# 
   831  009B                     	;# 
   832  009B                     	;# 
   833  009C                     	;# 
   834  009D                     	;# 
   835  009E                     	;# 
   836  010C                     	;# 
   837  010D                     	;# 
   838  010E                     	;# 
   839  0111                     	;# 
   840  0112                     	;# 
   841  0113                     	;# 
   842  0114                     	;# 
   843  0115                     	;# 
   844  0116                     	;# 
   845  0117                     	;# 
   846  0118                     	;# 
   847  0119                     	;# 
   848  011A                     	;# 
   849  011B                     	;# 
   850  011D                     	;# 
   851  011E                     	;# 
   852  018C                     	;# 
   853  018D                     	;# 
   854  018E                     	;# 
   855  0191                     	;# 
   856  0191                     	;# 
   857  0192                     	;# 
   858  0193                     	;# 
   859  0193                     	;# 
   860  0193                     	;# 
   861  0194                     	;# 
   862  0195                     	;# 
   863  0196                     	;# 
   864  0199                     	;# 
   865  019A                     	;# 
   866  019B                     	;# 
   867  019B                     	;# 
   868  019C                     	;# 
   869  019D                     	;# 
   870  019E                     	;# 
   871  019F                     	;# 
   872  020C                     	;# 
   873  020D                     	;# 
   874  020E                     	;# 
   875  0211                     	;# 
   876  0211                     	;# 
   877  0212                     	;# 
   878  0212                     	;# 
   879  0213                     	;# 
   880  0213                     	;# 
   881  0214                     	;# 
   882  0214                     	;# 
   883  0215                     	;# 
   884  0215                     	;# 
   885  0215                     	;# 
   886  0216                     	;# 
   887  0216                     	;# 
   888  0217                     	;# 
   889  0217                     	;# 
   890  0219                     	;# 
   891  021A                     	;# 
   892  021B                     	;# 
   893  021C                     	;# 
   894  021D                     	;# 
   895  021E                     	;# 
   896  021F                     	;# 
   897  0291                     	;# 
   898  0291                     	;# 
   899  0292                     	;# 
   900  0293                     	;# 
   901  0294                     	;# 
   902  0295                     	;# 
   903  0295                     	;# 
   904  0296                     	;# 
   905  0298                     	;# 
   906  0298                     	;# 
   907  0299                     	;# 
   908  029A                     	;# 
   909  029B                     	;# 
   910  029C                     	;# 
   911  029D                     	;# 
   912  029E                     	;# 
   913  0311                     	;# 
   914  0311                     	;# 
   915  0312                     	;# 
   916  0313                     	;# 
   917  0318                     	;# 
   918  0318                     	;# 
   919  0319                     	;# 
   920  031A                     	;# 
   921  038C                     	;# 
   922  038D                     	;# 
   923  038E                     	;# 
   924  0391                     	;# 
   925  0392                     	;# 
   926  0393                     	;# 
   927  0394                     	;# 
   928  0395                     	;# 
   929  0396                     	;# 
   930  039A                     	;# 
   931  039C                     	;# 
   932  039D                     	;# 
   933  039E                     	;# 
   934  039F                     	;# 
   935  0415                     	;# 
   936  0416                     	;# 
   937  0417                     	;# 
   938  041C                     	;# 
   939  041D                     	;# 
   940  041E                     	;# 
   941  0FE4                     	;# 
   942  0FE5                     	;# 
   943  0FE6                     	;# 
   944  0FE7                     	;# 
   945  0FE8                     	;# 
   946  0FE9                     	;# 
   947  0FEA                     	;# 
   948  0FEB                     	;# 
   949  0FED                     	;# 
   950  0FEE                     	;# 
   951  0FEF                     	;# 
   952  0000                     	;# 
   953  0001                     	;# 
   954  0002                     	;# 
   955  0003                     	;# 
   956  0004                     	;# 
   957  0005                     	;# 
   958  0006                     	;# 
   959  0007                     	;# 
   960  0008                     	;# 
   961  0009                     	;# 
   962  000A                     	;# 
   963  000B                     	;# 
   964  000C                     	;# 
   965  000D                     	;# 
   966  000E                     	;# 
   967  0011                     	;# 
   968  0012                     	;# 
   969  0013                     	;# 
   970  0014                     	;# 
   971  0015                     	;# 
   972  0016                     	;# 
   973  0016                     	;# 
   974  0017                     	;# 
   975  0018                     	;# 
   976  0019                     	;# 
   977  001A                     	;# 
   978  001B                     	;# 
   979  001C                     	;# 
   980  001E                     	;# 
   981  001F                     	;# 
   982  008C                     	;# 
   983  008D                     	;# 
   984  008E                     	;# 
   985  0091                     	;# 
   986  0092                     	;# 
   987  0093                     	;# 
   988  0094                     	;# 
   989  0095                     	;# 
   990  0096                     	;# 
   991  0097                     	;# 
   992  0098                     	;# 
   993  0099                     	;# 
   994  009A                     	;# 
   995  009B                     	;# 
   996  009B                     	;# 
   997  009C                     	;# 
   998  009D                     	;# 
   999  009E                     	;# 
  1000  010C                     	;# 
  1001  010D                     	;# 
  1002  010E                     	;# 
  1003  0111                     	;# 
  1004  0112                     	;# 
  1005  0113                     	;# 
  1006  0114                     	;# 
  1007  0115                     	;# 
  1008  0116                     	;# 
  1009  0117                     	;# 
  1010  0118                     	;# 
  1011  0119                     	;# 
  1012  011A                     	;# 
  1013  011B                     	;# 
  1014  011D                     	;# 
  1015  011E                     	;# 
  1016  018C                     	;# 
  1017  018D                     	;# 
  1018  018E                     	;# 
  1019  0191                     	;# 
  1020  0191                     	;# 
  1021  0192                     	;# 
  1022  0193                     	;# 
  1023  0193                     	;# 
  1024  0193                     	;# 
  1025  0194                     	;# 
  1026  0195                     	;# 
  1027  0196                     	;# 
  1028  0199                     	;# 
  1029  019A                     	;# 
  1030  019B                     	;# 
  1031  019B                     	;# 
  1032  019C                     	;# 
  1033  019D                     	;# 
  1034  019E                     	;# 
  1035  019F                     	;# 
  1036  020C                     	;# 
  1037  020D                     	;# 
  1038  020E                     	;# 
  1039  0211                     	;# 
  1040  0211                     	;# 
  1041  0212                     	;# 
  1042  0212                     	;# 
  1043  0213                     	;# 
  1044  0213                     	;# 
  1045  0214                     	;# 
  1046  0214                     	;# 
  1047  0215                     	;# 
  1048  0215                     	;# 
  1049  0215                     	;# 
  1050  0216                     	;# 
  1051  0216                     	;# 
  1052  0217                     	;# 
  1053  0217                     	;# 
  1054  0219                     	;# 
  1055  021A                     	;# 
  1056  021B                     	;# 
  1057  021C                     	;# 
  1058  021D                     	;# 
  1059  021E                     	;# 
  1060  021F                     	;# 
  1061  0291                     	;# 
  1062  0291                     	;# 
  1063  0292                     	;# 
  1064  0293                     	;# 
  1065  0294                     	;# 
  1066  0295                     	;# 
  1067  0295                     	;# 
  1068  0296                     	;# 
  1069  0298                     	;# 
  1070  0298                     	;# 
  1071  0299                     	;# 
  1072  029A                     	;# 
  1073  029B                     	;# 
  1074  029C                     	;# 
  1075  029D                     	;# 
  1076  029E                     	;# 
  1077  0311                     	;# 
  1078  0311                     	;# 
  1079  0312                     	;# 
  1080  0313                     	;# 
  1081  0318                     	;# 
  1082  0318                     	;# 
  1083  0319                     	;# 
  1084  031A                     	;# 
  1085  038C                     	;# 
  1086  038D                     	;# 
  1087  038E                     	;# 
  1088  0391                     	;# 
  1089  0392                     	;# 
  1090  0393                     	;# 
  1091  0394                     	;# 
  1092  0395                     	;# 
  1093  0396                     	;# 
  1094  039A                     	;# 
  1095  039C                     	;# 
  1096  039D                     	;# 
  1097  039E                     	;# 
  1098  039F                     	;# 
  1099  0415                     	;# 
  1100  0416                     	;# 
  1101  0417                     	;# 
  1102  041C                     	;# 
  1103  041D                     	;# 
  1104  041E                     	;# 
  1105  0FE4                     	;# 
  1106  0FE5                     	;# 
  1107  0FE6                     	;# 
  1108  0FE7                     	;# 
  1109  0FE8                     	;# 
  1110  0FE9                     	;# 
  1111  0FEA                     	;# 
  1112  0FEB                     	;# 
  1113  0FED                     	;# 
  1114  0FEE                     	;# 
  1115  0FEF                     	;# 
  1116  0000                     	;# 
  1117  0001                     	;# 
  1118  0002                     	;# 
  1119  0003                     	;# 
  1120  0004                     	;# 
  1121  0005                     	;# 
  1122  0006                     	;# 
  1123  0007                     	;# 
  1124  0008                     	;# 
  1125  0009                     	;# 
  1126  000A                     	;# 
  1127  000B                     	;# 
  1128  000C                     	;# 
  1129  000D                     	;# 
  1130  000E                     	;# 
  1131  0011                     	;# 
  1132  0012                     	;# 
  1133  0013                     	;# 
  1134  0014                     	;# 
  1135  0015                     	;# 
  1136  0016                     	;# 
  1137  0016                     	;# 
  1138  0017                     	;# 
  1139  0018                     	;# 
  1140  0019                     	;# 
  1141  001A                     	;# 
  1142  001B                     	;# 
  1143  001C                     	;# 
  1144  001E                     	;# 
  1145  001F                     	;# 
  1146  008C                     	;# 
  1147  008D                     	;# 
  1148  008E                     	;# 
  1149  0091                     	;# 
  1150  0092                     	;# 
  1151  0093                     	;# 
  1152  0094                     	;# 
  1153  0095                     	;# 
  1154  0096                     	;# 
  1155  0097                     	;# 
  1156  0098                     	;# 
  1157  0099                     	;# 
  1158  009A                     	;# 
  1159  009B                     	;# 
  1160  009B                     	;# 
  1161  009C                     	;# 
  1162  009D                     	;# 
  1163  009E                     	;# 
  1164  010C                     	;# 
  1165  010D                     	;# 
  1166  010E                     	;# 
  1167  0111                     	;# 
  1168  0112                     	;# 
  1169  0113                     	;# 
  1170  0114                     	;# 
  1171  0115                     	;# 
  1172  0116                     	;# 
  1173  0117                     	;# 
  1174  0118                     	;# 
  1175  0119                     	;# 
  1176  011A                     	;# 
  1177  011B                     	;# 
  1178  011D                     	;# 
  1179  011E                     	;# 
  1180  018C                     	;# 
  1181  018D                     	;# 
  1182  018E                     	;# 
  1183  0191                     	;# 
  1184  0191                     	;# 
  1185  0192                     	;# 
  1186  0193                     	;# 
  1187  0193                     	;# 
  1188  0193                     	;# 
  1189  0194                     	;# 
  1190  0195                     	;# 
  1191  0196                     	;# 
  1192  0199                     	;# 
  1193  019A                     	;# 
  1194  019B                     	;# 
  1195  019B                     	;# 
  1196  019C                     	;# 
  1197  019D                     	;# 
  1198  019E                     	;# 
  1199  019F                     	;# 
  1200  020C                     	;# 
  1201  020D                     	;# 
  1202  020E                     	;# 
  1203  0211                     	;# 
  1204  0211                     	;# 
  1205  0212                     	;# 
  1206  0212                     	;# 
  1207  0213                     	;# 
  1208  0213                     	;# 
  1209  0214                     	;# 
  1210  0214                     	;# 
  1211  0215                     	;# 
  1212  0215                     	;# 
  1213  0215                     	;# 
  1214  0216                     	;# 
  1215  0216                     	;# 
  1216  0217                     	;# 
  1217  0217                     	;# 
  1218  0219                     	;# 
  1219  021A                     	;# 
  1220  021B                     	;# 
  1221  021C                     	;# 
  1222  021D                     	;# 
  1223  021E                     	;# 
  1224  021F                     	;# 
  1225  0291                     	;# 
  1226  0291                     	;# 
  1227  0292                     	;# 
  1228  0293                     	;# 
  1229  0294                     	;# 
  1230  0295                     	;# 
  1231  0295                     	;# 
  1232  0296                     	;# 
  1233  0298                     	;# 
  1234  0298                     	;# 
  1235  0299                     	;# 
  1236  029A                     	;# 
  1237  029B                     	;# 
  1238  029C                     	;# 
  1239  029D                     	;# 
  1240  029E                     	;# 
  1241  0311                     	;# 
  1242  0311                     	;# 
  1243  0312                     	;# 
  1244  0313                     	;# 
  1245  0318                     	;# 
  1246  0318                     	;# 
  1247  0319                     	;# 
  1248  031A                     	;# 
  1249  038C                     	;# 
  1250  038D                     	;# 
  1251  038E                     	;# 
  1252  0391                     	;# 
  1253  0392                     	;# 
  1254  0393                     	;# 
  1255  0394                     	;# 
  1256  0395                     	;# 
  1257  0396                     	;# 
  1258  039A                     	;# 
  1259  039C                     	;# 
  1260  039D                     	;# 
  1261  039E                     	;# 
  1262  039F                     	;# 
  1263  0415                     	;# 
  1264  0416                     	;# 
  1265  0417                     	;# 
  1266  041C                     	;# 
  1267  041D                     	;# 
  1268  041E                     	;# 
  1269  0FE4                     	;# 
  1270  0FE5                     	;# 
  1271  0FE6                     	;# 
  1272  0FE7                     	;# 
  1273  0FE8                     	;# 
  1274  0FE9                     	;# 
  1275  0FEA                     	;# 
  1276  0FEB                     	;# 
  1277  0FED                     	;# 
  1278  0FEE                     	;# 
  1279  0FEF                     	;# 
  1280  0000                     	;# 
  1281  0001                     	;# 
  1282  0002                     	;# 
  1283  0003                     	;# 
  1284  0004                     	;# 
  1285  0005                     	;# 
  1286  0006                     	;# 
  1287  0007                     	;# 
  1288  0008                     	;# 
  1289  0009                     	;# 
  1290  000A                     	;# 
  1291  000B                     	;# 
  1292  000C                     	;# 
  1293  000D                     	;# 
  1294  000E                     	;# 
  1295  0011                     	;# 
  1296  0012                     	;# 
  1297  0013                     	;# 
  1298  0014                     	;# 
  1299  0015                     	;# 
  1300  0016                     	;# 
  1301  0016                     	;# 
  1302  0017                     	;# 
  1303  0018                     	;# 
  1304  0019                     	;# 
  1305  001A                     	;# 
  1306  001B                     	;# 
  1307  001C                     	;# 
  1308  001E                     	;# 
  1309  001F                     	;# 
  1310  008C                     	;# 
  1311  008D                     	;# 
  1312  008E                     	;# 
  1313  0091                     	;# 
  1314  0092                     	;# 
  1315  0093                     	;# 
  1316  0094                     	;# 
  1317  0095                     	;# 
  1318  0096                     	;# 
  1319  0097                     	;# 
  1320  0098                     	;# 
  1321  0099                     	;# 
  1322  009A                     	;# 
  1323  009B                     	;# 
  1324  009B                     	;# 
  1325  009C                     	;# 
  1326  009D                     	;# 
  1327  009E                     	;# 
  1328  010C                     	;# 
  1329  010D                     	;# 
  1330  010E                     	;# 
  1331  0111                     	;# 
  1332  0112                     	;# 
  1333  0113                     	;# 
  1334  0114                     	;# 
  1335  0115                     	;# 
  1336  0116                     	;# 
  1337  0117                     	;# 
  1338  0118                     	;# 
  1339  0119                     	;# 
  1340  011A                     	;# 
  1341  011B                     	;# 
  1342  011D                     	;# 
  1343  011E                     	;# 
  1344  018C                     	;# 
  1345  018D                     	;# 
  1346  018E                     	;# 
  1347  0191                     	;# 
  1348  0191                     	;# 
  1349  0192                     	;# 
  1350  0193                     	;# 
  1351  0193                     	;# 
  1352  0193                     	;# 
  1353  0194                     	;# 
  1354  0195                     	;# 
  1355  0196                     	;# 
  1356  0199                     	;# 
  1357  019A                     	;# 
  1358  019B                     	;# 
  1359  019B                     	;# 
  1360  019C                     	;# 
  1361  019D                     	;# 
  1362  019E                     	;# 
  1363  019F                     	;# 
  1364  020C                     	;# 
  1365  020D                     	;# 
  1366  020E                     	;# 
  1367  0211                     	;# 
  1368  0211                     	;# 
  1369  0212                     	;# 
  1370  0212                     	;# 
  1371  0213                     	;# 
  1372  0213                     	;# 
  1373  0214                     	;# 
  1374  0214                     	;# 
  1375  0215                     	;# 
  1376  0215                     	;# 
  1377  0215                     	;# 
  1378  0216                     	;# 
  1379  0216                     	;# 
  1380  0217                     	;# 
  1381  0217                     	;# 
  1382  0219                     	;# 
  1383  021A                     	;# 
  1384  021B                     	;# 
  1385  021C                     	;# 
  1386  021D                     	;# 
  1387  021E                     	;# 
  1388  021F                     	;# 
  1389  0291                     	;# 
  1390  0291                     	;# 
  1391  0292                     	;# 
  1392  0293                     	;# 
  1393  0294                     	;# 
  1394  0295                     	;# 
  1395  0295                     	;# 
  1396  0296                     	;# 
  1397  0298                     	;# 
  1398  0298                     	;# 
  1399  0299                     	;# 
  1400  029A                     	;# 
  1401  029B                     	;# 
  1402  029C                     	;# 
  1403  029D                     	;# 
  1404  029E                     	;# 
  1405  0311                     	;# 
  1406  0311                     	;# 
  1407  0312                     	;# 
  1408  0313                     	;# 
  1409  0318                     	;# 
  1410  0318                     	;# 
  1411  0319                     	;# 
  1412  031A                     	;# 
  1413  038C                     	;# 
  1414  038D                     	;# 
  1415  038E                     	;# 
  1416  0391                     	;# 
  1417  0392                     	;# 
  1418  0393                     	;# 
  1419  0394                     	;# 
  1420  0395                     	;# 
  1421  0396                     	;# 
  1422  039A                     	;# 
  1423  039C                     	;# 
  1424  039D                     	;# 
  1425  039E                     	;# 
  1426  039F                     	;# 
  1427  0415                     	;# 
  1428  0416                     	;# 
  1429  0417                     	;# 
  1430  041C                     	;# 
  1431  041D                     	;# 
  1432  041E                     	;# 
  1433  0FE4                     	;# 
  1434  0FE5                     	;# 
  1435  0FE6                     	;# 
  1436  0FE7                     	;# 
  1437  0FE8                     	;# 
  1438  0FE9                     	;# 
  1439  0FEA                     	;# 
  1440  0FEB                     	;# 
  1441  0FED                     	;# 
  1442  0FEE                     	;# 
  1443  0FEF                     	;# 
  1444  0000                     	;# 
  1445  0001                     	;# 
  1446  0002                     	;# 
  1447  0003                     	;# 
  1448  0004                     	;# 
  1449  0005                     	;# 
  1450  0006                     	;# 
  1451  0007                     	;# 
  1452  0008                     	;# 
  1453  0009                     	;# 
  1454  000A                     	;# 
  1455  000B                     	;# 
  1456  000C                     	;# 
  1457  000D                     	;# 
  1458  000E                     	;# 
  1459  0011                     	;# 
  1460  0012                     	;# 
  1461  0013                     	;# 
  1462  0014                     	;# 
  1463  0015                     	;# 
  1464  0016                     	;# 
  1465  0016                     	;# 
  1466  0017                     	;# 
  1467  0018                     	;# 
  1468  0019                     	;# 
  1469  001A                     	;# 
  1470  001B                     	;# 
  1471  001C                     	;# 
  1472  001E                     	;# 
  1473  001F                     	;# 
  1474  008C                     	;# 
  1475  008D                     	;# 
  1476  008E                     	;# 
  1477  0091                     	;# 
  1478  0092                     	;# 
  1479  0093                     	;# 
  1480  0094                     	;# 
  1481  0095                     	;# 
  1482  0096                     	;# 
  1483  0097                     	;# 
  1484  0098                     	;# 
  1485  0099                     	;# 
  1486  009A                     	;# 
  1487  009B                     	;# 
  1488  009B                     	;# 
  1489  009C                     	;# 
  1490  009D                     	;# 
  1491  009E                     	;# 
  1492  010C                     	;# 
  1493  010D                     	;# 
  1494  010E                     	;# 
  1495  0111                     	;# 
  1496  0112                     	;# 
  1497  0113                     	;# 
  1498  0114                     	;# 
  1499  0115                     	;# 
  1500  0116                     	;# 
  1501  0117                     	;# 
  1502  0118                     	;# 
  1503  0119                     	;# 
  1504  011A                     	;# 
  1505  011B                     	;# 
  1506  011D                     	;# 
  1507  011E                     	;# 
  1508  018C                     	;# 
  1509  018D                     	;# 
  1510  018E                     	;# 
  1511  0191                     	;# 
  1512  0191                     	;# 
  1513  0192                     	;# 
  1514  0193                     	;# 
  1515  0193                     	;# 
  1516  0193                     	;# 
  1517  0194                     	;# 
  1518  0195                     	;# 
  1519  0196                     	;# 
  1520  0199                     	;# 
  1521  019A                     	;# 
  1522  019B                     	;# 
  1523  019B                     	;# 
  1524  019C                     	;# 
  1525  019D                     	;# 
  1526  019E                     	;# 
  1527  019F                     	;# 
  1528  020C                     	;# 
  1529  020D                     	;# 
  1530  020E                     	;# 
  1531  0211                     	;# 
  1532  0211                     	;# 
  1533  0212                     	;# 
  1534  0212                     	;# 
  1535  0213                     	;# 
  1536  0213                     	;# 
  1537  0214                     	;# 
  1538  0214                     	;# 
  1539  0215                     	;# 
  1540  0215                     	;# 
  1541  0215                     	;# 
  1542  0216                     	;# 
  1543  0216                     	;# 
  1544  0217                     	;# 
  1545  0217                     	;# 
  1546  0219                     	;# 
  1547  021A                     	;# 
  1548  021B                     	;# 
  1549  021C                     	;# 
  1550  021D                     	;# 
  1551  021E                     	;# 
  1552  021F                     	;# 
  1553  0291                     	;# 
  1554  0291                     	;# 
  1555  0292                     	;# 
  1556  0293                     	;# 
  1557  0294                     	;# 
  1558  0295                     	;# 
  1559  0295                     	;# 
  1560  0296                     	;# 
  1561  0298                     	;# 
  1562  0298                     	;# 
  1563  0299                     	;# 
  1564  029A                     	;# 
  1565  029B                     	;# 
  1566  029C                     	;# 
  1567  029D                     	;# 
  1568  029E                     	;# 
  1569  0311                     	;# 
  1570  0311                     	;# 
  1571  0312                     	;# 
  1572  0313                     	;# 
  1573  0318                     	;# 
  1574  0318                     	;# 
  1575  0319                     	;# 
  1576  031A                     	;# 
  1577  038C                     	;# 
  1578  038D                     	;# 
  1579  038E                     	;# 
  1580  0391                     	;# 
  1581  0392                     	;# 
  1582  0393                     	;# 
  1583  0394                     	;# 
  1584  0395                     	;# 
  1585  0396                     	;# 
  1586  039A                     	;# 
  1587  039C                     	;# 
  1588  039D                     	;# 
  1589  039E                     	;# 
  1590  039F                     	;# 
  1591  0415                     	;# 
  1592  0416                     	;# 
  1593  0417                     	;# 
  1594  041C                     	;# 
  1595  041D                     	;# 
  1596  041E                     	;# 
  1597  0FE4                     	;# 
  1598  0FE5                     	;# 
  1599  0FE6                     	;# 
  1600  0FE7                     	;# 
  1601  0FE8                     	;# 
  1602  0FE9                     	;# 
  1603  0FEA                     	;# 
  1604  0FEB                     	;# 
  1605  0FED                     	;# 
  1606  0FEE                     	;# 
  1607  0FEF                     	;# 
  1608  0000                     	;# 
  1609  0001                     	;# 
  1610  0002                     	;# 
  1611  0003                     	;# 
  1612  0004                     	;# 
  1613  0005                     	;# 
  1614  0006                     	;# 
  1615  0007                     	;# 
  1616  0008                     	;# 
  1617  0009                     	;# 
  1618  000A                     	;# 
  1619  000B                     	;# 
  1620  000C                     	;# 
  1621  000D                     	;# 
  1622  000E                     	;# 
  1623  0011                     	;# 
  1624  0012                     	;# 
  1625  0013                     	;# 
  1626  0014                     	;# 
  1627  0015                     	;# 
  1628  0016                     	;# 
  1629  0016                     	;# 
  1630  0017                     	;# 
  1631  0018                     	;# 
  1632  0019                     	;# 
  1633  001A                     	;# 
  1634  001B                     	;# 
  1635  001C                     	;# 
  1636  001E                     	;# 
  1637  001F                     	;# 
  1638  008C                     	;# 
  1639  008D                     	;# 
  1640  008E                     	;# 
  1641  0091                     	;# 
  1642  0092                     	;# 
  1643  0093                     	;# 
  1644  0094                     	;# 
  1645  0095                     	;# 
  1646  0096                     	;# 
  1647  0097                     	;# 
  1648  0098                     	;# 
  1649  0099                     	;# 
  1650  009A                     	;# 
  1651  009B                     	;# 
  1652  009B                     	;# 
  1653  009C                     	;# 
  1654  009D                     	;# 
  1655  009E                     	;# 
  1656  010C                     	;# 
  1657  010D                     	;# 
  1658  010E                     	;# 
  1659  0111                     	;# 
  1660  0112                     	;# 
  1661  0113                     	;# 
  1662  0114                     	;# 
  1663  0115                     	;# 
  1664  0116                     	;# 
  1665  0117                     	;# 
  1666  0118                     	;# 
  1667  0119                     	;# 
  1668  011A                     	;# 
  1669  011B                     	;# 
  1670  011D                     	;# 
  1671  011E                     	;# 
  1672  018C                     	;# 
  1673  018D                     	;# 
  1674  018E                     	;# 
  1675  0191                     	;# 
  1676  0191                     	;# 
  1677  0192                     	;# 
  1678  0193                     	;# 
  1679  0193                     	;# 
  1680  0193                     	;# 
  1681  0194                     	;# 
  1682  0195                     	;# 
  1683  0196                     	;# 
  1684  0199                     	;# 
  1685  019A                     	;# 
  1686  019B                     	;# 
  1687  019B                     	;# 
  1688  019C                     	;# 
  1689  019D                     	;# 
  1690  019E                     	;# 
  1691  019F                     	;# 
  1692  020C                     	;# 
  1693  020D                     	;# 
  1694  020E                     	;# 
  1695  0211                     	;# 
  1696  0211                     	;# 
  1697  0212                     	;# 
  1698  0212                     	;# 
  1699  0213                     	;# 
  1700  0213                     	;# 
  1701  0214                     	;# 
  1702  0214                     	;# 
  1703  0215                     	;# 
  1704  0215                     	;# 
  1705  0215                     	;# 
  1706  0216                     	;# 
  1707  0216                     	;# 
  1708  0217                     	;# 
  1709  0217                     	;# 
  1710  0219                     	;# 
  1711  021A                     	;# 
  1712  021B                     	;# 
  1713  021C                     	;# 
  1714  021D                     	;# 
  1715  021E                     	;# 
  1716  021F                     	;# 
  1717  0291                     	;# 
  1718  0291                     	;# 
  1719  0292                     	;# 
  1720  0293                     	;# 
  1721  0294                     	;# 
  1722  0295                     	;# 
  1723  0295                     	;# 
  1724  0296                     	;# 
  1725  0298                     	;# 
  1726  0298                     	;# 
  1727  0299                     	;# 
  1728  029A                     	;# 
  1729  029B                     	;# 
  1730  029C                     	;# 
  1731  029D                     	;# 
  1732  029E                     	;# 
  1733  0311                     	;# 
  1734  0311                     	;# 
  1735  0312                     	;# 
  1736  0313                     	;# 
  1737  0318                     	;# 
  1738  0318                     	;# 
  1739  0319                     	;# 
  1740  031A                     	;# 
  1741  038C                     	;# 
  1742  038D                     	;# 
  1743  038E                     	;# 
  1744  0391                     	;# 
  1745  0392                     	;# 
  1746  0393                     	;# 
  1747  0394                     	;# 
  1748  0395                     	;# 
  1749  0396                     	;# 
  1750  039A                     	;# 
  1751  039C                     	;# 
  1752  039D                     	;# 
  1753  039E                     	;# 
  1754  039F                     	;# 
  1755  0415                     	;# 
  1756  0416                     	;# 
  1757  0417                     	;# 
  1758  041C                     	;# 
  1759  041D                     	;# 
  1760  041E                     	;# 
  1761  0FE4                     	;# 
  1762  0FE5                     	;# 
  1763  0FE6                     	;# 
  1764  0FE7                     	;# 
  1765  0FE8                     	;# 
  1766  0FE9                     	;# 
  1767  0FEA                     	;# 
  1768  0FEB                     	;# 
  1769  0FED                     	;# 
  1770  0FEE                     	;# 
  1771  0FEF                     	;_cmd_buf
  1772                           
  1773                           	psect	idataBANK1
  1774  11E3                     __pidataBANK1:	
  1775                           
  1776                           ;initializer for put_cmd@idx
  1777  11E3  34FF               	retlw	-1
  1778                           
  1779                           ;initializer for inv_handler@cmd_next
  1780  11E4  34FF               	retlw	-1
  1781                           
  1782                           ;initializer for _BACKPLANE_SLAVE_ADDRESS
  1783  11E5  3401               	retlw	1
  1784                           
  1785                           	psect	idataBANK2
  1786  11E0                     __pidataBANK2:	
  1787                           
  1788                           ;initializer for _tmr_scaler
  1789  11E0  3401               	retlw	1
  1790                           
  1791                           ;initializer for dev_map_iterator@start
  1792  11E1  3401               	retlw	1
  1793                           
  1794                           ;initializer for _type_no_data
  1795  11E2  3406               	retlw	6
  1796                           
  1797                           	psect	stringtext
  1798  1000                     __pstringtext:	
  1799  1000                     _dpowers:	
  1800  1000  3401               	retlw	1
  1801  1001  3400               	retlw	0
  1802  1002  340A               	retlw	10
  1803  1003  3400               	retlw	0
  1804  1004  3464               	retlw	100
  1805  1005  3400               	retlw	0
  1806  1006  34E8               	retlw	232
  1807  1007  3403               	retlw	3
  1808  1008  3410               	retlw	16
  1809  1009  3427               	retlw	39
  1810  100A                     __end_of_dpowers:	
  1811  100A                     _MAX_Y:	
  1812  100A  3404               	retlw	4
  1813  100B                     __end_of_MAX_Y:	
  1814  0015                     _TMR0	set	21
  1815  0012                     _PIR2bits	set	18
  1816  000B                     _INTCONbits	set	11
  1817  0011                     _PIR1bits	set	17
  1818  005A                     _TMR0IF	set	90
  1819  0095                     _OPTION_REG	set	149
  1820  0097                     _WDTCON	set	151
  1821  0098                     _OSCTUNE	set	152
  1822  0099                     _OSCCON	set	153
  1823  0092                     _PIE2bits	set	146
  1824  0095                     _OPTION_REGbits	set	149
  1825  008E                     _TRISC	set	142
  1826  008D                     _TRISB	set	141
  1827  008C                     _TRISA	set	140
  1828  0091                     _PIE1bits	set	145
  1829  04D6                     _PLLR	set	1238
  1830  010E                     _LATCbits	set	270
  1831  011D                     _APFCON0	set	285
  1832  011E                     _APFCON1	set	286
  1833  010E                     _LATC	set	270
  1834  010D                     _LATB	set	269
  1835  010C                     _LATA	set	268
  1836  018C                     _ANSELA	set	396
  1837  018D                     _ANSELB	set	397
  1838  018E                     _ANSELC	set	398
  1839  0199                     _RCREG	set	409
  1840  019D                     _RCSTAbits	set	413
  1841  019A                     _TXREG	set	410
  1842  019C                     _SPBRGH	set	412
  1843  019B                     _SPBRGL	set	411
  1844  019E                     _TXSTA	set	414
  1845  019D                     _RCSTA	set	413
  1846  019F                     _BAUDCON	set	415
  1847  0196                     _EECON2	set	406
  1848  0193                     _EEDATL	set	403
  1849  0194                     _EEDATH	set	404
  1850  0195                     _EECON1bits	set	405
  1851  0192                     _EEADRH	set	402
  1852  0191                     _EEADRL	set	401
  1853  020E                     _WPUC	set	526
  1854  020C                     _WPUA	set	524
  1855  020D                     _WPUB	set	525
  1856  0211                     _SSP1BUF	set	529
  1857  0216                     _SSP1CON2bits	set	534
  1858  0215                     _SSP1CON1bits	set	533
  1859  0212                     _SSP1ADD	set	530
  1860  0217                     _SSP1CON3	set	535
  1861  0215                     _SSP1CON1	set	533
  1862  0214                     _SSP1STAT	set	532
  1863  100B                     STR_26:	
  1864  100B  3421               	retlw	33	;'!'
  1865  100C  343A               	retlw	58	;':'
  1866  100D  3457               	retlw	87	;'W'
  1867  100E  3453               	retlw	83	;'S'
  1868  100F  3443               	retlw	67	;'C'
  1869  1010  343A               	retlw	58	;':'
  1870  1011  3450               	retlw	80	;'P'
  1871  1012  344F               	retlw	79	;'O'
  1872  1013  3453               	retlw	83	;'S'
  1873  1014  3420               	retlw	32	;' '
  1874  1015  344C               	retlw	76	;'L'
  1875  1016  3441               	retlw	65	;'A'
  1876  1017  3452               	retlw	82	;'R'
  1877  1018  3447               	retlw	71	;'G'
  1878  1019  3445               	retlw	69	;'E'
  1879  101A  3452               	retlw	82	;'R'
  1880  101B  3420               	retlw	32	;' '
  1881  101C  3454               	retlw	84	;'T'
  1882  101D  3448               	retlw	72	;'H'
  1883  101E  3441               	retlw	65	;'A'
  1884  101F  344E               	retlw	78	;'N'
  1885  1020  3420               	retlw	32	;' '
  1886  1021  3432               	retlw	50	;'2'
  1887  1022  3437               	retlw	55	;'7'
  1888  1023  340A               	retlw	10
  1889  1024  3400               	retlw	0
  1890  1025                     STR_24:	
  1891  1025  3421               	retlw	33	;'!'
  1892  1026  343A               	retlw	58	;':'
  1893  1027  3450               	retlw	80	;'P'
  1894  1028  344F               	retlw	79	;'O'
  1895  1029  3453               	retlw	83	;'S'
  1896  102A  343A               	retlw	58	;':'
  1897  102B  3450               	retlw	80	;'P'
  1898  102C  344F               	retlw	79	;'O'
  1899  102D  3453               	retlw	83	;'S'
  1900  102E  3420               	retlw	32	;' '
  1901  102F  344C               	retlw	76	;'L'
  1902  1030  3441               	retlw	65	;'A'
  1903  1031  3452               	retlw	82	;'R'
  1904  1032  3447               	retlw	71	;'G'
  1905  1033  3445               	retlw	69	;'E'
  1906  1034  3452               	retlw	82	;'R'
  1907  1035  3420               	retlw	32	;' '
  1908  1036  3454               	retlw	84	;'T'
  1909  1037  3448               	retlw	72	;'H'
  1910  1038  3441               	retlw	65	;'A'
  1911  1039  344E               	retlw	78	;'N'
  1912  103A  3420               	retlw	32	;' '
  1913  103B  3432               	retlw	50	;'2'
  1914  103C  3437               	retlw	55	;'7'
  1915  103D  340A               	retlw	10
  1916  103E  3400               	retlw	0
  1917  103F                     STR_17:	
  1918  103F  3421               	retlw	33	;'!'
  1919  1040  343A               	retlw	58	;':'
  1920  1041  3425               	retlw	37	;'%'
  1921  1042  3425               	retlw	37	;'%'
  1922  1043  3425               	retlw	37	;'%'
  1923  1044  3464               	retlw	100	;'d'
  1924  1045  343A               	retlw	58	;':'
  1925  1046  3455               	retlw	85	;'U'
  1926  1047  344E               	retlw	78	;'N'
  1927  1048  3444               	retlw	68	;'D'
  1928  1049  3445               	retlw	69	;'E'
  1929  104A  3454               	retlw	84	;'T'
  1930  104B  3445               	retlw	69	;'E'
  1931  104C  3443               	retlw	67	;'C'
  1932  104D  3454               	retlw	84	;'T'
  1933  104E  3445               	retlw	69	;'E'
  1934  104F  3444               	retlw	68	;'D'
  1935  1050  345F               	retlw	95	;'_'
  1936  1051  3444               	retlw	68	;'D'
  1937  1052  3445               	retlw	69	;'E'
  1938  1053  3456               	retlw	86	;'V'
  1939  1054  3449               	retlw	73	;'I'
  1940  1055  3443               	retlw	67	;'C'
  1941  1056  3445               	retlw	69	;'E'
  1942  1057  340A               	retlw	10
  1943  1058  3400               	retlw	0
  1944  1059                     STR_12:	
  1945  1059  3421               	retlw	33	;'!'
  1946  105A  343A               	retlw	58	;':'
  1947  105B  344E               	retlw	78	;'N'
  1948  105C  344F               	retlw	79	;'O'
  1949  105D  3420               	retlw	32	;' '
  1950  105E  3441               	retlw	65	;'A'
  1951  105F  3443               	retlw	67	;'C'
  1952  1060  344B               	retlw	75	;'K'
  1953  1061  3420               	retlw	32	;' '
  1954  1062  3446               	retlw	70	;'F'
  1955  1063  3452               	retlw	82	;'R'
  1956  1064  344F               	retlw	79	;'O'
  1957  1065  344D               	retlw	77	;'M'
  1958  1066  3420               	retlw	32	;' '
  1959  1067  3449               	retlw	73	;'I'
  1960  1068  3432               	retlw	50	;'2'
  1961  1069  3443               	retlw	67	;'C'
  1962  106A  3420               	retlw	32	;' '
  1963  106B  3453               	retlw	83	;'S'
  1964  106C  344C               	retlw	76	;'L'
  1965  106D  3441               	retlw	65	;'A'
  1966  106E  3456               	retlw	86	;'V'
  1967  106F  3445               	retlw	69	;'E'
  1968  1070  340A               	retlw	10
  1969  1071  3400               	retlw	0
  1970  1072                     STR_16:	
  1971  1072  3421               	retlw	33	;'!'
  1972  1073  343A               	retlw	58	;':'
  1973  1074  344D               	retlw	77	;'M'
  1974  1075  3441               	retlw	65	;'A'
  1975  1076  3450               	retlw	80	;'P'
  1976  1077  343A               	retlw	58	;':'
  1977  1078  344E               	retlw	78	;'N'
  1978  1079  344F               	retlw	79	;'O'
  1979  107A  3420               	retlw	32	;' '
  1980  107B  3453               	retlw	83	;'S'
  1981  107C  344C               	retlw	76	;'L'
  1982  107D  3441               	retlw	65	;'A'
  1983  107E  3456               	retlw	86	;'V'
  1984  107F  3445               	retlw	69	;'E'
  1985  1080  3420               	retlw	32	;' '
  1986  1081  3446               	retlw	70	;'F'
  1987  1082  344F               	retlw	79	;'O'
  1988  1083  3455               	retlw	85	;'U'
  1989  1084  344E               	retlw	78	;'N'
  1990  1085  3444               	retlw	68	;'D'
  1991  1086  340A               	retlw	10
  1992  1087  3400               	retlw	0
  1993  1088                     STR_18:	
  1994  1088  3421               	retlw	33	;'!'
  1995  1089  343A               	retlw	58	;':'
  1996  108A  3425               	retlw	37	;'%'
  1997  108B  3425               	retlw	37	;'%'
  1998  108C  3425               	retlw	37	;'%'
  1999  108D  3464               	retlw	100	;'d'
  2000  108E  343A               	retlw	58	;':'
  2001  108F  344E               	retlw	78	;'N'
  2002  1090  3445               	retlw	69	;'E'
  2003  1091  3454               	retlw	84	;'T'
  2004  1092  3457               	retlw	87	;'W'
  2005  1093  344F               	retlw	79	;'O'
  2006  1094  3452               	retlw	82	;'R'
  2007  1095  344B               	retlw	75	;'K'
  2008  1096  345F               	retlw	95	;'_'
  2009  1097  3445               	retlw	69	;'E'
  2010  1098  3452               	retlw	82	;'R'
  2011  1099  3452               	retlw	82	;'R'
  2012  109A  344F               	retlw	79	;'O'
  2013  109B  3452               	retlw	82	;'R'
  2014  109C  340A               	retlw	10
  2015  109D  3400               	retlw	0
  2016  109E                     STR_34:	
  2017  109E  3442               	retlw	66	;'B'
  2018  109F  3441               	retlw	65	;'A'
  2019  10A0  3443               	retlw	67	;'C'
  2020  10A1  344B               	retlw	75	;'K'
  2021  10A2  3450               	retlw	80	;'P'
  2022  10A3  344C               	retlw	76	;'L'
  2023  10A4  3441               	retlw	65	;'A'
  2024  10A5  344E               	retlw	78	;'N'
  2025  10A6  3445               	retlw	69	;'E'
  2026  10A7  342D               	retlw	45	;'-'
  2027  10A8  344D               	retlw	77	;'M'
  2028  10A9  3441               	retlw	65	;'A'
  2029  10AA  3453               	retlw	83	;'S'
  2030  10AB  3454               	retlw	84	;'T'
  2031  10AC  3445               	retlw	69	;'E'
  2032  10AD  3452               	retlw	82	;'R'
  2033  10AE  3400               	retlw	0
  2034  10AF                     STR_69:	
  2035  10AF  3449               	retlw	73	;'I'
  2036  10B0  344C               	retlw	76	;'L'
  2037  10B1  344C               	retlw	76	;'L'
  2038  10B2  3445               	retlw	69	;'E'
  2039  10B3  3447               	retlw	71	;'G'
  2040  10B4  3441               	retlw	65	;'A'
  2041  10B5  344C               	retlw	76	;'L'
  2042  10B6  345F               	retlw	95	;'_'
  2043  10B7  3454               	retlw	84	;'T'
  2044  10B8  3459               	retlw	89	;'Y'
  2045  10B9  3450               	retlw	80	;'P'
  2046  10BA  3445               	retlw	69	;'E'
  2047  10BB  340A               	retlw	10
  2048  10BC  3400               	retlw	0
  2049  10BD                     STR_8:	
  2050  10BD  3421               	retlw	33	;'!'
  2051  10BE  343A               	retlw	58	;':'
  2052  10BF  3453               	retlw	83	;'S'
  2053  10C0  3454               	retlw	84	;'T'
  2054  10C1  3450               	retlw	80	;'P'
  2055  10C2  343A               	retlw	58	;':'
  2056  10C3  344E               	retlw	78	;'N'
  2057  10C4  3441               	retlw	65	;'A'
  2058  10C5  3443               	retlw	67	;'C'
  2059  10C6  344B               	retlw	75	;'K'
  2060  10C7  340A               	retlw	10
  2061  10C8  3400               	retlw	0
  2062  10C9                     STR_7:	
  2063  10C9  342A               	retlw	42	;'*'
  2064  10CA  343A               	retlw	58	;':'
  2065  10CB  3453               	retlw	83	;'S'
  2066  10CC  3454               	retlw	84	;'T'
  2067  10CD  3450               	retlw	80	;'P'
  2068  10CE  343A               	retlw	58	;':'
  2069  10CF  3441               	retlw	65	;'A'
  2070  10D0  3443               	retlw	67	;'C'
  2071  10D1  344B               	retlw	75	;'K'
  2072  10D2  340A               	retlw	10
  2073  10D3  3400               	retlw	0
  2074  10D4                     STR_49:	
  2075  10D4  3424               	retlw	36	;'$'
  2076  10D5  343A               	retlw	58	;':'
  2077  10D6  3452               	retlw	82	;'R'
  2078  10D7  3444               	retlw	68	;'D'
  2079  10D8  3441               	retlw	65	;'A'
  2080  10D9  343A               	retlw	58	;':'
  2081  10DA  3425               	retlw	37	;'%'
  2082  10DB  3464               	retlw	100	;'d'
  2083  10DC  340A               	retlw	10
  2084  10DD  3400               	retlw	0
  2085  10DE                     STR_67:	
  2086  10DE  342D               	retlw	45	;'-'
  2087  10DF  3425               	retlw	37	;'%'
  2088  10E0  3464               	retlw	100	;'d'
  2089  10E1  342E               	retlw	46	;'.'
  2090  10E2  3425               	retlw	37	;'%'
  2091  10E3  3430               	retlw	48	;'0'
  2092  10E4  3432               	retlw	50	;'2'
  2093  10E5  3464               	retlw	100	;'d'
  2094  10E6  340A               	retlw	10
  2095  10E7  3400               	retlw	0
  2096  10E8                     STR_38:	
  2097  10E8  3424               	retlw	36	;'$'
  2098  10E9  343A               	retlw	58	;':'
  2099  10EA  3457               	retlw	87	;'W'
  2100  10EB  3448               	retlw	72	;'H'
  2101  10EC  344F               	retlw	79	;'O'
  2102  10ED  343A               	retlw	58	;':'
  2103  10EE  3425               	retlw	37	;'%'
  2104  10EF  3473               	retlw	115	;'s'
  2105  10F0  340A               	retlw	10
  2106  10F1  3400               	retlw	0
  2107  10F2                     STR_42:	
  2108  10F2  342A               	retlw	42	;'*'
  2109  10F3  343A               	retlw	58	;':'
  2110  10F4  3453               	retlw	83	;'S'
  2111  10F5  3454               	retlw	84	;'T'
  2112  10F6  3450               	retlw	80	;'P'
  2113  10F7  343A               	retlw	58	;':'
  2114  10F8  3425               	retlw	37	;'%'
  2115  10F9  3473               	retlw	115	;'s'
  2116  10FA  340A               	retlw	10
  2117  10FB  3400               	retlw	0
  2118  10FC                     STR_65:	
  2119  10FC  342D               	retlw	45	;'-'
  2120  10FD  3425               	retlw	37	;'%'
  2121  10FE  3464               	retlw	100	;'d'
  2122  10FF  342E               	retlw	46	;'.'
  2123  1100  3425               	retlw	37	;'%'
  2124  1101  3430               	retlw	48	;'0'
  2125  1102  3432               	retlw	50	;'2'
  2126  1103  3464               	retlw	100	;'d'
  2127  1104  342C               	retlw	44	;','
  2128  1105  3400               	retlw	0
  2129  1106                     STR_57:	
  2130  1106  3455               	retlw	85	;'U'
  2131  1107  3449               	retlw	73	;'I'
  2132  1108  344E               	retlw	78	;'N'
  2133  1109  3454               	retlw	84	;'T'
  2134  110A  3431               	retlw	49	;'1'
  2135  110B  3436               	retlw	54	;'6'
  2136  110C  345F               	retlw	95	;'_'
  2137  110D  3454               	retlw	84	;'T'
  2138  110E  343A               	retlw	58	;':'
  2139  110F  3400               	retlw	0
  2140  1110                     STR_2:	
  2141  1110  3424               	retlw	36	;'$'
  2142  1111  343A               	retlw	58	;':'
  2143  1112  3457               	retlw	87	;'W'
  2144  1113  3448               	retlw	72	;'H'
  2145  1114  344F               	retlw	79	;'O'
  2146  1115  343A               	retlw	58	;':'
  2147  1116  3425               	retlw	37	;'%'
  2148  1117  3464               	retlw	100	;'d'
  2149  1118  340A               	retlw	10
  2150  1119  3400               	retlw	0
  2151  111A                     STR_11:	
  2152  111A  3424               	retlw	36	;'$'
  2153  111B  343A               	retlw	58	;':'
  2154  111C  3447               	retlw	71	;'G'
  2155  111D  3445               	retlw	69	;'E'
  2156  111E  3454               	retlw	84	;'T'
  2157  111F  343A               	retlw	58	;':'
  2158  1120  3425               	retlw	37	;'%'
  2159  1121  3464               	retlw	100	;'d'
  2160  1122  340A               	retlw	10
  2161  1123  3400               	retlw	0
  2162  1124                     STR_68:	
  2163  1124  344E               	retlw	78	;'N'
  2164  1125  344F               	retlw	79	;'O'
  2165  1126  345F               	retlw	95	;'_'
  2166  1127  3444               	retlw	68	;'D'
  2167  1128  3441               	retlw	65	;'A'
  2168  1129  3454               	retlw	84	;'T'
  2169  112A  3441               	retlw	65	;'A'
  2170  112B  340A               	retlw	10
  2171  112C  3400               	retlw	0
  2172  112D                     STR_51:	
  2173  112D  3455               	retlw	85	;'U'
  2174  112E  3449               	retlw	73	;'I'
  2175  112F  344E               	retlw	78	;'N'
  2176  1130  3454               	retlw	84	;'T'
  2177  1131  3438               	retlw	56	;'8'
  2178  1132  345F               	retlw	95	;'_'
  2179  1133  3454               	retlw	84	;'T'
  2180  1134  343A               	retlw	58	;':'
  2181  1135  3400               	retlw	0
  2182  1136                     STR_63:	
  2183  1136  3446               	retlw	70	;'F'
  2184  1137  344C               	retlw	76	;'L'
  2185  1138  344F               	retlw	79	;'O'
  2186  1139  3441               	retlw	65	;'A'
  2187  113A  3454               	retlw	84	;'T'
  2188  113B  343A               	retlw	58	;':'
  2189  113C  3400               	retlw	0
  2190  113D                     STR_35:	
  2191  113D  3428               	retlw	40	;'('
  2192  113E  346E               	retlw	110	;'n'
  2193  113F  3475               	retlw	117	;'u'
  2194  1140  346C               	retlw	108	;'l'
  2195  1141  346C               	retlw	108	;'l'
  2196  1142  3429               	retlw	41	;')'
  2197  1143  3400               	retlw	0
  2198  1144                     STR_28:	
  2199  1144  3424               	retlw	36	;'$'
  2200  1145  343A               	retlw	58	;':'
  2201  1146  3452               	retlw	82	;'R'
  2202  1147  3453               	retlw	83	;'S'
  2203  1148  3443               	retlw	67	;'C'
  2204  1149  343A               	retlw	58	;':'
  2205  114A  3400               	retlw	0
  2206  114B                     STR_13:	
  2207  114B  3424               	retlw	36	;'$'
  2208  114C  343A               	retlw	58	;':'
  2209  114D  344D               	retlw	77	;'M'
  2210  114E  3441               	retlw	65	;'A'
  2211  114F  3450               	retlw	80	;'P'
  2212  1150  343A               	retlw	58	;':'
  2213  1151  3400               	retlw	0
  2214  1152                     STR_50:	
  2215  1152  3425               	retlw	37	;'%'
  2216  1153  3425               	retlw	37	;'%'
  2217  1154  3425               	retlw	37	;'%'
  2218  1155  3464               	retlw	100	;'d'
  2219  1156  343A               	retlw	58	;':'
  2220  1157  3400               	retlw	0
  2221  1158                     STR_36:	
  2222  1158  3423               	retlw	35	;'#'
  2223  1159  3425               	retlw	37	;'%'
  2224  115A  3473               	retlw	115	;'s'
  2225  115B  340A               	retlw	10
  2226  115C  3400               	retlw	0
  2227  115D                     STR_53:	
  2228  115D  3425               	retlw	37	;'%'
  2229  115E  3475               	retlw	117	;'u'
  2230  115F  340A               	retlw	10
  2231  1160  3400               	retlw	0
  2232  1161                     STR_52:	
  2233  1161  3425               	retlw	37	;'%'
  2234  1162  3475               	retlw	117	;'u'
  2235  1163  342C               	retlw	44	;','
  2236  1164  3400               	retlw	0
  2237  1165                     STR_48:	
  2238  1165  3452               	retlw	82	;'R'
  2239  1166  3444               	retlw	68	;'D'
  2240  1167  3441               	retlw	65	;'A'
  2241  1168  3400               	retlw	0
  2242  1169                     STR_47:	
  2243  1169  3457               	retlw	87	;'W'
  2244  116A  3444               	retlw	68	;'D'
  2245  116B  3441               	retlw	65	;'A'
  2246  116C  3400               	retlw	0
  2247  116D                     STR_43:	
  2248  116D  3441               	retlw	65	;'A'
  2249  116E  3443               	retlw	67	;'C'
  2250  116F  344B               	retlw	75	;'K'
  2251  1170  3400               	retlw	0
  2252  1171                     STR_14:	
  2253  1171  3425               	retlw	37	;'%'
  2254  1172  3464               	retlw	100	;'d'
  2255  1173  342C               	retlw	44	;','
  2256  1174  3400               	retlw	0
  2257  1175                     STR_5:	
  2258  1175  3453               	retlw	83	;'S'
  2259  1176  3454               	retlw	84	;'T'
  2260  1177  3441               	retlw	65	;'A'
  2261  1178  3400               	retlw	0
  2262  1179                     STR_20:	
  2263  1179  3449               	retlw	73	;'I'
  2264  117A  3432               	retlw	50	;'2'
  2265  117B  3443               	retlw	67	;'C'
  2266  117C  3400               	retlw	0
  2267  117D                     STR_32:	
  2268  117D  3443               	retlw	67	;'C'
  2269  117E  3453               	retlw	83	;'S'
  2270  117F  3443               	retlw	67	;'C'
  2271  1180  3400               	retlw	0
  2272  1181                     STR_27:	
  2273  1181  3452               	retlw	82	;'R'
  2274  1182  3453               	retlw	83	;'S'
  2275  1183  3443               	retlw	67	;'C'
  2276  1184  3400               	retlw	0
  2277  1185                     STR_25:	
  2278  1185  3457               	retlw	87	;'W'
  2279  1186  3453               	retlw	83	;'S'
  2280  1187  3443               	retlw	67	;'C'
  2281  1188  3400               	retlw	0
  2282  1189                     STR_22:	
  2283  1189  3453               	retlw	83	;'S'
  2284  118A  3443               	retlw	67	;'C'
  2285  118B  344E               	retlw	78	;'N'
  2286  118C  3400               	retlw	0
  2287  118D                     STR_33:	
  2288  118D  3453               	retlw	83	;'S'
  2289  118E  3445               	retlw	69	;'E'
  2290  118F  344E               	retlw	78	;'N'
  2291  1190  3400               	retlw	0
  2292  1191                     STR_1:	
  2293  1191  3457               	retlw	87	;'W'
  2294  1192  3448               	retlw	72	;'H'
  2295  1193  344F               	retlw	79	;'O'
  2296  1194  3400               	retlw	0
  2297  1195                     STR_21:	
  2298  1195  344D               	retlw	77	;'M'
  2299  1196  3441               	retlw	65	;'A'
  2300  1197  3450               	retlw	80	;'P'
  2301  1198  3400               	retlw	0
  2302  1199                     STR_6:	
  2303  1199  3453               	retlw	83	;'S'
  2304  119A  3454               	retlw	84	;'T'
  2305  119B  3450               	retlw	80	;'P'
  2306  119C  3400               	retlw	0
  2307  119D                     STR_23:	
  2308  119D  3450               	retlw	80	;'P'
  2309  119E  344F               	retlw	79	;'O'
  2310  119F  3453               	retlw	83	;'S'
  2311  11A0  3400               	retlw	0
  2312  11A1                     STR_10:	
  2313  11A1  3447               	retlw	71	;'G'
  2314  11A2  3445               	retlw	69	;'E'
  2315  11A3  3454               	retlw	84	;'T'
  2316  11A4  3400               	retlw	0
  2317  11A5                     STR_9:	
  2318  11A5  3453               	retlw	83	;'S'
  2319  11A6  3445               	retlw	69	;'E'
  2320  11A7  3454               	retlw	84	;'T'
  2321  11A8  3400               	retlw	0
  2322  11A9                     STR_4:	
  2323  11A9  3453               	retlw	83	;'S'
  2324  11AA  3441               	retlw	65	;'A'
  2325  11AB  3456               	retlw	86	;'V'
  2326  11AC  3400               	retlw	0
  2327  11AD                     STR_29:	
  2328  11AD  3425               	retlw	37	;'%'
  2329  11AE  3464               	retlw	100	;'d'
  2330  11AF  347C               	retlw	124	;'|'
  2331  11B0  3400               	retlw	0
  2332  11B1                     STR_3:	
  2333  11B1  3421               	retlw	33	;'!'
  2334  11B2  340A               	retlw	10
  2335  11B3  3400               	retlw	0
  2336  1088                     
  2337                           ; #config settings
  2338  0000                     
  2339                           	psect	cinit
  2340  003E                     start_initialization:	
  2341  003E                     __initialization:		;BIGRAM
  2342                           
  2343                           ; Initialize objects allocated to BANK1
  2344  003E  0021               	movlb	1	; select bank1
  2345  003F  3191  21E3  3180   	fcall	__pidataBANK1	;fetch initializer
  2346  0042  00EC               	movwf	__pdataBANK1& (0+127)
  2347  0043  3191  21E4  3180   	fcall	__pidataBANK1+1	;fetch initializer
  2348  0046  00ED               	movwf	(__pdataBANK1+1)& (0+127)
  2349  0047  3191  21E5  3180   	fcall	__pidataBANK1+2	;fetch initializer
  2350  004A  00EE               	movwf	(__pdataBANK1+2)& (0+127)
  2351                           
  2352                           ; Initialize objects allocated to BANK2
  2353  004B  0022               	movlb	2	; select bank2
  2354  004C  3191  21E0  3180   	fcall	__pidataBANK2	;fetch initializer
  2355  004F  00DE               	movwf	__pdataBANK2& (0+127)
  2356  0050  3191  21E1  3180   	fcall	__pidataBANK2+1	;fetch initializer
  2357  0053  00DF               	movwf	(__pdataBANK2+1)& (0+127)
  2358  0054  3191  21E2  3180   	fcall	__pidataBANK2+2	;fetch initializer
  2359  0057  00E0               	movwf	(__pdataBANK2+2)& (0+127)
  2360                           
  2361                           ; Clear objects allocated to BIGRAM
  2362  0058  3030               	movlw	low (0+9008)
  2363  0059  0084               	movwf	4
  2364  005A  3023               	movlw	high (0+9008)
  2365  005B  0085               	movwf	5
  2366  005C  30C0               	movlw	192
  2367  005D  00FE               	movwf	btemp
  2368  005E  3000               	movlw	0
  2369  005F  00FF               	movwf	btemp+1
  2370  0060  3192  221C  3180   	fcall	clear_ram0
  2371                           
  2372                           ; Clear objects allocated to COMMON
  2373  0063  01F0               	clrf	__pbssCOMMON& (0+127)
  2374  0064  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  2375  0065  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  2376  0066  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  2377  0067  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  2378  0068  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
  2379  0069  01F6               	clrf	(__pbssCOMMON+6)& (0+127)
  2380                           
  2381                           ; Clear objects allocated to BANK0
  2382  006A  0020               	movlb	0	; select bank0
  2383  006B  01EB               	clrf	__pbssBANK0& (0+127)
  2384  006C  01EC               	clrf	(__pbssBANK0+1)& (0+127)
  2385  006D  01ED               	clrf	(__pbssBANK0+2)& (0+127)
  2386  006E  01EE               	clrf	(__pbssBANK0+3)& (0+127)
  2387                           
  2388                           ; Clear objects allocated to BANK1
  2389  006F  30D9               	movlw	low __pbssBANK1
  2390  0070  0084               	movwf	4
  2391  0071  3000               	movlw	high __pbssBANK1
  2392  0072  0085               	movwf	5
  2393  0073  3013               	movlw	19
  2394  0074  00FE               	movwf	btemp
  2395  0075  3000               	movlw	0
  2396  0076  00FF               	movwf	btemp+1
  2397  0077  3192  221C  3180   	fcall	clear_ram0
  2398                           
  2399                           ; Clear objects allocated to BANK2
  2400  007A  3020               	movlw	low __pbssBANK2
  2401  007B  0084               	movwf	4
  2402  007C  3001               	movlw	high __pbssBANK2
  2403  007D  0085               	movwf	5
  2404  007E  303E               	movlw	62
  2405  007F  00FE               	movwf	btemp
  2406  0080  3000               	movlw	0
  2407  0081  00FF               	movwf	btemp+1
  2408  0082  3192  221C  3180   	fcall	clear_ram0
  2409                           
  2410                           ; Clear objects allocated to BANK3
  2411  0085  30A0               	movlw	low __pbssBANK3
  2412  0086  0084               	movwf	4
  2413  0087  3001               	movlw	high __pbssBANK3
  2414  0088  0085               	movwf	5
  2415  0089  302C               	movlw	44
  2416  008A  00FE               	movwf	btemp
  2417  008B  3000               	movlw	0
  2418  008C  00FF               	movwf	btemp+1
  2419  008D  3192  221C  3180   	fcall	clear_ram0
  2420                           
  2421                           ; Clear objects allocated to BANK4
  2422  0090  3020               	movlw	low __pbssBANK4
  2423  0091  0084               	movwf	4
  2424  0092  3002               	movlw	high __pbssBANK4
  2425  0093  0085               	movwf	5
  2426  0094  3040               	movlw	64
  2427  0095  00FE               	movwf	btemp
  2428  0096  3000               	movlw	0
  2429  0097  00FF               	movwf	btemp+1
  2430  0098  3192  221C  3180   	fcall	clear_ram0
  2431                           
  2432                           ; Clear objects allocated to BANK5
  2433  009B  30A0               	movlw	low __pbssBANK5
  2434  009C  0084               	movwf	4
  2435  009D  3002               	movlw	high __pbssBANK5
  2436  009E  0085               	movwf	5
  2437  009F  3040               	movlw	64
  2438  00A0  00FE               	movwf	btemp
  2439  00A1  3000               	movlw	0
  2440  00A2  00FF               	movwf	btemp+1
  2441  00A3  3192  221C  3180   	fcall	clear_ram0
  2442                           
  2443                           ; Clear objects allocated to BANK6
  2444  00A6  3020               	movlw	low __pbssBANK6
  2445  00A7  0084               	movwf	4
  2446  00A8  3003               	movlw	high __pbssBANK6
  2447  00A9  0085               	movwf	5
  2448  00AA  3040               	movlw	64
  2449  00AB  00FE               	movwf	btemp
  2450  00AC  3000               	movlw	0
  2451  00AD  00FF               	movwf	btemp+1
  2452  00AE  3192  221C         	fcall	clear_ram0
  2453  00B0                     end_of_initialization:	
  2454                           ;End of C runtime variable initialization code
  2455                           
  2456  00B0                     __end_of__initialization:	
  2457  00B0  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2458  00B1  0020               	movlb	0
  2459  00B2  3194  2CE9         	ljmp	_main	;jump to C main() function
  2460                           
  2461                           	psect	bssCOMMON
  2462  0070                     __pbssCOMMON:	
  2463  0070                     _eusartRxTail:	
  2464  0070                     	ds	1
  2465  0071                     _eusartRxHead:	
  2466  0071                     	ds	1
  2467  0072                     _eusartTxBufferRemaining:	
  2468  0072                     	ds	1
  2469  0073                     _eusartTxTail:	
  2470  0073                     	ds	1
  2471  0074                     _eusartTxHead:	
  2472  0074                     	ds	1
  2473  0075                     _p_i2c1_current:	
  2474  0075                     	ds	1
  2475  0076                     _p_i2c1_trb_current:	
  2476  0076                     	ds	1
  2477                           
  2478                           	psect	bssBANK0
  2479  006B                     __pbssBANK0:	
  2480  006B                     _i:	
  2481  006B                     	ds	1
  2482  006C                     command_handler@pos:	
  2483  006C                     	ds	1
  2484  006D                     I2C1_ISR@i2c_address:	
  2485  006D                     	ds	2
  2486                           
  2487                           	psect	bssBANK1
  2488  00D9                     __pbssBANK1:	
  2489  00D9                     _i2c1_object:	
  2490  00D9                     	ds	5
  2491  00DE                     inv_handler@t:	
  2492  00DE                     	ds	2
  2493  00E0                     _value:	
  2494  00E0                     	ds	1
  2495  00E1                     _cnt:	
  2496  00E1                     	ds	1
  2497  00E2                     dev_map_iterator@yy:	
  2498  00E2                     	ds	1
  2499  00E3                     dev_map_iterator@xx:	
  2500  00E3                     	ds	1
  2501  00E4                     _devs:	
  2502  00E4                     	ds	1
  2503  00E5                     _running:	
  2504  00E5                     	ds	1
  2505  00E6                     _timer0ReloadVal:	
  2506  00E6                     	ds	1
  2507  00E7                     _eusartRxCount:	
  2508  00E7                     	ds	1
  2509  00E8                     I2C1_ISR@i2c_10bit_address_restart:	
  2510  00E8                     	ds	1
  2511  00E9                     I2C1_ISR@i2c_bytes_left:	
  2512  00E9                     	ds	1
  2513  00EA                     _i2c1_trb_count:	
  2514  00EA                     	ds	1
  2515  00EB                     _i2c1_state:	
  2516  00EB                     	ds	1
  2517                           
  2518                           	psect	dataBANK1
  2519  00EC                     __pdataBANK1:	
  2520  00EC                     put_cmd@idx:	
  2521  00EC                     	ds	1
  2522  00ED                     inv_handler@cmd_next:	
  2523  00ED                     	ds	1
  2524  00EE                     _BACKPLANE_SLAVE_ADDRESS:	
  2525  00EE                     	ds	1
  2526                           
  2527                           	psect	bssBANK2
  2528  0120                     __pbssBANK2:	
  2529  0120                     _dev_map:	
  2530  0120                     	ds	4
  2531  0124                     _float100:	
  2532  0124                     	ds	2
  2533  0126                     _device_id_:	
  2534  0126                     	ds	2
  2535  0128                     _PROTOCOL_Inv_Handler:	
  2536  0128                     	ds	2
  2537  012A                     _PROTOCOL_Extension_Handler:	
  2538  012A                     	ds	2
  2539  012C                     _PROTOCOL_Loop_Func:	
  2540  012C                     	ds	2
  2541  012E                     _PROTOCOL_Set_Handler:	
  2542  012E                     	ds	2
  2543  0130                     _PROTOCOL_Stop_Handler:	
  2544  0130                     	ds	2
  2545  0132                     _PROTOCOL_Start_Handler:	
  2546  0132                     	ds	2
  2547  0134                     I2C1_ISR@pi2c_buf_ptr:	
  2548  0134                     	ds	2
  2549  0136                     _data:	
  2550  0136                     	ds	1
  2551  0137                     _j:	
  2552  0137                     	ds	1
  2553  0138                     _backplane_slave_enabled:	
  2554  0138                     	ds	1
  2555  0139                     _readbuf_status:	
  2556  0139                     	ds	1
  2557  013A                     _tmr_overflow:	
  2558  013A                     	ds	1
  2559  013B                     _tmr_cnt:	
  2560  013B                     	ds	1
  2561  013C                     _sec_cnt:	
  2562  013C                     	ds	1
  2563  013D                     _invoked:	
  2564  013D                     	ds	1
  2565  013E                     _locked:	
  2566  013E                     	ds	1
  2567  013F                     _slave_address:	
  2568  013F                     	ds	1
  2569  0140                     _do_func:	
  2570  0140                     	ds	1
  2571  0141                     _timer_cnt:	
  2572  0141                     	ds	1
  2573  0142                     _readbuf:	
  2574  0142                     	ds	6
  2575  0148                     I2C1_MasterRead@trBlock:	
  2576  0148                     	ds	5
  2577  014D                     I2C1_MasterWrite@trBlock:	
  2578  014D                     	ds	5
  2579  0152                     PROTOCOL_Send_float@pbuf:	
  2580  0152                     	ds	3
  2581  0155                     _i2c1_tr_queue:	
  2582  0155                     	ds	3
  2583  0158                     PROTOCOL_Send_int16_t@pbuf:	
  2584  0158                     	ds	2
  2585  015A                     PROTOCOL_Send_uint16_t@pbuf:	
  2586  015A                     	ds	2
  2587  015C                     PROTOCOL_Send_int8_t@pbuf:	
  2588  015C                     	ds	1
  2589  015D                     PROTOCOL_Send_uint8_t@pbuf:	
  2590  015D                     	ds	1
  2591                           
  2592                           	psect	dataBANK2
  2593  015E                     __pdataBANK2:	
  2594  015E                     _tmr_scaler:	
  2595  015E                     	ds	1
  2596  015F                     dev_map_iterator@start:	
  2597  015F                     	ds	1
  2598  0160                     _type_no_data:	
  2599  0160                     	ds	1
  2600                           
  2601                           	psect	bssBANK3
  2602  01A0                     __pbssBANK3:	
  2603  01A0                     _schedule:	
  2604  01A0                     	ds	28
  2605  01BC                     _read_buf:	
  2606  01BC                     	ds	16
  2607                           
  2608                           	psect	bssBANK4
  2609  0220                     __pbssBANK4:	
  2610  0220                     _buf:	
  2611  0220                     	ds	48
  2612  0250                     _sendbuf:	
  2613  0250                     	ds	16
  2614                           
  2615                           	psect	bssBANK5
  2616  02A0                     __pbssBANK5:	
  2617  02A0                     _eusartTxBuffer:	
  2618  02A0                     	ds	64
  2619                           
  2620                           	psect	bssBANK6
  2621  0320                     __pbssBANK6:	
  2622  0320                     _eusartRxBuffer:	
  2623  0320                     	ds	64
  2624                           
  2625                           	psect	clrtext
  2626  121C                     clear_ram0:	
  2627                           ;	Called with FSR0 containing the base address, and
  2628                           ;	btemp/btemp+1 has the size to clear
  2629                           
  2630  121C  0064               	clrwdt	;clear the watchdog before getting into this loop
  2631  121D                     clrloop0:	
  2632  121D  0180               	clrf	0	;clear RAM location pointed to by FSR
  2633  121E  3101               	addfsr 0,1
  2634  121F  3001               	movlw	1
  2635  1220  02FE               	subwf	126,f
  2636  1221  3000               	movlw	0
  2637  1222  3BFF               	subwfb	127,f
  2638  1223  087F               	movf	127,w
  2639  1224  047E               	iorwf	126,w
  2640  1225  1903               	btfsc	3,2
  2641  1226  3400               	retlw	0	;all done for this memory range, return
  2642  1227  2A1D               	goto	clrloop0	;have we reached the end yet?
  2643                           
  2644                           	psect	cstackBANK1
  2645  00A0                     __pcstackBANK1:	
  2646  00A0                     exec_remote_cmd@send_buf:	
  2647                           
  2648                           ; 50 bytes @ 0x0
  2649  00A0                     	ds	50
  2650  00D2                     exec_remote_cmd@idx:	
  2651                           
  2652                           ; 1 bytes @ 0x32
  2653  00D2                     	ds	1
  2654  00D3                     exec_remote_cmd@j:	
  2655                           
  2656                           ; 1 bytes @ 0x33
  2657  00D3                     	ds	1
  2658  00D4                     exec_remote_cmd@i:	
  2659                           
  2660                           ; 1 bytes @ 0x34
  2661  00D4                     	ds	1
  2662  00D5                     exec_remote_cmd@status:	
  2663                           
  2664                           ; 1 bytes @ 0x35
  2665  00D5                     	ds	1
  2666  00D6                     exec_remote_cmd@data:	
  2667                           
  2668                           ; 1 bytes @ 0x36
  2669  00D6                     	ds	1
  2670  00D7                     exec_remote_cmd@buf:	
  2671                           
  2672                           ; 2 bytes @ 0x37
  2673  00D7                     	ds	2
  2674                           
  2675                           	psect	cstackCOMMON
  2676  0077                     __pcstackCOMMON:	
  2677  0077                     ?_isdigit:	
  2678  0077                     ?_I2C1_Stop:	
  2679                           ; 1 bit 
  2680                           
  2681  0077                     ??_I2C1_Stop:	
  2682                           ; 1 bytes @ 0x0
  2683                           
  2684  0077                     ?_I2C1_FunctionComplete:	
  2685                           ; 1 bytes @ 0x0
  2686                           
  2687  0077                     ??_I2C1_FunctionComplete:	
  2688                           ; 1 bytes @ 0x0
  2689                           
  2690  0077                     ?_OSCILLATOR_Initialize:	
  2691                           ; 1 bytes @ 0x0
  2692                           
  2693  0077                     ?_WDT_Initialize:	
  2694                           ; 1 bytes @ 0x0
  2695                           
  2696  0077                     ?_TMR0_Initialize:	
  2697                           ; 1 bytes @ 0x0
  2698                           
  2699  0077                     ?_PROTOCOL_Loop:	
  2700                           ; 1 bytes @ 0x0
  2701                           
  2702  0077                     ?_I2C1_Initialize:	
  2703                           ; 1 bytes @ 0x0
  2704                           
  2705  0077                     ?_I2C1_ISR:	
  2706                           ; 1 bytes @ 0x0
  2707                           
  2708  0077                     ?_I2C1_BusCollisionISR:	
  2709                           ; 1 bytes @ 0x0
  2710                           
  2711  0077                     ??_I2C1_BusCollisionISR:	
  2712                           ; 1 bytes @ 0x0
  2713                           
  2714  0077                     ?_DATAEE_ReadByte:	
  2715                           ; 1 bytes @ 0x0
  2716                           
  2717  0077                     ?_EUSART_Initialize:	
  2718                           ; 1 bytes @ 0x0
  2719                           
  2720  0077                     ?_EUSART_Read:	
  2721                           ; 1 bytes @ 0x0
  2722                           
  2723  0077                     ?_EUSART_Write:	
  2724                           ; 1 bytes @ 0x0
  2725                           
  2726  0077                     ?_putch:	
  2727                           ; 1 bytes @ 0x0
  2728                           
  2729  0077                     ?_EUSART_Transmit_ISR:	
  2730                           ; 1 bytes @ 0x0
  2731                           
  2732  0077                     ??_EUSART_Transmit_ISR:	
  2733                           ; 1 bytes @ 0x0
  2734                           
  2735  0077                     ?_EUSART_Receive_ISR:	
  2736                           ; 1 bytes @ 0x0
  2737                           
  2738  0077                     ??_EUSART_Receive_ISR:	
  2739                           ; 1 bytes @ 0x0
  2740                           
  2741  0077                     ?_PIN_MANAGER_Initialize:	
  2742                           ; 1 bytes @ 0x0
  2743                           
  2744  0077                     ?_INTERRUPT_InterruptManager:	
  2745                           ; 1 bytes @ 0x0
  2746                           
  2747  0077                     ?_SYSTEM_Initialize:	
  2748                           ; 1 bytes @ 0x0
  2749                           
  2750  0077                     ?_TMR0_HasOverflowOccured:	
  2751                           ; 1 bytes @ 0x0
  2752                           
  2753  0077                     ?_start_handler:	
  2754                           ; 1 bytes @ 0x0
  2755                           
  2756  0077                     ?_stop_handler:	
  2757                           ; 1 bytes @ 0x0
  2758                           
  2759  0077                     ?_exec_remote_cmd:	
  2760                           ; 1 bytes @ 0x0
  2761                           
  2762  0077                     ?_init:	
  2763                           ; 1 bytes @ 0x0
  2764                           
  2765  0077                     ?_add_dev:	
  2766                           ; 1 bytes @ 0x0
  2767                           
  2768  0077                     ?_del_dev:	
  2769                           ; 1 bytes @ 0x0
  2770                           
  2771  0077                     ?_dev_map_iterator:	
  2772                           ; 1 bytes @ 0x0
  2773                           
  2774  0077                     ?_scan_dev:	
  2775                           ; 1 bytes @ 0x0
  2776                           
  2777  0077                     ?_check_plg:	
  2778                           ; 1 bytes @ 0x0
  2779                           
  2780  0077                     ?_detected:	
  2781                           ; 1 bytes @ 0x0
  2782                           
  2783  0077                     ?_print_dev_map:	
  2784                           ; 1 bytes @ 0x0
  2785                           
  2786  0077                     ?_sen:	
  2787                           ; 1 bytes @ 0x0
  2788                           
  2789  0077                     ?_one_shot_sen:	
  2790                           ; 1 bytes @ 0x0
  2791                           
  2792  0077                     ?_fetch:	
  2793                           ; 1 bytes @ 0x0
  2794                           
  2795  0077                     ?_inv_handler:	
  2796                           ; 1 bytes @ 0x0
  2797                           
  2798  0077                     ?_put_cmd:	
  2799                           ; 1 bytes @ 0x0
  2800                           
  2801  0077                     ?_main:	
  2802                           ; 1 bytes @ 0x0
  2803                           
  2804  0077                     ?_PROTOCOL_Write_Device_Address:	
  2805                           ; 1 bytes @ 0x0
  2806                           
  2807  0077                     ?_PROTOCOL_Read_Device_Address:	
  2808                           ; 1 bytes @ 0x0
  2809                           
  2810  0077                     ?_PROTOCOL_STA:	
  2811                           ; 1 bytes @ 0x0
  2812                           
  2813  0077                     ?_PROTOCOL_STP:	
  2814                           ; 1 bytes @ 0x0
  2815                           
  2816  0077                     ?_PROTOCOL_SAV:	
  2817                           ; 1 bytes @ 0x0
  2818                           
  2819  0077                     ?_PROTOCOL_SET:	
  2820                           ; 1 bytes @ 0x0
  2821                           
  2822  0077                     ?_PROTOCOL_EXT:	
  2823                           ; 1 bytes @ 0x0
  2824                           
  2825                           
  2826                           ; 1 bytes @ 0x0
  2827  0077                     	ds	1
  2828  0078                     I2C1_Stop@completion_code:	
  2829                           
  2830                           ; 1 bytes @ 0x1
  2831  0078                     	ds	1
  2832  0079                     ??_I2C1_ISR:	
  2833                           
  2834                           ; 1 bytes @ 0x2
  2835  0079                     	ds	4
  2836  007D                     ??_INTERRUPT_InterruptManager:	
  2837                           
  2838                           ; 1 bytes @ 0x6
  2839  007D                     	ds	1
  2840                           
  2841                           	psect	cstackBANK0
  2842  0020                     __pcstackBANK0:	
  2843  0020                     ?_I2C1_MasterWriteTRBBuild:	
  2844  0020                     ?_I2C1_MasterTRBInsert:	
  2845                           ; 1 bytes @ 0x0
  2846                           
  2847  0020                     ?_I2C1_MasterReadTRBBuild:	
  2848                           ; 1 bytes @ 0x0
  2849                           
  2850  0020                     ??_OSCILLATOR_Initialize:	
  2851                           ; 1 bytes @ 0x0
  2852                           
  2853  0020                     ??_WDT_Initialize:	
  2854                           ; 1 bytes @ 0x0
  2855                           
  2856  0020                     ??_TMR0_Initialize:	
  2857                           ; 1 bytes @ 0x0
  2858                           
  2859  0020                     ?_PROTOCOL_Set_Extension_Handler:	
  2860                           ; 1 bytes @ 0x0
  2861                           
  2862  0020                     ??_isdigit:	
  2863                           ; 1 bytes @ 0x0
  2864                           
  2865  0020                     ??_I2C1_Initialize:	
  2866                           ; 1 bytes @ 0x0
  2867                           
  2868  0020                     ?_DATAEE_WriteByte:	
  2869                           ; 1 bytes @ 0x0
  2870                           
  2871  0020                     ??_DATAEE_ReadByte:	
  2872                           ; 1 bytes @ 0x0
  2873                           
  2874  0020                     ??_EUSART_Initialize:	
  2875                           ; 1 bytes @ 0x0
  2876                           
  2877  0020                     ??_EUSART_Read:	
  2878                           ; 1 bytes @ 0x0
  2879                           
  2880  0020                     ??_EUSART_Write:	
  2881                           ; 1 bytes @ 0x0
  2882                           
  2883  0020                     ??_PIN_MANAGER_Initialize:	
  2884                           ; 1 bytes @ 0x0
  2885                           
  2886  0020                     ??_TMR0_HasOverflowOccured:	
  2887                           ; 1 bytes @ 0x0
  2888                           
  2889  0020                     ??_start_handler:	
  2890                           ; 1 bytes @ 0x0
  2891                           
  2892  0020                     ??_stop_handler:	
  2893                           ; 1 bytes @ 0x0
  2894                           
  2895  0020                     ??_dev_map_iterator:	
  2896                           ; 1 bytes @ 0x0
  2897                           
  2898  0020                     ??_PROTOCOL_Read_Device_Address:	
  2899                           ; 1 bytes @ 0x0
  2900                           
  2901  0020                     ??_PROTOCOL_STA:	
  2902                           ; 1 bytes @ 0x0
  2903                           
  2904  0020                     ??_PROTOCOL_STP:	
  2905                           ; 1 bytes @ 0x0
  2906                           
  2907  0020                     ??_PROTOCOL_SET:	
  2908                           ; 1 bytes @ 0x0
  2909                           
  2910  0020                     ?_strncmp:	
  2911                           ; 1 bytes @ 0x0
  2912                           
  2913  0020                     ?_concat:	
  2914                           ; 2 bytes @ 0x0
  2915                           
  2916  0020                     ?___wmul:	
  2917                           ; 2 bytes @ 0x0
  2918                           
  2919  0020                     ?___awdiv:	
  2920                           ; 2 bytes @ 0x0
  2921                           
  2922  0020                     ?___awmod:	
  2923                           ; 2 bytes @ 0x0
  2924                           
  2925  0020                     ?___lwdiv:	
  2926                           ; 2 bytes @ 0x0
  2927                           
  2928  0020                     I2C1_MasterTRBInsert@ptrb_list:	
  2929                           ; 2 bytes @ 0x0
  2930                           
  2931  0020                     I2C1_MasterWriteTRBBuild@pdata:	
  2932                           ; 1 bytes @ 0x0
  2933                           
  2934  0020                     DATAEE_WriteByte@bData:	
  2935                           ; 1 bytes @ 0x0
  2936                           
  2937  0020                     DATAEE_ReadByte@bAdd:	
  2938                           ; 1 bytes @ 0x0
  2939                           
  2940  0020                     concat@lsb:	
  2941                           ; 1 bytes @ 0x0
  2942                           
  2943  0020                     _isdigit$1451:	
  2944                           ; 1 bytes @ 0x0
  2945                           
  2946  0020                     I2C1_MasterReadTRBBuild@pdata:	
  2947                           ; 1 bytes @ 0x0
  2948                           
  2949  0020                     PROTOCOL_Set_Extension_Handler@extension_handler:	
  2950                           ; 2 bytes @ 0x0
  2951                           
  2952  0020                     ___wmul@multiplier:	
  2953                           ; 2 bytes @ 0x0
  2954                           
  2955  0020                     ___awdiv@divisor:	
  2956                           ; 2 bytes @ 0x0
  2957                           
  2958  0020                     ___awmod@divisor:	
  2959                           ; 2 bytes @ 0x0
  2960                           
  2961  0020                     ___lwdiv@divisor:	
  2962                           ; 2 bytes @ 0x0
  2963                           
  2964  0020                     strncmp@s1:	
  2965                           ; 2 bytes @ 0x0
  2966                           
  2967                           
  2968                           ; 2 bytes @ 0x0
  2969  0020                     	ds	1
  2970  0021                     ?_PROTOCOL_Initialize:	
  2971  0021                     ??_DATAEE_WriteByte:	
  2972                           ; 1 bytes @ 0x1
  2973                           
  2974  0021                     ??_SYSTEM_Initialize:	
  2975                           ; 1 bytes @ 0x1
  2976                           
  2977  0021                     I2C1_MasterTRBInsert@pflag:	
  2978                           ; 1 bytes @ 0x1
  2979                           
  2980  0021                     I2C1_MasterWriteTRBBuild@length:	
  2981                           ; 1 bytes @ 0x1
  2982                           
  2983  0021                     DATAEE_WriteByte@bAdd:	
  2984                           ; 1 bytes @ 0x1
  2985                           
  2986  0021                     EUSART_Read@readValue:	
  2987                           ; 1 bytes @ 0x1
  2988                           
  2989  0021                     EUSART_Write@txData:	
  2990                           ; 1 bytes @ 0x1
  2991                           
  2992  0021                     PROTOCOL_SET@value_:	
  2993                           ; 1 bytes @ 0x1
  2994                           
  2995  0021                     isdigit@c:	
  2996                           ; 1 bytes @ 0x1
  2997                           
  2998  0021                     PROTOCOL_Initialize@device_id:	
  2999                           ; 1 bytes @ 0x1
  3000                           
  3001                           
  3002                           ; 2 bytes @ 0x1
  3003  0021                     	ds	1
  3004  0022                     ??_I2C1_MasterTRBInsert:	
  3005  0022                     ??_PROTOCOL_Set_Extension_Handler:	
  3006                           ; 1 bytes @ 0x2
  3007                           
  3008  0022                     ??_putch:	
  3009                           ; 1 bytes @ 0x2
  3010                           
  3011  0022                     ??_concat:	
  3012                           ; 1 bytes @ 0x2
  3013                           
  3014  0022                     I2C1_MasterReadTRBBuild@length:	
  3015                           ; 1 bytes @ 0x2
  3016                           
  3017  0022                     DATAEE_WriteByte@GIEBitValue:	
  3018                           ; 1 bytes @ 0x2
  3019                           
  3020  0022                     putch@txData:	
  3021                           ; 1 bytes @ 0x2
  3022                           
  3023  0022                     I2C1_MasterWriteTRBBuild@address:	
  3024                           ; 1 bytes @ 0x2
  3025                           
  3026  0022                     ___wmul@multiplicand:	
  3027                           ; 2 bytes @ 0x2
  3028                           
  3029  0022                     ___awdiv@dividend:	
  3030                           ; 2 bytes @ 0x2
  3031                           
  3032  0022                     ___awmod@dividend:	
  3033                           ; 2 bytes @ 0x2
  3034                           
  3035  0022                     ___lwdiv@dividend:	
  3036                           ; 2 bytes @ 0x2
  3037                           
  3038  0022                     strncmp@s2:	
  3039                           ; 2 bytes @ 0x2
  3040                           
  3041                           
  3042                           ; 2 bytes @ 0x2
  3043  0022                     	ds	1
  3044  0023                     ??_PROTOCOL_Write_Device_Address:	
  3045  0023                     ??_PROTOCOL_SAV:	
  3046                           ; 1 bytes @ 0x3
  3047                           
  3048  0023                     I2C1_MasterTRBInsert@count:	
  3049                           ; 1 bytes @ 0x3
  3050                           
  3051  0023                     I2C1_MasterReadTRBBuild@address:	
  3052                           ; 1 bytes @ 0x3
  3053                           
  3054  0023                     PROTOCOL_Initialize@start_handler:	
  3055                           ; 2 bytes @ 0x3
  3056                           
  3057                           
  3058                           ; 2 bytes @ 0x3
  3059  0023                     	ds	1
  3060  0024                     ??_I2C1_MasterWriteTRBBuild:	
  3061  0024                     ??___wmul:	
  3062                           ; 1 bytes @ 0x4
  3063                           
  3064  0024                     ??___awdiv:	
  3065                           ; 1 bytes @ 0x4
  3066                           
  3067  0024                     ??___awmod:	
  3068                           ; 1 bytes @ 0x4
  3069                           
  3070  0024                     ??___lwdiv:	
  3071                           ; 1 bytes @ 0x4
  3072                           
  3073  0024                     PROTOCOL_Write_Device_Address@device_id_i2c:	
  3074                           ; 1 bytes @ 0x4
  3075                           
  3076  0024                     ___wmul@product:	
  3077                           ; 1 bytes @ 0x4
  3078                           
  3079  0024                     strncmp@len:	
  3080                           ; 2 bytes @ 0x4
  3081                           
  3082                           
  3083                           ; 2 bytes @ 0x4
  3084  0024                     	ds	1
  3085  0025                     ??_I2C1_MasterReadTRBBuild:	
  3086  0025                     ___awdiv@counter:	
  3087                           ; 1 bytes @ 0x5
  3088                           
  3089  0025                     ___awmod@counter:	
  3090                           ; 1 bytes @ 0x5
  3091                           
  3092  0025                     ___lwdiv@counter:	
  3093                           ; 1 bytes @ 0x5
  3094                           
  3095  0025                     PROTOCOL_Initialize@stop_handler:	
  3096                           ; 1 bytes @ 0x5
  3097                           
  3098                           
  3099                           ; 2 bytes @ 0x5
  3100  0025                     	ds	1
  3101  0026                     ??_strncmp:	
  3102  0026                     ?_atoi:	
  3103                           ; 1 bytes @ 0x6
  3104                           
  3105  0026                     ?_strcpy:	
  3106                           ; 2 bytes @ 0x6
  3107                           
  3108  0026                     I2C1_MasterWriteTRBBuild@ptrb:	
  3109                           ; 2 bytes @ 0x6
  3110                           
  3111  0026                     dev_map_iterator@exist:	
  3112                           ; 1 bytes @ 0x6
  3113                           
  3114  0026                     ___awdiv@sign:	
  3115                           ; 1 bytes @ 0x6
  3116                           
  3117  0026                     ___awmod@sign:	
  3118                           ; 1 bytes @ 0x6
  3119                           
  3120  0026                     atoi@s:	
  3121                           ; 1 bytes @ 0x6
  3122                           
  3123  0026                     ___lwdiv@quotient:	
  3124                           ; 2 bytes @ 0x6
  3125                           
  3126  0026                     strcpy@to:	
  3127                           ; 2 bytes @ 0x6
  3128                           
  3129                           
  3130                           ; 2 bytes @ 0x6
  3131  0026                     	ds	1
  3132  0027                     ?_I2C1_MasterWrite:	
  3133  0027                     ?_abs:	
  3134                           ; 1 bytes @ 0x7
  3135                           
  3136  0027                     I2C1_MasterWrite@length:	
  3137                           ; 2 bytes @ 0x7
  3138                           
  3139  0027                     I2C1_MasterReadTRBBuild@ptrb:	
  3140                           ; 1 bytes @ 0x7
  3141                           
  3142  0027                     dev_map_iterator@dev_addr:	
  3143                           ; 1 bytes @ 0x7
  3144                           
  3145  0027                     PROTOCOL_Initialize@set_handler:	
  3146                           ; 1 bytes @ 0x7
  3147                           
  3148  0027                     concat@msb:	
  3149                           ; 1 bytes @ 0x7
  3150                           
  3151  0027                     abs@a:	
  3152                           ; 1 bytes @ 0x7
  3153                           
  3154  0027                     ___awdiv@quotient:	
  3155                           ; 2 bytes @ 0x7
  3156                           
  3157                           
  3158                           ; 2 bytes @ 0x7
  3159  0027                     	ds	1
  3160  0028                     ??_atoi:	
  3161  0028                     ?_I2C1_MasterRead:	
  3162                           ; 1 bytes @ 0x8
  3163                           
  3164  0028                     ?___lwmod:	
  3165                           ; 1 bytes @ 0x8
  3166                           
  3167  0028                     strcpy@from:	
  3168                           ; 2 bytes @ 0x8
  3169                           
  3170  0028                     I2C1_MasterWrite@address:	
  3171                           ; 1 bytes @ 0x8
  3172                           
  3173  0028                     I2C1_MasterRead@pdata:	
  3174                           ; 2 bytes @ 0x8
  3175                           
  3176  0028                     PROTOCOL_Initialize@inv_handler:	
  3177                           ; 2 bytes @ 0x8
  3178                           
  3179  0028                     ___lwmod@divisor:	
  3180                           ; 2 bytes @ 0x8
  3181                           
  3182                           
  3183                           ; 2 bytes @ 0x8
  3184  0028                     	ds	1
  3185  0029                     ??_strcpy:	
  3186  0029                     ??_abs:	
  3187                           ; 1 bytes @ 0x9
  3188                           
  3189  0029                     ??_init:	
  3190                           ; 1 bytes @ 0x9
  3191                           
  3192  0029                     ??_add_dev:	
  3193                           ; 1 bytes @ 0x9
  3194                           
  3195  0029                     ??_del_dev:	
  3196                           ; 1 bytes @ 0x9
  3197                           
  3198  0029                     ??_detected:	
  3199                           ; 1 bytes @ 0x9
  3200                           
  3201                           
  3202                           ; 1 bytes @ 0x9
  3203  0029                     	ds	1
  3204  002A                     I2C1_MasterWrite@pflag:	
  3205  002A                     I2C1_MasterRead@length:	
  3206                           ; 1 bytes @ 0xA
  3207                           
  3208  002A                     PROTOCOL_Initialize@scaler:	
  3209                           ; 1 bytes @ 0xA
  3210                           
  3211  002A                     atoi@sign:	
  3212                           ; 1 bytes @ 0xA
  3213                           
  3214  002A                     ___lwmod@dividend:	
  3215                           ; 1 bytes @ 0xA
  3216                           
  3217  002A                     strcpy@cp:	
  3218                           ; 2 bytes @ 0xA
  3219                           
  3220                           
  3221                           ; 2 bytes @ 0xA
  3222  002A                     	ds	1
  3223  002B                     ??_PROTOCOL_Initialize:	
  3224  002B                     ??_I2C1_MasterWrite:	
  3225                           ; 1 bytes @ 0xB
  3226                           
  3227  002B                     I2C1_MasterRead@address:	
  3228                           ; 1 bytes @ 0xB
  3229                           
  3230  002B                     atoi@a:	
  3231                           ; 2 bytes @ 0xB
  3232                           
  3233                           
  3234                           ; 2 bytes @ 0xB
  3235  002B                     	ds	1
  3236  002C                     ??_put_cmd:	
  3237  002C                     ??___lwmod:	
  3238                           ; 1 bytes @ 0xC
  3239                           
  3240  002C                     add_dev@x:	
  3241                           ; 1 bytes @ 0xC
  3242                           
  3243  002C                     del_dev@x:	
  3244                           ; 1 bytes @ 0xC
  3245                           
  3246  002C                     detected@y:	
  3247                           ; 1 bytes @ 0xC
  3248                           
  3249                           
  3250                           ; 1 bytes @ 0xC
  3251  002C                     	ds	1
  3252  002D                     I2C1_MasterWrite@pdata:	
  3253  002D                     I2C1_MasterRead@pflag:	
  3254                           ; 1 bytes @ 0xD
  3255                           
  3256  002D                     add_dev@old_map:	
  3257                           ; 1 bytes @ 0xD
  3258                           
  3259  002D                     del_dev@old_map:	
  3260                           ; 1 bytes @ 0xD
  3261                           
  3262  002D                     detected@x:	
  3263                           ; 1 bytes @ 0xD
  3264                           
  3265  002D                     ___lwmod@counter:	
  3266                           ; 1 bytes @ 0xD
  3267                           
  3268                           
  3269                           ; 1 bytes @ 0xD
  3270  002D                     	ds	1
  3271  002E                     ?_i2c1_write_no_data:	
  3272  002E                     ?_i2c1_write:	
  3273                           ; 1 bytes @ 0xE
  3274                           
  3275  002E                     ??_I2C1_MasterRead:	
  3276                           ; 1 bytes @ 0xE
  3277                           
  3278  002E                     ?_printf:	
  3279                           ; 1 bytes @ 0xE
  3280                           
  3281  002E                     add_dev@new_map:	
  3282                           ; 2 bytes @ 0xE
  3283                           
  3284  002E                     del_dev@new_map:	
  3285                           ; 1 bytes @ 0xE
  3286                           
  3287  002E                     detected@exist:	
  3288                           ; 1 bytes @ 0xE
  3289                           
  3290  002E                     i2c1_write@dev_addr:	
  3291                           ; 1 bytes @ 0xE
  3292                           
  3293  002E                     i2c1_write_no_data@dev_addr:	
  3294                           ; 2 bytes @ 0xE
  3295                           
  3296  002E                     printf@f:	
  3297                           ; 2 bytes @ 0xE
  3298                           
  3299                           
  3300                           ; 2 bytes @ 0xE
  3301  002E                     	ds	1
  3302  002F                     init@dev_addr:	
  3303  002F                     add_dev@y:	
  3304                           ; 1 bytes @ 0xF
  3305                           
  3306  002F                     del_dev@y:	
  3307                           ; 1 bytes @ 0xF
  3308                           
  3309  002F                     detected@dev_addr:	
  3310                           ; 1 bytes @ 0xF
  3311                           
  3312                           
  3313                           ; 1 bytes @ 0xF
  3314  002F                     	ds	1
  3315  0030                     ?_i2c1_read:	
  3316  0030                     init@y:	
  3317                           ; 1 bytes @ 0x10
  3318                           
  3319  0030                     add_dev@dev_addr:	
  3320                           ; 1 bytes @ 0x10
  3321                           
  3322  0030                     del_dev@dev_addr:	
  3323                           ; 1 bytes @ 0x10
  3324                           
  3325  0030                     i2c1_write@pbuf:	
  3326                           ; 1 bytes @ 0x10
  3327                           
  3328  0030                     i2c1_write_no_data@reg_addr:	
  3329                           ; 1 bytes @ 0x10
  3330                           
  3331  0030                     i2c1_read@dev_addr:	
  3332                           ; 1 bytes @ 0x10
  3333                           
  3334                           
  3335                           ; 2 bytes @ 0x10
  3336  0030                     	ds	1
  3337  0031                     ??_i2c1_write_no_data:	
  3338  0031                     init@i:	
  3339                           ; 1 bytes @ 0x11
  3340                           
  3341  0031                     put_cmd@buf:	
  3342                           ; 1 bytes @ 0x11
  3343                           
  3344  0031                     i2c1_write@len:	
  3345                           ; 1 bytes @ 0x11
  3346                           
  3347                           
  3348                           ; 1 bytes @ 0x11
  3349  0031                     	ds	1
  3350  0032                     ??_i2c1_write:	
  3351  0032                     i2c1_read@reg_addr:	
  3352                           ; 1 bytes @ 0x12
  3353                           
  3354  0032                     i2c1_write_no_data@write_status:	
  3355                           ; 1 bytes @ 0x12
  3356                           
  3357                           
  3358                           ; 1 bytes @ 0x12
  3359  0032                     	ds	1
  3360  0033                     i2c1_write_no_data@buf:	
  3361  0033                     i2c1_read@pbuf:	
  3362                           ; 1 bytes @ 0x13
  3363                           
  3364                           
  3365                           ; 2 bytes @ 0x13
  3366  0033                     	ds	1
  3367  0034                     ??_printf:	
  3368  0034                     i2c1_write@write_status:	
  3369                           ; 1 bytes @ 0x14
  3370                           
  3371  0034                     i2c1_write_no_data@status:	
  3372                           ; 1 bytes @ 0x14
  3373                           
  3374                           
  3375                           ; 1 bytes @ 0x14
  3376  0034                     	ds	1
  3377  0035                     i2c1_write@status:	
  3378  0035                     i2c1_read@len:	
  3379                           ; 1 bytes @ 0x15
  3380                           
  3381                           
  3382                           ; 1 bytes @ 0x15
  3383  0035                     	ds	1
  3384  0036                     ??_i2c1_read:	
  3385                           
  3386                           ; 1 bytes @ 0x16
  3387  0036                     	ds	2
  3388  0038                     i2c1_read@read_status:	
  3389  0038                     printf@prec:	
  3390                           ; 1 bytes @ 0x18
  3391                           
  3392                           
  3393                           ; 1 bytes @ 0x18
  3394  0038                     	ds	1
  3395  0039                     i2c1_read@reg:	
  3396  0039                     printf@cp:	
  3397                           ; 1 bytes @ 0x19
  3398                           
  3399                           
  3400                           ; 2 bytes @ 0x19
  3401  0039                     	ds	1
  3402  003A                     i2c1_read@status:	
  3403                           
  3404                           ; 1 bytes @ 0x1A
  3405  003A                     	ds	1
  3406  003B                     ??_scan_dev:	
  3407  003B                     printf@ap:	
  3408                           ; 1 bytes @ 0x1B
  3409                           
  3410                           
  3411                           ; 1 bytes @ 0x1B
  3412  003B                     	ds	1
  3413  003C                     printf@val:	
  3414                           
  3415                           ; 2 bytes @ 0x1C
  3416  003C                     	ds	2
  3417  003E                     scan_dev@status:	
  3418  003E                     printf@len:	
  3419                           ; 1 bytes @ 0x1E
  3420                           
  3421                           
  3422                           ; 2 bytes @ 0x1E
  3423  003E                     	ds	1
  3424  003F                     scan_dev@dev_addr:	
  3425                           
  3426                           ; 1 bytes @ 0x1F
  3427  003F                     	ds	1
  3428  0040                     ??_check_plg:	
  3429  0040                     printf@flag:	
  3430                           ; 1 bytes @ 0x20
  3431                           
  3432                           
  3433                           ; 1 bytes @ 0x20
  3434  0040                     	ds	1
  3435  0041                     printf@width:	
  3436                           
  3437                           ; 2 bytes @ 0x21
  3438  0041                     	ds	1
  3439  0042                     check_plg@status:	
  3440                           
  3441                           ; 1 bytes @ 0x22
  3442  0042                     	ds	1
  3443  0043                     printf@c:	
  3444                           
  3445                           ; 1 bytes @ 0x23
  3446  0043                     	ds	1
  3447  0044                     ?_PROTOCOL_Print_TLV:	
  3448  0044                     ??_exec_remote_cmd:	
  3449                           ; 1 bytes @ 0x24
  3450                           
  3451  0044                     ??_print_dev_map:	
  3452                           ; 1 bytes @ 0x24
  3453                           
  3454  0044                     PROTOCOL_Print_TLV@type:	
  3455                           ; 1 bytes @ 0x24
  3456                           
  3457                           
  3458                           ; 1 bytes @ 0x24
  3459  0044                     	ds	1
  3460  0045                     PROTOCOL_Print_TLV@length:	
  3461                           
  3462                           ; 1 bytes @ 0x25
  3463  0045                     	ds	1
  3464  0046                     print_dev_map@i:	
  3465  0046                     PROTOCOL_Print_TLV@pbuffer:	
  3466                           ; 1 bytes @ 0x26
  3467                           
  3468                           
  3469                           ; 1 bytes @ 0x26
  3470  0046                     	ds	1
  3471  0047                     ??_PROTOCOL_Print_TLV:	
  3472  0047                     print_dev_map@len:	
  3473                           ; 1 bytes @ 0x27
  3474                           
  3475                           
  3476                           ; 1 bytes @ 0x27
  3477  0047                     	ds	3
  3478  004A                     PROTOCOL_Print_TLV@dev_addr:	
  3479                           
  3480                           ; 1 bytes @ 0x2A
  3481  004A                     	ds	1
  3482  004B                     PROTOCOL_Print_TLV@v:	
  3483                           
  3484                           ; 2 bytes @ 0x2B
  3485  004B                     	ds	2
  3486  004D                     ??_sen:	
  3487                           
  3488                           ; 1 bytes @ 0x2D
  3489  004D                     	ds	5
  3490  0052                     sen@type:	
  3491                           
  3492                           ; 1 bytes @ 0x32
  3493  0052                     	ds	1
  3494  0053                     sen@length:	
  3495                           
  3496                           ; 1 bytes @ 0x33
  3497  0053                     	ds	1
  3498  0054                     sen@status:	
  3499                           
  3500                           ; 1 bytes @ 0x34
  3501  0054                     	ds	1
  3502  0055                     sen@dev_addr:	
  3503                           
  3504                           ; 1 bytes @ 0x35
  3505  0055                     	ds	1
  3506  0056                     ??_one_shot_sen:	
  3507  0056                     ??_fetch:	
  3508                           ; 1 bytes @ 0x36
  3509                           
  3510                           
  3511                           ; 1 bytes @ 0x36
  3512  0056                     	ds	3
  3513  0059                     one_shot_sen@status:	
  3514  0059                     fetch@status:	
  3515                           ; 1 bytes @ 0x39
  3516                           
  3517                           
  3518                           ; 1 bytes @ 0x39
  3519  0059                     	ds	1
  3520  005A                     one_shot_sen@dev_addr:	
  3521  005A                     fetch@sch:	
  3522                           ; 1 bytes @ 0x3A
  3523                           
  3524                           
  3525                           ; 1 bytes @ 0x3A
  3526  005A                     	ds	1
  3527  005B                     ?_command_handler:	
  3528  005B                     fetch@pos:	
  3529                           ; 1 bytes @ 0x3B
  3530                           
  3531  005B                     command_handler@buf:	
  3532                           ; 1 bytes @ 0x3B
  3533                           
  3534                           
  3535                           ; 1 bytes @ 0x3B
  3536  005B                     	ds	1
  3537  005C                     ??_command_handler:	
  3538  005C                     fetch@dev_addr:	
  3539                           ; 1 bytes @ 0x3C
  3540                           
  3541                           
  3542                           ; 1 bytes @ 0x3C
  3543  005C                     	ds	1
  3544  005D                     ??_inv_handler:	
  3545                           
  3546                           ; 1 bytes @ 0x3D
  3547  005D                     	ds	6
  3548  0063                     command_handler@dev_addr:	
  3549                           
  3550                           ; 1 bytes @ 0x43
  3551  0063                     	ds	1
  3552  0064                     command_handler@i:	
  3553                           
  3554                           ; 1 bytes @ 0x44
  3555  0064                     	ds	1
  3556  0065                     ??_PROTOCOL_EXT:	
  3557                           
  3558                           ; 1 bytes @ 0x45
  3559  0065                     	ds	1
  3560  0066                     PROTOCOL_EXT@char_buf:	
  3561                           
  3562                           ; 1 bytes @ 0x46
  3563  0066                     	ds	1
  3564  0067                     ??_PROTOCOL_Loop:	
  3565                           
  3566                           ; 1 bytes @ 0x47
  3567  0067                     	ds	2
  3568  0069                     PROTOCOL_Loop@c:	
  3569                           
  3570                           ; 1 bytes @ 0x49
  3571  0069                     	ds	1
  3572  006A                     PROTOCOL_Loop@device_address:	
  3573                           
  3574                           ; 1 bytes @ 0x4A
  3575  006A                     	ds	1
  3576  006B                     ??_main:	
  3577                           
  3578                           	psect	maintext
  3579  14E9                     __pmaintext:	
  3580                           ; 1 bytes @ 0x4B
  3581 ;;
  3582 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3583 ;;
  3584 ;; *************** function _main *****************
  3585 ;; Defined at:
  3586 ;;		line 403 in file "main.c"
  3587 ;; Parameters:    Size  Location     Type
  3588 ;;		None
  3589 ;; Auto vars:     Size  Location     Type
  3590 ;;		None
  3591 ;; Return value:  Size  Location     Type
  3592 ;;                  1    wreg      void 
  3593 ;; Registers used:
  3594 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3595 ;; Tracked objects:
  3596 ;;		On entry : B1F/0
  3597 ;;		On exit  : 0/0
  3598 ;;		Unchanged: 0/0
  3599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3601 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3603 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3604 ;;Total ram usage:        0 bytes
  3605 ;; Hardware stack levels required when called:   12
  3606 ;; This function calls:
  3607 ;;		_PROTOCOL_Initialize
  3608 ;;		_PROTOCOL_Loop
  3609 ;;		_PROTOCOL_Set_Extension_Handler
  3610 ;;		_SYSTEM_Initialize
  3611 ;;		_init
  3612 ;; This function is called by:
  3613 ;;		Startup code after reset
  3614 ;; This function uses a non-reentrant model
  3615 ;;
  3616                           
  3617                           
  3618                           ;psect for function _main
  3619  14E9                     _main:	
  3620                           
  3621                           ;main.c: 405: init();
  3622                           
  3623                           ;incstack = 0
  3624                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3625  14E9  318A  221D  3194   	fcall	_init
  3626                           
  3627                           ;main.c: 407: SYSTEM_Initialize();
  3628  14EC  3192  22A1  3194   	fcall	_SYSTEM_Initialize
  3629                           
  3630                           ;main.c: 408: (INTCONbits.GIE = 1);
  3631  14EF  178B               	bsf	11,7	;volatile
  3632                           
  3633                           ;main.c: 409: (INTCONbits.PEIE = 1);
  3634  14F0  170B               	bsf	11,6	;volatile
  3635                           
  3636                           ;main.c: 411: PROTOCOL_Initialize("BACKPLANE-MASTER", start_handler, stop_handler, (0), 
      +                          inv_handler, 1);
  3637  14F1  309E               	movlw	low (STR_34| (0+32768))
  3638  14F2  0020               	movlb	0	; select bank0
  3639  14F3  00A1               	movwf	PROTOCOL_Initialize@device_id
  3640  14F4  3090               	movlw	high (STR_34| (0+32768))
  3641  14F5  00A2               	movwf	PROTOCOL_Initialize@device_id+1
  3642  14F6  30E6               	movlw	low _start_handler
  3643  14F7  00A3               	movwf	PROTOCOL_Initialize@start_handler
  3644  14F8  3011               	movlw	high _start_handler
  3645  14F9  00A4               	movwf	PROTOCOL_Initialize@start_handler+1
  3646  14FA  30DA               	movlw	low _stop_handler
  3647  14FB  00A5               	movwf	PROTOCOL_Initialize@stop_handler
  3648  14FC  3011               	movlw	high _stop_handler
  3649  14FD  00A6               	movwf	PROTOCOL_Initialize@stop_handler+1
  3650  14FE  01A7               	clrf	PROTOCOL_Initialize@set_handler
  3651  14FF  3097               	movlw	low _inv_handler
  3652  1500  00A8               	movwf	PROTOCOL_Initialize@inv_handler
  3653  1501  300A               	movlw	high _inv_handler
  3654  1502  00A9               	movwf	PROTOCOL_Initialize@inv_handler+1
  3655  1503  01AA               	clrf	PROTOCOL_Initialize@scaler
  3656  1504  0AAA               	incf	PROTOCOL_Initialize@scaler,f
  3657  1505  3188  20AA  3194   	fcall	_PROTOCOL_Initialize
  3658                           
  3659                           ;main.c: 412: PROTOCOL_Set_Extension_Handler(command_handler);
  3660  1508  301D               	movlw	low _command_handler
  3661  1509  0020               	movlb	0	; select bank0
  3662  150A  00A0               	movwf	PROTOCOL_Set_Extension_Handler@extension_handler
  3663  150B  3005               	movlw	high _command_handler
  3664  150C  00A1               	movwf	PROTOCOL_Set_Extension_Handler@extension_handler+1
  3665  150D  3188  2000  3194   	fcall	_PROTOCOL_Set_Extension_Handler
  3666                           
  3667                           ;main.c: 413: PROTOCOL_Loop();
  3668  1510  318C  2494         	fcall	_PROTOCOL_Loop
  3669  1512  3180  283C         	ljmp	start
  3670  1514                     __end_of_main:	
  3671                           
  3672                           	psect	text1
  3673  0A1D                     __ptext1:	
  3674 ;; *************** function _init *****************
  3675 ;; Defined at:
  3676 ;;		line 108 in file "main.c"
  3677 ;; Parameters:    Size  Location     Type
  3678 ;;		None
  3679 ;; Auto vars:     Size  Location     Type
  3680 ;;  i               1   17[BANK0 ] unsigned char 
  3681 ;;  y               1   16[BANK0 ] unsigned char 
  3682 ;;  dev_addr        1   15[BANK0 ] unsigned char 
  3683 ;;  k               1    0        unsigned char 
  3684 ;;  j               1    0        unsigned char 
  3685 ;; Return value:  Size  Location     Type
  3686 ;;                  1    wreg      void 
  3687 ;; Registers used:
  3688 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3689 ;; Tracked objects:
  3690 ;;		On entry : 0/0
  3691 ;;		On exit  : 0/0
  3692 ;;		Unchanged: 0/0
  3693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3695 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3696 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3697 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3698 ;;Total ram usage:        9 bytes
  3699 ;; Hardware stack levels used:    1
  3700 ;; Hardware stack levels required when called:    4
  3701 ;; This function calls:
  3702 ;;		_DATAEE_ReadByte
  3703 ;;		___awdiv
  3704 ;;		___wmul
  3705 ;; This function is called by:
  3706 ;;		_main
  3707 ;; This function uses a non-reentrant model
  3708 ;;
  3709                           
  3710                           
  3711                           ;psect for function _init
  3712  0A1D                     _init:	
  3713                           
  3714                           ;main.c: 109: uint8_t y, i, j, k, dev_addr;
  3715                           ;main.c: 112: for (y=0; y<MAX_Y; y++) {
  3716                           
  3717                           ;incstack = 0
  3718                           ; Regs used in _init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3719  0A1D  0020               	movlb	0	; select bank0
  3720  0A1E  01B0               	clrf	init@y
  3721  0A1F  300A               	movlw	low (_MAX_Y| (0+32768))
  3722  0A20  0084               	movwf	4
  3723  0A21  3090               	movlw	high (_MAX_Y| (0+32768))
  3724  0A22  0085               	movwf	5
  3725  0A23  0800               	movf	0,w	;code access
  3726  0A24  0230               	subwf	init@y,w
  3727  0A25  1803               	btfsc	3,0
  3728  0A26  2A39               	goto	l5977
  3729  0A27                     l5971:	
  3730                           
  3731                           ;main.c: 113: dev_map[y] = 0;
  3732  0A27  0830               	movf	init@y,w
  3733  0A28  3E20               	addlw	(low (_dev_map| (0+256)))& (0+255)
  3734  0A29  0086               	movwf	6
  3735  0A2A  3001               	movlw	1	; select bank2/3
  3736  0A2B  0087               	movwf	7
  3737  0A2C  0181               	clrf	1
  3738  0A2D  3001               	movlw	1
  3739  0A2E  00A9               	movwf	??_init
  3740  0A2F  0829               	movf	??_init,w
  3741  0A30  07B0               	addwf	init@y,f
  3742  0A31  300A               	movlw	low (_MAX_Y| (0+32768))
  3743  0A32  0084               	movwf	4
  3744  0A33  3090               	movlw	high (_MAX_Y| (0+32768))
  3745  0A34  0085               	movwf	5
  3746  0A35  0800               	movf	0,w	;code access
  3747  0A36  0230               	subwf	init@y,w
  3748  0A37  1C03               	skipc
  3749  0A38  2A27               	goto	l5971
  3750  0A39                     l5977:	
  3751                           
  3752                           ;main.c: 114: }
  3753                           ;main.c: 117: for (i=0; i<4; i++) cmd_buf[i][0] = '\0';
  3754  0A39  01B1               	clrf	init@i
  3755  0A3A  3004               	movlw	4
  3756  0A3B  0231               	subwf	init@i,w
  3757  0A3C  1803               	btfsc	3,0
  3758  0A3D  2A60               	goto	l5989
  3759  0A3E                     l5983:	
  3760  0A3E  0831               	movf	init@i,w
  3761  0A3F  00A9               	movwf	??_init
  3762  0A40  01AA               	clrf	??_init+1
  3763  0A41  0829               	movf	??_init,w
  3764  0A42  00A0               	movwf	___wmul@multiplier
  3765  0A43  082A               	movf	??_init+1,w
  3766  0A44  00A1               	movwf	___wmul@multiplier+1
  3767  0A45  3030               	movlw	48
  3768  0A46  00A2               	movwf	___wmul@multiplicand
  3769  0A47  3000               	movlw	0
  3770  0A48  00A3               	movwf	___wmul@multiplicand+1
  3771  0A49  3193  2362  318A   	fcall	___wmul
  3772  0A4C  3030               	movlw	48
  3773  0A4D  0020               	movlb	0	; select bank0
  3774  0A4E  00AB               	movwf	??_init+2
  3775  0A4F  3023               	movlw	35
  3776  0A50  00AC               	movwf	??_init+3
  3777  0A51  0820               	movf	?___wmul,w
  3778  0A52  072B               	addwf	??_init+2,w
  3779  0A53  0086               	movwf	6
  3780  0A54  0821               	movf	?___wmul+1,w
  3781  0A55  3D2C               	addwfc	??_init+3,w
  3782  0A56  0087               	movwf	7
  3783  0A57  0181               	clrf	1
  3784  0A58  3001               	movlw	1
  3785  0A59  00A9               	movwf	??_init
  3786  0A5A  0829               	movf	??_init,w
  3787  0A5B  07B1               	addwf	init@i,f
  3788  0A5C  3004               	movlw	4
  3789  0A5D  0231               	subwf	init@i,w
  3790  0A5E  1C03               	skipc
  3791  0A5F  2A3E               	goto	l5983
  3792  0A60                     l5989:	
  3793                           
  3794                           ;main.c: 120: for (i=0; i<28; i++) {
  3795  0A60  01B1               	clrf	init@i
  3796  0A61                     L1:	
  3797  0A61  301C               	movlw	28
  3798  0A62  0231               	subwf	init@i,w
  3799  0A63  1803               	btfsc	3,0
  3800  0A64  0008               	return
  3801                           
  3802                           ;main.c: 121: dev_addr = DATAEE_ReadByte(1+i+1);
  3803  0A65  0831               	movf	init@i,w
  3804  0A66  3E02               	addlw	2
  3805  0A67  3192  2228  318A   	fcall	_DATAEE_ReadByte
  3806  0A6A  0020               	movlb	0	; select bank0
  3807  0A6B  00A9               	movwf	??_init
  3808  0A6C  0829               	movf	??_init,w
  3809  0A6D  00AF               	movwf	init@dev_addr
  3810                           
  3811                           ;main.c: 122: schedule[i/4][i%4] = dev_addr;
  3812  0A6E  082F               	movf	init@dev_addr,w
  3813  0A6F  00A9               	movwf	??_init
  3814  0A70  3004               	movlw	4
  3815  0A71  00A0               	movwf	___awdiv@divisor
  3816  0A72  3000               	movlw	0
  3817  0A73  00A1               	movwf	___awdiv@divisor+1
  3818  0A74  0831               	movf	init@i,w
  3819  0A75  00AA               	movwf	??_init+1
  3820  0A76  01AB               	clrf	??_init+2
  3821  0A77  082A               	movf	??_init+1,w
  3822  0A78  00A2               	movwf	___awdiv@dividend
  3823  0A79  082B               	movf	??_init+2,w
  3824  0A7A  00A3               	movwf	___awdiv@dividend+1
  3825  0A7B  3188  2058  318A   	fcall	___awdiv
  3826  0A7E  0020               	movlb	0	; select bank0
  3827  0A7F  0820               	movf	?___awdiv,w
  3828  0A80  00AC               	movwf	??_init+3
  3829  0A81  3002               	movlw	2
  3830  0A82                     u7065:	
  3831  0A82  35AC               	lslf	??_init+3,f
  3832  0A83  0B89               	decfsz	9,f
  3833  0A84  2A82               	goto	u7065
  3834  0A85  30A0               	movlw	(low (_schedule| (0+256)))& (0+255)
  3835  0A86  072C               	addwf	??_init+3,w
  3836  0A87  00AD               	movwf	??_init+4
  3837  0A88  0831               	movf	init@i,w
  3838  0A89  3903               	andlw	3
  3839  0A8A  072D               	addwf	??_init+4,w
  3840  0A8B  00AE               	movwf	??_init+5
  3841  0A8C  082E               	movf	??_init+5,w
  3842  0A8D  0086               	movwf	6
  3843  0A8E  3001               	movlw	1	; select bank3/4
  3844  0A8F  0087               	movwf	7
  3845  0A90  0829               	movf	??_init,w
  3846  0A91  0081               	movwf	1
  3847  0A92  3001               	movlw	1
  3848  0A93  00A9               	movwf	??_init
  3849  0A94  0829               	movf	??_init,w
  3850  0A95  07B1               	addwf	init@i,f
  3851  0A96  2A61               	goto	L1
  3852  0A97                     __end_of_init:	
  3853                           
  3854                           	psect	text2
  3855  12A1                     __ptext2:	
  3856 ;; *************** function _SYSTEM_Initialize *****************
  3857 ;; Defined at:
  3858 ;;		line 69 in file "mcc_generated_files/mcc.c"
  3859 ;; Parameters:    Size  Location     Type
  3860 ;;		None
  3861 ;; Auto vars:     Size  Location     Type
  3862 ;;		None
  3863 ;; Return value:  Size  Location     Type
  3864 ;;                  1    wreg      void 
  3865 ;; Registers used:
  3866 ;;		wreg, status,2, status,0, pclath, cstack
  3867 ;; Tracked objects:
  3868 ;;		On entry : 0/0
  3869 ;;		On exit  : 0/0
  3870 ;;		Unchanged: 0/0
  3871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3873 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3875 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3876 ;;Total ram usage:        0 bytes
  3877 ;; Hardware stack levels used:    1
  3878 ;; Hardware stack levels required when called:    4
  3879 ;; This function calls:
  3880 ;;		_EUSART_Initialize
  3881 ;;		_I2C1_Initialize
  3882 ;;		_OSCILLATOR_Initialize
  3883 ;;		_PIN_MANAGER_Initialize
  3884 ;;		_TMR0_Initialize
  3885 ;;		_WDT_Initialize
  3886 ;; This function is called by:
  3887 ;;		_main
  3888 ;; This function uses a non-reentrant model
  3889 ;;
  3890                           
  3891                           
  3892                           ;psect for function _SYSTEM_Initialize
  3893  12A1                     _SYSTEM_Initialize:	
  3894                           
  3895                           ;mcc.c: 72: PIN_MANAGER_Initialize();
  3896                           
  3897                           ;incstack = 0
  3898                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3899  12A1  3193  239A  3192   	fcall	_PIN_MANAGER_Initialize
  3900                           
  3901                           ;mcc.c: 73: OSCILLATOR_Initialize();
  3902  12A4  3191  21F8  3192   	fcall	_OSCILLATOR_Initialize
  3903                           
  3904                           ;mcc.c: 74: WDT_Initialize();
  3905  12A7  3191  21EE  3192   	fcall	_WDT_Initialize
  3906                           
  3907                           ;mcc.c: 75: I2C1_Initialize();
  3908  12AA  3193  237E  3192   	fcall	_I2C1_Initialize
  3909                           
  3910                           ;mcc.c: 76: TMR0_Initialize();
  3911  12AD  3192  2211  3192   	fcall	_TMR0_Initialize
  3912                           
  3913                           ;mcc.c: 77: EUSART_Initialize();
  3914  12B0  3192  22F5         	fcall	_EUSART_Initialize
  3915  12B2  0008               	return
  3916  12B3                     __end_of_SYSTEM_Initialize:	
  3917                           
  3918                           	psect	text3
  3919  11EE                     __ptext3:	
  3920 ;; *************** function _WDT_Initialize *****************
  3921 ;; Defined at:
  3922 ;;		line 92 in file "mcc_generated_files/mcc.c"
  3923 ;; Parameters:    Size  Location     Type
  3924 ;;		None
  3925 ;; Auto vars:     Size  Location     Type
  3926 ;;		None
  3927 ;; Return value:  Size  Location     Type
  3928 ;;                  1    wreg      void 
  3929 ;; Registers used:
  3930 ;;		wreg
  3931 ;; Tracked objects:
  3932 ;;		On entry : 0/0
  3933 ;;		On exit  : 0/0
  3934 ;;		Unchanged: 0/0
  3935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3939 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3940 ;;Total ram usage:        0 bytes
  3941 ;; Hardware stack levels used:    1
  3942 ;; Hardware stack levels required when called:    3
  3943 ;; This function calls:
  3944 ;;		Nothing
  3945 ;; This function is called by:
  3946 ;;		_SYSTEM_Initialize
  3947 ;; This function uses a non-reentrant model
  3948 ;;
  3949                           
  3950                           
  3951                           ;psect for function _WDT_Initialize
  3952  11EE                     _WDT_Initialize:	
  3953                           
  3954                           ;mcc.c: 95: WDTCON = 0x16;
  3955                           
  3956                           ;incstack = 0
  3957                           ; Regs used in _WDT_Initialize: [wreg]
  3958  11EE  3016               	movlw	22
  3959  11EF  0021               	movlb	1	; select bank1
  3960  11F0  0097               	movwf	23	;volatile
  3961  11F1  0008               	return
  3962  11F2                     __end_of_WDT_Initialize:	
  3963                           
  3964                           	psect	text4
  3965  1211                     __ptext4:	
  3966 ;; *************** function _TMR0_Initialize *****************
  3967 ;; Defined at:
  3968 ;;		line 62 in file "mcc_generated_files/tmr0.c"
  3969 ;; Parameters:    Size  Location     Type
  3970 ;;		None
  3971 ;; Auto vars:     Size  Location     Type
  3972 ;;		None
  3973 ;; Return value:  Size  Location     Type
  3974 ;;                  1    wreg      void 
  3975 ;; Registers used:
  3976 ;;		wreg, status,2
  3977 ;; Tracked objects:
  3978 ;;		On entry : 0/0
  3979 ;;		On exit  : 0/0
  3980 ;;		Unchanged: 0/0
  3981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3983 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3985 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3986 ;;Total ram usage:        0 bytes
  3987 ;; Hardware stack levels used:    1
  3988 ;; Hardware stack levels required when called:    3
  3989 ;; This function calls:
  3990 ;;		Nothing
  3991 ;; This function is called by:
  3992 ;;		_SYSTEM_Initialize
  3993 ;; This function uses a non-reentrant model
  3994 ;;
  3995                           
  3996                           
  3997                           ;psect for function _TMR0_Initialize
  3998  1211                     _TMR0_Initialize:	
  3999                           
  4000                           ;tmr0.c: 67: OPTION_REG = (OPTION_REG & 0xC0) | 0xD7 & 0x3F;
  4001                           
  4002                           ;incstack = 0
  4003                           ; Regs used in _TMR0_Initialize: [wreg+status,2]
  4004  1211  0021               	movlb	1	; select bank1
  4005  1212  0815               	movf	21,w	;volatile
  4006  1213  39C0               	andlw	192
  4007  1214  3817               	iorlw	23
  4008  1215  0095               	movwf	21	;volatile
  4009                           
  4010                           ;tmr0.c: 70: TMR0 = 0x00;
  4011  1216  0020               	movlb	0	; select bank0
  4012  1217  0195               	clrf	21	;volatile
  4013                           
  4014                           ;tmr0.c: 73: timer0ReloadVal= 0;
  4015  1218  0021               	movlb	1	; select bank1
  4016  1219  01E6               	clrf	_timer0ReloadVal^(0+128)	;volatile
  4017                           
  4018                           ;tmr0.c: 76: INTCONbits.TMR0IF = 0;
  4019  121A  110B               	bcf	11,2	;volatile
  4020  121B  0008               	return
  4021  121C                     __end_of_TMR0_Initialize:	
  4022                           
  4023                           	psect	text5
  4024  139A                     __ptext5:	
  4025 ;; *************** function _PIN_MANAGER_Initialize *****************
  4026 ;; Defined at:
  4027 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
  4028 ;; Parameters:    Size  Location     Type
  4029 ;;		None
  4030 ;; Auto vars:     Size  Location     Type
  4031 ;;		None
  4032 ;; Return value:  Size  Location     Type
  4033 ;;                  1    wreg      void 
  4034 ;; Registers used:
  4035 ;;		wreg, status,2
  4036 ;; Tracked objects:
  4037 ;;		On entry : 0/0
  4038 ;;		On exit  : 0/0
  4039 ;;		Unchanged: 0/0
  4040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4042 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4044 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4045 ;;Total ram usage:        0 bytes
  4046 ;; Hardware stack levels used:    1
  4047 ;; Hardware stack levels required when called:    3
  4048 ;; This function calls:
  4049 ;;		Nothing
  4050 ;; This function is called by:
  4051 ;;		_SYSTEM_Initialize
  4052 ;; This function uses a non-reentrant model
  4053 ;;
  4054                           
  4055                           
  4056                           ;psect for function _PIN_MANAGER_Initialize
  4057  139A                     _PIN_MANAGER_Initialize:	
  4058                           
  4059                           ;pin_manager.c: 56: LATA = 0x00;
  4060                           
  4061                           ;incstack = 0
  4062                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  4063  139A  0022               	movlb	2	; select bank2
  4064  139B  018C               	clrf	12	;volatile
  4065                           
  4066                           ;pin_manager.c: 57: LATB = 0x00;
  4067  139C  018D               	clrf	13	;volatile
  4068                           
  4069                           ;pin_manager.c: 58: LATC = 0x00;
  4070  139D  018E               	clrf	14	;volatile
  4071                           
  4072                           ;pin_manager.c: 63: TRISA = 0x3F;
  4073  139E  303F               	movlw	63
  4074  139F  0021               	movlb	1	; select bank1
  4075  13A0  008C               	movwf	12	;volatile
  4076                           
  4077                           ;pin_manager.c: 64: TRISB = 0xF0;
  4078  13A1  30F0               	movlw	240
  4079  13A2  008D               	movwf	13	;volatile
  4080                           
  4081                           ;pin_manager.c: 65: TRISC = 0x7F;
  4082  13A3  307F               	movlw	127
  4083  13A4  008E               	movwf	14	;volatile
  4084                           
  4085                           ;pin_manager.c: 70: ANSELC = 0x4F;
  4086  13A5  304F               	movlw	79
  4087  13A6  0023               	movlb	3	; select bank3
  4088  13A7  008E               	movwf	14	;volatile
  4089                           
  4090                           ;pin_manager.c: 71: ANSELB = 0x20;
  4091  13A8  3020               	movlw	32
  4092  13A9  008D               	movwf	13	;volatile
  4093                           
  4094                           ;pin_manager.c: 72: ANSELA = 0x17;
  4095  13AA  3017               	movlw	23
  4096  13AB  008C               	movwf	12	;volatile
  4097                           
  4098                           ;pin_manager.c: 77: WPUB = 0x00;
  4099  13AC  0024               	movlb	4	; select bank4
  4100  13AD  018D               	clrf	13	;volatile
  4101                           
  4102                           ;pin_manager.c: 78: WPUA = 0x3F;
  4103  13AE  303F               	movlw	63
  4104  13AF  008C               	movwf	12	;volatile
  4105                           
  4106                           ;pin_manager.c: 79: WPUC = 0xBF;
  4107  13B0  30BF               	movlw	191
  4108  13B1  008E               	movwf	14	;volatile
  4109                           
  4110                           ;pin_manager.c: 80: OPTION_REGbits.nWPUEN = 0;
  4111  13B2  0021               	movlb	1	; select bank1
  4112  13B3  1395               	bcf	21,7	;volatile
  4113                           
  4114                           ;pin_manager.c: 86: APFCON1 = 0x00;
  4115  13B4  0022               	movlb	2	; select bank2
  4116  13B5  019E               	clrf	30	;volatile
  4117                           
  4118                           ;pin_manager.c: 87: APFCON0 = 0x84;
  4119  13B6  3084               	movlw	132
  4120  13B7  009D               	movwf	29	;volatile
  4121  13B8  0008               	return
  4122  13B9                     __end_of_PIN_MANAGER_Initialize:	
  4123                           
  4124                           	psect	text6
  4125  11F8                     __ptext6:	
  4126 ;; *************** function _OSCILLATOR_Initialize *****************
  4127 ;; Defined at:
  4128 ;;		line 80 in file "mcc_generated_files/mcc.c"
  4129 ;; Parameters:    Size  Location     Type
  4130 ;;		None
  4131 ;; Auto vars:     Size  Location     Type
  4132 ;;		None
  4133 ;; Return value:  Size  Location     Type
  4134 ;;                  1    wreg      void 
  4135 ;; Registers used:
  4136 ;;		wreg, status,2
  4137 ;; Tracked objects:
  4138 ;;		On entry : 0/0
  4139 ;;		On exit  : 0/0
  4140 ;;		Unchanged: 0/0
  4141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4143 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4145 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4146 ;;Total ram usage:        0 bytes
  4147 ;; Hardware stack levels used:    1
  4148 ;; Hardware stack levels required when called:    3
  4149 ;; This function calls:
  4150 ;;		Nothing
  4151 ;; This function is called by:
  4152 ;;		_SYSTEM_Initialize
  4153 ;; This function uses a non-reentrant model
  4154 ;;
  4155                           
  4156                           
  4157                           ;psect for function _OSCILLATOR_Initialize
  4158  11F8                     _OSCILLATOR_Initialize:	
  4159                           
  4160                           ;mcc.c: 83: OSCCON = 0x70;
  4161                           
  4162                           ;incstack = 0
  4163                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  4164  11F8  3070               	movlw	112
  4165  11F9  0021               	movlb	1	; select bank1
  4166  11FA  0099               	movwf	25	;volatile
  4167                           
  4168                           ;mcc.c: 85: OSCTUNE = 0x00;
  4169  11FB  0198               	clrf	24	;volatile
  4170  11FC                     l355:	
  4171                           ;mcc.c: 88: {
  4172                           
  4173                           ;mcc.c: 87: while(PLLR == 0)
  4174                           
  4175  11FC  1B1A               	btfsc	26,6	;volatile
  4176  11FD  0008               	return
  4177  11FE  29FC               	goto	l355
  4178  11FF                     __end_of_OSCILLATOR_Initialize:	
  4179                           
  4180                           	psect	text7
  4181  137E                     __ptext7:	
  4182 ;; *************** function _I2C1_Initialize *****************
  4183 ;; Defined at:
  4184 ;;		line 198 in file "mcc_generated_files/i2c1.c"
  4185 ;; Parameters:    Size  Location     Type
  4186 ;;		None
  4187 ;; Auto vars:     Size  Location     Type
  4188 ;;		None
  4189 ;; Return value:  Size  Location     Type
  4190 ;;                  1    wreg      void 
  4191 ;; Registers used:
  4192 ;;		wreg, status,2
  4193 ;; Tracked objects:
  4194 ;;		On entry : 0/0
  4195 ;;		On exit  : 0/0
  4196 ;;		Unchanged: 0/0
  4197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4198 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4199 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4200 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4201 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4202 ;;Total ram usage:        1 bytes
  4203 ;; Hardware stack levels used:    1
  4204 ;; Hardware stack levels required when called:    3
  4205 ;; This function calls:
  4206 ;;		Nothing
  4207 ;; This function is called by:
  4208 ;;		_SYSTEM_Initialize
  4209 ;; This function uses a non-reentrant model
  4210 ;;
  4211                           
  4212                           
  4213                           ;psect for function _I2C1_Initialize
  4214  137E                     _I2C1_Initialize:	
  4215                           
  4216                           ;i2c1.c: 200: i2c1_object.pTrHead = i2c1_tr_queue;
  4217                           
  4218                           ;incstack = 0
  4219                           ; Regs used in _I2C1_Initialize: [wreg+status,2]
  4220  137E  3055               	movlw	(low (_i2c1_tr_queue| (0+256)))& (0+255)
  4221  137F  0020               	movlb	0	; select bank0
  4222  1380  00A0               	movwf	??_I2C1_Initialize
  4223  1381  0820               	movf	??_I2C1_Initialize,w
  4224  1382  0021               	movlb	1	; select bank1
  4225  1383  00DA               	movwf	(low ((_i2c1_object| 0+1)))^(0+128)
  4226                           
  4227                           ;i2c1.c: 201: i2c1_object.pTrTail = i2c1_tr_queue;
  4228  1384  3055               	movlw	(low (_i2c1_tr_queue| (0+256)))& (0+255)
  4229  1385  0020               	movlb	0	; select bank0
  4230  1386  00A0               	movwf	??_I2C1_Initialize
  4231  1387  0820               	movf	??_I2C1_Initialize,w
  4232  1388  0021               	movlb	1	; select bank1
  4233  1389  00D9               	movwf	_i2c1_object^(0+128)
  4234                           
  4235                           ;i2c1.c: 202: i2c1_object.trStatus.s.empty = 1;
  4236  138A  14DB               	bsf	(_i2c1_object^(0+128)+2),1
  4237                           
  4238                           ;i2c1.c: 203: i2c1_object.trStatus.s.full = 0;
  4239  138B  105B               	bcf	(_i2c1_object^(0+128)+2),0
  4240                           
  4241                           ;i2c1.c: 205: i2c1_object.i2cErrors = 0;
  4242  138C  01DD               	clrf	(_i2c1_object^(0+128)+4)
  4243                           
  4244                           ;i2c1.c: 208: SSP1STAT = 0x80;
  4245  138D  3080               	movlw	128
  4246  138E  0024               	movlb	4	; select bank4
  4247  138F  0094               	movwf	20	;volatile
  4248                           
  4249                           ;i2c1.c: 210: SSP1CON1 = 0x28;
  4250  1390  3028               	movlw	40
  4251  1391  0095               	movwf	21	;volatile
  4252                           
  4253                           ;i2c1.c: 212: SSP1CON3 = 0x00;
  4254  1392  0197               	clrf	23	;volatile
  4255                           
  4256                           ;i2c1.c: 214: SSP1ADD = 0x4F;
  4257  1393  304F               	movlw	79
  4258  1394  0092               	movwf	18	;volatile
  4259                           
  4260                           ;i2c1.c: 218: PIR1bits.SSP1IF = 0;
  4261  1395  0020               	movlb	0	; select bank0
  4262  1396  1191               	bcf	17,3	;volatile
  4263                           
  4264                           ;i2c1.c: 220: PIE1bits.SSP1IE = 1;
  4265  1397  0021               	movlb	1	; select bank1
  4266  1398  1591               	bsf	17,3	;volatile
  4267  1399  0008               	return
  4268  139A                     __end_of_I2C1_Initialize:	
  4269                           
  4270                           	psect	text8
  4271  12F5                     __ptext8:	
  4272 ;; *************** function _EUSART_Initialize *****************
  4273 ;; Defined at:
  4274 ;;		line 75 in file "mcc_generated_files/eusart.c"
  4275 ;; Parameters:    Size  Location     Type
  4276 ;;		None
  4277 ;; Auto vars:     Size  Location     Type
  4278 ;;		None
  4279 ;; Return value:  Size  Location     Type
  4280 ;;                  1    wreg      void 
  4281 ;; Registers used:
  4282 ;;		wreg, status,2
  4283 ;; Tracked objects:
  4284 ;;		On entry : 0/0
  4285 ;;		On exit  : 0/0
  4286 ;;		Unchanged: 0/0
  4287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4289 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4290 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4291 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4292 ;;Total ram usage:        1 bytes
  4293 ;; Hardware stack levels used:    1
  4294 ;; Hardware stack levels required when called:    3
  4295 ;; This function calls:
  4296 ;;		Nothing
  4297 ;; This function is called by:
  4298 ;;		_SYSTEM_Initialize
  4299 ;; This function uses a non-reentrant model
  4300 ;;
  4301                           
  4302                           
  4303                           ;psect for function _EUSART_Initialize
  4304  12F5                     _EUSART_Initialize:	
  4305                           
  4306                           ;eusart.c: 78: PIE1bits.RCIE = 0;
  4307                           
  4308                           ;incstack = 0
  4309                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  4310  12F5  0021               	movlb	1	; select bank1
  4311  12F6  1291               	bcf	17,5	;volatile
  4312                           
  4313                           ;eusart.c: 79: PIE1bits.TXIE = 0;
  4314  12F7  1211               	bcf	17,4	;volatile
  4315                           
  4316                           ;eusart.c: 84: BAUDCON = 0x08;
  4317  12F8  3008               	movlw	8
  4318  12F9  0023               	movlb	3	; select bank3
  4319  12FA  009F               	movwf	31	;volatile
  4320                           
  4321                           ;eusart.c: 87: RCSTA = 0x90;
  4322  12FB  3090               	movlw	144
  4323  12FC  009D               	movwf	29	;volatile
  4324                           
  4325                           ;eusart.c: 90: TXSTA = 0x24;
  4326  12FD  3024               	movlw	36
  4327  12FE  009E               	movwf	30	;volatile
  4328                           
  4329                           ;eusart.c: 93: SPBRGL = 0x44;
  4330  12FF  3044               	movlw	68
  4331  1300  009B               	movwf	27	;volatile
  4332                           
  4333                           ;eusart.c: 96: SPBRGH = 0x00;
  4334  1301  019C               	clrf	28	;volatile
  4335                           
  4336                           ;eusart.c: 100: eusartTxHead = 0;
  4337  1302  01F4               	clrf	_eusartTxHead	;volatile
  4338                           
  4339                           ;eusart.c: 101: eusartTxTail = 0;
  4340  1303  01F3               	clrf	_eusartTxTail	;volatile
  4341                           
  4342                           ;eusart.c: 102: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
  4343  1304  3040               	movlw	64
  4344  1305  0020               	movlb	0	; select bank0
  4345  1306  00A0               	movwf	??_EUSART_Initialize
  4346  1307  0820               	movf	??_EUSART_Initialize,w
  4347  1308  00F2               	movwf	_eusartTxBufferRemaining	;volatile
  4348                           
  4349                           ;eusart.c: 104: eusartRxHead = 0;
  4350  1309  01F1               	clrf	_eusartRxHead	;volatile
  4351                           
  4352                           ;eusart.c: 105: eusartRxTail = 0;
  4353  130A  01F0               	clrf	_eusartRxTail	;volatile
  4354                           
  4355                           ;eusart.c: 106: eusartRxCount = 0;
  4356  130B  0021               	movlb	1	; select bank1
  4357  130C  01E7               	clrf	_eusartRxCount^(0+128)	;volatile
  4358                           
  4359                           ;eusart.c: 109: PIE1bits.RCIE = 1;
  4360  130D  1691               	bsf	17,5	;volatile
  4361  130E  0008               	return
  4362  130F                     __end_of_EUSART_Initialize:	
  4363                           
  4364                           	psect	text9
  4365  0800                     __ptext9:	
  4366 ;; *************** function _PROTOCOL_Set_Extension_Handler *****************
  4367 ;; Defined at:
  4368 ;;		line 80 in file "protocol.c"
  4369 ;; Parameters:    Size  Location     Type
  4370 ;;  extension_ha    2    0[BANK0 ] PTR void 
  4371 ;;		 -> command_handler(1), 
  4372 ;; Auto vars:     Size  Location     Type
  4373 ;;		None
  4374 ;; Return value:  Size  Location     Type
  4375 ;;                  1    wreg      void 
  4376 ;; Registers used:
  4377 ;;		wreg
  4378 ;; Tracked objects:
  4379 ;;		On entry : 0/0
  4380 ;;		On exit  : 0/0
  4381 ;;		Unchanged: 0/0
  4382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4383 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4384 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4385 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4386 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4387 ;;Total ram usage:        2 bytes
  4388 ;; Hardware stack levels used:    1
  4389 ;; Hardware stack levels required when called:    3
  4390 ;; This function calls:
  4391 ;;		Nothing
  4392 ;; This function is called by:
  4393 ;;		_main
  4394 ;; This function uses a non-reentrant model
  4395 ;;
  4396                           
  4397                           
  4398                           ;psect for function _PROTOCOL_Set_Extension_Handler
  4399  0800                     _PROTOCOL_Set_Extension_Handler:	
  4400                           
  4401                           ;protocol.c: 81: PROTOCOL_Extension_Handler = extension_handler;
  4402                           
  4403                           ;incstack = 0
  4404                           ; Regs used in _PROTOCOL_Set_Extension_Handler: [wreg]
  4405  0800  0020               	movlb	0	; select bank0
  4406  0801  0821               	movf	PROTOCOL_Set_Extension_Handler@extension_handler+1,w
  4407  0802  0022               	movlb	2	; select bank2
  4408  0803  00AB               	movwf	(_PROTOCOL_Extension_Handler+1)^(0+256)
  4409  0804  0020               	movlb	0	; select bank0
  4410  0805  0820               	movf	PROTOCOL_Set_Extension_Handler@extension_handler,w
  4411  0806  0022               	movlb	2	; select bank2
  4412  0807  00AA               	movwf	_PROTOCOL_Extension_Handler^(0+256)
  4413  0808  0008               	return
  4414  0809                     __end_of_PROTOCOL_Set_Extension_Handler:	
  4415                           
  4416                           	psect	text10
  4417  0C94                     __ptext10:	
  4418 ;; *************** function _PROTOCOL_Loop *****************
  4419 ;; Defined at:
  4420 ;;		line 131 in file "protocol.c"
  4421 ;; Parameters:    Size  Location     Type
  4422 ;;		None
  4423 ;; Auto vars:     Size  Location     Type
  4424 ;;  device_addre    1   74[BANK0 ] unsigned char 
  4425 ;;  c               1   73[BANK0 ] unsigned char 
  4426 ;; Return value:  Size  Location     Type
  4427 ;;                  1    wreg      void 
  4428 ;; Registers used:
  4429 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4430 ;; Tracked objects:
  4431 ;;		On entry : 0/0
  4432 ;;		On exit  : 0/0
  4433 ;;		Unchanged: 0/0
  4434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4436 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4437 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4438 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4439 ;;Total ram usage:        4 bytes
  4440 ;; Hardware stack levels used:    1
  4441 ;; Hardware stack levels required when called:   11
  4442 ;; This function calls:
  4443 ;;		Absolute function
  4444 ;;		_EUSART_Read
  4445 ;;		_PROTOCOL_EXT
  4446 ;;		_PROTOCOL_Read_Device_Address
  4447 ;;		_PROTOCOL_SAV
  4448 ;;		_PROTOCOL_SET
  4449 ;;		_PROTOCOL_STA
  4450 ;;		_PROTOCOL_STP
  4451 ;;		_PROTOCOL_Write_Device_Address
  4452 ;;		_TMR0_HasOverflowOccured
  4453 ;;		_atoi
  4454 ;;		_inv_handler
  4455 ;;		_printf
  4456 ;;		_strncmp
  4457 ;; This function is called by:
  4458 ;;		_main
  4459 ;; This function uses a non-reentrant model
  4460 ;;
  4461                           
  4462                           
  4463                           ;psect for function _PROTOCOL_Loop
  4464  0C94                     _PROTOCOL_Loop:	
  4465  0C94                     l836:	
  4466                           ;incstack = 0
  4467                           ; Regs used in _PROTOCOL_Loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4468                           ;protocol.c: 132: uint8_t device_address;
  4469                           ;protocol.c: 133: uint8_t c;
  4470                           ;protocol.c: 134: while (1) {
  4471                           
  4472                           
  4473                           ;protocol.c: 135: tmr_overflow = TMR0_HasOverflowOccured();
  4474  0C94  3191  21EA  318C   	fcall	_TMR0_HasOverflowOccured
  4475  0C97  0020               	movlb	0	; select bank0
  4476  0C98  00E7               	movwf	??_PROTOCOL_Loop
  4477  0C99  0867               	movf	??_PROTOCOL_Loop,w
  4478  0C9A  0022               	movlb	2	; select bank2
  4479  0C9B  00BA               	movwf	_tmr_overflow^(0+256)
  4480                           
  4481                           ;protocol.c: 136: if (tmr_overflow) {
  4482  0C9C  083A               	movf	_tmr_overflow^(0+256),w
  4483  0C9D  1903               	btfsc	3,2
  4484  0C9E  2CC4               	goto	l6043
  4485                           
  4486                           ;protocol.c: 137: TMR0IF = 0;
  4487  0C9F  110B               	bcf	11,2	;volatile
  4488                           
  4489                           ;protocol.c: 138: if (PROTOCOL_Inv_Handler && (++tmr_cnt >= value)) {
  4490  0CA0  0828               	movf	_PROTOCOL_Inv_Handler^(0+256),w
  4491  0CA1  0429               	iorwf	(_PROTOCOL_Inv_Handler+1)^(0+256),w
  4492  0CA2  1903               	btfsc	3,2
  4493  0CA3  2CC4               	goto	l6043
  4494  0CA4  3001               	movlw	1
  4495  0CA5  0020               	movlb	0	; select bank0
  4496  0CA6  00E7               	movwf	??_PROTOCOL_Loop
  4497  0CA7  0867               	movf	??_PROTOCOL_Loop,w
  4498  0CA8  0022               	movlb	2	; select bank2
  4499  0CA9  07BB               	addwf	_tmr_cnt^(0+256),f
  4500  0CAA  0021               	movlb	1	; select bank1
  4501  0CAB  0860               	movf	_value^(0+128),w
  4502  0CAC  0022               	movlb	2	; select bank2
  4503  0CAD  023B               	subwf	_tmr_cnt^(0+256),w
  4504  0CAE  1C03               	skipc
  4505  0CAF  2CC4               	goto	l6043
  4506                           
  4507                           ;protocol.c: 139: tmr_cnt = 0;
  4508  0CB0  01BB               	clrf	_tmr_cnt^(0+256)
  4509                           
  4510                           ;protocol.c: 140: if (++sec_cnt >= tmr_scaler) {
  4511  0CB1  3001               	movlw	1
  4512  0CB2  0020               	movlb	0	; select bank0
  4513  0CB3  00E7               	movwf	??_PROTOCOL_Loop
  4514  0CB4  0867               	movf	??_PROTOCOL_Loop,w
  4515  0CB5  0022               	movlb	2	; select bank2
  4516  0CB6  07BC               	addwf	_sec_cnt^(0+256),f
  4517  0CB7  085E               	movf	_tmr_scaler^(0+256),w
  4518  0CB8  023C               	subwf	_sec_cnt^(0+256),w
  4519  0CB9  1C03               	skipc
  4520  0CBA  2CC4               	goto	l6043
  4521                           
  4522                           ;protocol.c: 141: if (running) invoked = 1;
  4523  0CBB  0021               	movlb	1	; select bank1
  4524  0CBC  0865               	movf	_running^(0+128),w
  4525  0CBD  1903               	btfsc	3,2
  4526  0CBE  2CC2               	goto	l6041
  4527  0CBF  0022               	movlb	2	; select bank2
  4528  0CC0  01BD               	clrf	_invoked^(0+256)
  4529  0CC1  0ABD               	incf	_invoked^(0+256),f
  4530  0CC2                     l6041:	
  4531                           
  4532                           ;protocol.c: 142: sec_cnt = 0;
  4533  0CC2  0022               	movlb	2	; select bank2
  4534  0CC3  01BC               	clrf	_sec_cnt^(0+256)
  4535  0CC4                     l6043:	
  4536                           
  4537                           ;protocol.c: 143: }
  4538                           ;protocol.c: 144: }
  4539                           ;protocol.c: 145: }
  4540                           ;protocol.c: 146: if (invoked && PROTOCOL_Inv_Handler) {
  4541  0CC4  083D               	movf	_invoked^(0+256),w
  4542  0CC5  1903               	btfsc	3,2
  4543  0CC6  2CD2               	goto	l6053
  4544  0CC7  0828               	movf	_PROTOCOL_Inv_Handler^(0+256),w
  4545  0CC8  0429               	iorwf	(_PROTOCOL_Inv_Handler+1)^(0+256),w
  4546  0CC9  1903               	btfsc	3,2
  4547  0CCA  2CD2               	goto	l6053
  4548                           
  4549                           ;protocol.c: 147: PROTOCOL_Inv_Handler();
  4550  0CCB  0829               	movf	(_PROTOCOL_Inv_Handler+1)^(0+256),w
  4551  0CCC  008A               	movwf	10
  4552  0CCD  0828               	movf	_PROTOCOL_Inv_Handler^(0+256),w
  4553  0CCE  000A               	callw
  4554  0CCF  318C               	pagesel	$
  4555                           
  4556                           ;protocol.c: 148: invoked = 0;
  4557  0CD0  0022               	movlb	2	; select bank2
  4558  0CD1  01BD               	clrf	_invoked^(0+256)
  4559  0CD2                     l6053:	
  4560                           
  4561                           ;protocol.c: 151: if ((eusartRxCount)) {
  4562  0CD2  0021               	movlb	1	; select bank1
  4563  0CD3  0867               	movf	_eusartRxCount^(0+128),w	;volatile
  4564  0CD4  1903               	btfsc	3,2
  4565  0CD5  2C94               	goto	l836
  4566                           
  4567                           ;protocol.c: 152: c = EUSART_Read();
  4568  0CD6  3193  23B9  318C   	fcall	_EUSART_Read
  4569  0CD9  0020               	movlb	0	; select bank0
  4570  0CDA  00E7               	movwf	??_PROTOCOL_Loop
  4571  0CDB  0867               	movf	??_PROTOCOL_Loop,w
  4572  0CDC  00E9               	movwf	PROTOCOL_Loop@c
  4573                           
  4574                           ;protocol.c: 153: buf[cnt++] = c;
  4575  0CDD  0869               	movf	PROTOCOL_Loop@c,w
  4576  0CDE  00E7               	movwf	??_PROTOCOL_Loop
  4577  0CDF  0021               	movlb	1	; select bank1
  4578  0CE0  0861               	movf	_cnt^(0+128),w
  4579  0CE1  3E20               	addlw	(low (_buf| (0+512)))& (0+255)
  4580  0CE2  0086               	movwf	6
  4581  0CE3  3002               	movlw	2	; select bank4/5
  4582  0CE4  0087               	movwf	7
  4583  0CE5  0020               	movlb	0	; select bank0
  4584  0CE6  0867               	movf	??_PROTOCOL_Loop,w
  4585  0CE7  0081               	movwf	1
  4586  0CE8  3001               	movlw	1
  4587  0CE9  00E7               	movwf	??_PROTOCOL_Loop
  4588  0CEA  0867               	movf	??_PROTOCOL_Loop,w
  4589  0CEB  0021               	movlb	1	; select bank1
  4590  0CEC  07E1               	addwf	_cnt^(0+128),f
  4591                           
  4592                           ;protocol.c: 154: if (c == '\n') {
  4593  0CED  300A               	movlw	10
  4594  0CEE  0020               	movlb	0	; select bank0
  4595  0CEF  0669               	xorwf	PROTOCOL_Loop@c,w
  4596  0CF0  1D03               	btfss	3,2
  4597  0CF1  2C94               	goto	l836
  4598                           
  4599                           ;protocol.c: 155: buf[--cnt] = '\0';
  4600  0CF2  3001               	movlw	1
  4601  0CF3  0021               	movlb	1	; select bank1
  4602  0CF4  02E1               	subwf	_cnt^(0+128),f
  4603  0CF5  0861               	movf	_cnt^(0+128),w
  4604  0CF6  3E20               	addlw	(low (_buf| (0+512)))& (0+255)
  4605  0CF7  0086               	movwf	6
  4606  0CF8  3002               	movlw	2	; select bank4/5
  4607  0CF9  0087               	movwf	7
  4608  0CFA  0181               	clrf	1
  4609                           
  4610                           ;protocol.c: 156: cnt = 0;
  4611  0CFB  01E1               	clrf	_cnt^(0+128)
  4612                           
  4613                           ;protocol.c: 157: printf("#%s\n", buf);
  4614  0CFC  3058               	movlw	low (STR_36| (0+32768))
  4615  0CFD  0020               	movlb	0	; select bank0
  4616  0CFE  00AE               	movwf	printf@f
  4617  0CFF  3091               	movlw	high (STR_36| (0+32768))
  4618  0D00  00AF               	movwf	printf@f+1
  4619  0D01  3020               	movlw	low _buf
  4620  0D02  00B0               	movwf	low ((?_printf| 0+2))
  4621  0D03  3002               	movlw	high _buf
  4622  0D04  00B1               	movwf	(low ((?_printf| 0+2))+1)
  4623  0D05  318E  262B  318C   	fcall	_printf
  4624                           
  4625                           ;protocol.c: 158: if (BACKPLANE_SLAVE_ADDRESS != 0x01) {
  4626  0D08  0021               	movlb	1	; select bank1
  4627  0D09  036E               	decf	_BACKPLANE_SLAVE_ADDRESS^(0+128),w
  4628  0D0A  1903               	btfsc	3,2
  4629  0D0B  2D11               	goto	l6073
  4630                           
  4631                           ;protocol.c: 159: PROTOCOL_EXT(buf);
  4632  0D0C  3020               	movlw	(low (_buf| (0+512)))& (0+255)
  4633  0D0D  3192  22B3  318C   	fcall	_PROTOCOL_EXT
  4634                           
  4635                           ;protocol.c: 160: } else if (!strncmp(("WHO"), (buf), 3)) {
  4636  0D10  2C94               	goto	l836
  4637  0D11                     l6073:	
  4638  0D11  3091               	movlw	low (STR_1| (0+32768))
  4639  0D12  0020               	movlb	0	; select bank0
  4640  0D13  00A0               	movwf	strncmp@s1
  4641  0D14  3091               	movlw	high (STR_1| (0+32768))
  4642  0D15  00A1               	movwf	strncmp@s1+1
  4643  0D16  3020               	movlw	low _buf
  4644  0D17  00A2               	movwf	strncmp@s2
  4645  0D18  3002               	movlw	high _buf
  4646  0D19  00A3               	movwf	strncmp@s2+1
  4647  0D1A  3003               	movlw	3
  4648  0D1B  00A4               	movwf	strncmp@len
  4649  0D1C  3000               	movlw	0
  4650  0D1D  00A5               	movwf	strncmp@len+1
  4651  0D1E  3196  264A  318C   	fcall	_strncmp
  4652  0D21  0020               	movlb	0	; select bank0
  4653  0D22  0820               	movf	?_strncmp,w
  4654  0D23  0421               	iorwf	?_strncmp+1,w
  4655  0D24  1D03               	btfss	3,2
  4656  0D25  2D36               	goto	l6077
  4657                           
  4658                           ;protocol.c: 161: printf("$:WHO:%s\n", device_id_);
  4659  0D26  30E8               	movlw	low (STR_38| (0+32768))
  4660  0D27  00AE               	movwf	printf@f
  4661  0D28  3090               	movlw	high (STR_38| (0+32768))
  4662  0D29  00AF               	movwf	printf@f+1
  4663  0D2A  0022               	movlb	2	; select bank2
  4664  0D2B  0827               	movf	(_device_id_+1)^(0+256),w
  4665  0D2C  0020               	movlb	0	; select bank0
  4666  0D2D  00B1               	movwf	(low ((?_printf| 0+2))+1)
  4667  0D2E  0022               	movlb	2	; select bank2
  4668  0D2F  0826               	movf	_device_id_^(0+256),w
  4669  0D30  0020               	movlb	0	; select bank0
  4670  0D31  00B0               	movwf	low ((?_printf| 0+2))
  4671  0D32  318E  262B  318C   	fcall	_printf
  4672                           
  4673                           ;protocol.c: 162: } else if (!strncmp(("SAV"), (buf), 3)) {
  4674  0D35  2C94               	goto	l836
  4675  0D36                     l6077:	
  4676  0D36  30A9               	movlw	low (STR_4| (0+32768))
  4677  0D37  0020               	movlb	0	; select bank0
  4678  0D38  00A0               	movwf	strncmp@s1
  4679  0D39  3091               	movlw	high (STR_4| (0+32768))
  4680  0D3A  00A1               	movwf	strncmp@s1+1
  4681  0D3B  3020               	movlw	low _buf
  4682  0D3C  00A2               	movwf	strncmp@s2
  4683  0D3D  3002               	movlw	high _buf
  4684  0D3E  00A3               	movwf	strncmp@s2+1
  4685  0D3F  3003               	movlw	3
  4686  0D40  00A4               	movwf	strncmp@len
  4687  0D41  3000               	movlw	0
  4688  0D42  00A5               	movwf	strncmp@len+1
  4689  0D43  3196  264A  318C   	fcall	_strncmp
  4690  0D46  0020               	movlb	0	; select bank0
  4691  0D47  0820               	movf	?_strncmp,w
  4692  0D48  0421               	iorwf	?_strncmp+1,w
  4693  0D49  1D03               	btfss	3,2
  4694  0D4A  2D4F               	goto	l6081
  4695                           
  4696                           ;protocol.c: 163: PROTOCOL_SAV();
  4697  0D4B  3192  2207  318C   	fcall	_PROTOCOL_SAV
  4698                           
  4699                           ;protocol.c: 164: } else if (!strncmp(("STA"), (buf), 3)) {
  4700  0D4E  2C94               	goto	l836
  4701  0D4F                     l6081:	
  4702  0D4F  3075               	movlw	low (STR_5| (0+32768))
  4703  0D50  0020               	movlb	0	; select bank0
  4704  0D51  00A0               	movwf	strncmp@s1
  4705  0D52  3091               	movlw	high (STR_5| (0+32768))
  4706  0D53  00A1               	movwf	strncmp@s1+1
  4707  0D54  3020               	movlw	low _buf
  4708  0D55  00A2               	movwf	strncmp@s2
  4709  0D56  3002               	movlw	high _buf
  4710  0D57  00A3               	movwf	strncmp@s2+1
  4711  0D58  3003               	movlw	3
  4712  0D59  00A4               	movwf	strncmp@len
  4713  0D5A  3000               	movlw	0
  4714  0D5B  00A5               	movwf	strncmp@len+1
  4715  0D5C  3196  264A  318C   	fcall	_strncmp
  4716  0D5F  0020               	movlb	0	; select bank0
  4717  0D60  0820               	movf	?_strncmp,w
  4718  0D61  0421               	iorwf	?_strncmp+1,w
  4719  0D62  1D03               	btfss	3,2
  4720  0D63  2D68               	goto	l6085
  4721                           
  4722                           ;protocol.c: 165: PROTOCOL_STA();
  4723  0D64  3192  2242  318C   	fcall	_PROTOCOL_STA
  4724                           
  4725                           ;protocol.c: 166: } else if (!strncmp(("STP"), (buf), 3)) {
  4726  0D67  2C94               	goto	l836
  4727  0D68                     l6085:	
  4728  0D68  3099               	movlw	low (STR_6| (0+32768))
  4729  0D69  0020               	movlb	0	; select bank0
  4730  0D6A  00A0               	movwf	strncmp@s1
  4731  0D6B  3091               	movlw	high (STR_6| (0+32768))
  4732  0D6C  00A1               	movwf	strncmp@s1+1
  4733  0D6D  3020               	movlw	low _buf
  4734  0D6E  00A2               	movwf	strncmp@s2
  4735  0D6F  3002               	movlw	high _buf
  4736  0D70  00A3               	movwf	strncmp@s2+1
  4737  0D71  3003               	movlw	3
  4738  0D72  00A4               	movwf	strncmp@len
  4739  0D73  3000               	movlw	0
  4740  0D74  00A5               	movwf	strncmp@len+1
  4741  0D75  3196  264A  318C   	fcall	_strncmp
  4742  0D78  0020               	movlb	0	; select bank0
  4743  0D79  0820               	movf	?_strncmp,w
  4744  0D7A  0421               	iorwf	?_strncmp+1,w
  4745  0D7B  1D03               	btfss	3,2
  4746  0D7C  2D8D               	goto	l6091
  4747                           
  4748                           ;protocol.c: 167: PROTOCOL_STP();
  4749  0D7D  3192  2235  318C   	fcall	_PROTOCOL_STP
  4750                           
  4751                           ;protocol.c: 168: printf("*:STP:%s\n", "ACK");
  4752  0D80  30F2               	movlw	low (STR_42| (0+32768))
  4753  0D81  0020               	movlb	0	; select bank0
  4754  0D82  00AE               	movwf	printf@f
  4755  0D83  3090               	movlw	high (STR_42| (0+32768))
  4756  0D84  00AF               	movwf	printf@f+1
  4757  0D85  306D               	movlw	low (STR_43| (0+32768))
  4758  0D86  00B0               	movwf	low ((?_printf| 0+2))
  4759  0D87  3091               	movlw	high (STR_43| (0+32768))
  4760  0D88  00B1               	movwf	(low ((?_printf| 0+2))+1)
  4761  0D89  318E  262B  318C   	fcall	_printf
  4762                           
  4763                           ;protocol.c: 169: } else if (!strncmp(("SET"), (buf), 3)) {
  4764  0D8C  2C94               	goto	l836
  4765  0D8D                     l6091:	
  4766  0D8D  30A5               	movlw	low (STR_9| (0+32768))
  4767  0D8E  0020               	movlb	0	; select bank0
  4768  0D8F  00A0               	movwf	strncmp@s1
  4769  0D90  3091               	movlw	high (STR_9| (0+32768))
  4770  0D91  00A1               	movwf	strncmp@s1+1
  4771  0D92  3020               	movlw	low _buf
  4772  0D93  00A2               	movwf	strncmp@s2
  4773  0D94  3002               	movlw	high _buf
  4774  0D95  00A3               	movwf	strncmp@s2+1
  4775  0D96  3003               	movlw	3
  4776  0D97  00A4               	movwf	strncmp@len
  4777  0D98  3000               	movlw	0
  4778  0D99  00A5               	movwf	strncmp@len+1
  4779  0D9A  3196  264A  318C   	fcall	_strncmp
  4780  0D9D  0020               	movlb	0	; select bank0
  4781  0D9E  0820               	movf	?_strncmp,w
  4782  0D9F  0421               	iorwf	?_strncmp+1,w
  4783  0DA0  1D03               	btfss	3,2
  4784  0DA1  2DAF               	goto	l6095
  4785                           
  4786                           ;protocol.c: 170: PROTOCOL_SET(atoi(&buf[4]));
  4787  0DA2  3024               	movlw	low (_buf+4)
  4788  0DA3  00A6               	movwf	atoi@s
  4789  0DA4  3002               	movlw	high (_buf+4)
  4790  0DA5  00A7               	movwf	atoi@s+1
  4791  0DA6  3189  21AC  318C   	fcall	_atoi
  4792  0DA9  0020               	movlb	0	; select bank0
  4793  0DAA  0826               	movf	?_atoi,w
  4794  0DAB  3191  21FF  318C   	fcall	_PROTOCOL_SET
  4795                           
  4796                           ;protocol.c: 171: } else if (!strncmp(("GET"), (buf), 3)) {
  4797  0DAE  2C94               	goto	l836
  4798  0DAF                     l6095:	
  4799  0DAF  30A1               	movlw	low (STR_10| (0+32768))
  4800  0DB0  0020               	movlb	0	; select bank0
  4801  0DB1  00A0               	movwf	strncmp@s1
  4802  0DB2  3091               	movlw	high (STR_10| (0+32768))
  4803  0DB3  00A1               	movwf	strncmp@s1+1
  4804  0DB4  3020               	movlw	low _buf
  4805  0DB5  00A2               	movwf	strncmp@s2
  4806  0DB6  3002               	movlw	high _buf
  4807  0DB7  00A3               	movwf	strncmp@s2+1
  4808  0DB8  3003               	movlw	3
  4809  0DB9  00A4               	movwf	strncmp@len
  4810  0DBA  3000               	movlw	0
  4811  0DBB  00A5               	movwf	strncmp@len+1
  4812  0DBC  3196  264A  318C   	fcall	_strncmp
  4813  0DBF  0020               	movlb	0	; select bank0
  4814  0DC0  0820               	movf	?_strncmp,w
  4815  0DC1  0421               	iorwf	?_strncmp+1,w
  4816  0DC2  1D03               	btfss	3,2
  4817  0DC3  2DD5               	goto	l6099
  4818                           
  4819                           ;protocol.c: 172: printf("$:GET:%d\n", value);
  4820  0DC4  301A               	movlw	low (STR_11| (0+32768))
  4821  0DC5  00AE               	movwf	printf@f
  4822  0DC6  3091               	movlw	high (STR_11| (0+32768))
  4823  0DC7  00AF               	movwf	printf@f+1
  4824  0DC8  0021               	movlb	1	; select bank1
  4825  0DC9  0860               	movf	_value^(0+128),w
  4826  0DCA  0020               	movlb	0	; select bank0
  4827  0DCB  00E7               	movwf	??_PROTOCOL_Loop
  4828  0DCC  01E8               	clrf	??_PROTOCOL_Loop+1
  4829  0DCD  0867               	movf	??_PROTOCOL_Loop,w
  4830  0DCE  00B0               	movwf	?_printf+2
  4831  0DCF  0868               	movf	??_PROTOCOL_Loop+1,w
  4832  0DD0  00B1               	movwf	?_printf+3
  4833  0DD1  318E  262B  318C   	fcall	_printf
  4834                           
  4835                           ;protocol.c: 173: } else if (!strncmp(("WDA"), (buf), 3)) {
  4836  0DD4  2C94               	goto	l836
  4837  0DD5                     l6099:	
  4838  0DD5  3069               	movlw	low (STR_47| (0+32768))
  4839  0DD6  0020               	movlb	0	; select bank0
  4840  0DD7  00A0               	movwf	strncmp@s1
  4841  0DD8  3091               	movlw	high (STR_47| (0+32768))
  4842  0DD9  00A1               	movwf	strncmp@s1+1
  4843  0DDA  3020               	movlw	low _buf
  4844  0DDB  00A2               	movwf	strncmp@s2
  4845  0DDC  3002               	movlw	high _buf
  4846  0DDD  00A3               	movwf	strncmp@s2+1
  4847  0DDE  3003               	movlw	3
  4848  0DDF  00A4               	movwf	strncmp@len
  4849  0DE0  3000               	movlw	0
  4850  0DE1  00A5               	movwf	strncmp@len+1
  4851  0DE2  3196  264A  318C   	fcall	_strncmp
  4852  0DE5  0020               	movlb	0	; select bank0
  4853  0DE6  0820               	movf	?_strncmp,w
  4854  0DE7  0421               	iorwf	?_strncmp+1,w
  4855  0DE8  1D03               	btfss	3,2
  4856  0DE9  2DFB               	goto	l6105
  4857                           
  4858                           ;protocol.c: 174: device_address = atoi(&buf[4]);
  4859  0DEA  3024               	movlw	low (_buf+4)
  4860  0DEB  00A6               	movwf	atoi@s
  4861  0DEC  3002               	movlw	high (_buf+4)
  4862  0DED  00A7               	movwf	atoi@s+1
  4863  0DEE  3189  21AC  318C   	fcall	_atoi
  4864  0DF1  0020               	movlb	0	; select bank0
  4865  0DF2  0826               	movf	?_atoi,w
  4866  0DF3  00E7               	movwf	??_PROTOCOL_Loop
  4867  0DF4  0867               	movf	??_PROTOCOL_Loop,w
  4868  0DF5  00EA               	movwf	PROTOCOL_Loop@device_address
  4869                           
  4870                           ;protocol.c: 175: PROTOCOL_Write_Device_Address(device_address);
  4871  0DF6  086A               	movf	PROTOCOL_Loop@device_address,w
  4872  0DF7  3192  226E  318C   	fcall	_PROTOCOL_Write_Device_Address
  4873                           
  4874                           ;protocol.c: 176: } else if (!strncmp(("RDA"), (buf), 3)) {
  4875  0DFA  2C94               	goto	l836
  4876  0DFB                     l6105:	
  4877  0DFB  3065               	movlw	low (STR_48| (0+32768))
  4878  0DFC  0020               	movlb	0	; select bank0
  4879  0DFD  00A0               	movwf	strncmp@s1
  4880  0DFE  3091               	movlw	high (STR_48| (0+32768))
  4881  0DFF  00A1               	movwf	strncmp@s1+1
  4882  0E00  3020               	movlw	low _buf
  4883  0E01  00A2               	movwf	strncmp@s2
  4884  0E02  3002               	movlw	high _buf
  4885  0E03  00A3               	movwf	strncmp@s2+1
  4886  0E04  3003               	movlw	3
  4887  0E05  00A4               	movwf	strncmp@len
  4888  0E06  3000               	movlw	0
  4889  0E07  00A5               	movwf	strncmp@len+1
  4890  0E08  3196  264A  318C   	fcall	_strncmp
  4891  0E0B  0020               	movlb	0	; select bank0
  4892  0E0C  0820               	movf	?_strncmp,w
  4893  0E0D  0421               	iorwf	?_strncmp+1,w
  4894  0E0E  1D03               	btfss	3,2
  4895  0E0F  2E26               	goto	l6111
  4896                           
  4897                           ;protocol.c: 177: device_address = PROTOCOL_Read_Device_Address();
  4898  0E10  3191  21DD  318C   	fcall	_PROTOCOL_Read_Device_Address
  4899  0E13  0020               	movlb	0	; select bank0
  4900  0E14  00E7               	movwf	??_PROTOCOL_Loop
  4901  0E15  0867               	movf	??_PROTOCOL_Loop,w
  4902  0E16  00EA               	movwf	PROTOCOL_Loop@device_address
  4903                           
  4904                           ;protocol.c: 178: printf("$:RDA:%d\n", device_address);
  4905  0E17  30D4               	movlw	low (STR_49| (0+32768))
  4906  0E18  00AE               	movwf	printf@f
  4907  0E19  3090               	movlw	high (STR_49| (0+32768))
  4908  0E1A  00AF               	movwf	printf@f+1
  4909  0E1B  086A               	movf	PROTOCOL_Loop@device_address,w
  4910  0E1C  00E7               	movwf	??_PROTOCOL_Loop
  4911  0E1D  01E8               	clrf	??_PROTOCOL_Loop+1
  4912  0E1E  0867               	movf	??_PROTOCOL_Loop,w
  4913  0E1F  00B0               	movwf	?_printf+2
  4914  0E20  0868               	movf	??_PROTOCOL_Loop+1,w
  4915  0E21  00B1               	movwf	?_printf+3
  4916  0E22  318E  262B  318C   	fcall	_printf
  4917                           
  4918                           ;protocol.c: 179: } else {
  4919  0E25  2C94               	goto	l836
  4920  0E26                     l6111:	
  4921                           
  4922                           ;protocol.c: 180: PROTOCOL_EXT(buf);
  4923  0E26  3020               	movlw	(low (_buf| (0+512)))& (0+255)
  4924  0E27  3192  22B3  318C   	fcall	_PROTOCOL_EXT
  4925  0E2A  2C94               	goto	l836
  4926  0E2B                     __end_of_PROTOCOL_Loop:	
  4927                           
  4928                           	psect	text11
  4929  0A97                     __ptext11:	
  4930 ;; *************** function _inv_handler *****************
  4931 ;; Defined at:
  4932 ;;		line 311 in file "main.c"
  4933 ;; Parameters:    Size  Location     Type
  4934 ;;		None
  4935 ;; Auto vars:     Size  Location     Type
  4936 ;;  status          1    0        unsigned char 
  4937 ;;  dev_addr        1    0        unsigned char 
  4938 ;; Return value:  Size  Location     Type
  4939 ;;                  1    wreg      void 
  4940 ;; Registers used:
  4941 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4942 ;; Tracked objects:
  4943 ;;		On entry : 0/0
  4944 ;;		On exit  : 0/0
  4945 ;;		Unchanged: 0/0
  4946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4947 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4948 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4949 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4950 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4951 ;;Total ram usage:        1 bytes
  4952 ;; Hardware stack levels used:    1
  4953 ;; Hardware stack levels required when called:    9
  4954 ;; This function calls:
  4955 ;;		___lwmod
  4956 ;;		_check_plg
  4957 ;;		_exec_remote_cmd
  4958 ;;		_fetch
  4959 ;;		_scan_dev
  4960 ;; This function is called by:
  4961 ;;		_main
  4962 ;;		_PROTOCOL_Loop
  4963 ;; This function uses a non-reentrant model
  4964 ;;
  4965                           
  4966                           
  4967                           ;psect for function _inv_handler
  4968  0A97                     _inv_handler:	
  4969                           
  4970                           ;main.c: 312: uint8_t dev_addr, status;
  4971                           ;main.c: 313: static uint16_t t = 0;
  4972                           ;main.c: 314: static int8_t cmd_next = -1;
  4973                           ;main.c: 317: fetch(schedule[0]);
  4974                           
  4975                           ;incstack = 0
  4976                           ; Regs used in _inv_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4977  0A97  30A0               	movlw	(low (_schedule| (0+256)))& (0+255)
  4978  0A98  3188  2009  318A   	fcall	_fetch
  4979                           
  4980                           ;main.c: 319: if (t % 2 == 0) fetch(schedule[1]);
  4981  0A9B  0021               	movlb	1	; select bank1
  4982  0A9C  185E               	btfsc	inv_handler@t^(0+128),0
  4983  0A9D  2AA2               	goto	l5733
  4984  0A9E  30A4               	movlw	(low ((_schedule| (0+256)+4)))& (0+255)
  4985  0A9F  3188  2009  318A   	fcall	_fetch
  4986  0AA2                     l5733:	
  4987                           
  4988                           ;main.c: 321: if (t % 6 == 0) fetch(schedule[2]);
  4989  0AA2  3006               	movlw	6
  4990  0AA3  0020               	movlb	0	; select bank0
  4991  0AA4  00A8               	movwf	___lwmod@divisor
  4992  0AA5  3000               	movlw	0
  4993  0AA6  00A9               	movwf	___lwmod@divisor+1
  4994  0AA7  0021               	movlb	1	; select bank1
  4995  0AA8  085F               	movf	(inv_handler@t+1)^(0+128),w
  4996  0AA9  0020               	movlb	0	; select bank0
  4997  0AAA  00AB               	movwf	___lwmod@dividend+1
  4998  0AAB  0021               	movlb	1	; select bank1
  4999  0AAC  085E               	movf	inv_handler@t^(0+128),w
  5000  0AAD  0020               	movlb	0	; select bank0
  5001  0AAE  00AA               	movwf	___lwmod@dividend
  5002  0AAF  3195  2540  318A   	fcall	___lwmod
  5003  0AB2  0020               	movlb	0	; select bank0
  5004  0AB3  0828               	movf	?___lwmod,w
  5005  0AB4  0429               	iorwf	?___lwmod+1,w
  5006  0AB5  1D03               	btfss	3,2
  5007  0AB6  2ABB               	goto	l5737
  5008  0AB7  30A8               	movlw	(low ((_schedule| (0+256)+8)))& (0+255)
  5009  0AB8  3188  2009  318A   	fcall	_fetch
  5010  0ABB                     l5737:	
  5011                           
  5012                           ;main.c: 323: if (t % 12 == 0) {
  5013  0ABB  300C               	movlw	12
  5014  0ABC  0020               	movlb	0	; select bank0
  5015  0ABD  00A8               	movwf	___lwmod@divisor
  5016  0ABE  3000               	movlw	0
  5017  0ABF  00A9               	movwf	___lwmod@divisor+1
  5018  0AC0  0021               	movlb	1	; select bank1
  5019  0AC1  085F               	movf	(inv_handler@t+1)^(0+128),w
  5020  0AC2  0020               	movlb	0	; select bank0
  5021  0AC3  00AB               	movwf	___lwmod@dividend+1
  5022  0AC4  0021               	movlb	1	; select bank1
  5023  0AC5  085E               	movf	inv_handler@t^(0+128),w
  5024  0AC6  0020               	movlb	0	; select bank0
  5025  0AC7  00AA               	movwf	___lwmod@dividend
  5026  0AC8  3195  2540  318A   	fcall	___lwmod
  5027  0ACB  0020               	movlb	0	; select bank0
  5028  0ACC  0828               	movf	?___lwmod,w
  5029  0ACD  0429               	iorwf	?___lwmod+1,w
  5030  0ACE  1D03               	btfss	3,2
  5031  0ACF  2AE3               	goto	l5747
  5032                           
  5033                           ;main.c: 324: fetch(schedule[3]);
  5034  0AD0  30AC               	movlw	(low ((_schedule| (0+256)+12)))& (0+255)
  5035  0AD1  3188  2009  318A   	fcall	_fetch
  5036                           
  5037                           ;main.c: 325: if (++cmd_next > 3) cmd_next = 0;
  5038  0AD4  3001               	movlw	1
  5039  0AD5  0020               	movlb	0	; select bank0
  5040  0AD6  00DD               	movwf	??_inv_handler
  5041  0AD7  085D               	movf	??_inv_handler,w
  5042  0AD8  0021               	movlb	1	; select bank1
  5043  0AD9  07ED               	addwf	inv_handler@cmd_next^(0+128),f
  5044  0ADA  086D               	movf	inv_handler@cmd_next^(0+128),w
  5045  0ADB  3A80               	xorlw	128
  5046  0ADC  3E7C               	addlw	-132
  5047  0ADD  1803               	btfsc	3,0
  5048  0ADE  01ED               	clrf	inv_handler@cmd_next^(0+128)
  5049                           
  5050                           ;main.c: 326: exec_remote_cmd(cmd_next);
  5051  0ADF  086D               	movf	inv_handler@cmd_next^(0+128),w
  5052  0AE0  3183  232D  318A   	fcall	_exec_remote_cmd
  5053  0AE3                     l5747:	
  5054                           
  5055                           ;main.c: 327: }
  5056                           ;main.c: 329: if (t % 60 == 0) fetch(schedule[4]);
  5057  0AE3  303C               	movlw	60
  5058  0AE4  0020               	movlb	0	; select bank0
  5059  0AE5  00A8               	movwf	___lwmod@divisor
  5060  0AE6  3000               	movlw	0
  5061  0AE7  00A9               	movwf	___lwmod@divisor+1
  5062  0AE8  0021               	movlb	1	; select bank1
  5063  0AE9  085F               	movf	(inv_handler@t+1)^(0+128),w
  5064  0AEA  0020               	movlb	0	; select bank0
  5065  0AEB  00AB               	movwf	___lwmod@dividend+1
  5066  0AEC  0021               	movlb	1	; select bank1
  5067  0AED  085E               	movf	inv_handler@t^(0+128),w
  5068  0AEE  0020               	movlb	0	; select bank0
  5069  0AEF  00AA               	movwf	___lwmod@dividend
  5070  0AF0  3195  2540  318A   	fcall	___lwmod
  5071  0AF3  0020               	movlb	0	; select bank0
  5072  0AF4  0828               	movf	?___lwmod,w
  5073  0AF5  0429               	iorwf	?___lwmod+1,w
  5074  0AF6  1D03               	btfss	3,2
  5075  0AF7  2AFC               	goto	l5751
  5076  0AF8  30B0               	movlw	(low ((_schedule| (0+256)+16)))& (0+255)
  5077  0AF9  3188  2009  318A   	fcall	_fetch
  5078  0AFC                     l5751:	
  5079                           
  5080                           ;main.c: 331: if (t % 120 == 0) {
  5081  0AFC  3078               	movlw	120
  5082  0AFD  0020               	movlb	0	; select bank0
  5083  0AFE  00A8               	movwf	___lwmod@divisor
  5084  0AFF  3000               	movlw	0
  5085  0B00  00A9               	movwf	___lwmod@divisor+1
  5086  0B01  0021               	movlb	1	; select bank1
  5087  0B02  085F               	movf	(inv_handler@t+1)^(0+128),w
  5088  0B03  0020               	movlb	0	; select bank0
  5089  0B04  00AB               	movwf	___lwmod@dividend+1
  5090  0B05  0021               	movlb	1	; select bank1
  5091  0B06  085E               	movf	inv_handler@t^(0+128),w
  5092  0B07  0020               	movlb	0	; select bank0
  5093  0B08  00AA               	movwf	___lwmod@dividend
  5094  0B09  3195  2540  318A   	fcall	___lwmod
  5095  0B0C  0020               	movlb	0	; select bank0
  5096  0B0D  0828               	movf	?___lwmod,w
  5097  0B0E  0429               	iorwf	?___lwmod+1,w
  5098  0B0F  1D03               	btfss	3,2
  5099  0B10  2B18               	goto	l5757
  5100                           
  5101                           ;main.c: 332: fetch(schedule[5]);
  5102  0B11  30B4               	movlw	(low ((_schedule| (0+256)+20)))& (0+255)
  5103  0B12  3188  2009  318A   	fcall	_fetch
  5104                           
  5105                           ;main.c: 333: check_plg();
  5106  0B15  3192  22C6  318A   	fcall	_check_plg
  5107  0B18                     l5757:	
  5108                           
  5109                           ;main.c: 334: }
  5110                           ;main.c: 336: if (t % 600 == 0) {
  5111  0B18  3058               	movlw	88
  5112  0B19  0020               	movlb	0	; select bank0
  5113  0B1A  00A8               	movwf	___lwmod@divisor
  5114  0B1B  3002               	movlw	2
  5115  0B1C  00A9               	movwf	___lwmod@divisor+1
  5116  0B1D  0021               	movlb	1	; select bank1
  5117  0B1E  085F               	movf	(inv_handler@t+1)^(0+128),w
  5118  0B1F  0020               	movlb	0	; select bank0
  5119  0B20  00AB               	movwf	___lwmod@dividend+1
  5120  0B21  0021               	movlb	1	; select bank1
  5121  0B22  085E               	movf	inv_handler@t^(0+128),w
  5122  0B23  0020               	movlb	0	; select bank0
  5123  0B24  00AA               	movwf	___lwmod@dividend
  5124  0B25  3195  2540  318A   	fcall	___lwmod
  5125  0B28  0020               	movlb	0	; select bank0
  5126  0B29  0828               	movf	?___lwmod,w
  5127  0B2A  0429               	iorwf	?___lwmod+1,w
  5128  0B2B  1D03               	btfss	3,2
  5129  0B2C  2B38               	goto	l5765
  5130                           
  5131                           ;main.c: 337: fetch(schedule[6]);
  5132  0B2D  30B8               	movlw	(low ((_schedule| (0+256)+24)))& (0+255)
  5133  0B2E  3188  2009  318A   	fcall	_fetch
  5134                           
  5135                           ;main.c: 338: scan_dev();
  5136  0B31  3195  25D1         	fcall	_scan_dev
  5137                           
  5138                           ;main.c: 339: t = 1;
  5139  0B33  3001               	movlw	1
  5140  0B34  0021               	movlb	1	; select bank1
  5141  0B35  00DE               	movwf	inv_handler@t^(0+128)
  5142  0B36  3000               	movlw	0
  5143  0B37  00DF               	movwf	(inv_handler@t^(0+128)+1)
  5144  0B38                     l5765:	
  5145                           
  5146                           ;main.c: 340: }
  5147                           ;main.c: 342: t++;
  5148  0B38  3001               	movlw	1
  5149  0B39  0021               	movlb	1	; select bank1
  5150  0B3A  07DE               	addwf	inv_handler@t^(0+128),f
  5151  0B3B  3000               	movlw	0
  5152  0B3C  3DDF               	addwfc	(inv_handler@t+1)^(0+128),f
  5153  0B3D  0008               	return
  5154  0B3E                     __end_of_inv_handler:	
  5155                           
  5156                           	psect	text12
  5157  0809                     __ptext12:	
  5158 ;; *************** function _fetch *****************
  5159 ;; Defined at:
  5160 ;;		line 290 in file "main.c"
  5161 ;; Parameters:    Size  Location     Type
  5162 ;;  sch             1    wreg     PTR unsigned char 
  5163 ;;		 -> schedule(28), 
  5164 ;; Auto vars:     Size  Location     Type
  5165 ;;  sch             1   58[BANK0 ] PTR unsigned char 
  5166 ;;		 -> schedule(28), 
  5167 ;;  dev_addr        1   60[BANK0 ] unsigned char 
  5168 ;;  pos             1   59[BANK0 ] unsigned char 
  5169 ;;  status          1   57[BANK0 ] unsigned char 
  5170 ;; Return value:  Size  Location     Type
  5171 ;;                  1    wreg      void 
  5172 ;; Registers used:
  5173 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5174 ;; Tracked objects:
  5175 ;;		On entry : 0/0
  5176 ;;		On exit  : 0/0
  5177 ;;		Unchanged: 0/0
  5178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5180 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5181 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5182 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5183 ;;Total ram usage:        7 bytes
  5184 ;; Hardware stack levels used:    1
  5185 ;; Hardware stack levels required when called:    8
  5186 ;; This function calls:
  5187 ;;		_detected
  5188 ;;		_i2c1_write_no_data
  5189 ;;		_printf
  5190 ;;		_sen
  5191 ;; This function is called by:
  5192 ;;		_inv_handler
  5193 ;; This function uses a non-reentrant model
  5194 ;;
  5195                           
  5196                           
  5197                           ;psect for function _fetch
  5198  0809                     _fetch:	
  5199                           
  5200                           ;incstack = 0
  5201                           ; Regs used in _fetch: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5202                           ;fetch@sch stored from wreg
  5203  0809  0020               	movlb	0	; select bank0
  5204  080A  00DA               	movwf	fetch@sch
  5205                           
  5206                           ;main.c: 291: uint8_t pos;
  5207                           ;main.c: 292: uint8_t dev_addr;
  5208                           ;main.c: 293: uint8_t status;
  5209                           ;main.c: 294: for (pos=0; pos<4; pos++) {
  5210  080B  01DB               	clrf	fetch@pos
  5211  080C                     L2:	
  5212  080C  3004               	movlw	4
  5213  080D  025B               	subwf	fetch@pos,w
  5214  080E  1803               	btfsc	3,0
  5215  080F  0008               	return
  5216                           
  5217                           ;main.c: 295: dev_addr = sch[pos];
  5218  0810  085B               	movf	fetch@pos,w
  5219  0811  075A               	addwf	fetch@sch,w
  5220  0812  00D6               	movwf	??_fetch
  5221  0813  0856               	movf	??_fetch,w
  5222  0814  0086               	movwf	6
  5223  0815  3001               	movlw	1	; select bank2/3
  5224  0816  0087               	movwf	7
  5225  0817  0801               	movf	1,w
  5226  0818  00D7               	movwf	??_fetch+1
  5227  0819  0857               	movf	??_fetch+1,w
  5228  081A  00DC               	movwf	fetch@dev_addr
  5229                           
  5230                           ;main.c: 296: if (dev_addr == 0 || dev_addr > 0x20) {
  5231  081B  085C               	movf	fetch@dev_addr,w
  5232  081C  1903               	btfsc	3,2
  5233  081D  0008               	return
  5234  081E  3021               	movlw	33
  5235  081F  025C               	subwf	fetch@dev_addr,w
  5236  0820  1803               	btfsc	3,0
  5237  0821  0008               	return
  5238                           
  5239                           ;main.c: 298: } else if (detected(dev_addr)) {
  5240                           
  5241                           ;main.c: 297: break;
  5242  0822  085C               	movf	fetch@dev_addr,w
  5243  0823  3195  256D  3188   	fcall	_detected
  5244  0826  3A00               	xorlw	0
  5245  0827  1903               	skipnz
  5246  0828  2852               	goto	l5555
  5247                           
  5248                           ;main.c: 299: status = sen(dev_addr);
  5249  0829  0020               	movlb	0	; select bank0
  5250  082A  085C               	movf	fetch@dev_addr,w
  5251  082B  3186  26F7  3188   	fcall	_sen
  5252  082E  0020               	movlb	0	; select bank0
  5253  082F  00D6               	movwf	??_fetch
  5254  0830  0856               	movf	??_fetch,w
  5255  0831  00D9               	movwf	fetch@status
  5256                           
  5257                           ;main.c: 300: if (status > 0) {
  5258  0832  0859               	movf	fetch@status,w
  5259  0833  1903               	btfsc	3,2
  5260  0834  2852               	goto	l5555
  5261                           
  5262                           ;main.c: 301: printf("!:%%%d:NETWORK_ERROR\n", dev_addr);
  5263  0835  3088               	movlw	low (STR_18| (0+32768))
  5264  0836  00AE               	movwf	printf@f
  5265  0837  3090               	movlw	high (STR_18| (0+32768))
  5266  0838  00AF               	movwf	printf@f+1
  5267  0839  085C               	movf	fetch@dev_addr,w
  5268  083A  00D6               	movwf	??_fetch
  5269  083B  01D7               	clrf	??_fetch+1
  5270  083C  0856               	movf	??_fetch,w
  5271  083D  00B0               	movwf	?_printf+2
  5272  083E  0857               	movf	??_fetch+1,w
  5273  083F  00B1               	movwf	?_printf+3
  5274  0840  318E  262B  3188   	fcall	_printf
  5275                           
  5276                           ;main.c: 302: i2c1_write_no_data(dev_addr, 0x0c);
  5277  0843  0020               	movlb	0	; select bank0
  5278  0844  085C               	movf	fetch@dev_addr,w
  5279  0845  00D6               	movwf	??_fetch
  5280  0846  01D7               	clrf	??_fetch+1
  5281  0847  0856               	movf	??_fetch,w
  5282  0848  00AE               	movwf	i2c1_write_no_data@dev_addr
  5283  0849  0857               	movf	??_fetch+1,w
  5284  084A  00AF               	movwf	i2c1_write_no_data@dev_addr+1
  5285  084B  300C               	movlw	12
  5286  084C  00D8               	movwf	??_fetch+2
  5287  084D  0858               	movf	??_fetch+2,w
  5288  084E  00B0               	movwf	i2c1_write_no_data@reg_addr
  5289  084F  3194  24BE  3188   	fcall	_i2c1_write_no_data
  5290  0852                     l5555:	
  5291  0852  3001               	movlw	1
  5292  0853  0020               	movlb	0	; select bank0
  5293  0854  00D6               	movwf	??_fetch
  5294  0855  0856               	movf	??_fetch,w
  5295  0856  07DB               	addwf	fetch@pos,f
  5296  0857  280C               	goto	L2
  5297  0858                     __end_of_fetch:	
  5298                           
  5299                           	psect	text13
  5300  032D                     __ptext13:	
  5301 ;; *************** function _exec_remote_cmd *****************
  5302 ;; Defined at:
  5303 ;;		line 63 in file "main.c"
  5304 ;; Parameters:    Size  Location     Type
  5305 ;;  idx             1    wreg     unsigned char 
  5306 ;; Auto vars:     Size  Location     Type
  5307 ;;  idx             1   50[BANK1 ] unsigned char 
  5308 ;;  send_buf       50    0[BANK1 ] unsigned char [50]
  5309 ;;  buf             2   55[BANK1 ] PTR unsigned char 
  5310 ;;		 -> cmd_buf(192), 
  5311 ;;  data            1   54[BANK1 ] unsigned char 
  5312 ;;  status          1   53[BANK1 ] unsigned char 
  5313 ;;  i               1   52[BANK1 ] unsigned char 
  5314 ;;  j               1   51[BANK1 ] unsigned char 
  5315 ;; Return value:  Size  Location     Type
  5316 ;;                  1    wreg      void 
  5317 ;; Registers used:
  5318 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5319 ;; Tracked objects:
  5320 ;;		On entry : 0/0
  5321 ;;		On exit  : 0/0
  5322 ;;		Unchanged: 0/0
  5323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5325 ;;      Locals:         0       0      57       0       0       0       0       0       0       0       0       0       
      +0       0
  5326 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5327 ;;      Totals:         0       5      57       0       0       0       0       0       0       0       0       0       
      +0       0
  5328 ;;Total ram usage:       62 bytes
  5329 ;; Hardware stack levels used:    1
  5330 ;; Hardware stack levels required when called:    6
  5331 ;; This function calls:
  5332 ;;		___wmul
  5333 ;;		_atoi
  5334 ;;		_i2c1_read
  5335 ;;		_i2c1_write
  5336 ;;		_i2c1_write_no_data
  5337 ;;		_printf
  5338 ;;		_strncmp
  5339 ;; This function is called by:
  5340 ;;		_inv_handler
  5341 ;; This function uses a non-reentrant model
  5342 ;;
  5343                           
  5344                           
  5345                           ;psect for function _exec_remote_cmd
  5346  032D                     _exec_remote_cmd:	
  5347                           
  5348                           ;incstack = 0
  5349                           ; Regs used in _exec_remote_cmd: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5350                           ;exec_remote_cmd@idx stored from wreg
  5351  032D  0021               	movlb	1	; select bank1
  5352  032E  00D2               	movwf	exec_remote_cmd@idx^(0+128)
  5353                           
  5354                           ;main.c: 64: uint8_t data;
  5355                           ;main.c: 65: uint8_t i, j;
  5356                           ;main.c: 66: uint8_t status;
  5357                           ;main.c: 68: uint8_t send_buf[48 + 2];
  5358                           ;main.c: 70: char *buf = cmd_buf[idx];
  5359  032F  0852               	movf	exec_remote_cmd@idx^(0+128),w
  5360  0330  0020               	movlb	0	; select bank0
  5361  0331  00C4               	movwf	??_exec_remote_cmd
  5362  0332  01C5               	clrf	??_exec_remote_cmd+1
  5363  0333  0844               	movf	??_exec_remote_cmd,w
  5364  0334  00A0               	movwf	___wmul@multiplier
  5365  0335  0845               	movf	??_exec_remote_cmd+1,w
  5366  0336  00A1               	movwf	___wmul@multiplier+1
  5367  0337  3030               	movlw	48
  5368  0338  00A2               	movwf	___wmul@multiplicand
  5369  0339  3000               	movlw	0
  5370  033A  00A3               	movwf	___wmul@multiplicand+1
  5371  033B  3193  2362  3183   	fcall	___wmul
  5372  033E  3030               	movlw	48
  5373  033F  0020               	movlb	0	; select bank0
  5374  0340  00C6               	movwf	??_exec_remote_cmd+2
  5375  0341  3023               	movlw	35
  5376  0342  00C7               	movwf	??_exec_remote_cmd+3
  5377  0343  0820               	movf	?___wmul,w
  5378  0344  0746               	addwf	??_exec_remote_cmd+2,w
  5379  0345  0021               	movlb	1	; select bank1
  5380  0346  00D7               	movwf	exec_remote_cmd@buf^(0+128)
  5381  0347  0020               	movlb	0	; select bank0
  5382  0348  0821               	movf	?___wmul+1,w
  5383  0349  3D47               	addwfc	??_exec_remote_cmd+3,w
  5384  034A  0021               	movlb	1	; select bank1
  5385  034B  00D8               	movwf	(exec_remote_cmd@buf+1)^(0+128)
  5386                           
  5387                           ;main.c: 71: if (buf[0] == '\0') return;
  5388  034C  0857               	movf	exec_remote_cmd@buf^(0+128),w
  5389  034D  0086               	movwf	6
  5390  034E  0858               	movf	(exec_remote_cmd@buf+1)^(0+128),w
  5391  034F  0087               	movwf	7
  5392  0350  0801               	movf	1,w
  5393  0351  1903               	btfsc	3,2
  5394  0352  0008               	return
  5395                           
  5396                           ;main.c: 73: if (!strncmp(("WHO"), (buf), 3)) {
  5397  0353  3091               	movlw	low (STR_1| (0+32768))
  5398  0354  0020               	movlb	0	; select bank0
  5399  0355  00A0               	movwf	strncmp@s1
  5400  0356  3091               	movlw	high (STR_1| (0+32768))
  5401  0357  00A1               	movwf	strncmp@s1+1
  5402  0358  0021               	movlb	1	; select bank1
  5403  0359  0858               	movf	(exec_remote_cmd@buf+1)^(0+128),w
  5404  035A  0020               	movlb	0	; select bank0
  5405  035B  00A3               	movwf	strncmp@s2+1
  5406  035C  0021               	movlb	1	; select bank1
  5407  035D  0857               	movf	exec_remote_cmd@buf^(0+128),w
  5408  035E  0020               	movlb	0	; select bank0
  5409  035F  00A2               	movwf	strncmp@s2
  5410  0360  3003               	movlw	3
  5411  0361  00A4               	movwf	strncmp@len
  5412  0362  3000               	movlw	0
  5413  0363  00A5               	movwf	strncmp@len+1
  5414  0364  3196  264A  3183   	fcall	_strncmp
  5415  0367  0020               	movlb	0	; select bank0
  5416  0368  0820               	movf	?_strncmp,w
  5417  0369  0421               	iorwf	?_strncmp+1,w
  5418  036A  1D03               	btfss	3,2
  5419  036B  2B92               	goto	l5483
  5420                           
  5421                           ;main.c: 74: status = i2c1_read(BACKPLANE_SLAVE_ADDRESS, 0x01, &data, 1);
  5422  036C  0021               	movlb	1	; select bank1
  5423  036D  086E               	movf	_BACKPLANE_SLAVE_ADDRESS^(0+128),w
  5424  036E  0020               	movlb	0	; select bank0
  5425  036F  00C4               	movwf	??_exec_remote_cmd
  5426  0370  01C5               	clrf	??_exec_remote_cmd+1
  5427  0371  0844               	movf	??_exec_remote_cmd,w
  5428  0372  00B0               	movwf	i2c1_read@dev_addr
  5429  0373  0845               	movf	??_exec_remote_cmd+1,w
  5430  0374  00B1               	movwf	i2c1_read@dev_addr+1
  5431  0375  01B2               	clrf	i2c1_read@reg_addr
  5432  0376  0AB2               	incf	i2c1_read@reg_addr,f
  5433  0377  30D6               	movlw	low exec_remote_cmd@data
  5434  0378  00B3               	movwf	i2c1_read@pbuf
  5435  0379  3000               	movlw	high exec_remote_cmd@data
  5436  037A  00B4               	movwf	i2c1_read@pbuf+1
  5437  037B  01B5               	clrf	i2c1_read@len
  5438  037C  0AB5               	incf	i2c1_read@len,f
  5439  037D  3188  20FD  3183   	fcall	_i2c1_read
  5440  0380  0020               	movlb	0	; select bank0
  5441  0381  00C6               	movwf	??_exec_remote_cmd+2
  5442  0382  0846               	movf	??_exec_remote_cmd+2,w
  5443  0383  0021               	movlb	1	; select bank1
  5444  0384  00D5               	movwf	exec_remote_cmd@status^(0+128)
  5445                           
  5446                           ;main.c: 75: if (status == 0) printf("$:WHO:%d\n", data);
  5447  0385  0855               	movf	exec_remote_cmd@status^(0+128),w
  5448  0386  1D03               	btfss	3,2
  5449  0387  2B8D               	goto	l5481
  5450  0388  3010               	movlw	low (STR_2| (0+32768))
  5451  0389  0020               	movlb	0	; select bank0
  5452  038A  00AE               	movwf	printf@f
  5453  038B  3091               	movlw	high (STR_2| (0+32768))
  5454  038C  2CA5               	goto	L6
  5455  038D                     l5481:	
  5456                           
  5457                           ;main.c: 76: else printf("!\n");
  5458  038D  30B1               	movlw	low (STR_3| (0+32768))
  5459  038E  0020               	movlb	0	; select bank0
  5460  038F  00AE               	movwf	printf@f
  5461  0390  3091               	movlw	high (STR_3| (0+32768))
  5462  0391  2D13               	goto	L7
  5463  0392                     l5483:	
  5464                           ;main.c: 77: } else if (!strncmp(("SAV"), (buf), 3)) {
  5465                           
  5466  0392  30A9               	movlw	low (STR_4| (0+32768))
  5467  0393  0020               	movlb	0	; select bank0
  5468  0394  00A0               	movwf	strncmp@s1
  5469  0395  3091               	movlw	high (STR_4| (0+32768))
  5470  0396  00A1               	movwf	strncmp@s1+1
  5471  0397  0021               	movlb	1	; select bank1
  5472  0398  0858               	movf	(exec_remote_cmd@buf+1)^(0+128),w
  5473  0399  0020               	movlb	0	; select bank0
  5474  039A  00A3               	movwf	strncmp@s2+1
  5475  039B  0021               	movlb	1	; select bank1
  5476  039C  0857               	movf	exec_remote_cmd@buf^(0+128),w
  5477  039D  0020               	movlb	0	; select bank0
  5478  039E  00A2               	movwf	strncmp@s2
  5479  039F  3003               	movlw	3
  5480  03A0  00A4               	movwf	strncmp@len
  5481  03A1  3000               	movlw	0
  5482  03A2  00A5               	movwf	strncmp@len+1
  5483  03A3  3196  264A  3183   	fcall	_strncmp
  5484  03A6  0020               	movlb	0	; select bank0
  5485  03A7  0820               	movf	?_strncmp,w
  5486  03A8  0421               	iorwf	?_strncmp+1,w
  5487  03A9  1D03               	btfss	3,2
  5488  03AA  2BB6               	goto	l5487
  5489                           
  5490                           ;main.c: 78: status = i2c1_write_no_data(BACKPLANE_SLAVE_ADDRESS, 0x03);
  5491  03AB  0021               	movlb	1	; select bank1
  5492  03AC  086E               	movf	_BACKPLANE_SLAVE_ADDRESS^(0+128),w
  5493  03AD  0020               	movlb	0	; select bank0
  5494  03AE  00C4               	movwf	??_exec_remote_cmd
  5495  03AF  01C5               	clrf	??_exec_remote_cmd+1
  5496  03B0  0844               	movf	??_exec_remote_cmd,w
  5497  03B1  00AE               	movwf	i2c1_write_no_data@dev_addr
  5498  03B2  0845               	movf	??_exec_remote_cmd+1,w
  5499  03B3  00AF               	movwf	i2c1_write_no_data@dev_addr+1
  5500  03B4  3003               	movlw	3
  5501  03B5  2BD9               	goto	L5
  5502  03B6                     l5487:	
  5503                           ;main.c: 79: } else if (!strncmp(("STA"), (buf), 3)) {
  5504                           
  5505  03B6  3075               	movlw	low (STR_5| (0+32768))
  5506  03B7  0020               	movlb	0	; select bank0
  5507  03B8  00A0               	movwf	strncmp@s1
  5508  03B9  3091               	movlw	high (STR_5| (0+32768))
  5509  03BA  00A1               	movwf	strncmp@s1+1
  5510  03BB  0021               	movlb	1	; select bank1
  5511  03BC  0858               	movf	(exec_remote_cmd@buf+1)^(0+128),w
  5512  03BD  0020               	movlb	0	; select bank0
  5513  03BE  00A3               	movwf	strncmp@s2+1
  5514  03BF  0021               	movlb	1	; select bank1
  5515  03C0  0857               	movf	exec_remote_cmd@buf^(0+128),w
  5516  03C1  0020               	movlb	0	; select bank0
  5517  03C2  00A2               	movwf	strncmp@s2
  5518  03C3  3003               	movlw	3
  5519  03C4  00A4               	movwf	strncmp@len
  5520  03C5  3000               	movlw	0
  5521  03C6  00A5               	movwf	strncmp@len+1
  5522  03C7  3196  264A  3183   	fcall	_strncmp
  5523  03CA  0020               	movlb	0	; select bank0
  5524  03CB  0820               	movf	?_strncmp,w
  5525  03CC  0421               	iorwf	?_strncmp+1,w
  5526  03CD  1D03               	btfss	3,2
  5527  03CE  2BE5               	goto	l5491
  5528                           
  5529                           ;main.c: 80: status = i2c1_write_no_data(BACKPLANE_SLAVE_ADDRESS, 0x04);
  5530  03CF  0021               	movlb	1	; select bank1
  5531  03D0  086E               	movf	_BACKPLANE_SLAVE_ADDRESS^(0+128),w
  5532  03D1  0020               	movlb	0	; select bank0
  5533  03D2  00C4               	movwf	??_exec_remote_cmd
  5534  03D3  01C5               	clrf	??_exec_remote_cmd+1
  5535  03D4  0844               	movf	??_exec_remote_cmd,w
  5536  03D5  00AE               	movwf	i2c1_write_no_data@dev_addr
  5537  03D6  0845               	movf	??_exec_remote_cmd+1,w
  5538  03D7  00AF               	movwf	i2c1_write_no_data@dev_addr+1
  5539  03D8  3004               	movlw	4
  5540  03D9                     L5:	
  5541  03D9  00C6               	movwf	??_exec_remote_cmd+2
  5542  03DA  0846               	movf	??_exec_remote_cmd+2,w
  5543  03DB  00B0               	movwf	i2c1_write_no_data@reg_addr
  5544  03DC  3194  24BE  3183   	fcall	_i2c1_write_no_data
  5545  03DF  0020               	movlb	0	; select bank0
  5546  03E0  00C7               	movwf	??_exec_remote_cmd+3
  5547  03E1  0847               	movf	??_exec_remote_cmd+3,w
  5548  03E2  0021               	movlb	1	; select bank1
  5549  03E3  00D5               	movwf	exec_remote_cmd@status^(0+128)
  5550                           
  5551                           ;main.c: 81: } else if (!strncmp(("STP"), (buf), 3)) {
  5552  03E4  2D16               	goto	l5529
  5553  03E5                     l5491:	
  5554  03E5  3099               	movlw	low (STR_6| (0+32768))
  5555  03E6  0020               	movlb	0	; select bank0
  5556  03E7  00A0               	movwf	strncmp@s1
  5557  03E8  3091               	movlw	high (STR_6| (0+32768))
  5558  03E9  00A1               	movwf	strncmp@s1+1
  5559  03EA  0021               	movlb	1	; select bank1
  5560  03EB  0858               	movf	(exec_remote_cmd@buf+1)^(0+128),w
  5561  03EC  0020               	movlb	0	; select bank0
  5562  03ED  00A3               	movwf	strncmp@s2+1
  5563  03EE  0021               	movlb	1	; select bank1
  5564  03EF  0857               	movf	exec_remote_cmd@buf^(0+128),w
  5565  03F0  0020               	movlb	0	; select bank0
  5566  03F1  00A2               	movwf	strncmp@s2
  5567  03F2  3003               	movlw	3
  5568  03F3  00A4               	movwf	strncmp@len
  5569  03F4  3000               	movlw	0
  5570  03F5  00A5               	movwf	strncmp@len+1
  5571  03F6  3196  264A  3183   	fcall	_strncmp
  5572  03F9  0020               	movlb	0	; select bank0
  5573  03FA  0820               	movf	?_strncmp,w
  5574  03FB  0421               	iorwf	?_strncmp+1,w
  5575  03FC  1D03               	btfss	3,2
  5576  03FD  2C20               	goto	l5501
  5577                           
  5578                           ;main.c: 82: status = i2c1_write_no_data(BACKPLANE_SLAVE_ADDRESS, 0x05);
  5579  03FE  0021               	movlb	1	; select bank1
  5580  03FF  086E               	movf	_BACKPLANE_SLAVE_ADDRESS^(0+128),w
  5581  0400  0020               	movlb	0	; select bank0
  5582  0401  00C4               	movwf	??_exec_remote_cmd
  5583  0402  01C5               	clrf	??_exec_remote_cmd+1
  5584  0403  0844               	movf	??_exec_remote_cmd,w
  5585  0404  00AE               	movwf	i2c1_write_no_data@dev_addr
  5586  0405  0845               	movf	??_exec_remote_cmd+1,w
  5587  0406  00AF               	movwf	i2c1_write_no_data@dev_addr+1
  5588  0407  3005               	movlw	5
  5589  0408  00C6               	movwf	??_exec_remote_cmd+2
  5590  0409  0846               	movf	??_exec_remote_cmd+2,w
  5591  040A  00B0               	movwf	i2c1_write_no_data@reg_addr
  5592  040B  3194  24BE  3183   	fcall	_i2c1_write_no_data
  5593  040E  0020               	movlb	0	; select bank0
  5594  040F  00C7               	movwf	??_exec_remote_cmd+3
  5595  0410  0847               	movf	??_exec_remote_cmd+3,w
  5596  0411  0021               	movlb	1	; select bank1
  5597  0412  00D5               	movwf	exec_remote_cmd@status^(0+128)
  5598                           
  5599                           ;main.c: 83: if (status == 0) printf("*:STP:ACK\n");
  5600  0413  0855               	movf	exec_remote_cmd@status^(0+128),w
  5601  0414  1D03               	btfss	3,2
  5602  0415  2C1B               	goto	l5499
  5603  0416  30C9               	movlw	low (STR_7| (0+32768))
  5604  0417  0020               	movlb	0	; select bank0
  5605  0418  00AE               	movwf	printf@f
  5606  0419  3090               	movlw	high (STR_7| (0+32768))
  5607  041A  2D13               	goto	L7
  5608  041B                     l5499:	
  5609                           
  5610                           ;main.c: 84: else printf("!:STP:NACK\n");
  5611  041B  30BD               	movlw	low (STR_8| (0+32768))
  5612  041C  0020               	movlb	0	; select bank0
  5613  041D  00AE               	movwf	printf@f
  5614  041E  3090               	movlw	high (STR_8| (0+32768))
  5615  041F  2D13               	goto	L7
  5616  0420                     l5501:	
  5617                           ;main.c: 85: } else if (!strncmp(("SET"), (buf), 3)) {
  5618                           
  5619  0420  30A5               	movlw	low (STR_9| (0+32768))
  5620  0421  0020               	movlb	0	; select bank0
  5621  0422  00A0               	movwf	strncmp@s1
  5622  0423  3091               	movlw	high (STR_9| (0+32768))
  5623  0424  00A1               	movwf	strncmp@s1+1
  5624  0425  0021               	movlb	1	; select bank1
  5625  0426  0858               	movf	(exec_remote_cmd@buf+1)^(0+128),w
  5626  0427  0020               	movlb	0	; select bank0
  5627  0428  00A3               	movwf	strncmp@s2+1
  5628  0429  0021               	movlb	1	; select bank1
  5629  042A  0857               	movf	exec_remote_cmd@buf^(0+128),w
  5630  042B  0020               	movlb	0	; select bank0
  5631  042C  00A2               	movwf	strncmp@s2
  5632  042D  3003               	movlw	3
  5633  042E  00A4               	movwf	strncmp@len
  5634  042F  3000               	movlw	0
  5635  0430  00A5               	movwf	strncmp@len+1
  5636  0431  3196  264A  3183   	fcall	_strncmp
  5637  0434  0020               	movlb	0	; select bank0
  5638  0435  0820               	movf	?_strncmp,w
  5639  0436  0421               	iorwf	?_strncmp+1,w
  5640  0437  1D03               	btfss	3,2
  5641  0438  2C72               	goto	l5505
  5642                           
  5643                           ;main.c: 86: data = atoi(&buf[4]);
  5644  0439  0021               	movlb	1	; select bank1
  5645  043A  0857               	movf	exec_remote_cmd@buf^(0+128),w
  5646  043B  3E04               	addlw	4
  5647  043C  0020               	movlb	0	; select bank0
  5648  043D  00C4               	movwf	??_exec_remote_cmd
  5649  043E  3000               	movlw	0
  5650  043F  0021               	movlb	1	; select bank1
  5651  0440  3D58               	addwfc	(exec_remote_cmd@buf+1)^(0+128),w
  5652  0441  0020               	movlb	0	; select bank0
  5653  0442  00C5               	movwf	??_exec_remote_cmd+1
  5654  0443  0844               	movf	??_exec_remote_cmd,w
  5655  0444  00A6               	movwf	atoi@s
  5656  0445  0845               	movf	??_exec_remote_cmd+1,w
  5657  0446  00A7               	movwf	atoi@s+1
  5658  0447  3189  21AC  3183   	fcall	_atoi
  5659  044A  0020               	movlb	0	; select bank0
  5660  044B  0826               	movf	?_atoi,w
  5661  044C  00C6               	movwf	??_exec_remote_cmd+2
  5662  044D  0846               	movf	??_exec_remote_cmd+2,w
  5663  044E  0021               	movlb	1	; select bank1
  5664  044F  00D6               	movwf	exec_remote_cmd@data^(0+128)
  5665                           
  5666                           ;main.c: 87: i2c1_write_no_data(BACKPLANE_SLAVE_ADDRESS, 0x08);
  5667  0450  086E               	movf	_BACKPLANE_SLAVE_ADDRESS^(0+128),w
  5668  0451  0020               	movlb	0	; select bank0
  5669  0452  00C4               	movwf	??_exec_remote_cmd
  5670  0453  01C5               	clrf	??_exec_remote_cmd+1
  5671  0454  0844               	movf	??_exec_remote_cmd,w
  5672  0455  00AE               	movwf	i2c1_write_no_data@dev_addr
  5673  0456  0845               	movf	??_exec_remote_cmd+1,w
  5674  0457  00AF               	movwf	i2c1_write_no_data@dev_addr+1
  5675  0458  3008               	movlw	8
  5676  0459  00C6               	movwf	??_exec_remote_cmd+2
  5677  045A  0846               	movf	??_exec_remote_cmd+2,w
  5678  045B  00B0               	movwf	i2c1_write_no_data@reg_addr
  5679  045C  3194  24BE  3183   	fcall	_i2c1_write_no_data
  5680                           
  5681                           ;main.c: 88: i2c1_write_no_data(BACKPLANE_SLAVE_ADDRESS, data);
  5682  045F  0021               	movlb	1	; select bank1
  5683  0460  086E               	movf	_BACKPLANE_SLAVE_ADDRESS^(0+128),w
  5684  0461  0020               	movlb	0	; select bank0
  5685  0462  00C4               	movwf	??_exec_remote_cmd
  5686  0463  01C5               	clrf	??_exec_remote_cmd+1
  5687  0464  0844               	movf	??_exec_remote_cmd,w
  5688  0465  00AE               	movwf	i2c1_write_no_data@dev_addr
  5689  0466  0845               	movf	??_exec_remote_cmd+1,w
  5690  0467  00AF               	movwf	i2c1_write_no_data@dev_addr+1
  5691  0468  0021               	movlb	1	; select bank1
  5692  0469  0856               	movf	exec_remote_cmd@data^(0+128),w
  5693  046A  0020               	movlb	0	; select bank0
  5694  046B  00C6               	movwf	??_exec_remote_cmd+2
  5695  046C  0846               	movf	??_exec_remote_cmd+2,w
  5696  046D  00B0               	movwf	i2c1_write_no_data@reg_addr
  5697  046E  3194  24BE  3183   	fcall	_i2c1_write_no_data
  5698                           
  5699                           ;main.c: 89: } else if (!strncmp(("GET"), (buf), 3)) {
  5700  0471  2D16               	goto	l5529
  5701  0472                     l5505:	
  5702  0472  30A1               	movlw	low (STR_10| (0+32768))
  5703  0473  0020               	movlb	0	; select bank0
  5704  0474  00A0               	movwf	strncmp@s1
  5705  0475  3091               	movlw	high (STR_10| (0+32768))
  5706  0476  00A1               	movwf	strncmp@s1+1
  5707  0477  0021               	movlb	1	; select bank1
  5708  0478  0858               	movf	(exec_remote_cmd@buf+1)^(0+128),w
  5709  0479  0020               	movlb	0	; select bank0
  5710  047A  00A3               	movwf	strncmp@s2+1
  5711  047B  0021               	movlb	1	; select bank1
  5712  047C  0857               	movf	exec_remote_cmd@buf^(0+128),w
  5713  047D  0020               	movlb	0	; select bank0
  5714  047E  00A2               	movwf	strncmp@s2
  5715  047F  3003               	movlw	3
  5716  0480  00A4               	movwf	strncmp@len
  5717  0481  3000               	movlw	0
  5718  0482  00A5               	movwf	strncmp@len+1
  5719  0483  3196  264A  3183   	fcall	_strncmp
  5720  0486  0020               	movlb	0	; select bank0
  5721  0487  0820               	movf	?_strncmp,w
  5722  0488  0421               	iorwf	?_strncmp+1,w
  5723  0489  1D03               	btfss	3,2
  5724  048A  2CB0               	goto	l5511
  5725                           
  5726                           ;main.c: 90: i2c1_read(BACKPLANE_SLAVE_ADDRESS, 0x09, &data, 1);
  5727  048B  0021               	movlb	1	; select bank1
  5728  048C  086E               	movf	_BACKPLANE_SLAVE_ADDRESS^(0+128),w
  5729  048D  0020               	movlb	0	; select bank0
  5730  048E  00C4               	movwf	??_exec_remote_cmd
  5731  048F  01C5               	clrf	??_exec_remote_cmd+1
  5732  0490  0844               	movf	??_exec_remote_cmd,w
  5733  0491  00B0               	movwf	i2c1_read@dev_addr
  5734  0492  0845               	movf	??_exec_remote_cmd+1,w
  5735  0493  00B1               	movwf	i2c1_read@dev_addr+1
  5736  0494  3009               	movlw	9
  5737  0495  00C6               	movwf	??_exec_remote_cmd+2
  5738  0496  0846               	movf	??_exec_remote_cmd+2,w
  5739  0497  00B2               	movwf	i2c1_read@reg_addr
  5740  0498  30D6               	movlw	low exec_remote_cmd@data
  5741  0499  00B3               	movwf	i2c1_read@pbuf
  5742  049A  3000               	movlw	high exec_remote_cmd@data
  5743  049B  00B4               	movwf	i2c1_read@pbuf+1
  5744  049C  01B5               	clrf	i2c1_read@len
  5745  049D  0AB5               	incf	i2c1_read@len,f
  5746  049E  3188  20FD  3183   	fcall	_i2c1_read
  5747                           
  5748                           ;main.c: 91: printf("$:GET:%d\n", data);
  5749  04A1  301A               	movlw	low (STR_11| (0+32768))
  5750  04A2  0020               	movlb	0	; select bank0
  5751  04A3  00AE               	movwf	printf@f
  5752  04A4  3091               	movlw	high (STR_11| (0+32768))
  5753  04A5                     L6:	
  5754  04A5  00AF               	movwf	printf@f+1
  5755  04A6  0021               	movlb	1	; select bank1
  5756  04A7  0856               	movf	exec_remote_cmd@data^(0+128),w
  5757  04A8  0020               	movlb	0	; select bank0
  5758  04A9  00C4               	movwf	??_exec_remote_cmd
  5759  04AA  01C5               	clrf	??_exec_remote_cmd+1
  5760  04AB  0844               	movf	??_exec_remote_cmd,w
  5761  04AC  00B0               	movwf	?_printf+2
  5762  04AD  0845               	movf	??_exec_remote_cmd+1,w
  5763  04AE  00B1               	movwf	?_printf+3
  5764  04AF  2D14               	goto	L4
  5765  04B0                     l5511:	
  5766                           ;main.c: 93: } else {
  5767                           
  5768                           
  5769                           ;main.c: 94: i = 0;
  5770  04B0  0021               	movlb	1	; select bank1
  5771  04B1  01D4               	clrf	exec_remote_cmd@i^(0+128)
  5772                           
  5773                           ;main.c: 95: j = 2;
  5774  04B2  3002               	movlw	2
  5775  04B3  0020               	movlb	0	; select bank0
  5776  04B4  00C4               	movwf	??_exec_remote_cmd
  5777  04B5  0844               	movf	??_exec_remote_cmd,w
  5778  04B6  0021               	movlb	1	; select bank1
  5779  04B7  00D3               	movwf	exec_remote_cmd@j^(0+128)
  5780  04B8                     l5515:	
  5781                           ;main.c: 96: do {
  5782                           
  5783                           
  5784                           ;main.c: 97: send_buf[j++] = (uint8_t)buf[i];
  5785  04B8  0854               	movf	exec_remote_cmd@i^(0+128),w
  5786  04B9  0020               	movlb	0	; select bank0
  5787  04BA  00C4               	movwf	??_exec_remote_cmd
  5788  04BB  01C5               	clrf	??_exec_remote_cmd+1
  5789  04BC  0844               	movf	??_exec_remote_cmd,w
  5790  04BD  0021               	movlb	1	; select bank1
  5791  04BE  0757               	addwf	exec_remote_cmd@buf^(0+128),w
  5792  04BF  0086               	movwf	6
  5793  04C0  0020               	movlb	0	; select bank0
  5794  04C1  0845               	movf	??_exec_remote_cmd+1,w
  5795  04C2  0021               	movlb	1	; select bank1
  5796  04C3  3D58               	addwfc	(exec_remote_cmd@buf+1)^(0+128),w
  5797  04C4  0087               	movwf	7
  5798  04C5  0801               	movf	1,w
  5799  04C6  0020               	movlb	0	; select bank0
  5800  04C7  00C6               	movwf	??_exec_remote_cmd+2
  5801  04C8  0021               	movlb	1	; select bank1
  5802  04C9  0853               	movf	exec_remote_cmd@j^(0+128),w
  5803  04CA  3EA0               	addlw	(low (exec_remote_cmd@send_buf| 0))& (0+255)
  5804  04CB  0086               	movwf	6
  5805  04CC  0187               	clrf	7
  5806  04CD  0020               	movlb	0	; select bank0
  5807  04CE  0846               	movf	??_exec_remote_cmd+2,w
  5808  04CF  0081               	movwf	1
  5809  04D0  3001               	movlw	1
  5810  04D1  00C4               	movwf	??_exec_remote_cmd
  5811  04D2  0844               	movf	??_exec_remote_cmd,w
  5812  04D3  0021               	movlb	1	; select bank1
  5813  04D4  07D3               	addwf	exec_remote_cmd@j^(0+128),f
  5814                           
  5815                           ;main.c: 98: } while (buf[i++] != '\0');
  5816  04D5  0854               	movf	exec_remote_cmd@i^(0+128),w
  5817  04D6  0AD4               	incf	exec_remote_cmd@i^(0+128),f
  5818  04D7  0020               	movlb	0	; select bank0
  5819  04D8  00C4               	movwf	??_exec_remote_cmd
  5820  04D9  01C5               	clrf	??_exec_remote_cmd+1
  5821  04DA  0844               	movf	??_exec_remote_cmd,w
  5822  04DB  0021               	movlb	1	; select bank1
  5823  04DC  0757               	addwf	exec_remote_cmd@buf^(0+128),w
  5824  04DD  0086               	movwf	6
  5825  04DE  0020               	movlb	0	; select bank0
  5826  04DF  0845               	movf	??_exec_remote_cmd+1,w
  5827  04E0  0021               	movlb	1	; select bank1
  5828  04E1  3D58               	addwfc	(exec_remote_cmd@buf+1)^(0+128),w
  5829  04E2  0087               	movwf	7
  5830  04E3  0801               	movf	1,w
  5831  04E4  1D03               	btfss	3,2
  5832  04E5  2CB8               	goto	l5515
  5833                           
  5834                           ;main.c: 99: send_buf[0] = 0x0a;
  5835  04E6  300A               	movlw	10
  5836  04E7  0020               	movlb	0	; select bank0
  5837  04E8  00C4               	movwf	??_exec_remote_cmd
  5838  04E9  0844               	movf	??_exec_remote_cmd,w
  5839  04EA  0021               	movlb	1	; select bank1
  5840  04EB  00A0               	movwf	exec_remote_cmd@send_buf^(0+128)
  5841                           
  5842                           ;main.c: 100: send_buf[1] = i;
  5843  04EC  0854               	movf	exec_remote_cmd@i^(0+128),w
  5844  04ED  0020               	movlb	0	; select bank0
  5845  04EE  00C4               	movwf	??_exec_remote_cmd
  5846  04EF  0844               	movf	??_exec_remote_cmd,w
  5847  04F0  0021               	movlb	1	; select bank1
  5848  04F1  00A1               	movwf	(exec_remote_cmd@send_buf^(0+128)+1)
  5849                           
  5850                           ;main.c: 101: status = i2c1_write(BACKPLANE_SLAVE_ADDRESS, send_buf, j);
  5851  04F2  086E               	movf	_BACKPLANE_SLAVE_ADDRESS^(0+128),w
  5852  04F3  0020               	movlb	0	; select bank0
  5853  04F4  00C4               	movwf	??_exec_remote_cmd
  5854  04F5  01C5               	clrf	??_exec_remote_cmd+1
  5855  04F6  0844               	movf	??_exec_remote_cmd,w
  5856  04F7  00AE               	movwf	i2c1_write@dev_addr
  5857  04F8  0845               	movf	??_exec_remote_cmd+1,w
  5858  04F9  00AF               	movwf	i2c1_write@dev_addr+1
  5859  04FA  30A0               	movlw	(low (exec_remote_cmd@send_buf| 0))& (0+255)
  5860  04FB  00C6               	movwf	??_exec_remote_cmd+2
  5861  04FC  0846               	movf	??_exec_remote_cmd+2,w
  5862  04FD  00B0               	movwf	i2c1_write@pbuf
  5863  04FE  0021               	movlb	1	; select bank1
  5864  04FF  0853               	movf	exec_remote_cmd@j^(0+128),w
  5865  0500  0020               	movlb	0	; select bank0
  5866  0501  00C7               	movwf	??_exec_remote_cmd+3
  5867  0502  0847               	movf	??_exec_remote_cmd+3,w
  5868  0503  00B1               	movwf	i2c1_write@len
  5869  0504  3194  246C  3183   	fcall	_i2c1_write
  5870  0507  0020               	movlb	0	; select bank0
  5871  0508  00C8               	movwf	??_exec_remote_cmd+4
  5872  0509  0848               	movf	??_exec_remote_cmd+4,w
  5873  050A  0021               	movlb	1	; select bank1
  5874  050B  00D5               	movwf	exec_remote_cmd@status^(0+128)
  5875                           
  5876                           ;main.c: 102: if (status != 0) printf("!:NO ACK FROM I2C SLAVE\n");
  5877  050C  0855               	movf	exec_remote_cmd@status^(0+128),w
  5878  050D  1903               	btfsc	3,2
  5879  050E  2D16               	goto	l5529
  5880  050F  3059               	movlw	low (STR_12| (0+32768))
  5881  0510  0020               	movlb	0	; select bank0
  5882  0511  00AE               	movwf	printf@f
  5883  0512  3090               	movlw	high (STR_12| (0+32768))
  5884  0513                     L7:	
  5885  0513  00AF               	movwf	printf@f+1
  5886  0514                     L4:	
  5887  0514  318E  262B         	fcall	_printf
  5888  0516                     l5529:	
  5889                           
  5890                           ;main.c: 104: }
  5891                           ;main.c: 105: buf[0] = '\0';
  5892  0516  0021               	movlb	1	; select bank1
  5893  0517  0857               	movf	exec_remote_cmd@buf^(0+128),w
  5894  0518  0086               	movwf	6
  5895  0519  0858               	movf	(exec_remote_cmd@buf+1)^(0+128),w
  5896  051A  0087               	movwf	7
  5897  051B  0181               	clrf	1
  5898  051C  0008               	return
  5899  051D                     __end_of_exec_remote_cmd:	
  5900                           
  5901                           	psect	text14
  5902  146C                     __ptext14:	
  5903 ;; *************** function _i2c1_write *****************
  5904 ;; Defined at:
  5905 ;;		line 8 in file "i2c1_util.c"
  5906 ;; Parameters:    Size  Location     Type
  5907 ;;  dev_addr        2   14[BANK0 ] unsigned int 
  5908 ;;  pbuf            1   16[BANK0 ] PTR unsigned char 
  5909 ;;		 -> exec_remote_cmd@send_buf(50), 
  5910 ;;  len             1   17[BANK0 ] unsigned char 
  5911 ;; Auto vars:     Size  Location     Type
  5912 ;;  status          1   21[BANK0 ] enum E3078
  5913 ;;  write_status    1   20[BANK0 ] unsigned char 
  5914 ;; Return value:  Size  Location     Type
  5915 ;;                  1    wreg      unsigned char 
  5916 ;; Registers used:
  5917 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5918 ;; Tracked objects:
  5919 ;;		On entry : 0/0
  5920 ;;		On exit  : 0/0
  5921 ;;		Unchanged: 0/0
  5922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5923 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5924 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5925 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5926 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5927 ;;Total ram usage:        8 bytes
  5928 ;; Hardware stack levels used:    1
  5929 ;; Hardware stack levels required when called:    5
  5930 ;; This function calls:
  5931 ;;		_I2C1_MasterWrite
  5932 ;; This function is called by:
  5933 ;;		_exec_remote_cmd
  5934 ;; This function uses a non-reentrant model
  5935 ;;
  5936                           
  5937                           
  5938                           ;psect for function _i2c1_write
  5939  146C                     _i2c1_write:	
  5940                           
  5941                           ;i2c1_util.c: 10: I2C1_MESSAGE_STATUS status;
  5942                           ;i2c1_util.c: 11: uint8_t write_status;
  5943                           ;i2c1_util.c: 12: _delay((unsigned long)((100)*(32000000/4000000.0)));
  5944                           
  5945                           ;incstack = 0
  5946                           ; Regs used in _i2c1_write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5947  146C  30A0               	movlw	160
  5948  146D                     u7397:	
  5949  146D  3200               	nop2
  5950  146E  0B89               	decfsz	9,f
  5951  146F  2C6D               	goto	u7397
  5952                           
  5953                           ;i2c1_util.c: 13: I2C1_MasterWrite(pbuf, len, dev_addr, &status);
  5954  1470  0020               	movlb	0	; select bank0
  5955  1471  0831               	movf	i2c1_write@len,w
  5956  1472  00B2               	movwf	??_i2c1_write
  5957  1473  0832               	movf	??_i2c1_write,w
  5958  1474  00A7               	movwf	I2C1_MasterWrite@length
  5959  1475  082F               	movf	i2c1_write@dev_addr+1,w
  5960  1476  00A9               	movwf	I2C1_MasterWrite@address+1
  5961  1477  082E               	movf	i2c1_write@dev_addr,w
  5962  1478  00A8               	movwf	I2C1_MasterWrite@address
  5963  1479  3035               	movlw	(low (i2c1_write@status| 0))& (0+255)
  5964  147A  00B3               	movwf	??_i2c1_write+1
  5965  147B  0833               	movf	??_i2c1_write+1,w
  5966  147C  00AA               	movwf	I2C1_MasterWrite@pflag
  5967  147D  0830               	movf	i2c1_write@pbuf,w
  5968  147E  3194  2494  3194   	fcall	_I2C1_MasterWrite
  5969  1481                     l5407:	
  5970                           ;i2c1_util.c: 14: while (status == I2C1_MESSAGE_PENDING) {_delay((unsigned long)((100)*(
      +                          32000000/4000000.0)));};
  5971                           
  5972  1481  3002               	movlw	2
  5973  1482  0020               	movlb	0	; select bank0
  5974  1483  0635               	xorwf	i2c1_write@status,w
  5975  1484  1D03               	btfss	3,2
  5976  1485  2C8B               	goto	l5409
  5977  1486  30A0               	movlw	160
  5978  1487                     u7407:	
  5979  1487  3200               	nop2
  5980  1488  0B89               	decfsz	9,f
  5981  1489  2C87               	goto	u7407
  5982  148A  2C81               	goto	l5407
  5983  148B                     l5409:	
  5984                           
  5985                           ;i2c1_util.c: 15: if (status == I2C1_MESSAGE_COMPLETE) {
  5986  148B  0835               	movf	i2c1_write@status,w
  5987  148C  1D03               	btfss	3,2
  5988  148D  2C90               	goto	l619
  5989                           
  5990                           ;i2c1_util.c: 16: write_status = 0;
  5991  148E  01B4               	clrf	i2c1_write@write_status
  5992                           
  5993                           ;i2c1_util.c: 17: } else {
  5994  148F  2C92               	goto	l5413
  5995  1490                     l619:	
  5996                           
  5997                           ;i2c1_util.c: 18: write_status = 1;
  5998  1490  01B4               	clrf	i2c1_write@write_status
  5999  1491  0AB4               	incf	i2c1_write@write_status,f
  6000  1492                     l5413:	
  6001                           
  6002                           ;i2c1_util.c: 19: }
  6003                           ;i2c1_util.c: 20: return write_status;
  6004  1492  0834               	movf	i2c1_write@write_status,w
  6005  1493  0008               	return
  6006  1494                     __end_of_i2c1_write:	
  6007                           
  6008                           	psect	text15
  6009  11EA                     __ptext15:	
  6010 ;; *************** function _TMR0_HasOverflowOccured *****************
  6011 ;; Defined at:
  6012 ;;		line 101 in file "mcc_generated_files/tmr0.c"
  6013 ;; Parameters:    Size  Location     Type
  6014 ;;		None
  6015 ;; Auto vars:     Size  Location     Type
  6016 ;;		None
  6017 ;; Return value:  Size  Location     Type
  6018 ;;                  1    wreg      unsigned char 
  6019 ;; Registers used:
  6020 ;;		wreg, status,2, status,0
  6021 ;; Tracked objects:
  6022 ;;		On entry : 0/0
  6023 ;;		On exit  : 0/0
  6024 ;;		Unchanged: 0/0
  6025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6027 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6029 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6030 ;;Total ram usage:        0 bytes
  6031 ;; Hardware stack levels used:    1
  6032 ;; Hardware stack levels required when called:    3
  6033 ;; This function calls:
  6034 ;;		Nothing
  6035 ;; This function is called by:
  6036 ;;		_PROTOCOL_Loop
  6037 ;; This function uses a non-reentrant model
  6038 ;;
  6039                           
  6040                           
  6041                           ;psect for function _TMR0_HasOverflowOccured
  6042  11EA                     _TMR0_HasOverflowOccured:	
  6043                           
  6044                           ;tmr0.c: 104: return(INTCONbits.TMR0IF);
  6045                           
  6046                           ;incstack = 0
  6047                           ; Regs used in _TMR0_HasOverflowOccured: [wreg+status,2+status,0]
  6048  11EA  0C0B               	rrf	11,w	;volatile
  6049  11EB  0C89               	rrf	9,f
  6050  11EC  3901               	andlw	1
  6051  11ED  0008               	return
  6052  11EE                     __end_of_TMR0_HasOverflowOccured:	
  6053                           
  6054                           	psect	text16
  6055  126E                     __ptext16:	
  6056 ;; *************** function _PROTOCOL_Write_Device_Address *****************
  6057 ;; Defined at:
  6058 ;;		line 84 in file "protocol.c"
  6059 ;; Parameters:    Size  Location     Type
  6060 ;;  device_id_i2    1    wreg     unsigned char 
  6061 ;; Auto vars:     Size  Location     Type
  6062 ;;  device_id_i2    1    4[BANK0 ] unsigned char 
  6063 ;; Return value:  Size  Location     Type
  6064 ;;                  1    wreg      void 
  6065 ;; Registers used:
  6066 ;;		wreg, status,2, status,0, pclath, cstack
  6067 ;; Tracked objects:
  6068 ;;		On entry : 0/0
  6069 ;;		On exit  : 0/0
  6070 ;;		Unchanged: 0/0
  6071 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6073 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6074 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6075 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6076 ;;Total ram usage:        2 bytes
  6077 ;; Hardware stack levels used:    1
  6078 ;; Hardware stack levels required when called:    4
  6079 ;; This function calls:
  6080 ;;		_DATAEE_WriteByte
  6081 ;; This function is called by:
  6082 ;;		_PROTOCOL_Loop
  6083 ;; This function uses a non-reentrant model
  6084 ;;
  6085                           
  6086                           
  6087                           ;psect for function _PROTOCOL_Write_Device_Address
  6088  126E                     _PROTOCOL_Write_Device_Address:	
  6089                           
  6090                           ;incstack = 0
  6091                           ; Regs used in _PROTOCOL_Write_Device_Address: [wreg+status,2+status,0+pclath+cstack]
  6092                           ;PROTOCOL_Write_Device_Address@device_id_i2c stored from wreg
  6093  126E  0020               	movlb	0	; select bank0
  6094  126F  00A4               	movwf	PROTOCOL_Write_Device_Address@device_id_i2c
  6095                           
  6096                           ;protocol.c: 85: DATAEE_WriteByte(0, device_id_i2c);
  6097  1270  0824               	movf	PROTOCOL_Write_Device_Address@device_id_i2c,w
  6098  1271  00A3               	movwf	??_PROTOCOL_Write_Device_Address
  6099  1272  0823               	movf	??_PROTOCOL_Write_Device_Address,w
  6100  1273  00A0               	movwf	DATAEE_WriteByte@bData
  6101  1274  3000               	movlw	0
  6102  1275  3193  23D9         	fcall	_DATAEE_WriteByte
  6103                           
  6104                           ;protocol.c: 86: slave_address = device_id_i2c;
  6105  1277  0020               	movlb	0	; select bank0
  6106  1278  0824               	movf	PROTOCOL_Write_Device_Address@device_id_i2c,w
  6107  1279  00A3               	movwf	??_PROTOCOL_Write_Device_Address
  6108  127A  0823               	movf	??_PROTOCOL_Write_Device_Address,w
  6109  127B  0022               	movlb	2	; select bank2
  6110  127C  00BF               	movwf	_slave_address^(0+256)
  6111  127D  0008               	return
  6112  127E                     __end_of_PROTOCOL_Write_Device_Address:	
  6113                           
  6114                           	psect	text17
  6115  1235                     __ptext17:	
  6116 ;; *************** function _PROTOCOL_STP *****************
  6117 ;; Defined at:
  6118 ;;		line 98 in file "protocol.c"
  6119 ;; Parameters:    Size  Location     Type
  6120 ;;		None
  6121 ;; Auto vars:     Size  Location     Type
  6122 ;;		None
  6123 ;; Return value:  Size  Location     Type
  6124 ;;                  1    wreg      void 
  6125 ;; Registers used:
  6126 ;;		wreg, status,2, status,0, pclath, cstack
  6127 ;; Tracked objects:
  6128 ;;		On entry : 0/0
  6129 ;;		On exit  : 0/0
  6130 ;;		Unchanged: 0/0
  6131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6133 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6135 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6136 ;;Total ram usage:        0 bytes
  6137 ;; Hardware stack levels used:    1
  6138 ;; Hardware stack levels required when called:    4
  6139 ;; This function calls:
  6140 ;;		Absolute function
  6141 ;;		_stop_handler
  6142 ;; This function is called by:
  6143 ;;		_PROTOCOL_Loop
  6144 ;; This function uses a non-reentrant model
  6145 ;;
  6146                           
  6147                           
  6148                           ;psect for function _PROTOCOL_STP
  6149  1235                     _PROTOCOL_STP:	
  6150                           
  6151                           ;protocol.c: 99: if (PROTOCOL_Stop_Handler) PROTOCOL_Stop_Handler();
  6152                           
  6153                           ;incstack = 0
  6154                           ; Regs used in _PROTOCOL_STP: [wreg+status,2+status,0+pclath+cstack]
  6155  1235  0022               	movlb	2	; select bank2
  6156  1236  0830               	movf	_PROTOCOL_Stop_Handler^(0+256),w
  6157  1237  0431               	iorwf	(_PROTOCOL_Stop_Handler+1)^(0+256),w
  6158  1238  1903               	btfsc	3,2
  6159  1239  2A3F               	goto	l5785
  6160  123A  0831               	movf	(_PROTOCOL_Stop_Handler+1)^(0+256),w
  6161  123B  008A               	movwf	10
  6162  123C  0830               	movf	_PROTOCOL_Stop_Handler^(0+256),w
  6163  123D  000A               	callw
  6164  123E  3192               	pagesel	$
  6165  123F                     l5785:	
  6166                           
  6167                           ;protocol.c: 100: running = 0;
  6168  123F  0021               	movlb	1	; select bank1
  6169  1240  01E5               	clrf	_running^(0+128)
  6170  1241  0008               	return
  6171  1242                     __end_of_PROTOCOL_STP:	
  6172                           
  6173                           	psect	text18
  6174  1242                     __ptext18:	
  6175 ;; *************** function _PROTOCOL_STA *****************
  6176 ;; Defined at:
  6177 ;;		line 93 in file "protocol.c"
  6178 ;; Parameters:    Size  Location     Type
  6179 ;;		None
  6180 ;; Auto vars:     Size  Location     Type
  6181 ;;		None
  6182 ;; Return value:  Size  Location     Type
  6183 ;;                  1    wreg      void 
  6184 ;; Registers used:
  6185 ;;		wreg, status,2, status,0, pclath, cstack
  6186 ;; Tracked objects:
  6187 ;;		On entry : 0/0
  6188 ;;		On exit  : 0/0
  6189 ;;		Unchanged: 0/0
  6190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6192 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6194 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6195 ;;Total ram usage:        0 bytes
  6196 ;; Hardware stack levels used:    1
  6197 ;; Hardware stack levels required when called:    4
  6198 ;; This function calls:
  6199 ;;		Absolute function
  6200 ;;		_start_handler
  6201 ;; This function is called by:
  6202 ;;		_PROTOCOL_Loop
  6203 ;; This function uses a non-reentrant model
  6204 ;;
  6205                           
  6206                           
  6207                           ;psect for function _PROTOCOL_STA
  6208  1242                     _PROTOCOL_STA:	
  6209                           
  6210                           ;protocol.c: 94: if (PROTOCOL_Start_Handler) PROTOCOL_Start_Handler();
  6211                           
  6212                           ;incstack = 0
  6213                           ; Regs used in _PROTOCOL_STA: [wreg+status,2+status,0+pclath+cstack]
  6214  1242  0022               	movlb	2	; select bank2
  6215  1243  0832               	movf	_PROTOCOL_Start_Handler^(0+256),w
  6216  1244  0433               	iorwf	(_PROTOCOL_Start_Handler+1)^(0+256),w
  6217  1245  1903               	btfsc	3,2
  6218  1246  2A4C               	goto	l5779
  6219  1247  0833               	movf	(_PROTOCOL_Start_Handler+1)^(0+256),w
  6220  1248  008A               	movwf	10
  6221  1249  0832               	movf	_PROTOCOL_Start_Handler^(0+256),w
  6222  124A  000A               	callw
  6223  124B  3192               	pagesel	$
  6224  124C                     l5779:	
  6225                           
  6226                           ;protocol.c: 95: running = 1;
  6227  124C  0021               	movlb	1	; select bank1
  6228  124D  01E5               	clrf	_running^(0+128)
  6229  124E  0AE5               	incf	_running^(0+128),f
  6230  124F  0008               	return
  6231  1250                     __end_of_PROTOCOL_STA:	
  6232                           
  6233                           	psect	text19
  6234  11E6                     __ptext19:	
  6235 ;; *************** function _start_handler *****************
  6236 ;; Defined at:
  6237 ;;		line 55 in file "main.c"
  6238 ;; Parameters:    Size  Location     Type
  6239 ;;		None
  6240 ;; Auto vars:     Size  Location     Type
  6241 ;;		None
  6242 ;; Return value:  Size  Location     Type
  6243 ;;                  1    wreg      void 
  6244 ;; Registers used:
  6245 ;;		None
  6246 ;; Tracked objects:
  6247 ;;		On entry : 0/0
  6248 ;;		On exit  : 0/0
  6249 ;;		Unchanged: 0/0
  6250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6252 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6253 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6254 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6255 ;;Total ram usage:        0 bytes
  6256 ;; Hardware stack levels used:    1
  6257 ;; Hardware stack levels required when called:    3
  6258 ;; This function calls:
  6259 ;;		Nothing
  6260 ;; This function is called by:
  6261 ;;		_main
  6262 ;;		_PROTOCOL_STA
  6263 ;; This function uses a non-reentrant model
  6264 ;;
  6265                           
  6266                           
  6267                           ;psect for function _start_handler
  6268  11E6                     _start_handler:	
  6269                           
  6270                           ;main.c: 56: running = 1;
  6271                           
  6272                           ;incstack = 0
  6273                           ; Regs used in _start_handler: []
  6274  11E6  0021               	movlb	1	; select bank1
  6275  11E7  01E5               	clrf	_running^(0+128)
  6276  11E8  0AE5               	incf	_running^(0+128),f
  6277  11E9  0008               	return
  6278  11EA                     __end_of_start_handler:	
  6279                           
  6280                           	psect	text20
  6281  11FF                     __ptext20:	
  6282 ;; *************** function _PROTOCOL_SET *****************
  6283 ;; Defined at:
  6284 ;;		line 111 in file "protocol.c"
  6285 ;; Parameters:    Size  Location     Type
  6286 ;;  value_          1    wreg     unsigned char 
  6287 ;; Auto vars:     Size  Location     Type
  6288 ;;  value_          1    1[BANK0 ] unsigned char 
  6289 ;; Return value:  Size  Location     Type
  6290 ;;                  1    wreg      void 
  6291 ;; Registers used:
  6292 ;;		wreg, status,2, status,0
  6293 ;; Tracked objects:
  6294 ;;		On entry : 0/0
  6295 ;;		On exit  : 0/0
  6296 ;;		Unchanged: 0/0
  6297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6299 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6300 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6301 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6302 ;;Total ram usage:        2 bytes
  6303 ;; Hardware stack levels used:    1
  6304 ;; Hardware stack levels required when called:    3
  6305 ;; This function calls:
  6306 ;;		Nothing
  6307 ;; This function is called by:
  6308 ;;		_PROTOCOL_Loop
  6309 ;; This function uses a non-reentrant model
  6310 ;;
  6311                           
  6312                           
  6313                           ;psect for function _PROTOCOL_SET
  6314  11FF                     _PROTOCOL_SET:	
  6315                           
  6316                           ;incstack = 0
  6317                           ; Regs used in _PROTOCOL_SET: [wreg+status,2+status,0]
  6318                           ;PROTOCOL_SET@value_ stored from wreg
  6319  11FF  0020               	movlb	0	; select bank0
  6320  1200  00A1               	movwf	PROTOCOL_SET@value_
  6321                           
  6322                           ;protocol.c: 112: value = value_;
  6323  1201  0821               	movf	PROTOCOL_SET@value_,w
  6324  1202  00A0               	movwf	??_PROTOCOL_SET
  6325  1203  0820               	movf	??_PROTOCOL_SET,w
  6326  1204  0021               	movlb	1	; select bank1
  6327  1205  00E0               	movwf	_value^(0+128)
  6328  1206  0008               	return
  6329  1207                     __end_of_PROTOCOL_SET:	
  6330                           
  6331                           	psect	text21
  6332  1207                     __ptext21:	
  6333 ;; *************** function _PROTOCOL_SAV *****************
  6334 ;; Defined at:
  6335 ;;		line 107 in file "protocol.c"
  6336 ;; Parameters:    Size  Location     Type
  6337 ;;		None
  6338 ;; Auto vars:     Size  Location     Type
  6339 ;;		None
  6340 ;; Return value:  Size  Location     Type
  6341 ;;                  1    wreg      void 
  6342 ;; Registers used:
  6343 ;;		wreg, status,2, status,0, pclath, cstack
  6344 ;; Tracked objects:
  6345 ;;		On entry : 0/0
  6346 ;;		On exit  : 0/0
  6347 ;;		Unchanged: 0/0
  6348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6351 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6352 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6353 ;;Total ram usage:        1 bytes
  6354 ;; Hardware stack levels used:    1
  6355 ;; Hardware stack levels required when called:    4
  6356 ;; This function calls:
  6357 ;;		_DATAEE_WriteByte
  6358 ;; This function is called by:
  6359 ;;		_PROTOCOL_Loop
  6360 ;; This function uses a non-reentrant model
  6361 ;;
  6362                           
  6363                           
  6364                           ;psect for function _PROTOCOL_SAV
  6365  1207                     _PROTOCOL_SAV:	
  6366                           
  6367                           ;protocol.c: 108: DATAEE_WriteByte(1, value);
  6368                           
  6369                           ;incstack = 0
  6370                           ; Regs used in _PROTOCOL_SAV: [wreg+status,2+status,0+pclath+cstack]
  6371  1207  0021               	movlb	1	; select bank1
  6372  1208  0860               	movf	_value^(0+128),w
  6373  1209  0020               	movlb	0	; select bank0
  6374  120A  00A3               	movwf	??_PROTOCOL_SAV
  6375  120B  0823               	movf	??_PROTOCOL_SAV,w
  6376  120C  00A0               	movwf	DATAEE_WriteByte@bData
  6377  120D  3001               	movlw	1
  6378  120E  3193  23D9         	fcall	_DATAEE_WriteByte
  6379  1210  0008               	return
  6380  1211                     __end_of_PROTOCOL_SAV:	
  6381                           
  6382                           	psect	text22
  6383  11DD                     __ptext22:	
  6384 ;; *************** function _PROTOCOL_Read_Device_Address *****************
  6385 ;; Defined at:
  6386 ;;		line 89 in file "protocol.c"
  6387 ;; Parameters:    Size  Location     Type
  6388 ;;		None
  6389 ;; Auto vars:     Size  Location     Type
  6390 ;;		None
  6391 ;; Return value:  Size  Location     Type
  6392 ;;                  1    wreg      unsigned char 
  6393 ;; Registers used:
  6394 ;;		wreg
  6395 ;; Tracked objects:
  6396 ;;		On entry : 0/0
  6397 ;;		On exit  : 0/0
  6398 ;;		Unchanged: 0/0
  6399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6403 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6404 ;;Total ram usage:        0 bytes
  6405 ;; Hardware stack levels used:    1
  6406 ;; Hardware stack levels required when called:    3
  6407 ;; This function calls:
  6408 ;;		Nothing
  6409 ;; This function is called by:
  6410 ;;		_PROTOCOL_Loop
  6411 ;; This function uses a non-reentrant model
  6412 ;;
  6413                           
  6414                           
  6415                           ;psect for function _PROTOCOL_Read_Device_Address
  6416  11DD                     _PROTOCOL_Read_Device_Address:	
  6417                           
  6418                           ;protocol.c: 90: return slave_address;
  6419                           
  6420                           ;incstack = 0
  6421                           ; Regs used in _PROTOCOL_Read_Device_Address: [wreg]
  6422  11DD  0022               	movlb	2	; select bank2
  6423  11DE  083F               	movf	_slave_address^(0+256),w
  6424  11DF  0008               	return
  6425  11E0                     __end_of_PROTOCOL_Read_Device_Address:	
  6426                           
  6427                           	psect	text23
  6428  12B3                     __ptext23:	
  6429 ;; *************** function _PROTOCOL_EXT *****************
  6430 ;; Defined at:
  6431 ;;		line 116 in file "protocol.c"
  6432 ;; Parameters:    Size  Location     Type
  6433 ;;  char_buf        1    wreg     PTR unsigned char 
  6434 ;;		 -> buf(48), 
  6435 ;; Auto vars:     Size  Location     Type
  6436 ;;  char_buf        1   70[BANK0 ] PTR unsigned char 
  6437 ;;		 -> buf(48), 
  6438 ;; Return value:  Size  Location     Type
  6439 ;;                  1    wreg      void 
  6440 ;; Registers used:
  6441 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6442 ;; Tracked objects:
  6443 ;;		On entry : 0/0
  6444 ;;		On exit  : 0/0
  6445 ;;		Unchanged: 0/0
  6446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6447 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6448 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6449 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6450 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6451 ;;Total ram usage:        2 bytes
  6452 ;; Hardware stack levels used:    1
  6453 ;; Hardware stack levels required when called:   10
  6454 ;; This function calls:
  6455 ;;		Absolute function
  6456 ;;		_command_handler
  6457 ;; This function is called by:
  6458 ;;		_PROTOCOL_Loop
  6459 ;; This function uses a non-reentrant model
  6460 ;;
  6461                           
  6462                           
  6463                           ;psect for function _PROTOCOL_EXT
  6464  12B3                     _PROTOCOL_EXT:	
  6465                           
  6466                           ;incstack = 0
  6467                           ; Regs used in _PROTOCOL_EXT: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6468                           ;PROTOCOL_EXT@char_buf stored from wreg
  6469  12B3  0020               	movlb	0	; select bank0
  6470  12B4  00E6               	movwf	PROTOCOL_EXT@char_buf
  6471                           
  6472                           ;protocol.c: 117: if (PROTOCOL_Extension_Handler) PROTOCOL_Extension_Handler(char_buf);
  6473  12B5  0022               	movlb	2	; select bank2
  6474  12B6  082A               	movf	_PROTOCOL_Extension_Handler^(0+256),w
  6475  12B7  042B               	iorwf	(_PROTOCOL_Extension_Handler+1)^(0+256),w
  6476  12B8  1903               	btfsc	3,2
  6477  12B9  0008               	return
  6478  12BA  0020               	movlb	0	; select bank0
  6479  12BB  0866               	movf	PROTOCOL_EXT@char_buf,w
  6480  12BC  00E5               	movwf	??_PROTOCOL_EXT
  6481  12BD  0865               	movf	??_PROTOCOL_EXT,w
  6482  12BE  00DB               	movwf	command_handler@buf
  6483  12BF  0022               	movlb	2	; select bank2
  6484  12C0  082B               	movf	(_PROTOCOL_Extension_Handler+1)^(0+256),w
  6485  12C1  008A               	movwf	10
  6486  12C2  082A               	movf	_PROTOCOL_Extension_Handler^(0+256),w
  6487  12C3  000A               	callw
  6488  12C4  3192               	pagesel	$
  6489  12C5  0008               	return
  6490  12C6                     __end_of_PROTOCOL_EXT:	
  6491                           
  6492                           	psect	text24
  6493  051D                     __ptext24:	
  6494 ;; *************** function _command_handler *****************
  6495 ;; Defined at:
  6496 ;;		line 359 in file "main.c"
  6497 ;; Parameters:    Size  Location     Type
  6498 ;;  buf             1   59[BANK0 ] PTR unsigned char 
  6499 ;;		 -> buf(48), 
  6500 ;; Auto vars:     Size  Location     Type
  6501 ;;  i               1   68[BANK0 ] unsigned char 
  6502 ;;  dev_addr        1   67[BANK0 ] unsigned char 
  6503 ;; Return value:  Size  Location     Type
  6504 ;;                  1    wreg      void 
  6505 ;; Registers used:
  6506 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6507 ;; Tracked objects:
  6508 ;;		On entry : 0/0
  6509 ;;		On exit  : 0/0
  6510 ;;		Unchanged: 0/0
  6511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6512 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6513 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6514 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6515 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6516 ;;Total ram usage:       10 bytes
  6517 ;; Hardware stack levels used:    1
  6518 ;; Hardware stack levels required when called:    9
  6519 ;; This function calls:
  6520 ;;		_DATAEE_WriteByte
  6521 ;;		___awdiv
  6522 ;;		_atoi
  6523 ;;		_check_plg
  6524 ;;		_one_shot_sen
  6525 ;;		_print_dev_map
  6526 ;;		_printf
  6527 ;;		_put_cmd
  6528 ;;		_strncmp
  6529 ;; This function is called by:
  6530 ;;		_main
  6531 ;;		_PROTOCOL_EXT
  6532 ;; This function uses a non-reentrant model
  6533 ;;
  6534                           
  6535                           
  6536                           ;psect for function _command_handler
  6537  051D                     _command_handler:	
  6538                           
  6539                           ;main.c: 360: static uint8_t pos = 0;
  6540                           ;main.c: 361: uint8_t i;
  6541                           ;main.c: 362: uint8_t dev_addr;
  6542                           ;main.c: 363: if (!strncmp(("I2C"), (buf), 3)) {
  6543                           
  6544                           ;incstack = 0
  6545                           ; Regs used in _command_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6546  051D  3079               	movlw	low (STR_20| (0+32768))
  6547  051E  0020               	movlb	0	; select bank0
  6548  051F  00A0               	movwf	strncmp@s1
  6549  0520  3091               	movlw	high (STR_20| (0+32768))
  6550  0521  00A1               	movwf	strncmp@s1+1
  6551  0522  085B               	movf	command_handler@buf,w
  6552  0523  00A2               	movwf	strncmp@s2
  6553  0524  3002               	movlw	2
  6554  0525  00A3               	movwf	strncmp@s2+1
  6555  0526  3003               	movlw	3
  6556  0527  00A4               	movwf	strncmp@len
  6557  0528  3000               	movlw	0
  6558  0529  00A5               	movwf	strncmp@len+1
  6559  052A  3196  264A  3185   	fcall	_strncmp
  6560  052D  0020               	movlb	0	; select bank0
  6561  052E  0820               	movf	?_strncmp,w
  6562  052F  0421               	iorwf	?_strncmp+1,w
  6563  0530  1D03               	btfss	3,2
  6564  0531  2D40               	goto	l5563
  6565                           
  6566                           ;main.c: 364: BACKPLANE_SLAVE_ADDRESS = atoi(&buf[4]);
  6567  0532  085B               	movf	command_handler@buf,w
  6568  0533  3E04               	addlw	4
  6569  0534  00A6               	movwf	atoi@s
  6570  0535  3002               	movlw	2
  6571  0536  00A7               	movwf	atoi@s+1
  6572  0537  3189  21AC         	fcall	_atoi
  6573  0539  0020               	movlb	0	; select bank0
  6574  053A  0826               	movf	?_atoi,w
  6575  053B  00DC               	movwf	??_command_handler
  6576  053C  085C               	movf	??_command_handler,w
  6577  053D  0021               	movlb	1	; select bank1
  6578  053E  00EE               	movwf	_BACKPLANE_SLAVE_ADDRESS^(0+128)
  6579                           
  6580                           ;main.c: 365: } else if (!strncmp(("MAP"), (buf), 3)) {
  6581  053F  0008               	return
  6582  0540                     l5563:	
  6583  0540  3095               	movlw	low (STR_21| (0+32768))
  6584  0541  0020               	movlb	0	; select bank0
  6585  0542  00A0               	movwf	strncmp@s1
  6586  0543  3091               	movlw	high (STR_21| (0+32768))
  6587  0544  00A1               	movwf	strncmp@s1+1
  6588  0545  085B               	movf	command_handler@buf,w
  6589  0546  00A2               	movwf	strncmp@s2
  6590  0547  3002               	movlw	2
  6591  0548  00A3               	movwf	strncmp@s2+1
  6592  0549  3003               	movlw	3
  6593  054A  00A4               	movwf	strncmp@len
  6594  054B  3000               	movlw	0
  6595  054C  00A5               	movwf	strncmp@len+1
  6596  054D  3196  264A  3185   	fcall	_strncmp
  6597  0550  0020               	movlb	0	; select bank0
  6598  0551  0820               	movf	?_strncmp,w
  6599  0552  0421               	iorwf	?_strncmp+1,w
  6600  0553  1D03               	btfss	3,2
  6601  0554  2D58               	goto	l5567
  6602                           
  6603                           ;main.c: 366: print_dev_map();
  6604  0555  3196  26D2         	fcall	_print_dev_map
  6605                           
  6606                           ;main.c: 367: } else if (!strncmp(("SCN"), (buf), 3)) {
  6607  0557  0008               	return
  6608  0558                     l5567:	
  6609  0558  3089               	movlw	low (STR_22| (0+32768))
  6610  0559  0020               	movlb	0	; select bank0
  6611  055A  00A0               	movwf	strncmp@s1
  6612  055B  3091               	movlw	high (STR_22| (0+32768))
  6613  055C  00A1               	movwf	strncmp@s1+1
  6614  055D  085B               	movf	command_handler@buf,w
  6615  055E  00A2               	movwf	strncmp@s2
  6616  055F  3002               	movlw	2
  6617  0560  00A3               	movwf	strncmp@s2+1
  6618  0561  3003               	movlw	3
  6619  0562  00A4               	movwf	strncmp@len
  6620  0563  3000               	movlw	0
  6621  0564  00A5               	movwf	strncmp@len+1
  6622  0565  3196  264A  3185   	fcall	_strncmp
  6623  0568  0020               	movlb	0	; select bank0
  6624  0569  0820               	movf	?_strncmp,w
  6625  056A  0421               	iorwf	?_strncmp+1,w
  6626  056B  1D03               	btfss	3,2
  6627  056C  2D70               	goto	l5571
  6628                           
  6629                           ;main.c: 368: check_plg();
  6630  056D  3192  22C6         	fcall	_check_plg
  6631                           
  6632                           ;main.c: 369: } else if (!strncmp(("POS"), (buf), 3)) {
  6633  056F  0008               	return
  6634  0570                     l5571:	
  6635  0570  309D               	movlw	low (STR_23| (0+32768))
  6636  0571  0020               	movlb	0	; select bank0
  6637  0572  00A0               	movwf	strncmp@s1
  6638  0573  3091               	movlw	high (STR_23| (0+32768))
  6639  0574  00A1               	movwf	strncmp@s1+1
  6640  0575  085B               	movf	command_handler@buf,w
  6641  0576  00A2               	movwf	strncmp@s2
  6642  0577  3002               	movlw	2
  6643  0578  00A3               	movwf	strncmp@s2+1
  6644  0579  3003               	movlw	3
  6645  057A  00A4               	movwf	strncmp@len
  6646  057B  3000               	movlw	0
  6647  057C  00A5               	movwf	strncmp@len+1
  6648  057D  3196  264A  3185   	fcall	_strncmp
  6649  0580  0020               	movlb	0	; select bank0
  6650  0581  0820               	movf	?_strncmp,w
  6651  0582  0421               	iorwf	?_strncmp+1,w
  6652  0583  1D03               	btfss	3,2
  6653  0584  2D9D               	goto	l5579
  6654                           
  6655                           ;main.c: 370: pos = atoi(&buf[4]);
  6656  0585  085B               	movf	command_handler@buf,w
  6657  0586  3E04               	addlw	4
  6658  0587  00A6               	movwf	atoi@s
  6659  0588  3002               	movlw	2
  6660  0589  00A7               	movwf	atoi@s+1
  6661  058A  3189  21AC  3185   	fcall	_atoi
  6662  058D  0020               	movlb	0	; select bank0
  6663  058E  0826               	movf	?_atoi,w
  6664  058F  00DC               	movwf	??_command_handler
  6665  0590  085C               	movf	??_command_handler,w
  6666  0591  00EC               	movwf	command_handler@pos
  6667                           
  6668                           ;main.c: 371: if (pos > 27) printf("!:POS:POS LARGER THAN 27\n");
  6669  0592  301C               	movlw	28
  6670  0593  026C               	subwf	command_handler@pos,w
  6671  0594  1C03               	skipc
  6672  0595  0008               	return
  6673  0596  3025               	movlw	low (STR_24| (0+32768))
  6674  0597  00AE               	movwf	printf@f
  6675  0598  3090               	movlw	high (STR_24| (0+32768))
  6676  0599  00AF               	movwf	printf@f+1
  6677  059A  318E  262B         	fcall	_printf
  6678                           
  6679                           ;main.c: 372: } else if (!strncmp(("WSC"), (buf), 3)) {
  6680  059C  0008               	return
  6681  059D                     l5579:	
  6682  059D  3085               	movlw	low (STR_25| (0+32768))
  6683  059E  0020               	movlb	0	; select bank0
  6684  059F  00A0               	movwf	strncmp@s1
  6685  05A0  3091               	movlw	high (STR_25| (0+32768))
  6686  05A1  00A1               	movwf	strncmp@s1+1
  6687  05A2  085B               	movf	command_handler@buf,w
  6688  05A3  00A2               	movwf	strncmp@s2
  6689  05A4  3002               	movlw	2
  6690  05A5  00A3               	movwf	strncmp@s2+1
  6691  05A6  3003               	movlw	3
  6692  05A7  00A4               	movwf	strncmp@len
  6693  05A8  3000               	movlw	0
  6694  05A9  00A5               	movwf	strncmp@len+1
  6695  05AA  3196  264A  3185   	fcall	_strncmp
  6696  05AD  0020               	movlb	0	; select bank0
  6697  05AE  0820               	movf	?_strncmp,w
  6698  05AF  0421               	iorwf	?_strncmp+1,w
  6699  05B0  1D03               	btfss	3,2
  6700  05B1  2DF9               	goto	l5591
  6701                           
  6702                           ;main.c: 373: if (pos <= 27) {
  6703  05B2  301C               	movlw	28
  6704  05B3  026C               	subwf	command_handler@pos,w
  6705  05B4  1803               	skipnc
  6706  05B5  2DF2               	goto	l5589
  6707                           
  6708                           ;main.c: 374: dev_addr = atoi(&buf[4]);
  6709  05B6  085B               	movf	command_handler@buf,w
  6710  05B7  3E04               	addlw	4
  6711  05B8  00A6               	movwf	atoi@s
  6712  05B9  3002               	movlw	2
  6713  05BA  00A7               	movwf	atoi@s+1
  6714  05BB  3189  21AC  3185   	fcall	_atoi
  6715  05BE  0020               	movlb	0	; select bank0
  6716  05BF  0826               	movf	?_atoi,w
  6717  05C0  00DC               	movwf	??_command_handler
  6718  05C1  085C               	movf	??_command_handler,w
  6719  05C2  00E3               	movwf	command_handler@dev_addr
  6720                           
  6721                           ;main.c: 375: DATAEE_WriteByte(1 + pos + 1, dev_addr);
  6722  05C3  0863               	movf	command_handler@dev_addr,w
  6723  05C4  00DC               	movwf	??_command_handler
  6724  05C5  085C               	movf	??_command_handler,w
  6725  05C6  00A0               	movwf	DATAEE_WriteByte@bData
  6726  05C7  086C               	movf	command_handler@pos,w
  6727  05C8  3E02               	addlw	2
  6728  05C9  3193  23D9  3185   	fcall	_DATAEE_WriteByte
  6729                           
  6730                           ;main.c: 376: schedule[pos/4][pos%4] = dev_addr;
  6731  05CC  0020               	movlb	0	; select bank0
  6732  05CD  0863               	movf	command_handler@dev_addr,w
  6733  05CE  00DC               	movwf	??_command_handler
  6734  05CF  3004               	movlw	4
  6735  05D0  00A0               	movwf	___awdiv@divisor
  6736  05D1  3000               	movlw	0
  6737  05D2  00A1               	movwf	___awdiv@divisor+1
  6738  05D3  086C               	movf	command_handler@pos,w
  6739  05D4  00DD               	movwf	??_command_handler+1
  6740  05D5  01DE               	clrf	??_command_handler+2
  6741  05D6  085D               	movf	??_command_handler+1,w
  6742  05D7  00A2               	movwf	___awdiv@dividend
  6743  05D8  085E               	movf	??_command_handler+2,w
  6744  05D9  00A3               	movwf	___awdiv@dividend+1
  6745  05DA  3188  2058  3185   	fcall	___awdiv
  6746  05DD  0020               	movlb	0	; select bank0
  6747  05DE  0820               	movf	?___awdiv,w
  6748  05DF  00DF               	movwf	??_command_handler+3
  6749  05E0  3002               	movlw	2
  6750  05E1                     u6535:	
  6751  05E1  35DF               	lslf	??_command_handler+3,f
  6752  05E2  0B89               	decfsz	9,f
  6753  05E3  2DE1               	goto	u6535
  6754  05E4  30A0               	movlw	(low (_schedule| (0+256)))& (0+255)
  6755  05E5  075F               	addwf	??_command_handler+3,w
  6756  05E6  00E0               	movwf	??_command_handler+4
  6757  05E7  086C               	movf	command_handler@pos,w
  6758  05E8  3903               	andlw	3
  6759  05E9  0760               	addwf	??_command_handler+4,w
  6760  05EA  00E1               	movwf	??_command_handler+5
  6761  05EB  0861               	movf	??_command_handler+5,w
  6762  05EC  0086               	movwf	6
  6763  05ED  3001               	movlw	1	; select bank3/4
  6764  05EE  0087               	movwf	7
  6765  05EF  085C               	movf	??_command_handler,w
  6766  05F0  0081               	movwf	1
  6767                           
  6768                           ;main.c: 377: } else {
  6769  05F1  0008               	return
  6770  05F2                     l5589:	
  6771                           
  6772                           ;main.c: 378: printf("!:WSC:POS LARGER THAN 27\n");
  6773  05F2  300B               	movlw	low (STR_26| (0+32768))
  6774  05F3  00AE               	movwf	printf@f
  6775  05F4  3090               	movlw	high (STR_26| (0+32768))
  6776  05F5  00AF               	movwf	printf@f+1
  6777  05F6  318E  262B         	fcall	_printf
  6778                           
  6779                           ;main.c: 379: }
  6780                           ;main.c: 380: } else if (!strncmp(("RSC"), (buf), 3)) {
  6781  05F8  0008               	return
  6782  05F9                     l5591:	
  6783  05F9  3081               	movlw	low (STR_27| (0+32768))
  6784  05FA  0020               	movlb	0	; select bank0
  6785  05FB  00A0               	movwf	strncmp@s1
  6786  05FC  3091               	movlw	high (STR_27| (0+32768))
  6787  05FD  00A1               	movwf	strncmp@s1+1
  6788  05FE  085B               	movf	command_handler@buf,w
  6789  05FF  00A2               	movwf	strncmp@s2
  6790  0600  3002               	movlw	2
  6791  0601  00A3               	movwf	strncmp@s2+1
  6792  0602  3003               	movlw	3
  6793  0603  00A4               	movwf	strncmp@len
  6794  0604  3000               	movlw	0
  6795  0605  00A5               	movwf	strncmp@len+1
  6796  0606  3196  264A  3185   	fcall	_strncmp
  6797  0609  0020               	movlb	0	; select bank0
  6798  060A  0820               	movf	?_strncmp,w
  6799  060B  0421               	iorwf	?_strncmp+1,w
  6800  060C  1D03               	btfss	3,2
  6801  060D  2E82               	goto	l5613
  6802                           
  6803                           ;main.c: 381: printf("$:RSC:");
  6804  060E  3044               	movlw	low (STR_28| (0+32768))
  6805  060F  00AE               	movwf	printf@f
  6806  0610  3091               	movlw	high (STR_28| (0+32768))
  6807  0611  00AF               	movwf	printf@f+1
  6808  0612  318E  262B  3185   	fcall	_printf
  6809                           
  6810                           ;main.c: 382: for (i=0; i<27; i++) {
  6811  0615  0020               	movlb	0	; select bank0
  6812  0616  01E4               	clrf	command_handler@i
  6813  0617  301B               	movlw	27
  6814  0618  0264               	subwf	command_handler@i,w
  6815  0619  1803               	btfsc	3,0
  6816  061A  2E72               	goto	l5611
  6817  061B                     l5601:	
  6818                           
  6819                           ;main.c: 383: if ((i+1) % 4 == 0) {
  6820  061B  0864               	movf	command_handler@i,w
  6821  061C  3E01               	addlw	1
  6822  061D  3903               	andlw	3
  6823  061E  1D03               	btfss	3,2
  6824  061F  2E3A               	goto	l5605
  6825                           
  6826                           ;main.c: 384: printf("%d|", schedule[i/4][i%4]);
  6827  0620  30AD               	movlw	low (STR_29| (0+32768))
  6828  0621  00AE               	movwf	printf@f
  6829  0622  3091               	movlw	high (STR_29| (0+32768))
  6830  0623  00AF               	movwf	printf@f+1
  6831  0624  3004               	movlw	4
  6832  0625  00A0               	movwf	___awdiv@divisor
  6833  0626  3000               	movlw	0
  6834  0627  00A1               	movwf	___awdiv@divisor+1
  6835  0628  0864               	movf	command_handler@i,w
  6836  0629  00DC               	movwf	??_command_handler
  6837  062A  01DD               	clrf	??_command_handler+1
  6838  062B  085C               	movf	??_command_handler,w
  6839  062C  00A2               	movwf	___awdiv@dividend
  6840  062D  085D               	movf	??_command_handler+1,w
  6841  062E  00A3               	movwf	___awdiv@dividend+1
  6842  062F  3188  2058  3185   	fcall	___awdiv
  6843  0632  0020               	movlb	0	; select bank0
  6844  0633  0820               	movf	?___awdiv,w
  6845  0634  00DE               	movwf	??_command_handler+2
  6846  0635  3002               	movlw	2
  6847  0636                     u6575:	
  6848  0636  35DE               	lslf	??_command_handler+2,f
  6849  0637  0B89               	decfsz	9,f
  6850  0638  2E36               	goto	u6575
  6851  0639  2E54               	goto	L8
  6852  063A                     l5605:	
  6853                           ;main.c: 385: } else {
  6854                           
  6855                           
  6856                           ;main.c: 386: printf("%d,", schedule[i/4][i%4]);
  6857  063A  3071               	movlw	low (STR_14| (0+32768))
  6858  063B  0020               	movlb	0	; select bank0
  6859  063C  00AE               	movwf	printf@f
  6860  063D  3091               	movlw	high (STR_14| (0+32768))
  6861  063E  00AF               	movwf	printf@f+1
  6862  063F  3004               	movlw	4
  6863  0640  00A0               	movwf	___awdiv@divisor
  6864  0641  3000               	movlw	0
  6865  0642  00A1               	movwf	___awdiv@divisor+1
  6866  0643  0864               	movf	command_handler@i,w
  6867  0644  00DC               	movwf	??_command_handler
  6868  0645  01DD               	clrf	??_command_handler+1
  6869  0646  085C               	movf	??_command_handler,w
  6870  0647  00A2               	movwf	___awdiv@dividend
  6871  0648  085D               	movf	??_command_handler+1,w
  6872  0649  00A3               	movwf	___awdiv@dividend+1
  6873  064A  3188  2058  3185   	fcall	___awdiv
  6874  064D  0020               	movlb	0	; select bank0
  6875  064E  0820               	movf	?___awdiv,w
  6876  064F  00DE               	movwf	??_command_handler+2
  6877  0650  3002               	movlw	2
  6878  0651                     u6585:	
  6879  0651  35DE               	lslf	??_command_handler+2,f
  6880  0652  0B89               	decfsz	9,f
  6881  0653  2E51               	goto	u6585
  6882  0654                     L8:	
  6883  0654  30A0               	movlw	(low (_schedule| (0+256)))& (0+255)
  6884  0655  075E               	addwf	??_command_handler+2,w
  6885  0656  00DF               	movwf	??_command_handler+3
  6886  0657  0864               	movf	command_handler@i,w
  6887  0658  3903               	andlw	3
  6888  0659  075F               	addwf	??_command_handler+3,w
  6889  065A  00E0               	movwf	??_command_handler+4
  6890  065B  0860               	movf	??_command_handler+4,w
  6891  065C  0086               	movwf	6
  6892  065D  3001               	movlw	1	; select bank3/4
  6893  065E  0087               	movwf	7
  6894  065F  0801               	movf	1,w
  6895  0660  00E1               	movwf	??_command_handler+5
  6896  0661  01E2               	clrf	??_command_handler+6
  6897  0662  0861               	movf	??_command_handler+5,w
  6898  0663  00B0               	movwf	?_printf+2
  6899  0664  0862               	movf	??_command_handler+6,w
  6900  0665  00B1               	movwf	?_printf+3
  6901  0666  318E  262B  3185   	fcall	_printf
  6902  0669  3001               	movlw	1
  6903  066A  0020               	movlb	0	; select bank0
  6904  066B  00DC               	movwf	??_command_handler
  6905  066C  085C               	movf	??_command_handler,w
  6906  066D  07E4               	addwf	command_handler@i,f
  6907  066E  301B               	movlw	27
  6908  066F  0264               	subwf	command_handler@i,w
  6909  0670  1C03               	skipc
  6910  0671  2E1B               	goto	l5601
  6911  0672                     l5611:	
  6912                           
  6913                           ;main.c: 387: }
  6914                           ;main.c: 388: }
  6915                           ;main.c: 389: printf("%d\n", schedule[6][3]);
  6916  0672  30DA               	movlw	low ((STR_49+6)| (0+32768))
  6917  0673  00AE               	movwf	printf@f
  6918  0674  3090               	movlw	high ((STR_49+6)| (0+32768))
  6919  0675  00AF               	movwf	printf@f+1
  6920  0676  0023               	movlb	3	; select bank3
  6921  0677  083B               	movf	(_schedule^(0+384)+27),w
  6922  0678  0020               	movlb	0	; select bank0
  6923  0679  00DC               	movwf	??_command_handler
  6924  067A  01DD               	clrf	??_command_handler+1
  6925  067B  085C               	movf	??_command_handler,w
  6926  067C  00B0               	movwf	?_printf+2
  6927  067D  085D               	movf	??_command_handler+1,w
  6928  067E  00B1               	movwf	?_printf+3
  6929  067F  318E  262B         	fcall	_printf
  6930                           
  6931                           ;main.c: 390: } else if (!strncmp(("CSC"), (buf), 3)) {
  6932  0681  0008               	return
  6933  0682                     l5613:	
  6934  0682  307D               	movlw	low (STR_32| (0+32768))
  6935  0683  0020               	movlb	0	; select bank0
  6936  0684  00A0               	movwf	strncmp@s1
  6937  0685  3091               	movlw	high (STR_32| (0+32768))
  6938  0686  00A1               	movwf	strncmp@s1+1
  6939  0687  085B               	movf	command_handler@buf,w
  6940  0688  00A2               	movwf	strncmp@s2
  6941  0689  3002               	movlw	2
  6942  068A  00A3               	movwf	strncmp@s2+1
  6943  068B  3003               	movlw	3
  6944  068C  00A4               	movwf	strncmp@len
  6945  068D  3000               	movlw	0
  6946  068E  00A5               	movwf	strncmp@len+1
  6947  068F  3196  264A  3185   	fcall	_strncmp
  6948  0692  0020               	movlb	0	; select bank0
  6949  0693  0820               	movf	?_strncmp,w
  6950  0694  0421               	iorwf	?_strncmp+1,w
  6951  0695  1D03               	btfss	3,2
  6952  0696  2EC9               	goto	l5629
  6953                           
  6954                           ;main.c: 391: for (i=0; i<28; i++) {
  6955  0697  01E4               	clrf	command_handler@i
  6956  0698                     L9:	
  6957  0698  301C               	movlw	28
  6958  0699  0264               	subwf	command_handler@i,w
  6959  069A  1803               	btfsc	3,0
  6960  069B  0008               	return
  6961                           
  6962                           ;main.c: 392: DATAEE_WriteByte(1+i+1, 0);
  6963  069C  01A0               	clrf	DATAEE_WriteByte@bData
  6964  069D  0864               	movf	command_handler@i,w
  6965  069E  3E02               	addlw	2
  6966  069F  3193  23D9  3185   	fcall	_DATAEE_WriteByte
  6967                           
  6968                           ;main.c: 393: schedule[i/4][i%4] = 0;
  6969  06A2  3004               	movlw	4
  6970  06A3  0020               	movlb	0	; select bank0
  6971  06A4  00A0               	movwf	___awdiv@divisor
  6972  06A5  3000               	movlw	0
  6973  06A6  00A1               	movwf	___awdiv@divisor+1
  6974  06A7  0864               	movf	command_handler@i,w
  6975  06A8  00DC               	movwf	??_command_handler
  6976  06A9  01DD               	clrf	??_command_handler+1
  6977  06AA  085C               	movf	??_command_handler,w
  6978  06AB  00A2               	movwf	___awdiv@dividend
  6979  06AC  085D               	movf	??_command_handler+1,w
  6980  06AD  00A3               	movwf	___awdiv@dividend+1
  6981  06AE  3188  2058  3185   	fcall	___awdiv
  6982  06B1  0020               	movlb	0	; select bank0
  6983  06B2  0820               	movf	?___awdiv,w
  6984  06B3  00DE               	movwf	??_command_handler+2
  6985  06B4  3002               	movlw	2
  6986  06B5                     u6625:	
  6987  06B5  35DE               	lslf	??_command_handler+2,f
  6988  06B6  0B89               	decfsz	9,f
  6989  06B7  2EB5               	goto	u6625
  6990  06B8  30A0               	movlw	(low (_schedule| (0+256)))& (0+255)
  6991  06B9  075E               	addwf	??_command_handler+2,w
  6992  06BA  00DF               	movwf	??_command_handler+3
  6993  06BB  0864               	movf	command_handler@i,w
  6994  06BC  3903               	andlw	3
  6995  06BD  075F               	addwf	??_command_handler+3,w
  6996  06BE  00E0               	movwf	??_command_handler+4
  6997  06BF  0860               	movf	??_command_handler+4,w
  6998  06C0  0086               	movwf	6
  6999  06C1  3001               	movlw	1	; select bank3/4
  7000  06C2  0087               	movwf	7
  7001  06C3  0181               	clrf	1
  7002  06C4  3001               	movlw	1
  7003  06C5  00DC               	movwf	??_command_handler
  7004  06C6  085C               	movf	??_command_handler,w
  7005  06C7  07E4               	addwf	command_handler@i,f
  7006  06C8  2E98               	goto	L9
  7007  06C9                     l5629:	
  7008                           ;main.c: 394: }
  7009                           ;main.c: 395: } else if (!strncmp(("SEN"), (buf), 3)) {
  7010                           
  7011  06C9  308D               	movlw	low (STR_33| (0+32768))
  7012  06CA  00A0               	movwf	strncmp@s1
  7013  06CB  3091               	movlw	high (STR_33| (0+32768))
  7014  06CC  00A1               	movwf	strncmp@s1+1
  7015  06CD  085B               	movf	command_handler@buf,w
  7016  06CE  00A2               	movwf	strncmp@s2
  7017  06CF  3002               	movlw	2
  7018  06D0  00A3               	movwf	strncmp@s2+1
  7019  06D1  3003               	movlw	3
  7020  06D2  00A4               	movwf	strncmp@len
  7021  06D3  3000               	movlw	0
  7022  06D4  00A5               	movwf	strncmp@len+1
  7023  06D5  3196  264A  3185   	fcall	_strncmp
  7024  06D8  0020               	movlb	0	; select bank0
  7025  06D9  0820               	movf	?_strncmp,w
  7026  06DA  0421               	iorwf	?_strncmp+1,w
  7027  06DB  1D03               	btfss	3,2
  7028  06DC  2EEE               	goto	l5635
  7029                           
  7030                           ;main.c: 396: dev_addr = atoi(&buf[4]);
  7031  06DD  085B               	movf	command_handler@buf,w
  7032  06DE  3E04               	addlw	4
  7033  06DF  00A6               	movwf	atoi@s
  7034  06E0  3002               	movlw	2
  7035  06E1  00A7               	movwf	atoi@s+1
  7036  06E2  3189  21AC  3185   	fcall	_atoi
  7037  06E5  0020               	movlb	0	; select bank0
  7038  06E6  0826               	movf	?_atoi,w
  7039  06E7  00DC               	movwf	??_command_handler
  7040  06E8  085C               	movf	??_command_handler,w
  7041  06E9  00E3               	movwf	command_handler@dev_addr
  7042                           
  7043                           ;main.c: 397: one_shot_sen(dev_addr);
  7044  06EA  0863               	movf	command_handler@dev_addr,w
  7045  06EB  3196  2609         	fcall	_one_shot_sen
  7046                           
  7047                           ;main.c: 398: } else if (BACKPLANE_SLAVE_ADDRESS != 0x01) {
  7048  06ED  0008               	return
  7049  06EE                     l5635:	
  7050  06EE  0021               	movlb	1	; select bank1
  7051  06EF  036E               	decf	_BACKPLANE_SLAVE_ADDRESS^(0+128),w
  7052  06F0  1903               	btfsc	3,2
  7053  06F1  0008               	return
  7054                           
  7055                           ;main.c: 399: put_cmd(buf);
  7056  06F2  0020               	movlb	0	; select bank0
  7057  06F3  085B               	movf	command_handler@buf,w
  7058  06F4  3197  271A         	fcall	_put_cmd
  7059  06F6  0008               	return
  7060  06F7                     __end_of_command_handler:	
  7061                           
  7062                           	psect	text25
  7063  164A                     __ptext25:	
  7064 ;; *************** function _strncmp *****************
  7065 ;; Defined at:
  7066 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strncmp.c"
  7067 ;; Parameters:    Size  Location     Type
  7068 ;;  s1              2    0[BANK0 ] PTR const unsigned char 
  7069 ;;		 -> STR_48(4), STR_47(4), STR_45(4), STR_44(4), 
  7070 ;;		 -> STR_41(4), STR_40(4), STR_39(4), STR_37(4), 
  7071 ;;		 -> STR_33(4), STR_32(4), STR_27(4), STR_25(4), 
  7072 ;;		 -> STR_23(4), STR_22(4), STR_21(4), STR_20(4), 
  7073 ;;		 -> STR_10(4), STR_9(4), STR_6(4), STR_5(4), 
  7074 ;;		 -> STR_4(4), STR_1(4), 
  7075 ;;  s2              2    2[BANK0 ] PTR const unsigned char 
  7076 ;;		 -> buf(48), cmd_buf(192), 
  7077 ;;  len             2    4[BANK0 ] unsigned int 
  7078 ;; Auto vars:     Size  Location     Type
  7079 ;;		None
  7080 ;; Return value:  Size  Location     Type
  7081 ;;                  2    0[BANK0 ] int 
  7082 ;; Registers used:
  7083 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  7084 ;; Tracked objects:
  7085 ;;		On entry : 0/0
  7086 ;;		On exit  : 0/0
  7087 ;;		Unchanged: 0/0
  7088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7089 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7090 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7091 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7092 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7093 ;;Total ram usage:        8 bytes
  7094 ;; Hardware stack levels used:    1
  7095 ;; Hardware stack levels required when called:    3
  7096 ;; This function calls:
  7097 ;;		Nothing
  7098 ;; This function is called by:
  7099 ;;		_exec_remote_cmd
  7100 ;;		_command_handler
  7101 ;;		_PROTOCOL_Loop
  7102 ;; This function uses a non-reentrant model
  7103 ;;
  7104                           
  7105                           
  7106                           ;psect for function _strncmp
  7107  164A                     _strncmp:	
  7108  164A                     l5359:	
  7109                           ;incstack = 0
  7110                           ; Regs used in _strncmp: [wreg-fsr1h+status,2+status,0+pclath]
  7111                           
  7112  164A  3001               	movlw	1
  7113  164B  0020               	movlb	0	; select bank0
  7114  164C  02A4               	subwf	strncmp@len,f
  7115  164D  3000               	movlw	0
  7116  164E  3BA5               	subwfb	strncmp@len+1,f
  7117  164F  0A24               	incf	strncmp@len,w
  7118  1650  1903               	btfsc	3,2
  7119  1651  0A25               	incf	strncmp@len+1,w
  7120  1652  1903               	btfsc	3,2
  7121  1653  2E89               	goto	l5361
  7122  1654  0020               	movlb	0	; select bank0
  7123  1655  0820               	movf	strncmp@s1,w
  7124  1656  0084               	movwf	4
  7125  1657  0821               	movf	strncmp@s1+1,w
  7126  1658  0085               	movwf	5
  7127  1659  0012               	moviw fsr0++
  7128  165A  1903               	btfsc	3,2
  7129  165B  2E68               	goto	l5353
  7130  165C  0822               	movf	strncmp@s2,w
  7131  165D  0086               	movwf	6
  7132  165E  0823               	movf	strncmp@s2+1,w
  7133  165F  0087               	movwf	7
  7134  1660  0820               	movf	strncmp@s1,w
  7135  1661  0084               	movwf	4
  7136  1662  0821               	movf	strncmp@s1+1,w
  7137  1663  0085               	movwf	5
  7138  1664  0800               	movf	0,w	;code access
  7139  1665  0601               	xorwf	1,w
  7140  1666  1903               	skipnz
  7141  1667  2E80               	goto	l5357
  7142  1668                     l5353:	
  7143  1668  0822               	movf	strncmp@s2,w
  7144  1669  0086               	movwf	6
  7145  166A  0823               	movf	strncmp@s2+1,w
  7146  166B  0087               	movwf	7
  7147  166C  0801               	movf	1,w
  7148  166D  00A6               	movwf	??_strncmp
  7149  166E  01A7               	clrf	??_strncmp+1
  7150  166F  09A6               	comf	??_strncmp,f
  7151  1670  09A7               	comf	??_strncmp+1,f
  7152  1671  0AA6               	incf	??_strncmp,f
  7153  1672  1903               	skipnz
  7154  1673  0AA7               	incf	??_strncmp+1,f
  7155  1674  0820               	movf	strncmp@s1,w
  7156  1675  0084               	movwf	4
  7157  1676  0821               	movf	strncmp@s1+1,w
  7158  1677  0085               	movwf	5
  7159  1678  0800               	movf	0,w	;code access
  7160  1679  0726               	addwf	??_strncmp,w
  7161  167A  00A0               	movwf	?_strncmp
  7162  167B  0827               	movf	??_strncmp+1,w
  7163  167C  1803               	skipnc
  7164  167D  0A27               	incf	??_strncmp+1,w
  7165  167E  00A1               	movwf	?_strncmp+1
  7166  167F  0008               	return
  7167  1680                     l5357:	
  7168  1680  3001               	movlw	1
  7169  1681  07A0               	addwf	strncmp@s1,f
  7170  1682  3000               	movlw	0
  7171  1683  3DA1               	addwfc	strncmp@s1+1,f
  7172  1684  3001               	movlw	1
  7173  1685  07A2               	addwf	strncmp@s2,f
  7174  1686  3000               	movlw	0
  7175  1687  3DA3               	addwfc	strncmp@s2+1,f
  7176  1688  2E4A               	goto	l5359
  7177  1689                     l5361:	
  7178  1689  01A0               	clrf	?_strncmp
  7179  168A  01A1               	clrf	?_strncmp+1
  7180  168B  0008               	return
  7181  168C                     __end_of_strncmp:	
  7182                           
  7183                           	psect	text26
  7184  171A                     __ptext26:	
  7185 ;; *************** function _put_cmd *****************
  7186 ;; Defined at:
  7187 ;;		line 348 in file "main.c"
  7188 ;; Parameters:    Size  Location     Type
  7189 ;;  buf             1    wreg     PTR unsigned char 
  7190 ;;		 -> buf(48), 
  7191 ;; Auto vars:     Size  Location     Type
  7192 ;;  buf             1   17[BANK0 ] PTR unsigned char 
  7193 ;;		 -> buf(48), 
  7194 ;; Return value:  Size  Location     Type
  7195 ;;                  1    wreg      void 
  7196 ;; Registers used:
  7197 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7198 ;; Tracked objects:
  7199 ;;		On entry : 0/0
  7200 ;;		On exit  : 0/0
  7201 ;;		Unchanged: 0/0
  7202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7204 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7205 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7206 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7207 ;;Total ram usage:        6 bytes
  7208 ;; Hardware stack levels used:    1
  7209 ;; Hardware stack levels required when called:    4
  7210 ;; This function calls:
  7211 ;;		___wmul
  7212 ;;		_strcpy
  7213 ;; This function is called by:
  7214 ;;		_command_handler
  7215 ;; This function uses a non-reentrant model
  7216 ;;
  7217                           
  7218                           
  7219                           ;psect for function _put_cmd
  7220  171A                     _put_cmd:	
  7221                           
  7222                           ;incstack = 0
  7223                           ; Regs used in _put_cmd: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7224                           ;put_cmd@buf stored from wreg
  7225  171A  0020               	movlb	0	; select bank0
  7226  171B  00B1               	movwf	put_cmd@buf
  7227                           
  7228                           ;main.c: 349: static int8_t idx = -1;
  7229                           ;main.c: 350: if (++idx > 3) idx = 0;
  7230  171C  3001               	movlw	1
  7231  171D  00AC               	movwf	??_put_cmd
  7232  171E  082C               	movf	??_put_cmd,w
  7233  171F  0021               	movlb	1	; select bank1
  7234  1720  07EC               	addwf	put_cmd@idx^(0+128),f
  7235  1721  086C               	movf	put_cmd@idx^(0+128),w
  7236  1722  3A80               	xorlw	128
  7237  1723  3E7C               	addlw	-132
  7238  1724  1803               	btfsc	3,0
  7239  1725  01EC               	clrf	put_cmd@idx^(0+128)
  7240                           
  7241                           ;main.c: 351: if (cmd_buf[idx][0] == '\0') strcpy(cmd_buf[idx], buf);
  7242  1726  086C               	movf	put_cmd@idx^(0+128),w
  7243  1727  0020               	movlb	0	; select bank0
  7244  1728  00AC               	movwf	??_put_cmd
  7245  1729  01AD               	clrf	??_put_cmd+1
  7246  172A  082C               	movf	??_put_cmd,w
  7247  172B  00A0               	movwf	___wmul@multiplier
  7248  172C  082D               	movf	??_put_cmd+1,w
  7249  172D  00A1               	movwf	___wmul@multiplier+1
  7250  172E  3030               	movlw	48
  7251  172F  00A2               	movwf	___wmul@multiplicand
  7252  1730  3000               	movlw	0
  7253  1731  00A3               	movwf	___wmul@multiplicand+1
  7254  1732  3193  2362  3197   	fcall	___wmul
  7255  1735  3030               	movlw	48
  7256  1736  0020               	movlb	0	; select bank0
  7257  1737  00AE               	movwf	??_put_cmd+2
  7258  1738  3023               	movlw	35
  7259  1739  00AF               	movwf	??_put_cmd+3
  7260  173A  0820               	movf	?___wmul,w
  7261  173B  072E               	addwf	??_put_cmd+2,w
  7262  173C  0086               	movwf	6
  7263  173D  0821               	movf	?___wmul+1,w
  7264  173E  3D2F               	addwfc	??_put_cmd+3,w
  7265  173F  0087               	movwf	7
  7266  1740  0801               	movf	1,w
  7267  1741  1D03               	btfss	3,2
  7268  1742  0008               	return
  7269  1743  0021               	movlb	1	; select bank1
  7270  1744  086C               	movf	put_cmd@idx^(0+128),w
  7271  1745  0020               	movlb	0	; select bank0
  7272  1746  00AC               	movwf	??_put_cmd
  7273  1747  01AD               	clrf	??_put_cmd+1
  7274  1748  082C               	movf	??_put_cmd,w
  7275  1749  00A0               	movwf	___wmul@multiplier
  7276  174A  082D               	movf	??_put_cmd+1,w
  7277  174B  00A1               	movwf	___wmul@multiplier+1
  7278  174C  3030               	movlw	48
  7279  174D  00A2               	movwf	___wmul@multiplicand
  7280  174E  3000               	movlw	0
  7281  174F  00A3               	movwf	___wmul@multiplicand+1
  7282  1750  3193  2362  3197   	fcall	___wmul
  7283  1753  3030               	movlw	48
  7284  1754  0020               	movlb	0	; select bank0
  7285  1755  00AE               	movwf	??_put_cmd+2
  7286  1756  3023               	movlw	35
  7287  1757  00AF               	movwf	??_put_cmd+3
  7288  1758  0820               	movf	?___wmul,w
  7289  1759  072E               	addwf	??_put_cmd+2,w
  7290  175A  00A6               	movwf	strcpy@to
  7291  175B  0821               	movf	?___wmul+1,w
  7292  175C  3D2F               	addwfc	??_put_cmd+3,w
  7293  175D  00A7               	movwf	strcpy@to+1
  7294  175E  0831               	movf	put_cmd@buf,w
  7295  175F  00B0               	movwf	??_put_cmd+4
  7296  1760  0830               	movf	??_put_cmd+4,w
  7297  1761  00A8               	movwf	strcpy@from
  7298  1762  3193  230F         	fcall	_strcpy
  7299  1764  0008               	return
  7300  1765                     __end_of_put_cmd:	
  7301                           
  7302                           	psect	text27
  7303  130F                     __ptext27:	
  7304 ;; *************** function _strcpy *****************
  7305 ;; Defined at:
  7306 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strcpy.c"
  7307 ;; Parameters:    Size  Location     Type
  7308 ;;  to              2    6[BANK0 ] PTR unsigned char 
  7309 ;;		 -> cmd_buf(192), 
  7310 ;;  from            1    8[BANK0 ] PTR const unsigned char 
  7311 ;;		 -> buf(48), 
  7312 ;; Auto vars:     Size  Location     Type
  7313 ;;  cp              2   10[BANK0 ] PTR unsigned char 
  7314 ;;		 -> cmd_buf(192), 
  7315 ;; Return value:  Size  Location     Type
  7316 ;;                  2    6[BANK0 ] PTR unsigned char 
  7317 ;; Registers used:
  7318 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  7319 ;; Tracked objects:
  7320 ;;		On entry : 0/0
  7321 ;;		On exit  : 0/0
  7322 ;;		Unchanged: 0/0
  7323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7324 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7325 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7326 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7327 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7328 ;;Total ram usage:        6 bytes
  7329 ;; Hardware stack levels used:    1
  7330 ;; Hardware stack levels required when called:    3
  7331 ;; This function calls:
  7332 ;;		Nothing
  7333 ;; This function is called by:
  7334 ;;		_put_cmd
  7335 ;; This function uses a non-reentrant model
  7336 ;;
  7337                           
  7338                           
  7339                           ;psect for function _strcpy
  7340  130F                     _strcpy:	
  7341                           
  7342                           ;incstack = 0
  7343                           ; Regs used in _strcpy: [wreg-fsr1h+status,2+status,0]
  7344  130F  0020               	movlb	0	; select bank0
  7345  1310  0827               	movf	strcpy@to+1,w
  7346  1311  00AB               	movwf	strcpy@cp+1
  7347  1312  0826               	movf	strcpy@to,w
  7348  1313  00AA               	movwf	strcpy@cp
  7349  1314                     l5325:	
  7350  1314  082A               	movf	strcpy@cp,w
  7351  1315  0086               	movwf	6
  7352  1316  082B               	movf	strcpy@cp+1,w
  7353  1317  0087               	movwf	7
  7354  1318  0828               	movf	strcpy@from,w
  7355  1319  0084               	movwf	4
  7356  131A  3002               	movlw	2	; select bank4/5
  7357  131B  0085               	movwf	5
  7358  131C  0800               	movf	0,w
  7359  131D  3FC0               	movwi [0]fsr1
  7360  131E  0889               	movf	9,f
  7361  131F  1903               	btfsc	3,2
  7362  1320  0008               	return
  7363  1321  3001               	movlw	1
  7364  1322  07AA               	addwf	strcpy@cp,f
  7365  1323  3000               	movlw	0
  7366  1324  3DAB               	addwfc	strcpy@cp+1,f
  7367  1325  3001               	movlw	1
  7368  1326  00A9               	movwf	??_strcpy
  7369  1327  0829               	movf	??_strcpy,w
  7370  1328  07A8               	addwf	strcpy@from,f
  7371  1329  2B14               	goto	l5325
  7372  132A                     __end_of_strcpy:	
  7373                           ;	Return value of _strcpy is never used
  7374                           
  7375                           
  7376                           	psect	text28
  7377  16D2                     __ptext28:	
  7378 ;; *************** function _print_dev_map *****************
  7379 ;; Defined at:
  7380 ;;		line 225 in file "main.c"
  7381 ;; Parameters:    Size  Location     Type
  7382 ;;		None
  7383 ;; Auto vars:     Size  Location     Type
  7384 ;;  len             1   39[BANK0 ] unsigned char 
  7385 ;;  i               1   38[BANK0 ] unsigned char 
  7386 ;; Return value:  Size  Location     Type
  7387 ;;                  1    wreg      void 
  7388 ;; Registers used:
  7389 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7390 ;; Tracked objects:
  7391 ;;		On entry : 0/0
  7392 ;;		On exit  : 0/0
  7393 ;;		Unchanged: 0/0
  7394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7396 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7397 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7398 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7399 ;;Total ram usage:        4 bytes
  7400 ;; Hardware stack levels used:    1
  7401 ;; Hardware stack levels required when called:    6
  7402 ;; This function calls:
  7403 ;;		_dev_map_iterator
  7404 ;;		_printf
  7405 ;; This function is called by:
  7406 ;;		_command_handler
  7407 ;; This function uses a non-reentrant model
  7408 ;;
  7409                           
  7410                           
  7411                           ;psect for function _print_dev_map
  7412  16D2                     _print_dev_map:	
  7413                           
  7414                           ;main.c: 226: uint8_t i;
  7415                           ;main.c: 227: uint8_t len = devs;
  7416                           
  7417                           ;incstack = 0
  7418                           ; Regs used in _print_dev_map: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7419  16D2  0021               	movlb	1	; select bank1
  7420  16D3  0864               	movf	_devs^(0+128),w
  7421  16D4  0020               	movlb	0	; select bank0
  7422  16D5  00C4               	movwf	??_print_dev_map
  7423  16D6  0844               	movf	??_print_dev_map,w
  7424  16D7  00C7               	movwf	print_dev_map@len
  7425                           
  7426                           ;main.c: 228: if (len > 0) {
  7427  16D8  0847               	movf	print_dev_map@len,w
  7428  16D9  1903               	btfsc	3,2
  7429  16DA  2F12               	goto	l5441
  7430                           
  7431                           ;main.c: 229: len--;
  7432  16DB  3001               	movlw	1
  7433  16DC  02C7               	subwf	print_dev_map@len,f
  7434                           
  7435                           ;main.c: 230: printf("$:MAP:");
  7436  16DD  304B               	movlw	low (STR_13| (0+32768))
  7437  16DE  00AE               	movwf	printf@f
  7438  16DF  3091               	movlw	high (STR_13| (0+32768))
  7439  16E0  00AF               	movwf	printf@f+1
  7440  16E1  318E  262B  3196   	fcall	_printf
  7441                           
  7442                           ;main.c: 231: for (i=0; i<len; i++) printf("%d,", dev_map_iterator());
  7443  16E4  0020               	movlb	0	; select bank0
  7444  16E5  01C6               	clrf	print_dev_map@i
  7445  16E6                     l5437:	
  7446  16E6  0847               	movf	print_dev_map@len,w
  7447  16E7  0246               	subwf	print_dev_map@i,w
  7448  16E8  1803               	btfsc	3,0
  7449  16E9  2F01               	goto	l5439
  7450  16EA  3071               	movlw	low (STR_14| (0+32768))
  7451  16EB  00AE               	movwf	printf@f
  7452  16EC  3091               	movlw	high (STR_14| (0+32768))
  7453  16ED  00AF               	movwf	printf@f+1
  7454  16EE  3189  2152  3196   	fcall	_dev_map_iterator
  7455  16F1  0020               	movlb	0	; select bank0
  7456  16F2  00C4               	movwf	??_print_dev_map
  7457  16F3  01C5               	clrf	??_print_dev_map+1
  7458  16F4  0844               	movf	??_print_dev_map,w
  7459  16F5  00B0               	movwf	?_printf+2
  7460  16F6  0845               	movf	??_print_dev_map+1,w
  7461  16F7  00B1               	movwf	?_printf+3
  7462  16F8  318E  262B  3196   	fcall	_printf
  7463  16FB  3001               	movlw	1
  7464  16FC  0020               	movlb	0	; select bank0
  7465  16FD  00C4               	movwf	??_print_dev_map
  7466  16FE  0844               	movf	??_print_dev_map,w
  7467  16FF  07C6               	addwf	print_dev_map@i,f
  7468  1700  2EE6               	goto	l5437
  7469  1701                     l5439:	
  7470                           
  7471                           ;main.c: 232: printf("%d\n", dev_map_iterator());
  7472  1701  30DA               	movlw	low ((STR_49+6)| (0+32768))
  7473  1702  00AE               	movwf	printf@f
  7474  1703  3090               	movlw	high ((STR_49+6)| (0+32768))
  7475  1704  00AF               	movwf	printf@f+1
  7476  1705  3189  2152  3196   	fcall	_dev_map_iterator
  7477  1708  0020               	movlb	0	; select bank0
  7478  1709  00C4               	movwf	??_print_dev_map
  7479  170A  01C5               	clrf	??_print_dev_map+1
  7480  170B  0844               	movf	??_print_dev_map,w
  7481  170C  00B0               	movwf	?_printf+2
  7482  170D  0845               	movf	??_print_dev_map+1,w
  7483  170E  00B1               	movwf	?_printf+3
  7484  170F  318E  262B         	fcall	_printf
  7485                           
  7486                           ;main.c: 233: } else {
  7487  1711  0008               	return
  7488  1712                     l5441:	
  7489                           
  7490                           ;main.c: 234: printf("!:MAP:NO SLAVE FOUND\n");
  7491  1712  3072               	movlw	low (STR_16| (0+32768))
  7492  1713  0020               	movlb	0	; select bank0
  7493  1714  00AE               	movwf	printf@f
  7494  1715  3090               	movlw	high (STR_16| (0+32768))
  7495  1716  00AF               	movwf	printf@f+1
  7496  1717  318E  262B         	fcall	_printf
  7497  1719  0008               	return
  7498  171A                     __end_of_print_dev_map:	
  7499                           
  7500                           	psect	text29
  7501  0952                     __ptext29:	
  7502 ;; *************** function _dev_map_iterator *****************
  7503 ;; Defined at:
  7504 ;;		line 161 in file "main.c"
  7505 ;; Parameters:    Size  Location     Type
  7506 ;;		None
  7507 ;; Auto vars:     Size  Location     Type
  7508 ;;  dev_addr        1    7[BANK0 ] unsigned char 
  7509 ;;  exist           1    6[BANK0 ] unsigned char 
  7510 ;; Return value:  Size  Location     Type
  7511 ;;                  1    wreg      unsigned char 
  7512 ;; Registers used:
  7513 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  7514 ;; Tracked objects:
  7515 ;;		On entry : 0/0
  7516 ;;		On exit  : 0/0
  7517 ;;		Unchanged: 0/0
  7518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7520 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7521 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7522 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7523 ;;Total ram usage:        8 bytes
  7524 ;; Hardware stack levels used:    1
  7525 ;; Hardware stack levels required when called:    3
  7526 ;; This function calls:
  7527 ;;		Nothing
  7528 ;; This function is called by:
  7529 ;;		_print_dev_map
  7530 ;; This function uses a non-reentrant model
  7531 ;;
  7532                           
  7533                           
  7534                           ;psect for function _dev_map_iterator
  7535  0952                     _dev_map_iterator:	
  7536                           
  7537                           ;main.c: 162: static uint8_t xx = 0;
  7538                           ;main.c: 163: static uint8_t yy = 0;
  7539                           ;main.c: 164: static bool start = 1;
  7540                           ;main.c: 165: bool exist = 0;
  7541                           
  7542                           ;incstack = 0
  7543                           ; Regs used in _dev_map_iterator: [wreg-fsr1h+status,2+status,0+pclath]
  7544  0952  0020               	movlb	0	; select bank0
  7545  0953  01A6               	clrf	dev_map_iterator@exist
  7546                           
  7547                           ;main.c: 166: uint8_t dev_addr;
  7548                           ;main.c: 168: if (devs) {
  7549  0954  0021               	movlb	1	; select bank1
  7550  0955  0864               	movf	_devs^(0+128),w
  7551  0956  1903               	btfsc	3,2
  7552  0957  29A9               	goto	l5247
  7553  0958                     l5231:	
  7554                           ;main.c: 169: while(1) {
  7555                           
  7556                           
  7557                           ;main.c: 170: if (xx > 7) {
  7558  0958  3008               	movlw	8
  7559  0959  0263               	subwf	dev_map_iterator@xx^(0+128),w
  7560  095A  1C03               	skipc
  7561  095B  2963               	goto	l5237
  7562                           
  7563                           ;main.c: 171: xx = 0;
  7564  095C  01E3               	clrf	dev_map_iterator@xx^(0+128)
  7565                           
  7566                           ;main.c: 172: yy++;
  7567  095D  3001               	movlw	1
  7568  095E  0020               	movlb	0	; select bank0
  7569  095F  00A0               	movwf	??_dev_map_iterator
  7570  0960  0820               	movf	??_dev_map_iterator,w
  7571  0961  0021               	movlb	1	; select bank1
  7572  0962  07E2               	addwf	dev_map_iterator@yy^(0+128),f
  7573  0963                     l5237:	
  7574                           
  7575                           ;main.c: 173: }
  7576                           ;main.c: 174: if (yy >= MAX_Y) {
  7577  0963  300A               	movlw	low (_MAX_Y| (0+32768))
  7578  0964  0084               	movwf	4
  7579  0965  3090               	movlw	high (_MAX_Y| (0+32768))
  7580  0966  0085               	movwf	5
  7581  0967  0800               	movf	0,w	;code access
  7582  0968  0262               	subwf	dev_map_iterator@yy^(0+128),w
  7583  0969  1C03               	skipc
  7584  096A  296D               	goto	l5241
  7585                           
  7586                           ;main.c: 175: xx = 0;
  7587  096B  01E3               	clrf	dev_map_iterator@xx^(0+128)
  7588                           
  7589                           ;main.c: 176: yy = 0;
  7590  096C  01E2               	clrf	dev_map_iterator@yy^(0+128)
  7591  096D                     l5241:	
  7592                           
  7593                           ;main.c: 177: }
  7594                           ;main.c: 178: if ((0x01 << xx) & dev_map[yy]) {
  7595  096D  0862               	movf	dev_map_iterator@yy^(0+128),w
  7596  096E  3E20               	addlw	(low (_dev_map| (0+256)))& (0+255)
  7597  096F  0086               	movwf	6
  7598  0970  3001               	movlw	1	; select bank2/3
  7599  0971  0087               	movwf	7
  7600  0972  0801               	movf	1,w
  7601  0973  0020               	movlb	0	; select bank0
  7602  0974  00A0               	movwf	??_dev_map_iterator
  7603  0975  01A1               	clrf	??_dev_map_iterator+1
  7604  0976  3001               	movlw	1
  7605  0977  00A2               	movwf	??_dev_map_iterator+2
  7606  0978  3000               	movlw	0
  7607  0979  00A3               	movwf	??_dev_map_iterator+3
  7608  097A  0021               	movlb	1	; select bank1
  7609  097B  0A63               	incf	dev_map_iterator@xx^(0+128),w
  7610  097C  0020               	movlb	0	; select bank0
  7611  097D  2980               	goto	u5964
  7612  097E                     u5965:	
  7613  097E  35A2               	lslf	??_dev_map_iterator+2,f
  7614  097F  0DA3               	rlf	??_dev_map_iterator+3,f
  7615  0980                     u5964:	
  7616  0980  0B89               	decfsz	9,f
  7617  0981  297E               	goto	u5965
  7618  0982  0820               	movf	??_dev_map_iterator,w
  7619  0983  0522               	andwf	??_dev_map_iterator+2,w
  7620  0984  00A4               	movwf	??_dev_map_iterator+4
  7621  0985  0821               	movf	??_dev_map_iterator+1,w
  7622  0986  0523               	andwf	??_dev_map_iterator+3,w
  7623  0987  00A5               	movwf	??_dev_map_iterator+5
  7624  0988  0824               	movf	??_dev_map_iterator+4,w
  7625  0989  0425               	iorwf	??_dev_map_iterator+5,w
  7626  098A  1903               	btfsc	3,2
  7627  098B  29A2               	goto	l5245
  7628                           
  7629                           ;main.c: 179: dev_addr = yy * 8 + xx++;
  7630  098C  0021               	movlb	1	; select bank1
  7631  098D  0862               	movf	dev_map_iterator@yy^(0+128),w
  7632  098E  0020               	movlb	0	; select bank0
  7633  098F  00A0               	movwf	??_dev_map_iterator
  7634  0990  3002               	movlw	2
  7635  0991                     u5985:	
  7636  0991  35A0               	lslf	??_dev_map_iterator,f
  7637  0992  3EFF               	addlw	-1
  7638  0993  1D03               	skipz
  7639  0994  2991               	goto	u5985
  7640  0995  3520               	lslf	??_dev_map_iterator,w
  7641  0996  0021               	movlb	1	; select bank1
  7642  0997  0763               	addwf	dev_map_iterator@xx^(0+128),w
  7643  0998  0020               	movlb	0	; select bank0
  7644  0999  00A1               	movwf	??_dev_map_iterator+1
  7645  099A  0821               	movf	??_dev_map_iterator+1,w
  7646  099B  00A7               	movwf	dev_map_iterator@dev_addr
  7647  099C  3001               	movlw	1
  7648  099D  00A0               	movwf	??_dev_map_iterator
  7649  099E  0820               	movf	??_dev_map_iterator,w
  7650  099F  0021               	movlb	1	; select bank1
  7651  09A0  07E3               	addwf	dev_map_iterator@xx^(0+128),f
  7652                           
  7653                           ;main.c: 180: break;
  7654  09A1  29A9               	goto	l5247
  7655  09A2                     l5245:	
  7656                           
  7657                           ;main.c: 181: }
  7658                           ;main.c: 182: xx++;
  7659  09A2  3001               	movlw	1
  7660  09A3  0020               	movlb	0	; select bank0
  7661  09A4  00A0               	movwf	??_dev_map_iterator
  7662  09A5  0820               	movf	??_dev_map_iterator,w
  7663  09A6  0021               	movlb	1	; select bank1
  7664  09A7  07E3               	addwf	dev_map_iterator@xx^(0+128),f
  7665  09A8  2958               	goto	l5231
  7666  09A9                     l5247:	
  7667                           
  7668                           ;main.c: 183: }
  7669                           ;main.c: 184: }
  7670                           ;main.c: 185: return dev_addr;
  7671  09A9  0020               	movlb	0	; select bank0
  7672  09AA  0827               	movf	dev_map_iterator@dev_addr,w
  7673  09AB  0008               	return
  7674  09AC                     __end_of_dev_map_iterator:	
  7675                           
  7676                           	psect	text30
  7677  1609                     __ptext30:	
  7678 ;; *************** function _one_shot_sen *****************
  7679 ;; Defined at:
  7680 ;;		line 275 in file "main.c"
  7681 ;; Parameters:    Size  Location     Type
  7682 ;;  dev_addr        1    wreg     unsigned char 
  7683 ;; Auto vars:     Size  Location     Type
  7684 ;;  dev_addr        1   58[BANK0 ] unsigned char 
  7685 ;;  status          1   57[BANK0 ] unsigned char 
  7686 ;; Return value:  Size  Location     Type
  7687 ;;                  1    wreg      void 
  7688 ;; Registers used:
  7689 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7690 ;; Tracked objects:
  7691 ;;		On entry : 0/0
  7692 ;;		On exit  : 0/0
  7693 ;;		Unchanged: 0/0
  7694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7696 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7697 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7698 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7699 ;;Total ram usage:        5 bytes
  7700 ;; Hardware stack levels used:    1
  7701 ;; Hardware stack levels required when called:    8
  7702 ;; This function calls:
  7703 ;;		_detected
  7704 ;;		_i2c1_write_no_data
  7705 ;;		_printf
  7706 ;;		_sen
  7707 ;; This function is called by:
  7708 ;;		_command_handler
  7709 ;; This function uses a non-reentrant model
  7710 ;;
  7711                           
  7712                           
  7713                           ;psect for function _one_shot_sen
  7714  1609                     _one_shot_sen:	
  7715                           
  7716                           ;incstack = 0
  7717                           ; Regs used in _one_shot_sen: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7718                           ;one_shot_sen@dev_addr stored from wreg
  7719  1609  0020               	movlb	0	; select bank0
  7720  160A  00DA               	movwf	one_shot_sen@dev_addr
  7721                           
  7722                           ;main.c: 276: if (!detected(dev_addr)) {
  7723  160B  085A               	movf	one_shot_sen@dev_addr,w
  7724  160C  3195  256D  3196   	fcall	_detected
  7725  160F  3A00               	xorlw	0
  7726  1610  1D03               	skipz
  7727  1611  2E21               	goto	l5447
  7728                           
  7729                           ;main.c: 277: printf("!:%%%d:UNDETECTED_DEVICE\n", dev_addr);
  7730  1612  303F               	movlw	low (STR_17| (0+32768))
  7731  1613  0020               	movlb	0	; select bank0
  7732  1614  00AE               	movwf	printf@f
  7733  1615  3090               	movlw	high (STR_17| (0+32768))
  7734  1616  00AF               	movwf	printf@f+1
  7735  1617  085A               	movf	one_shot_sen@dev_addr,w
  7736  1618  00D6               	movwf	??_one_shot_sen
  7737  1619  01D7               	clrf	??_one_shot_sen+1
  7738  161A  0856               	movf	??_one_shot_sen,w
  7739  161B  00B0               	movwf	?_printf+2
  7740  161C  0857               	movf	??_one_shot_sen+1,w
  7741  161D  00B1               	movwf	?_printf+3
  7742  161E  318E  262B         	fcall	_printf
  7743                           
  7744                           ;main.c: 278: } else {
  7745  1620  0008               	return
  7746  1621                     l5447:	
  7747                           
  7748                           ;main.c: 279: uint8_t status = sen(dev_addr);
  7749  1621  0020               	movlb	0	; select bank0
  7750  1622  085A               	movf	one_shot_sen@dev_addr,w
  7751  1623  3186  26F7  3196   	fcall	_sen
  7752  1626  0020               	movlb	0	; select bank0
  7753  1627  00D6               	movwf	??_one_shot_sen
  7754  1628  0856               	movf	??_one_shot_sen,w
  7755  1629  00D9               	movwf	one_shot_sen@status
  7756                           
  7757                           ;main.c: 280: if (status > 0) {
  7758  162A  0859               	movf	one_shot_sen@status,w
  7759  162B  1903               	btfsc	3,2
  7760  162C  0008               	return
  7761                           
  7762                           ;main.c: 281: printf("!:%%%d:NETWORK_ERROR\n", dev_addr);
  7763  162D  3088               	movlw	low (STR_18| (0+32768))
  7764  162E  00AE               	movwf	printf@f
  7765  162F  3090               	movlw	high (STR_18| (0+32768))
  7766  1630  00AF               	movwf	printf@f+1
  7767  1631  085A               	movf	one_shot_sen@dev_addr,w
  7768  1632  00D6               	movwf	??_one_shot_sen
  7769  1633  01D7               	clrf	??_one_shot_sen+1
  7770  1634  0856               	movf	??_one_shot_sen,w
  7771  1635  00B0               	movwf	?_printf+2
  7772  1636  0857               	movf	??_one_shot_sen+1,w
  7773  1637  00B1               	movwf	?_printf+3
  7774  1638  318E  262B  3196   	fcall	_printf
  7775                           
  7776                           ;main.c: 282: i2c1_write_no_data(dev_addr, 0x0c);
  7777  163B  0020               	movlb	0	; select bank0
  7778  163C  085A               	movf	one_shot_sen@dev_addr,w
  7779  163D  00D6               	movwf	??_one_shot_sen
  7780  163E  01D7               	clrf	??_one_shot_sen+1
  7781  163F  0856               	movf	??_one_shot_sen,w
  7782  1640  00AE               	movwf	i2c1_write_no_data@dev_addr
  7783  1641  0857               	movf	??_one_shot_sen+1,w
  7784  1642  00AF               	movwf	i2c1_write_no_data@dev_addr+1
  7785  1643  300C               	movlw	12
  7786  1644  00D8               	movwf	??_one_shot_sen+2
  7787  1645  0858               	movf	??_one_shot_sen+2,w
  7788  1646  00B0               	movwf	i2c1_write_no_data@reg_addr
  7789  1647  3194  24BE         	fcall	_i2c1_write_no_data
  7790  1649  0008               	return
  7791  164A                     __end_of_one_shot_sen:	
  7792                           
  7793                           	psect	text31
  7794  06F7                     __ptext31:	
  7795 ;; *************** function _sen *****************
  7796 ;; Defined at:
  7797 ;;		line 242 in file "main.c"
  7798 ;; Parameters:    Size  Location     Type
  7799 ;;  dev_addr        1    wreg     unsigned char 
  7800 ;; Auto vars:     Size  Location     Type
  7801 ;;  dev_addr        1   53[BANK0 ] unsigned char 
  7802 ;;  status          1   52[BANK0 ] unsigned char 
  7803 ;;  length          1   51[BANK0 ] unsigned char 
  7804 ;;  type            1   50[BANK0 ] unsigned char 
  7805 ;;  i               1    0        unsigned char 
  7806 ;;  data            1    0        unsigned char 
  7807 ;; Return value:  Size  Location     Type
  7808 ;;                  1    wreg      unsigned char 
  7809 ;; Registers used:
  7810 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7811 ;; Tracked objects:
  7812 ;;		On entry : 0/0
  7813 ;;		On exit  : 0/0
  7814 ;;		Unchanged: 0/0
  7815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7816 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7817 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7818 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7819 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7820 ;;Total ram usage:        9 bytes
  7821 ;; Hardware stack levels used:    1
  7822 ;; Hardware stack levels required when called:    7
  7823 ;; This function calls:
  7824 ;;		_PROTOCOL_Print_TLV
  7825 ;;		_i2c1_read
  7826 ;;		_i2c1_write_no_data
  7827 ;; This function is called by:
  7828 ;;		_one_shot_sen
  7829 ;;		_fetch
  7830 ;; This function uses a non-reentrant model
  7831 ;;
  7832                           
  7833                           
  7834                           ;psect for function _sen
  7835  06F7                     _sen:	
  7836                           
  7837                           ;incstack = 0
  7838                           ; Regs used in _sen: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7839                           ;sen@dev_addr stored from wreg
  7840  06F7  0020               	movlb	0	; select bank0
  7841  06F8  00D5               	movwf	sen@dev_addr
  7842                           
  7843                           ;main.c: 243: uint8_t status;
  7844                           ;main.c: 244: uint8_t type;
  7845                           ;main.c: 245: uint8_t length ,data, i;
  7846                           ;main.c: 246: LATCbits.LATC7 ^= 1;
  7847  06F9  0022               	movlb	2	; select bank2
  7848  06FA  0D0E               	rlf	14,w	;volatile
  7849  06FB  0D0E               	rlf	14,w	;volatile
  7850  06FC  3901               	andlw	1
  7851  06FD  0020               	movlb	0	; select bank0
  7852  06FE  00CD               	movwf	??_sen
  7853  06FF  3001               	movlw	1
  7854  0700  06CD               	xorwf	??_sen,f
  7855  0701  0CCD               	rrf	??_sen,f
  7856  0702  0CCD               	rrf	??_sen,f
  7857  0703  0022               	movlb	2	; select bank2
  7858  0704  080E               	movf	14,w	;volatile
  7859  0705  0020               	movlb	0	; select bank0
  7860  0706  064D               	xorwf	??_sen,w
  7861  0707  397F               	andlw	-129
  7862  0708  064D               	xorwf	??_sen,w
  7863  0709  0022               	movlb	2	; select bank2
  7864  070A  008E               	movwf	14	;volatile
  7865                           
  7866                           ;main.c: 248: _delay((unsigned long)((100)*(32000000/4000000.0)));
  7867  070B  30A0               	movlw	160
  7868  070C                     u7417:	
  7869  070C  3200               	nop2
  7870  070D  0B89               	decfsz	9,f
  7871  070E  2F0C               	goto	u7417
  7872                           
  7873                           ;main.c: 249: i2c1_write_no_data(dev_addr, 0x06);
  7874  070F  0020               	movlb	0	; select bank0
  7875  0710  0855               	movf	sen@dev_addr,w
  7876  0711  00CD               	movwf	??_sen
  7877  0712  01CE               	clrf	??_sen+1
  7878  0713  084D               	movf	??_sen,w
  7879  0714  00AE               	movwf	i2c1_write_no_data@dev_addr
  7880  0715  084E               	movf	??_sen+1,w
  7881  0716  00AF               	movwf	i2c1_write_no_data@dev_addr+1
  7882  0717  3006               	movlw	6
  7883  0718  00CF               	movwf	??_sen+2
  7884  0719  084F               	movf	??_sen+2,w
  7885  071A  00B0               	movwf	i2c1_write_no_data@reg_addr
  7886  071B  3194  24BE  3186   	fcall	_i2c1_write_no_data
  7887                           
  7888                           ;main.c: 251: _delay((unsigned long)((1500)*(32000000/4000000.0)));
  7889  071E  3010               	movlw	16
  7890  071F  0020               	movlb	0	; select bank0
  7891  0720  00CD               	movwf	??_sen
  7892  0721  3094               	movlw	148
  7893  0722                     u7427:	
  7894  0722  0B89               	decfsz	9,f
  7895  0723  2F22               	goto	u7427
  7896  0724  0BCD               	decfsz	??_sen,f
  7897  0725  2F22               	goto	u7427
  7898  0726  0000               	nop
  7899                           
  7900                           ;main.c: 252: status = i2c1_read(dev_addr, 0x07, &type, 1);
  7901  0727  0020               	movlb	0	; select bank0
  7902  0728  0855               	movf	sen@dev_addr,w
  7903  0729  00CD               	movwf	??_sen
  7904  072A  01CE               	clrf	??_sen+1
  7905  072B  084D               	movf	??_sen,w
  7906  072C  00B0               	movwf	i2c1_read@dev_addr
  7907  072D  084E               	movf	??_sen+1,w
  7908  072E  00B1               	movwf	i2c1_read@dev_addr+1
  7909  072F  3007               	movlw	7
  7910  0730  00CF               	movwf	??_sen+2
  7911  0731  084F               	movf	??_sen+2,w
  7912  0732  00B2               	movwf	i2c1_read@reg_addr
  7913  0733  3052               	movlw	low sen@type
  7914  0734  00B3               	movwf	i2c1_read@pbuf
  7915  0735  3000               	movlw	high sen@type
  7916  0736  00B4               	movwf	i2c1_read@pbuf+1
  7917  0737  01B5               	clrf	i2c1_read@len
  7918  0738  0AB5               	incf	i2c1_read@len,f
  7919  0739  3188  20FD  3186   	fcall	_i2c1_read
  7920  073C  0020               	movlb	0	; select bank0
  7921  073D  00D0               	movwf	??_sen+3
  7922  073E  0850               	movf	??_sen+3,w
  7923  073F  00D4               	movwf	sen@status
  7924                           
  7925                           ;main.c: 253: _delay((unsigned long)((100)*(32000000/4000000.0)));
  7926  0740  30A0               	movlw	160
  7927  0741                     u7437:	
  7928  0741  3200               	nop2
  7929  0742  0B89               	decfsz	9,f
  7930  0743  2F41               	goto	u7437
  7931                           
  7932                           ;main.c: 254: if (status == 0) {
  7933  0744  0020               	movlb	0	; select bank0
  7934  0745  0854               	movf	sen@status,w
  7935  0746  1D03               	btfss	3,2
  7936  0747  2FA5               	goto	l5315
  7937                           
  7938                           ;main.c: 255: if (type == 0x06) {
  7939  0748  3006               	movlw	6
  7940  0749  0652               	xorwf	sen@type,w
  7941  074A  1D03               	btfss	3,2
  7942  074B  2F53               	goto	l5301
  7943                           
  7944                           ;main.c: 256: PROTOCOL_Print_TLV(dev_addr, 0x06, 0, (0));
  7945  074C  3006               	movlw	6
  7946  074D  00CD               	movwf	??_sen
  7947  074E  084D               	movf	??_sen,w
  7948  074F  00C4               	movwf	PROTOCOL_Print_TLV@type
  7949  0750  01C5               	clrf	PROTOCOL_Print_TLV@length
  7950  0751  01C6               	clrf	PROTOCOL_Print_TLV@pbuffer
  7951  0752  2FA2               	goto	L10
  7952  0753                     l5301:	
  7953                           ;main.c: 257: } else {
  7954                           
  7955                           
  7956                           ;main.c: 258: status = i2c1_read(dev_addr, 0x07, &length, 1);
  7957  0753  0020               	movlb	0	; select bank0
  7958  0754  0855               	movf	sen@dev_addr,w
  7959  0755  00CD               	movwf	??_sen
  7960  0756  01CE               	clrf	??_sen+1
  7961  0757  084D               	movf	??_sen,w
  7962  0758  00B0               	movwf	i2c1_read@dev_addr
  7963  0759  084E               	movf	??_sen+1,w
  7964  075A  00B1               	movwf	i2c1_read@dev_addr+1
  7965  075B  3007               	movlw	7
  7966  075C  00CF               	movwf	??_sen+2
  7967  075D  084F               	movf	??_sen+2,w
  7968  075E  00B2               	movwf	i2c1_read@reg_addr
  7969  075F  3053               	movlw	low sen@length
  7970  0760  00B3               	movwf	i2c1_read@pbuf
  7971  0761  3000               	movlw	high sen@length
  7972  0762  00B4               	movwf	i2c1_read@pbuf+1
  7973  0763  01B5               	clrf	i2c1_read@len
  7974  0764  0AB5               	incf	i2c1_read@len,f
  7975  0765  3188  20FD  3186   	fcall	_i2c1_read
  7976  0768  0020               	movlb	0	; select bank0
  7977  0769  00D0               	movwf	??_sen+3
  7978  076A  0850               	movf	??_sen+3,w
  7979  076B  00D4               	movwf	sen@status
  7980                           
  7981                           ;main.c: 259: _delay((unsigned long)((100)*(32000000/4000000.0)));
  7982  076C  30A0               	movlw	160
  7983  076D                     u7447:	
  7984  076D  3200               	nop2
  7985  076E  0B89               	decfsz	9,f
  7986  076F  2F6D               	goto	u7447
  7987                           
  7988                           ;main.c: 260: if (status == 0) {
  7989  0770  0020               	movlb	0	; select bank0
  7990  0771  0854               	movf	sen@status,w
  7991  0772  1D03               	btfss	3,2
  7992  0773  2FA5               	goto	l5315
  7993                           
  7994                           ;main.c: 261: status = i2c1_read(dev_addr, 0x07, read_buf, length);
  7995  0774  0855               	movf	sen@dev_addr,w
  7996  0775  00CD               	movwf	??_sen
  7997  0776  01CE               	clrf	??_sen+1
  7998  0777  084D               	movf	??_sen,w
  7999  0778  00B0               	movwf	i2c1_read@dev_addr
  8000  0779  084E               	movf	??_sen+1,w
  8001  077A  00B1               	movwf	i2c1_read@dev_addr+1
  8002  077B  3007               	movlw	7
  8003  077C  00CF               	movwf	??_sen+2
  8004  077D  084F               	movf	??_sen+2,w
  8005  077E  00B2               	movwf	i2c1_read@reg_addr
  8006  077F  30BC               	movlw	low _read_buf
  8007  0780  00B3               	movwf	i2c1_read@pbuf
  8008  0781  3001               	movlw	high _read_buf
  8009  0782  00B4               	movwf	i2c1_read@pbuf+1
  8010  0783  0853               	movf	sen@length,w
  8011  0784  00D0               	movwf	??_sen+3
  8012  0785  0850               	movf	??_sen+3,w
  8013  0786  00B5               	movwf	i2c1_read@len
  8014  0787  3188  20FD  3186   	fcall	_i2c1_read
  8015  078A  0020               	movlb	0	; select bank0
  8016  078B  00D1               	movwf	??_sen+4
  8017  078C  0851               	movf	??_sen+4,w
  8018  078D  00D4               	movwf	sen@status
  8019                           
  8020                           ;main.c: 262: _delay((unsigned long)((100)*(32000000/4000000.0)));
  8021  078E  30A0               	movlw	160
  8022  078F                     u7457:	
  8023  078F  3200               	nop2
  8024  0790  0B89               	decfsz	9,f
  8025  0791  2F8F               	goto	u7457
  8026                           
  8027                           ;main.c: 263: if (status == 0) {
  8028  0792  0020               	movlb	0	; select bank0
  8029  0793  0854               	movf	sen@status,w
  8030  0794  1D03               	btfss	3,2
  8031  0795  2FA5               	goto	l5315
  8032                           
  8033                           ;main.c: 264: PROTOCOL_Print_TLV(dev_addr, type, length, read_buf);
  8034  0796  0852               	movf	sen@type,w
  8035  0797  00CD               	movwf	??_sen
  8036  0798  084D               	movf	??_sen,w
  8037  0799  00C4               	movwf	PROTOCOL_Print_TLV@type
  8038  079A  0853               	movf	sen@length,w
  8039  079B  00CE               	movwf	??_sen+1
  8040  079C  084E               	movf	??_sen+1,w
  8041  079D  00C5               	movwf	PROTOCOL_Print_TLV@length
  8042  079E  30BC               	movlw	(low (_read_buf| (0+256)))& (0+255)
  8043  079F  00CF               	movwf	??_sen+2
  8044  07A0  084F               	movf	??_sen+2,w
  8045  07A1  00C6               	movwf	PROTOCOL_Print_TLV@pbuffer
  8046  07A2                     L10:	
  8047  07A2  0855               	movf	sen@dev_addr,w
  8048  07A3  3180  20B4         	fcall	_PROTOCOL_Print_TLV
  8049  07A5                     l5315:	
  8050                           
  8051                           ;main.c: 265: }
  8052                           ;main.c: 266: }
  8053                           ;main.c: 267: }
  8054                           ;main.c: 268: }
  8055                           ;main.c: 269: return status;
  8056  07A5  0020               	movlb	0	; select bank0
  8057  07A6  0854               	movf	sen@status,w
  8058  07A7  0008               	return
  8059  07A8                     __end_of_sen:	
  8060                           
  8061                           	psect	text32
  8062  00B4                     __ptext32:	
  8063 ;; *************** function _PROTOCOL_Print_TLV *****************
  8064 ;; Defined at:
  8065 ;;		line 218 in file "protocol.c"
  8066 ;; Parameters:    Size  Location     Type
  8067 ;;  dev_addr        1    wreg     unsigned char 
  8068 ;;  type            1   36[BANK0 ] unsigned char 
  8069 ;;  length          1   37[BANK0 ] unsigned char 
  8070 ;;  pbuffer         1   38[BANK0 ] PTR unsigned char 
  8071 ;;		 -> read_buf(16), NULL(0), 
  8072 ;; Auto vars:     Size  Location     Type
  8073 ;;  dev_addr        1   42[BANK0 ] unsigned char 
  8074 ;;  v               2   43[BANK0 ] int 
  8075 ;; Return value:  Size  Location     Type
  8076 ;;                  1    wreg      void 
  8077 ;; Registers used:
  8078 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8079 ;; Tracked objects:
  8080 ;;		On entry : 0/0
  8081 ;;		On exit  : 0/0
  8082 ;;		Unchanged: 0/0
  8083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8084 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8085 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8086 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8087 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8088 ;;Total ram usage:        9 bytes
  8089 ;; Hardware stack levels used:    1
  8090 ;; Hardware stack levels required when called:    6
  8091 ;; This function calls:
  8092 ;;		___awdiv
  8093 ;;		___awmod
  8094 ;;		_abs
  8095 ;;		_concat
  8096 ;;		_printf
  8097 ;; This function is called by:
  8098 ;;		_sen
  8099 ;; This function uses a non-reentrant model
  8100 ;;
  8101                           
  8102                           
  8103                           ;psect for function _PROTOCOL_Print_TLV
  8104  00B4                     _PROTOCOL_Print_TLV:	
  8105                           
  8106                           ;incstack = 0
  8107                           ; Regs used in _PROTOCOL_Print_TLV: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8108                           ;PROTOCOL_Print_TLV@dev_addr stored from wreg
  8109  00B4  0020               	movlb	0	; select bank0
  8110  00B5  00CA               	movwf	PROTOCOL_Print_TLV@dev_addr
  8111                           
  8112                           ;protocol.c: 219: int16_t v;
  8113                           ;protocol.c: 220: if (dev_addr != 0) printf("%%%d:", dev_addr);
  8114  00B6  084A               	movf	PROTOCOL_Print_TLV@dev_addr,w
  8115  00B7  1903               	btfsc	3,2
  8116  00B8  2B17               	goto	l5225
  8117  00B9  3052               	movlw	low (STR_50| (0+32768))
  8118  00BA  00AE               	movwf	printf@f
  8119  00BB  3091               	movlw	high (STR_50| (0+32768))
  8120  00BC  00AF               	movwf	printf@f+1
  8121  00BD  084A               	movf	PROTOCOL_Print_TLV@dev_addr,w
  8122  00BE  00C7               	movwf	??_PROTOCOL_Print_TLV
  8123  00BF  01C8               	clrf	??_PROTOCOL_Print_TLV+1
  8124  00C0  0847               	movf	??_PROTOCOL_Print_TLV,w
  8125  00C1  00B0               	movwf	?_printf+2
  8126  00C2  0848               	movf	??_PROTOCOL_Print_TLV+1,w
  8127  00C3  00B1               	movwf	?_printf+3
  8128  00C4  318E  262B  3180   	fcall	_printf
  8129                           
  8130                           ;protocol.c: 221: switch(type) {
  8131  00C7  2B17               	goto	l5225
  8132  00C8                     l5133:	
  8133                           ;protocol.c: 222: case 0x01:
  8134                           
  8135                           
  8136                           ;protocol.c: 223: length--;
  8137  00C8  3001               	movlw	1
  8138  00C9  0020               	movlb	0	; select bank0
  8139  00CA  02C5               	subwf	PROTOCOL_Print_TLV@length,f
  8140                           
  8141                           ;protocol.c: 224: printf("UINT8_T:");
  8142  00CB  302D               	movlw	low (STR_51| (0+32768))
  8143  00CC  00AE               	movwf	printf@f
  8144  00CD  3091               	movlw	high (STR_51| (0+32768))
  8145  00CE  00AF               	movwf	printf@f+1
  8146  00CF  318E  262B  3180   	fcall	_printf
  8147                           
  8148                           ;protocol.c: 225: for (i=0; i<length; i++) printf("%u,", pbuffer[i]);
  8149  00D2  0020               	movlb	0	; select bank0
  8150  00D3  01EB               	clrf	_i
  8151  00D4                     l5143:	
  8152  00D4  0845               	movf	PROTOCOL_Print_TLV@length,w
  8153  00D5  026B               	subwf	_i,w
  8154  00D6  1803               	btfsc	3,0
  8155  00D7  28F3               	goto	l5145
  8156  00D8  3061               	movlw	low (STR_52| (0+32768))
  8157  00D9  00AE               	movwf	printf@f
  8158  00DA  3091               	movlw	high (STR_52| (0+32768))
  8159  00DB  00AF               	movwf	printf@f+1
  8160  00DC  086B               	movf	_i,w
  8161  00DD  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  8162  00DE  00C7               	movwf	??_PROTOCOL_Print_TLV
  8163  00DF  0847               	movf	??_PROTOCOL_Print_TLV,w
  8164  00E0  0086               	movwf	6
  8165  00E1  3001               	movlw	1	; select bank2/3
  8166  00E2  0087               	movwf	7
  8167  00E3  0801               	movf	1,w
  8168  00E4  00C8               	movwf	??_PROTOCOL_Print_TLV+1
  8169  00E5  01C9               	clrf	??_PROTOCOL_Print_TLV+2
  8170  00E6  0848               	movf	??_PROTOCOL_Print_TLV+1,w
  8171  00E7  00B0               	movwf	?_printf+2
  8172  00E8  0849               	movf	??_PROTOCOL_Print_TLV+2,w
  8173  00E9  00B1               	movwf	?_printf+3
  8174  00EA  318E  262B  3180   	fcall	_printf
  8175  00ED  3001               	movlw	1
  8176  00EE  0020               	movlb	0	; select bank0
  8177  00EF  00C7               	movwf	??_PROTOCOL_Print_TLV
  8178  00F0  0847               	movf	??_PROTOCOL_Print_TLV,w
  8179  00F1  07EB               	addwf	_i,f
  8180  00F2  28D4               	goto	l5143
  8181  00F3                     l5145:	
  8182                           
  8183                           ;protocol.c: 226: printf("%u\n", pbuffer[i]);
  8184  00F3  305D               	movlw	low (STR_53| (0+32768))
  8185  00F4  00AE               	movwf	printf@f
  8186  00F5  3091               	movlw	high (STR_53| (0+32768))
  8187  00F6  00AF               	movwf	printf@f+1
  8188  00F7  086B               	movf	_i,w
  8189  00F8  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  8190  00F9  00C7               	movwf	??_PROTOCOL_Print_TLV
  8191  00FA  0847               	movf	??_PROTOCOL_Print_TLV,w
  8192  00FB  0086               	movwf	6
  8193  00FC  3001               	movlw	1	; select bank2/3
  8194  00FD  0087               	movwf	7
  8195  00FE  0801               	movf	1,w
  8196  00FF  00C8               	movwf	??_PROTOCOL_Print_TLV+1
  8197  0100  01C9               	clrf	??_PROTOCOL_Print_TLV+2
  8198  0101  0848               	movf	??_PROTOCOL_Print_TLV+1,w
  8199  0102  00B0               	movwf	?_printf+2
  8200  0103  0849               	movf	??_PROTOCOL_Print_TLV+2,w
  8201  0104  00B1               	movwf	?_printf+3
  8202  0105  318E  262B         	fcall	_printf
  8203                           
  8204                           ;protocol.c: 227: break;
  8205  0107  0008               	return
  8206  0108                     l5147:	
  8207                           ;protocol.c: 228: case 0x02:
  8208                           
  8209                           
  8210                           ;protocol.c: 229: length--;
  8211  0108  3001               	movlw	1
  8212  0109  0020               	movlb	0	; select bank0
  8213  010A  02C5               	subwf	PROTOCOL_Print_TLV@length,f
  8214                           
  8215                           ;protocol.c: 230: printf("INT8_T:");
  8216  010B  302E               	movlw	low ((STR_51+1)| (0+32768))
  8217  010C  00AE               	movwf	printf@f
  8218  010D  3091               	movlw	high ((STR_51+1)| (0+32768))
  8219  010E  00AF               	movwf	printf@f+1
  8220  010F  318E  262B  3180   	fcall	_printf
  8221                           
  8222                           ;protocol.c: 231: for (i=0; i<length; i++) printf("%d,", (int8_t)pbuffer[i]);
  8223  0112  0020               	movlb	0	; select bank0
  8224  0113  01EB               	clrf	_i
  8225  0114                     l5157:	
  8226  0114  0845               	movf	PROTOCOL_Print_TLV@length,w
  8227  0115  026B               	subwf	_i,w
  8228  0116  1803               	btfsc	3,0
  8229  0117  2931               	goto	l5159
  8230  0118  3071               	movlw	low (STR_14| (0+32768))
  8231  0119  00AE               	movwf	printf@f
  8232  011A  3091               	movlw	high (STR_14| (0+32768))
  8233  011B  00AF               	movwf	printf@f+1
  8234  011C  086B               	movf	_i,w
  8235  011D  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  8236  011E  00C7               	movwf	??_PROTOCOL_Print_TLV
  8237  011F  0847               	movf	??_PROTOCOL_Print_TLV,w
  8238  0120  0086               	movwf	6
  8239  0121  3001               	movlw	1	; select bank2/3
  8240  0122  0087               	movwf	7
  8241  0123  0801               	movf	1,w
  8242  0124  00B0               	movwf	?_printf+2
  8243  0125  01B1               	clrf	?_printf+3
  8244  0126  1BB0               	btfsc	?_printf+2,7
  8245  0127  03B1               	decf	?_printf+3,f
  8246  0128  318E  262B  3180   	fcall	_printf
  8247  012B  3001               	movlw	1
  8248  012C  0020               	movlb	0	; select bank0
  8249  012D  00C7               	movwf	??_PROTOCOL_Print_TLV
  8250  012E  0847               	movf	??_PROTOCOL_Print_TLV,w
  8251  012F  07EB               	addwf	_i,f
  8252  0130  2914               	goto	l5157
  8253  0131                     l5159:	
  8254                           
  8255                           ;protocol.c: 232: printf("%d\n", (int8_t)pbuffer[i]);
  8256  0131  30DA               	movlw	low ((STR_49+6)| (0+32768))
  8257  0132  00AE               	movwf	printf@f
  8258  0133  3090               	movlw	high ((STR_49+6)| (0+32768))
  8259  0134  00AF               	movwf	printf@f+1
  8260  0135  086B               	movf	_i,w
  8261  0136  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  8262  0137  00C7               	movwf	??_PROTOCOL_Print_TLV
  8263  0138  0847               	movf	??_PROTOCOL_Print_TLV,w
  8264  0139  0086               	movwf	6
  8265  013A  3001               	movlw	1	; select bank2/3
  8266  013B  0087               	movwf	7
  8267  013C  0801               	movf	1,w
  8268  013D  00B0               	movwf	?_printf+2
  8269  013E  01B1               	clrf	?_printf+3
  8270  013F  1BB0               	btfsc	?_printf+2,7
  8271  0140  03B1               	decf	?_printf+3,f
  8272  0141  318E  262B         	fcall	_printf
  8273                           
  8274                           ;protocol.c: 233: break;
  8275  0143  0008               	return
  8276  0144                     l5161:	
  8277                           ;protocol.c: 234: case 0x03:
  8278                           
  8279                           
  8280                           ;protocol.c: 235: printf("UINT16_T:");
  8281  0144  3006               	movlw	low (STR_57| (0+32768))
  8282  0145  0020               	movlb	0	; select bank0
  8283  0146  00AE               	movwf	printf@f
  8284  0147  3091               	movlw	high (STR_57| (0+32768))
  8285  0148  00AF               	movwf	printf@f+1
  8286  0149  318E  262B  3180   	fcall	_printf
  8287                           
  8288                           ;protocol.c: 236: length = length - 2;
  8289  014C  0020               	movlb	0	; select bank0
  8290  014D  0845               	movf	PROTOCOL_Print_TLV@length,w
  8291  014E  3EFE               	addlw	254
  8292  014F  00C7               	movwf	??_PROTOCOL_Print_TLV
  8293  0150  0847               	movf	??_PROTOCOL_Print_TLV,w
  8294  0151  00C5               	movwf	PROTOCOL_Print_TLV@length
  8295                           
  8296                           ;protocol.c: 237: for(i=0; i<length; i=i+2) printf("%u,", concat(pbuffer[i], pbuffer[i+1
      +                          ]));
  8297  0152  01EB               	clrf	_i
  8298  0153                     l5171:	
  8299  0153  0845               	movf	PROTOCOL_Print_TLV@length,w
  8300  0154  026B               	subwf	_i,w
  8301  0155  1803               	btfsc	3,0
  8302  0156  2981               	goto	l5173
  8303  0157  3061               	movlw	low (STR_52| (0+32768))
  8304  0158  00AE               	movwf	printf@f
  8305  0159  3091               	movlw	high (STR_52| (0+32768))
  8306  015A  00AF               	movwf	printf@f+1
  8307  015B  086B               	movf	_i,w
  8308  015C  3E01               	addlw	1
  8309  015D  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  8310  015E  00C7               	movwf	??_PROTOCOL_Print_TLV
  8311  015F  0847               	movf	??_PROTOCOL_Print_TLV,w
  8312  0160  0086               	movwf	6
  8313  0161  3001               	movlw	1	; select bank2/3
  8314  0162  0087               	movwf	7
  8315  0163  0801               	movf	1,w
  8316  0164  00C8               	movwf	??_PROTOCOL_Print_TLV+1
  8317  0165  0848               	movf	??_PROTOCOL_Print_TLV+1,w
  8318  0166  00A0               	movwf	concat@lsb
  8319  0167  086B               	movf	_i,w
  8320  0168  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  8321  0169  00C9               	movwf	??_PROTOCOL_Print_TLV+2
  8322  016A  0849               	movf	??_PROTOCOL_Print_TLV+2,w
  8323  016B  0086               	movwf	6
  8324  016C  3001               	movlw	1	; select bank2/3
  8325  016D  0087               	movwf	7
  8326  016E  0801               	movf	1,w
  8327  016F  3192  228F  3180   	fcall	_concat
  8328  0172  0020               	movlb	0	; select bank0
  8329  0173  0821               	movf	?_concat+1,w
  8330  0174  00B1               	movwf	?_printf+3
  8331  0175  0820               	movf	?_concat,w
  8332  0176  00B0               	movwf	?_printf+2
  8333  0177  318E  262B  3180   	fcall	_printf
  8334  017A  0020               	movlb	0	; select bank0
  8335  017B  086B               	movf	_i,w
  8336  017C  3E02               	addlw	2
  8337  017D  00C7               	movwf	??_PROTOCOL_Print_TLV
  8338  017E  0847               	movf	??_PROTOCOL_Print_TLV,w
  8339  017F  00EB               	movwf	_i
  8340  0180  2953               	goto	l5171
  8341  0181                     l5173:	
  8342                           
  8343                           ;protocol.c: 238: printf("%u\n", concat(pbuffer[i], pbuffer[i+1]));
  8344  0181  305D               	movlw	low (STR_53| (0+32768))
  8345  0182  00AE               	movwf	printf@f
  8346  0183  3091               	movlw	high (STR_53| (0+32768))
  8347  0184  00AF               	movwf	printf@f+1
  8348  0185  086B               	movf	_i,w
  8349  0186  3E01               	addlw	1
  8350  0187  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  8351  0188  00C7               	movwf	??_PROTOCOL_Print_TLV
  8352  0189  0847               	movf	??_PROTOCOL_Print_TLV,w
  8353  018A  0086               	movwf	6
  8354  018B  3001               	movlw	1	; select bank2/3
  8355  018C  0087               	movwf	7
  8356  018D  0801               	movf	1,w
  8357  018E  00C8               	movwf	??_PROTOCOL_Print_TLV+1
  8358  018F  0848               	movf	??_PROTOCOL_Print_TLV+1,w
  8359  0190  00A0               	movwf	concat@lsb
  8360  0191  086B               	movf	_i,w
  8361  0192  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  8362  0193  00C9               	movwf	??_PROTOCOL_Print_TLV+2
  8363  0194  0849               	movf	??_PROTOCOL_Print_TLV+2,w
  8364  0195  0086               	movwf	6
  8365  0196  3001               	movlw	1	; select bank2/3
  8366  0197  0087               	movwf	7
  8367  0198  0801               	movf	1,w
  8368  0199  3192  228F  3180   	fcall	_concat
  8369  019C  0020               	movlb	0	; select bank0
  8370  019D  0821               	movf	?_concat+1,w
  8371  019E  00B1               	movwf	?_printf+3
  8372  019F  0820               	movf	?_concat,w
  8373  01A0  00B0               	movwf	?_printf+2
  8374  01A1  318E  262B         	fcall	_printf
  8375                           
  8376                           ;protocol.c: 239: break;
  8377  01A3  0008               	return
  8378  01A4                     l5175:	
  8379                           ;protocol.c: 240: case 0x04:
  8380                           
  8381                           
  8382                           ;protocol.c: 241: printf("INT16_T:");
  8383  01A4  3007               	movlw	low ((STR_57+1)| (0+32768))
  8384  01A5  0020               	movlb	0	; select bank0
  8385  01A6  00AE               	movwf	printf@f
  8386  01A7  3091               	movlw	high ((STR_57+1)| (0+32768))
  8387  01A8  00AF               	movwf	printf@f+1
  8388  01A9  318E  262B  3180   	fcall	_printf
  8389                           
  8390                           ;protocol.c: 242: length = length - 2;
  8391  01AC  0020               	movlb	0	; select bank0
  8392  01AD  0845               	movf	PROTOCOL_Print_TLV@length,w
  8393  01AE  3EFE               	addlw	254
  8394  01AF  00C7               	movwf	??_PROTOCOL_Print_TLV
  8395  01B0  0847               	movf	??_PROTOCOL_Print_TLV,w
  8396  01B1  00C5               	movwf	PROTOCOL_Print_TLV@length
  8397                           
  8398                           ;protocol.c: 243: for(i=0; i<length; i=i+2) printf("%d,", (int16_t)(concat(pbuffer[i], p
      +                          buffer[i+1])));
  8399  01B2  01EB               	clrf	_i
  8400  01B3                     l5185:	
  8401  01B3  0845               	movf	PROTOCOL_Print_TLV@length,w
  8402  01B4  026B               	subwf	_i,w
  8403  01B5  1803               	btfsc	3,0
  8404  01B6  29E1               	goto	l5187
  8405  01B7  3071               	movlw	low (STR_14| (0+32768))
  8406  01B8  00AE               	movwf	printf@f
  8407  01B9  3091               	movlw	high (STR_14| (0+32768))
  8408  01BA  00AF               	movwf	printf@f+1
  8409  01BB  086B               	movf	_i,w
  8410  01BC  3E01               	addlw	1
  8411  01BD  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  8412  01BE  00C7               	movwf	??_PROTOCOL_Print_TLV
  8413  01BF  0847               	movf	??_PROTOCOL_Print_TLV,w
  8414  01C0  0086               	movwf	6
  8415  01C1  3001               	movlw	1	; select bank2/3
  8416  01C2  0087               	movwf	7
  8417  01C3  0801               	movf	1,w
  8418  01C4  00C8               	movwf	??_PROTOCOL_Print_TLV+1
  8419  01C5  0848               	movf	??_PROTOCOL_Print_TLV+1,w
  8420  01C6  00A0               	movwf	concat@lsb
  8421  01C7  086B               	movf	_i,w
  8422  01C8  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  8423  01C9  00C9               	movwf	??_PROTOCOL_Print_TLV+2
  8424  01CA  0849               	movf	??_PROTOCOL_Print_TLV+2,w
  8425  01CB  0086               	movwf	6
  8426  01CC  3001               	movlw	1	; select bank2/3
  8427  01CD  0087               	movwf	7
  8428  01CE  0801               	movf	1,w
  8429  01CF  3192  228F  3180   	fcall	_concat
  8430  01D2  0020               	movlb	0	; select bank0
  8431  01D3  0821               	movf	?_concat+1,w
  8432  01D4  00B1               	movwf	?_printf+3
  8433  01D5  0820               	movf	?_concat,w
  8434  01D6  00B0               	movwf	?_printf+2
  8435  01D7  318E  262B  3180   	fcall	_printf
  8436  01DA  0020               	movlb	0	; select bank0
  8437  01DB  086B               	movf	_i,w
  8438  01DC  3E02               	addlw	2
  8439  01DD  00C7               	movwf	??_PROTOCOL_Print_TLV
  8440  01DE  0847               	movf	??_PROTOCOL_Print_TLV,w
  8441  01DF  00EB               	movwf	_i
  8442  01E0  29B3               	goto	l5185
  8443  01E1                     l5187:	
  8444                           
  8445                           ;protocol.c: 244: printf("%d\n", (int16_t)(concat(pbuffer[i], pbuffer[i+1])));
  8446  01E1  30DA               	movlw	low ((STR_49+6)| (0+32768))
  8447  01E2  00AE               	movwf	printf@f
  8448  01E3  3090               	movlw	high ((STR_49+6)| (0+32768))
  8449  01E4  00AF               	movwf	printf@f+1
  8450  01E5  086B               	movf	_i,w
  8451  01E6  3E01               	addlw	1
  8452  01E7  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  8453  01E8  00C7               	movwf	??_PROTOCOL_Print_TLV
  8454  01E9  0847               	movf	??_PROTOCOL_Print_TLV,w
  8455  01EA  0086               	movwf	6
  8456  01EB  3001               	movlw	1	; select bank2/3
  8457  01EC  0087               	movwf	7
  8458  01ED  0801               	movf	1,w
  8459  01EE  00C8               	movwf	??_PROTOCOL_Print_TLV+1
  8460  01EF  0848               	movf	??_PROTOCOL_Print_TLV+1,w
  8461  01F0  00A0               	movwf	concat@lsb
  8462  01F1  086B               	movf	_i,w
  8463  01F2  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  8464  01F3  00C9               	movwf	??_PROTOCOL_Print_TLV+2
  8465  01F4  0849               	movf	??_PROTOCOL_Print_TLV+2,w
  8466  01F5  0086               	movwf	6
  8467  01F6  3001               	movlw	1	; select bank2/3
  8468  01F7  0087               	movwf	7
  8469  01F8  0801               	movf	1,w
  8470  01F9  3192  228F  3180   	fcall	_concat
  8471  01FC  0020               	movlb	0	; select bank0
  8472  01FD  0821               	movf	?_concat+1,w
  8473  01FE  00B1               	movwf	?_printf+3
  8474  01FF  0820               	movf	?_concat,w
  8475  0200  00B0               	movwf	?_printf+2
  8476  0201  318E  262B         	fcall	_printf
  8477                           
  8478                           ;protocol.c: 245: break;
  8479  0203  0008               	return
  8480  0204                     l5189:	
  8481                           ;protocol.c: 246: case 0x05:
  8482                           
  8483                           
  8484                           ;protocol.c: 247: printf("FLOAT:");
  8485  0204  3036               	movlw	low (STR_63| (0+32768))
  8486  0205  0020               	movlb	0	; select bank0
  8487  0206  00AE               	movwf	printf@f
  8488  0207  3091               	movlw	high (STR_63| (0+32768))
  8489  0208  00AF               	movwf	printf@f+1
  8490  0209  318E  262B  3180   	fcall	_printf
  8491                           
  8492                           ;protocol.c: 248: length = length - 2;
  8493  020C  0020               	movlb	0	; select bank0
  8494  020D  0845               	movf	PROTOCOL_Print_TLV@length,w
  8495  020E  3EFE               	addlw	254
  8496  020F  00C7               	movwf	??_PROTOCOL_Print_TLV
  8497  0210  0847               	movf	??_PROTOCOL_Print_TLV,w
  8498  0211  00C5               	movwf	PROTOCOL_Print_TLV@length
  8499                           
  8500                           ;protocol.c: 249: for (i=0; i<length; i=i+2) {
  8501  0212  01EB               	clrf	_i
  8502  0213                     l5207:	
  8503  0213  0845               	movf	PROTOCOL_Print_TLV@length,w
  8504  0214  026B               	subwf	_i,w
  8505  0215  1803               	btfsc	3,0
  8506  0216  2A7D               	goto	l5209
  8507                           
  8508                           ;protocol.c: 250: v = (int16_t)(concat(pbuffer[i], pbuffer[i+1]));
  8509  0217  086B               	movf	_i,w
  8510  0218  3E01               	addlw	1
  8511  0219  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  8512  021A  00C7               	movwf	??_PROTOCOL_Print_TLV
  8513  021B  0847               	movf	??_PROTOCOL_Print_TLV,w
  8514  021C  0086               	movwf	6
  8515  021D  3001               	movlw	1	; select bank2/3
  8516  021E  0087               	movwf	7
  8517  021F  0801               	movf	1,w
  8518  0220  00C8               	movwf	??_PROTOCOL_Print_TLV+1
  8519  0221  0848               	movf	??_PROTOCOL_Print_TLV+1,w
  8520  0222  00A0               	movwf	concat@lsb
  8521  0223  086B               	movf	_i,w
  8522  0224  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  8523  0225  00C9               	movwf	??_PROTOCOL_Print_TLV+2
  8524  0226  0849               	movf	??_PROTOCOL_Print_TLV+2,w
  8525  0227  0086               	movwf	6
  8526  0228  3001               	movlw	1	; select bank2/3
  8527  0229  0087               	movwf	7
  8528  022A  0801               	movf	1,w
  8529  022B  3192  228F  3180   	fcall	_concat
  8530  022E  0020               	movlb	0	; select bank0
  8531  022F  0821               	movf	?_concat+1,w
  8532  0230  00CC               	movwf	PROTOCOL_Print_TLV@v+1
  8533  0231  0820               	movf	?_concat,w
  8534  0232  00CB               	movwf	PROTOCOL_Print_TLV@v
  8535                           
  8536                           ;protocol.c: 251: if (v <= -100 || v >= 0) {
  8537  0233  084C               	movf	PROTOCOL_Print_TLV@v+1,w
  8538  0234  3A80               	xorlw	128
  8539  0235  00C7               	movwf	??_PROTOCOL_Print_TLV
  8540  0236  307F               	movlw	127
  8541  0237  0247               	subwf	??_PROTOCOL_Print_TLV,w
  8542  0238  1D03               	skipz
  8543  0239  2A3C               	goto	u5885
  8544  023A  309D               	movlw	157
  8545  023B  024B               	subwf	PROTOCOL_Print_TLV@v,w
  8546  023C                     u5885:	
  8547  023C  1C03               	skipc
  8548  023D  2A41               	goto	l5201
  8549  023E  0020               	movlb	0	; select bank0
  8550  023F  1BCC               	btfsc	PROTOCOL_Print_TLV@v+1,7
  8551  0240  2A46               	goto	l5203
  8552  0241                     l5201:	
  8553                           
  8554                           ;protocol.c: 252: printf("%d.%02d,", v/100, abs(v%100));
  8555  0241  30FD               	movlw	low ((STR_65+1)| (0+32768))
  8556  0242  0020               	movlb	0	; select bank0
  8557  0243  00AE               	movwf	printf@f
  8558  0244  3090               	movlw	high ((STR_65+1)| (0+32768))
  8559  0245  2A4A               	goto	L11
  8560  0246                     l5203:	
  8561                           ;protocol.c: 253: } else {
  8562                           
  8563                           
  8564                           ;protocol.c: 254: printf("-%d.%02d,", v/100, abs(v%100));
  8565  0246  30FC               	movlw	low (STR_65| (0+32768))
  8566  0247  0020               	movlb	0	; select bank0
  8567  0248  00AE               	movwf	printf@f
  8568  0249  3090               	movlw	high (STR_65| (0+32768))
  8569  024A                     L11:	
  8570  024A  00AF               	movwf	printf@f+1
  8571  024B  3064               	movlw	100
  8572  024C  00A0               	movwf	___awdiv@divisor
  8573  024D  3000               	movlw	0
  8574  024E  00A1               	movwf	___awdiv@divisor+1
  8575  024F  084C               	movf	PROTOCOL_Print_TLV@v+1,w
  8576  0250  00A3               	movwf	___awdiv@dividend+1
  8577  0251  084B               	movf	PROTOCOL_Print_TLV@v,w
  8578  0252  00A2               	movwf	___awdiv@dividend
  8579  0253  3188  2058  3180   	fcall	___awdiv
  8580  0256  0020               	movlb	0	; select bank0
  8581  0257  0821               	movf	?___awdiv+1,w
  8582  0258  00B1               	movwf	?_printf+3
  8583  0259  0820               	movf	?___awdiv,w
  8584  025A  00B0               	movwf	?_printf+2
  8585  025B  3064               	movlw	100
  8586  025C  00A0               	movwf	___awmod@divisor
  8587  025D  3000               	movlw	0
  8588  025E  00A1               	movwf	___awmod@divisor+1
  8589  025F  084C               	movf	PROTOCOL_Print_TLV@v+1,w
  8590  0260  00A3               	movwf	___awmod@dividend+1
  8591  0261  084B               	movf	PROTOCOL_Print_TLV@v,w
  8592  0262  00A2               	movwf	___awmod@dividend
  8593  0263  3196  268C  3180   	fcall	___awmod
  8594  0266  0020               	movlb	0	; select bank0
  8595  0267  0821               	movf	?___awmod+1,w
  8596  0268  00A8               	movwf	abs@a+1
  8597  0269  0820               	movf	?___awmod,w
  8598  026A  00A7               	movwf	abs@a
  8599  026B  3192  225F  3180   	fcall	_abs
  8600  026E  0020               	movlb	0	; select bank0
  8601  026F  0828               	movf	?_abs+1,w
  8602  0270  00B3               	movwf	?_printf+5
  8603  0271  0827               	movf	?_abs,w
  8604  0272  00B2               	movwf	?_printf+4
  8605  0273  318E  262B  3180   	fcall	_printf
  8606  0276  0020               	movlb	0	; select bank0
  8607  0277  086B               	movf	_i,w
  8608  0278  3E02               	addlw	2
  8609  0279  00C7               	movwf	??_PROTOCOL_Print_TLV
  8610  027A  0847               	movf	??_PROTOCOL_Print_TLV,w
  8611  027B  00EB               	movwf	_i
  8612  027C  2A13               	goto	l5207
  8613  027D                     l5209:	
  8614                           
  8615                           ;protocol.c: 255: }
  8616                           ;protocol.c: 256: }
  8617                           ;protocol.c: 257: v = (int16_t)(concat(pbuffer[i], pbuffer[i+1]));
  8618  027D  086B               	movf	_i,w
  8619  027E  3E01               	addlw	1
  8620  027F  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  8621  0280  00C7               	movwf	??_PROTOCOL_Print_TLV
  8622  0281  0847               	movf	??_PROTOCOL_Print_TLV,w
  8623  0282  0086               	movwf	6
  8624  0283  3001               	movlw	1	; select bank2/3
  8625  0284  0087               	movwf	7
  8626  0285  0801               	movf	1,w
  8627  0286  00C8               	movwf	??_PROTOCOL_Print_TLV+1
  8628  0287  0848               	movf	??_PROTOCOL_Print_TLV+1,w
  8629  0288  00A0               	movwf	concat@lsb
  8630  0289  086B               	movf	_i,w
  8631  028A  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  8632  028B  00C9               	movwf	??_PROTOCOL_Print_TLV+2
  8633  028C  0849               	movf	??_PROTOCOL_Print_TLV+2,w
  8634  028D  0086               	movwf	6
  8635  028E  3001               	movlw	1	; select bank2/3
  8636  028F  0087               	movwf	7
  8637  0290  0801               	movf	1,w
  8638  0291  3192  228F  3180   	fcall	_concat
  8639  0294  0020               	movlb	0	; select bank0
  8640  0295  0821               	movf	?_concat+1,w
  8641  0296  00CC               	movwf	PROTOCOL_Print_TLV@v+1
  8642  0297  0820               	movf	?_concat,w
  8643  0298  00CB               	movwf	PROTOCOL_Print_TLV@v
  8644                           
  8645                           ;protocol.c: 258: if (v <= -100 || v >= 0) {
  8646  0299  084C               	movf	PROTOCOL_Print_TLV@v+1,w
  8647  029A  3A80               	xorlw	128
  8648  029B  00C7               	movwf	??_PROTOCOL_Print_TLV
  8649  029C  307F               	movlw	127
  8650  029D  0247               	subwf	??_PROTOCOL_Print_TLV,w
  8651  029E  1D03               	skipz
  8652  029F  2AA2               	goto	u5915
  8653  02A0  309D               	movlw	157
  8654  02A1  024B               	subwf	PROTOCOL_Print_TLV@v,w
  8655  02A2                     u5915:	
  8656  02A2  1C03               	skipc
  8657  02A3  2AA7               	goto	l5215
  8658  02A4  0020               	movlb	0	; select bank0
  8659  02A5  1BCC               	btfsc	PROTOCOL_Print_TLV@v+1,7
  8660  02A6  2AD7               	goto	l5217
  8661  02A7                     l5215:	
  8662                           
  8663                           ;protocol.c: 259: printf("%d.%02d\n", v/100, abs(v%100));
  8664  02A7  30DF               	movlw	low ((STR_67+1)| (0+32768))
  8665  02A8  0020               	movlb	0	; select bank0
  8666  02A9  00AE               	movwf	printf@f
  8667  02AA  3090               	movlw	high ((STR_67+1)| (0+32768))
  8668  02AB  00AF               	movwf	printf@f+1
  8669  02AC  3064               	movlw	100
  8670  02AD  00A0               	movwf	___awdiv@divisor
  8671  02AE  3000               	movlw	0
  8672  02AF  00A1               	movwf	___awdiv@divisor+1
  8673  02B0  084C               	movf	PROTOCOL_Print_TLV@v+1,w
  8674  02B1  00A3               	movwf	___awdiv@dividend+1
  8675  02B2  084B               	movf	PROTOCOL_Print_TLV@v,w
  8676  02B3  00A2               	movwf	___awdiv@dividend
  8677  02B4  3188  2058  3180   	fcall	___awdiv
  8678  02B7  0020               	movlb	0	; select bank0
  8679  02B8  0821               	movf	?___awdiv+1,w
  8680  02B9  00B1               	movwf	?_printf+3
  8681  02BA  0820               	movf	?___awdiv,w
  8682  02BB  00B0               	movwf	?_printf+2
  8683  02BC  3064               	movlw	100
  8684  02BD  00A0               	movwf	___awmod@divisor
  8685  02BE  3000               	movlw	0
  8686  02BF  00A1               	movwf	___awmod@divisor+1
  8687  02C0  084C               	movf	PROTOCOL_Print_TLV@v+1,w
  8688  02C1  00A3               	movwf	___awmod@dividend+1
  8689  02C2  084B               	movf	PROTOCOL_Print_TLV@v,w
  8690  02C3  00A2               	movwf	___awmod@dividend
  8691  02C4  3196  268C  3180   	fcall	___awmod
  8692  02C7  0020               	movlb	0	; select bank0
  8693  02C8  0821               	movf	?___awmod+1,w
  8694  02C9  00A8               	movwf	abs@a+1
  8695  02CA  0820               	movf	?___awmod,w
  8696  02CB  00A7               	movwf	abs@a
  8697  02CC  3192  225F  3180   	fcall	_abs
  8698  02CF  0020               	movlb	0	; select bank0
  8699  02D0  0828               	movf	?_abs+1,w
  8700  02D1  00B3               	movwf	?_printf+5
  8701  02D2  0827               	movf	?_abs,w
  8702  02D3  00B2               	movwf	?_printf+4
  8703  02D4  318E  262B         	fcall	_printf
  8704                           
  8705                           ;protocol.c: 260: } else {
  8706  02D6  0008               	return
  8707  02D7                     l5217:	
  8708                           
  8709                           ;protocol.c: 261: printf("-%d.%02d\n", v/100, abs(v%100));
  8710  02D7  30DE               	movlw	low (STR_67| (0+32768))
  8711  02D8  0020               	movlb	0	; select bank0
  8712  02D9  00AE               	movwf	printf@f
  8713  02DA  3090               	movlw	high (STR_67| (0+32768))
  8714  02DB  00AF               	movwf	printf@f+1
  8715  02DC  3064               	movlw	100
  8716  02DD  00A0               	movwf	___awdiv@divisor
  8717  02DE  3000               	movlw	0
  8718  02DF  00A1               	movwf	___awdiv@divisor+1
  8719  02E0  084C               	movf	PROTOCOL_Print_TLV@v+1,w
  8720  02E1  00A3               	movwf	___awdiv@dividend+1
  8721  02E2  084B               	movf	PROTOCOL_Print_TLV@v,w
  8722  02E3  00A2               	movwf	___awdiv@dividend
  8723  02E4  3188  2058  3180   	fcall	___awdiv
  8724  02E7  0020               	movlb	0	; select bank0
  8725  02E8  0821               	movf	?___awdiv+1,w
  8726  02E9  00B1               	movwf	?_printf+3
  8727  02EA  0820               	movf	?___awdiv,w
  8728  02EB  00B0               	movwf	?_printf+2
  8729  02EC  3064               	movlw	100
  8730  02ED  00A0               	movwf	___awmod@divisor
  8731  02EE  3000               	movlw	0
  8732  02EF  00A1               	movwf	___awmod@divisor+1
  8733  02F0  084C               	movf	PROTOCOL_Print_TLV@v+1,w
  8734  02F1  00A3               	movwf	___awmod@dividend+1
  8735  02F2  084B               	movf	PROTOCOL_Print_TLV@v,w
  8736  02F3  00A2               	movwf	___awmod@dividend
  8737  02F4  3196  268C  3180   	fcall	___awmod
  8738  02F7  0020               	movlb	0	; select bank0
  8739  02F8  0821               	movf	?___awmod+1,w
  8740  02F9  00A8               	movwf	abs@a+1
  8741  02FA  0820               	movf	?___awmod,w
  8742  02FB  00A7               	movwf	abs@a
  8743  02FC  3192  225F  3180   	fcall	_abs
  8744  02FF  0020               	movlb	0	; select bank0
  8745  0300  0828               	movf	?_abs+1,w
  8746  0301  00B3               	movwf	?_printf+5
  8747  0302  0827               	movf	?_abs,w
  8748  0303  00B2               	movwf	?_printf+4
  8749  0304  318E  262B         	fcall	_printf
  8750                           
  8751                           ;protocol.c: 262: }
  8752                           ;protocol.c: 263: break;
  8753  0306  0008               	return
  8754  0307                     l5219:	
  8755                           ;protocol.c: 264: case 0x06:
  8756                           
  8757                           
  8758                           ;protocol.c: 265: printf("NO_DATA\n");
  8759  0307  3024               	movlw	low (STR_68| (0+32768))
  8760  0308  0020               	movlb	0	; select bank0
  8761  0309  00AE               	movwf	printf@f
  8762  030A  3091               	movlw	high (STR_68| (0+32768))
  8763  030B  00AF               	movwf	printf@f+1
  8764  030C  318E  262B         	fcall	_printf
  8765                           
  8766                           ;protocol.c: 266: break;
  8767  030E  0008               	return
  8768  030F                     l5221:	
  8769                           ;protocol.c: 267: default:
  8770                           
  8771                           
  8772                           ;protocol.c: 268: printf("ILLEGAL_TYPE\n");
  8773  030F  30AF               	movlw	low (STR_69| (0+32768))
  8774  0310  0020               	movlb	0	; select bank0
  8775  0311  00AE               	movwf	printf@f
  8776  0312  3090               	movlw	high (STR_69| (0+32768))
  8777  0313  00AF               	movwf	printf@f+1
  8778  0314  318E  262B         	fcall	_printf
  8779                           
  8780                           ;protocol.c: 270: }
  8781                           
  8782                           ;protocol.c: 269: break;
  8783  0316  0008               	return
  8784  0317                     l5225:	
  8785  0317  0020               	movlb	0	; select bank0
  8786  0318  0844               	movf	PROTOCOL_Print_TLV@type,w
  8787                           
  8788                           ; Switch size 1, requested type "space"
  8789                           ; Number of cases is 6, Range of values is 1 to 6
  8790                           ; switch strategies available:
  8791                           ; Name         Instructions Cycles
  8792                           ; simple_byte           19    10 (average)
  8793                           ; direct_byte           21     9 (fixed)
  8794                           ; jumptable            263     9 (fixed)
  8795                           ;	Chosen strategy is simple_byte
  8796  0319  3A01               	xorlw	1	; case 1
  8797  031A  1903               	skipnz
  8798  031B  28C8               	goto	l5133
  8799  031C  3A03               	xorlw	3	; case 2
  8800  031D  1903               	skipnz
  8801  031E  2908               	goto	l5147
  8802  031F  3A01               	xorlw	1	; case 3
  8803  0320  1903               	skipnz
  8804  0321  2944               	goto	l5161
  8805  0322  3A07               	xorlw	7	; case 4
  8806  0323  1903               	skipnz
  8807  0324  29A4               	goto	l5175
  8808  0325  3A01               	xorlw	1	; case 5
  8809  0326  1903               	skipnz
  8810  0327  2A04               	goto	l5189
  8811  0328  3A03               	xorlw	3	; case 6
  8812  0329  1903               	skipnz
  8813  032A  2B07               	goto	l5219
  8814  032B  2B0F               	goto	l5221
  8815  032C  0008               	return
  8816  032D                     __end_of_PROTOCOL_Print_TLV:	
  8817                           
  8818                           	psect	text33
  8819  0E2B                     __ptext33:	
  8820 ;; *************** function _printf *****************
  8821 ;; Defined at:
  8822 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  8823 ;; Parameters:    Size  Location     Type
  8824 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  8825 ;;		 -> STR_81(10), STR_80(9), STR_79(10), STR_78(9), 
  8826 ;;		 -> STR_77(4), STR_76(4), STR_75(4), STR_74(4), 
  8827 ;;		 -> STR_73(4), STR_72(4), STR_71(4), STR_70(4), 
  8828 ;;		 -> STR_69(14), STR_68(9), STR_67(10), STR_66(9), 
  8829 ;;		 -> STR_65(10), STR_64(9), STR_63(7), STR_62(4), 
  8830 ;;		 -> STR_61(4), STR_60(9), STR_59(4), STR_58(4), 
  8831 ;;		 -> STR_57(10), STR_56(4), STR_55(4), STR_54(8), 
  8832 ;;		 -> STR_53(4), STR_52(4), STR_51(9), STR_50(6), 
  8833 ;;		 -> STR_49(10), STR_46(10), STR_42(10), STR_38(10), 
  8834 ;;		 -> STR_36(5), STR_31(4), STR_30(4), STR_29(4), 
  8835 ;;		 -> STR_28(7), STR_26(26), STR_24(26), STR_19(22), 
  8836 ;;		 -> STR_18(22), STR_17(26), STR_16(22), STR_15(4), 
  8837 ;;		 -> STR_14(4), STR_13(7), STR_12(25), STR_11(10), 
  8838 ;;		 -> STR_8(12), STR_7(11), STR_3(3), STR_2(10), 
  8839 ;; Auto vars:     Size  Location     Type
  8840 ;;  tmpval          4    0        struct .
  8841 ;;  width           2   33[BANK0 ] int 
  8842 ;;  len             2   30[BANK0 ] unsigned int 
  8843 ;;  val             2   28[BANK0 ] unsigned int 
  8844 ;;  cp              2   25[BANK0 ] PTR const unsigned char 
  8845 ;;		 -> STR_43(4), buf(48), STR_35(7), ROM(8192), 
  8846 ;;		 -> printf@c(1), STR_34(17), I2C1_ISR@i2c_address(2), 
  8847 ;;  c               1   35[BANK0 ] char 
  8848 ;;  flag            1   32[BANK0 ] unsigned char 
  8849 ;;  ap              1   27[BANK0 ] PTR void [1]
  8850 ;;		 -> ?_printf(2), 
  8851 ;;  prec            1   24[BANK0 ] char 
  8852 ;; Return value:  Size  Location     Type
  8853 ;;                  2   14[BANK0 ] int 
  8854 ;; Registers used:
  8855 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8856 ;; Tracked objects:
  8857 ;;		On entry : 0/0
  8858 ;;		On exit  : 0/0
  8859 ;;		Unchanged: 0/0
  8860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8861 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8862 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8863 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8864 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8865 ;;Total ram usage:       22 bytes
  8866 ;; Hardware stack levels used:    1
  8867 ;; Hardware stack levels required when called:    5
  8868 ;; This function calls:
  8869 ;;		___lwdiv
  8870 ;;		___lwmod
  8871 ;;		___wmul
  8872 ;;		_isdigit
  8873 ;;		_putch
  8874 ;; This function is called by:
  8875 ;;		_exec_remote_cmd
  8876 ;;		_print_dev_map
  8877 ;;		_one_shot_sen
  8878 ;;		_fetch
  8879 ;;		_command_handler
  8880 ;;		_PROTOCOL_Loop
  8881 ;;		_PROTOCOL_Print_TLV
  8882 ;; This function uses a non-reentrant model
  8883 ;;
  8884                           
  8885                           
  8886                           ;psect for function _printf
  8887  0E2B                     _printf:	
  8888                           
  8889                           ;doprnt.c: 466: va_list ap;
  8890                           ;doprnt.c: 499: signed char c;
  8891                           ;doprnt.c: 501: int width;
  8892                           ;doprnt.c: 506: signed char prec;
  8893                           ;doprnt.c: 508: unsigned char flag;
  8894                           ;doprnt.c: 523: union {
  8895                           ;doprnt.c: 524: unsigned long vd;
  8896                           ;doprnt.c: 525: double integ;
  8897                           ;doprnt.c: 526: } tmpval;
  8898                           ;doprnt.c: 528: unsigned int val;
  8899                           ;doprnt.c: 529: unsigned len;
  8900                           ;doprnt.c: 530: const char * cp;
  8901                           ;doprnt.c: 533: *ap = __va_start();
  8902                           
  8903                           ;incstack = 0
  8904                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8905  0E2B  3030               	movlw	(low ((?_printf| 0+2)))& (0+255)
  8906  0E2C  0020               	movlb	0	; select bank0
  8907  0E2D  00B4               	movwf	??_printf
  8908  0E2E  0834               	movf	??_printf,w
  8909  0E2F  00BB               	movwf	printf@ap
  8910  0E30                     l4955:	
  8911                           ;doprnt.c: 536: while(c = *f++) {
  8912                           
  8913  0E30  0020               	movlb	0	; select bank0
  8914  0E31  082F               	movf	printf@f+1,w
  8915  0E32  00B5               	movwf	??_printf+1
  8916  0E33  082E               	movf	printf@f,w
  8917  0E34  00B4               	movwf	??_printf
  8918  0E35  0AAE               	incf	printf@f,f
  8919  0E36  1903               	skipnz
  8920  0E37  0AAF               	incf	printf@f+1,f
  8921  0E38  0834               	movf	??_printf,w
  8922  0E39  0084               	movwf	4
  8923  0E3A  0835               	movf	??_printf+1,w
  8924  0E3B  0085               	movwf	5
  8925  0E3C  0800               	movf	0,w	;code access
  8926  0E3D  00B6               	movwf	??_printf+2
  8927  0E3E  0836               	movf	??_printf+2,w
  8928  0E3F  00C3               	movwf	printf@c
  8929  0E40  0843               	movf	printf@c,w
  8930  0E41  1903               	btfsc	3,2
  8931  0E42  0008               	return
  8932                           
  8933                           ;doprnt.c: 538: if(c != '%')
  8934  0E43  3025               	movlw	37
  8935  0E44  0643               	xorwf	printf@c,w
  8936  0E45  1903               	btfsc	3,2
  8937  0E46  2E4C               	goto	l4831
  8938                           
  8939                           ;doprnt.c: 540: {
  8940                           ;doprnt.c: 541: (putch(c) );
  8941  0E47  0843               	movf	printf@c,w
  8942  0E48  3191  21F2  318E   	fcall	_putch
  8943                           
  8944                           ;doprnt.c: 542: continue;
  8945  0E4B  2E30               	goto	l4955
  8946  0E4C                     l4831:	
  8947                           
  8948                           ;doprnt.c: 543: }
  8949                           ;doprnt.c: 546: width = 0;
  8950  0E4C  0020               	movlb	0	; select bank0
  8951  0E4D  01C1               	clrf	printf@width
  8952  0E4E  01C2               	clrf	printf@width+1
  8953                           
  8954                           ;doprnt.c: 548: flag = 0;
  8955  0E4F  01C0               	clrf	printf@flag
  8956                           
  8957                           ;doprnt.c: 551: switch(*f) {
  8958                           
  8959                           ;doprnt.c: 550: for(;;) {
  8960  0E50  2E56               	goto	l4837
  8961  0E51                     l660:	
  8962                           ;doprnt.c: 579: case '0':
  8963                           
  8964                           
  8965                           ;doprnt.c: 580: flag |= 0x04;
  8966  0E51  1540               	bsf	printf@flag,2
  8967                           
  8968                           ;doprnt.c: 581: f++;
  8969  0E52  3001               	movlw	1
  8970  0E53  07AE               	addwf	printf@f,f
  8971  0E54  3000               	movlw	0
  8972  0E55  3DAF               	addwfc	printf@f+1,f
  8973  0E56                     l4837:	
  8974                           ;doprnt.c: 584: }
  8975                           
  8976                           ;doprnt.c: 582: continue;
  8977                           
  8978  0E56  082E               	movf	printf@f,w
  8979  0E57  0084               	movwf	4
  8980  0E58  082F               	movf	printf@f+1,w
  8981  0E59  0085               	movwf	5
  8982  0E5A  0800               	movf	0,w	;code access
  8983                           
  8984                           ; Switch size 1, requested type "space"
  8985                           ; Number of cases is 1, Range of values is 48 to 48
  8986                           ; switch strategies available:
  8987                           ; Name         Instructions Cycles
  8988                           ; simple_byte            4     3 (average)
  8989                           ; direct_byte           11     9 (fixed)
  8990                           ; jumptable            263     9 (fixed)
  8991                           ;	Chosen strategy is simple_byte
  8992  0E5B  3A30               	xorlw	48	; case 48
  8993  0E5C  1903               	skipnz
  8994  0E5D  2E51               	goto	l660
  8995  0E5E  2E5F               	goto	l4839
  8996  0E5F                     l4839:	
  8997                           ;doprnt.c: 586: }
  8998                           
  8999                           ;doprnt.c: 585: break;
  9000                           
  9001                           
  9002                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  9003  0E5F  082E               	movf	printf@f,w
  9004  0E60  0084               	movwf	4
  9005  0E61  082F               	movf	printf@f+1,w
  9006  0E62  0085               	movwf	5
  9007  0E63  0800               	movf	0,w	;code access
  9008  0E64  3192  2250  318E   	fcall	_isdigit
  9009  0E67  1C03               	btfss	3,0
  9010  0E68  2F00               	goto	l4887
  9011                           
  9012                           ;doprnt.c: 598: width = 0;
  9013  0E69  0020               	movlb	0	; select bank0
  9014  0E6A  01C1               	clrf	printf@width
  9015  0E6B  01C2               	clrf	printf@width+1
  9016  0E6C                     l4843:	
  9017                           ;doprnt.c: 599: do {
  9018                           
  9019                           
  9020                           ;doprnt.c: 600: width *= 10;
  9021  0E6C  300A               	movlw	10
  9022  0E6D  0020               	movlb	0	; select bank0
  9023  0E6E  00A0               	movwf	___wmul@multiplier
  9024  0E6F  3000               	movlw	0
  9025  0E70  00A1               	movwf	___wmul@multiplier+1
  9026  0E71  0842               	movf	printf@width+1,w
  9027  0E72  00A3               	movwf	___wmul@multiplicand+1
  9028  0E73  0841               	movf	printf@width,w
  9029  0E74  00A2               	movwf	___wmul@multiplicand
  9030  0E75  3193  2362  318E   	fcall	___wmul
  9031  0E78  0020               	movlb	0	; select bank0
  9032  0E79  0821               	movf	?___wmul+1,w
  9033  0E7A  00C2               	movwf	printf@width+1
  9034  0E7B  0820               	movf	?___wmul,w
  9035  0E7C  00C1               	movwf	printf@width
  9036                           
  9037                           ;doprnt.c: 601: width += *f++ - '0';
  9038  0E7D  082E               	movf	printf@f,w
  9039  0E7E  0084               	movwf	4
  9040  0E7F  082F               	movf	printf@f+1,w
  9041  0E80  0085               	movwf	5
  9042  0E81  0800               	movf	0,w	;code access
  9043  0E82  3ED0               	addlw	208
  9044  0E83  00B4               	movwf	??_printf
  9045  0E84  30FF               	movlw	255
  9046  0E85  1803               	skipnc
  9047  0E86  3000               	movlw	0
  9048  0E87  00B5               	movwf	??_printf+1
  9049  0E88  0834               	movf	??_printf,w
  9050  0E89  07C1               	addwf	printf@width,f
  9051  0E8A  0835               	movf	??_printf+1,w
  9052  0E8B  3DC2               	addwfc	printf@width+1,f
  9053  0E8C  3001               	movlw	1
  9054  0E8D  07AE               	addwf	printf@f,f
  9055  0E8E  3000               	movlw	0
  9056  0E8F  3DAF               	addwfc	printf@f+1,f
  9057                           
  9058                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  9059  0E90  082E               	movf	printf@f,w
  9060  0E91  0084               	movwf	4
  9061  0E92  082F               	movf	printf@f+1,w
  9062  0E93  0085               	movwf	5
  9063  0E94  0800               	movf	0,w	;code access
  9064  0E95  3192  2250  318E   	fcall	_isdigit
  9065  0E98  1C03               	btfss	3,0
  9066  0E99  2F00               	goto	l4887
  9067  0E9A  2E6C               	goto	l4843
  9068  0E9B                     l4851:	
  9069                           ;doprnt.c: 728: case 's':
  9070                           
  9071                           ;doprnt.c: 698: case 'i':
  9072                           ;doprnt.c: 699: break;
  9073                           
  9074                           ;doprnt.c: 697: case 'd':
  9075                           
  9076                           ;doprnt.c: 638: goto alldone;
  9077                           
  9078                           ;doprnt.c: 637: case 0:
  9079                           
  9080                           ;doprnt.c: 608: }
  9081                           ;doprnt.c: 635: switch(c = *f++) {
  9082                           
  9083                           
  9084                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  9085  0E9B  0020               	movlb	0	; select bank0
  9086  0E9C  083B               	movf	printf@ap,w
  9087  0E9D  0086               	movwf	6
  9088  0E9E  0187               	clrf	7
  9089  0E9F  3F40               	moviw [0]fsr1
  9090  0EA0  00B9               	movwf	printf@cp
  9091  0EA1  3F41               	moviw [1]fsr1
  9092  0EA2  00BA               	movwf	printf@cp+1
  9093  0EA3  3002               	movlw	2
  9094  0EA4  00B4               	movwf	??_printf
  9095  0EA5  0834               	movf	??_printf,w
  9096  0EA6  07BB               	addwf	printf@ap,f
  9097                           
  9098                           ;doprnt.c: 740: if(!cp)
  9099  0EA7  0839               	movf	printf@cp,w
  9100  0EA8  043A               	iorwf	printf@cp+1,w
  9101  0EA9  1D03               	btfss	3,2
  9102  0EAA  2EAF               	goto	l4859
  9103                           
  9104                           ;doprnt.c: 741: cp = "(null)";
  9105  0EAB  303D               	movlw	low (STR_35| (0+32768))
  9106  0EAC  00B9               	movwf	printf@cp
  9107  0EAD  3091               	movlw	high (STR_35| (0+32768))
  9108  0EAE  00BA               	movwf	printf@cp+1
  9109  0EAF                     l4859:	
  9110                           
  9111                           ;doprnt.c: 745: len = 0;
  9112  0EAF  01BE               	clrf	printf@len
  9113  0EB0  01BF               	clrf	printf@len+1
  9114  0EB1                     l4863:	
  9115                           ;doprnt.c: 746: while(cp[len])
  9116                           
  9117  0EB1  0839               	movf	printf@cp,w
  9118  0EB2  073E               	addwf	printf@len,w
  9119  0EB3  0084               	movwf	4
  9120  0EB4  083A               	movf	printf@cp+1,w
  9121  0EB5  3D3F               	addwfc	printf@len+1,w
  9122  0EB6  0085               	movwf	5
  9123  0EB7  0012               	moviw fsr0++
  9124  0EB8  1903               	btfsc	3,2
  9125  0EB9  2EBF               	goto	l4865
  9126                           
  9127                           ;doprnt.c: 747: len++;
  9128  0EBA  3001               	movlw	1
  9129  0EBB  07BE               	addwf	printf@len,f
  9130  0EBC  3000               	movlw	0
  9131  0EBD  3DBF               	addwfc	printf@len+1,f
  9132  0EBE  2EB1               	goto	l4863
  9133  0EBF                     l4865:	
  9134                           ;doprnt.c: 750: dostring:
  9135                           
  9136                           
  9137                           ;doprnt.c: 757: if(width > len)
  9138  0EBF  0842               	movf	printf@width+1,w
  9139  0EC0  023F               	subwf	printf@len+1,w
  9140  0EC1  1D03               	skipz
  9141  0EC2  2EC5               	goto	u5295
  9142  0EC3  0841               	movf	printf@width,w
  9143  0EC4  023E               	subwf	printf@len,w
  9144  0EC5                     u5295:	
  9145  0EC5  1803               	skipnc
  9146  0EC6  2ECC               	goto	l4869
  9147                           
  9148                           ;doprnt.c: 758: width -= len;
  9149  0EC7  083E               	movf	printf@len,w
  9150  0EC8  02C1               	subwf	printf@width,f
  9151  0EC9  083F               	movf	printf@len+1,w
  9152  0ECA  3BC2               	subwfb	printf@width+1,f
  9153  0ECB  2ECE               	goto	l4873
  9154  0ECC                     l4869:	
  9155                           
  9156                           ;doprnt.c: 759: else
  9157                           ;doprnt.c: 760: width = 0;
  9158  0ECC  01C1               	clrf	printf@width
  9159  0ECD  01C2               	clrf	printf@width+1
  9160  0ECE                     l4873:	
  9161                           ;doprnt.c: 764: while(width--)
  9162                           
  9163  0ECE  30FF               	movlw	255
  9164  0ECF  0020               	movlb	0	; select bank0
  9165  0ED0  07C1               	addwf	printf@width,f
  9166  0ED1  30FF               	movlw	255
  9167  0ED2  3DC2               	addwfc	printf@width+1,f
  9168  0ED3  0A41               	incf	printf@width,w
  9169  0ED4  1903               	btfsc	3,2
  9170  0ED5  0A42               	incf	printf@width+1,w
  9171  0ED6  1903               	btfsc	3,2
  9172  0ED7  2EEA               	goto	l4879
  9173                           
  9174                           ;doprnt.c: 765: (putch(' ') );
  9175  0ED8  3020               	movlw	32
  9176  0ED9  3191  21F2  318E   	fcall	_putch
  9177  0EDC  2ECE               	goto	l4873
  9178  0EDD                     l4875:	
  9179                           ;doprnt.c: 767: while(len--)
  9180                           
  9181                           
  9182                           ;doprnt.c: 768: (putch(*cp++) );
  9183  0EDD  0839               	movf	printf@cp,w
  9184  0EDE  0084               	movwf	4
  9185  0EDF  083A               	movf	printf@cp+1,w
  9186  0EE0  0085               	movwf	5
  9187  0EE1  0800               	movf	0,w	;code access
  9188  0EE2  3191  21F2  318E   	fcall	_putch
  9189  0EE5  3001               	movlw	1
  9190  0EE6  0020               	movlb	0	; select bank0
  9191  0EE7  07B9               	addwf	printf@cp,f
  9192  0EE8  3000               	movlw	0
  9193  0EE9  3DBA               	addwfc	printf@cp+1,f
  9194  0EEA                     l4879:	
  9195  0EEA  3001               	movlw	1
  9196  0EEB  02BE               	subwf	printf@len,f
  9197  0EEC  3000               	movlw	0
  9198  0EED  3BBF               	subwfb	printf@len+1,f
  9199  0EEE  0A3E               	incf	printf@len,w
  9200  0EEF  1D03               	skipz
  9201  0EF0  2EDD               	goto	l4875
  9202  0EF1  0A3F               	incf	printf@len+1,w
  9203  0EF2  1903               	btfsc	3,2
  9204  0EF3  2E30               	goto	l4955
  9205  0EF4  2EDD               	goto	l4875
  9206  0EF5                     l4881:	
  9207                           ;doprnt.c: 802: default:
  9208                           
  9209                           ;doprnt.c: 774: continue;
  9210                           
  9211                           
  9212                           ;doprnt.c: 805: cp = (char *)&c;
  9213  0EF5  3043               	movlw	low printf@c
  9214  0EF6  00B9               	movwf	printf@cp
  9215  0EF7  3000               	movlw	high printf@c
  9216  0EF8  00BA               	movwf	printf@cp+1
  9217                           
  9218                           ;doprnt.c: 806: len = 1;
  9219  0EF9  3001               	movlw	1
  9220  0EFA  00BE               	movwf	printf@len
  9221  0EFB  3000               	movlw	0
  9222  0EFC  00BF               	movwf	printf@len+1
  9223                           
  9224                           ;doprnt.c: 807: goto dostring;
  9225  0EFD  2EBF               	goto	l4865
  9226  0EFE                     l688:	
  9227                           ;doprnt.c: 817: case 'u':
  9228                           
  9229                           
  9230                           ;doprnt.c: 818: flag |= 0x40;
  9231  0EFE  1740               	bsf	printf@flag,6
  9232                           
  9233                           ;doprnt.c: 822: }
  9234                           
  9235                           ;doprnt.c: 819: break;
  9236  0EFF  2F1E               	goto	l672
  9237  0F00                     l4887:	
  9238  0F00  0020               	movlb	0	; select bank0
  9239  0F01  082F               	movf	printf@f+1,w
  9240  0F02  00B5               	movwf	??_printf+1
  9241  0F03  082E               	movf	printf@f,w
  9242  0F04  00B4               	movwf	??_printf
  9243  0F05  0AAE               	incf	printf@f,f
  9244  0F06  1903               	skipnz
  9245  0F07  0AAF               	incf	printf@f+1,f
  9246  0F08  0834               	movf	??_printf,w
  9247  0F09  0084               	movwf	4
  9248  0F0A  0835               	movf	??_printf+1,w
  9249  0F0B  0085               	movwf	5
  9250  0F0C  0800               	movf	0,w	;code access
  9251  0F0D  00C3               	movwf	printf@c
  9252                           
  9253                           ; Switch size 1, requested type "space"
  9254                           ; Number of cases is 5, Range of values is 0 to 117
  9255                           ; switch strategies available:
  9256                           ; Name         Instructions Cycles
  9257                           ; simple_byte           16     9 (average)
  9258                           ; direct_byte          242     6 (fixed)
  9259                           ; jumptable            260     6 (fixed)
  9260                           ;	Chosen strategy is simple_byte
  9261  0F0E  3A00               	xorlw	0	; case 0
  9262  0F0F  1903               	skipnz
  9263  0F10  2FFF               	goto	l712
  9264  0F11  3A64               	xorlw	100	; case 100
  9265  0F12  1903               	skipnz
  9266  0F13  2F1E               	goto	l672
  9267  0F14  3A0D               	xorlw	13	; case 105
  9268  0F15  1903               	skipnz
  9269  0F16  2F1E               	goto	l672
  9270  0F17  3A1A               	xorlw	26	; case 115
  9271  0F18  1903               	skipnz
  9272  0F19  2E9B               	goto	l4851
  9273  0F1A  3A06               	xorlw	6	; case 117
  9274  0F1B  1903               	skipnz
  9275  0F1C  2EFE               	goto	l688
  9276  0F1D  2EF5               	goto	l4881
  9277  0F1E                     l672:	
  9278                           
  9279                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  9280  0F1E  0020               	movlb	0	; select bank0
  9281  0F1F  1B40               	btfsc	printf@flag,6
  9282  0F20  2F38               	goto	l4899
  9283                           
  9284                           ;doprnt.c: 1253: {
  9285                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  9286  0F21  083B               	movf	printf@ap,w
  9287  0F22  0086               	movwf	6
  9288  0F23  0187               	clrf	7
  9289  0F24  3F40               	moviw [0]fsr1
  9290  0F25  00BC               	movwf	printf@val
  9291  0F26  3F41               	moviw [1]fsr1
  9292  0F27  00BD               	movwf	printf@val+1
  9293  0F28  3002               	movlw	2
  9294  0F29  00B4               	movwf	??_printf
  9295  0F2A  0834               	movf	??_printf,w
  9296  0F2B  07BB               	addwf	printf@ap,f
  9297                           
  9298                           ;doprnt.c: 1261: if((int)val < 0) {
  9299  0F2C  1FBD               	btfss	printf@val+1,7
  9300  0F2D  2F43               	goto	l4903
  9301                           
  9302                           ;doprnt.c: 1262: flag |= 0x03;
  9303  0F2E  3003               	movlw	3
  9304  0F2F  00B4               	movwf	??_printf
  9305  0F30  0834               	movf	??_printf,w
  9306  0F31  04C0               	iorwf	printf@flag,f
  9307                           
  9308                           ;doprnt.c: 1263: val = -val;
  9309  0F32  09BC               	comf	printf@val,f
  9310  0F33  09BD               	comf	printf@val+1,f
  9311  0F34  0ABC               	incf	printf@val,f
  9312  0F35  1903               	skipnz
  9313  0F36  0ABD               	incf	printf@val+1,f
  9314                           
  9315                           ;doprnt.c: 1264: }
  9316                           ;doprnt.c: 1266: }
  9317  0F37  2F43               	goto	l4903
  9318  0F38                     l4899:	
  9319                           
  9320                           ;doprnt.c: 1268: else
  9321                           ;doprnt.c: 1273: {
  9322                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  9323  0F38  083B               	movf	printf@ap,w
  9324  0F39  0086               	movwf	6
  9325  0F3A  0187               	clrf	7
  9326  0F3B  3F40               	moviw [0]fsr1
  9327  0F3C  00BC               	movwf	printf@val
  9328  0F3D  3F41               	moviw [1]fsr1
  9329  0F3E  00BD               	movwf	printf@val+1
  9330  0F3F  3002               	movlw	2
  9331  0F40  00B4               	movwf	??_printf
  9332  0F41  0834               	movf	??_printf,w
  9333  0F42  07BB               	addwf	printf@ap,f
  9334  0F43                     l4903:	
  9335                           
  9336                           ;doprnt.c: 1287: }
  9337                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  9338  0F43  01C3               	clrf	printf@c
  9339  0F44  0AC3               	incf	printf@c,f
  9340  0F45  3005               	movlw	5
  9341  0F46  0643               	xorwf	printf@c,w
  9342  0F47  1903               	btfsc	3,2
  9343  0F48  2F68               	goto	l4915
  9344  0F49                     l4909:	
  9345                           
  9346                           ;doprnt.c: 1306: if(val < dpowers[c])
  9347  0F49  0843               	movf	printf@c,w
  9348  0F4A  00B4               	movwf	??_printf
  9349  0F4B  01B5               	clrf	??_printf+1
  9350  0F4C  35B4               	lslf	??_printf,f
  9351  0F4D  0DB5               	rlf	??_printf+1,f
  9352  0F4E  3000               	movlw	low (_dpowers| (0+32768))
  9353  0F4F  0734               	addwf	??_printf,w
  9354  0F50  0084               	movwf	4
  9355  0F51  3090               	movlw	high (_dpowers| (0+32768))
  9356  0F52  3D35               	addwfc	??_printf+1,w
  9357  0F53  0085               	movwf	5
  9358  0F54  3F00               	moviw [0]fsr0
  9359  0F55  00B6               	movwf	??_printf+2
  9360  0F56  3F01               	moviw [1]fsr0
  9361  0F57  00B7               	movwf	??_printf+3
  9362  0F58  0837               	movf	??_printf+3,w
  9363  0F59  023D               	subwf	printf@val+1,w
  9364  0F5A  1D03               	skipz
  9365  0F5B  2F5E               	goto	u5355
  9366  0F5C  0836               	movf	??_printf+2,w
  9367  0F5D  023C               	subwf	printf@val,w
  9368  0F5E                     u5355:	
  9369  0F5E  1C03               	btfss	3,0
  9370  0F5F  2F68               	goto	l4915
  9371                           
  9372                           ;doprnt.c: 1307: break;
  9373  0F60  3001               	movlw	1
  9374  0F61  00B4               	movwf	??_printf
  9375  0F62  0834               	movf	??_printf,w
  9376  0F63  07C3               	addwf	printf@c,f
  9377  0F64  3005               	movlw	5
  9378  0F65  0643               	xorwf	printf@c,w
  9379  0F66  1D03               	btfss	3,2
  9380  0F67  2F49               	goto	l4909
  9381  0F68                     l4915:	
  9382                           
  9383                           ;doprnt.c: 1345: if(width && flag & 0x03)
  9384  0F68  0841               	movf	printf@width,w
  9385  0F69  0442               	iorwf	printf@width+1,w
  9386  0F6A  1903               	btfsc	3,2
  9387  0F6B  2F74               	goto	l695
  9388  0F6C  0840               	movf	printf@flag,w
  9389  0F6D  3903               	andlw	3
  9390  0F6E  1903               	btfsc	3,2
  9391  0F6F  2F74               	goto	l695
  9392                           
  9393                           ;doprnt.c: 1346: width--;
  9394  0F70  30FF               	movlw	255
  9395  0F71  07C1               	addwf	printf@width,f
  9396  0F72  30FF               	movlw	255
  9397  0F73  3DC2               	addwfc	printf@width+1,f
  9398  0F74                     l695:	
  9399                           
  9400                           ;doprnt.c: 1381: if(width > c)
  9401  0F74  0843               	movf	printf@c,w
  9402  0F75  00B4               	movwf	??_printf
  9403  0F76  01B5               	clrf	??_printf+1
  9404  0F77  1BB4               	btfsc	??_printf,7
  9405  0F78  03B5               	decf	??_printf+1,f
  9406  0F79  0835               	movf	??_printf+1,w
  9407  0F7A  3A80               	xorlw	128
  9408  0F7B  00B6               	movwf	??_printf+2
  9409  0F7C  0842               	movf	printf@width+1,w
  9410  0F7D  3A80               	xorlw	128
  9411  0F7E  0236               	subwf	??_printf+2,w
  9412  0F7F  1D03               	skipz
  9413  0F80  2F83               	goto	u5395
  9414  0F81  0841               	movf	printf@width,w
  9415  0F82  0234               	subwf	??_printf,w
  9416  0F83                     u5395:	
  9417  0F83  1803               	skipnc
  9418  0F84  2F90               	goto	l4923
  9419                           
  9420                           ;doprnt.c: 1382: width -= c;
  9421  0F85  0020               	movlb	0	; select bank0
  9422  0F86  0843               	movf	printf@c,w
  9423  0F87  00B4               	movwf	??_printf
  9424  0F88  01B5               	clrf	??_printf+1
  9425  0F89  1BB4               	btfsc	??_printf,7
  9426  0F8A  03B5               	decf	??_printf+1,f
  9427  0F8B  0834               	movf	??_printf,w
  9428  0F8C  02C1               	subwf	printf@width,f
  9429  0F8D  0835               	movf	??_printf+1,w
  9430  0F8E  3BC2               	subwfb	printf@width+1,f
  9431  0F8F  2F93               	goto	l4925
  9432  0F90                     l4923:	
  9433                           
  9434                           ;doprnt.c: 1383: else
  9435                           ;doprnt.c: 1384: width = 0;
  9436  0F90  0020               	movlb	0	; select bank0
  9437  0F91  01C1               	clrf	printf@width
  9438  0F92  01C2               	clrf	printf@width+1
  9439  0F93                     l4925:	
  9440                           
  9441                           ;doprnt.c: 1387: if(flag & 0x04) {
  9442  0F93  1D40               	btfss	printf@flag,2
  9443  0F94  2FAC               	goto	l4937
  9444                           
  9445                           ;doprnt.c: 1392: if(flag & 0x03)
  9446  0F95  0840               	movf	printf@flag,w
  9447  0F96  3903               	andlw	3
  9448  0F97  1903               	btfsc	3,2
  9449  0F98  2F9D               	goto	l4931
  9450                           
  9451                           ;doprnt.c: 1393: (putch('-') );
  9452  0F99  302D               	movlw	45
  9453  0F9A  3191  21F2  318E   	fcall	_putch
  9454  0F9D                     l4931:	
  9455                           
  9456                           ;doprnt.c: 1415: if(width)
  9457  0F9D  0020               	movlb	0	; select bank0
  9458  0F9E                     L13:	
  9459  0F9E  0841               	movf	printf@width,w
  9460  0F9F  0442               	iorwf	printf@width+1,w
  9461  0FA0  1903               	btfsc	3,2
  9462  0FA1  2FC5               	goto	l4947
  9463                           
  9464                           ;doprnt.c: 1417: (putch('0') );
  9465                           
  9466                           ;doprnt.c: 1416: do
  9467  0FA2  3030               	movlw	48
  9468  0FA3  3191  21F2  318E   	fcall	_putch
  9469                           
  9470                           ;doprnt.c: 1418: while(--width);
  9471  0FA6  30FF               	movlw	255
  9472  0FA7  0020               	movlb	0	; select bank0
  9473  0FA8  07C1               	addwf	printf@width,f
  9474  0FA9  30FF               	movlw	255
  9475  0FAA  3DC2               	addwfc	printf@width+1,f
  9476  0FAB  2F9E               	goto	L13
  9477  0FAC                     l4937:	
  9478                           ;doprnt.c: 1420: } else
  9479                           
  9480                           
  9481                           ;doprnt.c: 1422: {
  9482                           ;doprnt.c: 1424: if(width
  9483                           ;doprnt.c: 1428: )
  9484  0FAC  0841               	movf	printf@width,w
  9485  0FAD  0442               	iorwf	printf@width+1,w
  9486  0FAE  1903               	btfsc	3,2
  9487  0FAF  2FBD               	goto	l4943
  9488  0FB0                     l4939:	
  9489                           ;doprnt.c: 1429: do
  9490                           
  9491                           
  9492                           ;doprnt.c: 1430: (putch(' ') );
  9493  0FB0  3020               	movlw	32
  9494  0FB1  3191  21F2  318E   	fcall	_putch
  9495                           
  9496                           ;doprnt.c: 1431: while(--width);
  9497  0FB4  30FF               	movlw	255
  9498  0FB5  0020               	movlb	0	; select bank0
  9499  0FB6  07C1               	addwf	printf@width,f
  9500  0FB7  30FF               	movlw	255
  9501  0FB8  3DC2               	addwfc	printf@width+1,f
  9502  0FB9  0841               	movf	printf@width,w
  9503  0FBA  0442               	iorwf	printf@width+1,w
  9504  0FBB  1D03               	btfss	3,2
  9505  0FBC  2FB0               	goto	l4939
  9506  0FBD                     l4943:	
  9507                           
  9508                           ;doprnt.c: 1438: if(flag & 0x03)
  9509  0FBD  0840               	movf	printf@flag,w
  9510  0FBE  3903               	andlw	3
  9511  0FBF  1903               	btfsc	3,2
  9512  0FC0  2FC5               	goto	l4947
  9513                           
  9514                           ;doprnt.c: 1439: (putch('-') );
  9515  0FC1  302D               	movlw	45
  9516  0FC2  3191  21F2  318E   	fcall	_putch
  9517  0FC5                     l4947:	
  9518                           
  9519                           ;doprnt.c: 1469: }
  9520                           ;doprnt.c: 1472: prec = c;
  9521  0FC5  0020               	movlb	0	; select bank0
  9522  0FC6  0843               	movf	printf@c,w
  9523  0FC7  00B4               	movwf	??_printf
  9524  0FC8  0834               	movf	??_printf,w
  9525  0FC9  00B8               	movwf	printf@prec
  9526  0FCA                     l4953:	
  9527                           ;doprnt.c: 1474: while(prec--) {
  9528                           
  9529  0FCA  30FF               	movlw	255
  9530  0FCB  0020               	movlb	0	; select bank0
  9531  0FCC  00B4               	movwf	??_printf
  9532  0FCD  0834               	movf	??_printf,w
  9533  0FCE  07B8               	addwf	printf@prec,f
  9534  0FCF  0A38               	incf	printf@prec,w
  9535  0FD0  1903               	btfsc	3,2
  9536  0FD1  2E30               	goto	l4955
  9537                           
  9538                           ;doprnt.c: 1478: {
  9539                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  9540  0FD2  300A               	movlw	10
  9541  0FD3  00A8               	movwf	___lwmod@divisor
  9542  0FD4  3000               	movlw	0
  9543  0FD5  00A9               	movwf	___lwmod@divisor+1
  9544  0FD6  0838               	movf	printf@prec,w
  9545  0FD7  00B4               	movwf	??_printf
  9546  0FD8  01B5               	clrf	??_printf+1
  9547  0FD9  35B4               	lslf	??_printf,f
  9548  0FDA  0DB5               	rlf	??_printf+1,f
  9549  0FDB  3000               	movlw	low (_dpowers| (0+32768))
  9550  0FDC  0734               	addwf	??_printf,w
  9551  0FDD  0084               	movwf	4
  9552  0FDE  3090               	movlw	high (_dpowers| (0+32768))
  9553  0FDF  3D35               	addwfc	??_printf+1,w
  9554  0FE0  0085               	movwf	5
  9555  0FE1  3F00               	moviw [0]fsr0
  9556  0FE2  00A0               	movwf	___lwdiv@divisor
  9557  0FE3  3F01               	moviw [1]fsr0
  9558  0FE4  00A1               	movwf	___lwdiv@divisor+1
  9559  0FE5  083D               	movf	printf@val+1,w
  9560  0FE6  00A3               	movwf	___lwdiv@dividend+1
  9561  0FE7  083C               	movf	printf@val,w
  9562  0FE8  00A2               	movwf	___lwdiv@dividend
  9563  0FE9  3195  259C  318E   	fcall	___lwdiv
  9564  0FEC  0020               	movlb	0	; select bank0
  9565  0FED  0821               	movf	?___lwdiv+1,w
  9566  0FEE  00AB               	movwf	___lwmod@dividend+1
  9567  0FEF  0820               	movf	?___lwdiv,w
  9568  0FF0  00AA               	movwf	___lwmod@dividend
  9569  0FF1  3195  2540  318E   	fcall	___lwmod
  9570  0FF4  0020               	movlb	0	; select bank0
  9571  0FF5  0828               	movf	?___lwmod,w
  9572  0FF6  3E30               	addlw	48
  9573  0FF7  00B6               	movwf	??_printf+2
  9574  0FF8  0836               	movf	??_printf+2,w
  9575  0FF9  00C3               	movwf	printf@c
  9576                           
  9577                           ;doprnt.c: 1523: }
  9578                           ;doprnt.c: 1524: (putch(c) );
  9579  0FFA  0843               	movf	printf@c,w
  9580  0FFB  3191  21F2  318E   	fcall	_putch
  9581  0FFE  2FCA               	goto	l4953
  9582  0FFF                     l712:	
  9583                           ;doprnt.c: 1540: return 0;
  9584                           ;	Return value of _printf is never used
  9585                           
  9586                           ;doprnt.c: 1525: }
  9587                           ;doprnt.c: 1533: }
  9588                           ;doprnt.c: 1535: alldone:
  9589                           
  9590  0FFF  0008               	return
  9591  1000                     __end_of_printf:	
  9592                           
  9593                           	psect	text34
  9594  11F2                     __ptext34:	
  9595 ;; *************** function _putch *****************
  9596 ;; Defined at:
  9597 ;;		line 160 in file "mcc_generated_files/eusart.c"
  9598 ;; Parameters:    Size  Location     Type
  9599 ;;  txData          1    wreg     unsigned char 
  9600 ;; Auto vars:     Size  Location     Type
  9601 ;;  txData          1    2[BANK0 ] unsigned char 
  9602 ;; Return value:  Size  Location     Type
  9603 ;;                  1    wreg      void 
  9604 ;; Registers used:
  9605 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9606 ;; Tracked objects:
  9607 ;;		On entry : 0/0
  9608 ;;		On exit  : 0/0
  9609 ;;		Unchanged: 0/0
  9610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9612 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9614 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9615 ;;Total ram usage:        1 bytes
  9616 ;; Hardware stack levels used:    1
  9617 ;; Hardware stack levels required when called:    4
  9618 ;; This function calls:
  9619 ;;		_EUSART_Write
  9620 ;; This function is called by:
  9621 ;;		_printf
  9622 ;; This function uses a non-reentrant model
  9623 ;;
  9624                           
  9625                           
  9626                           ;psect for function _putch
  9627  11F2                     _putch:	
  9628                           
  9629                           ;incstack = 0
  9630                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9631                           ;putch@txData stored from wreg
  9632  11F2  0020               	movlb	0	; select bank0
  9633  11F3  00A2               	movwf	putch@txData
  9634                           
  9635                           ;eusart.c: 162: EUSART_Write(txData);
  9636  11F4  0822               	movf	putch@txData,w
  9637  11F5  3194  241F         	fcall	_EUSART_Write
  9638  11F7  0008               	return
  9639  11F8                     __end_of_putch:	
  9640                           
  9641                           	psect	text35
  9642  141F                     __ptext35:	
  9643 ;; *************** function _EUSART_Write *****************
  9644 ;; Defined at:
  9645 ;;		line 132 in file "mcc_generated_files/eusart.c"
  9646 ;; Parameters:    Size  Location     Type
  9647 ;;  txData          1    wreg     unsigned char 
  9648 ;; Auto vars:     Size  Location     Type
  9649 ;;  txData          1    1[BANK0 ] unsigned char 
  9650 ;; Return value:  Size  Location     Type
  9651 ;;                  1    wreg      void 
  9652 ;; Registers used:
  9653 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9654 ;; Tracked objects:
  9655 ;;		On entry : 0/0
  9656 ;;		On exit  : 0/0
  9657 ;;		Unchanged: 0/0
  9658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9660 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9661 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9662 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9663 ;;Total ram usage:        2 bytes
  9664 ;; Hardware stack levels used:    1
  9665 ;; Hardware stack levels required when called:    3
  9666 ;; This function calls:
  9667 ;;		Nothing
  9668 ;; This function is called by:
  9669 ;;		_putch
  9670 ;; This function uses a non-reentrant model
  9671 ;;
  9672                           
  9673                           
  9674                           ;psect for function _EUSART_Write
  9675  141F                     _EUSART_Write:	
  9676                           
  9677                           ;incstack = 0
  9678                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  9679                           ;EUSART_Write@txData stored from wreg
  9680  141F  0020               	movlb	0	; select bank0
  9681  1420  00A1               	movwf	EUSART_Write@txData
  9682  1421                     l4695:	
  9683                           ;eusart.c: 135: {
  9684                           
  9685                           ;eusart.c: 134: while(0 == eusartTxBufferRemaining)
  9686                           
  9687  1421  0872               	movf	_eusartTxBufferRemaining,w	;volatile
  9688  1422  1903               	btfsc	3,2
  9689  1423  2C21               	goto	l4695
  9690                           
  9691                           ;eusart.c: 136: }
  9692                           ;eusart.c: 138: if(0 == PIE1bits.TXIE)
  9693  1424  0021               	movlb	1	; select bank1
  9694  1425  1A11               	btfsc	17,4	;volatile
  9695  1426  2C2C               	goto	l244
  9696                           
  9697                           ;eusart.c: 139: {
  9698                           ;eusart.c: 140: TXREG = txData;
  9699  1427  0020               	movlb	0	; select bank0
  9700  1428  0821               	movf	EUSART_Write@txData,w
  9701  1429  0023               	movlb	3	; select bank3
  9702  142A  009A               	movwf	26	;volatile
  9703                           
  9704                           ;eusart.c: 141: }
  9705  142B  2C41               	goto	l4709
  9706  142C                     l244:	
  9707                           
  9708                           ;eusart.c: 142: else
  9709                           ;eusart.c: 143: {
  9710                           ;eusart.c: 144: PIE1bits.TXIE = 0;
  9711  142C  1211               	bcf	17,4	;volatile
  9712                           
  9713                           ;eusart.c: 145: eusartTxBuffer[eusartTxHead++] = txData;
  9714  142D  0020               	movlb	0	; select bank0
  9715  142E  0821               	movf	EUSART_Write@txData,w
  9716  142F  00A0               	movwf	??_EUSART_Write
  9717  1430  0874               	movf	_eusartTxHead,w
  9718  1431  3EA0               	addlw	(low (_eusartTxBuffer| (0+512)))& (0+255)
  9719  1432  0086               	movwf	6
  9720  1433  3002               	movlw	2	; select bank5/6
  9721  1434  0087               	movwf	7
  9722  1435  0820               	movf	??_EUSART_Write,w
  9723  1436  0081               	movwf	1
  9724  1437  3001               	movlw	1
  9725  1438  00A0               	movwf	??_EUSART_Write
  9726  1439  0820               	movf	??_EUSART_Write,w
  9727  143A  07F4               	addwf	_eusartTxHead,f	;volatile
  9728                           
  9729                           ;eusart.c: 146: if(sizeof(eusartTxBuffer) <= eusartTxHead)
  9730  143B  3040               	movlw	64
  9731  143C  0274               	subwf	_eusartTxHead,w	;volatile
  9732  143D  1803               	btfsc	3,0
  9733                           
  9734                           ;eusart.c: 147: {
  9735                           ;eusart.c: 148: eusartTxHead = 0;
  9736  143E  01F4               	clrf	_eusartTxHead	;volatile
  9737                           
  9738                           ;eusart.c: 149: }
  9739                           ;eusart.c: 150: eusartTxBufferRemaining--;
  9740  143F  3001               	movlw	1
  9741  1440  02F2               	subwf	_eusartTxBufferRemaining,f	;volatile
  9742  1441                     l4709:	
  9743                           
  9744                           ;eusart.c: 151: }
  9745                           ;eusart.c: 152: PIE1bits.TXIE = 1;
  9746  1441  0021               	movlb	1	; select bank1
  9747  1442  1611               	bsf	17,4	;volatile
  9748  1443  0008               	return
  9749  1444                     __end_of_EUSART_Write:	
  9750                           
  9751                           	psect	text36
  9752  1540                     __ptext36:	
  9753 ;; *************** function ___lwmod *****************
  9754 ;; Defined at:
  9755 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  9756 ;; Parameters:    Size  Location     Type
  9757 ;;  divisor         2    8[BANK0 ] unsigned int 
  9758 ;;  dividend        2   10[BANK0 ] unsigned int 
  9759 ;; Auto vars:     Size  Location     Type
  9760 ;;  counter         1   13[BANK0 ] unsigned char 
  9761 ;; Return value:  Size  Location     Type
  9762 ;;                  2    8[BANK0 ] unsigned int 
  9763 ;; Registers used:
  9764 ;;		wreg, status,2, status,0
  9765 ;; Tracked objects:
  9766 ;;		On entry : 0/0
  9767 ;;		On exit  : 0/0
  9768 ;;		Unchanged: 0/0
  9769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9770 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9771 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9772 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9773 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9774 ;;Total ram usage:        6 bytes
  9775 ;; Hardware stack levels used:    1
  9776 ;; Hardware stack levels required when called:    3
  9777 ;; This function calls:
  9778 ;;		Nothing
  9779 ;; This function is called by:
  9780 ;;		_inv_handler
  9781 ;;		_printf
  9782 ;; This function uses a non-reentrant model
  9783 ;;
  9784                           
  9785                           
  9786                           ;psect for function ___lwmod
  9787  1540                     ___lwmod:	
  9788                           
  9789                           ;incstack = 0
  9790                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  9791  1540  0020               	movlb	0	; select bank0
  9792  1541  0828               	movf	___lwmod@divisor,w
  9793  1542  0429               	iorwf	___lwmod@divisor+1,w
  9794  1543  1903               	btfsc	3,2
  9795  1544  2D68               	goto	l4809
  9796  1545  01AD               	clrf	___lwmod@counter
  9797  1546  0AAD               	incf	___lwmod@counter,f
  9798  1547                     l4799:	
  9799  1547  1BA9               	btfsc	___lwmod@divisor+1,7
  9800  1548  2D53               	goto	l4801
  9801  1549  3001               	movlw	1
  9802  154A                     u5175:	
  9803  154A  35A8               	lslf	___lwmod@divisor,f
  9804  154B  0DA9               	rlf	___lwmod@divisor+1,f
  9805  154C  0B89               	decfsz	9,f
  9806  154D  2D4A               	goto	u5175
  9807  154E  3001               	movlw	1
  9808  154F  00AC               	movwf	??___lwmod
  9809  1550  082C               	movf	??___lwmod,w
  9810  1551  07AD               	addwf	___lwmod@counter,f
  9811  1552  2D47               	goto	l4799
  9812  1553                     l4801:	
  9813  1553  0829               	movf	___lwmod@divisor+1,w
  9814  1554  022B               	subwf	___lwmod@dividend+1,w
  9815  1555  1D03               	skipz
  9816  1556  2D59               	goto	u5195
  9817  1557  0828               	movf	___lwmod@divisor,w
  9818  1558  022A               	subwf	___lwmod@dividend,w
  9819  1559                     u5195:	
  9820  1559  1C03               	skipc
  9821  155A  2D5F               	goto	l4805
  9822  155B  0828               	movf	___lwmod@divisor,w
  9823  155C  02AA               	subwf	___lwmod@dividend,f
  9824  155D  0829               	movf	___lwmod@divisor+1,w
  9825  155E  3BAB               	subwfb	___lwmod@dividend+1,f
  9826  155F                     l4805:	
  9827  155F  3001               	movlw	1
  9828  1560                     u5205:	
  9829  1560  36A9               	lsrf	___lwmod@divisor+1,f
  9830  1561  0CA8               	rrf	___lwmod@divisor,f
  9831  1562  0B89               	decfsz	9,f
  9832  1563  2D60               	goto	u5205
  9833  1564  3001               	movlw	1
  9834  1565  02AD               	subwf	___lwmod@counter,f
  9835  1566  1D03               	btfss	3,2
  9836  1567  2D53               	goto	l4801
  9837  1568                     l4809:	
  9838  1568  082B               	movf	___lwmod@dividend+1,w
  9839  1569  00A9               	movwf	?___lwmod+1
  9840  156A  082A               	movf	___lwmod@dividend,w
  9841  156B  00A8               	movwf	?___lwmod
  9842  156C  0008               	return
  9843  156D                     __end_of___lwmod:	
  9844                           
  9845                           	psect	text37
  9846  159C                     __ptext37:	
  9847 ;; *************** function ___lwdiv *****************
  9848 ;; Defined at:
  9849 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  9850 ;; Parameters:    Size  Location     Type
  9851 ;;  divisor         2    0[BANK0 ] unsigned int 
  9852 ;;  dividend        2    2[BANK0 ] unsigned int 
  9853 ;; Auto vars:     Size  Location     Type
  9854 ;;  quotient        2    6[BANK0 ] unsigned int 
  9855 ;;  counter         1    5[BANK0 ] unsigned char 
  9856 ;; Return value:  Size  Location     Type
  9857 ;;                  2    0[BANK0 ] unsigned int 
  9858 ;; Registers used:
  9859 ;;		wreg, status,2, status,0
  9860 ;; Tracked objects:
  9861 ;;		On entry : 0/0
  9862 ;;		On exit  : 0/0
  9863 ;;		Unchanged: 0/0
  9864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9865 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9866 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9867 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9868 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9869 ;;Total ram usage:        8 bytes
  9870 ;; Hardware stack levels used:    1
  9871 ;; Hardware stack levels required when called:    3
  9872 ;; This function calls:
  9873 ;;		Nothing
  9874 ;; This function is called by:
  9875 ;;		_printf
  9876 ;; This function uses a non-reentrant model
  9877 ;;
  9878                           
  9879                           
  9880                           ;psect for function ___lwdiv
  9881  159C                     ___lwdiv:	
  9882                           
  9883                           ;incstack = 0
  9884                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  9885  159C  0020               	movlb	0	; select bank0
  9886  159D  01A6               	clrf	___lwdiv@quotient
  9887  159E  01A7               	clrf	___lwdiv@quotient+1
  9888  159F  0820               	movf	___lwdiv@divisor,w
  9889  15A0  0421               	iorwf	___lwdiv@divisor+1,w
  9890  15A1  1903               	btfsc	3,2
  9891  15A2  2DCC               	goto	l4787
  9892  15A3  01A5               	clrf	___lwdiv@counter
  9893  15A4  0AA5               	incf	___lwdiv@counter,f
  9894  15A5                     l4775:	
  9895  15A5  1BA1               	btfsc	___lwdiv@divisor+1,7
  9896  15A6  2DB1               	goto	l4777
  9897  15A7  3001               	movlw	1
  9898  15A8                     u5105:	
  9899  15A8  35A0               	lslf	___lwdiv@divisor,f
  9900  15A9  0DA1               	rlf	___lwdiv@divisor+1,f
  9901  15AA  0B89               	decfsz	9,f
  9902  15AB  2DA8               	goto	u5105
  9903  15AC  3001               	movlw	1
  9904  15AD  00A4               	movwf	??___lwdiv
  9905  15AE  0824               	movf	??___lwdiv,w
  9906  15AF  07A5               	addwf	___lwdiv@counter,f
  9907  15B0  2DA5               	goto	l4775
  9908  15B1                     l4777:	
  9909  15B1  3001               	movlw	1
  9910  15B2                     u5125:	
  9911  15B2  35A6               	lslf	___lwdiv@quotient,f
  9912  15B3  0DA7               	rlf	___lwdiv@quotient+1,f
  9913  15B4  0B89               	decfsz	9,f
  9914  15B5  2DB2               	goto	u5125
  9915  15B6  0821               	movf	___lwdiv@divisor+1,w
  9916  15B7  0223               	subwf	___lwdiv@dividend+1,w
  9917  15B8  1D03               	skipz
  9918  15B9  2DBC               	goto	u5135
  9919  15BA  0820               	movf	___lwdiv@divisor,w
  9920  15BB  0222               	subwf	___lwdiv@dividend,w
  9921  15BC                     u5135:	
  9922  15BC  1C03               	skipc
  9923  15BD  2DC3               	goto	l4783
  9924  15BE  0820               	movf	___lwdiv@divisor,w
  9925  15BF  02A2               	subwf	___lwdiv@dividend,f
  9926  15C0  0821               	movf	___lwdiv@divisor+1,w
  9927  15C1  3BA3               	subwfb	___lwdiv@dividend+1,f
  9928  15C2  1426               	bsf	___lwdiv@quotient,0
  9929  15C3                     l4783:	
  9930  15C3  3001               	movlw	1
  9931  15C4                     u5145:	
  9932  15C4  36A1               	lsrf	___lwdiv@divisor+1,f
  9933  15C5  0CA0               	rrf	___lwdiv@divisor,f
  9934  15C6  0B89               	decfsz	9,f
  9935  15C7  2DC4               	goto	u5145
  9936  15C8  3001               	movlw	1
  9937  15C9  02A5               	subwf	___lwdiv@counter,f
  9938  15CA  1D03               	btfss	3,2
  9939  15CB  2DB1               	goto	l4777
  9940  15CC                     l4787:	
  9941  15CC  0827               	movf	___lwdiv@quotient+1,w
  9942  15CD  00A1               	movwf	?___lwdiv+1
  9943  15CE  0826               	movf	___lwdiv@quotient,w
  9944  15CF  00A0               	movwf	?___lwdiv
  9945  15D0  0008               	return
  9946  15D1                     __end_of___lwdiv:	
  9947                           
  9948                           	psect	text38
  9949  128F                     __ptext38:	
  9950 ;; *************** function _concat *****************
  9951 ;; Defined at:
  9952 ;;		line 191 in file "protocol.c"
  9953 ;; Parameters:    Size  Location     Type
  9954 ;;  msb             1    wreg     unsigned char 
  9955 ;;  lsb             1    0[BANK0 ] unsigned char 
  9956 ;; Auto vars:     Size  Location     Type
  9957 ;;  msb             1    7[BANK0 ] unsigned char 
  9958 ;; Return value:  Size  Location     Type
  9959 ;;                  2    0[BANK0 ] unsigned int 
  9960 ;; Registers used:
  9961 ;;		wreg, status,2, status,0
  9962 ;; Tracked objects:
  9963 ;;		On entry : 0/0
  9964 ;;		On exit  : 0/0
  9965 ;;		Unchanged: 0/0
  9966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9967 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9968 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9969 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9970 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9971 ;;Total ram usage:        8 bytes
  9972 ;; Hardware stack levels used:    1
  9973 ;; Hardware stack levels required when called:    3
  9974 ;; This function calls:
  9975 ;;		Nothing
  9976 ;; This function is called by:
  9977 ;;		_PROTOCOL_Print_TLV
  9978 ;; This function uses a non-reentrant model
  9979 ;;
  9980                           
  9981                           
  9982                           ;psect for function _concat
  9983  128F                     _concat:	
  9984                           
  9985                           ;incstack = 0
  9986                           ; Regs used in _concat: [wreg+status,2+status,0]
  9987                           ;concat@msb stored from wreg
  9988  128F  0020               	movlb	0	; select bank0
  9989  1290  00A7               	movwf	concat@msb
  9990                           
  9991                           ;protocol.c: 192: return (uint16_t)msb * 256 + (uint16_t)lsb;
  9992  1291  0820               	movf	concat@lsb,w
  9993  1292  00A2               	movwf	??_concat
  9994  1293  01A3               	clrf	??_concat+1
  9995  1294  0827               	movf	concat@msb,w
  9996  1295  00A4               	movwf	??_concat+2
  9997  1296  01A5               	clrf	??_concat+3
  9998  1297  0824               	movf	??_concat+2,w
  9999  1298  00A5               	movwf	??_concat+3
 10000  1299  01A4               	clrf	??_concat+2
 10001  129A  0822               	movf	??_concat,w
 10002  129B  0724               	addwf	??_concat+2,w
 10003  129C  00A0               	movwf	?_concat
 10004  129D  0823               	movf	??_concat+1,w
 10005  129E  3D25               	addwfc	??_concat+3,w
 10006  129F  00A1               	movwf	?_concat+1
 10007  12A0  0008               	return
 10008  12A1                     __end_of_concat:	
 10009                           
 10010                           	psect	text39
 10011  125F                     __ptext39:	
 10012 ;; *************** function _abs *****************
 10013 ;; Defined at:
 10014 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\abs.c"
 10015 ;; Parameters:    Size  Location     Type
 10016 ;;  a               2    7[BANK0 ] int 
 10017 ;; Auto vars:     Size  Location     Type
 10018 ;;		None
 10019 ;; Return value:  Size  Location     Type
 10020 ;;                  2    7[BANK0 ] int 
 10021 ;; Registers used:
 10022 ;;		wreg, status,2, status,0
 10023 ;; Tracked objects:
 10024 ;;		On entry : 0/0
 10025 ;;		On exit  : 0/0
 10026 ;;		Unchanged: 0/0
 10027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10028 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10029 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10030 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10031 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10032 ;;Total ram usage:        4 bytes
 10033 ;; Hardware stack levels used:    1
 10034 ;; Hardware stack levels required when called:    3
 10035 ;; This function calls:
 10036 ;;		Nothing
 10037 ;; This function is called by:
 10038 ;;		_PROTOCOL_Print_TLV
 10039 ;; This function uses a non-reentrant model
 10040 ;;
 10041                           
 10042                           
 10043                           ;psect for function _abs
 10044  125F                     _abs:	
 10045                           
 10046                           ;incstack = 0
 10047                           ; Regs used in _abs: [wreg+status,2+status,0]
 10048  125F  0020               	movlb	0	; select bank0
 10049  1260  1FA8               	btfss	abs@a+1,7
 10050  1261  0008               	return
 10051  1262  0927               	comf	abs@a,w
 10052  1263  00A9               	movwf	??_abs
 10053  1264  0928               	comf	abs@a+1,w
 10054  1265  00AA               	movwf	??_abs+1
 10055  1266  0AA9               	incf	??_abs,f
 10056  1267  1903               	skipnz
 10057  1268  0AAA               	incf	??_abs+1,f
 10058  1269  0829               	movf	??_abs,w
 10059  126A  00A7               	movwf	?_abs
 10060  126B  082A               	movf	??_abs+1,w
 10061  126C  00A8               	movwf	?_abs+1
 10062  126D  0008               	return
 10063  126E                     __end_of_abs:	
 10064                           
 10065                           	psect	text40
 10066  168C                     __ptext40:	
 10067 ;; *************** function ___awmod *****************
 10068 ;; Defined at:
 10069 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awmod.c"
 10070 ;; Parameters:    Size  Location     Type
 10071 ;;  divisor         2    0[BANK0 ] int 
 10072 ;;  dividend        2    2[BANK0 ] int 
 10073 ;; Auto vars:     Size  Location     Type
 10074 ;;  sign            1    6[BANK0 ] unsigned char 
 10075 ;;  counter         1    5[BANK0 ] unsigned char 
 10076 ;; Return value:  Size  Location     Type
 10077 ;;                  2    0[BANK0 ] int 
 10078 ;; Registers used:
 10079 ;;		wreg, status,2, status,0
 10080 ;; Tracked objects:
 10081 ;;		On entry : 0/0
 10082 ;;		On exit  : 0/0
 10083 ;;		Unchanged: 0/0
 10084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10085 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10086 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10087 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10088 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10089 ;;Total ram usage:        7 bytes
 10090 ;; Hardware stack levels used:    1
 10091 ;; Hardware stack levels required when called:    3
 10092 ;; This function calls:
 10093 ;;		Nothing
 10094 ;; This function is called by:
 10095 ;;		_PROTOCOL_Print_TLV
 10096 ;; This function uses a non-reentrant model
 10097 ;;
 10098                           
 10099                           
 10100                           ;psect for function ___awmod
 10101  168C                     ___awmod:	
 10102                           
 10103                           ;incstack = 0
 10104                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 10105  168C  0020               	movlb	0	; select bank0
 10106  168D  01A6               	clrf	___awmod@sign
 10107  168E  1FA3               	btfss	___awmod@dividend+1,7
 10108  168F  2E97               	goto	l5019
 10109  1690  09A2               	comf	___awmod@dividend,f
 10110  1691  09A3               	comf	___awmod@dividend+1,f
 10111  1692  0AA2               	incf	___awmod@dividend,f
 10112  1693  1903               	skipnz
 10113  1694  0AA3               	incf	___awmod@dividend+1,f
 10114  1695  01A6               	clrf	___awmod@sign
 10115  1696  0AA6               	incf	___awmod@sign,f
 10116  1697                     l5019:	
 10117  1697  1FA1               	btfss	___awmod@divisor+1,7
 10118  1698  2E9E               	goto	l5023
 10119  1699  09A0               	comf	___awmod@divisor,f
 10120  169A  09A1               	comf	___awmod@divisor+1,f
 10121  169B  0AA0               	incf	___awmod@divisor,f
 10122  169C  1903               	skipnz
 10123  169D  0AA1               	incf	___awmod@divisor+1,f
 10124  169E                     l5023:	
 10125  169E  0820               	movf	___awmod@divisor,w
 10126  169F  0421               	iorwf	___awmod@divisor+1,w
 10127  16A0  1903               	btfsc	3,2
 10128  16A1  2EC5               	goto	l5041
 10129  16A2  01A5               	clrf	___awmod@counter
 10130  16A3  0AA5               	incf	___awmod@counter,f
 10131  16A4                     l5031:	
 10132  16A4  1BA1               	btfsc	___awmod@divisor+1,7
 10133  16A5  2EB0               	goto	l5033
 10134  16A6  3001               	movlw	1
 10135  16A7                     u5635:	
 10136  16A7  35A0               	lslf	___awmod@divisor,f
 10137  16A8  0DA1               	rlf	___awmod@divisor+1,f
 10138  16A9  0B89               	decfsz	9,f
 10139  16AA  2EA7               	goto	u5635
 10140  16AB  3001               	movlw	1
 10141  16AC  00A4               	movwf	??___awmod
 10142  16AD  0824               	movf	??___awmod,w
 10143  16AE  07A5               	addwf	___awmod@counter,f
 10144  16AF  2EA4               	goto	l5031
 10145  16B0                     l5033:	
 10146  16B0  0821               	movf	___awmod@divisor+1,w
 10147  16B1  0223               	subwf	___awmod@dividend+1,w
 10148  16B2  1D03               	skipz
 10149  16B3  2EB6               	goto	u5655
 10150  16B4  0820               	movf	___awmod@divisor,w
 10151  16B5  0222               	subwf	___awmod@dividend,w
 10152  16B6                     u5655:	
 10153  16B6  1C03               	skipc
 10154  16B7  2EBC               	goto	l5037
 10155  16B8  0820               	movf	___awmod@divisor,w
 10156  16B9  02A2               	subwf	___awmod@dividend,f
 10157  16BA  0821               	movf	___awmod@divisor+1,w
 10158  16BB  3BA3               	subwfb	___awmod@dividend+1,f
 10159  16BC                     l5037:	
 10160  16BC  3001               	movlw	1
 10161  16BD                     u5665:	
 10162  16BD  36A1               	lsrf	___awmod@divisor+1,f
 10163  16BE  0CA0               	rrf	___awmod@divisor,f
 10164  16BF  0B89               	decfsz	9,f
 10165  16C0  2EBD               	goto	u5665
 10166  16C1  3001               	movlw	1
 10167  16C2  02A5               	subwf	___awmod@counter,f
 10168  16C3  1D03               	btfss	3,2
 10169  16C4  2EB0               	goto	l5033
 10170  16C5                     l5041:	
 10171  16C5  0826               	movf	___awmod@sign,w
 10172  16C6  1903               	btfsc	3,2
 10173  16C7  2ECD               	goto	l5045
 10174  16C8  09A2               	comf	___awmod@dividend,f
 10175  16C9  09A3               	comf	___awmod@dividend+1,f
 10176  16CA  0AA2               	incf	___awmod@dividend,f
 10177  16CB  1903               	skipnz
 10178  16CC  0AA3               	incf	___awmod@dividend+1,f
 10179  16CD                     l5045:	
 10180  16CD  0823               	movf	___awmod@dividend+1,w
 10181  16CE  00A1               	movwf	?___awmod+1
 10182  16CF  0822               	movf	___awmod@dividend,w
 10183  16D0  00A0               	movwf	?___awmod
 10184  16D1  0008               	return
 10185  16D2                     __end_of___awmod:	
 10186                           
 10187                           	psect	text41
 10188  156D                     __ptext41:	
 10189 ;; *************** function _detected *****************
 10190 ;; Defined at:
 10191 ;;		line 215 in file "main.c"
 10192 ;; Parameters:    Size  Location     Type
 10193 ;;  dev_addr        1    wreg     unsigned char 
 10194 ;; Auto vars:     Size  Location     Type
 10195 ;;  dev_addr        1   15[BANK0 ] unsigned char 
 10196 ;;  exist           1   14[BANK0 ] unsigned char 
 10197 ;;  x               1   13[BANK0 ] unsigned char 
 10198 ;;  y               1   12[BANK0 ] unsigned char 
 10199 ;; Return value:  Size  Location     Type
 10200 ;;                  1    wreg      unsigned char 
 10201 ;; Registers used:
 10202 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10203 ;; Tracked objects:
 10204 ;;		On entry : 0/0
 10205 ;;		On exit  : 0/0
 10206 ;;		Unchanged: 0/0
 10207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10209 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10210 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10211 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10212 ;;Total ram usage:        7 bytes
 10213 ;; Hardware stack levels used:    1
 10214 ;; Hardware stack levels required when called:    4
 10215 ;; This function calls:
 10216 ;;		___awdiv
 10217 ;; This function is called by:
 10218 ;;		_one_shot_sen
 10219 ;;		_fetch
 10220 ;; This function uses a non-reentrant model
 10221 ;;
 10222                           
 10223                           
 10224                           ;psect for function _detected
 10225  156D                     _detected:	
 10226                           
 10227                           ;incstack = 0
 10228                           ; Regs used in _detected: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10229                           ;detected@dev_addr stored from wreg
 10230  156D  0020               	movlb	0	; select bank0
 10231  156E  00AF               	movwf	detected@dev_addr
 10232                           
 10233                           ;main.c: 216: uint8_t y = dev_addr / 8;
 10234  156F  3008               	movlw	8
 10235  1570  00A0               	movwf	___awdiv@divisor
 10236  1571  3000               	movlw	0
 10237  1572  00A1               	movwf	___awdiv@divisor+1
 10238  1573  082F               	movf	detected@dev_addr,w
 10239  1574  00A9               	movwf	??_detected
 10240  1575  01AA               	clrf	??_detected+1
 10241  1576  0829               	movf	??_detected,w
 10242  1577  00A2               	movwf	___awdiv@dividend
 10243  1578  082A               	movf	??_detected+1,w
 10244  1579  00A3               	movwf	___awdiv@dividend+1
 10245  157A  3188  2058  3195   	fcall	___awdiv
 10246  157D  0020               	movlb	0	; select bank0
 10247  157E  0820               	movf	?___awdiv,w
 10248  157F  00AB               	movwf	??_detected+2
 10249  1580  082B               	movf	??_detected+2,w
 10250  1581  00AC               	movwf	detected@y
 10251                           
 10252                           ;main.c: 217: uint8_t x = dev_addr % 8;
 10253  1582  082F               	movf	detected@dev_addr,w
 10254  1583  3907               	andlw	7
 10255  1584  00A9               	movwf	??_detected
 10256  1585  0829               	movf	??_detected,w
 10257  1586  00AD               	movwf	detected@x
 10258                           
 10259                           ;main.c: 218: bool exist = 0;
 10260  1587  01AE               	clrf	detected@exist
 10261                           
 10262                           ;main.c: 219: if ((dev_map[y] & (0x01 << x)) > 0) {
 10263  1588  082C               	movf	detected@y,w
 10264  1589  3E20               	addlw	(low (_dev_map| (0+256)))& (0+255)
 10265  158A  0086               	movwf	6
 10266  158B  3001               	movlw	1	; select bank2/3
 10267  158C  0087               	movwf	7
 10268  158D  3001               	movlw	1
 10269  158E  00A9               	movwf	??_detected
 10270  158F  0A2D               	incf	detected@x,w
 10271  1590  2D92               	goto	u6034
 10272  1591                     u6035:	
 10273  1591  35A9               	lslf	??_detected,f
 10274  1592                     u6034:	
 10275  1592  0B89               	decfsz	9,f
 10276  1593  2D91               	goto	u6035
 10277  1594  0829               	movf	??_detected,w
 10278  1595  0501               	andwf	1,w
 10279  1596  1903               	btfsc	3,2
 10280  1597  2D9A               	goto	l5279
 10281                           
 10282                           ;main.c: 220: exist = 1;
 10283  1598  01AE               	clrf	detected@exist
 10284  1599  0AAE               	incf	detected@exist,f
 10285  159A                     l5279:	
 10286                           
 10287                           ;main.c: 221: }
 10288                           ;main.c: 222: return exist;
 10289  159A  082E               	movf	detected@exist,w
 10290  159B  0008               	return
 10291  159C                     __end_of_detected:	
 10292                           
 10293                           	psect	text42
 10294  12C6                     __ptext42:	
 10295 ;; *************** function _check_plg *****************
 10296 ;; Defined at:
 10297 ;;		line 207 in file "main.c"
 10298 ;; Parameters:    Size  Location     Type
 10299 ;;		None
 10300 ;; Auto vars:     Size  Location     Type
 10301 ;;  status          1   34[BANK0 ] unsigned char 
 10302 ;; Return value:  Size  Location     Type
 10303 ;;                  1    wreg      void 
 10304 ;; Registers used:
 10305 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10306 ;; Tracked objects:
 10307 ;;		On entry : 0/0
 10308 ;;		On exit  : 0/0
 10309 ;;		Unchanged: 0/0
 10310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10312 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10313 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10314 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10315 ;;Total ram usage:        3 bytes
 10316 ;; Hardware stack levels used:    1
 10317 ;; Hardware stack levels required when called:    7
 10318 ;; This function calls:
 10319 ;;		_i2c1_write_no_data
 10320 ;;		_scan_dev
 10321 ;; This function is called by:
 10322 ;;		_inv_handler
 10323 ;;		_command_handler
 10324 ;; This function uses a non-reentrant model
 10325 ;;
 10326                           
 10327                           
 10328                           ;psect for function _check_plg
 10329  12C6                     _check_plg:	
 10330                           
 10331                           ;main.c: 208: uint8_t status = i2c1_write_no_data(0x00, 0x02);
 10332                           
 10333                           ;incstack = 0
 10334                           ; Regs used in _check_plg: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10335  12C6  3000               	movlw	0
 10336  12C7  0020               	movlb	0	; select bank0
 10337  12C8  00AE               	movwf	i2c1_write_no_data@dev_addr
 10338  12C9  00AF               	movwf	i2c1_write_no_data@dev_addr+1
 10339  12CA  3002               	movlw	2
 10340  12CB  00C0               	movwf	??_check_plg
 10341  12CC  0840               	movf	??_check_plg,w
 10342  12CD  00B0               	movwf	i2c1_write_no_data@reg_addr
 10343  12CE  3194  24BE  3192   	fcall	_i2c1_write_no_data
 10344  12D1  0020               	movlb	0	; select bank0
 10345  12D2  00C1               	movwf	??_check_plg+1
 10346  12D3  0841               	movf	??_check_plg+1,w
 10347  12D4  00C2               	movwf	check_plg@status
 10348                           
 10349                           ;main.c: 209: if (status == 0) scan_dev();
 10350  12D5  0842               	movf	check_plg@status,w
 10351  12D6  1D03               	btfss	3,2
 10352  12D7  0008               	return
 10353  12D8  3195  25D1         	fcall	_scan_dev
 10354  12DA  0008               	return
 10355  12DB                     __end_of_check_plg:	
 10356                           
 10357                           	psect	text43
 10358  15D1                     __ptext43:	
 10359 ;; *************** function _scan_dev *****************
 10360 ;; Defined at:
 10361 ;;		line 191 in file "main.c"
 10362 ;; Parameters:    Size  Location     Type
 10363 ;;		None
 10364 ;; Auto vars:     Size  Location     Type
 10365 ;;  dev_addr        1   31[BANK0 ] unsigned char 
 10366 ;;  status          1   30[BANK0 ] unsigned char 
 10367 ;; Return value:  Size  Location     Type
 10368 ;;                  1    wreg      void 
 10369 ;; Registers used:
 10370 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10371 ;; Tracked objects:
 10372 ;;		On entry : 0/0
 10373 ;;		On exit  : 0/0
 10374 ;;		Unchanged: 0/0
 10375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10376 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10377 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10378 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10379 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10380 ;;Total ram usage:        5 bytes
 10381 ;; Hardware stack levels used:    1
 10382 ;; Hardware stack levels required when called:    6
 10383 ;; This function calls:
 10384 ;;		_add_dev
 10385 ;;		_del_dev
 10386 ;;		_i2c1_read
 10387 ;; This function is called by:
 10388 ;;		_check_plg
 10389 ;;		_inv_handler
 10390 ;; This function uses a non-reentrant model
 10391 ;;
 10392                           
 10393                           
 10394                           ;psect for function _scan_dev
 10395  15D1                     _scan_dev:	
 10396                           
 10397                           ;main.c: 192: uint8_t dev_addr, status;
 10398                           ;main.c: 193: for (dev_addr=0x10; dev_addr<=0x20; dev_addr++) {
 10399                           
 10400                           ;incstack = 0
 10401                           ; Regs used in _scan_dev: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10402  15D1  3010               	movlw	16
 10403  15D2  0020               	movlb	0	; select bank0
 10404  15D3  00BB               	movwf	??_scan_dev
 10405  15D4  083B               	movf	??_scan_dev,w
 10406  15D5  00BF               	movwf	scan_dev@dev_addr
 10407  15D6                     L14:	
 10408  15D6  3021               	movlw	33
 10409  15D7  023F               	subwf	scan_dev@dev_addr,w
 10410  15D8  1803               	btfsc	3,0
 10411  15D9  0008               	return
 10412                           
 10413                           ;main.c: 194: status = i2c1_read(dev_addr, 0x01, &read_buf[0], 1);
 10414  15DA  083F               	movf	scan_dev@dev_addr,w
 10415  15DB  00BB               	movwf	??_scan_dev
 10416  15DC  01BC               	clrf	??_scan_dev+1
 10417  15DD  083B               	movf	??_scan_dev,w
 10418  15DE  00B0               	movwf	i2c1_read@dev_addr
 10419  15DF  083C               	movf	??_scan_dev+1,w
 10420  15E0  00B1               	movwf	i2c1_read@dev_addr+1
 10421  15E1  01B2               	clrf	i2c1_read@reg_addr
 10422  15E2  0AB2               	incf	i2c1_read@reg_addr,f
 10423  15E3  30BC               	movlw	low _read_buf
 10424  15E4  00B3               	movwf	i2c1_read@pbuf
 10425  15E5  3001               	movlw	high _read_buf
 10426  15E6  00B4               	movwf	i2c1_read@pbuf+1
 10427  15E7  01B5               	clrf	i2c1_read@len
 10428  15E8  0AB5               	incf	i2c1_read@len,f
 10429  15E9  3188  20FD  3195   	fcall	_i2c1_read
 10430  15EC  0020               	movlb	0	; select bank0
 10431  15ED  00BD               	movwf	??_scan_dev+2
 10432  15EE  083D               	movf	??_scan_dev+2,w
 10433  15EF  00BE               	movwf	scan_dev@status
 10434                           
 10435                           ;main.c: 196: if (status == 0 && dev_addr == read_buf[0]) {
 10436  15F0  083E               	movf	scan_dev@status,w
 10437  15F1  1D03               	btfss	3,2
 10438  15F2  2DFE               	goto	l5263
 10439  15F3  0023               	movlb	3	; select bank3
 10440  15F4  083C               	movf	_read_buf^(0+384),w
 10441  15F5  0020               	movlb	0	; select bank0
 10442  15F6  063F               	xorwf	scan_dev@dev_addr,w
 10443  15F7  1D03               	skipz
 10444  15F8  2DFE               	goto	l5263
 10445                           
 10446                           ;main.c: 197: add_dev(dev_addr);
 10447  15F9  083F               	movf	scan_dev@dev_addr,w
 10448  15FA  3197  27B2  3195   	fcall	_add_dev
 10449                           
 10450                           ;main.c: 198: } else {
 10451  15FD  2E03               	goto	l5265
 10452  15FE                     l5263:	
 10453                           
 10454                           ;main.c: 199: del_dev(dev_addr);
 10455  15FE  0020               	movlb	0	; select bank0
 10456  15FF  083F               	movf	scan_dev@dev_addr,w
 10457  1600  3197  2765  3195   	fcall	_del_dev
 10458  1603                     l5265:	
 10459  1603  3001               	movlw	1
 10460  1604  0020               	movlb	0	; select bank0
 10461  1605  00BB               	movwf	??_scan_dev
 10462  1606  083B               	movf	??_scan_dev,w
 10463  1607  07BF               	addwf	scan_dev@dev_addr,f
 10464  1608  2DD6               	goto	L14
 10465  1609                     __end_of_scan_dev:	
 10466                           
 10467                           	psect	text44
 10468  08FD                     __ptext44:	
 10469 ;; *************** function _i2c1_read *****************
 10470 ;; Defined at:
 10471 ;;		line 24 in file "i2c1_util.c"
 10472 ;; Parameters:    Size  Location     Type
 10473 ;;  dev_addr        2   16[BANK0 ] unsigned int 
 10474 ;;  reg_addr        1   18[BANK0 ] unsigned char 
 10475 ;;  pbuf            2   19[BANK0 ] PTR unsigned char 
 10476 ;;		 -> sen@length(1), sen@type(1), read_buf(16), exec_remote_cmd@data(1), 
 10477 ;;  len             1   21[BANK0 ] unsigned char 
 10478 ;; Auto vars:     Size  Location     Type
 10479 ;;  status          1   26[BANK0 ] enum E3078
 10480 ;;  reg             1   25[BANK0 ] unsigned char [1]
 10481 ;;  read_status     1   24[BANK0 ] unsigned char 
 10482 ;; Return value:  Size  Location     Type
 10483 ;;                  1    wreg      unsigned char 
 10484 ;; Registers used:
 10485 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10486 ;; Tracked objects:
 10487 ;;		On entry : 0/0
 10488 ;;		On exit  : 0/0
 10489 ;;		Unchanged: 0/0
 10490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10491 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10492 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10493 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10494 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10495 ;;Total ram usage:       11 bytes
 10496 ;; Hardware stack levels used:    1
 10497 ;; Hardware stack levels required when called:    5
 10498 ;; This function calls:
 10499 ;;		_I2C1_MasterRead
 10500 ;;		_I2C1_MasterWrite
 10501 ;; This function is called by:
 10502 ;;		_exec_remote_cmd
 10503 ;;		_scan_dev
 10504 ;;		_sen
 10505 ;; This function uses a non-reentrant model
 10506 ;;
 10507                           
 10508                           
 10509                           ;psect for function _i2c1_read
 10510  08FD                     _i2c1_read:	
 10511                           
 10512                           ;i2c1_util.c: 26: uint8_t reg[1];
 10513                           ;i2c1_util.c: 27: I2C1_MESSAGE_STATUS status;
 10514                           ;i2c1_util.c: 28: uint8_t read_status;
 10515                           ;i2c1_util.c: 29: reg[0] = reg_addr;
 10516                           
 10517                           ;incstack = 0
 10518                           ; Regs used in _i2c1_read: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10519  08FD  0020               	movlb	0	; select bank0
 10520  08FE  0832               	movf	i2c1_read@reg_addr,w
 10521  08FF  00B6               	movwf	??_i2c1_read
 10522  0900  0836               	movf	??_i2c1_read,w
 10523  0901  00B9               	movwf	i2c1_read@reg
 10524                           
 10525                           ;i2c1_util.c: 30: _delay((unsigned long)((100)*(32000000/4000000.0)));
 10526  0902  30A0               	movlw	160
 10527  0903                     u7467:	
 10528  0903  3200               	nop2
 10529  0904  0B89               	decfsz	9,f
 10530  0905  2903               	goto	u7467
 10531                           
 10532                           ;i2c1_util.c: 31: I2C1_MasterWrite(reg, 1, dev_addr, &status);
 10533  0906  0020               	movlb	0	; select bank0
 10534  0907  01A7               	clrf	I2C1_MasterWrite@length
 10535  0908  0AA7               	incf	I2C1_MasterWrite@length,f
 10536  0909  0831               	movf	i2c1_read@dev_addr+1,w
 10537  090A  00A9               	movwf	I2C1_MasterWrite@address+1
 10538  090B  0830               	movf	i2c1_read@dev_addr,w
 10539  090C  00A8               	movwf	I2C1_MasterWrite@address
 10540  090D  303A               	movlw	(low (i2c1_read@status| 0))& (0+255)
 10541  090E  00B6               	movwf	??_i2c1_read
 10542  090F  0836               	movf	??_i2c1_read,w
 10543  0910  00AA               	movwf	I2C1_MasterWrite@pflag
 10544  0911  3039               	movlw	(low (i2c1_read@reg| 0))& (0+255)
 10545  0912  3194  2494  3188   	fcall	_I2C1_MasterWrite
 10546  0915                     l5055:	
 10547                           ;i2c1_util.c: 32: while (status == I2C1_MESSAGE_PENDING) {_delay((unsigned long)((100)*(
      +                          32000000/4000000.0)));};
 10548                           
 10549  0915  3002               	movlw	2
 10550  0916  0020               	movlb	0	; select bank0
 10551  0917  063A               	xorwf	i2c1_read@status,w
 10552  0918  1D03               	btfss	3,2
 10553  0919  291F               	goto	l5057
 10554  091A  30A0               	movlw	160
 10555  091B                     u7477:	
 10556  091B  3200               	nop2
 10557  091C  0B89               	decfsz	9,f
 10558  091D  291B               	goto	u7477
 10559  091E  2915               	goto	l5055
 10560  091F                     l5057:	
 10561                           
 10562                           ;i2c1_util.c: 33: if (status == I2C1_MESSAGE_COMPLETE) {
 10563  091F  083A               	movf	i2c1_read@status,w
 10564  0920  1D03               	btfss	3,2
 10565  0921  294E               	goto	l627
 10566                           
 10567                           ;i2c1_util.c: 34: _delay((unsigned long)((100)*(32000000/4000000.0)));
 10568  0922  30A0               	movlw	160
 10569  0923                     u7487:	
 10570  0923  3200               	nop2
 10571  0924  0B89               	decfsz	9,f
 10572  0925  2923               	goto	u7487
 10573                           
 10574                           ;i2c1_util.c: 35: I2C1_MasterRead(pbuf, len, dev_addr, &status);
 10575  0926  0020               	movlb	0	; select bank0
 10576  0927  0834               	movf	i2c1_read@pbuf+1,w
 10577  0928  00A9               	movwf	I2C1_MasterRead@pdata+1
 10578  0929  0833               	movf	i2c1_read@pbuf,w
 10579  092A  00A8               	movwf	I2C1_MasterRead@pdata
 10580  092B  0835               	movf	i2c1_read@len,w
 10581  092C  00B6               	movwf	??_i2c1_read
 10582  092D  0836               	movf	??_i2c1_read,w
 10583  092E  00AA               	movwf	I2C1_MasterRead@length
 10584  092F  0831               	movf	i2c1_read@dev_addr+1,w
 10585  0930  00AC               	movwf	I2C1_MasterRead@address+1
 10586  0931  0830               	movf	i2c1_read@dev_addr,w
 10587  0932  00AB               	movwf	I2C1_MasterRead@address
 10588  0933  303A               	movlw	(low (i2c1_read@status| 0))& (0+255)
 10589  0934  00B7               	movwf	??_i2c1_read+1
 10590  0935  0837               	movf	??_i2c1_read+1,w
 10591  0936  00AD               	movwf	I2C1_MasterRead@pflag
 10592  0937  3194  2444  3188   	fcall	_I2C1_MasterRead
 10593  093A                     l5065:	
 10594                           ;i2c1_util.c: 36: while (status == I2C1_MESSAGE_PENDING) {_delay((unsigned long)((100)*(
      +                          32000000/4000000.0)));};
 10595                           
 10596  093A  3002               	movlw	2
 10597  093B  0020               	movlb	0	; select bank0
 10598  093C  063A               	xorwf	i2c1_read@status,w
 10599  093D  1D03               	btfss	3,2
 10600  093E  2944               	goto	l5067
 10601  093F  30A0               	movlw	160
 10602  0940                     u7497:	
 10603  0940  3200               	nop2
 10604  0941  0B89               	decfsz	9,f
 10605  0942  2940               	goto	u7497
 10606  0943  293A               	goto	l5065
 10607  0944                     l5067:	
 10608                           
 10609                           ;i2c1_util.c: 37: if (status == I2C1_MESSAGE_COMPLETE) {
 10610  0944  083A               	movf	i2c1_read@status,w
 10611  0945  1D03               	btfss	3,2
 10612  0946  2949               	goto	l5071
 10613                           
 10614                           ;i2c1_util.c: 38: read_status = 0;
 10615  0947  01B8               	clrf	i2c1_read@read_status
 10616                           
 10617                           ;i2c1_util.c: 39: } else {
 10618  0948  2950               	goto	l5073
 10619  0949                     l5071:	
 10620                           
 10621                           ;i2c1_util.c: 40: read_status = 2;
 10622  0949  3002               	movlw	2
 10623  094A  00B6               	movwf	??_i2c1_read
 10624  094B  0836               	movf	??_i2c1_read,w
 10625  094C  00B8               	movwf	i2c1_read@read_status
 10626                           
 10627                           ;i2c1_util.c: 41: }
 10628                           ;i2c1_util.c: 42: } else {
 10629  094D  2950               	goto	l5073
 10630  094E                     l627:	
 10631                           
 10632                           ;i2c1_util.c: 43: read_status = 1;
 10633  094E  01B8               	clrf	i2c1_read@read_status
 10634  094F  0AB8               	incf	i2c1_read@read_status,f
 10635  0950                     l5073:	
 10636                           
 10637                           ;i2c1_util.c: 44: }
 10638                           ;i2c1_util.c: 45: return read_status;
 10639  0950  0838               	movf	i2c1_read@read_status,w
 10640  0951  0008               	return
 10641  0952                     __end_of_i2c1_read:	
 10642                           
 10643                           	psect	text45
 10644  1444                     __ptext45:	
 10645 ;; *************** function _I2C1_MasterRead *****************
 10646 ;; Defined at:
 10647 ;;		line 619 in file "mcc_generated_files/i2c1.c"
 10648 ;; Parameters:    Size  Location     Type
 10649 ;;  pdata           2    8[BANK0 ] PTR unsigned char 
 10650 ;;		 -> sen@length(1), sen@type(1), read_buf(16), exec_remote_cmd@data(1), 
 10651 ;;  length          1   10[BANK0 ] unsigned char 
 10652 ;;  address         2   11[BANK0 ] unsigned int 
 10653 ;;  pflag           1   13[BANK0 ] PTR enum E2972
 10654 ;;		 -> i2c1_read@status(1), 
 10655 ;; Auto vars:     Size  Location     Type
 10656 ;;		None
 10657 ;; Return value:  Size  Location     Type
 10658 ;;                  1    wreg      void 
 10659 ;; Registers used:
 10660 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10661 ;; Tracked objects:
 10662 ;;		On entry : 0/0
 10663 ;;		On exit  : 0/0
 10664 ;;		Unchanged: 0/0
 10665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10666 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10667 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10668 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10669 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10670 ;;Total ram usage:        8 bytes
 10671 ;; Hardware stack levels used:    1
 10672 ;; Hardware stack levels required when called:    4
 10673 ;; This function calls:
 10674 ;;		_I2C1_MasterReadTRBBuild
 10675 ;;		_I2C1_MasterTRBInsert
 10676 ;; This function is called by:
 10677 ;;		_i2c1_read
 10678 ;; This function uses a non-reentrant model
 10679 ;;
 10680                           
 10681                           
 10682                           ;psect for function _I2C1_MasterRead
 10683  1444                     _I2C1_MasterRead:	
 10684                           
 10685                           ;i2c1.c: 625: static I2C1_TRANSACTION_REQUEST_BLOCK trBlock;
 10686                           ;i2c1.c: 629: if (i2c1_object.trStatus.s.full != 1)
 10687                           
 10688                           ;incstack = 0
 10689                           ; Regs used in _I2C1_MasterRead: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10690  1444  0021               	movlb	1	; select bank1
 10691  1445  185B               	btfsc	(_i2c1_object^(0+128)+2),0
 10692  1446  2C65               	goto	l4823
 10693                           
 10694                           ;i2c1.c: 630: {
 10695                           ;i2c1.c: 631: I2C1_MasterReadTRBBuild(&trBlock, pdata, length, address);
 10696  1447  0020               	movlb	0	; select bank0
 10697  1448  0829               	movf	I2C1_MasterRead@pdata+1,w
 10698  1449  00A1               	movwf	I2C1_MasterReadTRBBuild@pdata+1
 10699  144A  0828               	movf	I2C1_MasterRead@pdata,w
 10700  144B  00A0               	movwf	I2C1_MasterReadTRBBuild@pdata
 10701  144C  082A               	movf	I2C1_MasterRead@length,w
 10702  144D  00AE               	movwf	??_I2C1_MasterRead
 10703  144E  082E               	movf	??_I2C1_MasterRead,w
 10704  144F  00A2               	movwf	I2C1_MasterReadTRBBuild@length
 10705  1450  082C               	movf	I2C1_MasterRead@address+1,w
 10706  1451  00A4               	movwf	I2C1_MasterReadTRBBuild@address+1
 10707  1452  082B               	movf	I2C1_MasterRead@address,w
 10708  1453  00A3               	movwf	I2C1_MasterReadTRBBuild@address
 10709  1454  3048               	movlw	(low (I2C1_MasterRead@trBlock| (0+256)))& (0+255)
 10710  1455  3195  2514  3194   	fcall	_I2C1_MasterReadTRBBuild
 10711                           
 10712                           ;i2c1.c: 632: I2C1_MasterTRBInsert(1, &trBlock, pflag);
 10713  1458  3048               	movlw	(low (I2C1_MasterRead@trBlock| (0+256)))& (0+255)
 10714  1459  0020               	movlb	0	; select bank0
 10715  145A  00AE               	movwf	??_I2C1_MasterRead
 10716  145B  082E               	movf	??_I2C1_MasterRead,w
 10717  145C  00A0               	movwf	I2C1_MasterTRBInsert@ptrb_list
 10718  145D  082D               	movf	I2C1_MasterRead@pflag,w
 10719  145E  00AF               	movwf	??_I2C1_MasterRead+1
 10720  145F  082F               	movf	??_I2C1_MasterRead+1,w
 10721  1460  00A1               	movwf	I2C1_MasterTRBInsert@pflag
 10722  1461  3001               	movlw	1
 10723  1462  3187  27A8         	fcall	_I2C1_MasterTRBInsert
 10724                           
 10725                           ;i2c1.c: 633: }
 10726  1464  0008               	return
 10727  1465                     l4823:	
 10728                           
 10729                           ;i2c1.c: 634: else
 10730                           ;i2c1.c: 635: {
 10731                           ;i2c1.c: 636: *pflag = I2C1_MESSAGE_FAIL;
 10732  1465  0020               	movlb	0	; select bank0
 10733  1466  082D               	movf	I2C1_MasterRead@pflag,w
 10734  1467  0086               	movwf	6
 10735  1468  0187               	clrf	7
 10736  1469  0181               	clrf	1
 10737  146A  0A81               	incf	1,f
 10738  146B  0008               	return
 10739  146C                     __end_of_I2C1_MasterRead:	
 10740                           
 10741                           	psect	text46
 10742  1514                     __ptext46:	
 10743 ;; *************** function _I2C1_MasterReadTRBBuild *****************
 10744 ;; Defined at:
 10745 ;;		line 694 in file "mcc_generated_files/i2c1.c"
 10746 ;; Parameters:    Size  Location     Type
 10747 ;;  ptrb            1    wreg     PTR struct .
 10748 ;;		 -> I2C1_MasterRead@trBlock(5), 
 10749 ;;  pdata           2    0[BANK0 ] PTR unsigned char 
 10750 ;;		 -> sen@length(1), sen@type(1), read_buf(16), exec_remote_cmd@data(1), 
 10751 ;;  length          1    2[BANK0 ] unsigned char 
 10752 ;;  address         2    3[BANK0 ] unsigned int 
 10753 ;; Auto vars:     Size  Location     Type
 10754 ;;  ptrb            1    7[BANK0 ] PTR struct .
 10755 ;;		 -> I2C1_MasterRead@trBlock(5), 
 10756 ;; Return value:  Size  Location     Type
 10757 ;;                  1    wreg      void 
 10758 ;; Registers used:
 10759 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10760 ;; Tracked objects:
 10761 ;;		On entry : 0/0
 10762 ;;		On exit  : 0/0
 10763 ;;		Unchanged: 0/0
 10764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10765 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10766 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10767 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10768 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10769 ;;Total ram usage:        8 bytes
 10770 ;; Hardware stack levels used:    1
 10771 ;; Hardware stack levels required when called:    3
 10772 ;; This function calls:
 10773 ;;		Nothing
 10774 ;; This function is called by:
 10775 ;;		_I2C1_MasterRead
 10776 ;; This function uses a non-reentrant model
 10777 ;;
 10778                           
 10779                           
 10780                           ;psect for function _I2C1_MasterReadTRBBuild
 10781  1514                     _I2C1_MasterReadTRBBuild:	
 10782                           
 10783                           ;incstack = 0
 10784                           ; Regs used in _I2C1_MasterReadTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
 10785                           ;I2C1_MasterReadTRBBuild@ptrb stored from wreg
 10786  1514  0020               	movlb	0	; select bank0
 10787  1515  00A7               	movwf	I2C1_MasterReadTRBBuild@ptrb
 10788                           
 10789                           ;i2c1.c: 700: ptrb->address = address << 1;
 10790  1516  0824               	movf	I2C1_MasterReadTRBBuild@address+1,w
 10791  1517  00A6               	movwf	??_I2C1_MasterReadTRBBuild+1
 10792  1518  0823               	movf	I2C1_MasterReadTRBBuild@address,w
 10793  1519  00A5               	movwf	??_I2C1_MasterReadTRBBuild
 10794  151A  35A5               	lslf	??_I2C1_MasterReadTRBBuild,f
 10795  151B  0DA6               	rlf	??_I2C1_MasterReadTRBBuild+1,f
 10796  151C  0827               	movf	I2C1_MasterReadTRBBuild@ptrb,w
 10797  151D  0086               	movwf	6
 10798  151E  3001               	movlw	1	; select bank2/3
 10799  151F  0087               	movwf	7
 10800  1520  0825               	movf	??_I2C1_MasterReadTRBBuild,w
 10801  1521  3FC0               	movwi [0]fsr1
 10802  1522  0826               	movf	??_I2C1_MasterReadTRBBuild+1,w
 10803  1523  3FC1               	movwi [1]fsr1
 10804                           
 10805                           ;i2c1.c: 702: ptrb->address |= 0x01;
 10806  1524  0827               	movf	I2C1_MasterReadTRBBuild@ptrb,w
 10807  1525  0086               	movwf	6
 10808  1526  3001               	movlw	1	; select bank2/3
 10809  1527  0087               	movwf	7
 10810  1528  3001               	movlw	1
 10811  1529  0481               	iorwf	1,f
 10812  152A  3141               	addfsr 1,1
 10813  152B  3000               	movlw	0
 10814  152C  0481               	iorwf	1,f
 10815                           
 10816                           ;i2c1.c: 703: ptrb->length = length;
 10817  152D  0822               	movf	I2C1_MasterReadTRBBuild@length,w
 10818  152E  00A5               	movwf	??_I2C1_MasterReadTRBBuild
 10819  152F  0827               	movf	I2C1_MasterReadTRBBuild@ptrb,w
 10820  1530  3E02               	addlw	2
 10821  1531  0086               	movwf	6
 10822  1532  3001               	movlw	1	; select bank2/3
 10823  1533  0087               	movwf	7
 10824  1534  0825               	movf	??_I2C1_MasterReadTRBBuild,w
 10825  1535  0081               	movwf	1
 10826                           
 10827                           ;i2c1.c: 704: ptrb->pbuffer = pdata;
 10828  1536  0827               	movf	I2C1_MasterReadTRBBuild@ptrb,w
 10829  1537  3E03               	addlw	3
 10830  1538  0086               	movwf	6
 10831  1539  3001               	movlw	1	; select bank2/3
 10832  153A  0087               	movwf	7
 10833  153B  0820               	movf	I2C1_MasterReadTRBBuild@pdata,w
 10834  153C  3FC0               	movwi [0]fsr1
 10835  153D  0821               	movf	I2C1_MasterReadTRBBuild@pdata+1,w
 10836  153E  3FC1               	movwi [1]fsr1
 10837  153F  0008               	return
 10838  1540                     __end_of_I2C1_MasterReadTRBBuild:	
 10839                           
 10840                           	psect	text47
 10841  1765                     __ptext47:	
 10842 ;; *************** function _del_dev *****************
 10843 ;; Defined at:
 10844 ;;		line 143 in file "main.c"
 10845 ;; Parameters:    Size  Location     Type
 10846 ;;  dev_addr        1    wreg     unsigned char 
 10847 ;; Auto vars:     Size  Location     Type
 10848 ;;  dev_addr        1   16[BANK0 ] unsigned char 
 10849 ;;  y               1   15[BANK0 ] unsigned char 
 10850 ;;  new_map         1   14[BANK0 ] unsigned char 
 10851 ;;  old_map         1   13[BANK0 ] unsigned char 
 10852 ;;  x               1   12[BANK0 ] unsigned char 
 10853 ;; Return value:  Size  Location     Type
 10854 ;;                  1    wreg      void 
 10855 ;; Registers used:
 10856 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10857 ;; Tracked objects:
 10858 ;;		On entry : 0/0
 10859 ;;		On exit  : 0/0
 10860 ;;		Unchanged: 0/0
 10861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10863 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10864 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10865 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10866 ;;Total ram usage:        8 bytes
 10867 ;; Hardware stack levels used:    1
 10868 ;; Hardware stack levels required when called:    4
 10869 ;; This function calls:
 10870 ;;		___awdiv
 10871 ;; This function is called by:
 10872 ;;		_scan_dev
 10873 ;; This function uses a non-reentrant model
 10874 ;;
 10875                           
 10876                           
 10877                           ;psect for function _del_dev
 10878  1765                     _del_dev:	
 10879                           
 10880                           ;incstack = 0
 10881                           ; Regs used in _del_dev: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10882                           ;del_dev@dev_addr stored from wreg
 10883  1765  0020               	movlb	0	; select bank0
 10884  1766  00B0               	movwf	del_dev@dev_addr
 10885                           
 10886                           ;main.c: 144: uint8_t x, y;
 10887                           ;main.c: 145: uint8_t new_map, old_map;
 10888                           ;main.c: 146: if (dev_addr >= 1 && dev_addr <= 0x20) {
 10889  1767  0830               	movf	del_dev@dev_addr,w
 10890  1768  1903               	btfsc	3,2
 10891  1769  0008               	return
 10892  176A  3021               	movlw	33
 10893  176B  0230               	subwf	del_dev@dev_addr,w
 10894  176C  1803               	skipnc
 10895  176D  0008               	return
 10896                           
 10897                           ;main.c: 147: y = dev_addr / 8;
 10898  176E  3008               	movlw	8
 10899  176F  00A0               	movwf	___awdiv@divisor
 10900  1770  3000               	movlw	0
 10901  1771  00A1               	movwf	___awdiv@divisor+1
 10902  1772  0830               	movf	del_dev@dev_addr,w
 10903  1773  00A9               	movwf	??_del_dev
 10904  1774  01AA               	clrf	??_del_dev+1
 10905  1775  0829               	movf	??_del_dev,w
 10906  1776  00A2               	movwf	___awdiv@dividend
 10907  1777  082A               	movf	??_del_dev+1,w
 10908  1778  00A3               	movwf	___awdiv@dividend+1
 10909  1779  3188  2058  3197   	fcall	___awdiv
 10910  177C  0020               	movlb	0	; select bank0
 10911  177D  0820               	movf	?___awdiv,w
 10912  177E  00AB               	movwf	??_del_dev+2
 10913  177F  082B               	movf	??_del_dev+2,w
 10914  1780  00AF               	movwf	del_dev@y
 10915                           
 10916                           ;main.c: 148: x = dev_addr % 8;
 10917  1781  0830               	movf	del_dev@dev_addr,w
 10918  1782  3907               	andlw	7
 10919  1783  00A9               	movwf	??_del_dev
 10920  1784  0829               	movf	??_del_dev,w
 10921  1785  00AC               	movwf	del_dev@x
 10922                           
 10923                           ;main.c: 149: old_map = dev_map[y];
 10924  1786  082F               	movf	del_dev@y,w
 10925  1787  3E20               	addlw	(low (_dev_map| (0+256)))& (0+255)
 10926  1788  0086               	movwf	6
 10927  1789  3001               	movlw	1	; select bank2/3
 10928  178A  0087               	movwf	7
 10929  178B  0801               	movf	1,w
 10930  178C  00A9               	movwf	??_del_dev
 10931  178D  0829               	movf	??_del_dev,w
 10932  178E  00AD               	movwf	del_dev@old_map
 10933                           
 10934                           ;main.c: 150: new_map = dev_map[y] & ~(0x01 << x);
 10935  178F  082F               	movf	del_dev@y,w
 10936  1790  3E20               	addlw	(low (_dev_map| (0+256)))& (0+255)
 10937  1791  0086               	movwf	6
 10938  1792  3001               	movlw	1	; select bank2/3
 10939  1793  0087               	movwf	7
 10940  1794  3001               	movlw	1
 10941  1795  00A9               	movwf	??_del_dev
 10942  1796  0A2C               	incf	del_dev@x,w
 10943  1797  2F99               	goto	u5814
 10944  1798                     u5815:	
 10945  1798  35A9               	lslf	??_del_dev,f
 10946  1799                     u5814:	
 10947  1799  0B89               	decfsz	9,f
 10948  179A  2F98               	goto	u5815
 10949  179B  0829               	movf	??_del_dev,w
 10950  179C  3AFF               	xorlw	255
 10951  179D  0501               	andwf	1,w
 10952  179E  00AA               	movwf	??_del_dev+1
 10953  179F  082A               	movf	??_del_dev+1,w
 10954  17A0  00AE               	movwf	del_dev@new_map
 10955                           
 10956                           ;main.c: 151: if (old_map != new_map) {
 10957  17A1  082D               	movf	del_dev@old_map,w
 10958  17A2  062E               	xorwf	del_dev@new_map,w
 10959  17A3  1903               	skipnz
 10960  17A4  0008               	return
 10961                           
 10962                           ;main.c: 152: dev_map[y] = new_map;
 10963  17A5  082E               	movf	del_dev@new_map,w
 10964  17A6  00A9               	movwf	??_del_dev
 10965  17A7  082F               	movf	del_dev@y,w
 10966  17A8  3E20               	addlw	(low (_dev_map| (0+256)))& (0+255)
 10967  17A9  0086               	movwf	6
 10968  17AA  3001               	movlw	1	; select bank2/3
 10969  17AB  0087               	movwf	7
 10970  17AC  0829               	movf	??_del_dev,w
 10971  17AD  0081               	movwf	1
 10972                           
 10973                           ;main.c: 153: devs--;
 10974  17AE  3001               	movlw	1
 10975  17AF  0021               	movlb	1	; select bank1
 10976  17B0  02E4               	subwf	_devs^(0+128),f
 10977  17B1  0008               	return
 10978  17B2                     __end_of_del_dev:	
 10979                           
 10980                           	psect	text48
 10981  17B2                     __ptext48:	
 10982 ;; *************** function _add_dev *****************
 10983 ;; Defined at:
 10984 ;;		line 128 in file "main.c"
 10985 ;; Parameters:    Size  Location     Type
 10986 ;;  dev_addr        1    wreg     unsigned char 
 10987 ;; Auto vars:     Size  Location     Type
 10988 ;;  dev_addr        1   16[BANK0 ] unsigned char 
 10989 ;;  y               1   15[BANK0 ] unsigned char 
 10990 ;;  new_map         1   14[BANK0 ] unsigned char 
 10991 ;;  old_map         1   13[BANK0 ] unsigned char 
 10992 ;;  x               1   12[BANK0 ] unsigned char 
 10993 ;; Return value:  Size  Location     Type
 10994 ;;                  1    wreg      void 
 10995 ;; Registers used:
 10996 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10997 ;; Tracked objects:
 10998 ;;		On entry : 0/0
 10999 ;;		On exit  : 0/0
 11000 ;;		Unchanged: 0/0
 11001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11003 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11004 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11005 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11006 ;;Total ram usage:        8 bytes
 11007 ;; Hardware stack levels used:    1
 11008 ;; Hardware stack levels required when called:    4
 11009 ;; This function calls:
 11010 ;;		___awdiv
 11011 ;; This function is called by:
 11012 ;;		_scan_dev
 11013 ;; This function uses a non-reentrant model
 11014 ;;
 11015                           
 11016                           
 11017                           ;psect for function _add_dev
 11018  17B2                     _add_dev:	
 11019                           
 11020                           ;incstack = 0
 11021                           ; Regs used in _add_dev: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11022                           ;add_dev@dev_addr stored from wreg
 11023  17B2  0020               	movlb	0	; select bank0
 11024  17B3  00B0               	movwf	add_dev@dev_addr
 11025                           
 11026                           ;main.c: 129: uint8_t x, y;
 11027                           ;main.c: 130: uint8_t new_map, old_map;
 11028                           ;main.c: 131: if (dev_addr >= 1 && dev_addr <= 0x20) {
 11029  17B4  0830               	movf	add_dev@dev_addr,w
 11030  17B5  1903               	btfsc	3,2
 11031  17B6  0008               	return
 11032  17B7  3021               	movlw	33
 11033  17B8  0230               	subwf	add_dev@dev_addr,w
 11034  17B9  1803               	skipnc
 11035  17BA  0008               	return
 11036                           
 11037                           ;main.c: 132: y = dev_addr / 8;
 11038  17BB  3008               	movlw	8
 11039  17BC  00A0               	movwf	___awdiv@divisor
 11040  17BD  3000               	movlw	0
 11041  17BE  00A1               	movwf	___awdiv@divisor+1
 11042  17BF  0830               	movf	add_dev@dev_addr,w
 11043  17C0  00A9               	movwf	??_add_dev
 11044  17C1  01AA               	clrf	??_add_dev+1
 11045  17C2  0829               	movf	??_add_dev,w
 11046  17C3  00A2               	movwf	___awdiv@dividend
 11047  17C4  082A               	movf	??_add_dev+1,w
 11048  17C5  00A3               	movwf	___awdiv@dividend+1
 11049  17C6  3188  2058  3197   	fcall	___awdiv
 11050  17C9  0020               	movlb	0	; select bank0
 11051  17CA  0820               	movf	?___awdiv,w
 11052  17CB  00AB               	movwf	??_add_dev+2
 11053  17CC  082B               	movf	??_add_dev+2,w
 11054  17CD  00AF               	movwf	add_dev@y
 11055                           
 11056                           ;main.c: 133: x = dev_addr % 8;
 11057  17CE  0830               	movf	add_dev@dev_addr,w
 11058  17CF  3907               	andlw	7
 11059  17D0  00A9               	movwf	??_add_dev
 11060  17D1  0829               	movf	??_add_dev,w
 11061  17D2  00AC               	movwf	add_dev@x
 11062                           
 11063                           ;main.c: 134: old_map = dev_map[y];
 11064  17D3  082F               	movf	add_dev@y,w
 11065  17D4  3E20               	addlw	(low (_dev_map| (0+256)))& (0+255)
 11066  17D5  0086               	movwf	6
 11067  17D6  3001               	movlw	1	; select bank2/3
 11068  17D7  0087               	movwf	7
 11069  17D8  0801               	movf	1,w
 11070  17D9  00A9               	movwf	??_add_dev
 11071  17DA  0829               	movf	??_add_dev,w
 11072  17DB  00AD               	movwf	add_dev@old_map
 11073                           
 11074                           ;main.c: 135: new_map = dev_map[y] | (0x01 << x);
 11075  17DC  082F               	movf	add_dev@y,w
 11076  17DD  3E20               	addlw	(low (_dev_map| (0+256)))& (0+255)
 11077  17DE  0086               	movwf	6
 11078  17DF  3001               	movlw	1	; select bank2/3
 11079  17E0  0087               	movwf	7
 11080  17E1  3001               	movlw	1
 11081  17E2  00A9               	movwf	??_add_dev
 11082  17E3  0A2C               	incf	add_dev@x,w
 11083  17E4  2FE6               	goto	u5774
 11084  17E5                     u5775:	
 11085  17E5  35A9               	lslf	??_add_dev,f
 11086  17E6                     u5774:	
 11087  17E6  0B89               	decfsz	9,f
 11088  17E7  2FE5               	goto	u5775
 11089  17E8  0829               	movf	??_add_dev,w
 11090  17E9  0401               	iorwf	1,w
 11091  17EA  00AA               	movwf	??_add_dev+1
 11092  17EB  082A               	movf	??_add_dev+1,w
 11093  17EC  00AE               	movwf	add_dev@new_map
 11094                           
 11095                           ;main.c: 136: if (old_map != new_map) {
 11096  17ED  082D               	movf	add_dev@old_map,w
 11097  17EE  062E               	xorwf	add_dev@new_map,w
 11098  17EF  1903               	skipnz
 11099  17F0  0008               	return
 11100                           
 11101                           ;main.c: 137: dev_map[y] = new_map;
 11102  17F1  082E               	movf	add_dev@new_map,w
 11103  17F2  00A9               	movwf	??_add_dev
 11104  17F3  082F               	movf	add_dev@y,w
 11105  17F4  3E20               	addlw	(low (_dev_map| (0+256)))& (0+255)
 11106  17F5  0086               	movwf	6
 11107  17F6  3001               	movlw	1	; select bank2/3
 11108  17F7  0087               	movwf	7
 11109  17F8  0829               	movf	??_add_dev,w
 11110  17F9  0081               	movwf	1
 11111                           
 11112                           ;main.c: 138: devs++;
 11113  17FA  3001               	movlw	1
 11114  17FB  00A9               	movwf	??_add_dev
 11115  17FC  0829               	movf	??_add_dev,w
 11116  17FD  0021               	movlb	1	; select bank1
 11117  17FE  07E4               	addwf	_devs^(0+128),f
 11118  17FF  0008               	return
 11119  1800                     __end_of_add_dev:	
 11120                           
 11121                           	psect	text49
 11122  0858                     __ptext49:	
 11123 ;; *************** function ___awdiv *****************
 11124 ;; Defined at:
 11125 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
 11126 ;; Parameters:    Size  Location     Type
 11127 ;;  divisor         2    0[BANK0 ] int 
 11128 ;;  dividend        2    2[BANK0 ] int 
 11129 ;; Auto vars:     Size  Location     Type
 11130 ;;  quotient        2    7[BANK0 ] int 
 11131 ;;  sign            1    6[BANK0 ] unsigned char 
 11132 ;;  counter         1    5[BANK0 ] unsigned char 
 11133 ;; Return value:  Size  Location     Type
 11134 ;;                  2    0[BANK0 ] int 
 11135 ;; Registers used:
 11136 ;;		wreg, status,2, status,0
 11137 ;; Tracked objects:
 11138 ;;		On entry : 0/0
 11139 ;;		On exit  : 0/0
 11140 ;;		Unchanged: 0/0
 11141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11142 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11143 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11144 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11145 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11146 ;;Total ram usage:        9 bytes
 11147 ;; Hardware stack levels used:    1
 11148 ;; Hardware stack levels required when called:    3
 11149 ;; This function calls:
 11150 ;;		Nothing
 11151 ;; This function is called by:
 11152 ;;		_init
 11153 ;;		_add_dev
 11154 ;;		_del_dev
 11155 ;;		_detected
 11156 ;;		_command_handler
 11157 ;;		_PROTOCOL_Print_TLV
 11158 ;; This function uses a non-reentrant model
 11159 ;;
 11160                           
 11161                           
 11162                           ;psect for function ___awdiv
 11163  0858                     ___awdiv:	
 11164                           
 11165                           ;incstack = 0
 11166                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 11167  0858  0020               	movlb	0	; select bank0
 11168  0859  01A6               	clrf	___awdiv@sign
 11169  085A  1FA1               	btfss	___awdiv@divisor+1,7
 11170  085B  2863               	goto	l4975
 11171  085C  09A0               	comf	___awdiv@divisor,f
 11172  085D  09A1               	comf	___awdiv@divisor+1,f
 11173  085E  0AA0               	incf	___awdiv@divisor,f
 11174  085F  1903               	skipnz
 11175  0860  0AA1               	incf	___awdiv@divisor+1,f
 11176  0861  01A6               	clrf	___awdiv@sign
 11177  0862  0AA6               	incf	___awdiv@sign,f
 11178  0863                     l4975:	
 11179  0863  1FA3               	btfss	___awdiv@dividend+1,7
 11180  0864  286E               	goto	l4981
 11181  0865  09A2               	comf	___awdiv@dividend,f
 11182  0866  09A3               	comf	___awdiv@dividend+1,f
 11183  0867  0AA2               	incf	___awdiv@dividend,f
 11184  0868  1903               	skipnz
 11185  0869  0AA3               	incf	___awdiv@dividend+1,f
 11186  086A  3001               	movlw	1
 11187  086B  00A4               	movwf	??___awdiv
 11188  086C  0824               	movf	??___awdiv,w
 11189  086D  06A6               	xorwf	___awdiv@sign,f
 11190  086E                     l4981:	
 11191  086E  01A7               	clrf	___awdiv@quotient
 11192  086F  01A8               	clrf	___awdiv@quotient+1
 11193  0870  0820               	movf	___awdiv@divisor,w
 11194  0871  0421               	iorwf	___awdiv@divisor+1,w
 11195  0872  1903               	btfsc	3,2
 11196  0873  289D               	goto	l5003
 11197  0874  01A5               	clrf	___awdiv@counter
 11198  0875  0AA5               	incf	___awdiv@counter,f
 11199  0876                     l4991:	
 11200  0876  1BA1               	btfsc	___awdiv@divisor+1,7
 11201  0877  2882               	goto	l4993
 11202  0878  3001               	movlw	1
 11203  0879                     u5535:	
 11204  0879  35A0               	lslf	___awdiv@divisor,f
 11205  087A  0DA1               	rlf	___awdiv@divisor+1,f
 11206  087B  0B89               	decfsz	9,f
 11207  087C  2879               	goto	u5535
 11208  087D  3001               	movlw	1
 11209  087E  00A4               	movwf	??___awdiv
 11210  087F  0824               	movf	??___awdiv,w
 11211  0880  07A5               	addwf	___awdiv@counter,f
 11212  0881  2876               	goto	l4991
 11213  0882                     l4993:	
 11214  0882  3001               	movlw	1
 11215  0883                     u5555:	
 11216  0883  35A7               	lslf	___awdiv@quotient,f
 11217  0884  0DA8               	rlf	___awdiv@quotient+1,f
 11218  0885  0B89               	decfsz	9,f
 11219  0886  2883               	goto	u5555
 11220  0887  0821               	movf	___awdiv@divisor+1,w
 11221  0888  0223               	subwf	___awdiv@dividend+1,w
 11222  0889  1D03               	skipz
 11223  088A  288D               	goto	u5565
 11224  088B  0820               	movf	___awdiv@divisor,w
 11225  088C  0222               	subwf	___awdiv@dividend,w
 11226  088D                     u5565:	
 11227  088D  1C03               	skipc
 11228  088E  2894               	goto	l4999
 11229  088F  0820               	movf	___awdiv@divisor,w
 11230  0890  02A2               	subwf	___awdiv@dividend,f
 11231  0891  0821               	movf	___awdiv@divisor+1,w
 11232  0892  3BA3               	subwfb	___awdiv@dividend+1,f
 11233  0893  1427               	bsf	___awdiv@quotient,0
 11234  0894                     l4999:	
 11235  0894  3001               	movlw	1
 11236  0895                     u5575:	
 11237  0895  36A1               	lsrf	___awdiv@divisor+1,f
 11238  0896  0CA0               	rrf	___awdiv@divisor,f
 11239  0897  0B89               	decfsz	9,f
 11240  0898  2895               	goto	u5575
 11241  0899  3001               	movlw	1
 11242  089A  02A5               	subwf	___awdiv@counter,f
 11243  089B  1D03               	btfss	3,2
 11244  089C  2882               	goto	l4993
 11245  089D                     l5003:	
 11246  089D  0826               	movf	___awdiv@sign,w
 11247  089E  1903               	btfsc	3,2
 11248  089F  28A5               	goto	l5007
 11249  08A0  09A7               	comf	___awdiv@quotient,f
 11250  08A1  09A8               	comf	___awdiv@quotient+1,f
 11251  08A2  0AA7               	incf	___awdiv@quotient,f
 11252  08A3  1903               	skipnz
 11253  08A4  0AA8               	incf	___awdiv@quotient+1,f
 11254  08A5                     l5007:	
 11255  08A5  0828               	movf	___awdiv@quotient+1,w
 11256  08A6  00A1               	movwf	?___awdiv+1
 11257  08A7  0827               	movf	___awdiv@quotient,w
 11258  08A8  00A0               	movwf	?___awdiv
 11259  08A9  0008               	return
 11260  08AA                     __end_of___awdiv:	
 11261                           
 11262                           	psect	text50
 11263  14BE                     __ptext50:	
 11264 ;; *************** function _i2c1_write_no_data *****************
 11265 ;; Defined at:
 11266 ;;		line 49 in file "i2c1_util.c"
 11267 ;; Parameters:    Size  Location     Type
 11268 ;;  dev_addr        2   14[BANK0 ] unsigned int 
 11269 ;;  reg_addr        1   16[BANK0 ] unsigned char 
 11270 ;; Auto vars:     Size  Location     Type
 11271 ;;  status          1   20[BANK0 ] enum E3078
 11272 ;;  buf             1   19[BANK0 ] unsigned char [1]
 11273 ;;  write_status    1   18[BANK0 ] unsigned char 
 11274 ;; Return value:  Size  Location     Type
 11275 ;;                  1    wreg      unsigned char 
 11276 ;; Registers used:
 11277 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11278 ;; Tracked objects:
 11279 ;;		On entry : 0/0
 11280 ;;		On exit  : 0/0
 11281 ;;		Unchanged: 0/0
 11282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11283 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11284 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11285 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11286 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11287 ;;Total ram usage:        7 bytes
 11288 ;; Hardware stack levels used:    1
 11289 ;; Hardware stack levels required when called:    5
 11290 ;; This function calls:
 11291 ;;		_I2C1_MasterWrite
 11292 ;; This function is called by:
 11293 ;;		_exec_remote_cmd
 11294 ;;		_check_plg
 11295 ;;		_sen
 11296 ;;		_one_shot_sen
 11297 ;;		_fetch
 11298 ;; This function uses a non-reentrant model
 11299 ;;
 11300                           
 11301                           
 11302                           ;psect for function _i2c1_write_no_data
 11303  14BE                     _i2c1_write_no_data:	
 11304                           
 11305                           ;i2c1_util.c: 51: uint8_t buf[1];
 11306                           ;i2c1_util.c: 52: I2C1_MESSAGE_STATUS status;
 11307                           ;i2c1_util.c: 53: uint8_t write_status;
 11308                           ;i2c1_util.c: 54: buf[0] = reg_addr;
 11309                           
 11310                           ;incstack = 0
 11311                           ; Regs used in _i2c1_write_no_data: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11312  14BE  0020               	movlb	0	; select bank0
 11313  14BF  0830               	movf	i2c1_write_no_data@reg_addr,w
 11314  14C0  00B1               	movwf	??_i2c1_write_no_data
 11315  14C1  0831               	movf	??_i2c1_write_no_data,w
 11316  14C2  00B3               	movwf	i2c1_write_no_data@buf
 11317                           
 11318                           ;i2c1_util.c: 55: _delay((unsigned long)((100)*(32000000/4000000.0)));
 11319  14C3  30A0               	movlw	160
 11320  14C4                     u7507:	
 11321  14C4  3200               	nop2
 11322  14C5  0B89               	decfsz	9,f
 11323  14C6  2CC4               	goto	u7507
 11324                           
 11325                           ;i2c1_util.c: 56: I2C1_MasterWrite(buf, 1, dev_addr, &status);
 11326  14C7  0020               	movlb	0	; select bank0
 11327  14C8  01A7               	clrf	I2C1_MasterWrite@length
 11328  14C9  0AA7               	incf	I2C1_MasterWrite@length,f
 11329  14CA  082F               	movf	i2c1_write_no_data@dev_addr+1,w
 11330  14CB  00A9               	movwf	I2C1_MasterWrite@address+1
 11331  14CC  082E               	movf	i2c1_write_no_data@dev_addr,w
 11332  14CD  00A8               	movwf	I2C1_MasterWrite@address
 11333  14CE  3034               	movlw	(low (i2c1_write_no_data@status| 0))& (0+255)
 11334  14CF  00B1               	movwf	??_i2c1_write_no_data
 11335  14D0  0831               	movf	??_i2c1_write_no_data,w
 11336  14D1  00AA               	movwf	I2C1_MasterWrite@pflag
 11337  14D2  3033               	movlw	(low (i2c1_write_no_data@buf| 0))& (0+255)
 11338  14D3  3194  2494  3194   	fcall	_I2C1_MasterWrite
 11339  14D6                     l5083:	
 11340                           ;i2c1_util.c: 57: while (status == I2C1_MESSAGE_PENDING) {_delay((unsigned long)((100)*(
      +                          32000000/4000000.0)));};
 11341                           
 11342  14D6  3002               	movlw	2
 11343  14D7  0020               	movlb	0	; select bank0
 11344  14D8  0634               	xorwf	i2c1_write_no_data@status,w
 11345  14D9  1D03               	btfss	3,2
 11346  14DA  2CE0               	goto	l5085
 11347  14DB  30A0               	movlw	160
 11348  14DC                     u7517:	
 11349  14DC  3200               	nop2
 11350  14DD  0B89               	decfsz	9,f
 11351  14DE  2CDC               	goto	u7517
 11352  14DF  2CD6               	goto	l5083
 11353  14E0                     l5085:	
 11354                           
 11355                           ;i2c1_util.c: 58: if (status == I2C1_MESSAGE_COMPLETE) {
 11356  14E0  0834               	movf	i2c1_write_no_data@status,w
 11357  14E1  1D03               	btfss	3,2
 11358  14E2  2CE5               	goto	l640
 11359                           
 11360                           ;i2c1_util.c: 59: write_status = 0;
 11361  14E3  01B2               	clrf	i2c1_write_no_data@write_status
 11362                           
 11363                           ;i2c1_util.c: 60: } else {
 11364  14E4  2CE7               	goto	l5089
 11365  14E5                     l640:	
 11366                           
 11367                           ;i2c1_util.c: 61: write_status = 1;
 11368  14E5  01B2               	clrf	i2c1_write_no_data@write_status
 11369  14E6  0AB2               	incf	i2c1_write_no_data@write_status,f
 11370  14E7                     l5089:	
 11371                           
 11372                           ;i2c1_util.c: 62: }
 11373                           ;i2c1_util.c: 63: return write_status;
 11374  14E7  0832               	movf	i2c1_write_no_data@write_status,w
 11375  14E8  0008               	return
 11376  14E9                     __end_of_i2c1_write_no_data:	
 11377                           
 11378                           	psect	text51
 11379  1494                     __ptext51:	
 11380 ;; *************** function _I2C1_MasterWrite *****************
 11381 ;; Defined at:
 11382 ;;		line 598 in file "mcc_generated_files/i2c1.c"
 11383 ;; Parameters:    Size  Location     Type
 11384 ;;  pdata           1    wreg     PTR unsigned char 
 11385 ;;		 -> i2c1_write_no_data@buf(1), i2c1_read@reg(1), exec_remote_cmd@send_buf(50), 
 11386 ;;  length          1    7[BANK0 ] unsigned char 
 11387 ;;  address         2    8[BANK0 ] unsigned int 
 11388 ;;  pflag           1   10[BANK0 ] PTR enum E2972
 11389 ;;		 -> i2c1_write_no_data@status(1), i2c1_read@status(1), i2c1_write@status(1), 
 11390 ;; Auto vars:     Size  Location     Type
 11391 ;;  pdata           1   13[BANK0 ] PTR unsigned char 
 11392 ;;		 -> i2c1_write_no_data@buf(1), i2c1_read@reg(1), exec_remote_cmd@send_buf(50), 
 11393 ;; Return value:  Size  Location     Type
 11394 ;;                  1    wreg      void 
 11395 ;; Registers used:
 11396 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11397 ;; Tracked objects:
 11398 ;;		On entry : 0/0
 11399 ;;		On exit  : 0/0
 11400 ;;		Unchanged: 0/0
 11401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11402 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11403 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11404 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11405 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11406 ;;Total ram usage:        7 bytes
 11407 ;; Hardware stack levels used:    1
 11408 ;; Hardware stack levels required when called:    4
 11409 ;; This function calls:
 11410 ;;		_I2C1_MasterTRBInsert
 11411 ;;		_I2C1_MasterWriteTRBBuild
 11412 ;; This function is called by:
 11413 ;;		_i2c1_write
 11414 ;;		_i2c1_read
 11415 ;;		_i2c1_write_no_data
 11416 ;; This function uses a non-reentrant model
 11417 ;;
 11418                           
 11419                           
 11420                           ;psect for function _I2C1_MasterWrite
 11421  1494                     _I2C1_MasterWrite:	
 11422                           
 11423                           ;incstack = 0
 11424                           ; Regs used in _I2C1_MasterWrite: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11425                           ;I2C1_MasterWrite@pdata stored from wreg
 11426  1494  0020               	movlb	0	; select bank0
 11427  1495  00AD               	movwf	I2C1_MasterWrite@pdata
 11428                           
 11429                           ;i2c1.c: 604: static I2C1_TRANSACTION_REQUEST_BLOCK trBlock;
 11430                           ;i2c1.c: 607: if (i2c1_object.trStatus.s.full != 1)
 11431  1496  0021               	movlb	1	; select bank1
 11432  1497  185B               	btfsc	(_i2c1_object^(0+128)+2),0
 11433  1498  2CB7               	goto	l4817
 11434                           
 11435                           ;i2c1.c: 608: {
 11436                           ;i2c1.c: 609: I2C1_MasterWriteTRBBuild(&trBlock, pdata, length, address);
 11437  1499  0020               	movlb	0	; select bank0
 11438  149A  082D               	movf	I2C1_MasterWrite@pdata,w
 11439  149B  00AB               	movwf	??_I2C1_MasterWrite
 11440  149C  082B               	movf	??_I2C1_MasterWrite,w
 11441  149D  00A0               	movwf	I2C1_MasterWriteTRBBuild@pdata
 11442  149E  0827               	movf	I2C1_MasterWrite@length,w
 11443  149F  00AC               	movwf	??_I2C1_MasterWrite+1
 11444  14A0  082C               	movf	??_I2C1_MasterWrite+1,w
 11445  14A1  00A1               	movwf	I2C1_MasterWriteTRBBuild@length
 11446  14A2  0829               	movf	I2C1_MasterWrite@address+1,w
 11447  14A3  00A3               	movwf	I2C1_MasterWriteTRBBuild@address+1
 11448  14A4  0828               	movf	I2C1_MasterWrite@address,w
 11449  14A5  00A2               	movwf	I2C1_MasterWriteTRBBuild@address
 11450  14A6  304D               	movlw	(low (I2C1_MasterWrite@trBlock| (0+256)))& (0+255)
 11451  14A7  3193  23FC  3194   	fcall	_I2C1_MasterWriteTRBBuild
 11452                           
 11453                           ;i2c1.c: 610: I2C1_MasterTRBInsert(1, &trBlock, pflag);
 11454  14AA  304D               	movlw	(low (I2C1_MasterWrite@trBlock| (0+256)))& (0+255)
 11455  14AB  0020               	movlb	0	; select bank0
 11456  14AC  00AB               	movwf	??_I2C1_MasterWrite
 11457  14AD  082B               	movf	??_I2C1_MasterWrite,w
 11458  14AE  00A0               	movwf	I2C1_MasterTRBInsert@ptrb_list
 11459  14AF  082A               	movf	I2C1_MasterWrite@pflag,w
 11460  14B0  00AC               	movwf	??_I2C1_MasterWrite+1
 11461  14B1  082C               	movf	??_I2C1_MasterWrite+1,w
 11462  14B2  00A1               	movwf	I2C1_MasterTRBInsert@pflag
 11463  14B3  3001               	movlw	1
 11464  14B4  3187  27A8         	fcall	_I2C1_MasterTRBInsert
 11465                           
 11466                           ;i2c1.c: 611: }
 11467  14B6  0008               	return
 11468  14B7                     l4817:	
 11469                           
 11470                           ;i2c1.c: 612: else
 11471                           ;i2c1.c: 613: {
 11472                           ;i2c1.c: 614: *pflag = I2C1_MESSAGE_FAIL;
 11473  14B7  0020               	movlb	0	; select bank0
 11474  14B8  082A               	movf	I2C1_MasterWrite@pflag,w
 11475  14B9  0086               	movwf	6
 11476  14BA  0187               	clrf	7
 11477  14BB  0181               	clrf	1
 11478  14BC  0A81               	incf	1,f
 11479  14BD  0008               	return
 11480  14BE                     __end_of_I2C1_MasterWrite:	
 11481                           
 11482                           	psect	text52
 11483  13FC                     __ptext52:	
 11484 ;; *************** function _I2C1_MasterWriteTRBBuild *****************
 11485 ;; Defined at:
 11486 ;;		line 707 in file "mcc_generated_files/i2c1.c"
 11487 ;; Parameters:    Size  Location     Type
 11488 ;;  ptrb            1    wreg     PTR struct .
 11489 ;;		 -> I2C1_MasterWrite@trBlock(5), 
 11490 ;;  pdata           1    0[BANK0 ] PTR unsigned char 
 11491 ;;		 -> i2c1_write_no_data@buf(1), i2c1_read@reg(1), exec_remote_cmd@send_buf(50), 
 11492 ;;  length          1    1[BANK0 ] unsigned char 
 11493 ;;  address         2    2[BANK0 ] unsigned int 
 11494 ;; Auto vars:     Size  Location     Type
 11495 ;;  ptrb            1    6[BANK0 ] PTR struct .
 11496 ;;		 -> I2C1_MasterWrite@trBlock(5), 
 11497 ;; Return value:  Size  Location     Type
 11498 ;;                  1    wreg      void 
 11499 ;; Registers used:
 11500 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11501 ;; Tracked objects:
 11502 ;;		On entry : 0/0
 11503 ;;		On exit  : 0/0
 11504 ;;		Unchanged: 0/0
 11505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11506 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11507 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11508 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11509 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11510 ;;Total ram usage:        7 bytes
 11511 ;; Hardware stack levels used:    1
 11512 ;; Hardware stack levels required when called:    3
 11513 ;; This function calls:
 11514 ;;		Nothing
 11515 ;; This function is called by:
 11516 ;;		_I2C1_MasterWrite
 11517 ;; This function uses a non-reentrant model
 11518 ;;
 11519                           
 11520                           
 11521                           ;psect for function _I2C1_MasterWriteTRBBuild
 11522  13FC                     _I2C1_MasterWriteTRBBuild:	
 11523                           
 11524                           ;incstack = 0
 11525                           ; Regs used in _I2C1_MasterWriteTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
 11526                           ;I2C1_MasterWriteTRBBuild@ptrb stored from wreg
 11527  13FC  0020               	movlb	0	; select bank0
 11528  13FD  00A6               	movwf	I2C1_MasterWriteTRBBuild@ptrb
 11529                           
 11530                           ;i2c1.c: 713: ptrb->address = address << 1;
 11531  13FE  0823               	movf	I2C1_MasterWriteTRBBuild@address+1,w
 11532  13FF  00A5               	movwf	??_I2C1_MasterWriteTRBBuild+1
 11533  1400  0822               	movf	I2C1_MasterWriteTRBBuild@address,w
 11534  1401  00A4               	movwf	??_I2C1_MasterWriteTRBBuild
 11535  1402  35A4               	lslf	??_I2C1_MasterWriteTRBBuild,f
 11536  1403  0DA5               	rlf	??_I2C1_MasterWriteTRBBuild+1,f
 11537  1404  0826               	movf	I2C1_MasterWriteTRBBuild@ptrb,w
 11538  1405  0086               	movwf	6
 11539  1406  3001               	movlw	1	; select bank2/3
 11540  1407  0087               	movwf	7
 11541  1408  0824               	movf	??_I2C1_MasterWriteTRBBuild,w
 11542  1409  3FC0               	movwi [0]fsr1
 11543  140A  0825               	movf	??_I2C1_MasterWriteTRBBuild+1,w
 11544  140B  3FC1               	movwi [1]fsr1
 11545                           
 11546                           ;i2c1.c: 714: ptrb->length = length;
 11547  140C  0821               	movf	I2C1_MasterWriteTRBBuild@length,w
 11548  140D  00A4               	movwf	??_I2C1_MasterWriteTRBBuild
 11549  140E  0826               	movf	I2C1_MasterWriteTRBBuild@ptrb,w
 11550  140F  3E02               	addlw	2
 11551  1410  0086               	movwf	6
 11552  1411  3001               	movlw	1	; select bank2/3
 11553  1412  0087               	movwf	7
 11554  1413  0824               	movf	??_I2C1_MasterWriteTRBBuild,w
 11555  1414  0081               	movwf	1
 11556                           
 11557                           ;i2c1.c: 715: ptrb->pbuffer = pdata;
 11558  1415  0826               	movf	I2C1_MasterWriteTRBBuild@ptrb,w
 11559  1416  3E03               	addlw	3
 11560  1417  0086               	movwf	6
 11561  1418  3001               	movlw	1	; select bank2/3
 11562  1419  0087               	movwf	7
 11563  141A  0820               	movf	I2C1_MasterWriteTRBBuild@pdata,w
 11564  141B  3FC0               	movwi [0]fsr1
 11565  141C  3000               	movlw	0
 11566  141D  3FC1               	movwi [1]fsr1
 11567  141E  0008               	return
 11568  141F                     __end_of_I2C1_MasterWriteTRBBuild:	
 11569                           
 11570                           	psect	text53
 11571  07A8                     __ptext53:	
 11572 ;; *************** function _I2C1_MasterTRBInsert *****************
 11573 ;; Defined at:
 11574 ;;		line 641 in file "mcc_generated_files/i2c1.c"
 11575 ;; Parameters:    Size  Location     Type
 11576 ;;  count           1    wreg     unsigned char 
 11577 ;;  ptrb_list       1    0[BANK0 ] PTR struct .
 11578 ;;		 -> I2C1_MasterRead@trBlock(5), I2C1_MasterWrite@trBlock(5), 
 11579 ;;  pflag           1    1[BANK0 ] PTR enum E2972
 11580 ;;		 -> i2c1_write_no_data@status(1), i2c1_read@status(1), i2c1_write@status(1), 
 11581 ;; Auto vars:     Size  Location     Type
 11582 ;;  count           1    3[BANK0 ] unsigned char 
 11583 ;; Return value:  Size  Location     Type
 11584 ;;                  1    wreg      void 
 11585 ;; Registers used:
 11586 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11587 ;; Tracked objects:
 11588 ;;		On entry : 0/0
 11589 ;;		On exit  : 0/0
 11590 ;;		Unchanged: 0/0
 11591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11592 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11593 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11594 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11595 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11596 ;;Total ram usage:        4 bytes
 11597 ;; Hardware stack levels used:    1
 11598 ;; Hardware stack levels required when called:    3
 11599 ;; This function calls:
 11600 ;;		Nothing
 11601 ;; This function is called by:
 11602 ;;		_I2C1_MasterWrite
 11603 ;;		_I2C1_MasterRead
 11604 ;; This function uses a non-reentrant model
 11605 ;;
 11606                           
 11607                           
 11608                           ;psect for function _I2C1_MasterTRBInsert
 11609  07A8                     _I2C1_MasterTRBInsert:	
 11610                           
 11611                           ;incstack = 0
 11612                           ; Regs used in _I2C1_MasterTRBInsert: [wreg+fsr1l+fsr1h+status,2+status,0]
 11613                           ;I2C1_MasterTRBInsert@count stored from wreg
 11614  07A8  0020               	movlb	0	; select bank0
 11615  07A9  00A3               	movwf	I2C1_MasterTRBInsert@count
 11616                           
 11617                           ;i2c1.c: 648: if (i2c1_object.trStatus.s.full != 1)
 11618  07AA  0021               	movlb	1	; select bank1
 11619  07AB  185B               	btfsc	(_i2c1_object^(0+128)+2),0
 11620  07AC  2FEA               	goto	l4727
 11621                           
 11622                           ;i2c1.c: 649: {
 11623                           ;i2c1.c: 650: *pflag = I2C1_MESSAGE_PENDING;
 11624  07AD  3002               	movlw	2
 11625  07AE  0020               	movlb	0	; select bank0
 11626  07AF  00A2               	movwf	??_I2C1_MasterTRBInsert
 11627  07B0  0821               	movf	I2C1_MasterTRBInsert@pflag,w
 11628  07B1  0086               	movwf	6
 11629  07B2  0187               	clrf	7
 11630  07B3  0822               	movf	??_I2C1_MasterTRBInsert,w
 11631  07B4  0081               	movwf	1
 11632                           
 11633                           ;i2c1.c: 652: i2c1_object.pTrTail->ptrb_list = ptrb_list;
 11634  07B5  0820               	movf	I2C1_MasterTRBInsert@ptrb_list,w
 11635  07B6  00A2               	movwf	??_I2C1_MasterTRBInsert
 11636  07B7  0021               	movlb	1	; select bank1
 11637  07B8  0A59               	incf	_i2c1_object^(0+128),w
 11638  07B9  0086               	movwf	6
 11639  07BA  3001               	movlw	1	; select bank2/3
 11640  07BB  0087               	movwf	7
 11641  07BC  0020               	movlb	0	; select bank0
 11642  07BD  0822               	movf	??_I2C1_MasterTRBInsert,w
 11643  07BE  0081               	movwf	1
 11644                           
 11645                           ;i2c1.c: 653: i2c1_object.pTrTail->count = count;
 11646  07BF  0823               	movf	I2C1_MasterTRBInsert@count,w
 11647  07C0  00A2               	movwf	??_I2C1_MasterTRBInsert
 11648  07C1  0021               	movlb	1	; select bank1
 11649  07C2  0859               	movf	_i2c1_object^(0+128),w
 11650  07C3  0086               	movwf	6
 11651  07C4  3001               	movlw	1	; select bank2/3
 11652  07C5  0087               	movwf	7
 11653  07C6  0020               	movlb	0	; select bank0
 11654  07C7  0822               	movf	??_I2C1_MasterTRBInsert,w
 11655  07C8  0081               	movwf	1
 11656                           
 11657                           ;i2c1.c: 654: i2c1_object.pTrTail->pTrFlag = pflag;
 11658  07C9  0821               	movf	I2C1_MasterTRBInsert@pflag,w
 11659  07CA  00A2               	movwf	??_I2C1_MasterTRBInsert
 11660  07CB  0021               	movlb	1	; select bank1
 11661  07CC  0859               	movf	_i2c1_object^(0+128),w
 11662  07CD  3E02               	addlw	2
 11663  07CE  0086               	movwf	6
 11664  07CF  3001               	movlw	1	; select bank2/3
 11665  07D0  0087               	movwf	7
 11666  07D1  0020               	movlb	0	; select bank0
 11667  07D2  0822               	movf	??_I2C1_MasterTRBInsert,w
 11668  07D3  0081               	movwf	1
 11669                           
 11670                           ;i2c1.c: 655: i2c1_object.pTrTail++;
 11671  07D4  3003               	movlw	3
 11672  07D5  00A2               	movwf	??_I2C1_MasterTRBInsert
 11673  07D6  0822               	movf	??_I2C1_MasterTRBInsert,w
 11674  07D7  0021               	movlb	1	; select bank1
 11675  07D8  07D9               	addwf	_i2c1_object^(0+128),f
 11676                           
 11677                           ;i2c1.c: 658: if (i2c1_object.pTrTail == (i2c1_tr_queue + 1))
 11678  07D9  0859               	movf	_i2c1_object^(0+128),w
 11679  07DA  3A58               	xorlw	(low ((_i2c1_tr_queue| (0+256)+3)))& (0+255)
 11680  07DB  1D03               	skipz
 11681  07DC  2FE3               	goto	l4723
 11682                           
 11683                           ;i2c1.c: 659: {
 11684                           ;i2c1.c: 661: i2c1_object.pTrTail = i2c1_tr_queue;
 11685  07DD  3055               	movlw	(low (_i2c1_tr_queue| (0+256)))& (0+255)
 11686  07DE  0020               	movlb	0	; select bank0
 11687  07DF  00A2               	movwf	??_I2C1_MasterTRBInsert
 11688  07E0  0822               	movf	??_I2C1_MasterTRBInsert,w
 11689  07E1  0021               	movlb	1	; select bank1
 11690  07E2  00D9               	movwf	_i2c1_object^(0+128)
 11691  07E3                     l4723:	
 11692                           
 11693                           ;i2c1.c: 662: }
 11694                           ;i2c1.c: 666: i2c1_object.trStatus.s.empty = 0;
 11695  07E3  10DB               	bcf	(_i2c1_object^(0+128)+2),1
 11696                           
 11697                           ;i2c1.c: 669: if (i2c1_object.pTrHead == i2c1_object.pTrTail)
 11698  07E4  085A               	movf	(low ((_i2c1_object| 0+1)))^(0+128),w
 11699  07E5  0659               	xorwf	_i2c1_object^(0+128),w
 11700  07E6  1D03               	skipz
 11701  07E7  2FF0               	goto	l4729
 11702                           
 11703                           ;i2c1.c: 670: {
 11704                           ;i2c1.c: 672: i2c1_object.trStatus.s.full = 1;
 11705  07E8  145B               	bsf	(_i2c1_object^(0+128)+2),0
 11706                           
 11707                           ;i2c1.c: 673: }
 11708                           ;i2c1.c: 675: }
 11709  07E9  2FF0               	goto	l4729
 11710  07EA                     l4727:	
 11711                           
 11712                           ;i2c1.c: 676: else
 11713                           ;i2c1.c: 677: {
 11714                           ;i2c1.c: 678: *pflag = I2C1_MESSAGE_FAIL;
 11715  07EA  0020               	movlb	0	; select bank0
 11716  07EB  0821               	movf	I2C1_MasterTRBInsert@pflag,w
 11717  07EC  0086               	movwf	6
 11718  07ED  0187               	clrf	7
 11719  07EE  0181               	clrf	1
 11720  07EF  0A81               	incf	1,f
 11721  07F0                     l4729:	
 11722                           
 11723                           ;i2c1.c: 679: }
 11724                           ;i2c1.c: 682: if (*pflag == I2C1_MESSAGE_PENDING)
 11725  07F0  0020               	movlb	0	; select bank0
 11726  07F1  0821               	movf	I2C1_MasterTRBInsert@pflag,w
 11727  07F2  0086               	movwf	6
 11728  07F3  0187               	clrf	7
 11729  07F4  3002               	movlw	2
 11730  07F5  0601               	xorwf	1,w
 11731  07F6  1D03               	btfss	3,2
 11732  07F7  0008               	return
 11733  07F8                     l4733:	
 11734                           ;i2c1.c: 683: {
 11735                           ;i2c1.c: 684: while(i2c1_state != S_MASTER_IDLE);
 11736                           
 11737  07F8  0021               	movlb	1	; select bank1
 11738  07F9  086B               	movf	_i2c1_state^(0+128),w
 11739  07FA  1D03               	btfss	3,2
 11740  07FB  2FF8               	goto	l4733
 11741                           
 11742                           ;i2c1.c: 685: {
 11743                           ;i2c1.c: 688: PIR1bits.SSP1IF = 1;
 11744  07FC  0020               	movlb	0	; select bank0
 11745  07FD  1591               	bsf	17,3	;volatile
 11746  07FE  0008               	return
 11747  07FF                     __end_of_I2C1_MasterTRBInsert:	
 11748                           
 11749                           	psect	text54
 11750  09AC                     __ptext54:	
 11751 ;; *************** function _atoi *****************
 11752 ;; Defined at:
 11753 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\atoi.c"
 11754 ;; Parameters:    Size  Location     Type
 11755 ;;  s               2    6[BANK0 ] PTR const unsigned char 
 11756 ;;		 -> buf(48), cmd_buf(192), 
 11757 ;; Auto vars:     Size  Location     Type
 11758 ;;  a               2   11[BANK0 ] int 
 11759 ;;  sign            1   10[BANK0 ] unsigned char 
 11760 ;; Return value:  Size  Location     Type
 11761 ;;                  2    6[BANK0 ] int 
 11762 ;; Registers used:
 11763 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11764 ;; Tracked objects:
 11765 ;;		On entry : 0/0
 11766 ;;		On exit  : 0/0
 11767 ;;		Unchanged: 0/0
 11768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11769 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11770 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11771 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11772 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11773 ;;Total ram usage:        7 bytes
 11774 ;; Hardware stack levels used:    1
 11775 ;; Hardware stack levels required when called:    4
 11776 ;; This function calls:
 11777 ;;		___wmul
 11778 ;;		_isdigit
 11779 ;; This function is called by:
 11780 ;;		_exec_remote_cmd
 11781 ;;		_command_handler
 11782 ;;		_PROTOCOL_Loop
 11783 ;; This function uses a non-reentrant model
 11784 ;;
 11785                           
 11786                           
 11787                           ;psect for function _atoi
 11788  09AC                     _atoi:	
 11789  09AC                     l5369:	
 11790                           ;incstack = 0
 11791                           ; Regs used in _atoi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11792                           
 11793  09AC  0020               	movlb	0	; select bank0
 11794  09AD  0826               	movf	atoi@s,w
 11795  09AE  0086               	movwf	6
 11796  09AF  0827               	movf	atoi@s+1,w
 11797  09B0  0087               	movwf	7
 11798  09B1  3020               	movlw	32
 11799  09B2  0601               	xorwf	1,w
 11800  09B3  1D03               	btfss	3,2
 11801  09B4  29BB               	goto	l5371
 11802  09B5                     l5367:	
 11803  09B5  3001               	movlw	1
 11804  09B6  0020               	movlb	0	; select bank0
 11805  09B7  07A6               	addwf	atoi@s,f
 11806  09B8  3000               	movlw	0
 11807  09B9  3DA7               	addwfc	atoi@s+1,f
 11808  09BA  29AC               	goto	l5369
 11809  09BB                     l5371:	
 11810  09BB  0826               	movf	atoi@s,w
 11811  09BC  0086               	movwf	6
 11812  09BD  0827               	movf	atoi@s+1,w
 11813  09BE  0087               	movwf	7
 11814  09BF  3009               	movlw	9
 11815  09C0  0601               	xorwf	1,w
 11816  09C1  1903               	btfsc	3,2
 11817  09C2  29B5               	goto	l5367
 11818  09C3  01AB               	clrf	atoi@a
 11819  09C4  01AC               	clrf	atoi@a+1
 11820  09C5  01AA               	clrf	atoi@sign
 11821  09C6  0826               	movf	atoi@s,w
 11822  09C7  0086               	movwf	6
 11823  09C8  0827               	movf	atoi@s+1,w
 11824  09C9  0087               	movwf	7
 11825  09CA  302D               	movlw	45
 11826  09CB  0601               	xorwf	1,w
 11827  09CC  1D03               	btfss	3,2
 11828  09CD  29D3               	goto	l5381
 11829  09CE  3001               	movlw	1
 11830  09CF  00A8               	movwf	??_atoi
 11831  09D0  0828               	movf	??_atoi,w
 11832  09D1  07AA               	addwf	atoi@sign,f
 11833  09D2  29DB               	goto	l5387
 11834  09D3                     l5381:	
 11835  09D3  0826               	movf	atoi@s,w
 11836  09D4  0086               	movwf	6
 11837  09D5  0827               	movf	atoi@s+1,w
 11838  09D6  0087               	movwf	7
 11839  09D7  302B               	movlw	43
 11840  09D8  0601               	xorwf	1,w
 11841  09D9  1D03               	btfss	3,2
 11842  09DA  29DF               	goto	l5389
 11843  09DB                     l5387:	
 11844  09DB  3001               	movlw	1
 11845  09DC  07A6               	addwf	atoi@s,f
 11846  09DD  3000               	movlw	0
 11847  09DE  3DA7               	addwfc	atoi@s+1,f
 11848  09DF                     l5389:	
 11849  09DF  0826               	movf	atoi@s,w
 11850  09E0  0086               	movwf	6
 11851  09E1  0827               	movf	atoi@s+1,w
 11852  09E2  0087               	movwf	7
 11853  09E3  0801               	movf	1,w
 11854  09E4  3192  2250  3189   	fcall	_isdigit
 11855  09E7  1C03               	btfss	3,0
 11856  09E8  2A08               	goto	l5391
 11857  09E9  0020               	movlb	0	; select bank0
 11858  09EA  082C               	movf	atoi@a+1,w
 11859  09EB  00A1               	movwf	___wmul@multiplier+1
 11860  09EC  082B               	movf	atoi@a,w
 11861  09ED  00A0               	movwf	___wmul@multiplier
 11862  09EE  300A               	movlw	10
 11863  09EF  00A2               	movwf	___wmul@multiplicand
 11864  09F0  3000               	movlw	0
 11865  09F1  00A3               	movwf	___wmul@multiplicand+1
 11866  09F2  3193  2362  3189   	fcall	___wmul
 11867  09F5  0020               	movlb	0	; select bank0
 11868  09F6  0826               	movf	atoi@s,w
 11869  09F7  0086               	movwf	6
 11870  09F8  0827               	movf	atoi@s+1,w
 11871  09F9  0087               	movwf	7
 11872  09FA  0801               	movf	1,w
 11873  09FB  0720               	addwf	?___wmul,w
 11874  09FC  00A8               	movwf	??_atoi
 11875  09FD  0821               	movf	?___wmul+1,w
 11876  09FE  1803               	skipnc
 11877  09FF  0A21               	incf	?___wmul+1,w
 11878  0A00  00A9               	movwf	??_atoi+1
 11879  0A01  0828               	movf	??_atoi,w
 11880  0A02  3ED0               	addlw	208
 11881  0A03  00AB               	movwf	atoi@a
 11882  0A04  30FF               	movlw	255
 11883  0A05  3D29               	addwfc	??_atoi+1,w
 11884  0A06  00AC               	movwf	atoi@a+1
 11885  0A07  29DB               	goto	l5387
 11886  0A08                     l5391:	
 11887  0A08  0020               	movlb	0	; select bank0
 11888  0A09  082A               	movf	atoi@sign,w
 11889  0A0A  1903               	btfsc	3,2
 11890  0A0B  2A18               	goto	l5397
 11891  0A0C  092B               	comf	atoi@a,w
 11892  0A0D  00A8               	movwf	??_atoi
 11893  0A0E  092C               	comf	atoi@a+1,w
 11894  0A0F  00A9               	movwf	??_atoi+1
 11895  0A10  0AA8               	incf	??_atoi,f
 11896  0A11  1903               	skipnz
 11897  0A12  0AA9               	incf	??_atoi+1,f
 11898  0A13  0828               	movf	??_atoi,w
 11899  0A14  00A6               	movwf	?_atoi
 11900  0A15  0829               	movf	??_atoi+1,w
 11901  0A16  00A7               	movwf	?_atoi+1
 11902  0A17  0008               	return
 11903  0A18                     l5397:	
 11904  0A18  082C               	movf	atoi@a+1,w
 11905  0A19  00A7               	movwf	?_atoi+1
 11906  0A1A  082B               	movf	atoi@a,w
 11907  0A1B  00A6               	movwf	?_atoi
 11908  0A1C  0008               	return
 11909  0A1D                     __end_of_atoi:	
 11910                           
 11911                           	psect	text55
 11912  1250                     __ptext55:	
 11913 ;; *************** function _isdigit *****************
 11914 ;; Defined at:
 11915 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
 11916 ;; Parameters:    Size  Location     Type
 11917 ;;  c               1    wreg     unsigned char 
 11918 ;; Auto vars:     Size  Location     Type
 11919 ;;  c               1    1[BANK0 ] unsigned char 
 11920 ;; Return value:  Size  Location     Type
 11921 ;;		None               void
 11922 ;; Registers used:
 11923 ;;		wreg, status,2, status,0
 11924 ;; Tracked objects:
 11925 ;;		On entry : 0/0
 11926 ;;		On exit  : 0/0
 11927 ;;		Unchanged: 0/0
 11928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11930 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11932 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11933 ;;Total ram usage:        2 bytes
 11934 ;; Hardware stack levels used:    1
 11935 ;; Hardware stack levels required when called:    3
 11936 ;; This function calls:
 11937 ;;		Nothing
 11938 ;; This function is called by:
 11939 ;;		_printf
 11940 ;;		_atoi
 11941 ;; This function uses a non-reentrant model
 11942 ;;
 11943                           
 11944                           
 11945                           ;psect for function _isdigit
 11946  1250                     _isdigit:	
 11947                           
 11948                           ;incstack = 0
 11949                           ; Regs used in _isdigit: [wreg+status,2+status,0]
 11950                           ;isdigit@c stored from wreg
 11951  1250  0020               	movlb	0	; select bank0
 11952  1251  00A1               	movwf	isdigit@c
 11953  1252  01A0               	clrf	_isdigit$1451
 11954  1253  303A               	movlw	58
 11955  1254  0221               	subwf	isdigit@c,w
 11956  1255  1803               	skipnc
 11957  1256  2A5D               	goto	l4747
 11958  1257  3030               	movlw	48
 11959  1258  0221               	subwf	isdigit@c,w
 11960  1259  1C03               	skipc
 11961  125A  2A5D               	goto	l4747
 11962  125B  01A0               	clrf	_isdigit$1451
 11963  125C  0AA0               	incf	_isdigit$1451,f
 11964  125D                     l4747:	
 11965  125D  0C20               	rrf	_isdigit$1451,w
 11966  125E  0008               	return
 11967  125F                     __end_of_isdigit:	
 11968                           
 11969                           	psect	text56
 11970  1362                     __ptext56:	
 11971 ;; *************** function ___wmul *****************
 11972 ;; Defined at:
 11973 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
 11974 ;; Parameters:    Size  Location     Type
 11975 ;;  multiplier      2    0[BANK0 ] unsigned int 
 11976 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 11977 ;; Auto vars:     Size  Location     Type
 11978 ;;  product         2    4[BANK0 ] unsigned int 
 11979 ;; Return value:  Size  Location     Type
 11980 ;;                  2    0[BANK0 ] unsigned int 
 11981 ;; Registers used:
 11982 ;;		wreg, status,2, status,0
 11983 ;; Tracked objects:
 11984 ;;		On entry : 0/0
 11985 ;;		On exit  : 0/0
 11986 ;;		Unchanged: 0/0
 11987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11988 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11989 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11990 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11991 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11992 ;;Total ram usage:        6 bytes
 11993 ;; Hardware stack levels used:    1
 11994 ;; Hardware stack levels required when called:    3
 11995 ;; This function calls:
 11996 ;;		Nothing
 11997 ;; This function is called by:
 11998 ;;		_exec_remote_cmd
 11999 ;;		_init
 12000 ;;		_put_cmd
 12001 ;;		_printf
 12002 ;;		_atoi
 12003 ;; This function uses a non-reentrant model
 12004 ;;
 12005                           
 12006                           
 12007                           ;psect for function ___wmul
 12008  1362                     ___wmul:	
 12009                           
 12010                           ;incstack = 0
 12011                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 12012  1362  0020               	movlb	0	; select bank0
 12013  1363  01A4               	clrf	___wmul@product
 12014  1364  01A5               	clrf	___wmul@product+1
 12015  1365                     l4753:	
 12016  1365  1C20               	btfss	___wmul@multiplier,0
 12017  1366  2B6B               	goto	l1106
 12018  1367  0822               	movf	___wmul@multiplicand,w
 12019  1368  07A4               	addwf	___wmul@product,f
 12020  1369  0823               	movf	___wmul@multiplicand+1,w
 12021  136A  3DA5               	addwfc	___wmul@product+1,f
 12022  136B                     l1106:	
 12023  136B  3001               	movlw	1
 12024  136C                     u5065:	
 12025  136C  35A2               	lslf	___wmul@multiplicand,f
 12026  136D  0DA3               	rlf	___wmul@multiplicand+1,f
 12027  136E  0B89               	decfsz	9,f
 12028  136F  2B6C               	goto	u5065
 12029  1370  3001               	movlw	1
 12030  1371                     u5075:	
 12031  1371  36A1               	lsrf	___wmul@multiplier+1,f
 12032  1372  0CA0               	rrf	___wmul@multiplier,f
 12033  1373  0B89               	decfsz	9,f
 12034  1374  2B71               	goto	u5075
 12035  1375  0820               	movf	___wmul@multiplier,w
 12036  1376  0421               	iorwf	___wmul@multiplier+1,w
 12037  1377  1D03               	btfss	3,2
 12038  1378  2B65               	goto	l4753
 12039  1379  0825               	movf	___wmul@product+1,w
 12040  137A  00A1               	movwf	?___wmul+1
 12041  137B  0824               	movf	___wmul@product,w
 12042  137C  00A0               	movwf	?___wmul
 12043  137D  0008               	return
 12044  137E                     __end_of___wmul:	
 12045                           
 12046                           	psect	text57
 12047  13D9                     __ptext57:	
 12048 ;; *************** function _DATAEE_WriteByte *****************
 12049 ;; Defined at:
 12050 ;;		line 180 in file "mcc_generated_files/memory.c"
 12051 ;; Parameters:    Size  Location     Type
 12052 ;;  bAdd            1    wreg     unsigned char 
 12053 ;;  bData           1    0[BANK0 ] unsigned char 
 12054 ;; Auto vars:     Size  Location     Type
 12055 ;;  bAdd            1    1[BANK0 ] unsigned char 
 12056 ;;  GIEBitValue     1    2[BANK0 ] unsigned char 
 12057 ;; Return value:  Size  Location     Type
 12058 ;;                  1    wreg      void 
 12059 ;; Registers used:
 12060 ;;		wreg, status,2, status,0
 12061 ;; Tracked objects:
 12062 ;;		On entry : 0/0
 12063 ;;		On exit  : 0/0
 12064 ;;		Unchanged: 0/0
 12065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12066 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12067 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12069 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12070 ;;Total ram usage:        3 bytes
 12071 ;; Hardware stack levels used:    1
 12072 ;; Hardware stack levels required when called:    3
 12073 ;; This function calls:
 12074 ;;		Nothing
 12075 ;; This function is called by:
 12076 ;;		_command_handler
 12077 ;;		_PROTOCOL_Write_Device_Address
 12078 ;;		_PROTOCOL_SAV
 12079 ;; This function uses a non-reentrant model
 12080 ;;
 12081                           
 12082                           
 12083                           ;psect for function _DATAEE_WriteByte
 12084  13D9                     _DATAEE_WriteByte:	
 12085                           
 12086                           ;incstack = 0
 12087                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
 12088                           ;DATAEE_WriteByte@bAdd stored from wreg
 12089  13D9  0020               	movlb	0	; select bank0
 12090  13DA  00A1               	movwf	DATAEE_WriteByte@bAdd
 12091                           
 12092                           ;memory.c: 182: uint8_t GIEBitValue = 0;
 12093  13DB  01A2               	clrf	DATAEE_WriteByte@GIEBitValue
 12094                           
 12095                           ;memory.c: 184: EEADRL = (bAdd & 0x0ff);
 12096  13DC  0821               	movf	DATAEE_WriteByte@bAdd,w
 12097  13DD  0023               	movlb	3	; select bank3
 12098  13DE  0091               	movwf	17	;volatile
 12099                           
 12100                           ;memory.c: 185: EEDATL = bData;
 12101  13DF  0020               	movlb	0	; select bank0
 12102  13E0  0820               	movf	DATAEE_WriteByte@bData,w
 12103  13E1  0023               	movlb	3	; select bank3
 12104  13E2  0093               	movwf	19	;volatile
 12105                           
 12106                           ;memory.c: 186: EECON1bits.EEPGD = 0;
 12107  13E3  1395               	bcf	21,7	;volsfr
 12108                           
 12109                           ;memory.c: 187: EECON1bits.CFGS = 0;
 12110  13E4  1315               	bcf	21,6	;volsfr
 12111                           
 12112                           ;memory.c: 188: EECON1bits.WREN = 1;
 12113  13E5  1515               	bsf	21,2	;volsfr
 12114                           
 12115                           ;memory.c: 190: GIEBitValue = INTCONbits.GIE;
 12116  13E6  3000               	movlw	0
 12117  13E7  1B8B               	btfsc	11,7	;volatile
 12118  13E8  3001               	movlw	1
 12119  13E9  0020               	movlb	0	; select bank0
 12120  13EA  00A2               	movwf	DATAEE_WriteByte@GIEBitValue
 12121                           
 12122                           ;memory.c: 191: INTCONbits.GIE = 0;
 12123  13EB  138B               	bcf	11,7	;volatile
 12124                           
 12125                           ;memory.c: 192: EECON2 = 0x55;
 12126  13EC  3055               	movlw	85
 12127  13ED  0023               	movlb	3	; select bank3
 12128  13EE  0096               	movwf	22	;volsfr
 12129                           
 12130                           ;memory.c: 193: EECON2 = 0xAA;
 12131  13EF  30AA               	movlw	170
 12132  13F0  0096               	movwf	22	;volsfr
 12133                           
 12134                           ;memory.c: 194: EECON1bits.WR = 1;
 12135  13F1  1495               	bsf	21,1	;volsfr
 12136  13F2                     l188:	
 12137                           ;memory.c: 197: {
 12138                           
 12139                           ;memory.c: 196: while (EECON1bits.WR)
 12140                           
 12141  13F2  1895               	btfsc	21,1	;volsfr
 12142  13F3  2BF2               	goto	l188
 12143                           
 12144                           ;memory.c: 198: }
 12145                           ;memory.c: 200: EECON1bits.WREN = 0;
 12146  13F4  1115               	bcf	21,2	;volsfr
 12147                           
 12148                           ;memory.c: 201: INTCONbits.GIE = GIEBitValue;
 12149  13F5  0020               	movlb	0	; select bank0
 12150  13F6  0C22               	rrf	DATAEE_WriteByte@GIEBitValue,w
 12151  13F7  1C03               	skipc
 12152  13F8  138B               	bcf	11,7	;volatile
 12153  13F9  1803               	skipnc
 12154  13FA  178B               	bsf	11,7	;volatile
 12155  13FB  0008               	return
 12156  13FC                     __end_of_DATAEE_WriteByte:	
 12157                           
 12158                           	psect	text58
 12159  13B9                     __ptext58:	
 12160 ;; *************** function _EUSART_Read *****************
 12161 ;; Defined at:
 12162 ;;		line 112 in file "mcc_generated_files/eusart.c"
 12163 ;; Parameters:    Size  Location     Type
 12164 ;;		None
 12165 ;; Auto vars:     Size  Location     Type
 12166 ;;  readValue       1    1[BANK0 ] unsigned char 
 12167 ;; Return value:  Size  Location     Type
 12168 ;;                  1    wreg      unsigned char 
 12169 ;; Registers used:
 12170 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12171 ;; Tracked objects:
 12172 ;;		On entry : 0/0
 12173 ;;		On exit  : 0/0
 12174 ;;		Unchanged: 0/0
 12175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12177 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12178 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12179 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12180 ;;Total ram usage:        2 bytes
 12181 ;; Hardware stack levels used:    1
 12182 ;; Hardware stack levels required when called:    3
 12183 ;; This function calls:
 12184 ;;		Nothing
 12185 ;; This function is called by:
 12186 ;;		_PROTOCOL_Loop
 12187 ;;		_getch
 12188 ;; This function uses a non-reentrant model
 12189 ;;
 12190                           
 12191                           
 12192                           ;psect for function _EUSART_Read
 12193  13B9                     _EUSART_Read:	
 12194                           
 12195                           ;eusart.c: 114: uint8_t readValue = 0;
 12196                           
 12197                           ;incstack = 0
 12198                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
 12199  13B9  0020               	movlb	0	; select bank0
 12200  13BA  01A1               	clrf	EUSART_Read@readValue
 12201  13BB                     l5667:	
 12202                           ;eusart.c: 117: {
 12203                           
 12204                           ;eusart.c: 116: while(0 == eusartRxCount)
 12205                           
 12206  13BB  0021               	movlb	1	; select bank1
 12207  13BC  0867               	movf	_eusartRxCount^(0+128),w	;volatile
 12208  13BD  1903               	btfsc	3,2
 12209  13BE  2BBB               	goto	l5667
 12210                           
 12211                           ;eusart.c: 118: }
 12212                           ;eusart.c: 120: readValue = eusartRxBuffer[eusartRxTail++];
 12213  13BF  0870               	movf	_eusartRxTail,w
 12214  13C0  3E20               	addlw	(low (_eusartRxBuffer| (0+768)))& (0+255)
 12215  13C1  0086               	movwf	6
 12216  13C2  3003               	movlw	3	; select bank6/7
 12217  13C3  0087               	movwf	7
 12218  13C4  0801               	movf	1,w
 12219  13C5  0020               	movlb	0	; select bank0
 12220  13C6  00A0               	movwf	??_EUSART_Read
 12221  13C7  0820               	movf	??_EUSART_Read,w
 12222  13C8  00A1               	movwf	EUSART_Read@readValue
 12223  13C9  3001               	movlw	1
 12224  13CA  00A0               	movwf	??_EUSART_Read
 12225  13CB  0820               	movf	??_EUSART_Read,w
 12226  13CC  07F0               	addwf	_eusartRxTail,f	;volatile
 12227                           
 12228                           ;eusart.c: 121: if(sizeof(eusartRxBuffer) <= eusartRxTail)
 12229  13CD  3040               	movlw	64
 12230  13CE  0270               	subwf	_eusartRxTail,w	;volatile
 12231  13CF  1803               	btfsc	3,0
 12232                           
 12233                           ;eusart.c: 122: {
 12234                           ;eusart.c: 123: eusartRxTail = 0;
 12235  13D0  01F0               	clrf	_eusartRxTail	;volatile
 12236                           
 12237                           ;eusart.c: 124: }
 12238                           ;eusart.c: 125: PIE1bits.RCIE = 0;
 12239  13D1  0021               	movlb	1	; select bank1
 12240  13D2  1291               	bcf	17,5	;volatile
 12241                           
 12242                           ;eusart.c: 126: eusartRxCount--;
 12243  13D3  3001               	movlw	1
 12244  13D4  02E7               	subwf	_eusartRxCount^(0+128),f	;volatile
 12245                           
 12246                           ;eusart.c: 127: PIE1bits.RCIE = 1;
 12247  13D5  1691               	bsf	17,5	;volatile
 12248                           
 12249                           ;eusart.c: 129: return readValue;
 12250  13D6  0020               	movlb	0	; select bank0
 12251  13D7  0821               	movf	EUSART_Read@readValue,w
 12252  13D8  0008               	return
 12253  13D9                     __end_of_EUSART_Read:	
 12254                           
 12255                           	psect	text59
 12256  08AA                     __ptext59:	
 12257 ;; *************** function _PROTOCOL_Initialize *****************
 12258 ;; Defined at:
 12259 ;;		line 59 in file "protocol.c"
 12260 ;; Parameters:    Size  Location     Type
 12261 ;;  device_id       2    1[BANK0 ] PTR const unsigned char 
 12262 ;;		 -> STR_34(17), 
 12263 ;;  start_handle    2    3[BANK0 ] PTR void 
 12264 ;;		 -> start_handler(1), 
 12265 ;;  stop_handler    2    5[BANK0 ] PTR void 
 12266 ;;		 -> stop_handler(1), 
 12267 ;;  set_handler     1    7[BANK0 ] PTR void 
 12268 ;;		 -> NULL(0), 
 12269 ;;  inv_handler     2    8[BANK0 ] PTR void 
 12270 ;;		 -> inv_handler(1), 
 12271 ;;  scaler          1   10[BANK0 ] unsigned char 
 12272 ;; Auto vars:     Size  Location     Type
 12273 ;;		None
 12274 ;; Return value:  Size  Location     Type
 12275 ;;                  1    wreg      void 
 12276 ;; Registers used:
 12277 ;;		wreg, status,2, status,0, pclath, cstack
 12278 ;; Tracked objects:
 12279 ;;		On entry : 0/0
 12280 ;;		On exit  : 0/0
 12281 ;;		Unchanged: 0/0
 12282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12283 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12284 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12285 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12286 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12287 ;;Total ram usage:       12 bytes
 12288 ;; Hardware stack levels used:    1
 12289 ;; Hardware stack levels required when called:    4
 12290 ;; This function calls:
 12291 ;;		Absolute function
 12292 ;;		_DATAEE_ReadByte
 12293 ;;		_stop_handler
 12294 ;; This function is called by:
 12295 ;;		_main
 12296 ;; This function uses a non-reentrant model
 12297 ;;
 12298                           
 12299                           
 12300                           ;psect for function _PROTOCOL_Initialize
 12301  08AA                     _PROTOCOL_Initialize:	
 12302                           
 12303                           ;protocol.c: 60: device_id_ = device_id;
 12304                           
 12305                           ;incstack = 0
 12306                           ; Regs used in _PROTOCOL_Initialize: [wreg+status,2+status,0+pclath+cstack]
 12307  08AA  0020               	movlb	0	; select bank0
 12308  08AB  0822               	movf	PROTOCOL_Initialize@device_id+1,w
 12309  08AC  0022               	movlb	2	; select bank2
 12310  08AD  00A7               	movwf	(_device_id_+1)^(0+256)
 12311  08AE  0020               	movlb	0	; select bank0
 12312  08AF  0821               	movf	PROTOCOL_Initialize@device_id,w
 12313  08B0  0022               	movlb	2	; select bank2
 12314  08B1  00A6               	movwf	_device_id_^(0+256)
 12315                           
 12316                           ;protocol.c: 61: PROTOCOL_Start_Handler = start_handler;
 12317  08B2  0020               	movlb	0	; select bank0
 12318  08B3  0824               	movf	PROTOCOL_Initialize@start_handler+1,w
 12319  08B4  0022               	movlb	2	; select bank2
 12320  08B5  00B3               	movwf	(_PROTOCOL_Start_Handler+1)^(0+256)
 12321  08B6  0020               	movlb	0	; select bank0
 12322  08B7  0823               	movf	PROTOCOL_Initialize@start_handler,w
 12323  08B8  0022               	movlb	2	; select bank2
 12324  08B9  00B2               	movwf	_PROTOCOL_Start_Handler^(0+256)
 12325                           
 12326                           ;protocol.c: 62: PROTOCOL_Stop_Handler = stop_handler;
 12327  08BA  0020               	movlb	0	; select bank0
 12328  08BB  0826               	movf	PROTOCOL_Initialize@stop_handler+1,w
 12329  08BC  0022               	movlb	2	; select bank2
 12330  08BD  00B1               	movwf	(_PROTOCOL_Stop_Handler+1)^(0+256)
 12331  08BE  0020               	movlb	0	; select bank0
 12332  08BF  0825               	movf	PROTOCOL_Initialize@stop_handler,w
 12333  08C0  0022               	movlb	2	; select bank2
 12334  08C1  00B0               	movwf	_PROTOCOL_Stop_Handler^(0+256)
 12335                           
 12336                           ;protocol.c: 63: PROTOCOL_Set_Handler = set_handler;
 12337  08C2  0020               	movlb	0	; select bank0
 12338  08C3  0827               	movf	PROTOCOL_Initialize@set_handler,w
 12339  08C4  00AB               	movwf	??_PROTOCOL_Initialize
 12340  08C5  3000               	movlw	0
 12341  08C6  00AC               	movwf	??_PROTOCOL_Initialize+1
 12342  08C7  082B               	movf	??_PROTOCOL_Initialize,w
 12343  08C8  0022               	movlb	2	; select bank2
 12344  08C9  00AE               	movwf	_PROTOCOL_Set_Handler^(0+256)
 12345  08CA  0020               	movlb	0	; select bank0
 12346  08CB  082C               	movf	??_PROTOCOL_Initialize+1,w
 12347  08CC  0022               	movlb	2	; select bank2
 12348  08CD  00AF               	movwf	(_PROTOCOL_Set_Handler+1)^(0+256)
 12349                           
 12350                           ;protocol.c: 65: if (PROTOCOL_Stop_Handler) PROTOCOL_Stop_Handler();
 12351  08CE  0830               	movf	_PROTOCOL_Stop_Handler^(0+256),w
 12352  08CF  0431               	iorwf	(_PROTOCOL_Stop_Handler+1)^(0+256),w
 12353  08D0  1903               	btfsc	3,2
 12354  08D1  28D7               	goto	l6009
 12355  08D2  0831               	movf	(_PROTOCOL_Stop_Handler+1)^(0+256),w
 12356  08D3  008A               	movwf	10
 12357  08D4  0830               	movf	_PROTOCOL_Stop_Handler^(0+256),w
 12358  08D5  000A               	callw
 12359  08D6  3188               	pagesel	$
 12360  08D7                     l6009:	
 12361                           
 12362                           ;protocol.c: 66: value = DATAEE_ReadByte(1);
 12363  08D7  3001               	movlw	1
 12364  08D8  3192  2228  3188   	fcall	_DATAEE_ReadByte
 12365  08DB  0020               	movlb	0	; select bank0
 12366  08DC  00AB               	movwf	??_PROTOCOL_Initialize
 12367  08DD  082B               	movf	??_PROTOCOL_Initialize,w
 12368  08DE  0021               	movlb	1	; select bank1
 12369  08DF  00E0               	movwf	_value^(0+128)
 12370                           
 12371                           ;protocol.c: 68: slave_address = DATAEE_ReadByte(0);
 12372  08E0  3000               	movlw	0
 12373  08E1  3192  2228         	fcall	_DATAEE_ReadByte
 12374  08E3  0020               	movlb	0	; select bank0
 12375  08E4  00AB               	movwf	??_PROTOCOL_Initialize
 12376  08E5  082B               	movf	??_PROTOCOL_Initialize,w
 12377  08E6  0022               	movlb	2	; select bank2
 12378  08E7  00BF               	movwf	_slave_address^(0+256)
 12379                           
 12380                           ;protocol.c: 71: readbuf.status = COMPLETE;
 12381  08E8  3003               	movlw	3
 12382  08E9  0020               	movlb	0	; select bank0
 12383  08EA  00AB               	movwf	??_PROTOCOL_Initialize
 12384  08EB  082B               	movf	??_PROTOCOL_Initialize,w
 12385  08EC  0022               	movlb	2	; select bank2
 12386  08ED  00C6               	movwf	(_readbuf^(0+256)+4)
 12387                           
 12388                           ;protocol.c: 72: PROTOCOL_Inv_Handler = inv_handler;
 12389  08EE  0020               	movlb	0	; select bank0
 12390  08EF  0829               	movf	PROTOCOL_Initialize@inv_handler+1,w
 12391  08F0  0022               	movlb	2	; select bank2
 12392  08F1  00A9               	movwf	(_PROTOCOL_Inv_Handler+1)^(0+256)
 12393  08F2  0020               	movlb	0	; select bank0
 12394  08F3  0828               	movf	PROTOCOL_Initialize@inv_handler,w
 12395  08F4  0022               	movlb	2	; select bank2
 12396  08F5  00A8               	movwf	_PROTOCOL_Inv_Handler^(0+256)
 12397                           
 12398                           ;protocol.c: 73: tmr_scaler = scaler;
 12399  08F6  0020               	movlb	0	; select bank0
 12400  08F7  082A               	movf	PROTOCOL_Initialize@scaler,w
 12401  08F8  00AB               	movwf	??_PROTOCOL_Initialize
 12402  08F9  082B               	movf	??_PROTOCOL_Initialize,w
 12403  08FA  0022               	movlb	2	; select bank2
 12404  08FB  00DE               	movwf	_tmr_scaler^(0+256)
 12405  08FC  0008               	return
 12406  08FD                     __end_of_PROTOCOL_Initialize:	
 12407                           
 12408                           	psect	text60
 12409  11DA                     __ptext60:	
 12410 ;; *************** function _stop_handler *****************
 12411 ;; Defined at:
 12412 ;;		line 59 in file "main.c"
 12413 ;; Parameters:    Size  Location     Type
 12414 ;;		None
 12415 ;; Auto vars:     Size  Location     Type
 12416 ;;		None
 12417 ;; Return value:  Size  Location     Type
 12418 ;;                  1    wreg      void 
 12419 ;; Registers used:
 12420 ;;		status,2
 12421 ;; Tracked objects:
 12422 ;;		On entry : 0/0
 12423 ;;		On exit  : 0/0
 12424 ;;		Unchanged: 0/0
 12425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12427 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12429 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12430 ;;Total ram usage:        0 bytes
 12431 ;; Hardware stack levels used:    1
 12432 ;; Hardware stack levels required when called:    3
 12433 ;; This function calls:
 12434 ;;		Nothing
 12435 ;; This function is called by:
 12436 ;;		_main
 12437 ;;		_PROTOCOL_STP
 12438 ;;		_PROTOCOL_Initialize
 12439 ;; This function uses a non-reentrant model
 12440 ;;
 12441                           
 12442                           
 12443                           ;psect for function _stop_handler
 12444  11DA                     _stop_handler:	
 12445                           
 12446                           ;main.c: 60: running = 0;
 12447                           
 12448                           ;incstack = 0
 12449                           ; Regs used in _stop_handler: [status,2]
 12450  11DA  0021               	movlb	1	; select bank1
 12451  11DB  01E5               	clrf	_running^(0+128)
 12452  11DC  0008               	return
 12453  11DD                     __end_of_stop_handler:	
 12454                           
 12455                           	psect	text61
 12456  1228                     __ptext61:	
 12457 ;; *************** function _DATAEE_ReadByte *****************
 12458 ;; Defined at:
 12459 ;;		line 204 in file "mcc_generated_files/memory.c"
 12460 ;; Parameters:    Size  Location     Type
 12461 ;;  bAdd            1    wreg     unsigned char 
 12462 ;; Auto vars:     Size  Location     Type
 12463 ;;  bAdd            1    0[BANK0 ] unsigned char 
 12464 ;; Return value:  Size  Location     Type
 12465 ;;                  1    wreg      unsigned char 
 12466 ;; Registers used:
 12467 ;;		wreg
 12468 ;; Tracked objects:
 12469 ;;		On entry : 0/0
 12470 ;;		On exit  : 0/0
 12471 ;;		Unchanged: 0/0
 12472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12474 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12476 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12477 ;;Total ram usage:        1 bytes
 12478 ;; Hardware stack levels used:    1
 12479 ;; Hardware stack levels required when called:    3
 12480 ;; This function calls:
 12481 ;;		Nothing
 12482 ;; This function is called by:
 12483 ;;		_init
 12484 ;;		_PROTOCOL_Initialize
 12485 ;; This function uses a non-reentrant model
 12486 ;;
 12487                           
 12488                           
 12489                           ;psect for function _DATAEE_ReadByte
 12490  1228                     _DATAEE_ReadByte:	
 12491                           
 12492                           ;incstack = 0
 12493                           ; Regs used in _DATAEE_ReadByte: [wreg]
 12494                           ;DATAEE_ReadByte@bAdd stored from wreg
 12495  1228  0020               	movlb	0	; select bank0
 12496  1229  00A0               	movwf	DATAEE_ReadByte@bAdd
 12497                           
 12498                           ;memory.c: 206: EEADRL = (bAdd & 0x0ff);
 12499  122A  0820               	movf	DATAEE_ReadByte@bAdd,w
 12500  122B  0023               	movlb	3	; select bank3
 12501  122C  0091               	movwf	17	;volatile
 12502                           
 12503                           ;memory.c: 207: EECON1bits.CFGS = 0;
 12504  122D  1315               	bcf	21,6	;volsfr
 12505                           
 12506                           ;memory.c: 208: EECON1bits.EEPGD = 0;
 12507  122E  1395               	bcf	21,7	;volsfr
 12508                           
 12509                           ;memory.c: 209: EECON1bits.RD = 1;
 12510  122F  1415               	bsf	21,0	;volsfr
 12511                           
 12512                           ;memory.c: 210: __nop();
 12513  1230  0000               	nop
 12514                           
 12515                           ;memory.c: 211: __nop();
 12516  1231  0000               	nop
 12517                           
 12518                           ;memory.c: 213: return (EEDATL);
 12519  1232  0023               	movlb	3	; select bank3
 12520  1233  0813               	movf	19,w	;volatile
 12521  1234  0008               	return
 12522  1235                     __end_of_DATAEE_ReadByte:	
 12523                           
 12524                           	psect	intentry
 12525  0004                     __pintentry:	
 12526 ;; *************** function _INTERRUPT_InterruptManager *****************
 12527 ;; Defined at:
 12528 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
 12529 ;; Parameters:    Size  Location     Type
 12530 ;;		None
 12531 ;; Auto vars:     Size  Location     Type
 12532 ;;		None
 12533 ;; Return value:  Size  Location     Type
 12534 ;;                  1    wreg      void 
 12535 ;; Registers used:
 12536 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12537 ;; Tracked objects:
 12538 ;;		On entry : 0/0
 12539 ;;		On exit  : 0/0
 12540 ;;		Unchanged: 0/0
 12541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12543 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12544 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12545 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12546 ;;Total ram usage:        1 bytes
 12547 ;; Hardware stack levels used:    1
 12548 ;; Hardware stack levels required when called:    2
 12549 ;; This function calls:
 12550 ;;		_EUSART_Receive_ISR
 12551 ;;		_EUSART_Transmit_ISR
 12552 ;;		_I2C1_BusCollisionISR
 12553 ;;		_I2C1_ISR
 12554 ;; This function is called by:
 12555 ;;		Interrupt level 1
 12556 ;; This function uses a non-reentrant model
 12557 ;;
 12558                           
 12559  0004                     _INTERRUPT_InterruptManager:	
 12560                           
 12561                           ;incstack = 0
 12562  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 12563                           
 12564                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12565  0005  3180               	pagesel	$
 12566  0006  0020               	movlb	0	; select bank0
 12567  0007  087F               	movf	127,w
 12568  0008  00FD               	movwf	??_INTERRUPT_InterruptManager
 12569                           
 12570                           ;interrupt_manager.c: 54: if(INTCONbits.PEIE == 1 && PIE1bits.TXIE == 1 && PIR1bits.TXIF
      +                           == 1)
 12571  0009  1F0B               	btfss	11,6	;volatile
 12572  000A  2815               	goto	i1l321
 12573  000B  0021               	movlb	1	; select bank1
 12574  000C  1E11               	btfss	17,4	;volatile
 12575  000D  2815               	goto	i1l321
 12576  000E  0020               	movlb	0	; select bank0
 12577  000F  1E11               	btfss	17,4	;volatile
 12578  0010  2815               	goto	i1l321
 12579                           
 12580                           ;interrupt_manager.c: 55: {
 12581                           ;interrupt_manager.c: 56: EUSART_Transmit_ISR();
 12582  0011  3193  2346  3180   	fcall	_EUSART_Transmit_ISR
 12583                           
 12584                           ;interrupt_manager.c: 57: }
 12585  0014  2837               	goto	i1l329
 12586  0015                     i1l321:	
 12587                           
 12588                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits
      +                          .RCIF == 1)
 12589  0015  1F0B               	btfss	11,6	;volatile
 12590  0016  2821               	goto	i1l323
 12591  0017  0021               	movlb	1	; select bank1
 12592  0018  1E91               	btfss	17,5	;volatile
 12593  0019  2821               	goto	i1l323
 12594  001A  0020               	movlb	0	; select bank0
 12595  001B  1E91               	btfss	17,5	;volatile
 12596  001C  2821               	goto	i1l323
 12597                           
 12598                           ;interrupt_manager.c: 59: {
 12599                           ;interrupt_manager.c: 60: EUSART_Receive_ISR();
 12600  001D  3193  232A  3180   	fcall	_EUSART_Receive_ISR
 12601                           
 12602                           ;interrupt_manager.c: 61: }
 12603  0020  2837               	goto	i1l329
 12604  0021                     i1l323:	
 12605                           
 12606                           ;interrupt_manager.c: 62: else if(INTCONbits.PEIE == 1 && PIE2bits.BCL1IE == 1 && PIR2bi
      +                          ts.BCL1IF == 1)
 12607  0021  1F0B               	btfss	11,6	;volatile
 12608  0022  282D               	goto	i1l325
 12609  0023  0021               	movlb	1	; select bank1
 12610  0024  1D92               	btfss	18,3	;volatile
 12611  0025  282D               	goto	i1l325
 12612  0026  0020               	movlb	0	; select bank0
 12613  0027  1D92               	btfss	18,3	;volatile
 12614  0028  282D               	goto	i1l325
 12615                           
 12616                           ;interrupt_manager.c: 63: {
 12617                           ;interrupt_manager.c: 64: I2C1_BusCollisionISR();
 12618  0029  3187  27FF  3180   	fcall	_I2C1_BusCollisionISR
 12619                           
 12620                           ;interrupt_manager.c: 65: }
 12621  002C  2837               	goto	i1l329
 12622  002D                     i1l325:	
 12623                           
 12624                           ;interrupt_manager.c: 66: else if(INTCONbits.PEIE == 1 && PIE1bits.SSP1IE == 1 && PIR1bi
      +                          ts.SSP1IF == 1)
 12625  002D  1F0B               	btfss	11,6	;volatile
 12626  002E  2837               	goto	i1l329
 12627  002F  0021               	movlb	1	; select bank1
 12628  0030  1D91               	btfss	17,3	;volatile
 12629  0031  2837               	goto	i1l329
 12630  0032  0020               	movlb	0	; select bank0
 12631  0033  1D91               	btfss	17,3	;volatile
 12632  0034  2837               	goto	i1l329
 12633                           
 12634                           ;interrupt_manager.c: 67: {
 12635                           ;interrupt_manager.c: 68: I2C1_ISR();
 12636  0035  318B  233E         	fcall	_I2C1_ISR
 12637  0037                     i1l329:	
 12638                           ;interrupt_manager.c: 70: else
 12639                           ;interrupt_manager.c: 71: {
 12640                           
 12641                           ;interrupt_manager.c: 69: }
 12642                           
 12643  0037  087D               	movf	??_INTERRUPT_InterruptManager,w
 12644  0038  0020               	movlb	0	; select bank0
 12645  0039  00FF               	movwf	127
 12646  003A  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 12647  003B  0009               	retfie
 12648  003C                     __end_of_INTERRUPT_InterruptManager:	
 12649                           
 12650                           	psect	text63
 12651  0B3E                     __ptext63:	
 12652 ;; *************** function _I2C1_ISR *****************
 12653 ;; Defined at:
 12654 ;;		line 233 in file "mcc_generated_files/i2c1.c"
 12655 ;; Parameters:    Size  Location     Type
 12656 ;;		None
 12657 ;; Auto vars:     Size  Location     Type
 12658 ;;		None
 12659 ;; Return value:  Size  Location     Type
 12660 ;;                  1    wreg      void 
 12661 ;; Registers used:
 12662 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12663 ;; Tracked objects:
 12664 ;;		On entry : 0/0
 12665 ;;		On exit  : 0/0
 12666 ;;		Unchanged: 0/0
 12667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12670 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12671 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12672 ;;Total ram usage:        4 bytes
 12673 ;; Hardware stack levels used:    1
 12674 ;; Hardware stack levels required when called:    1
 12675 ;; This function calls:
 12676 ;;		_I2C1_FunctionComplete
 12677 ;;		_I2C1_Stop
 12678 ;; This function is called by:
 12679 ;;		_INTERRUPT_InterruptManager
 12680 ;; This function uses a non-reentrant model
 12681 ;;
 12682                           
 12683                           
 12684                           ;psect for function _I2C1_ISR
 12685  0B3E                     _I2C1_ISR:	
 12686                           
 12687                           ;i2c1.c: 236: static uint8_t *pi2c_buf_ptr;
 12688                           ;i2c1.c: 237: static uint16_t i2c_address = 0;
 12689                           ;i2c1.c: 238: static uint8_t i2c_bytes_left = 0;
 12690                           ;i2c1.c: 239: static uint8_t i2c_10bit_address_restart = 0;
 12691                           ;i2c1.c: 241: PIR1bits.SSP1IF = 0;
 12692                           
 12693                           ;incstack = 0
 12694                           ; Regs used in _I2C1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12695  0B3E  0020               	movlb	0	; select bank0
 12696  0B3F  1191               	bcf	17,3	;volatile
 12697                           
 12698                           ;i2c1.c: 245: if(SSP1CON1bits.WCOL)
 12699  0B40  0024               	movlb	4	; select bank4
 12700  0B41  1F95               	btfss	21,7	;volatile
 12701  0B42  2C88               	goto	i1l5931
 12702                           
 12703                           ;i2c1.c: 246: {
 12704                           ;i2c1.c: 248: SSP1CON1bits.WCOL = 0;
 12705  0B43  1395               	bcf	21,7	;volatile
 12706                           
 12707                           ;i2c1.c: 249: i2c1_state = S_MASTER_IDLE;
 12708  0B44  0021               	movlb	1	; select bank1
 12709  0B45  01EB               	clrf	_i2c1_state^(0+128)
 12710                           
 12711                           ;i2c1.c: 250: *(p_i2c1_current->pTrFlag) = I2C1_MESSAGE_FAIL;
 12712  0B46  0875               	movf	_p_i2c1_current,w
 12713  0B47  3E02               	addlw	2
 12714  0B48  0086               	movwf	6
 12715  0B49  3001               	movlw	1	; select bank2/3
 12716  0B4A  0087               	movwf	7
 12717  0B4B  0801               	movf	1,w
 12718  0B4C  0086               	movwf	6
 12719  0B4D  0187               	clrf	7
 12720  0B4E  0181               	clrf	1
 12721  0B4F  0A81               	incf	1,f
 12722                           
 12723                           ;i2c1.c: 253: p_i2c1_current = (0);
 12724  0B50  01F5               	clrf	_p_i2c1_current
 12725                           
 12726                           ;i2c1.c: 255: return;
 12727  0B51  0008               	return
 12728  0B52                     i1l60:	
 12729                           ;i2c1.c: 260: {
 12730                           ;i2c1.c: 261: case S_MASTER_IDLE:
 12731                           
 12732                           ;i2c1.c: 256: }
 12733                           ;i2c1.c: 259: switch(i2c1_state)
 12734                           
 12735                           
 12736                           ;i2c1.c: 263: if(i2c1_object.trStatus.s.empty != 1)
 12737  0B52  18DB               	btfsc	(_i2c1_object^(0+128)+2),1
 12738  0B53  0008               	return
 12739                           
 12740                           ;i2c1.c: 264: {
 12741                           ;i2c1.c: 266: p_i2c1_current = i2c1_object.pTrHead;
 12742  0B54  085A               	movf	(low ((_i2c1_object| 0+1)))^(0+128),w
 12743  0B55  00F9               	movwf	??_I2C1_ISR
 12744  0B56  0879               	movf	??_I2C1_ISR,w
 12745  0B57  00F5               	movwf	_p_i2c1_current
 12746                           
 12747                           ;i2c1.c: 267: i2c1_trb_count = i2c1_object.pTrHead->count;
 12748  0B58  085A               	movf	(low ((_i2c1_object| 0+1)))^(0+128),w
 12749  0B59  0086               	movwf	6
 12750  0B5A  3001               	movlw	1	; select bank2/3
 12751  0B5B  0087               	movwf	7
 12752  0B5C  0801               	movf	1,w
 12753  0B5D  00F9               	movwf	??_I2C1_ISR
 12754  0B5E  0879               	movf	??_I2C1_ISR,w
 12755  0B5F  00EA               	movwf	_i2c1_trb_count^(0+128)
 12756                           
 12757                           ;i2c1.c: 268: p_i2c1_trb_current = i2c1_object.pTrHead->ptrb_list;
 12758  0B60  085A               	movf	(low ((_i2c1_object| 0+1)))^(0+128),w
 12759  0B61  0086               	movwf	6
 12760  0B62  3001               	movlw	1	; select bank2/3
 12761  0B63  0087               	movwf	7
 12762  0B64  3001               	movlw	1	; select bank2/3
 12763  0B65  3F41               	moviw [1]fsr1
 12764  0B66  00F6               	movwf	_p_i2c1_trb_current
 12765                           
 12766                           ;i2c1.c: 270: i2c1_object.pTrHead++;
 12767  0B67  3003               	movlw	3
 12768  0B68  00F9               	movwf	??_I2C1_ISR
 12769  0B69  0879               	movf	??_I2C1_ISR,w
 12770  0B6A  07DA               	addwf	(low ((_i2c1_object| 0+1)))^(0+128),f
 12771                           
 12772                           ;i2c1.c: 273: if(i2c1_object.pTrHead == (i2c1_tr_queue + 1))
 12773  0B6B  085A               	movf	(low ((_i2c1_object| 0+1)))^(0+128),w
 12774  0B6C  3A58               	xorlw	(low ((_i2c1_tr_queue| (0+256)+3)))& (0+255)
 12775  0B6D  1D03               	skipz
 12776  0B6E  2B73               	goto	i1l5821
 12777                           
 12778                           ;i2c1.c: 274: {
 12779                           ;i2c1.c: 276: i2c1_object.pTrHead = i2c1_tr_queue;
 12780  0B6F  3055               	movlw	(low (_i2c1_tr_queue| (0+256)))& (0+255)
 12781  0B70  00F9               	movwf	??_I2C1_ISR
 12782  0B71  0879               	movf	??_I2C1_ISR,w
 12783  0B72  00DA               	movwf	(low ((_i2c1_object| 0+1)))^(0+128)
 12784  0B73                     i1l5821:	
 12785                           
 12786                           ;i2c1.c: 277: }
 12787                           ;i2c1.c: 281: i2c1_object.trStatus.s.full = 0;
 12788  0B73  105B               	bcf	(_i2c1_object^(0+128)+2),0
 12789                           
 12790                           ;i2c1.c: 284: if(i2c1_object.pTrHead == i2c1_object.pTrTail)
 12791  0B74  085A               	movf	(low ((_i2c1_object| 0+1)))^(0+128),w
 12792  0B75  0659               	xorwf	_i2c1_object^(0+128),w
 12793  0B76  1903               	btfsc	3,2
 12794                           
 12795                           ;i2c1.c: 285: {
 12796                           ;i2c1.c: 287: i2c1_object.trStatus.s.empty = 1;
 12797  0B77  14DB               	bsf	(_i2c1_object^(0+128)+2),1
 12798                           
 12799                           ;i2c1.c: 288: }
 12800                           ;i2c1.c: 291: SSP1CON2bits.SEN = 1;
 12801  0B78  0024               	movlb	4	; select bank4
 12802  0B79  1416               	bsf	22,0	;volatile
 12803                           
 12804                           ;i2c1.c: 294: i2c1_state = S_MASTER_SEND_ADDR;
 12805  0B7A  3002               	movlw	2
 12806  0B7B  00F9               	movwf	??_I2C1_ISR
 12807  0B7C  0879               	movf	??_I2C1_ISR,w
 12808  0B7D  0021               	movlb	1	; select bank1
 12809  0B7E  00EB               	movwf	_i2c1_state^(0+128)
 12810                           
 12811                           ;i2c1.c: 295: }
 12812                           ;i2c1.c: 297: break;
 12813  0B7F  0008               	return
 12814  0B80                     i1l65:	
 12815                           ;i2c1.c: 299: case S_MASTER_RESTART:
 12816                           
 12817                           
 12818                           ;i2c1.c: 304: SSP1CON2bits.RSEN = 1;
 12819  0B80  0024               	movlb	4	; select bank4
 12820  0B81  1496               	bsf	22,1	;volatile
 12821                           
 12822                           ;i2c1.c: 307: i2c1_state = S_MASTER_SEND_ADDR;
 12823  0B82  3002               	movlw	2
 12824  0B83  00F9               	movwf	??_I2C1_ISR
 12825  0B84  0879               	movf	??_I2C1_ISR,w
 12826  0B85  0021               	movlb	1	; select bank1
 12827  0B86  00EB               	movwf	_i2c1_state^(0+128)
 12828                           
 12829                           ;i2c1.c: 309: break;
 12830  0B87  0008               	return
 12831  0B88                     i1l66:	
 12832                           ;i2c1.c: 311: case S_MASTER_SEND_ADDR_10BIT_LSB:
 12833                           
 12834                           
 12835                           ;i2c1.c: 313: if(SSP1CON2bits.ACKSTAT)
 12836  0B88  0024               	movlb	4	; select bank4
 12837  0B89  1F16               	btfss	22,6	;volatile
 12838  0B8A  2B94               	goto	i1l5833
 12839                           
 12840                           ;i2c1.c: 314: {
 12841                           ;i2c1.c: 315: i2c1_object.i2cErrors++;
 12842  0B8B  3001               	movlw	1
 12843  0B8C  00F9               	movwf	??_I2C1_ISR
 12844  0B8D  0879               	movf	??_I2C1_ISR,w
 12845  0B8E  0021               	movlb	1	; select bank1
 12846  0B8F  07DD               	addwf	(_i2c1_object^(0+128)+4),f
 12847                           
 12848                           ;i2c1.c: 316: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
 12849  0B90  3004               	movlw	4
 12850  0B91  3192  22DB         	fcall	_I2C1_Stop
 12851                           
 12852                           ;i2c1.c: 317: }
 12853  0B93  0008               	return
 12854  0B94                     i1l5833:	
 12855                           
 12856                           ;i2c1.c: 318: else
 12857                           ;i2c1.c: 319: {
 12858                           ;i2c1.c: 321: SSP1BUF = (i2c_address >> 1) & 0x00FF;
 12859  0B94  0020               	movlb	0	; select bank0
 12860  0B95  086E               	movf	I2C1_ISR@i2c_address+1,w
 12861  0B96  00FA               	movwf	??_I2C1_ISR+1
 12862  0B97  086D               	movf	I2C1_ISR@i2c_address,w
 12863  0B98  00F9               	movwf	??_I2C1_ISR
 12864  0B99  36FA               	lsrf	??_I2C1_ISR+1,f
 12865  0B9A  0CF9               	rrf	??_I2C1_ISR,f
 12866  0B9B  0879               	movf	??_I2C1_ISR,w
 12867  0B9C  0024               	movlb	4	; select bank4
 12868  0B9D  0091               	movwf	17	;volatile
 12869                           
 12870                           ;i2c1.c: 324: if(i2c_address & 0x01)
 12871  0B9E  0020               	movlb	0	; select bank0
 12872  0B9F  1C6D               	btfss	I2C1_ISR@i2c_address,0
 12873  0BA0  2BA7               	goto	i1l5839
 12874                           
 12875                           ;i2c1.c: 325: {
 12876                           ;i2c1.c: 328: i2c1_state = S_MASTER_10BIT_RESTART;
 12877  0BA1  300B               	movlw	11
 12878  0BA2  00F9               	movwf	??_I2C1_ISR
 12879  0BA3  0879               	movf	??_I2C1_ISR,w
 12880  0BA4  0021               	movlb	1	; select bank1
 12881  0BA5  00EB               	movwf	_i2c1_state^(0+128)
 12882                           
 12883                           ;i2c1.c: 329: }
 12884  0BA6  0008               	return
 12885  0BA7                     i1l5839:	
 12886                           
 12887                           ;i2c1.c: 330: else
 12888                           ;i2c1.c: 331: {
 12889                           ;i2c1.c: 333: i2c1_state = S_MASTER_SEND_DATA;
 12890  0BA7  3003               	movlw	3
 12891  0BA8  00F9               	movwf	??_I2C1_ISR
 12892  0BA9  0879               	movf	??_I2C1_ISR,w
 12893  0BAA  0021               	movlb	1	; select bank1
 12894  0BAB  00EB               	movwf	_i2c1_state^(0+128)
 12895                           
 12896                           ;i2c1.c: 334: }
 12897                           ;i2c1.c: 335: }
 12898                           ;i2c1.c: 337: break;
 12899  0BAC  0008               	return
 12900  0BAD                     i1l71:	
 12901                           ;i2c1.c: 339: case S_MASTER_10BIT_RESTART:
 12902                           
 12903                           
 12904                           ;i2c1.c: 341: if(SSP1CON2bits.ACKSTAT)
 12905  0BAD  0024               	movlb	4	; select bank4
 12906  0BAE  1F16               	btfss	22,6	;volatile
 12907  0BAF  2BB9               	goto	i1l72
 12908                           
 12909                           ;i2c1.c: 342: {
 12910                           ;i2c1.c: 343: i2c1_object.i2cErrors++;
 12911  0BB0  3001               	movlw	1
 12912  0BB1  00F9               	movwf	??_I2C1_ISR
 12913  0BB2  0879               	movf	??_I2C1_ISR,w
 12914  0BB3  0021               	movlb	1	; select bank1
 12915  0BB4  07DD               	addwf	(_i2c1_object^(0+128)+4),f
 12916                           
 12917                           ;i2c1.c: 344: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
 12918  0BB5  3004               	movlw	4
 12919  0BB6  3192  22DB         	fcall	_I2C1_Stop
 12920                           
 12921                           ;i2c1.c: 345: }
 12922  0BB8  0008               	return
 12923  0BB9                     i1l72:	
 12924                           
 12925                           ;i2c1.c: 346: else
 12926                           ;i2c1.c: 347: {
 12927                           ;i2c1.c: 350: SSP1CON2bits.RSEN = 1;
 12928  0BB9  1496               	bsf	22,1	;volatile
 12929                           
 12930                           ;i2c1.c: 354: i2c_address = 0x00F0 | ((i2c_address >> 8) & 0x0006);
 12931  0BBA  0020               	movlb	0	; select bank0
 12932  0BBB  086E               	movf	I2C1_ISR@i2c_address+1,w
 12933  0BBC  00FA               	movwf	??_I2C1_ISR+1
 12934  0BBD  086D               	movf	I2C1_ISR@i2c_address,w
 12935  0BBE  00F9               	movwf	??_I2C1_ISR
 12936  0BBF  087A               	movf	??_I2C1_ISR+1,w
 12937  0BC0  00F9               	movwf	??_I2C1_ISR
 12938  0BC1  01FA               	clrf	??_I2C1_ISR+1
 12939  0BC2  3006               	movlw	6
 12940  0BC3  0579               	andwf	??_I2C1_ISR,w
 12941  0BC4  00FB               	movwf	??_I2C1_ISR+2
 12942  0BC5  3000               	movlw	0
 12943  0BC6  057A               	andwf	??_I2C1_ISR+1,w
 12944  0BC7  00FC               	movwf	??_I2C1_ISR+3
 12945  0BC8  30F0               	movlw	240
 12946  0BC9  047B               	iorwf	??_I2C1_ISR+2,w
 12947  0BCA  00ED               	movwf	I2C1_ISR@i2c_address
 12948  0BCB  3000               	movlw	0
 12949  0BCC  047C               	iorwf	??_I2C1_ISR+3,w
 12950  0BCD  00EE               	movwf	I2C1_ISR@i2c_address+1
 12951                           
 12952                           ;i2c1.c: 357: i2c_address |= 0x0001;
 12953  0BCE  146D               	bsf	I2C1_ISR@i2c_address,0
 12954                           
 12955                           ;i2c1.c: 360: i2c_10bit_address_restart = 1;
 12956  0BCF  0021               	movlb	1	; select bank1
 12957  0BD0  01E8               	clrf	I2C1_ISR@i2c_10bit_address_restart^(0+128)
 12958  0BD1  0AE8               	incf	I2C1_ISR@i2c_10bit_address_restart^(0+128),f
 12959                           
 12960                           ;i2c1.c: 363: i2c1_state = S_MASTER_SEND_ADDR;
 12961  0BD2  3002               	movlw	2
 12962  0BD3  00F9               	movwf	??_I2C1_ISR
 12963  0BD4  0879               	movf	??_I2C1_ISR,w
 12964  0BD5  00EB               	movwf	_i2c1_state^(0+128)
 12965                           
 12966                           ;i2c1.c: 364: }
 12967                           ;i2c1.c: 366: break;
 12968  0BD6  0008               	return
 12969  0BD7                     i1l5853:	
 12970                           ;i2c1.c: 368: case S_MASTER_SEND_ADDR:
 12971                           
 12972                           
 12973                           ;i2c1.c: 381: if(i2c_10bit_address_restart != 1)
 12974  0BD7  0368               	decf	I2C1_ISR@i2c_10bit_address_restart^(0+128),w
 12975  0BD8  1903               	btfsc	3,2
 12976  0BD9  2BF5               	goto	i1l5871
 12977                           
 12978                           ;i2c1.c: 382: {
 12979                           ;i2c1.c: 384: i2c_address = p_i2c1_trb_current->address;
 12980  0BDA  0876               	movf	_p_i2c1_trb_current,w
 12981  0BDB  0086               	movwf	6
 12982  0BDC  3001               	movlw	1	; select bank2/3
 12983  0BDD  0087               	movwf	7
 12984  0BDE  3F40               	moviw [0]fsr1
 12985  0BDF  0020               	movlb	0	; select bank0
 12986  0BE0  00ED               	movwf	I2C1_ISR@i2c_address
 12987  0BE1  3F41               	moviw [1]fsr1
 12988  0BE2  00EE               	movwf	I2C1_ISR@i2c_address+1
 12989                           
 12990                           ;i2c1.c: 385: pi2c_buf_ptr = p_i2c1_trb_current->pbuffer;
 12991  0BE3  0876               	movf	_p_i2c1_trb_current,w
 12992  0BE4  3E03               	addlw	3
 12993  0BE5  0086               	movwf	6
 12994  0BE6  3001               	movlw	1	; select bank2/3
 12995  0BE7  0087               	movwf	7
 12996  0BE8  3F40               	moviw [0]fsr1
 12997  0BE9  0022               	movlb	2	; select bank2
 12998  0BEA  00B4               	movwf	I2C1_ISR@pi2c_buf_ptr^(0+256)
 12999  0BEB  3F41               	moviw [1]fsr1
 13000  0BEC  00B5               	movwf	(I2C1_ISR@pi2c_buf_ptr+1)^(0+256)
 13001                           
 13002                           ;i2c1.c: 386: i2c_bytes_left = p_i2c1_trb_current->length;
 13003  0BED  0876               	movf	_p_i2c1_trb_current,w
 13004  0BEE  0086               	movwf	6
 13005  0BEF  3001               	movlw	1	; select bank2/3
 13006  0BF0  0087               	movwf	7
 13007  0BF1  3001               	movlw	1	; select bank2/3
 13008  0BF2  3F42               	moviw [2]fsr1
 13009  0BF3  0021               	movlb	1	; select bank1
 13010  0BF4  00E9               	movwf	I2C1_ISR@i2c_bytes_left^(0+128)
 13011  0BF5                     i1l5871:	
 13012                           ;i2c1.c: 407: }
 13013                           ;i2c1.c: 408: }
 13014                           
 13015                           ;i2c1.c: 406: i2c_10bit_address_restart = 0;
 13016                           
 13017                           ;i2c1.c: 404: i2c1_state = S_MASTER_ACK_ADDR;
 13018                           
 13019                           ;i2c1.c: 400: else
 13020                           ;i2c1.c: 401: {
 13021                           ;i2c1.c: 403: SSP1BUF = i2c_address;
 13022                           
 13023                           ;i2c1.c: 399: }
 13024                           
 13025                           ;i2c1.c: 398: i2c1_state = S_MASTER_SEND_ADDR_10BIT_LSB;
 13026                           
 13027                           ;i2c1.c: 393: {
 13028                           ;i2c1.c: 397: SSP1BUF = 0xF0 | ((i2c_address >> 8) & 0x0006);
 13029                           
 13030                           ;i2c1.c: 391: {
 13031                           ;i2c1.c: 392: if (0 == i2c_10bit_address_restart)
 13032                           
 13033                           ;i2c1.c: 387: }
 13034                           ;i2c1.c: 390: if(!1 && (0x0 != i2c_address))
 13035                           
 13036                           
 13037                           ;i2c1.c: 409: else
 13038                           ;i2c1.c: 410: {
 13039                           ;i2c1.c: 412: SSP1BUF = i2c_address;
 13040  0BF5  0020               	movlb	0	; select bank0
 13041  0BF6  086D               	movf	I2C1_ISR@i2c_address,w
 13042  0BF7  0024               	movlb	4	; select bank4
 13043  0BF8  0091               	movwf	17	;volatile
 13044                           
 13045                           ;i2c1.c: 413: if(i2c_address & 0x01)
 13046  0BF9  0020               	movlb	0	; select bank0
 13047  0BFA  1C6D               	btfss	I2C1_ISR@i2c_address,0
 13048  0BFB  2C02               	goto	i1l5877
 13049                           
 13050                           ;i2c1.c: 414: {
 13051                           ;i2c1.c: 416: i2c1_state = S_MASTER_ACK_ADDR;
 13052  0BFC  3005               	movlw	5
 13053  0BFD  00F9               	movwf	??_I2C1_ISR
 13054  0BFE  0879               	movf	??_I2C1_ISR,w
 13055  0BFF  0021               	movlb	1	; select bank1
 13056  0C00  00EB               	movwf	_i2c1_state^(0+128)
 13057                           
 13058                           ;i2c1.c: 417: }
 13059  0C01  0008               	return
 13060  0C02                     i1l5877:	
 13061                           
 13062                           ;i2c1.c: 418: else
 13063                           ;i2c1.c: 419: {
 13064                           ;i2c1.c: 421: i2c1_state = S_MASTER_SEND_DATA;
 13065  0C02  3003               	movlw	3
 13066  0C03  00F9               	movwf	??_I2C1_ISR
 13067  0C04  0879               	movf	??_I2C1_ISR,w
 13068  0C05  0021               	movlb	1	; select bank1
 13069  0C06  00EB               	movwf	_i2c1_state^(0+128)
 13070                           
 13071                           ;i2c1.c: 422: }
 13072                           ;i2c1.c: 423: }
 13073                           ;i2c1.c: 424: break;
 13074  0C07  0008               	return
 13075  0C08                     i1l82:	
 13076                           ;i2c1.c: 426: case S_MASTER_SEND_DATA:
 13077                           
 13078                           
 13079                           ;i2c1.c: 429: if(SSP1CON2bits.ACKSTAT)
 13080  0C08  0024               	movlb	4	; select bank4
 13081  0C09  1F16               	btfss	22,6	;volatile
 13082  0C0A  2C16               	goto	i1l5885
 13083                           
 13084                           ;i2c1.c: 430: {
 13085                           ;i2c1.c: 432: i2c1_object.i2cErrors++;
 13086  0C0B  3001               	movlw	1
 13087  0C0C  00F9               	movwf	??_I2C1_ISR
 13088  0C0D  0879               	movf	??_I2C1_ISR,w
 13089  0C0E  0021               	movlb	1	; select bank1
 13090  0C0F  07DD               	addwf	(_i2c1_object^(0+128)+4),f
 13091                           
 13092                           ;i2c1.c: 435: SSP1CON2bits.ACKSTAT = 0;
 13093  0C10  0024               	movlb	4	; select bank4
 13094  0C11  1316               	bcf	22,6	;volatile
 13095                           
 13096                           ;i2c1.c: 438: I2C1_Stop(I2C1_DATA_NO_ACK);
 13097  0C12  3005               	movlw	5
 13098  0C13  3192  22DB         	fcall	_I2C1_Stop
 13099                           
 13100                           ;i2c1.c: 440: }
 13101  0C15  0008               	return
 13102  0C16                     i1l5885:	
 13103                           
 13104                           ;i2c1.c: 441: else
 13105                           ;i2c1.c: 442: {
 13106                           ;i2c1.c: 444: if(i2c_bytes_left-- == 0U)
 13107  0C16  3001               	movlw	1
 13108  0C17  0021               	movlb	1	; select bank1
 13109  0C18  02E9               	subwf	I2C1_ISR@i2c_bytes_left^(0+128),f
 13110  0C19  0A69               	incf	I2C1_ISR@i2c_bytes_left^(0+128),w
 13111  0C1A  1D03               	btfss	3,2
 13112  0C1B  2C30               	goto	i1l5893
 13113                           
 13114                           ;i2c1.c: 445: {
 13115                           ;i2c1.c: 449: p_i2c1_trb_current++;
 13116  0C1C  3005               	movlw	5
 13117  0C1D  00F9               	movwf	??_I2C1_ISR
 13118  0C1E  0879               	movf	??_I2C1_ISR,w
 13119  0C1F  07F6               	addwf	_p_i2c1_trb_current,f
 13120                           
 13121                           ;i2c1.c: 452: if(--i2c1_trb_count == 0)
 13122  0C20  3001               	movlw	1
 13123  0C21  02EA               	subwf	_i2c1_trb_count^(0+128),f
 13124  0C22  1D03               	btfss	3,2
 13125  0C23  2C28               	goto	i1l86
 13126                           
 13127                           ;i2c1.c: 453: {
 13128                           ;i2c1.c: 454: I2C1_Stop(I2C1_MESSAGE_COMPLETE);
 13129  0C24  3000               	movlw	0
 13130  0C25  3192  22DB         	fcall	_I2C1_Stop
 13131                           
 13132                           ;i2c1.c: 455: }
 13133  0C27  0008               	return
 13134  0C28                     i1l86:	
 13135                           
 13136                           ;i2c1.c: 456: else
 13137                           ;i2c1.c: 457: {
 13138                           ;i2c1.c: 464: SSP1CON2bits.RSEN = 1;
 13139  0C28  0024               	movlb	4	; select bank4
 13140  0C29  1496               	bsf	22,1	;volatile
 13141                           
 13142                           ;i2c1.c: 467: i2c1_state = S_MASTER_SEND_ADDR;
 13143  0C2A  3002               	movlw	2
 13144  0C2B  00F9               	movwf	??_I2C1_ISR
 13145  0C2C  0879               	movf	??_I2C1_ISR,w
 13146  0C2D  0021               	movlb	1	; select bank1
 13147  0C2E  00EB               	movwf	_i2c1_state^(0+128)
 13148                           
 13149                           ;i2c1.c: 469: }
 13150                           ;i2c1.c: 470: }
 13151  0C2F  0008               	return
 13152  0C30                     i1l5893:	
 13153                           
 13154                           ;i2c1.c: 471: else
 13155                           ;i2c1.c: 472: {
 13156                           ;i2c1.c: 474: SSP1BUF = *pi2c_buf_ptr++;
 13157  0C30  0022               	movlb	2	; select bank2
 13158  0C31  0834               	movf	I2C1_ISR@pi2c_buf_ptr^(0+256),w
 13159  0C32  0086               	movwf	6
 13160  0C33  0835               	movf	(I2C1_ISR@pi2c_buf_ptr+1)^(0+256),w
 13161  0C34  0087               	movwf	7
 13162  0C35  0801               	movf	1,w
 13163  0C36  0024               	movlb	4	; select bank4
 13164  0C37  0091               	movwf	17	;volatile
 13165  0C38  3001               	movlw	1
 13166  0C39  0022               	movlb	2	; select bank2
 13167  0C3A  07B4               	addwf	I2C1_ISR@pi2c_buf_ptr^(0+256),f
 13168  0C3B  3000               	movlw	0
 13169  0C3C  3DB5               	addwfc	(I2C1_ISR@pi2c_buf_ptr+1)^(0+256),f
 13170                           
 13171                           ;i2c1.c: 475: }
 13172                           ;i2c1.c: 476: }
 13173                           ;i2c1.c: 477: break;
 13174  0C3D  0008               	return
 13175  0C3E                     i1l89:	
 13176                           ;i2c1.c: 479: case S_MASTER_ACK_ADDR:
 13177                           
 13178                           
 13179                           ;i2c1.c: 482: if(SSP1CON2bits.ACKSTAT)
 13180  0C3E  0024               	movlb	4	; select bank4
 13181  0C3F  1F16               	btfss	22,6	;volatile
 13182  0C40  2C4C               	goto	i1l90
 13183                           
 13184                           ;i2c1.c: 483: {
 13185                           ;i2c1.c: 486: i2c1_object.i2cErrors++;
 13186  0C41  3001               	movlw	1
 13187  0C42  00F9               	movwf	??_I2C1_ISR
 13188  0C43  0879               	movf	??_I2C1_ISR,w
 13189  0C44  0021               	movlb	1	; select bank1
 13190  0C45  07DD               	addwf	(_i2c1_object^(0+128)+4),f
 13191                           
 13192                           ;i2c1.c: 489: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
 13193  0C46  3004               	movlw	4
 13194  0C47  3192  22DB         	fcall	_I2C1_Stop
 13195                           
 13196                           ;i2c1.c: 492: SSP1CON2bits.ACKSTAT = 0;
 13197  0C49  0024               	movlb	4	; select bank4
 13198  0C4A  1316               	bcf	22,6	;volatile
 13199                           
 13200                           ;i2c1.c: 493: }
 13201  0C4B  0008               	return
 13202  0C4C                     i1l90:	
 13203                           
 13204                           ;i2c1.c: 494: else
 13205                           ;i2c1.c: 495: {
 13206                           ;i2c1.c: 496: SSP1CON2bits.RCEN = 1;
 13207  0C4C  1596               	bsf	22,3	;volatile
 13208                           
 13209                           ;i2c1.c: 497: i2c1_state = S_MASTER_ACK_RCV_DATA;
 13210  0C4D  3008               	movlw	8
 13211  0C4E  00F9               	movwf	??_I2C1_ISR
 13212  0C4F  0879               	movf	??_I2C1_ISR,w
 13213  0C50  0021               	movlb	1	; select bank1
 13214  0C51  00EB               	movwf	_i2c1_state^(0+128)
 13215                           
 13216                           ;i2c1.c: 498: }
 13217                           ;i2c1.c: 499: break;
 13218  0C52  0008               	return
 13219  0C53                     i1l5905:	
 13220                           ;i2c1.c: 501: case S_MASTER_RCV_DATA:
 13221                           
 13222                           
 13223                           ;i2c1.c: 506: i2c1_state = S_MASTER_ACK_RCV_DATA;
 13224  0C53  3008               	movlw	8
 13225  0C54  00F9               	movwf	??_I2C1_ISR
 13226  0C55  0879               	movf	??_I2C1_ISR,w
 13227  0C56  00EB               	movwf	_i2c1_state^(0+128)
 13228                           
 13229                           ;i2c1.c: 509: SSP1CON2bits.RCEN = 1;
 13230  0C57  0024               	movlb	4	; select bank4
 13231  0C58  1596               	bsf	22,3	;volatile
 13232                           
 13233                           ;i2c1.c: 511: break;
 13234  0C59  0008               	return
 13235  0C5A                     i1l5909:	
 13236                           ;i2c1.c: 513: case S_MASTER_ACK_RCV_DATA:
 13237                           
 13238                           
 13239                           ;i2c1.c: 516: *pi2c_buf_ptr++ = SSP1BUF;
 13240  0C5A  0022               	movlb	2	; select bank2
 13241  0C5B  0834               	movf	I2C1_ISR@pi2c_buf_ptr^(0+256),w
 13242  0C5C  0086               	movwf	6
 13243  0C5D  0835               	movf	(I2C1_ISR@pi2c_buf_ptr+1)^(0+256),w
 13244  0C5E  0087               	movwf	7
 13245  0C5F  0024               	movlb	4	; select bank4
 13246  0C60  0811               	movf	17,w	;volatile
 13247  0C61  0081               	movwf	1
 13248  0C62  3001               	movlw	1
 13249  0C63  0022               	movlb	2	; select bank2
 13250  0C64  07B4               	addwf	I2C1_ISR@pi2c_buf_ptr^(0+256),f
 13251  0C65  3000               	movlw	0
 13252  0C66  3DB5               	addwfc	(I2C1_ISR@pi2c_buf_ptr+1)^(0+256),f
 13253                           
 13254                           ;i2c1.c: 519: if(--i2c_bytes_left)
 13255  0C67  3001               	movlw	1
 13256  0C68  0021               	movlb	1	; select bank1
 13257  0C69  02E9               	subwf	I2C1_ISR@i2c_bytes_left^(0+128),f
 13258  0C6A  1903               	btfsc	3,2
 13259  0C6B  2C74               	goto	i1l94
 13260                           
 13261                           ;i2c1.c: 520: {
 13262                           ;i2c1.c: 526: SSP1CON2bits.ACKDT = 0;
 13263  0C6C  0024               	movlb	4	; select bank4
 13264  0C6D  1296               	bcf	22,5	;volatile
 13265                           
 13266                           ;i2c1.c: 529: i2c1_state = S_MASTER_RCV_DATA;
 13267  0C6E  3006               	movlw	6
 13268  0C6F  00F9               	movwf	??_I2C1_ISR
 13269  0C70  0879               	movf	??_I2C1_ISR,w
 13270  0C71  0021               	movlb	1	; select bank1
 13271  0C72  00EB               	movwf	_i2c1_state^(0+128)
 13272                           
 13273                           ;i2c1.c: 530: }
 13274  0C73  2C78               	goto	i1l5921
 13275  0C74                     i1l94:	
 13276                           
 13277                           ;i2c1.c: 531: else
 13278                           ;i2c1.c: 532: {
 13279                           ;i2c1.c: 536: SSP1CON2bits.ACKDT = 1;
 13280  0C74  0024               	movlb	4	; select bank4
 13281  0C75  1696               	bsf	22,5	;volatile
 13282                           
 13283                           ;i2c1.c: 538: I2C1_FunctionComplete();
 13284  0C76  3192  227E         	fcall	_I2C1_FunctionComplete
 13285  0C78                     i1l5921:	
 13286                           
 13287                           ;i2c1.c: 539: }
 13288                           ;i2c1.c: 542: SSP1CON2bits.ACKEN = 1;
 13289  0C78  0024               	movlb	4	; select bank4
 13290  0C79  1616               	bsf	22,4	;volatile
 13291                           
 13292                           ;i2c1.c: 543: break;
 13293  0C7A  0008               	return
 13294  0C7B                     i1l5923:	
 13295                           ;i2c1.c: 545: case S_MASTER_RCV_STOP:
 13296                           
 13297                           
 13298                           ;i2c1.c: 546: case S_MASTER_SEND_STOP:
 13299                           ;i2c1.c: 549: I2C1_Stop(I2C1_MESSAGE_COMPLETE);
 13300  0C7B  3000               	movlw	0
 13301  0C7C  3192  22DB         	fcall	_I2C1_Stop
 13302                           
 13303                           ;i2c1.c: 550: break;
 13304  0C7E  0008               	return
 13305  0C7F                     i1l5925:	
 13306                           ;i2c1.c: 552: default:
 13307                           
 13308                           
 13309                           ;i2c1.c: 556: i2c1_object.i2cErrors++;
 13310  0C7F  3001               	movlw	1
 13311  0C80  00F9               	movwf	??_I2C1_ISR
 13312  0C81  0879               	movf	??_I2C1_ISR,w
 13313  0C82  0021               	movlb	1	; select bank1
 13314  0C83  07DD               	addwf	(_i2c1_object^(0+128)+4),f
 13315                           
 13316                           ;i2c1.c: 557: I2C1_Stop(I2C1_LOST_STATE);
 13317  0C84  3006               	movlw	6
 13318  0C85  3192  22DB         	fcall	_I2C1_Stop
 13319                           
 13320                           ;i2c1.c: 560: }
 13321                           
 13322                           ;i2c1.c: 558: break;
 13323  0C87  0008               	return
 13324  0C88                     i1l5931:	
 13325  0C88  0021               	movlb	1	; select bank1
 13326  0C89  086B               	movf	_i2c1_state^(0+128),w
 13327                           
 13328                           ; Switch size 1, requested type "space"
 13329                           ; Number of cases is 11, Range of values is 0 to 11
 13330                           ; switch strategies available:
 13331                           ; Name         Instructions Cycles
 13332                           ; direct_byte           30     6 (fixed)
 13333                           ; simple_byte           34    18 (average)
 13334                           ; jumptable            260     6 (fixed)
 13335                           ;	Chosen strategy is direct_byte
 13336  0C8A  0084               	movwf	4
 13337  0C8B  300C               	movlw	12
 13338  0C8C  0204               	subwf	4,w
 13339  0C8D  1803               	skipnc
 13340  0C8E  2C7F               	goto	i1l5925
 13341  0C8F  3191               	movlp	high i1S6177
 13342  0C90  3504               	lslf	4,w
 13343  0C91  3EB4               	addlw	low i1S6177
 13344  0C92  0082               	movwf	2
 13345  0C93  0008               	return
 13346  0C94                     __end_of_I2C1_ISR:	
 13347                           
 13348                           	psect	swtext1
 13349  11B4                     __pswtext1:	
 13350  11B4                     i1S6177:	
 13351  11B4  318B  2B52         	ljmp	i1l60
 13352  11B6  318B  2B80         	ljmp	i1l65
 13353  11B8  318B  2BD7         	ljmp	i1l5853
 13354  11BA  318C  2C08         	ljmp	i1l82
 13355  11BC  318C  2C7B         	ljmp	i1l5923
 13356  11BE  318C  2C3E         	ljmp	i1l89
 13357  11C0  318C  2C53         	ljmp	i1l5905
 13358  11C2  318C  2C7B         	ljmp	i1l5923
 13359  11C4  318C  2C5A         	ljmp	i1l5909
 13360  11C6  318C  2C7F         	ljmp	i1l5925
 13361  11C8  318B  2B88         	ljmp	i1l66
 13362  11CA  318B  2BAD         	ljmp	i1l71
 13363                           
 13364                           	psect	text64
 13365  12DB                     __ptext64:	
 13366 ;; *************** function _I2C1_Stop *****************
 13367 ;; Defined at:
 13368 ;;		line 581 in file "mcc_generated_files/i2c1.c"
 13369 ;; Parameters:    Size  Location     Type
 13370 ;;  completion_c    1    wreg     enum E2972
 13371 ;; Auto vars:     Size  Location     Type
 13372 ;;  completion_c    1    1[COMMON] enum E2972
 13373 ;; Return value:  Size  Location     Type
 13374 ;;                  1    wreg      void 
 13375 ;; Registers used:
 13376 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13377 ;; Tracked objects:
 13378 ;;		On entry : 0/0
 13379 ;;		On exit  : 0/0
 13380 ;;		Unchanged: 0/0
 13381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13382 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13383 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13384 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13385 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13386 ;;Total ram usage:        2 bytes
 13387 ;; Hardware stack levels used:    1
 13388 ;; This function calls:
 13389 ;;		Nothing
 13390 ;; This function is called by:
 13391 ;;		_I2C1_ISR
 13392 ;; This function uses a non-reentrant model
 13393 ;;
 13394                           
 13395                           
 13396                           ;psect for function _I2C1_Stop
 13397  12DB                     _I2C1_Stop:	
 13398                           
 13399                           ;incstack = 0
 13400                           ; Regs used in _I2C1_Stop: [wreg+fsr1l+fsr1h+status,2+status,0]
 13401                           ;I2C1_Stop@completion_code stored from wreg
 13402  12DB  00F8               	movwf	I2C1_Stop@completion_code
 13403                           
 13404                           ;i2c1.c: 584: SSP1CON2bits.PEN = 1;
 13405  12DC  0024               	movlb	4	; select bank4
 13406  12DD  1516               	bsf	22,2	;volatile
 13407                           
 13408                           ;i2c1.c: 587: if (p_i2c1_current->pTrFlag != (0))
 13409  12DE  0875               	movf	_p_i2c1_current,w
 13410  12DF  3E02               	addlw	2
 13411  12E0  0086               	movwf	6
 13412  12E1  3001               	movlw	1	; select bank2/3
 13413  12E2  0087               	movwf	7
 13414  12E3  0801               	movf	1,w
 13415  12E4  1903               	btfsc	3,2
 13416  12E5  2AF2               	goto	i1l5645
 13417                           
 13418                           ;i2c1.c: 588: {
 13419                           ;i2c1.c: 590: *(p_i2c1_current->pTrFlag) = completion_code;
 13420  12E6  0878               	movf	I2C1_Stop@completion_code,w
 13421  12E7  00F7               	movwf	??_I2C1_Stop
 13422  12E8  0875               	movf	_p_i2c1_current,w
 13423  12E9  3E02               	addlw	2
 13424  12EA  0086               	movwf	6
 13425  12EB  3001               	movlw	1	; select bank2/3
 13426  12EC  0087               	movwf	7
 13427  12ED  0801               	movf	1,w
 13428  12EE  0086               	movwf	6
 13429  12EF  0187               	clrf	7
 13430  12F0  0877               	movf	??_I2C1_Stop,w
 13431  12F1  0081               	movwf	1
 13432  12F2                     i1l5645:	
 13433                           
 13434                           ;i2c1.c: 591: }
 13435                           ;i2c1.c: 594: i2c1_state = S_MASTER_IDLE;
 13436  12F2  0021               	movlb	1	; select bank1
 13437  12F3  01EB               	clrf	_i2c1_state^(0+128)
 13438  12F4  0008               	return
 13439  12F5                     __end_of_I2C1_Stop:	
 13440                           
 13441                           	psect	text65
 13442  127E                     __ptext65:	
 13443 ;; *************** function _I2C1_FunctionComplete *****************
 13444 ;; Defined at:
 13445 ;;		line 563 in file "mcc_generated_files/i2c1.c"
 13446 ;; Parameters:    Size  Location     Type
 13447 ;;		None
 13448 ;; Auto vars:     Size  Location     Type
 13449 ;;		None
 13450 ;; Return value:  Size  Location     Type
 13451 ;;                  1    wreg      void 
 13452 ;; Registers used:
 13453 ;;		wreg, status,2, status,0
 13454 ;; Tracked objects:
 13455 ;;		On entry : 0/0
 13456 ;;		On exit  : 0/0
 13457 ;;		Unchanged: 0/0
 13458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13460 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13461 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13462 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13463 ;;Total ram usage:        1 bytes
 13464 ;; Hardware stack levels used:    1
 13465 ;; This function calls:
 13466 ;;		Nothing
 13467 ;; This function is called by:
 13468 ;;		_I2C1_ISR
 13469 ;; This function uses a non-reentrant model
 13470 ;;
 13471                           
 13472                           
 13473                           ;psect for function _I2C1_FunctionComplete
 13474  127E                     _I2C1_FunctionComplete:	
 13475                           
 13476                           ;i2c1.c: 567: p_i2c1_trb_current++;
 13477                           
 13478                           ;incstack = 0
 13479                           ; Regs used in _I2C1_FunctionComplete: [wreg+status,2+status,0]
 13480  127E  3005               	movlw	5
 13481  127F  00F7               	movwf	??_I2C1_FunctionComplete
 13482  1280  0877               	movf	??_I2C1_FunctionComplete,w
 13483  1281  07F6               	addwf	_p_i2c1_trb_current,f
 13484                           
 13485                           ;i2c1.c: 570: if(--i2c1_trb_count == 0)
 13486  1282  3001               	movlw	1
 13487  1283  0021               	movlb	1	; select bank1
 13488  1284  02EA               	subwf	_i2c1_trb_count^(0+128),f
 13489  1285  1D03               	btfss	3,2
 13490  1286  2A8C               	goto	i1l101
 13491                           
 13492                           ;i2c1.c: 571: {
 13493                           ;i2c1.c: 572: i2c1_state = S_MASTER_SEND_STOP;
 13494  1287  3004               	movlw	4
 13495  1288  00F7               	movwf	??_I2C1_FunctionComplete
 13496  1289  0877               	movf	??_I2C1_FunctionComplete,w
 13497  128A  00EB               	movwf	_i2c1_state^(0+128)
 13498                           
 13499                           ;i2c1.c: 573: }
 13500  128B  0008               	return
 13501  128C                     i1l101:	
 13502                           
 13503                           ;i2c1.c: 574: else
 13504                           ;i2c1.c: 575: {
 13505                           ;i2c1.c: 576: i2c1_state = S_MASTER_RESTART;
 13506  128C  01EB               	clrf	_i2c1_state^(0+128)
 13507  128D  0AEB               	incf	_i2c1_state^(0+128),f
 13508  128E  0008               	return
 13509  128F                     __end_of_I2C1_FunctionComplete:	
 13510                           
 13511                           	psect	text66
 13512  07FF                     __ptext66:	
 13513 ;; *************** function _I2C1_BusCollisionISR *****************
 13514 ;; Defined at:
 13515 ;;		line 728 in file "mcc_generated_files/i2c1.c"
 13516 ;; Parameters:    Size  Location     Type
 13517 ;;		None
 13518 ;; Auto vars:     Size  Location     Type
 13519 ;;		None
 13520 ;; Return value:  Size  Location     Type
 13521 ;;                  1    wreg      void 
 13522 ;; Registers used:
 13523 ;;		None
 13524 ;; Tracked objects:
 13525 ;;		On entry : 0/0
 13526 ;;		On exit  : 0/0
 13527 ;;		Unchanged: 0/0
 13528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13530 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13532 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13533 ;;Total ram usage:        0 bytes
 13534 ;; Hardware stack levels used:    1
 13535 ;; This function calls:
 13536 ;;		Nothing
 13537 ;; This function is called by:
 13538 ;;		_INTERRUPT_InterruptManager
 13539 ;; This function uses a non-reentrant model
 13540 ;;
 13541                           
 13542                           
 13543                           ;psect for function _I2C1_BusCollisionISR
 13544  07FF                     _I2C1_BusCollisionISR:	
 13545                           
 13546                           ;incstack = 0
 13547                           ; Regs used in _I2C1_BusCollisionISR: []
 13548  07FF  0008               	return
 13549  0800                     __end_of_I2C1_BusCollisionISR:	
 13550                           
 13551                           	psect	text67
 13552  1346                     __ptext67:	
 13553 ;; *************** function _EUSART_Transmit_ISR *****************
 13554 ;; Defined at:
 13555 ;;		line 165 in file "mcc_generated_files/eusart.c"
 13556 ;; Parameters:    Size  Location     Type
 13557 ;;		None
 13558 ;; Auto vars:     Size  Location     Type
 13559 ;;		None
 13560 ;; Return value:  Size  Location     Type
 13561 ;;                  1    wreg      void 
 13562 ;; Registers used:
 13563 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13564 ;; Tracked objects:
 13565 ;;		On entry : 0/0
 13566 ;;		On exit  : 0/0
 13567 ;;		Unchanged: 0/0
 13568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13570 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13571 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13572 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13573 ;;Total ram usage:        1 bytes
 13574 ;; Hardware stack levels used:    1
 13575 ;; This function calls:
 13576 ;;		Nothing
 13577 ;; This function is called by:
 13578 ;;		_INTERRUPT_InterruptManager
 13579 ;; This function uses a non-reentrant model
 13580 ;;
 13581                           
 13582                           
 13583                           ;psect for function _EUSART_Transmit_ISR
 13584  1346                     _EUSART_Transmit_ISR:	
 13585                           
 13586                           ;eusart.c: 169: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
 13587                           
 13588                           ;incstack = 0
 13589                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 13590  1346  3040               	movlw	64
 13591  1347  0272               	subwf	_eusartTxBufferRemaining,w	;volatile
 13592  1348  1803               	skipnc
 13593  1349  2B5F               	goto	i1l256
 13594                           
 13595                           ;eusart.c: 170: {
 13596                           ;eusart.c: 171: TXREG = eusartTxBuffer[eusartTxTail++];
 13597  134A  0873               	movf	_eusartTxTail,w
 13598  134B  3EA0               	addlw	(low (_eusartTxBuffer| (0+512)))& (0+255)
 13599  134C  0086               	movwf	6
 13600  134D  3002               	movlw	2	; select bank5/6
 13601  134E  0087               	movwf	7
 13602  134F  0801               	movf	1,w
 13603  1350  0023               	movlb	3	; select bank3
 13604  1351  009A               	movwf	26	;volatile
 13605  1352  3001               	movlw	1
 13606  1353  00F7               	movwf	??_EUSART_Transmit_ISR
 13607  1354  0877               	movf	??_EUSART_Transmit_ISR,w
 13608  1355  07F3               	addwf	_eusartTxTail,f	;volatile
 13609                           
 13610                           ;eusart.c: 172: if(sizeof(eusartTxBuffer) <= eusartTxTail)
 13611  1356  3040               	movlw	64
 13612  1357  0273               	subwf	_eusartTxTail,w	;volatile
 13613  1358  1803               	btfsc	3,0
 13614                           
 13615                           ;eusart.c: 173: {
 13616                           ;eusart.c: 174: eusartTxTail = 0;
 13617  1359  01F3               	clrf	_eusartTxTail	;volatile
 13618                           
 13619                           ;eusart.c: 175: }
 13620                           ;eusart.c: 176: eusartTxBufferRemaining++;
 13621  135A  3001               	movlw	1
 13622  135B  00F7               	movwf	??_EUSART_Transmit_ISR
 13623  135C  0877               	movf	??_EUSART_Transmit_ISR,w
 13624  135D  07F2               	addwf	_eusartTxBufferRemaining,f	;volatile
 13625                           
 13626                           ;eusart.c: 177: }
 13627  135E  0008               	return
 13628  135F                     i1l256:	
 13629                           
 13630                           ;eusart.c: 178: else
 13631                           ;eusart.c: 179: {
 13632                           ;eusart.c: 180: PIE1bits.TXIE = 0;
 13633  135F  0021               	movlb	1	; select bank1
 13634  1360  1211               	bcf	17,4	;volatile
 13635  1361  0008               	return
 13636  1362                     __end_of_EUSART_Transmit_ISR:	
 13637                           
 13638                           	psect	text68
 13639  132A                     __ptext68:	
 13640 ;; *************** function _EUSART_Receive_ISR *****************
 13641 ;; Defined at:
 13642 ;;		line 184 in file "mcc_generated_files/eusart.c"
 13643 ;; Parameters:    Size  Location     Type
 13644 ;;		None
 13645 ;; Auto vars:     Size  Location     Type
 13646 ;;		None
 13647 ;; Return value:  Size  Location     Type
 13648 ;;                  1    wreg      void 
 13649 ;; Registers used:
 13650 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13651 ;; Tracked objects:
 13652 ;;		On entry : 0/0
 13653 ;;		On exit  : 0/0
 13654 ;;		Unchanged: 0/0
 13655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13658 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13659 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13660 ;;Total ram usage:        1 bytes
 13661 ;; Hardware stack levels used:    1
 13662 ;; This function calls:
 13663 ;;		Nothing
 13664 ;; This function is called by:
 13665 ;;		_INTERRUPT_InterruptManager
 13666 ;; This function uses a non-reentrant model
 13667 ;;
 13668                           
 13669                           
 13670                           ;psect for function _EUSART_Receive_ISR
 13671  132A                     _EUSART_Receive_ISR:	
 13672                           
 13673                           ;eusart.c: 187: if(1 == RCSTAbits.OERR)
 13674                           
 13675                           ;incstack = 0
 13676                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 13677  132A  0023               	movlb	3	; select bank3
 13678  132B  1C9D               	btfss	29,1	;volatile
 13679  132C  2B2F               	goto	i1l5953
 13680                           
 13681                           ;eusart.c: 188: {
 13682                           ;eusart.c: 191: RCSTAbits.CREN = 0;
 13683  132D  121D               	bcf	29,4	;volatile
 13684                           
 13685                           ;eusart.c: 192: RCSTAbits.CREN = 1;
 13686  132E  161D               	bsf	29,4	;volatile
 13687  132F                     i1l5953:	
 13688                           
 13689                           ;eusart.c: 193: }
 13690                           ;eusart.c: 196: eusartRxBuffer[eusartRxHead++] = RCREG;
 13691  132F  0819               	movf	25,w	;volatile
 13692  1330  00F7               	movwf	??_EUSART_Receive_ISR
 13693  1331  0871               	movf	_eusartRxHead,w
 13694  1332  3E20               	addlw	(low (_eusartRxBuffer| (0+768)))& (0+255)
 13695  1333  0086               	movwf	6
 13696  1334  3003               	movlw	3	; select bank6/7
 13697  1335  0087               	movwf	7
 13698  1336  0877               	movf	??_EUSART_Receive_ISR,w
 13699  1337  0081               	movwf	1
 13700  1338  3001               	movlw	1
 13701  1339  00F7               	movwf	??_EUSART_Receive_ISR
 13702  133A  0877               	movf	??_EUSART_Receive_ISR,w
 13703  133B  07F1               	addwf	_eusartRxHead,f	;volatile
 13704                           
 13705                           ;eusart.c: 197: if(sizeof(eusartRxBuffer) <= eusartRxHead)
 13706  133C  3040               	movlw	64
 13707  133D  0271               	subwf	_eusartRxHead,w	;volatile
 13708  133E  1803               	btfsc	3,0
 13709                           
 13710                           ;eusart.c: 198: {
 13711                           ;eusart.c: 199: eusartRxHead = 0;
 13712  133F  01F1               	clrf	_eusartRxHead	;volatile
 13713                           
 13714                           ;eusart.c: 200: }
 13715                           ;eusart.c: 201: eusartRxCount++;
 13716  1340  3001               	movlw	1
 13717  1341  00F7               	movwf	??_EUSART_Receive_ISR
 13718  1342  0877               	movf	??_EUSART_Receive_ISR,w
 13719  1343  0021               	movlb	1	; select bank1
 13720  1344  07E7               	addwf	_eusartRxCount^(0+128),f	;volatile
 13721  1345  0008               	return
 13722  1346                     __end_of_EUSART_Receive_ISR:	
 13723  007E                     btemp	set	126	;btemp
 13724  007E                     int$flags	set	126
 13725  007E                     wtemp0	set	126


Data Sizes:
    Strings     425
    Constant    11
    Data        6
    BSS         328
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      14
    BANK0            80     75      79
    BANK1            80     57      79
    BANK2            80      0      65
    BANK3            80      0      44
    BANK4            80      0      64
    BANK5            80      0      64
    BANK6            80      0      64
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           16      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    i2c1_tr_queue.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 50
		 -> i2c1_write_no_data@buf(BANK0[1]), i2c1_read@reg(BANK0[1]), sen@length(BANK0[1]), sen@type(BANK0[1]), 
		 -> read_buf(BANK3[16]), exec_remote_cmd@send_buf(BANK1[50]), exec_remote_cmd@data(BANK1[1]), 

    i2c1_tr_queue.pTrFlag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c1_write_no_data@status(BANK0[1]), i2c1_read@status(BANK0[1]), i2c1_write@status(BANK0[1]), 

    i2c1_tr_queue.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C1_MasterRead@trBlock(BANK2[5]), I2C1_MasterWrite@trBlock(BANK2[5]), 

    PROTOCOL_Extension_Handler$0	PTR unsigned char  size(1) Largest target is 48
		 -> buf(BANK4[48]), 

    data	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    strncmp@s2	PTR const unsigned char  size(2) Largest target is 192
		 -> buf(BANK4[48]), cmd_buf(BIGRAM[192]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_48(CODE[4]), STR_47(CODE[4]), STR_45(CODE[4]), STR_44(CODE[4]), 
		 -> STR_41(CODE[4]), STR_40(CODE[4]), STR_39(CODE[4]), STR_37(CODE[4]), 
		 -> STR_33(CODE[4]), STR_32(CODE[4]), STR_27(CODE[4]), STR_25(CODE[4]), 
		 -> STR_23(CODE[4]), STR_22(CODE[4]), STR_21(CODE[4]), STR_20(CODE[4]), 
		 -> STR_10(CODE[4]), STR_9(CODE[4]), STR_6(CODE[4]), STR_5(CODE[4]), 
		 -> STR_4(CODE[4]), STR_1(CODE[4]), 

    strcpy@from	PTR const unsigned char  size(1) Largest target is 48
		 -> buf(BANK4[48]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 192
		 -> cmd_buf(BIGRAM[192]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 192
		 -> cmd_buf(BIGRAM[192]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 192
		 -> buf(BANK4[48]), cmd_buf(BIGRAM[192]), 

    sp__PROTOCOL_I2C_SEN	PTR unsigned char  size(2) Largest target is 16
		 -> type_no_data(BANK2[1]), PROTOCOL_Send_uint8_t@pbuf(BANK2[1]), sendbuf(BANK4[16]), readbuf.length(BANK2[1]), 
		 -> readbuf.type(BANK2[1]), readbuf(BANK2[6]), 

    PROTOCOL_Print_TLV@pbuffer	PTR unsigned char  size(1) Largest target is 16
		 -> read_buf(BANK3[16]), NULL(NULL[0]), 

    PROTOCOL_EXT@char_buf	PTR unsigned char  size(1) Largest target is 48
		 -> buf(BANK4[48]), 

    PROTOCOL_Set_Extension_Handler@extension_handler	PTR void  size(2) Largest target is 1
		 -> command_handler(), 

    PROTOCOL_Extension_Handler	PTR FTN(PTR unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), command_handler(), 

    PROTOCOL_Loop_Func	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    PROTOCOL_Initialize@inv_handler	PTR void  size(2) Largest target is 1
		 -> inv_handler(), 

    PROTOCOL_Inv_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), inv_handler(), 

    PROTOCOL_Initialize@set_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Set_Handler	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@stop_handler	PTR void  size(2) Largest target is 1
		 -> stop_handler(), 

    PROTOCOL_Stop_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), stop_handler(), 

    PROTOCOL_Initialize@start_handler	PTR void  size(2) Largest target is 1
		 -> start_handler(), 

    PROTOCOL_Start_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), start_handler(), 

    PROTOCOL_Initialize@device_id	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_34(CODE[17]), 

    device_id_	PTR const unsigned char  size(2) Largest target is 8192
		 -> ROM(CODE[8192]), STR_34(CODE[17]), 

    S1048$pbuffer	PTR unsigned char  size(2) Largest target is 16
		 -> PROTOCOL_Send_uint8_t@pbuf(BANK2[1]), sendbuf(BANK4[16]), 

    readbuf.pbuffer	PTR unsigned char  size(2) Largest target is 16
		 -> PROTOCOL_Send_uint8_t@pbuf(BANK2[1]), sendbuf(BANK4[16]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 8192
		 -> STR_43(CODE[4]), buf(BANK4[48]), STR_35(CODE[7]), ROM(CODE[8192]), 
		 -> printf@c(BANK0[1]), STR_34(CODE[17]), I2C1_ISR@i2c_address(BANK0[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 26
		 -> STR_81(CODE[10]), STR_80(CODE[9]), STR_79(CODE[10]), STR_78(CODE[9]), 
		 -> STR_77(CODE[4]), STR_76(CODE[4]), STR_75(CODE[4]), STR_74(CODE[4]), 
		 -> STR_73(CODE[4]), STR_72(CODE[4]), STR_71(CODE[4]), STR_70(CODE[4]), 
		 -> STR_69(CODE[14]), STR_68(CODE[9]), STR_67(CODE[10]), STR_66(CODE[9]), 
		 -> STR_65(CODE[10]), STR_64(CODE[9]), STR_63(CODE[7]), STR_62(CODE[4]), 
		 -> STR_61(CODE[4]), STR_60(CODE[9]), STR_59(CODE[4]), STR_58(CODE[4]), 
		 -> STR_57(CODE[10]), STR_56(CODE[4]), STR_55(CODE[4]), STR_54(CODE[8]), 
		 -> STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[9]), STR_50(CODE[6]), 
		 -> STR_49(CODE[10]), STR_46(CODE[10]), STR_42(CODE[10]), STR_38(CODE[10]), 
		 -> STR_36(CODE[5]), STR_31(CODE[4]), STR_30(CODE[4]), STR_29(CODE[4]), 
		 -> STR_28(CODE[7]), STR_26(CODE[26]), STR_24(CODE[26]), STR_19(CODE[22]), 
		 -> STR_18(CODE[22]), STR_17(CODE[26]), STR_16(CODE[22]), STR_15(CODE[4]), 
		 -> STR_14(CODE[4]), STR_13(CODE[7]), STR_12(CODE[25]), STR_11(CODE[10]), 
		 -> STR_8(CODE[12]), STR_7(CODE[11]), STR_3(CODE[3]), STR_2(CODE[10]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    i2c1_read@pbuf	PTR unsigned char  size(2) Largest target is 16
		 -> sen@length(BANK0[1]), sen@type(BANK0[1]), read_buf(BANK3[16]), exec_remote_cmd@data(BANK1[1]), 

    i2c1_write@pbuf	PTR unsigned char  size(1) Largest target is 50
		 -> exec_remote_cmd@send_buf(BANK1[50]), 

    command_handler@buf	PTR unsigned char  size(1) Largest target is 48
		 -> buf(BANK4[48]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 192
		 -> cmd_buf(BIGRAM[192]), 

    put_cmd@buf	PTR unsigned char  size(1) Largest target is 48
		 -> buf(BANK4[48]), 

    fetch@sch	PTR unsigned char  size(1) Largest target is 28
		 -> schedule(BANK3[28]), 

    exec_remote_cmd@buf	PTR unsigned char  size(2) Largest target is 192
		 -> cmd_buf(BIGRAM[192]), 

    I2C1_MasterWriteTRBBuild@pdata	PTR unsigned char  size(1) Largest target is 50
		 -> i2c1_write_no_data@buf(BANK0[1]), i2c1_read@reg(BANK0[1]), exec_remote_cmd@send_buf(BANK1[50]), 

    I2C1_MasterWriteTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 50
		 -> i2c1_write_no_data@buf(BANK0[1]), i2c1_read@reg(BANK0[1]), sen@length(BANK0[1]), sen@type(BANK0[1]), 
		 -> read_buf(BANK3[16]), exec_remote_cmd@send_buf(BANK1[50]), exec_remote_cmd@data(BANK1[1]), 

    I2C1_MasterWriteTRBBuild@ptrb	PTR struct . size(1) Largest target is 5
		 -> I2C1_MasterWrite@trBlock(BANK2[5]), 

    I2C1_MasterReadTRBBuild@pdata	PTR unsigned char  size(2) Largest target is 16
		 -> sen@length(BANK0[1]), sen@type(BANK0[1]), read_buf(BANK3[16]), exec_remote_cmd@data(BANK1[1]), 

    I2C1_MasterReadTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 50
		 -> i2c1_write_no_data@buf(BANK0[1]), i2c1_read@reg(BANK0[1]), sen@length(BANK0[1]), sen@type(BANK0[1]), 
		 -> read_buf(BANK3[16]), exec_remote_cmd@send_buf(BANK1[50]), exec_remote_cmd@data(BANK1[1]), 

    I2C1_MasterReadTRBBuild@ptrb	PTR struct . size(1) Largest target is 5
		 -> I2C1_MasterRead@trBlock(BANK2[5]), 

    i2c1_object.pTrTail.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 50
		 -> i2c1_write_no_data@buf(BANK0[1]), i2c1_read@reg(BANK0[1]), sen@length(BANK0[1]), sen@type(BANK0[1]), 
		 -> read_buf(BANK3[16]), exec_remote_cmd@send_buf(BANK1[50]), exec_remote_cmd@data(BANK1[1]), 

    i2c1_object.pTrTail.pTrFlag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c1_write_no_data@status(BANK0[1]), i2c1_read@status(BANK0[1]), i2c1_write@status(BANK0[1]), 

    i2c1_object.pTrTail.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C1_MasterRead@trBlock(BANK2[5]), I2C1_MasterWrite@trBlock(BANK2[5]), 

    I2C1_MasterTRBInsert@ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C1_MasterRead@trBlock(BANK2[5]), I2C1_MasterWrite@trBlock(BANK2[5]), 

    I2C1_MasterTRBInsert@pflag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c1_write_no_data@status(BANK0[1]), i2c1_read@status(BANK0[1]), i2c1_write@status(BANK0[1]), 

    I2C1_MasterRead@pflag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c1_read@status(BANK0[1]), 

    I2C1_MasterRead@pdata	PTR unsigned char  size(2) Largest target is 16
		 -> sen@length(BANK0[1]), sen@type(BANK0[1]), read_buf(BANK3[16]), exec_remote_cmd@data(BANK1[1]), 

    F3084.pbuffer	PTR unsigned char  size(2) Largest target is 50
		 -> i2c1_write_no_data@buf(BANK0[1]), i2c1_read@reg(BANK0[1]), sen@length(BANK0[1]), sen@type(BANK0[1]), 
		 -> read_buf(BANK3[16]), exec_remote_cmd@send_buf(BANK1[50]), exec_remote_cmd@data(BANK1[1]), 

    I2C1_MasterWrite@pflag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c1_write_no_data@status(BANK0[1]), i2c1_read@status(BANK0[1]), i2c1_write@status(BANK0[1]), 

    I2C1_MasterWrite@pdata	PTR unsigned char  size(1) Largest target is 50
		 -> i2c1_write_no_data@buf(BANK0[1]), i2c1_read@reg(BANK0[1]), exec_remote_cmd@send_buf(BANK1[50]), 

    F3079.pbuffer	PTR unsigned char  size(2) Largest target is 50
		 -> i2c1_write_no_data@buf(BANK0[1]), i2c1_read@reg(BANK0[1]), sen@length(BANK0[1]), sen@type(BANK0[1]), 
		 -> read_buf(BANK3[16]), exec_remote_cmd@send_buf(BANK1[50]), exec_remote_cmd@data(BANK1[1]), 

    I2C1_ISR@pi2c_buf_ptr	PTR unsigned char  size(2) Largest target is 50
		 -> i2c1_write_no_data@buf(BANK0[1]), i2c1_read@reg(BANK0[1]), sen@length(BANK0[1]), sen@type(BANK0[1]), 
		 -> read_buf(BANK3[16]), exec_remote_cmd@send_buf(BANK1[50]), exec_remote_cmd@data(BANK1[1]), I2C1_ISR@i2c_address(BANK0[2]), 
		 -> NULL(NULL[0]), 

    S19$pbuffer	PTR unsigned char  size(2) Largest target is 50
		 -> i2c1_write_no_data@buf(BANK0[1]), i2c1_read@reg(BANK0[1]), sen@length(BANK0[1]), sen@type(BANK0[1]), 
		 -> read_buf(BANK3[16]), exec_remote_cmd@send_buf(BANK1[50]), exec_remote_cmd@data(BANK1[1]), 

    p_i2c1_trb_current.pbuffer	PTR unsigned char  size(2) Largest target is 50
		 -> i2c1_write_no_data@buf(BANK0[1]), i2c1_read@reg(BANK0[1]), sen@length(BANK0[1]), sen@type(BANK0[1]), 
		 -> read_buf(BANK3[16]), exec_remote_cmd@send_buf(BANK1[50]), exec_remote_cmd@data(BANK1[1]), 

    p_i2c1_trb_current	PTR struct . size(1) Largest target is 5
		 -> I2C1_MasterRead@trBlock(BANK2[5]), I2C1_MasterWrite@trBlock(BANK2[5]), NULL(NULL[0]), 

    i2c1_object.pTrHead.pTrFlag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c1_write_no_data@status(BANK0[1]), i2c1_read@status(BANK0[1]), i2c1_write@status(BANK0[1]), 

    i2c1_object.pTrHead.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C1_MasterRead@trBlock(BANK2[5]), I2C1_MasterWrite@trBlock(BANK2[5]), 

    S31$pTrFlag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c1_write_no_data@status(BANK0[1]), i2c1_read@status(BANK0[1]), i2c1_write@status(BANK0[1]), 

    p_i2c1_current.pTrFlag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c1_write_no_data@status(BANK0[1]), i2c1_read@status(BANK0[1]), i2c1_write@status(BANK0[1]), 

    S31$ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C1_MasterRead@trBlock(BANK2[5]), I2C1_MasterWrite@trBlock(BANK2[5]), 

    p_i2c1_current.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C1_MasterRead@trBlock(BANK2[5]), I2C1_MasterWrite@trBlock(BANK2[5]), 

    p_i2c1_current	PTR struct . size(1) Largest target is 5
		 -> i2c1_tr_queue(BANK2[3]), NULL(NULL[0]), 

    S42$pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c1_tr_queue(BANK2[3]), 

    i2c1_object.pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c1_tr_queue(BANK2[3]), 

    S42$pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c1_tr_queue(BANK2[3]), 

    i2c1_object.pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c1_tr_queue(BANK2[3]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_I2C1_ISR
    _I2C1_ISR->_I2C1_Stop

Critical Paths under _main in BANK0

    _main->_PROTOCOL_Loop
    _init->___awdiv
    _SYSTEM_Initialize->_EUSART_Initialize
    _SYSTEM_Initialize->_I2C1_Initialize
    _PROTOCOL_Loop->_PROTOCOL_EXT
    _inv_handler->_fetch
    _fetch->_sen
    _exec_remote_cmd->_printf
    _i2c1_write->_I2C1_MasterWrite
    _PROTOCOL_Write_Device_Address->_DATAEE_WriteByte
    _PROTOCOL_SAV->_DATAEE_WriteByte
    _PROTOCOL_EXT->_command_handler
    _command_handler->_one_shot_sen
    _put_cmd->_strcpy
    _strcpy->___wmul
    _print_dev_map->_printf
    _one_shot_sen->_sen
    _sen->_PROTOCOL_Print_TLV
    _PROTOCOL_Print_TLV->_printf
    _printf->___lwmod
    _putch->_EUSART_Write
    ___lwmod->___lwdiv
    _abs->___awmod
    _detected->___awdiv
    _check_plg->_scan_dev
    _scan_dev->_i2c1_read
    _i2c1_read->_I2C1_MasterRead
    _I2C1_MasterRead->_I2C1_MasterReadTRBBuild
    _del_dev->___awdiv
    _add_dev->___awdiv
    _i2c1_write_no_data->_I2C1_MasterWrite
    _I2C1_MasterWrite->_I2C1_MasterWriteTRBBuild
    _atoi->___wmul
    _PROTOCOL_Initialize->_DATAEE_ReadByte

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _inv_handler->_exec_remote_cmd

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  208121
                _PROTOCOL_Initialize
                      _PROTOCOL_Loop
     _PROTOCOL_Set_Extension_Handler
                  _SYSTEM_Initialize
                               _init
 ---------------------------------------------------------------------------------
 (1) _init                                                11    11      0    4371
                                              9 BANK0      9     9      0
                    _DATAEE_ReadByte
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                  _EUSART_Initialize
                    _I2C1_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C1_Initialize                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Set_Extension_Handler                       2     0      2     108
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Loop                                        4     4      0  202963
                                             71 BANK0      4     4      0
                   Absolute function *
                        _EUSART_Read
                       _PROTOCOL_EXT
       _PROTOCOL_Read_Device_Address
                       _PROTOCOL_SAV
                       _PROTOCOL_SET
                       _PROTOCOL_STA
                       _PROTOCOL_STP
      _PROTOCOL_Write_Device_Address
            _TMR0_HasOverflowOccured
                               _atoi
                        _inv_handler *
                             _printf
                            _strncmp
 ---------------------------------------------------------------------------------
 (2) _inv_handler                                          3     3      0   99353
                                             61 BANK0      1     1      0
                            ___lwmod
                          _check_plg
                    _exec_remote_cmd
                              _fetch
                           _scan_dev
 ---------------------------------------------------------------------------------
 (3) _fetch                                                7     7      0   40912
                                             54 BANK0      7     7      0
                           _detected
                 _i2c1_write_no_data
                             _printf
                                _sen
 ---------------------------------------------------------------------------------
 (3) _exec_remote_cmd                                     62    62      0   29646
                                             36 BANK0      5     5      0
                                              0 BANK1     57    57      0
                             ___wmul
                               _atoi
                          _i2c1_read
                         _i2c1_write
                 _i2c1_write_no_data
                             _printf
                            _strncmp
 ---------------------------------------------------------------------------------
 (4) _i2c1_write                                           8     4      4    2378
                                             14 BANK0      8     4      4
                   _I2C1_MasterWrite
 ---------------------------------------------------------------------------------
 (2) _TMR0_HasOverflowOccured                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_Write_Device_Address                        2     2      0     469
                                              3 BANK0      2     2      0
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_STP                                         0     0      0       0
                   Absolute function *
                       _stop_handler *
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_STA                                         0     0      0       0
                   Absolute function *
                      _start_handler *
 ---------------------------------------------------------------------------------
 (3) _start_handler                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_SET                                         2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_SAV                                         1     1      0     407
                                              3 BANK0      1     1      0
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_Read_Device_Address                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_EXT                                         2     2      0   86539
                                             69 BANK0      2     2      0
                   Absolute function *
                    _command_handler *
 ---------------------------------------------------------------------------------
 (3) _command_handler                                     10     9      1   86442
                                             59 BANK0     10     9      1
                   _DATAEE_WriteByte
                            ___awdiv
                               _atoi
                          _check_plg
                       _one_shot_sen
                      _print_dev_map
                             _printf
                            _put_cmd
                            _strncmp
 ---------------------------------------------------------------------------------
 (2) _strncmp                                              8     2      6    5274
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (4) _put_cmd                                              6     6      0    1534
                                             12 BANK0      6     6      0
                             ___wmul
                             _strcpy
 ---------------------------------------------------------------------------------
 (5) _strcpy                                               6     3      3     263
                                              6 BANK0      6     3      3
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _print_dev_map                                        4     4      0    8692
                                             36 BANK0      4     4      0
                   _dev_map_iterator
                             _printf
 ---------------------------------------------------------------------------------
 (5) _dev_map_iterator                                     8     8      0      37
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (4) _one_shot_sen                                         5     5      0   40517
                                             54 BANK0      5     5      0
                           _detected
                 _i2c1_write_no_data
                             _printf
                                _sen
 ---------------------------------------------------------------------------------
 (4) _sen                                                 11    11      0   25317
                                             45 BANK0      9     9      0
                 _PROTOCOL_Print_TLV
                          _i2c1_read
                 _i2c1_write_no_data
 ---------------------------------------------------------------------------------
 (5) _PROTOCOL_Print_TLV                                   9     6      3   15649
                                             36 BANK0      9     6      3
                            ___awdiv
                            ___awmod
                                _abs
                             _concat
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              26    20      6    8550
                                             14 BANK0     22    16      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                                _abs (ARG)
                             _concat (ARG)
                   _dev_map_iterator (ARG)
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      93
                                              2 BANK0      1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (4) _EUSART_Write                                         2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4    1156
                                              8 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     395
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (6) _concat                                               8     6      2     524
                                              0 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     629
                                              7 BANK0      4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              7     3      4    1505
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) _detected                                             7     7      0    2916
                                              9 BANK0      7     7      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) _check_plg                                            3     3      0   15609
                                             32 BANK0      3     3      0
                 _i2c1_write_no_data
                           _scan_dev
 ---------------------------------------------------------------------------------
 (3) _scan_dev                                             5     5      0   12030
                                             27 BANK0      5     5      0
                            _add_dev
                            _del_dev
                          _i2c1_read
 ---------------------------------------------------------------------------------
 (4) _i2c1_read                                           11     5      6    5600
                                             16 BANK0     11     5      6
                    _I2C1_MasterRead
                   _I2C1_MasterWrite
 ---------------------------------------------------------------------------------
 (5) _I2C1_MasterRead                                      8     2      6    1398
                                              8 BANK0      8     2      6
            _I2C1_MasterReadTRBBuild
               _I2C1_MasterTRBInsert
 ---------------------------------------------------------------------------------
 (6) _I2C1_MasterReadTRBBuild                              8     3      5     481
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) _del_dev                                              8     8      0    3102
                                              9 BANK0      8     8      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) _add_dev                                              8     8      0    3102
                                              9 BANK0      8     8      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4    2749
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (5) _i2c1_write_no_data                                   7     4      3    3545
                                             14 BANK0      7     4      3
                   _I2C1_MasterWrite
 ---------------------------------------------------------------------------------
 (5) _I2C1_MasterWrite                                     7     3      4    1891
                                              7 BANK0      7     3      4
               _I2C1_MasterTRBInsert
           _I2C1_MasterWriteTRBBuild
 ---------------------------------------------------------------------------------
 (6) _I2C1_MasterWriteTRBBuild                             7     3      4     450
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (6) _I2C1_MasterTRBInsert                                 4     2      2     494
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (4) _atoi                                                 7     5      2    2170
                                              6 BANK0      7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      99
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1198
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _DATAEE_WriteByte                                     3     2      1     407
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _EUSART_Read                                          2     2      0      37
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Initialize                                 12     2     10     679
                                              1 BANK0     12     2     10
                   Absolute function *
                    _DATAEE_ReadByte
                       _stop_handler *
 ---------------------------------------------------------------------------------
 (3) _stop_handler                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DATAEE_ReadByte                                      1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) Absolute function(Fake)                               1     0      1       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _INTERRUPT_InterruptManager                          1     1      0      31
                                              6 COMMON     1     1      0
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
               _I2C1_BusCollisionISR
                           _I2C1_ISR
 ---------------------------------------------------------------------------------
 (11) _I2C1_ISR                                            4     4      0      31
                                              2 COMMON     4     4      0
              _I2C1_FunctionComplete
                          _I2C1_Stop
 ---------------------------------------------------------------------------------
 (12) _I2C1_Stop                                           2     2      0      31
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _I2C1_FunctionComplete                               1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _I2C1_BusCollisionISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART_Transmit_ISR                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _EUSART_Receive_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PROTOCOL_Initialize
     Absolute function(Fake) *
     _DATAEE_ReadByte *
     _stop_handler *
   _PROTOCOL_Loop
     Absolute function(Fake) *
     _EUSART_Read *
     _PROTOCOL_EXT *
       Absolute function(Fake) *
       _command_handler *
         _DATAEE_WriteByte
         ___awdiv
         _atoi
           ___wmul
           _isdigit
         _check_plg
           _i2c1_write_no_data
             _I2C1_MasterWrite
               _I2C1_MasterTRBInsert
               _I2C1_MasterWriteTRBBuild
           _scan_dev
             _add_dev
               ___awdiv
             _del_dev
               ___awdiv
             _i2c1_read
               _I2C1_MasterRead
                 _I2C1_MasterReadTRBBuild
                 _I2C1_MasterTRBInsert
               _I2C1_MasterWrite
                 _I2C1_MasterTRBInsert
                 _I2C1_MasterWriteTRBBuild
         _one_shot_sen
           _detected
             ___awdiv
           _i2c1_write_no_data
             _I2C1_MasterWrite
               _I2C1_MasterTRBInsert
               _I2C1_MasterWriteTRBBuild
           _printf
             ___awdiv (ARG)
             ___awmod (ARG)
             ___lwdiv (ARG)
             ___lwmod (ARG)
               ___lwdiv (ARG)
             ___wmul (ARG)
             _abs (ARG)
               ___awmod (ARG)
             _concat (ARG)
             _dev_map_iterator (ARG)
             _isdigit (ARG)
             _putch (ARG)
               _EUSART_Write
           _sen
             _PROTOCOL_Print_TLV
               ___awdiv
               ___awmod
               _abs
                 ___awmod (ARG)
               _concat
               _printf
                 ___awdiv (ARG)
                 ___awmod (ARG)
                 ___lwdiv (ARG)
                 ___lwmod (ARG)
                   ___lwdiv (ARG)
                 ___wmul (ARG)
                 _abs (ARG)
                   ___awmod (ARG)
                 _concat (ARG)
                 _dev_map_iterator (ARG)
                 _isdigit (ARG)
                 _putch (ARG)
                   _EUSART_Write
             _i2c1_read
               _I2C1_MasterRead
                 _I2C1_MasterReadTRBBuild
                 _I2C1_MasterTRBInsert
               _I2C1_MasterWrite
                 _I2C1_MasterTRBInsert
                 _I2C1_MasterWriteTRBBuild
             _i2c1_write_no_data
               _I2C1_MasterWrite
                 _I2C1_MasterTRBInsert
                 _I2C1_MasterWriteTRBBuild
         _print_dev_map
           _dev_map_iterator
           _printf
             ___awdiv (ARG)
             ___awmod (ARG)
             ___lwdiv (ARG)
             ___lwmod (ARG)
               ___lwdiv (ARG)
             ___wmul (ARG)
             _abs (ARG)
               ___awmod (ARG)
             _concat (ARG)
             _dev_map_iterator (ARG)
             _isdigit (ARG)
             _putch (ARG)
               _EUSART_Write
         _printf
           ___awdiv (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _abs (ARG)
             ___awmod (ARG)
           _concat (ARG)
           _dev_map_iterator (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _EUSART_Write
         _put_cmd
           ___wmul
           _strcpy
             ___wmul (ARG)
         _strncmp
     _PROTOCOL_Read_Device_Address *
     _PROTOCOL_SAV *
       _DATAEE_WriteByte
     _PROTOCOL_SET *
     _PROTOCOL_STA *
       Absolute function(Fake) *
       _start_handler *
     _PROTOCOL_STP *
       Absolute function(Fake) *
       _stop_handler *
     _PROTOCOL_Write_Device_Address *
       _DATAEE_WriteByte
     _TMR0_HasOverflowOccured *
     _atoi *
       ___wmul
       _isdigit
     _inv_handler *
       ___lwmod
         ___lwdiv (ARG)
       _check_plg
         _i2c1_write_no_data
           _I2C1_MasterWrite
             _I2C1_MasterTRBInsert
             _I2C1_MasterWriteTRBBuild
         _scan_dev
           _add_dev
             ___awdiv
           _del_dev
             ___awdiv
           _i2c1_read
             _I2C1_MasterRead
               _I2C1_MasterReadTRBBuild
               _I2C1_MasterTRBInsert
             _I2C1_MasterWrite
               _I2C1_MasterTRBInsert
               _I2C1_MasterWriteTRBBuild
       _exec_remote_cmd
         ___wmul
         _atoi
           ___wmul
           _isdigit
         _i2c1_read
           _I2C1_MasterRead
             _I2C1_MasterReadTRBBuild
             _I2C1_MasterTRBInsert
           _I2C1_MasterWrite
             _I2C1_MasterTRBInsert
             _I2C1_MasterWriteTRBBuild
         _i2c1_write
           _I2C1_MasterWrite
             _I2C1_MasterTRBInsert
             _I2C1_MasterWriteTRBBuild
         _i2c1_write_no_data
           _I2C1_MasterWrite
             _I2C1_MasterTRBInsert
             _I2C1_MasterWriteTRBBuild
         _printf
           ___awdiv (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _abs (ARG)
             ___awmod (ARG)
           _concat (ARG)
           _dev_map_iterator (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _EUSART_Write
         _strncmp
       _fetch
         _detected
           ___awdiv
         _i2c1_write_no_data
           _I2C1_MasterWrite
             _I2C1_MasterTRBInsert
             _I2C1_MasterWriteTRBBuild
         _printf
           ___awdiv (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _abs (ARG)
             ___awmod (ARG)
           _concat (ARG)
           _dev_map_iterator (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _EUSART_Write
         _sen
           _PROTOCOL_Print_TLV
             ___awdiv
             ___awmod
             _abs
               ___awmod (ARG)
             _concat
             _printf
               ___awdiv (ARG)
               ___awmod (ARG)
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _abs (ARG)
                 ___awmod (ARG)
               _concat (ARG)
               _dev_map_iterator (ARG)
               _isdigit (ARG)
               _putch (ARG)
                 _EUSART_Write
           _i2c1_read
             _I2C1_MasterRead
               _I2C1_MasterReadTRBBuild
               _I2C1_MasterTRBInsert
             _I2C1_MasterWrite
               _I2C1_MasterTRBInsert
               _I2C1_MasterWriteTRBBuild
           _i2c1_write_no_data
             _I2C1_MasterWrite
               _I2C1_MasterTRBInsert
               _I2C1_MasterWriteTRBBuild
       _scan_dev
         _add_dev
           ___awdiv
         _del_dev
           ___awdiv
         _i2c1_read
           _I2C1_MasterRead
             _I2C1_MasterReadTRBBuild
             _I2C1_MasterTRBInsert
           _I2C1_MasterWrite
             _I2C1_MasterTRBInsert
             _I2C1_MasterWriteTRBBuild
     _printf *
       ___awdiv (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _abs (ARG)
         ___awmod (ARG)
       _concat (ARG)
       _dev_map_iterator (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _EUSART_Write
     _strncmp *
   _PROTOCOL_Set_Extension_Handler
   _SYSTEM_Initialize
     _EUSART_Initialize
     _I2C1_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
     _WDT_Initialize
   _init
     _DATAEE_ReadByte
     ___awdiv
     ___wmul

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR
   _I2C1_BusCollisionISR
   _I2C1_ISR
     _I2C1_FunctionComplete
     _I2C1_Stop

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4B      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     39      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      41       9       81.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      2C      11       55.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      40      13       80.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      40      15       80.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0      40      17       80.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     1D9      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              10      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     1D9      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Wed Sep 20 03:34:22 2017

                                              _i 006B                                                _j 0137  
                                              pc 0002                  __end_of_TMR0_HasOverflowOccured 11EE  
                                    __CFG_CP$OFF 0000                                     ___awdiv@sign 0026  
                            ___wmul@multiplicand 0022                                  _timer0ReloadVal 00E6  
                                    __CFG_LVP$ON 0000                                              l244 142C  
                                            l355 11FC                                              l188 13F2  
                                            l640 14E5                                              l712 0FFF  
                                            l627 094E                                              l619 1490  
                                            l660 0E51                                              l672 0F1E  
                                            l836 0C94                                              l695 0F74  
                                            l688 0EFE                                     __CFG_CPD$OFF 0000  
                                            _abs 125F                                              _buf 0220  
                                            _cnt 00E1                                              _sen 06F7  
         __end_of_PROTOCOL_Set_Extension_Handler 0809          __size_of_PROTOCOL_Set_Extension_Handler 0009  
                 _PROTOCOL_Set_Extension_Handler 0800                                     ___awmod@sign 0026  
                                   __CFG_BORV$LO 0000                                              wreg 0009  
                                   __CFG_IESO$ON 0000                      __size_of_i2c1_write_no_data 002B  
                               detected@dev_addr 002F                                 exec_remote_cmd@i 00D4  
                               exec_remote_cmd@j 00D3                                     ?_EUSART_Read 0077  
                       i2c1_write_no_data@status 0034                                 __end_of_I2C1_ISR 0C94  
                               ?_command_handler 005B                                             l1106 136B  
                                           ?_abs 0027                                             l5003 089D  
                                           l5007 08A5                                             l5031 16A4  
                                           l5023 169E                                     _tmr_overflow 013A  
                                           l5033 16B0                                             l5041 16C5  
                                           l5201 0241                                             l5019 1697  
                                           l5203 0246                                             l5045 16CD  
                                           l5037 16BC                                             l5221 030F  
                                           l5133 00C8                                             l5301 0753  
                                           l5071 0949                                             l5055 0915  
                                           l5215 02A7                                             l5207 0213  
                                           l5143 00D4                                             l5231 0958  
                                           l6111 0E26                                             l6009 08D7  
                                           l5073 0950                                             l5065 093A  
                                           l5057 091F                                             l5217 02D7  
                                           l5209 027D                                             l5161 0144  
                                           l5145 00F3                                             l5225 0317  
                                           l5241 096D                                             l6105 0DFB  
                                           l6041 0CC2                                             l5083 14D6  
                                           l5067 0944                                             l5219 0307  
                                           l5171 0153                                             l5147 0108  
                                           l5315 07A5                                             l6043 0CC4  
                                           l5085 14E0                                             l5173 0181  
                                           l5157 0114                                             l5245 09A2  
                                           l5237 0963                                             l5325 1314  
                                           l5413 1492                                             l5501 0420  
                                           l6053 0CD2                                             l5263 15FE  
                                           l5175 01A4                                             l5159 0131  
                                           l5247 09A9                                             l5407 1481  
                                           l5511 04B0                                             l5089 14E7  
                                           l5265 1603                                             l4801 1553  
                                           l5185 01B3                                             l5441 1712  
                                           l5361 1689                                             l5353 1668  
                                           l5601 061B                                             l5409 148B  
                                           l5505 0472                                             l6081 0D4F  
                                           l6073 0D11                                             l5371 09BB  
                                           l4723 07E3                                             l5187 01E1  
                                           l5611 0672                                             l5515 04B8  
                                           l6091 0D8D                                             l5381 09D3  
                                           l4733 07F8                                             l4805 155F  
                                           l4709 1441                                             l5189 0204  
                                           l5437 16E6                                             l5357 1680  
                                           l5605 063A                                             l5613 0682  
                                           l6085 0D68                                             l6077 0D36  
                                           l5391 0A08                                             l5367 09B5  
                                           l4727 07EA                                             l4823 1465  
                                           l5279 159A                                             l4903 0F43  
                                           l4831 0E4C                                             l5447 1621  
                                           l5439 1701                                             l5359 164A  
                                           l6095 0DAF                                             l4753 1365  
                                           l5369 09AC                                             l4729 07F0  
                                           l4817 14B7                                             l4809 1568  
                                           l5529 0516                                             l5481 038D  
                                           l4747 125D                                             l5387 09DB  
                                           l4931 0F9D                                             l4923 0F90  
                                           l4915 0F68                                             l4851 0E9B  
                                           l4843 0E6C                                             l5635 06EE  
                                           l5571 0570                                             l5563 0540  
                                           l5491 03E5                                             l5483 0392  
                                           l5555 0852                                             l6099 0DD5  
                                           l5397 0A18                                             l5389 09DF  
                                           l4925 0F93                                             l4909 0F49  
                                           l4837 0E56                                             l5629 06C9  
                                           l5733 0AA2                                             l4783 15C3  
                                           l4775 15A5                                             l4695 1421  
                                           l4943 0FBD                                             l4863 0EB1  
                                           l4839 0E5F                                             l5591 05F9  
                                           l5567 0558                                             l5487 03B6  
                                           l5751 0AFC                                             l4777 15B1  
                                           l4953 0FCA                                             l4937 0FAC  
                                           l4881 0EF5                                             l4873 0ECE  
                                           l4865 0EBF                                             l5737 0ABB  
                                           l5667 13BB                                             l4787 15CC  
                                           l4939 0FB0                                             l4947 0FC5  
                                           l4875 0EDD                                             l4859 0EAF  
                                           l4955 0E30                                             l5579 059D  
                                           l5499 041B                                             l5747 0AE3  
                                           l4981 086E                                             l4869 0ECC  
                                           l5589 05F2                                             l5765 0B38  
                                           l5757 0B18                                             l4991 0876  
                                           l4975 0863                                             l4799 1547  
                                           l4879 0EEA                                             l4887 0F00  
                                           l4993 0882                                             l5785 123F  
                                           l4899 0F38                                             l5779 124C  
                                           l5971 0A27                                             ?_sen 0077  
                                           l4999 0894                                             l5983 0A3E  
                                           l5977 0A39                                             l5989 0A60  
                                           STR_1 1191                                             STR_2 1110  
                                           STR_3 11B1                                             STR_4 11A9  
                                           STR_5 1175                                             STR_6 1199  
                                           STR_7 10C9                                             STR_8 10BD  
                                           STR_9 11A5                                             _LATA 010C  
                                           _LATB 010D                                             _LATC 010E  
                                           u5105 15A8                                             u5125 15B2  
                                           u5205 1560                                             u5135 15BC  
                                           u5065 136C                                             u5145 15C4  
                                           u6034 1592                                             u5075 1371  
                                           u6035 1591                                             u5175 154A  
                                           u5195 1559                                             u5355 0F5E  
                                           i1l60 0B52                                             i1l71 0BAD  
                                           u5535 0879                                             u5295 0EC5  
                                           i1l72 0BB9                                             i1l65 0B80  
                                           u7065 0A82                                             i1l90 0C4C  
                                           i1l82 0C08                                             i1l66 0B88  
                                           u5555 0883                                             u5635 16A7  
                                           u5395 0F83                                             u5565 088D  
                                           i1l94 0C74                                             i1l86 0C28  
                                           u5814 1799                                             u5575 0895  
                                           u5815 1798                                             u5655 16B6  
                                           u6535 05E1                                             u7407 1487  
                                           i1l89 0C3E                                             u5665 16BD  
                                           u7417 070C                                             u6625 06B5  
                                           u7507 14C4                                             u5915 02A2  
                                           u7427 0722                                             u7517 14DC  
                                           u7437 0741                                             u5774 17E6  
                                           u5775 17E5                                             u7447 076D  
                                           u6575 0636                                             u7457 078F  
                                           u6585 0651                                             u7467 0903  
                                           u5964 0980                                             u7477 091B  
                                           u5885 023C                                             u5965 097E  
                                           u7397 146D                                             u7487 0923  
                                           u7497 0940                                             u5985 0991  
                                           _PLLR 04D6                                             _TMR0 0015  
                                           _WPUA 020C                                             _WPUB 020D  
                                           _WPUC 020E                  __end_of_I2C1_MasterReadTRBBuild 1540  
                                   __CFG_WRT$OFF 0000                                    __CFG_FCMEN$ON 0000  
                                           abs@a 0027                                             _data 0136  
                                           _devs 00E4                                             _atoi 09AC  
                                           _main 14E9                                             _init 0A1D  
                          exec_remote_cmd@status 00D5                                             fsr0h 0005  
                                           fsr1h 0007                                             indf0 0000  
                                           fsr0l 0004                                             indf1 0001  
                                           fsr1l 0006                           ??_I2C1_MasterTRBInsert 0022  
                                           btemp 007E                                    __CFG_BOREN$ON 0000  
                                           start 003C                   i2c1_write_no_data@write_status 0032  
                        command_handler@dev_addr 0063                                    __CFG_MCLRE$ON 0000  
                 I2C1_MasterWriteTRBBuild@length 0021                            __size_of_stop_handler 0003  
                                          ??_abs 0029                        __size_of_DATAEE_WriteByte 0023  
                                          ??_sen 004D                          __end_of_TMR0_Initialize 121C  
                                     _i2c1_state 00EB                                    __CFG_PLLEN$ON 0000  
                                     _i2c1_write 146C                                    ?_EUSART_Write 0077  
                 __size_of_OSCILLATOR_Initialize 0007                        I2C1_MasterTRBInsert@count 0023  
                  __end_of_OSCILLATOR_Initialize 11FF                        I2C1_MasterTRBInsert@pflag 0021  
                            PROTOCOL_Print_TLV@v 004B                                            ?_atoi 0026  
                                          ?_main 0077                                            ?_init 0077  
                                __end_of___awdiv 08AA                                __end_of_I2C1_Stop 12F5  
                                          STR_10 11A1                                            STR_11 111A  
                                          STR_20 1179                                            STR_12 1059  
                                          STR_21 1195                                            STR_13 114B  
                                          STR_30 1171                                            STR_22 1189  
                                          STR_14 1171                                            STR_31 10DA  
                                          STR_15 10DA                                            STR_23 119D  
                                          STR_40 1175                                            STR_32 117D  
                                          STR_16 1072                                            STR_24 1025  
                                          STR_41 1199                                            STR_33 118D  
                                          STR_25 1185                                            STR_17 103F  
                                  __CFG_WDTE$OFF 0000                                            STR_50 1152  
                                          STR_42 10F2                                            STR_34 109E  
                                          STR_18 1088                                            STR_26 100B  
                                          STR_19 1088                                            STR_27 1181  
                                          STR_43 116D                                            STR_35 113D  
                                          STR_51 112D                                            STR_60 1107  
                                          STR_44 11A5                                            STR_52 1161  
                                          STR_36 1158                                            STR_28 1144  
                                __end_of___awmod 16D2                                            STR_61 1171  
                                          STR_37 1191                                            STR_45 11A1  
                                          STR_29 11AD                                            STR_53 115D  
                                          STR_62 10DA                                            STR_46 111A  
                                          STR_54 112E                                            STR_38 10E8  
                                          STR_55 1171                                            STR_39 11A9  
                                          STR_47 1169                                            STR_63 1136  
                                          STR_56 10DA                                            STR_64 10FD  
                                          STR_48 1165                                            STR_57 1106  
                                          STR_65 10FC                                            STR_49 10D4  
                                          STR_66 10DF                                            STR_58 1161  
                                          STR_59 115D                                            STR_67 10DE  
                                          STR_68 1124                                            STR_69 10AF  
                                ___awdiv@divisor 0020                                  __end_of_add_dev 1800  
                                __end_of___lwdiv 15D1                                            i1l101 128C  
                                          i1l321 0015                                            i1l323 0021  
                                          i1l325 002D                                            i1l256 135F  
                                          i1l329 0037                                  __end_of___lwmod 156D  
                                ___awdiv@counter 0025                                            _MAX_Y 100A  
                                          _RCREG 0199                                            _RCSTA 019D  
                                          _TRISA 008C                                            _TRISB 008D  
                                          _TRISC 008E                                            _TXREG 019A  
                                __end_of_del_dev 17B2                                            _TXSTA 019E  
                                  _start_handler 11E6                     __end_of_I2C1_BusCollisionISR 0800  
                   __size_of_PROTOCOL_Initialize 0053                                ??_I2C1_MasterRead 002E  
                              ??_I2C1_Initialize 0020                                  _DATAEE_ReadByte 1228  
                                          _fetch 0809                  ??_PROTOCOL_Write_Device_Address 0023  
                                __end_of_dpowers 100A                                   _WDT_Initialize 11EE  
                 PROTOCOL_Initialize@inv_handler 0028                                  __end_of_isdigit 125F  
                                   ?_inv_handler 0077                                            _value 00E0  
                                          atoi@a 002B                                            atoi@s 0026  
                                          _putch 11F2                                            init@i 0031  
                                          init@y 0030                                   i2c1_write@pbuf 0030  
                                          pclath 000A                                  ??_print_dev_map 0044  
                                __end_of_put_cmd 1765                                            status 0003  
                                          wtemp0 007E                                     _stop_handler 11DA  
                                __end_of_strncmp 168C                  I2C1_MasterWriteTRBBuild@address 0022  
                             exec_remote_cmd@buf 00D7                               exec_remote_cmd@idx 00D2  
                                __initialization 003E                            I2C1_MasterWrite@pdata 002D  
                          I2C1_MasterWrite@pflag 002A                                     __end_of_atoi 0A1D  
                                   __end_of_main 1514                                     __end_of_init 0A97  
                                 ??_EUSART_Write 0020                      ?_INTERRUPT_InterruptManager 0077  
               PROTOCOL_Initialize@start_handler 0023                                      _i2c1_object 00D9  
                                         ??_atoi 0028                                           ??_main 006B  
                                         ??_init 0029                               __size_of_i2c1_read 0055  
                                 ?_start_handler 0077                                   scan_dev@status 003E  
                         __end_of_WDT_Initialize 11F2                                           ?_fetch 0077  
                                         i1S6177 11B4                                           _EEADRH 0192  
                                         _EEADRL 0191                                           _EEDATH 0194  
                                         _EEDATL 0193                                           _EECON2 0196  
                               ___awdiv@dividend 0022                                           _ANSELA 018C  
                                         ?_putch 0077                                           _ANSELB 018D  
                                         _ANSELC 018E                               _PROTOCOL_Loop_Func 012C  
                                         i1l5645 12F2                                           i1l5821 0B73  
                                         i1l5921 0C78                                           i1l5905 0C53  
                                         i1l5833 0B94                                           i1l5923 0C7B  
                                         i1l5931 0C88                                           i1l5925 0C7F  
                                         i1l5909 0C5A                                           i1l5853 0BD7  
                                         i1l5871 0BF5                                           i1l5839 0BA7  
                                         i1l5953 132F                                           i1l5893 0C30  
                                         i1l5885 0C16                                           i1l5877 0C02  
                                         _OSCCON 0099                 __size_of_TMR0_HasOverflowOccured 0004  
                                         _TMR0IF 005A                                           _SPBRGH 019C  
                                         _SPBRGL 019B                                           _WDTCON 0097  
                 PROTOCOL_Initialize@set_handler 0027                                ?_I2C1_MasterWrite 0027  
                                 __CFG_PWRTE$OFF 0000                                 __end_of_detected 159C  
                             ??_I2C1_MasterWrite 002B                          exec_remote_cmd@send_buf 00A0  
                             _PROTOCOL_Print_TLV 00B4                        PROTOCOL_Initialize@scaler 002A  
                                 _p_i2c1_current 0075                                           ___wmul 1362  
                                      ??___awdiv 0024                                   __CFG_STVREN$ON 0000  
                                      ??___awmod 0024                                        ??_add_dev 0029  
                                      ??___lwdiv 0024                                        ??___lwmod 002C  
                                         _concat 128F                                   add_dev@old_map 002D  
                                 add_dev@new_map 002E                                     _type_no_data 0160  
                            _EUSART_Transmit_ISR 1346                       ??_I2C1_MasterWriteTRBBuild 0024  
                               ?_TMR0_Initialize 0077                                      ?_i2c1_write 002E  
                                         _locked 013E                                        ?_I2C1_ISR 0077  
                                      ??_del_dev 0029                                 ___awdiv@quotient 0027  
                                check_plg@status 0042                                  ___awmod@divisor 0020  
                            ?_PROTOCOL_Print_TLV 0044                                 __end_of_scan_dev 1609  
                                ___awmod@counter 0025                                           _printf 0E2B  
                        __end_of_DATAEE_ReadByte 1235                                           _strcpy 130F  
               __size_of_I2C1_MasterReadTRBBuild 002C                                        ??_isdigit 0020  
                       __end_of_dev_map_iterator 09AC                                  ?_WDT_Initialize 0077  
                                    sen@dev_addr 0055                                        ??_put_cmd 002C  
                                 print_dev_map@i 0046                    I2C1_MasterWriteTRBBuild@pdata 0020  
                                      ??_strncmp 0026                        PROTOCOL_Send_uint8_t@pbuf 015D  
                           ?_EUSART_Transmit_ISR 0077                             ??_PROTOCOL_Print_TLV 0047  
                           __size_of_EUSART_Read 0020                                _SYSTEM_Initialize 12A1  
                        __end_of__initialization 00B0  PROTOCOL_Set_Extension_Handler@extension_handler 0020  
                             ?_SYSTEM_Initialize 0077                                __end_of_i2c1_read 0952  
                            exec_remote_cmd@data 00D6                                    __end_of_MAX_Y 100B  
                                 _i2c1_trb_count 00EA                            _I2C1_FunctionComplete 127E  
                           _I2C1_BusCollisionISR 07FF                                   __pcstackCOMMON 0077  
                         I2C1_MasterWrite@length 0027                                     __pidataBANK1 11E3  
                                   __pidataBANK2 11E0                              ??_SYSTEM_Initialize 0021  
                                  __end_of_fetch 0858                                 _DATAEE_WriteByte 13D9  
                             __size_of_check_plg 0015                                    __end_of_putch 11F8  
                                     ??_I2C1_ISR 0079                               command_handler@buf 005B  
                                ??_start_handler 0020                               command_handler@pos 006C  
                          __end_of_PROTOCOL_Loop 0E2B                   I2C1_MasterReadTRBBuild@address 0023  
                                 _OPTION_REGbits 0095                       i2c1_write_no_data@dev_addr 002E  
                                   init@dev_addr 002F                             one_shot_sen@dev_addr 005A  
                                        ??_fetch 0056                          PROTOCOL_Send_float@pbuf 0152  
                      __end_of_SYSTEM_Initialize 12B3                            ??_EUSART_Transmit_ISR 0077  
                           i2c1_read@read_status 0038                                          ??_putch 0022  
                                  ?_one_shot_sen 0077                                       __pbssBANK0 006B  
                                     __pbssBANK1 00D9                                       __pbssBANK2 0120  
                                     __pbssBANK3 01A0                                       __pbssBANK4 0220  
                                     __pbssBANK5 02A0                                       __pbssBANK6 0320  
                           __end_of_EUSART_Write 1444                       i2c1_write_no_data@reg_addr 0030  
                           __size_of_inv_handler 00A7                              __size_of_i2c1_write 0028  
                               command_handler@i 0064                 ??_PROTOCOL_Set_Extension_Handler 0022  
                ?_PROTOCOL_Set_Extension_Handler 0020                         __size_of_exec_remote_cmd 01F0  
                    __size_of_EUSART_Receive_ISR 001C                              _PROTOCOL_Initialize 08AA  
                          ?_I2C1_BusCollisionISR 0077                                       __pmaintext 14E9  
                             one_shot_sen@status 0059                                          ?___wmul 0020  
                                _I2C1_MasterRead 1444                                       __pintentry 0004  
                                        ?_concat 0020                                  _I2C1_Initialize 137E  
                                        _BAUDCON 019F                                       _device_id_ 0126  
                                        _APFCON0 011D                                          _APFCON1 011E  
                                        ?_printf 002E                                          ?_strcpy 0026  
                     __end_of_i2c1_write_no_data 14E9                                 ?_DATAEE_ReadByte 0077  
                                  _eusartRxCount 00E7                       PROTOCOL_Send_uint16_t@pbuf 015A  
                           ?_PROTOCOL_Initialize 0021                                        _I2C1_Stop 12DB  
                                        _OSCTUNE 0098                                        ?_detected 0077  
                                        _SSP1ADD 0212                                          _SSP1BUF 0211  
                                 ??_one_shot_sen 0056                           _PROTOCOL_Start_Handler 0132  
                              __end_of_check_plg 12DB                                  del_dev@dev_addr 0030  
                        _TMR0_HasOverflowOccured 11EA                    I2C1_MasterTRBInsert@ptrb_list 0020  
                           DATAEE_WriteByte@bAdd 0021                                        ?_scan_dev 0077  
                         ?_I2C1_FunctionComplete 0077                         __size_of_command_handler 01DA  
                  __size_of_I2C1_MasterTRBInsert 0057                                  add_dev@dev_addr 0030  
                             _p_i2c1_trb_current 0076                                          ___awdiv 0858  
                                        ___awmod 168C                                    ?_PROTOCOL_EXT 0077  
                                  ?_PROTOCOL_SAV 0077                                    ?_PROTOCOL_SET 0077  
                                  ?_PROTOCOL_STA 0077                                    ?_PROTOCOL_STP 0077  
                                __size_of___wmul 001C                                          _add_dev 17B2  
                                        ___lwdiv 159C                                          ___lwmod 1540  
                                __size_of_concat 0012                                          _del_dev 1765  
                                        _cmd_buf 2330                          _I2C1_MasterReadTRBBuild 1514  
                                        _dev_map 0120                                          _do_func 0140  
                                        __ptext1 0A1D                                          __ptext2 12A1  
                                        __ptext3 11EE                                          __ptext4 1211  
                                        __ptext5 139A                                          __ptext6 11F8  
                                        __ptext7 137E                                          __ptext8 12F5  
                                        __ptext9 0800                                  __size_of_printf 01D5  
                                __size_of_strcpy 001B                                          _dpowers 1000  
                          _OSCILLATOR_Initialize 11F8                                     __size_of_abs 000F  
                         i2c1_write@write_status 0034       PROTOCOL_Write_Device_Address@device_id_i2c 0024  
                          ??_PROTOCOL_Initialize 002B                                          _isdigit 1250  
                                   __size_of_sen 00B1                                          _readbuf 0142  
                   I2C1_MasterReadTRBBuild@pdata 0020                             I2C1_MasterRead@pdata 0028  
                                        _sec_cnt 013C                             I2C1_MasterRead@pflag 002D  
                               ___awmod@dividend 0022                                          _invoked 013D  
                       ??_PIN_MANAGER_Initialize 0020                                          _sendbuf 0250  
                                     ?_I2C1_Stop 0077                                       ??_detected 0029  
                                        _tmr_cnt 013B                                          _put_cmd 171A  
                     __size_of_SYSTEM_Initialize 0012                             I2C1_ISR@pi2c_buf_ptr 0134  
                                        clrloop0 121D                                          _running 00E5  
                                        _strncmp 164A                             end_of_initialization 00B0  
                          __end_of_print_dev_map 171A                                          sen@type 0052  
                                     ??_scan_dev 003B                       _PROTOCOL_Extension_Handler 012A  
                               i2c1_write@status 0035                          __end_of_I2C1_MasterRead 146C  
                         ??_I2C1_BusCollisionISR 0077                                _EUSART_Initialize 12F5  
                        __end_of_I2C1_Initialize 139A                               ?_EUSART_Initialize 0077  
                                      _RCSTAbits 019D                                          printf@c 0043  
                                        printf@f 002E                                   ??_PROTOCOL_EXT 0065  
                                 ??_PROTOCOL_SAV 0023                                   ??_PROTOCOL_SET 0020  
                                 ??_PROTOCOL_STA 0020                                   ??_PROTOCOL_STP 0020  
                              ??_exec_remote_cmd 0044                                     __pstringtext 1000  
                                   ??_i2c1_write 0032                              ??_EUSART_Initialize 0020  
                               ??_WDT_Initialize 0020                                    i2c1_read@pbuf 0033  
                      __size_of_I2C1_MasterWrite 002A                                __size_of_I2C1_ISR 0156  
                               __CFG_FOSC$INTOSC 0000                                ?_dev_map_iterator 0077  
                          __size_of_EUSART_Write 0025                        ??_TMR0_HasOverflowOccured 0020  
                          i2c1_write_no_data@buf 0033                                     inv_handler@t 00DE  
                             ??_dev_map_iterator 0020                                       _tmr_scaler 015E  
                       __end_of_DATAEE_WriteByte 13FC                I2C1_ISR@i2c_10bit_address_restart 00E8  
                      __end_of_EUSART_Initialize 130F                               __end_of_i2c1_write 1494  
                                    printf@width 0041                          I2C1_MasterWrite@address 0028  
                                      _i2c1_read 08FD                        ??_I2C1_MasterReadTRBBuild 0025  
                           __end_of_one_shot_sen 164A                                   __end_of___wmul 137E  
                              ??_command_handler 005C                          I2C1_MasterWrite@trBlock 014D  
                                   _EUSART_Write 141F                                   __end_of_concat 12A1  
                       I2C1_Stop@completion_code 0078                           ?_OSCILLATOR_Initialize 0077  
                                  i2c1_write@len 0031                                   __end_of_printf 1000  
                                 __end_of_strcpy 132A                                   PROTOCOL_Loop@c 0069  
                            start_initialization 003E                                      ??_I2C1_Stop 0077  
                       __size_of_TMR0_Initialize 000B                  __size_of_PIN_MANAGER_Initialize 001F  
                                    __end_of_abs 126E                                      __end_of_sen 07A8  
                                  ??_EUSART_Read 0020                __size_of_I2C1_MasterWriteTRBBuild 0023  
                                    putch@txData 0022                        ?_I2C1_MasterWriteTRBBuild 0020  
                       dev_map_iterator@dev_addr 0027                      __size_of_PROTOCOL_Print_TLV 0279  
                             dev_map_iterator@xx 00E3                               dev_map_iterator@yy 00E2  
                            DATAEE_ReadByte@bAdd 0020                                 ?_I2C1_MasterRead 0028  
                               ?_I2C1_Initialize 0077                                       ?_i2c1_read 0030  
                                       ??___wmul 0024                         PROTOCOL_Send_int8_t@pbuf 015C  
                            inv_handler@cmd_next 00ED             __end_of_PROTOCOL_Read_Device_Address 11E0  
          __size_of_PROTOCOL_Read_Device_Address 0003                     _PROTOCOL_Read_Device_Address 11DD  
                                       ??_concat 0022                                      __pdataBANK1 00EC  
                               scan_dev@dev_addr 003F                                      __pdataBANK2 015E  
                                       ??_printf 0034                                         ??_strcpy 0029  
                   I2C1_MasterWriteTRBBuild@ptrb 0026                            __end_of_start_handler 11EA  
                                    __pbssBIGRAM 2330                      __end_of_EUSART_Transmit_ISR 1362  
                                    __pbssCOMMON 0070                                        ___latbits 0002  
                                  __pcstackBANK0 0020                                    __pcstackBANK1 00A0  
                                  _i2c1_tr_queue 0155                             _PROTOCOL_Inv_Handler 0128  
                                   _isdigit$1451 0020                                    ??_inv_handler 005D  
                           __end_of_PROTOCOL_EXT 12C6                             __end_of_PROTOCOL_SAV 1211  
                           __end_of_PROTOCOL_SET 1207                             __end_of_PROTOCOL_STA 1250  
                           __end_of_PROTOCOL_STP 1242                                __size_of_detected 002F  
                             _i2c1_write_no_data 14BE                       __end_of_EUSART_Receive_ISR 1346  
                PROTOCOL_Initialize@stop_handler 0025                          ??_I2C1_FunctionComplete 0077  
                     __size_of_EUSART_Initialize 001A                                    ?_stop_handler 0077  
                            __end_of_EUSART_Read 13D9                           __size_of_PROTOCOL_Loop 0197  
                                      _check_plg 12C6            __end_of_PROTOCOL_Write_Device_Address 127E  
         __size_of_PROTOCOL_Write_Device_Address 0010                    _PROTOCOL_Write_Device_Address 126E  
                            ?_i2c1_write_no_data 002E                                 ___lwdiv@dividend 0022  
                         _PIN_MANAGER_Initialize 139A                                __size_of_scan_dev 0038  
                           EUSART_Read@readValue 0021                                         ?___awdiv 0020  
                                       ?___awmod 0020                           PROTOCOL_Print_TLV@type 0044  
                                       ?_add_dev 0077                                         ?___lwdiv 0020  
                                       ?___lwmod 0028                                     _eusartRxHead 0071  
                                   _eusartTxHead 0074                                     _eusartRxTail 0070  
                                   _eusartTxTail 0073                                         _I2C1_ISR 0B3E  
                                       ?_del_dev 0077                    ?_PROTOCOL_Read_Device_Address 0077  
                   ??_INTERRUPT_InterruptManager 007D                        PROTOCOL_Send_int16_t@pbuf 0158  
                                      __pswtext1 11B4                                 _I2C1_MasterWrite 1494  
                        _eusartTxBufferRemaining 0072                     __end_of_I2C1_MasterTRBInsert 07FF  
                       PROTOCOL_Print_TLV@length 0045                                         ?_isdigit 0077  
                           ??_i2c1_write_no_data 0031                           I2C1_MasterRead@address 002B  
                          dev_map_iterator@exist 0026                                   del_dev@old_map 002D  
                                 del_dev@new_map 002E                            dev_map_iterator@start 015F  
                                       ?_put_cmd 0077                                 ___lwdiv@quotient 0026  
                                 __size_of_fetch 004F                         __size_of_DATAEE_ReadByte 000D  
                                       ?_strncmp 0020                                   __size_of_putch 0006  
                                 _eusartRxBuffer 0320                      I2C1_MasterReadTRBBuild@ptrb 0027  
                                 ??_stop_handler 0020                           I2C1_MasterRead@trBlock 0148  
                              ??_TMR0_Initialize 0020                                   _eusartTxBuffer 02A0  
                                _exec_remote_cmd 032D                                   ___wmul@product 0024  
                                       _LATCbits 010E                             _PROTOCOL_Set_Handler 012E  
                                     ?_check_plg 0077                                        clear_ram0 121C  
                            __end_of_inv_handler 0B3E                                         _PIE1bits 0091  
                                       _PIE2bits 0092                            __size_of_one_shot_sen 0041  
            __size_of_INTERRUPT_InterruptManager 0038                                         _PIR1bits 0011  
                                       _PIR2bits 0012                                        detected@x 002D  
                                      detected@y 002C                                      ??_i2c1_read 0036  
                                       _SSP1CON1 0215                                         _SSP1CON3 0217  
                   PROTOCOL_Initialize@device_id 0021                                        _timer_cnt 0141  
                                       _SSP1STAT 0214                                     i2c1_read@len 0035  
                                   i2c1_read@reg 0039                                   _readbuf_status 0139  
                          _PROTOCOL_Stop_Handler 0130                      __end_of_PROTOCOL_Initialize 08FD  
                                      concat@lsb 0020                                        concat@msb 0027  
                              ___wmul@multiplier 0020                                    _PROTOCOL_Loop 0C94  
                                  detected@exist 002E                                       printf@flag 0040  
                                     printf@prec 0038                            DATAEE_WriteByte@bData 0020  
                              i2c1_read@dev_addr 0030                                      _EUSART_Read 13B9  
                                   _one_shot_sen 1609                                ?_DATAEE_WriteByte 0020  
                             i2c1_write@dev_addr 002E                               ??_DATAEE_WriteByte 0021  
                                  _slave_address 013F                                       put_cmd@buf 0031  
                              i2c1_read@reg_addr 0032                                       put_cmd@idx 00EC  
                                _command_handler 051D                                       _EECON1bits 0195  
                             PROTOCOL_SET@value_ 0021                        __size_of_dev_map_iterator 005A  
                  __size_of_I2C1_BusCollisionISR 0001                           I2C1_ISR@i2c_bytes_left 00E9  
                        ??_OSCILLATOR_Initialize 0020                   ?_PROTOCOL_Write_Device_Address 0077  
                               __size_of___awdiv 0052                                 __size_of___awmod 0046  
                                      sen@length 0053                                 __size_of_add_dev 004E  
                               __size_of___lwdiv 0035                                 __size_of___lwmod 002D  
               __end_of_I2C1_MasterWriteTRBBuild 141F                                   ?_PROTOCOL_Loop 0077  
                               __size_of_del_dev 004D                                        sen@status 0054  
                         __size_of_print_dev_map 0048                            __size_of_PROTOCOL_EXT 0013  
                          __size_of_PROTOCOL_SAV 000A                            __size_of_PROTOCOL_SET 0008  
                          __size_of_PROTOCOL_STA 000E                            __size_of_PROTOCOL_STP 000D  
                 ??_PROTOCOL_Read_Device_Address 0020                                         add_dev@x 002C  
                                       add_dev@y 002F                                 __size_of_isdigit 000F  
                                ___lwdiv@divisor 0020                          __end_of_exec_remote_cmd 051D  
                            I2C1_ISR@i2c_address 006D                                  ___lwdiv@counter 0025  
                                       _detected 156D                                         __ptext10 0C94  
                                       __ptext11 0A97                                         __ptext20 11FF  
                                       __ptext12 0809                                         __ptext21 1207  
                                       __ptext13 032D                                         __ptext30 1609  
                                       __ptext22 11DD                                         __ptext14 146C  
                                       __ptext31 06F7                                         __ptext23 12B3  
                                       __ptext15 11EA                                         __ptext40 168C  
                                       __ptext32 00B4                                         __ptext24 051D  
                                       __ptext16 126E                                         __ptext41 156D  
                                       __ptext33 0E2B                                         __ptext25 164A  
                                       __ptext17 1235                                         __ptext50 14BE  
                                       __ptext42 12C6                                         __ptext34 11F2  
                                       __ptext26 171A                                         __ptext18 1242  
                                       __ptext51 1494                                         __ptext43 15D1  
                                       __ptext35 141F                                         __ptext27 130F  
                                       __ptext19 11E6                                         __ptext60 11DA  
                                       __ptext52 13FC                                         __ptext44 08FD  
                                       __ptext36 1540                                         __ptext28 16D2  
                                       __ptext61 1228                                         __ptext53 07A8  
                                       __ptext45 1444                                         __ptext37 159C  
                                       __ptext29 0952                                         __ptext54 09AC  
                                       __ptext46 1514                                         __ptext38 128F  
                                       __ptext63 0B3E                                         __ptext55 1250  
                                       __ptext47 1765                                         __ptext39 125F  
                                       __ptext64 12DB                                         __ptext56 1362  
                                       __ptext48 17B2                                         __ptext65 127E  
                                       __ptext57 13D9                                         __ptext49 0858  
                                       __ptext66 07FF                                         __ptext58 13B9  
                                       __ptext67 1346                                         __ptext59 08AA  
                                       __ptext68 132A                                    fetch@dev_addr 005C  
                                   _SSP1CON1bits 0215                                     _SSP1CON2bits 0216  
                                       _float100 0124                                      _inv_handler 0A97  
                               __size_of_put_cmd 004B                      DATAEE_WriteByte@GIEBitValue 0022  
                               __size_of_strncmp 0042                                       strcpy@from 0028  
                                  __size_of_atoi 0071                                    __size_of_main 002B  
                                  __size_of_init 007A                                         _read_buf 01BC  
                                       del_dev@x 002C                                         del_dev@y 002F  
                  I2C1_MasterReadTRBBuild@length 0022                            I2C1_MasterRead@length 002A  
                                       _scan_dev 15D1                                      ??_check_plg 0040  
                                     strncmp@len 0024                                ??_DATAEE_ReadByte 0020  
                                       _schedule 01A0                             _I2C1_MasterTRBInsert 07A8  
                        _BACKPLANE_SLAVE_ADDRESS 00EE                                         fetch@sch 005A  
                                       fetch@pos 005B                                         int$flags 007E  
                                       atoi@sign 002A                                     _PROTOCOL_EXT 12B3  
                                   _PROTOCOL_SAV 1207                                     _PROTOCOL_SET 11FF  
                                   _PROTOCOL_STA 1242                                     _PROTOCOL_STP 1235  
             __end_of_INTERRUPT_InterruptManager 003C                       _INTERRUPT_InterruptManager 0004  
                                      printf@len 003E                                        printf@val 003C  
                           __end_of_stop_handler 11DD                         ?_TMR0_HasOverflowOccured 0077  
                                     _INTCONbits 000B                                         isdigit@c 0021  
                     __end_of_PROTOCOL_Print_TLV 032D                          __end_of_command_handler 06F7  
                        __size_of_WDT_Initialize 0004                                         intlevel1 0000  
                               ___lwmod@dividend 002A                          ?_PIN_MANAGER_Initialize 0077  
                       __end_of_I2C1_MasterWrite 14BE                                __CFG_CLKOUTEN$OFF 0000  
                 __size_of_I2C1_FunctionComplete 0011                    __end_of_I2C1_FunctionComplete 128F  
                                  _print_dev_map 16D2                            ?_I2C1_MasterTRBInsert 0020  
                                      strncmp@s1 0020                                        strncmp@s2 0022  
                       ?_I2C1_MasterReadTRBBuild 0020                       PROTOCOL_Print_TLV@dev_addr 004A  
                        _backplane_slave_enabled 0138                                         printf@ap 003B  
                                       printf@cp 0039                               _EUSART_Receive_ISR 132A  
                                ??_PROTOCOL_Loop 0067                         __size_of_I2C1_MasterRead 0028  
                       __size_of_I2C1_Initialize 001C                                  i2c1_read@status 003A  
                                     _OPTION_REG 0095                              ?_EUSART_Receive_ISR 0077  
                               print_dev_map@len 0047                                  ___lwmod@divisor 0028  
                                _TMR0_Initialize 1211                                         strcpy@cp 002A  
                                       strcpy@to 0026                                  ___lwmod@counter 002D  
                       _I2C1_MasterWriteTRBBuild 13FC                      PROTOCOL_Loop@device_address 006A  
                               ?_exec_remote_cmd 0077                                      fetch@status 0059  
                           PROTOCOL_EXT@char_buf 0066                               EUSART_Write@txData 0021  
                   __size_of_EUSART_Transmit_ISR 001C                        PROTOCOL_Print_TLV@pbuffer 0046  
                 __end_of_PIN_MANAGER_Initialize 13B9                               __size_of_I2C1_Stop 001A  
                                 ?_print_dev_map 0077                             ??_EUSART_Receive_ISR 0077  
                               _dev_map_iterator 0952                           __size_of_start_handler 0004  
