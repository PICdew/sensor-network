

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Thu Sep 28 01:35:40 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F1829
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	idataBANK1,global,class=CODE,delta=2
     7                           	psect	stringtext,global,class=STRCODE,delta=2
     8                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	inittext,global,class=CODE,delta=2
    19                           	psect	clrtext,global,class=CODE,delta=2
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    27                           	psect	text5,local,class=CODE,merge=1,delta=2,group=4
    28                           	psect	text6,local,class=CODE,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2,group=4
    32                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2,group=4
    37                           	psect	text15,local,class=CODE,merge=1,delta=2,group=4
    38                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,delta=2,group=4
    44                           	psect	text22,local,class=CODE,merge=1,delta=2,group=4
    45                           	psect	text23,local,class=CODE,merge=1,delta=2,group=4
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2,group=1
    48                           	psect	text26,local,class=CODE,merge=1,delta=2,group=1
    49                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    50                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    51                           	psect	text29,local,class=CODE,merge=1,delta=2,group=1
    52                           	psect	text30,local,class=CODE,merge=1,delta=2
    53                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    54                           	psect	text32,local,class=CODE,merge=1,delta=2
    55                           	psect	text33,local,class=CODE,merge=1,delta=2,group=1
    56                           	psect	text34,local,class=CODE,merge=1,delta=2
    57                           	psect	text35,local,class=CODE,merge=1,delta=2
    58                           	psect	text36,local,class=CODE,merge=1,delta=2
    59                           	psect	text37,local,class=CODE,merge=1,delta=2
    60                           	psect	text38,local,class=CODE,merge=1,delta=2,group=1
    61                           	psect	text39,local,class=CODE,merge=1,delta=2
    62                           	psect	text40,local,class=CODE,merge=1,delta=2
    63                           	psect	intentry,global,class=CODE,delta=2
    64                           	psect	text42,local,class=CODE,merge=1,delta=2
    65                           	psect	text43,local,class=CODE,merge=1,delta=2
    66                           	psect	swtext1,local,class=CONST,delta=2
    67                           	psect	text44,local,class=CODE,merge=1,delta=2
    68                           	psect	text45,local,class=CODE,merge=1,delta=2
    69                           	psect	text46,local,class=CODE,merge=1,delta=2
    70                           	psect	text47,local,class=CODE,merge=1,delta=2
    71                           	psect	text48,local,class=CODE,merge=1,delta=2
    72                           	psect	text49,local,class=CODE,merge=1,delta=2
    73                           	psect	text50,local,class=CODE,merge=1,delta=2,group=1
    74                           	psect	text51,local,class=CODE,merge=1,delta=2,group=1
    75                           	psect	text52,local,class=CODE,merge=1,delta=2,group=1
    76                           	psect	text53,local,class=CODE,merge=1,delta=2,group=1
    77                           	psect	text54,local,class=CODE,merge=1,delta=2,group=1
    78                           	psect	text55,local,class=CODE,merge=1,delta=2,group=1
    79                           	psect	text56,local,class=CODE,merge=1,delta=2,group=1
    80                           	psect	text57,local,class=CODE,merge=1,delta=2
    81                           	psect	text58,local,class=CODE,merge=1,delta=2
    82                           	dabs	1,0x7E,2
    83  0000                     
    84                           ; Version 1.41 (B)
    85                           ; Generated 21/02/2017 GMT
    86                           ; 
    87                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    88                           ; All rights reserved.
    89                           ; 
    90                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    91                           ; 
    92                           ; Redistribution and use in source and binary forms, with or without modification, are
    93                           ; permitted provided that the following conditions are met:
    94                           ; 
    95                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    96                           ;        conditions and the following disclaimer.
    97                           ; 
    98                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    99                           ;        of conditions and the following disclaimer in the documentation and/or other
   100                           ;        materials provided with the distribution.
   101                           ; 
   102                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   103                           ;        software without specific prior written permission.
   104                           ; 
   105                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   106                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   107                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   108                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   109                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   110                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   111                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   112                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   113                           ; 
   114                           ; 
   115                           ; Code-generator required, PIC16F1829 Definitions
   116                           ; 
   117                           ; SFR Addresses
   118  0000                     	;# 
   119  0001                     	;# 
   120  0002                     	;# 
   121  0003                     	;# 
   122  0004                     	;# 
   123  0005                     	;# 
   124  0006                     	;# 
   125  0007                     	;# 
   126  0008                     	;# 
   127  0009                     	;# 
   128  000A                     	;# 
   129  000B                     	;# 
   130  000C                     	;# 
   131  000D                     	;# 
   132  000E                     	;# 
   133  0011                     	;# 
   134  0012                     	;# 
   135  0013                     	;# 
   136  0014                     	;# 
   137  0015                     	;# 
   138  0016                     	;# 
   139  0016                     	;# 
   140  0017                     	;# 
   141  0018                     	;# 
   142  0019                     	;# 
   143  001A                     	;# 
   144  001B                     	;# 
   145  001C                     	;# 
   146  001E                     	;# 
   147  001F                     	;# 
   148  008C                     	;# 
   149  008D                     	;# 
   150  008E                     	;# 
   151  0091                     	;# 
   152  0092                     	;# 
   153  0093                     	;# 
   154  0094                     	;# 
   155  0095                     	;# 
   156  0096                     	;# 
   157  0097                     	;# 
   158  0098                     	;# 
   159  0099                     	;# 
   160  009A                     	;# 
   161  009B                     	;# 
   162  009B                     	;# 
   163  009C                     	;# 
   164  009D                     	;# 
   165  009E                     	;# 
   166  010C                     	;# 
   167  010D                     	;# 
   168  010E                     	;# 
   169  0111                     	;# 
   170  0112                     	;# 
   171  0113                     	;# 
   172  0114                     	;# 
   173  0115                     	;# 
   174  0116                     	;# 
   175  0117                     	;# 
   176  0118                     	;# 
   177  0119                     	;# 
   178  011A                     	;# 
   179  011B                     	;# 
   180  011D                     	;# 
   181  011E                     	;# 
   182  018C                     	;# 
   183  018D                     	;# 
   184  018E                     	;# 
   185  0191                     	;# 
   186  0191                     	;# 
   187  0192                     	;# 
   188  0193                     	;# 
   189  0193                     	;# 
   190  0193                     	;# 
   191  0194                     	;# 
   192  0195                     	;# 
   193  0196                     	;# 
   194  0199                     	;# 
   195  019A                     	;# 
   196  019B                     	;# 
   197  019B                     	;# 
   198  019C                     	;# 
   199  019D                     	;# 
   200  019E                     	;# 
   201  019F                     	;# 
   202  020C                     	;# 
   203  020D                     	;# 
   204  020E                     	;# 
   205  0211                     	;# 
   206  0211                     	;# 
   207  0212                     	;# 
   208  0212                     	;# 
   209  0213                     	;# 
   210  0213                     	;# 
   211  0214                     	;# 
   212  0214                     	;# 
   213  0215                     	;# 
   214  0215                     	;# 
   215  0215                     	;# 
   216  0216                     	;# 
   217  0216                     	;# 
   218  0217                     	;# 
   219  0217                     	;# 
   220  0219                     	;# 
   221  021A                     	;# 
   222  021B                     	;# 
   223  021C                     	;# 
   224  021D                     	;# 
   225  021E                     	;# 
   226  021F                     	;# 
   227  0291                     	;# 
   228  0291                     	;# 
   229  0292                     	;# 
   230  0293                     	;# 
   231  0294                     	;# 
   232  0295                     	;# 
   233  0295                     	;# 
   234  0296                     	;# 
   235  0298                     	;# 
   236  0298                     	;# 
   237  0299                     	;# 
   238  029A                     	;# 
   239  029B                     	;# 
   240  029C                     	;# 
   241  029D                     	;# 
   242  029E                     	;# 
   243  0311                     	;# 
   244  0311                     	;# 
   245  0312                     	;# 
   246  0313                     	;# 
   247  0318                     	;# 
   248  0318                     	;# 
   249  0319                     	;# 
   250  031A                     	;# 
   251  038C                     	;# 
   252  038D                     	;# 
   253  038E                     	;# 
   254  0391                     	;# 
   255  0392                     	;# 
   256  0393                     	;# 
   257  0394                     	;# 
   258  0395                     	;# 
   259  0396                     	;# 
   260  039A                     	;# 
   261  039C                     	;# 
   262  039D                     	;# 
   263  039E                     	;# 
   264  039F                     	;# 
   265  0415                     	;# 
   266  0416                     	;# 
   267  0417                     	;# 
   268  041C                     	;# 
   269  041D                     	;# 
   270  041E                     	;# 
   271  0FE4                     	;# 
   272  0FE5                     	;# 
   273  0FE6                     	;# 
   274  0FE7                     	;# 
   275  0FE8                     	;# 
   276  0FE9                     	;# 
   277  0FEA                     	;# 
   278  0FEB                     	;# 
   279  0FED                     	;# 
   280  0FEE                     	;# 
   281  0FEF                     	;# 
   282  0000                     	;# 
   283  0001                     	;# 
   284  0002                     	;# 
   285  0003                     	;# 
   286  0004                     	;# 
   287  0005                     	;# 
   288  0006                     	;# 
   289  0007                     	;# 
   290  0008                     	;# 
   291  0009                     	;# 
   292  000A                     	;# 
   293  000B                     	;# 
   294  000C                     	;# 
   295  000D                     	;# 
   296  000E                     	;# 
   297  0011                     	;# 
   298  0012                     	;# 
   299  0013                     	;# 
   300  0014                     	;# 
   301  0015                     	;# 
   302  0016                     	;# 
   303  0016                     	;# 
   304  0017                     	;# 
   305  0018                     	;# 
   306  0019                     	;# 
   307  001A                     	;# 
   308  001B                     	;# 
   309  001C                     	;# 
   310  001E                     	;# 
   311  001F                     	;# 
   312  008C                     	;# 
   313  008D                     	;# 
   314  008E                     	;# 
   315  0091                     	;# 
   316  0092                     	;# 
   317  0093                     	;# 
   318  0094                     	;# 
   319  0095                     	;# 
   320  0096                     	;# 
   321  0097                     	;# 
   322  0098                     	;# 
   323  0099                     	;# 
   324  009A                     	;# 
   325  009B                     	;# 
   326  009B                     	;# 
   327  009C                     	;# 
   328  009D                     	;# 
   329  009E                     	;# 
   330  010C                     	;# 
   331  010D                     	;# 
   332  010E                     	;# 
   333  0111                     	;# 
   334  0112                     	;# 
   335  0113                     	;# 
   336  0114                     	;# 
   337  0115                     	;# 
   338  0116                     	;# 
   339  0117                     	;# 
   340  0118                     	;# 
   341  0119                     	;# 
   342  011A                     	;# 
   343  011B                     	;# 
   344  011D                     	;# 
   345  011E                     	;# 
   346  018C                     	;# 
   347  018D                     	;# 
   348  018E                     	;# 
   349  0191                     	;# 
   350  0191                     	;# 
   351  0192                     	;# 
   352  0193                     	;# 
   353  0193                     	;# 
   354  0193                     	;# 
   355  0194                     	;# 
   356  0195                     	;# 
   357  0196                     	;# 
   358  0199                     	;# 
   359  019A                     	;# 
   360  019B                     	;# 
   361  019B                     	;# 
   362  019C                     	;# 
   363  019D                     	;# 
   364  019E                     	;# 
   365  019F                     	;# 
   366  020C                     	;# 
   367  020D                     	;# 
   368  020E                     	;# 
   369  0211                     	;# 
   370  0211                     	;# 
   371  0212                     	;# 
   372  0212                     	;# 
   373  0213                     	;# 
   374  0213                     	;# 
   375  0214                     	;# 
   376  0214                     	;# 
   377  0215                     	;# 
   378  0215                     	;# 
   379  0215                     	;# 
   380  0216                     	;# 
   381  0216                     	;# 
   382  0217                     	;# 
   383  0217                     	;# 
   384  0219                     	;# 
   385  021A                     	;# 
   386  021B                     	;# 
   387  021C                     	;# 
   388  021D                     	;# 
   389  021E                     	;# 
   390  021F                     	;# 
   391  0291                     	;# 
   392  0291                     	;# 
   393  0292                     	;# 
   394  0293                     	;# 
   395  0294                     	;# 
   396  0295                     	;# 
   397  0295                     	;# 
   398  0296                     	;# 
   399  0298                     	;# 
   400  0298                     	;# 
   401  0299                     	;# 
   402  029A                     	;# 
   403  029B                     	;# 
   404  029C                     	;# 
   405  029D                     	;# 
   406  029E                     	;# 
   407  0311                     	;# 
   408  0311                     	;# 
   409  0312                     	;# 
   410  0313                     	;# 
   411  0318                     	;# 
   412  0318                     	;# 
   413  0319                     	;# 
   414  031A                     	;# 
   415  038C                     	;# 
   416  038D                     	;# 
   417  038E                     	;# 
   418  0391                     	;# 
   419  0392                     	;# 
   420  0393                     	;# 
   421  0394                     	;# 
   422  0395                     	;# 
   423  0396                     	;# 
   424  039A                     	;# 
   425  039C                     	;# 
   426  039D                     	;# 
   427  039E                     	;# 
   428  039F                     	;# 
   429  0415                     	;# 
   430  0416                     	;# 
   431  0417                     	;# 
   432  041C                     	;# 
   433  041D                     	;# 
   434  041E                     	;# 
   435  0FE4                     	;# 
   436  0FE5                     	;# 
   437  0FE6                     	;# 
   438  0FE7                     	;# 
   439  0FE8                     	;# 
   440  0FE9                     	;# 
   441  0FEA                     	;# 
   442  0FEB                     	;# 
   443  0FED                     	;# 
   444  0FEE                     	;# 
   445  0FEF                     	;# 
   446  0000                     	;# 
   447  0001                     	;# 
   448  0002                     	;# 
   449  0003                     	;# 
   450  0004                     	;# 
   451  0005                     	;# 
   452  0006                     	;# 
   453  0007                     	;# 
   454  0008                     	;# 
   455  0009                     	;# 
   456  000A                     	;# 
   457  000B                     	;# 
   458  000C                     	;# 
   459  000D                     	;# 
   460  000E                     	;# 
   461  0011                     	;# 
   462  0012                     	;# 
   463  0013                     	;# 
   464  0014                     	;# 
   465  0015                     	;# 
   466  0016                     	;# 
   467  0016                     	;# 
   468  0017                     	;# 
   469  0018                     	;# 
   470  0019                     	;# 
   471  001A                     	;# 
   472  001B                     	;# 
   473  001C                     	;# 
   474  001E                     	;# 
   475  001F                     	;# 
   476  008C                     	;# 
   477  008D                     	;# 
   478  008E                     	;# 
   479  0091                     	;# 
   480  0092                     	;# 
   481  0093                     	;# 
   482  0094                     	;# 
   483  0095                     	;# 
   484  0096                     	;# 
   485  0097                     	;# 
   486  0098                     	;# 
   487  0099                     	;# 
   488  009A                     	;# 
   489  009B                     	;# 
   490  009B                     	;# 
   491  009C                     	;# 
   492  009D                     	;# 
   493  009E                     	;# 
   494  010C                     	;# 
   495  010D                     	;# 
   496  010E                     	;# 
   497  0111                     	;# 
   498  0112                     	;# 
   499  0113                     	;# 
   500  0114                     	;# 
   501  0115                     	;# 
   502  0116                     	;# 
   503  0117                     	;# 
   504  0118                     	;# 
   505  0119                     	;# 
   506  011A                     	;# 
   507  011B                     	;# 
   508  011D                     	;# 
   509  011E                     	;# 
   510  018C                     	;# 
   511  018D                     	;# 
   512  018E                     	;# 
   513  0191                     	;# 
   514  0191                     	;# 
   515  0192                     	;# 
   516  0193                     	;# 
   517  0193                     	;# 
   518  0193                     	;# 
   519  0194                     	;# 
   520  0195                     	;# 
   521  0196                     	;# 
   522  0199                     	;# 
   523  019A                     	;# 
   524  019B                     	;# 
   525  019B                     	;# 
   526  019C                     	;# 
   527  019D                     	;# 
   528  019E                     	;# 
   529  019F                     	;# 
   530  020C                     	;# 
   531  020D                     	;# 
   532  020E                     	;# 
   533  0211                     	;# 
   534  0211                     	;# 
   535  0212                     	;# 
   536  0212                     	;# 
   537  0213                     	;# 
   538  0213                     	;# 
   539  0214                     	;# 
   540  0214                     	;# 
   541  0215                     	;# 
   542  0215                     	;# 
   543  0215                     	;# 
   544  0216                     	;# 
   545  0216                     	;# 
   546  0217                     	;# 
   547  0217                     	;# 
   548  0219                     	;# 
   549  021A                     	;# 
   550  021B                     	;# 
   551  021C                     	;# 
   552  021D                     	;# 
   553  021E                     	;# 
   554  021F                     	;# 
   555  0291                     	;# 
   556  0291                     	;# 
   557  0292                     	;# 
   558  0293                     	;# 
   559  0294                     	;# 
   560  0295                     	;# 
   561  0295                     	;# 
   562  0296                     	;# 
   563  0298                     	;# 
   564  0298                     	;# 
   565  0299                     	;# 
   566  029A                     	;# 
   567  029B                     	;# 
   568  029C                     	;# 
   569  029D                     	;# 
   570  029E                     	;# 
   571  0311                     	;# 
   572  0311                     	;# 
   573  0312                     	;# 
   574  0313                     	;# 
   575  0318                     	;# 
   576  0318                     	;# 
   577  0319                     	;# 
   578  031A                     	;# 
   579  038C                     	;# 
   580  038D                     	;# 
   581  038E                     	;# 
   582  0391                     	;# 
   583  0392                     	;# 
   584  0393                     	;# 
   585  0394                     	;# 
   586  0395                     	;# 
   587  0396                     	;# 
   588  039A                     	;# 
   589  039C                     	;# 
   590  039D                     	;# 
   591  039E                     	;# 
   592  039F                     	;# 
   593  0415                     	;# 
   594  0416                     	;# 
   595  0417                     	;# 
   596  041C                     	;# 
   597  041D                     	;# 
   598  041E                     	;# 
   599  0FE4                     	;# 
   600  0FE5                     	;# 
   601  0FE6                     	;# 
   602  0FE7                     	;# 
   603  0FE8                     	;# 
   604  0FE9                     	;# 
   605  0FEA                     	;# 
   606  0FEB                     	;# 
   607  0FED                     	;# 
   608  0FEE                     	;# 
   609  0FEF                     	;# 
   610  0000                     	;# 
   611  0001                     	;# 
   612  0002                     	;# 
   613  0003                     	;# 
   614  0004                     	;# 
   615  0005                     	;# 
   616  0006                     	;# 
   617  0007                     	;# 
   618  0008                     	;# 
   619  0009                     	;# 
   620  000A                     	;# 
   621  000B                     	;# 
   622  000C                     	;# 
   623  000D                     	;# 
   624  000E                     	;# 
   625  0011                     	;# 
   626  0012                     	;# 
   627  0013                     	;# 
   628  0014                     	;# 
   629  0015                     	;# 
   630  0016                     	;# 
   631  0016                     	;# 
   632  0017                     	;# 
   633  0018                     	;# 
   634  0019                     	;# 
   635  001A                     	;# 
   636  001B                     	;# 
   637  001C                     	;# 
   638  001E                     	;# 
   639  001F                     	;# 
   640  008C                     	;# 
   641  008D                     	;# 
   642  008E                     	;# 
   643  0091                     	;# 
   644  0092                     	;# 
   645  0093                     	;# 
   646  0094                     	;# 
   647  0095                     	;# 
   648  0096                     	;# 
   649  0097                     	;# 
   650  0098                     	;# 
   651  0099                     	;# 
   652  009A                     	;# 
   653  009B                     	;# 
   654  009B                     	;# 
   655  009C                     	;# 
   656  009D                     	;# 
   657  009E                     	;# 
   658  010C                     	;# 
   659  010D                     	;# 
   660  010E                     	;# 
   661  0111                     	;# 
   662  0112                     	;# 
   663  0113                     	;# 
   664  0114                     	;# 
   665  0115                     	;# 
   666  0116                     	;# 
   667  0117                     	;# 
   668  0118                     	;# 
   669  0119                     	;# 
   670  011A                     	;# 
   671  011B                     	;# 
   672  011D                     	;# 
   673  011E                     	;# 
   674  018C                     	;# 
   675  018D                     	;# 
   676  018E                     	;# 
   677  0191                     	;# 
   678  0191                     	;# 
   679  0192                     	;# 
   680  0193                     	;# 
   681  0193                     	;# 
   682  0193                     	;# 
   683  0194                     	;# 
   684  0195                     	;# 
   685  0196                     	;# 
   686  0199                     	;# 
   687  019A                     	;# 
   688  019B                     	;# 
   689  019B                     	;# 
   690  019C                     	;# 
   691  019D                     	;# 
   692  019E                     	;# 
   693  019F                     	;# 
   694  020C                     	;# 
   695  020D                     	;# 
   696  020E                     	;# 
   697  0211                     	;# 
   698  0211                     	;# 
   699  0212                     	;# 
   700  0212                     	;# 
   701  0213                     	;# 
   702  0213                     	;# 
   703  0214                     	;# 
   704  0214                     	;# 
   705  0215                     	;# 
   706  0215                     	;# 
   707  0215                     	;# 
   708  0216                     	;# 
   709  0216                     	;# 
   710  0217                     	;# 
   711  0217                     	;# 
   712  0219                     	;# 
   713  021A                     	;# 
   714  021B                     	;# 
   715  021C                     	;# 
   716  021D                     	;# 
   717  021E                     	;# 
   718  021F                     	;# 
   719  0291                     	;# 
   720  0291                     	;# 
   721  0292                     	;# 
   722  0293                     	;# 
   723  0294                     	;# 
   724  0295                     	;# 
   725  0295                     	;# 
   726  0296                     	;# 
   727  0298                     	;# 
   728  0298                     	;# 
   729  0299                     	;# 
   730  029A                     	;# 
   731  029B                     	;# 
   732  029C                     	;# 
   733  029D                     	;# 
   734  029E                     	;# 
   735  0311                     	;# 
   736  0311                     	;# 
   737  0312                     	;# 
   738  0313                     	;# 
   739  0318                     	;# 
   740  0318                     	;# 
   741  0319                     	;# 
   742  031A                     	;# 
   743  038C                     	;# 
   744  038D                     	;# 
   745  038E                     	;# 
   746  0391                     	;# 
   747  0392                     	;# 
   748  0393                     	;# 
   749  0394                     	;# 
   750  0395                     	;# 
   751  0396                     	;# 
   752  039A                     	;# 
   753  039C                     	;# 
   754  039D                     	;# 
   755  039E                     	;# 
   756  039F                     	;# 
   757  0415                     	;# 
   758  0416                     	;# 
   759  0417                     	;# 
   760  041C                     	;# 
   761  041D                     	;# 
   762  041E                     	;# 
   763  0FE4                     	;# 
   764  0FE5                     	;# 
   765  0FE6                     	;# 
   766  0FE7                     	;# 
   767  0FE8                     	;# 
   768  0FE9                     	;# 
   769  0FEA                     	;# 
   770  0FEB                     	;# 
   771  0FED                     	;# 
   772  0FEE                     	;# 
   773  0FEF                     	;# 
   774  0000                     	;# 
   775  0001                     	;# 
   776  0002                     	;# 
   777  0003                     	;# 
   778  0004                     	;# 
   779  0005                     	;# 
   780  0006                     	;# 
   781  0007                     	;# 
   782  0008                     	;# 
   783  0009                     	;# 
   784  000A                     	;# 
   785  000B                     	;# 
   786  000C                     	;# 
   787  000D                     	;# 
   788  000E                     	;# 
   789  0011                     	;# 
   790  0012                     	;# 
   791  0013                     	;# 
   792  0014                     	;# 
   793  0015                     	;# 
   794  0016                     	;# 
   795  0016                     	;# 
   796  0017                     	;# 
   797  0018                     	;# 
   798  0019                     	;# 
   799  001A                     	;# 
   800  001B                     	;# 
   801  001C                     	;# 
   802  001E                     	;# 
   803  001F                     	;# 
   804  008C                     	;# 
   805  008D                     	;# 
   806  008E                     	;# 
   807  0091                     	;# 
   808  0092                     	;# 
   809  0093                     	;# 
   810  0094                     	;# 
   811  0095                     	;# 
   812  0096                     	;# 
   813  0097                     	;# 
   814  0098                     	;# 
   815  0099                     	;# 
   816  009A                     	;# 
   817  009B                     	;# 
   818  009B                     	;# 
   819  009C                     	;# 
   820  009D                     	;# 
   821  009E                     	;# 
   822  010C                     	;# 
   823  010D                     	;# 
   824  010E                     	;# 
   825  0111                     	;# 
   826  0112                     	;# 
   827  0113                     	;# 
   828  0114                     	;# 
   829  0115                     	;# 
   830  0116                     	;# 
   831  0117                     	;# 
   832  0118                     	;# 
   833  0119                     	;# 
   834  011A                     	;# 
   835  011B                     	;# 
   836  011D                     	;# 
   837  011E                     	;# 
   838  018C                     	;# 
   839  018D                     	;# 
   840  018E                     	;# 
   841  0191                     	;# 
   842  0191                     	;# 
   843  0192                     	;# 
   844  0193                     	;# 
   845  0193                     	;# 
   846  0193                     	;# 
   847  0194                     	;# 
   848  0195                     	;# 
   849  0196                     	;# 
   850  0199                     	;# 
   851  019A                     	;# 
   852  019B                     	;# 
   853  019B                     	;# 
   854  019C                     	;# 
   855  019D                     	;# 
   856  019E                     	;# 
   857  019F                     	;# 
   858  020C                     	;# 
   859  020D                     	;# 
   860  020E                     	;# 
   861  0211                     	;# 
   862  0211                     	;# 
   863  0212                     	;# 
   864  0212                     	;# 
   865  0213                     	;# 
   866  0213                     	;# 
   867  0214                     	;# 
   868  0214                     	;# 
   869  0215                     	;# 
   870  0215                     	;# 
   871  0215                     	;# 
   872  0216                     	;# 
   873  0216                     	;# 
   874  0217                     	;# 
   875  0217                     	;# 
   876  0219                     	;# 
   877  021A                     	;# 
   878  021B                     	;# 
   879  021C                     	;# 
   880  021D                     	;# 
   881  021E                     	;# 
   882  021F                     	;# 
   883  0291                     	;# 
   884  0291                     	;# 
   885  0292                     	;# 
   886  0293                     	;# 
   887  0294                     	;# 
   888  0295                     	;# 
   889  0295                     	;# 
   890  0296                     	;# 
   891  0298                     	;# 
   892  0298                     	;# 
   893  0299                     	;# 
   894  029A                     	;# 
   895  029B                     	;# 
   896  029C                     	;# 
   897  029D                     	;# 
   898  029E                     	;# 
   899  0311                     	;# 
   900  0311                     	;# 
   901  0312                     	;# 
   902  0313                     	;# 
   903  0318                     	;# 
   904  0318                     	;# 
   905  0319                     	;# 
   906  031A                     	;# 
   907  038C                     	;# 
   908  038D                     	;# 
   909  038E                     	;# 
   910  0391                     	;# 
   911  0392                     	;# 
   912  0393                     	;# 
   913  0394                     	;# 
   914  0395                     	;# 
   915  0396                     	;# 
   916  039A                     	;# 
   917  039C                     	;# 
   918  039D                     	;# 
   919  039E                     	;# 
   920  039F                     	;# 
   921  0415                     	;# 
   922  0416                     	;# 
   923  0417                     	;# 
   924  041C                     	;# 
   925  041D                     	;# 
   926  041E                     	;# 
   927  0FE4                     	;# 
   928  0FE5                     	;# 
   929  0FE6                     	;# 
   930  0FE7                     	;# 
   931  0FE8                     	;# 
   932  0FE9                     	;# 
   933  0FEA                     	;# 
   934  0FEB                     	;# 
   935  0FED                     	;# 
   936  0FEE                     	;# 
   937  0FEF                     	;# 
   938  0000                     	;# 
   939  0001                     	;# 
   940  0002                     	;# 
   941  0003                     	;# 
   942  0004                     	;# 
   943  0005                     	;# 
   944  0006                     	;# 
   945  0007                     	;# 
   946  0008                     	;# 
   947  0009                     	;# 
   948  000A                     	;# 
   949  000B                     	;# 
   950  000C                     	;# 
   951  000D                     	;# 
   952  000E                     	;# 
   953  0011                     	;# 
   954  0012                     	;# 
   955  0013                     	;# 
   956  0014                     	;# 
   957  0015                     	;# 
   958  0016                     	;# 
   959  0016                     	;# 
   960  0017                     	;# 
   961  0018                     	;# 
   962  0019                     	;# 
   963  001A                     	;# 
   964  001B                     	;# 
   965  001C                     	;# 
   966  001E                     	;# 
   967  001F                     	;# 
   968  008C                     	;# 
   969  008D                     	;# 
   970  008E                     	;# 
   971  0091                     	;# 
   972  0092                     	;# 
   973  0093                     	;# 
   974  0094                     	;# 
   975  0095                     	;# 
   976  0096                     	;# 
   977  0097                     	;# 
   978  0098                     	;# 
   979  0099                     	;# 
   980  009A                     	;# 
   981  009B                     	;# 
   982  009B                     	;# 
   983  009C                     	;# 
   984  009D                     	;# 
   985  009E                     	;# 
   986  010C                     	;# 
   987  010D                     	;# 
   988  010E                     	;# 
   989  0111                     	;# 
   990  0112                     	;# 
   991  0113                     	;# 
   992  0114                     	;# 
   993  0115                     	;# 
   994  0116                     	;# 
   995  0117                     	;# 
   996  0118                     	;# 
   997  0119                     	;# 
   998  011A                     	;# 
   999  011B                     	;# 
  1000  011D                     	;# 
  1001  011E                     	;# 
  1002  018C                     	;# 
  1003  018D                     	;# 
  1004  018E                     	;# 
  1005  0191                     	;# 
  1006  0191                     	;# 
  1007  0192                     	;# 
  1008  0193                     	;# 
  1009  0193                     	;# 
  1010  0193                     	;# 
  1011  0194                     	;# 
  1012  0195                     	;# 
  1013  0196                     	;# 
  1014  0199                     	;# 
  1015  019A                     	;# 
  1016  019B                     	;# 
  1017  019B                     	;# 
  1018  019C                     	;# 
  1019  019D                     	;# 
  1020  019E                     	;# 
  1021  019F                     	;# 
  1022  020C                     	;# 
  1023  020D                     	;# 
  1024  020E                     	;# 
  1025  0211                     	;# 
  1026  0211                     	;# 
  1027  0212                     	;# 
  1028  0212                     	;# 
  1029  0213                     	;# 
  1030  0213                     	;# 
  1031  0214                     	;# 
  1032  0214                     	;# 
  1033  0215                     	;# 
  1034  0215                     	;# 
  1035  0215                     	;# 
  1036  0216                     	;# 
  1037  0216                     	;# 
  1038  0217                     	;# 
  1039  0217                     	;# 
  1040  0219                     	;# 
  1041  021A                     	;# 
  1042  021B                     	;# 
  1043  021C                     	;# 
  1044  021D                     	;# 
  1045  021E                     	;# 
  1046  021F                     	;# 
  1047  0291                     	;# 
  1048  0291                     	;# 
  1049  0292                     	;# 
  1050  0293                     	;# 
  1051  0294                     	;# 
  1052  0295                     	;# 
  1053  0295                     	;# 
  1054  0296                     	;# 
  1055  0298                     	;# 
  1056  0298                     	;# 
  1057  0299                     	;# 
  1058  029A                     	;# 
  1059  029B                     	;# 
  1060  029C                     	;# 
  1061  029D                     	;# 
  1062  029E                     	;# 
  1063  0311                     	;# 
  1064  0311                     	;# 
  1065  0312                     	;# 
  1066  0313                     	;# 
  1067  0318                     	;# 
  1068  0318                     	;# 
  1069  0319                     	;# 
  1070  031A                     	;# 
  1071  038C                     	;# 
  1072  038D                     	;# 
  1073  038E                     	;# 
  1074  0391                     	;# 
  1075  0392                     	;# 
  1076  0393                     	;# 
  1077  0394                     	;# 
  1078  0395                     	;# 
  1079  0396                     	;# 
  1080  039A                     	;# 
  1081  039C                     	;# 
  1082  039D                     	;# 
  1083  039E                     	;# 
  1084  039F                     	;# 
  1085  0415                     	;# 
  1086  0416                     	;# 
  1087  0417                     	;# 
  1088  041C                     	;# 
  1089  041D                     	;# 
  1090  041E                     	;# 
  1091  0FE4                     	;# 
  1092  0FE5                     	;# 
  1093  0FE6                     	;# 
  1094  0FE7                     	;# 
  1095  0FE8                     	;# 
  1096  0FE9                     	;# 
  1097  0FEA                     	;# 
  1098  0FEB                     	;# 
  1099  0FED                     	;# 
  1100  0FEE                     	;# 
  1101  0FEF                     	;# 
  1102  0000                     	;# 
  1103  0001                     	;# 
  1104  0002                     	;# 
  1105  0003                     	;# 
  1106  0004                     	;# 
  1107  0005                     	;# 
  1108  0006                     	;# 
  1109  0007                     	;# 
  1110  0008                     	;# 
  1111  0009                     	;# 
  1112  000A                     	;# 
  1113  000B                     	;# 
  1114  000C                     	;# 
  1115  000D                     	;# 
  1116  000E                     	;# 
  1117  0011                     	;# 
  1118  0012                     	;# 
  1119  0013                     	;# 
  1120  0014                     	;# 
  1121  0015                     	;# 
  1122  0016                     	;# 
  1123  0016                     	;# 
  1124  0017                     	;# 
  1125  0018                     	;# 
  1126  0019                     	;# 
  1127  001A                     	;# 
  1128  001B                     	;# 
  1129  001C                     	;# 
  1130  001E                     	;# 
  1131  001F                     	;# 
  1132  008C                     	;# 
  1133  008D                     	;# 
  1134  008E                     	;# 
  1135  0091                     	;# 
  1136  0092                     	;# 
  1137  0093                     	;# 
  1138  0094                     	;# 
  1139  0095                     	;# 
  1140  0096                     	;# 
  1141  0097                     	;# 
  1142  0098                     	;# 
  1143  0099                     	;# 
  1144  009A                     	;# 
  1145  009B                     	;# 
  1146  009B                     	;# 
  1147  009C                     	;# 
  1148  009D                     	;# 
  1149  009E                     	;# 
  1150  010C                     	;# 
  1151  010D                     	;# 
  1152  010E                     	;# 
  1153  0111                     	;# 
  1154  0112                     	;# 
  1155  0113                     	;# 
  1156  0114                     	;# 
  1157  0115                     	;# 
  1158  0116                     	;# 
  1159  0117                     	;# 
  1160  0118                     	;# 
  1161  0119                     	;# 
  1162  011A                     	;# 
  1163  011B                     	;# 
  1164  011D                     	;# 
  1165  011E                     	;# 
  1166  018C                     	;# 
  1167  018D                     	;# 
  1168  018E                     	;# 
  1169  0191                     	;# 
  1170  0191                     	;# 
  1171  0192                     	;# 
  1172  0193                     	;# 
  1173  0193                     	;# 
  1174  0193                     	;# 
  1175  0194                     	;# 
  1176  0195                     	;# 
  1177  0196                     	;# 
  1178  0199                     	;# 
  1179  019A                     	;# 
  1180  019B                     	;# 
  1181  019B                     	;# 
  1182  019C                     	;# 
  1183  019D                     	;# 
  1184  019E                     	;# 
  1185  019F                     	;# 
  1186  020C                     	;# 
  1187  020D                     	;# 
  1188  020E                     	;# 
  1189  0211                     	;# 
  1190  0211                     	;# 
  1191  0212                     	;# 
  1192  0212                     	;# 
  1193  0213                     	;# 
  1194  0213                     	;# 
  1195  0214                     	;# 
  1196  0214                     	;# 
  1197  0215                     	;# 
  1198  0215                     	;# 
  1199  0215                     	;# 
  1200  0216                     	;# 
  1201  0216                     	;# 
  1202  0217                     	;# 
  1203  0217                     	;# 
  1204  0219                     	;# 
  1205  021A                     	;# 
  1206  021B                     	;# 
  1207  021C                     	;# 
  1208  021D                     	;# 
  1209  021E                     	;# 
  1210  021F                     	;# 
  1211  0291                     	;# 
  1212  0291                     	;# 
  1213  0292                     	;# 
  1214  0293                     	;# 
  1215  0294                     	;# 
  1216  0295                     	;# 
  1217  0295                     	;# 
  1218  0296                     	;# 
  1219  0298                     	;# 
  1220  0298                     	;# 
  1221  0299                     	;# 
  1222  029A                     	;# 
  1223  029B                     	;# 
  1224  029C                     	;# 
  1225  029D                     	;# 
  1226  029E                     	;# 
  1227  0311                     	;# 
  1228  0311                     	;# 
  1229  0312                     	;# 
  1230  0313                     	;# 
  1231  0318                     	;# 
  1232  0318                     	;# 
  1233  0319                     	;# 
  1234  031A                     	;# 
  1235  038C                     	;# 
  1236  038D                     	;# 
  1237  038E                     	;# 
  1238  0391                     	;# 
  1239  0392                     	;# 
  1240  0393                     	;# 
  1241  0394                     	;# 
  1242  0395                     	;# 
  1243  0396                     	;# 
  1244  039A                     	;# 
  1245  039C                     	;# 
  1246  039D                     	;# 
  1247  039E                     	;# 
  1248  039F                     	;# 
  1249  0415                     	;# 
  1250  0416                     	;# 
  1251  0417                     	;# 
  1252  041C                     	;# 
  1253  041D                     	;# 
  1254  041E                     	;# 
  1255  0FE4                     	;# 
  1256  0FE5                     	;# 
  1257  0FE6                     	;# 
  1258  0FE7                     	;# 
  1259  0FE8                     	;# 
  1260  0FE9                     	;# 
  1261  0FEA                     	;# 
  1262  0FEB                     	;# 
  1263  0FED                     	;# 
  1264  0FEE                     	;# 
  1265  0FEF                     	;# 
  1266  0000                     	;# 
  1267  0001                     	;# 
  1268  0002                     	;# 
  1269  0003                     	;# 
  1270  0004                     	;# 
  1271  0005                     	;# 
  1272  0006                     	;# 
  1273  0007                     	;# 
  1274  0008                     	;# 
  1275  0009                     	;# 
  1276  000A                     	;# 
  1277  000B                     	;# 
  1278  000C                     	;# 
  1279  000D                     	;# 
  1280  000E                     	;# 
  1281  0011                     	;# 
  1282  0012                     	;# 
  1283  0013                     	;# 
  1284  0014                     	;# 
  1285  0015                     	;# 
  1286  0016                     	;# 
  1287  0016                     	;# 
  1288  0017                     	;# 
  1289  0018                     	;# 
  1290  0019                     	;# 
  1291  001A                     	;# 
  1292  001B                     	;# 
  1293  001C                     	;# 
  1294  001E                     	;# 
  1295  001F                     	;# 
  1296  008C                     	;# 
  1297  008D                     	;# 
  1298  008E                     	;# 
  1299  0091                     	;# 
  1300  0092                     	;# 
  1301  0093                     	;# 
  1302  0094                     	;# 
  1303  0095                     	;# 
  1304  0096                     	;# 
  1305  0097                     	;# 
  1306  0098                     	;# 
  1307  0099                     	;# 
  1308  009A                     	;# 
  1309  009B                     	;# 
  1310  009B                     	;# 
  1311  009C                     	;# 
  1312  009D                     	;# 
  1313  009E                     	;# 
  1314  010C                     	;# 
  1315  010D                     	;# 
  1316  010E                     	;# 
  1317  0111                     	;# 
  1318  0112                     	;# 
  1319  0113                     	;# 
  1320  0114                     	;# 
  1321  0115                     	;# 
  1322  0116                     	;# 
  1323  0117                     	;# 
  1324  0118                     	;# 
  1325  0119                     	;# 
  1326  011A                     	;# 
  1327  011B                     	;# 
  1328  011D                     	;# 
  1329  011E                     	;# 
  1330  018C                     	;# 
  1331  018D                     	;# 
  1332  018E                     	;# 
  1333  0191                     	;# 
  1334  0191                     	;# 
  1335  0192                     	;# 
  1336  0193                     	;# 
  1337  0193                     	;# 
  1338  0193                     	;# 
  1339  0194                     	;# 
  1340  0195                     	;# 
  1341  0196                     	;# 
  1342  0199                     	;# 
  1343  019A                     	;# 
  1344  019B                     	;# 
  1345  019B                     	;# 
  1346  019C                     	;# 
  1347  019D                     	;# 
  1348  019E                     	;# 
  1349  019F                     	;# 
  1350  020C                     	;# 
  1351  020D                     	;# 
  1352  020E                     	;# 
  1353  0211                     	;# 
  1354  0211                     	;# 
  1355  0212                     	;# 
  1356  0212                     	;# 
  1357  0213                     	;# 
  1358  0213                     	;# 
  1359  0214                     	;# 
  1360  0214                     	;# 
  1361  0215                     	;# 
  1362  0215                     	;# 
  1363  0215                     	;# 
  1364  0216                     	;# 
  1365  0216                     	;# 
  1366  0217                     	;# 
  1367  0217                     	;# 
  1368  0219                     	;# 
  1369  021A                     	;# 
  1370  021B                     	;# 
  1371  021C                     	;# 
  1372  021D                     	;# 
  1373  021E                     	;# 
  1374  021F                     	;# 
  1375  0291                     	;# 
  1376  0291                     	;# 
  1377  0292                     	;# 
  1378  0293                     	;# 
  1379  0294                     	;# 
  1380  0295                     	;# 
  1381  0295                     	;# 
  1382  0296                     	;# 
  1383  0298                     	;# 
  1384  0298                     	;# 
  1385  0299                     	;# 
  1386  029A                     	;# 
  1387  029B                     	;# 
  1388  029C                     	;# 
  1389  029D                     	;# 
  1390  029E                     	;# 
  1391  0311                     	;# 
  1392  0311                     	;# 
  1393  0312                     	;# 
  1394  0313                     	;# 
  1395  0318                     	;# 
  1396  0318                     	;# 
  1397  0319                     	;# 
  1398  031A                     	;# 
  1399  038C                     	;# 
  1400  038D                     	;# 
  1401  038E                     	;# 
  1402  0391                     	;# 
  1403  0392                     	;# 
  1404  0393                     	;# 
  1405  0394                     	;# 
  1406  0395                     	;# 
  1407  0396                     	;# 
  1408  039A                     	;# 
  1409  039C                     	;# 
  1410  039D                     	;# 
  1411  039E                     	;# 
  1412  039F                     	;# 
  1413  0415                     	;# 
  1414  0416                     	;# 
  1415  0417                     	;# 
  1416  041C                     	;# 
  1417  041D                     	;# 
  1418  041E                     	;# 
  1419  0FE4                     	;# 
  1420  0FE5                     	;# 
  1421  0FE6                     	;# 
  1422  0FE7                     	;# 
  1423  0FE8                     	;# 
  1424  0FE9                     	;# 
  1425  0FEA                     	;# 
  1426  0FEB                     	;# 
  1427  0FED                     	;# 
  1428  0FEE                     	;# 
  1429  0FEF                     	;# 
  1430  0000                     	;# 
  1431  0001                     	;# 
  1432  0002                     	;# 
  1433  0003                     	;# 
  1434  0004                     	;# 
  1435  0005                     	;# 
  1436  0006                     	;# 
  1437  0007                     	;# 
  1438  0008                     	;# 
  1439  0009                     	;# 
  1440  000A                     	;# 
  1441  000B                     	;# 
  1442  000C                     	;# 
  1443  000D                     	;# 
  1444  000E                     	;# 
  1445  0011                     	;# 
  1446  0012                     	;# 
  1447  0013                     	;# 
  1448  0014                     	;# 
  1449  0015                     	;# 
  1450  0016                     	;# 
  1451  0016                     	;# 
  1452  0017                     	;# 
  1453  0018                     	;# 
  1454  0019                     	;# 
  1455  001A                     	;# 
  1456  001B                     	;# 
  1457  001C                     	;# 
  1458  001E                     	;# 
  1459  001F                     	;# 
  1460  008C                     	;# 
  1461  008D                     	;# 
  1462  008E                     	;# 
  1463  0091                     	;# 
  1464  0092                     	;# 
  1465  0093                     	;# 
  1466  0094                     	;# 
  1467  0095                     	;# 
  1468  0096                     	;# 
  1469  0097                     	;# 
  1470  0098                     	;# 
  1471  0099                     	;# 
  1472  009A                     	;# 
  1473  009B                     	;# 
  1474  009B                     	;# 
  1475  009C                     	;# 
  1476  009D                     	;# 
  1477  009E                     	;# 
  1478  010C                     	;# 
  1479  010D                     	;# 
  1480  010E                     	;# 
  1481  0111                     	;# 
  1482  0112                     	;# 
  1483  0113                     	;# 
  1484  0114                     	;# 
  1485  0115                     	;# 
  1486  0116                     	;# 
  1487  0117                     	;# 
  1488  0118                     	;# 
  1489  0119                     	;# 
  1490  011A                     	;# 
  1491  011B                     	;# 
  1492  011D                     	;# 
  1493  011E                     	;# 
  1494  018C                     	;# 
  1495  018D                     	;# 
  1496  018E                     	;# 
  1497  0191                     	;# 
  1498  0191                     	;# 
  1499  0192                     	;# 
  1500  0193                     	;# 
  1501  0193                     	;# 
  1502  0193                     	;# 
  1503  0194                     	;# 
  1504  0195                     	;# 
  1505  0196                     	;# 
  1506  0199                     	;# 
  1507  019A                     	;# 
  1508  019B                     	;# 
  1509  019B                     	;# 
  1510  019C                     	;# 
  1511  019D                     	;# 
  1512  019E                     	;# 
  1513  019F                     	;# 
  1514  020C                     	;# 
  1515  020D                     	;# 
  1516  020E                     	;# 
  1517  0211                     	;# 
  1518  0211                     	;# 
  1519  0212                     	;# 
  1520  0212                     	;# 
  1521  0213                     	;# 
  1522  0213                     	;# 
  1523  0214                     	;# 
  1524  0214                     	;# 
  1525  0215                     	;# 
  1526  0215                     	;# 
  1527  0215                     	;# 
  1528  0216                     	;# 
  1529  0216                     	;# 
  1530  0217                     	;# 
  1531  0217                     	;# 
  1532  0219                     	;# 
  1533  021A                     	;# 
  1534  021B                     	;# 
  1535  021C                     	;# 
  1536  021D                     	;# 
  1537  021E                     	;# 
  1538  021F                     	;# 
  1539  0291                     	;# 
  1540  0291                     	;# 
  1541  0292                     	;# 
  1542  0293                     	;# 
  1543  0294                     	;# 
  1544  0295                     	;# 
  1545  0295                     	;# 
  1546  0296                     	;# 
  1547  0298                     	;# 
  1548  0298                     	;# 
  1549  0299                     	;# 
  1550  029A                     	;# 
  1551  029B                     	;# 
  1552  029C                     	;# 
  1553  029D                     	;# 
  1554  029E                     	;# 
  1555  0311                     	;# 
  1556  0311                     	;# 
  1557  0312                     	;# 
  1558  0313                     	;# 
  1559  0318                     	;# 
  1560  0318                     	;# 
  1561  0319                     	;# 
  1562  031A                     	;# 
  1563  038C                     	;# 
  1564  038D                     	;# 
  1565  038E                     	;# 
  1566  0391                     	;# 
  1567  0392                     	;# 
  1568  0393                     	;# 
  1569  0394                     	;# 
  1570  0395                     	;# 
  1571  0396                     	;# 
  1572  039A                     	;# 
  1573  039C                     	;# 
  1574  039D                     	;# 
  1575  039E                     	;# 
  1576  039F                     	;# 
  1577  0415                     	;# 
  1578  0416                     	;# 
  1579  0417                     	;# 
  1580  041C                     	;# 
  1581  041D                     	;# 
  1582  041E                     	;# 
  1583  0FE4                     	;# 
  1584  0FE5                     	;# 
  1585  0FE6                     	;# 
  1586  0FE7                     	;# 
  1587  0FE8                     	;# 
  1588  0FE9                     	;# 
  1589  0FEA                     	;# 
  1590  0FEB                     	;# 
  1591  0FED                     	;# 
  1592  0FEE                     	;# 
  1593  0FEF                     	;# 
  1594  0000                     	;# 
  1595  0001                     	;# 
  1596  0002                     	;# 
  1597  0003                     	;# 
  1598  0004                     	;# 
  1599  0005                     	;# 
  1600  0006                     	;# 
  1601  0007                     	;# 
  1602  0008                     	;# 
  1603  0009                     	;# 
  1604  000A                     	;# 
  1605  000B                     	;# 
  1606  000C                     	;# 
  1607  000D                     	;# 
  1608  000E                     	;# 
  1609  0011                     	;# 
  1610  0012                     	;# 
  1611  0013                     	;# 
  1612  0014                     	;# 
  1613  0015                     	;# 
  1614  0016                     	;# 
  1615  0016                     	;# 
  1616  0017                     	;# 
  1617  0018                     	;# 
  1618  0019                     	;# 
  1619  001A                     	;# 
  1620  001B                     	;# 
  1621  001C                     	;# 
  1622  001E                     	;# 
  1623  001F                     	;# 
  1624  008C                     	;# 
  1625  008D                     	;# 
  1626  008E                     	;# 
  1627  0091                     	;# 
  1628  0092                     	;# 
  1629  0093                     	;# 
  1630  0094                     	;# 
  1631  0095                     	;# 
  1632  0096                     	;# 
  1633  0097                     	;# 
  1634  0098                     	;# 
  1635  0099                     	;# 
  1636  009A                     	;# 
  1637  009B                     	;# 
  1638  009B                     	;# 
  1639  009C                     	;# 
  1640  009D                     	;# 
  1641  009E                     	;# 
  1642  010C                     	;# 
  1643  010D                     	;# 
  1644  010E                     	;# 
  1645  0111                     	;# 
  1646  0112                     	;# 
  1647  0113                     	;# 
  1648  0114                     	;# 
  1649  0115                     	;# 
  1650  0116                     	;# 
  1651  0117                     	;# 
  1652  0118                     	;# 
  1653  0119                     	;# 
  1654  011A                     	;# 
  1655  011B                     	;# 
  1656  011D                     	;# 
  1657  011E                     	;# 
  1658  018C                     	;# 
  1659  018D                     	;# 
  1660  018E                     	;# 
  1661  0191                     	;# 
  1662  0191                     	;# 
  1663  0192                     	;# 
  1664  0193                     	;# 
  1665  0193                     	;# 
  1666  0193                     	;# 
  1667  0194                     	;# 
  1668  0195                     	;# 
  1669  0196                     	;# 
  1670  0199                     	;# 
  1671  019A                     	;# 
  1672  019B                     	;# 
  1673  019B                     	;# 
  1674  019C                     	;# 
  1675  019D                     	;# 
  1676  019E                     	;# 
  1677  019F                     	;# 
  1678  020C                     	;# 
  1679  020D                     	;# 
  1680  020E                     	;# 
  1681  0211                     	;# 
  1682  0211                     	;# 
  1683  0212                     	;# 
  1684  0212                     	;# 
  1685  0213                     	;# 
  1686  0213                     	;# 
  1687  0214                     	;# 
  1688  0214                     	;# 
  1689  0215                     	;# 
  1690  0215                     	;# 
  1691  0215                     	;# 
  1692  0216                     	;# 
  1693  0216                     	;# 
  1694  0217                     	;# 
  1695  0217                     	;# 
  1696  0219                     	;# 
  1697  021A                     	;# 
  1698  021B                     	;# 
  1699  021C                     	;# 
  1700  021D                     	;# 
  1701  021E                     	;# 
  1702  021F                     	;# 
  1703  0291                     	;# 
  1704  0291                     	;# 
  1705  0292                     	;# 
  1706  0293                     	;# 
  1707  0294                     	;# 
  1708  0295                     	;# 
  1709  0295                     	;# 
  1710  0296                     	;# 
  1711  0298                     	;# 
  1712  0298                     	;# 
  1713  0299                     	;# 
  1714  029A                     	;# 
  1715  029B                     	;# 
  1716  029C                     	;# 
  1717  029D                     	;# 
  1718  029E                     	;# 
  1719  0311                     	;# 
  1720  0311                     	;# 
  1721  0312                     	;# 
  1722  0313                     	;# 
  1723  0318                     	;# 
  1724  0318                     	;# 
  1725  0319                     	;# 
  1726  031A                     	;# 
  1727  038C                     	;# 
  1728  038D                     	;# 
  1729  038E                     	;# 
  1730  0391                     	;# 
  1731  0392                     	;# 
  1732  0393                     	;# 
  1733  0394                     	;# 
  1734  0395                     	;# 
  1735  0396                     	;# 
  1736  039A                     	;# 
  1737  039C                     	;# 
  1738  039D                     	;# 
  1739  039E                     	;# 
  1740  039F                     	;# 
  1741  0415                     	;# 
  1742  0416                     	;# 
  1743  0417                     	;# 
  1744  041C                     	;# 
  1745  041D                     	;# 
  1746  041E                     	;# 
  1747  0FE4                     	;# 
  1748  0FE5                     	;# 
  1749  0FE6                     	;# 
  1750  0FE7                     	;# 
  1751  0FE8                     	;# 
  1752  0FE9                     	;# 
  1753  0FEA                     	;# 
  1754  0FEB                     	;# 
  1755  0FED                     	;# 
  1756  0FEE                     	;# 
  1757  0FEF                     	;# 
  1758                           
  1759                           	psect	idataCOMMON
  1760  07FE                     __pidataCOMMON:	
  1761                           
  1762                           ;initializer for _I2C_slaveWriteData
  1763  07FE  3455               	retlw	85
  1764                           
  1765                           	psect	idataBANK0
  1766  0D96                     __pidataBANK0:	
  1767                           
  1768                           ;initializer for _tmr_scaler
  1769  0D96  3401               	retlw	1
  1770                           
  1771                           ;initializer for _ain
  1772  0D97  3401               	retlw	1
  1773                           
  1774                           ;initializer for _BACKPLANE_SLAVE_ADDRESS
  1775  0D98  3401               	retlw	1
  1776                           
  1777                           ;initializer for _type_no_data
  1778  0D99  3406               	retlw	6
  1779                           
  1780                           	psect	idataBANK1
  1781  0DCE                     __pidataBANK1:	
  1782                           
  1783                           ;initializer for _analog_in
  1784  0DCE  3404               	retlw	4
  1785  0DCF  3405               	retlw	5
  1786  0DD0  3406               	retlw	6
  1787  0DD1  3407               	retlw	7
  1788  0DD2  3408               	retlw	8
  1789  0DD3  340B               	retlw	11
  1790                           
  1791                           ;initializer for _continuity
  1792  0DD4  3403               	retlw	3
  1793                           
  1794                           ;initializer for _threshold
  1795  0DD5  3432               	retlw	50
  1796                           
  1797                           	psect	stringtext
  1798  03D2                     __pstringtext:	
  1799  03D2                     _dpowers:	
  1800  03D2  3401               	retlw	1
  1801  03D3  3400               	retlw	0
  1802  03D4  340A               	retlw	10
  1803  03D5  3400               	retlw	0
  1804  03D6  3464               	retlw	100
  1805  03D7  3400               	retlw	0
  1806  03D8  34E8               	retlw	232
  1807  03D9  3403               	retlw	3
  1808  03DA  3410               	retlw	16
  1809  03DB  3427               	retlw	39
  1810  03DC                     __end_of_dpowers:	
  1811  03DC                     STR_1:	
  1812  03DC  344D               	retlw	77	;'M'
  1813  03DD  3455               	retlw	85	;'U'
  1814  03DE  344C               	retlw	76	;'L'
  1815  03DF  3454               	retlw	84	;'T'
  1816  03E0  3449               	retlw	73	;'I'
  1817  03E1  345F               	retlw	95	;'_'
  1818  03E2  3441               	retlw	65	;'A'
  1819  03E3  3431               	retlw	49	;'1'
  1820  03E4  3433               	retlw	51	;'3'
  1821  03E5  3432               	retlw	50	;'2'
  1822  03E6  3434               	retlw	52	;'4'
  1823  03E7  344C               	retlw	76	;'L'
  1824  03E8  3455               	retlw	85	;'U'
  1825  03E9  3441               	retlw	65	;'A'
  1826  03EA  345F               	retlw	95	;'_'
  1827  03EB  3454               	retlw	84	;'T'
  1828  03EC  3400               	retlw	0
  1829  03ED                     STR_36:	
  1830  03ED  3449               	retlw	73	;'I'
  1831  03EE  344C               	retlw	76	;'L'
  1832  03EF  344C               	retlw	76	;'L'
  1833  03F0  3445               	retlw	69	;'E'
  1834  03F1  3447               	retlw	71	;'G'
  1835  03F2  3441               	retlw	65	;'A'
  1836  03F3  344C               	retlw	76	;'L'
  1837  03F4  345F               	retlw	95	;'_'
  1838  03F5  3454               	retlw	84	;'T'
  1839  03F6  3459               	retlw	89	;'Y'
  1840  03F7  3450               	retlw	80	;'P'
  1841  03F8  3445               	retlw	69	;'E'
  1842  03F9  340A               	retlw	10
  1843  03FA  3400               	retlw	0
  1844  03FB                     STR_16:	
  1845  03FB  3424               	retlw	36	;'$'
  1846  03FC  343A               	retlw	58	;':'
  1847  03FD  3452               	retlw	82	;'R'
  1848  03FE  3444               	retlw	68	;'D'
  1849  03FF  3441               	retlw	65	;'A'
  1850  0400  343A               	retlw	58	;':'
  1851  0401  3425               	retlw	37	;'%'
  1852  0402  3464               	retlw	100	;'d'
  1853  0403  340A               	retlw	10
  1854  0404  3400               	retlw	0
  1855  0405                     STR_13:	
  1856  0405  3424               	retlw	36	;'$'
  1857  0406  343A               	retlw	58	;':'
  1858  0407  3447               	retlw	71	;'G'
  1859  0408  3445               	retlw	69	;'E'
  1860  0409  3454               	retlw	84	;'T'
  1861  040A  343A               	retlw	58	;':'
  1862  040B  3425               	retlw	37	;'%'
  1863  040C  3464               	retlw	100	;'d'
  1864  040D  340A               	retlw	10
  1865  040E  3400               	retlw	0
  1866  040F                     STR_34:	
  1867  040F  342D               	retlw	45	;'-'
  1868  0410  3425               	retlw	37	;'%'
  1869  0411  3464               	retlw	100	;'d'
  1870  0412  342E               	retlw	46	;'.'
  1871  0413  3425               	retlw	37	;'%'
  1872  0414  3430               	retlw	48	;'0'
  1873  0415  3432               	retlw	50	;'2'
  1874  0416  3464               	retlw	100	;'d'
  1875  0417  340A               	retlw	10
  1876  0418  3400               	retlw	0
  1877  0419                     STR_5:	
  1878  0419  3424               	retlw	36	;'$'
  1879  041A  343A               	retlw	58	;':'
  1880  041B  3457               	retlw	87	;'W'
  1881  041C  3448               	retlw	72	;'H'
  1882  041D  344F               	retlw	79	;'O'
  1883  041E  343A               	retlw	58	;':'
  1884  041F  3425               	retlw	37	;'%'
  1885  0420  3473               	retlw	115	;'s'
  1886  0421  340A               	retlw	10
  1887  0422  3400               	retlw	0
  1888  0423                     STR_9:	
  1889  0423  342A               	retlw	42	;'*'
  1890  0424  343A               	retlw	58	;':'
  1891  0425  3453               	retlw	83	;'S'
  1892  0426  3454               	retlw	84	;'T'
  1893  0427  3450               	retlw	80	;'P'
  1894  0428  343A               	retlw	58	;':'
  1895  0429  3425               	retlw	37	;'%'
  1896  042A  3473               	retlw	115	;'s'
  1897  042B  340A               	retlw	10
  1898  042C  3400               	retlw	0
  1899  042D                     STR_32:	
  1900  042D  342D               	retlw	45	;'-'
  1901  042E  3425               	retlw	37	;'%'
  1902  042F  3464               	retlw	100	;'d'
  1903  0430  342E               	retlw	46	;'.'
  1904  0431  3425               	retlw	37	;'%'
  1905  0432  3430               	retlw	48	;'0'
  1906  0433  3432               	retlw	50	;'2'
  1907  0434  3464               	retlw	100	;'d'
  1908  0435  342C               	retlw	44	;','
  1909  0436  3400               	retlw	0
  1910  0437                     STR_24:	
  1911  0437  3455               	retlw	85	;'U'
  1912  0438  3449               	retlw	73	;'I'
  1913  0439  344E               	retlw	78	;'N'
  1914  043A  3454               	retlw	84	;'T'
  1915  043B  3431               	retlw	49	;'1'
  1916  043C  3436               	retlw	54	;'6'
  1917  043D  345F               	retlw	95	;'_'
  1918  043E  3454               	retlw	84	;'T'
  1919  043F  343A               	retlw	58	;':'
  1920  0440  3400               	retlw	0
  1921  0441                     STR_35:	
  1922  0441  344E               	retlw	78	;'N'
  1923  0442  344F               	retlw	79	;'O'
  1924  0443  345F               	retlw	95	;'_'
  1925  0444  3444               	retlw	68	;'D'
  1926  0445  3441               	retlw	65	;'A'
  1927  0446  3454               	retlw	84	;'T'
  1928  0447  3441               	retlw	65	;'A'
  1929  0448  340A               	retlw	10
  1930  0449  3400               	retlw	0
  1931  044A                     STR_18:	
  1932  044A  3455               	retlw	85	;'U'
  1933  044B  3449               	retlw	73	;'I'
  1934  044C  344E               	retlw	78	;'N'
  1935  044D  3454               	retlw	84	;'T'
  1936  044E  3438               	retlw	56	;'8'
  1937  044F  345F               	retlw	95	;'_'
  1938  0450  3454               	retlw	84	;'T'
  1939  0451  343A               	retlw	58	;':'
  1940  0452  3400               	retlw	0
  1941  0453                     STR_30:	
  1942  0453  3446               	retlw	70	;'F'
  1943  0454  344C               	retlw	76	;'L'
  1944  0455  344F               	retlw	79	;'O'
  1945  0456  3441               	retlw	65	;'A'
  1946  0457  3454               	retlw	84	;'T'
  1947  0458  343A               	retlw	58	;':'
  1948  0459  3400               	retlw	0
  1949  045A                     STR_2:	
  1950  045A  3428               	retlw	40	;'('
  1951  045B  346E               	retlw	110	;'n'
  1952  045C  3475               	retlw	117	;'u'
  1953  045D  346C               	retlw	108	;'l'
  1954  045E  346C               	retlw	108	;'l'
  1955  045F  3429               	retlw	41	;')'
  1956  0460  3400               	retlw	0
  1957  0461                     STR_17:	
  1958  0461  3425               	retlw	37	;'%'
  1959  0462  3425               	retlw	37	;'%'
  1960  0463  3425               	retlw	37	;'%'
  1961  0464  3464               	retlw	100	;'d'
  1962  0465  343A               	retlw	58	;':'
  1963  0466  3400               	retlw	0
  1964  0467                     STR_3:	
  1965  0467  3423               	retlw	35	;'#'
  1966  0468  3425               	retlw	37	;'%'
  1967  0469  3473               	retlw	115	;'s'
  1968  046A  340A               	retlw	10
  1969  046B  3400               	retlw	0
  1970  046C                     STR_20:	
  1971  046C  3425               	retlw	37	;'%'
  1972  046D  3475               	retlw	117	;'u'
  1973  046E  340A               	retlw	10
  1974  046F  3400               	retlw	0
  1975  0470                     STR_22:	
  1976  0470  3425               	retlw	37	;'%'
  1977  0471  3464               	retlw	100	;'d'
  1978  0472  342C               	retlw	44	;','
  1979  0473  3400               	retlw	0
  1980  0474                     STR_19:	
  1981  0474  3425               	retlw	37	;'%'
  1982  0475  3475               	retlw	117	;'u'
  1983  0476  342C               	retlw	44	;','
  1984  0477  3400               	retlw	0
  1985  0478                     STR_15:	
  1986  0478  3452               	retlw	82	;'R'
  1987  0479  3444               	retlw	68	;'D'
  1988  047A  3441               	retlw	65	;'A'
  1989  047B  3400               	retlw	0
  1990  047C                     STR_14:	
  1991  047C  3457               	retlw	87	;'W'
  1992  047D  3444               	retlw	68	;'D'
  1993  047E  3441               	retlw	65	;'A'
  1994  047F  3400               	retlw	0
  1995  0480                     STR_7:	
  1996  0480  3453               	retlw	83	;'S'
  1997  0481  3454               	retlw	84	;'T'
  1998  0482  3441               	retlw	65	;'A'
  1999  0483  3400               	retlw	0
  2000  0484                     STR_10:	
  2001  0484  3441               	retlw	65	;'A'
  2002  0485  3443               	retlw	67	;'C'
  2003  0486  344B               	retlw	75	;'K'
  2004  0487  3400               	retlw	0
  2005  0488                     STR_4:	
  2006  0488  3457               	retlw	87	;'W'
  2007  0489  3448               	retlw	72	;'H'
  2008  048A  344F               	retlw	79	;'O'
  2009  048B  3400               	retlw	0
  2010  048C                     STR_8:	
  2011  048C  3453               	retlw	83	;'S'
  2012  048D  3454               	retlw	84	;'T'
  2013  048E  3450               	retlw	80	;'P'
  2014  048F  3400               	retlw	0
  2015  0490                     STR_12:	
  2016  0490  3447               	retlw	71	;'G'
  2017  0491  3445               	retlw	69	;'E'
  2018  0492  3454               	retlw	84	;'T'
  2019  0493  3400               	retlw	0
  2020  0494                     STR_11:	
  2021  0494  3453               	retlw	83	;'S'
  2022  0495  3445               	retlw	69	;'E'
  2023  0496  3454               	retlw	84	;'T'
  2024  0497  3400               	retlw	0
  2025  0498                     STR_6:	
  2026  0498  3453               	retlw	83	;'S'
  2027  0499  3441               	retlw	65	;'A'
  2028  049A  3456               	retlw	86	;'V'
  2029  049B  3400               	retlw	0
  2030  0401                     
  2031                           ; #config settings
  2032  0000                     
  2033                           	psect	nvBANK1
  2034  00E0                     __pnvBANK1:	
  2035  00E0                     _device_id_:	
  2036  00E0                     	ds	2
  2037  00E2                     _PROTOCOL_Set_Handler:	
  2038  00E2                     	ds	2
  2039  00E4                     _PROTOCOL_Stop_Handler:	
  2040  00E4                     	ds	2
  2041  00E6                     _PROTOCOL_Start_Handler:	
  2042  00E6                     	ds	2
  2043  0015                     _TMR0	set	21
  2044  000B                     _INTCONbits	set	11
  2045  0011                     _PIR1bits	set	17
  2046  005A                     _TMR0IF	set	90
  2047  0095                     _OPTION_REG	set	149
  2048  009D                     _ADCON0bits	set	157
  2049  009C                     _ADRESH	set	156
  2050  009B                     _ADRESL	set	155
  2051  009E                     _ADCON1	set	158
  2052  009D                     _ADCON0	set	157
  2053  0095                     _OPTION_REGbits	set	149
  2054  008E                     _TRISC	set	142
  2055  008D                     _TRISB	set	141
  2056  008C                     _TRISA	set	140
  2057  0097                     _WDTCON	set	151
  2058  0098                     _OSCTUNE	set	152
  2059  0099                     _OSCCON	set	153
  2060  0091                     _PIE1bits	set	145
  2061  010E                     _LATCbits	set	270
  2062  011D                     _APFCON0	set	285
  2063  011E                     _APFCON1	set	286
  2064  010E                     _LATC	set	270
  2065  010D                     _LATB	set	269
  2066  010C                     _LATA	set	268
  2067  0196                     _EECON2	set	406
  2068  0193                     _EEDATL	set	403
  2069  0194                     _EEDATH	set	404
  2070  0195                     _EECON1bits	set	405
  2071  0192                     _EEADRH	set	402
  2072  0191                     _EEADRL	set	401
  2073  018C                     _ANSELA	set	396
  2074  018D                     _ANSELB	set	397
  2075  018E                     _ANSELC	set	398
  2076  0199                     _RCREG	set	409
  2077  019D                     _RCSTAbits	set	413
  2078  019A                     _TXREG	set	410
  2079  019C                     _SPBRGH	set	412
  2080  019B                     _SPBRGL	set	411
  2081  019E                     _TXSTA	set	414
  2082  019D                     _RCSTA	set	413
  2083  019F                     _BAUDCON	set	415
  2084  020E                     _WPUC	set	526
  2085  020C                     _WPUA	set	524
  2086  020D                     _WPUB	set	525
  2087  0215                     _SSP1CON1bits	set	533
  2088  0216                     _SSP1CON2bits	set	534
  2089  0214                     _SSP1STATbits	set	532
  2090  0211                     _SSP1BUF	set	529
  2091  0212                     _SSP1ADD	set	530
  2092  0213                     _SSP1MSK	set	531
  2093  0217                     _SSP1CON3	set	535
  2094  0216                     _SSP1CON2	set	534
  2095  0215                     _SSP1CON1	set	533
  2096  0214                     _SSP1STAT	set	532
  2097                           
  2098                           	psect	cinit
  2099  0032                     start_initialization:	
  2100  0032                     __initialization:	
  2101                           
  2102                           ; Initialize objects allocated to COMMON
  2103  0032  3187  27FE  3180   	fcall	__pidataCOMMON	;fetch initializer
  2104  0035  00FD               	movwf	__pdataCOMMON& (0+127)
  2105                           
  2106                           ; Initialize objects allocated to BANK0
  2107  0036  3096               	movlw	low __pidataBANK0
  2108  0037  0084               	movwf	4
  2109  0038  308D               	movlw	(high __pidataBANK0)| (0+128)
  2110  0039  0085               	movwf	5
  2111  003A  306C               	movlw	low __pdataBANK0
  2112  003B  0086               	movwf	6
  2113  003C  3000               	movlw	high __pdataBANK0
  2114  003D  0087               	movwf	7
  2115  003E  3004               	movlw	4
  2116  003F  318D  25AB  3180   	fcall	init_ram
  2117                           
  2118                           ; Initialize objects allocated to BANK1
  2119  0042  30CE               	movlw	low __pidataBANK1
  2120  0043  0084               	movwf	4
  2121  0044  308D               	movlw	(high __pidataBANK1)| (0+128)
  2122  0045  0085               	movwf	5
  2123  0046  30E8               	movlw	low __pdataBANK1
  2124  0047  0086               	movwf	6
  2125  0048  3000               	movlw	high __pdataBANK1
  2126  0049  0087               	movwf	7
  2127  004A  3008               	movlw	8
  2128  004B  318D  25AB  3180   	fcall	init_ram
  2129                           
  2130                           ; Clear objects allocated to COMMON
  2131  004E  01FA               	clrf	__pbssCOMMON& (0+127)
  2132  004F  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
  2133  0050  01FC               	clrf	(__pbssCOMMON+2)& (0+127)
  2134                           
  2135                           ; Clear objects allocated to BANK0
  2136  0051  3052               	movlw	low __pbssBANK0
  2137  0052  0084               	movwf	4
  2138  0053  3000               	movlw	high __pbssBANK0
  2139  0054  0085               	movwf	5
  2140  0055  301A               	movlw	26
  2141  0056  318D  25A5  3180   	fcall	clear_ram0
  2142                           
  2143                           ; Clear objects allocated to BANK1
  2144  0059  30A0               	movlw	low __pbssBANK1
  2145  005A  0084               	movwf	4
  2146  005B  3000               	movlw	high __pbssBANK1
  2147  005C  0085               	movwf	5
  2148  005D  3040               	movlw	64
  2149  005E  318D  25A5  3180   	fcall	clear_ram0
  2150                           
  2151                           ; Clear objects allocated to BANK2
  2152  0061  3020               	movlw	low __pbssBANK2
  2153  0062  0084               	movwf	4
  2154  0063  3001               	movlw	high __pbssBANK2
  2155  0064  0085               	movwf	5
  2156  0065  3030               	movlw	48
  2157  0066  318D  25A5  3180   	fcall	clear_ram0
  2158                           
  2159                           ; Clear objects allocated to BANK3
  2160  0069  30A0               	movlw	low __pbssBANK3
  2161  006A  0084               	movwf	4
  2162  006B  3001               	movlw	high __pbssBANK3
  2163  006C  0085               	movwf	5
  2164  006D  3030               	movlw	48
  2165  006E  318D  25A5         	fcall	clear_ram0
  2166  0070                     end_of_initialization:	
  2167                           ;End of C runtime variable initialization code
  2168                           
  2169  0070                     __end_of__initialization:	
  2170  0070  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2171  0071  0020               	movlb	0
  2172  0072  3187  2FBA         	ljmp	_main	;jump to C main() function
  2173                           
  2174                           	psect	bssCOMMON
  2175  007A                     __pbssCOMMON:	
  2176  007A                     _eusartTxBufferRemaining:	
  2177  007A                     	ds	1
  2178  007B                     _eusartTxTail:	
  2179  007B                     	ds	1
  2180  007C                     _eusartTxHead:	
  2181  007C                     	ds	1
  2182                           
  2183                           	psect	dataCOMMON
  2184  007D                     __pdataCOMMON:	
  2185  007D                     _I2C_slaveWriteData:	
  2186  007D                     	ds	1
  2187                           
  2188                           	psect	bssBANK0
  2189  0052                     __pbssBANK0:	
  2190  0052                     _PROTOCOL_Inv_Handler:	
  2191  0052                     	ds	2
  2192  0054                     _i:	
  2193  0054                     	ds	1
  2194  0055                     _backplane_slave_enabled:	
  2195  0055                     	ds	1
  2196  0056                     _tmr_overflow:	
  2197  0056                     	ds	1
  2198  0057                     _tmr_cnt:	
  2199  0057                     	ds	1
  2200  0058                     _sec_cnt:	
  2201  0058                     	ds	1
  2202  0059                     _invoked:	
  2203  0059                     	ds	1
  2204  005A                     _running:	
  2205  005A                     	ds	1
  2206  005B                     _locked:	
  2207  005B                     	ds	1
  2208  005C                     _value:	
  2209  005C                     	ds	1
  2210  005D                     _cnt:	
  2211  005D                     	ds	1
  2212  005E                     _slave_address:	
  2213  005E                     	ds	1
  2214  005F                     _timer0ReloadVal:	
  2215  005F                     	ds	1
  2216  0060                     _eusartRxCount:	
  2217  0060                     	ds	1
  2218  0061                     _eusartRxTail:	
  2219  0061                     	ds	1
  2220  0062                     _eusartRxHead:	
  2221  0062                     	ds	1
  2222  0063                     I2C1_StatusCallback@ext_cnt:	
  2223  0063                     	ds	1
  2224  0064                     I2C1_StatusCallback@ext_len:	
  2225  0064                     	ds	1
  2226  0065                     I2C1_StatusCallback@next:	
  2227  0065                     	ds	1
  2228  0066                     I2C1_StatusCallback@slaveWriteType:	
  2229  0066                     	ds	1
  2230  0067                     _readbuf:	
  2231  0067                     	ds	5
  2232                           
  2233                           	psect	dataBANK0
  2234  006C                     __pdataBANK0:	
  2235  006C                     _tmr_scaler:	
  2236  006C                     	ds	1
  2237  006D                     _ain:	
  2238  006D                     	ds	1
  2239  006E                     _BACKPLANE_SLAVE_ADDRESS:	
  2240  006E                     	ds	1
  2241  006F                     _type_no_data:	
  2242  006F                     	ds	1
  2243                           
  2244                           	psect	bssBANK1
  2245  00A0                     __pbssBANK1:	
  2246  00A0                     _eusartRxBuffer:	
  2247  00A0                     	ds	8
  2248  00A8                     _eusartTxBuffer:	
  2249  00A8                     	ds	8
  2250  00B0                     _count:	
  2251  00B0                     	ds	6
  2252  00B6                     _float100:	
  2253  00B6                     	ds	2
  2254  00B8                     _PROTOCOL_Tick_Handler:	
  2255  00B8                     	ds	2
  2256  00BA                     _PROTOCOL_Extension_Handler:	
  2257  00BA                     	ds	2
  2258  00BC                     _PROTOCOL_Loop_Func:	
  2259  00BC                     	ds	2
  2260  00BE                     _data:	
  2261  00BE                     	ds	1
  2262  00BF                     _j:	
  2263  00BF                     	ds	1
  2264  00C0                     _readbuf_status:	
  2265  00C0                     	ds	1
  2266  00C1                     _sendbuf:	
  2267  00C1                     	ds	16
  2268  00D1                     _position:	
  2269  00D1                     	ds	6
  2270  00D7                     PROTOCOL_Send_float@pbuf:	
  2271  00D7                     	ds	3
  2272  00DA                     PROTOCOL_Send_int16_t@pbuf:	
  2273  00DA                     	ds	2
  2274  00DC                     PROTOCOL_Send_uint16_t@pbuf:	
  2275  00DC                     	ds	2
  2276  00DE                     PROTOCOL_Send_int8_t@pbuf:	
  2277  00DE                     	ds	1
  2278  00DF                     PROTOCOL_Send_uint8_t@pbuf:	
  2279  00DF                     	ds	1
  2280                           
  2281                           	psect	dataBANK1
  2282  00E8                     __pdataBANK1:	
  2283  00E8                     _analog_in:	
  2284  00E8                     	ds	6
  2285  00EE                     _continuity:	
  2286  00EE                     	ds	1
  2287  00EF                     _threshold:	
  2288  00EF                     	ds	1
  2289                           
  2290                           	psect	bssBANK2
  2291  0120                     __pbssBANK2:	
  2292  0120                     _buf:	
  2293  0120                     	ds	48
  2294                           
  2295                           	psect	bssBANK3
  2296  01A0                     __pbssBANK3:	
  2297  01A0                     I2C1_StatusCallback@ext_buf:	
  2298  01A0                     	ds	48
  2299                           
  2300                           	psect	inittext
  2301  0DAB                     init_ram:	
  2302  0DAB  00FE               	movwf	126
  2303  0DAC                     initloop:	
  2304  0DAC  0012               	moviw fsr0++
  2305  0DAD  001E               	movwi fsr1++
  2306  0DAE  0BFE               	decfsz	126,f
  2307  0DAF  2DAC               	goto	initloop
  2308  0DB0  3400               	retlw	0
  2309                           
  2310                           	psect	clrtext
  2311  0DA5                     clear_ram0:	
  2312                           ;	Called with FSR0 containing the base address, and
  2313                           ;	WREG with the size to clear
  2314                           
  2315  0DA5  0064               	clrwdt	;clear the watchdog before getting into this loop
  2316  0DA6                     clrloop0:	
  2317  0DA6  0180               	clrf	0	;clear RAM location pointed to by FSR
  2318  0DA7  3101               	addfsr 0,1
  2319  0DA8  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2320  0DA9  2DA6               	goto	clrloop0	;have we reached the end yet?
  2321  0DAA  3400               	retlw	0	;all done for this memory range, return
  2322                           
  2323                           	psect	cstackCOMMON
  2324  0070                     __pcstackCOMMON:	
  2325  0070                     ?_isdigit:	
  2326  0070                     ?_PROTOCOL_Read_Device_Address:	
  2327                           ; 1 bit 
  2328                           
  2329  0070                     ?_I2C1_StatusCallback:	
  2330                           ; 1 bytes @ 0x0
  2331                           
  2332  0070                     ?_PROTOCOL_SET:	
  2333                           ; 1 bytes @ 0x0
  2334                           
  2335  0070                     ?_PROTOCOL_STA:	
  2336                           ; 1 bytes @ 0x0
  2337                           
  2338  0070                     ?_PROTOCOL_STP:	
  2339                           ; 1 bytes @ 0x0
  2340                           
  2341  0070                     ?_PROTOCOL_SAV:	
  2342                           ; 1 bytes @ 0x0
  2343                           
  2344  0070                     ?_PROTOCOL_INV:	
  2345                           ; 1 bytes @ 0x0
  2346                           
  2347  0070                     ??_PROTOCOL_INV:	
  2348                           ; 1 bytes @ 0x0
  2349                           
  2350  0070                     ?_PROTOCOL_RST:	
  2351                           ; 1 bytes @ 0x0
  2352                           
  2353  0070                     ??_PROTOCOL_RST:	
  2354                           ; 1 bytes @ 0x0
  2355                           
  2356  0070                     ?_PROTOCOL_Backplane_Slave_Enabled:	
  2357                           ; 1 bytes @ 0x0
  2358                           
  2359  0070                     ??_PROTOCOL_Backplane_Slave_Enabled:	
  2360                           ; 1 bytes @ 0x0
  2361                           
  2362  0070                     ?_PROTOCOL_Read_Lock:	
  2363                           ; 1 bytes @ 0x0
  2364                           
  2365  0070                     ??_PROTOCOL_Read_Lock:	
  2366                           ; 1 bytes @ 0x0
  2367                           
  2368  0070                     ?_PROTOCOL_EXT:	
  2369                           ; 1 bytes @ 0x0
  2370                           
  2371  0070                     ?_PROTOCOL_I2C_WHO:	
  2372                           ; 1 bytes @ 0x0
  2373                           
  2374  0070                     ??_PROTOCOL_I2C_WHO:	
  2375                           ; 1 bytes @ 0x0
  2376                           
  2377  0070                     ?_PROTOCOL_I2C_SEN:	
  2378                           ; 1 bytes @ 0x0
  2379                           
  2380  0070                     ??_PROTOCOL_I2C_SEN:	
  2381                           ; 1 bytes @ 0x0
  2382                           
  2383  0070                     ?_PROTOCOL_I2C_GET:	
  2384                           ; 1 bytes @ 0x0
  2385                           
  2386  0070                     ??_PROTOCOL_I2C_GET:	
  2387                           ; 1 bytes @ 0x0
  2388                           
  2389  0070                     ?_PIN_MANAGER_Initialize:	
  2390                           ; 1 bytes @ 0x0
  2391                           
  2392  0070                     ?_OSCILLATOR_Initialize:	
  2393                           ; 1 bytes @ 0x0
  2394                           
  2395  0070                     ?_WDT_Initialize:	
  2396                           ; 1 bytes @ 0x0
  2397                           
  2398  0070                     ?_ADC_Initialize:	
  2399                           ; 1 bytes @ 0x0
  2400                           
  2401  0070                     ?_TMR0_Initialize:	
  2402                           ; 1 bytes @ 0x0
  2403                           
  2404  0070                     ?_EUSART_Initialize:	
  2405                           ; 1 bytes @ 0x0
  2406                           
  2407  0070                     ?_EUSART_Transmit_ISR:	
  2408                           ; 1 bytes @ 0x0
  2409                           
  2410  0070                     ??_EUSART_Transmit_ISR:	
  2411                           ; 1 bytes @ 0x0
  2412                           
  2413  0070                     ?_EUSART_Receive_ISR:	
  2414                           ; 1 bytes @ 0x0
  2415                           
  2416  0070                     ??_EUSART_Receive_ISR:	
  2417                           ; 1 bytes @ 0x0
  2418                           
  2419  0070                     ?_PROTOCOL_Loop:	
  2420                           ; 1 bytes @ 0x0
  2421                           
  2422  0070                     ?_I2C1_Initialize:	
  2423                           ; 1 bytes @ 0x0
  2424                           
  2425  0070                     ?_I2C1_ISR:	
  2426                           ; 1 bytes @ 0x0
  2427                           
  2428  0070                     ?_INTERRUPT_InterruptManager:	
  2429                           ; 1 bytes @ 0x0
  2430                           
  2431  0070                     ?_EUSART_Read:	
  2432                           ; 1 bytes @ 0x0
  2433                           
  2434  0070                     ?_EUSART_Write:	
  2435                           ; 1 bytes @ 0x0
  2436                           
  2437  0070                     ?_putch:	
  2438                           ; 1 bytes @ 0x0
  2439                           
  2440  0070                     ?_DATAEE_ReadByte:	
  2441                           ; 1 bytes @ 0x0
  2442                           
  2443  0070                     ?_ADC_SelectChannel:	
  2444                           ; 1 bytes @ 0x0
  2445                           
  2446  0070                     ?_ADC_StartConversion:	
  2447                           ; 1 bytes @ 0x0
  2448                           
  2449  0070                     ?_ADC_IsConversionDone:	
  2450                           ; 1 bytes @ 0x0
  2451                           
  2452  0070                     ?_TMR0_HasOverflowOccured:	
  2453                           ; 1 bytes @ 0x0
  2454                           
  2455  0070                     ?_led_blink:	
  2456                           ; 1 bytes @ 0x0
  2457                           
  2458  0070                     ?_loop_func:	
  2459                           ; 1 bytes @ 0x0
  2460                           
  2461  0070                     ?_main:	
  2462                           ; 1 bytes @ 0x0
  2463                           
  2464  0070                     ?_PROTOCOL_Write_Device_Address:	
  2465                           ; 1 bytes @ 0x0
  2466                           
  2467  0070                     ?i1_DATAEE_WriteByte:	
  2468                           ; 1 bytes @ 0x0
  2469                           
  2470  0070                     ?i1_PROTOCOL_STA:	
  2471                           ; 1 bytes @ 0x0
  2472                           
  2473  0070                     ??i1_PROTOCOL_STA:	
  2474                           ; 1 bytes @ 0x0
  2475                           
  2476  0070                     ?i1_PROTOCOL_STP:	
  2477                           ; 1 bytes @ 0x0
  2478                           
  2479  0070                     ??i1_PROTOCOL_STP:	
  2480                           ; 1 bytes @ 0x0
  2481                           
  2482  0070                     ?i1_PROTOCOL_SAV:	
  2483                           ; 1 bytes @ 0x0
  2484                           
  2485  0070                     ?i1_PROTOCOL_SET:	
  2486                           ; 1 bytes @ 0x0
  2487                           
  2488  0070                     ??i1_PROTOCOL_SET:	
  2489                           ; 1 bytes @ 0x0
  2490                           
  2491  0070                     ?i1_PROTOCOL_EXT:	
  2492                           ; 1 bytes @ 0x0
  2493                           
  2494  0070                     ??i1_PROTOCOL_EXT:	
  2495                           ; 1 bytes @ 0x0
  2496                           
  2497  0070                     i1DATAEE_WriteByte@bData:	
  2498                           ; 1 bytes @ 0x0
  2499                           
  2500                           
  2501                           ; 1 bytes @ 0x0
  2502  0070                     	ds	1
  2503  0071                     ??i1_DATAEE_WriteByte:	
  2504  0071                     PROTOCOL_I2C_SEN@pdata:	
  2505                           ; 1 bytes @ 0x1
  2506                           
  2507  0071                     i1DATAEE_WriteByte@bAdd:	
  2508                           ; 1 bytes @ 0x1
  2509                           
  2510  0071                     i1PROTOCOL_SET@value_:	
  2511                           ; 1 bytes @ 0x1
  2512                           
  2513                           
  2514                           ; 1 bytes @ 0x1
  2515  0071                     	ds	1
  2516  0072                     i1DATAEE_WriteByte@GIEBitValue:	
  2517                           
  2518                           ; 1 bytes @ 0x2
  2519  0072                     	ds	1
  2520  0073                     ??i1_PROTOCOL_SAV:	
  2521                           
  2522                           ; 1 bytes @ 0x3
  2523  0073                     	ds	1
  2524  0074                     ??_I2C1_StatusCallback:	
  2525                           
  2526                           ; 1 bytes @ 0x4
  2527  0074                     	ds	1
  2528  0075                     I2C1_StatusCallback@i2c_bus_state:	
  2529                           
  2530                           ; 1 bytes @ 0x5
  2531  0075                     	ds	1
  2532  0076                     I2C1_StatusCallback@pdata:	
  2533                           
  2534                           ; 1 bytes @ 0x6
  2535  0076                     	ds	1
  2536  0077                     ??_I2C1_ISR:	
  2537                           
  2538                           ; 1 bytes @ 0x7
  2539  0077                     	ds	1
  2540  0078                     I2C1_ISR@i2c_data:	
  2541                           
  2542                           ; 1 bytes @ 0x8
  2543  0078                     	ds	1
  2544  0079                     ??_INTERRUPT_InterruptManager:	
  2545                           
  2546                           ; 1 bytes @ 0x9
  2547  0079                     	ds	1
  2548                           
  2549                           	psect	cstackBANK0
  2550  0020                     __pcstackBANK0:	
  2551  0020                     ??_PROTOCOL_Read_Device_Address:	
  2552  0020                     ??_PROTOCOL_SET:	
  2553                           ; 1 bytes @ 0x0
  2554                           
  2555  0020                     ??_PROTOCOL_STA:	
  2556                           ; 1 bytes @ 0x0
  2557                           
  2558  0020                     ??_PROTOCOL_STP:	
  2559                           ; 1 bytes @ 0x0
  2560                           
  2561  0020                     ??_PROTOCOL_EXT:	
  2562                           ; 1 bytes @ 0x0
  2563                           
  2564  0020                     ??_PIN_MANAGER_Initialize:	
  2565                           ; 1 bytes @ 0x0
  2566                           
  2567  0020                     ??_OSCILLATOR_Initialize:	
  2568                           ; 1 bytes @ 0x0
  2569                           
  2570  0020                     ??_WDT_Initialize:	
  2571                           ; 1 bytes @ 0x0
  2572                           
  2573  0020                     ??_ADC_Initialize:	
  2574                           ; 1 bytes @ 0x0
  2575                           
  2576  0020                     ??_TMR0_Initialize:	
  2577                           ; 1 bytes @ 0x0
  2578                           
  2579  0020                     ??_EUSART_Initialize:	
  2580                           ; 1 bytes @ 0x0
  2581                           
  2582  0020                     ?_PROTOCOL_Set_Func:	
  2583                           ; 1 bytes @ 0x0
  2584                           
  2585  0020                     ??_isdigit:	
  2586                           ; 1 bytes @ 0x0
  2587                           
  2588  0020                     ??_I2C1_Initialize:	
  2589                           ; 1 bytes @ 0x0
  2590                           
  2591  0020                     ??_EUSART_Read:	
  2592                           ; 1 bytes @ 0x0
  2593                           
  2594  0020                     ??_EUSART_Write:	
  2595                           ; 1 bytes @ 0x0
  2596                           
  2597  0020                     ?_DATAEE_WriteByte:	
  2598                           ; 1 bytes @ 0x0
  2599                           
  2600  0020                     ??_DATAEE_ReadByte:	
  2601                           ; 1 bytes @ 0x0
  2602                           
  2603  0020                     ??_ADC_SelectChannel:	
  2604                           ; 1 bytes @ 0x0
  2605                           
  2606  0020                     ??_ADC_StartConversion:	
  2607                           ; 1 bytes @ 0x0
  2608                           
  2609  0020                     ??_ADC_IsConversionDone:	
  2610                           ; 1 bytes @ 0x0
  2611                           
  2612  0020                     ??_TMR0_HasOverflowOccured:	
  2613                           ; 1 bytes @ 0x0
  2614                           
  2615  0020                     ??_led_blink:	
  2616                           ; 1 bytes @ 0x0
  2617                           
  2618  0020                     ?_set_handler:	
  2619                           ; 1 bytes @ 0x0
  2620                           
  2621  0020                     ?_PROTOCOL_I2C_Set_TLV:	
  2622                           ; 1 bytes @ 0x0
  2623                           
  2624  0020                     ?_abs:	
  2625                           ; 1 bytes @ 0x0
  2626                           
  2627  0020                     ?_strncmp:	
  2628                           ; 2 bytes @ 0x0
  2629                           
  2630  0020                     ?_ADC_GetConversionResult:	
  2631                           ; 2 bytes @ 0x0
  2632                           
  2633  0020                     ?___wmul:	
  2634                           ; 2 bytes @ 0x0
  2635                           
  2636  0020                     ?___lwdiv:	
  2637                           ; 2 bytes @ 0x0
  2638                           
  2639  0020                     DATAEE_WriteByte@bData:	
  2640                           ; 2 bytes @ 0x0
  2641                           
  2642  0020                     DATAEE_ReadByte@bAdd:	
  2643                           ; 1 bytes @ 0x0
  2644                           
  2645  0020                     set_handler@value:	
  2646                           ; 1 bytes @ 0x0
  2647                           
  2648  0020                     PROTOCOL_EXT@char_buf:	
  2649                           ; 1 bytes @ 0x0
  2650                           
  2651  0020                     PROTOCOL_I2C_Set_TLV@length:	
  2652                           ; 1 bytes @ 0x0
  2653                           
  2654  0020                     _isdigit$1266:	
  2655                           ; 1 bytes @ 0x0
  2656                           
  2657  0020                     PROTOCOL_Set_Func@loop_func:	
  2658                           ; 1 bytes @ 0x0
  2659                           
  2660  0020                     ___wmul@multiplier:	
  2661                           ; 2 bytes @ 0x0
  2662                           
  2663  0020                     abs@a:	
  2664                           ; 2 bytes @ 0x0
  2665                           
  2666  0020                     ___lwdiv@divisor:	
  2667                           ; 2 bytes @ 0x0
  2668                           
  2669  0020                     strncmp@s1:	
  2670                           ; 2 bytes @ 0x0
  2671                           
  2672                           
  2673                           ; 2 bytes @ 0x0
  2674  0020                     	ds	1
  2675  0021                     ?_PROTOCOL_Initialize:	
  2676  0021                     ??_DATAEE_WriteByte:	
  2677                           ; 1 bytes @ 0x1
  2678                           
  2679  0021                     ??_set_handler:	
  2680                           ; 1 bytes @ 0x1
  2681                           
  2682  0021                     EUSART_Read@readValue:	
  2683                           ; 1 bytes @ 0x1
  2684                           
  2685  0021                     EUSART_Write@txData:	
  2686                           ; 1 bytes @ 0x1
  2687                           
  2688  0021                     DATAEE_WriteByte@bAdd:	
  2689                           ; 1 bytes @ 0x1
  2690                           
  2691  0021                     ADC_SelectChannel@channel:	
  2692                           ; 1 bytes @ 0x1
  2693                           
  2694  0021                     PROTOCOL_SET@value_:	
  2695                           ; 1 bytes @ 0x1
  2696                           
  2697  0021                     PROTOCOL_I2C_Set_TLV@pbuffer:	
  2698                           ; 1 bytes @ 0x1
  2699                           
  2700  0021                     isdigit@c:	
  2701                           ; 1 bytes @ 0x1
  2702                           
  2703  0021                     PROTOCOL_Initialize@device_id:	
  2704                           ; 1 bytes @ 0x1
  2705                           
  2706                           
  2707                           ; 2 bytes @ 0x1
  2708  0021                     	ds	1
  2709  0022                     ??_abs:	
  2710  0022                     ??_PROTOCOL_Set_Func:	
  2711                           ; 1 bytes @ 0x2
  2712                           
  2713  0022                     ??_putch:	
  2714                           ; 1 bytes @ 0x2
  2715                           
  2716  0022                     ??_ADC_GetConversionResult:	
  2717                           ; 1 bytes @ 0x2
  2718                           
  2719  0022                     ??_PROTOCOL_I2C_Set_TLV:	
  2720                           ; 1 bytes @ 0x2
  2721                           
  2722  0022                     putch@txData:	
  2723                           ; 1 bytes @ 0x2
  2724                           
  2725  0022                     DATAEE_WriteByte@GIEBitValue:	
  2726                           ; 1 bytes @ 0x2
  2727                           
  2728  0022                     strncmp@s2:	
  2729                           ; 1 bytes @ 0x2
  2730                           
  2731  0022                     ___wmul@multiplicand:	
  2732                           ; 1 bytes @ 0x2
  2733                           
  2734  0022                     ___lwdiv@dividend:	
  2735                           ; 2 bytes @ 0x2
  2736                           
  2737                           
  2738                           ; 2 bytes @ 0x2
  2739  0022                     	ds	1
  2740  0023                     ??_PROTOCOL_SAV:	
  2741  0023                     ??_PROTOCOL_Write_Device_Address:	
  2742                           ; 1 bytes @ 0x3
  2743                           
  2744  0023                     PROTOCOL_Initialize@start_handler:	
  2745                           ; 1 bytes @ 0x3
  2746                           
  2747  0023                     PROTOCOL_I2C_Set_TLV@type:	
  2748                           ; 1 bytes @ 0x3
  2749                           
  2750  0023                     strncmp@len:	
  2751                           ; 1 bytes @ 0x3
  2752                           
  2753                           
  2754                           ; 2 bytes @ 0x3
  2755  0023                     	ds	1
  2756  0024                     ??___wmul:	
  2757  0024                     ??___lwdiv:	
  2758                           ; 1 bytes @ 0x4
  2759                           
  2760  0024                     PROTOCOL_Initialize@stop_handler:	
  2761                           ; 1 bytes @ 0x4
  2762                           
  2763  0024                     PROTOCOL_Write_Device_Address@device_id_i2c:	
  2764                           ; 1 bytes @ 0x4
  2765                           
  2766  0024                     PROTOCOL_I2C_Set_TLV@status:	
  2767                           ; 1 bytes @ 0x4
  2768                           
  2769  0024                     ___wmul@product:	
  2770                           ; 1 bytes @ 0x4
  2771                           
  2772                           
  2773                           ; 2 bytes @ 0x4
  2774  0024                     	ds	1
  2775  0025                     ??_strncmp:	
  2776  0025                     PROTOCOL_Initialize@set_handler:	
  2777                           ; 1 bytes @ 0x5
  2778                           
  2779  0025                     ___lwdiv@quotient:	
  2780                           ; 1 bytes @ 0x5
  2781                           
  2782                           
  2783                           ; 2 bytes @ 0x5
  2784  0025                     	ds	1
  2785  0026                     ?_atoi:	
  2786  0026                     PROTOCOL_Initialize@inv_handler:	
  2787                           ; 2 bytes @ 0x6
  2788                           
  2789                           
  2790                           ; 2 bytes @ 0x6
  2791  0026                     	ds	1
  2792  0027                     ___lwdiv@counter:	
  2793                           
  2794                           ; 1 bytes @ 0x7
  2795  0027                     	ds	1
  2796  0028                     ??_atoi:	
  2797  0028                     ?___lwmod:	
  2798                           ; 1 bytes @ 0x8
  2799                           
  2800  0028                     PROTOCOL_Initialize@scaler:	
  2801                           ; 2 bytes @ 0x8
  2802                           
  2803  0028                     ___lwmod@divisor:	
  2804                           ; 1 bytes @ 0x8
  2805                           
  2806                           
  2807                           ; 2 bytes @ 0x8
  2808  0028                     	ds	1
  2809  0029                     ??_PROTOCOL_Initialize:	
  2810                           
  2811                           ; 1 bytes @ 0x9
  2812  0029                     	ds	1
  2813  002A                     atoi@sign:	
  2814  002A                     ___lwmod@dividend:	
  2815                           ; 1 bytes @ 0xA
  2816                           
  2817                           
  2818                           ; 2 bytes @ 0xA
  2819  002A                     	ds	1
  2820  002B                     atoi@a:	
  2821                           
  2822                           ; 2 bytes @ 0xB
  2823  002B                     	ds	1
  2824  002C                     ??___lwmod:	
  2825                           
  2826                           ; 1 bytes @ 0xC
  2827  002C                     	ds	1
  2828  002D                     atoi@s:	
  2829  002D                     ___lwmod@counter:	
  2830                           ; 1 bytes @ 0xD
  2831                           
  2832                           
  2833                           ; 1 bytes @ 0xD
  2834  002D                     	ds	1
  2835  002E                     ?_printf:	
  2836  002E                     printf@f:	
  2837                           ; 2 bytes @ 0xE
  2838                           
  2839                           
  2840                           ; 2 bytes @ 0xE
  2841  002E                     	ds	4
  2842  0032                     ??_printf:	
  2843                           
  2844                           ; 1 bytes @ 0x12
  2845  0032                     	ds	4
  2846  0036                     printf@prec:	
  2847                           
  2848                           ; 1 bytes @ 0x16
  2849  0036                     	ds	1
  2850  0037                     printf@cp:	
  2851                           
  2852                           ; 2 bytes @ 0x17
  2853  0037                     	ds	2
  2854  0039                     printf@ap:	
  2855                           
  2856                           ; 1 bytes @ 0x19
  2857  0039                     	ds	1
  2858  003A                     printf@val:	
  2859                           
  2860                           ; 2 bytes @ 0x1A
  2861  003A                     	ds	2
  2862  003C                     printf@len:	
  2863                           
  2864                           ; 2 bytes @ 0x1C
  2865  003C                     	ds	2
  2866  003E                     printf@flag:	
  2867                           
  2868                           ; 1 bytes @ 0x1E
  2869  003E                     	ds	1
  2870  003F                     printf@width:	
  2871                           
  2872                           ; 2 bytes @ 0x1F
  2873  003F                     	ds	2
  2874  0041                     printf@c:	
  2875                           
  2876                           ; 1 bytes @ 0x21
  2877  0041                     	ds	1
  2878  0042                     ?_PROTOCOL_I2C_Send_uint8_t:	
  2879  0042                     PROTOCOL_I2C_Send_uint8_t@pbuffer:	
  2880                           ; 1 bytes @ 0x22
  2881                           
  2882                           
  2883                           ; 1 bytes @ 0x22
  2884  0042                     	ds	1
  2885  0043                     ??_PROTOCOL_I2C_Send_uint8_t:	
  2886                           
  2887                           ; 1 bytes @ 0x23
  2888  0043                     	ds	3
  2889  0046                     PROTOCOL_I2C_Send_uint8_t@length:	
  2890                           
  2891                           ; 1 bytes @ 0x26
  2892  0046                     	ds	1
  2893  0047                     ??_loop_func:	
  2894                           
  2895                           ; 1 bytes @ 0x27
  2896  0047                     	ds	1
  2897  0048                     loop_func@out:	
  2898                           
  2899                           ; 2 bytes @ 0x28
  2900  0048                     	ds	2
  2901  004A                     loop_func@transition_detected:	
  2902                           
  2903                           ; 1 bytes @ 0x2A
  2904  004A                     	ds	1
  2905  004B                     loop_func@v:	
  2906                           
  2907                           ; 2 bytes @ 0x2B
  2908  004B                     	ds	2
  2909  004D                     loop_func@i:	
  2910                           
  2911                           ; 1 bytes @ 0x2D
  2912  004D                     	ds	1
  2913  004E                     ??_PROTOCOL_Loop:	
  2914                           
  2915                           ; 1 bytes @ 0x2E
  2916  004E                     	ds	2
  2917  0050                     PROTOCOL_Loop@c:	
  2918                           
  2919                           ; 1 bytes @ 0x30
  2920  0050                     	ds	1
  2921  0051                     PROTOCOL_Loop@device_address:	
  2922                           
  2923                           ; 1 bytes @ 0x31
  2924  0051                     	ds	1
  2925  0052                     ??_main:	
  2926                           
  2927                           	psect	maintext
  2928  07BA                     __pmaintext:	
  2929                           ; 1 bytes @ 0x32
  2930 ;;
  2931 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2932 ;;
  2933 ;; *************** function _main *****************
  2934 ;; Defined at:
  2935 ;;		line 102 in file "main.c"
  2936 ;; Parameters:    Size  Location     Type
  2937 ;;		None
  2938 ;; Auto vars:     Size  Location     Type
  2939 ;;		None
  2940 ;; Return value:  Size  Location     Type
  2941 ;;                  1    wreg      void 
  2942 ;; Registers used:
  2943 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2944 ;; Tracked objects:
  2945 ;;		On entry : B1F/0
  2946 ;;		On exit  : 0/0
  2947 ;;		Unchanged: 0/0
  2948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2950 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2952 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2953 ;;Total ram usage:        0 bytes
  2954 ;; Hardware stack levels required when called:   11
  2955 ;; This function calls:
  2956 ;;		_ADC_Initialize
  2957 ;;		_EUSART_Initialize
  2958 ;;		_I2C1_Initialize
  2959 ;;		_OSCILLATOR_Initialize
  2960 ;;		_PIN_MANAGER_Initialize
  2961 ;;		_PROTOCOL_Initialize
  2962 ;;		_PROTOCOL_Loop
  2963 ;;		_PROTOCOL_Set_Func
  2964 ;;		_TMR0_Initialize
  2965 ;;		_WDT_Initialize
  2966 ;; This function is called by:
  2967 ;;		Startup code after reset
  2968 ;; This function uses a non-reentrant model
  2969 ;;
  2970                           
  2971                           
  2972                           ;psect for function _main
  2973  07BA                     _main:	
  2974                           
  2975                           ;main.c: 105: PROTOCOL_Initialize("MULTI_A1324LUA_T", (0), (0), (0), set_handler, 1);
  2976                           
  2977                           ;incstack = 0
  2978                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2979  07BA  30DC               	movlw	low (STR_1| (0+32768))
  2980  07BB  0020               	movlb	0	; select bank0
  2981  07BC  00A1               	movwf	PROTOCOL_Initialize@device_id
  2982  07BD  3083               	movlw	high (STR_1| (0+32768))
  2983  07BE  00A2               	movwf	PROTOCOL_Initialize@device_id+1
  2984  07BF  01A3               	clrf	PROTOCOL_Initialize@start_handler
  2985  07C0  01A4               	clrf	PROTOCOL_Initialize@stop_handler
  2986  07C1  01A5               	clrf	PROTOCOL_Initialize@set_handler
  2987  07C2  3004               	movlw	low _set_handler
  2988  07C3  00A6               	movwf	PROTOCOL_Initialize@inv_handler
  2989  07C4  300E               	movlw	high _set_handler
  2990  07C5  00A7               	movwf	PROTOCOL_Initialize@inv_handler+1
  2991  07C6  01A8               	clrf	PROTOCOL_Initialize@scaler
  2992  07C7  0AA8               	incf	PROTOCOL_Initialize@scaler,f
  2993  07C8  3186  2678  3187   	fcall	_PROTOCOL_Initialize
  2994                           
  2995                           ;main.c: 106: PROTOCOL_Set_Func(loop_func);
  2996  07CB  3060               	movlw	low _loop_func
  2997  07CC  0020               	movlb	0	; select bank0
  2998  07CD  00A0               	movwf	PROTOCOL_Set_Func@loop_func
  2999  07CE  3005               	movlw	high _loop_func
  3000  07CF  00A1               	movwf	PROTOCOL_Set_Func@loop_func+1
  3001  07D0  318D  25F1  3187   	fcall	_PROTOCOL_Set_Func
  3002                           
  3003                           ;main.c: 109: PIN_MANAGER_Initialize();
  3004  07D3  318F  2706  3187   	fcall	_PIN_MANAGER_Initialize
  3005                           
  3006                           ;main.c: 110: OSCILLATOR_Initialize();
  3007  07D6  318D  259A  3187   	fcall	_OSCILLATOR_Initialize
  3008                           
  3009                           ;main.c: 111: WDT_Initialize();
  3010  07D9  318D  2592  3187   	fcall	_WDT_Initialize
  3011                           
  3012                           ;main.c: 112: ADC_Initialize();
  3013  07DC  318D  25C6  3187   	fcall	_ADC_Initialize
  3014                           
  3015                           ;main.c: 113: TMR0_Initialize();
  3016  07DF  318E  2629  3187   	fcall	_TMR0_Initialize
  3017                           
  3018                           ;main.c: 116: (INTCONbits.GIE = 1);
  3019  07E2  178B               	bsf	11,7	;volatile
  3020                           
  3021                           ;main.c: 117: (INTCONbits.PEIE = 1);
  3022  07E3  170B               	bsf	11,6	;volatile
  3023                           
  3024                           ;main.c: 120: EUSART_Initialize();
  3025  07E4  318E  267D  3187   	fcall	_EUSART_Initialize
  3026                           
  3027                           ;main.c: 123: I2C1_Initialize();
  3028  07E7  318F  2744  3187   	fcall	_I2C1_Initialize
  3029                           
  3030                           ;main.c: 126: PROTOCOL_Loop();
  3031  07EA  3182  2249         	fcall	_PROTOCOL_Loop
  3032  07EC  3180  2830         	ljmp	start
  3033  07EE                     __end_of_main:	
  3034                           
  3035                           	psect	text1
  3036  0D92                     __ptext1:	
  3037 ;; *************** function _WDT_Initialize *****************
  3038 ;; Defined at:
  3039 ;;		line 89 in file "mcc_generated_files/mcc.c"
  3040 ;; Parameters:    Size  Location     Type
  3041 ;;		None
  3042 ;; Auto vars:     Size  Location     Type
  3043 ;;		None
  3044 ;; Return value:  Size  Location     Type
  3045 ;;                  1    wreg      void 
  3046 ;; Registers used:
  3047 ;;		wreg
  3048 ;; Tracked objects:
  3049 ;;		On entry : 0/0
  3050 ;;		On exit  : 0/0
  3051 ;;		Unchanged: 0/0
  3052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3054 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3056 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3057 ;;Total ram usage:        0 bytes
  3058 ;; Hardware stack levels used:    1
  3059 ;; Hardware stack levels required when called:    5
  3060 ;; This function calls:
  3061 ;;		Nothing
  3062 ;; This function is called by:
  3063 ;;		_main
  3064 ;;		_SYSTEM_Initialize
  3065 ;; This function uses a non-reentrant model
  3066 ;;
  3067                           
  3068                           
  3069                           ;psect for function _WDT_Initialize
  3070  0D92                     _WDT_Initialize:	
  3071                           
  3072                           ;mcc.c: 92: WDTCON = 0x16;
  3073                           
  3074                           ;incstack = 0
  3075                           ; Regs used in _WDT_Initialize: [wreg]
  3076  0D92  3016               	movlw	22
  3077  0D93  0021               	movlb	1	; select bank1
  3078  0D94  0097               	movwf	23	;volatile
  3079  0D95  0008               	return
  3080  0D96                     __end_of_WDT_Initialize:	
  3081                           
  3082                           	psect	text2
  3083  0E29                     __ptext2:	
  3084 ;; *************** function _TMR0_Initialize *****************
  3085 ;; Defined at:
  3086 ;;		line 62 in file "mcc_generated_files/tmr0.c"
  3087 ;; Parameters:    Size  Location     Type
  3088 ;;		None
  3089 ;; Auto vars:     Size  Location     Type
  3090 ;;		None
  3091 ;; Return value:  Size  Location     Type
  3092 ;;                  1    wreg      void 
  3093 ;; Registers used:
  3094 ;;		wreg, status,2
  3095 ;; Tracked objects:
  3096 ;;		On entry : 0/0
  3097 ;;		On exit  : 0/0
  3098 ;;		Unchanged: 0/0
  3099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3100 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3101 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3102 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3103 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3104 ;;Total ram usage:        1 bytes
  3105 ;; Hardware stack levels used:    1
  3106 ;; Hardware stack levels required when called:    5
  3107 ;; This function calls:
  3108 ;;		Nothing
  3109 ;; This function is called by:
  3110 ;;		_main
  3111 ;;		_SYSTEM_Initialize
  3112 ;; This function uses a non-reentrant model
  3113 ;;
  3114                           
  3115                           
  3116                           ;psect for function _TMR0_Initialize
  3117  0E29                     _TMR0_Initialize:	
  3118                           
  3119                           ;tmr0.c: 67: OPTION_REG = (OPTION_REG & 0xC0) | 0xD4 & 0x3F;
  3120                           
  3121                           ;incstack = 0
  3122                           ; Regs used in _TMR0_Initialize: [wreg+status,2]
  3123  0E29  0021               	movlb	1	; select bank1
  3124  0E2A  0815               	movf	21,w	;volatile
  3125  0E2B  39C0               	andlw	192
  3126  0E2C  3814               	iorlw	20
  3127  0E2D  0095               	movwf	21	;volatile
  3128                           
  3129                           ;tmr0.c: 70: TMR0 = 0x06;
  3130  0E2E  3006               	movlw	6
  3131  0E2F  0020               	movlb	0	; select bank0
  3132  0E30  0095               	movwf	21	;volatile
  3133                           
  3134                           ;tmr0.c: 73: timer0ReloadVal= 6;
  3135  0E31  3006               	movlw	6
  3136  0E32  00A0               	movwf	??_TMR0_Initialize
  3137  0E33  0820               	movf	??_TMR0_Initialize,w
  3138  0E34  00DF               	movwf	_timer0ReloadVal	;volatile
  3139                           
  3140                           ;tmr0.c: 76: INTCONbits.TMR0IF = 0;
  3141  0E35  110B               	bcf	11,2	;volatile
  3142  0E36  0008               	return
  3143  0E37                     __end_of_TMR0_Initialize:	
  3144                           
  3145                           	psect	text3
  3146  0DF1                     __ptext3:	
  3147 ;; *************** function _PROTOCOL_Set_Func *****************
  3148 ;; Defined at:
  3149 ;;		line 77 in file "protocol.c"
  3150 ;; Parameters:    Size  Location     Type
  3151 ;;  loop_func       2    0[BANK0 ] PTR void 
  3152 ;;		 -> loop_func(1), 
  3153 ;; Auto vars:     Size  Location     Type
  3154 ;;		None
  3155 ;; Return value:  Size  Location     Type
  3156 ;;                  1    wreg      void 
  3157 ;; Registers used:
  3158 ;;		wreg
  3159 ;; Tracked objects:
  3160 ;;		On entry : 0/0
  3161 ;;		On exit  : 0/0
  3162 ;;		Unchanged: 0/0
  3163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3164 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3165 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3167 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3168 ;;Total ram usage:        2 bytes
  3169 ;; Hardware stack levels used:    1
  3170 ;; Hardware stack levels required when called:    5
  3171 ;; This function calls:
  3172 ;;		Nothing
  3173 ;; This function is called by:
  3174 ;;		_main
  3175 ;; This function uses a non-reentrant model
  3176 ;;
  3177                           
  3178                           
  3179                           ;psect for function _PROTOCOL_Set_Func
  3180  0DF1                     _PROTOCOL_Set_Func:	
  3181                           
  3182                           ;protocol.c: 78: PROTOCOL_Loop_Func = loop_func;
  3183                           
  3184                           ;incstack = 0
  3185                           ; Regs used in _PROTOCOL_Set_Func: [wreg]
  3186  0DF1  0020               	movlb	0	; select bank0
  3187  0DF2  0821               	movf	PROTOCOL_Set_Func@loop_func+1,w
  3188  0DF3  0021               	movlb	1	; select bank1
  3189  0DF4  00BD               	movwf	(_PROTOCOL_Loop_Func+1)^(0+128)
  3190  0DF5  0020               	movlb	0	; select bank0
  3191  0DF6  0820               	movf	PROTOCOL_Set_Func@loop_func,w
  3192  0DF7  0021               	movlb	1	; select bank1
  3193  0DF8  00BC               	movwf	_PROTOCOL_Loop_Func^(0+128)
  3194  0DF9  0008               	return
  3195  0DFA                     __end_of_PROTOCOL_Set_Func:	
  3196                           
  3197                           	psect	text4
  3198  0249                     __ptext4:	
  3199 ;; *************** function _PROTOCOL_Loop *****************
  3200 ;; Defined at:
  3201 ;;		line 136 in file "protocol.c"
  3202 ;; Parameters:    Size  Location     Type
  3203 ;;		None
  3204 ;; Auto vars:     Size  Location     Type
  3205 ;;  device_addre    1   49[BANK0 ] unsigned char 
  3206 ;;  c               1   48[BANK0 ] unsigned char 
  3207 ;; Return value:  Size  Location     Type
  3208 ;;                  1    wreg      void 
  3209 ;; Registers used:
  3210 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3211 ;; Tracked objects:
  3212 ;;		On entry : 0/0
  3213 ;;		On exit  : 0/0
  3214 ;;		Unchanged: 0/0
  3215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3217 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3218 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3219 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3220 ;;Total ram usage:        4 bytes
  3221 ;; Hardware stack levels used:    1
  3222 ;; Hardware stack levels required when called:   10
  3223 ;; This function calls:
  3224 ;;		Absolute function
  3225 ;;		_EUSART_Read
  3226 ;;		_PROTOCOL_EXT
  3227 ;;		_PROTOCOL_Read_Device_Address
  3228 ;;		_PROTOCOL_SAV
  3229 ;;		_PROTOCOL_SET
  3230 ;;		_PROTOCOL_STA
  3231 ;;		_PROTOCOL_STP
  3232 ;;		_PROTOCOL_Write_Device_Address
  3233 ;;		_TMR0_HasOverflowOccured
  3234 ;;		_atoi
  3235 ;;		_loop_func
  3236 ;;		_printf
  3237 ;;		_set_handler
  3238 ;;		_strncmp
  3239 ;; This function is called by:
  3240 ;;		_main
  3241 ;; This function uses a non-reentrant model
  3242 ;;
  3243                           
  3244                           
  3245                           ;psect for function _PROTOCOL_Loop
  3246  0249                     _PROTOCOL_Loop:	
  3247  0249                     l664:	
  3248                           ;incstack = 0
  3249                           ; Regs used in _PROTOCOL_Loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3250                           ;protocol.c: 137: uint8_t device_address;
  3251                           ;protocol.c: 138: uint8_t c;
  3252                           ;protocol.c: 139: while (1) {
  3253                           
  3254                           
  3255                           ;protocol.c: 140: tmr_overflow = TMR0_HasOverflowOccured();
  3256  0249  318D  258E  3182   	fcall	_TMR0_HasOverflowOccured
  3257  024C  0020               	movlb	0	; select bank0
  3258  024D  00CE               	movwf	??_PROTOCOL_Loop
  3259  024E  084E               	movf	??_PROTOCOL_Loop,w
  3260  024F  00D6               	movwf	_tmr_overflow
  3261                           
  3262                           ;protocol.c: 141: if (tmr_overflow) {
  3263  0250  0856               	movf	_tmr_overflow,w
  3264  0251  1903               	btfsc	3,2
  3265  0252  2A6F               	goto	l3202
  3266                           
  3267                           ;protocol.c: 142: TMR0IF = 0;
  3268  0253  110B               	bcf	11,2	;volatile
  3269                           
  3270                           ;protocol.c: 144: if (PROTOCOL_Inv_Handler && (++tmr_cnt >= value)) {
  3271  0254  0852               	movf	_PROTOCOL_Inv_Handler,w
  3272  0255  0453               	iorwf	_PROTOCOL_Inv_Handler+1,w
  3273  0256  1903               	btfsc	3,2
  3274  0257  2A6F               	goto	l3202
  3275  0258  3001               	movlw	1
  3276  0259  00CE               	movwf	??_PROTOCOL_Loop
  3277  025A  084E               	movf	??_PROTOCOL_Loop,w
  3278  025B  07D7               	addwf	_tmr_cnt,f
  3279  025C  085C               	movf	_value,w
  3280  025D  0257               	subwf	_tmr_cnt,w
  3281  025E  1C03               	skipc
  3282  025F  2A6F               	goto	l3202
  3283                           
  3284                           ;protocol.c: 145: tmr_cnt = 0;
  3285  0260  01D7               	clrf	_tmr_cnt
  3286                           
  3287                           ;protocol.c: 146: if (++sec_cnt >= tmr_scaler) {
  3288  0261  3001               	movlw	1
  3289  0262  00CE               	movwf	??_PROTOCOL_Loop
  3290  0263  084E               	movf	??_PROTOCOL_Loop,w
  3291  0264  07D8               	addwf	_sec_cnt,f
  3292  0265  086C               	movf	_tmr_scaler,w
  3293  0266  0258               	subwf	_sec_cnt,w
  3294  0267  1C03               	skipc
  3295  0268  2A6F               	goto	l3202
  3296                           
  3297                           ;protocol.c: 147: if (running) invoked = 1;
  3298  0269  085A               	movf	_running,w
  3299  026A  1903               	btfsc	3,2
  3300  026B  2A6E               	goto	l3200
  3301  026C  01D9               	clrf	_invoked
  3302  026D  0AD9               	incf	_invoked,f
  3303  026E                     l3200:	
  3304                           
  3305                           ;protocol.c: 148: sec_cnt = 0;
  3306  026E  01D8               	clrf	_sec_cnt
  3307  026F                     l3202:	
  3308                           
  3309                           ;protocol.c: 149: }
  3310                           ;protocol.c: 150: }
  3311                           ;protocol.c: 151: }
  3312                           ;protocol.c: 152: if (invoked && PROTOCOL_Inv_Handler) {
  3313  026F  0859               	movf	_invoked,w
  3314  0270  1903               	btfsc	3,2
  3315  0271  2A7D               	goto	l3210
  3316  0272  0852               	movf	_PROTOCOL_Inv_Handler,w
  3317  0273  0453               	iorwf	_PROTOCOL_Inv_Handler+1,w
  3318  0274  1903               	btfsc	3,2
  3319  0275  2A7D               	goto	l3210
  3320                           
  3321                           ;protocol.c: 153: PROTOCOL_Inv_Handler();
  3322  0276  0853               	movf	_PROTOCOL_Inv_Handler+1,w
  3323  0277  008A               	movwf	10
  3324  0278  0852               	movf	_PROTOCOL_Inv_Handler,w
  3325  0279  000A               	callw
  3326  027A  3182               	pagesel	$
  3327                           
  3328                           ;protocol.c: 154: invoked = 0;
  3329  027B  0020               	movlb	0	; select bank0
  3330  027C  01D9               	clrf	_invoked
  3331  027D                     l3210:	
  3332                           
  3333                           ;protocol.c: 155: }
  3334                           ;protocol.c: 156: if (PROTOCOL_Loop_Func) PROTOCOL_Loop_Func();
  3335  027D  0021               	movlb	1	; select bank1
  3336  027E  083C               	movf	_PROTOCOL_Loop_Func^(0+128),w
  3337  027F  043D               	iorwf	(_PROTOCOL_Loop_Func+1)^(0+128),w
  3338  0280  1903               	btfsc	3,2
  3339  0281  2A87               	goto	l3214
  3340  0282  083D               	movf	(_PROTOCOL_Loop_Func+1)^(0+128),w
  3341  0283  008A               	movwf	10
  3342  0284  083C               	movf	_PROTOCOL_Loop_Func^(0+128),w
  3343  0285  000A               	callw
  3344  0286  3182               	pagesel	$
  3345  0287                     l3214:	
  3346                           
  3347                           ;protocol.c: 157: if ((eusartRxCount)) {
  3348  0287  0020               	movlb	0	; select bank0
  3349  0288  0860               	movf	_eusartRxCount,w	;volatile
  3350  0289  1903               	btfsc	3,2
  3351  028A  2A49               	goto	l664
  3352                           
  3353                           ;protocol.c: 158: c = EUSART_Read();
  3354  028B  318F  2725  3182   	fcall	_EUSART_Read
  3355  028E  0020               	movlb	0	; select bank0
  3356  028F  00CE               	movwf	??_PROTOCOL_Loop
  3357  0290  084E               	movf	??_PROTOCOL_Loop,w
  3358  0291  00D0               	movwf	PROTOCOL_Loop@c
  3359                           
  3360                           ;protocol.c: 159: buf[cnt++] = c;
  3361  0292  0850               	movf	PROTOCOL_Loop@c,w
  3362  0293  00CE               	movwf	??_PROTOCOL_Loop
  3363  0294  085D               	movf	_cnt,w
  3364  0295  3E20               	addlw	(low (_buf| (0+256)))& (0+255)
  3365  0296  0086               	movwf	6
  3366  0297  3001               	movlw	1	; select bank2/3
  3367  0298  0087               	movwf	7
  3368  0299  084E               	movf	??_PROTOCOL_Loop,w
  3369  029A  0081               	movwf	1
  3370  029B  3001               	movlw	1
  3371  029C  00CE               	movwf	??_PROTOCOL_Loop
  3372  029D  084E               	movf	??_PROTOCOL_Loop,w
  3373  029E  07DD               	addwf	_cnt,f
  3374                           
  3375                           ;protocol.c: 160: if (c == '\n') {
  3376  029F  300A               	movlw	10
  3377  02A0  0650               	xorwf	PROTOCOL_Loop@c,w
  3378  02A1  1D03               	btfss	3,2
  3379  02A2  2A49               	goto	l664
  3380                           
  3381                           ;protocol.c: 161: buf[--cnt] = '\0';
  3382  02A3  3001               	movlw	1
  3383  02A4  02DD               	subwf	_cnt,f
  3384  02A5  085D               	movf	_cnt,w
  3385  02A6  3E20               	addlw	(low (_buf| (0+256)))& (0+255)
  3386  02A7  0086               	movwf	6
  3387  02A8  3001               	movlw	1	; select bank2/3
  3388  02A9  0087               	movwf	7
  3389  02AA  0181               	clrf	1
  3390                           
  3391                           ;protocol.c: 162: cnt = 0;
  3392  02AB  01DD               	clrf	_cnt
  3393                           
  3394                           ;protocol.c: 163: printf("#%s\n", buf);
  3395  02AC  3067               	movlw	low (STR_3| (0+32768))
  3396  02AD  00AE               	movwf	printf@f
  3397  02AE  3084               	movlw	high (STR_3| (0+32768))
  3398  02AF  00AF               	movwf	printf@f+1
  3399  02B0  3020               	movlw	low _buf
  3400  02B1  00B0               	movwf	low ((?_printf| 0+2))
  3401  02B2  3001               	movlw	high _buf
  3402  02B3  00B1               	movwf	(low ((?_printf| 0+2))+1)
  3403  02B4  3180  2074  3182   	fcall	_printf
  3404                           
  3405                           ;protocol.c: 164: if (BACKPLANE_SLAVE_ADDRESS != 0x01) {
  3406  02B7  0020               	movlb	0	; select bank0
  3407  02B8  036E               	decf	_BACKPLANE_SLAVE_ADDRESS,w
  3408  02B9  1903               	btfsc	3,2
  3409  02BA  2AC0               	goto	l3234
  3410                           
  3411                           ;protocol.c: 165: PROTOCOL_EXT(buf);
  3412  02BB  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3413  02BC  3187  27FF  3182   	fcall	_PROTOCOL_EXT
  3414                           
  3415                           ;protocol.c: 166: } else if (!strncmp(("WHO"), (buf), 3)) {
  3416  02BF  2A49               	goto	l664
  3417  02C0                     l3234:	
  3418  02C0  3088               	movlw	low (STR_4| (0+32768))
  3419  02C1  0020               	movlb	0	; select bank0
  3420  02C2  00A0               	movwf	strncmp@s1
  3421  02C3  3084               	movlw	high (STR_4| (0+32768))
  3422  02C4  00A1               	movwf	strncmp@s1+1
  3423  02C5  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3424  02C6  00CE               	movwf	??_PROTOCOL_Loop
  3425  02C7  084E               	movf	??_PROTOCOL_Loop,w
  3426  02C8  00A2               	movwf	strncmp@s2
  3427  02C9  3003               	movlw	3
  3428  02CA  00A3               	movwf	strncmp@len
  3429  02CB  3000               	movlw	0
  3430  02CC  00A4               	movwf	strncmp@len+1
  3431  02CD  3187  2707  3182   	fcall	_strncmp
  3432  02D0  0020               	movlb	0	; select bank0
  3433  02D1  0820               	movf	?_strncmp,w
  3434  02D2  0421               	iorwf	?_strncmp+1,w
  3435  02D3  1D03               	btfss	3,2
  3436  02D4  2AE5               	goto	l3238
  3437                           
  3438                           ;protocol.c: 167: printf("$:WHO:%s\n", device_id_);
  3439  02D5  3019               	movlw	low (STR_5| (0+32768))
  3440  02D6  00AE               	movwf	printf@f
  3441  02D7  3084               	movlw	high (STR_5| (0+32768))
  3442  02D8  00AF               	movwf	printf@f+1
  3443  02D9  0021               	movlb	1	; select bank1
  3444  02DA  0861               	movf	(_device_id_+1)^(0+128),w
  3445  02DB  0020               	movlb	0	; select bank0
  3446  02DC  00B1               	movwf	(low ((?_printf| 0+2))+1)
  3447  02DD  0021               	movlb	1	; select bank1
  3448  02DE  0860               	movf	_device_id_^(0+128),w
  3449  02DF  0020               	movlb	0	; select bank0
  3450  02E0  00B0               	movwf	low ((?_printf| 0+2))
  3451  02E1  3180  2074  3182   	fcall	_printf
  3452                           
  3453                           ;protocol.c: 168: } else if (!strncmp(("SAV"), (buf), 3)) {
  3454  02E4  2A49               	goto	l664
  3455  02E5                     l3238:	
  3456  02E5  3098               	movlw	low (STR_6| (0+32768))
  3457  02E6  0020               	movlb	0	; select bank0
  3458  02E7  00A0               	movwf	strncmp@s1
  3459  02E8  3084               	movlw	high (STR_6| (0+32768))
  3460  02E9  00A1               	movwf	strncmp@s1+1
  3461  02EA  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3462  02EB  00CE               	movwf	??_PROTOCOL_Loop
  3463  02EC  084E               	movf	??_PROTOCOL_Loop,w
  3464  02ED  00A2               	movwf	strncmp@s2
  3465  02EE  3003               	movlw	3
  3466  02EF  00A3               	movwf	strncmp@len
  3467  02F0  3000               	movlw	0
  3468  02F1  00A4               	movwf	strncmp@len+1
  3469  02F2  3187  2707  3182   	fcall	_strncmp
  3470  02F5  0020               	movlb	0	; select bank0
  3471  02F6  0820               	movf	?_strncmp,w
  3472  02F7  0421               	iorwf	?_strncmp+1,w
  3473  02F8  1D03               	btfss	3,2
  3474  02F9  2AFE               	goto	l3242
  3475                           
  3476                           ;protocol.c: 169: PROTOCOL_SAV();
  3477  02FA  318D  25DF  3182   	fcall	_PROTOCOL_SAV
  3478                           
  3479                           ;protocol.c: 170: } else if (!strncmp(("STA"), (buf), 3)) {
  3480  02FD  2A49               	goto	l664
  3481  02FE                     l3242:	
  3482  02FE  3080               	movlw	low (STR_7| (0+32768))
  3483  02FF  0020               	movlb	0	; select bank0
  3484  0300  00A0               	movwf	strncmp@s1
  3485  0301  3084               	movlw	high (STR_7| (0+32768))
  3486  0302  00A1               	movwf	strncmp@s1+1
  3487  0303  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3488  0304  00CE               	movwf	??_PROTOCOL_Loop
  3489  0305  084E               	movf	??_PROTOCOL_Loop,w
  3490  0306  00A2               	movwf	strncmp@s2
  3491  0307  3003               	movlw	3
  3492  0308  00A3               	movwf	strncmp@len
  3493  0309  3000               	movlw	0
  3494  030A  00A4               	movwf	strncmp@len+1
  3495  030B  3187  2707  3182   	fcall	_strncmp
  3496  030E  0020               	movlb	0	; select bank0
  3497  030F  0820               	movf	?_strncmp,w
  3498  0310  0421               	iorwf	?_strncmp+1,w
  3499  0311  1D03               	btfss	3,2
  3500  0312  2B17               	goto	l3246
  3501                           
  3502                           ;protocol.c: 171: PROTOCOL_STA();
  3503  0313  318D  258A  3182   	fcall	_PROTOCOL_STA
  3504                           
  3505                           ;protocol.c: 172: } else if (!strncmp(("STP"), (buf), 3)) {
  3506  0316  2A49               	goto	l664
  3507  0317                     l3246:	
  3508  0317  308C               	movlw	low (STR_8| (0+32768))
  3509  0318  0020               	movlb	0	; select bank0
  3510  0319  00A0               	movwf	strncmp@s1
  3511  031A  3084               	movlw	high (STR_8| (0+32768))
  3512  031B  00A1               	movwf	strncmp@s1+1
  3513  031C  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3514  031D  00CE               	movwf	??_PROTOCOL_Loop
  3515  031E  084E               	movf	??_PROTOCOL_Loop,w
  3516  031F  00A2               	movwf	strncmp@s2
  3517  0320  3003               	movlw	3
  3518  0321  00A3               	movwf	strncmp@len
  3519  0322  3000               	movlw	0
  3520  0323  00A4               	movwf	strncmp@len+1
  3521  0324  3187  2707  3182   	fcall	_strncmp
  3522  0327  0020               	movlb	0	; select bank0
  3523  0328  0820               	movf	?_strncmp,w
  3524  0329  0421               	iorwf	?_strncmp+1,w
  3525  032A  1D03               	btfss	3,2
  3526  032B  2B3C               	goto	l3252
  3527                           
  3528                           ;protocol.c: 173: PROTOCOL_STP();
  3529  032C  318D  2578  3182   	fcall	_PROTOCOL_STP
  3530                           
  3531                           ;protocol.c: 174: printf("*:STP:%s\n", "ACK");
  3532  032F  3023               	movlw	low (STR_9| (0+32768))
  3533  0330  0020               	movlb	0	; select bank0
  3534  0331  00AE               	movwf	printf@f
  3535  0332  3084               	movlw	high (STR_9| (0+32768))
  3536  0333  00AF               	movwf	printf@f+1
  3537  0334  3084               	movlw	low (STR_10| (0+32768))
  3538  0335  00B0               	movwf	low ((?_printf| 0+2))
  3539  0336  3084               	movlw	high (STR_10| (0+32768))
  3540  0337  00B1               	movwf	(low ((?_printf| 0+2))+1)
  3541  0338  3180  2074  3182   	fcall	_printf
  3542                           
  3543                           ;protocol.c: 175: } else if (!strncmp(("SET"), (buf), 3)) {
  3544  033B  2A49               	goto	l664
  3545  033C                     l3252:	
  3546  033C  3094               	movlw	low (STR_11| (0+32768))
  3547  033D  0020               	movlb	0	; select bank0
  3548  033E  00A0               	movwf	strncmp@s1
  3549  033F  3084               	movlw	high (STR_11| (0+32768))
  3550  0340  00A1               	movwf	strncmp@s1+1
  3551  0341  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3552  0342  00CE               	movwf	??_PROTOCOL_Loop
  3553  0343  084E               	movf	??_PROTOCOL_Loop,w
  3554  0344  00A2               	movwf	strncmp@s2
  3555  0345  3003               	movlw	3
  3556  0346  00A3               	movwf	strncmp@len
  3557  0347  3000               	movlw	0
  3558  0348  00A4               	movwf	strncmp@len+1
  3559  0349  3187  2707  3182   	fcall	_strncmp
  3560  034C  0020               	movlb	0	; select bank0
  3561  034D  0820               	movf	?_strncmp,w
  3562  034E  0421               	iorwf	?_strncmp+1,w
  3563  034F  1D03               	btfss	3,2
  3564  0350  2B5B               	goto	l3256
  3565                           
  3566                           ;protocol.c: 176: PROTOCOL_SET(atoi(&buf[4]));
  3567  0351  3024               	movlw	(low ((_buf| (0+256)+4)))& (0+255)
  3568  0352  3186  2607  3182   	fcall	_atoi
  3569  0355  0020               	movlb	0	; select bank0
  3570  0356  0826               	movf	?_atoi,w
  3571  0357  318D  25B8  3182   	fcall	_PROTOCOL_SET
  3572                           
  3573                           ;protocol.c: 177: } else if (!strncmp(("GET"), (buf), 3)) {
  3574  035A  2A49               	goto	l664
  3575  035B                     l3256:	
  3576  035B  3090               	movlw	low (STR_12| (0+32768))
  3577  035C  0020               	movlb	0	; select bank0
  3578  035D  00A0               	movwf	strncmp@s1
  3579  035E  3084               	movlw	high (STR_12| (0+32768))
  3580  035F  00A1               	movwf	strncmp@s1+1
  3581  0360  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3582  0361  00CE               	movwf	??_PROTOCOL_Loop
  3583  0362  084E               	movf	??_PROTOCOL_Loop,w
  3584  0363  00A2               	movwf	strncmp@s2
  3585  0364  3003               	movlw	3
  3586  0365  00A3               	movwf	strncmp@len
  3587  0366  3000               	movlw	0
  3588  0367  00A4               	movwf	strncmp@len+1
  3589  0368  3187  2707  3182   	fcall	_strncmp
  3590  036B  0020               	movlb	0	; select bank0
  3591  036C  0820               	movf	?_strncmp,w
  3592  036D  0421               	iorwf	?_strncmp+1,w
  3593  036E  1D03               	btfss	3,2
  3594  036F  2B7F               	goto	l3260
  3595                           
  3596                           ;protocol.c: 178: printf("$:GET:%d\n", value);
  3597  0370  3005               	movlw	low (STR_13| (0+32768))
  3598  0371  00AE               	movwf	printf@f
  3599  0372  3084               	movlw	high (STR_13| (0+32768))
  3600  0373  00AF               	movwf	printf@f+1
  3601  0374  085C               	movf	_value,w
  3602  0375  00CE               	movwf	??_PROTOCOL_Loop
  3603  0376  01CF               	clrf	??_PROTOCOL_Loop+1
  3604  0377  084E               	movf	??_PROTOCOL_Loop,w
  3605  0378  00B0               	movwf	?_printf+2
  3606  0379  084F               	movf	??_PROTOCOL_Loop+1,w
  3607  037A  00B1               	movwf	?_printf+3
  3608  037B  3180  2074  3182   	fcall	_printf
  3609                           
  3610                           ;protocol.c: 179: } else if (!strncmp(("WDA"), (buf), 3)) {
  3611  037E  2A49               	goto	l664
  3612  037F                     l3260:	
  3613  037F  307C               	movlw	low (STR_14| (0+32768))
  3614  0380  0020               	movlb	0	; select bank0
  3615  0381  00A0               	movwf	strncmp@s1
  3616  0382  3084               	movlw	high (STR_14| (0+32768))
  3617  0383  00A1               	movwf	strncmp@s1+1
  3618  0384  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3619  0385  00CE               	movwf	??_PROTOCOL_Loop
  3620  0386  084E               	movf	??_PROTOCOL_Loop,w
  3621  0387  00A2               	movwf	strncmp@s2
  3622  0388  3003               	movlw	3
  3623  0389  00A3               	movwf	strncmp@len
  3624  038A  3000               	movlw	0
  3625  038B  00A4               	movwf	strncmp@len+1
  3626  038C  3187  2707  3182   	fcall	_strncmp
  3627  038F  0020               	movlb	0	; select bank0
  3628  0390  0820               	movf	?_strncmp,w
  3629  0391  0421               	iorwf	?_strncmp+1,w
  3630  0392  1D03               	btfss	3,2
  3631  0393  2BA2               	goto	l3266
  3632                           
  3633                           ;protocol.c: 180: device_address = atoi(&buf[4]);
  3634  0394  3024               	movlw	(low ((_buf| (0+256)+4)))& (0+255)
  3635  0395  3186  2607  3182   	fcall	_atoi
  3636  0398  0020               	movlb	0	; select bank0
  3637  0399  0826               	movf	?_atoi,w
  3638  039A  00CE               	movwf	??_PROTOCOL_Loop
  3639  039B  084E               	movf	??_PROTOCOL_Loop,w
  3640  039C  00D1               	movwf	PROTOCOL_Loop@device_address
  3641                           
  3642                           ;protocol.c: 181: PROTOCOL_Write_Device_Address(device_address);
  3643  039D  0851               	movf	PROTOCOL_Loop@device_address,w
  3644  039E  318E  2637  3182   	fcall	_PROTOCOL_Write_Device_Address
  3645                           
  3646                           ;protocol.c: 182: } else if (!strncmp(("RDA"), (buf), 3)) {
  3647  03A1  2A49               	goto	l664
  3648  03A2                     l3266:	
  3649  03A2  3078               	movlw	low (STR_15| (0+32768))
  3650  03A3  0020               	movlb	0	; select bank0
  3651  03A4  00A0               	movwf	strncmp@s1
  3652  03A5  3084               	movlw	high (STR_15| (0+32768))
  3653  03A6  00A1               	movwf	strncmp@s1+1
  3654  03A7  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3655  03A8  00CE               	movwf	??_PROTOCOL_Loop
  3656  03A9  084E               	movf	??_PROTOCOL_Loop,w
  3657  03AA  00A2               	movwf	strncmp@s2
  3658  03AB  3003               	movlw	3
  3659  03AC  00A3               	movwf	strncmp@len
  3660  03AD  3000               	movlw	0
  3661  03AE  00A4               	movwf	strncmp@len+1
  3662  03AF  3187  2707  3182   	fcall	_strncmp
  3663  03B2  0020               	movlb	0	; select bank0
  3664  03B3  0820               	movf	?_strncmp,w
  3665  03B4  0421               	iorwf	?_strncmp+1,w
  3666  03B5  1D03               	btfss	3,2
  3667  03B6  2BCD               	goto	l3272
  3668                           
  3669                           ;protocol.c: 183: device_address = PROTOCOL_Read_Device_Address();
  3670  03B7  318D  2575  3182   	fcall	_PROTOCOL_Read_Device_Address
  3671  03BA  0020               	movlb	0	; select bank0
  3672  03BB  00CE               	movwf	??_PROTOCOL_Loop
  3673  03BC  084E               	movf	??_PROTOCOL_Loop,w
  3674  03BD  00D1               	movwf	PROTOCOL_Loop@device_address
  3675                           
  3676                           ;protocol.c: 184: printf("$:RDA:%d\n", device_address);
  3677  03BE  30FB               	movlw	low (STR_16| (0+32768))
  3678  03BF  00AE               	movwf	printf@f
  3679  03C0  3083               	movlw	high (STR_16| (0+32768))
  3680  03C1  00AF               	movwf	printf@f+1
  3681  03C2  0851               	movf	PROTOCOL_Loop@device_address,w
  3682  03C3  00CE               	movwf	??_PROTOCOL_Loop
  3683  03C4  01CF               	clrf	??_PROTOCOL_Loop+1
  3684  03C5  084E               	movf	??_PROTOCOL_Loop,w
  3685  03C6  00B0               	movwf	?_printf+2
  3686  03C7  084F               	movf	??_PROTOCOL_Loop+1,w
  3687  03C8  00B1               	movwf	?_printf+3
  3688  03C9  3180  2074  3182   	fcall	_printf
  3689                           
  3690                           ;protocol.c: 185: } else {
  3691  03CC  2A49               	goto	l664
  3692  03CD                     l3272:	
  3693                           
  3694                           ;protocol.c: 186: PROTOCOL_EXT(buf);
  3695  03CD  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3696  03CE  3187  27FF  3182   	fcall	_PROTOCOL_EXT
  3697  03D1  2A49               	goto	l664
  3698  03D2                     __end_of_PROTOCOL_Loop:	
  3699                           
  3700                           	psect	text5
  3701  0707                     __ptext5:	
  3702 ;; *************** function _strncmp *****************
  3703 ;; Defined at:
  3704 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strncmp.c"
  3705 ;; Parameters:    Size  Location     Type
  3706 ;;  s1              2    0[BANK0 ] PTR const unsigned char 
  3707 ;;		 -> STR_15(4), STR_14(4), STR_12(4), STR_11(4), 
  3708 ;;		 -> STR_8(4), STR_7(4), STR_6(4), STR_4(4), 
  3709 ;;  s2              1    2[BANK0 ] PTR const unsigned char 
  3710 ;;		 -> buf(48), 
  3711 ;;  len             2    3[BANK0 ] unsigned int 
  3712 ;; Auto vars:     Size  Location     Type
  3713 ;;		None
  3714 ;; Return value:  Size  Location     Type
  3715 ;;                  2    0[BANK0 ] int 
  3716 ;; Registers used:
  3717 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  3718 ;; Tracked objects:
  3719 ;;		On entry : 0/0
  3720 ;;		On exit  : 0/0
  3721 ;;		Unchanged: 0/0
  3722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3723 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3725 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3726 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3727 ;;Total ram usage:        7 bytes
  3728 ;; Hardware stack levels used:    1
  3729 ;; Hardware stack levels required when called:    5
  3730 ;; This function calls:
  3731 ;;		Nothing
  3732 ;; This function is called by:
  3733 ;;		_PROTOCOL_Loop
  3734 ;; This function uses a non-reentrant model
  3735 ;;
  3736                           
  3737                           
  3738                           ;psect for function _strncmp
  3739  0707                     _strncmp:	
  3740  0707                     l3002:	
  3741                           ;incstack = 0
  3742                           ; Regs used in _strncmp: [wreg-fsr1h+status,2+status,0+pclath]
  3743                           
  3744  0707  3001               	movlw	1
  3745  0708  0020               	movlb	0	; select bank0
  3746  0709  02A3               	subwf	strncmp@len,f
  3747  070A  3000               	movlw	0
  3748  070B  3BA4               	subwfb	strncmp@len+1,f
  3749  070C  0A23               	incf	strncmp@len,w
  3750  070D  1903               	btfsc	3,2
  3751  070E  0A24               	incf	strncmp@len+1,w
  3752  070F  1903               	btfsc	3,2
  3753  0710  2F46               	goto	l3004
  3754  0711  0020               	movlb	0	; select bank0
  3755  0712  0820               	movf	strncmp@s1,w
  3756  0713  0084               	movwf	4
  3757  0714  0821               	movf	strncmp@s1+1,w
  3758  0715  0085               	movwf	5
  3759  0716  0012               	moviw fsr0++
  3760  0717  1903               	btfsc	3,2
  3761  0718  2F25               	goto	l2994
  3762  0719  0822               	movf	strncmp@s2,w
  3763  071A  0086               	movwf	6
  3764  071B  3001               	movlw	1	; select bank2/3
  3765  071C  0087               	movwf	7
  3766  071D  0820               	movf	strncmp@s1,w
  3767  071E  0084               	movwf	4
  3768  071F  0821               	movf	strncmp@s1+1,w
  3769  0720  0085               	movwf	5
  3770  0721  0800               	movf	0,w	;code access
  3771  0722  0601               	xorwf	1,w
  3772  0723  1903               	skipnz
  3773  0724  2F3D               	goto	l2998
  3774  0725                     l2994:	
  3775  0725  0822               	movf	strncmp@s2,w
  3776  0726  0086               	movwf	6
  3777  0727  3001               	movlw	1	; select bank2/3
  3778  0728  0087               	movwf	7
  3779  0729  0801               	movf	1,w
  3780  072A  00A5               	movwf	??_strncmp
  3781  072B  01A6               	clrf	??_strncmp+1
  3782  072C  09A5               	comf	??_strncmp,f
  3783  072D  09A6               	comf	??_strncmp+1,f
  3784  072E  0AA5               	incf	??_strncmp,f
  3785  072F  1903               	skipnz
  3786  0730  0AA6               	incf	??_strncmp+1,f
  3787  0731  0820               	movf	strncmp@s1,w
  3788  0732  0084               	movwf	4
  3789  0733  0821               	movf	strncmp@s1+1,w
  3790  0734  0085               	movwf	5
  3791  0735  0800               	movf	0,w	;code access
  3792  0736  0725               	addwf	??_strncmp,w
  3793  0737  00A0               	movwf	?_strncmp
  3794  0738  0826               	movf	??_strncmp+1,w
  3795  0739  1803               	skipnc
  3796  073A  0A26               	incf	??_strncmp+1,w
  3797  073B  00A1               	movwf	?_strncmp+1
  3798  073C  0008               	return
  3799  073D                     l2998:	
  3800  073D  3001               	movlw	1
  3801  073E  07A0               	addwf	strncmp@s1,f
  3802  073F  3000               	movlw	0
  3803  0740  3DA1               	addwfc	strncmp@s1+1,f
  3804  0741  3001               	movlw	1
  3805  0742  00A5               	movwf	??_strncmp
  3806  0743  0825               	movf	??_strncmp,w
  3807  0744  07A2               	addwf	strncmp@s2,f
  3808  0745  2F07               	goto	l3002
  3809  0746                     l3004:	
  3810  0746  01A0               	clrf	?_strncmp
  3811  0747  01A1               	clrf	?_strncmp+1
  3812  0748  0008               	return
  3813  0749                     __end_of_strncmp:	
  3814                           
  3815                           	psect	text6
  3816  0E04                     __ptext6:	
  3817 ;; *************** function _set_handler *****************
  3818 ;; Defined at:
  3819 ;;		line 45 in file "main.c"
  3820 ;; Parameters:    Size  Location     Type
  3821 ;;  value           1    0[BANK0 ] unsigned char 
  3822 ;; Auto vars:     Size  Location     Type
  3823 ;;		None
  3824 ;; Return value:  Size  Location     Type
  3825 ;;                  1    wreg      void 
  3826 ;; Registers used:
  3827 ;;		wreg
  3828 ;; Tracked objects:
  3829 ;;		On entry : 0/0
  3830 ;;		On exit  : 0/0
  3831 ;;		Unchanged: 0/0
  3832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3833 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3834 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3835 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3836 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3837 ;;Total ram usage:        2 bytes
  3838 ;; Hardware stack levels used:    1
  3839 ;; Hardware stack levels required when called:    5
  3840 ;; This function calls:
  3841 ;;		Nothing
  3842 ;; This function is called by:
  3843 ;;		_main
  3844 ;;		_PROTOCOL_Loop
  3845 ;; This function uses a non-reentrant model
  3846 ;;
  3847                           
  3848                           
  3849                           ;psect for function _set_handler
  3850  0E04                     _set_handler:	
  3851                           
  3852                           ;main.c: 46: if (value <= 6) ain = value;
  3853                           
  3854                           ;incstack = 0
  3855                           ; Regs used in _set_handler: [wreg]
  3856  0E04  3007               	movlw	7
  3857  0E05  0020               	movlb	0	; select bank0
  3858  0E06  0220               	subwf	set_handler@value,w
  3859  0E07  1803               	skipnc
  3860  0E08  0008               	return
  3861  0E09  0820               	movf	set_handler@value,w
  3862  0E0A  00A1               	movwf	??_set_handler
  3863  0E0B  0821               	movf	??_set_handler,w
  3864  0E0C  00ED               	movwf	_ain
  3865  0E0D  0008               	return
  3866  0E0E                     __end_of_set_handler:	
  3867                           
  3868                           	psect	text7
  3869  0560                     __ptext7:	
  3870 ;; *************** function _loop_func *****************
  3871 ;; Defined at:
  3872 ;;		line 49 in file "main.c"
  3873 ;; Parameters:    Size  Location     Type
  3874 ;;		None
  3875 ;; Auto vars:     Size  Location     Type
  3876 ;;  v               2   43[BANK0 ] unsigned int 
  3877 ;;  out             2   40[BANK0 ] unsigned int 
  3878 ;;  i               1   45[BANK0 ] unsigned char 
  3879 ;;  transition_d    1   42[BANK0 ] unsigned char 
  3880 ;; Return value:  Size  Location     Type
  3881 ;;                  1    wreg      void 
  3882 ;; Registers used:
  3883 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3884 ;; Tracked objects:
  3885 ;;		On entry : 0/0
  3886 ;;		On exit  : 0/0
  3887 ;;		Unchanged: 0/0
  3888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3890 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3891 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3892 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3893 ;;Total ram usage:        7 bytes
  3894 ;; Hardware stack levels used:    1
  3895 ;; Hardware stack levels required when called:    9
  3896 ;; This function calls:
  3897 ;;		_ADC_GetConversionResult
  3898 ;;		_ADC_IsConversionDone
  3899 ;;		_ADC_SelectChannel
  3900 ;;		_ADC_StartConversion
  3901 ;;		_PROTOCOL_I2C_Send_uint8_t
  3902 ;;		_abs
  3903 ;;		_led_blink
  3904 ;; This function is called by:
  3905 ;;		_main
  3906 ;;		_PROTOCOL_Loop
  3907 ;; This function uses a non-reentrant model
  3908 ;;
  3909                           
  3910                           
  3911                           ;psect for function _loop_func
  3912  0560                     _loop_func:	
  3913                           
  3914                           ;main.c: 50: uint8_t i;
  3915                           ;main.c: 51: bool transition_detected = 0;
  3916                           
  3917                           ;incstack = 0
  3918                           ; Regs used in _loop_func: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3919  0560  0020               	movlb	0	; select bank0
  3920  0561  01CA               	clrf	loop_func@transition_detected
  3921                           
  3922                           ;main.c: 52: for (i=0; i < ain; i++) {
  3923  0562  01CD               	clrf	loop_func@i
  3924  0563                     l2976:	
  3925  0563  086D               	movf	_ain,w
  3926  0564  024D               	subwf	loop_func@i,w
  3927  0565  1803               	btfsc	3,0
  3928  0566  2DF7               	goto	l2978
  3929                           
  3930                           ;main.c: 53: ADC_SelectChannel(analog_in[i]);
  3931  0567  084D               	movf	loop_func@i,w
  3932  0568  3EE8               	addlw	(low (_analog_in| 0))& (0+255)
  3933  0569  0086               	movwf	6
  3934  056A  0187               	clrf	7
  3935  056B  0801               	movf	1,w
  3936  056C  3187  27EE  3185   	fcall	_ADC_SelectChannel
  3937                           
  3938                           ;main.c: 54: ADC_StartConversion();
  3939  056F  318D  257B  3185   	fcall	_ADC_StartConversion
  3940  0572                     l2940:	
  3941                           ;main.c: 55: while(!ADC_IsConversionDone());
  3942                           
  3943  0572  318D  25BF  3185   	fcall	_ADC_IsConversionDone
  3944  0575  3A00               	xorlw	0
  3945  0576  1903               	skipnz
  3946  0577  2D72               	goto	l2940
  3947                           
  3948                           ;main.c: 56: adc_result_t out = ADC_GetConversionResult();
  3949  0578  318D  25E8  3185   	fcall	_ADC_GetConversionResult
  3950  057B  0020               	movlb	0	; select bank0
  3951  057C  0821               	movf	?_ADC_GetConversionResult+1,w
  3952  057D  00C9               	movwf	loop_func@out+1
  3953  057E  0820               	movf	?_ADC_GetConversionResult,w
  3954  057F  00C8               	movwf	loop_func@out
  3955                           
  3956                           ;main.c: 57: uint16_t v = abs(out - 511);
  3957  0580  0848               	movf	loop_func@out,w
  3958  0581  3E01               	addlw	1
  3959  0582  00A0               	movwf	abs@a
  3960  0583  30FE               	movlw	254
  3961  0584  3D49               	addwfc	loop_func@out+1,w
  3962  0585  00A1               	movwf	abs@a+1
  3963  0586  318E  2655  3185   	fcall	_abs
  3964  0589  0020               	movlb	0	; select bank0
  3965  058A  0821               	movf	?_abs+1,w
  3966  058B  00CC               	movwf	loop_func@v+1
  3967  058C  0820               	movf	?_abs,w
  3968  058D  00CB               	movwf	loop_func@v
  3969                           
  3970                           ;main.c: 72: switch (position[i]) {
  3971  058E  2DE6               	goto	l2972
  3972  058F                     l2946:	
  3973                           ;main.c: 73: case 0:
  3974                           
  3975                           
  3976                           ;main.c: 74: if (v >= 50) count[i]++;
  3977  058F  3000               	movlw	0
  3978  0590  024C               	subwf	loop_func@v+1,w
  3979  0591  3032               	movlw	50
  3980  0592  1903               	skipnz
  3981  0593  024B               	subwf	loop_func@v,w
  3982  0594  1C03               	skipc
  3983  0595  2D9F               	goto	l2950
  3984  0596  3001               	movlw	1
  3985  0597  00C7               	movwf	??_loop_func
  3986  0598  084D               	movf	loop_func@i,w
  3987  0599  3EB0               	addlw	(low (_count| 0))& (0+255)
  3988  059A  0086               	movwf	6
  3989  059B  0187               	clrf	7
  3990  059C  0847               	movf	??_loop_func,w
  3991  059D  0781               	addwf	1,f
  3992  059E  2DA4               	goto	l453
  3993  059F                     l2950:	
  3994                           
  3995                           ;main.c: 75: else count[i] = 0;
  3996  059F  084D               	movf	loop_func@i,w
  3997  05A0  3EB0               	addlw	(low (_count| 0))& (0+255)
  3998  05A1  0086               	movwf	6
  3999  05A2  0187               	clrf	7
  4000  05A3  0181               	clrf	1
  4001  05A4                     l453:	
  4002                           
  4003                           ;main.c: 77: if (count[i] >= 3) {
  4004  05A4  084D               	movf	loop_func@i,w
  4005  05A5  3EB0               	addlw	(low (_count| 0))& (0+255)
  4006  05A6  0086               	movwf	6
  4007  05A7  0187               	clrf	7
  4008  05A8  3003               	movlw	3
  4009  05A9  0201               	subwf	1,w
  4010  05AA  1C03               	skipc
  4011  05AB  2DF2               	goto	l2974
  4012                           
  4013                           ;main.c: 78: count[i] = 0;
  4014  05AC  084D               	movf	loop_func@i,w
  4015  05AD  3EB0               	addlw	(low (_count| 0))& (0+255)
  4016  05AE  0086               	movwf	6
  4017  05AF  0187               	clrf	7
  4018  05B0  0181               	clrf	1
  4019                           
  4020                           ;main.c: 79: position[i] = 1;
  4021  05B1  084D               	movf	loop_func@i,w
  4022  05B2  3ED1               	addlw	(low (_position| 0))& (0+255)
  4023  05B3  0086               	movwf	6
  4024  05B4  0187               	clrf	7
  4025  05B5  0181               	clrf	1
  4026  05B6  0A81               	incf	1,f
  4027  05B7  2DDF               	goto	L1
  4028  05B8                     l2958:	
  4029                           ;main.c: 85: case 1:
  4030                           
  4031                           ;main.c: 82: }
  4032                           ;main.c: 83: break;
  4033                           
  4034                           ;main.c: 81: transition_detected = 1;
  4035                           
  4036                           ;main.c: 80: led_blink();
  4037                           
  4038                           
  4039                           ;main.c: 86: if (v < 50) count[i]++;
  4040  05B8  3000               	movlw	0
  4041  05B9  024C               	subwf	loop_func@v+1,w
  4042  05BA  3032               	movlw	50
  4043  05BB  1903               	skipnz
  4044  05BC  024B               	subwf	loop_func@v,w
  4045  05BD  1803               	skipnc
  4046  05BE  2DC8               	goto	l2962
  4047  05BF  3001               	movlw	1
  4048  05C0  00C7               	movwf	??_loop_func
  4049  05C1  084D               	movf	loop_func@i,w
  4050  05C2  3EB0               	addlw	(low (_count| 0))& (0+255)
  4051  05C3  0086               	movwf	6
  4052  05C4  0187               	clrf	7
  4053  05C5  0847               	movf	??_loop_func,w
  4054  05C6  0781               	addwf	1,f
  4055  05C7  2DCD               	goto	l458
  4056  05C8                     l2962:	
  4057                           
  4058                           ;main.c: 87: else count[i] = 0;
  4059  05C8  084D               	movf	loop_func@i,w
  4060  05C9  3EB0               	addlw	(low (_count| 0))& (0+255)
  4061  05CA  0086               	movwf	6
  4062  05CB  0187               	clrf	7
  4063  05CC  0181               	clrf	1
  4064  05CD                     l458:	
  4065                           
  4066                           ;main.c: 89: if (count[i] >= 3) {
  4067  05CD  084D               	movf	loop_func@i,w
  4068  05CE  3EB0               	addlw	(low (_count| 0))& (0+255)
  4069  05CF  0086               	movwf	6
  4070  05D0  0187               	clrf	7
  4071  05D1  3003               	movlw	3
  4072  05D2  0201               	subwf	1,w
  4073  05D3  1C03               	skipc
  4074  05D4  2DF2               	goto	l2974
  4075                           
  4076                           ;main.c: 90: count[i] = 0;
  4077  05D5  084D               	movf	loop_func@i,w
  4078  05D6  3EB0               	addlw	(low (_count| 0))& (0+255)
  4079  05D7  0086               	movwf	6
  4080  05D8  0187               	clrf	7
  4081  05D9  0181               	clrf	1
  4082                           
  4083                           ;main.c: 91: position[i] = 0;
  4084  05DA  084D               	movf	loop_func@i,w
  4085  05DB  3ED1               	addlw	(low (_position| 0))& (0+255)
  4086  05DC  0086               	movwf	6
  4087  05DD  0187               	clrf	7
  4088  05DE  0181               	clrf	1
  4089  05DF                     L1:	
  4090                           
  4091                           ;main.c: 92: led_blink();
  4092  05DF  318E  261B  3185   	fcall	_led_blink
  4093                           
  4094                           ;main.c: 93: transition_detected = 1;
  4095  05E2  0020               	movlb	0	; select bank0
  4096  05E3  01CA               	clrf	loop_func@transition_detected
  4097  05E4  0ACA               	incf	loop_func@transition_detected,f
  4098                           
  4099                           ;main.c: 96: }
  4100                           
  4101                           ;main.c: 94: }
  4102                           ;main.c: 95: break;
  4103  05E5  2DF2               	goto	l2974
  4104  05E6                     l2972:	
  4105  05E6  084D               	movf	loop_func@i,w
  4106  05E7  3ED1               	addlw	(low (_position| 0))& (0+255)
  4107  05E8  0086               	movwf	6
  4108  05E9  0187               	clrf	7
  4109  05EA  0801               	movf	1,w
  4110                           
  4111                           ; Switch size 1, requested type "space"
  4112                           ; Number of cases is 2, Range of values is 0 to 1
  4113                           ; switch strategies available:
  4114                           ; Name         Instructions Cycles
  4115                           ; simple_byte            7     4 (average)
  4116                           ; direct_byte           10     6 (fixed)
  4117                           ; jumptable            260     6 (fixed)
  4118                           ;	Chosen strategy is simple_byte
  4119  05EB  3A00               	xorlw	0	; case 0
  4120  05EC  1903               	skipnz
  4121  05ED  2D8F               	goto	l2946
  4122  05EE  3A01               	xorlw	1	; case 1
  4123  05EF  1903               	skipnz
  4124  05F0  2DB8               	goto	l2958
  4125  05F1  2DF2               	goto	l2974
  4126  05F2                     l2974:	
  4127  05F2  3001               	movlw	1
  4128  05F3  00C7               	movwf	??_loop_func
  4129  05F4  0847               	movf	??_loop_func,w
  4130  05F5  07CD               	addwf	loop_func@i,f
  4131  05F6  2D63               	goto	l2976
  4132  05F7                     l2978:	
  4133                           
  4134                           ;main.c: 97: }
  4135                           ;main.c: 98: if (transition_detected) PROTOCOL_I2C_Send_uint8_t(6, position);
  4136  05F7  084A               	movf	loop_func@transition_detected,w
  4137  05F8  1903               	btfsc	3,2
  4138  05F9  2E02               	goto	l2982
  4139  05FA  30D1               	movlw	(low (_position| 0))& (0+255)
  4140  05FB  00C7               	movwf	??_loop_func
  4141  05FC  0847               	movf	??_loop_func,w
  4142  05FD  00C2               	movwf	PROTOCOL_I2C_Send_uint8_t@pbuffer
  4143  05FE  3006               	movlw	6
  4144  05FF  3186  26C0  3185   	fcall	_PROTOCOL_I2C_Send_uint8_t
  4145  0602                     l2982:	
  4146                           
  4147                           ;main.c: 99: _delay((unsigned long)((50)*(4000000/4000000.0)));
  4148  0602  3010               	movlw	16
  4149  0603                     u2387:	
  4150  0603  0B89               	decfsz	9,f
  4151  0604  2E03               	goto	u2387
  4152  0605  3200               	nop2
  4153  0606  0008               	return
  4154  0607                     __end_of_loop_func:	
  4155                           
  4156                           	psect	text8
  4157  0E1B                     __ptext8:	
  4158 ;; *************** function _led_blink *****************
  4159 ;; Defined at:
  4160 ;;		line 39 in file "main.c"
  4161 ;; Parameters:    Size  Location     Type
  4162 ;;		None
  4163 ;; Auto vars:     Size  Location     Type
  4164 ;;		None
  4165 ;; Return value:  Size  Location     Type
  4166 ;;                  1    wreg      void 
  4167 ;; Registers used:
  4168 ;;		wreg
  4169 ;; Tracked objects:
  4170 ;;		On entry : 0/0
  4171 ;;		On exit  : 0/0
  4172 ;;		Unchanged: 0/0
  4173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4175 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4176 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4177 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4178 ;;Total ram usage:        1 bytes
  4179 ;; Hardware stack levels used:    1
  4180 ;; Hardware stack levels required when called:    5
  4181 ;; This function calls:
  4182 ;;		Nothing
  4183 ;; This function is called by:
  4184 ;;		_loop_func
  4185 ;; This function uses a non-reentrant model
  4186 ;;
  4187                           
  4188                           
  4189                           ;psect for function _led_blink
  4190  0E1B                     _led_blink:	
  4191                           
  4192                           ;main.c: 40: LATCbits.LATC7 = 0;
  4193                           
  4194                           ;incstack = 0
  4195                           ; Regs used in _led_blink: [wreg]
  4196  0E1B  0022               	movlb	2	; select bank2
  4197  0E1C  138E               	bcf	14,7	;volatile
  4198                           
  4199                           ;main.c: 41: _delay((unsigned long)((3)*(4000000/4000.0)));
  4200  0E1D  3004               	movlw	4
  4201  0E1E  0020               	movlb	0	; select bank0
  4202  0E1F  00A0               	movwf	??_led_blink
  4203  0E20  30E4               	movlw	228
  4204  0E21                     u2397:	
  4205  0E21  0B89               	decfsz	9,f
  4206  0E22  2E21               	goto	u2397
  4207  0E23  0BA0               	decfsz	??_led_blink,f
  4208  0E24  2E21               	goto	u2397
  4209  0E25  0000               	nop
  4210                           
  4211                           ;main.c: 42: LATCbits.LATC7 = 1;
  4212  0E26  0022               	movlb	2	; select bank2
  4213  0E27  178E               	bsf	14,7	;volatile
  4214  0E28  0008               	return
  4215  0E29                     __end_of_led_blink:	
  4216                           
  4217                           	psect	text9
  4218  0E55                     __ptext9:	
  4219 ;; *************** function _abs *****************
  4220 ;; Defined at:
  4221 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\abs.c"
  4222 ;; Parameters:    Size  Location     Type
  4223 ;;  a               2    0[BANK0 ] int 
  4224 ;; Auto vars:     Size  Location     Type
  4225 ;;		None
  4226 ;; Return value:  Size  Location     Type
  4227 ;;                  2    0[BANK0 ] int 
  4228 ;; Registers used:
  4229 ;;		wreg, status,2, status,0
  4230 ;; Tracked objects:
  4231 ;;		On entry : 0/0
  4232 ;;		On exit  : 0/0
  4233 ;;		Unchanged: 0/0
  4234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4235 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4236 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4237 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4238 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4239 ;;Total ram usage:        4 bytes
  4240 ;; Hardware stack levels used:    1
  4241 ;; Hardware stack levels required when called:    5
  4242 ;; This function calls:
  4243 ;;		Nothing
  4244 ;; This function is called by:
  4245 ;;		_loop_func
  4246 ;; This function uses a non-reentrant model
  4247 ;;
  4248                           
  4249                           
  4250                           ;psect for function _abs
  4251  0E55                     _abs:	
  4252                           
  4253                           ;incstack = 0
  4254                           ; Regs used in _abs: [wreg+status,2+status,0]
  4255  0E55  0020               	movlb	0	; select bank0
  4256  0E56  1FA1               	btfss	abs@a+1,7
  4257  0E57  0008               	return
  4258  0E58  0920               	comf	abs@a,w
  4259  0E59  00A2               	movwf	??_abs
  4260  0E5A  0921               	comf	abs@a+1,w
  4261  0E5B  00A3               	movwf	??_abs+1
  4262  0E5C  0AA2               	incf	??_abs,f
  4263  0E5D  1903               	skipnz
  4264  0E5E  0AA3               	incf	??_abs+1,f
  4265  0E5F  0822               	movf	??_abs,w
  4266  0E60  00A0               	movwf	?_abs
  4267  0E61  0823               	movf	??_abs+1,w
  4268  0E62  00A1               	movwf	?_abs+1
  4269  0E63  0008               	return
  4270  0E64                     __end_of_abs:	
  4271                           
  4272                           	psect	text10
  4273  06C0                     __ptext10:	
  4274 ;; *************** function _PROTOCOL_I2C_Send_uint8_t *****************
  4275 ;; Defined at:
  4276 ;;		line 292 in file "protocol.c"
  4277 ;; Parameters:    Size  Location     Type
  4278 ;;  length          1    wreg     unsigned char 
  4279 ;;  pbuffer         1   34[BANK0 ] PTR unsigned char 
  4280 ;;		 -> PROTOCOL_Send_uint8_t@pbuf(1), position(6), 
  4281 ;; Auto vars:     Size  Location     Type
  4282 ;;  length          1   38[BANK0 ] unsigned char 
  4283 ;; Return value:  Size  Location     Type
  4284 ;;                  1    wreg      void 
  4285 ;; Registers used:
  4286 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4287 ;; Tracked objects:
  4288 ;;		On entry : 0/0
  4289 ;;		On exit  : 0/0
  4290 ;;		Unchanged: 0/0
  4291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4292 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4293 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4294 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4295 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4296 ;;Total ram usage:        5 bytes
  4297 ;; Hardware stack levels used:    1
  4298 ;; Hardware stack levels required when called:    8
  4299 ;; This function calls:
  4300 ;;		_PROTOCOL_I2C_Set_TLV
  4301 ;;		_printf
  4302 ;; This function is called by:
  4303 ;;		_loop_func
  4304 ;; This function uses a non-reentrant model
  4305 ;;
  4306                           
  4307                           
  4308                           ;psect for function _PROTOCOL_I2C_Send_uint8_t
  4309  06C0                     _PROTOCOL_I2C_Send_uint8_t:	
  4310                           
  4311                           ;incstack = 0
  4312                           ; Regs used in _PROTOCOL_I2C_Send_uint8_t: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4313                           ;PROTOCOL_I2C_Send_uint8_t@length stored from wreg
  4314  06C0  0020               	movlb	0	; select bank0
  4315  06C1  00C6               	movwf	PROTOCOL_I2C_Send_uint8_t@length
  4316                           
  4317                           ;protocol.c: 293: if (backplane_slave_enabled) {
  4318  06C2  0855               	movf	_backplane_slave_enabled,w
  4319  06C3  1903               	btfsc	3,2
  4320  06C4  2ED1               	goto	l2762
  4321                           
  4322                           ;protocol.c: 294: PROTOCOL_I2C_Set_TLV(0x01, length, &pbuffer[0]);
  4323  06C5  0846               	movf	PROTOCOL_I2C_Send_uint8_t@length,w
  4324  06C6  00C3               	movwf	??_PROTOCOL_I2C_Send_uint8_t
  4325  06C7  0843               	movf	??_PROTOCOL_I2C_Send_uint8_t,w
  4326  06C8  00A0               	movwf	PROTOCOL_I2C_Set_TLV@length
  4327  06C9  0842               	movf	PROTOCOL_I2C_Send_uint8_t@pbuffer,w
  4328  06CA  00C4               	movwf	??_PROTOCOL_I2C_Send_uint8_t+1
  4329  06CB  0844               	movf	??_PROTOCOL_I2C_Send_uint8_t+1,w
  4330  06CC  00A1               	movwf	PROTOCOL_I2C_Set_TLV@pbuffer
  4331  06CD  3001               	movlw	1
  4332  06CE  318E  2664         	fcall	_PROTOCOL_I2C_Set_TLV
  4333                           
  4334                           ;protocol.c: 295: } else {
  4335  06D0  0008               	return
  4336  06D1                     l2762:	
  4337                           
  4338                           ;protocol.c: 296: length--;
  4339  06D1  3001               	movlw	1
  4340  06D2  0020               	movlb	0	; select bank0
  4341  06D3  02C6               	subwf	PROTOCOL_I2C_Send_uint8_t@length,f
  4342                           
  4343                           ;protocol.c: 297: for(i=0; i<length; i++) printf("%d,", pbuffer[i]);
  4344  06D4  01D4               	clrf	_i
  4345  06D5                     l2770:	
  4346  06D5  0846               	movf	PROTOCOL_I2C_Send_uint8_t@length,w
  4347  06D6  0254               	subwf	_i,w
  4348  06D7  1803               	btfsc	3,0
  4349  06D8  2EF3               	goto	l2772
  4350  06D9  3070               	movlw	low (STR_22| (0+32768))
  4351  06DA  00AE               	movwf	printf@f
  4352  06DB  3084               	movlw	high (STR_22| (0+32768))
  4353  06DC  00AF               	movwf	printf@f+1
  4354  06DD  0854               	movf	_i,w
  4355  06DE  0742               	addwf	PROTOCOL_I2C_Send_uint8_t@pbuffer,w
  4356  06DF  00C3               	movwf	??_PROTOCOL_I2C_Send_uint8_t
  4357  06E0  0843               	movf	??_PROTOCOL_I2C_Send_uint8_t,w
  4358  06E1  0086               	movwf	6
  4359  06E2  0187               	clrf	7
  4360  06E3  0801               	movf	1,w
  4361  06E4  00C4               	movwf	??_PROTOCOL_I2C_Send_uint8_t+1
  4362  06E5  01C5               	clrf	??_PROTOCOL_I2C_Send_uint8_t+2
  4363  06E6  0844               	movf	??_PROTOCOL_I2C_Send_uint8_t+1,w
  4364  06E7  00B0               	movwf	?_printf+2
  4365  06E8  0845               	movf	??_PROTOCOL_I2C_Send_uint8_t+2,w
  4366  06E9  00B1               	movwf	?_printf+3
  4367  06EA  3180  2074  3186   	fcall	_printf
  4368  06ED  3001               	movlw	1
  4369  06EE  0020               	movlb	0	; select bank0
  4370  06EF  00C3               	movwf	??_PROTOCOL_I2C_Send_uint8_t
  4371  06F0  0843               	movf	??_PROTOCOL_I2C_Send_uint8_t,w
  4372  06F1  07D4               	addwf	_i,f
  4373  06F2  2ED5               	goto	l2770
  4374  06F3                     l2772:	
  4375                           
  4376                           ;protocol.c: 298: printf("%d\n", pbuffer[i]);
  4377  06F3  3001               	movlw	low ((STR_16+6)| (0+32768))
  4378  06F4  00AE               	movwf	printf@f
  4379  06F5  3084               	movlw	high ((STR_16+6)| (0+32768))
  4380  06F6  00AF               	movwf	printf@f+1
  4381  06F7  0854               	movf	_i,w
  4382  06F8  0742               	addwf	PROTOCOL_I2C_Send_uint8_t@pbuffer,w
  4383  06F9  00C3               	movwf	??_PROTOCOL_I2C_Send_uint8_t
  4384  06FA  0843               	movf	??_PROTOCOL_I2C_Send_uint8_t,w
  4385  06FB  0086               	movwf	6
  4386  06FC  0187               	clrf	7
  4387  06FD  0801               	movf	1,w
  4388  06FE  00C4               	movwf	??_PROTOCOL_I2C_Send_uint8_t+1
  4389  06FF  01C5               	clrf	??_PROTOCOL_I2C_Send_uint8_t+2
  4390  0700  0844               	movf	??_PROTOCOL_I2C_Send_uint8_t+1,w
  4391  0701  00B0               	movwf	?_printf+2
  4392  0702  0845               	movf	??_PROTOCOL_I2C_Send_uint8_t+2,w
  4393  0703  00B1               	movwf	?_printf+3
  4394  0704  3180  2074         	fcall	_printf
  4395  0706  0008               	return
  4396  0707                     __end_of_PROTOCOL_I2C_Send_uint8_t:	
  4397                           
  4398                           	psect	text11
  4399  0074                     __ptext11:	
  4400 ;; *************** function _printf *****************
  4401 ;; Defined at:
  4402 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  4403 ;; Parameters:    Size  Location     Type
  4404 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  4405 ;;		 -> STR_48(10), STR_47(9), STR_46(10), STR_45(9), 
  4406 ;;		 -> STR_44(4), STR_43(4), STR_42(4), STR_41(4), 
  4407 ;;		 -> STR_40(4), STR_39(4), STR_38(4), STR_37(4), 
  4408 ;;		 -> STR_36(14), STR_35(9), STR_34(10), STR_33(9), 
  4409 ;;		 -> STR_32(10), STR_31(9), STR_30(7), STR_29(4), 
  4410 ;;		 -> STR_28(4), STR_27(9), STR_26(4), STR_25(4), 
  4411 ;;		 -> STR_24(10), STR_23(4), STR_22(4), STR_21(8), 
  4412 ;;		 -> STR_20(4), STR_19(4), STR_18(9), STR_17(6), 
  4413 ;;		 -> STR_16(10), STR_13(10), STR_9(10), STR_5(10), 
  4414 ;;		 -> STR_3(5), 
  4415 ;; Auto vars:     Size  Location     Type
  4416 ;;  tmpval          4    0        struct .
  4417 ;;  width           2   31[BANK0 ] int 
  4418 ;;  len             2   28[BANK0 ] unsigned int 
  4419 ;;  val             2   26[BANK0 ] unsigned int 
  4420 ;;  cp              2   23[BANK0 ] PTR const unsigned char 
  4421 ;;		 -> STR_10(4), buf(48), STR_2(7), ROM(8192), 
  4422 ;;		 -> printf@c(1), STR_1(17), 
  4423 ;;  c               1   33[BANK0 ] char 
  4424 ;;  flag            1   30[BANK0 ] unsigned char 
  4425 ;;  ap              1   25[BANK0 ] PTR void [1]
  4426 ;;		 -> ?_printf(2), 
  4427 ;;  prec            1   22[BANK0 ] char 
  4428 ;; Return value:  Size  Location     Type
  4429 ;;                  2   14[BANK0 ] int 
  4430 ;; Registers used:
  4431 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4432 ;; Tracked objects:
  4433 ;;		On entry : 0/0
  4434 ;;		On exit  : 0/0
  4435 ;;		Unchanged: 0/0
  4436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4437 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4438 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4439 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4440 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4441 ;;Total ram usage:       20 bytes
  4442 ;; Hardware stack levels used:    1
  4443 ;; Hardware stack levels required when called:    7
  4444 ;; This function calls:
  4445 ;;		___lwdiv
  4446 ;;		___lwmod
  4447 ;;		___wmul
  4448 ;;		_isdigit
  4449 ;;		_putch
  4450 ;; This function is called by:
  4451 ;;		_PROTOCOL_Loop
  4452 ;;		_PROTOCOL_I2C_Send_uint8_t
  4453 ;; This function uses a non-reentrant model
  4454 ;;
  4455                           
  4456                           
  4457                           ;psect for function _printf
  4458  0074                     _printf:	
  4459                           
  4460                           ;doprnt.c: 466: va_list ap;
  4461                           ;doprnt.c: 499: signed char c;
  4462                           ;doprnt.c: 501: int width;
  4463                           ;doprnt.c: 506: signed char prec;
  4464                           ;doprnt.c: 508: unsigned char flag;
  4465                           ;doprnt.c: 523: union {
  4466                           ;doprnt.c: 524: unsigned long vd;
  4467                           ;doprnt.c: 525: double integ;
  4468                           ;doprnt.c: 526: } tmpval;
  4469                           ;doprnt.c: 528: unsigned int val;
  4470                           ;doprnt.c: 529: unsigned len;
  4471                           ;doprnt.c: 530: const char * cp;
  4472                           ;doprnt.c: 533: *ap = __va_start();
  4473                           
  4474                           ;incstack = 0
  4475                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4476  0074  3030               	movlw	(low ((?_printf| 0+2)))& (0+255)
  4477  0075  0020               	movlb	0	; select bank0
  4478  0076  00B2               	movwf	??_printf
  4479  0077  0832               	movf	??_printf,w
  4480  0078  00B9               	movwf	printf@ap
  4481  0079                     l2630:	
  4482                           ;doprnt.c: 536: while(c = *f++) {
  4483                           
  4484  0079  0020               	movlb	0	; select bank0
  4485  007A  082F               	movf	printf@f+1,w
  4486  007B  00B3               	movwf	??_printf+1
  4487  007C  082E               	movf	printf@f,w
  4488  007D  00B2               	movwf	??_printf
  4489  007E  0AAE               	incf	printf@f,f
  4490  007F  1903               	skipnz
  4491  0080  0AAF               	incf	printf@f+1,f
  4492  0081  0832               	movf	??_printf,w
  4493  0082  0084               	movwf	4
  4494  0083  0833               	movf	??_printf+1,w
  4495  0084  0085               	movwf	5
  4496  0085  0800               	movf	0,w	;code access
  4497  0086  00B4               	movwf	??_printf+2
  4498  0087  0834               	movf	??_printf+2,w
  4499  0088  00C1               	movwf	printf@c
  4500  0089  0841               	movf	printf@c,w
  4501  008A  1903               	btfsc	3,2
  4502  008B  0008               	return
  4503                           
  4504                           ;doprnt.c: 538: if(c != '%')
  4505  008C  3025               	movlw	37
  4506  008D  0641               	xorwf	printf@c,w
  4507  008E  1903               	btfsc	3,2
  4508  008F  2895               	goto	l2506
  4509                           
  4510                           ;doprnt.c: 540: {
  4511                           ;doprnt.c: 541: (putch(c) );
  4512  0090  0841               	movf	printf@c,w
  4513  0091  318D  259F  3180   	fcall	_putch
  4514                           
  4515                           ;doprnt.c: 542: continue;
  4516  0094  2879               	goto	l2630
  4517  0095                     l2506:	
  4518                           
  4519                           ;doprnt.c: 543: }
  4520                           ;doprnt.c: 546: width = 0;
  4521  0095  0020               	movlb	0	; select bank0
  4522  0096  01BF               	clrf	printf@width
  4523  0097  01C0               	clrf	printf@width+1
  4524                           
  4525                           ;doprnt.c: 548: flag = 0;
  4526  0098  01BE               	clrf	printf@flag
  4527                           
  4528                           ;doprnt.c: 551: switch(*f) {
  4529                           
  4530                           ;doprnt.c: 550: for(;;) {
  4531  0099  289F               	goto	l2512
  4532  009A                     l483:	
  4533                           ;doprnt.c: 579: case '0':
  4534                           
  4535                           
  4536                           ;doprnt.c: 580: flag |= 0x04;
  4537  009A  153E               	bsf	printf@flag,2
  4538                           
  4539                           ;doprnt.c: 581: f++;
  4540  009B  3001               	movlw	1
  4541  009C  07AE               	addwf	printf@f,f
  4542  009D  3000               	movlw	0
  4543  009E  3DAF               	addwfc	printf@f+1,f
  4544  009F                     l2512:	
  4545                           ;doprnt.c: 584: }
  4546                           
  4547                           ;doprnt.c: 582: continue;
  4548                           
  4549  009F  082E               	movf	printf@f,w
  4550  00A0  0084               	movwf	4
  4551  00A1  082F               	movf	printf@f+1,w
  4552  00A2  0085               	movwf	5
  4553  00A3  0800               	movf	0,w	;code access
  4554                           
  4555                           ; Switch size 1, requested type "space"
  4556                           ; Number of cases is 1, Range of values is 48 to 48
  4557                           ; switch strategies available:
  4558                           ; Name         Instructions Cycles
  4559                           ; simple_byte            4     3 (average)
  4560                           ; direct_byte           11     9 (fixed)
  4561                           ; jumptable            263     9 (fixed)
  4562                           ;	Chosen strategy is simple_byte
  4563  00A4  3A30               	xorlw	48	; case 48
  4564  00A5  1903               	skipnz
  4565  00A6  289A               	goto	l483
  4566  00A7  28A8               	goto	l2514
  4567  00A8                     l2514:	
  4568                           ;doprnt.c: 586: }
  4569                           
  4570                           ;doprnt.c: 585: break;
  4571                           
  4572                           
  4573                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4574  00A8  082E               	movf	printf@f,w
  4575  00A9  0084               	movwf	4
  4576  00AA  082F               	movf	printf@f+1,w
  4577  00AB  0085               	movwf	5
  4578  00AC  0800               	movf	0,w	;code access
  4579  00AD  318E  2646  3180   	fcall	_isdigit
  4580  00B0  1C03               	btfss	3,0
  4581  00B1  2949               	goto	l2562
  4582                           
  4583                           ;doprnt.c: 598: width = 0;
  4584  00B2  0020               	movlb	0	; select bank0
  4585  00B3  01BF               	clrf	printf@width
  4586  00B4  01C0               	clrf	printf@width+1
  4587  00B5                     l2518:	
  4588                           ;doprnt.c: 599: do {
  4589                           
  4590                           
  4591                           ;doprnt.c: 600: width *= 10;
  4592  00B5  300A               	movlw	10
  4593  00B6  0020               	movlb	0	; select bank0
  4594  00B7  00A0               	movwf	___wmul@multiplier
  4595  00B8  3000               	movlw	0
  4596  00B9  00A1               	movwf	___wmul@multiplier+1
  4597  00BA  0840               	movf	printf@width+1,w
  4598  00BB  00A3               	movwf	___wmul@multiplicand+1
  4599  00BC  083F               	movf	printf@width,w
  4600  00BD  00A2               	movwf	___wmul@multiplicand
  4601  00BE  318E  26CD  3180   	fcall	___wmul
  4602  00C1  0020               	movlb	0	; select bank0
  4603  00C2  0821               	movf	?___wmul+1,w
  4604  00C3  00C0               	movwf	printf@width+1
  4605  00C4  0820               	movf	?___wmul,w
  4606  00C5  00BF               	movwf	printf@width
  4607                           
  4608                           ;doprnt.c: 601: width += *f++ - '0';
  4609  00C6  082E               	movf	printf@f,w
  4610  00C7  0084               	movwf	4
  4611  00C8  082F               	movf	printf@f+1,w
  4612  00C9  0085               	movwf	5
  4613  00CA  0800               	movf	0,w	;code access
  4614  00CB  3ED0               	addlw	208
  4615  00CC  00B2               	movwf	??_printf
  4616  00CD  30FF               	movlw	255
  4617  00CE  1803               	skipnc
  4618  00CF  3000               	movlw	0
  4619  00D0  00B3               	movwf	??_printf+1
  4620  00D1  0832               	movf	??_printf,w
  4621  00D2  07BF               	addwf	printf@width,f
  4622  00D3  0833               	movf	??_printf+1,w
  4623  00D4  3DC0               	addwfc	printf@width+1,f
  4624  00D5  3001               	movlw	1
  4625  00D6  07AE               	addwf	printf@f,f
  4626  00D7  3000               	movlw	0
  4627  00D8  3DAF               	addwfc	printf@f+1,f
  4628                           
  4629                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4630  00D9  082E               	movf	printf@f,w
  4631  00DA  0084               	movwf	4
  4632  00DB  082F               	movf	printf@f+1,w
  4633  00DC  0085               	movwf	5
  4634  00DD  0800               	movf	0,w	;code access
  4635  00DE  318E  2646  3180   	fcall	_isdigit
  4636  00E1  1C03               	btfss	3,0
  4637  00E2  2949               	goto	l2562
  4638  00E3  28B5               	goto	l2518
  4639  00E4                     l2526:	
  4640                           ;doprnt.c: 728: case 's':
  4641                           
  4642                           ;doprnt.c: 698: case 'i':
  4643                           ;doprnt.c: 699: break;
  4644                           
  4645                           ;doprnt.c: 697: case 'd':
  4646                           
  4647                           ;doprnt.c: 638: goto alldone;
  4648                           
  4649                           ;doprnt.c: 637: case 0:
  4650                           
  4651                           ;doprnt.c: 608: }
  4652                           ;doprnt.c: 635: switch(c = *f++) {
  4653                           
  4654                           
  4655                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  4656  00E4  0020               	movlb	0	; select bank0
  4657  00E5  0839               	movf	printf@ap,w
  4658  00E6  0086               	movwf	6
  4659  00E7  0187               	clrf	7
  4660  00E8  3F40               	moviw [0]fsr1
  4661  00E9  00B7               	movwf	printf@cp
  4662  00EA  3F41               	moviw [1]fsr1
  4663  00EB  00B8               	movwf	printf@cp+1
  4664  00EC  3002               	movlw	2
  4665  00ED  00B2               	movwf	??_printf
  4666  00EE  0832               	movf	??_printf,w
  4667  00EF  07B9               	addwf	printf@ap,f
  4668                           
  4669                           ;doprnt.c: 740: if(!cp)
  4670  00F0  0837               	movf	printf@cp,w
  4671  00F1  0438               	iorwf	printf@cp+1,w
  4672  00F2  1D03               	btfss	3,2
  4673  00F3  28F8               	goto	l2534
  4674                           
  4675                           ;doprnt.c: 741: cp = "(null)";
  4676  00F4  305A               	movlw	low (STR_2| (0+32768))
  4677  00F5  00B7               	movwf	printf@cp
  4678  00F6  3084               	movlw	high (STR_2| (0+32768))
  4679  00F7  00B8               	movwf	printf@cp+1
  4680  00F8                     l2534:	
  4681                           
  4682                           ;doprnt.c: 745: len = 0;
  4683  00F8  01BC               	clrf	printf@len
  4684  00F9  01BD               	clrf	printf@len+1
  4685  00FA                     l2538:	
  4686                           ;doprnt.c: 746: while(cp[len])
  4687                           
  4688  00FA  0837               	movf	printf@cp,w
  4689  00FB  073C               	addwf	printf@len,w
  4690  00FC  0084               	movwf	4
  4691  00FD  0838               	movf	printf@cp+1,w
  4692  00FE  3D3D               	addwfc	printf@len+1,w
  4693  00FF  0085               	movwf	5
  4694  0100  0012               	moviw fsr0++
  4695  0101  1903               	btfsc	3,2
  4696  0102  2908               	goto	l2540
  4697                           
  4698                           ;doprnt.c: 747: len++;
  4699  0103  3001               	movlw	1
  4700  0104  07BC               	addwf	printf@len,f
  4701  0105  3000               	movlw	0
  4702  0106  3DBD               	addwfc	printf@len+1,f
  4703  0107  28FA               	goto	l2538
  4704  0108                     l2540:	
  4705                           ;doprnt.c: 750: dostring:
  4706                           
  4707                           
  4708                           ;doprnt.c: 757: if(width > len)
  4709  0108  0840               	movf	printf@width+1,w
  4710  0109  023D               	subwf	printf@len+1,w
  4711  010A  1D03               	skipz
  4712  010B  290E               	goto	u1505
  4713  010C  083F               	movf	printf@width,w
  4714  010D  023C               	subwf	printf@len,w
  4715  010E                     u1505:	
  4716  010E  1803               	skipnc
  4717  010F  2915               	goto	l2544
  4718                           
  4719                           ;doprnt.c: 758: width -= len;
  4720  0110  083C               	movf	printf@len,w
  4721  0111  02BF               	subwf	printf@width,f
  4722  0112  083D               	movf	printf@len+1,w
  4723  0113  3BC0               	subwfb	printf@width+1,f
  4724  0114  2917               	goto	l2548
  4725  0115                     l2544:	
  4726                           
  4727                           ;doprnt.c: 759: else
  4728                           ;doprnt.c: 760: width = 0;
  4729  0115  01BF               	clrf	printf@width
  4730  0116  01C0               	clrf	printf@width+1
  4731  0117                     l2548:	
  4732                           ;doprnt.c: 764: while(width--)
  4733                           
  4734  0117  30FF               	movlw	255
  4735  0118  0020               	movlb	0	; select bank0
  4736  0119  07BF               	addwf	printf@width,f
  4737  011A  30FF               	movlw	255
  4738  011B  3DC0               	addwfc	printf@width+1,f
  4739  011C  0A3F               	incf	printf@width,w
  4740  011D  1903               	btfsc	3,2
  4741  011E  0A40               	incf	printf@width+1,w
  4742  011F  1903               	btfsc	3,2
  4743  0120  2933               	goto	l2554
  4744                           
  4745                           ;doprnt.c: 765: (putch(' ') );
  4746  0121  3020               	movlw	32
  4747  0122  318D  259F  3180   	fcall	_putch
  4748  0125  2917               	goto	l2548
  4749  0126                     l2550:	
  4750                           ;doprnt.c: 767: while(len--)
  4751                           
  4752                           
  4753                           ;doprnt.c: 768: (putch(*cp++) );
  4754  0126  0837               	movf	printf@cp,w
  4755  0127  0084               	movwf	4
  4756  0128  0838               	movf	printf@cp+1,w
  4757  0129  0085               	movwf	5
  4758  012A  0800               	movf	0,w	;code access
  4759  012B  318D  259F  3180   	fcall	_putch
  4760  012E  3001               	movlw	1
  4761  012F  0020               	movlb	0	; select bank0
  4762  0130  07B7               	addwf	printf@cp,f
  4763  0131  3000               	movlw	0
  4764  0132  3DB8               	addwfc	printf@cp+1,f
  4765  0133                     l2554:	
  4766  0133  3001               	movlw	1
  4767  0134  02BC               	subwf	printf@len,f
  4768  0135  3000               	movlw	0
  4769  0136  3BBD               	subwfb	printf@len+1,f
  4770  0137  0A3C               	incf	printf@len,w
  4771  0138  1D03               	skipz
  4772  0139  2926               	goto	l2550
  4773  013A  0A3D               	incf	printf@len+1,w
  4774  013B  1903               	btfsc	3,2
  4775  013C  2879               	goto	l2630
  4776  013D  2926               	goto	l2550
  4777  013E                     l2556:	
  4778                           ;doprnt.c: 802: default:
  4779                           
  4780                           ;doprnt.c: 774: continue;
  4781                           
  4782                           
  4783                           ;doprnt.c: 805: cp = (char *)&c;
  4784  013E  3041               	movlw	low printf@c
  4785  013F  00B7               	movwf	printf@cp
  4786  0140  3000               	movlw	high printf@c
  4787  0141  00B8               	movwf	printf@cp+1
  4788                           
  4789                           ;doprnt.c: 806: len = 1;
  4790  0142  3001               	movlw	1
  4791  0143  00BC               	movwf	printf@len
  4792  0144  3000               	movlw	0
  4793  0145  00BD               	movwf	printf@len+1
  4794                           
  4795                           ;doprnt.c: 807: goto dostring;
  4796  0146  2908               	goto	l2540
  4797  0147                     l511:	
  4798                           ;doprnt.c: 817: case 'u':
  4799                           
  4800                           
  4801                           ;doprnt.c: 818: flag |= 0x40;
  4802  0147  173E               	bsf	printf@flag,6
  4803                           
  4804                           ;doprnt.c: 822: }
  4805                           
  4806                           ;doprnt.c: 819: break;
  4807  0148  2967               	goto	l495
  4808  0149                     l2562:	
  4809  0149  0020               	movlb	0	; select bank0
  4810  014A  082F               	movf	printf@f+1,w
  4811  014B  00B3               	movwf	??_printf+1
  4812  014C  082E               	movf	printf@f,w
  4813  014D  00B2               	movwf	??_printf
  4814  014E  0AAE               	incf	printf@f,f
  4815  014F  1903               	skipnz
  4816  0150  0AAF               	incf	printf@f+1,f
  4817  0151  0832               	movf	??_printf,w
  4818  0152  0084               	movwf	4
  4819  0153  0833               	movf	??_printf+1,w
  4820  0154  0085               	movwf	5
  4821  0155  0800               	movf	0,w	;code access
  4822  0156  00C1               	movwf	printf@c
  4823                           
  4824                           ; Switch size 1, requested type "space"
  4825                           ; Number of cases is 5, Range of values is 0 to 117
  4826                           ; switch strategies available:
  4827                           ; Name         Instructions Cycles
  4828                           ; simple_byte           16     9 (average)
  4829                           ; direct_byte          242     6 (fixed)
  4830                           ; jumptable            260     6 (fixed)
  4831                           ;	Chosen strategy is simple_byte
  4832  0157  3A00               	xorlw	0	; case 0
  4833  0158  1903               	skipnz
  4834  0159  2A48               	goto	l535
  4835  015A  3A64               	xorlw	100	; case 100
  4836  015B  1903               	skipnz
  4837  015C  2967               	goto	l495
  4838  015D  3A0D               	xorlw	13	; case 105
  4839  015E  1903               	skipnz
  4840  015F  2967               	goto	l495
  4841  0160  3A1A               	xorlw	26	; case 115
  4842  0161  1903               	skipnz
  4843  0162  28E4               	goto	l2526
  4844  0163  3A06               	xorlw	6	; case 117
  4845  0164  1903               	skipnz
  4846  0165  2947               	goto	l511
  4847  0166  293E               	goto	l2556
  4848  0167                     l495:	
  4849                           
  4850                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  4851  0167  0020               	movlb	0	; select bank0
  4852  0168  1B3E               	btfsc	printf@flag,6
  4853  0169  2981               	goto	l2574
  4854                           
  4855                           ;doprnt.c: 1253: {
  4856                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4857  016A  0839               	movf	printf@ap,w
  4858  016B  0086               	movwf	6
  4859  016C  0187               	clrf	7
  4860  016D  3F40               	moviw [0]fsr1
  4861  016E  00BA               	movwf	printf@val
  4862  016F  3F41               	moviw [1]fsr1
  4863  0170  00BB               	movwf	printf@val+1
  4864  0171  3002               	movlw	2
  4865  0172  00B2               	movwf	??_printf
  4866  0173  0832               	movf	??_printf,w
  4867  0174  07B9               	addwf	printf@ap,f
  4868                           
  4869                           ;doprnt.c: 1261: if((int)val < 0) {
  4870  0175  1FBB               	btfss	printf@val+1,7
  4871  0176  298C               	goto	l2578
  4872                           
  4873                           ;doprnt.c: 1262: flag |= 0x03;
  4874  0177  3003               	movlw	3
  4875  0178  00B2               	movwf	??_printf
  4876  0179  0832               	movf	??_printf,w
  4877  017A  04BE               	iorwf	printf@flag,f
  4878                           
  4879                           ;doprnt.c: 1263: val = -val;
  4880  017B  09BA               	comf	printf@val,f
  4881  017C  09BB               	comf	printf@val+1,f
  4882  017D  0ABA               	incf	printf@val,f
  4883  017E  1903               	skipnz
  4884  017F  0ABB               	incf	printf@val+1,f
  4885                           
  4886                           ;doprnt.c: 1264: }
  4887                           ;doprnt.c: 1266: }
  4888  0180  298C               	goto	l2578
  4889  0181                     l2574:	
  4890                           
  4891                           ;doprnt.c: 1268: else
  4892                           ;doprnt.c: 1273: {
  4893                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4894  0181  0839               	movf	printf@ap,w
  4895  0182  0086               	movwf	6
  4896  0183  0187               	clrf	7
  4897  0184  3F40               	moviw [0]fsr1
  4898  0185  00BA               	movwf	printf@val
  4899  0186  3F41               	moviw [1]fsr1
  4900  0187  00BB               	movwf	printf@val+1
  4901  0188  3002               	movlw	2
  4902  0189  00B2               	movwf	??_printf
  4903  018A  0832               	movf	??_printf,w
  4904  018B  07B9               	addwf	printf@ap,f
  4905  018C                     l2578:	
  4906                           
  4907                           ;doprnt.c: 1287: }
  4908                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4909  018C  01C1               	clrf	printf@c
  4910  018D  0AC1               	incf	printf@c,f
  4911  018E  3005               	movlw	5
  4912  018F  0641               	xorwf	printf@c,w
  4913  0190  1903               	btfsc	3,2
  4914  0191  29B1               	goto	l2590
  4915  0192                     l2584:	
  4916                           
  4917                           ;doprnt.c: 1306: if(val < dpowers[c])
  4918  0192  0841               	movf	printf@c,w
  4919  0193  00B2               	movwf	??_printf
  4920  0194  01B3               	clrf	??_printf+1
  4921  0195  35B2               	lslf	??_printf,f
  4922  0196  0DB3               	rlf	??_printf+1,f
  4923  0197  30D2               	movlw	low (_dpowers| (0+32768))
  4924  0198  0732               	addwf	??_printf,w
  4925  0199  0084               	movwf	4
  4926  019A  3083               	movlw	high (_dpowers| (0+32768))
  4927  019B  3D33               	addwfc	??_printf+1,w
  4928  019C  0085               	movwf	5
  4929  019D  3F00               	moviw [0]fsr0
  4930  019E  00B4               	movwf	??_printf+2
  4931  019F  3F01               	moviw [1]fsr0
  4932  01A0  00B5               	movwf	??_printf+3
  4933  01A1  0835               	movf	??_printf+3,w
  4934  01A2  023B               	subwf	printf@val+1,w
  4935  01A3  1D03               	skipz
  4936  01A4  29A7               	goto	u1565
  4937  01A5  0834               	movf	??_printf+2,w
  4938  01A6  023A               	subwf	printf@val,w
  4939  01A7                     u1565:	
  4940  01A7  1C03               	btfss	3,0
  4941  01A8  29B1               	goto	l2590
  4942                           
  4943                           ;doprnt.c: 1307: break;
  4944  01A9  3001               	movlw	1
  4945  01AA  00B2               	movwf	??_printf
  4946  01AB  0832               	movf	??_printf,w
  4947  01AC  07C1               	addwf	printf@c,f
  4948  01AD  3005               	movlw	5
  4949  01AE  0641               	xorwf	printf@c,w
  4950  01AF  1D03               	btfss	3,2
  4951  01B0  2992               	goto	l2584
  4952  01B1                     l2590:	
  4953                           
  4954                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4955  01B1  083F               	movf	printf@width,w
  4956  01B2  0440               	iorwf	printf@width+1,w
  4957  01B3  1903               	btfsc	3,2
  4958  01B4  29BD               	goto	l518
  4959  01B5  083E               	movf	printf@flag,w
  4960  01B6  3903               	andlw	3
  4961  01B7  1903               	btfsc	3,2
  4962  01B8  29BD               	goto	l518
  4963                           
  4964                           ;doprnt.c: 1346: width--;
  4965  01B9  30FF               	movlw	255
  4966  01BA  07BF               	addwf	printf@width,f
  4967  01BB  30FF               	movlw	255
  4968  01BC  3DC0               	addwfc	printf@width+1,f
  4969  01BD                     l518:	
  4970                           
  4971                           ;doprnt.c: 1381: if(width > c)
  4972  01BD  0841               	movf	printf@c,w
  4973  01BE  00B2               	movwf	??_printf
  4974  01BF  01B3               	clrf	??_printf+1
  4975  01C0  1BB2               	btfsc	??_printf,7
  4976  01C1  03B3               	decf	??_printf+1,f
  4977  01C2  0833               	movf	??_printf+1,w
  4978  01C3  3A80               	xorlw	128
  4979  01C4  00B4               	movwf	??_printf+2
  4980  01C5  0840               	movf	printf@width+1,w
  4981  01C6  3A80               	xorlw	128
  4982  01C7  0234               	subwf	??_printf+2,w
  4983  01C8  1D03               	skipz
  4984  01C9  29CC               	goto	u1605
  4985  01CA  083F               	movf	printf@width,w
  4986  01CB  0232               	subwf	??_printf,w
  4987  01CC                     u1605:	
  4988  01CC  1803               	skipnc
  4989  01CD  29D9               	goto	l2598
  4990                           
  4991                           ;doprnt.c: 1382: width -= c;
  4992  01CE  0020               	movlb	0	; select bank0
  4993  01CF  0841               	movf	printf@c,w
  4994  01D0  00B2               	movwf	??_printf
  4995  01D1  01B3               	clrf	??_printf+1
  4996  01D2  1BB2               	btfsc	??_printf,7
  4997  01D3  03B3               	decf	??_printf+1,f
  4998  01D4  0832               	movf	??_printf,w
  4999  01D5  02BF               	subwf	printf@width,f
  5000  01D6  0833               	movf	??_printf+1,w
  5001  01D7  3BC0               	subwfb	printf@width+1,f
  5002  01D8  29DC               	goto	l2600
  5003  01D9                     l2598:	
  5004                           
  5005                           ;doprnt.c: 1383: else
  5006                           ;doprnt.c: 1384: width = 0;
  5007  01D9  0020               	movlb	0	; select bank0
  5008  01DA  01BF               	clrf	printf@width
  5009  01DB  01C0               	clrf	printf@width+1
  5010  01DC                     l2600:	
  5011                           
  5012                           ;doprnt.c: 1387: if(flag & 0x04) {
  5013  01DC  1D3E               	btfss	printf@flag,2
  5014  01DD  29F5               	goto	l2612
  5015                           
  5016                           ;doprnt.c: 1392: if(flag & 0x03)
  5017  01DE  083E               	movf	printf@flag,w
  5018  01DF  3903               	andlw	3
  5019  01E0  1903               	btfsc	3,2
  5020  01E1  29E6               	goto	l2606
  5021                           
  5022                           ;doprnt.c: 1393: (putch('-') );
  5023  01E2  302D               	movlw	45
  5024  01E3  318D  259F  3180   	fcall	_putch
  5025  01E6                     l2606:	
  5026                           
  5027                           ;doprnt.c: 1415: if(width)
  5028  01E6  0020               	movlb	0	; select bank0
  5029  01E7                     L3:	
  5030  01E7  083F               	movf	printf@width,w
  5031  01E8  0440               	iorwf	printf@width+1,w
  5032  01E9  1903               	btfsc	3,2
  5033  01EA  2A0E               	goto	l2622
  5034                           
  5035                           ;doprnt.c: 1417: (putch('0') );
  5036                           
  5037                           ;doprnt.c: 1416: do
  5038  01EB  3030               	movlw	48
  5039  01EC  318D  259F  3180   	fcall	_putch
  5040                           
  5041                           ;doprnt.c: 1418: while(--width);
  5042  01EF  30FF               	movlw	255
  5043  01F0  0020               	movlb	0	; select bank0
  5044  01F1  07BF               	addwf	printf@width,f
  5045  01F2  30FF               	movlw	255
  5046  01F3  3DC0               	addwfc	printf@width+1,f
  5047  01F4  29E7               	goto	L3
  5048  01F5                     l2612:	
  5049                           ;doprnt.c: 1420: } else
  5050                           
  5051                           
  5052                           ;doprnt.c: 1422: {
  5053                           ;doprnt.c: 1424: if(width
  5054                           ;doprnt.c: 1428: )
  5055  01F5  083F               	movf	printf@width,w
  5056  01F6  0440               	iorwf	printf@width+1,w
  5057  01F7  1903               	btfsc	3,2
  5058  01F8  2A06               	goto	l2618
  5059  01F9                     l2614:	
  5060                           ;doprnt.c: 1429: do
  5061                           
  5062                           
  5063                           ;doprnt.c: 1430: (putch(' ') );
  5064  01F9  3020               	movlw	32
  5065  01FA  318D  259F  3180   	fcall	_putch
  5066                           
  5067                           ;doprnt.c: 1431: while(--width);
  5068  01FD  30FF               	movlw	255
  5069  01FE  0020               	movlb	0	; select bank0
  5070  01FF  07BF               	addwf	printf@width,f
  5071  0200  30FF               	movlw	255
  5072  0201  3DC0               	addwfc	printf@width+1,f
  5073  0202  083F               	movf	printf@width,w
  5074  0203  0440               	iorwf	printf@width+1,w
  5075  0204  1D03               	btfss	3,2
  5076  0205  29F9               	goto	l2614
  5077  0206                     l2618:	
  5078                           
  5079                           ;doprnt.c: 1438: if(flag & 0x03)
  5080  0206  083E               	movf	printf@flag,w
  5081  0207  3903               	andlw	3
  5082  0208  1903               	btfsc	3,2
  5083  0209  2A0E               	goto	l2622
  5084                           
  5085                           ;doprnt.c: 1439: (putch('-') );
  5086  020A  302D               	movlw	45
  5087  020B  318D  259F  3180   	fcall	_putch
  5088  020E                     l2622:	
  5089                           
  5090                           ;doprnt.c: 1469: }
  5091                           ;doprnt.c: 1472: prec = c;
  5092  020E  0020               	movlb	0	; select bank0
  5093  020F  0841               	movf	printf@c,w
  5094  0210  00B2               	movwf	??_printf
  5095  0211  0832               	movf	??_printf,w
  5096  0212  00B6               	movwf	printf@prec
  5097  0213                     l2628:	
  5098                           ;doprnt.c: 1474: while(prec--) {
  5099                           
  5100  0213  30FF               	movlw	255
  5101  0214  0020               	movlb	0	; select bank0
  5102  0215  00B2               	movwf	??_printf
  5103  0216  0832               	movf	??_printf,w
  5104  0217  07B6               	addwf	printf@prec,f
  5105  0218  0A36               	incf	printf@prec,w
  5106  0219  1903               	btfsc	3,2
  5107  021A  2879               	goto	l2630
  5108                           
  5109                           ;doprnt.c: 1478: {
  5110                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5111  021B  300A               	movlw	10
  5112  021C  00A8               	movwf	___lwmod@divisor
  5113  021D  3000               	movlw	0
  5114  021E  00A9               	movwf	___lwmod@divisor+1
  5115  021F  0836               	movf	printf@prec,w
  5116  0220  00B2               	movwf	??_printf
  5117  0221  01B3               	clrf	??_printf+1
  5118  0222  35B2               	lslf	??_printf,f
  5119  0223  0DB3               	rlf	??_printf+1,f
  5120  0224  30D2               	movlw	low (_dpowers| (0+32768))
  5121  0225  0732               	addwf	??_printf,w
  5122  0226  0084               	movwf	4
  5123  0227  3083               	movlw	high (_dpowers| (0+32768))
  5124  0228  3D33               	addwfc	??_printf+1,w
  5125  0229  0085               	movwf	5
  5126  022A  3F00               	moviw [0]fsr0
  5127  022B  00A0               	movwf	___lwdiv@divisor
  5128  022C  3F01               	moviw [1]fsr0
  5129  022D  00A1               	movwf	___lwdiv@divisor+1
  5130  022E  083B               	movf	printf@val+1,w
  5131  022F  00A3               	movwf	___lwdiv@dividend+1
  5132  0230  083A               	movf	printf@val,w
  5133  0231  00A2               	movwf	___lwdiv@dividend
  5134  0232  3187  2785  3180   	fcall	___lwdiv
  5135  0235  0020               	movlb	0	; select bank0
  5136  0236  0821               	movf	?___lwdiv+1,w
  5137  0237  00AB               	movwf	___lwmod@dividend+1
  5138  0238  0820               	movf	?___lwdiv,w
  5139  0239  00AA               	movwf	___lwmod@dividend
  5140  023A  318F  27D3  3180   	fcall	___lwmod
  5141  023D  0020               	movlb	0	; select bank0
  5142  023E  0828               	movf	?___lwmod,w
  5143  023F  3E30               	addlw	48
  5144  0240  00B4               	movwf	??_printf+2
  5145  0241  0834               	movf	??_printf+2,w
  5146  0242  00C1               	movwf	printf@c
  5147                           
  5148                           ;doprnt.c: 1523: }
  5149                           ;doprnt.c: 1524: (putch(c) );
  5150  0243  0841               	movf	printf@c,w
  5151  0244  318D  259F  3180   	fcall	_putch
  5152  0247  2A13               	goto	l2628
  5153  0248                     l535:	
  5154                           ;doprnt.c: 1540: return 0;
  5155                           ;	Return value of _printf is never used
  5156                           
  5157                           ;doprnt.c: 1525: }
  5158                           ;doprnt.c: 1533: }
  5159                           ;doprnt.c: 1535: alldone:
  5160                           
  5161  0248  0008               	return
  5162  0249                     __end_of_printf:	
  5163                           
  5164                           	psect	text12
  5165  0D9F                     __ptext12:	
  5166 ;; *************** function _putch *****************
  5167 ;; Defined at:
  5168 ;;		line 160 in file "mcc_generated_files/eusart.c"
  5169 ;; Parameters:    Size  Location     Type
  5170 ;;  txData          1    wreg     unsigned char 
  5171 ;; Auto vars:     Size  Location     Type
  5172 ;;  txData          1    2[BANK0 ] unsigned char 
  5173 ;; Return value:  Size  Location     Type
  5174 ;;                  1    wreg      void 
  5175 ;; Registers used:
  5176 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5177 ;; Tracked objects:
  5178 ;;		On entry : 0/0
  5179 ;;		On exit  : 0/0
  5180 ;;		Unchanged: 0/0
  5181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5182 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5183 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5184 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5185 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5186 ;;Total ram usage:        1 bytes
  5187 ;; Hardware stack levels used:    1
  5188 ;; Hardware stack levels required when called:    6
  5189 ;; This function calls:
  5190 ;;		_EUSART_Write
  5191 ;; This function is called by:
  5192 ;;		_printf
  5193 ;; This function uses a non-reentrant model
  5194 ;;
  5195                           
  5196                           
  5197                           ;psect for function _putch
  5198  0D9F                     _putch:	
  5199                           
  5200                           ;incstack = 0
  5201                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5202                           ;putch@txData stored from wreg
  5203  0D9F  0020               	movlb	0	; select bank0
  5204  0DA0  00A2               	movwf	putch@txData
  5205                           
  5206                           ;eusart.c: 162: EUSART_Write(txData);
  5207  0DA1  0822               	movf	putch@txData,w
  5208  0DA2  318F  2788         	fcall	_EUSART_Write
  5209  0DA4  0008               	return
  5210  0DA5                     __end_of_putch:	
  5211                           
  5212                           	psect	text13
  5213  0F88                     __ptext13:	
  5214 ;; *************** function _EUSART_Write *****************
  5215 ;; Defined at:
  5216 ;;		line 132 in file "mcc_generated_files/eusart.c"
  5217 ;; Parameters:    Size  Location     Type
  5218 ;;  txData          1    wreg     unsigned char 
  5219 ;; Auto vars:     Size  Location     Type
  5220 ;;  txData          1    1[BANK0 ] unsigned char 
  5221 ;; Return value:  Size  Location     Type
  5222 ;;                  1    wreg      void 
  5223 ;; Registers used:
  5224 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5225 ;; Tracked objects:
  5226 ;;		On entry : 0/0
  5227 ;;		On exit  : 0/0
  5228 ;;		Unchanged: 0/0
  5229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5231 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5232 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5233 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5234 ;;Total ram usage:        2 bytes
  5235 ;; Hardware stack levels used:    1
  5236 ;; Hardware stack levels required when called:    5
  5237 ;; This function calls:
  5238 ;;		Nothing
  5239 ;; This function is called by:
  5240 ;;		_putch
  5241 ;; This function uses a non-reentrant model
  5242 ;;
  5243                           
  5244                           
  5245                           ;psect for function _EUSART_Write
  5246  0F88                     _EUSART_Write:	
  5247                           
  5248                           ;incstack = 0
  5249                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  5250                           ;EUSART_Write@txData stored from wreg
  5251  0F88  0020               	movlb	0	; select bank0
  5252  0F89  00A1               	movwf	EUSART_Write@txData
  5253  0F8A                     l2408:	
  5254                           ;eusart.c: 135: {
  5255                           
  5256                           ;eusart.c: 134: while(0 == eusartTxBufferRemaining)
  5257                           
  5258  0F8A  087A               	movf	_eusartTxBufferRemaining,w	;volatile
  5259  0F8B  1903               	btfsc	3,2
  5260  0F8C  2F8A               	goto	l2408
  5261                           
  5262                           ;eusart.c: 136: }
  5263                           ;eusart.c: 138: if(0 == PIE1bits.TXIE)
  5264  0F8D  0021               	movlb	1	; select bank1
  5265  0F8E  1A11               	btfsc	17,4	;volatile
  5266  0F8F  2F95               	goto	l224
  5267                           
  5268                           ;eusart.c: 139: {
  5269                           ;eusart.c: 140: TXREG = txData;
  5270  0F90  0020               	movlb	0	; select bank0
  5271  0F91  0821               	movf	EUSART_Write@txData,w
  5272  0F92  0023               	movlb	3	; select bank3
  5273  0F93  009A               	movwf	26	;volatile
  5274                           
  5275                           ;eusart.c: 141: }
  5276  0F94  2FA9               	goto	l2422
  5277  0F95                     l224:	
  5278                           
  5279                           ;eusart.c: 142: else
  5280                           ;eusart.c: 143: {
  5281                           ;eusart.c: 144: PIE1bits.TXIE = 0;
  5282  0F95  1211               	bcf	17,4	;volatile
  5283                           
  5284                           ;eusart.c: 145: eusartTxBuffer[eusartTxHead++] = txData;
  5285  0F96  0020               	movlb	0	; select bank0
  5286  0F97  0821               	movf	EUSART_Write@txData,w
  5287  0F98  00A0               	movwf	??_EUSART_Write
  5288  0F99  087C               	movf	_eusartTxHead,w
  5289  0F9A  3EA8               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  5290  0F9B  0086               	movwf	6
  5291  0F9C  0187               	clrf	7
  5292  0F9D  0820               	movf	??_EUSART_Write,w
  5293  0F9E  0081               	movwf	1
  5294  0F9F  3001               	movlw	1
  5295  0FA0  00A0               	movwf	??_EUSART_Write
  5296  0FA1  0820               	movf	??_EUSART_Write,w
  5297  0FA2  07FC               	addwf	_eusartTxHead,f	;volatile
  5298                           
  5299                           ;eusart.c: 146: if(sizeof(eusartTxBuffer) <= eusartTxHead)
  5300  0FA3  3008               	movlw	8
  5301  0FA4  027C               	subwf	_eusartTxHead,w	;volatile
  5302  0FA5  1803               	btfsc	3,0
  5303                           
  5304                           ;eusart.c: 147: {
  5305                           ;eusart.c: 148: eusartTxHead = 0;
  5306  0FA6  01FC               	clrf	_eusartTxHead	;volatile
  5307                           
  5308                           ;eusart.c: 149: }
  5309                           ;eusart.c: 150: eusartTxBufferRemaining--;
  5310  0FA7  3001               	movlw	1
  5311  0FA8  02FA               	subwf	_eusartTxBufferRemaining,f	;volatile
  5312  0FA9                     l2422:	
  5313                           
  5314                           ;eusart.c: 151: }
  5315                           ;eusart.c: 152: PIE1bits.TXIE = 1;
  5316  0FA9  0021               	movlb	1	; select bank1
  5317  0FAA  1611               	bsf	17,4	;volatile
  5318  0FAB  0008               	return
  5319  0FAC                     __end_of_EUSART_Write:	
  5320                           
  5321                           	psect	text14
  5322  0FD3                     __ptext14:	
  5323 ;; *************** function ___lwmod *****************
  5324 ;; Defined at:
  5325 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  5326 ;; Parameters:    Size  Location     Type
  5327 ;;  divisor         2    8[BANK0 ] unsigned int 
  5328 ;;  dividend        2   10[BANK0 ] unsigned int 
  5329 ;; Auto vars:     Size  Location     Type
  5330 ;;  counter         1   13[BANK0 ] unsigned char 
  5331 ;; Return value:  Size  Location     Type
  5332 ;;                  2    8[BANK0 ] unsigned int 
  5333 ;; Registers used:
  5334 ;;		wreg, status,2, status,0
  5335 ;; Tracked objects:
  5336 ;;		On entry : 0/0
  5337 ;;		On exit  : 0/0
  5338 ;;		Unchanged: 0/0
  5339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5340 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5341 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5342 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5343 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5344 ;;Total ram usage:        6 bytes
  5345 ;; Hardware stack levels used:    1
  5346 ;; Hardware stack levels required when called:    5
  5347 ;; This function calls:
  5348 ;;		Nothing
  5349 ;; This function is called by:
  5350 ;;		_printf
  5351 ;; This function uses a non-reentrant model
  5352 ;;
  5353                           
  5354                           
  5355                           ;psect for function ___lwmod
  5356  0FD3                     ___lwmod:	
  5357                           
  5358                           ;incstack = 0
  5359                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  5360  0FD3  0020               	movlb	0	; select bank0
  5361  0FD4  0828               	movf	___lwmod@divisor,w
  5362  0FD5  0429               	iorwf	___lwmod@divisor+1,w
  5363  0FD6  1903               	btfsc	3,2
  5364  0FD7  2FFB               	goto	l2496
  5365  0FD8  01AD               	clrf	___lwmod@counter
  5366  0FD9  0AAD               	incf	___lwmod@counter,f
  5367  0FDA                     l2486:	
  5368  0FDA  1BA9               	btfsc	___lwmod@divisor+1,7
  5369  0FDB  2FE6               	goto	l2488
  5370  0FDC  3001               	movlw	1
  5371  0FDD                     u1405:	
  5372  0FDD  35A8               	lslf	___lwmod@divisor,f
  5373  0FDE  0DA9               	rlf	___lwmod@divisor+1,f
  5374  0FDF  0B89               	decfsz	9,f
  5375  0FE0  2FDD               	goto	u1405
  5376  0FE1  3001               	movlw	1
  5377  0FE2  00AC               	movwf	??___lwmod
  5378  0FE3  082C               	movf	??___lwmod,w
  5379  0FE4  07AD               	addwf	___lwmod@counter,f
  5380  0FE5  2FDA               	goto	l2486
  5381  0FE6                     l2488:	
  5382  0FE6  0829               	movf	___lwmod@divisor+1,w
  5383  0FE7  022B               	subwf	___lwmod@dividend+1,w
  5384  0FE8  1D03               	skipz
  5385  0FE9  2FEC               	goto	u1425
  5386  0FEA  0828               	movf	___lwmod@divisor,w
  5387  0FEB  022A               	subwf	___lwmod@dividend,w
  5388  0FEC                     u1425:	
  5389  0FEC  1C03               	skipc
  5390  0FED  2FF2               	goto	l2492
  5391  0FEE  0828               	movf	___lwmod@divisor,w
  5392  0FEF  02AA               	subwf	___lwmod@dividend,f
  5393  0FF0  0829               	movf	___lwmod@divisor+1,w
  5394  0FF1  3BAB               	subwfb	___lwmod@dividend+1,f
  5395  0FF2                     l2492:	
  5396  0FF2  3001               	movlw	1
  5397  0FF3                     u1435:	
  5398  0FF3  36A9               	lsrf	___lwmod@divisor+1,f
  5399  0FF4  0CA8               	rrf	___lwmod@divisor,f
  5400  0FF5  0B89               	decfsz	9,f
  5401  0FF6  2FF3               	goto	u1435
  5402  0FF7  3001               	movlw	1
  5403  0FF8  02AD               	subwf	___lwmod@counter,f
  5404  0FF9  1D03               	btfss	3,2
  5405  0FFA  2FE6               	goto	l2488
  5406  0FFB                     l2496:	
  5407  0FFB  082B               	movf	___lwmod@dividend+1,w
  5408  0FFC  00A9               	movwf	?___lwmod+1
  5409  0FFD  082A               	movf	___lwmod@dividend,w
  5410  0FFE  00A8               	movwf	?___lwmod
  5411  0FFF  0008               	return
  5412  1000                     __end_of___lwmod:	
  5413                           
  5414                           	psect	text15
  5415  0785                     __ptext15:	
  5416 ;; *************** function ___lwdiv *****************
  5417 ;; Defined at:
  5418 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  5419 ;; Parameters:    Size  Location     Type
  5420 ;;  divisor         2    0[BANK0 ] unsigned int 
  5421 ;;  dividend        2    2[BANK0 ] unsigned int 
  5422 ;; Auto vars:     Size  Location     Type
  5423 ;;  quotient        2    5[BANK0 ] unsigned int 
  5424 ;;  counter         1    7[BANK0 ] unsigned char 
  5425 ;; Return value:  Size  Location     Type
  5426 ;;                  2    0[BANK0 ] unsigned int 
  5427 ;; Registers used:
  5428 ;;		wreg, status,2, status,0
  5429 ;; Tracked objects:
  5430 ;;		On entry : 0/0
  5431 ;;		On exit  : 0/0
  5432 ;;		Unchanged: 0/0
  5433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5434 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5435 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5436 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5437 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5438 ;;Total ram usage:        8 bytes
  5439 ;; Hardware stack levels used:    1
  5440 ;; Hardware stack levels required when called:    5
  5441 ;; This function calls:
  5442 ;;		Nothing
  5443 ;; This function is called by:
  5444 ;;		_printf
  5445 ;; This function uses a non-reentrant model
  5446 ;;
  5447                           
  5448                           
  5449                           ;psect for function ___lwdiv
  5450  0785                     ___lwdiv:	
  5451                           
  5452                           ;incstack = 0
  5453                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  5454  0785  0020               	movlb	0	; select bank0
  5455  0786  01A5               	clrf	___lwdiv@quotient
  5456  0787  01A6               	clrf	___lwdiv@quotient+1
  5457  0788  0820               	movf	___lwdiv@divisor,w
  5458  0789  0421               	iorwf	___lwdiv@divisor+1,w
  5459  078A  1903               	btfsc	3,2
  5460  078B  2FB5               	goto	l2474
  5461  078C  01A7               	clrf	___lwdiv@counter
  5462  078D  0AA7               	incf	___lwdiv@counter,f
  5463  078E                     l2462:	
  5464  078E  1BA1               	btfsc	___lwdiv@divisor+1,7
  5465  078F  2F9A               	goto	l2464
  5466  0790  3001               	movlw	1
  5467  0791                     u1335:	
  5468  0791  35A0               	lslf	___lwdiv@divisor,f
  5469  0792  0DA1               	rlf	___lwdiv@divisor+1,f
  5470  0793  0B89               	decfsz	9,f
  5471  0794  2F91               	goto	u1335
  5472  0795  3001               	movlw	1
  5473  0796  00A4               	movwf	??___lwdiv
  5474  0797  0824               	movf	??___lwdiv,w
  5475  0798  07A7               	addwf	___lwdiv@counter,f
  5476  0799  2F8E               	goto	l2462
  5477  079A                     l2464:	
  5478  079A  3001               	movlw	1
  5479  079B                     u1355:	
  5480  079B  35A5               	lslf	___lwdiv@quotient,f
  5481  079C  0DA6               	rlf	___lwdiv@quotient+1,f
  5482  079D  0B89               	decfsz	9,f
  5483  079E  2F9B               	goto	u1355
  5484  079F  0821               	movf	___lwdiv@divisor+1,w
  5485  07A0  0223               	subwf	___lwdiv@dividend+1,w
  5486  07A1  1D03               	skipz
  5487  07A2  2FA5               	goto	u1365
  5488  07A3  0820               	movf	___lwdiv@divisor,w
  5489  07A4  0222               	subwf	___lwdiv@dividend,w
  5490  07A5                     u1365:	
  5491  07A5  1C03               	skipc
  5492  07A6  2FAC               	goto	l2470
  5493  07A7  0820               	movf	___lwdiv@divisor,w
  5494  07A8  02A2               	subwf	___lwdiv@dividend,f
  5495  07A9  0821               	movf	___lwdiv@divisor+1,w
  5496  07AA  3BA3               	subwfb	___lwdiv@dividend+1,f
  5497  07AB  1425               	bsf	___lwdiv@quotient,0
  5498  07AC                     l2470:	
  5499  07AC  3001               	movlw	1
  5500  07AD                     u1375:	
  5501  07AD  36A1               	lsrf	___lwdiv@divisor+1,f
  5502  07AE  0CA0               	rrf	___lwdiv@divisor,f
  5503  07AF  0B89               	decfsz	9,f
  5504  07B0  2FAD               	goto	u1375
  5505  07B1  3001               	movlw	1
  5506  07B2  02A7               	subwf	___lwdiv@counter,f
  5507  07B3  1D03               	btfss	3,2
  5508  07B4  2F9A               	goto	l2464
  5509  07B5                     l2474:	
  5510  07B5  0826               	movf	___lwdiv@quotient+1,w
  5511  07B6  00A1               	movwf	?___lwdiv+1
  5512  07B7  0825               	movf	___lwdiv@quotient,w
  5513  07B8  00A0               	movwf	?___lwdiv
  5514  07B9  0008               	return
  5515  07BA                     __end_of___lwdiv:	
  5516                           
  5517                           	psect	text16
  5518  0E64                     __ptext16:	
  5519 ;; *************** function _PROTOCOL_I2C_Set_TLV *****************
  5520 ;; Defined at:
  5521 ;;		line 213 in file "protocol.c"
  5522 ;; Parameters:    Size  Location     Type
  5523 ;;  type            1    wreg     unsigned char 
  5524 ;;  length          1    0[BANK0 ] unsigned char 
  5525 ;;  pbuffer         1    1[BANK0 ] PTR unsigned char 
  5526 ;;		 -> PROTOCOL_Send_uint8_t@pbuf(1), sendbuf(16), position(6), 
  5527 ;; Auto vars:     Size  Location     Type
  5528 ;;  type            1    3[BANK0 ] unsigned char 
  5529 ;;  status          1    4[BANK0 ] enum E3411
  5530 ;; Return value:  Size  Location     Type
  5531 ;;                  1    wreg      void 
  5532 ;; Registers used:
  5533 ;;		wreg, status,2, status,0
  5534 ;; Tracked objects:
  5535 ;;		On entry : 0/0
  5536 ;;		On exit  : 0/0
  5537 ;;		Unchanged: 0/0
  5538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5539 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5540 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5541 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5542 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5543 ;;Total ram usage:        5 bytes
  5544 ;; Hardware stack levels used:    1
  5545 ;; Hardware stack levels required when called:    5
  5546 ;; This function calls:
  5547 ;;		Nothing
  5548 ;; This function is called by:
  5549 ;;		_PROTOCOL_I2C_Send_uint8_t
  5550 ;; This function uses a non-reentrant model
  5551 ;;
  5552                           
  5553                           
  5554                           ;psect for function _PROTOCOL_I2C_Set_TLV
  5555  0E64                     _PROTOCOL_I2C_Set_TLV:	
  5556                           
  5557                           ;incstack = 0
  5558                           ; Regs used in _PROTOCOL_I2C_Set_TLV: [wreg+status,2+status,0]
  5559                           ;PROTOCOL_I2C_Set_TLV@type stored from wreg
  5560  0E64  0020               	movlb	0	; select bank0
  5561  0E65  00A3               	movwf	PROTOCOL_I2C_Set_TLV@type
  5562                           
  5563                           ;protocol.c: 214: READBUF_STATUS status = readbuf.status;
  5564  0E66  086A               	movf	_readbuf+3,w
  5565  0E67  00A2               	movwf	??_PROTOCOL_I2C_Set_TLV
  5566  0E68  0822               	movf	??_PROTOCOL_I2C_Set_TLV,w
  5567  0E69  00A4               	movwf	PROTOCOL_I2C_Set_TLV@status
  5568                           
  5569                           ;protocol.c: 215: if (status == COMPLETE) {
  5570  0E6A  3003               	movlw	3
  5571  0E6B  0624               	xorwf	PROTOCOL_I2C_Set_TLV@status,w
  5572  0E6C  1D03               	btfss	3,2
  5573  0E6D  0008               	return
  5574                           
  5575                           ;protocol.c: 216: readbuf.type = type;
  5576  0E6E  0823               	movf	PROTOCOL_I2C_Set_TLV@type,w
  5577  0E6F  00A2               	movwf	??_PROTOCOL_I2C_Set_TLV
  5578  0E70  0822               	movf	??_PROTOCOL_I2C_Set_TLV,w
  5579  0E71  00E7               	movwf	_readbuf
  5580                           
  5581                           ;protocol.c: 217: readbuf.length = length;
  5582  0E72  0820               	movf	PROTOCOL_I2C_Set_TLV@length,w
  5583  0E73  00A2               	movwf	??_PROTOCOL_I2C_Set_TLV
  5584  0E74  0822               	movf	??_PROTOCOL_I2C_Set_TLV,w
  5585  0E75  00E8               	movwf	_readbuf+1
  5586                           
  5587                           ;protocol.c: 218: readbuf.pbuffer = pbuffer;
  5588  0E76  0821               	movf	PROTOCOL_I2C_Set_TLV@pbuffer,w
  5589  0E77  00A2               	movwf	??_PROTOCOL_I2C_Set_TLV
  5590  0E78  0822               	movf	??_PROTOCOL_I2C_Set_TLV,w
  5591  0E79  00E9               	movwf	low ((_readbuf| 0+2))
  5592                           
  5593                           ;protocol.c: 219: readbuf.buf_cnt = 0;
  5594  0E7A  01EB               	clrf	_readbuf+4
  5595                           
  5596                           ;protocol.c: 220: readbuf.status = TLV_SET;
  5597  0E7B  01EA               	clrf	_readbuf+3
  5598  0E7C  0008               	return
  5599  0E7D                     __end_of_PROTOCOL_I2C_Set_TLV:	
  5600                           
  5601                           	psect	text17
  5602  0D7B                     __ptext17:	
  5603 ;; *************** function _ADC_StartConversion *****************
  5604 ;; Defined at:
  5605 ;;		line 90 in file "mcc_generated_files/adc.c"
  5606 ;; Parameters:    Size  Location     Type
  5607 ;;		None
  5608 ;; Auto vars:     Size  Location     Type
  5609 ;;		None
  5610 ;; Return value:  Size  Location     Type
  5611 ;;                  1    wreg      void 
  5612 ;; Registers used:
  5613 ;;		None
  5614 ;; Tracked objects:
  5615 ;;		On entry : 0/0
  5616 ;;		On exit  : 0/0
  5617 ;;		Unchanged: 0/0
  5618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5620 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5622 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5623 ;;Total ram usage:        0 bytes
  5624 ;; Hardware stack levels used:    1
  5625 ;; Hardware stack levels required when called:    5
  5626 ;; This function calls:
  5627 ;;		Nothing
  5628 ;; This function is called by:
  5629 ;;		_loop_func
  5630 ;; This function uses a non-reentrant model
  5631 ;;
  5632                           
  5633                           
  5634                           ;psect for function _ADC_StartConversion
  5635  0D7B                     _ADC_StartConversion:	
  5636                           
  5637                           ;adc.c: 93: ADCON0bits.GO_nDONE = 1;
  5638                           
  5639                           ;incstack = 0
  5640                           ; Regs used in _ADC_StartConversion: []
  5641  0D7B  0021               	movlb	1	; select bank1
  5642  0D7C  149D               	bsf	29,1	;volatile
  5643  0D7D  0008               	return
  5644  0D7E                     __end_of_ADC_StartConversion:	
  5645                           
  5646                           	psect	text18
  5647  07EE                     __ptext18:	
  5648 ;; *************** function _ADC_SelectChannel *****************
  5649 ;; Defined at:
  5650 ;;		line 82 in file "mcc_generated_files/adc.c"
  5651 ;; Parameters:    Size  Location     Type
  5652 ;;  channel         1    wreg     enum E2975
  5653 ;; Auto vars:     Size  Location     Type
  5654 ;;  channel         1    1[BANK0 ] enum E2975
  5655 ;; Return value:  Size  Location     Type
  5656 ;;                  1    wreg      void 
  5657 ;; Registers used:
  5658 ;;		wreg, status,2, status,0
  5659 ;; Tracked objects:
  5660 ;;		On entry : 0/0
  5661 ;;		On exit  : 0/0
  5662 ;;		Unchanged: 0/0
  5663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5665 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5666 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5667 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5668 ;;Total ram usage:        2 bytes
  5669 ;; Hardware stack levels used:    1
  5670 ;; Hardware stack levels required when called:    5
  5671 ;; This function calls:
  5672 ;;		Nothing
  5673 ;; This function is called by:
  5674 ;;		_loop_func
  5675 ;; This function uses a non-reentrant model
  5676 ;;
  5677                           
  5678                           
  5679                           ;psect for function _ADC_SelectChannel
  5680  07EE                     _ADC_SelectChannel:	
  5681                           
  5682                           ;incstack = 0
  5683                           ; Regs used in _ADC_SelectChannel: [wreg+status,2+status,0]
  5684                           ;ADC_SelectChannel@channel stored from wreg
  5685  07EE  0020               	movlb	0	; select bank0
  5686  07EF  00A1               	movwf	ADC_SelectChannel@channel
  5687                           
  5688                           ;adc.c: 85: ADCON0bits.CHS = channel;
  5689  07F0  0821               	movf	ADC_SelectChannel@channel,w
  5690  07F1  00A0               	movwf	??_ADC_SelectChannel
  5691  07F2  0DA0               	rlf	??_ADC_SelectChannel,f
  5692  07F3  0DA0               	rlf	??_ADC_SelectChannel,f
  5693  07F4  0021               	movlb	1	; select bank1
  5694  07F5  081D               	movf	29,w	;volatile
  5695  07F6  0020               	movlb	0	; select bank0
  5696  07F7  0620               	xorwf	??_ADC_SelectChannel,w
  5697  07F8  3983               	andlw	-125
  5698  07F9  0620               	xorwf	??_ADC_SelectChannel,w
  5699  07FA  0021               	movlb	1	; select bank1
  5700  07FB  009D               	movwf	29	;volatile
  5701                           
  5702                           ;adc.c: 87: ADCON0bits.ADON = 1;
  5703  07FC  141D               	bsf	29,0	;volatile
  5704  07FD  0008               	return
  5705  07FE                     __end_of_ADC_SelectChannel:	
  5706                           
  5707                           	psect	text19
  5708  0DBF                     __ptext19:	
  5709 ;; *************** function _ADC_IsConversionDone *****************
  5710 ;; Defined at:
  5711 ;;		line 97 in file "mcc_generated_files/adc.c"
  5712 ;; Parameters:    Size  Location     Type
  5713 ;;		None
  5714 ;; Auto vars:     Size  Location     Type
  5715 ;;		None
  5716 ;; Return value:  Size  Location     Type
  5717 ;;                  1    wreg      unsigned char 
  5718 ;; Registers used:
  5719 ;;		wreg, status,0
  5720 ;; Tracked objects:
  5721 ;;		On entry : 0/0
  5722 ;;		On exit  : 0/0
  5723 ;;		Unchanged: 0/0
  5724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5726 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5728 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5729 ;;Total ram usage:        0 bytes
  5730 ;; Hardware stack levels used:    1
  5731 ;; Hardware stack levels required when called:    5
  5732 ;; This function calls:
  5733 ;;		Nothing
  5734 ;; This function is called by:
  5735 ;;		_loop_func
  5736 ;; This function uses a non-reentrant model
  5737 ;;
  5738                           
  5739                           
  5740                           ;psect for function _ADC_IsConversionDone
  5741  0DBF                     _ADC_IsConversionDone:	
  5742                           
  5743                           ;adc.c: 100: return (!ADCON0bits.GO_nDONE);
  5744                           
  5745                           ;incstack = 0
  5746                           ; Regs used in _ADC_IsConversionDone: [wreg+status,0]
  5747  0DBF  1003               	clrc
  5748  0DC0  0021               	movlb	1	; select bank1
  5749  0DC1  1C9D               	btfss	29,1	;volatile
  5750  0DC2  1403               	setc
  5751  0DC3  3000               	movlw	0
  5752  0DC4  3D09               	addwfc	9,w
  5753  0DC5  0008               	return
  5754  0DC6                     __end_of_ADC_IsConversionDone:	
  5755                           
  5756                           	psect	text20
  5757  0DE8                     __ptext20:	
  5758 ;; *************** function _ADC_GetConversionResult *****************
  5759 ;; Defined at:
  5760 ;;		line 103 in file "mcc_generated_files/adc.c"
  5761 ;; Parameters:    Size  Location     Type
  5762 ;;		None
  5763 ;; Auto vars:     Size  Location     Type
  5764 ;;		None
  5765 ;; Return value:  Size  Location     Type
  5766 ;;                  2    0[BANK0 ] unsigned int 
  5767 ;; Registers used:
  5768 ;;		wreg
  5769 ;; Tracked objects:
  5770 ;;		On entry : 0/0
  5771 ;;		On exit  : 0/0
  5772 ;;		Unchanged: 0/0
  5773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5774 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5777 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5778 ;;Total ram usage:        2 bytes
  5779 ;; Hardware stack levels used:    1
  5780 ;; Hardware stack levels required when called:    5
  5781 ;; This function calls:
  5782 ;;		Nothing
  5783 ;; This function is called by:
  5784 ;;		_loop_func
  5785 ;; This function uses a non-reentrant model
  5786 ;;
  5787                           
  5788                           
  5789                           ;psect for function _ADC_GetConversionResult
  5790  0DE8                     _ADC_GetConversionResult:	
  5791                           
  5792                           ;adc.c: 106: return ((ADRESH << 8) + ADRESL);
  5793                           
  5794                           ;incstack = 0
  5795                           ; Regs used in _ADC_GetConversionResult: [wreg]
  5796  0DE8  0021               	movlb	1	; select bank1
  5797  0DE9  081C               	movf	28,w	;volatile
  5798  0DEA  0020               	movlb	0	; select bank0
  5799  0DEB  00A1               	movwf	?_ADC_GetConversionResult+1
  5800  0DEC  0021               	movlb	1	; select bank1
  5801  0DED  081B               	movf	27,w	;volatile
  5802  0DEE  0020               	movlb	0	; select bank0
  5803  0DEF  00A0               	movwf	?_ADC_GetConversionResult
  5804  0DF0  0008               	return
  5805  0DF1                     __end_of_ADC_GetConversionResult:	
  5806                           
  5807                           	psect	text21
  5808  0607                     __ptext21:	
  5809 ;; *************** function _atoi *****************
  5810 ;; Defined at:
  5811 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\atoi.c"
  5812 ;; Parameters:    Size  Location     Type
  5813 ;;  s               1    wreg     PTR const unsigned char 
  5814 ;;		 -> buf(48), 
  5815 ;; Auto vars:     Size  Location     Type
  5816 ;;  s               1   13[BANK0 ] PTR const unsigned char 
  5817 ;;		 -> buf(48), 
  5818 ;;  a               2   11[BANK0 ] int 
  5819 ;;  sign            1   10[BANK0 ] unsigned char 
  5820 ;; Return value:  Size  Location     Type
  5821 ;;                  2    6[BANK0 ] int 
  5822 ;; Registers used:
  5823 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5824 ;; Tracked objects:
  5825 ;;		On entry : 0/0
  5826 ;;		On exit  : 0/0
  5827 ;;		Unchanged: 0/0
  5828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5829 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5830 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5831 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5832 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5833 ;;Total ram usage:        8 bytes
  5834 ;; Hardware stack levels used:    1
  5835 ;; Hardware stack levels required when called:    6
  5836 ;; This function calls:
  5837 ;;		___wmul
  5838 ;;		_isdigit
  5839 ;; This function is called by:
  5840 ;;		_PROTOCOL_Loop
  5841 ;; This function uses a non-reentrant model
  5842 ;;
  5843                           
  5844                           
  5845                           ;psect for function _atoi
  5846  0607                     _atoi:	
  5847                           
  5848                           ;incstack = 0
  5849                           ; Regs used in _atoi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5850                           ;atoi@s stored from wreg
  5851  0607  0020               	movlb	0	; select bank0
  5852  0608  00AD               	movwf	atoi@s
  5853  0609                     l3012:	
  5854  0609  082D               	movf	atoi@s,w
  5855  060A  0086               	movwf	6
  5856  060B  3001               	movlw	1	; select bank2/3
  5857  060C  0087               	movwf	7
  5858  060D  3020               	movlw	32
  5859  060E  0601               	xorwf	1,w
  5860  060F  1D03               	btfss	3,2
  5861  0610  2E16               	goto	l3014
  5862  0611                     l3010:	
  5863  0611  3001               	movlw	1
  5864  0612  00A8               	movwf	??_atoi
  5865  0613  0828               	movf	??_atoi,w
  5866  0614  07AD               	addwf	atoi@s,f
  5867  0615  2E09               	goto	l3012
  5868  0616                     l3014:	
  5869  0616  082D               	movf	atoi@s,w
  5870  0617  0086               	movwf	6
  5871  0618  3001               	movlw	1	; select bank2/3
  5872  0619  0087               	movwf	7
  5873  061A  3009               	movlw	9
  5874  061B  0601               	xorwf	1,w
  5875  061C  1903               	btfsc	3,2
  5876  061D  2E11               	goto	l3010
  5877  061E  01AB               	clrf	atoi@a
  5878  061F  01AC               	clrf	atoi@a+1
  5879  0620  01AA               	clrf	atoi@sign
  5880  0621  082D               	movf	atoi@s,w
  5881  0622  0086               	movwf	6
  5882  0623  3001               	movlw	1	; select bank2/3
  5883  0624  0087               	movwf	7
  5884  0625  302D               	movlw	45
  5885  0626  0601               	xorwf	1,w
  5886  0627  1D03               	btfss	3,2
  5887  0628  2E2E               	goto	l3022
  5888  0629  3001               	movlw	1
  5889  062A  00A8               	movwf	??_atoi
  5890  062B  0828               	movf	??_atoi,w
  5891  062C  07AA               	addwf	atoi@sign,f
  5892  062D  2E36               	goto	l3028
  5893  062E                     l3022:	
  5894  062E  082D               	movf	atoi@s,w
  5895  062F  0086               	movwf	6
  5896  0630  3001               	movlw	1	; select bank2/3
  5897  0631  0087               	movwf	7
  5898  0632  302B               	movlw	43
  5899  0633  0601               	xorwf	1,w
  5900  0634  1D03               	btfss	3,2
  5901  0635  2E3A               	goto	l3030
  5902  0636                     l3028:	
  5903  0636  3001               	movlw	1
  5904  0637  00A8               	movwf	??_atoi
  5905  0638  0828               	movf	??_atoi,w
  5906  0639  07AD               	addwf	atoi@s,f
  5907  063A                     l3030:	
  5908  063A  082D               	movf	atoi@s,w
  5909  063B  0086               	movwf	6
  5910  063C  3001               	movlw	1	; select bank2/3
  5911  063D  0087               	movwf	7
  5912  063E  0801               	movf	1,w
  5913  063F  318E  2646  3186   	fcall	_isdigit
  5914  0642  1C03               	btfss	3,0
  5915  0643  2E63               	goto	l3032
  5916  0644  0020               	movlb	0	; select bank0
  5917  0645  082C               	movf	atoi@a+1,w
  5918  0646  00A1               	movwf	___wmul@multiplier+1
  5919  0647  082B               	movf	atoi@a,w
  5920  0648  00A0               	movwf	___wmul@multiplier
  5921  0649  300A               	movlw	10
  5922  064A  00A2               	movwf	___wmul@multiplicand
  5923  064B  3000               	movlw	0
  5924  064C  00A3               	movwf	___wmul@multiplicand+1
  5925  064D  318E  26CD  3186   	fcall	___wmul
  5926  0650  0020               	movlb	0	; select bank0
  5927  0651  082D               	movf	atoi@s,w
  5928  0652  0086               	movwf	6
  5929  0653  3001               	movlw	1	; select bank2/3
  5930  0654  0087               	movwf	7
  5931  0655  0801               	movf	1,w
  5932  0656  0720               	addwf	?___wmul,w
  5933  0657  00A8               	movwf	??_atoi
  5934  0658  0821               	movf	?___wmul+1,w
  5935  0659  1803               	skipnc
  5936  065A  0A21               	incf	?___wmul+1,w
  5937  065B  00A9               	movwf	??_atoi+1
  5938  065C  0828               	movf	??_atoi,w
  5939  065D  3ED0               	addlw	208
  5940  065E  00AB               	movwf	atoi@a
  5941  065F  30FF               	movlw	255
  5942  0660  3D29               	addwfc	??_atoi+1,w
  5943  0661  00AC               	movwf	atoi@a+1
  5944  0662  2E36               	goto	l3028
  5945  0663                     l3032:	
  5946  0663  0020               	movlb	0	; select bank0
  5947  0664  082A               	movf	atoi@sign,w
  5948  0665  1903               	btfsc	3,2
  5949  0666  2E73               	goto	l3038
  5950  0667  092B               	comf	atoi@a,w
  5951  0668  00A8               	movwf	??_atoi
  5952  0669  092C               	comf	atoi@a+1,w
  5953  066A  00A9               	movwf	??_atoi+1
  5954  066B  0AA8               	incf	??_atoi,f
  5955  066C  1903               	skipnz
  5956  066D  0AA9               	incf	??_atoi+1,f
  5957  066E  0828               	movf	??_atoi,w
  5958  066F  00A6               	movwf	?_atoi
  5959  0670  0829               	movf	??_atoi+1,w
  5960  0671  00A7               	movwf	?_atoi+1
  5961  0672  0008               	return
  5962  0673                     l3038:	
  5963  0673  082C               	movf	atoi@a+1,w
  5964  0674  00A7               	movwf	?_atoi+1
  5965  0675  082B               	movf	atoi@a,w
  5966  0676  00A6               	movwf	?_atoi
  5967  0677  0008               	return
  5968  0678                     __end_of_atoi:	
  5969                           
  5970                           	psect	text22
  5971  0E46                     __ptext22:	
  5972 ;; *************** function _isdigit *****************
  5973 ;; Defined at:
  5974 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  5975 ;; Parameters:    Size  Location     Type
  5976 ;;  c               1    wreg     unsigned char 
  5977 ;; Auto vars:     Size  Location     Type
  5978 ;;  c               1    1[BANK0 ] unsigned char 
  5979 ;; Return value:  Size  Location     Type
  5980 ;;		None               void
  5981 ;; Registers used:
  5982 ;;		wreg, status,2, status,0
  5983 ;; Tracked objects:
  5984 ;;		On entry : 0/0
  5985 ;;		On exit  : 0/0
  5986 ;;		Unchanged: 0/0
  5987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5989 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5990 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5991 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5992 ;;Total ram usage:        2 bytes
  5993 ;; Hardware stack levels used:    1
  5994 ;; Hardware stack levels required when called:    5
  5995 ;; This function calls:
  5996 ;;		Nothing
  5997 ;; This function is called by:
  5998 ;;		_printf
  5999 ;;		_atoi
  6000 ;; This function uses a non-reentrant model
  6001 ;;
  6002                           
  6003                           
  6004                           ;psect for function _isdigit
  6005  0E46                     _isdigit:	
  6006                           
  6007                           ;incstack = 0
  6008                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  6009                           ;isdigit@c stored from wreg
  6010  0E46  0020               	movlb	0	; select bank0
  6011  0E47  00A1               	movwf	isdigit@c
  6012  0E48  01A0               	clrf	_isdigit$1266
  6013  0E49  303A               	movlw	58
  6014  0E4A  0221               	subwf	isdigit@c,w
  6015  0E4B  1803               	skipnc
  6016  0E4C  2E53               	goto	l2434
  6017  0E4D  3030               	movlw	48
  6018  0E4E  0221               	subwf	isdigit@c,w
  6019  0E4F  1C03               	skipc
  6020  0E50  2E53               	goto	l2434
  6021  0E51  01A0               	clrf	_isdigit$1266
  6022  0E52  0AA0               	incf	_isdigit$1266,f
  6023  0E53                     l2434:	
  6024  0E53  0C20               	rrf	_isdigit$1266,w
  6025  0E54  0008               	return
  6026  0E55                     __end_of_isdigit:	
  6027                           
  6028                           	psect	text23
  6029  0ECD                     __ptext23:	
  6030 ;; *************** function ___wmul *****************
  6031 ;; Defined at:
  6032 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  6033 ;; Parameters:    Size  Location     Type
  6034 ;;  multiplier      2    0[BANK0 ] unsigned int 
  6035 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  6036 ;; Auto vars:     Size  Location     Type
  6037 ;;  product         2    4[BANK0 ] unsigned int 
  6038 ;; Return value:  Size  Location     Type
  6039 ;;                  2    0[BANK0 ] unsigned int 
  6040 ;; Registers used:
  6041 ;;		wreg, status,2, status,0
  6042 ;; Tracked objects:
  6043 ;;		On entry : 0/0
  6044 ;;		On exit  : 0/0
  6045 ;;		Unchanged: 0/0
  6046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6047 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6048 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6050 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6051 ;;Total ram usage:        6 bytes
  6052 ;; Hardware stack levels used:    1
  6053 ;; Hardware stack levels required when called:    5
  6054 ;; This function calls:
  6055 ;;		Nothing
  6056 ;; This function is called by:
  6057 ;;		_printf
  6058 ;;		_atoi
  6059 ;; This function uses a non-reentrant model
  6060 ;;
  6061                           
  6062                           
  6063                           ;psect for function ___wmul
  6064  0ECD                     ___wmul:	
  6065                           
  6066                           ;incstack = 0
  6067                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6068  0ECD  0020               	movlb	0	; select bank0
  6069  0ECE  01A4               	clrf	___wmul@product
  6070  0ECF  01A5               	clrf	___wmul@product+1
  6071  0ED0                     l2440:	
  6072  0ED0  1C20               	btfss	___wmul@multiplier,0
  6073  0ED1  2ED6               	goto	l935
  6074  0ED2  0822               	movf	___wmul@multiplicand,w
  6075  0ED3  07A4               	addwf	___wmul@product,f
  6076  0ED4  0823               	movf	___wmul@multiplicand+1,w
  6077  0ED5  3DA5               	addwfc	___wmul@product+1,f
  6078  0ED6                     l935:	
  6079  0ED6  3001               	movlw	1
  6080  0ED7                     u1295:	
  6081  0ED7  35A2               	lslf	___wmul@multiplicand,f
  6082  0ED8  0DA3               	rlf	___wmul@multiplicand+1,f
  6083  0ED9  0B89               	decfsz	9,f
  6084  0EDA  2ED7               	goto	u1295
  6085  0EDB  3001               	movlw	1
  6086  0EDC                     u1305:	
  6087  0EDC  36A1               	lsrf	___wmul@multiplier+1,f
  6088  0EDD  0CA0               	rrf	___wmul@multiplier,f
  6089  0EDE  0B89               	decfsz	9,f
  6090  0EDF  2EDC               	goto	u1305
  6091  0EE0  0820               	movf	___wmul@multiplier,w
  6092  0EE1  0421               	iorwf	___wmul@multiplier+1,w
  6093  0EE2  1D03               	btfss	3,2
  6094  0EE3  2ED0               	goto	l2440
  6095  0EE4  0825               	movf	___wmul@product+1,w
  6096  0EE5  00A1               	movwf	?___wmul+1
  6097  0EE6  0824               	movf	___wmul@product,w
  6098  0EE7  00A0               	movwf	?___wmul
  6099  0EE8  0008               	return
  6100  0EE9                     __end_of___wmul:	
  6101                           
  6102                           	psect	text24
  6103  0D8E                     __ptext24:	
  6104 ;; *************** function _TMR0_HasOverflowOccured *****************
  6105 ;; Defined at:
  6106 ;;		line 101 in file "mcc_generated_files/tmr0.c"
  6107 ;; Parameters:    Size  Location     Type
  6108 ;;		None
  6109 ;; Auto vars:     Size  Location     Type
  6110 ;;		None
  6111 ;; Return value:  Size  Location     Type
  6112 ;;                  1    wreg      unsigned char 
  6113 ;; Registers used:
  6114 ;;		wreg, status,2, status,0
  6115 ;; Tracked objects:
  6116 ;;		On entry : 0/0
  6117 ;;		On exit  : 0/0
  6118 ;;		Unchanged: 0/0
  6119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6121 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6123 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6124 ;;Total ram usage:        0 bytes
  6125 ;; Hardware stack levels used:    1
  6126 ;; Hardware stack levels required when called:    5
  6127 ;; This function calls:
  6128 ;;		Nothing
  6129 ;; This function is called by:
  6130 ;;		_PROTOCOL_Loop
  6131 ;; This function uses a non-reentrant model
  6132 ;;
  6133                           
  6134                           
  6135                           ;psect for function _TMR0_HasOverflowOccured
  6136  0D8E                     _TMR0_HasOverflowOccured:	
  6137                           
  6138                           ;tmr0.c: 104: return(INTCONbits.TMR0IF);
  6139                           
  6140                           ;incstack = 0
  6141                           ; Regs used in _TMR0_HasOverflowOccured: [wreg+status,2+status,0]
  6142  0D8E  0C0B               	rrf	11,w	;volatile
  6143  0D8F  0C89               	rrf	9,f
  6144  0D90  3901               	andlw	1
  6145  0D91  0008               	return
  6146  0D92                     __end_of_TMR0_HasOverflowOccured:	
  6147                           
  6148                           	psect	text25
  6149  0E37                     __ptext25:	
  6150 ;; *************** function _PROTOCOL_Write_Device_Address *****************
  6151 ;; Defined at:
  6152 ;;		line 89 in file "protocol.c"
  6153 ;; Parameters:    Size  Location     Type
  6154 ;;  device_id_i2    1    wreg     unsigned char 
  6155 ;; Auto vars:     Size  Location     Type
  6156 ;;  device_id_i2    1    4[BANK0 ] unsigned char 
  6157 ;; Return value:  Size  Location     Type
  6158 ;;                  1    wreg      void 
  6159 ;; Registers used:
  6160 ;;		wreg, status,2, status,0, pclath, cstack
  6161 ;; Tracked objects:
  6162 ;;		On entry : 0/0
  6163 ;;		On exit  : 0/0
  6164 ;;		Unchanged: 0/0
  6165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6166 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6167 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6168 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6169 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6170 ;;Total ram usage:        2 bytes
  6171 ;; Hardware stack levels used:    1
  6172 ;; Hardware stack levels required when called:    6
  6173 ;; This function calls:
  6174 ;;		_DATAEE_WriteByte
  6175 ;; This function is called by:
  6176 ;;		_PROTOCOL_Loop
  6177 ;; This function uses a non-reentrant model
  6178 ;;
  6179                           
  6180                           
  6181                           ;psect for function _PROTOCOL_Write_Device_Address
  6182  0E37                     _PROTOCOL_Write_Device_Address:	
  6183                           
  6184                           ;incstack = 0
  6185                           ; Regs used in _PROTOCOL_Write_Device_Address: [wreg+status,2+status,0+pclath+cstack]
  6186                           ;PROTOCOL_Write_Device_Address@device_id_i2c stored from wreg
  6187  0E37  0020               	movlb	0	; select bank0
  6188  0E38  00A4               	movwf	PROTOCOL_Write_Device_Address@device_id_i2c
  6189                           
  6190                           ;protocol.c: 90: DATAEE_WriteByte(0, device_id_i2c);
  6191  0E39  0824               	movf	PROTOCOL_Write_Device_Address@device_id_i2c,w
  6192  0E3A  00A3               	movwf	??_PROTOCOL_Write_Device_Address
  6193  0E3B  0823               	movf	??_PROTOCOL_Write_Device_Address,w
  6194  0E3C  00A0               	movwf	DATAEE_WriteByte@bData
  6195  0E3D  3000               	movlw	0
  6196  0E3E  318F  2765         	fcall	_DATAEE_WriteByte
  6197                           
  6198                           ;protocol.c: 91: slave_address = device_id_i2c;
  6199  0E40  0020               	movlb	0	; select bank0
  6200  0E41  0824               	movf	PROTOCOL_Write_Device_Address@device_id_i2c,w
  6201  0E42  00A3               	movwf	??_PROTOCOL_Write_Device_Address
  6202  0E43  0823               	movf	??_PROTOCOL_Write_Device_Address,w
  6203  0E44  00DE               	movwf	_slave_address
  6204  0E45  0008               	return
  6205  0E46                     __end_of_PROTOCOL_Write_Device_Address:	
  6206                           
  6207                           	psect	text26
  6208  0D78                     __ptext26:	
  6209 ;; *************** function _PROTOCOL_STP *****************
  6210 ;; Defined at:
  6211 ;;		line 103 in file "protocol.c"
  6212 ;; Parameters:    Size  Location     Type
  6213 ;;		None
  6214 ;; Auto vars:     Size  Location     Type
  6215 ;;		None
  6216 ;; Return value:  Size  Location     Type
  6217 ;;                  1    wreg      void 
  6218 ;; Registers used:
  6219 ;;		wreg, status,2, status,0
  6220 ;; Tracked objects:
  6221 ;;		On entry : 0/0
  6222 ;;		On exit  : 0/0
  6223 ;;		Unchanged: 0/0
  6224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6226 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6228 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6229 ;;Total ram usage:        0 bytes
  6230 ;; Hardware stack levels used:    1
  6231 ;; Hardware stack levels required when called:    5
  6232 ;; This function calls:
  6233 ;;		Nothing
  6234 ;; This function is called by:
  6235 ;;		_PROTOCOL_Loop
  6236 ;; This function uses a non-reentrant model
  6237 ;;
  6238                           
  6239                           
  6240                           ;psect for function _PROTOCOL_STP
  6241  0D78                     _PROTOCOL_STP:	
  6242                           
  6243                           ;protocol.c: 105: running = 0;
  6244                           
  6245                           ;incstack = 0
  6246                           ; Regs used in _PROTOCOL_STP: [wreg+status,2+status,0]
  6247  0D78  0020               	movlb	0	; select bank0
  6248  0D79  01DA               	clrf	_running
  6249  0D7A  0008               	return
  6250  0D7B                     __end_of_PROTOCOL_STP:	
  6251                           
  6252                           	psect	text27
  6253  0D8A                     __ptext27:	
  6254 ;; *************** function _PROTOCOL_STA *****************
  6255 ;; Defined at:
  6256 ;;		line 98 in file "protocol.c"
  6257 ;; Parameters:    Size  Location     Type
  6258 ;;		None
  6259 ;; Auto vars:     Size  Location     Type
  6260 ;;		None
  6261 ;; Return value:  Size  Location     Type
  6262 ;;                  1    wreg      void 
  6263 ;; Registers used:
  6264 ;;		wreg, status,2, status,0
  6265 ;; Tracked objects:
  6266 ;;		On entry : 0/0
  6267 ;;		On exit  : 0/0
  6268 ;;		Unchanged: 0/0
  6269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6271 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6273 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6274 ;;Total ram usage:        0 bytes
  6275 ;; Hardware stack levels used:    1
  6276 ;; Hardware stack levels required when called:    5
  6277 ;; This function calls:
  6278 ;;		Nothing
  6279 ;; This function is called by:
  6280 ;;		_PROTOCOL_Loop
  6281 ;; This function uses a non-reentrant model
  6282 ;;
  6283                           
  6284                           
  6285                           ;psect for function _PROTOCOL_STA
  6286  0D8A                     _PROTOCOL_STA:	
  6287                           
  6288                           ;protocol.c: 100: running = 1;
  6289                           
  6290                           ;incstack = 0
  6291                           ; Regs used in _PROTOCOL_STA: [wreg+status,2+status,0]
  6292  0D8A  0020               	movlb	0	; select bank0
  6293  0D8B  01DA               	clrf	_running
  6294  0D8C  0ADA               	incf	_running,f
  6295  0D8D  0008               	return
  6296  0D8E                     __end_of_PROTOCOL_STA:	
  6297                           
  6298                           	psect	text28
  6299  0DB8                     __ptext28:	
  6300 ;; *************** function _PROTOCOL_SET *****************
  6301 ;; Defined at:
  6302 ;;		line 116 in file "protocol.c"
  6303 ;; Parameters:    Size  Location     Type
  6304 ;;  value_          1    wreg     unsigned char 
  6305 ;; Auto vars:     Size  Location     Type
  6306 ;;  value_          1    1[BANK0 ] unsigned char 
  6307 ;; Return value:  Size  Location     Type
  6308 ;;                  1    wreg      void 
  6309 ;; Registers used:
  6310 ;;		wreg, status,2, status,0
  6311 ;; Tracked objects:
  6312 ;;		On entry : 0/0
  6313 ;;		On exit  : 0/0
  6314 ;;		Unchanged: 0/0
  6315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6317 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6318 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6319 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6320 ;;Total ram usage:        2 bytes
  6321 ;; Hardware stack levels used:    1
  6322 ;; Hardware stack levels required when called:    5
  6323 ;; This function calls:
  6324 ;;		Nothing
  6325 ;; This function is called by:
  6326 ;;		_PROTOCOL_Loop
  6327 ;; This function uses a non-reentrant model
  6328 ;;
  6329                           
  6330                           
  6331                           ;psect for function _PROTOCOL_SET
  6332  0DB8                     _PROTOCOL_SET:	
  6333                           
  6334                           ;incstack = 0
  6335                           ; Regs used in _PROTOCOL_SET: [wreg+status,2+status,0]
  6336                           ;PROTOCOL_SET@value_ stored from wreg
  6337  0DB8  0020               	movlb	0	; select bank0
  6338  0DB9  00A1               	movwf	PROTOCOL_SET@value_
  6339                           
  6340                           ;protocol.c: 117: value = value_;
  6341  0DBA  0821               	movf	PROTOCOL_SET@value_,w
  6342  0DBB  00A0               	movwf	??_PROTOCOL_SET
  6343  0DBC  0820               	movf	??_PROTOCOL_SET,w
  6344  0DBD  00DC               	movwf	_value
  6345  0DBE  0008               	return
  6346  0DBF                     __end_of_PROTOCOL_SET:	
  6347                           
  6348                           	psect	text29
  6349  0DDF                     __ptext29:	
  6350 ;; *************** function _PROTOCOL_SAV *****************
  6351 ;; Defined at:
  6352 ;;		line 112 in file "protocol.c"
  6353 ;; Parameters:    Size  Location     Type
  6354 ;;		None
  6355 ;; Auto vars:     Size  Location     Type
  6356 ;;		None
  6357 ;; Return value:  Size  Location     Type
  6358 ;;                  1    wreg      void 
  6359 ;; Registers used:
  6360 ;;		wreg, status,2, status,0, pclath, cstack
  6361 ;; Tracked objects:
  6362 ;;		On entry : 0/0
  6363 ;;		On exit  : 0/0
  6364 ;;		Unchanged: 0/0
  6365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6367 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6368 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6369 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6370 ;;Total ram usage:        1 bytes
  6371 ;; Hardware stack levels used:    1
  6372 ;; Hardware stack levels required when called:    6
  6373 ;; This function calls:
  6374 ;;		_DATAEE_WriteByte
  6375 ;; This function is called by:
  6376 ;;		_PROTOCOL_Loop
  6377 ;; This function uses a non-reentrant model
  6378 ;;
  6379                           
  6380                           
  6381                           ;psect for function _PROTOCOL_SAV
  6382  0DDF                     _PROTOCOL_SAV:	
  6383                           
  6384                           ;protocol.c: 113: DATAEE_WriteByte(1, value);
  6385                           
  6386                           ;incstack = 0
  6387                           ; Regs used in _PROTOCOL_SAV: [wreg+status,2+status,0+pclath+cstack]
  6388  0DDF  0020               	movlb	0	; select bank0
  6389  0DE0  085C               	movf	_value,w
  6390  0DE1  00A3               	movwf	??_PROTOCOL_SAV
  6391  0DE2  0823               	movf	??_PROTOCOL_SAV,w
  6392  0DE3  00A0               	movwf	DATAEE_WriteByte@bData
  6393  0DE4  3001               	movlw	1
  6394  0DE5  318F  2765         	fcall	_DATAEE_WriteByte
  6395  0DE7  0008               	return
  6396  0DE8                     __end_of_PROTOCOL_SAV:	
  6397                           
  6398                           	psect	text30
  6399  0F65                     __ptext30:	
  6400 ;; *************** function _DATAEE_WriteByte *****************
  6401 ;; Defined at:
  6402 ;;		line 180 in file "mcc_generated_files/memory.c"
  6403 ;; Parameters:    Size  Location     Type
  6404 ;;  bAdd            1    wreg     unsigned char 
  6405 ;;  bData           1    0[BANK0 ] unsigned char 
  6406 ;; Auto vars:     Size  Location     Type
  6407 ;;  bAdd            1    1[BANK0 ] unsigned char 
  6408 ;;  GIEBitValue     1    2[BANK0 ] unsigned char 
  6409 ;; Return value:  Size  Location     Type
  6410 ;;                  1    wreg      void 
  6411 ;; Registers used:
  6412 ;;		wreg, status,2, status,0
  6413 ;; Tracked objects:
  6414 ;;		On entry : 0/0
  6415 ;;		On exit  : 0/0
  6416 ;;		Unchanged: 0/0
  6417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6418 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6419 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6421 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6422 ;;Total ram usage:        3 bytes
  6423 ;; Hardware stack levels used:    1
  6424 ;; Hardware stack levels required when called:    5
  6425 ;; This function calls:
  6426 ;;		Nothing
  6427 ;; This function is called by:
  6428 ;;		_PROTOCOL_Write_Device_Address
  6429 ;;		_PROTOCOL_SAV
  6430 ;; This function uses a non-reentrant model
  6431 ;;
  6432                           
  6433                           
  6434                           ;psect for function _DATAEE_WriteByte
  6435  0F65                     _DATAEE_WriteByte:	
  6436                           
  6437                           ;incstack = 0
  6438                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
  6439                           ;DATAEE_WriteByte@bAdd stored from wreg
  6440  0F65  0020               	movlb	0	; select bank0
  6441  0F66  00A1               	movwf	DATAEE_WriteByte@bAdd
  6442                           
  6443                           ;memory.c: 182: uint8_t GIEBitValue = 0;
  6444  0F67  01A2               	clrf	DATAEE_WriteByte@GIEBitValue
  6445                           
  6446                           ;memory.c: 184: EEADRL = (bAdd & 0x0ff);
  6447  0F68  0821               	movf	DATAEE_WriteByte@bAdd,w
  6448  0F69  0023               	movlb	3	; select bank3
  6449  0F6A  0091               	movwf	17	;volatile
  6450                           
  6451                           ;memory.c: 185: EEDATL = bData;
  6452  0F6B  0020               	movlb	0	; select bank0
  6453  0F6C  0820               	movf	DATAEE_WriteByte@bData,w
  6454  0F6D  0023               	movlb	3	; select bank3
  6455  0F6E  0093               	movwf	19	;volatile
  6456                           
  6457                           ;memory.c: 186: EECON1bits.EEPGD = 0;
  6458  0F6F  1395               	bcf	21,7	;volsfr
  6459                           
  6460                           ;memory.c: 187: EECON1bits.CFGS = 0;
  6461  0F70  1315               	bcf	21,6	;volsfr
  6462                           
  6463                           ;memory.c: 188: EECON1bits.WREN = 1;
  6464  0F71  1515               	bsf	21,2	;volsfr
  6465                           
  6466                           ;memory.c: 190: GIEBitValue = INTCONbits.GIE;
  6467  0F72  3000               	movlw	0
  6468  0F73  1B8B               	btfsc	11,7	;volatile
  6469  0F74  3001               	movlw	1
  6470  0F75  0020               	movlb	0	; select bank0
  6471  0F76  00A2               	movwf	DATAEE_WriteByte@GIEBitValue
  6472                           
  6473                           ;memory.c: 191: INTCONbits.GIE = 0;
  6474  0F77  138B               	bcf	11,7	;volatile
  6475                           
  6476                           ;memory.c: 192: EECON2 = 0x55;
  6477  0F78  3055               	movlw	85
  6478  0F79  0023               	movlb	3	; select bank3
  6479  0F7A  0096               	movwf	22	;volsfr
  6480                           
  6481                           ;memory.c: 193: EECON2 = 0xAA;
  6482  0F7B  30AA               	movlw	170
  6483  0F7C  0096               	movwf	22	;volsfr
  6484                           
  6485                           ;memory.c: 194: EECON1bits.WR = 1;
  6486  0F7D  1495               	bsf	21,1	;volsfr
  6487  0F7E                     l321:	
  6488                           ;memory.c: 197: {
  6489                           
  6490                           ;memory.c: 196: while (EECON1bits.WR)
  6491                           
  6492  0F7E  1895               	btfsc	21,1	;volsfr
  6493  0F7F  2F7E               	goto	l321
  6494                           
  6495                           ;memory.c: 198: }
  6496                           ;memory.c: 200: EECON1bits.WREN = 0;
  6497  0F80  1115               	bcf	21,2	;volsfr
  6498                           
  6499                           ;memory.c: 201: INTCONbits.GIE = GIEBitValue;
  6500  0F81  0020               	movlb	0	; select bank0
  6501  0F82  0C22               	rrf	DATAEE_WriteByte@GIEBitValue,w
  6502  0F83  1C03               	skipc
  6503  0F84  138B               	bcf	11,7	;volatile
  6504  0F85  1803               	skipnc
  6505  0F86  178B               	bsf	11,7	;volatile
  6506  0F87  0008               	return
  6507  0F88                     __end_of_DATAEE_WriteByte:	
  6508                           
  6509                           	psect	text31
  6510  07FF                     __ptext31:	
  6511 ;; *************** function _PROTOCOL_EXT *****************
  6512 ;; Defined at:
  6513 ;;		line 121 in file "protocol.c"
  6514 ;; Parameters:    Size  Location     Type
  6515 ;;  char_buf        1    wreg     PTR unsigned char 
  6516 ;;		 -> buf(48), I2C1_StatusCallback@ext_buf(48), 
  6517 ;; Auto vars:     Size  Location     Type
  6518 ;;  char_buf        1    0[BANK0 ] PTR unsigned char 
  6519 ;;		 -> buf(48), I2C1_StatusCallback@ext_buf(48), 
  6520 ;; Return value:  Size  Location     Type
  6521 ;;                  1    wreg      void 
  6522 ;; Registers used:
  6523 ;;		wreg, status,2, status,0
  6524 ;; Tracked objects:
  6525 ;;		On entry : 0/0
  6526 ;;		On exit  : 0/0
  6527 ;;		Unchanged: 0/0
  6528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6530 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6532 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6533 ;;Total ram usage:        1 bytes
  6534 ;; Hardware stack levels used:    1
  6535 ;; Hardware stack levels required when called:    5
  6536 ;; This function calls:
  6537 ;;		Nothing
  6538 ;; This function is called by:
  6539 ;;		_PROTOCOL_Loop
  6540 ;; This function uses a non-reentrant model
  6541 ;;
  6542                           
  6543                           
  6544                           ;psect for function _PROTOCOL_EXT
  6545  07FF                     _PROTOCOL_EXT:	
  6546                           
  6547                           ;incstack = 0
  6548                           ; Regs used in _PROTOCOL_EXT: [wreg+status,2+status,0]
  6549  07FF  0008               	return
  6550  0800                     __end_of_PROTOCOL_EXT:	
  6551                           
  6552                           	psect	text32
  6553  0F25                     __ptext32:	
  6554 ;; *************** function _EUSART_Read *****************
  6555 ;; Defined at:
  6556 ;;		line 112 in file "mcc_generated_files/eusart.c"
  6557 ;; Parameters:    Size  Location     Type
  6558 ;;		None
  6559 ;; Auto vars:     Size  Location     Type
  6560 ;;  readValue       1    1[BANK0 ] unsigned char 
  6561 ;; Return value:  Size  Location     Type
  6562 ;;                  1    wreg      unsigned char 
  6563 ;; Registers used:
  6564 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6565 ;; Tracked objects:
  6566 ;;		On entry : 0/0
  6567 ;;		On exit  : 0/0
  6568 ;;		Unchanged: 0/0
  6569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6571 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6572 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6573 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6574 ;;Total ram usage:        2 bytes
  6575 ;; Hardware stack levels used:    1
  6576 ;; Hardware stack levels required when called:    5
  6577 ;; This function calls:
  6578 ;;		Nothing
  6579 ;; This function is called by:
  6580 ;;		_PROTOCOL_Loop
  6581 ;;		_getch
  6582 ;; This function uses a non-reentrant model
  6583 ;;
  6584                           
  6585                           
  6586                           ;psect for function _EUSART_Read
  6587  0F25                     _EUSART_Read:	
  6588                           
  6589                           ;eusart.c: 114: uint8_t readValue = 0;
  6590                           
  6591                           ;incstack = 0
  6592                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  6593  0F25  0020               	movlb	0	; select bank0
  6594  0F26  01A1               	clrf	EUSART_Read@readValue
  6595  0F27                     l2892:	
  6596                           ;eusart.c: 117: {
  6597                           
  6598                           ;eusart.c: 116: while(0 == eusartRxCount)
  6599                           
  6600  0F27  0860               	movf	_eusartRxCount,w	;volatile
  6601  0F28  1903               	btfsc	3,2
  6602  0F29  2F27               	goto	l2892
  6603                           
  6604                           ;eusart.c: 118: }
  6605                           ;eusart.c: 120: readValue = eusartRxBuffer[eusartRxTail++];
  6606  0F2A  0861               	movf	_eusartRxTail,w
  6607  0F2B  3EA0               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  6608  0F2C  0086               	movwf	6
  6609  0F2D  0187               	clrf	7
  6610  0F2E  0801               	movf	1,w
  6611  0F2F  00A0               	movwf	??_EUSART_Read
  6612  0F30  0820               	movf	??_EUSART_Read,w
  6613  0F31  00A1               	movwf	EUSART_Read@readValue
  6614  0F32  3001               	movlw	1
  6615  0F33  00A0               	movwf	??_EUSART_Read
  6616  0F34  0820               	movf	??_EUSART_Read,w
  6617  0F35  07E1               	addwf	_eusartRxTail,f	;volatile
  6618                           
  6619                           ;eusart.c: 121: if(sizeof(eusartRxBuffer) <= eusartRxTail)
  6620  0F36  3008               	movlw	8
  6621  0F37  0261               	subwf	_eusartRxTail,w	;volatile
  6622  0F38  1803               	btfsc	3,0
  6623                           
  6624                           ;eusart.c: 122: {
  6625                           ;eusart.c: 123: eusartRxTail = 0;
  6626  0F39  01E1               	clrf	_eusartRxTail	;volatile
  6627                           
  6628                           ;eusart.c: 124: }
  6629                           ;eusart.c: 125: PIE1bits.RCIE = 0;
  6630  0F3A  0021               	movlb	1	; select bank1
  6631  0F3B  1291               	bcf	17,5	;volatile
  6632                           
  6633                           ;eusart.c: 126: eusartRxCount--;
  6634  0F3C  3001               	movlw	1
  6635  0F3D  0020               	movlb	0	; select bank0
  6636  0F3E  02E0               	subwf	_eusartRxCount,f	;volatile
  6637                           
  6638                           ;eusart.c: 127: PIE1bits.RCIE = 1;
  6639  0F3F  0021               	movlb	1	; select bank1
  6640  0F40  1691               	bsf	17,5	;volatile
  6641                           
  6642                           ;eusart.c: 129: return readValue;
  6643  0F41  0020               	movlb	0	; select bank0
  6644  0F42  0821               	movf	EUSART_Read@readValue,w
  6645  0F43  0008               	return
  6646  0F44                     __end_of_EUSART_Read:	
  6647                           
  6648                           	psect	text33
  6649  0678                     __ptext33:	
  6650 ;; *************** function _PROTOCOL_Initialize *****************
  6651 ;; Defined at:
  6652 ;;		line 60 in file "protocol.c"
  6653 ;; Parameters:    Size  Location     Type
  6654 ;;  device_id       2    1[BANK0 ] PTR const unsigned char 
  6655 ;;		 -> STR_1(17), 
  6656 ;;  start_handle    1    3[BANK0 ] PTR void 
  6657 ;;		 -> NULL(0), 
  6658 ;;  stop_handler    1    4[BANK0 ] PTR void 
  6659 ;;		 -> NULL(0), 
  6660 ;;  set_handler     1    5[BANK0 ] PTR void 
  6661 ;;		 -> NULL(0), 
  6662 ;;  inv_handler     2    6[BANK0 ] PTR void 
  6663 ;;		 -> set_handler(1), 
  6664 ;;  scaler          1    8[BANK0 ] unsigned char 
  6665 ;; Auto vars:     Size  Location     Type
  6666 ;;		None
  6667 ;; Return value:  Size  Location     Type
  6668 ;;                  1    wreg      void 
  6669 ;; Registers used:
  6670 ;;		wreg, status,2, status,0, pclath, cstack
  6671 ;; Tracked objects:
  6672 ;;		On entry : 0/0
  6673 ;;		On exit  : 0/0
  6674 ;;		Unchanged: 0/0
  6675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6676 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6677 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6678 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6679 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6680 ;;Total ram usage:       10 bytes
  6681 ;; Hardware stack levels used:    1
  6682 ;; Hardware stack levels required when called:    6
  6683 ;; This function calls:
  6684 ;;		_DATAEE_ReadByte
  6685 ;; This function is called by:
  6686 ;;		_main
  6687 ;; This function uses a non-reentrant model
  6688 ;;
  6689                           
  6690                           
  6691                           ;psect for function _PROTOCOL_Initialize
  6692  0678                     _PROTOCOL_Initialize:	
  6693                           
  6694                           ;protocol.c: 61: device_id_ = device_id;
  6695                           
  6696                           ;incstack = 0
  6697                           ; Regs used in _PROTOCOL_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6698  0678  0020               	movlb	0	; select bank0
  6699  0679  0822               	movf	PROTOCOL_Initialize@device_id+1,w
  6700  067A  0021               	movlb	1	; select bank1
  6701  067B  00E1               	movwf	(_device_id_+1)^(0+128)
  6702  067C  0020               	movlb	0	; select bank0
  6703  067D  0821               	movf	PROTOCOL_Initialize@device_id,w
  6704  067E  0021               	movlb	1	; select bank1
  6705  067F  00E0               	movwf	_device_id_^(0+128)
  6706                           
  6707                           ;protocol.c: 62: PROTOCOL_Start_Handler = start_handler;
  6708  0680  0020               	movlb	0	; select bank0
  6709  0681  0823               	movf	PROTOCOL_Initialize@start_handler,w
  6710  0682  00A9               	movwf	??_PROTOCOL_Initialize
  6711  0683  3000               	movlw	0
  6712  0684  00AA               	movwf	??_PROTOCOL_Initialize+1
  6713  0685  0829               	movf	??_PROTOCOL_Initialize,w
  6714  0686  0021               	movlb	1	; select bank1
  6715  0687  00E6               	movwf	_PROTOCOL_Start_Handler^(0+128)
  6716  0688  0020               	movlb	0	; select bank0
  6717  0689  082A               	movf	??_PROTOCOL_Initialize+1,w
  6718  068A  0021               	movlb	1	; select bank1
  6719  068B  00E7               	movwf	(_PROTOCOL_Start_Handler+1)^(0+128)
  6720                           
  6721                           ;protocol.c: 63: PROTOCOL_Stop_Handler = stop_handler;
  6722  068C  0020               	movlb	0	; select bank0
  6723  068D  0824               	movf	PROTOCOL_Initialize@stop_handler,w
  6724  068E  00A9               	movwf	??_PROTOCOL_Initialize
  6725  068F  3000               	movlw	0
  6726  0690  00AA               	movwf	??_PROTOCOL_Initialize+1
  6727  0691  0829               	movf	??_PROTOCOL_Initialize,w
  6728  0692  0021               	movlb	1	; select bank1
  6729  0693  00E4               	movwf	_PROTOCOL_Stop_Handler^(0+128)
  6730  0694  0020               	movlb	0	; select bank0
  6731  0695  082A               	movf	??_PROTOCOL_Initialize+1,w
  6732  0696  0021               	movlb	1	; select bank1
  6733  0697  00E5               	movwf	(_PROTOCOL_Stop_Handler+1)^(0+128)
  6734                           
  6735                           ;protocol.c: 64: PROTOCOL_Set_Handler = set_handler;
  6736  0698  0020               	movlb	0	; select bank0
  6737  0699  0825               	movf	PROTOCOL_Initialize@set_handler,w
  6738  069A  00A9               	movwf	??_PROTOCOL_Initialize
  6739  069B  3000               	movlw	0
  6740  069C  00AA               	movwf	??_PROTOCOL_Initialize+1
  6741  069D  0829               	movf	??_PROTOCOL_Initialize,w
  6742  069E  0021               	movlb	1	; select bank1
  6743  069F  00E2               	movwf	_PROTOCOL_Set_Handler^(0+128)
  6744  06A0  0020               	movlb	0	; select bank0
  6745  06A1  082A               	movf	??_PROTOCOL_Initialize+1,w
  6746  06A2  0021               	movlb	1	; select bank1
  6747  06A3  00E3               	movwf	(_PROTOCOL_Set_Handler+1)^(0+128)
  6748                           
  6749                           ;protocol.c: 67: value = DATAEE_ReadByte(1);
  6750  06A4  3001               	movlw	1
  6751  06A5  318E  260E  3186   	fcall	_DATAEE_ReadByte
  6752  06A8  0020               	movlb	0	; select bank0
  6753  06A9  00A9               	movwf	??_PROTOCOL_Initialize
  6754  06AA  0829               	movf	??_PROTOCOL_Initialize,w
  6755  06AB  00DC               	movwf	_value
  6756                           
  6757                           ;protocol.c: 69: slave_address = DATAEE_ReadByte(0);
  6758  06AC  3000               	movlw	0
  6759  06AD  318E  260E         	fcall	_DATAEE_ReadByte
  6760  06AF  0020               	movlb	0	; select bank0
  6761  06B0  00A9               	movwf	??_PROTOCOL_Initialize
  6762  06B1  0829               	movf	??_PROTOCOL_Initialize,w
  6763  06B2  00DE               	movwf	_slave_address
  6764                           
  6765                           ;protocol.c: 72: readbuf.status = COMPLETE;
  6766  06B3  3003               	movlw	3
  6767  06B4  00A9               	movwf	??_PROTOCOL_Initialize
  6768  06B5  0829               	movf	??_PROTOCOL_Initialize,w
  6769  06B6  00EA               	movwf	_readbuf+3
  6770                           
  6771                           ;protocol.c: 73: PROTOCOL_Inv_Handler = inv_handler;
  6772  06B7  0827               	movf	PROTOCOL_Initialize@inv_handler+1,w
  6773  06B8  00D3               	movwf	_PROTOCOL_Inv_Handler+1
  6774  06B9  0826               	movf	PROTOCOL_Initialize@inv_handler,w
  6775  06BA  00D2               	movwf	_PROTOCOL_Inv_Handler
  6776                           
  6777                           ;protocol.c: 74: tmr_scaler = scaler;
  6778  06BB  0828               	movf	PROTOCOL_Initialize@scaler,w
  6779  06BC  00A9               	movwf	??_PROTOCOL_Initialize
  6780  06BD  0829               	movf	??_PROTOCOL_Initialize,w
  6781  06BE  00EC               	movwf	_tmr_scaler
  6782  06BF  0008               	return
  6783  06C0                     __end_of_PROTOCOL_Initialize:	
  6784                           
  6785                           	psect	text34
  6786  0E0E                     __ptext34:	
  6787 ;; *************** function _DATAEE_ReadByte *****************
  6788 ;; Defined at:
  6789 ;;		line 204 in file "mcc_generated_files/memory.c"
  6790 ;; Parameters:    Size  Location     Type
  6791 ;;  bAdd            1    wreg     unsigned char 
  6792 ;; Auto vars:     Size  Location     Type
  6793 ;;  bAdd            1    0[BANK0 ] unsigned char 
  6794 ;; Return value:  Size  Location     Type
  6795 ;;                  1    wreg      unsigned char 
  6796 ;; Registers used:
  6797 ;;		wreg
  6798 ;; Tracked objects:
  6799 ;;		On entry : 0/0
  6800 ;;		On exit  : 0/0
  6801 ;;		Unchanged: 0/0
  6802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6804 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6806 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6807 ;;Total ram usage:        1 bytes
  6808 ;; Hardware stack levels used:    1
  6809 ;; Hardware stack levels required when called:    5
  6810 ;; This function calls:
  6811 ;;		Nothing
  6812 ;; This function is called by:
  6813 ;;		_PROTOCOL_Initialize
  6814 ;; This function uses a non-reentrant model
  6815 ;;
  6816                           
  6817                           
  6818                           ;psect for function _DATAEE_ReadByte
  6819  0E0E                     _DATAEE_ReadByte:	
  6820                           
  6821                           ;incstack = 0
  6822                           ; Regs used in _DATAEE_ReadByte: [wreg]
  6823                           ;DATAEE_ReadByte@bAdd stored from wreg
  6824  0E0E  0020               	movlb	0	; select bank0
  6825  0E0F  00A0               	movwf	DATAEE_ReadByte@bAdd
  6826                           
  6827                           ;memory.c: 206: EEADRL = (bAdd & 0x0ff);
  6828  0E10  0820               	movf	DATAEE_ReadByte@bAdd,w
  6829  0E11  0023               	movlb	3	; select bank3
  6830  0E12  0091               	movwf	17	;volatile
  6831                           
  6832                           ;memory.c: 207: EECON1bits.CFGS = 0;
  6833  0E13  1315               	bcf	21,6	;volsfr
  6834                           
  6835                           ;memory.c: 208: EECON1bits.EEPGD = 0;
  6836  0E14  1395               	bcf	21,7	;volsfr
  6837                           
  6838                           ;memory.c: 209: EECON1bits.RD = 1;
  6839  0E15  1415               	bsf	21,0	;volsfr
  6840                           
  6841                           ;memory.c: 210: __nop();
  6842  0E16  0000               	nop
  6843                           
  6844                           ;memory.c: 211: __nop();
  6845  0E17  0000               	nop
  6846                           
  6847                           ;memory.c: 213: return (EEDATL);
  6848  0E18  0023               	movlb	3	; select bank3
  6849  0E19  0813               	movf	19,w	;volatile
  6850  0E1A  0008               	return
  6851  0E1B                     __end_of_DATAEE_ReadByte:	
  6852                           
  6853                           	psect	text35
  6854  0F06                     __ptext35:	
  6855 ;; *************** function _PIN_MANAGER_Initialize *****************
  6856 ;; Defined at:
  6857 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
  6858 ;; Parameters:    Size  Location     Type
  6859 ;;		None
  6860 ;; Auto vars:     Size  Location     Type
  6861 ;;		None
  6862 ;; Return value:  Size  Location     Type
  6863 ;;                  1    wreg      void 
  6864 ;; Registers used:
  6865 ;;		wreg, status,2
  6866 ;; Tracked objects:
  6867 ;;		On entry : 0/0
  6868 ;;		On exit  : 0/0
  6869 ;;		Unchanged: 0/0
  6870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6872 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6874 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6875 ;;Total ram usage:        0 bytes
  6876 ;; Hardware stack levels used:    1
  6877 ;; Hardware stack levels required when called:    5
  6878 ;; This function calls:
  6879 ;;		Nothing
  6880 ;; This function is called by:
  6881 ;;		_main
  6882 ;;		_SYSTEM_Initialize
  6883 ;; This function uses a non-reentrant model
  6884 ;;
  6885                           
  6886                           
  6887                           ;psect for function _PIN_MANAGER_Initialize
  6888  0F06                     _PIN_MANAGER_Initialize:	
  6889                           
  6890                           ;pin_manager.c: 56: LATA = 0x00;
  6891                           
  6892                           ;incstack = 0
  6893                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  6894  0F06  0022               	movlb	2	; select bank2
  6895  0F07  018C               	clrf	12	;volatile
  6896                           
  6897                           ;pin_manager.c: 57: LATB = 0x00;
  6898  0F08  018D               	clrf	13	;volatile
  6899                           
  6900                           ;pin_manager.c: 58: LATC = 0x00;
  6901  0F09  018E               	clrf	14	;volatile
  6902                           
  6903                           ;pin_manager.c: 63: TRISA = 0x3F;
  6904  0F0A  303F               	movlw	63
  6905  0F0B  0021               	movlb	1	; select bank1
  6906  0F0C  008C               	movwf	12	;volatile
  6907                           
  6908                           ;pin_manager.c: 64: TRISB = 0xF0;
  6909  0F0D  30F0               	movlw	240
  6910  0F0E  008D               	movwf	13	;volatile
  6911                           
  6912                           ;pin_manager.c: 65: TRISC = 0x7F;
  6913  0F0F  307F               	movlw	127
  6914  0F10  008E               	movwf	14	;volatile
  6915                           
  6916                           ;pin_manager.c: 70: ANSELC = 0x4F;
  6917  0F11  304F               	movlw	79
  6918  0F12  0023               	movlb	3	; select bank3
  6919  0F13  008E               	movwf	14	;volatile
  6920                           
  6921                           ;pin_manager.c: 71: ANSELB = 0x20;
  6922  0F14  3020               	movlw	32
  6923  0F15  008D               	movwf	13	;volatile
  6924                           
  6925                           ;pin_manager.c: 72: ANSELA = 0x17;
  6926  0F16  3017               	movlw	23
  6927  0F17  008C               	movwf	12	;volatile
  6928                           
  6929                           ;pin_manager.c: 77: WPUB = 0x00;
  6930  0F18  0024               	movlb	4	; select bank4
  6931  0F19  018D               	clrf	13	;volatile
  6932                           
  6933                           ;pin_manager.c: 78: WPUA = 0x3F;
  6934  0F1A  303F               	movlw	63
  6935  0F1B  008C               	movwf	12	;volatile
  6936                           
  6937                           ;pin_manager.c: 79: WPUC = 0x30;
  6938  0F1C  3030               	movlw	48
  6939  0F1D  008E               	movwf	14	;volatile
  6940                           
  6941                           ;pin_manager.c: 80: OPTION_REGbits.nWPUEN = 0;
  6942  0F1E  0021               	movlb	1	; select bank1
  6943  0F1F  1395               	bcf	21,7	;volatile
  6944                           
  6945                           ;pin_manager.c: 86: APFCON1 = 0x00;
  6946  0F20  0022               	movlb	2	; select bank2
  6947  0F21  019E               	clrf	30	;volatile
  6948                           
  6949                           ;pin_manager.c: 87: APFCON0 = 0x84;
  6950  0F22  3084               	movlw	132
  6951  0F23  009D               	movwf	29	;volatile
  6952  0F24  0008               	return
  6953  0F25                     __end_of_PIN_MANAGER_Initialize:	
  6954                           
  6955                           	psect	text36
  6956  0D9A                     __ptext36:	
  6957 ;; *************** function _OSCILLATOR_Initialize *****************
  6958 ;; Defined at:
  6959 ;;		line 81 in file "mcc_generated_files/mcc.c"
  6960 ;; Parameters:    Size  Location     Type
  6961 ;;		None
  6962 ;; Auto vars:     Size  Location     Type
  6963 ;;		None
  6964 ;; Return value:  Size  Location     Type
  6965 ;;                  1    wreg      void 
  6966 ;; Registers used:
  6967 ;;		wreg, status,2
  6968 ;; Tracked objects:
  6969 ;;		On entry : 0/0
  6970 ;;		On exit  : 0/0
  6971 ;;		Unchanged: 0/0
  6972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6974 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6976 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6977 ;;Total ram usage:        0 bytes
  6978 ;; Hardware stack levels used:    1
  6979 ;; Hardware stack levels required when called:    5
  6980 ;; This function calls:
  6981 ;;		Nothing
  6982 ;; This function is called by:
  6983 ;;		_main
  6984 ;;		_SYSTEM_Initialize
  6985 ;; This function uses a non-reentrant model
  6986 ;;
  6987                           
  6988                           
  6989                           ;psect for function _OSCILLATOR_Initialize
  6990  0D9A                     _OSCILLATOR_Initialize:	
  6991                           
  6992                           ;mcc.c: 84: OSCCON = 0x68;
  6993                           
  6994                           ;incstack = 0
  6995                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  6996  0D9A  3068               	movlw	104
  6997  0D9B  0021               	movlb	1	; select bank1
  6998  0D9C  0099               	movwf	25	;volatile
  6999                           
  7000                           ;mcc.c: 86: OSCTUNE = 0x00;
  7001  0D9D  0198               	clrf	24	;volatile
  7002  0D9E  0008               	return
  7003  0D9F                     __end_of_OSCILLATOR_Initialize:	
  7004                           
  7005                           	psect	text37
  7006  0F44                     __ptext37:	
  7007 ;; *************** function _I2C1_Initialize *****************
  7008 ;; Defined at:
  7009 ;;		line 30 in file "mcc_generated_files/i2c1.c"
  7010 ;; Parameters:    Size  Location     Type
  7011 ;;		None
  7012 ;; Auto vars:     Size  Location     Type
  7013 ;;		None
  7014 ;; Return value:  Size  Location     Type
  7015 ;;                  1    wreg      void 
  7016 ;; Registers used:
  7017 ;;		wreg, status,2, status,0, pclath, cstack
  7018 ;; Tracked objects:
  7019 ;;		On entry : 0/0
  7020 ;;		On exit  : 0/0
  7021 ;;		Unchanged: 0/0
  7022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7025 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7026 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7027 ;;Total ram usage:        2 bytes
  7028 ;; Hardware stack levels used:    1
  7029 ;; Hardware stack levels required when called:    6
  7030 ;; This function calls:
  7031 ;;		_PROTOCOL_Read_Device_Address
  7032 ;; This function is called by:
  7033 ;;		_main
  7034 ;;		_SYSTEM_Initialize
  7035 ;; This function uses a non-reentrant model
  7036 ;;
  7037                           
  7038                           
  7039                           ;psect for function _I2C1_Initialize
  7040  0F44                     _I2C1_Initialize:	
  7041                           
  7042                           ;i2c1.c: 34: _delay((unsigned long)((2000)*(4000000/4000.0)));
  7043                           
  7044                           ;incstack = 0
  7045                           ; Regs used in _I2C1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7046  0F44  300B               	movlw	11
  7047  0F45  0020               	movlb	0	; select bank0
  7048  0F46  00A1               	movwf	??_I2C1_Initialize+1
  7049  0F47  3026               	movlw	38
  7050  0F48  00A0               	movwf	??_I2C1_Initialize
  7051  0F49  305D               	movlw	93
  7052  0F4A                     u2407:	
  7053  0F4A  0B89               	decfsz	9,f
  7054  0F4B  2F4A               	goto	u2407
  7055  0F4C  0BA0               	decfsz	??_I2C1_Initialize,f
  7056  0F4D  2F4A               	goto	u2407
  7057  0F4E  0BA1               	decfsz	??_I2C1_Initialize+1,f
  7058  0F4F  2F4A               	goto	u2407
  7059  0F50  3200               	nop2
  7060                           
  7061                           ;i2c1.c: 38: SSP1STAT = 0x80;
  7062  0F51  3080               	movlw	128
  7063  0F52  0024               	movlb	4	; select bank4
  7064  0F53  0094               	movwf	20	;volatile
  7065                           
  7066                           ;i2c1.c: 40: SSP1CON1 = 0x26;
  7067  0F54  3026               	movlw	38
  7068  0F55  0095               	movwf	21	;volatile
  7069                           
  7070                           ;i2c1.c: 42: SSP1CON2 = 0x81;
  7071  0F56  3081               	movlw	129
  7072  0F57  0096               	movwf	22	;volatile
  7073                           
  7074                           ;i2c1.c: 44: SSP1CON3 = 0x00;
  7075  0F58  0197               	clrf	23	;volatile
  7076                           
  7077                           ;i2c1.c: 46: SSP1MSK = (0x7F << 1);
  7078  0F59  30FE               	movlw	254
  7079  0F5A  0093               	movwf	19	;volatile
  7080                           
  7081                           ;i2c1.c: 48: SSP1ADD = (PROTOCOL_Read_Device_Address() << 1);
  7082  0F5B  318D  2575         	fcall	_PROTOCOL_Read_Device_Address
  7083  0F5D  0709               	addwf	9,w
  7084  0F5E  0024               	movlb	4	; select bank4
  7085  0F5F  0092               	movwf	18	;volatile
  7086                           
  7087                           ;i2c1.c: 51: PIR1bits.SSP1IF = 0;
  7088  0F60  0020               	movlb	0	; select bank0
  7089  0F61  1191               	bcf	17,3	;volatile
  7090                           
  7091                           ;i2c1.c: 53: PIE1bits.SSP1IE = 1;
  7092  0F62  0021               	movlb	1	; select bank1
  7093  0F63  1591               	bsf	17,3	;volatile
  7094  0F64  0008               	return
  7095  0F65                     __end_of_I2C1_Initialize:	
  7096                           
  7097                           	psect	text38
  7098  0D75                     __ptext38:	
  7099 ;; *************** function _PROTOCOL_Read_Device_Address *****************
  7100 ;; Defined at:
  7101 ;;		line 94 in file "protocol.c"
  7102 ;; Parameters:    Size  Location     Type
  7103 ;;		None
  7104 ;; Auto vars:     Size  Location     Type
  7105 ;;		None
  7106 ;; Return value:  Size  Location     Type
  7107 ;;                  1    wreg      unsigned char 
  7108 ;; Registers used:
  7109 ;;		wreg
  7110 ;; Tracked objects:
  7111 ;;		On entry : 0/0
  7112 ;;		On exit  : 0/0
  7113 ;;		Unchanged: 0/0
  7114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7115 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7116 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7117 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7118 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7119 ;;Total ram usage:        0 bytes
  7120 ;; Hardware stack levels used:    1
  7121 ;; Hardware stack levels required when called:    5
  7122 ;; This function calls:
  7123 ;;		Nothing
  7124 ;; This function is called by:
  7125 ;;		_I2C1_Initialize
  7126 ;;		_PROTOCOL_Loop
  7127 ;; This function uses a non-reentrant model
  7128 ;;
  7129                           
  7130                           
  7131                           ;psect for function _PROTOCOL_Read_Device_Address
  7132  0D75                     _PROTOCOL_Read_Device_Address:	
  7133                           
  7134                           ;protocol.c: 95: return slave_address;
  7135                           
  7136                           ;incstack = 0
  7137                           ; Regs used in _PROTOCOL_Read_Device_Address: [wreg]
  7138  0D75  0020               	movlb	0	; select bank0
  7139  0D76  085E               	movf	_slave_address,w
  7140  0D77  0008               	return
  7141  0D78                     __end_of_PROTOCOL_Read_Device_Address:	
  7142                           
  7143                           	psect	text39
  7144  0E7D                     __ptext39:	
  7145 ;; *************** function _EUSART_Initialize *****************
  7146 ;; Defined at:
  7147 ;;		line 75 in file "mcc_generated_files/eusart.c"
  7148 ;; Parameters:    Size  Location     Type
  7149 ;;		None
  7150 ;; Auto vars:     Size  Location     Type
  7151 ;;		None
  7152 ;; Return value:  Size  Location     Type
  7153 ;;                  1    wreg      void 
  7154 ;; Registers used:
  7155 ;;		wreg, status,2
  7156 ;; Tracked objects:
  7157 ;;		On entry : 0/0
  7158 ;;		On exit  : 0/0
  7159 ;;		Unchanged: 0/0
  7160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7163 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7164 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7165 ;;Total ram usage:        1 bytes
  7166 ;; Hardware stack levels used:    1
  7167 ;; Hardware stack levels required when called:    5
  7168 ;; This function calls:
  7169 ;;		Nothing
  7170 ;; This function is called by:
  7171 ;;		_main
  7172 ;;		_SYSTEM_Initialize
  7173 ;; This function uses a non-reentrant model
  7174 ;;
  7175                           
  7176                           
  7177                           ;psect for function _EUSART_Initialize
  7178  0E7D                     _EUSART_Initialize:	
  7179                           
  7180                           ;eusart.c: 78: PIE1bits.RCIE = 0;
  7181                           
  7182                           ;incstack = 0
  7183                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  7184  0E7D  0021               	movlb	1	; select bank1
  7185  0E7E  1291               	bcf	17,5	;volatile
  7186                           
  7187                           ;eusart.c: 79: PIE1bits.TXIE = 0;
  7188  0E7F  1211               	bcf	17,4	;volatile
  7189                           
  7190                           ;eusart.c: 84: BAUDCON = 0x08;
  7191  0E80  3008               	movlw	8
  7192  0E81  0023               	movlb	3	; select bank3
  7193  0E82  009F               	movwf	31	;volatile
  7194                           
  7195                           ;eusart.c: 87: RCSTA = 0x90;
  7196  0E83  3090               	movlw	144
  7197  0E84  009D               	movwf	29	;volatile
  7198                           
  7199                           ;eusart.c: 90: TXSTA = 0x24;
  7200  0E85  3024               	movlw	36
  7201  0E86  009E               	movwf	30	;volatile
  7202                           
  7203                           ;eusart.c: 93: SPBRGL = 0x67;
  7204  0E87  3067               	movlw	103
  7205  0E88  009B               	movwf	27	;volatile
  7206                           
  7207                           ;eusart.c: 96: SPBRGH = 0x00;
  7208  0E89  019C               	clrf	28	;volatile
  7209                           
  7210                           ;eusart.c: 100: eusartTxHead = 0;
  7211  0E8A  01FC               	clrf	_eusartTxHead	;volatile
  7212                           
  7213                           ;eusart.c: 101: eusartTxTail = 0;
  7214  0E8B  01FB               	clrf	_eusartTxTail	;volatile
  7215                           
  7216                           ;eusart.c: 102: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
  7217  0E8C  3008               	movlw	8
  7218  0E8D  0020               	movlb	0	; select bank0
  7219  0E8E  00A0               	movwf	??_EUSART_Initialize
  7220  0E8F  0820               	movf	??_EUSART_Initialize,w
  7221  0E90  00FA               	movwf	_eusartTxBufferRemaining	;volatile
  7222                           
  7223                           ;eusart.c: 104: eusartRxHead = 0;
  7224  0E91  01E2               	clrf	_eusartRxHead	;volatile
  7225                           
  7226                           ;eusart.c: 105: eusartRxTail = 0;
  7227  0E92  01E1               	clrf	_eusartRxTail	;volatile
  7228                           
  7229                           ;eusart.c: 106: eusartRxCount = 0;
  7230  0E93  01E0               	clrf	_eusartRxCount	;volatile
  7231                           
  7232                           ;eusart.c: 109: PIE1bits.RCIE = 1;
  7233  0E94  0021               	movlb	1	; select bank1
  7234  0E95  1691               	bsf	17,5	;volatile
  7235  0E96  0008               	return
  7236  0E97                     __end_of_EUSART_Initialize:	
  7237                           
  7238                           	psect	text40
  7239  0DC6                     __ptext40:	
  7240 ;; *************** function _ADC_Initialize *****************
  7241 ;; Defined at:
  7242 ;;		line 64 in file "mcc_generated_files/adc.c"
  7243 ;; Parameters:    Size  Location     Type
  7244 ;;		None
  7245 ;; Auto vars:     Size  Location     Type
  7246 ;;		None
  7247 ;; Return value:  Size  Location     Type
  7248 ;;                  1    wreg      void 
  7249 ;; Registers used:
  7250 ;;		wreg, status,2
  7251 ;; Tracked objects:
  7252 ;;		On entry : 0/0
  7253 ;;		On exit  : 0/0
  7254 ;;		Unchanged: 0/0
  7255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7257 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7259 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7260 ;;Total ram usage:        0 bytes
  7261 ;; Hardware stack levels used:    1
  7262 ;; Hardware stack levels required when called:    5
  7263 ;; This function calls:
  7264 ;;		Nothing
  7265 ;; This function is called by:
  7266 ;;		_main
  7267 ;;		_SYSTEM_Initialize
  7268 ;; This function uses a non-reentrant model
  7269 ;;
  7270                           
  7271                           
  7272                           ;psect for function _ADC_Initialize
  7273  0DC6                     _ADC_Initialize:	
  7274                           
  7275                           ;adc.c: 69: ADCON0 = 0x01;
  7276                           
  7277                           ;incstack = 0
  7278                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  7279  0DC6  3001               	movlw	1
  7280  0DC7  0021               	movlb	1	; select bank1
  7281  0DC8  009D               	movwf	29	;volatile
  7282                           
  7283                           ;adc.c: 72: ADCON1 = 0xF0;
  7284  0DC9  30F0               	movlw	240
  7285  0DCA  009E               	movwf	30	;volatile
  7286                           
  7287                           ;adc.c: 75: ADRESL = 0x00;
  7288  0DCB  019B               	clrf	27	;volatile
  7289                           
  7290                           ;adc.c: 78: ADRESH = 0x00;
  7291  0DCC  019C               	clrf	28	;volatile
  7292  0DCD  0008               	return
  7293  0DCE                     __end_of_ADC_Initialize:	
  7294                           
  7295                           	psect	intentry
  7296  0004                     __pintentry:	
  7297 ;; *************** function _INTERRUPT_InterruptManager *****************
  7298 ;; Defined at:
  7299 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  7300 ;; Parameters:    Size  Location     Type
  7301 ;;		None
  7302 ;; Auto vars:     Size  Location     Type
  7303 ;;		None
  7304 ;; Return value:  Size  Location     Type
  7305 ;;                  1    wreg      void 
  7306 ;; Registers used:
  7307 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7308 ;; Tracked objects:
  7309 ;;		On entry : 0/0
  7310 ;;		On exit  : 0/0
  7311 ;;		Unchanged: 0/0
  7312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7314 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7315 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7316 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7317 ;;Total ram usage:        1 bytes
  7318 ;; Hardware stack levels used:    1
  7319 ;; Hardware stack levels required when called:    4
  7320 ;; This function calls:
  7321 ;;		_EUSART_Receive_ISR
  7322 ;;		_EUSART_Transmit_ISR
  7323 ;;		_I2C1_ISR
  7324 ;; This function is called by:
  7325 ;;		Interrupt level 1
  7326 ;; This function uses a non-reentrant model
  7327 ;;
  7328                           
  7329  0004                     _INTERRUPT_InterruptManager:	
  7330                           
  7331                           ;incstack = 0
  7332  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  7333                           
  7334                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7335  0005  3180               	pagesel	$
  7336  0006  0020               	movlb	0	; select bank0
  7337  0007  087F               	movf	127,w
  7338  0008  00F9               	movwf	??_INTERRUPT_InterruptManager
  7339                           
  7340                           ;interrupt_manager.c: 54: if(INTCONbits.PEIE == 1 && PIE1bits.TXIE == 1 && PIR1bits.TXIF
      +                           == 1)
  7341  0009  1F0B               	btfss	11,6	;volatile
  7342  000A  2815               	goto	i1l168
  7343  000B  0021               	movlb	1	; select bank1
  7344  000C  1E11               	btfss	17,4	;volatile
  7345  000D  2815               	goto	i1l168
  7346  000E  0020               	movlb	0	; select bank0
  7347  000F  1E11               	btfss	17,4	;volatile
  7348  0010  2815               	goto	i1l168
  7349                           
  7350                           ;interrupt_manager.c: 55: {
  7351                           ;interrupt_manager.c: 56: EUSART_Transmit_ISR();
  7352  0011  318E  26B2  3180   	fcall	_EUSART_Transmit_ISR
  7353                           
  7354                           ;interrupt_manager.c: 57: }
  7355  0014  282B               	goto	i1l174
  7356  0015                     i1l168:	
  7357                           
  7358                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits
      +                          .RCIF == 1)
  7359  0015  1F0B               	btfss	11,6	;volatile
  7360  0016  2821               	goto	i1l170
  7361  0017  0021               	movlb	1	; select bank1
  7362  0018  1E91               	btfss	17,5	;volatile
  7363  0019  2821               	goto	i1l170
  7364  001A  0020               	movlb	0	; select bank0
  7365  001B  1E91               	btfss	17,5	;volatile
  7366  001C  2821               	goto	i1l170
  7367                           
  7368                           ;interrupt_manager.c: 59: {
  7369                           ;interrupt_manager.c: 60: EUSART_Receive_ISR();
  7370  001D  318E  2697  3180   	fcall	_EUSART_Receive_ISR
  7371                           
  7372                           ;interrupt_manager.c: 61: }
  7373  0020  282B               	goto	i1l174
  7374  0021                     i1l170:	
  7375                           
  7376                           ;interrupt_manager.c: 62: else if(INTCONbits.PEIE == 1 && PIE1bits.SSP1IE == 1 && PIR1bi
      +                          ts.SSP1IF == 1)
  7377  0021  1F0B               	btfss	11,6	;volatile
  7378  0022  282B               	goto	i1l174
  7379  0023  0021               	movlb	1	; select bank1
  7380  0024  1D91               	btfss	17,3	;volatile
  7381  0025  282B               	goto	i1l174
  7382  0026  0020               	movlb	0	; select bank0
  7383  0027  1D91               	btfss	17,3	;volatile
  7384  0028  282B               	goto	i1l174
  7385                           
  7386                           ;interrupt_manager.c: 63: {
  7387                           ;interrupt_manager.c: 64: I2C1_ISR();
  7388  0029  318F  27AC         	fcall	_I2C1_ISR
  7389  002B                     i1l174:	
  7390                           ;interrupt_manager.c: 66: else
  7391                           ;interrupt_manager.c: 67: {
  7392                           
  7393                           ;interrupt_manager.c: 65: }
  7394                           
  7395  002B  0879               	movf	??_INTERRUPT_InterruptManager,w
  7396  002C  0020               	movlb	0	; select bank0
  7397  002D  00FF               	movwf	127
  7398  002E  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  7399  002F  0009               	retfie
  7400  0030                     __end_of_INTERRUPT_InterruptManager:	
  7401                           
  7402                           	psect	text42
  7403  0FAC                     __ptext42:	
  7404 ;; *************** function _I2C1_ISR *****************
  7405 ;; Defined at:
  7406 ;;		line 57 in file "mcc_generated_files/i2c1.c"
  7407 ;; Parameters:    Size  Location     Type
  7408 ;;		None
  7409 ;; Auto vars:     Size  Location     Type
  7410 ;;  i2c_data        1    8[COMMON] unsigned char 
  7411 ;; Return value:  Size  Location     Type
  7412 ;;                  1    wreg      void 
  7413 ;; Registers used:
  7414 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7415 ;; Tracked objects:
  7416 ;;		On entry : 0/0
  7417 ;;		On exit  : 0/0
  7418 ;;		Unchanged: 0/0
  7419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7421 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7422 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7423 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7424 ;;Total ram usage:        2 bytes
  7425 ;; Hardware stack levels used:    1
  7426 ;; Hardware stack levels required when called:    3
  7427 ;; This function calls:
  7428 ;;		_I2C1_StatusCallback
  7429 ;; This function is called by:
  7430 ;;		_INTERRUPT_InterruptManager
  7431 ;; This function uses a non-reentrant model
  7432 ;;
  7433                           
  7434                           
  7435                           ;psect for function _I2C1_ISR
  7436  0FAC                     _I2C1_ISR:	
  7437                           
  7438                           ;i2c1.c: 59: uint8_t i2c_data = 0x55;
  7439                           
  7440                           ;incstack = 0
  7441                           ; Regs used in _I2C1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7442  0FAC  3055               	movlw	85
  7443  0FAD  00F7               	movwf	??_I2C1_ISR
  7444  0FAE  0877               	movf	??_I2C1_ISR,w
  7445  0FAF  00F8               	movwf	I2C1_ISR@i2c_data
  7446                           
  7447                           ;i2c1.c: 64: PIR1bits.SSP1IF = 0;
  7448  0FB0  0020               	movlb	0	; select bank0
  7449  0FB1  1191               	bcf	17,3	;volatile
  7450                           
  7451                           ;i2c1.c: 65: i2c_data = SSP1BUF;
  7452  0FB2  0024               	movlb	4	; select bank4
  7453  0FB3  0811               	movf	17,w	;volatile
  7454  0FB4  00F7               	movwf	??_I2C1_ISR
  7455  0FB5  0877               	movf	??_I2C1_ISR,w
  7456  0FB6  00F8               	movwf	I2C1_ISR@i2c_data
  7457                           
  7458                           ;i2c1.c: 66: if(1 == SSP1STATbits.R_nW)
  7459  0FB7  1D14               	btfss	20,2	;volatile
  7460  0FB8  2FC0               	goto	i1l64
  7461                           
  7462                           ;i2c1.c: 67: {
  7463                           ;i2c1.c: 68: if((1 == SSP1STATbits.D_nA) && (1 == SSP1CON2bits.ACKSTAT))
  7464  0FB9  1A94               	btfsc	20,5	;volatile
  7465  0FBA  1F16               	btfss	22,6	;volatile
  7466  0FBB  2FBE               	goto	i1l3066
  7467                           
  7468                           ;i2c1.c: 69: {
  7469                           ;i2c1.c: 71: I2C1_StatusCallback(I2C1_SLAVE_READ_COMPLETED);
  7470  0FBC  3003               	movlw	3
  7471  0FBD  2FCE               	goto	L4
  7472  0FBE                     i1l3066:	
  7473                           ;i2c1.c: 72: }
  7474                           
  7475                           
  7476                           ;i2c1.c: 73: else
  7477                           ;i2c1.c: 74: {
  7478                           ;i2c1.c: 76: I2C1_StatusCallback(I2C1_SLAVE_READ_REQUEST);
  7479  0FBE  3001               	movlw	1
  7480  0FBF  2FCE               	goto	L4
  7481  0FC0                     i1l64:	
  7482                           ;i2c1.c: 77: }
  7483                           ;i2c1.c: 78: }
  7484                           
  7485                           
  7486                           ;i2c1.c: 79: else if(0 == SSP1STATbits.D_nA)
  7487  0FC0  1A94               	btfsc	20,5	;volatile
  7488  0FC1  2FC9               	goto	i1l3074
  7489                           
  7490                           ;i2c1.c: 80: {
  7491                           ;i2c1.c: 83: if(0x00 == i2c_data)
  7492  0FC2  0878               	movf	I2C1_ISR@i2c_data,w
  7493  0FC3  1D03               	btfss	3,2
  7494  0FC4  2FC7               	goto	i1l3072
  7495                           
  7496                           ;i2c1.c: 84: {
  7497                           ;i2c1.c: 86: I2C1_StatusCallback(I2C1_SLAVE_GENERAL_CALL_REQUEST);
  7498  0FC5  3004               	movlw	4
  7499  0FC6  2FCE               	goto	L4
  7500  0FC7                     i1l3072:	
  7501                           ;i2c1.c: 87: }
  7502                           
  7503                           
  7504                           ;i2c1.c: 88: else
  7505                           ;i2c1.c: 89: {
  7506                           ;i2c1.c: 91: I2C1_StatusCallback(I2C1_SLAVE_WRITE_REQUEST);
  7507  0FC7  3000               	movlw	0
  7508  0FC8  2FCE               	goto	L4
  7509  0FC9                     i1l3074:	
  7510                           ;i2c1.c: 92: }
  7511                           ;i2c1.c: 93: }
  7512                           
  7513                           
  7514                           ;i2c1.c: 94: else
  7515                           ;i2c1.c: 95: {
  7516                           ;i2c1.c: 96: I2C_slaveWriteData = i2c_data;
  7517  0FC9  0878               	movf	I2C1_ISR@i2c_data,w
  7518  0FCA  00F7               	movwf	??_I2C1_ISR
  7519  0FCB  0877               	movf	??_I2C1_ISR,w
  7520  0FCC  00FD               	movwf	_I2C_slaveWriteData	;volatile
  7521                           
  7522                           ;i2c1.c: 99: I2C1_StatusCallback(I2C1_SLAVE_WRITE_COMPLETED);
  7523  0FCD  3002               	movlw	2
  7524  0FCE                     L4:	
  7525  0FCE  3184  249C         	fcall	_I2C1_StatusCallback
  7526                           
  7527                           ;i2c1.c: 100: }
  7528                           ;i2c1.c: 102: SSP1CON1bits.CKP = 1;
  7529  0FD0  0024               	movlb	4	; select bank4
  7530  0FD1  1615               	bsf	21,4	;volatile
  7531  0FD2  0008               	return
  7532  0FD3                     __end_of_I2C1_ISR:	
  7533                           
  7534                           	psect	text43
  7535  049C                     __ptext43:	
  7536 ;; *************** function _I2C1_StatusCallback *****************
  7537 ;; Defined at:
  7538 ;;		line 106 in file "mcc_generated_files/i2c1.c"
  7539 ;; Parameters:    Size  Location     Type
  7540 ;;  i2c_bus_stat    1    wreg     enum E3104
  7541 ;; Auto vars:     Size  Location     Type
  7542 ;;  i2c_bus_stat    1    5[COMMON] enum E3104
  7543 ;;  pdata           1    6[COMMON] PTR unsigned char 
  7544 ;;		 -> type_no_data(1), PROTOCOL_Send_uint8_t@pbuf(1), sendbuf(16), readbuf.length(1), 
  7545 ;;		 -> readbuf.type(1), readbuf(5), position(6), 
  7546 ;; Return value:  Size  Location     Type
  7547 ;;                  1    wreg      void 
  7548 ;; Registers used:
  7549 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7550 ;; Tracked objects:
  7551 ;;		On entry : 0/0
  7552 ;;		On exit  : 0/0
  7553 ;;		Unchanged: 0/0
  7554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7556 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7557 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7558 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7559 ;;Total ram usage:        3 bytes
  7560 ;; Hardware stack levels used:    1
  7561 ;; Hardware stack levels required when called:    2
  7562 ;; This function calls:
  7563 ;;		_PROTOCOL_Backplane_Slave_Enabled
  7564 ;;		_PROTOCOL_I2C_GET
  7565 ;;		_PROTOCOL_I2C_SEN
  7566 ;;		_PROTOCOL_I2C_WHO
  7567 ;;		_PROTOCOL_INV
  7568 ;;		_PROTOCOL_RST
  7569 ;;		_PROTOCOL_Read_Lock
  7570 ;;		i1_PROTOCOL_EXT
  7571 ;;		i1_PROTOCOL_SAV
  7572 ;;		i1_PROTOCOL_SET
  7573 ;;		i1_PROTOCOL_STA
  7574 ;;		i1_PROTOCOL_STP
  7575 ;; This function is called by:
  7576 ;;		_I2C1_ISR
  7577 ;; This function uses a non-reentrant model
  7578 ;;
  7579                           
  7580                           
  7581                           ;psect for function _I2C1_StatusCallback
  7582  049C                     _I2C1_StatusCallback:	
  7583                           
  7584                           ;incstack = 0
  7585                           ; Regs used in _I2C1_StatusCallback: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7586                           ;I2C1_StatusCallback@i2c_bus_state stored from wreg
  7587  049C  00F5               	movwf	I2C1_StatusCallback@i2c_bus_state
  7588                           
  7589                           ;i2c1.c: 109: static uint8_t slaveWriteType = SLAVE_NORMAL_DATA;
  7590                           ;i2c1.c: 110: static uint8_t next = 0x00;
  7591                           ;i2c1.c: 111: static uint8_t ext_len = 0;
  7592                           ;i2c1.c: 112: static uint8_t ext_cnt = 0;
  7593                           ;i2c1.c: 113: static char ext_buf[48];
  7594                           ;i2c1.c: 114: uint8_t *pdata;
  7595                           ;i2c1.c: 115: switch (i2c_bus_state)
  7596  049D  2D55               	goto	i1l2868
  7597  049E                     i1l86:	
  7598                           ;i2c1.c: 116: {
  7599                           ;i2c1.c: 117: case I2C1_SLAVE_WRITE_REQUEST:
  7600                           
  7601                           
  7602                           ;i2c1.c: 118: slaveWriteType = SLAVE_DATA_ADDRESS;
  7603  049E  0020               	movlb	0	; select bank0
  7604  049F  01E6               	clrf	I2C1_StatusCallback@slaveWriteType
  7605  04A0  0AE6               	incf	I2C1_StatusCallback@slaveWriteType,f
  7606                           
  7607                           ;i2c1.c: 119: break;
  7608  04A1  0008               	return
  7609  04A2                     i1l2794:	
  7610                           ;i2c1.c: 121: case I2C1_SLAVE_GENERAL_CALL_REQUEST:
  7611                           
  7612                           
  7613                           ;i2c1.c: 123: slaveWriteType = SLAVE_GENERAL_CALL;
  7614  04A2  3002               	movlw	2
  7615  04A3  00F4               	movwf	??_I2C1_StatusCallback
  7616  04A4  0874               	movf	??_I2C1_StatusCallback,w
  7617  04A5  0020               	movlb	0	; select bank0
  7618  04A6  00E6               	movwf	I2C1_StatusCallback@slaveWriteType
  7619                           
  7620                           ;i2c1.c: 124: break;
  7621  04A7  0008               	return
  7622  04A8                     i1l2796:	
  7623                           ;i2c1.c: 132: case 0x01:
  7624                           
  7625                           ;i2c1.c: 131: switch(next) {
  7626                           
  7627                           ;i2c1.c: 129: {
  7628                           ;i2c1.c: 130: case SLAVE_DATA_ADDRESS:
  7629                           
  7630                           ;i2c1.c: 128: switch(slaveWriteType)
  7631                           
  7632                           ;i2c1.c: 126: case I2C1_SLAVE_WRITE_COMPLETED:
  7633                           
  7634                           
  7635                           ;i2c1.c: 133: PROTOCOL_SET(I2C_slaveWriteData);
  7636  04A8  087D               	movf	_I2C_slaveWriteData,w	;volatile
  7637  04A9  318D  25B1  3184   	fcall	i1_PROTOCOL_SET
  7638  04AC  2D17               	goto	i1l2842
  7639  04AD                     i1l2800:	
  7640                           ;i2c1.c: 138: case 0x04:
  7641                           
  7642                           ;i2c1.c: 137: switch(I2C_slaveWriteData) {
  7643                           
  7644                           ;i2c1.c: 136: case 0x00:
  7645                           
  7646                           ;i2c1.c: 135: break;
  7647                           
  7648                           ;i2c1.c: 134: next = 0x00;
  7649                           
  7650                           
  7651                           ;i2c1.c: 139: PROTOCOL_STA();
  7652  04AD  318D  2586  3184   	fcall	i1_PROTOCOL_STA
  7653                           
  7654                           ;i2c1.c: 140: break;
  7655  04B0  2D30               	goto	i1l2852
  7656  04B1                     i1l2802:	
  7657                           ;i2c1.c: 141: case 0x05:
  7658                           
  7659                           
  7660                           ;i2c1.c: 142: PROTOCOL_STP();
  7661  04B1  318D  2572  3184   	fcall	i1_PROTOCOL_STP
  7662                           
  7663                           ;i2c1.c: 143: break;
  7664  04B4  2D30               	goto	i1l2852
  7665  04B5                     i1l2804:	
  7666                           ;i2c1.c: 144: case 0x03:
  7667                           
  7668                           
  7669                           ;i2c1.c: 145: PROTOCOL_SAV();
  7670  04B5  318D  25D6  3184   	fcall	i1_PROTOCOL_SAV
  7671                           
  7672                           ;i2c1.c: 146: break;
  7673  04B8  2D30               	goto	i1l2852
  7674  04B9                     i1l2806:	
  7675                           ;i2c1.c: 147: case 0x06:
  7676                           
  7677                           
  7678                           ;i2c1.c: 148: PROTOCOL_INV();
  7679  04B9  318D  2582  3184   	fcall	_PROTOCOL_INV
  7680                           
  7681                           ;i2c1.c: 149: break;
  7682  04BC  2D30               	goto	i1l2852
  7683  04BD                     i1l2808:	
  7684                           ;i2c1.c: 150: case 0x0c:
  7685                           
  7686                           
  7687                           ;i2c1.c: 151: PROTOCOL_RST();
  7688  04BD  318D  25FA  3184   	fcall	_PROTOCOL_RST
  7689                           
  7690                           ;i2c1.c: 152: break;
  7691  04C0  2D30               	goto	i1l2852
  7692  04C1                     i1l103:	
  7693                           ;i2c1.c: 153: case 0x08:
  7694                           
  7695                           
  7696                           ;i2c1.c: 154: next = 0x01;
  7697  04C1  01E5               	clrf	I2C1_StatusCallback@next
  7698  04C2  0AE5               	incf	I2C1_StatusCallback@next,f
  7699                           
  7700                           ;i2c1.c: 155: break;
  7701  04C3  2D30               	goto	i1l2852
  7702  04C4                     i1l2810:	
  7703                           ;i2c1.c: 156: case 0x0a:
  7704                           
  7705                           
  7706                           ;i2c1.c: 157: next = 0x02;
  7707  04C4  3002               	movlw	2
  7708  04C5  2CF8               	goto	L5
  7709  04C6                     i1l2814:	
  7710                           ;i2c1.c: 159: }
  7711                           
  7712                           ;i2c1.c: 158: break;
  7713                           
  7714  04C6  087D               	movf	_I2C_slaveWriteData,w	;volatile
  7715                           
  7716                           ; Switch size 1, requested type "space"
  7717                           ; Number of cases is 7, Range of values is 3 to 12
  7718                           ; switch strategies available:
  7719                           ; Name         Instructions Cycles
  7720                           ; simple_byte           22    12 (average)
  7721                           ; direct_byte           29     9 (fixed)
  7722                           ; jumptable            263     9 (fixed)
  7723                           ;	Chosen strategy is simple_byte
  7724  04C7  3A03               	xorlw	3	; case 3
  7725  04C8  1903               	skipnz
  7726  04C9  2CB5               	goto	i1l2804
  7727  04CA  3A07               	xorlw	7	; case 4
  7728  04CB  1903               	skipnz
  7729  04CC  2CAD               	goto	i1l2800
  7730  04CD  3A01               	xorlw	1	; case 5
  7731  04CE  1903               	skipnz
  7732  04CF  2CB1               	goto	i1l2802
  7733  04D0  3A03               	xorlw	3	; case 6
  7734  04D1  1903               	skipnz
  7735  04D2  2CB9               	goto	i1l2806
  7736  04D3  3A0E               	xorlw	14	; case 8
  7737  04D4  1903               	skipnz
  7738  04D5  2CC1               	goto	i1l103
  7739  04D6  3A02               	xorlw	2	; case 10
  7740  04D7  1903               	skipnz
  7741  04D8  2CC4               	goto	i1l2810
  7742  04D9  3A06               	xorlw	6	; case 12
  7743  04DA  1903               	skipnz
  7744  04DB  2CBD               	goto	i1l2808
  7745  04DC  2D30               	goto	i1l2852
  7746                           
  7747                           ;i2c1.c: 161: }
  7748                           
  7749                           ;i2c1.c: 160: break;
  7750  04DD  2D30               	goto	i1l2852
  7751  04DE                     i1l2818:	
  7752  04DE  0865               	movf	I2C1_StatusCallback@next,w
  7753                           
  7754                           ; Switch size 1, requested type "space"
  7755                           ; Number of cases is 2, Range of values is 0 to 1
  7756                           ; switch strategies available:
  7757                           ; Name         Instructions Cycles
  7758                           ; simple_byte            7     4 (average)
  7759                           ; direct_byte           10     6 (fixed)
  7760                           ; jumptable            260     6 (fixed)
  7761                           ;	Chosen strategy is simple_byte
  7762  04DF  3A00               	xorlw	0	; case 0
  7763  04E0  1903               	skipnz
  7764  04E1  2CC6               	goto	i1l2814
  7765  04E2  3A01               	xorlw	1	; case 1
  7766  04E3  1903               	skipnz
  7767  04E4  2CA8               	goto	i1l2796
  7768  04E5  2D30               	goto	i1l2852
  7769                           
  7770                           ;i2c1.c: 162: break;
  7771  04E6  2D30               	goto	i1l2852
  7772  04E7                     i1l2820:	
  7773                           ;i2c1.c: 164: case SLAVE_GENERAL_CALL:
  7774                           
  7775                           
  7776                           ;i2c1.c: 165: if (I2C_slaveWriteData == 0x02) {
  7777  04E7  3002               	movlw	2
  7778  04E8  067D               	xorwf	_I2C_slaveWriteData,w	;volatile
  7779  04E9  1D03               	btfss	3,2
  7780  04EA  2D30               	goto	i1l2852
  7781                           
  7782                           ;i2c1.c: 166: SSP1CON2bits.GCEN = 0;
  7783  04EB  0024               	movlb	4	; select bank4
  7784  04EC  1396               	bcf	22,7	;volatile
  7785                           
  7786                           ;i2c1.c: 167: PROTOCOL_Backplane_Slave_Enabled();
  7787  04ED  318D  257E  3184   	fcall	_PROTOCOL_Backplane_Slave_Enabled
  7788                           
  7789                           ;i2c1.c: 168: }
  7790                           ;i2c1.c: 169: break;
  7791  04F0  2D30               	goto	i1l2852
  7792  04F1                     i1l2826:	
  7793                           ;i2c1.c: 173: case 0x02:
  7794                           
  7795                           ;i2c1.c: 172: switch(next) {
  7796                           
  7797                           ;i2c1.c: 171: case SLAVE_NORMAL_DATA:
  7798                           
  7799                           
  7800                           ;i2c1.c: 174: ext_len = I2C_slaveWriteData;
  7801  04F1  087D               	movf	_I2C_slaveWriteData,w	;volatile
  7802  04F2  00F4               	movwf	??_I2C1_StatusCallback
  7803  04F3  0874               	movf	??_I2C1_StatusCallback,w
  7804  04F4  0020               	movlb	0	; select bank0
  7805  04F5  00E4               	movwf	I2C1_StatusCallback@ext_len
  7806                           
  7807                           ;i2c1.c: 175: ext_cnt = 0;
  7808  04F6  01E3               	clrf	I2C1_StatusCallback@ext_cnt
  7809                           
  7810                           ;i2c1.c: 176: next = 0x03;
  7811  04F7  3003               	movlw	3
  7812  04F8                     L5:	
  7813  04F8  00F4               	movwf	??_I2C1_StatusCallback
  7814  04F9  0874               	movf	??_I2C1_StatusCallback,w
  7815  04FA  00E5               	movwf	I2C1_StatusCallback@next
  7816                           
  7817                           ;i2c1.c: 177: break;
  7818  04FB  2D30               	goto	i1l2852
  7819  04FC                     i1l2832:	
  7820                           ;i2c1.c: 178: case 0x03:
  7821                           
  7822                           
  7823                           ;i2c1.c: 179: ext_buf[ext_cnt++] = (char)I2C_slaveWriteData;
  7824  04FC  087D               	movf	_I2C_slaveWriteData,w	;volatile
  7825  04FD  00F4               	movwf	??_I2C1_StatusCallback
  7826  04FE  0863               	movf	I2C1_StatusCallback@ext_cnt,w
  7827  04FF  3EA0               	addlw	(low (I2C1_StatusCallback@ext_buf| (0+256)))& (0+255)
  7828  0500  0086               	movwf	6
  7829  0501  3001               	movlw	1	; select bank3/4
  7830  0502  0087               	movwf	7
  7831  0503  0874               	movf	??_I2C1_StatusCallback,w
  7832  0504  0081               	movwf	1
  7833  0505  3001               	movlw	1
  7834  0506  00F4               	movwf	??_I2C1_StatusCallback
  7835  0507  0874               	movf	??_I2C1_StatusCallback,w
  7836  0508  07E3               	addwf	I2C1_StatusCallback@ext_cnt,f
  7837                           
  7838                           ;i2c1.c: 180: if (ext_cnt >= ext_len) {
  7839  0509  0864               	movf	I2C1_StatusCallback@ext_len,w
  7840  050A  0263               	subwf	I2C1_StatusCallback@ext_cnt,w
  7841  050B  1C03               	skipc
  7842  050C  2D30               	goto	i1l2852
  7843                           
  7844                           ;i2c1.c: 181: if (!PROTOCOL_Read_Lock()) PROTOCOL_EXT(&ext_buf[0]);
  7845  050D  318D  256F  3184   	fcall	_PROTOCOL_Read_Lock
  7846  0510  3A00               	xorlw	0
  7847  0511  1D03               	skipz
  7848  0512  2D17               	goto	i1l2842
  7849  0513  30A0               	movlw	(low (I2C1_StatusCallback@ext_buf| (0+256)))& (0+255)
  7850  0514  3180  2003  3184   	fcall	i1_PROTOCOL_EXT
  7851  0517                     i1l2842:	
  7852                           
  7853                           ;i2c1.c: 182: next = 0x00;
  7854  0517  0020               	movlb	0	; select bank0
  7855  0518  01E5               	clrf	I2C1_StatusCallback@next
  7856                           
  7857                           ;i2c1.c: 185: }
  7858                           
  7859                           ;i2c1.c: 183: }
  7860                           ;i2c1.c: 184: break;
  7861  0519  2D30               	goto	i1l2852
  7862  051A                     i1l2846:	
  7863  051A  0020               	movlb	0	; select bank0
  7864  051B  0865               	movf	I2C1_StatusCallback@next,w
  7865                           
  7866                           ; Switch size 1, requested type "space"
  7867                           ; Number of cases is 2, Range of values is 2 to 3
  7868                           ; switch strategies available:
  7869                           ; Name         Instructions Cycles
  7870                           ; simple_byte            7     4 (average)
  7871                           ; direct_byte           13     9 (fixed)
  7872                           ; jumptable            263     9 (fixed)
  7873                           ;	Chosen strategy is simple_byte
  7874  051C  3A02               	xorlw	2	; case 2
  7875  051D  1903               	skipnz
  7876  051E  2CF1               	goto	i1l2826
  7877  051F  3A01               	xorlw	1	; case 3
  7878  0520  1903               	skipnz
  7879  0521  2CFC               	goto	i1l2832
  7880  0522  2D30               	goto	i1l2852
  7881                           
  7882                           ;i2c1.c: 190: }
  7883                           
  7884                           ;i2c1.c: 188: break;
  7885                           
  7886                           ;i2c1.c: 187: default:
  7887                           
  7888                           ;i2c1.c: 186: break;
  7889  0523  2D30               	goto	i1l2852
  7890  0524                     i1l2850:	
  7891  0524  0020               	movlb	0	; select bank0
  7892  0525  0866               	movf	I2C1_StatusCallback@slaveWriteType,w
  7893                           
  7894                           ; Switch size 1, requested type "space"
  7895                           ; Number of cases is 3, Range of values is 0 to 2
  7896                           ; switch strategies available:
  7897                           ; Name         Instructions Cycles
  7898                           ; simple_byte           10     6 (average)
  7899                           ; direct_byte           12     6 (fixed)
  7900                           ; jumptable            260     6 (fixed)
  7901                           ;	Chosen strategy is simple_byte
  7902  0526  3A00               	xorlw	0	; case 0
  7903  0527  1903               	skipnz
  7904  0528  2D1A               	goto	i1l2846
  7905  0529  3A01               	xorlw	1	; case 1
  7906  052A  1903               	skipnz
  7907  052B  2CDE               	goto	i1l2818
  7908  052C  3A03               	xorlw	3	; case 2
  7909  052D  1903               	skipnz
  7910  052E  2CE7               	goto	i1l2820
  7911  052F  2D30               	goto	i1l2852
  7912  0530                     i1l2852:	
  7913                           
  7914                           ;i2c1.c: 192: slaveWriteType = SLAVE_NORMAL_DATA;
  7915  0530  0020               	movlb	0	; select bank0
  7916  0531  01E6               	clrf	I2C1_StatusCallback@slaveWriteType
  7917                           
  7918                           ;i2c1.c: 193: break;
  7919  0532  0008               	return
  7920  0533                     i1l2854:	
  7921                           ;i2c1.c: 197: {
  7922                           ;i2c1.c: 198: case 0x01:
  7923                           
  7924                           ;i2c1.c: 196: switch (I2C_slaveWriteData)
  7925                           
  7926                           ;i2c1.c: 195: case I2C1_SLAVE_READ_REQUEST:
  7927                           
  7928                           
  7929                           ;i2c1.c: 199: SSP1BUF = PROTOCOL_I2C_WHO();
  7930  0533  318D  256C         	fcall	_PROTOCOL_I2C_WHO
  7931  0535  0024               	movlb	4	; select bank4
  7932  0536  0091               	movwf	17	;volatile
  7933                           
  7934                           ;i2c1.c: 200: break;
  7935  0537  0008               	return
  7936  0538                     i1l2856:	
  7937                           ;i2c1.c: 201: case 0x07:
  7938                           
  7939                           
  7940                           ;i2c1.c: 202: pdata = PROTOCOL_I2C_SEN();
  7941  0538  3187  2749         	fcall	_PROTOCOL_I2C_SEN
  7942  053A  00F4               	movwf	??_I2C1_StatusCallback
  7943  053B  0874               	movf	??_I2C1_StatusCallback,w
  7944  053C  00F6               	movwf	I2C1_StatusCallback@pdata
  7945                           
  7946                           ;i2c1.c: 203: SSP1BUF = *pdata;
  7947  053D  0876               	movf	I2C1_StatusCallback@pdata,w
  7948  053E  0086               	movwf	6
  7949  053F  0187               	clrf	7
  7950  0540  0801               	movf	1,w
  7951  0541  0024               	movlb	4	; select bank4
  7952  0542  0091               	movwf	17	;volatile
  7953                           
  7954                           ;i2c1.c: 204: break;
  7955  0543  0008               	return
  7956  0544                     i1l2860:	
  7957                           ;i2c1.c: 205: case 0x09:
  7958                           
  7959                           
  7960                           ;i2c1.c: 206: SSP1BUF = PROTOCOL_I2C_GET();
  7961  0544  318D  2569         	fcall	_PROTOCOL_I2C_GET
  7962  0546  0024               	movlb	4	; select bank4
  7963  0547  0091               	movwf	17	;volatile
  7964                           
  7965                           ;i2c1.c: 208: }
  7966                           
  7967                           ;i2c1.c: 207: break;
  7968  0548  0008               	return
  7969  0549                     i1l2864:	
  7970  0549  087D               	movf	_I2C_slaveWriteData,w	;volatile
  7971                           
  7972                           ; Switch size 1, requested type "space"
  7973                           ; Number of cases is 3, Range of values is 1 to 9
  7974                           ; switch strategies available:
  7975                           ; Name         Instructions Cycles
  7976                           ; simple_byte           10     6 (average)
  7977                           ; direct_byte           27     9 (fixed)
  7978                           ; jumptable            263     9 (fixed)
  7979                           ;	Chosen strategy is simple_byte
  7980  054A  3A01               	xorlw	1	; case 1
  7981  054B  1903               	skipnz
  7982  054C  2D33               	goto	i1l2854
  7983  054D  3A06               	xorlw	6	; case 7
  7984  054E  1903               	skipnz
  7985  054F  2D38               	goto	i1l2856
  7986  0550  3A0E               	xorlw	14	; case 9
  7987  0551  1903               	skipnz
  7988  0552  2D44               	goto	i1l2860
  7989  0553  2D5F               	goto	i1l124
  7990                           
  7991                           ;i2c1.c: 216: }
  7992                           
  7993                           ;i2c1.c: 214: break;
  7994                           
  7995                           ;i2c1.c: 213: default:
  7996                           
  7997                           ;i2c1.c: 212: break;
  7998                           
  7999                           ;i2c1.c: 211: case I2C1_SLAVE_READ_COMPLETED:
  8000                           
  8001                           ;i2c1.c: 209: break;
  8002  0554  0008               	return
  8003  0555                     i1l2868:	
  8004  0555  0875               	movf	I2C1_StatusCallback@i2c_bus_state,w
  8005                           
  8006                           ; Switch size 1, requested type "space"
  8007                           ; Number of cases is 5, Range of values is 0 to 4
  8008                           ; switch strategies available:
  8009                           ; Name         Instructions Cycles
  8010                           ; direct_byte           16     6 (fixed)
  8011                           ; simple_byte           16     9 (average)
  8012                           ; jumptable            260     6 (fixed)
  8013                           ;	Chosen strategy is direct_byte
  8014  0556  0084               	movwf	4
  8015  0557  3005               	movlw	5
  8016  0558  0204               	subwf	4,w
  8017  0559  1803               	skipnc
  8018  055A  0008               	return
  8019  055B  3188               	movlp	high i1S3340
  8020  055C  3504               	lslf	4,w
  8021  055D  3E00               	addlw	low i1S3340
  8022  055E  0082               	movwf	2
  8023  055F                     i1l124:	
  8024  055F  0008               	return
  8025  0560                     __end_of_I2C1_StatusCallback:	
  8026                           
  8027                           	psect	swtext1
  8028  0800                     __pswtext1:	
  8029  0800                     i1S3340:	
  8030  0800  3184  2C9E         	ljmp	i1l86
  8031  0802  3185  2D49         	ljmp	i1l2864
  8032  0804  3185  2D24         	ljmp	i1l2850
  8033  0806  3185  2D5F         	ljmp	i1l124
  8034  0808  3184  2CA2         	ljmp	i1l2794
  8035                           
  8036                           	psect	text44
  8037  0D72                     __ptext44:	
  8038 ;; *************** function i1_PROTOCOL_STP *****************
  8039 ;; Defined at:
  8040 ;;		line 103 in file "protocol.c"
  8041 ;; Parameters:    Size  Location     Type
  8042 ;;		None
  8043 ;; Auto vars:     Size  Location     Type
  8044 ;;		None
  8045 ;; Return value:  Size  Location     Type
  8046 ;;                  1    wreg      void 
  8047 ;; Registers used:
  8048 ;;		wreg, status,2, status,0
  8049 ;; Tracked objects:
  8050 ;;		On entry : 0/0
  8051 ;;		On exit  : 0/0
  8052 ;;		Unchanged: 0/0
  8053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8055 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8057 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8058 ;;Total ram usage:        0 bytes
  8059 ;; Hardware stack levels used:    1
  8060 ;; This function calls:
  8061 ;;		Nothing
  8062 ;; This function is called by:
  8063 ;;		_I2C1_StatusCallback
  8064 ;; This function uses a non-reentrant model
  8065 ;;
  8066                           
  8067                           
  8068                           ;psect for function i1_PROTOCOL_STP
  8069  0D72                     i1_PROTOCOL_STP:	
  8070                           
  8071                           ;protocol.c: 105: running = 0;
  8072                           
  8073                           ;incstack = 0
  8074                           ; Regs used in i1_PROTOCOL_STP: [wreg+status,2+status,0]
  8075  0D72  0020               	movlb	0	; select bank0
  8076  0D73  01DA               	clrf	_running
  8077  0D74  0008               	return
  8078  0D75                     __end_ofi1_PROTOCOL_STP:	
  8079                           
  8080                           	psect	text45
  8081  0D86                     __ptext45:	
  8082 ;; *************** function i1_PROTOCOL_STA *****************
  8083 ;; Defined at:
  8084 ;;		line 98 in file "protocol.c"
  8085 ;; Parameters:    Size  Location     Type
  8086 ;;		None
  8087 ;; Auto vars:     Size  Location     Type
  8088 ;;		None
  8089 ;; Return value:  Size  Location     Type
  8090 ;;                  1    wreg      void 
  8091 ;; Registers used:
  8092 ;;		wreg, status,2, status,0
  8093 ;; Tracked objects:
  8094 ;;		On entry : 0/0
  8095 ;;		On exit  : 0/0
  8096 ;;		Unchanged: 0/0
  8097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8099 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8101 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8102 ;;Total ram usage:        0 bytes
  8103 ;; Hardware stack levels used:    1
  8104 ;; This function calls:
  8105 ;;		Nothing
  8106 ;; This function is called by:
  8107 ;;		_I2C1_StatusCallback
  8108 ;; This function uses a non-reentrant model
  8109 ;;
  8110                           
  8111                           
  8112                           ;psect for function i1_PROTOCOL_STA
  8113  0D86                     i1_PROTOCOL_STA:	
  8114                           
  8115                           ;protocol.c: 100: running = 1;
  8116                           
  8117                           ;incstack = 0
  8118                           ; Regs used in i1_PROTOCOL_STA: [wreg+status,2+status,0]
  8119  0D86  0020               	movlb	0	; select bank0
  8120  0D87  01DA               	clrf	_running
  8121  0D88  0ADA               	incf	_running,f
  8122  0D89  0008               	return
  8123  0D8A                     __end_ofi1_PROTOCOL_STA:	
  8124                           
  8125                           	psect	text46
  8126  0DB1                     __ptext46:	
  8127 ;; *************** function i1_PROTOCOL_SET *****************
  8128 ;; Defined at:
  8129 ;;		line 116 in file "protocol.c"
  8130 ;; Parameters:    Size  Location     Type
  8131 ;;  value_          1    wreg     unsigned char 
  8132 ;; Auto vars:     Size  Location     Type
  8133 ;;  value_          1    1[COMMON] unsigned char 
  8134 ;; Return value:  Size  Location     Type
  8135 ;;                  1    wreg      void 
  8136 ;; Registers used:
  8137 ;;		wreg, status,2, status,0
  8138 ;; Tracked objects:
  8139 ;;		On entry : 0/0
  8140 ;;		On exit  : 0/0
  8141 ;;		Unchanged: 0/0
  8142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8144 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8145 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8146 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8147 ;;Total ram usage:        2 bytes
  8148 ;; Hardware stack levels used:    1
  8149 ;; This function calls:
  8150 ;;		Nothing
  8151 ;; This function is called by:
  8152 ;;		_I2C1_StatusCallback
  8153 ;; This function uses a non-reentrant model
  8154 ;;
  8155                           
  8156                           
  8157                           ;psect for function i1_PROTOCOL_SET
  8158  0DB1                     i1_PROTOCOL_SET:	
  8159                           
  8160                           ;incstack = 0
  8161                           ; Regs used in i1_PROTOCOL_SET: [wreg+status,2+status,0]
  8162                           ;i1PROTOCOL_SET@value_ stored from wreg
  8163  0DB1  00F1               	movwf	i1PROTOCOL_SET@value_
  8164                           
  8165                           ;protocol.c: 117: value = value_;
  8166  0DB2  0871               	movf	i1PROTOCOL_SET@value_,w
  8167  0DB3  00F0               	movwf	??i1_PROTOCOL_SET
  8168  0DB4  0870               	movf	??i1_PROTOCOL_SET,w
  8169  0DB5  0020               	movlb	0	; select bank0
  8170  0DB6  00DC               	movwf	_value
  8171  0DB7  0008               	return
  8172  0DB8                     __end_ofi1_PROTOCOL_SET:	
  8173                           
  8174                           	psect	text47
  8175  0DD6                     __ptext47:	
  8176 ;; *************** function i1_PROTOCOL_SAV *****************
  8177 ;; Defined at:
  8178 ;;		line 112 in file "protocol.c"
  8179 ;; Parameters:    Size  Location     Type
  8180 ;;		None
  8181 ;; Auto vars:     Size  Location     Type
  8182 ;;		None
  8183 ;; Return value:  Size  Location     Type
  8184 ;;                  1    wreg      void 
  8185 ;; Registers used:
  8186 ;;		wreg, status,2, status,0, pclath, cstack
  8187 ;; Tracked objects:
  8188 ;;		On entry : 0/0
  8189 ;;		On exit  : 0/0
  8190 ;;		Unchanged: 0/0
  8191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8194 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8195 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8196 ;;Total ram usage:        1 bytes
  8197 ;; Hardware stack levels used:    1
  8198 ;; Hardware stack levels required when called:    1
  8199 ;; This function calls:
  8200 ;;		i1_DATAEE_WriteByte
  8201 ;; This function is called by:
  8202 ;;		_I2C1_StatusCallback
  8203 ;; This function uses a non-reentrant model
  8204 ;;
  8205                           
  8206                           
  8207                           ;psect for function i1_PROTOCOL_SAV
  8208  0DD6                     i1_PROTOCOL_SAV:	
  8209                           
  8210                           ;protocol.c: 113: DATAEE_WriteByte(1, value);
  8211                           
  8212                           ;incstack = 0
  8213                           ; Regs used in i1_PROTOCOL_SAV: [wreg+status,2+status,0+pclath+cstack]
  8214  0DD6  0020               	movlb	0	; select bank0
  8215  0DD7  085C               	movf	_value,w
  8216  0DD8  00F3               	movwf	??i1_PROTOCOL_SAV
  8217  0DD9  0873               	movf	??i1_PROTOCOL_SAV,w
  8218  0DDA  00F0               	movwf	i1DATAEE_WriteByte@bData
  8219  0DDB  3001               	movlw	1
  8220  0DDC  318E  26E9         	fcall	i1_DATAEE_WriteByte
  8221  0DDE  0008               	return
  8222  0DDF                     __end_ofi1_PROTOCOL_SAV:	
  8223                           
  8224                           	psect	text48
  8225  0EE9                     __ptext48:	
  8226 ;; *************** function i1_DATAEE_WriteByte *****************
  8227 ;; Defined at:
  8228 ;;		line 180 in file "mcc_generated_files/memory.c"
  8229 ;; Parameters:    Size  Location     Type
  8230 ;;  bAdd            1    wreg     unsigned char 
  8231 ;;  bData           1    0[COMMON] unsigned char 
  8232 ;; Auto vars:     Size  Location     Type
  8233 ;;  bAdd            1    1[COMMON] unsigned char 
  8234 ;;  DATAEE_Write    1    2[COMMON] unsigned char 
  8235 ;; Return value:  Size  Location     Type
  8236 ;;                  1    wreg      void 
  8237 ;; Registers used:
  8238 ;;		wreg, status,2, status,0
  8239 ;; Tracked objects:
  8240 ;;		On entry : 0/0
  8241 ;;		On exit  : 0/0
  8242 ;;		Unchanged: 0/0
  8243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8244 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8245 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8247 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8248 ;;Total ram usage:        3 bytes
  8249 ;; Hardware stack levels used:    1
  8250 ;; This function calls:
  8251 ;;		Nothing
  8252 ;; This function is called by:
  8253 ;;		i1_PROTOCOL_SAV
  8254 ;; This function uses a non-reentrant model
  8255 ;;
  8256                           
  8257                           
  8258                           ;psect for function i1_DATAEE_WriteByte
  8259  0EE9                     i1_DATAEE_WriteByte:	
  8260                           
  8261                           ;incstack = 0
  8262                           ; Regs used in i1_DATAEE_WriteByte: [wreg+status,2+status,0]
  8263                           ;i1DATAEE_WriteByte@bAdd stored from wreg
  8264  0EE9  00F1               	movwf	i1DATAEE_WriteByte@bAdd
  8265                           
  8266                           ;memory.c: 182: uint8_t GIEBitValue = 0;
  8267  0EEA  01F2               	clrf	i1DATAEE_WriteByte@GIEBitValue
  8268                           
  8269                           ;memory.c: 184: EEADRL = (bAdd & 0x0ff);
  8270  0EEB  0871               	movf	i1DATAEE_WriteByte@bAdd,w
  8271  0EEC  0023               	movlb	3	; select bank3
  8272  0EED  0091               	movwf	17	;volatile
  8273                           
  8274                           ;memory.c: 185: EEDATL = bData;
  8275  0EEE  0870               	movf	i1DATAEE_WriteByte@bData,w
  8276  0EEF  0093               	movwf	19	;volatile
  8277                           
  8278                           ;memory.c: 186: EECON1bits.EEPGD = 0;
  8279  0EF0  1395               	bcf	21,7	;volsfr
  8280                           
  8281                           ;memory.c: 187: EECON1bits.CFGS = 0;
  8282  0EF1  1315               	bcf	21,6	;volsfr
  8283                           
  8284                           ;memory.c: 188: EECON1bits.WREN = 1;
  8285  0EF2  1515               	bsf	21,2	;volsfr
  8286                           
  8287                           ;memory.c: 190: GIEBitValue = INTCONbits.GIE;
  8288  0EF3  3000               	movlw	0
  8289  0EF4  1B8B               	btfsc	11,7	;volatile
  8290  0EF5  3001               	movlw	1
  8291  0EF6  00F2               	movwf	i1DATAEE_WriteByte@GIEBitValue
  8292                           
  8293                           ;memory.c: 191: INTCONbits.GIE = 0;
  8294  0EF7  138B               	bcf	11,7	;volatile
  8295                           
  8296                           ;memory.c: 192: EECON2 = 0x55;
  8297  0EF8  3055               	movlw	85
  8298  0EF9  0096               	movwf	22	;volsfr
  8299                           
  8300                           ;memory.c: 193: EECON2 = 0xAA;
  8301  0EFA  30AA               	movlw	170
  8302  0EFB  0096               	movwf	22	;volsfr
  8303                           
  8304                           ;memory.c: 194: EECON1bits.WR = 1;
  8305  0EFC  1495               	bsf	21,1	;volsfr
  8306  0EFD                     i1l321:	
  8307                           ;memory.c: 197: {
  8308                           
  8309                           ;memory.c: 196: while (EECON1bits.WR)
  8310                           
  8311  0EFD  1895               	btfsc	21,1	;volsfr
  8312  0EFE  2EFD               	goto	i1l321
  8313                           
  8314                           ;memory.c: 198: }
  8315                           ;memory.c: 200: EECON1bits.WREN = 0;
  8316  0EFF  1115               	bcf	21,2	;volsfr
  8317                           
  8318                           ;memory.c: 201: INTCONbits.GIE = GIEBitValue;
  8319  0F00  0C72               	rrf	i1DATAEE_WriteByte@GIEBitValue,w
  8320  0F01  1C03               	skipc
  8321  0F02  138B               	bcf	11,7	;volatile
  8322  0F03  1803               	skipnc
  8323  0F04  178B               	bsf	11,7	;volatile
  8324  0F05  0008               	return
  8325  0F06                     __end_ofi1_DATAEE_WriteByte:	
  8326                           
  8327                           	psect	text49
  8328  0003                     __ptext49:	
  8329 ;; *************** function i1_PROTOCOL_EXT *****************
  8330 ;; Defined at:
  8331 ;;		line 121 in file "protocol.c"
  8332 ;; Parameters:    Size  Location     Type
  8333 ;;  char_buf        1    wreg     PTR unsigned char 
  8334 ;;		 -> buf(48), I2C1_StatusCallback@ext_buf(48), 
  8335 ;; Auto vars:     Size  Location     Type
  8336 ;;  char_buf        1  (no storage) PTR unsigned char 
  8337 ;;		 -> buf(48), I2C1_StatusCallback@ext_buf(48), 
  8338 ;; Return value:  Size  Location     Type
  8339 ;;                  1    wreg      void 
  8340 ;; Registers used:
  8341 ;;		wreg, status,2, status,0
  8342 ;; Tracked objects:
  8343 ;;		On entry : 0/0
  8344 ;;		On exit  : 0/0
  8345 ;;		Unchanged: 0/0
  8346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8348 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8350 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8351 ;;Total ram usage:        0 bytes
  8352 ;; Hardware stack levels used:    1
  8353 ;; This function calls:
  8354 ;;		Nothing
  8355 ;; This function is called by:
  8356 ;;		_I2C1_StatusCallback
  8357 ;; This function uses a non-reentrant model
  8358 ;;
  8359                           
  8360                           
  8361                           ;psect for function i1_PROTOCOL_EXT
  8362  0003                     i1_PROTOCOL_EXT:	
  8363                           
  8364                           ;incstack = 0
  8365                           ; Regs used in i1_PROTOCOL_EXT: [wreg+status,2+status,0]
  8366  0003  0008               	return
  8367  0004                     __end_ofi1_PROTOCOL_EXT:	
  8368                           
  8369                           	psect	text50
  8370  0D6F                     __ptext50:	
  8371 ;; *************** function _PROTOCOL_Read_Lock *****************
  8372 ;; Defined at:
  8373 ;;		line 129 in file "protocol.c"
  8374 ;; Parameters:    Size  Location     Type
  8375 ;;		None
  8376 ;; Auto vars:     Size  Location     Type
  8377 ;;		None
  8378 ;; Return value:  Size  Location     Type
  8379 ;;                  1    wreg      unsigned char 
  8380 ;; Registers used:
  8381 ;;		wreg
  8382 ;; Tracked objects:
  8383 ;;		On entry : 0/0
  8384 ;;		On exit  : 0/0
  8385 ;;		Unchanged: 0/0
  8386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8390 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8391 ;;Total ram usage:        0 bytes
  8392 ;; Hardware stack levels used:    1
  8393 ;; This function calls:
  8394 ;;		Nothing
  8395 ;; This function is called by:
  8396 ;;		_I2C1_StatusCallback
  8397 ;; This function uses a non-reentrant model
  8398 ;;
  8399                           
  8400                           
  8401                           ;psect for function _PROTOCOL_Read_Lock
  8402  0D6F                     _PROTOCOL_Read_Lock:	
  8403                           
  8404                           ;protocol.c: 130: return locked;
  8405                           
  8406                           ;incstack = 0
  8407                           ; Regs used in _PROTOCOL_Read_Lock: [wreg]
  8408  0D6F  0020               	movlb	0	; select bank0
  8409  0D70  085B               	movf	_locked,w
  8410  0D71  0008               	return
  8411  0D72                     __end_of_PROTOCOL_Read_Lock:	
  8412                           
  8413                           	psect	text51
  8414  0DFA                     __ptext51:	
  8415 ;; *************** function _PROTOCOL_RST *****************
  8416 ;; Defined at:
  8417 ;;		line 285 in file "protocol.c"
  8418 ;; Parameters:    Size  Location     Type
  8419 ;;		None
  8420 ;; Auto vars:     Size  Location     Type
  8421 ;;		None
  8422 ;; Return value:  Size  Location     Type
  8423 ;;                  1    wreg      void 
  8424 ;; Registers used:
  8425 ;;		wreg, status,2, status,0
  8426 ;; Tracked objects:
  8427 ;;		On entry : 0/0
  8428 ;;		On exit  : 0/0
  8429 ;;		Unchanged: 0/0
  8430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8432 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8433 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8434 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8435 ;;Total ram usage:        1 bytes
  8436 ;; Hardware stack levels used:    1
  8437 ;; This function calls:
  8438 ;;		Nothing
  8439 ;; This function is called by:
  8440 ;;		_I2C1_StatusCallback
  8441 ;; This function uses a non-reentrant model
  8442 ;;
  8443                           
  8444                           
  8445                           ;psect for function _PROTOCOL_RST
  8446  0DFA                     _PROTOCOL_RST:	
  8447                           
  8448                           ;protocol.c: 286: if (readbuf.status != TLV_SET) {
  8449                           
  8450                           ;incstack = 0
  8451                           ; Regs used in _PROTOCOL_RST: [wreg+status,2+status,0]
  8452  0DFA  0020               	movlb	0	; select bank0
  8453  0DFB  086A               	movf	_readbuf+3,w
  8454  0DFC  1903               	btfsc	3,2
  8455  0DFD  0008               	return
  8456                           
  8457                           ;protocol.c: 287: readbuf.buf_cnt = 0;
  8458  0DFE  01EB               	clrf	_readbuf+4
  8459                           
  8460                           ;protocol.c: 288: readbuf.status = COMPLETE;
  8461  0DFF  3003               	movlw	3
  8462  0E00  00F0               	movwf	??_PROTOCOL_RST
  8463  0E01  0870               	movf	??_PROTOCOL_RST,w
  8464  0E02  00EA               	movwf	_readbuf+3
  8465  0E03  0008               	return
  8466  0E04                     __end_of_PROTOCOL_RST:	
  8467                           
  8468                           	psect	text52
  8469  0D82                     __ptext52:	
  8470 ;; *************** function _PROTOCOL_INV *****************
  8471 ;; Defined at:
  8472 ;;		line 108 in file "protocol.c"
  8473 ;; Parameters:    Size  Location     Type
  8474 ;;		None
  8475 ;; Auto vars:     Size  Location     Type
  8476 ;;		None
  8477 ;; Return value:  Size  Location     Type
  8478 ;;                  1    wreg      void 
  8479 ;; Registers used:
  8480 ;;		None
  8481 ;; Tracked objects:
  8482 ;;		On entry : 0/0
  8483 ;;		On exit  : 0/0
  8484 ;;		Unchanged: 0/0
  8485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8487 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8489 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8490 ;;Total ram usage:        0 bytes
  8491 ;; Hardware stack levels used:    1
  8492 ;; This function calls:
  8493 ;;		Nothing
  8494 ;; This function is called by:
  8495 ;;		_I2C1_StatusCallback
  8496 ;; This function uses a non-reentrant model
  8497 ;;
  8498                           
  8499                           
  8500                           ;psect for function _PROTOCOL_INV
  8501  0D82                     _PROTOCOL_INV:	
  8502                           
  8503                           ;protocol.c: 109: invoked = 1;
  8504                           
  8505                           ;incstack = 0
  8506                           ; Regs used in _PROTOCOL_INV: []
  8507  0D82  0020               	movlb	0	; select bank0
  8508  0D83  01D9               	clrf	_invoked
  8509  0D84  0AD9               	incf	_invoked,f
  8510  0D85  0008               	return
  8511  0D86                     __end_of_PROTOCOL_INV:	
  8512                           
  8513                           	psect	text53
  8514  0D6C                     __ptext53:	
  8515 ;; *************** function _PROTOCOL_I2C_WHO *****************
  8516 ;; Defined at:
  8517 ;;		line 205 in file "protocol.c"
  8518 ;; Parameters:    Size  Location     Type
  8519 ;;		None
  8520 ;; Auto vars:     Size  Location     Type
  8521 ;;		None
  8522 ;; Return value:  Size  Location     Type
  8523 ;;                  1    wreg      unsigned char 
  8524 ;; Registers used:
  8525 ;;		wreg
  8526 ;; Tracked objects:
  8527 ;;		On entry : 0/0
  8528 ;;		On exit  : 0/0
  8529 ;;		Unchanged: 0/0
  8530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8532 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8533 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8534 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8535 ;;Total ram usage:        0 bytes
  8536 ;; Hardware stack levels used:    1
  8537 ;; This function calls:
  8538 ;;		Nothing
  8539 ;; This function is called by:
  8540 ;;		_I2C1_StatusCallback
  8541 ;; This function uses a non-reentrant model
  8542 ;;
  8543                           
  8544                           
  8545                           ;psect for function _PROTOCOL_I2C_WHO
  8546  0D6C                     _PROTOCOL_I2C_WHO:	
  8547                           
  8548                           ;protocol.c: 206: return slave_address;
  8549                           
  8550                           ;incstack = 0
  8551                           ; Regs used in _PROTOCOL_I2C_WHO: [wreg]
  8552  0D6C  0020               	movlb	0	; select bank0
  8553  0D6D  085E               	movf	_slave_address,w
  8554  0D6E  0008               	return
  8555  0D6F                     __end_of_PROTOCOL_I2C_WHO:	
  8556                           
  8557                           	psect	text54
  8558  0749                     __ptext54:	
  8559 ;; *************** function _PROTOCOL_I2C_SEN *****************
  8560 ;; Defined at:
  8561 ;;		line 404 in file "protocol.c"
  8562 ;; Parameters:    Size  Location     Type
  8563 ;;		None
  8564 ;; Auto vars:     Size  Location     Type
  8565 ;;  pdata           1    1[COMMON] PTR unsigned char 
  8566 ;;		 -> type_no_data(1), PROTOCOL_Send_uint8_t@pbuf(1), sendbuf(16), readbuf.length(1), 
  8567 ;;		 -> readbuf.type(1), readbuf(5), position(6), 
  8568 ;; Return value:  Size  Location     Type
  8569 ;;                  1    wreg      PTR unsigned char 
  8570 ;; Registers used:
  8571 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8572 ;; Tracked objects:
  8573 ;;		On entry : 0/0
  8574 ;;		On exit  : 0/0
  8575 ;;		Unchanged: 0/0
  8576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8577 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8578 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8579 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8580 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8581 ;;Total ram usage:        2 bytes
  8582 ;; Hardware stack levels used:    1
  8583 ;; This function calls:
  8584 ;;		Nothing
  8585 ;; This function is called by:
  8586 ;;		_I2C1_StatusCallback
  8587 ;; This function uses a non-reentrant model
  8588 ;;
  8589                           
  8590                           
  8591                           ;psect for function _PROTOCOL_I2C_SEN
  8592  0749                     _PROTOCOL_I2C_SEN:	
  8593                           
  8594                           ;protocol.c: 405: uint8_t *pdata;
  8595                           ;protocol.c: 406: switch(readbuf.status) {
  8596                           
  8597                           ;incstack = 0
  8598                           ; Regs used in _PROTOCOL_I2C_SEN: [wreg-fsr0h+status,2+status,0]
  8599  0749  2F74               	goto	i1l2702
  8600  074A                     i1l2682:	
  8601                           ;protocol.c: 407: case TLV_SET:
  8602                           
  8603                           
  8604                           ;protocol.c: 408: pdata = &readbuf.type;
  8605  074A  3067               	movlw	(low (_readbuf| 0))& (0+255)
  8606  074B  00F0               	movwf	??_PROTOCOL_I2C_SEN
  8607  074C  0870               	movf	??_PROTOCOL_I2C_SEN,w
  8608  074D  00F1               	movwf	PROTOCOL_I2C_SEN@pdata
  8609                           
  8610                           ;protocol.c: 409: readbuf.status = TYPE_SENT;
  8611  074E  0020               	movlb	0	; select bank0
  8612  074F  01EA               	clrf	_readbuf+3
  8613  0750  0AEA               	incf	_readbuf+3,f
  8614                           
  8615                           ;protocol.c: 410: break;
  8616  0751  2F83               	goto	i1l2704
  8617  0752                     i1l2686:	
  8618                           ;protocol.c: 411: case TYPE_SENT:
  8619                           
  8620                           
  8621                           ;protocol.c: 412: pdata = &readbuf.length;
  8622  0752  3068               	movlw	(low ((_readbuf| 0+1)))& (0+255)
  8623  0753  00F0               	movwf	??_PROTOCOL_I2C_SEN
  8624  0754  0870               	movf	??_PROTOCOL_I2C_SEN,w
  8625  0755  00F1               	movwf	PROTOCOL_I2C_SEN@pdata
  8626                           
  8627                           ;protocol.c: 413: readbuf.status = LENGTH_SENT;
  8628  0756  3002               	movlw	2
  8629  0757  2F6B               	goto	L6
  8630  0758                     i1l2688:	
  8631                           ;protocol.c: 415: case LENGTH_SENT:
  8632                           
  8633                           ;protocol.c: 414: break;
  8634                           
  8635                           
  8636                           ;protocol.c: 416: if (readbuf.buf_cnt < readbuf.length) {
  8637  0758  0868               	movf	_readbuf+1,w
  8638  0759  026B               	subwf	_readbuf+4,w
  8639  075A  1803               	skipnc
  8640  075B  2F65               	goto	i1l2692
  8641                           
  8642                           ;protocol.c: 417: pdata = &readbuf.pbuffer[readbuf.buf_cnt++];
  8643  075C  0869               	movf	low ((_readbuf| 0+2)),w
  8644  075D  076B               	addwf	_readbuf+4,w
  8645  075E  00F0               	movwf	??_PROTOCOL_I2C_SEN
  8646  075F  0870               	movf	??_PROTOCOL_I2C_SEN,w
  8647  0760  00F1               	movwf	PROTOCOL_I2C_SEN@pdata
  8648  0761  3001               	movlw	1
  8649  0762  00F0               	movwf	??_PROTOCOL_I2C_SEN
  8650  0763  0870               	movf	??_PROTOCOL_I2C_SEN,w
  8651  0764  07EB               	addwf	_readbuf+4,f
  8652  0765                     i1l2692:	
  8653                           
  8654                           ;protocol.c: 418: }
  8655                           ;protocol.c: 419: if (readbuf.buf_cnt == readbuf.length) {
  8656  0765  086B               	movf	_readbuf+4,w
  8657  0766  0668               	xorwf	_readbuf+1,w
  8658  0767  1D03               	skipz
  8659  0768  2F83               	goto	i1l2704
  8660                           
  8661                           ;protocol.c: 420: readbuf.buf_cnt = 0;
  8662  0769  01EB               	clrf	_readbuf+4
  8663                           
  8664                           ;protocol.c: 421: readbuf.status = COMPLETE;
  8665  076A  3003               	movlw	3
  8666  076B                     L6:	
  8667  076B  00F0               	movwf	??_PROTOCOL_I2C_SEN
  8668  076C  0870               	movf	??_PROTOCOL_I2C_SEN,w
  8669  076D  00EA               	movwf	_readbuf+3
  8670                           
  8671                           ;protocol.c: 422: }
  8672                           ;protocol.c: 423: break;
  8673  076E  2F83               	goto	i1l2704
  8674  076F                     i1l2698:	
  8675                           ;protocol.c: 424: case COMPLETE:
  8676                           
  8677                           
  8678                           ;protocol.c: 425: pdata = &type_no_data;
  8679  076F  306F               	movlw	(low (_type_no_data| 0))& (0+255)
  8680  0770  00F0               	movwf	??_PROTOCOL_I2C_SEN
  8681  0771  0870               	movf	??_PROTOCOL_I2C_SEN,w
  8682  0772  00F1               	movwf	PROTOCOL_I2C_SEN@pdata
  8683                           
  8684                           ;protocol.c: 427: }
  8685                           
  8686                           ;protocol.c: 426: break;
  8687  0773  2F83               	goto	i1l2704
  8688  0774                     i1l2702:	
  8689  0774  0020               	movlb	0	; select bank0
  8690  0775  086A               	movf	_readbuf+3,w
  8691                           
  8692                           ; Switch size 1, requested type "space"
  8693                           ; Number of cases is 4, Range of values is 0 to 3
  8694                           ; switch strategies available:
  8695                           ; Name         Instructions Cycles
  8696                           ; simple_byte           13     7 (average)
  8697                           ; direct_byte           14     6 (fixed)
  8698                           ; jumptable            260     6 (fixed)
  8699                           ;	Chosen strategy is simple_byte
  8700  0776  3A00               	xorlw	0	; case 0
  8701  0777  1903               	skipnz
  8702  0778  2F4A               	goto	i1l2682
  8703  0779  3A01               	xorlw	1	; case 1
  8704  077A  1903               	skipnz
  8705  077B  2F52               	goto	i1l2686
  8706  077C  3A03               	xorlw	3	; case 2
  8707  077D  1903               	skipnz
  8708  077E  2F58               	goto	i1l2688
  8709  077F  3A01               	xorlw	1	; case 3
  8710  0780  1903               	skipnz
  8711  0781  2F6F               	goto	i1l2698
  8712  0782  2F83               	goto	i1l2704
  8713  0783                     i1l2704:	
  8714                           
  8715                           ;protocol.c: 428: return pdata;
  8716  0783  0871               	movf	PROTOCOL_I2C_SEN@pdata,w
  8717  0784  0008               	return
  8718  0785                     __end_of_PROTOCOL_I2C_SEN:	
  8719                           
  8720                           	psect	text55
  8721  0D69                     __ptext55:	
  8722 ;; *************** function _PROTOCOL_I2C_GET *****************
  8723 ;; Defined at:
  8724 ;;		line 209 in file "protocol.c"
  8725 ;; Parameters:    Size  Location     Type
  8726 ;;		None
  8727 ;; Auto vars:     Size  Location     Type
  8728 ;;		None
  8729 ;; Return value:  Size  Location     Type
  8730 ;;                  1    wreg      unsigned char 
  8731 ;; Registers used:
  8732 ;;		wreg
  8733 ;; Tracked objects:
  8734 ;;		On entry : 0/0
  8735 ;;		On exit  : 0/0
  8736 ;;		Unchanged: 0/0
  8737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8739 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8741 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8742 ;;Total ram usage:        0 bytes
  8743 ;; Hardware stack levels used:    1
  8744 ;; This function calls:
  8745 ;;		Nothing
  8746 ;; This function is called by:
  8747 ;;		_I2C1_StatusCallback
  8748 ;; This function uses a non-reentrant model
  8749 ;;
  8750                           
  8751                           
  8752                           ;psect for function _PROTOCOL_I2C_GET
  8753  0D69                     _PROTOCOL_I2C_GET:	
  8754                           
  8755                           ;protocol.c: 210: return value;
  8756                           
  8757                           ;incstack = 0
  8758                           ; Regs used in _PROTOCOL_I2C_GET: [wreg]
  8759  0D69  0020               	movlb	0	; select bank0
  8760  0D6A  085C               	movf	_value,w
  8761  0D6B  0008               	return
  8762  0D6C                     __end_of_PROTOCOL_I2C_GET:	
  8763                           
  8764                           	psect	text56
  8765  0D7E                     __ptext56:	
  8766 ;; *************** function _PROTOCOL_Backplane_Slave_Enabled *****************
  8767 ;; Defined at:
  8768 ;;		line 201 in file "protocol.c"
  8769 ;; Parameters:    Size  Location     Type
  8770 ;;		None
  8771 ;; Auto vars:     Size  Location     Type
  8772 ;;		None
  8773 ;; Return value:  Size  Location     Type
  8774 ;;                  1    wreg      void 
  8775 ;; Registers used:
  8776 ;;		None
  8777 ;; Tracked objects:
  8778 ;;		On entry : 0/0
  8779 ;;		On exit  : 0/0
  8780 ;;		Unchanged: 0/0
  8781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8783 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8785 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8786 ;;Total ram usage:        0 bytes
  8787 ;; Hardware stack levels used:    1
  8788 ;; This function calls:
  8789 ;;		Nothing
  8790 ;; This function is called by:
  8791 ;;		_I2C1_StatusCallback
  8792 ;; This function uses a non-reentrant model
  8793 ;;
  8794                           
  8795                           
  8796                           ;psect for function _PROTOCOL_Backplane_Slave_Enabled
  8797  0D7E                     _PROTOCOL_Backplane_Slave_Enabled:	
  8798                           
  8799                           ;protocol.c: 202: backplane_slave_enabled = 1;
  8800                           
  8801                           ;incstack = 0
  8802                           ; Regs used in _PROTOCOL_Backplane_Slave_Enabled: []
  8803  0D7E  0020               	movlb	0	; select bank0
  8804  0D7F  01D5               	clrf	_backplane_slave_enabled
  8805  0D80  0AD5               	incf	_backplane_slave_enabled,f
  8806  0D81  0008               	return
  8807  0D82                     __end_of_PROTOCOL_Backplane_Slave_Enabled:	
  8808                           
  8809                           	psect	text57
  8810  0EB2                     __ptext57:	
  8811 ;; *************** function _EUSART_Transmit_ISR *****************
  8812 ;; Defined at:
  8813 ;;		line 165 in file "mcc_generated_files/eusart.c"
  8814 ;; Parameters:    Size  Location     Type
  8815 ;;		None
  8816 ;; Auto vars:     Size  Location     Type
  8817 ;;		None
  8818 ;; Return value:  Size  Location     Type
  8819 ;;                  1    wreg      void 
  8820 ;; Registers used:
  8821 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8822 ;; Tracked objects:
  8823 ;;		On entry : 0/0
  8824 ;;		On exit  : 0/0
  8825 ;;		Unchanged: 0/0
  8826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8829 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8830 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8831 ;;Total ram usage:        1 bytes
  8832 ;; Hardware stack levels used:    1
  8833 ;; This function calls:
  8834 ;;		Nothing
  8835 ;; This function is called by:
  8836 ;;		_INTERRUPT_InterruptManager
  8837 ;; This function uses a non-reentrant model
  8838 ;;
  8839                           
  8840                           
  8841                           ;psect for function _EUSART_Transmit_ISR
  8842  0EB2                     _EUSART_Transmit_ISR:	
  8843                           
  8844                           ;eusart.c: 169: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
  8845                           
  8846                           ;incstack = 0
  8847                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  8848  0EB2  3008               	movlw	8
  8849  0EB3  027A               	subwf	_eusartTxBufferRemaining,w	;volatile
  8850  0EB4  1803               	skipnc
  8851  0EB5  2ECA               	goto	i1l236
  8852                           
  8853                           ;eusart.c: 170: {
  8854                           ;eusart.c: 171: TXREG = eusartTxBuffer[eusartTxTail++];
  8855  0EB6  087B               	movf	_eusartTxTail,w
  8856  0EB7  3EA8               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  8857  0EB8  0086               	movwf	6
  8858  0EB9  0187               	clrf	7
  8859  0EBA  0801               	movf	1,w
  8860  0EBB  0023               	movlb	3	; select bank3
  8861  0EBC  009A               	movwf	26	;volatile
  8862  0EBD  3001               	movlw	1
  8863  0EBE  00F0               	movwf	??_EUSART_Transmit_ISR
  8864  0EBF  0870               	movf	??_EUSART_Transmit_ISR,w
  8865  0EC0  07FB               	addwf	_eusartTxTail,f	;volatile
  8866                           
  8867                           ;eusart.c: 172: if(sizeof(eusartTxBuffer) <= eusartTxTail)
  8868  0EC1  3008               	movlw	8
  8869  0EC2  027B               	subwf	_eusartTxTail,w	;volatile
  8870  0EC3  1803               	btfsc	3,0
  8871                           
  8872                           ;eusart.c: 173: {
  8873                           ;eusart.c: 174: eusartTxTail = 0;
  8874  0EC4  01FB               	clrf	_eusartTxTail	;volatile
  8875                           
  8876                           ;eusart.c: 175: }
  8877                           ;eusart.c: 176: eusartTxBufferRemaining++;
  8878  0EC5  3001               	movlw	1
  8879  0EC6  00F0               	movwf	??_EUSART_Transmit_ISR
  8880  0EC7  0870               	movf	??_EUSART_Transmit_ISR,w
  8881  0EC8  07FA               	addwf	_eusartTxBufferRemaining,f	;volatile
  8882                           
  8883                           ;eusart.c: 177: }
  8884  0EC9  0008               	return
  8885  0ECA                     i1l236:	
  8886                           
  8887                           ;eusart.c: 178: else
  8888                           ;eusart.c: 179: {
  8889                           ;eusart.c: 180: PIE1bits.TXIE = 0;
  8890  0ECA  0021               	movlb	1	; select bank1
  8891  0ECB  1211               	bcf	17,4	;volatile
  8892  0ECC  0008               	return
  8893  0ECD                     __end_of_EUSART_Transmit_ISR:	
  8894                           
  8895                           	psect	text58
  8896  0E97                     __ptext58:	
  8897 ;; *************** function _EUSART_Receive_ISR *****************
  8898 ;; Defined at:
  8899 ;;		line 184 in file "mcc_generated_files/eusart.c"
  8900 ;; Parameters:    Size  Location     Type
  8901 ;;		None
  8902 ;; Auto vars:     Size  Location     Type
  8903 ;;		None
  8904 ;; Return value:  Size  Location     Type
  8905 ;;                  1    wreg      void 
  8906 ;; Registers used:
  8907 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8908 ;; Tracked objects:
  8909 ;;		On entry : 0/0
  8910 ;;		On exit  : 0/0
  8911 ;;		Unchanged: 0/0
  8912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8913 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8914 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8915 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8916 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8917 ;;Total ram usage:        1 bytes
  8918 ;; Hardware stack levels used:    1
  8919 ;; This function calls:
  8920 ;;		Nothing
  8921 ;; This function is called by:
  8922 ;;		_INTERRUPT_InterruptManager
  8923 ;; This function uses a non-reentrant model
  8924 ;;
  8925                           
  8926                           
  8927                           ;psect for function _EUSART_Receive_ISR
  8928  0E97                     _EUSART_Receive_ISR:	
  8929                           
  8930                           ;eusart.c: 187: if(1 == RCSTAbits.OERR)
  8931                           
  8932                           ;incstack = 0
  8933                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  8934  0E97  0023               	movlb	3	; select bank3
  8935  0E98  1C9D               	btfss	29,1	;volatile
  8936  0E99  2E9C               	goto	i1l3152
  8937                           
  8938                           ;eusart.c: 188: {
  8939                           ;eusart.c: 191: RCSTAbits.CREN = 0;
  8940  0E9A  121D               	bcf	29,4	;volatile
  8941                           
  8942                           ;eusart.c: 192: RCSTAbits.CREN = 1;
  8943  0E9B  161D               	bsf	29,4	;volatile
  8944  0E9C                     i1l3152:	
  8945                           
  8946                           ;eusart.c: 193: }
  8947                           ;eusart.c: 196: eusartRxBuffer[eusartRxHead++] = RCREG;
  8948  0E9C  0819               	movf	25,w	;volatile
  8949  0E9D  00F0               	movwf	??_EUSART_Receive_ISR
  8950  0E9E  0020               	movlb	0	; select bank0
  8951  0E9F  0862               	movf	_eusartRxHead,w
  8952  0EA0  3EA0               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  8953  0EA1  0086               	movwf	6
  8954  0EA2  0187               	clrf	7
  8955  0EA3  0870               	movf	??_EUSART_Receive_ISR,w
  8956  0EA4  0081               	movwf	1
  8957  0EA5  3001               	movlw	1
  8958  0EA6  00F0               	movwf	??_EUSART_Receive_ISR
  8959  0EA7  0870               	movf	??_EUSART_Receive_ISR,w
  8960  0EA8  07E2               	addwf	_eusartRxHead,f	;volatile
  8961                           
  8962                           ;eusart.c: 197: if(sizeof(eusartRxBuffer) <= eusartRxHead)
  8963  0EA9  3008               	movlw	8
  8964  0EAA  0262               	subwf	_eusartRxHead,w	;volatile
  8965  0EAB  1803               	btfsc	3,0
  8966                           
  8967                           ;eusart.c: 198: {
  8968                           ;eusart.c: 199: eusartRxHead = 0;
  8969  0EAC  01E2               	clrf	_eusartRxHead	;volatile
  8970                           
  8971                           ;eusart.c: 200: }
  8972                           ;eusart.c: 201: eusartRxCount++;
  8973  0EAD  3001               	movlw	1
  8974  0EAE  00F0               	movwf	??_EUSART_Receive_ISR
  8975  0EAF  0870               	movf	??_EUSART_Receive_ISR,w
  8976  0EB0  07E0               	addwf	_eusartRxCount,f	;volatile
  8977  0EB1  0008               	return
  8978  0EB2                     __end_of_EUSART_Receive_ISR:	
  8979  007E                     btemp	set	126	;btemp
  8980  007E                     int$flags	set	126
  8981  007E                     wtemp0	set	126


Data Sizes:
    Strings     192
    Constant    10
    Data        13
    BSS         189
    Persistent  8
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      14
    BANK0            80     50      80
    BANK1            80      0      80
    BANK2            80      0      48
    BANK3            80      0      48
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    PROTOCOL_Extension_Handler$0	PTR unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), I2C1_StatusCallback@ext_buf(BANK3[48]), 

    data	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    strncmp@s2	PTR const unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_15(CODE[4]), STR_14(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), 
		 -> STR_8(CODE[4]), STR_7(CODE[4]), STR_6(CODE[4]), STR_4(CODE[4]), 

    atoi@s	PTR const unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), 

    PROTOCOL_I2C_SEN@pdata	PTR unsigned char  size(1) Largest target is 16
		 -> type_no_data(BANK0[1]), PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK1[16]), readbuf.length(BANK0[1]), 
		 -> readbuf.type(BANK0[1]), readbuf(BANK0[5]), position(BANK1[6]), 

    PROTOCOL_I2C_Send_uint8_t@pbuffer	PTR unsigned char  size(1) Largest target is 6
		 -> PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), position(BANK1[6]), 

    PROTOCOL_I2C_Set_TLV@pbuffer	PTR unsigned char  size(1) Largest target is 16
		 -> PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK1[16]), position(BANK1[6]), 

    PROTOCOL_EXT@char_buf	PTR unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), I2C1_StatusCallback@ext_buf(BANK3[48]), 

    PROTOCOL_Tick_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    PROTOCOL_Extension_Handler	PTR FTN(PTR unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    PROTOCOL_Set_Func@loop_func	PTR void  size(2) Largest target is 1
		 -> loop_func(), 

    PROTOCOL_Loop_Func	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), loop_func(), 

    PROTOCOL_Initialize@inv_handler	PTR void  size(2) Largest target is 1
		 -> set_handler(), 

    PROTOCOL_Inv_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), set_handler(), 

    PROTOCOL_Initialize@set_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Set_Handler	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@stop_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Stop_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@start_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Start_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@device_id	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_1(CODE[17]), 

    device_id_	PTR const unsigned char  size(2) Largest target is 8192
		 -> ROM(CODE[8192]), STR_1(CODE[17]), 

    S859$pbuffer	PTR unsigned char  size(1) Largest target is 16
		 -> PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK1[16]), position(BANK1[6]), 

    readbuf.pbuffer	PTR unsigned char  size(1) Largest target is 16
		 -> PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK1[16]), position(BANK1[6]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 8192
		 -> STR_10(CODE[4]), buf(BANK2[48]), STR_2(CODE[7]), ROM(CODE[8192]), 
		 -> printf@c(BANK0[1]), STR_1(CODE[17]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_48(CODE[10]), STR_47(CODE[9]), STR_46(CODE[10]), STR_45(CODE[9]), 
		 -> STR_44(CODE[4]), STR_43(CODE[4]), STR_42(CODE[4]), STR_41(CODE[4]), 
		 -> STR_40(CODE[4]), STR_39(CODE[4]), STR_38(CODE[4]), STR_37(CODE[4]), 
		 -> STR_36(CODE[14]), STR_35(CODE[9]), STR_34(CODE[10]), STR_33(CODE[9]), 
		 -> STR_32(CODE[10]), STR_31(CODE[9]), STR_30(CODE[7]), STR_29(CODE[4]), 
		 -> STR_28(CODE[4]), STR_27(CODE[9]), STR_26(CODE[4]), STR_25(CODE[4]), 
		 -> STR_24(CODE[10]), STR_23(CODE[4]), STR_22(CODE[4]), STR_21(CODE[8]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[9]), STR_17(CODE[6]), 
		 -> STR_16(CODE[10]), STR_13(CODE[10]), STR_9(CODE[10]), STR_5(CODE[10]), 
		 -> STR_3(CODE[5]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    sp__PROTOCOL_I2C_SEN	PTR unsigned char  size(1) Largest target is 16
		 -> type_no_data(BANK0[1]), PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK1[16]), readbuf.length(BANK0[1]), 
		 -> readbuf.type(BANK0[1]), readbuf(BANK0[5]), position(BANK1[6]), 

    I2C1_StatusCallback@pdata	PTR unsigned char  size(1) Largest target is 16
		 -> type_no_data(BANK0[1]), PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK1[16]), readbuf.length(BANK0[1]), 
		 -> readbuf.type(BANK0[1]), readbuf(BANK0[5]), position(BANK1[6]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_I2C1_ISR
    _I2C1_ISR->_I2C1_StatusCallback
    _I2C1_StatusCallback->i1_PROTOCOL_SAV
    i1_PROTOCOL_SAV->i1_DATAEE_WriteByte

Critical Paths under _main in BANK0

    _main->_PROTOCOL_Loop
    _PROTOCOL_Loop->_loop_func
    _loop_func->_PROTOCOL_I2C_Send_uint8_t
    _PROTOCOL_I2C_Send_uint8_t->_printf
    _printf->___lwmod
    _putch->_EUSART_Write
    ___lwmod->___lwdiv
    _atoi->___wmul
    _PROTOCOL_Write_Device_Address->_DATAEE_WriteByte
    _PROTOCOL_SAV->_DATAEE_WriteByte
    _PROTOCOL_Initialize->_DATAEE_ReadByte

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   14047
                     _ADC_Initialize
                  _EUSART_Initialize
                    _I2C1_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                _PROTOCOL_Initialize
                      _PROTOCOL_Loop
                  _PROTOCOL_Set_Func
                    _TMR0_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (1) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_Initialize                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Set_Func                                    2     0      2      86
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Loop                                        4     4      0   13423
                                             46 BANK0      4     4      0
                   Absolute function *
                        _EUSART_Read
                       _PROTOCOL_EXT
       _PROTOCOL_Read_Device_Address
                       _PROTOCOL_SAV
                       _PROTOCOL_SET
                       _PROTOCOL_STA
                       _PROTOCOL_STP
      _PROTOCOL_Write_Device_Address
            _TMR0_HasOverflowOccured
                               _atoi
                          _loop_func *
                             _printf
                        _set_handler *
                            _strncmp
 ---------------------------------------------------------------------------------
 (2) _strncmp                                              7     2      5    1670
                                              0 BANK0      7     2      5
 ---------------------------------------------------------------------------------
 (2) _set_handler                                          2     1      1      44
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (2) _loop_func                                            7     7      0    6004
                                             39 BANK0      7     7      0
            _ADC_GetConversionResult
               _ADC_IsConversionDone
                  _ADC_SelectChannel
                _ADC_StartConversion
          _PROTOCOL_I2C_Send_uint8_t
                                _abs
                          _led_blink
 ---------------------------------------------------------------------------------
 (3) _led_blink                                            1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _abs                                                  4     2      2     538
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _PROTOCOL_I2C_Send_uint8_t                            5     4      1    5063
                                             34 BANK0      5     4      1
               _PROTOCOL_I2C_Set_TLV
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              24    20      4    4212
                                             14 BANK0     20    16      4
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      66
                                              2 BANK0      1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (4) _EUSART_Write                                         2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     287
                                              8 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     290
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (4) _PROTOCOL_I2C_Set_TLV                                 5     3      2     625
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (3) _ADC_StartConversion                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_SelectChannel                                    2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _ADC_IsConversionDone                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_GetConversionResult                              2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 8     6      2     830
                                              6 BANK0      8     6      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     474
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _TMR0_HasOverflowOccured                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_Write_Device_Address                        2     2      0     240
                                              3 BANK0      2     2      0
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_STP                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_STA                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_SET                                         2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_SAV                                         1     1      0     196
                                              3 BANK0      1     1      0
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (3) _DATAEE_WriteByte                                     3     2      1     196
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_EXT                                         1     1      0      90
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Read                                          2     2      0      24
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Initialize                                 10     2      8     538
                                              1 BANK0     10     2      8
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (2) _DATAEE_ReadByte                                      1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2C1_Initialize                                      2     2      0       0
                                              0 BANK0      2     2      0
       _PROTOCOL_Read_Device_Address
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_Read_Device_Address                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Initialize                                    1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                           1     1      0     233
                                              9 COMMON     1     1      0
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
                           _I2C1_ISR
 ---------------------------------------------------------------------------------
 (8) _I2C1_ISR                                             2     2      0     233
                                              7 COMMON     2     2      0
                _I2C1_StatusCallback
 ---------------------------------------------------------------------------------
 (9) _I2C1_StatusCallback                                  3     3      0     187
                                              4 COMMON     3     3      0
   _PROTOCOL_Backplane_Slave_Enabled
                   _PROTOCOL_I2C_GET
                   _PROTOCOL_I2C_SEN
                   _PROTOCOL_I2C_WHO
                       _PROTOCOL_INV
                       _PROTOCOL_RST
                 _PROTOCOL_Read_Lock
                     i1_PROTOCOL_EXT
                     i1_PROTOCOL_SAV
                     i1_PROTOCOL_SET
                     i1_PROTOCOL_STA
                     i1_PROTOCOL_STP
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_STP                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_STA                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_SET                                      2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_SAV                                      1     1      0      94
                                              3 COMMON     1     1      0
                 i1_DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (11) i1_DATAEE_WriteByte                                  3     2      1      94
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_EXT                                      1     1      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_Read_Lock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_RST                                        1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_INV                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_I2C_WHO                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_I2C_SEN                                    2     2      0      26
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_I2C_GET                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_Backplane_Slave_Enabled                    0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _EUSART_Receive_ISR                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Initialize
   _EUSART_Initialize
   _I2C1_Initialize
     _PROTOCOL_Read_Device_Address
   _OSCILLATOR_Initialize
   _PIN_MANAGER_Initialize
   _PROTOCOL_Initialize
     _DATAEE_ReadByte
   _PROTOCOL_Loop
     Absolute function(Fake) *
     _EUSART_Read *
     _PROTOCOL_EXT *
     _PROTOCOL_Read_Device_Address *
     _PROTOCOL_SAV *
       _DATAEE_WriteByte
     _PROTOCOL_SET *
     _PROTOCOL_STA *
     _PROTOCOL_STP *
     _PROTOCOL_Write_Device_Address *
       _DATAEE_WriteByte
     _TMR0_HasOverflowOccured *
     _atoi *
       ___wmul
       _isdigit
     _loop_func *
       _ADC_GetConversionResult
       _ADC_IsConversionDone
       _ADC_SelectChannel
       _ADC_StartConversion
       _PROTOCOL_I2C_Send_uint8_t
         _PROTOCOL_I2C_Set_TLV
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
           _putch
             _EUSART_Write
       _abs
       _led_blink
     _printf *
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
     _set_handler *
     _strncmp *
   _PROTOCOL_Set_Func
   _TMR0_Initialize
   _WDT_Initialize

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR
   _I2C1_ISR
     _I2C1_StatusCallback
       _PROTOCOL_Backplane_Slave_Enabled
       _PROTOCOL_I2C_GET
       _PROTOCOL_I2C_SEN
       _PROTOCOL_I2C_WHO
       _PROTOCOL_INV
       _PROTOCOL_RST
       _PROTOCOL_Read_Lock
       i1_PROTOCOL_EXT
       i1_PROTOCOL_SAV
         i1_DATAEE_WriteByte
       i1_PROTOCOL_SET
       i1_PROTOCOL_STA
       i1_PROTOCOL_STP

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     32      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      30       9       60.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      30      11       60.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     10E      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     10E      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Thu Sep 28 01:35:40 2017

                                         _i 0054                                           _j 00BF  
                                         pc 0002                      __end_ofi1_PROTOCOL_EXT 0004  
                    __end_ofi1_PROTOCOL_SAV 0DDF                      __end_ofi1_PROTOCOL_SET 0DB8  
                    __end_ofi1_PROTOCOL_STA 0D8A                      __end_ofi1_PROTOCOL_STP 0D75  
           __end_of_TMR0_HasOverflowOccured 0D92                                 __CFG_CP$OFF 0000  
                       ___wmul@multiplicand 0022                             _timer0ReloadVal 005F  
                               __CFG_LVP$ON 0000                                         l224 0F95  
                                       l321 0F7E                                         l511 0147  
                                       l453 05A4                                         l518 01BD  
                                       l535 0248                                         l458 05CD  
                                       l483 009A                                         l495 0167  
                                       l664 0249                                         l935 0ED6  
                              __CFG_CPD$OFF 0000                loop_func@transition_detected 004A  
                                       _abs 0E55                                         _ain 006D  
                                       _buf 0120                                         _cnt 005D  
                              __CFG_BORV$LO 0000                                         wreg 0009  
                              __CFG_IESO$ON 0000                                ?_EUSART_Read 0070  
                          __end_of_I2C1_ISR 0FD3                                        ?_abs 0020  
                                      l3010 0611                                        l3002 0707  
                                      l3012 0609                                        l3004 0746  
                                      l3030 063A                                        l3022 062E  
                                      l3014 0616                                        l3032 0663  
                                      l3200 026E                                        l3210 027D  
                                      l3202 026F                                        l3028 0636  
                                      l3038 0673                                        l2422 0FA9  
                                      l3214 0287                                        l2440 0ED0  
                                      l2408 0F8A                                        l2600 01DC  
                                      l2512 009F                                        l2434 0E53  
                                      l2514 00A8                                        l2506 0095  
                                      l3242 02FE                                        l3234 02C0  
                                      l2612 01F5                                        l2540 0108  
                                      l3260 037F                                        l3252 033C  
                                      l2470 07AC                                        l2462 078E  
                                      l2614 01F9                                        l2622 020E  
                                      l2606 01E6                                        l2550 0126  
                                      l2534 00F8                                        l2526 00E4  
                                      l2518 00B5                                        l2630 0079  
                                      l3246 0317                                        l3238 02E5  
                              _tmr_overflow 0056                                        l2464 079A  
                                      l2544 0115                                        l3272 03CD  
                                      l3256 035B                                        l2474 07B5  
                                      l2618 0206                                        l2554 0133  
                                      l2538 00FA                                        l2562 0149  
                                      l3266 03A2                                        l2492 0FF2  
                                      l2628 0213                                        l2556 013E  
                                      l2548 0117                                        l2486 0FDA  
                                      l2590 01B1                                        l2574 0181  
                                      l2488 0FE6                                        l2496 0FFB  
                                      l2584 0192                                        l2578 018C  
                                      l2770 06D5                                        l2762 06D1  
                                      l2772 06F3                                        l2940 0572  
                                      l2598 01D9                                        l2950 059F  
                                      l2962 05C8                                        l2946 058F  
                                      l2892 0F27                                        l2972 05E6  
                                      l2982 0602                                        l2958 05B8  
                                      l2974 05F2                                        l2976 0563  
                                      l2978 05F7                                        l2994 0725  
                                      l2998 073D                                        STR_1 03DC  
                                      STR_2 045A                                        STR_3 0467  
                                      STR_4 0488                                        STR_5 0419  
                                      STR_6 0498                                        STR_7 0480  
                                      STR_8 048C                                        STR_9 0423  
                                      u1305 0EDC                                        u1405 0FDD  
                                      _LATA 010C                                        _LATB 010D  
                                      u1335 0791                                        _LATC 010E  
                                      u1425 0FEC                                        u1505 010E  
                                      u1355 079B                                        u1435 0FF3  
                                      u1365 07A5                                        u1605 01CC  
                                      u2407 0F4A                                        u1295 0ED7  
                                      u1375 07AD                                        u1565 01A7  
                                      u2387 0603                                        u2397 0E21  
                                      i1l64 0FC0                                        i1l86 049E  
                                      _TMR0 0015                                        _WPUA 020C  
                                      _WPUB 020D                                        _WPUC 020E  
                              __CFG_WRT$OFF 0000                               __CFG_FCMEN$ON 0000  
                                      abs@a 0020                                        _data 00BE  
                                      _atoi 0607                                        _main 07BA  
                                      fsr0h 0005                                        fsr1h 0007  
                                      indf0 0000                                        fsr0l 0004  
                                      indf1 0001                                        fsr1l 0006  
                                      btemp 007E                               __CFG_BOREN$ON 0000  
                                      start 0030                               __CFG_MCLRE$ON 0000  
                       _I2C1_StatusCallback 049C                                       ??_abs 0022  
                           ?i1_PROTOCOL_EXT 0070                             ?i1_PROTOCOL_SAV 0070  
                           ?i1_PROTOCOL_SET 0070                   __size_of_DATAEE_WriteByte 0023  
                           ?i1_PROTOCOL_STA 0070                             ?i1_PROTOCOL_STP 0070  
                   __end_of_TMR0_Initialize 0E37                               __CFG_PLLEN$ON 0000  
                             ?_EUSART_Write 0070              __size_of_OSCILLATOR_Initialize 0005  
             __end_of_OSCILLATOR_Initialize 0D9F                                       ?_atoi 0026  
                                     ?_main 0070                                       STR_10 0484  
                                     STR_11 0494                                       STR_12 0490  
                                     STR_20 046C                                       STR_13 0405  
                                     STR_14 047C                                       STR_22 0470  
                                     STR_30 0453                                       STR_15 0478  
                                     STR_24 0437                                       STR_32 042D  
                                     STR_16 03FB                                       STR_17 0461  
                             __CFG_WDTE$OFF 0000                                       STR_18 044A  
                                     STR_34 040F                                       STR_19 0474  
                                     STR_35 0441                                       STR_36 03ED  
                                     STR_37 0470                                       STR_38 0401  
                           __end_of___lwdiv 07BA                                       i1l103 04C1  
                                     i1l124 055F                                       i1l321 0EFD  
                                     i1l170 0021                                       i1l236 0ECA  
                                     i1l174 002B                                       i1l168 0015  
                           __end_of___lwmod 1000                           _PROTOCOL_Set_Func 0DF1  
                PROTOCOL_I2C_Set_TLV@length 0020                                       _RCREG 0199  
                                     _RCSTA 019D                                       _TRISA 008C  
                                     _TRISB 008D                                       _TRISC 008E  
                                     _TXREG 019A                                       _TXSTA 019E  
          __size_of_ADC_GetConversionResult 0009                __size_of_PROTOCOL_Initialize 0048  
                PROTOCOL_I2C_Set_TLV@status 0024                          ?_PROTOCOL_Set_Func 0020  
                         ??_I2C1_Initialize 0020                        ?_I2C1_StatusCallback 0070  
                           _DATAEE_ReadByte 0E0E             ??_PROTOCOL_Write_Device_Address 0023  
                           __end_of_dpowers 03DC                              _WDT_Initialize 0D92  
                                     _count 00B0              PROTOCOL_Initialize@inv_handler 0026  
                           __end_of_isdigit 0E55                                       _value 005C  
                                     atoi@a 002B                                       atoi@s 002D  
                                     _putch 0D9F                                       pclath 000A  
                       ??_PROTOCOL_Set_Func 0022                      ??_PROTOCOL_I2C_Set_TLV 0022  
                                     status 0003                                       wtemp0 007E  
                           __end_of_strncmp 0749                             __initialization 0032  
                              __end_of_atoi 0678                                __end_of_main 07EE  
                            ??_EUSART_Write 0020                 ?_INTERRUPT_InterruptManager 0070  
                 __end_of_PROTOCOL_Set_Func 0DFA            PROTOCOL_Initialize@start_handler 0023  
               ??_PROTOCOL_I2C_Send_uint8_t 0043                                      ??_atoi 0028  
                                    ??_main 0052                          _PROTOCOL_Read_Lock 0D6F  
                    __end_of_WDT_Initialize 0D96                       ??_I2C1_StatusCallback 0074  
                __end_ofi1_DATAEE_WriteByte 0F06               __size_of_ADC_IsConversionDone 0007  
                                    _ADCON0 009D                                      _ADCON1 009E  
                                    i1S3340 0800                                      _ADRESH 009C  
                                    _EEADRH 0192                                      _ADRESL 009B  
                                    _EEADRL 0191                                      _EEDATH 0194  
                                    _EEDATL 0193                                      _EECON2 0196  
                                    _ANSELA 018C                                      ?_putch 0070  
                                    _ANSELB 018D                                      _ANSELC 018E  
                       ?_PROTOCOL_Read_Lock 0070                          _PROTOCOL_Loop_Func 00BC  
                                    i1l3152 0E9C                                      i1l3072 0FC7  
                                    i1l3074 0FC9                                      i1l3066 0FBE  
                                    i1l2702 0774                                      i1l2704 0783  
                                    i1l2800 04AD                                      i1l2810 04C4  
                                    i1l2802 04B1                                      i1l2820 04E7  
                                    i1l2804 04B5                                      i1l2806 04B9  
                                    i1l2814 04C6                                      i1l2832 04FC  
                                    i1l2808 04BD                                      i1l2682 074A  
                                    i1l2842 0517                                      i1l2826 04F1  
                                    i1l2818 04DE                                      i1l2850 0524  
                                    i1l2692 0765                                      i1l2860 0544  
                                    i1l2852 0530                                      i1l2686 0752  
                                    i1l2854 0533                                      i1l2846 051A  
                                    i1l2688 0758                                      i1l2856 0538  
                                    i1l2864 0549                                      i1l2698 076F  
                                    i1l2794 04A2                                      i1l2796 04A8  
                                    i1l2868 0555                                      _OSCCON 0099  
          __size_of_TMR0_HasOverflowOccured 0004                                      _TMR0IF 005A  
                                    _SPBRGH 019C                                      _SPBRGL 019B  
                                    _WDTCON 0097              PROTOCOL_Initialize@set_handler 0025  
                              ?_set_handler 0020                              __CFG_PWRTE$OFF 0000  
                 PROTOCOL_Initialize@scaler 0028                                      ___wmul 0ECD  
                            __CFG_STVREN$ON 0000                                   ??___lwdiv 0024  
                      ??_PROTOCOL_Read_Lock 0070                                   ??___lwmod 002C  
                              _type_no_data 006F                         _EUSART_Transmit_ISR 0EB2  
                          ?_TMR0_Initialize 0070                                      _locked 005B  
                                 ?_I2C1_ISR 0070                                      _printf 0074  
                   __end_of_DATAEE_ReadByte 0E1B                                __pdataCOMMON 007D  
                                 ??_isdigit 0020                    __end_of_PROTOCOL_I2C_GET 0D6C  
                  __end_of_PROTOCOL_I2C_SEN 0785                    __end_of_PROTOCOL_I2C_WHO 0D6F  
                           ?_WDT_Initialize 0070               i1DATAEE_WriteByte@GIEBitValue 0072  
          PROTOCOL_I2C_Send_uint8_t@pbuffer 0042                                   ??_strncmp 0025  
                 PROTOCOL_Send_uint8_t@pbuf 00DF                        ?_EUSART_Transmit_ISR 0070  
                      __size_of_EUSART_Read 001F                   _PROTOCOL_I2C_Send_uint8_t 06C0  
                   __end_of__initialization 0070                __size_of_ADC_StartConversion 0003  
                            __pcstackCOMMON 0070                                __pidataBANK0 0D96  
                              __pidataBANK1 0DCE                            _DATAEE_WriteByte 0F65  
                             __end_of_putch 0DA5                                  ??_I2C1_ISR 0077  
                __size_of_PROTOCOL_Set_Func 0009                       __end_of_PROTOCOL_Loop 03D2  
                   _ADC_GetConversionResult 0DE8                              _OPTION_REGbits 0095  
                        __size_of_led_blink 000E                     PROTOCOL_Send_float@pbuf 00D7  
                     ??_EUSART_Transmit_ISR 0070                                     ??_putch 0022  
                                __pbssBANK0 0052                                  __pbssBANK1 00A0  
                                __pbssBANK2 0120                                  __pbssBANK3 01A0  
                    i1DATAEE_WriteByte@bAdd 0071                        __end_of_EUSART_Write 0FAC  
               __size_of_EUSART_Receive_ISR 001B                            ??i1_PROTOCOL_EXT 0070  
                          ??i1_PROTOCOL_SAV 0073                            ??i1_PROTOCOL_SET 0070  
                          ??i1_PROTOCOL_STA 0070                            ??i1_PROTOCOL_STP 0070  
                       _PROTOCOL_Initialize 0678                                  __pmaintext 07BA  
                                   ?___wmul 0020                                  __pintentry 0004  
                           _I2C1_Initialize 0F44                          __size_of_loop_func 00A7  
                                   _BAUDCON 019F                                  _device_id_ 00E0  
                                   _APFCON0 011D                                     _APFCON1 011E  
                                   ?_printf 002E                     __size_of_ADC_Initialize 0008  
                I2C1_StatusCallback@ext_buf 01A0                  I2C1_StatusCallback@ext_cnt 0063  
                I2C1_StatusCallback@ext_len 0064                            ?_DATAEE_ReadByte 0070  
                             _eusartRxCount 0060           I2C1_StatusCallback@slaveWriteType 0066  
                PROTOCOL_Send_uint16_t@pbuf 00DC                        ?_PROTOCOL_Initialize 0021  
                                   _OSCTUNE 0098                                     _SSP1ADD 0212  
                                   _SSP1BUF 0211                                     _SSP1MSK 0213  
                    _PROTOCOL_Start_Handler 00E6                     _TMR0_HasOverflowOccured 0D8E  
                      DATAEE_WriteByte@bAdd 0021                                  _continuity 00EE  
                      __size_of_set_handler 000A                           __end_of_led_blink 0E29  
                             ?_PROTOCOL_INV 0070                               ?_PROTOCOL_EXT 0070  
                             ?_PROTOCOL_SAV 0070                               ?_PROTOCOL_SET 0070  
                             ?_PROTOCOL_STA 0070                               ?_PROTOCOL_RST 0070  
                             ?_PROTOCOL_STP 0070                             __size_of___wmul 001C  
                                   ___lwdiv 0785                                     ___lwmod 0FD3  
                 ??_ADC_GetConversionResult 0022                                     __ptext1 0D92  
                                   __ptext2 0E29                                     __ptext3 0DF1  
                                   __ptext4 0249                                     __ptext5 0707  
                                   __ptext6 0E04                                     __ptext7 0560  
                                   __ptext8 0E1B                                     __ptext9 0E55  
                           __size_of_printf 01D5                                     _dpowers 03D2  
                     _OSCILLATOR_Initialize 0D9A                                __size_of_abs 000F  
PROTOCOL_Write_Device_Address@device_id_i2c 0024                       ??_PROTOCOL_Initialize 0029  
                                   _isdigit 0E46                                     _readbuf 0067  
                                   _sec_cnt 0058                                     _invoked 0059  
                  ??_PIN_MANAGER_Initialize 0020                                     _sendbuf 00C1  
                                   _tmr_cnt 0057                                     clrloop0 0DA6  
                                   _running 005A                                     _strncmp 0707  
                      end_of_initialization 0070                           __end_of_loop_func 0607  
                                   init_ram 0DAB                                     initloop 0DAC  
                _PROTOCOL_Extension_Handler 00BA               __size_of_PROTOCOL_I2C_Set_TLV 0019  
                        i1_DATAEE_WriteByte 0EE9                           _EUSART_Initialize 0E7D  
                   __end_of_I2C1_Initialize 0F65                __end_of_ADC_IsConversionDone 0DC6  
                        ?_EUSART_Initialize 0070                       _PROTOCOL_Tick_Handler 00B8  
                                 _RCSTAbits 019D                                     printf@c 0041  
                                   printf@f 002E                              ??_PROTOCOL_INV 0070  
                            ??_PROTOCOL_EXT 0020                              ??_PROTOCOL_SAV 0023  
                            ??_PROTOCOL_SET 0020                              ??_PROTOCOL_STA 0020  
                            ??_PROTOCOL_RST 0070                              ??_PROTOCOL_STP 0020  
                       ?i1_DATAEE_WriteByte 0070                                __pstringtext 03D2  
                       ??_EUSART_Initialize 0020                 __end_of_I2C1_StatusCallback 0560  
                          ??_WDT_Initialize 0020                           __size_of_I2C1_ISR 0027  
                          __CFG_FOSC$INTOSC 0000                           ?_PROTOCOL_I2C_GET 0070  
                          set_handler@value 0020                           ?_PROTOCOL_I2C_SEN 0070  
                         ?_PROTOCOL_I2C_WHO 0070                       __size_of_EUSART_Write 0024  
                       _ADC_StartConversion 0D7B                   ??_TMR0_HasOverflowOccured 0020  
                        ??_PROTOCOL_I2C_GET 0070                          ??_PROTOCOL_I2C_SEN 0070  
                        ??_PROTOCOL_I2C_WHO 0070                        ??i1_DATAEE_WriteByte 0071  
                                _tmr_scaler 006C                    __end_of_DATAEE_WriteByte 0F88  
                 __end_of_EUSART_Initialize 0E97                                 printf@width 003F  
                      i1PROTOCOL_SET@value_ 0071                        ?_ADC_StartConversion 0070  
                  I2C1_StatusCallback@pdata 0076                 __size_of_PROTOCOL_Read_Lock 0003  
                            __end_of___wmul 0EE9                               __pidataCOMMON 07FE  
                              _EUSART_Write 0F88                              _ADC_Initialize 0DC6  
                    ?_OSCILLATOR_Initialize 0070                              __end_of_printf 0249  
                            PROTOCOL_Loop@c 0050                         start_initialization 0032  
                  __size_of_TMR0_Initialize 000E             __size_of_PIN_MANAGER_Initialize 001F  
                               __end_of_abs 0E64                               ??_EUSART_Read 0020  
                               putch@txData 0022                         DATAEE_ReadByte@bAdd 0020  
                          ?_I2C1_Initialize 0070                       ??_ADC_StartConversion 0020  
                          I2C1_ISR@i2c_data 0078                                    ??___wmul 0024  
                  PROTOCOL_Send_int8_t@pbuf 00DE        __end_of_PROTOCOL_Read_Device_Address 0D78  
     __size_of_PROTOCOL_Read_Device_Address 0003                _PROTOCOL_Read_Device_Address 0D75  
                    __end_of_ADC_Initialize 0DCE                                 __pdataBANK0 006C  
                               __pdataBANK1 00E8             PROTOCOL_I2C_Send_uint8_t@length 0046  
                                  ??_printf 0032                     i1DATAEE_WriteByte@bData 0070  
               __end_of_EUSART_Transmit_ISR 0ECD                                 __pbssCOMMON 007A  
                                 ___latbits 0002                               __pcstackBANK0 0020  
          I2C1_StatusCallback@i2c_bus_state 0075                        _ADC_IsConversionDone 0DBF  
                      _PROTOCOL_Inv_Handler 0052                                _isdigit$1266 0020  
                      __end_of_PROTOCOL_INV 0D86                        __end_of_PROTOCOL_EXT 0800  
                      __end_of_PROTOCOL_SAV 0DE8                        __end_of_PROTOCOL_SET 0DBF  
                      __end_of_PROTOCOL_STA 0D8E                        __end_of_PROTOCOL_RST 0E04  
                      __end_of_PROTOCOL_STP 0D7B                  __end_of_EUSART_Receive_ISR 0EB2  
           PROTOCOL_Initialize@stop_handler 0024                  __size_of_EUSART_Initialize 001A  
                       __end_of_EUSART_Read 0F44                      __size_of_PROTOCOL_Loop 0189  
                                 __pnvBANK1 00E0       __end_of_PROTOCOL_Write_Device_Address 0E46  
    __size_of_PROTOCOL_Write_Device_Address 000F               _PROTOCOL_Write_Device_Address 0E37  
                                 _analog_in 00E8                            ___lwdiv@dividend 0022  
                    _PIN_MANAGER_Initialize 0F06                        EUSART_Read@readValue 0021  
                         _ADC_SelectChannel 07EE                                    ?___lwdiv 0020  
                                  ?___lwmod 0028                             ?_ADC_Initialize 0070  
                              _eusartRxHead 0062                          ?_ADC_SelectChannel 0070  
                              _eusartTxHead 007C                                _eusartRxTail 0061  
                              _eusartTxTail 007B                                    _I2C1_ISR 0FAC  
             ?_PROTOCOL_Read_Device_Address 0070                ??_INTERRUPT_InterruptManager 0079  
                 PROTOCOL_Send_int16_t@pbuf 00DA                                   _led_blink 0E1B  
                                 __pswtext1 0800                                  loop_func@i 004D  
                                loop_func@v 004B                     _eusartTxBufferRemaining 007A  
                                  ?_isdigit 0070                         ??_ADC_SelectChannel 0020  
                     ?_ADC_IsConversionDone 0070                            ___lwdiv@quotient 0025  
                  __size_of_DATAEE_ReadByte 000D                                    ?_strncmp 0020  
                            __size_of_putch 0006                              _eusartRxBuffer 00A0  
                         ??_TMR0_Initialize 0020                              _eusartTxBuffer 00A8  
                            ___wmul@product 0024                                    _LATCbits 010E  
                      _PROTOCOL_Set_Handler 00E2                                   clear_ram0 0DA5  
                             ??_set_handler 0021                                    _PIE1bits 0091  
                                 _loop_func 0560                   __end_of_ADC_SelectChannel 07FE  
                     PROTOCOL_I2C_SEN@pdata 0071                    PROTOCOL_I2C_Set_TLV@type 0023  
       __size_of_INTERRUPT_InterruptManager 002C                                    _PIR1bits 0011  
                                  _SSP1CON1 0215                                    _SSP1CON2 0216  
                                  _SSP1CON3 0217                PROTOCOL_Initialize@device_id 0021  
                                  _SSP1STAT 0214                              _readbuf_status 00C0  
                     _PROTOCOL_Stop_Handler 00E4                 __end_of_PROTOCOL_Initialize 06C0  
                              loop_func@out 0048                                   _threshold 00EF  
                                ?_led_blink 0070                                  _ADCON0bits 009D  
                   __size_ofi1_PROTOCOL_EXT 0001                     __size_ofi1_PROTOCOL_SAV 0009  
                   __size_ofi1_PROTOCOL_SET 0007                     __size_ofi1_PROTOCOL_STA 0004  
                   __size_ofi1_PROTOCOL_STP 0003                           ___wmul@multiplier 0020  
              __end_of_PROTOCOL_I2C_Set_TLV 0E7D                               _PROTOCOL_Loop 0249  
                  ADC_SelectChannel@channel 0021                                  printf@flag 003E  
                                printf@prec 0036                       DATAEE_WriteByte@bData 0020  
                   I2C1_StatusCallback@next 0065                                 _EUSART_Read 0F25  
               PROTOCOL_I2C_Set_TLV@pbuffer 0021                           ?_DATAEE_WriteByte 0020  
  __end_of_PROTOCOL_Backplane_Slave_Enabled 0D82   __size_of_PROTOCOL_Backplane_Slave_Enabled 0004  
        ??_PROTOCOL_Backplane_Slave_Enabled 0070           ?_PROTOCOL_Backplane_Slave_Enabled 0070  
          _PROTOCOL_Backplane_Slave_Enabled 0D7E                          ??_DATAEE_WriteByte 0021  
                             _slave_address 005E                                  _EECON1bits 0195  
                        PROTOCOL_SET@value_ 0021                                  ?_loop_func 0070  
                 __size_of_PROTOCOL_I2C_GET 0003                   __size_of_PROTOCOL_I2C_SEN 003C  
                 __size_of_PROTOCOL_I2C_WHO 0003                    ?_ADC_GetConversionResult 0020  
                   ??_OSCILLATOR_Initialize 0020                  PROTOCOL_Set_Func@loop_func 0020  
                       __end_of_set_handler 0E0E              ?_PROTOCOL_Write_Device_Address 0070  
                          __size_of___lwdiv 0035                            __size_of___lwmod 002D  
                            ?_PROTOCOL_Loop 0070                      ??_ADC_IsConversionDone 0020  
                     __size_of_PROTOCOL_INV 0004                       __size_of_PROTOCOL_EXT 0001  
                     __size_of_PROTOCOL_SAV 0009                       __size_of_PROTOCOL_SET 0007  
                     __size_of_PROTOCOL_STA 0004                       __size_of_PROTOCOL_RST 000A  
                     __size_of_PROTOCOL_STP 0003              ??_PROTOCOL_Read_Device_Address 0020  
                          __size_of_isdigit 000F                             ___lwdiv@divisor 0020  
              __size_of_I2C1_StatusCallback 00C4                             ___lwdiv@counter 0027  
                                  __ptext10 06C0                                    __ptext11 0074  
                                  __ptext20 0DE8                                    __ptext12 0D9F  
                                  __ptext21 0607                                    __ptext13 0F88  
                                  __ptext30 0F65                                    __ptext22 0E46  
                                  __ptext14 0FD3                                    __ptext31 07FF  
                                  __ptext23 0ECD                                    __ptext15 0785  
                                  __ptext40 0DC6                                    __ptext32 0F25  
                                  __ptext24 0D8E                                    __ptext16 0E64  
                                  __ptext33 0678                                    __ptext25 0E37  
                                  __ptext17 0D7B                                    __ptext50 0D6F  
                                  __ptext42 0FAC                                    __ptext34 0E0E  
                                  __ptext26 0D78                                    __ptext18 07EE  
                                  __ptext51 0DFA                                    __ptext43 049C  
                                  __ptext35 0F06                                    __ptext27 0D8A  
                                  __ptext19 0DBF                                    __ptext52 0D82  
                                  __ptext44 0D72                                    __ptext36 0D9A  
                                  __ptext28 0DB8                                    __ptext53 0D6C  
                                  __ptext45 0D86                                    __ptext37 0F44  
                                  __ptext29 0DDF                                    __ptext54 0749  
                                  __ptext46 0DB1                                    __ptext38 0D75  
                                  __ptext55 0D69                                    __ptext47 0DD6  
                                  __ptext39 0E7D                                    __ptext56 0D7E  
                                  __ptext48 0EE9                                    __ptext57 0EB2  
                                  __ptext49 0003                                    __ptext58 0E97  
                              _SSP1CON1bits 0215                                _SSP1CON2bits 0216  
                                  _float100 00B6                 __size_ofi1_DATAEE_WriteByte 001D  
               DATAEE_WriteByte@GIEBitValue 0022                            __size_of_strncmp 0042  
                             __size_of_atoi 0071                               __size_of_main 0034  
                                strncmp@len 0023                           ??_DATAEE_ReadByte 0020  
                __size_of_ADC_SelectChannel 0010                     _BACKPLANE_SLAVE_ADDRESS 006E  
                __end_of_PROTOCOL_Read_Lock 0D72                                    int$flags 007E  
                                  _position 00D1                                    atoi@sign 002A  
                              _PROTOCOL_INV 0D82                                _PROTOCOL_EXT 07FF  
                              _PROTOCOL_SAV 0DDF                                _PROTOCOL_SET 0DB8  
                              _PROTOCOL_STA 0D8A                                _PROTOCOL_RST 0DFA  
                              _PROTOCOL_STP 0D78          __end_of_INTERRUPT_InterruptManager 0030  
                _INTERRUPT_InterruptManager 0004                                   printf@len 003C  
                                 printf@val 003A                                _SSP1STATbits 0214  
        __size_of_PROTOCOL_I2C_Send_uint8_t 0047                  ?_PROTOCOL_I2C_Send_uint8_t 0042  
                               ??_led_blink 0020                    ?_TMR0_HasOverflowOccured 0070  
                        _I2C_slaveWriteData 007D                                  _INTCONbits 000B  
                                  isdigit@c 0021                     __size_of_WDT_Initialize 0004  
                                  intlevel1 0000                 __end_of_ADC_StartConversion 0D7E  
                          ___lwmod@dividend 002A                     ?_PIN_MANAGER_Initialize 0070  
           __end_of_ADC_GetConversionResult 0DF1                           __CFG_CLKOUTEN$OFF 0000  
                               ??_loop_func 0047                        _PROTOCOL_I2C_Set_TLV 0E64  
                               _set_handler 0E04                                   strncmp@s1 0020  
                                 strncmp@s2 0022                            ??_ADC_Initialize 0020  
                   _backplane_slave_enabled 0055                                    printf@ap 0039  
                                  printf@cp 0037                          _EUSART_Receive_ISR 0E97  
                           ??_PROTOCOL_Loop 004E                    __size_of_I2C1_Initialize 0021  
                            i1_PROTOCOL_EXT 0003                              i1_PROTOCOL_SAV 0DD6  
                            i1_PROTOCOL_SET 0DB1                              i1_PROTOCOL_STA 0D86  
                            i1_PROTOCOL_STP 0D72           __end_of_PROTOCOL_I2C_Send_uint8_t 0707  
                                _OPTION_REG 0095                         ?_EUSART_Receive_ISR 0070  
                           ___lwmod@divisor 0028                             _TMR0_Initialize 0E29  
                           ___lwmod@counter 002D                 PROTOCOL_Loop@device_address 0051  
                      PROTOCOL_EXT@char_buf 0020                          EUSART_Write@txData 0021  
              __size_of_EUSART_Transmit_ISR 001B              __end_of_PIN_MANAGER_Initialize 0F25  
                      ??_EUSART_Receive_ISR 0070                       ?_PROTOCOL_I2C_Set_TLV 0020  
                          _PROTOCOL_I2C_GET 0D69                            _PROTOCOL_I2C_SEN 0749  
                          _PROTOCOL_I2C_WHO 0D6C  
