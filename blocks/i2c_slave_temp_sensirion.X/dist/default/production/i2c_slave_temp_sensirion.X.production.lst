

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Thu Sep 21 20:06:39 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F1829
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	stringtext,global,class=STRCODE,delta=2
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text4,local,class=CODE,merge=1,delta=2,group=4
    25                           	psect	text5,local,class=CODE,merge=1,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2,group=4
    34                           	psect	text14,local,class=CODE,merge=1,delta=2,group=4
    35                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2,group=4
    40                           	psect	text20,local,class=CODE,merge=1,delta=2,group=4
    41                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    42                           	psect	text22,local,class=CODE,merge=1,delta=2,group=4
    43                           	psect	text23,local,class=CODE,merge=1,delta=2,group=4
    44                           	psect	text24,local,class=CODE,merge=1,delta=2,group=4
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,delta=2,group=1
    47                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    48                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    49                           	psect	text29,local,class=CODE,merge=1,delta=2,group=1
    50                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2,group=1
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2,group=1
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2,group=1
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	intentry,global,class=CODE,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	swtext1,local,class=CONST,delta=2
    65                           	psect	text44,local,class=CODE,merge=1,delta=2
    66                           	psect	text45,local,class=CODE,merge=1,delta=2
    67                           	psect	text46,local,class=CODE,merge=1,delta=2
    68                           	psect	text47,local,class=CODE,merge=1,delta=2
    69                           	psect	text48,local,class=CODE,merge=1,delta=2
    70                           	psect	swtext2,local,class=CONST,delta=2
    71                           	psect	text49,local,class=CODE,merge=1,delta=2
    72                           	psect	text50,local,class=CODE,merge=1,delta=2
    73                           	psect	text51,local,class=CODE,merge=1,delta=2
    74                           	psect	text52,local,class=CODE,merge=1,delta=2
    75                           	psect	text53,local,class=CODE,merge=1,delta=2
    76                           	psect	text54,local,class=CODE,merge=1,delta=2
    77                           	psect	text55,local,class=CODE,merge=1,delta=2,group=1
    78                           	psect	text56,local,class=CODE,merge=1,delta=2,group=1
    79                           	psect	text57,local,class=CODE,merge=1,delta=2,group=1
    80                           	psect	text58,local,class=CODE,merge=1,delta=2,group=1
    81                           	psect	text59,local,class=CODE,merge=1,delta=2,group=1
    82                           	psect	text60,local,class=CODE,merge=1,delta=2,group=1
    83                           	psect	text61,local,class=CODE,merge=1,delta=2,group=1
    84                           	psect	text62,local,class=CODE,merge=1,delta=2
    85                           	psect	text63,local,class=CODE,merge=1,delta=2
    86                           	dabs	1,0x7E,2
    87  0000                     
    88                           ; Version 1.41 (B)
    89                           ; Generated 21/02/2017 GMT
    90                           ; 
    91                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    92                           ; All rights reserved.
    93                           ; 
    94                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    95                           ; 
    96                           ; Redistribution and use in source and binary forms, with or without modification, are
    97                           ; permitted provided that the following conditions are met:
    98                           ; 
    99                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   100                           ;        conditions and the following disclaimer.
   101                           ; 
   102                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   103                           ;        of conditions and the following disclaimer in the documentation and/or other
   104                           ;        materials provided with the distribution.
   105                           ; 
   106                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   107                           ;        software without specific prior written permission.
   108                           ; 
   109                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   110                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   111                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   112                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   113                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   114                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   115                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   116                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   117                           ; 
   118                           ; 
   119                           ; Code-generator required, PIC16F1829 Definitions
   120                           ; 
   121                           ; SFR Addresses
   122  0000                     	;# 
   123  0001                     	;# 
   124  0002                     	;# 
   125  0003                     	;# 
   126  0004                     	;# 
   127  0005                     	;# 
   128  0006                     	;# 
   129  0007                     	;# 
   130  0008                     	;# 
   131  0009                     	;# 
   132  000A                     	;# 
   133  000B                     	;# 
   134  000C                     	;# 
   135  000D                     	;# 
   136  000E                     	;# 
   137  0011                     	;# 
   138  0012                     	;# 
   139  0013                     	;# 
   140  0014                     	;# 
   141  0015                     	;# 
   142  0016                     	;# 
   143  0016                     	;# 
   144  0017                     	;# 
   145  0018                     	;# 
   146  0019                     	;# 
   147  001A                     	;# 
   148  001B                     	;# 
   149  001C                     	;# 
   150  001E                     	;# 
   151  001F                     	;# 
   152  008C                     	;# 
   153  008D                     	;# 
   154  008E                     	;# 
   155  0091                     	;# 
   156  0092                     	;# 
   157  0093                     	;# 
   158  0094                     	;# 
   159  0095                     	;# 
   160  0096                     	;# 
   161  0097                     	;# 
   162  0098                     	;# 
   163  0099                     	;# 
   164  009A                     	;# 
   165  009B                     	;# 
   166  009B                     	;# 
   167  009C                     	;# 
   168  009D                     	;# 
   169  009E                     	;# 
   170  010C                     	;# 
   171  010D                     	;# 
   172  010E                     	;# 
   173  0111                     	;# 
   174  0112                     	;# 
   175  0113                     	;# 
   176  0114                     	;# 
   177  0115                     	;# 
   178  0116                     	;# 
   179  0117                     	;# 
   180  0118                     	;# 
   181  0119                     	;# 
   182  011A                     	;# 
   183  011B                     	;# 
   184  011D                     	;# 
   185  011E                     	;# 
   186  018C                     	;# 
   187  018D                     	;# 
   188  018E                     	;# 
   189  0191                     	;# 
   190  0191                     	;# 
   191  0192                     	;# 
   192  0193                     	;# 
   193  0193                     	;# 
   194  0193                     	;# 
   195  0194                     	;# 
   196  0195                     	;# 
   197  0196                     	;# 
   198  0199                     	;# 
   199  019A                     	;# 
   200  019B                     	;# 
   201  019B                     	;# 
   202  019C                     	;# 
   203  019D                     	;# 
   204  019E                     	;# 
   205  019F                     	;# 
   206  020C                     	;# 
   207  020D                     	;# 
   208  020E                     	;# 
   209  0211                     	;# 
   210  0211                     	;# 
   211  0212                     	;# 
   212  0212                     	;# 
   213  0213                     	;# 
   214  0213                     	;# 
   215  0214                     	;# 
   216  0214                     	;# 
   217  0215                     	;# 
   218  0215                     	;# 
   219  0215                     	;# 
   220  0216                     	;# 
   221  0216                     	;# 
   222  0217                     	;# 
   223  0217                     	;# 
   224  0219                     	;# 
   225  021A                     	;# 
   226  021B                     	;# 
   227  021C                     	;# 
   228  021D                     	;# 
   229  021E                     	;# 
   230  021F                     	;# 
   231  0291                     	;# 
   232  0291                     	;# 
   233  0292                     	;# 
   234  0293                     	;# 
   235  0294                     	;# 
   236  0295                     	;# 
   237  0295                     	;# 
   238  0296                     	;# 
   239  0298                     	;# 
   240  0298                     	;# 
   241  0299                     	;# 
   242  029A                     	;# 
   243  029B                     	;# 
   244  029C                     	;# 
   245  029D                     	;# 
   246  029E                     	;# 
   247  0311                     	;# 
   248  0311                     	;# 
   249  0312                     	;# 
   250  0313                     	;# 
   251  0318                     	;# 
   252  0318                     	;# 
   253  0319                     	;# 
   254  031A                     	;# 
   255  038C                     	;# 
   256  038D                     	;# 
   257  038E                     	;# 
   258  0391                     	;# 
   259  0392                     	;# 
   260  0393                     	;# 
   261  0394                     	;# 
   262  0395                     	;# 
   263  0396                     	;# 
   264  039A                     	;# 
   265  039C                     	;# 
   266  039D                     	;# 
   267  039E                     	;# 
   268  039F                     	;# 
   269  0415                     	;# 
   270  0416                     	;# 
   271  0417                     	;# 
   272  041C                     	;# 
   273  041D                     	;# 
   274  041E                     	;# 
   275  0FE4                     	;# 
   276  0FE5                     	;# 
   277  0FE6                     	;# 
   278  0FE7                     	;# 
   279  0FE8                     	;# 
   280  0FE9                     	;# 
   281  0FEA                     	;# 
   282  0FEB                     	;# 
   283  0FED                     	;# 
   284  0FEE                     	;# 
   285  0FEF                     	;# 
   286  0000                     	;# 
   287  0001                     	;# 
   288  0002                     	;# 
   289  0003                     	;# 
   290  0004                     	;# 
   291  0005                     	;# 
   292  0006                     	;# 
   293  0007                     	;# 
   294  0008                     	;# 
   295  0009                     	;# 
   296  000A                     	;# 
   297  000B                     	;# 
   298  000C                     	;# 
   299  000D                     	;# 
   300  000E                     	;# 
   301  0011                     	;# 
   302  0012                     	;# 
   303  0013                     	;# 
   304  0014                     	;# 
   305  0015                     	;# 
   306  0016                     	;# 
   307  0016                     	;# 
   308  0017                     	;# 
   309  0018                     	;# 
   310  0019                     	;# 
   311  001A                     	;# 
   312  001B                     	;# 
   313  001C                     	;# 
   314  001E                     	;# 
   315  001F                     	;# 
   316  008C                     	;# 
   317  008D                     	;# 
   318  008E                     	;# 
   319  0091                     	;# 
   320  0092                     	;# 
   321  0093                     	;# 
   322  0094                     	;# 
   323  0095                     	;# 
   324  0096                     	;# 
   325  0097                     	;# 
   326  0098                     	;# 
   327  0099                     	;# 
   328  009A                     	;# 
   329  009B                     	;# 
   330  009B                     	;# 
   331  009C                     	;# 
   332  009D                     	;# 
   333  009E                     	;# 
   334  010C                     	;# 
   335  010D                     	;# 
   336  010E                     	;# 
   337  0111                     	;# 
   338  0112                     	;# 
   339  0113                     	;# 
   340  0114                     	;# 
   341  0115                     	;# 
   342  0116                     	;# 
   343  0117                     	;# 
   344  0118                     	;# 
   345  0119                     	;# 
   346  011A                     	;# 
   347  011B                     	;# 
   348  011D                     	;# 
   349  011E                     	;# 
   350  018C                     	;# 
   351  018D                     	;# 
   352  018E                     	;# 
   353  0191                     	;# 
   354  0191                     	;# 
   355  0192                     	;# 
   356  0193                     	;# 
   357  0193                     	;# 
   358  0193                     	;# 
   359  0194                     	;# 
   360  0195                     	;# 
   361  0196                     	;# 
   362  0199                     	;# 
   363  019A                     	;# 
   364  019B                     	;# 
   365  019B                     	;# 
   366  019C                     	;# 
   367  019D                     	;# 
   368  019E                     	;# 
   369  019F                     	;# 
   370  020C                     	;# 
   371  020D                     	;# 
   372  020E                     	;# 
   373  0211                     	;# 
   374  0211                     	;# 
   375  0212                     	;# 
   376  0212                     	;# 
   377  0213                     	;# 
   378  0213                     	;# 
   379  0214                     	;# 
   380  0214                     	;# 
   381  0215                     	;# 
   382  0215                     	;# 
   383  0215                     	;# 
   384  0216                     	;# 
   385  0216                     	;# 
   386  0217                     	;# 
   387  0217                     	;# 
   388  0219                     	;# 
   389  021A                     	;# 
   390  021B                     	;# 
   391  021C                     	;# 
   392  021D                     	;# 
   393  021E                     	;# 
   394  021F                     	;# 
   395  0291                     	;# 
   396  0291                     	;# 
   397  0292                     	;# 
   398  0293                     	;# 
   399  0294                     	;# 
   400  0295                     	;# 
   401  0295                     	;# 
   402  0296                     	;# 
   403  0298                     	;# 
   404  0298                     	;# 
   405  0299                     	;# 
   406  029A                     	;# 
   407  029B                     	;# 
   408  029C                     	;# 
   409  029D                     	;# 
   410  029E                     	;# 
   411  0311                     	;# 
   412  0311                     	;# 
   413  0312                     	;# 
   414  0313                     	;# 
   415  0318                     	;# 
   416  0318                     	;# 
   417  0319                     	;# 
   418  031A                     	;# 
   419  038C                     	;# 
   420  038D                     	;# 
   421  038E                     	;# 
   422  0391                     	;# 
   423  0392                     	;# 
   424  0393                     	;# 
   425  0394                     	;# 
   426  0395                     	;# 
   427  0396                     	;# 
   428  039A                     	;# 
   429  039C                     	;# 
   430  039D                     	;# 
   431  039E                     	;# 
   432  039F                     	;# 
   433  0415                     	;# 
   434  0416                     	;# 
   435  0417                     	;# 
   436  041C                     	;# 
   437  041D                     	;# 
   438  041E                     	;# 
   439  0FE4                     	;# 
   440  0FE5                     	;# 
   441  0FE6                     	;# 
   442  0FE7                     	;# 
   443  0FE8                     	;# 
   444  0FE9                     	;# 
   445  0FEA                     	;# 
   446  0FEB                     	;# 
   447  0FED                     	;# 
   448  0FEE                     	;# 
   449  0FEF                     	;# 
   450  0000                     	;# 
   451  0001                     	;# 
   452  0002                     	;# 
   453  0003                     	;# 
   454  0004                     	;# 
   455  0005                     	;# 
   456  0006                     	;# 
   457  0007                     	;# 
   458  0008                     	;# 
   459  0009                     	;# 
   460  000A                     	;# 
   461  000B                     	;# 
   462  000C                     	;# 
   463  000D                     	;# 
   464  000E                     	;# 
   465  0011                     	;# 
   466  0012                     	;# 
   467  0013                     	;# 
   468  0014                     	;# 
   469  0015                     	;# 
   470  0016                     	;# 
   471  0016                     	;# 
   472  0017                     	;# 
   473  0018                     	;# 
   474  0019                     	;# 
   475  001A                     	;# 
   476  001B                     	;# 
   477  001C                     	;# 
   478  001E                     	;# 
   479  001F                     	;# 
   480  008C                     	;# 
   481  008D                     	;# 
   482  008E                     	;# 
   483  0091                     	;# 
   484  0092                     	;# 
   485  0093                     	;# 
   486  0094                     	;# 
   487  0095                     	;# 
   488  0096                     	;# 
   489  0097                     	;# 
   490  0098                     	;# 
   491  0099                     	;# 
   492  009A                     	;# 
   493  009B                     	;# 
   494  009B                     	;# 
   495  009C                     	;# 
   496  009D                     	;# 
   497  009E                     	;# 
   498  010C                     	;# 
   499  010D                     	;# 
   500  010E                     	;# 
   501  0111                     	;# 
   502  0112                     	;# 
   503  0113                     	;# 
   504  0114                     	;# 
   505  0115                     	;# 
   506  0116                     	;# 
   507  0117                     	;# 
   508  0118                     	;# 
   509  0119                     	;# 
   510  011A                     	;# 
   511  011B                     	;# 
   512  011D                     	;# 
   513  011E                     	;# 
   514  018C                     	;# 
   515  018D                     	;# 
   516  018E                     	;# 
   517  0191                     	;# 
   518  0191                     	;# 
   519  0192                     	;# 
   520  0193                     	;# 
   521  0193                     	;# 
   522  0193                     	;# 
   523  0194                     	;# 
   524  0195                     	;# 
   525  0196                     	;# 
   526  0199                     	;# 
   527  019A                     	;# 
   528  019B                     	;# 
   529  019B                     	;# 
   530  019C                     	;# 
   531  019D                     	;# 
   532  019E                     	;# 
   533  019F                     	;# 
   534  020C                     	;# 
   535  020D                     	;# 
   536  020E                     	;# 
   537  0211                     	;# 
   538  0211                     	;# 
   539  0212                     	;# 
   540  0212                     	;# 
   541  0213                     	;# 
   542  0213                     	;# 
   543  0214                     	;# 
   544  0214                     	;# 
   545  0215                     	;# 
   546  0215                     	;# 
   547  0215                     	;# 
   548  0216                     	;# 
   549  0216                     	;# 
   550  0217                     	;# 
   551  0217                     	;# 
   552  0219                     	;# 
   553  021A                     	;# 
   554  021B                     	;# 
   555  021C                     	;# 
   556  021D                     	;# 
   557  021E                     	;# 
   558  021F                     	;# 
   559  0291                     	;# 
   560  0291                     	;# 
   561  0292                     	;# 
   562  0293                     	;# 
   563  0294                     	;# 
   564  0295                     	;# 
   565  0295                     	;# 
   566  0296                     	;# 
   567  0298                     	;# 
   568  0298                     	;# 
   569  0299                     	;# 
   570  029A                     	;# 
   571  029B                     	;# 
   572  029C                     	;# 
   573  029D                     	;# 
   574  029E                     	;# 
   575  0311                     	;# 
   576  0311                     	;# 
   577  0312                     	;# 
   578  0313                     	;# 
   579  0318                     	;# 
   580  0318                     	;# 
   581  0319                     	;# 
   582  031A                     	;# 
   583  038C                     	;# 
   584  038D                     	;# 
   585  038E                     	;# 
   586  0391                     	;# 
   587  0392                     	;# 
   588  0393                     	;# 
   589  0394                     	;# 
   590  0395                     	;# 
   591  0396                     	;# 
   592  039A                     	;# 
   593  039C                     	;# 
   594  039D                     	;# 
   595  039E                     	;# 
   596  039F                     	;# 
   597  0415                     	;# 
   598  0416                     	;# 
   599  0417                     	;# 
   600  041C                     	;# 
   601  041D                     	;# 
   602  041E                     	;# 
   603  0FE4                     	;# 
   604  0FE5                     	;# 
   605  0FE6                     	;# 
   606  0FE7                     	;# 
   607  0FE8                     	;# 
   608  0FE9                     	;# 
   609  0FEA                     	;# 
   610  0FEB                     	;# 
   611  0FED                     	;# 
   612  0FEE                     	;# 
   613  0FEF                     	;# 
   614  0000                     	;# 
   615  0001                     	;# 
   616  0002                     	;# 
   617  0003                     	;# 
   618  0004                     	;# 
   619  0005                     	;# 
   620  0006                     	;# 
   621  0007                     	;# 
   622  0008                     	;# 
   623  0009                     	;# 
   624  000A                     	;# 
   625  000B                     	;# 
   626  000C                     	;# 
   627  000D                     	;# 
   628  000E                     	;# 
   629  0011                     	;# 
   630  0012                     	;# 
   631  0013                     	;# 
   632  0014                     	;# 
   633  0015                     	;# 
   634  0016                     	;# 
   635  0016                     	;# 
   636  0017                     	;# 
   637  0018                     	;# 
   638  0019                     	;# 
   639  001A                     	;# 
   640  001B                     	;# 
   641  001C                     	;# 
   642  001E                     	;# 
   643  001F                     	;# 
   644  008C                     	;# 
   645  008D                     	;# 
   646  008E                     	;# 
   647  0091                     	;# 
   648  0092                     	;# 
   649  0093                     	;# 
   650  0094                     	;# 
   651  0095                     	;# 
   652  0096                     	;# 
   653  0097                     	;# 
   654  0098                     	;# 
   655  0099                     	;# 
   656  009A                     	;# 
   657  009B                     	;# 
   658  009B                     	;# 
   659  009C                     	;# 
   660  009D                     	;# 
   661  009E                     	;# 
   662  010C                     	;# 
   663  010D                     	;# 
   664  010E                     	;# 
   665  0111                     	;# 
   666  0112                     	;# 
   667  0113                     	;# 
   668  0114                     	;# 
   669  0115                     	;# 
   670  0116                     	;# 
   671  0117                     	;# 
   672  0118                     	;# 
   673  0119                     	;# 
   674  011A                     	;# 
   675  011B                     	;# 
   676  011D                     	;# 
   677  011E                     	;# 
   678  018C                     	;# 
   679  018D                     	;# 
   680  018E                     	;# 
   681  0191                     	;# 
   682  0191                     	;# 
   683  0192                     	;# 
   684  0193                     	;# 
   685  0193                     	;# 
   686  0193                     	;# 
   687  0194                     	;# 
   688  0195                     	;# 
   689  0196                     	;# 
   690  0199                     	;# 
   691  019A                     	;# 
   692  019B                     	;# 
   693  019B                     	;# 
   694  019C                     	;# 
   695  019D                     	;# 
   696  019E                     	;# 
   697  019F                     	;# 
   698  020C                     	;# 
   699  020D                     	;# 
   700  020E                     	;# 
   701  0211                     	;# 
   702  0211                     	;# 
   703  0212                     	;# 
   704  0212                     	;# 
   705  0213                     	;# 
   706  0213                     	;# 
   707  0214                     	;# 
   708  0214                     	;# 
   709  0215                     	;# 
   710  0215                     	;# 
   711  0215                     	;# 
   712  0216                     	;# 
   713  0216                     	;# 
   714  0217                     	;# 
   715  0217                     	;# 
   716  0219                     	;# 
   717  021A                     	;# 
   718  021B                     	;# 
   719  021C                     	;# 
   720  021D                     	;# 
   721  021E                     	;# 
   722  021F                     	;# 
   723  0291                     	;# 
   724  0291                     	;# 
   725  0292                     	;# 
   726  0293                     	;# 
   727  0294                     	;# 
   728  0295                     	;# 
   729  0295                     	;# 
   730  0296                     	;# 
   731  0298                     	;# 
   732  0298                     	;# 
   733  0299                     	;# 
   734  029A                     	;# 
   735  029B                     	;# 
   736  029C                     	;# 
   737  029D                     	;# 
   738  029E                     	;# 
   739  0311                     	;# 
   740  0311                     	;# 
   741  0312                     	;# 
   742  0313                     	;# 
   743  0318                     	;# 
   744  0318                     	;# 
   745  0319                     	;# 
   746  031A                     	;# 
   747  038C                     	;# 
   748  038D                     	;# 
   749  038E                     	;# 
   750  0391                     	;# 
   751  0392                     	;# 
   752  0393                     	;# 
   753  0394                     	;# 
   754  0395                     	;# 
   755  0396                     	;# 
   756  039A                     	;# 
   757  039C                     	;# 
   758  039D                     	;# 
   759  039E                     	;# 
   760  039F                     	;# 
   761  0415                     	;# 
   762  0416                     	;# 
   763  0417                     	;# 
   764  041C                     	;# 
   765  041D                     	;# 
   766  041E                     	;# 
   767  0FE4                     	;# 
   768  0FE5                     	;# 
   769  0FE6                     	;# 
   770  0FE7                     	;# 
   771  0FE8                     	;# 
   772  0FE9                     	;# 
   773  0FEA                     	;# 
   774  0FEB                     	;# 
   775  0FED                     	;# 
   776  0FEE                     	;# 
   777  0FEF                     	;# 
   778  0000                     	;# 
   779  0001                     	;# 
   780  0002                     	;# 
   781  0003                     	;# 
   782  0004                     	;# 
   783  0005                     	;# 
   784  0006                     	;# 
   785  0007                     	;# 
   786  0008                     	;# 
   787  0009                     	;# 
   788  000A                     	;# 
   789  000B                     	;# 
   790  000C                     	;# 
   791  000D                     	;# 
   792  000E                     	;# 
   793  0011                     	;# 
   794  0012                     	;# 
   795  0013                     	;# 
   796  0014                     	;# 
   797  0015                     	;# 
   798  0016                     	;# 
   799  0016                     	;# 
   800  0017                     	;# 
   801  0018                     	;# 
   802  0019                     	;# 
   803  001A                     	;# 
   804  001B                     	;# 
   805  001C                     	;# 
   806  001E                     	;# 
   807  001F                     	;# 
   808  008C                     	;# 
   809  008D                     	;# 
   810  008E                     	;# 
   811  0091                     	;# 
   812  0092                     	;# 
   813  0093                     	;# 
   814  0094                     	;# 
   815  0095                     	;# 
   816  0096                     	;# 
   817  0097                     	;# 
   818  0098                     	;# 
   819  0099                     	;# 
   820  009A                     	;# 
   821  009B                     	;# 
   822  009B                     	;# 
   823  009C                     	;# 
   824  009D                     	;# 
   825  009E                     	;# 
   826  010C                     	;# 
   827  010D                     	;# 
   828  010E                     	;# 
   829  0111                     	;# 
   830  0112                     	;# 
   831  0113                     	;# 
   832  0114                     	;# 
   833  0115                     	;# 
   834  0116                     	;# 
   835  0117                     	;# 
   836  0118                     	;# 
   837  0119                     	;# 
   838  011A                     	;# 
   839  011B                     	;# 
   840  011D                     	;# 
   841  011E                     	;# 
   842  018C                     	;# 
   843  018D                     	;# 
   844  018E                     	;# 
   845  0191                     	;# 
   846  0191                     	;# 
   847  0192                     	;# 
   848  0193                     	;# 
   849  0193                     	;# 
   850  0193                     	;# 
   851  0194                     	;# 
   852  0195                     	;# 
   853  0196                     	;# 
   854  0199                     	;# 
   855  019A                     	;# 
   856  019B                     	;# 
   857  019B                     	;# 
   858  019C                     	;# 
   859  019D                     	;# 
   860  019E                     	;# 
   861  019F                     	;# 
   862  020C                     	;# 
   863  020D                     	;# 
   864  020E                     	;# 
   865  0211                     	;# 
   866  0211                     	;# 
   867  0212                     	;# 
   868  0212                     	;# 
   869  0213                     	;# 
   870  0213                     	;# 
   871  0214                     	;# 
   872  0214                     	;# 
   873  0215                     	;# 
   874  0215                     	;# 
   875  0215                     	;# 
   876  0216                     	;# 
   877  0216                     	;# 
   878  0217                     	;# 
   879  0217                     	;# 
   880  0219                     	;# 
   881  021A                     	;# 
   882  021B                     	;# 
   883  021C                     	;# 
   884  021D                     	;# 
   885  021E                     	;# 
   886  021F                     	;# 
   887  0291                     	;# 
   888  0291                     	;# 
   889  0292                     	;# 
   890  0293                     	;# 
   891  0294                     	;# 
   892  0295                     	;# 
   893  0295                     	;# 
   894  0296                     	;# 
   895  0298                     	;# 
   896  0298                     	;# 
   897  0299                     	;# 
   898  029A                     	;# 
   899  029B                     	;# 
   900  029C                     	;# 
   901  029D                     	;# 
   902  029E                     	;# 
   903  0311                     	;# 
   904  0311                     	;# 
   905  0312                     	;# 
   906  0313                     	;# 
   907  0318                     	;# 
   908  0318                     	;# 
   909  0319                     	;# 
   910  031A                     	;# 
   911  038C                     	;# 
   912  038D                     	;# 
   913  038E                     	;# 
   914  0391                     	;# 
   915  0392                     	;# 
   916  0393                     	;# 
   917  0394                     	;# 
   918  0395                     	;# 
   919  0396                     	;# 
   920  039A                     	;# 
   921  039C                     	;# 
   922  039D                     	;# 
   923  039E                     	;# 
   924  039F                     	;# 
   925  0415                     	;# 
   926  0416                     	;# 
   927  0417                     	;# 
   928  041C                     	;# 
   929  041D                     	;# 
   930  041E                     	;# 
   931  0FE4                     	;# 
   932  0FE5                     	;# 
   933  0FE6                     	;# 
   934  0FE7                     	;# 
   935  0FE8                     	;# 
   936  0FE9                     	;# 
   937  0FEA                     	;# 
   938  0FEB                     	;# 
   939  0FED                     	;# 
   940  0FEE                     	;# 
   941  0FEF                     	;# 
   942  0000                     	;# 
   943  0001                     	;# 
   944  0002                     	;# 
   945  0003                     	;# 
   946  0004                     	;# 
   947  0005                     	;# 
   948  0006                     	;# 
   949  0007                     	;# 
   950  0008                     	;# 
   951  0009                     	;# 
   952  000A                     	;# 
   953  000B                     	;# 
   954  000C                     	;# 
   955  000D                     	;# 
   956  000E                     	;# 
   957  0011                     	;# 
   958  0012                     	;# 
   959  0013                     	;# 
   960  0014                     	;# 
   961  0015                     	;# 
   962  0016                     	;# 
   963  0016                     	;# 
   964  0017                     	;# 
   965  0018                     	;# 
   966  0019                     	;# 
   967  001A                     	;# 
   968  001B                     	;# 
   969  001C                     	;# 
   970  001E                     	;# 
   971  001F                     	;# 
   972  008C                     	;# 
   973  008D                     	;# 
   974  008E                     	;# 
   975  0091                     	;# 
   976  0092                     	;# 
   977  0093                     	;# 
   978  0094                     	;# 
   979  0095                     	;# 
   980  0096                     	;# 
   981  0097                     	;# 
   982  0098                     	;# 
   983  0099                     	;# 
   984  009A                     	;# 
   985  009B                     	;# 
   986  009B                     	;# 
   987  009C                     	;# 
   988  009D                     	;# 
   989  009E                     	;# 
   990  010C                     	;# 
   991  010D                     	;# 
   992  010E                     	;# 
   993  0111                     	;# 
   994  0112                     	;# 
   995  0113                     	;# 
   996  0114                     	;# 
   997  0115                     	;# 
   998  0116                     	;# 
   999  0117                     	;# 
  1000  0118                     	;# 
  1001  0119                     	;# 
  1002  011A                     	;# 
  1003  011B                     	;# 
  1004  011D                     	;# 
  1005  011E                     	;# 
  1006  018C                     	;# 
  1007  018D                     	;# 
  1008  018E                     	;# 
  1009  0191                     	;# 
  1010  0191                     	;# 
  1011  0192                     	;# 
  1012  0193                     	;# 
  1013  0193                     	;# 
  1014  0193                     	;# 
  1015  0194                     	;# 
  1016  0195                     	;# 
  1017  0196                     	;# 
  1018  0199                     	;# 
  1019  019A                     	;# 
  1020  019B                     	;# 
  1021  019B                     	;# 
  1022  019C                     	;# 
  1023  019D                     	;# 
  1024  019E                     	;# 
  1025  019F                     	;# 
  1026  020C                     	;# 
  1027  020D                     	;# 
  1028  020E                     	;# 
  1029  0211                     	;# 
  1030  0211                     	;# 
  1031  0212                     	;# 
  1032  0212                     	;# 
  1033  0213                     	;# 
  1034  0213                     	;# 
  1035  0214                     	;# 
  1036  0214                     	;# 
  1037  0215                     	;# 
  1038  0215                     	;# 
  1039  0215                     	;# 
  1040  0216                     	;# 
  1041  0216                     	;# 
  1042  0217                     	;# 
  1043  0217                     	;# 
  1044  0219                     	;# 
  1045  021A                     	;# 
  1046  021B                     	;# 
  1047  021C                     	;# 
  1048  021D                     	;# 
  1049  021E                     	;# 
  1050  021F                     	;# 
  1051  0291                     	;# 
  1052  0291                     	;# 
  1053  0292                     	;# 
  1054  0293                     	;# 
  1055  0294                     	;# 
  1056  0295                     	;# 
  1057  0295                     	;# 
  1058  0296                     	;# 
  1059  0298                     	;# 
  1060  0298                     	;# 
  1061  0299                     	;# 
  1062  029A                     	;# 
  1063  029B                     	;# 
  1064  029C                     	;# 
  1065  029D                     	;# 
  1066  029E                     	;# 
  1067  0311                     	;# 
  1068  0311                     	;# 
  1069  0312                     	;# 
  1070  0313                     	;# 
  1071  0318                     	;# 
  1072  0318                     	;# 
  1073  0319                     	;# 
  1074  031A                     	;# 
  1075  038C                     	;# 
  1076  038D                     	;# 
  1077  038E                     	;# 
  1078  0391                     	;# 
  1079  0392                     	;# 
  1080  0393                     	;# 
  1081  0394                     	;# 
  1082  0395                     	;# 
  1083  0396                     	;# 
  1084  039A                     	;# 
  1085  039C                     	;# 
  1086  039D                     	;# 
  1087  039E                     	;# 
  1088  039F                     	;# 
  1089  0415                     	;# 
  1090  0416                     	;# 
  1091  0417                     	;# 
  1092  041C                     	;# 
  1093  041D                     	;# 
  1094  041E                     	;# 
  1095  0FE4                     	;# 
  1096  0FE5                     	;# 
  1097  0FE6                     	;# 
  1098  0FE7                     	;# 
  1099  0FE8                     	;# 
  1100  0FE9                     	;# 
  1101  0FEA                     	;# 
  1102  0FEB                     	;# 
  1103  0FED                     	;# 
  1104  0FEE                     	;# 
  1105  0FEF                     	;# 
  1106  0000                     	;# 
  1107  0001                     	;# 
  1108  0002                     	;# 
  1109  0003                     	;# 
  1110  0004                     	;# 
  1111  0005                     	;# 
  1112  0006                     	;# 
  1113  0007                     	;# 
  1114  0008                     	;# 
  1115  0009                     	;# 
  1116  000A                     	;# 
  1117  000B                     	;# 
  1118  000C                     	;# 
  1119  000D                     	;# 
  1120  000E                     	;# 
  1121  0011                     	;# 
  1122  0012                     	;# 
  1123  0013                     	;# 
  1124  0014                     	;# 
  1125  0015                     	;# 
  1126  0016                     	;# 
  1127  0016                     	;# 
  1128  0017                     	;# 
  1129  0018                     	;# 
  1130  0019                     	;# 
  1131  001A                     	;# 
  1132  001B                     	;# 
  1133  001C                     	;# 
  1134  001E                     	;# 
  1135  001F                     	;# 
  1136  008C                     	;# 
  1137  008D                     	;# 
  1138  008E                     	;# 
  1139  0091                     	;# 
  1140  0092                     	;# 
  1141  0093                     	;# 
  1142  0094                     	;# 
  1143  0095                     	;# 
  1144  0096                     	;# 
  1145  0097                     	;# 
  1146  0098                     	;# 
  1147  0099                     	;# 
  1148  009A                     	;# 
  1149  009B                     	;# 
  1150  009B                     	;# 
  1151  009C                     	;# 
  1152  009D                     	;# 
  1153  009E                     	;# 
  1154  010C                     	;# 
  1155  010D                     	;# 
  1156  010E                     	;# 
  1157  0111                     	;# 
  1158  0112                     	;# 
  1159  0113                     	;# 
  1160  0114                     	;# 
  1161  0115                     	;# 
  1162  0116                     	;# 
  1163  0117                     	;# 
  1164  0118                     	;# 
  1165  0119                     	;# 
  1166  011A                     	;# 
  1167  011B                     	;# 
  1168  011D                     	;# 
  1169  011E                     	;# 
  1170  018C                     	;# 
  1171  018D                     	;# 
  1172  018E                     	;# 
  1173  0191                     	;# 
  1174  0191                     	;# 
  1175  0192                     	;# 
  1176  0193                     	;# 
  1177  0193                     	;# 
  1178  0193                     	;# 
  1179  0194                     	;# 
  1180  0195                     	;# 
  1181  0196                     	;# 
  1182  0199                     	;# 
  1183  019A                     	;# 
  1184  019B                     	;# 
  1185  019B                     	;# 
  1186  019C                     	;# 
  1187  019D                     	;# 
  1188  019E                     	;# 
  1189  019F                     	;# 
  1190  020C                     	;# 
  1191  020D                     	;# 
  1192  020E                     	;# 
  1193  0211                     	;# 
  1194  0211                     	;# 
  1195  0212                     	;# 
  1196  0212                     	;# 
  1197  0213                     	;# 
  1198  0213                     	;# 
  1199  0214                     	;# 
  1200  0214                     	;# 
  1201  0215                     	;# 
  1202  0215                     	;# 
  1203  0215                     	;# 
  1204  0216                     	;# 
  1205  0216                     	;# 
  1206  0217                     	;# 
  1207  0217                     	;# 
  1208  0219                     	;# 
  1209  021A                     	;# 
  1210  021B                     	;# 
  1211  021C                     	;# 
  1212  021D                     	;# 
  1213  021E                     	;# 
  1214  021F                     	;# 
  1215  0291                     	;# 
  1216  0291                     	;# 
  1217  0292                     	;# 
  1218  0293                     	;# 
  1219  0294                     	;# 
  1220  0295                     	;# 
  1221  0295                     	;# 
  1222  0296                     	;# 
  1223  0298                     	;# 
  1224  0298                     	;# 
  1225  0299                     	;# 
  1226  029A                     	;# 
  1227  029B                     	;# 
  1228  029C                     	;# 
  1229  029D                     	;# 
  1230  029E                     	;# 
  1231  0311                     	;# 
  1232  0311                     	;# 
  1233  0312                     	;# 
  1234  0313                     	;# 
  1235  0318                     	;# 
  1236  0318                     	;# 
  1237  0319                     	;# 
  1238  031A                     	;# 
  1239  038C                     	;# 
  1240  038D                     	;# 
  1241  038E                     	;# 
  1242  0391                     	;# 
  1243  0392                     	;# 
  1244  0393                     	;# 
  1245  0394                     	;# 
  1246  0395                     	;# 
  1247  0396                     	;# 
  1248  039A                     	;# 
  1249  039C                     	;# 
  1250  039D                     	;# 
  1251  039E                     	;# 
  1252  039F                     	;# 
  1253  0415                     	;# 
  1254  0416                     	;# 
  1255  0417                     	;# 
  1256  041C                     	;# 
  1257  041D                     	;# 
  1258  041E                     	;# 
  1259  0FE4                     	;# 
  1260  0FE5                     	;# 
  1261  0FE6                     	;# 
  1262  0FE7                     	;# 
  1263  0FE8                     	;# 
  1264  0FE9                     	;# 
  1265  0FEA                     	;# 
  1266  0FEB                     	;# 
  1267  0FED                     	;# 
  1268  0FEE                     	;# 
  1269  0FEF                     	;# 
  1270  0000                     	;# 
  1271  0001                     	;# 
  1272  0002                     	;# 
  1273  0003                     	;# 
  1274  0004                     	;# 
  1275  0005                     	;# 
  1276  0006                     	;# 
  1277  0007                     	;# 
  1278  0008                     	;# 
  1279  0009                     	;# 
  1280  000A                     	;# 
  1281  000B                     	;# 
  1282  000C                     	;# 
  1283  000D                     	;# 
  1284  000E                     	;# 
  1285  0011                     	;# 
  1286  0012                     	;# 
  1287  0013                     	;# 
  1288  0014                     	;# 
  1289  0015                     	;# 
  1290  0016                     	;# 
  1291  0016                     	;# 
  1292  0017                     	;# 
  1293  0018                     	;# 
  1294  0019                     	;# 
  1295  001A                     	;# 
  1296  001B                     	;# 
  1297  001C                     	;# 
  1298  001E                     	;# 
  1299  001F                     	;# 
  1300  008C                     	;# 
  1301  008D                     	;# 
  1302  008E                     	;# 
  1303  0091                     	;# 
  1304  0092                     	;# 
  1305  0093                     	;# 
  1306  0094                     	;# 
  1307  0095                     	;# 
  1308  0096                     	;# 
  1309  0097                     	;# 
  1310  0098                     	;# 
  1311  0099                     	;# 
  1312  009A                     	;# 
  1313  009B                     	;# 
  1314  009B                     	;# 
  1315  009C                     	;# 
  1316  009D                     	;# 
  1317  009E                     	;# 
  1318  010C                     	;# 
  1319  010D                     	;# 
  1320  010E                     	;# 
  1321  0111                     	;# 
  1322  0112                     	;# 
  1323  0113                     	;# 
  1324  0114                     	;# 
  1325  0115                     	;# 
  1326  0116                     	;# 
  1327  0117                     	;# 
  1328  0118                     	;# 
  1329  0119                     	;# 
  1330  011A                     	;# 
  1331  011B                     	;# 
  1332  011D                     	;# 
  1333  011E                     	;# 
  1334  018C                     	;# 
  1335  018D                     	;# 
  1336  018E                     	;# 
  1337  0191                     	;# 
  1338  0191                     	;# 
  1339  0192                     	;# 
  1340  0193                     	;# 
  1341  0193                     	;# 
  1342  0193                     	;# 
  1343  0194                     	;# 
  1344  0195                     	;# 
  1345  0196                     	;# 
  1346  0199                     	;# 
  1347  019A                     	;# 
  1348  019B                     	;# 
  1349  019B                     	;# 
  1350  019C                     	;# 
  1351  019D                     	;# 
  1352  019E                     	;# 
  1353  019F                     	;# 
  1354  020C                     	;# 
  1355  020D                     	;# 
  1356  020E                     	;# 
  1357  0211                     	;# 
  1358  0211                     	;# 
  1359  0212                     	;# 
  1360  0212                     	;# 
  1361  0213                     	;# 
  1362  0213                     	;# 
  1363  0214                     	;# 
  1364  0214                     	;# 
  1365  0215                     	;# 
  1366  0215                     	;# 
  1367  0215                     	;# 
  1368  0216                     	;# 
  1369  0216                     	;# 
  1370  0217                     	;# 
  1371  0217                     	;# 
  1372  0219                     	;# 
  1373  021A                     	;# 
  1374  021B                     	;# 
  1375  021C                     	;# 
  1376  021D                     	;# 
  1377  021E                     	;# 
  1378  021F                     	;# 
  1379  0291                     	;# 
  1380  0291                     	;# 
  1381  0292                     	;# 
  1382  0293                     	;# 
  1383  0294                     	;# 
  1384  0295                     	;# 
  1385  0295                     	;# 
  1386  0296                     	;# 
  1387  0298                     	;# 
  1388  0298                     	;# 
  1389  0299                     	;# 
  1390  029A                     	;# 
  1391  029B                     	;# 
  1392  029C                     	;# 
  1393  029D                     	;# 
  1394  029E                     	;# 
  1395  0311                     	;# 
  1396  0311                     	;# 
  1397  0312                     	;# 
  1398  0313                     	;# 
  1399  0318                     	;# 
  1400  0318                     	;# 
  1401  0319                     	;# 
  1402  031A                     	;# 
  1403  038C                     	;# 
  1404  038D                     	;# 
  1405  038E                     	;# 
  1406  0391                     	;# 
  1407  0392                     	;# 
  1408  0393                     	;# 
  1409  0394                     	;# 
  1410  0395                     	;# 
  1411  0396                     	;# 
  1412  039A                     	;# 
  1413  039C                     	;# 
  1414  039D                     	;# 
  1415  039E                     	;# 
  1416  039F                     	;# 
  1417  0415                     	;# 
  1418  0416                     	;# 
  1419  0417                     	;# 
  1420  041C                     	;# 
  1421  041D                     	;# 
  1422  041E                     	;# 
  1423  0FE4                     	;# 
  1424  0FE5                     	;# 
  1425  0FE6                     	;# 
  1426  0FE7                     	;# 
  1427  0FE8                     	;# 
  1428  0FE9                     	;# 
  1429  0FEA                     	;# 
  1430  0FEB                     	;# 
  1431  0FED                     	;# 
  1432  0FEE                     	;# 
  1433  0FEF                     	;# 
  1434  0000                     	;# 
  1435  0001                     	;# 
  1436  0002                     	;# 
  1437  0003                     	;# 
  1438  0004                     	;# 
  1439  0005                     	;# 
  1440  0006                     	;# 
  1441  0007                     	;# 
  1442  0008                     	;# 
  1443  0009                     	;# 
  1444  000A                     	;# 
  1445  000B                     	;# 
  1446  000C                     	;# 
  1447  000D                     	;# 
  1448  000E                     	;# 
  1449  0011                     	;# 
  1450  0012                     	;# 
  1451  0013                     	;# 
  1452  0014                     	;# 
  1453  0015                     	;# 
  1454  0016                     	;# 
  1455  0016                     	;# 
  1456  0017                     	;# 
  1457  0018                     	;# 
  1458  0019                     	;# 
  1459  001A                     	;# 
  1460  001B                     	;# 
  1461  001C                     	;# 
  1462  001E                     	;# 
  1463  001F                     	;# 
  1464  008C                     	;# 
  1465  008D                     	;# 
  1466  008E                     	;# 
  1467  0091                     	;# 
  1468  0092                     	;# 
  1469  0093                     	;# 
  1470  0094                     	;# 
  1471  0095                     	;# 
  1472  0096                     	;# 
  1473  0097                     	;# 
  1474  0098                     	;# 
  1475  0099                     	;# 
  1476  009A                     	;# 
  1477  009B                     	;# 
  1478  009B                     	;# 
  1479  009C                     	;# 
  1480  009D                     	;# 
  1481  009E                     	;# 
  1482  010C                     	;# 
  1483  010D                     	;# 
  1484  010E                     	;# 
  1485  0111                     	;# 
  1486  0112                     	;# 
  1487  0113                     	;# 
  1488  0114                     	;# 
  1489  0115                     	;# 
  1490  0116                     	;# 
  1491  0117                     	;# 
  1492  0118                     	;# 
  1493  0119                     	;# 
  1494  011A                     	;# 
  1495  011B                     	;# 
  1496  011D                     	;# 
  1497  011E                     	;# 
  1498  018C                     	;# 
  1499  018D                     	;# 
  1500  018E                     	;# 
  1501  0191                     	;# 
  1502  0191                     	;# 
  1503  0192                     	;# 
  1504  0193                     	;# 
  1505  0193                     	;# 
  1506  0193                     	;# 
  1507  0194                     	;# 
  1508  0195                     	;# 
  1509  0196                     	;# 
  1510  0199                     	;# 
  1511  019A                     	;# 
  1512  019B                     	;# 
  1513  019B                     	;# 
  1514  019C                     	;# 
  1515  019D                     	;# 
  1516  019E                     	;# 
  1517  019F                     	;# 
  1518  020C                     	;# 
  1519  020D                     	;# 
  1520  020E                     	;# 
  1521  0211                     	;# 
  1522  0211                     	;# 
  1523  0212                     	;# 
  1524  0212                     	;# 
  1525  0213                     	;# 
  1526  0213                     	;# 
  1527  0214                     	;# 
  1528  0214                     	;# 
  1529  0215                     	;# 
  1530  0215                     	;# 
  1531  0215                     	;# 
  1532  0216                     	;# 
  1533  0216                     	;# 
  1534  0217                     	;# 
  1535  0217                     	;# 
  1536  0219                     	;# 
  1537  021A                     	;# 
  1538  021B                     	;# 
  1539  021C                     	;# 
  1540  021D                     	;# 
  1541  021E                     	;# 
  1542  021F                     	;# 
  1543  0291                     	;# 
  1544  0291                     	;# 
  1545  0292                     	;# 
  1546  0293                     	;# 
  1547  0294                     	;# 
  1548  0295                     	;# 
  1549  0295                     	;# 
  1550  0296                     	;# 
  1551  0298                     	;# 
  1552  0298                     	;# 
  1553  0299                     	;# 
  1554  029A                     	;# 
  1555  029B                     	;# 
  1556  029C                     	;# 
  1557  029D                     	;# 
  1558  029E                     	;# 
  1559  0311                     	;# 
  1560  0311                     	;# 
  1561  0312                     	;# 
  1562  0313                     	;# 
  1563  0318                     	;# 
  1564  0318                     	;# 
  1565  0319                     	;# 
  1566  031A                     	;# 
  1567  038C                     	;# 
  1568  038D                     	;# 
  1569  038E                     	;# 
  1570  0391                     	;# 
  1571  0392                     	;# 
  1572  0393                     	;# 
  1573  0394                     	;# 
  1574  0395                     	;# 
  1575  0396                     	;# 
  1576  039A                     	;# 
  1577  039C                     	;# 
  1578  039D                     	;# 
  1579  039E                     	;# 
  1580  039F                     	;# 
  1581  0415                     	;# 
  1582  0416                     	;# 
  1583  0417                     	;# 
  1584  041C                     	;# 
  1585  041D                     	;# 
  1586  041E                     	;# 
  1587  0FE4                     	;# 
  1588  0FE5                     	;# 
  1589  0FE6                     	;# 
  1590  0FE7                     	;# 
  1591  0FE8                     	;# 
  1592  0FE9                     	;# 
  1593  0FEA                     	;# 
  1594  0FEB                     	;# 
  1595  0FED                     	;# 
  1596  0FEE                     	;# 
  1597  0FEF                     	;# 
  1598  0000                     	;# 
  1599  0001                     	;# 
  1600  0002                     	;# 
  1601  0003                     	;# 
  1602  0004                     	;# 
  1603  0005                     	;# 
  1604  0006                     	;# 
  1605  0007                     	;# 
  1606  0008                     	;# 
  1607  0009                     	;# 
  1608  000A                     	;# 
  1609  000B                     	;# 
  1610  000C                     	;# 
  1611  000D                     	;# 
  1612  000E                     	;# 
  1613  0011                     	;# 
  1614  0012                     	;# 
  1615  0013                     	;# 
  1616  0014                     	;# 
  1617  0015                     	;# 
  1618  0016                     	;# 
  1619  0016                     	;# 
  1620  0017                     	;# 
  1621  0018                     	;# 
  1622  0019                     	;# 
  1623  001A                     	;# 
  1624  001B                     	;# 
  1625  001C                     	;# 
  1626  001E                     	;# 
  1627  001F                     	;# 
  1628  008C                     	;# 
  1629  008D                     	;# 
  1630  008E                     	;# 
  1631  0091                     	;# 
  1632  0092                     	;# 
  1633  0093                     	;# 
  1634  0094                     	;# 
  1635  0095                     	;# 
  1636  0096                     	;# 
  1637  0097                     	;# 
  1638  0098                     	;# 
  1639  0099                     	;# 
  1640  009A                     	;# 
  1641  009B                     	;# 
  1642  009B                     	;# 
  1643  009C                     	;# 
  1644  009D                     	;# 
  1645  009E                     	;# 
  1646  010C                     	;# 
  1647  010D                     	;# 
  1648  010E                     	;# 
  1649  0111                     	;# 
  1650  0112                     	;# 
  1651  0113                     	;# 
  1652  0114                     	;# 
  1653  0115                     	;# 
  1654  0116                     	;# 
  1655  0117                     	;# 
  1656  0118                     	;# 
  1657  0119                     	;# 
  1658  011A                     	;# 
  1659  011B                     	;# 
  1660  011D                     	;# 
  1661  011E                     	;# 
  1662  018C                     	;# 
  1663  018D                     	;# 
  1664  018E                     	;# 
  1665  0191                     	;# 
  1666  0191                     	;# 
  1667  0192                     	;# 
  1668  0193                     	;# 
  1669  0193                     	;# 
  1670  0193                     	;# 
  1671  0194                     	;# 
  1672  0195                     	;# 
  1673  0196                     	;# 
  1674  0199                     	;# 
  1675  019A                     	;# 
  1676  019B                     	;# 
  1677  019B                     	;# 
  1678  019C                     	;# 
  1679  019D                     	;# 
  1680  019E                     	;# 
  1681  019F                     	;# 
  1682  020C                     	;# 
  1683  020D                     	;# 
  1684  020E                     	;# 
  1685  0211                     	;# 
  1686  0211                     	;# 
  1687  0212                     	;# 
  1688  0212                     	;# 
  1689  0213                     	;# 
  1690  0213                     	;# 
  1691  0214                     	;# 
  1692  0214                     	;# 
  1693  0215                     	;# 
  1694  0215                     	;# 
  1695  0215                     	;# 
  1696  0216                     	;# 
  1697  0216                     	;# 
  1698  0217                     	;# 
  1699  0217                     	;# 
  1700  0219                     	;# 
  1701  021A                     	;# 
  1702  021B                     	;# 
  1703  021C                     	;# 
  1704  021D                     	;# 
  1705  021E                     	;# 
  1706  021F                     	;# 
  1707  0291                     	;# 
  1708  0291                     	;# 
  1709  0292                     	;# 
  1710  0293                     	;# 
  1711  0294                     	;# 
  1712  0295                     	;# 
  1713  0295                     	;# 
  1714  0296                     	;# 
  1715  0298                     	;# 
  1716  0298                     	;# 
  1717  0299                     	;# 
  1718  029A                     	;# 
  1719  029B                     	;# 
  1720  029C                     	;# 
  1721  029D                     	;# 
  1722  029E                     	;# 
  1723  0311                     	;# 
  1724  0311                     	;# 
  1725  0312                     	;# 
  1726  0313                     	;# 
  1727  0318                     	;# 
  1728  0318                     	;# 
  1729  0319                     	;# 
  1730  031A                     	;# 
  1731  038C                     	;# 
  1732  038D                     	;# 
  1733  038E                     	;# 
  1734  0391                     	;# 
  1735  0392                     	;# 
  1736  0393                     	;# 
  1737  0394                     	;# 
  1738  0395                     	;# 
  1739  0396                     	;# 
  1740  039A                     	;# 
  1741  039C                     	;# 
  1742  039D                     	;# 
  1743  039E                     	;# 
  1744  039F                     	;# 
  1745  0415                     	;# 
  1746  0416                     	;# 
  1747  0417                     	;# 
  1748  041C                     	;# 
  1749  041D                     	;# 
  1750  041E                     	;# 
  1751  0FE4                     	;# 
  1752  0FE5                     	;# 
  1753  0FE6                     	;# 
  1754  0FE7                     	;# 
  1755  0FE8                     	;# 
  1756  0FE9                     	;# 
  1757  0FEA                     	;# 
  1758  0FEB                     	;# 
  1759  0FED                     	;# 
  1760  0FEE                     	;# 
  1761  0FEF                     	;# 
  1762  0000                     	;# 
  1763  0001                     	;# 
  1764  0002                     	;# 
  1765  0003                     	;# 
  1766  0004                     	;# 
  1767  0005                     	;# 
  1768  0006                     	;# 
  1769  0007                     	;# 
  1770  0008                     	;# 
  1771  0009                     	;# 
  1772  000A                     	;# 
  1773  000B                     	;# 
  1774  000C                     	;# 
  1775  000D                     	;# 
  1776  000E                     	;# 
  1777  0011                     	;# 
  1778  0012                     	;# 
  1779  0013                     	;# 
  1780  0014                     	;# 
  1781  0015                     	;# 
  1782  0016                     	;# 
  1783  0016                     	;# 
  1784  0017                     	;# 
  1785  0018                     	;# 
  1786  0019                     	;# 
  1787  001A                     	;# 
  1788  001B                     	;# 
  1789  001C                     	;# 
  1790  001E                     	;# 
  1791  001F                     	;# 
  1792  008C                     	;# 
  1793  008D                     	;# 
  1794  008E                     	;# 
  1795  0091                     	;# 
  1796  0092                     	;# 
  1797  0093                     	;# 
  1798  0094                     	;# 
  1799  0095                     	;# 
  1800  0096                     	;# 
  1801  0097                     	;# 
  1802  0098                     	;# 
  1803  0099                     	;# 
  1804  009A                     	;# 
  1805  009B                     	;# 
  1806  009B                     	;# 
  1807  009C                     	;# 
  1808  009D                     	;# 
  1809  009E                     	;# 
  1810  010C                     	;# 
  1811  010D                     	;# 
  1812  010E                     	;# 
  1813  0111                     	;# 
  1814  0112                     	;# 
  1815  0113                     	;# 
  1816  0114                     	;# 
  1817  0115                     	;# 
  1818  0116                     	;# 
  1819  0117                     	;# 
  1820  0118                     	;# 
  1821  0119                     	;# 
  1822  011A                     	;# 
  1823  011B                     	;# 
  1824  011D                     	;# 
  1825  011E                     	;# 
  1826  018C                     	;# 
  1827  018D                     	;# 
  1828  018E                     	;# 
  1829  0191                     	;# 
  1830  0191                     	;# 
  1831  0192                     	;# 
  1832  0193                     	;# 
  1833  0193                     	;# 
  1834  0193                     	;# 
  1835  0194                     	;# 
  1836  0195                     	;# 
  1837  0196                     	;# 
  1838  0199                     	;# 
  1839  019A                     	;# 
  1840  019B                     	;# 
  1841  019B                     	;# 
  1842  019C                     	;# 
  1843  019D                     	;# 
  1844  019E                     	;# 
  1845  019F                     	;# 
  1846  020C                     	;# 
  1847  020D                     	;# 
  1848  020E                     	;# 
  1849  0211                     	;# 
  1850  0211                     	;# 
  1851  0212                     	;# 
  1852  0212                     	;# 
  1853  0213                     	;# 
  1854  0213                     	;# 
  1855  0214                     	;# 
  1856  0214                     	;# 
  1857  0215                     	;# 
  1858  0215                     	;# 
  1859  0215                     	;# 
  1860  0216                     	;# 
  1861  0216                     	;# 
  1862  0217                     	;# 
  1863  0217                     	;# 
  1864  0219                     	;# 
  1865  021A                     	;# 
  1866  021B                     	;# 
  1867  021C                     	;# 
  1868  021D                     	;# 
  1869  021E                     	;# 
  1870  021F                     	;# 
  1871  0291                     	;# 
  1872  0291                     	;# 
  1873  0292                     	;# 
  1874  0293                     	;# 
  1875  0294                     	;# 
  1876  0295                     	;# 
  1877  0295                     	;# 
  1878  0296                     	;# 
  1879  0298                     	;# 
  1880  0298                     	;# 
  1881  0299                     	;# 
  1882  029A                     	;# 
  1883  029B                     	;# 
  1884  029C                     	;# 
  1885  029D                     	;# 
  1886  029E                     	;# 
  1887  0311                     	;# 
  1888  0311                     	;# 
  1889  0312                     	;# 
  1890  0313                     	;# 
  1891  0318                     	;# 
  1892  0318                     	;# 
  1893  0319                     	;# 
  1894  031A                     	;# 
  1895  038C                     	;# 
  1896  038D                     	;# 
  1897  038E                     	;# 
  1898  0391                     	;# 
  1899  0392                     	;# 
  1900  0393                     	;# 
  1901  0394                     	;# 
  1902  0395                     	;# 
  1903  0396                     	;# 
  1904  039A                     	;# 
  1905  039C                     	;# 
  1906  039D                     	;# 
  1907  039E                     	;# 
  1908  039F                     	;# 
  1909  0415                     	;# 
  1910  0416                     	;# 
  1911  0417                     	;# 
  1912  041C                     	;# 
  1913  041D                     	;# 
  1914  041E                     	;# 
  1915  0FE4                     	;# 
  1916  0FE5                     	;# 
  1917  0FE6                     	;# 
  1918  0FE7                     	;# 
  1919  0FE8                     	;# 
  1920  0FE9                     	;# 
  1921  0FEA                     	;# 
  1922  0FEB                     	;# 
  1923  0FED                     	;# 
  1924  0FEE                     	;# 
  1925  0FEF                     	;# 
  1926                           
  1927                           	psect	idataCOMMON
  1928  07FF                     __pidataCOMMON:	
  1929                           
  1930                           ;initializer for _I2C_slaveWriteData
  1931  07FF  3455               	retlw	85
  1932                           
  1933                           	psect	idataBANK1
  1934  0A0B                     __pidataBANK1:	
  1935                           
  1936                           ;initializer for _tmr_scaler
  1937  0A0B  3401               	retlw	1
  1938                           
  1939                           ;initializer for _BACKPLANE_SLAVE_ADDRESS
  1940  0A0C  3401               	retlw	1
  1941                           
  1942                           ;initializer for _type_no_data
  1943  0A0D  3406               	retlw	6
  1944                           
  1945                           	psect	stringtext
  1946  06C9                     __pstringtext:	
  1947  06C9                     _dpowers:	
  1948  06C9  3401               	retlw	1
  1949  06CA  3400               	retlw	0
  1950  06CB  340A               	retlw	10
  1951  06CC  3400               	retlw	0
  1952  06CD  3464               	retlw	100
  1953  06CE  3400               	retlw	0
  1954  06CF  34E8               	retlw	232
  1955  06D0  3403               	retlw	3
  1956  06D1  3410               	retlw	16
  1957  06D2  3427               	retlw	39
  1958  06D3                     __end_of_dpowers:	
  1959  06D3                     _RESOLUTION:	
  1960  06D3  34FF               	retlw	255
  1961  06D4  34FF               	retlw	255
  1962  06D5                     __end_of_RESOLUTION:	
  1963  06D5                     STR_36:	
  1964  06D5  3449               	retlw	73	;'I'
  1965  06D6  344C               	retlw	76	;'L'
  1966  06D7  344C               	retlw	76	;'L'
  1967  06D8  3445               	retlw	69	;'E'
  1968  06D9  3447               	retlw	71	;'G'
  1969  06DA  3441               	retlw	65	;'A'
  1970  06DB  344C               	retlw	76	;'L'
  1971  06DC  345F               	retlw	95	;'_'
  1972  06DD  3454               	retlw	84	;'T'
  1973  06DE  3459               	retlw	89	;'Y'
  1974  06DF  3450               	retlw	80	;'P'
  1975  06E0  3445               	retlw	69	;'E'
  1976  06E1  340A               	retlw	10
  1977  06E2  3400               	retlw	0
  1978  06E3                     STR_16:	
  1979  06E3  3424               	retlw	36	;'$'
  1980  06E4  343A               	retlw	58	;':'
  1981  06E5  3452               	retlw	82	;'R'
  1982  06E6  3444               	retlw	68	;'D'
  1983  06E7  3441               	retlw	65	;'A'
  1984  06E8  343A               	retlw	58	;':'
  1985  06E9  3425               	retlw	37	;'%'
  1986  06EA  3464               	retlw	100	;'d'
  1987  06EB  340A               	retlw	10
  1988  06EC  3400               	retlw	0
  1989  06ED                     STR_13:	
  1990  06ED  3424               	retlw	36	;'$'
  1991  06EE  343A               	retlw	58	;':'
  1992  06EF  3447               	retlw	71	;'G'
  1993  06F0  3445               	retlw	69	;'E'
  1994  06F1  3454               	retlw	84	;'T'
  1995  06F2  343A               	retlw	58	;':'
  1996  06F3  3425               	retlw	37	;'%'
  1997  06F4  3464               	retlw	100	;'d'
  1998  06F5  340A               	retlw	10
  1999  06F6  3400               	retlw	0
  2000  06F7                     STR_34:	
  2001  06F7  342D               	retlw	45	;'-'
  2002  06F8  3425               	retlw	37	;'%'
  2003  06F9  3464               	retlw	100	;'d'
  2004  06FA  342E               	retlw	46	;'.'
  2005  06FB  3425               	retlw	37	;'%'
  2006  06FC  3430               	retlw	48	;'0'
  2007  06FD  3432               	retlw	50	;'2'
  2008  06FE  3464               	retlw	100	;'d'
  2009  06FF  340A               	retlw	10
  2010  0700  3400               	retlw	0
  2011  0701                     STR_5:	
  2012  0701  3424               	retlw	36	;'$'
  2013  0702  343A               	retlw	58	;':'
  2014  0703  3457               	retlw	87	;'W'
  2015  0704  3448               	retlw	72	;'H'
  2016  0705  344F               	retlw	79	;'O'
  2017  0706  343A               	retlw	58	;':'
  2018  0707  3425               	retlw	37	;'%'
  2019  0708  3473               	retlw	115	;'s'
  2020  0709  340A               	retlw	10
  2021  070A  3400               	retlw	0
  2022  070B                     STR_9:	
  2023  070B  342A               	retlw	42	;'*'
  2024  070C  343A               	retlw	58	;':'
  2025  070D  3453               	retlw	83	;'S'
  2026  070E  3454               	retlw	84	;'T'
  2027  070F  3450               	retlw	80	;'P'
  2028  0710  343A               	retlw	58	;':'
  2029  0711  3425               	retlw	37	;'%'
  2030  0712  3473               	retlw	115	;'s'
  2031  0713  340A               	retlw	10
  2032  0714  3400               	retlw	0
  2033  0715                     STR_32:	
  2034  0715  342D               	retlw	45	;'-'
  2035  0716  3425               	retlw	37	;'%'
  2036  0717  3464               	retlw	100	;'d'
  2037  0718  342E               	retlw	46	;'.'
  2038  0719  3425               	retlw	37	;'%'
  2039  071A  3430               	retlw	48	;'0'
  2040  071B  3432               	retlw	50	;'2'
  2041  071C  3464               	retlw	100	;'d'
  2042  071D  342C               	retlw	44	;','
  2043  071E  3400               	retlw	0
  2044  071F                     STR_24:	
  2045  071F  3455               	retlw	85	;'U'
  2046  0720  3449               	retlw	73	;'I'
  2047  0721  344E               	retlw	78	;'N'
  2048  0722  3454               	retlw	84	;'T'
  2049  0723  3431               	retlw	49	;'1'
  2050  0724  3436               	retlw	54	;'6'
  2051  0725  345F               	retlw	95	;'_'
  2052  0726  3454               	retlw	84	;'T'
  2053  0727  343A               	retlw	58	;':'
  2054  0728  3400               	retlw	0
  2055  0729                     STR_1:	
  2056  0729  3453               	retlw	83	;'S'
  2057  072A  3448               	retlw	72	;'H'
  2058  072B  3454               	retlw	84	;'T'
  2059  072C  3433               	retlw	51	;'3'
  2060  072D  3431               	retlw	49	;'1'
  2061  072E  345F               	retlw	95	;'_'
  2062  072F  3444               	retlw	68	;'D'
  2063  0730  3449               	retlw	73	;'I'
  2064  0731  3453               	retlw	83	;'S'
  2065  0732  3400               	retlw	0
  2066  0733                     STR_35:	
  2067  0733  344E               	retlw	78	;'N'
  2068  0734  344F               	retlw	79	;'O'
  2069  0735  345F               	retlw	95	;'_'
  2070  0736  3444               	retlw	68	;'D'
  2071  0737  3441               	retlw	65	;'A'
  2072  0738  3454               	retlw	84	;'T'
  2073  0739  3441               	retlw	65	;'A'
  2074  073A  340A               	retlw	10
  2075  073B  3400               	retlw	0
  2076  073C                     STR_18:	
  2077  073C  3455               	retlw	85	;'U'
  2078  073D  3449               	retlw	73	;'I'
  2079  073E  344E               	retlw	78	;'N'
  2080  073F  3454               	retlw	84	;'T'
  2081  0740  3438               	retlw	56	;'8'
  2082  0741  345F               	retlw	95	;'_'
  2083  0742  3454               	retlw	84	;'T'
  2084  0743  343A               	retlw	58	;':'
  2085  0744  3400               	retlw	0
  2086  0745                     STR_30:	
  2087  0745  3446               	retlw	70	;'F'
  2088  0746  344C               	retlw	76	;'L'
  2089  0747  344F               	retlw	79	;'O'
  2090  0748  3441               	retlw	65	;'A'
  2091  0749  3454               	retlw	84	;'T'
  2092  074A  343A               	retlw	58	;':'
  2093  074B  3400               	retlw	0
  2094  074C                     STR_2:	
  2095  074C  3428               	retlw	40	;'('
  2096  074D  346E               	retlw	110	;'n'
  2097  074E  3475               	retlw	117	;'u'
  2098  074F  346C               	retlw	108	;'l'
  2099  0750  346C               	retlw	108	;'l'
  2100  0751  3429               	retlw	41	;')'
  2101  0752  3400               	retlw	0
  2102  0753                     STR_17:	
  2103  0753  3425               	retlw	37	;'%'
  2104  0754  3425               	retlw	37	;'%'
  2105  0755  3425               	retlw	37	;'%'
  2106  0756  3464               	retlw	100	;'d'
  2107  0757  343A               	retlw	58	;':'
  2108  0758  3400               	retlw	0
  2109  0759                     STR_3:	
  2110  0759  3423               	retlw	35	;'#'
  2111  075A  3425               	retlw	37	;'%'
  2112  075B  3473               	retlw	115	;'s'
  2113  075C  340A               	retlw	10
  2114  075D  3400               	retlw	0
  2115  075E                     STR_20:	
  2116  075E  3425               	retlw	37	;'%'
  2117  075F  3475               	retlw	117	;'u'
  2118  0760  340A               	retlw	10
  2119  0761  3400               	retlw	0
  2120  0762                     STR_22:	
  2121  0762  3425               	retlw	37	;'%'
  2122  0763  3464               	retlw	100	;'d'
  2123  0764  342C               	retlw	44	;','
  2124  0765  3400               	retlw	0
  2125  0766                     STR_19:	
  2126  0766  3425               	retlw	37	;'%'
  2127  0767  3475               	retlw	117	;'u'
  2128  0768  342C               	retlw	44	;','
  2129  0769  3400               	retlw	0
  2130  076A                     STR_15:	
  2131  076A  3452               	retlw	82	;'R'
  2132  076B  3444               	retlw	68	;'D'
  2133  076C  3441               	retlw	65	;'A'
  2134  076D  3400               	retlw	0
  2135  076E                     STR_14:	
  2136  076E  3457               	retlw	87	;'W'
  2137  076F  3444               	retlw	68	;'D'
  2138  0770  3441               	retlw	65	;'A'
  2139  0771  3400               	retlw	0
  2140  0772                     STR_7:	
  2141  0772  3453               	retlw	83	;'S'
  2142  0773  3454               	retlw	84	;'T'
  2143  0774  3441               	retlw	65	;'A'
  2144  0775  3400               	retlw	0
  2145  0776                     STR_10:	
  2146  0776  3441               	retlw	65	;'A'
  2147  0777  3443               	retlw	67	;'C'
  2148  0778  344B               	retlw	75	;'K'
  2149  0779  3400               	retlw	0
  2150  077A                     STR_4:	
  2151  077A  3457               	retlw	87	;'W'
  2152  077B  3448               	retlw	72	;'H'
  2153  077C  344F               	retlw	79	;'O'
  2154  077D  3400               	retlw	0
  2155  077E                     STR_8:	
  2156  077E  3453               	retlw	83	;'S'
  2157  077F  3454               	retlw	84	;'T'
  2158  0780  3450               	retlw	80	;'P'
  2159  0781  3400               	retlw	0
  2160  0782                     STR_12:	
  2161  0782  3447               	retlw	71	;'G'
  2162  0783  3445               	retlw	69	;'E'
  2163  0784  3454               	retlw	84	;'T'
  2164  0785  3400               	retlw	0
  2165  0786                     STR_11:	
  2166  0786  3453               	retlw	83	;'S'
  2167  0787  3445               	retlw	69	;'E'
  2168  0788  3454               	retlw	84	;'T'
  2169  0789  3400               	retlw	0
  2170  078A                     STR_6:	
  2171  078A  3453               	retlw	83	;'S'
  2172  078B  3441               	retlw	65	;'A'
  2173  078C  3456               	retlw	86	;'V'
  2174  078D  3400               	retlw	0
  2175  06E9                     
  2176                           ; #config settings
  2177  0000                     
  2178                           	psect	nvBANK1
  2179  00E1                     __pnvBANK1:	
  2180  00E1                     _device_id_:	
  2181  00E1                     	ds	2
  2182  00E3                     _PROTOCOL_Set_Handler:	
  2183  00E3                     	ds	2
  2184  00E5                     _PROTOCOL_Stop_Handler:	
  2185  00E5                     	ds	2
  2186  00E7                     _PROTOCOL_Start_Handler:	
  2187  00E7                     	ds	2
  2188  0015                     _TMR0	set	21
  2189  000B                     _INTCONbits	set	11
  2190  0014                     _PIR4bits	set	20
  2191  0011                     _PIR1bits	set	17
  2192  005A                     _TMR0IF	set	90
  2193  0095                     _OPTION_REG	set	149
  2194  0095                     _OPTION_REGbits	set	149
  2195  008E                     _TRISC	set	142
  2196  008D                     _TRISB	set	141
  2197  008C                     _TRISA	set	140
  2198  0097                     _WDTCON	set	151
  2199  0098                     _OSCTUNE	set	152
  2200  0099                     _OSCCON	set	153
  2201  0094                     _PIE4bits	set	148
  2202  0091                     _PIE1bits	set	145
  2203  010E                     _LATCbits	set	270
  2204  011D                     _APFCON0	set	285
  2205  011E                     _APFCON1	set	286
  2206  010E                     _LATC	set	270
  2207  010D                     _LATB	set	269
  2208  010C                     _LATA	set	268
  2209  0196                     _EECON2	set	406
  2210  0193                     _EEDATL	set	403
  2211  0194                     _EEDATH	set	404
  2212  0195                     _EECON1bits	set	405
  2213  0192                     _EEADRH	set	402
  2214  0191                     _EEADRL	set	401
  2215  018C                     _ANSELA	set	396
  2216  018D                     _ANSELB	set	397
  2217  018E                     _ANSELC	set	398
  2218  0199                     _RCREG	set	409
  2219  019D                     _RCSTAbits	set	413
  2220  019A                     _TXREG	set	410
  2221  019C                     _SPBRGH	set	412
  2222  019B                     _SPBRGL	set	411
  2223  019E                     _TXSTA	set	414
  2224  019D                     _RCSTA	set	413
  2225  019F                     _BAUDCON	set	415
  2226  020E                     _WPUC	set	526
  2227  020C                     _WPUA	set	524
  2228  020D                     _WPUB	set	525
  2229  0219                     _SSP2BUF	set	537
  2230  021E                     _SSP2CON2bits	set	542
  2231  021D                     _SSP2CON1bits	set	541
  2232  021A                     _SSP2ADD	set	538
  2233  021F                     _SSP2CON3	set	543
  2234  021D                     _SSP2CON1	set	541
  2235  021C                     _SSP2STAT	set	540
  2236  0215                     _SSP1CON1bits	set	533
  2237  0216                     _SSP1CON2bits	set	534
  2238  0214                     _SSP1STATbits	set	532
  2239  0211                     _SSP1BUF	set	529
  2240  0212                     _SSP1ADD	set	530
  2241  0213                     _SSP1MSK	set	531
  2242  0217                     _SSP1CON3	set	535
  2243  0216                     _SSP1CON2	set	534
  2244  0215                     _SSP1CON1	set	533
  2245  0214                     _SSP1STAT	set	532
  2246                           
  2247                           	psect	cinit
  2248  004A                     start_initialization:	
  2249  004A                     __initialization:	
  2250                           
  2251                           ; Initialize objects allocated to COMMON
  2252  004A  3187  27FF  3180   	fcall	__pidataCOMMON	;fetch initializer
  2253  004D  00FD               	movwf	__pdataCOMMON& (0+127)
  2254                           
  2255                           ; Initialize objects allocated to BANK1
  2256  004E  0021               	movlb	1	; select bank1
  2257  004F  318A  220B  3180   	fcall	__pidataBANK1	;fetch initializer
  2258  0052  00E9               	movwf	__pdataBANK1& (0+127)
  2259  0053  318A  220C  3180   	fcall	__pidataBANK1+1	;fetch initializer
  2260  0056  00EA               	movwf	(__pdataBANK1+1)& (0+127)
  2261  0057  318A  220D  3180   	fcall	__pidataBANK1+2	;fetch initializer
  2262  005A  00EB               	movwf	(__pdataBANK1+2)& (0+127)
  2263                           
  2264                           ; Clear objects allocated to COMMON
  2265  005B  01FA               	clrf	__pbssCOMMON& (0+127)
  2266  005C  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
  2267  005D  01FC               	clrf	(__pbssCOMMON+2)& (0+127)
  2268                           
  2269                           ; Clear objects allocated to BANK0
  2270  005E  3060               	movlw	low __pbssBANK0
  2271  005F  0084               	movwf	4
  2272  0060  3000               	movlw	high __pbssBANK0
  2273  0061  0085               	movwf	5
  2274  0062  300F               	movlw	15
  2275  0063  318A  2231  3180   	fcall	clear_ram0
  2276                           
  2277                           ; Clear objects allocated to BANK1
  2278  0066  30A0               	movlw	low __pbssBANK1
  2279  0067  0084               	movwf	4
  2280  0068  3000               	movlw	high __pbssBANK1
  2281  0069  0085               	movwf	5
  2282  006A  3041               	movlw	65
  2283  006B  318A  2231  3180   	fcall	clear_ram0
  2284                           
  2285                           ; Clear objects allocated to BANK2
  2286  006E  3020               	movlw	low __pbssBANK2
  2287  006F  0084               	movwf	4
  2288  0070  3001               	movlw	high __pbssBANK2
  2289  0071  0085               	movwf	5
  2290  0072  3048               	movlw	72
  2291  0073  318A  2231  3180   	fcall	clear_ram0
  2292                           
  2293                           ; Clear objects allocated to BANK3
  2294  0076  30A0               	movlw	low __pbssBANK3
  2295  0077  0084               	movwf	4
  2296  0078  3001               	movlw	high __pbssBANK3
  2297  0079  0085               	movwf	5
  2298  007A  3030               	movlw	48
  2299  007B  318A  2231         	fcall	clear_ram0
  2300  007D                     end_of_initialization:	
  2301                           ;End of C runtime variable initialization code
  2302                           
  2303  007D                     __end_of__initialization:	
  2304  007D  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2305  007E  0020               	movlb	0
  2306  007F  318D  2D70         	ljmp	_main	;jump to C main() function
  2307                           
  2308                           	psect	bssCOMMON
  2309  007A                     __pbssCOMMON:	
  2310  007A                     _eusartTxBufferRemaining:	
  2311  007A                     	ds	1
  2312  007B                     _eusartTxTail:	
  2313  007B                     	ds	1
  2314  007C                     _eusartTxHead:	
  2315  007C                     	ds	1
  2316                           
  2317                           	psect	dataCOMMON
  2318  007D                     __pdataCOMMON:	
  2319  007D                     _I2C_slaveWriteData:	
  2320  007D                     	ds	1
  2321                           
  2322                           	psect	bssBANK0
  2323  0060                     __pbssBANK0:	
  2324  0060                     _i2c2_object:	
  2325  0060                     	ds	5
  2326  0065                     _i:	
  2327  0065                     	ds	1
  2328  0066                     _value:	
  2329  0066                     	ds	1
  2330  0067                     _eusartRxCount:	
  2331  0067                     	ds	1
  2332  0068                     _eusartRxTail:	
  2333  0068                     	ds	1
  2334  0069                     _eusartRxHead:	
  2335  0069                     	ds	1
  2336  006A                     _p_i2c2_current:	
  2337  006A                     	ds	1
  2338  006B                     _p_i2c2_trb_current:	
  2339  006B                     	ds	1
  2340  006C                     I2C1_StatusCallback@next:	
  2341  006C                     	ds	1
  2342  006D                     I2C2_ISR@i2c_address:	
  2343  006D                     	ds	2
  2344                           
  2345                           	psect	bssBANK1
  2346  00A0                     __pbssBANK1:	
  2347  00A0                     _eusartTxBuffer:	
  2348  00A0                     	ds	8
  2349  00A8                     _float100:	
  2350  00A8                     	ds	2
  2351  00AA                     _PROTOCOL_Tick_Handler:	
  2352  00AA                     	ds	2
  2353  00AC                     _PROTOCOL_Inv_Handler:	
  2354  00AC                     	ds	2
  2355  00AE                     _PROTOCOL_Extension_Handler:	
  2356  00AE                     	ds	2
  2357  00B0                     _PROTOCOL_Loop_Func:	
  2358  00B0                     	ds	2
  2359  00B2                     _data:	
  2360  00B2                     	ds	1
  2361  00B3                     _j:	
  2362  00B3                     	ds	1
  2363  00B4                     _backplane_slave_enabled:	
  2364  00B4                     	ds	1
  2365  00B5                     _readbuf_status:	
  2366  00B5                     	ds	1
  2367  00B6                     _tmr_overflow:	
  2368  00B6                     	ds	1
  2369  00B7                     _tmr_cnt:	
  2370  00B7                     	ds	1
  2371  00B8                     _sec_cnt:	
  2372  00B8                     	ds	1
  2373  00B9                     _invoked:	
  2374  00B9                     	ds	1
  2375  00BA                     _running:	
  2376  00BA                     	ds	1
  2377  00BB                     _locked:	
  2378  00BB                     	ds	1
  2379  00BC                     _cnt:	
  2380  00BC                     	ds	1
  2381  00BD                     _slave_address:	
  2382  00BD                     	ds	1
  2383  00BE                     _timer0ReloadVal:	
  2384  00BE                     	ds	1
  2385  00BF                     I2C2_ISR@i2c_10bit_address_restart:	
  2386  00BF                     	ds	1
  2387  00C0                     I2C2_ISR@i2c_bytes_left:	
  2388  00C0                     	ds	1
  2389  00C1                     I2C2_ISR@pi2c_buf_ptr:	
  2390  00C1                     	ds	1
  2391  00C2                     _i2c2_trb_count:	
  2392  00C2                     	ds	1
  2393  00C3                     _i2c2_state:	
  2394  00C3                     	ds	1
  2395  00C4                     I2C1_StatusCallback@ext_cnt:	
  2396  00C4                     	ds	1
  2397  00C5                     I2C1_StatusCallback@ext_len:	
  2398  00C5                     	ds	1
  2399  00C6                     I2C1_StatusCallback@slaveWriteType:	
  2400  00C6                     	ds	1
  2401  00C7                     _readbuf:	
  2402  00C7                     	ds	6
  2403  00CD                     I2C2_MasterRead@trBlock:	
  2404  00CD                     	ds	4
  2405  00D1                     I2C2_MasterWrite@trBlock:	
  2406  00D1                     	ds	4
  2407  00D5                     PROTOCOL_Send_float@pbuf:	
  2408  00D5                     	ds	3
  2409  00D8                     _i2c2_tr_queue:	
  2410  00D8                     	ds	3
  2411  00DB                     PROTOCOL_Send_int16_t@pbuf:	
  2412  00DB                     	ds	2
  2413  00DD                     PROTOCOL_Send_uint16_t@pbuf:	
  2414  00DD                     	ds	2
  2415  00DF                     PROTOCOL_Send_int8_t@pbuf:	
  2416  00DF                     	ds	1
  2417  00E0                     PROTOCOL_Send_uint8_t@pbuf:	
  2418  00E0                     	ds	1
  2419                           
  2420                           	psect	dataBANK1
  2421  00E9                     __pdataBANK1:	
  2422  00E9                     _tmr_scaler:	
  2423  00E9                     	ds	1
  2424  00EA                     _BACKPLANE_SLAVE_ADDRESS:	
  2425  00EA                     	ds	1
  2426  00EB                     _type_no_data:	
  2427  00EB                     	ds	1
  2428                           
  2429                           	psect	bssBANK2
  2430  0120                     __pbssBANK2:	
  2431  0120                     _eusartRxBuffer:	
  2432  0120                     	ds	8
  2433  0128                     _buf:	
  2434  0128                     	ds	48
  2435  0158                     _sendbuf:	
  2436  0158                     	ds	16
  2437                           
  2438                           	psect	bssBANK3
  2439  01A0                     __pbssBANK3:	
  2440  01A0                     I2C1_StatusCallback@ext_buf:	
  2441  01A0                     	ds	48
  2442                           
  2443                           	psect	clrtext
  2444  0A31                     clear_ram0:	
  2445                           ;	Called with FSR0 containing the base address, and
  2446                           ;	WREG with the size to clear
  2447                           
  2448  0A31  0064               	clrwdt	;clear the watchdog before getting into this loop
  2449  0A32                     clrloop0:	
  2450  0A32  0180               	clrf	0	;clear RAM location pointed to by FSR
  2451  0A33  3101               	addfsr 0,1
  2452  0A34  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2453  0A35  2A32               	goto	clrloop0	;have we reached the end yet?
  2454  0A36  3400               	retlw	0	;all done for this memory range, return
  2455                           
  2456                           	psect	cstackBANK1
  2457  00EC                     __pcstackBANK1:	
  2458  00EC                     PROTOCOL_Loop@c:	
  2459                           
  2460                           ; 1 bytes @ 0x0
  2461  00EC                     	ds	1
  2462  00ED                     PROTOCOL_Loop@device_address:	
  2463                           
  2464                           ; 1 bytes @ 0x1
  2465  00ED                     	ds	1
  2466                           
  2467                           	psect	cstackCOMMON
  2468  0070                     __pcstackCOMMON:	
  2469  0070                     ?_isdigit:	
  2470  0070                     ?_PROTOCOL_Read_Device_Address:	
  2471                           ; 1 bit 
  2472                           
  2473  0070                     ?_I2C1_StatusCallback:	
  2474                           ; 1 bytes @ 0x0
  2475                           
  2476  0070                     ?_PROTOCOL_SET:	
  2477                           ; 1 bytes @ 0x0
  2478                           
  2479  0070                     ?_PROTOCOL_STA:	
  2480                           ; 1 bytes @ 0x0
  2481                           
  2482  0070                     ?_PROTOCOL_STP:	
  2483                           ; 1 bytes @ 0x0
  2484                           
  2485  0070                     ?_PROTOCOL_SAV:	
  2486                           ; 1 bytes @ 0x0
  2487                           
  2488  0070                     ?_PROTOCOL_INV:	
  2489                           ; 1 bytes @ 0x0
  2490                           
  2491  0070                     ??_PROTOCOL_INV:	
  2492                           ; 1 bytes @ 0x0
  2493                           
  2494  0070                     ?_PROTOCOL_RST:	
  2495                           ; 1 bytes @ 0x0
  2496                           
  2497  0070                     ??_PROTOCOL_RST:	
  2498                           ; 1 bytes @ 0x0
  2499                           
  2500  0070                     ?_PROTOCOL_Backplane_Slave_Enabled:	
  2501                           ; 1 bytes @ 0x0
  2502                           
  2503  0070                     ??_PROTOCOL_Backplane_Slave_Enabled:	
  2504                           ; 1 bytes @ 0x0
  2505                           
  2506  0070                     ?_PROTOCOL_Read_Lock:	
  2507                           ; 1 bytes @ 0x0
  2508                           
  2509  0070                     ??_PROTOCOL_Read_Lock:	
  2510                           ; 1 bytes @ 0x0
  2511                           
  2512  0070                     ?_PROTOCOL_EXT:	
  2513                           ; 1 bytes @ 0x0
  2514                           
  2515  0070                     ?_PROTOCOL_I2C_WHO:	
  2516                           ; 1 bytes @ 0x0
  2517                           
  2518  0070                     ??_PROTOCOL_I2C_WHO:	
  2519                           ; 1 bytes @ 0x0
  2520                           
  2521  0070                     ??_PROTOCOL_I2C_SEN:	
  2522                           ; 1 bytes @ 0x0
  2523                           
  2524  0070                     ?_PROTOCOL_I2C_GET:	
  2525                           ; 1 bytes @ 0x0
  2526                           
  2527  0070                     ??_PROTOCOL_I2C_GET:	
  2528                           ; 1 bytes @ 0x0
  2529                           
  2530  0070                     ?_I2C2_Stop:	
  2531                           ; 1 bytes @ 0x0
  2532                           
  2533  0070                     ??_I2C2_Stop:	
  2534                           ; 1 bytes @ 0x0
  2535                           
  2536  0070                     ?_I2C2_FunctionComplete:	
  2537                           ; 1 bytes @ 0x0
  2538                           
  2539  0070                     ??_I2C2_FunctionComplete:	
  2540                           ; 1 bytes @ 0x0
  2541                           
  2542  0070                     ?_PIN_MANAGER_Initialize:	
  2543                           ; 1 bytes @ 0x0
  2544                           
  2545  0070                     ?_OSCILLATOR_Initialize:	
  2546                           ; 1 bytes @ 0x0
  2547                           
  2548  0070                     ?_WDT_Initialize:	
  2549                           ; 1 bytes @ 0x0
  2550                           
  2551  0070                     ?_TMR0_Initialize:	
  2552                           ; 1 bytes @ 0x0
  2553                           
  2554  0070                     ?_EUSART_Initialize:	
  2555                           ; 1 bytes @ 0x0
  2556                           
  2557  0070                     ?_EUSART_Transmit_ISR:	
  2558                           ; 1 bytes @ 0x0
  2559                           
  2560  0070                     ??_EUSART_Transmit_ISR:	
  2561                           ; 1 bytes @ 0x0
  2562                           
  2563  0070                     ?_EUSART_Receive_ISR:	
  2564                           ; 1 bytes @ 0x0
  2565                           
  2566  0070                     ??_EUSART_Receive_ISR:	
  2567                           ; 1 bytes @ 0x0
  2568                           
  2569  0070                     ?_PROTOCOL_Loop:	
  2570                           ; 1 bytes @ 0x0
  2571                           
  2572  0070                     ?_I2C1_Initialize:	
  2573                           ; 1 bytes @ 0x0
  2574                           
  2575  0070                     ?_I2C1_ISR:	
  2576                           ; 1 bytes @ 0x0
  2577                           
  2578  0070                     ?_I2C2_Initialize:	
  2579                           ; 1 bytes @ 0x0
  2580                           
  2581  0070                     ?_I2C2_ISR:	
  2582                           ; 1 bytes @ 0x0
  2583                           
  2584  0070                     ?_I2C2_BusCollisionISR:	
  2585                           ; 1 bytes @ 0x0
  2586                           
  2587  0070                     ??_I2C2_BusCollisionISR:	
  2588                           ; 1 bytes @ 0x0
  2589                           
  2590  0070                     ?_INTERRUPT_InterruptManager:	
  2591                           ; 1 bytes @ 0x0
  2592                           
  2593  0070                     ?_EUSART_Read:	
  2594                           ; 1 bytes @ 0x0
  2595                           
  2596  0070                     ?_EUSART_Write:	
  2597                           ; 1 bytes @ 0x0
  2598                           
  2599  0070                     ?_putch:	
  2600                           ; 1 bytes @ 0x0
  2601                           
  2602  0070                     ?_DATAEE_ReadByte:	
  2603                           ; 1 bytes @ 0x0
  2604                           
  2605  0070                     ?_TMR0_HasOverflowOccured:	
  2606                           ; 1 bytes @ 0x0
  2607                           
  2608  0070                     ?_inv_handler:	
  2609                           ; 1 bytes @ 0x0
  2610                           
  2611  0070                     ?_main:	
  2612                           ; 1 bytes @ 0x0
  2613                           
  2614  0070                     ?_PROTOCOL_Write_Device_Address:	
  2615                           ; 1 bytes @ 0x0
  2616                           
  2617  0070                     ?i1_DATAEE_WriteByte:	
  2618                           ; 1 bytes @ 0x0
  2619                           
  2620  0070                     ?i1_PROTOCOL_STA:	
  2621                           ; 1 bytes @ 0x0
  2622                           
  2623  0070                     ??i1_PROTOCOL_STA:	
  2624                           ; 1 bytes @ 0x0
  2625                           
  2626  0070                     ?i1_PROTOCOL_STP:	
  2627                           ; 1 bytes @ 0x0
  2628                           
  2629  0070                     ??i1_PROTOCOL_STP:	
  2630                           ; 1 bytes @ 0x0
  2631                           
  2632  0070                     ?i1_PROTOCOL_SAV:	
  2633                           ; 1 bytes @ 0x0
  2634                           
  2635  0070                     ?i1_PROTOCOL_SET:	
  2636                           ; 1 bytes @ 0x0
  2637                           
  2638  0070                     ??i1_PROTOCOL_SET:	
  2639                           ; 1 bytes @ 0x0
  2640                           
  2641  0070                     ?i1_PROTOCOL_EXT:	
  2642                           ; 1 bytes @ 0x0
  2643                           
  2644  0070                     ??i1_PROTOCOL_EXT:	
  2645                           ; 1 bytes @ 0x0
  2646                           
  2647  0070                     ?_PROTOCOL_I2C_SEN:	
  2648                           ; 1 bytes @ 0x0
  2649                           
  2650  0070                     i1DATAEE_WriteByte@bData:	
  2651                           ; 2 bytes @ 0x0
  2652                           
  2653                           
  2654                           ; 1 bytes @ 0x0
  2655  0070                     	ds	1
  2656  0071                     ??i1_DATAEE_WriteByte:	
  2657  0071                     I2C2_Stop@completion_code:	
  2658                           ; 1 bytes @ 0x1
  2659                           
  2660  0071                     i1DATAEE_WriteByte@bAdd:	
  2661                           ; 1 bytes @ 0x1
  2662                           
  2663  0071                     i1PROTOCOL_SET@value_:	
  2664                           ; 1 bytes @ 0x1
  2665                           
  2666                           
  2667                           ; 1 bytes @ 0x1
  2668  0071                     	ds	1
  2669  0072                     ??_I2C2_ISR:	
  2670  0072                     i1DATAEE_WriteByte@GIEBitValue:	
  2671                           ; 1 bytes @ 0x2
  2672                           
  2673  0072                     PROTOCOL_I2C_SEN@pdata:	
  2674                           ; 1 bytes @ 0x2
  2675                           
  2676                           
  2677                           ; 2 bytes @ 0x2
  2678  0072                     	ds	1
  2679  0073                     ??i1_PROTOCOL_SAV:	
  2680                           
  2681                           ; 1 bytes @ 0x3
  2682  0073                     	ds	1
  2683  0074                     ??_I2C1_StatusCallback:	
  2684                           
  2685                           ; 1 bytes @ 0x4
  2686  0074                     	ds	1
  2687  0075                     I2C1_StatusCallback@pdata:	
  2688                           
  2689                           ; 2 bytes @ 0x5
  2690  0075                     	ds	2
  2691  0077                     I2C1_StatusCallback@i2c_bus_state:	
  2692                           
  2693                           ; 1 bytes @ 0x7
  2694  0077                     	ds	1
  2695  0078                     ??_I2C1_ISR:	
  2696                           
  2697                           ; 1 bytes @ 0x8
  2698  0078                     	ds	1
  2699  0079                     I2C1_ISR@i2c_data:	
  2700                           
  2701                           ; 1 bytes @ 0x9
  2702  0079                     	ds	1
  2703                           
  2704                           	psect	cstackBANK0
  2705  0020                     __pcstackBANK0:	
  2706  0020                     ??_INTERRUPT_InterruptManager:	
  2707                           
  2708                           ; 1 bytes @ 0x0
  2709  0020                     	ds	1
  2710  0021                     ??_PROTOCOL_Read_Device_Address:	
  2711  0021                     ??_PROTOCOL_SET:	
  2712                           ; 1 bytes @ 0x1
  2713                           
  2714  0021                     ??_PROTOCOL_STA:	
  2715                           ; 1 bytes @ 0x1
  2716                           
  2717  0021                     ??_PROTOCOL_STP:	
  2718                           ; 1 bytes @ 0x1
  2719                           
  2720  0021                     ??_PROTOCOL_EXT:	
  2721                           ; 1 bytes @ 0x1
  2722                           
  2723  0021                     ?_I2C2_MasterWriteTRBBuild:	
  2724                           ; 1 bytes @ 0x1
  2725                           
  2726  0021                     ?_I2C2_MasterTRBInsert:	
  2727                           ; 1 bytes @ 0x1
  2728                           
  2729  0021                     ?_I2C2_MasterReadTRBBuild:	
  2730                           ; 1 bytes @ 0x1
  2731                           
  2732  0021                     ??_PIN_MANAGER_Initialize:	
  2733                           ; 1 bytes @ 0x1
  2734                           
  2735  0021                     ??_OSCILLATOR_Initialize:	
  2736                           ; 1 bytes @ 0x1
  2737                           
  2738  0021                     ??_WDT_Initialize:	
  2739                           ; 1 bytes @ 0x1
  2740                           
  2741  0021                     ??_TMR0_Initialize:	
  2742                           ; 1 bytes @ 0x1
  2743                           
  2744  0021                     ??_EUSART_Initialize:	
  2745                           ; 1 bytes @ 0x1
  2746                           
  2747  0021                     ??_isdigit:	
  2748                           ; 1 bytes @ 0x1
  2749                           
  2750  0021                     ??_I2C1_Initialize:	
  2751                           ; 1 bytes @ 0x1
  2752                           
  2753  0021                     ??_I2C2_Initialize:	
  2754                           ; 1 bytes @ 0x1
  2755                           
  2756  0021                     ??_EUSART_Read:	
  2757                           ; 1 bytes @ 0x1
  2758                           
  2759  0021                     ??_EUSART_Write:	
  2760                           ; 1 bytes @ 0x1
  2761                           
  2762  0021                     ?_DATAEE_WriteByte:	
  2763                           ; 1 bytes @ 0x1
  2764                           
  2765  0021                     ??_DATAEE_ReadByte:	
  2766                           ; 1 bytes @ 0x1
  2767                           
  2768  0021                     ??_TMR0_HasOverflowOccured:	
  2769                           ; 1 bytes @ 0x1
  2770                           
  2771  0021                     ?_PROTOCOL_I2C_Set_TLV:	
  2772                           ; 1 bytes @ 0x1
  2773                           
  2774  0021                     ?_strncmp:	
  2775                           ; 1 bytes @ 0x1
  2776                           
  2777  0021                     ?___wmul:	
  2778                           ; 2 bytes @ 0x1
  2779                           
  2780  0021                     ?___lwdiv:	
  2781                           ; 2 bytes @ 0x1
  2782                           
  2783  0021                     ?___lmul:	
  2784                           ; 2 bytes @ 0x1
  2785                           
  2786  0021                     I2C2_MasterTRBInsert@ptrb_list:	
  2787                           ; 4 bytes @ 0x1
  2788                           
  2789  0021                     I2C2_MasterReadTRBBuild@pdata:	
  2790                           ; 1 bytes @ 0x1
  2791                           
  2792  0021                     I2C2_MasterWriteTRBBuild@pdata:	
  2793                           ; 1 bytes @ 0x1
  2794                           
  2795  0021                     DATAEE_WriteByte@bData:	
  2796                           ; 1 bytes @ 0x1
  2797                           
  2798  0021                     DATAEE_ReadByte@bAdd:	
  2799                           ; 1 bytes @ 0x1
  2800                           
  2801  0021                     PROTOCOL_EXT@char_buf:	
  2802                           ; 1 bytes @ 0x1
  2803                           
  2804  0021                     PROTOCOL_I2C_Set_TLV@length:	
  2805                           ; 1 bytes @ 0x1
  2806                           
  2807  0021                     _isdigit$1482:	
  2808                           ; 1 bytes @ 0x1
  2809                           
  2810  0021                     ___wmul@multiplier:	
  2811                           ; 1 bytes @ 0x1
  2812                           
  2813  0021                     ___lwdiv@divisor:	
  2814                           ; 2 bytes @ 0x1
  2815                           
  2816  0021                     strncmp@s1:	
  2817                           ; 2 bytes @ 0x1
  2818                           
  2819  0021                     ___lmul@multiplier:	
  2820                           ; 2 bytes @ 0x1
  2821                           
  2822                           
  2823                           ; 4 bytes @ 0x1
  2824  0021                     	ds	1
  2825  0022                     ?_PROTOCOL_Initialize:	
  2826  0022                     ??_DATAEE_WriteByte:	
  2827                           ; 1 bytes @ 0x2
  2828                           
  2829  0022                     I2C2_MasterTRBInsert@pflag:	
  2830                           ; 1 bytes @ 0x2
  2831                           
  2832  0022                     I2C2_MasterReadTRBBuild@length:	
  2833                           ; 1 bytes @ 0x2
  2834                           
  2835  0022                     I2C2_MasterWriteTRBBuild@length:	
  2836                           ; 1 bytes @ 0x2
  2837                           
  2838  0022                     EUSART_Read@readValue:	
  2839                           ; 1 bytes @ 0x2
  2840                           
  2841  0022                     EUSART_Write@txData:	
  2842                           ; 1 bytes @ 0x2
  2843                           
  2844  0022                     DATAEE_WriteByte@bAdd:	
  2845                           ; 1 bytes @ 0x2
  2846                           
  2847  0022                     PROTOCOL_SET@value_:	
  2848                           ; 1 bytes @ 0x2
  2849                           
  2850  0022                     isdigit@c:	
  2851                           ; 1 bytes @ 0x2
  2852                           
  2853  0022                     PROTOCOL_Initialize@device_id:	
  2854                           ; 1 bytes @ 0x2
  2855                           
  2856  0022                     PROTOCOL_I2C_Set_TLV@pbuffer:	
  2857                           ; 2 bytes @ 0x2
  2858                           
  2859                           
  2860                           ; 2 bytes @ 0x2
  2861  0022                     	ds	1
  2862  0023                     ??_I2C2_MasterTRBInsert:	
  2863  0023                     ??_putch:	
  2864                           ; 1 bytes @ 0x3
  2865                           
  2866  0023                     putch@txData:	
  2867                           ; 1 bytes @ 0x3
  2868                           
  2869  0023                     DATAEE_WriteByte@GIEBitValue:	
  2870                           ; 1 bytes @ 0x3
  2871                           
  2872  0023                     strncmp@s2:	
  2873                           ; 1 bytes @ 0x3
  2874                           
  2875  0023                     I2C2_MasterReadTRBBuild@address:	
  2876                           ; 1 bytes @ 0x3
  2877                           
  2878  0023                     I2C2_MasterWriteTRBBuild@address:	
  2879                           ; 2 bytes @ 0x3
  2880                           
  2881  0023                     ___wmul@multiplicand:	
  2882                           ; 2 bytes @ 0x3
  2883                           
  2884  0023                     ___lwdiv@dividend:	
  2885                           ; 2 bytes @ 0x3
  2886                           
  2887                           
  2888                           ; 2 bytes @ 0x3
  2889  0023                     	ds	1
  2890  0024                     ??_PROTOCOL_SAV:	
  2891  0024                     ??_PROTOCOL_Write_Device_Address:	
  2892                           ; 1 bytes @ 0x4
  2893                           
  2894  0024                     ??_PROTOCOL_I2C_Set_TLV:	
  2895                           ; 1 bytes @ 0x4
  2896                           
  2897  0024                     I2C2_MasterTRBInsert@count:	
  2898                           ; 1 bytes @ 0x4
  2899                           
  2900  0024                     PROTOCOL_Initialize@start_handler:	
  2901                           ; 1 bytes @ 0x4
  2902                           
  2903  0024                     strncmp@len:	
  2904                           ; 1 bytes @ 0x4
  2905                           
  2906                           
  2907                           ; 2 bytes @ 0x4
  2908  0024                     	ds	1
  2909  0025                     ??_I2C2_MasterWriteTRBBuild:	
  2910  0025                     ??_I2C2_MasterReadTRBBuild:	
  2911                           ; 1 bytes @ 0x5
  2912                           
  2913  0025                     ??___wmul:	
  2914                           ; 1 bytes @ 0x5
  2915                           
  2916  0025                     ??___lwdiv:	
  2917                           ; 1 bytes @ 0x5
  2918                           
  2919  0025                     PROTOCOL_Initialize@stop_handler:	
  2920                           ; 1 bytes @ 0x5
  2921                           
  2922  0025                     PROTOCOL_Write_Device_Address@device_id_i2c:	
  2923                           ; 1 bytes @ 0x5
  2924                           
  2925  0025                     PROTOCOL_I2C_Set_TLV@type:	
  2926                           ; 1 bytes @ 0x5
  2927                           
  2928  0025                     ___wmul@product:	
  2929                           ; 1 bytes @ 0x5
  2930                           
  2931  0025                     ___lmul@multiplicand:	
  2932                           ; 2 bytes @ 0x5
  2933                           
  2934                           
  2935                           ; 4 bytes @ 0x5
  2936  0025                     	ds	1
  2937  0026                     ??_strncmp:	
  2938  0026                     PROTOCOL_Initialize@set_handler:	
  2939                           ; 1 bytes @ 0x6
  2940                           
  2941  0026                     PROTOCOL_I2C_Set_TLV@status:	
  2942                           ; 1 bytes @ 0x6
  2943                           
  2944  0026                     ___lwdiv@counter:	
  2945                           ; 1 bytes @ 0x6
  2946                           
  2947                           
  2948                           ; 1 bytes @ 0x6
  2949  0026                     	ds	1
  2950  0027                     ?_atoi:	
  2951  0027                     I2C2_MasterReadTRBBuild@ptrb:	
  2952                           ; 2 bytes @ 0x7
  2953                           
  2954  0027                     I2C2_MasterWriteTRBBuild@ptrb:	
  2955                           ; 1 bytes @ 0x7
  2956                           
  2957  0027                     PROTOCOL_Initialize@inv_handler:	
  2958                           ; 1 bytes @ 0x7
  2959                           
  2960  0027                     ___lwdiv@quotient:	
  2961                           ; 2 bytes @ 0x7
  2962                           
  2963                           
  2964                           ; 2 bytes @ 0x7
  2965  0027                     	ds	1
  2966  0028                     ?_I2C2_MasterWrite:	
  2967  0028                     ?_I2C2_MasterRead:	
  2968                           ; 1 bytes @ 0x8
  2969                           
  2970  0028                     I2C2_MasterWrite@length:	
  2971                           ; 1 bytes @ 0x8
  2972                           
  2973  0028                     I2C2_MasterRead@length:	
  2974                           ; 1 bytes @ 0x8
  2975                           
  2976                           
  2977                           ; 1 bytes @ 0x8
  2978  0028                     	ds	1
  2979  0029                     ??_atoi:	
  2980  0029                     ??___lmul:	
  2981                           ; 1 bytes @ 0x9
  2982                           
  2983  0029                     ?___lwmod:	
  2984                           ; 1 bytes @ 0x9
  2985                           
  2986  0029                     PROTOCOL_Initialize@scaler:	
  2987                           ; 2 bytes @ 0x9
  2988                           
  2989  0029                     I2C2_MasterWrite@address:	
  2990                           ; 1 bytes @ 0x9
  2991                           
  2992  0029                     I2C2_MasterRead@address:	
  2993                           ; 2 bytes @ 0x9
  2994                           
  2995  0029                     ___lwmod@divisor:	
  2996                           ; 2 bytes @ 0x9
  2997                           
  2998  0029                     ___lmul@product:	
  2999                           ; 2 bytes @ 0x9
  3000                           
  3001                           
  3002                           ; 4 bytes @ 0x9
  3003  0029                     	ds	1
  3004  002A                     ??_PROTOCOL_Initialize:	
  3005                           
  3006                           ; 1 bytes @ 0xA
  3007  002A                     	ds	1
  3008  002B                     I2C2_MasterWrite@pflag:	
  3009  002B                     I2C2_MasterRead@pflag:	
  3010                           ; 1 bytes @ 0xB
  3011                           
  3012  002B                     atoi@sign:	
  3013                           ; 1 bytes @ 0xB
  3014                           
  3015  002B                     ___lwmod@dividend:	
  3016                           ; 1 bytes @ 0xB
  3017                           
  3018                           
  3019                           ; 2 bytes @ 0xB
  3020  002B                     	ds	1
  3021  002C                     ??_I2C2_MasterWrite:	
  3022  002C                     ??_I2C2_MasterRead:	
  3023                           ; 1 bytes @ 0xC
  3024                           
  3025  002C                     atoi@a:	
  3026                           ; 1 bytes @ 0xC
  3027                           
  3028                           
  3029                           ; 2 bytes @ 0xC
  3030  002C                     	ds	1
  3031  002D                     ??___lwmod:	
  3032  002D                     ?___aldiv:	
  3033                           ; 1 bytes @ 0xD
  3034                           
  3035  002D                     ___aldiv@divisor:	
  3036                           ; 4 bytes @ 0xD
  3037                           
  3038                           
  3039                           ; 4 bytes @ 0xD
  3040  002D                     	ds	1
  3041  002E                     I2C2_MasterWrite@pdata:	
  3042  002E                     I2C2_MasterRead@pdata:	
  3043                           ; 1 bytes @ 0xE
  3044                           
  3045  002E                     atoi@s:	
  3046                           ; 1 bytes @ 0xE
  3047                           
  3048  002E                     ___lwmod@counter:	
  3049                           ; 1 bytes @ 0xE
  3050                           
  3051                           
  3052                           ; 1 bytes @ 0xE
  3053  002E                     	ds	1
  3054  002F                     ?_i2c2_write:	
  3055  002F                     ?_i2c2_read_no_reg_addr:	
  3056                           ; 1 bytes @ 0xF
  3057                           
  3058  002F                     ?_printf:	
  3059                           ; 1 bytes @ 0xF
  3060                           
  3061  002F                     printf@f:	
  3062                           ; 2 bytes @ 0xF
  3063                           
  3064  002F                     i2c2_write@dev_addr:	
  3065                           ; 2 bytes @ 0xF
  3066                           
  3067  002F                     i2c2_read_no_reg_addr@dev_addr:	
  3068                           ; 2 bytes @ 0xF
  3069                           
  3070                           
  3071                           ; 2 bytes @ 0xF
  3072  002F                     	ds	2
  3073  0031                     i2c2_write@reg_addr:	
  3074  0031                     i2c2_read_no_reg_addr@pbuf:	
  3075                           ; 1 bytes @ 0x11
  3076                           
  3077  0031                     ___aldiv@dividend:	
  3078                           ; 1 bytes @ 0x11
  3079                           
  3080                           
  3081                           ; 4 bytes @ 0x11
  3082  0031                     	ds	1
  3083  0032                     i2c2_write@data:	
  3084  0032                     i2c2_read_no_reg_addr@len:	
  3085                           ; 1 bytes @ 0x12
  3086                           
  3087                           
  3088                           ; 1 bytes @ 0x12
  3089  0032                     	ds	1
  3090  0033                     ??_i2c2_write:	
  3091  0033                     ??_i2c2_read_no_reg_addr:	
  3092                           ; 1 bytes @ 0x13
  3093                           
  3094  0033                     ??_printf:	
  3095                           ; 1 bytes @ 0x13
  3096                           
  3097                           
  3098                           ; 1 bytes @ 0x13
  3099  0033                     	ds	2
  3100  0035                     ??___aldiv:	
  3101  0035                     i2c2_read_no_reg_addr@timeout:	
  3102                           ; 1 bytes @ 0x15
  3103                           
  3104  0035                     i2c2_write@buf:	
  3105                           ; 1 bytes @ 0x15
  3106                           
  3107                           
  3108                           ; 2 bytes @ 0x15
  3109  0035                     	ds	1
  3110  0036                     i2c2_read_no_reg_addr@read_status:	
  3111  0036                     ___aldiv@counter:	
  3112                           ; 1 bytes @ 0x16
  3113                           
  3114                           
  3115                           ; 1 bytes @ 0x16
  3116  0036                     	ds	1
  3117  0037                     printf@prec:	
  3118  0037                     i2c2_write@write_status:	
  3119                           ; 1 bytes @ 0x17
  3120                           
  3121  0037                     i2c2_read_no_reg_addr@status:	
  3122                           ; 1 bytes @ 0x17
  3123                           
  3124  0037                     ___aldiv@sign:	
  3125                           ; 1 bytes @ 0x17
  3126                           
  3127                           
  3128                           ; 1 bytes @ 0x17
  3129  0037                     	ds	1
  3130  0038                     i2c2_write@status:	
  3131  0038                     printf@cp:	
  3132                           ; 1 bytes @ 0x18
  3133                           
  3134  0038                     ___aldiv@quotient:	
  3135                           ; 2 bytes @ 0x18
  3136                           
  3137                           
  3138                           ; 4 bytes @ 0x18
  3139  0038                     	ds	2
  3140  003A                     printf@ap:	
  3141                           
  3142                           ; 1 bytes @ 0x1A
  3143  003A                     	ds	1
  3144  003B                     printf@val:	
  3145                           
  3146                           ; 2 bytes @ 0x1B
  3147  003B                     	ds	2
  3148  003D                     printf@len:	
  3149                           
  3150                           ; 2 bytes @ 0x1D
  3151  003D                     	ds	2
  3152  003F                     printf@flag:	
  3153                           
  3154                           ; 1 bytes @ 0x1F
  3155  003F                     	ds	1
  3156  0040                     printf@width:	
  3157                           
  3158                           ; 2 bytes @ 0x20
  3159  0040                     	ds	2
  3160  0042                     printf@c:	
  3161                           
  3162                           ; 1 bytes @ 0x22
  3163  0042                     	ds	1
  3164  0043                     ?_PROTOCOL_I2C_Send_int8_t:	
  3165  0043                     PROTOCOL_I2C_Send_int8_t@pbuffer:	
  3166                           ; 1 bytes @ 0x23
  3167                           
  3168                           
  3169                           ; 1 bytes @ 0x23
  3170  0043                     	ds	1
  3171  0044                     ??_PROTOCOL_I2C_Send_int8_t:	
  3172                           
  3173                           ; 1 bytes @ 0x24
  3174  0044                     	ds	2
  3175  0046                     PROTOCOL_I2C_Send_int8_t@length:	
  3176                           
  3177                           ; 1 bytes @ 0x26
  3178  0046                     	ds	1
  3179  0047                     ??_inv_handler:	
  3180                           
  3181                           ; 1 bytes @ 0x27
  3182  0047                     	ds	5
  3183  004C                     inv_handler@status:	
  3184                           
  3185                           ; 1 bytes @ 0x2C
  3186  004C                     	ds	1
  3187  004D                     inv_handler@measure:	
  3188                           
  3189                           ; 6 bytes @ 0x2D
  3190  004D                     	ds	6
  3191  0053                     inv_handler@s_t:	
  3192                           
  3193                           ; 4 bytes @ 0x33
  3194  0053                     	ds	4
  3195  0057                     inv_handler@s_rh:	
  3196                           
  3197                           ; 4 bytes @ 0x37
  3198  0057                     	ds	4
  3199  005B                     inv_handler@data:	
  3200                           
  3201                           ; 2 bytes @ 0x3B
  3202  005B                     	ds	2
  3203  005D                     ??_PROTOCOL_Loop:	
  3204                           
  3205                           ; 1 bytes @ 0x3D
  3206  005D                     	ds	2
  3207  005F                     ??_main:	
  3208                           
  3209                           ; 1 bytes @ 0x3F
  3210  005F                     	ds	1
  3211                           
  3212                           	psect	maintext
  3213  0D70                     __pmaintext:	
  3214 ;;
  3215 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  3216 ;;
  3217 ;; *************** function _main *****************
  3218 ;; Defined at:
  3219 ;;		line 37 in file "main.c"
  3220 ;; Parameters:    Size  Location     Type
  3221 ;;		None
  3222 ;; Auto vars:     Size  Location     Type
  3223 ;;		None
  3224 ;; Return value:  Size  Location     Type
  3225 ;;                  1    wreg      void 
  3226 ;; Registers used:
  3227 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3228 ;; Tracked objects:
  3229 ;;		On entry : B1F/0
  3230 ;;		On exit  : 0/0
  3231 ;;		Unchanged: 0/0
  3232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3234 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3235 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3236 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3237 ;;Total ram usage:        1 bytes
  3238 ;; Hardware stack levels required when called:   11
  3239 ;; This function calls:
  3240 ;;		_EUSART_Initialize
  3241 ;;		_I2C1_Initialize
  3242 ;;		_I2C2_Initialize
  3243 ;;		_OSCILLATOR_Initialize
  3244 ;;		_PIN_MANAGER_Initialize
  3245 ;;		_PROTOCOL_Initialize
  3246 ;;		_PROTOCOL_Loop
  3247 ;;		_TMR0_Initialize
  3248 ;;		_WDT_Initialize
  3249 ;; This function is called by:
  3250 ;;		Startup code after reset
  3251 ;; This function uses a non-reentrant model
  3252 ;;
  3253                           
  3254                           
  3255                           ;psect for function _main
  3256  0D70                     _main:	
  3257                           
  3258                           ;main.c: 40: PROTOCOL_Initialize("SHT31_DIS", (0), (0), (0), inv_handler, 125);
  3259                           
  3260                           ;incstack = 0
  3261                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3262  0D70  3029               	movlw	low (STR_1| (0+32768))
  3263  0D71  0020               	movlb	0	; select bank0
  3264  0D72  00A2               	movwf	PROTOCOL_Initialize@device_id
  3265  0D73  3087               	movlw	high (STR_1| (0+32768))
  3266  0D74  00A3               	movwf	PROTOCOL_Initialize@device_id+1
  3267  0D75  01A4               	clrf	PROTOCOL_Initialize@start_handler
  3268  0D76  01A5               	clrf	PROTOCOL_Initialize@stop_handler
  3269  0D77  01A6               	clrf	PROTOCOL_Initialize@set_handler
  3270  0D78  3001               	movlw	low _inv_handler
  3271  0D79  00A7               	movwf	PROTOCOL_Initialize@inv_handler
  3272  0D7A  3006               	movlw	high _inv_handler
  3273  0D7B  00A8               	movwf	PROTOCOL_Initialize@inv_handler+1
  3274  0D7C  307D               	movlw	125
  3275  0D7D  00DF               	movwf	??_main
  3276  0D7E  085F               	movf	??_main,w
  3277  0D7F  00A9               	movwf	PROTOCOL_Initialize@scaler
  3278  0D80  318E  26CF  318D   	fcall	_PROTOCOL_Initialize
  3279                           
  3280                           ;main.c: 43: PIN_MANAGER_Initialize();
  3281  0D83  318B  2369  318D   	fcall	_PIN_MANAGER_Initialize
  3282                           
  3283                           ;main.c: 44: OSCILLATOR_Initialize();
  3284  0D86  318A  2226  318D   	fcall	_OSCILLATOR_Initialize
  3285                           
  3286                           ;main.c: 45: WDT_Initialize();
  3287  0D89  318A  2222  318D   	fcall	_WDT_Initialize
  3288                           
  3289                           ;main.c: 46: TMR0_Initialize();
  3290  0D8C  318A  227D  318D   	fcall	_TMR0_Initialize
  3291                           
  3292                           ;main.c: 49: (INTCONbits.GIE = 1);
  3293  0D8F  178B               	bsf	11,7	;volatile
  3294                           
  3295                           ;main.c: 50: (INTCONbits.PEIE = 1);
  3296  0D90  170B               	bsf	11,6	;volatile
  3297                           
  3298                           ;main.c: 53: EUSART_Initialize();
  3299  0D91  318A  22DF  318D   	fcall	_EUSART_Initialize
  3300                           
  3301                           ;main.c: 56: I2C2_Initialize();
  3302  0D94  318A  22AE  318D   	fcall	_I2C2_Initialize
  3303                           
  3304                           ;main.c: 59: I2C1_Initialize();
  3305  0D97  318B  23C7  318D   	fcall	_I2C1_Initialize
  3306                           
  3307                           ;main.c: 62: PROTOCOL_Loop();
  3308  0D9A  3182  2256         	fcall	_PROTOCOL_Loop
  3309  0D9C  3180  2848         	ljmp	start
  3310  0D9E                     __end_of_main:	
  3311                           
  3312                           	psect	text1
  3313  0A22                     __ptext1:	
  3314 ;; *************** function _WDT_Initialize *****************
  3315 ;; Defined at:
  3316 ;;		line 89 in file "mcc_generated_files/mcc.c"
  3317 ;; Parameters:    Size  Location     Type
  3318 ;;		None
  3319 ;; Auto vars:     Size  Location     Type
  3320 ;;		None
  3321 ;; Return value:  Size  Location     Type
  3322 ;;                  1    wreg      void 
  3323 ;; Registers used:
  3324 ;;		wreg
  3325 ;; Tracked objects:
  3326 ;;		On entry : 0/0
  3327 ;;		On exit  : 0/0
  3328 ;;		Unchanged: 0/0
  3329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3330 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3331 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3332 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3333 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3334 ;;Total ram usage:        0 bytes
  3335 ;; Hardware stack levels used:    1
  3336 ;; Hardware stack levels required when called:    5
  3337 ;; This function calls:
  3338 ;;		Nothing
  3339 ;; This function is called by:
  3340 ;;		_main
  3341 ;;		_SYSTEM_Initialize
  3342 ;; This function uses a non-reentrant model
  3343 ;;
  3344                           
  3345                           
  3346                           ;psect for function _WDT_Initialize
  3347  0A22                     _WDT_Initialize:	
  3348                           
  3349                           ;mcc.c: 92: WDTCON = 0x16;
  3350                           
  3351                           ;incstack = 0
  3352                           ; Regs used in _WDT_Initialize: [wreg]
  3353  0A22  3016               	movlw	22
  3354  0A23  0021               	movlb	1	; select bank1
  3355  0A24  0097               	movwf	23	;volatile
  3356  0A25  0008               	return
  3357  0A26                     __end_of_WDT_Initialize:	
  3358                           
  3359                           	psect	text2
  3360  0A7D                     __ptext2:	
  3361 ;; *************** function _TMR0_Initialize *****************
  3362 ;; Defined at:
  3363 ;;		line 62 in file "mcc_generated_files/tmr0.c"
  3364 ;; Parameters:    Size  Location     Type
  3365 ;;		None
  3366 ;; Auto vars:     Size  Location     Type
  3367 ;;		None
  3368 ;; Return value:  Size  Location     Type
  3369 ;;                  1    wreg      void 
  3370 ;; Registers used:
  3371 ;;		wreg, status,2
  3372 ;; Tracked objects:
  3373 ;;		On entry : 0/0
  3374 ;;		On exit  : 0/0
  3375 ;;		Unchanged: 0/0
  3376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3378 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3379 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3380 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3381 ;;Total ram usage:        1 bytes
  3382 ;; Hardware stack levels used:    1
  3383 ;; Hardware stack levels required when called:    5
  3384 ;; This function calls:
  3385 ;;		Nothing
  3386 ;; This function is called by:
  3387 ;;		_main
  3388 ;;		_SYSTEM_Initialize
  3389 ;; This function uses a non-reentrant model
  3390 ;;
  3391                           
  3392                           
  3393                           ;psect for function _TMR0_Initialize
  3394  0A7D                     _TMR0_Initialize:	
  3395                           
  3396                           ;tmr0.c: 67: OPTION_REG = (OPTION_REG & 0xC0) | 0xD4 & 0x3F;
  3397                           
  3398                           ;incstack = 0
  3399                           ; Regs used in _TMR0_Initialize: [wreg+status,2]
  3400  0A7D  0021               	movlb	1	; select bank1
  3401  0A7E  0815               	movf	21,w	;volatile
  3402  0A7F  39C0               	andlw	192
  3403  0A80  3814               	iorlw	20
  3404  0A81  0095               	movwf	21	;volatile
  3405                           
  3406                           ;tmr0.c: 70: TMR0 = 0x06;
  3407  0A82  3006               	movlw	6
  3408  0A83  0020               	movlb	0	; select bank0
  3409  0A84  0095               	movwf	21	;volatile
  3410                           
  3411                           ;tmr0.c: 73: timer0ReloadVal= 6;
  3412  0A85  3006               	movlw	6
  3413  0A86  00A1               	movwf	??_TMR0_Initialize
  3414  0A87  0821               	movf	??_TMR0_Initialize,w
  3415  0A88  0021               	movlb	1	; select bank1
  3416  0A89  00BE               	movwf	_timer0ReloadVal^(0+128)	;volatile
  3417                           
  3418                           ;tmr0.c: 76: INTCONbits.TMR0IF = 0;
  3419  0A8A  110B               	bcf	11,2	;volatile
  3420  0A8B  0008               	return
  3421  0A8C                     __end_of_TMR0_Initialize:	
  3422                           
  3423                           	psect	text3
  3424  0256                     __ptext3:	
  3425 ;; *************** function _PROTOCOL_Loop *****************
  3426 ;; Defined at:
  3427 ;;		line 136 in file "protocol.c"
  3428 ;; Parameters:    Size  Location     Type
  3429 ;;		None
  3430 ;; Auto vars:     Size  Location     Type
  3431 ;;  device_addre    1    1[BANK1 ] unsigned char 
  3432 ;;  c               1    0[BANK1 ] unsigned char 
  3433 ;; Return value:  Size  Location     Type
  3434 ;;                  1    wreg      void 
  3435 ;; Registers used:
  3436 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3437 ;; Tracked objects:
  3438 ;;		On entry : 0/0
  3439 ;;		On exit  : 0/0
  3440 ;;		Unchanged: 0/0
  3441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3442 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3443 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  3444 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3445 ;;      Totals:         0       2       2       0       0       0       0       0       0       0       0       0       
      +0       0
  3446 ;;Total ram usage:        4 bytes
  3447 ;; Hardware stack levels used:    1
  3448 ;; Hardware stack levels required when called:   10
  3449 ;; This function calls:
  3450 ;;		Absolute function
  3451 ;;		_EUSART_Read
  3452 ;;		_PROTOCOL_EXT
  3453 ;;		_PROTOCOL_Read_Device_Address
  3454 ;;		_PROTOCOL_SAV
  3455 ;;		_PROTOCOL_SET
  3456 ;;		_PROTOCOL_STA
  3457 ;;		_PROTOCOL_STP
  3458 ;;		_PROTOCOL_Write_Device_Address
  3459 ;;		_TMR0_HasOverflowOccured
  3460 ;;		_atoi
  3461 ;;		_inv_handler
  3462 ;;		_printf
  3463 ;;		_strncmp
  3464 ;; This function is called by:
  3465 ;;		_main
  3466 ;; This function uses a non-reentrant model
  3467 ;;
  3468                           
  3469                           
  3470                           ;psect for function _PROTOCOL_Loop
  3471  0256                     _PROTOCOL_Loop:	
  3472  0256                     l746:	
  3473                           ;incstack = 0
  3474                           ; Regs used in _PROTOCOL_Loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3475                           ;protocol.c: 137: uint8_t device_address;
  3476                           ;protocol.c: 138: uint8_t c;
  3477                           ;protocol.c: 139: while (1) {
  3478                           
  3479                           
  3480                           ;protocol.c: 140: tmr_overflow = TMR0_HasOverflowOccured();
  3481  0256  318A  221E  3182   	fcall	_TMR0_HasOverflowOccured
  3482  0259  0020               	movlb	0	; select bank0
  3483  025A  00DD               	movwf	??_PROTOCOL_Loop
  3484  025B  085D               	movf	??_PROTOCOL_Loop,w
  3485  025C  0021               	movlb	1	; select bank1
  3486  025D  00B6               	movwf	_tmr_overflow^(0+128)
  3487                           
  3488                           ;protocol.c: 141: if (tmr_overflow) {
  3489  025E  0836               	movf	_tmr_overflow^(0+128),w
  3490  025F  1903               	btfsc	3,2
  3491  0260  2A83               	goto	l4559
  3492                           
  3493                           ;protocol.c: 142: TMR0IF = 0;
  3494  0261  110B               	bcf	11,2	;volatile
  3495                           
  3496                           ;protocol.c: 144: if (PROTOCOL_Inv_Handler && (++tmr_cnt >= value)) {
  3497  0262  082C               	movf	_PROTOCOL_Inv_Handler^(0+128),w
  3498  0263  042D               	iorwf	(_PROTOCOL_Inv_Handler+1)^(0+128),w
  3499  0264  1903               	btfsc	3,2
  3500  0265  2A83               	goto	l4559
  3501  0266  3001               	movlw	1
  3502  0267  0020               	movlb	0	; select bank0
  3503  0268  00DD               	movwf	??_PROTOCOL_Loop
  3504  0269  085D               	movf	??_PROTOCOL_Loop,w
  3505  026A  0021               	movlb	1	; select bank1
  3506  026B  07B7               	addwf	_tmr_cnt^(0+128),f
  3507  026C  0020               	movlb	0	; select bank0
  3508  026D  0866               	movf	_value,w
  3509  026E  0021               	movlb	1	; select bank1
  3510  026F  0237               	subwf	_tmr_cnt^(0+128),w
  3511  0270  1C03               	skipc
  3512  0271  2A83               	goto	l4559
  3513                           
  3514                           ;protocol.c: 145: tmr_cnt = 0;
  3515  0272  01B7               	clrf	_tmr_cnt^(0+128)
  3516                           
  3517                           ;protocol.c: 146: if (++sec_cnt >= tmr_scaler) {
  3518  0273  3001               	movlw	1
  3519  0274  0020               	movlb	0	; select bank0
  3520  0275  00DD               	movwf	??_PROTOCOL_Loop
  3521  0276  085D               	movf	??_PROTOCOL_Loop,w
  3522  0277  0021               	movlb	1	; select bank1
  3523  0278  07B8               	addwf	_sec_cnt^(0+128),f
  3524  0279  0869               	movf	_tmr_scaler^(0+128),w
  3525  027A  0238               	subwf	_sec_cnt^(0+128),w
  3526  027B  1C03               	skipc
  3527  027C  2A83               	goto	l4559
  3528                           
  3529                           ;protocol.c: 147: if (running) invoked = 1;
  3530  027D  083A               	movf	_running^(0+128),w
  3531  027E  1903               	btfsc	3,2
  3532  027F  2A82               	goto	l4557
  3533  0280  01B9               	clrf	_invoked^(0+128)
  3534  0281  0AB9               	incf	_invoked^(0+128),f
  3535  0282                     l4557:	
  3536                           
  3537                           ;protocol.c: 148: sec_cnt = 0;
  3538  0282  01B8               	clrf	_sec_cnt^(0+128)
  3539  0283                     l4559:	
  3540                           
  3541                           ;protocol.c: 149: }
  3542                           ;protocol.c: 150: }
  3543                           ;protocol.c: 151: }
  3544                           ;protocol.c: 152: if (invoked && PROTOCOL_Inv_Handler) {
  3545  0283  0839               	movf	_invoked^(0+128),w
  3546  0284  1903               	btfsc	3,2
  3547  0285  2A91               	goto	l4569
  3548  0286  082C               	movf	_PROTOCOL_Inv_Handler^(0+128),w
  3549  0287  042D               	iorwf	(_PROTOCOL_Inv_Handler+1)^(0+128),w
  3550  0288  1903               	btfsc	3,2
  3551  0289  2A91               	goto	l4569
  3552                           
  3553                           ;protocol.c: 153: PROTOCOL_Inv_Handler();
  3554  028A  082D               	movf	(_PROTOCOL_Inv_Handler+1)^(0+128),w
  3555  028B  008A               	movwf	10
  3556  028C  082C               	movf	_PROTOCOL_Inv_Handler^(0+128),w
  3557  028D  000A               	callw
  3558  028E  3182               	pagesel	$
  3559                           
  3560                           ;protocol.c: 154: invoked = 0;
  3561  028F  0021               	movlb	1	; select bank1
  3562  0290  01B9               	clrf	_invoked^(0+128)
  3563  0291                     l4569:	
  3564                           
  3565                           ;protocol.c: 157: if ((eusartRxCount)) {
  3566  0291  0020               	movlb	0	; select bank0
  3567  0292  0867               	movf	_eusartRxCount,w	;volatile
  3568  0293  1903               	btfsc	3,2
  3569  0294  2A56               	goto	l746
  3570                           
  3571                           ;protocol.c: 158: c = EUSART_Read();
  3572  0295  318B  2387  3182   	fcall	_EUSART_Read
  3573  0298  0020               	movlb	0	; select bank0
  3574  0299  00DD               	movwf	??_PROTOCOL_Loop
  3575  029A  085D               	movf	??_PROTOCOL_Loop,w
  3576  029B  0021               	movlb	1	; select bank1
  3577  029C  00EC               	movwf	PROTOCOL_Loop@c^(0+128)
  3578                           
  3579                           ;protocol.c: 159: buf[cnt++] = c;
  3580  029D  086C               	movf	PROTOCOL_Loop@c^(0+128),w
  3581  029E  0020               	movlb	0	; select bank0
  3582  029F  00DD               	movwf	??_PROTOCOL_Loop
  3583  02A0  0021               	movlb	1	; select bank1
  3584  02A1  083C               	movf	_cnt^(0+128),w
  3585  02A2  3E28               	addlw	(low (_buf| (0+256)))& (0+255)
  3586  02A3  0086               	movwf	6
  3587  02A4  3001               	movlw	1	; select bank2/3
  3588  02A5  0087               	movwf	7
  3589  02A6  0020               	movlb	0	; select bank0
  3590  02A7  085D               	movf	??_PROTOCOL_Loop,w
  3591  02A8  0081               	movwf	1
  3592  02A9  3001               	movlw	1
  3593  02AA  00DD               	movwf	??_PROTOCOL_Loop
  3594  02AB  085D               	movf	??_PROTOCOL_Loop,w
  3595  02AC  0021               	movlb	1	; select bank1
  3596  02AD  07BC               	addwf	_cnt^(0+128),f
  3597                           
  3598                           ;protocol.c: 160: if (c == '\n') {
  3599  02AE  300A               	movlw	10
  3600  02AF  066C               	xorwf	PROTOCOL_Loop@c^(0+128),w
  3601  02B0  1D03               	btfss	3,2
  3602  02B1  2A56               	goto	l746
  3603                           
  3604                           ;protocol.c: 161: buf[--cnt] = '\0';
  3605  02B2  3001               	movlw	1
  3606  02B3  02BC               	subwf	_cnt^(0+128),f
  3607  02B4  083C               	movf	_cnt^(0+128),w
  3608  02B5  3E28               	addlw	(low (_buf| (0+256)))& (0+255)
  3609  02B6  0086               	movwf	6
  3610  02B7  3001               	movlw	1	; select bank2/3
  3611  02B8  0087               	movwf	7
  3612  02B9  0181               	clrf	1
  3613                           
  3614                           ;protocol.c: 162: cnt = 0;
  3615  02BA  01BC               	clrf	_cnt^(0+128)
  3616                           
  3617                           ;protocol.c: 163: printf("#%s\n", buf);
  3618  02BB  3059               	movlw	low (STR_3| (0+32768))
  3619  02BC  0020               	movlb	0	; select bank0
  3620  02BD  00AF               	movwf	printf@f
  3621  02BE  3087               	movlw	high (STR_3| (0+32768))
  3622  02BF  00B0               	movwf	printf@f+1
  3623  02C0  3028               	movlw	low _buf
  3624  02C1  00B1               	movwf	low ((?_printf| 0+2))
  3625  02C2  3001               	movlw	high _buf
  3626  02C3  00B2               	movwf	(low ((?_printf| 0+2))+1)
  3627  02C4  3180  2081  3182   	fcall	_printf
  3628                           
  3629                           ;protocol.c: 164: if (BACKPLANE_SLAVE_ADDRESS != 0x01) {
  3630  02C7  0021               	movlb	1	; select bank1
  3631  02C8  036A               	decf	_BACKPLANE_SLAVE_ADDRESS^(0+128),w
  3632  02C9  1903               	btfsc	3,2
  3633  02CA  2AD0               	goto	l4589
  3634                           
  3635                           ;protocol.c: 165: PROTOCOL_EXT(buf);
  3636  02CB  3028               	movlw	(low (_buf| (0+256)))& (0+255)
  3637  02CC  3180  2003  3182   	fcall	_PROTOCOL_EXT
  3638                           
  3639                           ;protocol.c: 166: } else if (!strncmp(("WHO"), (buf), 3)) {
  3640  02CF  2A56               	goto	l746
  3641  02D0                     l4589:	
  3642  02D0  307A               	movlw	low (STR_4| (0+32768))
  3643  02D1  0020               	movlb	0	; select bank0
  3644  02D2  00A1               	movwf	strncmp@s1
  3645  02D3  3087               	movlw	high (STR_4| (0+32768))
  3646  02D4  00A2               	movwf	strncmp@s1+1
  3647  02D5  3028               	movlw	(low (_buf| (0+256)))& (0+255)
  3648  02D6  00DD               	movwf	??_PROTOCOL_Loop
  3649  02D7  085D               	movf	??_PROTOCOL_Loop,w
  3650  02D8  00A3               	movwf	strncmp@s2
  3651  02D9  3003               	movlw	3
  3652  02DA  00A4               	movwf	strncmp@len
  3653  02DB  3000               	movlw	0
  3654  02DC  00A5               	movwf	strncmp@len+1
  3655  02DD  318E  2603  3182   	fcall	_strncmp
  3656  02E0  0020               	movlb	0	; select bank0
  3657  02E1  0821               	movf	?_strncmp,w
  3658  02E2  0422               	iorwf	?_strncmp+1,w
  3659  02E3  1D03               	btfss	3,2
  3660  02E4  2AF5               	goto	l4593
  3661                           
  3662                           ;protocol.c: 167: printf("$:WHO:%s\n", device_id_);
  3663  02E5  3001               	movlw	low (STR_5| (0+32768))
  3664  02E6  00AF               	movwf	printf@f
  3665  02E7  3087               	movlw	high (STR_5| (0+32768))
  3666  02E8  00B0               	movwf	printf@f+1
  3667  02E9  0021               	movlb	1	; select bank1
  3668  02EA  0862               	movf	(_device_id_+1)^(0+128),w
  3669  02EB  0020               	movlb	0	; select bank0
  3670  02EC  00B2               	movwf	(low ((?_printf| 0+2))+1)
  3671  02ED  0021               	movlb	1	; select bank1
  3672  02EE  0861               	movf	_device_id_^(0+128),w
  3673  02EF  0020               	movlb	0	; select bank0
  3674  02F0  00B1               	movwf	low ((?_printf| 0+2))
  3675  02F1  3180  2081  3182   	fcall	_printf
  3676                           
  3677                           ;protocol.c: 168: } else if (!strncmp(("SAV"), (buf), 3)) {
  3678  02F4  2A56               	goto	l746
  3679  02F5                     l4593:	
  3680  02F5  308A               	movlw	low (STR_6| (0+32768))
  3681  02F6  0020               	movlb	0	; select bank0
  3682  02F7  00A1               	movwf	strncmp@s1
  3683  02F8  3087               	movlw	high (STR_6| (0+32768))
  3684  02F9  00A2               	movwf	strncmp@s1+1
  3685  02FA  3028               	movlw	(low (_buf| (0+256)))& (0+255)
  3686  02FB  00DD               	movwf	??_PROTOCOL_Loop
  3687  02FC  085D               	movf	??_PROTOCOL_Loop,w
  3688  02FD  00A3               	movwf	strncmp@s2
  3689  02FE  3003               	movlw	3
  3690  02FF  00A4               	movwf	strncmp@len
  3691  0300  3000               	movlw	0
  3692  0301  00A5               	movwf	strncmp@len+1
  3693  0302  318E  2603  3182   	fcall	_strncmp
  3694  0305  0020               	movlb	0	; select bank0
  3695  0306  0821               	movf	?_strncmp,w
  3696  0307  0422               	iorwf	?_strncmp+1,w
  3697  0308  1D03               	btfss	3,2
  3698  0309  2B0E               	goto	l4597
  3699                           
  3700                           ;protocol.c: 169: PROTOCOL_SAV();
  3701  030A  318A  224E  3182   	fcall	_PROTOCOL_SAV
  3702                           
  3703                           ;protocol.c: 170: } else if (!strncmp(("STA"), (buf), 3)) {
  3704  030D  2A56               	goto	l746
  3705  030E                     l4597:	
  3706  030E  3072               	movlw	low (STR_7| (0+32768))
  3707  030F  0020               	movlb	0	; select bank0
  3708  0310  00A1               	movwf	strncmp@s1
  3709  0311  3087               	movlw	high (STR_7| (0+32768))
  3710  0312  00A2               	movwf	strncmp@s1+1
  3711  0313  3028               	movlw	(low (_buf| (0+256)))& (0+255)
  3712  0314  00DD               	movwf	??_PROTOCOL_Loop
  3713  0315  085D               	movf	??_PROTOCOL_Loop,w
  3714  0316  00A3               	movwf	strncmp@s2
  3715  0317  3003               	movlw	3
  3716  0318  00A4               	movwf	strncmp@len
  3717  0319  3000               	movlw	0
  3718  031A  00A5               	movwf	strncmp@len+1
  3719  031B  318E  2603  3182   	fcall	_strncmp
  3720  031E  0020               	movlb	0	; select bank0
  3721  031F  0821               	movf	?_strncmp,w
  3722  0320  0422               	iorwf	?_strncmp+1,w
  3723  0321  1D03               	btfss	3,2
  3724  0322  2B27               	goto	l4601
  3725                           
  3726                           ;protocol.c: 171: PROTOCOL_STA();
  3727  0323  318A  221A  3182   	fcall	_PROTOCOL_STA
  3728                           
  3729                           ;protocol.c: 172: } else if (!strncmp(("STP"), (buf), 3)) {
  3730  0326  2A56               	goto	l746
  3731  0327                     l4601:	
  3732  0327  307E               	movlw	low (STR_8| (0+32768))
  3733  0328  0020               	movlb	0	; select bank0
  3734  0329  00A1               	movwf	strncmp@s1
  3735  032A  3087               	movlw	high (STR_8| (0+32768))
  3736  032B  00A2               	movwf	strncmp@s1+1
  3737  032C  3028               	movlw	(low (_buf| (0+256)))& (0+255)
  3738  032D  00DD               	movwf	??_PROTOCOL_Loop
  3739  032E  085D               	movf	??_PROTOCOL_Loop,w
  3740  032F  00A3               	movwf	strncmp@s2
  3741  0330  3003               	movlw	3
  3742  0331  00A4               	movwf	strncmp@len
  3743  0332  3000               	movlw	0
  3744  0333  00A5               	movwf	strncmp@len+1
  3745  0334  318E  2603  3182   	fcall	_strncmp
  3746  0337  0020               	movlb	0	; select bank0
  3747  0338  0821               	movf	?_strncmp,w
  3748  0339  0422               	iorwf	?_strncmp+1,w
  3749  033A  1D03               	btfss	3,2
  3750  033B  2B4C               	goto	l4607
  3751                           
  3752                           ;protocol.c: 173: PROTOCOL_STP();
  3753  033C  318A  2208  3182   	fcall	_PROTOCOL_STP
  3754                           
  3755                           ;protocol.c: 174: printf("*:STP:%s\n", "ACK");
  3756  033F  300B               	movlw	low (STR_9| (0+32768))
  3757  0340  0020               	movlb	0	; select bank0
  3758  0341  00AF               	movwf	printf@f
  3759  0342  3087               	movlw	high (STR_9| (0+32768))
  3760  0343  00B0               	movwf	printf@f+1
  3761  0344  3076               	movlw	low (STR_10| (0+32768))
  3762  0345  00B1               	movwf	low ((?_printf| 0+2))
  3763  0346  3087               	movlw	high (STR_10| (0+32768))
  3764  0347  00B2               	movwf	(low ((?_printf| 0+2))+1)
  3765  0348  3180  2081  3182   	fcall	_printf
  3766                           
  3767                           ;protocol.c: 175: } else if (!strncmp(("SET"), (buf), 3)) {
  3768  034B  2A56               	goto	l746
  3769  034C                     l4607:	
  3770  034C  3086               	movlw	low (STR_11| (0+32768))
  3771  034D  0020               	movlb	0	; select bank0
  3772  034E  00A1               	movwf	strncmp@s1
  3773  034F  3087               	movlw	high (STR_11| (0+32768))
  3774  0350  00A2               	movwf	strncmp@s1+1
  3775  0351  3028               	movlw	(low (_buf| (0+256)))& (0+255)
  3776  0352  00DD               	movwf	??_PROTOCOL_Loop
  3777  0353  085D               	movf	??_PROTOCOL_Loop,w
  3778  0354  00A3               	movwf	strncmp@s2
  3779  0355  3003               	movlw	3
  3780  0356  00A4               	movwf	strncmp@len
  3781  0357  3000               	movlw	0
  3782  0358  00A5               	movwf	strncmp@len+1
  3783  0359  318E  2603  3182   	fcall	_strncmp
  3784  035C  0020               	movlb	0	; select bank0
  3785  035D  0821               	movf	?_strncmp,w
  3786  035E  0422               	iorwf	?_strncmp+1,w
  3787  035F  1D03               	btfss	3,2
  3788  0360  2B6B               	goto	l4611
  3789                           
  3790                           ;protocol.c: 176: PROTOCOL_SET(atoi(&buf[4]));
  3791  0361  302C               	movlw	(low ((_buf| (0+256)+4)))& (0+255)
  3792  0362  3187  278E  3182   	fcall	_atoi
  3793  0365  0020               	movlb	0	; select bank0
  3794  0366  0827               	movf	?_atoi,w
  3795  0367  318A  223E  3182   	fcall	_PROTOCOL_SET
  3796                           
  3797                           ;protocol.c: 177: } else if (!strncmp(("GET"), (buf), 3)) {
  3798  036A  2A56               	goto	l746
  3799  036B                     l4611:	
  3800  036B  3082               	movlw	low (STR_12| (0+32768))
  3801  036C  0020               	movlb	0	; select bank0
  3802  036D  00A1               	movwf	strncmp@s1
  3803  036E  3087               	movlw	high (STR_12| (0+32768))
  3804  036F  00A2               	movwf	strncmp@s1+1
  3805  0370  3028               	movlw	(low (_buf| (0+256)))& (0+255)
  3806  0371  00DD               	movwf	??_PROTOCOL_Loop
  3807  0372  085D               	movf	??_PROTOCOL_Loop,w
  3808  0373  00A3               	movwf	strncmp@s2
  3809  0374  3003               	movlw	3
  3810  0375  00A4               	movwf	strncmp@len
  3811  0376  3000               	movlw	0
  3812  0377  00A5               	movwf	strncmp@len+1
  3813  0378  318E  2603  3182   	fcall	_strncmp
  3814  037B  0020               	movlb	0	; select bank0
  3815  037C  0821               	movf	?_strncmp,w
  3816  037D  0422               	iorwf	?_strncmp+1,w
  3817  037E  1D03               	btfss	3,2
  3818  037F  2B8F               	goto	l4615
  3819                           
  3820                           ;protocol.c: 178: printf("$:GET:%d\n", value);
  3821  0380  30ED               	movlw	low (STR_13| (0+32768))
  3822  0381  00AF               	movwf	printf@f
  3823  0382  3086               	movlw	high (STR_13| (0+32768))
  3824  0383  00B0               	movwf	printf@f+1
  3825  0384  0866               	movf	_value,w
  3826  0385  00DD               	movwf	??_PROTOCOL_Loop
  3827  0386  01DE               	clrf	??_PROTOCOL_Loop+1
  3828  0387  085D               	movf	??_PROTOCOL_Loop,w
  3829  0388  00B1               	movwf	?_printf+2
  3830  0389  085E               	movf	??_PROTOCOL_Loop+1,w
  3831  038A  00B2               	movwf	?_printf+3
  3832  038B  3180  2081  3182   	fcall	_printf
  3833                           
  3834                           ;protocol.c: 179: } else if (!strncmp(("WDA"), (buf), 3)) {
  3835  038E  2A56               	goto	l746
  3836  038F                     l4615:	
  3837  038F  306E               	movlw	low (STR_14| (0+32768))
  3838  0390  0020               	movlb	0	; select bank0
  3839  0391  00A1               	movwf	strncmp@s1
  3840  0392  3087               	movlw	high (STR_14| (0+32768))
  3841  0393  00A2               	movwf	strncmp@s1+1
  3842  0394  3028               	movlw	(low (_buf| (0+256)))& (0+255)
  3843  0395  00DD               	movwf	??_PROTOCOL_Loop
  3844  0396  085D               	movf	??_PROTOCOL_Loop,w
  3845  0397  00A3               	movwf	strncmp@s2
  3846  0398  3003               	movlw	3
  3847  0399  00A4               	movwf	strncmp@len
  3848  039A  3000               	movlw	0
  3849  039B  00A5               	movwf	strncmp@len+1
  3850  039C  318E  2603  3182   	fcall	_strncmp
  3851  039F  0020               	movlb	0	; select bank0
  3852  03A0  0821               	movf	?_strncmp,w
  3853  03A1  0422               	iorwf	?_strncmp+1,w
  3854  03A2  1D03               	btfss	3,2
  3855  03A3  2BB3               	goto	l4621
  3856                           
  3857                           ;protocol.c: 180: device_address = atoi(&buf[4]);
  3858  03A4  302C               	movlw	(low ((_buf| (0+256)+4)))& (0+255)
  3859  03A5  3187  278E  3182   	fcall	_atoi
  3860  03A8  0020               	movlb	0	; select bank0
  3861  03A9  0827               	movf	?_atoi,w
  3862  03AA  00DD               	movwf	??_PROTOCOL_Loop
  3863  03AB  085D               	movf	??_PROTOCOL_Loop,w
  3864  03AC  0021               	movlb	1	; select bank1
  3865  03AD  00ED               	movwf	PROTOCOL_Loop@device_address^(0+128)
  3866                           
  3867                           ;protocol.c: 181: PROTOCOL_Write_Device_Address(device_address);
  3868  03AE  086D               	movf	PROTOCOL_Loop@device_address^(0+128),w
  3869  03AF  318A  228C  3182   	fcall	_PROTOCOL_Write_Device_Address
  3870                           
  3871                           ;protocol.c: 182: } else if (!strncmp(("RDA"), (buf), 3)) {
  3872  03B2  2A56               	goto	l746
  3873  03B3                     l4621:	
  3874  03B3  306A               	movlw	low (STR_15| (0+32768))
  3875  03B4  0020               	movlb	0	; select bank0
  3876  03B5  00A1               	movwf	strncmp@s1
  3877  03B6  3087               	movlw	high (STR_15| (0+32768))
  3878  03B7  00A2               	movwf	strncmp@s1+1
  3879  03B8  3028               	movlw	(low (_buf| (0+256)))& (0+255)
  3880  03B9  00DD               	movwf	??_PROTOCOL_Loop
  3881  03BA  085D               	movf	??_PROTOCOL_Loop,w
  3882  03BB  00A3               	movwf	strncmp@s2
  3883  03BC  3003               	movlw	3
  3884  03BD  00A4               	movwf	strncmp@len
  3885  03BE  3000               	movlw	0
  3886  03BF  00A5               	movwf	strncmp@len+1
  3887  03C0  318E  2603  3182   	fcall	_strncmp
  3888  03C3  0020               	movlb	0	; select bank0
  3889  03C4  0821               	movf	?_strncmp,w
  3890  03C5  0422               	iorwf	?_strncmp+1,w
  3891  03C6  1D03               	btfss	3,2
  3892  03C7  2BE2               	goto	l4627
  3893                           
  3894                           ;protocol.c: 183: device_address = PROTOCOL_Read_Device_Address();
  3895  03C8  318A  2205  3182   	fcall	_PROTOCOL_Read_Device_Address
  3896  03CB  0020               	movlb	0	; select bank0
  3897  03CC  00DD               	movwf	??_PROTOCOL_Loop
  3898  03CD  085D               	movf	??_PROTOCOL_Loop,w
  3899  03CE  0021               	movlb	1	; select bank1
  3900  03CF  00ED               	movwf	PROTOCOL_Loop@device_address^(0+128)
  3901                           
  3902                           ;protocol.c: 184: printf("$:RDA:%d\n", device_address);
  3903  03D0  30E3               	movlw	low (STR_16| (0+32768))
  3904  03D1  0020               	movlb	0	; select bank0
  3905  03D2  00AF               	movwf	printf@f
  3906  03D3  3086               	movlw	high (STR_16| (0+32768))
  3907  03D4  00B0               	movwf	printf@f+1
  3908  03D5  0021               	movlb	1	; select bank1
  3909  03D6  086D               	movf	PROTOCOL_Loop@device_address^(0+128),w
  3910  03D7  0020               	movlb	0	; select bank0
  3911  03D8  00DD               	movwf	??_PROTOCOL_Loop
  3912  03D9  01DE               	clrf	??_PROTOCOL_Loop+1
  3913  03DA  085D               	movf	??_PROTOCOL_Loop,w
  3914  03DB  00B1               	movwf	?_printf+2
  3915  03DC  085E               	movf	??_PROTOCOL_Loop+1,w
  3916  03DD  00B2               	movwf	?_printf+3
  3917  03DE  3180  2081  3182   	fcall	_printf
  3918                           
  3919                           ;protocol.c: 185: } else {
  3920  03E1  2A56               	goto	l746
  3921  03E2                     l4627:	
  3922                           
  3923                           ;protocol.c: 186: PROTOCOL_EXT(buf);
  3924  03E2  3028               	movlw	(low (_buf| (0+256)))& (0+255)
  3925  03E3  3180  2003  3182   	fcall	_PROTOCOL_EXT
  3926  03E6  2A56               	goto	l746
  3927  03E7                     __end_of_PROTOCOL_Loop:	
  3928                           
  3929                           	psect	text4
  3930  0E03                     __ptext4:	
  3931 ;; *************** function _strncmp *****************
  3932 ;; Defined at:
  3933 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strncmp.c"
  3934 ;; Parameters:    Size  Location     Type
  3935 ;;  s1              2    1[BANK0 ] PTR const unsigned char 
  3936 ;;		 -> STR_15(4), STR_14(4), STR_12(4), STR_11(4), 
  3937 ;;		 -> STR_8(4), STR_7(4), STR_6(4), STR_4(4), 
  3938 ;;  s2              1    3[BANK0 ] PTR const unsigned char 
  3939 ;;		 -> buf(48), 
  3940 ;;  len             2    4[BANK0 ] unsigned int 
  3941 ;; Auto vars:     Size  Location     Type
  3942 ;;		None
  3943 ;; Return value:  Size  Location     Type
  3944 ;;                  2    1[BANK0 ] int 
  3945 ;; Registers used:
  3946 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  3947 ;; Tracked objects:
  3948 ;;		On entry : 0/0
  3949 ;;		On exit  : 0/0
  3950 ;;		Unchanged: 0/0
  3951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3952 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3953 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3954 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3955 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3956 ;;Total ram usage:        7 bytes
  3957 ;; Hardware stack levels used:    1
  3958 ;; Hardware stack levels required when called:    5
  3959 ;; This function calls:
  3960 ;;		Nothing
  3961 ;; This function is called by:
  3962 ;;		_PROTOCOL_Loop
  3963 ;; This function uses a non-reentrant model
  3964 ;;
  3965                           
  3966                           
  3967                           ;psect for function _strncmp
  3968  0E03                     _strncmp:	
  3969  0E03                     l4485:	
  3970                           ;incstack = 0
  3971                           ; Regs used in _strncmp: [wreg-fsr1h+status,2+status,0+pclath]
  3972                           
  3973  0E03  3001               	movlw	1
  3974  0E04  0020               	movlb	0	; select bank0
  3975  0E05  02A4               	subwf	strncmp@len,f
  3976  0E06  3000               	movlw	0
  3977  0E07  3BA5               	subwfb	strncmp@len+1,f
  3978  0E08  0A24               	incf	strncmp@len,w
  3979  0E09  1903               	btfsc	3,2
  3980  0E0A  0A25               	incf	strncmp@len+1,w
  3981  0E0B  1903               	btfsc	3,2
  3982  0E0C  2E42               	goto	l4487
  3983  0E0D  0020               	movlb	0	; select bank0
  3984  0E0E  0821               	movf	strncmp@s1,w
  3985  0E0F  0084               	movwf	4
  3986  0E10  0822               	movf	strncmp@s1+1,w
  3987  0E11  0085               	movwf	5
  3988  0E12  0012               	moviw fsr0++
  3989  0E13  1903               	btfsc	3,2
  3990  0E14  2E21               	goto	l4477
  3991  0E15  0823               	movf	strncmp@s2,w
  3992  0E16  0086               	movwf	6
  3993  0E17  3001               	movlw	1	; select bank2/3
  3994  0E18  0087               	movwf	7
  3995  0E19  0821               	movf	strncmp@s1,w
  3996  0E1A  0084               	movwf	4
  3997  0E1B  0822               	movf	strncmp@s1+1,w
  3998  0E1C  0085               	movwf	5
  3999  0E1D  0800               	movf	0,w	;code access
  4000  0E1E  0601               	xorwf	1,w
  4001  0E1F  1903               	skipnz
  4002  0E20  2E39               	goto	l4481
  4003  0E21                     l4477:	
  4004  0E21  0823               	movf	strncmp@s2,w
  4005  0E22  0086               	movwf	6
  4006  0E23  3001               	movlw	1	; select bank2/3
  4007  0E24  0087               	movwf	7
  4008  0E25  0801               	movf	1,w
  4009  0E26  00A6               	movwf	??_strncmp
  4010  0E27  01A7               	clrf	??_strncmp+1
  4011  0E28  09A6               	comf	??_strncmp,f
  4012  0E29  09A7               	comf	??_strncmp+1,f
  4013  0E2A  0AA6               	incf	??_strncmp,f
  4014  0E2B  1903               	skipnz
  4015  0E2C  0AA7               	incf	??_strncmp+1,f
  4016  0E2D  0821               	movf	strncmp@s1,w
  4017  0E2E  0084               	movwf	4
  4018  0E2F  0822               	movf	strncmp@s1+1,w
  4019  0E30  0085               	movwf	5
  4020  0E31  0800               	movf	0,w	;code access
  4021  0E32  0726               	addwf	??_strncmp,w
  4022  0E33  00A1               	movwf	?_strncmp
  4023  0E34  0827               	movf	??_strncmp+1,w
  4024  0E35  1803               	skipnc
  4025  0E36  0A27               	incf	??_strncmp+1,w
  4026  0E37  00A2               	movwf	?_strncmp+1
  4027  0E38  0008               	return
  4028  0E39                     l4481:	
  4029  0E39  3001               	movlw	1
  4030  0E3A  07A1               	addwf	strncmp@s1,f
  4031  0E3B  3000               	movlw	0
  4032  0E3C  3DA2               	addwfc	strncmp@s1+1,f
  4033  0E3D  3001               	movlw	1
  4034  0E3E  00A6               	movwf	??_strncmp
  4035  0E3F  0826               	movf	??_strncmp,w
  4036  0E40  07A3               	addwf	strncmp@s2,f
  4037  0E41  2E03               	goto	l4485
  4038  0E42                     l4487:	
  4039  0E42  01A1               	clrf	?_strncmp
  4040  0E43  01A2               	clrf	?_strncmp+1
  4041  0E44  0008               	return
  4042  0E45                     __end_of_strncmp:	
  4043                           
  4044                           	psect	text5
  4045  0601                     __ptext5:	
  4046 ;; *************** function _inv_handler *****************
  4047 ;; Defined at:
  4048 ;;		line 15 in file "main.c"
  4049 ;; Parameters:    Size  Location     Type
  4050 ;;		None
  4051 ;; Auto vars:     Size  Location     Type
  4052 ;;  measure         6   45[BANK0 ] unsigned char [6]
  4053 ;;  s_rh            4   55[BANK0 ] long 
  4054 ;;  s_t             4   51[BANK0 ] long 
  4055 ;;  data            2   59[BANK0 ] char [2]
  4056 ;;  status          1   44[BANK0 ] unsigned char 
  4057 ;; Return value:  Size  Location     Type
  4058 ;;                  1    wreg      void 
  4059 ;; Registers used:
  4060 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4061 ;; Tracked objects:
  4062 ;;		On entry : 0/0
  4063 ;;		On exit  : 0/0
  4064 ;;		Unchanged: 0/0
  4065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4067 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4068 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4069 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4070 ;;Total ram usage:       22 bytes
  4071 ;; Hardware stack levels used:    1
  4072 ;; Hardware stack levels required when called:    9
  4073 ;; This function calls:
  4074 ;;		_PROTOCOL_I2C_Send_int8_t
  4075 ;;		___aldiv
  4076 ;;		___lmul
  4077 ;;		_i2c2_read_no_reg_addr
  4078 ;;		_i2c2_write
  4079 ;; This function is called by:
  4080 ;;		_main
  4081 ;;		_PROTOCOL_Loop
  4082 ;; This function uses a non-reentrant model
  4083 ;;
  4084                           
  4085                           
  4086                           ;psect for function _inv_handler
  4087  0601                     _inv_handler:	
  4088                           
  4089                           ;main.c: 16: uint8_t measure[6];
  4090                           ;main.c: 17: int8_t data[2];
  4091                           ;main.c: 18: int32_t s_t;
  4092                           ;main.c: 19: int32_t s_rh;
  4093                           ;main.c: 20: uint8_t status;
  4094                           ;main.c: 22: LATCbits.LATC7 ^= 1;
  4095                           
  4096                           ;incstack = 0
  4097                           ; Regs used in _inv_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4098  0601  0022               	movlb	2	; select bank2
  4099  0602  0D0E               	rlf	14,w	;volatile
  4100  0603  0D0E               	rlf	14,w	;volatile
  4101  0604  3901               	andlw	1
  4102  0605  0020               	movlb	0	; select bank0
  4103  0606  00C7               	movwf	??_inv_handler
  4104  0607  3001               	movlw	1
  4105  0608  06C7               	xorwf	??_inv_handler,f
  4106  0609  0CC7               	rrf	??_inv_handler,f
  4107  060A  0CC7               	rrf	??_inv_handler,f
  4108  060B  0022               	movlb	2	; select bank2
  4109  060C  080E               	movf	14,w	;volatile
  4110  060D  0020               	movlb	0	; select bank0
  4111  060E  0647               	xorwf	??_inv_handler,w
  4112  060F  397F               	andlw	-129
  4113  0610  0647               	xorwf	??_inv_handler,w
  4114  0611  0022               	movlb	2	; select bank2
  4115  0612  008E               	movwf	14	;volatile
  4116                           
  4117                           ;main.c: 25: status = i2c2_write(0x0045, 0x2c, 0x06);
  4118  0613  3045               	movlw	69
  4119  0614  0020               	movlb	0	; select bank0
  4120  0615  00AF               	movwf	i2c2_write@dev_addr
  4121  0616  3000               	movlw	0
  4122  0617  00B0               	movwf	i2c2_write@dev_addr+1
  4123  0618  302C               	movlw	44
  4124  0619  00C7               	movwf	??_inv_handler
  4125  061A  0847               	movf	??_inv_handler,w
  4126  061B  00B1               	movwf	i2c2_write@reg_addr
  4127  061C  3006               	movlw	6
  4128  061D  00C8               	movwf	??_inv_handler+1
  4129  061E  0848               	movf	??_inv_handler+1,w
  4130  061F  00B2               	movwf	i2c2_write@data
  4131  0620  318C  2478  3186   	fcall	_i2c2_write
  4132  0623  0020               	movlb	0	; select bank0
  4133  0624  00C9               	movwf	??_inv_handler+2
  4134  0625  0849               	movf	??_inv_handler+2,w
  4135  0626  00CC               	movwf	inv_handler@status
  4136                           
  4137                           ;main.c: 26: status = i2c2_read_no_reg_addr(0x0045, measure, 6);
  4138  0627  3045               	movlw	69
  4139  0628  00AF               	movwf	i2c2_read_no_reg_addr@dev_addr
  4140  0629  3000               	movlw	0
  4141  062A  00B0               	movwf	i2c2_read_no_reg_addr@dev_addr+1
  4142  062B  304D               	movlw	(low (inv_handler@measure| 0))& (0+255)
  4143  062C  00C7               	movwf	??_inv_handler
  4144  062D  0847               	movf	??_inv_handler,w
  4145  062E  00B1               	movwf	i2c2_read_no_reg_addr@pbuf
  4146  062F  3006               	movlw	6
  4147  0630  00C8               	movwf	??_inv_handler+1
  4148  0631  0848               	movf	??_inv_handler+1,w
  4149  0632  00B2               	movwf	i2c2_read_no_reg_addr@len
  4150  0633  318D  2517  3186   	fcall	_i2c2_read_no_reg_addr
  4151  0636  0020               	movlb	0	; select bank0
  4152  0637  00C9               	movwf	??_inv_handler+2
  4153  0638  0849               	movf	??_inv_handler+2,w
  4154  0639  00CC               	movwf	inv_handler@status
  4155                           
  4156                           ;main.c: 27: s_t = (int32_t)((uint16_t)measure[0] * 256 + (uint16_t)measure[1]);
  4157  063A  084E               	movf	inv_handler@measure+1,w
  4158  063B  00C7               	movwf	??_inv_handler
  4159  063C  01C8               	clrf	??_inv_handler+1
  4160  063D  084D               	movf	inv_handler@measure,w
  4161  063E  00C9               	movwf	??_inv_handler+2
  4162  063F  01CA               	clrf	??_inv_handler+3
  4163  0640  0849               	movf	??_inv_handler+2,w
  4164  0641  00CA               	movwf	??_inv_handler+3
  4165  0642  01C9               	clrf	??_inv_handler+2
  4166  0643  0847               	movf	??_inv_handler,w
  4167  0644  0749               	addwf	??_inv_handler+2,w
  4168  0645  00D3               	movwf	inv_handler@s_t
  4169  0646  0848               	movf	??_inv_handler+1,w
  4170  0647  3D4A               	addwfc	??_inv_handler+3,w
  4171  0648  00D4               	movwf	inv_handler@s_t+1
  4172  0649  01D5               	clrf	inv_handler@s_t+2
  4173  064A  01D6               	clrf	inv_handler@s_t+3
  4174                           
  4175                           ;main.c: 28: s_rh = (int32_t)((uint16_t)measure[3] * 256 + (uint16_t)measure[4]);
  4176  064B  0851               	movf	inv_handler@measure+4,w
  4177  064C  00C7               	movwf	??_inv_handler
  4178  064D  01C8               	clrf	??_inv_handler+1
  4179  064E  0850               	movf	inv_handler@measure+3,w
  4180  064F  00C9               	movwf	??_inv_handler+2
  4181  0650  01CA               	clrf	??_inv_handler+3
  4182  0651  0849               	movf	??_inv_handler+2,w
  4183  0652  00CA               	movwf	??_inv_handler+3
  4184  0653  01C9               	clrf	??_inv_handler+2
  4185  0654  0847               	movf	??_inv_handler,w
  4186  0655  0749               	addwf	??_inv_handler+2,w
  4187  0656  00D7               	movwf	inv_handler@s_rh
  4188  0657  0848               	movf	??_inv_handler+1,w
  4189  0658  3D4A               	addwfc	??_inv_handler+3,w
  4190  0659  00D8               	movwf	inv_handler@s_rh+1
  4191  065A  01D9               	clrf	inv_handler@s_rh+2
  4192  065B  01DA               	clrf	inv_handler@s_rh+3
  4193                           
  4194                           ;main.c: 30: data[0] = (int8_t)(s_t * 175 / RESOLUTION - 45);
  4195  065C  30D3               	movlw	low (_RESOLUTION| (0+32768))
  4196  065D  0084               	movwf	4
  4197  065E  3086               	movlw	high (_RESOLUTION| (0+32768))
  4198  065F  0085               	movwf	5
  4199  0660  3F00               	moviw [0]fsr0
  4200  0661  00C7               	movwf	??_inv_handler
  4201  0662  3F01               	moviw [1]fsr0
  4202  0663  00C8               	movwf	??_inv_handler+1
  4203  0664  0847               	movf	??_inv_handler,w
  4204  0665  00AD               	movwf	___aldiv@divisor
  4205  0666  0848               	movf	??_inv_handler+1,w
  4206  0667  00AE               	movwf	___aldiv@divisor+1
  4207  0668  01AF               	clrf	___aldiv@divisor+2
  4208  0669  01B0               	clrf	___aldiv@divisor+3
  4209  066A  0856               	movf	inv_handler@s_t+3,w
  4210  066B  00A4               	movwf	___lmul@multiplier+3
  4211  066C  0855               	movf	inv_handler@s_t+2,w
  4212  066D  00A3               	movwf	___lmul@multiplier+2
  4213  066E  0854               	movf	inv_handler@s_t+1,w
  4214  066F  00A2               	movwf	___lmul@multiplier+1
  4215  0670  0853               	movf	inv_handler@s_t,w
  4216  0671  00A1               	movwf	___lmul@multiplier
  4217  0672  3000               	movlw	0
  4218  0673  00A8               	movwf	___lmul@multiplicand+3
  4219  0674  3000               	movlw	0
  4220  0675  00A7               	movwf	___lmul@multiplicand+2
  4221  0676  3000               	movlw	0
  4222  0677  00A6               	movwf	___lmul@multiplicand+1
  4223  0678  30AF               	movlw	175
  4224  0679  00A5               	movwf	___lmul@multiplicand
  4225  067A  318D  259E  3186   	fcall	___lmul
  4226  067D  0020               	movlb	0	; select bank0
  4227  067E  0824               	movf	?___lmul+3,w
  4228  067F  00B4               	movwf	___aldiv@dividend+3
  4229  0680  0823               	movf	?___lmul+2,w
  4230  0681  00B3               	movwf	___aldiv@dividend+2
  4231  0682  0822               	movf	?___lmul+1,w
  4232  0683  00B2               	movwf	___aldiv@dividend+1
  4233  0684  0821               	movf	?___lmul,w
  4234  0685  00B1               	movwf	___aldiv@dividend
  4235  0686  318F  277E  3186   	fcall	___aldiv
  4236  0689  0020               	movlb	0	; select bank0
  4237  068A  082D               	movf	?___aldiv,w
  4238  068B  3ED3               	addlw	-45
  4239  068C  00C9               	movwf	??_inv_handler+2
  4240  068D  0849               	movf	??_inv_handler+2,w
  4241  068E  00DB               	movwf	inv_handler@data
  4242                           
  4243                           ;main.c: 31: data[1] = (int8_t)(s_rh * 100 / RESOLUTION);
  4244  068F  30D3               	movlw	low (_RESOLUTION| (0+32768))
  4245  0690  0084               	movwf	4
  4246  0691  3086               	movlw	high (_RESOLUTION| (0+32768))
  4247  0692  0085               	movwf	5
  4248  0693  3F00               	moviw [0]fsr0
  4249  0694  00C7               	movwf	??_inv_handler
  4250  0695  3F01               	moviw [1]fsr0
  4251  0696  00C8               	movwf	??_inv_handler+1
  4252  0697  0847               	movf	??_inv_handler,w
  4253  0698  00AD               	movwf	___aldiv@divisor
  4254  0699  0848               	movf	??_inv_handler+1,w
  4255  069A  00AE               	movwf	___aldiv@divisor+1
  4256  069B  01AF               	clrf	___aldiv@divisor+2
  4257  069C  01B0               	clrf	___aldiv@divisor+3
  4258  069D  085A               	movf	inv_handler@s_rh+3,w
  4259  069E  00A4               	movwf	___lmul@multiplier+3
  4260  069F  0859               	movf	inv_handler@s_rh+2,w
  4261  06A0  00A3               	movwf	___lmul@multiplier+2
  4262  06A1  0858               	movf	inv_handler@s_rh+1,w
  4263  06A2  00A2               	movwf	___lmul@multiplier+1
  4264  06A3  0857               	movf	inv_handler@s_rh,w
  4265  06A4  00A1               	movwf	___lmul@multiplier
  4266  06A5  3000               	movlw	0
  4267  06A6  00A8               	movwf	___lmul@multiplicand+3
  4268  06A7  3000               	movlw	0
  4269  06A8  00A7               	movwf	___lmul@multiplicand+2
  4270  06A9  3000               	movlw	0
  4271  06AA  00A6               	movwf	___lmul@multiplicand+1
  4272  06AB  3064               	movlw	100
  4273  06AC  00A5               	movwf	___lmul@multiplicand
  4274  06AD  318D  259E  3186   	fcall	___lmul
  4275  06B0  0020               	movlb	0	; select bank0
  4276  06B1  0824               	movf	?___lmul+3,w
  4277  06B2  00B4               	movwf	___aldiv@dividend+3
  4278  06B3  0823               	movf	?___lmul+2,w
  4279  06B4  00B3               	movwf	___aldiv@dividend+2
  4280  06B5  0822               	movf	?___lmul+1,w
  4281  06B6  00B2               	movwf	___aldiv@dividend+1
  4282  06B7  0821               	movf	?___lmul,w
  4283  06B8  00B1               	movwf	___aldiv@dividend
  4284  06B9  318F  277E  3186   	fcall	___aldiv
  4285  06BC  0020               	movlb	0	; select bank0
  4286  06BD  082D               	movf	?___aldiv,w
  4287  06BE  00C9               	movwf	??_inv_handler+2
  4288  06BF  0849               	movf	??_inv_handler+2,w
  4289  06C0  00DC               	movwf	inv_handler@data+1
  4290                           
  4291                           ;main.c: 34: PROTOCOL_I2C_Send_int8_t(2, data);
  4292  06C1  305B               	movlw	(low (inv_handler@data| 0))& (0+255)
  4293  06C2  00C7               	movwf	??_inv_handler
  4294  06C3  0847               	movf	??_inv_handler,w
  4295  06C4  00C3               	movwf	PROTOCOL_I2C_Send_int8_t@pbuffer
  4296  06C5  3002               	movlw	2
  4297  06C6  318F  2720         	fcall	_PROTOCOL_I2C_Send_int8_t
  4298  06C8  0008               	return
  4299  06C9                     __end_of_inv_handler:	
  4300                           
  4301                           	psect	text6
  4302  0C78                     __ptext6:	
  4303 ;; *************** function _i2c2_write *****************
  4304 ;; Defined at:
  4305 ;;		line 13 in file "i2c2_util.c"
  4306 ;; Parameters:    Size  Location     Type
  4307 ;;  dev_addr        2   15[BANK0 ] unsigned int 
  4308 ;;  reg_addr        1   17[BANK0 ] unsigned char 
  4309 ;;  data            1   18[BANK0 ] unsigned char 
  4310 ;; Auto vars:     Size  Location     Type
  4311 ;;  buf             2   21[BANK0 ] unsigned char [2]
  4312 ;;  status          1   24[BANK0 ] enum E2979
  4313 ;;  write_status    1   23[BANK0 ] unsigned char 
  4314 ;; Return value:  Size  Location     Type
  4315 ;;                  1    wreg      unsigned char 
  4316 ;; Registers used:
  4317 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4318 ;; Tracked objects:
  4319 ;;		On entry : 0/0
  4320 ;;		On exit  : 0/0
  4321 ;;		Unchanged: 0/0
  4322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4323 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4324 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4325 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4326 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4327 ;;Total ram usage:       10 bytes
  4328 ;; Hardware stack levels used:    1
  4329 ;; Hardware stack levels required when called:    7
  4330 ;; This function calls:
  4331 ;;		_I2C2_MasterWrite
  4332 ;; This function is called by:
  4333 ;;		_inv_handler
  4334 ;; This function uses a non-reentrant model
  4335 ;;
  4336                           
  4337                           
  4338                           ;psect for function _i2c2_write
  4339  0C78                     _i2c2_write:	
  4340                           
  4341                           ;i2c2_util.c: 15: uint8_t buf[2];
  4342                           ;i2c2_util.c: 16: I2C2_MESSAGE_STATUS status;
  4343                           ;i2c2_util.c: 17: uint8_t write_status;
  4344                           ;i2c2_util.c: 18: buf[0] = reg_addr;
  4345                           
  4346                           ;incstack = 0
  4347                           ; Regs used in _i2c2_write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4348  0C78  0020               	movlb	0	; select bank0
  4349  0C79  0831               	movf	i2c2_write@reg_addr,w
  4350  0C7A  00B3               	movwf	??_i2c2_write
  4351  0C7B  0833               	movf	??_i2c2_write,w
  4352  0C7C  00B5               	movwf	i2c2_write@buf
  4353                           
  4354                           ;i2c2_util.c: 19: buf[1] = data;
  4355  0C7D  0832               	movf	i2c2_write@data,w
  4356  0C7E  00B3               	movwf	??_i2c2_write
  4357  0C7F  0833               	movf	??_i2c2_write,w
  4358  0C80  00B6               	movwf	i2c2_write@buf+1
  4359                           
  4360                           ;i2c2_util.c: 20: I2C2_MasterWrite(buf, 2, dev_addr, &status);
  4361  0C81  3002               	movlw	2
  4362  0C82  00B3               	movwf	??_i2c2_write
  4363  0C83  0833               	movf	??_i2c2_write,w
  4364  0C84  00A8               	movwf	I2C2_MasterWrite@length
  4365  0C85  0830               	movf	i2c2_write@dev_addr+1,w
  4366  0C86  00AA               	movwf	I2C2_MasterWrite@address+1
  4367  0C87  082F               	movf	i2c2_write@dev_addr,w
  4368  0C88  00A9               	movwf	I2C2_MasterWrite@address
  4369  0C89  3038               	movlw	(low (i2c2_write@status| 0))& (0+255)
  4370  0C8A  00B4               	movwf	??_i2c2_write+1
  4371  0C8B  0834               	movf	??_i2c2_write+1,w
  4372  0C8C  00AB               	movwf	I2C2_MasterWrite@pflag
  4373  0C8D  3035               	movlw	(low (i2c2_write@buf| 0))& (0+255)
  4374  0C8E  318C  24EF  318C   	fcall	_I2C2_MasterWrite
  4375  0C91                     l4301:	
  4376                           ;i2c2_util.c: 21: while (status == I2C2_MESSAGE_PENDING);
  4377                           
  4378  0C91  3002               	movlw	2
  4379  0C92  0020               	movlb	0	; select bank0
  4380  0C93  0638               	xorwf	i2c2_write@status,w
  4381  0C94  1903               	btfsc	3,2
  4382  0C95  2C91               	goto	l4301
  4383                           
  4384                           ;i2c2_util.c: 22: if (status == I2C2_MESSAGE_COMPLETE) {
  4385  0C96  0838               	movf	i2c2_write@status,w
  4386  0C97  1D03               	btfss	3,2
  4387  0C98  2C9B               	goto	l943
  4388                           
  4389                           ;i2c2_util.c: 23: write_status = 0;
  4390  0C99  01B7               	clrf	i2c2_write@write_status
  4391                           
  4392                           ;i2c2_util.c: 24: } else {
  4393  0C9A  2C9D               	goto	l4307
  4394  0C9B                     l943:	
  4395                           
  4396                           ;i2c2_util.c: 25: write_status = 1;
  4397  0C9B  01B7               	clrf	i2c2_write@write_status
  4398  0C9C  0AB7               	incf	i2c2_write@write_status,f
  4399  0C9D                     l4307:	
  4400                           
  4401                           ;i2c2_util.c: 26: }
  4402                           ;i2c2_util.c: 27: return write_status;
  4403  0C9D  0837               	movf	i2c2_write@write_status,w
  4404  0C9E  0008               	return
  4405  0C9F                     __end_of_i2c2_write:	
  4406                           
  4407                           	psect	text7
  4408  0CEF                     __ptext7:	
  4409 ;; *************** function _I2C2_MasterWrite *****************
  4410 ;; Defined at:
  4411 ;;		line 598 in file "mcc_generated_files/i2c2.c"
  4412 ;; Parameters:    Size  Location     Type
  4413 ;;  pdata           1    wreg     PTR unsigned char 
  4414 ;;		 -> i2c2_write_no_data@buf(1), i2c2_read@reg(1), i2c2_write@buf(2), 
  4415 ;;  length          1    8[BANK0 ] unsigned char 
  4416 ;;  address         2    9[BANK0 ] unsigned int 
  4417 ;;  pflag           1   11[BANK0 ] PTR enum E2972
  4418 ;;		 -> i2c2_write_no_data@status(1), i2c2_read@status(1), i2c2_write@status(1), 
  4419 ;; Auto vars:     Size  Location     Type
  4420 ;;  pdata           1   14[BANK0 ] PTR unsigned char 
  4421 ;;		 -> i2c2_write_no_data@buf(1), i2c2_read@reg(1), i2c2_write@buf(2), 
  4422 ;; Return value:  Size  Location     Type
  4423 ;;                  1    wreg      void 
  4424 ;; Registers used:
  4425 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4426 ;; Tracked objects:
  4427 ;;		On entry : 0/0
  4428 ;;		On exit  : 0/0
  4429 ;;		Unchanged: 0/0
  4430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4431 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4432 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4433 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4434 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4435 ;;Total ram usage:        7 bytes
  4436 ;; Hardware stack levels used:    1
  4437 ;; Hardware stack levels required when called:    6
  4438 ;; This function calls:
  4439 ;;		_I2C2_MasterTRBInsert
  4440 ;;		_I2C2_MasterWriteTRBBuild
  4441 ;; This function is called by:
  4442 ;;		_i2c2_write
  4443 ;; This function uses a non-reentrant model
  4444 ;;
  4445                           
  4446                           
  4447                           ;psect for function _I2C2_MasterWrite
  4448  0CEF                     _I2C2_MasterWrite:	
  4449                           
  4450                           ;incstack = 0
  4451                           ; Regs used in _I2C2_MasterWrite: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4452                           ;I2C2_MasterWrite@pdata stored from wreg
  4453  0CEF  0020               	movlb	0	; select bank0
  4454  0CF0  00AE               	movwf	I2C2_MasterWrite@pdata
  4455                           
  4456                           ;i2c2.c: 604: static I2C2_TRANSACTION_REQUEST_BLOCK trBlock;
  4457                           ;i2c2.c: 607: if (i2c2_object.trStatus.s.full != 1)
  4458  0CF1  1862               	btfsc	_i2c2_object+2,0
  4459  0CF2  2D10               	goto	l4127
  4460                           
  4461                           ;i2c2.c: 608: {
  4462                           ;i2c2.c: 609: I2C2_MasterWriteTRBBuild(&trBlock, pdata, length, address);
  4463  0CF3  082E               	movf	I2C2_MasterWrite@pdata,w
  4464  0CF4  00AC               	movwf	??_I2C2_MasterWrite
  4465  0CF5  082C               	movf	??_I2C2_MasterWrite,w
  4466  0CF6  00A1               	movwf	I2C2_MasterWriteTRBBuild@pdata
  4467  0CF7  0828               	movf	I2C2_MasterWrite@length,w
  4468  0CF8  00AD               	movwf	??_I2C2_MasterWrite+1
  4469  0CF9  082D               	movf	??_I2C2_MasterWrite+1,w
  4470  0CFA  00A2               	movwf	I2C2_MasterWriteTRBBuild@length
  4471  0CFB  082A               	movf	I2C2_MasterWrite@address+1,w
  4472  0CFC  00A4               	movwf	I2C2_MasterWriteTRBBuild@address+1
  4473  0CFD  0829               	movf	I2C2_MasterWrite@address,w
  4474  0CFE  00A3               	movwf	I2C2_MasterWriteTRBBuild@address
  4475  0CFF  30D1               	movlw	(low (I2C2_MasterWrite@trBlock| 0))& (0+255)
  4476  0D00  318B  23A7  318C   	fcall	_I2C2_MasterWriteTRBBuild
  4477                           
  4478                           ;i2c2.c: 610: I2C2_MasterTRBInsert(1, &trBlock, pflag);
  4479  0D03  30D1               	movlw	(low (I2C2_MasterWrite@trBlock| 0))& (0+255)
  4480  0D04  0020               	movlb	0	; select bank0
  4481  0D05  00AC               	movwf	??_I2C2_MasterWrite
  4482  0D06  082C               	movf	??_I2C2_MasterWrite,w
  4483  0D07  00A1               	movwf	I2C2_MasterTRBInsert@ptrb_list
  4484  0D08  082B               	movf	I2C2_MasterWrite@pflag,w
  4485  0D09  00AD               	movwf	??_I2C2_MasterWrite+1
  4486  0D0A  082D               	movf	??_I2C2_MasterWrite+1,w
  4487  0D0B  00A2               	movwf	I2C2_MasterTRBInsert@pflag
  4488  0D0C  3001               	movlw	1
  4489  0D0D  318E  2688         	fcall	_I2C2_MasterTRBInsert
  4490                           
  4491                           ;i2c2.c: 611: }
  4492  0D0F  0008               	return
  4493  0D10                     l4127:	
  4494                           
  4495                           ;i2c2.c: 612: else
  4496                           ;i2c2.c: 613: {
  4497                           ;i2c2.c: 614: *pflag = I2C2_MESSAGE_FAIL;
  4498  0D10  0020               	movlb	0	; select bank0
  4499  0D11  082B               	movf	I2C2_MasterWrite@pflag,w
  4500  0D12  0086               	movwf	6
  4501  0D13  0187               	clrf	7
  4502  0D14  0181               	clrf	1
  4503  0D15  0A81               	incf	1,f
  4504  0D16  0008               	return
  4505  0D17                     __end_of_I2C2_MasterWrite:	
  4506                           
  4507                           	psect	text8
  4508  0BA7                     __ptext8:	
  4509 ;; *************** function _I2C2_MasterWriteTRBBuild *****************
  4510 ;; Defined at:
  4511 ;;		line 707 in file "mcc_generated_files/i2c2.c"
  4512 ;; Parameters:    Size  Location     Type
  4513 ;;  ptrb            1    wreg     PTR struct .
  4514 ;;		 -> I2C2_MasterWrite@trBlock(4), 
  4515 ;;  pdata           1    1[BANK0 ] PTR unsigned char 
  4516 ;;		 -> i2c2_write_no_data@buf(1), i2c2_read@reg(1), i2c2_write@buf(2), 
  4517 ;;  length          1    2[BANK0 ] unsigned char 
  4518 ;;  address         2    3[BANK0 ] unsigned int 
  4519 ;; Auto vars:     Size  Location     Type
  4520 ;;  ptrb            1    7[BANK0 ] PTR struct .
  4521 ;;		 -> I2C2_MasterWrite@trBlock(4), 
  4522 ;; Return value:  Size  Location     Type
  4523 ;;                  1    wreg      void 
  4524 ;; Registers used:
  4525 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4526 ;; Tracked objects:
  4527 ;;		On entry : 0/0
  4528 ;;		On exit  : 0/0
  4529 ;;		Unchanged: 0/0
  4530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4531 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4532 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4533 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4534 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4535 ;;Total ram usage:        7 bytes
  4536 ;; Hardware stack levels used:    1
  4537 ;; Hardware stack levels required when called:    5
  4538 ;; This function calls:
  4539 ;;		Nothing
  4540 ;; This function is called by:
  4541 ;;		_I2C2_MasterWrite
  4542 ;; This function uses a non-reentrant model
  4543 ;;
  4544                           
  4545                           
  4546                           ;psect for function _I2C2_MasterWriteTRBBuild
  4547  0BA7                     _I2C2_MasterWriteTRBBuild:	
  4548                           
  4549                           ;incstack = 0
  4550                           ; Regs used in _I2C2_MasterWriteTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
  4551                           ;I2C2_MasterWriteTRBBuild@ptrb stored from wreg
  4552  0BA7  0020               	movlb	0	; select bank0
  4553  0BA8  00A7               	movwf	I2C2_MasterWriteTRBBuild@ptrb
  4554                           
  4555                           ;i2c2.c: 713: ptrb->address = address << 1;
  4556  0BA9  0824               	movf	I2C2_MasterWriteTRBBuild@address+1,w
  4557  0BAA  00A6               	movwf	??_I2C2_MasterWriteTRBBuild+1
  4558  0BAB  0823               	movf	I2C2_MasterWriteTRBBuild@address,w
  4559  0BAC  00A5               	movwf	??_I2C2_MasterWriteTRBBuild
  4560  0BAD  35A5               	lslf	??_I2C2_MasterWriteTRBBuild,f
  4561  0BAE  0DA6               	rlf	??_I2C2_MasterWriteTRBBuild+1,f
  4562  0BAF  0827               	movf	I2C2_MasterWriteTRBBuild@ptrb,w
  4563  0BB0  0086               	movwf	6
  4564  0BB1  0187               	clrf	7
  4565  0BB2  0825               	movf	??_I2C2_MasterWriteTRBBuild,w
  4566  0BB3  3FC0               	movwi [0]fsr1
  4567  0BB4  0826               	movf	??_I2C2_MasterWriteTRBBuild+1,w
  4568  0BB5  3FC1               	movwi [1]fsr1
  4569                           
  4570                           ;i2c2.c: 714: ptrb->length = length;
  4571  0BB6  0822               	movf	I2C2_MasterWriteTRBBuild@length,w
  4572  0BB7  00A5               	movwf	??_I2C2_MasterWriteTRBBuild
  4573  0BB8  0827               	movf	I2C2_MasterWriteTRBBuild@ptrb,w
  4574  0BB9  3E02               	addlw	2
  4575  0BBA  0086               	movwf	6
  4576  0BBB  0187               	clrf	7
  4577  0BBC  0825               	movf	??_I2C2_MasterWriteTRBBuild,w
  4578  0BBD  0081               	movwf	1
  4579                           
  4580                           ;i2c2.c: 715: ptrb->pbuffer = pdata;
  4581  0BBE  0821               	movf	I2C2_MasterWriteTRBBuild@pdata,w
  4582  0BBF  00A5               	movwf	??_I2C2_MasterWriteTRBBuild
  4583  0BC0  0827               	movf	I2C2_MasterWriteTRBBuild@ptrb,w
  4584  0BC1  3E03               	addlw	3
  4585  0BC2  0086               	movwf	6
  4586  0BC3  0187               	clrf	7
  4587  0BC4  0825               	movf	??_I2C2_MasterWriteTRBBuild,w
  4588  0BC5  0081               	movwf	1
  4589  0BC6  0008               	return
  4590  0BC7                     __end_of_I2C2_MasterWriteTRBBuild:	
  4591                           
  4592                           	psect	text9
  4593  0D17                     __ptext9:	
  4594 ;; *************** function _i2c2_read_no_reg_addr *****************
  4595 ;; Defined at:
  4596 ;;		line 77 in file "i2c2_util.c"
  4597 ;; Parameters:    Size  Location     Type
  4598 ;;  dev_addr        2   15[BANK0 ] unsigned int 
  4599 ;;  pbuf            1   17[BANK0 ] PTR unsigned char 
  4600 ;;		 -> inv_handler@measure(6), 
  4601 ;;  len             1   18[BANK0 ] unsigned char 
  4602 ;; Auto vars:     Size  Location     Type
  4603 ;;  status          1   23[BANK0 ] enum E2979
  4604 ;;  read_status     1   22[BANK0 ] unsigned char 
  4605 ;;  timeout         1   21[BANK0 ] unsigned char 
  4606 ;; Return value:  Size  Location     Type
  4607 ;;                  1    wreg      unsigned char 
  4608 ;; Registers used:
  4609 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4610 ;; Tracked objects:
  4611 ;;		On entry : 0/0
  4612 ;;		On exit  : 0/0
  4613 ;;		Unchanged: 0/0
  4614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4615 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4616 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4617 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4618 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4619 ;;Total ram usage:        9 bytes
  4620 ;; Hardware stack levels used:    1
  4621 ;; Hardware stack levels required when called:    7
  4622 ;; This function calls:
  4623 ;;		_I2C2_MasterRead
  4624 ;; This function is called by:
  4625 ;;		_inv_handler
  4626 ;; This function uses a non-reentrant model
  4627 ;;
  4628                           
  4629                           
  4630                           ;psect for function _i2c2_read_no_reg_addr
  4631  0D17                     _i2c2_read_no_reg_addr:	
  4632                           
  4633                           ;i2c2_util.c: 79: I2C2_MESSAGE_STATUS status;
  4634                           ;i2c2_util.c: 80: uint8_t read_status = 2;
  4635                           
  4636                           ;incstack = 0
  4637                           ; Regs used in _i2c2_read_no_reg_addr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  4638  0D17  3002               	movlw	2
  4639  0D18  0020               	movlb	0	; select bank0
  4640  0D19  00B3               	movwf	??_i2c2_read_no_reg_addr
  4641  0D1A  0833               	movf	??_i2c2_read_no_reg_addr,w
  4642  0D1B  00B6               	movwf	i2c2_read_no_reg_addr@read_status
  4643                           
  4644                           ;i2c2_util.c: 81: uint8_t timeout = 1;
  4645  0D1C  01B5               	clrf	i2c2_read_no_reg_addr@timeout
  4646  0D1D  0AB5               	incf	i2c2_read_no_reg_addr@timeout,f
  4647  0D1E                     l4327:	
  4648                           ;i2c2_util.c: 82: while (status != I2C2_MESSAGE_FAIL) {
  4649                           
  4650  0D1E  0337               	decf	i2c2_read_no_reg_addr@status,w
  4651  0D1F  1903               	btfsc	3,2
  4652  0D20  2D41               	goto	l4329
  4653                           
  4654                           ;i2c2_util.c: 83: I2C2_MasterRead(pbuf, len, dev_addr, &status);
  4655  0D21  0832               	movf	i2c2_read_no_reg_addr@len,w
  4656  0D22  00B3               	movwf	??_i2c2_read_no_reg_addr
  4657  0D23  0833               	movf	??_i2c2_read_no_reg_addr,w
  4658  0D24  00A8               	movwf	I2C2_MasterRead@length
  4659  0D25  0830               	movf	i2c2_read_no_reg_addr@dev_addr+1,w
  4660  0D26  00AA               	movwf	I2C2_MasterRead@address+1
  4661  0D27  082F               	movf	i2c2_read_no_reg_addr@dev_addr,w
  4662  0D28  00A9               	movwf	I2C2_MasterRead@address
  4663  0D29  3037               	movlw	(low (i2c2_read_no_reg_addr@status| 0))& (0+255)
  4664  0D2A  00B4               	movwf	??_i2c2_read_no_reg_addr+1
  4665  0D2B  0834               	movf	??_i2c2_read_no_reg_addr+1,w
  4666  0D2C  00AB               	movwf	I2C2_MasterRead@pflag
  4667  0D2D  0831               	movf	i2c2_read_no_reg_addr@pbuf,w
  4668  0D2E  318C  24C7  318D   	fcall	_I2C2_MasterRead
  4669  0D31                     l4317:	
  4670                           ;i2c2_util.c: 84: while (status == I2C2_MESSAGE_PENDING);
  4671                           
  4672  0D31  3002               	movlw	2
  4673  0D32  0020               	movlb	0	; select bank0
  4674  0D33  0637               	xorwf	i2c2_read_no_reg_addr@status,w
  4675  0D34  1903               	btfsc	3,2
  4676  0D35  2D31               	goto	l4317
  4677                           
  4678                           ;i2c2_util.c: 85: if (status == I2C2_MESSAGE_COMPLETE) {
  4679  0D36  0837               	movf	i2c2_read_no_reg_addr@status,w
  4680  0D37  1D03               	btfss	3,2
  4681  0D38  2D3B               	goto	l4323
  4682                           
  4683                           ;i2c2_util.c: 86: read_status = 0;
  4684  0D39  01B6               	clrf	i2c2_read_no_reg_addr@read_status
  4685                           
  4686                           ;i2c2_util.c: 87: break;
  4687  0D3A  2D41               	goto	l4329
  4688  0D3B                     l4323:	
  4689                           
  4690                           ;i2c2_util.c: 88: }
  4691                           ;i2c2_util.c: 89: if (--timeout == 0) {
  4692  0D3B  3001               	movlw	1
  4693  0D3C  02B5               	subwf	i2c2_read_no_reg_addr@timeout,f
  4694  0D3D  1D03               	btfss	3,2
  4695  0D3E  2D1E               	goto	l4327
  4696                           
  4697                           ;i2c2_util.c: 90: read_status = 1;
  4698  0D3F  01B6               	clrf	i2c2_read_no_reg_addr@read_status
  4699  0D40  0AB6               	incf	i2c2_read_no_reg_addr@read_status,f
  4700  0D41                     l4329:	
  4701                           ;i2c2_util.c: 91: break;
  4702                           
  4703                           
  4704                           ;i2c2_util.c: 92: }
  4705                           ;i2c2_util.c: 93: }
  4706                           ;i2c2_util.c: 94: return read_status;
  4707  0D41  0836               	movf	i2c2_read_no_reg_addr@read_status,w
  4708  0D42  0008               	return
  4709  0D43                     __end_of_i2c2_read_no_reg_addr:	
  4710                           
  4711                           	psect	text10
  4712  0CC7                     __ptext10:	
  4713 ;; *************** function _I2C2_MasterRead *****************
  4714 ;; Defined at:
  4715 ;;		line 619 in file "mcc_generated_files/i2c2.c"
  4716 ;; Parameters:    Size  Location     Type
  4717 ;;  pdata           1    wreg     PTR unsigned char 
  4718 ;;		 -> inv_handler@measure(6), 
  4719 ;;  length          1    8[BANK0 ] unsigned char 
  4720 ;;  address         2    9[BANK0 ] unsigned int 
  4721 ;;  pflag           1   11[BANK0 ] PTR enum E2972
  4722 ;;		 -> i2c2_read_no_reg_addr@status(1), i2c2_read@status(1), 
  4723 ;; Auto vars:     Size  Location     Type
  4724 ;;  pdata           1   14[BANK0 ] PTR unsigned char 
  4725 ;;		 -> inv_handler@measure(6), 
  4726 ;; Return value:  Size  Location     Type
  4727 ;;                  1    wreg      void 
  4728 ;; Registers used:
  4729 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4730 ;; Tracked objects:
  4731 ;;		On entry : 0/0
  4732 ;;		On exit  : 0/0
  4733 ;;		Unchanged: 0/0
  4734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4735 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4736 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4737 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4738 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4739 ;;Total ram usage:        7 bytes
  4740 ;; Hardware stack levels used:    1
  4741 ;; Hardware stack levels required when called:    6
  4742 ;; This function calls:
  4743 ;;		_I2C2_MasterReadTRBBuild
  4744 ;;		_I2C2_MasterTRBInsert
  4745 ;; This function is called by:
  4746 ;;		_i2c2_read_no_reg_addr
  4747 ;; This function uses a non-reentrant model
  4748 ;;
  4749                           
  4750                           
  4751                           ;psect for function _I2C2_MasterRead
  4752  0CC7                     _I2C2_MasterRead:	
  4753                           
  4754                           ;incstack = 0
  4755                           ; Regs used in _I2C2_MasterRead: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4756                           ;I2C2_MasterRead@pdata stored from wreg
  4757  0CC7  0020               	movlb	0	; select bank0
  4758  0CC8  00AE               	movwf	I2C2_MasterRead@pdata
  4759                           
  4760                           ;i2c2.c: 625: static I2C2_TRANSACTION_REQUEST_BLOCK trBlock;
  4761                           ;i2c2.c: 629: if (i2c2_object.trStatus.s.full != 1)
  4762  0CC9  1862               	btfsc	_i2c2_object+2,0
  4763  0CCA  2CE8               	goto	l4133
  4764                           
  4765                           ;i2c2.c: 630: {
  4766                           ;i2c2.c: 631: I2C2_MasterReadTRBBuild(&trBlock, pdata, length, address);
  4767  0CCB  082E               	movf	I2C2_MasterRead@pdata,w
  4768  0CCC  00AC               	movwf	??_I2C2_MasterRead
  4769  0CCD  082C               	movf	??_I2C2_MasterRead,w
  4770  0CCE  00A1               	movwf	I2C2_MasterReadTRBBuild@pdata
  4771  0CCF  0828               	movf	I2C2_MasterRead@length,w
  4772  0CD0  00AD               	movwf	??_I2C2_MasterRead+1
  4773  0CD1  082D               	movf	??_I2C2_MasterRead+1,w
  4774  0CD2  00A2               	movwf	I2C2_MasterReadTRBBuild@length
  4775  0CD3  082A               	movf	I2C2_MasterRead@address+1,w
  4776  0CD4  00A4               	movwf	I2C2_MasterReadTRBBuild@address+1
  4777  0CD5  0829               	movf	I2C2_MasterRead@address,w
  4778  0CD6  00A3               	movwf	I2C2_MasterReadTRBBuild@address
  4779  0CD7  30CD               	movlw	(low (I2C2_MasterRead@trBlock| 0))& (0+255)
  4780  0CD8  318C  249F  318C   	fcall	_I2C2_MasterReadTRBBuild
  4781                           
  4782                           ;i2c2.c: 632: I2C2_MasterTRBInsert(1, &trBlock, pflag);
  4783  0CDB  30CD               	movlw	(low (I2C2_MasterRead@trBlock| 0))& (0+255)
  4784  0CDC  0020               	movlb	0	; select bank0
  4785  0CDD  00AC               	movwf	??_I2C2_MasterRead
  4786  0CDE  082C               	movf	??_I2C2_MasterRead,w
  4787  0CDF  00A1               	movwf	I2C2_MasterTRBInsert@ptrb_list
  4788  0CE0  082B               	movf	I2C2_MasterRead@pflag,w
  4789  0CE1  00AD               	movwf	??_I2C2_MasterRead+1
  4790  0CE2  082D               	movf	??_I2C2_MasterRead+1,w
  4791  0CE3  00A2               	movwf	I2C2_MasterTRBInsert@pflag
  4792  0CE4  3001               	movlw	1
  4793  0CE5  318E  2688         	fcall	_I2C2_MasterTRBInsert
  4794                           
  4795                           ;i2c2.c: 633: }
  4796  0CE7  0008               	return
  4797  0CE8                     l4133:	
  4798                           
  4799                           ;i2c2.c: 634: else
  4800                           ;i2c2.c: 635: {
  4801                           ;i2c2.c: 636: *pflag = I2C2_MESSAGE_FAIL;
  4802  0CE8  0020               	movlb	0	; select bank0
  4803  0CE9  082B               	movf	I2C2_MasterRead@pflag,w
  4804  0CEA  0086               	movwf	6
  4805  0CEB  0187               	clrf	7
  4806  0CEC  0181               	clrf	1
  4807  0CED  0A81               	incf	1,f
  4808  0CEE  0008               	return
  4809  0CEF                     __end_of_I2C2_MasterRead:	
  4810                           
  4811                           	psect	text11
  4812  0E88                     __ptext11:	
  4813 ;; *************** function _I2C2_MasterTRBInsert *****************
  4814 ;; Defined at:
  4815 ;;		line 641 in file "mcc_generated_files/i2c2.c"
  4816 ;; Parameters:    Size  Location     Type
  4817 ;;  count           1    wreg     unsigned char 
  4818 ;;  ptrb_list       1    1[BANK0 ] PTR struct .
  4819 ;;		 -> I2C2_MasterRead@trBlock(4), I2C2_MasterWrite@trBlock(4), 
  4820 ;;  pflag           1    2[BANK0 ] PTR enum E2972
  4821 ;;		 -> i2c2_read_no_reg_addr@status(1), i2c2_write_no_data@status(1), i2c2_read@status(1), i2c2_write@status(1), 
  4822 ;; Auto vars:     Size  Location     Type
  4823 ;;  count           1    4[BANK0 ] unsigned char 
  4824 ;; Return value:  Size  Location     Type
  4825 ;;                  1    wreg      void 
  4826 ;; Registers used:
  4827 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4828 ;; Tracked objects:
  4829 ;;		On entry : 0/0
  4830 ;;		On exit  : 0/0
  4831 ;;		Unchanged: 0/0
  4832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4833 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4834 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4835 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4836 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4837 ;;Total ram usage:        4 bytes
  4838 ;; Hardware stack levels used:    1
  4839 ;; Hardware stack levels required when called:    5
  4840 ;; This function calls:
  4841 ;;		Nothing
  4842 ;; This function is called by:
  4843 ;;		_I2C2_MasterWrite
  4844 ;;		_I2C2_MasterRead
  4845 ;; This function uses a non-reentrant model
  4846 ;;
  4847                           
  4848                           
  4849                           ;psect for function _I2C2_MasterTRBInsert
  4850  0E88                     _I2C2_MasterTRBInsert:	
  4851                           
  4852                           ;incstack = 0
  4853                           ; Regs used in _I2C2_MasterTRBInsert: [wreg+fsr1l+fsr1h+status,2+status,0]
  4854                           ;I2C2_MasterTRBInsert@count stored from wreg
  4855  0E88  0020               	movlb	0	; select bank0
  4856  0E89  00A4               	movwf	I2C2_MasterTRBInsert@count
  4857                           
  4858                           ;i2c2.c: 648: if (i2c2_object.trStatus.s.full != 1)
  4859  0E8A  1862               	btfsc	_i2c2_object+2,0
  4860  0E8B  2EBC               	goto	l4037
  4861                           
  4862                           ;i2c2.c: 649: {
  4863                           ;i2c2.c: 650: *pflag = I2C2_MESSAGE_PENDING;
  4864  0E8C  3002               	movlw	2
  4865  0E8D  00A3               	movwf	??_I2C2_MasterTRBInsert
  4866  0E8E  0822               	movf	I2C2_MasterTRBInsert@pflag,w
  4867  0E8F  0086               	movwf	6
  4868  0E90  0187               	clrf	7
  4869  0E91  0823               	movf	??_I2C2_MasterTRBInsert,w
  4870  0E92  0081               	movwf	1
  4871                           
  4872                           ;i2c2.c: 652: i2c2_object.pTrTail->ptrb_list = ptrb_list;
  4873  0E93  0821               	movf	I2C2_MasterTRBInsert@ptrb_list,w
  4874  0E94  00A3               	movwf	??_I2C2_MasterTRBInsert
  4875  0E95  0A60               	incf	_i2c2_object,w
  4876  0E96  0086               	movwf	6
  4877  0E97  0187               	clrf	7
  4878  0E98  0823               	movf	??_I2C2_MasterTRBInsert,w
  4879  0E99  0081               	movwf	1
  4880                           
  4881                           ;i2c2.c: 653: i2c2_object.pTrTail->count = count;
  4882  0E9A  0824               	movf	I2C2_MasterTRBInsert@count,w
  4883  0E9B  00A3               	movwf	??_I2C2_MasterTRBInsert
  4884  0E9C  0860               	movf	_i2c2_object,w
  4885  0E9D  0086               	movwf	6
  4886  0E9E  0187               	clrf	7
  4887  0E9F  0823               	movf	??_I2C2_MasterTRBInsert,w
  4888  0EA0  0081               	movwf	1
  4889                           
  4890                           ;i2c2.c: 654: i2c2_object.pTrTail->pTrFlag = pflag;
  4891  0EA1  0822               	movf	I2C2_MasterTRBInsert@pflag,w
  4892  0EA2  00A3               	movwf	??_I2C2_MasterTRBInsert
  4893  0EA3  0860               	movf	_i2c2_object,w
  4894  0EA4  3E02               	addlw	2
  4895  0EA5  0086               	movwf	6
  4896  0EA6  0187               	clrf	7
  4897  0EA7  0823               	movf	??_I2C2_MasterTRBInsert,w
  4898  0EA8  0081               	movwf	1
  4899                           
  4900                           ;i2c2.c: 655: i2c2_object.pTrTail++;
  4901  0EA9  3003               	movlw	3
  4902  0EAA  00A3               	movwf	??_I2C2_MasterTRBInsert
  4903  0EAB  0823               	movf	??_I2C2_MasterTRBInsert,w
  4904  0EAC  07E0               	addwf	_i2c2_object,f
  4905                           
  4906                           ;i2c2.c: 658: if (i2c2_object.pTrTail == (i2c2_tr_queue + 1))
  4907  0EAD  0860               	movf	_i2c2_object,w
  4908  0EAE  3ADB               	xorlw	(low ((_i2c2_tr_queue| 0+3)))& (0+255)
  4909  0EAF  1D03               	skipz
  4910  0EB0  2EB5               	goto	l4033
  4911                           
  4912                           ;i2c2.c: 659: {
  4913                           ;i2c2.c: 661: i2c2_object.pTrTail = i2c2_tr_queue;
  4914  0EB1  30D8               	movlw	(low (_i2c2_tr_queue| 0))& (0+255)
  4915  0EB2  00A3               	movwf	??_I2C2_MasterTRBInsert
  4916  0EB3  0823               	movf	??_I2C2_MasterTRBInsert,w
  4917  0EB4  00E0               	movwf	_i2c2_object
  4918  0EB5                     l4033:	
  4919                           
  4920                           ;i2c2.c: 662: }
  4921                           ;i2c2.c: 666: i2c2_object.trStatus.s.empty = 0;
  4922  0EB5  10E2               	bcf	_i2c2_object+2,1
  4923                           
  4924                           ;i2c2.c: 669: if (i2c2_object.pTrHead == i2c2_object.pTrTail)
  4925  0EB6  0861               	movf	low ((_i2c2_object| 0+1)),w
  4926  0EB7  0660               	xorwf	_i2c2_object,w
  4927  0EB8  1D03               	skipz
  4928  0EB9  2EC1               	goto	l4039
  4929                           
  4930                           ;i2c2.c: 670: {
  4931                           ;i2c2.c: 672: i2c2_object.trStatus.s.full = 1;
  4932  0EBA  1462               	bsf	_i2c2_object+2,0
  4933                           
  4934                           ;i2c2.c: 673: }
  4935                           ;i2c2.c: 675: }
  4936  0EBB  2EC1               	goto	l4039
  4937  0EBC                     l4037:	
  4938                           
  4939                           ;i2c2.c: 676: else
  4940                           ;i2c2.c: 677: {
  4941                           ;i2c2.c: 678: *pflag = I2C2_MESSAGE_FAIL;
  4942  0EBC  0822               	movf	I2C2_MasterTRBInsert@pflag,w
  4943  0EBD  0086               	movwf	6
  4944  0EBE  0187               	clrf	7
  4945  0EBF  0181               	clrf	1
  4946  0EC0  0A81               	incf	1,f
  4947  0EC1                     l4039:	
  4948                           
  4949                           ;i2c2.c: 679: }
  4950                           ;i2c2.c: 682: if (*pflag == I2C2_MESSAGE_PENDING)
  4951  0EC1  0822               	movf	I2C2_MasterTRBInsert@pflag,w
  4952  0EC2  0086               	movwf	6
  4953  0EC3  0187               	clrf	7
  4954  0EC4  3002               	movlw	2
  4955  0EC5  0601               	xorwf	1,w
  4956  0EC6  1D03               	btfss	3,2
  4957  0EC7  0008               	return
  4958  0EC8                     l4043:	
  4959                           ;i2c2.c: 683: {
  4960                           ;i2c2.c: 684: while(i2c2_state != S_MASTER_IDLE);
  4961                           
  4962  0EC8  0021               	movlb	1	; select bank1
  4963  0EC9  0843               	movf	_i2c2_state^(0+128),w
  4964  0ECA  1D03               	btfss	3,2
  4965  0ECB  2EC8               	goto	l4043
  4966                           
  4967                           ;i2c2.c: 685: {
  4968                           ;i2c2.c: 688: PIR4bits.SSP2IF = 1;
  4969  0ECC  0020               	movlb	0	; select bank0
  4970  0ECD  1414               	bsf	20,0	;volatile
  4971  0ECE  0008               	return
  4972  0ECF                     __end_of_I2C2_MasterTRBInsert:	
  4973                           
  4974                           	psect	text12
  4975  0C9F                     __ptext12:	
  4976 ;; *************** function _I2C2_MasterReadTRBBuild *****************
  4977 ;; Defined at:
  4978 ;;		line 694 in file "mcc_generated_files/i2c2.c"
  4979 ;; Parameters:    Size  Location     Type
  4980 ;;  ptrb            1    wreg     PTR struct .
  4981 ;;		 -> I2C2_MasterRead@trBlock(4), 
  4982 ;;  pdata           1    1[BANK0 ] PTR unsigned char 
  4983 ;;		 -> inv_handler@measure(6), 
  4984 ;;  length          1    2[BANK0 ] unsigned char 
  4985 ;;  address         2    3[BANK0 ] unsigned int 
  4986 ;; Auto vars:     Size  Location     Type
  4987 ;;  ptrb            1    7[BANK0 ] PTR struct .
  4988 ;;		 -> I2C2_MasterRead@trBlock(4), 
  4989 ;; Return value:  Size  Location     Type
  4990 ;;                  1    wreg      void 
  4991 ;; Registers used:
  4992 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4993 ;; Tracked objects:
  4994 ;;		On entry : 0/0
  4995 ;;		On exit  : 0/0
  4996 ;;		Unchanged: 0/0
  4997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4998 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4999 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5000 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5001 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5002 ;;Total ram usage:        7 bytes
  5003 ;; Hardware stack levels used:    1
  5004 ;; Hardware stack levels required when called:    5
  5005 ;; This function calls:
  5006 ;;		Nothing
  5007 ;; This function is called by:
  5008 ;;		_I2C2_MasterRead
  5009 ;; This function uses a non-reentrant model
  5010 ;;
  5011                           
  5012                           
  5013                           ;psect for function _I2C2_MasterReadTRBBuild
  5014  0C9F                     _I2C2_MasterReadTRBBuild:	
  5015                           
  5016                           ;incstack = 0
  5017                           ; Regs used in _I2C2_MasterReadTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
  5018                           ;I2C2_MasterReadTRBBuild@ptrb stored from wreg
  5019  0C9F  0020               	movlb	0	; select bank0
  5020  0CA0  00A7               	movwf	I2C2_MasterReadTRBBuild@ptrb
  5021                           
  5022                           ;i2c2.c: 700: ptrb->address = address << 1;
  5023  0CA1  0824               	movf	I2C2_MasterReadTRBBuild@address+1,w
  5024  0CA2  00A6               	movwf	??_I2C2_MasterReadTRBBuild+1
  5025  0CA3  0823               	movf	I2C2_MasterReadTRBBuild@address,w
  5026  0CA4  00A5               	movwf	??_I2C2_MasterReadTRBBuild
  5027  0CA5  35A5               	lslf	??_I2C2_MasterReadTRBBuild,f
  5028  0CA6  0DA6               	rlf	??_I2C2_MasterReadTRBBuild+1,f
  5029  0CA7  0827               	movf	I2C2_MasterReadTRBBuild@ptrb,w
  5030  0CA8  0086               	movwf	6
  5031  0CA9  0187               	clrf	7
  5032  0CAA  0825               	movf	??_I2C2_MasterReadTRBBuild,w
  5033  0CAB  3FC0               	movwi [0]fsr1
  5034  0CAC  0826               	movf	??_I2C2_MasterReadTRBBuild+1,w
  5035  0CAD  3FC1               	movwi [1]fsr1
  5036                           
  5037                           ;i2c2.c: 702: ptrb->address |= 0x01;
  5038  0CAE  0827               	movf	I2C2_MasterReadTRBBuild@ptrb,w
  5039  0CAF  0086               	movwf	6
  5040  0CB0  0187               	clrf	7
  5041  0CB1  3001               	movlw	1
  5042  0CB2  0481               	iorwf	1,f
  5043  0CB3  3141               	addfsr 1,1
  5044  0CB4  3000               	movlw	0
  5045  0CB5  0481               	iorwf	1,f
  5046                           
  5047                           ;i2c2.c: 703: ptrb->length = length;
  5048  0CB6  0822               	movf	I2C2_MasterReadTRBBuild@length,w
  5049  0CB7  00A5               	movwf	??_I2C2_MasterReadTRBBuild
  5050  0CB8  0827               	movf	I2C2_MasterReadTRBBuild@ptrb,w
  5051  0CB9  3E02               	addlw	2
  5052  0CBA  0086               	movwf	6
  5053  0CBB  0187               	clrf	7
  5054  0CBC  0825               	movf	??_I2C2_MasterReadTRBBuild,w
  5055  0CBD  0081               	movwf	1
  5056                           
  5057                           ;i2c2.c: 704: ptrb->pbuffer = pdata;
  5058  0CBE  0821               	movf	I2C2_MasterReadTRBBuild@pdata,w
  5059  0CBF  00A5               	movwf	??_I2C2_MasterReadTRBBuild
  5060  0CC0  0827               	movf	I2C2_MasterReadTRBBuild@ptrb,w
  5061  0CC1  3E03               	addlw	3
  5062  0CC2  0086               	movwf	6
  5063  0CC3  0187               	clrf	7
  5064  0CC4  0825               	movf	??_I2C2_MasterReadTRBBuild,w
  5065  0CC5  0081               	movwf	1
  5066  0CC6  0008               	return
  5067  0CC7                     __end_of_I2C2_MasterReadTRBBuild:	
  5068                           
  5069                           	psect	text13
  5070  0D9E                     __ptext13:	
  5071 ;; *************** function ___lmul *****************
  5072 ;; Defined at:
  5073 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul32.c"
  5074 ;; Parameters:    Size  Location     Type
  5075 ;;  multiplier      4    1[BANK0 ] unsigned long 
  5076 ;;  multiplicand    4    5[BANK0 ] unsigned long 
  5077 ;; Auto vars:     Size  Location     Type
  5078 ;;  product         4    9[BANK0 ] unsigned long 
  5079 ;; Return value:  Size  Location     Type
  5080 ;;                  4    1[BANK0 ] unsigned long 
  5081 ;; Registers used:
  5082 ;;		wreg, status,2, status,0
  5083 ;; Tracked objects:
  5084 ;;		On entry : 0/0
  5085 ;;		On exit  : 0/0
  5086 ;;		Unchanged: 0/0
  5087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5088 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5089 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5091 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5092 ;;Total ram usage:       12 bytes
  5093 ;; Hardware stack levels used:    1
  5094 ;; Hardware stack levels required when called:    5
  5095 ;; This function calls:
  5096 ;;		Nothing
  5097 ;; This function is called by:
  5098 ;;		_inv_handler
  5099 ;; This function uses a non-reentrant model
  5100 ;;
  5101                           
  5102                           
  5103                           ;psect for function ___lmul
  5104  0D9E                     ___lmul:	
  5105                           
  5106                           ;incstack = 0
  5107                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  5108  0D9E  3000               	movlw	0
  5109  0D9F  0020               	movlb	0	; select bank0
  5110  0DA0  00AC               	movwf	___lmul@product+3
  5111  0DA1  3000               	movlw	0
  5112  0DA2  00AB               	movwf	___lmul@product+2
  5113  0DA3  3000               	movlw	0
  5114  0DA4  00AA               	movwf	___lmul@product+1
  5115  0DA5  3000               	movlw	0
  5116  0DA6  00A9               	movwf	___lmul@product
  5117  0DA7                     l4359:	
  5118  0DA7  1C21               	btfss	___lmul@multiplier,0
  5119  0DA8  2DB1               	goto	l4363
  5120  0DA9  0825               	movf	___lmul@multiplicand,w
  5121  0DAA  07A9               	addwf	___lmul@product,f
  5122  0DAB  0826               	movf	___lmul@multiplicand+1,w
  5123  0DAC  3DAA               	addwfc	___lmul@product+1,f
  5124  0DAD  0827               	movf	___lmul@multiplicand+2,w
  5125  0DAE  3DAB               	addwfc	___lmul@product+2,f
  5126  0DAF  0828               	movf	___lmul@multiplicand+3,w
  5127  0DB0  3DAC               	addwfc	___lmul@product+3,f
  5128  0DB1                     l4363:	
  5129  0DB1  3001               	movlw	1
  5130  0DB2                     u3875:	
  5131  0DB2  35A5               	lslf	___lmul@multiplicand,f
  5132  0DB3  0DA6               	rlf	___lmul@multiplicand+1,f
  5133  0DB4  0DA7               	rlf	___lmul@multiplicand+2,f
  5134  0DB5  0DA8               	rlf	___lmul@multiplicand+3,f
  5135  0DB6  0B89               	decfsz	9,f
  5136  0DB7  2DB2               	goto	u3875
  5137  0DB8  3001               	movlw	1
  5138  0DB9                     u3885:	
  5139  0DB9  36A4               	lsrf	___lmul@multiplier+3,f
  5140  0DBA  0CA3               	rrf	___lmul@multiplier+2,f
  5141  0DBB  0CA2               	rrf	___lmul@multiplier+1,f
  5142  0DBC  0CA1               	rrf	___lmul@multiplier,f
  5143  0DBD  0B89               	decfsz	9,f
  5144  0DBE  2DB9               	goto	u3885
  5145  0DBF  0824               	movf	___lmul@multiplier+3,w
  5146  0DC0  0423               	iorwf	___lmul@multiplier+2,w
  5147  0DC1  0422               	iorwf	___lmul@multiplier+1,w
  5148  0DC2  0421               	iorwf	___lmul@multiplier,w
  5149  0DC3  1D03               	skipz
  5150  0DC4  2DA7               	goto	l4359
  5151  0DC5  082C               	movf	___lmul@product+3,w
  5152  0DC6  00A4               	movwf	?___lmul+3
  5153  0DC7  082B               	movf	___lmul@product+2,w
  5154  0DC8  00A3               	movwf	?___lmul+2
  5155  0DC9  082A               	movf	___lmul@product+1,w
  5156  0DCA  00A2               	movwf	?___lmul+1
  5157  0DCB  0829               	movf	___lmul@product,w
  5158  0DCC  00A1               	movwf	?___lmul
  5159  0DCD  0008               	return
  5160  0DCE                     __end_of___lmul:	
  5161                           
  5162                           	psect	text14
  5163  0F7E                     __ptext14:	
  5164 ;; *************** function ___aldiv *****************
  5165 ;; Defined at:
  5166 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\aldiv.c"
  5167 ;; Parameters:    Size  Location     Type
  5168 ;;  divisor         4   13[BANK0 ] long 
  5169 ;;  dividend        4   17[BANK0 ] long 
  5170 ;; Auto vars:     Size  Location     Type
  5171 ;;  quotient        4   24[BANK0 ] long 
  5172 ;;  sign            1   23[BANK0 ] unsigned char 
  5173 ;;  counter         1   22[BANK0 ] unsigned char 
  5174 ;; Return value:  Size  Location     Type
  5175 ;;                  4   13[BANK0 ] long 
  5176 ;; Registers used:
  5177 ;;		wreg, status,2, status,0
  5178 ;; Tracked objects:
  5179 ;;		On entry : 0/0
  5180 ;;		On exit  : 0/0
  5181 ;;		Unchanged: 0/0
  5182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5183 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5184 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5185 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5186 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5187 ;;Total ram usage:       15 bytes
  5188 ;; Hardware stack levels used:    1
  5189 ;; Hardware stack levels required when called:    5
  5190 ;; This function calls:
  5191 ;;		Nothing
  5192 ;; This function is called by:
  5193 ;;		_inv_handler
  5194 ;; This function uses a non-reentrant model
  5195 ;;
  5196                           
  5197                           
  5198                           ;psect for function ___aldiv
  5199  0F7E                     ___aldiv:	
  5200                           
  5201                           ;incstack = 0
  5202                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  5203  0F7E  0020               	movlb	0	; select bank0
  5204  0F7F  01B7               	clrf	___aldiv@sign
  5205  0F80  1FB0               	btfss	___aldiv@divisor+3,7
  5206  0F81  2F8F               	goto	l1123
  5207  0F82  09AD               	comf	___aldiv@divisor,f
  5208  0F83  09AE               	comf	___aldiv@divisor+1,f
  5209  0F84  09AF               	comf	___aldiv@divisor+2,f
  5210  0F85  09B0               	comf	___aldiv@divisor+3,f
  5211  0F86  0AAD               	incf	___aldiv@divisor,f
  5212  0F87  1903               	skipnz
  5213  0F88  0AAE               	incf	___aldiv@divisor+1,f
  5214  0F89  1903               	skipnz
  5215  0F8A  0AAF               	incf	___aldiv@divisor+2,f
  5216  0F8B  1903               	skipnz
  5217  0F8C  0AB0               	incf	___aldiv@divisor+3,f
  5218  0F8D  01B7               	clrf	___aldiv@sign
  5219  0F8E  0AB7               	incf	___aldiv@sign,f
  5220  0F8F                     l1123:	
  5221  0F8F  1FB4               	btfss	___aldiv@dividend+3,7
  5222  0F90  2FA0               	goto	l4381
  5223  0F91  09B1               	comf	___aldiv@dividend,f
  5224  0F92  09B2               	comf	___aldiv@dividend+1,f
  5225  0F93  09B3               	comf	___aldiv@dividend+2,f
  5226  0F94  09B4               	comf	___aldiv@dividend+3,f
  5227  0F95  0AB1               	incf	___aldiv@dividend,f
  5228  0F96  1903               	skipnz
  5229  0F97  0AB2               	incf	___aldiv@dividend+1,f
  5230  0F98  1903               	skipnz
  5231  0F99  0AB3               	incf	___aldiv@dividend+2,f
  5232  0F9A  1903               	skipnz
  5233  0F9B  0AB4               	incf	___aldiv@dividend+3,f
  5234  0F9C  3001               	movlw	1
  5235  0F9D  00B5               	movwf	??___aldiv
  5236  0F9E  0835               	movf	??___aldiv,w
  5237  0F9F  06B7               	xorwf	___aldiv@sign,f
  5238  0FA0                     l4381:	
  5239  0FA0  3000               	movlw	0
  5240  0FA1  00BB               	movwf	___aldiv@quotient+3
  5241  0FA2  3000               	movlw	0
  5242  0FA3  00BA               	movwf	___aldiv@quotient+2
  5243  0FA4  3000               	movlw	0
  5244  0FA5  00B9               	movwf	___aldiv@quotient+1
  5245  0FA6  3000               	movlw	0
  5246  0FA7  00B8               	movwf	___aldiv@quotient
  5247  0FA8  0830               	movf	___aldiv@divisor+3,w
  5248  0FA9  042F               	iorwf	___aldiv@divisor+2,w
  5249  0FAA  042E               	iorwf	___aldiv@divisor+1,w
  5250  0FAB  042D               	iorwf	___aldiv@divisor,w
  5251  0FAC  1903               	skipnz
  5252  0FAD  2FE9               	goto	l4403
  5253  0FAE  01B6               	clrf	___aldiv@counter
  5254  0FAF  0AB6               	incf	___aldiv@counter,f
  5255  0FB0                     l4389:	
  5256  0FB0  1BB0               	btfsc	___aldiv@divisor+3,7
  5257  0FB1  2FBE               	goto	l4391
  5258  0FB2  3001               	movlw	1
  5259  0FB3                     u3935:	
  5260  0FB3  35AD               	lslf	___aldiv@divisor,f
  5261  0FB4  0DAE               	rlf	___aldiv@divisor+1,f
  5262  0FB5  0DAF               	rlf	___aldiv@divisor+2,f
  5263  0FB6  0DB0               	rlf	___aldiv@divisor+3,f
  5264  0FB7  0B89               	decfsz	9,f
  5265  0FB8  2FB3               	goto	u3935
  5266  0FB9  3001               	movlw	1
  5267  0FBA  00B5               	movwf	??___aldiv
  5268  0FBB  0835               	movf	??___aldiv,w
  5269  0FBC  07B6               	addwf	___aldiv@counter,f
  5270  0FBD  2FB0               	goto	l4389
  5271  0FBE                     l4391:	
  5272  0FBE  3001               	movlw	1
  5273  0FBF                     u3955:	
  5274  0FBF  35B8               	lslf	___aldiv@quotient,f
  5275  0FC0  0DB9               	rlf	___aldiv@quotient+1,f
  5276  0FC1  0DBA               	rlf	___aldiv@quotient+2,f
  5277  0FC2  0DBB               	rlf	___aldiv@quotient+3,f
  5278  0FC3  0B89               	decfsz	9,f
  5279  0FC4  2FBF               	goto	u3955
  5280  0FC5  0830               	movf	___aldiv@divisor+3,w
  5281  0FC6  0234               	subwf	___aldiv@dividend+3,w
  5282  0FC7  1D03               	skipz
  5283  0FC8  2FD3               	goto	u3965
  5284  0FC9  082F               	movf	___aldiv@divisor+2,w
  5285  0FCA  0233               	subwf	___aldiv@dividend+2,w
  5286  0FCB  1D03               	skipz
  5287  0FCC  2FD3               	goto	u3965
  5288  0FCD  082E               	movf	___aldiv@divisor+1,w
  5289  0FCE  0232               	subwf	___aldiv@dividend+1,w
  5290  0FCF  1D03               	skipz
  5291  0FD0  2FD3               	goto	u3965
  5292  0FD1  082D               	movf	___aldiv@divisor,w
  5293  0FD2  0231               	subwf	___aldiv@dividend,w
  5294  0FD3                     u3965:	
  5295  0FD3  1C03               	skipc
  5296  0FD4  2FDE               	goto	l4399
  5297  0FD5  082D               	movf	___aldiv@divisor,w
  5298  0FD6  02B1               	subwf	___aldiv@dividend,f
  5299  0FD7  082E               	movf	___aldiv@divisor+1,w
  5300  0FD8  3BB2               	subwfb	___aldiv@dividend+1,f
  5301  0FD9  082F               	movf	___aldiv@divisor+2,w
  5302  0FDA  3BB3               	subwfb	___aldiv@dividend+2,f
  5303  0FDB  0830               	movf	___aldiv@divisor+3,w
  5304  0FDC  3BB4               	subwfb	___aldiv@dividend+3,f
  5305  0FDD  1438               	bsf	___aldiv@quotient,0
  5306  0FDE                     l4399:	
  5307  0FDE  3001               	movlw	1
  5308  0FDF                     u3975:	
  5309  0FDF  36B0               	lsrf	___aldiv@divisor+3,f
  5310  0FE0  0CAF               	rrf	___aldiv@divisor+2,f
  5311  0FE1  0CAE               	rrf	___aldiv@divisor+1,f
  5312  0FE2  0CAD               	rrf	___aldiv@divisor,f
  5313  0FE3  0B89               	decfsz	9,f
  5314  0FE4  2FDF               	goto	u3975
  5315  0FE5  3001               	movlw	1
  5316  0FE6  02B6               	subwf	___aldiv@counter,f
  5317  0FE7  1D03               	btfss	3,2
  5318  0FE8  2FBE               	goto	l4391
  5319  0FE9                     l4403:	
  5320  0FE9  0837               	movf	___aldiv@sign,w
  5321  0FEA  1903               	btfsc	3,2
  5322  0FEB  2FF7               	goto	l4407
  5323  0FEC  09B8               	comf	___aldiv@quotient,f
  5324  0FED  09B9               	comf	___aldiv@quotient+1,f
  5325  0FEE  09BA               	comf	___aldiv@quotient+2,f
  5326  0FEF  09BB               	comf	___aldiv@quotient+3,f
  5327  0FF0  0AB8               	incf	___aldiv@quotient,f
  5328  0FF1  1903               	skipnz
  5329  0FF2  0AB9               	incf	___aldiv@quotient+1,f
  5330  0FF3  1903               	skipnz
  5331  0FF4  0ABA               	incf	___aldiv@quotient+2,f
  5332  0FF5  1903               	skipnz
  5333  0FF6  0ABB               	incf	___aldiv@quotient+3,f
  5334  0FF7                     l4407:	
  5335  0FF7  083B               	movf	___aldiv@quotient+3,w
  5336  0FF8  00B0               	movwf	?___aldiv+3
  5337  0FF9  083A               	movf	___aldiv@quotient+2,w
  5338  0FFA  00AF               	movwf	?___aldiv+2
  5339  0FFB  0839               	movf	___aldiv@quotient+1,w
  5340  0FFC  00AE               	movwf	?___aldiv+1
  5341  0FFD  0838               	movf	___aldiv@quotient,w
  5342  0FFE  00AD               	movwf	?___aldiv
  5343  0FFF  0008               	return
  5344  1000                     __end_of___aldiv:	
  5345                           
  5346                           	psect	text15
  5347  0F20                     __ptext15:	
  5348 ;; *************** function _PROTOCOL_I2C_Send_int8_t *****************
  5349 ;; Defined at:
  5350 ;;		line 302 in file "protocol.c"
  5351 ;; Parameters:    Size  Location     Type
  5352 ;;  length          1    wreg     unsigned char 
  5353 ;;  pbuffer         1   35[BANK0 ] PTR char 
  5354 ;;		 -> PROTOCOL_Send_int8_t@pbuf(1), inv_handler@data(2), 
  5355 ;; Auto vars:     Size  Location     Type
  5356 ;;  length          1   38[BANK0 ] unsigned char 
  5357 ;; Return value:  Size  Location     Type
  5358 ;;                  1    wreg      void 
  5359 ;; Registers used:
  5360 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5361 ;; Tracked objects:
  5362 ;;		On entry : 0/0
  5363 ;;		On exit  : 0/0
  5364 ;;		Unchanged: 0/0
  5365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5366 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5367 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5368 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5369 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5370 ;;Total ram usage:        4 bytes
  5371 ;; Hardware stack levels used:    1
  5372 ;; Hardware stack levels required when called:    8
  5373 ;; This function calls:
  5374 ;;		_PROTOCOL_I2C_Set_TLV
  5375 ;;		_printf
  5376 ;; This function is called by:
  5377 ;;		_inv_handler
  5378 ;; This function uses a non-reentrant model
  5379 ;;
  5380                           
  5381                           
  5382                           ;psect for function _PROTOCOL_I2C_Send_int8_t
  5383  0F20                     _PROTOCOL_I2C_Send_int8_t:	
  5384                           
  5385                           ;incstack = 0
  5386                           ; Regs used in _PROTOCOL_I2C_Send_int8_t: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5387                           ;PROTOCOL_I2C_Send_int8_t@length stored from wreg
  5388  0F20  0020               	movlb	0	; select bank0
  5389  0F21  00C6               	movwf	PROTOCOL_I2C_Send_int8_t@length
  5390                           
  5391                           ;protocol.c: 303: if (backplane_slave_enabled) {
  5392  0F22  0021               	movlb	1	; select bank1
  5393  0F23  0834               	movf	_backplane_slave_enabled^(0+128),w
  5394  0F24  1903               	btfsc	3,2
  5395  0F25  2F4C               	goto	l4345
  5396                           
  5397                           ;protocol.c: 304: for (i=0; i<length; i++) {
  5398  0F26  0020               	movlb	0	; select bank0
  5399  0F27  01E5               	clrf	_i
  5400  0F28                     l4341:	
  5401  0F28  0846               	movf	PROTOCOL_I2C_Send_int8_t@length,w
  5402  0F29  0265               	subwf	_i,w
  5403  0F2A  1803               	btfsc	3,0
  5404  0F2B  2F40               	goto	l4343
  5405                           
  5406                           ;protocol.c: 305: sendbuf[i] = (uint8_t)pbuffer[i];
  5407  0F2C  0865               	movf	_i,w
  5408  0F2D  0743               	addwf	PROTOCOL_I2C_Send_int8_t@pbuffer,w
  5409  0F2E  00C4               	movwf	??_PROTOCOL_I2C_Send_int8_t
  5410  0F2F  0844               	movf	??_PROTOCOL_I2C_Send_int8_t,w
  5411  0F30  0086               	movwf	6
  5412  0F31  0187               	clrf	7
  5413  0F32  0801               	movf	1,w
  5414  0F33  00C5               	movwf	??_PROTOCOL_I2C_Send_int8_t+1
  5415  0F34  0865               	movf	_i,w
  5416  0F35  3E58               	addlw	(low (_sendbuf| (0+256)))& (0+255)
  5417  0F36  0086               	movwf	6
  5418  0F37  3001               	movlw	1	; select bank2/3
  5419  0F38  0087               	movwf	7
  5420  0F39  0845               	movf	??_PROTOCOL_I2C_Send_int8_t+1,w
  5421  0F3A  0081               	movwf	1
  5422  0F3B  3001               	movlw	1
  5423  0F3C  00C4               	movwf	??_PROTOCOL_I2C_Send_int8_t
  5424  0F3D  0844               	movf	??_PROTOCOL_I2C_Send_int8_t,w
  5425  0F3E  07E5               	addwf	_i,f
  5426  0F3F  2F28               	goto	l4341
  5427  0F40                     l4343:	
  5428                           
  5429                           ;protocol.c: 306: }
  5430                           ;protocol.c: 307: PROTOCOL_I2C_Set_TLV(0x02, length, &sendbuf[0]);
  5431  0F40  0846               	movf	PROTOCOL_I2C_Send_int8_t@length,w
  5432  0F41  00C4               	movwf	??_PROTOCOL_I2C_Send_int8_t
  5433  0F42  0844               	movf	??_PROTOCOL_I2C_Send_int8_t,w
  5434  0F43  00A1               	movwf	PROTOCOL_I2C_Set_TLV@length
  5435  0F44  3058               	movlw	low _sendbuf
  5436  0F45  00A2               	movwf	PROTOCOL_I2C_Set_TLV@pbuffer
  5437  0F46  3001               	movlw	high _sendbuf
  5438  0F47  00A3               	movwf	PROTOCOL_I2C_Set_TLV@pbuffer+1
  5439  0F48  3002               	movlw	2
  5440  0F49  318B  23E8         	fcall	_PROTOCOL_I2C_Set_TLV
  5441                           
  5442                           ;protocol.c: 308: } else {
  5443  0F4B  0008               	return
  5444  0F4C                     l4345:	
  5445                           
  5446                           ;protocol.c: 309: length--;
  5447  0F4C  3001               	movlw	1
  5448  0F4D  0020               	movlb	0	; select bank0
  5449  0F4E  02C6               	subwf	PROTOCOL_I2C_Send_int8_t@length,f
  5450                           
  5451                           ;protocol.c: 310: for (i=0; i<length; i++) printf("%d,", (int8_t)pbuffer[i]);
  5452  0F4F  01E5               	clrf	_i
  5453  0F50                     l4353:	
  5454  0F50  0846               	movf	PROTOCOL_I2C_Send_int8_t@length,w
  5455  0F51  0265               	subwf	_i,w
  5456  0F52  1803               	btfsc	3,0
  5457  0F53  2F6C               	goto	l4355
  5458  0F54  3062               	movlw	low (STR_22| (0+32768))
  5459  0F55  00AF               	movwf	printf@f
  5460  0F56  3087               	movlw	high (STR_22| (0+32768))
  5461  0F57  00B0               	movwf	printf@f+1
  5462  0F58  0865               	movf	_i,w
  5463  0F59  0743               	addwf	PROTOCOL_I2C_Send_int8_t@pbuffer,w
  5464  0F5A  00C4               	movwf	??_PROTOCOL_I2C_Send_int8_t
  5465  0F5B  0844               	movf	??_PROTOCOL_I2C_Send_int8_t,w
  5466  0F5C  0086               	movwf	6
  5467  0F5D  0187               	clrf	7
  5468  0F5E  0801               	movf	1,w
  5469  0F5F  00B1               	movwf	?_printf+2
  5470  0F60  01B2               	clrf	?_printf+3
  5471  0F61  1BB1               	btfsc	?_printf+2,7
  5472  0F62  03B2               	decf	?_printf+3,f
  5473  0F63  3180  2081  318F   	fcall	_printf
  5474  0F66  3001               	movlw	1
  5475  0F67  0020               	movlb	0	; select bank0
  5476  0F68  00C4               	movwf	??_PROTOCOL_I2C_Send_int8_t
  5477  0F69  0844               	movf	??_PROTOCOL_I2C_Send_int8_t,w
  5478  0F6A  07E5               	addwf	_i,f
  5479  0F6B  2F50               	goto	l4353
  5480  0F6C                     l4355:	
  5481                           
  5482                           ;protocol.c: 311: printf("%d\n", (int8_t)pbuffer[i]);
  5483  0F6C  30E9               	movlw	low ((STR_16+6)| (0+32768))
  5484  0F6D  00AF               	movwf	printf@f
  5485  0F6E  3086               	movlw	high ((STR_16+6)| (0+32768))
  5486  0F6F  00B0               	movwf	printf@f+1
  5487  0F70  0865               	movf	_i,w
  5488  0F71  0743               	addwf	PROTOCOL_I2C_Send_int8_t@pbuffer,w
  5489  0F72  00C4               	movwf	??_PROTOCOL_I2C_Send_int8_t
  5490  0F73  0844               	movf	??_PROTOCOL_I2C_Send_int8_t,w
  5491  0F74  0086               	movwf	6
  5492  0F75  0187               	clrf	7
  5493  0F76  0801               	movf	1,w
  5494  0F77  00B1               	movwf	?_printf+2
  5495  0F78  01B2               	clrf	?_printf+3
  5496  0F79  1BB1               	btfsc	?_printf+2,7
  5497  0F7A  03B2               	decf	?_printf+3,f
  5498  0F7B  3180  2081         	fcall	_printf
  5499  0F7D  0008               	return
  5500  0F7E                     __end_of_PROTOCOL_I2C_Send_int8_t:	
  5501                           
  5502                           	psect	text16
  5503  0081                     __ptext16:	
  5504 ;; *************** function _printf *****************
  5505 ;; Defined at:
  5506 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  5507 ;; Parameters:    Size  Location     Type
  5508 ;;  f               2   15[BANK0 ] PTR const unsigned char 
  5509 ;;		 -> STR_48(10), STR_47(9), STR_46(10), STR_45(9), 
  5510 ;;		 -> STR_44(4), STR_43(4), STR_42(4), STR_41(4), 
  5511 ;;		 -> STR_40(4), STR_39(4), STR_38(4), STR_37(4), 
  5512 ;;		 -> STR_36(14), STR_35(9), STR_34(10), STR_33(9), 
  5513 ;;		 -> STR_32(10), STR_31(9), STR_30(7), STR_29(4), 
  5514 ;;		 -> STR_28(4), STR_27(9), STR_26(4), STR_25(4), 
  5515 ;;		 -> STR_24(10), STR_23(4), STR_22(4), STR_21(8), 
  5516 ;;		 -> STR_20(4), STR_19(4), STR_18(9), STR_17(6), 
  5517 ;;		 -> STR_16(10), STR_13(10), STR_9(10), STR_5(10), 
  5518 ;;		 -> STR_3(5), 
  5519 ;; Auto vars:     Size  Location     Type
  5520 ;;  tmpval          4    0        struct .
  5521 ;;  width           2   32[BANK0 ] int 
  5522 ;;  len             2   29[BANK0 ] unsigned int 
  5523 ;;  val             2   27[BANK0 ] unsigned int 
  5524 ;;  cp              2   24[BANK0 ] PTR const unsigned char 
  5525 ;;		 -> STR_10(4), buf(48), STR_2(7), ROM(8192), 
  5526 ;;		 -> printf@c(1), STR_1(10), I2C2_ISR@i2c_address(2), 
  5527 ;;  c               1   34[BANK0 ] char 
  5528 ;;  flag            1   31[BANK0 ] unsigned char 
  5529 ;;  ap              1   26[BANK0 ] PTR void [1]
  5530 ;;		 -> ?_printf(2), 
  5531 ;;  prec            1   23[BANK0 ] char 
  5532 ;; Return value:  Size  Location     Type
  5533 ;;                  2   15[BANK0 ] int 
  5534 ;; Registers used:
  5535 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5536 ;; Tracked objects:
  5537 ;;		On entry : 0/0
  5538 ;;		On exit  : 0/0
  5539 ;;		Unchanged: 0/0
  5540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5541 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5542 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5543 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5544 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5545 ;;Total ram usage:       20 bytes
  5546 ;; Hardware stack levels used:    1
  5547 ;; Hardware stack levels required when called:    7
  5548 ;; This function calls:
  5549 ;;		___lwdiv
  5550 ;;		___lwmod
  5551 ;;		___wmul
  5552 ;;		_isdigit
  5553 ;;		_putch
  5554 ;; This function is called by:
  5555 ;;		_PROTOCOL_Loop
  5556 ;;		_PROTOCOL_I2C_Send_int8_t
  5557 ;; This function uses a non-reentrant model
  5558 ;;
  5559                           
  5560                           
  5561                           ;psect for function _printf
  5562  0081                     _printf:	
  5563                           
  5564                           ;doprnt.c: 466: va_list ap;
  5565                           ;doprnt.c: 499: signed char c;
  5566                           ;doprnt.c: 501: int width;
  5567                           ;doprnt.c: 506: signed char prec;
  5568                           ;doprnt.c: 508: unsigned char flag;
  5569                           ;doprnt.c: 523: union {
  5570                           ;doprnt.c: 524: unsigned long vd;
  5571                           ;doprnt.c: 525: double integ;
  5572                           ;doprnt.c: 526: } tmpval;
  5573                           ;doprnt.c: 528: unsigned int val;
  5574                           ;doprnt.c: 529: unsigned len;
  5575                           ;doprnt.c: 530: const char * cp;
  5576                           ;doprnt.c: 533: *ap = __va_start();
  5577                           
  5578                           ;incstack = 0
  5579                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5580  0081  3031               	movlw	(low ((?_printf| 0+2)))& (0+255)
  5581  0082  0020               	movlb	0	; select bank0
  5582  0083  00B3               	movwf	??_printf
  5583  0084  0833               	movf	??_printf,w
  5584  0085  00BA               	movwf	printf@ap
  5585  0086                     l4265:	
  5586                           ;doprnt.c: 536: while(c = *f++) {
  5587                           
  5588  0086  0020               	movlb	0	; select bank0
  5589  0087  0830               	movf	printf@f+1,w
  5590  0088  00B4               	movwf	??_printf+1
  5591  0089  082F               	movf	printf@f,w
  5592  008A  00B3               	movwf	??_printf
  5593  008B  0AAF               	incf	printf@f,f
  5594  008C  1903               	skipnz
  5595  008D  0AB0               	incf	printf@f+1,f
  5596  008E  0833               	movf	??_printf,w
  5597  008F  0084               	movwf	4
  5598  0090  0834               	movf	??_printf+1,w
  5599  0091  0085               	movwf	5
  5600  0092  0800               	movf	0,w	;code access
  5601  0093  00B5               	movwf	??_printf+2
  5602  0094  0835               	movf	??_printf+2,w
  5603  0095  00C2               	movwf	printf@c
  5604  0096  0842               	movf	printf@c,w
  5605  0097  1903               	btfsc	3,2
  5606  0098  0008               	return
  5607                           
  5608                           ;doprnt.c: 538: if(c != '%')
  5609  0099  3025               	movlw	37
  5610  009A  0642               	xorwf	printf@c,w
  5611  009B  1903               	btfsc	3,2
  5612  009C  28A2               	goto	l4141
  5613                           
  5614                           ;doprnt.c: 540: {
  5615                           ;doprnt.c: 541: (putch(c) );
  5616  009D  0842               	movf	printf@c,w
  5617  009E  318A  222B  3180   	fcall	_putch
  5618                           
  5619                           ;doprnt.c: 542: continue;
  5620  00A1  2886               	goto	l4265
  5621  00A2                     l4141:	
  5622                           
  5623                           ;doprnt.c: 543: }
  5624                           ;doprnt.c: 546: width = 0;
  5625  00A2  0020               	movlb	0	; select bank0
  5626  00A3  01C0               	clrf	printf@width
  5627  00A4  01C1               	clrf	printf@width+1
  5628                           
  5629                           ;doprnt.c: 548: flag = 0;
  5630  00A5  01BF               	clrf	printf@flag
  5631                           
  5632                           ;doprnt.c: 551: switch(*f) {
  5633                           
  5634                           ;doprnt.c: 550: for(;;) {
  5635  00A6  28AC               	goto	l4147
  5636  00A7                     l565:	
  5637                           ;doprnt.c: 579: case '0':
  5638                           
  5639                           
  5640                           ;doprnt.c: 580: flag |= 0x04;
  5641  00A7  153F               	bsf	printf@flag,2
  5642                           
  5643                           ;doprnt.c: 581: f++;
  5644  00A8  3001               	movlw	1
  5645  00A9  07AF               	addwf	printf@f,f
  5646  00AA  3000               	movlw	0
  5647  00AB  3DB0               	addwfc	printf@f+1,f
  5648  00AC                     l4147:	
  5649                           ;doprnt.c: 584: }
  5650                           
  5651                           ;doprnt.c: 582: continue;
  5652                           
  5653  00AC  082F               	movf	printf@f,w
  5654  00AD  0084               	movwf	4
  5655  00AE  0830               	movf	printf@f+1,w
  5656  00AF  0085               	movwf	5
  5657  00B0  0800               	movf	0,w	;code access
  5658                           
  5659                           ; Switch size 1, requested type "space"
  5660                           ; Number of cases is 1, Range of values is 48 to 48
  5661                           ; switch strategies available:
  5662                           ; Name         Instructions Cycles
  5663                           ; simple_byte            4     3 (average)
  5664                           ; direct_byte           11     9 (fixed)
  5665                           ; jumptable            263     9 (fixed)
  5666                           ;	Chosen strategy is simple_byte
  5667  00B1  3A30               	xorlw	48	; case 48
  5668  00B2  1903               	skipnz
  5669  00B3  28A7               	goto	l565
  5670  00B4  28B5               	goto	l4149
  5671  00B5                     l4149:	
  5672                           ;doprnt.c: 586: }
  5673                           
  5674                           ;doprnt.c: 585: break;
  5675                           
  5676                           
  5677                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5678  00B5  082F               	movf	printf@f,w
  5679  00B6  0084               	movwf	4
  5680  00B7  0830               	movf	printf@f+1,w
  5681  00B8  0085               	movwf	5
  5682  00B9  0800               	movf	0,w	;code access
  5683  00BA  318A  226E  3180   	fcall	_isdigit
  5684  00BD  1C03               	btfss	3,0
  5685  00BE  2956               	goto	l4197
  5686                           
  5687                           ;doprnt.c: 598: width = 0;
  5688  00BF  0020               	movlb	0	; select bank0
  5689  00C0  01C0               	clrf	printf@width
  5690  00C1  01C1               	clrf	printf@width+1
  5691  00C2                     l4153:	
  5692                           ;doprnt.c: 599: do {
  5693                           
  5694                           
  5695                           ;doprnt.c: 600: width *= 10;
  5696  00C2  300A               	movlw	10
  5697  00C3  0020               	movlb	0	; select bank0
  5698  00C4  00A1               	movwf	___wmul@multiplier
  5699  00C5  3000               	movlw	0
  5700  00C6  00A2               	movwf	___wmul@multiplier+1
  5701  00C7  0841               	movf	printf@width+1,w
  5702  00C8  00A4               	movwf	___wmul@multiplicand+1
  5703  00C9  0840               	movf	printf@width,w
  5704  00CA  00A3               	movwf	___wmul@multiplicand
  5705  00CB  318B  2330  3180   	fcall	___wmul
  5706  00CE  0020               	movlb	0	; select bank0
  5707  00CF  0822               	movf	?___wmul+1,w
  5708  00D0  00C1               	movwf	printf@width+1
  5709  00D1  0821               	movf	?___wmul,w
  5710  00D2  00C0               	movwf	printf@width
  5711                           
  5712                           ;doprnt.c: 601: width += *f++ - '0';
  5713  00D3  082F               	movf	printf@f,w
  5714  00D4  0084               	movwf	4
  5715  00D5  0830               	movf	printf@f+1,w
  5716  00D6  0085               	movwf	5
  5717  00D7  0800               	movf	0,w	;code access
  5718  00D8  3ED0               	addlw	208
  5719  00D9  00B3               	movwf	??_printf
  5720  00DA  30FF               	movlw	255
  5721  00DB  1803               	skipnc
  5722  00DC  3000               	movlw	0
  5723  00DD  00B4               	movwf	??_printf+1
  5724  00DE  0833               	movf	??_printf,w
  5725  00DF  07C0               	addwf	printf@width,f
  5726  00E0  0834               	movf	??_printf+1,w
  5727  00E1  3DC1               	addwfc	printf@width+1,f
  5728  00E2  3001               	movlw	1
  5729  00E3  07AF               	addwf	printf@f,f
  5730  00E4  3000               	movlw	0
  5731  00E5  3DB0               	addwfc	printf@f+1,f
  5732                           
  5733                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5734  00E6  082F               	movf	printf@f,w
  5735  00E7  0084               	movwf	4
  5736  00E8  0830               	movf	printf@f+1,w
  5737  00E9  0085               	movwf	5
  5738  00EA  0800               	movf	0,w	;code access
  5739  00EB  318A  226E  3180   	fcall	_isdigit
  5740  00EE  1C03               	btfss	3,0
  5741  00EF  2956               	goto	l4197
  5742  00F0  28C2               	goto	l4153
  5743  00F1                     l4161:	
  5744                           ;doprnt.c: 728: case 's':
  5745                           
  5746                           ;doprnt.c: 698: case 'i':
  5747                           ;doprnt.c: 699: break;
  5748                           
  5749                           ;doprnt.c: 697: case 'd':
  5750                           
  5751                           ;doprnt.c: 638: goto alldone;
  5752                           
  5753                           ;doprnt.c: 637: case 0:
  5754                           
  5755                           ;doprnt.c: 608: }
  5756                           ;doprnt.c: 635: switch(c = *f++) {
  5757                           
  5758                           
  5759                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  5760  00F1  0020               	movlb	0	; select bank0
  5761  00F2  083A               	movf	printf@ap,w
  5762  00F3  0086               	movwf	6
  5763  00F4  0187               	clrf	7
  5764  00F5  3F40               	moviw [0]fsr1
  5765  00F6  00B8               	movwf	printf@cp
  5766  00F7  3F41               	moviw [1]fsr1
  5767  00F8  00B9               	movwf	printf@cp+1
  5768  00F9  3002               	movlw	2
  5769  00FA  00B3               	movwf	??_printf
  5770  00FB  0833               	movf	??_printf,w
  5771  00FC  07BA               	addwf	printf@ap,f
  5772                           
  5773                           ;doprnt.c: 740: if(!cp)
  5774  00FD  0838               	movf	printf@cp,w
  5775  00FE  0439               	iorwf	printf@cp+1,w
  5776  00FF  1D03               	btfss	3,2
  5777  0100  2905               	goto	l4169
  5778                           
  5779                           ;doprnt.c: 741: cp = "(null)";
  5780  0101  304C               	movlw	low (STR_2| (0+32768))
  5781  0102  00B8               	movwf	printf@cp
  5782  0103  3087               	movlw	high (STR_2| (0+32768))
  5783  0104  00B9               	movwf	printf@cp+1
  5784  0105                     l4169:	
  5785                           
  5786                           ;doprnt.c: 745: len = 0;
  5787  0105  01BD               	clrf	printf@len
  5788  0106  01BE               	clrf	printf@len+1
  5789  0107                     l4173:	
  5790                           ;doprnt.c: 746: while(cp[len])
  5791                           
  5792  0107  0838               	movf	printf@cp,w
  5793  0108  073D               	addwf	printf@len,w
  5794  0109  0084               	movwf	4
  5795  010A  0839               	movf	printf@cp+1,w
  5796  010B  3D3E               	addwfc	printf@len+1,w
  5797  010C  0085               	movwf	5
  5798  010D  0012               	moviw fsr0++
  5799  010E  1903               	btfsc	3,2
  5800  010F  2915               	goto	l4175
  5801                           
  5802                           ;doprnt.c: 747: len++;
  5803  0110  3001               	movlw	1
  5804  0111  07BD               	addwf	printf@len,f
  5805  0112  3000               	movlw	0
  5806  0113  3DBE               	addwfc	printf@len+1,f
  5807  0114  2907               	goto	l4173
  5808  0115                     l4175:	
  5809                           ;doprnt.c: 750: dostring:
  5810                           
  5811                           
  5812                           ;doprnt.c: 757: if(width > len)
  5813  0115  0841               	movf	printf@width+1,w
  5814  0116  023E               	subwf	printf@len+1,w
  5815  0117  1D03               	skipz
  5816  0118  291B               	goto	u3555
  5817  0119  0840               	movf	printf@width,w
  5818  011A  023D               	subwf	printf@len,w
  5819  011B                     u3555:	
  5820  011B  1803               	skipnc
  5821  011C  2922               	goto	l4179
  5822                           
  5823                           ;doprnt.c: 758: width -= len;
  5824  011D  083D               	movf	printf@len,w
  5825  011E  02C0               	subwf	printf@width,f
  5826  011F  083E               	movf	printf@len+1,w
  5827  0120  3BC1               	subwfb	printf@width+1,f
  5828  0121  2924               	goto	l4183
  5829  0122                     l4179:	
  5830                           
  5831                           ;doprnt.c: 759: else
  5832                           ;doprnt.c: 760: width = 0;
  5833  0122  01C0               	clrf	printf@width
  5834  0123  01C1               	clrf	printf@width+1
  5835  0124                     l4183:	
  5836                           ;doprnt.c: 764: while(width--)
  5837                           
  5838  0124  30FF               	movlw	255
  5839  0125  0020               	movlb	0	; select bank0
  5840  0126  07C0               	addwf	printf@width,f
  5841  0127  30FF               	movlw	255
  5842  0128  3DC1               	addwfc	printf@width+1,f
  5843  0129  0A40               	incf	printf@width,w
  5844  012A  1903               	btfsc	3,2
  5845  012B  0A41               	incf	printf@width+1,w
  5846  012C  1903               	btfsc	3,2
  5847  012D  2940               	goto	l4189
  5848                           
  5849                           ;doprnt.c: 765: (putch(' ') );
  5850  012E  3020               	movlw	32
  5851  012F  318A  222B  3180   	fcall	_putch
  5852  0132  2924               	goto	l4183
  5853  0133                     l4185:	
  5854                           ;doprnt.c: 767: while(len--)
  5855                           
  5856                           
  5857                           ;doprnt.c: 768: (putch(*cp++) );
  5858  0133  0838               	movf	printf@cp,w
  5859  0134  0084               	movwf	4
  5860  0135  0839               	movf	printf@cp+1,w
  5861  0136  0085               	movwf	5
  5862  0137  0800               	movf	0,w	;code access
  5863  0138  318A  222B  3180   	fcall	_putch
  5864  013B  3001               	movlw	1
  5865  013C  0020               	movlb	0	; select bank0
  5866  013D  07B8               	addwf	printf@cp,f
  5867  013E  3000               	movlw	0
  5868  013F  3DB9               	addwfc	printf@cp+1,f
  5869  0140                     l4189:	
  5870  0140  3001               	movlw	1
  5871  0141  02BD               	subwf	printf@len,f
  5872  0142  3000               	movlw	0
  5873  0143  3BBE               	subwfb	printf@len+1,f
  5874  0144  0A3D               	incf	printf@len,w
  5875  0145  1D03               	skipz
  5876  0146  2933               	goto	l4185
  5877  0147  0A3E               	incf	printf@len+1,w
  5878  0148  1903               	btfsc	3,2
  5879  0149  2886               	goto	l4265
  5880  014A  2933               	goto	l4185
  5881  014B                     l4191:	
  5882                           ;doprnt.c: 802: default:
  5883                           
  5884                           ;doprnt.c: 774: continue;
  5885                           
  5886                           
  5887                           ;doprnt.c: 805: cp = (char *)&c;
  5888  014B  3042               	movlw	low printf@c
  5889  014C  00B8               	movwf	printf@cp
  5890  014D  3000               	movlw	high printf@c
  5891  014E  00B9               	movwf	printf@cp+1
  5892                           
  5893                           ;doprnt.c: 806: len = 1;
  5894  014F  3001               	movlw	1
  5895  0150  00BD               	movwf	printf@len
  5896  0151  3000               	movlw	0
  5897  0152  00BE               	movwf	printf@len+1
  5898                           
  5899                           ;doprnt.c: 807: goto dostring;
  5900  0153  2915               	goto	l4175
  5901  0154                     l593:	
  5902                           ;doprnt.c: 817: case 'u':
  5903                           
  5904                           
  5905                           ;doprnt.c: 818: flag |= 0x40;
  5906  0154  173F               	bsf	printf@flag,6
  5907                           
  5908                           ;doprnt.c: 822: }
  5909                           
  5910                           ;doprnt.c: 819: break;
  5911  0155  2974               	goto	l577
  5912  0156                     l4197:	
  5913  0156  0020               	movlb	0	; select bank0
  5914  0157  0830               	movf	printf@f+1,w
  5915  0158  00B4               	movwf	??_printf+1
  5916  0159  082F               	movf	printf@f,w
  5917  015A  00B3               	movwf	??_printf
  5918  015B  0AAF               	incf	printf@f,f
  5919  015C  1903               	skipnz
  5920  015D  0AB0               	incf	printf@f+1,f
  5921  015E  0833               	movf	??_printf,w
  5922  015F  0084               	movwf	4
  5923  0160  0834               	movf	??_printf+1,w
  5924  0161  0085               	movwf	5
  5925  0162  0800               	movf	0,w	;code access
  5926  0163  00C2               	movwf	printf@c
  5927                           
  5928                           ; Switch size 1, requested type "space"
  5929                           ; Number of cases is 5, Range of values is 0 to 117
  5930                           ; switch strategies available:
  5931                           ; Name         Instructions Cycles
  5932                           ; simple_byte           16     9 (average)
  5933                           ; direct_byte          242     6 (fixed)
  5934                           ; jumptable            260     6 (fixed)
  5935                           ;	Chosen strategy is simple_byte
  5936  0164  3A00               	xorlw	0	; case 0
  5937  0165  1903               	skipnz
  5938  0166  2A55               	goto	l617
  5939  0167  3A64               	xorlw	100	; case 100
  5940  0168  1903               	skipnz
  5941  0169  2974               	goto	l577
  5942  016A  3A0D               	xorlw	13	; case 105
  5943  016B  1903               	skipnz
  5944  016C  2974               	goto	l577
  5945  016D  3A1A               	xorlw	26	; case 115
  5946  016E  1903               	skipnz
  5947  016F  28F1               	goto	l4161
  5948  0170  3A06               	xorlw	6	; case 117
  5949  0171  1903               	skipnz
  5950  0172  2954               	goto	l593
  5951  0173  294B               	goto	l4191
  5952  0174                     l577:	
  5953                           
  5954                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  5955  0174  0020               	movlb	0	; select bank0
  5956  0175  1B3F               	btfsc	printf@flag,6
  5957  0176  298E               	goto	l4209
  5958                           
  5959                           ;doprnt.c: 1253: {
  5960                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5961  0177  083A               	movf	printf@ap,w
  5962  0178  0086               	movwf	6
  5963  0179  0187               	clrf	7
  5964  017A  3F40               	moviw [0]fsr1
  5965  017B  00BB               	movwf	printf@val
  5966  017C  3F41               	moviw [1]fsr1
  5967  017D  00BC               	movwf	printf@val+1
  5968  017E  3002               	movlw	2
  5969  017F  00B3               	movwf	??_printf
  5970  0180  0833               	movf	??_printf,w
  5971  0181  07BA               	addwf	printf@ap,f
  5972                           
  5973                           ;doprnt.c: 1261: if((int)val < 0) {
  5974  0182  1FBC               	btfss	printf@val+1,7
  5975  0183  2999               	goto	l4213
  5976                           
  5977                           ;doprnt.c: 1262: flag |= 0x03;
  5978  0184  3003               	movlw	3
  5979  0185  00B3               	movwf	??_printf
  5980  0186  0833               	movf	??_printf,w
  5981  0187  04BF               	iorwf	printf@flag,f
  5982                           
  5983                           ;doprnt.c: 1263: val = -val;
  5984  0188  09BB               	comf	printf@val,f
  5985  0189  09BC               	comf	printf@val+1,f
  5986  018A  0ABB               	incf	printf@val,f
  5987  018B  1903               	skipnz
  5988  018C  0ABC               	incf	printf@val+1,f
  5989                           
  5990                           ;doprnt.c: 1264: }
  5991                           ;doprnt.c: 1266: }
  5992  018D  2999               	goto	l4213
  5993  018E                     l4209:	
  5994                           
  5995                           ;doprnt.c: 1268: else
  5996                           ;doprnt.c: 1273: {
  5997                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5998  018E  083A               	movf	printf@ap,w
  5999  018F  0086               	movwf	6
  6000  0190  0187               	clrf	7
  6001  0191  3F40               	moviw [0]fsr1
  6002  0192  00BB               	movwf	printf@val
  6003  0193  3F41               	moviw [1]fsr1
  6004  0194  00BC               	movwf	printf@val+1
  6005  0195  3002               	movlw	2
  6006  0196  00B3               	movwf	??_printf
  6007  0197  0833               	movf	??_printf,w
  6008  0198  07BA               	addwf	printf@ap,f
  6009  0199                     l4213:	
  6010                           
  6011                           ;doprnt.c: 1287: }
  6012                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6013  0199  01C2               	clrf	printf@c
  6014  019A  0AC2               	incf	printf@c,f
  6015  019B  3005               	movlw	5
  6016  019C  0642               	xorwf	printf@c,w
  6017  019D  1903               	btfsc	3,2
  6018  019E  29BE               	goto	l4225
  6019  019F                     l4219:	
  6020                           
  6021                           ;doprnt.c: 1306: if(val < dpowers[c])
  6022  019F  0842               	movf	printf@c,w
  6023  01A0  00B3               	movwf	??_printf
  6024  01A1  01B4               	clrf	??_printf+1
  6025  01A2  35B3               	lslf	??_printf,f
  6026  01A3  0DB4               	rlf	??_printf+1,f
  6027  01A4  30C9               	movlw	low (_dpowers| (0+32768))
  6028  01A5  0733               	addwf	??_printf,w
  6029  01A6  0084               	movwf	4
  6030  01A7  3086               	movlw	high (_dpowers| (0+32768))
  6031  01A8  3D34               	addwfc	??_printf+1,w
  6032  01A9  0085               	movwf	5
  6033  01AA  3F00               	moviw [0]fsr0
  6034  01AB  00B5               	movwf	??_printf+2
  6035  01AC  3F01               	moviw [1]fsr0
  6036  01AD  00B6               	movwf	??_printf+3
  6037  01AE  0836               	movf	??_printf+3,w
  6038  01AF  023C               	subwf	printf@val+1,w
  6039  01B0  1D03               	skipz
  6040  01B1  29B4               	goto	u3615
  6041  01B2  0835               	movf	??_printf+2,w
  6042  01B3  023B               	subwf	printf@val,w
  6043  01B4                     u3615:	
  6044  01B4  1C03               	btfss	3,0
  6045  01B5  29BE               	goto	l4225
  6046                           
  6047                           ;doprnt.c: 1307: break;
  6048  01B6  3001               	movlw	1
  6049  01B7  00B3               	movwf	??_printf
  6050  01B8  0833               	movf	??_printf,w
  6051  01B9  07C2               	addwf	printf@c,f
  6052  01BA  3005               	movlw	5
  6053  01BB  0642               	xorwf	printf@c,w
  6054  01BC  1D03               	btfss	3,2
  6055  01BD  299F               	goto	l4219
  6056  01BE                     l4225:	
  6057                           
  6058                           ;doprnt.c: 1345: if(width && flag & 0x03)
  6059  01BE  0840               	movf	printf@width,w
  6060  01BF  0441               	iorwf	printf@width+1,w
  6061  01C0  1903               	btfsc	3,2
  6062  01C1  29CA               	goto	l600
  6063  01C2  083F               	movf	printf@flag,w
  6064  01C3  3903               	andlw	3
  6065  01C4  1903               	btfsc	3,2
  6066  01C5  29CA               	goto	l600
  6067                           
  6068                           ;doprnt.c: 1346: width--;
  6069  01C6  30FF               	movlw	255
  6070  01C7  07C0               	addwf	printf@width,f
  6071  01C8  30FF               	movlw	255
  6072  01C9  3DC1               	addwfc	printf@width+1,f
  6073  01CA                     l600:	
  6074                           
  6075                           ;doprnt.c: 1381: if(width > c)
  6076  01CA  0842               	movf	printf@c,w
  6077  01CB  00B3               	movwf	??_printf
  6078  01CC  01B4               	clrf	??_printf+1
  6079  01CD  1BB3               	btfsc	??_printf,7
  6080  01CE  03B4               	decf	??_printf+1,f
  6081  01CF  0834               	movf	??_printf+1,w
  6082  01D0  3A80               	xorlw	128
  6083  01D1  00B5               	movwf	??_printf+2
  6084  01D2  0841               	movf	printf@width+1,w
  6085  01D3  3A80               	xorlw	128
  6086  01D4  0235               	subwf	??_printf+2,w
  6087  01D5  1D03               	skipz
  6088  01D6  29D9               	goto	u3655
  6089  01D7  0840               	movf	printf@width,w
  6090  01D8  0233               	subwf	??_printf,w
  6091  01D9                     u3655:	
  6092  01D9  1803               	skipnc
  6093  01DA  29E6               	goto	l4233
  6094                           
  6095                           ;doprnt.c: 1382: width -= c;
  6096  01DB  0020               	movlb	0	; select bank0
  6097  01DC  0842               	movf	printf@c,w
  6098  01DD  00B3               	movwf	??_printf
  6099  01DE  01B4               	clrf	??_printf+1
  6100  01DF  1BB3               	btfsc	??_printf,7
  6101  01E0  03B4               	decf	??_printf+1,f
  6102  01E1  0833               	movf	??_printf,w
  6103  01E2  02C0               	subwf	printf@width,f
  6104  01E3  0834               	movf	??_printf+1,w
  6105  01E4  3BC1               	subwfb	printf@width+1,f
  6106  01E5  29E9               	goto	l4235
  6107  01E6                     l4233:	
  6108                           
  6109                           ;doprnt.c: 1383: else
  6110                           ;doprnt.c: 1384: width = 0;
  6111  01E6  0020               	movlb	0	; select bank0
  6112  01E7  01C0               	clrf	printf@width
  6113  01E8  01C1               	clrf	printf@width+1
  6114  01E9                     l4235:	
  6115                           
  6116                           ;doprnt.c: 1387: if(flag & 0x04) {
  6117  01E9  1D3F               	btfss	printf@flag,2
  6118  01EA  2A02               	goto	l4247
  6119                           
  6120                           ;doprnt.c: 1392: if(flag & 0x03)
  6121  01EB  083F               	movf	printf@flag,w
  6122  01EC  3903               	andlw	3
  6123  01ED  1903               	btfsc	3,2
  6124  01EE  29F3               	goto	l4241
  6125                           
  6126                           ;doprnt.c: 1393: (putch('-') );
  6127  01EF  302D               	movlw	45
  6128  01F0  318A  222B  3180   	fcall	_putch
  6129  01F3                     l4241:	
  6130                           
  6131                           ;doprnt.c: 1415: if(width)
  6132  01F3  0020               	movlb	0	; select bank0
  6133  01F4                     L2:	
  6134  01F4  0840               	movf	printf@width,w
  6135  01F5  0441               	iorwf	printf@width+1,w
  6136  01F6  1903               	btfsc	3,2
  6137  01F7  2A1B               	goto	l4257
  6138                           
  6139                           ;doprnt.c: 1417: (putch('0') );
  6140                           
  6141                           ;doprnt.c: 1416: do
  6142  01F8  3030               	movlw	48
  6143  01F9  318A  222B  3180   	fcall	_putch
  6144                           
  6145                           ;doprnt.c: 1418: while(--width);
  6146  01FC  30FF               	movlw	255
  6147  01FD  0020               	movlb	0	; select bank0
  6148  01FE  07C0               	addwf	printf@width,f
  6149  01FF  30FF               	movlw	255
  6150  0200  3DC1               	addwfc	printf@width+1,f
  6151  0201  29F4               	goto	L2
  6152  0202                     l4247:	
  6153                           ;doprnt.c: 1420: } else
  6154                           
  6155                           
  6156                           ;doprnt.c: 1422: {
  6157                           ;doprnt.c: 1424: if(width
  6158                           ;doprnt.c: 1428: )
  6159  0202  0840               	movf	printf@width,w
  6160  0203  0441               	iorwf	printf@width+1,w
  6161  0204  1903               	btfsc	3,2
  6162  0205  2A13               	goto	l4253
  6163  0206                     l4249:	
  6164                           ;doprnt.c: 1429: do
  6165                           
  6166                           
  6167                           ;doprnt.c: 1430: (putch(' ') );
  6168  0206  3020               	movlw	32
  6169  0207  318A  222B  3180   	fcall	_putch
  6170                           
  6171                           ;doprnt.c: 1431: while(--width);
  6172  020A  30FF               	movlw	255
  6173  020B  0020               	movlb	0	; select bank0
  6174  020C  07C0               	addwf	printf@width,f
  6175  020D  30FF               	movlw	255
  6176  020E  3DC1               	addwfc	printf@width+1,f
  6177  020F  0840               	movf	printf@width,w
  6178  0210  0441               	iorwf	printf@width+1,w
  6179  0211  1D03               	btfss	3,2
  6180  0212  2A06               	goto	l4249
  6181  0213                     l4253:	
  6182                           
  6183                           ;doprnt.c: 1438: if(flag & 0x03)
  6184  0213  083F               	movf	printf@flag,w
  6185  0214  3903               	andlw	3
  6186  0215  1903               	btfsc	3,2
  6187  0216  2A1B               	goto	l4257
  6188                           
  6189                           ;doprnt.c: 1439: (putch('-') );
  6190  0217  302D               	movlw	45
  6191  0218  318A  222B  3180   	fcall	_putch
  6192  021B                     l4257:	
  6193                           
  6194                           ;doprnt.c: 1469: }
  6195                           ;doprnt.c: 1472: prec = c;
  6196  021B  0020               	movlb	0	; select bank0
  6197  021C  0842               	movf	printf@c,w
  6198  021D  00B3               	movwf	??_printf
  6199  021E  0833               	movf	??_printf,w
  6200  021F  00B7               	movwf	printf@prec
  6201  0220                     l4263:	
  6202                           ;doprnt.c: 1474: while(prec--) {
  6203                           
  6204  0220  30FF               	movlw	255
  6205  0221  0020               	movlb	0	; select bank0
  6206  0222  00B3               	movwf	??_printf
  6207  0223  0833               	movf	??_printf,w
  6208  0224  07B7               	addwf	printf@prec,f
  6209  0225  0A37               	incf	printf@prec,w
  6210  0226  1903               	btfsc	3,2
  6211  0227  2886               	goto	l4265
  6212                           
  6213                           ;doprnt.c: 1478: {
  6214                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6215  0228  300A               	movlw	10
  6216  0229  00A9               	movwf	___lwmod@divisor
  6217  022A  3000               	movlw	0
  6218  022B  00AA               	movwf	___lwmod@divisor+1
  6219  022C  0837               	movf	printf@prec,w
  6220  022D  00B3               	movwf	??_printf
  6221  022E  01B4               	clrf	??_printf+1
  6222  022F  35B3               	lslf	??_printf,f
  6223  0230  0DB4               	rlf	??_printf+1,f
  6224  0231  30C9               	movlw	low (_dpowers| (0+32768))
  6225  0232  0733               	addwf	??_printf,w
  6226  0233  0084               	movwf	4
  6227  0234  3086               	movlw	high (_dpowers| (0+32768))
  6228  0235  3D34               	addwfc	??_printf+1,w
  6229  0236  0085               	movwf	5
  6230  0237  3F00               	moviw [0]fsr0
  6231  0238  00A1               	movwf	___lwdiv@divisor
  6232  0239  3F01               	moviw [1]fsr0
  6233  023A  00A2               	movwf	___lwdiv@divisor+1
  6234  023B  083C               	movf	printf@val+1,w
  6235  023C  00A4               	movwf	___lwdiv@dividend+1
  6236  023D  083B               	movf	printf@val,w
  6237  023E  00A3               	movwf	___lwdiv@dividend
  6238  023F  318D  25CE  3180   	fcall	___lwdiv
  6239  0242  0020               	movlb	0	; select bank0
  6240  0243  0822               	movf	?___lwdiv+1,w
  6241  0244  00AC               	movwf	___lwmod@dividend+1
  6242  0245  0821               	movf	?___lwdiv,w
  6243  0246  00AB               	movwf	___lwmod@dividend
  6244  0247  318D  2543  3180   	fcall	___lwmod
  6245  024A  0020               	movlb	0	; select bank0
  6246  024B  0829               	movf	?___lwmod,w
  6247  024C  3E30               	addlw	48
  6248  024D  00B5               	movwf	??_printf+2
  6249  024E  0835               	movf	??_printf+2,w
  6250  024F  00C2               	movwf	printf@c
  6251                           
  6252                           ;doprnt.c: 1523: }
  6253                           ;doprnt.c: 1524: (putch(c) );
  6254  0250  0842               	movf	printf@c,w
  6255  0251  318A  222B  3180   	fcall	_putch
  6256  0254  2A20               	goto	l4263
  6257  0255                     l617:	
  6258                           ;doprnt.c: 1540: return 0;
  6259                           ;	Return value of _printf is never used
  6260                           
  6261                           ;doprnt.c: 1525: }
  6262                           ;doprnt.c: 1533: }
  6263                           ;doprnt.c: 1535: alldone:
  6264                           
  6265  0255  0008               	return
  6266  0256                     __end_of_printf:	
  6267                           
  6268                           	psect	text17
  6269  0A2B                     __ptext17:	
  6270 ;; *************** function _putch *****************
  6271 ;; Defined at:
  6272 ;;		line 160 in file "mcc_generated_files/eusart.c"
  6273 ;; Parameters:    Size  Location     Type
  6274 ;;  txData          1    wreg     unsigned char 
  6275 ;; Auto vars:     Size  Location     Type
  6276 ;;  txData          1    3[BANK0 ] unsigned char 
  6277 ;; Return value:  Size  Location     Type
  6278 ;;                  1    wreg      void 
  6279 ;; Registers used:
  6280 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6281 ;; Tracked objects:
  6282 ;;		On entry : 0/0
  6283 ;;		On exit  : 0/0
  6284 ;;		Unchanged: 0/0
  6285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6287 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6289 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6290 ;;Total ram usage:        1 bytes
  6291 ;; Hardware stack levels used:    1
  6292 ;; Hardware stack levels required when called:    6
  6293 ;; This function calls:
  6294 ;;		_EUSART_Write
  6295 ;; This function is called by:
  6296 ;;		_printf
  6297 ;; This function uses a non-reentrant model
  6298 ;;
  6299                           
  6300                           
  6301                           ;psect for function _putch
  6302  0A2B                     _putch:	
  6303                           
  6304                           ;incstack = 0
  6305                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6306                           ;putch@txData stored from wreg
  6307  0A2B  0020               	movlb	0	; select bank0
  6308  0A2C  00A3               	movwf	putch@txData
  6309                           
  6310                           ;eusart.c: 162: EUSART_Write(txData);
  6311  0A2D  0823               	movf	putch@txData,w
  6312  0A2E  318C  242D         	fcall	_EUSART_Write
  6313  0A30  0008               	return
  6314  0A31                     __end_of_putch:	
  6315                           
  6316                           	psect	text18
  6317  0C2D                     __ptext18:	
  6318 ;; *************** function _EUSART_Write *****************
  6319 ;; Defined at:
  6320 ;;		line 132 in file "mcc_generated_files/eusart.c"
  6321 ;; Parameters:    Size  Location     Type
  6322 ;;  txData          1    wreg     unsigned char 
  6323 ;; Auto vars:     Size  Location     Type
  6324 ;;  txData          1    2[BANK0 ] unsigned char 
  6325 ;; Return value:  Size  Location     Type
  6326 ;;                  1    wreg      void 
  6327 ;; Registers used:
  6328 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6329 ;; Tracked objects:
  6330 ;;		On entry : 0/0
  6331 ;;		On exit  : 0/0
  6332 ;;		Unchanged: 0/0
  6333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6335 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6336 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6337 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6338 ;;Total ram usage:        2 bytes
  6339 ;; Hardware stack levels used:    1
  6340 ;; Hardware stack levels required when called:    5
  6341 ;; This function calls:
  6342 ;;		Nothing
  6343 ;; This function is called by:
  6344 ;;		_putch
  6345 ;; This function uses a non-reentrant model
  6346 ;;
  6347                           
  6348                           
  6349                           ;psect for function _EUSART_Write
  6350  0C2D                     _EUSART_Write:	
  6351                           
  6352                           ;incstack = 0
  6353                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  6354                           ;EUSART_Write@txData stored from wreg
  6355  0C2D  0020               	movlb	0	; select bank0
  6356  0C2E  00A2               	movwf	EUSART_Write@txData
  6357  0C2F                     l4005:	
  6358                           ;eusart.c: 135: {
  6359                           
  6360                           ;eusart.c: 134: while(0 == eusartTxBufferRemaining)
  6361                           
  6362  0C2F  087A               	movf	_eusartTxBufferRemaining,w	;volatile
  6363  0C30  1903               	btfsc	3,2
  6364  0C31  2C2F               	goto	l4005
  6365                           
  6366                           ;eusart.c: 136: }
  6367                           ;eusart.c: 138: if(0 == PIE1bits.TXIE)
  6368  0C32  0021               	movlb	1	; select bank1
  6369  0C33  1A11               	btfsc	17,4	;volatile
  6370  0C34  2C3A               	goto	l383
  6371                           
  6372                           ;eusart.c: 139: {
  6373                           ;eusart.c: 140: TXREG = txData;
  6374  0C35  0020               	movlb	0	; select bank0
  6375  0C36  0822               	movf	EUSART_Write@txData,w
  6376  0C37  0023               	movlb	3	; select bank3
  6377  0C38  009A               	movwf	26	;volatile
  6378                           
  6379                           ;eusart.c: 141: }
  6380  0C39  2C4E               	goto	l4019
  6381  0C3A                     l383:	
  6382                           
  6383                           ;eusart.c: 142: else
  6384                           ;eusart.c: 143: {
  6385                           ;eusart.c: 144: PIE1bits.TXIE = 0;
  6386  0C3A  1211               	bcf	17,4	;volatile
  6387                           
  6388                           ;eusart.c: 145: eusartTxBuffer[eusartTxHead++] = txData;
  6389  0C3B  0020               	movlb	0	; select bank0
  6390  0C3C  0822               	movf	EUSART_Write@txData,w
  6391  0C3D  00A1               	movwf	??_EUSART_Write
  6392  0C3E  087C               	movf	_eusartTxHead,w
  6393  0C3F  3EA0               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  6394  0C40  0086               	movwf	6
  6395  0C41  0187               	clrf	7
  6396  0C42  0821               	movf	??_EUSART_Write,w
  6397  0C43  0081               	movwf	1
  6398  0C44  3001               	movlw	1
  6399  0C45  00A1               	movwf	??_EUSART_Write
  6400  0C46  0821               	movf	??_EUSART_Write,w
  6401  0C47  07FC               	addwf	_eusartTxHead,f	;volatile
  6402                           
  6403                           ;eusart.c: 146: if(sizeof(eusartTxBuffer) <= eusartTxHead)
  6404  0C48  3008               	movlw	8
  6405  0C49  027C               	subwf	_eusartTxHead,w	;volatile
  6406  0C4A  1803               	btfsc	3,0
  6407                           
  6408                           ;eusart.c: 147: {
  6409                           ;eusart.c: 148: eusartTxHead = 0;
  6410  0C4B  01FC               	clrf	_eusartTxHead	;volatile
  6411                           
  6412                           ;eusart.c: 149: }
  6413                           ;eusart.c: 150: eusartTxBufferRemaining--;
  6414  0C4C  3001               	movlw	1
  6415  0C4D  02FA               	subwf	_eusartTxBufferRemaining,f	;volatile
  6416  0C4E                     l4019:	
  6417                           
  6418                           ;eusart.c: 151: }
  6419                           ;eusart.c: 152: PIE1bits.TXIE = 1;
  6420  0C4E  0021               	movlb	1	; select bank1
  6421  0C4F  1611               	bsf	17,4	;volatile
  6422  0C50  0008               	return
  6423  0C51                     __end_of_EUSART_Write:	
  6424                           
  6425                           	psect	text19
  6426  0D43                     __ptext19:	
  6427 ;; *************** function ___lwmod *****************
  6428 ;; Defined at:
  6429 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  6430 ;; Parameters:    Size  Location     Type
  6431 ;;  divisor         2    9[BANK0 ] unsigned int 
  6432 ;;  dividend        2   11[BANK0 ] unsigned int 
  6433 ;; Auto vars:     Size  Location     Type
  6434 ;;  counter         1   14[BANK0 ] unsigned char 
  6435 ;; Return value:  Size  Location     Type
  6436 ;;                  2    9[BANK0 ] unsigned int 
  6437 ;; Registers used:
  6438 ;;		wreg, status,2, status,0
  6439 ;; Tracked objects:
  6440 ;;		On entry : 0/0
  6441 ;;		On exit  : 0/0
  6442 ;;		Unchanged: 0/0
  6443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6444 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6445 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6446 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6447 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6448 ;;Total ram usage:        6 bytes
  6449 ;; Hardware stack levels used:    1
  6450 ;; Hardware stack levels required when called:    5
  6451 ;; This function calls:
  6452 ;;		Nothing
  6453 ;; This function is called by:
  6454 ;;		_printf
  6455 ;; This function uses a non-reentrant model
  6456 ;;
  6457                           
  6458                           
  6459                           ;psect for function ___lwmod
  6460  0D43                     ___lwmod:	
  6461                           
  6462                           ;incstack = 0
  6463                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  6464  0D43  0020               	movlb	0	; select bank0
  6465  0D44  0829               	movf	___lwmod@divisor,w
  6466  0D45  042A               	iorwf	___lwmod@divisor+1,w
  6467  0D46  1903               	btfsc	3,2
  6468  0D47  2D6B               	goto	l4119
  6469  0D48  01AE               	clrf	___lwmod@counter
  6470  0D49  0AAE               	incf	___lwmod@counter,f
  6471  0D4A                     l4109:	
  6472  0D4A  1BAA               	btfsc	___lwmod@divisor+1,7
  6473  0D4B  2D56               	goto	l4111
  6474  0D4C  3001               	movlw	1
  6475  0D4D                     u3435:	
  6476  0D4D  35A9               	lslf	___lwmod@divisor,f
  6477  0D4E  0DAA               	rlf	___lwmod@divisor+1,f
  6478  0D4F  0B89               	decfsz	9,f
  6479  0D50  2D4D               	goto	u3435
  6480  0D51  3001               	movlw	1
  6481  0D52  00AD               	movwf	??___lwmod
  6482  0D53  082D               	movf	??___lwmod,w
  6483  0D54  07AE               	addwf	___lwmod@counter,f
  6484  0D55  2D4A               	goto	l4109
  6485  0D56                     l4111:	
  6486  0D56  082A               	movf	___lwmod@divisor+1,w
  6487  0D57  022C               	subwf	___lwmod@dividend+1,w
  6488  0D58  1D03               	skipz
  6489  0D59  2D5C               	goto	u3455
  6490  0D5A  0829               	movf	___lwmod@divisor,w
  6491  0D5B  022B               	subwf	___lwmod@dividend,w
  6492  0D5C                     u3455:	
  6493  0D5C  1C03               	skipc
  6494  0D5D  2D62               	goto	l4115
  6495  0D5E  0829               	movf	___lwmod@divisor,w
  6496  0D5F  02AB               	subwf	___lwmod@dividend,f
  6497  0D60  082A               	movf	___lwmod@divisor+1,w
  6498  0D61  3BAC               	subwfb	___lwmod@dividend+1,f
  6499  0D62                     l4115:	
  6500  0D62  3001               	movlw	1
  6501  0D63                     u3465:	
  6502  0D63  36AA               	lsrf	___lwmod@divisor+1,f
  6503  0D64  0CA9               	rrf	___lwmod@divisor,f
  6504  0D65  0B89               	decfsz	9,f
  6505  0D66  2D63               	goto	u3465
  6506  0D67  3001               	movlw	1
  6507  0D68  02AE               	subwf	___lwmod@counter,f
  6508  0D69  1D03               	btfss	3,2
  6509  0D6A  2D56               	goto	l4111
  6510  0D6B                     l4119:	
  6511  0D6B  082C               	movf	___lwmod@dividend+1,w
  6512  0D6C  00AA               	movwf	?___lwmod+1
  6513  0D6D  082B               	movf	___lwmod@dividend,w
  6514  0D6E  00A9               	movwf	?___lwmod
  6515  0D6F  0008               	return
  6516  0D70                     __end_of___lwmod:	
  6517                           
  6518                           	psect	text20
  6519  0DCE                     __ptext20:	
  6520 ;; *************** function ___lwdiv *****************
  6521 ;; Defined at:
  6522 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  6523 ;; Parameters:    Size  Location     Type
  6524 ;;  divisor         2    1[BANK0 ] unsigned int 
  6525 ;;  dividend        2    3[BANK0 ] unsigned int 
  6526 ;; Auto vars:     Size  Location     Type
  6527 ;;  quotient        2    7[BANK0 ] unsigned int 
  6528 ;;  counter         1    6[BANK0 ] unsigned char 
  6529 ;; Return value:  Size  Location     Type
  6530 ;;                  2    1[BANK0 ] unsigned int 
  6531 ;; Registers used:
  6532 ;;		wreg, status,2, status,0
  6533 ;; Tracked objects:
  6534 ;;		On entry : 0/0
  6535 ;;		On exit  : 0/0
  6536 ;;		Unchanged: 0/0
  6537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6538 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6539 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6540 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6541 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6542 ;;Total ram usage:        8 bytes
  6543 ;; Hardware stack levels used:    1
  6544 ;; Hardware stack levels required when called:    5
  6545 ;; This function calls:
  6546 ;;		Nothing
  6547 ;; This function is called by:
  6548 ;;		_printf
  6549 ;; This function uses a non-reentrant model
  6550 ;;
  6551                           
  6552                           
  6553                           ;psect for function ___lwdiv
  6554  0DCE                     ___lwdiv:	
  6555                           
  6556                           ;incstack = 0
  6557                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6558  0DCE  0020               	movlb	0	; select bank0
  6559  0DCF  01A7               	clrf	___lwdiv@quotient
  6560  0DD0  01A8               	clrf	___lwdiv@quotient+1
  6561  0DD1  0821               	movf	___lwdiv@divisor,w
  6562  0DD2  0422               	iorwf	___lwdiv@divisor+1,w
  6563  0DD3  1903               	btfsc	3,2
  6564  0DD4  2DFE               	goto	l4097
  6565  0DD5  01A6               	clrf	___lwdiv@counter
  6566  0DD6  0AA6               	incf	___lwdiv@counter,f
  6567  0DD7                     l4085:	
  6568  0DD7  1BA2               	btfsc	___lwdiv@divisor+1,7
  6569  0DD8  2DE3               	goto	l4087
  6570  0DD9  3001               	movlw	1
  6571  0DDA                     u3365:	
  6572  0DDA  35A1               	lslf	___lwdiv@divisor,f
  6573  0DDB  0DA2               	rlf	___lwdiv@divisor+1,f
  6574  0DDC  0B89               	decfsz	9,f
  6575  0DDD  2DDA               	goto	u3365
  6576  0DDE  3001               	movlw	1
  6577  0DDF  00A5               	movwf	??___lwdiv
  6578  0DE0  0825               	movf	??___lwdiv,w
  6579  0DE1  07A6               	addwf	___lwdiv@counter,f
  6580  0DE2  2DD7               	goto	l4085
  6581  0DE3                     l4087:	
  6582  0DE3  3001               	movlw	1
  6583  0DE4                     u3385:	
  6584  0DE4  35A7               	lslf	___lwdiv@quotient,f
  6585  0DE5  0DA8               	rlf	___lwdiv@quotient+1,f
  6586  0DE6  0B89               	decfsz	9,f
  6587  0DE7  2DE4               	goto	u3385
  6588  0DE8  0822               	movf	___lwdiv@divisor+1,w
  6589  0DE9  0224               	subwf	___lwdiv@dividend+1,w
  6590  0DEA  1D03               	skipz
  6591  0DEB  2DEE               	goto	u3395
  6592  0DEC  0821               	movf	___lwdiv@divisor,w
  6593  0DED  0223               	subwf	___lwdiv@dividend,w
  6594  0DEE                     u3395:	
  6595  0DEE  1C03               	skipc
  6596  0DEF  2DF5               	goto	l4093
  6597  0DF0  0821               	movf	___lwdiv@divisor,w
  6598  0DF1  02A3               	subwf	___lwdiv@dividend,f
  6599  0DF2  0822               	movf	___lwdiv@divisor+1,w
  6600  0DF3  3BA4               	subwfb	___lwdiv@dividend+1,f
  6601  0DF4  1427               	bsf	___lwdiv@quotient,0
  6602  0DF5                     l4093:	
  6603  0DF5  3001               	movlw	1
  6604  0DF6                     u3405:	
  6605  0DF6  36A2               	lsrf	___lwdiv@divisor+1,f
  6606  0DF7  0CA1               	rrf	___lwdiv@divisor,f
  6607  0DF8  0B89               	decfsz	9,f
  6608  0DF9  2DF6               	goto	u3405
  6609  0DFA  3001               	movlw	1
  6610  0DFB  02A6               	subwf	___lwdiv@counter,f
  6611  0DFC  1D03               	btfss	3,2
  6612  0DFD  2DE3               	goto	l4087
  6613  0DFE                     l4097:	
  6614  0DFE  0828               	movf	___lwdiv@quotient+1,w
  6615  0DFF  00A2               	movwf	?___lwdiv+1
  6616  0E00  0827               	movf	___lwdiv@quotient,w
  6617  0E01  00A1               	movwf	?___lwdiv
  6618  0E02  0008               	return
  6619  0E03                     __end_of___lwdiv:	
  6620                           
  6621                           	psect	text21
  6622  0BE8                     __ptext21:	
  6623 ;; *************** function _PROTOCOL_I2C_Set_TLV *****************
  6624 ;; Defined at:
  6625 ;;		line 213 in file "protocol.c"
  6626 ;; Parameters:    Size  Location     Type
  6627 ;;  type            1    wreg     unsigned char 
  6628 ;;  length          1    1[BANK0 ] unsigned char 
  6629 ;;  pbuffer         2    2[BANK0 ] PTR unsigned char 
  6630 ;;		 -> PROTOCOL_Send_uint8_t@pbuf(1), sendbuf(16), 
  6631 ;; Auto vars:     Size  Location     Type
  6632 ;;  type            1    5[BANK0 ] unsigned char 
  6633 ;;  status          1    6[BANK0 ] enum E3411
  6634 ;; Return value:  Size  Location     Type
  6635 ;;                  1    wreg      void 
  6636 ;; Registers used:
  6637 ;;		wreg, status,2, status,0
  6638 ;; Tracked objects:
  6639 ;;		On entry : 0/0
  6640 ;;		On exit  : 0/0
  6641 ;;		Unchanged: 0/0
  6642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6643 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6644 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6645 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6646 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6647 ;;Total ram usage:        6 bytes
  6648 ;; Hardware stack levels used:    1
  6649 ;; Hardware stack levels required when called:    5
  6650 ;; This function calls:
  6651 ;;		Nothing
  6652 ;; This function is called by:
  6653 ;;		_PROTOCOL_I2C_Send_int8_t
  6654 ;; This function uses a non-reentrant model
  6655 ;;
  6656                           
  6657                           
  6658                           ;psect for function _PROTOCOL_I2C_Set_TLV
  6659  0BE8                     _PROTOCOL_I2C_Set_TLV:	
  6660                           
  6661                           ;incstack = 0
  6662                           ; Regs used in _PROTOCOL_I2C_Set_TLV: [wreg+status,2+status,0]
  6663                           ;PROTOCOL_I2C_Set_TLV@type stored from wreg
  6664  0BE8  0020               	movlb	0	; select bank0
  6665  0BE9  00A5               	movwf	PROTOCOL_I2C_Set_TLV@type
  6666                           
  6667                           ;protocol.c: 214: READBUF_STATUS status = readbuf.status;
  6668  0BEA  0021               	movlb	1	; select bank1
  6669  0BEB  084B               	movf	(_readbuf^(0+128)+4),w
  6670  0BEC  0020               	movlb	0	; select bank0
  6671  0BED  00A4               	movwf	??_PROTOCOL_I2C_Set_TLV
  6672  0BEE  0824               	movf	??_PROTOCOL_I2C_Set_TLV,w
  6673  0BEF  00A6               	movwf	PROTOCOL_I2C_Set_TLV@status
  6674                           
  6675                           ;protocol.c: 215: if (status == COMPLETE) {
  6676  0BF0  3003               	movlw	3
  6677  0BF1  0626               	xorwf	PROTOCOL_I2C_Set_TLV@status,w
  6678  0BF2  1D03               	btfss	3,2
  6679  0BF3  0008               	return
  6680                           
  6681                           ;protocol.c: 216: readbuf.type = type;
  6682  0BF4  0825               	movf	PROTOCOL_I2C_Set_TLV@type,w
  6683  0BF5  00A4               	movwf	??_PROTOCOL_I2C_Set_TLV
  6684  0BF6  0824               	movf	??_PROTOCOL_I2C_Set_TLV,w
  6685  0BF7  0021               	movlb	1	; select bank1
  6686  0BF8  00C7               	movwf	_readbuf^(0+128)
  6687                           
  6688                           ;protocol.c: 217: readbuf.length = length;
  6689  0BF9  0020               	movlb	0	; select bank0
  6690  0BFA  0821               	movf	PROTOCOL_I2C_Set_TLV@length,w
  6691  0BFB  00A4               	movwf	??_PROTOCOL_I2C_Set_TLV
  6692  0BFC  0824               	movf	??_PROTOCOL_I2C_Set_TLV,w
  6693  0BFD  0021               	movlb	1	; select bank1
  6694  0BFE  00C8               	movwf	(_readbuf^(0+128)+1)
  6695                           
  6696                           ;protocol.c: 218: readbuf.pbuffer = pbuffer;
  6697  0BFF  0020               	movlb	0	; select bank0
  6698  0C00  0823               	movf	PROTOCOL_I2C_Set_TLV@pbuffer+1,w
  6699  0C01  0021               	movlb	1	; select bank1
  6700  0C02  00CA               	movwf	((low ((_readbuf| 0+2))+1))^(0+128)
  6701  0C03  0020               	movlb	0	; select bank0
  6702  0C04  0822               	movf	PROTOCOL_I2C_Set_TLV@pbuffer,w
  6703  0C05  0021               	movlb	1	; select bank1
  6704  0C06  00C9               	movwf	(low ((_readbuf| 0+2)))^(0+128)
  6705                           
  6706                           ;protocol.c: 219: readbuf.buf_cnt = 0;
  6707  0C07  01CC               	clrf	(_readbuf^(0+128)+5)
  6708                           
  6709                           ;protocol.c: 220: readbuf.status = TLV_SET;
  6710  0C08  01CB               	clrf	(_readbuf^(0+128)+4)
  6711  0C09  0008               	return
  6712  0C0A                     __end_of_PROTOCOL_I2C_Set_TLV:	
  6713                           
  6714                           	psect	text22
  6715  078E                     __ptext22:	
  6716 ;; *************** function _atoi *****************
  6717 ;; Defined at:
  6718 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\atoi.c"
  6719 ;; Parameters:    Size  Location     Type
  6720 ;;  s               1    wreg     PTR const unsigned char 
  6721 ;;		 -> buf(48), 
  6722 ;; Auto vars:     Size  Location     Type
  6723 ;;  s               1   14[BANK0 ] PTR const unsigned char 
  6724 ;;		 -> buf(48), 
  6725 ;;  a               2   12[BANK0 ] int 
  6726 ;;  sign            1   11[BANK0 ] unsigned char 
  6727 ;; Return value:  Size  Location     Type
  6728 ;;                  2    7[BANK0 ] int 
  6729 ;; Registers used:
  6730 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6731 ;; Tracked objects:
  6732 ;;		On entry : 0/0
  6733 ;;		On exit  : 0/0
  6734 ;;		Unchanged: 0/0
  6735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6736 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6737 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6738 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6739 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6740 ;;Total ram usage:        8 bytes
  6741 ;; Hardware stack levels used:    1
  6742 ;; Hardware stack levels required when called:    6
  6743 ;; This function calls:
  6744 ;;		___wmul
  6745 ;;		_isdigit
  6746 ;; This function is called by:
  6747 ;;		_PROTOCOL_Loop
  6748 ;; This function uses a non-reentrant model
  6749 ;;
  6750                           
  6751                           
  6752                           ;psect for function _atoi
  6753  078E                     _atoi:	
  6754                           
  6755                           ;incstack = 0
  6756                           ; Regs used in _atoi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6757                           ;atoi@s stored from wreg
  6758  078E  0020               	movlb	0	; select bank0
  6759  078F  00AE               	movwf	atoi@s
  6760  0790                     l4495:	
  6761  0790  082E               	movf	atoi@s,w
  6762  0791  0086               	movwf	6
  6763  0792  3001               	movlw	1	; select bank2/3
  6764  0793  0087               	movwf	7
  6765  0794  3020               	movlw	32
  6766  0795  0601               	xorwf	1,w
  6767  0796  1D03               	btfss	3,2
  6768  0797  2F9D               	goto	l4497
  6769  0798                     l4493:	
  6770  0798  3001               	movlw	1
  6771  0799  00A9               	movwf	??_atoi
  6772  079A  0829               	movf	??_atoi,w
  6773  079B  07AE               	addwf	atoi@s,f
  6774  079C  2F90               	goto	l4495
  6775  079D                     l4497:	
  6776  079D  082E               	movf	atoi@s,w
  6777  079E  0086               	movwf	6
  6778  079F  3001               	movlw	1	; select bank2/3
  6779  07A0  0087               	movwf	7
  6780  07A1  3009               	movlw	9
  6781  07A2  0601               	xorwf	1,w
  6782  07A3  1903               	btfsc	3,2
  6783  07A4  2F98               	goto	l4493
  6784  07A5  01AC               	clrf	atoi@a
  6785  07A6  01AD               	clrf	atoi@a+1
  6786  07A7  01AB               	clrf	atoi@sign
  6787  07A8  082E               	movf	atoi@s,w
  6788  07A9  0086               	movwf	6
  6789  07AA  3001               	movlw	1	; select bank2/3
  6790  07AB  0087               	movwf	7
  6791  07AC  302D               	movlw	45
  6792  07AD  0601               	xorwf	1,w
  6793  07AE  1D03               	btfss	3,2
  6794  07AF  2FB5               	goto	l4505
  6795  07B0  3001               	movlw	1
  6796  07B1  00A9               	movwf	??_atoi
  6797  07B2  0829               	movf	??_atoi,w
  6798  07B3  07AB               	addwf	atoi@sign,f
  6799  07B4  2FBD               	goto	l4511
  6800  07B5                     l4505:	
  6801  07B5  082E               	movf	atoi@s,w
  6802  07B6  0086               	movwf	6
  6803  07B7  3001               	movlw	1	; select bank2/3
  6804  07B8  0087               	movwf	7
  6805  07B9  302B               	movlw	43
  6806  07BA  0601               	xorwf	1,w
  6807  07BB  1D03               	btfss	3,2
  6808  07BC  2FC1               	goto	l4513
  6809  07BD                     l4511:	
  6810  07BD  3001               	movlw	1
  6811  07BE  00A9               	movwf	??_atoi
  6812  07BF  0829               	movf	??_atoi,w
  6813  07C0  07AE               	addwf	atoi@s,f
  6814  07C1                     l4513:	
  6815  07C1  082E               	movf	atoi@s,w
  6816  07C2  0086               	movwf	6
  6817  07C3  3001               	movlw	1	; select bank2/3
  6818  07C4  0087               	movwf	7
  6819  07C5  0801               	movf	1,w
  6820  07C6  318A  226E  3187   	fcall	_isdigit
  6821  07C9  1C03               	btfss	3,0
  6822  07CA  2FEA               	goto	l4515
  6823  07CB  0020               	movlb	0	; select bank0
  6824  07CC  082D               	movf	atoi@a+1,w
  6825  07CD  00A2               	movwf	___wmul@multiplier+1
  6826  07CE  082C               	movf	atoi@a,w
  6827  07CF  00A1               	movwf	___wmul@multiplier
  6828  07D0  300A               	movlw	10
  6829  07D1  00A3               	movwf	___wmul@multiplicand
  6830  07D2  3000               	movlw	0
  6831  07D3  00A4               	movwf	___wmul@multiplicand+1
  6832  07D4  318B  2330  3187   	fcall	___wmul
  6833  07D7  0020               	movlb	0	; select bank0
  6834  07D8  082E               	movf	atoi@s,w
  6835  07D9  0086               	movwf	6
  6836  07DA  3001               	movlw	1	; select bank2/3
  6837  07DB  0087               	movwf	7
  6838  07DC  0801               	movf	1,w
  6839  07DD  0721               	addwf	?___wmul,w
  6840  07DE  00A9               	movwf	??_atoi
  6841  07DF  0822               	movf	?___wmul+1,w
  6842  07E0  1803               	skipnc
  6843  07E1  0A22               	incf	?___wmul+1,w
  6844  07E2  00AA               	movwf	??_atoi+1
  6845  07E3  0829               	movf	??_atoi,w
  6846  07E4  3ED0               	addlw	208
  6847  07E5  00AC               	movwf	atoi@a
  6848  07E6  30FF               	movlw	255
  6849  07E7  3D2A               	addwfc	??_atoi+1,w
  6850  07E8  00AD               	movwf	atoi@a+1
  6851  07E9  2FBD               	goto	l4511
  6852  07EA                     l4515:	
  6853  07EA  0020               	movlb	0	; select bank0
  6854  07EB  082B               	movf	atoi@sign,w
  6855  07EC  1903               	btfsc	3,2
  6856  07ED  2FFA               	goto	l4521
  6857  07EE  092C               	comf	atoi@a,w
  6858  07EF  00A9               	movwf	??_atoi
  6859  07F0  092D               	comf	atoi@a+1,w
  6860  07F1  00AA               	movwf	??_atoi+1
  6861  07F2  0AA9               	incf	??_atoi,f
  6862  07F3  1903               	skipnz
  6863  07F4  0AAA               	incf	??_atoi+1,f
  6864  07F5  0829               	movf	??_atoi,w
  6865  07F6  00A7               	movwf	?_atoi
  6866  07F7  082A               	movf	??_atoi+1,w
  6867  07F8  00A8               	movwf	?_atoi+1
  6868  07F9  0008               	return
  6869  07FA                     l4521:	
  6870  07FA  082D               	movf	atoi@a+1,w
  6871  07FB  00A8               	movwf	?_atoi+1
  6872  07FC  082C               	movf	atoi@a,w
  6873  07FD  00A7               	movwf	?_atoi
  6874  07FE  0008               	return
  6875  07FF                     __end_of_atoi:	
  6876                           
  6877                           	psect	text23
  6878  0A6E                     __ptext23:	
  6879 ;; *************** function _isdigit *****************
  6880 ;; Defined at:
  6881 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  6882 ;; Parameters:    Size  Location     Type
  6883 ;;  c               1    wreg     unsigned char 
  6884 ;; Auto vars:     Size  Location     Type
  6885 ;;  c               1    2[BANK0 ] unsigned char 
  6886 ;; Return value:  Size  Location     Type
  6887 ;;		None               void
  6888 ;; Registers used:
  6889 ;;		wreg, status,2, status,0
  6890 ;; Tracked objects:
  6891 ;;		On entry : 0/0
  6892 ;;		On exit  : 0/0
  6893 ;;		Unchanged: 0/0
  6894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6896 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6898 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6899 ;;Total ram usage:        2 bytes
  6900 ;; Hardware stack levels used:    1
  6901 ;; Hardware stack levels required when called:    5
  6902 ;; This function calls:
  6903 ;;		Nothing
  6904 ;; This function is called by:
  6905 ;;		_printf
  6906 ;;		_atoi
  6907 ;; This function uses a non-reentrant model
  6908 ;;
  6909                           
  6910                           
  6911                           ;psect for function _isdigit
  6912  0A6E                     _isdigit:	
  6913                           
  6914                           ;incstack = 0
  6915                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  6916                           ;isdigit@c stored from wreg
  6917  0A6E  0020               	movlb	0	; select bank0
  6918  0A6F  00A2               	movwf	isdigit@c
  6919  0A70  01A1               	clrf	_isdigit$1482
  6920  0A71  303A               	movlw	58
  6921  0A72  0222               	subwf	isdigit@c,w
  6922  0A73  1803               	skipnc
  6923  0A74  2A7B               	goto	l4057
  6924  0A75  3030               	movlw	48
  6925  0A76  0222               	subwf	isdigit@c,w
  6926  0A77  1C03               	skipc
  6927  0A78  2A7B               	goto	l4057
  6928  0A79  01A1               	clrf	_isdigit$1482
  6929  0A7A  0AA1               	incf	_isdigit$1482,f
  6930  0A7B                     l4057:	
  6931  0A7B  0C21               	rrf	_isdigit$1482,w
  6932  0A7C  0008               	return
  6933  0A7D                     __end_of_isdigit:	
  6934                           
  6935                           	psect	text24
  6936  0B30                     __ptext24:	
  6937 ;; *************** function ___wmul *****************
  6938 ;; Defined at:
  6939 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  6940 ;; Parameters:    Size  Location     Type
  6941 ;;  multiplier      2    1[BANK0 ] unsigned int 
  6942 ;;  multiplicand    2    3[BANK0 ] unsigned int 
  6943 ;; Auto vars:     Size  Location     Type
  6944 ;;  product         2    5[BANK0 ] unsigned int 
  6945 ;; Return value:  Size  Location     Type
  6946 ;;                  2    1[BANK0 ] unsigned int 
  6947 ;; Registers used:
  6948 ;;		wreg, status,2, status,0
  6949 ;; Tracked objects:
  6950 ;;		On entry : 0/0
  6951 ;;		On exit  : 0/0
  6952 ;;		Unchanged: 0/0
  6953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6954 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6955 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6957 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6958 ;;Total ram usage:        6 bytes
  6959 ;; Hardware stack levels used:    1
  6960 ;; Hardware stack levels required when called:    5
  6961 ;; This function calls:
  6962 ;;		Nothing
  6963 ;; This function is called by:
  6964 ;;		_printf
  6965 ;;		_atoi
  6966 ;; This function uses a non-reentrant model
  6967 ;;
  6968                           
  6969                           
  6970                           ;psect for function ___wmul
  6971  0B30                     ___wmul:	
  6972                           
  6973                           ;incstack = 0
  6974                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6975  0B30  0020               	movlb	0	; select bank0
  6976  0B31  01A5               	clrf	___wmul@product
  6977  0B32  01A6               	clrf	___wmul@product+1
  6978  0B33                     l4063:	
  6979  0B33  1C21               	btfss	___wmul@multiplier,0
  6980  0B34  2B39               	goto	l1064
  6981  0B35  0823               	movf	___wmul@multiplicand,w
  6982  0B36  07A5               	addwf	___wmul@product,f
  6983  0B37  0824               	movf	___wmul@multiplicand+1,w
  6984  0B38  3DA6               	addwfc	___wmul@product+1,f
  6985  0B39                     l1064:	
  6986  0B39  3001               	movlw	1
  6987  0B3A                     u3325:	
  6988  0B3A  35A3               	lslf	___wmul@multiplicand,f
  6989  0B3B  0DA4               	rlf	___wmul@multiplicand+1,f
  6990  0B3C  0B89               	decfsz	9,f
  6991  0B3D  2B3A               	goto	u3325
  6992  0B3E  3001               	movlw	1
  6993  0B3F                     u3335:	
  6994  0B3F  36A2               	lsrf	___wmul@multiplier+1,f
  6995  0B40  0CA1               	rrf	___wmul@multiplier,f
  6996  0B41  0B89               	decfsz	9,f
  6997  0B42  2B3F               	goto	u3335
  6998  0B43  0821               	movf	___wmul@multiplier,w
  6999  0B44  0422               	iorwf	___wmul@multiplier+1,w
  7000  0B45  1D03               	btfss	3,2
  7001  0B46  2B33               	goto	l4063
  7002  0B47  0826               	movf	___wmul@product+1,w
  7003  0B48  00A2               	movwf	?___wmul+1
  7004  0B49  0825               	movf	___wmul@product,w
  7005  0B4A  00A1               	movwf	?___wmul
  7006  0B4B  0008               	return
  7007  0B4C                     __end_of___wmul:	
  7008                           
  7009                           	psect	text25
  7010  0A1E                     __ptext25:	
  7011 ;; *************** function _TMR0_HasOverflowOccured *****************
  7012 ;; Defined at:
  7013 ;;		line 101 in file "mcc_generated_files/tmr0.c"
  7014 ;; Parameters:    Size  Location     Type
  7015 ;;		None
  7016 ;; Auto vars:     Size  Location     Type
  7017 ;;		None
  7018 ;; Return value:  Size  Location     Type
  7019 ;;                  1    wreg      unsigned char 
  7020 ;; Registers used:
  7021 ;;		wreg, status,2, status,0
  7022 ;; Tracked objects:
  7023 ;;		On entry : 0/0
  7024 ;;		On exit  : 0/0
  7025 ;;		Unchanged: 0/0
  7026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7028 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7030 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7031 ;;Total ram usage:        0 bytes
  7032 ;; Hardware stack levels used:    1
  7033 ;; Hardware stack levels required when called:    5
  7034 ;; This function calls:
  7035 ;;		Nothing
  7036 ;; This function is called by:
  7037 ;;		_PROTOCOL_Loop
  7038 ;; This function uses a non-reentrant model
  7039 ;;
  7040                           
  7041                           
  7042                           ;psect for function _TMR0_HasOverflowOccured
  7043  0A1E                     _TMR0_HasOverflowOccured:	
  7044                           
  7045                           ;tmr0.c: 104: return(INTCONbits.TMR0IF);
  7046                           
  7047                           ;incstack = 0
  7048                           ; Regs used in _TMR0_HasOverflowOccured: [wreg+status,2+status,0]
  7049  0A1E  0C0B               	rrf	11,w	;volatile
  7050  0A1F  0C89               	rrf	9,f
  7051  0A20  3901               	andlw	1
  7052  0A21  0008               	return
  7053  0A22                     __end_of_TMR0_HasOverflowOccured:	
  7054                           
  7055                           	psect	text26
  7056  0A8C                     __ptext26:	
  7057 ;; *************** function _PROTOCOL_Write_Device_Address *****************
  7058 ;; Defined at:
  7059 ;;		line 89 in file "protocol.c"
  7060 ;; Parameters:    Size  Location     Type
  7061 ;;  device_id_i2    1    wreg     unsigned char 
  7062 ;; Auto vars:     Size  Location     Type
  7063 ;;  device_id_i2    1    5[BANK0 ] unsigned char 
  7064 ;; Return value:  Size  Location     Type
  7065 ;;                  1    wreg      void 
  7066 ;; Registers used:
  7067 ;;		wreg, status,2, status,0, pclath, cstack
  7068 ;; Tracked objects:
  7069 ;;		On entry : 0/0
  7070 ;;		On exit  : 0/0
  7071 ;;		Unchanged: 0/0
  7072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7074 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7075 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7076 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7077 ;;Total ram usage:        2 bytes
  7078 ;; Hardware stack levels used:    1
  7079 ;; Hardware stack levels required when called:    6
  7080 ;; This function calls:
  7081 ;;		_DATAEE_WriteByte
  7082 ;; This function is called by:
  7083 ;;		_PROTOCOL_Loop
  7084 ;; This function uses a non-reentrant model
  7085 ;;
  7086                           
  7087                           
  7088                           ;psect for function _PROTOCOL_Write_Device_Address
  7089  0A8C                     _PROTOCOL_Write_Device_Address:	
  7090                           
  7091                           ;incstack = 0
  7092                           ; Regs used in _PROTOCOL_Write_Device_Address: [wreg+status,2+status,0+pclath+cstack]
  7093                           ;PROTOCOL_Write_Device_Address@device_id_i2c stored from wreg
  7094  0A8C  0020               	movlb	0	; select bank0
  7095  0A8D  00A5               	movwf	PROTOCOL_Write_Device_Address@device_id_i2c
  7096                           
  7097                           ;protocol.c: 90: DATAEE_WriteByte(0, device_id_i2c);
  7098  0A8E  0825               	movf	PROTOCOL_Write_Device_Address@device_id_i2c,w
  7099  0A8F  00A4               	movwf	??_PROTOCOL_Write_Device_Address
  7100  0A90  0824               	movf	??_PROTOCOL_Write_Device_Address,w
  7101  0A91  00A1               	movwf	DATAEE_WriteByte@bData
  7102  0A92  3000               	movlw	0
  7103  0A93  318C  240A         	fcall	_DATAEE_WriteByte
  7104                           
  7105                           ;protocol.c: 91: slave_address = device_id_i2c;
  7106  0A95  0020               	movlb	0	; select bank0
  7107  0A96  0825               	movf	PROTOCOL_Write_Device_Address@device_id_i2c,w
  7108  0A97  00A4               	movwf	??_PROTOCOL_Write_Device_Address
  7109  0A98  0824               	movf	??_PROTOCOL_Write_Device_Address,w
  7110  0A99  0021               	movlb	1	; select bank1
  7111  0A9A  00BD               	movwf	_slave_address^(0+128)
  7112  0A9B  0008               	return
  7113  0A9C                     __end_of_PROTOCOL_Write_Device_Address:	
  7114                           
  7115                           	psect	text27
  7116  0A08                     __ptext27:	
  7117 ;; *************** function _PROTOCOL_STP *****************
  7118 ;; Defined at:
  7119 ;;		line 103 in file "protocol.c"
  7120 ;; Parameters:    Size  Location     Type
  7121 ;;		None
  7122 ;; Auto vars:     Size  Location     Type
  7123 ;;		None
  7124 ;; Return value:  Size  Location     Type
  7125 ;;                  1    wreg      void 
  7126 ;; Registers used:
  7127 ;;		wreg, status,2, status,0
  7128 ;; Tracked objects:
  7129 ;;		On entry : 0/0
  7130 ;;		On exit  : 0/0
  7131 ;;		Unchanged: 0/0
  7132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7134 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7135 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7136 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7137 ;;Total ram usage:        0 bytes
  7138 ;; Hardware stack levels used:    1
  7139 ;; Hardware stack levels required when called:    5
  7140 ;; This function calls:
  7141 ;;		Nothing
  7142 ;; This function is called by:
  7143 ;;		_PROTOCOL_Loop
  7144 ;; This function uses a non-reentrant model
  7145 ;;
  7146                           
  7147                           
  7148                           ;psect for function _PROTOCOL_STP
  7149  0A08                     _PROTOCOL_STP:	
  7150                           
  7151                           ;protocol.c: 105: running = 0;
  7152                           
  7153                           ;incstack = 0
  7154                           ; Regs used in _PROTOCOL_STP: [wreg+status,2+status,0]
  7155  0A08  0021               	movlb	1	; select bank1
  7156  0A09  01BA               	clrf	_running^(0+128)
  7157  0A0A  0008               	return
  7158  0A0B                     __end_of_PROTOCOL_STP:	
  7159                           
  7160                           	psect	text28
  7161  0A1A                     __ptext28:	
  7162 ;; *************** function _PROTOCOL_STA *****************
  7163 ;; Defined at:
  7164 ;;		line 98 in file "protocol.c"
  7165 ;; Parameters:    Size  Location     Type
  7166 ;;		None
  7167 ;; Auto vars:     Size  Location     Type
  7168 ;;		None
  7169 ;; Return value:  Size  Location     Type
  7170 ;;                  1    wreg      void 
  7171 ;; Registers used:
  7172 ;;		wreg, status,2, status,0
  7173 ;; Tracked objects:
  7174 ;;		On entry : 0/0
  7175 ;;		On exit  : 0/0
  7176 ;;		Unchanged: 0/0
  7177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7179 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7181 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7182 ;;Total ram usage:        0 bytes
  7183 ;; Hardware stack levels used:    1
  7184 ;; Hardware stack levels required when called:    5
  7185 ;; This function calls:
  7186 ;;		Nothing
  7187 ;; This function is called by:
  7188 ;;		_PROTOCOL_Loop
  7189 ;; This function uses a non-reentrant model
  7190 ;;
  7191                           
  7192                           
  7193                           ;psect for function _PROTOCOL_STA
  7194  0A1A                     _PROTOCOL_STA:	
  7195                           
  7196                           ;protocol.c: 100: running = 1;
  7197                           
  7198                           ;incstack = 0
  7199                           ; Regs used in _PROTOCOL_STA: [wreg+status,2+status,0]
  7200  0A1A  0021               	movlb	1	; select bank1
  7201  0A1B  01BA               	clrf	_running^(0+128)
  7202  0A1C  0ABA               	incf	_running^(0+128),f
  7203  0A1D  0008               	return
  7204  0A1E                     __end_of_PROTOCOL_STA:	
  7205                           
  7206                           	psect	text29
  7207  0A3E                     __ptext29:	
  7208 ;; *************** function _PROTOCOL_SET *****************
  7209 ;; Defined at:
  7210 ;;		line 116 in file "protocol.c"
  7211 ;; Parameters:    Size  Location     Type
  7212 ;;  value_          1    wreg     unsigned char 
  7213 ;; Auto vars:     Size  Location     Type
  7214 ;;  value_          1    2[BANK0 ] unsigned char 
  7215 ;; Return value:  Size  Location     Type
  7216 ;;                  1    wreg      void 
  7217 ;; Registers used:
  7218 ;;		wreg, status,2, status,0
  7219 ;; Tracked objects:
  7220 ;;		On entry : 0/0
  7221 ;;		On exit  : 0/0
  7222 ;;		Unchanged: 0/0
  7223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7225 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7226 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7227 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7228 ;;Total ram usage:        2 bytes
  7229 ;; Hardware stack levels used:    1
  7230 ;; Hardware stack levels required when called:    5
  7231 ;; This function calls:
  7232 ;;		Nothing
  7233 ;; This function is called by:
  7234 ;;		_PROTOCOL_Loop
  7235 ;; This function uses a non-reentrant model
  7236 ;;
  7237                           
  7238                           
  7239                           ;psect for function _PROTOCOL_SET
  7240  0A3E                     _PROTOCOL_SET:	
  7241                           
  7242                           ;incstack = 0
  7243                           ; Regs used in _PROTOCOL_SET: [wreg+status,2+status,0]
  7244                           ;PROTOCOL_SET@value_ stored from wreg
  7245  0A3E  0020               	movlb	0	; select bank0
  7246  0A3F  00A2               	movwf	PROTOCOL_SET@value_
  7247                           
  7248                           ;protocol.c: 117: value = value_;
  7249  0A40  0822               	movf	PROTOCOL_SET@value_,w
  7250  0A41  00A1               	movwf	??_PROTOCOL_SET
  7251  0A42  0821               	movf	??_PROTOCOL_SET,w
  7252  0A43  00E6               	movwf	_value
  7253  0A44  0008               	return
  7254  0A45                     __end_of_PROTOCOL_SET:	
  7255                           
  7256                           	psect	text30
  7257  0A4E                     __ptext30:	
  7258 ;; *************** function _PROTOCOL_SAV *****************
  7259 ;; Defined at:
  7260 ;;		line 112 in file "protocol.c"
  7261 ;; Parameters:    Size  Location     Type
  7262 ;;		None
  7263 ;; Auto vars:     Size  Location     Type
  7264 ;;		None
  7265 ;; Return value:  Size  Location     Type
  7266 ;;                  1    wreg      void 
  7267 ;; Registers used:
  7268 ;;		wreg, status,2, status,0, pclath, cstack
  7269 ;; Tracked objects:
  7270 ;;		On entry : 0/0
  7271 ;;		On exit  : 0/0
  7272 ;;		Unchanged: 0/0
  7273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7274 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7275 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7276 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7277 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7278 ;;Total ram usage:        1 bytes
  7279 ;; Hardware stack levels used:    1
  7280 ;; Hardware stack levels required when called:    6
  7281 ;; This function calls:
  7282 ;;		_DATAEE_WriteByte
  7283 ;; This function is called by:
  7284 ;;		_PROTOCOL_Loop
  7285 ;; This function uses a non-reentrant model
  7286 ;;
  7287                           
  7288                           
  7289                           ;psect for function _PROTOCOL_SAV
  7290  0A4E                     _PROTOCOL_SAV:	
  7291                           
  7292                           ;protocol.c: 113: DATAEE_WriteByte(1, value);
  7293                           
  7294                           ;incstack = 0
  7295                           ; Regs used in _PROTOCOL_SAV: [wreg+status,2+status,0+pclath+cstack]
  7296  0A4E  0020               	movlb	0	; select bank0
  7297  0A4F  0866               	movf	_value,w
  7298  0A50  00A4               	movwf	??_PROTOCOL_SAV
  7299  0A51  0824               	movf	??_PROTOCOL_SAV,w
  7300  0A52  00A1               	movwf	DATAEE_WriteByte@bData
  7301  0A53  3001               	movlw	1
  7302  0A54  318C  240A         	fcall	_DATAEE_WriteByte
  7303  0A56  0008               	return
  7304  0A57                     __end_of_PROTOCOL_SAV:	
  7305                           
  7306                           	psect	text31
  7307  0C0A                     __ptext31:	
  7308 ;; *************** function _DATAEE_WriteByte *****************
  7309 ;; Defined at:
  7310 ;;		line 180 in file "mcc_generated_files/memory.c"
  7311 ;; Parameters:    Size  Location     Type
  7312 ;;  bAdd            1    wreg     unsigned char 
  7313 ;;  bData           1    1[BANK0 ] unsigned char 
  7314 ;; Auto vars:     Size  Location     Type
  7315 ;;  bAdd            1    2[BANK0 ] unsigned char 
  7316 ;;  GIEBitValue     1    3[BANK0 ] unsigned char 
  7317 ;; Return value:  Size  Location     Type
  7318 ;;                  1    wreg      void 
  7319 ;; Registers used:
  7320 ;;		wreg, status,2, status,0
  7321 ;; Tracked objects:
  7322 ;;		On entry : 0/0
  7323 ;;		On exit  : 0/0
  7324 ;;		Unchanged: 0/0
  7325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7326 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7327 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7329 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7330 ;;Total ram usage:        3 bytes
  7331 ;; Hardware stack levels used:    1
  7332 ;; Hardware stack levels required when called:    5
  7333 ;; This function calls:
  7334 ;;		Nothing
  7335 ;; This function is called by:
  7336 ;;		_PROTOCOL_Write_Device_Address
  7337 ;;		_PROTOCOL_SAV
  7338 ;; This function uses a non-reentrant model
  7339 ;;
  7340                           
  7341                           
  7342                           ;psect for function _DATAEE_WriteByte
  7343  0C0A                     _DATAEE_WriteByte:	
  7344                           
  7345                           ;incstack = 0
  7346                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
  7347                           ;DATAEE_WriteByte@bAdd stored from wreg
  7348  0C0A  0020               	movlb	0	; select bank0
  7349  0C0B  00A2               	movwf	DATAEE_WriteByte@bAdd
  7350                           
  7351                           ;memory.c: 182: uint8_t GIEBitValue = 0;
  7352  0C0C  01A3               	clrf	DATAEE_WriteByte@GIEBitValue
  7353                           
  7354                           ;memory.c: 184: EEADRL = (bAdd & 0x0ff);
  7355  0C0D  0822               	movf	DATAEE_WriteByte@bAdd,w
  7356  0C0E  0023               	movlb	3	; select bank3
  7357  0C0F  0091               	movwf	17	;volatile
  7358                           
  7359                           ;memory.c: 185: EEDATL = bData;
  7360  0C10  0020               	movlb	0	; select bank0
  7361  0C11  0821               	movf	DATAEE_WriteByte@bData,w
  7362  0C12  0023               	movlb	3	; select bank3
  7363  0C13  0093               	movwf	19	;volatile
  7364                           
  7365                           ;memory.c: 186: EECON1bits.EEPGD = 0;
  7366  0C14  1395               	bcf	21,7	;volsfr
  7367                           
  7368                           ;memory.c: 187: EECON1bits.CFGS = 0;
  7369  0C15  1315               	bcf	21,6	;volsfr
  7370                           
  7371                           ;memory.c: 188: EECON1bits.WREN = 1;
  7372  0C16  1515               	bsf	21,2	;volsfr
  7373                           
  7374                           ;memory.c: 190: GIEBitValue = INTCONbits.GIE;
  7375  0C17  3000               	movlw	0
  7376  0C18  1B8B               	btfsc	11,7	;volatile
  7377  0C19  3001               	movlw	1
  7378  0C1A  0020               	movlb	0	; select bank0
  7379  0C1B  00A3               	movwf	DATAEE_WriteByte@GIEBitValue
  7380                           
  7381                           ;memory.c: 191: INTCONbits.GIE = 0;
  7382  0C1C  138B               	bcf	11,7	;volatile
  7383                           
  7384                           ;memory.c: 192: EECON2 = 0x55;
  7385  0C1D  3055               	movlw	85
  7386  0C1E  0023               	movlb	3	; select bank3
  7387  0C1F  0096               	movwf	22	;volsfr
  7388                           
  7389                           ;memory.c: 193: EECON2 = 0xAA;
  7390  0C20  30AA               	movlw	170
  7391  0C21  0096               	movwf	22	;volsfr
  7392                           
  7393                           ;memory.c: 194: EECON1bits.WR = 1;
  7394  0C22  1495               	bsf	21,1	;volsfr
  7395  0C23                     l480:	
  7396                           ;memory.c: 197: {
  7397                           
  7398                           ;memory.c: 196: while (EECON1bits.WR)
  7399                           
  7400  0C23  1895               	btfsc	21,1	;volsfr
  7401  0C24  2C23               	goto	l480
  7402                           
  7403                           ;memory.c: 198: }
  7404                           ;memory.c: 200: EECON1bits.WREN = 0;
  7405  0C25  1115               	bcf	21,2	;volsfr
  7406                           
  7407                           ;memory.c: 201: INTCONbits.GIE = GIEBitValue;
  7408  0C26  0020               	movlb	0	; select bank0
  7409  0C27  0C23               	rrf	DATAEE_WriteByte@GIEBitValue,w
  7410  0C28  1C03               	skipc
  7411  0C29  138B               	bcf	11,7	;volatile
  7412  0C2A  1803               	skipnc
  7413  0C2B  178B               	bsf	11,7	;volatile
  7414  0C2C  0008               	return
  7415  0C2D                     __end_of_DATAEE_WriteByte:	
  7416                           
  7417                           	psect	text32
  7418  0003                     __ptext32:	
  7419 ;; *************** function _PROTOCOL_EXT *****************
  7420 ;; Defined at:
  7421 ;;		line 121 in file "protocol.c"
  7422 ;; Parameters:    Size  Location     Type
  7423 ;;  char_buf        1    wreg     PTR unsigned char 
  7424 ;;		 -> buf(48), I2C1_StatusCallback@ext_buf(48), 
  7425 ;; Auto vars:     Size  Location     Type
  7426 ;;  char_buf        1    1[BANK0 ] PTR unsigned char 
  7427 ;;		 -> buf(48), I2C1_StatusCallback@ext_buf(48), 
  7428 ;; Return value:  Size  Location     Type
  7429 ;;                  1    wreg      void 
  7430 ;; Registers used:
  7431 ;;		wreg, status,2, status,0
  7432 ;; Tracked objects:
  7433 ;;		On entry : 0/0
  7434 ;;		On exit  : 0/0
  7435 ;;		Unchanged: 0/0
  7436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7438 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7440 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7441 ;;Total ram usage:        1 bytes
  7442 ;; Hardware stack levels used:    1
  7443 ;; Hardware stack levels required when called:    5
  7444 ;; This function calls:
  7445 ;;		Nothing
  7446 ;; This function is called by:
  7447 ;;		_PROTOCOL_Loop
  7448 ;; This function uses a non-reentrant model
  7449 ;;
  7450                           
  7451                           
  7452                           ;psect for function _PROTOCOL_EXT
  7453  0003                     _PROTOCOL_EXT:	
  7454                           
  7455                           ;incstack = 0
  7456                           ; Regs used in _PROTOCOL_EXT: [wreg+status,2+status,0]
  7457  0003  0008               	return
  7458  0004                     __end_of_PROTOCOL_EXT:	
  7459                           
  7460                           	psect	text33
  7461  0B87                     __ptext33:	
  7462 ;; *************** function _EUSART_Read *****************
  7463 ;; Defined at:
  7464 ;;		line 112 in file "mcc_generated_files/eusart.c"
  7465 ;; Parameters:    Size  Location     Type
  7466 ;;		None
  7467 ;; Auto vars:     Size  Location     Type
  7468 ;;  readValue       1    2[BANK0 ] unsigned char 
  7469 ;; Return value:  Size  Location     Type
  7470 ;;                  1    wreg      unsigned char 
  7471 ;; Registers used:
  7472 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7473 ;; Tracked objects:
  7474 ;;		On entry : 0/0
  7475 ;;		On exit  : 0/0
  7476 ;;		Unchanged: 0/0
  7477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7479 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7480 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7481 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7482 ;;Total ram usage:        2 bytes
  7483 ;; Hardware stack levels used:    1
  7484 ;; Hardware stack levels required when called:    5
  7485 ;; This function calls:
  7486 ;;		Nothing
  7487 ;; This function is called by:
  7488 ;;		_PROTOCOL_Loop
  7489 ;;		_getch
  7490 ;; This function uses a non-reentrant model
  7491 ;;
  7492                           
  7493                           
  7494                           ;psect for function _EUSART_Read
  7495  0B87                     _EUSART_Read:	
  7496                           
  7497                           ;eusart.c: 114: uint8_t readValue = 0;
  7498                           
  7499                           ;incstack = 0
  7500                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  7501  0B87  0020               	movlb	0	; select bank0
  7502  0B88  01A2               	clrf	EUSART_Read@readValue
  7503  0B89                     l4431:	
  7504                           ;eusart.c: 117: {
  7505                           
  7506                           ;eusart.c: 116: while(0 == eusartRxCount)
  7507                           
  7508  0B89  0867               	movf	_eusartRxCount,w	;volatile
  7509  0B8A  1903               	btfsc	3,2
  7510  0B8B  2B89               	goto	l4431
  7511                           
  7512                           ;eusart.c: 118: }
  7513                           ;eusart.c: 120: readValue = eusartRxBuffer[eusartRxTail++];
  7514  0B8C  0868               	movf	_eusartRxTail,w
  7515  0B8D  3E20               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
  7516  0B8E  0086               	movwf	6
  7517  0B8F  3001               	movlw	1	; select bank2/3
  7518  0B90  0087               	movwf	7
  7519  0B91  0801               	movf	1,w
  7520  0B92  00A1               	movwf	??_EUSART_Read
  7521  0B93  0821               	movf	??_EUSART_Read,w
  7522  0B94  00A2               	movwf	EUSART_Read@readValue
  7523  0B95  3001               	movlw	1
  7524  0B96  00A1               	movwf	??_EUSART_Read
  7525  0B97  0821               	movf	??_EUSART_Read,w
  7526  0B98  07E8               	addwf	_eusartRxTail,f	;volatile
  7527                           
  7528                           ;eusart.c: 121: if(sizeof(eusartRxBuffer) <= eusartRxTail)
  7529  0B99  3008               	movlw	8
  7530  0B9A  0268               	subwf	_eusartRxTail,w	;volatile
  7531  0B9B  1803               	btfsc	3,0
  7532                           
  7533                           ;eusart.c: 122: {
  7534                           ;eusart.c: 123: eusartRxTail = 0;
  7535  0B9C  01E8               	clrf	_eusartRxTail	;volatile
  7536                           
  7537                           ;eusart.c: 124: }
  7538                           ;eusart.c: 125: PIE1bits.RCIE = 0;
  7539  0B9D  0021               	movlb	1	; select bank1
  7540  0B9E  1291               	bcf	17,5	;volatile
  7541                           
  7542                           ;eusart.c: 126: eusartRxCount--;
  7543  0B9F  3001               	movlw	1
  7544  0BA0  0020               	movlb	0	; select bank0
  7545  0BA1  02E7               	subwf	_eusartRxCount,f	;volatile
  7546                           
  7547                           ;eusart.c: 127: PIE1bits.RCIE = 1;
  7548  0BA2  0021               	movlb	1	; select bank1
  7549  0BA3  1691               	bsf	17,5	;volatile
  7550                           
  7551                           ;eusart.c: 129: return readValue;
  7552  0BA4  0020               	movlb	0	; select bank0
  7553  0BA5  0822               	movf	EUSART_Read@readValue,w
  7554  0BA6  0008               	return
  7555  0BA7                     __end_of_EUSART_Read:	
  7556                           
  7557                           	psect	text34
  7558  0ECF                     __ptext34:	
  7559 ;; *************** function _PROTOCOL_Initialize *****************
  7560 ;; Defined at:
  7561 ;;		line 60 in file "protocol.c"
  7562 ;; Parameters:    Size  Location     Type
  7563 ;;  device_id       2    2[BANK0 ] PTR const unsigned char 
  7564 ;;		 -> STR_1(10), 
  7565 ;;  start_handle    1    4[BANK0 ] PTR void 
  7566 ;;		 -> NULL(0), 
  7567 ;;  stop_handler    1    5[BANK0 ] PTR void 
  7568 ;;		 -> NULL(0), 
  7569 ;;  set_handler     1    6[BANK0 ] PTR void 
  7570 ;;		 -> NULL(0), 
  7571 ;;  inv_handler     2    7[BANK0 ] PTR void 
  7572 ;;		 -> inv_handler(1), 
  7573 ;;  scaler          1    9[BANK0 ] unsigned char 
  7574 ;; Auto vars:     Size  Location     Type
  7575 ;;		None
  7576 ;; Return value:  Size  Location     Type
  7577 ;;                  1    wreg      void 
  7578 ;; Registers used:
  7579 ;;		wreg, status,2, status,0, pclath, cstack
  7580 ;; Tracked objects:
  7581 ;;		On entry : 0/0
  7582 ;;		On exit  : 0/0
  7583 ;;		Unchanged: 0/0
  7584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7585 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7586 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7587 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7588 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7589 ;;Total ram usage:       10 bytes
  7590 ;; Hardware stack levels used:    1
  7591 ;; Hardware stack levels required when called:    6
  7592 ;; This function calls:
  7593 ;;		_DATAEE_ReadByte
  7594 ;; This function is called by:
  7595 ;;		_main
  7596 ;; This function uses a non-reentrant model
  7597 ;;
  7598                           
  7599                           
  7600                           ;psect for function _PROTOCOL_Initialize
  7601  0ECF                     _PROTOCOL_Initialize:	
  7602                           
  7603                           ;protocol.c: 61: device_id_ = device_id;
  7604                           
  7605                           ;incstack = 0
  7606                           ; Regs used in _PROTOCOL_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7607  0ECF  0020               	movlb	0	; select bank0
  7608  0ED0  0823               	movf	PROTOCOL_Initialize@device_id+1,w
  7609  0ED1  0021               	movlb	1	; select bank1
  7610  0ED2  00E2               	movwf	(_device_id_+1)^(0+128)
  7611  0ED3  0020               	movlb	0	; select bank0
  7612  0ED4  0822               	movf	PROTOCOL_Initialize@device_id,w
  7613  0ED5  0021               	movlb	1	; select bank1
  7614  0ED6  00E1               	movwf	_device_id_^(0+128)
  7615                           
  7616                           ;protocol.c: 62: PROTOCOL_Start_Handler = start_handler;
  7617  0ED7  0020               	movlb	0	; select bank0
  7618  0ED8  0824               	movf	PROTOCOL_Initialize@start_handler,w
  7619  0ED9  00AA               	movwf	??_PROTOCOL_Initialize
  7620  0EDA  3000               	movlw	0
  7621  0EDB  00AB               	movwf	??_PROTOCOL_Initialize+1
  7622  0EDC  082A               	movf	??_PROTOCOL_Initialize,w
  7623  0EDD  0021               	movlb	1	; select bank1
  7624  0EDE  00E7               	movwf	_PROTOCOL_Start_Handler^(0+128)
  7625  0EDF  0020               	movlb	0	; select bank0
  7626  0EE0  082B               	movf	??_PROTOCOL_Initialize+1,w
  7627  0EE1  0021               	movlb	1	; select bank1
  7628  0EE2  00E8               	movwf	(_PROTOCOL_Start_Handler+1)^(0+128)
  7629                           
  7630                           ;protocol.c: 63: PROTOCOL_Stop_Handler = stop_handler;
  7631  0EE3  0020               	movlb	0	; select bank0
  7632  0EE4  0825               	movf	PROTOCOL_Initialize@stop_handler,w
  7633  0EE5  00AA               	movwf	??_PROTOCOL_Initialize
  7634  0EE6  3000               	movlw	0
  7635  0EE7  00AB               	movwf	??_PROTOCOL_Initialize+1
  7636  0EE8  082A               	movf	??_PROTOCOL_Initialize,w
  7637  0EE9  0021               	movlb	1	; select bank1
  7638  0EEA  00E5               	movwf	_PROTOCOL_Stop_Handler^(0+128)
  7639  0EEB  0020               	movlb	0	; select bank0
  7640  0EEC  082B               	movf	??_PROTOCOL_Initialize+1,w
  7641  0EED  0021               	movlb	1	; select bank1
  7642  0EEE  00E6               	movwf	(_PROTOCOL_Stop_Handler+1)^(0+128)
  7643                           
  7644                           ;protocol.c: 64: PROTOCOL_Set_Handler = set_handler;
  7645  0EEF  0020               	movlb	0	; select bank0
  7646  0EF0  0826               	movf	PROTOCOL_Initialize@set_handler,w
  7647  0EF1  00AA               	movwf	??_PROTOCOL_Initialize
  7648  0EF2  3000               	movlw	0
  7649  0EF3  00AB               	movwf	??_PROTOCOL_Initialize+1
  7650  0EF4  082A               	movf	??_PROTOCOL_Initialize,w
  7651  0EF5  0021               	movlb	1	; select bank1
  7652  0EF6  00E3               	movwf	_PROTOCOL_Set_Handler^(0+128)
  7653  0EF7  0020               	movlb	0	; select bank0
  7654  0EF8  082B               	movf	??_PROTOCOL_Initialize+1,w
  7655  0EF9  0021               	movlb	1	; select bank1
  7656  0EFA  00E4               	movwf	(_PROTOCOL_Set_Handler+1)^(0+128)
  7657                           
  7658                           ;protocol.c: 67: value = DATAEE_ReadByte(1);
  7659  0EFB  3001               	movlw	1
  7660  0EFC  318A  2261  318E   	fcall	_DATAEE_ReadByte
  7661  0EFF  0020               	movlb	0	; select bank0
  7662  0F00  00AA               	movwf	??_PROTOCOL_Initialize
  7663  0F01  082A               	movf	??_PROTOCOL_Initialize,w
  7664  0F02  00E6               	movwf	_value
  7665                           
  7666                           ;protocol.c: 69: slave_address = DATAEE_ReadByte(0);
  7667  0F03  3000               	movlw	0
  7668  0F04  318A  2261         	fcall	_DATAEE_ReadByte
  7669  0F06  0020               	movlb	0	; select bank0
  7670  0F07  00AA               	movwf	??_PROTOCOL_Initialize
  7671  0F08  082A               	movf	??_PROTOCOL_Initialize,w
  7672  0F09  0021               	movlb	1	; select bank1
  7673  0F0A  00BD               	movwf	_slave_address^(0+128)
  7674                           
  7675                           ;protocol.c: 72: readbuf.status = COMPLETE;
  7676  0F0B  3003               	movlw	3
  7677  0F0C  0020               	movlb	0	; select bank0
  7678  0F0D  00AA               	movwf	??_PROTOCOL_Initialize
  7679  0F0E  082A               	movf	??_PROTOCOL_Initialize,w
  7680  0F0F  0021               	movlb	1	; select bank1
  7681  0F10  00CB               	movwf	(_readbuf^(0+128)+4)
  7682                           
  7683                           ;protocol.c: 73: PROTOCOL_Inv_Handler = inv_handler;
  7684  0F11  0020               	movlb	0	; select bank0
  7685  0F12  0828               	movf	PROTOCOL_Initialize@inv_handler+1,w
  7686  0F13  0021               	movlb	1	; select bank1
  7687  0F14  00AD               	movwf	(_PROTOCOL_Inv_Handler+1)^(0+128)
  7688  0F15  0020               	movlb	0	; select bank0
  7689  0F16  0827               	movf	PROTOCOL_Initialize@inv_handler,w
  7690  0F17  0021               	movlb	1	; select bank1
  7691  0F18  00AC               	movwf	_PROTOCOL_Inv_Handler^(0+128)
  7692                           
  7693                           ;protocol.c: 74: tmr_scaler = scaler;
  7694  0F19  0020               	movlb	0	; select bank0
  7695  0F1A  0829               	movf	PROTOCOL_Initialize@scaler,w
  7696  0F1B  00AA               	movwf	??_PROTOCOL_Initialize
  7697  0F1C  082A               	movf	??_PROTOCOL_Initialize,w
  7698  0F1D  0021               	movlb	1	; select bank1
  7699  0F1E  00E9               	movwf	_tmr_scaler^(0+128)
  7700  0F1F  0008               	return
  7701  0F20                     __end_of_PROTOCOL_Initialize:	
  7702                           
  7703                           	psect	text35
  7704  0A61                     __ptext35:	
  7705 ;; *************** function _DATAEE_ReadByte *****************
  7706 ;; Defined at:
  7707 ;;		line 204 in file "mcc_generated_files/memory.c"
  7708 ;; Parameters:    Size  Location     Type
  7709 ;;  bAdd            1    wreg     unsigned char 
  7710 ;; Auto vars:     Size  Location     Type
  7711 ;;  bAdd            1    1[BANK0 ] unsigned char 
  7712 ;; Return value:  Size  Location     Type
  7713 ;;                  1    wreg      unsigned char 
  7714 ;; Registers used:
  7715 ;;		wreg
  7716 ;; Tracked objects:
  7717 ;;		On entry : 0/0
  7718 ;;		On exit  : 0/0
  7719 ;;		Unchanged: 0/0
  7720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7722 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7724 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7725 ;;Total ram usage:        1 bytes
  7726 ;; Hardware stack levels used:    1
  7727 ;; Hardware stack levels required when called:    5
  7728 ;; This function calls:
  7729 ;;		Nothing
  7730 ;; This function is called by:
  7731 ;;		_PROTOCOL_Initialize
  7732 ;; This function uses a non-reentrant model
  7733 ;;
  7734                           
  7735                           
  7736                           ;psect for function _DATAEE_ReadByte
  7737  0A61                     _DATAEE_ReadByte:	
  7738                           
  7739                           ;incstack = 0
  7740                           ; Regs used in _DATAEE_ReadByte: [wreg]
  7741                           ;DATAEE_ReadByte@bAdd stored from wreg
  7742  0A61  0020               	movlb	0	; select bank0
  7743  0A62  00A1               	movwf	DATAEE_ReadByte@bAdd
  7744                           
  7745                           ;memory.c: 206: EEADRL = (bAdd & 0x0ff);
  7746  0A63  0821               	movf	DATAEE_ReadByte@bAdd,w
  7747  0A64  0023               	movlb	3	; select bank3
  7748  0A65  0091               	movwf	17	;volatile
  7749                           
  7750                           ;memory.c: 207: EECON1bits.CFGS = 0;
  7751  0A66  1315               	bcf	21,6	;volsfr
  7752                           
  7753                           ;memory.c: 208: EECON1bits.EEPGD = 0;
  7754  0A67  1395               	bcf	21,7	;volsfr
  7755                           
  7756                           ;memory.c: 209: EECON1bits.RD = 1;
  7757  0A68  1415               	bsf	21,0	;volsfr
  7758                           
  7759                           ;memory.c: 210: __nop();
  7760  0A69  0000               	nop
  7761                           
  7762                           ;memory.c: 211: __nop();
  7763  0A6A  0000               	nop
  7764                           
  7765                           ;memory.c: 213: return (EEDATL);
  7766  0A6B  0023               	movlb	3	; select bank3
  7767  0A6C  0813               	movf	19,w	;volatile
  7768  0A6D  0008               	return
  7769  0A6E                     __end_of_DATAEE_ReadByte:	
  7770                           
  7771                           	psect	text36
  7772  0B69                     __ptext36:	
  7773 ;; *************** function _PIN_MANAGER_Initialize *****************
  7774 ;; Defined at:
  7775 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
  7776 ;; Parameters:    Size  Location     Type
  7777 ;;		None
  7778 ;; Auto vars:     Size  Location     Type
  7779 ;;		None
  7780 ;; Return value:  Size  Location     Type
  7781 ;;                  1    wreg      void 
  7782 ;; Registers used:
  7783 ;;		wreg, status,2
  7784 ;; Tracked objects:
  7785 ;;		On entry : 0/0
  7786 ;;		On exit  : 0/0
  7787 ;;		Unchanged: 0/0
  7788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7792 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7793 ;;Total ram usage:        0 bytes
  7794 ;; Hardware stack levels used:    1
  7795 ;; Hardware stack levels required when called:    5
  7796 ;; This function calls:
  7797 ;;		Nothing
  7798 ;; This function is called by:
  7799 ;;		_main
  7800 ;;		_SYSTEM_Initialize
  7801 ;; This function uses a non-reentrant model
  7802 ;;
  7803                           
  7804                           
  7805                           ;psect for function _PIN_MANAGER_Initialize
  7806  0B69                     _PIN_MANAGER_Initialize:	
  7807                           
  7808                           ;pin_manager.c: 56: LATA = 0x00;
  7809                           
  7810                           ;incstack = 0
  7811                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  7812  0B69  0022               	movlb	2	; select bank2
  7813  0B6A  018C               	clrf	12	;volatile
  7814                           
  7815                           ;pin_manager.c: 57: LATB = 0x00;
  7816  0B6B  018D               	clrf	13	;volatile
  7817                           
  7818                           ;pin_manager.c: 58: LATC = 0x00;
  7819  0B6C  018E               	clrf	14	;volatile
  7820                           
  7821                           ;pin_manager.c: 63: TRISA = 0x3F;
  7822  0B6D  303F               	movlw	63
  7823  0B6E  0021               	movlb	1	; select bank1
  7824  0B6F  008C               	movwf	12	;volatile
  7825                           
  7826                           ;pin_manager.c: 64: TRISB = 0xF0;
  7827  0B70  30F0               	movlw	240
  7828  0B71  008D               	movwf	13	;volatile
  7829                           
  7830                           ;pin_manager.c: 65: TRISC = 0x7F;
  7831  0B72  307F               	movlw	127
  7832  0B73  008E               	movwf	14	;volatile
  7833                           
  7834                           ;pin_manager.c: 70: ANSELC = 0x4F;
  7835  0B74  304F               	movlw	79
  7836  0B75  0023               	movlb	3	; select bank3
  7837  0B76  008E               	movwf	14	;volatile
  7838                           
  7839                           ;pin_manager.c: 71: ANSELB = 0x00;
  7840  0B77  018D               	clrf	13	;volatile
  7841                           
  7842                           ;pin_manager.c: 72: ANSELA = 0x17;
  7843  0B78  3017               	movlw	23
  7844  0B79  008C               	movwf	12	;volatile
  7845                           
  7846                           ;pin_manager.c: 77: WPUB = 0x00;
  7847  0B7A  0024               	movlb	4	; select bank4
  7848  0B7B  018D               	clrf	13	;volatile
  7849                           
  7850                           ;pin_manager.c: 78: WPUA = 0x3F;
  7851  0B7C  303F               	movlw	63
  7852  0B7D  008C               	movwf	12	;volatile
  7853                           
  7854                           ;pin_manager.c: 79: WPUC = 0x7F;
  7855  0B7E  307F               	movlw	127
  7856  0B7F  008E               	movwf	14	;volatile
  7857                           
  7858                           ;pin_manager.c: 80: OPTION_REGbits.nWPUEN = 0;
  7859  0B80  0021               	movlb	1	; select bank1
  7860  0B81  1395               	bcf	21,7	;volatile
  7861                           
  7862                           ;pin_manager.c: 86: APFCON1 = 0x00;
  7863  0B82  0022               	movlb	2	; select bank2
  7864  0B83  019E               	clrf	30	;volatile
  7865                           
  7866                           ;pin_manager.c: 87: APFCON0 = 0x84;
  7867  0B84  3084               	movlw	132
  7868  0B85  009D               	movwf	29	;volatile
  7869  0B86  0008               	return
  7870  0B87                     __end_of_PIN_MANAGER_Initialize:	
  7871                           
  7872                           	psect	text37
  7873  0A26                     __ptext37:	
  7874 ;; *************** function _OSCILLATOR_Initialize *****************
  7875 ;; Defined at:
  7876 ;;		line 81 in file "mcc_generated_files/mcc.c"
  7877 ;; Parameters:    Size  Location     Type
  7878 ;;		None
  7879 ;; Auto vars:     Size  Location     Type
  7880 ;;		None
  7881 ;; Return value:  Size  Location     Type
  7882 ;;                  1    wreg      void 
  7883 ;; Registers used:
  7884 ;;		wreg, status,2
  7885 ;; Tracked objects:
  7886 ;;		On entry : 0/0
  7887 ;;		On exit  : 0/0
  7888 ;;		Unchanged: 0/0
  7889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7891 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7893 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7894 ;;Total ram usage:        0 bytes
  7895 ;; Hardware stack levels used:    1
  7896 ;; Hardware stack levels required when called:    5
  7897 ;; This function calls:
  7898 ;;		Nothing
  7899 ;; This function is called by:
  7900 ;;		_main
  7901 ;;		_SYSTEM_Initialize
  7902 ;; This function uses a non-reentrant model
  7903 ;;
  7904                           
  7905                           
  7906                           ;psect for function _OSCILLATOR_Initialize
  7907  0A26                     _OSCILLATOR_Initialize:	
  7908                           
  7909                           ;mcc.c: 84: OSCCON = 0x68;
  7910                           
  7911                           ;incstack = 0
  7912                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  7913  0A26  3068               	movlw	104
  7914  0A27  0021               	movlb	1	; select bank1
  7915  0A28  0099               	movwf	25	;volatile
  7916                           
  7917                           ;mcc.c: 86: OSCTUNE = 0x00;
  7918  0A29  0198               	clrf	24	;volatile
  7919  0A2A  0008               	return
  7920  0A2B                     __end_of_OSCILLATOR_Initialize:	
  7921                           
  7922                           	psect	text38
  7923  0AAE                     __ptext38:	
  7924 ;; *************** function _I2C2_Initialize *****************
  7925 ;; Defined at:
  7926 ;;		line 198 in file "mcc_generated_files/i2c2.c"
  7927 ;; Parameters:    Size  Location     Type
  7928 ;;		None
  7929 ;; Auto vars:     Size  Location     Type
  7930 ;;		None
  7931 ;; Return value:  Size  Location     Type
  7932 ;;                  1    wreg      void 
  7933 ;; Registers used:
  7934 ;;		wreg, status,2
  7935 ;; Tracked objects:
  7936 ;;		On entry : 0/0
  7937 ;;		On exit  : 0/0
  7938 ;;		Unchanged: 0/0
  7939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7941 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7942 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7943 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7944 ;;Total ram usage:        1 bytes
  7945 ;; Hardware stack levels used:    1
  7946 ;; Hardware stack levels required when called:    5
  7947 ;; This function calls:
  7948 ;;		Nothing
  7949 ;; This function is called by:
  7950 ;;		_main
  7951 ;;		_SYSTEM_Initialize
  7952 ;; This function uses a non-reentrant model
  7953 ;;
  7954                           
  7955                           
  7956                           ;psect for function _I2C2_Initialize
  7957  0AAE                     _I2C2_Initialize:	
  7958                           
  7959                           ;i2c2.c: 200: i2c2_object.pTrHead = i2c2_tr_queue;
  7960                           
  7961                           ;incstack = 0
  7962                           ; Regs used in _I2C2_Initialize: [wreg+status,2]
  7963  0AAE  30D8               	movlw	(low (_i2c2_tr_queue| 0))& (0+255)
  7964  0AAF  0020               	movlb	0	; select bank0
  7965  0AB0  00A1               	movwf	??_I2C2_Initialize
  7966  0AB1  0821               	movf	??_I2C2_Initialize,w
  7967  0AB2  00E1               	movwf	low ((_i2c2_object| 0+1))
  7968                           
  7969                           ;i2c2.c: 201: i2c2_object.pTrTail = i2c2_tr_queue;
  7970  0AB3  30D8               	movlw	(low (_i2c2_tr_queue| 0))& (0+255)
  7971  0AB4  00A1               	movwf	??_I2C2_Initialize
  7972  0AB5  0821               	movf	??_I2C2_Initialize,w
  7973  0AB6  00E0               	movwf	_i2c2_object
  7974                           
  7975                           ;i2c2.c: 202: i2c2_object.trStatus.s.empty = 1;
  7976  0AB7  14E2               	bsf	_i2c2_object+2,1
  7977                           
  7978                           ;i2c2.c: 203: i2c2_object.trStatus.s.full = 0;
  7979  0AB8  1062               	bcf	_i2c2_object+2,0
  7980                           
  7981                           ;i2c2.c: 205: i2c2_object.i2cErrors = 0;
  7982  0AB9  01E4               	clrf	_i2c2_object+4
  7983                           
  7984                           ;i2c2.c: 208: SSP2STAT = 0x00;
  7985  0ABA  0024               	movlb	4	; select bank4
  7986  0ABB  019C               	clrf	28	;volatile
  7987                           
  7988                           ;i2c2.c: 210: SSP2CON1 = 0x28;
  7989  0ABC  3028               	movlw	40
  7990  0ABD  009D               	movwf	29	;volatile
  7991                           
  7992                           ;i2c2.c: 212: SSP2CON3 = 0x00;
  7993  0ABE  019F               	clrf	31	;volatile
  7994                           
  7995                           ;i2c2.c: 214: SSP2ADD = 0x09;
  7996  0ABF  3009               	movlw	9
  7997  0AC0  009A               	movwf	26	;volatile
  7998                           
  7999                           ;i2c2.c: 218: PIR4bits.SSP2IF = 0;
  8000  0AC1  0020               	movlb	0	; select bank0
  8001  0AC2  1014               	bcf	20,0	;volatile
  8002                           
  8003                           ;i2c2.c: 220: PIE4bits.SSP2IE = 1;
  8004  0AC3  0021               	movlb	1	; select bank1
  8005  0AC4  1414               	bsf	20,0	;volatile
  8006  0AC5  0008               	return
  8007  0AC6                     __end_of_I2C2_Initialize:	
  8008                           
  8009                           	psect	text39
  8010  0BC7                     __ptext39:	
  8011 ;; *************** function _I2C1_Initialize *****************
  8012 ;; Defined at:
  8013 ;;		line 30 in file "mcc_generated_files/i2c1.c"
  8014 ;; Parameters:    Size  Location     Type
  8015 ;;		None
  8016 ;; Auto vars:     Size  Location     Type
  8017 ;;		None
  8018 ;; Return value:  Size  Location     Type
  8019 ;;                  1    wreg      void 
  8020 ;; Registers used:
  8021 ;;		wreg, status,2, status,0, pclath, cstack
  8022 ;; Tracked objects:
  8023 ;;		On entry : 0/0
  8024 ;;		On exit  : 0/0
  8025 ;;		Unchanged: 0/0
  8026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8028 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8029 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8030 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8031 ;;Total ram usage:        2 bytes
  8032 ;; Hardware stack levels used:    1
  8033 ;; Hardware stack levels required when called:    6
  8034 ;; This function calls:
  8035 ;;		_PROTOCOL_Read_Device_Address
  8036 ;; This function is called by:
  8037 ;;		_main
  8038 ;;		_SYSTEM_Initialize
  8039 ;; This function uses a non-reentrant model
  8040 ;;
  8041                           
  8042                           
  8043                           ;psect for function _I2C1_Initialize
  8044  0BC7                     _I2C1_Initialize:	
  8045                           
  8046                           ;i2c1.c: 34: _delay((unsigned long)((2000)*(4000000/4000.0)));
  8047                           
  8048                           ;incstack = 0
  8049                           ; Regs used in _I2C1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8050  0BC7  300B               	movlw	11
  8051  0BC8  0020               	movlb	0	; select bank0
  8052  0BC9  00A2               	movwf	??_I2C1_Initialize+1
  8053  0BCA  3026               	movlw	38
  8054  0BCB  00A1               	movwf	??_I2C1_Initialize
  8055  0BCC  305D               	movlw	93
  8056  0BCD                     u4447:	
  8057  0BCD  0B89               	decfsz	9,f
  8058  0BCE  2BCD               	goto	u4447
  8059  0BCF  0BA1               	decfsz	??_I2C1_Initialize,f
  8060  0BD0  2BCD               	goto	u4447
  8061  0BD1  0BA2               	decfsz	??_I2C1_Initialize+1,f
  8062  0BD2  2BCD               	goto	u4447
  8063  0BD3  3200               	nop2
  8064                           
  8065                           ;i2c1.c: 38: SSP1STAT = 0x80;
  8066  0BD4  3080               	movlw	128
  8067  0BD5  0024               	movlb	4	; select bank4
  8068  0BD6  0094               	movwf	20	;volatile
  8069                           
  8070                           ;i2c1.c: 40: SSP1CON1 = 0x26;
  8071  0BD7  3026               	movlw	38
  8072  0BD8  0095               	movwf	21	;volatile
  8073                           
  8074                           ;i2c1.c: 42: SSP1CON2 = 0x81;
  8075  0BD9  3081               	movlw	129
  8076  0BDA  0096               	movwf	22	;volatile
  8077                           
  8078                           ;i2c1.c: 44: SSP1CON3 = 0x00;
  8079  0BDB  0197               	clrf	23	;volatile
  8080                           
  8081                           ;i2c1.c: 46: SSP1MSK = (0x7F << 1);
  8082  0BDC  30FE               	movlw	254
  8083  0BDD  0093               	movwf	19	;volatile
  8084                           
  8085                           ;i2c1.c: 48: SSP1ADD = (PROTOCOL_Read_Device_Address() << 1);
  8086  0BDE  318A  2205         	fcall	_PROTOCOL_Read_Device_Address
  8087  0BE0  0709               	addwf	9,w
  8088  0BE1  0024               	movlb	4	; select bank4
  8089  0BE2  0092               	movwf	18	;volatile
  8090                           
  8091                           ;i2c1.c: 51: PIR1bits.SSP1IF = 0;
  8092  0BE3  0020               	movlb	0	; select bank0
  8093  0BE4  1191               	bcf	17,3	;volatile
  8094                           
  8095                           ;i2c1.c: 53: PIE1bits.SSP1IE = 1;
  8096  0BE5  0021               	movlb	1	; select bank1
  8097  0BE6  1591               	bsf	17,3	;volatile
  8098  0BE7  0008               	return
  8099  0BE8                     __end_of_I2C1_Initialize:	
  8100                           
  8101                           	psect	text40
  8102  0A05                     __ptext40:	
  8103 ;; *************** function _PROTOCOL_Read_Device_Address *****************
  8104 ;; Defined at:
  8105 ;;		line 94 in file "protocol.c"
  8106 ;; Parameters:    Size  Location     Type
  8107 ;;		None
  8108 ;; Auto vars:     Size  Location     Type
  8109 ;;		None
  8110 ;; Return value:  Size  Location     Type
  8111 ;;                  1    wreg      unsigned char 
  8112 ;; Registers used:
  8113 ;;		wreg
  8114 ;; Tracked objects:
  8115 ;;		On entry : 0/0
  8116 ;;		On exit  : 0/0
  8117 ;;		Unchanged: 0/0
  8118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8120 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8122 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8123 ;;Total ram usage:        0 bytes
  8124 ;; Hardware stack levels used:    1
  8125 ;; Hardware stack levels required when called:    5
  8126 ;; This function calls:
  8127 ;;		Nothing
  8128 ;; This function is called by:
  8129 ;;		_I2C1_Initialize
  8130 ;;		_PROTOCOL_Loop
  8131 ;; This function uses a non-reentrant model
  8132 ;;
  8133                           
  8134                           
  8135                           ;psect for function _PROTOCOL_Read_Device_Address
  8136  0A05                     _PROTOCOL_Read_Device_Address:	
  8137                           
  8138                           ;protocol.c: 95: return slave_address;
  8139                           
  8140                           ;incstack = 0
  8141                           ; Regs used in _PROTOCOL_Read_Device_Address: [wreg]
  8142  0A05  0021               	movlb	1	; select bank1
  8143  0A06  083D               	movf	_slave_address^(0+128),w
  8144  0A07  0008               	return
  8145  0A08                     __end_of_PROTOCOL_Read_Device_Address:	
  8146                           
  8147                           	psect	text41
  8148  0ADF                     __ptext41:	
  8149 ;; *************** function _EUSART_Initialize *****************
  8150 ;; Defined at:
  8151 ;;		line 75 in file "mcc_generated_files/eusart.c"
  8152 ;; Parameters:    Size  Location     Type
  8153 ;;		None
  8154 ;; Auto vars:     Size  Location     Type
  8155 ;;		None
  8156 ;; Return value:  Size  Location     Type
  8157 ;;                  1    wreg      void 
  8158 ;; Registers used:
  8159 ;;		wreg, status,2
  8160 ;; Tracked objects:
  8161 ;;		On entry : 0/0
  8162 ;;		On exit  : 0/0
  8163 ;;		Unchanged: 0/0
  8164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8166 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8167 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8168 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8169 ;;Total ram usage:        1 bytes
  8170 ;; Hardware stack levels used:    1
  8171 ;; Hardware stack levels required when called:    5
  8172 ;; This function calls:
  8173 ;;		Nothing
  8174 ;; This function is called by:
  8175 ;;		_main
  8176 ;;		_SYSTEM_Initialize
  8177 ;; This function uses a non-reentrant model
  8178 ;;
  8179                           
  8180                           
  8181                           ;psect for function _EUSART_Initialize
  8182  0ADF                     _EUSART_Initialize:	
  8183                           
  8184                           ;eusart.c: 78: PIE1bits.RCIE = 0;
  8185                           
  8186                           ;incstack = 0
  8187                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  8188  0ADF  0021               	movlb	1	; select bank1
  8189  0AE0  1291               	bcf	17,5	;volatile
  8190                           
  8191                           ;eusart.c: 79: PIE1bits.TXIE = 0;
  8192  0AE1  1211               	bcf	17,4	;volatile
  8193                           
  8194                           ;eusart.c: 84: BAUDCON = 0x08;
  8195  0AE2  3008               	movlw	8
  8196  0AE3  0023               	movlb	3	; select bank3
  8197  0AE4  009F               	movwf	31	;volatile
  8198                           
  8199                           ;eusart.c: 87: RCSTA = 0x90;
  8200  0AE5  3090               	movlw	144
  8201  0AE6  009D               	movwf	29	;volatile
  8202                           
  8203                           ;eusart.c: 90: TXSTA = 0x24;
  8204  0AE7  3024               	movlw	36
  8205  0AE8  009E               	movwf	30	;volatile
  8206                           
  8207                           ;eusart.c: 93: SPBRGL = 0x67;
  8208  0AE9  3067               	movlw	103
  8209  0AEA  009B               	movwf	27	;volatile
  8210                           
  8211                           ;eusart.c: 96: SPBRGH = 0x00;
  8212  0AEB  019C               	clrf	28	;volatile
  8213                           
  8214                           ;eusart.c: 100: eusartTxHead = 0;
  8215  0AEC  01FC               	clrf	_eusartTxHead	;volatile
  8216                           
  8217                           ;eusart.c: 101: eusartTxTail = 0;
  8218  0AED  01FB               	clrf	_eusartTxTail	;volatile
  8219                           
  8220                           ;eusart.c: 102: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
  8221  0AEE  3008               	movlw	8
  8222  0AEF  0020               	movlb	0	; select bank0
  8223  0AF0  00A1               	movwf	??_EUSART_Initialize
  8224  0AF1  0821               	movf	??_EUSART_Initialize,w
  8225  0AF2  00FA               	movwf	_eusartTxBufferRemaining	;volatile
  8226                           
  8227                           ;eusart.c: 104: eusartRxHead = 0;
  8228  0AF3  01E9               	clrf	_eusartRxHead	;volatile
  8229                           
  8230                           ;eusart.c: 105: eusartRxTail = 0;
  8231  0AF4  01E8               	clrf	_eusartRxTail	;volatile
  8232                           
  8233                           ;eusart.c: 106: eusartRxCount = 0;
  8234  0AF5  01E7               	clrf	_eusartRxCount	;volatile
  8235                           
  8236                           ;eusart.c: 109: PIE1bits.RCIE = 1;
  8237  0AF6  0021               	movlb	1	; select bank1
  8238  0AF7  1691               	bsf	17,5	;volatile
  8239  0AF8  0008               	return
  8240  0AF9                     __end_of_EUSART_Initialize:	
  8241                           
  8242                           	psect	intentry
  8243  0004                     __pintentry:	
  8244 ;; *************** function _INTERRUPT_InterruptManager *****************
  8245 ;; Defined at:
  8246 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  8247 ;; Parameters:    Size  Location     Type
  8248 ;;		None
  8249 ;; Auto vars:     Size  Location     Type
  8250 ;;		None
  8251 ;; Return value:  Size  Location     Type
  8252 ;;                  1    wreg      void 
  8253 ;; Registers used:
  8254 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8255 ;; Tracked objects:
  8256 ;;		On entry : 0/0
  8257 ;;		On exit  : 0/0
  8258 ;;		Unchanged: 0/0
  8259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8262 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8263 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8264 ;;Total ram usage:        1 bytes
  8265 ;; Hardware stack levels used:    1
  8266 ;; Hardware stack levels required when called:    4
  8267 ;; This function calls:
  8268 ;;		_EUSART_Receive_ISR
  8269 ;;		_EUSART_Transmit_ISR
  8270 ;;		_I2C1_ISR
  8271 ;;		_I2C2_BusCollisionISR
  8272 ;;		_I2C2_ISR
  8273 ;; This function is called by:
  8274 ;;		Interrupt level 1
  8275 ;; This function uses a non-reentrant model
  8276 ;;
  8277                           
  8278  0004                     _INTERRUPT_InterruptManager:	
  8279                           
  8280                           ;incstack = 0
  8281  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  8282                           
  8283                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8284  0005  3180               	pagesel	$
  8285  0006  0020               	movlb	0	; select bank0
  8286  0007  087F               	movf	127,w
  8287  0008  00A0               	movwf	??_INTERRUPT_InterruptManager
  8288                           
  8289                           ;interrupt_manager.c: 54: if(INTCONbits.PEIE == 1 && PIE1bits.TXIE == 1 && PIR1bits.TXIF
      +                           == 1)
  8290  0009  1F0B               	btfss	11,6	;volatile
  8291  000A  2815               	goto	i1l323
  8292  000B  0021               	movlb	1	; select bank1
  8293  000C  1E11               	btfss	17,4	;volatile
  8294  000D  2815               	goto	i1l323
  8295  000E  0020               	movlb	0	; select bank0
  8296  000F  1E11               	btfss	17,4	;volatile
  8297  0010  2815               	goto	i1l323
  8298                           
  8299                           ;interrupt_manager.c: 55: {
  8300                           ;interrupt_manager.c: 56: EUSART_Transmit_ISR();
  8301  0011  318A  22F9  3180   	fcall	_EUSART_Transmit_ISR
  8302                           
  8303                           ;interrupt_manager.c: 57: }
  8304  0014  2843               	goto	i1l333
  8305  0015                     i1l323:	
  8306                           
  8307                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits
      +                          .RCIF == 1)
  8308  0015  1F0B               	btfss	11,6	;volatile
  8309  0016  2821               	goto	i1l325
  8310  0017  0021               	movlb	1	; select bank1
  8311  0018  1E91               	btfss	17,5	;volatile
  8312  0019  2821               	goto	i1l325
  8313  001A  0020               	movlb	0	; select bank0
  8314  001B  1E91               	btfss	17,5	;volatile
  8315  001C  2821               	goto	i1l325
  8316                           
  8317                           ;interrupt_manager.c: 59: {
  8318                           ;interrupt_manager.c: 60: EUSART_Receive_ISR();
  8319  001D  318B  2314  3180   	fcall	_EUSART_Receive_ISR
  8320                           
  8321                           ;interrupt_manager.c: 61: }
  8322  0020  2843               	goto	i1l333
  8323  0021                     i1l325:	
  8324                           
  8325                           ;interrupt_manager.c: 62: else if(INTCONbits.PEIE == 1 && PIE1bits.SSP1IE == 1 && PIR1bi
      +                          ts.SSP1IF == 1)
  8326  0021  1F0B               	btfss	11,6	;volatile
  8327  0022  282D               	goto	i1l327
  8328  0023  0021               	movlb	1	; select bank1
  8329  0024  1D91               	btfss	17,3	;volatile
  8330  0025  282D               	goto	i1l327
  8331  0026  0020               	movlb	0	; select bank0
  8332  0027  1D91               	btfss	17,3	;volatile
  8333  0028  282D               	goto	i1l327
  8334                           
  8335                           ;interrupt_manager.c: 63: {
  8336                           ;interrupt_manager.c: 64: I2C1_ISR();
  8337  0029  318C  2451  3180   	fcall	_I2C1_ISR
  8338                           
  8339                           ;interrupt_manager.c: 65: }
  8340  002C  2843               	goto	i1l333
  8341  002D                     i1l327:	
  8342                           
  8343                           ;interrupt_manager.c: 66: else if(INTCONbits.PEIE == 1 && PIE4bits.BCL2IE == 1 && PIR4bi
      +                          ts.BCL2IF == 1)
  8344  002D  1F0B               	btfss	11,6	;volatile
  8345  002E  2839               	goto	i1l329
  8346  002F  0021               	movlb	1	; select bank1
  8347  0030  1C94               	btfss	20,1	;volatile
  8348  0031  2839               	goto	i1l329
  8349  0032  0020               	movlb	0	; select bank0
  8350  0033  1C94               	btfss	20,1	;volatile
  8351  0034  2839               	goto	i1l329
  8352                           
  8353                           ;interrupt_manager.c: 67: {
  8354                           ;interrupt_manager.c: 68: I2C2_BusCollisionISR();
  8355  0035  3180  2002  3180   	fcall	_I2C2_BusCollisionISR
  8356                           
  8357                           ;interrupt_manager.c: 69: }
  8358  0038  2843               	goto	i1l333
  8359  0039                     i1l329:	
  8360                           
  8361                           ;interrupt_manager.c: 70: else if(INTCONbits.PEIE == 1 && PIE4bits.SSP2IE == 1 && PIR4bi
      +                          ts.SSP2IF == 1)
  8362  0039  1F0B               	btfss	11,6	;volatile
  8363  003A  2843               	goto	i1l333
  8364  003B  0021               	movlb	1	; select bank1
  8365  003C  1C14               	btfss	20,0	;volatile
  8366  003D  2843               	goto	i1l333
  8367  003E  0020               	movlb	0	; select bank0
  8368  003F  1C14               	btfss	20,0	;volatile
  8369  0040  2843               	goto	i1l333
  8370                           
  8371                           ;interrupt_manager.c: 71: {
  8372                           ;interrupt_manager.c: 72: I2C2_ISR();
  8373  0041  3183  23E7         	fcall	_I2C2_ISR
  8374  0043                     i1l333:	
  8375                           ;interrupt_manager.c: 74: else
  8376                           ;interrupt_manager.c: 75: {
  8377                           
  8378                           ;interrupt_manager.c: 73: }
  8379                           
  8380  0043  0020               	movlb	0	; select bank0
  8381  0044  0820               	movf	??_INTERRUPT_InterruptManager,w
  8382  0045  00FF               	movwf	127
  8383  0046  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  8384  0047  0009               	retfie
  8385  0048                     __end_of_INTERRUPT_InterruptManager:	
  8386                           
  8387                           	psect	text43
  8388  03E7                     __ptext43:	
  8389 ;; *************** function _I2C2_ISR *****************
  8390 ;; Defined at:
  8391 ;;		line 233 in file "mcc_generated_files/i2c2.c"
  8392 ;; Parameters:    Size  Location     Type
  8393 ;;		None
  8394 ;; Auto vars:     Size  Location     Type
  8395 ;;		None
  8396 ;; Return value:  Size  Location     Type
  8397 ;;                  1    wreg      void 
  8398 ;; Registers used:
  8399 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8400 ;; Tracked objects:
  8401 ;;		On entry : 0/0
  8402 ;;		On exit  : 0/0
  8403 ;;		Unchanged: 0/0
  8404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8406 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8407 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8408 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8409 ;;Total ram usage:        4 bytes
  8410 ;; Hardware stack levels used:    1
  8411 ;; Hardware stack levels required when called:    1
  8412 ;; This function calls:
  8413 ;;		_I2C2_FunctionComplete
  8414 ;;		_I2C2_Stop
  8415 ;; This function is called by:
  8416 ;;		_INTERRUPT_InterruptManager
  8417 ;; This function uses a non-reentrant model
  8418 ;;
  8419                           
  8420                           
  8421                           ;psect for function _I2C2_ISR
  8422  03E7                     _I2C2_ISR:	
  8423                           
  8424                           ;i2c2.c: 236: static uint8_t *pi2c_buf_ptr;
  8425                           ;i2c2.c: 237: static uint16_t i2c_address = 0;
  8426                           ;i2c2.c: 238: static uint8_t i2c_bytes_left = 0;
  8427                           ;i2c2.c: 239: static uint8_t i2c_10bit_address_restart = 0;
  8428                           ;i2c2.c: 241: PIR4bits.SSP2IF = 0;
  8429                           
  8430                           ;incstack = 0
  8431                           ; Regs used in _I2C2_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8432  03E7  0020               	movlb	0	; select bank0
  8433  03E8  1014               	bcf	20,0	;volatile
  8434                           
  8435                           ;i2c2.c: 245: if(SSP2CON1bits.WCOL)
  8436  03E9  0024               	movlb	4	; select bank4
  8437  03EA  1F9D               	btfss	29,7	;volatile
  8438  03EB  2D2A               	goto	i1l3713
  8439                           
  8440                           ;i2c2.c: 246: {
  8441                           ;i2c2.c: 248: SSP2CON1bits.WCOL = 0;
  8442  03EC  139D               	bcf	29,7	;volatile
  8443                           
  8444                           ;i2c2.c: 249: i2c2_state = S_MASTER_IDLE;
  8445  03ED  0021               	movlb	1	; select bank1
  8446  03EE  01C3               	clrf	_i2c2_state^(0+128)
  8447                           
  8448                           ;i2c2.c: 250: *(p_i2c2_current->pTrFlag) = I2C2_MESSAGE_FAIL;
  8449  03EF  0020               	movlb	0	; select bank0
  8450  03F0  086A               	movf	_p_i2c2_current,w
  8451  03F1  3E02               	addlw	2
  8452  03F2  0086               	movwf	6
  8453  03F3  0187               	clrf	7
  8454  03F4  0801               	movf	1,w
  8455  03F5  0086               	movwf	6
  8456  03F6  0187               	clrf	7
  8457  03F7  0181               	clrf	1
  8458  03F8  0A81               	incf	1,f
  8459                           
  8460                           ;i2c2.c: 253: p_i2c2_current = (0);
  8461  03F9  01EA               	clrf	_p_i2c2_current
  8462                           
  8463                           ;i2c2.c: 255: return;
  8464  03FA  0008               	return
  8465  03FB                     i1l184:	
  8466                           ;i2c2.c: 260: {
  8467                           ;i2c2.c: 261: case S_MASTER_IDLE:
  8468                           
  8469                           ;i2c2.c: 256: }
  8470                           ;i2c2.c: 259: switch(i2c2_state)
  8471                           
  8472                           
  8473                           ;i2c2.c: 263: if(i2c2_object.trStatus.s.empty != 1)
  8474  03FB  0020               	movlb	0	; select bank0
  8475  03FC  18E2               	btfsc	_i2c2_object+2,1
  8476  03FD  0008               	return
  8477                           
  8478                           ;i2c2.c: 264: {
  8479                           ;i2c2.c: 266: p_i2c2_current = i2c2_object.pTrHead;
  8480  03FE  0861               	movf	low ((_i2c2_object| 0+1)),w
  8481  03FF  00F2               	movwf	??_I2C2_ISR
  8482  0400  0872               	movf	??_I2C2_ISR,w
  8483  0401  00EA               	movwf	_p_i2c2_current
  8484                           
  8485                           ;i2c2.c: 267: i2c2_trb_count = i2c2_object.pTrHead->count;
  8486  0402  0861               	movf	low ((_i2c2_object| 0+1)),w
  8487  0403  0086               	movwf	6
  8488  0404  0187               	clrf	7
  8489  0405  0801               	movf	1,w
  8490  0406  00F2               	movwf	??_I2C2_ISR
  8491  0407  0872               	movf	??_I2C2_ISR,w
  8492  0408  0021               	movlb	1	; select bank1
  8493  0409  00C2               	movwf	_i2c2_trb_count^(0+128)
  8494                           
  8495                           ;i2c2.c: 268: p_i2c2_trb_current = i2c2_object.pTrHead->ptrb_list;
  8496  040A  0020               	movlb	0	; select bank0
  8497  040B  0861               	movf	low ((_i2c2_object| 0+1)),w
  8498  040C  0086               	movwf	6
  8499  040D  0187               	clrf	7
  8500  040E  3F41               	moviw [1]fsr1
  8501  040F  00EB               	movwf	_p_i2c2_trb_current
  8502                           
  8503                           ;i2c2.c: 270: i2c2_object.pTrHead++;
  8504  0410  3003               	movlw	3
  8505  0411  00F2               	movwf	??_I2C2_ISR
  8506  0412  0872               	movf	??_I2C2_ISR,w
  8507  0413  07E1               	addwf	low ((_i2c2_object| 0+1)),f
  8508                           
  8509                           ;i2c2.c: 273: if(i2c2_object.pTrHead == (i2c2_tr_queue + 1))
  8510  0414  0861               	movf	low ((_i2c2_object| 0+1)),w
  8511  0415  3ADB               	xorlw	(low ((_i2c2_tr_queue| 0+3)))& (0+255)
  8512  0416  1D03               	skipz
  8513  0417  2C1C               	goto	i1l3601
  8514                           
  8515                           ;i2c2.c: 274: {
  8516                           ;i2c2.c: 276: i2c2_object.pTrHead = i2c2_tr_queue;
  8517  0418  30D8               	movlw	(low (_i2c2_tr_queue| 0))& (0+255)
  8518  0419  00F2               	movwf	??_I2C2_ISR
  8519  041A  0872               	movf	??_I2C2_ISR,w
  8520  041B  00E1               	movwf	low ((_i2c2_object| 0+1))
  8521  041C                     i1l3601:	
  8522                           
  8523                           ;i2c2.c: 277: }
  8524                           ;i2c2.c: 281: i2c2_object.trStatus.s.full = 0;
  8525  041C  1062               	bcf	_i2c2_object+2,0
  8526                           
  8527                           ;i2c2.c: 284: if(i2c2_object.pTrHead == i2c2_object.pTrTail)
  8528  041D  0861               	movf	low ((_i2c2_object| 0+1)),w
  8529  041E  0660               	xorwf	_i2c2_object,w
  8530  041F  1903               	btfsc	3,2
  8531                           
  8532                           ;i2c2.c: 285: {
  8533                           ;i2c2.c: 287: i2c2_object.trStatus.s.empty = 1;
  8534  0420  14E2               	bsf	_i2c2_object+2,1
  8535                           
  8536                           ;i2c2.c: 288: }
  8537                           ;i2c2.c: 291: SSP2CON2bits.SEN = 1;
  8538  0421  0024               	movlb	4	; select bank4
  8539  0422  141E               	bsf	30,0	;volatile
  8540                           
  8541                           ;i2c2.c: 294: i2c2_state = S_MASTER_SEND_ADDR;
  8542  0423  3002               	movlw	2
  8543  0424  00F2               	movwf	??_I2C2_ISR
  8544  0425  0872               	movf	??_I2C2_ISR,w
  8545  0426  0021               	movlb	1	; select bank1
  8546  0427  00C3               	movwf	_i2c2_state^(0+128)
  8547                           
  8548                           ;i2c2.c: 295: }
  8549                           ;i2c2.c: 297: break;
  8550  0428  0008               	return
  8551  0429                     i1l189:	
  8552                           ;i2c2.c: 299: case S_MASTER_RESTART:
  8553                           
  8554                           
  8555                           ;i2c2.c: 304: SSP2CON2bits.RSEN = 1;
  8556  0429  0024               	movlb	4	; select bank4
  8557  042A  149E               	bsf	30,1	;volatile
  8558                           
  8559                           ;i2c2.c: 307: i2c2_state = S_MASTER_SEND_ADDR;
  8560  042B  3002               	movlw	2
  8561  042C  00F2               	movwf	??_I2C2_ISR
  8562  042D  0872               	movf	??_I2C2_ISR,w
  8563  042E  0021               	movlb	1	; select bank1
  8564  042F  00C3               	movwf	_i2c2_state^(0+128)
  8565                           
  8566                           ;i2c2.c: 309: break;
  8567  0430  0008               	return
  8568  0431                     i1l190:	
  8569                           ;i2c2.c: 311: case S_MASTER_SEND_ADDR_10BIT_LSB:
  8570                           
  8571                           
  8572                           ;i2c2.c: 313: if(SSP2CON2bits.ACKSTAT)
  8573  0431  0024               	movlb	4	; select bank4
  8574  0432  1F1E               	btfss	30,6	;volatile
  8575  0433  2C3D               	goto	i1l3613
  8576                           
  8577                           ;i2c2.c: 314: {
  8578                           ;i2c2.c: 315: i2c2_object.i2cErrors++;
  8579  0434  3001               	movlw	1
  8580  0435  00F2               	movwf	??_I2C2_ISR
  8581  0436  0872               	movf	??_I2C2_ISR,w
  8582  0437  0020               	movlb	0	; select bank0
  8583  0438  07E4               	addwf	_i2c2_object+4,f
  8584                           
  8585                           ;i2c2.c: 316: I2C2_Stop(I2C2_MESSAGE_ADDRESS_NO_ACK);
  8586  0439  3004               	movlw	4
  8587  043A  318A  22C6         	fcall	_I2C2_Stop
  8588                           
  8589                           ;i2c2.c: 317: }
  8590  043C  0008               	return
  8591  043D                     i1l3613:	
  8592                           
  8593                           ;i2c2.c: 318: else
  8594                           ;i2c2.c: 319: {
  8595                           ;i2c2.c: 321: SSP2BUF = (i2c_address >> 1) & 0x00FF;
  8596  043D  0020               	movlb	0	; select bank0
  8597  043E  086E               	movf	I2C2_ISR@i2c_address+1,w
  8598  043F  00F3               	movwf	??_I2C2_ISR+1
  8599  0440  086D               	movf	I2C2_ISR@i2c_address,w
  8600  0441  00F2               	movwf	??_I2C2_ISR
  8601  0442  36F3               	lsrf	??_I2C2_ISR+1,f
  8602  0443  0CF2               	rrf	??_I2C2_ISR,f
  8603  0444  0872               	movf	??_I2C2_ISR,w
  8604  0445  0024               	movlb	4	; select bank4
  8605  0446  0099               	movwf	25	;volatile
  8606                           
  8607                           ;i2c2.c: 324: if(i2c_address & 0x01)
  8608  0447  0020               	movlb	0	; select bank0
  8609  0448  1C6D               	btfss	I2C2_ISR@i2c_address,0
  8610  0449  2C50               	goto	i1l3619
  8611                           
  8612                           ;i2c2.c: 325: {
  8613                           ;i2c2.c: 328: i2c2_state = S_MASTER_10BIT_RESTART;
  8614  044A  300B               	movlw	11
  8615  044B  00F2               	movwf	??_I2C2_ISR
  8616  044C  0872               	movf	??_I2C2_ISR,w
  8617  044D  0021               	movlb	1	; select bank1
  8618  044E  00C3               	movwf	_i2c2_state^(0+128)
  8619                           
  8620                           ;i2c2.c: 329: }
  8621  044F  0008               	return
  8622  0450                     i1l3619:	
  8623                           
  8624                           ;i2c2.c: 330: else
  8625                           ;i2c2.c: 331: {
  8626                           ;i2c2.c: 333: i2c2_state = S_MASTER_SEND_DATA;
  8627  0450  3003               	movlw	3
  8628  0451  00F2               	movwf	??_I2C2_ISR
  8629  0452  0872               	movf	??_I2C2_ISR,w
  8630  0453  0021               	movlb	1	; select bank1
  8631  0454  00C3               	movwf	_i2c2_state^(0+128)
  8632                           
  8633                           ;i2c2.c: 334: }
  8634                           ;i2c2.c: 335: }
  8635                           ;i2c2.c: 337: break;
  8636  0455  0008               	return
  8637  0456                     i1l195:	
  8638                           ;i2c2.c: 339: case S_MASTER_10BIT_RESTART:
  8639                           
  8640                           
  8641                           ;i2c2.c: 341: if(SSP2CON2bits.ACKSTAT)
  8642  0456  0024               	movlb	4	; select bank4
  8643  0457  1F1E               	btfss	30,6	;volatile
  8644  0458  2C62               	goto	i1l196
  8645                           
  8646                           ;i2c2.c: 342: {
  8647                           ;i2c2.c: 343: i2c2_object.i2cErrors++;
  8648  0459  3001               	movlw	1
  8649  045A  00F2               	movwf	??_I2C2_ISR
  8650  045B  0872               	movf	??_I2C2_ISR,w
  8651  045C  0020               	movlb	0	; select bank0
  8652  045D  07E4               	addwf	_i2c2_object+4,f
  8653                           
  8654                           ;i2c2.c: 344: I2C2_Stop(I2C2_MESSAGE_ADDRESS_NO_ACK);
  8655  045E  3004               	movlw	4
  8656  045F  318A  22C6         	fcall	_I2C2_Stop
  8657                           
  8658                           ;i2c2.c: 345: }
  8659  0461  0008               	return
  8660  0462                     i1l196:	
  8661                           
  8662                           ;i2c2.c: 346: else
  8663                           ;i2c2.c: 347: {
  8664                           ;i2c2.c: 350: SSP2CON2bits.RSEN = 1;
  8665  0462  149E               	bsf	30,1	;volatile
  8666                           
  8667                           ;i2c2.c: 354: i2c_address = 0x00F0 | ((i2c_address >> 8) & 0x0006);
  8668  0463  0020               	movlb	0	; select bank0
  8669  0464  086E               	movf	I2C2_ISR@i2c_address+1,w
  8670  0465  00F3               	movwf	??_I2C2_ISR+1
  8671  0466  086D               	movf	I2C2_ISR@i2c_address,w
  8672  0467  00F2               	movwf	??_I2C2_ISR
  8673  0468  0873               	movf	??_I2C2_ISR+1,w
  8674  0469  00F2               	movwf	??_I2C2_ISR
  8675  046A  01F3               	clrf	??_I2C2_ISR+1
  8676  046B  3006               	movlw	6
  8677  046C  0572               	andwf	??_I2C2_ISR,w
  8678  046D  00F4               	movwf	??_I2C2_ISR+2
  8679  046E  3000               	movlw	0
  8680  046F  0573               	andwf	??_I2C2_ISR+1,w
  8681  0470  00F5               	movwf	??_I2C2_ISR+3
  8682  0471  30F0               	movlw	240
  8683  0472  0474               	iorwf	??_I2C2_ISR+2,w
  8684  0473  00ED               	movwf	I2C2_ISR@i2c_address
  8685  0474  3000               	movlw	0
  8686  0475  0475               	iorwf	??_I2C2_ISR+3,w
  8687  0476  00EE               	movwf	I2C2_ISR@i2c_address+1
  8688                           
  8689                           ;i2c2.c: 357: i2c_address |= 0x0001;
  8690  0477  146D               	bsf	I2C2_ISR@i2c_address,0
  8691                           
  8692                           ;i2c2.c: 360: i2c_10bit_address_restart = 1;
  8693  0478  0021               	movlb	1	; select bank1
  8694  0479  01BF               	clrf	I2C2_ISR@i2c_10bit_address_restart^(0+128)
  8695  047A  0ABF               	incf	I2C2_ISR@i2c_10bit_address_restart^(0+128),f
  8696                           
  8697                           ;i2c2.c: 363: i2c2_state = S_MASTER_SEND_ADDR;
  8698  047B  3002               	movlw	2
  8699  047C  00F2               	movwf	??_I2C2_ISR
  8700  047D  0872               	movf	??_I2C2_ISR,w
  8701  047E  00C3               	movwf	_i2c2_state^(0+128)
  8702                           
  8703                           ;i2c2.c: 364: }
  8704                           ;i2c2.c: 366: break;
  8705  047F  0008               	return
  8706  0480                     i1l3633:	
  8707                           ;i2c2.c: 368: case S_MASTER_SEND_ADDR:
  8708                           
  8709                           
  8710                           ;i2c2.c: 381: if(i2c_10bit_address_restart != 1)
  8711  0480  033F               	decf	I2C2_ISR@i2c_10bit_address_restart^(0+128),w
  8712  0481  1903               	btfsc	3,2
  8713  0482  2C98               	goto	i1l3653
  8714                           
  8715                           ;i2c2.c: 382: {
  8716                           ;i2c2.c: 384: i2c_address = p_i2c2_trb_current->address;
  8717  0483  0020               	movlb	0	; select bank0
  8718  0484  086B               	movf	_p_i2c2_trb_current,w
  8719  0485  0086               	movwf	6
  8720  0486  0187               	clrf	7
  8721  0487  3F40               	moviw [0]fsr1
  8722  0488  00ED               	movwf	I2C2_ISR@i2c_address
  8723  0489  3F41               	moviw [1]fsr1
  8724  048A  00EE               	movwf	I2C2_ISR@i2c_address+1
  8725                           
  8726                           ;i2c2.c: 385: pi2c_buf_ptr = p_i2c2_trb_current->pbuffer;
  8727  048B  086B               	movf	_p_i2c2_trb_current,w
  8728  048C  0086               	movwf	6
  8729  048D  0187               	clrf	7
  8730  048E  3F43               	moviw [3]fsr1
  8731  048F  0021               	movlb	1	; select bank1
  8732  0490  00C1               	movwf	I2C2_ISR@pi2c_buf_ptr^(0+128)
  8733                           
  8734                           ;i2c2.c: 386: i2c_bytes_left = p_i2c2_trb_current->length;
  8735  0491  0020               	movlb	0	; select bank0
  8736  0492  086B               	movf	_p_i2c2_trb_current,w
  8737  0493  0086               	movwf	6
  8738  0494  0187               	clrf	7
  8739  0495  3F42               	moviw [2]fsr1
  8740  0496  0021               	movlb	1	; select bank1
  8741  0497  00C0               	movwf	I2C2_ISR@i2c_bytes_left^(0+128)
  8742  0498                     i1l3653:	
  8743                           ;i2c2.c: 407: }
  8744                           ;i2c2.c: 408: }
  8745                           
  8746                           ;i2c2.c: 406: i2c_10bit_address_restart = 0;
  8747                           
  8748                           ;i2c2.c: 404: i2c2_state = S_MASTER_ACK_ADDR;
  8749                           
  8750                           ;i2c2.c: 400: else
  8751                           ;i2c2.c: 401: {
  8752                           ;i2c2.c: 403: SSP2BUF = i2c_address;
  8753                           
  8754                           ;i2c2.c: 399: }
  8755                           
  8756                           ;i2c2.c: 398: i2c2_state = S_MASTER_SEND_ADDR_10BIT_LSB;
  8757                           
  8758                           ;i2c2.c: 393: {
  8759                           ;i2c2.c: 397: SSP2BUF = 0xF0 | ((i2c_address >> 8) & 0x0006);
  8760                           
  8761                           ;i2c2.c: 391: {
  8762                           ;i2c2.c: 392: if (0 == i2c_10bit_address_restart)
  8763                           
  8764                           ;i2c2.c: 387: }
  8765                           ;i2c2.c: 390: if(!1 && (0x0 != i2c_address))
  8766                           
  8767                           
  8768                           ;i2c2.c: 409: else
  8769                           ;i2c2.c: 410: {
  8770                           ;i2c2.c: 412: SSP2BUF = i2c_address;
  8771  0498  0020               	movlb	0	; select bank0
  8772  0499  086D               	movf	I2C2_ISR@i2c_address,w
  8773  049A  0024               	movlb	4	; select bank4
  8774  049B  0099               	movwf	25	;volatile
  8775                           
  8776                           ;i2c2.c: 413: if(i2c_address & 0x01)
  8777  049C  0020               	movlb	0	; select bank0
  8778  049D  1C6D               	btfss	I2C2_ISR@i2c_address,0
  8779  049E  2CA5               	goto	i1l3659
  8780                           
  8781                           ;i2c2.c: 414: {
  8782                           ;i2c2.c: 416: i2c2_state = S_MASTER_ACK_ADDR;
  8783  049F  3005               	movlw	5
  8784  04A0  00F2               	movwf	??_I2C2_ISR
  8785  04A1  0872               	movf	??_I2C2_ISR,w
  8786  04A2  0021               	movlb	1	; select bank1
  8787  04A3  00C3               	movwf	_i2c2_state^(0+128)
  8788                           
  8789                           ;i2c2.c: 417: }
  8790  04A4  0008               	return
  8791  04A5                     i1l3659:	
  8792                           
  8793                           ;i2c2.c: 418: else
  8794                           ;i2c2.c: 419: {
  8795                           ;i2c2.c: 421: i2c2_state = S_MASTER_SEND_DATA;
  8796  04A5  3003               	movlw	3
  8797  04A6  00F2               	movwf	??_I2C2_ISR
  8798  04A7  0872               	movf	??_I2C2_ISR,w
  8799  04A8  0021               	movlb	1	; select bank1
  8800  04A9  00C3               	movwf	_i2c2_state^(0+128)
  8801                           
  8802                           ;i2c2.c: 422: }
  8803                           ;i2c2.c: 423: }
  8804                           ;i2c2.c: 424: break;
  8805  04AA  0008               	return
  8806  04AB                     i1l206:	
  8807                           ;i2c2.c: 426: case S_MASTER_SEND_DATA:
  8808                           
  8809                           
  8810                           ;i2c2.c: 429: if(SSP2CON2bits.ACKSTAT)
  8811  04AB  0024               	movlb	4	; select bank4
  8812  04AC  1F1E               	btfss	30,6	;volatile
  8813  04AD  2CB9               	goto	i1l3667
  8814                           
  8815                           ;i2c2.c: 430: {
  8816                           ;i2c2.c: 432: i2c2_object.i2cErrors++;
  8817  04AE  3001               	movlw	1
  8818  04AF  00F2               	movwf	??_I2C2_ISR
  8819  04B0  0872               	movf	??_I2C2_ISR,w
  8820  04B1  0020               	movlb	0	; select bank0
  8821  04B2  07E4               	addwf	_i2c2_object+4,f
  8822                           
  8823                           ;i2c2.c: 435: SSP2CON2bits.ACKSTAT = 0;
  8824  04B3  0024               	movlb	4	; select bank4
  8825  04B4  131E               	bcf	30,6	;volatile
  8826                           
  8827                           ;i2c2.c: 438: I2C2_Stop(I2C2_DATA_NO_ACK);
  8828  04B5  3005               	movlw	5
  8829  04B6  318A  22C6         	fcall	_I2C2_Stop
  8830                           
  8831                           ;i2c2.c: 440: }
  8832  04B8  0008               	return
  8833  04B9                     i1l3667:	
  8834                           
  8835                           ;i2c2.c: 441: else
  8836                           ;i2c2.c: 442: {
  8837                           ;i2c2.c: 444: if(i2c_bytes_left-- == 0U)
  8838  04B9  3001               	movlw	1
  8839  04BA  0021               	movlb	1	; select bank1
  8840  04BB  02C0               	subwf	I2C2_ISR@i2c_bytes_left^(0+128),f
  8841  04BC  0A40               	incf	I2C2_ISR@i2c_bytes_left^(0+128),w
  8842  04BD  1D03               	btfss	3,2
  8843  04BE  2CD5               	goto	i1l3675
  8844                           
  8845                           ;i2c2.c: 445: {
  8846                           ;i2c2.c: 449: p_i2c2_trb_current++;
  8847  04BF  3004               	movlw	4
  8848  04C0  00F2               	movwf	??_I2C2_ISR
  8849  04C1  0872               	movf	??_I2C2_ISR,w
  8850  04C2  0020               	movlb	0	; select bank0
  8851  04C3  07EB               	addwf	_p_i2c2_trb_current,f
  8852                           
  8853                           ;i2c2.c: 452: if(--i2c2_trb_count == 0)
  8854  04C4  3001               	movlw	1
  8855  04C5  0021               	movlb	1	; select bank1
  8856  04C6  02C2               	subwf	_i2c2_trb_count^(0+128),f
  8857  04C7  1D03               	btfss	3,2
  8858  04C8  2CCD               	goto	i1l210
  8859                           
  8860                           ;i2c2.c: 453: {
  8861                           ;i2c2.c: 454: I2C2_Stop(I2C2_MESSAGE_COMPLETE);
  8862  04C9  3000               	movlw	0
  8863  04CA  318A  22C6         	fcall	_I2C2_Stop
  8864                           
  8865                           ;i2c2.c: 455: }
  8866  04CC  0008               	return
  8867  04CD                     i1l210:	
  8868                           
  8869                           ;i2c2.c: 456: else
  8870                           ;i2c2.c: 457: {
  8871                           ;i2c2.c: 464: SSP2CON2bits.RSEN = 1;
  8872  04CD  0024               	movlb	4	; select bank4
  8873  04CE  149E               	bsf	30,1	;volatile
  8874                           
  8875                           ;i2c2.c: 467: i2c2_state = S_MASTER_SEND_ADDR;
  8876  04CF  3002               	movlw	2
  8877  04D0  00F2               	movwf	??_I2C2_ISR
  8878  04D1  0872               	movf	??_I2C2_ISR,w
  8879  04D2  0021               	movlb	1	; select bank1
  8880  04D3  00C3               	movwf	_i2c2_state^(0+128)
  8881                           
  8882                           ;i2c2.c: 469: }
  8883                           ;i2c2.c: 470: }
  8884  04D4  0008               	return
  8885  04D5                     i1l3675:	
  8886                           
  8887                           ;i2c2.c: 471: else
  8888                           ;i2c2.c: 472: {
  8889                           ;i2c2.c: 474: SSP2BUF = *pi2c_buf_ptr++;
  8890  04D5  0841               	movf	I2C2_ISR@pi2c_buf_ptr^(0+128),w
  8891  04D6  0086               	movwf	6
  8892  04D7  0187               	clrf	7
  8893  04D8  0801               	movf	1,w
  8894  04D9  0024               	movlb	4	; select bank4
  8895  04DA  0099               	movwf	25	;volatile
  8896  04DB  3001               	movlw	1
  8897  04DC  00F2               	movwf	??_I2C2_ISR
  8898  04DD  0872               	movf	??_I2C2_ISR,w
  8899  04DE  0021               	movlb	1	; select bank1
  8900  04DF  07C1               	addwf	I2C2_ISR@pi2c_buf_ptr^(0+128),f
  8901                           
  8902                           ;i2c2.c: 475: }
  8903                           ;i2c2.c: 476: }
  8904                           ;i2c2.c: 477: break;
  8905  04E0  0008               	return
  8906  04E1                     i1l213:	
  8907                           ;i2c2.c: 479: case S_MASTER_ACK_ADDR:
  8908                           
  8909                           
  8910                           ;i2c2.c: 482: if(SSP2CON2bits.ACKSTAT)
  8911  04E1  0024               	movlb	4	; select bank4
  8912  04E2  1F1E               	btfss	30,6	;volatile
  8913  04E3  2CEF               	goto	i1l214
  8914                           
  8915                           ;i2c2.c: 483: {
  8916                           ;i2c2.c: 486: i2c2_object.i2cErrors++;
  8917  04E4  3001               	movlw	1
  8918  04E5  00F2               	movwf	??_I2C2_ISR
  8919  04E6  0872               	movf	??_I2C2_ISR,w
  8920  04E7  0020               	movlb	0	; select bank0
  8921  04E8  07E4               	addwf	_i2c2_object+4,f
  8922                           
  8923                           ;i2c2.c: 489: I2C2_Stop(I2C2_MESSAGE_ADDRESS_NO_ACK);
  8924  04E9  3004               	movlw	4
  8925  04EA  318A  22C6         	fcall	_I2C2_Stop
  8926                           
  8927                           ;i2c2.c: 492: SSP2CON2bits.ACKSTAT = 0;
  8928  04EC  0024               	movlb	4	; select bank4
  8929  04ED  131E               	bcf	30,6	;volatile
  8930                           
  8931                           ;i2c2.c: 493: }
  8932  04EE  0008               	return
  8933  04EF                     i1l214:	
  8934                           
  8935                           ;i2c2.c: 494: else
  8936                           ;i2c2.c: 495: {
  8937                           ;i2c2.c: 496: SSP2CON2bits.RCEN = 1;
  8938  04EF  159E               	bsf	30,3	;volatile
  8939                           
  8940                           ;i2c2.c: 497: i2c2_state = S_MASTER_ACK_RCV_DATA;
  8941  04F0  3008               	movlw	8
  8942  04F1  00F2               	movwf	??_I2C2_ISR
  8943  04F2  0872               	movf	??_I2C2_ISR,w
  8944  04F3  0021               	movlb	1	; select bank1
  8945  04F4  00C3               	movwf	_i2c2_state^(0+128)
  8946                           
  8947                           ;i2c2.c: 498: }
  8948                           ;i2c2.c: 499: break;
  8949  04F5  0008               	return
  8950  04F6                     i1l3687:	
  8951                           ;i2c2.c: 501: case S_MASTER_RCV_DATA:
  8952                           
  8953                           
  8954                           ;i2c2.c: 506: i2c2_state = S_MASTER_ACK_RCV_DATA;
  8955  04F6  3008               	movlw	8
  8956  04F7  00F2               	movwf	??_I2C2_ISR
  8957  04F8  0872               	movf	??_I2C2_ISR,w
  8958  04F9  00C3               	movwf	_i2c2_state^(0+128)
  8959                           
  8960                           ;i2c2.c: 509: SSP2CON2bits.RCEN = 1;
  8961  04FA  0024               	movlb	4	; select bank4
  8962  04FB  159E               	bsf	30,3	;volatile
  8963                           
  8964                           ;i2c2.c: 511: break;
  8965  04FC  0008               	return
  8966  04FD                     i1l3691:	
  8967                           ;i2c2.c: 513: case S_MASTER_ACK_RCV_DATA:
  8968                           
  8969                           
  8970                           ;i2c2.c: 516: *pi2c_buf_ptr++ = SSP2BUF;
  8971  04FD  0024               	movlb	4	; select bank4
  8972  04FE  0819               	movf	25,w	;volatile
  8973  04FF  00F2               	movwf	??_I2C2_ISR
  8974  0500  0021               	movlb	1	; select bank1
  8975  0501  0841               	movf	I2C2_ISR@pi2c_buf_ptr^(0+128),w
  8976  0502  0086               	movwf	6
  8977  0503  0187               	clrf	7
  8978  0504  0872               	movf	??_I2C2_ISR,w
  8979  0505  0081               	movwf	1
  8980  0506  3001               	movlw	1
  8981  0507  00F2               	movwf	??_I2C2_ISR
  8982  0508  0872               	movf	??_I2C2_ISR,w
  8983  0509  07C1               	addwf	I2C2_ISR@pi2c_buf_ptr^(0+128),f
  8984                           
  8985                           ;i2c2.c: 519: if(--i2c_bytes_left)
  8986  050A  3001               	movlw	1
  8987  050B  02C0               	subwf	I2C2_ISR@i2c_bytes_left^(0+128),f
  8988  050C  1903               	btfsc	3,2
  8989  050D  2D16               	goto	i1l218
  8990                           
  8991                           ;i2c2.c: 520: {
  8992                           ;i2c2.c: 526: SSP2CON2bits.ACKDT = 0;
  8993  050E  0024               	movlb	4	; select bank4
  8994  050F  129E               	bcf	30,5	;volatile
  8995                           
  8996                           ;i2c2.c: 529: i2c2_state = S_MASTER_RCV_DATA;
  8997  0510  3006               	movlw	6
  8998  0511  00F2               	movwf	??_I2C2_ISR
  8999  0512  0872               	movf	??_I2C2_ISR,w
  9000  0513  0021               	movlb	1	; select bank1
  9001  0514  00C3               	movwf	_i2c2_state^(0+128)
  9002                           
  9003                           ;i2c2.c: 530: }
  9004  0515  2D1A               	goto	i1l3703
  9005  0516                     i1l218:	
  9006                           
  9007                           ;i2c2.c: 531: else
  9008                           ;i2c2.c: 532: {
  9009                           ;i2c2.c: 536: SSP2CON2bits.ACKDT = 1;
  9010  0516  0024               	movlb	4	; select bank4
  9011  0517  169E               	bsf	30,5	;volatile
  9012                           
  9013                           ;i2c2.c: 538: I2C2_FunctionComplete();
  9014  0518  318A  229C         	fcall	_I2C2_FunctionComplete
  9015  051A                     i1l3703:	
  9016                           
  9017                           ;i2c2.c: 539: }
  9018                           ;i2c2.c: 542: SSP2CON2bits.ACKEN = 1;
  9019  051A  0024               	movlb	4	; select bank4
  9020  051B  161E               	bsf	30,4	;volatile
  9021                           
  9022                           ;i2c2.c: 543: break;
  9023  051C  0008               	return
  9024  051D                     i1l3705:	
  9025                           ;i2c2.c: 545: case S_MASTER_RCV_STOP:
  9026                           
  9027                           
  9028                           ;i2c2.c: 546: case S_MASTER_SEND_STOP:
  9029                           ;i2c2.c: 549: I2C2_Stop(I2C2_MESSAGE_COMPLETE);
  9030  051D  3000               	movlw	0
  9031  051E  318A  22C6         	fcall	_I2C2_Stop
  9032                           
  9033                           ;i2c2.c: 550: break;
  9034  0520  0008               	return
  9035  0521                     i1l3707:	
  9036                           ;i2c2.c: 552: default:
  9037                           
  9038                           
  9039                           ;i2c2.c: 556: i2c2_object.i2cErrors++;
  9040  0521  3001               	movlw	1
  9041  0522  00F2               	movwf	??_I2C2_ISR
  9042  0523  0872               	movf	??_I2C2_ISR,w
  9043  0524  0020               	movlb	0	; select bank0
  9044  0525  07E4               	addwf	_i2c2_object+4,f
  9045                           
  9046                           ;i2c2.c: 557: I2C2_Stop(I2C2_LOST_STATE);
  9047  0526  3006               	movlw	6
  9048  0527  318A  22C6         	fcall	_I2C2_Stop
  9049                           
  9050                           ;i2c2.c: 560: }
  9051                           
  9052                           ;i2c2.c: 558: break;
  9053  0529  0008               	return
  9054  052A                     i1l3713:	
  9055  052A  0021               	movlb	1	; select bank1
  9056  052B  0843               	movf	_i2c2_state^(0+128),w
  9057                           
  9058                           ; Switch size 1, requested type "space"
  9059                           ; Number of cases is 11, Range of values is 0 to 11
  9060                           ; switch strategies available:
  9061                           ; Name         Instructions Cycles
  9062                           ; direct_byte           30     6 (fixed)
  9063                           ; simple_byte           34    18 (average)
  9064                           ; jumptable            260     6 (fixed)
  9065                           ;	Chosen strategy is direct_byte
  9066  052C  0084               	movwf	4
  9067  052D  300C               	movlw	12
  9068  052E  0204               	subwf	4,w
  9069  052F  1803               	skipnc
  9070  0530  2D21               	goto	i1l3707
  9071  0531  3188               	movlp	high i1S4725
  9072  0532  3504               	lslf	4,w
  9073  0533  3E00               	addlw	low i1S4725
  9074  0534  0082               	movwf	2
  9075  0535  0008               	return
  9076  0536                     __end_of_I2C2_ISR:	
  9077                           
  9078                           	psect	swtext1
  9079  0800                     __pswtext1:	
  9080  0800                     i1S4725:	
  9081  0800  3183  2BFB         	ljmp	i1l184
  9082  0802  3184  2C29         	ljmp	i1l189
  9083  0804  3184  2C80         	ljmp	i1l3633
  9084  0806  3184  2CAB         	ljmp	i1l206
  9085  0808  3185  2D1D         	ljmp	i1l3705
  9086  080A  3184  2CE1         	ljmp	i1l213
  9087  080C  3184  2CF6         	ljmp	i1l3687
  9088  080E  3185  2D1D         	ljmp	i1l3705
  9089  0810  3184  2CFD         	ljmp	i1l3691
  9090  0812  3185  2D21         	ljmp	i1l3707
  9091  0814  3184  2C31         	ljmp	i1l190
  9092  0816  3184  2C56         	ljmp	i1l195
  9093                           
  9094                           	psect	text44
  9095  0AC6                     __ptext44:	
  9096 ;; *************** function _I2C2_Stop *****************
  9097 ;; Defined at:
  9098 ;;		line 581 in file "mcc_generated_files/i2c2.c"
  9099 ;; Parameters:    Size  Location     Type
  9100 ;;  completion_c    1    wreg     enum E2972
  9101 ;; Auto vars:     Size  Location     Type
  9102 ;;  completion_c    1    1[COMMON] enum E2972
  9103 ;; Return value:  Size  Location     Type
  9104 ;;                  1    wreg      void 
  9105 ;; Registers used:
  9106 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9107 ;; Tracked objects:
  9108 ;;		On entry : 0/0
  9109 ;;		On exit  : 0/0
  9110 ;;		Unchanged: 0/0
  9111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9113 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9114 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9115 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9116 ;;Total ram usage:        2 bytes
  9117 ;; Hardware stack levels used:    1
  9118 ;; This function calls:
  9119 ;;		Nothing
  9120 ;; This function is called by:
  9121 ;;		_I2C2_ISR
  9122 ;; This function uses a non-reentrant model
  9123 ;;
  9124                           
  9125                           
  9126                           ;psect for function _I2C2_Stop
  9127  0AC6                     _I2C2_Stop:	
  9128                           
  9129                           ;incstack = 0
  9130                           ; Regs used in _I2C2_Stop: [wreg+fsr1l+fsr1h+status,2+status,0]
  9131                           ;I2C2_Stop@completion_code stored from wreg
  9132  0AC6  00F1               	movwf	I2C2_Stop@completion_code
  9133                           
  9134                           ;i2c2.c: 584: SSP2CON2bits.PEN = 1;
  9135  0AC7  0024               	movlb	4	; select bank4
  9136  0AC8  151E               	bsf	30,2	;volatile
  9137                           
  9138                           ;i2c2.c: 587: if (p_i2c2_current->pTrFlag != (0))
  9139  0AC9  0020               	movlb	0	; select bank0
  9140  0ACA  086A               	movf	_p_i2c2_current,w
  9141  0ACB  3E02               	addlw	2
  9142  0ACC  0086               	movwf	6
  9143  0ACD  0187               	clrf	7
  9144  0ACE  0801               	movf	1,w
  9145  0ACF  1903               	btfsc	3,2
  9146  0AD0  2ADC               	goto	i1l3405
  9147                           
  9148                           ;i2c2.c: 588: {
  9149                           ;i2c2.c: 590: *(p_i2c2_current->pTrFlag) = completion_code;
  9150  0AD1  0871               	movf	I2C2_Stop@completion_code,w
  9151  0AD2  00F0               	movwf	??_I2C2_Stop
  9152  0AD3  086A               	movf	_p_i2c2_current,w
  9153  0AD4  3E02               	addlw	2
  9154  0AD5  0086               	movwf	6
  9155  0AD6  0187               	clrf	7
  9156  0AD7  0801               	movf	1,w
  9157  0AD8  0086               	movwf	6
  9158  0AD9  0187               	clrf	7
  9159  0ADA  0870               	movf	??_I2C2_Stop,w
  9160  0ADB  0081               	movwf	1
  9161  0ADC                     i1l3405:	
  9162                           
  9163                           ;i2c2.c: 591: }
  9164                           ;i2c2.c: 594: i2c2_state = S_MASTER_IDLE;
  9165  0ADC  0021               	movlb	1	; select bank1
  9166  0ADD  01C3               	clrf	_i2c2_state^(0+128)
  9167  0ADE  0008               	return
  9168  0ADF                     __end_of_I2C2_Stop:	
  9169                           
  9170                           	psect	text45
  9171  0A9C                     __ptext45:	
  9172 ;; *************** function _I2C2_FunctionComplete *****************
  9173 ;; Defined at:
  9174 ;;		line 563 in file "mcc_generated_files/i2c2.c"
  9175 ;; Parameters:    Size  Location     Type
  9176 ;;		None
  9177 ;; Auto vars:     Size  Location     Type
  9178 ;;		None
  9179 ;; Return value:  Size  Location     Type
  9180 ;;                  1    wreg      void 
  9181 ;; Registers used:
  9182 ;;		wreg, status,2, status,0
  9183 ;; Tracked objects:
  9184 ;;		On entry : 0/0
  9185 ;;		On exit  : 0/0
  9186 ;;		Unchanged: 0/0
  9187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9189 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9190 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9191 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9192 ;;Total ram usage:        1 bytes
  9193 ;; Hardware stack levels used:    1
  9194 ;; This function calls:
  9195 ;;		Nothing
  9196 ;; This function is called by:
  9197 ;;		_I2C2_ISR
  9198 ;; This function uses a non-reentrant model
  9199 ;;
  9200                           
  9201                           
  9202                           ;psect for function _I2C2_FunctionComplete
  9203  0A9C                     _I2C2_FunctionComplete:	
  9204                           
  9205                           ;i2c2.c: 567: p_i2c2_trb_current++;
  9206                           
  9207                           ;incstack = 0
  9208                           ; Regs used in _I2C2_FunctionComplete: [wreg+status,2+status,0]
  9209  0A9C  3004               	movlw	4
  9210  0A9D  00F0               	movwf	??_I2C2_FunctionComplete
  9211  0A9E  0870               	movf	??_I2C2_FunctionComplete,w
  9212  0A9F  0020               	movlb	0	; select bank0
  9213  0AA0  07EB               	addwf	_p_i2c2_trb_current,f
  9214                           
  9215                           ;i2c2.c: 570: if(--i2c2_trb_count == 0)
  9216  0AA1  3001               	movlw	1
  9217  0AA2  0021               	movlb	1	; select bank1
  9218  0AA3  02C2               	subwf	_i2c2_trb_count^(0+128),f
  9219  0AA4  1D03               	btfss	3,2
  9220  0AA5  2AAB               	goto	i1l225
  9221                           
  9222                           ;i2c2.c: 571: {
  9223                           ;i2c2.c: 572: i2c2_state = S_MASTER_SEND_STOP;
  9224  0AA6  3004               	movlw	4
  9225  0AA7  00F0               	movwf	??_I2C2_FunctionComplete
  9226  0AA8  0870               	movf	??_I2C2_FunctionComplete,w
  9227  0AA9  00C3               	movwf	_i2c2_state^(0+128)
  9228                           
  9229                           ;i2c2.c: 573: }
  9230  0AAA  0008               	return
  9231  0AAB                     i1l225:	
  9232                           
  9233                           ;i2c2.c: 574: else
  9234                           ;i2c2.c: 575: {
  9235                           ;i2c2.c: 576: i2c2_state = S_MASTER_RESTART;
  9236  0AAB  01C3               	clrf	_i2c2_state^(0+128)
  9237  0AAC  0AC3               	incf	_i2c2_state^(0+128),f
  9238  0AAD  0008               	return
  9239  0AAE                     __end_of_I2C2_FunctionComplete:	
  9240                           
  9241                           	psect	text46
  9242  0002                     __ptext46:	
  9243 ;; *************** function _I2C2_BusCollisionISR *****************
  9244 ;; Defined at:
  9245 ;;		line 728 in file "mcc_generated_files/i2c2.c"
  9246 ;; Parameters:    Size  Location     Type
  9247 ;;		None
  9248 ;; Auto vars:     Size  Location     Type
  9249 ;;		None
  9250 ;; Return value:  Size  Location     Type
  9251 ;;                  1    wreg      void 
  9252 ;; Registers used:
  9253 ;;		None
  9254 ;; Tracked objects:
  9255 ;;		On entry : 0/0
  9256 ;;		On exit  : 0/0
  9257 ;;		Unchanged: 0/0
  9258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9262 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9263 ;;Total ram usage:        0 bytes
  9264 ;; Hardware stack levels used:    1
  9265 ;; This function calls:
  9266 ;;		Nothing
  9267 ;; This function is called by:
  9268 ;;		_INTERRUPT_InterruptManager
  9269 ;; This function uses a non-reentrant model
  9270 ;;
  9271                           
  9272                           
  9273                           ;psect for function _I2C2_BusCollisionISR
  9274  0002                     _I2C2_BusCollisionISR:	
  9275                           
  9276                           ;incstack = 0
  9277                           ; Regs used in _I2C2_BusCollisionISR: []
  9278  0002  0008               	return
  9279  0003                     __end_of_I2C2_BusCollisionISR:	
  9280                           
  9281                           	psect	text47
  9282  0C51                     __ptext47:	
  9283 ;; *************** function _I2C1_ISR *****************
  9284 ;; Defined at:
  9285 ;;		line 57 in file "mcc_generated_files/i2c1.c"
  9286 ;; Parameters:    Size  Location     Type
  9287 ;;		None
  9288 ;; Auto vars:     Size  Location     Type
  9289 ;;  i2c_data        1    9[COMMON] unsigned char 
  9290 ;; Return value:  Size  Location     Type
  9291 ;;                  1    wreg      void 
  9292 ;; Registers used:
  9293 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9294 ;; Tracked objects:
  9295 ;;		On entry : 0/0
  9296 ;;		On exit  : 0/0
  9297 ;;		Unchanged: 0/0
  9298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9300 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9301 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9302 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9303 ;;Total ram usage:        2 bytes
  9304 ;; Hardware stack levels used:    1
  9305 ;; Hardware stack levels required when called:    3
  9306 ;; This function calls:
  9307 ;;		_I2C1_StatusCallback
  9308 ;; This function is called by:
  9309 ;;		_INTERRUPT_InterruptManager
  9310 ;; This function uses a non-reentrant model
  9311 ;;
  9312                           
  9313                           
  9314                           ;psect for function _I2C1_ISR
  9315  0C51                     _I2C1_ISR:	
  9316                           
  9317                           ;i2c1.c: 59: uint8_t i2c_data = 0x55;
  9318                           
  9319                           ;incstack = 0
  9320                           ; Regs used in _I2C1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9321  0C51  3055               	movlw	85
  9322  0C52  00F8               	movwf	??_I2C1_ISR
  9323  0C53  0878               	movf	??_I2C1_ISR,w
  9324  0C54  00F9               	movwf	I2C1_ISR@i2c_data
  9325                           
  9326                           ;i2c1.c: 64: PIR1bits.SSP1IF = 0;
  9327  0C55  0020               	movlb	0	; select bank0
  9328  0C56  1191               	bcf	17,3	;volatile
  9329                           
  9330                           ;i2c1.c: 65: i2c_data = SSP1BUF;
  9331  0C57  0024               	movlb	4	; select bank4
  9332  0C58  0811               	movf	17,w	;volatile
  9333  0C59  00F8               	movwf	??_I2C1_ISR
  9334  0C5A  0878               	movf	??_I2C1_ISR,w
  9335  0C5B  00F9               	movwf	I2C1_ISR@i2c_data
  9336                           
  9337                           ;i2c1.c: 66: if(1 == SSP1STATbits.R_nW)
  9338  0C5C  1D14               	btfss	20,2	;volatile
  9339  0C5D  2C65               	goto	i1l64
  9340                           
  9341                           ;i2c1.c: 67: {
  9342                           ;i2c1.c: 68: if((1 == SSP1STATbits.D_nA) && (1 == SSP1CON2bits.ACKSTAT))
  9343  0C5E  1A94               	btfsc	20,5	;volatile
  9344  0C5F  1F16               	btfss	22,6	;volatile
  9345  0C60  2C63               	goto	i1l3545
  9346                           
  9347                           ;i2c1.c: 69: {
  9348                           ;i2c1.c: 71: I2C1_StatusCallback(I2C1_SLAVE_READ_COMPLETED);
  9349  0C61  3003               	movlw	3
  9350  0C62  2C73               	goto	L3
  9351  0C63                     i1l3545:	
  9352                           ;i2c1.c: 72: }
  9353                           
  9354                           
  9355                           ;i2c1.c: 73: else
  9356                           ;i2c1.c: 74: {
  9357                           ;i2c1.c: 76: I2C1_StatusCallback(I2C1_SLAVE_READ_REQUEST);
  9358  0C63  3001               	movlw	1
  9359  0C64  2C73               	goto	L3
  9360  0C65                     i1l64:	
  9361                           ;i2c1.c: 77: }
  9362                           ;i2c1.c: 78: }
  9363                           
  9364                           
  9365                           ;i2c1.c: 79: else if(0 == SSP1STATbits.D_nA)
  9366  0C65  1A94               	btfsc	20,5	;volatile
  9367  0C66  2C6E               	goto	i1l3553
  9368                           
  9369                           ;i2c1.c: 80: {
  9370                           ;i2c1.c: 83: if(0x00 == i2c_data)
  9371  0C67  0879               	movf	I2C1_ISR@i2c_data,w
  9372  0C68  1D03               	btfss	3,2
  9373  0C69  2C6C               	goto	i1l3551
  9374                           
  9375                           ;i2c1.c: 84: {
  9376                           ;i2c1.c: 86: I2C1_StatusCallback(I2C1_SLAVE_GENERAL_CALL_REQUEST);
  9377  0C6A  3004               	movlw	4
  9378  0C6B  2C73               	goto	L3
  9379  0C6C                     i1l3551:	
  9380                           ;i2c1.c: 87: }
  9381                           
  9382                           
  9383                           ;i2c1.c: 88: else
  9384                           ;i2c1.c: 89: {
  9385                           ;i2c1.c: 91: I2C1_StatusCallback(I2C1_SLAVE_WRITE_REQUEST);
  9386  0C6C  3000               	movlw	0
  9387  0C6D  2C73               	goto	L3
  9388  0C6E                     i1l3553:	
  9389                           ;i2c1.c: 92: }
  9390                           ;i2c1.c: 93: }
  9391                           
  9392                           
  9393                           ;i2c1.c: 94: else
  9394                           ;i2c1.c: 95: {
  9395                           ;i2c1.c: 96: I2C_slaveWriteData = i2c_data;
  9396  0C6E  0879               	movf	I2C1_ISR@i2c_data,w
  9397  0C6F  00F8               	movwf	??_I2C1_ISR
  9398  0C70  0878               	movf	??_I2C1_ISR,w
  9399  0C71  00FD               	movwf	_I2C_slaveWriteData	;volatile
  9400                           
  9401                           ;i2c1.c: 99: I2C1_StatusCallback(I2C1_SLAVE_WRITE_COMPLETED);
  9402  0C72  3002               	movlw	2
  9403  0C73                     L3:	
  9404  0C73  3185  2536         	fcall	_I2C1_StatusCallback
  9405                           
  9406                           ;i2c1.c: 100: }
  9407                           ;i2c1.c: 102: SSP1CON1bits.CKP = 1;
  9408  0C75  0024               	movlb	4	; select bank4
  9409  0C76  1615               	bsf	21,4	;volatile
  9410  0C77  0008               	return
  9411  0C78                     __end_of_I2C1_ISR:	
  9412                           
  9413                           	psect	text48
  9414  0536                     __ptext48:	
  9415 ;; *************** function _I2C1_StatusCallback *****************
  9416 ;; Defined at:
  9417 ;;		line 106 in file "mcc_generated_files/i2c1.c"
  9418 ;; Parameters:    Size  Location     Type
  9419 ;;  i2c_bus_stat    1    wreg     enum E3053
  9420 ;; Auto vars:     Size  Location     Type
  9421 ;;  i2c_bus_stat    1    7[COMMON] enum E3053
  9422 ;;  pdata           2    5[COMMON] PTR unsigned char 
  9423 ;;		 -> type_no_data(1), PROTOCOL_Send_uint8_t@pbuf(1), sendbuf(16), readbuf.length(1), 
  9424 ;;		 -> readbuf.type(1), readbuf(6), 
  9425 ;; Return value:  Size  Location     Type
  9426 ;;                  1    wreg      void 
  9427 ;; Registers used:
  9428 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9429 ;; Tracked objects:
  9430 ;;		On entry : 0/0
  9431 ;;		On exit  : 0/0
  9432 ;;		Unchanged: 0/0
  9433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9435 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9436 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9437 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9438 ;;Total ram usage:        4 bytes
  9439 ;; Hardware stack levels used:    1
  9440 ;; Hardware stack levels required when called:    2
  9441 ;; This function calls:
  9442 ;;		_PROTOCOL_Backplane_Slave_Enabled
  9443 ;;		_PROTOCOL_I2C_GET
  9444 ;;		_PROTOCOL_I2C_SEN
  9445 ;;		_PROTOCOL_I2C_WHO
  9446 ;;		_PROTOCOL_INV
  9447 ;;		_PROTOCOL_RST
  9448 ;;		_PROTOCOL_Read_Lock
  9449 ;;		i1_PROTOCOL_EXT
  9450 ;;		i1_PROTOCOL_SAV
  9451 ;;		i1_PROTOCOL_SET
  9452 ;;		i1_PROTOCOL_STA
  9453 ;;		i1_PROTOCOL_STP
  9454 ;; This function is called by:
  9455 ;;		_I2C1_ISR
  9456 ;; This function uses a non-reentrant model
  9457 ;;
  9458                           
  9459                           
  9460                           ;psect for function _I2C1_StatusCallback
  9461  0536                     _I2C1_StatusCallback:	
  9462                           
  9463                           ;incstack = 0
  9464                           ; Regs used in _I2C1_StatusCallback: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9465                           ;I2C1_StatusCallback@i2c_bus_state stored from wreg
  9466  0536  00F7               	movwf	I2C1_StatusCallback@i2c_bus_state
  9467                           
  9468                           ;i2c1.c: 109: static uint8_t slaveWriteType = SLAVE_NORMAL_DATA;
  9469                           ;i2c1.c: 110: static uint8_t next = 0x00;
  9470                           ;i2c1.c: 111: static uint8_t ext_len = 0;
  9471                           ;i2c1.c: 112: static uint8_t ext_cnt = 0;
  9472                           ;i2c1.c: 113: static char ext_buf[48];
  9473                           ;i2c1.c: 114: uint8_t *pdata;
  9474                           ;i2c1.c: 115: switch (i2c_bus_state)
  9475  0537  2DF6               	goto	i1l3377
  9476  0538                     i1l86:	
  9477                           ;i2c1.c: 116: {
  9478                           ;i2c1.c: 117: case I2C1_SLAVE_WRITE_REQUEST:
  9479                           
  9480                           
  9481                           ;i2c1.c: 118: slaveWriteType = SLAVE_DATA_ADDRESS;
  9482  0538  0021               	movlb	1	; select bank1
  9483  0539  01C6               	clrf	I2C1_StatusCallback@slaveWriteType^(0+128)
  9484  053A  0AC6               	incf	I2C1_StatusCallback@slaveWriteType^(0+128),f
  9485                           
  9486                           ;i2c1.c: 119: break;
  9487  053B  0008               	return
  9488  053C                     i1l3303:	
  9489                           ;i2c1.c: 121: case I2C1_SLAVE_GENERAL_CALL_REQUEST:
  9490                           
  9491                           
  9492                           ;i2c1.c: 123: slaveWriteType = SLAVE_GENERAL_CALL;
  9493  053C  3002               	movlw	2
  9494  053D  00F4               	movwf	??_I2C1_StatusCallback
  9495  053E  0874               	movf	??_I2C1_StatusCallback,w
  9496  053F  0021               	movlb	1	; select bank1
  9497  0540  00C6               	movwf	I2C1_StatusCallback@slaveWriteType^(0+128)
  9498                           
  9499                           ;i2c1.c: 124: break;
  9500  0541  0008               	return
  9501  0542                     i1l3305:	
  9502                           ;i2c1.c: 132: case 0x01:
  9503                           
  9504                           ;i2c1.c: 131: switch(next) {
  9505                           
  9506                           ;i2c1.c: 129: {
  9507                           ;i2c1.c: 130: case SLAVE_DATA_ADDRESS:
  9508                           
  9509                           ;i2c1.c: 128: switch(slaveWriteType)
  9510                           
  9511                           ;i2c1.c: 126: case I2C1_SLAVE_WRITE_COMPLETED:
  9512                           
  9513                           
  9514                           ;i2c1.c: 133: PROTOCOL_SET(I2C_slaveWriteData);
  9515  0542  087D               	movf	_I2C_slaveWriteData,w	;volatile
  9516  0543  318A  2237  3185   	fcall	i1_PROTOCOL_SET
  9517  0546  2DB6               	goto	i1l3351
  9518  0547                     i1l3309:	
  9519                           ;i2c1.c: 138: case 0x04:
  9520                           
  9521                           ;i2c1.c: 137: switch(I2C_slaveWriteData) {
  9522                           
  9523                           ;i2c1.c: 136: case 0x00:
  9524                           
  9525                           ;i2c1.c: 135: break;
  9526                           
  9527                           ;i2c1.c: 134: next = 0x00;
  9528                           
  9529                           
  9530                           ;i2c1.c: 139: PROTOCOL_STA();
  9531  0547  318A  2216  3185   	fcall	i1_PROTOCOL_STA
  9532                           
  9533                           ;i2c1.c: 140: break;
  9534  054A  2DCF               	goto	i1l3361
  9535  054B                     i1l3311:	
  9536                           ;i2c1.c: 141: case 0x05:
  9537                           
  9538                           
  9539                           ;i2c1.c: 142: PROTOCOL_STP();
  9540  054B  318A  2202  3185   	fcall	i1_PROTOCOL_STP
  9541                           
  9542                           ;i2c1.c: 143: break;
  9543  054E  2DCF               	goto	i1l3361
  9544  054F                     i1l3313:	
  9545                           ;i2c1.c: 144: case 0x03:
  9546                           
  9547                           
  9548                           ;i2c1.c: 145: PROTOCOL_SAV();
  9549  054F  318A  2245  3185   	fcall	i1_PROTOCOL_SAV
  9550                           
  9551                           ;i2c1.c: 146: break;
  9552  0552  2DCF               	goto	i1l3361
  9553  0553                     i1l3315:	
  9554                           ;i2c1.c: 147: case 0x06:
  9555                           
  9556                           
  9557                           ;i2c1.c: 148: PROTOCOL_INV();
  9558  0553  318A  2212  3185   	fcall	_PROTOCOL_INV
  9559                           
  9560                           ;i2c1.c: 149: break;
  9561  0556  2DCF               	goto	i1l3361
  9562  0557                     i1l3317:	
  9563                           ;i2c1.c: 150: case 0x0c:
  9564                           
  9565                           
  9566                           ;i2c1.c: 151: PROTOCOL_RST();
  9567  0557  318A  2257  3185   	fcall	_PROTOCOL_RST
  9568                           
  9569                           ;i2c1.c: 152: break;
  9570  055A  2DCF               	goto	i1l3361
  9571  055B                     i1l103:	
  9572                           ;i2c1.c: 153: case 0x08:
  9573                           
  9574                           
  9575                           ;i2c1.c: 154: next = 0x01;
  9576  055B  01EC               	clrf	I2C1_StatusCallback@next
  9577  055C  0AEC               	incf	I2C1_StatusCallback@next,f
  9578                           
  9579                           ;i2c1.c: 155: break;
  9580  055D  2DCF               	goto	i1l3361
  9581  055E                     i1l3319:	
  9582                           ;i2c1.c: 156: case 0x0a:
  9583                           
  9584                           
  9585                           ;i2c1.c: 157: next = 0x02;
  9586  055E  3002               	movlw	2
  9587  055F  00F4               	movwf	??_I2C1_StatusCallback
  9588  0560  0874               	movf	??_I2C1_StatusCallback,w
  9589  0561  2D98               	goto	L4
  9590  0562                     i1l3323:	
  9591                           ;i2c1.c: 159: }
  9592                           
  9593                           ;i2c1.c: 158: break;
  9594                           
  9595  0562  087D               	movf	_I2C_slaveWriteData,w	;volatile
  9596                           
  9597                           ; Switch size 1, requested type "space"
  9598                           ; Number of cases is 7, Range of values is 3 to 12
  9599                           ; switch strategies available:
  9600                           ; Name         Instructions Cycles
  9601                           ; simple_byte           22    12 (average)
  9602                           ; direct_byte           29     9 (fixed)
  9603                           ; jumptable            263     9 (fixed)
  9604                           ;	Chosen strategy is simple_byte
  9605  0563  3A03               	xorlw	3	; case 3
  9606  0564  1903               	skipnz
  9607  0565  2D4F               	goto	i1l3313
  9608  0566  3A07               	xorlw	7	; case 4
  9609  0567  1903               	skipnz
  9610  0568  2D47               	goto	i1l3309
  9611  0569  3A01               	xorlw	1	; case 5
  9612  056A  1903               	skipnz
  9613  056B  2D4B               	goto	i1l3311
  9614  056C  3A03               	xorlw	3	; case 6
  9615  056D  1903               	skipnz
  9616  056E  2D53               	goto	i1l3315
  9617  056F  3A0E               	xorlw	14	; case 8
  9618  0570  1903               	skipnz
  9619  0571  2D5B               	goto	i1l103
  9620  0572  3A02               	xorlw	2	; case 10
  9621  0573  1903               	skipnz
  9622  0574  2D5E               	goto	i1l3319
  9623  0575  3A06               	xorlw	6	; case 12
  9624  0576  1903               	skipnz
  9625  0577  2D57               	goto	i1l3317
  9626  0578  2DCF               	goto	i1l3361
  9627                           
  9628                           ;i2c1.c: 161: }
  9629                           
  9630                           ;i2c1.c: 160: break;
  9631  0579  2DCF               	goto	i1l3361
  9632  057A                     i1l3327:	
  9633  057A  0020               	movlb	0	; select bank0
  9634  057B  086C               	movf	I2C1_StatusCallback@next,w
  9635                           
  9636                           ; Switch size 1, requested type "space"
  9637                           ; Number of cases is 2, Range of values is 0 to 1
  9638                           ; switch strategies available:
  9639                           ; Name         Instructions Cycles
  9640                           ; simple_byte            7     4 (average)
  9641                           ; direct_byte           10     6 (fixed)
  9642                           ; jumptable            260     6 (fixed)
  9643                           ;	Chosen strategy is simple_byte
  9644  057C  3A00               	xorlw	0	; case 0
  9645  057D  1903               	skipnz
  9646  057E  2D62               	goto	i1l3323
  9647  057F  3A01               	xorlw	1	; case 1
  9648  0580  1903               	skipnz
  9649  0581  2D42               	goto	i1l3305
  9650  0582  2DCF               	goto	i1l3361
  9651                           
  9652                           ;i2c1.c: 162: break;
  9653  0583  2DCF               	goto	i1l3361
  9654  0584                     i1l3329:	
  9655                           ;i2c1.c: 164: case SLAVE_GENERAL_CALL:
  9656                           
  9657                           
  9658                           ;i2c1.c: 165: if (I2C_slaveWriteData == 0x02) {
  9659  0584  3002               	movlw	2
  9660  0585  067D               	xorwf	_I2C_slaveWriteData,w	;volatile
  9661  0586  1D03               	btfss	3,2
  9662  0587  2DCF               	goto	i1l3361
  9663                           
  9664                           ;i2c1.c: 166: SSP1CON2bits.GCEN = 0;
  9665  0588  0024               	movlb	4	; select bank4
  9666  0589  1396               	bcf	22,7	;volatile
  9667                           
  9668                           ;i2c1.c: 167: PROTOCOL_Backplane_Slave_Enabled();
  9669  058A  318A  220E  3185   	fcall	_PROTOCOL_Backplane_Slave_Enabled
  9670                           
  9671                           ;i2c1.c: 168: }
  9672                           ;i2c1.c: 169: break;
  9673  058D  2DCF               	goto	i1l3361
  9674  058E                     i1l3335:	
  9675                           ;i2c1.c: 173: case 0x02:
  9676                           
  9677                           ;i2c1.c: 172: switch(next) {
  9678                           
  9679                           ;i2c1.c: 171: case SLAVE_NORMAL_DATA:
  9680                           
  9681                           
  9682                           ;i2c1.c: 174: ext_len = I2C_slaveWriteData;
  9683  058E  087D               	movf	_I2C_slaveWriteData,w	;volatile
  9684  058F  00F4               	movwf	??_I2C1_StatusCallback
  9685  0590  0874               	movf	??_I2C1_StatusCallback,w
  9686  0591  0021               	movlb	1	; select bank1
  9687  0592  00C5               	movwf	I2C1_StatusCallback@ext_len^(0+128)
  9688                           
  9689                           ;i2c1.c: 175: ext_cnt = 0;
  9690  0593  01C4               	clrf	I2C1_StatusCallback@ext_cnt^(0+128)
  9691                           
  9692                           ;i2c1.c: 176: next = 0x03;
  9693  0594  3003               	movlw	3
  9694  0595  00F4               	movwf	??_I2C1_StatusCallback
  9695  0596  0874               	movf	??_I2C1_StatusCallback,w
  9696  0597  0020               	movlb	0	; select bank0
  9697  0598                     L4:	
  9698  0598  00EC               	movwf	I2C1_StatusCallback@next
  9699                           
  9700                           ;i2c1.c: 177: break;
  9701  0599  2DCF               	goto	i1l3361
  9702  059A                     i1l3341:	
  9703                           ;i2c1.c: 178: case 0x03:
  9704                           
  9705                           
  9706                           ;i2c1.c: 179: ext_buf[ext_cnt++] = (char)I2C_slaveWriteData;
  9707  059A  087D               	movf	_I2C_slaveWriteData,w	;volatile
  9708  059B  00F4               	movwf	??_I2C1_StatusCallback
  9709  059C  0021               	movlb	1	; select bank1
  9710  059D  0844               	movf	I2C1_StatusCallback@ext_cnt^(0+128),w
  9711  059E  3EA0               	addlw	(low (I2C1_StatusCallback@ext_buf| (0+256)))& (0+255)
  9712  059F  0086               	movwf	6
  9713  05A0  3001               	movlw	1	; select bank3/4
  9714  05A1  0087               	movwf	7
  9715  05A2  0874               	movf	??_I2C1_StatusCallback,w
  9716  05A3  0081               	movwf	1
  9717  05A4  3001               	movlw	1
  9718  05A5  00F4               	movwf	??_I2C1_StatusCallback
  9719  05A6  0874               	movf	??_I2C1_StatusCallback,w
  9720  05A7  07C4               	addwf	I2C1_StatusCallback@ext_cnt^(0+128),f
  9721                           
  9722                           ;i2c1.c: 180: if (ext_cnt >= ext_len) {
  9723  05A8  0845               	movf	I2C1_StatusCallback@ext_len^(0+128),w
  9724  05A9  0244               	subwf	I2C1_StatusCallback@ext_cnt^(0+128),w
  9725  05AA  1C03               	skipc
  9726  05AB  2DCF               	goto	i1l3361
  9727                           
  9728                           ;i2c1.c: 181: if (!PROTOCOL_Read_Lock()) PROTOCOL_EXT(&ext_buf[0]);
  9729  05AC  3189  21FF  3185   	fcall	_PROTOCOL_Read_Lock
  9730  05AF  3A00               	xorlw	0
  9731  05B0  1D03               	skipz
  9732  05B1  2DB6               	goto	i1l3351
  9733  05B2  30A0               	movlw	(low (I2C1_StatusCallback@ext_buf| (0+256)))& (0+255)
  9734  05B3  3189  21F8  3185   	fcall	i1_PROTOCOL_EXT
  9735  05B6                     i1l3351:	
  9736                           
  9737                           ;i2c1.c: 182: next = 0x00;
  9738  05B6  0020               	movlb	0	; select bank0
  9739  05B7  01EC               	clrf	I2C1_StatusCallback@next
  9740                           
  9741                           ;i2c1.c: 185: }
  9742                           
  9743                           ;i2c1.c: 183: }
  9744                           ;i2c1.c: 184: break;
  9745  05B8  2DCF               	goto	i1l3361
  9746  05B9                     i1l3355:	
  9747  05B9  0020               	movlb	0	; select bank0
  9748  05BA  086C               	movf	I2C1_StatusCallback@next,w
  9749                           
  9750                           ; Switch size 1, requested type "space"
  9751                           ; Number of cases is 2, Range of values is 2 to 3
  9752                           ; switch strategies available:
  9753                           ; Name         Instructions Cycles
  9754                           ; simple_byte            7     4 (average)
  9755                           ; direct_byte           13     9 (fixed)
  9756                           ; jumptable            263     9 (fixed)
  9757                           ;	Chosen strategy is simple_byte
  9758  05BB  3A02               	xorlw	2	; case 2
  9759  05BC  1903               	skipnz
  9760  05BD  2D8E               	goto	i1l3335
  9761  05BE  3A01               	xorlw	1	; case 3
  9762  05BF  1903               	skipnz
  9763  05C0  2D9A               	goto	i1l3341
  9764  05C1  2DCF               	goto	i1l3361
  9765                           
  9766                           ;i2c1.c: 190: }
  9767                           
  9768                           ;i2c1.c: 188: break;
  9769                           
  9770                           ;i2c1.c: 187: default:
  9771                           
  9772                           ;i2c1.c: 186: break;
  9773  05C2  2DCF               	goto	i1l3361
  9774  05C3                     i1l3359:	
  9775  05C3  0021               	movlb	1	; select bank1
  9776  05C4  0846               	movf	I2C1_StatusCallback@slaveWriteType^(0+128),w
  9777                           
  9778                           ; Switch size 1, requested type "space"
  9779                           ; Number of cases is 3, Range of values is 0 to 2
  9780                           ; switch strategies available:
  9781                           ; Name         Instructions Cycles
  9782                           ; simple_byte           10     6 (average)
  9783                           ; direct_byte           12     6 (fixed)
  9784                           ; jumptable            260     6 (fixed)
  9785                           ;	Chosen strategy is simple_byte
  9786  05C5  3A00               	xorlw	0	; case 0
  9787  05C6  1903               	skipnz
  9788  05C7  2DB9               	goto	i1l3355
  9789  05C8  3A01               	xorlw	1	; case 1
  9790  05C9  1903               	skipnz
  9791  05CA  2D7A               	goto	i1l3327
  9792  05CB  3A03               	xorlw	3	; case 2
  9793  05CC  1903               	skipnz
  9794  05CD  2D84               	goto	i1l3329
  9795  05CE  2DCF               	goto	i1l3361
  9796  05CF                     i1l3361:	
  9797                           
  9798                           ;i2c1.c: 192: slaveWriteType = SLAVE_NORMAL_DATA;
  9799  05CF  0021               	movlb	1	; select bank1
  9800  05D0  01C6               	clrf	I2C1_StatusCallback@slaveWriteType^(0+128)
  9801                           
  9802                           ;i2c1.c: 193: break;
  9803  05D1  0008               	return
  9804  05D2                     i1l3363:	
  9805                           ;i2c1.c: 197: {
  9806                           ;i2c1.c: 198: case 0x01:
  9807                           
  9808                           ;i2c1.c: 196: switch (I2C_slaveWriteData)
  9809                           
  9810                           ;i2c1.c: 195: case I2C1_SLAVE_READ_REQUEST:
  9811                           
  9812                           
  9813                           ;i2c1.c: 199: SSP1BUF = PROTOCOL_I2C_WHO();
  9814  05D2  3189  21FC         	fcall	_PROTOCOL_I2C_WHO
  9815  05D4  0024               	movlb	4	; select bank4
  9816  05D5  0091               	movwf	17	;volatile
  9817                           
  9818                           ;i2c1.c: 200: break;
  9819  05D6  0008               	return
  9820  05D7                     i1l3365:	
  9821                           ;i2c1.c: 201: case 0x07:
  9822                           
  9823                           
  9824                           ;i2c1.c: 202: pdata = PROTOCOL_I2C_SEN();
  9825  05D7  318E  2645         	fcall	_PROTOCOL_I2C_SEN
  9826  05D9  0871               	movf	?_PROTOCOL_I2C_SEN+1,w
  9827  05DA  00F6               	movwf	I2C1_StatusCallback@pdata+1
  9828  05DB  0870               	movf	?_PROTOCOL_I2C_SEN,w
  9829  05DC  00F5               	movwf	I2C1_StatusCallback@pdata
  9830                           
  9831                           ;i2c1.c: 203: SSP1BUF = *pdata;
  9832  05DD  0875               	movf	I2C1_StatusCallback@pdata,w
  9833  05DE  0086               	movwf	6
  9834  05DF  0876               	movf	I2C1_StatusCallback@pdata+1,w
  9835  05E0  0087               	movwf	7
  9836  05E1  0801               	movf	1,w
  9837  05E2  0024               	movlb	4	; select bank4
  9838  05E3  0091               	movwf	17	;volatile
  9839                           
  9840                           ;i2c1.c: 204: break;
  9841  05E4  0008               	return
  9842  05E5                     i1l3369:	
  9843                           ;i2c1.c: 205: case 0x09:
  9844                           
  9845                           
  9846                           ;i2c1.c: 206: SSP1BUF = PROTOCOL_I2C_GET();
  9847  05E5  3189  21F9         	fcall	_PROTOCOL_I2C_GET
  9848  05E7  0024               	movlb	4	; select bank4
  9849  05E8  0091               	movwf	17	;volatile
  9850                           
  9851                           ;i2c1.c: 208: }
  9852                           
  9853                           ;i2c1.c: 207: break;
  9854  05E9  0008               	return
  9855  05EA                     i1l3373:	
  9856  05EA  087D               	movf	_I2C_slaveWriteData,w	;volatile
  9857                           
  9858                           ; Switch size 1, requested type "space"
  9859                           ; Number of cases is 3, Range of values is 1 to 9
  9860                           ; switch strategies available:
  9861                           ; Name         Instructions Cycles
  9862                           ; simple_byte           10     6 (average)
  9863                           ; direct_byte           27     9 (fixed)
  9864                           ; jumptable            263     9 (fixed)
  9865                           ;	Chosen strategy is simple_byte
  9866  05EB  3A01               	xorlw	1	; case 1
  9867  05EC  1903               	skipnz
  9868  05ED  2DD2               	goto	i1l3363
  9869  05EE  3A06               	xorlw	6	; case 7
  9870  05EF  1903               	skipnz
  9871  05F0  2DD7               	goto	i1l3365
  9872  05F1  3A0E               	xorlw	14	; case 9
  9873  05F2  1903               	skipnz
  9874  05F3  2DE5               	goto	i1l3369
  9875  05F4  2E00               	goto	i1l124
  9876                           
  9877                           ;i2c1.c: 216: }
  9878                           
  9879                           ;i2c1.c: 214: break;
  9880                           
  9881                           ;i2c1.c: 213: default:
  9882                           
  9883                           ;i2c1.c: 212: break;
  9884                           
  9885                           ;i2c1.c: 211: case I2C1_SLAVE_READ_COMPLETED:
  9886                           
  9887                           ;i2c1.c: 209: break;
  9888  05F5  0008               	return
  9889  05F6                     i1l3377:	
  9890  05F6  0877               	movf	I2C1_StatusCallback@i2c_bus_state,w
  9891                           
  9892                           ; Switch size 1, requested type "space"
  9893                           ; Number of cases is 5, Range of values is 0 to 4
  9894                           ; switch strategies available:
  9895                           ; Name         Instructions Cycles
  9896                           ; direct_byte           16     6 (fixed)
  9897                           ; simple_byte           16     9 (average)
  9898                           ; jumptable            260     6 (fixed)
  9899                           ;	Chosen strategy is direct_byte
  9900  05F7  0084               	movwf	4
  9901  05F8  3005               	movlw	5
  9902  05F9  0204               	subwf	4,w
  9903  05FA  1803               	skipnc
  9904  05FB  0008               	return
  9905  05FC  3188               	movlp	high i1S4727
  9906  05FD  3504               	lslf	4,w
  9907  05FE  3E18               	addlw	low i1S4727
  9908  05FF  0082               	movwf	2
  9909  0600                     i1l124:	
  9910  0600  0008               	return
  9911  0601                     __end_of_I2C1_StatusCallback:	
  9912                           
  9913                           	psect	swtext2
  9914  0818                     __pswtext2:	
  9915  0818                     i1S4727:	
  9916  0818  3185  2D38         	ljmp	i1l86
  9917  081A  3185  2DEA         	ljmp	i1l3373
  9918  081C  3185  2DC3         	ljmp	i1l3359
  9919  081E  3186  2E00         	ljmp	i1l124
  9920  0820  3185  2D3C         	ljmp	i1l3303
  9921                           
  9922                           	psect	text49
  9923  0A02                     __ptext49:	
  9924 ;; *************** function i1_PROTOCOL_STP *****************
  9925 ;; Defined at:
  9926 ;;		line 103 in file "protocol.c"
  9927 ;; Parameters:    Size  Location     Type
  9928 ;;		None
  9929 ;; Auto vars:     Size  Location     Type
  9930 ;;		None
  9931 ;; Return value:  Size  Location     Type
  9932 ;;                  1    wreg      void 
  9933 ;; Registers used:
  9934 ;;		wreg, status,2, status,0
  9935 ;; Tracked objects:
  9936 ;;		On entry : 0/0
  9937 ;;		On exit  : 0/0
  9938 ;;		Unchanged: 0/0
  9939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9941 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9943 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9944 ;;Total ram usage:        0 bytes
  9945 ;; Hardware stack levels used:    1
  9946 ;; This function calls:
  9947 ;;		Nothing
  9948 ;; This function is called by:
  9949 ;;		_I2C1_StatusCallback
  9950 ;; This function uses a non-reentrant model
  9951 ;;
  9952                           
  9953                           
  9954                           ;psect for function i1_PROTOCOL_STP
  9955  0A02                     i1_PROTOCOL_STP:	
  9956                           
  9957                           ;protocol.c: 105: running = 0;
  9958                           
  9959                           ;incstack = 0
  9960                           ; Regs used in i1_PROTOCOL_STP: [wreg+status,2+status,0]
  9961  0A02  0021               	movlb	1	; select bank1
  9962  0A03  01BA               	clrf	_running^(0+128)
  9963  0A04  0008               	return
  9964  0A05                     __end_ofi1_PROTOCOL_STP:	
  9965                           
  9966                           	psect	text50
  9967  0A16                     __ptext50:	
  9968 ;; *************** function i1_PROTOCOL_STA *****************
  9969 ;; Defined at:
  9970 ;;		line 98 in file "protocol.c"
  9971 ;; Parameters:    Size  Location     Type
  9972 ;;		None
  9973 ;; Auto vars:     Size  Location     Type
  9974 ;;		None
  9975 ;; Return value:  Size  Location     Type
  9976 ;;                  1    wreg      void 
  9977 ;; Registers used:
  9978 ;;		wreg, status,2, status,0
  9979 ;; Tracked objects:
  9980 ;;		On entry : 0/0
  9981 ;;		On exit  : 0/0
  9982 ;;		Unchanged: 0/0
  9983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9984 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9985 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9986 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9987 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9988 ;;Total ram usage:        0 bytes
  9989 ;; Hardware stack levels used:    1
  9990 ;; This function calls:
  9991 ;;		Nothing
  9992 ;; This function is called by:
  9993 ;;		_I2C1_StatusCallback
  9994 ;; This function uses a non-reentrant model
  9995 ;;
  9996                           
  9997                           
  9998                           ;psect for function i1_PROTOCOL_STA
  9999  0A16                     i1_PROTOCOL_STA:	
 10000                           
 10001                           ;protocol.c: 100: running = 1;
 10002                           
 10003                           ;incstack = 0
 10004                           ; Regs used in i1_PROTOCOL_STA: [wreg+status,2+status,0]
 10005  0A16  0021               	movlb	1	; select bank1
 10006  0A17  01BA               	clrf	_running^(0+128)
 10007  0A18  0ABA               	incf	_running^(0+128),f
 10008  0A19  0008               	return
 10009  0A1A                     __end_ofi1_PROTOCOL_STA:	
 10010                           
 10011                           	psect	text51
 10012  0A37                     __ptext51:	
 10013 ;; *************** function i1_PROTOCOL_SET *****************
 10014 ;; Defined at:
 10015 ;;		line 116 in file "protocol.c"
 10016 ;; Parameters:    Size  Location     Type
 10017 ;;  value_          1    wreg     unsigned char 
 10018 ;; Auto vars:     Size  Location     Type
 10019 ;;  value_          1    1[COMMON] unsigned char 
 10020 ;; Return value:  Size  Location     Type
 10021 ;;                  1    wreg      void 
 10022 ;; Registers used:
 10023 ;;		wreg, status,2, status,0
 10024 ;; Tracked objects:
 10025 ;;		On entry : 0/0
 10026 ;;		On exit  : 0/0
 10027 ;;		Unchanged: 0/0
 10028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10030 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10031 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10032 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10033 ;;Total ram usage:        2 bytes
 10034 ;; Hardware stack levels used:    1
 10035 ;; This function calls:
 10036 ;;		Nothing
 10037 ;; This function is called by:
 10038 ;;		_I2C1_StatusCallback
 10039 ;; This function uses a non-reentrant model
 10040 ;;
 10041                           
 10042                           
 10043                           ;psect for function i1_PROTOCOL_SET
 10044  0A37                     i1_PROTOCOL_SET:	
 10045                           
 10046                           ;incstack = 0
 10047                           ; Regs used in i1_PROTOCOL_SET: [wreg+status,2+status,0]
 10048                           ;i1PROTOCOL_SET@value_ stored from wreg
 10049  0A37  00F1               	movwf	i1PROTOCOL_SET@value_
 10050                           
 10051                           ;protocol.c: 117: value = value_;
 10052  0A38  0871               	movf	i1PROTOCOL_SET@value_,w
 10053  0A39  00F0               	movwf	??i1_PROTOCOL_SET
 10054  0A3A  0870               	movf	??i1_PROTOCOL_SET,w
 10055  0A3B  0020               	movlb	0	; select bank0
 10056  0A3C  00E6               	movwf	_value
 10057  0A3D  0008               	return
 10058  0A3E                     __end_ofi1_PROTOCOL_SET:	
 10059                           
 10060                           	psect	text52
 10061  0A45                     __ptext52:	
 10062 ;; *************** function i1_PROTOCOL_SAV *****************
 10063 ;; Defined at:
 10064 ;;		line 112 in file "protocol.c"
 10065 ;; Parameters:    Size  Location     Type
 10066 ;;		None
 10067 ;; Auto vars:     Size  Location     Type
 10068 ;;		None
 10069 ;; Return value:  Size  Location     Type
 10070 ;;                  1    wreg      void 
 10071 ;; Registers used:
 10072 ;;		wreg, status,2, status,0, pclath, cstack
 10073 ;; Tracked objects:
 10074 ;;		On entry : 0/0
 10075 ;;		On exit  : 0/0
 10076 ;;		Unchanged: 0/0
 10077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10079 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10080 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10081 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10082 ;;Total ram usage:        1 bytes
 10083 ;; Hardware stack levels used:    1
 10084 ;; Hardware stack levels required when called:    1
 10085 ;; This function calls:
 10086 ;;		i1_DATAEE_WriteByte
 10087 ;; This function is called by:
 10088 ;;		_I2C1_StatusCallback
 10089 ;; This function uses a non-reentrant model
 10090 ;;
 10091                           
 10092                           
 10093                           ;psect for function i1_PROTOCOL_SAV
 10094  0A45                     i1_PROTOCOL_SAV:	
 10095                           
 10096                           ;protocol.c: 113: DATAEE_WriteByte(1, value);
 10097                           
 10098                           ;incstack = 0
 10099                           ; Regs used in i1_PROTOCOL_SAV: [wreg+status,2+status,0+pclath+cstack]
 10100  0A45  0020               	movlb	0	; select bank0
 10101  0A46  0866               	movf	_value,w
 10102  0A47  00F3               	movwf	??i1_PROTOCOL_SAV
 10103  0A48  0873               	movf	??i1_PROTOCOL_SAV,w
 10104  0A49  00F0               	movwf	i1DATAEE_WriteByte@bData
 10105  0A4A  3001               	movlw	1
 10106  0A4B  318B  234C         	fcall	i1_DATAEE_WriteByte
 10107  0A4D  0008               	return
 10108  0A4E                     __end_ofi1_PROTOCOL_SAV:	
 10109                           
 10110                           	psect	text53
 10111  0B4C                     __ptext53:	
 10112 ;; *************** function i1_DATAEE_WriteByte *****************
 10113 ;; Defined at:
 10114 ;;		line 180 in file "mcc_generated_files/memory.c"
 10115 ;; Parameters:    Size  Location     Type
 10116 ;;  bAdd            1    wreg     unsigned char 
 10117 ;;  bData           1    0[COMMON] unsigned char 
 10118 ;; Auto vars:     Size  Location     Type
 10119 ;;  bAdd            1    1[COMMON] unsigned char 
 10120 ;;  DATAEE_Write    1    2[COMMON] unsigned char 
 10121 ;; Return value:  Size  Location     Type
 10122 ;;                  1    wreg      void 
 10123 ;; Registers used:
 10124 ;;		wreg, status,2, status,0
 10125 ;; Tracked objects:
 10126 ;;		On entry : 0/0
 10127 ;;		On exit  : 0/0
 10128 ;;		Unchanged: 0/0
 10129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10130 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10131 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10133 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10134 ;;Total ram usage:        3 bytes
 10135 ;; Hardware stack levels used:    1
 10136 ;; This function calls:
 10137 ;;		Nothing
 10138 ;; This function is called by:
 10139 ;;		i1_PROTOCOL_SAV
 10140 ;; This function uses a non-reentrant model
 10141 ;;
 10142                           
 10143                           
 10144                           ;psect for function i1_DATAEE_WriteByte
 10145  0B4C                     i1_DATAEE_WriteByte:	
 10146                           
 10147                           ;incstack = 0
 10148                           ; Regs used in i1_DATAEE_WriteByte: [wreg+status,2+status,0]
 10149                           ;i1DATAEE_WriteByte@bAdd stored from wreg
 10150  0B4C  00F1               	movwf	i1DATAEE_WriteByte@bAdd
 10151                           
 10152                           ;memory.c: 182: uint8_t GIEBitValue = 0;
 10153  0B4D  01F2               	clrf	i1DATAEE_WriteByte@GIEBitValue
 10154                           
 10155                           ;memory.c: 184: EEADRL = (bAdd & 0x0ff);
 10156  0B4E  0871               	movf	i1DATAEE_WriteByte@bAdd,w
 10157  0B4F  0023               	movlb	3	; select bank3
 10158  0B50  0091               	movwf	17	;volatile
 10159                           
 10160                           ;memory.c: 185: EEDATL = bData;
 10161  0B51  0870               	movf	i1DATAEE_WriteByte@bData,w
 10162  0B52  0093               	movwf	19	;volatile
 10163                           
 10164                           ;memory.c: 186: EECON1bits.EEPGD = 0;
 10165  0B53  1395               	bcf	21,7	;volsfr
 10166                           
 10167                           ;memory.c: 187: EECON1bits.CFGS = 0;
 10168  0B54  1315               	bcf	21,6	;volsfr
 10169                           
 10170                           ;memory.c: 188: EECON1bits.WREN = 1;
 10171  0B55  1515               	bsf	21,2	;volsfr
 10172                           
 10173                           ;memory.c: 190: GIEBitValue = INTCONbits.GIE;
 10174  0B56  3000               	movlw	0
 10175  0B57  1B8B               	btfsc	11,7	;volatile
 10176  0B58  3001               	movlw	1
 10177  0B59  00F2               	movwf	i1DATAEE_WriteByte@GIEBitValue
 10178                           
 10179                           ;memory.c: 191: INTCONbits.GIE = 0;
 10180  0B5A  138B               	bcf	11,7	;volatile
 10181                           
 10182                           ;memory.c: 192: EECON2 = 0x55;
 10183  0B5B  3055               	movlw	85
 10184  0B5C  0096               	movwf	22	;volsfr
 10185                           
 10186                           ;memory.c: 193: EECON2 = 0xAA;
 10187  0B5D  30AA               	movlw	170
 10188  0B5E  0096               	movwf	22	;volsfr
 10189                           
 10190                           ;memory.c: 194: EECON1bits.WR = 1;
 10191  0B5F  1495               	bsf	21,1	;volsfr
 10192  0B60                     i1l480:	
 10193                           ;memory.c: 197: {
 10194                           
 10195                           ;memory.c: 196: while (EECON1bits.WR)
 10196                           
 10197  0B60  1895               	btfsc	21,1	;volsfr
 10198  0B61  2B60               	goto	i1l480
 10199                           
 10200                           ;memory.c: 198: }
 10201                           ;memory.c: 200: EECON1bits.WREN = 0;
 10202  0B62  1115               	bcf	21,2	;volsfr
 10203                           
 10204                           ;memory.c: 201: INTCONbits.GIE = GIEBitValue;
 10205  0B63  0C72               	rrf	i1DATAEE_WriteByte@GIEBitValue,w
 10206  0B64  1C03               	skipc
 10207  0B65  138B               	bcf	11,7	;volatile
 10208  0B66  1803               	skipnc
 10209  0B67  178B               	bsf	11,7	;volatile
 10210  0B68  0008               	return
 10211  0B69                     __end_ofi1_DATAEE_WriteByte:	
 10212                           
 10213                           	psect	text54
 10214  09F8                     __ptext54:	
 10215 ;; *************** function i1_PROTOCOL_EXT *****************
 10216 ;; Defined at:
 10217 ;;		line 121 in file "protocol.c"
 10218 ;; Parameters:    Size  Location     Type
 10219 ;;  char_buf        1    wreg     PTR unsigned char 
 10220 ;;		 -> buf(48), I2C1_StatusCallback@ext_buf(48), 
 10221 ;; Auto vars:     Size  Location     Type
 10222 ;;  char_buf        1  (no storage) PTR unsigned char 
 10223 ;;		 -> buf(48), I2C1_StatusCallback@ext_buf(48), 
 10224 ;; Return value:  Size  Location     Type
 10225 ;;                  1    wreg      void 
 10226 ;; Registers used:
 10227 ;;		wreg, status,2, status,0
 10228 ;; Tracked objects:
 10229 ;;		On entry : 0/0
 10230 ;;		On exit  : 0/0
 10231 ;;		Unchanged: 0/0
 10232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10234 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10236 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10237 ;;Total ram usage:        0 bytes
 10238 ;; Hardware stack levels used:    1
 10239 ;; This function calls:
 10240 ;;		Nothing
 10241 ;; This function is called by:
 10242 ;;		_I2C1_StatusCallback
 10243 ;; This function uses a non-reentrant model
 10244 ;;
 10245                           
 10246                           
 10247                           ;psect for function i1_PROTOCOL_EXT
 10248  09F8                     i1_PROTOCOL_EXT:	
 10249                           
 10250                           ;incstack = 0
 10251                           ; Regs used in i1_PROTOCOL_EXT: [wreg+status,2+status,0]
 10252  09F8  0008               	return
 10253  09F9                     __end_ofi1_PROTOCOL_EXT:	
 10254                           
 10255                           	psect	text55
 10256  09FF                     __ptext55:	
 10257 ;; *************** function _PROTOCOL_Read_Lock *****************
 10258 ;; Defined at:
 10259 ;;		line 129 in file "protocol.c"
 10260 ;; Parameters:    Size  Location     Type
 10261 ;;		None
 10262 ;; Auto vars:     Size  Location     Type
 10263 ;;		None
 10264 ;; Return value:  Size  Location     Type
 10265 ;;                  1    wreg      unsigned char 
 10266 ;; Registers used:
 10267 ;;		wreg
 10268 ;; Tracked objects:
 10269 ;;		On entry : 0/0
 10270 ;;		On exit  : 0/0
 10271 ;;		Unchanged: 0/0
 10272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10274 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10276 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10277 ;;Total ram usage:        0 bytes
 10278 ;; Hardware stack levels used:    1
 10279 ;; This function calls:
 10280 ;;		Nothing
 10281 ;; This function is called by:
 10282 ;;		_I2C1_StatusCallback
 10283 ;; This function uses a non-reentrant model
 10284 ;;
 10285                           
 10286                           
 10287                           ;psect for function _PROTOCOL_Read_Lock
 10288  09FF                     _PROTOCOL_Read_Lock:	
 10289                           
 10290                           ;protocol.c: 130: return locked;
 10291                           
 10292                           ;incstack = 0
 10293                           ; Regs used in _PROTOCOL_Read_Lock: [wreg]
 10294  09FF  0021               	movlb	1	; select bank1
 10295  0A00  083B               	movf	_locked^(0+128),w
 10296  0A01  0008               	return
 10297  0A02                     __end_of_PROTOCOL_Read_Lock:	
 10298                           
 10299                           	psect	text56
 10300  0A57                     __ptext56:	
 10301 ;; *************** function _PROTOCOL_RST *****************
 10302 ;; Defined at:
 10303 ;;		line 285 in file "protocol.c"
 10304 ;; Parameters:    Size  Location     Type
 10305 ;;		None
 10306 ;; Auto vars:     Size  Location     Type
 10307 ;;		None
 10308 ;; Return value:  Size  Location     Type
 10309 ;;                  1    wreg      void 
 10310 ;; Registers used:
 10311 ;;		wreg, status,2, status,0
 10312 ;; Tracked objects:
 10313 ;;		On entry : 0/0
 10314 ;;		On exit  : 0/0
 10315 ;;		Unchanged: 0/0
 10316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10318 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10319 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10320 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10321 ;;Total ram usage:        1 bytes
 10322 ;; Hardware stack levels used:    1
 10323 ;; This function calls:
 10324 ;;		Nothing
 10325 ;; This function is called by:
 10326 ;;		_I2C1_StatusCallback
 10327 ;; This function uses a non-reentrant model
 10328 ;;
 10329                           
 10330                           
 10331                           ;psect for function _PROTOCOL_RST
 10332  0A57                     _PROTOCOL_RST:	
 10333                           
 10334                           ;protocol.c: 286: if (readbuf.status != TLV_SET) {
 10335                           
 10336                           ;incstack = 0
 10337                           ; Regs used in _PROTOCOL_RST: [wreg+status,2+status,0]
 10338  0A57  0021               	movlb	1	; select bank1
 10339  0A58  084B               	movf	(_readbuf^(0+128)+4),w
 10340  0A59  1903               	btfsc	3,2
 10341  0A5A  0008               	return
 10342                           
 10343                           ;protocol.c: 287: readbuf.buf_cnt = 0;
 10344  0A5B  01CC               	clrf	(_readbuf^(0+128)+5)
 10345                           
 10346                           ;protocol.c: 288: readbuf.status = COMPLETE;
 10347  0A5C  3003               	movlw	3
 10348  0A5D  00F0               	movwf	??_PROTOCOL_RST
 10349  0A5E  0870               	movf	??_PROTOCOL_RST,w
 10350  0A5F  00CB               	movwf	(_readbuf^(0+128)+4)
 10351  0A60  0008               	return
 10352  0A61                     __end_of_PROTOCOL_RST:	
 10353                           
 10354                           	psect	text57
 10355  0A12                     __ptext57:	
 10356 ;; *************** function _PROTOCOL_INV *****************
 10357 ;; Defined at:
 10358 ;;		line 108 in file "protocol.c"
 10359 ;; Parameters:    Size  Location     Type
 10360 ;;		None
 10361 ;; Auto vars:     Size  Location     Type
 10362 ;;		None
 10363 ;; Return value:  Size  Location     Type
 10364 ;;                  1    wreg      void 
 10365 ;; Registers used:
 10366 ;;		None
 10367 ;; Tracked objects:
 10368 ;;		On entry : 0/0
 10369 ;;		On exit  : 0/0
 10370 ;;		Unchanged: 0/0
 10371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10375 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10376 ;;Total ram usage:        0 bytes
 10377 ;; Hardware stack levels used:    1
 10378 ;; This function calls:
 10379 ;;		Nothing
 10380 ;; This function is called by:
 10381 ;;		_I2C1_StatusCallback
 10382 ;; This function uses a non-reentrant model
 10383 ;;
 10384                           
 10385                           
 10386                           ;psect for function _PROTOCOL_INV
 10387  0A12                     _PROTOCOL_INV:	
 10388                           
 10389                           ;protocol.c: 109: invoked = 1;
 10390                           
 10391                           ;incstack = 0
 10392                           ; Regs used in _PROTOCOL_INV: []
 10393  0A12  0021               	movlb	1	; select bank1
 10394  0A13  01B9               	clrf	_invoked^(0+128)
 10395  0A14  0AB9               	incf	_invoked^(0+128),f
 10396  0A15  0008               	return
 10397  0A16                     __end_of_PROTOCOL_INV:	
 10398                           
 10399                           	psect	text58
 10400  09FC                     __ptext58:	
 10401 ;; *************** function _PROTOCOL_I2C_WHO *****************
 10402 ;; Defined at:
 10403 ;;		line 205 in file "protocol.c"
 10404 ;; Parameters:    Size  Location     Type
 10405 ;;		None
 10406 ;; Auto vars:     Size  Location     Type
 10407 ;;		None
 10408 ;; Return value:  Size  Location     Type
 10409 ;;                  1    wreg      unsigned char 
 10410 ;; Registers used:
 10411 ;;		wreg
 10412 ;; Tracked objects:
 10413 ;;		On entry : 0/0
 10414 ;;		On exit  : 0/0
 10415 ;;		Unchanged: 0/0
 10416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10419 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10420 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10421 ;;Total ram usage:        0 bytes
 10422 ;; Hardware stack levels used:    1
 10423 ;; This function calls:
 10424 ;;		Nothing
 10425 ;; This function is called by:
 10426 ;;		_I2C1_StatusCallback
 10427 ;; This function uses a non-reentrant model
 10428 ;;
 10429                           
 10430                           
 10431                           ;psect for function _PROTOCOL_I2C_WHO
 10432  09FC                     _PROTOCOL_I2C_WHO:	
 10433                           
 10434                           ;protocol.c: 206: return slave_address;
 10435                           
 10436                           ;incstack = 0
 10437                           ; Regs used in _PROTOCOL_I2C_WHO: [wreg]
 10438  09FC  0021               	movlb	1	; select bank1
 10439  09FD  083D               	movf	_slave_address^(0+128),w
 10440  09FE  0008               	return
 10441  09FF                     __end_of_PROTOCOL_I2C_WHO:	
 10442                           
 10443                           	psect	text59
 10444  0E45                     __ptext59:	
 10445 ;; *************** function _PROTOCOL_I2C_SEN *****************
 10446 ;; Defined at:
 10447 ;;		line 404 in file "protocol.c"
 10448 ;; Parameters:    Size  Location     Type
 10449 ;;		None
 10450 ;; Auto vars:     Size  Location     Type
 10451 ;;  pdata           2    2[COMMON] PTR unsigned char 
 10452 ;;		 -> type_no_data(1), PROTOCOL_Send_uint8_t@pbuf(1), sendbuf(16), readbuf.length(1), 
 10453 ;;		 -> readbuf.type(1), readbuf(6), 
 10454 ;; Return value:  Size  Location     Type
 10455 ;;                  2   52[None  ] PTR unsigned char 
 10456 ;; Registers used:
 10457 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 10458 ;; Tracked objects:
 10459 ;;		On entry : 0/0
 10460 ;;		On exit  : 0/0
 10461 ;;		Unchanged: 0/0
 10462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10464 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10465 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10466 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10467 ;;Total ram usage:        4 bytes
 10468 ;; Hardware stack levels used:    1
 10469 ;; This function calls:
 10470 ;;		Nothing
 10471 ;; This function is called by:
 10472 ;;		_I2C1_StatusCallback
 10473 ;; This function uses a non-reentrant model
 10474 ;;
 10475                           
 10476                           
 10477                           ;psect for function _PROTOCOL_I2C_SEN
 10478  0E45                     _PROTOCOL_I2C_SEN:	
 10479                           
 10480                           ;protocol.c: 405: uint8_t *pdata;
 10481                           ;protocol.c: 406: switch(readbuf.status) {
 10482                           
 10483                           ;incstack = 0
 10484                           ; Regs used in _PROTOCOL_I2C_SEN: [wreg-fsr0h+status,2+status,0]
 10485  0E45  2E74               	goto	i1l3139
 10486  0E46                     i1l3117:	
 10487                           ;protocol.c: 407: case TLV_SET:
 10488                           
 10489                           
 10490                           ;protocol.c: 408: pdata = &readbuf.type;
 10491  0E46  30C7               	movlw	low _readbuf
 10492  0E47  00F2               	movwf	PROTOCOL_I2C_SEN@pdata
 10493  0E48  3000               	movlw	high _readbuf
 10494  0E49  00F3               	movwf	PROTOCOL_I2C_SEN@pdata+1
 10495                           
 10496                           ;protocol.c: 409: readbuf.status = TYPE_SENT;
 10497  0E4A  0021               	movlb	1	; select bank1
 10498  0E4B  01CB               	clrf	(_readbuf^(0+128)+4)
 10499  0E4C  0ACB               	incf	(_readbuf^(0+128)+4),f
 10500                           
 10501                           ;protocol.c: 410: break;
 10502  0E4D  2E83               	goto	i1l3141
 10503  0E4E                     i1l3121:	
 10504                           ;protocol.c: 411: case TYPE_SENT:
 10505                           
 10506                           
 10507                           ;protocol.c: 412: pdata = &readbuf.length;
 10508  0E4E  30C8               	movlw	low (_readbuf+1)
 10509  0E4F  00F2               	movwf	PROTOCOL_I2C_SEN@pdata
 10510  0E50  3000               	movlw	high (_readbuf+1)
 10511  0E51  00F3               	movwf	PROTOCOL_I2C_SEN@pdata+1
 10512                           
 10513                           ;protocol.c: 413: readbuf.status = LENGTH_SENT;
 10514  0E52  3002               	movlw	2
 10515  0E53  2E6B               	goto	L5
 10516  0E54                     i1l3125:	
 10517                           ;protocol.c: 415: case LENGTH_SENT:
 10518                           
 10519                           ;protocol.c: 414: break;
 10520                           
 10521                           
 10522                           ;protocol.c: 416: if (readbuf.buf_cnt < readbuf.length) {
 10523  0E54  0848               	movf	(_readbuf^(0+128)+1),w
 10524  0E55  024C               	subwf	(_readbuf^(0+128)+5),w
 10525  0E56  1803               	skipnc
 10526  0E57  2E65               	goto	i1l3129
 10527                           
 10528                           ;protocol.c: 417: pdata = &readbuf.pbuffer[readbuf.buf_cnt++];
 10529  0E58  084C               	movf	(_readbuf^(0+128)+5),w
 10530  0E59  00F0               	movwf	??_PROTOCOL_I2C_SEN
 10531  0E5A  01F1               	clrf	??_PROTOCOL_I2C_SEN+1
 10532  0E5B  0870               	movf	??_PROTOCOL_I2C_SEN,w
 10533  0E5C  0749               	addwf	(low ((_readbuf| 0+2)))^(0+128),w
 10534  0E5D  00F2               	movwf	PROTOCOL_I2C_SEN@pdata
 10535  0E5E  0871               	movf	??_PROTOCOL_I2C_SEN+1,w
 10536  0E5F  3D4A               	addwfc	((low ((_readbuf| 0+2))+1))^(0+128),w
 10537  0E60  00F3               	movwf	PROTOCOL_I2C_SEN@pdata+1
 10538  0E61  3001               	movlw	1
 10539  0E62  00F0               	movwf	??_PROTOCOL_I2C_SEN
 10540  0E63  0870               	movf	??_PROTOCOL_I2C_SEN,w
 10541  0E64  07CC               	addwf	(_readbuf^(0+128)+5),f
 10542  0E65                     i1l3129:	
 10543                           
 10544                           ;protocol.c: 418: }
 10545                           ;protocol.c: 419: if (readbuf.buf_cnt == readbuf.length) {
 10546  0E65  084C               	movf	(_readbuf^(0+128)+5),w
 10547  0E66  0648               	xorwf	(_readbuf^(0+128)+1),w
 10548  0E67  1D03               	skipz
 10549  0E68  2E83               	goto	i1l3141
 10550                           
 10551                           ;protocol.c: 420: readbuf.buf_cnt = 0;
 10552  0E69  01CC               	clrf	(_readbuf^(0+128)+5)
 10553                           
 10554                           ;protocol.c: 421: readbuf.status = COMPLETE;
 10555  0E6A  3003               	movlw	3
 10556  0E6B                     L5:	
 10557  0E6B  00F0               	movwf	??_PROTOCOL_I2C_SEN
 10558  0E6C  0870               	movf	??_PROTOCOL_I2C_SEN,w
 10559  0E6D  00CB               	movwf	(_readbuf^(0+128)+4)
 10560                           
 10561                           ;protocol.c: 422: }
 10562                           ;protocol.c: 423: break;
 10563  0E6E  2E83               	goto	i1l3141
 10564  0E6F                     i1l3135:	
 10565                           ;protocol.c: 424: case COMPLETE:
 10566                           
 10567                           
 10568                           ;protocol.c: 425: pdata = &type_no_data;
 10569  0E6F  30EB               	movlw	low _type_no_data
 10570  0E70  00F2               	movwf	PROTOCOL_I2C_SEN@pdata
 10571  0E71  3000               	movlw	high _type_no_data
 10572  0E72  00F3               	movwf	PROTOCOL_I2C_SEN@pdata+1
 10573                           
 10574                           ;protocol.c: 427: }
 10575                           
 10576                           ;protocol.c: 426: break;
 10577  0E73  2E83               	goto	i1l3141
 10578  0E74                     i1l3139:	
 10579  0E74  0021               	movlb	1	; select bank1
 10580  0E75  084B               	movf	(_readbuf^(0+128)+4),w
 10581                           
 10582                           ; Switch size 1, requested type "space"
 10583                           ; Number of cases is 4, Range of values is 0 to 3
 10584                           ; switch strategies available:
 10585                           ; Name         Instructions Cycles
 10586                           ; simple_byte           13     7 (average)
 10587                           ; direct_byte           14     6 (fixed)
 10588                           ; jumptable            260     6 (fixed)
 10589                           ;	Chosen strategy is simple_byte
 10590  0E76  3A00               	xorlw	0	; case 0
 10591  0E77  1903               	skipnz
 10592  0E78  2E46               	goto	i1l3117
 10593  0E79  3A01               	xorlw	1	; case 1
 10594  0E7A  1903               	skipnz
 10595  0E7B  2E4E               	goto	i1l3121
 10596  0E7C  3A03               	xorlw	3	; case 2
 10597  0E7D  1903               	skipnz
 10598  0E7E  2E54               	goto	i1l3125
 10599  0E7F  3A01               	xorlw	1	; case 3
 10600  0E80  1903               	skipnz
 10601  0E81  2E6F               	goto	i1l3135
 10602  0E82  2E83               	goto	i1l3141
 10603  0E83                     i1l3141:	
 10604                           
 10605                           ;protocol.c: 428: return pdata;
 10606  0E83  0873               	movf	PROTOCOL_I2C_SEN@pdata+1,w
 10607  0E84  00F1               	movwf	?_PROTOCOL_I2C_SEN+1
 10608  0E85  0872               	movf	PROTOCOL_I2C_SEN@pdata,w
 10609  0E86  00F0               	movwf	?_PROTOCOL_I2C_SEN
 10610  0E87  0008               	return
 10611  0E88                     __end_of_PROTOCOL_I2C_SEN:	
 10612                           
 10613                           	psect	text60
 10614  09F9                     __ptext60:	
 10615 ;; *************** function _PROTOCOL_I2C_GET *****************
 10616 ;; Defined at:
 10617 ;;		line 209 in file "protocol.c"
 10618 ;; Parameters:    Size  Location     Type
 10619 ;;		None
 10620 ;; Auto vars:     Size  Location     Type
 10621 ;;		None
 10622 ;; Return value:  Size  Location     Type
 10623 ;;                  1    wreg      unsigned char 
 10624 ;; Registers used:
 10625 ;;		wreg
 10626 ;; Tracked objects:
 10627 ;;		On entry : 0/0
 10628 ;;		On exit  : 0/0
 10629 ;;		Unchanged: 0/0
 10630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10632 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10634 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10635 ;;Total ram usage:        0 bytes
 10636 ;; Hardware stack levels used:    1
 10637 ;; This function calls:
 10638 ;;		Nothing
 10639 ;; This function is called by:
 10640 ;;		_I2C1_StatusCallback
 10641 ;; This function uses a non-reentrant model
 10642 ;;
 10643                           
 10644                           
 10645                           ;psect for function _PROTOCOL_I2C_GET
 10646  09F9                     _PROTOCOL_I2C_GET:	
 10647                           
 10648                           ;protocol.c: 210: return value;
 10649                           
 10650                           ;incstack = 0
 10651                           ; Regs used in _PROTOCOL_I2C_GET: [wreg]
 10652  09F9  0020               	movlb	0	; select bank0
 10653  09FA  0866               	movf	_value,w
 10654  09FB  0008               	return
 10655  09FC                     __end_of_PROTOCOL_I2C_GET:	
 10656                           
 10657                           	psect	text61
 10658  0A0E                     __ptext61:	
 10659 ;; *************** function _PROTOCOL_Backplane_Slave_Enabled *****************
 10660 ;; Defined at:
 10661 ;;		line 201 in file "protocol.c"
 10662 ;; Parameters:    Size  Location     Type
 10663 ;;		None
 10664 ;; Auto vars:     Size  Location     Type
 10665 ;;		None
 10666 ;; Return value:  Size  Location     Type
 10667 ;;                  1    wreg      void 
 10668 ;; Registers used:
 10669 ;;		None
 10670 ;; Tracked objects:
 10671 ;;		On entry : 0/0
 10672 ;;		On exit  : 0/0
 10673 ;;		Unchanged: 0/0
 10674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10675 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10676 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10678 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10679 ;;Total ram usage:        0 bytes
 10680 ;; Hardware stack levels used:    1
 10681 ;; This function calls:
 10682 ;;		Nothing
 10683 ;; This function is called by:
 10684 ;;		_I2C1_StatusCallback
 10685 ;; This function uses a non-reentrant model
 10686 ;;
 10687                           
 10688                           
 10689                           ;psect for function _PROTOCOL_Backplane_Slave_Enabled
 10690  0A0E                     _PROTOCOL_Backplane_Slave_Enabled:	
 10691                           
 10692                           ;protocol.c: 202: backplane_slave_enabled = 1;
 10693                           
 10694                           ;incstack = 0
 10695                           ; Regs used in _PROTOCOL_Backplane_Slave_Enabled: []
 10696  0A0E  0021               	movlb	1	; select bank1
 10697  0A0F  01B4               	clrf	_backplane_slave_enabled^(0+128)
 10698  0A10  0AB4               	incf	_backplane_slave_enabled^(0+128),f
 10699  0A11  0008               	return
 10700  0A12                     __end_of_PROTOCOL_Backplane_Slave_Enabled:	
 10701                           
 10702                           	psect	text62
 10703  0AF9                     __ptext62:	
 10704 ;; *************** function _EUSART_Transmit_ISR *****************
 10705 ;; Defined at:
 10706 ;;		line 165 in file "mcc_generated_files/eusart.c"
 10707 ;; Parameters:    Size  Location     Type
 10708 ;;		None
 10709 ;; Auto vars:     Size  Location     Type
 10710 ;;		None
 10711 ;; Return value:  Size  Location     Type
 10712 ;;                  1    wreg      void 
 10713 ;; Registers used:
 10714 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10715 ;; Tracked objects:
 10716 ;;		On entry : 0/0
 10717 ;;		On exit  : 0/0
 10718 ;;		Unchanged: 0/0
 10719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10721 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10722 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10723 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10724 ;;Total ram usage:        1 bytes
 10725 ;; Hardware stack levels used:    1
 10726 ;; This function calls:
 10727 ;;		Nothing
 10728 ;; This function is called by:
 10729 ;;		_INTERRUPT_InterruptManager
 10730 ;; This function uses a non-reentrant model
 10731 ;;
 10732                           
 10733                           
 10734                           ;psect for function _EUSART_Transmit_ISR
 10735  0AF9                     _EUSART_Transmit_ISR:	
 10736                           
 10737                           ;eusart.c: 169: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
 10738                           
 10739                           ;incstack = 0
 10740                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 10741  0AF9  3008               	movlw	8
 10742  0AFA  027A               	subwf	_eusartTxBufferRemaining,w	;volatile
 10743  0AFB  1803               	skipnc
 10744  0AFC  2B11               	goto	i1l395
 10745                           
 10746                           ;eusart.c: 170: {
 10747                           ;eusart.c: 171: TXREG = eusartTxBuffer[eusartTxTail++];
 10748  0AFD  087B               	movf	_eusartTxTail,w
 10749  0AFE  3EA0               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
 10750  0AFF  0086               	movwf	6
 10751  0B00  0187               	clrf	7
 10752  0B01  0801               	movf	1,w
 10753  0B02  0023               	movlb	3	; select bank3
 10754  0B03  009A               	movwf	26	;volatile
 10755  0B04  3001               	movlw	1
 10756  0B05  00F0               	movwf	??_EUSART_Transmit_ISR
 10757  0B06  0870               	movf	??_EUSART_Transmit_ISR,w
 10758  0B07  07FB               	addwf	_eusartTxTail,f	;volatile
 10759                           
 10760                           ;eusart.c: 172: if(sizeof(eusartTxBuffer) <= eusartTxTail)
 10761  0B08  3008               	movlw	8
 10762  0B09  027B               	subwf	_eusartTxTail,w	;volatile
 10763  0B0A  1803               	btfsc	3,0
 10764                           
 10765                           ;eusart.c: 173: {
 10766                           ;eusart.c: 174: eusartTxTail = 0;
 10767  0B0B  01FB               	clrf	_eusartTxTail	;volatile
 10768                           
 10769                           ;eusart.c: 175: }
 10770                           ;eusart.c: 176: eusartTxBufferRemaining++;
 10771  0B0C  3001               	movlw	1
 10772  0B0D  00F0               	movwf	??_EUSART_Transmit_ISR
 10773  0B0E  0870               	movf	??_EUSART_Transmit_ISR,w
 10774  0B0F  07FA               	addwf	_eusartTxBufferRemaining,f	;volatile
 10775                           
 10776                           ;eusart.c: 177: }
 10777  0B10  0008               	return
 10778  0B11                     i1l395:	
 10779                           
 10780                           ;eusart.c: 178: else
 10781                           ;eusart.c: 179: {
 10782                           ;eusart.c: 180: PIE1bits.TXIE = 0;
 10783  0B11  0021               	movlb	1	; select bank1
 10784  0B12  1211               	bcf	17,4	;volatile
 10785  0B13  0008               	return
 10786  0B14                     __end_of_EUSART_Transmit_ISR:	
 10787                           
 10788                           	psect	text63
 10789  0B14                     __ptext63:	
 10790 ;; *************** function _EUSART_Receive_ISR *****************
 10791 ;; Defined at:
 10792 ;;		line 184 in file "mcc_generated_files/eusart.c"
 10793 ;; Parameters:    Size  Location     Type
 10794 ;;		None
 10795 ;; Auto vars:     Size  Location     Type
 10796 ;;		None
 10797 ;; Return value:  Size  Location     Type
 10798 ;;                  1    wreg      void 
 10799 ;; Registers used:
 10800 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10801 ;; Tracked objects:
 10802 ;;		On entry : 0/0
 10803 ;;		On exit  : 0/0
 10804 ;;		Unchanged: 0/0
 10805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10807 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10808 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10809 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10810 ;;Total ram usage:        1 bytes
 10811 ;; Hardware stack levels used:    1
 10812 ;; This function calls:
 10813 ;;		Nothing
 10814 ;; This function is called by:
 10815 ;;		_INTERRUPT_InterruptManager
 10816 ;; This function uses a non-reentrant model
 10817 ;;
 10818                           
 10819                           
 10820                           ;psect for function _EUSART_Receive_ISR
 10821  0B14                     _EUSART_Receive_ISR:	
 10822                           
 10823                           ;eusart.c: 187: if(1 == RCSTAbits.OERR)
 10824                           
 10825                           ;incstack = 0
 10826                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 10827  0B14  0023               	movlb	3	; select bank3
 10828  0B15  1C9D               	btfss	29,1	;volatile
 10829  0B16  2B19               	goto	i1l3783
 10830                           
 10831                           ;eusart.c: 188: {
 10832                           ;eusart.c: 191: RCSTAbits.CREN = 0;
 10833  0B17  121D               	bcf	29,4	;volatile
 10834                           
 10835                           ;eusart.c: 192: RCSTAbits.CREN = 1;
 10836  0B18  161D               	bsf	29,4	;volatile
 10837  0B19                     i1l3783:	
 10838                           
 10839                           ;eusart.c: 193: }
 10840                           ;eusart.c: 196: eusartRxBuffer[eusartRxHead++] = RCREG;
 10841  0B19  0819               	movf	25,w	;volatile
 10842  0B1A  00F0               	movwf	??_EUSART_Receive_ISR
 10843  0B1B  0020               	movlb	0	; select bank0
 10844  0B1C  0869               	movf	_eusartRxHead,w
 10845  0B1D  3E20               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
 10846  0B1E  0086               	movwf	6
 10847  0B1F  3001               	movlw	1	; select bank2/3
 10848  0B20  0087               	movwf	7
 10849  0B21  0870               	movf	??_EUSART_Receive_ISR,w
 10850  0B22  0081               	movwf	1
 10851  0B23  3001               	movlw	1
 10852  0B24  00F0               	movwf	??_EUSART_Receive_ISR
 10853  0B25  0870               	movf	??_EUSART_Receive_ISR,w
 10854  0B26  07E9               	addwf	_eusartRxHead,f	;volatile
 10855                           
 10856                           ;eusart.c: 197: if(sizeof(eusartRxBuffer) <= eusartRxHead)
 10857  0B27  3008               	movlw	8
 10858  0B28  0269               	subwf	_eusartRxHead,w	;volatile
 10859  0B29  1803               	btfsc	3,0
 10860                           
 10861                           ;eusart.c: 198: {
 10862                           ;eusart.c: 199: eusartRxHead = 0;
 10863  0B2A  01E9               	clrf	_eusartRxHead	;volatile
 10864                           
 10865                           ;eusart.c: 200: }
 10866                           ;eusart.c: 201: eusartRxCount++;
 10867  0B2B  3001               	movlw	1
 10868  0B2C  00F0               	movwf	??_EUSART_Receive_ISR
 10869  0B2D  0870               	movf	??_EUSART_Receive_ISR,w
 10870  0B2E  07E7               	addwf	_eusartRxCount,f	;volatile
 10871  0B2F  0008               	return
 10872  0B30                     __end_of_EUSART_Receive_ISR:	
 10873  007E                     btemp	set	126	;btemp
 10874  007E                     int$flags	set	126
 10875  007E                     wtemp0	set	126


Data Sizes:
    Strings     185
    Constant    12
    Data        4
    BSS         203
    Persistent  8
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      14
    BANK0            80     64      79
    BANK1            80      2      78
    BANK2            80      0      72
    BANK3            80      0      48
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    i2c2_tr_queue.ptrb_list.pbuffer	PTR unsigned char  size(1) Largest target is 6
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), inv_handler@measure(BANK0[6]), 

    i2c2_tr_queue.pTrFlag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c2_read_no_reg_addr@status(BANK0[1]), i2c2_write_no_data@status(COMMON[1]), i2c2_read@status(COMMON[1]), i2c2_write@status(BANK0[1]), 

    i2c2_tr_queue.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK1[4]), I2C2_MasterWrite@trBlock(BANK1[4]), 

    PROTOCOL_Extension_Handler$0	PTR unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), I2C1_StatusCallback@ext_buf(BANK3[48]), 

    data	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    strncmp@s2	PTR const unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_15(CODE[4]), STR_14(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), 
		 -> STR_8(CODE[4]), STR_7(CODE[4]), STR_6(CODE[4]), STR_4(CODE[4]), 

    atoi@s	PTR const unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), 

    i2c2_read_no_reg_addr@pbuf	PTR unsigned char  size(1) Largest target is 6
		 -> inv_handler@measure(BANK0[6]), 

    PROTOCOL_I2C_SEN@pdata	PTR unsigned char  size(2) Largest target is 16
		 -> type_no_data(BANK1[1]), PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK2[16]), readbuf.length(BANK1[1]), 
		 -> readbuf.type(BANK1[1]), readbuf(BANK1[6]), 

    PROTOCOL_I2C_Send_int8_t@pbuffer	PTR char  size(1) Largest target is 2
		 -> PROTOCOL_Send_int8_t@pbuf(BANK1[1]), inv_handler@data(BANK0[2]), 

    PROTOCOL_I2C_Set_TLV@pbuffer	PTR unsigned char  size(2) Largest target is 16
		 -> PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK2[16]), 

    PROTOCOL_EXT@char_buf	PTR unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), I2C1_StatusCallback@ext_buf(BANK3[48]), 

    PROTOCOL_Tick_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    PROTOCOL_Extension_Handler	PTR FTN(PTR unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    PROTOCOL_Loop_Func	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    PROTOCOL_Initialize@inv_handler	PTR void  size(2) Largest target is 1
		 -> inv_handler(), 

    PROTOCOL_Inv_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), inv_handler(), 

    PROTOCOL_Initialize@set_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Set_Handler	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@stop_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Stop_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@start_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Start_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@device_id	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_1(CODE[10]), 

    device_id_	PTR const unsigned char  size(2) Largest target is 8192
		 -> ROM(CODE[8192]), STR_1(CODE[10]), 

    S1030$pbuffer	PTR unsigned char  size(2) Largest target is 16
		 -> PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK2[16]), 

    readbuf.pbuffer	PTR unsigned char  size(2) Largest target is 16
		 -> PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK2[16]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 8192
		 -> STR_10(CODE[4]), buf(BANK2[48]), STR_2(CODE[7]), ROM(CODE[8192]), 
		 -> printf@c(BANK0[1]), STR_1(CODE[10]), I2C2_ISR@i2c_address(BANK0[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_48(CODE[10]), STR_47(CODE[9]), STR_46(CODE[10]), STR_45(CODE[9]), 
		 -> STR_44(CODE[4]), STR_43(CODE[4]), STR_42(CODE[4]), STR_41(CODE[4]), 
		 -> STR_40(CODE[4]), STR_39(CODE[4]), STR_38(CODE[4]), STR_37(CODE[4]), 
		 -> STR_36(CODE[14]), STR_35(CODE[9]), STR_34(CODE[10]), STR_33(CODE[9]), 
		 -> STR_32(CODE[10]), STR_31(CODE[9]), STR_30(CODE[7]), STR_29(CODE[4]), 
		 -> STR_28(CODE[4]), STR_27(CODE[9]), STR_26(CODE[4]), STR_25(CODE[4]), 
		 -> STR_24(CODE[10]), STR_23(CODE[4]), STR_22(CODE[4]), STR_21(CODE[8]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[9]), STR_17(CODE[6]), 
		 -> STR_16(CODE[10]), STR_13(CODE[10]), STR_9(CODE[10]), STR_5(CODE[10]), 
		 -> STR_3(CODE[5]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    I2C2_MasterWriteTRBBuild@pdata	PTR unsigned char  size(1) Largest target is 2
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), 

    I2C2_MasterWriteTRBBuild@ptrb.pbuffer	PTR unsigned char  size(1) Largest target is 6
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), inv_handler@measure(BANK0[6]), 

    I2C2_MasterWriteTRBBuild@ptrb	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterWrite@trBlock(BANK1[4]), 

    I2C2_MasterReadTRBBuild@pdata	PTR unsigned char  size(1) Largest target is 6
		 -> inv_handler@measure(BANK0[6]), 

    I2C2_MasterReadTRBBuild@ptrb.pbuffer	PTR unsigned char  size(1) Largest target is 6
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), inv_handler@measure(BANK0[6]), 

    I2C2_MasterReadTRBBuild@ptrb	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK1[4]), 

    i2c2_object.pTrTail.ptrb_list.pbuffer	PTR unsigned char  size(1) Largest target is 6
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), inv_handler@measure(BANK0[6]), 

    i2c2_object.pTrTail.pTrFlag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c2_read_no_reg_addr@status(BANK0[1]), i2c2_write_no_data@status(COMMON[1]), i2c2_read@status(COMMON[1]), i2c2_write@status(BANK0[1]), 

    i2c2_object.pTrTail.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK1[4]), I2C2_MasterWrite@trBlock(BANK1[4]), 

    I2C2_MasterTRBInsert@ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK1[4]), I2C2_MasterWrite@trBlock(BANK1[4]), 

    I2C2_MasterTRBInsert@pflag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c2_read_no_reg_addr@status(BANK0[1]), i2c2_write_no_data@status(COMMON[1]), i2c2_read@status(COMMON[1]), i2c2_write@status(BANK0[1]), 

    I2C2_MasterRead@pflag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c2_read_no_reg_addr@status(BANK0[1]), i2c2_read@status(COMMON[1]), 

    I2C2_MasterRead@pdata	PTR unsigned char  size(1) Largest target is 6
		 -> inv_handler@measure(BANK0[6]), 

    F3084.pbuffer	PTR unsigned char  size(1) Largest target is 6
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), inv_handler@measure(BANK0[6]), 

    I2C2_MasterWrite@pflag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c2_write_no_data@status(COMMON[1]), i2c2_read@status(COMMON[1]), i2c2_write@status(BANK0[1]), 

    I2C2_MasterWrite@pdata	PTR unsigned char  size(1) Largest target is 2
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), 

    F3079.pbuffer	PTR unsigned char  size(1) Largest target is 6
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), inv_handler@measure(BANK0[6]), 

    I2C2_ISR@pi2c_buf_ptr	PTR unsigned char  size(1) Largest target is 6
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), inv_handler@measure(BANK0[6]), 
		 -> I2C2_ISR@i2c_address(BANK0[2]), NULL(NULL[0]), 

    S264$pbuffer	PTR unsigned char  size(1) Largest target is 6
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), inv_handler@measure(BANK0[6]), 

    p_i2c2_trb_current.pbuffer	PTR unsigned char  size(1) Largest target is 6
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), inv_handler@measure(BANK0[6]), 

    p_i2c2_trb_current	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK1[4]), I2C2_MasterWrite@trBlock(BANK1[4]), NULL(NULL[0]), 

    i2c2_object.pTrHead.pTrFlag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c2_read_no_reg_addr@status(BANK0[1]), i2c2_write_no_data@status(COMMON[1]), i2c2_read@status(COMMON[1]), i2c2_write@status(BANK0[1]), 

    i2c2_object.pTrHead.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK1[4]), I2C2_MasterWrite@trBlock(BANK1[4]), 

    S276$pTrFlag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c2_read_no_reg_addr@status(BANK0[1]), i2c2_write_no_data@status(COMMON[1]), i2c2_read@status(COMMON[1]), i2c2_write@status(BANK0[1]), 

    p_i2c2_current.pTrFlag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c2_read_no_reg_addr@status(BANK0[1]), i2c2_write_no_data@status(COMMON[1]), i2c2_read@status(COMMON[1]), i2c2_write@status(BANK0[1]), 

    S276$ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK1[4]), I2C2_MasterWrite@trBlock(BANK1[4]), 

    p_i2c2_current.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK1[4]), I2C2_MasterWrite@trBlock(BANK1[4]), 

    p_i2c2_current	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK1[3]), NULL(NULL[0]), 

    S287$pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK1[3]), 

    i2c2_object.pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK1[3]), 

    S287$pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK1[3]), 

    i2c2_object.pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK1[3]), 

    sp__PROTOCOL_I2C_SEN	PTR unsigned char  size(2) Largest target is 16
		 -> type_no_data(BANK1[1]), PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK2[16]), readbuf.length(BANK1[1]), 
		 -> readbuf.type(BANK1[1]), readbuf(BANK1[6]), 

    I2C1_StatusCallback@pdata	PTR unsigned char  size(2) Largest target is 16
		 -> type_no_data(BANK1[1]), PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK2[16]), readbuf.length(BANK1[1]), 
		 -> readbuf.type(BANK1[1]), readbuf(BANK1[6]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_I2C1_ISR
    _I2C2_ISR->_I2C2_Stop
    _I2C1_ISR->_I2C1_StatusCallback
    _I2C1_StatusCallback->_PROTOCOL_I2C_SEN
    _I2C1_StatusCallback->i1_PROTOCOL_SAV
    i1_PROTOCOL_SAV->i1_DATAEE_WriteByte

Critical Paths under _main in BANK0

    _main->_PROTOCOL_Loop
    _PROTOCOL_Loop->_inv_handler
    _inv_handler->_PROTOCOL_I2C_Send_int8_t
    _i2c2_write->_I2C2_MasterWrite
    _I2C2_MasterWrite->_I2C2_MasterWriteTRBBuild
    _i2c2_read_no_reg_addr->_I2C2_MasterRead
    _I2C2_MasterRead->_I2C2_MasterReadTRBBuild
    ___aldiv->___lmul
    _PROTOCOL_I2C_Send_int8_t->_printf
    _printf->___lwmod
    _putch->_EUSART_Write
    ___lwmod->___lwdiv
    _atoi->___wmul
    _PROTOCOL_Write_Device_Address->_DATAEE_WriteByte
    _PROTOCOL_SAV->_DATAEE_WriteByte
    _PROTOCOL_Initialize->_DATAEE_ReadByte

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_PROTOCOL_Loop

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   22284
                                             63 BANK0      1     1      0
                  _EUSART_Initialize
                    _I2C1_Initialize
                    _I2C2_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                _PROTOCOL_Initialize
                      _PROTOCOL_Loop
                    _TMR0_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (1) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_Initialize                                      1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Loop                                        4     4      0   21746
                                             61 BANK0      2     2      0
                                              0 BANK1      2     2      0
                   Absolute function *
                        _EUSART_Read
                       _PROTOCOL_EXT
       _PROTOCOL_Read_Device_Address
                       _PROTOCOL_SAV
                       _PROTOCOL_SET
                       _PROTOCOL_STA
                       _PROTOCOL_STP
      _PROTOCOL_Write_Device_Address
            _TMR0_HasOverflowOccured
                               _atoi
                        _inv_handler *
                             _printf
                            _strncmp
 ---------------------------------------------------------------------------------
 (2) _strncmp                                              7     2      5    2040
                                              1 BANK0      7     2      5
 ---------------------------------------------------------------------------------
 (2) _inv_handler                                         22    22      0   12416
                                             39 BANK0     22    22      0
           _PROTOCOL_I2C_Send_int8_t
                            ___aldiv
                             ___lmul
              _i2c2_read_no_reg_addr
                         _i2c2_write
 ---------------------------------------------------------------------------------
 (3) _i2c2_write                                          10     6      4    2338
                                             15 BANK0     10     6      4
                   _I2C2_MasterWrite
 ---------------------------------------------------------------------------------
 (4) _I2C2_MasterWrite                                     7     3      4    1771
                                              8 BANK0      7     3      4
               _I2C2_MasterTRBInsert
           _I2C2_MasterWriteTRBBuild
 ---------------------------------------------------------------------------------
 (5) _I2C2_MasterWriteTRBBuild                             7     3      4     450
                                              1 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _i2c2_read_no_reg_addr                                9     5      4    2153
                                             15 BANK0      9     5      4
                    _I2C2_MasterRead
 ---------------------------------------------------------------------------------
 (4) _I2C2_MasterRead                                      7     3      4    1598
                                              8 BANK0      7     3      4
            _I2C2_MasterReadTRBBuild
               _I2C2_MasterTRBInsert
 ---------------------------------------------------------------------------------
 (5) _I2C2_MasterTRBInsert                                 4     2      2     494
                                              1 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (5) _I2C2_MasterReadTRBBuild                              7     3      4     481
                                              1 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     444
                                              1 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     753
                                             13 BANK0     15     7      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _PROTOCOL_I2C_Send_int8_t                             4     3      1    6401
                                             35 BANK0      4     3      1
               _PROTOCOL_I2C_Set_TLV
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              24    20      4    5341
                                             15 BANK0     20    16      4
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      93
                                              3 BANK0      1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (4) _EUSART_Write                                         2     2      0      62
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     386
                                              9 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     395
                                              1 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (4) _PROTOCOL_I2C_Set_TLV                                 6     3      3     737
                                              1 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 8     6      2    1081
                                              7 BANK0      8     6      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      99
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     582
                                              1 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _TMR0_HasOverflowOccured                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_Write_Device_Address                        2     2      0     315
                                              4 BANK0      2     2      0
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_STP                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_STA                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_SET                                         2     2      0      31
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_SAV                                         1     1      0     253
                                              4 BANK0      1     1      0
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (3) _DATAEE_WriteByte                                     3     2      1     253
                                              1 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_EXT                                         1     1      0      99
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Read                                          2     2      0      37
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Initialize                                 10     2      8     538
                                              2 BANK0     10     2      8
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (2) _DATAEE_ReadByte                                      1     1      0      22
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2C2_Initialize                                      1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C1_Initialize                                      2     2      0       0
                                              1 BANK0      2     2      0
       _PROTOCOL_Read_Device_Address
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_Read_Device_Address                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Initialize                                    1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                           1     1      0     255
                                              0 BANK0      1     1      0
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
                           _I2C1_ISR
               _I2C2_BusCollisionISR
                           _I2C2_ISR
 ---------------------------------------------------------------------------------
 (8) _I2C2_ISR                                             4     4      0      22
                                              2 COMMON     4     4      0
              _I2C2_FunctionComplete
                          _I2C2_Stop
 ---------------------------------------------------------------------------------
 (9) _I2C2_Stop                                            2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (9) _I2C2_FunctionComplete                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _I2C2_BusCollisionISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _I2C1_ISR                                             2     2      0     233
                                              8 COMMON     2     2      0
                _I2C1_StatusCallback
 ---------------------------------------------------------------------------------
 (9) _I2C1_StatusCallback                                  4     4      0     187
                                              4 COMMON     4     4      0
   _PROTOCOL_Backplane_Slave_Enabled
                   _PROTOCOL_I2C_GET
                   _PROTOCOL_I2C_SEN
                   _PROTOCOL_I2C_WHO
                       _PROTOCOL_INV
                       _PROTOCOL_RST
                 _PROTOCOL_Read_Lock
                     i1_PROTOCOL_EXT
                     i1_PROTOCOL_SAV
                     i1_PROTOCOL_SET
                     i1_PROTOCOL_STA
                     i1_PROTOCOL_STP
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_STP                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_STA                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_SET                                      2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_SAV                                      1     1      0      94
                                              3 COMMON     1     1      0
                 i1_DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (11) i1_DATAEE_WriteByte                                  3     2      1      94
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_EXT                                      1     1      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_Read_Lock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_RST                                        1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_INV                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_I2C_WHO                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_I2C_SEN                                    4     4      0      26
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_I2C_GET                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_Backplane_Slave_Enabled                    0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _EUSART_Receive_ISR                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_Initialize
   _I2C1_Initialize
     _PROTOCOL_Read_Device_Address
   _I2C2_Initialize
   _OSCILLATOR_Initialize
   _PIN_MANAGER_Initialize
   _PROTOCOL_Initialize
     _DATAEE_ReadByte
   _PROTOCOL_Loop
     Absolute function(Fake) *
     _EUSART_Read *
     _PROTOCOL_EXT *
     _PROTOCOL_Read_Device_Address *
     _PROTOCOL_SAV *
       _DATAEE_WriteByte
     _PROTOCOL_SET *
     _PROTOCOL_STA *
     _PROTOCOL_STP *
     _PROTOCOL_Write_Device_Address *
       _DATAEE_WriteByte
     _TMR0_HasOverflowOccured *
     _atoi *
       ___wmul
       _isdigit
     _inv_handler *
       _PROTOCOL_I2C_Send_int8_t
         _PROTOCOL_I2C_Set_TLV
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
           _putch
             _EUSART_Write
       ___aldiv
         ___lmul (ARG)
       ___lmul
       _i2c2_read_no_reg_addr
         _I2C2_MasterRead
           _I2C2_MasterReadTRBBuild
           _I2C2_MasterTRBInsert
       _i2c2_write
         _I2C2_MasterWrite
           _I2C2_MasterTRBInsert
           _I2C2_MasterWriteTRBBuild
     _printf *
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
     _strncmp *
   _TMR0_Initialize
   _WDT_Initialize

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR
   _I2C1_ISR
     _I2C1_StatusCallback
       _PROTOCOL_Backplane_Slave_Enabled
       _PROTOCOL_I2C_GET
       _PROTOCOL_I2C_SEN
       _PROTOCOL_I2C_WHO
       _PROTOCOL_INV
       _PROTOCOL_RST
       _PROTOCOL_Read_Lock
       i1_PROTOCOL_EXT
       i1_PROTOCOL_SAV
         i1_DATAEE_WriteByte
       i1_PROTOCOL_SET
       i1_PROTOCOL_STA
       i1_PROTOCOL_STP
   _I2C2_BusCollisionISR
   _I2C2_ISR
     _I2C2_FunctionComplete
     _I2C2_Stop

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     40      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      2      4E       7       97.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      48       9       90.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      30      11       60.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     123      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     123      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Thu Sep 21 20:06:39 2017

                                         _i 0065                                           _j 00B3  
                                         pc 0002                 i2c2_read_no_reg_addr@status 0037  
                    __end_ofi1_PROTOCOL_EXT 09F9                      __end_ofi1_PROTOCOL_SAV 0A4E  
                    __end_ofi1_PROTOCOL_SET 0A3E                      __end_ofi1_PROTOCOL_STA 0A1A  
                    __end_ofi1_PROTOCOL_STP 0A05             __end_of_TMR0_HasOverflowOccured 0A22  
                               __CFG_CP$OFF 0000                       ?_I2C2_MasterTRBInsert 0021  
              i2c2_read_no_reg_addr@timeout 0035                         ___wmul@multiplicand 0023  
                           _timer0ReloadVal 00BE              I2C2_MasterReadTRBBuild@address 0023  
                            inv_handler@s_t 0053                                 __CFG_LVP$ON 0000  
                                       l600 01CA                                         l383 0C3A  
                                       l480 0C23                                         l617 0255  
                                       l565 00A7                                         l593 0154  
                                       l577 0174                                         l746 0256  
                                       l943 0C9B                                __CFG_CPD$OFF 0000  
                                       _buf 0128                                         _cnt 00BC  
                              __CFG_BORV$LO 0000                                         wreg 0009  
                              __CFG_IESO$ON 0000                             inv_handler@data 005B  
                              ?_EUSART_Read 0070                             inv_handler@s_rh 0057  
                          __end_of_I2C1_ISR 0C78                            __end_of_I2C2_ISR 0536  
                                      l1123 0F8F                                        l1064 0B39  
                                      l4005 0C2F                                        l4111 0D56  
                                      l4033 0EB5                                        l4115 0D62  
                                      l4019 0C4E                                        l4043 0EC8  
                                      l4109 0D4A                                        l4213 0199  
                                      l4141 00A2                                        l4037 0EBC  
                                      l4133 0CE8                                        l4301 0C91  
                                      l4063 0B33                                        l4119 0D6B  
                                      l4039 0EC1                                        l4127 0D10  
                              _tmr_overflow 00B6                                        l4057 0A7B  
                                      l4241 01F3                                        l4233 01E6  
                                      l4225 01BE                                        l4209 018E  
                                      l4161 00F1                                        l4153 00C2  
                                      l4235 01E9                                        l4219 019F  
                                      l4147 00AC                                        l4403 0FE9  
                                      l4323 0D3B                                        l4307 0C9D  
                                      l4093 0DF5                                        l4085 0DD7  
                                      l4253 0213                                        l4173 0107  
                                      l4149 00B5                                        l4341 0F28  
                                      l4317 0D31                                        l4431 0B89  
                                      l4511 07BD                                        l4087 0DE3  
                                      l4263 0220                                        l4247 0202  
                                      l4191 014B                                        l4183 0124  
                                      l4175 0115                                        l4343 0F40  
                                      l4407 0FF7                                        l4327 0D1E  
                                      l4521 07FA                                        l4513 07C1  
                                      l4505 07B5                                        l4097 0DFE  
                                      l4249 0206                                        l4257 021B  
                                      l4185 0133                                        l4169 0105  
                                      l4265 0086                                        l4353 0F50  
                                      l4345 0F4C                                        l4329 0D41  
                                      l4601 0327                                        l4515 07EA  
                                      l4179 0122                                        l4355 0F6C  
                                      l4363 0DB1                                        l4611 036B  
                                      l4189 0140                                        l4197 0156  
                                      l4381 0FA0                                        l4621 03B3  
                                      l4391 0FBE                                        l4359 0DA7  
                                      l4615 038F                                        l4607 034C  
                                      l4481 0E39                                        l4627 03E2  
                                      l4493 0798                                        l4389 0FB0  
                                      l4477 0E21                                        l4485 0E03  
                                      l4557 0282                                        l4495 0790  
                                      l4399 0FDE                                        l4487 0E42  
                                      l4559 0283                                        l4497 079D  
                                      l4593 02F5                                        l4569 0291  
                                      l4597 030E                                        l4589 02D0  
                                      STR_1 0729                                        STR_2 074C  
                                      STR_3 0759                                        STR_4 077A  
                                      STR_5 0701                                        STR_6 078A  
                                      STR_7 0772                                        STR_8 077E  
                                      STR_9 070B                                        _LATA 010C  
                                      _LATB 010D                                        _LATC 010E  
                                      u3325 0B3A                                        u3405 0DF6  
                                      u3335 0B3F                                        u3435 0D4D  
                                      u3365 0DDA                                        u3455 0D5C  
                                      u3615 01B4                                        u3385 0DE4  
                                      u3465 0D63                                        u3395 0DEE  
                                      u3555 011B                                        u4447 0BCD  
                                      u3655 01D9                                        u3935 0FB3  
                                      i1l64 0C65                                        u3955 0FBF  
                                      u3875 0DB2                                        u3965 0FD3  
                                      u3885 0DB9                                        i1l86 0538  
                                      u3975 0FDF                                        _TMR0 0015  
                                      _WPUA 020C                                        _WPUB 020D  
                                      _WPUC 020E                                __CFG_WRT$OFF 0000  
                             __CFG_FCMEN$ON 0000                                        _data 00B2  
                                      _atoi 078E                                        _main 0D70  
                                      fsr0h 0005                                        fsr1h 0007  
                                      indf0 0000                                        fsr0l 0004  
                                      indf1 0001                                        fsr1l 0006  
                                      btemp 007E                 I2C2_MasterReadTRBBuild@ptrb 0027  
                             __CFG_BOREN$ON 0000                                        start 0048  
                             __CFG_MCLRE$ON 0000                         _I2C1_StatusCallback 0536  
                ??_PROTOCOL_I2C_Send_int8_t 0044                             ?i1_PROTOCOL_EXT 0070  
                           ?i1_PROTOCOL_SAV 0070                             ?i1_PROTOCOL_SET 0070  
                 __size_of_DATAEE_WriteByte 0023                             ?i1_PROTOCOL_STA 0070  
                           ?i1_PROTOCOL_STP 0070                     __end_of_TMR0_Initialize 0A8C  
                             __CFG_PLLEN$ON 0000                                  _i2c2_state 00C3  
                             ?_EUSART_Write 0070                                  _i2c2_write 0C78  
            __size_of_OSCILLATOR_Initialize 0005               __end_of_OSCILLATOR_Initialize 0A2B  
                   _I2C2_MasterReadTRBBuild 0C9F                             __end_of___aldiv 1000  
                                     ?_atoi 0027                                       ?_main 0070  
                                     STR_10 0776                                       STR_11 0786  
                                     STR_12 0782                                       STR_20 075E  
                                     STR_13 06ED                                       STR_14 076E  
                                     STR_22 0762                                       STR_30 0745  
                                     STR_15 076A                                       STR_40 06E9  
                                     STR_24 071F                                       STR_32 0715  
                                     STR_16 06E3                                       STR_17 0753  
                             __CFG_WDTE$OFF 0000                                       STR_18 073C  
                                     STR_34 06F7                                       STR_19 0766  
                                     STR_35 0733                                       STR_36 06D5  
                                     STR_39 0762                           __end_of_I2C2_Stop 0ADF  
                           __end_of___lwdiv 0E03                                       i1l103 055B  
                                     i1l210 04CD                                       i1l124 0600  
            __size_of_I2C2_FunctionComplete 0012                                       i1l213 04E1  
                                     i1l214 04EF                                       i1l206 04AB  
                                     i1l225 0AAB                                       i1l218 0516  
                                     i1l323 0015                                       i1l325 0021  
                                     i1l333 0043                                       i1l190 0431  
                                     i1l327 002D                                       i1l184 03FB  
                                     i1l329 0039                             __end_of___lwmod 0D70  
                                     i1l195 0456                                       i1l196 0462  
                                     i1l189 0429                                       i1l480 0B60  
                                     i1l395 0B11                  PROTOCOL_I2C_Set_TLV@length 0021  
                                     _RCREG 0199               __end_of_I2C2_FunctionComplete 0AAE  
                                     _RCSTA 019D                      i2c2_write@write_status 0037  
                                     _TRISA 008C                                       _TRISB 008D  
                                     _TRISC 008E                                       _TXREG 019A  
                                     _TXSTA 019E                         ___lmul@multiplicand 0025  
              __size_of_PROTOCOL_Initialize 0051                  PROTOCOL_I2C_Set_TLV@status 0026  
                         ??_I2C1_Initialize 0021                        ?_I2C1_StatusCallback 0070  
                           _DATAEE_ReadByte 0A61             ??_PROTOCOL_Write_Device_Address 0024  
                           __end_of_dpowers 06D3                              _WDT_Initialize 0A22  
            PROTOCOL_Initialize@inv_handler 0027                             __end_of_isdigit 0A7D  
                              ?_inv_handler 0070                                       _value 0066  
                                     atoi@a 002C                                       atoi@s 002E  
                                     _putch 0A2B                I2C2_MasterReadTRBBuild@pdata 0021  
                    ?_i2c2_read_no_reg_addr 002F                                       pclath 000A  
                    ??_PROTOCOL_I2C_Set_TLV 0024                                       status 0003  
                                     wtemp0 007E                             __end_of_strncmp 0E45  
                         ??_I2C2_MasterRead 002C                           ??_I2C2_Initialize 0021  
                           __initialization 004A                                __end_of_atoi 07FF  
                              __end_of_main 0D9E                      ??_I2C2_MasterTRBInsert 0023  
                            ??_EUSART_Write 0021                              i2c2_write@data 0032  
               ?_INTERRUPT_InterruptManager 0070            __end_of_I2C2_MasterWriteTRBBuild 0BC7  
          PROTOCOL_Initialize@start_handler 0024                                      ??_atoi 0029  
                                    ??_main 005F                                 _i2c2_object 0060  
                        _PROTOCOL_Read_Lock 09FF                           inv_handler@status 004C  
                    __end_of_WDT_Initialize 0A26                       ??_I2C1_StatusCallback 0074  
                __end_ofi1_DATAEE_WriteByte 0B69                                      i1S4725 0800  
                                    i1S4727 0818                                      _EEADRH 0192  
                                    _EEADRL 0191                                      _EEDATH 0194  
                                    _EEDATL 0193                                      _EECON2 0196  
                                    _ANSELA 018C                                      ?_putch 0070  
                                    _ANSELB 018D                                      _ANSELC 018E  
                       ?_PROTOCOL_Read_Lock 0070                          _PROTOCOL_Loop_Func 00B0  
              __end_of_I2C2_BusCollisionISR 0003                                      i1l3121 0E4E  
                                    i1l3125 0E54                                      i1l3141 0E83  
                                    i1l3117 0E46                                      i1l3135 0E6F  
                                    i1l3311 054B                                      i1l3303 053C  
                                    i1l3129 0E65                                      i1l3313 054F  
                                    i1l3305 0542                                      i1l3139 0E74  
                                    i1l3315 0553                                      i1l3323 0562  
                                    i1l3341 059A                                      i1l3317 0557  
                                    i1l3309 0547                                      i1l3405 0ADC  
                                    i1l3351 05B6                                      i1l3335 058E  
                                    i1l3319 055E                                      i1l3327 057A  
                                    i1l3329 0584                                      i1l3361 05CF  
                                    i1l3601 041C                                      i1l3363 05D2  
                                    i1l3355 05B9                                      i1l3365 05D7  
                                    i1l3373 05EA                                      i1l3613 043D  
                                    i1l3359 05C3                                      i1l3551 0C6C  
                                    i1l3703 051A                                      i1l3369 05E5  
                                    i1l3377 05F6                                      i1l3553 0C6E  
                                    i1l3545 0C63                                      i1l3705 051D  
                                    i1l3633 0480                                      i1l3713 052A  
                                    i1l3707 0521                                      i1l3619 0450  
                                    i1l3653 0498                                      i1l3691 04FD  
                                    i1l3675 04D5                                      i1l3667 04B9  
                                    i1l3659 04A5                                      i1l3783 0B19  
                                    i1l3687 04F6                                      _OSCCON 0099  
          __size_of_TMR0_HasOverflowOccured 0004                                      _TMR0IF 005A  
                                    _SPBRGH 019C                                      _SPBRGL 019B  
                                    _WDTCON 0097                       I2C2_MasterRead@length 0028  
            PROTOCOL_Initialize@set_handler 0026                              __CFG_PWRTE$OFF 0000  
                 PROTOCOL_Initialize@scaler 0029                                      ___lmul 0D9E  
                                 ??___aldiv 0035                                      ___wmul 0B30  
                            _p_i2c2_current 006A                              __CFG_STVREN$ON 0000  
                 ??_I2C2_MasterReadTRBBuild 0025                                   ??___lwdiv 0025  
                      ??_PROTOCOL_Read_Lock 0070                                   ??___lwmod 002D  
                              _type_no_data 00EB                         _EUSART_Transmit_ISR 0AF9  
                          ?_TMR0_Initialize 0070                                      _locked 00BB  
                                 ?_I2C1_ISR 0070                                   ?_I2C2_ISR 0070  
                               ?_i2c2_write 002F                    I2C2_Stop@completion_code 0071  
                                    _printf 0081                     __end_of_DATAEE_ReadByte 0A6E  
             I2C2_MasterReadTRBBuild@length 0022                                __pdataCOMMON 007D  
                                 ??_isdigit 0021                    __end_of_PROTOCOL_I2C_GET 09FC  
                  __end_of_PROTOCOL_I2C_SEN 0E88                    __end_of_PROTOCOL_I2C_WHO 09FF  
                           ?_WDT_Initialize 0070               i1DATAEE_WriteByte@GIEBitValue 0072  
                                 ??_strncmp 0026                   PROTOCOL_Send_uint8_t@pbuf 00E0  
                      ?_EUSART_Transmit_ISR 0070                        __size_of_EUSART_Read 0020  
                   __end_of__initialization 007D                           ?_I2C2_MasterWrite 0028  
                        ??_I2C2_MasterWrite 002C                              __pcstackCOMMON 0070  
                              __pidataBANK1 0A0B                            _DATAEE_WriteByte 0C0A  
                            _i2c2_trb_count 00C2                               __end_of_putch 0A31  
                                ??_I2C1_ISR 0078                                  ??_I2C2_ISR 0072  
                     __end_of_PROTOCOL_Loop 03E7                              _OPTION_REGbits 0095  
                  _I2C2_MasterWriteTRBBuild 0BA7                I2C2_MasterWriteTRBBuild@ptrb 0027  
                   PROTOCOL_Send_float@pbuf 00D5                       ??_EUSART_Transmit_ISR 0070  
                                   ??_putch 0023                                  __pbssBANK0 0060  
                                __pbssBANK1 00A0                                  __pbssBANK2 0120  
                                __pbssBANK3 01A0                      i1DATAEE_WriteByte@bAdd 0071  
                        inv_handler@measure 004D                        __end_of_EUSART_Write 0C51  
                      __size_of_inv_handler 00C8                         __size_of_i2c2_write 0027  
               __size_of_EUSART_Receive_ISR 001C                          i2c2_write@dev_addr 002F  
                          ??i1_PROTOCOL_EXT 0070                            ??i1_PROTOCOL_SAV 0073  
                          ??i1_PROTOCOL_SET 0070                            ??i1_PROTOCOL_STA 0070  
                          ??i1_PROTOCOL_STP 0070                         _PROTOCOL_Initialize 0ECF  
                                __pmaintext 0D70                                     ?___lmul 0021  
                                   ?___wmul 0021                                  __pintentry 0004  
                           _I2C1_Initialize 0BC7                                     _BAUDCON 019F  
                            ___lmul@product 0029                                  _device_id_ 00E1  
                        i2c2_write@reg_addr 0031                                     _APFCON0 011D  
                                   _APFCON1 011E                        _I2C2_BusCollisionISR 0002  
                                   ?_printf 002F                   i2c2_read_no_reg_addr@pbuf 0031  
                I2C1_StatusCallback@ext_buf 01A0                  I2C1_StatusCallback@ext_cnt 00C4  
                I2C1_StatusCallback@ext_len 00C5                            ?_DATAEE_ReadByte 0070  
                             _eusartRxCount 0067           I2C1_StatusCallback@slaveWriteType 00C6  
                PROTOCOL_Send_uint16_t@pbuf 00DD                        ?_PROTOCOL_Initialize 0022  
         I2C2_ISR@i2c_10bit_address_restart 00BF                      I2C2_MasterRead@address 0029  
                                 _I2C2_Stop 0AC6                     ??_i2c2_read_no_reg_addr 0033  
                                   _OSCTUNE 0098                                     _SSP1ADD 0212  
                                   _SSP2ADD 021A                                     _SSP1BUF 0211  
                                   _SSP2BUF 0219                                     _SSP1MSK 0213  
                    _PROTOCOL_Start_Handler 00E7                             _I2C2_MasterRead 0CC7  
                           _I2C2_Initialize 0AAE                          __end_of_RESOLUTION 06D5  
                   _TMR0_HasOverflowOccured 0A1E                        DATAEE_WriteByte@bAdd 0022  
                    I2C2_MasterRead@trBlock 00CD                                     ___aldiv 0F7E  
                           __size_of___lmul 0030                               ?_PROTOCOL_INV 0070  
                             ?_PROTOCOL_EXT 0070                               ?_PROTOCOL_SAV 0070  
                             ?_PROTOCOL_SET 0070                               ?_PROTOCOL_STA 0070  
                             ?_PROTOCOL_RST 0070                               ?_PROTOCOL_STP 0070  
                           __size_of___wmul 001C                                     ___lwdiv 0DCE  
                                   ___lwmod 0D43                       ?_I2C2_BusCollisionISR 0070  
                 I2C2_MasterTRBInsert@count 0024                                     __ptext1 0A22  
                                   __ptext2 0A7D                                     __ptext3 0256  
                                   __ptext4 0E03                                     __ptext5 0601  
                                   __ptext6 0C78                                     __ptext7 0CEF  
                                   __ptext8 0BA7                                     __ptext9 0D17  
                 I2C2_MasterTRBInsert@pflag 0022                             __size_of_printf 01D5  
                                   _dpowers 06C9                       _OSCILLATOR_Initialize 0A26  
PROTOCOL_Write_Device_Address@device_id_i2c 0025                       ??_PROTOCOL_Initialize 002A  
                                   _isdigit 0A6E                                     _readbuf 00C7  
                                   _sec_cnt 00B8                                     _invoked 00B9  
                          ___aldiv@dividend 0031                    ??_PIN_MANAGER_Initialize 0021  
                                   _sendbuf 0158           __size_of_PROTOCOL_I2C_Send_int8_t 005E  
                                ?_I2C2_Stop 0070                       _I2C2_FunctionComplete 0A9C  
                 ?_PROTOCOL_I2C_Send_int8_t 0043                                     _tmr_cnt 00B7  
                                   clrloop0 0A32                                     _running 00BA  
                                   _strncmp 0E03                        end_of_initialization 007D  
                _PROTOCOL_Extension_Handler 00AE               __size_of_PROTOCOL_I2C_Set_TLV 0022  
                        i1_DATAEE_WriteByte 0B4C                           _EUSART_Initialize 0ADF  
                   __end_of_I2C1_Initialize 0BE8                          ?_EUSART_Initialize 0070  
                     I2C2_MasterWrite@pdata 002E                          _p_i2c2_trb_current 006B  
                     _PROTOCOL_Tick_Handler 00AA                                   _RCSTAbits 019D  
                     I2C2_MasterWrite@pflag 002B                                     printf@c 0042  
                                   printf@f 002F                            ___aldiv@quotient 0038  
                            ??_PROTOCOL_INV 0070                              ??_PROTOCOL_EXT 0021  
                            ??_PROTOCOL_SAV 0024                              ??_PROTOCOL_SET 0021  
                            ??_PROTOCOL_STA 0021                              ??_PROTOCOL_RST 0070  
                            ??_PROTOCOL_STP 0021                      I2C2_ISR@i2c_bytes_left 00C0  
                       ?i1_DATAEE_WriteByte 0070                                __pstringtext 06C9  
             __size_of_I2C2_MasterTRBInsert 0047                                ??_i2c2_write 0033  
                       ??_EUSART_Initialize 0021                 __end_of_I2C1_StatusCallback 0601  
                          ??_WDT_Initialize 0021                           __size_of_I2C1_ISR 0027  
                         __size_of_I2C2_ISR 014F                     __end_of_I2C2_MasterRead 0CEF  
                          __CFG_FOSC$INTOSC 0000                     __end_of_I2C2_Initialize 0AC6  
                         ?_PROTOCOL_I2C_GET 0070                           ?_PROTOCOL_I2C_SEN 0070  
                         ?_PROTOCOL_I2C_WHO 0070                       __size_of_EUSART_Write 0024  
                 ??_TMR0_HasOverflowOccured 0021                          ??_PROTOCOL_I2C_GET 0070  
                        ??_PROTOCOL_I2C_SEN 0070                          ??_PROTOCOL_I2C_WHO 0070  
                      ??i1_DATAEE_WriteByte 0071                                  _tmr_scaler 00E9  
                  __end_of_DATAEE_WriteByte 0C2D                   __end_of_EUSART_Initialize 0AF9  
                               printf@width 0040                          __end_of_i2c2_write 0C9F  
                      i1PROTOCOL_SET@value_ 0071                      ??_I2C2_BusCollisionISR 0070  
                  I2C1_StatusCallback@pdata 0075                              __end_of___lmul 0DCE  
               __size_of_PROTOCOL_Read_Lock 0003                  ??_I2C2_MasterWriteTRBBuild 0025  
                            __end_of___wmul 0B4C                               __pidataCOMMON 07FF  
                              _EUSART_Write 0C2D                      ?_OSCILLATOR_Initialize 0070  
                 __size_of_I2C2_MasterWrite 0028                              __end_of_printf 0256  
                    ?_I2C2_FunctionComplete 0070                              PROTOCOL_Loop@c 00EC  
                       start_initialization 004A                                 ??_I2C2_Stop 0070  
                  __size_of_TMR0_Initialize 000F             __size_of_PIN_MANAGER_Initialize 001E  
                             ??_EUSART_Read 0021                               i2c2_write@buf 0035  
             i2c2_read_no_reg_addr@dev_addr 002F                                 putch@txData 0023  
                       DATAEE_ReadByte@bAdd 0021             I2C2_MasterWriteTRBBuild@address 0023  
                          i2c2_write@status 0038                        I2C2_MasterRead@pdata 002E  
                  ?_I2C2_MasterReadTRBBuild 0021                        I2C2_MasterRead@pflag 002B  
                          ?_I2C1_Initialize 0070                                    ??___lmul 0029  
                          I2C1_ISR@i2c_data 0079                                    ??___wmul 0025  
             I2C2_MasterWriteTRBBuild@pdata 0021                        I2C2_ISR@pi2c_buf_ptr 00C1  
                  PROTOCOL_Send_int8_t@pbuf 00DF        __end_of_PROTOCOL_Read_Device_Address 0A08  
     __size_of_PROTOCOL_Read_Device_Address 0003                _PROTOCOL_Read_Device_Address 0A05  
                               __pdataBANK1 00E9                                    ??_printf 0033  
                   i1DATAEE_WriteByte@bData 0070                 __end_of_EUSART_Transmit_ISR 0B14  
                          ?_I2C2_MasterRead 0028                                 __pbssCOMMON 007A  
                          ?_I2C2_Initialize 0070                                   ___latbits 0002  
                             __pcstackBANK0 0020                               __pcstackBANK1 00EC  
          I2C1_StatusCallback@i2c_bus_state 0077                        _PROTOCOL_Inv_Handler 00AC  
                              _isdigit$1482 0021                               ??_inv_handler 0047  
                      __end_of_PROTOCOL_INV 0A16                        __end_of_PROTOCOL_EXT 0004  
                      __end_of_PROTOCOL_SAV 0A57                        __end_of_PROTOCOL_SET 0A45  
                      __end_of_PROTOCOL_STA 0A1E              __size_of_i2c2_read_no_reg_addr 002C  
                      __end_of_PROTOCOL_RST 0A61                        __end_of_PROTOCOL_STP 0A0B  
             __end_of_i2c2_read_no_reg_addr 0D43                               _i2c2_tr_queue 00D8  
                __end_of_EUSART_Receive_ISR 0B30             PROTOCOL_Initialize@stop_handler 0025  
                __size_of_EUSART_Initialize 001A                         __end_of_EUSART_Read 0BA7  
                    __size_of_PROTOCOL_Loop 0191                                   __pnvBANK1 00E1  
     __end_of_PROTOCOL_Write_Device_Address 0A9C      __size_of_PROTOCOL_Write_Device_Address 0010  
             _PROTOCOL_Write_Device_Address 0A8C                            ___lwdiv@dividend 0023  
                    _PIN_MANAGER_Initialize 0B69                        EUSART_Read@readValue 0022  
                                  ?___aldiv 002D            __end_of_PROTOCOL_I2C_Send_int8_t 0F7E  
                                  ?___lwdiv 0021                                    ?___lwmod 0029  
                              _eusartRxHead 0069                                _eusartTxHead 007C  
                              _eusartRxTail 0068                                _eusartTxTail 007B  
                                  _I2C1_ISR 0C51                                    _I2C2_ISR 03E7  
             ?_PROTOCOL_Read_Device_Address 0070                ??_INTERRUPT_InterruptManager 0020  
                 PROTOCOL_Send_int16_t@pbuf 00DB                                   __pswtext1 0800  
                                 __pswtext2 0818                     _eusartTxBufferRemaining 007A  
                                  ?_isdigit 0070                            ___lwdiv@quotient 0027  
                  __size_of_DATAEE_ReadByte 000D                                    ?_strncmp 0021  
                            __size_of_putch 0006                              _eusartRxBuffer 0120  
           __end_of_I2C2_MasterReadTRBBuild 0CC7                             ___aldiv@divisor 002D  
                         ??_TMR0_Initialize 0021                              _eusartTxBuffer 00A0  
                           ___aldiv@counter 0036                              ___wmul@product 0025  
                                  _LATCbits 010E                        _PROTOCOL_Set_Handler 00E3  
          i2c2_read_no_reg_addr@read_status 0036                                   clear_ram0 0A31  
                       __end_of_inv_handler 06C9                                    _PIE1bits 0091  
                                  _PIE4bits 0094                       PROTOCOL_I2C_SEN@pdata 0072  
                  PROTOCOL_I2C_Set_TLV@type 0025         __size_of_INTERRUPT_InterruptManager 0044  
                                  _PIR1bits 0011                                    _PIR4bits 0014  
                                  _SSP1CON1 0215                                    _SSP1CON2 0216  
                                  _SSP1CON3 0217                PROTOCOL_Initialize@device_id 0022  
                                  _SSP2CON1 021D                                    _SSP2CON3 021F  
                                  _SSP1STAT 0214                                    _SSP2STAT 021C  
                            _readbuf_status 00B5                       _PROTOCOL_Stop_Handler 00E5  
               __end_of_PROTOCOL_Initialize 0F20               I2C2_MasterTRBInsert@ptrb_list 0021  
                   __size_ofi1_PROTOCOL_EXT 0001                     __size_ofi1_PROTOCOL_SAV 0009  
                   __size_ofi1_PROTOCOL_SET 0007                     __size_ofi1_PROTOCOL_STA 0004  
                   __size_ofi1_PROTOCOL_STP 0003                           ___wmul@multiplier 0021  
              __end_of_PROTOCOL_I2C_Set_TLV 0C0A                            _I2C2_MasterWrite 0CEF  
                             _PROTOCOL_Loop 0256                                  printf@flag 003F  
                                printf@prec 0037                       DATAEE_WriteByte@bData 0021  
                   I2C1_StatusCallback@next 006C                                 _EUSART_Read 0B87  
                         ___lmul@multiplier 0021                __end_of_I2C2_MasterTRBInsert 0ECF  
               PROTOCOL_I2C_Set_TLV@pbuffer 0022                           ?_DATAEE_WriteByte 0021  
  __end_of_PROTOCOL_Backplane_Slave_Enabled 0A12   __size_of_PROTOCOL_Backplane_Slave_Enabled 0004  
        ??_PROTOCOL_Backplane_Slave_Enabled 0070           ?_PROTOCOL_Backplane_Slave_Enabled 0070  
          _PROTOCOL_Backplane_Slave_Enabled 0A0E                          ??_DATAEE_WriteByte 0022  
                             _slave_address 00BD                                  _EECON1bits 0195  
                        PROTOCOL_SET@value_ 0022                   __size_of_PROTOCOL_I2C_GET 0003  
                 __size_of_PROTOCOL_I2C_SEN 0043                   __size_of_PROTOCOL_I2C_WHO 0003  
            I2C2_MasterWriteTRBBuild@length 0022                     ??_OSCILLATOR_Initialize 0021  
            ?_PROTOCOL_Write_Device_Address 0070                            __size_of___aldiv 0082  
                          __size_of___lwdiv 0035                            __size_of___lwmod 002D  
                   ??_I2C2_FunctionComplete 0070                              ?_PROTOCOL_Loop 0070  
                  _PROTOCOL_I2C_Send_int8_t 0F20                       __size_of_PROTOCOL_INV 0004  
                     __size_of_PROTOCOL_EXT 0001                       __size_of_PROTOCOL_SAV 0009  
                     __size_of_PROTOCOL_SET 0007                       __size_of_PROTOCOL_STA 0004  
                     __size_of_PROTOCOL_RST 000A                       __size_of_PROTOCOL_STP 0003  
            ??_PROTOCOL_Read_Device_Address 0021                            __size_of_isdigit 000F  
                           ___lwdiv@divisor 0021                __size_of_I2C1_StatusCallback 00CB  
                           ___lwdiv@counter 0026                                    __ptext10 0CC7  
                                  __ptext11 0E88                                    __ptext20 0DCE  
                                  __ptext12 0C9F                                    __ptext21 0BE8  
                                  __ptext13 0D9E                                    __ptext30 0A4E  
                                  __ptext22 078E                                    __ptext14 0F7E  
                                  __ptext31 0C0A                                    __ptext23 0A6E  
                                  __ptext15 0F20                                    __ptext40 0A05  
                                  __ptext32 0003                                    __ptext24 0B30  
                                  __ptext16 0081                                    __ptext41 0ADF  
                                  __ptext33 0B87                                    __ptext25 0A1E  
                                  __ptext17 0A2B                                    __ptext50 0A16  
                                  __ptext34 0ECF                                    __ptext26 0A8C  
                                  __ptext18 0C2D                                    __ptext51 0A37  
                                  __ptext43 03E7                                    __ptext35 0A61  
                                  __ptext27 0A08                                    __ptext19 0D43  
                                  __ptext60 09F9                                    __ptext52 0A45  
                                  __ptext44 0AC6                                    __ptext36 0B69  
                                  __ptext28 0A1A                                    __ptext61 0A0E  
                                  __ptext53 0B4C                                    __ptext45 0A9C  
                                  __ptext37 0A26                                    __ptext29 0A3E  
                                  __ptext62 0AF9                                    __ptext54 09F8  
                                  __ptext46 0002                                    __ptext38 0AAE  
                                  __ptext63 0B14                                    __ptext55 09FF  
                                  __ptext47 0C51                                    __ptext39 0BC7  
                                  __ptext56 0A57                                    __ptext48 0536  
                                  __ptext57 0A12                                    __ptext49 0A02  
                                  __ptext58 09FC                                    __ptext59 0E45  
                              _SSP1CON1bits 0215                                _SSP1CON2bits 0216  
                                  _float100 00A8                 __size_ofi1_DATAEE_WriteByte 001D  
                               _inv_handler 0601                                _SSP2CON1bits 021D  
                              _SSP2CON2bits 021E                 DATAEE_WriteByte@GIEBitValue 0023  
                          __size_of_strncmp 0042                               __size_of_atoi 0071  
                             __size_of_main 002E                                  strncmp@len 0024  
                         ??_DATAEE_ReadByte 0021                     I2C2_MasterWrite@address 0029  
                   _BACKPLANE_SLAVE_ADDRESS 00EA                  __end_of_PROTOCOL_Read_Lock 0A02  
                                  int$flags 007E                                    atoi@sign 002B  
           PROTOCOL_I2C_Send_int8_t@pbuffer 0043                                _PROTOCOL_INV 0A12  
                              _PROTOCOL_EXT 0003                                _PROTOCOL_SAV 0A4E  
                              _PROTOCOL_SET 0A3E                                _PROTOCOL_STA 0A1A  
                              _PROTOCOL_RST 0A57                                _PROTOCOL_STP 0A08  
        __end_of_INTERRUPT_InterruptManager 0048                  _INTERRUPT_InterruptManager 0004  
                                 printf@len 003D                                   printf@val 003B  
                   I2C2_MasterWrite@trBlock 00D1                                _SSP1STATbits 0214  
                  i2c2_read_no_reg_addr@len 0032               __size_of_I2C2_BusCollisionISR 0001  
          __size_of_I2C2_MasterReadTRBBuild 0028                    ?_TMR0_HasOverflowOccured 0070  
                        _I2C_slaveWriteData 007D                                  _INTCONbits 000B  
                                  isdigit@c 0022                     __size_of_WDT_Initialize 0004  
         __size_of_I2C2_MasterWriteTRBBuild 0020                   ?_I2C2_MasterWriteTRBBuild 0021  
                                  intlevel1 0000                            ___lwmod@dividend 002B  
                       I2C2_ISR@i2c_address 006D                     ?_PIN_MANAGER_Initialize 0070  
                         __CFG_CLKOUTEN$OFF 0000                        _PROTOCOL_I2C_Set_TLV 0BE8  
                                 strncmp@s1 0021                                   strncmp@s2 0023  
                   _backplane_slave_enabled 00B4              PROTOCOL_I2C_Send_int8_t@length 0046  
                                _RESOLUTION 06D3                      I2C2_MasterWrite@length 0028  
                                  printf@ap 003A                                    printf@cp 0038  
                        _EUSART_Receive_ISR 0B14                             ??_PROTOCOL_Loop 005D  
                      _I2C2_MasterTRBInsert 0E88                    __size_of_I2C1_Initialize 0021  
                            i1_PROTOCOL_EXT 09F8                              i1_PROTOCOL_SAV 0A45  
                            i1_PROTOCOL_SET 0A37                              i1_PROTOCOL_STA 0A16  
                            i1_PROTOCOL_STP 0A02                                  _OPTION_REG 0095  
                       ?_EUSART_Receive_ISR 0070                             ___lwmod@divisor 0029  
                           _TMR0_Initialize 0A7D                             ___lwmod@counter 002E  
                              ___aldiv@sign 0037                 PROTOCOL_Loop@device_address 00ED  
                      PROTOCOL_EXT@char_buf 0021                          EUSART_Write@txData 0022  
              __size_of_EUSART_Transmit_ISR 001B              __end_of_PIN_MANAGER_Initialize 0B87  
                  __size_of_I2C2_MasterRead 0028                    __size_of_I2C2_Initialize 0018  
                     _i2c2_read_no_reg_addr 0D17                          __size_of_I2C2_Stop 0019  
                      ??_EUSART_Receive_ISR 0070                       ?_PROTOCOL_I2C_Set_TLV 0021  
                  __end_of_I2C2_MasterWrite 0D17                            _PROTOCOL_I2C_GET 09F9  
                          _PROTOCOL_I2C_SEN 0E45                            _PROTOCOL_I2C_WHO 09FC  
