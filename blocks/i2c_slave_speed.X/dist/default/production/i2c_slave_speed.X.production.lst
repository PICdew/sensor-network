

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Wed Sep 20 08:37:29 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F1829
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	idataBANK1,global,class=CODE,delta=2
     7                           	psect	stringtext,global,class=STRCODE,delta=2
     8                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text5,local,class=CODE,merge=1,delta=2,group=4
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2,group=4
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2,group=4
    40                           	psect	text19,local,class=CODE,merge=1,delta=2,group=4
    41                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    42                           	psect	text21,local,class=CODE,merge=1,delta=2,group=4
    43                           	psect	text22,local,class=CODE,merge=1,delta=2,group=4
    44                           	psect	text23,local,class=CODE,merge=1,delta=2,group=4
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2,group=1
    47                           	psect	text26,local,class=CODE,merge=1,delta=2,group=1
    48                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    49                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    50                           	psect	text29,local,class=CODE,merge=1,delta=2,group=1
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    53                           	psect	text32,local,class=CODE,merge=1,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2,group=1
    55                           	psect	text34,local,class=CODE,merge=1,delta=2
    56                           	psect	text35,local,class=CODE,merge=1,delta=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2,group=1
    60                           	psect	text39,local,class=CODE,merge=1,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,delta=2
    62                           	psect	intentry,global,class=CODE,delta=2
    63                           	psect	text42,local,class=CODE,merge=1,delta=2
    64                           	psect	text43,local,class=CODE,merge=1,delta=2
    65                           	psect	swtext1,local,class=CONST,delta=2
    66                           	psect	text44,local,class=CODE,merge=1,delta=2
    67                           	psect	text45,local,class=CODE,merge=1,delta=2
    68                           	psect	text46,local,class=CODE,merge=1,delta=2
    69                           	psect	text47,local,class=CODE,merge=1,delta=2
    70                           	psect	text48,local,class=CODE,merge=1,delta=2
    71                           	psect	text49,local,class=CODE,merge=1,delta=2
    72                           	psect	text50,local,class=CODE,merge=1,delta=2,group=1
    73                           	psect	text51,local,class=CODE,merge=1,delta=2,group=1
    74                           	psect	text52,local,class=CODE,merge=1,delta=2,group=1
    75                           	psect	text53,local,class=CODE,merge=1,delta=2,group=1
    76                           	psect	text54,local,class=CODE,merge=1,delta=2,group=1
    77                           	psect	text55,local,class=CODE,merge=1,delta=2,group=1
    78                           	psect	text56,local,class=CODE,merge=1,delta=2,group=1
    79                           	psect	text57,local,class=CODE,merge=1,delta=2
    80                           	psect	text58,local,class=CODE,merge=1,delta=2
    81                           	dabs	1,0x7E,2
    82  0000                     
    83                           ; Version 1.41 (B)
    84                           ; Generated 21/02/2017 GMT
    85                           ; 
    86                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    87                           ; All rights reserved.
    88                           ; 
    89                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    90                           ; 
    91                           ; Redistribution and use in source and binary forms, with or without modification, are
    92                           ; permitted provided that the following conditions are met:
    93                           ; 
    94                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    95                           ;        conditions and the following disclaimer.
    96                           ; 
    97                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    98                           ;        of conditions and the following disclaimer in the documentation and/or other
    99                           ;        materials provided with the distribution.
   100                           ; 
   101                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   102                           ;        software without specific prior written permission.
   103                           ; 
   104                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   105                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   106                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   107                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   108                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   109                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   110                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   111                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   112                           ; 
   113                           ; 
   114                           ; Code-generator required, PIC16F1829 Definitions
   115                           ; 
   116                           ; SFR Addresses
   117  0000                     	;# 
   118  0001                     	;# 
   119  0002                     	;# 
   120  0003                     	;# 
   121  0004                     	;# 
   122  0005                     	;# 
   123  0006                     	;# 
   124  0007                     	;# 
   125  0008                     	;# 
   126  0009                     	;# 
   127  000A                     	;# 
   128  000B                     	;# 
   129  000C                     	;# 
   130  000D                     	;# 
   131  000E                     	;# 
   132  0011                     	;# 
   133  0012                     	;# 
   134  0013                     	;# 
   135  0014                     	;# 
   136  0015                     	;# 
   137  0016                     	;# 
   138  0016                     	;# 
   139  0017                     	;# 
   140  0018                     	;# 
   141  0019                     	;# 
   142  001A                     	;# 
   143  001B                     	;# 
   144  001C                     	;# 
   145  001E                     	;# 
   146  001F                     	;# 
   147  008C                     	;# 
   148  008D                     	;# 
   149  008E                     	;# 
   150  0091                     	;# 
   151  0092                     	;# 
   152  0093                     	;# 
   153  0094                     	;# 
   154  0095                     	;# 
   155  0096                     	;# 
   156  0097                     	;# 
   157  0098                     	;# 
   158  0099                     	;# 
   159  009A                     	;# 
   160  009B                     	;# 
   161  009B                     	;# 
   162  009C                     	;# 
   163  009D                     	;# 
   164  009E                     	;# 
   165  010C                     	;# 
   166  010D                     	;# 
   167  010E                     	;# 
   168  0111                     	;# 
   169  0112                     	;# 
   170  0113                     	;# 
   171  0114                     	;# 
   172  0115                     	;# 
   173  0116                     	;# 
   174  0117                     	;# 
   175  0118                     	;# 
   176  0119                     	;# 
   177  011A                     	;# 
   178  011B                     	;# 
   179  011D                     	;# 
   180  011E                     	;# 
   181  018C                     	;# 
   182  018D                     	;# 
   183  018E                     	;# 
   184  0191                     	;# 
   185  0191                     	;# 
   186  0192                     	;# 
   187  0193                     	;# 
   188  0193                     	;# 
   189  0193                     	;# 
   190  0194                     	;# 
   191  0195                     	;# 
   192  0196                     	;# 
   193  0199                     	;# 
   194  019A                     	;# 
   195  019B                     	;# 
   196  019B                     	;# 
   197  019C                     	;# 
   198  019D                     	;# 
   199  019E                     	;# 
   200  019F                     	;# 
   201  020C                     	;# 
   202  020D                     	;# 
   203  020E                     	;# 
   204  0211                     	;# 
   205  0211                     	;# 
   206  0212                     	;# 
   207  0212                     	;# 
   208  0213                     	;# 
   209  0213                     	;# 
   210  0214                     	;# 
   211  0214                     	;# 
   212  0215                     	;# 
   213  0215                     	;# 
   214  0215                     	;# 
   215  0216                     	;# 
   216  0216                     	;# 
   217  0217                     	;# 
   218  0217                     	;# 
   219  0219                     	;# 
   220  021A                     	;# 
   221  021B                     	;# 
   222  021C                     	;# 
   223  021D                     	;# 
   224  021E                     	;# 
   225  021F                     	;# 
   226  0291                     	;# 
   227  0291                     	;# 
   228  0292                     	;# 
   229  0293                     	;# 
   230  0294                     	;# 
   231  0295                     	;# 
   232  0295                     	;# 
   233  0296                     	;# 
   234  0298                     	;# 
   235  0298                     	;# 
   236  0299                     	;# 
   237  029A                     	;# 
   238  029B                     	;# 
   239  029C                     	;# 
   240  029D                     	;# 
   241  029E                     	;# 
   242  0311                     	;# 
   243  0311                     	;# 
   244  0312                     	;# 
   245  0313                     	;# 
   246  0318                     	;# 
   247  0318                     	;# 
   248  0319                     	;# 
   249  031A                     	;# 
   250  038C                     	;# 
   251  038D                     	;# 
   252  038E                     	;# 
   253  0391                     	;# 
   254  0392                     	;# 
   255  0393                     	;# 
   256  0394                     	;# 
   257  0395                     	;# 
   258  0396                     	;# 
   259  039A                     	;# 
   260  039C                     	;# 
   261  039D                     	;# 
   262  039E                     	;# 
   263  039F                     	;# 
   264  0415                     	;# 
   265  0416                     	;# 
   266  0417                     	;# 
   267  041C                     	;# 
   268  041D                     	;# 
   269  041E                     	;# 
   270  0FE4                     	;# 
   271  0FE5                     	;# 
   272  0FE6                     	;# 
   273  0FE7                     	;# 
   274  0FE8                     	;# 
   275  0FE9                     	;# 
   276  0FEA                     	;# 
   277  0FEB                     	;# 
   278  0FED                     	;# 
   279  0FEE                     	;# 
   280  0FEF                     	;# 
   281  0000                     	;# 
   282  0001                     	;# 
   283  0002                     	;# 
   284  0003                     	;# 
   285  0004                     	;# 
   286  0005                     	;# 
   287  0006                     	;# 
   288  0007                     	;# 
   289  0008                     	;# 
   290  0009                     	;# 
   291  000A                     	;# 
   292  000B                     	;# 
   293  000C                     	;# 
   294  000D                     	;# 
   295  000E                     	;# 
   296  0011                     	;# 
   297  0012                     	;# 
   298  0013                     	;# 
   299  0014                     	;# 
   300  0015                     	;# 
   301  0016                     	;# 
   302  0016                     	;# 
   303  0017                     	;# 
   304  0018                     	;# 
   305  0019                     	;# 
   306  001A                     	;# 
   307  001B                     	;# 
   308  001C                     	;# 
   309  001E                     	;# 
   310  001F                     	;# 
   311  008C                     	;# 
   312  008D                     	;# 
   313  008E                     	;# 
   314  0091                     	;# 
   315  0092                     	;# 
   316  0093                     	;# 
   317  0094                     	;# 
   318  0095                     	;# 
   319  0096                     	;# 
   320  0097                     	;# 
   321  0098                     	;# 
   322  0099                     	;# 
   323  009A                     	;# 
   324  009B                     	;# 
   325  009B                     	;# 
   326  009C                     	;# 
   327  009D                     	;# 
   328  009E                     	;# 
   329  010C                     	;# 
   330  010D                     	;# 
   331  010E                     	;# 
   332  0111                     	;# 
   333  0112                     	;# 
   334  0113                     	;# 
   335  0114                     	;# 
   336  0115                     	;# 
   337  0116                     	;# 
   338  0117                     	;# 
   339  0118                     	;# 
   340  0119                     	;# 
   341  011A                     	;# 
   342  011B                     	;# 
   343  011D                     	;# 
   344  011E                     	;# 
   345  018C                     	;# 
   346  018D                     	;# 
   347  018E                     	;# 
   348  0191                     	;# 
   349  0191                     	;# 
   350  0192                     	;# 
   351  0193                     	;# 
   352  0193                     	;# 
   353  0193                     	;# 
   354  0194                     	;# 
   355  0195                     	;# 
   356  0196                     	;# 
   357  0199                     	;# 
   358  019A                     	;# 
   359  019B                     	;# 
   360  019B                     	;# 
   361  019C                     	;# 
   362  019D                     	;# 
   363  019E                     	;# 
   364  019F                     	;# 
   365  020C                     	;# 
   366  020D                     	;# 
   367  020E                     	;# 
   368  0211                     	;# 
   369  0211                     	;# 
   370  0212                     	;# 
   371  0212                     	;# 
   372  0213                     	;# 
   373  0213                     	;# 
   374  0214                     	;# 
   375  0214                     	;# 
   376  0215                     	;# 
   377  0215                     	;# 
   378  0215                     	;# 
   379  0216                     	;# 
   380  0216                     	;# 
   381  0217                     	;# 
   382  0217                     	;# 
   383  0219                     	;# 
   384  021A                     	;# 
   385  021B                     	;# 
   386  021C                     	;# 
   387  021D                     	;# 
   388  021E                     	;# 
   389  021F                     	;# 
   390  0291                     	;# 
   391  0291                     	;# 
   392  0292                     	;# 
   393  0293                     	;# 
   394  0294                     	;# 
   395  0295                     	;# 
   396  0295                     	;# 
   397  0296                     	;# 
   398  0298                     	;# 
   399  0298                     	;# 
   400  0299                     	;# 
   401  029A                     	;# 
   402  029B                     	;# 
   403  029C                     	;# 
   404  029D                     	;# 
   405  029E                     	;# 
   406  0311                     	;# 
   407  0311                     	;# 
   408  0312                     	;# 
   409  0313                     	;# 
   410  0318                     	;# 
   411  0318                     	;# 
   412  0319                     	;# 
   413  031A                     	;# 
   414  038C                     	;# 
   415  038D                     	;# 
   416  038E                     	;# 
   417  0391                     	;# 
   418  0392                     	;# 
   419  0393                     	;# 
   420  0394                     	;# 
   421  0395                     	;# 
   422  0396                     	;# 
   423  039A                     	;# 
   424  039C                     	;# 
   425  039D                     	;# 
   426  039E                     	;# 
   427  039F                     	;# 
   428  0415                     	;# 
   429  0416                     	;# 
   430  0417                     	;# 
   431  041C                     	;# 
   432  041D                     	;# 
   433  041E                     	;# 
   434  0FE4                     	;# 
   435  0FE5                     	;# 
   436  0FE6                     	;# 
   437  0FE7                     	;# 
   438  0FE8                     	;# 
   439  0FE9                     	;# 
   440  0FEA                     	;# 
   441  0FEB                     	;# 
   442  0FED                     	;# 
   443  0FEE                     	;# 
   444  0FEF                     	;# 
   445  0000                     	;# 
   446  0001                     	;# 
   447  0002                     	;# 
   448  0003                     	;# 
   449  0004                     	;# 
   450  0005                     	;# 
   451  0006                     	;# 
   452  0007                     	;# 
   453  0008                     	;# 
   454  0009                     	;# 
   455  000A                     	;# 
   456  000B                     	;# 
   457  000C                     	;# 
   458  000D                     	;# 
   459  000E                     	;# 
   460  0011                     	;# 
   461  0012                     	;# 
   462  0013                     	;# 
   463  0014                     	;# 
   464  0015                     	;# 
   465  0016                     	;# 
   466  0016                     	;# 
   467  0017                     	;# 
   468  0018                     	;# 
   469  0019                     	;# 
   470  001A                     	;# 
   471  001B                     	;# 
   472  001C                     	;# 
   473  001E                     	;# 
   474  001F                     	;# 
   475  008C                     	;# 
   476  008D                     	;# 
   477  008E                     	;# 
   478  0091                     	;# 
   479  0092                     	;# 
   480  0093                     	;# 
   481  0094                     	;# 
   482  0095                     	;# 
   483  0096                     	;# 
   484  0097                     	;# 
   485  0098                     	;# 
   486  0099                     	;# 
   487  009A                     	;# 
   488  009B                     	;# 
   489  009B                     	;# 
   490  009C                     	;# 
   491  009D                     	;# 
   492  009E                     	;# 
   493  010C                     	;# 
   494  010D                     	;# 
   495  010E                     	;# 
   496  0111                     	;# 
   497  0112                     	;# 
   498  0113                     	;# 
   499  0114                     	;# 
   500  0115                     	;# 
   501  0116                     	;# 
   502  0117                     	;# 
   503  0118                     	;# 
   504  0119                     	;# 
   505  011A                     	;# 
   506  011B                     	;# 
   507  011D                     	;# 
   508  011E                     	;# 
   509  018C                     	;# 
   510  018D                     	;# 
   511  018E                     	;# 
   512  0191                     	;# 
   513  0191                     	;# 
   514  0192                     	;# 
   515  0193                     	;# 
   516  0193                     	;# 
   517  0193                     	;# 
   518  0194                     	;# 
   519  0195                     	;# 
   520  0196                     	;# 
   521  0199                     	;# 
   522  019A                     	;# 
   523  019B                     	;# 
   524  019B                     	;# 
   525  019C                     	;# 
   526  019D                     	;# 
   527  019E                     	;# 
   528  019F                     	;# 
   529  020C                     	;# 
   530  020D                     	;# 
   531  020E                     	;# 
   532  0211                     	;# 
   533  0211                     	;# 
   534  0212                     	;# 
   535  0212                     	;# 
   536  0213                     	;# 
   537  0213                     	;# 
   538  0214                     	;# 
   539  0214                     	;# 
   540  0215                     	;# 
   541  0215                     	;# 
   542  0215                     	;# 
   543  0216                     	;# 
   544  0216                     	;# 
   545  0217                     	;# 
   546  0217                     	;# 
   547  0219                     	;# 
   548  021A                     	;# 
   549  021B                     	;# 
   550  021C                     	;# 
   551  021D                     	;# 
   552  021E                     	;# 
   553  021F                     	;# 
   554  0291                     	;# 
   555  0291                     	;# 
   556  0292                     	;# 
   557  0293                     	;# 
   558  0294                     	;# 
   559  0295                     	;# 
   560  0295                     	;# 
   561  0296                     	;# 
   562  0298                     	;# 
   563  0298                     	;# 
   564  0299                     	;# 
   565  029A                     	;# 
   566  029B                     	;# 
   567  029C                     	;# 
   568  029D                     	;# 
   569  029E                     	;# 
   570  0311                     	;# 
   571  0311                     	;# 
   572  0312                     	;# 
   573  0313                     	;# 
   574  0318                     	;# 
   575  0318                     	;# 
   576  0319                     	;# 
   577  031A                     	;# 
   578  038C                     	;# 
   579  038D                     	;# 
   580  038E                     	;# 
   581  0391                     	;# 
   582  0392                     	;# 
   583  0393                     	;# 
   584  0394                     	;# 
   585  0395                     	;# 
   586  0396                     	;# 
   587  039A                     	;# 
   588  039C                     	;# 
   589  039D                     	;# 
   590  039E                     	;# 
   591  039F                     	;# 
   592  0415                     	;# 
   593  0416                     	;# 
   594  0417                     	;# 
   595  041C                     	;# 
   596  041D                     	;# 
   597  041E                     	;# 
   598  0FE4                     	;# 
   599  0FE5                     	;# 
   600  0FE6                     	;# 
   601  0FE7                     	;# 
   602  0FE8                     	;# 
   603  0FE9                     	;# 
   604  0FEA                     	;# 
   605  0FEB                     	;# 
   606  0FED                     	;# 
   607  0FEE                     	;# 
   608  0FEF                     	;# 
   609  0000                     	;# 
   610  0001                     	;# 
   611  0002                     	;# 
   612  0003                     	;# 
   613  0004                     	;# 
   614  0005                     	;# 
   615  0006                     	;# 
   616  0007                     	;# 
   617  0008                     	;# 
   618  0009                     	;# 
   619  000A                     	;# 
   620  000B                     	;# 
   621  000C                     	;# 
   622  000D                     	;# 
   623  000E                     	;# 
   624  0011                     	;# 
   625  0012                     	;# 
   626  0013                     	;# 
   627  0014                     	;# 
   628  0015                     	;# 
   629  0016                     	;# 
   630  0016                     	;# 
   631  0017                     	;# 
   632  0018                     	;# 
   633  0019                     	;# 
   634  001A                     	;# 
   635  001B                     	;# 
   636  001C                     	;# 
   637  001E                     	;# 
   638  001F                     	;# 
   639  008C                     	;# 
   640  008D                     	;# 
   641  008E                     	;# 
   642  0091                     	;# 
   643  0092                     	;# 
   644  0093                     	;# 
   645  0094                     	;# 
   646  0095                     	;# 
   647  0096                     	;# 
   648  0097                     	;# 
   649  0098                     	;# 
   650  0099                     	;# 
   651  009A                     	;# 
   652  009B                     	;# 
   653  009B                     	;# 
   654  009C                     	;# 
   655  009D                     	;# 
   656  009E                     	;# 
   657  010C                     	;# 
   658  010D                     	;# 
   659  010E                     	;# 
   660  0111                     	;# 
   661  0112                     	;# 
   662  0113                     	;# 
   663  0114                     	;# 
   664  0115                     	;# 
   665  0116                     	;# 
   666  0117                     	;# 
   667  0118                     	;# 
   668  0119                     	;# 
   669  011A                     	;# 
   670  011B                     	;# 
   671  011D                     	;# 
   672  011E                     	;# 
   673  018C                     	;# 
   674  018D                     	;# 
   675  018E                     	;# 
   676  0191                     	;# 
   677  0191                     	;# 
   678  0192                     	;# 
   679  0193                     	;# 
   680  0193                     	;# 
   681  0193                     	;# 
   682  0194                     	;# 
   683  0195                     	;# 
   684  0196                     	;# 
   685  0199                     	;# 
   686  019A                     	;# 
   687  019B                     	;# 
   688  019B                     	;# 
   689  019C                     	;# 
   690  019D                     	;# 
   691  019E                     	;# 
   692  019F                     	;# 
   693  020C                     	;# 
   694  020D                     	;# 
   695  020E                     	;# 
   696  0211                     	;# 
   697  0211                     	;# 
   698  0212                     	;# 
   699  0212                     	;# 
   700  0213                     	;# 
   701  0213                     	;# 
   702  0214                     	;# 
   703  0214                     	;# 
   704  0215                     	;# 
   705  0215                     	;# 
   706  0215                     	;# 
   707  0216                     	;# 
   708  0216                     	;# 
   709  0217                     	;# 
   710  0217                     	;# 
   711  0219                     	;# 
   712  021A                     	;# 
   713  021B                     	;# 
   714  021C                     	;# 
   715  021D                     	;# 
   716  021E                     	;# 
   717  021F                     	;# 
   718  0291                     	;# 
   719  0291                     	;# 
   720  0292                     	;# 
   721  0293                     	;# 
   722  0294                     	;# 
   723  0295                     	;# 
   724  0295                     	;# 
   725  0296                     	;# 
   726  0298                     	;# 
   727  0298                     	;# 
   728  0299                     	;# 
   729  029A                     	;# 
   730  029B                     	;# 
   731  029C                     	;# 
   732  029D                     	;# 
   733  029E                     	;# 
   734  0311                     	;# 
   735  0311                     	;# 
   736  0312                     	;# 
   737  0313                     	;# 
   738  0318                     	;# 
   739  0318                     	;# 
   740  0319                     	;# 
   741  031A                     	;# 
   742  038C                     	;# 
   743  038D                     	;# 
   744  038E                     	;# 
   745  0391                     	;# 
   746  0392                     	;# 
   747  0393                     	;# 
   748  0394                     	;# 
   749  0395                     	;# 
   750  0396                     	;# 
   751  039A                     	;# 
   752  039C                     	;# 
   753  039D                     	;# 
   754  039E                     	;# 
   755  039F                     	;# 
   756  0415                     	;# 
   757  0416                     	;# 
   758  0417                     	;# 
   759  041C                     	;# 
   760  041D                     	;# 
   761  041E                     	;# 
   762  0FE4                     	;# 
   763  0FE5                     	;# 
   764  0FE6                     	;# 
   765  0FE7                     	;# 
   766  0FE8                     	;# 
   767  0FE9                     	;# 
   768  0FEA                     	;# 
   769  0FEB                     	;# 
   770  0FED                     	;# 
   771  0FEE                     	;# 
   772  0FEF                     	;# 
   773  0000                     	;# 
   774  0001                     	;# 
   775  0002                     	;# 
   776  0003                     	;# 
   777  0004                     	;# 
   778  0005                     	;# 
   779  0006                     	;# 
   780  0007                     	;# 
   781  0008                     	;# 
   782  0009                     	;# 
   783  000A                     	;# 
   784  000B                     	;# 
   785  000C                     	;# 
   786  000D                     	;# 
   787  000E                     	;# 
   788  0011                     	;# 
   789  0012                     	;# 
   790  0013                     	;# 
   791  0014                     	;# 
   792  0015                     	;# 
   793  0016                     	;# 
   794  0016                     	;# 
   795  0017                     	;# 
   796  0018                     	;# 
   797  0019                     	;# 
   798  001A                     	;# 
   799  001B                     	;# 
   800  001C                     	;# 
   801  001E                     	;# 
   802  001F                     	;# 
   803  008C                     	;# 
   804  008D                     	;# 
   805  008E                     	;# 
   806  0091                     	;# 
   807  0092                     	;# 
   808  0093                     	;# 
   809  0094                     	;# 
   810  0095                     	;# 
   811  0096                     	;# 
   812  0097                     	;# 
   813  0098                     	;# 
   814  0099                     	;# 
   815  009A                     	;# 
   816  009B                     	;# 
   817  009B                     	;# 
   818  009C                     	;# 
   819  009D                     	;# 
   820  009E                     	;# 
   821  010C                     	;# 
   822  010D                     	;# 
   823  010E                     	;# 
   824  0111                     	;# 
   825  0112                     	;# 
   826  0113                     	;# 
   827  0114                     	;# 
   828  0115                     	;# 
   829  0116                     	;# 
   830  0117                     	;# 
   831  0118                     	;# 
   832  0119                     	;# 
   833  011A                     	;# 
   834  011B                     	;# 
   835  011D                     	;# 
   836  011E                     	;# 
   837  018C                     	;# 
   838  018D                     	;# 
   839  018E                     	;# 
   840  0191                     	;# 
   841  0191                     	;# 
   842  0192                     	;# 
   843  0193                     	;# 
   844  0193                     	;# 
   845  0193                     	;# 
   846  0194                     	;# 
   847  0195                     	;# 
   848  0196                     	;# 
   849  0199                     	;# 
   850  019A                     	;# 
   851  019B                     	;# 
   852  019B                     	;# 
   853  019C                     	;# 
   854  019D                     	;# 
   855  019E                     	;# 
   856  019F                     	;# 
   857  020C                     	;# 
   858  020D                     	;# 
   859  020E                     	;# 
   860  0211                     	;# 
   861  0211                     	;# 
   862  0212                     	;# 
   863  0212                     	;# 
   864  0213                     	;# 
   865  0213                     	;# 
   866  0214                     	;# 
   867  0214                     	;# 
   868  0215                     	;# 
   869  0215                     	;# 
   870  0215                     	;# 
   871  0216                     	;# 
   872  0216                     	;# 
   873  0217                     	;# 
   874  0217                     	;# 
   875  0219                     	;# 
   876  021A                     	;# 
   877  021B                     	;# 
   878  021C                     	;# 
   879  021D                     	;# 
   880  021E                     	;# 
   881  021F                     	;# 
   882  0291                     	;# 
   883  0291                     	;# 
   884  0292                     	;# 
   885  0293                     	;# 
   886  0294                     	;# 
   887  0295                     	;# 
   888  0295                     	;# 
   889  0296                     	;# 
   890  0298                     	;# 
   891  0298                     	;# 
   892  0299                     	;# 
   893  029A                     	;# 
   894  029B                     	;# 
   895  029C                     	;# 
   896  029D                     	;# 
   897  029E                     	;# 
   898  0311                     	;# 
   899  0311                     	;# 
   900  0312                     	;# 
   901  0313                     	;# 
   902  0318                     	;# 
   903  0318                     	;# 
   904  0319                     	;# 
   905  031A                     	;# 
   906  038C                     	;# 
   907  038D                     	;# 
   908  038E                     	;# 
   909  0391                     	;# 
   910  0392                     	;# 
   911  0393                     	;# 
   912  0394                     	;# 
   913  0395                     	;# 
   914  0396                     	;# 
   915  039A                     	;# 
   916  039C                     	;# 
   917  039D                     	;# 
   918  039E                     	;# 
   919  039F                     	;# 
   920  0415                     	;# 
   921  0416                     	;# 
   922  0417                     	;# 
   923  041C                     	;# 
   924  041D                     	;# 
   925  041E                     	;# 
   926  0FE4                     	;# 
   927  0FE5                     	;# 
   928  0FE6                     	;# 
   929  0FE7                     	;# 
   930  0FE8                     	;# 
   931  0FE9                     	;# 
   932  0FEA                     	;# 
   933  0FEB                     	;# 
   934  0FED                     	;# 
   935  0FEE                     	;# 
   936  0FEF                     	;# 
   937  0000                     	;# 
   938  0001                     	;# 
   939  0002                     	;# 
   940  0003                     	;# 
   941  0004                     	;# 
   942  0005                     	;# 
   943  0006                     	;# 
   944  0007                     	;# 
   945  0008                     	;# 
   946  0009                     	;# 
   947  000A                     	;# 
   948  000B                     	;# 
   949  000C                     	;# 
   950  000D                     	;# 
   951  000E                     	;# 
   952  0011                     	;# 
   953  0012                     	;# 
   954  0013                     	;# 
   955  0014                     	;# 
   956  0015                     	;# 
   957  0016                     	;# 
   958  0016                     	;# 
   959  0017                     	;# 
   960  0018                     	;# 
   961  0019                     	;# 
   962  001A                     	;# 
   963  001B                     	;# 
   964  001C                     	;# 
   965  001E                     	;# 
   966  001F                     	;# 
   967  008C                     	;# 
   968  008D                     	;# 
   969  008E                     	;# 
   970  0091                     	;# 
   971  0092                     	;# 
   972  0093                     	;# 
   973  0094                     	;# 
   974  0095                     	;# 
   975  0096                     	;# 
   976  0097                     	;# 
   977  0098                     	;# 
   978  0099                     	;# 
   979  009A                     	;# 
   980  009B                     	;# 
   981  009B                     	;# 
   982  009C                     	;# 
   983  009D                     	;# 
   984  009E                     	;# 
   985  010C                     	;# 
   986  010D                     	;# 
   987  010E                     	;# 
   988  0111                     	;# 
   989  0112                     	;# 
   990  0113                     	;# 
   991  0114                     	;# 
   992  0115                     	;# 
   993  0116                     	;# 
   994  0117                     	;# 
   995  0118                     	;# 
   996  0119                     	;# 
   997  011A                     	;# 
   998  011B                     	;# 
   999  011D                     	;# 
  1000  011E                     	;# 
  1001  018C                     	;# 
  1002  018D                     	;# 
  1003  018E                     	;# 
  1004  0191                     	;# 
  1005  0191                     	;# 
  1006  0192                     	;# 
  1007  0193                     	;# 
  1008  0193                     	;# 
  1009  0193                     	;# 
  1010  0194                     	;# 
  1011  0195                     	;# 
  1012  0196                     	;# 
  1013  0199                     	;# 
  1014  019A                     	;# 
  1015  019B                     	;# 
  1016  019B                     	;# 
  1017  019C                     	;# 
  1018  019D                     	;# 
  1019  019E                     	;# 
  1020  019F                     	;# 
  1021  020C                     	;# 
  1022  020D                     	;# 
  1023  020E                     	;# 
  1024  0211                     	;# 
  1025  0211                     	;# 
  1026  0212                     	;# 
  1027  0212                     	;# 
  1028  0213                     	;# 
  1029  0213                     	;# 
  1030  0214                     	;# 
  1031  0214                     	;# 
  1032  0215                     	;# 
  1033  0215                     	;# 
  1034  0215                     	;# 
  1035  0216                     	;# 
  1036  0216                     	;# 
  1037  0217                     	;# 
  1038  0217                     	;# 
  1039  0219                     	;# 
  1040  021A                     	;# 
  1041  021B                     	;# 
  1042  021C                     	;# 
  1043  021D                     	;# 
  1044  021E                     	;# 
  1045  021F                     	;# 
  1046  0291                     	;# 
  1047  0291                     	;# 
  1048  0292                     	;# 
  1049  0293                     	;# 
  1050  0294                     	;# 
  1051  0295                     	;# 
  1052  0295                     	;# 
  1053  0296                     	;# 
  1054  0298                     	;# 
  1055  0298                     	;# 
  1056  0299                     	;# 
  1057  029A                     	;# 
  1058  029B                     	;# 
  1059  029C                     	;# 
  1060  029D                     	;# 
  1061  029E                     	;# 
  1062  0311                     	;# 
  1063  0311                     	;# 
  1064  0312                     	;# 
  1065  0313                     	;# 
  1066  0318                     	;# 
  1067  0318                     	;# 
  1068  0319                     	;# 
  1069  031A                     	;# 
  1070  038C                     	;# 
  1071  038D                     	;# 
  1072  038E                     	;# 
  1073  0391                     	;# 
  1074  0392                     	;# 
  1075  0393                     	;# 
  1076  0394                     	;# 
  1077  0395                     	;# 
  1078  0396                     	;# 
  1079  039A                     	;# 
  1080  039C                     	;# 
  1081  039D                     	;# 
  1082  039E                     	;# 
  1083  039F                     	;# 
  1084  0415                     	;# 
  1085  0416                     	;# 
  1086  0417                     	;# 
  1087  041C                     	;# 
  1088  041D                     	;# 
  1089  041E                     	;# 
  1090  0FE4                     	;# 
  1091  0FE5                     	;# 
  1092  0FE6                     	;# 
  1093  0FE7                     	;# 
  1094  0FE8                     	;# 
  1095  0FE9                     	;# 
  1096  0FEA                     	;# 
  1097  0FEB                     	;# 
  1098  0FED                     	;# 
  1099  0FEE                     	;# 
  1100  0FEF                     	;# 
  1101  0000                     	;# 
  1102  0001                     	;# 
  1103  0002                     	;# 
  1104  0003                     	;# 
  1105  0004                     	;# 
  1106  0005                     	;# 
  1107  0006                     	;# 
  1108  0007                     	;# 
  1109  0008                     	;# 
  1110  0009                     	;# 
  1111  000A                     	;# 
  1112  000B                     	;# 
  1113  000C                     	;# 
  1114  000D                     	;# 
  1115  000E                     	;# 
  1116  0011                     	;# 
  1117  0012                     	;# 
  1118  0013                     	;# 
  1119  0014                     	;# 
  1120  0015                     	;# 
  1121  0016                     	;# 
  1122  0016                     	;# 
  1123  0017                     	;# 
  1124  0018                     	;# 
  1125  0019                     	;# 
  1126  001A                     	;# 
  1127  001B                     	;# 
  1128  001C                     	;# 
  1129  001E                     	;# 
  1130  001F                     	;# 
  1131  008C                     	;# 
  1132  008D                     	;# 
  1133  008E                     	;# 
  1134  0091                     	;# 
  1135  0092                     	;# 
  1136  0093                     	;# 
  1137  0094                     	;# 
  1138  0095                     	;# 
  1139  0096                     	;# 
  1140  0097                     	;# 
  1141  0098                     	;# 
  1142  0099                     	;# 
  1143  009A                     	;# 
  1144  009B                     	;# 
  1145  009B                     	;# 
  1146  009C                     	;# 
  1147  009D                     	;# 
  1148  009E                     	;# 
  1149  010C                     	;# 
  1150  010D                     	;# 
  1151  010E                     	;# 
  1152  0111                     	;# 
  1153  0112                     	;# 
  1154  0113                     	;# 
  1155  0114                     	;# 
  1156  0115                     	;# 
  1157  0116                     	;# 
  1158  0117                     	;# 
  1159  0118                     	;# 
  1160  0119                     	;# 
  1161  011A                     	;# 
  1162  011B                     	;# 
  1163  011D                     	;# 
  1164  011E                     	;# 
  1165  018C                     	;# 
  1166  018D                     	;# 
  1167  018E                     	;# 
  1168  0191                     	;# 
  1169  0191                     	;# 
  1170  0192                     	;# 
  1171  0193                     	;# 
  1172  0193                     	;# 
  1173  0193                     	;# 
  1174  0194                     	;# 
  1175  0195                     	;# 
  1176  0196                     	;# 
  1177  0199                     	;# 
  1178  019A                     	;# 
  1179  019B                     	;# 
  1180  019B                     	;# 
  1181  019C                     	;# 
  1182  019D                     	;# 
  1183  019E                     	;# 
  1184  019F                     	;# 
  1185  020C                     	;# 
  1186  020D                     	;# 
  1187  020E                     	;# 
  1188  0211                     	;# 
  1189  0211                     	;# 
  1190  0212                     	;# 
  1191  0212                     	;# 
  1192  0213                     	;# 
  1193  0213                     	;# 
  1194  0214                     	;# 
  1195  0214                     	;# 
  1196  0215                     	;# 
  1197  0215                     	;# 
  1198  0215                     	;# 
  1199  0216                     	;# 
  1200  0216                     	;# 
  1201  0217                     	;# 
  1202  0217                     	;# 
  1203  0219                     	;# 
  1204  021A                     	;# 
  1205  021B                     	;# 
  1206  021C                     	;# 
  1207  021D                     	;# 
  1208  021E                     	;# 
  1209  021F                     	;# 
  1210  0291                     	;# 
  1211  0291                     	;# 
  1212  0292                     	;# 
  1213  0293                     	;# 
  1214  0294                     	;# 
  1215  0295                     	;# 
  1216  0295                     	;# 
  1217  0296                     	;# 
  1218  0298                     	;# 
  1219  0298                     	;# 
  1220  0299                     	;# 
  1221  029A                     	;# 
  1222  029B                     	;# 
  1223  029C                     	;# 
  1224  029D                     	;# 
  1225  029E                     	;# 
  1226  0311                     	;# 
  1227  0311                     	;# 
  1228  0312                     	;# 
  1229  0313                     	;# 
  1230  0318                     	;# 
  1231  0318                     	;# 
  1232  0319                     	;# 
  1233  031A                     	;# 
  1234  038C                     	;# 
  1235  038D                     	;# 
  1236  038E                     	;# 
  1237  0391                     	;# 
  1238  0392                     	;# 
  1239  0393                     	;# 
  1240  0394                     	;# 
  1241  0395                     	;# 
  1242  0396                     	;# 
  1243  039A                     	;# 
  1244  039C                     	;# 
  1245  039D                     	;# 
  1246  039E                     	;# 
  1247  039F                     	;# 
  1248  0415                     	;# 
  1249  0416                     	;# 
  1250  0417                     	;# 
  1251  041C                     	;# 
  1252  041D                     	;# 
  1253  041E                     	;# 
  1254  0FE4                     	;# 
  1255  0FE5                     	;# 
  1256  0FE6                     	;# 
  1257  0FE7                     	;# 
  1258  0FE8                     	;# 
  1259  0FE9                     	;# 
  1260  0FEA                     	;# 
  1261  0FEB                     	;# 
  1262  0FED                     	;# 
  1263  0FEE                     	;# 
  1264  0FEF                     	;# 
  1265  0000                     	;# 
  1266  0001                     	;# 
  1267  0002                     	;# 
  1268  0003                     	;# 
  1269  0004                     	;# 
  1270  0005                     	;# 
  1271  0006                     	;# 
  1272  0007                     	;# 
  1273  0008                     	;# 
  1274  0009                     	;# 
  1275  000A                     	;# 
  1276  000B                     	;# 
  1277  000C                     	;# 
  1278  000D                     	;# 
  1279  000E                     	;# 
  1280  0011                     	;# 
  1281  0012                     	;# 
  1282  0013                     	;# 
  1283  0014                     	;# 
  1284  0015                     	;# 
  1285  0016                     	;# 
  1286  0016                     	;# 
  1287  0017                     	;# 
  1288  0018                     	;# 
  1289  0019                     	;# 
  1290  001A                     	;# 
  1291  001B                     	;# 
  1292  001C                     	;# 
  1293  001E                     	;# 
  1294  001F                     	;# 
  1295  008C                     	;# 
  1296  008D                     	;# 
  1297  008E                     	;# 
  1298  0091                     	;# 
  1299  0092                     	;# 
  1300  0093                     	;# 
  1301  0094                     	;# 
  1302  0095                     	;# 
  1303  0096                     	;# 
  1304  0097                     	;# 
  1305  0098                     	;# 
  1306  0099                     	;# 
  1307  009A                     	;# 
  1308  009B                     	;# 
  1309  009B                     	;# 
  1310  009C                     	;# 
  1311  009D                     	;# 
  1312  009E                     	;# 
  1313  010C                     	;# 
  1314  010D                     	;# 
  1315  010E                     	;# 
  1316  0111                     	;# 
  1317  0112                     	;# 
  1318  0113                     	;# 
  1319  0114                     	;# 
  1320  0115                     	;# 
  1321  0116                     	;# 
  1322  0117                     	;# 
  1323  0118                     	;# 
  1324  0119                     	;# 
  1325  011A                     	;# 
  1326  011B                     	;# 
  1327  011D                     	;# 
  1328  011E                     	;# 
  1329  018C                     	;# 
  1330  018D                     	;# 
  1331  018E                     	;# 
  1332  0191                     	;# 
  1333  0191                     	;# 
  1334  0192                     	;# 
  1335  0193                     	;# 
  1336  0193                     	;# 
  1337  0193                     	;# 
  1338  0194                     	;# 
  1339  0195                     	;# 
  1340  0196                     	;# 
  1341  0199                     	;# 
  1342  019A                     	;# 
  1343  019B                     	;# 
  1344  019B                     	;# 
  1345  019C                     	;# 
  1346  019D                     	;# 
  1347  019E                     	;# 
  1348  019F                     	;# 
  1349  020C                     	;# 
  1350  020D                     	;# 
  1351  020E                     	;# 
  1352  0211                     	;# 
  1353  0211                     	;# 
  1354  0212                     	;# 
  1355  0212                     	;# 
  1356  0213                     	;# 
  1357  0213                     	;# 
  1358  0214                     	;# 
  1359  0214                     	;# 
  1360  0215                     	;# 
  1361  0215                     	;# 
  1362  0215                     	;# 
  1363  0216                     	;# 
  1364  0216                     	;# 
  1365  0217                     	;# 
  1366  0217                     	;# 
  1367  0219                     	;# 
  1368  021A                     	;# 
  1369  021B                     	;# 
  1370  021C                     	;# 
  1371  021D                     	;# 
  1372  021E                     	;# 
  1373  021F                     	;# 
  1374  0291                     	;# 
  1375  0291                     	;# 
  1376  0292                     	;# 
  1377  0293                     	;# 
  1378  0294                     	;# 
  1379  0295                     	;# 
  1380  0295                     	;# 
  1381  0296                     	;# 
  1382  0298                     	;# 
  1383  0298                     	;# 
  1384  0299                     	;# 
  1385  029A                     	;# 
  1386  029B                     	;# 
  1387  029C                     	;# 
  1388  029D                     	;# 
  1389  029E                     	;# 
  1390  0311                     	;# 
  1391  0311                     	;# 
  1392  0312                     	;# 
  1393  0313                     	;# 
  1394  0318                     	;# 
  1395  0318                     	;# 
  1396  0319                     	;# 
  1397  031A                     	;# 
  1398  038C                     	;# 
  1399  038D                     	;# 
  1400  038E                     	;# 
  1401  0391                     	;# 
  1402  0392                     	;# 
  1403  0393                     	;# 
  1404  0394                     	;# 
  1405  0395                     	;# 
  1406  0396                     	;# 
  1407  039A                     	;# 
  1408  039C                     	;# 
  1409  039D                     	;# 
  1410  039E                     	;# 
  1411  039F                     	;# 
  1412  0415                     	;# 
  1413  0416                     	;# 
  1414  0417                     	;# 
  1415  041C                     	;# 
  1416  041D                     	;# 
  1417  041E                     	;# 
  1418  0FE4                     	;# 
  1419  0FE5                     	;# 
  1420  0FE6                     	;# 
  1421  0FE7                     	;# 
  1422  0FE8                     	;# 
  1423  0FE9                     	;# 
  1424  0FEA                     	;# 
  1425  0FEB                     	;# 
  1426  0FED                     	;# 
  1427  0FEE                     	;# 
  1428  0FEF                     	;# 
  1429  0000                     	;# 
  1430  0001                     	;# 
  1431  0002                     	;# 
  1432  0003                     	;# 
  1433  0004                     	;# 
  1434  0005                     	;# 
  1435  0006                     	;# 
  1436  0007                     	;# 
  1437  0008                     	;# 
  1438  0009                     	;# 
  1439  000A                     	;# 
  1440  000B                     	;# 
  1441  000C                     	;# 
  1442  000D                     	;# 
  1443  000E                     	;# 
  1444  0011                     	;# 
  1445  0012                     	;# 
  1446  0013                     	;# 
  1447  0014                     	;# 
  1448  0015                     	;# 
  1449  0016                     	;# 
  1450  0016                     	;# 
  1451  0017                     	;# 
  1452  0018                     	;# 
  1453  0019                     	;# 
  1454  001A                     	;# 
  1455  001B                     	;# 
  1456  001C                     	;# 
  1457  001E                     	;# 
  1458  001F                     	;# 
  1459  008C                     	;# 
  1460  008D                     	;# 
  1461  008E                     	;# 
  1462  0091                     	;# 
  1463  0092                     	;# 
  1464  0093                     	;# 
  1465  0094                     	;# 
  1466  0095                     	;# 
  1467  0096                     	;# 
  1468  0097                     	;# 
  1469  0098                     	;# 
  1470  0099                     	;# 
  1471  009A                     	;# 
  1472  009B                     	;# 
  1473  009B                     	;# 
  1474  009C                     	;# 
  1475  009D                     	;# 
  1476  009E                     	;# 
  1477  010C                     	;# 
  1478  010D                     	;# 
  1479  010E                     	;# 
  1480  0111                     	;# 
  1481  0112                     	;# 
  1482  0113                     	;# 
  1483  0114                     	;# 
  1484  0115                     	;# 
  1485  0116                     	;# 
  1486  0117                     	;# 
  1487  0118                     	;# 
  1488  0119                     	;# 
  1489  011A                     	;# 
  1490  011B                     	;# 
  1491  011D                     	;# 
  1492  011E                     	;# 
  1493  018C                     	;# 
  1494  018D                     	;# 
  1495  018E                     	;# 
  1496  0191                     	;# 
  1497  0191                     	;# 
  1498  0192                     	;# 
  1499  0193                     	;# 
  1500  0193                     	;# 
  1501  0193                     	;# 
  1502  0194                     	;# 
  1503  0195                     	;# 
  1504  0196                     	;# 
  1505  0199                     	;# 
  1506  019A                     	;# 
  1507  019B                     	;# 
  1508  019B                     	;# 
  1509  019C                     	;# 
  1510  019D                     	;# 
  1511  019E                     	;# 
  1512  019F                     	;# 
  1513  020C                     	;# 
  1514  020D                     	;# 
  1515  020E                     	;# 
  1516  0211                     	;# 
  1517  0211                     	;# 
  1518  0212                     	;# 
  1519  0212                     	;# 
  1520  0213                     	;# 
  1521  0213                     	;# 
  1522  0214                     	;# 
  1523  0214                     	;# 
  1524  0215                     	;# 
  1525  0215                     	;# 
  1526  0215                     	;# 
  1527  0216                     	;# 
  1528  0216                     	;# 
  1529  0217                     	;# 
  1530  0217                     	;# 
  1531  0219                     	;# 
  1532  021A                     	;# 
  1533  021B                     	;# 
  1534  021C                     	;# 
  1535  021D                     	;# 
  1536  021E                     	;# 
  1537  021F                     	;# 
  1538  0291                     	;# 
  1539  0291                     	;# 
  1540  0292                     	;# 
  1541  0293                     	;# 
  1542  0294                     	;# 
  1543  0295                     	;# 
  1544  0295                     	;# 
  1545  0296                     	;# 
  1546  0298                     	;# 
  1547  0298                     	;# 
  1548  0299                     	;# 
  1549  029A                     	;# 
  1550  029B                     	;# 
  1551  029C                     	;# 
  1552  029D                     	;# 
  1553  029E                     	;# 
  1554  0311                     	;# 
  1555  0311                     	;# 
  1556  0312                     	;# 
  1557  0313                     	;# 
  1558  0318                     	;# 
  1559  0318                     	;# 
  1560  0319                     	;# 
  1561  031A                     	;# 
  1562  038C                     	;# 
  1563  038D                     	;# 
  1564  038E                     	;# 
  1565  0391                     	;# 
  1566  0392                     	;# 
  1567  0393                     	;# 
  1568  0394                     	;# 
  1569  0395                     	;# 
  1570  0396                     	;# 
  1571  039A                     	;# 
  1572  039C                     	;# 
  1573  039D                     	;# 
  1574  039E                     	;# 
  1575  039F                     	;# 
  1576  0415                     	;# 
  1577  0416                     	;# 
  1578  0417                     	;# 
  1579  041C                     	;# 
  1580  041D                     	;# 
  1581  041E                     	;# 
  1582  0FE4                     	;# 
  1583  0FE5                     	;# 
  1584  0FE6                     	;# 
  1585  0FE7                     	;# 
  1586  0FE8                     	;# 
  1587  0FE9                     	;# 
  1588  0FEA                     	;# 
  1589  0FEB                     	;# 
  1590  0FED                     	;# 
  1591  0FEE                     	;# 
  1592  0FEF                     	;# 
  1593  0000                     	;# 
  1594  0001                     	;# 
  1595  0002                     	;# 
  1596  0003                     	;# 
  1597  0004                     	;# 
  1598  0005                     	;# 
  1599  0006                     	;# 
  1600  0007                     	;# 
  1601  0008                     	;# 
  1602  0009                     	;# 
  1603  000A                     	;# 
  1604  000B                     	;# 
  1605  000C                     	;# 
  1606  000D                     	;# 
  1607  000E                     	;# 
  1608  0011                     	;# 
  1609  0012                     	;# 
  1610  0013                     	;# 
  1611  0014                     	;# 
  1612  0015                     	;# 
  1613  0016                     	;# 
  1614  0016                     	;# 
  1615  0017                     	;# 
  1616  0018                     	;# 
  1617  0019                     	;# 
  1618  001A                     	;# 
  1619  001B                     	;# 
  1620  001C                     	;# 
  1621  001E                     	;# 
  1622  001F                     	;# 
  1623  008C                     	;# 
  1624  008D                     	;# 
  1625  008E                     	;# 
  1626  0091                     	;# 
  1627  0092                     	;# 
  1628  0093                     	;# 
  1629  0094                     	;# 
  1630  0095                     	;# 
  1631  0096                     	;# 
  1632  0097                     	;# 
  1633  0098                     	;# 
  1634  0099                     	;# 
  1635  009A                     	;# 
  1636  009B                     	;# 
  1637  009B                     	;# 
  1638  009C                     	;# 
  1639  009D                     	;# 
  1640  009E                     	;# 
  1641  010C                     	;# 
  1642  010D                     	;# 
  1643  010E                     	;# 
  1644  0111                     	;# 
  1645  0112                     	;# 
  1646  0113                     	;# 
  1647  0114                     	;# 
  1648  0115                     	;# 
  1649  0116                     	;# 
  1650  0117                     	;# 
  1651  0118                     	;# 
  1652  0119                     	;# 
  1653  011A                     	;# 
  1654  011B                     	;# 
  1655  011D                     	;# 
  1656  011E                     	;# 
  1657  018C                     	;# 
  1658  018D                     	;# 
  1659  018E                     	;# 
  1660  0191                     	;# 
  1661  0191                     	;# 
  1662  0192                     	;# 
  1663  0193                     	;# 
  1664  0193                     	;# 
  1665  0193                     	;# 
  1666  0194                     	;# 
  1667  0195                     	;# 
  1668  0196                     	;# 
  1669  0199                     	;# 
  1670  019A                     	;# 
  1671  019B                     	;# 
  1672  019B                     	;# 
  1673  019C                     	;# 
  1674  019D                     	;# 
  1675  019E                     	;# 
  1676  019F                     	;# 
  1677  020C                     	;# 
  1678  020D                     	;# 
  1679  020E                     	;# 
  1680  0211                     	;# 
  1681  0211                     	;# 
  1682  0212                     	;# 
  1683  0212                     	;# 
  1684  0213                     	;# 
  1685  0213                     	;# 
  1686  0214                     	;# 
  1687  0214                     	;# 
  1688  0215                     	;# 
  1689  0215                     	;# 
  1690  0215                     	;# 
  1691  0216                     	;# 
  1692  0216                     	;# 
  1693  0217                     	;# 
  1694  0217                     	;# 
  1695  0219                     	;# 
  1696  021A                     	;# 
  1697  021B                     	;# 
  1698  021C                     	;# 
  1699  021D                     	;# 
  1700  021E                     	;# 
  1701  021F                     	;# 
  1702  0291                     	;# 
  1703  0291                     	;# 
  1704  0292                     	;# 
  1705  0293                     	;# 
  1706  0294                     	;# 
  1707  0295                     	;# 
  1708  0295                     	;# 
  1709  0296                     	;# 
  1710  0298                     	;# 
  1711  0298                     	;# 
  1712  0299                     	;# 
  1713  029A                     	;# 
  1714  029B                     	;# 
  1715  029C                     	;# 
  1716  029D                     	;# 
  1717  029E                     	;# 
  1718  0311                     	;# 
  1719  0311                     	;# 
  1720  0312                     	;# 
  1721  0313                     	;# 
  1722  0318                     	;# 
  1723  0318                     	;# 
  1724  0319                     	;# 
  1725  031A                     	;# 
  1726  038C                     	;# 
  1727  038D                     	;# 
  1728  038E                     	;# 
  1729  0391                     	;# 
  1730  0392                     	;# 
  1731  0393                     	;# 
  1732  0394                     	;# 
  1733  0395                     	;# 
  1734  0396                     	;# 
  1735  039A                     	;# 
  1736  039C                     	;# 
  1737  039D                     	;# 
  1738  039E                     	;# 
  1739  039F                     	;# 
  1740  0415                     	;# 
  1741  0416                     	;# 
  1742  0417                     	;# 
  1743  041C                     	;# 
  1744  041D                     	;# 
  1745  041E                     	;# 
  1746  0FE4                     	;# 
  1747  0FE5                     	;# 
  1748  0FE6                     	;# 
  1749  0FE7                     	;# 
  1750  0FE8                     	;# 
  1751  0FE9                     	;# 
  1752  0FEA                     	;# 
  1753  0FEB                     	;# 
  1754  0FED                     	;# 
  1755  0FEE                     	;# 
  1756  0FEF                     	;# 
  1757                           
  1758                           	psect	idataCOMMON
  1759  0003                     __pidataCOMMON:	
  1760                           
  1761                           ;initializer for _I2C_slaveWriteData
  1762  0003  3455               	retlw	85
  1763                           
  1764                           	psect	idataBANK0
  1765  0DA3                     __pidataBANK0:	
  1766                           
  1767                           ;initializer for _tmr_scaler
  1768  0DA3  3401               	retlw	1
  1769                           
  1770                           ;initializer for _threshold
  1771  0DA4  3432               	retlw	50
  1772                           
  1773                           ;initializer for _BACKPLANE_SLAVE_ADDRESS
  1774  0DA5  3401               	retlw	1
  1775                           
  1776                           ;initializer for _type_no_data
  1777  0DA6  3406               	retlw	6
  1778                           
  1779                           	psect	idataBANK1
  1780  0002                     __pidataBANK1:	
  1781                           
  1782                           ;initializer for _continuity
  1783  0002  3403               	retlw	3
  1784                           
  1785                           	psect	stringtext
  1786  03CF                     __pstringtext:	
  1787  03CF                     _dpowers:	
  1788  03CF  3401               	retlw	1
  1789  03D0  3400               	retlw	0
  1790  03D1  340A               	retlw	10
  1791  03D2  3400               	retlw	0
  1792  03D3  3464               	retlw	100
  1793  03D4  3400               	retlw	0
  1794  03D5  34E8               	retlw	232
  1795  03D6  3403               	retlw	3
  1796  03D7  3410               	retlw	16
  1797  03D8  3427               	retlw	39
  1798  03D9                     __end_of_dpowers:	
  1799  03D9                     STR_36:	
  1800  03D9  3449               	retlw	73	;'I'
  1801  03DA  344C               	retlw	76	;'L'
  1802  03DB  344C               	retlw	76	;'L'
  1803  03DC  3445               	retlw	69	;'E'
  1804  03DD  3447               	retlw	71	;'G'
  1805  03DE  3441               	retlw	65	;'A'
  1806  03DF  344C               	retlw	76	;'L'
  1807  03E0  345F               	retlw	95	;'_'
  1808  03E1  3454               	retlw	84	;'T'
  1809  03E2  3459               	retlw	89	;'Y'
  1810  03E3  3450               	retlw	80	;'P'
  1811  03E4  3445               	retlw	69	;'E'
  1812  03E5  340A               	retlw	10
  1813  03E6  3400               	retlw	0
  1814  03E7                     STR_1:	
  1815  03E7  3441               	retlw	65	;'A'
  1816  03E8  3431               	retlw	49	;'1'
  1817  03E9  3433               	retlw	51	;'3'
  1818  03EA  3432               	retlw	50	;'2'
  1819  03EB  3434               	retlw	52	;'4'
  1820  03EC  344C               	retlw	76	;'L'
  1821  03ED  3455               	retlw	85	;'U'
  1822  03EE  3441               	retlw	65	;'A'
  1823  03EF  345F               	retlw	95	;'_'
  1824  03F0  3454               	retlw	84	;'T'
  1825  03F1  3400               	retlw	0
  1826  03F2                     STR_16:	
  1827  03F2  3424               	retlw	36	;'$'
  1828  03F3  343A               	retlw	58	;':'
  1829  03F4  3452               	retlw	82	;'R'
  1830  03F5  3444               	retlw	68	;'D'
  1831  03F6  3441               	retlw	65	;'A'
  1832  03F7  343A               	retlw	58	;':'
  1833  03F8  3425               	retlw	37	;'%'
  1834  03F9  3464               	retlw	100	;'d'
  1835  03FA  340A               	retlw	10
  1836  03FB  3400               	retlw	0
  1837  03FC                     STR_13:	
  1838  03FC  3424               	retlw	36	;'$'
  1839  03FD  343A               	retlw	58	;':'
  1840  03FE  3447               	retlw	71	;'G'
  1841  03FF  3445               	retlw	69	;'E'
  1842  0400  3454               	retlw	84	;'T'
  1843  0401  343A               	retlw	58	;':'
  1844  0402  3425               	retlw	37	;'%'
  1845  0403  3464               	retlw	100	;'d'
  1846  0404  340A               	retlw	10
  1847  0405  3400               	retlw	0
  1848  0406                     STR_34:	
  1849  0406  342D               	retlw	45	;'-'
  1850  0407  3425               	retlw	37	;'%'
  1851  0408  3464               	retlw	100	;'d'
  1852  0409  342E               	retlw	46	;'.'
  1853  040A  3425               	retlw	37	;'%'
  1854  040B  3430               	retlw	48	;'0'
  1855  040C  3432               	retlw	50	;'2'
  1856  040D  3464               	retlw	100	;'d'
  1857  040E  340A               	retlw	10
  1858  040F  3400               	retlw	0
  1859  0410                     STR_5:	
  1860  0410  3424               	retlw	36	;'$'
  1861  0411  343A               	retlw	58	;':'
  1862  0412  3457               	retlw	87	;'W'
  1863  0413  3448               	retlw	72	;'H'
  1864  0414  344F               	retlw	79	;'O'
  1865  0415  343A               	retlw	58	;':'
  1866  0416  3425               	retlw	37	;'%'
  1867  0417  3473               	retlw	115	;'s'
  1868  0418  340A               	retlw	10
  1869  0419  3400               	retlw	0
  1870  041A                     STR_9:	
  1871  041A  342A               	retlw	42	;'*'
  1872  041B  343A               	retlw	58	;':'
  1873  041C  3453               	retlw	83	;'S'
  1874  041D  3454               	retlw	84	;'T'
  1875  041E  3450               	retlw	80	;'P'
  1876  041F  343A               	retlw	58	;':'
  1877  0420  3425               	retlw	37	;'%'
  1878  0421  3473               	retlw	115	;'s'
  1879  0422  340A               	retlw	10
  1880  0423  3400               	retlw	0
  1881  0424                     STR_32:	
  1882  0424  342D               	retlw	45	;'-'
  1883  0425  3425               	retlw	37	;'%'
  1884  0426  3464               	retlw	100	;'d'
  1885  0427  342E               	retlw	46	;'.'
  1886  0428  3425               	retlw	37	;'%'
  1887  0429  3430               	retlw	48	;'0'
  1888  042A  3432               	retlw	50	;'2'
  1889  042B  3464               	retlw	100	;'d'
  1890  042C  342C               	retlw	44	;','
  1891  042D  3400               	retlw	0
  1892  042E                     STR_24:	
  1893  042E  3455               	retlw	85	;'U'
  1894  042F  3449               	retlw	73	;'I'
  1895  0430  344E               	retlw	78	;'N'
  1896  0431  3454               	retlw	84	;'T'
  1897  0432  3431               	retlw	49	;'1'
  1898  0433  3436               	retlw	54	;'6'
  1899  0434  345F               	retlw	95	;'_'
  1900  0435  3454               	retlw	84	;'T'
  1901  0436  343A               	retlw	58	;':'
  1902  0437  3400               	retlw	0
  1903  0438                     STR_35:	
  1904  0438  344E               	retlw	78	;'N'
  1905  0439  344F               	retlw	79	;'O'
  1906  043A  345F               	retlw	95	;'_'
  1907  043B  3444               	retlw	68	;'D'
  1908  043C  3441               	retlw	65	;'A'
  1909  043D  3454               	retlw	84	;'T'
  1910  043E  3441               	retlw	65	;'A'
  1911  043F  340A               	retlw	10
  1912  0440  3400               	retlw	0
  1913  0441                     STR_18:	
  1914  0441  3455               	retlw	85	;'U'
  1915  0442  3449               	retlw	73	;'I'
  1916  0443  344E               	retlw	78	;'N'
  1917  0444  3454               	retlw	84	;'T'
  1918  0445  3438               	retlw	56	;'8'
  1919  0446  345F               	retlw	95	;'_'
  1920  0447  3454               	retlw	84	;'T'
  1921  0448  343A               	retlw	58	;':'
  1922  0449  3400               	retlw	0
  1923  044A                     STR_30:	
  1924  044A  3446               	retlw	70	;'F'
  1925  044B  344C               	retlw	76	;'L'
  1926  044C  344F               	retlw	79	;'O'
  1927  044D  3441               	retlw	65	;'A'
  1928  044E  3454               	retlw	84	;'T'
  1929  044F  343A               	retlw	58	;':'
  1930  0450  3400               	retlw	0
  1931  0451                     STR_2:	
  1932  0451  3428               	retlw	40	;'('
  1933  0452  346E               	retlw	110	;'n'
  1934  0453  3475               	retlw	117	;'u'
  1935  0454  346C               	retlw	108	;'l'
  1936  0455  346C               	retlw	108	;'l'
  1937  0456  3429               	retlw	41	;')'
  1938  0457  3400               	retlw	0
  1939  0458                     STR_17:	
  1940  0458  3425               	retlw	37	;'%'
  1941  0459  3425               	retlw	37	;'%'
  1942  045A  3425               	retlw	37	;'%'
  1943  045B  3464               	retlw	100	;'d'
  1944  045C  343A               	retlw	58	;':'
  1945  045D  3400               	retlw	0
  1946  045E                     STR_3:	
  1947  045E  3423               	retlw	35	;'#'
  1948  045F  3425               	retlw	37	;'%'
  1949  0460  3473               	retlw	115	;'s'
  1950  0461  340A               	retlw	10
  1951  0462  3400               	retlw	0
  1952  0463                     STR_20:	
  1953  0463  3425               	retlw	37	;'%'
  1954  0464  3475               	retlw	117	;'u'
  1955  0465  340A               	retlw	10
  1956  0466  3400               	retlw	0
  1957  0467                     STR_22:	
  1958  0467  3425               	retlw	37	;'%'
  1959  0468  3464               	retlw	100	;'d'
  1960  0469  342C               	retlw	44	;','
  1961  046A  3400               	retlw	0
  1962  046B                     STR_19:	
  1963  046B  3425               	retlw	37	;'%'
  1964  046C  3475               	retlw	117	;'u'
  1965  046D  342C               	retlw	44	;','
  1966  046E  3400               	retlw	0
  1967  046F                     STR_15:	
  1968  046F  3452               	retlw	82	;'R'
  1969  0470  3444               	retlw	68	;'D'
  1970  0471  3441               	retlw	65	;'A'
  1971  0472  3400               	retlw	0
  1972  0473                     STR_14:	
  1973  0473  3457               	retlw	87	;'W'
  1974  0474  3444               	retlw	68	;'D'
  1975  0475  3441               	retlw	65	;'A'
  1976  0476  3400               	retlw	0
  1977  0477                     STR_7:	
  1978  0477  3453               	retlw	83	;'S'
  1979  0478  3454               	retlw	84	;'T'
  1980  0479  3441               	retlw	65	;'A'
  1981  047A  3400               	retlw	0
  1982  047B                     STR_10:	
  1983  047B  3441               	retlw	65	;'A'
  1984  047C  3443               	retlw	67	;'C'
  1985  047D  344B               	retlw	75	;'K'
  1986  047E  3400               	retlw	0
  1987  047F                     STR_4:	
  1988  047F  3457               	retlw	87	;'W'
  1989  0480  3448               	retlw	72	;'H'
  1990  0481  344F               	retlw	79	;'O'
  1991  0482  3400               	retlw	0
  1992  0483                     STR_8:	
  1993  0483  3453               	retlw	83	;'S'
  1994  0484  3454               	retlw	84	;'T'
  1995  0485  3450               	retlw	80	;'P'
  1996  0486  3400               	retlw	0
  1997  0487                     STR_12:	
  1998  0487  3447               	retlw	71	;'G'
  1999  0488  3445               	retlw	69	;'E'
  2000  0489  3454               	retlw	84	;'T'
  2001  048A  3400               	retlw	0
  2002  048B                     STR_11:	
  2003  048B  3453               	retlw	83	;'S'
  2004  048C  3445               	retlw	69	;'E'
  2005  048D  3454               	retlw	84	;'T'
  2006  048E  3400               	retlw	0
  2007  048F                     STR_6:	
  2008  048F  3453               	retlw	83	;'S'
  2009  0490  3441               	retlw	65	;'A'
  2010  0491  3456               	retlw	86	;'V'
  2011  0492  3400               	retlw	0
  2012  03F8                     
  2013                           ; #config settings
  2014  0000                     
  2015                           	psect	nvBANK1
  2016  00D5                     __pnvBANK1:	
  2017  00D5                     _device_id_:	
  2018  00D5                     	ds	2
  2019  00D7                     _PROTOCOL_Set_Handler:	
  2020  00D7                     	ds	2
  2021  00D9                     _PROTOCOL_Stop_Handler:	
  2022  00D9                     	ds	2
  2023  00DB                     _PROTOCOL_Start_Handler:	
  2024  00DB                     	ds	2
  2025  0015                     _TMR0	set	21
  2026  000B                     _INTCONbits	set	11
  2027  0011                     _PIR1bits	set	17
  2028  005A                     _TMR0IF	set	90
  2029  0095                     _OPTION_REG	set	149
  2030  009D                     _ADCON0bits	set	157
  2031  009C                     _ADRESH	set	156
  2032  009B                     _ADRESL	set	155
  2033  009E                     _ADCON1	set	158
  2034  009D                     _ADCON0	set	157
  2035  0095                     _OPTION_REGbits	set	149
  2036  008E                     _TRISC	set	142
  2037  008D                     _TRISB	set	141
  2038  008C                     _TRISA	set	140
  2039  0097                     _WDTCON	set	151
  2040  0098                     _OSCTUNE	set	152
  2041  0099                     _OSCCON	set	153
  2042  0091                     _PIE1bits	set	145
  2043  010E                     _LATCbits	set	270
  2044  011D                     _APFCON0	set	285
  2045  011E                     _APFCON1	set	286
  2046  010E                     _LATC	set	270
  2047  010D                     _LATB	set	269
  2048  010C                     _LATA	set	268
  2049  0196                     _EECON2	set	406
  2050  0193                     _EEDATL	set	403
  2051  0194                     _EEDATH	set	404
  2052  0195                     _EECON1bits	set	405
  2053  0192                     _EEADRH	set	402
  2054  0191                     _EEADRL	set	401
  2055  018C                     _ANSELA	set	396
  2056  018D                     _ANSELB	set	397
  2057  018E                     _ANSELC	set	398
  2058  0199                     _RCREG	set	409
  2059  019D                     _RCSTAbits	set	413
  2060  019A                     _TXREG	set	410
  2061  019C                     _SPBRGH	set	412
  2062  019B                     _SPBRGL	set	411
  2063  019E                     _TXSTA	set	414
  2064  019D                     _RCSTA	set	413
  2065  019F                     _BAUDCON	set	415
  2066  020E                     _WPUC	set	526
  2067  020C                     _WPUA	set	524
  2068  020D                     _WPUB	set	525
  2069  0215                     _SSP1CON1bits	set	533
  2070  0216                     _SSP1CON2bits	set	534
  2071  0214                     _SSP1STATbits	set	532
  2072  0211                     _SSP1BUF	set	529
  2073  0212                     _SSP1ADD	set	530
  2074  0213                     _SSP1MSK	set	531
  2075  0217                     _SSP1CON3	set	535
  2076  0216                     _SSP1CON2	set	534
  2077  0215                     _SSP1CON1	set	533
  2078  0214                     _SSP1STAT	set	532
  2079                           
  2080                           	psect	cinit
  2081  0032                     start_initialization:	
  2082  0032                     __initialization:	
  2083                           
  2084                           ; Initialize objects allocated to COMMON
  2085  0032  3180  2003  3180   	fcall	__pidataCOMMON	;fetch initializer
  2086  0035  00FD               	movwf	__pdataCOMMON& (0+127)
  2087                           
  2088                           ; Initialize objects allocated to BANK0
  2089  0036  318D  25A3  3180   	fcall	__pidataBANK0	;fetch initializer
  2090  0039  00EC               	movwf	__pdataBANK0& (0+127)
  2091  003A  318D  25A4  3180   	fcall	__pidataBANK0+1	;fetch initializer
  2092  003D  00ED               	movwf	(__pdataBANK0+1)& (0+127)
  2093  003E  318D  25A5  3180   	fcall	__pidataBANK0+2	;fetch initializer
  2094  0041  00EE               	movwf	(__pdataBANK0+2)& (0+127)
  2095  0042  318D  25A6  3180   	fcall	__pidataBANK0+3	;fetch initializer
  2096  0045  00EF               	movwf	(__pdataBANK0+3)& (0+127)
  2097                           
  2098                           ; Initialize objects allocated to BANK1
  2099  0046  0021               	movlb	1	; select bank1
  2100  0047  3180  2002  3180   	fcall	__pidataBANK1	;fetch initializer
  2101  004A  00DD               	movwf	__pdataBANK1& (0+127)
  2102                           
  2103                           ; Clear objects allocated to COMMON
  2104  004B  01FA               	clrf	__pbssCOMMON& (0+127)
  2105  004C  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
  2106  004D  01FC               	clrf	(__pbssCOMMON+2)& (0+127)
  2107                           
  2108                           ; Clear objects allocated to BANK0
  2109  004E  3050               	movlw	low __pbssBANK0
  2110  004F  0084               	movwf	4
  2111  0050  3000               	movlw	high __pbssBANK0
  2112  0051  0085               	movwf	5
  2113  0052  301C               	movlw	28
  2114  0053  318D  25AD  3180   	fcall	clear_ram0
  2115                           
  2116                           ; Clear objects allocated to BANK1
  2117  0056  30A0               	movlw	low __pbssBANK1
  2118  0057  0084               	movwf	4
  2119  0058  3000               	movlw	high __pbssBANK1
  2120  0059  0085               	movwf	5
  2121  005A  3035               	movlw	53
  2122  005B  318D  25AD  3180   	fcall	clear_ram0
  2123                           
  2124                           ; Clear objects allocated to BANK2
  2125  005E  3020               	movlw	low __pbssBANK2
  2126  005F  0084               	movwf	4
  2127  0060  3001               	movlw	high __pbssBANK2
  2128  0061  0085               	movwf	5
  2129  0062  3030               	movlw	48
  2130  0063  318D  25AD  3180   	fcall	clear_ram0
  2131                           
  2132                           ; Clear objects allocated to BANK3
  2133  0066  30A0               	movlw	low __pbssBANK3
  2134  0067  0084               	movwf	4
  2135  0068  3001               	movlw	high __pbssBANK3
  2136  0069  0085               	movwf	5
  2137  006A  3030               	movlw	48
  2138  006B  318D  25AD         	fcall	clear_ram0
  2139  006D                     end_of_initialization:	
  2140                           ;End of C runtime variable initialization code
  2141                           
  2142  006D                     __end_of__initialization:	
  2143  006D  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2144  006E  0020               	movlb	0
  2145  006F  3187  2F7F         	ljmp	_main	;jump to C main() function
  2146                           
  2147                           	psect	bssCOMMON
  2148  007A                     __pbssCOMMON:	
  2149  007A                     _eusartTxBufferRemaining:	
  2150  007A                     	ds	1
  2151  007B                     _eusartTxTail:	
  2152  007B                     	ds	1
  2153  007C                     _eusartTxHead:	
  2154  007C                     	ds	1
  2155                           
  2156                           	psect	dataCOMMON
  2157  007D                     __pdataCOMMON:	
  2158  007D                     _I2C_slaveWriteData:	
  2159  007D                     	ds	1
  2160                           
  2161                           	psect	bssBANK0
  2162  0050                     __pbssBANK0:	
  2163  0050                     _PROTOCOL_Inv_Handler:	
  2164  0050                     	ds	2
  2165  0052                     _j:	
  2166  0052                     	ds	1
  2167  0053                     _i:	
  2168  0053                     	ds	1
  2169  0054                     _backplane_slave_enabled:	
  2170  0054                     	ds	1
  2171  0055                     _tmr_overflow:	
  2172  0055                     	ds	1
  2173  0056                     _tmr_cnt:	
  2174  0056                     	ds	1
  2175  0057                     _sec_cnt:	
  2176  0057                     	ds	1
  2177  0058                     _invoked:	
  2178  0058                     	ds	1
  2179  0059                     _running:	
  2180  0059                     	ds	1
  2181  005A                     _locked:	
  2182  005A                     	ds	1
  2183  005B                     _value:	
  2184  005B                     	ds	1
  2185  005C                     _cnt:	
  2186  005C                     	ds	1
  2187  005D                     _slave_address:	
  2188  005D                     	ds	1
  2189  005E                     _on:	
  2190  005E                     	ds	1
  2191  005F                     _timer0ReloadVal:	
  2192  005F                     	ds	1
  2193  0060                     _eusartRxCount:	
  2194  0060                     	ds	1
  2195  0061                     _eusartRxTail:	
  2196  0061                     	ds	1
  2197  0062                     _eusartRxHead:	
  2198  0062                     	ds	1
  2199  0063                     I2C1_StatusCallback@ext_cnt:	
  2200  0063                     	ds	1
  2201  0064                     I2C1_StatusCallback@ext_len:	
  2202  0064                     	ds	1
  2203  0065                     I2C1_StatusCallback@next:	
  2204  0065                     	ds	1
  2205  0066                     I2C1_StatusCallback@slaveWriteType:	
  2206  0066                     	ds	1
  2207  0067                     _readbuf:	
  2208  0067                     	ds	5
  2209                           
  2210                           	psect	dataBANK0
  2211  006C                     __pdataBANK0:	
  2212  006C                     _tmr_scaler:	
  2213  006C                     	ds	1
  2214  006D                     _threshold:	
  2215  006D                     	ds	1
  2216  006E                     _BACKPLANE_SLAVE_ADDRESS:	
  2217  006E                     	ds	1
  2218  006F                     _type_no_data:	
  2219  006F                     	ds	1
  2220                           
  2221                           	psect	bssBANK1
  2222  00A0                     __pbssBANK1:	
  2223  00A0                     _eusartRxBuffer:	
  2224  00A0                     	ds	8
  2225  00A8                     _eusartTxBuffer:	
  2226  00A8                     	ds	8
  2227  00B0                     _float100:	
  2228  00B0                     	ds	2
  2229  00B2                     _PROTOCOL_Extension_Handler:	
  2230  00B2                     	ds	2
  2231  00B4                     _PROTOCOL_Loop_Func:	
  2232  00B4                     	ds	2
  2233  00B6                     _count:	
  2234  00B6                     	ds	2
  2235  00B8                     _sum:	
  2236  00B8                     	ds	2
  2237  00BA                     _data:	
  2238  00BA                     	ds	1
  2239  00BB                     _readbuf_status:	
  2240  00BB                     	ds	1
  2241  00BC                     _sendbuf:	
  2242  00BC                     	ds	16
  2243  00CC                     PROTOCOL_Send_float@pbuf:	
  2244  00CC                     	ds	3
  2245  00CF                     PROTOCOL_Send_int16_t@pbuf:	
  2246  00CF                     	ds	2
  2247  00D1                     PROTOCOL_Send_uint16_t@pbuf:	
  2248  00D1                     	ds	2
  2249  00D3                     PROTOCOL_Send_int8_t@pbuf:	
  2250  00D3                     	ds	1
  2251  00D4                     PROTOCOL_Send_uint8_t@pbuf:	
  2252  00D4                     	ds	1
  2253                           
  2254                           	psect	dataBANK1
  2255  00DD                     __pdataBANK1:	
  2256  00DD                     _continuity:	
  2257  00DD                     	ds	1
  2258                           
  2259                           	psect	bssBANK2
  2260  0120                     __pbssBANK2:	
  2261  0120                     _buf:	
  2262  0120                     	ds	48
  2263                           
  2264                           	psect	bssBANK3
  2265  01A0                     __pbssBANK3:	
  2266  01A0                     I2C1_StatusCallback@ext_buf:	
  2267  01A0                     	ds	48
  2268                           
  2269                           	psect	clrtext
  2270  0DAD                     clear_ram0:	
  2271                           ;	Called with FSR0 containing the base address, and
  2272                           ;	WREG with the size to clear
  2273                           
  2274  0DAD  0064               	clrwdt	;clear the watchdog before getting into this loop
  2275  0DAE                     clrloop0:	
  2276  0DAE  0180               	clrf	0	;clear RAM location pointed to by FSR
  2277  0DAF  3101               	addfsr 0,1
  2278  0DB0  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2279  0DB1  2DAE               	goto	clrloop0	;have we reached the end yet?
  2280  0DB2  3400               	retlw	0	;all done for this memory range, return
  2281                           
  2282                           	psect	cstackCOMMON
  2283  0070                     __pcstackCOMMON:	
  2284  0070                     ?_isdigit:	
  2285  0070                     ?_PROTOCOL_Read_Device_Address:	
  2286                           ; 1 bit 
  2287                           
  2288  0070                     ?_I2C1_StatusCallback:	
  2289                           ; 1 bytes @ 0x0
  2290                           
  2291  0070                     ?_PROTOCOL_SET:	
  2292                           ; 1 bytes @ 0x0
  2293                           
  2294  0070                     ?_PROTOCOL_STA:	
  2295                           ; 1 bytes @ 0x0
  2296                           
  2297  0070                     ?_PROTOCOL_STP:	
  2298                           ; 1 bytes @ 0x0
  2299                           
  2300  0070                     ?_PROTOCOL_SAV:	
  2301                           ; 1 bytes @ 0x0
  2302                           
  2303  0070                     ?_PROTOCOL_INV:	
  2304                           ; 1 bytes @ 0x0
  2305                           
  2306  0070                     ??_PROTOCOL_INV:	
  2307                           ; 1 bytes @ 0x0
  2308                           
  2309  0070                     ?_PROTOCOL_RST:	
  2310                           ; 1 bytes @ 0x0
  2311                           
  2312  0070                     ??_PROTOCOL_RST:	
  2313                           ; 1 bytes @ 0x0
  2314                           
  2315  0070                     ?_PROTOCOL_Backplane_Slave_Enabled:	
  2316                           ; 1 bytes @ 0x0
  2317                           
  2318  0070                     ??_PROTOCOL_Backplane_Slave_Enabled:	
  2319                           ; 1 bytes @ 0x0
  2320                           
  2321  0070                     ?_PROTOCOL_Read_Lock:	
  2322                           ; 1 bytes @ 0x0
  2323                           
  2324  0070                     ??_PROTOCOL_Read_Lock:	
  2325                           ; 1 bytes @ 0x0
  2326                           
  2327  0070                     ?_PROTOCOL_EXT:	
  2328                           ; 1 bytes @ 0x0
  2329                           
  2330  0070                     ?_PROTOCOL_I2C_WHO:	
  2331                           ; 1 bytes @ 0x0
  2332                           
  2333  0070                     ??_PROTOCOL_I2C_WHO:	
  2334                           ; 1 bytes @ 0x0
  2335                           
  2336  0070                     ?_PROTOCOL_I2C_SEN:	
  2337                           ; 1 bytes @ 0x0
  2338                           
  2339  0070                     ??_PROTOCOL_I2C_SEN:	
  2340                           ; 1 bytes @ 0x0
  2341                           
  2342  0070                     ?_PROTOCOL_I2C_GET:	
  2343                           ; 1 bytes @ 0x0
  2344                           
  2345  0070                     ??_PROTOCOL_I2C_GET:	
  2346                           ; 1 bytes @ 0x0
  2347                           
  2348  0070                     ?_PIN_MANAGER_Initialize:	
  2349                           ; 1 bytes @ 0x0
  2350                           
  2351  0070                     ?_OSCILLATOR_Initialize:	
  2352                           ; 1 bytes @ 0x0
  2353                           
  2354  0070                     ?_WDT_Initialize:	
  2355                           ; 1 bytes @ 0x0
  2356                           
  2357  0070                     ?_ADC_Initialize:	
  2358                           ; 1 bytes @ 0x0
  2359                           
  2360  0070                     ?_TMR0_Initialize:	
  2361                           ; 1 bytes @ 0x0
  2362                           
  2363  0070                     ?_EUSART_Initialize:	
  2364                           ; 1 bytes @ 0x0
  2365                           
  2366  0070                     ?_EUSART_Transmit_ISR:	
  2367                           ; 1 bytes @ 0x0
  2368                           
  2369  0070                     ??_EUSART_Transmit_ISR:	
  2370                           ; 1 bytes @ 0x0
  2371                           
  2372  0070                     ?_EUSART_Receive_ISR:	
  2373                           ; 1 bytes @ 0x0
  2374                           
  2375  0070                     ??_EUSART_Receive_ISR:	
  2376                           ; 1 bytes @ 0x0
  2377                           
  2378  0070                     ?_PROTOCOL_Loop:	
  2379                           ; 1 bytes @ 0x0
  2380                           
  2381  0070                     ?_I2C1_Initialize:	
  2382                           ; 1 bytes @ 0x0
  2383                           
  2384  0070                     ?_I2C1_ISR:	
  2385                           ; 1 bytes @ 0x0
  2386                           
  2387  0070                     ?_INTERRUPT_InterruptManager:	
  2388                           ; 1 bytes @ 0x0
  2389                           
  2390  0070                     ?_EUSART_Read:	
  2391                           ; 1 bytes @ 0x0
  2392                           
  2393  0070                     ?_EUSART_Write:	
  2394                           ; 1 bytes @ 0x0
  2395                           
  2396  0070                     ?_putch:	
  2397                           ; 1 bytes @ 0x0
  2398                           
  2399  0070                     ?_DATAEE_ReadByte:	
  2400                           ; 1 bytes @ 0x0
  2401                           
  2402  0070                     ?_ADC_SelectChannel:	
  2403                           ; 1 bytes @ 0x0
  2404                           
  2405  0070                     ?_ADC_StartConversion:	
  2406                           ; 1 bytes @ 0x0
  2407                           
  2408  0070                     ?_ADC_IsConversionDone:	
  2409                           ; 1 bytes @ 0x0
  2410                           
  2411  0070                     ?_TMR0_HasOverflowOccured:	
  2412                           ; 1 bytes @ 0x0
  2413                           
  2414  0070                     ?_inv_handler:	
  2415                           ; 1 bytes @ 0x0
  2416                           
  2417  0070                     ?_loop_func:	
  2418                           ; 1 bytes @ 0x0
  2419                           
  2420  0070                     ?_main:	
  2421                           ; 1 bytes @ 0x0
  2422                           
  2423  0070                     ?_PROTOCOL_Write_Device_Address:	
  2424                           ; 1 bytes @ 0x0
  2425                           
  2426  0070                     ?i1_DATAEE_WriteByte:	
  2427                           ; 1 bytes @ 0x0
  2428                           
  2429  0070                     ?i1_PROTOCOL_STA:	
  2430                           ; 1 bytes @ 0x0
  2431                           
  2432  0070                     ??i1_PROTOCOL_STA:	
  2433                           ; 1 bytes @ 0x0
  2434                           
  2435  0070                     ?i1_PROTOCOL_STP:	
  2436                           ; 1 bytes @ 0x0
  2437                           
  2438  0070                     ??i1_PROTOCOL_STP:	
  2439                           ; 1 bytes @ 0x0
  2440                           
  2441  0070                     ?i1_PROTOCOL_SAV:	
  2442                           ; 1 bytes @ 0x0
  2443                           
  2444  0070                     ?i1_PROTOCOL_SET:	
  2445                           ; 1 bytes @ 0x0
  2446                           
  2447  0070                     ??i1_PROTOCOL_SET:	
  2448                           ; 1 bytes @ 0x0
  2449                           
  2450  0070                     ?i1_PROTOCOL_EXT:	
  2451                           ; 1 bytes @ 0x0
  2452                           
  2453  0070                     ??i1_PROTOCOL_EXT:	
  2454                           ; 1 bytes @ 0x0
  2455                           
  2456  0070                     i1DATAEE_WriteByte@bData:	
  2457                           ; 1 bytes @ 0x0
  2458                           
  2459                           
  2460                           ; 1 bytes @ 0x0
  2461  0070                     	ds	1
  2462  0071                     ??i1_DATAEE_WriteByte:	
  2463  0071                     PROTOCOL_I2C_SEN@pdata:	
  2464                           ; 1 bytes @ 0x1
  2465                           
  2466  0071                     i1DATAEE_WriteByte@bAdd:	
  2467                           ; 1 bytes @ 0x1
  2468                           
  2469  0071                     i1PROTOCOL_SET@value_:	
  2470                           ; 1 bytes @ 0x1
  2471                           
  2472                           
  2473                           ; 1 bytes @ 0x1
  2474  0071                     	ds	1
  2475  0072                     i1DATAEE_WriteByte@GIEBitValue:	
  2476                           
  2477                           ; 1 bytes @ 0x2
  2478  0072                     	ds	1
  2479  0073                     ??i1_PROTOCOL_SAV:	
  2480                           
  2481                           ; 1 bytes @ 0x3
  2482  0073                     	ds	1
  2483  0074                     ??_I2C1_StatusCallback:	
  2484                           
  2485                           ; 1 bytes @ 0x4
  2486  0074                     	ds	1
  2487  0075                     I2C1_StatusCallback@i2c_bus_state:	
  2488                           
  2489                           ; 1 bytes @ 0x5
  2490  0075                     	ds	1
  2491  0076                     I2C1_StatusCallback@pdata:	
  2492                           
  2493                           ; 1 bytes @ 0x6
  2494  0076                     	ds	1
  2495  0077                     ??_I2C1_ISR:	
  2496                           
  2497                           ; 1 bytes @ 0x7
  2498  0077                     	ds	1
  2499  0078                     I2C1_ISR@i2c_data:	
  2500                           
  2501                           ; 1 bytes @ 0x8
  2502  0078                     	ds	1
  2503  0079                     ??_INTERRUPT_InterruptManager:	
  2504                           
  2505                           ; 1 bytes @ 0x9
  2506  0079                     	ds	1
  2507                           
  2508                           	psect	cstackBANK0
  2509  0020                     __pcstackBANK0:	
  2510  0020                     ??_PROTOCOL_Read_Device_Address:	
  2511  0020                     ??_PROTOCOL_SET:	
  2512                           ; 1 bytes @ 0x0
  2513                           
  2514  0020                     ??_PROTOCOL_STA:	
  2515                           ; 1 bytes @ 0x0
  2516                           
  2517  0020                     ??_PROTOCOL_STP:	
  2518                           ; 1 bytes @ 0x0
  2519                           
  2520  0020                     ??_PROTOCOL_EXT:	
  2521                           ; 1 bytes @ 0x0
  2522                           
  2523  0020                     ??_PIN_MANAGER_Initialize:	
  2524                           ; 1 bytes @ 0x0
  2525                           
  2526  0020                     ??_OSCILLATOR_Initialize:	
  2527                           ; 1 bytes @ 0x0
  2528                           
  2529  0020                     ??_WDT_Initialize:	
  2530                           ; 1 bytes @ 0x0
  2531                           
  2532  0020                     ??_ADC_Initialize:	
  2533                           ; 1 bytes @ 0x0
  2534                           
  2535  0020                     ??_TMR0_Initialize:	
  2536                           ; 1 bytes @ 0x0
  2537                           
  2538  0020                     ??_EUSART_Initialize:	
  2539                           ; 1 bytes @ 0x0
  2540                           
  2541  0020                     ?_PROTOCOL_Set_Func:	
  2542                           ; 1 bytes @ 0x0
  2543                           
  2544  0020                     ??_isdigit:	
  2545                           ; 1 bytes @ 0x0
  2546                           
  2547  0020                     ??_I2C1_Initialize:	
  2548                           ; 1 bytes @ 0x0
  2549                           
  2550  0020                     ??_EUSART_Read:	
  2551                           ; 1 bytes @ 0x0
  2552                           
  2553  0020                     ??_EUSART_Write:	
  2554                           ; 1 bytes @ 0x0
  2555                           
  2556  0020                     ?_DATAEE_WriteByte:	
  2557                           ; 1 bytes @ 0x0
  2558                           
  2559  0020                     ??_DATAEE_ReadByte:	
  2560                           ; 1 bytes @ 0x0
  2561                           
  2562  0020                     ??_ADC_SelectChannel:	
  2563                           ; 1 bytes @ 0x0
  2564                           
  2565  0020                     ??_ADC_StartConversion:	
  2566                           ; 1 bytes @ 0x0
  2567                           
  2568  0020                     ??_ADC_IsConversionDone:	
  2569                           ; 1 bytes @ 0x0
  2570                           
  2571  0020                     ??_TMR0_HasOverflowOccured:	
  2572                           ; 1 bytes @ 0x0
  2573                           
  2574  0020                     ?_PROTOCOL_I2C_Set_TLV:	
  2575                           ; 1 bytes @ 0x0
  2576                           
  2577  0020                     ?_abs:	
  2578                           ; 1 bytes @ 0x0
  2579                           
  2580  0020                     ?_strncmp:	
  2581                           ; 2 bytes @ 0x0
  2582                           
  2583  0020                     ?_ADC_GetConversionResult:	
  2584                           ; 2 bytes @ 0x0
  2585                           
  2586  0020                     ?___wmul:	
  2587                           ; 2 bytes @ 0x0
  2588                           
  2589  0020                     ?___lwdiv:	
  2590                           ; 2 bytes @ 0x0
  2591                           
  2592  0020                     DATAEE_WriteByte@bData:	
  2593                           ; 2 bytes @ 0x0
  2594                           
  2595  0020                     DATAEE_ReadByte@bAdd:	
  2596                           ; 1 bytes @ 0x0
  2597                           
  2598  0020                     PROTOCOL_EXT@char_buf:	
  2599                           ; 1 bytes @ 0x0
  2600                           
  2601  0020                     PROTOCOL_I2C_Set_TLV@length:	
  2602                           ; 1 bytes @ 0x0
  2603                           
  2604  0020                     _isdigit$1245:	
  2605                           ; 1 bytes @ 0x0
  2606                           
  2607  0020                     PROTOCOL_Set_Func@loop_func:	
  2608                           ; 1 bytes @ 0x0
  2609                           
  2610  0020                     ___wmul@multiplier:	
  2611                           ; 2 bytes @ 0x0
  2612                           
  2613  0020                     abs@a:	
  2614                           ; 2 bytes @ 0x0
  2615                           
  2616  0020                     ___lwdiv@divisor:	
  2617                           ; 2 bytes @ 0x0
  2618                           
  2619  0020                     strncmp@s1:	
  2620                           ; 2 bytes @ 0x0
  2621                           
  2622                           
  2623                           ; 2 bytes @ 0x0
  2624  0020                     	ds	1
  2625  0021                     ?_PROTOCOL_Initialize:	
  2626  0021                     ??_DATAEE_WriteByte:	
  2627                           ; 1 bytes @ 0x1
  2628                           
  2629  0021                     EUSART_Read@readValue:	
  2630                           ; 1 bytes @ 0x1
  2631                           
  2632  0021                     EUSART_Write@txData:	
  2633                           ; 1 bytes @ 0x1
  2634                           
  2635  0021                     DATAEE_WriteByte@bAdd:	
  2636                           ; 1 bytes @ 0x1
  2637                           
  2638  0021                     ADC_SelectChannel@channel:	
  2639                           ; 1 bytes @ 0x1
  2640                           
  2641  0021                     PROTOCOL_SET@value_:	
  2642                           ; 1 bytes @ 0x1
  2643                           
  2644  0021                     PROTOCOL_I2C_Set_TLV@pbuffer:	
  2645                           ; 1 bytes @ 0x1
  2646                           
  2647  0021                     isdigit@c:	
  2648                           ; 1 bytes @ 0x1
  2649                           
  2650  0021                     PROTOCOL_Initialize@device_id:	
  2651                           ; 1 bytes @ 0x1
  2652                           
  2653                           
  2654                           ; 2 bytes @ 0x1
  2655  0021                     	ds	1
  2656  0022                     ??_abs:	
  2657  0022                     ??_PROTOCOL_Set_Func:	
  2658                           ; 1 bytes @ 0x2
  2659                           
  2660  0022                     ??_putch:	
  2661                           ; 1 bytes @ 0x2
  2662                           
  2663  0022                     ??_ADC_GetConversionResult:	
  2664                           ; 1 bytes @ 0x2
  2665                           
  2666  0022                     ??_PROTOCOL_I2C_Set_TLV:	
  2667                           ; 1 bytes @ 0x2
  2668                           
  2669  0022                     putch@txData:	
  2670                           ; 1 bytes @ 0x2
  2671                           
  2672  0022                     DATAEE_WriteByte@GIEBitValue:	
  2673                           ; 1 bytes @ 0x2
  2674                           
  2675  0022                     strncmp@s2:	
  2676                           ; 1 bytes @ 0x2
  2677                           
  2678  0022                     ___wmul@multiplicand:	
  2679                           ; 1 bytes @ 0x2
  2680                           
  2681  0022                     ___lwdiv@dividend:	
  2682                           ; 2 bytes @ 0x2
  2683                           
  2684                           
  2685                           ; 2 bytes @ 0x2
  2686  0022                     	ds	1
  2687  0023                     ??_PROTOCOL_SAV:	
  2688  0023                     ??_PROTOCOL_Write_Device_Address:	
  2689                           ; 1 bytes @ 0x3
  2690                           
  2691  0023                     PROTOCOL_Initialize@start_handler:	
  2692                           ; 1 bytes @ 0x3
  2693                           
  2694  0023                     PROTOCOL_I2C_Set_TLV@type:	
  2695                           ; 1 bytes @ 0x3
  2696                           
  2697  0023                     strncmp@len:	
  2698                           ; 1 bytes @ 0x3
  2699                           
  2700                           
  2701                           ; 2 bytes @ 0x3
  2702  0023                     	ds	1
  2703  0024                     ??_loop_func:	
  2704  0024                     ??___wmul:	
  2705                           ; 1 bytes @ 0x4
  2706                           
  2707  0024                     ??___lwdiv:	
  2708                           ; 1 bytes @ 0x4
  2709                           
  2710  0024                     PROTOCOL_Initialize@stop_handler:	
  2711                           ; 1 bytes @ 0x4
  2712                           
  2713  0024                     PROTOCOL_Write_Device_Address@device_id_i2c:	
  2714                           ; 1 bytes @ 0x4
  2715                           
  2716  0024                     PROTOCOL_I2C_Set_TLV@status:	
  2717                           ; 1 bytes @ 0x4
  2718                           
  2719  0024                     ___wmul@product:	
  2720                           ; 1 bytes @ 0x4
  2721                           
  2722                           
  2723                           ; 2 bytes @ 0x4
  2724  0024                     	ds	1
  2725  0025                     ??_strncmp:	
  2726  0025                     PROTOCOL_Initialize@set_handler:	
  2727                           ; 1 bytes @ 0x5
  2728                           
  2729  0025                     loop_func@out:	
  2730                           ; 1 bytes @ 0x5
  2731                           
  2732  0025                     ___lwdiv@quotient:	
  2733                           ; 2 bytes @ 0x5
  2734                           
  2735                           
  2736                           ; 2 bytes @ 0x5
  2737  0025                     	ds	1
  2738  0026                     ?_atoi:	
  2739  0026                     PROTOCOL_Initialize@inv_handler:	
  2740                           ; 2 bytes @ 0x6
  2741                           
  2742                           
  2743                           ; 2 bytes @ 0x6
  2744  0026                     	ds	1
  2745  0027                     ___lwdiv@counter:	
  2746  0027                     loop_func@v:	
  2747                           ; 1 bytes @ 0x7
  2748                           
  2749                           
  2750                           ; 2 bytes @ 0x7
  2751  0027                     	ds	1
  2752  0028                     ??_atoi:	
  2753  0028                     ?___lwmod:	
  2754                           ; 1 bytes @ 0x8
  2755                           
  2756  0028                     PROTOCOL_Initialize@scaler:	
  2757                           ; 2 bytes @ 0x8
  2758                           
  2759  0028                     ___lwmod@divisor:	
  2760                           ; 1 bytes @ 0x8
  2761                           
  2762                           
  2763                           ; 2 bytes @ 0x8
  2764  0028                     	ds	1
  2765  0029                     ??_PROTOCOL_Initialize:	
  2766                           
  2767                           ; 1 bytes @ 0x9
  2768  0029                     	ds	1
  2769  002A                     atoi@sign:	
  2770  002A                     ___lwmod@dividend:	
  2771                           ; 1 bytes @ 0xA
  2772                           
  2773                           
  2774                           ; 2 bytes @ 0xA
  2775  002A                     	ds	1
  2776  002B                     atoi@a:	
  2777                           
  2778                           ; 2 bytes @ 0xB
  2779  002B                     	ds	1
  2780  002C                     ??___lwmod:	
  2781                           
  2782                           ; 1 bytes @ 0xC
  2783  002C                     	ds	1
  2784  002D                     atoi@s:	
  2785  002D                     ___lwmod@counter:	
  2786                           ; 1 bytes @ 0xD
  2787                           
  2788                           
  2789                           ; 1 bytes @ 0xD
  2790  002D                     	ds	1
  2791  002E                     ?_printf:	
  2792  002E                     printf@f:	
  2793                           ; 2 bytes @ 0xE
  2794                           
  2795                           
  2796                           ; 2 bytes @ 0xE
  2797  002E                     	ds	4
  2798  0032                     ??_printf:	
  2799                           
  2800                           ; 1 bytes @ 0x12
  2801  0032                     	ds	4
  2802  0036                     printf@prec:	
  2803                           
  2804                           ; 1 bytes @ 0x16
  2805  0036                     	ds	1
  2806  0037                     printf@cp:	
  2807                           
  2808                           ; 2 bytes @ 0x17
  2809  0037                     	ds	2
  2810  0039                     printf@ap:	
  2811                           
  2812                           ; 1 bytes @ 0x19
  2813  0039                     	ds	1
  2814  003A                     printf@val:	
  2815                           
  2816                           ; 2 bytes @ 0x1A
  2817  003A                     	ds	2
  2818  003C                     printf@len:	
  2819                           
  2820                           ; 2 bytes @ 0x1C
  2821  003C                     	ds	2
  2822  003E                     printf@flag:	
  2823                           
  2824                           ; 1 bytes @ 0x1E
  2825  003E                     	ds	1
  2826  003F                     printf@width:	
  2827                           
  2828                           ; 2 bytes @ 0x1F
  2829  003F                     	ds	2
  2830  0041                     printf@c:	
  2831                           
  2832                           ; 1 bytes @ 0x21
  2833  0041                     	ds	1
  2834  0042                     ?_PROTOCOL_I2C_Send_uint16_t:	
  2835  0042                     PROTOCOL_I2C_Send_uint16_t@pbuffer:	
  2836                           ; 1 bytes @ 0x22
  2837                           
  2838                           
  2839                           ; 1 bytes @ 0x22
  2840  0042                     	ds	1
  2841  0043                     ??_PROTOCOL_I2C_Send_uint16_t:	
  2842                           
  2843                           ; 1 bytes @ 0x23
  2844  0043                     	ds	4
  2845  0047                     PROTOCOL_I2C_Send_uint16_t@length:	
  2846                           
  2847                           ; 1 bytes @ 0x27
  2848  0047                     	ds	1
  2849  0048                     ?_PROTOCOL_Send_uint16_t:	
  2850  0048                     PROTOCOL_Send_uint16_t@value:	
  2851                           ; 1 bytes @ 0x28
  2852                           
  2853                           
  2854                           ; 2 bytes @ 0x28
  2855  0048                     	ds	2
  2856  004A                     ??_PROTOCOL_Send_uint16_t:	
  2857                           
  2858                           ; 1 bytes @ 0x2A
  2859  004A                     	ds	1
  2860  004B                     ??_PROTOCOL_Loop:	
  2861  004B                     ??_inv_handler:	
  2862                           ; 1 bytes @ 0x2B
  2863                           
  2864                           
  2865                           ; 1 bytes @ 0x2B
  2866  004B                     	ds	2
  2867  004D                     PROTOCOL_Loop@c:	
  2868                           
  2869                           ; 1 bytes @ 0x2D
  2870  004D                     	ds	1
  2871  004E                     PROTOCOL_Loop@device_address:	
  2872                           
  2873                           ; 1 bytes @ 0x2E
  2874  004E                     	ds	1
  2875  004F                     ??_main:	
  2876                           
  2877                           ; 1 bytes @ 0x2F
  2878  004F                     	ds	1
  2879                           
  2880                           	psect	maintext
  2881  077F                     __pmaintext:	
  2882 ;;
  2883 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2884 ;;
  2885 ;; *************** function _main *****************
  2886 ;; Defined at:
  2887 ;;		line 78 in file "main.c"
  2888 ;; Parameters:    Size  Location     Type
  2889 ;;		None
  2890 ;; Auto vars:     Size  Location     Type
  2891 ;;		None
  2892 ;; Return value:  Size  Location     Type
  2893 ;;                  1    wreg      void 
  2894 ;; Registers used:
  2895 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2896 ;; Tracked objects:
  2897 ;;		On entry : B1F/0
  2898 ;;		On exit  : 0/0
  2899 ;;		Unchanged: 0/0
  2900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2902 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2903 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2904 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2905 ;;Total ram usage:        1 bytes
  2906 ;; Hardware stack levels required when called:   12
  2907 ;; This function calls:
  2908 ;;		_ADC_Initialize
  2909 ;;		_EUSART_Initialize
  2910 ;;		_I2C1_Initialize
  2911 ;;		_OSCILLATOR_Initialize
  2912 ;;		_PIN_MANAGER_Initialize
  2913 ;;		_PROTOCOL_Initialize
  2914 ;;		_PROTOCOL_Loop
  2915 ;;		_PROTOCOL_Set_Func
  2916 ;;		_TMR0_Initialize
  2917 ;;		_WDT_Initialize
  2918 ;; This function is called by:
  2919 ;;		Startup code after reset
  2920 ;; This function uses a non-reentrant model
  2921 ;;
  2922                           
  2923                           
  2924                           ;psect for function _main
  2925  077F                     _main:	
  2926                           
  2927                           ;main.c: 81: PROTOCOL_Initialize("A1324LUA_T", (0), (0), (0), inv_handler, 125);
  2928                           
  2929                           ;incstack = 0
  2930                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2931  077F  30E7               	movlw	low (STR_1| (0+32768))
  2932  0780  0020               	movlb	0	; select bank0
  2933  0781  00A1               	movwf	PROTOCOL_Initialize@device_id
  2934  0782  3083               	movlw	high (STR_1| (0+32768))
  2935  0783  00A2               	movwf	PROTOCOL_Initialize@device_id+1
  2936  0784  01A3               	clrf	PROTOCOL_Initialize@start_handler
  2937  0785  01A4               	clrf	PROTOCOL_Initialize@stop_handler
  2938  0786  01A5               	clrf	PROTOCOL_Initialize@set_handler
  2939  0787  300B               	movlw	low _inv_handler
  2940  0788  00A6               	movwf	PROTOCOL_Initialize@inv_handler
  2941  0789  300E               	movlw	high _inv_handler
  2942  078A  00A7               	movwf	PROTOCOL_Initialize@inv_handler+1
  2943  078B  307D               	movlw	125
  2944  078C  00CF               	movwf	??_main
  2945  078D  084F               	movf	??_main,w
  2946  078E  00A8               	movwf	PROTOCOL_Initialize@scaler
  2947  078F  3186  26B9  3187   	fcall	_PROTOCOL_Initialize
  2948                           
  2949                           ;main.c: 82: PROTOCOL_Set_Func(loop_func);
  2950  0792  3057               	movlw	low _loop_func
  2951  0793  0020               	movlb	0	; select bank0
  2952  0794  00A0               	movwf	PROTOCOL_Set_Func@loop_func
  2953  0795  3005               	movlw	high _loop_func
  2954  0796  00A1               	movwf	PROTOCOL_Set_Func@loop_func+1
  2955  0797  318D  25EB  3187   	fcall	_PROTOCOL_Set_Func
  2956                           
  2957                           ;main.c: 85: PIN_MANAGER_Initialize();
  2958  079A  318F  2706  3187   	fcall	_PIN_MANAGER_Initialize
  2959                           
  2960                           ;main.c: 86: OSCILLATOR_Initialize();
  2961  079D  3187  27FB  3187   	fcall	_OSCILLATOR_Initialize
  2962                           
  2963                           ;main.c: 87: WDT_Initialize();
  2964  07A0  318D  259F  3187   	fcall	_WDT_Initialize
  2965                           
  2966                           ;main.c: 88: ADC_Initialize();
  2967  07A3  318D  25C8  3187   	fcall	_ADC_Initialize
  2968                           
  2969                           ;main.c: 89: TMR0_Initialize();
  2970  07A6  318E  2619  3187   	fcall	_TMR0_Initialize
  2971                           
  2972                           ;main.c: 92: (INTCONbits.GIE = 1);
  2973  07A9  178B               	bsf	11,7	;volatile
  2974                           
  2975                           ;main.c: 93: (INTCONbits.PEIE = 1);
  2976  07AA  170B               	bsf	11,6	;volatile
  2977                           
  2978                           ;main.c: 96: EUSART_Initialize();
  2979  07AB  318E  267D  3187   	fcall	_EUSART_Initialize
  2980                           
  2981                           ;main.c: 99: I2C1_Initialize();
  2982  07AE  318F  2744  3187   	fcall	_I2C1_Initialize
  2983                           
  2984                           ;main.c: 102: PROTOCOL_Loop();
  2985  07B1  3182  2246         	fcall	_PROTOCOL_Loop
  2986  07B3  3180  2830         	ljmp	start
  2987  07B5                     __end_of_main:	
  2988                           
  2989                           	psect	text1
  2990  0D9F                     __ptext1:	
  2991 ;; *************** function _WDT_Initialize *****************
  2992 ;; Defined at:
  2993 ;;		line 89 in file "mcc_generated_files/mcc.c"
  2994 ;; Parameters:    Size  Location     Type
  2995 ;;		None
  2996 ;; Auto vars:     Size  Location     Type
  2997 ;;		None
  2998 ;; Return value:  Size  Location     Type
  2999 ;;                  1    wreg      void 
  3000 ;; Registers used:
  3001 ;;		wreg
  3002 ;; Tracked objects:
  3003 ;;		On entry : 0/0
  3004 ;;		On exit  : 0/0
  3005 ;;		Unchanged: 0/0
  3006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3008 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3010 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3011 ;;Total ram usage:        0 bytes
  3012 ;; Hardware stack levels used:    1
  3013 ;; Hardware stack levels required when called:    5
  3014 ;; This function calls:
  3015 ;;		Nothing
  3016 ;; This function is called by:
  3017 ;;		_main
  3018 ;;		_SYSTEM_Initialize
  3019 ;; This function uses a non-reentrant model
  3020 ;;
  3021                           
  3022                           
  3023                           ;psect for function _WDT_Initialize
  3024  0D9F                     _WDT_Initialize:	
  3025                           
  3026                           ;mcc.c: 92: WDTCON = 0x16;
  3027                           
  3028                           ;incstack = 0
  3029                           ; Regs used in _WDT_Initialize: [wreg]
  3030  0D9F  3016               	movlw	22
  3031  0DA0  0021               	movlb	1	; select bank1
  3032  0DA1  0097               	movwf	23	;volatile
  3033  0DA2  0008               	return
  3034  0DA3                     __end_of_WDT_Initialize:	
  3035                           
  3036                           	psect	text2
  3037  0E19                     __ptext2:	
  3038 ;; *************** function _TMR0_Initialize *****************
  3039 ;; Defined at:
  3040 ;;		line 62 in file "mcc_generated_files/tmr0.c"
  3041 ;; Parameters:    Size  Location     Type
  3042 ;;		None
  3043 ;; Auto vars:     Size  Location     Type
  3044 ;;		None
  3045 ;; Return value:  Size  Location     Type
  3046 ;;                  1    wreg      void 
  3047 ;; Registers used:
  3048 ;;		wreg, status,2
  3049 ;; Tracked objects:
  3050 ;;		On entry : 0/0
  3051 ;;		On exit  : 0/0
  3052 ;;		Unchanged: 0/0
  3053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3055 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3056 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3057 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3058 ;;Total ram usage:        1 bytes
  3059 ;; Hardware stack levels used:    1
  3060 ;; Hardware stack levels required when called:    5
  3061 ;; This function calls:
  3062 ;;		Nothing
  3063 ;; This function is called by:
  3064 ;;		_main
  3065 ;;		_SYSTEM_Initialize
  3066 ;; This function uses a non-reentrant model
  3067 ;;
  3068                           
  3069                           
  3070                           ;psect for function _TMR0_Initialize
  3071  0E19                     _TMR0_Initialize:	
  3072                           
  3073                           ;tmr0.c: 67: OPTION_REG = (OPTION_REG & 0xC0) | 0xD4 & 0x3F;
  3074                           
  3075                           ;incstack = 0
  3076                           ; Regs used in _TMR0_Initialize: [wreg+status,2]
  3077  0E19  0021               	movlb	1	; select bank1
  3078  0E1A  0815               	movf	21,w	;volatile
  3079  0E1B  39C0               	andlw	192
  3080  0E1C  3814               	iorlw	20
  3081  0E1D  0095               	movwf	21	;volatile
  3082                           
  3083                           ;tmr0.c: 70: TMR0 = 0x06;
  3084  0E1E  3006               	movlw	6
  3085  0E1F  0020               	movlb	0	; select bank0
  3086  0E20  0095               	movwf	21	;volatile
  3087                           
  3088                           ;tmr0.c: 73: timer0ReloadVal= 6;
  3089  0E21  3006               	movlw	6
  3090  0E22  00A0               	movwf	??_TMR0_Initialize
  3091  0E23  0820               	movf	??_TMR0_Initialize,w
  3092  0E24  00DF               	movwf	_timer0ReloadVal	;volatile
  3093                           
  3094                           ;tmr0.c: 76: INTCONbits.TMR0IF = 0;
  3095  0E25  110B               	bcf	11,2	;volatile
  3096  0E26  0008               	return
  3097  0E27                     __end_of_TMR0_Initialize:	
  3098                           
  3099                           	psect	text3
  3100  0DEB                     __ptext3:	
  3101 ;; *************** function _PROTOCOL_Set_Func *****************
  3102 ;; Defined at:
  3103 ;;		line 76 in file "protocol.c"
  3104 ;; Parameters:    Size  Location     Type
  3105 ;;  loop_func       2    0[BANK0 ] PTR void 
  3106 ;;		 -> loop_func(1), 
  3107 ;; Auto vars:     Size  Location     Type
  3108 ;;		None
  3109 ;; Return value:  Size  Location     Type
  3110 ;;                  1    wreg      void 
  3111 ;; Registers used:
  3112 ;;		wreg
  3113 ;; Tracked objects:
  3114 ;;		On entry : 0/0
  3115 ;;		On exit  : 0/0
  3116 ;;		Unchanged: 0/0
  3117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3118 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3119 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3120 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3121 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3122 ;;Total ram usage:        2 bytes
  3123 ;; Hardware stack levels used:    1
  3124 ;; Hardware stack levels required when called:    5
  3125 ;; This function calls:
  3126 ;;		Nothing
  3127 ;; This function is called by:
  3128 ;;		_main
  3129 ;; This function uses a non-reentrant model
  3130 ;;
  3131                           
  3132                           
  3133                           ;psect for function _PROTOCOL_Set_Func
  3134  0DEB                     _PROTOCOL_Set_Func:	
  3135                           
  3136                           ;protocol.c: 77: PROTOCOL_Loop_Func = loop_func;
  3137                           
  3138                           ;incstack = 0
  3139                           ; Regs used in _PROTOCOL_Set_Func: [wreg]
  3140  0DEB  0020               	movlb	0	; select bank0
  3141  0DEC  0821               	movf	PROTOCOL_Set_Func@loop_func+1,w
  3142  0DED  0021               	movlb	1	; select bank1
  3143  0DEE  00B5               	movwf	(_PROTOCOL_Loop_Func+1)^(0+128)
  3144  0DEF  0020               	movlb	0	; select bank0
  3145  0DF0  0820               	movf	PROTOCOL_Set_Func@loop_func,w
  3146  0DF1  0021               	movlb	1	; select bank1
  3147  0DF2  00B4               	movwf	_PROTOCOL_Loop_Func^(0+128)
  3148  0DF3  0008               	return
  3149  0DF4                     __end_of_PROTOCOL_Set_Func:	
  3150                           
  3151                           	psect	text4
  3152  0246                     __ptext4:	
  3153 ;; *************** function _PROTOCOL_Loop *****************
  3154 ;; Defined at:
  3155 ;;		line 131 in file "protocol.c"
  3156 ;; Parameters:    Size  Location     Type
  3157 ;;		None
  3158 ;; Auto vars:     Size  Location     Type
  3159 ;;  device_addre    1   46[BANK0 ] unsigned char 
  3160 ;;  c               1   45[BANK0 ] unsigned char 
  3161 ;; Return value:  Size  Location     Type
  3162 ;;                  1    wreg      void 
  3163 ;; Registers used:
  3164 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3165 ;; Tracked objects:
  3166 ;;		On entry : 0/0
  3167 ;;		On exit  : 0/0
  3168 ;;		Unchanged: 0/0
  3169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3171 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3172 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3173 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3174 ;;Total ram usage:        4 bytes
  3175 ;; Hardware stack levels used:    1
  3176 ;; Hardware stack levels required when called:   11
  3177 ;; This function calls:
  3178 ;;		Absolute function
  3179 ;;		_EUSART_Read
  3180 ;;		_PROTOCOL_EXT
  3181 ;;		_PROTOCOL_Read_Device_Address
  3182 ;;		_PROTOCOL_SAV
  3183 ;;		_PROTOCOL_SET
  3184 ;;		_PROTOCOL_STA
  3185 ;;		_PROTOCOL_STP
  3186 ;;		_PROTOCOL_Write_Device_Address
  3187 ;;		_TMR0_HasOverflowOccured
  3188 ;;		_atoi
  3189 ;;		_inv_handler
  3190 ;;		_loop_func
  3191 ;;		_printf
  3192 ;;		_strncmp
  3193 ;; This function is called by:
  3194 ;;		_main
  3195 ;; This function uses a non-reentrant model
  3196 ;;
  3197                           
  3198                           
  3199                           ;psect for function _PROTOCOL_Loop
  3200  0246                     _PROTOCOL_Loop:	
  3201  0246                     l649:	
  3202                           ;incstack = 0
  3203                           ; Regs used in _PROTOCOL_Loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3204                           ;protocol.c: 132: uint8_t device_address;
  3205                           ;protocol.c: 133: uint8_t c;
  3206                           ;protocol.c: 134: while (1) {
  3207                           
  3208                           
  3209                           ;protocol.c: 135: tmr_overflow = TMR0_HasOverflowOccured();
  3210  0246  318D  259B  3182   	fcall	_TMR0_HasOverflowOccured
  3211  0249  0020               	movlb	0	; select bank0
  3212  024A  00CB               	movwf	??_PROTOCOL_Loop
  3213  024B  084B               	movf	??_PROTOCOL_Loop,w
  3214  024C  00D5               	movwf	_tmr_overflow
  3215                           
  3216                           ;protocol.c: 136: if (tmr_overflow) {
  3217  024D  0855               	movf	_tmr_overflow,w
  3218  024E  1903               	btfsc	3,2
  3219  024F  2A6C               	goto	l3190
  3220                           
  3221                           ;protocol.c: 137: TMR0IF = 0;
  3222  0250  110B               	bcf	11,2	;volatile
  3223                           
  3224                           ;protocol.c: 138: if (PROTOCOL_Inv_Handler && (++tmr_cnt >= value)) {
  3225  0251  0850               	movf	_PROTOCOL_Inv_Handler,w
  3226  0252  0451               	iorwf	_PROTOCOL_Inv_Handler+1,w
  3227  0253  1903               	btfsc	3,2
  3228  0254  2A6C               	goto	l3190
  3229  0255  3001               	movlw	1
  3230  0256  00CB               	movwf	??_PROTOCOL_Loop
  3231  0257  084B               	movf	??_PROTOCOL_Loop,w
  3232  0258  07D6               	addwf	_tmr_cnt,f
  3233  0259  085B               	movf	_value,w
  3234  025A  0256               	subwf	_tmr_cnt,w
  3235  025B  1C03               	skipc
  3236  025C  2A6C               	goto	l3190
  3237                           
  3238                           ;protocol.c: 139: tmr_cnt = 0;
  3239  025D  01D6               	clrf	_tmr_cnt
  3240                           
  3241                           ;protocol.c: 140: if (++sec_cnt >= tmr_scaler) {
  3242  025E  3001               	movlw	1
  3243  025F  00CB               	movwf	??_PROTOCOL_Loop
  3244  0260  084B               	movf	??_PROTOCOL_Loop,w
  3245  0261  07D7               	addwf	_sec_cnt,f
  3246  0262  086C               	movf	_tmr_scaler,w
  3247  0263  0257               	subwf	_sec_cnt,w
  3248  0264  1C03               	skipc
  3249  0265  2A6C               	goto	l3190
  3250                           
  3251                           ;protocol.c: 141: if (running) invoked = 1;
  3252  0266  0859               	movf	_running,w
  3253  0267  1903               	btfsc	3,2
  3254  0268  2A6B               	goto	l3188
  3255  0269  01D8               	clrf	_invoked
  3256  026A  0AD8               	incf	_invoked,f
  3257  026B                     l3188:	
  3258                           
  3259                           ;protocol.c: 142: sec_cnt = 0;
  3260  026B  01D7               	clrf	_sec_cnt
  3261  026C                     l3190:	
  3262                           
  3263                           ;protocol.c: 143: }
  3264                           ;protocol.c: 144: }
  3265                           ;protocol.c: 145: }
  3266                           ;protocol.c: 146: if (invoked && PROTOCOL_Inv_Handler) {
  3267  026C  0858               	movf	_invoked,w
  3268  026D  1903               	btfsc	3,2
  3269  026E  2A7A               	goto	l3198
  3270  026F  0850               	movf	_PROTOCOL_Inv_Handler,w
  3271  0270  0451               	iorwf	_PROTOCOL_Inv_Handler+1,w
  3272  0271  1903               	btfsc	3,2
  3273  0272  2A7A               	goto	l3198
  3274                           
  3275                           ;protocol.c: 147: PROTOCOL_Inv_Handler();
  3276  0273  0851               	movf	_PROTOCOL_Inv_Handler+1,w
  3277  0274  008A               	movwf	10
  3278  0275  0850               	movf	_PROTOCOL_Inv_Handler,w
  3279  0276  000A               	callw
  3280  0277  3182               	pagesel	$
  3281                           
  3282                           ;protocol.c: 148: invoked = 0;
  3283  0278  0020               	movlb	0	; select bank0
  3284  0279  01D8               	clrf	_invoked
  3285  027A                     l3198:	
  3286                           
  3287                           ;protocol.c: 149: }
  3288                           ;protocol.c: 150: if (PROTOCOL_Loop_Func) PROTOCOL_Loop_Func();
  3289  027A  0021               	movlb	1	; select bank1
  3290  027B  0834               	movf	_PROTOCOL_Loop_Func^(0+128),w
  3291  027C  0435               	iorwf	(_PROTOCOL_Loop_Func+1)^(0+128),w
  3292  027D  1903               	btfsc	3,2
  3293  027E  2A84               	goto	l3202
  3294  027F  0835               	movf	(_PROTOCOL_Loop_Func+1)^(0+128),w
  3295  0280  008A               	movwf	10
  3296  0281  0834               	movf	_PROTOCOL_Loop_Func^(0+128),w
  3297  0282  000A               	callw
  3298  0283  3182               	pagesel	$
  3299  0284                     l3202:	
  3300                           
  3301                           ;protocol.c: 151: if ((eusartRxCount)) {
  3302  0284  0020               	movlb	0	; select bank0
  3303  0285  0860               	movf	_eusartRxCount,w	;volatile
  3304  0286  1903               	btfsc	3,2
  3305  0287  2A46               	goto	l649
  3306                           
  3307                           ;protocol.c: 152: c = EUSART_Read();
  3308  0288  318F  2725  3182   	fcall	_EUSART_Read
  3309  028B  0020               	movlb	0	; select bank0
  3310  028C  00CB               	movwf	??_PROTOCOL_Loop
  3311  028D  084B               	movf	??_PROTOCOL_Loop,w
  3312  028E  00CD               	movwf	PROTOCOL_Loop@c
  3313                           
  3314                           ;protocol.c: 153: buf[cnt++] = c;
  3315  028F  084D               	movf	PROTOCOL_Loop@c,w
  3316  0290  00CB               	movwf	??_PROTOCOL_Loop
  3317  0291  085C               	movf	_cnt,w
  3318  0292  3E20               	addlw	(low (_buf| (0+256)))& (0+255)
  3319  0293  0086               	movwf	6
  3320  0294  3001               	movlw	1	; select bank2/3
  3321  0295  0087               	movwf	7
  3322  0296  084B               	movf	??_PROTOCOL_Loop,w
  3323  0297  0081               	movwf	1
  3324  0298  3001               	movlw	1
  3325  0299  00CB               	movwf	??_PROTOCOL_Loop
  3326  029A  084B               	movf	??_PROTOCOL_Loop,w
  3327  029B  07DC               	addwf	_cnt,f
  3328                           
  3329                           ;protocol.c: 154: if (c == '\n') {
  3330  029C  300A               	movlw	10
  3331  029D  064D               	xorwf	PROTOCOL_Loop@c,w
  3332  029E  1D03               	btfss	3,2
  3333  029F  2A46               	goto	l649
  3334                           
  3335                           ;protocol.c: 155: buf[--cnt] = '\0';
  3336  02A0  3001               	movlw	1
  3337  02A1  02DC               	subwf	_cnt,f
  3338  02A2  085C               	movf	_cnt,w
  3339  02A3  3E20               	addlw	(low (_buf| (0+256)))& (0+255)
  3340  02A4  0086               	movwf	6
  3341  02A5  3001               	movlw	1	; select bank2/3
  3342  02A6  0087               	movwf	7
  3343  02A7  0181               	clrf	1
  3344                           
  3345                           ;protocol.c: 156: cnt = 0;
  3346  02A8  01DC               	clrf	_cnt
  3347                           
  3348                           ;protocol.c: 157: printf("#%s\n", buf);
  3349  02A9  305E               	movlw	low (STR_3| (0+32768))
  3350  02AA  00AE               	movwf	printf@f
  3351  02AB  3084               	movlw	high (STR_3| (0+32768))
  3352  02AC  00AF               	movwf	printf@f+1
  3353  02AD  3020               	movlw	low _buf
  3354  02AE  00B0               	movwf	low ((?_printf| 0+2))
  3355  02AF  3001               	movlw	high _buf
  3356  02B0  00B1               	movwf	(low ((?_printf| 0+2))+1)
  3357  02B1  3180  2071  3182   	fcall	_printf
  3358                           
  3359                           ;protocol.c: 158: if (BACKPLANE_SLAVE_ADDRESS != 0x01) {
  3360  02B4  0020               	movlb	0	; select bank0
  3361  02B5  036E               	decf	_BACKPLANE_SLAVE_ADDRESS,w
  3362  02B6  1903               	btfsc	3,2
  3363  02B7  2ABD               	goto	l3222
  3364                           
  3365                           ;protocol.c: 159: PROTOCOL_EXT(buf);
  3366  02B8  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3367  02B9  318D  2575  3182   	fcall	_PROTOCOL_EXT
  3368                           
  3369                           ;protocol.c: 160: } else if (!strncmp(("WHO"), (buf), 3)) {
  3370  02BC  2A46               	goto	l649
  3371  02BD                     l3222:	
  3372  02BD  307F               	movlw	low (STR_4| (0+32768))
  3373  02BE  0020               	movlb	0	; select bank0
  3374  02BF  00A0               	movwf	strncmp@s1
  3375  02C0  3084               	movlw	high (STR_4| (0+32768))
  3376  02C1  00A1               	movwf	strncmp@s1+1
  3377  02C2  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3378  02C3  00CB               	movwf	??_PROTOCOL_Loop
  3379  02C4  084B               	movf	??_PROTOCOL_Loop,w
  3380  02C5  00A2               	movwf	strncmp@s2
  3381  02C6  3003               	movlw	3
  3382  02C7  00A3               	movwf	strncmp@len
  3383  02C8  3000               	movlw	0
  3384  02C9  00A4               	movwf	strncmp@len+1
  3385  02CA  3187  2701  3182   	fcall	_strncmp
  3386  02CD  0020               	movlb	0	; select bank0
  3387  02CE  0820               	movf	?_strncmp,w
  3388  02CF  0421               	iorwf	?_strncmp+1,w
  3389  02D0  1D03               	btfss	3,2
  3390  02D1  2AE2               	goto	l3226
  3391                           
  3392                           ;protocol.c: 161: printf("$:WHO:%s\n", device_id_);
  3393  02D2  3010               	movlw	low (STR_5| (0+32768))
  3394  02D3  00AE               	movwf	printf@f
  3395  02D4  3084               	movlw	high (STR_5| (0+32768))
  3396  02D5  00AF               	movwf	printf@f+1
  3397  02D6  0021               	movlb	1	; select bank1
  3398  02D7  0856               	movf	(_device_id_+1)^(0+128),w
  3399  02D8  0020               	movlb	0	; select bank0
  3400  02D9  00B1               	movwf	(low ((?_printf| 0+2))+1)
  3401  02DA  0021               	movlb	1	; select bank1
  3402  02DB  0855               	movf	_device_id_^(0+128),w
  3403  02DC  0020               	movlb	0	; select bank0
  3404  02DD  00B0               	movwf	low ((?_printf| 0+2))
  3405  02DE  3180  2071  3182   	fcall	_printf
  3406                           
  3407                           ;protocol.c: 162: } else if (!strncmp(("SAV"), (buf), 3)) {
  3408  02E1  2A46               	goto	l649
  3409  02E2                     l3226:	
  3410  02E2  308F               	movlw	low (STR_6| (0+32768))
  3411  02E3  0020               	movlb	0	; select bank0
  3412  02E4  00A0               	movwf	strncmp@s1
  3413  02E5  3084               	movlw	high (STR_6| (0+32768))
  3414  02E6  00A1               	movwf	strncmp@s1+1
  3415  02E7  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3416  02E8  00CB               	movwf	??_PROTOCOL_Loop
  3417  02E9  084B               	movf	??_PROTOCOL_Loop,w
  3418  02EA  00A2               	movwf	strncmp@s2
  3419  02EB  3003               	movlw	3
  3420  02EC  00A3               	movwf	strncmp@len
  3421  02ED  3000               	movlw	0
  3422  02EE  00A4               	movwf	strncmp@len+1
  3423  02EF  3187  2701  3182   	fcall	_strncmp
  3424  02F2  0020               	movlb	0	; select bank0
  3425  02F3  0820               	movf	?_strncmp,w
  3426  02F4  0421               	iorwf	?_strncmp+1,w
  3427  02F5  1D03               	btfss	3,2
  3428  02F6  2AFB               	goto	l3230
  3429                           
  3430                           ;protocol.c: 163: PROTOCOL_SAV();
  3431  02F7  318D  25D9  3182   	fcall	_PROTOCOL_SAV
  3432                           
  3433                           ;protocol.c: 164: } else if (!strncmp(("STA"), (buf), 3)) {
  3434  02FA  2A46               	goto	l649
  3435  02FB                     l3230:	
  3436  02FB  3077               	movlw	low (STR_7| (0+32768))
  3437  02FC  0020               	movlb	0	; select bank0
  3438  02FD  00A0               	movwf	strncmp@s1
  3439  02FE  3084               	movlw	high (STR_7| (0+32768))
  3440  02FF  00A1               	movwf	strncmp@s1+1
  3441  0300  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3442  0301  00CB               	movwf	??_PROTOCOL_Loop
  3443  0302  084B               	movf	??_PROTOCOL_Loop,w
  3444  0303  00A2               	movwf	strncmp@s2
  3445  0304  3003               	movlw	3
  3446  0305  00A3               	movwf	strncmp@len
  3447  0306  3000               	movlw	0
  3448  0307  00A4               	movwf	strncmp@len+1
  3449  0308  3187  2701  3182   	fcall	_strncmp
  3450  030B  0020               	movlb	0	; select bank0
  3451  030C  0820               	movf	?_strncmp,w
  3452  030D  0421               	iorwf	?_strncmp+1,w
  3453  030E  1D03               	btfss	3,2
  3454  030F  2B14               	goto	l3234
  3455                           
  3456                           ;protocol.c: 165: PROTOCOL_STA();
  3457  0310  318D  2597  3182   	fcall	_PROTOCOL_STA
  3458                           
  3459                           ;protocol.c: 166: } else if (!strncmp(("STP"), (buf), 3)) {
  3460  0313  2A46               	goto	l649
  3461  0314                     l3234:	
  3462  0314  3083               	movlw	low (STR_8| (0+32768))
  3463  0315  0020               	movlb	0	; select bank0
  3464  0316  00A0               	movwf	strncmp@s1
  3465  0317  3084               	movlw	high (STR_8| (0+32768))
  3466  0318  00A1               	movwf	strncmp@s1+1
  3467  0319  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3468  031A  00CB               	movwf	??_PROTOCOL_Loop
  3469  031B  084B               	movf	??_PROTOCOL_Loop,w
  3470  031C  00A2               	movwf	strncmp@s2
  3471  031D  3003               	movlw	3
  3472  031E  00A3               	movwf	strncmp@len
  3473  031F  3000               	movlw	0
  3474  0320  00A4               	movwf	strncmp@len+1
  3475  0321  3187  2701  3182   	fcall	_strncmp
  3476  0324  0020               	movlb	0	; select bank0
  3477  0325  0820               	movf	?_strncmp,w
  3478  0326  0421               	iorwf	?_strncmp+1,w
  3479  0327  1D03               	btfss	3,2
  3480  0328  2B39               	goto	l3240
  3481                           
  3482                           ;protocol.c: 167: PROTOCOL_STP();
  3483  0329  318D  2585  3182   	fcall	_PROTOCOL_STP
  3484                           
  3485                           ;protocol.c: 168: printf("*:STP:%s\n", "ACK");
  3486  032C  301A               	movlw	low (STR_9| (0+32768))
  3487  032D  0020               	movlb	0	; select bank0
  3488  032E  00AE               	movwf	printf@f
  3489  032F  3084               	movlw	high (STR_9| (0+32768))
  3490  0330  00AF               	movwf	printf@f+1
  3491  0331  307B               	movlw	low (STR_10| (0+32768))
  3492  0332  00B0               	movwf	low ((?_printf| 0+2))
  3493  0333  3084               	movlw	high (STR_10| (0+32768))
  3494  0334  00B1               	movwf	(low ((?_printf| 0+2))+1)
  3495  0335  3180  2071  3182   	fcall	_printf
  3496                           
  3497                           ;protocol.c: 169: } else if (!strncmp(("SET"), (buf), 3)) {
  3498  0338  2A46               	goto	l649
  3499  0339                     l3240:	
  3500  0339  308B               	movlw	low (STR_11| (0+32768))
  3501  033A  0020               	movlb	0	; select bank0
  3502  033B  00A0               	movwf	strncmp@s1
  3503  033C  3084               	movlw	high (STR_11| (0+32768))
  3504  033D  00A1               	movwf	strncmp@s1+1
  3505  033E  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3506  033F  00CB               	movwf	??_PROTOCOL_Loop
  3507  0340  084B               	movf	??_PROTOCOL_Loop,w
  3508  0341  00A2               	movwf	strncmp@s2
  3509  0342  3003               	movlw	3
  3510  0343  00A3               	movwf	strncmp@len
  3511  0344  3000               	movlw	0
  3512  0345  00A4               	movwf	strncmp@len+1
  3513  0346  3187  2701  3182   	fcall	_strncmp
  3514  0349  0020               	movlb	0	; select bank0
  3515  034A  0820               	movf	?_strncmp,w
  3516  034B  0421               	iorwf	?_strncmp+1,w
  3517  034C  1D03               	btfss	3,2
  3518  034D  2B58               	goto	l3244
  3519                           
  3520                           ;protocol.c: 170: PROTOCOL_SET(atoi(&buf[4]));
  3521  034E  3024               	movlw	(low ((_buf| (0+256)+4)))& (0+255)
  3522  034F  3186  2648  3182   	fcall	_atoi
  3523  0352  0020               	movlb	0	; select bank0
  3524  0353  0826               	movf	?_atoi,w
  3525  0354  318D  25BA  3182   	fcall	_PROTOCOL_SET
  3526                           
  3527                           ;protocol.c: 171: } else if (!strncmp(("GET"), (buf), 3)) {
  3528  0357  2A46               	goto	l649
  3529  0358                     l3244:	
  3530  0358  3087               	movlw	low (STR_12| (0+32768))
  3531  0359  0020               	movlb	0	; select bank0
  3532  035A  00A0               	movwf	strncmp@s1
  3533  035B  3084               	movlw	high (STR_12| (0+32768))
  3534  035C  00A1               	movwf	strncmp@s1+1
  3535  035D  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3536  035E  00CB               	movwf	??_PROTOCOL_Loop
  3537  035F  084B               	movf	??_PROTOCOL_Loop,w
  3538  0360  00A2               	movwf	strncmp@s2
  3539  0361  3003               	movlw	3
  3540  0362  00A3               	movwf	strncmp@len
  3541  0363  3000               	movlw	0
  3542  0364  00A4               	movwf	strncmp@len+1
  3543  0365  3187  2701  3182   	fcall	_strncmp
  3544  0368  0020               	movlb	0	; select bank0
  3545  0369  0820               	movf	?_strncmp,w
  3546  036A  0421               	iorwf	?_strncmp+1,w
  3547  036B  1D03               	btfss	3,2
  3548  036C  2B7C               	goto	l3248
  3549                           
  3550                           ;protocol.c: 172: printf("$:GET:%d\n", value);
  3551  036D  30FC               	movlw	low (STR_13| (0+32768))
  3552  036E  00AE               	movwf	printf@f
  3553  036F  3083               	movlw	high (STR_13| (0+32768))
  3554  0370  00AF               	movwf	printf@f+1
  3555  0371  085B               	movf	_value,w
  3556  0372  00CB               	movwf	??_PROTOCOL_Loop
  3557  0373  01CC               	clrf	??_PROTOCOL_Loop+1
  3558  0374  084B               	movf	??_PROTOCOL_Loop,w
  3559  0375  00B0               	movwf	?_printf+2
  3560  0376  084C               	movf	??_PROTOCOL_Loop+1,w
  3561  0377  00B1               	movwf	?_printf+3
  3562  0378  3180  2071  3182   	fcall	_printf
  3563                           
  3564                           ;protocol.c: 173: } else if (!strncmp(("WDA"), (buf), 3)) {
  3565  037B  2A46               	goto	l649
  3566  037C                     l3248:	
  3567  037C  3073               	movlw	low (STR_14| (0+32768))
  3568  037D  0020               	movlb	0	; select bank0
  3569  037E  00A0               	movwf	strncmp@s1
  3570  037F  3084               	movlw	high (STR_14| (0+32768))
  3571  0380  00A1               	movwf	strncmp@s1+1
  3572  0381  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3573  0382  00CB               	movwf	??_PROTOCOL_Loop
  3574  0383  084B               	movf	??_PROTOCOL_Loop,w
  3575  0384  00A2               	movwf	strncmp@s2
  3576  0385  3003               	movlw	3
  3577  0386  00A3               	movwf	strncmp@len
  3578  0387  3000               	movlw	0
  3579  0388  00A4               	movwf	strncmp@len+1
  3580  0389  3187  2701  3182   	fcall	_strncmp
  3581  038C  0020               	movlb	0	; select bank0
  3582  038D  0820               	movf	?_strncmp,w
  3583  038E  0421               	iorwf	?_strncmp+1,w
  3584  038F  1D03               	btfss	3,2
  3585  0390  2B9F               	goto	l3254
  3586                           
  3587                           ;protocol.c: 174: device_address = atoi(&buf[4]);
  3588  0391  3024               	movlw	(low ((_buf| (0+256)+4)))& (0+255)
  3589  0392  3186  2648  3182   	fcall	_atoi
  3590  0395  0020               	movlb	0	; select bank0
  3591  0396  0826               	movf	?_atoi,w
  3592  0397  00CB               	movwf	??_PROTOCOL_Loop
  3593  0398  084B               	movf	??_PROTOCOL_Loop,w
  3594  0399  00CE               	movwf	PROTOCOL_Loop@device_address
  3595                           
  3596                           ;protocol.c: 175: PROTOCOL_Write_Device_Address(device_address);
  3597  039A  084E               	movf	PROTOCOL_Loop@device_address,w
  3598  039B  318E  2627  3182   	fcall	_PROTOCOL_Write_Device_Address
  3599                           
  3600                           ;protocol.c: 176: } else if (!strncmp(("RDA"), (buf), 3)) {
  3601  039E  2A46               	goto	l649
  3602  039F                     l3254:	
  3603  039F  306F               	movlw	low (STR_15| (0+32768))
  3604  03A0  0020               	movlb	0	; select bank0
  3605  03A1  00A0               	movwf	strncmp@s1
  3606  03A2  3084               	movlw	high (STR_15| (0+32768))
  3607  03A3  00A1               	movwf	strncmp@s1+1
  3608  03A4  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3609  03A5  00CB               	movwf	??_PROTOCOL_Loop
  3610  03A6  084B               	movf	??_PROTOCOL_Loop,w
  3611  03A7  00A2               	movwf	strncmp@s2
  3612  03A8  3003               	movlw	3
  3613  03A9  00A3               	movwf	strncmp@len
  3614  03AA  3000               	movlw	0
  3615  03AB  00A4               	movwf	strncmp@len+1
  3616  03AC  3187  2701  3182   	fcall	_strncmp
  3617  03AF  0020               	movlb	0	; select bank0
  3618  03B0  0820               	movf	?_strncmp,w
  3619  03B1  0421               	iorwf	?_strncmp+1,w
  3620  03B2  1D03               	btfss	3,2
  3621  03B3  2BCA               	goto	l3260
  3622                           
  3623                           ;protocol.c: 177: device_address = PROTOCOL_Read_Device_Address();
  3624  03B4  318D  2582  3182   	fcall	_PROTOCOL_Read_Device_Address
  3625  03B7  0020               	movlb	0	; select bank0
  3626  03B8  00CB               	movwf	??_PROTOCOL_Loop
  3627  03B9  084B               	movf	??_PROTOCOL_Loop,w
  3628  03BA  00CE               	movwf	PROTOCOL_Loop@device_address
  3629                           
  3630                           ;protocol.c: 178: printf("$:RDA:%d\n", device_address);
  3631  03BB  30F2               	movlw	low (STR_16| (0+32768))
  3632  03BC  00AE               	movwf	printf@f
  3633  03BD  3083               	movlw	high (STR_16| (0+32768))
  3634  03BE  00AF               	movwf	printf@f+1
  3635  03BF  084E               	movf	PROTOCOL_Loop@device_address,w
  3636  03C0  00CB               	movwf	??_PROTOCOL_Loop
  3637  03C1  01CC               	clrf	??_PROTOCOL_Loop+1
  3638  03C2  084B               	movf	??_PROTOCOL_Loop,w
  3639  03C3  00B0               	movwf	?_printf+2
  3640  03C4  084C               	movf	??_PROTOCOL_Loop+1,w
  3641  03C5  00B1               	movwf	?_printf+3
  3642  03C6  3180  2071  3182   	fcall	_printf
  3643                           
  3644                           ;protocol.c: 179: } else {
  3645  03C9  2A46               	goto	l649
  3646  03CA                     l3260:	
  3647                           
  3648                           ;protocol.c: 180: PROTOCOL_EXT(buf);
  3649  03CA  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3650  03CB  318D  2575  3182   	fcall	_PROTOCOL_EXT
  3651  03CE  2A46               	goto	l649
  3652  03CF                     __end_of_PROTOCOL_Loop:	
  3653                           
  3654                           	psect	text5
  3655  0701                     __ptext5:	
  3656 ;; *************** function _strncmp *****************
  3657 ;; Defined at:
  3658 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strncmp.c"
  3659 ;; Parameters:    Size  Location     Type
  3660 ;;  s1              2    0[BANK0 ] PTR const unsigned char 
  3661 ;;		 -> STR_15(4), STR_14(4), STR_12(4), STR_11(4), 
  3662 ;;		 -> STR_8(4), STR_7(4), STR_6(4), STR_4(4), 
  3663 ;;  s2              1    2[BANK0 ] PTR const unsigned char 
  3664 ;;		 -> buf(48), 
  3665 ;;  len             2    3[BANK0 ] unsigned int 
  3666 ;; Auto vars:     Size  Location     Type
  3667 ;;		None
  3668 ;; Return value:  Size  Location     Type
  3669 ;;                  2    0[BANK0 ] int 
  3670 ;; Registers used:
  3671 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  3672 ;; Tracked objects:
  3673 ;;		On entry : 0/0
  3674 ;;		On exit  : 0/0
  3675 ;;		Unchanged: 0/0
  3676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3677 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3678 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3679 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3680 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3681 ;;Total ram usage:        7 bytes
  3682 ;; Hardware stack levels used:    1
  3683 ;; Hardware stack levels required when called:    5
  3684 ;; This function calls:
  3685 ;;		Nothing
  3686 ;; This function is called by:
  3687 ;;		_PROTOCOL_Loop
  3688 ;; This function uses a non-reentrant model
  3689 ;;
  3690                           
  3691                           
  3692                           ;psect for function _strncmp
  3693  0701                     _strncmp:	
  3694  0701                     l2992:	
  3695                           ;incstack = 0
  3696                           ; Regs used in _strncmp: [wreg-fsr1h+status,2+status,0+pclath]
  3697                           
  3698  0701  3001               	movlw	1
  3699  0702  0020               	movlb	0	; select bank0
  3700  0703  02A3               	subwf	strncmp@len,f
  3701  0704  3000               	movlw	0
  3702  0705  3BA4               	subwfb	strncmp@len+1,f
  3703  0706  0A23               	incf	strncmp@len,w
  3704  0707  1903               	btfsc	3,2
  3705  0708  0A24               	incf	strncmp@len+1,w
  3706  0709  1903               	btfsc	3,2
  3707  070A  2F40               	goto	l2994
  3708  070B  0020               	movlb	0	; select bank0
  3709  070C  0820               	movf	strncmp@s1,w
  3710  070D  0084               	movwf	4
  3711  070E  0821               	movf	strncmp@s1+1,w
  3712  070F  0085               	movwf	5
  3713  0710  0012               	moviw fsr0++
  3714  0711  1903               	btfsc	3,2
  3715  0712  2F1F               	goto	l2984
  3716  0713  0822               	movf	strncmp@s2,w
  3717  0714  0086               	movwf	6
  3718  0715  3001               	movlw	1	; select bank2/3
  3719  0716  0087               	movwf	7
  3720  0717  0820               	movf	strncmp@s1,w
  3721  0718  0084               	movwf	4
  3722  0719  0821               	movf	strncmp@s1+1,w
  3723  071A  0085               	movwf	5
  3724  071B  0800               	movf	0,w	;code access
  3725  071C  0601               	xorwf	1,w
  3726  071D  1903               	skipnz
  3727  071E  2F37               	goto	l2988
  3728  071F                     l2984:	
  3729  071F  0822               	movf	strncmp@s2,w
  3730  0720  0086               	movwf	6
  3731  0721  3001               	movlw	1	; select bank2/3
  3732  0722  0087               	movwf	7
  3733  0723  0801               	movf	1,w
  3734  0724  00A5               	movwf	??_strncmp
  3735  0725  01A6               	clrf	??_strncmp+1
  3736  0726  09A5               	comf	??_strncmp,f
  3737  0727  09A6               	comf	??_strncmp+1,f
  3738  0728  0AA5               	incf	??_strncmp,f
  3739  0729  1903               	skipnz
  3740  072A  0AA6               	incf	??_strncmp+1,f
  3741  072B  0820               	movf	strncmp@s1,w
  3742  072C  0084               	movwf	4
  3743  072D  0821               	movf	strncmp@s1+1,w
  3744  072E  0085               	movwf	5
  3745  072F  0800               	movf	0,w	;code access
  3746  0730  0725               	addwf	??_strncmp,w
  3747  0731  00A0               	movwf	?_strncmp
  3748  0732  0826               	movf	??_strncmp+1,w
  3749  0733  1803               	skipnc
  3750  0734  0A26               	incf	??_strncmp+1,w
  3751  0735  00A1               	movwf	?_strncmp+1
  3752  0736  0008               	return
  3753  0737                     l2988:	
  3754  0737  3001               	movlw	1
  3755  0738  07A0               	addwf	strncmp@s1,f
  3756  0739  3000               	movlw	0
  3757  073A  3DA1               	addwfc	strncmp@s1+1,f
  3758  073B  3001               	movlw	1
  3759  073C  00A5               	movwf	??_strncmp
  3760  073D  0825               	movf	??_strncmp,w
  3761  073E  07A2               	addwf	strncmp@s2,f
  3762  073F  2F01               	goto	l2992
  3763  0740                     l2994:	
  3764  0740  01A0               	clrf	?_strncmp
  3765  0741  01A1               	clrf	?_strncmp+1
  3766  0742  0008               	return
  3767  0743                     __end_of_strncmp:	
  3768                           
  3769                           	psect	text6
  3770  0557                     __ptext6:	
  3771 ;; *************** function _loop_func *****************
  3772 ;; Defined at:
  3773 ;;		line 24 in file "main.c"
  3774 ;; Parameters:    Size  Location     Type
  3775 ;;		None
  3776 ;; Auto vars:     Size  Location     Type
  3777 ;;  v               2    7[BANK0 ] unsigned int 
  3778 ;;  out             2    5[BANK0 ] unsigned int 
  3779 ;; Return value:  Size  Location     Type
  3780 ;;                  1    wreg      void 
  3781 ;; Registers used:
  3782 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3783 ;; Tracked objects:
  3784 ;;		On entry : 0/0
  3785 ;;		On exit  : 0/0
  3786 ;;		Unchanged: 0/0
  3787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3789 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3790 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3791 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3792 ;;Total ram usage:        5 bytes
  3793 ;; Hardware stack levels used:    1
  3794 ;; Hardware stack levels required when called:    6
  3795 ;; This function calls:
  3796 ;;		_ADC_GetConversionResult
  3797 ;;		_ADC_IsConversionDone
  3798 ;;		_ADC_SelectChannel
  3799 ;;		_ADC_StartConversion
  3800 ;;		_abs
  3801 ;; This function is called by:
  3802 ;;		_main
  3803 ;;		_PROTOCOL_Loop
  3804 ;; This function uses a non-reentrant model
  3805 ;;
  3806                           
  3807                           
  3808                           ;psect for function _loop_func
  3809  0557                     _loop_func:	
  3810                           
  3811                           ;main.c: 25: ADC_SelectChannel(channel_AN8);
  3812                           
  3813                           ;incstack = 0
  3814                           ; Regs used in _loop_func: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3815  0557  3008               	movlw	8
  3816  0558  318E  2654  3185   	fcall	_ADC_SelectChannel
  3817                           
  3818                           ;main.c: 26: ADC_StartConversion();
  3819  055B  318D  2588  3185   	fcall	_ADC_StartConversion
  3820  055E                     l2932:	
  3821                           ;main.c: 27: while(!ADC_IsConversionDone());
  3822                           
  3823  055E  318D  25C1  3185   	fcall	_ADC_IsConversionDone
  3824  0561  3A00               	xorlw	0
  3825  0562  1903               	skipnz
  3826  0563  2D5E               	goto	l2932
  3827                           
  3828                           ;main.c: 28: adc_result_t out = ADC_GetConversionResult();
  3829  0564  318D  25E2  3185   	fcall	_ADC_GetConversionResult
  3830  0567  0020               	movlb	0	; select bank0
  3831  0568  0821               	movf	?_ADC_GetConversionResult+1,w
  3832  0569  00A6               	movwf	loop_func@out+1
  3833  056A  0820               	movf	?_ADC_GetConversionResult,w
  3834  056B  00A5               	movwf	loop_func@out
  3835                           
  3836                           ;main.c: 29: uint16_t v = abs(out - 511);
  3837  056C  0825               	movf	loop_func@out,w
  3838  056D  3E01               	addlw	1
  3839  056E  00A0               	movwf	abs@a
  3840  056F  30FE               	movlw	254
  3841  0570  3D26               	addwfc	loop_func@out+1,w
  3842  0571  00A1               	movwf	abs@a+1
  3843  0572  318E  2645  3185   	fcall	_abs
  3844  0575  0020               	movlb	0	; select bank0
  3845  0576  0821               	movf	?_abs+1,w
  3846  0577  00A8               	movwf	loop_func@v+1
  3847  0578  0820               	movf	?_abs,w
  3848  0579  00A7               	movwf	loop_func@v
  3849                           
  3850                           ;main.c: 45: switch (on) {
  3851  057A  2DC6               	goto	l2970
  3852  057B                     l2938:	
  3853                           ;main.c: 46: case 0:
  3854                           
  3855                           
  3856                           ;main.c: 48: if (v >= 50) count++;
  3857  057B  3000               	movlw	0
  3858  057C  0228               	subwf	loop_func@v+1,w
  3859  057D  3032               	movlw	50
  3860  057E  1903               	skipnz
  3861  057F  0227               	subwf	loop_func@v,w
  3862  0580  1C03               	skipc
  3863  0581  2D88               	goto	l2942
  3864  0582  3001               	movlw	1
  3865  0583  0021               	movlb	1	; select bank1
  3866  0584  07B6               	addwf	_count^(0+128),f
  3867  0585  3000               	movlw	0
  3868  0586  3DB7               	addwfc	(_count+1)^(0+128),f
  3869  0587  2D8B               	goto	l2944
  3870  0588                     l2942:	
  3871                           
  3872                           ;main.c: 49: else count = 0;
  3873  0588  0021               	movlb	1	; select bank1
  3874  0589  01B6               	clrf	_count^(0+128)
  3875  058A  01B7               	clrf	(_count+1)^(0+128)
  3876  058B                     l2944:	
  3877                           
  3878                           ;main.c: 51: if (count >= 3) {
  3879  058B  3000               	movlw	0
  3880  058C  0237               	subwf	(_count+1)^(0+128),w
  3881  058D  3003               	movlw	3
  3882  058E  1903               	skipnz
  3883  058F  0236               	subwf	_count^(0+128),w
  3884  0590  1C03               	skipc
  3885  0591  2DCF               	goto	l2972
  3886                           
  3887                           ;main.c: 52: count = 0;
  3888  0592  01B6               	clrf	_count^(0+128)
  3889  0593  01B7               	clrf	(_count+1)^(0+128)
  3890                           
  3891                           ;main.c: 53: on = 1;
  3892  0594  0020               	movlb	0	; select bank0
  3893  0595  01DE               	clrf	_on
  3894  0596  0ADE               	incf	_on,f
  3895                           
  3896                           ;main.c: 54: }
  3897                           ;main.c: 56: break;
  3898  0597  2DCF               	goto	l2972
  3899  0598                     l2950:	
  3900                           ;main.c: 58: case 1:
  3901                           
  3902                           
  3903                           ;main.c: 60: if (v < 50) count++;
  3904  0598  3000               	movlw	0
  3905  0599  0228               	subwf	loop_func@v+1,w
  3906  059A  3032               	movlw	50
  3907  059B  1903               	skipnz
  3908  059C  0227               	subwf	loop_func@v,w
  3909  059D  1803               	skipnc
  3910  059E  2DA5               	goto	l2954
  3911  059F  3001               	movlw	1
  3912  05A0  0021               	movlb	1	; select bank1
  3913  05A1  07B6               	addwf	_count^(0+128),f
  3914  05A2  3000               	movlw	0
  3915  05A3  3DB7               	addwfc	(_count+1)^(0+128),f
  3916  05A4  2DA8               	goto	l2956
  3917  05A5                     l2954:	
  3918                           
  3919                           ;main.c: 61: else count = 0;
  3920  05A5  0021               	movlb	1	; select bank1
  3921  05A6  01B6               	clrf	_count^(0+128)
  3922  05A7  01B7               	clrf	(_count+1)^(0+128)
  3923  05A8                     l2956:	
  3924                           
  3925                           ;main.c: 63: if (count >= 3) {
  3926  05A8  3000               	movlw	0
  3927  05A9  0237               	subwf	(_count+1)^(0+128),w
  3928  05AA  3003               	movlw	3
  3929  05AB  1903               	skipnz
  3930  05AC  0236               	subwf	_count^(0+128),w
  3931  05AD  1C03               	skipc
  3932  05AE  2DCF               	goto	l2972
  3933                           
  3934                           ;main.c: 64: count = 0;
  3935  05AF  01B6               	clrf	_count^(0+128)
  3936  05B0  01B7               	clrf	(_count+1)^(0+128)
  3937                           
  3938                           ;main.c: 65: on = 0;
  3939  05B1  0020               	movlb	0	; select bank0
  3940  05B2  01DE               	clrf	_on
  3941                           
  3942                           ;main.c: 66: LATCbits.LATC7 = 0;
  3943  05B3  0022               	movlb	2	; select bank2
  3944  05B4  138E               	bcf	14,7	;volatile
  3945                           
  3946                           ;main.c: 67: _delay((unsigned long)((3)*(4000000/4000.0)));
  3947  05B5  3004               	movlw	4
  3948  05B6  0020               	movlb	0	; select bank0
  3949  05B7  00A4               	movwf	??_loop_func
  3950  05B8  30E4               	movlw	228
  3951  05B9                     u2347:	
  3952  05B9  0B89               	decfsz	9,f
  3953  05BA  2DB9               	goto	u2347
  3954  05BB  0BA4               	decfsz	??_loop_func,f
  3955  05BC  2DB9               	goto	u2347
  3956  05BD  0000               	nop
  3957                           
  3958                           ;main.c: 68: LATCbits.LATC7 = 1;
  3959  05BE  0022               	movlb	2	; select bank2
  3960  05BF  178E               	bsf	14,7	;volatile
  3961                           
  3962                           ;main.c: 69: sum++;
  3963  05C0  3001               	movlw	1
  3964  05C1  0021               	movlb	1	; select bank1
  3965  05C2  07B8               	addwf	_sum^(0+128),f
  3966  05C3  3000               	movlw	0
  3967  05C4  3DB9               	addwfc	(_sum+1)^(0+128),f
  3968                           
  3969                           ;main.c: 73: }
  3970                           
  3971                           ;main.c: 70: }
  3972                           ;main.c: 72: break;
  3973  05C5  2DCF               	goto	l2972
  3974  05C6                     l2970:	
  3975  05C6  0020               	movlb	0	; select bank0
  3976  05C7  085E               	movf	_on,w
  3977                           
  3978                           ; Switch size 1, requested type "space"
  3979                           ; Number of cases is 2, Range of values is 0 to 1
  3980                           ; switch strategies available:
  3981                           ; Name         Instructions Cycles
  3982                           ; simple_byte            7     4 (average)
  3983                           ; direct_byte           10     6 (fixed)
  3984                           ; jumptable            260     6 (fixed)
  3985                           ;	Chosen strategy is simple_byte
  3986  05C8  3A00               	xorlw	0	; case 0
  3987  05C9  1903               	skipnz
  3988  05CA  2D7B               	goto	l2938
  3989  05CB  3A01               	xorlw	1	; case 1
  3990  05CC  1903               	skipnz
  3991  05CD  2D98               	goto	l2950
  3992  05CE  2DCF               	goto	l2972
  3993  05CF                     l2972:	
  3994                           
  3995                           ;main.c: 75: _delay((unsigned long)((500)*(4000000/4000000.0)));
  3996  05CF  30A6               	movlw	166
  3997  05D0                     u2357:	
  3998  05D0  0B89               	decfsz	9,f
  3999  05D1  2DD0               	goto	u2357
  4000  05D2  3200               	nop2
  4001  05D3  0008               	return
  4002  05D4                     __end_of_loop_func:	
  4003                           
  4004                           	psect	text7
  4005  0E45                     __ptext7:	
  4006 ;; *************** function _abs *****************
  4007 ;; Defined at:
  4008 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\abs.c"
  4009 ;; Parameters:    Size  Location     Type
  4010 ;;  a               2    0[BANK0 ] int 
  4011 ;; Auto vars:     Size  Location     Type
  4012 ;;		None
  4013 ;; Return value:  Size  Location     Type
  4014 ;;                  2    0[BANK0 ] int 
  4015 ;; Registers used:
  4016 ;;		wreg, status,2, status,0
  4017 ;; Tracked objects:
  4018 ;;		On entry : 0/0
  4019 ;;		On exit  : 0/0
  4020 ;;		Unchanged: 0/0
  4021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4022 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4023 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4024 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4025 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4026 ;;Total ram usage:        4 bytes
  4027 ;; Hardware stack levels used:    1
  4028 ;; Hardware stack levels required when called:    5
  4029 ;; This function calls:
  4030 ;;		Nothing
  4031 ;; This function is called by:
  4032 ;;		_loop_func
  4033 ;; This function uses a non-reentrant model
  4034 ;;
  4035                           
  4036                           
  4037                           ;psect for function _abs
  4038  0E45                     _abs:	
  4039                           
  4040                           ;incstack = 0
  4041                           ; Regs used in _abs: [wreg+status,2+status,0]
  4042  0E45  0020               	movlb	0	; select bank0
  4043  0E46  1FA1               	btfss	abs@a+1,7
  4044  0E47  0008               	return
  4045  0E48  0920               	comf	abs@a,w
  4046  0E49  00A2               	movwf	??_abs
  4047  0E4A  0921               	comf	abs@a+1,w
  4048  0E4B  00A3               	movwf	??_abs+1
  4049  0E4C  0AA2               	incf	??_abs,f
  4050  0E4D  1903               	skipnz
  4051  0E4E  0AA3               	incf	??_abs+1,f
  4052  0E4F  0822               	movf	??_abs,w
  4053  0E50  00A0               	movwf	?_abs
  4054  0E51  0823               	movf	??_abs+1,w
  4055  0E52  00A1               	movwf	?_abs+1
  4056  0E53  0008               	return
  4057  0E54                     __end_of_abs:	
  4058                           
  4059                           	psect	text8
  4060  0D88                     __ptext8:	
  4061 ;; *************** function _ADC_StartConversion *****************
  4062 ;; Defined at:
  4063 ;;		line 90 in file "mcc_generated_files/adc.c"
  4064 ;; Parameters:    Size  Location     Type
  4065 ;;		None
  4066 ;; Auto vars:     Size  Location     Type
  4067 ;;		None
  4068 ;; Return value:  Size  Location     Type
  4069 ;;                  1    wreg      void 
  4070 ;; Registers used:
  4071 ;;		None
  4072 ;; Tracked objects:
  4073 ;;		On entry : 0/0
  4074 ;;		On exit  : 0/0
  4075 ;;		Unchanged: 0/0
  4076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4078 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4080 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4081 ;;Total ram usage:        0 bytes
  4082 ;; Hardware stack levels used:    1
  4083 ;; Hardware stack levels required when called:    5
  4084 ;; This function calls:
  4085 ;;		Nothing
  4086 ;; This function is called by:
  4087 ;;		_loop_func
  4088 ;; This function uses a non-reentrant model
  4089 ;;
  4090                           
  4091                           
  4092                           ;psect for function _ADC_StartConversion
  4093  0D88                     _ADC_StartConversion:	
  4094                           
  4095                           ;adc.c: 93: ADCON0bits.GO_nDONE = 1;
  4096                           
  4097                           ;incstack = 0
  4098                           ; Regs used in _ADC_StartConversion: []
  4099  0D88  0021               	movlb	1	; select bank1
  4100  0D89  149D               	bsf	29,1	;volatile
  4101  0D8A  0008               	return
  4102  0D8B                     __end_of_ADC_StartConversion:	
  4103                           
  4104                           	psect	text9
  4105  0E54                     __ptext9:	
  4106 ;; *************** function _ADC_SelectChannel *****************
  4107 ;; Defined at:
  4108 ;;		line 82 in file "mcc_generated_files/adc.c"
  4109 ;; Parameters:    Size  Location     Type
  4110 ;;  channel         1    wreg     enum E2975
  4111 ;; Auto vars:     Size  Location     Type
  4112 ;;  channel         1    1[BANK0 ] enum E2975
  4113 ;; Return value:  Size  Location     Type
  4114 ;;                  1    wreg      void 
  4115 ;; Registers used:
  4116 ;;		wreg, status,2, status,0
  4117 ;; Tracked objects:
  4118 ;;		On entry : 0/0
  4119 ;;		On exit  : 0/0
  4120 ;;		Unchanged: 0/0
  4121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4123 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4124 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4125 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4126 ;;Total ram usage:        2 bytes
  4127 ;; Hardware stack levels used:    1
  4128 ;; Hardware stack levels required when called:    5
  4129 ;; This function calls:
  4130 ;;		Nothing
  4131 ;; This function is called by:
  4132 ;;		_loop_func
  4133 ;; This function uses a non-reentrant model
  4134 ;;
  4135                           
  4136                           
  4137                           ;psect for function _ADC_SelectChannel
  4138  0E54                     _ADC_SelectChannel:	
  4139                           
  4140                           ;incstack = 0
  4141                           ; Regs used in _ADC_SelectChannel: [wreg+status,2+status,0]
  4142                           ;ADC_SelectChannel@channel stored from wreg
  4143  0E54  0020               	movlb	0	; select bank0
  4144  0E55  00A1               	movwf	ADC_SelectChannel@channel
  4145                           
  4146                           ;adc.c: 85: ADCON0bits.CHS = channel;
  4147  0E56  0821               	movf	ADC_SelectChannel@channel,w
  4148  0E57  00A0               	movwf	??_ADC_SelectChannel
  4149  0E58  0DA0               	rlf	??_ADC_SelectChannel,f
  4150  0E59  0DA0               	rlf	??_ADC_SelectChannel,f
  4151  0E5A  0021               	movlb	1	; select bank1
  4152  0E5B  081D               	movf	29,w	;volatile
  4153  0E5C  0020               	movlb	0	; select bank0
  4154  0E5D  0620               	xorwf	??_ADC_SelectChannel,w
  4155  0E5E  3983               	andlw	-125
  4156  0E5F  0620               	xorwf	??_ADC_SelectChannel,w
  4157  0E60  0021               	movlb	1	; select bank1
  4158  0E61  009D               	movwf	29	;volatile
  4159                           
  4160                           ;adc.c: 87: ADCON0bits.ADON = 1;
  4161  0E62  141D               	bsf	29,0	;volatile
  4162  0E63  0008               	return
  4163  0E64                     __end_of_ADC_SelectChannel:	
  4164                           
  4165                           	psect	text10
  4166  0DC1                     __ptext10:	
  4167 ;; *************** function _ADC_IsConversionDone *****************
  4168 ;; Defined at:
  4169 ;;		line 97 in file "mcc_generated_files/adc.c"
  4170 ;; Parameters:    Size  Location     Type
  4171 ;;		None
  4172 ;; Auto vars:     Size  Location     Type
  4173 ;;		None
  4174 ;; Return value:  Size  Location     Type
  4175 ;;                  1    wreg      unsigned char 
  4176 ;; Registers used:
  4177 ;;		wreg, status,0
  4178 ;; Tracked objects:
  4179 ;;		On entry : 0/0
  4180 ;;		On exit  : 0/0
  4181 ;;		Unchanged: 0/0
  4182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4183 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4184 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4185 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4186 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4187 ;;Total ram usage:        0 bytes
  4188 ;; Hardware stack levels used:    1
  4189 ;; Hardware stack levels required when called:    5
  4190 ;; This function calls:
  4191 ;;		Nothing
  4192 ;; This function is called by:
  4193 ;;		_loop_func
  4194 ;; This function uses a non-reentrant model
  4195 ;;
  4196                           
  4197                           
  4198                           ;psect for function _ADC_IsConversionDone
  4199  0DC1                     _ADC_IsConversionDone:	
  4200                           
  4201                           ;adc.c: 100: return (!ADCON0bits.GO_nDONE);
  4202                           
  4203                           ;incstack = 0
  4204                           ; Regs used in _ADC_IsConversionDone: [wreg+status,0]
  4205  0DC1  1003               	clrc
  4206  0DC2  0021               	movlb	1	; select bank1
  4207  0DC3  1C9D               	btfss	29,1	;volatile
  4208  0DC4  1403               	setc
  4209  0DC5  3000               	movlw	0
  4210  0DC6  3D09               	addwfc	9,w
  4211  0DC7  0008               	return
  4212  0DC8                     __end_of_ADC_IsConversionDone:	
  4213                           
  4214                           	psect	text11
  4215  0DE2                     __ptext11:	
  4216 ;; *************** function _ADC_GetConversionResult *****************
  4217 ;; Defined at:
  4218 ;;		line 103 in file "mcc_generated_files/adc.c"
  4219 ;; Parameters:    Size  Location     Type
  4220 ;;		None
  4221 ;; Auto vars:     Size  Location     Type
  4222 ;;		None
  4223 ;; Return value:  Size  Location     Type
  4224 ;;                  2    0[BANK0 ] unsigned int 
  4225 ;; Registers used:
  4226 ;;		wreg
  4227 ;; Tracked objects:
  4228 ;;		On entry : 0/0
  4229 ;;		On exit  : 0/0
  4230 ;;		Unchanged: 0/0
  4231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4232 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4233 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4235 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4236 ;;Total ram usage:        2 bytes
  4237 ;; Hardware stack levels used:    1
  4238 ;; Hardware stack levels required when called:    5
  4239 ;; This function calls:
  4240 ;;		Nothing
  4241 ;; This function is called by:
  4242 ;;		_loop_func
  4243 ;; This function uses a non-reentrant model
  4244 ;;
  4245                           
  4246                           
  4247                           ;psect for function _ADC_GetConversionResult
  4248  0DE2                     _ADC_GetConversionResult:	
  4249                           
  4250                           ;adc.c: 106: return ((ADRESH << 8) + ADRESL);
  4251                           
  4252                           ;incstack = 0
  4253                           ; Regs used in _ADC_GetConversionResult: [wreg]
  4254  0DE2  0021               	movlb	1	; select bank1
  4255  0DE3  081C               	movf	28,w	;volatile
  4256  0DE4  0020               	movlb	0	; select bank0
  4257  0DE5  00A1               	movwf	?_ADC_GetConversionResult+1
  4258  0DE6  0021               	movlb	1	; select bank1
  4259  0DE7  081B               	movf	27,w	;volatile
  4260  0DE8  0020               	movlb	0	; select bank0
  4261  0DE9  00A0               	movwf	?_ADC_GetConversionResult
  4262  0DEA  0008               	return
  4263  0DEB                     __end_of_ADC_GetConversionResult:	
  4264                           
  4265                           	psect	text12
  4266  0E0B                     __ptext12:	
  4267 ;; *************** function _inv_handler *****************
  4268 ;; Defined at:
  4269 ;;		line 19 in file "main.c"
  4270 ;; Parameters:    Size  Location     Type
  4271 ;;		None
  4272 ;; Auto vars:     Size  Location     Type
  4273 ;;		None
  4274 ;; Return value:  Size  Location     Type
  4275 ;;                  1    wreg      void 
  4276 ;; Registers used:
  4277 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4278 ;; Tracked objects:
  4279 ;;		On entry : 0/0
  4280 ;;		On exit  : 0/0
  4281 ;;		Unchanged: 0/0
  4282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4284 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4286 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4287 ;;Total ram usage:        0 bytes
  4288 ;; Hardware stack levels used:    1
  4289 ;; Hardware stack levels required when called:   10
  4290 ;; This function calls:
  4291 ;;		_PROTOCOL_Send_uint16_t
  4292 ;; This function is called by:
  4293 ;;		_main
  4294 ;;		_PROTOCOL_Loop
  4295 ;; This function uses a non-reentrant model
  4296 ;;
  4297                           
  4298                           
  4299                           ;psect for function _inv_handler
  4300  0E0B                     _inv_handler:	
  4301                           
  4302                           ;main.c: 20: PROTOCOL_Send_uint16_t(sum);
  4303                           
  4304                           ;incstack = 0
  4305                           ; Regs used in _inv_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4306  0E0B  0021               	movlb	1	; select bank1
  4307  0E0C  0839               	movf	(_sum+1)^(0+128),w
  4308  0E0D  0020               	movlb	0	; select bank0
  4309  0E0E  00C9               	movwf	PROTOCOL_Send_uint16_t@value+1
  4310  0E0F  0021               	movlb	1	; select bank1
  4311  0E10  0838               	movf	_sum^(0+128),w
  4312  0E11  0020               	movlb	0	; select bank0
  4313  0E12  00C8               	movwf	PROTOCOL_Send_uint16_t@value
  4314  0E13  3187  27EA         	fcall	_PROTOCOL_Send_uint16_t
  4315                           
  4316                           ;main.c: 21: sum = 0;
  4317  0E15  0021               	movlb	1	; select bank1
  4318  0E16  01B8               	clrf	_sum^(0+128)
  4319  0E17  01B9               	clrf	(_sum+1)^(0+128)
  4320  0E18  0008               	return
  4321  0E19                     __end_of_inv_handler:	
  4322                           
  4323                           	psect	text13
  4324  07EA                     __ptext13:	
  4325 ;; *************** function _PROTOCOL_Send_uint16_t *****************
  4326 ;; Defined at:
  4327 ;;		line 380 in file "protocol.c"
  4328 ;; Parameters:    Size  Location     Type
  4329 ;;  value           2   40[BANK0 ] unsigned int 
  4330 ;; Auto vars:     Size  Location     Type
  4331 ;;		None
  4332 ;; Return value:  Size  Location     Type
  4333 ;;                  1    wreg      void 
  4334 ;; Registers used:
  4335 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4336 ;; Tracked objects:
  4337 ;;		On entry : 0/0
  4338 ;;		On exit  : 0/0
  4339 ;;		Unchanged: 0/0
  4340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4341 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4342 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4343 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4344 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4345 ;;Total ram usage:        3 bytes
  4346 ;; Hardware stack levels used:    1
  4347 ;; Hardware stack levels required when called:    9
  4348 ;; This function calls:
  4349 ;;		_PROTOCOL_I2C_Send_uint16_t
  4350 ;; This function is called by:
  4351 ;;		_inv_handler
  4352 ;; This function uses a non-reentrant model
  4353 ;;
  4354                           
  4355                           
  4356                           ;psect for function _PROTOCOL_Send_uint16_t
  4357  07EA                     _PROTOCOL_Send_uint16_t:	
  4358                           
  4359                           ;protocol.c: 381: static uint16_t pbuf[1];
  4360                           ;protocol.c: 382: pbuf[0] = value;
  4361                           
  4362                           ;incstack = 0
  4363                           ; Regs used in _PROTOCOL_Send_uint16_t: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4364  07EA  0020               	movlb	0	; select bank0
  4365  07EB  0849               	movf	PROTOCOL_Send_uint16_t@value+1,w
  4366  07EC  0021               	movlb	1	; select bank1
  4367  07ED  00D2               	movwf	(PROTOCOL_Send_uint16_t@pbuf+1)^(0+128)
  4368  07EE  0020               	movlb	0	; select bank0
  4369  07EF  0848               	movf	PROTOCOL_Send_uint16_t@value,w
  4370  07F0  0021               	movlb	1	; select bank1
  4371  07F1  00D1               	movwf	PROTOCOL_Send_uint16_t@pbuf^(0+128)
  4372                           
  4373                           ;protocol.c: 383: PROTOCOL_I2C_Send_uint16_t(1, pbuf);
  4374  07F2  30D1               	movlw	(low (PROTOCOL_Send_uint16_t@pbuf| 0))& (0+255)
  4375  07F3  0020               	movlb	0	; select bank0
  4376  07F4  00CA               	movwf	??_PROTOCOL_Send_uint16_t
  4377  07F5  084A               	movf	??_PROTOCOL_Send_uint16_t,w
  4378  07F6  00C2               	movwf	PROTOCOL_I2C_Send_uint16_t@pbuffer
  4379  07F7  3001               	movlw	1
  4380  07F8  3185  25D4         	fcall	_PROTOCOL_I2C_Send_uint16_t
  4381  07FA  0008               	return
  4382  07FB                     __end_of_PROTOCOL_Send_uint16_t:	
  4383                           
  4384                           	psect	text14
  4385  05D4                     __ptext14:	
  4386 ;; *************** function _PROTOCOL_I2C_Send_uint16_t *****************
  4387 ;; Defined at:
  4388 ;;		line 309 in file "protocol.c"
  4389 ;; Parameters:    Size  Location     Type
  4390 ;;  length          1    wreg     unsigned char 
  4391 ;;  pbuffer         1   34[BANK0 ] PTR unsigned int 
  4392 ;;		 -> PROTOCOL_Send_uint16_t@pbuf(2), 
  4393 ;; Auto vars:     Size  Location     Type
  4394 ;;  length          1   39[BANK0 ] unsigned char 
  4395 ;; Return value:  Size  Location     Type
  4396 ;;                  1    wreg      void 
  4397 ;; Registers used:
  4398 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4399 ;; Tracked objects:
  4400 ;;		On entry : 0/0
  4401 ;;		On exit  : 0/0
  4402 ;;		Unchanged: 0/0
  4403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4404 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4405 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4406 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4407 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4408 ;;Total ram usage:        6 bytes
  4409 ;; Hardware stack levels used:    1
  4410 ;; Hardware stack levels required when called:    8
  4411 ;; This function calls:
  4412 ;;		_PROTOCOL_I2C_Set_TLV
  4413 ;;		_printf
  4414 ;; This function is called by:
  4415 ;;		_PROTOCOL_Send_uint16_t
  4416 ;; This function uses a non-reentrant model
  4417 ;;
  4418                           
  4419                           
  4420                           ;psect for function _PROTOCOL_I2C_Send_uint16_t
  4421  05D4                     _PROTOCOL_I2C_Send_uint16_t:	
  4422                           
  4423                           ;incstack = 0
  4424                           ; Regs used in _PROTOCOL_I2C_Send_uint16_t: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4425                           ;PROTOCOL_I2C_Send_uint16_t@length stored from wreg
  4426  05D4  0020               	movlb	0	; select bank0
  4427  05D5  00C7               	movwf	PROTOCOL_I2C_Send_uint16_t@length
  4428                           
  4429                           ;protocol.c: 310: if (backplane_slave_enabled) {
  4430  05D6  0854               	movf	_backplane_slave_enabled,w
  4431  05D7  1903               	btfsc	3,2
  4432  05D8  2E18               	goto	l2642
  4433                           
  4434                           ;protocol.c: 311: j = 0;
  4435  05D9  01D2               	clrf	_j
  4436                           
  4437                           ;protocol.c: 312: for(i=0; i<length; i++) {
  4438  05DA  01D3               	clrf	_i
  4439  05DB                     l2638:	
  4440  05DB  0847               	movf	PROTOCOL_I2C_Send_uint16_t@length,w
  4441  05DC  0253               	subwf	_i,w
  4442  05DD  1803               	btfsc	3,0
  4443  05DE  2E0C               	goto	l2640
  4444                           
  4445                           ;protocol.c: 313: sendbuf[j++] = (uint8_t)((pbuffer[i] >> 8) & 0x00ff);
  4446  05DF  3553               	lslf	_i,w
  4447  05E0  0742               	addwf	PROTOCOL_I2C_Send_uint16_t@pbuffer,w
  4448  05E1  00C3               	movwf	??_PROTOCOL_I2C_Send_uint16_t
  4449  05E2  0843               	movf	??_PROTOCOL_I2C_Send_uint16_t,w
  4450  05E3  0086               	movwf	6
  4451  05E4  0187               	clrf	7
  4452  05E5  3F40               	moviw [0]fsr1
  4453  05E6  00C4               	movwf	??_PROTOCOL_I2C_Send_uint16_t+1
  4454  05E7  3F41               	moviw [1]fsr1
  4455  05E8  00C5               	movwf	??_PROTOCOL_I2C_Send_uint16_t+2
  4456  05E9  0845               	movf	??_PROTOCOL_I2C_Send_uint16_t+2,w
  4457  05EA  00C6               	movwf	??_PROTOCOL_I2C_Send_uint16_t+3
  4458  05EB  0852               	movf	_j,w
  4459  05EC  3EBC               	addlw	(low (_sendbuf| 0))& (0+255)
  4460  05ED  0086               	movwf	6
  4461  05EE  0187               	clrf	7
  4462  05EF  0846               	movf	??_PROTOCOL_I2C_Send_uint16_t+3,w
  4463  05F0  0081               	movwf	1
  4464  05F1  3001               	movlw	1
  4465  05F2  00C3               	movwf	??_PROTOCOL_I2C_Send_uint16_t
  4466  05F3  0843               	movf	??_PROTOCOL_I2C_Send_uint16_t,w
  4467  05F4  07D2               	addwf	_j,f
  4468                           
  4469                           ;protocol.c: 314: sendbuf[j++] = (uint8_t)(pbuffer[i] & 0x00ff);
  4470  05F5  3553               	lslf	_i,w
  4471  05F6  0742               	addwf	PROTOCOL_I2C_Send_uint16_t@pbuffer,w
  4472  05F7  00C3               	movwf	??_PROTOCOL_I2C_Send_uint16_t
  4473  05F8  0843               	movf	??_PROTOCOL_I2C_Send_uint16_t,w
  4474  05F9  0086               	movwf	6
  4475  05FA  0187               	clrf	7
  4476  05FB  0801               	movf	1,w
  4477  05FC  00C4               	movwf	??_PROTOCOL_I2C_Send_uint16_t+1
  4478  05FD  0852               	movf	_j,w
  4479  05FE  3EBC               	addlw	(low (_sendbuf| 0))& (0+255)
  4480  05FF  0086               	movwf	6
  4481  0600  0187               	clrf	7
  4482  0601  0844               	movf	??_PROTOCOL_I2C_Send_uint16_t+1,w
  4483  0602  0081               	movwf	1
  4484  0603  3001               	movlw	1
  4485  0604  00C3               	movwf	??_PROTOCOL_I2C_Send_uint16_t
  4486  0605  0843               	movf	??_PROTOCOL_I2C_Send_uint16_t,w
  4487  0606  07D2               	addwf	_j,f
  4488  0607  3001               	movlw	1
  4489  0608  00C3               	movwf	??_PROTOCOL_I2C_Send_uint16_t
  4490  0609  0843               	movf	??_PROTOCOL_I2C_Send_uint16_t,w
  4491  060A  07D3               	addwf	_i,f
  4492  060B  2DDB               	goto	l2638
  4493  060C                     l2640:	
  4494                           
  4495                           ;protocol.c: 315: }
  4496                           ;protocol.c: 316: PROTOCOL_I2C_Set_TLV(0x03, length*2, &sendbuf[0]);
  4497  060C  3547               	lslf	PROTOCOL_I2C_Send_uint16_t@length,w
  4498  060D  00C3               	movwf	??_PROTOCOL_I2C_Send_uint16_t
  4499  060E  0843               	movf	??_PROTOCOL_I2C_Send_uint16_t,w
  4500  060F  00A0               	movwf	PROTOCOL_I2C_Set_TLV@length
  4501  0610  30BC               	movlw	(low (_sendbuf| 0))& (0+255)
  4502  0611  00C4               	movwf	??_PROTOCOL_I2C_Send_uint16_t+1
  4503  0612  0844               	movf	??_PROTOCOL_I2C_Send_uint16_t+1,w
  4504  0613  00A1               	movwf	PROTOCOL_I2C_Set_TLV@pbuffer
  4505  0614  3003               	movlw	3
  4506  0615  318E  2664         	fcall	_PROTOCOL_I2C_Set_TLV
  4507                           
  4508                           ;protocol.c: 317: } else {
  4509  0617  0008               	return
  4510  0618                     l2642:	
  4511                           
  4512                           ;protocol.c: 318: length--;
  4513  0618  3001               	movlw	1
  4514  0619  0020               	movlb	0	; select bank0
  4515  061A  02C7               	subwf	PROTOCOL_I2C_Send_uint16_t@length,f
  4516                           
  4517                           ;protocol.c: 319: for(i=0; i<length; i++) printf("%u,", pbuffer[i]);
  4518  061B  01D3               	clrf	_i
  4519  061C                     l2650:	
  4520  061C  0847               	movf	PROTOCOL_I2C_Send_uint16_t@length,w
  4521  061D  0253               	subwf	_i,w
  4522  061E  1803               	btfsc	3,0
  4523  061F  2E37               	goto	l2652
  4524  0620  306B               	movlw	low (STR_19| (0+32768))
  4525  0621  00AE               	movwf	printf@f
  4526  0622  3084               	movlw	high (STR_19| (0+32768))
  4527  0623  00AF               	movwf	printf@f+1
  4528  0624  3553               	lslf	_i,w
  4529  0625  0742               	addwf	PROTOCOL_I2C_Send_uint16_t@pbuffer,w
  4530  0626  00C3               	movwf	??_PROTOCOL_I2C_Send_uint16_t
  4531  0627  0843               	movf	??_PROTOCOL_I2C_Send_uint16_t,w
  4532  0628  0086               	movwf	6
  4533  0629  0187               	clrf	7
  4534  062A  3F40               	moviw [0]fsr1
  4535  062B  00B0               	movwf	?_printf+2
  4536  062C  3F41               	moviw [1]fsr1
  4537  062D  00B1               	movwf	?_printf+3
  4538  062E  3180  2071  3185   	fcall	_printf
  4539  0631  3001               	movlw	1
  4540  0632  0020               	movlb	0	; select bank0
  4541  0633  00C3               	movwf	??_PROTOCOL_I2C_Send_uint16_t
  4542  0634  0843               	movf	??_PROTOCOL_I2C_Send_uint16_t,w
  4543  0635  07D3               	addwf	_i,f
  4544  0636  2E1C               	goto	l2650
  4545  0637                     l2652:	
  4546                           
  4547                           ;protocol.c: 320: printf("%u\n", pbuffer[i]);
  4548  0637  3063               	movlw	low (STR_20| (0+32768))
  4549  0638  00AE               	movwf	printf@f
  4550  0639  3084               	movlw	high (STR_20| (0+32768))
  4551  063A  00AF               	movwf	printf@f+1
  4552  063B  3553               	lslf	_i,w
  4553  063C  0742               	addwf	PROTOCOL_I2C_Send_uint16_t@pbuffer,w
  4554  063D  00C3               	movwf	??_PROTOCOL_I2C_Send_uint16_t
  4555  063E  0843               	movf	??_PROTOCOL_I2C_Send_uint16_t,w
  4556  063F  0086               	movwf	6
  4557  0640  0187               	clrf	7
  4558  0641  3F40               	moviw [0]fsr1
  4559  0642  00B0               	movwf	?_printf+2
  4560  0643  3F41               	moviw [1]fsr1
  4561  0644  00B1               	movwf	?_printf+3
  4562  0645  3180  2071         	fcall	_printf
  4563  0647  0008               	return
  4564  0648                     __end_of_PROTOCOL_I2C_Send_uint16_t:	
  4565                           
  4566                           	psect	text15
  4567  0071                     __ptext15:	
  4568 ;; *************** function _printf *****************
  4569 ;; Defined at:
  4570 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  4571 ;; Parameters:    Size  Location     Type
  4572 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  4573 ;;		 -> STR_48(10), STR_47(9), STR_46(10), STR_45(9), 
  4574 ;;		 -> STR_44(4), STR_43(4), STR_42(4), STR_41(4), 
  4575 ;;		 -> STR_40(4), STR_39(4), STR_38(4), STR_37(4), 
  4576 ;;		 -> STR_36(14), STR_35(9), STR_34(10), STR_33(9), 
  4577 ;;		 -> STR_32(10), STR_31(9), STR_30(7), STR_29(4), 
  4578 ;;		 -> STR_28(4), STR_27(9), STR_26(4), STR_25(4), 
  4579 ;;		 -> STR_24(10), STR_23(4), STR_22(4), STR_21(8), 
  4580 ;;		 -> STR_20(4), STR_19(4), STR_18(9), STR_17(6), 
  4581 ;;		 -> STR_16(10), STR_13(10), STR_9(10), STR_5(10), 
  4582 ;;		 -> STR_3(5), 
  4583 ;; Auto vars:     Size  Location     Type
  4584 ;;  tmpval          4    0        struct .
  4585 ;;  width           2   31[BANK0 ] int 
  4586 ;;  len             2   28[BANK0 ] unsigned int 
  4587 ;;  val             2   26[BANK0 ] unsigned int 
  4588 ;;  cp              2   23[BANK0 ] PTR const unsigned char 
  4589 ;;		 -> STR_10(4), buf(48), STR_2(7), ROM(8192), 
  4590 ;;		 -> printf@c(1), STR_1(11), 
  4591 ;;  c               1   33[BANK0 ] char 
  4592 ;;  flag            1   30[BANK0 ] unsigned char 
  4593 ;;  ap              1   25[BANK0 ] PTR void [1]
  4594 ;;		 -> ?_printf(2), 
  4595 ;;  prec            1   22[BANK0 ] char 
  4596 ;; Return value:  Size  Location     Type
  4597 ;;                  2   14[BANK0 ] int 
  4598 ;; Registers used:
  4599 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4600 ;; Tracked objects:
  4601 ;;		On entry : 0/0
  4602 ;;		On exit  : 0/0
  4603 ;;		Unchanged: 0/0
  4604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4605 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4606 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4607 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4608 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4609 ;;Total ram usage:       20 bytes
  4610 ;; Hardware stack levels used:    1
  4611 ;; Hardware stack levels required when called:    7
  4612 ;; This function calls:
  4613 ;;		___lwdiv
  4614 ;;		___lwmod
  4615 ;;		___wmul
  4616 ;;		_isdigit
  4617 ;;		_putch
  4618 ;; This function is called by:
  4619 ;;		_PROTOCOL_Loop
  4620 ;;		_PROTOCOL_I2C_Send_uint16_t
  4621 ;; This function uses a non-reentrant model
  4622 ;;
  4623                           
  4624                           
  4625                           ;psect for function _printf
  4626  0071                     _printf:	
  4627                           
  4628                           ;doprnt.c: 466: va_list ap;
  4629                           ;doprnt.c: 499: signed char c;
  4630                           ;doprnt.c: 501: int width;
  4631                           ;doprnt.c: 506: signed char prec;
  4632                           ;doprnt.c: 508: unsigned char flag;
  4633                           ;doprnt.c: 523: union {
  4634                           ;doprnt.c: 524: unsigned long vd;
  4635                           ;doprnt.c: 525: double integ;
  4636                           ;doprnt.c: 526: } tmpval;
  4637                           ;doprnt.c: 528: unsigned int val;
  4638                           ;doprnt.c: 529: unsigned len;
  4639                           ;doprnt.c: 530: const char * cp;
  4640                           ;doprnt.c: 533: *ap = __va_start();
  4641                           
  4642                           ;incstack = 0
  4643                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4644  0071  3030               	movlw	(low ((?_printf| 0+2)))& (0+255)
  4645  0072  0020               	movlb	0	; select bank0
  4646  0073  00B2               	movwf	??_printf
  4647  0074  0832               	movf	??_printf,w
  4648  0075  00B9               	movwf	printf@ap
  4649  0076                     l2616:	
  4650                           ;doprnt.c: 536: while(c = *f++) {
  4651                           
  4652  0076  0020               	movlb	0	; select bank0
  4653  0077  082F               	movf	printf@f+1,w
  4654  0078  00B3               	movwf	??_printf+1
  4655  0079  082E               	movf	printf@f,w
  4656  007A  00B2               	movwf	??_printf
  4657  007B  0AAE               	incf	printf@f,f
  4658  007C  1903               	skipnz
  4659  007D  0AAF               	incf	printf@f+1,f
  4660  007E  0832               	movf	??_printf,w
  4661  007F  0084               	movwf	4
  4662  0080  0833               	movf	??_printf+1,w
  4663  0081  0085               	movwf	5
  4664  0082  0800               	movf	0,w	;code access
  4665  0083  00B4               	movwf	??_printf+2
  4666  0084  0834               	movf	??_printf+2,w
  4667  0085  00C1               	movwf	printf@c
  4668  0086  0841               	movf	printf@c,w
  4669  0087  1903               	btfsc	3,2
  4670  0088  0008               	return
  4671                           
  4672                           ;doprnt.c: 538: if(c != '%')
  4673  0089  3025               	movlw	37
  4674  008A  0641               	xorwf	printf@c,w
  4675  008B  1903               	btfsc	3,2
  4676  008C  2892               	goto	l2492
  4677                           
  4678                           ;doprnt.c: 540: {
  4679                           ;doprnt.c: 541: (putch(c) );
  4680  008D  0841               	movf	printf@c,w
  4681  008E  318D  25A7  3180   	fcall	_putch
  4682                           
  4683                           ;doprnt.c: 542: continue;
  4684  0091  2876               	goto	l2616
  4685  0092                     l2492:	
  4686                           
  4687                           ;doprnt.c: 543: }
  4688                           ;doprnt.c: 546: width = 0;
  4689  0092  0020               	movlb	0	; select bank0
  4690  0093  01BF               	clrf	printf@width
  4691  0094  01C0               	clrf	printf@width+1
  4692                           
  4693                           ;doprnt.c: 548: flag = 0;
  4694  0095  01BE               	clrf	printf@flag
  4695                           
  4696                           ;doprnt.c: 551: switch(*f) {
  4697                           
  4698                           ;doprnt.c: 550: for(;;) {
  4699  0096  289C               	goto	l2498
  4700  0097                     l473:	
  4701                           ;doprnt.c: 579: case '0':
  4702                           
  4703                           
  4704                           ;doprnt.c: 580: flag |= 0x04;
  4705  0097  153E               	bsf	printf@flag,2
  4706                           
  4707                           ;doprnt.c: 581: f++;
  4708  0098  3001               	movlw	1
  4709  0099  07AE               	addwf	printf@f,f
  4710  009A  3000               	movlw	0
  4711  009B  3DAF               	addwfc	printf@f+1,f
  4712  009C                     l2498:	
  4713                           ;doprnt.c: 584: }
  4714                           
  4715                           ;doprnt.c: 582: continue;
  4716                           
  4717  009C  082E               	movf	printf@f,w
  4718  009D  0084               	movwf	4
  4719  009E  082F               	movf	printf@f+1,w
  4720  009F  0085               	movwf	5
  4721  00A0  0800               	movf	0,w	;code access
  4722                           
  4723                           ; Switch size 1, requested type "space"
  4724                           ; Number of cases is 1, Range of values is 48 to 48
  4725                           ; switch strategies available:
  4726                           ; Name         Instructions Cycles
  4727                           ; simple_byte            4     3 (average)
  4728                           ; direct_byte           11     9 (fixed)
  4729                           ; jumptable            263     9 (fixed)
  4730                           ;	Chosen strategy is simple_byte
  4731  00A1  3A30               	xorlw	48	; case 48
  4732  00A2  1903               	skipnz
  4733  00A3  2897               	goto	l473
  4734  00A4  28A5               	goto	l2500
  4735  00A5                     l2500:	
  4736                           ;doprnt.c: 586: }
  4737                           
  4738                           ;doprnt.c: 585: break;
  4739                           
  4740                           
  4741                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4742  00A5  082E               	movf	printf@f,w
  4743  00A6  0084               	movwf	4
  4744  00A7  082F               	movf	printf@f+1,w
  4745  00A8  0085               	movwf	5
  4746  00A9  0800               	movf	0,w	;code access
  4747  00AA  318E  2636  3180   	fcall	_isdigit
  4748  00AD  1C03               	btfss	3,0
  4749  00AE  2946               	goto	l2548
  4750                           
  4751                           ;doprnt.c: 598: width = 0;
  4752  00AF  0020               	movlb	0	; select bank0
  4753  00B0  01BF               	clrf	printf@width
  4754  00B1  01C0               	clrf	printf@width+1
  4755  00B2                     l2504:	
  4756                           ;doprnt.c: 599: do {
  4757                           
  4758                           
  4759                           ;doprnt.c: 600: width *= 10;
  4760  00B2  300A               	movlw	10
  4761  00B3  0020               	movlb	0	; select bank0
  4762  00B4  00A0               	movwf	___wmul@multiplier
  4763  00B5  3000               	movlw	0
  4764  00B6  00A1               	movwf	___wmul@multiplier+1
  4765  00B7  0840               	movf	printf@width+1,w
  4766  00B8  00A3               	movwf	___wmul@multiplicand+1
  4767  00B9  083F               	movf	printf@width,w
  4768  00BA  00A2               	movwf	___wmul@multiplicand
  4769  00BB  318E  26CD  3180   	fcall	___wmul
  4770  00BE  0020               	movlb	0	; select bank0
  4771  00BF  0821               	movf	?___wmul+1,w
  4772  00C0  00C0               	movwf	printf@width+1
  4773  00C1  0820               	movf	?___wmul,w
  4774  00C2  00BF               	movwf	printf@width
  4775                           
  4776                           ;doprnt.c: 601: width += *f++ - '0';
  4777  00C3  082E               	movf	printf@f,w
  4778  00C4  0084               	movwf	4
  4779  00C5  082F               	movf	printf@f+1,w
  4780  00C6  0085               	movwf	5
  4781  00C7  0800               	movf	0,w	;code access
  4782  00C8  3ED0               	addlw	208
  4783  00C9  00B2               	movwf	??_printf
  4784  00CA  30FF               	movlw	255
  4785  00CB  1803               	skipnc
  4786  00CC  3000               	movlw	0
  4787  00CD  00B3               	movwf	??_printf+1
  4788  00CE  0832               	movf	??_printf,w
  4789  00CF  07BF               	addwf	printf@width,f
  4790  00D0  0833               	movf	??_printf+1,w
  4791  00D1  3DC0               	addwfc	printf@width+1,f
  4792  00D2  3001               	movlw	1
  4793  00D3  07AE               	addwf	printf@f,f
  4794  00D4  3000               	movlw	0
  4795  00D5  3DAF               	addwfc	printf@f+1,f
  4796                           
  4797                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4798  00D6  082E               	movf	printf@f,w
  4799  00D7  0084               	movwf	4
  4800  00D8  082F               	movf	printf@f+1,w
  4801  00D9  0085               	movwf	5
  4802  00DA  0800               	movf	0,w	;code access
  4803  00DB  318E  2636  3180   	fcall	_isdigit
  4804  00DE  1C03               	btfss	3,0
  4805  00DF  2946               	goto	l2548
  4806  00E0  28B2               	goto	l2504
  4807  00E1                     l2512:	
  4808                           ;doprnt.c: 728: case 's':
  4809                           
  4810                           ;doprnt.c: 698: case 'i':
  4811                           ;doprnt.c: 699: break;
  4812                           
  4813                           ;doprnt.c: 697: case 'd':
  4814                           
  4815                           ;doprnt.c: 638: goto alldone;
  4816                           
  4817                           ;doprnt.c: 637: case 0:
  4818                           
  4819                           ;doprnt.c: 608: }
  4820                           ;doprnt.c: 635: switch(c = *f++) {
  4821                           
  4822                           
  4823                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  4824  00E1  0020               	movlb	0	; select bank0
  4825  00E2  0839               	movf	printf@ap,w
  4826  00E3  0086               	movwf	6
  4827  00E4  0187               	clrf	7
  4828  00E5  3F40               	moviw [0]fsr1
  4829  00E6  00B7               	movwf	printf@cp
  4830  00E7  3F41               	moviw [1]fsr1
  4831  00E8  00B8               	movwf	printf@cp+1
  4832  00E9  3002               	movlw	2
  4833  00EA  00B2               	movwf	??_printf
  4834  00EB  0832               	movf	??_printf,w
  4835  00EC  07B9               	addwf	printf@ap,f
  4836                           
  4837                           ;doprnt.c: 740: if(!cp)
  4838  00ED  0837               	movf	printf@cp,w
  4839  00EE  0438               	iorwf	printf@cp+1,w
  4840  00EF  1D03               	btfss	3,2
  4841  00F0  28F5               	goto	l2520
  4842                           
  4843                           ;doprnt.c: 741: cp = "(null)";
  4844  00F1  3051               	movlw	low (STR_2| (0+32768))
  4845  00F2  00B7               	movwf	printf@cp
  4846  00F3  3084               	movlw	high (STR_2| (0+32768))
  4847  00F4  00B8               	movwf	printf@cp+1
  4848  00F5                     l2520:	
  4849                           
  4850                           ;doprnt.c: 745: len = 0;
  4851  00F5  01BC               	clrf	printf@len
  4852  00F6  01BD               	clrf	printf@len+1
  4853  00F7                     l2524:	
  4854                           ;doprnt.c: 746: while(cp[len])
  4855                           
  4856  00F7  0837               	movf	printf@cp,w
  4857  00F8  073C               	addwf	printf@len,w
  4858  00F9  0084               	movwf	4
  4859  00FA  0838               	movf	printf@cp+1,w
  4860  00FB  3D3D               	addwfc	printf@len+1,w
  4861  00FC  0085               	movwf	5
  4862  00FD  0012               	moviw fsr0++
  4863  00FE  1903               	btfsc	3,2
  4864  00FF  2905               	goto	l2526
  4865                           
  4866                           ;doprnt.c: 747: len++;
  4867  0100  3001               	movlw	1
  4868  0101  07BC               	addwf	printf@len,f
  4869  0102  3000               	movlw	0
  4870  0103  3DBD               	addwfc	printf@len+1,f
  4871  0104  28F7               	goto	l2524
  4872  0105                     l2526:	
  4873                           ;doprnt.c: 750: dostring:
  4874                           
  4875                           
  4876                           ;doprnt.c: 757: if(width > len)
  4877  0105  0840               	movf	printf@width+1,w
  4878  0106  023D               	subwf	printf@len+1,w
  4879  0107  1D03               	skipz
  4880  0108  290B               	goto	u1485
  4881  0109  083F               	movf	printf@width,w
  4882  010A  023C               	subwf	printf@len,w
  4883  010B                     u1485:	
  4884  010B  1803               	skipnc
  4885  010C  2912               	goto	l2530
  4886                           
  4887                           ;doprnt.c: 758: width -= len;
  4888  010D  083C               	movf	printf@len,w
  4889  010E  02BF               	subwf	printf@width,f
  4890  010F  083D               	movf	printf@len+1,w
  4891  0110  3BC0               	subwfb	printf@width+1,f
  4892  0111  2914               	goto	l2534
  4893  0112                     l2530:	
  4894                           
  4895                           ;doprnt.c: 759: else
  4896                           ;doprnt.c: 760: width = 0;
  4897  0112  01BF               	clrf	printf@width
  4898  0113  01C0               	clrf	printf@width+1
  4899  0114                     l2534:	
  4900                           ;doprnt.c: 764: while(width--)
  4901                           
  4902  0114  30FF               	movlw	255
  4903  0115  0020               	movlb	0	; select bank0
  4904  0116  07BF               	addwf	printf@width,f
  4905  0117  30FF               	movlw	255
  4906  0118  3DC0               	addwfc	printf@width+1,f
  4907  0119  0A3F               	incf	printf@width,w
  4908  011A  1903               	btfsc	3,2
  4909  011B  0A40               	incf	printf@width+1,w
  4910  011C  1903               	btfsc	3,2
  4911  011D  2930               	goto	l2540
  4912                           
  4913                           ;doprnt.c: 765: (putch(' ') );
  4914  011E  3020               	movlw	32
  4915  011F  318D  25A7  3180   	fcall	_putch
  4916  0122  2914               	goto	l2534
  4917  0123                     l2536:	
  4918                           ;doprnt.c: 767: while(len--)
  4919                           
  4920                           
  4921                           ;doprnt.c: 768: (putch(*cp++) );
  4922  0123  0837               	movf	printf@cp,w
  4923  0124  0084               	movwf	4
  4924  0125  0838               	movf	printf@cp+1,w
  4925  0126  0085               	movwf	5
  4926  0127  0800               	movf	0,w	;code access
  4927  0128  318D  25A7  3180   	fcall	_putch
  4928  012B  3001               	movlw	1
  4929  012C  0020               	movlb	0	; select bank0
  4930  012D  07B7               	addwf	printf@cp,f
  4931  012E  3000               	movlw	0
  4932  012F  3DB8               	addwfc	printf@cp+1,f
  4933  0130                     l2540:	
  4934  0130  3001               	movlw	1
  4935  0131  02BC               	subwf	printf@len,f
  4936  0132  3000               	movlw	0
  4937  0133  3BBD               	subwfb	printf@len+1,f
  4938  0134  0A3C               	incf	printf@len,w
  4939  0135  1D03               	skipz
  4940  0136  2923               	goto	l2536
  4941  0137  0A3D               	incf	printf@len+1,w
  4942  0138  1903               	btfsc	3,2
  4943  0139  2876               	goto	l2616
  4944  013A  2923               	goto	l2536
  4945  013B                     l2542:	
  4946                           ;doprnt.c: 802: default:
  4947                           
  4948                           ;doprnt.c: 774: continue;
  4949                           
  4950                           
  4951                           ;doprnt.c: 805: cp = (char *)&c;
  4952  013B  3041               	movlw	low printf@c
  4953  013C  00B7               	movwf	printf@cp
  4954  013D  3000               	movlw	high printf@c
  4955  013E  00B8               	movwf	printf@cp+1
  4956                           
  4957                           ;doprnt.c: 806: len = 1;
  4958  013F  3001               	movlw	1
  4959  0140  00BC               	movwf	printf@len
  4960  0141  3000               	movlw	0
  4961  0142  00BD               	movwf	printf@len+1
  4962                           
  4963                           ;doprnt.c: 807: goto dostring;
  4964  0143  2905               	goto	l2526
  4965  0144                     l501:	
  4966                           ;doprnt.c: 817: case 'u':
  4967                           
  4968                           
  4969                           ;doprnt.c: 818: flag |= 0x40;
  4970  0144  173E               	bsf	printf@flag,6
  4971                           
  4972                           ;doprnt.c: 822: }
  4973                           
  4974                           ;doprnt.c: 819: break;
  4975  0145  2964               	goto	l485
  4976  0146                     l2548:	
  4977  0146  0020               	movlb	0	; select bank0
  4978  0147  082F               	movf	printf@f+1,w
  4979  0148  00B3               	movwf	??_printf+1
  4980  0149  082E               	movf	printf@f,w
  4981  014A  00B2               	movwf	??_printf
  4982  014B  0AAE               	incf	printf@f,f
  4983  014C  1903               	skipnz
  4984  014D  0AAF               	incf	printf@f+1,f
  4985  014E  0832               	movf	??_printf,w
  4986  014F  0084               	movwf	4
  4987  0150  0833               	movf	??_printf+1,w
  4988  0151  0085               	movwf	5
  4989  0152  0800               	movf	0,w	;code access
  4990  0153  00C1               	movwf	printf@c
  4991                           
  4992                           ; Switch size 1, requested type "space"
  4993                           ; Number of cases is 5, Range of values is 0 to 117
  4994                           ; switch strategies available:
  4995                           ; Name         Instructions Cycles
  4996                           ; simple_byte           16     9 (average)
  4997                           ; direct_byte          242     6 (fixed)
  4998                           ; jumptable            260     6 (fixed)
  4999                           ;	Chosen strategy is simple_byte
  5000  0154  3A00               	xorlw	0	; case 0
  5001  0155  1903               	skipnz
  5002  0156  2A45               	goto	l525
  5003  0157  3A64               	xorlw	100	; case 100
  5004  0158  1903               	skipnz
  5005  0159  2964               	goto	l485
  5006  015A  3A0D               	xorlw	13	; case 105
  5007  015B  1903               	skipnz
  5008  015C  2964               	goto	l485
  5009  015D  3A1A               	xorlw	26	; case 115
  5010  015E  1903               	skipnz
  5011  015F  28E1               	goto	l2512
  5012  0160  3A06               	xorlw	6	; case 117
  5013  0161  1903               	skipnz
  5014  0162  2944               	goto	l501
  5015  0163  293B               	goto	l2542
  5016  0164                     l485:	
  5017                           
  5018                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  5019  0164  0020               	movlb	0	; select bank0
  5020  0165  1B3E               	btfsc	printf@flag,6
  5021  0166  297E               	goto	l2560
  5022                           
  5023                           ;doprnt.c: 1253: {
  5024                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5025  0167  0839               	movf	printf@ap,w
  5026  0168  0086               	movwf	6
  5027  0169  0187               	clrf	7
  5028  016A  3F40               	moviw [0]fsr1
  5029  016B  00BA               	movwf	printf@val
  5030  016C  3F41               	moviw [1]fsr1
  5031  016D  00BB               	movwf	printf@val+1
  5032  016E  3002               	movlw	2
  5033  016F  00B2               	movwf	??_printf
  5034  0170  0832               	movf	??_printf,w
  5035  0171  07B9               	addwf	printf@ap,f
  5036                           
  5037                           ;doprnt.c: 1261: if((int)val < 0) {
  5038  0172  1FBB               	btfss	printf@val+1,7
  5039  0173  2989               	goto	l2564
  5040                           
  5041                           ;doprnt.c: 1262: flag |= 0x03;
  5042  0174  3003               	movlw	3
  5043  0175  00B2               	movwf	??_printf
  5044  0176  0832               	movf	??_printf,w
  5045  0177  04BE               	iorwf	printf@flag,f
  5046                           
  5047                           ;doprnt.c: 1263: val = -val;
  5048  0178  09BA               	comf	printf@val,f
  5049  0179  09BB               	comf	printf@val+1,f
  5050  017A  0ABA               	incf	printf@val,f
  5051  017B  1903               	skipnz
  5052  017C  0ABB               	incf	printf@val+1,f
  5053                           
  5054                           ;doprnt.c: 1264: }
  5055                           ;doprnt.c: 1266: }
  5056  017D  2989               	goto	l2564
  5057  017E                     l2560:	
  5058                           
  5059                           ;doprnt.c: 1268: else
  5060                           ;doprnt.c: 1273: {
  5061                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5062  017E  0839               	movf	printf@ap,w
  5063  017F  0086               	movwf	6
  5064  0180  0187               	clrf	7
  5065  0181  3F40               	moviw [0]fsr1
  5066  0182  00BA               	movwf	printf@val
  5067  0183  3F41               	moviw [1]fsr1
  5068  0184  00BB               	movwf	printf@val+1
  5069  0185  3002               	movlw	2
  5070  0186  00B2               	movwf	??_printf
  5071  0187  0832               	movf	??_printf,w
  5072  0188  07B9               	addwf	printf@ap,f
  5073  0189                     l2564:	
  5074                           
  5075                           ;doprnt.c: 1287: }
  5076                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5077  0189  01C1               	clrf	printf@c
  5078  018A  0AC1               	incf	printf@c,f
  5079  018B  3005               	movlw	5
  5080  018C  0641               	xorwf	printf@c,w
  5081  018D  1903               	btfsc	3,2
  5082  018E  29AE               	goto	l2576
  5083  018F                     l2570:	
  5084                           
  5085                           ;doprnt.c: 1306: if(val < dpowers[c])
  5086  018F  0841               	movf	printf@c,w
  5087  0190  00B2               	movwf	??_printf
  5088  0191  01B3               	clrf	??_printf+1
  5089  0192  35B2               	lslf	??_printf,f
  5090  0193  0DB3               	rlf	??_printf+1,f
  5091  0194  30CF               	movlw	low (_dpowers| (0+32768))
  5092  0195  0732               	addwf	??_printf,w
  5093  0196  0084               	movwf	4
  5094  0197  3083               	movlw	high (_dpowers| (0+32768))
  5095  0198  3D33               	addwfc	??_printf+1,w
  5096  0199  0085               	movwf	5
  5097  019A  3F00               	moviw [0]fsr0
  5098  019B  00B4               	movwf	??_printf+2
  5099  019C  3F01               	moviw [1]fsr0
  5100  019D  00B5               	movwf	??_printf+3
  5101  019E  0835               	movf	??_printf+3,w
  5102  019F  023B               	subwf	printf@val+1,w
  5103  01A0  1D03               	skipz
  5104  01A1  29A4               	goto	u1545
  5105  01A2  0834               	movf	??_printf+2,w
  5106  01A3  023A               	subwf	printf@val,w
  5107  01A4                     u1545:	
  5108  01A4  1C03               	btfss	3,0
  5109  01A5  29AE               	goto	l2576
  5110                           
  5111                           ;doprnt.c: 1307: break;
  5112  01A6  3001               	movlw	1
  5113  01A7  00B2               	movwf	??_printf
  5114  01A8  0832               	movf	??_printf,w
  5115  01A9  07C1               	addwf	printf@c,f
  5116  01AA  3005               	movlw	5
  5117  01AB  0641               	xorwf	printf@c,w
  5118  01AC  1D03               	btfss	3,2
  5119  01AD  298F               	goto	l2570
  5120  01AE                     l2576:	
  5121                           
  5122                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5123  01AE  083F               	movf	printf@width,w
  5124  01AF  0440               	iorwf	printf@width+1,w
  5125  01B0  1903               	btfsc	3,2
  5126  01B1  29BA               	goto	l508
  5127  01B2  083E               	movf	printf@flag,w
  5128  01B3  3903               	andlw	3
  5129  01B4  1903               	btfsc	3,2
  5130  01B5  29BA               	goto	l508
  5131                           
  5132                           ;doprnt.c: 1346: width--;
  5133  01B6  30FF               	movlw	255
  5134  01B7  07BF               	addwf	printf@width,f
  5135  01B8  30FF               	movlw	255
  5136  01B9  3DC0               	addwfc	printf@width+1,f
  5137  01BA                     l508:	
  5138                           
  5139                           ;doprnt.c: 1381: if(width > c)
  5140  01BA  0841               	movf	printf@c,w
  5141  01BB  00B2               	movwf	??_printf
  5142  01BC  01B3               	clrf	??_printf+1
  5143  01BD  1BB2               	btfsc	??_printf,7
  5144  01BE  03B3               	decf	??_printf+1,f
  5145  01BF  0833               	movf	??_printf+1,w
  5146  01C0  3A80               	xorlw	128
  5147  01C1  00B4               	movwf	??_printf+2
  5148  01C2  0840               	movf	printf@width+1,w
  5149  01C3  3A80               	xorlw	128
  5150  01C4  0234               	subwf	??_printf+2,w
  5151  01C5  1D03               	skipz
  5152  01C6  29C9               	goto	u1585
  5153  01C7  083F               	movf	printf@width,w
  5154  01C8  0232               	subwf	??_printf,w
  5155  01C9                     u1585:	
  5156  01C9  1803               	skipnc
  5157  01CA  29D6               	goto	l2584
  5158                           
  5159                           ;doprnt.c: 1382: width -= c;
  5160  01CB  0020               	movlb	0	; select bank0
  5161  01CC  0841               	movf	printf@c,w
  5162  01CD  00B2               	movwf	??_printf
  5163  01CE  01B3               	clrf	??_printf+1
  5164  01CF  1BB2               	btfsc	??_printf,7
  5165  01D0  03B3               	decf	??_printf+1,f
  5166  01D1  0832               	movf	??_printf,w
  5167  01D2  02BF               	subwf	printf@width,f
  5168  01D3  0833               	movf	??_printf+1,w
  5169  01D4  3BC0               	subwfb	printf@width+1,f
  5170  01D5  29D9               	goto	l2586
  5171  01D6                     l2584:	
  5172                           
  5173                           ;doprnt.c: 1383: else
  5174                           ;doprnt.c: 1384: width = 0;
  5175  01D6  0020               	movlb	0	; select bank0
  5176  01D7  01BF               	clrf	printf@width
  5177  01D8  01C0               	clrf	printf@width+1
  5178  01D9                     l2586:	
  5179                           
  5180                           ;doprnt.c: 1387: if(flag & 0x04) {
  5181  01D9  1D3E               	btfss	printf@flag,2
  5182  01DA  29F2               	goto	l2598
  5183                           
  5184                           ;doprnt.c: 1392: if(flag & 0x03)
  5185  01DB  083E               	movf	printf@flag,w
  5186  01DC  3903               	andlw	3
  5187  01DD  1903               	btfsc	3,2
  5188  01DE  29E3               	goto	l2592
  5189                           
  5190                           ;doprnt.c: 1393: (putch('-') );
  5191  01DF  302D               	movlw	45
  5192  01E0  318D  25A7  3180   	fcall	_putch
  5193  01E3                     l2592:	
  5194                           
  5195                           ;doprnt.c: 1415: if(width)
  5196  01E3  0020               	movlb	0	; select bank0
  5197  01E4                     L2:	
  5198  01E4  083F               	movf	printf@width,w
  5199  01E5  0440               	iorwf	printf@width+1,w
  5200  01E6  1903               	btfsc	3,2
  5201  01E7  2A0B               	goto	l2608
  5202                           
  5203                           ;doprnt.c: 1417: (putch('0') );
  5204                           
  5205                           ;doprnt.c: 1416: do
  5206  01E8  3030               	movlw	48
  5207  01E9  318D  25A7  3180   	fcall	_putch
  5208                           
  5209                           ;doprnt.c: 1418: while(--width);
  5210  01EC  30FF               	movlw	255
  5211  01ED  0020               	movlb	0	; select bank0
  5212  01EE  07BF               	addwf	printf@width,f
  5213  01EF  30FF               	movlw	255
  5214  01F0  3DC0               	addwfc	printf@width+1,f
  5215  01F1  29E4               	goto	L2
  5216  01F2                     l2598:	
  5217                           ;doprnt.c: 1420: } else
  5218                           
  5219                           
  5220                           ;doprnt.c: 1422: {
  5221                           ;doprnt.c: 1424: if(width
  5222                           ;doprnt.c: 1428: )
  5223  01F2  083F               	movf	printf@width,w
  5224  01F3  0440               	iorwf	printf@width+1,w
  5225  01F4  1903               	btfsc	3,2
  5226  01F5  2A03               	goto	l2604
  5227  01F6                     l2600:	
  5228                           ;doprnt.c: 1429: do
  5229                           
  5230                           
  5231                           ;doprnt.c: 1430: (putch(' ') );
  5232  01F6  3020               	movlw	32
  5233  01F7  318D  25A7  3180   	fcall	_putch
  5234                           
  5235                           ;doprnt.c: 1431: while(--width);
  5236  01FA  30FF               	movlw	255
  5237  01FB  0020               	movlb	0	; select bank0
  5238  01FC  07BF               	addwf	printf@width,f
  5239  01FD  30FF               	movlw	255
  5240  01FE  3DC0               	addwfc	printf@width+1,f
  5241  01FF  083F               	movf	printf@width,w
  5242  0200  0440               	iorwf	printf@width+1,w
  5243  0201  1D03               	btfss	3,2
  5244  0202  29F6               	goto	l2600
  5245  0203                     l2604:	
  5246                           
  5247                           ;doprnt.c: 1438: if(flag & 0x03)
  5248  0203  083E               	movf	printf@flag,w
  5249  0204  3903               	andlw	3
  5250  0205  1903               	btfsc	3,2
  5251  0206  2A0B               	goto	l2608
  5252                           
  5253                           ;doprnt.c: 1439: (putch('-') );
  5254  0207  302D               	movlw	45
  5255  0208  318D  25A7  3180   	fcall	_putch
  5256  020B                     l2608:	
  5257                           
  5258                           ;doprnt.c: 1469: }
  5259                           ;doprnt.c: 1472: prec = c;
  5260  020B  0020               	movlb	0	; select bank0
  5261  020C  0841               	movf	printf@c,w
  5262  020D  00B2               	movwf	??_printf
  5263  020E  0832               	movf	??_printf,w
  5264  020F  00B6               	movwf	printf@prec
  5265  0210                     l2614:	
  5266                           ;doprnt.c: 1474: while(prec--) {
  5267                           
  5268  0210  30FF               	movlw	255
  5269  0211  0020               	movlb	0	; select bank0
  5270  0212  00B2               	movwf	??_printf
  5271  0213  0832               	movf	??_printf,w
  5272  0214  07B6               	addwf	printf@prec,f
  5273  0215  0A36               	incf	printf@prec,w
  5274  0216  1903               	btfsc	3,2
  5275  0217  2876               	goto	l2616
  5276                           
  5277                           ;doprnt.c: 1478: {
  5278                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5279  0218  300A               	movlw	10
  5280  0219  00A8               	movwf	___lwmod@divisor
  5281  021A  3000               	movlw	0
  5282  021B  00A9               	movwf	___lwmod@divisor+1
  5283  021C  0836               	movf	printf@prec,w
  5284  021D  00B2               	movwf	??_printf
  5285  021E  01B3               	clrf	??_printf+1
  5286  021F  35B2               	lslf	??_printf,f
  5287  0220  0DB3               	rlf	??_printf+1,f
  5288  0221  30CF               	movlw	low (_dpowers| (0+32768))
  5289  0222  0732               	addwf	??_printf,w
  5290  0223  0084               	movwf	4
  5291  0224  3083               	movlw	high (_dpowers| (0+32768))
  5292  0225  3D33               	addwfc	??_printf+1,w
  5293  0226  0085               	movwf	5
  5294  0227  3F00               	moviw [0]fsr0
  5295  0228  00A0               	movwf	___lwdiv@divisor
  5296  0229  3F01               	moviw [1]fsr0
  5297  022A  00A1               	movwf	___lwdiv@divisor+1
  5298  022B  083B               	movf	printf@val+1,w
  5299  022C  00A3               	movwf	___lwdiv@dividend+1
  5300  022D  083A               	movf	printf@val,w
  5301  022E  00A2               	movwf	___lwdiv@dividend
  5302  022F  3187  27B5  3180   	fcall	___lwdiv
  5303  0232  0020               	movlb	0	; select bank0
  5304  0233  0821               	movf	?___lwdiv+1,w
  5305  0234  00AB               	movwf	___lwmod@dividend+1
  5306  0235  0820               	movf	?___lwdiv,w
  5307  0236  00AA               	movwf	___lwmod@dividend
  5308  0237  318F  27D3  3180   	fcall	___lwmod
  5309  023A  0020               	movlb	0	; select bank0
  5310  023B  0828               	movf	?___lwmod,w
  5311  023C  3E30               	addlw	48
  5312  023D  00B4               	movwf	??_printf+2
  5313  023E  0834               	movf	??_printf+2,w
  5314  023F  00C1               	movwf	printf@c
  5315                           
  5316                           ;doprnt.c: 1523: }
  5317                           ;doprnt.c: 1524: (putch(c) );
  5318  0240  0841               	movf	printf@c,w
  5319  0241  318D  25A7  3180   	fcall	_putch
  5320  0244  2A10               	goto	l2614
  5321  0245                     l525:	
  5322                           ;doprnt.c: 1540: return 0;
  5323                           ;	Return value of _printf is never used
  5324                           
  5325                           ;doprnt.c: 1525: }
  5326                           ;doprnt.c: 1533: }
  5327                           ;doprnt.c: 1535: alldone:
  5328                           
  5329  0245  0008               	return
  5330  0246                     __end_of_printf:	
  5331                           
  5332                           	psect	text16
  5333  0DA7                     __ptext16:	
  5334 ;; *************** function _putch *****************
  5335 ;; Defined at:
  5336 ;;		line 160 in file "mcc_generated_files/eusart.c"
  5337 ;; Parameters:    Size  Location     Type
  5338 ;;  txData          1    wreg     unsigned char 
  5339 ;; Auto vars:     Size  Location     Type
  5340 ;;  txData          1    2[BANK0 ] unsigned char 
  5341 ;; Return value:  Size  Location     Type
  5342 ;;                  1    wreg      void 
  5343 ;; Registers used:
  5344 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5345 ;; Tracked objects:
  5346 ;;		On entry : 0/0
  5347 ;;		On exit  : 0/0
  5348 ;;		Unchanged: 0/0
  5349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5351 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5353 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5354 ;;Total ram usage:        1 bytes
  5355 ;; Hardware stack levels used:    1
  5356 ;; Hardware stack levels required when called:    6
  5357 ;; This function calls:
  5358 ;;		_EUSART_Write
  5359 ;; This function is called by:
  5360 ;;		_printf
  5361 ;; This function uses a non-reentrant model
  5362 ;;
  5363                           
  5364                           
  5365                           ;psect for function _putch
  5366  0DA7                     _putch:	
  5367                           
  5368                           ;incstack = 0
  5369                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5370                           ;putch@txData stored from wreg
  5371  0DA7  0020               	movlb	0	; select bank0
  5372  0DA8  00A2               	movwf	putch@txData
  5373                           
  5374                           ;eusart.c: 162: EUSART_Write(txData);
  5375  0DA9  0822               	movf	putch@txData,w
  5376  0DAA  318F  2788         	fcall	_EUSART_Write
  5377  0DAC  0008               	return
  5378  0DAD                     __end_of_putch:	
  5379                           
  5380                           	psect	text17
  5381  0F88                     __ptext17:	
  5382 ;; *************** function _EUSART_Write *****************
  5383 ;; Defined at:
  5384 ;;		line 132 in file "mcc_generated_files/eusart.c"
  5385 ;; Parameters:    Size  Location     Type
  5386 ;;  txData          1    wreg     unsigned char 
  5387 ;; Auto vars:     Size  Location     Type
  5388 ;;  txData          1    1[BANK0 ] unsigned char 
  5389 ;; Return value:  Size  Location     Type
  5390 ;;                  1    wreg      void 
  5391 ;; Registers used:
  5392 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5393 ;; Tracked objects:
  5394 ;;		On entry : 0/0
  5395 ;;		On exit  : 0/0
  5396 ;;		Unchanged: 0/0
  5397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5399 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5400 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5401 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5402 ;;Total ram usage:        2 bytes
  5403 ;; Hardware stack levels used:    1
  5404 ;; Hardware stack levels required when called:    5
  5405 ;; This function calls:
  5406 ;;		Nothing
  5407 ;; This function is called by:
  5408 ;;		_putch
  5409 ;; This function uses a non-reentrant model
  5410 ;;
  5411                           
  5412                           
  5413                           ;psect for function _EUSART_Write
  5414  0F88                     _EUSART_Write:	
  5415                           
  5416                           ;incstack = 0
  5417                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  5418                           ;EUSART_Write@txData stored from wreg
  5419  0F88  0020               	movlb	0	; select bank0
  5420  0F89  00A1               	movwf	EUSART_Write@txData
  5421  0F8A                     l2394:	
  5422                           ;eusart.c: 135: {
  5423                           
  5424                           ;eusart.c: 134: while(0 == eusartTxBufferRemaining)
  5425                           
  5426  0F8A  087A               	movf	_eusartTxBufferRemaining,w	;volatile
  5427  0F8B  1903               	btfsc	3,2
  5428  0F8C  2F8A               	goto	l2394
  5429                           
  5430                           ;eusart.c: 136: }
  5431                           ;eusart.c: 138: if(0 == PIE1bits.TXIE)
  5432  0F8D  0021               	movlb	1	; select bank1
  5433  0F8E  1A11               	btfsc	17,4	;volatile
  5434  0F8F  2F95               	goto	l224
  5435                           
  5436                           ;eusart.c: 139: {
  5437                           ;eusart.c: 140: TXREG = txData;
  5438  0F90  0020               	movlb	0	; select bank0
  5439  0F91  0821               	movf	EUSART_Write@txData,w
  5440  0F92  0023               	movlb	3	; select bank3
  5441  0F93  009A               	movwf	26	;volatile
  5442                           
  5443                           ;eusart.c: 141: }
  5444  0F94  2FA9               	goto	l2408
  5445  0F95                     l224:	
  5446                           
  5447                           ;eusart.c: 142: else
  5448                           ;eusart.c: 143: {
  5449                           ;eusart.c: 144: PIE1bits.TXIE = 0;
  5450  0F95  1211               	bcf	17,4	;volatile
  5451                           
  5452                           ;eusart.c: 145: eusartTxBuffer[eusartTxHead++] = txData;
  5453  0F96  0020               	movlb	0	; select bank0
  5454  0F97  0821               	movf	EUSART_Write@txData,w
  5455  0F98  00A0               	movwf	??_EUSART_Write
  5456  0F99  087C               	movf	_eusartTxHead,w
  5457  0F9A  3EA8               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  5458  0F9B  0086               	movwf	6
  5459  0F9C  0187               	clrf	7
  5460  0F9D  0820               	movf	??_EUSART_Write,w
  5461  0F9E  0081               	movwf	1
  5462  0F9F  3001               	movlw	1
  5463  0FA0  00A0               	movwf	??_EUSART_Write
  5464  0FA1  0820               	movf	??_EUSART_Write,w
  5465  0FA2  07FC               	addwf	_eusartTxHead,f	;volatile
  5466                           
  5467                           ;eusart.c: 146: if(sizeof(eusartTxBuffer) <= eusartTxHead)
  5468  0FA3  3008               	movlw	8
  5469  0FA4  027C               	subwf	_eusartTxHead,w	;volatile
  5470  0FA5  1803               	btfsc	3,0
  5471                           
  5472                           ;eusart.c: 147: {
  5473                           ;eusart.c: 148: eusartTxHead = 0;
  5474  0FA6  01FC               	clrf	_eusartTxHead	;volatile
  5475                           
  5476                           ;eusart.c: 149: }
  5477                           ;eusart.c: 150: eusartTxBufferRemaining--;
  5478  0FA7  3001               	movlw	1
  5479  0FA8  02FA               	subwf	_eusartTxBufferRemaining,f	;volatile
  5480  0FA9                     l2408:	
  5481                           
  5482                           ;eusart.c: 151: }
  5483                           ;eusart.c: 152: PIE1bits.TXIE = 1;
  5484  0FA9  0021               	movlb	1	; select bank1
  5485  0FAA  1611               	bsf	17,4	;volatile
  5486  0FAB  0008               	return
  5487  0FAC                     __end_of_EUSART_Write:	
  5488                           
  5489                           	psect	text18
  5490  0FD3                     __ptext18:	
  5491 ;; *************** function ___lwmod *****************
  5492 ;; Defined at:
  5493 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  5494 ;; Parameters:    Size  Location     Type
  5495 ;;  divisor         2    8[BANK0 ] unsigned int 
  5496 ;;  dividend        2   10[BANK0 ] unsigned int 
  5497 ;; Auto vars:     Size  Location     Type
  5498 ;;  counter         1   13[BANK0 ] unsigned char 
  5499 ;; Return value:  Size  Location     Type
  5500 ;;                  2    8[BANK0 ] unsigned int 
  5501 ;; Registers used:
  5502 ;;		wreg, status,2, status,0
  5503 ;; Tracked objects:
  5504 ;;		On entry : 0/0
  5505 ;;		On exit  : 0/0
  5506 ;;		Unchanged: 0/0
  5507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5508 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5509 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5510 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5511 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5512 ;;Total ram usage:        6 bytes
  5513 ;; Hardware stack levels used:    1
  5514 ;; Hardware stack levels required when called:    5
  5515 ;; This function calls:
  5516 ;;		Nothing
  5517 ;; This function is called by:
  5518 ;;		_printf
  5519 ;; This function uses a non-reentrant model
  5520 ;;
  5521                           
  5522                           
  5523                           ;psect for function ___lwmod
  5524  0FD3                     ___lwmod:	
  5525                           
  5526                           ;incstack = 0
  5527                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  5528  0FD3  0020               	movlb	0	; select bank0
  5529  0FD4  0828               	movf	___lwmod@divisor,w
  5530  0FD5  0429               	iorwf	___lwmod@divisor+1,w
  5531  0FD6  1903               	btfsc	3,2
  5532  0FD7  2FFB               	goto	l2482
  5533  0FD8  01AD               	clrf	___lwmod@counter
  5534  0FD9  0AAD               	incf	___lwmod@counter,f
  5535  0FDA                     l2472:	
  5536  0FDA  1BA9               	btfsc	___lwmod@divisor+1,7
  5537  0FDB  2FE6               	goto	l2474
  5538  0FDC  3001               	movlw	1
  5539  0FDD                     u1385:	
  5540  0FDD  35A8               	lslf	___lwmod@divisor,f
  5541  0FDE  0DA9               	rlf	___lwmod@divisor+1,f
  5542  0FDF  0B89               	decfsz	9,f
  5543  0FE0  2FDD               	goto	u1385
  5544  0FE1  3001               	movlw	1
  5545  0FE2  00AC               	movwf	??___lwmod
  5546  0FE3  082C               	movf	??___lwmod,w
  5547  0FE4  07AD               	addwf	___lwmod@counter,f
  5548  0FE5  2FDA               	goto	l2472
  5549  0FE6                     l2474:	
  5550  0FE6  0829               	movf	___lwmod@divisor+1,w
  5551  0FE7  022B               	subwf	___lwmod@dividend+1,w
  5552  0FE8  1D03               	skipz
  5553  0FE9  2FEC               	goto	u1405
  5554  0FEA  0828               	movf	___lwmod@divisor,w
  5555  0FEB  022A               	subwf	___lwmod@dividend,w
  5556  0FEC                     u1405:	
  5557  0FEC  1C03               	skipc
  5558  0FED  2FF2               	goto	l2478
  5559  0FEE  0828               	movf	___lwmod@divisor,w
  5560  0FEF  02AA               	subwf	___lwmod@dividend,f
  5561  0FF0  0829               	movf	___lwmod@divisor+1,w
  5562  0FF1  3BAB               	subwfb	___lwmod@dividend+1,f
  5563  0FF2                     l2478:	
  5564  0FF2  3001               	movlw	1
  5565  0FF3                     u1415:	
  5566  0FF3  36A9               	lsrf	___lwmod@divisor+1,f
  5567  0FF4  0CA8               	rrf	___lwmod@divisor,f
  5568  0FF5  0B89               	decfsz	9,f
  5569  0FF6  2FF3               	goto	u1415
  5570  0FF7  3001               	movlw	1
  5571  0FF8  02AD               	subwf	___lwmod@counter,f
  5572  0FF9  1D03               	btfss	3,2
  5573  0FFA  2FE6               	goto	l2474
  5574  0FFB                     l2482:	
  5575  0FFB  082B               	movf	___lwmod@dividend+1,w
  5576  0FFC  00A9               	movwf	?___lwmod+1
  5577  0FFD  082A               	movf	___lwmod@dividend,w
  5578  0FFE  00A8               	movwf	?___lwmod
  5579  0FFF  0008               	return
  5580  1000                     __end_of___lwmod:	
  5581                           
  5582                           	psect	text19
  5583  07B5                     __ptext19:	
  5584 ;; *************** function ___lwdiv *****************
  5585 ;; Defined at:
  5586 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  5587 ;; Parameters:    Size  Location     Type
  5588 ;;  divisor         2    0[BANK0 ] unsigned int 
  5589 ;;  dividend        2    2[BANK0 ] unsigned int 
  5590 ;; Auto vars:     Size  Location     Type
  5591 ;;  quotient        2    5[BANK0 ] unsigned int 
  5592 ;;  counter         1    7[BANK0 ] unsigned char 
  5593 ;; Return value:  Size  Location     Type
  5594 ;;                  2    0[BANK0 ] unsigned int 
  5595 ;; Registers used:
  5596 ;;		wreg, status,2, status,0
  5597 ;; Tracked objects:
  5598 ;;		On entry : 0/0
  5599 ;;		On exit  : 0/0
  5600 ;;		Unchanged: 0/0
  5601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5602 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5603 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5604 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5605 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5606 ;;Total ram usage:        8 bytes
  5607 ;; Hardware stack levels used:    1
  5608 ;; Hardware stack levels required when called:    5
  5609 ;; This function calls:
  5610 ;;		Nothing
  5611 ;; This function is called by:
  5612 ;;		_printf
  5613 ;; This function uses a non-reentrant model
  5614 ;;
  5615                           
  5616                           
  5617                           ;psect for function ___lwdiv
  5618  07B5                     ___lwdiv:	
  5619                           
  5620                           ;incstack = 0
  5621                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  5622  07B5  0020               	movlb	0	; select bank0
  5623  07B6  01A5               	clrf	___lwdiv@quotient
  5624  07B7  01A6               	clrf	___lwdiv@quotient+1
  5625  07B8  0820               	movf	___lwdiv@divisor,w
  5626  07B9  0421               	iorwf	___lwdiv@divisor+1,w
  5627  07BA  1903               	btfsc	3,2
  5628  07BB  2FE5               	goto	l2460
  5629  07BC  01A7               	clrf	___lwdiv@counter
  5630  07BD  0AA7               	incf	___lwdiv@counter,f
  5631  07BE                     l2448:	
  5632  07BE  1BA1               	btfsc	___lwdiv@divisor+1,7
  5633  07BF  2FCA               	goto	l2450
  5634  07C0  3001               	movlw	1
  5635  07C1                     u1315:	
  5636  07C1  35A0               	lslf	___lwdiv@divisor,f
  5637  07C2  0DA1               	rlf	___lwdiv@divisor+1,f
  5638  07C3  0B89               	decfsz	9,f
  5639  07C4  2FC1               	goto	u1315
  5640  07C5  3001               	movlw	1
  5641  07C6  00A4               	movwf	??___lwdiv
  5642  07C7  0824               	movf	??___lwdiv,w
  5643  07C8  07A7               	addwf	___lwdiv@counter,f
  5644  07C9  2FBE               	goto	l2448
  5645  07CA                     l2450:	
  5646  07CA  3001               	movlw	1
  5647  07CB                     u1335:	
  5648  07CB  35A5               	lslf	___lwdiv@quotient,f
  5649  07CC  0DA6               	rlf	___lwdiv@quotient+1,f
  5650  07CD  0B89               	decfsz	9,f
  5651  07CE  2FCB               	goto	u1335
  5652  07CF  0821               	movf	___lwdiv@divisor+1,w
  5653  07D0  0223               	subwf	___lwdiv@dividend+1,w
  5654  07D1  1D03               	skipz
  5655  07D2  2FD5               	goto	u1345
  5656  07D3  0820               	movf	___lwdiv@divisor,w
  5657  07D4  0222               	subwf	___lwdiv@dividend,w
  5658  07D5                     u1345:	
  5659  07D5  1C03               	skipc
  5660  07D6  2FDC               	goto	l2456
  5661  07D7  0820               	movf	___lwdiv@divisor,w
  5662  07D8  02A2               	subwf	___lwdiv@dividend,f
  5663  07D9  0821               	movf	___lwdiv@divisor+1,w
  5664  07DA  3BA3               	subwfb	___lwdiv@dividend+1,f
  5665  07DB  1425               	bsf	___lwdiv@quotient,0
  5666  07DC                     l2456:	
  5667  07DC  3001               	movlw	1
  5668  07DD                     u1355:	
  5669  07DD  36A1               	lsrf	___lwdiv@divisor+1,f
  5670  07DE  0CA0               	rrf	___lwdiv@divisor,f
  5671  07DF  0B89               	decfsz	9,f
  5672  07E0  2FDD               	goto	u1355
  5673  07E1  3001               	movlw	1
  5674  07E2  02A7               	subwf	___lwdiv@counter,f
  5675  07E3  1D03               	btfss	3,2
  5676  07E4  2FCA               	goto	l2450
  5677  07E5                     l2460:	
  5678  07E5  0826               	movf	___lwdiv@quotient+1,w
  5679  07E6  00A1               	movwf	?___lwdiv+1
  5680  07E7  0825               	movf	___lwdiv@quotient,w
  5681  07E8  00A0               	movwf	?___lwdiv
  5682  07E9  0008               	return
  5683  07EA                     __end_of___lwdiv:	
  5684                           
  5685                           	psect	text20
  5686  0E64                     __ptext20:	
  5687 ;; *************** function _PROTOCOL_I2C_Set_TLV *****************
  5688 ;; Defined at:
  5689 ;;		line 207 in file "protocol.c"
  5690 ;; Parameters:    Size  Location     Type
  5691 ;;  type            1    wreg     unsigned char 
  5692 ;;  length          1    0[BANK0 ] unsigned char 
  5693 ;;  pbuffer         1    1[BANK0 ] PTR unsigned char 
  5694 ;;		 -> PROTOCOL_Send_uint8_t@pbuf(1), sendbuf(16), 
  5695 ;; Auto vars:     Size  Location     Type
  5696 ;;  type            1    3[BANK0 ] unsigned char 
  5697 ;;  status          1    4[BANK0 ] enum E3406
  5698 ;; Return value:  Size  Location     Type
  5699 ;;                  1    wreg      void 
  5700 ;; Registers used:
  5701 ;;		wreg, status,2, status,0
  5702 ;; Tracked objects:
  5703 ;;		On entry : 0/0
  5704 ;;		On exit  : 0/0
  5705 ;;		Unchanged: 0/0
  5706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5707 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5708 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5709 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5710 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5711 ;;Total ram usage:        5 bytes
  5712 ;; Hardware stack levels used:    1
  5713 ;; Hardware stack levels required when called:    5
  5714 ;; This function calls:
  5715 ;;		Nothing
  5716 ;; This function is called by:
  5717 ;;		_PROTOCOL_I2C_Send_uint16_t
  5718 ;; This function uses a non-reentrant model
  5719 ;;
  5720                           
  5721                           
  5722                           ;psect for function _PROTOCOL_I2C_Set_TLV
  5723  0E64                     _PROTOCOL_I2C_Set_TLV:	
  5724                           
  5725                           ;incstack = 0
  5726                           ; Regs used in _PROTOCOL_I2C_Set_TLV: [wreg+status,2+status,0]
  5727                           ;PROTOCOL_I2C_Set_TLV@type stored from wreg
  5728  0E64  0020               	movlb	0	; select bank0
  5729  0E65  00A3               	movwf	PROTOCOL_I2C_Set_TLV@type
  5730                           
  5731                           ;protocol.c: 208: READBUF_STATUS status = readbuf.status;
  5732  0E66  086A               	movf	_readbuf+3,w
  5733  0E67  00A2               	movwf	??_PROTOCOL_I2C_Set_TLV
  5734  0E68  0822               	movf	??_PROTOCOL_I2C_Set_TLV,w
  5735  0E69  00A4               	movwf	PROTOCOL_I2C_Set_TLV@status
  5736                           
  5737                           ;protocol.c: 209: if (status == COMPLETE) {
  5738  0E6A  3003               	movlw	3
  5739  0E6B  0624               	xorwf	PROTOCOL_I2C_Set_TLV@status,w
  5740  0E6C  1D03               	btfss	3,2
  5741  0E6D  0008               	return
  5742                           
  5743                           ;protocol.c: 210: readbuf.type = type;
  5744  0E6E  0823               	movf	PROTOCOL_I2C_Set_TLV@type,w
  5745  0E6F  00A2               	movwf	??_PROTOCOL_I2C_Set_TLV
  5746  0E70  0822               	movf	??_PROTOCOL_I2C_Set_TLV,w
  5747  0E71  00E7               	movwf	_readbuf
  5748                           
  5749                           ;protocol.c: 211: readbuf.length = length;
  5750  0E72  0820               	movf	PROTOCOL_I2C_Set_TLV@length,w
  5751  0E73  00A2               	movwf	??_PROTOCOL_I2C_Set_TLV
  5752  0E74  0822               	movf	??_PROTOCOL_I2C_Set_TLV,w
  5753  0E75  00E8               	movwf	_readbuf+1
  5754                           
  5755                           ;protocol.c: 212: readbuf.pbuffer = pbuffer;
  5756  0E76  0821               	movf	PROTOCOL_I2C_Set_TLV@pbuffer,w
  5757  0E77  00A2               	movwf	??_PROTOCOL_I2C_Set_TLV
  5758  0E78  0822               	movf	??_PROTOCOL_I2C_Set_TLV,w
  5759  0E79  00E9               	movwf	low ((_readbuf| 0+2))
  5760                           
  5761                           ;protocol.c: 213: readbuf.buf_cnt = 0;
  5762  0E7A  01EB               	clrf	_readbuf+4
  5763                           
  5764                           ;protocol.c: 214: readbuf.status = TLV_SET;
  5765  0E7B  01EA               	clrf	_readbuf+3
  5766  0E7C  0008               	return
  5767  0E7D                     __end_of_PROTOCOL_I2C_Set_TLV:	
  5768                           
  5769                           	psect	text21
  5770  0648                     __ptext21:	
  5771 ;; *************** function _atoi *****************
  5772 ;; Defined at:
  5773 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\atoi.c"
  5774 ;; Parameters:    Size  Location     Type
  5775 ;;  s               1    wreg     PTR const unsigned char 
  5776 ;;		 -> buf(48), 
  5777 ;; Auto vars:     Size  Location     Type
  5778 ;;  s               1   13[BANK0 ] PTR const unsigned char 
  5779 ;;		 -> buf(48), 
  5780 ;;  a               2   11[BANK0 ] int 
  5781 ;;  sign            1   10[BANK0 ] unsigned char 
  5782 ;; Return value:  Size  Location     Type
  5783 ;;                  2    6[BANK0 ] int 
  5784 ;; Registers used:
  5785 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5786 ;; Tracked objects:
  5787 ;;		On entry : 0/0
  5788 ;;		On exit  : 0/0
  5789 ;;		Unchanged: 0/0
  5790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5791 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5792 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5793 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5794 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5795 ;;Total ram usage:        8 bytes
  5796 ;; Hardware stack levels used:    1
  5797 ;; Hardware stack levels required when called:    6
  5798 ;; This function calls:
  5799 ;;		___wmul
  5800 ;;		_isdigit
  5801 ;; This function is called by:
  5802 ;;		_PROTOCOL_Loop
  5803 ;; This function uses a non-reentrant model
  5804 ;;
  5805                           
  5806                           
  5807                           ;psect for function _atoi
  5808  0648                     _atoi:	
  5809                           
  5810                           ;incstack = 0
  5811                           ; Regs used in _atoi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5812                           ;atoi@s stored from wreg
  5813  0648  0020               	movlb	0	; select bank0
  5814  0649  00AD               	movwf	atoi@s
  5815  064A                     l3002:	
  5816  064A  082D               	movf	atoi@s,w
  5817  064B  0086               	movwf	6
  5818  064C  3001               	movlw	1	; select bank2/3
  5819  064D  0087               	movwf	7
  5820  064E  3020               	movlw	32
  5821  064F  0601               	xorwf	1,w
  5822  0650  1D03               	btfss	3,2
  5823  0651  2E57               	goto	l3004
  5824  0652                     l3000:	
  5825  0652  3001               	movlw	1
  5826  0653  00A8               	movwf	??_atoi
  5827  0654  0828               	movf	??_atoi,w
  5828  0655  07AD               	addwf	atoi@s,f
  5829  0656  2E4A               	goto	l3002
  5830  0657                     l3004:	
  5831  0657  082D               	movf	atoi@s,w
  5832  0658  0086               	movwf	6
  5833  0659  3001               	movlw	1	; select bank2/3
  5834  065A  0087               	movwf	7
  5835  065B  3009               	movlw	9
  5836  065C  0601               	xorwf	1,w
  5837  065D  1903               	btfsc	3,2
  5838  065E  2E52               	goto	l3000
  5839  065F  01AB               	clrf	atoi@a
  5840  0660  01AC               	clrf	atoi@a+1
  5841  0661  01AA               	clrf	atoi@sign
  5842  0662  082D               	movf	atoi@s,w
  5843  0663  0086               	movwf	6
  5844  0664  3001               	movlw	1	; select bank2/3
  5845  0665  0087               	movwf	7
  5846  0666  302D               	movlw	45
  5847  0667  0601               	xorwf	1,w
  5848  0668  1D03               	btfss	3,2
  5849  0669  2E6F               	goto	l3012
  5850  066A  3001               	movlw	1
  5851  066B  00A8               	movwf	??_atoi
  5852  066C  0828               	movf	??_atoi,w
  5853  066D  07AA               	addwf	atoi@sign,f
  5854  066E  2E77               	goto	l3018
  5855  066F                     l3012:	
  5856  066F  082D               	movf	atoi@s,w
  5857  0670  0086               	movwf	6
  5858  0671  3001               	movlw	1	; select bank2/3
  5859  0672  0087               	movwf	7
  5860  0673  302B               	movlw	43
  5861  0674  0601               	xorwf	1,w
  5862  0675  1D03               	btfss	3,2
  5863  0676  2E7B               	goto	l3020
  5864  0677                     l3018:	
  5865  0677  3001               	movlw	1
  5866  0678  00A8               	movwf	??_atoi
  5867  0679  0828               	movf	??_atoi,w
  5868  067A  07AD               	addwf	atoi@s,f
  5869  067B                     l3020:	
  5870  067B  082D               	movf	atoi@s,w
  5871  067C  0086               	movwf	6
  5872  067D  3001               	movlw	1	; select bank2/3
  5873  067E  0087               	movwf	7
  5874  067F  0801               	movf	1,w
  5875  0680  318E  2636  3186   	fcall	_isdigit
  5876  0683  1C03               	btfss	3,0
  5877  0684  2EA4               	goto	l3022
  5878  0685  0020               	movlb	0	; select bank0
  5879  0686  082C               	movf	atoi@a+1,w
  5880  0687  00A1               	movwf	___wmul@multiplier+1
  5881  0688  082B               	movf	atoi@a,w
  5882  0689  00A0               	movwf	___wmul@multiplier
  5883  068A  300A               	movlw	10
  5884  068B  00A2               	movwf	___wmul@multiplicand
  5885  068C  3000               	movlw	0
  5886  068D  00A3               	movwf	___wmul@multiplicand+1
  5887  068E  318E  26CD  3186   	fcall	___wmul
  5888  0691  0020               	movlb	0	; select bank0
  5889  0692  082D               	movf	atoi@s,w
  5890  0693  0086               	movwf	6
  5891  0694  3001               	movlw	1	; select bank2/3
  5892  0695  0087               	movwf	7
  5893  0696  0801               	movf	1,w
  5894  0697  0720               	addwf	?___wmul,w
  5895  0698  00A8               	movwf	??_atoi
  5896  0699  0821               	movf	?___wmul+1,w
  5897  069A  1803               	skipnc
  5898  069B  0A21               	incf	?___wmul+1,w
  5899  069C  00A9               	movwf	??_atoi+1
  5900  069D  0828               	movf	??_atoi,w
  5901  069E  3ED0               	addlw	208
  5902  069F  00AB               	movwf	atoi@a
  5903  06A0  30FF               	movlw	255
  5904  06A1  3D29               	addwfc	??_atoi+1,w
  5905  06A2  00AC               	movwf	atoi@a+1
  5906  06A3  2E77               	goto	l3018
  5907  06A4                     l3022:	
  5908  06A4  0020               	movlb	0	; select bank0
  5909  06A5  082A               	movf	atoi@sign,w
  5910  06A6  1903               	btfsc	3,2
  5911  06A7  2EB4               	goto	l3028
  5912  06A8  092B               	comf	atoi@a,w
  5913  06A9  00A8               	movwf	??_atoi
  5914  06AA  092C               	comf	atoi@a+1,w
  5915  06AB  00A9               	movwf	??_atoi+1
  5916  06AC  0AA8               	incf	??_atoi,f
  5917  06AD  1903               	skipnz
  5918  06AE  0AA9               	incf	??_atoi+1,f
  5919  06AF  0828               	movf	??_atoi,w
  5920  06B0  00A6               	movwf	?_atoi
  5921  06B1  0829               	movf	??_atoi+1,w
  5922  06B2  00A7               	movwf	?_atoi+1
  5923  06B3  0008               	return
  5924  06B4                     l3028:	
  5925  06B4  082C               	movf	atoi@a+1,w
  5926  06B5  00A7               	movwf	?_atoi+1
  5927  06B6  082B               	movf	atoi@a,w
  5928  06B7  00A6               	movwf	?_atoi
  5929  06B8  0008               	return
  5930  06B9                     __end_of_atoi:	
  5931                           
  5932                           	psect	text22
  5933  0E36                     __ptext22:	
  5934 ;; *************** function _isdigit *****************
  5935 ;; Defined at:
  5936 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  5937 ;; Parameters:    Size  Location     Type
  5938 ;;  c               1    wreg     unsigned char 
  5939 ;; Auto vars:     Size  Location     Type
  5940 ;;  c               1    1[BANK0 ] unsigned char 
  5941 ;; Return value:  Size  Location     Type
  5942 ;;		None               void
  5943 ;; Registers used:
  5944 ;;		wreg, status,2, status,0
  5945 ;; Tracked objects:
  5946 ;;		On entry : 0/0
  5947 ;;		On exit  : 0/0
  5948 ;;		Unchanged: 0/0
  5949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5951 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5953 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5954 ;;Total ram usage:        2 bytes
  5955 ;; Hardware stack levels used:    1
  5956 ;; Hardware stack levels required when called:    5
  5957 ;; This function calls:
  5958 ;;		Nothing
  5959 ;; This function is called by:
  5960 ;;		_printf
  5961 ;;		_atoi
  5962 ;; This function uses a non-reentrant model
  5963 ;;
  5964                           
  5965                           
  5966                           ;psect for function _isdigit
  5967  0E36                     _isdigit:	
  5968                           
  5969                           ;incstack = 0
  5970                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  5971                           ;isdigit@c stored from wreg
  5972  0E36  0020               	movlb	0	; select bank0
  5973  0E37  00A1               	movwf	isdigit@c
  5974  0E38  01A0               	clrf	_isdigit$1245
  5975  0E39  303A               	movlw	58
  5976  0E3A  0221               	subwf	isdigit@c,w
  5977  0E3B  1803               	skipnc
  5978  0E3C  2E43               	goto	l2420
  5979  0E3D  3030               	movlw	48
  5980  0E3E  0221               	subwf	isdigit@c,w
  5981  0E3F  1C03               	skipc
  5982  0E40  2E43               	goto	l2420
  5983  0E41  01A0               	clrf	_isdigit$1245
  5984  0E42  0AA0               	incf	_isdigit$1245,f
  5985  0E43                     l2420:	
  5986  0E43  0C20               	rrf	_isdigit$1245,w
  5987  0E44  0008               	return
  5988  0E45                     __end_of_isdigit:	
  5989                           
  5990                           	psect	text23
  5991  0ECD                     __ptext23:	
  5992 ;; *************** function ___wmul *****************
  5993 ;; Defined at:
  5994 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  5995 ;; Parameters:    Size  Location     Type
  5996 ;;  multiplier      2    0[BANK0 ] unsigned int 
  5997 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  5998 ;; Auto vars:     Size  Location     Type
  5999 ;;  product         2    4[BANK0 ] unsigned int 
  6000 ;; Return value:  Size  Location     Type
  6001 ;;                  2    0[BANK0 ] unsigned int 
  6002 ;; Registers used:
  6003 ;;		wreg, status,2, status,0
  6004 ;; Tracked objects:
  6005 ;;		On entry : 0/0
  6006 ;;		On exit  : 0/0
  6007 ;;		Unchanged: 0/0
  6008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6009 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6010 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6012 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6013 ;;Total ram usage:        6 bytes
  6014 ;; Hardware stack levels used:    1
  6015 ;; Hardware stack levels required when called:    5
  6016 ;; This function calls:
  6017 ;;		Nothing
  6018 ;; This function is called by:
  6019 ;;		_printf
  6020 ;;		_atoi
  6021 ;; This function uses a non-reentrant model
  6022 ;;
  6023                           
  6024                           
  6025                           ;psect for function ___wmul
  6026  0ECD                     ___wmul:	
  6027                           
  6028                           ;incstack = 0
  6029                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6030  0ECD  0020               	movlb	0	; select bank0
  6031  0ECE  01A4               	clrf	___wmul@product
  6032  0ECF  01A5               	clrf	___wmul@product+1
  6033  0ED0                     l2426:	
  6034  0ED0  1C20               	btfss	___wmul@multiplier,0
  6035  0ED1  2ED6               	goto	l919
  6036  0ED2  0822               	movf	___wmul@multiplicand,w
  6037  0ED3  07A4               	addwf	___wmul@product,f
  6038  0ED4  0823               	movf	___wmul@multiplicand+1,w
  6039  0ED5  3DA5               	addwfc	___wmul@product+1,f
  6040  0ED6                     l919:	
  6041  0ED6  3001               	movlw	1
  6042  0ED7                     u1275:	
  6043  0ED7  35A2               	lslf	___wmul@multiplicand,f
  6044  0ED8  0DA3               	rlf	___wmul@multiplicand+1,f
  6045  0ED9  0B89               	decfsz	9,f
  6046  0EDA  2ED7               	goto	u1275
  6047  0EDB  3001               	movlw	1
  6048  0EDC                     u1285:	
  6049  0EDC  36A1               	lsrf	___wmul@multiplier+1,f
  6050  0EDD  0CA0               	rrf	___wmul@multiplier,f
  6051  0EDE  0B89               	decfsz	9,f
  6052  0EDF  2EDC               	goto	u1285
  6053  0EE0  0820               	movf	___wmul@multiplier,w
  6054  0EE1  0421               	iorwf	___wmul@multiplier+1,w
  6055  0EE2  1D03               	btfss	3,2
  6056  0EE3  2ED0               	goto	l2426
  6057  0EE4  0825               	movf	___wmul@product+1,w
  6058  0EE5  00A1               	movwf	?___wmul+1
  6059  0EE6  0824               	movf	___wmul@product,w
  6060  0EE7  00A0               	movwf	?___wmul
  6061  0EE8  0008               	return
  6062  0EE9                     __end_of___wmul:	
  6063                           
  6064                           	psect	text24
  6065  0D9B                     __ptext24:	
  6066 ;; *************** function _TMR0_HasOverflowOccured *****************
  6067 ;; Defined at:
  6068 ;;		line 101 in file "mcc_generated_files/tmr0.c"
  6069 ;; Parameters:    Size  Location     Type
  6070 ;;		None
  6071 ;; Auto vars:     Size  Location     Type
  6072 ;;		None
  6073 ;; Return value:  Size  Location     Type
  6074 ;;                  1    wreg      unsigned char 
  6075 ;; Registers used:
  6076 ;;		wreg, status,2, status,0
  6077 ;; Tracked objects:
  6078 ;;		On entry : 0/0
  6079 ;;		On exit  : 0/0
  6080 ;;		Unchanged: 0/0
  6081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6083 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6085 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6086 ;;Total ram usage:        0 bytes
  6087 ;; Hardware stack levels used:    1
  6088 ;; Hardware stack levels required when called:    5
  6089 ;; This function calls:
  6090 ;;		Nothing
  6091 ;; This function is called by:
  6092 ;;		_PROTOCOL_Loop
  6093 ;; This function uses a non-reentrant model
  6094 ;;
  6095                           
  6096                           
  6097                           ;psect for function _TMR0_HasOverflowOccured
  6098  0D9B                     _TMR0_HasOverflowOccured:	
  6099                           
  6100                           ;tmr0.c: 104: return(INTCONbits.TMR0IF);
  6101                           
  6102                           ;incstack = 0
  6103                           ; Regs used in _TMR0_HasOverflowOccured: [wreg+status,2+status,0]
  6104  0D9B  0C0B               	rrf	11,w	;volatile
  6105  0D9C  0C89               	rrf	9,f
  6106  0D9D  3901               	andlw	1
  6107  0D9E  0008               	return
  6108  0D9F                     __end_of_TMR0_HasOverflowOccured:	
  6109                           
  6110                           	psect	text25
  6111  0E27                     __ptext25:	
  6112 ;; *************** function _PROTOCOL_Write_Device_Address *****************
  6113 ;; Defined at:
  6114 ;;		line 84 in file "protocol.c"
  6115 ;; Parameters:    Size  Location     Type
  6116 ;;  device_id_i2    1    wreg     unsigned char 
  6117 ;; Auto vars:     Size  Location     Type
  6118 ;;  device_id_i2    1    4[BANK0 ] unsigned char 
  6119 ;; Return value:  Size  Location     Type
  6120 ;;                  1    wreg      void 
  6121 ;; Registers used:
  6122 ;;		wreg, status,2, status,0, pclath, cstack
  6123 ;; Tracked objects:
  6124 ;;		On entry : 0/0
  6125 ;;		On exit  : 0/0
  6126 ;;		Unchanged: 0/0
  6127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6129 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6130 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6131 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6132 ;;Total ram usage:        2 bytes
  6133 ;; Hardware stack levels used:    1
  6134 ;; Hardware stack levels required when called:    6
  6135 ;; This function calls:
  6136 ;;		_DATAEE_WriteByte
  6137 ;; This function is called by:
  6138 ;;		_PROTOCOL_Loop
  6139 ;; This function uses a non-reentrant model
  6140 ;;
  6141                           
  6142                           
  6143                           ;psect for function _PROTOCOL_Write_Device_Address
  6144  0E27                     _PROTOCOL_Write_Device_Address:	
  6145                           
  6146                           ;incstack = 0
  6147                           ; Regs used in _PROTOCOL_Write_Device_Address: [wreg+status,2+status,0+pclath+cstack]
  6148                           ;PROTOCOL_Write_Device_Address@device_id_i2c stored from wreg
  6149  0E27  0020               	movlb	0	; select bank0
  6150  0E28  00A4               	movwf	PROTOCOL_Write_Device_Address@device_id_i2c
  6151                           
  6152                           ;protocol.c: 85: DATAEE_WriteByte(0, device_id_i2c);
  6153  0E29  0824               	movf	PROTOCOL_Write_Device_Address@device_id_i2c,w
  6154  0E2A  00A3               	movwf	??_PROTOCOL_Write_Device_Address
  6155  0E2B  0823               	movf	??_PROTOCOL_Write_Device_Address,w
  6156  0E2C  00A0               	movwf	DATAEE_WriteByte@bData
  6157  0E2D  3000               	movlw	0
  6158  0E2E  318F  2765         	fcall	_DATAEE_WriteByte
  6159                           
  6160                           ;protocol.c: 86: slave_address = device_id_i2c;
  6161  0E30  0020               	movlb	0	; select bank0
  6162  0E31  0824               	movf	PROTOCOL_Write_Device_Address@device_id_i2c,w
  6163  0E32  00A3               	movwf	??_PROTOCOL_Write_Device_Address
  6164  0E33  0823               	movf	??_PROTOCOL_Write_Device_Address,w
  6165  0E34  00DD               	movwf	_slave_address
  6166  0E35  0008               	return
  6167  0E36                     __end_of_PROTOCOL_Write_Device_Address:	
  6168                           
  6169                           	psect	text26
  6170  0D85                     __ptext26:	
  6171 ;; *************** function _PROTOCOL_STP *****************
  6172 ;; Defined at:
  6173 ;;		line 98 in file "protocol.c"
  6174 ;; Parameters:    Size  Location     Type
  6175 ;;		None
  6176 ;; Auto vars:     Size  Location     Type
  6177 ;;		None
  6178 ;; Return value:  Size  Location     Type
  6179 ;;                  1    wreg      void 
  6180 ;; Registers used:
  6181 ;;		wreg, status,2, status,0
  6182 ;; Tracked objects:
  6183 ;;		On entry : 0/0
  6184 ;;		On exit  : 0/0
  6185 ;;		Unchanged: 0/0
  6186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6187 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6188 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6189 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6190 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6191 ;;Total ram usage:        0 bytes
  6192 ;; Hardware stack levels used:    1
  6193 ;; Hardware stack levels required when called:    5
  6194 ;; This function calls:
  6195 ;;		Nothing
  6196 ;; This function is called by:
  6197 ;;		_PROTOCOL_Loop
  6198 ;; This function uses a non-reentrant model
  6199 ;;
  6200                           
  6201                           
  6202                           ;psect for function _PROTOCOL_STP
  6203  0D85                     _PROTOCOL_STP:	
  6204                           
  6205                           ;protocol.c: 100: running = 0;
  6206                           
  6207                           ;incstack = 0
  6208                           ; Regs used in _PROTOCOL_STP: [wreg+status,2+status,0]
  6209  0D85  0020               	movlb	0	; select bank0
  6210  0D86  01D9               	clrf	_running
  6211  0D87  0008               	return
  6212  0D88                     __end_of_PROTOCOL_STP:	
  6213                           
  6214                           	psect	text27
  6215  0D97                     __ptext27:	
  6216 ;; *************** function _PROTOCOL_STA *****************
  6217 ;; Defined at:
  6218 ;;		line 93 in file "protocol.c"
  6219 ;; Parameters:    Size  Location     Type
  6220 ;;		None
  6221 ;; Auto vars:     Size  Location     Type
  6222 ;;		None
  6223 ;; Return value:  Size  Location     Type
  6224 ;;                  1    wreg      void 
  6225 ;; Registers used:
  6226 ;;		wreg, status,2, status,0
  6227 ;; Tracked objects:
  6228 ;;		On entry : 0/0
  6229 ;;		On exit  : 0/0
  6230 ;;		Unchanged: 0/0
  6231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6233 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6235 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6236 ;;Total ram usage:        0 bytes
  6237 ;; Hardware stack levels used:    1
  6238 ;; Hardware stack levels required when called:    5
  6239 ;; This function calls:
  6240 ;;		Nothing
  6241 ;; This function is called by:
  6242 ;;		_PROTOCOL_Loop
  6243 ;; This function uses a non-reentrant model
  6244 ;;
  6245                           
  6246                           
  6247                           ;psect for function _PROTOCOL_STA
  6248  0D97                     _PROTOCOL_STA:	
  6249                           
  6250                           ;protocol.c: 95: running = 1;
  6251                           
  6252                           ;incstack = 0
  6253                           ; Regs used in _PROTOCOL_STA: [wreg+status,2+status,0]
  6254  0D97  0020               	movlb	0	; select bank0
  6255  0D98  01D9               	clrf	_running
  6256  0D99  0AD9               	incf	_running,f
  6257  0D9A  0008               	return
  6258  0D9B                     __end_of_PROTOCOL_STA:	
  6259                           
  6260                           	psect	text28
  6261  0DBA                     __ptext28:	
  6262 ;; *************** function _PROTOCOL_SET *****************
  6263 ;; Defined at:
  6264 ;;		line 111 in file "protocol.c"
  6265 ;; Parameters:    Size  Location     Type
  6266 ;;  value_          1    wreg     unsigned char 
  6267 ;; Auto vars:     Size  Location     Type
  6268 ;;  value_          1    1[BANK0 ] unsigned char 
  6269 ;; Return value:  Size  Location     Type
  6270 ;;                  1    wreg      void 
  6271 ;; Registers used:
  6272 ;;		wreg, status,2, status,0
  6273 ;; Tracked objects:
  6274 ;;		On entry : 0/0
  6275 ;;		On exit  : 0/0
  6276 ;;		Unchanged: 0/0
  6277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6279 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6280 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6281 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6282 ;;Total ram usage:        2 bytes
  6283 ;; Hardware stack levels used:    1
  6284 ;; Hardware stack levels required when called:    5
  6285 ;; This function calls:
  6286 ;;		Nothing
  6287 ;; This function is called by:
  6288 ;;		_PROTOCOL_Loop
  6289 ;; This function uses a non-reentrant model
  6290 ;;
  6291                           
  6292                           
  6293                           ;psect for function _PROTOCOL_SET
  6294  0DBA                     _PROTOCOL_SET:	
  6295                           
  6296                           ;incstack = 0
  6297                           ; Regs used in _PROTOCOL_SET: [wreg+status,2+status,0]
  6298                           ;PROTOCOL_SET@value_ stored from wreg
  6299  0DBA  0020               	movlb	0	; select bank0
  6300  0DBB  00A1               	movwf	PROTOCOL_SET@value_
  6301                           
  6302                           ;protocol.c: 112: value = value_;
  6303  0DBC  0821               	movf	PROTOCOL_SET@value_,w
  6304  0DBD  00A0               	movwf	??_PROTOCOL_SET
  6305  0DBE  0820               	movf	??_PROTOCOL_SET,w
  6306  0DBF  00DB               	movwf	_value
  6307  0DC0  0008               	return
  6308  0DC1                     __end_of_PROTOCOL_SET:	
  6309                           
  6310                           	psect	text29
  6311  0DD9                     __ptext29:	
  6312 ;; *************** function _PROTOCOL_SAV *****************
  6313 ;; Defined at:
  6314 ;;		line 107 in file "protocol.c"
  6315 ;; Parameters:    Size  Location     Type
  6316 ;;		None
  6317 ;; Auto vars:     Size  Location     Type
  6318 ;;		None
  6319 ;; Return value:  Size  Location     Type
  6320 ;;                  1    wreg      void 
  6321 ;; Registers used:
  6322 ;;		wreg, status,2, status,0, pclath, cstack
  6323 ;; Tracked objects:
  6324 ;;		On entry : 0/0
  6325 ;;		On exit  : 0/0
  6326 ;;		Unchanged: 0/0
  6327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6329 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6330 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6331 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6332 ;;Total ram usage:        1 bytes
  6333 ;; Hardware stack levels used:    1
  6334 ;; Hardware stack levels required when called:    6
  6335 ;; This function calls:
  6336 ;;		_DATAEE_WriteByte
  6337 ;; This function is called by:
  6338 ;;		_PROTOCOL_Loop
  6339 ;; This function uses a non-reentrant model
  6340 ;;
  6341                           
  6342                           
  6343                           ;psect for function _PROTOCOL_SAV
  6344  0DD9                     _PROTOCOL_SAV:	
  6345                           
  6346                           ;protocol.c: 108: DATAEE_WriteByte(1, value);
  6347                           
  6348                           ;incstack = 0
  6349                           ; Regs used in _PROTOCOL_SAV: [wreg+status,2+status,0+pclath+cstack]
  6350  0DD9  0020               	movlb	0	; select bank0
  6351  0DDA  085B               	movf	_value,w
  6352  0DDB  00A3               	movwf	??_PROTOCOL_SAV
  6353  0DDC  0823               	movf	??_PROTOCOL_SAV,w
  6354  0DDD  00A0               	movwf	DATAEE_WriteByte@bData
  6355  0DDE  3001               	movlw	1
  6356  0DDF  318F  2765         	fcall	_DATAEE_WriteByte
  6357  0DE1  0008               	return
  6358  0DE2                     __end_of_PROTOCOL_SAV:	
  6359                           
  6360                           	psect	text30
  6361  0F65                     __ptext30:	
  6362 ;; *************** function _DATAEE_WriteByte *****************
  6363 ;; Defined at:
  6364 ;;		line 180 in file "mcc_generated_files/memory.c"
  6365 ;; Parameters:    Size  Location     Type
  6366 ;;  bAdd            1    wreg     unsigned char 
  6367 ;;  bData           1    0[BANK0 ] unsigned char 
  6368 ;; Auto vars:     Size  Location     Type
  6369 ;;  bAdd            1    1[BANK0 ] unsigned char 
  6370 ;;  GIEBitValue     1    2[BANK0 ] unsigned char 
  6371 ;; Return value:  Size  Location     Type
  6372 ;;                  1    wreg      void 
  6373 ;; Registers used:
  6374 ;;		wreg, status,2, status,0
  6375 ;; Tracked objects:
  6376 ;;		On entry : 0/0
  6377 ;;		On exit  : 0/0
  6378 ;;		Unchanged: 0/0
  6379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6380 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6381 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6383 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6384 ;;Total ram usage:        3 bytes
  6385 ;; Hardware stack levels used:    1
  6386 ;; Hardware stack levels required when called:    5
  6387 ;; This function calls:
  6388 ;;		Nothing
  6389 ;; This function is called by:
  6390 ;;		_PROTOCOL_Write_Device_Address
  6391 ;;		_PROTOCOL_SAV
  6392 ;; This function uses a non-reentrant model
  6393 ;;
  6394                           
  6395                           
  6396                           ;psect for function _DATAEE_WriteByte
  6397  0F65                     _DATAEE_WriteByte:	
  6398                           
  6399                           ;incstack = 0
  6400                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
  6401                           ;DATAEE_WriteByte@bAdd stored from wreg
  6402  0F65  0020               	movlb	0	; select bank0
  6403  0F66  00A1               	movwf	DATAEE_WriteByte@bAdd
  6404                           
  6405                           ;memory.c: 182: uint8_t GIEBitValue = 0;
  6406  0F67  01A2               	clrf	DATAEE_WriteByte@GIEBitValue
  6407                           
  6408                           ;memory.c: 184: EEADRL = (bAdd & 0x0ff);
  6409  0F68  0821               	movf	DATAEE_WriteByte@bAdd,w
  6410  0F69  0023               	movlb	3	; select bank3
  6411  0F6A  0091               	movwf	17	;volatile
  6412                           
  6413                           ;memory.c: 185: EEDATL = bData;
  6414  0F6B  0020               	movlb	0	; select bank0
  6415  0F6C  0820               	movf	DATAEE_WriteByte@bData,w
  6416  0F6D  0023               	movlb	3	; select bank3
  6417  0F6E  0093               	movwf	19	;volatile
  6418                           
  6419                           ;memory.c: 186: EECON1bits.EEPGD = 0;
  6420  0F6F  1395               	bcf	21,7	;volsfr
  6421                           
  6422                           ;memory.c: 187: EECON1bits.CFGS = 0;
  6423  0F70  1315               	bcf	21,6	;volsfr
  6424                           
  6425                           ;memory.c: 188: EECON1bits.WREN = 1;
  6426  0F71  1515               	bsf	21,2	;volsfr
  6427                           
  6428                           ;memory.c: 190: GIEBitValue = INTCONbits.GIE;
  6429  0F72  3000               	movlw	0
  6430  0F73  1B8B               	btfsc	11,7	;volatile
  6431  0F74  3001               	movlw	1
  6432  0F75  0020               	movlb	0	; select bank0
  6433  0F76  00A2               	movwf	DATAEE_WriteByte@GIEBitValue
  6434                           
  6435                           ;memory.c: 191: INTCONbits.GIE = 0;
  6436  0F77  138B               	bcf	11,7	;volatile
  6437                           
  6438                           ;memory.c: 192: EECON2 = 0x55;
  6439  0F78  3055               	movlw	85
  6440  0F79  0023               	movlb	3	; select bank3
  6441  0F7A  0096               	movwf	22	;volsfr
  6442                           
  6443                           ;memory.c: 193: EECON2 = 0xAA;
  6444  0F7B  30AA               	movlw	170
  6445  0F7C  0096               	movwf	22	;volsfr
  6446                           
  6447                           ;memory.c: 194: EECON1bits.WR = 1;
  6448  0F7D  1495               	bsf	21,1	;volsfr
  6449  0F7E                     l321:	
  6450                           ;memory.c: 197: {
  6451                           
  6452                           ;memory.c: 196: while (EECON1bits.WR)
  6453                           
  6454  0F7E  1895               	btfsc	21,1	;volsfr
  6455  0F7F  2F7E               	goto	l321
  6456                           
  6457                           ;memory.c: 198: }
  6458                           ;memory.c: 200: EECON1bits.WREN = 0;
  6459  0F80  1115               	bcf	21,2	;volsfr
  6460                           
  6461                           ;memory.c: 201: INTCONbits.GIE = GIEBitValue;
  6462  0F81  0020               	movlb	0	; select bank0
  6463  0F82  0C22               	rrf	DATAEE_WriteByte@GIEBitValue,w
  6464  0F83  1C03               	skipc
  6465  0F84  138B               	bcf	11,7	;volatile
  6466  0F85  1803               	skipnc
  6467  0F86  178B               	bsf	11,7	;volatile
  6468  0F87  0008               	return
  6469  0F88                     __end_of_DATAEE_WriteByte:	
  6470                           
  6471                           	psect	text31
  6472  0D75                     __ptext31:	
  6473 ;; *************** function _PROTOCOL_EXT *****************
  6474 ;; Defined at:
  6475 ;;		line 116 in file "protocol.c"
  6476 ;; Parameters:    Size  Location     Type
  6477 ;;  char_buf        1    wreg     PTR unsigned char 
  6478 ;;		 -> buf(48), I2C1_StatusCallback@ext_buf(48), 
  6479 ;; Auto vars:     Size  Location     Type
  6480 ;;  char_buf        1    0[BANK0 ] PTR unsigned char 
  6481 ;;		 -> buf(48), I2C1_StatusCallback@ext_buf(48), 
  6482 ;; Return value:  Size  Location     Type
  6483 ;;                  1    wreg      void 
  6484 ;; Registers used:
  6485 ;;		wreg, status,2, status,0
  6486 ;; Tracked objects:
  6487 ;;		On entry : 0/0
  6488 ;;		On exit  : 0/0
  6489 ;;		Unchanged: 0/0
  6490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6492 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6494 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6495 ;;Total ram usage:        1 bytes
  6496 ;; Hardware stack levels used:    1
  6497 ;; Hardware stack levels required when called:    5
  6498 ;; This function calls:
  6499 ;;		Nothing
  6500 ;; This function is called by:
  6501 ;;		_PROTOCOL_Loop
  6502 ;; This function uses a non-reentrant model
  6503 ;;
  6504                           
  6505                           
  6506                           ;psect for function _PROTOCOL_EXT
  6507  0D75                     _PROTOCOL_EXT:	
  6508                           
  6509                           ;incstack = 0
  6510                           ; Regs used in _PROTOCOL_EXT: [wreg+status,2+status,0]
  6511  0D75  0008               	return
  6512  0D76                     __end_of_PROTOCOL_EXT:	
  6513                           
  6514                           	psect	text32
  6515  0F25                     __ptext32:	
  6516 ;; *************** function _EUSART_Read *****************
  6517 ;; Defined at:
  6518 ;;		line 112 in file "mcc_generated_files/eusart.c"
  6519 ;; Parameters:    Size  Location     Type
  6520 ;;		None
  6521 ;; Auto vars:     Size  Location     Type
  6522 ;;  readValue       1    1[BANK0 ] unsigned char 
  6523 ;; Return value:  Size  Location     Type
  6524 ;;                  1    wreg      unsigned char 
  6525 ;; Registers used:
  6526 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6527 ;; Tracked objects:
  6528 ;;		On entry : 0/0
  6529 ;;		On exit  : 0/0
  6530 ;;		Unchanged: 0/0
  6531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6533 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6534 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6535 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6536 ;;Total ram usage:        2 bytes
  6537 ;; Hardware stack levels used:    1
  6538 ;; Hardware stack levels required when called:    5
  6539 ;; This function calls:
  6540 ;;		Nothing
  6541 ;; This function is called by:
  6542 ;;		_PROTOCOL_Loop
  6543 ;;		_getch
  6544 ;; This function uses a non-reentrant model
  6545 ;;
  6546                           
  6547                           
  6548                           ;psect for function _EUSART_Read
  6549  0F25                     _EUSART_Read:	
  6550                           
  6551                           ;eusart.c: 114: uint8_t readValue = 0;
  6552                           
  6553                           ;incstack = 0
  6554                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  6555  0F25  0020               	movlb	0	; select bank0
  6556  0F26  01A1               	clrf	EUSART_Read@readValue
  6557  0F27                     l2886:	
  6558                           ;eusart.c: 117: {
  6559                           
  6560                           ;eusart.c: 116: while(0 == eusartRxCount)
  6561                           
  6562  0F27  0860               	movf	_eusartRxCount,w	;volatile
  6563  0F28  1903               	btfsc	3,2
  6564  0F29  2F27               	goto	l2886
  6565                           
  6566                           ;eusart.c: 118: }
  6567                           ;eusart.c: 120: readValue = eusartRxBuffer[eusartRxTail++];
  6568  0F2A  0861               	movf	_eusartRxTail,w
  6569  0F2B  3EA0               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  6570  0F2C  0086               	movwf	6
  6571  0F2D  0187               	clrf	7
  6572  0F2E  0801               	movf	1,w
  6573  0F2F  00A0               	movwf	??_EUSART_Read
  6574  0F30  0820               	movf	??_EUSART_Read,w
  6575  0F31  00A1               	movwf	EUSART_Read@readValue
  6576  0F32  3001               	movlw	1
  6577  0F33  00A0               	movwf	??_EUSART_Read
  6578  0F34  0820               	movf	??_EUSART_Read,w
  6579  0F35  07E1               	addwf	_eusartRxTail,f	;volatile
  6580                           
  6581                           ;eusart.c: 121: if(sizeof(eusartRxBuffer) <= eusartRxTail)
  6582  0F36  3008               	movlw	8
  6583  0F37  0261               	subwf	_eusartRxTail,w	;volatile
  6584  0F38  1803               	btfsc	3,0
  6585                           
  6586                           ;eusart.c: 122: {
  6587                           ;eusart.c: 123: eusartRxTail = 0;
  6588  0F39  01E1               	clrf	_eusartRxTail	;volatile
  6589                           
  6590                           ;eusart.c: 124: }
  6591                           ;eusart.c: 125: PIE1bits.RCIE = 0;
  6592  0F3A  0021               	movlb	1	; select bank1
  6593  0F3B  1291               	bcf	17,5	;volatile
  6594                           
  6595                           ;eusart.c: 126: eusartRxCount--;
  6596  0F3C  3001               	movlw	1
  6597  0F3D  0020               	movlb	0	; select bank0
  6598  0F3E  02E0               	subwf	_eusartRxCount,f	;volatile
  6599                           
  6600                           ;eusart.c: 127: PIE1bits.RCIE = 1;
  6601  0F3F  0021               	movlb	1	; select bank1
  6602  0F40  1691               	bsf	17,5	;volatile
  6603                           
  6604                           ;eusart.c: 129: return readValue;
  6605  0F41  0020               	movlb	0	; select bank0
  6606  0F42  0821               	movf	EUSART_Read@readValue,w
  6607  0F43  0008               	return
  6608  0F44                     __end_of_EUSART_Read:	
  6609                           
  6610                           	psect	text33
  6611  06B9                     __ptext33:	
  6612 ;; *************** function _PROTOCOL_Initialize *****************
  6613 ;; Defined at:
  6614 ;;		line 59 in file "protocol.c"
  6615 ;; Parameters:    Size  Location     Type
  6616 ;;  device_id       2    1[BANK0 ] PTR const unsigned char 
  6617 ;;		 -> STR_1(11), 
  6618 ;;  start_handle    1    3[BANK0 ] PTR void 
  6619 ;;		 -> NULL(0), 
  6620 ;;  stop_handler    1    4[BANK0 ] PTR void 
  6621 ;;		 -> NULL(0), 
  6622 ;;  set_handler     1    5[BANK0 ] PTR void 
  6623 ;;		 -> NULL(0), 
  6624 ;;  inv_handler     2    6[BANK0 ] PTR void 
  6625 ;;		 -> inv_handler(1), 
  6626 ;;  scaler          1    8[BANK0 ] unsigned char 
  6627 ;; Auto vars:     Size  Location     Type
  6628 ;;		None
  6629 ;; Return value:  Size  Location     Type
  6630 ;;                  1    wreg      void 
  6631 ;; Registers used:
  6632 ;;		wreg, status,2, status,0, pclath, cstack
  6633 ;; Tracked objects:
  6634 ;;		On entry : 0/0
  6635 ;;		On exit  : 0/0
  6636 ;;		Unchanged: 0/0
  6637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6638 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6639 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6640 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6641 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6642 ;;Total ram usage:       10 bytes
  6643 ;; Hardware stack levels used:    1
  6644 ;; Hardware stack levels required when called:    6
  6645 ;; This function calls:
  6646 ;;		_DATAEE_ReadByte
  6647 ;; This function is called by:
  6648 ;;		_main
  6649 ;; This function uses a non-reentrant model
  6650 ;;
  6651                           
  6652                           
  6653                           ;psect for function _PROTOCOL_Initialize
  6654  06B9                     _PROTOCOL_Initialize:	
  6655                           
  6656                           ;protocol.c: 60: device_id_ = device_id;
  6657                           
  6658                           ;incstack = 0
  6659                           ; Regs used in _PROTOCOL_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6660  06B9  0020               	movlb	0	; select bank0
  6661  06BA  0822               	movf	PROTOCOL_Initialize@device_id+1,w
  6662  06BB  0021               	movlb	1	; select bank1
  6663  06BC  00D6               	movwf	(_device_id_+1)^(0+128)
  6664  06BD  0020               	movlb	0	; select bank0
  6665  06BE  0821               	movf	PROTOCOL_Initialize@device_id,w
  6666  06BF  0021               	movlb	1	; select bank1
  6667  06C0  00D5               	movwf	_device_id_^(0+128)
  6668                           
  6669                           ;protocol.c: 61: PROTOCOL_Start_Handler = start_handler;
  6670  06C1  0020               	movlb	0	; select bank0
  6671  06C2  0823               	movf	PROTOCOL_Initialize@start_handler,w
  6672  06C3  00A9               	movwf	??_PROTOCOL_Initialize
  6673  06C4  3000               	movlw	0
  6674  06C5  00AA               	movwf	??_PROTOCOL_Initialize+1
  6675  06C6  0829               	movf	??_PROTOCOL_Initialize,w
  6676  06C7  0021               	movlb	1	; select bank1
  6677  06C8  00DB               	movwf	_PROTOCOL_Start_Handler^(0+128)
  6678  06C9  0020               	movlb	0	; select bank0
  6679  06CA  082A               	movf	??_PROTOCOL_Initialize+1,w
  6680  06CB  0021               	movlb	1	; select bank1
  6681  06CC  00DC               	movwf	(_PROTOCOL_Start_Handler+1)^(0+128)
  6682                           
  6683                           ;protocol.c: 62: PROTOCOL_Stop_Handler = stop_handler;
  6684  06CD  0020               	movlb	0	; select bank0
  6685  06CE  0824               	movf	PROTOCOL_Initialize@stop_handler,w
  6686  06CF  00A9               	movwf	??_PROTOCOL_Initialize
  6687  06D0  3000               	movlw	0
  6688  06D1  00AA               	movwf	??_PROTOCOL_Initialize+1
  6689  06D2  0829               	movf	??_PROTOCOL_Initialize,w
  6690  06D3  0021               	movlb	1	; select bank1
  6691  06D4  00D9               	movwf	_PROTOCOL_Stop_Handler^(0+128)
  6692  06D5  0020               	movlb	0	; select bank0
  6693  06D6  082A               	movf	??_PROTOCOL_Initialize+1,w
  6694  06D7  0021               	movlb	1	; select bank1
  6695  06D8  00DA               	movwf	(_PROTOCOL_Stop_Handler+1)^(0+128)
  6696                           
  6697                           ;protocol.c: 63: PROTOCOL_Set_Handler = set_handler;
  6698  06D9  0020               	movlb	0	; select bank0
  6699  06DA  0825               	movf	PROTOCOL_Initialize@set_handler,w
  6700  06DB  00A9               	movwf	??_PROTOCOL_Initialize
  6701  06DC  3000               	movlw	0
  6702  06DD  00AA               	movwf	??_PROTOCOL_Initialize+1
  6703  06DE  0829               	movf	??_PROTOCOL_Initialize,w
  6704  06DF  0021               	movlb	1	; select bank1
  6705  06E0  00D7               	movwf	_PROTOCOL_Set_Handler^(0+128)
  6706  06E1  0020               	movlb	0	; select bank0
  6707  06E2  082A               	movf	??_PROTOCOL_Initialize+1,w
  6708  06E3  0021               	movlb	1	; select bank1
  6709  06E4  00D8               	movwf	(_PROTOCOL_Set_Handler+1)^(0+128)
  6710                           
  6711                           ;protocol.c: 66: value = DATAEE_ReadByte(1);
  6712  06E5  3001               	movlw	1
  6713  06E6  318D  25FE  3186   	fcall	_DATAEE_ReadByte
  6714  06E9  0020               	movlb	0	; select bank0
  6715  06EA  00A9               	movwf	??_PROTOCOL_Initialize
  6716  06EB  0829               	movf	??_PROTOCOL_Initialize,w
  6717  06EC  00DB               	movwf	_value
  6718                           
  6719                           ;protocol.c: 68: slave_address = DATAEE_ReadByte(0);
  6720  06ED  3000               	movlw	0
  6721  06EE  318D  25FE         	fcall	_DATAEE_ReadByte
  6722  06F0  0020               	movlb	0	; select bank0
  6723  06F1  00A9               	movwf	??_PROTOCOL_Initialize
  6724  06F2  0829               	movf	??_PROTOCOL_Initialize,w
  6725  06F3  00DD               	movwf	_slave_address
  6726                           
  6727                           ;protocol.c: 71: readbuf.status = COMPLETE;
  6728  06F4  3003               	movlw	3
  6729  06F5  00A9               	movwf	??_PROTOCOL_Initialize
  6730  06F6  0829               	movf	??_PROTOCOL_Initialize,w
  6731  06F7  00EA               	movwf	_readbuf+3
  6732                           
  6733                           ;protocol.c: 72: PROTOCOL_Inv_Handler = inv_handler;
  6734  06F8  0827               	movf	PROTOCOL_Initialize@inv_handler+1,w
  6735  06F9  00D1               	movwf	_PROTOCOL_Inv_Handler+1
  6736  06FA  0826               	movf	PROTOCOL_Initialize@inv_handler,w
  6737  06FB  00D0               	movwf	_PROTOCOL_Inv_Handler
  6738                           
  6739                           ;protocol.c: 73: tmr_scaler = scaler;
  6740  06FC  0828               	movf	PROTOCOL_Initialize@scaler,w
  6741  06FD  00A9               	movwf	??_PROTOCOL_Initialize
  6742  06FE  0829               	movf	??_PROTOCOL_Initialize,w
  6743  06FF  00EC               	movwf	_tmr_scaler
  6744  0700  0008               	return
  6745  0701                     __end_of_PROTOCOL_Initialize:	
  6746                           
  6747                           	psect	text34
  6748  0DFE                     __ptext34:	
  6749 ;; *************** function _DATAEE_ReadByte *****************
  6750 ;; Defined at:
  6751 ;;		line 204 in file "mcc_generated_files/memory.c"
  6752 ;; Parameters:    Size  Location     Type
  6753 ;;  bAdd            1    wreg     unsigned char 
  6754 ;; Auto vars:     Size  Location     Type
  6755 ;;  bAdd            1    0[BANK0 ] unsigned char 
  6756 ;; Return value:  Size  Location     Type
  6757 ;;                  1    wreg      unsigned char 
  6758 ;; Registers used:
  6759 ;;		wreg
  6760 ;; Tracked objects:
  6761 ;;		On entry : 0/0
  6762 ;;		On exit  : 0/0
  6763 ;;		Unchanged: 0/0
  6764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6766 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6768 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6769 ;;Total ram usage:        1 bytes
  6770 ;; Hardware stack levels used:    1
  6771 ;; Hardware stack levels required when called:    5
  6772 ;; This function calls:
  6773 ;;		Nothing
  6774 ;; This function is called by:
  6775 ;;		_PROTOCOL_Initialize
  6776 ;; This function uses a non-reentrant model
  6777 ;;
  6778                           
  6779                           
  6780                           ;psect for function _DATAEE_ReadByte
  6781  0DFE                     _DATAEE_ReadByte:	
  6782                           
  6783                           ;incstack = 0
  6784                           ; Regs used in _DATAEE_ReadByte: [wreg]
  6785                           ;DATAEE_ReadByte@bAdd stored from wreg
  6786  0DFE  0020               	movlb	0	; select bank0
  6787  0DFF  00A0               	movwf	DATAEE_ReadByte@bAdd
  6788                           
  6789                           ;memory.c: 206: EEADRL = (bAdd & 0x0ff);
  6790  0E00  0820               	movf	DATAEE_ReadByte@bAdd,w
  6791  0E01  0023               	movlb	3	; select bank3
  6792  0E02  0091               	movwf	17	;volatile
  6793                           
  6794                           ;memory.c: 207: EECON1bits.CFGS = 0;
  6795  0E03  1315               	bcf	21,6	;volsfr
  6796                           
  6797                           ;memory.c: 208: EECON1bits.EEPGD = 0;
  6798  0E04  1395               	bcf	21,7	;volsfr
  6799                           
  6800                           ;memory.c: 209: EECON1bits.RD = 1;
  6801  0E05  1415               	bsf	21,0	;volsfr
  6802                           
  6803                           ;memory.c: 210: __nop();
  6804  0E06  0000               	nop
  6805                           
  6806                           ;memory.c: 211: __nop();
  6807  0E07  0000               	nop
  6808                           
  6809                           ;memory.c: 213: return (EEDATL);
  6810  0E08  0023               	movlb	3	; select bank3
  6811  0E09  0813               	movf	19,w	;volatile
  6812  0E0A  0008               	return
  6813  0E0B                     __end_of_DATAEE_ReadByte:	
  6814                           
  6815                           	psect	text35
  6816  0F06                     __ptext35:	
  6817 ;; *************** function _PIN_MANAGER_Initialize *****************
  6818 ;; Defined at:
  6819 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
  6820 ;; Parameters:    Size  Location     Type
  6821 ;;		None
  6822 ;; Auto vars:     Size  Location     Type
  6823 ;;		None
  6824 ;; Return value:  Size  Location     Type
  6825 ;;                  1    wreg      void 
  6826 ;; Registers used:
  6827 ;;		wreg, status,2
  6828 ;; Tracked objects:
  6829 ;;		On entry : 0/0
  6830 ;;		On exit  : 0/0
  6831 ;;		Unchanged: 0/0
  6832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6834 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6836 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6837 ;;Total ram usage:        0 bytes
  6838 ;; Hardware stack levels used:    1
  6839 ;; Hardware stack levels required when called:    5
  6840 ;; This function calls:
  6841 ;;		Nothing
  6842 ;; This function is called by:
  6843 ;;		_main
  6844 ;;		_SYSTEM_Initialize
  6845 ;; This function uses a non-reentrant model
  6846 ;;
  6847                           
  6848                           
  6849                           ;psect for function _PIN_MANAGER_Initialize
  6850  0F06                     _PIN_MANAGER_Initialize:	
  6851                           
  6852                           ;pin_manager.c: 56: LATA = 0x00;
  6853                           
  6854                           ;incstack = 0
  6855                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  6856  0F06  0022               	movlb	2	; select bank2
  6857  0F07  018C               	clrf	12	;volatile
  6858                           
  6859                           ;pin_manager.c: 57: LATB = 0x00;
  6860  0F08  018D               	clrf	13	;volatile
  6861                           
  6862                           ;pin_manager.c: 58: LATC = 0x00;
  6863  0F09  018E               	clrf	14	;volatile
  6864                           
  6865                           ;pin_manager.c: 63: TRISA = 0x3F;
  6866  0F0A  303F               	movlw	63
  6867  0F0B  0021               	movlb	1	; select bank1
  6868  0F0C  008C               	movwf	12	;volatile
  6869                           
  6870                           ;pin_manager.c: 64: TRISB = 0xF0;
  6871  0F0D  30F0               	movlw	240
  6872  0F0E  008D               	movwf	13	;volatile
  6873                           
  6874                           ;pin_manager.c: 65: TRISC = 0x7F;
  6875  0F0F  307F               	movlw	127
  6876  0F10  008E               	movwf	14	;volatile
  6877                           
  6878                           ;pin_manager.c: 70: ANSELC = 0x4F;
  6879  0F11  304F               	movlw	79
  6880  0F12  0023               	movlb	3	; select bank3
  6881  0F13  008E               	movwf	14	;volatile
  6882                           
  6883                           ;pin_manager.c: 71: ANSELB = 0x20;
  6884  0F14  3020               	movlw	32
  6885  0F15  008D               	movwf	13	;volatile
  6886                           
  6887                           ;pin_manager.c: 72: ANSELA = 0x17;
  6888  0F16  3017               	movlw	23
  6889  0F17  008C               	movwf	12	;volatile
  6890                           
  6891                           ;pin_manager.c: 77: WPUB = 0x00;
  6892  0F18  0024               	movlb	4	; select bank4
  6893  0F19  018D               	clrf	13	;volatile
  6894                           
  6895                           ;pin_manager.c: 78: WPUA = 0x3F;
  6896  0F1A  303F               	movlw	63
  6897  0F1B  008C               	movwf	12	;volatile
  6898                           
  6899                           ;pin_manager.c: 79: WPUC = 0x3F;
  6900  0F1C  303F               	movlw	63
  6901  0F1D  008E               	movwf	14	;volatile
  6902                           
  6903                           ;pin_manager.c: 80: OPTION_REGbits.nWPUEN = 0;
  6904  0F1E  0021               	movlb	1	; select bank1
  6905  0F1F  1395               	bcf	21,7	;volatile
  6906                           
  6907                           ;pin_manager.c: 86: APFCON1 = 0x00;
  6908  0F20  0022               	movlb	2	; select bank2
  6909  0F21  019E               	clrf	30	;volatile
  6910                           
  6911                           ;pin_manager.c: 87: APFCON0 = 0x84;
  6912  0F22  3084               	movlw	132
  6913  0F23  009D               	movwf	29	;volatile
  6914  0F24  0008               	return
  6915  0F25                     __end_of_PIN_MANAGER_Initialize:	
  6916                           
  6917                           	psect	text36
  6918  07FB                     __ptext36:	
  6919 ;; *************** function _OSCILLATOR_Initialize *****************
  6920 ;; Defined at:
  6921 ;;		line 81 in file "mcc_generated_files/mcc.c"
  6922 ;; Parameters:    Size  Location     Type
  6923 ;;		None
  6924 ;; Auto vars:     Size  Location     Type
  6925 ;;		None
  6926 ;; Return value:  Size  Location     Type
  6927 ;;                  1    wreg      void 
  6928 ;; Registers used:
  6929 ;;		wreg, status,2
  6930 ;; Tracked objects:
  6931 ;;		On entry : 0/0
  6932 ;;		On exit  : 0/0
  6933 ;;		Unchanged: 0/0
  6934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6935 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6936 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6938 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6939 ;;Total ram usage:        0 bytes
  6940 ;; Hardware stack levels used:    1
  6941 ;; Hardware stack levels required when called:    5
  6942 ;; This function calls:
  6943 ;;		Nothing
  6944 ;; This function is called by:
  6945 ;;		_main
  6946 ;;		_SYSTEM_Initialize
  6947 ;; This function uses a non-reentrant model
  6948 ;;
  6949                           
  6950                           
  6951                           ;psect for function _OSCILLATOR_Initialize
  6952  07FB                     _OSCILLATOR_Initialize:	
  6953                           
  6954                           ;mcc.c: 84: OSCCON = 0x68;
  6955                           
  6956                           ;incstack = 0
  6957                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  6958  07FB  3068               	movlw	104
  6959  07FC  0021               	movlb	1	; select bank1
  6960  07FD  0099               	movwf	25	;volatile
  6961                           
  6962                           ;mcc.c: 86: OSCTUNE = 0x00;
  6963  07FE  0198               	clrf	24	;volatile
  6964  07FF  0008               	return
  6965  0800                     __end_of_OSCILLATOR_Initialize:	
  6966                           
  6967                           	psect	text37
  6968  0F44                     __ptext37:	
  6969 ;; *************** function _I2C1_Initialize *****************
  6970 ;; Defined at:
  6971 ;;		line 30 in file "mcc_generated_files/i2c1.c"
  6972 ;; Parameters:    Size  Location     Type
  6973 ;;		None
  6974 ;; Auto vars:     Size  Location     Type
  6975 ;;		None
  6976 ;; Return value:  Size  Location     Type
  6977 ;;                  1    wreg      void 
  6978 ;; Registers used:
  6979 ;;		wreg, status,2, status,0, pclath, cstack
  6980 ;; Tracked objects:
  6981 ;;		On entry : 0/0
  6982 ;;		On exit  : 0/0
  6983 ;;		Unchanged: 0/0
  6984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6986 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6987 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6988 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6989 ;;Total ram usage:        2 bytes
  6990 ;; Hardware stack levels used:    1
  6991 ;; Hardware stack levels required when called:    6
  6992 ;; This function calls:
  6993 ;;		_PROTOCOL_Read_Device_Address
  6994 ;; This function is called by:
  6995 ;;		_main
  6996 ;;		_SYSTEM_Initialize
  6997 ;; This function uses a non-reentrant model
  6998 ;;
  6999                           
  7000                           
  7001                           ;psect for function _I2C1_Initialize
  7002  0F44                     _I2C1_Initialize:	
  7003                           
  7004                           ;i2c1.c: 34: _delay((unsigned long)((2000)*(4000000/4000.0)));
  7005                           
  7006                           ;incstack = 0
  7007                           ; Regs used in _I2C1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7008  0F44  300B               	movlw	11
  7009  0F45  0020               	movlb	0	; select bank0
  7010  0F46  00A1               	movwf	??_I2C1_Initialize+1
  7011  0F47  3026               	movlw	38
  7012  0F48  00A0               	movwf	??_I2C1_Initialize
  7013  0F49  305D               	movlw	93
  7014  0F4A                     u2367:	
  7015  0F4A  0B89               	decfsz	9,f
  7016  0F4B  2F4A               	goto	u2367
  7017  0F4C  0BA0               	decfsz	??_I2C1_Initialize,f
  7018  0F4D  2F4A               	goto	u2367
  7019  0F4E  0BA1               	decfsz	??_I2C1_Initialize+1,f
  7020  0F4F  2F4A               	goto	u2367
  7021  0F50  3200               	nop2
  7022                           
  7023                           ;i2c1.c: 38: SSP1STAT = 0x80;
  7024  0F51  3080               	movlw	128
  7025  0F52  0024               	movlb	4	; select bank4
  7026  0F53  0094               	movwf	20	;volatile
  7027                           
  7028                           ;i2c1.c: 40: SSP1CON1 = 0x26;
  7029  0F54  3026               	movlw	38
  7030  0F55  0095               	movwf	21	;volatile
  7031                           
  7032                           ;i2c1.c: 42: SSP1CON2 = 0x81;
  7033  0F56  3081               	movlw	129
  7034  0F57  0096               	movwf	22	;volatile
  7035                           
  7036                           ;i2c1.c: 44: SSP1CON3 = 0x00;
  7037  0F58  0197               	clrf	23	;volatile
  7038                           
  7039                           ;i2c1.c: 46: SSP1MSK = (0x7F << 1);
  7040  0F59  30FE               	movlw	254
  7041  0F5A  0093               	movwf	19	;volatile
  7042                           
  7043                           ;i2c1.c: 48: SSP1ADD = (PROTOCOL_Read_Device_Address() << 1);
  7044  0F5B  318D  2582         	fcall	_PROTOCOL_Read_Device_Address
  7045  0F5D  0709               	addwf	9,w
  7046  0F5E  0024               	movlb	4	; select bank4
  7047  0F5F  0092               	movwf	18	;volatile
  7048                           
  7049                           ;i2c1.c: 51: PIR1bits.SSP1IF = 0;
  7050  0F60  0020               	movlb	0	; select bank0
  7051  0F61  1191               	bcf	17,3	;volatile
  7052                           
  7053                           ;i2c1.c: 53: PIE1bits.SSP1IE = 1;
  7054  0F62  0021               	movlb	1	; select bank1
  7055  0F63  1591               	bsf	17,3	;volatile
  7056  0F64  0008               	return
  7057  0F65                     __end_of_I2C1_Initialize:	
  7058                           
  7059                           	psect	text38
  7060  0D82                     __ptext38:	
  7061 ;; *************** function _PROTOCOL_Read_Device_Address *****************
  7062 ;; Defined at:
  7063 ;;		line 89 in file "protocol.c"
  7064 ;; Parameters:    Size  Location     Type
  7065 ;;		None
  7066 ;; Auto vars:     Size  Location     Type
  7067 ;;		None
  7068 ;; Return value:  Size  Location     Type
  7069 ;;                  1    wreg      unsigned char 
  7070 ;; Registers used:
  7071 ;;		wreg
  7072 ;; Tracked objects:
  7073 ;;		On entry : 0/0
  7074 ;;		On exit  : 0/0
  7075 ;;		Unchanged: 0/0
  7076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7078 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7080 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7081 ;;Total ram usage:        0 bytes
  7082 ;; Hardware stack levels used:    1
  7083 ;; Hardware stack levels required when called:    5
  7084 ;; This function calls:
  7085 ;;		Nothing
  7086 ;; This function is called by:
  7087 ;;		_I2C1_Initialize
  7088 ;;		_PROTOCOL_Loop
  7089 ;; This function uses a non-reentrant model
  7090 ;;
  7091                           
  7092                           
  7093                           ;psect for function _PROTOCOL_Read_Device_Address
  7094  0D82                     _PROTOCOL_Read_Device_Address:	
  7095                           
  7096                           ;protocol.c: 90: return slave_address;
  7097                           
  7098                           ;incstack = 0
  7099                           ; Regs used in _PROTOCOL_Read_Device_Address: [wreg]
  7100  0D82  0020               	movlb	0	; select bank0
  7101  0D83  085D               	movf	_slave_address,w
  7102  0D84  0008               	return
  7103  0D85                     __end_of_PROTOCOL_Read_Device_Address:	
  7104                           
  7105                           	psect	text39
  7106  0E7D                     __ptext39:	
  7107 ;; *************** function _EUSART_Initialize *****************
  7108 ;; Defined at:
  7109 ;;		line 75 in file "mcc_generated_files/eusart.c"
  7110 ;; Parameters:    Size  Location     Type
  7111 ;;		None
  7112 ;; Auto vars:     Size  Location     Type
  7113 ;;		None
  7114 ;; Return value:  Size  Location     Type
  7115 ;;                  1    wreg      void 
  7116 ;; Registers used:
  7117 ;;		wreg, status,2
  7118 ;; Tracked objects:
  7119 ;;		On entry : 0/0
  7120 ;;		On exit  : 0/0
  7121 ;;		Unchanged: 0/0
  7122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7124 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7125 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7126 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7127 ;;Total ram usage:        1 bytes
  7128 ;; Hardware stack levels used:    1
  7129 ;; Hardware stack levels required when called:    5
  7130 ;; This function calls:
  7131 ;;		Nothing
  7132 ;; This function is called by:
  7133 ;;		_main
  7134 ;;		_SYSTEM_Initialize
  7135 ;; This function uses a non-reentrant model
  7136 ;;
  7137                           
  7138                           
  7139                           ;psect for function _EUSART_Initialize
  7140  0E7D                     _EUSART_Initialize:	
  7141                           
  7142                           ;eusart.c: 78: PIE1bits.RCIE = 0;
  7143                           
  7144                           ;incstack = 0
  7145                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  7146  0E7D  0021               	movlb	1	; select bank1
  7147  0E7E  1291               	bcf	17,5	;volatile
  7148                           
  7149                           ;eusart.c: 79: PIE1bits.TXIE = 0;
  7150  0E7F  1211               	bcf	17,4	;volatile
  7151                           
  7152                           ;eusart.c: 84: BAUDCON = 0x08;
  7153  0E80  3008               	movlw	8
  7154  0E81  0023               	movlb	3	; select bank3
  7155  0E82  009F               	movwf	31	;volatile
  7156                           
  7157                           ;eusart.c: 87: RCSTA = 0x90;
  7158  0E83  3090               	movlw	144
  7159  0E84  009D               	movwf	29	;volatile
  7160                           
  7161                           ;eusart.c: 90: TXSTA = 0x24;
  7162  0E85  3024               	movlw	36
  7163  0E86  009E               	movwf	30	;volatile
  7164                           
  7165                           ;eusart.c: 93: SPBRGL = 0x67;
  7166  0E87  3067               	movlw	103
  7167  0E88  009B               	movwf	27	;volatile
  7168                           
  7169                           ;eusart.c: 96: SPBRGH = 0x00;
  7170  0E89  019C               	clrf	28	;volatile
  7171                           
  7172                           ;eusart.c: 100: eusartTxHead = 0;
  7173  0E8A  01FC               	clrf	_eusartTxHead	;volatile
  7174                           
  7175                           ;eusart.c: 101: eusartTxTail = 0;
  7176  0E8B  01FB               	clrf	_eusartTxTail	;volatile
  7177                           
  7178                           ;eusart.c: 102: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
  7179  0E8C  3008               	movlw	8
  7180  0E8D  0020               	movlb	0	; select bank0
  7181  0E8E  00A0               	movwf	??_EUSART_Initialize
  7182  0E8F  0820               	movf	??_EUSART_Initialize,w
  7183  0E90  00FA               	movwf	_eusartTxBufferRemaining	;volatile
  7184                           
  7185                           ;eusart.c: 104: eusartRxHead = 0;
  7186  0E91  01E2               	clrf	_eusartRxHead	;volatile
  7187                           
  7188                           ;eusart.c: 105: eusartRxTail = 0;
  7189  0E92  01E1               	clrf	_eusartRxTail	;volatile
  7190                           
  7191                           ;eusart.c: 106: eusartRxCount = 0;
  7192  0E93  01E0               	clrf	_eusartRxCount	;volatile
  7193                           
  7194                           ;eusart.c: 109: PIE1bits.RCIE = 1;
  7195  0E94  0021               	movlb	1	; select bank1
  7196  0E95  1691               	bsf	17,5	;volatile
  7197  0E96  0008               	return
  7198  0E97                     __end_of_EUSART_Initialize:	
  7199                           
  7200                           	psect	text40
  7201  0DC8                     __ptext40:	
  7202 ;; *************** function _ADC_Initialize *****************
  7203 ;; Defined at:
  7204 ;;		line 64 in file "mcc_generated_files/adc.c"
  7205 ;; Parameters:    Size  Location     Type
  7206 ;;		None
  7207 ;; Auto vars:     Size  Location     Type
  7208 ;;		None
  7209 ;; Return value:  Size  Location     Type
  7210 ;;                  1    wreg      void 
  7211 ;; Registers used:
  7212 ;;		wreg, status,2
  7213 ;; Tracked objects:
  7214 ;;		On entry : 0/0
  7215 ;;		On exit  : 0/0
  7216 ;;		Unchanged: 0/0
  7217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7221 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7222 ;;Total ram usage:        0 bytes
  7223 ;; Hardware stack levels used:    1
  7224 ;; Hardware stack levels required when called:    5
  7225 ;; This function calls:
  7226 ;;		Nothing
  7227 ;; This function is called by:
  7228 ;;		_main
  7229 ;;		_SYSTEM_Initialize
  7230 ;; This function uses a non-reentrant model
  7231 ;;
  7232                           
  7233                           
  7234                           ;psect for function _ADC_Initialize
  7235  0DC8                     _ADC_Initialize:	
  7236                           
  7237                           ;adc.c: 69: ADCON0 = 0x01;
  7238                           
  7239                           ;incstack = 0
  7240                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  7241  0DC8  3001               	movlw	1
  7242  0DC9  0021               	movlb	1	; select bank1
  7243  0DCA  009D               	movwf	29	;volatile
  7244                           
  7245                           ;adc.c: 72: ADCON1 = 0xF0;
  7246  0DCB  30F0               	movlw	240
  7247  0DCC  009E               	movwf	30	;volatile
  7248                           
  7249                           ;adc.c: 75: ADRESL = 0x00;
  7250  0DCD  019B               	clrf	27	;volatile
  7251                           
  7252                           ;adc.c: 78: ADRESH = 0x00;
  7253  0DCE  019C               	clrf	28	;volatile
  7254  0DCF  0008               	return
  7255  0DD0                     __end_of_ADC_Initialize:	
  7256                           
  7257                           	psect	intentry
  7258  0004                     __pintentry:	
  7259 ;; *************** function _INTERRUPT_InterruptManager *****************
  7260 ;; Defined at:
  7261 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  7262 ;; Parameters:    Size  Location     Type
  7263 ;;		None
  7264 ;; Auto vars:     Size  Location     Type
  7265 ;;		None
  7266 ;; Return value:  Size  Location     Type
  7267 ;;                  1    wreg      void 
  7268 ;; Registers used:
  7269 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7270 ;; Tracked objects:
  7271 ;;		On entry : 0/0
  7272 ;;		On exit  : 0/0
  7273 ;;		Unchanged: 0/0
  7274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7276 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7277 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7278 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7279 ;;Total ram usage:        1 bytes
  7280 ;; Hardware stack levels used:    1
  7281 ;; Hardware stack levels required when called:    4
  7282 ;; This function calls:
  7283 ;;		_EUSART_Receive_ISR
  7284 ;;		_EUSART_Transmit_ISR
  7285 ;;		_I2C1_ISR
  7286 ;; This function is called by:
  7287 ;;		Interrupt level 1
  7288 ;; This function uses a non-reentrant model
  7289 ;;
  7290                           
  7291  0004                     _INTERRUPT_InterruptManager:	
  7292                           
  7293                           ;incstack = 0
  7294  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  7295                           
  7296                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7297  0005  3180               	pagesel	$
  7298  0006  0020               	movlb	0	; select bank0
  7299  0007  087F               	movf	127,w
  7300  0008  00F9               	movwf	??_INTERRUPT_InterruptManager
  7301                           
  7302                           ;interrupt_manager.c: 54: if(INTCONbits.PEIE == 1 && PIE1bits.TXIE == 1 && PIR1bits.TXIF
      +                           == 1)
  7303  0009  1F0B               	btfss	11,6	;volatile
  7304  000A  2815               	goto	i1l168
  7305  000B  0021               	movlb	1	; select bank1
  7306  000C  1E11               	btfss	17,4	;volatile
  7307  000D  2815               	goto	i1l168
  7308  000E  0020               	movlb	0	; select bank0
  7309  000F  1E11               	btfss	17,4	;volatile
  7310  0010  2815               	goto	i1l168
  7311                           
  7312                           ;interrupt_manager.c: 55: {
  7313                           ;interrupt_manager.c: 56: EUSART_Transmit_ISR();
  7314  0011  318E  26B2  3180   	fcall	_EUSART_Transmit_ISR
  7315                           
  7316                           ;interrupt_manager.c: 57: }
  7317  0014  282B               	goto	i1l174
  7318  0015                     i1l168:	
  7319                           
  7320                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits
      +                          .RCIF == 1)
  7321  0015  1F0B               	btfss	11,6	;volatile
  7322  0016  2821               	goto	i1l170
  7323  0017  0021               	movlb	1	; select bank1
  7324  0018  1E91               	btfss	17,5	;volatile
  7325  0019  2821               	goto	i1l170
  7326  001A  0020               	movlb	0	; select bank0
  7327  001B  1E91               	btfss	17,5	;volatile
  7328  001C  2821               	goto	i1l170
  7329                           
  7330                           ;interrupt_manager.c: 59: {
  7331                           ;interrupt_manager.c: 60: EUSART_Receive_ISR();
  7332  001D  318E  2697  3180   	fcall	_EUSART_Receive_ISR
  7333                           
  7334                           ;interrupt_manager.c: 61: }
  7335  0020  282B               	goto	i1l174
  7336  0021                     i1l170:	
  7337                           
  7338                           ;interrupt_manager.c: 62: else if(INTCONbits.PEIE == 1 && PIE1bits.SSP1IE == 1 && PIR1bi
      +                          ts.SSP1IF == 1)
  7339  0021  1F0B               	btfss	11,6	;volatile
  7340  0022  282B               	goto	i1l174
  7341  0023  0021               	movlb	1	; select bank1
  7342  0024  1D91               	btfss	17,3	;volatile
  7343  0025  282B               	goto	i1l174
  7344  0026  0020               	movlb	0	; select bank0
  7345  0027  1D91               	btfss	17,3	;volatile
  7346  0028  282B               	goto	i1l174
  7347                           
  7348                           ;interrupt_manager.c: 63: {
  7349                           ;interrupt_manager.c: 64: I2C1_ISR();
  7350  0029  318F  27AC         	fcall	_I2C1_ISR
  7351  002B                     i1l174:	
  7352                           ;interrupt_manager.c: 66: else
  7353                           ;interrupt_manager.c: 67: {
  7354                           
  7355                           ;interrupt_manager.c: 65: }
  7356                           
  7357  002B  0879               	movf	??_INTERRUPT_InterruptManager,w
  7358  002C  0020               	movlb	0	; select bank0
  7359  002D  00FF               	movwf	127
  7360  002E  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  7361  002F  0009               	retfie
  7362  0030                     __end_of_INTERRUPT_InterruptManager:	
  7363                           
  7364                           	psect	text42
  7365  0FAC                     __ptext42:	
  7366 ;; *************** function _I2C1_ISR *****************
  7367 ;; Defined at:
  7368 ;;		line 57 in file "mcc_generated_files/i2c1.c"
  7369 ;; Parameters:    Size  Location     Type
  7370 ;;		None
  7371 ;; Auto vars:     Size  Location     Type
  7372 ;;  i2c_data        1    8[COMMON] unsigned char 
  7373 ;; Return value:  Size  Location     Type
  7374 ;;                  1    wreg      void 
  7375 ;; Registers used:
  7376 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7377 ;; Tracked objects:
  7378 ;;		On entry : 0/0
  7379 ;;		On exit  : 0/0
  7380 ;;		Unchanged: 0/0
  7381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7382 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7383 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7384 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7385 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7386 ;;Total ram usage:        2 bytes
  7387 ;; Hardware stack levels used:    1
  7388 ;; Hardware stack levels required when called:    3
  7389 ;; This function calls:
  7390 ;;		_I2C1_StatusCallback
  7391 ;; This function is called by:
  7392 ;;		_INTERRUPT_InterruptManager
  7393 ;; This function uses a non-reentrant model
  7394 ;;
  7395                           
  7396                           
  7397                           ;psect for function _I2C1_ISR
  7398  0FAC                     _I2C1_ISR:	
  7399                           
  7400                           ;i2c1.c: 59: uint8_t i2c_data = 0x55;
  7401                           
  7402                           ;incstack = 0
  7403                           ; Regs used in _I2C1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7404  0FAC  3055               	movlw	85
  7405  0FAD  00F7               	movwf	??_I2C1_ISR
  7406  0FAE  0877               	movf	??_I2C1_ISR,w
  7407  0FAF  00F8               	movwf	I2C1_ISR@i2c_data
  7408                           
  7409                           ;i2c1.c: 64: PIR1bits.SSP1IF = 0;
  7410  0FB0  0020               	movlb	0	; select bank0
  7411  0FB1  1191               	bcf	17,3	;volatile
  7412                           
  7413                           ;i2c1.c: 65: i2c_data = SSP1BUF;
  7414  0FB2  0024               	movlb	4	; select bank4
  7415  0FB3  0811               	movf	17,w	;volatile
  7416  0FB4  00F7               	movwf	??_I2C1_ISR
  7417  0FB5  0877               	movf	??_I2C1_ISR,w
  7418  0FB6  00F8               	movwf	I2C1_ISR@i2c_data
  7419                           
  7420                           ;i2c1.c: 66: if(1 == SSP1STATbits.R_nW)
  7421  0FB7  1D14               	btfss	20,2	;volatile
  7422  0FB8  2FC0               	goto	i1l64
  7423                           
  7424                           ;i2c1.c: 67: {
  7425                           ;i2c1.c: 68: if((1 == SSP1STATbits.D_nA) && (1 == SSP1CON2bits.ACKSTAT))
  7426  0FB9  1A94               	btfsc	20,5	;volatile
  7427  0FBA  1F16               	btfss	22,6	;volatile
  7428  0FBB  2FBE               	goto	i1l3056
  7429                           
  7430                           ;i2c1.c: 69: {
  7431                           ;i2c1.c: 71: I2C1_StatusCallback(I2C1_SLAVE_READ_COMPLETED);
  7432  0FBC  3003               	movlw	3
  7433  0FBD  2FCE               	goto	L3
  7434  0FBE                     i1l3056:	
  7435                           ;i2c1.c: 72: }
  7436                           
  7437                           
  7438                           ;i2c1.c: 73: else
  7439                           ;i2c1.c: 74: {
  7440                           ;i2c1.c: 76: I2C1_StatusCallback(I2C1_SLAVE_READ_REQUEST);
  7441  0FBE  3001               	movlw	1
  7442  0FBF  2FCE               	goto	L3
  7443  0FC0                     i1l64:	
  7444                           ;i2c1.c: 77: }
  7445                           ;i2c1.c: 78: }
  7446                           
  7447                           
  7448                           ;i2c1.c: 79: else if(0 == SSP1STATbits.D_nA)
  7449  0FC0  1A94               	btfsc	20,5	;volatile
  7450  0FC1  2FC9               	goto	i1l3064
  7451                           
  7452                           ;i2c1.c: 80: {
  7453                           ;i2c1.c: 83: if(0x00 == i2c_data)
  7454  0FC2  0878               	movf	I2C1_ISR@i2c_data,w
  7455  0FC3  1D03               	btfss	3,2
  7456  0FC4  2FC7               	goto	i1l3062
  7457                           
  7458                           ;i2c1.c: 84: {
  7459                           ;i2c1.c: 86: I2C1_StatusCallback(I2C1_SLAVE_GENERAL_CALL_REQUEST);
  7460  0FC5  3004               	movlw	4
  7461  0FC6  2FCE               	goto	L3
  7462  0FC7                     i1l3062:	
  7463                           ;i2c1.c: 87: }
  7464                           
  7465                           
  7466                           ;i2c1.c: 88: else
  7467                           ;i2c1.c: 89: {
  7468                           ;i2c1.c: 91: I2C1_StatusCallback(I2C1_SLAVE_WRITE_REQUEST);
  7469  0FC7  3000               	movlw	0
  7470  0FC8  2FCE               	goto	L3
  7471  0FC9                     i1l3064:	
  7472                           ;i2c1.c: 92: }
  7473                           ;i2c1.c: 93: }
  7474                           
  7475                           
  7476                           ;i2c1.c: 94: else
  7477                           ;i2c1.c: 95: {
  7478                           ;i2c1.c: 96: I2C_slaveWriteData = i2c_data;
  7479  0FC9  0878               	movf	I2C1_ISR@i2c_data,w
  7480  0FCA  00F7               	movwf	??_I2C1_ISR
  7481  0FCB  0877               	movf	??_I2C1_ISR,w
  7482  0FCC  00FD               	movwf	_I2C_slaveWriteData	;volatile
  7483                           
  7484                           ;i2c1.c: 99: I2C1_StatusCallback(I2C1_SLAVE_WRITE_COMPLETED);
  7485  0FCD  3002               	movlw	2
  7486  0FCE                     L3:	
  7487  0FCE  3184  2493         	fcall	_I2C1_StatusCallback
  7488                           
  7489                           ;i2c1.c: 100: }
  7490                           ;i2c1.c: 102: SSP1CON1bits.CKP = 1;
  7491  0FD0  0024               	movlb	4	; select bank4
  7492  0FD1  1615               	bsf	21,4	;volatile
  7493  0FD2  0008               	return
  7494  0FD3                     __end_of_I2C1_ISR:	
  7495                           
  7496                           	psect	text43
  7497  0493                     __ptext43:	
  7498 ;; *************** function _I2C1_StatusCallback *****************
  7499 ;; Defined at:
  7500 ;;		line 106 in file "mcc_generated_files/i2c1.c"
  7501 ;; Parameters:    Size  Location     Type
  7502 ;;  i2c_bus_stat    1    wreg     enum E3099
  7503 ;; Auto vars:     Size  Location     Type
  7504 ;;  i2c_bus_stat    1    5[COMMON] enum E3099
  7505 ;;  pdata           1    6[COMMON] PTR unsigned char 
  7506 ;;		 -> type_no_data(1), PROTOCOL_Send_uint8_t@pbuf(1), sendbuf(16), readbuf.length(1), 
  7507 ;;		 -> readbuf.type(1), readbuf(5), 
  7508 ;; Return value:  Size  Location     Type
  7509 ;;                  1    wreg      void 
  7510 ;; Registers used:
  7511 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7512 ;; Tracked objects:
  7513 ;;		On entry : 0/0
  7514 ;;		On exit  : 0/0
  7515 ;;		Unchanged: 0/0
  7516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7518 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7519 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7520 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7521 ;;Total ram usage:        3 bytes
  7522 ;; Hardware stack levels used:    1
  7523 ;; Hardware stack levels required when called:    2
  7524 ;; This function calls:
  7525 ;;		_PROTOCOL_Backplane_Slave_Enabled
  7526 ;;		_PROTOCOL_I2C_GET
  7527 ;;		_PROTOCOL_I2C_SEN
  7528 ;;		_PROTOCOL_I2C_WHO
  7529 ;;		_PROTOCOL_INV
  7530 ;;		_PROTOCOL_RST
  7531 ;;		_PROTOCOL_Read_Lock
  7532 ;;		i1_PROTOCOL_EXT
  7533 ;;		i1_PROTOCOL_SAV
  7534 ;;		i1_PROTOCOL_SET
  7535 ;;		i1_PROTOCOL_STA
  7536 ;;		i1_PROTOCOL_STP
  7537 ;; This function is called by:
  7538 ;;		_I2C1_ISR
  7539 ;; This function uses a non-reentrant model
  7540 ;;
  7541                           
  7542                           
  7543                           ;psect for function _I2C1_StatusCallback
  7544  0493                     _I2C1_StatusCallback:	
  7545                           
  7546                           ;incstack = 0
  7547                           ; Regs used in _I2C1_StatusCallback: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7548                           ;I2C1_StatusCallback@i2c_bus_state stored from wreg
  7549  0493  00F5               	movwf	I2C1_StatusCallback@i2c_bus_state
  7550                           
  7551                           ;i2c1.c: 109: static uint8_t slaveWriteType = SLAVE_NORMAL_DATA;
  7552                           ;i2c1.c: 110: static uint8_t next = 0x00;
  7553                           ;i2c1.c: 111: static uint8_t ext_len = 0;
  7554                           ;i2c1.c: 112: static uint8_t ext_cnt = 0;
  7555                           ;i2c1.c: 113: static char ext_buf[48];
  7556                           ;i2c1.c: 114: uint8_t *pdata;
  7557                           ;i2c1.c: 115: switch (i2c_bus_state)
  7558  0494  2D4C               	goto	i1l2862
  7559  0495                     i1l86:	
  7560                           ;i2c1.c: 116: {
  7561                           ;i2c1.c: 117: case I2C1_SLAVE_WRITE_REQUEST:
  7562                           
  7563                           
  7564                           ;i2c1.c: 118: slaveWriteType = SLAVE_DATA_ADDRESS;
  7565  0495  0020               	movlb	0	; select bank0
  7566  0496  01E6               	clrf	I2C1_StatusCallback@slaveWriteType
  7567  0497  0AE6               	incf	I2C1_StatusCallback@slaveWriteType,f
  7568                           
  7569                           ;i2c1.c: 119: break;
  7570  0498  0008               	return
  7571  0499                     i1l2788:	
  7572                           ;i2c1.c: 121: case I2C1_SLAVE_GENERAL_CALL_REQUEST:
  7573                           
  7574                           
  7575                           ;i2c1.c: 123: slaveWriteType = SLAVE_GENERAL_CALL;
  7576  0499  3002               	movlw	2
  7577  049A  00F4               	movwf	??_I2C1_StatusCallback
  7578  049B  0874               	movf	??_I2C1_StatusCallback,w
  7579  049C  0020               	movlb	0	; select bank0
  7580  049D  00E6               	movwf	I2C1_StatusCallback@slaveWriteType
  7581                           
  7582                           ;i2c1.c: 124: break;
  7583  049E  0008               	return
  7584  049F                     i1l2790:	
  7585                           ;i2c1.c: 132: case 0x01:
  7586                           
  7587                           ;i2c1.c: 131: switch(next) {
  7588                           
  7589                           ;i2c1.c: 129: {
  7590                           ;i2c1.c: 130: case SLAVE_DATA_ADDRESS:
  7591                           
  7592                           ;i2c1.c: 128: switch(slaveWriteType)
  7593                           
  7594                           ;i2c1.c: 126: case I2C1_SLAVE_WRITE_COMPLETED:
  7595                           
  7596                           
  7597                           ;i2c1.c: 133: PROTOCOL_SET(I2C_slaveWriteData);
  7598  049F  087D               	movf	_I2C_slaveWriteData,w	;volatile
  7599  04A0  318D  25B3  3184   	fcall	i1_PROTOCOL_SET
  7600  04A3  2D0E               	goto	i1l2836
  7601  04A4                     i1l2794:	
  7602                           ;i2c1.c: 138: case 0x04:
  7603                           
  7604                           ;i2c1.c: 137: switch(I2C_slaveWriteData) {
  7605                           
  7606                           ;i2c1.c: 136: case 0x00:
  7607                           
  7608                           ;i2c1.c: 135: break;
  7609                           
  7610                           ;i2c1.c: 134: next = 0x00;
  7611                           
  7612                           
  7613                           ;i2c1.c: 139: PROTOCOL_STA();
  7614  04A4  318D  2593  3184   	fcall	i1_PROTOCOL_STA
  7615                           
  7616                           ;i2c1.c: 140: break;
  7617  04A7  2D27               	goto	i1l2846
  7618  04A8                     i1l2796:	
  7619                           ;i2c1.c: 141: case 0x05:
  7620                           
  7621                           
  7622                           ;i2c1.c: 142: PROTOCOL_STP();
  7623  04A8  318D  257F  3184   	fcall	i1_PROTOCOL_STP
  7624                           
  7625                           ;i2c1.c: 143: break;
  7626  04AB  2D27               	goto	i1l2846
  7627  04AC                     i1l2798:	
  7628                           ;i2c1.c: 144: case 0x03:
  7629                           
  7630                           
  7631                           ;i2c1.c: 145: PROTOCOL_SAV();
  7632  04AC  318D  25D0  3184   	fcall	i1_PROTOCOL_SAV
  7633                           
  7634                           ;i2c1.c: 146: break;
  7635  04AF  2D27               	goto	i1l2846
  7636  04B0                     i1l2800:	
  7637                           ;i2c1.c: 147: case 0x06:
  7638                           
  7639                           
  7640                           ;i2c1.c: 148: PROTOCOL_INV();
  7641  04B0  318D  258F  3184   	fcall	_PROTOCOL_INV
  7642                           
  7643                           ;i2c1.c: 149: break;
  7644  04B3  2D27               	goto	i1l2846
  7645  04B4                     i1l2802:	
  7646                           ;i2c1.c: 150: case 0x0c:
  7647                           
  7648                           
  7649                           ;i2c1.c: 151: PROTOCOL_RST();
  7650  04B4  318D  25F4  3184   	fcall	_PROTOCOL_RST
  7651                           
  7652                           ;i2c1.c: 152: break;
  7653  04B7  2D27               	goto	i1l2846
  7654  04B8                     i1l103:	
  7655                           ;i2c1.c: 153: case 0x08:
  7656                           
  7657                           
  7658                           ;i2c1.c: 154: next = 0x01;
  7659  04B8  01E5               	clrf	I2C1_StatusCallback@next
  7660  04B9  0AE5               	incf	I2C1_StatusCallback@next,f
  7661                           
  7662                           ;i2c1.c: 155: break;
  7663  04BA  2D27               	goto	i1l2846
  7664  04BB                     i1l2804:	
  7665                           ;i2c1.c: 156: case 0x0a:
  7666                           
  7667                           
  7668                           ;i2c1.c: 157: next = 0x02;
  7669  04BB  3002               	movlw	2
  7670  04BC  2CEF               	goto	L4
  7671  04BD                     i1l2808:	
  7672                           ;i2c1.c: 159: }
  7673                           
  7674                           ;i2c1.c: 158: break;
  7675                           
  7676  04BD  087D               	movf	_I2C_slaveWriteData,w	;volatile
  7677                           
  7678                           ; Switch size 1, requested type "space"
  7679                           ; Number of cases is 7, Range of values is 3 to 12
  7680                           ; switch strategies available:
  7681                           ; Name         Instructions Cycles
  7682                           ; simple_byte           22    12 (average)
  7683                           ; direct_byte           29     9 (fixed)
  7684                           ; jumptable            263     9 (fixed)
  7685                           ;	Chosen strategy is simple_byte
  7686  04BE  3A03               	xorlw	3	; case 3
  7687  04BF  1903               	skipnz
  7688  04C0  2CAC               	goto	i1l2798
  7689  04C1  3A07               	xorlw	7	; case 4
  7690  04C2  1903               	skipnz
  7691  04C3  2CA4               	goto	i1l2794
  7692  04C4  3A01               	xorlw	1	; case 5
  7693  04C5  1903               	skipnz
  7694  04C6  2CA8               	goto	i1l2796
  7695  04C7  3A03               	xorlw	3	; case 6
  7696  04C8  1903               	skipnz
  7697  04C9  2CB0               	goto	i1l2800
  7698  04CA  3A0E               	xorlw	14	; case 8
  7699  04CB  1903               	skipnz
  7700  04CC  2CB8               	goto	i1l103
  7701  04CD  3A02               	xorlw	2	; case 10
  7702  04CE  1903               	skipnz
  7703  04CF  2CBB               	goto	i1l2804
  7704  04D0  3A06               	xorlw	6	; case 12
  7705  04D1  1903               	skipnz
  7706  04D2  2CB4               	goto	i1l2802
  7707  04D3  2D27               	goto	i1l2846
  7708                           
  7709                           ;i2c1.c: 161: }
  7710                           
  7711                           ;i2c1.c: 160: break;
  7712  04D4  2D27               	goto	i1l2846
  7713  04D5                     i1l2812:	
  7714  04D5  0865               	movf	I2C1_StatusCallback@next,w
  7715                           
  7716                           ; Switch size 1, requested type "space"
  7717                           ; Number of cases is 2, Range of values is 0 to 1
  7718                           ; switch strategies available:
  7719                           ; Name         Instructions Cycles
  7720                           ; simple_byte            7     4 (average)
  7721                           ; direct_byte           10     6 (fixed)
  7722                           ; jumptable            260     6 (fixed)
  7723                           ;	Chosen strategy is simple_byte
  7724  04D6  3A00               	xorlw	0	; case 0
  7725  04D7  1903               	skipnz
  7726  04D8  2CBD               	goto	i1l2808
  7727  04D9  3A01               	xorlw	1	; case 1
  7728  04DA  1903               	skipnz
  7729  04DB  2C9F               	goto	i1l2790
  7730  04DC  2D27               	goto	i1l2846
  7731                           
  7732                           ;i2c1.c: 162: break;
  7733  04DD  2D27               	goto	i1l2846
  7734  04DE                     i1l2814:	
  7735                           ;i2c1.c: 164: case SLAVE_GENERAL_CALL:
  7736                           
  7737                           
  7738                           ;i2c1.c: 165: if (I2C_slaveWriteData == 0x02) {
  7739  04DE  3002               	movlw	2
  7740  04DF  067D               	xorwf	_I2C_slaveWriteData,w	;volatile
  7741  04E0  1D03               	btfss	3,2
  7742  04E1  2D27               	goto	i1l2846
  7743                           
  7744                           ;i2c1.c: 166: SSP1CON2bits.GCEN = 0;
  7745  04E2  0024               	movlb	4	; select bank4
  7746  04E3  1396               	bcf	22,7	;volatile
  7747                           
  7748                           ;i2c1.c: 167: PROTOCOL_Backplane_Slave_Enabled();
  7749  04E4  318D  258B  3184   	fcall	_PROTOCOL_Backplane_Slave_Enabled
  7750                           
  7751                           ;i2c1.c: 168: }
  7752                           ;i2c1.c: 169: break;
  7753  04E7  2D27               	goto	i1l2846
  7754  04E8                     i1l2820:	
  7755                           ;i2c1.c: 173: case 0x02:
  7756                           
  7757                           ;i2c1.c: 172: switch(next) {
  7758                           
  7759                           ;i2c1.c: 171: case SLAVE_NORMAL_DATA:
  7760                           
  7761                           
  7762                           ;i2c1.c: 174: ext_len = I2C_slaveWriteData;
  7763  04E8  087D               	movf	_I2C_slaveWriteData,w	;volatile
  7764  04E9  00F4               	movwf	??_I2C1_StatusCallback
  7765  04EA  0874               	movf	??_I2C1_StatusCallback,w
  7766  04EB  0020               	movlb	0	; select bank0
  7767  04EC  00E4               	movwf	I2C1_StatusCallback@ext_len
  7768                           
  7769                           ;i2c1.c: 175: ext_cnt = 0;
  7770  04ED  01E3               	clrf	I2C1_StatusCallback@ext_cnt
  7771                           
  7772                           ;i2c1.c: 176: next = 0x03;
  7773  04EE  3003               	movlw	3
  7774  04EF                     L4:	
  7775  04EF  00F4               	movwf	??_I2C1_StatusCallback
  7776  04F0  0874               	movf	??_I2C1_StatusCallback,w
  7777  04F1  00E5               	movwf	I2C1_StatusCallback@next
  7778                           
  7779                           ;i2c1.c: 177: break;
  7780  04F2  2D27               	goto	i1l2846
  7781  04F3                     i1l2826:	
  7782                           ;i2c1.c: 178: case 0x03:
  7783                           
  7784                           
  7785                           ;i2c1.c: 179: ext_buf[ext_cnt++] = (char)I2C_slaveWriteData;
  7786  04F3  087D               	movf	_I2C_slaveWriteData,w	;volatile
  7787  04F4  00F4               	movwf	??_I2C1_StatusCallback
  7788  04F5  0863               	movf	I2C1_StatusCallback@ext_cnt,w
  7789  04F6  3EA0               	addlw	(low (I2C1_StatusCallback@ext_buf| (0+256)))& (0+255)
  7790  04F7  0086               	movwf	6
  7791  04F8  3001               	movlw	1	; select bank3/4
  7792  04F9  0087               	movwf	7
  7793  04FA  0874               	movf	??_I2C1_StatusCallback,w
  7794  04FB  0081               	movwf	1
  7795  04FC  3001               	movlw	1
  7796  04FD  00F4               	movwf	??_I2C1_StatusCallback
  7797  04FE  0874               	movf	??_I2C1_StatusCallback,w
  7798  04FF  07E3               	addwf	I2C1_StatusCallback@ext_cnt,f
  7799                           
  7800                           ;i2c1.c: 180: if (ext_cnt >= ext_len) {
  7801  0500  0864               	movf	I2C1_StatusCallback@ext_len,w
  7802  0501  0263               	subwf	I2C1_StatusCallback@ext_cnt,w
  7803  0502  1C03               	skipc
  7804  0503  2D27               	goto	i1l2846
  7805                           
  7806                           ;i2c1.c: 181: if (!PROTOCOL_Read_Lock()) PROTOCOL_EXT(&ext_buf[0]);
  7807  0504  318D  257C  3184   	fcall	_PROTOCOL_Read_Lock
  7808  0507  3A00               	xorlw	0
  7809  0508  1D03               	skipz
  7810  0509  2D0E               	goto	i1l2836
  7811  050A  30A0               	movlw	(low (I2C1_StatusCallback@ext_buf| (0+256)))& (0+255)
  7812  050B  318D  2574  3184   	fcall	i1_PROTOCOL_EXT
  7813  050E                     i1l2836:	
  7814                           
  7815                           ;i2c1.c: 182: next = 0x00;
  7816  050E  0020               	movlb	0	; select bank0
  7817  050F  01E5               	clrf	I2C1_StatusCallback@next
  7818                           
  7819                           ;i2c1.c: 185: }
  7820                           
  7821                           ;i2c1.c: 183: }
  7822                           ;i2c1.c: 184: break;
  7823  0510  2D27               	goto	i1l2846
  7824  0511                     i1l2840:	
  7825  0511  0020               	movlb	0	; select bank0
  7826  0512  0865               	movf	I2C1_StatusCallback@next,w
  7827                           
  7828                           ; Switch size 1, requested type "space"
  7829                           ; Number of cases is 2, Range of values is 2 to 3
  7830                           ; switch strategies available:
  7831                           ; Name         Instructions Cycles
  7832                           ; simple_byte            7     4 (average)
  7833                           ; direct_byte           13     9 (fixed)
  7834                           ; jumptable            263     9 (fixed)
  7835                           ;	Chosen strategy is simple_byte
  7836  0513  3A02               	xorlw	2	; case 2
  7837  0514  1903               	skipnz
  7838  0515  2CE8               	goto	i1l2820
  7839  0516  3A01               	xorlw	1	; case 3
  7840  0517  1903               	skipnz
  7841  0518  2CF3               	goto	i1l2826
  7842  0519  2D27               	goto	i1l2846
  7843                           
  7844                           ;i2c1.c: 190: }
  7845                           
  7846                           ;i2c1.c: 188: break;
  7847                           
  7848                           ;i2c1.c: 187: default:
  7849                           
  7850                           ;i2c1.c: 186: break;
  7851  051A  2D27               	goto	i1l2846
  7852  051B                     i1l2844:	
  7853  051B  0020               	movlb	0	; select bank0
  7854  051C  0866               	movf	I2C1_StatusCallback@slaveWriteType,w
  7855                           
  7856                           ; Switch size 1, requested type "space"
  7857                           ; Number of cases is 3, Range of values is 0 to 2
  7858                           ; switch strategies available:
  7859                           ; Name         Instructions Cycles
  7860                           ; simple_byte           10     6 (average)
  7861                           ; direct_byte           12     6 (fixed)
  7862                           ; jumptable            260     6 (fixed)
  7863                           ;	Chosen strategy is simple_byte
  7864  051D  3A00               	xorlw	0	; case 0
  7865  051E  1903               	skipnz
  7866  051F  2D11               	goto	i1l2840
  7867  0520  3A01               	xorlw	1	; case 1
  7868  0521  1903               	skipnz
  7869  0522  2CD5               	goto	i1l2812
  7870  0523  3A03               	xorlw	3	; case 2
  7871  0524  1903               	skipnz
  7872  0525  2CDE               	goto	i1l2814
  7873  0526  2D27               	goto	i1l2846
  7874  0527                     i1l2846:	
  7875                           
  7876                           ;i2c1.c: 192: slaveWriteType = SLAVE_NORMAL_DATA;
  7877  0527  0020               	movlb	0	; select bank0
  7878  0528  01E6               	clrf	I2C1_StatusCallback@slaveWriteType
  7879                           
  7880                           ;i2c1.c: 193: break;
  7881  0529  0008               	return
  7882  052A                     i1l2848:	
  7883                           ;i2c1.c: 197: {
  7884                           ;i2c1.c: 198: case 0x01:
  7885                           
  7886                           ;i2c1.c: 196: switch (I2C_slaveWriteData)
  7887                           
  7888                           ;i2c1.c: 195: case I2C1_SLAVE_READ_REQUEST:
  7889                           
  7890                           
  7891                           ;i2c1.c: 199: SSP1BUF = PROTOCOL_I2C_WHO();
  7892  052A  318D  2579         	fcall	_PROTOCOL_I2C_WHO
  7893  052C  0024               	movlb	4	; select bank4
  7894  052D  0091               	movwf	17	;volatile
  7895                           
  7896                           ;i2c1.c: 200: break;
  7897  052E  0008               	return
  7898  052F                     i1l2850:	
  7899                           ;i2c1.c: 201: case 0x07:
  7900                           
  7901                           
  7902                           ;i2c1.c: 202: pdata = PROTOCOL_I2C_SEN();
  7903  052F  3187  2743         	fcall	_PROTOCOL_I2C_SEN
  7904  0531  00F4               	movwf	??_I2C1_StatusCallback
  7905  0532  0874               	movf	??_I2C1_StatusCallback,w
  7906  0533  00F6               	movwf	I2C1_StatusCallback@pdata
  7907                           
  7908                           ;i2c1.c: 203: SSP1BUF = *pdata;
  7909  0534  0876               	movf	I2C1_StatusCallback@pdata,w
  7910  0535  0086               	movwf	6
  7911  0536  0187               	clrf	7
  7912  0537  0801               	movf	1,w
  7913  0538  0024               	movlb	4	; select bank4
  7914  0539  0091               	movwf	17	;volatile
  7915                           
  7916                           ;i2c1.c: 204: break;
  7917  053A  0008               	return
  7918  053B                     i1l2854:	
  7919                           ;i2c1.c: 205: case 0x09:
  7920                           
  7921                           
  7922                           ;i2c1.c: 206: SSP1BUF = PROTOCOL_I2C_GET();
  7923  053B  318D  2576         	fcall	_PROTOCOL_I2C_GET
  7924  053D  0024               	movlb	4	; select bank4
  7925  053E  0091               	movwf	17	;volatile
  7926                           
  7927                           ;i2c1.c: 208: }
  7928                           
  7929                           ;i2c1.c: 207: break;
  7930  053F  0008               	return
  7931  0540                     i1l2858:	
  7932  0540  087D               	movf	_I2C_slaveWriteData,w	;volatile
  7933                           
  7934                           ; Switch size 1, requested type "space"
  7935                           ; Number of cases is 3, Range of values is 1 to 9
  7936                           ; switch strategies available:
  7937                           ; Name         Instructions Cycles
  7938                           ; simple_byte           10     6 (average)
  7939                           ; direct_byte           27     9 (fixed)
  7940                           ; jumptable            263     9 (fixed)
  7941                           ;	Chosen strategy is simple_byte
  7942  0541  3A01               	xorlw	1	; case 1
  7943  0542  1903               	skipnz
  7944  0543  2D2A               	goto	i1l2848
  7945  0544  3A06               	xorlw	6	; case 7
  7946  0545  1903               	skipnz
  7947  0546  2D2F               	goto	i1l2850
  7948  0547  3A0E               	xorlw	14	; case 9
  7949  0548  1903               	skipnz
  7950  0549  2D3B               	goto	i1l2854
  7951  054A  2D56               	goto	i1l124
  7952                           
  7953                           ;i2c1.c: 216: }
  7954                           
  7955                           ;i2c1.c: 214: break;
  7956                           
  7957                           ;i2c1.c: 213: default:
  7958                           
  7959                           ;i2c1.c: 212: break;
  7960                           
  7961                           ;i2c1.c: 211: case I2C1_SLAVE_READ_COMPLETED:
  7962                           
  7963                           ;i2c1.c: 209: break;
  7964  054B  0008               	return
  7965  054C                     i1l2862:	
  7966  054C  0875               	movf	I2C1_StatusCallback@i2c_bus_state,w
  7967                           
  7968                           ; Switch size 1, requested type "space"
  7969                           ; Number of cases is 5, Range of values is 0 to 4
  7970                           ; switch strategies available:
  7971                           ; Name         Instructions Cycles
  7972                           ; direct_byte           16     6 (fixed)
  7973                           ; simple_byte           16     9 (average)
  7974                           ; jumptable            260     6 (fixed)
  7975                           ;	Chosen strategy is direct_byte
  7976  054D  0084               	movwf	4
  7977  054E  3005               	movlw	5
  7978  054F  0204               	subwf	4,w
  7979  0550  1803               	skipnc
  7980  0551  0008               	return
  7981  0552  3188               	movlp	high i1S3328
  7982  0553  3504               	lslf	4,w
  7983  0554  3E00               	addlw	low i1S3328
  7984  0555  0082               	movwf	2
  7985  0556                     i1l124:	
  7986  0556  0008               	return
  7987  0557                     __end_of_I2C1_StatusCallback:	
  7988                           
  7989                           	psect	swtext1
  7990  0800                     __pswtext1:	
  7991  0800                     i1S3328:	
  7992  0800  3184  2C95         	ljmp	i1l86
  7993  0802  3185  2D40         	ljmp	i1l2858
  7994  0804  3185  2D1B         	ljmp	i1l2844
  7995  0806  3185  2D56         	ljmp	i1l124
  7996  0808  3184  2C99         	ljmp	i1l2788
  7997                           
  7998                           	psect	text44
  7999  0D7F                     __ptext44:	
  8000 ;; *************** function i1_PROTOCOL_STP *****************
  8001 ;; Defined at:
  8002 ;;		line 98 in file "protocol.c"
  8003 ;; Parameters:    Size  Location     Type
  8004 ;;		None
  8005 ;; Auto vars:     Size  Location     Type
  8006 ;;		None
  8007 ;; Return value:  Size  Location     Type
  8008 ;;                  1    wreg      void 
  8009 ;; Registers used:
  8010 ;;		wreg, status,2, status,0
  8011 ;; Tracked objects:
  8012 ;;		On entry : 0/0
  8013 ;;		On exit  : 0/0
  8014 ;;		Unchanged: 0/0
  8015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8017 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8019 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8020 ;;Total ram usage:        0 bytes
  8021 ;; Hardware stack levels used:    1
  8022 ;; This function calls:
  8023 ;;		Nothing
  8024 ;; This function is called by:
  8025 ;;		_I2C1_StatusCallback
  8026 ;; This function uses a non-reentrant model
  8027 ;;
  8028                           
  8029                           
  8030                           ;psect for function i1_PROTOCOL_STP
  8031  0D7F                     i1_PROTOCOL_STP:	
  8032                           
  8033                           ;protocol.c: 100: running = 0;
  8034                           
  8035                           ;incstack = 0
  8036                           ; Regs used in i1_PROTOCOL_STP: [wreg+status,2+status,0]
  8037  0D7F  0020               	movlb	0	; select bank0
  8038  0D80  01D9               	clrf	_running
  8039  0D81  0008               	return
  8040  0D82                     __end_ofi1_PROTOCOL_STP:	
  8041                           
  8042                           	psect	text45
  8043  0D93                     __ptext45:	
  8044 ;; *************** function i1_PROTOCOL_STA *****************
  8045 ;; Defined at:
  8046 ;;		line 93 in file "protocol.c"
  8047 ;; Parameters:    Size  Location     Type
  8048 ;;		None
  8049 ;; Auto vars:     Size  Location     Type
  8050 ;;		None
  8051 ;; Return value:  Size  Location     Type
  8052 ;;                  1    wreg      void 
  8053 ;; Registers used:
  8054 ;;		wreg, status,2, status,0
  8055 ;; Tracked objects:
  8056 ;;		On entry : 0/0
  8057 ;;		On exit  : 0/0
  8058 ;;		Unchanged: 0/0
  8059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8061 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8063 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8064 ;;Total ram usage:        0 bytes
  8065 ;; Hardware stack levels used:    1
  8066 ;; This function calls:
  8067 ;;		Nothing
  8068 ;; This function is called by:
  8069 ;;		_I2C1_StatusCallback
  8070 ;; This function uses a non-reentrant model
  8071 ;;
  8072                           
  8073                           
  8074                           ;psect for function i1_PROTOCOL_STA
  8075  0D93                     i1_PROTOCOL_STA:	
  8076                           
  8077                           ;protocol.c: 95: running = 1;
  8078                           
  8079                           ;incstack = 0
  8080                           ; Regs used in i1_PROTOCOL_STA: [wreg+status,2+status,0]
  8081  0D93  0020               	movlb	0	; select bank0
  8082  0D94  01D9               	clrf	_running
  8083  0D95  0AD9               	incf	_running,f
  8084  0D96  0008               	return
  8085  0D97                     __end_ofi1_PROTOCOL_STA:	
  8086                           
  8087                           	psect	text46
  8088  0DB3                     __ptext46:	
  8089 ;; *************** function i1_PROTOCOL_SET *****************
  8090 ;; Defined at:
  8091 ;;		line 111 in file "protocol.c"
  8092 ;; Parameters:    Size  Location     Type
  8093 ;;  value_          1    wreg     unsigned char 
  8094 ;; Auto vars:     Size  Location     Type
  8095 ;;  value_          1    1[COMMON] unsigned char 
  8096 ;; Return value:  Size  Location     Type
  8097 ;;                  1    wreg      void 
  8098 ;; Registers used:
  8099 ;;		wreg, status,2, status,0
  8100 ;; Tracked objects:
  8101 ;;		On entry : 0/0
  8102 ;;		On exit  : 0/0
  8103 ;;		Unchanged: 0/0
  8104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8106 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8107 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8108 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8109 ;;Total ram usage:        2 bytes
  8110 ;; Hardware stack levels used:    1
  8111 ;; This function calls:
  8112 ;;		Nothing
  8113 ;; This function is called by:
  8114 ;;		_I2C1_StatusCallback
  8115 ;; This function uses a non-reentrant model
  8116 ;;
  8117                           
  8118                           
  8119                           ;psect for function i1_PROTOCOL_SET
  8120  0DB3                     i1_PROTOCOL_SET:	
  8121                           
  8122                           ;incstack = 0
  8123                           ; Regs used in i1_PROTOCOL_SET: [wreg+status,2+status,0]
  8124                           ;i1PROTOCOL_SET@value_ stored from wreg
  8125  0DB3  00F1               	movwf	i1PROTOCOL_SET@value_
  8126                           
  8127                           ;protocol.c: 112: value = value_;
  8128  0DB4  0871               	movf	i1PROTOCOL_SET@value_,w
  8129  0DB5  00F0               	movwf	??i1_PROTOCOL_SET
  8130  0DB6  0870               	movf	??i1_PROTOCOL_SET,w
  8131  0DB7  0020               	movlb	0	; select bank0
  8132  0DB8  00DB               	movwf	_value
  8133  0DB9  0008               	return
  8134  0DBA                     __end_ofi1_PROTOCOL_SET:	
  8135                           
  8136                           	psect	text47
  8137  0DD0                     __ptext47:	
  8138 ;; *************** function i1_PROTOCOL_SAV *****************
  8139 ;; Defined at:
  8140 ;;		line 107 in file "protocol.c"
  8141 ;; Parameters:    Size  Location     Type
  8142 ;;		None
  8143 ;; Auto vars:     Size  Location     Type
  8144 ;;		None
  8145 ;; Return value:  Size  Location     Type
  8146 ;;                  1    wreg      void 
  8147 ;; Registers used:
  8148 ;;		wreg, status,2, status,0, pclath, cstack
  8149 ;; Tracked objects:
  8150 ;;		On entry : 0/0
  8151 ;;		On exit  : 0/0
  8152 ;;		Unchanged: 0/0
  8153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8155 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8156 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8157 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8158 ;;Total ram usage:        1 bytes
  8159 ;; Hardware stack levels used:    1
  8160 ;; Hardware stack levels required when called:    1
  8161 ;; This function calls:
  8162 ;;		i1_DATAEE_WriteByte
  8163 ;; This function is called by:
  8164 ;;		_I2C1_StatusCallback
  8165 ;; This function uses a non-reentrant model
  8166 ;;
  8167                           
  8168                           
  8169                           ;psect for function i1_PROTOCOL_SAV
  8170  0DD0                     i1_PROTOCOL_SAV:	
  8171                           
  8172                           ;protocol.c: 108: DATAEE_WriteByte(1, value);
  8173                           
  8174                           ;incstack = 0
  8175                           ; Regs used in i1_PROTOCOL_SAV: [wreg+status,2+status,0+pclath+cstack]
  8176  0DD0  0020               	movlb	0	; select bank0
  8177  0DD1  085B               	movf	_value,w
  8178  0DD2  00F3               	movwf	??i1_PROTOCOL_SAV
  8179  0DD3  0873               	movf	??i1_PROTOCOL_SAV,w
  8180  0DD4  00F0               	movwf	i1DATAEE_WriteByte@bData
  8181  0DD5  3001               	movlw	1
  8182  0DD6  318E  26E9         	fcall	i1_DATAEE_WriteByte
  8183  0DD8  0008               	return
  8184  0DD9                     __end_ofi1_PROTOCOL_SAV:	
  8185                           
  8186                           	psect	text48
  8187  0EE9                     __ptext48:	
  8188 ;; *************** function i1_DATAEE_WriteByte *****************
  8189 ;; Defined at:
  8190 ;;		line 180 in file "mcc_generated_files/memory.c"
  8191 ;; Parameters:    Size  Location     Type
  8192 ;;  bAdd            1    wreg     unsigned char 
  8193 ;;  bData           1    0[COMMON] unsigned char 
  8194 ;; Auto vars:     Size  Location     Type
  8195 ;;  bAdd            1    1[COMMON] unsigned char 
  8196 ;;  DATAEE_Write    1    2[COMMON] unsigned char 
  8197 ;; Return value:  Size  Location     Type
  8198 ;;                  1    wreg      void 
  8199 ;; Registers used:
  8200 ;;		wreg, status,2, status,0
  8201 ;; Tracked objects:
  8202 ;;		On entry : 0/0
  8203 ;;		On exit  : 0/0
  8204 ;;		Unchanged: 0/0
  8205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8206 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8207 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8209 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8210 ;;Total ram usage:        3 bytes
  8211 ;; Hardware stack levels used:    1
  8212 ;; This function calls:
  8213 ;;		Nothing
  8214 ;; This function is called by:
  8215 ;;		i1_PROTOCOL_SAV
  8216 ;; This function uses a non-reentrant model
  8217 ;;
  8218                           
  8219                           
  8220                           ;psect for function i1_DATAEE_WriteByte
  8221  0EE9                     i1_DATAEE_WriteByte:	
  8222                           
  8223                           ;incstack = 0
  8224                           ; Regs used in i1_DATAEE_WriteByte: [wreg+status,2+status,0]
  8225                           ;i1DATAEE_WriteByte@bAdd stored from wreg
  8226  0EE9  00F1               	movwf	i1DATAEE_WriteByte@bAdd
  8227                           
  8228                           ;memory.c: 182: uint8_t GIEBitValue = 0;
  8229  0EEA  01F2               	clrf	i1DATAEE_WriteByte@GIEBitValue
  8230                           
  8231                           ;memory.c: 184: EEADRL = (bAdd & 0x0ff);
  8232  0EEB  0871               	movf	i1DATAEE_WriteByte@bAdd,w
  8233  0EEC  0023               	movlb	3	; select bank3
  8234  0EED  0091               	movwf	17	;volatile
  8235                           
  8236                           ;memory.c: 185: EEDATL = bData;
  8237  0EEE  0870               	movf	i1DATAEE_WriteByte@bData,w
  8238  0EEF  0093               	movwf	19	;volatile
  8239                           
  8240                           ;memory.c: 186: EECON1bits.EEPGD = 0;
  8241  0EF0  1395               	bcf	21,7	;volsfr
  8242                           
  8243                           ;memory.c: 187: EECON1bits.CFGS = 0;
  8244  0EF1  1315               	bcf	21,6	;volsfr
  8245                           
  8246                           ;memory.c: 188: EECON1bits.WREN = 1;
  8247  0EF2  1515               	bsf	21,2	;volsfr
  8248                           
  8249                           ;memory.c: 190: GIEBitValue = INTCONbits.GIE;
  8250  0EF3  3000               	movlw	0
  8251  0EF4  1B8B               	btfsc	11,7	;volatile
  8252  0EF5  3001               	movlw	1
  8253  0EF6  00F2               	movwf	i1DATAEE_WriteByte@GIEBitValue
  8254                           
  8255                           ;memory.c: 191: INTCONbits.GIE = 0;
  8256  0EF7  138B               	bcf	11,7	;volatile
  8257                           
  8258                           ;memory.c: 192: EECON2 = 0x55;
  8259  0EF8  3055               	movlw	85
  8260  0EF9  0096               	movwf	22	;volsfr
  8261                           
  8262                           ;memory.c: 193: EECON2 = 0xAA;
  8263  0EFA  30AA               	movlw	170
  8264  0EFB  0096               	movwf	22	;volsfr
  8265                           
  8266                           ;memory.c: 194: EECON1bits.WR = 1;
  8267  0EFC  1495               	bsf	21,1	;volsfr
  8268  0EFD                     i1l321:	
  8269                           ;memory.c: 197: {
  8270                           
  8271                           ;memory.c: 196: while (EECON1bits.WR)
  8272                           
  8273  0EFD  1895               	btfsc	21,1	;volsfr
  8274  0EFE  2EFD               	goto	i1l321
  8275                           
  8276                           ;memory.c: 198: }
  8277                           ;memory.c: 200: EECON1bits.WREN = 0;
  8278  0EFF  1115               	bcf	21,2	;volsfr
  8279                           
  8280                           ;memory.c: 201: INTCONbits.GIE = GIEBitValue;
  8281  0F00  0C72               	rrf	i1DATAEE_WriteByte@GIEBitValue,w
  8282  0F01  1C03               	skipc
  8283  0F02  138B               	bcf	11,7	;volatile
  8284  0F03  1803               	skipnc
  8285  0F04  178B               	bsf	11,7	;volatile
  8286  0F05  0008               	return
  8287  0F06                     __end_ofi1_DATAEE_WriteByte:	
  8288                           
  8289                           	psect	text49
  8290  0D74                     __ptext49:	
  8291 ;; *************** function i1_PROTOCOL_EXT *****************
  8292 ;; Defined at:
  8293 ;;		line 116 in file "protocol.c"
  8294 ;; Parameters:    Size  Location     Type
  8295 ;;  char_buf        1    wreg     PTR unsigned char 
  8296 ;;		 -> buf(48), I2C1_StatusCallback@ext_buf(48), 
  8297 ;; Auto vars:     Size  Location     Type
  8298 ;;  char_buf        1  (no storage) PTR unsigned char 
  8299 ;;		 -> buf(48), I2C1_StatusCallback@ext_buf(48), 
  8300 ;; Return value:  Size  Location     Type
  8301 ;;                  1    wreg      void 
  8302 ;; Registers used:
  8303 ;;		wreg, status,2, status,0
  8304 ;; Tracked objects:
  8305 ;;		On entry : 0/0
  8306 ;;		On exit  : 0/0
  8307 ;;		Unchanged: 0/0
  8308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8312 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8313 ;;Total ram usage:        0 bytes
  8314 ;; Hardware stack levels used:    1
  8315 ;; This function calls:
  8316 ;;		Nothing
  8317 ;; This function is called by:
  8318 ;;		_I2C1_StatusCallback
  8319 ;; This function uses a non-reentrant model
  8320 ;;
  8321                           
  8322                           
  8323                           ;psect for function i1_PROTOCOL_EXT
  8324  0D74                     i1_PROTOCOL_EXT:	
  8325                           
  8326                           ;incstack = 0
  8327                           ; Regs used in i1_PROTOCOL_EXT: [wreg+status,2+status,0]
  8328  0D74  0008               	return
  8329  0D75                     __end_ofi1_PROTOCOL_EXT:	
  8330                           
  8331                           	psect	text50
  8332  0D7C                     __ptext50:	
  8333 ;; *************** function _PROTOCOL_Read_Lock *****************
  8334 ;; Defined at:
  8335 ;;		line 124 in file "protocol.c"
  8336 ;; Parameters:    Size  Location     Type
  8337 ;;		None
  8338 ;; Auto vars:     Size  Location     Type
  8339 ;;		None
  8340 ;; Return value:  Size  Location     Type
  8341 ;;                  1    wreg      unsigned char 
  8342 ;; Registers used:
  8343 ;;		wreg
  8344 ;; Tracked objects:
  8345 ;;		On entry : 0/0
  8346 ;;		On exit  : 0/0
  8347 ;;		Unchanged: 0/0
  8348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8352 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8353 ;;Total ram usage:        0 bytes
  8354 ;; Hardware stack levels used:    1
  8355 ;; This function calls:
  8356 ;;		Nothing
  8357 ;; This function is called by:
  8358 ;;		_I2C1_StatusCallback
  8359 ;; This function uses a non-reentrant model
  8360 ;;
  8361                           
  8362                           
  8363                           ;psect for function _PROTOCOL_Read_Lock
  8364  0D7C                     _PROTOCOL_Read_Lock:	
  8365                           
  8366                           ;protocol.c: 125: return locked;
  8367                           
  8368                           ;incstack = 0
  8369                           ; Regs used in _PROTOCOL_Read_Lock: [wreg]
  8370  0D7C  0020               	movlb	0	; select bank0
  8371  0D7D  085A               	movf	_locked,w
  8372  0D7E  0008               	return
  8373  0D7F                     __end_of_PROTOCOL_Read_Lock:	
  8374                           
  8375                           	psect	text51
  8376  0DF4                     __ptext51:	
  8377 ;; *************** function _PROTOCOL_RST *****************
  8378 ;; Defined at:
  8379 ;;		line 279 in file "protocol.c"
  8380 ;; Parameters:    Size  Location     Type
  8381 ;;		None
  8382 ;; Auto vars:     Size  Location     Type
  8383 ;;		None
  8384 ;; Return value:  Size  Location     Type
  8385 ;;                  1    wreg      void 
  8386 ;; Registers used:
  8387 ;;		wreg, status,2, status,0
  8388 ;; Tracked objects:
  8389 ;;		On entry : 0/0
  8390 ;;		On exit  : 0/0
  8391 ;;		Unchanged: 0/0
  8392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8394 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8395 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8396 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8397 ;;Total ram usage:        1 bytes
  8398 ;; Hardware stack levels used:    1
  8399 ;; This function calls:
  8400 ;;		Nothing
  8401 ;; This function is called by:
  8402 ;;		_I2C1_StatusCallback
  8403 ;; This function uses a non-reentrant model
  8404 ;;
  8405                           
  8406                           
  8407                           ;psect for function _PROTOCOL_RST
  8408  0DF4                     _PROTOCOL_RST:	
  8409                           
  8410                           ;protocol.c: 280: if (readbuf.status != TLV_SET) {
  8411                           
  8412                           ;incstack = 0
  8413                           ; Regs used in _PROTOCOL_RST: [wreg+status,2+status,0]
  8414  0DF4  0020               	movlb	0	; select bank0
  8415  0DF5  086A               	movf	_readbuf+3,w
  8416  0DF6  1903               	btfsc	3,2
  8417  0DF7  0008               	return
  8418                           
  8419                           ;protocol.c: 281: readbuf.buf_cnt = 0;
  8420  0DF8  01EB               	clrf	_readbuf+4
  8421                           
  8422                           ;protocol.c: 282: readbuf.status = COMPLETE;
  8423  0DF9  3003               	movlw	3
  8424  0DFA  00F0               	movwf	??_PROTOCOL_RST
  8425  0DFB  0870               	movf	??_PROTOCOL_RST,w
  8426  0DFC  00EA               	movwf	_readbuf+3
  8427  0DFD  0008               	return
  8428  0DFE                     __end_of_PROTOCOL_RST:	
  8429                           
  8430                           	psect	text52
  8431  0D8F                     __ptext52:	
  8432 ;; *************** function _PROTOCOL_INV *****************
  8433 ;; Defined at:
  8434 ;;		line 103 in file "protocol.c"
  8435 ;; Parameters:    Size  Location     Type
  8436 ;;		None
  8437 ;; Auto vars:     Size  Location     Type
  8438 ;;		None
  8439 ;; Return value:  Size  Location     Type
  8440 ;;                  1    wreg      void 
  8441 ;; Registers used:
  8442 ;;		None
  8443 ;; Tracked objects:
  8444 ;;		On entry : 0/0
  8445 ;;		On exit  : 0/0
  8446 ;;		Unchanged: 0/0
  8447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8449 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8451 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8452 ;;Total ram usage:        0 bytes
  8453 ;; Hardware stack levels used:    1
  8454 ;; This function calls:
  8455 ;;		Nothing
  8456 ;; This function is called by:
  8457 ;;		_I2C1_StatusCallback
  8458 ;; This function uses a non-reentrant model
  8459 ;;
  8460                           
  8461                           
  8462                           ;psect for function _PROTOCOL_INV
  8463  0D8F                     _PROTOCOL_INV:	
  8464                           
  8465                           ;protocol.c: 104: invoked = 1;
  8466                           
  8467                           ;incstack = 0
  8468                           ; Regs used in _PROTOCOL_INV: []
  8469  0D8F  0020               	movlb	0	; select bank0
  8470  0D90  01D8               	clrf	_invoked
  8471  0D91  0AD8               	incf	_invoked,f
  8472  0D92  0008               	return
  8473  0D93                     __end_of_PROTOCOL_INV:	
  8474                           
  8475                           	psect	text53
  8476  0D79                     __ptext53:	
  8477 ;; *************** function _PROTOCOL_I2C_WHO *****************
  8478 ;; Defined at:
  8479 ;;		line 199 in file "protocol.c"
  8480 ;; Parameters:    Size  Location     Type
  8481 ;;		None
  8482 ;; Auto vars:     Size  Location     Type
  8483 ;;		None
  8484 ;; Return value:  Size  Location     Type
  8485 ;;                  1    wreg      unsigned char 
  8486 ;; Registers used:
  8487 ;;		wreg
  8488 ;; Tracked objects:
  8489 ;;		On entry : 0/0
  8490 ;;		On exit  : 0/0
  8491 ;;		Unchanged: 0/0
  8492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8496 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8497 ;;Total ram usage:        0 bytes
  8498 ;; Hardware stack levels used:    1
  8499 ;; This function calls:
  8500 ;;		Nothing
  8501 ;; This function is called by:
  8502 ;;		_I2C1_StatusCallback
  8503 ;; This function uses a non-reentrant model
  8504 ;;
  8505                           
  8506                           
  8507                           ;psect for function _PROTOCOL_I2C_WHO
  8508  0D79                     _PROTOCOL_I2C_WHO:	
  8509                           
  8510                           ;protocol.c: 200: return slave_address;
  8511                           
  8512                           ;incstack = 0
  8513                           ; Regs used in _PROTOCOL_I2C_WHO: [wreg]
  8514  0D79  0020               	movlb	0	; select bank0
  8515  0D7A  085D               	movf	_slave_address,w
  8516  0D7B  0008               	return
  8517  0D7C                     __end_of_PROTOCOL_I2C_WHO:	
  8518                           
  8519                           	psect	text54
  8520  0743                     __ptext54:	
  8521 ;; *************** function _PROTOCOL_I2C_SEN *****************
  8522 ;; Defined at:
  8523 ;;		line 398 in file "protocol.c"
  8524 ;; Parameters:    Size  Location     Type
  8525 ;;		None
  8526 ;; Auto vars:     Size  Location     Type
  8527 ;;  pdata           1    1[COMMON] PTR unsigned char 
  8528 ;;		 -> type_no_data(1), PROTOCOL_Send_uint8_t@pbuf(1), sendbuf(16), readbuf.length(1), 
  8529 ;;		 -> readbuf.type(1), readbuf(5), 
  8530 ;; Return value:  Size  Location     Type
  8531 ;;                  1    wreg      PTR unsigned char 
  8532 ;; Registers used:
  8533 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8534 ;; Tracked objects:
  8535 ;;		On entry : 0/0
  8536 ;;		On exit  : 0/0
  8537 ;;		Unchanged: 0/0
  8538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8540 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8541 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8542 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8543 ;;Total ram usage:        2 bytes
  8544 ;; Hardware stack levels used:    1
  8545 ;; This function calls:
  8546 ;;		Nothing
  8547 ;; This function is called by:
  8548 ;;		_I2C1_StatusCallback
  8549 ;; This function uses a non-reentrant model
  8550 ;;
  8551                           
  8552                           
  8553                           ;psect for function _PROTOCOL_I2C_SEN
  8554  0743                     _PROTOCOL_I2C_SEN:	
  8555                           
  8556                           ;protocol.c: 399: uint8_t *pdata;
  8557                           ;protocol.c: 400: switch(readbuf.status) {
  8558                           
  8559                           ;incstack = 0
  8560                           ; Regs used in _PROTOCOL_I2C_SEN: [wreg-fsr0h+status,2+status,0]
  8561  0743  2F6E               	goto	i1l2714
  8562  0744                     i1l2694:	
  8563                           ;protocol.c: 401: case TLV_SET:
  8564                           
  8565                           
  8566                           ;protocol.c: 402: pdata = &readbuf.type;
  8567  0744  3067               	movlw	(low (_readbuf| 0))& (0+255)
  8568  0745  00F0               	movwf	??_PROTOCOL_I2C_SEN
  8569  0746  0870               	movf	??_PROTOCOL_I2C_SEN,w
  8570  0747  00F1               	movwf	PROTOCOL_I2C_SEN@pdata
  8571                           
  8572                           ;protocol.c: 403: readbuf.status = TYPE_SENT;
  8573  0748  0020               	movlb	0	; select bank0
  8574  0749  01EA               	clrf	_readbuf+3
  8575  074A  0AEA               	incf	_readbuf+3,f
  8576                           
  8577                           ;protocol.c: 404: break;
  8578  074B  2F7D               	goto	i1l2716
  8579  074C                     i1l2698:	
  8580                           ;protocol.c: 405: case TYPE_SENT:
  8581                           
  8582                           
  8583                           ;protocol.c: 406: pdata = &readbuf.length;
  8584  074C  3068               	movlw	(low ((_readbuf| 0+1)))& (0+255)
  8585  074D  00F0               	movwf	??_PROTOCOL_I2C_SEN
  8586  074E  0870               	movf	??_PROTOCOL_I2C_SEN,w
  8587  074F  00F1               	movwf	PROTOCOL_I2C_SEN@pdata
  8588                           
  8589                           ;protocol.c: 407: readbuf.status = LENGTH_SENT;
  8590  0750  3002               	movlw	2
  8591  0751  2F65               	goto	L5
  8592  0752                     i1l2700:	
  8593                           ;protocol.c: 409: case LENGTH_SENT:
  8594                           
  8595                           ;protocol.c: 408: break;
  8596                           
  8597                           
  8598                           ;protocol.c: 410: if (readbuf.buf_cnt < readbuf.length) {
  8599  0752  0868               	movf	_readbuf+1,w
  8600  0753  026B               	subwf	_readbuf+4,w
  8601  0754  1803               	skipnc
  8602  0755  2F5F               	goto	i1l2704
  8603                           
  8604                           ;protocol.c: 411: pdata = &readbuf.pbuffer[readbuf.buf_cnt++];
  8605  0756  0869               	movf	low ((_readbuf| 0+2)),w
  8606  0757  076B               	addwf	_readbuf+4,w
  8607  0758  00F0               	movwf	??_PROTOCOL_I2C_SEN
  8608  0759  0870               	movf	??_PROTOCOL_I2C_SEN,w
  8609  075A  00F1               	movwf	PROTOCOL_I2C_SEN@pdata
  8610  075B  3001               	movlw	1
  8611  075C  00F0               	movwf	??_PROTOCOL_I2C_SEN
  8612  075D  0870               	movf	??_PROTOCOL_I2C_SEN,w
  8613  075E  07EB               	addwf	_readbuf+4,f
  8614  075F                     i1l2704:	
  8615                           
  8616                           ;protocol.c: 412: }
  8617                           ;protocol.c: 413: if (readbuf.buf_cnt == readbuf.length) {
  8618  075F  086B               	movf	_readbuf+4,w
  8619  0760  0668               	xorwf	_readbuf+1,w
  8620  0761  1D03               	skipz
  8621  0762  2F7D               	goto	i1l2716
  8622                           
  8623                           ;protocol.c: 414: readbuf.buf_cnt = 0;
  8624  0763  01EB               	clrf	_readbuf+4
  8625                           
  8626                           ;protocol.c: 415: readbuf.status = COMPLETE;
  8627  0764  3003               	movlw	3
  8628  0765                     L5:	
  8629  0765  00F0               	movwf	??_PROTOCOL_I2C_SEN
  8630  0766  0870               	movf	??_PROTOCOL_I2C_SEN,w
  8631  0767  00EA               	movwf	_readbuf+3
  8632                           
  8633                           ;protocol.c: 416: }
  8634                           ;protocol.c: 417: break;
  8635  0768  2F7D               	goto	i1l2716
  8636  0769                     i1l2710:	
  8637                           ;protocol.c: 418: case COMPLETE:
  8638                           
  8639                           
  8640                           ;protocol.c: 419: pdata = &type_no_data;
  8641  0769  306F               	movlw	(low (_type_no_data| 0))& (0+255)
  8642  076A  00F0               	movwf	??_PROTOCOL_I2C_SEN
  8643  076B  0870               	movf	??_PROTOCOL_I2C_SEN,w
  8644  076C  00F1               	movwf	PROTOCOL_I2C_SEN@pdata
  8645                           
  8646                           ;protocol.c: 421: }
  8647                           
  8648                           ;protocol.c: 420: break;
  8649  076D  2F7D               	goto	i1l2716
  8650  076E                     i1l2714:	
  8651  076E  0020               	movlb	0	; select bank0
  8652  076F  086A               	movf	_readbuf+3,w
  8653                           
  8654                           ; Switch size 1, requested type "space"
  8655                           ; Number of cases is 4, Range of values is 0 to 3
  8656                           ; switch strategies available:
  8657                           ; Name         Instructions Cycles
  8658                           ; simple_byte           13     7 (average)
  8659                           ; direct_byte           14     6 (fixed)
  8660                           ; jumptable            260     6 (fixed)
  8661                           ;	Chosen strategy is simple_byte
  8662  0770  3A00               	xorlw	0	; case 0
  8663  0771  1903               	skipnz
  8664  0772  2F44               	goto	i1l2694
  8665  0773  3A01               	xorlw	1	; case 1
  8666  0774  1903               	skipnz
  8667  0775  2F4C               	goto	i1l2698
  8668  0776  3A03               	xorlw	3	; case 2
  8669  0777  1903               	skipnz
  8670  0778  2F52               	goto	i1l2700
  8671  0779  3A01               	xorlw	1	; case 3
  8672  077A  1903               	skipnz
  8673  077B  2F69               	goto	i1l2710
  8674  077C  2F7D               	goto	i1l2716
  8675  077D                     i1l2716:	
  8676                           
  8677                           ;protocol.c: 422: return pdata;
  8678  077D  0871               	movf	PROTOCOL_I2C_SEN@pdata,w
  8679  077E  0008               	return
  8680  077F                     __end_of_PROTOCOL_I2C_SEN:	
  8681                           
  8682                           	psect	text55
  8683  0D76                     __ptext55:	
  8684 ;; *************** function _PROTOCOL_I2C_GET *****************
  8685 ;; Defined at:
  8686 ;;		line 203 in file "protocol.c"
  8687 ;; Parameters:    Size  Location     Type
  8688 ;;		None
  8689 ;; Auto vars:     Size  Location     Type
  8690 ;;		None
  8691 ;; Return value:  Size  Location     Type
  8692 ;;                  1    wreg      unsigned char 
  8693 ;; Registers used:
  8694 ;;		wreg
  8695 ;; Tracked objects:
  8696 ;;		On entry : 0/0
  8697 ;;		On exit  : 0/0
  8698 ;;		Unchanged: 0/0
  8699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8701 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8703 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8704 ;;Total ram usage:        0 bytes
  8705 ;; Hardware stack levels used:    1
  8706 ;; This function calls:
  8707 ;;		Nothing
  8708 ;; This function is called by:
  8709 ;;		_I2C1_StatusCallback
  8710 ;; This function uses a non-reentrant model
  8711 ;;
  8712                           
  8713                           
  8714                           ;psect for function _PROTOCOL_I2C_GET
  8715  0D76                     _PROTOCOL_I2C_GET:	
  8716                           
  8717                           ;protocol.c: 204: return value;
  8718                           
  8719                           ;incstack = 0
  8720                           ; Regs used in _PROTOCOL_I2C_GET: [wreg]
  8721  0D76  0020               	movlb	0	; select bank0
  8722  0D77  085B               	movf	_value,w
  8723  0D78  0008               	return
  8724  0D79                     __end_of_PROTOCOL_I2C_GET:	
  8725                           
  8726                           	psect	text56
  8727  0D8B                     __ptext56:	
  8728 ;; *************** function _PROTOCOL_Backplane_Slave_Enabled *****************
  8729 ;; Defined at:
  8730 ;;		line 195 in file "protocol.c"
  8731 ;; Parameters:    Size  Location     Type
  8732 ;;		None
  8733 ;; Auto vars:     Size  Location     Type
  8734 ;;		None
  8735 ;; Return value:  Size  Location     Type
  8736 ;;                  1    wreg      void 
  8737 ;; Registers used:
  8738 ;;		None
  8739 ;; Tracked objects:
  8740 ;;		On entry : 0/0
  8741 ;;		On exit  : 0/0
  8742 ;;		Unchanged: 0/0
  8743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8745 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8747 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8748 ;;Total ram usage:        0 bytes
  8749 ;; Hardware stack levels used:    1
  8750 ;; This function calls:
  8751 ;;		Nothing
  8752 ;; This function is called by:
  8753 ;;		_I2C1_StatusCallback
  8754 ;; This function uses a non-reentrant model
  8755 ;;
  8756                           
  8757                           
  8758                           ;psect for function _PROTOCOL_Backplane_Slave_Enabled
  8759  0D8B                     _PROTOCOL_Backplane_Slave_Enabled:	
  8760                           
  8761                           ;protocol.c: 196: backplane_slave_enabled = 1;
  8762                           
  8763                           ;incstack = 0
  8764                           ; Regs used in _PROTOCOL_Backplane_Slave_Enabled: []
  8765  0D8B  0020               	movlb	0	; select bank0
  8766  0D8C  01D4               	clrf	_backplane_slave_enabled
  8767  0D8D  0AD4               	incf	_backplane_slave_enabled,f
  8768  0D8E  0008               	return
  8769  0D8F                     __end_of_PROTOCOL_Backplane_Slave_Enabled:	
  8770                           
  8771                           	psect	text57
  8772  0EB2                     __ptext57:	
  8773 ;; *************** function _EUSART_Transmit_ISR *****************
  8774 ;; Defined at:
  8775 ;;		line 165 in file "mcc_generated_files/eusart.c"
  8776 ;; Parameters:    Size  Location     Type
  8777 ;;		None
  8778 ;; Auto vars:     Size  Location     Type
  8779 ;;		None
  8780 ;; Return value:  Size  Location     Type
  8781 ;;                  1    wreg      void 
  8782 ;; Registers used:
  8783 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8784 ;; Tracked objects:
  8785 ;;		On entry : 0/0
  8786 ;;		On exit  : 0/0
  8787 ;;		Unchanged: 0/0
  8788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8791 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8792 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8793 ;;Total ram usage:        1 bytes
  8794 ;; Hardware stack levels used:    1
  8795 ;; This function calls:
  8796 ;;		Nothing
  8797 ;; This function is called by:
  8798 ;;		_INTERRUPT_InterruptManager
  8799 ;; This function uses a non-reentrant model
  8800 ;;
  8801                           
  8802                           
  8803                           ;psect for function _EUSART_Transmit_ISR
  8804  0EB2                     _EUSART_Transmit_ISR:	
  8805                           
  8806                           ;eusart.c: 169: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
  8807                           
  8808                           ;incstack = 0
  8809                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  8810  0EB2  3008               	movlw	8
  8811  0EB3  027A               	subwf	_eusartTxBufferRemaining,w	;volatile
  8812  0EB4  1803               	skipnc
  8813  0EB5  2ECA               	goto	i1l236
  8814                           
  8815                           ;eusart.c: 170: {
  8816                           ;eusart.c: 171: TXREG = eusartTxBuffer[eusartTxTail++];
  8817  0EB6  087B               	movf	_eusartTxTail,w
  8818  0EB7  3EA8               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  8819  0EB8  0086               	movwf	6
  8820  0EB9  0187               	clrf	7
  8821  0EBA  0801               	movf	1,w
  8822  0EBB  0023               	movlb	3	; select bank3
  8823  0EBC  009A               	movwf	26	;volatile
  8824  0EBD  3001               	movlw	1
  8825  0EBE  00F0               	movwf	??_EUSART_Transmit_ISR
  8826  0EBF  0870               	movf	??_EUSART_Transmit_ISR,w
  8827  0EC0  07FB               	addwf	_eusartTxTail,f	;volatile
  8828                           
  8829                           ;eusart.c: 172: if(sizeof(eusartTxBuffer) <= eusartTxTail)
  8830  0EC1  3008               	movlw	8
  8831  0EC2  027B               	subwf	_eusartTxTail,w	;volatile
  8832  0EC3  1803               	btfsc	3,0
  8833                           
  8834                           ;eusart.c: 173: {
  8835                           ;eusart.c: 174: eusartTxTail = 0;
  8836  0EC4  01FB               	clrf	_eusartTxTail	;volatile
  8837                           
  8838                           ;eusart.c: 175: }
  8839                           ;eusart.c: 176: eusartTxBufferRemaining++;
  8840  0EC5  3001               	movlw	1
  8841  0EC6  00F0               	movwf	??_EUSART_Transmit_ISR
  8842  0EC7  0870               	movf	??_EUSART_Transmit_ISR,w
  8843  0EC8  07FA               	addwf	_eusartTxBufferRemaining,f	;volatile
  8844                           
  8845                           ;eusart.c: 177: }
  8846  0EC9  0008               	return
  8847  0ECA                     i1l236:	
  8848                           
  8849                           ;eusart.c: 178: else
  8850                           ;eusart.c: 179: {
  8851                           ;eusart.c: 180: PIE1bits.TXIE = 0;
  8852  0ECA  0021               	movlb	1	; select bank1
  8853  0ECB  1211               	bcf	17,4	;volatile
  8854  0ECC  0008               	return
  8855  0ECD                     __end_of_EUSART_Transmit_ISR:	
  8856                           
  8857                           	psect	text58
  8858  0E97                     __ptext58:	
  8859 ;; *************** function _EUSART_Receive_ISR *****************
  8860 ;; Defined at:
  8861 ;;		line 184 in file "mcc_generated_files/eusart.c"
  8862 ;; Parameters:    Size  Location     Type
  8863 ;;		None
  8864 ;; Auto vars:     Size  Location     Type
  8865 ;;		None
  8866 ;; Return value:  Size  Location     Type
  8867 ;;                  1    wreg      void 
  8868 ;; Registers used:
  8869 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8870 ;; Tracked objects:
  8871 ;;		On entry : 0/0
  8872 ;;		On exit  : 0/0
  8873 ;;		Unchanged: 0/0
  8874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8876 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8877 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8878 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8879 ;;Total ram usage:        1 bytes
  8880 ;; Hardware stack levels used:    1
  8881 ;; This function calls:
  8882 ;;		Nothing
  8883 ;; This function is called by:
  8884 ;;		_INTERRUPT_InterruptManager
  8885 ;; This function uses a non-reentrant model
  8886 ;;
  8887                           
  8888                           
  8889                           ;psect for function _EUSART_Receive_ISR
  8890  0E97                     _EUSART_Receive_ISR:	
  8891                           
  8892                           ;eusart.c: 187: if(1 == RCSTAbits.OERR)
  8893                           
  8894                           ;incstack = 0
  8895                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  8896  0E97  0023               	movlb	3	; select bank3
  8897  0E98  1C9D               	btfss	29,1	;volatile
  8898  0E99  2E9C               	goto	i1l3142
  8899                           
  8900                           ;eusart.c: 188: {
  8901                           ;eusart.c: 191: RCSTAbits.CREN = 0;
  8902  0E9A  121D               	bcf	29,4	;volatile
  8903                           
  8904                           ;eusart.c: 192: RCSTAbits.CREN = 1;
  8905  0E9B  161D               	bsf	29,4	;volatile
  8906  0E9C                     i1l3142:	
  8907                           
  8908                           ;eusart.c: 193: }
  8909                           ;eusart.c: 196: eusartRxBuffer[eusartRxHead++] = RCREG;
  8910  0E9C  0819               	movf	25,w	;volatile
  8911  0E9D  00F0               	movwf	??_EUSART_Receive_ISR
  8912  0E9E  0020               	movlb	0	; select bank0
  8913  0E9F  0862               	movf	_eusartRxHead,w
  8914  0EA0  3EA0               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  8915  0EA1  0086               	movwf	6
  8916  0EA2  0187               	clrf	7
  8917  0EA3  0870               	movf	??_EUSART_Receive_ISR,w
  8918  0EA4  0081               	movwf	1
  8919  0EA5  3001               	movlw	1
  8920  0EA6  00F0               	movwf	??_EUSART_Receive_ISR
  8921  0EA7  0870               	movf	??_EUSART_Receive_ISR,w
  8922  0EA8  07E2               	addwf	_eusartRxHead,f	;volatile
  8923                           
  8924                           ;eusart.c: 197: if(sizeof(eusartRxBuffer) <= eusartRxHead)
  8925  0EA9  3008               	movlw	8
  8926  0EAA  0262               	subwf	_eusartRxHead,w	;volatile
  8927  0EAB  1803               	btfsc	3,0
  8928                           
  8929                           ;eusart.c: 198: {
  8930                           ;eusart.c: 199: eusartRxHead = 0;
  8931  0EAC  01E2               	clrf	_eusartRxHead	;volatile
  8932                           
  8933                           ;eusart.c: 200: }
  8934                           ;eusart.c: 201: eusartRxCount++;
  8935  0EAD  3001               	movlw	1
  8936  0EAE  00F0               	movwf	??_EUSART_Receive_ISR
  8937  0EAF  0870               	movf	??_EUSART_Receive_ISR,w
  8938  0EB0  07E0               	addwf	_eusartRxCount,f	;volatile
  8939  0EB1  0008               	return
  8940  0EB2                     __end_of_EUSART_Receive_ISR:	
  8941  007E                     btemp	set	126	;btemp
  8942  007E                     int$flags	set	126
  8943  007E                     wtemp0	set	126


Data Sizes:
    Strings     186
    Constant    10
    Data        6
    BSS         180
    Persistent  8
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      14
    BANK0            80     48      80
    BANK1            80      0      62
    BANK2            80      0      48
    BANK3            80      0      48
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    PROTOCOL_Extension_Handler$0	PTR unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), I2C1_StatusCallback@ext_buf(BANK3[48]), 

    data	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    strncmp@s2	PTR const unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_15(CODE[4]), STR_14(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), 
		 -> STR_8(CODE[4]), STR_7(CODE[4]), STR_6(CODE[4]), STR_4(CODE[4]), 

    atoi@s	PTR const unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), 

    PROTOCOL_I2C_SEN@pdata	PTR unsigned char  size(1) Largest target is 16
		 -> type_no_data(BANK0[1]), PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK1[16]), readbuf.length(BANK0[1]), 
		 -> readbuf.type(BANK0[1]), readbuf(BANK0[5]), 

    PROTOCOL_I2C_Send_uint16_t@pbuffer	PTR unsigned int  size(1) Largest target is 2
		 -> PROTOCOL_Send_uint16_t@pbuf(BANK1[2]), 

    PROTOCOL_I2C_Set_TLV@pbuffer	PTR unsigned char  size(1) Largest target is 16
		 -> PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK1[16]), 

    PROTOCOL_EXT@char_buf	PTR unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), I2C1_StatusCallback@ext_buf(BANK3[48]), 

    PROTOCOL_Extension_Handler	PTR FTN(PTR unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    PROTOCOL_Set_Func@loop_func	PTR void  size(2) Largest target is 1
		 -> loop_func(), 

    PROTOCOL_Loop_Func	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), loop_func(), 

    PROTOCOL_Initialize@inv_handler	PTR void  size(2) Largest target is 1
		 -> inv_handler(), 

    PROTOCOL_Inv_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), inv_handler(), 

    PROTOCOL_Initialize@set_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Set_Handler	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@stop_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Stop_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@start_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Start_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@device_id	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_1(CODE[11]), 

    device_id_	PTR const unsigned char  size(2) Largest target is 8192
		 -> ROM(CODE[8192]), STR_1(CODE[11]), 

    S841$pbuffer	PTR unsigned char  size(1) Largest target is 16
		 -> PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK1[16]), 

    readbuf.pbuffer	PTR unsigned char  size(1) Largest target is 16
		 -> PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK1[16]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 8192
		 -> STR_10(CODE[4]), buf(BANK2[48]), STR_2(CODE[7]), ROM(CODE[8192]), 
		 -> printf@c(BANK0[1]), STR_1(CODE[11]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_48(CODE[10]), STR_47(CODE[9]), STR_46(CODE[10]), STR_45(CODE[9]), 
		 -> STR_44(CODE[4]), STR_43(CODE[4]), STR_42(CODE[4]), STR_41(CODE[4]), 
		 -> STR_40(CODE[4]), STR_39(CODE[4]), STR_38(CODE[4]), STR_37(CODE[4]), 
		 -> STR_36(CODE[14]), STR_35(CODE[9]), STR_34(CODE[10]), STR_33(CODE[9]), 
		 -> STR_32(CODE[10]), STR_31(CODE[9]), STR_30(CODE[7]), STR_29(CODE[4]), 
		 -> STR_28(CODE[4]), STR_27(CODE[9]), STR_26(CODE[4]), STR_25(CODE[4]), 
		 -> STR_24(CODE[10]), STR_23(CODE[4]), STR_22(CODE[4]), STR_21(CODE[8]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[9]), STR_17(CODE[6]), 
		 -> STR_16(CODE[10]), STR_13(CODE[10]), STR_9(CODE[10]), STR_5(CODE[10]), 
		 -> STR_3(CODE[5]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    sp__PROTOCOL_I2C_SEN	PTR unsigned char  size(1) Largest target is 16
		 -> type_no_data(BANK0[1]), PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK1[16]), readbuf.length(BANK0[1]), 
		 -> readbuf.type(BANK0[1]), readbuf(BANK0[5]), 

    I2C1_StatusCallback@pdata	PTR unsigned char  size(1) Largest target is 16
		 -> type_no_data(BANK0[1]), PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK1[16]), readbuf.length(BANK0[1]), 
		 -> readbuf.type(BANK0[1]), readbuf(BANK0[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_I2C1_ISR
    _I2C1_ISR->_I2C1_StatusCallback
    _I2C1_StatusCallback->i1_PROTOCOL_SAV
    i1_PROTOCOL_SAV->i1_DATAEE_WriteByte

Critical Paths under _main in BANK0

    _main->_PROTOCOL_Loop
    _loop_func->_abs
    _inv_handler->_PROTOCOL_Send_uint16_t
    _PROTOCOL_Send_uint16_t->_PROTOCOL_I2C_Send_uint16_t
    _PROTOCOL_I2C_Send_uint16_t->_printf
    _printf->___lwmod
    _putch->_EUSART_Write
    ___lwmod->___lwdiv
    _atoi->___wmul
    _PROTOCOL_Write_Device_Address->_DATAEE_WriteByte
    _PROTOCOL_SAV->_DATAEE_WriteByte
    _PROTOCOL_Initialize->_DATAEE_ReadByte

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   13769
                                             47 BANK0      1     1      0
                     _ADC_Initialize
                  _EUSART_Initialize
                    _I2C1_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                _PROTOCOL_Initialize
                      _PROTOCOL_Loop
                  _PROTOCOL_Set_Func
                    _TMR0_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (1) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_Initialize                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Set_Func                                    2     0      2      86
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Loop                                        4     4      0   13145
                                             43 BANK0      4     4      0
                   Absolute function *
                        _EUSART_Read
                       _PROTOCOL_EXT
       _PROTOCOL_Read_Device_Address
                       _PROTOCOL_SAV
                       _PROTOCOL_SET
                       _PROTOCOL_STA
                       _PROTOCOL_STP
      _PROTOCOL_Write_Device_Address
            _TMR0_HasOverflowOccured
                               _atoi
                        _inv_handler *
                          _loop_func *
                             _printf
                            _strncmp
 ---------------------------------------------------------------------------------
 (2) _strncmp                                              7     2      5    1670
                                              0 BANK0      7     2      5
 ---------------------------------------------------------------------------------
 (2) _loop_func                                            5     5      0     628
                                              4 BANK0      5     5      0
            _ADC_GetConversionResult
               _ADC_IsConversionDone
                  _ADC_SelectChannel
                _ADC_StartConversion
                                _abs
 ---------------------------------------------------------------------------------
 (3) _abs                                                  4     2      2     538
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _ADC_StartConversion                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_SelectChannel                                    2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _ADC_IsConversionDone                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_GetConversionResult                              2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _inv_handler                                          0     0      0    5142
             _PROTOCOL_Send_uint16_t
 ---------------------------------------------------------------------------------
 (3) _PROTOCOL_Send_uint16_t                               3     1      2    5142
                                             40 BANK0      3     1      2
         _PROTOCOL_I2C_Send_uint16_t
 ---------------------------------------------------------------------------------
 (4) _PROTOCOL_I2C_Send_uint16_t                           6     5      1    5056
                                             34 BANK0      6     5      1
               _PROTOCOL_I2C_Set_TLV
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              24    20      4    4212
                                             14 BANK0     20    16      4
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      66
                                              2 BANK0      1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (4) _EUSART_Write                                         2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     287
                                              8 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     290
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (5) _PROTOCOL_I2C_Set_TLV                                 5     3      2     625
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 8     6      2     830
                                              6 BANK0      8     6      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     474
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _TMR0_HasOverflowOccured                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_Write_Device_Address                        2     2      0     240
                                              3 BANK0      2     2      0
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_STP                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_STA                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_SET                                         2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_SAV                                         1     1      0     196
                                              3 BANK0      1     1      0
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (3) _DATAEE_WriteByte                                     3     2      1     196
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_EXT                                         1     1      0      90
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Read                                          2     2      0      24
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Initialize                                 10     2      8     538
                                              1 BANK0     10     2      8
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (2) _DATAEE_ReadByte                                      1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2C1_Initialize                                      2     2      0       0
                                              0 BANK0      2     2      0
       _PROTOCOL_Read_Device_Address
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_Read_Device_Address                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Initialize                                    1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                           1     1      0     233
                                              9 COMMON     1     1      0
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
                           _I2C1_ISR
 ---------------------------------------------------------------------------------
 (9) _I2C1_ISR                                             2     2      0     233
                                              7 COMMON     2     2      0
                _I2C1_StatusCallback
 ---------------------------------------------------------------------------------
 (10) _I2C1_StatusCallback                                 3     3      0     187
                                              4 COMMON     3     3      0
   _PROTOCOL_Backplane_Slave_Enabled
                   _PROTOCOL_I2C_GET
                   _PROTOCOL_I2C_SEN
                   _PROTOCOL_I2C_WHO
                       _PROTOCOL_INV
                       _PROTOCOL_RST
                 _PROTOCOL_Read_Lock
                     i1_PROTOCOL_EXT
                     i1_PROTOCOL_SAV
                     i1_PROTOCOL_SET
                     i1_PROTOCOL_STA
                     i1_PROTOCOL_STP
 ---------------------------------------------------------------------------------
 (11) i1_PROTOCOL_STP                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (11) i1_PROTOCOL_STA                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (11) i1_PROTOCOL_SET                                      2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (11) i1_PROTOCOL_SAV                                      1     1      0      94
                                              3 COMMON     1     1      0
                 i1_DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (12) i1_DATAEE_WriteByte                                  3     2      1      94
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (11) i1_PROTOCOL_EXT                                      1     1      0       0
 ---------------------------------------------------------------------------------
 (11) _PROTOCOL_Read_Lock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _PROTOCOL_RST                                        1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _PROTOCOL_INV                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _PROTOCOL_I2C_WHO                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _PROTOCOL_I2C_SEN                                    2     2      0      26
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (11) _PROTOCOL_I2C_GET                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _PROTOCOL_Backplane_Slave_Enabled                    0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _EUSART_Receive_ISR                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Initialize
   _EUSART_Initialize
   _I2C1_Initialize
     _PROTOCOL_Read_Device_Address
   _OSCILLATOR_Initialize
   _PIN_MANAGER_Initialize
   _PROTOCOL_Initialize
     _DATAEE_ReadByte
   _PROTOCOL_Loop
     Absolute function(Fake) *
     _EUSART_Read *
     _PROTOCOL_EXT *
     _PROTOCOL_Read_Device_Address *
     _PROTOCOL_SAV *
       _DATAEE_WriteByte
     _PROTOCOL_SET *
     _PROTOCOL_STA *
     _PROTOCOL_STP *
     _PROTOCOL_Write_Device_Address *
       _DATAEE_WriteByte
     _TMR0_HasOverflowOccured *
     _atoi *
       ___wmul
       _isdigit
     _inv_handler *
       _PROTOCOL_Send_uint16_t
         _PROTOCOL_I2C_Send_uint16_t
           _PROTOCOL_I2C_Set_TLV
           _printf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul
             _isdigit
             _putch
               _EUSART_Write
     _loop_func *
       _ADC_GetConversionResult
       _ADC_IsConversionDone
       _ADC_SelectChannel
       _ADC_StartConversion
       _abs
     _printf *
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
     _strncmp *
   _PROTOCOL_Set_Func
   _TMR0_Initialize
   _WDT_Initialize

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR
   _I2C1_ISR
     _I2C1_StatusCallback
       _PROTOCOL_Backplane_Slave_Enabled
       _PROTOCOL_I2C_GET
       _PROTOCOL_I2C_SEN
       _PROTOCOL_I2C_WHO
       _PROTOCOL_INV
       _PROTOCOL_RST
       _PROTOCOL_Read_Lock
       i1_PROTOCOL_EXT
       i1_PROTOCOL_SAV
         i1_DATAEE_WriteByte
       i1_PROTOCOL_SET
       i1_PROTOCOL_STA
       i1_PROTOCOL_STP

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     30      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      3E       7       77.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      30       9       60.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      30      11       60.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      FC      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      FC      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Wed Sep 20 08:37:29 2017

                                         _i 0053                                           _j 0052  
                                         pc 0002                      __end_ofi1_PROTOCOL_EXT 0D75  
                    __end_ofi1_PROTOCOL_SAV 0DD9                      __end_ofi1_PROTOCOL_SET 0DBA  
                    __end_ofi1_PROTOCOL_STA 0D97                      __end_ofi1_PROTOCOL_STP 0D82  
           __end_of_TMR0_HasOverflowOccured 0D9F                                 __CFG_CP$OFF 0000  
                                        _on 005E                         ___wmul@multiplicand 0022  
                           _timer0ReloadVal 005F                                 __CFG_LVP$ON 0000  
                                       l224 0F95                                         l321 0F7E  
                                       l501 0144                                         l508 01BA  
                                       l525 0245                                         l473 0097  
                                       l485 0164                                         l649 0246  
                                       l919 0ED6                                __CFG_CPD$OFF 0000  
                                       _abs 0E45                                         _buf 0120  
                                       _cnt 005C                                         _sum 00B8  
                              __CFG_BORV$LO 0000                                         wreg 0009  
                              __CFG_IESO$ON 0000                                ?_EUSART_Read 0070  
                          __end_of_I2C1_ISR 0FD3                                        ?_abs 0020  
                                      l3000 0652                                        l3002 064A  
                                      l3020 067B                                        l3012 066F  
                                      l3004 0657                                        l3022 06A4  
                                      l3018 0677                                        l3202 0284  
                                      l2420 0E43                                        l3028 06B4  
                                      l2500 00A5                                        l3230 02FB  
                                      l3222 02BD                                        l2408 0FA9  
                                      l2600 01F6                                        l2520 00F5  
                                      l2512 00E1                                        l2504 00B2  
                                      l3240 0339                                        l2426 0ED0  
                                      l2450 07CA                                        l2530 0112  
                                      l3234 0314                                        l3226 02E2  
                                      l2460 07E5                                        l2604 0203  
                                      l2540 0130                                        l2524 00F7  
                                      l3260 03CA                                        l3244 0358  
                                      l2614 0210                                        l2542 013B  
                                      l2534 0114                                        l2526 0105  
                                      l3254 039F                                        l3190 026C  
                              _tmr_overflow 0055                                        l2456 07DC  
                                      l2448 07BE                                        l2472 0FDA  
                                      l2608 020B                                        l2560 017E  
                                      l2536 0123                                        l2616 0076  
                                      l2640 060C                                        l3248 037C  
                                      l2474 0FE6                                        l2482 0FFB  
                                      l2394 0F8A                                        l2570 018F  
                                      l2650 061C                                        l2642 0618  
                                      l2564 0189                                        l2548 0146  
                                      l2492 0092                                        l2652 0637  
                                      l3188 026B                                        l2478 0FF2  
                                      l2638 05DB                                        l3198 027A  
                                      l2592 01E3                                        l2584 01D6  
                                      l2576 01AE                                        l2586 01D9  
                                      l2498 009C                                        l2932 055E  
                                      l2598 01F2                                        l2950 0598  
                                      l2942 0588                                        l2944 058B  
                                      l2954 05A5                                        l2938 057B  
                                      l2970 05C6                                        l2956 05A8  
                                      l2972 05CF                                        l2886 0F27  
                                      l2984 071F                                        l2992 0701  
                                      l2994 0740                                        l2988 0737  
                                      STR_1 03E7                                        STR_2 0451  
                                      STR_3 045E                                        STR_4 047F  
                                      STR_5 0410                                        STR_6 048F  
                                      STR_7 0477                                        STR_8 0483  
                                      STR_9 041A                                        u1315 07C1  
                                      u1405 0FEC                                        _LATA 010C  
                                      _LATB 010D                                        u1335 07CB  
                                      u1415 0FF3                                        _LATC 010E  
                                      u1345 07D5                                        u1275 0ED7  
                                      u1355 07DD                                        u1285 0EDC  
                                      u1385 0FDD                                        u1545 01A4  
                                      u2347 05B9                                        u1485 010B  
                                      u2357 05D0                                        u2367 0F4A  
                                      u1585 01C9                                        i1l64 0FC0  
                                      i1l86 0495                                        _TMR0 0015  
                                      _WPUA 020C                                        _WPUB 020D  
                                      _WPUC 020E                                __CFG_WRT$OFF 0000  
                             __CFG_FCMEN$ON 0000                                        abs@a 0020  
                                      _data 00BA                                        _atoi 0648  
                                      _main 077F                                        fsr0h 0005  
                                      fsr1h 0007                                        indf0 0000  
                                      fsr0l 0004                                        indf1 0001  
                                      fsr1l 0006                                        btemp 007E  
                             __CFG_BOREN$ON 0000                                        start 0030  
                             __CFG_MCLRE$ON 0000                         _I2C1_StatusCallback 0493  
                                     ??_abs 0022                             ?i1_PROTOCOL_EXT 0070  
                           ?i1_PROTOCOL_SAV 0070                             ?i1_PROTOCOL_SET 0070  
                 __size_of_DATAEE_WriteByte 0023                             ?i1_PROTOCOL_STA 0070  
                           ?i1_PROTOCOL_STP 0070                     __end_of_TMR0_Initialize 0E27  
                             __CFG_PLLEN$ON 0000                               ?_EUSART_Write 0070  
            __size_of_OSCILLATOR_Initialize 0005               __end_of_OSCILLATOR_Initialize 0800  
         PROTOCOL_I2C_Send_uint16_t@pbuffer 0042                                       ?_atoi 0026  
                                     ?_main 0070                                       STR_10 047B  
                                     STR_11 048B                                       STR_12 0487  
                                     STR_20 0463                                       STR_13 03FC  
                                     STR_14 0473                                       STR_22 0467  
                                     STR_30 044A                                       STR_15 046F  
                                     STR_24 042E                                       STR_32 0424  
                                     STR_16 03F2                                       STR_41 046B  
                                     STR_17 0458                               __CFG_WDTE$OFF 0000  
                                     STR_42 0463                                       STR_18 0441  
                                     STR_34 0406                                       STR_19 046B  
                                     STR_35 0438                                       STR_36 03D9  
                           __end_of___lwdiv 07EA                                       i1l103 04B8  
                                     i1l124 0556                                       i1l321 0EFD  
                                     i1l170 0021                                       i1l236 0ECA  
                                     i1l174 002B                                       i1l168 0015  
                           __end_of___lwmod 1000                           _PROTOCOL_Set_Func 0DEB  
                PROTOCOL_I2C_Set_TLV@length 0020                                       _RCREG 0199  
                                     _RCSTA 019D                                       _TRISA 008C  
                                     _TRISB 008D                                       _TRISC 008E  
                                     _TXREG 019A                                       _TXSTA 019E  
          __size_of_ADC_GetConversionResult 0009                __size_of_PROTOCOL_Initialize 0048  
                PROTOCOL_I2C_Set_TLV@status 0024                          ?_PROTOCOL_Set_Func 0020  
                         ??_I2C1_Initialize 0020                        ?_I2C1_StatusCallback 0070  
                           _DATAEE_ReadByte 0DFE             ??_PROTOCOL_Write_Device_Address 0023  
                           __end_of_dpowers 03D9                              _WDT_Initialize 0D9F  
                                     _count 00B6              PROTOCOL_Initialize@inv_handler 0026  
                           __end_of_isdigit 0E45                                ?_inv_handler 0070  
                                     _value 005B                                       atoi@a 002B  
                                     atoi@s 002D                                       _putch 0DA7  
                                     pclath 000A                         ??_PROTOCOL_Set_Func 0022  
                    ??_PROTOCOL_I2C_Set_TLV 0022                                       status 0003  
                                     wtemp0 007E                             __end_of_strncmp 0743  
                           __initialization 0032                                __end_of_atoi 06B9  
                              __end_of_main 07B5                              ??_EUSART_Write 0020  
               ?_INTERRUPT_InterruptManager 0070                   __end_of_PROTOCOL_Set_Func 0DF4  
          PROTOCOL_Initialize@start_handler 0023                                      ??_atoi 0028  
                                    ??_main 004F                          _PROTOCOL_Read_Lock 0D7C  
                    __end_of_WDT_Initialize 0DA3                       ??_I2C1_StatusCallback 0074  
                __end_ofi1_DATAEE_WriteByte 0F06               __size_of_ADC_IsConversionDone 0007  
                                    _ADCON0 009D                                      _ADCON1 009E  
                                    i1S3328 0800                                      _ADRESH 009C  
                                    _EEADRH 0192                                      _ADRESL 009B  
                                    _EEADRL 0191                                      _EEDATH 0194  
                                    _EEDATL 0193                                      _EECON2 0196  
                                    _ANSELA 018C                                      ?_putch 0070  
                                    _ANSELB 018D                                      _ANSELC 018E  
                       ?_PROTOCOL_Read_Lock 0070                          _PROTOCOL_Loop_Func 00B4  
                                    i1l3142 0E9C                                      i1l3062 0FC7  
                                    i1l3064 0FC9                                      i1l3056 0FBE  
                                    i1l2700 0752                                      i1l2710 0769  
                                    i1l2704 075F                                      i1l2800 04B0  
                                    i1l2714 076E                                      i1l2802 04B4  
                                    i1l2716 077D                                      i1l2820 04E8  
                                    i1l2804 04BB                                      i1l2812 04D5  
                                    i1l2814 04DE                                      i1l2840 0511  
                                    i1l2808 04BD                                      i1l2850 052F  
                                    i1l2826 04F3                                      i1l2836 050E  
                                    i1l2844 051B                                      i1l2694 0744  
                                    i1l2854 053B                                      i1l2846 0527  
                                    i1l2790 049F                                      i1l2862 054C  
                                    i1l2848 052A                                      i1l2698 074C  
                                    i1l2858 0540                                      i1l2794 04A4  
                                    i1l2796 04A8                                      i1l2788 0499  
                                    i1l2798 04AC                                      _OSCCON 0099  
          __size_of_TMR0_HasOverflowOccured 0004                                      _TMR0IF 005A  
                                    _SPBRGH 019C                                      _SPBRGL 019B  
                                    _WDTCON 0097              PROTOCOL_Initialize@set_handler 0025  
                            __CFG_PWRTE$OFF 0000                   PROTOCOL_Initialize@scaler 0028  
                                    ___wmul 0ECD                              __CFG_STVREN$ON 0000  
                                 ??___lwdiv 0024                        ??_PROTOCOL_Read_Lock 0070  
                                 ??___lwmod 002C                                _type_no_data 006F  
                       _EUSART_Transmit_ISR 0EB2                            ?_TMR0_Initialize 0070  
                                    _locked 005A                                   ?_I2C1_ISR 0070  
                   ?_PROTOCOL_Send_uint16_t 0048                                      _printf 0071  
                   __end_of_DATAEE_ReadByte 0E0B                                __pdataCOMMON 007D  
                                 ??_isdigit 0020                    __end_of_PROTOCOL_I2C_GET 0D79  
                  __end_of_PROTOCOL_I2C_SEN 077F                    __end_of_PROTOCOL_I2C_WHO 0D7C  
                           ?_WDT_Initialize 0070               i1DATAEE_WriteByte@GIEBitValue 0072  
                                 ??_strncmp 0025                   PROTOCOL_Send_uint8_t@pbuf 00D4  
                      ?_EUSART_Transmit_ISR 0070                        __size_of_EUSART_Read 001F  
                   __end_of__initialization 006D                __size_of_ADC_StartConversion 0003  
                            __pcstackCOMMON 0070                                __pidataBANK0 0DA3  
                              __pidataBANK1 0002              __end_of_PROTOCOL_Send_uint16_t 07FB  
                          _DATAEE_WriteByte 0F65                               __end_of_putch 0DAD  
                                ??_I2C1_ISR 0077                  __size_of_PROTOCOL_Set_Func 0009  
                     __end_of_PROTOCOL_Loop 03CF                     _ADC_GetConversionResult 0DE2  
                            _OPTION_REGbits 0095                ??_PROTOCOL_I2C_Send_uint16_t 0043  
                   PROTOCOL_Send_float@pbuf 00CC                       ??_EUSART_Transmit_ISR 0070  
                                   ??_putch 0022                                  __pbssBANK0 0050  
                                __pbssBANK1 00A0                                  __pbssBANK2 0120  
                                __pbssBANK3 01A0                      i1DATAEE_WriteByte@bAdd 0071  
                      __end_of_EUSART_Write 0FAC                 PROTOCOL_Send_uint16_t@value 0048  
                      __size_of_inv_handler 000E                 __size_of_EUSART_Receive_ISR 001B  
                          ??i1_PROTOCOL_EXT 0070                            ??i1_PROTOCOL_SAV 0073  
                          ??i1_PROTOCOL_SET 0070                            ??i1_PROTOCOL_STA 0070  
                          ??i1_PROTOCOL_STP 0070                         _PROTOCOL_Initialize 06B9  
                                __pmaintext 077F                                     ?___wmul 0020  
                                __pintentry 0004                             _I2C1_Initialize 0F44  
                        __size_of_loop_func 007D                                     _BAUDCON 019F  
       __size_of_PROTOCOL_I2C_Send_uint16_t 0074                                  _device_id_ 00D5  
                                   _APFCON0 011D                                     _APFCON1 011E  
                                   ?_printf 002E                     __size_of_ADC_Initialize 0008  
                I2C1_StatusCallback@ext_buf 01A0                  I2C1_StatusCallback@ext_cnt 0063  
                I2C1_StatusCallback@ext_len 0064                            ?_DATAEE_ReadByte 0070  
                             _eusartRxCount 0060           I2C1_StatusCallback@slaveWriteType 0066  
                PROTOCOL_Send_uint16_t@pbuf 00D1                        ?_PROTOCOL_Initialize 0021  
                                   _OSCTUNE 0098                                     _SSP1ADD 0212  
                                   _SSP1BUF 0211                                     _SSP1MSK 0213  
                    _PROTOCOL_Start_Handler 00DB                     _TMR0_HasOverflowOccured 0D9B  
                      DATAEE_WriteByte@bAdd 0021                                  _continuity 00DD  
                             ?_PROTOCOL_INV 0070                               ?_PROTOCOL_EXT 0070  
                             ?_PROTOCOL_SAV 0070                               ?_PROTOCOL_SET 0070  
                             ?_PROTOCOL_STA 0070                               ?_PROTOCOL_RST 0070  
                             ?_PROTOCOL_STP 0070                             __size_of___wmul 001C  
                                   ___lwdiv 07B5                                     ___lwmod 0FD3  
                 ??_ADC_GetConversionResult 0022                                     __ptext1 0D9F  
                                   __ptext2 0E19                                     __ptext3 0DEB  
                                   __ptext4 0246                                     __ptext5 0701  
                                   __ptext6 0557                                     __ptext7 0E45  
                                   __ptext8 0D88                                     __ptext9 0E54  
                           __size_of_printf 01D5                                     _dpowers 03CF  
                     _OSCILLATOR_Initialize 07FB                                __size_of_abs 000F  
PROTOCOL_Write_Device_Address@device_id_i2c 0024                       ??_PROTOCOL_Initialize 0029  
                                   _isdigit 0E36                                     _readbuf 0067  
                                   _sec_cnt 0057                                     _invoked 0058  
                  ??_PIN_MANAGER_Initialize 0020                                     _sendbuf 00BC  
                                   _tmr_cnt 0056                                     clrloop0 0DAE  
                                   _running 0059                                     _strncmp 0701  
                      end_of_initialization 006D                           __end_of_loop_func 05D4  
                _PROTOCOL_Extension_Handler 00B2               __size_of_PROTOCOL_I2C_Set_TLV 0019  
                        i1_DATAEE_WriteByte 0EE9                           _EUSART_Initialize 0E7D  
                   __end_of_I2C1_Initialize 0F65                __end_of_ADC_IsConversionDone 0DC8  
                        ?_EUSART_Initialize 0070                                   _RCSTAbits 019D  
                                   printf@c 0041                                     printf@f 002E  
                            ??_PROTOCOL_INV 0070                              ??_PROTOCOL_EXT 0020  
                            ??_PROTOCOL_SAV 0023                              ??_PROTOCOL_SET 0020  
                            ??_PROTOCOL_STA 0020                              ??_PROTOCOL_RST 0070  
                            ??_PROTOCOL_STP 0020                         ?i1_DATAEE_WriteByte 0070  
                              __pstringtext 03CF                         ??_EUSART_Initialize 0020  
               __end_of_I2C1_StatusCallback 0557                            ??_WDT_Initialize 0020  
                         __size_of_I2C1_ISR 0027          __end_of_PROTOCOL_I2C_Send_uint16_t 0648  
                _PROTOCOL_I2C_Send_uint16_t 05D4                            __CFG_FOSC$INTOSC 0000  
                         ?_PROTOCOL_I2C_GET 0070                           ?_PROTOCOL_I2C_SEN 0070  
                         ?_PROTOCOL_I2C_WHO 0070                       __size_of_EUSART_Write 0024  
                       _ADC_StartConversion 0D88                   ??_TMR0_HasOverflowOccured 0020  
                        ??_PROTOCOL_I2C_GET 0070                          ??_PROTOCOL_I2C_SEN 0070  
                        ??_PROTOCOL_I2C_WHO 0070                        ??i1_DATAEE_WriteByte 0071  
                                _tmr_scaler 006C                    __end_of_DATAEE_WriteByte 0F88  
                 __end_of_EUSART_Initialize 0E97                                 printf@width 003F  
                      i1PROTOCOL_SET@value_ 0071                        ?_ADC_StartConversion 0070  
                  I2C1_StatusCallback@pdata 0076                 __size_of_PROTOCOL_Read_Lock 0003  
                            __end_of___wmul 0EE9                               __pidataCOMMON 0003  
                              _EUSART_Write 0F88                              _ADC_Initialize 0DC8  
                    ?_OSCILLATOR_Initialize 0070                              __end_of_printf 0246  
                            PROTOCOL_Loop@c 004D                         start_initialization 0032  
                  __size_of_TMR0_Initialize 000E             __size_of_PIN_MANAGER_Initialize 001F  
                               __end_of_abs 0E54                               ??_EUSART_Read 0020  
                               putch@txData 0022                         DATAEE_ReadByte@bAdd 0020  
                          ?_I2C1_Initialize 0070                       ??_ADC_StartConversion 0020  
                          I2C1_ISR@i2c_data 0078                                    ??___wmul 0024  
                  PROTOCOL_Send_int8_t@pbuf 00D3        __end_of_PROTOCOL_Read_Device_Address 0D85  
     __size_of_PROTOCOL_Read_Device_Address 0003                _PROTOCOL_Read_Device_Address 0D82  
                    __end_of_ADC_Initialize 0DD0                                 __pdataBANK0 006C  
                               __pdataBANK1 00DD                                    ??_printf 0032  
                   i1DATAEE_WriteByte@bData 0070                 __end_of_EUSART_Transmit_ISR 0ECD  
                               __pbssCOMMON 007A                                   ___latbits 0002  
                             __pcstackBANK0 0020            I2C1_StatusCallback@i2c_bus_state 0075  
                      _ADC_IsConversionDone 0DC1                        _PROTOCOL_Inv_Handler 0050  
                              _isdigit$1245 0020                               ??_inv_handler 004B  
                      __end_of_PROTOCOL_INV 0D93                        __end_of_PROTOCOL_EXT 0D76  
                      __end_of_PROTOCOL_SAV 0DE2                        __end_of_PROTOCOL_SET 0DC1  
                      __end_of_PROTOCOL_STA 0D9B                        __end_of_PROTOCOL_RST 0DFE  
                      __end_of_PROTOCOL_STP 0D88                  __end_of_EUSART_Receive_ISR 0EB2  
           PROTOCOL_Initialize@stop_handler 0024                  __size_of_EUSART_Initialize 001A  
                       __end_of_EUSART_Read 0F44                      __size_of_PROTOCOL_Loop 0189  
                                 __pnvBANK1 00D5       __end_of_PROTOCOL_Write_Device_Address 0E36  
    __size_of_PROTOCOL_Write_Device_Address 000F               _PROTOCOL_Write_Device_Address 0E27  
                          ___lwdiv@dividend 0022                      _PIN_MANAGER_Initialize 0F06  
                      EUSART_Read@readValue 0021                           _ADC_SelectChannel 0E54  
                                  ?___lwdiv 0020                                    ?___lwmod 0028  
                           ?_ADC_Initialize 0070                                _eusartRxHead 0062  
                        ?_ADC_SelectChannel 0070                                _eusartTxHead 007C  
                              _eusartRxTail 0061                                _eusartTxTail 007B  
                                  _I2C1_ISR 0FAC               ?_PROTOCOL_Read_Device_Address 0070  
              ??_INTERRUPT_InterruptManager 0079                   PROTOCOL_Send_int16_t@pbuf 00CF  
                                 __pswtext1 0800                                  loop_func@v 0027  
                   _eusartTxBufferRemaining 007A                                    ?_isdigit 0070  
                       ??_ADC_SelectChannel 0020                       ?_ADC_IsConversionDone 0070  
                          ___lwdiv@quotient 0025                    __size_of_DATAEE_ReadByte 000D  
                                  ?_strncmp 0020                              __size_of_putch 0006  
                            _eusartRxBuffer 00A0                           ??_TMR0_Initialize 0020  
                            _eusartTxBuffer 00A8                              ___wmul@product 0024  
                                  _LATCbits 010E                        _PROTOCOL_Set_Handler 00D7  
                                 clear_ram0 0DAD                         __end_of_inv_handler 0E19  
                                  _PIE1bits 0091                    ??_PROTOCOL_Send_uint16_t 004A  
                                 _loop_func 0557                   __end_of_ADC_SelectChannel 0E64  
                     PROTOCOL_I2C_SEN@pdata 0071                    PROTOCOL_I2C_Set_TLV@type 0023  
       __size_of_INTERRUPT_InterruptManager 002C                                    _PIR1bits 0011  
                                  _SSP1CON1 0215                                    _SSP1CON2 0216  
                                  _SSP1CON3 0217                PROTOCOL_Initialize@device_id 0021  
                                  _SSP1STAT 0214                              _readbuf_status 00BB  
                     _PROTOCOL_Stop_Handler 00D9            PROTOCOL_I2C_Send_uint16_t@length 0047  
               __end_of_PROTOCOL_Initialize 0701                                loop_func@out 0025  
                                 _threshold 006D                                  _ADCON0bits 009D  
                   __size_ofi1_PROTOCOL_EXT 0001                     __size_ofi1_PROTOCOL_SAV 0009  
                   __size_ofi1_PROTOCOL_SET 0007                     __size_ofi1_PROTOCOL_STA 0004  
                   __size_ofi1_PROTOCOL_STP 0003                           ___wmul@multiplier 0020  
              __end_of_PROTOCOL_I2C_Set_TLV 0E7D                               _PROTOCOL_Loop 0246  
                  ADC_SelectChannel@channel 0021                                  printf@flag 003E  
                                printf@prec 0036                 ?_PROTOCOL_I2C_Send_uint16_t 0042  
                     DATAEE_WriteByte@bData 0020                     I2C1_StatusCallback@next 0065  
                               _EUSART_Read 0F25                 PROTOCOL_I2C_Set_TLV@pbuffer 0021  
                         ?_DATAEE_WriteByte 0020    __end_of_PROTOCOL_Backplane_Slave_Enabled 0D8F  
 __size_of_PROTOCOL_Backplane_Slave_Enabled 0004          ??_PROTOCOL_Backplane_Slave_Enabled 0070  
         ?_PROTOCOL_Backplane_Slave_Enabled 0070            _PROTOCOL_Backplane_Slave_Enabled 0D8B  
                        ??_DATAEE_WriteByte 0021                               _slave_address 005D  
                                _EECON1bits 0195                          PROTOCOL_SET@value_ 0021  
                                ?_loop_func 0070                   __size_of_PROTOCOL_I2C_GET 0003  
                 __size_of_PROTOCOL_I2C_SEN 003C                   __size_of_PROTOCOL_I2C_WHO 0003  
                  ?_ADC_GetConversionResult 0020                     ??_OSCILLATOR_Initialize 0020  
                PROTOCOL_Set_Func@loop_func 0020              ?_PROTOCOL_Write_Device_Address 0070  
                          __size_of___lwdiv 0035                            __size_of___lwmod 002D  
                            ?_PROTOCOL_Loop 0070                      ??_ADC_IsConversionDone 0020  
                     __size_of_PROTOCOL_INV 0004                       __size_of_PROTOCOL_EXT 0001  
                     __size_of_PROTOCOL_SAV 0009                       __size_of_PROTOCOL_SET 0007  
                     __size_of_PROTOCOL_STA 0004                       __size_of_PROTOCOL_RST 000A  
                     __size_of_PROTOCOL_STP 0003              ??_PROTOCOL_Read_Device_Address 0020  
                          __size_of_isdigit 000F                             ___lwdiv@divisor 0020  
              __size_of_I2C1_StatusCallback 00C4                             ___lwdiv@counter 0027  
                                  __ptext10 0DC1                                    __ptext11 0DE2  
                                  __ptext20 0E64                                    __ptext12 0E0B  
                                  __ptext21 0648                                    __ptext13 07EA  
                                  __ptext30 0F65                                    __ptext22 0E36  
                                  __ptext14 05D4                                    __ptext31 0D75  
                                  __ptext23 0ECD                                    __ptext15 0071  
                                  __ptext40 0DC8                                    __ptext32 0F25  
                                  __ptext24 0D9B                                    __ptext16 0DA7  
                                  __ptext33 06B9                                    __ptext25 0E27  
                                  __ptext17 0F88                                    __ptext50 0D7C  
                                  __ptext42 0FAC                                    __ptext34 0DFE  
                                  __ptext26 0D85                                    __ptext18 0FD3  
                                  __ptext51 0DF4                                    __ptext43 0493  
                                  __ptext35 0F06                                    __ptext27 0D97  
                                  __ptext19 07B5                                    __ptext52 0D8F  
                                  __ptext44 0D7F                                    __ptext36 07FB  
                                  __ptext28 0DBA                                    __ptext53 0D79  
                                  __ptext45 0D93                                    __ptext37 0F44  
                                  __ptext29 0DD9                                    __ptext54 0743  
                                  __ptext46 0DB3                                    __ptext38 0D82  
                                  __ptext55 0D76                                    __ptext47 0DD0  
                                  __ptext39 0E7D                                    __ptext56 0D8B  
                                  __ptext48 0EE9                                    __ptext57 0EB2  
                                  __ptext49 0D74                                    __ptext58 0E97  
                              _SSP1CON1bits 0215                                _SSP1CON2bits 0216  
                                  _float100 00B0                 __size_ofi1_DATAEE_WriteByte 001D  
                               _inv_handler 0E0B                 DATAEE_WriteByte@GIEBitValue 0022  
                          __size_of_strncmp 0042                               __size_of_atoi 0071  
                             __size_of_main 0036                                  strncmp@len 0023  
                         ??_DATAEE_ReadByte 0020             __size_of_PROTOCOL_Send_uint16_t 0011  
                __size_of_ADC_SelectChannel 0010                     _BACKPLANE_SLAVE_ADDRESS 006E  
                __end_of_PROTOCOL_Read_Lock 0D7F                                    int$flags 007E  
                                  atoi@sign 002A                                _PROTOCOL_INV 0D8F  
                              _PROTOCOL_EXT 0D75                                _PROTOCOL_SAV 0DD9  
                              _PROTOCOL_SET 0DBA                                _PROTOCOL_STA 0D97  
                              _PROTOCOL_RST 0DF4                                _PROTOCOL_STP 0D85  
        __end_of_INTERRUPT_InterruptManager 0030                  _INTERRUPT_InterruptManager 0004  
                                 printf@len 003C                                   printf@val 003A  
                              _SSP1STATbits 0214                    ?_TMR0_HasOverflowOccured 0070  
                        _I2C_slaveWriteData 007D                                  _INTCONbits 000B  
                                  isdigit@c 0021                     __size_of_WDT_Initialize 0004  
                                  intlevel1 0000                 __end_of_ADC_StartConversion 0D8B  
                          ___lwmod@dividend 002A                     ?_PIN_MANAGER_Initialize 0070  
           __end_of_ADC_GetConversionResult 0DEB                           __CFG_CLKOUTEN$OFF 0000  
                               ??_loop_func 0024                        _PROTOCOL_I2C_Set_TLV 0E64  
                                 strncmp@s1 0020                                   strncmp@s2 0022  
                          ??_ADC_Initialize 0020                     _backplane_slave_enabled 0054  
                                  printf@ap 0039                                    printf@cp 0037  
                        _EUSART_Receive_ISR 0E97                             ??_PROTOCOL_Loop 004B  
                  __size_of_I2C1_Initialize 0021                              i1_PROTOCOL_EXT 0D74  
                            i1_PROTOCOL_SAV 0DD0                              i1_PROTOCOL_SET 0DB3  
                            i1_PROTOCOL_STA 0D93                              i1_PROTOCOL_STP 0D7F  
                                _OPTION_REG 0095                         ?_EUSART_Receive_ISR 0070  
                    _PROTOCOL_Send_uint16_t 07EA                             ___lwmod@divisor 0028  
                           _TMR0_Initialize 0E19                             ___lwmod@counter 002D  
               PROTOCOL_Loop@device_address 004E                        PROTOCOL_EXT@char_buf 0020  
                        EUSART_Write@txData 0021                __size_of_EUSART_Transmit_ISR 001B  
            __end_of_PIN_MANAGER_Initialize 0F25                        ??_EUSART_Receive_ISR 0070  
                     ?_PROTOCOL_I2C_Set_TLV 0020                            _PROTOCOL_I2C_GET 0D76  
                          _PROTOCOL_I2C_SEN 0743                            _PROTOCOL_I2C_WHO 0D79  
