

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Mon Oct 09 05:33:32 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F1825
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	stringtext,global,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    19                           	psect	text1,local,class=CODE,merge=1,delta=2
    20                           	psect	text2,local,class=CODE,merge=1,delta=2
    21                           	psect	text3,local,class=CODE,merge=1,delta=2
    22                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text6,local,class=CODE,merge=1,delta=2,group=3
    25                           	psect	text7,local,class=CODE,merge=1,delta=2
    26                           	psect	text8,local,class=CODE,merge=1,delta=2
    27                           	psect	text9,local,class=CODE,merge=1,delta=2,group=3
    28                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    29                           	psect	text11,local,class=CODE,merge=1,delta=2
    30                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    31                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text14,local,class=CODE,merge=1,delta=2,group=3
    33                           	psect	text15,local,class=CODE,merge=1,delta=2,group=3
    34                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text17,local,class=CODE,merge=1,delta=2
    36                           	psect	text18,local,class=CODE,merge=1,delta=2
    37                           	psect	text19,local,class=CODE,merge=1,delta=2
    38                           	psect	text20,local,class=CODE,merge=1,delta=2
    39                           	psect	text21,local,class=CODE,merge=1,delta=2,group=3
    40                           	psect	text22,local,class=CODE,merge=1,delta=2,group=3
    41                           	psect	text23,local,class=CODE,merge=1,delta=2,group=3
    42                           	psect	text24,local,class=CODE,merge=1,delta=2
    43                           	psect	text25,local,class=CODE,merge=1,delta=2,group=1
    44                           	psect	text26,local,class=CODE,merge=1,delta=2,group=1
    45                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    46                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    47                           	psect	text29,local,class=CODE,merge=1,delta=2,group=1
    48                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
    49                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    50                           	psect	text32,local,class=CODE,merge=1,delta=2,group=1
    51                           	psect	text33,local,class=CODE,merge=1,delta=2,group=1
    52                           	psect	text34,local,class=CODE,merge=1,delta=2
    53                           	psect	text35,local,class=CODE,merge=1,delta=2,group=1
    54                           	psect	text36,local,class=CODE,merge=1,delta=2
    55                           	psect	text37,local,class=CODE,merge=1,delta=2
    56                           	psect	text38,local,class=CODE,merge=1,delta=2,group=1
    57                           	psect	text39,local,class=CODE,merge=1,delta=2,group=1
    58                           	psect	text40,local,class=CODE,merge=1,delta=2,group=1
    59                           	psect	text41,local,class=CODE,merge=1,delta=2
    60                           	psect	intentry,global,class=CODE,delta=2
    61                           	psect	text43,local,class=CODE,merge=1,delta=2,group=1
    62                           	psect	text44,local,class=CODE,merge=1,delta=2,group=1
    63                           	psect	swtext1,local,class=CONST,delta=2
    64                           	psect	text45,local,class=CODE,merge=1,delta=2
    65                           	psect	text46,local,class=CODE,merge=1,delta=2
    66                           	psect	text47,local,class=CODE,merge=1,delta=2
    67                           	psect	text48,local,class=CODE,merge=1,delta=2
    68                           	psect	text49,local,class=CODE,merge=1,delta=2
    69                           	psect	text50,local,class=CODE,merge=1,delta=2
    70                           	psect	text51,local,class=CODE,merge=1,delta=2
    71                           	psect	text52,local,class=CODE,merge=1,delta=2,group=1
    72                           	psect	text53,local,class=CODE,merge=1,delta=2,group=1
    73                           	psect	text54,local,class=CODE,merge=1,delta=2,group=1
    74                           	psect	text55,local,class=CODE,merge=1,delta=2,group=1
    75                           	psect	text56,local,class=CODE,merge=1,delta=2,group=1
    76                           	psect	text57,local,class=CODE,merge=1,delta=2,group=1
    77                           	psect	text58,local,class=CODE,merge=1,delta=2,group=1
    78                           	psect	text59,local,class=CODE,merge=1,delta=2,group=1
    79                           	psect	text60,local,class=CODE,merge=1,delta=2,group=1
    80                           	dabs	1,0x7E,2
    81  0000                     
    82                           ; Version 1.41 (B)
    83                           ; Generated 21/02/2017 GMT
    84                           ; 
    85                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    86                           ; All rights reserved.
    87                           ; 
    88                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    89                           ; 
    90                           ; Redistribution and use in source and binary forms, with or without modification, are
    91                           ; permitted provided that the following conditions are met:
    92                           ; 
    93                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    94                           ;        conditions and the following disclaimer.
    95                           ; 
    96                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    97                           ;        of conditions and the following disclaimer in the documentation and/or other
    98                           ;        materials provided with the distribution.
    99                           ; 
   100                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   101                           ;        software without specific prior written permission.
   102                           ; 
   103                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   104                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   105                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   106                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   107                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   108                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   109                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   110                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   111                           ; 
   112                           ; 
   113                           ; Code-generator required, PIC16F1825 Definitions
   114                           ; 
   115                           ; SFR Addresses
   116  0000                     	;# 
   117  0001                     	;# 
   118  0002                     	;# 
   119  0003                     	;# 
   120  0004                     	;# 
   121  0005                     	;# 
   122  0006                     	;# 
   123  0007                     	;# 
   124  0008                     	;# 
   125  0009                     	;# 
   126  000A                     	;# 
   127  000B                     	;# 
   128  000C                     	;# 
   129  000E                     	;# 
   130  0011                     	;# 
   131  0012                     	;# 
   132  0013                     	;# 
   133  0015                     	;# 
   134  0016                     	;# 
   135  0016                     	;# 
   136  0017                     	;# 
   137  0018                     	;# 
   138  0019                     	;# 
   139  001A                     	;# 
   140  001B                     	;# 
   141  001C                     	;# 
   142  001E                     	;# 
   143  001F                     	;# 
   144  008C                     	;# 
   145  008E                     	;# 
   146  0091                     	;# 
   147  0092                     	;# 
   148  0093                     	;# 
   149  0095                     	;# 
   150  0096                     	;# 
   151  0097                     	;# 
   152  0098                     	;# 
   153  0099                     	;# 
   154  009A                     	;# 
   155  009B                     	;# 
   156  009B                     	;# 
   157  009C                     	;# 
   158  009D                     	;# 
   159  009E                     	;# 
   160  010C                     	;# 
   161  010E                     	;# 
   162  0111                     	;# 
   163  0112                     	;# 
   164  0113                     	;# 
   165  0114                     	;# 
   166  0115                     	;# 
   167  0116                     	;# 
   168  0117                     	;# 
   169  0118                     	;# 
   170  0119                     	;# 
   171  011A                     	;# 
   172  011B                     	;# 
   173  011D                     	;# 
   174  011E                     	;# 
   175  018C                     	;# 
   176  018E                     	;# 
   177  0191                     	;# 
   178  0191                     	;# 
   179  0192                     	;# 
   180  0193                     	;# 
   181  0193                     	;# 
   182  0193                     	;# 
   183  0194                     	;# 
   184  0195                     	;# 
   185  0196                     	;# 
   186  0199                     	;# 
   187  019A                     	;# 
   188  019B                     	;# 
   189  019B                     	;# 
   190  019C                     	;# 
   191  019D                     	;# 
   192  019E                     	;# 
   193  019F                     	;# 
   194  020C                     	;# 
   195  020E                     	;# 
   196  0211                     	;# 
   197  0211                     	;# 
   198  0212                     	;# 
   199  0212                     	;# 
   200  0213                     	;# 
   201  0213                     	;# 
   202  0214                     	;# 
   203  0214                     	;# 
   204  0215                     	;# 
   205  0215                     	;# 
   206  0215                     	;# 
   207  0216                     	;# 
   208  0216                     	;# 
   209  0217                     	;# 
   210  0217                     	;# 
   211  0291                     	;# 
   212  0291                     	;# 
   213  0292                     	;# 
   214  0293                     	;# 
   215  0294                     	;# 
   216  0295                     	;# 
   217  0295                     	;# 
   218  0296                     	;# 
   219  0298                     	;# 
   220  0298                     	;# 
   221  0299                     	;# 
   222  029A                     	;# 
   223  029B                     	;# 
   224  029C                     	;# 
   225  029D                     	;# 
   226  029E                     	;# 
   227  0311                     	;# 
   228  0311                     	;# 
   229  0312                     	;# 
   230  0313                     	;# 
   231  0318                     	;# 
   232  0318                     	;# 
   233  0319                     	;# 
   234  031A                     	;# 
   235  038C                     	;# 
   236  038E                     	;# 
   237  0391                     	;# 
   238  0392                     	;# 
   239  0393                     	;# 
   240  039A                     	;# 
   241  039C                     	;# 
   242  039D                     	;# 
   243  039E                     	;# 
   244  039F                     	;# 
   245  0415                     	;# 
   246  0416                     	;# 
   247  0417                     	;# 
   248  041C                     	;# 
   249  041D                     	;# 
   250  041E                     	;# 
   251  0FE4                     	;# 
   252  0FE5                     	;# 
   253  0FE6                     	;# 
   254  0FE7                     	;# 
   255  0FE8                     	;# 
   256  0FE9                     	;# 
   257  0FEA                     	;# 
   258  0FEB                     	;# 
   259  0FED                     	;# 
   260  0FEE                     	;# 
   261  0FEF                     	;# 
   262  0000                     	;# 
   263  0001                     	;# 
   264  0002                     	;# 
   265  0003                     	;# 
   266  0004                     	;# 
   267  0005                     	;# 
   268  0006                     	;# 
   269  0007                     	;# 
   270  0008                     	;# 
   271  0009                     	;# 
   272  000A                     	;# 
   273  000B                     	;# 
   274  000C                     	;# 
   275  000E                     	;# 
   276  0011                     	;# 
   277  0012                     	;# 
   278  0013                     	;# 
   279  0015                     	;# 
   280  0016                     	;# 
   281  0016                     	;# 
   282  0017                     	;# 
   283  0018                     	;# 
   284  0019                     	;# 
   285  001A                     	;# 
   286  001B                     	;# 
   287  001C                     	;# 
   288  001E                     	;# 
   289  001F                     	;# 
   290  008C                     	;# 
   291  008E                     	;# 
   292  0091                     	;# 
   293  0092                     	;# 
   294  0093                     	;# 
   295  0095                     	;# 
   296  0096                     	;# 
   297  0097                     	;# 
   298  0098                     	;# 
   299  0099                     	;# 
   300  009A                     	;# 
   301  009B                     	;# 
   302  009B                     	;# 
   303  009C                     	;# 
   304  009D                     	;# 
   305  009E                     	;# 
   306  010C                     	;# 
   307  010E                     	;# 
   308  0111                     	;# 
   309  0112                     	;# 
   310  0113                     	;# 
   311  0114                     	;# 
   312  0115                     	;# 
   313  0116                     	;# 
   314  0117                     	;# 
   315  0118                     	;# 
   316  0119                     	;# 
   317  011A                     	;# 
   318  011B                     	;# 
   319  011D                     	;# 
   320  011E                     	;# 
   321  018C                     	;# 
   322  018E                     	;# 
   323  0191                     	;# 
   324  0191                     	;# 
   325  0192                     	;# 
   326  0193                     	;# 
   327  0193                     	;# 
   328  0193                     	;# 
   329  0194                     	;# 
   330  0195                     	;# 
   331  0196                     	;# 
   332  0199                     	;# 
   333  019A                     	;# 
   334  019B                     	;# 
   335  019B                     	;# 
   336  019C                     	;# 
   337  019D                     	;# 
   338  019E                     	;# 
   339  019F                     	;# 
   340  020C                     	;# 
   341  020E                     	;# 
   342  0211                     	;# 
   343  0211                     	;# 
   344  0212                     	;# 
   345  0212                     	;# 
   346  0213                     	;# 
   347  0213                     	;# 
   348  0214                     	;# 
   349  0214                     	;# 
   350  0215                     	;# 
   351  0215                     	;# 
   352  0215                     	;# 
   353  0216                     	;# 
   354  0216                     	;# 
   355  0217                     	;# 
   356  0217                     	;# 
   357  0291                     	;# 
   358  0291                     	;# 
   359  0292                     	;# 
   360  0293                     	;# 
   361  0294                     	;# 
   362  0295                     	;# 
   363  0295                     	;# 
   364  0296                     	;# 
   365  0298                     	;# 
   366  0298                     	;# 
   367  0299                     	;# 
   368  029A                     	;# 
   369  029B                     	;# 
   370  029C                     	;# 
   371  029D                     	;# 
   372  029E                     	;# 
   373  0311                     	;# 
   374  0311                     	;# 
   375  0312                     	;# 
   376  0313                     	;# 
   377  0318                     	;# 
   378  0318                     	;# 
   379  0319                     	;# 
   380  031A                     	;# 
   381  038C                     	;# 
   382  038E                     	;# 
   383  0391                     	;# 
   384  0392                     	;# 
   385  0393                     	;# 
   386  039A                     	;# 
   387  039C                     	;# 
   388  039D                     	;# 
   389  039E                     	;# 
   390  039F                     	;# 
   391  0415                     	;# 
   392  0416                     	;# 
   393  0417                     	;# 
   394  041C                     	;# 
   395  041D                     	;# 
   396  041E                     	;# 
   397  0FE4                     	;# 
   398  0FE5                     	;# 
   399  0FE6                     	;# 
   400  0FE7                     	;# 
   401  0FE8                     	;# 
   402  0FE9                     	;# 
   403  0FEA                     	;# 
   404  0FEB                     	;# 
   405  0FED                     	;# 
   406  0FEE                     	;# 
   407  0FEF                     	;# 
   408  0000                     	;# 
   409  0001                     	;# 
   410  0002                     	;# 
   411  0003                     	;# 
   412  0004                     	;# 
   413  0005                     	;# 
   414  0006                     	;# 
   415  0007                     	;# 
   416  0008                     	;# 
   417  0009                     	;# 
   418  000A                     	;# 
   419  000B                     	;# 
   420  000C                     	;# 
   421  000E                     	;# 
   422  0011                     	;# 
   423  0012                     	;# 
   424  0013                     	;# 
   425  0015                     	;# 
   426  0016                     	;# 
   427  0016                     	;# 
   428  0017                     	;# 
   429  0018                     	;# 
   430  0019                     	;# 
   431  001A                     	;# 
   432  001B                     	;# 
   433  001C                     	;# 
   434  001E                     	;# 
   435  001F                     	;# 
   436  008C                     	;# 
   437  008E                     	;# 
   438  0091                     	;# 
   439  0092                     	;# 
   440  0093                     	;# 
   441  0095                     	;# 
   442  0096                     	;# 
   443  0097                     	;# 
   444  0098                     	;# 
   445  0099                     	;# 
   446  009A                     	;# 
   447  009B                     	;# 
   448  009B                     	;# 
   449  009C                     	;# 
   450  009D                     	;# 
   451  009E                     	;# 
   452  010C                     	;# 
   453  010E                     	;# 
   454  0111                     	;# 
   455  0112                     	;# 
   456  0113                     	;# 
   457  0114                     	;# 
   458  0115                     	;# 
   459  0116                     	;# 
   460  0117                     	;# 
   461  0118                     	;# 
   462  0119                     	;# 
   463  011A                     	;# 
   464  011B                     	;# 
   465  011D                     	;# 
   466  011E                     	;# 
   467  018C                     	;# 
   468  018E                     	;# 
   469  0191                     	;# 
   470  0191                     	;# 
   471  0192                     	;# 
   472  0193                     	;# 
   473  0193                     	;# 
   474  0193                     	;# 
   475  0194                     	;# 
   476  0195                     	;# 
   477  0196                     	;# 
   478  0199                     	;# 
   479  019A                     	;# 
   480  019B                     	;# 
   481  019B                     	;# 
   482  019C                     	;# 
   483  019D                     	;# 
   484  019E                     	;# 
   485  019F                     	;# 
   486  020C                     	;# 
   487  020E                     	;# 
   488  0211                     	;# 
   489  0211                     	;# 
   490  0212                     	;# 
   491  0212                     	;# 
   492  0213                     	;# 
   493  0213                     	;# 
   494  0214                     	;# 
   495  0214                     	;# 
   496  0215                     	;# 
   497  0215                     	;# 
   498  0215                     	;# 
   499  0216                     	;# 
   500  0216                     	;# 
   501  0217                     	;# 
   502  0217                     	;# 
   503  0291                     	;# 
   504  0291                     	;# 
   505  0292                     	;# 
   506  0293                     	;# 
   507  0294                     	;# 
   508  0295                     	;# 
   509  0295                     	;# 
   510  0296                     	;# 
   511  0298                     	;# 
   512  0298                     	;# 
   513  0299                     	;# 
   514  029A                     	;# 
   515  029B                     	;# 
   516  029C                     	;# 
   517  029D                     	;# 
   518  029E                     	;# 
   519  0311                     	;# 
   520  0311                     	;# 
   521  0312                     	;# 
   522  0313                     	;# 
   523  0318                     	;# 
   524  0318                     	;# 
   525  0319                     	;# 
   526  031A                     	;# 
   527  038C                     	;# 
   528  038E                     	;# 
   529  0391                     	;# 
   530  0392                     	;# 
   531  0393                     	;# 
   532  039A                     	;# 
   533  039C                     	;# 
   534  039D                     	;# 
   535  039E                     	;# 
   536  039F                     	;# 
   537  0415                     	;# 
   538  0416                     	;# 
   539  0417                     	;# 
   540  041C                     	;# 
   541  041D                     	;# 
   542  041E                     	;# 
   543  0FE4                     	;# 
   544  0FE5                     	;# 
   545  0FE6                     	;# 
   546  0FE7                     	;# 
   547  0FE8                     	;# 
   548  0FE9                     	;# 
   549  0FEA                     	;# 
   550  0FEB                     	;# 
   551  0FED                     	;# 
   552  0FEE                     	;# 
   553  0FEF                     	;# 
   554  0000                     	;# 
   555  0001                     	;# 
   556  0002                     	;# 
   557  0003                     	;# 
   558  0004                     	;# 
   559  0005                     	;# 
   560  0006                     	;# 
   561  0007                     	;# 
   562  0008                     	;# 
   563  0009                     	;# 
   564  000A                     	;# 
   565  000B                     	;# 
   566  000C                     	;# 
   567  000E                     	;# 
   568  0011                     	;# 
   569  0012                     	;# 
   570  0013                     	;# 
   571  0015                     	;# 
   572  0016                     	;# 
   573  0016                     	;# 
   574  0017                     	;# 
   575  0018                     	;# 
   576  0019                     	;# 
   577  001A                     	;# 
   578  001B                     	;# 
   579  001C                     	;# 
   580  001E                     	;# 
   581  001F                     	;# 
   582  008C                     	;# 
   583  008E                     	;# 
   584  0091                     	;# 
   585  0092                     	;# 
   586  0093                     	;# 
   587  0095                     	;# 
   588  0096                     	;# 
   589  0097                     	;# 
   590  0098                     	;# 
   591  0099                     	;# 
   592  009A                     	;# 
   593  009B                     	;# 
   594  009B                     	;# 
   595  009C                     	;# 
   596  009D                     	;# 
   597  009E                     	;# 
   598  010C                     	;# 
   599  010E                     	;# 
   600  0111                     	;# 
   601  0112                     	;# 
   602  0113                     	;# 
   603  0114                     	;# 
   604  0115                     	;# 
   605  0116                     	;# 
   606  0117                     	;# 
   607  0118                     	;# 
   608  0119                     	;# 
   609  011A                     	;# 
   610  011B                     	;# 
   611  011D                     	;# 
   612  011E                     	;# 
   613  018C                     	;# 
   614  018E                     	;# 
   615  0191                     	;# 
   616  0191                     	;# 
   617  0192                     	;# 
   618  0193                     	;# 
   619  0193                     	;# 
   620  0193                     	;# 
   621  0194                     	;# 
   622  0195                     	;# 
   623  0196                     	;# 
   624  0199                     	;# 
   625  019A                     	;# 
   626  019B                     	;# 
   627  019B                     	;# 
   628  019C                     	;# 
   629  019D                     	;# 
   630  019E                     	;# 
   631  019F                     	;# 
   632  020C                     	;# 
   633  020E                     	;# 
   634  0211                     	;# 
   635  0211                     	;# 
   636  0212                     	;# 
   637  0212                     	;# 
   638  0213                     	;# 
   639  0213                     	;# 
   640  0214                     	;# 
   641  0214                     	;# 
   642  0215                     	;# 
   643  0215                     	;# 
   644  0215                     	;# 
   645  0216                     	;# 
   646  0216                     	;# 
   647  0217                     	;# 
   648  0217                     	;# 
   649  0291                     	;# 
   650  0291                     	;# 
   651  0292                     	;# 
   652  0293                     	;# 
   653  0294                     	;# 
   654  0295                     	;# 
   655  0295                     	;# 
   656  0296                     	;# 
   657  0298                     	;# 
   658  0298                     	;# 
   659  0299                     	;# 
   660  029A                     	;# 
   661  029B                     	;# 
   662  029C                     	;# 
   663  029D                     	;# 
   664  029E                     	;# 
   665  0311                     	;# 
   666  0311                     	;# 
   667  0312                     	;# 
   668  0313                     	;# 
   669  0318                     	;# 
   670  0318                     	;# 
   671  0319                     	;# 
   672  031A                     	;# 
   673  038C                     	;# 
   674  038E                     	;# 
   675  0391                     	;# 
   676  0392                     	;# 
   677  0393                     	;# 
   678  039A                     	;# 
   679  039C                     	;# 
   680  039D                     	;# 
   681  039E                     	;# 
   682  039F                     	;# 
   683  0415                     	;# 
   684  0416                     	;# 
   685  0417                     	;# 
   686  041C                     	;# 
   687  041D                     	;# 
   688  041E                     	;# 
   689  0FE4                     	;# 
   690  0FE5                     	;# 
   691  0FE6                     	;# 
   692  0FE7                     	;# 
   693  0FE8                     	;# 
   694  0FE9                     	;# 
   695  0FEA                     	;# 
   696  0FEB                     	;# 
   697  0FED                     	;# 
   698  0FEE                     	;# 
   699  0FEF                     	;# 
   700  0000                     	;# 
   701  0001                     	;# 
   702  0002                     	;# 
   703  0003                     	;# 
   704  0004                     	;# 
   705  0005                     	;# 
   706  0006                     	;# 
   707  0007                     	;# 
   708  0008                     	;# 
   709  0009                     	;# 
   710  000A                     	;# 
   711  000B                     	;# 
   712  000C                     	;# 
   713  000E                     	;# 
   714  0011                     	;# 
   715  0012                     	;# 
   716  0013                     	;# 
   717  0015                     	;# 
   718  0016                     	;# 
   719  0016                     	;# 
   720  0017                     	;# 
   721  0018                     	;# 
   722  0019                     	;# 
   723  001A                     	;# 
   724  001B                     	;# 
   725  001C                     	;# 
   726  001E                     	;# 
   727  001F                     	;# 
   728  008C                     	;# 
   729  008E                     	;# 
   730  0091                     	;# 
   731  0092                     	;# 
   732  0093                     	;# 
   733  0095                     	;# 
   734  0096                     	;# 
   735  0097                     	;# 
   736  0098                     	;# 
   737  0099                     	;# 
   738  009A                     	;# 
   739  009B                     	;# 
   740  009B                     	;# 
   741  009C                     	;# 
   742  009D                     	;# 
   743  009E                     	;# 
   744  010C                     	;# 
   745  010E                     	;# 
   746  0111                     	;# 
   747  0112                     	;# 
   748  0113                     	;# 
   749  0114                     	;# 
   750  0115                     	;# 
   751  0116                     	;# 
   752  0117                     	;# 
   753  0118                     	;# 
   754  0119                     	;# 
   755  011A                     	;# 
   756  011B                     	;# 
   757  011D                     	;# 
   758  011E                     	;# 
   759  018C                     	;# 
   760  018E                     	;# 
   761  0191                     	;# 
   762  0191                     	;# 
   763  0192                     	;# 
   764  0193                     	;# 
   765  0193                     	;# 
   766  0193                     	;# 
   767  0194                     	;# 
   768  0195                     	;# 
   769  0196                     	;# 
   770  0199                     	;# 
   771  019A                     	;# 
   772  019B                     	;# 
   773  019B                     	;# 
   774  019C                     	;# 
   775  019D                     	;# 
   776  019E                     	;# 
   777  019F                     	;# 
   778  020C                     	;# 
   779  020E                     	;# 
   780  0211                     	;# 
   781  0211                     	;# 
   782  0212                     	;# 
   783  0212                     	;# 
   784  0213                     	;# 
   785  0213                     	;# 
   786  0214                     	;# 
   787  0214                     	;# 
   788  0215                     	;# 
   789  0215                     	;# 
   790  0215                     	;# 
   791  0216                     	;# 
   792  0216                     	;# 
   793  0217                     	;# 
   794  0217                     	;# 
   795  0291                     	;# 
   796  0291                     	;# 
   797  0292                     	;# 
   798  0293                     	;# 
   799  0294                     	;# 
   800  0295                     	;# 
   801  0295                     	;# 
   802  0296                     	;# 
   803  0298                     	;# 
   804  0298                     	;# 
   805  0299                     	;# 
   806  029A                     	;# 
   807  029B                     	;# 
   808  029C                     	;# 
   809  029D                     	;# 
   810  029E                     	;# 
   811  0311                     	;# 
   812  0311                     	;# 
   813  0312                     	;# 
   814  0313                     	;# 
   815  0318                     	;# 
   816  0318                     	;# 
   817  0319                     	;# 
   818  031A                     	;# 
   819  038C                     	;# 
   820  038E                     	;# 
   821  0391                     	;# 
   822  0392                     	;# 
   823  0393                     	;# 
   824  039A                     	;# 
   825  039C                     	;# 
   826  039D                     	;# 
   827  039E                     	;# 
   828  039F                     	;# 
   829  0415                     	;# 
   830  0416                     	;# 
   831  0417                     	;# 
   832  041C                     	;# 
   833  041D                     	;# 
   834  041E                     	;# 
   835  0FE4                     	;# 
   836  0FE5                     	;# 
   837  0FE6                     	;# 
   838  0FE7                     	;# 
   839  0FE8                     	;# 
   840  0FE9                     	;# 
   841  0FEA                     	;# 
   842  0FEB                     	;# 
   843  0FED                     	;# 
   844  0FEE                     	;# 
   845  0FEF                     	;# 
   846  0000                     	;# 
   847  0001                     	;# 
   848  0002                     	;# 
   849  0003                     	;# 
   850  0004                     	;# 
   851  0005                     	;# 
   852  0006                     	;# 
   853  0007                     	;# 
   854  0008                     	;# 
   855  0009                     	;# 
   856  000A                     	;# 
   857  000B                     	;# 
   858  000C                     	;# 
   859  000E                     	;# 
   860  0011                     	;# 
   861  0012                     	;# 
   862  0013                     	;# 
   863  0015                     	;# 
   864  0016                     	;# 
   865  0016                     	;# 
   866  0017                     	;# 
   867  0018                     	;# 
   868  0019                     	;# 
   869  001A                     	;# 
   870  001B                     	;# 
   871  001C                     	;# 
   872  001E                     	;# 
   873  001F                     	;# 
   874  008C                     	;# 
   875  008E                     	;# 
   876  0091                     	;# 
   877  0092                     	;# 
   878  0093                     	;# 
   879  0095                     	;# 
   880  0096                     	;# 
   881  0097                     	;# 
   882  0098                     	;# 
   883  0099                     	;# 
   884  009A                     	;# 
   885  009B                     	;# 
   886  009B                     	;# 
   887  009C                     	;# 
   888  009D                     	;# 
   889  009E                     	;# 
   890  010C                     	;# 
   891  010E                     	;# 
   892  0111                     	;# 
   893  0112                     	;# 
   894  0113                     	;# 
   895  0114                     	;# 
   896  0115                     	;# 
   897  0116                     	;# 
   898  0117                     	;# 
   899  0118                     	;# 
   900  0119                     	;# 
   901  011A                     	;# 
   902  011B                     	;# 
   903  011D                     	;# 
   904  011E                     	;# 
   905  018C                     	;# 
   906  018E                     	;# 
   907  0191                     	;# 
   908  0191                     	;# 
   909  0192                     	;# 
   910  0193                     	;# 
   911  0193                     	;# 
   912  0193                     	;# 
   913  0194                     	;# 
   914  0195                     	;# 
   915  0196                     	;# 
   916  0199                     	;# 
   917  019A                     	;# 
   918  019B                     	;# 
   919  019B                     	;# 
   920  019C                     	;# 
   921  019D                     	;# 
   922  019E                     	;# 
   923  019F                     	;# 
   924  020C                     	;# 
   925  020E                     	;# 
   926  0211                     	;# 
   927  0211                     	;# 
   928  0212                     	;# 
   929  0212                     	;# 
   930  0213                     	;# 
   931  0213                     	;# 
   932  0214                     	;# 
   933  0214                     	;# 
   934  0215                     	;# 
   935  0215                     	;# 
   936  0215                     	;# 
   937  0216                     	;# 
   938  0216                     	;# 
   939  0217                     	;# 
   940  0217                     	;# 
   941  0291                     	;# 
   942  0291                     	;# 
   943  0292                     	;# 
   944  0293                     	;# 
   945  0294                     	;# 
   946  0295                     	;# 
   947  0295                     	;# 
   948  0296                     	;# 
   949  0298                     	;# 
   950  0298                     	;# 
   951  0299                     	;# 
   952  029A                     	;# 
   953  029B                     	;# 
   954  029C                     	;# 
   955  029D                     	;# 
   956  029E                     	;# 
   957  0311                     	;# 
   958  0311                     	;# 
   959  0312                     	;# 
   960  0313                     	;# 
   961  0318                     	;# 
   962  0318                     	;# 
   963  0319                     	;# 
   964  031A                     	;# 
   965  038C                     	;# 
   966  038E                     	;# 
   967  0391                     	;# 
   968  0392                     	;# 
   969  0393                     	;# 
   970  039A                     	;# 
   971  039C                     	;# 
   972  039D                     	;# 
   973  039E                     	;# 
   974  039F                     	;# 
   975  0415                     	;# 
   976  0416                     	;# 
   977  0417                     	;# 
   978  041C                     	;# 
   979  041D                     	;# 
   980  041E                     	;# 
   981  0FE4                     	;# 
   982  0FE5                     	;# 
   983  0FE6                     	;# 
   984  0FE7                     	;# 
   985  0FE8                     	;# 
   986  0FE9                     	;# 
   987  0FEA                     	;# 
   988  0FEB                     	;# 
   989  0FED                     	;# 
   990  0FEE                     	;# 
   991  0FEF                     	;# 
   992  0000                     	;# 
   993  0001                     	;# 
   994  0002                     	;# 
   995  0003                     	;# 
   996  0004                     	;# 
   997  0005                     	;# 
   998  0006                     	;# 
   999  0007                     	;# 
  1000  0008                     	;# 
  1001  0009                     	;# 
  1002  000A                     	;# 
  1003  000B                     	;# 
  1004  000C                     	;# 
  1005  000E                     	;# 
  1006  0011                     	;# 
  1007  0012                     	;# 
  1008  0013                     	;# 
  1009  0015                     	;# 
  1010  0016                     	;# 
  1011  0016                     	;# 
  1012  0017                     	;# 
  1013  0018                     	;# 
  1014  0019                     	;# 
  1015  001A                     	;# 
  1016  001B                     	;# 
  1017  001C                     	;# 
  1018  001E                     	;# 
  1019  001F                     	;# 
  1020  008C                     	;# 
  1021  008E                     	;# 
  1022  0091                     	;# 
  1023  0092                     	;# 
  1024  0093                     	;# 
  1025  0095                     	;# 
  1026  0096                     	;# 
  1027  0097                     	;# 
  1028  0098                     	;# 
  1029  0099                     	;# 
  1030  009A                     	;# 
  1031  009B                     	;# 
  1032  009B                     	;# 
  1033  009C                     	;# 
  1034  009D                     	;# 
  1035  009E                     	;# 
  1036  010C                     	;# 
  1037  010E                     	;# 
  1038  0111                     	;# 
  1039  0112                     	;# 
  1040  0113                     	;# 
  1041  0114                     	;# 
  1042  0115                     	;# 
  1043  0116                     	;# 
  1044  0117                     	;# 
  1045  0118                     	;# 
  1046  0119                     	;# 
  1047  011A                     	;# 
  1048  011B                     	;# 
  1049  011D                     	;# 
  1050  011E                     	;# 
  1051  018C                     	;# 
  1052  018E                     	;# 
  1053  0191                     	;# 
  1054  0191                     	;# 
  1055  0192                     	;# 
  1056  0193                     	;# 
  1057  0193                     	;# 
  1058  0193                     	;# 
  1059  0194                     	;# 
  1060  0195                     	;# 
  1061  0196                     	;# 
  1062  0199                     	;# 
  1063  019A                     	;# 
  1064  019B                     	;# 
  1065  019B                     	;# 
  1066  019C                     	;# 
  1067  019D                     	;# 
  1068  019E                     	;# 
  1069  019F                     	;# 
  1070  020C                     	;# 
  1071  020E                     	;# 
  1072  0211                     	;# 
  1073  0211                     	;# 
  1074  0212                     	;# 
  1075  0212                     	;# 
  1076  0213                     	;# 
  1077  0213                     	;# 
  1078  0214                     	;# 
  1079  0214                     	;# 
  1080  0215                     	;# 
  1081  0215                     	;# 
  1082  0215                     	;# 
  1083  0216                     	;# 
  1084  0216                     	;# 
  1085  0217                     	;# 
  1086  0217                     	;# 
  1087  0291                     	;# 
  1088  0291                     	;# 
  1089  0292                     	;# 
  1090  0293                     	;# 
  1091  0294                     	;# 
  1092  0295                     	;# 
  1093  0295                     	;# 
  1094  0296                     	;# 
  1095  0298                     	;# 
  1096  0298                     	;# 
  1097  0299                     	;# 
  1098  029A                     	;# 
  1099  029B                     	;# 
  1100  029C                     	;# 
  1101  029D                     	;# 
  1102  029E                     	;# 
  1103  0311                     	;# 
  1104  0311                     	;# 
  1105  0312                     	;# 
  1106  0313                     	;# 
  1107  0318                     	;# 
  1108  0318                     	;# 
  1109  0319                     	;# 
  1110  031A                     	;# 
  1111  038C                     	;# 
  1112  038E                     	;# 
  1113  0391                     	;# 
  1114  0392                     	;# 
  1115  0393                     	;# 
  1116  039A                     	;# 
  1117  039C                     	;# 
  1118  039D                     	;# 
  1119  039E                     	;# 
  1120  039F                     	;# 
  1121  0415                     	;# 
  1122  0416                     	;# 
  1123  0417                     	;# 
  1124  041C                     	;# 
  1125  041D                     	;# 
  1126  041E                     	;# 
  1127  0FE4                     	;# 
  1128  0FE5                     	;# 
  1129  0FE6                     	;# 
  1130  0FE7                     	;# 
  1131  0FE8                     	;# 
  1132  0FE9                     	;# 
  1133  0FEA                     	;# 
  1134  0FEB                     	;# 
  1135  0FED                     	;# 
  1136  0FEE                     	;# 
  1137  0FEF                     	;# 
  1138  0000                     	;# 
  1139  0001                     	;# 
  1140  0002                     	;# 
  1141  0003                     	;# 
  1142  0004                     	;# 
  1143  0005                     	;# 
  1144  0006                     	;# 
  1145  0007                     	;# 
  1146  0008                     	;# 
  1147  0009                     	;# 
  1148  000A                     	;# 
  1149  000B                     	;# 
  1150  000C                     	;# 
  1151  000E                     	;# 
  1152  0011                     	;# 
  1153  0012                     	;# 
  1154  0013                     	;# 
  1155  0015                     	;# 
  1156  0016                     	;# 
  1157  0016                     	;# 
  1158  0017                     	;# 
  1159  0018                     	;# 
  1160  0019                     	;# 
  1161  001A                     	;# 
  1162  001B                     	;# 
  1163  001C                     	;# 
  1164  001E                     	;# 
  1165  001F                     	;# 
  1166  008C                     	;# 
  1167  008E                     	;# 
  1168  0091                     	;# 
  1169  0092                     	;# 
  1170  0093                     	;# 
  1171  0095                     	;# 
  1172  0096                     	;# 
  1173  0097                     	;# 
  1174  0098                     	;# 
  1175  0099                     	;# 
  1176  009A                     	;# 
  1177  009B                     	;# 
  1178  009B                     	;# 
  1179  009C                     	;# 
  1180  009D                     	;# 
  1181  009E                     	;# 
  1182  010C                     	;# 
  1183  010E                     	;# 
  1184  0111                     	;# 
  1185  0112                     	;# 
  1186  0113                     	;# 
  1187  0114                     	;# 
  1188  0115                     	;# 
  1189  0116                     	;# 
  1190  0117                     	;# 
  1191  0118                     	;# 
  1192  0119                     	;# 
  1193  011A                     	;# 
  1194  011B                     	;# 
  1195  011D                     	;# 
  1196  011E                     	;# 
  1197  018C                     	;# 
  1198  018E                     	;# 
  1199  0191                     	;# 
  1200  0191                     	;# 
  1201  0192                     	;# 
  1202  0193                     	;# 
  1203  0193                     	;# 
  1204  0193                     	;# 
  1205  0194                     	;# 
  1206  0195                     	;# 
  1207  0196                     	;# 
  1208  0199                     	;# 
  1209  019A                     	;# 
  1210  019B                     	;# 
  1211  019B                     	;# 
  1212  019C                     	;# 
  1213  019D                     	;# 
  1214  019E                     	;# 
  1215  019F                     	;# 
  1216  020C                     	;# 
  1217  020E                     	;# 
  1218  0211                     	;# 
  1219  0211                     	;# 
  1220  0212                     	;# 
  1221  0212                     	;# 
  1222  0213                     	;# 
  1223  0213                     	;# 
  1224  0214                     	;# 
  1225  0214                     	;# 
  1226  0215                     	;# 
  1227  0215                     	;# 
  1228  0215                     	;# 
  1229  0216                     	;# 
  1230  0216                     	;# 
  1231  0217                     	;# 
  1232  0217                     	;# 
  1233  0291                     	;# 
  1234  0291                     	;# 
  1235  0292                     	;# 
  1236  0293                     	;# 
  1237  0294                     	;# 
  1238  0295                     	;# 
  1239  0295                     	;# 
  1240  0296                     	;# 
  1241  0298                     	;# 
  1242  0298                     	;# 
  1243  0299                     	;# 
  1244  029A                     	;# 
  1245  029B                     	;# 
  1246  029C                     	;# 
  1247  029D                     	;# 
  1248  029E                     	;# 
  1249  0311                     	;# 
  1250  0311                     	;# 
  1251  0312                     	;# 
  1252  0313                     	;# 
  1253  0318                     	;# 
  1254  0318                     	;# 
  1255  0319                     	;# 
  1256  031A                     	;# 
  1257  038C                     	;# 
  1258  038E                     	;# 
  1259  0391                     	;# 
  1260  0392                     	;# 
  1261  0393                     	;# 
  1262  039A                     	;# 
  1263  039C                     	;# 
  1264  039D                     	;# 
  1265  039E                     	;# 
  1266  039F                     	;# 
  1267  0415                     	;# 
  1268  0416                     	;# 
  1269  0417                     	;# 
  1270  041C                     	;# 
  1271  041D                     	;# 
  1272  041E                     	;# 
  1273  0FE4                     	;# 
  1274  0FE5                     	;# 
  1275  0FE6                     	;# 
  1276  0FE7                     	;# 
  1277  0FE8                     	;# 
  1278  0FE9                     	;# 
  1279  0FEA                     	;# 
  1280  0FEB                     	;# 
  1281  0FED                     	;# 
  1282  0FEE                     	;# 
  1283  0FEF                     	;# 
  1284  0000                     	;# 
  1285  0001                     	;# 
  1286  0002                     	;# 
  1287  0003                     	;# 
  1288  0004                     	;# 
  1289  0005                     	;# 
  1290  0006                     	;# 
  1291  0007                     	;# 
  1292  0008                     	;# 
  1293  0009                     	;# 
  1294  000A                     	;# 
  1295  000B                     	;# 
  1296  000C                     	;# 
  1297  000E                     	;# 
  1298  0011                     	;# 
  1299  0012                     	;# 
  1300  0013                     	;# 
  1301  0015                     	;# 
  1302  0016                     	;# 
  1303  0016                     	;# 
  1304  0017                     	;# 
  1305  0018                     	;# 
  1306  0019                     	;# 
  1307  001A                     	;# 
  1308  001B                     	;# 
  1309  001C                     	;# 
  1310  001E                     	;# 
  1311  001F                     	;# 
  1312  008C                     	;# 
  1313  008E                     	;# 
  1314  0091                     	;# 
  1315  0092                     	;# 
  1316  0093                     	;# 
  1317  0095                     	;# 
  1318  0096                     	;# 
  1319  0097                     	;# 
  1320  0098                     	;# 
  1321  0099                     	;# 
  1322  009A                     	;# 
  1323  009B                     	;# 
  1324  009B                     	;# 
  1325  009C                     	;# 
  1326  009D                     	;# 
  1327  009E                     	;# 
  1328  010C                     	;# 
  1329  010E                     	;# 
  1330  0111                     	;# 
  1331  0112                     	;# 
  1332  0113                     	;# 
  1333  0114                     	;# 
  1334  0115                     	;# 
  1335  0116                     	;# 
  1336  0117                     	;# 
  1337  0118                     	;# 
  1338  0119                     	;# 
  1339  011A                     	;# 
  1340  011B                     	;# 
  1341  011D                     	;# 
  1342  011E                     	;# 
  1343  018C                     	;# 
  1344  018E                     	;# 
  1345  0191                     	;# 
  1346  0191                     	;# 
  1347  0192                     	;# 
  1348  0193                     	;# 
  1349  0193                     	;# 
  1350  0193                     	;# 
  1351  0194                     	;# 
  1352  0195                     	;# 
  1353  0196                     	;# 
  1354  0199                     	;# 
  1355  019A                     	;# 
  1356  019B                     	;# 
  1357  019B                     	;# 
  1358  019C                     	;# 
  1359  019D                     	;# 
  1360  019E                     	;# 
  1361  019F                     	;# 
  1362  020C                     	;# 
  1363  020E                     	;# 
  1364  0211                     	;# 
  1365  0211                     	;# 
  1366  0212                     	;# 
  1367  0212                     	;# 
  1368  0213                     	;# 
  1369  0213                     	;# 
  1370  0214                     	;# 
  1371  0214                     	;# 
  1372  0215                     	;# 
  1373  0215                     	;# 
  1374  0215                     	;# 
  1375  0216                     	;# 
  1376  0216                     	;# 
  1377  0217                     	;# 
  1378  0217                     	;# 
  1379  0291                     	;# 
  1380  0291                     	;# 
  1381  0292                     	;# 
  1382  0293                     	;# 
  1383  0294                     	;# 
  1384  0295                     	;# 
  1385  0295                     	;# 
  1386  0296                     	;# 
  1387  0298                     	;# 
  1388  0298                     	;# 
  1389  0299                     	;# 
  1390  029A                     	;# 
  1391  029B                     	;# 
  1392  029C                     	;# 
  1393  029D                     	;# 
  1394  029E                     	;# 
  1395  0311                     	;# 
  1396  0311                     	;# 
  1397  0312                     	;# 
  1398  0313                     	;# 
  1399  0318                     	;# 
  1400  0318                     	;# 
  1401  0319                     	;# 
  1402  031A                     	;# 
  1403  038C                     	;# 
  1404  038E                     	;# 
  1405  0391                     	;# 
  1406  0392                     	;# 
  1407  0393                     	;# 
  1408  039A                     	;# 
  1409  039C                     	;# 
  1410  039D                     	;# 
  1411  039E                     	;# 
  1412  039F                     	;# 
  1413  0415                     	;# 
  1414  0416                     	;# 
  1415  0417                     	;# 
  1416  041C                     	;# 
  1417  041D                     	;# 
  1418  041E                     	;# 
  1419  0FE4                     	;# 
  1420  0FE5                     	;# 
  1421  0FE6                     	;# 
  1422  0FE7                     	;# 
  1423  0FE8                     	;# 
  1424  0FE9                     	;# 
  1425  0FEA                     	;# 
  1426  0FEB                     	;# 
  1427  0FED                     	;# 
  1428  0FEE                     	;# 
  1429  0FEF                     	;# 
  1430                           
  1431                           	psect	idataCOMMON
  1432  0003                     __pidataCOMMON:	
  1433                           
  1434                           ;initializer for _I2C_slaveWriteData
  1435  0003  3455               	retlw	85
  1436                           
  1437                           	psect	idataBANK0
  1438  0D1C                     __pidataBANK0:	
  1439                           
  1440                           ;initializer for _tmr_scaler
  1441  0D1C  3401               	retlw	1
  1442                           
  1443                           ;initializer for _continuity
  1444  0D1D  34FA               	retlw	250
  1445                           
  1446                           ;initializer for _threshold
  1447  0D1E  3432               	retlw	50
  1448                           
  1449                           ;initializer for _BACKPLANE_SLAVE_ADDRESS
  1450  0D1F  3401               	retlw	1
  1451                           
  1452                           ;initializer for _type_no_data
  1453  0D20  3406               	retlw	6
  1454                           
  1455                           	psect	stringtext
  1456  03C5                     __pstringtext:	
  1457  03C5                     _dpowers:	
  1458  03C5  3401               	retlw	1
  1459  03C6  3400               	retlw	0
  1460  03C7  340A               	retlw	10
  1461  03C8  3400               	retlw	0
  1462  03C9  3464               	retlw	100
  1463  03CA  3400               	retlw	0
  1464  03CB  34E8               	retlw	232
  1465  03CC  3403               	retlw	3
  1466  03CD  3410               	retlw	16
  1467  03CE  3427               	retlw	39
  1468  03CF                     __end_of_dpowers:	
  1469  03CF                     _ANALOG_IN:	
  1470  03CF  3402               	retlw	2
  1471  03D0  3401               	retlw	1
  1472  03D1  3400               	retlw	0
  1473  03D2  3407               	retlw	7
  1474  03D3                     __end_of_ANALOG_IN:	
  1475  0011                     _PIR1bits	set	17
  1476  000B                     _INTCONbits	set	11
  1477  0015                     _TMR0	set	21
  1478  005A                     _TMR0IF	set	90
  1479  0091                     _PIE1bits	set	145
  1480  0095                     _OPTION_REG	set	149
  1481  009D                     _ADCON0bits	set	157
  1482  009C                     _ADRESH	set	156
  1483  009B                     _ADRESL	set	155
  1484  009E                     _ADCON1	set	158
  1485  009D                     _ADCON0	set	157
  1486  0097                     _WDTCON	set	151
  1487  0098                     _OSCTUNE	set	152
  1488  0099                     _OSCCON	set	153
  1489  0095                     _OPTION_REGbits	set	149
  1490  008E                     _TRISC	set	142
  1491  008C                     _TRISA	set	140
  1492  010E                     _LATCbits	set	270
  1493  011D                     _APFCON0	set	285
  1494  011E                     _APFCON1	set	286
  1495  010E                     _LATC	set	270
  1496  010C                     _LATA	set	268
  1497  0193                     _EEDATL	set	403
  1498  0195                     _EECON1bits	set	405
  1499  0191                     _EEADRL	set	401
  1500  0196                     _EECON2	set	406
  1501  0199                     _RCREG	set	409
  1502  019D                     _RCSTAbits	set	413
  1503  019A                     _TXREG	set	410
  1504  019C                     _SPBRGH	set	412
  1505  019B                     _SPBRGL	set	411
  1506  019E                     _TXSTA	set	414
  1507  019D                     _RCSTA	set	413
  1508  019F                     _BAUDCON	set	415
  1509  018C                     _ANSELA	set	396
  1510  018E                     _ANSELC	set	398
  1511  0215                     _SSP1CON1bits	set	533
  1512  0216                     _SSP1CON2bits	set	534
  1513  0214                     _SSP1STATbits	set	532
  1514  0211                     _SSP1BUF	set	529
  1515  0212                     _SSP1ADD	set	530
  1516  0213                     _SSP1MSK	set	531
  1517  0217                     _SSP1CON3	set	535
  1518  0216                     _SSP1CON2	set	534
  1519  0215                     _SSP1CON1	set	533
  1520  0214                     _SSP1STAT	set	532
  1521  020E                     _WPUC	set	526
  1522  020C                     _WPUA	set	524
  1523  03D3                     STR_1:	
  1524  03D3  344D               	retlw	77	;'M'
  1525  03D4  3455               	retlw	85	;'U'
  1526  03D5  344C               	retlw	76	;'L'
  1527  03D6  3454               	retlw	84	;'T'
  1528  03D7  3449               	retlw	73	;'I'
  1529  03D8  345F               	retlw	95	;'_'
  1530  03D9  3441               	retlw	65	;'A'
  1531  03DA  3431               	retlw	49	;'1'
  1532  03DB  3433               	retlw	51	;'3'
  1533  03DC  3432               	retlw	50	;'2'
  1534  03DD  3434               	retlw	52	;'4'
  1535  03DE  344C               	retlw	76	;'L'
  1536  03DF  3455               	retlw	85	;'U'
  1537  03E0  3441               	retlw	65	;'A'
  1538  03E1  345F               	retlw	95	;'_'
  1539  03E2  3454               	retlw	84	;'T'
  1540  03E3  3400               	retlw	0
  1541  03E4                     STR_36:	
  1542  03E4  3449               	retlw	73	;'I'
  1543  03E5  344C               	retlw	76	;'L'
  1544  03E6  344C               	retlw	76	;'L'
  1545  03E7  3445               	retlw	69	;'E'
  1546  03E8  3447               	retlw	71	;'G'
  1547  03E9  3441               	retlw	65	;'A'
  1548  03EA  344C               	retlw	76	;'L'
  1549  03EB  345F               	retlw	95	;'_'
  1550  03EC  3454               	retlw	84	;'T'
  1551  03ED  3459               	retlw	89	;'Y'
  1552  03EE  3450               	retlw	80	;'P'
  1553  03EF  3445               	retlw	69	;'E'
  1554  03F0  340A               	retlw	10
  1555  03F1  3400               	retlw	0
  1556  03F2                     STR_16:	
  1557  03F2  3424               	retlw	36	;'$'
  1558  03F3  343A               	retlw	58	;':'
  1559  03F4  3452               	retlw	82	;'R'
  1560  03F5  3444               	retlw	68	;'D'
  1561  03F6  3441               	retlw	65	;'A'
  1562  03F7  343A               	retlw	58	;':'
  1563  03F8  3425               	retlw	37	;'%'
  1564  03F9  3464               	retlw	100	;'d'
  1565  03FA  340A               	retlw	10
  1566  03FB  3400               	retlw	0
  1567  03FC                     STR_13:	
  1568  03FC  3424               	retlw	36	;'$'
  1569  03FD  343A               	retlw	58	;':'
  1570  03FE  3447               	retlw	71	;'G'
  1571  03FF  3445               	retlw	69	;'E'
  1572  0400  3454               	retlw	84	;'T'
  1573  0401  343A               	retlw	58	;':'
  1574  0402  3425               	retlw	37	;'%'
  1575  0403  3464               	retlw	100	;'d'
  1576  0404  340A               	retlw	10
  1577  0405  3400               	retlw	0
  1578  0406                     STR_34:	
  1579  0406  342D               	retlw	45	;'-'
  1580  0407  3425               	retlw	37	;'%'
  1581  0408  3464               	retlw	100	;'d'
  1582  0409  342E               	retlw	46	;'.'
  1583  040A  3425               	retlw	37	;'%'
  1584  040B  3430               	retlw	48	;'0'
  1585  040C  3432               	retlw	50	;'2'
  1586  040D  3464               	retlw	100	;'d'
  1587  040E  340A               	retlw	10
  1588  040F  3400               	retlw	0
  1589  0410                     STR_5:	
  1590  0410  3424               	retlw	36	;'$'
  1591  0411  343A               	retlw	58	;':'
  1592  0412  3457               	retlw	87	;'W'
  1593  0413  3448               	retlw	72	;'H'
  1594  0414  344F               	retlw	79	;'O'
  1595  0415  343A               	retlw	58	;':'
  1596  0416  3425               	retlw	37	;'%'
  1597  0417  3473               	retlw	115	;'s'
  1598  0418  340A               	retlw	10
  1599  0419  3400               	retlw	0
  1600  041A                     STR_9:	
  1601  041A  342A               	retlw	42	;'*'
  1602  041B  343A               	retlw	58	;':'
  1603  041C  3453               	retlw	83	;'S'
  1604  041D  3454               	retlw	84	;'T'
  1605  041E  3450               	retlw	80	;'P'
  1606  041F  343A               	retlw	58	;':'
  1607  0420  3425               	retlw	37	;'%'
  1608  0421  3473               	retlw	115	;'s'
  1609  0422  340A               	retlw	10
  1610  0423  3400               	retlw	0
  1611  0424                     STR_32:	
  1612  0424  342D               	retlw	45	;'-'
  1613  0425  3425               	retlw	37	;'%'
  1614  0426  3464               	retlw	100	;'d'
  1615  0427  342E               	retlw	46	;'.'
  1616  0428  3425               	retlw	37	;'%'
  1617  0429  3430               	retlw	48	;'0'
  1618  042A  3432               	retlw	50	;'2'
  1619  042B  3464               	retlw	100	;'d'
  1620  042C  342C               	retlw	44	;','
  1621  042D  3400               	retlw	0
  1622  042E                     STR_24:	
  1623  042E  3455               	retlw	85	;'U'
  1624  042F  3449               	retlw	73	;'I'
  1625  0430  344E               	retlw	78	;'N'
  1626  0431  3454               	retlw	84	;'T'
  1627  0432  3431               	retlw	49	;'1'
  1628  0433  3436               	retlw	54	;'6'
  1629  0434  345F               	retlw	95	;'_'
  1630  0435  3454               	retlw	84	;'T'
  1631  0436  343A               	retlw	58	;':'
  1632  0437  3400               	retlw	0
  1633  0438                     STR_35:	
  1634  0438  344E               	retlw	78	;'N'
  1635  0439  344F               	retlw	79	;'O'
  1636  043A  345F               	retlw	95	;'_'
  1637  043B  3444               	retlw	68	;'D'
  1638  043C  3441               	retlw	65	;'A'
  1639  043D  3454               	retlw	84	;'T'
  1640  043E  3441               	retlw	65	;'A'
  1641  043F  340A               	retlw	10
  1642  0440  3400               	retlw	0
  1643  0441                     STR_18:	
  1644  0441  3455               	retlw	85	;'U'
  1645  0442  3449               	retlw	73	;'I'
  1646  0443  344E               	retlw	78	;'N'
  1647  0444  3454               	retlw	84	;'T'
  1648  0445  3438               	retlw	56	;'8'
  1649  0446  345F               	retlw	95	;'_'
  1650  0447  3454               	retlw	84	;'T'
  1651  0448  343A               	retlw	58	;':'
  1652  0449  3400               	retlw	0
  1653  044A                     STR_30:	
  1654  044A  3446               	retlw	70	;'F'
  1655  044B  344C               	retlw	76	;'L'
  1656  044C  344F               	retlw	79	;'O'
  1657  044D  3441               	retlw	65	;'A'
  1658  044E  3454               	retlw	84	;'T'
  1659  044F  343A               	retlw	58	;':'
  1660  0450  3400               	retlw	0
  1661  0451                     STR_2:	
  1662  0451  3428               	retlw	40	;'('
  1663  0452  346E               	retlw	110	;'n'
  1664  0453  3475               	retlw	117	;'u'
  1665  0454  346C               	retlw	108	;'l'
  1666  0455  346C               	retlw	108	;'l'
  1667  0456  3429               	retlw	41	;')'
  1668  0457  3400               	retlw	0
  1669  0458                     STR_17:	
  1670  0458  3425               	retlw	37	;'%'
  1671  0459  3425               	retlw	37	;'%'
  1672  045A  3425               	retlw	37	;'%'
  1673  045B  3464               	retlw	100	;'d'
  1674  045C  343A               	retlw	58	;':'
  1675  045D  3400               	retlw	0
  1676  045E                     STR_3:	
  1677  045E  3423               	retlw	35	;'#'
  1678  045F  3425               	retlw	37	;'%'
  1679  0460  3473               	retlw	115	;'s'
  1680  0461  340A               	retlw	10
  1681  0462  3400               	retlw	0
  1682  0463                     STR_20:	
  1683  0463  3425               	retlw	37	;'%'
  1684  0464  3475               	retlw	117	;'u'
  1685  0465  340A               	retlw	10
  1686  0466  3400               	retlw	0
  1687  0467                     STR_22:	
  1688  0467  3425               	retlw	37	;'%'
  1689  0468  3464               	retlw	100	;'d'
  1690  0469  342C               	retlw	44	;','
  1691  046A  3400               	retlw	0
  1692  046B                     STR_19:	
  1693  046B  3425               	retlw	37	;'%'
  1694  046C  3475               	retlw	117	;'u'
  1695  046D  342C               	retlw	44	;','
  1696  046E  3400               	retlw	0
  1697  046F                     STR_15:	
  1698  046F  3452               	retlw	82	;'R'
  1699  0470  3444               	retlw	68	;'D'
  1700  0471  3441               	retlw	65	;'A'
  1701  0472  3400               	retlw	0
  1702  0473                     STR_14:	
  1703  0473  3457               	retlw	87	;'W'
  1704  0474  3444               	retlw	68	;'D'
  1705  0475  3441               	retlw	65	;'A'
  1706  0476  3400               	retlw	0
  1707  0477                     STR_7:	
  1708  0477  3453               	retlw	83	;'S'
  1709  0478  3454               	retlw	84	;'T'
  1710  0479  3441               	retlw	65	;'A'
  1711  047A  3400               	retlw	0
  1712  047B                     STR_10:	
  1713  047B  3441               	retlw	65	;'A'
  1714  047C  3443               	retlw	67	;'C'
  1715  047D  344B               	retlw	75	;'K'
  1716  047E  3400               	retlw	0
  1717  047F                     STR_4:	
  1718  047F  3457               	retlw	87	;'W'
  1719  0480  3448               	retlw	72	;'H'
  1720  0481  344F               	retlw	79	;'O'
  1721  0482  3400               	retlw	0
  1722  0483                     STR_8:	
  1723  0483  3453               	retlw	83	;'S'
  1724  0484  3454               	retlw	84	;'T'
  1725  0485  3450               	retlw	80	;'P'
  1726  0486  3400               	retlw	0
  1727  0487                     STR_12:	
  1728  0487  3447               	retlw	71	;'G'
  1729  0488  3445               	retlw	69	;'E'
  1730  0489  3454               	retlw	84	;'T'
  1731  048A  3400               	retlw	0
  1732  048B                     STR_11:	
  1733  048B  3453               	retlw	83	;'S'
  1734  048C  3445               	retlw	69	;'E'
  1735  048D  3454               	retlw	84	;'T'
  1736  048E  3400               	retlw	0
  1737  048F                     STR_6:	
  1738  048F  3453               	retlw	83	;'S'
  1739  0490  3441               	retlw	65	;'A'
  1740  0491  3456               	retlw	86	;'V'
  1741  0492  3400               	retlw	0
  1742  03F8                     
  1743                           ; #config settings
  1744  0000                     
  1745                           	psect	cinit
  1746  0032                     start_initialization:	
  1747  0032                     __initialization:	
  1748                           
  1749                           ; Initialize objects allocated to COMMON
  1750  0032  3180  2003  3180   	fcall	__pidataCOMMON	;fetch initializer
  1751  0035  00FD               	movwf	__pdataCOMMON& (0+127)
  1752                           
  1753                           ; Initialize objects allocated to BANK0
  1754  0036  301C               	movlw	low __pidataBANK0
  1755  0037  0084               	movwf	4
  1756  0038  308D               	movlw	(high __pidataBANK0)| (0+128)
  1757  0039  0085               	movwf	5
  1758  003A  0012               	moviw fsr0++
  1759  003B  00EB               	movwf	__pdataBANK0& (0+127)
  1760  003C  0012               	moviw fsr0++
  1761  003D  00EC               	movwf	(__pdataBANK0+1)& (0+127)
  1762  003E  0012               	moviw fsr0++
  1763  003F  00ED               	movwf	(__pdataBANK0+2)& (0+127)
  1764  0040  0012               	moviw fsr0++
  1765  0041  00EE               	movwf	(__pdataBANK0+3)& (0+127)
  1766  0042  0012               	moviw fsr0++
  1767  0043  00EF               	movwf	(__pdataBANK0+4)& (0+127)
  1768                           
  1769                           ; Clear objects allocated to COMMON
  1770  0044  01FC               	clrf	__pbssCOMMON& (0+127)
  1771                           
  1772                           ; Clear objects allocated to BANK0
  1773  0045  3052               	movlw	low __pbssBANK0
  1774  0046  0084               	movwf	4
  1775  0047  3000               	movlw	high __pbssBANK0
  1776  0048  0085               	movwf	5
  1777  0049  3019               	movlw	25
  1778  004A  318D  2527  3180   	fcall	clear_ram0
  1779                           
  1780                           ; Clear objects allocated to BANK1
  1781  004D  30A0               	movlw	low __pbssBANK1
  1782  004E  0084               	movwf	4
  1783  004F  3000               	movlw	high __pbssBANK1
  1784  0050  0085               	movwf	5
  1785  0051  304B               	movlw	75
  1786  0052  318D  2527  3180   	fcall	clear_ram0
  1787                           
  1788                           ; Clear objects allocated to BANK2
  1789  0055  3020               	movlw	low __pbssBANK2
  1790  0056  0084               	movwf	4
  1791  0057  3001               	movlw	high __pbssBANK2
  1792  0058  0085               	movwf	5
  1793  0059  3030               	movlw	48
  1794  005A  318D  2527  3180   	fcall	clear_ram0
  1795                           
  1796                           ; Clear objects allocated to BANK3
  1797  005D  30A0               	movlw	low __pbssBANK3
  1798  005E  0084               	movwf	4
  1799  005F  3001               	movlw	high __pbssBANK3
  1800  0060  0085               	movwf	5
  1801  0061  3030               	movlw	48
  1802  0062  318D  2527         	fcall	clear_ram0
  1803  0064                     end_of_initialization:	
  1804                           ;End of C runtime variable initialization code
  1805                           
  1806  0064                     __end_of__initialization:	
  1807  0064  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1808  0065  0020               	movlb	0
  1809  0066  3187  2F95         	ljmp	_main	;jump to C main() function
  1810                           
  1811                           	psect	bssCOMMON
  1812  007C                     __pbssCOMMON:	
  1813  007C                     _eusartTxHead:	
  1814  007C                     	ds	1
  1815                           
  1816                           	psect	dataCOMMON
  1817  007D                     __pdataCOMMON:	
  1818  007D                     _I2C_slaveWriteData:	
  1819  007D                     	ds	1
  1820                           
  1821                           	psect	bssBANK0
  1822  0052                     __pbssBANK0:	
  1823  0052                     _PROTOCOL_Set_Handler:	
  1824  0052                     	ds	2
  1825  0054                     _PROTOCOL_Stop_Handler:	
  1826  0054                     	ds	2
  1827  0056                     I2C_StatusCallback@ext_cnt:	
  1828  0056                     	ds	1
  1829  0057                     I2C_StatusCallback@ext_len:	
  1830  0057                     	ds	1
  1831  0058                     I2C_StatusCallback@next:	
  1832  0058                     	ds	1
  1833  0059                     I2C_StatusCallback@slaveWriteType:	
  1834  0059                     	ds	1
  1835  005A                     _i:	
  1836  005A                     	ds	1
  1837  005B                     _backplane_slave_enabled:	
  1838  005B                     	ds	1
  1839  005C                     _tmr_overflow:	
  1840  005C                     	ds	1
  1841  005D                     _tmr_cnt:	
  1842  005D                     	ds	1
  1843  005E                     _sec_cnt:	
  1844  005E                     	ds	1
  1845  005F                     _invoked:	
  1846  005F                     	ds	1
  1847  0060                     _running:	
  1848  0060                     	ds	1
  1849  0061                     _locked:	
  1850  0061                     	ds	1
  1851  0062                     _value:	
  1852  0062                     	ds	1
  1853  0063                     _cnt:	
  1854  0063                     	ds	1
  1855  0064                     _slave_address:	
  1856  0064                     	ds	1
  1857  0065                     _eusartRxCount:	
  1858  0065                     	ds	1
  1859  0066                     _eusartRxTail:	
  1860  0066                     	ds	1
  1861  0067                     _eusartRxHead:	
  1862  0067                     	ds	1
  1863  0068                     _eusartTxBufferRemaining:	
  1864  0068                     	ds	1
  1865  0069                     _eusartTxTail:	
  1866  0069                     	ds	1
  1867  006A                     _timer0ReloadVal:	
  1868  006A                     	ds	1
  1869                           
  1870                           	psect	dataBANK0
  1871  006B                     __pdataBANK0:	
  1872  006B                     _tmr_scaler:	
  1873  006B                     	ds	1
  1874  006C                     _continuity:	
  1875  006C                     	ds	1
  1876  006D                     _threshold:	
  1877  006D                     	ds	1
  1878  006E                     _BACKPLANE_SLAVE_ADDRESS:	
  1879  006E                     	ds	1
  1880  006F                     _type_no_data:	
  1881  006F                     	ds	1
  1882                           
  1883                           	psect	bssBANK1
  1884  00A0                     __pbssBANK1:	
  1885  00A0                     _eusartRxBuffer:	
  1886  00A0                     	ds	8
  1887  00A8                     _eusartTxBuffer:	
  1888  00A8                     	ds	8
  1889  00B0                     _count:	
  1890  00B0                     	ds	4
  1891  00B4                     _analog_in_flags:	
  1892  00B4                     	ds	4
  1893  00B8                     _float100:	
  1894  00B8                     	ds	2
  1895  00BA                     _device_id_:	
  1896  00BA                     	ds	2
  1897  00BC                     _PROTOCOL_Tick_Handler:	
  1898  00BC                     	ds	2
  1899  00BE                     _PROTOCOL_Inv_Handler:	
  1900  00BE                     	ds	2
  1901  00C0                     _PROTOCOL_Extension_Handler:	
  1902  00C0                     	ds	2
  1903  00C2                     _PROTOCOL_Loop_Func:	
  1904  00C2                     	ds	2
  1905  00C4                     _PROTOCOL_Start_Handler:	
  1906  00C4                     	ds	2
  1907  00C6                     _data:	
  1908  00C6                     	ds	1
  1909  00C7                     _j:	
  1910  00C7                     	ds	1
  1911  00C8                     _readbuf_status:	
  1912  00C8                     	ds	1
  1913  00C9                     _sendbuf:	
  1914  00C9                     	ds	16
  1915  00D9                     _readbuf:	
  1916  00D9                     	ds	5
  1917  00DE                     _position:	
  1918  00DE                     	ds	4
  1919  00E2                     PROTOCOL_Send_float@pbuf:	
  1920  00E2                     	ds	3
  1921  00E5                     PROTOCOL_Send_int16_t@pbuf:	
  1922  00E5                     	ds	2
  1923  00E7                     PROTOCOL_Send_uint16_t@pbuf:	
  1924  00E7                     	ds	2
  1925  00E9                     PROTOCOL_Send_int8_t@pbuf:	
  1926  00E9                     	ds	1
  1927  00EA                     PROTOCOL_Send_uint8_t@pbuf:	
  1928  00EA                     	ds	1
  1929                           
  1930                           	psect	bssBANK2
  1931  0120                     __pbssBANK2:	
  1932  0120                     _buf:	
  1933  0120                     	ds	48
  1934                           
  1935                           	psect	bssBANK3
  1936  01A0                     __pbssBANK3:	
  1937  01A0                     I2C_StatusCallback@ext_buf:	
  1938  01A0                     	ds	48
  1939                           
  1940                           	psect	clrtext
  1941  0D27                     clear_ram0:	
  1942                           ;	Called with FSR0 containing the base address, and
  1943                           ;	WREG with the size to clear
  1944                           
  1945  0D27  0064               	clrwdt	;clear the watchdog before getting into this loop
  1946  0D28                     clrloop0:	
  1947  0D28  0180               	clrf	0	;clear RAM location pointed to by FSR
  1948  0D29  3101               	addfsr 0,1
  1949  0D2A  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1950  0D2B  2D28               	goto	clrloop0	;have we reached the end yet?
  1951  0D2C  3400               	retlw	0	;all done for this memory range, return
  1952                           
  1953                           	psect	cstackCOMMON
  1954  0070                     __pcstackCOMMON:	
  1955  0070                     ?_isdigit:	
  1956  0070                     ?_OSCILLATOR_Initialize:	
  1957                           ; 1 bit 
  1958                           
  1959  0070                     ?_WDT_Initialize:	
  1960                           ; 1 bytes @ 0x0
  1961                           
  1962  0070                     ?_ADC_Initialize:	
  1963                           ; 1 bytes @ 0x0
  1964                           
  1965  0070                     ?_TMR0_Initialize:	
  1966                           ; 1 bytes @ 0x0
  1967                           
  1968  0070                     ?_EUSART_Initialize:	
  1969                           ; 1 bytes @ 0x0
  1970                           
  1971  0070                     ?_EUSART_Transmit_ISR:	
  1972                           ; 1 bytes @ 0x0
  1973                           
  1974  0070                     ??_EUSART_Transmit_ISR:	
  1975                           ; 1 bytes @ 0x0
  1976                           
  1977  0070                     ?_EUSART_Receive_ISR:	
  1978                           ; 1 bytes @ 0x0
  1979                           
  1980  0070                     ??_EUSART_Receive_ISR:	
  1981                           ; 1 bytes @ 0x0
  1982                           
  1983  0070                     ?_I2C_ISR:	
  1984                           ; 1 bytes @ 0x0
  1985                           
  1986  0070                     ?_I2C_Initialize:	
  1987                           ; 1 bytes @ 0x0
  1988                           
  1989  0070                     ?_PROTOCOL_Loop:	
  1990                           ; 1 bytes @ 0x0
  1991                           
  1992  0070                     ?_putch:	
  1993                           ; 1 bytes @ 0x0
  1994                           
  1995  0070                     ?_DATAEE_ReadByte:	
  1996                           ; 1 bytes @ 0x0
  1997                           
  1998  0070                     ?_I2C_StatusCallback:	
  1999                           ; 1 bytes @ 0x0
  2000                           
  2001  0070                     ?_PIN_MANAGER_Initialize:	
  2002                           ; 1 bytes @ 0x0
  2003                           
  2004  0070                     ?_ADC_SelectChannel:	
  2005                           ; 1 bytes @ 0x0
  2006                           
  2007  0070                     ?_ADC_StartConversion:	
  2008                           ; 1 bytes @ 0x0
  2009                           
  2010  0070                     ?_ADC_IsConversionDone:	
  2011                           ; 1 bytes @ 0x0
  2012                           
  2013  0070                     ?_TMR0_HasOverflowOccured:	
  2014                           ; 1 bytes @ 0x0
  2015                           
  2016  0070                     ?_INTERRUPT_InterruptManager:	
  2017                           ; 1 bytes @ 0x0
  2018                           
  2019  0070                     ?_led_blink:	
  2020                           ; 1 bytes @ 0x0
  2021                           
  2022  0070                     ?_init:	
  2023                           ; 1 bytes @ 0x0
  2024                           
  2025  0070                     ?_loop_func:	
  2026                           ; 1 bytes @ 0x0
  2027                           
  2028  0070                     ?_main:	
  2029                           ; 1 bytes @ 0x0
  2030                           
  2031  0070                     ?_EUSART_Read:	
  2032                           ; 1 bytes @ 0x0
  2033                           
  2034  0070                     ?_EUSART_Write:	
  2035                           ; 1 bytes @ 0x0
  2036                           
  2037  0070                     ?_PROTOCOL_Write_Device_Address:	
  2038                           ; 1 bytes @ 0x0
  2039                           
  2040  0070                     ?_PROTOCOL_Read_Device_Address:	
  2041                           ; 1 bytes @ 0x0
  2042                           
  2043  0070                     ?_PROTOCOL_STA:	
  2044                           ; 1 bytes @ 0x0
  2045                           
  2046  0070                     ?_PROTOCOL_STP:	
  2047                           ; 1 bytes @ 0x0
  2048                           
  2049  0070                     ?_PROTOCOL_INV:	
  2050                           ; 1 bytes @ 0x0
  2051                           
  2052  0070                     ??_PROTOCOL_INV:	
  2053                           ; 1 bytes @ 0x0
  2054                           
  2055  0070                     ?_PROTOCOL_SAV:	
  2056                           ; 1 bytes @ 0x0
  2057                           
  2058  0070                     ?_PROTOCOL_SET:	
  2059                           ; 1 bytes @ 0x0
  2060                           
  2061  0070                     ?_PROTOCOL_EXT:	
  2062                           ; 1 bytes @ 0x0
  2063                           
  2064  0070                     ?_PROTOCOL_Read_Lock:	
  2065                           ; 1 bytes @ 0x0
  2066                           
  2067  0070                     ??_PROTOCOL_Read_Lock:	
  2068                           ; 1 bytes @ 0x0
  2069                           
  2070  0070                     ?_PROTOCOL_Backplane_Slave_Enabled:	
  2071                           ; 1 bytes @ 0x0
  2072                           
  2073  0070                     ??_PROTOCOL_Backplane_Slave_Enabled:	
  2074                           ; 1 bytes @ 0x0
  2075                           
  2076  0070                     ?_PROTOCOL_I2C_WHO:	
  2077                           ; 1 bytes @ 0x0
  2078                           
  2079  0070                     ??_PROTOCOL_I2C_WHO:	
  2080                           ; 1 bytes @ 0x0
  2081                           
  2082  0070                     ?_PROTOCOL_I2C_GET:	
  2083                           ; 1 bytes @ 0x0
  2084                           
  2085  0070                     ??_PROTOCOL_I2C_GET:	
  2086                           ; 1 bytes @ 0x0
  2087                           
  2088  0070                     ?_PROTOCOL_RST:	
  2089                           ; 1 bytes @ 0x0
  2090                           
  2091  0070                     ??_PROTOCOL_RST:	
  2092                           ; 1 bytes @ 0x0
  2093                           
  2094  0070                     ?_PROTOCOL_I2C_SEN:	
  2095                           ; 1 bytes @ 0x0
  2096                           
  2097  0070                     ??_PROTOCOL_I2C_SEN:	
  2098                           ; 1 bytes @ 0x0
  2099                           
  2100  0070                     ?i1_set_handler:	
  2101                           ; 1 bytes @ 0x0
  2102                           
  2103  0070                     ?i1_PROTOCOL_STA:	
  2104                           ; 1 bytes @ 0x0
  2105                           
  2106  0070                     ??i1_PROTOCOL_STA:	
  2107                           ; 1 bytes @ 0x0
  2108                           
  2109  0070                     ?i1_PROTOCOL_STP:	
  2110                           ; 1 bytes @ 0x0
  2111                           
  2112  0070                     ??i1_PROTOCOL_STP:	
  2113                           ; 1 bytes @ 0x0
  2114                           
  2115  0070                     ?i1_PROTOCOL_SAV:	
  2116                           ; 1 bytes @ 0x0
  2117                           
  2118  0070                     ?i1_PROTOCOL_SET:	
  2119                           ; 1 bytes @ 0x0
  2120                           
  2121  0070                     ?i1_PROTOCOL_EXT:	
  2122                           ; 1 bytes @ 0x0
  2123                           
  2124  0070                     ??i1_PROTOCOL_EXT:	
  2125                           ; 1 bytes @ 0x0
  2126                           
  2127  0070                     ?i1_DATAEE_WriteByte:	
  2128                           ; 1 bytes @ 0x0
  2129                           
  2130  0070                     i1set_handler@value:	
  2131                           ; 1 bytes @ 0x0
  2132                           
  2133  0070                     i1DATAEE_WriteByte@bData:	
  2134                           ; 1 bytes @ 0x0
  2135                           
  2136                           
  2137                           ; 1 bytes @ 0x0
  2138  0070                     	ds	1
  2139  0071                     ??i1_set_handler:	
  2140  0071                     ??i1_DATAEE_WriteByte:	
  2141                           ; 1 bytes @ 0x1
  2142                           
  2143  0071                     PROTOCOL_I2C_SEN@pdata:	
  2144                           ; 1 bytes @ 0x1
  2145                           
  2146  0071                     i1DATAEE_WriteByte@bAdd:	
  2147                           ; 1 bytes @ 0x1
  2148                           
  2149                           
  2150                           ; 1 bytes @ 0x1
  2151  0071                     	ds	1
  2152  0072                     i1set_handler@mask:	
  2153  0072                     i1DATAEE_WriteByte@GIEBitValue:	
  2154                           ; 1 bytes @ 0x2
  2155                           
  2156                           
  2157                           ; 1 bytes @ 0x2
  2158  0072                     	ds	1
  2159  0073                     ??i1_PROTOCOL_SAV:	
  2160  0073                     i1set_handler@i:	
  2161                           ; 1 bytes @ 0x3
  2162                           
  2163                           
  2164                           ; 1 bytes @ 0x3
  2165  0073                     	ds	1
  2166  0074                     ??i1_PROTOCOL_SET:	
  2167                           
  2168                           ; 1 bytes @ 0x4
  2169  0074                     	ds	1
  2170  0075                     i1PROTOCOL_SET@value_:	
  2171                           
  2172                           ; 1 bytes @ 0x5
  2173  0075                     	ds	1
  2174  0076                     ??_I2C_StatusCallback:	
  2175                           
  2176                           ; 1 bytes @ 0x6
  2177  0076                     	ds	1
  2178  0077                     I2C_StatusCallback@i2c_bus_state:	
  2179                           
  2180                           ; 1 bytes @ 0x7
  2181  0077                     	ds	1
  2182  0078                     I2C_StatusCallback@pdata:	
  2183                           
  2184                           ; 1 bytes @ 0x8
  2185  0078                     	ds	1
  2186  0079                     ??_I2C_ISR:	
  2187                           
  2188                           ; 1 bytes @ 0x9
  2189  0079                     	ds	1
  2190  007A                     I2C_ISR@i2c_data:	
  2191                           
  2192                           ; 1 bytes @ 0xA
  2193  007A                     	ds	1
  2194  007B                     ??_INTERRUPT_InterruptManager:	
  2195                           
  2196                           ; 1 bytes @ 0xB
  2197  007B                     	ds	1
  2198                           
  2199                           	psect	cstackBANK0
  2200  0020                     __pcstackBANK0:	
  2201  0020                     ??_OSCILLATOR_Initialize:	
  2202  0020                     ??_WDT_Initialize:	
  2203                           ; 1 bytes @ 0x0
  2204                           
  2205  0020                     ??_ADC_Initialize:	
  2206                           ; 1 bytes @ 0x0
  2207                           
  2208  0020                     ??_TMR0_Initialize:	
  2209                           ; 1 bytes @ 0x0
  2210                           
  2211  0020                     ??_EUSART_Initialize:	
  2212                           ; 1 bytes @ 0x0
  2213                           
  2214  0020                     ?_PROTOCOL_Set_Func:	
  2215                           ; 1 bytes @ 0x0
  2216                           
  2217  0020                     ??_I2C_Initialize:	
  2218                           ; 1 bytes @ 0x0
  2219                           
  2220  0020                     ??_isdigit:	
  2221                           ; 1 bytes @ 0x0
  2222                           
  2223  0020                     ??_DATAEE_ReadByte:	
  2224                           ; 1 bytes @ 0x0
  2225                           
  2226  0020                     ?_DATAEE_WriteByte:	
  2227                           ; 1 bytes @ 0x0
  2228                           
  2229  0020                     ??_PIN_MANAGER_Initialize:	
  2230                           ; 1 bytes @ 0x0
  2231                           
  2232  0020                     ??_ADC_SelectChannel:	
  2233                           ; 1 bytes @ 0x0
  2234                           
  2235  0020                     ??_ADC_StartConversion:	
  2236                           ; 1 bytes @ 0x0
  2237                           
  2238  0020                     ??_ADC_IsConversionDone:	
  2239                           ; 1 bytes @ 0x0
  2240                           
  2241  0020                     ??_TMR0_HasOverflowOccured:	
  2242                           ; 1 bytes @ 0x0
  2243                           
  2244  0020                     ??_led_blink:	
  2245                           ; 1 bytes @ 0x0
  2246                           
  2247  0020                     ??_init:	
  2248                           ; 1 bytes @ 0x0
  2249                           
  2250  0020                     ?_set_handler:	
  2251                           ; 1 bytes @ 0x0
  2252                           
  2253  0020                     ??_EUSART_Read:	
  2254                           ; 1 bytes @ 0x0
  2255                           
  2256  0020                     ??_EUSART_Write:	
  2257                           ; 1 bytes @ 0x0
  2258                           
  2259  0020                     ??_PROTOCOL_Read_Device_Address:	
  2260                           ; 1 bytes @ 0x0
  2261                           
  2262  0020                     ??_PROTOCOL_STA:	
  2263                           ; 1 bytes @ 0x0
  2264                           
  2265  0020                     ??_PROTOCOL_STP:	
  2266                           ; 1 bytes @ 0x0
  2267                           
  2268  0020                     ??_PROTOCOL_EXT:	
  2269                           ; 1 bytes @ 0x0
  2270                           
  2271  0020                     ?_PROTOCOL_I2C_Set_TLV:	
  2272                           ; 1 bytes @ 0x0
  2273                           
  2274  0020                     ?_abs:	
  2275                           ; 1 bytes @ 0x0
  2276                           
  2277  0020                     ?_strncmp:	
  2278                           ; 2 bytes @ 0x0
  2279                           
  2280  0020                     ?_ADC_GetConversionResult:	
  2281                           ; 2 bytes @ 0x0
  2282                           
  2283  0020                     ?___wmul:	
  2284                           ; 2 bytes @ 0x0
  2285                           
  2286  0020                     ?___lwdiv:	
  2287                           ; 2 bytes @ 0x0
  2288                           
  2289  0020                     set_handler@value:	
  2290                           ; 2 bytes @ 0x0
  2291                           
  2292  0020                     PROTOCOL_EXT@char_buf:	
  2293                           ; 1 bytes @ 0x0
  2294                           
  2295  0020                     PROTOCOL_I2C_Set_TLV@length:	
  2296                           ; 1 bytes @ 0x0
  2297                           
  2298  0020                     _isdigit$1134:	
  2299                           ; 1 bytes @ 0x0
  2300                           
  2301  0020                     DATAEE_WriteByte@bData:	
  2302                           ; 1 bytes @ 0x0
  2303                           
  2304  0020                     DATAEE_ReadByte@bAdd:	
  2305                           ; 1 bytes @ 0x0
  2306                           
  2307  0020                     PROTOCOL_Set_Func@loop_func:	
  2308                           ; 1 bytes @ 0x0
  2309                           
  2310  0020                     ___wmul@multiplier:	
  2311                           ; 2 bytes @ 0x0
  2312                           
  2313  0020                     abs@a:	
  2314                           ; 2 bytes @ 0x0
  2315                           
  2316  0020                     ___lwdiv@divisor:	
  2317                           ; 2 bytes @ 0x0
  2318                           
  2319  0020                     strncmp@s1:	
  2320                           ; 2 bytes @ 0x0
  2321                           
  2322                           
  2323                           ; 2 bytes @ 0x0
  2324  0020                     	ds	1
  2325  0021                     ??_DATAEE_WriteByte:	
  2326  0021                     ??_set_handler:	
  2327                           ; 1 bytes @ 0x1
  2328                           
  2329  0021                     ADC_SelectChannel@channel:	
  2330                           ; 1 bytes @ 0x1
  2331                           
  2332  0021                     init@i:	
  2333                           ; 1 bytes @ 0x1
  2334                           
  2335  0021                     EUSART_Read@readValue:	
  2336                           ; 1 bytes @ 0x1
  2337                           
  2338  0021                     EUSART_Write@txData:	
  2339                           ; 1 bytes @ 0x1
  2340                           
  2341  0021                     PROTOCOL_I2C_Set_TLV@pbuffer:	
  2342                           ; 1 bytes @ 0x1
  2343                           
  2344  0021                     isdigit@c:	
  2345                           ; 1 bytes @ 0x1
  2346                           
  2347  0021                     DATAEE_WriteByte@bAdd:	
  2348                           ; 1 bytes @ 0x1
  2349                           
  2350                           
  2351                           ; 1 bytes @ 0x1
  2352  0021                     	ds	1
  2353  0022                     ??_abs:	
  2354  0022                     ??_PROTOCOL_Set_Func:	
  2355                           ; 1 bytes @ 0x2
  2356                           
  2357  0022                     ??_putch:	
  2358                           ; 1 bytes @ 0x2
  2359                           
  2360  0022                     ??_ADC_GetConversionResult:	
  2361                           ; 1 bytes @ 0x2
  2362                           
  2363  0022                     ??_PROTOCOL_I2C_Set_TLV:	
  2364                           ; 1 bytes @ 0x2
  2365                           
  2366  0022                     set_handler@mask:	
  2367                           ; 1 bytes @ 0x2
  2368                           
  2369  0022                     putch@txData:	
  2370                           ; 1 bytes @ 0x2
  2371                           
  2372  0022                     strncmp@s2:	
  2373                           ; 1 bytes @ 0x2
  2374                           
  2375  0022                     DATAEE_WriteByte@GIEBitValue:	
  2376                           ; 1 bytes @ 0x2
  2377                           
  2378  0022                     ___wmul@multiplicand:	
  2379                           ; 1 bytes @ 0x2
  2380                           
  2381  0022                     ___lwdiv@dividend:	
  2382                           ; 2 bytes @ 0x2
  2383                           
  2384                           
  2385                           ; 2 bytes @ 0x2
  2386  0022                     	ds	1
  2387  0023                     ??_PROTOCOL_Write_Device_Address:	
  2388  0023                     ??_PROTOCOL_SAV:	
  2389                           ; 1 bytes @ 0x3
  2390                           
  2391  0023                     set_handler@i:	
  2392                           ; 1 bytes @ 0x3
  2393                           
  2394  0023                     PROTOCOL_I2C_Set_TLV@type:	
  2395                           ; 1 bytes @ 0x3
  2396                           
  2397  0023                     strncmp@len:	
  2398                           ; 1 bytes @ 0x3
  2399                           
  2400                           
  2401                           ; 2 bytes @ 0x3
  2402  0023                     	ds	1
  2403  0024                     ?_PROTOCOL_Initialize:	
  2404  0024                     ??_PROTOCOL_SET:	
  2405                           ; 1 bytes @ 0x4
  2406                           
  2407  0024                     ??___wmul:	
  2408                           ; 1 bytes @ 0x4
  2409                           
  2410  0024                     ??___lwdiv:	
  2411                           ; 1 bytes @ 0x4
  2412                           
  2413  0024                     PROTOCOL_Write_Device_Address@device_id_i2c:	
  2414                           ; 1 bytes @ 0x4
  2415                           
  2416  0024                     PROTOCOL_I2C_Set_TLV@status:	
  2417                           ; 1 bytes @ 0x4
  2418                           
  2419  0024                     PROTOCOL_Initialize@device_id:	
  2420                           ; 1 bytes @ 0x4
  2421                           
  2422  0024                     ___wmul@product:	
  2423                           ; 2 bytes @ 0x4
  2424                           
  2425                           
  2426                           ; 2 bytes @ 0x4
  2427  0024                     	ds	1
  2428  0025                     ??_strncmp:	
  2429  0025                     PROTOCOL_SET@value_:	
  2430                           ; 1 bytes @ 0x5
  2431                           
  2432  0025                     ___lwdiv@quotient:	
  2433                           ; 1 bytes @ 0x5
  2434                           
  2435                           
  2436                           ; 2 bytes @ 0x5
  2437  0025                     	ds	1
  2438  0026                     ?_atoi:	
  2439  0026                     PROTOCOL_Initialize@start_handler:	
  2440                           ; 2 bytes @ 0x6
  2441                           
  2442                           
  2443                           ; 1 bytes @ 0x6
  2444  0026                     	ds	1
  2445  0027                     PROTOCOL_Initialize@stop_handler:	
  2446  0027                     ___lwdiv@counter:	
  2447                           ; 1 bytes @ 0x7
  2448                           
  2449                           
  2450                           ; 1 bytes @ 0x7
  2451  0027                     	ds	1
  2452  0028                     ??_atoi:	
  2453  0028                     ?___lwmod:	
  2454                           ; 1 bytes @ 0x8
  2455                           
  2456  0028                     PROTOCOL_Initialize@set_handler:	
  2457                           ; 2 bytes @ 0x8
  2458                           
  2459  0028                     ___lwmod@divisor:	
  2460                           ; 2 bytes @ 0x8
  2461                           
  2462                           
  2463                           ; 2 bytes @ 0x8
  2464  0028                     	ds	2
  2465  002A                     PROTOCOL_Initialize@inv_handler:	
  2466  002A                     atoi@sign:	
  2467                           ; 1 bytes @ 0xA
  2468                           
  2469  002A                     ___lwmod@dividend:	
  2470                           ; 1 bytes @ 0xA
  2471                           
  2472                           
  2473                           ; 2 bytes @ 0xA
  2474  002A                     	ds	1
  2475  002B                     PROTOCOL_Initialize@scaler:	
  2476  002B                     atoi@a:	
  2477                           ; 1 bytes @ 0xB
  2478                           
  2479                           
  2480                           ; 2 bytes @ 0xB
  2481  002B                     	ds	1
  2482  002C                     ??_PROTOCOL_Initialize:	
  2483  002C                     ??___lwmod:	
  2484                           ; 1 bytes @ 0xC
  2485                           
  2486                           
  2487                           ; 1 bytes @ 0xC
  2488  002C                     	ds	1
  2489  002D                     atoi@s:	
  2490  002D                     ___lwmod@counter:	
  2491                           ; 1 bytes @ 0xD
  2492                           
  2493                           
  2494                           ; 1 bytes @ 0xD
  2495  002D                     	ds	1
  2496  002E                     ?_printf:	
  2497  002E                     printf@f:	
  2498                           ; 2 bytes @ 0xE
  2499                           
  2500                           
  2501                           ; 2 bytes @ 0xE
  2502  002E                     	ds	4
  2503  0032                     ??_printf:	
  2504                           
  2505                           ; 1 bytes @ 0x12
  2506  0032                     	ds	4
  2507  0036                     printf@prec:	
  2508                           
  2509                           ; 1 bytes @ 0x16
  2510  0036                     	ds	1
  2511  0037                     printf@cp:	
  2512                           
  2513                           ; 2 bytes @ 0x17
  2514  0037                     	ds	2
  2515  0039                     printf@ap:	
  2516                           
  2517                           ; 1 bytes @ 0x19
  2518  0039                     	ds	1
  2519  003A                     printf@val:	
  2520                           
  2521                           ; 2 bytes @ 0x1A
  2522  003A                     	ds	2
  2523  003C                     printf@len:	
  2524                           
  2525                           ; 2 bytes @ 0x1C
  2526  003C                     	ds	2
  2527  003E                     printf@flag:	
  2528                           
  2529                           ; 1 bytes @ 0x1E
  2530  003E                     	ds	1
  2531  003F                     printf@width:	
  2532                           
  2533                           ; 2 bytes @ 0x1F
  2534  003F                     	ds	2
  2535  0041                     printf@c:	
  2536                           
  2537                           ; 1 bytes @ 0x21
  2538  0041                     	ds	1
  2539  0042                     ?_PROTOCOL_I2C_Send_uint8_t:	
  2540  0042                     PROTOCOL_I2C_Send_uint8_t@pbuffer:	
  2541                           ; 1 bytes @ 0x22
  2542                           
  2543                           
  2544                           ; 1 bytes @ 0x22
  2545  0042                     	ds	1
  2546  0043                     ??_PROTOCOL_I2C_Send_uint8_t:	
  2547                           
  2548                           ; 1 bytes @ 0x23
  2549  0043                     	ds	3
  2550  0046                     PROTOCOL_I2C_Send_uint8_t@length:	
  2551                           
  2552                           ; 1 bytes @ 0x26
  2553  0046                     	ds	1
  2554  0047                     ??_loop_func:	
  2555                           
  2556                           ; 1 bytes @ 0x27
  2557  0047                     	ds	1
  2558  0048                     loop_func@out:	
  2559                           
  2560                           ; 2 bytes @ 0x28
  2561  0048                     	ds	2
  2562  004A                     loop_func@transition_detected:	
  2563                           
  2564                           ; 1 bytes @ 0x2A
  2565  004A                     	ds	1
  2566  004B                     loop_func@v:	
  2567                           
  2568                           ; 2 bytes @ 0x2B
  2569  004B                     	ds	2
  2570  004D                     loop_func@i:	
  2571                           
  2572                           ; 1 bytes @ 0x2D
  2573  004D                     	ds	1
  2574  004E                     ??_PROTOCOL_Loop:	
  2575                           
  2576                           ; 1 bytes @ 0x2E
  2577  004E                     	ds	2
  2578  0050                     PROTOCOL_Loop@c:	
  2579                           
  2580                           ; 1 bytes @ 0x30
  2581  0050                     	ds	1
  2582  0051                     PROTOCOL_Loop@device_address:	
  2583                           
  2584                           ; 1 bytes @ 0x31
  2585  0051                     	ds	1
  2586  0052                     ??_main:	
  2587                           
  2588                           	psect	maintext
  2589  0795                     __pmaintext:	
  2590                           ; 1 bytes @ 0x32
  2591 ;;
  2592 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2593 ;;
  2594 ;; *************** function _main *****************
  2595 ;; Defined at:
  2596 ;;		line 137 in file "main.c"
  2597 ;; Parameters:    Size  Location     Type
  2598 ;;		None
  2599 ;; Auto vars:     Size  Location     Type
  2600 ;;		None
  2601 ;; Return value:  Size  Location     Type
  2602 ;;                  1    wreg      void 
  2603 ;; Registers used:
  2604 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2605 ;; Tracked objects:
  2606 ;;		On entry : B1F/0
  2607 ;;		On exit  : 0/0
  2608 ;;		Unchanged: 0/0
  2609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2611 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2613 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2614 ;;Total ram usage:        0 bytes
  2615 ;; Hardware stack levels required when called:   11
  2616 ;; This function calls:
  2617 ;;		_ADC_Initialize
  2618 ;;		_EUSART_Initialize
  2619 ;;		_I2C_Initialize
  2620 ;;		_OSCILLATOR_Initialize
  2621 ;;		_PIN_MANAGER_Initialize
  2622 ;;		_PROTOCOL_Initialize
  2623 ;;		_PROTOCOL_Loop
  2624 ;;		_PROTOCOL_Set_Func
  2625 ;;		_TMR0_Initialize
  2626 ;;		_WDT_Initialize
  2627 ;;		_init
  2628 ;; This function is called by:
  2629 ;;		Startup code after reset
  2630 ;; This function uses a non-reentrant model
  2631 ;;
  2632                           
  2633                           
  2634                           ;psect for function _main
  2635  0795                     _main:	
  2636                           
  2637                           ;main.c: 139: init();
  2638                           
  2639                           ;incstack = 0
  2640                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2641  0795  318E  2623  3187   	fcall	_init
  2642                           
  2643                           ;main.c: 142: PROTOCOL_Initialize("MULTI_A1324LUA_T", (0), (0), set_handler, (0), 1);
  2644  0798  30D3               	movlw	low (STR_1| (0+32768))
  2645  0799  0020               	movlb	0	; select bank0
  2646  079A  00A4               	movwf	PROTOCOL_Initialize@device_id
  2647  079B  3083               	movlw	high (STR_1| (0+32768))
  2648  079C  00A5               	movwf	PROTOCOL_Initialize@device_id+1
  2649  079D  01A6               	clrf	PROTOCOL_Initialize@start_handler
  2650  079E  01A7               	clrf	PROTOCOL_Initialize@stop_handler
  2651  079F  30A1               	movlw	low _set_handler
  2652  07A0  00A8               	movwf	PROTOCOL_Initialize@set_handler
  2653  07A1  300F               	movlw	high _set_handler
  2654  07A2  00A9               	movwf	PROTOCOL_Initialize@set_handler+1
  2655  07A3  01AA               	clrf	PROTOCOL_Initialize@inv_handler
  2656  07A4  01AB               	clrf	PROTOCOL_Initialize@scaler
  2657  07A5  0AAB               	incf	PROTOCOL_Initialize@scaler,f
  2658  07A6  3186  267C  3187   	fcall	_PROTOCOL_Initialize
  2659                           
  2660                           ;main.c: 143: PROTOCOL_Set_Func(loop_func);
  2661  07A9  3057               	movlw	low _loop_func
  2662  07AA  0020               	movlb	0	; select bank0
  2663  07AB  00A0               	movwf	PROTOCOL_Set_Func@loop_func
  2664  07AC  3005               	movlw	high _loop_func
  2665  07AD  00A1               	movwf	PROTOCOL_Set_Func@loop_func+1
  2666  07AE  318D  2550  3187   	fcall	_PROTOCOL_Set_Func
  2667                           
  2668                           ;main.c: 146: PIN_MANAGER_Initialize();
  2669  07B1  318D  25F1  3187   	fcall	_PIN_MANAGER_Initialize
  2670                           
  2671                           ;main.c: 147: OSCILLATOR_Initialize();
  2672  07B4  318D  2517  3187   	fcall	_OSCILLATOR_Initialize
  2673                           
  2674                           ;main.c: 148: WDT_Initialize();
  2675  07B7  318D  2513  3187   	fcall	_WDT_Initialize
  2676                           
  2677                           ;main.c: 149: ADC_Initialize();
  2678  07BA  318D  252D  3187   	fcall	_ADC_Initialize
  2679                           
  2680                           ;main.c: 150: TMR0_Initialize();
  2681  07BD  318D  257E  3187   	fcall	_TMR0_Initialize
  2682                           
  2683                           ;main.c: 153: (INTCONbits.GIE = 1);
  2684  07C0  178B               	bsf	11,7	;volatile
  2685                           
  2686                           ;main.c: 154: (INTCONbits.PEIE = 1);
  2687  07C1  170B               	bsf	11,6	;volatile
  2688                           
  2689                           ;main.c: 157: EUSART_Initialize();
  2690  07C2  318E  2609  3187   	fcall	_EUSART_Initialize
  2691                           
  2692                           ;main.c: 160: I2C_Initialize();
  2693  07C5  318E  26ED  3187   	fcall	_I2C_Initialize
  2694                           
  2695                           ;main.c: 163: PROTOCOL_Loop();
  2696  07C8  3182  223D         	fcall	_PROTOCOL_Loop
  2697  07CA  3180  2830         	ljmp	start
  2698  07CC                     __end_of_main:	
  2699                           
  2700                           	psect	text1
  2701  0E23                     __ptext1:	
  2702 ;; *************** function _init *****************
  2703 ;; Defined at:
  2704 ;;		line 57 in file "main.c"
  2705 ;; Parameters:    Size  Location     Type
  2706 ;;		None
  2707 ;; Auto vars:     Size  Location     Type
  2708 ;;  i               1    1[BANK0 ] unsigned char 
  2709 ;; Return value:  Size  Location     Type
  2710 ;;                  1    wreg      void 
  2711 ;; Registers used:
  2712 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2713 ;; Tracked objects:
  2714 ;;		On entry : 0/0
  2715 ;;		On exit  : 0/0
  2716 ;;		Unchanged: 0/0
  2717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2719 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2720 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2721 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2722 ;;Total ram usage:        2 bytes
  2723 ;; Hardware stack levels used:    1
  2724 ;; Hardware stack levels required when called:    5
  2725 ;; This function calls:
  2726 ;;		Nothing
  2727 ;; This function is called by:
  2728 ;;		_main
  2729 ;; This function uses a non-reentrant model
  2730 ;;
  2731                           
  2732                           
  2733                           ;psect for function _init
  2734  0E23                     _init:	
  2735                           
  2736                           ;main.c: 58: uint8_t i;
  2737                           ;main.c: 59: for(i=0; i<4; i++) {
  2738                           
  2739                           ;incstack = 0
  2740                           ; Regs used in _init: [wreg+fsr1l+fsr1h+status,2+status,0]
  2741  0E23  0020               	movlb	0	; select bank0
  2742  0E24  01A1               	clrf	init@i
  2743  0E25                     L1:	
  2744  0E25  3004               	movlw	4
  2745  0E26  0221               	subwf	init@i,w
  2746  0E27  1803               	btfsc	3,0
  2747  0E28  0008               	return
  2748                           
  2749                           ;main.c: 60: position[i] = 0;
  2750  0E29  0821               	movf	init@i,w
  2751  0E2A  3EDE               	addlw	(low (_position| 0))& (0+255)
  2752  0E2B  0086               	movwf	6
  2753  0E2C  0187               	clrf	7
  2754  0E2D  0181               	clrf	1
  2755                           
  2756                           ;main.c: 61: count[i] = 0;
  2757  0E2E  0821               	movf	init@i,w
  2758  0E2F  3EB0               	addlw	(low (_count| 0))& (0+255)
  2759  0E30  0086               	movwf	6
  2760  0E31  0187               	clrf	7
  2761  0E32  0181               	clrf	1
  2762                           
  2763                           ;main.c: 62: analog_in_flags[i] = 0;
  2764  0E33  0821               	movf	init@i,w
  2765  0E34  3EB4               	addlw	(low (_analog_in_flags| 0))& (0+255)
  2766  0E35  0086               	movwf	6
  2767  0E36  0187               	clrf	7
  2768  0E37  0181               	clrf	1
  2769  0E38  3001               	movlw	1
  2770  0E39  00A0               	movwf	??_init
  2771  0E3A  0820               	movf	??_init,w
  2772  0E3B  07A1               	addwf	init@i,f
  2773  0E3C  2E25               	goto	L1
  2774  0E3D                     __end_of_init:	
  2775                           
  2776                           	psect	text2
  2777  0D13                     __ptext2:	
  2778 ;; *************** function _WDT_Initialize *****************
  2779 ;; Defined at:
  2780 ;;		line 88 in file "mcc_generated_files/mcc.c"
  2781 ;; Parameters:    Size  Location     Type
  2782 ;;		None
  2783 ;; Auto vars:     Size  Location     Type
  2784 ;;		None
  2785 ;; Return value:  Size  Location     Type
  2786 ;;                  1    wreg      void 
  2787 ;; Registers used:
  2788 ;;		wreg
  2789 ;; Tracked objects:
  2790 ;;		On entry : 0/0
  2791 ;;		On exit  : 0/0
  2792 ;;		Unchanged: 0/0
  2793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2795 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2797 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2798 ;;Total ram usage:        0 bytes
  2799 ;; Hardware stack levels used:    1
  2800 ;; Hardware stack levels required when called:    5
  2801 ;; This function calls:
  2802 ;;		Nothing
  2803 ;; This function is called by:
  2804 ;;		_main
  2805 ;;		_SYSTEM_Initialize
  2806 ;; This function uses a non-reentrant model
  2807 ;;
  2808                           
  2809                           
  2810                           ;psect for function _WDT_Initialize
  2811  0D13                     _WDT_Initialize:	
  2812                           
  2813                           ;mcc.c: 91: WDTCON = 0x16;
  2814                           
  2815                           ;incstack = 0
  2816                           ; Regs used in _WDT_Initialize: [wreg]
  2817  0D13  3016               	movlw	22
  2818  0D14  0021               	movlb	1	; select bank1
  2819  0D15  0097               	movwf	23	;volatile
  2820  0D16  0008               	return
  2821  0D17                     __end_of_WDT_Initialize:	
  2822                           
  2823                           	psect	text3
  2824  0D7E                     __ptext3:	
  2825 ;; *************** function _TMR0_Initialize *****************
  2826 ;; Defined at:
  2827 ;;		line 62 in file "mcc_generated_files/tmr0.c"
  2828 ;; Parameters:    Size  Location     Type
  2829 ;;		None
  2830 ;; Auto vars:     Size  Location     Type
  2831 ;;		None
  2832 ;; Return value:  Size  Location     Type
  2833 ;;                  1    wreg      void 
  2834 ;; Registers used:
  2835 ;;		wreg, status,2
  2836 ;; Tracked objects:
  2837 ;;		On entry : 0/0
  2838 ;;		On exit  : 0/0
  2839 ;;		Unchanged: 0/0
  2840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2842 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2843 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2844 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2845 ;;Total ram usage:        1 bytes
  2846 ;; Hardware stack levels used:    1
  2847 ;; Hardware stack levels required when called:    5
  2848 ;; This function calls:
  2849 ;;		Nothing
  2850 ;; This function is called by:
  2851 ;;		_main
  2852 ;;		_SYSTEM_Initialize
  2853 ;; This function uses a non-reentrant model
  2854 ;;
  2855                           
  2856                           
  2857                           ;psect for function _TMR0_Initialize
  2858  0D7E                     _TMR0_Initialize:	
  2859                           
  2860                           ;tmr0.c: 67: OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | 0xD4 & 0x3F);
  2861                           
  2862                           ;incstack = 0
  2863                           ; Regs used in _TMR0_Initialize: [wreg+status,2]
  2864  0D7E  0021               	movlb	1	; select bank1
  2865  0D7F  0815               	movf	21,w	;volatile
  2866  0D80  39C0               	andlw	192
  2867  0D81  3814               	iorlw	20
  2868  0D82  0095               	movwf	21	;volatile
  2869                           
  2870                           ;tmr0.c: 70: TMR0 = 0x06;
  2871  0D83  3006               	movlw	6
  2872  0D84  0020               	movlb	0	; select bank0
  2873  0D85  0095               	movwf	21	;volatile
  2874                           
  2875                           ;tmr0.c: 73: timer0ReloadVal= 6;
  2876  0D86  3006               	movlw	6
  2877  0D87  00A0               	movwf	??_TMR0_Initialize
  2878  0D88  0820               	movf	??_TMR0_Initialize,w
  2879  0D89  00EA               	movwf	_timer0ReloadVal	;volatile
  2880                           
  2881                           ;tmr0.c: 76: INTCONbits.TMR0IF = 0;
  2882  0D8A  110B               	bcf	11,2	;volatile
  2883  0D8B  0008               	return
  2884  0D8C                     __end_of_TMR0_Initialize:	
  2885                           
  2886                           	psect	text4
  2887  0D50                     __ptext4:	
  2888 ;; *************** function _PROTOCOL_Set_Func *****************
  2889 ;; Defined at:
  2890 ;;		line 83 in file "protocol.c"
  2891 ;; Parameters:    Size  Location     Type
  2892 ;;  loop_func       2    0[BANK0 ] PTR void 
  2893 ;;		 -> loop_func(1), 
  2894 ;; Auto vars:     Size  Location     Type
  2895 ;;		None
  2896 ;; Return value:  Size  Location     Type
  2897 ;;                  1    wreg      void 
  2898 ;; Registers used:
  2899 ;;		wreg
  2900 ;; Tracked objects:
  2901 ;;		On entry : 0/0
  2902 ;;		On exit  : 0/0
  2903 ;;		Unchanged: 0/0
  2904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2905 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2906 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2908 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2909 ;;Total ram usage:        2 bytes
  2910 ;; Hardware stack levels used:    1
  2911 ;; Hardware stack levels required when called:    5
  2912 ;; This function calls:
  2913 ;;		Nothing
  2914 ;; This function is called by:
  2915 ;;		_main
  2916 ;; This function uses a non-reentrant model
  2917 ;;
  2918                           
  2919                           
  2920                           ;psect for function _PROTOCOL_Set_Func
  2921  0D50                     _PROTOCOL_Set_Func:	
  2922                           
  2923                           ;protocol.c: 84: PROTOCOL_Loop_Func = loop_func;
  2924                           
  2925                           ;incstack = 0
  2926                           ; Regs used in _PROTOCOL_Set_Func: [wreg]
  2927  0D50  0020               	movlb	0	; select bank0
  2928  0D51  0821               	movf	PROTOCOL_Set_Func@loop_func+1,w
  2929  0D52  0021               	movlb	1	; select bank1
  2930  0D53  00C3               	movwf	(_PROTOCOL_Loop_Func+1)^(0+128)
  2931  0D54  0020               	movlb	0	; select bank0
  2932  0D55  0820               	movf	PROTOCOL_Set_Func@loop_func,w
  2933  0D56  0021               	movlb	1	; select bank1
  2934  0D57  00C2               	movwf	_PROTOCOL_Loop_Func^(0+128)
  2935  0D58  0008               	return
  2936  0D59                     __end_of_PROTOCOL_Set_Func:	
  2937                           
  2938                           	psect	text5
  2939  023D                     __ptext5:	
  2940 ;; *************** function _PROTOCOL_Loop *****************
  2941 ;; Defined at:
  2942 ;;		line 142 in file "protocol.c"
  2943 ;; Parameters:    Size  Location     Type
  2944 ;;		None
  2945 ;; Auto vars:     Size  Location     Type
  2946 ;;  device_addre    1   49[BANK0 ] unsigned char 
  2947 ;;  c               1   48[BANK0 ] unsigned char 
  2948 ;; Return value:  Size  Location     Type
  2949 ;;                  1    wreg      void 
  2950 ;; Registers used:
  2951 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2952 ;; Tracked objects:
  2953 ;;		On entry : 0/0
  2954 ;;		On exit  : 0/0
  2955 ;;		Unchanged: 0/0
  2956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2958 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2959 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2960 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2961 ;;Total ram usage:        4 bytes
  2962 ;; Hardware stack levels used:    1
  2963 ;; Hardware stack levels required when called:   10
  2964 ;; This function calls:
  2965 ;;		Absolute function
  2966 ;;		_EUSART_Read
  2967 ;;		_PROTOCOL_EXT
  2968 ;;		_PROTOCOL_Read_Device_Address
  2969 ;;		_PROTOCOL_SAV
  2970 ;;		_PROTOCOL_SET
  2971 ;;		_PROTOCOL_STA
  2972 ;;		_PROTOCOL_STP
  2973 ;;		_PROTOCOL_Write_Device_Address
  2974 ;;		_TMR0_HasOverflowOccured
  2975 ;;		_atoi
  2976 ;;		_loop_func
  2977 ;;		_printf
  2978 ;;		_strncmp
  2979 ;; This function is called by:
  2980 ;;		_main
  2981 ;; This function uses a non-reentrant model
  2982 ;;
  2983                           
  2984                           
  2985                           ;psect for function _PROTOCOL_Loop
  2986  023D                     _PROTOCOL_Loop:	
  2987  023D                     l522:	
  2988                           ;incstack = 0
  2989                           ; Regs used in _PROTOCOL_Loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2990                           ;protocol.c: 143: uint8_t device_address;
  2991                           ;protocol.c: 144: uint8_t c;
  2992                           ;protocol.c: 145: while (1) {
  2993                           
  2994                           
  2995                           ;protocol.c: 146: tmr_overflow = TMR0_HasOverflowOccured();
  2996  023D  318D  250F  3182   	fcall	_TMR0_HasOverflowOccured
  2997  0240  0020               	movlb	0	; select bank0
  2998  0241  00CE               	movwf	??_PROTOCOL_Loop
  2999  0242  084E               	movf	??_PROTOCOL_Loop,w
  3000  0243  00DC               	movwf	_tmr_overflow
  3001                           
  3002                           ;protocol.c: 147: if (tmr_overflow) {
  3003  0244  085C               	movf	_tmr_overflow,w
  3004  0245  1903               	btfsc	3,2
  3005  0246  2A65               	goto	l4407
  3006                           
  3007                           ;protocol.c: 148: TMR0IF = 0;
  3008  0247  110B               	bcf	11,2	;volatile
  3009                           
  3010                           ;protocol.c: 150: if (PROTOCOL_Inv_Handler && (++tmr_cnt >= value)) {
  3011  0248  0021               	movlb	1	; select bank1
  3012  0249  083E               	movf	_PROTOCOL_Inv_Handler^(0+128),w
  3013  024A  043F               	iorwf	(_PROTOCOL_Inv_Handler+1)^(0+128),w
  3014  024B  1903               	btfsc	3,2
  3015  024C  2A65               	goto	l4407
  3016  024D  3001               	movlw	1
  3017  024E  0020               	movlb	0	; select bank0
  3018  024F  00CE               	movwf	??_PROTOCOL_Loop
  3019  0250  084E               	movf	??_PROTOCOL_Loop,w
  3020  0251  07DD               	addwf	_tmr_cnt,f
  3021  0252  0862               	movf	_value,w
  3022  0253  025D               	subwf	_tmr_cnt,w
  3023  0254  1C03               	skipc
  3024  0255  2A65               	goto	l4407
  3025                           
  3026                           ;protocol.c: 151: tmr_cnt = 0;
  3027  0256  01DD               	clrf	_tmr_cnt
  3028                           
  3029                           ;protocol.c: 152: if (++sec_cnt >= tmr_scaler) {
  3030  0257  3001               	movlw	1
  3031  0258  00CE               	movwf	??_PROTOCOL_Loop
  3032  0259  084E               	movf	??_PROTOCOL_Loop,w
  3033  025A  07DE               	addwf	_sec_cnt,f
  3034  025B  086B               	movf	_tmr_scaler,w
  3035  025C  025E               	subwf	_sec_cnt,w
  3036  025D  1C03               	skipc
  3037  025E  2A65               	goto	l4407
  3038                           
  3039                           ;protocol.c: 153: if (running) invoked = 1;
  3040  025F  0860               	movf	_running,w
  3041  0260  1903               	btfsc	3,2
  3042  0261  2A64               	goto	l4405
  3043  0262  01DF               	clrf	_invoked
  3044  0263  0ADF               	incf	_invoked,f
  3045  0264                     l4405:	
  3046                           
  3047                           ;protocol.c: 154: sec_cnt = 0;
  3048  0264  01DE               	clrf	_sec_cnt
  3049  0265                     l4407:	
  3050                           
  3051                           ;protocol.c: 155: }
  3052                           ;protocol.c: 156: }
  3053                           ;protocol.c: 157: }
  3054                           ;protocol.c: 158: if (invoked && PROTOCOL_Inv_Handler) {
  3055  0265  0020               	movlb	0	; select bank0
  3056  0266  085F               	movf	_invoked,w
  3057  0267  1903               	btfsc	3,2
  3058  0268  2A70               	goto	l4413
  3059                           
  3060                           ;protocol.c: 159: PROTOCOL_Inv_Handler();
  3061  0269  0021               	movlb	1	; select bank1
  3062  026A  083E               	movf	_PROTOCOL_Inv_Handler^(0+128),w
  3063  026B  043F               	iorwf	(_PROTOCOL_Inv_Handler+1)^(0+128),w
  3064  026C  1903               	btfsc	3,2
  3065  026D  2A70               	goto	l4413
  3066                           
  3067                           ;protocol.c: 160: invoked = 0;
  3068  026E  0020               	movlb	0	; select bank0
  3069  026F  01DF               	clrf	_invoked
  3070  0270                     l4413:	
  3071                           
  3072                           ;protocol.c: 161: }
  3073                           ;protocol.c: 162: if (PROTOCOL_Loop_Func) PROTOCOL_Loop_Func();
  3074  0270  0021               	movlb	1	; select bank1
  3075  0271  0842               	movf	_PROTOCOL_Loop_Func^(0+128),w
  3076  0272  0443               	iorwf	(_PROTOCOL_Loop_Func+1)^(0+128),w
  3077  0273  1903               	btfsc	3,2
  3078  0274  2A7A               	goto	l4417
  3079  0275  0843               	movf	(_PROTOCOL_Loop_Func+1)^(0+128),w
  3080  0276  008A               	movwf	10
  3081  0277  0842               	movf	_PROTOCOL_Loop_Func^(0+128),w
  3082  0278  000A               	callw
  3083  0279  3182               	pagesel	$
  3084  027A                     l4417:	
  3085                           
  3086                           ;protocol.c: 163: if ((eusartRxCount)) {
  3087  027A  0020               	movlb	0	; select bank0
  3088  027B  0865               	movf	_eusartRxCount,w	;volatile
  3089  027C  1903               	btfsc	3,2
  3090  027D  2A3D               	goto	l522
  3091                           
  3092                           ;protocol.c: 164: c = EUSART_Read();
  3093  027E  318E  26AE  3182   	fcall	_EUSART_Read
  3094  0281  0020               	movlb	0	; select bank0
  3095  0282  00CE               	movwf	??_PROTOCOL_Loop
  3096  0283  084E               	movf	??_PROTOCOL_Loop,w
  3097  0284  00D0               	movwf	PROTOCOL_Loop@c
  3098                           
  3099                           ;protocol.c: 165: buf[cnt++] = c;
  3100  0285  0850               	movf	PROTOCOL_Loop@c,w
  3101  0286  00CE               	movwf	??_PROTOCOL_Loop
  3102  0287  0863               	movf	_cnt,w
  3103  0288  3E20               	addlw	(low (_buf| (0+256)))& (0+255)
  3104  0289  0086               	movwf	6
  3105  028A  3001               	movlw	1	; select bank2/3
  3106  028B  0087               	movwf	7
  3107  028C  084E               	movf	??_PROTOCOL_Loop,w
  3108  028D  0081               	movwf	1
  3109  028E  3001               	movlw	1
  3110  028F  00CE               	movwf	??_PROTOCOL_Loop
  3111  0290  084E               	movf	??_PROTOCOL_Loop,w
  3112  0291  07E3               	addwf	_cnt,f
  3113                           
  3114                           ;protocol.c: 166: if (c == '\n') {
  3115  0292  300A               	movlw	10
  3116  0293  0650               	xorwf	PROTOCOL_Loop@c,w
  3117  0294  1D03               	btfss	3,2
  3118  0295  2A3D               	goto	l522
  3119                           
  3120                           ;protocol.c: 167: buf[--cnt] = '\0';
  3121  0296  3001               	movlw	1
  3122  0297  02E3               	subwf	_cnt,f
  3123  0298  0863               	movf	_cnt,w
  3124  0299  3E20               	addlw	(low (_buf| (0+256)))& (0+255)
  3125  029A  0086               	movwf	6
  3126  029B  3001               	movlw	1	; select bank2/3
  3127  029C  0087               	movwf	7
  3128  029D  0181               	clrf	1
  3129                           
  3130                           ;protocol.c: 168: cnt = 0;
  3131  029E  01E3               	clrf	_cnt
  3132                           
  3133                           ;protocol.c: 169: printf("#%s\n", buf);
  3134  029F  305E               	movlw	low (STR_3| (0+32768))
  3135  02A0  00AE               	movwf	printf@f
  3136  02A1  3084               	movlw	high (STR_3| (0+32768))
  3137  02A2  00AF               	movwf	printf@f+1
  3138  02A3  3020               	movlw	low _buf
  3139  02A4  00B0               	movwf	low ((?_printf| 0+2))
  3140  02A5  3001               	movlw	high _buf
  3141  02A6  00B1               	movwf	(low ((?_printf| 0+2))+1)
  3142  02A7  3180  2068  3182   	fcall	_printf
  3143                           
  3144                           ;protocol.c: 170: if (BACKPLANE_SLAVE_ADDRESS != 0x01) {
  3145  02AA  0020               	movlb	0	; select bank0
  3146  02AB  036E               	decf	_BACKPLANE_SLAVE_ADDRESS,w
  3147  02AC  1903               	btfsc	3,2
  3148  02AD  2AB3               	goto	l4437
  3149                           
  3150                           ;protocol.c: 171: PROTOCOL_EXT(buf);
  3151  02AE  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3152  02AF  3180  2002  3182   	fcall	_PROTOCOL_EXT
  3153                           
  3154                           ;protocol.c: 172: } else if (!strncmp(("WHO"), (buf), 3)) {
  3155  02B2  2A3D               	goto	l522
  3156  02B3                     l4437:	
  3157  02B3  307F               	movlw	low (STR_4| (0+32768))
  3158  02B4  0020               	movlb	0	; select bank0
  3159  02B5  00A0               	movwf	strncmp@s1
  3160  02B6  3084               	movlw	high (STR_4| (0+32768))
  3161  02B7  00A1               	movwf	strncmp@s1+1
  3162  02B8  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3163  02B9  00CE               	movwf	??_PROTOCOL_Loop
  3164  02BA  084E               	movf	??_PROTOCOL_Loop,w
  3165  02BB  00A2               	movwf	strncmp@s2
  3166  02BC  3003               	movlw	3
  3167  02BD  00A3               	movwf	strncmp@len
  3168  02BE  3000               	movlw	0
  3169  02BF  00A4               	movwf	strncmp@len+1
  3170  02C0  3187  2717  3182   	fcall	_strncmp
  3171  02C3  0020               	movlb	0	; select bank0
  3172  02C4  0820               	movf	?_strncmp,w
  3173  02C5  0421               	iorwf	?_strncmp+1,w
  3174  02C6  1D03               	btfss	3,2
  3175  02C7  2AD8               	goto	l4441
  3176                           
  3177                           ;protocol.c: 173: printf("$:WHO:%s\n", device_id_);
  3178  02C8  3010               	movlw	low (STR_5| (0+32768))
  3179  02C9  00AE               	movwf	printf@f
  3180  02CA  3084               	movlw	high (STR_5| (0+32768))
  3181  02CB  00AF               	movwf	printf@f+1
  3182  02CC  0021               	movlb	1	; select bank1
  3183  02CD  083B               	movf	(_device_id_+1)^(0+128),w
  3184  02CE  0020               	movlb	0	; select bank0
  3185  02CF  00B1               	movwf	(low ((?_printf| 0+2))+1)
  3186  02D0  0021               	movlb	1	; select bank1
  3187  02D1  083A               	movf	_device_id_^(0+128),w
  3188  02D2  0020               	movlb	0	; select bank0
  3189  02D3  00B0               	movwf	low ((?_printf| 0+2))
  3190  02D4  3180  2068  3182   	fcall	_printf
  3191                           
  3192                           ;protocol.c: 174: } else if (!strncmp(("SAV"), (buf), 3)) {
  3193  02D7  2A3D               	goto	l522
  3194  02D8                     l4441:	
  3195  02D8  308F               	movlw	low (STR_6| (0+32768))
  3196  02D9  0020               	movlb	0	; select bank0
  3197  02DA  00A0               	movwf	strncmp@s1
  3198  02DB  3084               	movlw	high (STR_6| (0+32768))
  3199  02DC  00A1               	movwf	strncmp@s1+1
  3200  02DD  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3201  02DE  00CE               	movwf	??_PROTOCOL_Loop
  3202  02DF  084E               	movf	??_PROTOCOL_Loop,w
  3203  02E0  00A2               	movwf	strncmp@s2
  3204  02E1  3003               	movlw	3
  3205  02E2  00A3               	movwf	strncmp@len
  3206  02E3  3000               	movlw	0
  3207  02E4  00A4               	movwf	strncmp@len+1
  3208  02E5  3187  2717  3182   	fcall	_strncmp
  3209  02E8  0020               	movlb	0	; select bank0
  3210  02E9  0820               	movf	?_strncmp,w
  3211  02EA  0421               	iorwf	?_strncmp+1,w
  3212  02EB  1D03               	btfss	3,2
  3213  02EC  2AF1               	goto	l4445
  3214                           
  3215                           ;protocol.c: 175: PROTOCOL_SAV();
  3216  02ED  318D  253E  3182   	fcall	_PROTOCOL_SAV
  3217                           
  3218                           ;protocol.c: 176: } else if (!strncmp(("STA"), (buf), 3)) {
  3219  02F0  2A3D               	goto	l522
  3220  02F1                     l4445:	
  3221  02F1  3077               	movlw	low (STR_7| (0+32768))
  3222  02F2  0020               	movlb	0	; select bank0
  3223  02F3  00A0               	movwf	strncmp@s1
  3224  02F4  3084               	movlw	high (STR_7| (0+32768))
  3225  02F5  00A1               	movwf	strncmp@s1+1
  3226  02F6  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3227  02F7  00CE               	movwf	??_PROTOCOL_Loop
  3228  02F8  084E               	movf	??_PROTOCOL_Loop,w
  3229  02F9  00A2               	movwf	strncmp@s2
  3230  02FA  3003               	movlw	3
  3231  02FB  00A3               	movwf	strncmp@len
  3232  02FC  3000               	movlw	0
  3233  02FD  00A4               	movwf	strncmp@len+1
  3234  02FE  3187  2717  3182   	fcall	_strncmp
  3235  0301  0020               	movlb	0	; select bank0
  3236  0302  0820               	movf	?_strncmp,w
  3237  0303  0421               	iorwf	?_strncmp+1,w
  3238  0304  1D03               	btfss	3,2
  3239  0305  2B0A               	goto	l4449
  3240                           
  3241                           ;protocol.c: 177: PROTOCOL_STA();
  3242  0306  318D  250B  3182   	fcall	_PROTOCOL_STA
  3243                           
  3244                           ;protocol.c: 178: } else if (!strncmp(("STP"), (buf), 3)) {
  3245  0309  2A3D               	goto	l522
  3246  030A                     l4449:	
  3247  030A  3083               	movlw	low (STR_8| (0+32768))
  3248  030B  0020               	movlb	0	; select bank0
  3249  030C  00A0               	movwf	strncmp@s1
  3250  030D  3084               	movlw	high (STR_8| (0+32768))
  3251  030E  00A1               	movwf	strncmp@s1+1
  3252  030F  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3253  0310  00CE               	movwf	??_PROTOCOL_Loop
  3254  0311  084E               	movf	??_PROTOCOL_Loop,w
  3255  0312  00A2               	movwf	strncmp@s2
  3256  0313  3003               	movlw	3
  3257  0314  00A3               	movwf	strncmp@len
  3258  0315  3000               	movlw	0
  3259  0316  00A4               	movwf	strncmp@len+1
  3260  0317  3187  2717  3182   	fcall	_strncmp
  3261  031A  0020               	movlb	0	; select bank0
  3262  031B  0820               	movf	?_strncmp,w
  3263  031C  0421               	iorwf	?_strncmp+1,w
  3264  031D  1D03               	btfss	3,2
  3265  031E  2B2F               	goto	l4455
  3266                           
  3267                           ;protocol.c: 179: PROTOCOL_STP();
  3268  031F  318C  24F9  3182   	fcall	_PROTOCOL_STP
  3269                           
  3270                           ;protocol.c: 180: printf("*:STP:%s\n", "ACK");
  3271  0322  301A               	movlw	low (STR_9| (0+32768))
  3272  0323  0020               	movlb	0	; select bank0
  3273  0324  00AE               	movwf	printf@f
  3274  0325  3084               	movlw	high (STR_9| (0+32768))
  3275  0326  00AF               	movwf	printf@f+1
  3276  0327  307B               	movlw	low (STR_10| (0+32768))
  3277  0328  00B0               	movwf	low ((?_printf| 0+2))
  3278  0329  3084               	movlw	high (STR_10| (0+32768))
  3279  032A  00B1               	movwf	(low ((?_printf| 0+2))+1)
  3280  032B  3180  2068  3182   	fcall	_printf
  3281                           
  3282                           ;protocol.c: 181: } else if (!strncmp(("SET"), (buf), 3)) {
  3283  032E  2A3D               	goto	l522
  3284  032F                     l4455:	
  3285  032F  308B               	movlw	low (STR_11| (0+32768))
  3286  0330  0020               	movlb	0	; select bank0
  3287  0331  00A0               	movwf	strncmp@s1
  3288  0332  3084               	movlw	high (STR_11| (0+32768))
  3289  0333  00A1               	movwf	strncmp@s1+1
  3290  0334  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3291  0335  00CE               	movwf	??_PROTOCOL_Loop
  3292  0336  084E               	movf	??_PROTOCOL_Loop,w
  3293  0337  00A2               	movwf	strncmp@s2
  3294  0338  3003               	movlw	3
  3295  0339  00A3               	movwf	strncmp@len
  3296  033A  3000               	movlw	0
  3297  033B  00A4               	movwf	strncmp@len+1
  3298  033C  3187  2717  3182   	fcall	_strncmp
  3299  033F  0020               	movlb	0	; select bank0
  3300  0340  0820               	movf	?_strncmp,w
  3301  0341  0421               	iorwf	?_strncmp+1,w
  3302  0342  1D03               	btfss	3,2
  3303  0343  2B4E               	goto	l4459
  3304                           
  3305                           ;protocol.c: 182: PROTOCOL_SET(atoi(&buf[4]));
  3306  0344  3024               	movlw	(low ((_buf| (0+256)+4)))& (0+255)
  3307  0345  3186  260B  3182   	fcall	_atoi
  3308  0348  0020               	movlb	0	; select bank0
  3309  0349  0826               	movf	?_atoi,w
  3310  034A  318D  25DD  3182   	fcall	_PROTOCOL_SET
  3311                           
  3312                           ;protocol.c: 183: } else if (!strncmp(("GET"), (buf), 3)) {
  3313  034D  2A3D               	goto	l522
  3314  034E                     l4459:	
  3315  034E  3087               	movlw	low (STR_12| (0+32768))
  3316  034F  0020               	movlb	0	; select bank0
  3317  0350  00A0               	movwf	strncmp@s1
  3318  0351  3084               	movlw	high (STR_12| (0+32768))
  3319  0352  00A1               	movwf	strncmp@s1+1
  3320  0353  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3321  0354  00CE               	movwf	??_PROTOCOL_Loop
  3322  0355  084E               	movf	??_PROTOCOL_Loop,w
  3323  0356  00A2               	movwf	strncmp@s2
  3324  0357  3003               	movlw	3
  3325  0358  00A3               	movwf	strncmp@len
  3326  0359  3000               	movlw	0
  3327  035A  00A4               	movwf	strncmp@len+1
  3328  035B  3187  2717  3182   	fcall	_strncmp
  3329  035E  0020               	movlb	0	; select bank0
  3330  035F  0820               	movf	?_strncmp,w
  3331  0360  0421               	iorwf	?_strncmp+1,w
  3332  0361  1D03               	btfss	3,2
  3333  0362  2B72               	goto	l4463
  3334                           
  3335                           ;protocol.c: 184: printf("$:GET:%d\n", value);
  3336  0363  30FC               	movlw	low (STR_13| (0+32768))
  3337  0364  00AE               	movwf	printf@f
  3338  0365  3083               	movlw	high (STR_13| (0+32768))
  3339  0366  00AF               	movwf	printf@f+1
  3340  0367  0862               	movf	_value,w
  3341  0368  00CE               	movwf	??_PROTOCOL_Loop
  3342  0369  01CF               	clrf	??_PROTOCOL_Loop+1
  3343  036A  084E               	movf	??_PROTOCOL_Loop,w
  3344  036B  00B0               	movwf	?_printf+2
  3345  036C  084F               	movf	??_PROTOCOL_Loop+1,w
  3346  036D  00B1               	movwf	?_printf+3
  3347  036E  3180  2068  3182   	fcall	_printf
  3348                           
  3349                           ;protocol.c: 185: } else if (!strncmp(("WDA"), (buf), 3)) {
  3350  0371  2A3D               	goto	l522
  3351  0372                     l4463:	
  3352  0372  3073               	movlw	low (STR_14| (0+32768))
  3353  0373  0020               	movlb	0	; select bank0
  3354  0374  00A0               	movwf	strncmp@s1
  3355  0375  3084               	movlw	high (STR_14| (0+32768))
  3356  0376  00A1               	movwf	strncmp@s1+1
  3357  0377  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3358  0378  00CE               	movwf	??_PROTOCOL_Loop
  3359  0379  084E               	movf	??_PROTOCOL_Loop,w
  3360  037A  00A2               	movwf	strncmp@s2
  3361  037B  3003               	movlw	3
  3362  037C  00A3               	movwf	strncmp@len
  3363  037D  3000               	movlw	0
  3364  037E  00A4               	movwf	strncmp@len+1
  3365  037F  3187  2717  3182   	fcall	_strncmp
  3366  0382  0020               	movlb	0	; select bank0
  3367  0383  0820               	movf	?_strncmp,w
  3368  0384  0421               	iorwf	?_strncmp+1,w
  3369  0385  1D03               	btfss	3,2
  3370  0386  2B95               	goto	l4469
  3371                           
  3372                           ;protocol.c: 186: device_address = atoi(&buf[4]);
  3373  0387  3024               	movlw	(low ((_buf| (0+256)+4)))& (0+255)
  3374  0388  3186  260B  3182   	fcall	_atoi
  3375  038B  0020               	movlb	0	; select bank0
  3376  038C  0826               	movf	?_atoi,w
  3377  038D  00CE               	movwf	??_PROTOCOL_Loop
  3378  038E  084E               	movf	??_PROTOCOL_Loop,w
  3379  038F  00D1               	movwf	PROTOCOL_Loop@device_address
  3380                           
  3381                           ;protocol.c: 187: PROTOCOL_Write_Device_Address(device_address);
  3382  0390  0851               	movf	PROTOCOL_Loop@device_address,w
  3383  0391  318D  258C  3182   	fcall	_PROTOCOL_Write_Device_Address
  3384                           
  3385                           ;protocol.c: 188: } else if (!strncmp(("RDA"), (buf), 3)) {
  3386  0394  2A3D               	goto	l522
  3387  0395                     l4469:	
  3388  0395  306F               	movlw	low (STR_15| (0+32768))
  3389  0396  0020               	movlb	0	; select bank0
  3390  0397  00A0               	movwf	strncmp@s1
  3391  0398  3084               	movlw	high (STR_15| (0+32768))
  3392  0399  00A1               	movwf	strncmp@s1+1
  3393  039A  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3394  039B  00CE               	movwf	??_PROTOCOL_Loop
  3395  039C  084E               	movf	??_PROTOCOL_Loop,w
  3396  039D  00A2               	movwf	strncmp@s2
  3397  039E  3003               	movlw	3
  3398  039F  00A3               	movwf	strncmp@len
  3399  03A0  3000               	movlw	0
  3400  03A1  00A4               	movwf	strncmp@len+1
  3401  03A2  3187  2717  3182   	fcall	_strncmp
  3402  03A5  0020               	movlb	0	; select bank0
  3403  03A6  0820               	movf	?_strncmp,w
  3404  03A7  0421               	iorwf	?_strncmp+1,w
  3405  03A8  1D03               	btfss	3,2
  3406  03A9  2BC0               	goto	l4475
  3407                           
  3408                           ;protocol.c: 189: device_address = PROTOCOL_Read_Device_Address();
  3409  03AA  318C  24F6  3182   	fcall	_PROTOCOL_Read_Device_Address
  3410  03AD  0020               	movlb	0	; select bank0
  3411  03AE  00CE               	movwf	??_PROTOCOL_Loop
  3412  03AF  084E               	movf	??_PROTOCOL_Loop,w
  3413  03B0  00D1               	movwf	PROTOCOL_Loop@device_address
  3414                           
  3415                           ;protocol.c: 190: printf("$:RDA:%d\n", device_address);
  3416  03B1  30F2               	movlw	low (STR_16| (0+32768))
  3417  03B2  00AE               	movwf	printf@f
  3418  03B3  3083               	movlw	high (STR_16| (0+32768))
  3419  03B4  00AF               	movwf	printf@f+1
  3420  03B5  0851               	movf	PROTOCOL_Loop@device_address,w
  3421  03B6  00CE               	movwf	??_PROTOCOL_Loop
  3422  03B7  01CF               	clrf	??_PROTOCOL_Loop+1
  3423  03B8  084E               	movf	??_PROTOCOL_Loop,w
  3424  03B9  00B0               	movwf	?_printf+2
  3425  03BA  084F               	movf	??_PROTOCOL_Loop+1,w
  3426  03BB  00B1               	movwf	?_printf+3
  3427  03BC  3180  2068  3182   	fcall	_printf
  3428                           
  3429                           ;protocol.c: 191: } else {
  3430  03BF  2A3D               	goto	l522
  3431  03C0                     l4475:	
  3432                           
  3433                           ;protocol.c: 192: PROTOCOL_EXT(buf);
  3434  03C0  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3435  03C1  3180  2002  3182   	fcall	_PROTOCOL_EXT
  3436  03C4  2A3D               	goto	l522
  3437  03C5                     __end_of_PROTOCOL_Loop:	
  3438                           
  3439                           	psect	text6
  3440  0717                     __ptext6:	
  3441 ;; *************** function _strncmp *****************
  3442 ;; Defined at:
  3443 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strncmp.c"
  3444 ;; Parameters:    Size  Location     Type
  3445 ;;  s1              2    0[BANK0 ] PTR const unsigned char 
  3446 ;;		 -> STR_15(4), STR_14(4), STR_12(4), STR_11(4), 
  3447 ;;		 -> STR_8(4), STR_7(4), STR_6(4), STR_4(4), 
  3448 ;;  s2              1    2[BANK0 ] PTR const unsigned char 
  3449 ;;		 -> buf(48), 
  3450 ;;  len             2    3[BANK0 ] unsigned int 
  3451 ;; Auto vars:     Size  Location     Type
  3452 ;;		None
  3453 ;; Return value:  Size  Location     Type
  3454 ;;                  2    0[BANK0 ] int 
  3455 ;; Registers used:
  3456 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  3457 ;; Tracked objects:
  3458 ;;		On entry : 0/0
  3459 ;;		On exit  : 0/0
  3460 ;;		Unchanged: 0/0
  3461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3462 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3463 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3464 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3465 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3466 ;;Total ram usage:        7 bytes
  3467 ;; Hardware stack levels used:    1
  3468 ;; Hardware stack levels required when called:    5
  3469 ;; This function calls:
  3470 ;;		Nothing
  3471 ;; This function is called by:
  3472 ;;		_PROTOCOL_Loop
  3473 ;; This function uses a non-reentrant model
  3474 ;;
  3475                           
  3476                           
  3477                           ;psect for function _strncmp
  3478  0717                     _strncmp:	
  3479  0717                     l2887:	
  3480                           ;incstack = 0
  3481                           ; Regs used in _strncmp: [wreg-fsr1h+status,2+status,0+pclath]
  3482                           
  3483  0717  3001               	movlw	1
  3484  0718  0020               	movlb	0	; select bank0
  3485  0719  02A3               	subwf	strncmp@len,f
  3486  071A  3000               	movlw	0
  3487  071B  3BA4               	subwfb	strncmp@len+1,f
  3488  071C  0A23               	incf	strncmp@len,w
  3489  071D  1903               	btfsc	3,2
  3490  071E  0A24               	incf	strncmp@len+1,w
  3491  071F  1903               	btfsc	3,2
  3492  0720  2F56               	goto	l2889
  3493  0721  0020               	movlb	0	; select bank0
  3494  0722  0820               	movf	strncmp@s1,w
  3495  0723  0084               	movwf	4
  3496  0724  0821               	movf	strncmp@s1+1,w
  3497  0725  0085               	movwf	5
  3498  0726  0012               	moviw fsr0++
  3499  0727  1903               	btfsc	3,2
  3500  0728  2F35               	goto	l2879
  3501  0729  0822               	movf	strncmp@s2,w
  3502  072A  0086               	movwf	6
  3503  072B  3001               	movlw	1	; select bank2/3
  3504  072C  0087               	movwf	7
  3505  072D  0820               	movf	strncmp@s1,w
  3506  072E  0084               	movwf	4
  3507  072F  0821               	movf	strncmp@s1+1,w
  3508  0730  0085               	movwf	5
  3509  0731  0800               	movf	0,w	;code access
  3510  0732  0601               	xorwf	1,w
  3511  0733  1903               	skipnz
  3512  0734  2F4D               	goto	l2883
  3513  0735                     l2879:	
  3514  0735  0822               	movf	strncmp@s2,w
  3515  0736  0086               	movwf	6
  3516  0737  3001               	movlw	1	; select bank2/3
  3517  0738  0087               	movwf	7
  3518  0739  0801               	movf	1,w
  3519  073A  00A5               	movwf	??_strncmp
  3520  073B  01A6               	clrf	??_strncmp+1
  3521  073C  09A5               	comf	??_strncmp,f
  3522  073D  09A6               	comf	??_strncmp+1,f
  3523  073E  0AA5               	incf	??_strncmp,f
  3524  073F  1903               	skipnz
  3525  0740  0AA6               	incf	??_strncmp+1,f
  3526  0741  0820               	movf	strncmp@s1,w
  3527  0742  0084               	movwf	4
  3528  0743  0821               	movf	strncmp@s1+1,w
  3529  0744  0085               	movwf	5
  3530  0745  0800               	movf	0,w	;code access
  3531  0746  0725               	addwf	??_strncmp,w
  3532  0747  00A0               	movwf	?_strncmp
  3533  0748  0826               	movf	??_strncmp+1,w
  3534  0749  1803               	skipnc
  3535  074A  0A26               	incf	??_strncmp+1,w
  3536  074B  00A1               	movwf	?_strncmp+1
  3537  074C  0008               	return
  3538  074D                     l2883:	
  3539  074D  3001               	movlw	1
  3540  074E  07A0               	addwf	strncmp@s1,f
  3541  074F  3000               	movlw	0
  3542  0750  3DA1               	addwfc	strncmp@s1+1,f
  3543  0751  3001               	movlw	1
  3544  0752  00A5               	movwf	??_strncmp
  3545  0753  0825               	movf	??_strncmp,w
  3546  0754  07A2               	addwf	strncmp@s2,f
  3547  0755  2F17               	goto	l2887
  3548  0756                     l2889:	
  3549  0756  01A0               	clrf	?_strncmp
  3550  0757  01A1               	clrf	?_strncmp+1
  3551  0758  0008               	return
  3552  0759                     __end_of_strncmp:	
  3553                           
  3554                           	psect	text7
  3555  0557                     __ptext7:	
  3556 ;; *************** function _loop_func *****************
  3557 ;; Defined at:
  3558 ;;		line 80 in file "main.c"
  3559 ;; Parameters:    Size  Location     Type
  3560 ;;		None
  3561 ;; Auto vars:     Size  Location     Type
  3562 ;;  v               2   43[BANK0 ] unsigned int 
  3563 ;;  out             2   40[BANK0 ] unsigned int 
  3564 ;;  i               1   45[BANK0 ] unsigned char 
  3565 ;;  transition_d    1   42[BANK0 ] unsigned char 
  3566 ;; Return value:  Size  Location     Type
  3567 ;;                  1    wreg      void 
  3568 ;; Registers used:
  3569 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3570 ;; Tracked objects:
  3571 ;;		On entry : 0/0
  3572 ;;		On exit  : 0/0
  3573 ;;		Unchanged: 0/0
  3574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3576 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3577 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3578 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3579 ;;Total ram usage:        7 bytes
  3580 ;; Hardware stack levels used:    1
  3581 ;; Hardware stack levels required when called:    9
  3582 ;; This function calls:
  3583 ;;		_ADC_GetConversionResult
  3584 ;;		_ADC_IsConversionDone
  3585 ;;		_ADC_SelectChannel
  3586 ;;		_ADC_StartConversion
  3587 ;;		_PROTOCOL_I2C_Send_uint8_t
  3588 ;;		_abs
  3589 ;;		_led_blink
  3590 ;; This function is called by:
  3591 ;;		_main
  3592 ;;		_PROTOCOL_Loop
  3593 ;; This function uses a non-reentrant model
  3594 ;;
  3595                           
  3596                           
  3597                           ;psect for function _loop_func
  3598  0557                     _loop_func:	
  3599                           
  3600                           ;main.c: 81: uint8_t i;
  3601                           ;main.c: 82: bool transition_detected = 0;
  3602                           
  3603                           ;incstack = 0
  3604                           ; Regs used in _loop_func: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3605  0557  0020               	movlb	0	; select bank0
  3606  0558  01CA               	clrf	loop_func@transition_detected
  3607                           
  3608                           ;main.c: 83: for (i=0; i < 4; i++) {
  3609  0559  01CD               	clrf	loop_func@i
  3610  055A  3004               	movlw	4
  3611  055B  024D               	subwf	loop_func@i,w
  3612  055C  1803               	btfsc	3,0
  3613  055D  2DFB               	goto	l2807
  3614  055E                     l2761:	
  3615                           
  3616                           ;main.c: 84: if (analog_in_flags[i] == 0) continue;
  3617  055E  084D               	movf	loop_func@i,w
  3618  055F  3EB4               	addlw	(low (_analog_in_flags| 0))& (0+255)
  3619  0560  0086               	movwf	6
  3620  0561  0187               	clrf	7
  3621  0562  0801               	movf	1,w
  3622  0563  1903               	btfsc	3,2
  3623  0564  2DF3               	goto	l2803
  3624                           
  3625                           ;main.c: 86: ADC_SelectChannel(ANALOG_IN[i]);
  3626  0565  084D               	movf	loop_func@i,w
  3627  0566  3ECF               	addlw	low (_ANALOG_IN| (0+32768))
  3628  0567  0084               	movwf	4
  3629  0568  3083               	movlw	high (_ANALOG_IN| (0+32768))
  3630  0569  1803               	skipnc
  3631  056A  3E01               	addlw	1
  3632  056B  0085               	movwf	5
  3633  056C  0800               	movf	0,w	;code access
  3634  056D  318D  25B9  3185   	fcall	_ADC_SelectChannel
  3635                           
  3636                           ;main.c: 87: ADC_StartConversion();
  3637  0570  318C  24FC  3185   	fcall	_ADC_StartConversion
  3638  0573                     l2769:	
  3639                           ;main.c: 88: while(!ADC_IsConversionDone());
  3640                           
  3641  0573  3187  27F9  3185   	fcall	_ADC_IsConversionDone
  3642  0576  3A00               	xorlw	0
  3643  0577  1903               	skipnz
  3644  0578  2D73               	goto	l2769
  3645                           
  3646                           ;main.c: 89: adc_result_t out = ADC_GetConversionResult();
  3647  0579  318D  2547  3185   	fcall	_ADC_GetConversionResult
  3648  057C  0020               	movlb	0	; select bank0
  3649  057D  0821               	movf	?_ADC_GetConversionResult+1,w
  3650  057E  00C9               	movwf	loop_func@out+1
  3651  057F  0820               	movf	?_ADC_GetConversionResult,w
  3652  0580  00C8               	movwf	loop_func@out
  3653                           
  3654                           ;main.c: 90: uint16_t v = abs(out - 511);
  3655  0581  0848               	movf	loop_func@out,w
  3656  0582  3E01               	addlw	1
  3657  0583  00A0               	movwf	abs@a
  3658  0584  30FE               	movlw	254
  3659  0585  3D49               	addwfc	loop_func@out+1,w
  3660  0586  00A1               	movwf	abs@a+1
  3661  0587  318D  25AA  3185   	fcall	_abs
  3662  058A  0020               	movlb	0	; select bank0
  3663  058B  0821               	movf	?_abs+1,w
  3664  058C  00CC               	movwf	loop_func@v+1
  3665  058D  0820               	movf	?_abs,w
  3666  058E  00CB               	movwf	loop_func@v
  3667                           
  3668                           ;main.c: 105: switch (position[i]) {
  3669  058F  2DE7               	goto	l2801
  3670  0590                     l2775:	
  3671                           ;main.c: 106: case 0:
  3672                           
  3673                           
  3674                           ;main.c: 107: if (v >= 50) count[i]++;
  3675  0590  3000               	movlw	0
  3676  0591  024C               	subwf	loop_func@v+1,w
  3677  0592  3032               	movlw	50
  3678  0593  1903               	skipnz
  3679  0594  024B               	subwf	loop_func@v,w
  3680  0595  1C03               	skipc
  3681  0596  2DA0               	goto	l2779
  3682  0597  3001               	movlw	1
  3683  0598  00C7               	movwf	??_loop_func
  3684  0599  084D               	movf	loop_func@i,w
  3685  059A  3EB0               	addlw	(low (_count| 0))& (0+255)
  3686  059B  0086               	movwf	6
  3687  059C  0187               	clrf	7
  3688  059D  0847               	movf	??_loop_func,w
  3689  059E  0781               	addwf	1,f
  3690  059F  2DA5               	goto	l214
  3691  05A0                     l2779:	
  3692                           
  3693                           ;main.c: 108: else count[i] = 0;
  3694  05A0  084D               	movf	loop_func@i,w
  3695  05A1  3EB0               	addlw	(low (_count| 0))& (0+255)
  3696  05A2  0086               	movwf	6
  3697  05A3  0187               	clrf	7
  3698  05A4  0181               	clrf	1
  3699  05A5                     l214:	
  3700                           
  3701                           ;main.c: 110: if (count[i] >= 250) {
  3702  05A5  084D               	movf	loop_func@i,w
  3703  05A6  3EB0               	addlw	(low (_count| 0))& (0+255)
  3704  05A7  0086               	movwf	6
  3705  05A8  0187               	clrf	7
  3706  05A9  30FA               	movlw	250
  3707  05AA  0201               	subwf	1,w
  3708  05AB  1C03               	skipc
  3709  05AC  2DF3               	goto	l2803
  3710                           
  3711                           ;main.c: 111: count[i] = 0;
  3712  05AD  084D               	movf	loop_func@i,w
  3713  05AE  3EB0               	addlw	(low (_count| 0))& (0+255)
  3714  05AF  0086               	movwf	6
  3715  05B0  0187               	clrf	7
  3716  05B1  0181               	clrf	1
  3717                           
  3718                           ;main.c: 112: position[i] = 1;
  3719  05B2  084D               	movf	loop_func@i,w
  3720  05B3  3EDE               	addlw	(low (_position| 0))& (0+255)
  3721  05B4  0086               	movwf	6
  3722  05B5  0187               	clrf	7
  3723  05B6  0181               	clrf	1
  3724  05B7  0A81               	incf	1,f
  3725  05B8  2DE0               	goto	L2
  3726  05B9                     l2787:	
  3727                           ;main.c: 118: case 1:
  3728                           
  3729                           ;main.c: 115: }
  3730                           ;main.c: 116: break;
  3731                           
  3732                           ;main.c: 114: transition_detected = 1;
  3733                           
  3734                           ;main.c: 113: led_blink();
  3735                           
  3736                           
  3737                           ;main.c: 119: if (v < 50) count[i]++;
  3738  05B9  3000               	movlw	0
  3739  05BA  024C               	subwf	loop_func@v+1,w
  3740  05BB  3032               	movlw	50
  3741  05BC  1903               	skipnz
  3742  05BD  024B               	subwf	loop_func@v,w
  3743  05BE  1803               	skipnc
  3744  05BF  2DC9               	goto	l2791
  3745  05C0  3001               	movlw	1
  3746  05C1  00C7               	movwf	??_loop_func
  3747  05C2  084D               	movf	loop_func@i,w
  3748  05C3  3EB0               	addlw	(low (_count| 0))& (0+255)
  3749  05C4  0086               	movwf	6
  3750  05C5  0187               	clrf	7
  3751  05C6  0847               	movf	??_loop_func,w
  3752  05C7  0781               	addwf	1,f
  3753  05C8  2DCE               	goto	l219
  3754  05C9                     l2791:	
  3755                           
  3756                           ;main.c: 120: else count[i] = 0;
  3757  05C9  084D               	movf	loop_func@i,w
  3758  05CA  3EB0               	addlw	(low (_count| 0))& (0+255)
  3759  05CB  0086               	movwf	6
  3760  05CC  0187               	clrf	7
  3761  05CD  0181               	clrf	1
  3762  05CE                     l219:	
  3763                           
  3764                           ;main.c: 122: if (count[i] >= 250) {
  3765  05CE  084D               	movf	loop_func@i,w
  3766  05CF  3EB0               	addlw	(low (_count| 0))& (0+255)
  3767  05D0  0086               	movwf	6
  3768  05D1  0187               	clrf	7
  3769  05D2  30FA               	movlw	250
  3770  05D3  0201               	subwf	1,w
  3771  05D4  1C03               	skipc
  3772  05D5  2DF3               	goto	l2803
  3773                           
  3774                           ;main.c: 123: count[i] = 0;
  3775  05D6  084D               	movf	loop_func@i,w
  3776  05D7  3EB0               	addlw	(low (_count| 0))& (0+255)
  3777  05D8  0086               	movwf	6
  3778  05D9  0187               	clrf	7
  3779  05DA  0181               	clrf	1
  3780                           
  3781                           ;main.c: 124: position[i] = 0;
  3782  05DB  084D               	movf	loop_func@i,w
  3783  05DC  3EDE               	addlw	(low (_position| 0))& (0+255)
  3784  05DD  0086               	movwf	6
  3785  05DE  0187               	clrf	7
  3786  05DF  0181               	clrf	1
  3787  05E0                     L2:	
  3788                           
  3789                           ;main.c: 125: led_blink();
  3790  05E0  318D  2570  3185   	fcall	_led_blink
  3791                           
  3792                           ;main.c: 126: transition_detected = 1;
  3793  05E3  0020               	movlb	0	; select bank0
  3794  05E4  01CA               	clrf	loop_func@transition_detected
  3795  05E5  0ACA               	incf	loop_func@transition_detected,f
  3796                           
  3797                           ;main.c: 129: }
  3798                           
  3799                           ;main.c: 127: }
  3800                           ;main.c: 128: break;
  3801  05E6  2DF3               	goto	l2803
  3802  05E7                     l2801:	
  3803  05E7  084D               	movf	loop_func@i,w
  3804  05E8  3EDE               	addlw	(low (_position| 0))& (0+255)
  3805  05E9  0086               	movwf	6
  3806  05EA  0187               	clrf	7
  3807  05EB  0801               	movf	1,w
  3808                           
  3809                           ; Switch size 1, requested type "space"
  3810                           ; Number of cases is 2, Range of values is 0 to 1
  3811                           ; switch strategies available:
  3812                           ; Name         Instructions Cycles
  3813                           ; simple_byte            7     4 (average)
  3814                           ; direct_byte           10     6 (fixed)
  3815                           ; jumptable            260     6 (fixed)
  3816                           ;	Chosen strategy is simple_byte
  3817  05EC  3A00               	xorlw	0	; case 0
  3818  05ED  1903               	skipnz
  3819  05EE  2D90               	goto	l2775
  3820  05EF  3A01               	xorlw	1	; case 1
  3821  05F0  1903               	skipnz
  3822  05F1  2DB9               	goto	l2787
  3823  05F2  2DF3               	goto	l2803
  3824  05F3                     l2803:	
  3825  05F3  3001               	movlw	1
  3826  05F4  00C7               	movwf	??_loop_func
  3827  05F5  0847               	movf	??_loop_func,w
  3828  05F6  07CD               	addwf	loop_func@i,f
  3829  05F7  3004               	movlw	4
  3830  05F8  024D               	subwf	loop_func@i,w
  3831  05F9  1C03               	skipc
  3832  05FA  2D5E               	goto	l2761
  3833  05FB                     l2807:	
  3834                           
  3835                           ;main.c: 130: }
  3836                           ;main.c: 131: if (transition_detected) {
  3837  05FB  084A               	movf	loop_func@transition_detected,w
  3838  05FC  1903               	btfsc	3,2
  3839  05FD  2E06               	goto	l2811
  3840                           
  3841                           ;main.c: 132: PROTOCOL_I2C_Send_uint8_t(4, position);
  3842  05FE  30DE               	movlw	(low (_position| 0))& (0+255)
  3843  05FF  00C7               	movwf	??_loop_func
  3844  0600  0847               	movf	??_loop_func,w
  3845  0601  00C2               	movwf	PROTOCOL_I2C_Send_uint8_t@pbuffer
  3846  0602  3004               	movlw	4
  3847  0603  3186  26D0  3185   	fcall	_PROTOCOL_I2C_Send_uint8_t
  3848  0606                     l2811:	
  3849                           
  3850                           ;main.c: 133: }
  3851                           ;main.c: 134: _delay((unsigned long)((1000)*(4000000/4000000.0)));
  3852  0606  30C8               	movlw	200
  3853  0607                     u4127:	
  3854  0607  3200               	nop2
  3855  0608  0B89               	decfsz	9,f
  3856  0609  2E07               	goto	u4127
  3857  060A  0008               	return
  3858  060B                     __end_of_loop_func:	
  3859                           
  3860                           	psect	text8
  3861  0D70                     __ptext8:	
  3862 ;; *************** function _led_blink *****************
  3863 ;; Defined at:
  3864 ;;		line 51 in file "main.c"
  3865 ;; Parameters:    Size  Location     Type
  3866 ;;		None
  3867 ;; Auto vars:     Size  Location     Type
  3868 ;;		None
  3869 ;; Return value:  Size  Location     Type
  3870 ;;                  1    wreg      void 
  3871 ;; Registers used:
  3872 ;;		wreg
  3873 ;; Tracked objects:
  3874 ;;		On entry : 0/0
  3875 ;;		On exit  : 0/0
  3876 ;;		Unchanged: 0/0
  3877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3879 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3880 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3881 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3882 ;;Total ram usage:        1 bytes
  3883 ;; Hardware stack levels used:    1
  3884 ;; Hardware stack levels required when called:    5
  3885 ;; This function calls:
  3886 ;;		Nothing
  3887 ;; This function is called by:
  3888 ;;		_loop_func
  3889 ;; This function uses a non-reentrant model
  3890 ;;
  3891                           
  3892                           
  3893                           ;psect for function _led_blink
  3894  0D70                     _led_blink:	
  3895                           
  3896                           ;main.c: 52: LATCbits.LATC2 = 0;
  3897                           
  3898                           ;incstack = 0
  3899                           ; Regs used in _led_blink: [wreg]
  3900  0D70  0022               	movlb	2	; select bank2
  3901  0D71  110E               	bcf	14,2	;volatile
  3902                           
  3903                           ;main.c: 53: _delay((unsigned long)((3)*(4000000/4000.0)));
  3904  0D72  3004               	movlw	4
  3905  0D73  0020               	movlb	0	; select bank0
  3906  0D74  00A0               	movwf	??_led_blink
  3907  0D75  30E4               	movlw	228
  3908  0D76                     u4137:	
  3909  0D76  0B89               	decfsz	9,f
  3910  0D77  2D76               	goto	u4137
  3911  0D78  0BA0               	decfsz	??_led_blink,f
  3912  0D79  2D76               	goto	u4137
  3913  0D7A  0000               	nop
  3914                           
  3915                           ;main.c: 54: LATCbits.LATC2 = 1;
  3916  0D7B  0022               	movlb	2	; select bank2
  3917  0D7C  150E               	bsf	14,2	;volatile
  3918  0D7D  0008               	return
  3919  0D7E                     __end_of_led_blink:	
  3920                           
  3921                           	psect	text9
  3922  0DAA                     __ptext9:	
  3923 ;; *************** function _abs *****************
  3924 ;; Defined at:
  3925 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\abs.c"
  3926 ;; Parameters:    Size  Location     Type
  3927 ;;  a               2    0[BANK0 ] int 
  3928 ;; Auto vars:     Size  Location     Type
  3929 ;;		None
  3930 ;; Return value:  Size  Location     Type
  3931 ;;                  2    0[BANK0 ] int 
  3932 ;; Registers used:
  3933 ;;		wreg, status,2, status,0
  3934 ;; Tracked objects:
  3935 ;;		On entry : 0/0
  3936 ;;		On exit  : 0/0
  3937 ;;		Unchanged: 0/0
  3938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3939 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3940 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3941 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3942 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3943 ;;Total ram usage:        4 bytes
  3944 ;; Hardware stack levels used:    1
  3945 ;; Hardware stack levels required when called:    5
  3946 ;; This function calls:
  3947 ;;		Nothing
  3948 ;; This function is called by:
  3949 ;;		_loop_func
  3950 ;; This function uses a non-reentrant model
  3951 ;;
  3952                           
  3953                           
  3954                           ;psect for function _abs
  3955  0DAA                     _abs:	
  3956                           
  3957                           ;incstack = 0
  3958                           ; Regs used in _abs: [wreg+status,2+status,0]
  3959  0DAA  0020               	movlb	0	; select bank0
  3960  0DAB  1FA1               	btfss	abs@a+1,7
  3961  0DAC  0008               	return
  3962  0DAD  0920               	comf	abs@a,w
  3963  0DAE  00A2               	movwf	??_abs
  3964  0DAF  0921               	comf	abs@a+1,w
  3965  0DB0  00A3               	movwf	??_abs+1
  3966  0DB1  0AA2               	incf	??_abs,f
  3967  0DB2  1903               	skipnz
  3968  0DB3  0AA3               	incf	??_abs+1,f
  3969  0DB4  0822               	movf	??_abs,w
  3970  0DB5  00A0               	movwf	?_abs
  3971  0DB6  0823               	movf	??_abs+1,w
  3972  0DB7  00A1               	movwf	?_abs+1
  3973  0DB8  0008               	return
  3974  0DB9                     __end_of_abs:	
  3975                           
  3976                           	psect	text10
  3977  06D0                     __ptext10:	
  3978 ;; *************** function _PROTOCOL_I2C_Send_uint8_t *****************
  3979 ;; Defined at:
  3980 ;;		line 298 in file "protocol.c"
  3981 ;; Parameters:    Size  Location     Type
  3982 ;;  length          1    wreg     unsigned char 
  3983 ;;  pbuffer         1   34[BANK0 ] PTR unsigned char 
  3984 ;;		 -> PROTOCOL_Send_uint8_t@pbuf(1), position(4), 
  3985 ;; Auto vars:     Size  Location     Type
  3986 ;;  length          1   38[BANK0 ] unsigned char 
  3987 ;; Return value:  Size  Location     Type
  3988 ;;                  1    wreg      void 
  3989 ;; Registers used:
  3990 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3991 ;; Tracked objects:
  3992 ;;		On entry : 0/0
  3993 ;;		On exit  : 0/0
  3994 ;;		Unchanged: 0/0
  3995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3996 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3997 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3998 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3999 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4000 ;;Total ram usage:        5 bytes
  4001 ;; Hardware stack levels used:    1
  4002 ;; Hardware stack levels required when called:    8
  4003 ;; This function calls:
  4004 ;;		_PROTOCOL_I2C_Set_TLV
  4005 ;;		_printf
  4006 ;; This function is called by:
  4007 ;;		_loop_func
  4008 ;; This function uses a non-reentrant model
  4009 ;;
  4010                           
  4011                           
  4012                           ;psect for function _PROTOCOL_I2C_Send_uint8_t
  4013  06D0                     _PROTOCOL_I2C_Send_uint8_t:	
  4014                           
  4015                           ;incstack = 0
  4016                           ; Regs used in _PROTOCOL_I2C_Send_uint8_t: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4017                           ;PROTOCOL_I2C_Send_uint8_t@length stored from wreg
  4018  06D0  0020               	movlb	0	; select bank0
  4019  06D1  00C6               	movwf	PROTOCOL_I2C_Send_uint8_t@length
  4020                           
  4021                           ;protocol.c: 299: if (backplane_slave_enabled) {
  4022  06D2  085B               	movf	_backplane_slave_enabled,w
  4023  06D3  1903               	btfsc	3,2
  4024  06D4  2EE1               	goto	l2653
  4025                           
  4026                           ;protocol.c: 300: PROTOCOL_I2C_Set_TLV(0x01, length, &pbuffer[0]);
  4027  06D5  0846               	movf	PROTOCOL_I2C_Send_uint8_t@length,w
  4028  06D6  00C3               	movwf	??_PROTOCOL_I2C_Send_uint8_t
  4029  06D7  0843               	movf	??_PROTOCOL_I2C_Send_uint8_t,w
  4030  06D8  00A0               	movwf	PROTOCOL_I2C_Set_TLV@length
  4031  06D9  0842               	movf	PROTOCOL_I2C_Send_uint8_t@pbuffer,w
  4032  06DA  00C4               	movwf	??_PROTOCOL_I2C_Send_uint8_t+1
  4033  06DB  0844               	movf	??_PROTOCOL_I2C_Send_uint8_t+1,w
  4034  06DC  00A1               	movwf	PROTOCOL_I2C_Set_TLV@pbuffer
  4035  06DD  3001               	movlw	1
  4036  06DE  318E  26CD         	fcall	_PROTOCOL_I2C_Set_TLV
  4037                           
  4038                           ;protocol.c: 301: } else {
  4039  06E0  0008               	return
  4040  06E1                     l2653:	
  4041                           
  4042                           ;protocol.c: 302: length--;
  4043  06E1  3001               	movlw	1
  4044  06E2  0020               	movlb	0	; select bank0
  4045  06E3  02C6               	subwf	PROTOCOL_I2C_Send_uint8_t@length,f
  4046                           
  4047                           ;protocol.c: 303: for(i=0; i<length; i++) printf("%d,", pbuffer[i]);
  4048  06E4  01DA               	clrf	_i
  4049  06E5                     l2661:	
  4050  06E5  0846               	movf	PROTOCOL_I2C_Send_uint8_t@length,w
  4051  06E6  025A               	subwf	_i,w
  4052  06E7  1803               	btfsc	3,0
  4053  06E8  2F03               	goto	l2663
  4054  06E9  3067               	movlw	low (STR_22| (0+32768))
  4055  06EA  00AE               	movwf	printf@f
  4056  06EB  3084               	movlw	high (STR_22| (0+32768))
  4057  06EC  00AF               	movwf	printf@f+1
  4058  06ED  085A               	movf	_i,w
  4059  06EE  0742               	addwf	PROTOCOL_I2C_Send_uint8_t@pbuffer,w
  4060  06EF  00C3               	movwf	??_PROTOCOL_I2C_Send_uint8_t
  4061  06F0  0843               	movf	??_PROTOCOL_I2C_Send_uint8_t,w
  4062  06F1  0086               	movwf	6
  4063  06F2  0187               	clrf	7
  4064  06F3  0801               	movf	1,w
  4065  06F4  00C4               	movwf	??_PROTOCOL_I2C_Send_uint8_t+1
  4066  06F5  01C5               	clrf	??_PROTOCOL_I2C_Send_uint8_t+2
  4067  06F6  0844               	movf	??_PROTOCOL_I2C_Send_uint8_t+1,w
  4068  06F7  00B0               	movwf	?_printf+2
  4069  06F8  0845               	movf	??_PROTOCOL_I2C_Send_uint8_t+2,w
  4070  06F9  00B1               	movwf	?_printf+3
  4071  06FA  3180  2068  3186   	fcall	_printf
  4072  06FD  3001               	movlw	1
  4073  06FE  0020               	movlb	0	; select bank0
  4074  06FF  00C3               	movwf	??_PROTOCOL_I2C_Send_uint8_t
  4075  0700  0843               	movf	??_PROTOCOL_I2C_Send_uint8_t,w
  4076  0701  07DA               	addwf	_i,f
  4077  0702  2EE5               	goto	l2661
  4078  0703                     l2663:	
  4079                           
  4080                           ;protocol.c: 304: printf("%d\n", pbuffer[i]);
  4081  0703  30F8               	movlw	low ((STR_16+6)| (0+32768))
  4082  0704  00AE               	movwf	printf@f
  4083  0705  3083               	movlw	high ((STR_16+6)| (0+32768))
  4084  0706  00AF               	movwf	printf@f+1
  4085  0707  085A               	movf	_i,w
  4086  0708  0742               	addwf	PROTOCOL_I2C_Send_uint8_t@pbuffer,w
  4087  0709  00C3               	movwf	??_PROTOCOL_I2C_Send_uint8_t
  4088  070A  0843               	movf	??_PROTOCOL_I2C_Send_uint8_t,w
  4089  070B  0086               	movwf	6
  4090  070C  0187               	clrf	7
  4091  070D  0801               	movf	1,w
  4092  070E  00C4               	movwf	??_PROTOCOL_I2C_Send_uint8_t+1
  4093  070F  01C5               	clrf	??_PROTOCOL_I2C_Send_uint8_t+2
  4094  0710  0844               	movf	??_PROTOCOL_I2C_Send_uint8_t+1,w
  4095  0711  00B0               	movwf	?_printf+2
  4096  0712  0845               	movf	??_PROTOCOL_I2C_Send_uint8_t+2,w
  4097  0713  00B1               	movwf	?_printf+3
  4098  0714  3180  2068         	fcall	_printf
  4099  0716  0008               	return
  4100  0717                     __end_of_PROTOCOL_I2C_Send_uint8_t:	
  4101                           
  4102                           	psect	text11
  4103  0068                     __ptext11:	
  4104 ;; *************** function _printf *****************
  4105 ;; Defined at:
  4106 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  4107 ;; Parameters:    Size  Location     Type
  4108 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  4109 ;;		 -> STR_48(10), STR_47(9), STR_46(10), STR_45(9), 
  4110 ;;		 -> STR_44(4), STR_43(4), STR_42(4), STR_41(4), 
  4111 ;;		 -> STR_40(4), STR_39(4), STR_38(4), STR_37(4), 
  4112 ;;		 -> STR_36(14), STR_35(9), STR_34(10), STR_33(9), 
  4113 ;;		 -> STR_32(10), STR_31(9), STR_30(7), STR_29(4), 
  4114 ;;		 -> STR_28(4), STR_27(9), STR_26(4), STR_25(4), 
  4115 ;;		 -> STR_24(10), STR_23(4), STR_22(4), STR_21(8), 
  4116 ;;		 -> STR_20(4), STR_19(4), STR_18(9), STR_17(6), 
  4117 ;;		 -> STR_16(10), STR_13(10), STR_9(10), STR_5(10), 
  4118 ;;		 -> STR_3(5), 
  4119 ;; Auto vars:     Size  Location     Type
  4120 ;;  tmpval          4    0        struct .
  4121 ;;  width           2   31[BANK0 ] int 
  4122 ;;  len             2   28[BANK0 ] unsigned int 
  4123 ;;  val             2   26[BANK0 ] unsigned int 
  4124 ;;  cp              2   23[BANK0 ] PTR const unsigned char 
  4125 ;;		 -> STR_10(4), buf(48), STR_2(7), ROM(8192), 
  4126 ;;		 -> printf@c(1), STR_1(17), 
  4127 ;;  c               1   33[BANK0 ] char 
  4128 ;;  flag            1   30[BANK0 ] unsigned char 
  4129 ;;  ap              1   25[BANK0 ] PTR void [1]
  4130 ;;		 -> ?_printf(2), 
  4131 ;;  prec            1   22[BANK0 ] char 
  4132 ;; Return value:  Size  Location     Type
  4133 ;;                  2   14[BANK0 ] int 
  4134 ;; Registers used:
  4135 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4136 ;; Tracked objects:
  4137 ;;		On entry : 0/0
  4138 ;;		On exit  : 0/0
  4139 ;;		Unchanged: 0/0
  4140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4141 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4142 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4143 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4144 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4145 ;;Total ram usage:       20 bytes
  4146 ;; Hardware stack levels used:    1
  4147 ;; Hardware stack levels required when called:    7
  4148 ;; This function calls:
  4149 ;;		___lwdiv
  4150 ;;		___lwmod
  4151 ;;		___wmul
  4152 ;;		_isdigit
  4153 ;;		_putch
  4154 ;; This function is called by:
  4155 ;;		_PROTOCOL_Loop
  4156 ;;		_PROTOCOL_I2C_Send_uint8_t
  4157 ;; This function uses a non-reentrant model
  4158 ;;
  4159                           
  4160                           
  4161                           ;psect for function _printf
  4162  0068                     _printf:	
  4163                           
  4164                           ;doprnt.c: 466: va_list ap;
  4165                           ;doprnt.c: 499: signed char c;
  4166                           ;doprnt.c: 501: int width;
  4167                           ;doprnt.c: 506: signed char prec;
  4168                           ;doprnt.c: 508: unsigned char flag;
  4169                           ;doprnt.c: 523: union {
  4170                           ;doprnt.c: 524: unsigned long vd;
  4171                           ;doprnt.c: 525: double integ;
  4172                           ;doprnt.c: 526: } tmpval;
  4173                           ;doprnt.c: 528: unsigned int val;
  4174                           ;doprnt.c: 529: unsigned len;
  4175                           ;doprnt.c: 530: const char * cp;
  4176                           ;doprnt.c: 533: *ap = __va_start();
  4177                           
  4178                           ;incstack = 0
  4179                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4180  0068  3030               	movlw	(low ((?_printf| 0+2)))& (0+255)
  4181  0069  0020               	movlb	0	; select bank0
  4182  006A  00B2               	movwf	??_printf
  4183  006B  0832               	movf	??_printf,w
  4184  006C  00B9               	movwf	printf@ap
  4185  006D                     l2551:	
  4186                           ;doprnt.c: 536: while(c = *f++) {
  4187                           
  4188  006D  0020               	movlb	0	; select bank0
  4189  006E  082F               	movf	printf@f+1,w
  4190  006F  00B3               	movwf	??_printf+1
  4191  0070  082E               	movf	printf@f,w
  4192  0071  00B2               	movwf	??_printf
  4193  0072  0AAE               	incf	printf@f,f
  4194  0073  1903               	skipnz
  4195  0074  0AAF               	incf	printf@f+1,f
  4196  0075  0832               	movf	??_printf,w
  4197  0076  0084               	movwf	4
  4198  0077  0833               	movf	??_printf+1,w
  4199  0078  0085               	movwf	5
  4200  0079  0800               	movf	0,w	;code access
  4201  007A  00B4               	movwf	??_printf+2
  4202  007B  0834               	movf	??_printf+2,w
  4203  007C  00C1               	movwf	printf@c
  4204  007D  0841               	movf	printf@c,w
  4205  007E  1903               	btfsc	3,2
  4206  007F  0008               	return
  4207                           
  4208                           ;doprnt.c: 538: if(c != '%')
  4209  0080  3025               	movlw	37
  4210  0081  0641               	xorwf	printf@c,w
  4211  0082  1903               	btfsc	3,2
  4212  0083  2889               	goto	l2427
  4213                           
  4214                           ;doprnt.c: 540: {
  4215                           ;doprnt.c: 541: (putch(c) );
  4216  0084  0841               	movf	printf@c,w
  4217  0085  318D  2521  3180   	fcall	_putch
  4218                           
  4219                           ;doprnt.c: 542: continue;
  4220  0088  286D               	goto	l2551
  4221  0089                     l2427:	
  4222                           
  4223                           ;doprnt.c: 543: }
  4224                           ;doprnt.c: 546: width = 0;
  4225  0089  0020               	movlb	0	; select bank0
  4226  008A  01BF               	clrf	printf@width
  4227  008B  01C0               	clrf	printf@width+1
  4228                           
  4229                           ;doprnt.c: 548: flag = 0;
  4230  008C  01BE               	clrf	printf@flag
  4231                           
  4232                           ;doprnt.c: 551: switch(*f) {
  4233                           
  4234                           ;doprnt.c: 550: for(;;) {
  4235  008D  2893               	goto	l2433
  4236  008E                     l243:	
  4237                           ;doprnt.c: 579: case '0':
  4238                           
  4239                           
  4240                           ;doprnt.c: 580: flag |= 0x04;
  4241  008E  153E               	bsf	printf@flag,2
  4242                           
  4243                           ;doprnt.c: 581: f++;
  4244  008F  3001               	movlw	1
  4245  0090  07AE               	addwf	printf@f,f
  4246  0091  3000               	movlw	0
  4247  0092  3DAF               	addwfc	printf@f+1,f
  4248  0093                     l2433:	
  4249                           ;doprnt.c: 584: }
  4250                           
  4251                           ;doprnt.c: 582: continue;
  4252                           
  4253  0093  082E               	movf	printf@f,w
  4254  0094  0084               	movwf	4
  4255  0095  082F               	movf	printf@f+1,w
  4256  0096  0085               	movwf	5
  4257  0097  0800               	movf	0,w	;code access
  4258                           
  4259                           ; Switch size 1, requested type "space"
  4260                           ; Number of cases is 1, Range of values is 48 to 48
  4261                           ; switch strategies available:
  4262                           ; Name         Instructions Cycles
  4263                           ; simple_byte            4     3 (average)
  4264                           ; direct_byte           11     9 (fixed)
  4265                           ; jumptable            263     9 (fixed)
  4266                           ;	Chosen strategy is simple_byte
  4267  0098  3A30               	xorlw	48	; case 48
  4268  0099  1903               	skipnz
  4269  009A  288E               	goto	l243
  4270  009B  289C               	goto	l2435
  4271  009C                     l2435:	
  4272                           ;doprnt.c: 586: }
  4273                           
  4274                           ;doprnt.c: 585: break;
  4275                           
  4276                           
  4277                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4278  009C  082E               	movf	printf@f,w
  4279  009D  0084               	movwf	4
  4280  009E  082F               	movf	printf@f+1,w
  4281  009F  0085               	movwf	5
  4282  00A0  0800               	movf	0,w	;code access
  4283  00A1  318D  259B  3180   	fcall	_isdigit
  4284  00A4  1C03               	btfss	3,0
  4285  00A5  293D               	goto	l2483
  4286                           
  4287                           ;doprnt.c: 598: width = 0;
  4288  00A6  0020               	movlb	0	; select bank0
  4289  00A7  01BF               	clrf	printf@width
  4290  00A8  01C0               	clrf	printf@width+1
  4291  00A9                     l2439:	
  4292                           ;doprnt.c: 599: do {
  4293                           
  4294                           
  4295                           ;doprnt.c: 600: width *= 10;
  4296  00A9  300A               	movlw	10
  4297  00AA  0020               	movlb	0	; select bank0
  4298  00AB  00A0               	movwf	___wmul@multiplier
  4299  00AC  3000               	movlw	0
  4300  00AD  00A1               	movwf	___wmul@multiplier+1
  4301  00AE  0840               	movf	printf@width+1,w
  4302  00AF  00A3               	movwf	___wmul@multiplicand+1
  4303  00B0  083F               	movf	printf@width,w
  4304  00B1  00A2               	movwf	___wmul@multiplicand
  4305  00B2  318E  2658  3180   	fcall	___wmul
  4306  00B5  0020               	movlb	0	; select bank0
  4307  00B6  0821               	movf	?___wmul+1,w
  4308  00B7  00C0               	movwf	printf@width+1
  4309  00B8  0820               	movf	?___wmul,w
  4310  00B9  00BF               	movwf	printf@width
  4311                           
  4312                           ;doprnt.c: 601: width += *f++ - '0';
  4313  00BA  082E               	movf	printf@f,w
  4314  00BB  0084               	movwf	4
  4315  00BC  082F               	movf	printf@f+1,w
  4316  00BD  0085               	movwf	5
  4317  00BE  0800               	movf	0,w	;code access
  4318  00BF  3ED0               	addlw	208
  4319  00C0  00B2               	movwf	??_printf
  4320  00C1  30FF               	movlw	255
  4321  00C2  1803               	skipnc
  4322  00C3  3000               	movlw	0
  4323  00C4  00B3               	movwf	??_printf+1
  4324  00C5  0832               	movf	??_printf,w
  4325  00C6  07BF               	addwf	printf@width,f
  4326  00C7  0833               	movf	??_printf+1,w
  4327  00C8  3DC0               	addwfc	printf@width+1,f
  4328  00C9  3001               	movlw	1
  4329  00CA  07AE               	addwf	printf@f,f
  4330  00CB  3000               	movlw	0
  4331  00CC  3DAF               	addwfc	printf@f+1,f
  4332                           
  4333                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4334  00CD  082E               	movf	printf@f,w
  4335  00CE  0084               	movwf	4
  4336  00CF  082F               	movf	printf@f+1,w
  4337  00D0  0085               	movwf	5
  4338  00D1  0800               	movf	0,w	;code access
  4339  00D2  318D  259B  3180   	fcall	_isdigit
  4340  00D5  1C03               	btfss	3,0
  4341  00D6  293D               	goto	l2483
  4342  00D7  28A9               	goto	l2439
  4343  00D8                     l2447:	
  4344                           ;doprnt.c: 728: case 's':
  4345                           
  4346                           ;doprnt.c: 698: case 'i':
  4347                           ;doprnt.c: 699: break;
  4348                           
  4349                           ;doprnt.c: 697: case 'd':
  4350                           
  4351                           ;doprnt.c: 638: goto alldone;
  4352                           
  4353                           ;doprnt.c: 637: case 0:
  4354                           
  4355                           ;doprnt.c: 608: }
  4356                           ;doprnt.c: 635: switch(c = *f++) {
  4357                           
  4358                           
  4359                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  4360  00D8  0020               	movlb	0	; select bank0
  4361  00D9  0839               	movf	printf@ap,w
  4362  00DA  0086               	movwf	6
  4363  00DB  0187               	clrf	7
  4364  00DC  3F40               	moviw [0]fsr1
  4365  00DD  00B7               	movwf	printf@cp
  4366  00DE  3F41               	moviw [1]fsr1
  4367  00DF  00B8               	movwf	printf@cp+1
  4368  00E0  3002               	movlw	2
  4369  00E1  00B2               	movwf	??_printf
  4370  00E2  0832               	movf	??_printf,w
  4371  00E3  07B9               	addwf	printf@ap,f
  4372                           
  4373                           ;doprnt.c: 740: if(!cp)
  4374  00E4  0837               	movf	printf@cp,w
  4375  00E5  0438               	iorwf	printf@cp+1,w
  4376  00E6  1D03               	btfss	3,2
  4377  00E7  28EC               	goto	l2455
  4378                           
  4379                           ;doprnt.c: 741: cp = "(null)";
  4380  00E8  3051               	movlw	low (STR_2| (0+32768))
  4381  00E9  00B7               	movwf	printf@cp
  4382  00EA  3084               	movlw	high (STR_2| (0+32768))
  4383  00EB  00B8               	movwf	printf@cp+1
  4384  00EC                     l2455:	
  4385                           
  4386                           ;doprnt.c: 745: len = 0;
  4387  00EC  01BC               	clrf	printf@len
  4388  00ED  01BD               	clrf	printf@len+1
  4389  00EE                     l2459:	
  4390                           ;doprnt.c: 746: while(cp[len])
  4391                           
  4392  00EE  0837               	movf	printf@cp,w
  4393  00EF  073C               	addwf	printf@len,w
  4394  00F0  0084               	movwf	4
  4395  00F1  0838               	movf	printf@cp+1,w
  4396  00F2  3D3D               	addwfc	printf@len+1,w
  4397  00F3  0085               	movwf	5
  4398  00F4  0012               	moviw fsr0++
  4399  00F5  1903               	btfsc	3,2
  4400  00F6  28FC               	goto	l2461
  4401                           
  4402                           ;doprnt.c: 747: len++;
  4403  00F7  3001               	movlw	1
  4404  00F8  07BC               	addwf	printf@len,f
  4405  00F9  3000               	movlw	0
  4406  00FA  3DBD               	addwfc	printf@len+1,f
  4407  00FB  28EE               	goto	l2459
  4408  00FC                     l2461:	
  4409                           ;doprnt.c: 750: dostring:
  4410                           
  4411                           
  4412                           ;doprnt.c: 757: if(width > len)
  4413  00FC  0840               	movf	printf@width+1,w
  4414  00FD  023D               	subwf	printf@len+1,w
  4415  00FE  1D03               	skipz
  4416  00FF  2902               	goto	u1565
  4417  0100  083F               	movf	printf@width,w
  4418  0101  023C               	subwf	printf@len,w
  4419  0102                     u1565:	
  4420  0102  1803               	skipnc
  4421  0103  2909               	goto	l2465
  4422                           
  4423                           ;doprnt.c: 758: width -= len;
  4424  0104  083C               	movf	printf@len,w
  4425  0105  02BF               	subwf	printf@width,f
  4426  0106  083D               	movf	printf@len+1,w
  4427  0107  3BC0               	subwfb	printf@width+1,f
  4428  0108  290B               	goto	l2469
  4429  0109                     l2465:	
  4430                           
  4431                           ;doprnt.c: 759: else
  4432                           ;doprnt.c: 760: width = 0;
  4433  0109  01BF               	clrf	printf@width
  4434  010A  01C0               	clrf	printf@width+1
  4435  010B                     l2469:	
  4436                           ;doprnt.c: 764: while(width--)
  4437                           
  4438  010B  30FF               	movlw	255
  4439  010C  0020               	movlb	0	; select bank0
  4440  010D  07BF               	addwf	printf@width,f
  4441  010E  30FF               	movlw	255
  4442  010F  3DC0               	addwfc	printf@width+1,f
  4443  0110  0A3F               	incf	printf@width,w
  4444  0111  1903               	btfsc	3,2
  4445  0112  0A40               	incf	printf@width+1,w
  4446  0113  1903               	btfsc	3,2
  4447  0114  2927               	goto	l2475
  4448                           
  4449                           ;doprnt.c: 765: (putch(' ') );
  4450  0115  3020               	movlw	32
  4451  0116  318D  2521  3180   	fcall	_putch
  4452  0119  290B               	goto	l2469
  4453  011A                     l2471:	
  4454                           ;doprnt.c: 767: while(len--)
  4455                           
  4456                           
  4457                           ;doprnt.c: 768: (putch(*cp++) );
  4458  011A  0837               	movf	printf@cp,w
  4459  011B  0084               	movwf	4
  4460  011C  0838               	movf	printf@cp+1,w
  4461  011D  0085               	movwf	5
  4462  011E  0800               	movf	0,w	;code access
  4463  011F  318D  2521  3180   	fcall	_putch
  4464  0122  3001               	movlw	1
  4465  0123  0020               	movlb	0	; select bank0
  4466  0124  07B7               	addwf	printf@cp,f
  4467  0125  3000               	movlw	0
  4468  0126  3DB8               	addwfc	printf@cp+1,f
  4469  0127                     l2475:	
  4470  0127  3001               	movlw	1
  4471  0128  02BC               	subwf	printf@len,f
  4472  0129  3000               	movlw	0
  4473  012A  3BBD               	subwfb	printf@len+1,f
  4474  012B  0A3C               	incf	printf@len,w
  4475  012C  1D03               	skipz
  4476  012D  291A               	goto	l2471
  4477  012E  0A3D               	incf	printf@len+1,w
  4478  012F  1903               	btfsc	3,2
  4479  0130  286D               	goto	l2551
  4480  0131  291A               	goto	l2471
  4481  0132                     l2477:	
  4482                           ;doprnt.c: 802: default:
  4483                           
  4484                           ;doprnt.c: 774: continue;
  4485                           
  4486                           
  4487                           ;doprnt.c: 805: cp = (char *)&c;
  4488  0132  3041               	movlw	low printf@c
  4489  0133  00B7               	movwf	printf@cp
  4490  0134  3000               	movlw	high printf@c
  4491  0135  00B8               	movwf	printf@cp+1
  4492                           
  4493                           ;doprnt.c: 806: len = 1;
  4494  0136  3001               	movlw	1
  4495  0137  00BC               	movwf	printf@len
  4496  0138  3000               	movlw	0
  4497  0139  00BD               	movwf	printf@len+1
  4498                           
  4499                           ;doprnt.c: 807: goto dostring;
  4500  013A  28FC               	goto	l2461
  4501  013B                     l271:	
  4502                           ;doprnt.c: 817: case 'u':
  4503                           
  4504                           
  4505                           ;doprnt.c: 818: flag |= 0x40;
  4506  013B  173E               	bsf	printf@flag,6
  4507                           
  4508                           ;doprnt.c: 822: }
  4509                           
  4510                           ;doprnt.c: 819: break;
  4511  013C  295B               	goto	l255
  4512  013D                     l2483:	
  4513  013D  0020               	movlb	0	; select bank0
  4514  013E  082F               	movf	printf@f+1,w
  4515  013F  00B3               	movwf	??_printf+1
  4516  0140  082E               	movf	printf@f,w
  4517  0141  00B2               	movwf	??_printf
  4518  0142  0AAE               	incf	printf@f,f
  4519  0143  1903               	skipnz
  4520  0144  0AAF               	incf	printf@f+1,f
  4521  0145  0832               	movf	??_printf,w
  4522  0146  0084               	movwf	4
  4523  0147  0833               	movf	??_printf+1,w
  4524  0148  0085               	movwf	5
  4525  0149  0800               	movf	0,w	;code access
  4526  014A  00C1               	movwf	printf@c
  4527                           
  4528                           ; Switch size 1, requested type "space"
  4529                           ; Number of cases is 5, Range of values is 0 to 117
  4530                           ; switch strategies available:
  4531                           ; Name         Instructions Cycles
  4532                           ; simple_byte           16     9 (average)
  4533                           ; direct_byte          242     6 (fixed)
  4534                           ; jumptable            260     6 (fixed)
  4535                           ;	Chosen strategy is simple_byte
  4536  014B  3A00               	xorlw	0	; case 0
  4537  014C  1903               	skipnz
  4538  014D  2A3C               	goto	l295
  4539  014E  3A64               	xorlw	100	; case 100
  4540  014F  1903               	skipnz
  4541  0150  295B               	goto	l255
  4542  0151  3A0D               	xorlw	13	; case 105
  4543  0152  1903               	skipnz
  4544  0153  295B               	goto	l255
  4545  0154  3A1A               	xorlw	26	; case 115
  4546  0155  1903               	skipnz
  4547  0156  28D8               	goto	l2447
  4548  0157  3A06               	xorlw	6	; case 117
  4549  0158  1903               	skipnz
  4550  0159  293B               	goto	l271
  4551  015A  2932               	goto	l2477
  4552  015B                     l255:	
  4553                           
  4554                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  4555  015B  0020               	movlb	0	; select bank0
  4556  015C  1B3E               	btfsc	printf@flag,6
  4557  015D  2975               	goto	l2495
  4558                           
  4559                           ;doprnt.c: 1253: {
  4560                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4561  015E  0839               	movf	printf@ap,w
  4562  015F  0086               	movwf	6
  4563  0160  0187               	clrf	7
  4564  0161  3F40               	moviw [0]fsr1
  4565  0162  00BA               	movwf	printf@val
  4566  0163  3F41               	moviw [1]fsr1
  4567  0164  00BB               	movwf	printf@val+1
  4568  0165  3002               	movlw	2
  4569  0166  00B2               	movwf	??_printf
  4570  0167  0832               	movf	??_printf,w
  4571  0168  07B9               	addwf	printf@ap,f
  4572                           
  4573                           ;doprnt.c: 1261: if((int)val < 0) {
  4574  0169  1FBB               	btfss	printf@val+1,7
  4575  016A  2980               	goto	l2499
  4576                           
  4577                           ;doprnt.c: 1262: flag |= 0x03;
  4578  016B  3003               	movlw	3
  4579  016C  00B2               	movwf	??_printf
  4580  016D  0832               	movf	??_printf,w
  4581  016E  04BE               	iorwf	printf@flag,f
  4582                           
  4583                           ;doprnt.c: 1263: val = -val;
  4584  016F  09BA               	comf	printf@val,f
  4585  0170  09BB               	comf	printf@val+1,f
  4586  0171  0ABA               	incf	printf@val,f
  4587  0172  1903               	skipnz
  4588  0173  0ABB               	incf	printf@val+1,f
  4589                           
  4590                           ;doprnt.c: 1264: }
  4591                           ;doprnt.c: 1266: }
  4592  0174  2980               	goto	l2499
  4593  0175                     l2495:	
  4594                           
  4595                           ;doprnt.c: 1268: else
  4596                           ;doprnt.c: 1273: {
  4597                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4598  0175  0839               	movf	printf@ap,w
  4599  0176  0086               	movwf	6
  4600  0177  0187               	clrf	7
  4601  0178  3F40               	moviw [0]fsr1
  4602  0179  00BA               	movwf	printf@val
  4603  017A  3F41               	moviw [1]fsr1
  4604  017B  00BB               	movwf	printf@val+1
  4605  017C  3002               	movlw	2
  4606  017D  00B2               	movwf	??_printf
  4607  017E  0832               	movf	??_printf,w
  4608  017F  07B9               	addwf	printf@ap,f
  4609  0180                     l2499:	
  4610                           
  4611                           ;doprnt.c: 1287: }
  4612                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4613  0180  01C1               	clrf	printf@c
  4614  0181  0AC1               	incf	printf@c,f
  4615  0182  3005               	movlw	5
  4616  0183  0641               	xorwf	printf@c,w
  4617  0184  1903               	btfsc	3,2
  4618  0185  29A5               	goto	l2511
  4619  0186                     l2505:	
  4620                           
  4621                           ;doprnt.c: 1306: if(val < dpowers[c])
  4622  0186  0841               	movf	printf@c,w
  4623  0187  00B2               	movwf	??_printf
  4624  0188  01B3               	clrf	??_printf+1
  4625  0189  35B2               	lslf	??_printf,f
  4626  018A  0DB3               	rlf	??_printf+1,f
  4627  018B  30C5               	movlw	low (_dpowers| (0+32768))
  4628  018C  0732               	addwf	??_printf,w
  4629  018D  0084               	movwf	4
  4630  018E  3083               	movlw	high (_dpowers| (0+32768))
  4631  018F  3D33               	addwfc	??_printf+1,w
  4632  0190  0085               	movwf	5
  4633  0191  3F00               	moviw [0]fsr0
  4634  0192  00B4               	movwf	??_printf+2
  4635  0193  3F01               	moviw [1]fsr0
  4636  0194  00B5               	movwf	??_printf+3
  4637  0195  0835               	movf	??_printf+3,w
  4638  0196  023B               	subwf	printf@val+1,w
  4639  0197  1D03               	skipz
  4640  0198  299B               	goto	u1625
  4641  0199  0834               	movf	??_printf+2,w
  4642  019A  023A               	subwf	printf@val,w
  4643  019B                     u1625:	
  4644  019B  1C03               	btfss	3,0
  4645  019C  29A5               	goto	l2511
  4646                           
  4647                           ;doprnt.c: 1307: break;
  4648  019D  3001               	movlw	1
  4649  019E  00B2               	movwf	??_printf
  4650  019F  0832               	movf	??_printf,w
  4651  01A0  07C1               	addwf	printf@c,f
  4652  01A1  3005               	movlw	5
  4653  01A2  0641               	xorwf	printf@c,w
  4654  01A3  1D03               	btfss	3,2
  4655  01A4  2986               	goto	l2505
  4656  01A5                     l2511:	
  4657                           
  4658                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4659  01A5  083F               	movf	printf@width,w
  4660  01A6  0440               	iorwf	printf@width+1,w
  4661  01A7  1903               	btfsc	3,2
  4662  01A8  29B1               	goto	l278
  4663  01A9  083E               	movf	printf@flag,w
  4664  01AA  3903               	andlw	3
  4665  01AB  1903               	btfsc	3,2
  4666  01AC  29B1               	goto	l278
  4667                           
  4668                           ;doprnt.c: 1346: width--;
  4669  01AD  30FF               	movlw	255
  4670  01AE  07BF               	addwf	printf@width,f
  4671  01AF  30FF               	movlw	255
  4672  01B0  3DC0               	addwfc	printf@width+1,f
  4673  01B1                     l278:	
  4674                           
  4675                           ;doprnt.c: 1381: if(width > c)
  4676  01B1  0841               	movf	printf@c,w
  4677  01B2  00B2               	movwf	??_printf
  4678  01B3  01B3               	clrf	??_printf+1
  4679  01B4  1BB2               	btfsc	??_printf,7
  4680  01B5  03B3               	decf	??_printf+1,f
  4681  01B6  0833               	movf	??_printf+1,w
  4682  01B7  3A80               	xorlw	128
  4683  01B8  00B4               	movwf	??_printf+2
  4684  01B9  0840               	movf	printf@width+1,w
  4685  01BA  3A80               	xorlw	128
  4686  01BB  0234               	subwf	??_printf+2,w
  4687  01BC  1D03               	skipz
  4688  01BD  29C0               	goto	u1665
  4689  01BE  083F               	movf	printf@width,w
  4690  01BF  0232               	subwf	??_printf,w
  4691  01C0                     u1665:	
  4692  01C0  1803               	skipnc
  4693  01C1  29CD               	goto	l2519
  4694                           
  4695                           ;doprnt.c: 1382: width -= c;
  4696  01C2  0020               	movlb	0	; select bank0
  4697  01C3  0841               	movf	printf@c,w
  4698  01C4  00B2               	movwf	??_printf
  4699  01C5  01B3               	clrf	??_printf+1
  4700  01C6  1BB2               	btfsc	??_printf,7
  4701  01C7  03B3               	decf	??_printf+1,f
  4702  01C8  0832               	movf	??_printf,w
  4703  01C9  02BF               	subwf	printf@width,f
  4704  01CA  0833               	movf	??_printf+1,w
  4705  01CB  3BC0               	subwfb	printf@width+1,f
  4706  01CC  29D0               	goto	l2521
  4707  01CD                     l2519:	
  4708                           
  4709                           ;doprnt.c: 1383: else
  4710                           ;doprnt.c: 1384: width = 0;
  4711  01CD  0020               	movlb	0	; select bank0
  4712  01CE  01BF               	clrf	printf@width
  4713  01CF  01C0               	clrf	printf@width+1
  4714  01D0                     l2521:	
  4715                           
  4716                           ;doprnt.c: 1387: if(flag & 0x04) {
  4717  01D0  1D3E               	btfss	printf@flag,2
  4718  01D1  29E9               	goto	l2533
  4719                           
  4720                           ;doprnt.c: 1392: if(flag & 0x03)
  4721  01D2  083E               	movf	printf@flag,w
  4722  01D3  3903               	andlw	3
  4723  01D4  1903               	btfsc	3,2
  4724  01D5  29DA               	goto	l2527
  4725                           
  4726                           ;doprnt.c: 1393: (putch('-') );
  4727  01D6  302D               	movlw	45
  4728  01D7  318D  2521  3180   	fcall	_putch
  4729  01DA                     l2527:	
  4730                           
  4731                           ;doprnt.c: 1415: if(width)
  4732  01DA  0020               	movlb	0	; select bank0
  4733  01DB                     L4:	
  4734  01DB  083F               	movf	printf@width,w
  4735  01DC  0440               	iorwf	printf@width+1,w
  4736  01DD  1903               	btfsc	3,2
  4737  01DE  2A02               	goto	l2543
  4738                           
  4739                           ;doprnt.c: 1417: (putch('0') );
  4740                           
  4741                           ;doprnt.c: 1416: do
  4742  01DF  3030               	movlw	48
  4743  01E0  318D  2521  3180   	fcall	_putch
  4744                           
  4745                           ;doprnt.c: 1418: while(--width);
  4746  01E3  30FF               	movlw	255
  4747  01E4  0020               	movlb	0	; select bank0
  4748  01E5  07BF               	addwf	printf@width,f
  4749  01E6  30FF               	movlw	255
  4750  01E7  3DC0               	addwfc	printf@width+1,f
  4751  01E8  29DB               	goto	L4
  4752  01E9                     l2533:	
  4753                           ;doprnt.c: 1420: } else
  4754                           
  4755                           
  4756                           ;doprnt.c: 1422: {
  4757                           ;doprnt.c: 1424: if(width
  4758                           ;doprnt.c: 1428: )
  4759  01E9  083F               	movf	printf@width,w
  4760  01EA  0440               	iorwf	printf@width+1,w
  4761  01EB  1903               	btfsc	3,2
  4762  01EC  29FA               	goto	l2539
  4763  01ED                     l2535:	
  4764                           ;doprnt.c: 1429: do
  4765                           
  4766                           
  4767                           ;doprnt.c: 1430: (putch(' ') );
  4768  01ED  3020               	movlw	32
  4769  01EE  318D  2521  3180   	fcall	_putch
  4770                           
  4771                           ;doprnt.c: 1431: while(--width);
  4772  01F1  30FF               	movlw	255
  4773  01F2  0020               	movlb	0	; select bank0
  4774  01F3  07BF               	addwf	printf@width,f
  4775  01F4  30FF               	movlw	255
  4776  01F5  3DC0               	addwfc	printf@width+1,f
  4777  01F6  083F               	movf	printf@width,w
  4778  01F7  0440               	iorwf	printf@width+1,w
  4779  01F8  1D03               	btfss	3,2
  4780  01F9  29ED               	goto	l2535
  4781  01FA                     l2539:	
  4782                           
  4783                           ;doprnt.c: 1438: if(flag & 0x03)
  4784  01FA  083E               	movf	printf@flag,w
  4785  01FB  3903               	andlw	3
  4786  01FC  1903               	btfsc	3,2
  4787  01FD  2A02               	goto	l2543
  4788                           
  4789                           ;doprnt.c: 1439: (putch('-') );
  4790  01FE  302D               	movlw	45
  4791  01FF  318D  2521  3180   	fcall	_putch
  4792  0202                     l2543:	
  4793                           
  4794                           ;doprnt.c: 1469: }
  4795                           ;doprnt.c: 1472: prec = c;
  4796  0202  0020               	movlb	0	; select bank0
  4797  0203  0841               	movf	printf@c,w
  4798  0204  00B2               	movwf	??_printf
  4799  0205  0832               	movf	??_printf,w
  4800  0206  00B6               	movwf	printf@prec
  4801  0207                     l2549:	
  4802                           ;doprnt.c: 1474: while(prec--) {
  4803                           
  4804  0207  30FF               	movlw	255
  4805  0208  0020               	movlb	0	; select bank0
  4806  0209  00B2               	movwf	??_printf
  4807  020A  0832               	movf	??_printf,w
  4808  020B  07B6               	addwf	printf@prec,f
  4809  020C  0A36               	incf	printf@prec,w
  4810  020D  1903               	btfsc	3,2
  4811  020E  286D               	goto	l2551
  4812                           
  4813                           ;doprnt.c: 1478: {
  4814                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4815  020F  300A               	movlw	10
  4816  0210  00A8               	movwf	___lwmod@divisor
  4817  0211  3000               	movlw	0
  4818  0212  00A9               	movwf	___lwmod@divisor+1
  4819  0213  0836               	movf	printf@prec,w
  4820  0214  00B2               	movwf	??_printf
  4821  0215  01B3               	clrf	??_printf+1
  4822  0216  35B2               	lslf	??_printf,f
  4823  0217  0DB3               	rlf	??_printf+1,f
  4824  0218  30C5               	movlw	low (_dpowers| (0+32768))
  4825  0219  0732               	addwf	??_printf,w
  4826  021A  0084               	movwf	4
  4827  021B  3083               	movlw	high (_dpowers| (0+32768))
  4828  021C  3D33               	addwfc	??_printf+1,w
  4829  021D  0085               	movwf	5
  4830  021E  3F00               	moviw [0]fsr0
  4831  021F  00A0               	movwf	___lwdiv@divisor
  4832  0220  3F01               	moviw [1]fsr0
  4833  0221  00A1               	movwf	___lwdiv@divisor+1
  4834  0222  083B               	movf	printf@val+1,w
  4835  0223  00A3               	movwf	___lwdiv@dividend+1
  4836  0224  083A               	movf	printf@val,w
  4837  0225  00A2               	movwf	___lwdiv@dividend
  4838  0226  318F  27CB  3180   	fcall	___lwdiv
  4839  0229  0020               	movlb	0	; select bank0
  4840  022A  0821               	movf	?___lwdiv+1,w
  4841  022B  00AB               	movwf	___lwmod@dividend+1
  4842  022C  0820               	movf	?___lwdiv,w
  4843  022D  00AA               	movwf	___lwmod@dividend
  4844  022E  3187  27CC  3180   	fcall	___lwmod
  4845  0231  0020               	movlb	0	; select bank0
  4846  0232  0828               	movf	?___lwmod,w
  4847  0233  3E30               	addlw	48
  4848  0234  00B4               	movwf	??_printf+2
  4849  0235  0834               	movf	??_printf+2,w
  4850  0236  00C1               	movwf	printf@c
  4851                           
  4852                           ;doprnt.c: 1523: }
  4853                           ;doprnt.c: 1524: (putch(c) );
  4854  0237  0841               	movf	printf@c,w
  4855  0238  318D  2521  3180   	fcall	_putch
  4856  023B  2A07               	goto	l2549
  4857  023C                     l295:	
  4858                           ;doprnt.c: 1540: return 0;
  4859                           ;	Return value of _printf is never used
  4860                           
  4861                           ;doprnt.c: 1525: }
  4862                           ;doprnt.c: 1533: }
  4863                           ;doprnt.c: 1535: alldone:
  4864                           
  4865  023C  0008               	return
  4866  023D                     __end_of_printf:	
  4867                           
  4868                           	psect	text12
  4869  0D21                     __ptext12:	
  4870 ;; *************** function _putch *****************
  4871 ;; Defined at:
  4872 ;;		line 160 in file "mcc_generated_files/eusart.c"
  4873 ;; Parameters:    Size  Location     Type
  4874 ;;  txData          1    wreg     unsigned char 
  4875 ;; Auto vars:     Size  Location     Type
  4876 ;;  txData          1    2[BANK0 ] unsigned char 
  4877 ;; Return value:  Size  Location     Type
  4878 ;;                  1    wreg      void 
  4879 ;; Registers used:
  4880 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4881 ;; Tracked objects:
  4882 ;;		On entry : 0/0
  4883 ;;		On exit  : 0/0
  4884 ;;		Unchanged: 0/0
  4885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4887 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4889 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4890 ;;Total ram usage:        1 bytes
  4891 ;; Hardware stack levels used:    1
  4892 ;; Hardware stack levels required when called:    6
  4893 ;; This function calls:
  4894 ;;		_EUSART_Write
  4895 ;; This function is called by:
  4896 ;;		_printf
  4897 ;; This function uses a non-reentrant model
  4898 ;;
  4899                           
  4900                           
  4901                           ;psect for function _putch
  4902  0D21                     _putch:	
  4903                           
  4904                           ;incstack = 0
  4905                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4906                           ;putch@txData stored from wreg
  4907  0D21  0020               	movlb	0	; select bank0
  4908  0D22  00A2               	movwf	putch@txData
  4909                           
  4910                           ;eusart.c: 162: EUSART_Write(txData);
  4911  0D23  0822               	movf	putch@txData,w
  4912  0D24  318F  2731         	fcall	_EUSART_Write
  4913  0D26  0008               	return
  4914  0D27                     __end_of_putch:	
  4915                           
  4916                           	psect	text13
  4917  0F31                     __ptext13:	
  4918 ;; *************** function _EUSART_Write *****************
  4919 ;; Defined at:
  4920 ;;		line 132 in file "mcc_generated_files/eusart.c"
  4921 ;; Parameters:    Size  Location     Type
  4922 ;;  txData          1    wreg     unsigned char 
  4923 ;; Auto vars:     Size  Location     Type
  4924 ;;  txData          1    1[BANK0 ] unsigned char 
  4925 ;; Return value:  Size  Location     Type
  4926 ;;                  1    wreg      void 
  4927 ;; Registers used:
  4928 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4929 ;; Tracked objects:
  4930 ;;		On entry : 0/0
  4931 ;;		On exit  : 0/0
  4932 ;;		Unchanged: 0/0
  4933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4935 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4936 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4937 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4938 ;;Total ram usage:        2 bytes
  4939 ;; Hardware stack levels used:    1
  4940 ;; Hardware stack levels required when called:    5
  4941 ;; This function calls:
  4942 ;;		Nothing
  4943 ;; This function is called by:
  4944 ;;		_putch
  4945 ;; This function uses a non-reentrant model
  4946 ;;
  4947                           
  4948                           
  4949                           ;psect for function _EUSART_Write
  4950  0F31                     _EUSART_Write:	
  4951                           
  4952                           ;incstack = 0
  4953                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  4954                           ;EUSART_Write@txData stored from wreg
  4955  0F31  0020               	movlb	0	; select bank0
  4956  0F32  00A1               	movwf	EUSART_Write@txData
  4957  0F33                     l2329:	
  4958                           ;eusart.c: 135: {
  4959                           
  4960                           ;eusart.c: 134: while(0 == eusartTxBufferRemaining)
  4961                           
  4962  0F33  0868               	movf	_eusartTxBufferRemaining,w	;volatile
  4963  0F34  1903               	btfsc	3,2
  4964  0F35  2F33               	goto	l2329
  4965                           
  4966                           ;eusart.c: 136: }
  4967                           ;eusart.c: 138: if(0 == PIE1bits.TXIE)
  4968  0F36  0021               	movlb	1	; select bank1
  4969  0F37  1A11               	btfsc	17,4	;volatile
  4970  0F38  2F3E               	goto	l345
  4971                           
  4972                           ;eusart.c: 139: {
  4973                           ;eusart.c: 140: TXREG = txData;
  4974  0F39  0020               	movlb	0	; select bank0
  4975  0F3A  0821               	movf	EUSART_Write@txData,w
  4976  0F3B  0023               	movlb	3	; select bank3
  4977  0F3C  009A               	movwf	26	;volatile
  4978                           
  4979                           ;eusart.c: 141: }
  4980  0F3D  2F52               	goto	l2343
  4981  0F3E                     l345:	
  4982                           
  4983                           ;eusart.c: 142: else
  4984                           ;eusart.c: 143: {
  4985                           ;eusart.c: 144: PIE1bits.TXIE = 0;
  4986  0F3E  1211               	bcf	17,4	;volatile
  4987                           
  4988                           ;eusart.c: 145: eusartTxBuffer[eusartTxHead++] = txData;
  4989  0F3F  0020               	movlb	0	; select bank0
  4990  0F40  0821               	movf	EUSART_Write@txData,w
  4991  0F41  00A0               	movwf	??_EUSART_Write
  4992  0F42  087C               	movf	_eusartTxHead,w
  4993  0F43  3EA8               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  4994  0F44  0086               	movwf	6
  4995  0F45  0187               	clrf	7
  4996  0F46  0820               	movf	??_EUSART_Write,w
  4997  0F47  0081               	movwf	1
  4998  0F48  3001               	movlw	1
  4999  0F49  00A0               	movwf	??_EUSART_Write
  5000  0F4A  0820               	movf	??_EUSART_Write,w
  5001  0F4B  07FC               	addwf	_eusartTxHead,f	;volatile
  5002                           
  5003                           ;eusart.c: 146: if(sizeof(eusartTxBuffer) <= eusartTxHead)
  5004  0F4C  3008               	movlw	8
  5005  0F4D  027C               	subwf	_eusartTxHead,w	;volatile
  5006  0F4E  1803               	btfsc	3,0
  5007                           
  5008                           ;eusart.c: 147: {
  5009                           ;eusart.c: 148: eusartTxHead = 0;
  5010  0F4F  01FC               	clrf	_eusartTxHead	;volatile
  5011                           
  5012                           ;eusart.c: 149: }
  5013                           ;eusart.c: 150: eusartTxBufferRemaining--;
  5014  0F50  3001               	movlw	1
  5015  0F51  02E8               	subwf	_eusartTxBufferRemaining,f	;volatile
  5016  0F52                     l2343:	
  5017                           
  5018                           ;eusart.c: 151: }
  5019                           ;eusart.c: 152: PIE1bits.TXIE = 1;
  5020  0F52  0021               	movlb	1	; select bank1
  5021  0F53  1611               	bsf	17,4	;volatile
  5022  0F54  0008               	return
  5023  0F55                     __end_of_EUSART_Write:	
  5024                           
  5025                           	psect	text14
  5026  07CC                     __ptext14:	
  5027 ;; *************** function ___lwmod *****************
  5028 ;; Defined at:
  5029 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  5030 ;; Parameters:    Size  Location     Type
  5031 ;;  divisor         2    8[BANK0 ] unsigned int 
  5032 ;;  dividend        2   10[BANK0 ] unsigned int 
  5033 ;; Auto vars:     Size  Location     Type
  5034 ;;  counter         1   13[BANK0 ] unsigned char 
  5035 ;; Return value:  Size  Location     Type
  5036 ;;                  2    8[BANK0 ] unsigned int 
  5037 ;; Registers used:
  5038 ;;		wreg, status,2, status,0
  5039 ;; Tracked objects:
  5040 ;;		On entry : 0/0
  5041 ;;		On exit  : 0/0
  5042 ;;		Unchanged: 0/0
  5043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5044 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5045 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5046 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5047 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5048 ;;Total ram usage:        6 bytes
  5049 ;; Hardware stack levels used:    1
  5050 ;; Hardware stack levels required when called:    5
  5051 ;; This function calls:
  5052 ;;		Nothing
  5053 ;; This function is called by:
  5054 ;;		_printf
  5055 ;; This function uses a non-reentrant model
  5056 ;;
  5057                           
  5058                           
  5059                           ;psect for function ___lwmod
  5060  07CC                     ___lwmod:	
  5061                           
  5062                           ;incstack = 0
  5063                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  5064  07CC  0020               	movlb	0	; select bank0
  5065  07CD  0828               	movf	___lwmod@divisor,w
  5066  07CE  0429               	iorwf	___lwmod@divisor+1,w
  5067  07CF  1903               	btfsc	3,2
  5068  07D0  2FF4               	goto	l2417
  5069  07D1  01AD               	clrf	___lwmod@counter
  5070  07D2  0AAD               	incf	___lwmod@counter,f
  5071  07D3                     l2407:	
  5072  07D3  1BA9               	btfsc	___lwmod@divisor+1,7
  5073  07D4  2FDF               	goto	l2409
  5074  07D5  3001               	movlw	1
  5075  07D6                     u1465:	
  5076  07D6  35A8               	lslf	___lwmod@divisor,f
  5077  07D7  0DA9               	rlf	___lwmod@divisor+1,f
  5078  07D8  0B89               	decfsz	9,f
  5079  07D9  2FD6               	goto	u1465
  5080  07DA  3001               	movlw	1
  5081  07DB  00AC               	movwf	??___lwmod
  5082  07DC  082C               	movf	??___lwmod,w
  5083  07DD  07AD               	addwf	___lwmod@counter,f
  5084  07DE  2FD3               	goto	l2407
  5085  07DF                     l2409:	
  5086  07DF  0829               	movf	___lwmod@divisor+1,w
  5087  07E0  022B               	subwf	___lwmod@dividend+1,w
  5088  07E1  1D03               	skipz
  5089  07E2  2FE5               	goto	u1485
  5090  07E3  0828               	movf	___lwmod@divisor,w
  5091  07E4  022A               	subwf	___lwmod@dividend,w
  5092  07E5                     u1485:	
  5093  07E5  1C03               	skipc
  5094  07E6  2FEB               	goto	l2413
  5095  07E7  0828               	movf	___lwmod@divisor,w
  5096  07E8  02AA               	subwf	___lwmod@dividend,f
  5097  07E9  0829               	movf	___lwmod@divisor+1,w
  5098  07EA  3BAB               	subwfb	___lwmod@dividend+1,f
  5099  07EB                     l2413:	
  5100  07EB  3001               	movlw	1
  5101  07EC                     u1495:	
  5102  07EC  36A9               	lsrf	___lwmod@divisor+1,f
  5103  07ED  0CA8               	rrf	___lwmod@divisor,f
  5104  07EE  0B89               	decfsz	9,f
  5105  07EF  2FEC               	goto	u1495
  5106  07F0  3001               	movlw	1
  5107  07F1  02AD               	subwf	___lwmod@counter,f
  5108  07F2  1D03               	btfss	3,2
  5109  07F3  2FDF               	goto	l2409
  5110  07F4                     l2417:	
  5111  07F4  082B               	movf	___lwmod@dividend+1,w
  5112  07F5  00A9               	movwf	?___lwmod+1
  5113  07F6  082A               	movf	___lwmod@dividend,w
  5114  07F7  00A8               	movwf	?___lwmod
  5115  07F8  0008               	return
  5116  07F9                     __end_of___lwmod:	
  5117                           
  5118                           	psect	text15
  5119  0FCB                     __ptext15:	
  5120 ;; *************** function ___lwdiv *****************
  5121 ;; Defined at:
  5122 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  5123 ;; Parameters:    Size  Location     Type
  5124 ;;  divisor         2    0[BANK0 ] unsigned int 
  5125 ;;  dividend        2    2[BANK0 ] unsigned int 
  5126 ;; Auto vars:     Size  Location     Type
  5127 ;;  quotient        2    5[BANK0 ] unsigned int 
  5128 ;;  counter         1    7[BANK0 ] unsigned char 
  5129 ;; Return value:  Size  Location     Type
  5130 ;;                  2    0[BANK0 ] unsigned int 
  5131 ;; Registers used:
  5132 ;;		wreg, status,2, status,0
  5133 ;; Tracked objects:
  5134 ;;		On entry : 0/0
  5135 ;;		On exit  : 0/0
  5136 ;;		Unchanged: 0/0
  5137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5138 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5139 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5140 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5141 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5142 ;;Total ram usage:        8 bytes
  5143 ;; Hardware stack levels used:    1
  5144 ;; Hardware stack levels required when called:    5
  5145 ;; This function calls:
  5146 ;;		Nothing
  5147 ;; This function is called by:
  5148 ;;		_printf
  5149 ;; This function uses a non-reentrant model
  5150 ;;
  5151                           
  5152                           
  5153                           ;psect for function ___lwdiv
  5154  0FCB                     ___lwdiv:	
  5155                           
  5156                           ;incstack = 0
  5157                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  5158  0FCB  0020               	movlb	0	; select bank0
  5159  0FCC  01A5               	clrf	___lwdiv@quotient
  5160  0FCD  01A6               	clrf	___lwdiv@quotient+1
  5161  0FCE  0820               	movf	___lwdiv@divisor,w
  5162  0FCF  0421               	iorwf	___lwdiv@divisor+1,w
  5163  0FD0  1903               	btfsc	3,2
  5164  0FD1  2FFB               	goto	l2395
  5165  0FD2  01A7               	clrf	___lwdiv@counter
  5166  0FD3  0AA7               	incf	___lwdiv@counter,f
  5167  0FD4                     l2383:	
  5168  0FD4  1BA1               	btfsc	___lwdiv@divisor+1,7
  5169  0FD5  2FE0               	goto	l2385
  5170  0FD6  3001               	movlw	1
  5171  0FD7                     u1395:	
  5172  0FD7  35A0               	lslf	___lwdiv@divisor,f
  5173  0FD8  0DA1               	rlf	___lwdiv@divisor+1,f
  5174  0FD9  0B89               	decfsz	9,f
  5175  0FDA  2FD7               	goto	u1395
  5176  0FDB  3001               	movlw	1
  5177  0FDC  00A4               	movwf	??___lwdiv
  5178  0FDD  0824               	movf	??___lwdiv,w
  5179  0FDE  07A7               	addwf	___lwdiv@counter,f
  5180  0FDF  2FD4               	goto	l2383
  5181  0FE0                     l2385:	
  5182  0FE0  3001               	movlw	1
  5183  0FE1                     u1415:	
  5184  0FE1  35A5               	lslf	___lwdiv@quotient,f
  5185  0FE2  0DA6               	rlf	___lwdiv@quotient+1,f
  5186  0FE3  0B89               	decfsz	9,f
  5187  0FE4  2FE1               	goto	u1415
  5188  0FE5  0821               	movf	___lwdiv@divisor+1,w
  5189  0FE6  0223               	subwf	___lwdiv@dividend+1,w
  5190  0FE7  1D03               	skipz
  5191  0FE8  2FEB               	goto	u1425
  5192  0FE9  0820               	movf	___lwdiv@divisor,w
  5193  0FEA  0222               	subwf	___lwdiv@dividend,w
  5194  0FEB                     u1425:	
  5195  0FEB  1C03               	skipc
  5196  0FEC  2FF2               	goto	l2391
  5197  0FED  0820               	movf	___lwdiv@divisor,w
  5198  0FEE  02A2               	subwf	___lwdiv@dividend,f
  5199  0FEF  0821               	movf	___lwdiv@divisor+1,w
  5200  0FF0  3BA3               	subwfb	___lwdiv@dividend+1,f
  5201  0FF1  1425               	bsf	___lwdiv@quotient,0
  5202  0FF2                     l2391:	
  5203  0FF2  3001               	movlw	1
  5204  0FF3                     u1435:	
  5205  0FF3  36A1               	lsrf	___lwdiv@divisor+1,f
  5206  0FF4  0CA0               	rrf	___lwdiv@divisor,f
  5207  0FF5  0B89               	decfsz	9,f
  5208  0FF6  2FF3               	goto	u1435
  5209  0FF7  3001               	movlw	1
  5210  0FF8  02A7               	subwf	___lwdiv@counter,f
  5211  0FF9  1D03               	btfss	3,2
  5212  0FFA  2FE0               	goto	l2385
  5213  0FFB                     l2395:	
  5214  0FFB  0826               	movf	___lwdiv@quotient+1,w
  5215  0FFC  00A1               	movwf	?___lwdiv+1
  5216  0FFD  0825               	movf	___lwdiv@quotient,w
  5217  0FFE  00A0               	movwf	?___lwdiv
  5218  0FFF  0008               	return
  5219  1000                     __end_of___lwdiv:	
  5220                           
  5221                           	psect	text16
  5222  0ECD                     __ptext16:	
  5223 ;; *************** function _PROTOCOL_I2C_Set_TLV *****************
  5224 ;; Defined at:
  5225 ;;		line 219 in file "protocol.c"
  5226 ;; Parameters:    Size  Location     Type
  5227 ;;  type            1    wreg     unsigned char 
  5228 ;;  length          1    0[BANK0 ] unsigned char 
  5229 ;;  pbuffer         1    1[BANK0 ] PTR unsigned char 
  5230 ;;		 -> PROTOCOL_Send_uint8_t@pbuf(1), sendbuf(16), position(4), 
  5231 ;; Auto vars:     Size  Location     Type
  5232 ;;  type            1    3[BANK0 ] unsigned char 
  5233 ;;  status          1    4[BANK0 ] enum E3141
  5234 ;; Return value:  Size  Location     Type
  5235 ;;                  1    wreg      void 
  5236 ;; Registers used:
  5237 ;;		wreg, status,2, status,0
  5238 ;; Tracked objects:
  5239 ;;		On entry : 0/0
  5240 ;;		On exit  : 0/0
  5241 ;;		Unchanged: 0/0
  5242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5243 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5244 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5245 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5246 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5247 ;;Total ram usage:        5 bytes
  5248 ;; Hardware stack levels used:    1
  5249 ;; Hardware stack levels required when called:    5
  5250 ;; This function calls:
  5251 ;;		Nothing
  5252 ;; This function is called by:
  5253 ;;		_PROTOCOL_I2C_Send_uint8_t
  5254 ;; This function uses a non-reentrant model
  5255 ;;
  5256                           
  5257                           
  5258                           ;psect for function _PROTOCOL_I2C_Set_TLV
  5259  0ECD                     _PROTOCOL_I2C_Set_TLV:	
  5260                           
  5261                           ;incstack = 0
  5262                           ; Regs used in _PROTOCOL_I2C_Set_TLV: [wreg+status,2+status,0]
  5263                           ;PROTOCOL_I2C_Set_TLV@type stored from wreg
  5264  0ECD  0020               	movlb	0	; select bank0
  5265  0ECE  00A3               	movwf	PROTOCOL_I2C_Set_TLV@type
  5266                           
  5267                           ;protocol.c: 220: READBUF_STATUS status = readbuf.status;
  5268  0ECF  0021               	movlb	1	; select bank1
  5269  0ED0  085C               	movf	(_readbuf^(0+128)+3),w
  5270  0ED1  0020               	movlb	0	; select bank0
  5271  0ED2  00A2               	movwf	??_PROTOCOL_I2C_Set_TLV
  5272  0ED3  0822               	movf	??_PROTOCOL_I2C_Set_TLV,w
  5273  0ED4  00A4               	movwf	PROTOCOL_I2C_Set_TLV@status
  5274                           
  5275                           ;protocol.c: 221: if (status == COMPLETE) {
  5276  0ED5  3003               	movlw	3
  5277  0ED6  0624               	xorwf	PROTOCOL_I2C_Set_TLV@status,w
  5278  0ED7  1D03               	btfss	3,2
  5279  0ED8  0008               	return
  5280                           
  5281                           ;protocol.c: 222: readbuf.type = type;
  5282  0ED9  0823               	movf	PROTOCOL_I2C_Set_TLV@type,w
  5283  0EDA  00A2               	movwf	??_PROTOCOL_I2C_Set_TLV
  5284  0EDB  0822               	movf	??_PROTOCOL_I2C_Set_TLV,w
  5285  0EDC  0021               	movlb	1	; select bank1
  5286  0EDD  00D9               	movwf	_readbuf^(0+128)
  5287                           
  5288                           ;protocol.c: 223: readbuf.length = length;
  5289  0EDE  0020               	movlb	0	; select bank0
  5290  0EDF  0820               	movf	PROTOCOL_I2C_Set_TLV@length,w
  5291  0EE0  00A2               	movwf	??_PROTOCOL_I2C_Set_TLV
  5292  0EE1  0822               	movf	??_PROTOCOL_I2C_Set_TLV,w
  5293  0EE2  0021               	movlb	1	; select bank1
  5294  0EE3  00DA               	movwf	(_readbuf^(0+128)+1)
  5295                           
  5296                           ;protocol.c: 224: readbuf.pbuffer = pbuffer;
  5297  0EE4  0020               	movlb	0	; select bank0
  5298  0EE5  0821               	movf	PROTOCOL_I2C_Set_TLV@pbuffer,w
  5299  0EE6  00A2               	movwf	??_PROTOCOL_I2C_Set_TLV
  5300  0EE7  0822               	movf	??_PROTOCOL_I2C_Set_TLV,w
  5301  0EE8  0021               	movlb	1	; select bank1
  5302  0EE9  00DB               	movwf	(low ((_readbuf| 0+2)))^(0+128)
  5303                           
  5304                           ;protocol.c: 225: readbuf.buf_cnt = 0;
  5305  0EEA  01DD               	clrf	(_readbuf^(0+128)+4)
  5306                           
  5307                           ;protocol.c: 226: readbuf.status = TLV_SET;
  5308  0EEB  01DC               	clrf	(_readbuf^(0+128)+3)
  5309  0EEC  0008               	return
  5310  0EED                     __end_of_PROTOCOL_I2C_Set_TLV:	
  5311                           
  5312                           	psect	text17
  5313  0CFC                     __ptext17:	
  5314 ;; *************** function _ADC_StartConversion *****************
  5315 ;; Defined at:
  5316 ;;		line 90 in file "mcc_generated_files/adc.c"
  5317 ;; Parameters:    Size  Location     Type
  5318 ;;		None
  5319 ;; Auto vars:     Size  Location     Type
  5320 ;;		None
  5321 ;; Return value:  Size  Location     Type
  5322 ;;                  1    wreg      void 
  5323 ;; Registers used:
  5324 ;;		None
  5325 ;; Tracked objects:
  5326 ;;		On entry : 0/0
  5327 ;;		On exit  : 0/0
  5328 ;;		Unchanged: 0/0
  5329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5330 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5331 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5332 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5333 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5334 ;;Total ram usage:        0 bytes
  5335 ;; Hardware stack levels used:    1
  5336 ;; Hardware stack levels required when called:    5
  5337 ;; This function calls:
  5338 ;;		Nothing
  5339 ;; This function is called by:
  5340 ;;		_loop_func
  5341 ;; This function uses a non-reentrant model
  5342 ;;
  5343                           
  5344                           
  5345                           ;psect for function _ADC_StartConversion
  5346  0CFC                     _ADC_StartConversion:	
  5347                           
  5348                           ;adc.c: 93: ADCON0bits.GO_nDONE = 1;
  5349                           
  5350                           ;incstack = 0
  5351                           ; Regs used in _ADC_StartConversion: []
  5352  0CFC  0021               	movlb	1	; select bank1
  5353  0CFD  149D               	bsf	29,1	;volatile
  5354  0CFE  0008               	return
  5355  0CFF                     __end_of_ADC_StartConversion:	
  5356                           
  5357                           	psect	text18
  5358  0DB9                     __ptext18:	
  5359 ;; *************** function _ADC_SelectChannel *****************
  5360 ;; Defined at:
  5361 ;;		line 82 in file "mcc_generated_files/adc.c"
  5362 ;; Parameters:    Size  Location     Type
  5363 ;;  channel         1    wreg     enum E2698
  5364 ;; Auto vars:     Size  Location     Type
  5365 ;;  channel         1    1[BANK0 ] enum E2698
  5366 ;; Return value:  Size  Location     Type
  5367 ;;                  1    wreg      void 
  5368 ;; Registers used:
  5369 ;;		wreg, status,2, status,0
  5370 ;; Tracked objects:
  5371 ;;		On entry : 0/0
  5372 ;;		On exit  : 0/0
  5373 ;;		Unchanged: 0/0
  5374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5375 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5376 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5377 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5378 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5379 ;;Total ram usage:        2 bytes
  5380 ;; Hardware stack levels used:    1
  5381 ;; Hardware stack levels required when called:    5
  5382 ;; This function calls:
  5383 ;;		Nothing
  5384 ;; This function is called by:
  5385 ;;		_loop_func
  5386 ;; This function uses a non-reentrant model
  5387 ;;
  5388                           
  5389                           
  5390                           ;psect for function _ADC_SelectChannel
  5391  0DB9                     _ADC_SelectChannel:	
  5392                           
  5393                           ;incstack = 0
  5394                           ; Regs used in _ADC_SelectChannel: [wreg+status,2+status,0]
  5395                           ;ADC_SelectChannel@channel stored from wreg
  5396  0DB9  0020               	movlb	0	; select bank0
  5397  0DBA  00A1               	movwf	ADC_SelectChannel@channel
  5398                           
  5399                           ;adc.c: 85: ADCON0bits.CHS = channel;
  5400  0DBB  0821               	movf	ADC_SelectChannel@channel,w
  5401  0DBC  00A0               	movwf	??_ADC_SelectChannel
  5402  0DBD  0DA0               	rlf	??_ADC_SelectChannel,f
  5403  0DBE  0DA0               	rlf	??_ADC_SelectChannel,f
  5404  0DBF  0021               	movlb	1	; select bank1
  5405  0DC0  081D               	movf	29,w	;volatile
  5406  0DC1  0020               	movlb	0	; select bank0
  5407  0DC2  0620               	xorwf	??_ADC_SelectChannel,w
  5408  0DC3  3983               	andlw	-125
  5409  0DC4  0620               	xorwf	??_ADC_SelectChannel,w
  5410  0DC5  0021               	movlb	1	; select bank1
  5411  0DC6  009D               	movwf	29	;volatile
  5412                           
  5413                           ;adc.c: 87: ADCON0bits.ADON = 1;
  5414  0DC7  141D               	bsf	29,0	;volatile
  5415  0DC8  0008               	return
  5416  0DC9                     __end_of_ADC_SelectChannel:	
  5417                           
  5418                           	psect	text19
  5419  07F9                     __ptext19:	
  5420 ;; *************** function _ADC_IsConversionDone *****************
  5421 ;; Defined at:
  5422 ;;		line 97 in file "mcc_generated_files/adc.c"
  5423 ;; Parameters:    Size  Location     Type
  5424 ;;		None
  5425 ;; Auto vars:     Size  Location     Type
  5426 ;;		None
  5427 ;; Return value:  Size  Location     Type
  5428 ;;                  1    wreg      unsigned char 
  5429 ;; Registers used:
  5430 ;;		wreg, status,0
  5431 ;; Tracked objects:
  5432 ;;		On entry : 0/0
  5433 ;;		On exit  : 0/0
  5434 ;;		Unchanged: 0/0
  5435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5439 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5440 ;;Total ram usage:        0 bytes
  5441 ;; Hardware stack levels used:    1
  5442 ;; Hardware stack levels required when called:    5
  5443 ;; This function calls:
  5444 ;;		Nothing
  5445 ;; This function is called by:
  5446 ;;		_loop_func
  5447 ;; This function uses a non-reentrant model
  5448 ;;
  5449                           
  5450                           
  5451                           ;psect for function _ADC_IsConversionDone
  5452  07F9                     _ADC_IsConversionDone:	
  5453                           
  5454                           ;adc.c: 100: return ((bool)(!ADCON0bits.GO_nDONE));
  5455                           
  5456                           ;incstack = 0
  5457                           ; Regs used in _ADC_IsConversionDone: [wreg+status,0]
  5458  07F9  1003               	clrc
  5459  07FA  0021               	movlb	1	; select bank1
  5460  07FB  1C9D               	btfss	29,1	;volatile
  5461  07FC  1403               	setc
  5462  07FD  3000               	movlw	0
  5463  07FE  3D09               	addwfc	9,w
  5464  07FF  0008               	return
  5465  0800                     __end_of_ADC_IsConversionDone:	
  5466                           
  5467                           	psect	text20
  5468  0D47                     __ptext20:	
  5469 ;; *************** function _ADC_GetConversionResult *****************
  5470 ;; Defined at:
  5471 ;;		line 103 in file "mcc_generated_files/adc.c"
  5472 ;; Parameters:    Size  Location     Type
  5473 ;;		None
  5474 ;; Auto vars:     Size  Location     Type
  5475 ;;		None
  5476 ;; Return value:  Size  Location     Type
  5477 ;;                  2    0[BANK0 ] unsigned int 
  5478 ;; Registers used:
  5479 ;;		wreg
  5480 ;; Tracked objects:
  5481 ;;		On entry : 0/0
  5482 ;;		On exit  : 0/0
  5483 ;;		Unchanged: 0/0
  5484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5485 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5486 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5488 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5489 ;;Total ram usage:        2 bytes
  5490 ;; Hardware stack levels used:    1
  5491 ;; Hardware stack levels required when called:    5
  5492 ;; This function calls:
  5493 ;;		Nothing
  5494 ;; This function is called by:
  5495 ;;		_loop_func
  5496 ;; This function uses a non-reentrant model
  5497 ;;
  5498                           
  5499                           
  5500                           ;psect for function _ADC_GetConversionResult
  5501  0D47                     _ADC_GetConversionResult:	
  5502                           
  5503                           ;adc.c: 106: return ((adc_result_t)((ADRESH << 8) + ADRESL));
  5504                           
  5505                           ;incstack = 0
  5506                           ; Regs used in _ADC_GetConversionResult: [wreg]
  5507  0D47  0021               	movlb	1	; select bank1
  5508  0D48  081C               	movf	28,w	;volatile
  5509  0D49  0020               	movlb	0	; select bank0
  5510  0D4A  00A1               	movwf	?_ADC_GetConversionResult+1
  5511  0D4B  0021               	movlb	1	; select bank1
  5512  0D4C  081B               	movf	27,w	;volatile
  5513  0D4D  0020               	movlb	0	; select bank0
  5514  0D4E  00A0               	movwf	?_ADC_GetConversionResult
  5515  0D4F  0008               	return
  5516  0D50                     __end_of_ADC_GetConversionResult:	
  5517                           
  5518                           	psect	text21
  5519  060B                     __ptext21:	
  5520 ;; *************** function _atoi *****************
  5521 ;; Defined at:
  5522 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\atoi.c"
  5523 ;; Parameters:    Size  Location     Type
  5524 ;;  s               1    wreg     PTR const unsigned char 
  5525 ;;		 -> buf(48), 
  5526 ;; Auto vars:     Size  Location     Type
  5527 ;;  s               1   13[BANK0 ] PTR const unsigned char 
  5528 ;;		 -> buf(48), 
  5529 ;;  a               2   11[BANK0 ] int 
  5530 ;;  sign            1   10[BANK0 ] unsigned char 
  5531 ;; Return value:  Size  Location     Type
  5532 ;;                  2    6[BANK0 ] int 
  5533 ;; Registers used:
  5534 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5535 ;; Tracked objects:
  5536 ;;		On entry : 0/0
  5537 ;;		On exit  : 0/0
  5538 ;;		Unchanged: 0/0
  5539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5540 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5541 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5542 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5543 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5544 ;;Total ram usage:        8 bytes
  5545 ;; Hardware stack levels used:    1
  5546 ;; Hardware stack levels required when called:    6
  5547 ;; This function calls:
  5548 ;;		___wmul
  5549 ;;		_isdigit
  5550 ;; This function is called by:
  5551 ;;		_PROTOCOL_Loop
  5552 ;; This function uses a non-reentrant model
  5553 ;;
  5554                           
  5555                           
  5556                           ;psect for function _atoi
  5557  060B                     _atoi:	
  5558                           
  5559                           ;incstack = 0
  5560                           ; Regs used in _atoi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5561                           ;atoi@s stored from wreg
  5562  060B  0020               	movlb	0	; select bank0
  5563  060C  00AD               	movwf	atoi@s
  5564  060D                     l2897:	
  5565  060D  082D               	movf	atoi@s,w
  5566  060E  0086               	movwf	6
  5567  060F  3001               	movlw	1	; select bank2/3
  5568  0610  0087               	movwf	7
  5569  0611  3020               	movlw	32
  5570  0612  0601               	xorwf	1,w
  5571  0613  1D03               	btfss	3,2
  5572  0614  2E1A               	goto	l2899
  5573  0615                     l2895:	
  5574  0615  3001               	movlw	1
  5575  0616  00A8               	movwf	??_atoi
  5576  0617  0828               	movf	??_atoi,w
  5577  0618  07AD               	addwf	atoi@s,f
  5578  0619  2E0D               	goto	l2897
  5579  061A                     l2899:	
  5580  061A  082D               	movf	atoi@s,w
  5581  061B  0086               	movwf	6
  5582  061C  3001               	movlw	1	; select bank2/3
  5583  061D  0087               	movwf	7
  5584  061E  3009               	movlw	9
  5585  061F  0601               	xorwf	1,w
  5586  0620  1903               	btfsc	3,2
  5587  0621  2E15               	goto	l2895
  5588  0622  01AB               	clrf	atoi@a
  5589  0623  01AC               	clrf	atoi@a+1
  5590  0624  01AA               	clrf	atoi@sign
  5591  0625  082D               	movf	atoi@s,w
  5592  0626  0086               	movwf	6
  5593  0627  3001               	movlw	1	; select bank2/3
  5594  0628  0087               	movwf	7
  5595  0629  302D               	movlw	45
  5596  062A  0601               	xorwf	1,w
  5597  062B  1D03               	btfss	3,2
  5598  062C  2E32               	goto	l2907
  5599  062D  3001               	movlw	1
  5600  062E  00A8               	movwf	??_atoi
  5601  062F  0828               	movf	??_atoi,w
  5602  0630  07AA               	addwf	atoi@sign,f
  5603  0631  2E3A               	goto	l2913
  5604  0632                     l2907:	
  5605  0632  082D               	movf	atoi@s,w
  5606  0633  0086               	movwf	6
  5607  0634  3001               	movlw	1	; select bank2/3
  5608  0635  0087               	movwf	7
  5609  0636  302B               	movlw	43
  5610  0637  0601               	xorwf	1,w
  5611  0638  1D03               	btfss	3,2
  5612  0639  2E3E               	goto	l2915
  5613  063A                     l2913:	
  5614  063A  3001               	movlw	1
  5615  063B  00A8               	movwf	??_atoi
  5616  063C  0828               	movf	??_atoi,w
  5617  063D  07AD               	addwf	atoi@s,f
  5618  063E                     l2915:	
  5619  063E  082D               	movf	atoi@s,w
  5620  063F  0086               	movwf	6
  5621  0640  3001               	movlw	1	; select bank2/3
  5622  0641  0087               	movwf	7
  5623  0642  0801               	movf	1,w
  5624  0643  318D  259B  3186   	fcall	_isdigit
  5625  0646  1C03               	btfss	3,0
  5626  0647  2E67               	goto	l2917
  5627  0648  0020               	movlb	0	; select bank0
  5628  0649  082C               	movf	atoi@a+1,w
  5629  064A  00A1               	movwf	___wmul@multiplier+1
  5630  064B  082B               	movf	atoi@a,w
  5631  064C  00A0               	movwf	___wmul@multiplier
  5632  064D  300A               	movlw	10
  5633  064E  00A2               	movwf	___wmul@multiplicand
  5634  064F  3000               	movlw	0
  5635  0650  00A3               	movwf	___wmul@multiplicand+1
  5636  0651  318E  2658  3186   	fcall	___wmul
  5637  0654  0020               	movlb	0	; select bank0
  5638  0655  082D               	movf	atoi@s,w
  5639  0656  0086               	movwf	6
  5640  0657  3001               	movlw	1	; select bank2/3
  5641  0658  0087               	movwf	7
  5642  0659  0801               	movf	1,w
  5643  065A  0720               	addwf	?___wmul,w
  5644  065B  00A8               	movwf	??_atoi
  5645  065C  0821               	movf	?___wmul+1,w
  5646  065D  1803               	skipnc
  5647  065E  0A21               	incf	?___wmul+1,w
  5648  065F  00A9               	movwf	??_atoi+1
  5649  0660  0828               	movf	??_atoi,w
  5650  0661  3ED0               	addlw	208
  5651  0662  00AB               	movwf	atoi@a
  5652  0663  30FF               	movlw	255
  5653  0664  3D29               	addwfc	??_atoi+1,w
  5654  0665  00AC               	movwf	atoi@a+1
  5655  0666  2E3A               	goto	l2913
  5656  0667                     l2917:	
  5657  0667  0020               	movlb	0	; select bank0
  5658  0668  082A               	movf	atoi@sign,w
  5659  0669  1903               	btfsc	3,2
  5660  066A  2E77               	goto	l2923
  5661  066B  092B               	comf	atoi@a,w
  5662  066C  00A8               	movwf	??_atoi
  5663  066D  092C               	comf	atoi@a+1,w
  5664  066E  00A9               	movwf	??_atoi+1
  5665  066F  0AA8               	incf	??_atoi,f
  5666  0670  1903               	skipnz
  5667  0671  0AA9               	incf	??_atoi+1,f
  5668  0672  0828               	movf	??_atoi,w
  5669  0673  00A6               	movwf	?_atoi
  5670  0674  0829               	movf	??_atoi+1,w
  5671  0675  00A7               	movwf	?_atoi+1
  5672  0676  0008               	return
  5673  0677                     l2923:	
  5674  0677  082C               	movf	atoi@a+1,w
  5675  0678  00A7               	movwf	?_atoi+1
  5676  0679  082B               	movf	atoi@a,w
  5677  067A  00A6               	movwf	?_atoi
  5678  067B  0008               	return
  5679  067C                     __end_of_atoi:	
  5680                           
  5681                           	psect	text22
  5682  0D9B                     __ptext22:	
  5683 ;; *************** function _isdigit *****************
  5684 ;; Defined at:
  5685 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  5686 ;; Parameters:    Size  Location     Type
  5687 ;;  c               1    wreg     unsigned char 
  5688 ;; Auto vars:     Size  Location     Type
  5689 ;;  c               1    1[BANK0 ] unsigned char 
  5690 ;; Return value:  Size  Location     Type
  5691 ;;		None               void
  5692 ;; Registers used:
  5693 ;;		wreg, status,2, status,0
  5694 ;; Tracked objects:
  5695 ;;		On entry : 0/0
  5696 ;;		On exit  : 0/0
  5697 ;;		Unchanged: 0/0
  5698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5700 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5701 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5702 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5703 ;;Total ram usage:        2 bytes
  5704 ;; Hardware stack levels used:    1
  5705 ;; Hardware stack levels required when called:    5
  5706 ;; This function calls:
  5707 ;;		Nothing
  5708 ;; This function is called by:
  5709 ;;		_printf
  5710 ;;		_atoi
  5711 ;; This function uses a non-reentrant model
  5712 ;;
  5713                           
  5714                           
  5715                           ;psect for function _isdigit
  5716  0D9B                     _isdigit:	
  5717                           
  5718                           ;incstack = 0
  5719                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  5720                           ;isdigit@c stored from wreg
  5721  0D9B  0020               	movlb	0	; select bank0
  5722  0D9C  00A1               	movwf	isdigit@c
  5723  0D9D  01A0               	clrf	_isdigit$1134
  5724  0D9E  303A               	movlw	58
  5725  0D9F  0221               	subwf	isdigit@c,w
  5726  0DA0  1803               	skipnc
  5727  0DA1  2DA8               	goto	l2355
  5728  0DA2  3030               	movlw	48
  5729  0DA3  0221               	subwf	isdigit@c,w
  5730  0DA4  1C03               	skipc
  5731  0DA5  2DA8               	goto	l2355
  5732  0DA6  01A0               	clrf	_isdigit$1134
  5733  0DA7  0AA0               	incf	_isdigit$1134,f
  5734  0DA8                     l2355:	
  5735  0DA8  0C20               	rrf	_isdigit$1134,w
  5736  0DA9  0008               	return
  5737  0DAA                     __end_of_isdigit:	
  5738                           
  5739                           	psect	text23
  5740  0E58                     __ptext23:	
  5741 ;; *************** function ___wmul *****************
  5742 ;; Defined at:
  5743 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  5744 ;; Parameters:    Size  Location     Type
  5745 ;;  multiplier      2    0[BANK0 ] unsigned int 
  5746 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  5747 ;; Auto vars:     Size  Location     Type
  5748 ;;  product         2    4[BANK0 ] unsigned int 
  5749 ;; Return value:  Size  Location     Type
  5750 ;;                  2    0[BANK0 ] unsigned int 
  5751 ;; Registers used:
  5752 ;;		wreg, status,2, status,0
  5753 ;; Tracked objects:
  5754 ;;		On entry : 0/0
  5755 ;;		On exit  : 0/0
  5756 ;;		Unchanged: 0/0
  5757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5758 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5759 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5760 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5761 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5762 ;;Total ram usage:        6 bytes
  5763 ;; Hardware stack levels used:    1
  5764 ;; Hardware stack levels required when called:    5
  5765 ;; This function calls:
  5766 ;;		Nothing
  5767 ;; This function is called by:
  5768 ;;		_printf
  5769 ;;		_atoi
  5770 ;; This function uses a non-reentrant model
  5771 ;;
  5772                           
  5773                           
  5774                           ;psect for function ___wmul
  5775  0E58                     ___wmul:	
  5776                           
  5777                           ;incstack = 0
  5778                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5779  0E58  0020               	movlb	0	; select bank0
  5780  0E59  01A4               	clrf	___wmul@product
  5781  0E5A  01A5               	clrf	___wmul@product+1
  5782  0E5B                     l2361:	
  5783  0E5B  1C20               	btfss	___wmul@multiplier,0
  5784  0E5C  2E61               	goto	l861
  5785  0E5D  0822               	movf	___wmul@multiplicand,w
  5786  0E5E  07A4               	addwf	___wmul@product,f
  5787  0E5F  0823               	movf	___wmul@multiplicand+1,w
  5788  0E60  3DA5               	addwfc	___wmul@product+1,f
  5789  0E61                     l861:	
  5790  0E61  3001               	movlw	1
  5791  0E62                     u1355:	
  5792  0E62  35A2               	lslf	___wmul@multiplicand,f
  5793  0E63  0DA3               	rlf	___wmul@multiplicand+1,f
  5794  0E64  0B89               	decfsz	9,f
  5795  0E65  2E62               	goto	u1355
  5796  0E66  3001               	movlw	1
  5797  0E67                     u1365:	
  5798  0E67  36A1               	lsrf	___wmul@multiplier+1,f
  5799  0E68  0CA0               	rrf	___wmul@multiplier,f
  5800  0E69  0B89               	decfsz	9,f
  5801  0E6A  2E67               	goto	u1365
  5802  0E6B  0820               	movf	___wmul@multiplier,w
  5803  0E6C  0421               	iorwf	___wmul@multiplier+1,w
  5804  0E6D  1D03               	btfss	3,2
  5805  0E6E  2E5B               	goto	l2361
  5806  0E6F  0825               	movf	___wmul@product+1,w
  5807  0E70  00A1               	movwf	?___wmul+1
  5808  0E71  0824               	movf	___wmul@product,w
  5809  0E72  00A0               	movwf	?___wmul
  5810  0E73  0008               	return
  5811  0E74                     __end_of___wmul:	
  5812                           
  5813                           	psect	text24
  5814  0D0F                     __ptext24:	
  5815 ;; *************** function _TMR0_HasOverflowOccured *****************
  5816 ;; Defined at:
  5817 ;;		line 101 in file "mcc_generated_files/tmr0.c"
  5818 ;; Parameters:    Size  Location     Type
  5819 ;;		None
  5820 ;; Auto vars:     Size  Location     Type
  5821 ;;		None
  5822 ;; Return value:  Size  Location     Type
  5823 ;;                  1    wreg      unsigned char 
  5824 ;; Registers used:
  5825 ;;		wreg, status,2, status,0
  5826 ;; Tracked objects:
  5827 ;;		On entry : 0/0
  5828 ;;		On exit  : 0/0
  5829 ;;		Unchanged: 0/0
  5830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5832 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5834 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5835 ;;Total ram usage:        0 bytes
  5836 ;; Hardware stack levels used:    1
  5837 ;; Hardware stack levels required when called:    5
  5838 ;; This function calls:
  5839 ;;		Nothing
  5840 ;; This function is called by:
  5841 ;;		_PROTOCOL_Loop
  5842 ;; This function uses a non-reentrant model
  5843 ;;
  5844                           
  5845                           
  5846                           ;psect for function _TMR0_HasOverflowOccured
  5847  0D0F                     _TMR0_HasOverflowOccured:	
  5848                           
  5849                           ;tmr0.c: 104: return(INTCONbits.TMR0IF);
  5850                           
  5851                           ;incstack = 0
  5852                           ; Regs used in _TMR0_HasOverflowOccured: [wreg+status,2+status,0]
  5853  0D0F  0C0B               	rrf	11,w	;volatile
  5854  0D10  0C89               	rrf	9,f
  5855  0D11  3901               	andlw	1
  5856  0D12  0008               	return
  5857  0D13                     __end_of_TMR0_HasOverflowOccured:	
  5858                           
  5859                           	psect	text25
  5860  0D8C                     __ptext25:	
  5861 ;; *************** function _PROTOCOL_Write_Device_Address *****************
  5862 ;; Defined at:
  5863 ;;		line 95 in file "protocol.c"
  5864 ;; Parameters:    Size  Location     Type
  5865 ;;  device_id_i2    1    wreg     unsigned char 
  5866 ;; Auto vars:     Size  Location     Type
  5867 ;;  device_id_i2    1    4[BANK0 ] unsigned char 
  5868 ;; Return value:  Size  Location     Type
  5869 ;;                  1    wreg      void 
  5870 ;; Registers used:
  5871 ;;		wreg, status,2, status,0, pclath, cstack
  5872 ;; Tracked objects:
  5873 ;;		On entry : 0/0
  5874 ;;		On exit  : 0/0
  5875 ;;		Unchanged: 0/0
  5876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5877 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5878 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5879 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5880 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5881 ;;Total ram usage:        2 bytes
  5882 ;; Hardware stack levels used:    1
  5883 ;; Hardware stack levels required when called:    6
  5884 ;; This function calls:
  5885 ;;		_DATAEE_WriteByte
  5886 ;; This function is called by:
  5887 ;;		_PROTOCOL_Loop
  5888 ;; This function uses a non-reentrant model
  5889 ;;
  5890                           
  5891                           
  5892                           ;psect for function _PROTOCOL_Write_Device_Address
  5893  0D8C                     _PROTOCOL_Write_Device_Address:	
  5894                           
  5895                           ;incstack = 0
  5896                           ; Regs used in _PROTOCOL_Write_Device_Address: [wreg+status,2+status,0+pclath+cstack]
  5897                           ;PROTOCOL_Write_Device_Address@device_id_i2c stored from wreg
  5898  0D8C  0020               	movlb	0	; select bank0
  5899  0D8D  00A4               	movwf	PROTOCOL_Write_Device_Address@device_id_i2c
  5900                           
  5901                           ;protocol.c: 96: DATAEE_WriteByte(0, device_id_i2c);
  5902  0D8E  0824               	movf	PROTOCOL_Write_Device_Address@device_id_i2c,w
  5903  0D8F  00A3               	movwf	??_PROTOCOL_Write_Device_Address
  5904  0D90  0823               	movf	??_PROTOCOL_Write_Device_Address,w
  5905  0D91  00A0               	movwf	DATAEE_WriteByte@bData
  5906  0D92  3000               	movlw	0
  5907  0D93  318F  270E         	fcall	_DATAEE_WriteByte
  5908                           
  5909                           ;protocol.c: 97: slave_address = device_id_i2c;
  5910  0D95  0020               	movlb	0	; select bank0
  5911  0D96  0824               	movf	PROTOCOL_Write_Device_Address@device_id_i2c,w
  5912  0D97  00A3               	movwf	??_PROTOCOL_Write_Device_Address
  5913  0D98  0823               	movf	??_PROTOCOL_Write_Device_Address,w
  5914  0D99  00E4               	movwf	_slave_address
  5915  0D9A  0008               	return
  5916  0D9B                     __end_of_PROTOCOL_Write_Device_Address:	
  5917                           
  5918                           	psect	text26
  5919  0CF9                     __ptext26:	
  5920 ;; *************** function _PROTOCOL_STP *****************
  5921 ;; Defined at:
  5922 ;;		line 109 in file "protocol.c"
  5923 ;; Parameters:    Size  Location     Type
  5924 ;;		None
  5925 ;; Auto vars:     Size  Location     Type
  5926 ;;		None
  5927 ;; Return value:  Size  Location     Type
  5928 ;;                  1    wreg      void 
  5929 ;; Registers used:
  5930 ;;		wreg, status,2, status,0
  5931 ;; Tracked objects:
  5932 ;;		On entry : 0/0
  5933 ;;		On exit  : 0/0
  5934 ;;		Unchanged: 0/0
  5935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5939 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5940 ;;Total ram usage:        0 bytes
  5941 ;; Hardware stack levels used:    1
  5942 ;; Hardware stack levels required when called:    5
  5943 ;; This function calls:
  5944 ;;		Nothing
  5945 ;; This function is called by:
  5946 ;;		_PROTOCOL_Loop
  5947 ;; This function uses a non-reentrant model
  5948 ;;
  5949                           
  5950                           
  5951                           ;psect for function _PROTOCOL_STP
  5952  0CF9                     _PROTOCOL_STP:	
  5953                           
  5954                           ;protocol.c: 111: running = 0;
  5955                           
  5956                           ;incstack = 0
  5957                           ; Regs used in _PROTOCOL_STP: [wreg+status,2+status,0]
  5958  0CF9  0020               	movlb	0	; select bank0
  5959  0CFA  01E0               	clrf	_running
  5960  0CFB  0008               	return
  5961  0CFC                     __end_of_PROTOCOL_STP:	
  5962                           
  5963                           	psect	text27
  5964  0D0B                     __ptext27:	
  5965 ;; *************** function _PROTOCOL_STA *****************
  5966 ;; Defined at:
  5967 ;;		line 104 in file "protocol.c"
  5968 ;; Parameters:    Size  Location     Type
  5969 ;;		None
  5970 ;; Auto vars:     Size  Location     Type
  5971 ;;		None
  5972 ;; Return value:  Size  Location     Type
  5973 ;;                  1    wreg      void 
  5974 ;; Registers used:
  5975 ;;		wreg, status,2, status,0
  5976 ;; Tracked objects:
  5977 ;;		On entry : 0/0
  5978 ;;		On exit  : 0/0
  5979 ;;		Unchanged: 0/0
  5980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5982 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5984 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5985 ;;Total ram usage:        0 bytes
  5986 ;; Hardware stack levels used:    1
  5987 ;; Hardware stack levels required when called:    5
  5988 ;; This function calls:
  5989 ;;		Nothing
  5990 ;; This function is called by:
  5991 ;;		_PROTOCOL_Loop
  5992 ;; This function uses a non-reentrant model
  5993 ;;
  5994                           
  5995                           
  5996                           ;psect for function _PROTOCOL_STA
  5997  0D0B                     _PROTOCOL_STA:	
  5998                           
  5999                           ;protocol.c: 106: running = 1;
  6000                           
  6001                           ;incstack = 0
  6002                           ; Regs used in _PROTOCOL_STA: [wreg+status,2+status,0]
  6003  0D0B  0020               	movlb	0	; select bank0
  6004  0D0C  01E0               	clrf	_running
  6005  0D0D  0AE0               	incf	_running,f
  6006  0D0E  0008               	return
  6007  0D0F                     __end_of_PROTOCOL_STA:	
  6008                           
  6009                           	psect	text28
  6010  0DDD                     __ptext28:	
  6011 ;; *************** function _PROTOCOL_SET *****************
  6012 ;; Defined at:
  6013 ;;		line 122 in file "protocol.c"
  6014 ;; Parameters:    Size  Location     Type
  6015 ;;  value_          1    wreg     unsigned char 
  6016 ;; Auto vars:     Size  Location     Type
  6017 ;;  value_          1    5[BANK0 ] unsigned char 
  6018 ;; Return value:  Size  Location     Type
  6019 ;;                  1    wreg      void 
  6020 ;; Registers used:
  6021 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6022 ;; Tracked objects:
  6023 ;;		On entry : 0/0
  6024 ;;		On exit  : 0/0
  6025 ;;		Unchanged: 0/0
  6026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6028 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6029 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6030 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6031 ;;Total ram usage:        2 bytes
  6032 ;; Hardware stack levels used:    1
  6033 ;; Hardware stack levels required when called:    6
  6034 ;; This function calls:
  6035 ;;		Absolute function
  6036 ;;		_set_handler
  6037 ;; This function is called by:
  6038 ;;		_PROTOCOL_Loop
  6039 ;; This function uses a non-reentrant model
  6040 ;;
  6041                           
  6042                           
  6043                           ;psect for function _PROTOCOL_SET
  6044  0DDD                     _PROTOCOL_SET:	
  6045                           
  6046                           ;incstack = 0
  6047                           ; Regs used in _PROTOCOL_SET: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6048                           ;PROTOCOL_SET@value_ stored from wreg
  6049  0DDD  0020               	movlb	0	; select bank0
  6050  0DDE  00A5               	movwf	PROTOCOL_SET@value_
  6051                           
  6052                           ;protocol.c: 123: value = value_;
  6053  0DDF  0825               	movf	PROTOCOL_SET@value_,w
  6054  0DE0  00A4               	movwf	??_PROTOCOL_SET
  6055  0DE1  0824               	movf	??_PROTOCOL_SET,w
  6056  0DE2  00E2               	movwf	_value
  6057                           
  6058                           ;protocol.c: 124: if (PROTOCOL_Set_Handler) PROTOCOL_Set_Handler(value);
  6059  0DE3  0852               	movf	_PROTOCOL_Set_Handler,w
  6060  0DE4  0453               	iorwf	_PROTOCOL_Set_Handler+1,w
  6061  0DE5  1903               	btfsc	3,2
  6062  0DE6  0008               	return
  6063  0DE7  0862               	movf	_value,w
  6064  0DE8  00A4               	movwf	??_PROTOCOL_SET
  6065  0DE9  0824               	movf	??_PROTOCOL_SET,w
  6066  0DEA  00A0               	movwf	set_handler@value
  6067  0DEB  0853               	movf	_PROTOCOL_Set_Handler+1,w
  6068  0DEC  008A               	movwf	10
  6069  0DED  0852               	movf	_PROTOCOL_Set_Handler,w
  6070  0DEE  000A               	callw
  6071  0DEF  318D               	pagesel	$
  6072  0DF0  0008               	return
  6073  0DF1                     __end_of_PROTOCOL_SET:	
  6074                           
  6075                           	psect	text29
  6076  0D3E                     __ptext29:	
  6077 ;; *************** function _PROTOCOL_SAV *****************
  6078 ;; Defined at:
  6079 ;;		line 118 in file "protocol.c"
  6080 ;; Parameters:    Size  Location     Type
  6081 ;;		None
  6082 ;; Auto vars:     Size  Location     Type
  6083 ;;		None
  6084 ;; Return value:  Size  Location     Type
  6085 ;;                  1    wreg      void 
  6086 ;; Registers used:
  6087 ;;		wreg, status,2, status,0, pclath, cstack
  6088 ;; Tracked objects:
  6089 ;;		On entry : 0/0
  6090 ;;		On exit  : 0/0
  6091 ;;		Unchanged: 0/0
  6092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6094 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6095 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6096 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6097 ;;Total ram usage:        1 bytes
  6098 ;; Hardware stack levels used:    1
  6099 ;; Hardware stack levels required when called:    6
  6100 ;; This function calls:
  6101 ;;		_DATAEE_WriteByte
  6102 ;; This function is called by:
  6103 ;;		_PROTOCOL_Loop
  6104 ;; This function uses a non-reentrant model
  6105 ;;
  6106                           
  6107                           
  6108                           ;psect for function _PROTOCOL_SAV
  6109  0D3E                     _PROTOCOL_SAV:	
  6110                           
  6111                           ;protocol.c: 119: DATAEE_WriteByte(1, value);
  6112                           
  6113                           ;incstack = 0
  6114                           ; Regs used in _PROTOCOL_SAV: [wreg+status,2+status,0+pclath+cstack]
  6115  0D3E  0020               	movlb	0	; select bank0
  6116  0D3F  0862               	movf	_value,w
  6117  0D40  00A3               	movwf	??_PROTOCOL_SAV
  6118  0D41  0823               	movf	??_PROTOCOL_SAV,w
  6119  0D42  00A0               	movwf	DATAEE_WriteByte@bData
  6120  0D43  3001               	movlw	1
  6121  0D44  318F  270E         	fcall	_DATAEE_WriteByte
  6122  0D46  0008               	return
  6123  0D47                     __end_of_PROTOCOL_SAV:	
  6124                           
  6125                           	psect	text30
  6126  0F0E                     __ptext30:	
  6127 ;; *************** function _DATAEE_WriteByte *****************
  6128 ;; Defined at:
  6129 ;;		line 180 in file "mcc_generated_files/memory.c"
  6130 ;; Parameters:    Size  Location     Type
  6131 ;;  bAdd            1    wreg     unsigned char 
  6132 ;;  bData           1    0[BANK0 ] unsigned char 
  6133 ;; Auto vars:     Size  Location     Type
  6134 ;;  bAdd            1    1[BANK0 ] unsigned char 
  6135 ;;  GIEBitValue     1    2[BANK0 ] unsigned char 
  6136 ;; Return value:  Size  Location     Type
  6137 ;;                  1    wreg      void 
  6138 ;; Registers used:
  6139 ;;		wreg, status,2, status,0
  6140 ;; Tracked objects:
  6141 ;;		On entry : 0/0
  6142 ;;		On exit  : 0/0
  6143 ;;		Unchanged: 0/0
  6144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6145 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6146 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6148 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6149 ;;Total ram usage:        3 bytes
  6150 ;; Hardware stack levels used:    1
  6151 ;; Hardware stack levels required when called:    5
  6152 ;; This function calls:
  6153 ;;		Nothing
  6154 ;; This function is called by:
  6155 ;;		_PROTOCOL_Write_Device_Address
  6156 ;;		_PROTOCOL_SAV
  6157 ;; This function uses a non-reentrant model
  6158 ;;
  6159                           
  6160                           
  6161                           ;psect for function _DATAEE_WriteByte
  6162  0F0E                     _DATAEE_WriteByte:	
  6163                           
  6164                           ;incstack = 0
  6165                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
  6166                           ;DATAEE_WriteByte@bAdd stored from wreg
  6167  0F0E  0020               	movlb	0	; select bank0
  6168  0F0F  00A1               	movwf	DATAEE_WriteByte@bAdd
  6169                           
  6170                           ;memory.c: 182: uint8_t GIEBitValue = 0;
  6171  0F10  01A2               	clrf	DATAEE_WriteByte@GIEBitValue
  6172                           
  6173                           ;memory.c: 184: EEADRL = (bAdd & 0x0ff);
  6174  0F11  0821               	movf	DATAEE_WriteByte@bAdd,w
  6175  0F12  0023               	movlb	3	; select bank3
  6176  0F13  0091               	movwf	17	;volatile
  6177                           
  6178                           ;memory.c: 185: EEDATL = bData;
  6179  0F14  0020               	movlb	0	; select bank0
  6180  0F15  0820               	movf	DATAEE_WriteByte@bData,w
  6181  0F16  0023               	movlb	3	; select bank3
  6182  0F17  0093               	movwf	19	;volatile
  6183                           
  6184                           ;memory.c: 186: EECON1bits.EEPGD = 0;
  6185  0F18  1395               	bcf	21,7	;volsfr
  6186                           
  6187                           ;memory.c: 187: EECON1bits.CFGS = 0;
  6188  0F19  1315               	bcf	21,6	;volsfr
  6189                           
  6190                           ;memory.c: 188: EECON1bits.WREN = 1;
  6191  0F1A  1515               	bsf	21,2	;volsfr
  6192                           
  6193                           ;memory.c: 190: GIEBitValue = INTCONbits.GIE;
  6194  0F1B  3000               	movlw	0
  6195  0F1C  1B8B               	btfsc	11,7	;volatile
  6196  0F1D  3001               	movlw	1
  6197  0F1E  0020               	movlb	0	; select bank0
  6198  0F1F  00A2               	movwf	DATAEE_WriteByte@GIEBitValue
  6199                           
  6200                           ;memory.c: 191: INTCONbits.GIE = 0;
  6201  0F20  138B               	bcf	11,7	;volatile
  6202                           
  6203                           ;memory.c: 192: EECON2 = 0x55;
  6204  0F21  3055               	movlw	85
  6205  0F22  0023               	movlb	3	; select bank3
  6206  0F23  0096               	movwf	22	;volsfr
  6207                           
  6208                           ;memory.c: 193: EECON2 = 0xAA;
  6209  0F24  30AA               	movlw	170
  6210  0F25  0096               	movwf	22	;volsfr
  6211                           
  6212                           ;memory.c: 194: EECON1bits.WR = 1;
  6213  0F26  1495               	bsf	21,1	;volsfr
  6214  0F27                     l1289:	
  6215                           ;memory.c: 197: {
  6216                           
  6217                           ;memory.c: 196: while (EECON1bits.WR)
  6218                           
  6219  0F27  1895               	btfsc	21,1	;volsfr
  6220  0F28  2F27               	goto	l1289
  6221                           
  6222                           ;memory.c: 198: }
  6223                           ;memory.c: 200: EECON1bits.WREN = 0;
  6224  0F29  1115               	bcf	21,2	;volsfr
  6225                           
  6226                           ;memory.c: 201: INTCONbits.GIE = GIEBitValue;
  6227  0F2A  0020               	movlb	0	; select bank0
  6228  0F2B  0C22               	rrf	DATAEE_WriteByte@GIEBitValue,w
  6229  0F2C  1C03               	skipc
  6230  0F2D  138B               	bcf	11,7	;volatile
  6231  0F2E  1803               	skipnc
  6232  0F2F  178B               	bsf	11,7	;volatile
  6233  0F30  0008               	return
  6234  0F31                     __end_of_DATAEE_WriteByte:	
  6235                           
  6236                           	psect	text31
  6237  0002                     __ptext31:	
  6238 ;; *************** function _PROTOCOL_EXT *****************
  6239 ;; Defined at:
  6240 ;;		line 127 in file "protocol.c"
  6241 ;; Parameters:    Size  Location     Type
  6242 ;;  char_buf        1    wreg     PTR unsigned char 
  6243 ;;		 -> I2C_StatusCallback@ext_buf(48), buf(48), 
  6244 ;; Auto vars:     Size  Location     Type
  6245 ;;  char_buf        1    0[BANK0 ] PTR unsigned char 
  6246 ;;		 -> I2C_StatusCallback@ext_buf(48), buf(48), 
  6247 ;; Return value:  Size  Location     Type
  6248 ;;                  1    wreg      void 
  6249 ;; Registers used:
  6250 ;;		wreg, status,2, status,0
  6251 ;; Tracked objects:
  6252 ;;		On entry : 0/0
  6253 ;;		On exit  : 0/0
  6254 ;;		Unchanged: 0/0
  6255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6257 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6259 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6260 ;;Total ram usage:        1 bytes
  6261 ;; Hardware stack levels used:    1
  6262 ;; Hardware stack levels required when called:    5
  6263 ;; This function calls:
  6264 ;;		Nothing
  6265 ;; This function is called by:
  6266 ;;		_PROTOCOL_Loop
  6267 ;; This function uses a non-reentrant model
  6268 ;;
  6269                           
  6270                           
  6271                           ;psect for function _PROTOCOL_EXT
  6272  0002                     _PROTOCOL_EXT:	
  6273                           
  6274                           ;incstack = 0
  6275                           ; Regs used in _PROTOCOL_EXT: [wreg+status,2+status,0]
  6276  0002  0008               	return
  6277  0003                     __end_of_PROTOCOL_EXT:	
  6278                           
  6279                           	psect	text32
  6280  0EAE                     __ptext32:	
  6281 ;; *************** function _EUSART_Read *****************
  6282 ;; Defined at:
  6283 ;;		line 112 in file "mcc_generated_files/eusart.c"
  6284 ;; Parameters:    Size  Location     Type
  6285 ;;		None
  6286 ;; Auto vars:     Size  Location     Type
  6287 ;;  readValue       1    1[BANK0 ] unsigned char 
  6288 ;; Return value:  Size  Location     Type
  6289 ;;                  1    wreg      unsigned char 
  6290 ;; Registers used:
  6291 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6292 ;; Tracked objects:
  6293 ;;		On entry : 0/0
  6294 ;;		On exit  : 0/0
  6295 ;;		Unchanged: 0/0
  6296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6298 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6299 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6300 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6301 ;;Total ram usage:        2 bytes
  6302 ;; Hardware stack levels used:    1
  6303 ;; Hardware stack levels required when called:    5
  6304 ;; This function calls:
  6305 ;;		Nothing
  6306 ;; This function is called by:
  6307 ;;		_PROTOCOL_Loop
  6308 ;; This function uses a non-reentrant model
  6309 ;;
  6310                           
  6311                           
  6312                           ;psect for function _EUSART_Read
  6313  0EAE                     _EUSART_Read:	
  6314                           
  6315                           ;eusart.c: 114: uint8_t readValue = 0;
  6316                           
  6317                           ;incstack = 0
  6318                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  6319  0EAE  0020               	movlb	0	; select bank0
  6320  0EAF  01A1               	clrf	EUSART_Read@readValue
  6321  0EB0                     l2815:	
  6322                           ;eusart.c: 117: {
  6323                           
  6324                           ;eusart.c: 116: while(0 == eusartRxCount)
  6325                           
  6326  0EB0  0865               	movf	_eusartRxCount,w	;volatile
  6327  0EB1  1903               	btfsc	3,2
  6328  0EB2  2EB0               	goto	l2815
  6329                           
  6330                           ;eusart.c: 118: }
  6331                           ;eusart.c: 120: readValue = eusartRxBuffer[eusartRxTail++];
  6332  0EB3  0866               	movf	_eusartRxTail,w
  6333  0EB4  3EA0               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  6334  0EB5  0086               	movwf	6
  6335  0EB6  0187               	clrf	7
  6336  0EB7  0801               	movf	1,w
  6337  0EB8  00A0               	movwf	??_EUSART_Read
  6338  0EB9  0820               	movf	??_EUSART_Read,w
  6339  0EBA  00A1               	movwf	EUSART_Read@readValue
  6340  0EBB  3001               	movlw	1
  6341  0EBC  00A0               	movwf	??_EUSART_Read
  6342  0EBD  0820               	movf	??_EUSART_Read,w
  6343  0EBE  07E6               	addwf	_eusartRxTail,f	;volatile
  6344                           
  6345                           ;eusart.c: 121: if(sizeof(eusartRxBuffer) <= eusartRxTail)
  6346  0EBF  3008               	movlw	8
  6347  0EC0  0266               	subwf	_eusartRxTail,w	;volatile
  6348  0EC1  1803               	btfsc	3,0
  6349                           
  6350                           ;eusart.c: 122: {
  6351                           ;eusart.c: 123: eusartRxTail = 0;
  6352  0EC2  01E6               	clrf	_eusartRxTail	;volatile
  6353                           
  6354                           ;eusart.c: 124: }
  6355                           ;eusart.c: 125: PIE1bits.RCIE = 0;
  6356  0EC3  0021               	movlb	1	; select bank1
  6357  0EC4  1291               	bcf	17,5	;volatile
  6358                           
  6359                           ;eusart.c: 126: eusartRxCount--;
  6360  0EC5  3001               	movlw	1
  6361  0EC6  0020               	movlb	0	; select bank0
  6362  0EC7  02E5               	subwf	_eusartRxCount,f	;volatile
  6363                           
  6364                           ;eusart.c: 127: PIE1bits.RCIE = 1;
  6365  0EC8  0021               	movlb	1	; select bank1
  6366  0EC9  1691               	bsf	17,5	;volatile
  6367                           
  6368                           ;eusart.c: 129: return readValue;
  6369  0ECA  0020               	movlb	0	; select bank0
  6370  0ECB  0821               	movf	EUSART_Read@readValue,w
  6371  0ECC  0008               	return
  6372  0ECD                     __end_of_EUSART_Read:	
  6373                           
  6374                           	psect	text33
  6375  067C                     __ptext33:	
  6376 ;; *************** function _PROTOCOL_Initialize *****************
  6377 ;; Defined at:
  6378 ;;		line 66 in file "protocol.c"
  6379 ;; Parameters:    Size  Location     Type
  6380 ;;  device_id       2    4[BANK0 ] PTR const unsigned char 
  6381 ;;		 -> STR_1(17), 
  6382 ;;  start_handle    1    6[BANK0 ] PTR void 
  6383 ;;		 -> NULL(0), 
  6384 ;;  stop_handler    1    7[BANK0 ] PTR void 
  6385 ;;		 -> NULL(0), 
  6386 ;;  set_handler     2    8[BANK0 ] PTR void 
  6387 ;;		 -> set_handler(1), 
  6388 ;;  inv_handler     1   10[BANK0 ] PTR void 
  6389 ;;		 -> NULL(0), 
  6390 ;;  scaler          1   11[BANK0 ] unsigned char 
  6391 ;; Auto vars:     Size  Location     Type
  6392 ;;		None
  6393 ;; Return value:  Size  Location     Type
  6394 ;;                  1    wreg      void 
  6395 ;; Registers used:
  6396 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6397 ;; Tracked objects:
  6398 ;;		On entry : 0/0
  6399 ;;		On exit  : 0/0
  6400 ;;		Unchanged: 0/0
  6401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6402 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6404 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6405 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6406 ;;Total ram usage:       10 bytes
  6407 ;; Hardware stack levels used:    1
  6408 ;; Hardware stack levels required when called:    6
  6409 ;; This function calls:
  6410 ;;		Absolute function
  6411 ;;		_DATAEE_ReadByte
  6412 ;;		_set_handler
  6413 ;; This function is called by:
  6414 ;;		_main
  6415 ;; This function uses a non-reentrant model
  6416 ;;
  6417                           
  6418                           
  6419                           ;psect for function _PROTOCOL_Initialize
  6420  067C                     _PROTOCOL_Initialize:	
  6421                           
  6422                           ;protocol.c: 67: device_id_ = device_id;
  6423                           
  6424                           ;incstack = 0
  6425                           ; Regs used in _PROTOCOL_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6426  067C  0020               	movlb	0	; select bank0
  6427  067D  0825               	movf	PROTOCOL_Initialize@device_id+1,w
  6428  067E  0021               	movlb	1	; select bank1
  6429  067F  00BB               	movwf	(_device_id_+1)^(0+128)
  6430  0680  0020               	movlb	0	; select bank0
  6431  0681  0824               	movf	PROTOCOL_Initialize@device_id,w
  6432  0682  0021               	movlb	1	; select bank1
  6433  0683  00BA               	movwf	_device_id_^(0+128)
  6434                           
  6435                           ;protocol.c: 68: PROTOCOL_Start_Handler = start_handler;
  6436  0684  0020               	movlb	0	; select bank0
  6437  0685  0826               	movf	PROTOCOL_Initialize@start_handler,w
  6438  0686  00AC               	movwf	??_PROTOCOL_Initialize
  6439  0687  3000               	movlw	0
  6440  0688  00AD               	movwf	??_PROTOCOL_Initialize+1
  6441  0689  082C               	movf	??_PROTOCOL_Initialize,w
  6442  068A  0021               	movlb	1	; select bank1
  6443  068B  00C4               	movwf	_PROTOCOL_Start_Handler^(0+128)
  6444  068C  0020               	movlb	0	; select bank0
  6445  068D  082D               	movf	??_PROTOCOL_Initialize+1,w
  6446  068E  0021               	movlb	1	; select bank1
  6447  068F  00C5               	movwf	(_PROTOCOL_Start_Handler+1)^(0+128)
  6448                           
  6449                           ;protocol.c: 69: PROTOCOL_Stop_Handler = stop_handler;
  6450  0690  0020               	movlb	0	; select bank0
  6451  0691  0827               	movf	PROTOCOL_Initialize@stop_handler,w
  6452  0692  00AC               	movwf	??_PROTOCOL_Initialize
  6453  0693  3000               	movlw	0
  6454  0694  00AD               	movwf	??_PROTOCOL_Initialize+1
  6455  0695  082C               	movf	??_PROTOCOL_Initialize,w
  6456  0696  00D4               	movwf	_PROTOCOL_Stop_Handler
  6457  0697  082D               	movf	??_PROTOCOL_Initialize+1,w
  6458  0698  00D5               	movwf	_PROTOCOL_Stop_Handler+1
  6459                           
  6460                           ;protocol.c: 70: PROTOCOL_Set_Handler = set_handler;
  6461  0699  0829               	movf	PROTOCOL_Initialize@set_handler+1,w
  6462  069A  00D3               	movwf	_PROTOCOL_Set_Handler+1
  6463  069B  0828               	movf	PROTOCOL_Initialize@set_handler,w
  6464  069C  00D2               	movwf	_PROTOCOL_Set_Handler
  6465                           
  6466                           ;protocol.c: 73: value = DATAEE_ReadByte(1);
  6467  069D  3001               	movlw	1
  6468  069E  318D  2563  3186   	fcall	_DATAEE_ReadByte
  6469  06A1  0020               	movlb	0	; select bank0
  6470  06A2  00AC               	movwf	??_PROTOCOL_Initialize
  6471  06A3  082C               	movf	??_PROTOCOL_Initialize,w
  6472  06A4  00E2               	movwf	_value
  6473                           
  6474                           ;protocol.c: 74: if (PROTOCOL_Set_Handler) PROTOCOL_Set_Handler(value);
  6475  06A5  0852               	movf	_PROTOCOL_Set_Handler,w
  6476  06A6  0453               	iorwf	_PROTOCOL_Set_Handler+1,w
  6477  06A7  1903               	btfsc	3,2
  6478  06A8  2EB2               	goto	l4377
  6479  06A9  0862               	movf	_value,w
  6480  06AA  00AC               	movwf	??_PROTOCOL_Initialize
  6481  06AB  082C               	movf	??_PROTOCOL_Initialize,w
  6482  06AC  00A0               	movwf	set_handler@value
  6483  06AD  0853               	movf	_PROTOCOL_Set_Handler+1,w
  6484  06AE  008A               	movwf	10
  6485  06AF  0852               	movf	_PROTOCOL_Set_Handler,w
  6486  06B0  000A               	callw
  6487  06B1  3186               	pagesel	$
  6488  06B2                     l4377:	
  6489                           
  6490                           ;protocol.c: 75: slave_address = DATAEE_ReadByte(0);
  6491  06B2  3000               	movlw	0
  6492  06B3  318D  2563         	fcall	_DATAEE_ReadByte
  6493  06B5  0020               	movlb	0	; select bank0
  6494  06B6  00AC               	movwf	??_PROTOCOL_Initialize
  6495  06B7  082C               	movf	??_PROTOCOL_Initialize,w
  6496  06B8  00E4               	movwf	_slave_address
  6497                           
  6498                           ;protocol.c: 78: readbuf.status = COMPLETE;
  6499  06B9  3003               	movlw	3
  6500  06BA  00AC               	movwf	??_PROTOCOL_Initialize
  6501  06BB  082C               	movf	??_PROTOCOL_Initialize,w
  6502  06BC  0021               	movlb	1	; select bank1
  6503  06BD  00DC               	movwf	(_readbuf^(0+128)+3)
  6504                           
  6505                           ;protocol.c: 79: PROTOCOL_Inv_Handler = inv_handler;
  6506  06BE  0020               	movlb	0	; select bank0
  6507  06BF  082A               	movf	PROTOCOL_Initialize@inv_handler,w
  6508  06C0  00AC               	movwf	??_PROTOCOL_Initialize
  6509  06C1  3000               	movlw	0
  6510  06C2  00AD               	movwf	??_PROTOCOL_Initialize+1
  6511  06C3  082C               	movf	??_PROTOCOL_Initialize,w
  6512  06C4  0021               	movlb	1	; select bank1
  6513  06C5  00BE               	movwf	_PROTOCOL_Inv_Handler^(0+128)
  6514  06C6  0020               	movlb	0	; select bank0
  6515  06C7  082D               	movf	??_PROTOCOL_Initialize+1,w
  6516  06C8  0021               	movlb	1	; select bank1
  6517  06C9  00BF               	movwf	(_PROTOCOL_Inv_Handler+1)^(0+128)
  6518                           
  6519                           ;protocol.c: 80: tmr_scaler = scaler;
  6520  06CA  0020               	movlb	0	; select bank0
  6521  06CB  082B               	movf	PROTOCOL_Initialize@scaler,w
  6522  06CC  00AC               	movwf	??_PROTOCOL_Initialize
  6523  06CD  082C               	movf	??_PROTOCOL_Initialize,w
  6524  06CE  00EB               	movwf	_tmr_scaler
  6525  06CF  0008               	return
  6526  06D0                     __end_of_PROTOCOL_Initialize:	
  6527                           
  6528                           	psect	text34
  6529  0FA1                     __ptext34:	
  6530 ;; *************** function _set_handler *****************
  6531 ;; Defined at:
  6532 ;;		line 66 in file "main.c"
  6533 ;; Parameters:    Size  Location     Type
  6534 ;;  value           1    0[BANK0 ] unsigned char 
  6535 ;; Auto vars:     Size  Location     Type
  6536 ;;  i               1    3[BANK0 ] unsigned char 
  6537 ;;  mask            1    2[BANK0 ] unsigned char 
  6538 ;; Return value:  Size  Location     Type
  6539 ;;                  1    wreg      void 
  6540 ;; Registers used:
  6541 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6542 ;; Tracked objects:
  6543 ;;		On entry : 0/0
  6544 ;;		On exit  : 0/0
  6545 ;;		Unchanged: 0/0
  6546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6547 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6548 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6549 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6550 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6551 ;;Total ram usage:        4 bytes
  6552 ;; Hardware stack levels used:    1
  6553 ;; Hardware stack levels required when called:    5
  6554 ;; This function calls:
  6555 ;;		Nothing
  6556 ;; This function is called by:
  6557 ;;		_main
  6558 ;;		i1_PROTOCOL_SET
  6559 ;;		_PROTOCOL_SET
  6560 ;;		_PROTOCOL_Initialize
  6561 ;; This function uses a non-reentrant model
  6562 ;;
  6563                           
  6564                           
  6565                           ;psect for function _set_handler
  6566  0FA1                     _set_handler:	
  6567                           
  6568                           ;Skip over the trampoline to the duplicate function for level 1
  6569  0FA1  1C7E               	btfss	126,0
  6570  0FA2  2FA5               	goto	l2623
  6571  0FA3  318F  2F55         	ljmp	i1l2563
  6572  0FA5                     _set_handler$intlevel0:	
  6573  0FA5                     l2623:	
  6574                           ;incstack = 0
  6575                           ; Regs used in _set_handler: [wreg+fsr1l+fsr1h+status,2+status,0]
  6576                           
  6577                           
  6578                           ;main.c: 67: uint8_t i;
  6579                           ;main.c: 68: uint8_t mask = 0b00000001;
  6580  0FA5  0020               	movlb	0	; select bank0
  6581  0FA6  01A2               	clrf	set_handler@mask
  6582  0FA7  0AA2               	incf	set_handler@mask,f
  6583                           
  6584                           ;main.c: 69: for(i=0; i<4; i++) {
  6585  0FA8  01A3               	clrf	set_handler@i
  6586  0FA9                     L5:	
  6587  0FA9  3004               	movlw	4
  6588  0FAA  0223               	subwf	set_handler@i,w
  6589  0FAB  1803               	btfsc	3,0
  6590  0FAC  0008               	return
  6591                           
  6592                           ;main.c: 70: if ((value & mask) == 0) {
  6593  0FAD  0820               	movf	set_handler@value,w
  6594  0FAE  0522               	andwf	set_handler@mask,w
  6595  0FAF  1D03               	btfss	3,2
  6596  0FB0  2FBC               	goto	l2635
  6597                           
  6598                           ;main.c: 71: analog_in_flags[i] = 0;
  6599  0FB1  0823               	movf	set_handler@i,w
  6600  0FB2  3EB4               	addlw	(low (_analog_in_flags| 0))& (0+255)
  6601  0FB3  0086               	movwf	6
  6602  0FB4  0187               	clrf	7
  6603  0FB5  0181               	clrf	1
  6604                           
  6605                           ;main.c: 72: position[i] = 0;
  6606  0FB6  0823               	movf	set_handler@i,w
  6607  0FB7  3EDE               	addlw	(low (_position| 0))& (0+255)
  6608  0FB8  0086               	movwf	6
  6609  0FB9  0187               	clrf	7
  6610  0FBA  0181               	clrf	1
  6611                           
  6612                           ;main.c: 73: } else {
  6613  0FBB  2FC2               	goto	l2637
  6614  0FBC                     l2635:	
  6615                           
  6616                           ;main.c: 74: analog_in_flags[i] = 1;
  6617  0FBC  0823               	movf	set_handler@i,w
  6618  0FBD  3EB4               	addlw	(low (_analog_in_flags| 0))& (0+255)
  6619  0FBE  0086               	movwf	6
  6620  0FBF  0187               	clrf	7
  6621  0FC0  0181               	clrf	1
  6622  0FC1  0A81               	incf	1,f
  6623  0FC2                     l2637:	
  6624                           
  6625                           ;main.c: 75: }
  6626                           ;main.c: 76: mask = mask << 1;
  6627  0FC2  3522               	lslf	set_handler@mask,w
  6628  0FC3  00A1               	movwf	??_set_handler
  6629  0FC4  0821               	movf	??_set_handler,w
  6630  0FC5  00A2               	movwf	set_handler@mask
  6631  0FC6  3001               	movlw	1
  6632  0FC7  00A1               	movwf	??_set_handler
  6633  0FC8  0821               	movf	??_set_handler,w
  6634  0FC9  07A3               	addwf	set_handler@i,f
  6635  0FCA  2FA9               	goto	L5
  6636  0FCB                     __end_of_set_handler:	
  6637                           
  6638                           	psect	text35
  6639  0D63                     __ptext35:	
  6640 ;; *************** function _DATAEE_ReadByte *****************
  6641 ;; Defined at:
  6642 ;;		line 204 in file "mcc_generated_files/memory.c"
  6643 ;; Parameters:    Size  Location     Type
  6644 ;;  bAdd            1    wreg     unsigned char 
  6645 ;; Auto vars:     Size  Location     Type
  6646 ;;  bAdd            1    0[BANK0 ] unsigned char 
  6647 ;; Return value:  Size  Location     Type
  6648 ;;                  1    wreg      unsigned char 
  6649 ;; Registers used:
  6650 ;;		wreg
  6651 ;; Tracked objects:
  6652 ;;		On entry : 0/0
  6653 ;;		On exit  : 0/0
  6654 ;;		Unchanged: 0/0
  6655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6657 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6659 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6660 ;;Total ram usage:        1 bytes
  6661 ;; Hardware stack levels used:    1
  6662 ;; Hardware stack levels required when called:    5
  6663 ;; This function calls:
  6664 ;;		Nothing
  6665 ;; This function is called by:
  6666 ;;		_PROTOCOL_Initialize
  6667 ;; This function uses a non-reentrant model
  6668 ;;
  6669                           
  6670                           
  6671                           ;psect for function _DATAEE_ReadByte
  6672  0D63                     _DATAEE_ReadByte:	
  6673                           
  6674                           ;incstack = 0
  6675                           ; Regs used in _DATAEE_ReadByte: [wreg]
  6676                           ;DATAEE_ReadByte@bAdd stored from wreg
  6677  0D63  0020               	movlb	0	; select bank0
  6678  0D64  00A0               	movwf	DATAEE_ReadByte@bAdd
  6679                           
  6680                           ;memory.c: 206: EEADRL = (bAdd & 0x0ff);
  6681  0D65  0820               	movf	DATAEE_ReadByte@bAdd,w
  6682  0D66  0023               	movlb	3	; select bank3
  6683  0D67  0091               	movwf	17	;volatile
  6684                           
  6685                           ;memory.c: 207: EECON1bits.CFGS = 0;
  6686  0D68  1315               	bcf	21,6	;volsfr
  6687                           
  6688                           ;memory.c: 208: EECON1bits.EEPGD = 0;
  6689  0D69  1395               	bcf	21,7	;volsfr
  6690                           
  6691                           ;memory.c: 209: EECON1bits.RD = 1;
  6692  0D6A  1415               	bsf	21,0	;volsfr
  6693                           
  6694                           ;memory.c: 210: __nop();
  6695  0D6B  0000               	nop
  6696                           
  6697                           ;memory.c: 211: __nop();
  6698  0D6C  0000               	nop
  6699                           
  6700                           ;memory.c: 213: return (EEDATL);
  6701  0D6D  0023               	movlb	3	; select bank3
  6702  0D6E  0813               	movf	19,w	;volatile
  6703  0D6F  0008               	return
  6704  0D70                     __end_of_DATAEE_ReadByte:	
  6705                           
  6706                           	psect	text36
  6707  0DF1                     __ptext36:	
  6708 ;; *************** function _PIN_MANAGER_Initialize *****************
  6709 ;; Defined at:
  6710 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  6711 ;; Parameters:    Size  Location     Type
  6712 ;;		None
  6713 ;; Auto vars:     Size  Location     Type
  6714 ;;		None
  6715 ;; Return value:  Size  Location     Type
  6716 ;;                  1    wreg      void 
  6717 ;; Registers used:
  6718 ;;		wreg, status,2
  6719 ;; Tracked objects:
  6720 ;;		On entry : 0/0
  6721 ;;		On exit  : 0/0
  6722 ;;		Unchanged: 0/0
  6723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6725 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6727 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6728 ;;Total ram usage:        0 bytes
  6729 ;; Hardware stack levels used:    1
  6730 ;; Hardware stack levels required when called:    5
  6731 ;; This function calls:
  6732 ;;		Nothing
  6733 ;; This function is called by:
  6734 ;;		_main
  6735 ;;		_SYSTEM_Initialize
  6736 ;; This function uses a non-reentrant model
  6737 ;;
  6738                           
  6739                           
  6740                           ;psect for function _PIN_MANAGER_Initialize
  6741  0DF1                     _PIN_MANAGER_Initialize:	
  6742                           
  6743                           ;pin_manager.c: 57: LATA = 0x00;
  6744                           
  6745                           ;incstack = 0
  6746                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  6747  0DF1  0022               	movlb	2	; select bank2
  6748  0DF2  018C               	clrf	12	;volatile
  6749                           
  6750                           ;pin_manager.c: 58: LATC = 0x00;
  6751  0DF3  018E               	clrf	14	;volatile
  6752                           
  6753                           ;pin_manager.c: 63: TRISA = 0x3F;
  6754  0DF4  303F               	movlw	63
  6755  0DF5  0021               	movlb	1	; select bank1
  6756  0DF6  008C               	movwf	12	;volatile
  6757                           
  6758                           ;pin_manager.c: 64: TRISC = 0x3B;
  6759  0DF7  303B               	movlw	59
  6760  0DF8  008E               	movwf	14	;volatile
  6761                           
  6762                           ;pin_manager.c: 69: ANSELC = 0x08;
  6763  0DF9  3008               	movlw	8
  6764  0DFA  0023               	movlb	3	; select bank3
  6765  0DFB  008E               	movwf	14	;volatile
  6766                           
  6767                           ;pin_manager.c: 70: ANSELA = 0x17;
  6768  0DFC  3017               	movlw	23
  6769  0DFD  008C               	movwf	12	;volatile
  6770                           
  6771                           ;pin_manager.c: 75: WPUA = 0x38;
  6772  0DFE  3038               	movlw	56
  6773  0DFF  0024               	movlb	4	; select bank4
  6774  0E00  008C               	movwf	12	;volatile
  6775                           
  6776                           ;pin_manager.c: 76: WPUC = 0x30;
  6777  0E01  3030               	movlw	48
  6778  0E02  008E               	movwf	14	;volatile
  6779                           
  6780                           ;pin_manager.c: 77: OPTION_REGbits.nWPUEN = 0;
  6781  0E03  0021               	movlb	1	; select bank1
  6782  0E04  1395               	bcf	21,7	;volatile
  6783                           
  6784                           ;pin_manager.c: 83: APFCON1 = 0x00;
  6785  0E05  0022               	movlb	2	; select bank2
  6786  0E06  019E               	clrf	30	;volatile
  6787                           
  6788                           ;pin_manager.c: 84: APFCON0 = 0x00;
  6789  0E07  019D               	clrf	29	;volatile
  6790  0E08  0008               	return
  6791  0E09                     __end_of_PIN_MANAGER_Initialize:	
  6792                           
  6793                           	psect	text37
  6794  0D17                     __ptext37:	
  6795 ;; *************** function _OSCILLATOR_Initialize *****************
  6796 ;; Defined at:
  6797 ;;		line 80 in file "mcc_generated_files/mcc.c"
  6798 ;; Parameters:    Size  Location     Type
  6799 ;;		None
  6800 ;; Auto vars:     Size  Location     Type
  6801 ;;		None
  6802 ;; Return value:  Size  Location     Type
  6803 ;;                  1    wreg      void 
  6804 ;; Registers used:
  6805 ;;		wreg, status,2
  6806 ;; Tracked objects:
  6807 ;;		On entry : 0/0
  6808 ;;		On exit  : 0/0
  6809 ;;		Unchanged: 0/0
  6810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6812 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6814 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6815 ;;Total ram usage:        0 bytes
  6816 ;; Hardware stack levels used:    1
  6817 ;; Hardware stack levels required when called:    5
  6818 ;; This function calls:
  6819 ;;		Nothing
  6820 ;; This function is called by:
  6821 ;;		_main
  6822 ;;		_SYSTEM_Initialize
  6823 ;; This function uses a non-reentrant model
  6824 ;;
  6825                           
  6826                           
  6827                           ;psect for function _OSCILLATOR_Initialize
  6828  0D17                     _OSCILLATOR_Initialize:	
  6829                           
  6830                           ;mcc.c: 83: OSCCON = 0x68;
  6831                           
  6832                           ;incstack = 0
  6833                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  6834  0D17  3068               	movlw	104
  6835  0D18  0021               	movlb	1	; select bank1
  6836  0D19  0099               	movwf	25	;volatile
  6837                           
  6838                           ;mcc.c: 85: OSCTUNE = 0x00;
  6839  0D1A  0198               	clrf	24	;volatile
  6840  0D1B  0008               	return
  6841  0D1C                     __end_of_OSCILLATOR_Initialize:	
  6842                           
  6843                           	psect	text38
  6844  0EED                     __ptext38:	
  6845 ;; *************** function _I2C_Initialize *****************
  6846 ;; Defined at:
  6847 ;;		line 459 in file "protocol.c"
  6848 ;; Parameters:    Size  Location     Type
  6849 ;;		None
  6850 ;; Auto vars:     Size  Location     Type
  6851 ;;		None
  6852 ;; Return value:  Size  Location     Type
  6853 ;;                  1    wreg      void 
  6854 ;; Registers used:
  6855 ;;		wreg, status,2, status,0, pclath, cstack
  6856 ;; Tracked objects:
  6857 ;;		On entry : 0/0
  6858 ;;		On exit  : 0/0
  6859 ;;		Unchanged: 0/0
  6860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6863 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6864 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6865 ;;Total ram usage:        2 bytes
  6866 ;; Hardware stack levels used:    1
  6867 ;; Hardware stack levels required when called:    6
  6868 ;; This function calls:
  6869 ;;		_PROTOCOL_Read_Device_Address
  6870 ;; This function is called by:
  6871 ;;		_main
  6872 ;; This function uses a non-reentrant model
  6873 ;;
  6874                           
  6875                           
  6876                           ;psect for function _I2C_Initialize
  6877  0EED                     _I2C_Initialize:	
  6878                           
  6879                           ;protocol.c: 463: _delay((unsigned long)((2000)*(4000000/4000.0)));
  6880                           
  6881                           ;incstack = 0
  6882                           ; Regs used in _I2C_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6883  0EED  300B               	movlw	11
  6884  0EEE  0020               	movlb	0	; select bank0
  6885  0EEF  00A1               	movwf	??_I2C_Initialize+1
  6886  0EF0  3026               	movlw	38
  6887  0EF1  00A0               	movwf	??_I2C_Initialize
  6888  0EF2  305D               	movlw	93
  6889  0EF3                     u4147:	
  6890  0EF3  0B89               	decfsz	9,f
  6891  0EF4  2EF3               	goto	u4147
  6892  0EF5  0BA0               	decfsz	??_I2C_Initialize,f
  6893  0EF6  2EF3               	goto	u4147
  6894  0EF7  0BA1               	decfsz	??_I2C_Initialize+1,f
  6895  0EF8  2EF3               	goto	u4147
  6896  0EF9  3200               	nop2
  6897                           
  6898                           ;protocol.c: 467: SSP1STAT = 0x80;
  6899  0EFA  3080               	movlw	128
  6900  0EFB  0024               	movlb	4	; select bank4
  6901  0EFC  0094               	movwf	20	;volatile
  6902                           
  6903                           ;protocol.c: 469: SSP1CON1 = 0x26;
  6904  0EFD  3026               	movlw	38
  6905  0EFE  0095               	movwf	21	;volatile
  6906                           
  6907                           ;protocol.c: 471: SSP1CON2 = 0x81;
  6908  0EFF  3081               	movlw	129
  6909  0F00  0096               	movwf	22	;volatile
  6910                           
  6911                           ;protocol.c: 473: SSP1CON3 = 0x00;
  6912  0F01  0197               	clrf	23	;volatile
  6913                           
  6914                           ;protocol.c: 475: SSP1MSK = (0x7F << 1);
  6915  0F02  30FE               	movlw	254
  6916  0F03  0093               	movwf	19	;volatile
  6917                           
  6918                           ;protocol.c: 477: SSP1ADD = (PROTOCOL_Read_Device_Address() << 1);
  6919  0F04  318C  24F6         	fcall	_PROTOCOL_Read_Device_Address
  6920  0F06  0709               	addwf	9,w
  6921  0F07  0024               	movlb	4	; select bank4
  6922  0F08  0092               	movwf	18	;volatile
  6923                           
  6924                           ;protocol.c: 480: PIR1bits.SSP1IF = 0;
  6925  0F09  0020               	movlb	0	; select bank0
  6926  0F0A  1191               	bcf	17,3	;volatile
  6927                           
  6928                           ;protocol.c: 482: PIE1bits.SSP1IE = 1;
  6929  0F0B  0021               	movlb	1	; select bank1
  6930  0F0C  1591               	bsf	17,3	;volatile
  6931  0F0D  0008               	return
  6932  0F0E                     __end_of_I2C_Initialize:	
  6933                           
  6934                           	psect	text39
  6935  0CF6                     __ptext39:	
  6936 ;; *************** function _PROTOCOL_Read_Device_Address *****************
  6937 ;; Defined at:
  6938 ;;		line 100 in file "protocol.c"
  6939 ;; Parameters:    Size  Location     Type
  6940 ;;		None
  6941 ;; Auto vars:     Size  Location     Type
  6942 ;;		None
  6943 ;; Return value:  Size  Location     Type
  6944 ;;                  1    wreg      unsigned char 
  6945 ;; Registers used:
  6946 ;;		wreg
  6947 ;; Tracked objects:
  6948 ;;		On entry : 0/0
  6949 ;;		On exit  : 0/0
  6950 ;;		Unchanged: 0/0
  6951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6953 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6955 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6956 ;;Total ram usage:        0 bytes
  6957 ;; Hardware stack levels used:    1
  6958 ;; Hardware stack levels required when called:    5
  6959 ;; This function calls:
  6960 ;;		Nothing
  6961 ;; This function is called by:
  6962 ;;		_PROTOCOL_Loop
  6963 ;;		_I2C_Initialize
  6964 ;; This function uses a non-reentrant model
  6965 ;;
  6966                           
  6967                           
  6968                           ;psect for function _PROTOCOL_Read_Device_Address
  6969  0CF6                     _PROTOCOL_Read_Device_Address:	
  6970                           
  6971                           ;protocol.c: 101: return slave_address;
  6972                           
  6973                           ;incstack = 0
  6974                           ; Regs used in _PROTOCOL_Read_Device_Address: [wreg]
  6975  0CF6  0020               	movlb	0	; select bank0
  6976  0CF7  0864               	movf	_slave_address,w
  6977  0CF8  0008               	return
  6978  0CF9                     __end_of_PROTOCOL_Read_Device_Address:	
  6979                           
  6980                           	psect	text40
  6981  0E09                     __ptext40:	
  6982 ;; *************** function _EUSART_Initialize *****************
  6983 ;; Defined at:
  6984 ;;		line 75 in file "mcc_generated_files/eusart.c"
  6985 ;; Parameters:    Size  Location     Type
  6986 ;;		None
  6987 ;; Auto vars:     Size  Location     Type
  6988 ;;		None
  6989 ;; Return value:  Size  Location     Type
  6990 ;;                  1    wreg      void 
  6991 ;; Registers used:
  6992 ;;		wreg, status,2
  6993 ;; Tracked objects:
  6994 ;;		On entry : 0/0
  6995 ;;		On exit  : 0/0
  6996 ;;		Unchanged: 0/0
  6997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7000 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7001 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7002 ;;Total ram usage:        1 bytes
  7003 ;; Hardware stack levels used:    1
  7004 ;; Hardware stack levels required when called:    5
  7005 ;; This function calls:
  7006 ;;		Nothing
  7007 ;; This function is called by:
  7008 ;;		_main
  7009 ;;		_SYSTEM_Initialize
  7010 ;; This function uses a non-reentrant model
  7011 ;;
  7012                           
  7013                           
  7014                           ;psect for function _EUSART_Initialize
  7015  0E09                     _EUSART_Initialize:	
  7016                           
  7017                           ;eusart.c: 78: PIE1bits.RCIE = 0;
  7018                           
  7019                           ;incstack = 0
  7020                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  7021  0E09  0021               	movlb	1	; select bank1
  7022  0E0A  1291               	bcf	17,5	;volatile
  7023                           
  7024                           ;eusart.c: 79: PIE1bits.TXIE = 0;
  7025  0E0B  1211               	bcf	17,4	;volatile
  7026                           
  7027                           ;eusart.c: 84: BAUDCON = 0x08;
  7028  0E0C  3008               	movlw	8
  7029  0E0D  0023               	movlb	3	; select bank3
  7030  0E0E  009F               	movwf	31	;volatile
  7031                           
  7032                           ;eusart.c: 87: RCSTA = 0x90;
  7033  0E0F  3090               	movlw	144
  7034  0E10  009D               	movwf	29	;volatile
  7035                           
  7036                           ;eusart.c: 90: TXSTA = 0x24;
  7037  0E11  3024               	movlw	36
  7038  0E12  009E               	movwf	30	;volatile
  7039                           
  7040                           ;eusart.c: 93: SPBRGL = 0x67;
  7041  0E13  3067               	movlw	103
  7042  0E14  009B               	movwf	27	;volatile
  7043                           
  7044                           ;eusart.c: 96: SPBRGH = 0x00;
  7045  0E15  019C               	clrf	28	;volatile
  7046                           
  7047                           ;eusart.c: 100: eusartTxHead = 0;
  7048  0E16  01FC               	clrf	_eusartTxHead	;volatile
  7049                           
  7050                           ;eusart.c: 101: eusartTxTail = 0;
  7051  0E17  0020               	movlb	0	; select bank0
  7052  0E18  01E9               	clrf	_eusartTxTail	;volatile
  7053                           
  7054                           ;eusart.c: 102: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
  7055  0E19  3008               	movlw	8
  7056  0E1A  00A0               	movwf	??_EUSART_Initialize
  7057  0E1B  0820               	movf	??_EUSART_Initialize,w
  7058  0E1C  00E8               	movwf	_eusartTxBufferRemaining	;volatile
  7059                           
  7060                           ;eusart.c: 104: eusartRxHead = 0;
  7061  0E1D  01E7               	clrf	_eusartRxHead	;volatile
  7062                           
  7063                           ;eusart.c: 105: eusartRxTail = 0;
  7064  0E1E  01E6               	clrf	_eusartRxTail	;volatile
  7065                           
  7066                           ;eusart.c: 106: eusartRxCount = 0;
  7067  0E1F  01E5               	clrf	_eusartRxCount	;volatile
  7068                           
  7069                           ;eusart.c: 109: PIE1bits.RCIE = 1;
  7070  0E20  0021               	movlb	1	; select bank1
  7071  0E21  1691               	bsf	17,5	;volatile
  7072  0E22  0008               	return
  7073  0E23                     __end_of_EUSART_Initialize:	
  7074                           
  7075                           	psect	text41
  7076  0D2D                     __ptext41:	
  7077 ;; *************** function _ADC_Initialize *****************
  7078 ;; Defined at:
  7079 ;;		line 64 in file "mcc_generated_files/adc.c"
  7080 ;; Parameters:    Size  Location     Type
  7081 ;;		None
  7082 ;; Auto vars:     Size  Location     Type
  7083 ;;		None
  7084 ;; Return value:  Size  Location     Type
  7085 ;;                  1    wreg      void 
  7086 ;; Registers used:
  7087 ;;		wreg, status,2
  7088 ;; Tracked objects:
  7089 ;;		On entry : 0/0
  7090 ;;		On exit  : 0/0
  7091 ;;		Unchanged: 0/0
  7092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7094 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7096 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7097 ;;Total ram usage:        0 bytes
  7098 ;; Hardware stack levels used:    1
  7099 ;; Hardware stack levels required when called:    5
  7100 ;; This function calls:
  7101 ;;		Nothing
  7102 ;; This function is called by:
  7103 ;;		_main
  7104 ;;		_SYSTEM_Initialize
  7105 ;; This function uses a non-reentrant model
  7106 ;;
  7107                           
  7108                           
  7109                           ;psect for function _ADC_Initialize
  7110  0D2D                     _ADC_Initialize:	
  7111                           
  7112                           ;adc.c: 69: ADCON0 = 0x01;
  7113                           
  7114                           ;incstack = 0
  7115                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  7116  0D2D  3001               	movlw	1
  7117  0D2E  0021               	movlb	1	; select bank1
  7118  0D2F  009D               	movwf	29	;volatile
  7119                           
  7120                           ;adc.c: 72: ADCON1 = 0xC0;
  7121  0D30  30C0               	movlw	192
  7122  0D31  009E               	movwf	30	;volatile
  7123                           
  7124                           ;adc.c: 75: ADRESL = 0x00;
  7125  0D32  019B               	clrf	27	;volatile
  7126                           
  7127                           ;adc.c: 78: ADRESH = 0x00;
  7128  0D33  019C               	clrf	28	;volatile
  7129  0D34  0008               	return
  7130  0D35                     __end_of_ADC_Initialize:	
  7131                           
  7132                           	psect	intentry
  7133  0004                     __pintentry:	
  7134 ;; *************** function _INTERRUPT_InterruptManager *****************
  7135 ;; Defined at:
  7136 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  7137 ;; Parameters:    Size  Location     Type
  7138 ;;		None
  7139 ;; Auto vars:     Size  Location     Type
  7140 ;;		None
  7141 ;; Return value:  Size  Location     Type
  7142 ;;                  1    wreg      void 
  7143 ;; Registers used:
  7144 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7145 ;; Tracked objects:
  7146 ;;		On entry : 0/0
  7147 ;;		On exit  : 0/0
  7148 ;;		Unchanged: 0/0
  7149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7152 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7153 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7154 ;;Total ram usage:        1 bytes
  7155 ;; Hardware stack levels used:    1
  7156 ;; Hardware stack levels required when called:    4
  7157 ;; This function calls:
  7158 ;;		_EUSART_Receive_ISR
  7159 ;;		_EUSART_Transmit_ISR
  7160 ;;		_I2C_ISR
  7161 ;; This function is called by:
  7162 ;;		Interrupt level 1
  7163 ;; This function uses a non-reentrant model
  7164 ;;
  7165                           
  7166  0004                     _INTERRUPT_InterruptManager:	
  7167                           
  7168                           ;incstack = 0
  7169  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  7170                           
  7171                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7172  0005  3180               	pagesel	$
  7173  0006  0020               	movlb	0	; select bank0
  7174  0007  087F               	movf	127,w
  7175  0008  00FB               	movwf	??_INTERRUPT_InterruptManager
  7176                           
  7177                           ;interrupt_manager.c: 55: if(INTCONbits.PEIE == 1 && PIE1bits.TXIE == 1 && PIR1bits.TXIF
      +                           == 1)
  7178  0009  1F0B               	btfss	11,6	;volatile
  7179  000A  2815               	goto	i1l128
  7180  000B  0021               	movlb	1	; select bank1
  7181  000C  1E11               	btfss	17,4	;volatile
  7182  000D  2815               	goto	i1l128
  7183  000E  0020               	movlb	0	; select bank0
  7184  000F  1E11               	btfss	17,4	;volatile
  7185  0010  2815               	goto	i1l128
  7186                           
  7187                           ;interrupt_manager.c: 56: {
  7188                           ;interrupt_manager.c: 57: EUSART_Transmit_ISR();
  7189  0011  318E  2674  3180   	fcall	_EUSART_Transmit_ISR
  7190                           
  7191                           ;interrupt_manager.c: 58: }
  7192  0014  282B               	goto	i1l134
  7193  0015                     i1l128:	
  7194                           
  7195                           ;interrupt_manager.c: 59: else if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits
      +                          .RCIF == 1)
  7196  0015  1F0B               	btfss	11,6	;volatile
  7197  0016  2821               	goto	i1l130
  7198  0017  0021               	movlb	1	; select bank1
  7199  0018  1E91               	btfss	17,5	;volatile
  7200  0019  2821               	goto	i1l130
  7201  001A  0020               	movlb	0	; select bank0
  7202  001B  1E91               	btfss	17,5	;volatile
  7203  001C  2821               	goto	i1l130
  7204                           
  7205                           ;interrupt_manager.c: 60: {
  7206                           ;interrupt_manager.c: 61: EUSART_Receive_ISR();
  7207  001D  318E  263D  3180   	fcall	_EUSART_Receive_ISR
  7208                           
  7209                           ;interrupt_manager.c: 62: }
  7210  0020  282B               	goto	i1l134
  7211  0021                     i1l130:	
  7212                           
  7213                           ;interrupt_manager.c: 63: else if(INTCONbits.PEIE == 1 && PIE1bits.SSP1IE == 1 && PIR1bi
      +                          ts.SSP1IF == 1)
  7214  0021  1F0B               	btfss	11,6	;volatile
  7215  0022  282B               	goto	i1l134
  7216  0023  0021               	movlb	1	; select bank1
  7217  0024  1D91               	btfss	17,3	;volatile
  7218  0025  282B               	goto	i1l134
  7219  0026  0020               	movlb	0	; select bank0
  7220  0027  1D91               	btfss	17,3	;volatile
  7221  0028  282B               	goto	i1l134
  7222                           
  7223                           ;interrupt_manager.c: 64: {
  7224                           ;interrupt_manager.c: 65: I2C_ISR();
  7225  0029  318F  277A         	fcall	_I2C_ISR
  7226  002B                     i1l134:	
  7227                           ;interrupt_manager.c: 67: else
  7228                           ;interrupt_manager.c: 68: {
  7229                           
  7230                           ;interrupt_manager.c: 66: }
  7231                           
  7232  002B  087B               	movf	??_INTERRUPT_InterruptManager,w
  7233  002C  0020               	movlb	0	; select bank0
  7234  002D  00FF               	movwf	127
  7235  002E  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  7236  002F  0009               	retfie
  7237  0030                     __end_of_INTERRUPT_InterruptManager:	
  7238                           
  7239                           	psect	text43
  7240  0F7A                     __ptext43:	
  7241 ;; *************** function _I2C_ISR *****************
  7242 ;; Defined at:
  7243 ;;		line 486 in file "protocol.c"
  7244 ;; Parameters:    Size  Location     Type
  7245 ;;		None
  7246 ;; Auto vars:     Size  Location     Type
  7247 ;;  i2c_data        1   10[COMMON] unsigned char 
  7248 ;; Return value:  Size  Location     Type
  7249 ;;                  1    wreg      void 
  7250 ;; Registers used:
  7251 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7252 ;; Tracked objects:
  7253 ;;		On entry : 0/0
  7254 ;;		On exit  : 0/0
  7255 ;;		Unchanged: 0/0
  7256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7258 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7259 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7260 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7261 ;;Total ram usage:        2 bytes
  7262 ;; Hardware stack levels used:    1
  7263 ;; Hardware stack levels required when called:    3
  7264 ;; This function calls:
  7265 ;;		_I2C_StatusCallback
  7266 ;; This function is called by:
  7267 ;;		_INTERRUPT_InterruptManager
  7268 ;; This function uses a non-reentrant model
  7269 ;;
  7270                           
  7271                           
  7272                           ;psect for function _I2C_ISR
  7273  0F7A                     _I2C_ISR:	
  7274                           
  7275                           ;protocol.c: 488: uint8_t i2c_data = 0x55;
  7276                           
  7277                           ;incstack = 0
  7278                           ; Regs used in _I2C_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7279  0F7A  3055               	movlw	85
  7280  0F7B  00F9               	movwf	??_I2C_ISR
  7281  0F7C  0879               	movf	??_I2C_ISR,w
  7282  0F7D  00FA               	movwf	I2C_ISR@i2c_data
  7283                           
  7284                           ;protocol.c: 493: PIR1bits.SSP1IF = 0;
  7285  0F7E  0020               	movlb	0	; select bank0
  7286  0F7F  1191               	bcf	17,3	;volatile
  7287                           
  7288                           ;protocol.c: 494: i2c_data = SSP1BUF;
  7289  0F80  0024               	movlb	4	; select bank4
  7290  0F81  0811               	movf	17,w	;volatile
  7291  0F82  00F9               	movwf	??_I2C_ISR
  7292  0F83  0879               	movf	??_I2C_ISR,w
  7293  0F84  00FA               	movwf	I2C_ISR@i2c_data
  7294                           
  7295                           ;protocol.c: 495: if(1 == SSP1STATbits.R_nW)
  7296  0F85  1D14               	btfss	20,2	;volatile
  7297  0F86  2F8E               	goto	i1l717
  7298                           
  7299                           ;protocol.c: 496: {
  7300                           ;protocol.c: 497: if((1 == SSP1STATbits.D_nA) && (1 == SSP1CON2bits.ACKSTAT))
  7301  0F87  1A94               	btfsc	20,5	;volatile
  7302  0F88  1F16               	btfss	22,6	;volatile
  7303  0F89  2F8C               	goto	i1l4353
  7304                           
  7305                           ;protocol.c: 498: {
  7306                           ;protocol.c: 500: I2C_StatusCallback(I2C_SLAVE_READ_COMPLETED);
  7307  0F8A  3003               	movlw	3
  7308  0F8B  2F9C               	goto	L6
  7309  0F8C                     i1l4353:	
  7310                           ;protocol.c: 501: }
  7311                           
  7312                           
  7313                           ;protocol.c: 502: else
  7314                           ;protocol.c: 503: {
  7315                           ;protocol.c: 505: I2C_StatusCallback(I2C_SLAVE_READ_REQUEST);
  7316  0F8C  3001               	movlw	1
  7317  0F8D  2F9C               	goto	L6
  7318  0F8E                     i1l717:	
  7319                           ;protocol.c: 506: }
  7320                           ;protocol.c: 507: }
  7321                           
  7322                           
  7323                           ;protocol.c: 508: else if(0 == SSP1STATbits.D_nA)
  7324  0F8E  1A94               	btfsc	20,5	;volatile
  7325  0F8F  2F97               	goto	i1l4361
  7326                           
  7327                           ;protocol.c: 509: {
  7328                           ;protocol.c: 512: if(0x00 == i2c_data)
  7329  0F90  087A               	movf	I2C_ISR@i2c_data,w
  7330  0F91  1D03               	btfss	3,2
  7331  0F92  2F95               	goto	i1l4359
  7332                           
  7333                           ;protocol.c: 513: {
  7334                           ;protocol.c: 515: I2C_StatusCallback(I2C_SLAVE_GENERAL_CALL_REQUEST);
  7335  0F93  3004               	movlw	4
  7336  0F94  2F9C               	goto	L6
  7337  0F95                     i1l4359:	
  7338                           ;protocol.c: 516: }
  7339                           
  7340                           
  7341                           ;protocol.c: 517: else
  7342                           ;protocol.c: 518: {
  7343                           ;protocol.c: 520: I2C_StatusCallback(I2C_SLAVE_WRITE_REQUEST);
  7344  0F95  3000               	movlw	0
  7345  0F96  2F9C               	goto	L6
  7346  0F97                     i1l4361:	
  7347                           ;protocol.c: 521: }
  7348                           ;protocol.c: 522: }
  7349                           
  7350                           
  7351                           ;protocol.c: 523: else
  7352                           ;protocol.c: 524: {
  7353                           ;protocol.c: 525: I2C_slaveWriteData = i2c_data;
  7354  0F97  087A               	movf	I2C_ISR@i2c_data,w
  7355  0F98  00F9               	movwf	??_I2C_ISR
  7356  0F99  0879               	movf	??_I2C_ISR,w
  7357  0F9A  00FD               	movwf	_I2C_slaveWriteData	;volatile
  7358                           
  7359                           ;protocol.c: 528: I2C_StatusCallback(I2C_SLAVE_WRITE_COMPLETED);
  7360  0F9B  3002               	movlw	2
  7361  0F9C                     L6:	
  7362  0F9C  3184  2493         	fcall	_I2C_StatusCallback
  7363                           
  7364                           ;protocol.c: 529: }
  7365                           ;protocol.c: 531: SSP1CON1bits.CKP = 1;
  7366  0F9E  0024               	movlb	4	; select bank4
  7367  0F9F  1615               	bsf	21,4	;volatile
  7368  0FA0  0008               	return
  7369  0FA1                     __end_of_I2C_ISR:	
  7370                           
  7371                           	psect	text44
  7372  0493                     __ptext44:	
  7373 ;; *************** function _I2C_StatusCallback *****************
  7374 ;; Defined at:
  7375 ;;		line 535 in file "protocol.c"
  7376 ;; Parameters:    Size  Location     Type
  7377 ;;  i2c_bus_stat    1    wreg     enum E3095
  7378 ;; Auto vars:     Size  Location     Type
  7379 ;;  i2c_bus_stat    1    7[COMMON] enum E3095
  7380 ;;  pdata           1    8[COMMON] PTR unsigned char 
  7381 ;;		 -> type_no_data(1), PROTOCOL_Send_uint8_t@pbuf(1), sendbuf(16), readbuf.length(1), 
  7382 ;;		 -> readbuf.type(1), readbuf(5), position(4), 
  7383 ;; Return value:  Size  Location     Type
  7384 ;;                  1    wreg      void 
  7385 ;; Registers used:
  7386 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7387 ;; Tracked objects:
  7388 ;;		On entry : 0/0
  7389 ;;		On exit  : 0/0
  7390 ;;		Unchanged: 0/0
  7391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7393 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7394 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7395 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7396 ;;Total ram usage:        3 bytes
  7397 ;; Hardware stack levels used:    1
  7398 ;; Hardware stack levels required when called:    2
  7399 ;; This function calls:
  7400 ;;		_PROTOCOL_Backplane_Slave_Enabled
  7401 ;;		_PROTOCOL_I2C_GET
  7402 ;;		_PROTOCOL_I2C_SEN
  7403 ;;		_PROTOCOL_I2C_WHO
  7404 ;;		_PROTOCOL_INV
  7405 ;;		_PROTOCOL_RST
  7406 ;;		_PROTOCOL_Read_Lock
  7407 ;;		i1_PROTOCOL_EXT
  7408 ;;		i1_PROTOCOL_SAV
  7409 ;;		i1_PROTOCOL_SET
  7410 ;;		i1_PROTOCOL_STA
  7411 ;;		i1_PROTOCOL_STP
  7412 ;; This function is called by:
  7413 ;;		_I2C_ISR
  7414 ;; This function uses a non-reentrant model
  7415 ;;
  7416                           
  7417                           
  7418                           ;psect for function _I2C_StatusCallback
  7419  0493                     _I2C_StatusCallback:	
  7420                           
  7421                           ;incstack = 0
  7422                           ; Regs used in _I2C_StatusCallback: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7423                           ;I2C_StatusCallback@i2c_bus_state stored from wreg
  7424  0493  00F7               	movwf	I2C_StatusCallback@i2c_bus_state
  7425                           
  7426                           ;protocol.c: 538: static uint8_t slaveWriteType = SLAVE_NORMAL_DATA;
  7427                           ;protocol.c: 539: static uint8_t next = 0x00;
  7428                           ;protocol.c: 540: static uint8_t ext_len = 0;
  7429                           ;protocol.c: 541: static uint8_t ext_cnt = 0;
  7430                           ;protocol.c: 542: static char ext_buf[48];
  7431                           ;protocol.c: 543: uint8_t *pdata;
  7432                           ;protocol.c: 544: switch (i2c_bus_state)
  7433  0494  2D4C               	goto	i1l4333
  7434  0495                     i1l739:	
  7435                           ;protocol.c: 545: {
  7436                           ;protocol.c: 546: case I2C_SLAVE_WRITE_REQUEST:
  7437                           
  7438                           
  7439                           ;protocol.c: 547: slaveWriteType = SLAVE_DATA_ADDRESS;
  7440  0495  0020               	movlb	0	; select bank0
  7441  0496  01D9               	clrf	I2C_StatusCallback@slaveWriteType
  7442  0497  0AD9               	incf	I2C_StatusCallback@slaveWriteType,f
  7443                           
  7444                           ;protocol.c: 548: break;
  7445  0498  0008               	return
  7446  0499                     i1l4259:	
  7447                           ;protocol.c: 550: case I2C_SLAVE_GENERAL_CALL_REQUEST:
  7448                           
  7449                           
  7450                           ;protocol.c: 552: slaveWriteType = SLAVE_GENERAL_CALL;
  7451  0499  3002               	movlw	2
  7452  049A  00F6               	movwf	??_I2C_StatusCallback
  7453  049B  0876               	movf	??_I2C_StatusCallback,w
  7454  049C  0020               	movlb	0	; select bank0
  7455  049D  00D9               	movwf	I2C_StatusCallback@slaveWriteType
  7456                           
  7457                           ;protocol.c: 553: break;
  7458  049E  0008               	return
  7459  049F                     i1l4261:	
  7460                           ;protocol.c: 561: case 0x01:
  7461                           
  7462                           ;protocol.c: 560: switch(next) {
  7463                           
  7464                           ;protocol.c: 558: {
  7465                           ;protocol.c: 559: case SLAVE_DATA_ADDRESS:
  7466                           
  7467                           ;protocol.c: 557: switch(slaveWriteType)
  7468                           
  7469                           ;protocol.c: 555: case I2C_SLAVE_WRITE_COMPLETED:
  7470                           
  7471                           
  7472                           ;protocol.c: 562: PROTOCOL_SET(I2C_slaveWriteData);
  7473  049F  087D               	movf	_I2C_slaveWriteData,w	;volatile
  7474  04A0  318D  25C9  3184   	fcall	i1_PROTOCOL_SET
  7475  04A3  2D0E               	goto	i1l4307
  7476  04A4                     i1l4265:	
  7477                           ;protocol.c: 567: case 0x04:
  7478                           
  7479                           ;protocol.c: 566: switch(I2C_slaveWriteData) {
  7480                           
  7481                           ;protocol.c: 565: case 0x00:
  7482                           
  7483                           ;protocol.c: 564: break;
  7484                           
  7485                           ;protocol.c: 563: next = 0x00;
  7486                           
  7487                           
  7488                           ;protocol.c: 568: PROTOCOL_STA();
  7489  04A4  318D  2507  3184   	fcall	i1_PROTOCOL_STA
  7490                           
  7491                           ;protocol.c: 569: break;
  7492  04A7  2D27               	goto	i1l4317
  7493  04A8                     i1l4267:	
  7494                           ;protocol.c: 570: case 0x05:
  7495                           
  7496                           
  7497                           ;protocol.c: 571: PROTOCOL_STP();
  7498  04A8  318C  24F3  3184   	fcall	i1_PROTOCOL_STP
  7499                           
  7500                           ;protocol.c: 572: break;
  7501  04AB  2D27               	goto	i1l4317
  7502  04AC                     i1l4269:	
  7503                           ;protocol.c: 573: case 0x03:
  7504                           
  7505                           
  7506                           ;protocol.c: 574: PROTOCOL_SAV();
  7507  04AC  318D  2535  3184   	fcall	i1_PROTOCOL_SAV
  7508                           
  7509                           ;protocol.c: 575: break;
  7510  04AF  2D27               	goto	i1l4317
  7511  04B0                     i1l4271:	
  7512                           ;protocol.c: 576: case 0x06:
  7513                           
  7514                           
  7515                           ;protocol.c: 577: PROTOCOL_INV();
  7516  04B0  318D  2503  3184   	fcall	_PROTOCOL_INV
  7517                           
  7518                           ;protocol.c: 578: break;
  7519  04B3  2D27               	goto	i1l4317
  7520  04B4                     i1l4273:	
  7521                           ;protocol.c: 579: case 0x0c:
  7522                           
  7523                           
  7524                           ;protocol.c: 580: PROTOCOL_RST();
  7525  04B4  318D  2559  3184   	fcall	_PROTOCOL_RST
  7526                           
  7527                           ;protocol.c: 581: break;
  7528  04B7  2D27               	goto	i1l4317
  7529  04B8                     i1l756:	
  7530                           ;protocol.c: 582: case 0x08:
  7531                           
  7532                           
  7533                           ;protocol.c: 583: next = 0x01;
  7534  04B8  01D8               	clrf	I2C_StatusCallback@next
  7535  04B9  0AD8               	incf	I2C_StatusCallback@next,f
  7536                           
  7537                           ;protocol.c: 584: break;
  7538  04BA  2D27               	goto	i1l4317
  7539  04BB                     i1l4275:	
  7540                           ;protocol.c: 585: case 0x0a:
  7541                           
  7542                           
  7543                           ;protocol.c: 586: next = 0x02;
  7544  04BB  3002               	movlw	2
  7545  04BC  2CEF               	goto	L7
  7546  04BD                     i1l4279:	
  7547                           ;protocol.c: 588: }
  7548                           
  7549                           ;protocol.c: 587: break;
  7550                           
  7551  04BD  087D               	movf	_I2C_slaveWriteData,w	;volatile
  7552                           
  7553                           ; Switch size 1, requested type "space"
  7554                           ; Number of cases is 7, Range of values is 3 to 12
  7555                           ; switch strategies available:
  7556                           ; Name         Instructions Cycles
  7557                           ; simple_byte           22    12 (average)
  7558                           ; direct_byte           29     9 (fixed)
  7559                           ; jumptable            263     9 (fixed)
  7560                           ;	Chosen strategy is simple_byte
  7561  04BE  3A03               	xorlw	3	; case 3
  7562  04BF  1903               	skipnz
  7563  04C0  2CAC               	goto	i1l4269
  7564  04C1  3A07               	xorlw	7	; case 4
  7565  04C2  1903               	skipnz
  7566  04C3  2CA4               	goto	i1l4265
  7567  04C4  3A01               	xorlw	1	; case 5
  7568  04C5  1903               	skipnz
  7569  04C6  2CA8               	goto	i1l4267
  7570  04C7  3A03               	xorlw	3	; case 6
  7571  04C8  1903               	skipnz
  7572  04C9  2CB0               	goto	i1l4271
  7573  04CA  3A0E               	xorlw	14	; case 8
  7574  04CB  1903               	skipnz
  7575  04CC  2CB8               	goto	i1l756
  7576  04CD  3A02               	xorlw	2	; case 10
  7577  04CE  1903               	skipnz
  7578  04CF  2CBB               	goto	i1l4275
  7579  04D0  3A06               	xorlw	6	; case 12
  7580  04D1  1903               	skipnz
  7581  04D2  2CB4               	goto	i1l4273
  7582  04D3  2D27               	goto	i1l4317
  7583                           
  7584                           ;protocol.c: 590: }
  7585                           
  7586                           ;protocol.c: 589: break;
  7587  04D4  2D27               	goto	i1l4317
  7588  04D5                     i1l4283:	
  7589  04D5  0858               	movf	I2C_StatusCallback@next,w
  7590                           
  7591                           ; Switch size 1, requested type "space"
  7592                           ; Number of cases is 2, Range of values is 0 to 1
  7593                           ; switch strategies available:
  7594                           ; Name         Instructions Cycles
  7595                           ; simple_byte            7     4 (average)
  7596                           ; direct_byte           10     6 (fixed)
  7597                           ; jumptable            260     6 (fixed)
  7598                           ;	Chosen strategy is simple_byte
  7599  04D6  3A00               	xorlw	0	; case 0
  7600  04D7  1903               	skipnz
  7601  04D8  2CBD               	goto	i1l4279
  7602  04D9  3A01               	xorlw	1	; case 1
  7603  04DA  1903               	skipnz
  7604  04DB  2C9F               	goto	i1l4261
  7605  04DC  2D27               	goto	i1l4317
  7606                           
  7607                           ;protocol.c: 591: break;
  7608  04DD  2D27               	goto	i1l4317
  7609  04DE                     i1l4285:	
  7610                           ;protocol.c: 593: case SLAVE_GENERAL_CALL:
  7611                           
  7612                           
  7613                           ;protocol.c: 594: if (I2C_slaveWriteData == 0x02) {
  7614  04DE  3002               	movlw	2
  7615  04DF  067D               	xorwf	_I2C_slaveWriteData,w	;volatile
  7616  04E0  1D03               	btfss	3,2
  7617  04E1  2D27               	goto	i1l4317
  7618                           
  7619                           ;protocol.c: 595: SSP1CON2bits.GCEN = 0;
  7620  04E2  0024               	movlb	4	; select bank4
  7621  04E3  1396               	bcf	22,7	;volatile
  7622                           
  7623                           ;protocol.c: 596: PROTOCOL_Backplane_Slave_Enabled();
  7624  04E4  318C  24FF  3184   	fcall	_PROTOCOL_Backplane_Slave_Enabled
  7625                           
  7626                           ;protocol.c: 597: }
  7627                           ;protocol.c: 598: break;
  7628  04E7  2D27               	goto	i1l4317
  7629  04E8                     i1l4291:	
  7630                           ;protocol.c: 602: case 0x02:
  7631                           
  7632                           ;protocol.c: 601: switch(next) {
  7633                           
  7634                           ;protocol.c: 600: case SLAVE_NORMAL_DATA:
  7635                           
  7636                           
  7637                           ;protocol.c: 603: ext_len = I2C_slaveWriteData;
  7638  04E8  087D               	movf	_I2C_slaveWriteData,w	;volatile
  7639  04E9  00F6               	movwf	??_I2C_StatusCallback
  7640  04EA  0876               	movf	??_I2C_StatusCallback,w
  7641  04EB  0020               	movlb	0	; select bank0
  7642  04EC  00D7               	movwf	I2C_StatusCallback@ext_len
  7643                           
  7644                           ;protocol.c: 604: ext_cnt = 0;
  7645  04ED  01D6               	clrf	I2C_StatusCallback@ext_cnt
  7646                           
  7647                           ;protocol.c: 605: next = 0x03;
  7648  04EE  3003               	movlw	3
  7649  04EF                     L7:	
  7650  04EF  00F6               	movwf	??_I2C_StatusCallback
  7651  04F0  0876               	movf	??_I2C_StatusCallback,w
  7652  04F1  00D8               	movwf	I2C_StatusCallback@next
  7653                           
  7654                           ;protocol.c: 606: break;
  7655  04F2  2D27               	goto	i1l4317
  7656  04F3                     i1l4297:	
  7657                           ;protocol.c: 607: case 0x03:
  7658                           
  7659                           
  7660                           ;protocol.c: 608: ext_buf[ext_cnt++] = (char)I2C_slaveWriteData;
  7661  04F3  087D               	movf	_I2C_slaveWriteData,w	;volatile
  7662  04F4  00F6               	movwf	??_I2C_StatusCallback
  7663  04F5  0856               	movf	I2C_StatusCallback@ext_cnt,w
  7664  04F6  3EA0               	addlw	(low (I2C_StatusCallback@ext_buf| (0+256)))& (0+255)
  7665  04F7  0086               	movwf	6
  7666  04F8  3001               	movlw	1	; select bank3/4
  7667  04F9  0087               	movwf	7
  7668  04FA  0876               	movf	??_I2C_StatusCallback,w
  7669  04FB  0081               	movwf	1
  7670  04FC  3001               	movlw	1
  7671  04FD  00F6               	movwf	??_I2C_StatusCallback
  7672  04FE  0876               	movf	??_I2C_StatusCallback,w
  7673  04FF  07D6               	addwf	I2C_StatusCallback@ext_cnt,f
  7674                           
  7675                           ;protocol.c: 609: if (ext_cnt >= ext_len) {
  7676  0500  0857               	movf	I2C_StatusCallback@ext_len,w
  7677  0501  0256               	subwf	I2C_StatusCallback@ext_cnt,w
  7678  0502  1C03               	skipc
  7679  0503  2D27               	goto	i1l4317
  7680                           
  7681                           ;protocol.c: 610: if (!PROTOCOL_Read_Lock()) PROTOCOL_EXT(&ext_buf[0]);
  7682  0504  318C  24F0  3184   	fcall	_PROTOCOL_Read_Lock
  7683  0507  3A00               	xorlw	0
  7684  0508  1D03               	skipz
  7685  0509  2D0E               	goto	i1l4307
  7686  050A  30A0               	movlw	(low (I2C_StatusCallback@ext_buf| (0+256)))& (0+255)
  7687  050B  318C  24E9  3184   	fcall	i1_PROTOCOL_EXT
  7688  050E                     i1l4307:	
  7689                           
  7690                           ;protocol.c: 611: next = 0x00;
  7691  050E  0020               	movlb	0	; select bank0
  7692  050F  01D8               	clrf	I2C_StatusCallback@next
  7693                           
  7694                           ;protocol.c: 614: }
  7695                           
  7696                           ;protocol.c: 612: }
  7697                           ;protocol.c: 613: break;
  7698  0510  2D27               	goto	i1l4317
  7699  0511                     i1l4311:	
  7700  0511  0020               	movlb	0	; select bank0
  7701  0512  0858               	movf	I2C_StatusCallback@next,w
  7702                           
  7703                           ; Switch size 1, requested type "space"
  7704                           ; Number of cases is 2, Range of values is 2 to 3
  7705                           ; switch strategies available:
  7706                           ; Name         Instructions Cycles
  7707                           ; simple_byte            7     4 (average)
  7708                           ; direct_byte           13     9 (fixed)
  7709                           ; jumptable            263     9 (fixed)
  7710                           ;	Chosen strategy is simple_byte
  7711  0513  3A02               	xorlw	2	; case 2
  7712  0514  1903               	skipnz
  7713  0515  2CE8               	goto	i1l4291
  7714  0516  3A01               	xorlw	1	; case 3
  7715  0517  1903               	skipnz
  7716  0518  2CF3               	goto	i1l4297
  7717  0519  2D27               	goto	i1l4317
  7718                           
  7719                           ;protocol.c: 619: }
  7720                           
  7721                           ;protocol.c: 617: break;
  7722                           
  7723                           ;protocol.c: 616: default:
  7724                           
  7725                           ;protocol.c: 615: break;
  7726  051A  2D27               	goto	i1l4317
  7727  051B                     i1l4315:	
  7728  051B  0020               	movlb	0	; select bank0
  7729  051C  0859               	movf	I2C_StatusCallback@slaveWriteType,w
  7730                           
  7731                           ; Switch size 1, requested type "space"
  7732                           ; Number of cases is 3, Range of values is 0 to 2
  7733                           ; switch strategies available:
  7734                           ; Name         Instructions Cycles
  7735                           ; simple_byte           10     6 (average)
  7736                           ; direct_byte           12     6 (fixed)
  7737                           ; jumptable            260     6 (fixed)
  7738                           ;	Chosen strategy is simple_byte
  7739  051D  3A00               	xorlw	0	; case 0
  7740  051E  1903               	skipnz
  7741  051F  2D11               	goto	i1l4311
  7742  0520  3A01               	xorlw	1	; case 1
  7743  0521  1903               	skipnz
  7744  0522  2CD5               	goto	i1l4283
  7745  0523  3A03               	xorlw	3	; case 2
  7746  0524  1903               	skipnz
  7747  0525  2CDE               	goto	i1l4285
  7748  0526  2D27               	goto	i1l4317
  7749  0527                     i1l4317:	
  7750                           
  7751                           ;protocol.c: 621: slaveWriteType = SLAVE_NORMAL_DATA;
  7752  0527  0020               	movlb	0	; select bank0
  7753  0528  01D9               	clrf	I2C_StatusCallback@slaveWriteType
  7754                           
  7755                           ;protocol.c: 622: break;
  7756  0529  0008               	return
  7757  052A                     i1l4319:	
  7758                           ;protocol.c: 626: {
  7759                           ;protocol.c: 627: case 0x01:
  7760                           
  7761                           ;protocol.c: 625: switch (I2C_slaveWriteData)
  7762                           
  7763                           ;protocol.c: 624: case I2C_SLAVE_READ_REQUEST:
  7764                           
  7765                           
  7766                           ;protocol.c: 628: SSP1BUF = PROTOCOL_I2C_WHO();
  7767  052A  318C  24ED         	fcall	_PROTOCOL_I2C_WHO
  7768  052C  0024               	movlb	4	; select bank4
  7769  052D  0091               	movwf	17	;volatile
  7770                           
  7771                           ;protocol.c: 629: break;
  7772  052E  0008               	return
  7773  052F                     i1l4321:	
  7774                           ;protocol.c: 630: case 0x07:
  7775                           
  7776                           
  7777                           ;protocol.c: 631: pdata = PROTOCOL_I2C_SEN();
  7778  052F  3187  2759         	fcall	_PROTOCOL_I2C_SEN
  7779  0531  00F6               	movwf	??_I2C_StatusCallback
  7780  0532  0876               	movf	??_I2C_StatusCallback,w
  7781  0533  00F8               	movwf	I2C_StatusCallback@pdata
  7782                           
  7783                           ;protocol.c: 632: SSP1BUF = *pdata;
  7784  0534  0878               	movf	I2C_StatusCallback@pdata,w
  7785  0535  0086               	movwf	6
  7786  0536  0187               	clrf	7
  7787  0537  0801               	movf	1,w
  7788  0538  0024               	movlb	4	; select bank4
  7789  0539  0091               	movwf	17	;volatile
  7790                           
  7791                           ;protocol.c: 633: break;
  7792  053A  0008               	return
  7793  053B                     i1l4325:	
  7794                           ;protocol.c: 634: case 0x09:
  7795                           
  7796                           
  7797                           ;protocol.c: 635: SSP1BUF = PROTOCOL_I2C_GET();
  7798  053B  318C  24EA         	fcall	_PROTOCOL_I2C_GET
  7799  053D  0024               	movlb	4	; select bank4
  7800  053E  0091               	movwf	17	;volatile
  7801                           
  7802                           ;protocol.c: 637: }
  7803                           
  7804                           ;protocol.c: 636: break;
  7805  053F  0008               	return
  7806  0540                     i1l4329:	
  7807  0540  087D               	movf	_I2C_slaveWriteData,w	;volatile
  7808                           
  7809                           ; Switch size 1, requested type "space"
  7810                           ; Number of cases is 3, Range of values is 1 to 9
  7811                           ; switch strategies available:
  7812                           ; Name         Instructions Cycles
  7813                           ; simple_byte           10     6 (average)
  7814                           ; direct_byte           27     9 (fixed)
  7815                           ; jumptable            263     9 (fixed)
  7816                           ;	Chosen strategy is simple_byte
  7817  0541  3A01               	xorlw	1	; case 1
  7818  0542  1903               	skipnz
  7819  0543  2D2A               	goto	i1l4319
  7820  0544  3A06               	xorlw	6	; case 7
  7821  0545  1903               	skipnz
  7822  0546  2D2F               	goto	i1l4321
  7823  0547  3A0E               	xorlw	14	; case 9
  7824  0548  1903               	skipnz
  7825  0549  2D3B               	goto	i1l4325
  7826  054A  2D56               	goto	i1l777
  7827                           
  7828                           ;protocol.c: 645: }
  7829                           
  7830                           ;protocol.c: 643: break;
  7831                           
  7832                           ;protocol.c: 642: default:
  7833                           
  7834                           ;protocol.c: 641: break;
  7835                           
  7836                           ;protocol.c: 640: case I2C_SLAVE_READ_COMPLETED:
  7837                           
  7838                           ;protocol.c: 638: break;
  7839  054B  0008               	return
  7840  054C                     i1l4333:	
  7841  054C  0877               	movf	I2C_StatusCallback@i2c_bus_state,w
  7842                           
  7843                           ; Switch size 1, requested type "space"
  7844                           ; Number of cases is 5, Range of values is 0 to 4
  7845                           ; switch strategies available:
  7846                           ; Name         Instructions Cycles
  7847                           ; direct_byte           16     6 (fixed)
  7848                           ; simple_byte           16     9 (average)
  7849                           ; jumptable            260     6 (fixed)
  7850                           ;	Chosen strategy is direct_byte
  7851  054D  0084               	movwf	4
  7852  054E  3005               	movlw	5
  7853  054F  0204               	subwf	4,w
  7854  0550  1803               	skipnc
  7855  0551  0008               	return
  7856  0552  3188               	movlp	high i1S4551
  7857  0553  3504               	lslf	4,w
  7858  0554  3E00               	addlw	low i1S4551
  7859  0555  0082               	movwf	2
  7860  0556                     i1l777:	
  7861  0556  0008               	return
  7862  0557                     __end_of_I2C_StatusCallback:	
  7863                           
  7864                           	psect	swtext1
  7865  0800                     __pswtext1:	
  7866  0800                     i1S4551:	
  7867  0800  3184  2C95         	ljmp	i1l739
  7868  0802  3185  2D40         	ljmp	i1l4329
  7869  0804  3185  2D1B         	ljmp	i1l4315
  7870  0806  3185  2D56         	ljmp	i1l777
  7871  0808  3184  2C99         	ljmp	i1l4259
  7872                           
  7873                           	psect	text45
  7874  0CF3                     __ptext45:	
  7875 ;; *************** function i1_PROTOCOL_STP *****************
  7876 ;; Defined at:
  7877 ;;		line 109 in file "protocol.c"
  7878 ;; Parameters:    Size  Location     Type
  7879 ;;		None
  7880 ;; Auto vars:     Size  Location     Type
  7881 ;;		None
  7882 ;; Return value:  Size  Location     Type
  7883 ;;                  1    wreg      void 
  7884 ;; Registers used:
  7885 ;;		wreg, status,2, status,0
  7886 ;; Tracked objects:
  7887 ;;		On entry : 0/0
  7888 ;;		On exit  : 0/0
  7889 ;;		Unchanged: 0/0
  7890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7892 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7894 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7895 ;;Total ram usage:        0 bytes
  7896 ;; Hardware stack levels used:    1
  7897 ;; This function calls:
  7898 ;;		Nothing
  7899 ;; This function is called by:
  7900 ;;		_I2C_StatusCallback
  7901 ;; This function uses a non-reentrant model
  7902 ;;
  7903                           
  7904                           
  7905                           ;psect for function i1_PROTOCOL_STP
  7906  0CF3                     i1_PROTOCOL_STP:	
  7907                           
  7908                           ;protocol.c: 111: running = 0;
  7909                           
  7910                           ;incstack = 0
  7911                           ; Regs used in i1_PROTOCOL_STP: [wreg+status,2+status,0]
  7912  0CF3  0020               	movlb	0	; select bank0
  7913  0CF4  01E0               	clrf	_running
  7914  0CF5  0008               	return
  7915  0CF6                     __end_ofi1_PROTOCOL_STP:	
  7916                           
  7917                           	psect	text46
  7918  0D07                     __ptext46:	
  7919 ;; *************** function i1_PROTOCOL_STA *****************
  7920 ;; Defined at:
  7921 ;;		line 104 in file "protocol.c"
  7922 ;; Parameters:    Size  Location     Type
  7923 ;;		None
  7924 ;; Auto vars:     Size  Location     Type
  7925 ;;		None
  7926 ;; Return value:  Size  Location     Type
  7927 ;;                  1    wreg      void 
  7928 ;; Registers used:
  7929 ;;		wreg, status,2, status,0
  7930 ;; Tracked objects:
  7931 ;;		On entry : 0/0
  7932 ;;		On exit  : 0/0
  7933 ;;		Unchanged: 0/0
  7934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7935 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7936 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7938 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7939 ;;Total ram usage:        0 bytes
  7940 ;; Hardware stack levels used:    1
  7941 ;; This function calls:
  7942 ;;		Nothing
  7943 ;; This function is called by:
  7944 ;;		_I2C_StatusCallback
  7945 ;; This function uses a non-reentrant model
  7946 ;;
  7947                           
  7948                           
  7949                           ;psect for function i1_PROTOCOL_STA
  7950  0D07                     i1_PROTOCOL_STA:	
  7951                           
  7952                           ;protocol.c: 106: running = 1;
  7953                           
  7954                           ;incstack = 0
  7955                           ; Regs used in i1_PROTOCOL_STA: [wreg+status,2+status,0]
  7956  0D07  0020               	movlb	0	; select bank0
  7957  0D08  01E0               	clrf	_running
  7958  0D09  0AE0               	incf	_running,f
  7959  0D0A  0008               	return
  7960  0D0B                     __end_ofi1_PROTOCOL_STA:	
  7961                           
  7962                           	psect	text47
  7963  0DC9                     __ptext47:	
  7964 ;; *************** function i1_PROTOCOL_SET *****************
  7965 ;; Defined at:
  7966 ;;		line 122 in file "protocol.c"
  7967 ;; Parameters:    Size  Location     Type
  7968 ;;  value_          1    wreg     unsigned char 
  7969 ;; Auto vars:     Size  Location     Type
  7970 ;;  value_          1    5[COMMON] unsigned char 
  7971 ;; Return value:  Size  Location     Type
  7972 ;;                  1    wreg      void 
  7973 ;; Registers used:
  7974 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7975 ;; Tracked objects:
  7976 ;;		On entry : 0/0
  7977 ;;		On exit  : 0/0
  7978 ;;		Unchanged: 0/0
  7979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7981 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7982 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7983 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7984 ;;Total ram usage:        2 bytes
  7985 ;; Hardware stack levels used:    1
  7986 ;; Hardware stack levels required when called:    1
  7987 ;; This function calls:
  7988 ;;		Absolute function
  7989 ;;		i1_set_handler
  7990 ;; This function is called by:
  7991 ;;		_I2C_StatusCallback
  7992 ;; This function uses a non-reentrant model
  7993 ;;
  7994                           
  7995                           
  7996                           ;psect for function i1_PROTOCOL_SET
  7997  0DC9                     i1_PROTOCOL_SET:	
  7998                           
  7999                           ;incstack = 0
  8000                           ; Regs used in i1_PROTOCOL_SET: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8001                           ;i1PROTOCOL_SET@value_ stored from wreg
  8002  0DC9  00F5               	movwf	i1PROTOCOL_SET@value_
  8003                           
  8004                           ;protocol.c: 123: value = value_;
  8005  0DCA  0875               	movf	i1PROTOCOL_SET@value_,w
  8006  0DCB  00F4               	movwf	??i1_PROTOCOL_SET
  8007  0DCC  0874               	movf	??i1_PROTOCOL_SET,w
  8008  0DCD  0020               	movlb	0	; select bank0
  8009  0DCE  00E2               	movwf	_value
  8010                           
  8011                           ;protocol.c: 124: if (PROTOCOL_Set_Handler) PROTOCOL_Set_Handler(value);
  8012  0DCF  0852               	movf	_PROTOCOL_Set_Handler,w
  8013  0DD0  0453               	iorwf	_PROTOCOL_Set_Handler+1,w
  8014  0DD1  1903               	btfsc	3,2
  8015  0DD2  0008               	return
  8016  0DD3  0862               	movf	_value,w
  8017  0DD4  00F4               	movwf	??i1_PROTOCOL_SET
  8018  0DD5  0874               	movf	??i1_PROTOCOL_SET,w
  8019  0DD6  00F0               	movwf	i1set_handler@value
  8020  0DD7  0853               	movf	_PROTOCOL_Set_Handler+1,w
  8021  0DD8  008A               	movwf	10
  8022  0DD9  0852               	movf	_PROTOCOL_Set_Handler,w
  8023  0DDA  000A               	callw
  8024  0DDB  318D               	pagesel	$
  8025  0DDC  0008               	return
  8026  0DDD                     __end_ofi1_PROTOCOL_SET:	
  8027                           
  8028                           	psect	text48
  8029  0F55                     __ptext48:	
  8030 ;; *************** function i1_set_handler *****************
  8031 ;; Defined at:
  8032 ;;		line 66 in file "main.c"
  8033 ;; Parameters:    Size  Location     Type
  8034 ;;  value           1    0[COMMON] unsigned char 
  8035 ;; Auto vars:     Size  Location     Type
  8036 ;;  set_handler     1    3[COMMON] unsigned char 
  8037 ;;  set_handler     1    2[COMMON] unsigned char 
  8038 ;; Return value:  Size  Location     Type
  8039 ;;                  1    wreg      void 
  8040 ;; Registers used:
  8041 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8042 ;; Tracked objects:
  8043 ;;		On entry : 0/0
  8044 ;;		On exit  : 0/0
  8045 ;;		Unchanged: 0/0
  8046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8047 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8048 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8049 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8050 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8051 ;;Total ram usage:        4 bytes
  8052 ;; Hardware stack levels used:    1
  8053 ;; This function calls:
  8054 ;;		Nothing
  8055 ;; This function is called by:
  8056 ;; This function uses a non-reentrant model
  8057 ;;
  8058                           
  8059                           
  8060                           ;psect for function i1_set_handler
  8061  0F55                     i1_set_handler:	
  8062  0F55                     i1l2563:	
  8063                           ;incstack = 0
  8064                           ; Regs used in i1_set_handler: [wreg+fsr1l+fsr1h+status,2+status,0]
  8065                           
  8066                           
  8067                           ;main.c: 67: uint8_t i;
  8068                           ;main.c: 68: uint8_t mask = 0b00000001;
  8069  0F55  01F2               	clrf	i1set_handler@mask
  8070  0F56  0AF2               	incf	i1set_handler@mask,f
  8071                           
  8072                           ;main.c: 69: for(i=0; i<4; i++) {
  8073  0F57  01F3               	clrf	i1set_handler@i
  8074  0F58                     L8:	
  8075  0F58  3004               	movlw	4
  8076  0F59  0273               	subwf	i1set_handler@i,w
  8077  0F5A  1803               	btfsc	3,0
  8078  0F5B  0008               	return
  8079                           
  8080                           ;main.c: 70: if ((value & mask) == 0) {
  8081  0F5C  0870               	movf	i1set_handler@value,w
  8082  0F5D  0572               	andwf	i1set_handler@mask,w
  8083  0F5E  1D03               	btfss	3,2
  8084  0F5F  2F6B               	goto	i1l2575
  8085                           
  8086                           ;main.c: 71: analog_in_flags[i] = 0;
  8087  0F60  0873               	movf	i1set_handler@i,w
  8088  0F61  3EB4               	addlw	(low (_analog_in_flags| 0))& (0+255)
  8089  0F62  0086               	movwf	6
  8090  0F63  0187               	clrf	7
  8091  0F64  0181               	clrf	1
  8092                           
  8093                           ;main.c: 72: position[i] = 0;
  8094  0F65  0873               	movf	i1set_handler@i,w
  8095  0F66  3EDE               	addlw	(low (_position| 0))& (0+255)
  8096  0F67  0086               	movwf	6
  8097  0F68  0187               	clrf	7
  8098  0F69  0181               	clrf	1
  8099                           
  8100                           ;main.c: 73: } else {
  8101  0F6A  2F71               	goto	i1l2577
  8102  0F6B                     i1l2575:	
  8103                           
  8104                           ;main.c: 74: analog_in_flags[i] = 1;
  8105  0F6B  0873               	movf	i1set_handler@i,w
  8106  0F6C  3EB4               	addlw	(low (_analog_in_flags| 0))& (0+255)
  8107  0F6D  0086               	movwf	6
  8108  0F6E  0187               	clrf	7
  8109  0F6F  0181               	clrf	1
  8110  0F70  0A81               	incf	1,f
  8111  0F71                     i1l2577:	
  8112                           
  8113                           ;main.c: 75: }
  8114                           ;main.c: 76: mask = mask << 1;
  8115  0F71  3572               	lslf	i1set_handler@mask,w
  8116  0F72  00F1               	movwf	??i1_set_handler
  8117  0F73  0871               	movf	??i1_set_handler,w
  8118  0F74  00F2               	movwf	i1set_handler@mask
  8119  0F75  3001               	movlw	1
  8120  0F76  00F1               	movwf	??i1_set_handler
  8121  0F77  0871               	movf	??i1_set_handler,w
  8122  0F78  07F3               	addwf	i1set_handler@i,f
  8123  0F79  2F58               	goto	L8
  8124  0F7A                     __end_ofi1_set_handler:	
  8125                           
  8126                           	psect	text49
  8127  0D35                     __ptext49:	
  8128 ;; *************** function i1_PROTOCOL_SAV *****************
  8129 ;; Defined at:
  8130 ;;		line 118 in file "protocol.c"
  8131 ;; Parameters:    Size  Location     Type
  8132 ;;		None
  8133 ;; Auto vars:     Size  Location     Type
  8134 ;;		None
  8135 ;; Return value:  Size  Location     Type
  8136 ;;                  1    wreg      void 
  8137 ;; Registers used:
  8138 ;;		wreg, status,2, status,0, pclath, cstack
  8139 ;; Tracked objects:
  8140 ;;		On entry : 0/0
  8141 ;;		On exit  : 0/0
  8142 ;;		Unchanged: 0/0
  8143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8145 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8146 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8147 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8148 ;;Total ram usage:        1 bytes
  8149 ;; Hardware stack levels used:    1
  8150 ;; Hardware stack levels required when called:    1
  8151 ;; This function calls:
  8152 ;;		i1_DATAEE_WriteByte
  8153 ;; This function is called by:
  8154 ;;		_I2C_StatusCallback
  8155 ;; This function uses a non-reentrant model
  8156 ;;
  8157                           
  8158                           
  8159                           ;psect for function i1_PROTOCOL_SAV
  8160  0D35                     i1_PROTOCOL_SAV:	
  8161                           
  8162                           ;protocol.c: 119: DATAEE_WriteByte(1, value);
  8163                           
  8164                           ;incstack = 0
  8165                           ; Regs used in i1_PROTOCOL_SAV: [wreg+status,2+status,0+pclath+cstack]
  8166  0D35  0020               	movlb	0	; select bank0
  8167  0D36  0862               	movf	_value,w
  8168  0D37  00F3               	movwf	??i1_PROTOCOL_SAV
  8169  0D38  0873               	movf	??i1_PROTOCOL_SAV,w
  8170  0D39  00F0               	movwf	i1DATAEE_WriteByte@bData
  8171  0D3A  3001               	movlw	1
  8172  0D3B  318E  2691         	fcall	i1_DATAEE_WriteByte
  8173  0D3D  0008               	return
  8174  0D3E                     __end_ofi1_PROTOCOL_SAV:	
  8175                           
  8176                           	psect	text50
  8177  0E91                     __ptext50:	
  8178 ;; *************** function i1_DATAEE_WriteByte *****************
  8179 ;; Defined at:
  8180 ;;		line 180 in file "mcc_generated_files/memory.c"
  8181 ;; Parameters:    Size  Location     Type
  8182 ;;  bAdd            1    wreg     unsigned char 
  8183 ;;  bData           1    0[COMMON] unsigned char 
  8184 ;; Auto vars:     Size  Location     Type
  8185 ;;  bAdd            1    1[COMMON] unsigned char 
  8186 ;;  DATAEE_Write    1    2[COMMON] unsigned char 
  8187 ;; Return value:  Size  Location     Type
  8188 ;;                  1    wreg      void 
  8189 ;; Registers used:
  8190 ;;		wreg, status,2, status,0
  8191 ;; Tracked objects:
  8192 ;;		On entry : 0/0
  8193 ;;		On exit  : 0/0
  8194 ;;		Unchanged: 0/0
  8195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8196 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8197 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8199 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8200 ;;Total ram usage:        3 bytes
  8201 ;; Hardware stack levels used:    1
  8202 ;; This function calls:
  8203 ;;		Nothing
  8204 ;; This function is called by:
  8205 ;;		i1_PROTOCOL_SAV
  8206 ;; This function uses a non-reentrant model
  8207 ;;
  8208                           
  8209                           
  8210                           ;psect for function i1_DATAEE_WriteByte
  8211  0E91                     i1_DATAEE_WriteByte:	
  8212                           
  8213                           ;incstack = 0
  8214                           ; Regs used in i1_DATAEE_WriteByte: [wreg+status,2+status,0]
  8215                           ;i1DATAEE_WriteByte@bAdd stored from wreg
  8216  0E91  00F1               	movwf	i1DATAEE_WriteByte@bAdd
  8217                           
  8218                           ;memory.c: 182: uint8_t GIEBitValue = 0;
  8219  0E92  01F2               	clrf	i1DATAEE_WriteByte@GIEBitValue
  8220                           
  8221                           ;memory.c: 184: EEADRL = (bAdd & 0x0ff);
  8222  0E93  0871               	movf	i1DATAEE_WriteByte@bAdd,w
  8223  0E94  0023               	movlb	3	; select bank3
  8224  0E95  0091               	movwf	17	;volatile
  8225                           
  8226                           ;memory.c: 185: EEDATL = bData;
  8227  0E96  0870               	movf	i1DATAEE_WriteByte@bData,w
  8228  0E97  0093               	movwf	19	;volatile
  8229                           
  8230                           ;memory.c: 186: EECON1bits.EEPGD = 0;
  8231  0E98  1395               	bcf	21,7	;volsfr
  8232                           
  8233                           ;memory.c: 187: EECON1bits.CFGS = 0;
  8234  0E99  1315               	bcf	21,6	;volsfr
  8235                           
  8236                           ;memory.c: 188: EECON1bits.WREN = 1;
  8237  0E9A  1515               	bsf	21,2	;volsfr
  8238                           
  8239                           ;memory.c: 190: GIEBitValue = INTCONbits.GIE;
  8240  0E9B  3000               	movlw	0
  8241  0E9C  1B8B               	btfsc	11,7	;volatile
  8242  0E9D  3001               	movlw	1
  8243  0E9E  00F2               	movwf	i1DATAEE_WriteByte@GIEBitValue
  8244                           
  8245                           ;memory.c: 191: INTCONbits.GIE = 0;
  8246  0E9F  138B               	bcf	11,7	;volatile
  8247                           
  8248                           ;memory.c: 192: EECON2 = 0x55;
  8249  0EA0  3055               	movlw	85
  8250  0EA1  0096               	movwf	22	;volsfr
  8251                           
  8252                           ;memory.c: 193: EECON2 = 0xAA;
  8253  0EA2  30AA               	movlw	170
  8254  0EA3  0096               	movwf	22	;volsfr
  8255                           
  8256                           ;memory.c: 194: EECON1bits.WR = 1;
  8257  0EA4  1495               	bsf	21,1	;volsfr
  8258  0EA5                     i1l1289:	
  8259                           ;memory.c: 197: {
  8260                           
  8261                           ;memory.c: 196: while (EECON1bits.WR)
  8262                           
  8263  0EA5  1895               	btfsc	21,1	;volsfr
  8264  0EA6  2EA5               	goto	i1l1289
  8265                           
  8266                           ;memory.c: 198: }
  8267                           ;memory.c: 200: EECON1bits.WREN = 0;
  8268  0EA7  1115               	bcf	21,2	;volsfr
  8269                           
  8270                           ;memory.c: 201: INTCONbits.GIE = GIEBitValue;
  8271  0EA8  0C72               	rrf	i1DATAEE_WriteByte@GIEBitValue,w
  8272  0EA9  1C03               	skipc
  8273  0EAA  138B               	bcf	11,7	;volatile
  8274  0EAB  1803               	skipnc
  8275  0EAC  178B               	bsf	11,7	;volatile
  8276  0EAD  0008               	return
  8277  0EAE                     __end_ofi1_DATAEE_WriteByte:	
  8278                           
  8279                           	psect	text51
  8280  0CE9                     __ptext51:	
  8281 ;; *************** function i1_PROTOCOL_EXT *****************
  8282 ;; Defined at:
  8283 ;;		line 127 in file "protocol.c"
  8284 ;; Parameters:    Size  Location     Type
  8285 ;;  char_buf        1    wreg     PTR unsigned char 
  8286 ;;		 -> I2C_StatusCallback@ext_buf(48), buf(48), 
  8287 ;; Auto vars:     Size  Location     Type
  8288 ;;  char_buf        1  (no storage) PTR unsigned char 
  8289 ;;		 -> I2C_StatusCallback@ext_buf(48), buf(48), 
  8290 ;; Return value:  Size  Location     Type
  8291 ;;                  1    wreg      void 
  8292 ;; Registers used:
  8293 ;;		wreg, status,2, status,0
  8294 ;; Tracked objects:
  8295 ;;		On entry : 0/0
  8296 ;;		On exit  : 0/0
  8297 ;;		Unchanged: 0/0
  8298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8300 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8302 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8303 ;;Total ram usage:        0 bytes
  8304 ;; Hardware stack levels used:    1
  8305 ;; This function calls:
  8306 ;;		Nothing
  8307 ;; This function is called by:
  8308 ;;		_I2C_StatusCallback
  8309 ;; This function uses a non-reentrant model
  8310 ;;
  8311                           
  8312                           
  8313                           ;psect for function i1_PROTOCOL_EXT
  8314  0CE9                     i1_PROTOCOL_EXT:	
  8315                           
  8316                           ;incstack = 0
  8317                           ; Regs used in i1_PROTOCOL_EXT: [wreg+status,2+status,0]
  8318  0CE9  0008               	return
  8319  0CEA                     __end_ofi1_PROTOCOL_EXT:	
  8320                           
  8321                           	psect	text52
  8322  0CF0                     __ptext52:	
  8323 ;; *************** function _PROTOCOL_Read_Lock *****************
  8324 ;; Defined at:
  8325 ;;		line 135 in file "protocol.c"
  8326 ;; Parameters:    Size  Location     Type
  8327 ;;		None
  8328 ;; Auto vars:     Size  Location     Type
  8329 ;;		None
  8330 ;; Return value:  Size  Location     Type
  8331 ;;                  1    wreg      unsigned char 
  8332 ;; Registers used:
  8333 ;;		wreg
  8334 ;; Tracked objects:
  8335 ;;		On entry : 0/0
  8336 ;;		On exit  : 0/0
  8337 ;;		Unchanged: 0/0
  8338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8340 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8342 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8343 ;;Total ram usage:        0 bytes
  8344 ;; Hardware stack levels used:    1
  8345 ;; This function calls:
  8346 ;;		Nothing
  8347 ;; This function is called by:
  8348 ;;		_I2C_StatusCallback
  8349 ;; This function uses a non-reentrant model
  8350 ;;
  8351                           
  8352                           
  8353                           ;psect for function _PROTOCOL_Read_Lock
  8354  0CF0                     _PROTOCOL_Read_Lock:	
  8355                           
  8356                           ;protocol.c: 136: return locked;
  8357                           
  8358                           ;incstack = 0
  8359                           ; Regs used in _PROTOCOL_Read_Lock: [wreg]
  8360  0CF0  0020               	movlb	0	; select bank0
  8361  0CF1  0861               	movf	_locked,w
  8362  0CF2  0008               	return
  8363  0CF3                     __end_of_PROTOCOL_Read_Lock:	
  8364                           
  8365                           	psect	text53
  8366  0D59                     __ptext53:	
  8367 ;; *************** function _PROTOCOL_RST *****************
  8368 ;; Defined at:
  8369 ;;		line 291 in file "protocol.c"
  8370 ;; Parameters:    Size  Location     Type
  8371 ;;		None
  8372 ;; Auto vars:     Size  Location     Type
  8373 ;;		None
  8374 ;; Return value:  Size  Location     Type
  8375 ;;                  1    wreg      void 
  8376 ;; Registers used:
  8377 ;;		wreg, status,2, status,0
  8378 ;; Tracked objects:
  8379 ;;		On entry : 0/0
  8380 ;;		On exit  : 0/0
  8381 ;;		Unchanged: 0/0
  8382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8383 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8384 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8385 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8386 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8387 ;;Total ram usage:        1 bytes
  8388 ;; Hardware stack levels used:    1
  8389 ;; This function calls:
  8390 ;;		Nothing
  8391 ;; This function is called by:
  8392 ;;		_I2C_StatusCallback
  8393 ;; This function uses a non-reentrant model
  8394 ;;
  8395                           
  8396                           
  8397                           ;psect for function _PROTOCOL_RST
  8398  0D59                     _PROTOCOL_RST:	
  8399                           
  8400                           ;protocol.c: 292: if (readbuf.status != TLV_SET) {
  8401                           
  8402                           ;incstack = 0
  8403                           ; Regs used in _PROTOCOL_RST: [wreg+status,2+status,0]
  8404  0D59  0021               	movlb	1	; select bank1
  8405  0D5A  085C               	movf	(_readbuf^(0+128)+3),w
  8406  0D5B  1903               	btfsc	3,2
  8407  0D5C  0008               	return
  8408                           
  8409                           ;protocol.c: 293: readbuf.buf_cnt = 0;
  8410  0D5D  01DD               	clrf	(_readbuf^(0+128)+4)
  8411                           
  8412                           ;protocol.c: 294: readbuf.status = COMPLETE;
  8413  0D5E  3003               	movlw	3
  8414  0D5F  00F0               	movwf	??_PROTOCOL_RST
  8415  0D60  0870               	movf	??_PROTOCOL_RST,w
  8416  0D61  00DC               	movwf	(_readbuf^(0+128)+3)
  8417  0D62  0008               	return
  8418  0D63                     __end_of_PROTOCOL_RST:	
  8419                           
  8420                           	psect	text54
  8421  0D03                     __ptext54:	
  8422 ;; *************** function _PROTOCOL_INV *****************
  8423 ;; Defined at:
  8424 ;;		line 114 in file "protocol.c"
  8425 ;; Parameters:    Size  Location     Type
  8426 ;;		None
  8427 ;; Auto vars:     Size  Location     Type
  8428 ;;		None
  8429 ;; Return value:  Size  Location     Type
  8430 ;;                  1    wreg      void 
  8431 ;; Registers used:
  8432 ;;		None
  8433 ;; Tracked objects:
  8434 ;;		On entry : 0/0
  8435 ;;		On exit  : 0/0
  8436 ;;		Unchanged: 0/0
  8437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8439 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8441 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8442 ;;Total ram usage:        0 bytes
  8443 ;; Hardware stack levels used:    1
  8444 ;; This function calls:
  8445 ;;		Nothing
  8446 ;; This function is called by:
  8447 ;;		_I2C_StatusCallback
  8448 ;; This function uses a non-reentrant model
  8449 ;;
  8450                           
  8451                           
  8452                           ;psect for function _PROTOCOL_INV
  8453  0D03                     _PROTOCOL_INV:	
  8454                           
  8455                           ;protocol.c: 115: invoked = 1;
  8456                           
  8457                           ;incstack = 0
  8458                           ; Regs used in _PROTOCOL_INV: []
  8459  0D03  0020               	movlb	0	; select bank0
  8460  0D04  01DF               	clrf	_invoked
  8461  0D05  0ADF               	incf	_invoked,f
  8462  0D06  0008               	return
  8463  0D07                     __end_of_PROTOCOL_INV:	
  8464                           
  8465                           	psect	text55
  8466  0CED                     __ptext55:	
  8467 ;; *************** function _PROTOCOL_I2C_WHO *****************
  8468 ;; Defined at:
  8469 ;;		line 211 in file "protocol.c"
  8470 ;; Parameters:    Size  Location     Type
  8471 ;;		None
  8472 ;; Auto vars:     Size  Location     Type
  8473 ;;		None
  8474 ;; Return value:  Size  Location     Type
  8475 ;;                  1    wreg      unsigned char 
  8476 ;; Registers used:
  8477 ;;		wreg
  8478 ;; Tracked objects:
  8479 ;;		On entry : 0/0
  8480 ;;		On exit  : 0/0
  8481 ;;		Unchanged: 0/0
  8482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8484 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8486 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8487 ;;Total ram usage:        0 bytes
  8488 ;; Hardware stack levels used:    1
  8489 ;; This function calls:
  8490 ;;		Nothing
  8491 ;; This function is called by:
  8492 ;;		_I2C_StatusCallback
  8493 ;; This function uses a non-reentrant model
  8494 ;;
  8495                           
  8496                           
  8497                           ;psect for function _PROTOCOL_I2C_WHO
  8498  0CED                     _PROTOCOL_I2C_WHO:	
  8499                           
  8500                           ;protocol.c: 212: return slave_address;
  8501                           
  8502                           ;incstack = 0
  8503                           ; Regs used in _PROTOCOL_I2C_WHO: [wreg]
  8504  0CED  0020               	movlb	0	; select bank0
  8505  0CEE  0864               	movf	_slave_address,w
  8506  0CEF  0008               	return
  8507  0CF0                     __end_of_PROTOCOL_I2C_WHO:	
  8508                           
  8509                           	psect	text56
  8510  0759                     __ptext56:	
  8511 ;; *************** function _PROTOCOL_I2C_SEN *****************
  8512 ;; Defined at:
  8513 ;;		line 410 in file "protocol.c"
  8514 ;; Parameters:    Size  Location     Type
  8515 ;;		None
  8516 ;; Auto vars:     Size  Location     Type
  8517 ;;  pdata           1    1[COMMON] PTR unsigned char 
  8518 ;;		 -> type_no_data(1), PROTOCOL_Send_uint8_t@pbuf(1), sendbuf(16), readbuf.length(1), 
  8519 ;;		 -> readbuf.type(1), readbuf(5), position(4), 
  8520 ;; Return value:  Size  Location     Type
  8521 ;;                  1    wreg      PTR unsigned char 
  8522 ;; Registers used:
  8523 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8524 ;; Tracked objects:
  8525 ;;		On entry : 0/0
  8526 ;;		On exit  : 0/0
  8527 ;;		Unchanged: 0/0
  8528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8530 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8531 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8532 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8533 ;;Total ram usage:        2 bytes
  8534 ;; Hardware stack levels used:    1
  8535 ;; This function calls:
  8536 ;;		Nothing
  8537 ;; This function is called by:
  8538 ;;		_I2C_StatusCallback
  8539 ;; This function uses a non-reentrant model
  8540 ;;
  8541                           
  8542                           
  8543                           ;psect for function _PROTOCOL_I2C_SEN
  8544  0759                     _PROTOCOL_I2C_SEN:	
  8545                           
  8546                           ;protocol.c: 411: uint8_t *pdata;
  8547                           ;protocol.c: 412: switch(readbuf.status) {
  8548                           
  8549                           ;incstack = 0
  8550                           ; Regs used in _PROTOCOL_I2C_SEN: [wreg-fsr0h+status,2+status,0]
  8551  0759  2F84               	goto	i1l2729
  8552  075A                     i1l2709:	
  8553                           ;protocol.c: 413: case TLV_SET:
  8554                           
  8555                           
  8556                           ;protocol.c: 414: pdata = &readbuf.type;
  8557  075A  30D9               	movlw	(low (_readbuf| 0))& (0+255)
  8558  075B  00F0               	movwf	??_PROTOCOL_I2C_SEN
  8559  075C  0870               	movf	??_PROTOCOL_I2C_SEN,w
  8560  075D  00F1               	movwf	PROTOCOL_I2C_SEN@pdata
  8561                           
  8562                           ;protocol.c: 415: readbuf.status = TYPE_SENT;
  8563  075E  0021               	movlb	1	; select bank1
  8564  075F  01DC               	clrf	(_readbuf^(0+128)+3)
  8565  0760  0ADC               	incf	(_readbuf^(0+128)+3),f
  8566                           
  8567                           ;protocol.c: 416: break;
  8568  0761  2F93               	goto	i1l2731
  8569  0762                     i1l2713:	
  8570                           ;protocol.c: 417: case TYPE_SENT:
  8571                           
  8572                           
  8573                           ;protocol.c: 418: pdata = &readbuf.length;
  8574  0762  30DA               	movlw	(low ((_readbuf| 0+1)))& (0+255)
  8575  0763  00F0               	movwf	??_PROTOCOL_I2C_SEN
  8576  0764  0870               	movf	??_PROTOCOL_I2C_SEN,w
  8577  0765  00F1               	movwf	PROTOCOL_I2C_SEN@pdata
  8578                           
  8579                           ;protocol.c: 419: readbuf.status = LENGTH_SENT;
  8580  0766  3002               	movlw	2
  8581  0767  2F7B               	goto	L9
  8582  0768                     i1l2715:	
  8583                           ;protocol.c: 421: case LENGTH_SENT:
  8584                           
  8585                           ;protocol.c: 420: break;
  8586                           
  8587                           
  8588                           ;protocol.c: 422: if (readbuf.buf_cnt < readbuf.length) {
  8589  0768  085A               	movf	(_readbuf^(0+128)+1),w
  8590  0769  025D               	subwf	(_readbuf^(0+128)+4),w
  8591  076A  1803               	skipnc
  8592  076B  2F75               	goto	i1l2719
  8593                           
  8594                           ;protocol.c: 423: pdata = &readbuf.pbuffer[readbuf.buf_cnt++];
  8595  076C  085B               	movf	(low ((_readbuf| 0+2)))^(0+128),w
  8596  076D  075D               	addwf	(_readbuf^(0+128)+4),w
  8597  076E  00F0               	movwf	??_PROTOCOL_I2C_SEN
  8598  076F  0870               	movf	??_PROTOCOL_I2C_SEN,w
  8599  0770  00F1               	movwf	PROTOCOL_I2C_SEN@pdata
  8600  0771  3001               	movlw	1
  8601  0772  00F0               	movwf	??_PROTOCOL_I2C_SEN
  8602  0773  0870               	movf	??_PROTOCOL_I2C_SEN,w
  8603  0774  07DD               	addwf	(_readbuf^(0+128)+4),f
  8604  0775                     i1l2719:	
  8605                           
  8606                           ;protocol.c: 424: }
  8607                           ;protocol.c: 425: if (readbuf.buf_cnt == readbuf.length) {
  8608  0775  085D               	movf	(_readbuf^(0+128)+4),w
  8609  0776  065A               	xorwf	(_readbuf^(0+128)+1),w
  8610  0777  1D03               	skipz
  8611  0778  2F93               	goto	i1l2731
  8612                           
  8613                           ;protocol.c: 426: readbuf.buf_cnt = 0;
  8614  0779  01DD               	clrf	(_readbuf^(0+128)+4)
  8615                           
  8616                           ;protocol.c: 427: readbuf.status = COMPLETE;
  8617  077A  3003               	movlw	3
  8618  077B                     L9:	
  8619  077B  00F0               	movwf	??_PROTOCOL_I2C_SEN
  8620  077C  0870               	movf	??_PROTOCOL_I2C_SEN,w
  8621  077D  00DC               	movwf	(_readbuf^(0+128)+3)
  8622                           
  8623                           ;protocol.c: 428: }
  8624                           ;protocol.c: 429: break;
  8625  077E  2F93               	goto	i1l2731
  8626  077F                     i1l2725:	
  8627                           ;protocol.c: 430: case COMPLETE:
  8628                           
  8629                           
  8630                           ;protocol.c: 431: pdata = &type_no_data;
  8631  077F  306F               	movlw	(low (_type_no_data| 0))& (0+255)
  8632  0780  00F0               	movwf	??_PROTOCOL_I2C_SEN
  8633  0781  0870               	movf	??_PROTOCOL_I2C_SEN,w
  8634  0782  00F1               	movwf	PROTOCOL_I2C_SEN@pdata
  8635                           
  8636                           ;protocol.c: 433: }
  8637                           
  8638                           ;protocol.c: 432: break;
  8639  0783  2F93               	goto	i1l2731
  8640  0784                     i1l2729:	
  8641  0784  0021               	movlb	1	; select bank1
  8642  0785  085C               	movf	(_readbuf^(0+128)+3),w
  8643                           
  8644                           ; Switch size 1, requested type "space"
  8645                           ; Number of cases is 4, Range of values is 0 to 3
  8646                           ; switch strategies available:
  8647                           ; Name         Instructions Cycles
  8648                           ; simple_byte           13     7 (average)
  8649                           ; direct_byte           14     6 (fixed)
  8650                           ; jumptable            260     6 (fixed)
  8651                           ;	Chosen strategy is simple_byte
  8652  0786  3A00               	xorlw	0	; case 0
  8653  0787  1903               	skipnz
  8654  0788  2F5A               	goto	i1l2709
  8655  0789  3A01               	xorlw	1	; case 1
  8656  078A  1903               	skipnz
  8657  078B  2F62               	goto	i1l2713
  8658  078C  3A03               	xorlw	3	; case 2
  8659  078D  1903               	skipnz
  8660  078E  2F68               	goto	i1l2715
  8661  078F  3A01               	xorlw	1	; case 3
  8662  0790  1903               	skipnz
  8663  0791  2F7F               	goto	i1l2725
  8664  0792  2F93               	goto	i1l2731
  8665  0793                     i1l2731:	
  8666                           
  8667                           ;protocol.c: 434: return pdata;
  8668  0793  0871               	movf	PROTOCOL_I2C_SEN@pdata,w
  8669  0794  0008               	return
  8670  0795                     __end_of_PROTOCOL_I2C_SEN:	
  8671                           
  8672                           	psect	text57
  8673  0CEA                     __ptext57:	
  8674 ;; *************** function _PROTOCOL_I2C_GET *****************
  8675 ;; Defined at:
  8676 ;;		line 215 in file "protocol.c"
  8677 ;; Parameters:    Size  Location     Type
  8678 ;;		None
  8679 ;; Auto vars:     Size  Location     Type
  8680 ;;		None
  8681 ;; Return value:  Size  Location     Type
  8682 ;;                  1    wreg      unsigned char 
  8683 ;; Registers used:
  8684 ;;		wreg
  8685 ;; Tracked objects:
  8686 ;;		On entry : 0/0
  8687 ;;		On exit  : 0/0
  8688 ;;		Unchanged: 0/0
  8689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8691 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8693 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8694 ;;Total ram usage:        0 bytes
  8695 ;; Hardware stack levels used:    1
  8696 ;; This function calls:
  8697 ;;		Nothing
  8698 ;; This function is called by:
  8699 ;;		_I2C_StatusCallback
  8700 ;; This function uses a non-reentrant model
  8701 ;;
  8702                           
  8703                           
  8704                           ;psect for function _PROTOCOL_I2C_GET
  8705  0CEA                     _PROTOCOL_I2C_GET:	
  8706                           
  8707                           ;protocol.c: 216: return value;
  8708                           
  8709                           ;incstack = 0
  8710                           ; Regs used in _PROTOCOL_I2C_GET: [wreg]
  8711  0CEA  0020               	movlb	0	; select bank0
  8712  0CEB  0862               	movf	_value,w
  8713  0CEC  0008               	return
  8714  0CED                     __end_of_PROTOCOL_I2C_GET:	
  8715                           
  8716                           	psect	text58
  8717  0CFF                     __ptext58:	
  8718 ;; *************** function _PROTOCOL_Backplane_Slave_Enabled *****************
  8719 ;; Defined at:
  8720 ;;		line 207 in file "protocol.c"
  8721 ;; Parameters:    Size  Location     Type
  8722 ;;		None
  8723 ;; Auto vars:     Size  Location     Type
  8724 ;;		None
  8725 ;; Return value:  Size  Location     Type
  8726 ;;                  1    wreg      void 
  8727 ;; Registers used:
  8728 ;;		None
  8729 ;; Tracked objects:
  8730 ;;		On entry : 0/0
  8731 ;;		On exit  : 0/0
  8732 ;;		Unchanged: 0/0
  8733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8737 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8738 ;;Total ram usage:        0 bytes
  8739 ;; Hardware stack levels used:    1
  8740 ;; This function calls:
  8741 ;;		Nothing
  8742 ;; This function is called by:
  8743 ;;		_I2C_StatusCallback
  8744 ;; This function uses a non-reentrant model
  8745 ;;
  8746                           
  8747                           
  8748                           ;psect for function _PROTOCOL_Backplane_Slave_Enabled
  8749  0CFF                     _PROTOCOL_Backplane_Slave_Enabled:	
  8750                           
  8751                           ;protocol.c: 208: backplane_slave_enabled = 1;
  8752                           
  8753                           ;incstack = 0
  8754                           ; Regs used in _PROTOCOL_Backplane_Slave_Enabled: []
  8755  0CFF  0020               	movlb	0	; select bank0
  8756  0D00  01DB               	clrf	_backplane_slave_enabled
  8757  0D01  0ADB               	incf	_backplane_slave_enabled,f
  8758  0D02  0008               	return
  8759  0D03                     __end_of_PROTOCOL_Backplane_Slave_Enabled:	
  8760                           
  8761                           	psect	text59
  8762  0E74                     __ptext59:	
  8763 ;; *************** function _EUSART_Transmit_ISR *****************
  8764 ;; Defined at:
  8765 ;;		line 165 in file "mcc_generated_files/eusart.c"
  8766 ;; Parameters:    Size  Location     Type
  8767 ;;		None
  8768 ;; Auto vars:     Size  Location     Type
  8769 ;;		None
  8770 ;; Return value:  Size  Location     Type
  8771 ;;                  1    wreg      void 
  8772 ;; Registers used:
  8773 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8774 ;; Tracked objects:
  8775 ;;		On entry : 0/0
  8776 ;;		On exit  : 0/0
  8777 ;;		Unchanged: 0/0
  8778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8780 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8781 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8782 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8783 ;;Total ram usage:        1 bytes
  8784 ;; Hardware stack levels used:    1
  8785 ;; This function calls:
  8786 ;;		Nothing
  8787 ;; This function is called by:
  8788 ;;		_INTERRUPT_InterruptManager
  8789 ;; This function uses a non-reentrant model
  8790 ;;
  8791                           
  8792                           
  8793                           ;psect for function _EUSART_Transmit_ISR
  8794  0E74                     _EUSART_Transmit_ISR:	
  8795                           
  8796                           ;eusart.c: 169: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
  8797                           
  8798                           ;incstack = 0
  8799                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  8800  0E74  3008               	movlw	8
  8801  0E75  0020               	movlb	0	; select bank0
  8802  0E76  0268               	subwf	_eusartTxBufferRemaining,w	;volatile
  8803  0E77  1803               	skipnc
  8804  0E78  2E8E               	goto	i1l357
  8805                           
  8806                           ;eusart.c: 170: {
  8807                           ;eusart.c: 171: TXREG = eusartTxBuffer[eusartTxTail++];
  8808  0E79  0869               	movf	_eusartTxTail,w
  8809  0E7A  3EA8               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  8810  0E7B  0086               	movwf	6
  8811  0E7C  0187               	clrf	7
  8812  0E7D  0801               	movf	1,w
  8813  0E7E  0023               	movlb	3	; select bank3
  8814  0E7F  009A               	movwf	26	;volatile
  8815  0E80  3001               	movlw	1
  8816  0E81  00F0               	movwf	??_EUSART_Transmit_ISR
  8817  0E82  0870               	movf	??_EUSART_Transmit_ISR,w
  8818  0E83  0020               	movlb	0	; select bank0
  8819  0E84  07E9               	addwf	_eusartTxTail,f	;volatile
  8820                           
  8821                           ;eusart.c: 172: if(sizeof(eusartTxBuffer) <= eusartTxTail)
  8822  0E85  3008               	movlw	8
  8823  0E86  0269               	subwf	_eusartTxTail,w	;volatile
  8824  0E87  1803               	btfsc	3,0
  8825                           
  8826                           ;eusart.c: 173: {
  8827                           ;eusart.c: 174: eusartTxTail = 0;
  8828  0E88  01E9               	clrf	_eusartTxTail	;volatile
  8829                           
  8830                           ;eusart.c: 175: }
  8831                           ;eusart.c: 176: eusartTxBufferRemaining++;
  8832  0E89  3001               	movlw	1
  8833  0E8A  00F0               	movwf	??_EUSART_Transmit_ISR
  8834  0E8B  0870               	movf	??_EUSART_Transmit_ISR,w
  8835  0E8C  07E8               	addwf	_eusartTxBufferRemaining,f	;volatile
  8836                           
  8837                           ;eusart.c: 177: }
  8838  0E8D  0008               	return
  8839  0E8E                     i1l357:	
  8840                           
  8841                           ;eusart.c: 178: else
  8842                           ;eusart.c: 179: {
  8843                           ;eusart.c: 180: PIE1bits.TXIE = 0;
  8844  0E8E  0021               	movlb	1	; select bank1
  8845  0E8F  1211               	bcf	17,4	;volatile
  8846  0E90  0008               	return
  8847  0E91                     __end_of_EUSART_Transmit_ISR:	
  8848                           
  8849                           	psect	text60
  8850  0E3D                     __ptext60:	
  8851 ;; *************** function _EUSART_Receive_ISR *****************
  8852 ;; Defined at:
  8853 ;;		line 184 in file "mcc_generated_files/eusart.c"
  8854 ;; Parameters:    Size  Location     Type
  8855 ;;		None
  8856 ;; Auto vars:     Size  Location     Type
  8857 ;;		None
  8858 ;; Return value:  Size  Location     Type
  8859 ;;                  1    wreg      void 
  8860 ;; Registers used:
  8861 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8862 ;; Tracked objects:
  8863 ;;		On entry : 0/0
  8864 ;;		On exit  : 0/0
  8865 ;;		Unchanged: 0/0
  8866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8868 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8869 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8870 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8871 ;;Total ram usage:        1 bytes
  8872 ;; Hardware stack levels used:    1
  8873 ;; This function calls:
  8874 ;;		Nothing
  8875 ;; This function is called by:
  8876 ;;		_INTERRUPT_InterruptManager
  8877 ;; This function uses a non-reentrant model
  8878 ;;
  8879                           
  8880                           
  8881                           ;psect for function _EUSART_Receive_ISR
  8882  0E3D                     _EUSART_Receive_ISR:	
  8883                           
  8884                           ;eusart.c: 187: if(1 == RCSTAbits.OERR)
  8885                           
  8886                           ;incstack = 0
  8887                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  8888  0E3D  0023               	movlb	3	; select bank3
  8889  0E3E  1C9D               	btfss	29,1	;volatile
  8890  0E3F  2E42               	goto	i1l3077
  8891                           
  8892                           ;eusart.c: 188: {
  8893                           ;eusart.c: 191: RCSTAbits.CREN = 0;
  8894  0E40  121D               	bcf	29,4	;volatile
  8895                           
  8896                           ;eusart.c: 192: RCSTAbits.CREN = 1;
  8897  0E41  161D               	bsf	29,4	;volatile
  8898  0E42                     i1l3077:	
  8899                           
  8900                           ;eusart.c: 193: }
  8901                           ;eusart.c: 196: eusartRxBuffer[eusartRxHead++] = RCREG;
  8902  0E42  0819               	movf	25,w	;volatile
  8903  0E43  00F0               	movwf	??_EUSART_Receive_ISR
  8904  0E44  0020               	movlb	0	; select bank0
  8905  0E45  0867               	movf	_eusartRxHead,w
  8906  0E46  3EA0               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  8907  0E47  0086               	movwf	6
  8908  0E48  0187               	clrf	7
  8909  0E49  0870               	movf	??_EUSART_Receive_ISR,w
  8910  0E4A  0081               	movwf	1
  8911  0E4B  3001               	movlw	1
  8912  0E4C  00F0               	movwf	??_EUSART_Receive_ISR
  8913  0E4D  0870               	movf	??_EUSART_Receive_ISR,w
  8914  0E4E  07E7               	addwf	_eusartRxHead,f	;volatile
  8915                           
  8916                           ;eusart.c: 197: if(sizeof(eusartRxBuffer) <= eusartRxHead)
  8917  0E4F  3008               	movlw	8
  8918  0E50  0267               	subwf	_eusartRxHead,w	;volatile
  8919  0E51  1803               	btfsc	3,0
  8920                           
  8921                           ;eusart.c: 198: {
  8922                           ;eusart.c: 199: eusartRxHead = 0;
  8923  0E52  01E7               	clrf	_eusartRxHead	;volatile
  8924                           
  8925                           ;eusart.c: 200: }
  8926                           ;eusart.c: 201: eusartRxCount++;
  8927  0E53  3001               	movlw	1
  8928  0E54  00F0               	movwf	??_EUSART_Receive_ISR
  8929  0E55  0870               	movf	??_EUSART_Receive_ISR,w
  8930  0E56  07E5               	addwf	_eusartRxCount,f	;volatile
  8931  0E57  0008               	return
  8932  0E58                     __end_of_EUSART_Receive_ISR:	
  8933  007E                     btemp	set	126	;btemp
  8934  007E                     int$flags	set	126
  8935  007E                     wtemp0	set	126


Data Sizes:
    Strings     192
    Constant    14
    Data        6
    BSS         197
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     50      80
    BANK1            80      0      75
    BANK2            80      0      48
    BANK3            80      0      48
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    PROTOCOL_Extension_Handler$0	PTR unsigned char  size(1) Largest target is 48
		 -> I2C_StatusCallback@ext_buf(BANK3[48]), buf(BANK2[48]), 

    data	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    strncmp@s2	PTR const unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_15(CODE[4]), STR_14(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), 
		 -> STR_8(CODE[4]), STR_7(CODE[4]), STR_6(CODE[4]), STR_4(CODE[4]), 

    atoi@s	PTR const unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), 

    I2C_StatusCallback@pdata	PTR unsigned char  size(1) Largest target is 16
		 -> type_no_data(BANK0[1]), PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK1[16]), readbuf.length(BANK1[1]), 
		 -> readbuf.type(BANK1[1]), readbuf(BANK1[5]), position(BANK1[4]), 

    sp__PROTOCOL_I2C_SEN	PTR unsigned char  size(1) Largest target is 16
		 -> type_no_data(BANK0[1]), PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK1[16]), readbuf.length(BANK1[1]), 
		 -> readbuf.type(BANK1[1]), readbuf(BANK1[5]), position(BANK1[4]), 

    PROTOCOL_I2C_SEN@pdata	PTR unsigned char  size(1) Largest target is 16
		 -> type_no_data(BANK0[1]), PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK1[16]), readbuf.length(BANK1[1]), 
		 -> readbuf.type(BANK1[1]), readbuf(BANK1[5]), position(BANK1[4]), 

    PROTOCOL_I2C_Send_uint8_t@pbuffer	PTR unsigned char  size(1) Largest target is 4
		 -> PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), position(BANK1[4]), 

    PROTOCOL_I2C_Set_TLV@pbuffer	PTR unsigned char  size(1) Largest target is 16
		 -> PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK1[16]), position(BANK1[4]), 

    PROTOCOL_EXT@char_buf	PTR unsigned char  size(1) Largest target is 48
		 -> I2C_StatusCallback@ext_buf(BANK3[48]), buf(BANK2[48]), 

    PROTOCOL_Tick_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    PROTOCOL_Extension_Handler	PTR FTN(PTR unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    PROTOCOL_Set_Func@loop_func	PTR void  size(2) Largest target is 1
		 -> loop_func(), 

    PROTOCOL_Loop_Func	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), loop_func(), 

    PROTOCOL_Initialize@inv_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Inv_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@set_handler	PTR void  size(2) Largest target is 1
		 -> set_handler(), 

    PROTOCOL_Set_Handler	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), set_handler(), 

    PROTOCOL_Initialize@stop_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Stop_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@start_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Start_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@device_id	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_1(CODE[17]), 

    device_id_	PTR const unsigned char  size(2) Largest target is 8192
		 -> ROM(CODE[8192]), STR_1(CODE[17]), 

    S555$pbuffer	PTR unsigned char  size(1) Largest target is 16
		 -> PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK1[16]), position(BANK1[4]), 

    readbuf.pbuffer	PTR unsigned char  size(1) Largest target is 16
		 -> PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK1[16]), position(BANK1[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 8192
		 -> STR_10(CODE[4]), buf(BANK2[48]), STR_2(CODE[7]), ROM(CODE[8192]), 
		 -> printf@c(BANK0[1]), STR_1(CODE[17]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_48(CODE[10]), STR_47(CODE[9]), STR_46(CODE[10]), STR_45(CODE[9]), 
		 -> STR_44(CODE[4]), STR_43(CODE[4]), STR_42(CODE[4]), STR_41(CODE[4]), 
		 -> STR_40(CODE[4]), STR_39(CODE[4]), STR_38(CODE[4]), STR_37(CODE[4]), 
		 -> STR_36(CODE[14]), STR_35(CODE[9]), STR_34(CODE[10]), STR_33(CODE[9]), 
		 -> STR_32(CODE[10]), STR_31(CODE[9]), STR_30(CODE[7]), STR_29(CODE[4]), 
		 -> STR_28(CODE[4]), STR_27(CODE[9]), STR_26(CODE[4]), STR_25(CODE[4]), 
		 -> STR_24(CODE[10]), STR_23(CODE[4]), STR_22(CODE[4]), STR_21(CODE[8]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[9]), STR_17(CODE[6]), 
		 -> STR_16(CODE[10]), STR_13(CODE[10]), STR_9(CODE[10]), STR_5(CODE[10]), 
		 -> STR_3(CODE[5]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_I2C_ISR
    _I2C_ISR->_I2C_StatusCallback
    _I2C_StatusCallback->i1_PROTOCOL_SET
    i1_PROTOCOL_SET->i1_set_handler
    i1_PROTOCOL_SAV->i1_DATAEE_WriteByte

Critical Paths under _main in BANK0

    _main->_PROTOCOL_Loop
    _PROTOCOL_Loop->_loop_func
    _loop_func->_PROTOCOL_I2C_Send_uint8_t
    _PROTOCOL_I2C_Send_uint8_t->_printf
    _printf->___lwmod
    _putch->_EUSART_Write
    ___lwmod->___lwdiv
    _atoi->___wmul
    _PROTOCOL_Write_Device_Address->_DATAEE_WriteByte
    _PROTOCOL_SET->_set_handler
    _PROTOCOL_SAV->_DATAEE_WriteByte
    _PROTOCOL_Initialize->_set_handler

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   15645
                     _ADC_Initialize
                  _EUSART_Initialize
                     _I2C_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                _PROTOCOL_Initialize
                      _PROTOCOL_Loop
                  _PROTOCOL_Set_Func
                    _TMR0_Initialize
                     _WDT_Initialize
                               _init
 ---------------------------------------------------------------------------------
 (1) _init                                                 2     2      0     112
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_Initialize                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Set_Func                                    2     0      2      86
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Loop                                        4     4      0   13971
                                             46 BANK0      4     4      0
                   Absolute function *
                        _EUSART_Read
                       _PROTOCOL_EXT
       _PROTOCOL_Read_Device_Address
                       _PROTOCOL_SAV
                       _PROTOCOL_SET
                       _PROTOCOL_STA
                       _PROTOCOL_STP
      _PROTOCOL_Write_Device_Address
            _TMR0_HasOverflowOccured
                               _atoi
                          _loop_func *
                             _printf
                            _strncmp
 ---------------------------------------------------------------------------------
 (2) _strncmp                                              7     2      5    1670
                                              0 BANK0      7     2      5
 ---------------------------------------------------------------------------------
 (2) _loop_func                                            7     7      0    6048
                                             39 BANK0      7     7      0
            _ADC_GetConversionResult
               _ADC_IsConversionDone
                  _ADC_SelectChannel
                _ADC_StartConversion
          _PROTOCOL_I2C_Send_uint8_t
                                _abs
                          _led_blink
 ---------------------------------------------------------------------------------
 (3) _led_blink                                            1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _abs                                                  4     2      2     538
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _PROTOCOL_I2C_Send_uint8_t                            5     4      1    5063
                                             34 BANK0      5     4      1
               _PROTOCOL_I2C_Set_TLV
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              24    20      4    4212
                                             14 BANK0     20    16      4
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      66
                                              2 BANK0      1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (4) _EUSART_Write                                         2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     287
                                              8 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     290
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (4) _PROTOCOL_I2C_Set_TLV                                 5     3      2     625
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (3) _ADC_StartConversion                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_SelectChannel                                    2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _ADC_IsConversionDone                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_GetConversionResult                              2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 8     6      2     830
                                              6 BANK0      8     6      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     474
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _TMR0_HasOverflowOccured                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_Write_Device_Address                        2     2      0     240
                                              3 BANK0      2     2      0
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_STP                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_STA                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_SET                                         2     2      0     336
                                              4 BANK0      2     2      0
                   Absolute function *
                        _set_handler *
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_SAV                                         1     1      0     196
                                              3 BANK0      1     1      0
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (3) _DATAEE_WriteByte                                     3     2      1     196
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_EXT                                         1     1      0      90
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Read                                          2     2      0      24
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Initialize                                 10     2      8    1476
                                              4 BANK0     10     2      8
                   Absolute function *
                    _DATAEE_ReadByte
                        _set_handler *
 ---------------------------------------------------------------------------------
 (3) _set_handler                                          4     3      1     266
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _DATAEE_ReadByte                                      1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (11) Absolute function(Fake)                              1     0      1       0
 ---------------------------------------------------------------------------------
 (1) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2C_Initialize                                       2     2      0       0
                                              0 BANK0      2     2      0
       _PROTOCOL_Read_Device_Address
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_Read_Device_Address                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Initialize                                    1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                           1     1      0     721
                                             11 COMMON     1     1      0
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
                            _I2C_ISR
 ---------------------------------------------------------------------------------
 (8) _I2C_ISR                                              2     2      0     721
                                              9 COMMON     2     2      0
                 _I2C_StatusCallback
 ---------------------------------------------------------------------------------
 (9) _I2C_StatusCallback                                   3     3      0     551
                                              6 COMMON     3     3      0
   _PROTOCOL_Backplane_Slave_Enabled
                   _PROTOCOL_I2C_GET
                   _PROTOCOL_I2C_SEN
                   _PROTOCOL_I2C_WHO
                       _PROTOCOL_INV
                       _PROTOCOL_RST
                 _PROTOCOL_Read_Lock
                     i1_PROTOCOL_EXT
                     i1_PROTOCOL_SAV
                     i1_PROTOCOL_SET
                     i1_PROTOCOL_STA
                     i1_PROTOCOL_STP
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_STP                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_STA                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_SET                                      2     2      0     276
                                              4 COMMON     2     2      0
                   Absolute function *
                      i1_set_handler *
 ---------------------------------------------------------------------------------
 (11) i1_set_handler                                       4     3      1     206
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (11) Absolute function(Fake)                              1     0      1       0
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_SAV                                      1     1      0      94
                                              3 COMMON     1     1      0
                 i1_DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (11) i1_DATAEE_WriteByte                                  3     2      1      94
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_EXT                                      1     1      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_Read_Lock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_RST                                        1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_INV                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_I2C_WHO                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_I2C_SEN                                    2     2      0      26
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_I2C_GET                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_Backplane_Slave_Enabled                    0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _EUSART_Receive_ISR                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Initialize
   _EUSART_Initialize
   _I2C_Initialize
     _PROTOCOL_Read_Device_Address
   _OSCILLATOR_Initialize
   _PIN_MANAGER_Initialize
   _PROTOCOL_Initialize
     Absolute function(Fake) *
     _DATAEE_ReadByte *
     _set_handler *
   _PROTOCOL_Loop
     Absolute function(Fake) *
     _EUSART_Read *
     _PROTOCOL_EXT *
     _PROTOCOL_Read_Device_Address *
     _PROTOCOL_SAV *
       _DATAEE_WriteByte
     _PROTOCOL_SET *
       Absolute function(Fake) *
       _set_handler *
     _PROTOCOL_STA *
     _PROTOCOL_STP *
     _PROTOCOL_Write_Device_Address *
       _DATAEE_WriteByte
     _TMR0_HasOverflowOccured *
     _atoi *
       ___wmul
       _isdigit
     _loop_func *
       _ADC_GetConversionResult
       _ADC_IsConversionDone
       _ADC_SelectChannel
       _ADC_StartConversion
       _PROTOCOL_I2C_Send_uint8_t
         _PROTOCOL_I2C_Set_TLV
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
           _putch
             _EUSART_Write
       _abs
       _led_blink
     _printf *
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
     _strncmp *
   _PROTOCOL_Set_Func
   _TMR0_Initialize
   _WDT_Initialize
   _init

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR
   _I2C_ISR
     _I2C_StatusCallback
       _PROTOCOL_Backplane_Slave_Enabled
       _PROTOCOL_I2C_GET
       _PROTOCOL_I2C_SEN
       _PROTOCOL_I2C_WHO
       _PROTOCOL_INV
       _PROTOCOL_RST
       _PROTOCOL_Read_Lock
       i1_PROTOCOL_EXT
       i1_PROTOCOL_SAV
         i1_DATAEE_WriteByte
       i1_PROTOCOL_SET
         Absolute function(Fake) *
         i1_set_handler *
       i1_PROTOCOL_STA
       i1_PROTOCOL_STP

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     32      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4B       7       93.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      30       9       60.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      30      11       60.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     109      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     109      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Mon Oct 09 05:33:32 2017

                                         _i 005A                                           _j 00C7  
                                         pc 0002                      __end_ofi1_PROTOCOL_EXT 0CEA  
                    __end_ofi1_PROTOCOL_SAV 0D3E                      __end_ofi1_PROTOCOL_SET 0DDD  
                    __end_ofi1_PROTOCOL_STA 0D0B                      __end_ofi1_PROTOCOL_STP 0CF6  
           __end_of_TMR0_HasOverflowOccured 0D13                                 __CFG_CP$OFF 0000  
                       ___wmul@multiplicand 0022                             _timer0ReloadVal 006A  
                               __CFG_LVP$ON 0000                                         l214 05A5  
                                       l243 008E                                         l219 05CE  
                                       l271 013B                                         l255 015B  
                                       l345 0F3E                                         l522 023D  
                                       l278 01B1                                         l295 023C  
                                       l861 0E61                                __CFG_CPD$OFF 0000  
              loop_func@transition_detected 004A                             __end_of_I2C_ISR 0FA1  
                                       _abs 0DAA                                         _buf 0120  
                                       _cnt 0063                                __CFG_BORV$LO 0000  
                                       wreg 0009                                __CFG_IESO$ON 0000  
                 I2C_StatusCallback@ext_buf 01A0                   I2C_StatusCallback@ext_cnt 0056  
                 I2C_StatusCallback@ext_len 0057                                ?_EUSART_Read 0070  
                                      ?_abs 0020                                        l2413 07EB  
                                      l2407 07D3                                        l2343 0F52  
                                      l2511 01A5                                        l1289 0F27  
                                      l2361 0E5B                                        l2409 07DF  
                                      l2417 07F4                                        l2329 0F33  
                                      l2521 01D0                                        l2505 0186  
                                      l2433 0093                                        l2355 0DA8  
                                      l2435 009C                                        l2427 0089  
                                      l2533 01E9                                        l2461 00FC  
                                      l2623 0FA5                                        l2391 0FF2  
                                      l2383 0FD4                                        l2535 01ED  
                                      l2543 0202                                        l2527 01DA  
                                      l2519 01CD                                        l2471 011A  
                                      l2455 00EC                                        l2447 00D8  
                                      l2439 00A9                                        l2551 006D  
                              _tmr_overflow 005C                                        l2385 0FE0  
                                      l2465 0109                                        l2801 05E7  
                                      l2635 0FBC                                        l2395 0FFB  
                                      l2539 01FA                                        l2475 0127  
                                      l2459 00EE                                        l2483 013D  
                                      l2811 0606                                        l2803 05F3  
                                      l2637 0FC2                                        l2549 0207  
                                      l2477 0132                                        l2469 010B  
                                      l2661 06E5                                        l2653 06E1  
                                      l4413 0270                                        l4405 0264  
                                      l2815 0EB0                                        l2495 0175  
                                      l2663 0703                                        l2807 05FB  
                                      l4407 0265                                        l2913 063A  
                                      l2761 055E                                        l4441 02D8  
                                      l4417 027A                                        l2923 0677  
                                      l2915 063E                                        l2907 0632  
                                      l2499 0180                                        l2917 0667  
                                      l4445 02F1                                        l4437 02B3  
                                      l2791 05C9                                        l2775 0590  
                                      l4463 0372                                        l4455 032F  
                                      l4377 06B2                                        l2769 0573  
                                      l4449 030A                                        l2787 05B9  
                                      l2779 05A0                                        l2883 074D  
                                      l4475 03C0                                        l4459 034E  
                                      l4469 0395                                        l2895 0615  
                                      l2879 0735                                        l2887 0717  
                                      l2897 060D                                        l2889 0756  
                                      l2899 061A                                        STR_1 03D3  
                                      STR_2 0451                                        STR_3 045E  
                                      STR_4 047F                                        STR_5 0410  
                                      STR_6 048F                                        STR_7 0477  
                                      STR_8 0483                                        STR_9 041A  
                                      _LATA 010C                                        u1415 0FE1  
                                      _LATC 010E                                        u1425 0FEB  
                                      u1355 0E62                                        u1435 0FF3  
                                      u1365 0E67                                        u1465 07D6  
                                      u1625 019B                                        u1395 0FD7  
                                      u1485 07E5                                        u1565 0102  
                                      u1495 07EC                                        u4127 0607  
                                      u1665 01C0                                        u4137 0D76  
                                      u4147 0EF3                                        _TMR0 0015  
                                      _WPUA 020C                                        _WPUC 020E  
                              __CFG_WRT$OFF 0000                               __CFG_FCMEN$ON 0000  
                                      abs@a 0020                                        _data 00C6  
                                      _atoi 060B                                        _main 0795  
                                      _init 0E23                                        fsr0h 0005  
                                      fsr1h 0007                                        indf0 0000  
                                      fsr0l 0004                                        indf1 0001  
                                      fsr1l 0006                                        btemp 007E  
                             __CFG_BOREN$ON 0000                                        start 0030  
                             __CFG_MCLRE$ON 0000                                       ??_abs 0022  
                           ?i1_PROTOCOL_EXT 0070                             ?i1_PROTOCOL_SAV 0070  
                           ?i1_PROTOCOL_SET 0070                   __size_of_DATAEE_WriteByte 0023  
                           ?i1_PROTOCOL_STA 0070                             ?i1_PROTOCOL_STP 0070  
                   __end_of_TMR0_Initialize 0D8C                               __CFG_PLLEN$ON 0000  
                             ?_EUSART_Write 0070              __size_of_OSCILLATOR_Initialize 0005  
             __end_of_OSCILLATOR_Initialize 0D1C                                       ?_atoi 0026  
                                     ?_main 0070                                       ?_init 0070  
                                     STR_10 047B                                       STR_11 048B  
                                     STR_12 0487                                       STR_20 0463  
                                     STR_13 03FC                                       STR_14 0473  
                                     STR_22 0467                                       STR_30 044A  
                                     STR_15 046F                                       STR_24 042E  
                                     STR_32 0424                                       STR_16 03F2  
                                     STR_17 0458                               __CFG_WDTE$OFF 0000  
                                     STR_18 0441                                       STR_34 0406  
                                     STR_19 046B                                       STR_35 0438  
                                     STR_36 03E4                                       STR_37 0467  
                                     STR_38 03F8                             __end_of___lwdiv 1000  
                                     i1l130 0021                                       i1l134 002B  
                                     i1l128 0015                             __end_of___lwmod 07F9  
                                     i1l357 0E8E                                       i1l717 0F8E  
                                     i1l739 0495                                       i1l756 04B8  
                                     i1l777 0556                           _PROTOCOL_Set_Func 0D50  
                PROTOCOL_I2C_Set_TLV@length 0020                                       _RCREG 0199  
                                     _RCSTA 019D                                       _TRISA 008C  
                                     _TRISC 008E                                       _TXREG 019A  
                                     _TXSTA 019E            __size_of_ADC_GetConversionResult 0009  
              __size_of_PROTOCOL_Initialize 0054                  PROTOCOL_I2C_Set_TLV@status 0024  
                        ?_PROTOCOL_Set_Func 0020                             _DATAEE_ReadByte 0D63  
           ??_PROTOCOL_Write_Device_Address 0023                             __end_of_dpowers 03CF  
                            _WDT_Initialize 0D13                                       _count 00B0  
            PROTOCOL_Initialize@inv_handler 002A                             __end_of_isdigit 0DAA  
                                     _value 0062                                       atoi@a 002B  
                                     atoi@s 002D                                       _putch 0D21  
                                     init@i 0021                                       pclath 000A  
                       ??_PROTOCOL_Set_Func 0022                           __end_of_ANALOG_IN 03D3  
                    ??_PROTOCOL_I2C_Set_TLV 0022                                       status 0003  
                                     wtemp0 007E                             __end_of_strncmp 0759  
                     _set_handler$intlevel0 0FA5                             __initialization 0032  
                              __end_of_atoi 067C                                __end_of_main 07CC  
                              __end_of_init 0E3D                              ??_EUSART_Write 0020  
                                 ??_I2C_ISR 0079                 ?_INTERRUPT_InterruptManager 0070  
                 __end_of_PROTOCOL_Set_Func 0D59            PROTOCOL_Initialize@start_handler 0026  
               ??_PROTOCOL_I2C_Send_uint8_t 0043                                      ??_atoi 0028  
                                    ??_main 0052                                      ??_init 0020  
                        _PROTOCOL_Read_Lock 0CF0                      __end_of_WDT_Initialize 0D17  
                __end_ofi1_DATAEE_WriteByte 0EAE               __size_of_ADC_IsConversionDone 0007  
                                    _ADCON0 009D                                      _ADCON1 009E  
                                    i1S4551 0800                                      _ADRESH 009C  
                                    _ADRESL 009B                                      _EEADRL 0191  
                                    _EEDATL 0193                                      _EECON2 0196  
                                    _ANSELA 018C                                      ?_putch 0070  
                                    _ANSELC 018E                         ?_PROTOCOL_Read_Lock 0070  
                        _PROTOCOL_Loop_Func 00C2                                      i1l1289 0EA5  
                                    i1l3077 0E42                                      i1l4311 0511  
                                    i1l2713 0762                                      i1l4321 052F  
                                    i1l2715 0768                                      i1l2731 0793  
                                    i1l2563 0F55                                      i1l4307 050E  
                                    i1l4315 051B                                      i1l2725 077F  
                                    i1l2709 075A                                      i1l4325 053B  
                                    i1l4317 0527                                      i1l4261 049F  
                                    i1l4333 054C                                      i1l2719 0775  
                                    i1l2575 0F6B                                      i1l4319 052A  
                                    i1l4271 04B0                                      i1l2729 0784  
                                    i1l2577 0F71                                      i1l4329 0540  
                                    i1l4273 04B4                                      i1l4265 04A4  
                                    i1l4361 0F97                                      i1l4353 0F8C  
                                    i1l4291 04E8                                      i1l4275 04BB  
                                    i1l4267 04A8                                      i1l4283 04D5  
                                    i1l4259 0499                                      i1l4285 04DE  
                                    i1l4269 04AC                                      i1l4279 04BD  
                                    i1l4359 0F95                                      i1l4297 04F3  
                    I2C_StatusCallback@next 0058                                      _OSCCON 0099  
          __size_of_TMR0_HasOverflowOccured 0004                                      _TMR0IF 005A  
                                    _SPBRGH 019C                                      _SPBRGL 019B  
                                    _WDTCON 0097              PROTOCOL_Initialize@set_handler 0028  
                              ?_set_handler 0020                              __CFG_PWRTE$OFF 0000  
                 PROTOCOL_Initialize@scaler 002B                                      ___wmul 0E58  
                            __CFG_STVREN$ON 0000                                   ??___lwdiv 0024  
                      ??_PROTOCOL_Read_Lock 0070                                   ??___lwmod 002C  
                              _type_no_data 006F                         _EUSART_Transmit_ISR 0E74  
                          ?_TMR0_Initialize 0070                                      _locked 0061  
                        _I2C_StatusCallback 0493                     __size_of_I2C_Initialize 0021  
                                    _printf 0068                     __end_of_DATAEE_ReadByte 0D70  
                              __pdataCOMMON 007D                                   ??_isdigit 0020  
                  __end_of_PROTOCOL_I2C_GET 0CED                    __end_of_PROTOCOL_I2C_SEN 0795  
                  __end_of_PROTOCOL_I2C_WHO 0CF0                         ?_I2C_StatusCallback 0070  
                           ?_WDT_Initialize 0070               i1DATAEE_WriteByte@GIEBitValue 0072  
          PROTOCOL_I2C_Send_uint8_t@pbuffer 0042                                   ??_strncmp 0025  
                 PROTOCOL_Send_uint8_t@pbuf 00EA                        ?_EUSART_Transmit_ISR 0070  
                      __size_of_EUSART_Read 001F                   _PROTOCOL_I2C_Send_uint8_t 06D0  
                   __end_of__initialization 0064                        ??_I2C_StatusCallback 0076  
              __size_of_ADC_StartConversion 0003                              __pcstackCOMMON 0070  
                              __pidataBANK0 0D1C                            _DATAEE_WriteByte 0F0E  
                             __end_of_putch 0D27                  __size_of_PROTOCOL_Set_Func 0009  
                     __end_of_PROTOCOL_Loop 03C5                     _ADC_GetConversionResult 0D47  
                            _OPTION_REGbits 0095                          __size_of_led_blink 000E  
                   PROTOCOL_Send_float@pbuf 00E2                       ??_EUSART_Transmit_ISR 0070  
                                   ??_putch 0022                                  __pbssBANK0 0052  
                                __pbssBANK1 00A0                                  __pbssBANK2 0120  
                                __pbssBANK3 01A0                      i1DATAEE_WriteByte@bAdd 0071  
                      __end_of_EUSART_Write 0F55                 __size_of_EUSART_Receive_ISR 001B  
                          ??i1_PROTOCOL_EXT 0070                            ??i1_PROTOCOL_SAV 0073  
                          ??i1_PROTOCOL_SET 0074                            ??i1_PROTOCOL_STA 0070  
                          ??i1_PROTOCOL_STP 0070                         _PROTOCOL_Initialize 067C  
                                __pmaintext 0795                           i1set_handler@mask 0072  
                                   ?___wmul 0020                                  __pintentry 0004  
                        __size_of_loop_func 00B4                                     _I2C_ISR 0F7A  
                                   _BAUDCON 019F                                  _device_id_ 00BA  
                                   _APFCON0 011D                                     _APFCON1 011E  
                                   ?_printf 002E                     __size_of_ADC_Initialize 0008  
                          ?_DATAEE_ReadByte 0070                               _eusartRxCount 0065  
                   I2C_StatusCallback@pdata 0078            I2C_StatusCallback@slaveWriteType 0059  
                PROTOCOL_Send_uint16_t@pbuf 00E7                        ?_PROTOCOL_Initialize 0024  
                    __size_ofi1_set_handler 0025                                     _OSCTUNE 0098  
                                   _SSP1ADD 0212                                     _SSP1BUF 0211  
                                   _SSP1MSK 0213                      _PROTOCOL_Start_Handler 00C4  
                   _TMR0_HasOverflowOccured 0D0F                        DATAEE_WriteByte@bAdd 0021  
                                _continuity 006C                                   _ANALOG_IN 03CF  
                      __size_of_set_handler 002A                           __end_of_led_blink 0D7E  
                             ?_PROTOCOL_INV 0070                               ?_PROTOCOL_EXT 0070  
                             ?_PROTOCOL_SAV 0070                               ?_PROTOCOL_SET 0070  
                             ?_PROTOCOL_STA 0070                               ?_PROTOCOL_RST 0070  
                             ?_PROTOCOL_STP 0070                             __size_of___wmul 001C  
                                   ___lwdiv 0FCB                                     ___lwmod 07CC  
                 ??_ADC_GetConversionResult 0022                              _I2C_Initialize 0EED  
                                   __ptext1 0E23                                     __ptext2 0D13  
                                   __ptext3 0D7E                                     __ptext4 0D50  
                                   __ptext5 023D                                     __ptext6 0717  
                                   __ptext7 0557                                     __ptext8 0D70  
                                   __ptext9 0DAA                             __size_of_printf 01D5  
                                   _dpowers 03C5                       _OSCILLATOR_Initialize 0D17  
                              __size_of_abs 000F  PROTOCOL_Write_Device_Address@device_id_i2c 0024  
                     ??_PROTOCOL_Initialize 002C                                     _isdigit 0D9B  
                                   _readbuf 00D9                                     _sec_cnt 005E  
                                   _invoked 005F                    ??_PIN_MANAGER_Initialize 0020  
                                   _sendbuf 00C9                                     _tmr_cnt 005D  
                                   clrloop0 0D28                                     _running 0060  
                                   _strncmp 0717                        end_of_initialization 0064  
                         __end_of_loop_func 060B                             _analog_in_flags 00B4  
                _PROTOCOL_Extension_Handler 00C0               __size_of_PROTOCOL_I2C_Set_TLV 0020  
                        i1_DATAEE_WriteByte 0E91                           _EUSART_Initialize 0E09  
              __end_of_ADC_IsConversionDone 0800                               i1_set_handler 0F55  
                        ?_EUSART_Initialize 0070                       _PROTOCOL_Tick_Handler 00BC  
                                 _RCSTAbits 019D                                     printf@c 0041  
                                   printf@f 002E                              ??_PROTOCOL_INV 0070  
                            ??_PROTOCOL_EXT 0020                              ??_PROTOCOL_SAV 0023  
                            ??_PROTOCOL_SET 0024                              ??_PROTOCOL_STA 0020  
                            ??_PROTOCOL_RST 0070                              ??_PROTOCOL_STP 0020  
                    __end_of_I2C_Initialize 0F0E                         ?i1_DATAEE_WriteByte 0070  
                              __pstringtext 03C5                         ??_EUSART_Initialize 0020  
                          ??_WDT_Initialize 0020                            __CFG_FOSC$INTOSC 0000  
                         ?_PROTOCOL_I2C_GET 0070                            set_handler@value 0020  
                         ?_PROTOCOL_I2C_SEN 0070                           ?_PROTOCOL_I2C_WHO 0070  
                     __size_of_EUSART_Write 0024                         _ADC_StartConversion 0CFC  
                 ??_TMR0_HasOverflowOccured 0020                          ??_PROTOCOL_I2C_GET 0070  
                        ??_PROTOCOL_I2C_SEN 0070                          ??_PROTOCOL_I2C_WHO 0070  
                      ??i1_DATAEE_WriteByte 0071                                  _tmr_scaler 006B  
                  __end_of_DATAEE_WriteByte 0F31                   __end_of_EUSART_Initialize 0E23  
                               printf@width 003F                        i1PROTOCOL_SET@value_ 0075  
                            ?i1_set_handler 0070                        ?_ADC_StartConversion 0070  
                           ?_I2C_Initialize 0070                 __size_of_PROTOCOL_Read_Lock 0003  
                            __end_of___wmul 0E74                               __pidataCOMMON 0003  
                              _EUSART_Write 0F31                              _ADC_Initialize 0D2D  
                    ?_OSCILLATOR_Initialize 0070                              __end_of_printf 023D  
                            PROTOCOL_Loop@c 0050                         start_initialization 0032  
                  __size_of_TMR0_Initialize 000E             __size_of_PIN_MANAGER_Initialize 0018  
                               __end_of_abs 0DB9                               ??_EUSART_Read 0020  
                               putch@txData 0022                         DATAEE_ReadByte@bAdd 0020  
                     ??_ADC_StartConversion 0020                 __size_of_I2C_StatusCallback 00C4  
                                  ??___wmul 0024                    PROTOCOL_Send_int8_t@pbuf 00E9  
      __end_of_PROTOCOL_Read_Device_Address 0CF9       __size_of_PROTOCOL_Read_Device_Address 0003  
              _PROTOCOL_Read_Device_Address 0CF6                      __end_of_ADC_Initialize 0D35  
                               __pdataBANK0 006B                                    ?_I2C_ISR 0070  
           PROTOCOL_I2C_Send_uint8_t@length 0046                                    ??_printf 0032  
                   i1DATAEE_WriteByte@bData 0070                 __end_of_EUSART_Transmit_ISR 0E91  
                               __pbssCOMMON 007C                                   ___latbits 0002  
                             __pcstackBANK0 0020                        _ADC_IsConversionDone 07F9  
                      _PROTOCOL_Inv_Handler 00BE                                _isdigit$1134 0020  
                      __end_of_PROTOCOL_INV 0D07                        __end_of_PROTOCOL_EXT 0003  
                      __end_of_PROTOCOL_SAV 0D47                        __end_of_PROTOCOL_SET 0DF1  
                      __end_of_PROTOCOL_STA 0D0F                        __end_of_PROTOCOL_RST 0D63  
                      __end_of_PROTOCOL_STP 0CFC                  __end_of_EUSART_Receive_ISR 0E58  
           PROTOCOL_Initialize@stop_handler 0027                  __size_of_EUSART_Initialize 001A  
                           ??i1_set_handler 0071                         __end_of_EUSART_Read 0ECD  
                    __size_of_PROTOCOL_Loop 0188       __end_of_PROTOCOL_Write_Device_Address 0D9B  
    __size_of_PROTOCOL_Write_Device_Address 000F               _PROTOCOL_Write_Device_Address 0D8C  
                          ___lwdiv@dividend 0022                      _PIN_MANAGER_Initialize 0DF1  
                      EUSART_Read@readValue 0021                           _ADC_SelectChannel 0DB9  
                                  ?___lwdiv 0020                                    ?___lwmod 0028  
                           ?_ADC_Initialize 0070                                _eusartRxHead 0067  
                        ?_ADC_SelectChannel 0070                                _eusartTxHead 007C  
                              _eusartRxTail 0066                          i1set_handler@value 0070  
                              _eusartTxTail 0069               ?_PROTOCOL_Read_Device_Address 0070  
              ??_INTERRUPT_InterruptManager 007B                   PROTOCOL_Send_int16_t@pbuf 00E5  
                                 _led_blink 0D70                                   __pswtext1 0800  
                                loop_func@i 004D                                  loop_func@v 004B  
                   _eusartTxBufferRemaining 0068                                    ?_isdigit 0070  
                       ??_ADC_SelectChannel 0020                       ?_ADC_IsConversionDone 0070  
                          ___lwdiv@quotient 0025                    __size_of_DATAEE_ReadByte 000D  
                                  ?_strncmp 0020                              __size_of_putch 0006  
                            _eusartRxBuffer 00A0                           ??_TMR0_Initialize 0020  
                            _eusartTxBuffer 00A8                              ___wmul@product 0024  
                                  _LATCbits 010E                        _PROTOCOL_Set_Handler 0052  
                                 clear_ram0 0D27                               ??_set_handler 0021  
                                  _PIE1bits 0091                                   _loop_func 0557  
                 __end_of_ADC_SelectChannel 0DC9                       PROTOCOL_I2C_SEN@pdata 0071  
                  PROTOCOL_I2C_Set_TLV@type 0023         __size_of_INTERRUPT_InterruptManager 002C  
                                  _PIR1bits 0011                                    _SSP1CON1 0215  
                                  _SSP1CON2 0216                                    _SSP1CON3 0217  
              PROTOCOL_Initialize@device_id 0024                                    _SSP1STAT 0214  
                            _readbuf_status 00C8                       _PROTOCOL_Stop_Handler 0054  
               __end_of_PROTOCOL_Initialize 06D0                                loop_func@out 0048  
                                 _threshold 006D                             set_handler@mask 0022  
                          __size_of_I2C_ISR 0027                                  ?_led_blink 0070  
                                _ADCON0bits 009D                     __size_ofi1_PROTOCOL_EXT 0001  
                   __size_ofi1_PROTOCOL_SAV 0009                     __size_ofi1_PROTOCOL_SET 0014  
                   __size_ofi1_PROTOCOL_STA 0004                     __size_ofi1_PROTOCOL_STP 0003  
                         ___wmul@multiplier 0020                __end_of_PROTOCOL_I2C_Set_TLV 0EED  
                             _PROTOCOL_Loop 023D                    ADC_SelectChannel@channel 0021  
                                printf@flag 003E                                  printf@prec 0036  
                     DATAEE_WriteByte@bData 0020                                 _EUSART_Read 0EAE  
               PROTOCOL_I2C_Set_TLV@pbuffer 0021                           ?_DATAEE_WriteByte 0020  
  __end_of_PROTOCOL_Backplane_Slave_Enabled 0D03   __size_of_PROTOCOL_Backplane_Slave_Enabled 0004  
        ??_PROTOCOL_Backplane_Slave_Enabled 0070           ?_PROTOCOL_Backplane_Slave_Enabled 0070  
          _PROTOCOL_Backplane_Slave_Enabled 0CFF                          ??_DATAEE_WriteByte 0021  
                             _slave_address 0064                                  _EECON1bits 0195  
                        PROTOCOL_SET@value_ 0025                                  ?_loop_func 0070  
                          ??_I2C_Initialize 0020                   __size_of_PROTOCOL_I2C_GET 0003  
                 __size_of_PROTOCOL_I2C_SEN 003C                   __size_of_PROTOCOL_I2C_WHO 0003  
                  ?_ADC_GetConversionResult 0020                     ??_OSCILLATOR_Initialize 0020  
                PROTOCOL_Set_Func@loop_func 0020                         __end_of_set_handler 0FCB  
            ?_PROTOCOL_Write_Device_Address 0070                             I2C_ISR@i2c_data 007A  
                          __size_of___lwdiv 0035                            __size_of___lwmod 002D  
                            ?_PROTOCOL_Loop 0070                      ??_ADC_IsConversionDone 0020  
                     __size_of_PROTOCOL_INV 0004                       __size_of_PROTOCOL_EXT 0001  
                     __size_of_PROTOCOL_SAV 0009                       __size_of_PROTOCOL_SET 0014  
                     __size_of_PROTOCOL_STA 0004                       __size_of_PROTOCOL_RST 000A  
                     __size_of_PROTOCOL_STP 0003              ??_PROTOCOL_Read_Device_Address 0020  
                          __size_of_isdigit 000F                             ___lwdiv@divisor 0020  
                           ___lwdiv@counter 0027                                    __ptext10 06D0  
                                  __ptext11 0068                                    __ptext20 0D47  
                                  __ptext12 0D21                                    __ptext21 060B  
                                  __ptext13 0F31                                    __ptext30 0F0E  
                                  __ptext22 0D9B                                    __ptext14 07CC  
                                  __ptext31 0002                                    __ptext23 0E58  
                                  __ptext15 0FCB                                    __ptext40 0E09  
                                  __ptext32 0EAE                                    __ptext24 0D0F  
                                  __ptext16 0ECD                                    __ptext41 0D2D  
                                  __ptext33 067C                                    __ptext25 0D8C  
                                  __ptext17 0CFC                                    __ptext50 0E91  
                                  __ptext34 0FA1                                    __ptext26 0CF9  
                                  __ptext18 0DB9                                    __ptext51 0CE9  
                                  __ptext43 0F7A                                    __ptext35 0D63  
                                  __ptext27 0D0B                                    __ptext19 07F9  
                                  __ptext60 0E3D                                    __ptext52 0CF0  
                                  __ptext44 0493                                    __ptext36 0DF1  
                                  __ptext28 0DDD                                    __ptext53 0D59  
                                  __ptext45 0CF3                                    __ptext37 0D17  
                                  __ptext29 0D3E                                    __ptext54 0D03  
                                  __ptext46 0D07                                    __ptext38 0EED  
                                  __ptext55 0CED                                    __ptext47 0DC9  
                                  __ptext39 0CF6                                    __ptext56 0759  
                                  __ptext48 0F55                                    __ptext57 0CEA  
                                  __ptext49 0D35                                    __ptext58 0CFF  
                                  __ptext59 0E74                                _SSP1CON1bits 0215  
                              _SSP1CON2bits 0216                                    _float100 00B8  
               __size_ofi1_DATAEE_WriteByte 001D                                set_handler@i 0023  
               DATAEE_WriteByte@GIEBitValue 0022                            __size_of_strncmp 0042  
                             __size_of_atoi 0071                               __size_of_main 0037  
                             __size_of_init 001A                                  strncmp@len 0023  
                         ??_DATAEE_ReadByte 0020                  __size_of_ADC_SelectChannel 0010  
                   _BACKPLANE_SLAVE_ADDRESS 006E                  __end_of_PROTOCOL_Read_Lock 0CF3  
                                  int$flags 007E                                    _position 00DE  
                                  atoi@sign 002A                                _PROTOCOL_INV 0D03  
                              _PROTOCOL_EXT 0002                                _PROTOCOL_SAV 0D3E  
                              _PROTOCOL_SET 0DDD                                _PROTOCOL_STA 0D0B  
                              _PROTOCOL_RST 0D59                                _PROTOCOL_STP 0CF9  
        __end_of_INTERRUPT_InterruptManager 0030                  _INTERRUPT_InterruptManager 0004  
                                 printf@len 003C                                   printf@val 003A  
                              _SSP1STATbits 0214          __size_of_PROTOCOL_I2C_Send_uint8_t 0047  
                ?_PROTOCOL_I2C_Send_uint8_t 0042                                 ??_led_blink 0020  
                  ?_TMR0_HasOverflowOccured 0070                          _I2C_slaveWriteData 007D  
                                _INTCONbits 000B                                    isdigit@c 0021  
                   __size_of_WDT_Initialize 0004                                    intlevel1 0000  
               __end_of_ADC_StartConversion 0CFF                              i1set_handler@i 0073  
                          ___lwmod@dividend 002A                     ?_PIN_MANAGER_Initialize 0070  
           __end_of_ADC_GetConversionResult 0D50                           __CFG_CLKOUTEN$OFF 0000  
                __end_of_I2C_StatusCallback 0557                                 ??_loop_func 0047  
                      _PROTOCOL_I2C_Set_TLV 0ECD                                 _set_handler 0FA1  
                                 strncmp@s1 0020                                   strncmp@s2 0022  
           I2C_StatusCallback@i2c_bus_state 0077                            ??_ADC_Initialize 0020  
                   _backplane_slave_enabled 005B                                    printf@ap 0039  
                                  printf@cp 0037                          _EUSART_Receive_ISR 0E3D  
                           ??_PROTOCOL_Loop 004E                              i1_PROTOCOL_EXT 0CE9  
                            i1_PROTOCOL_SAV 0D35                              i1_PROTOCOL_SET 0DC9  
                            i1_PROTOCOL_STA 0D07                              i1_PROTOCOL_STP 0CF3  
         __end_of_PROTOCOL_I2C_Send_uint8_t 0717                                  _OPTION_REG 0095  
                       ?_EUSART_Receive_ISR 0070                             ___lwmod@divisor 0028  
                           _TMR0_Initialize 0D7E                             ___lwmod@counter 002D  
               PROTOCOL_Loop@device_address 0051                        PROTOCOL_EXT@char_buf 0020  
                        EUSART_Write@txData 0021                __size_of_EUSART_Transmit_ISR 001D  
            __end_of_PIN_MANAGER_Initialize 0E09                        ??_EUSART_Receive_ISR 0070  
                     ?_PROTOCOL_I2C_Set_TLV 0020                            _PROTOCOL_I2C_GET 0CEA  
                     __end_ofi1_set_handler 0F7A                            _PROTOCOL_I2C_SEN 0759  
                          _PROTOCOL_I2C_WHO 0CED  
